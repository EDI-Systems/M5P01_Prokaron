; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f4xx_hal_dma.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f4xx_hal_dma.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\STM32F4xx_HAL_Driver\Inc\Conf -I.\Source -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F405RGT6-FPU\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F405xx -DSTM32F405xx -DUSE_HAL_DRIVER -DHSE_VALUE=8000000 -DPLL_M=8 --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f4xx_hal_dma.crf ..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dma.c]
                          THUMB

                          AREA ||i.HAL_DMA_Abort||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Abort PROC
;;;522      */
;;;523    HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;524    {
000004  4604              MOV      r4,r0
;;;525      /* calculate DMA base and stream number */
;;;526      DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
;;;527      
;;;528      uint32_t tickstart = HAL_GetTick();
000006  6dc7              LDR      r7,[r0,#0x5c]
000008  f7fffffe          BL       HAL_GetTick
00000c  4605              MOV      r5,r0
;;;529      
;;;530      if(hdma->State != HAL_DMA_STATE_BUSY)
00000e  6ba0              LDR      r0,[r4,#0x38]
000010  2600              MOVS     r6,#0
000012  2802              CMP      r0,#2
000014  d005              BEQ      |L1.34|
;;;531      {
;;;532        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
000016  2080              MOVS     r0,#0x80
000018  65a0              STR      r0,[r4,#0x58]
;;;533        
;;;534        /* Process Unlocked */
;;;535        __HAL_UNLOCK(hdma);
;;;536        
;;;537        return HAL_ERROR;
00001a  2001              MOVS     r0,#1
00001c  6366              STR      r6,[r4,#0x34]
;;;538      }
;;;539      else
;;;540      {
;;;541        /* Disable all the transfer interrupts */
;;;542        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
;;;543        hdma->Instance->FCR &= ~(DMA_IT_FE);
;;;544        
;;;545        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
;;;546        {
;;;547          hdma->Instance->CR  &= ~(DMA_IT_HT);
;;;548        }
;;;549        
;;;550        /* Disable the stream */
;;;551        __HAL_DMA_DISABLE(hdma);
;;;552        
;;;553        /* Check if the DMA Stream is effectively disabled */
;;;554        while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
;;;555        {
;;;556          /* Check for the Timeout */
;;;557          if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
;;;558          {
;;;559            /* Update error code */
;;;560            hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
;;;561            
;;;562            /* Process Unlocked */
;;;563            __HAL_UNLOCK(hdma);
;;;564            
;;;565            /* Change the DMA state */
;;;566            hdma->State = HAL_DMA_STATE_TIMEOUT;
;;;567            
;;;568            return HAL_TIMEOUT;
;;;569          }
;;;570        }
;;;571        
;;;572        /* Clear all interrupt flags at correct offset within the register */
;;;573        regs->IFCR = 0x3FU << hdma->StreamIndex;
;;;574        
;;;575        /* Process Unlocked */
;;;576        __HAL_UNLOCK(hdma);
;;;577        
;;;578        /* Change the DMA state*/
;;;579        hdma->State = HAL_DMA_STATE_READY;
;;;580      }
;;;581      return HAL_OK;
;;;582    }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.34|
000022  6820              LDR      r0,[r4,#0]            ;542
000024  6801              LDR      r1,[r0,#0]            ;542
000026  f0210116          BIC      r1,r1,#0x16           ;542
00002a  6001              STR      r1,[r0,#0]            ;542
00002c  6820              LDR      r0,[r4,#0]            ;543
00002e  6941              LDR      r1,[r0,#0x14]         ;543
000030  f0210180          BIC      r1,r1,#0x80           ;543
000034  6141              STR      r1,[r0,#0x14]         ;543
000036  6c60              LDR      r0,[r4,#0x44]         ;545
000038  2800              CMP      r0,#0                 ;545
00003a  bf04              ITT      EQ                    ;545
00003c  6ce0              LDREQ    r0,[r4,#0x4c]         ;545
00003e  2800              CMPEQ    r0,#0                 ;545
000040  d004              BEQ      |L1.76|
000042  6820              LDR      r0,[r4,#0]            ;547
000044  6801              LDR      r1,[r0,#0]            ;547
000046  f0210108          BIC      r1,r1,#8              ;547
00004a  6001              STR      r1,[r0,#0]            ;547
                  |L1.76|
00004c  6820              LDR      r0,[r4,#0]            ;551
00004e  6801              LDR      r1,[r0,#0]            ;551
000050  f0210101          BIC      r1,r1,#1              ;551
000054  6001              STR      r1,[r0,#0]            ;551
000056  6820              LDR      r0,[r4,#0]            ;554
000058  6800              LDR      r0,[r0,#0]            ;554
00005a  f0100f01          TST      r0,#1                 ;554
00005e  d010              BEQ      |L1.130|
                  |L1.96|
000060  f7fffffe          BL       HAL_GetTick
000064  1b40              SUBS     r0,r0,r5              ;557
000066  2805              CMP      r0,#5                 ;557
000068  d906              BLS      |L1.120|
00006a  2020              MOVS     r0,#0x20              ;560
00006c  65a0              STR      r0,[r4,#0x58]         ;560
00006e  2003              MOVS     r0,#3                 ;566
000070  6366              STR      r6,[r4,#0x34]         ;566
000072  63a0              STR      r0,[r4,#0x38]         ;566
000074  e8bd81f0          POP      {r4-r8,pc}
                  |L1.120|
000078  6820              LDR      r0,[r4,#0]            ;568
00007a  6800              LDR      r0,[r0,#0]            ;568
00007c  f0100f01          TST      r0,#1                 ;568
000080  d1ee              BNE      |L1.96|
                  |L1.130|
000082  f8940060          LDRB     r0,[r4,#0x60]         ;573
000086  213f              MOVS     r1,#0x3f              ;573
000088  fa01f000          LSL      r0,r1,r0              ;573
00008c  60b8              STR      r0,[r7,#8]            ;573
00008e  2001              MOVS     r0,#1                 ;579
000090  6366              STR      r6,[r4,#0x34]         ;579
000092  63a0              STR      r0,[r4,#0x38]         ;579
000094  2000              MOVS     r0,#0                 ;581
000096  e8bd81f0          POP      {r4-r8,pc}
;;;583    
                          ENDP


                          AREA ||i.HAL_DMA_Abort_IT||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Abort_IT PROC
;;;589      */
;;;590    HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
000000  6b81              LDR      r1,[r0,#0x38]
;;;591    {
;;;592      if(hdma->State != HAL_DMA_STATE_BUSY)
000002  2902              CMP      r1,#2
000004  d003              BEQ      |L2.14|
;;;593      {
;;;594        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
000006  2180              MOVS     r1,#0x80
000008  6581              STR      r1,[r0,#0x58]
;;;595        return HAL_ERROR;
00000a  2001              MOVS     r0,#1
;;;596      }
;;;597      else
;;;598      {
;;;599        /* Set Abort State  */
;;;600        hdma->State = HAL_DMA_STATE_ABORT;
;;;601        
;;;602        /* Disable the stream */
;;;603        __HAL_DMA_DISABLE(hdma);
;;;604      }
;;;605    
;;;606      return HAL_OK;
;;;607    }
00000c  4770              BX       lr
                  |L2.14|
00000e  2105              MOVS     r1,#5                 ;600
000010  6381              STR      r1,[r0,#0x38]         ;600
000012  6800              LDR      r0,[r0,#0]            ;603
000014  6801              LDR      r1,[r0,#0]            ;603
000016  f0210101          BIC      r1,r1,#1              ;603
00001a  6001              STR      r1,[r0,#0]            ;603
00001c  2000              MOVS     r0,#0                 ;606
00001e  4770              BX       lr
;;;608    
                          ENDP


                          AREA ||i.HAL_DMA_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DMA_DeInit PROC
;;;325      */
;;;326    HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
000000  2800              CMP      r0,#0
;;;327    {
;;;328      DMA_Base_Registers *regs;
;;;329    
;;;330      /* Check the DMA peripheral state */
;;;331      if(hdma == NULL)
;;;332      {
;;;333        return HAL_ERROR;
000002  bf04              ITT      EQ
000004  2001              MOVEQ    r0,#1
;;;334      }
;;;335      
;;;336      /* Check the DMA peripheral state */
;;;337      if(hdma->State == HAL_DMA_STATE_BUSY)
;;;338      {
;;;339        /* Return error status */
;;;340        return HAL_BUSY;
;;;341      }
;;;342    
;;;343      /* Check the parameters */
;;;344      assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
;;;345    
;;;346      /* Disable the selected DMA Streamx */
;;;347      __HAL_DMA_DISABLE(hdma);
;;;348    
;;;349      /* Reset DMA Streamx control register */
;;;350      hdma->Instance->CR   = 0U;
;;;351    
;;;352      /* Reset DMA Streamx number of data to transfer register */
;;;353      hdma->Instance->NDTR = 0U;
;;;354    
;;;355      /* Reset DMA Streamx peripheral address register */
;;;356      hdma->Instance->PAR  = 0U;
;;;357    
;;;358      /* Reset DMA Streamx memory 0 address register */
;;;359      hdma->Instance->M0AR = 0U;
;;;360      
;;;361      /* Reset DMA Streamx memory 1 address register */
;;;362      hdma->Instance->M1AR = 0U;
;;;363      
;;;364      /* Reset DMA Streamx FIFO control register */
;;;365      hdma->Instance->FCR  = 0x00000021U;
;;;366      
;;;367      /* Get DMA steam Base Address */  
;;;368      regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
;;;369      
;;;370      /* Clear all interrupt flags at correct offset within the register */
;;;371      regs->IFCR = 0x3FU << hdma->StreamIndex;
;;;372    
;;;373      /* Initialize the error code */
;;;374      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;375    
;;;376      /* Initialize the DMA state */
;;;377      hdma->State = HAL_DMA_STATE_RESET;
;;;378    
;;;379      /* Release Lock */
;;;380      __HAL_UNLOCK(hdma);
;;;381    
;;;382      return HAL_OK;
;;;383    }
000006  4770              BXEQ     lr
000008  6b81              LDR      r1,[r0,#0x38]         ;337
00000a  2902              CMP      r1,#2                 ;337
00000c  bf04              ITT      EQ                    ;340
00000e  2002              MOVEQ    r0,#2                 ;340
000010  4770              BXEQ     lr
000012  6801              LDR      r1,[r0,#0]            ;347
000014  680a              LDR      r2,[r1,#0]            ;347
000016  f0220201          BIC      r2,r2,#1              ;347
00001a  600a              STR      r2,[r1,#0]            ;347
00001c  6802              LDR      r2,[r0,#0]            ;350
00001e  2100              MOVS     r1,#0                 ;350
000020  6011              STR      r1,[r2,#0]            ;350
000022  6802              LDR      r2,[r0,#0]            ;353
000024  6051              STR      r1,[r2,#4]            ;353
000026  6802              LDR      r2,[r0,#0]            ;356
000028  6091              STR      r1,[r2,#8]            ;356
00002a  6802              LDR      r2,[r0,#0]            ;359
00002c  60d1              STR      r1,[r2,#0xc]          ;359
00002e  6802              LDR      r2,[r0,#0]            ;362
000030  6111              STR      r1,[r2,#0x10]         ;362
000032  6803              LDR      r3,[r0,#0]            ;365
000034  2221              MOVS     r2,#0x21              ;365
000036  615a              STR      r2,[r3,#0x14]         ;365
000038  6802              LDR      r2,[r0,#0]            ;365
00003a  f8dfc038          LDR      r12,|L3.116|
00003e  b2d3              UXTB     r3,r2                 ;365
000040  3b10              SUBS     r3,r3,#0x10           ;365
000042  fbacc303          UMULL    r12,r3,r12,r3         ;365
000046  f8dfc030          LDR      r12,|L3.120|
00004a  091b              LSRS     r3,r3,#4              ;365
00004c  2b03              CMP      r3,#3                 ;365
00004e  f81cc003          LDRB     r12,[r12,r3]          ;365
000052  f8c0c060          STR      r12,[r0,#0x60]        ;365
000056  f36f0209          BFC      r2,#0,#10             ;365
00005a  bf88              IT       HI                    ;365
00005c  1d12              ADDHI    r2,r2,#4              ;365
00005e  233f              MOVS     r3,#0x3f              ;371
000060  fa03f30c          LSL      r3,r3,r12             ;371
000064  65c2              STR      r2,[r0,#0x5c]         ;371
000066  6093              STR      r3,[r2,#8]            ;371
000068  6581              STR      r1,[r0,#0x58]         ;374
00006a  6381              STR      r1,[r0,#0x38]         ;377
00006c  6341              STR      r1,[r0,#0x34]         ;382
00006e  2000              MOVS     r0,#0                 ;382
000070  4770              BX       lr
;;;384    
                          ENDP

000072  0000              DCW      0x0000
                  |L3.116|
                          DCD      0xaaaaaaab
                  |L3.120|
                          DCD      ||.constdata||

                          AREA ||i.HAL_DMA_GetError||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetError PROC
;;;1132     */
;;;1133   uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
000000  6d80              LDR      r0,[r0,#0x58]
;;;1134   {
;;;1135     return hdma->ErrorCode;
;;;1136   }
000002  4770              BX       lr
;;;1137   
                          ENDP


                          AREA ||i.HAL_DMA_GetState||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetState PROC
;;;1121     */
;;;1122   HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
000000  6b80              LDR      r0,[r0,#0x38]
;;;1123   {
;;;1124     return hdma->State;
;;;1125   }
000002  4770              BX       lr
;;;1126   
                          ENDP


                          AREA ||i.HAL_DMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_DMA_IRQHandler PROC
;;;755      */
;;;756    void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;757    {
000004  4604              MOV      r4,r0
;;;758      uint32_t tmpisr;
;;;759      __IO uint32_t count = 0U;
000006  2700              MOVS     r7,#0
;;;760      uint32_t timeout = SystemCoreClock / 9600U;
000008  9700              STR      r7,[sp,#0]
00000a  486f              LDR      r0,|L6.456|
00000c  f44f5116          MOV      r1,#0x2580
;;;761    
;;;762      /* calculate DMA base and stream number */
;;;763      DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
;;;764    
;;;765      tmpisr = regs->ISR;
000010  6de5              LDR      r5,[r4,#0x5c]
000012  6800              LDR      r0,[r0,#0]            ;760  ; SystemCoreClock
000014  fbb0f9f1          UDIV     r9,r0,r1              ;760
000018  682e              LDR      r6,[r5,#0]
;;;766    
;;;767      /* Transfer Error Interrupt management ***************************************/
;;;768      if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
00001a  f8940060          LDRB     r0,[r4,#0x60]
00001e  2108              MOVS     r1,#8
000020  fa01f000          LSL      r0,r1,r0
000024  4230              TST      r0,r6
000026  d011              BEQ      |L6.76|
;;;769      {
;;;770        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
000028  6820              LDR      r0,[r4,#0]
00002a  6802              LDR      r2,[r0,#0]
00002c  f0120f04          TST      r2,#4
000030  d00c              BEQ      |L6.76|
;;;771        {
;;;772          /* Disable the transfer error interrupt */
;;;773          hdma->Instance->CR  &= ~(DMA_IT_TE);
000032  6802              LDR      r2,[r0,#0]
000034  f0220204          BIC      r2,r2,#4
000038  6002              STR      r2,[r0,#0]
;;;774          
;;;775          /* Clear the transfer error flag */
;;;776          regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
00003a  f8940060          LDRB     r0,[r4,#0x60]
00003e  fa01f000          LSL      r0,r1,r0
000042  60a8              STR      r0,[r5,#8]
;;;777          
;;;778          /* Update error code */
;;;779          hdma->ErrorCode |= HAL_DMA_ERROR_TE;
000044  6da0              LDR      r0,[r4,#0x58]
000046  f0400001          ORR      r0,r0,#1
00004a  65a0              STR      r0,[r4,#0x58]
                  |L6.76|
;;;780        }
;;;781      }
;;;782      /* FIFO Error Interrupt management ******************************************/
;;;783      if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
00004c  f8940060          LDRB     r0,[r4,#0x60]
000050  f04f0801          MOV      r8,#1
000054  fa08f000          LSL      r0,r8,r0
000058  4230              TST      r0,r6
00005a  d009              BEQ      |L6.112|
;;;784      {
;;;785        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
00005c  6821              LDR      r1,[r4,#0]
00005e  6949              LDR      r1,[r1,#0x14]
000060  f0110f80          TST      r1,#0x80
000064  d004              BEQ      |L6.112|
;;;786        {
;;;787          /* Clear the FIFO error flag */
;;;788          regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
000066  60a8              STR      r0,[r5,#8]
;;;789    
;;;790          /* Update error code */
;;;791          hdma->ErrorCode |= HAL_DMA_ERROR_FE;
000068  6da0              LDR      r0,[r4,#0x58]
00006a  f0400002          ORR      r0,r0,#2
00006e  65a0              STR      r0,[r4,#0x58]
                  |L6.112|
;;;792        }
;;;793      }
;;;794      /* Direct Mode Error Interrupt management ***********************************/
;;;795      if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
000070  f8941060          LDRB     r1,[r4,#0x60]
000074  2004              MOVS     r0,#4
000076  4088              LSLS     r0,r0,r1
000078  4230              TST      r0,r6
00007a  d009              BEQ      |L6.144|
;;;796      {
;;;797        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
00007c  6821              LDR      r1,[r4,#0]
00007e  6809              LDR      r1,[r1,#0]
000080  f0110f02          TST      r1,#2
000084  d004              BEQ      |L6.144|
;;;798        {
;;;799          /* Clear the direct mode error flag */
;;;800          regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
000086  60a8              STR      r0,[r5,#8]
;;;801    
;;;802          /* Update error code */
;;;803          hdma->ErrorCode |= HAL_DMA_ERROR_DME;
000088  6da0              LDR      r0,[r4,#0x58]
00008a  f0400004          ORR      r0,r0,#4
00008e  65a0              STR      r0,[r4,#0x58]
                  |L6.144|
;;;804        }
;;;805      }
;;;806      /* Half Transfer Complete Interrupt management ******************************/
;;;807      if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
000090  f8941060          LDRB     r1,[r4,#0x60]
000094  2010              MOVS     r0,#0x10
000096  4088              LSLS     r0,r0,r1
000098  4230              TST      r0,r6
00009a  d020              BEQ      |L6.222|
;;;808      {
;;;809        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
00009c  6821              LDR      r1,[r4,#0]
00009e  6809              LDR      r1,[r1,#0]
0000a0  f0110f08          TST      r1,#8
0000a4  d01b              BEQ      |L6.222|
;;;810        {
;;;811          /* Clear the half transfer complete flag */
;;;812          regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
0000a6  60a8              STR      r0,[r5,#8]
;;;813          
;;;814          /* Multi_Buffering mode enabled */
;;;815          if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
0000a8  6820              LDR      r0,[r4,#0]
0000aa  6801              LDR      r1,[r0,#0]
0000ac  f4112f80          TST      r1,#0x40000
0000b0  d009              BEQ      |L6.198|
;;;816          {
;;;817            /* Current memory buffer used is Memory 0 */
;;;818            if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
0000b2  6800              LDR      r0,[r0,#0]
0000b4  f4102f00          TST      r0,#0x80000
0000b8  d002              BEQ      |L6.192|
;;;819            {
;;;820              if(hdma->XferHalfCpltCallback != NULL)
;;;821              {
;;;822                /* Half transfer callback */
;;;823                hdma->XferHalfCpltCallback(hdma);
;;;824              }
;;;825            }
;;;826            /* Current memory buffer used is Memory 1 */
;;;827            else
;;;828            {
;;;829              if(hdma->XferM1HalfCpltCallback != NULL)
0000ba  6ce1              LDR      r1,[r4,#0x4c]
0000bc  b179              CBZ      r1,|L6.222|
0000be  e00c              B        |L6.218|
                  |L6.192|
0000c0  6c61              LDR      r1,[r4,#0x44]         ;820
0000c2  b951              CBNZ     r1,|L6.218|
0000c4  e00b              B        |L6.222|
                  |L6.198|
;;;830              {
;;;831                /* Half transfer callback */
;;;832                hdma->XferM1HalfCpltCallback(hdma);
;;;833              }
;;;834            }
;;;835          }
;;;836          else
;;;837          {
;;;838            /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
;;;839            if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
0000c6  6801              LDR      r1,[r0,#0]
0000c8  f4117f80          TST      r1,#0x100
0000cc  d103              BNE      |L6.214|
;;;840            {
;;;841              /* Disable the half transfer interrupt */
;;;842              hdma->Instance->CR  &= ~(DMA_IT_HT);
0000ce  6801              LDR      r1,[r0,#0]
0000d0  f0210108          BIC      r1,r1,#8
0000d4  6001              STR      r1,[r0,#0]
                  |L6.214|
;;;843            }
;;;844            
;;;845            if(hdma->XferHalfCpltCallback != NULL)
0000d6  6c61              LDR      r1,[r4,#0x44]
0000d8  b109              CBZ      r1,|L6.222|
                  |L6.218|
;;;846            {
;;;847              /* Half transfer callback */
;;;848              hdma->XferHalfCpltCallback(hdma);
0000da  4620              MOV      r0,r4
0000dc  4788              BLX      r1
                  |L6.222|
;;;849            }
;;;850          }
;;;851        }
;;;852      }
;;;853      /* Transfer Complete Interrupt management ***********************************/
;;;854      if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
0000de  f8941060          LDRB     r1,[r4,#0x60]
0000e2  2020              MOVS     r0,#0x20
0000e4  4088              LSLS     r0,r0,r1
0000e6  4230              TST      r0,r6
0000e8  d046              BEQ      |L6.376|
;;;855      {
;;;856        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
0000ea  6821              LDR      r1,[r4,#0]
0000ec  6809              LDR      r1,[r1,#0]
0000ee  f0110f10          TST      r1,#0x10
0000f2  d041              BEQ      |L6.376|
;;;857        {
;;;858          /* Clear the transfer complete flag */
;;;859          regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
0000f4  60a8              STR      r0,[r5,#8]
;;;860          
;;;861          if(HAL_DMA_STATE_ABORT == hdma->State)
0000f6  6ba0              LDR      r0,[r4,#0x38]
0000f8  2805              CMP      r0,#5
;;;862          {
;;;863            /* Disable all the transfer interrupts */
;;;864            hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
;;;865            hdma->Instance->FCR &= ~(DMA_IT_FE);
;;;866            
;;;867            if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
;;;868            {
;;;869              hdma->Instance->CR  &= ~(DMA_IT_HT);
;;;870            }
;;;871    
;;;872            /* Clear all interrupt flags at correct offset within the register */
;;;873            regs->IFCR = 0x3FU << hdma->StreamIndex;
;;;874    
;;;875            /* Process Unlocked */
;;;876            __HAL_UNLOCK(hdma);
;;;877    
;;;878            /* Change the DMA state */
;;;879            hdma->State = HAL_DMA_STATE_READY;
;;;880    
;;;881            if(hdma->XferAbortCallback != NULL)
;;;882            {
;;;883              hdma->XferAbortCallback(hdma);
;;;884            }
;;;885            return;
;;;886          }
;;;887    
;;;888          if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
0000fa  6820              LDR      r0,[r4,#0]
0000fc  6801              LDR      r1,[r0,#0]
0000fe  d009              BEQ      |L6.276|
000100  f4112f80          TST      r1,#0x40000
000104  d029              BEQ      |L6.346|
;;;889          {
;;;890            /* Current memory buffer used is Memory 0 */
;;;891            if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
000106  6800              LDR      r0,[r0,#0]
000108  f4102f00          TST      r0,#0x80000
00010c  d022              BEQ      |L6.340|
;;;892            {
;;;893              if(hdma->XferM1CpltCallback != NULL)
;;;894              {
;;;895                /* Transfer complete Callback for memory1 */
;;;896                hdma->XferM1CpltCallback(hdma);
;;;897              }
;;;898            }
;;;899            /* Current memory buffer used is Memory 1 */
;;;900            else
;;;901            {
;;;902              if(hdma->XferCpltCallback != NULL)
00010e  6c21              LDR      r1,[r4,#0x40]
000110  b311              CBZ      r1,|L6.344|
000112  e02f              B        |L6.372|
                  |L6.276|
000114  f0210116          BIC      r1,r1,#0x16           ;864
000118  6001              STR      r1,[r0,#0]            ;864
00011a  6820              LDR      r0,[r4,#0]            ;865
00011c  6941              LDR      r1,[r0,#0x14]         ;865
00011e  f0210180          BIC      r1,r1,#0x80           ;865
000122  6141              STR      r1,[r0,#0x14]         ;865
000124  6c60              LDR      r0,[r4,#0x44]         ;867
000126  2800              CMP      r0,#0                 ;867
000128  bf04              ITT      EQ                    ;867
00012a  6ce0              LDREQ    r0,[r4,#0x4c]         ;867
00012c  2800              CMPEQ    r0,#0                 ;867
00012e  d004              BEQ      |L6.314|
000130  6820              LDR      r0,[r4,#0]            ;869
000132  6801              LDR      r1,[r0,#0]            ;869
000134  f0210108          BIC      r1,r1,#8              ;869
000138  6001              STR      r1,[r0,#0]            ;869
                  |L6.314|
00013a  f8940060          LDRB     r0,[r4,#0x60]         ;873
00013e  213f              MOVS     r1,#0x3f              ;873
000140  fa01f000          LSL      r0,r1,r0              ;873
000144  60a8              STR      r0,[r5,#8]            ;873
000146  f8c48038          STR      r8,[r4,#0x38]         ;879
00014a  6367              STR      r7,[r4,#0x34]         ;879
00014c  6d61              LDR      r1,[r4,#0x54]         ;881
00014e  bba9              CBNZ     r1,|L6.444|
;;;903              {
;;;904                /* Transfer complete Callback for memory0 */
;;;905                hdma->XferCpltCallback(hdma);
;;;906              }
;;;907            }
;;;908          }
;;;909          /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
;;;910          else
;;;911          {
;;;912            if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
;;;913            {
;;;914              /* Disable the transfer complete interrupt */
;;;915              hdma->Instance->CR  &= ~(DMA_IT_TC);
;;;916    
;;;917              /* Process Unlocked */
;;;918              __HAL_UNLOCK(hdma);
;;;919    
;;;920              /* Change the DMA state */
;;;921              hdma->State = HAL_DMA_STATE_READY;
;;;922            }
;;;923    
;;;924            if(hdma->XferCpltCallback != NULL)
;;;925            {
;;;926              /* Transfer complete callback */
;;;927              hdma->XferCpltCallback(hdma);
;;;928            }
;;;929          }
;;;930        }
;;;931      }
;;;932      
;;;933      /* manage error case */
;;;934      if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
;;;935      {
;;;936        if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
;;;937        {
;;;938          hdma->State = HAL_DMA_STATE_ABORT;
;;;939    
;;;940          /* Disable the stream */
;;;941          __HAL_DMA_DISABLE(hdma);
;;;942    
;;;943          do
;;;944          {
;;;945            if (++count > timeout)
;;;946            {
;;;947              break;
;;;948            }
;;;949          }
;;;950          while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
;;;951    
;;;952          /* Process Unlocked */
;;;953          __HAL_UNLOCK(hdma);
;;;954    
;;;955          /* Change the DMA state */
;;;956          hdma->State = HAL_DMA_STATE_READY;
;;;957        }
;;;958    
;;;959        if(hdma->XferErrorCallback != NULL)
;;;960        {
;;;961          /* Transfer error callback */
;;;962          hdma->XferErrorCallback(hdma);
;;;963        }
;;;964      }
;;;965    }
000150  e8bd83f8          POP      {r3-r9,pc}
                  |L6.340|
000154  6ca1              LDR      r1,[r4,#0x48]         ;893
000156  b969              CBNZ     r1,|L6.372|
                  |L6.344|
000158  e00e              B        |L6.376|
                  |L6.346|
00015a  6801              LDR      r1,[r0,#0]            ;912
00015c  f4117f80          TST      r1,#0x100             ;912
000160  d106              BNE      |L6.368|
000162  6801              LDR      r1,[r0,#0]            ;915
000164  f0210110          BIC      r1,r1,#0x10           ;915
000168  6001              STR      r1,[r0,#0]            ;915
00016a  f8c48038          STR      r8,[r4,#0x38]         ;921
00016e  6367              STR      r7,[r4,#0x34]         ;921
                  |L6.368|
000170  6c21              LDR      r1,[r4,#0x40]         ;924
000172  b109              CBZ      r1,|L6.376|
                  |L6.372|
000174  4620              MOV      r0,r4                 ;927
000176  4788              BLX      r1                    ;927
                  |L6.376|
000178  6da0              LDR      r0,[r4,#0x58]         ;934
00017a  2800              CMP      r0,#0                 ;934
00017c  bf08              IT       EQ
00017e  e8bd83f8          POPEQ    {r3-r9,pc}
000182  6da0              LDR      r0,[r4,#0x58]         ;936
000184  f0100f01          TST      r0,#1                 ;936
000188  d013              BEQ      |L6.434|
00018a  2005              MOVS     r0,#5                 ;938
00018c  63a0              STR      r0,[r4,#0x38]         ;938
00018e  6820              LDR      r0,[r4,#0]            ;941
000190  6801              LDR      r1,[r0,#0]            ;941
000192  f0210101          BIC      r1,r1,#1              ;941
000196  6001              STR      r1,[r0,#0]            ;941
                  |L6.408|
000198  9800              LDR      r0,[sp,#0]            ;945
00019a  1c40              ADDS     r0,r0,#1              ;945
00019c  9000              STR      r0,[sp,#0]            ;945
00019e  4548              CMP      r0,r9                 ;945
0001a0  d804              BHI      |L6.428|
0001a2  6820              LDR      r0,[r4,#0]            ;947
0001a4  6800              LDR      r0,[r0,#0]            ;947
0001a6  f0100f01          TST      r0,#1                 ;947
0001aa  d1f5              BNE      |L6.408|
                  |L6.428|
0001ac  f8c48038          STR      r8,[r4,#0x38]         ;956
0001b0  6367              STR      r7,[r4,#0x34]         ;956
                  |L6.434|
0001b2  6d21              LDR      r1,[r4,#0x50]         ;959
0001b4  2900              CMP      r1,#0                 ;959
0001b6  bf08              IT       EQ
0001b8  e8bd83f8          POPEQ    {r3-r9,pc}
                  |L6.444|
0001bc  4620              MOV      r0,r4                 ;962
0001be  b001              ADD      sp,sp,#4              ;962
0001c0  e8bd43f0          POP      {r4-r9,lr}            ;962
0001c4  4708              BX       r1                    ;962
;;;966    
                          ENDP

0001c6  0000              DCW      0x0000
                  |L6.456|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_DMA_Init||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Init PROC
;;;186      */
;;;187    HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;188    {
000002  4604              MOV      r4,r0
;;;189      uint32_t tmp = 0U;
;;;190      uint32_t tickstart = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
000008  4605              MOV      r5,r0
;;;191      DMA_Base_Registers *regs;
;;;192    
;;;193      /* Check the DMA peripheral state */
;;;194      if(hdma == NULL)
00000a  2c00              CMP      r4,#0
;;;195      {
;;;196        return HAL_ERROR;
00000c  bf04              ITT      EQ
00000e  2001              MOVEQ    r0,#1
;;;197      }
;;;198    
;;;199      /* Check the parameters */
;;;200      assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
;;;201      assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
;;;202      assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
;;;203      assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
;;;204      assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
;;;205      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
;;;206      assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
;;;207      assert_param(IS_DMA_MODE(hdma->Init.Mode));
;;;208      assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
;;;209      assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
;;;210      /* Check the memory burst, peripheral burst and FIFO threshold parameters only
;;;211         when FIFO mode is enabled */
;;;212      if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
;;;213      {
;;;214        assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
;;;215        assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
;;;216        assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
;;;217      }
;;;218      
;;;219      /* Allocate lock resource */
;;;220      __HAL_UNLOCK(hdma);
;;;221    
;;;222      /* Change DMA peripheral state */
;;;223      hdma->State = HAL_DMA_STATE_BUSY;
;;;224      
;;;225      /* Disable the peripheral */
;;;226      __HAL_DMA_DISABLE(hdma);
;;;227      
;;;228      /* Check if the DMA Stream is effectively disabled */
;;;229      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
;;;230      {
;;;231        /* Check for the Timeout */
;;;232        if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
;;;233        {
;;;234          /* Update error code */
;;;235          hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
;;;236          
;;;237          /* Change the DMA state */
;;;238          hdma->State = HAL_DMA_STATE_TIMEOUT;
;;;239          
;;;240          return HAL_TIMEOUT;
;;;241        }
;;;242      }
;;;243      
;;;244      /* Get the CR register value */
;;;245      tmp = hdma->Instance->CR;
;;;246    
;;;247      /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
;;;248      tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
;;;249                          DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
;;;250                          DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
;;;251                          DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));
;;;252    
;;;253      /* Prepare the DMA Stream configuration */
;;;254      tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
;;;255              hdma->Init.PeriphInc           | hdma->Init.MemInc           |
;;;256              hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
;;;257              hdma->Init.Mode                | hdma->Init.Priority;
;;;258    
;;;259      /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
;;;260      if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
;;;261      {
;;;262        /* Get memory burst and peripheral burst */
;;;263        tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
;;;264      }
;;;265      
;;;266      /* Write to DMA Stream CR register */
;;;267      hdma->Instance->CR = tmp;  
;;;268    
;;;269      /* Get the FCR register value */
;;;270      tmp = hdma->Instance->FCR;
;;;271    
;;;272      /* Clear Direct mode and FIFO threshold bits */
;;;273      tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
;;;274    
;;;275      /* Prepare the DMA Stream FIFO configuration */
;;;276      tmp |= hdma->Init.FIFOMode;
;;;277    
;;;278      /* The FIFO threshold is not used when the FIFO mode is disabled */
;;;279      if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
;;;280      {
;;;281        /* Get the FIFO threshold */
;;;282        tmp |= hdma->Init.FIFOThreshold;
;;;283        
;;;284        /* Check compatibility between FIFO threshold level and size of the memory burst */
;;;285        /* for INCR4, INCR8, INCR16 bursts */
;;;286        if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
;;;287        {
;;;288          if (DMA_CheckFifoParam(hdma) != HAL_OK)
;;;289          {
;;;290            /* Update error code */
;;;291            hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
;;;292            
;;;293            /* Change the DMA state */
;;;294            hdma->State = HAL_DMA_STATE_READY;
;;;295            
;;;296            return HAL_ERROR; 
;;;297          }
;;;298        }
;;;299      }
;;;300      
;;;301      /* Write to DMA Stream FCR */
;;;302      hdma->Instance->FCR = tmp;
;;;303    
;;;304      /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
;;;305         DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
;;;306      regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
;;;307      
;;;308      /* Clear all interrupt flags */
;;;309      regs->IFCR = 0x3FU << hdma->StreamIndex;
;;;310    
;;;311      /* Initialize the error code */
;;;312      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;313                                                                                         
;;;314      /* Initialize the DMA state */
;;;315      hdma->State = HAL_DMA_STATE_READY;
;;;316    
;;;317      return HAL_OK;
;;;318    }
000010  bd70              POPEQ    {r4-r6,pc}
000012  2600              MOVS     r6,#0                 ;220
000014  2002              MOVS     r0,#2                 ;223
000016  6366              STR      r6,[r4,#0x34]         ;223
000018  63a0              STR      r0,[r4,#0x38]         ;223
00001a  6820              LDR      r0,[r4,#0]            ;226
00001c  6801              LDR      r1,[r0,#0]            ;226
00001e  f0210101          BIC      r1,r1,#1              ;226
000022  6001              STR      r1,[r0,#0]            ;226
000024  6820              LDR      r0,[r4,#0]            ;229
000026  6800              LDR      r0,[r0,#0]            ;229
000028  f0100f01          TST      r0,#1                 ;229
00002c  d00f              BEQ      |L7.78|
00002e  bf00              NOP                            ;232
                  |L7.48|
000030  f7fffffe          BL       HAL_GetTick
000034  1b40              SUBS     r0,r0,r5              ;232
000036  2805              CMP      r0,#5                 ;232
000038  d904              BLS      |L7.68|
00003a  2020              MOVS     r0,#0x20              ;235
00003c  65a0              STR      r0,[r4,#0x58]         ;235
00003e  2003              MOVS     r0,#3                 ;238
000040  63a0              STR      r0,[r4,#0x38]         ;238
000042  bd70              POP      {r4-r6,pc}
                  |L7.68|
000044  6820              LDR      r0,[r4,#0]            ;240
000046  6800              LDR      r0,[r0,#0]            ;240
000048  f0100f01          TST      r0,#1                 ;240
00004c  d1f0              BNE      |L7.48|
                  |L7.78|
00004e  6821              LDR      r1,[r4,#0]            ;245
000050  6808              LDR      r0,[r1,#0]            ;245
000052  4a3a              LDR      r2,|L7.316|
000054  4010              ANDS     r0,r0,r2              ;248
000056  e9d42301          LDRD     r2,r3,[r4,#4]         ;248
00005a  431a              ORRS     r2,r2,r3              ;254
00005c  e9d43c03          LDRD     r3,r12,[r4,#0xc]      ;254
000060  ea43030c          ORR      r3,r3,r12             ;254
000064  431a              ORRS     r2,r2,r3              ;254
000066  6963              LDR      r3,[r4,#0x14]         ;254
000068  431a              ORRS     r2,r2,r3              ;254
00006a  69a3              LDR      r3,[r4,#0x18]         ;254
00006c  431a              ORRS     r2,r2,r3              ;254
00006e  69e3              LDR      r3,[r4,#0x1c]         ;254
000070  431a              ORRS     r2,r2,r3              ;254
000072  6a23              LDR      r3,[r4,#0x20]         ;254
000074  431a              ORRS     r2,r2,r3              ;254
000076  4310              ORRS     r0,r0,r2              ;254
000078  6a62              LDR      r2,[r4,#0x24]         ;260
00007a  2a04              CMP      r2,#4                 ;260
00007c  d103              BNE      |L7.134|
00007e  e9d4230b          LDRD     r2,r3,[r4,#0x2c]      ;260
000082  431a              ORRS     r2,r2,r3              ;263
000084  4310              ORRS     r0,r0,r2              ;263
                  |L7.134|
000086  6008              STR      r0,[r1,#0]            ;267
000088  f8d4c000          LDR      r12,[r4,#0]           ;270
00008c  f8dc0014          LDR      r0,[r12,#0x14]        ;270
000090  2301              MOVS     r3,#1                 ;196
000092  f0200107          BIC      r1,r0,#7              ;273
000096  6a60              LDR      r0,[r4,#0x24]         ;276
000098  ea400201          ORR      r2,r0,r1              ;276
00009c  2804              CMP      r0,#4                 ;279
00009e  d134              BNE      |L7.266|
0000a0  6aa1              LDR      r1,[r4,#0x28]         ;282
0000a2  6ae0              LDR      r0,[r4,#0x2c]         ;286
0000a4  430a              ORRS     r2,r2,r1              ;282
0000a6  b318              CBZ      r0,|L7.240|
0000a8  69a5              LDR      r5,[r4,#0x18]         ;286
0000aa  b155              CBZ      r5,|L7.194|
0000ac  f5b55f00          CMP      r5,#0x2000            ;286
0000b0  d014              BEQ      |L7.220|
0000b2  2900              CMP      r1,#0                 ;286
0000b4  bf1c              ITT      NE                    ;286
0000b6  2901              CMPNE    r1,#1                 ;286
0000b8  2902              CMPNE    r1,#2                 ;286
0000ba  d021              BEQ      |L7.256|
0000bc  2903              CMP      r1,#3                 ;286
0000be  d01c              BEQ      |L7.250|
0000c0  e023              B        |L7.266|
                  |L7.194|
0000c2  b119              CBZ      r1,|L7.204|
0000c4  2901              CMP      r1,#1                 ;286
0000c6  d005              BEQ      |L7.212|
0000c8  2902              CMP      r1,#2                 ;286
0000ca  d11e              BNE      |L7.266|
                  |L7.204|
0000cc  f0107f80          TST      r0,#0x1000000         ;286
0000d0  d01b              BEQ      |L7.266|
0000d2  e015              B        |L7.256|
                  |L7.212|
0000d4  f1b07fc0          CMP      r0,#0x1800000         ;286
0000d8  d117              BNE      |L7.266|
0000da  e011              B        |L7.256|
                  |L7.220|
0000dc  b181              CBZ      r1,|L7.256|
0000de  2901              CMP      r1,#1                 ;286
0000e0  d007              BEQ      |L7.242|
0000e2  2902              CMP      r1,#2                 ;286
0000e4  d00c              BEQ      |L7.256|
0000e6  2903              CMP      r1,#3                 ;286
0000e8  bf08              IT       EQ                    ;286
0000ea  f1b07fc0          CMPEQ    r0,#0x1800000         ;286
0000ee  d007              BEQ      |L7.256|
                  |L7.240|
0000f0  e00b              B        |L7.266|
                  |L7.242|
0000f2  f0107f80          TST      r0,#0x1000000         ;286
0000f6  d103              BNE      |L7.256|
0000f8  e007              B        |L7.266|
                  |L7.250|
0000fa  f0107f80          TST      r0,#0x1000000         ;286
0000fe  d004              BEQ      |L7.266|
                  |L7.256|
000100  2040              MOVS     r0,#0x40              ;291
000102  65a0              STR      r0,[r4,#0x58]         ;291
000104  63a3              STR      r3,[r4,#0x38]         ;294
000106  2001              MOVS     r0,#1                 ;296
000108  bd70              POP      {r4-r6,pc}
                  |L7.266|
00010a  f8cc2014          STR      r2,[r12,#0x14]        ;302
00010e  6820              LDR      r0,[r4,#0]            ;302
000110  4a0b              LDR      r2,|L7.320|
000112  b2c1              UXTB     r1,r0                 ;302
000114  3910              SUBS     r1,r1,#0x10           ;302
000116  fba22101          UMULL    r2,r1,r2,r1           ;302
00011a  4a0a              LDR      r2,|L7.324|
00011c  0909              LSRS     r1,r1,#4              ;302
00011e  2903              CMP      r1,#3                 ;302
000120  5c52              LDRB     r2,[r2,r1]            ;302
000122  6622              STR      r2,[r4,#0x60]         ;302
000124  f36f0009          BFC      r0,#0,#10             ;302
000128  bf88              IT       HI                    ;302
00012a  1d00              ADDHI    r0,r0,#4              ;302
00012c  213f              MOVS     r1,#0x3f              ;309
00012e  4091              LSLS     r1,r1,r2              ;309
000130  65e0              STR      r0,[r4,#0x5c]         ;309
000132  6081              STR      r1,[r0,#8]            ;309
000134  65a6              STR      r6,[r4,#0x58]         ;312
000136  63a3              STR      r3,[r4,#0x38]         ;315
000138  2000              MOVS     r0,#0                 ;317
00013a  bd70              POP      {r4-r6,pc}
;;;319    
                          ENDP

                  |L7.316|
                          DCD      0xf010803f
                  |L7.320|
                          DCD      0xaaaaaaab
                  |L7.324|
                          DCD      ||.constdata||

                          AREA ||i.HAL_DMA_PollForTransfer||, CODE, READONLY, ALIGN=2

                  HAL_DMA_PollForTransfer PROC
;;;619      */
;;;620    HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;621    {
000004  b083              SUB      sp,sp,#0xc
000006  4604              MOV      r4,r0
;;;622      HAL_StatusTypeDef status = HAL_OK; 
000008  2000              MOVS     r0,#0
00000a  4690              MOV      r8,r2                 ;621
00000c  468a              MOV      r10,r1                ;621
;;;623      uint32_t mask_cpltlevel;
;;;624      uint32_t tickstart = HAL_GetTick(); 
00000e  9001              STR      r0,[sp,#4]
000010  f7fffffe          BL       HAL_GetTick
;;;625      uint32_t tmpisr;
;;;626      
;;;627      /* calculate DMA base and stream number */
;;;628      DMA_Base_Registers *regs;
;;;629    
;;;630      if(HAL_DMA_STATE_BUSY != hdma->State)
000014  9000              STR      r0,[sp,#0]
000016  6ba0              LDR      r0,[r4,#0x38]
000018  2600              MOVS     r6,#0
00001a  2802              CMP      r0,#2
00001c  d006              BEQ      |L8.44|
;;;631      {
;;;632        /* No transfer ongoing */
;;;633        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
00001e  2080              MOVS     r0,#0x80
000020  65a0              STR      r0,[r4,#0x58]
;;;634        __HAL_UNLOCK(hdma);
;;;635        return HAL_ERROR;
000022  6366              STR      r6,[r4,#0x34]
;;;636      }
;;;637    
;;;638      /* Polling mode not supported in circular mode and double buffering mode */
;;;639      if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
;;;640      {
;;;641        hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
;;;642        return HAL_ERROR;
;;;643      }
;;;644      
;;;645      /* Get the level transfer complete flag */
;;;646      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;647      {
;;;648        /* Transfer Complete flag */
;;;649        mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
;;;650      }
;;;651      else
;;;652      {
;;;653        /* Half Transfer Complete flag */
;;;654        mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
;;;655      }
;;;656      
;;;657      regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
;;;658      tmpisr = regs->ISR;
;;;659      
;;;660      while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
;;;661      {
;;;662        /* Check for the Timeout (Not applicable in circular mode)*/
;;;663        if(Timeout != HAL_MAX_DELAY)
;;;664        {
;;;665          if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
;;;666          {
;;;667            /* Update error code */
;;;668            hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
;;;669    
;;;670            /* Process Unlocked */
;;;671            __HAL_UNLOCK(hdma);
;;;672            
;;;673            /* Change the DMA state */
;;;674            hdma->State = HAL_DMA_STATE_READY;
;;;675            
;;;676            return HAL_TIMEOUT;
;;;677          }
;;;678        }
;;;679    
;;;680        /* Get the ISR register value */
;;;681        tmpisr = regs->ISR;
;;;682    
;;;683        if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
;;;684        {
;;;685          /* Update error code */
;;;686          hdma->ErrorCode |= HAL_DMA_ERROR_TE;
;;;687          
;;;688          /* Clear the transfer error flag */
;;;689          regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
;;;690        }
;;;691        
;;;692        if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
;;;693        {
;;;694          /* Update error code */
;;;695          hdma->ErrorCode |= HAL_DMA_ERROR_FE;
;;;696          
;;;697          /* Clear the FIFO error flag */
;;;698          regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
;;;699        }
;;;700        
;;;701        if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
;;;702        {
;;;703          /* Update error code */
;;;704          hdma->ErrorCode |= HAL_DMA_ERROR_DME;
;;;705          
;;;706          /* Clear the Direct Mode error flag */
;;;707          regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
;;;708        }
;;;709      }
;;;710      
;;;711      if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
;;;712      {
;;;713        if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
;;;714        {
;;;715          HAL_DMA_Abort(hdma);
;;;716        
;;;717          /* Clear the half transfer and transfer complete flags */
;;;718          regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
;;;719        
;;;720          /* Process Unlocked */
;;;721          __HAL_UNLOCK(hdma);
;;;722    
;;;723          /* Change the DMA state */
;;;724          hdma->State= HAL_DMA_STATE_READY;
;;;725    
;;;726          return HAL_ERROR;
;;;727       }
;;;728      }
;;;729      
;;;730      /* Get the level transfer complete flag */
;;;731      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;732      {
;;;733        /* Clear the half transfer and transfer complete flags */
;;;734        regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
;;;735        
;;;736        /* Process Unlocked */
;;;737        __HAL_UNLOCK(hdma);
;;;738    
;;;739        hdma->State = HAL_DMA_STATE_READY;
;;;740      }
;;;741      else
;;;742      {
;;;743        /* Clear the half transfer and transfer complete flags */
;;;744        regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
;;;745      }
;;;746      
;;;747      return status;
;;;748    }
000024  b003              ADD      sp,sp,#0xc
000026  2001              MOVS     r0,#1                 ;635
000028  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.44|
00002c  6820              LDR      r0,[r4,#0]            ;639
00002e  6800              LDR      r0,[r0,#0]            ;639
000030  f4107f80          TST      r0,#0x100             ;639
000034  bf1c              ITT      NE                    ;641
000036  f44f7080          MOVNE    r0,#0x100             ;641
00003a  65a0              STRNE    r0,[r4,#0x58]         ;641
00003c  d17e              BNE      |L8.316|
00003e  f04f0b20          MOV      r11,#0x20             ;649
000042  f1ba0f00          CMP      r10,#0                ;646
000046  bf07              ITTEE    EQ                    ;649
000048  f8940060          LDRBEQ   r0,[r4,#0x60]         ;649
00004c  fa0bf900          LSLEQ    r9,r11,r0             ;649
000050  f8941060          LDRBNE   r1,[r4,#0x60]         ;654
000054  2010              MOVNE    r0,#0x10              ;654
000056  bf18              IT       NE                    ;654
000058  fa00f901          LSLNE    r9,r0,r1              ;654
00005c  6de5              LDR      r5,[r4,#0x5c]         ;658
00005e  6828              LDR      r0,[r5,#0]            ;658
000060  2701              MOVS     r7,#1                 ;635
000062  e035              B        |L8.208|
                  |L8.100|
000064  f1b83fff          CMP      r8,#0xffffffff        ;663
000068  d010              BEQ      |L8.140|
00006a  f1b80f00          CMP      r8,#0                 ;665
00006e  d005              BEQ      |L8.124|
000070  f7fffffe          BL       HAL_GetTick
000074  9900              LDR      r1,[sp,#0]            ;665
000076  1a40              SUBS     r0,r0,r1              ;665
000078  4540              CMP      r0,r8                 ;665
00007a  d907              BLS      |L8.140|
                  |L8.124|
00007c  f8c4b058          STR      r11,[r4,#0x58]        ;668
000080  63a7              STR      r7,[r4,#0x38]         ;674
000082  6366              STR      r6,[r4,#0x34]         ;674
000084  b003              ADD      sp,sp,#0xc
000086  2003              MOVS     r0,#3                 ;676
000088  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.140|
00008c  6828              LDR      r0,[r5,#0]            ;681
00008e  f8942060          LDRB     r2,[r4,#0x60]         ;683
000092  2108              MOVS     r1,#8                 ;683
000094  4091              LSLS     r1,r1,r2              ;683
000096  4201              TST      r1,r0                 ;683
000098  d004              BEQ      |L8.164|
00009a  6da2              LDR      r2,[r4,#0x58]         ;686
00009c  f0420201          ORR      r2,r2,#1              ;686
0000a0  65a2              STR      r2,[r4,#0x58]         ;686
0000a2  60a9              STR      r1,[r5,#8]            ;689
                  |L8.164|
0000a4  f8941060          LDRB     r1,[r4,#0x60]         ;692
0000a8  fa07f101          LSL      r1,r7,r1              ;692
0000ac  4201              TST      r1,r0                 ;692
0000ae  d004              BEQ      |L8.186|
0000b0  6da2              LDR      r2,[r4,#0x58]         ;695
0000b2  f0420202          ORR      r2,r2,#2              ;695
0000b6  65a2              STR      r2,[r4,#0x58]         ;695
0000b8  60a9              STR      r1,[r5,#8]            ;698
                  |L8.186|
0000ba  f8942060          LDRB     r2,[r4,#0x60]         ;701
0000be  2104              MOVS     r1,#4                 ;701
0000c0  4091              LSLS     r1,r1,r2              ;701
0000c2  4201              TST      r1,r0                 ;701
0000c4  d004              BEQ      |L8.208|
0000c6  6da2              LDR      r2,[r4,#0x58]         ;704
0000c8  f0420204          ORR      r2,r2,#4              ;704
0000cc  65a2              STR      r2,[r4,#0x58]         ;704
0000ce  60a9              STR      r1,[r5,#8]            ;707
                  |L8.208|
0000d0  ea100f09          TST      r0,r9                 ;707
0000d4  bf04              ITT      EQ                    ;707
0000d6  6da0              LDREQ    r0,[r4,#0x58]         ;707
0000d8  f0100f01          TSTEQ    r0,#1                 ;707
0000dc  d0c2              BEQ      |L8.100|
0000de  6da0              LDR      r0,[r4,#0x58]         ;711
0000e0  f04f0930          MOV      r9,#0x30              ;718
0000e4  2800              CMP      r0,#0                 ;711
0000e6  bf1c              ITT      NE                    ;713
0000e8  6da0              LDRNE    r0,[r4,#0x58]         ;713
0000ea  f0100f01          TSTNE    r0,#1                 ;713
0000ee  d052              BEQ      |L8.406|
0000f0  f8d4a05c          LDR      r10,[r4,#0x5c]        ;711
0000f4  f7fffffe          BL       HAL_GetTick
0000f8  4680              MOV      r8,r0                 ;711
0000fa  6ba0              LDR      r0,[r4,#0x38]         ;711
0000fc  2802              CMP      r0,#2                 ;711
0000fe  d003              BEQ      |L8.264|
000100  2080              MOVS     r0,#0x80              ;711
000102  65a0              STR      r0,[r4,#0x58]         ;711
000104  6366              STR      r6,[r4,#0x34]         ;711
000106  e03b              B        |L8.384|
                  |L8.264|
000108  6820              LDR      r0,[r4,#0]            ;711
00010a  6801              LDR      r1,[r0,#0]            ;711
00010c  f0210116          BIC      r1,r1,#0x16           ;711
000110  6001              STR      r1,[r0,#0]            ;711
000112  6820              LDR      r0,[r4,#0]            ;711
000114  6941              LDR      r1,[r0,#0x14]         ;711
000116  f0210180          BIC      r1,r1,#0x80           ;711
00011a  6141              STR      r1,[r0,#0x14]         ;711
00011c  6c60              LDR      r0,[r4,#0x44]         ;711
00011e  2800              CMP      r0,#0                 ;711
000120  bf04              ITT      EQ                    ;711
000122  6ce0              LDREQ    r0,[r4,#0x4c]         ;711
000124  2800              CMPEQ    r0,#0                 ;711
000126  d004              BEQ      |L8.306|
000128  6820              LDR      r0,[r4,#0]            ;711
00012a  6801              LDR      r1,[r0,#0]            ;711
00012c  f0210108          BIC      r1,r1,#8              ;711
000130  6001              STR      r1,[r0,#0]            ;711
                  |L8.306|
000132  6820              LDR      r0,[r4,#0]            ;711
000134  6801              LDR      r1,[r0,#0]            ;711
000136  f0210101          BIC      r1,r1,#1              ;711
00013a  e000              B        |L8.318|
                  |L8.316|
00013c  e027              B        |L8.398|
                  |L8.318|
00013e  6001              STR      r1,[r0,#0]            ;711
000140  6820              LDR      r0,[r4,#0]            ;711
000142  6800              LDR      r0,[r0,#0]            ;711
000144  f0100f01          TST      r0,#1                 ;711
000148  d011              BEQ      |L8.366|
00014a  bf00              NOP                            ;711
                  |L8.332|
00014c  f7fffffe          BL       HAL_GetTick
000150  eba00008          SUB      r0,r0,r8              ;711
000154  2805              CMP      r0,#5                 ;711
000156  d905              BLS      |L8.356|
000158  f8c4b058          STR      r11,[r4,#0x58]        ;711
00015c  2003              MOVS     r0,#3                 ;711
00015e  6366              STR      r6,[r4,#0x34]         ;711
000160  63a0              STR      r0,[r4,#0x38]         ;711
000162  e00d              B        |L8.384|
                  |L8.356|
000164  6820              LDR      r0,[r4,#0]            ;711
000166  6800              LDR      r0,[r0,#0]            ;711
000168  f0100f01          TST      r0,#1                 ;711
00016c  d1ee              BNE      |L8.332|
                  |L8.366|
00016e  f8940060          LDRB     r0,[r4,#0x60]         ;711
000172  213f              MOVS     r1,#0x3f              ;711
000174  fa01f000          LSL      r0,r1,r0              ;711
000178  f8ca0008          STR      r0,[r10,#8]           ;711
00017c  63a7              STR      r7,[r4,#0x38]         ;711
00017e  6366              STR      r6,[r4,#0x34]         ;711
                  |L8.384|
000180  f8940060          LDRB     r0,[r4,#0x60]         ;718
000184  fa09f000          LSL      r0,r9,r0              ;718
000188  60a8              STR      r0,[r5,#8]            ;718
00018a  63a7              STR      r7,[r4,#0x38]         ;724
00018c  6366              STR      r6,[r4,#0x34]         ;724
                  |L8.398|
00018e  b003              ADD      sp,sp,#0xc
000190  2001              MOVS     r0,#1                 ;726
000192  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.406|
000196  f1ba0f00          CMP      r10,#0                ;731
00019a  d008              BEQ      |L8.430|
00019c  f8941060          LDRB     r1,[r4,#0x60]         ;744
0001a0  2010              MOVS     r0,#0x10              ;744
0001a2  4088              LSLS     r0,r0,r1              ;744
0001a4  60a8              STR      r0,[r5,#8]            ;744
                  |L8.422|
0001a6  9801              LDR      r0,[sp,#4]            ;747
0001a8  b003              ADD      sp,sp,#0xc
0001aa  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.430|
0001ae  f8940060          LDRB     r0,[r4,#0x60]         ;734
0001b2  fa09f000          LSL      r0,r9,r0              ;734
0001b6  60a8              STR      r0,[r5,#8]            ;734
0001b8  63a7              STR      r7,[r4,#0x38]         ;739
0001ba  6366              STR      r6,[r4,#0x34]         ;739
0001bc  e7f3              B        |L8.422|
;;;749    
                          ENDP


                          AREA ||i.HAL_DMA_RegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_RegisterCallback PROC
;;;976      */                      
;;;977    HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
000000  f8d0c034          LDR      r12,[r0,#0x34]
;;;978    {
;;;979    
;;;980      HAL_StatusTypeDef status = HAL_OK;
000004  2300              MOVS     r3,#0
;;;981    
;;;982      /* Process locked */
;;;983      __HAL_LOCK(hdma);
000006  f1bc0f01          CMP      r12,#1
00000a  bf04              ITT      EQ
00000c  2002              MOVEQ    r0,#2
;;;984    
;;;985      if(HAL_DMA_STATE_READY == hdma->State)
;;;986      {
;;;987        switch (CallbackID)
;;;988        {
;;;989        case  HAL_DMA_XFER_CPLT_CB_ID:
;;;990          hdma->XferCpltCallback = pCallback;
;;;991          break;
;;;992    
;;;993        case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;994          hdma->XferHalfCpltCallback = pCallback;
;;;995          break;
;;;996    
;;;997        case  HAL_DMA_XFER_M1CPLT_CB_ID:
;;;998          hdma->XferM1CpltCallback = pCallback;
;;;999          break;
;;;1000   
;;;1001       case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
;;;1002         hdma->XferM1HalfCpltCallback = pCallback;
;;;1003         break;
;;;1004   
;;;1005       case  HAL_DMA_XFER_ERROR_CB_ID:
;;;1006         hdma->XferErrorCallback = pCallback;
;;;1007         break;
;;;1008   
;;;1009       case  HAL_DMA_XFER_ABORT_CB_ID:
;;;1010         hdma->XferAbortCallback = pCallback;
;;;1011         break;
;;;1012   
;;;1013       default:
;;;1014         break;
;;;1015       }
;;;1016     }
;;;1017     else
;;;1018     {
;;;1019       /* Return error status */
;;;1020       status =  HAL_ERROR;
;;;1021     }
;;;1022   
;;;1023     /* Release Lock */
;;;1024     __HAL_UNLOCK(hdma);
;;;1025     
;;;1026     return status;
;;;1027   }
00000e  4770              BXEQ     lr
000010  f04f0c01          MOV      r12,#1                ;983
000014  f8c0c034          STR      r12,[r0,#0x34]        ;985
000018  f8d0c038          LDR      r12,[r0,#0x38]        ;985
00001c  f1bc0f01          CMP      r12,#1                ;985
000020  bf18              IT       NE                    ;1020
000022  2301              MOVNE    r3,#1                 ;1020
000024  d003              BEQ      |L9.46|
                  |L9.38|
000026  2100              MOVS     r1,#0                 ;1024
000028  6341              STR      r1,[r0,#0x34]         ;1026
00002a  4618              MOV      r0,r3                 ;1026
00002c  4770              BX       lr
                  |L9.46|
00002e  2906              CMP      r1,#6                 ;987
000030  d2f9              BCS      |L9.38|
000032  e8dff001          TBB      [pc,r1]               ;987
000036  0305              DCB      0x03,0x05
000038  07090b0d          DCB      0x07,0x09,0x0b,0x0d
00003c  6402              STR      r2,[r0,#0x40]         ;991
00003e  e7f2              B        |L9.38|
000040  6442              STR      r2,[r0,#0x44]         ;995
000042  e7f0              B        |L9.38|
000044  6482              STR      r2,[r0,#0x48]         ;999
000046  e7ee              B        |L9.38|
000048  64c2              STR      r2,[r0,#0x4c]         ;1003
00004a  e7ec              B        |L9.38|
00004c  6502              STR      r2,[r0,#0x50]         ;1007
00004e  e7ea              B        |L9.38|
000050  6542              STR      r2,[r0,#0x54]         ;1011
000052  e7e8              B        |L9.38|
;;;1028   
                          ENDP


                          AREA ||i.HAL_DMA_Start||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start PROC
;;;415      */
;;;416    HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b430              PUSH     {r4,r5}
;;;417    {
;;;418      HAL_StatusTypeDef status = HAL_OK;
;;;419      
;;;420      /* Check the parameters */
;;;421      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;422    
;;;423      /* Process locked */
;;;424      __HAL_LOCK(hdma);
000002  6b44              LDR      r4,[r0,#0x34]
000004  f04f0c00          MOV      r12,#0                ;418
000008  2c01              CMP      r4,#1
00000a  bf02              ITTT     EQ
00000c  2002              MOVEQ    r0,#2
;;;425    
;;;426      if(HAL_DMA_STATE_READY == hdma->State)
;;;427      {
;;;428        /* Change DMA peripheral state */
;;;429        hdma->State = HAL_DMA_STATE_BUSY;
;;;430        
;;;431        /* Initialize the error code */
;;;432        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;433        
;;;434        /* Configure the source, destination address and the data length */
;;;435        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;436    
;;;437        /* Enable the Peripheral */
;;;438        __HAL_DMA_ENABLE(hdma);
;;;439      }
;;;440      else
;;;441      {
;;;442        /* Process unlocked */
;;;443        __HAL_UNLOCK(hdma);
;;;444        
;;;445        /* Return error status */
;;;446        status = HAL_BUSY;
;;;447      } 
;;;448      return status; 
;;;449    }
00000e  bc30              POPEQ    {r4,r5}
000010  4770              BXEQ     lr
000012  2401              MOVS     r4,#1                 ;424
000014  6344              STR      r4,[r0,#0x34]         ;426
000016  6b85              LDR      r5,[r0,#0x38]         ;426
000018  2400              MOVS     r4,#0                 ;426
00001a  2d01              CMP      r5,#1                 ;426
00001c  bf1c              ITT      NE                    ;446
00001e  f04f0c02          MOVNE    r12,#2                ;446
000022  6344              STRNE    r4,[r0,#0x34]         ;446
000024  d002              BEQ      |L10.44|
                  |L10.38|
000026  bc30              POP      {r4,r5}
000028  4660              MOV      r0,r12                ;448
00002a  4770              BX       lr
                  |L10.44|
00002c  2502              MOVS     r5,#2                 ;429
00002e  6385              STR      r5,[r0,#0x38]         ;429
000030  6584              STR      r4,[r0,#0x58]         ;432
000032  6804              LDR      r4,[r0,#0]            ;432
000034  6825              LDR      r5,[r4,#0]            ;432
000036  f4252580          BIC      r5,r5,#0x40000        ;432
00003a  6025              STR      r5,[r4,#0]            ;432
00003c  6804              LDR      r4,[r0,#0]            ;432
00003e  6063              STR      r3,[r4,#4]            ;432
000040  6883              LDR      r3,[r0,#8]            ;432
000042  2b40              CMP      r3,#0x40              ;432
000044  6803              LDR      r3,[r0,#0]            ;432
000046  bf03              ITTTE    EQ                    ;432
000048  609a              STREQ    r2,[r3,#8]            ;432
00004a  6802              LDREQ    r2,[r0,#0]            ;432
00004c  60d1              STREQ    r1,[r2,#0xc]          ;432
00004e  6099              STRNE    r1,[r3,#8]            ;432
000050  bf1c              ITT      NE                    ;432
000052  6801              LDRNE    r1,[r0,#0]            ;432
000054  60ca              STRNE    r2,[r1,#0xc]          ;432
000056  6800              LDR      r0,[r0,#0]            ;438
000058  6801              LDR      r1,[r0,#0]            ;438
00005a  f0410101          ORR      r1,r1,#1              ;438
00005e  6001              STR      r1,[r0,#0]            ;438
000060  e7e1              B        |L10.38|
;;;450    
                          ENDP


                          AREA ||i.HAL_DMA_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start_IT PROC
;;;459      */
;;;460    HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b470              PUSH     {r4-r6}
;;;461    {
;;;462      HAL_StatusTypeDef status = HAL_OK;
;;;463    
;;;464      /* calculate DMA base and stream number */
;;;465      DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
;;;466      
;;;467      /* Check the parameters */
;;;468      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;469     
;;;470      /* Process locked */
;;;471      __HAL_LOCK(hdma);
000002  6b45              LDR      r5,[r0,#0x34]
000004  6dc4              LDR      r4,[r0,#0x5c]
000006  f04f0c00          MOV      r12,#0                ;462
00000a  2d01              CMP      r5,#1
00000c  bf02              ITTT     EQ
00000e  2002              MOVEQ    r0,#2
;;;472      
;;;473      if(HAL_DMA_STATE_READY == hdma->State)
;;;474      {
;;;475        /* Change DMA peripheral state */
;;;476        hdma->State = HAL_DMA_STATE_BUSY;
;;;477        
;;;478        /* Initialize the error code */
;;;479        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;480        
;;;481        /* Configure the source, destination address and the data length */
;;;482        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;483        
;;;484        /* Clear all interrupt flags at correct offset within the register */
;;;485        regs->IFCR = 0x3FU << hdma->StreamIndex;
;;;486        
;;;487        /* Enable Common interrupts*/
;;;488        hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
;;;489        hdma->Instance->FCR |= DMA_IT_FE;
;;;490        
;;;491        if(hdma->XferHalfCpltCallback != NULL)
;;;492        {
;;;493          hdma->Instance->CR  |= DMA_IT_HT;
;;;494        }
;;;495        
;;;496        /* Enable the Peripheral */
;;;497        __HAL_DMA_ENABLE(hdma);
;;;498      }
;;;499      else
;;;500      {
;;;501        /* Process unlocked */
;;;502        __HAL_UNLOCK(hdma);	  
;;;503        
;;;504        /* Return error status */
;;;505        status = HAL_BUSY;
;;;506      }
;;;507      
;;;508      return status;
;;;509    }
000010  bc70              POPEQ    {r4-r6}
000012  4770              BXEQ     lr
000014  2501              MOVS     r5,#1                 ;471
000016  6345              STR      r5,[r0,#0x34]         ;473
000018  6b86              LDR      r6,[r0,#0x38]         ;473
00001a  2500              MOVS     r5,#0                 ;473
00001c  2e01              CMP      r6,#1                 ;473
00001e  bf1c              ITT      NE                    ;505
000020  f04f0c02          MOVNE    r12,#2                ;505
000024  6345              STRNE    r5,[r0,#0x34]         ;505
000026  d002              BEQ      |L11.46|
                  |L11.40|
000028  bc70              POP      {r4-r6}
00002a  4660              MOV      r0,r12                ;508
00002c  4770              BX       lr
                  |L11.46|
00002e  2602              MOVS     r6,#2                 ;476
000030  6386              STR      r6,[r0,#0x38]         ;476
000032  6585              STR      r5,[r0,#0x58]         ;479
000034  6805              LDR      r5,[r0,#0]            ;479
000036  682e              LDR      r6,[r5,#0]            ;479
000038  f4262680          BIC      r6,r6,#0x40000        ;479
00003c  602e              STR      r6,[r5,#0]            ;479
00003e  6805              LDR      r5,[r0,#0]            ;479
000040  606b              STR      r3,[r5,#4]            ;479
000042  6883              LDR      r3,[r0,#8]            ;479
000044  2b40              CMP      r3,#0x40              ;479
000046  6803              LDR      r3,[r0,#0]            ;479
000048  bf03              ITTTE    EQ                    ;479
00004a  609a              STREQ    r2,[r3,#8]            ;479
00004c  6802              LDREQ    r2,[r0,#0]            ;479
00004e  60d1              STREQ    r1,[r2,#0xc]          ;479
000050  6099              STRNE    r1,[r3,#8]            ;479
000052  bf1c              ITT      NE                    ;479
000054  6801              LDRNE    r1,[r0,#0]            ;479
000056  60ca              STRNE    r2,[r1,#0xc]          ;479
000058  f8901060          LDRB     r1,[r0,#0x60]         ;485
00005c  223f              MOVS     r2,#0x3f              ;485
00005e  fa02f101          LSL      r1,r2,r1              ;485
000062  60a1              STR      r1,[r4,#8]            ;485
000064  6801              LDR      r1,[r0,#0]            ;488
000066  680a              LDR      r2,[r1,#0]            ;488
000068  f0420216          ORR      r2,r2,#0x16           ;488
00006c  600a              STR      r2,[r1,#0]            ;488
00006e  6801              LDR      r1,[r0,#0]            ;489
000070  694a              LDR      r2,[r1,#0x14]         ;489
000072  f0420280          ORR      r2,r2,#0x80           ;489
000076  614a              STR      r2,[r1,#0x14]         ;489
000078  6c41              LDR      r1,[r0,#0x44]         ;489
00007a  b121              CBZ      r1,|L11.134|
00007c  6801              LDR      r1,[r0,#0]            ;493
00007e  680a              LDR      r2,[r1,#0]            ;493
000080  f0420208          ORR      r2,r2,#8              ;493
000084  600a              STR      r2,[r1,#0]            ;493
                  |L11.134|
000086  6800              LDR      r0,[r0,#0]            ;497
000088  6801              LDR      r1,[r0,#0]            ;497
00008a  f0410101          ORR      r1,r1,#1              ;497
00008e  6001              STR      r1,[r0,#0]            ;497
000090  e7ca              B        |L11.40|
;;;510    
                          ENDP


                          AREA ||i.HAL_DMA_UnRegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_UnRegisterCallback PROC
;;;1036     */              
;;;1037   HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
000000  6b42              LDR      r2,[r0,#0x34]
;;;1038   {
;;;1039     HAL_StatusTypeDef status = HAL_OK;
000002  2300              MOVS     r3,#0
;;;1040     
;;;1041     /* Process locked */
;;;1042     __HAL_LOCK(hdma);
000004  2a01              CMP      r2,#1
000006  bf04              ITT      EQ
000008  2002              MOVEQ    r0,#2
;;;1043     
;;;1044     if(HAL_DMA_STATE_READY == hdma->State)
;;;1045     {
;;;1046       switch (CallbackID)
;;;1047       {
;;;1048       case  HAL_DMA_XFER_CPLT_CB_ID:
;;;1049         hdma->XferCpltCallback = NULL;
;;;1050         break;
;;;1051         
;;;1052       case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;1053         hdma->XferHalfCpltCallback = NULL;
;;;1054         break;
;;;1055         
;;;1056       case  HAL_DMA_XFER_M1CPLT_CB_ID:
;;;1057         hdma->XferM1CpltCallback = NULL;
;;;1058         break;
;;;1059         
;;;1060       case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
;;;1061         hdma->XferM1HalfCpltCallback = NULL;
;;;1062         break;
;;;1063         
;;;1064       case  HAL_DMA_XFER_ERROR_CB_ID:
;;;1065         hdma->XferErrorCallback = NULL;
;;;1066         break;
;;;1067         
;;;1068       case  HAL_DMA_XFER_ABORT_CB_ID:
;;;1069         hdma->XferAbortCallback = NULL;
;;;1070         break; 
;;;1071         
;;;1072       case   HAL_DMA_XFER_ALL_CB_ID:
;;;1073         hdma->XferCpltCallback = NULL;
;;;1074         hdma->XferHalfCpltCallback = NULL;
;;;1075         hdma->XferM1CpltCallback = NULL;
;;;1076         hdma->XferM1HalfCpltCallback = NULL;
;;;1077         hdma->XferErrorCallback = NULL;
;;;1078         hdma->XferAbortCallback = NULL;
;;;1079         break; 
;;;1080         
;;;1081       default:
;;;1082         status = HAL_ERROR;
;;;1083         break;
;;;1084       }
;;;1085     }
;;;1086     else
;;;1087     {
;;;1088       status = HAL_ERROR;
;;;1089     }
;;;1090     
;;;1091     /* Release Lock */
;;;1092     __HAL_UNLOCK(hdma);
;;;1093     
;;;1094     return status;
;;;1095   }
00000a  4770              BXEQ     lr
00000c  2201              MOVS     r2,#1                 ;1042
00000e  6342              STR      r2,[r0,#0x34]         ;1044
000010  f8d0c038          LDR      r12,[r0,#0x38]        ;1044
000014  2200              MOVS     r2,#0                 ;1044
000016  f1bc0f01          CMP      r12,#1                ;1044
00001a  d11a              BNE      |L12.82|
00001c  2907              CMP      r1,#7                 ;1046
00001e  d218              BCS      |L12.82|
000020  e8dff001          TBB      [pc,r1]               ;1046
000024  0406080a          DCB      0x04,0x06,0x08,0x0a
000028  0c0e1000          DCB      0x0c,0x0e,0x10,0x00
00002c  6402              STR      r2,[r0,#0x40]         ;1050
00002e  e011              B        |L12.84|
000030  6442              STR      r2,[r0,#0x44]         ;1054
000032  e00f              B        |L12.84|
000034  6482              STR      r2,[r0,#0x48]         ;1058
000036  e00d              B        |L12.84|
000038  64c2              STR      r2,[r0,#0x4c]         ;1062
00003a  e00b              B        |L12.84|
00003c  6502              STR      r2,[r0,#0x50]         ;1066
00003e  e009              B        |L12.84|
000040  6542              STR      r2,[r0,#0x54]         ;1070
000042  e007              B        |L12.84|
000044  6402              STR      r2,[r0,#0x40]         ;1074
000046  6442              STR      r2,[r0,#0x44]         ;1075
000048  6482              STR      r2,[r0,#0x48]         ;1076
00004a  64c2              STR      r2,[r0,#0x4c]         ;1077
00004c  6502              STR      r2,[r0,#0x50]         ;1078
00004e  6542              STR      r2,[r0,#0x54]         ;1079
000050  e000              B        |L12.84|
                  |L12.82|
000052  2301              MOVS     r3,#1                 ;1082
                  |L12.84|
000054  6342              STR      r2,[r0,#0x34]         ;1094
000056  4618              MOV      r0,r3                 ;1094
000058  4770              BX       lr
;;;1096   
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  flagBitshiftOffset
000000  00061016          DCB      0x00,0x06,0x10,0x16
000004  00061016          DCB      0x00,0x06,0x10,0x16

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F4_V1.21.0\\Drivers\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_dma_c_c25f65ec____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F4_V1.21.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f4xx_hal_dma_c_c25f65ec____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_dma_c_c25f65ec____REVSH|
#line 402
|__asm___19_stm32f4xx_hal_dma_c_c25f65ec____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_dma_c_c25f65ec____RRX|
#line 587
|__asm___19_stm32f4xx_hal_dma_c_c25f65ec____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
