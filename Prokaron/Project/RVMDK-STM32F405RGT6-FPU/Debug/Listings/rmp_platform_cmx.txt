; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\rmp_platform_cmx.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\rmp_platform_cmx.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\STM32F4xx_HAL_Driver\Inc\Conf -I.\Source -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F405RGT6-FPU\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F405xx -DSTM32F405xx -DUSE_HAL_DRIVER -DHSE_VALUE=8000000 -DPLL_M=8 --enum_is_int --signed_chars --omf_browse=.\debug\output\rmp_platform_cmx.crf ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx.c]
                          THUMB

                          AREA ||i.RMP_Putchar||, CODE, READONLY, ALIGN=2

                  RMP_Putchar PROC
;;;103    ******************************************************************************/
;;;104    void RMP_Putchar(char Char)
000000  4903              LDR      r1,|L1.16|
;;;105    {
;;;106        RMP_CMX_PUTCHAR(Char);
000002  6048              STR      r0,[r1,#4]
                  |L1.4|
000004  6808              LDR      r0,[r1,#0]
000006  f0100f40          TST      r0,#0x40
00000a  d0fb              BEQ      |L1.4|
;;;107    }
00000c  4770              BX       lr
;;;108    /* End Function:RMP_Putchar **************************************************/
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40011000

                          AREA ||i._RMP_Low_Level_Init||, CODE, READONLY, ALIGN=2

                  _RMP_Low_Level_Init PROC
;;;77     ******************************************************************************/
;;;78     void _RMP_Low_Level_Init(void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;79     {    
000004  b0a9              SUB      sp,sp,#0xa4
;;;80         RMP_CMX_LOW_LEVEL_INIT();
000006  2114              MOVS     r1,#0x14
000008  a81e              ADD      r0,sp,#0x78
00000a  f7fffffe          BL       RMP_Clear
00000e  2130              MOVS     r1,#0x30
000010  a812              ADD      r0,sp,#0x48
000012  f7fffffe          BL       RMP_Clear
000016  2148              MOVS     r1,#0x48
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       RMP_Clear
00001e  2114              MOVS     r1,#0x14
000020  a823              ADD      r0,sp,#0x8c
000022  f7fffffe          BL       RMP_Clear
000026  4855              LDR      r0,|L2.380|
000028  2500              MOVS     r5,#0
00002a  6801              LDR      r1,[r0,#0]
00002c  f0415180          ORR      r1,r1,#0x10000000
000030  6001              STR      r1,[r0,#0]
000032  6800              LDR      r0,[r0,#0]
000034  f0005080          AND      r0,r0,#0x10000000
000038  9028              STR      r0,[sp,#0xa0]
00003a  4851              LDR      r0,|L2.384|
00003c  6801              LDR      r1,[r0,#0]
00003e  f4414180          ORR      r1,r1,#0x4000
000042  6001              STR      r1,[r0,#0]
000044  6800              LDR      r0,[r0,#0]
000046  f04f0901          MOV      r9,#1
00004a  f4004080          AND      r0,r0,#0x4000
00004e  9028              STR      r0,[sp,#0xa0]
000050  f44f3080          MOV      r0,#0x10000
000054  e9cd9012          STRD     r9,r0,[sp,#0x48]
000058  2702              MOVS     r7,#2
00005a  0180              LSLS     r0,r0,#6
00005c  e9cd7018          STRD     r7,r0,[sp,#0x60]
000060  f04f0808          MOV      r8,#8
000064  2607              MOVS     r6,#7
000066  f8cd8068          STR      r8,[sp,#0x68]
00006a  f44f70a8          MOV      r0,#0x150
00006e  961d              STR      r6,[sp,#0x74]
000070  e9cd071b          STRD     r0,r7,[sp,#0x6c]
000074  a812              ADD      r0,sp,#0x48
000076  f7fffffe          BL       HAL_RCC_OscConfig
00007a  200f              MOVS     r0,#0xf
00007c  e9cd071e          STRD     r0,r7,[sp,#0x78]
000080  f44f50a0          MOV      r0,#0x1400
000084  e9cd5020          STRD     r5,r0,[sp,#0x80]
000088  02f8              LSLS     r0,r7,#11
00008a  9022              STR      r0,[sp,#0x88]
00008c  2105              MOVS     r1,#5
00008e  a81e              ADD      r0,sp,#0x78
000090  f7fffffe          BL       HAL_RCC_ClockConfig
000094  4c3b              LDR      r4,|L2.388|
000096  6820              LDR      r0,[r4,#0]
000098  f4407000          ORR      r0,r0,#0x200
00009c  6020              STR      r0,[r4,#0]
00009e  6820              LDR      r0,[r4,#0]
0000a0  f4406080          ORR      r0,r0,#0x400
0000a4  6020              STR      r0,[r4,#0]
0000a6  f7fffffe          BL       HAL_GetREVID
0000aa  f5b05f80          CMP      r0,#0x1000
0000ae  d003              BEQ      |L2.184|
0000b0  6820              LDR      r0,[r4,#0]
0000b2  f4407080          ORR      r0,r0,#0x100
0000b6  6020              STR      r0,[r4,#0]
                  |L2.184|
0000b8  4833              LDR      r0,|L2.392|
0000ba  6801              LDR      r1,[r0,#0]
0000bc  f0410102          ORR      r1,r1,#2
0000c0  6001              STR      r1,[r0,#0]
0000c2  6800              LDR      r0,[r0,#0]
0000c4  f0000002          AND      r0,r0,#2
0000c8  9028              STR      r0,[sp,#0xa0]
0000ca  4830              LDR      r0,|L2.396|
0000cc  6801              LDR      r1,[r0,#0]
0000ce  f0410110          ORR      r1,r1,#0x10
0000d2  6001              STR      r1,[r0,#0]
0000d4  6800              LDR      r0,[r0,#0]
0000d6  f8cd9094          STR      r9,[sp,#0x94]
0000da  f0000010          AND      r0,r0,#0x10
0000de  9028              STR      r0,[sp,#0xa0]
0000e0  2040              MOVS     r0,#0x40
0000e2  e9cd0723          STRD     r0,r7,[sp,#0x8c]
0000e6  e9cd7626          STRD     r7,r6,[sp,#0x98]
0000ea  a923              ADD      r1,sp,#0x8c
0000ec  4828              LDR      r0,|L2.400|
0000ee  f7fffffe          BL       HAL_GPIO_Init
0000f2  4c28              LDR      r4,|L2.404|
0000f4  f44f30e1          MOV      r0,#0x1c200
0000f8  9400              STR      r4,[sp,#0]
0000fa  e9cd0501          STRD     r0,r5,[sp,#4]
0000fe  9503              STR      r5,[sp,#0xc]
000100  9504              STR      r5,[sp,#0x10]
000102  e9cd8505          STRD     r8,r5,[sp,#0x14]
000106  4668              MOV      r0,sp
000108  f7fffffe          BL       HAL_UART_Init
00010c  200d              MOVS     r0,#0xd
00010e  6060              STR      r0,[r4,#4]
                  |L2.272|
000110  6820              LDR      r0,[r4,#0]
000112  f0100f40          TST      r0,#0x40
000116  d0fb              BEQ      |L2.272|
000118  200a              MOVS     r0,#0xa
00011a  6060              STR      r0,[r4,#4]
                  |L2.284|
00011c  6820              LDR      r0,[r4,#0]
00011e  f0100f40          TST      r0,#0x40
000122  d0fb              BEQ      |L2.284|
000124  481c              LDR      r0,|L2.408|
000126  6801              LDR      r1,[r0,#0]
000128  f44121e0          ORR      r1,r1,#0x70000
00012c  6001              STR      r1,[r0,#0]
00012e  481b              LDR      r0,|L2.412|
000130  6801              LDR      r1,[r0,#0]
000132  f64f02ff          MOV      r2,#0xf8ff
000136  4011              ANDS     r1,r1,r2
000138  f44161a0          ORR      r1,r1,#0x500
00013c  f04171fd          ORR      r1,r1,#0x1fa0000
000140  f0416180          ORR      r1,r1,#0x4000000
000144  6001              STR      r1,[r0,#0]
000146  4916              LDR      r1,|L2.416|
000148  20f0              MOVS     r0,#0xf0
00014a  7008              STRB     r0,[r1,#0]
00014c  1cc9              ADDS     r1,r1,#3
00014e  7008              STRB     r0,[r1,#0]
000150  1c4a              ADDS     r2,r1,#1
000152  7010              STRB     r0,[r2,#0]
000154  4913              LDR      r1,|L2.420|
000156  7008              STRB     r0,[r1,#0]
000158  1c49              ADDS     r1,r1,#1
00015a  7008              STRB     r0,[r1,#0]
00015c  1d89              ADDS     r1,r1,#6
00015e  7008              STRB     r0,[r1,#0]
000160  f04f21e0          MOV      r1,#0xe000e000
000164  f244139f          MOV      r3,#0x419f
000168  614b              STR      r3,[r1,#0x14]
00016a  7010              STRB     r0,[r2,#0]
00016c  618d              STR      r5,[r1,#0x18]
00016e  610e              STR      r6,[r1,#0x10]
;;;81       
;;;82         RMP_Disable_Int();
000170  b029              ADD      sp,sp,#0xa4
000172  e8bd43f0          POP      {r4-r9,lr}
000176  f7ffbffe          B.W      RMP_Disable_Int
;;;83     }
;;;84     /* End Function:_RMP_Low_Level_Init ******************************************/
                          ENDP

00017a  0000              DCW      0x0000
                  |L2.380|
                          DCD      0x40023840
                  |L2.384|
                          DCD      0x40007000
                  |L2.388|
                          DCD      0x40023c00
                  |L2.392|
                          DCD      0x40023830
                  |L2.396|
                          DCD      0x40023844
                  |L2.400|
                          DCD      0x40020400
                  |L2.404|
                          DCD      0x40011000
                  |L2.408|
                          DCD      0xe000ed24
                  |L2.412|
                          DCD      0xe000ed0c
                  |L2.416|
                          DCD      0xe000ed1f
                  |L2.420|
                          DCD      0xe000ed19

                          AREA ||i._RMP_Plat_Hook||, CODE, READONLY, ALIGN=1

                  _RMP_Plat_Hook PROC
;;;91     ******************************************************************************/
;;;92     void _RMP_Plat_Hook(void)
000000  f7ffbffe          B.W      RMP_Enable_Int
;;;93     {
;;;94         RMP_Enable_Int();
;;;95     }
;;;96     /* End Function:_RMP_Plat_Hook ***********************************************/
                          ENDP


                          AREA ||i._RMP_Stack_Init||, CODE, READONLY, ALIGN=1

                  _RMP_Stack_Init PROC
;;;52     ******************************************************************************/
;;;53     void _RMP_Stack_Init(rmp_ptr_t Entry, rmp_ptr_t Stack, rmp_ptr_t Arg)
000000  63c8              STR      r0,[r1,#0x3c]
;;;54     {
;;;55         /* This is the LR value indicating that we never used the FPU */
;;;56         ((rmp_ptr_t*)Stack)[0+8]=0xFFFFFFFD;    
;;;57         /* Cortex-M:Pass the parameter */                            
;;;58         ((rmp_ptr_t*)Stack)[0+9]=Arg;       
;;;59         /* Cortex-M:Set the process entry */
;;;60         ((rmp_ptr_t*)Stack)[6+9]=Entry;
;;;61         /* Cortex-M:Set the T bit or an INVSTATE will happen; don't set STKALIGN, 
;;;62          * and there is no stack padding. The effect of STKALIGN is, if it is set
;;;63          * and the (hardware-pushed) interrupt stack is 8n byte aligned, it will
;;;64          * pop an extra word (to restore the stack to an previous unaligned state);
;;;65          * if the interrupt stack is 8n+4 byte aligned, even if STKALIGN is set, it
;;;66          * will not pop this extra word. The result is, if STKALIGN is set, we will
;;;67          * never be able to get a 8n byte aligned stack, so we do not set it. */                            
;;;68         ((rmp_ptr_t*)Stack)[7+9]=0x01000000;
000002  f04f7080          MOV      r0,#0x1000000
000006  f06f0302          MVN      r3,#2                 ;56
00000a  6408              STR      r0,[r1,#0x40]
00000c  e9c13208          STRD     r3,r2,[r1,#0x20]
;;;69     }
000010  4770              BX       lr
;;;70     /* End Function:_RMP_Stack_Init **********************************************/
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\MProkaron\\Platform\\CortexM\\rmp_platform_cmx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_rmp_platform_cmx_c_203ac359____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F4_V1.21.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___18_rmp_platform_cmx_c_203ac359____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_rmp_platform_cmx_c_203ac359____REVSH|
#line 402
|__asm___18_rmp_platform_cmx_c_203ac359____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_rmp_platform_cmx_c_203ac359____RRX|
#line 587
|__asm___18_rmp_platform_cmx_c_203ac359____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
