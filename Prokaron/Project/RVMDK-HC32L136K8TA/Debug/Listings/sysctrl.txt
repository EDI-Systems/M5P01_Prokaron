; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\sysctrl.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\sysctrl.d --cpu=Cortex-M0+ --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\HC32L13X_DDL_V1.0\driver\inc -I..\..\..\M0P0_Library\HC32L13X_DDL_V1.0\mcu\common -I..\..\..\M0P0_Library\HC32L13X_DDL_V1.0\driver\CMSIS\Include -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-HC32L136K8TA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\HDSC\HC32L13X\1.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ --enum_is_int --signed_chars --omf_browse=.\debug\output\sysctrl.crf ..\..\..\M0P0_Library\HC32L13X_DDL_V1.0\driver\src\sysctrl.c]
                          THUMB

                          AREA ||i.Sysctrl_ClkDeInit||, CODE, READONLY, ALIGN=2

                  Sysctrl_ClkDeInit PROC
;;;492     ******************************************************************************/
;;;493    en_result_t Sysctrl_ClkDeInit(void)
000000  b5f8              PUSH     {r3-r7,lr}
000002  481c              LDR      r0,|L1.116|
000004  2700              MOVS     r7,#0
000006  8900              LDRH     r0,[r0,#8]
000008  4c1b              LDR      r4,|L1.120|
00000a  0540              LSLS     r0,r0,#21
00000c  68e1              LDR      r1,[r4,#0xc]
00000e  0d40              LSRS     r0,r0,#21
000010  0ac9              LSRS     r1,r1,#11
000012  02c9              LSLS     r1,r1,#11
000014  4301              ORRS     r1,r1,r0
000016  60e1              STR      r1,[r4,#0xc]
;;;494    {
;;;495        en_result_t enRet = Ok;
;;;496        
;;;497        //配置RCH为内部4Hz
;;;498        Sysctrl_SetRCHTrim(SysctrlRchFreq4MHz);
;;;499        
;;;500        //时钟源使能
;;;501        Sysctrl_ClkSourceEnable(SysctrlClkRCH, TRUE);
000018  2101              MOVS     r1,#1
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       Sysctrl_ClkSourceEnable
000020  4d16              LDR      r5,|L1.124|
000022  60a5              STR      r5,[r4,#8]
000024  4e16              LDR      r6,|L1.128|
000026  60a6              STR      r6,[r4,#8]
000028  6820              LDR      r0,[r4,#0]
00002a  21e0              MOVS     r1,#0xe0
00002c  4388              BICS     r0,r0,r1
00002e  6020              STR      r0,[r4,#0]
000030  f7fffffe          BL       SystemCoreClockUpdate
;;;502        
;;;503        //时钟源切换
;;;504        Sysctrl_SysClkSwitch(SysctrlClkRCH);
;;;505        
;;;506        //其它时钟源使能关闭
;;;507        Sysctrl_ClkSourceEnable(SysctrlClkXTH, FALSE);
000034  2100              MOVS     r1,#0
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       Sysctrl_ClkSourceEnable
;;;508        Sysctrl_ClkSourceEnable(SysctrlClkRCL, FALSE);
00003c  2100              MOVS     r1,#0
00003e  2002              MOVS     r0,#2
000040  f7fffffe          BL       Sysctrl_ClkSourceEnable
;;;509        Sysctrl_ClkSourceEnable(SysctrlClkXTL, FALSE);
000044  2100              MOVS     r1,#0
000046  2003              MOVS     r0,#3
000048  f7fffffe          BL       Sysctrl_ClkSourceEnable
;;;510        Sysctrl_ClkSourceEnable(SysctrlClkPLL, FALSE);
00004c  2100              MOVS     r1,#0
00004e  2004              MOVS     r0,#4
000050  f7fffffe          BL       Sysctrl_ClkSourceEnable
000054  60a5              STR      r5,[r4,#8]
000056  60a6              STR      r6,[r4,#8]
000058  6820              LDR      r0,[r4,#0]
00005a  2107              MOVS     r1,#7
00005c  0209              LSLS     r1,r1,#8
00005e  4388              BICS     r0,r0,r1
000060  6020              STR      r0,[r4,#0]
000062  60a5              STR      r5,[r4,#8]
000064  60a6              STR      r6,[r4,#8]
000066  6820              LDR      r0,[r4,#0]
000068  2103              MOVS     r1,#3
00006a  02c9              LSLS     r1,r1,#11
00006c  4388              BICS     r0,r0,r1
00006e  6020              STR      r0,[r4,#0]
;;;511        
;;;512        //时钟分频设置
;;;513        Sysctrl_SetHCLKDiv(SysctrlHclkDiv1);
;;;514        Sysctrl_SetPCLKDiv(SysctrlPclkDiv1);
;;;515        
;;;516        return enRet;
000070  4638              MOV      r0,r7
;;;517    }
000072  bdf8              POP      {r3-r7,pc}
;;;518    
                          ENDP

                  |L1.116|
                          DCD      0x00100c00
                  |L1.120|
                          DCD      0x40002000
                  |L1.124|
                          DCD      0x00005a5a
                  |L1.128|
                          DCD      0x0000a5a5

                          AREA ||i.Sysctrl_ClkInit||, CODE, READONLY, ALIGN=2

                  Sysctrl_ClkInit PROC
;;;443     ******************************************************************************/
;;;444    en_result_t Sysctrl_ClkInit(stc_sysctrl_clk_config_t *pstcCfg)
000000  b5f8              PUSH     {r3-r7,lr}
;;;445    {
000002  4605              MOV      r5,r0
;;;446        en_result_t enRet = Ok;
;;;447        
;;;448        //系统时钟参数配置
;;;449        switch(pstcCfg->enClkSrc)
000004  6801              LDR      r1,[r0,#0]
000006  2600              MOVS     r6,#0                 ;446
000008  2003              MOVS     r0,#3
00000a  2330              MOVS     r3,#0x30
00000c  4c2f              LDR      r4,|L2.204|
00000e  2905              CMP      r1,#5
000010  d22e              BCS      |L2.112|
000012  000a              MOVS     r2,r1
000014  447a              ADD      r2,r2,pc
000016  7912              LDRB     r2,[r2,#4]
000018  1892              ADDS     r2,r2,r2
00001a  4497              ADD      pc,pc,r2
00001c  2a020c13          DCB      0x2a,0x02,0x0c,0x13
000020  2200              DCB      0x22,0x00
000022  6921              LDR      r1,[r4,#0x10]
000024  0889              LSRS     r1,r1,#2
000026  0089              LSLS     r1,r1,#2
000028  4301              ORRS     r1,r1,r0
00002a  6121              STR      r1,[r4,#0x10]
00002c  6920              LDR      r0,[r4,#0x10]
00002e  4398              BICS     r0,r0,r3
000030  4318              ORRS     r0,r0,r3
000032  6120              STR      r0,[r4,#0x10]
;;;450        {   
;;;451            case SysctrlClkRCH:  
;;;452    
;;;453                break;    
;;;454            case SysctrlClkXTH:    
;;;455                Sysctrl_XTHDriverConfig(SysctrlXtalDriver3);
;;;456                Sysctrl_SetXTHStableTime(SysctrlXthStableCycle16384);           
;;;457                break;    
000034  e01d              B        |L2.114|
000036  6960              LDR      r0,[r4,#0x14]
000038  2103              MOVS     r1,#3
00003a  0289              LSLS     r1,r1,#10
00003c  4388              BICS     r0,r0,r1
00003e  4308              ORRS     r0,r0,r1
000040  6160              STR      r0,[r4,#0x14]
;;;458            case SysctrlClkRCL:    
;;;459                Sysctrl_SetRCLStableTime(SysctrlRclStableCycle256);    
;;;460                break;    
000042  e016              B        |L2.114|
000044  69a2              LDR      r2,[r4,#0x18]
000046  210c              MOVS     r1,#0xc
000048  438a              BICS     r2,r2,r1
00004a  430a              ORRS     r2,r2,r1
00004c  61a2              STR      r2,[r4,#0x18]
00004e  69a1              LDR      r1,[r4,#0x18]
000050  0889              LSRS     r1,r1,#2
000052  0089              LSLS     r1,r1,#2
000054  4301              ORRS     r1,r1,r0
000056  61a1              STR      r1,[r4,#0x18]
000058  69a0              LDR      r0,[r4,#0x18]
00005a  4398              BICS     r0,r0,r3
00005c  4318              ORRS     r0,r0,r3
00005e  61a0              STR      r0,[r4,#0x18]
;;;461            case SysctrlClkXTL:    
;;;462                Sysctrl_XTLDriverConfig(SysctrlXtlAmp3, SysctrlXtalDriver3);
;;;463                Sysctrl_SetXTLStableTime(SysctrlXtlStableCycle16384);
;;;464                break;
000060  e007              B        |L2.114|
000062  6be0              LDR      r0,[r4,#0x3c]
000064  2107              MOVS     r1,#7
000066  03c9              LSLS     r1,r1,#15
000068  4388              BICS     r0,r0,r1
00006a  4308              ORRS     r0,r0,r1
00006c  63e0              STR      r0,[r4,#0x3c]
;;;465            case SysctrlClkPLL:    
;;;466                Sysctrl_SetPLLStableTime(SysctrlPllStableCycle16384);
;;;467                break;
00006e  e000              B        |L2.114|
                  |L2.112|
;;;468            default:
;;;469                enRet = ErrorInvalidParameter;
000070  2604              MOVS     r6,#4
                  |L2.114|
;;;470                break;
;;;471        }
;;;472        
;;;473        //时钟源使能
;;;474        Sysctrl_ClkSourceEnable(pstcCfg->enClkSrc, TRUE);
000072  2101              MOVS     r1,#1
000074  6828              LDR      r0,[r5,#0]
000076  f7fffffe          BL       Sysctrl_ClkSourceEnable
;;;475        
;;;476        //时钟源切换
;;;477        Sysctrl_SysClkSwitch(pstcCfg->enClkSrc);
00007a  7828              LDRB     r0,[r5,#0]
00007c  4914              LDR      r1,|L2.208|
00007e  60a1              STR      r1,[r4,#8]
000080  4f14              LDR      r7,|L2.212|
000082  60a7              STR      r7,[r4,#8]
000084  6821              LDR      r1,[r4,#0]
000086  22e0              MOVS     r2,#0xe0
000088  0740              LSLS     r0,r0,#29
00008a  4391              BICS     r1,r1,r2
00008c  0e00              LSRS     r0,r0,#24
00008e  4301              ORRS     r1,r1,r0
000090  6021              STR      r1,[r4,#0]
000092  f7fffffe          BL       SystemCoreClockUpdate
;;;478        
;;;479        //时钟分频设置
;;;480        Sysctrl_SetHCLKDiv(pstcCfg->enHClkDiv);
000096  7929              LDRB     r1,[r5,#4]
000098  480d              LDR      r0,|L2.208|
00009a  60a0              STR      r0,[r4,#8]
00009c  60a7              STR      r7,[r4,#8]
00009e  6820              LDR      r0,[r4,#0]
0000a0  2207              MOVS     r2,#7
0000a2  0212              LSLS     r2,r2,#8
0000a4  0749              LSLS     r1,r1,#29
0000a6  4390              BICS     r0,r0,r2
0000a8  0d49              LSRS     r1,r1,#21
0000aa  4308              ORRS     r0,r0,r1
0000ac  6020              STR      r0,[r4,#0]
;;;481        Sysctrl_SetPCLKDiv(pstcCfg->enPClkDiv);
0000ae  7a29              LDRB     r1,[r5,#8]
0000b0  4807              LDR      r0,|L2.208|
0000b2  60a0              STR      r0,[r4,#8]
0000b4  60a7              STR      r7,[r4,#8]
0000b6  6820              LDR      r0,[r4,#0]
0000b8  2203              MOVS     r2,#3
0000ba  02d2              LSLS     r2,r2,#11
0000bc  0789              LSLS     r1,r1,#30
0000be  4390              BICS     r0,r0,r2
0000c0  0cc9              LSRS     r1,r1,#19
0000c2  4308              ORRS     r0,r0,r1
0000c4  6020              STR      r0,[r4,#0]
;;;482    
;;;483        return enRet;
0000c6  4630              MOV      r0,r6
;;;484    }
0000c8  bdf8              POP      {r3-r7,pc}
;;;485    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L2.204|
                          DCD      0x40002000
                  |L2.208|
                          DCD      0x00005a5a
                  |L2.212|
                          DCD      0x0000a5a5

                          AREA ||i.Sysctrl_ClkSourceEnable||, CODE, READONLY, ALIGN=2

                  Sysctrl_ClkSourceEnable PROC
;;;133     ******************************************************************************/
;;;134    en_result_t Sysctrl_ClkSourceEnable(en_sysctrl_clk_source_t enSource, boolean_t bFlag)
000000  b430              PUSH     {r4,r5}
000002  4a35              LDR      r2,|L3.216|
;;;135    {
000004  4603              MOV      r3,r0
000006  4c33              LDR      r4,|L3.212|
;;;136        en_result_t enRet = Ok;
000008  2000              MOVS     r0,#0
00000a  6094              STR      r4,[r2,#8]
00000c  4c33              LDR      r4,|L3.220|
00000e  6094              STR      r4,[r2,#8]
;;;137    
;;;138        _SysctrlUnlock();
;;;139        bFlag = !!bFlag;
000010  2900              CMP      r1,#0
000012  d000              BEQ      |L3.22|
000014  2101              MOVS     r1,#1
                  |L3.22|
;;;140    
;;;141        switch (enSource)
000016  2b05              CMP      r3,#5
000018  d259              BCS      |L3.206|
00001a  001c              MOVS     r4,r3
00001c  447c              ADD      r4,r4,pc
00001e  7924              LDRB     r4,[r4,#4]
000020  1924              ADDS     r4,r4,r4
000022  44a7              ADD      pc,pc,r4
000024  020e2330          DCB      0x02,0x0e,0x23,0x30
000028  4700              DCB      0x47,0x00
;;;142        {
;;;143            case SysctrlClkRCH:
;;;144                M0P_SYSCTRL->SYSCTRL0_f.RCH_EN = bFlag;
00002a  6813              LDR      r3,[r2,#0]
00002c  085b              LSRS     r3,r3,#1
00002e  005b              LSLS     r3,r3,#1
000030  430b              ORRS     r3,r3,r1
000032  6013              STR      r3,[r2,#0]
                  |L3.52|
;;;145                while(bFlag && (1 != M0P_SYSCTRL->RCH_CR_f.STABLE))
000034  2900              CMP      r1,#0
000036  d002              BEQ      |L3.62|
000038  68d3              LDR      r3,[r2,#0xc]
00003a  051b              LSLS     r3,r3,#20
00003c  d5fa              BPL      |L3.52|
                  |L3.62|
;;;146                {
;;;147                    ;
;;;148                }
;;;149                break;
;;;150            
;;;151            case SysctrlClkXTH:
;;;152                M0P_GPIO->PDADS_f.PD00 = 1;
;;;153                M0P_GPIO->PDADS_f.PD01 = 1;           
;;;154                M0P_SYSCTRL->SYSCTRL0_f.XTH_EN = bFlag;
;;;155                while(bFlag && (1 != M0P_SYSCTRL->XTH_CR_f.STABLE))
;;;156                {
;;;157                    ;
;;;158                }
;;;159                break;
;;;160    
;;;161            case SysctrlClkRCL:
;;;162                M0P_SYSCTRL->SYSCTRL0_f.RCL_EN = bFlag;
;;;163                while(bFlag && (1 != M0P_SYSCTRL->RCL_CR_f.STABLE))
;;;164                {
;;;165                    ;
;;;166                }
;;;167                break;
;;;168            
;;;169            case SysctrlClkXTL:
;;;170                M0P_GPIO->PCADS_f.PC14 = 1;
;;;171                M0P_GPIO->PCADS_f.PC15 = 1;
;;;172                M0P_SYSCTRL->SYSCTRL0_f.XTL_EN = bFlag;
;;;173                while(bFlag && (1 != M0P_SYSCTRL->XTL_CR_f.STABLE))
;;;174                {
;;;175                    ;
;;;176                }
;;;177                break;
;;;178    
;;;179            case SysctrlClkPLL:
;;;180                M0P_SYSCTRL->SYSCTRL0_f.PLL_EN = bFlag;
;;;181                while(bFlag && (1 != M0P_SYSCTRL->PLL_CR_f.STABLE))
;;;182                {
;;;183                    ;
;;;184                }
;;;185                break;
;;;186            
;;;187            default:
;;;188                enRet = ErrorInvalidParameter;
;;;189                break;
;;;190        }
;;;191    
;;;192        return enRet;
;;;193    }
00003e  bc30              POP      {r4,r5}
000040  4770              BX       lr
000042  4b27              LDR      r3,|L3.224|
000044  68dc              LDR      r4,[r3,#0xc]          ;152
000046  2501              MOVS     r5,#1                 ;152
000048  432c              ORRS     r4,r4,r5              ;152
00004a  60dc              STR      r4,[r3,#0xc]          ;152
00004c  68dd              LDR      r5,[r3,#0xc]          ;153
00004e  2402              MOVS     r4,#2                 ;153
000050  4325              ORRS     r5,r5,r4              ;153
000052  60dd              STR      r5,[r3,#0xc]          ;153
000054  6813              LDR      r3,[r2,#0]            ;154
000056  43a3              BICS     r3,r3,r4              ;154
000058  004c              LSLS     r4,r1,#1              ;154
00005a  4323              ORRS     r3,r3,r4              ;154
00005c  6013              STR      r3,[r2,#0]            ;154
                  |L3.94|
00005e  2900              CMP      r1,#0                 ;155
000060  d0ed              BEQ      |L3.62|
000062  6913              LDR      r3,[r2,#0x10]         ;155
000064  065b              LSLS     r3,r3,#25             ;155
000066  d5fa              BPL      |L3.94|
                  |L3.104|
000068  bc30              POP      {r4,r5}
00006a  4770              BX       lr
00006c  6813              LDR      r3,[r2,#0]            ;162
00006e  2404              MOVS     r4,#4                 ;162
000070  43a3              BICS     r3,r3,r4              ;162
000072  008c              LSLS     r4,r1,#2              ;162
000074  4323              ORRS     r3,r3,r4              ;162
000076  6013              STR      r3,[r2,#0]            ;162
                  |L3.120|
000078  2900              CMP      r1,#0                 ;163
00007a  d0f5              BEQ      |L3.104|
00007c  6953              LDR      r3,[r2,#0x14]         ;163
00007e  04db              LSLS     r3,r3,#19             ;163
000080  d5fa              BPL      |L3.120|
                  |L3.130|
000082  bc30              POP      {r4,r5}
000084  4770              BX       lr
000086  4b17              LDR      r3,|L3.228|
000088  68dc              LDR      r4,[r3,#0xc]          ;170
00008a  2501              MOVS     r5,#1                 ;170
00008c  03ad              LSLS     r5,r5,#14             ;170
00008e  432c              ORRS     r4,r4,r5              ;170
000090  60dc              STR      r4,[r3,#0xc]          ;170
000092  68dc              LDR      r4,[r3,#0xc]          ;171
000094  006d              LSLS     r5,r5,#1              ;171
000096  432c              ORRS     r4,r4,r5              ;171
000098  60dc              STR      r4,[r3,#0xc]          ;171
00009a  6813              LDR      r3,[r2,#0]            ;172
00009c  2408              MOVS     r4,#8                 ;172
00009e  43a3              BICS     r3,r3,r4              ;172
0000a0  00cc              LSLS     r4,r1,#3              ;172
0000a2  4323              ORRS     r3,r3,r4              ;172
0000a4  6013              STR      r3,[r2,#0]            ;172
                  |L3.166|
0000a6  2900              CMP      r1,#0                 ;173
0000a8  d0eb              BEQ      |L3.130|
0000aa  6993              LDR      r3,[r2,#0x18]         ;173
0000ac  065b              LSLS     r3,r3,#25             ;173
0000ae  d5fa              BPL      |L3.166|
                  |L3.176|
0000b0  bc30              POP      {r4,r5}
0000b2  4770              BX       lr
0000b4  6813              LDR      r3,[r2,#0]            ;180
0000b6  2410              MOVS     r4,#0x10              ;180
0000b8  43a3              BICS     r3,r3,r4              ;180
0000ba  010c              LSLS     r4,r1,#4              ;180
0000bc  4323              ORRS     r3,r3,r4              ;180
0000be  6013              STR      r3,[r2,#0]            ;180
                  |L3.192|
0000c0  2900              CMP      r1,#0                 ;181
0000c2  d0f5              BEQ      |L3.176|
0000c4  6bd3              LDR      r3,[r2,#0x3c]         ;181
0000c6  035b              LSLS     r3,r3,#13             ;181
0000c8  d5fa              BPL      |L3.192|
0000ca  bc30              POP      {r4,r5}
0000cc  4770              BX       lr
                  |L3.206|
0000ce  bc30              POP      {r4,r5}
0000d0  2004              MOVS     r0,#4                 ;188
0000d2  4770              BX       lr
;;;194    
                          ENDP

                  |L3.212|
                          DCD      0x00005a5a
                  |L3.216|
                          DCD      0x40002000
                  |L3.220|
                          DCD      0x0000a5a5
                  |L3.224|
                          DCD      0x40020dc0
                  |L3.228|
                          DCD      0x40020d80

                          AREA ||i.Sysctrl_GetHClkFreq||, CODE, READONLY, ALIGN=2

                  Sysctrl_GetHClkFreq PROC
;;;315     ******************************************************************************/
;;;316    uint32_t Sysctrl_GetHClkFreq(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;317    {
;;;318        uint32_t u32Val = 0;
;;;319        const uint32_t u32hcr_tbl[] = { 4000000, 8000000, 16000000, 22120000, 24000000};
000002  4c49              LDR      r4,|L4.296|
000004  2000              MOVS     r0,#0                 ;318
000006  1d21              ADDS     r1,r4,#4
000008  c92e              LDM      r1,{r1-r3,r5}
00000a  b082              SUB      sp,sp,#8              ;317
00000c  46ac              MOV      r12,r5
00000e  6965              LDR      r5,[r4,#0x14]  ; <Data2>
;;;320        const uint16_t u32lcr_tbl[] = { 32768, 38400};
000010  6824              LDR      r4,[r4,#0]  ; <Data3>
;;;321        en_sysctrl_clk_source_t enSrc;
;;;322        uint16_t u16Trim[5] = {0};
;;;323        u16Trim[4] = RCH_CR_TRIM_24M_VAL;
000012  4f46              LDR      r7,|L4.300|
000014  9400              STR      r4,[sp,#0]
000016  46ae              MOV      lr,r5                 ;319
000018  883e              LDRH     r6,[r7,#0]
00001a  4605              MOV      r5,r0                 ;322
00001c  4604              MOV      r4,r0
00001e  4334              ORRS     r4,r4,r6
;;;324        u16Trim[3] = RCH_CR_TRIM_22_12M_VAL;
000020  9401              STR      r4,[sp,#4]
000022  887e              LDRH     r6,[r7,#2]
000024  0434              LSLS     r4,r6,#16
;;;325        u16Trim[2] = RCH_CR_TRIM_16M_VAL;
000026  88be              LDRH     r6,[r7,#4]
000028  4304              ORRS     r4,r4,r0              ;324
00002a  0c24              LSRS     r4,r4,#16
00002c  0424              LSLS     r4,r4,#16
00002e  4334              ORRS     r4,r4,r6
;;;326        u16Trim[1] = RCH_CR_TRIM_8M_VAL;
000030  88fe              LDRH     r6,[r7,#6]
000032  0436              LSLS     r6,r6,#16
000034  4335              ORRS     r5,r5,r6
;;;327        u16Trim[0] = RCL_CR_TRIM_38400_VAL;
000036  4e3e              LDR      r6,|L4.304|
000038  8836              LDRH     r6,[r6,#0]
00003a  0c2d              LSRS     r5,r5,#16
00003c  042d              LSLS     r5,r5,#16
00003e  4335              ORRS     r5,r5,r6
;;;328    
;;;329        //获取当前系统时钟
;;;330        enSrc = (en_sysctrl_clk_source_t)(M0P_SYSCTRL->SYSCTRL0_f.CLK_SW5_SEL);
000040  4e3c              LDR      r6,|L4.308|
000042  6836              LDR      r6,[r6,#0]
000044  0636              LSLS     r6,r6,#24
000046  0f76              LSRS     r6,r6,#29
;;;331        
;;;332        switch (enSrc)
000048  2e05              CMP      r6,#5
00004a  d245              BCS      |L4.216|
00004c  0037              MOVS     r7,r6
00004e  447f              ADD      r7,r7,pc
000050  793f              LDRB     r7,[r7,#4]
000052  19ff              ADDS     r7,r7,r7
000054  44bf              ADD      pc,pc,r7
000056  0225              DCB      0x02,0x25
000058  27333600          DCB      0x27,0x33,0x36,0x00
;;;333        {
;;;334            case SysctrlClkRCH:
;;;335                {
;;;336                    
;;;337                    if((M0P_SYSCTRL->RCH_CR_f.TRIM) == (u16Trim[4]))
00005c  4f35              LDR      r7,|L4.308|
00005e  68f8              LDR      r0,[r7,#0xc]
000060  0546              LSLS     r6,r0,#21
000062  9801              LDR      r0,[sp,#4]
000064  0d76              LSRS     r6,r6,#21
000066  4286              CMP      r6,r0
000068  d101              BNE      |L4.110|
;;;338                    {
;;;339                        u32Val = u32hcr_tbl[4];
00006a  4670              MOV      r0,lr
00006c  e034              B        |L4.216|
                  |L4.110|
;;;340                    }
;;;341                    else if((M0P_SYSCTRL->RCH_CR_f.TRIM) == (u16Trim[3]))
00006e  68f8              LDR      r0,[r7,#0xc]
000070  0c26              LSRS     r6,r4,#16
000072  0540              LSLS     r0,r0,#21
000074  0d40              LSRS     r0,r0,#21
000076  42b0              CMP      r0,r6
000078  d101              BNE      |L4.126|
;;;342                    {
;;;343                        u32Val = u32hcr_tbl[3];
00007a  4660              MOV      r0,r12
00007c  e02c              B        |L4.216|
                  |L4.126|
;;;344                    }                   
;;;345                    else if((M0P_SYSCTRL->RCH_CR_f.TRIM) == (u16Trim[2]))
00007e  68f8              LDR      r0,[r7,#0xc]
000080  b2a4              UXTH     r4,r4
000082  0540              LSLS     r0,r0,#21
000084  0d40              LSRS     r0,r0,#21
000086  42a0              CMP      r0,r4
000088  d101              BNE      |L4.142|
;;;346                    {
;;;347                        u32Val = u32hcr_tbl[2];
00008a  4618              MOV      r0,r3
00008c  e024              B        |L4.216|
                  |L4.142|
;;;348                    }    
;;;349                    else if((M0P_SYSCTRL->RCH_CR_f.TRIM) == (u16Trim[1]))
00008e  68f8              LDR      r0,[r7,#0xc]
000090  0c2b              LSRS     r3,r5,#16
000092  0540              LSLS     r0,r0,#21
000094  0d40              LSRS     r0,r0,#21
000096  4298              CMP      r0,r3
000098  d101              BNE      |L4.158|
;;;350                    {
;;;351                        u32Val = u32hcr_tbl[1];
00009a  4610              MOV      r0,r2
00009c  e01c              B        |L4.216|
                  |L4.158|
;;;352                    }
;;;353                    else
;;;354                    {
;;;355                        u32Val = u32hcr_tbl[0];
00009e  4608              MOV      r0,r1
0000a0  e01a              B        |L4.216|
;;;356                    }
;;;357                }
;;;358                break;
;;;359            case SysctrlClkXTH:
;;;360                u32Val = SYSTEM_XTH;
0000a2  4825              LDR      r0,|L4.312|
;;;361                break;
0000a4  e018              B        |L4.216|
;;;362            case SysctrlClkRCL:
;;;363                {
;;;364                    if(u16Trim[0] == (M0P_SYSCTRL->RCL_CR_f.TRIM))
0000a6  4823              LDR      r0,|L4.308|
0000a8  b2a9              UXTH     r1,r5                 ;361
0000aa  6940              LDR      r0,[r0,#0x14]
0000ac  0580              LSLS     r0,r0,#22
0000ae  0d80              LSRS     r0,r0,#22
0000b0  4281              CMP      r1,r0
0000b2  9800              LDR      r0,[sp,#0]
0000b4  d101              BNE      |L4.186|
0000b6  0c00              LSRS     r0,r0,#16
;;;365                    {
;;;366                        u32Val = u32lcr_tbl[1];
0000b8  e00e              B        |L4.216|
                  |L4.186|
0000ba  b280              UXTH     r0,r0
;;;367                    }
;;;368                    else
;;;369                    {
;;;370                        u32Val = u32lcr_tbl[0];
0000bc  e00c              B        |L4.216|
;;;371                    }
;;;372                }
;;;373                break;
;;;374            case SysctrlClkXTL:
;;;375                u32Val = SYSTEM_XTL;
0000be  2001              MOVS     r0,#1
0000c0  03c0              LSLS     r0,r0,#15
;;;376                break;
0000c2  e009              B        |L4.216|
;;;377            case SysctrlClkPLL:
;;;378                {
;;;379                    if (SysctrlPllRch == M0P_SYSCTRL->PLL_CR_f.REFSEL)
0000c4  481b              LDR      r0,|L4.308|
0000c6  6bc6              LDR      r6,[r0,#0x3c]
0000c8  43f6              MVNS     r6,r6
0000ca  07b6              LSLS     r6,r6,#30
0000cc  d00b              BEQ      |L4.230|
;;;380                    {
;;;381                        if(u16Trim[4] == M0P_SYSCTRL->RCH_CR_f.TRIM)
;;;382                        {
;;;383                            u32Val = u32hcr_tbl[4];
;;;384                        }
;;;385                        else if(u16Trim[3] == M0P_SYSCTRL->RCH_CR_f.TRIM)
;;;386                        {
;;;387                            u32Val = u32hcr_tbl[3];
;;;388                        }                   
;;;389                        else if(u16Trim[2] == M0P_SYSCTRL->RCH_CR_f.TRIM)
;;;390                        {
;;;391                            u32Val = u32hcr_tbl[2];
;;;392                        }    
;;;393                        else if(u16Trim[1] == M0P_SYSCTRL->RCH_CR_f.TRIM)
;;;394                        {
;;;395                            u32Val = u32hcr_tbl[1];
;;;396                        }
;;;397                        else
;;;398                        {
;;;399                            u32Val = u32hcr_tbl[0];
;;;400                        }
;;;401                    }
;;;402                    else
;;;403                    {
;;;404                        u32Val = SYSTEM_XTH;
0000ce  491a              LDR      r1,|L4.312|
                  |L4.208|
;;;405                    }
;;;406                    
;;;407                    u32Val = (u32Val * M0P_SYSCTRL->PLL_CR_f.DIVN);
0000d0  6bc0              LDR      r0,[r0,#0x3c]
0000d2  05c0              LSLS     r0,r0,#23
0000d4  0f00              LSRS     r0,r0,#28
0000d6  4348              MULS     r0,r1,r0
                  |L4.216|
;;;408                }
;;;409                break;        
;;;410            default:
;;;411                u32Val = 0u;
;;;412                break;
;;;413        }
;;;414    
;;;415        u32Val = (u32Val >> M0P_SYSCTRL->SYSCTRL0_f.HCLK_PRS);
0000d8  4916              LDR      r1,|L4.308|
0000da  6809              LDR      r1,[r1,#0]
;;;416    
;;;417        return u32Val;
;;;418    }
0000dc  b002              ADD      sp,sp,#8
0000de  0549              LSLS     r1,r1,#21             ;415
0000e0  0f49              LSRS     r1,r1,#29             ;415
0000e2  40c8              LSRS     r0,r0,r1              ;415
0000e4  bdf0              POP      {r4-r7,pc}
                  |L4.230|
0000e6  9e01              LDR      r6,[sp,#4]            ;381
0000e8  68c7              LDR      r7,[r0,#0xc]          ;381
0000ea  057f              LSLS     r7,r7,#21             ;381
0000ec  0d7f              LSRS     r7,r7,#21             ;381
0000ee  42be              CMP      r6,r7                 ;381
0000f0  d101              BNE      |L4.246|
0000f2  4671              MOV      r1,lr                 ;383
0000f4  e7ec              B        |L4.208|
                  |L4.246|
0000f6  68c7              LDR      r7,[r0,#0xc]          ;385
0000f8  0c26              LSRS     r6,r4,#16             ;383
0000fa  057f              LSLS     r7,r7,#21             ;385
0000fc  0d7f              LSRS     r7,r7,#21             ;385
0000fe  42be              CMP      r6,r7                 ;385
000100  d101              BNE      |L4.262|
000102  4661              MOV      r1,r12                ;387
000104  e7e4              B        |L4.208|
                  |L4.262|
000106  68c6              LDR      r6,[r0,#0xc]          ;389
000108  b2a4              UXTH     r4,r4                 ;387
00010a  0576              LSLS     r6,r6,#21             ;389
00010c  0d76              LSRS     r6,r6,#21             ;389
00010e  42b4              CMP      r4,r6                 ;389
000110  d101              BNE      |L4.278|
000112  4619              MOV      r1,r3                 ;391
000114  e7dc              B        |L4.208|
                  |L4.278|
000116  68c4              LDR      r4,[r0,#0xc]          ;393
000118  0c2b              LSRS     r3,r5,#16             ;391
00011a  0564              LSLS     r4,r4,#21             ;393
00011c  0d64              LSRS     r4,r4,#21             ;393
00011e  42a3              CMP      r3,r4                 ;393
000120  d1d6              BNE      |L4.208|
000122  4611              MOV      r1,r2                 ;395
000124  e7d4              B        |L4.208|
;;;419    
                          ENDP

000126  0000              DCW      0x0000
                  |L4.296|
                          DCD      ||.constdata||
                  |L4.300|
                          DCD      0x00100c00
                  |L4.304|
                          DCD      0x00100c20
                  |L4.308|
                          DCD      0x40002000
                  |L4.312|
                          DCD      0x01e84800

                          AREA ||i.Sysctrl_GetPClkFreq||, CODE, READONLY, ALIGN=2

                  Sysctrl_GetPClkFreq PROC
;;;425     ******************************************************************************/
;;;426    uint32_t Sysctrl_GetPClkFreq(void)
000000  b500              PUSH     {lr}
;;;427    {
;;;428        uint32_t u32Val = 0;
;;;429    
;;;430        u32Val = Sysctrl_GetHClkFreq();
000002  f7fffffe          BL       Sysctrl_GetHClkFreq
;;;431        u32Val = (u32Val >> (M0P_SYSCTRL->SYSCTRL0_f.PCLK_PRS));
000006  4903              LDR      r1,|L5.20|
000008  6809              LDR      r1,[r1,#0]
00000a  04c9              LSLS     r1,r1,#19
00000c  0f89              LSRS     r1,r1,#30
00000e  40c8              LSRS     r0,r0,r1
;;;432    
;;;433        return u32Val;
;;;434    }
000010  bd00              POP      {pc}
;;;435    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x40002000

                          AREA ||i.Sysctrl_GetPeripheralGate||, CODE, READONLY, ALIGN=2

                  Sysctrl_GetPeripheralGate PROC
;;;703     ******************************************************************************/
;;;704    boolean_t Sysctrl_GetPeripheralGate(en_sysctrl_peripheral_gate_t enPeripheral)
000000  4902              LDR      r1,|L6.12|
;;;705    {       
;;;706        return getBit(&(M0P_SYSCTRL->PERI_CLKEN), enPeripheral);
000002  6a09              LDR      r1,[r1,#0x20]
000004  40c1              LSRS     r1,r1,r0
000006  07c8              LSLS     r0,r1,#31
000008  0fc0              LSRS     r0,r0,#31
;;;707    }
00000a  4770              BX       lr
;;;708    
                          ENDP

                  |L6.12|
                          DCD      0x40002000

                          AREA ||i.Sysctrl_SetFunc||, CODE, READONLY, ALIGN=2

                  Sysctrl_SetFunc PROC
;;;716     ******************************************************************************/
;;;717    en_result_t Sysctrl_SetFunc(en_sysctrl_func_t enFunc, boolean_t bFlag)
000000  b410              PUSH     {r4}
000002  4a2a              LDR      r2,|L7.172|
;;;718    {
000004  4603              MOV      r3,r0
000006  4c28              LDR      r4,|L7.168|
;;;719        en_result_t enRet = Ok;
000008  2000              MOVS     r0,#0
00000a  6094              STR      r4,[r2,#8]
00000c  4c28              LDR      r4,|L7.176|
00000e  6094              STR      r4,[r2,#8]
;;;720        
;;;721        _SysctrlUnlock();
;;;722        bFlag = !!bFlag;
000010  2900              CMP      r1,#0
000012  d000              BEQ      |L7.22|
000014  2101              MOVS     r1,#1
                  |L7.22|
;;;723    
;;;724        switch (enFunc)
000016  2b07              CMP      r3,#7
000018  d242              BCS      |L7.160|
00001a  001c              MOVS     r4,r3
00001c  447c              ADD      r4,r4,pc
00001e  7924              LDRB     r4,[r4,#4]
000020  1924              ADDS     r4,r4,r4
000022  44a7              ADD      pc,pc,r4
000024  030c141c          DCB      0x03,0x0c,0x14,0x1c
000028  242c3400          DCB      0x24,0x2c,0x34,0x00
;;;725        {
;;;726            case SysctrlWkupByRCHEn:
;;;727                M0P_SYSCTRL->SYSCTRL0_f.WAKEUP_BYRCH = bFlag;
00002c  6813              LDR      r3,[r2,#0]
00002e  2401              MOVS     r4,#1
000030  03e4              LSLS     r4,r4,#15
000032  43a3              BICS     r3,r3,r4
000034  03c9              LSLS     r1,r1,#15
000036  430b              ORRS     r3,r3,r1
000038  6013              STR      r3,[r2,#0]
;;;728                break;
;;;729            case SysctrlEXTHEn:
;;;730                M0P_SYSCTRL->SYSCTRL1_f.EXTH_EN = bFlag;
;;;731                break;
;;;732            case SysctrlEXTLEn:
;;;733                M0P_SYSCTRL->SYSCTRL1_f.EXTL_EN = bFlag;
;;;734                break;
;;;735            case SysctrlXTLAlwaysOnEn:
;;;736                M0P_SYSCTRL->SYSCTRL1_f.XTL_ALWAYS_ON = bFlag;
;;;737                break;
;;;738            case SysctrlClkFuncRTCLpmEn:
;;;739                M0P_SYSCTRL->SYSCTRL1_f.RTC_LPW = bFlag;
;;;740                break;
;;;741            case SysctrlCMLockUpEn:
;;;742                M0P_SYSCTRL->SYSCTRL1_f.LOCKUP_EN = bFlag;
;;;743                break;
;;;744            case SysctrlSWDUseIOEn:
;;;745                M0P_SYSCTRL->SYSCTRL1_f.SWD_USE_IO = bFlag;
;;;746                break;
;;;747            default:
;;;748                enRet = ErrorInvalidParameter;
;;;749                break;
;;;750        }
;;;751    
;;;752        return enRet;
;;;753    }
00003a  bc10              POP      {r4}
00003c  4770              BX       lr
00003e  6853              LDR      r3,[r2,#4]            ;730
000040  2402              MOVS     r4,#2                 ;730
000042  43a3              BICS     r3,r3,r4              ;730
000044  0049              LSLS     r1,r1,#1              ;730
000046  430b              ORRS     r3,r3,r1              ;730
000048  6053              STR      r3,[r2,#4]            ;730
00004a  bc10              POP      {r4}
00004c  4770              BX       lr
00004e  6853              LDR      r3,[r2,#4]            ;733
000050  2404              MOVS     r4,#4                 ;733
000052  43a3              BICS     r3,r3,r4              ;733
000054  0089              LSLS     r1,r1,#2              ;733
000056  430b              ORRS     r3,r3,r1              ;733
000058  6053              STR      r3,[r2,#4]            ;733
00005a  bc10              POP      {r4}
00005c  4770              BX       lr
00005e  6853              LDR      r3,[r2,#4]            ;736
000060  2408              MOVS     r4,#8                 ;736
000062  43a3              BICS     r3,r3,r4              ;736
000064  00c9              LSLS     r1,r1,#3              ;736
000066  430b              ORRS     r3,r3,r1              ;736
000068  6053              STR      r3,[r2,#4]            ;736
00006a  bc10              POP      {r4}
00006c  4770              BX       lr
00006e  6853              LDR      r3,[r2,#4]            ;739
000070  2420              MOVS     r4,#0x20              ;739
000072  43a3              BICS     r3,r3,r4              ;739
000074  0149              LSLS     r1,r1,#5              ;739
000076  430b              ORRS     r3,r3,r1              ;739
000078  6053              STR      r3,[r2,#4]            ;739
00007a  bc10              POP      {r4}
00007c  4770              BX       lr
00007e  6853              LDR      r3,[r2,#4]            ;742
000080  2440              MOVS     r4,#0x40              ;742
000082  43a3              BICS     r3,r3,r4              ;742
000084  0189              LSLS     r1,r1,#6              ;742
000086  430b              ORRS     r3,r3,r1              ;742
000088  6053              STR      r3,[r2,#4]            ;742
00008a  bc10              POP      {r4}
00008c  4770              BX       lr
00008e  6853              LDR      r3,[r2,#4]            ;745
000090  24ff              MOVS     r4,#0xff              ;745
000092  3401              ADDS     r4,#1                 ;745
000094  43a3              BICS     r3,r3,r4              ;745
000096  0209              LSLS     r1,r1,#8              ;745
000098  430b              ORRS     r3,r3,r1              ;745
00009a  6053              STR      r3,[r2,#4]            ;745
00009c  bc10              POP      {r4}
00009e  4770              BX       lr
                  |L7.160|
0000a0  bc10              POP      {r4}
0000a2  2004              MOVS     r0,#4                 ;748
0000a4  4770              BX       lr
;;;754    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L7.168|
                          DCD      0x00005a5a
                  |L7.172|
                          DCD      0x40002000
                  |L7.176|
                          DCD      0x0000a5a5

                          AREA ||i.Sysctrl_SetHCLKDiv||, CODE, READONLY, ALIGN=2

                  Sysctrl_SetHCLKDiv PROC
;;;650     ******************************************************************************/
;;;651    en_result_t Sysctrl_SetHCLKDiv(en_sysctrl_hclk_div_t enHCLKDiv)
000000  b410              PUSH     {r4}
000002  4909              LDR      r1,|L8.40|
000004  4a07              LDR      r2,|L8.36|
;;;652    {
;;;653        en_result_t enRet = Ok;
000006  2300              MOVS     r3,#0
000008  608a              STR      r2,[r1,#8]
00000a  4a08              LDR      r2,|L8.44|
00000c  608a              STR      r2,[r1,#8]
;;;654        
;;;655        _SysctrlUnlock();
;;;656        M0P_SYSCTRL->SYSCTRL0_f.HCLK_PRS = enHCLKDiv;
00000e  680a              LDR      r2,[r1,#0]
000010  2407              MOVS     r4,#7
000012  0224              LSLS     r4,r4,#8
000014  0740              LSLS     r0,r0,#29
000016  43a2              BICS     r2,r2,r4
000018  0d40              LSRS     r0,r0,#21
00001a  4302              ORRS     r2,r2,r0
00001c  600a              STR      r2,[r1,#0]
;;;657    
;;;658        return enRet;
;;;659    }
00001e  bc10              POP      {r4}
000020  4618              MOV      r0,r3                 ;658
000022  4770              BX       lr
;;;660    
                          ENDP

                  |L8.36|
                          DCD      0x00005a5a
                  |L8.40|
                          DCD      0x40002000
                  |L8.44|
                          DCD      0x0000a5a5

                          AREA ||i.Sysctrl_SetPCLKDiv||, CODE, READONLY, ALIGN=2

                  Sysctrl_SetPCLKDiv PROC
;;;667     ******************************************************************************/
;;;668    en_result_t Sysctrl_SetPCLKDiv(en_sysctrl_pclk_div_t enPCLKDiv)
000000  b410              PUSH     {r4}
000002  4909              LDR      r1,|L9.40|
000004  4a07              LDR      r2,|L9.36|
;;;669    {
;;;670        en_result_t enRet = Ok;
000006  2300              MOVS     r3,#0
000008  608a              STR      r2,[r1,#8]
00000a  4a08              LDR      r2,|L9.44|
00000c  608a              STR      r2,[r1,#8]
;;;671        
;;;672        _SysctrlUnlock();
;;;673        M0P_SYSCTRL->SYSCTRL0_f.PCLK_PRS = enPCLKDiv;
00000e  680a              LDR      r2,[r1,#0]
000010  2403              MOVS     r4,#3
000012  02e4              LSLS     r4,r4,#11
000014  0780              LSLS     r0,r0,#30
000016  43a2              BICS     r2,r2,r4
000018  0cc0              LSRS     r0,r0,#19
00001a  4302              ORRS     r2,r2,r0
00001c  600a              STR      r2,[r1,#0]
;;;674        
;;;675        return enRet;
;;;676    }
00001e  bc10              POP      {r4}
000020  4618              MOV      r0,r3                 ;675
000022  4770              BX       lr
;;;677    
                          ENDP

                  |L9.36|
                          DCD      0x00005a5a
                  |L9.40|
                          DCD      0x40002000
                  |L9.44|
                          DCD      0x0000a5a5

                          AREA ||i.Sysctrl_SetPLLFreq||, CODE, READONLY, ALIGN=2

                  Sysctrl_SetPLLFreq PROC
;;;578     ******************************************************************************/
;;;579    en_result_t Sysctrl_SetPLLFreq(stc_sysctrl_pll_config_t *pstcPLLCfg)
000000  b470              PUSH     {r4-r6}
;;;580    {
;;;581        en_result_t enRet = Ok;    
;;;582        
;;;583        uint16_t u16Trim[5] = {0};
;;;584        u16Trim[4] = RCH_CR_TRIM_24M_VAL;
000002  4932              LDR      r1,|L10.204|
000004  2500              MOVS     r5,#0                 ;581
000006  880b              LDRH     r3,[r1,#0]
000008  462a              MOV      r2,r5                 ;583
00000a  462c              MOV      r4,r5
00000c  431c              ORRS     r4,r4,r3
;;;585        u16Trim[3] = RCH_CR_TRIM_22_12M_VAL;
00000e  884b              LDRH     r3,[r1,#2]
;;;586        u16Trim[2] = RCH_CR_TRIM_16M_VAL;
000010  888e              LDRH     r6,[r1,#4]
000012  041b              LSLS     r3,r3,#16             ;585
000014  432b              ORRS     r3,r3,r5              ;585
000016  0c1b              LSRS     r3,r3,#16
000018  041b              LSLS     r3,r3,#16
;;;587        u16Trim[1] = RCH_CR_TRIM_8M_VAL;
00001a  88c9              LDRH     r1,[r1,#6]
00001c  4333              ORRS     r3,r3,r6              ;586
00001e  0409              LSLS     r1,r1,#16
000020  430a              ORRS     r2,r2,r1
;;;588        
;;;589        ////PLL最高时钟不能超过48MHz
;;;590        //RCH作为PLL输入
;;;591        if (SysctrlPllRch == pstcPLLCfg->enPllClkSrc)
000022  6886              LDR      r6,[r0,#8]
;;;592        {
;;;593            if( ((u16Trim[4] == M0P_SYSCTRL->RCH_CR_f.TRIM) && (pstcPLLCfg->enPllMul > 2)) ||                
000024  492a              LDR      r1,|L10.208|
000026  2e03              CMP      r6,#3                 ;591
000028  d008              BEQ      |L10.60|
;;;594                ((u16Trim[3] == M0P_SYSCTRL->RCH_CR_f.TRIM) && (pstcPLLCfg->enPllMul > 2)) ||
;;;595                ((u16Trim[2] == M0P_SYSCTRL->RCH_CR_f.TRIM) && (pstcPLLCfg->enPllMul > 3)) ||   
;;;596                ((u16Trim[1] == M0P_SYSCTRL->RCH_CR_f.TRIM) && (pstcPLLCfg->enPllMul > 6)))
;;;597            {
;;;598                return ErrorInvalidMode;
;;;599            }
;;;600        }
;;;601        else    //XTH作为PLL输入
;;;602        {
;;;603            if ((SYSTEM_XTH * pstcPLLCfg->enPllMul) > 48*1000*1000)
00002a  4b2a              LDR      r3,|L10.212|
00002c  68c2              LDR      r2,[r0,#0xc]
00002e  435a              MULS     r2,r3,r2
000030  4b29              LDR      r3,|L10.216|
000032  429a              CMP      r2,r3
000034  d925              BLS      |L10.130|
                  |L10.54|
;;;604            {
;;;605                return ErrorInvalidMode;
;;;606            }
;;;607        }
;;;608        
;;;609        M0P_SYSCTRL->PLL_CR_f.FRSEL  = pstcPLLCfg->enInFreq;
;;;610        M0P_SYSCTRL->PLL_CR_f.FOSC   = pstcPLLCfg->enOutFreq;
;;;611        M0P_SYSCTRL->PLL_CR_f.DIVN   = pstcPLLCfg->enPllMul;
;;;612        M0P_SYSCTRL->PLL_CR_f.REFSEL = pstcPLLCfg->enPllClkSrc;
;;;613     
;;;614        return enRet;    
;;;615    }
000036  bc70              POP      {r4-r6}
000038  2006              MOVS     r0,#6                 ;605
00003a  4770              BX       lr
                  |L10.60|
00003c  68ce              LDR      r6,[r1,#0xc]          ;593
00003e  0576              LSLS     r6,r6,#21             ;593
000040  0d76              LSRS     r6,r6,#21             ;593
000042  42b4              CMP      r4,r6                 ;593
000044  d102              BNE      |L10.76|
000046  68c4              LDR      r4,[r0,#0xc]          ;593
000048  2c02              CMP      r4,#2                 ;593
00004a  d8f4              BHI      |L10.54|
                  |L10.76|
00004c  68ce              LDR      r6,[r1,#0xc]          ;594
00004e  0c1c              LSRS     r4,r3,#16             ;593
000050  0576              LSLS     r6,r6,#21             ;594
000052  0d76              LSRS     r6,r6,#21             ;594
000054  42b4              CMP      r4,r6                 ;594
000056  d102              BNE      |L10.94|
000058  68c4              LDR      r4,[r0,#0xc]          ;594
00005a  2c02              CMP      r4,#2                 ;594
00005c  d8eb              BHI      |L10.54|
                  |L10.94|
00005e  68cc              LDR      r4,[r1,#0xc]          ;595
000060  b29b              UXTH     r3,r3                 ;594
000062  0564              LSLS     r4,r4,#21             ;595
000064  0d64              LSRS     r4,r4,#21             ;595
000066  42a3              CMP      r3,r4                 ;595
000068  d102              BNE      |L10.112|
00006a  68c3              LDR      r3,[r0,#0xc]          ;595
00006c  2b03              CMP      r3,#3                 ;595
00006e  d8e2              BHI      |L10.54|
                  |L10.112|
000070  68cb              LDR      r3,[r1,#0xc]          ;596
000072  0c12              LSRS     r2,r2,#16             ;595
000074  055b              LSLS     r3,r3,#21             ;596
000076  0d5b              LSRS     r3,r3,#21             ;596
000078  429a              CMP      r2,r3                 ;596
00007a  d102              BNE      |L10.130|
00007c  68c2              LDR      r2,[r0,#0xc]          ;596
00007e  2a06              CMP      r2,#6                 ;596
000080  d8d9              BHI      |L10.54|
                  |L10.130|
000082  6bca              LDR      r2,[r1,#0x3c]         ;609
000084  2303              MOVS     r3,#3                 ;609
000086  035b              LSLS     r3,r3,#13             ;609
000088  439a              BICS     r2,r2,r3              ;609
00008a  7803              LDRB     r3,[r0,#0]            ;609
00008c  079b              LSLS     r3,r3,#30             ;609
00008e  0c5b              LSRS     r3,r3,#17             ;609
000090  431a              ORRS     r2,r2,r3              ;609
000092  63ca              STR      r2,[r1,#0x3c]         ;609
000094  6bca              LDR      r2,[r1,#0x3c]         ;610
000096  231c              MOVS     r3,#0x1c              ;610
000098  439a              BICS     r2,r2,r3              ;610
00009a  7903              LDRB     r3,[r0,#4]            ;610
00009c  075b              LSLS     r3,r3,#29             ;610
00009e  0edb              LSRS     r3,r3,#27             ;610
0000a0  431a              ORRS     r2,r2,r3              ;610
0000a2  63ca              STR      r2,[r1,#0x3c]         ;610
0000a4  6bca              LDR      r2,[r1,#0x3c]         ;611
0000a6  23ff              MOVS     r3,#0xff              ;611
0000a8  33e1              ADDS     r3,r3,#0xe1           ;611
0000aa  439a              BICS     r2,r2,r3              ;611
0000ac  7b03              LDRB     r3,[r0,#0xc]          ;611
0000ae  071b              LSLS     r3,r3,#28             ;611
0000b0  0ddb              LSRS     r3,r3,#23             ;611
0000b2  431a              ORRS     r2,r2,r3              ;611
0000b4  63ca              STR      r2,[r1,#0x3c]         ;611
0000b6  6bca              LDR      r2,[r1,#0x3c]         ;612
0000b8  7a00              LDRB     r0,[r0,#8]            ;612
0000ba  0892              LSRS     r2,r2,#2              ;612
0000bc  0092              LSLS     r2,r2,#2              ;612
0000be  0780              LSLS     r0,r0,#30             ;612
0000c0  0f80              LSRS     r0,r0,#30             ;612
0000c2  4302              ORRS     r2,r2,r0              ;612
0000c4  63ca              STR      r2,[r1,#0x3c]         ;612
0000c6  4628              MOV      r0,r5                 ;614
0000c8  bc70              POP      {r4-r6}
0000ca  4770              BX       lr
;;;616    
                          ENDP

                  |L10.204|
                          DCD      0x00100c00
                  |L10.208|
                          DCD      0x40002000
                  |L10.212|
                          DCD      0x01e84800
                  |L10.216|
                          DCD      0x02dc6c00

                          AREA ||i.Sysctrl_SetPLLStableTime||, CODE, READONLY, ALIGN=2

                  Sysctrl_SetPLLStableTime PROC
;;;278     ******************************************************************************/
;;;279    en_result_t Sysctrl_SetPLLStableTime(en_sysctrl_pll_cycle_t enCycle)
000000  b410              PUSH     {r4}
;;;280    {
;;;281        en_result_t enRet = Ok;
;;;282        M0P_SYSCTRL->PLL_CR_f.STARTUP = enCycle;
000002  4a06              LDR      r2,|L11.28|
000004  2300              MOVS     r3,#0                 ;281
000006  6bd1              LDR      r1,[r2,#0x3c]
000008  2407              MOVS     r4,#7
00000a  03e4              LSLS     r4,r4,#15
00000c  0740              LSLS     r0,r0,#29
00000e  43a1              BICS     r1,r1,r4
000010  0b80              LSRS     r0,r0,#14
000012  4301              ORRS     r1,r1,r0
000014  63d1              STR      r1,[r2,#0x3c]
;;;283        return enRet;
;;;284    }
000016  bc10              POP      {r4}
000018  4618              MOV      r0,r3                 ;283
00001a  4770              BX       lr
;;;285    
                          ENDP

                  |L11.28|
                          DCD      0x40002000

                          AREA ||i.Sysctrl_SetPeripheralGate||, CODE, READONLY, ALIGN=2

                  Sysctrl_SetPeripheralGate PROC
;;;685     ******************************************************************************/
;;;686    en_result_t Sysctrl_SetPeripheralGate(en_sysctrl_peripheral_gate_t enPeripheral, boolean_t bFlag)
000000  b410              PUSH     {r4}
;;;687    {
000002  4604              MOV      r4,r0
;;;688        en_result_t enRet = Ok;
;;;689    
;;;690        bFlag = !!bFlag;
000004  2301              MOVS     r3,#1
000006  2000              MOVS     r0,#0                 ;688
;;;691        
;;;692        setBit(&(M0P_SYSCTRL->PERI_CLKEN), enPeripheral, bFlag);
000008  4a05              LDR      r2,|L12.32|
00000a  40a3              LSLS     r3,r3,r4
00000c  2900              CMP      r1,#0                 ;690
00000e  6a11              LDR      r1,[r2,#0x20]
000010  d001              BEQ      |L12.22|
000012  4319              ORRS     r1,r1,r3
000014  e000              B        |L12.24|
                  |L12.22|
000016  4399              BICS     r1,r1,r3
                  |L12.24|
000018  6211              STR      r1,[r2,#0x20]
;;;693        
;;;694        return enRet;
;;;695    }
00001a  bc10              POP      {r4}
00001c  4770              BX       lr
;;;696    
                          ENDP

00001e  0000              DCW      0x0000
                  |L12.32|
                          DCD      0x40002000

                          AREA ||i.Sysctrl_SetRCHTrim||, CODE, READONLY, ALIGN=2

                  Sysctrl_SetRCHTrim PROC
;;;525     ******************************************************************************/
;;;526    en_result_t Sysctrl_SetRCHTrim(en_sysctrl_rch_freq_t enRCHFreq)
000000  4603              MOV      r3,r0
;;;527    {
000002  b410              PUSH     {r4}
;;;528        en_result_t enRet = Ok;
000004  2000              MOVS     r0,#0
;;;529    
;;;530        //加载RCH Trim值
;;;531        switch (enRCHFreq)
;;;532        {
;;;533            case SysctrlRchFreq4MHz:
;;;534                M0P_SYSCTRL->RCH_CR_f.TRIM = RCH_CR_TRIM_4M_VAL;
000006  4a20              LDR      r2,|L13.136|
000008  4920              LDR      r1,|L13.140|
00000a  2b05              CMP      r3,#5                 ;531
00000c  d239              BCS      |L13.130|
00000e  001c              MOVS     r4,r3                 ;531
000010  447c              ADD      r4,r4,pc              ;531
000012  7924              LDRB     r4,[r4,#4]            ;531
000014  1924              ADDS     r4,r4,r4              ;531
000016  44a7              ADD      pc,pc,r4              ;531
000018  020c1620          DCB      0x02,0x0c,0x16,0x20
00001c  2a00              DCB      0x2a,0x00
00001e  8912              LDRH     r2,[r2,#8]
000020  68cb              LDR      r3,[r1,#0xc]
000022  0552              LSLS     r2,r2,#21
000024  0d52              LSRS     r2,r2,#21
000026  0adb              LSRS     r3,r3,#11
000028  02db              LSLS     r3,r3,#11
00002a  4313              ORRS     r3,r3,r2
00002c  60cb              STR      r3,[r1,#0xc]
;;;535                break;
;;;536            case SysctrlRchFreq8MHz:
;;;537                M0P_SYSCTRL->RCH_CR_f.TRIM = RCH_CR_TRIM_8M_VAL;
;;;538                break;
;;;539            case SysctrlRchFreq16MHz:
;;;540                M0P_SYSCTRL->RCH_CR_f.TRIM = RCH_CR_TRIM_16M_VAL;
;;;541                break;
;;;542            case SysctrlRchFreq22_12MHz:
;;;543                M0P_SYSCTRL->RCH_CR_f.TRIM = RCH_CR_TRIM_22_12M_VAL;
;;;544                break;
;;;545            case SysctrlRchFreq24MHz:
;;;546                M0P_SYSCTRL->RCH_CR_f.TRIM = RCH_CR_TRIM_24M_VAL;
;;;547                break;
;;;548            default:
;;;549                enRet = ErrorInvalidParameter;
;;;550                break;
;;;551        }
;;;552        
;;;553        return enRet;
;;;554    }
00002e  bc10              POP      {r4}
000030  4770              BX       lr
000032  88d2              LDRH     r2,[r2,#6]            ;537
000034  68cb              LDR      r3,[r1,#0xc]          ;537
000036  0552              LSLS     r2,r2,#21             ;537
000038  0d52              LSRS     r2,r2,#21             ;537
00003a  0adb              LSRS     r3,r3,#11             ;537
00003c  02db              LSLS     r3,r3,#11             ;537
00003e  4313              ORRS     r3,r3,r2              ;537
000040  60cb              STR      r3,[r1,#0xc]          ;537
000042  bc10              POP      {r4}
000044  4770              BX       lr
000046  8892              LDRH     r2,[r2,#4]            ;540
000048  68cb              LDR      r3,[r1,#0xc]          ;540
00004a  0552              LSLS     r2,r2,#21             ;540
00004c  0d52              LSRS     r2,r2,#21             ;540
00004e  0adb              LSRS     r3,r3,#11             ;540
000050  02db              LSLS     r3,r3,#11             ;540
000052  4313              ORRS     r3,r3,r2              ;540
000054  60cb              STR      r3,[r1,#0xc]          ;540
000056  bc10              POP      {r4}
000058  4770              BX       lr
00005a  8852              LDRH     r2,[r2,#2]            ;543
00005c  68cb              LDR      r3,[r1,#0xc]          ;543
00005e  0552              LSLS     r2,r2,#21             ;543
000060  0d52              LSRS     r2,r2,#21             ;543
000062  0adb              LSRS     r3,r3,#11             ;543
000064  02db              LSLS     r3,r3,#11             ;543
000066  4313              ORRS     r3,r3,r2              ;543
000068  60cb              STR      r3,[r1,#0xc]          ;543
00006a  bc10              POP      {r4}
00006c  4770              BX       lr
00006e  8812              LDRH     r2,[r2,#0]            ;546
000070  68cb              LDR      r3,[r1,#0xc]          ;546
000072  0552              LSLS     r2,r2,#21             ;546
000074  0d52              LSRS     r2,r2,#21             ;546
000076  0adb              LSRS     r3,r3,#11             ;546
000078  02db              LSLS     r3,r3,#11             ;546
00007a  4313              ORRS     r3,r3,r2              ;546
00007c  60cb              STR      r3,[r1,#0xc]          ;546
00007e  bc10              POP      {r4}
000080  4770              BX       lr
                  |L13.130|
000082  bc10              POP      {r4}
000084  2004              MOVS     r0,#4                 ;549
000086  4770              BX       lr
;;;555    
                          ENDP

                  |L13.136|
                          DCD      0x00100c00
                  |L13.140|
                          DCD      0x40002000

                          AREA ||i.Sysctrl_SetRCLStableTime||, CODE, READONLY, ALIGN=2

                  Sysctrl_SetRCLStableTime PROC
;;;250     ******************************************************************************/
;;;251    en_result_t Sysctrl_SetRCLStableTime(en_sysctrl_rcl_cycle_t enCycle)
000000  b410              PUSH     {r4}
;;;252    {
;;;253        en_result_t enRet = Ok;
;;;254        M0P_SYSCTRL->RCL_CR_f.STARTUP = enCycle;
000002  4a06              LDR      r2,|L14.28|
000004  2300              MOVS     r3,#0                 ;253
000006  6951              LDR      r1,[r2,#0x14]
000008  2403              MOVS     r4,#3
00000a  02a4              LSLS     r4,r4,#10
00000c  0780              LSLS     r0,r0,#30
00000e  43a1              BICS     r1,r1,r4
000010  0d00              LSRS     r0,r0,#20
000012  4301              ORRS     r1,r1,r0
000014  6151              STR      r1,[r2,#0x14]
;;;255        return enRet;
;;;256    }
000016  bc10              POP      {r4}
000018  4618              MOV      r0,r3                 ;255
00001a  4770              BX       lr
;;;257    
                          ENDP

                  |L14.28|
                          DCD      0x40002000

                          AREA ||i.Sysctrl_SetRCLTrim||, CODE, READONLY, ALIGN=2

                  Sysctrl_SetRCLTrim PROC
;;;623     ******************************************************************************/
;;;624    en_result_t Sysctrl_SetRCLTrim(en_sysctrl_rcl_freq_t enRCLFreq)
000000  4603              MOV      r3,r0
;;;625    {
;;;626        en_result_t enRet = Ok;
000002  2000              MOVS     r0,#0
;;;627    
;;;628        switch (enRCLFreq)
;;;629        {
;;;630            case SysctrlRclFreq32768:
;;;631                M0P_SYSCTRL->RCL_CR_f.TRIM = RCL_CR_TRIM_32768_VAL;
000004  4a0c              LDR      r2,|L15.56|
000006  490d              LDR      r1,|L15.60|
000008  2b00              CMP      r3,#0                 ;628
00000a  d003              BEQ      |L15.20|
00000c  2b01              CMP      r3,#1                 ;628
00000e  d00a              BEQ      |L15.38|
;;;632                break;
;;;633            case SysctrlRclFreq38400:
;;;634                M0P_SYSCTRL->RCL_CR_f.TRIM = RCL_CR_TRIM_38400_VAL;
;;;635                break;
;;;636            default:
;;;637                enRet = ErrorInvalidParameter;
000010  2004              MOVS     r0,#4
;;;638                break;
;;;639        }
;;;640    
;;;641        return enRet;
;;;642    }
000012  4770              BX       lr
                  |L15.20|
000014  8852              LDRH     r2,[r2,#2]            ;631
000016  694b              LDR      r3,[r1,#0x14]         ;631
000018  0592              LSLS     r2,r2,#22             ;631
00001a  0d92              LSRS     r2,r2,#22             ;631
00001c  0a9b              LSRS     r3,r3,#10             ;631
00001e  029b              LSLS     r3,r3,#10             ;631
000020  4313              ORRS     r3,r3,r2              ;631
000022  614b              STR      r3,[r1,#0x14]         ;631
000024  4770              BX       lr
                  |L15.38|
000026  8812              LDRH     r2,[r2,#0]            ;634
000028  694b              LDR      r3,[r1,#0x14]         ;634
00002a  0592              LSLS     r2,r2,#22             ;634
00002c  0d92              LSRS     r2,r2,#22             ;634
00002e  0a9b              LSRS     r3,r3,#10             ;634
000030  029b              LSLS     r3,r3,#10             ;634
000032  4313              ORRS     r3,r3,r2              ;634
000034  614b              STR      r3,[r1,#0x14]         ;634
000036  4770              BX       lr
;;;643    
                          ENDP

                  |L15.56|
                          DCD      0x00100c20
                  |L15.60|
                          DCD      0x40002000

                          AREA ||i.Sysctrl_SetRTCAdjustClkFreq||, CODE, READONLY, ALIGN=2

                  Sysctrl_SetRTCAdjustClkFreq PROC
;;;761     ******************************************************************************/
;;;762    en_result_t Sysctrl_SetRTCAdjustClkFreq(en_sysctrl_rtc_adjust_t enRtcAdj)
000000  b410              PUSH     {r4}
000002  4909              LDR      r1,|L16.40|
000004  4a07              LDR      r2,|L16.36|
;;;763    {
;;;764        en_result_t enRet = Ok;
000006  2300              MOVS     r3,#0
000008  608a              STR      r2,[r1,#8]
00000a  4a08              LDR      r2,|L16.44|
00000c  608a              STR      r2,[r1,#8]
;;;765    
;;;766        _SysctrlUnlock();
;;;767        M0P_SYSCTRL->SYSCTRL1_f.RTC_FREQ_ADJUST = enRtcAdj;
00000e  684a              LDR      r2,[r1,#4]
000010  2407              MOVS     r4,#7
000012  0264              LSLS     r4,r4,#9
000014  0740              LSLS     r0,r0,#29
000016  43a2              BICS     r2,r2,r4
000018  0d00              LSRS     r0,r0,#20
00001a  4302              ORRS     r2,r2,r0
00001c  604a              STR      r2,[r1,#4]
;;;768    
;;;769        return enRet;
;;;770    }
00001e  bc10              POP      {r4}
000020  4618              MOV      r0,r3                 ;769
000022  4770              BX       lr
;;;771    
                          ENDP

                  |L16.36|
                          DCD      0x00005a5a
                  |L16.40|
                          DCD      0x40002000
                  |L16.44|
                          DCD      0x0000a5a5

                          AREA ||i.Sysctrl_SetXTHFreq||, CODE, READONLY, ALIGN=2

                  Sysctrl_SetXTHFreq PROC
;;;562     ******************************************************************************/
;;;563    en_result_t Sysctrl_SetXTHFreq(en_sysctrl_xth_freq_t enXTHFreq)
000000  b410              PUSH     {r4}
;;;564    {
;;;565        en_result_t enRet = Ok;
;;;566    
;;;567        M0P_SYSCTRL->XTH_CR_f.XTH_FSEL = enXTHFreq;
000002  4a06              LDR      r2,|L17.28|
000004  2300              MOVS     r3,#0                 ;565
000006  6911              LDR      r1,[r2,#0x10]
000008  240c              MOVS     r4,#0xc
00000a  0780              LSLS     r0,r0,#30
00000c  43a1              BICS     r1,r1,r4
00000e  0f00              LSRS     r0,r0,#28
000010  4301              ORRS     r1,r1,r0
000012  6111              STR      r1,[r2,#0x10]
;;;568        
;;;569        return enRet;
;;;570    }
000014  bc10              POP      {r4}
000016  4618              MOV      r0,r3                 ;569
000018  4770              BX       lr
;;;571    
                          ENDP

00001a  0000              DCW      0x0000
                  |L17.28|
                          DCD      0x40002000

                          AREA ||i.Sysctrl_SetXTHStableTime||, CODE, READONLY, ALIGN=2

                  Sysctrl_SetXTHStableTime PROC
;;;236     ******************************************************************************/
;;;237    en_result_t Sysctrl_SetXTHStableTime(en_sysctrl_xth_cycle_t enCycle)
000000  b410              PUSH     {r4}
;;;238    {
;;;239        en_result_t enRet = Ok;
;;;240        M0P_SYSCTRL->XTH_CR_f.STARTUP = enCycle;
000002  4a06              LDR      r2,|L18.28|
000004  2300              MOVS     r3,#0                 ;239
000006  6911              LDR      r1,[r2,#0x10]
000008  2430              MOVS     r4,#0x30
00000a  0780              LSLS     r0,r0,#30
00000c  43a1              BICS     r1,r1,r4
00000e  0e80              LSRS     r0,r0,#26
000010  4301              ORRS     r1,r1,r0
000012  6111              STR      r1,[r2,#0x10]
;;;241        return enRet;
;;;242    }
000014  bc10              POP      {r4}
000016  4618              MOV      r0,r3                 ;241
000018  4770              BX       lr
;;;243    
                          ENDP

00001a  0000              DCW      0x0000
                  |L18.28|
                          DCD      0x40002000

                          AREA ||i.Sysctrl_SetXTLStableTime||, CODE, READONLY, ALIGN=2

                  Sysctrl_SetXTLStableTime PROC
;;;264     ******************************************************************************/
;;;265    en_result_t Sysctrl_SetXTLStableTime(en_sysctrl_xtl_cycle_t enCycle)
000000  b410              PUSH     {r4}
;;;266    {
;;;267        en_result_t enRet = Ok;
;;;268        M0P_SYSCTRL->XTL_CR_f.STARTUP = enCycle;
000002  4a06              LDR      r2,|L19.28|
000004  2300              MOVS     r3,#0                 ;267
000006  6991              LDR      r1,[r2,#0x18]
000008  2430              MOVS     r4,#0x30
00000a  0780              LSLS     r0,r0,#30
00000c  43a1              BICS     r1,r1,r4
00000e  0e80              LSRS     r0,r0,#26
000010  4301              ORRS     r1,r1,r0
000012  6191              STR      r1,[r2,#0x18]
;;;269        return enRet;
;;;270    }
000014  bc10              POP      {r4}
000016  4618              MOV      r0,r3                 ;269
000018  4770              BX       lr
;;;271    
                          ENDP

00001a  0000              DCW      0x0000
                  |L19.28|
                          DCD      0x40002000

                          AREA ||i.Sysctrl_SysClkSwitch||, CODE, READONLY, ALIGN=2

                  Sysctrl_SysClkSwitch PROC
;;;294     ******************************************************************************/
;;;295    en_result_t Sysctrl_SysClkSwitch(en_sysctrl_clk_source_t enSource)
000000  b510              PUSH     {r4,lr}
000002  4909              LDR      r1,|L20.40|
000004  4a07              LDR      r2,|L20.36|
;;;296    {
;;;297        en_result_t enRet = Ok;
000006  2400              MOVS     r4,#0
000008  608a              STR      r2,[r1,#8]
00000a  4a08              LDR      r2,|L20.44|
00000c  608a              STR      r2,[r1,#8]
;;;298        
;;;299        en_sysctrl_clk_source_t ClkNew = enSource;
;;;300    
;;;301        _SysctrlUnlock();
;;;302        M0P_SYSCTRL->SYSCTRL0_f.CLK_SW5_SEL = ClkNew;
00000e  680a              LDR      r2,[r1,#0]
000010  23e0              MOVS     r3,#0xe0
000012  0740              LSLS     r0,r0,#29
000014  439a              BICS     r2,r2,r3
000016  0e00              LSRS     r0,r0,#24
000018  4302              ORRS     r2,r2,r0
00001a  600a              STR      r2,[r1,#0]
;;;303    
;;;304        //更新Core时钟（HCLK）
;;;305        SystemCoreClockUpdate();
00001c  f7fffffe          BL       SystemCoreClockUpdate
;;;306    
;;;307        return enRet;
000020  4620              MOV      r0,r4
;;;308    }
000022  bd10              POP      {r4,pc}
;;;309    
                          ENDP

                  |L20.36|
                          DCD      0x00005a5a
                  |L20.40|
                          DCD      0x40002000
                  |L20.44|
                          DCD      0x0000a5a5

                          AREA ||i.Sysctrl_XTHDriverConfig||, CODE, READONLY, ALIGN=2

                  Sysctrl_XTHDriverConfig PROC
;;;202     ******************************************************************************/
;;;203    en_result_t Sysctrl_XTHDriverConfig(en_sysctrl_xtal_driver_t enDriver)
000000  4905              LDR      r1,|L21.24|
;;;204    {
;;;205        en_result_t enRet = Ok;
000002  2200              MOVS     r2,#0
;;;206        
;;;207        M0P_SYSCTRL->XTH_CR_f.DRIVER   = enDriver;
000004  690b              LDR      r3,[r1,#0x10]
000006  0780              LSLS     r0,r0,#30
000008  089b              LSRS     r3,r3,#2
00000a  009b              LSLS     r3,r3,#2
00000c  0f80              LSRS     r0,r0,#30
00000e  4303              ORRS     r3,r3,r0
000010  610b              STR      r3,[r1,#0x10]
;;;208        
;;;209        return enRet;
000012  4610              MOV      r0,r2
;;;210    }
000014  4770              BX       lr
;;;211    
                          ENDP

000016  0000              DCW      0x0000
                  |L21.24|
                          DCD      0x40002000

                          AREA ||i.Sysctrl_XTLDriverConfig||, CODE, READONLY, ALIGN=2

                  Sysctrl_XTLDriverConfig PROC
;;;219     ******************************************************************************/
;;;220    en_result_t Sysctrl_XTLDriverConfig(en_sysctrl_xtl_amp_t enAmp, en_sysctrl_xtal_driver_t enDriver)
000000  b430              PUSH     {r4,r5}
;;;221    {
;;;222        en_result_t enRet = Ok;
;;;223        
;;;224        M0P_SYSCTRL->XTL_CR_f.AMP_SEL = enAmp; 
000002  4a09              LDR      r2,|L22.40|
000004  4603              MOV      r3,r0                 ;221
000006  6994              LDR      r4,[r2,#0x18]
000008  2000              MOVS     r0,#0                 ;222
00000a  250c              MOVS     r5,#0xc
00000c  079b              LSLS     r3,r3,#30
00000e  43ac              BICS     r4,r4,r5
000010  0f1b              LSRS     r3,r3,#28
000012  431c              ORRS     r4,r4,r3
000014  6194              STR      r4,[r2,#0x18]
;;;225        M0P_SYSCTRL->XTL_CR_f.DRIVER  = enDriver;
000016  6993              LDR      r3,[r2,#0x18]
000018  0789              LSLS     r1,r1,#30
00001a  089b              LSRS     r3,r3,#2
00001c  009b              LSLS     r3,r3,#2
00001e  0f89              LSRS     r1,r1,#30
000020  430b              ORRS     r3,r3,r1
000022  6193              STR      r3,[r2,#0x18]
;;;226        
;;;227        return enRet;
;;;228    }
000024  bc30              POP      {r4,r5}
000026  4770              BX       lr
;;;229    
                          ENDP

                  |L22.40|
                          DCD      0x40002000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  80009600          DCW      0x8000,0x9600
                          DCD      0x003d0900
                          DCD      0x007a1200
                          DCD      0x00f42400
                          DCD      0x01518640
                          DCD      0x016e3600

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\HC32L13X_DDL_V1.0\\driver\\src\\sysctrl.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_sysctrl_c_7bd630a2____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\HC32L13X_DDL_V1.0\\driver\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_sysctrl_c_7bd630a2____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_sysctrl_c_7bd630a2____REVSH|
#line 402
|__asm___9_sysctrl_c_7bd630a2____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
