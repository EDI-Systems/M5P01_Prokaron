; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\interrupts_hc32l13x.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\interrupts_hc32l13x.d --cpu=Cortex-M0+ --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\HC32L13X_DDL_V1.0\driver\inc -I..\..\..\M0P0_Library\HC32L13X_DDL_V1.0\mcu\common -I..\..\..\M0P0_Library\HC32L13X_DDL_V1.0\driver\CMSIS\Include -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-HC32L136K8TA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\HDSC\HC32L13X\1.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ --enum_is_int --signed_chars --omf_browse=.\debug\output\interrupts_hc32l13x.crf ..\..\..\M0P0_Library\HC32L13X_DDL_V1.0\driver\src\interrupts_hc32l13x.c]
                          THUMB

                          AREA ||i.EnableNvic||, CODE, READONLY, ALIGN=2

                  EnableNvic PROC
;;;87      ******************************************************************************/
;;;88     void EnableNvic(IRQn_Type enIrq, en_irq_level_t enLevel, boolean_t bEn)
000000  b430              PUSH     {r4,r5}
000002  06c4              LSLS     r4,r0,#27
000004  0ee4              LSRS     r4,r4,#27
000006  2301              MOVS     r3,#1
000008  40a3              LSLS     r3,r3,r4
00000a  4c13              LDR      r4,|L1.88|
00000c  6023              STR      r3,[r4,#0]
00000e  0784              LSLS     r4,r0,#30
000010  0ee5              LSRS     r5,r4,#27
000012  24ff              MOVS     r4,#0xff
000014  40ac              LSLS     r4,r4,r5
000016  0789              LSLS     r1,r1,#30
000018  0e09              LSRS     r1,r1,#24
00001a  40a9              LSLS     r1,r1,r5
00001c  2800              CMP      r0,#0
;;;89     {
00001e  da0b              BGE      |L1.56|
000020  0700              LSLS     r0,r0,#28
000022  0f00              LSRS     r0,r0,#28
000024  3808              SUBS     r0,r0,#8
000026  0885              LSRS     r5,r0,#2
000028  480c              LDR      r0,|L1.92|
00002a  00ad              LSLS     r5,r5,#2
00002c  182d              ADDS     r5,r5,r0
00002e  69e8              LDR      r0,[r5,#0x1c]
000030  43a0              BICS     r0,r0,r4
000032  4308              ORRS     r0,r0,r1
000034  61e8              STR      r0,[r5,#0x1c]
000036  e007              B        |L1.72|
                  |L1.56|
000038  0885              LSRS     r5,r0,#2
00003a  4809              LDR      r0,|L1.96|
00003c  00ad              LSLS     r5,r5,#2
00003e  182d              ADDS     r5,r5,r0
000040  6828              LDR      r0,[r5,#0]
000042  43a0              BICS     r0,r0,r4
000044  4308              ORRS     r0,r0,r1
000046  6028              STR      r0,[r5,#0]
                  |L1.72|
;;;90         NVIC_ClearPendingIRQ(enIrq);
;;;91         NVIC_SetPriority(enIrq, enLevel);
;;;92         if (TRUE == bEn)
000048  2a01              CMP      r2,#1
00004a  d003              BEQ      |L1.84|
00004c  4805              LDR      r0,|L1.100|
                  |L1.78|
00004e  6003              STR      r3,[r0,#0]
;;;93         {
;;;94             NVIC_EnableIRQ(enIrq);
;;;95         }
;;;96         else
;;;97         {
;;;98             NVIC_DisableIRQ(enIrq);
;;;99         }
;;;100    }
000050  bc30              POP      {r4,r5}
000052  4770              BX       lr
                  |L1.84|
000054  4804              LDR      r0,|L1.104|
000056  e7fa              B        |L1.78|
;;;101    
                          ENDP

                  |L1.88|
                          DCD      0xe000e280
                  |L1.92|
                          DCD      0xe000ed00
                  |L1.96|
                          DCD      0xe000e400
                  |L1.100|
                          DCD      0xe000e180
                  |L1.104|
                          DCD      0xe000e100

                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
;;;108     ******************************************************************************/
;;;109    void HardFault_Handler(void)
000000  b081              SUB      sp,sp,#4
;;;110    {
;;;111        volatile int a = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
                  |L2.6|
;;;112    
;;;113        while( 0 == a)
000006  2800              CMP      r0,#0
000008  d0fd              BEQ      |L2.6|
;;;114        {
;;;115            ;
;;;116        }
;;;117    }
00000a  b001              ADD      sp,sp,#4
00000c  4770              BX       lr
;;;118    
                          ENDP


                          AREA ||i.IRQ000_Handler||, CODE, READONLY, ALIGN=1

                  IRQ000_Handler PROC
;;;124     ******************************************************************************/
;;;125    void PORTA_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;126    {
;;;127        Gpio_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       Gpio_IRQHandler
;;;128    }
000008  bd10              POP      {r4,pc}
;;;129    
                          ENDP


                          AREA ||i.IRQ001_Handler||, CODE, READONLY, ALIGN=1

                  IRQ001_Handler PROC
;;;135     ******************************************************************************/
;;;136    void PORTB_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;137    {
;;;138        Gpio_IRQHandler(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       Gpio_IRQHandler
;;;139    }
000008  bd10              POP      {r4,pc}
;;;140    
                          ENDP


                          AREA ||i.IRQ002_Handler||, CODE, READONLY, ALIGN=1

                  IRQ002_Handler PROC
;;;146     ******************************************************************************/
;;;147    void PORTC_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;148    {
;;;149        Gpio_IRQHandler(2);
000002  2002              MOVS     r0,#2
000004  f7fffffe          BL       Gpio_IRQHandler
;;;150    }
000008  bd10              POP      {r4,pc}
;;;151    
                          ENDP


                          AREA ||i.IRQ003_Handler||, CODE, READONLY, ALIGN=1

                  IRQ003_Handler PROC
;;;157     ******************************************************************************/
;;;158    void PORTD_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;159    {
;;;160        Gpio_IRQHandler(3);
000002  2003              MOVS     r0,#3
000004  f7fffffe          BL       Gpio_IRQHandler
;;;161    }
000008  bd10              POP      {r4,pc}
;;;162    
                          ENDP


                          AREA ||i.IRQ004_Handler||, CODE, READONLY, ALIGN=1

                  IRQ004_Handler PROC
;;;168     ******************************************************************************/
;;;169    void DMAC_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;170    {
;;;171        Dma_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       Dma_IRQHandler
;;;172    }
000008  bd10              POP      {r4,pc}
;;;173    
                          ENDP


                          AREA ||i.IRQ005_Handler||, CODE, READONLY, ALIGN=1

                  IRQ005_Handler PROC
;;;301     ******************************************************************************/
;;;302    void TIM3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;303    {
;;;304        Tim_IRQHandler(3);
000002  2003              MOVS     r0,#3
000004  f7fffffe          BL       Tim_IRQHandler
;;;305    }
000008  bd10              POP      {r4,pc}
;;;306    
                          ENDP


                          AREA ||i.IRQ006_Handler||, CODE, READONLY, ALIGN=1

                  IRQ006_Handler PROC
;;;180     ******************************************************************************/
;;;181    void UART0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;182    {
;;;183        Uart_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       Uart_IRQHandler
;;;184    }
000008  bd10              POP      {r4,pc}
;;;185    
                          ENDP


                          AREA ||i.IRQ007_Handler||, CODE, READONLY, ALIGN=1

                  IRQ007_Handler PROC
;;;191     ******************************************************************************/
;;;192    void UART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;193    {
;;;194        Uart_IRQHandler(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       Uart_IRQHandler
;;;195    }
000008  bd10              POP      {r4,pc}
;;;196    
                          ENDP


                          AREA ||i.IRQ008_Handler||, CODE, READONLY, ALIGN=1

                  IRQ008_Handler PROC
;;;202     ******************************************************************************/
;;;203    void LPUART0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;204    {
;;;205        LpUart_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       LpUart_IRQHandler
;;;206    }
000008  bd10              POP      {r4,pc}
;;;207    
                          ENDP


                          AREA ||i.IRQ009_Handler||, CODE, READONLY, ALIGN=1

                  IRQ009_Handler PROC
;;;213     ******************************************************************************/
;;;214    void LPUART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;215    {
;;;216        LpUart_IRQHandler(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       LpUart_IRQHandler
;;;217    }
000008  bd10              POP      {r4,pc}
;;;218    
                          ENDP


                          AREA ||i.IRQ010_Handler||, CODE, READONLY, ALIGN=1

                  IRQ010_Handler PROC
;;;224     ******************************************************************************/
;;;225    void SPI0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;226    {
;;;227        Spi_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       Spi_IRQHandler
;;;228    }
000008  bd10              POP      {r4,pc}
;;;229    
                          ENDP


                          AREA ||i.IRQ011_Handler||, CODE, READONLY, ALIGN=1

                  IRQ011_Handler PROC
;;;235     ******************************************************************************/
;;;236    void SPI1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;237    {
;;;238        Spi_IRQHandler(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       Spi_IRQHandler
;;;239    }
000008  bd10              POP      {r4,pc}
;;;240    
                          ENDP


                          AREA ||i.IRQ012_Handler||, CODE, READONLY, ALIGN=1

                  IRQ012_Handler PROC
;;;246     ******************************************************************************/
;;;247    void I2C0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;248    {
;;;249        I2c_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       I2c_IRQHandler
;;;250    }
000008  bd10              POP      {r4,pc}
;;;251    
                          ENDP


                          AREA ||i.IRQ013_Handler||, CODE, READONLY, ALIGN=1

                  IRQ013_Handler PROC
;;;257     ******************************************************************************/
;;;258    void I2C1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;259    {
;;;260        I2c_IRQHandler(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       I2c_IRQHandler
;;;261    }
000008  bd10              POP      {r4,pc}
;;;262    
                          ENDP


                          AREA ||i.IRQ014_Handler||, CODE, READONLY, ALIGN=1

                  IRQ014_Handler PROC
;;;268     ******************************************************************************/
;;;269    void TIM0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;270    {
;;;271        Tim_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       Tim_IRQHandler
;;;272    }
000008  bd10              POP      {r4,pc}
;;;273    
                          ENDP


                          AREA ||i.IRQ015_Handler||, CODE, READONLY, ALIGN=1

                  IRQ015_Handler PROC
;;;279     ******************************************************************************/
;;;280    void TIM1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;281    {
;;;282        Tim_IRQHandler(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       Tim_IRQHandler
;;;283    }
000008  bd10              POP      {r4,pc}
;;;284    
                          ENDP


                          AREA ||i.IRQ016_Handler||, CODE, READONLY, ALIGN=1

                  IRQ016_Handler PROC
;;;290     ******************************************************************************/
;;;291    void TIM2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;292    {
;;;293        Tim_IRQHandler(2);
000002  2002              MOVS     r0,#2
000004  f7fffffe          BL       Tim_IRQHandler
;;;294    }
000008  bd10              POP      {r4,pc}
;;;295    
                          ENDP


                          AREA ||i.IRQ017_Handler||, CODE, READONLY, ALIGN=1

                  IRQ017_Handler PROC
;;;312     ******************************************************************************/
;;;313    void LPTIM_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;314    {
;;;315        LpTim_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       LpTim_IRQHandler
;;;316    }
000008  bd10              POP      {r4,pc}
;;;317    
                          ENDP


                          AREA ||i.IRQ018_Handler||, CODE, READONLY, ALIGN=1

                  IRQ018_Handler PROC
;;;323     ******************************************************************************/
;;;324    void TIM4_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;325    {
;;;326        Adt_IRQHandler(4);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       Adt_IRQHandler
;;;327    }
000008  bd10              POP      {r4,pc}
;;;328    
                          ENDP


                          AREA ||i.IRQ019_Handler||, CODE, READONLY, ALIGN=1

                  IRQ019_Handler PROC
;;;334     ******************************************************************************/
;;;335    void TIM5_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;336    {
;;;337        Adt_IRQHandler(5);
000002  2005              MOVS     r0,#5
000004  f7fffffe          BL       Adt_IRQHandler
;;;338    }
000008  bd10              POP      {r4,pc}
;;;339    
                          ENDP


                          AREA ||i.IRQ020_Handler||, CODE, READONLY, ALIGN=1

                  IRQ020_Handler PROC
;;;345     ******************************************************************************/
;;;346    void TIM6_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;347    {
;;;348        Adt_IRQHandler(6);
000002  2006              MOVS     r0,#6
000004  f7fffffe          BL       Adt_IRQHandler
;;;349    }
000008  bd10              POP      {r4,pc}
;;;350    
                          ENDP


                          AREA ||i.IRQ021_Handler||, CODE, READONLY, ALIGN=1

                  IRQ021_Handler PROC
;;;356     ******************************************************************************/
;;;357    void PCA_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;358    {
;;;359        Pca_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       Pca_IRQHandler
;;;360    }
000008  bd10              POP      {r4,pc}
;;;361    
                          ENDP


                          AREA ||i.IRQ022_Handler||, CODE, READONLY, ALIGN=1

                  IRQ022_Handler PROC
;;;367     ******************************************************************************/
;;;368    void WDT_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;369    {
;;;370        Wdt_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       Wdt_IRQHandler
;;;371    }
000008  bd10              POP      {r4,pc}
;;;372    
                          ENDP


                          AREA ||i.IRQ023_Handler||, CODE, READONLY, ALIGN=1

                  IRQ023_Handler PROC
;;;378     ******************************************************************************/
;;;379    void RTC_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;380    {
;;;381        Rtc_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       Rtc_IRQHandler
;;;382    }
000008  bd10              POP      {r4,pc}
;;;383    
                          ENDP


                          AREA ||i.IRQ024_Handler||, CODE, READONLY, ALIGN=1

                  IRQ024_Handler PROC
;;;389     ******************************************************************************/
;;;390    void ADC_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;391    {
;;;392        Adc_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       Adc_IRQHandler
;;;393    }
000008  bd10              POP      {r4,pc}
;;;394    
                          ENDP


                          AREA ||i.IRQ025_Handler||, CODE, READONLY, ALIGN=1

                  IRQ025_Handler PROC
;;;400     ******************************************************************************/
;;;401    void PCNT_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;402    {
;;;403        Pcnt_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       Pcnt_IRQHandler
;;;404    }
000008  bd10              POP      {r4,pc}
;;;405    
                          ENDP


                          AREA ||i.IRQ026_Handler||, CODE, READONLY, ALIGN=1

                  IRQ026_Handler PROC
;;;411     ******************************************************************************/
;;;412    void VC0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;413    {
;;;414        Vc_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       Vc_IRQHandler
;;;415    }
000008  bd10              POP      {r4,pc}
;;;416    
                          ENDP


                          AREA ||i.IRQ027_Handler||, CODE, READONLY, ALIGN=1

                  IRQ027_Handler PROC
;;;422     ******************************************************************************/
;;;423    void VC1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;424    {
;;;425        Vc_IRQHandler(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       Vc_IRQHandler
;;;426    }
000008  bd10              POP      {r4,pc}
;;;427    
                          ENDP


                          AREA ||i.IRQ028_Handler||, CODE, READONLY, ALIGN=1

                  IRQ028_Handler PROC
;;;433     ******************************************************************************/
;;;434    void LVD_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;435    {
;;;436        Lvd_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       Lvd_IRQHandler
;;;437    }
000008  bd10              POP      {r4,pc}
;;;438    
                          ENDP


                          AREA ||i.IRQ029_Handler||, CODE, READONLY, ALIGN=1

                  IRQ029_Handler PROC
;;;444     ******************************************************************************/
;;;445    void LCD_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;446    {
;;;447        Lcd_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       Lcd_IRQHandler
;;;448    }
000008  bd10              POP      {r4,pc}
;;;449    
                          ENDP


                          AREA ||i.IRQ030_Handler||, CODE, READONLY, ALIGN=1

                  IRQ030_Handler PROC
;;;455     ******************************************************************************/
;;;456    void EF_RAM_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;457    {
;;;458        EfRam_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       EfRam_IRQHandler
;;;459    }
000008  bd10              POP      {r4,pc}
;;;460    
                          ENDP


                          AREA ||i.IRQ031_Handler||, CODE, READONLY, ALIGN=1

                  IRQ031_Handler PROC
;;;466     ******************************************************************************/
;;;467    void CLKTRIM_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;468    {
;;;469        ClkTrim_IRQHandler(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       ClkTrim_IRQHandler
;;;470    }
000008  bd10              POP      {r4,pc}
;;;471    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\HC32L13X_DDL_V1.0\\driver\\src\\interrupts_hc32l13x.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_interrupts_hc32l13x_c_6a07efb1____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\HC32L13X_DDL_V1.0\\driver\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___21_interrupts_hc32l13x_c_6a07efb1____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_interrupts_hc32l13x_c_6a07efb1____REVSH|
#line 402
|__asm___21_interrupts_hc32l13x_c_6a07efb1____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
