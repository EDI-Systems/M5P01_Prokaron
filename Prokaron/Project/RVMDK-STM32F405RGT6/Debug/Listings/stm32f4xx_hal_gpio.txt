; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f4xx_hal_gpio.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f4xx_hal_gpio.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\STM32F4xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F405RGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F405xx -DSTM32F405xx -DUSE_HAL_DRIVER -DHSE_VALUE=8000000 -DPLL_M=8 --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f4xx_hal_gpio.crf ..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_gpio.c]
                          THUMB

                          AREA ||i.HAL_GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_DeInit PROC
;;;311      */
;;;312    void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;313    {
;;;314      uint32_t position;
;;;315      uint32_t ioposition = 0x00U;
;;;316      uint32_t iocurrent = 0x00U;
;;;317      uint32_t tmp = 0x00U;
;;;318    
;;;319      /* Check the parameters */
;;;320      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;321      
;;;322      /* Configure the port pins */
;;;323      for(position = 0U; position < GPIO_NUMBER; position++)
000004  2200              MOVS     r2,#0
;;;324      {
;;;325        /* Get the IO position */
;;;326        ioposition = 0x01U << position;
000006  2701              MOVS     r7,#1
;;;327        /* Get the current IO position */
;;;328        iocurrent = (GPIO_Pin) & ioposition;
;;;329    
;;;330        if(iocurrent == ioposition)
;;;331        {
;;;332          /*------------------------- GPIO Mode Configuration --------------------*/
;;;333          /* Configure IO Direction in Input Floating Mode */
;;;334          GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
;;;335    
;;;336          /* Configure the default Alternate Function in current IO */
;;;337          GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
;;;338    
;;;339          /* Configure the default value for IO Speed */
;;;340          GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
;;;341    
;;;342          /* Configure the default value IO Output Type */
;;;343          GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
;;;344    
;;;345          /* Deactivate the Pull-up and Pull-down resistor for the current IO */
;;;346          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
;;;347    
;;;348          /*------------------------- EXTI Mode Configuration --------------------*/
;;;349          tmp = SYSCFG->EXTICR[position >> 2U];
;;;350          tmp &= (0x0FU << (4U * (position & 0x03U)));
;;;351          if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
000008  f8df9158          LDR      r9,|L1.356|
;;;352          {
;;;353            /* Configure the External Interrupt or event for the current IO */
;;;354            tmp = 0x0FU << (4U * (position & 0x03U));
;;;355            SYSCFG->EXTICR[position >> 2U] &= ~tmp;
;;;356    
;;;357            /* Clear EXTI line configuration */
;;;358            EXTI->IMR &= ~((uint32_t)iocurrent);
00000c  f8dfe158          LDR      lr,|L1.360|
000010  f04f0803          MOV      r8,#3                 ;334
000014  240f              MOVS     r4,#0xf               ;337
000016  bf00              NOP                            ;326
                  |L1.24|
000018  fa07fc02          LSL      r12,r7,r2             ;326
00001c  ea01030c          AND      r3,r1,r12             ;328
000020  4563              CMP      r3,r12                ;330
000022  d17d              BNE      |L1.288|
000024  6806              LDR      r6,[r0,#0]            ;334
000026  0055              LSLS     r5,r2,#1              ;334
000028  fa08f505          LSL      r5,r8,r5              ;334
00002c  43ae              BICS     r6,r6,r5              ;334
00002e  6006              STR      r6,[r0,#0]            ;334
000030  08d6              LSRS     r6,r2,#3              ;337
000032  eb000686          ADD      r6,r0,r6,LSL #2       ;337
000036  f8d6a020          LDR      r10,[r6,#0x20]        ;337
00003a  ea4f7b42          LSL      r11,r2,#29            ;337
00003e  ea4f6bdb          LSR      r11,r11,#27           ;337
000042  fa04fb0b          LSL      r11,r4,r11            ;337
000046  ea2a0a0b          BIC      r10,r10,r11           ;337
00004a  f8c6a020          STR      r10,[r6,#0x20]        ;337
00004e  6886              LDR      r6,[r0,#8]            ;340
000050  43ae              BICS     r6,r6,r5              ;340
000052  6086              STR      r6,[r0,#8]            ;340
000054  6846              LDR      r6,[r0,#4]            ;343
000056  ea260c0c          BIC      r12,r6,r12            ;343
00005a  f8c0c004          STR      r12,[r0,#4]           ;343
00005e  f8d0c00c          LDR      r12,[r0,#0xc]         ;346
000062  ea2c0c05          BIC      r12,r12,r5            ;346
000066  f8c0c00c          STR      r12,[r0,#0xc]         ;346
00006a  f0220c03          BIC      r12,r2,#3             ;349
00006e  f10c4580          ADD      r5,r12,#0x40000000    ;349
000072  f5053598          ADD      r5,r5,#0x13000        ;349
000076  f8d5a808          LDR      r10,[r5,#0x808]       ;349
00007a  ea4f7c82          LSL      r12,r2,#30            ;350
00007e  ea4f761c          LSR      r6,r12,#28            ;350
000082  fa04fc06          LSL      r12,r4,r6             ;350
000086  ea0c0a0a          AND      r10,r12,r10           ;350
00008a  4548              CMP      r0,r9                 ;351
00008c  bf08              IT       EQ                    ;351
00008e  f04f0b00          MOVEQ    r11,#0                ;351
000092  d038              BEQ      |L1.262|
000094  f1a04b80          SUB      r11,r0,#0x40000000    ;351
000098  f5bb3b01          SUBS     r11,r11,#0x20400      ;351
00009c  bf08              IT       EQ                    ;351
00009e  f04f0b01          MOVEQ    r11,#1                ;351
0000a2  d030              BEQ      |L1.262|
0000a4  f1a04b80          SUB      r11,r0,#0x40000000    ;351
0000a8  f5bb3b02          SUBS     r11,r11,#0x20800      ;351
0000ac  bf08              IT       EQ                    ;351
0000ae  f04f0b02          MOVEQ    r11,#2                ;351
0000b2  d028              BEQ      |L1.262|
0000b4  f1a04b80          SUB      r11,r0,#0x40000000    ;351
0000b8  f5bb3b03          SUBS     r11,r11,#0x20c00      ;351
0000bc  bf08              IT       EQ                    ;351
0000be  f04f0b03          MOVEQ    r11,#3                ;351
0000c2  d020              BEQ      |L1.262|
0000c4  f1a04b80          SUB      r11,r0,#0x40000000    ;351
0000c8  f5bb3b04          SUBS     r11,r11,#0x21000      ;351
0000cc  bf08              IT       EQ                    ;351
0000ce  f04f0b04          MOVEQ    r11,#4                ;351
0000d2  d018              BEQ      |L1.262|
0000d4  f1a04b80          SUB      r11,r0,#0x40000000    ;351
0000d8  f5bb3b05          SUBS     r11,r11,#0x21400      ;351
0000dc  bf08              IT       EQ                    ;351
0000de  f04f0b05          MOVEQ    r11,#5                ;351
0000e2  d010              BEQ      |L1.262|
0000e4  f1a04b80          SUB      r11,r0,#0x40000000    ;351
0000e8  f5bb3b06          SUBS     r11,r11,#0x21800      ;351
0000ec  bf08              IT       EQ                    ;351
0000ee  f04f0b06          MOVEQ    r11,#6                ;351
0000f2  d008              BEQ      |L1.262|
0000f4  f1a04b80          SUB      r11,r0,#0x40000000    ;351
0000f8  f5bb3b07          SUBS     r11,r11,#0x21c00      ;351
0000fc  bf0c              ITE      EQ                    ;351
0000fe  f04f0b07          MOVEQ    r11,#7                ;351
000102  f04f0b08          MOVNE    r11,#8                ;351
                  |L1.262|
000106  fa0bf606          LSL      r6,r11,r6             ;351
00010a  4556              CMP      r6,r10                ;351
00010c  d123              BNE      |L1.342|
00010e  f8d56808          LDR      r6,[r5,#0x808]        ;355
000112  ea260c0c          BIC      r12,r6,r12            ;355
000116  f8c5c808          STR      r12,[r5,#0x808]       ;355
00011a  f8dec000          LDR      r12,[lr,#0]
00011e  e000              B        |L1.290|
                  |L1.288|
000120  e019              B        |L1.342|
                  |L1.290|
000122  ea2c0c03          BIC      r12,r12,r3
000126  f8cec000          STR      r12,[lr,#0]
;;;359            EXTI->EMR &= ~((uint32_t)iocurrent);
00012a  f8dfc040          LDR      r12,|L1.364|
00012e  f8dc5000          LDR      r5,[r12,#0]
000132  439d              BICS     r5,r5,r3
000134  f8cc5000          STR      r5,[r12,#0]
;;;360            
;;;361            /* Clear Rising Falling edge configuration */
;;;362            EXTI->RTSR &= ~((uint32_t)iocurrent);
000138  f10c0c04          ADD      r12,r12,#4
00013c  f8dc5000          LDR      r5,[r12,#0]
000140  439d              BICS     r5,r5,r3
000142  f8cc5000          STR      r5,[r12,#0]
;;;363            EXTI->FTSR &= ~((uint32_t)iocurrent);
000146  f10c0c04          ADD      r12,r12,#4
00014a  f8dc5000          LDR      r5,[r12,#0]
00014e  ea250303          BIC      r3,r5,r3
000152  f8cc3000          STR      r3,[r12,#0]
                  |L1.342|
000156  1c52              ADDS     r2,r2,#1
000158  2a10              CMP      r2,#0x10              ;323
00015a  f4ffaf5d          BCC      |L1.24|
;;;364          }
;;;365        }
;;;366      }
;;;367    }
00015e  e8bd8ff0          POP      {r4-r11,pc}
;;;368    
                          ENDP

000162  0000              DCW      0x0000
                  |L1.356|
                          DCD      0x40020000
                  |L1.360|
                          DCD      0x40013c00
                  |L1.364|
                          DCD      0x40013c04

                          AREA ||i.HAL_GPIO_EXTI_Callback||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_EXTI_Callback PROC
;;;517      */
;;;518    __weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
000000  4770              BX       lr
;;;519    {
;;;520      /* Prevent unused argument(s) compilation warning */
;;;521      UNUSED(GPIO_Pin);
;;;522      /* NOTE: This function Should not be modified, when the callback is needed,
;;;523               the HAL_GPIO_EXTI_Callback could be implemented in the user file
;;;524       */
;;;525    }
;;;526    
                          ENDP


                          AREA ||i.HAL_GPIO_EXTI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_EXTI_IRQHandler PROC
;;;502      */
;;;503    void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
000000  4904              LDR      r1,|L3.20|
;;;504    {
;;;505      /* EXTI line interrupt detected */
;;;506      if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
000002  680a              LDR      r2,[r1,#0]
000004  4202              TST      r2,r0
;;;507      {
;;;508        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
;;;509        HAL_GPIO_EXTI_Callback(GPIO_Pin);
;;;510      }
;;;511    }
000006  bf08              IT       EQ
000008  4770              BXEQ     lr
00000a  b510              PUSH     {r4,lr}               ;504
00000c  6008              STR      r0,[r1,#0]            ;508
00000e  f7fffffe          BL       HAL_GPIO_EXTI_Callback
000012  bd10              POP      {r4,pc}
;;;512    
                          ENDP

                  |L3.20|
                          DCD      0x40013c14

                          AREA ||i.HAL_GPIO_Init||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_Init PROC
;;;186      */
;;;187    void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;188    {
;;;189      uint32_t position;
;;;190      uint32_t ioposition = 0x00U;
;;;191      uint32_t iocurrent = 0x00U;
;;;192      uint32_t temp = 0x00U;
;;;193    
;;;194      /* Check the parameters */
;;;195      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;196      assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
;;;197      assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
;;;198      assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
;;;199    
;;;200      /* Configure the port pins */
;;;201      for(position = 0U; position < GPIO_NUMBER; position++)
000004  2200              MOVS     r2,#0
;;;202      {
;;;203        /* Get the IO position */
;;;204        ioposition = 0x01U << position;
;;;205        /* Get the current IO position */
;;;206        iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
;;;207    
;;;208        if(iocurrent == ioposition)
;;;209        {
;;;210          /*--------------------- GPIO Mode Configuration ------------------------*/
;;;211          /* In case of Alternate function mode selection */
;;;212          if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
;;;213          {
;;;214            /* Check the Alternate function parameter */
;;;215            assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
;;;216            /* Configure Alternate function mapped with the current IO */
;;;217            temp = GPIOx->AFR[position >> 3U];
;;;218            temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
;;;219            temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
;;;220            GPIOx->AFR[position >> 3U] = temp;
;;;221          }
;;;222    
;;;223          /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
;;;224          temp = GPIOx->MODER;
;;;225          temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
;;;226          temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
;;;227          GPIOx->MODER = temp;
;;;228    
;;;229          /* In case of Output or Alternate function mode selection */
;;;230          if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
;;;231             (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
;;;232          {
;;;233            /* Check the Speed parameter */
;;;234            assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
;;;235            /* Configure the IO Speed */
;;;236            temp = GPIOx->OSPEEDR; 
;;;237            temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
;;;238            temp |= (GPIO_Init->Speed << (position * 2U));
;;;239            GPIOx->OSPEEDR = temp;
;;;240    
;;;241            /* Configure the IO Output Type */
;;;242            temp = GPIOx->OTYPER;
;;;243            temp &= ~(GPIO_OTYPER_OT_0 << position) ;
;;;244            temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
;;;245            GPIOx->OTYPER = temp;
;;;246          }
;;;247    
;;;248          /* Activate the Pull-up or Pull down resistor for the current IO */
;;;249          temp = GPIOx->PUPDR;
;;;250          temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
;;;251          temp |= ((GPIO_Init->Pull) << (position * 2U));
;;;252          GPIOx->PUPDR = temp;
;;;253    
;;;254          /*--------------------- EXTI Mode Configuration ------------------------*/
;;;255          /* Configure the External Interrupt or event for the current IO */
;;;256          if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
;;;257          {
;;;258            /* Enable SYSCFG Clock */
;;;259            __HAL_RCC_SYSCFG_CLK_ENABLE();
000006  4e87              LDR      r6,|L4.548|
;;;260    
;;;261            temp = SYSCFG->EXTICR[position >> 2U];
;;;262            temp &= ~(0x0FU << (4U * (position & 0x03U)));
;;;263            temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
;;;264            SYSCFG->EXTICR[position >> 2U] = temp;
;;;265    
;;;266            /* Clear EXTI line configuration */
;;;267            temp = EXTI->IMR;
000008  f8dfe21c          LDR      lr,|L4.552|
00000c  2701              MOVS     r7,#1                 ;204
00000e  f04f0a03          MOV      r10,#3                ;225
000012  f04f080f          MOV      r8,#0xf               ;218
000016  bf00              NOP                            ;204
                  |L4.24|
000018  680b              LDR      r3,[r1,#0]            ;206
00001a  fa07f402          LSL      r4,r7,r2              ;204
00001e  4023              ANDS     r3,r3,r4              ;206
000020  42a3              CMP      r3,r4                 ;208
000022  f04080f8          BNE.W    |L4.534|
000026  f8d1c004          LDR      r12,[r1,#4]           ;212
00002a  f1bc0f02          CMP      r12,#2                ;212
00002e  bf18              IT       NE                    ;212
000030  f1bc0f12          CMPNE    r12,#0x12             ;212
000034  d115              BNE      |L4.98|
000036  ea4f0cd2          LSR      r12,r2,#3             ;217
00003a  eb000c8c          ADD      r12,r0,r12,LSL #2     ;217
00003e  f8dc5020          LDR      r5,[r12,#0x20]        ;217
000042  ea4f7942          LSL      r9,r2,#29             ;218
000046  ea4f69d9          LSR      r9,r9,#27             ;218
00004a  fa08fb09          LSL      r11,r8,r9             ;218
00004e  ea25050b          BIC      r5,r5,r11             ;218
000052  f8d1b010          LDR      r11,[r1,#0x10]        ;219
000056  fa0bf909          LSL      r9,r11,r9             ;219
00005a  ea490505          ORR      r5,r9,r5              ;219
00005e  f8cc5020          STR      r5,[r12,#0x20]        ;220
                  |L4.98|
000062  f8d09000          LDR      r9,[r0,#0]            ;224
000066  ea4f0c42          LSL      r12,r2,#1             ;225
00006a  f891b004          LDRB     r11,[r1,#4]           ;226
00006e  fa0af50c          LSL      r5,r10,r12            ;225
000072  f00b0b03          AND      r11,r11,#3            ;226
000076  ea290905          BIC      r9,r9,r5              ;225
00007a  fa0bfb0c          LSL      r11,r11,r12           ;226
00007e  ea4b0909          ORR      r9,r11,r9             ;226
000082  f8c09000          STR      r9,[r0,#0]            ;227
000086  f8d19004          LDR      r9,[r1,#4]            ;230
00008a  f1b90f01          CMP      r9,#1                 ;230
00008e  bf18              IT       NE                    ;230
000090  f1b90f02          CMPNE    r9,#2                 ;230
000094  d005              BEQ      |L4.162|
000096  f1b90f11          CMP      r9,#0x11              ;230
00009a  bf18              IT       NE                    ;230
00009c  f1b90f12          CMPNE    r9,#0x12              ;230
0000a0  d118              BNE      |L4.212|
                  |L4.162|
0000a2  f8d09008          LDR      r9,[r0,#8]            ;236
0000a6  f8d1b00c          LDR      r11,[r1,#0xc]         ;238
0000aa  ea290905          BIC      r9,r9,r5              ;237
0000ae  fa0bfb0c          LSL      r11,r11,r12           ;238
0000b2  ea4b0909          ORR      r9,r11,r9             ;238
0000b6  f8c09008          STR      r9,[r0,#8]            ;239
0000ba  f8d09004          LDR      r9,[r0,#4]            ;242
0000be  ea290404          BIC      r4,r9,r4              ;243
0000c2  f8919004          LDRB     r9,[r1,#4]            ;244
0000c6  f3c91900          UBFX     r9,r9,#4,#1           ;244
0000ca  fa09f902          LSL      r9,r9,r2              ;244
0000ce  ea490404          ORR      r4,r9,r4              ;244
0000d2  6044              STR      r4,[r0,#4]            ;245
                  |L4.212|
0000d4  68c4              LDR      r4,[r0,#0xc]          ;249
0000d6  43ac              BICS     r4,r4,r5              ;250
0000d8  688d              LDR      r5,[r1,#8]            ;251
0000da  fa05fc0c          LSL      r12,r5,r12            ;251
0000de  ea4c0c04          ORR      r12,r12,r4            ;251
0000e2  f8c0c00c          STR      r12,[r0,#0xc]         ;252
0000e6  f8d1c004          LDR      r12,[r1,#4]           ;256
0000ea  f01c5f80          TST      r12,#0x10000000       ;256
0000ee  d07d              BEQ      |L4.492|
0000f0  f8d6c000          LDR      r12,[r6,#0]           ;259
0000f4  f44c4c80          ORR      r12,r12,#0x4000       ;259
0000f8  f8c6c000          STR      r12,[r6,#0]           ;259
0000fc  f8d6c000          LDR      r12,[r6,#0]           ;259
000100  f40c4c80          AND      r12,r12,#0x4000       ;259
000104  f8cdc000          STR      r12,[sp,#0]           ;261
000108  f0220c03          BIC      r12,r2,#3             ;261
00010c  f10c4580          ADD      r5,r12,#0x40000000    ;261
000110  f5053598          ADD      r5,r5,#0x13000        ;261
000114  f8d5c808          LDR      r12,[r5,#0x808]       ;261
000118  0794              LSLS     r4,r2,#30             ;262
00011a  0f24              LSRS     r4,r4,#28             ;262
00011c  fa08f904          LSL      r9,r8,r4              ;262
000120  ea2c0c09          BIC      r12,r12,r9            ;262
000124  f1a04980          SUB      r9,r0,#0x40000000     ;263
000128  f5b93900          SUBS     r9,r9,#0x20000        ;263
00012c  d038              BEQ      |L4.416|
00012e  f1a04980          SUB      r9,r0,#0x40000000     ;263
000132  f5b93901          SUBS     r9,r9,#0x20400        ;263
000136  bf08              IT       EQ                    ;263
000138  f04f0901          MOVEQ    r9,#1                 ;263
00013c  d030              BEQ      |L4.416|
00013e  f1a04980          SUB      r9,r0,#0x40000000     ;263
000142  f5b93902          SUBS     r9,r9,#0x20800        ;263
000146  bf08              IT       EQ                    ;263
000148  f04f0902          MOVEQ    r9,#2                 ;263
00014c  d028              BEQ      |L4.416|
00014e  f1a04980          SUB      r9,r0,#0x40000000     ;263
000152  f5b93903          SUBS     r9,r9,#0x20c00        ;263
000156  bf08              IT       EQ                    ;263
000158  f04f0903          MOVEQ    r9,#3                 ;263
00015c  d020              BEQ      |L4.416|
00015e  f1a04980          SUB      r9,r0,#0x40000000     ;263
000162  f5b93904          SUBS     r9,r9,#0x21000        ;263
000166  bf08              IT       EQ                    ;263
000168  f04f0904          MOVEQ    r9,#4                 ;263
00016c  d018              BEQ      |L4.416|
00016e  f1a04980          SUB      r9,r0,#0x40000000     ;263
000172  f5b93905          SUBS     r9,r9,#0x21400        ;263
000176  bf08              IT       EQ                    ;263
000178  f04f0905          MOVEQ    r9,#5                 ;263
00017c  d010              BEQ      |L4.416|
00017e  f1a04980          SUB      r9,r0,#0x40000000     ;263
000182  f5b93906          SUBS     r9,r9,#0x21800        ;263
000186  bf08              IT       EQ                    ;263
000188  f04f0906          MOVEQ    r9,#6                 ;263
00018c  d008              BEQ      |L4.416|
00018e  f1a04980          SUB      r9,r0,#0x40000000     ;263
000192  f5b93907          SUBS     r9,r9,#0x21c00        ;263
000196  bf0c              ITE      EQ                    ;263
000198  f04f0907          MOVEQ    r9,#7                 ;263
00019c  f04f0908          MOVNE    r9,#8                 ;263
                  |L4.416|
0001a0  fa09f404          LSL      r4,r9,r4              ;263
0001a4  ea440c0c          ORR      r12,r4,r12            ;263
0001a8  f8c5c808          STR      r12,[r5,#0x808]       ;264
0001ac  f8dec000          LDR      r12,[lr,#0]
;;;268            temp &= ~((uint32_t)iocurrent);
;;;269            if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
0001b0  684c              LDR      r4,[r1,#4]
0001b2  ea2c0c03          BIC      r12,r12,r3            ;268
0001b6  f4143f80          TST      r4,#0x10000
;;;270            {
;;;271              temp |= iocurrent;
0001ba  bf18              IT       NE
0001bc  ea4c0c03          ORRNE    r12,r12,r3
;;;272            }
;;;273            EXTI->IMR = temp;
0001c0  f8cec000          STR      r12,[lr,#0]
;;;274    
;;;275            temp = EXTI->EMR;
0001c4  4c19              LDR      r4,|L4.556|
0001c6  f8d4c000          LDR      r12,[r4,#0]
;;;276            temp &= ~((uint32_t)iocurrent);
;;;277            if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
0001ca  684d              LDR      r5,[r1,#4]
0001cc  ea2c0c03          BIC      r12,r12,r3            ;276
0001d0  f4153f00          TST      r5,#0x20000
;;;278            {
;;;279              temp |= iocurrent;
0001d4  bf18              IT       NE
0001d6  ea4c0c03          ORRNE    r12,r12,r3
;;;280            }
;;;281            EXTI->EMR = temp;
0001da  f8c4c000          STR      r12,[r4,#0]
;;;282    
;;;283            /* Clear Rising Falling edge configuration */
;;;284            temp = EXTI->RTSR;
0001de  4c14              LDR      r4,|L4.560|
0001e0  f8d4c000          LDR      r12,[r4,#0]
;;;285            temp &= ~((uint32_t)iocurrent);
;;;286            if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
0001e4  684d              LDR      r5,[r1,#4]
0001e6  ea2c0c03          BIC      r12,r12,r3            ;285
0001ea  e000              B        |L4.494|
                  |L4.492|
0001ec  e013              B        |L4.534|
                  |L4.494|
0001ee  f4151f80          TST      r5,#0x100000
;;;287            {
;;;288              temp |= iocurrent;
0001f2  bf18              IT       NE
0001f4  ea4c0c03          ORRNE    r12,r12,r3
;;;289            }
;;;290            EXTI->RTSR = temp;
0001f8  f8c4c000          STR      r12,[r4,#0]
;;;291    
;;;292            temp = EXTI->FTSR;
0001fc  4c0d              LDR      r4,|L4.564|
0001fe  f8d4c000          LDR      r12,[r4,#0]
;;;293            temp &= ~((uint32_t)iocurrent);
;;;294            if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
000202  684d              LDR      r5,[r1,#4]
000204  ea2c0c03          BIC      r12,r12,r3            ;293
000208  f4151f00          TST      r5,#0x200000
;;;295            {
;;;296              temp |= iocurrent;
00020c  bf18              IT       NE
00020e  ea4c0c03          ORRNE    r12,r12,r3
;;;297            }
;;;298            EXTI->FTSR = temp;
000212  f8c4c000          STR      r12,[r4,#0]
                  |L4.534|
000216  1c52              ADDS     r2,r2,#1
000218  2a10              CMP      r2,#0x10
00021a  f4ffaefd          BCC      |L4.24|
;;;299          }
;;;300        }
;;;301      }
;;;302    }
00021e  e8bd8ff8          POP      {r3-r11,pc}
;;;303    
                          ENDP

000222  0000              DCW      0x0000
                  |L4.548|
                          DCD      0x40023844
                  |L4.552|
                          DCD      0x40013c00
                  |L4.556|
                          DCD      0x40013c04
                  |L4.560|
                          DCD      0x40013c08
                  |L4.564|
                          DCD      0x40013c0c

                          AREA ||i.HAL_GPIO_LockPin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_LockPin PROC
;;;469      */
;;;470    HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b081              SUB      sp,sp,#4
;;;471    {
;;;472      __IO uint32_t tmp = GPIO_LCKR_LCKK;
;;;473    
;;;474      /* Check the parameters */
;;;475      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;476    
;;;477      /* Apply lock key write sequence */
;;;478      tmp |= GPIO_Pin;
000002  f4413280          ORR      r2,r1,#0x10000
;;;479      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;480      GPIOx->LCKR = tmp;
000006  9200              STR      r2,[sp,#0]
000008  61c2              STR      r2,[r0,#0x1c]
;;;481      /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
;;;482      GPIOx->LCKR = GPIO_Pin;
00000a  61c1              STR      r1,[r0,#0x1c]
;;;483      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;484      GPIOx->LCKR = tmp;
00000c  9900              LDR      r1,[sp,#0]
00000e  61c1              STR      r1,[r0,#0x1c]
;;;485      /* Read LCKK bit*/
;;;486      tmp = GPIOx->LCKR;
000010  69c1              LDR      r1,[r0,#0x1c]
;;;487    
;;;488     if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
000012  9100              STR      r1,[sp,#0]
000014  69c0              LDR      r0,[r0,#0x1c]
000016  f4103f80          TST      r0,#0x10000
;;;489      {
;;;490        return HAL_OK;
00001a  bf14              ITE      NE
00001c  2000              MOVNE    r0,#0
;;;491      }
;;;492      else
;;;493      {
;;;494        return HAL_ERROR;
00001e  2001              MOVEQ    r0,#1
;;;495      }
;;;496    }
000020  b001              ADD      sp,sp,#4
000022  4770              BX       lr
;;;497    
                          ENDP


                          AREA ||i.HAL_GPIO_ReadPin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_ReadPin PROC
;;;392      */
;;;393    GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6900              LDR      r0,[r0,#0x10]
;;;394    {
;;;395      GPIO_PinState bitstatus;
;;;396    
;;;397      /* Check the parameters */
;;;398      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;399    
;;;400      if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
000002  4008              ANDS     r0,r0,r1
;;;401      {
;;;402        bitstatus = GPIO_PIN_SET;
000004  bf18              IT       NE
000006  2001              MOVNE    r0,#1
;;;403      }
;;;404      else
;;;405      {
;;;406        bitstatus = GPIO_PIN_RESET;
;;;407      }
;;;408      return bitstatus;
;;;409    }
000008  4770              BX       lr
;;;410    
                          ENDP


                          AREA ||i.HAL_GPIO_TogglePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_TogglePin PROC
;;;450      */
;;;451    void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6942              LDR      r2,[r0,#0x14]
;;;452    {
;;;453      /* Check the parameters */
;;;454      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;455    
;;;456      GPIOx->ODR ^= GPIO_Pin;
000002  4051              EORS     r1,r1,r2
000004  6141              STR      r1,[r0,#0x14]
;;;457    }
000006  4770              BX       lr
;;;458    
                          ENDP


                          AREA ||i.HAL_GPIO_WritePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_WritePin PROC
;;;427      */
;;;428    void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
000000  2a00              CMP      r2,#0
;;;429    {
;;;430      /* Check the parameters */
;;;431      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;432      assert_param(IS_GPIO_PIN_ACTION(PinState));
;;;433    
;;;434      if(PinState != GPIO_PIN_RESET)
;;;435      {
;;;436        GPIOx->BSRR = GPIO_Pin;
;;;437      }
;;;438      else
;;;439      {
;;;440        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
000002  bf08              IT       EQ
000004  0409              LSLEQ    r1,r1,#16
000006  6181              STR      r1,[r0,#0x18]
;;;441      }
;;;442    }
000008  4770              BX       lr
;;;443    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F4_V1.21.0\\Drivers\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_gpio_c_ea787061____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F4_V1.21.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_stm32f4xx_hal_gpio_c_ea787061____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_gpio_c_ea787061____REVSH|
#line 402
|__asm___20_stm32f4xx_hal_gpio_c_ea787061____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_gpio_c_ea787061____RRX|
#line 587
|__asm___20_stm32f4xx_hal_gpio_c_ea787061____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
