; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\test.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\test.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\STM32F4xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F405RGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F405xx -DSTM32F405xx -DUSE_HAL_DRIVER -DHSE_VALUE=8000000 -DPLL_M=8 --enum_is_int --signed_chars --omf_browse=.\debug\output\test.crf ..\..\MProkaron\Benchmark\test.c]
                          THUMB

                          AREA ||i.Func_1||, CODE, READONLY, ALIGN=2

                  Func_1 PROC
;;;78     
;;;79     void Func_1(void)
000000  4c1c              LDR      r4,|L1.116|
000002  f04f0800          MOV      r8,#0
000006  f04f4680          MOV      r6,#0x40000000
00000a  f64f77ff          MOV      r7,#0xffff
00000e  f2427510          MOV      r5,#0x2710
                  |L1.18|
000012  6a70              LDR      r0,[r6,#0x24]
000014  ea070040          AND      r0,r7,r0,LSL #1
000018  8020              STRH     r0,[r4,#0]
00001a  f7fffffe          BL       RMP_Yield
00001e  f1080801          ADD      r8,r8,#1
000022  45a8              CMP      r8,r5
000024  dbf5              BLT      |L1.18|
;;;80     {
;;;81         Test_Yield_1();
;;;82         /* Change priority of thread 2 */
;;;83         RMP_Thd_Set(&Thd_2,2,RMP_MAX_SLICES);
000026  f8df8050          LDR      r8,|L1.120|
00002a  2102              MOVS     r1,#2
00002c  4642              MOV      r2,r8
00002e  4813              LDR      r0,|L1.124|
000030  f7fffffe          BL       RMP_Thd_Set
000034  2000              MOVS     r0,#0
000036  6260              STR      r0,[r4,#0x24]  ; Count
                  |L1.56|
000038  6a70              LDR      r0,[r6,#0x24]
00003a  ea070040          AND      r0,r7,r0,LSL #1
00003e  8020              STRH     r0,[r4,#0]
000040  4642              MOV      r2,r8
000042  2101              MOVS     r1,#1
000044  480d              LDR      r0,|L1.124|
000046  f7fffffe          BL       RMP_Thd_Snd
00004a  6a60              LDR      r0,[r4,#0x24]  ; Count
00004c  1c40              ADDS     r0,r0,#1
00004e  6260              STR      r0,[r4,#0x24]  ; Count
000050  42a8              CMP      r0,r5
000052  dbf1              BLT      |L1.56|
000054  f04f0800          MOV      r8,#0
                  |L1.88|
000058  6a70              LDR      r0,[r6,#0x24]
00005a  ea070040          AND      r0,r7,r0,LSL #1
00005e  8020              STRH     r0,[r4,#0]
000060  2101              MOVS     r1,#1
000062  4807              LDR      r0,|L1.128|
000064  f7fffffe          BL       RMP_Sem_Post
000068  f1080801          ADD      r8,r8,#1
00006c  45a8              CMP      r8,r5
00006e  dbf3              BLT      |L1.88|
                  |L1.112|
;;;84         Test_Mail_1();
;;;85         Test_Sem_1();
;;;86         while(1);
000070  e7fe              B        |L1.112|
;;;87     }
;;;88     /* End Function:Test_Yield ***************************************************/
                          ENDP

000072  0000              DCW      0x0000
                  |L1.116|
                          DCD      ||.data||
                  |L1.120|
                          DCD      0x000186a0
                  |L1.124|
                          DCD      ||.bss||+0x88fc
                  |L1.128|
                          DCD      ||.bss||+0x8938

                          AREA ||i.Func_2||, CODE, READONLY, ALIGN=2

                  Func_2 PROC
;;;262    
;;;263    void Func_2(void)
000000  4c78              LDR      r4,|L2.484|
;;;264    {
000002  b082              SUB      sp,sp,#8
;;;265        /* Yield tests */
;;;266        Total=0;
000004  f04f0a00          MOV      r10,#0
000008  f8c4a004          STR      r10,[r4,#4]  ; Total
00000c  46d0              MOV      r8,r10
00000e  f04f4680          MOV      r6,#0x40000000
000012  f64f77ff          MOV      r7,#0xffff
000016  f2427510          MOV      r5,#0x2710
00001a  bf00              NOP      
                  |L2.28|
00001c  f7fffffe          BL       RMP_Yield
000020  6a70              LDR      r0,[r6,#0x24]
000022  ea070040          AND      r0,r7,r0,LSL #1
000026  8060              STRH     r0,[r4,#2]
000028  8861              LDRH     r1,[r4,#2]  ; End
00002a  8820              LDRH     r0,[r4,#0]  ; Start
00002c  1a08              SUBS     r0,r1,r0
00002e  6861              LDR      r1,[r4,#4]  ; Total
000030  b280              UXTH     r0,r0
000032  4408              ADD      r0,r0,r1
000034  6060              STR      r0,[r4,#4]  ; Total
000036  f1080801          ADD      r8,r8,#1
00003a  45a8              CMP      r8,r5
00003c  dbee              BLT      |L2.28|
;;;267        Test_Yield_2();
;;;268        RMP_PRINTK_S("Yield: ");
00003e  a06a              ADR      r0,|L2.488|
000040  f7fffffe          BL       RMP_Print_String
;;;269        
;;;270        Yield_Time=Total/10000;
000044  6860              LDR      r0,[r4,#4]  ; Total
000046  fbb0f0f5          UDIV     r0,r0,r5
00004a  60e0              STR      r0,[r4,#0xc]  ; Yield_Time
;;;271        RMP_PRINTK_I(Yield_Time);
00004c  68e0              LDR      r0,[r4,#0xc]  ; Yield_Time
00004e  f7fffffe          BL       RMP_Print_Int
;;;272        RMP_PRINTK_S(" cycles.\r\n");
000052  a067              ADR      r0,|L2.496|
000054  f7fffffe          BL       RMP_Print_String
;;;273        /* Change priority of thread 2, just in case */
;;;274        RMP_Thd_Set(&Thd_2,2,RMP_MAX_SLICES);
000058  f8df91a0          LDR      r9,|L2.508|
00005c  2102              MOVS     r1,#2
00005e  464a              MOV      r2,r9
000060  4867              LDR      r0,|L2.512|
000062  f7fffffe          BL       RMP_Thd_Set
;;;275        
;;;276        /* Mailbox tests */
;;;277        Total=0;
000066  f8c4a004          STR      r10,[r4,#4]  ; Total
00006a  f04f0800          MOV      r8,#0
                  |L2.110|
00006e  4649              MOV      r1,r9
000070  4668              MOV      r0,sp
000072  f7fffffe          BL       RMP_Thd_Rcv
000076  6a70              LDR      r0,[r6,#0x24]
000078  ea070040          AND      r0,r7,r0,LSL #1
00007c  8060              STRH     r0,[r4,#2]
00007e  8860              LDRH     r0,[r4,#2]  ; End
000080  8821              LDRH     r1,[r4,#0]  ; Start
000082  1a40              SUBS     r0,r0,r1
000084  6861              LDR      r1,[r4,#4]  ; Total
000086  b280              UXTH     r0,r0
000088  4408              ADD      r0,r0,r1
00008a  6060              STR      r0,[r4,#4]  ; Total
00008c  f1080801          ADD      r8,r8,#1
000090  45a8              CMP      r8,r5
000092  dbec              BLT      |L2.110|
;;;278        Test_Mail_2();
;;;279        RMP_PRINTK_S("Mailbox: ");
000094  a05b              ADR      r0,|L2.516|
000096  f7fffffe          BL       RMP_Print_String
;;;280        Mailbox_Time=Total/10000;
00009a  6860              LDR      r0,[r4,#4]  ; Total
00009c  fbb0f0f5          UDIV     r0,r0,r5
0000a0  6120              STR      r0,[r4,#0x10]  ; Mailbox_Time
;;;281        RMP_PRINTK_I(Mailbox_Time);
0000a2  6920              LDR      r0,[r4,#0x10]  ; Mailbox_Time
0000a4  f7fffffe          BL       RMP_Print_Int
;;;282        RMP_PRINTK_S(" cycles.\r\n");
0000a8  a051              ADR      r0,|L2.496|
0000aa  f7fffffe          BL       RMP_Print_String
;;;283        
;;;284        /* Semaphore tests */
;;;285        Total=0;
0000ae  f8c4a004          STR      r10,[r4,#4]  ; Total
0000b2  f04f0800          MOV      r8,#0
                  |L2.182|
0000b6  4649              MOV      r1,r9
0000b8  4855              LDR      r0,|L2.528|
0000ba  f7fffffe          BL       RMP_Sem_Pend
0000be  6a70              LDR      r0,[r6,#0x24]
0000c0  ea070040          AND      r0,r7,r0,LSL #1
0000c4  8060              STRH     r0,[r4,#2]
0000c6  8860              LDRH     r0,[r4,#2]  ; End
0000c8  8821              LDRH     r1,[r4,#0]  ; Start
0000ca  1a40              SUBS     r0,r0,r1
0000cc  6861              LDR      r1,[r4,#4]  ; Total
0000ce  b280              UXTH     r0,r0
0000d0  4408              ADD      r0,r0,r1
0000d2  6060              STR      r0,[r4,#4]  ; Total
0000d4  f1080801          ADD      r8,r8,#1
0000d8  45a8              CMP      r8,r5
0000da  dbec              BLT      |L2.182|
;;;286        Test_Sem_2();
;;;287        RMP_PRINTK_S("Semaphore: ");
0000dc  a04d              ADR      r0,|L2.532|
0000de  f7fffffe          BL       RMP_Print_String
;;;288        Semaphore_Time=Total/10000;
0000e2  6860              LDR      r0,[r4,#4]  ; Total
0000e4  fbb0f0f5          UDIV     r0,r0,r5
0000e8  6160              STR      r0,[r4,#0x14]  ; Semaphore_Time
;;;289        RMP_PRINTK_I(Semaphore_Time);
0000ea  6960              LDR      r0,[r4,#0x14]  ; Semaphore_Time
0000ec  f7fffffe          BL       RMP_Print_Int
;;;290        RMP_PRINTK_S(" cycles.\r\n");
0000f0  a03f              ADR      r0,|L2.496|
0000f2  f7fffffe          BL       RMP_Print_String
;;;291    
;;;292        /* Mailbox from interrupt tests */
;;;293        Total=0;
0000f6  f8c4a004          STR      r10,[r4,#4]  ; Total
0000fa  f8df8128          LDR      r8,|L2.548|
0000fe  4848              LDR      r0,|L2.544|
000100  e9c80a00          STRD     r0,r10,[r8,#0]
000104  2010              MOVS     r0,#0x10
000106  f8c80008          STR      r0,[r8,#8]  ; TIM4_Handle
00010a  f24410a0          MOV      r0,#0x41a0
00010e  e9c80a03          STRD     r0,r10,[r8,#0xc]
000112  4640              MOV      r0,r8
000114  f8c8a014          STR      r10,[r8,#0x14]  ; TIM4_Handle
000118  f7fffffe          BL       HAL_TIM_Base_Init
00011c  4842              LDR      r0,|L2.552|
00011e  6801              LDR      r1,[r0,#0]
000120  f0410104          ORR      r1,r1,#4
000124  6001              STR      r1,[r0,#0]
000126  6800              LDR      r0,[r0,#0]
000128  f0000004          AND      r0,r0,#4
00012c  9000              STR      r0,[sp,#0]
00012e  f8d80000          LDR      r0,[r8,#0]  ; TIM4_Handle
000132  6801              LDR      r1,[r0,#0]
000134  f0410101          ORR      r1,r1,#1
000138  6001              STR      r1,[r0,#0]
00013a  f8d81000          LDR      r1,[r8,#0]  ; TIM4_Handle
00013e  f06f0001          MVN      r0,#1
000142  6108              STR      r0,[r1,#0x10]
000144  4640              MOV      r0,r8
000146  f7fffffe          BL       HAL_TIM_Base_Start_IT
00014a  f8c4a028          STR      r10,[r4,#0x28]  ; Count
                  |L2.334|
00014e  4649              MOV      r1,r9
000150  4668              MOV      r0,sp
000152  f7fffffe          BL       RMP_Thd_Rcv
000156  6a70              LDR      r0,[r6,#0x24]
000158  ea070040          AND      r0,r7,r0,LSL #1
00015c  8060              STRH     r0,[r4,#2]
00015e  8860              LDRH     r0,[r4,#2]  ; End
000160  8821              LDRH     r1,[r4,#0]  ; Start
000162  1a40              SUBS     r0,r0,r1
000164  6861              LDR      r1,[r4,#4]  ; Total
000166  b280              UXTH     r0,r0
000168  4408              ADD      r0,r0,r1
00016a  6060              STR      r0,[r4,#4]  ; Total
00016c  6aa0              LDR      r0,[r4,#0x28]  ; Count
00016e  1c40              ADDS     r0,r0,#1
000170  62a0              STR      r0,[r4,#0x28]  ; Count
000172  42a8              CMP      r0,r5
000174  dbeb              BLT      |L2.334|
;;;294        Int_Init();
;;;295        Test_Mail_ISR();
;;;296        
;;;297        /* Semaphore from interrupt tests */
;;;298        Temp=Total;
000176  6860              LDR      r0,[r4,#4]  ; Total
000178  60a0              STR      r0,[r4,#8]  ; Temp
;;;299        Total=0;
00017a  f8c4a004          STR      r10,[r4,#4]  ; Total
00017e  f8c4a02c          STR      r10,[r4,#0x2c]  ; Count
                  |L2.386|
000182  4649              MOV      r1,r9
000184  4822              LDR      r0,|L2.528|
000186  f7fffffe          BL       RMP_Sem_Pend
00018a  6a70              LDR      r0,[r6,#0x24]
00018c  ea070040          AND      r0,r7,r0,LSL #1
000190  8060              STRH     r0,[r4,#2]
000192  8860              LDRH     r0,[r4,#2]  ; End
000194  8821              LDRH     r1,[r4,#0]  ; Start
000196  1a40              SUBS     r0,r0,r1
000198  6861              LDR      r1,[r4,#4]  ; Total
00019a  b280              UXTH     r0,r0
00019c  4408              ADD      r0,r0,r1
00019e  6060              STR      r0,[r4,#4]  ; Total
0001a0  6ae0              LDR      r0,[r4,#0x2c]  ; Count
0001a2  1c40              ADDS     r0,r0,#1
0001a4  62e0              STR      r0,[r4,#0x2c]  ; Count
0001a6  42a8              CMP      r0,r5
0001a8  dbeb              BLT      |L2.386|
;;;300        Test_Sem_ISR();
;;;301        
;;;302        RMP_PRINTK_S("Mailbox-ISR: ");
0001aa  a020              ADR      r0,|L2.556|
0001ac  f7fffffe          BL       RMP_Print_String
;;;303        Mailbox_ISR_Time=Temp/10000;
0001b0  68a0              LDR      r0,[r4,#8]  ; Temp
0001b2  fbb0f0f5          UDIV     r0,r0,r5
0001b6  61a0              STR      r0,[r4,#0x18]  ; Mailbox_ISR_Time
;;;304        RMP_PRINTK_I(Mailbox_ISR_Time);
0001b8  69a0              LDR      r0,[r4,#0x18]  ; Mailbox_ISR_Time
0001ba  f7fffffe          BL       RMP_Print_Int
;;;305        RMP_PRINTK_S(" cycles.\r\n");
0001be  a00c              ADR      r0,|L2.496|
0001c0  f7fffffe          BL       RMP_Print_String
;;;306        RMP_PRINTK_S("Semaphore-ISR: ");
0001c4  a01d              ADR      r0,|L2.572|
0001c6  f7fffffe          BL       RMP_Print_String
;;;307        Semaphore_ISR_Time=Total/10000;
0001ca  6860              LDR      r0,[r4,#4]  ; Total
0001cc  fbb0f0f5          UDIV     r0,r0,r5
0001d0  61e0              STR      r0,[r4,#0x1c]  ; Semaphore_ISR_Time
;;;308        RMP_PRINTK_I(Semaphore_ISR_Time);
0001d2  69e0              LDR      r0,[r4,#0x1c]  ; Semaphore_ISR_Time
0001d4  f7fffffe          BL       RMP_Print_Int
;;;309        RMP_PRINTK_S(" cycles.\r\n");
0001d8  a005              ADR      r0,|L2.496|
0001da  f7fffffe          BL       RMP_Print_String
;;;310        
;;;311        /* Memory pool tests */
;;;312    #ifdef TEST_MEM_POOL
;;;313        Test_Mem_Pool();
0001de  f7fffffe          BL       Test_Mem_Pool
                  |L2.482|
;;;314    #endif
;;;315        
;;;316        while(1);
0001e2  e7fe              B        |L2.482|
;;;317    }
;;;318    /* End Function:Func_2 *******************************************************/
                          ENDP

                  |L2.484|
                          DCD      ||.data||
                  |L2.488|
0001e8  5969656c          DCB      "Yield: ",0
0001ec  643a2000
                  |L2.496|
0001f0  20637963          DCB      " cycles.\r\n",0
0001f4  6c65732e
0001f8  0d0a00  
0001fb  00                DCB      0
                  |L2.508|
                          DCD      0x000186a0
                  |L2.512|
                          DCD      ||.bss||+0x88fc
                  |L2.516|
000204  4d61696c          DCB      "Mailbox: ",0
000208  626f783a
00020c  2000    
00020e  00                DCB      0
00020f  00                DCB      0
                  |L2.528|
                          DCD      ||.bss||+0x8938
                  |L2.532|
000214  53656d61          DCB      "Semaphore: ",0
000218  70686f72
00021c  653a2000
                  |L2.544|
                          DCD      0x40000800
                  |L2.548|
                          DCD      ||.bss||+0x40
                  |L2.552|
                          DCD      0x40023840
                  |L2.556|
00022c  4d61696c          DCB      "Mailbox-ISR: ",0
000230  626f782d
000234  4953523a
000238  2000    
00023a  00                DCB      0
00023b  00                DCB      0
                  |L2.572|
00023c  53656d61          DCB      "Semaphore-ISR: ",0
000240  70686f72
000244  652d4953
000248  523a2000

                          AREA ||i.HAL_TIM_Base_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_MspInit PROC
;;;80     
;;;81     void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
000000  6800              LDR      r0,[r0,#0]
;;;82     {
000002  b081              SUB      sp,sp,#4
;;;83     	if(htim->Instance==TIM4) 
000004  f1a04180          SUB      r1,r0,#0x40000000
000008  f5b16100          SUBS     r1,r1,#0x800
;;;84         {
;;;85     		/* Set the interrupt priority */
;;;86     		NVIC_SetPriority(TIM4_IRQn,0xFF);
;;;87     		/* Enable timer 4 interrupt */
;;;88     		NVIC_EnableIRQ(TIM4_IRQn);
;;;89     		/* Enable timer 4 clock */
;;;90     		__HAL_RCC_TIM4_CLK_ENABLE();
;;;91     	}
;;;92     }
00000c  bf1c              ITT      NE
00000e  b001              ADDNE    sp,sp,#4
000010  4770              BXNE     lr
000012  20f0              MOVS     r0,#0xf0
000014  4909              LDR      r1,|L3.60|
000016  f8810400          STRB     r0,[r1,#0x400]
00001a  f04f21e0          MOV      r1,#0xe000e000
00001e  f04f4080          MOV      r0,#0x40000000
000022  f8c10100          STR      r0,[r1,#0x100]
000026  4806              LDR      r0,|L3.64|
000028  6801              LDR      r1,[r0,#0]            ;90
00002a  f0410104          ORR      r1,r1,#4              ;90
00002e  6001              STR      r1,[r0,#0]            ;90
000030  6800              LDR      r0,[r0,#0]            ;90
000032  f0000004          AND      r0,r0,#4              ;90
000036  9000              STR      r0,[sp,#0]            ;90
000038  b001              ADD      sp,sp,#4
00003a  4770              BX       lr
;;;93     
                          ENDP

                  |L3.60|
                          DCD      0xe000e01e
                  |L3.64|
                          DCD      0x40023840

                          AREA ||i.Int_Disable||, CODE, READONLY, ALIGN=1

                  Int_Disable PROC
;;;108    ******************************************************************************/
;;;109    void Int_Disable(void)
000000  f04f21e0          MOV      r1,#0xe000e000
000004  f04f4080          MOV      r0,#0x40000000
000008  f8c10180          STR      r0,[r1,#0x180]
;;;110    {
;;;111        /* Disable timer 4 interrupt */
;;;112        NVIC_DisableIRQ(TIM4_IRQn);
;;;113    }
00000c  4770              BX       lr
;;;114    #endif
                          ENDP


                          AREA ||i.Int_Handler||, CODE, READONLY, ALIGN=2

                  Int_Handler PROC
;;;325    ******************************************************************************/
;;;326    void Int_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;327    {
;;;328        static cnt_t Count=0;
;;;329        
;;;330        if(Count<10000)
000002  4c20              LDR      r4,|L5.132|
000004  f2427c10          MOV      r12,#0x2710
;;;331        {
;;;332            Count++;
;;;333            Start=COUNTER_READ();
000008  f64f73ff          MOV      r3,#0xffff
00000c  6b62              LDR      r2,[r4,#0x34]         ;332  ; Count
00000e  f04f4180          MOV      r1,#0x40000000
000012  1c50              ADDS     r0,r2,#1              ;332
000014  4562              CMP      r2,r12                ;330
000016  da15              BGE      |L5.68|
000018  6360              STR      r0,[r4,#0x34]  ; Count
00001a  6a48              LDR      r0,[r1,#0x24]
00001c  ea030040          AND      r0,r3,r0,LSL #1
000020  8020              STRH     r0,[r4,#0]
;;;334            if(RMP_Thd_Snd_ISR(&Thd_2, 1)<0)
000022  2101              MOVS     r1,#1
000024  4818              LDR      r0,|L5.136|
000026  f7fffffe          BL       RMP_Thd_Snd_ISR
00002a  2800              CMP      r0,#0
;;;335            {
;;;336                RMP_PRINTK_S("ISR Mailbox send failure: ");
;;;337                RMP_PRINTK_I(Count);
;;;338                RMP_PRINTK_S(" sends.\r\n");
;;;339                while(1);
;;;340            }
;;;341        }
;;;342        else if(Count<20000)
;;;343        {
;;;344            Count++;
;;;345            Start=COUNTER_READ();
;;;346            if(RMP_Sem_Post_ISR(&Sem_1, 1)<0)
;;;347            {
;;;348                RMP_PRINTK_S("ISR semaphore post failure: ");
;;;349                RMP_PRINTK_I(Count);
;;;350                RMP_PRINTK_S(" posts.\r\n");
;;;351                while(1);
;;;352            }
;;;353        }
;;;354        else
;;;355            Int_Disable();
;;;356    }
00002c  bfa8              IT       GE
00002e  bd10              POPGE    {r4,pc}
000030  a016              ADR      r0,|L5.140|
000032  f7fffffe          BL       RMP_Print_String
000036  6b60              LDR      r0,[r4,#0x34]         ;337  ; Count
000038  f7fffffe          BL       RMP_Print_Int
00003c  a01a              ADR      r0,|L5.168|
00003e  f7fffffe          BL       RMP_Print_String
                  |L5.66|
000042  e7fe              B        |L5.66|
                  |L5.68|
000044  f6446c20          MOV      r12,#0x4e20           ;342
000048  4562              CMP      r2,r12                ;342
00004a  bfa2              ITTT     GE                    ;342
00004c  f04f20e0          MOVGE    r0,#0xe000e000        ;342
000050  f8c01180          STRGE    r1,[r0,#0x180]        ;342
000054  bd10              POPGE    {r4,pc}
000056  6360              STR      r0,[r4,#0x34]         ;345  ; Count
000058  6a48              LDR      r0,[r1,#0x24]         ;345
00005a  ea030040          AND      r0,r3,r0,LSL #1       ;345
00005e  8020              STRH     r0,[r4,#0]            ;345
000060  2101              MOVS     r1,#1                 ;346
000062  4814              LDR      r0,|L5.180|
000064  f7fffffe          BL       RMP_Sem_Post_ISR
000068  2800              CMP      r0,#0                 ;346
00006a  bfa8              IT       GE
00006c  bd10              POPGE    {r4,pc}
00006e  a012              ADR      r0,|L5.184|
000070  f7fffffe          BL       RMP_Print_String
000074  6b60              LDR      r0,[r4,#0x34]         ;349  ; Count
000076  f7fffffe          BL       RMP_Print_Int
00007a  a017              ADR      r0,|L5.216|
00007c  f7fffffe          BL       RMP_Print_String
                  |L5.128|
000080  e7fe              B        |L5.128|
;;;357    #endif
                          ENDP

000082  0000              DCW      0x0000
                  |L5.132|
                          DCD      ||.data||
                  |L5.136|
                          DCD      ||.bss||+0x88fc
                  |L5.140|
00008c  49535220          DCB      "ISR Mailbox send failure: ",0
000090  4d61696c
000094  626f7820
000098  73656e64
00009c  20666169
0000a0  6c757265
0000a4  3a2000  
0000a7  00                DCB      0
                  |L5.168|
0000a8  2073656e          DCB      " sends.\r\n",0
0000ac  64732e0d
0000b0  0a00    
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L5.180|
                          DCD      ||.bss||+0x8938
                  |L5.184|
0000b8  49535220          DCB      "ISR semaphore post failure: ",0
0000bc  73656d61
0000c0  70686f72
0000c4  6520706f
0000c8  73742066
0000cc  61696c75
0000d0  72653a20
0000d4  00      
0000d5  00                DCB      0
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L5.216|
0000d8  20706f73          DCB      " posts.\r\n",0
0000dc  74732e0d
0000e0  0a00    
0000e2  00                DCB      0
0000e3  00                DCB      0

                          AREA ||i.Int_Init||, CODE, READONLY, ALIGN=2

                  Int_Init PROC
;;;63     ******************************************************************************/
;;;64     void Int_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;65     {
;;;66         /* TIM4 clock = 1/2 CPU clock */
;;;67         TIM4_Handle.Instance=TIM4;
000002  4c14              LDR      r4,|L6.84|
000004  4812              LDR      r0,|L6.80|
;;;68         TIM4_Handle.Init.Prescaler=0;
;;;69         TIM4_Handle.Init.CounterMode=TIM_COUNTERMODE_DOWN;
000006  2110              MOVS     r1,#0x10
000008  6020              STR      r0,[r4,#0]            ;68  ; TIM4_Handle
00000a  2000              MOVS     r0,#0                 ;68
00000c  e9c40101          STRD     r0,r1,[r4,#4]
;;;70         TIM4_Handle.Init.Period=16800;
000010  f24411a0          MOV      r1,#0x41a0
000014  e9c41003          STRD     r1,r0,[r4,#0xc]
;;;71         TIM4_Handle.Init.ClockDivision=TIM_CLOCKDIVISION_DIV1;
;;;72     	TIM4_Handle.Init.RepetitionCounter=0;
;;;73         HAL_TIM_Base_Init(&TIM4_Handle);
000018  6160              STR      r0,[r4,#0x14]  ; TIM4_Handle
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       HAL_TIM_Base_Init
;;;74         __HAL_RCC_TIM4_CLK_ENABLE();
000020  480d              LDR      r0,|L6.88|
000022  6801              LDR      r1,[r0,#0]
000024  f0410104          ORR      r1,r1,#4
000028  6001              STR      r1,[r0,#0]
00002a  6800              LDR      r0,[r0,#0]
00002c  f0000004          AND      r0,r0,#4
;;;75         __HAL_TIM_ENABLE(&TIM4_Handle);
000030  9000              STR      r0,[sp,#0]
000032  6820              LDR      r0,[r4,#0]  ; TIM4_Handle
000034  6801              LDR      r1,[r0,#0]
000036  f0410101          ORR      r1,r1,#1
00003a  6001              STR      r1,[r0,#0]
;;;76     	/* Clear interrupt pending bit, because we used EGR to update the registers */
;;;77     	__HAL_TIM_CLEAR_IT(&TIM4_Handle, TIM_IT_UPDATE);
00003c  6821              LDR      r1,[r4,#0]  ; TIM4_Handle
00003e  f06f0001          MVN      r0,#1
000042  6108              STR      r0,[r1,#0x10]
;;;78     	HAL_TIM_Base_Start_IT(&TIM4_Handle);
000044  4620              MOV      r0,r4
000046  e8bd4038          POP      {r3-r5,lr}
00004a  f7ffbffe          B.W      HAL_TIM_Base_Start_IT
;;;79     }
;;;80     
                          ENDP

00004e  0000              DCW      0x0000
                  |L6.80|
                          DCD      0x40000800
                  |L6.84|
                          DCD      ||.bss||+0x40
                  |L6.88|
                          DCD      0x40023840

                          AREA ||i.RMP_Init_Hook||, CODE, READONLY, ALIGN=2

                  RMP_Init_Hook PROC
;;;365    ******************************************************************************/
;;;366    void RMP_Init_Hook(void)
000000  b530              PUSH     {r4,r5,lr}
000002  4c22              LDR      r4,|L7.140|
;;;367    {
000004  b083              SUB      sp,sp,#0xc
000006  f04f4080          MOV      r0,#0x40000000
00000a  6020              STR      r0,[r4,#0]  ; TIM2_Handle
00000c  2000              MOVS     r0,#0
00000e  1e41              SUBS     r1,r0,#1
000010  6060              STR      r0,[r4,#4]  ; TIM2_Handle
000012  e9c40102          STRD     r0,r1,[r4,#8]
000016  6120              STR      r0,[r4,#0x10]  ; TIM2_Handle
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       HAL_TIM_Base_Init
00001e  481c              LDR      r0,|L7.144|
000020  6801              LDR      r1,[r0,#0]
000022  f0410101          ORR      r1,r1,#1
000026  6001              STR      r1,[r0,#0]
000028  6800              LDR      r0,[r0,#0]
00002a  f0000001          AND      r0,r0,#1
00002e  9000              STR      r0,[sp,#0]
000030  6820              LDR      r0,[r4,#0]  ; TIM2_Handle
000032  6801              LDR      r1,[r0,#0]
000034  f0410101          ORR      r1,r1,#1
000038  6001              STR      r1,[r0,#0]
;;;368    #ifndef MINIMAL_SIZE
;;;369        /* Init the timer */
;;;370        Timer_Init();
;;;371        /* Clean up the structures */
;;;372        RMP_Clear(&Thd_1,sizeof(struct RMP_Thd));
00003a  213c              MOVS     r1,#0x3c
00003c  4815              LDR      r0,|L7.148|
00003e  f7fffffe          BL       RMP_Clear
;;;373        RMP_Clear(&Thd_2,sizeof(struct RMP_Thd));
000042  213c              MOVS     r1,#0x3c
000044  4814              LDR      r0,|L7.152|
000046  f7fffffe          BL       RMP_Clear
;;;374        RMP_Clear(&Sem_1,sizeof(struct RMP_Sem));
00004a  2110              MOVS     r1,#0x10
00004c  4813              LDR      r0,|L7.156|
00004e  f7fffffe          BL       RMP_Clear
;;;375        /* Create counting semaphore */
;;;376        RMP_Sem_Crt(&Sem_1,0);
000052  2100              MOVS     r1,#0
000054  4811              LDR      r0,|L7.156|
000056  f7fffffe          BL       RMP_Sem_Crt
;;;377        /* Start threads */
;;;378        RMP_Thd_Crt(&Thd_1, Func_1, THD1_STACK, (void*)0x1234, 1, 5);
00005a  2405              MOVS     r4,#5
00005c  2501              MOVS     r5,#1
00005e  4a10              LDR      r2,|L7.160|
000060  e9cd5400          STRD     r5,r4,[sp,#0]
000064  f2412334          MOV      r3,#0x1234
000068  490e              LDR      r1,|L7.164|
00006a  f502608d          ADD      r0,r2,#0x468
00006e  f7fffffe          BL       RMP_Thd_Crt
;;;379        RMP_Thd_Crt(&Thd_2, Func_2, THD2_STACK, (void*)0x4321, 1, 5);
000072  4a0d              LDR      r2,|L7.168|
000074  e9cd5400          STRD     r5,r4,[sp,#0]
000078  f2443321          MOV      r3,#0x4321
00007c  490b              LDR      r1,|L7.172|
00007e  f10200a4          ADD      r0,r2,#0xa4
000082  f7fffffe          BL       RMP_Thd_Crt
;;;380    #endif
;;;381    }
000086  b003              ADD      sp,sp,#0xc
000088  bd30              POP      {r4,r5,pc}
;;;382    
                          ENDP

00008a  0000              DCW      0x0000
                  |L7.140|
                          DCD      ||.bss||
                  |L7.144|
                          DCD      0x40023840
                  |L7.148|
                          DCD      ||.bss||+0x88c0
                  |L7.152|
                          DCD      ||.bss||+0x88fc
                  |L7.156|
                          DCD      ||.bss||+0x8938
                  |L7.160|
                          DCD      ||.bss||+0x8458
                  |L7.164|
                          DCD      Func_1
                  |L7.168|
                          DCD      ||.bss||+0x8858
                  |L7.172|
                          DCD      Func_2

                          AREA ||i.RMP_Init_Idle||, CODE, READONLY, ALIGN=1

                  RMP_Init_Idle PROC
;;;382    
;;;383    void RMP_Init_Idle(void)
000000  4770              BX       lr
;;;384    {
;;;385        return;
;;;386    }
;;;387    /* End Function:RMP_Init *****************************************************/
                          ENDP


                          AREA ||i.Rand||, CODE, READONLY, ALIGN=2

                  Rand PROC
;;;158    #ifdef TEST_MEM_POOL
;;;159    ptr_t Rand(void)
000000  4805              LDR      r0,|L9.24|
;;;160    {
;;;161        static ptr_t LFSR=0xACE1;
;;;162        
;;;163        if((LFSR&0x01)!=0)
000002  6b01              LDR      r1,[r0,#0x30]  ; LFSR
000004  f0110f01          TST      r1,#1
;;;164        {
;;;165            LFSR>>=1;
000008  ea4f0151          LSR      r1,r1,#1
;;;166            LFSR^=0xB400;
00000c  bf18              IT       NE
00000e  f4814134          EORNE    r1,r1,#0xb400
;;;167        }
;;;168        else
;;;169            LFSR>>=1;
;;;170        
;;;171        return LFSR;
000012  6301              STR      r1,[r0,#0x30]  ; LFSR
000014  4608              MOV      r0,r1
;;;172    }
000016  4770              BX       lr
;;;173    
                          ENDP

                  |L9.24|
                          DCD      ||.data||

                          AREA ||i.Swap||, CODE, READONLY, ALIGN=1

                  Swap PROC
;;;173    
;;;174    void Swap(u8* Arg1, u8* Arg2)
000000  7802              LDRB     r2,[r0,#0]
;;;175    {
;;;176        u8 Temp;
;;;177        Temp=*Arg1;
;;;178        *Arg1=*Arg2;
000002  780b              LDRB     r3,[r1,#0]
000004  7003              STRB     r3,[r0,#0]
;;;179        *Arg2=Temp;
000006  700a              STRB     r2,[r1,#0]
;;;180    }
000008  4770              BX       lr
;;;181    
                          ENDP


                          AREA ||i.TIM4_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM4_IRQHandler PROC
;;;94     /* The interrupt handler */
;;;95     void TIM4_IRQHandler(void)
000000  4921              LDR      r1,|L11.136|
;;;96     {
000002  b510              PUSH     {r4,lr}
;;;97         TIM4->SR=~TIM_FLAG_UPDATE;
000004  f06f0001          MVN      r0,#1
000008  6008              STR      r0,[r1,#0]
00000a  4c20              LDR      r4,|L11.140|
00000c  0c03              LSRS     r3,r0,#16
00000e  f2427c10          MOV      r12,#0x2710
000012  6b62              LDR      r2,[r4,#0x34]  ; Count
000014  0689              LSLS     r1,r1,#26
000016  1c50              ADDS     r0,r2,#1
000018  4562              CMP      r2,r12
00001a  da15              BGE      |L11.72|
00001c  6360              STR      r0,[r4,#0x34]         ;96  ; Count
00001e  6a48              LDR      r0,[r1,#0x24]         ;96
000020  ea030040          AND      r0,r3,r0,LSL #1       ;96
000024  8020              STRH     r0,[r4,#0]            ;96
000026  2101              MOVS     r1,#1                 ;96
000028  4819              LDR      r0,|L11.144|
00002a  f7fffffe          BL       RMP_Thd_Snd_ISR
00002e  2800              CMP      r0,#0                 ;96
;;;98         Int_Handler();
;;;99     }
000030  bfa8              IT       GE
000032  bd10              POPGE    {r4,pc}
000034  4817              LDR      r0,|L11.148|
000036  f7fffffe          BL       RMP_Print_String
00003a  6b60              LDR      r0,[r4,#0x34]  ; Count
00003c  f7fffffe          BL       RMP_Print_Int
000040  4815              LDR      r0,|L11.152|
000042  f7fffffe          BL       RMP_Print_String
                  |L11.70|
000046  e7fe              B        |L11.70|
                  |L11.72|
000048  f6446c20          MOV      r12,#0x4e20
00004c  4562              CMP      r2,r12
00004e  bfa2              ITTT     GE
000050  f04f20e0          MOVGE    r0,#0xe000e000
000054  f8c01180          STRGE    r1,[r0,#0x180]
000058  bd10              POPGE    {r4,pc}
00005a  6360              STR      r0,[r4,#0x34]  ; Count
00005c  6a48              LDR      r0,[r1,#0x24]
00005e  ea030040          AND      r0,r3,r0,LSL #1
000062  8020              STRH     r0,[r4,#0]
000064  2101              MOVS     r1,#1
000066  480d              LDR      r0,|L11.156|
000068  f7fffffe          BL       RMP_Sem_Post_ISR
00006c  2800              CMP      r0,#0
00006e  bfa8              IT       GE
000070  bd10              POPGE    {r4,pc}
000072  480b              LDR      r0,|L11.160|
000074  f7fffffe          BL       RMP_Print_String
000078  6b60              LDR      r0,[r4,#0x34]  ; Count
00007a  f7fffffe          BL       RMP_Print_Int
00007e  4809              LDR      r0,|L11.164|
000080  f7fffffe          BL       RMP_Print_String
                  |L11.132|
000084  e7fe              B        |L11.132|
;;;100    /* End Function:Int_Init *****************************************************/
                          ENDP

000086  0000              DCW      0x0000
                  |L11.136|
                          DCD      0x40000810
                  |L11.140|
                          DCD      ||.data||
                  |L11.144|
                          DCD      ||.bss||+0x88fc
                  |L11.148|
                          DCD      ||i.Int_Handler||+0x8c
                  |L11.152|
                          DCD      ||i.Int_Handler||+0xa8
                  |L11.156|
                          DCD      ||.bss||+0x8938
                  |L11.160|
                          DCD      ||i.Int_Handler||+0xb8
                  |L11.164|
                          DCD      ||i.Int_Handler||+0xd8

                          AREA ||i.Test_Mail_1||, CODE, READONLY, ALIGN=2

                  Test_Mail_1 PROC
;;;56     
;;;57     void Test_Mail_1(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;58     {
;;;59         static cnt_t Count;
;;;60         for(Count=0;Count<10000;Count++)
000004  4c0d              LDR      r4,|L12.60|
000006  2000              MOVS     r0,#0
;;;61         {
;;;62             /* Read counter here */
;;;63             Start=COUNTER_READ();
;;;64             RMP_Thd_Snd(&Thd_2, 1, RMP_MAX_SLICES);
000008  f8df8034          LDR      r8,|L12.64|
00000c  f04f4580          MOV      r5,#0x40000000        ;63
000010  f64f76ff          MOV      r6,#0xffff            ;63
000014  f2427710          MOV      r7,#0x2710            ;60
000018  6260              STR      r0,[r4,#0x24]         ;60  ; Count
                  |L12.26|
00001a  6a68              LDR      r0,[r5,#0x24]         ;63
00001c  ea060040          AND      r0,r6,r0,LSL #1       ;63
000020  8020              STRH     r0,[r4,#0]            ;63
000022  4642              MOV      r2,r8
000024  2101              MOVS     r1,#1
000026  4807              LDR      r0,|L12.68|
000028  f7fffffe          BL       RMP_Thd_Snd
00002c  6a60              LDR      r0,[r4,#0x24]         ;60  ; Count
00002e  1c40              ADDS     r0,r0,#1              ;60
000030  6260              STR      r0,[r4,#0x24]         ;60  ; Count
000032  42b8              CMP      r0,r7                 ;60
000034  dbf1              BLT      |L12.26|
;;;65         }
;;;66     }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;67     
                          ENDP

00003a  0000              DCW      0x0000
                  |L12.60|
                          DCD      ||.data||
                  |L12.64|
                          DCD      0x000186a0
                  |L12.68|
                          DCD      ||.bss||+0x88fc

                          AREA ||i.Test_Mail_2||, CODE, READONLY, ALIGN=2

                  Test_Mail_2 PROC
;;;107    
;;;108    void Test_Mail_2(void)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;109    {
;;;110        ptr_t Data;
;;;111        cnt_t Count;
;;;112        for(Count=0;Count<10000;Count++)
;;;113        {
;;;114            RMP_Thd_Rcv(&Data, RMP_MAX_SLICES);
000004  f8df9038          LDR      r9,|L13.64|
;;;115            /* Read counter here */
;;;116            End=COUNTER_READ();
000008  4c0e              LDR      r4,|L13.68|
00000a  2500              MOVS     r5,#0                 ;112
00000c  f04f4780          MOV      r7,#0x40000000
000010  f64f78ff          MOV      r8,#0xffff
000014  f2427610          MOV      r6,#0x2710            ;112
                  |L13.24|
000018  4649              MOV      r1,r9                 ;114
00001a  4668              MOV      r0,sp                 ;114
00001c  f7fffffe          BL       RMP_Thd_Rcv
000020  6a78              LDR      r0,[r7,#0x24]
000022  ea080040          AND      r0,r8,r0,LSL #1
000026  8060              STRH     r0,[r4,#2]
;;;117            Total+=(tim_t)(End-Start);
000028  8860              LDRH     r0,[r4,#2]  ; End
00002a  8821              LDRH     r1,[r4,#0]  ; Start
00002c  1a40              SUBS     r0,r0,r1
00002e  6861              LDR      r1,[r4,#4]  ; Total
000030  b280              UXTH     r0,r0
000032  4408              ADD      r0,r0,r1
000034  6060              STR      r0,[r4,#4]  ; Total
000036  1c6d              ADDS     r5,r5,#1
000038  42b5              CMP      r5,r6                 ;112
00003a  dbed              BLT      |L13.24|
;;;118        };
;;;119    }
00003c  e8bd83f8          POP      {r3-r9,pc}
;;;120    
                          ENDP

                  |L13.64|
                          DCD      0x000186a0
                  |L13.68|
                          DCD      ||.data||

                          AREA ||i.Test_Mail_ISR||, CODE, READONLY, ALIGN=2

                  Test_Mail_ISR PROC
;;;132    
;;;133    void Test_Mail_ISR(void)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;134    {
;;;135        ptr_t Data;
;;;136        static cnt_t Count;
;;;137        for(Count=0;Count<10000;Count++)
000004  4c10              LDR      r4,|L14.72|
000006  2000              MOVS     r0,#0
;;;138        {
;;;139            RMP_Thd_Rcv(&Data, RMP_MAX_SLICES);
000008  f8df8040          LDR      r8,|L14.76|
;;;140            /* Read counter here */
;;;141            End=COUNTER_READ();
00000c  f04f4580          MOV      r5,#0x40000000
000010  f64f76ff          MOV      r6,#0xffff
000014  f2427710          MOV      r7,#0x2710            ;137
000018  62a0              STR      r0,[r4,#0x28]         ;137  ; Count
                  |L14.26|
00001a  4641              MOV      r1,r8                 ;139
00001c  4668              MOV      r0,sp                 ;139
00001e  f7fffffe          BL       RMP_Thd_Rcv
000022  6a68              LDR      r0,[r5,#0x24]
000024  ea060040          AND      r0,r6,r0,LSL #1
000028  8060              STRH     r0,[r4,#2]
;;;142            Total+=(tim_t)(End-Start);
00002a  8860              LDRH     r0,[r4,#2]  ; End
00002c  8821              LDRH     r1,[r4,#0]  ; Start
00002e  1a40              SUBS     r0,r0,r1
000030  6861              LDR      r1,[r4,#4]  ; Total
000032  b280              UXTH     r0,r0
000034  4408              ADD      r0,r0,r1
000036  6060              STR      r0,[r4,#4]  ; Total
000038  6aa0              LDR      r0,[r4,#0x28]         ;137  ; Count
00003a  1c40              ADDS     r0,r0,#1              ;137
00003c  62a0              STR      r0,[r4,#0x28]         ;137  ; Count
00003e  42b8              CMP      r0,r7                 ;137
000040  dbeb              BLT      |L14.26|
;;;143        };
;;;144    }
000042  e8bd83f8          POP      {r3-r9,pc}
;;;145    
                          ENDP

000046  0000              DCW      0x0000
                  |L14.72|
                          DCD      ||.data||
                  |L14.76|
                          DCD      0x000186a0

                          AREA ||i.Test_Mem_Pool||, CODE, READONLY, ALIGN=2

                  Test_Mem_Pool PROC
;;;181    
;;;182    void Test_Mem_Pool(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;183    {
;;;184        static void* Mem[8];
;;;185        static u8 Alloc[8];
;;;186        static u8 Free[8];
;;;187        static u8 Size[8];
;;;188        static ptr_t Amount[8];
;;;189        cnt_t Count;
;;;190        cnt_t Test_Count;
;;;191        
;;;192        Amount[0]=TEST_MEM_POOL/32;
000004  4dac              LDR      r5,|L15.696|
000006  f44f7080          MOV      r0,#0x100
;;;193        Amount[1]=TEST_MEM_POOL/64+16;
;;;194        Amount[2]=TEST_MEM_POOL/4;
;;;195        Amount[3]=TEST_MEM_POOL/128+32;
;;;196        Amount[4]=TEST_MEM_POOL/16;
;;;197        Amount[5]=TEST_MEM_POOL/8+16;
;;;198        Amount[6]=TEST_MEM_POOL/128+64;
;;;199        Amount[7]=TEST_MEM_POOL/2-64;
;;;200        
;;;201        /* Initialize the pool */
;;;202        Total=0;
00000a  4eac              LDR      r6,|L15.700|
00000c  6028              STR      r0,[r5,#0]            ;193  ; Amount
00000e  2090              MOVS     r0,#0x90              ;193
000010  6068              STR      r0,[r5,#4]            ;194  ; Amount
000012  f44f6000          MOV      r0,#0x800             ;194
000016  60a8              STR      r0,[r5,#8]            ;195  ; Amount
000018  2060              MOVS     r0,#0x60              ;195
00001a  60e8              STR      r0,[r5,#0xc]          ;196  ; Amount
00001c  f44f7000          MOV      r0,#0x200             ;196
000020  6128              STR      r0,[r5,#0x10]         ;197  ; Amount
000022  f44f6082          MOV      r0,#0x410             ;197
000026  6168              STR      r0,[r5,#0x14]         ;198  ; Amount
000028  2080              MOVS     r0,#0x80              ;198
00002a  61a8              STR      r0,[r5,#0x18]         ;199  ; Amount
00002c  f44f607c          MOV      r0,#0xfc0             ;199
000030  61e8              STR      r0,[r5,#0x1c]  ; Amount
000032  2000              MOVS     r0,#0
000034  6070              STR      r0,[r6,#4]  ; Total
;;;203        RMP_Mem_Init(Pool, TEST_MEM_POOL*sizeof(ptr_t));
000036  f44f4100          MOV      r1,#0x8000
00003a  48a1              LDR      r0,|L15.704|
00003c  f7fffffe          BL       RMP_Mem_Init
;;;204        for(Test_Count=0;Test_Count<10000;Test_Count++)
000040  f04f0a00          MOV      r10,#0
;;;205        {
;;;206            /* Random sequence and number generation */
;;;207            for(Count=0;Count<8;Count++)
000044  f1060938          ADD      r9,r6,#0x38
000048  f1060740          ADD      r7,r6,#0x40
00004c  f1060848          ADD      r8,r6,#0x48
;;;208            {
;;;209                Alloc[Count]=Count;
;;;210                Free[Count]=Count;
;;;211                Size[Count]=Count;
;;;212            }
;;;213            
;;;214            for(Count=7;Count>0;Count--)
;;;215            {
;;;216                Swap(&Alloc[Count], &Alloc[Rand()%(Count+1)]);
;;;217                Swap(&Free[Count], &Free[Rand()%(Count+1)]);
;;;218                Swap(&Size[Count], &Size[Rand()%(Count+1)]);
;;;219            }
;;;220            
;;;221            Start=COUNTER_READ();
000050  f04f4b80          MOV      r11,#0x40000000
                  |L15.84|
000054  4b9b              LDR      r3,|L15.708|
000056  2000              MOVS     r0,#0                 ;207
000058  f1030208          ADD      r2,r3,#8              ;207
00005c  f1020108          ADD      r1,r2,#8              ;207
000060  f04f0c08          MOV      r12,#8                ;207
                  |L15.100|
000064  f8030b01          STRB     r0,[r3],#1            ;209
000068  f8020b01          STRB     r0,[r2],#1            ;210
00006c  f8010b01          STRB     r0,[r1],#1            ;211
000070  1c40              ADDS     r0,r0,#1              ;211
000072  f1bc0c01          SUBS     r12,r12,#1            ;211
000076  d1f5              BNE      |L15.100|
000078  6b31              LDR      r1,[r6,#0x30]         ;212  ; LFSR
00007a  2007              MOVS     r0,#7                 ;214
                  |L15.124|
00007c  f0110f01          TST      r1,#1                 ;214
000080  eb090300          ADD      r3,r9,r0              ;216
000084  ea4f0151          LSR      r1,r1,#1              ;216
000088  bf18              IT       NE                    ;216
00008a  f4814134          EORNE    r1,r1,#0xb400         ;216
00008e  1c42              ADDS     r2,r0,#1              ;216
000090  fbb1fcf2          UDIV     r12,r1,r2             ;216
000094  fb021c1c          MLS      r12,r2,r12,r1         ;216
000098  44cc              ADD      r12,r12,r9            ;216
00009a  781c              LDRB     r4,[r3,#0]            ;216
00009c  f89ce000          LDRB     lr,[r12,#0]           ;216
0000a0  f883e000          STRB     lr,[r3,#0]            ;216
0000a4  183b              ADDS     r3,r7,r0              ;217
0000a6  f0110f01          TST      r1,#1                 ;217
0000aa  f88c4000          STRB     r4,[r12,#0]           ;217
0000ae  ea4f0151          LSR      r1,r1,#1              ;217
0000b2  bf18              IT       NE                    ;217
0000b4  f4814134          EORNE    r1,r1,#0xb400         ;217
0000b8  fbb1fcf2          UDIV     r12,r1,r2             ;217
0000bc  fb021c1c          MLS      r12,r2,r12,r1         ;217
0000c0  44bc              ADD      r12,r12,r7            ;217
0000c2  781c              LDRB     r4,[r3,#0]            ;217
0000c4  f89ce000          LDRB     lr,[r12,#0]           ;217
0000c8  f883e000          STRB     lr,[r3,#0]            ;217
0000cc  f0110f01          TST      r1,#1                 ;217
0000d0  f88c4000          STRB     r4,[r12,#0]           ;217
0000d4  eb080300          ADD      r3,r8,r0              ;218
0000d8  ea4f0151          LSR      r1,r1,#1              ;218
0000dc  bf18              IT       NE                    ;218
0000de  f4814134          EORNE    r1,r1,#0xb400         ;218
0000e2  fbb1fcf2          UDIV     r12,r1,r2             ;218
0000e6  fb02121c          MLS      r2,r2,r12,r1          ;218
0000ea  4442              ADD      r2,r2,r8              ;218
0000ec  f893c000          LDRB     r12,[r3,#0]           ;218
0000f0  7814              LDRB     r4,[r2,#0]            ;218
0000f2  701c              STRB     r4,[r3,#0]            ;218
0000f4  1e40              SUBS     r0,r0,#1              ;218
0000f6  f882c000          STRB     r12,[r2,#0]           ;218
0000fa  2800              CMP      r0,#0                 ;218
0000fc  dcbe              BGT      |L15.124|
0000fe  6331              STR      r1,[r6,#0x30]  ; LFSR
000100  f8db1024          LDR      r1,[r11,#0x24]
000104  f64f70ff          MOV      r0,#0xffff
000108  ea000041          AND      r0,r0,r1,LSL #1
00010c  8030              STRH     r0,[r6,#0]
;;;222            /* Allocation tests */
;;;223            Mem[Alloc[0]]=RMP_Malloc(Pool, Amount[Size[0]]);
00010e  f8980000          LDRB     r0,[r8,#0]  ; Size
000112  f8551020          LDR      r1,[r5,r0,LSL #2]
000116  486a              LDR      r0,|L15.704|
000118  f7fffffe          BL       RMP_Malloc
00011c  f8991000          LDRB     r1,[r9,#0]  ; Alloc
000120  4c69              LDR      r4,|L15.712|
000122  f8440021          STR      r0,[r4,r1,LSL #2]
;;;224            Mem[Alloc[1]]=RMP_Malloc(Pool, Amount[Size[1]]);
000126  f8980001          LDRB     r0,[r8,#1]  ; Size
00012a  f8551020          LDR      r1,[r5,r0,LSL #2]
00012e  f5a44000          SUB      r0,r4,#0x8000
000132  f7fffffe          BL       RMP_Malloc
000136  f8991001          LDRB     r1,[r9,#1]  ; Alloc
00013a  f8440021          STR      r0,[r4,r1,LSL #2]
;;;225            Mem[Alloc[2]]=RMP_Malloc(Pool, Amount[Size[2]]);
00013e  f8980002          LDRB     r0,[r8,#2]  ; Size
000142  f8551020          LDR      r1,[r5,r0,LSL #2]
000146  f5a44000          SUB      r0,r4,#0x8000
00014a  f7fffffe          BL       RMP_Malloc
00014e  f8991002          LDRB     r1,[r9,#2]  ; Alloc
000152  f8440021          STR      r0,[r4,r1,LSL #2]
;;;226            Mem[Alloc[3]]=RMP_Malloc(Pool, Amount[Size[3]]);
000156  f8980003          LDRB     r0,[r8,#3]  ; Size
00015a  f8551020          LDR      r1,[r5,r0,LSL #2]
00015e  f5a44000          SUB      r0,r4,#0x8000
000162  f7fffffe          BL       RMP_Malloc
000166  f8991003          LDRB     r1,[r9,#3]  ; Alloc
00016a  f8440021          STR      r0,[r4,r1,LSL #2]
;;;227            Mem[Alloc[4]]=RMP_Malloc(Pool, Amount[Size[4]]);
00016e  f8980004          LDRB     r0,[r8,#4]  ; Size
000172  f8551020          LDR      r1,[r5,r0,LSL #2]
000176  f5a44000          SUB      r0,r4,#0x8000
00017a  f7fffffe          BL       RMP_Malloc
00017e  f8991004          LDRB     r1,[r9,#4]  ; Alloc
000182  f8440021          STR      r0,[r4,r1,LSL #2]
;;;228            Mem[Alloc[5]]=RMP_Malloc(Pool, Amount[Size[5]]);
000186  f8980005          LDRB     r0,[r8,#5]  ; Size
00018a  f8551020          LDR      r1,[r5,r0,LSL #2]
00018e  f5a44000          SUB      r0,r4,#0x8000
000192  f7fffffe          BL       RMP_Malloc
000196  f8991005          LDRB     r1,[r9,#5]  ; Alloc
00019a  f8440021          STR      r0,[r4,r1,LSL #2]
;;;229            Mem[Alloc[6]]=RMP_Malloc(Pool, Amount[Size[6]]);
00019e  f8980006          LDRB     r0,[r8,#6]  ; Size
0001a2  f8551020          LDR      r1,[r5,r0,LSL #2]
0001a6  f5a44000          SUB      r0,r4,#0x8000
0001aa  f7fffffe          BL       RMP_Malloc
0001ae  f8991006          LDRB     r1,[r9,#6]  ; Alloc
0001b2  f8440021          STR      r0,[r4,r1,LSL #2]
;;;230            Mem[Alloc[7]]=RMP_Malloc(Pool, Amount[Size[7]]);
0001b6  f8980007          LDRB     r0,[r8,#7]  ; Size
0001ba  f8551020          LDR      r1,[r5,r0,LSL #2]
0001be  f5a44000          SUB      r0,r4,#0x8000
0001c2  f7fffffe          BL       RMP_Malloc
0001c6  f8991007          LDRB     r1,[r9,#7]  ; Alloc
0001ca  f8440021          STR      r0,[r4,r1,LSL #2]
;;;231    
;;;232            /* Deallocation tests */
;;;233            RMP_Free(Pool,Mem[Free[0]]);
0001ce  7838              LDRB     r0,[r7,#0]  ; Free
0001d0  f8541020          LDR      r1,[r4,r0,LSL #2]
0001d4  f5a44000          SUB      r0,r4,#0x8000
0001d8  f7fffffe          BL       RMP_Free
;;;234            RMP_Free(Pool,Mem[Free[1]]);
0001dc  7878              LDRB     r0,[r7,#1]  ; Free
0001de  f8541020          LDR      r1,[r4,r0,LSL #2]
0001e2  f5a44000          SUB      r0,r4,#0x8000
0001e6  f7fffffe          BL       RMP_Free
;;;235            RMP_Free(Pool,Mem[Free[2]]);
0001ea  78b8              LDRB     r0,[r7,#2]  ; Free
0001ec  f8541020          LDR      r1,[r4,r0,LSL #2]
0001f0  f5a44000          SUB      r0,r4,#0x8000
0001f4  f7fffffe          BL       RMP_Free
;;;236            RMP_Free(Pool,Mem[Free[3]]);
0001f8  78f8              LDRB     r0,[r7,#3]  ; Free
0001fa  f8541020          LDR      r1,[r4,r0,LSL #2]
0001fe  f5a44000          SUB      r0,r4,#0x8000
000202  f7fffffe          BL       RMP_Free
;;;237            RMP_Free(Pool,Mem[Free[4]]);
000206  7938              LDRB     r0,[r7,#4]  ; Free
000208  f8541020          LDR      r1,[r4,r0,LSL #2]
00020c  f5a44000          SUB      r0,r4,#0x8000
000210  f7fffffe          BL       RMP_Free
;;;238            RMP_Free(Pool,Mem[Free[5]]);
000214  7978              LDRB     r0,[r7,#5]  ; Free
000216  f8541020          LDR      r1,[r4,r0,LSL #2]
00021a  f5a44000          SUB      r0,r4,#0x8000
00021e  f7fffffe          BL       RMP_Free
;;;239            RMP_Free(Pool,Mem[Free[6]]);
000222  79b8              LDRB     r0,[r7,#6]  ; Free
000224  f8541020          LDR      r1,[r4,r0,LSL #2]
000228  f5a44000          SUB      r0,r4,#0x8000
00022c  f7fffffe          BL       RMP_Free
;;;240            RMP_Free(Pool,Mem[Free[7]]);
000230  79f8              LDRB     r0,[r7,#7]  ; Free
000232  f8541020          LDR      r1,[r4,r0,LSL #2]
000236  f5a44000          SUB      r0,r4,#0x8000
00023a  f7fffffe          BL       RMP_Free
;;;241            End=COUNTER_READ();
00023e  f8db1024          LDR      r1,[r11,#0x24]
000242  f64f70ff          MOV      r0,#0xffff
000246  ea000041          AND      r0,r0,r1,LSL #1
00024a  8070              STRH     r0,[r6,#2]
;;;242            Total+=(tim_t)(End-Start);
00024c  8870              LDRH     r0,[r6,#2]  ; End
00024e  8831              LDRH     r1,[r6,#0]  ; Start
000250  1a40              SUBS     r0,r0,r1
000252  6871              LDR      r1,[r6,#4]  ; Total
000254  b280              UXTH     r0,r0
000256  4408              ADD      r0,r0,r1
000258  6070              STR      r0,[r6,#4]  ; Total
;;;243            
;;;244            /* This should always be successful because we deallocated everything else */
;;;245            Mem[0]=RMP_Malloc(Pool, (TEST_MEM_POOL>>7)*127);
00025a  f44f51fe          MOV      r1,#0x1fc0
00025e  f5a44000          SUB      r0,r4,#0x8000
000262  f7fffffe          BL       RMP_Malloc
000266  6020              STR      r0,[r4,#0]  ; Mem
000268  1e01              SUBS     r1,r0,#0
00026a  d01a              BEQ      |L15.674|
;;;246            if(Mem[0]==0)
;;;247            {
;;;248                RMP_PRINTK_S("Memory test failure: ");
;;;249                RMP_PRINTK_I(Test_Count);
;;;250                RMP_PRINTK_S(" runs.\r\n");
;;;251                while(1);
;;;252            }
;;;253            RMP_Free(Pool, Mem[0]); 
00026c  f5a44000          SUB      r0,r4,#0x8000
000270  f7fffffe          BL       RMP_Free
000274  f2427010          MOV      r0,#0x2710
000278  f10a0a01          ADD      r10,r10,#1
00027c  4582              CMP      r10,r0
00027e  f6ffaee9          BLT      |L15.84|
;;;254        }
;;;255        
;;;256        RMP_PRINTK_S("Memory: ");
000282  a012              ADR      r0,|L15.716|
000284  f7fffffe          BL       RMP_Print_String
;;;257        Memory_Time=Total/160000;
000288  6870              LDR      r0,[r6,#4]  ; Total
00028a  4913              LDR      r1,|L15.728|
00028c  fbb0f0f1          UDIV     r0,r0,r1
000290  6230              STR      r0,[r6,#0x20]  ; Memory_Time
;;;258        RMP_PRINTK_I(Memory_Time);
000292  6a30              LDR      r0,[r6,#0x20]  ; Memory_Time
000294  f7fffffe          BL       RMP_Print_Int
;;;259        RMP_PRINTK_S(" cycles.\r\n");
000298  e8bd5ff0          POP      {r4-r12,lr}
00029c  a00f              ADR      r0,|L15.732|
00029e  f7ffbffe          B.W      RMP_Print_String
                  |L15.674|
0002a2  a011              ADR      r0,|L15.744|
0002a4  f7fffffe          BL       RMP_Print_String
0002a8  4650              MOV      r0,r10                ;249
0002aa  f7fffffe          BL       RMP_Print_Int
0002ae  a014              ADR      r0,|L15.768|
0002b0  f7fffffe          BL       RMP_Print_String
                  |L15.692|
0002b4  e7fe              B        |L15.692|
;;;260    }
;;;261    #endif
                          ENDP

0002b6  0000              DCW      0x0000
                  |L15.696|
                          DCD      ||.bss||+0x80a0
                  |L15.700|
                          DCD      ||.data||
                  |L15.704|
                          DCD      ||.bss||+0x80
                  |L15.708|
                          DCD      ||.data||+0x38
                  |L15.712|
                          DCD      ||.bss||+0x8080
                  |L15.716|
0002cc  4d656d6f          DCB      "Memory: ",0
0002d0  72793a20
0002d4  00      
0002d5  00                DCB      0
0002d6  00                DCB      0
0002d7  00                DCB      0
                  |L15.728|
                          DCD      0x00027100
                  |L15.732|
0002dc  20637963          DCB      " cycles.\r\n",0
0002e0  6c65732e
0002e4  0d0a00  
0002e7  00                DCB      0
                  |L15.744|
0002e8  4d656d6f          DCB      "Memory test failure: ",0
0002ec  72792074
0002f0  65737420
0002f4  6661696c
0002f8  7572653a
0002fc  2000    
0002fe  00                DCB      0
0002ff  00                DCB      0
                  |L15.768|
000300  2072756e          DCB      " runs.\r\n",0
000304  732e0d0a
000308  00      
000309  00                DCB      0
00030a  00                DCB      0
00030b  00                DCB      0

                          AREA ||i.Test_Sem_1||, CODE, READONLY, ALIGN=2

                  Test_Sem_1 PROC
;;;67     
;;;68     void Test_Sem_1(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;69     {
;;;70         cnt_t Count;
;;;71         for(Count=0;Count<10000;Count++)
;;;72         {
;;;73             /* Read counter here */
;;;74             Start=COUNTER_READ();
000004  f8df802c          LDR      r8,|L16.52|
000008  2400              MOVS     r4,#0                 ;71
00000a  f04f4580          MOV      r5,#0x40000000
00000e  f64f77ff          MOV      r7,#0xffff
000012  f2427610          MOV      r6,#0x2710            ;71
                  |L16.22|
000016  6a68              LDR      r0,[r5,#0x24]
000018  ea070040          AND      r0,r7,r0,LSL #1
00001c  f8a80000          STRH     r0,[r8,#0]
;;;75             RMP_Sem_Post(&Sem_1, 1);
000020  2101              MOVS     r1,#1
000022  4805              LDR      r0,|L16.56|
000024  f7fffffe          BL       RMP_Sem_Post
000028  1c64              ADDS     r4,r4,#1
00002a  42b4              CMP      r4,r6                 ;71
00002c  dbf3              BLT      |L16.22|
;;;76         }
;;;77     }
00002e  e8bd81f0          POP      {r4-r8,pc}
;;;78     
                          ENDP

000032  0000              DCW      0x0000
                  |L16.52|
                          DCD      ||.data||
                  |L16.56|
                          DCD      ||.bss||+0x8938

                          AREA ||i.Test_Sem_2||, CODE, READONLY, ALIGN=2

                  Test_Sem_2 PROC
;;;120    
;;;121    void Test_Sem_2(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;122    {
;;;123        cnt_t Count;
;;;124        for(Count=0;Count<10000;Count++)
;;;125        {
;;;126            RMP_Sem_Pend(&Sem_1, RMP_MAX_SLICES);
000004  f8df9038          LDR      r9,|L17.64|
;;;127            /* Read counter here */
;;;128            End=COUNTER_READ();
000008  4c0e              LDR      r4,|L17.68|
00000a  2500              MOVS     r5,#0                 ;124
00000c  f04f4780          MOV      r7,#0x40000000
000010  f64f78ff          MOV      r8,#0xffff
000014  f2427610          MOV      r6,#0x2710            ;124
                  |L17.24|
000018  4649              MOV      r1,r9                 ;126
00001a  480b              LDR      r0,|L17.72|
00001c  f7fffffe          BL       RMP_Sem_Pend
000020  6a78              LDR      r0,[r7,#0x24]
000022  ea080040          AND      r0,r8,r0,LSL #1
000026  8060              STRH     r0,[r4,#2]
;;;129            Total+=(tim_t)(End-Start);
000028  8860              LDRH     r0,[r4,#2]  ; End
00002a  8821              LDRH     r1,[r4,#0]  ; Start
00002c  1a40              SUBS     r0,r0,r1
00002e  6861              LDR      r1,[r4,#4]  ; Total
000030  b280              UXTH     r0,r0
000032  4408              ADD      r0,r0,r1
000034  6060              STR      r0,[r4,#4]  ; Total
000036  1c6d              ADDS     r5,r5,#1
000038  42b5              CMP      r5,r6                 ;124
00003a  dbed              BLT      |L17.24|
;;;130        };
;;;131    }
00003c  e8bd87f0          POP      {r4-r10,pc}
;;;132    
                          ENDP

                  |L17.64|
                          DCD      0x000186a0
                  |L17.68|
                          DCD      ||.data||
                  |L17.72|
                          DCD      ||.bss||+0x8938

                          AREA ||i.Test_Sem_ISR||, CODE, READONLY, ALIGN=2

                  Test_Sem_ISR PROC
;;;145    
;;;146    void Test_Sem_ISR(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;147    {
;;;148        static cnt_t Count;
;;;149        for(Count=0;Count<10000;Count++)
000004  4c10              LDR      r4,|L18.72|
000006  2000              MOVS     r0,#0
;;;150        {
;;;151            RMP_Sem_Pend(&Sem_1, RMP_MAX_SLICES);
000008  f8df8040          LDR      r8,|L18.76|
;;;152            /* Read counter here */
;;;153            End=COUNTER_READ();
00000c  f04f4580          MOV      r5,#0x40000000
000010  f64f76ff          MOV      r6,#0xffff
000014  f2427710          MOV      r7,#0x2710            ;149
000018  62e0              STR      r0,[r4,#0x2c]         ;149  ; Count
                  |L18.26|
00001a  4641              MOV      r1,r8                 ;151
00001c  480c              LDR      r0,|L18.80|
00001e  f7fffffe          BL       RMP_Sem_Pend
000022  6a68              LDR      r0,[r5,#0x24]
000024  ea060040          AND      r0,r6,r0,LSL #1
000028  8060              STRH     r0,[r4,#2]
;;;154            Total+=(tim_t)(End-Start);
00002a  8860              LDRH     r0,[r4,#2]  ; End
00002c  8821              LDRH     r1,[r4,#0]  ; Start
00002e  1a40              SUBS     r0,r0,r1
000030  6861              LDR      r1,[r4,#4]  ; Total
000032  b280              UXTH     r0,r0
000034  4408              ADD      r0,r0,r1
000036  6060              STR      r0,[r4,#4]  ; Total
000038  6ae0              LDR      r0,[r4,#0x2c]         ;149  ; Count
00003a  1c40              ADDS     r0,r0,#1              ;149
00003c  62e0              STR      r0,[r4,#0x2c]         ;149  ; Count
00003e  42b8              CMP      r0,r7                 ;149
000040  dbeb              BLT      |L18.26|
;;;155        };
;;;156    }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;157    
                          ENDP

000046  0000              DCW      0x0000
                  |L18.72|
                          DCD      ||.data||
                  |L18.76|
                          DCD      0x000186a0
                  |L18.80|
                          DCD      ||.bss||+0x8938

                          AREA ||i.Test_Yield_1||, CODE, READONLY, ALIGN=2

                  Test_Yield_1 PROC
;;;45     ******************************************************************************/
;;;46     void Test_Yield_1(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;47     {
;;;48         cnt_t Count;
;;;49         for(Count=0;Count<10000;Count++)
;;;50         {
;;;51             /* Read counter here */
;;;52             Start=COUNTER_READ();
000004  f8df8028          LDR      r8,|L19.48|
000008  2400              MOVS     r4,#0                 ;49
00000a  f04f4580          MOV      r5,#0x40000000
00000e  f64f77ff          MOV      r7,#0xffff
000012  f2427610          MOV      r6,#0x2710            ;49
                  |L19.22|
000016  6a68              LDR      r0,[r5,#0x24]
000018  ea070040          AND      r0,r7,r0,LSL #1
00001c  f8a80000          STRH     r0,[r8,#0]
;;;53             RMP_Yield();
000020  f7fffffe          BL       RMP_Yield
000024  1c64              ADDS     r4,r4,#1
000026  42b4              CMP      r4,r6                 ;49
000028  dbf5              BLT      |L19.22|
;;;54         }
;;;55     }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;56     
                          ENDP

00002e  0000              DCW      0x0000
                  |L19.48|
                          DCD      ||.data||

                          AREA ||i.Test_Yield_2||, CODE, READONLY, ALIGN=2

                  Test_Yield_2 PROC
;;;95     ******************************************************************************/
;;;96     void Test_Yield_2(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;97     {
;;;98         cnt_t Count;
;;;99         for(Count=0;Count<10000;Count++)
000004  2500              MOVS     r5,#0
;;;100        {
;;;101            RMP_Yield();
;;;102            /* Read counter here */
;;;103            End=COUNTER_READ();
000006  f04f4780          MOV      r7,#0x40000000
00000a  f64f78ff          MOV      r8,#0xffff
00000e  4c0a              LDR      r4,|L20.56|
000010  f2427610          MOV      r6,#0x2710            ;99
                  |L20.20|
000014  f7fffffe          BL       RMP_Yield
000018  6a78              LDR      r0,[r7,#0x24]
00001a  ea080040          AND      r0,r8,r0,LSL #1
00001e  8060              STRH     r0,[r4,#2]
;;;104            Total+=(tim_t)(End-Start);
000020  8860              LDRH     r0,[r4,#2]  ; End
000022  8821              LDRH     r1,[r4,#0]  ; Start
000024  1a40              SUBS     r0,r0,r1
000026  6861              LDR      r1,[r4,#4]  ; Total
000028  b280              UXTH     r0,r0
00002a  4408              ADD      r0,r0,r1
00002c  6060              STR      r0,[r4,#4]  ; Total
00002e  1c6d              ADDS     r5,r5,#1
000030  42b5              CMP      r5,r6                 ;99
000032  dbef              BLT      |L20.20|
;;;105        };
;;;106    }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;107    
                          ENDP

                  |L20.56|
                          DCD      ||.data||

                          AREA ||i.Timer_Init||, CODE, READONLY, ALIGN=2

                  Timer_Init PROC
;;;42     ******************************************************************************/
;;;43     void Timer_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;44     {
;;;45         /* TIM2 clock = 1/2 CPU clock */
;;;46         TIM2_Handle.Instance=TIM2;
000002  4c0e              LDR      r4,|L21.60|
000004  f04f4080          MOV      r0,#0x40000000
;;;47         TIM2_Handle.Init.Prescaler=0;
000008  6020              STR      r0,[r4,#0]  ; TIM2_Handle
00000a  2000              MOVS     r0,#0
;;;48         TIM2_Handle.Init.CounterMode=TIM_COUNTERMODE_UP;
;;;49         TIM2_Handle.Init.Period=(unsigned int)(-1);
00000c  1e41              SUBS     r1,r0,#1
00000e  6060              STR      r0,[r4,#4]  ; TIM2_Handle
000010  e9c40102          STRD     r0,r1,[r4,#8]
;;;50         TIM2_Handle.Init.ClockDivision=TIM_CLOCKDIVISION_DIV1;
;;;51         HAL_TIM_Base_Init(&TIM2_Handle);
000014  6120              STR      r0,[r4,#0x10]  ; TIM2_Handle
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       HAL_TIM_Base_Init
;;;52         __HAL_RCC_TIM2_CLK_ENABLE();
00001c  4808              LDR      r0,|L21.64|
00001e  6801              LDR      r1,[r0,#0]
000020  f0410101          ORR      r1,r1,#1
000024  6001              STR      r1,[r0,#0]
000026  6800              LDR      r0,[r0,#0]
000028  f0000001          AND      r0,r0,#1
;;;53         __HAL_TIM_ENABLE(&TIM2_Handle);
00002c  9000              STR      r0,[sp,#0]
00002e  6820              LDR      r0,[r4,#0]  ; TIM2_Handle
000030  6801              LDR      r1,[r0,#0]
000032  f0410101          ORR      r1,r1,#1
000036  6001              STR      r1,[r0,#0]
;;;54     }
000038  bd38              POP      {r3-r5,pc}
;;;55     /* End Function:Timer_Init ***************************************************/
                          ENDP

00003a  0000              DCW      0x0000
                  |L21.60|
                          DCD      ||.bss||
                  |L21.64|
                          DCD      0x40023840

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  TIM2_Handle
                          %        64
                  TIM4_Handle
                          %        64
                  Pool
                          %        32768
                  Mem
                          %        32
                  Amount
                          %        32
                  Stack_1
                          %        1024
                  Stack_2
                          %        1024
                  Thd_1
                          %        60
                  Thd_2
                          %        60
                  Sem_1
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  Start
000000  0000              DCW      0x0000
                  End
000002  0000              DCW      0x0000
                  Total
                          DCD      0x00000000
                  Temp
                          DCD      0x00000000
                  Yield_Time
                          DCD      0x00000000
                  Mailbox_Time
                          DCD      0x00000000
                  Semaphore_Time
                          DCD      0x00000000
                  Mailbox_ISR_Time
                          DCD      0x00000000
                  Semaphore_ISR_Time
                          DCD      0x00000000
                  Memory_Time
                          DCD      0x00000000
                  Count
                          DCD      0x00000000
                  |symbol_number.68|
                          DCD      0x00000000
                  |symbol_number.69|
                          DCD      0x00000000
                  LFSR
                          DCD      0x0000ace1
                  |symbol_number.71|
                          DCD      0x00000000
                  Alloc
                          %        8
                  Free
                          %        8
                  Size
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\MProkaron\\Benchmark\\test.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_test_c_db099e62____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F4_V1.21.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_test_c_db099e62____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_test_c_db099e62____REVSH|
#line 402
|__asm___6_test_c_db099e62____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_test_c_db099e62____RRX|
#line 587
|__asm___6_test_c_db099e62____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
