; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f4xx_hal_rcc.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f4xx_hal_rcc.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\STM32F4xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F405RGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F405xx -DSTM32F405xx -DUSE_HAL_DRIVER -DHSE_VALUE=8000000 -DPLL_M=8 --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f4xx_hal_rcc.crf ..\..\..\M0P0_Library\STM32Cube_FW_F4_V1.21.0\Drivers\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_rcc.c]
                          THUMB

                          AREA ||i.HAL_RCC_CSSCallback||, CODE, READONLY, ALIGN=1

                  HAL_RCC_CSSCallback PROC
;;;1088     */
;;;1089   __weak void HAL_RCC_CSSCallback(void)
000000  4770              BX       lr
;;;1090   {
;;;1091     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1092               the HAL_RCC_CSSCallback could be implemented in the user file
;;;1093      */
;;;1094   }
;;;1095   
                          ENDP


                          AREA ||i.HAL_RCC_ClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_ClockConfig PROC
;;;580      */
;;;581    HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
000000  2800              CMP      r0,#0
;;;582    {
;;;583      uint32_t tickstart;
;;;584    
;;;585      /* Check Null pointer */
;;;586      if(RCC_ClkInitStruct == NULL)
;;;587      {
;;;588        return HAL_ERROR;
000002  bf04              ITT      EQ
000004  2001              MOVEQ    r0,#1
;;;589      }
;;;590    
;;;591      /* Check the parameters */
;;;592      assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
;;;593      assert_param(IS_FLASH_LATENCY(FLatency));
;;;594    
;;;595      /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
;;;596        must be correctly programmed according to the frequency of the CPU clock
;;;597        (HCLK) and the supply voltage of the device. */
;;;598    
;;;599      /* Increasing the number of wait states because of higher CPU frequency */
;;;600      if(FLatency > __HAL_FLASH_GET_LATENCY())
;;;601      {
;;;602        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;603        __HAL_FLASH_SET_LATENCY(FLatency);
;;;604    
;;;605        /* Check that the new number of wait states is taken into account to access the Flash
;;;606        memory by reading the FLASH_ACR register */
;;;607        if(__HAL_FLASH_GET_LATENCY() != FLatency)
;;;608        {
;;;609          return HAL_ERROR;
;;;610        }
;;;611      }
;;;612    
;;;613      /*-------------------------- HCLK Configuration --------------------------*/
;;;614      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;615      {
;;;616        /* Set the highest APBx dividers in order to ensure that we do not go through
;;;617           a non-spec phase whatever we decrease or increase HCLK. */
;;;618        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;619        {
;;;620          MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
;;;621        }
;;;622    
;;;623        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;624        {
;;;625          MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
;;;626        }
;;;627    
;;;628        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;629        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
;;;630      }
;;;631    
;;;632      /*------------------------- SYSCLK Configuration ---------------------------*/
;;;633      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;634      {
;;;635        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;636    
;;;637        /* HSE is selected as System Clock Source */
;;;638        if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;639        {
;;;640          /* Check the HSE ready flag */
;;;641          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;642          {
;;;643            return HAL_ERROR;
;;;644          }
;;;645        }
;;;646        /* PLL is selected as System Clock Source */
;;;647        else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
;;;648                (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
;;;649        {
;;;650          /* Check the PLL ready flag */
;;;651          if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;652          {
;;;653            return HAL_ERROR;
;;;654          }
;;;655        }
;;;656        /* HSI is selected as System Clock Source */
;;;657        else
;;;658        {
;;;659          /* Check the HSI ready flag */
;;;660          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;661          {
;;;662            return HAL_ERROR;
;;;663          }
;;;664        }
;;;665    
;;;666        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;667    
;;;668        /* Get Start Tick */
;;;669        tickstart = HAL_GetTick();
;;;670    
;;;671        while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
;;;672        {
;;;673          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;674          {
;;;675            return HAL_TIMEOUT;
;;;676          }
;;;677        }
;;;678      }
;;;679    
;;;680      /* Decreasing the number of wait states because of lower CPU frequency */
;;;681      if(FLatency < __HAL_FLASH_GET_LATENCY())
;;;682      {
;;;683         /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;684        __HAL_FLASH_SET_LATENCY(FLatency);
;;;685    
;;;686        /* Check that the new number of wait states is taken into account to access the Flash
;;;687        memory by reading the FLASH_ACR register */
;;;688        if(__HAL_FLASH_GET_LATENCY() != FLatency)
;;;689        {
;;;690          return HAL_ERROR;
;;;691        }
;;;692      }
;;;693    
;;;694      /*-------------------------- PCLK1 Configuration ---------------------------*/
;;;695      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;696      {
;;;697        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
;;;698        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
;;;699      }
;;;700    
;;;701      /*-------------------------- PCLK2 Configuration ---------------------------*/
;;;702      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;703      {
;;;704        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
;;;705        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
;;;706      }
;;;707    
;;;708      /* Update the SystemCoreClock global variable */
;;;709      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
;;;710    
;;;711      /* Configure the source of time base considering new system clocks settings */
;;;712      HAL_InitTick (TICK_INT_PRIORITY);
;;;713    
;;;714      return HAL_OK;
;;;715    }
000006  4770              BXEQ     lr
000008  e92d47f0          PUSH     {r4-r10,lr}           ;582
00000c  4e4d              LDR      r6,|L2.324|
00000e  4604              MOV      r4,r0                 ;582
000010  460f              MOV      r7,r1                 ;582
000012  6830              LDR      r0,[r6,#0]            ;600
000014  f00108ff          AND      r8,r1,#0xff           ;603
000018  f000000f          AND      r0,r0,#0xf            ;600
00001c  42b8              CMP      r0,r7                 ;600
00001e  d206              BCS      |L2.46|
000020  f8868000          STRB     r8,[r6,#0]            ;603
000024  6830              LDR      r0,[r6,#0]            ;607
000026  f000000f          AND      r0,r0,#0xf            ;607
00002a  42b8              CMP      r0,r7                 ;607
00002c  d161              BNE      |L2.242|
                  |L2.46|
00002e  6820              LDR      r0,[r4,#0]            ;614
000030  4d45              LDR      r5,|L2.328|
000032  f0100f02          TST      r0,#2                 ;614
000036  d014              BEQ      |L2.98|
000038  f0100f04          TST      r0,#4                 ;618
00003c  d003              BEQ      |L2.70|
00003e  6828              LDR      r0,[r5,#0]            ;620
000040  f44050e0          ORR      r0,r0,#0x1c00         ;620
000044  6028              STR      r0,[r5,#0]            ;620
                  |L2.70|
000046  7820              LDRB     r0,[r4,#0]            ;623
000048  f0100f08          TST      r0,#8                 ;623
00004c  d003              BEQ      |L2.86|
00004e  6828              LDR      r0,[r5,#0]            ;625
000050  f4404060          ORR      r0,r0,#0xe000         ;625
000054  6028              STR      r0,[r5,#0]            ;625
                  |L2.86|
000056  6828              LDR      r0,[r5,#0]            ;629
000058  68a1              LDR      r1,[r4,#8]            ;629
00005a  f02000f0          BIC      r0,r0,#0xf0           ;629
00005e  4308              ORRS     r0,r0,r1              ;629
000060  6028              STR      r0,[r5,#0]            ;629
                  |L2.98|
000062  7820              LDRB     r0,[r4,#0]            ;633
000064  f0100f01          TST      r0,#1                 ;633
000068  d037              BEQ      |L2.218|
00006a  6860              LDR      r0,[r4,#4]            ;638
00006c  4937              LDR      r1,|L2.332|
00006e  2801              CMP      r0,#1                 ;638
000070  d023              BEQ      |L2.186|
000072  2802              CMP      r0,#2                 ;647
000074  bf18              IT       NE                    ;648
000076  2803              CMPNE    r0,#3                 ;648
000078  6809              LDR      r1,[r1,#0]            ;660
00007a  d023              BEQ      |L2.196|
00007c  f0110f02          TST      r1,#2                 ;660
000080  d037              BEQ      |L2.242|
                  |L2.130|
000082  6829              LDR      r1,[r5,#0]            ;666
000084  f0210103          BIC      r1,r1,#3              ;666
000088  4308              ORRS     r0,r0,r1              ;666
00008a  6028              STR      r0,[r5,#0]            ;666
00008c  f7fffffe          BL       HAL_GetTick
000090  4681              MOV      r9,r0                 ;669
000092  6828              LDR      r0,[r5,#0]            ;671
000094  6861              LDR      r1,[r4,#4]            ;671
000096  f000000c          AND      r0,r0,#0xc            ;671
00009a  ebb00f81          CMP      r0,r1,LSL #2          ;671
00009e  bf18              IT       NE                    ;673
0000a0  f2413a88          MOVNE    r10,#0x1388           ;673
0000a4  d019              BEQ      |L2.218|
0000a6  bf00              NOP                            ;673
                  |L2.168|
0000a8  f7fffffe          BL       HAL_GetTick
0000ac  eba00009          SUB      r0,r0,r9              ;673
0000b0  4550              CMP      r0,r10                ;673
0000b2  d90b              BLS      |L2.204|
0000b4  2003              MOVS     r0,#3                 ;675
0000b6  e8bd87f0          POP      {r4-r10,pc}
                  |L2.186|
0000ba  6809              LDR      r1,[r1,#0]            ;641
0000bc  f4113f00          TST      r1,#0x20000           ;641
0000c0  d1df              BNE      |L2.130|
0000c2  e016              B        |L2.242|
                  |L2.196|
0000c4  f0117f00          TST      r1,#0x2000000         ;651
0000c8  d1db              BNE      |L2.130|
0000ca  e012              B        |L2.242|
                  |L2.204|
0000cc  6828              LDR      r0,[r5,#0]            ;671
0000ce  6861              LDR      r1,[r4,#4]            ;671
0000d0  f000000c          AND      r0,r0,#0xc            ;671
0000d4  ebb00f81          CMP      r0,r1,LSL #2          ;671
0000d8  d1e6              BNE      |L2.168|
                  |L2.218|
0000da  6830              LDR      r0,[r6,#0]            ;681
0000dc  f000000f          AND      r0,r0,#0xf            ;681
0000e0  42b8              CMP      r0,r7                 ;681
0000e2  d909              BLS      |L2.248|
0000e4  f8868000          STRB     r8,[r6,#0]            ;684
0000e8  6830              LDR      r0,[r6,#0]            ;688
0000ea  f000000f          AND      r0,r0,#0xf            ;688
0000ee  42b8              CMP      r0,r7                 ;688
0000f0  d002              BEQ      |L2.248|
                  |L2.242|
0000f2  2001              MOVS     r0,#1                 ;690
0000f4  e8bd87f0          POP      {r4-r10,pc}
                  |L2.248|
0000f8  7820              LDRB     r0,[r4,#0]            ;695
0000fa  f0100f04          TST      r0,#4                 ;695
0000fe  d005              BEQ      |L2.268|
000100  6828              LDR      r0,[r5,#0]            ;698
000102  68e1              LDR      r1,[r4,#0xc]          ;698
000104  f42050e0          BIC      r0,r0,#0x1c00         ;698
000108  4308              ORRS     r0,r0,r1              ;698
00010a  6028              STR      r0,[r5,#0]            ;698
                  |L2.268|
00010c  7820              LDRB     r0,[r4,#0]            ;702
00010e  f0100f08          TST      r0,#8                 ;702
000112  d006              BEQ      |L2.290|
000114  6828              LDR      r0,[r5,#0]            ;705
000116  6921              LDR      r1,[r4,#0x10]         ;705
000118  f4204060          BIC      r0,r0,#0xe000         ;705
00011c  ea4000c1          ORR      r0,r0,r1,LSL #3       ;705
000120  6028              STR      r0,[r5,#0]            ;705
                  |L2.290|
000122  f7fffffe          BL       HAL_RCC_GetSysClockFreq
000126  6829              LDR      r1,[r5,#0]            ;709
000128  4a09              LDR      r2,|L2.336|
00012a  f3c11103          UBFX     r1,r1,#4,#4           ;709
00012e  5c51              LDRB     r1,[r2,r1]            ;709
000130  40c8              LSRS     r0,r0,r1              ;709
000132  4908              LDR      r1,|L2.340|
000134  6008              STR      r0,[r1,#0]            ;712  ; SystemCoreClock
000136  200f              MOVS     r0,#0xf               ;712
000138  f7fffffe          BL       HAL_InitTick
00013c  2000              MOVS     r0,#0                 ;714
00013e  e8bd87f0          POP      {r4-r10,pc}
;;;716    
                          ENDP

000142  0000              DCW      0x0000
                  |L2.324|
                          DCD      0x40023c00
                  |L2.328|
                          DCD      0x40023808
                  |L2.332|
                          DCD      0x40023800
                  |L2.336|
                          DCD      AHBPrescTable
                  |L2.340|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_RCC_DeInit PROC
;;;217      */
;;;218    __weak HAL_StatusTypeDef HAL_RCC_DeInit(void)
000000  2000              MOVS     r0,#0
;;;219    {
;;;220      return HAL_OK;
;;;221    }
000002  4770              BX       lr
;;;222    
                          ENDP


                          AREA ||i.HAL_RCC_DisableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DisableCSS PROC
;;;839      */
;;;840    void HAL_RCC_DisableCSS(void)
000000  4901              LDR      r1,|L4.8|
;;;841    {
;;;842      *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  64c8              STR      r0,[r1,#0x4c]
;;;843    }
000006  4770              BX       lr
;;;844    
                          ENDP

                  |L4.8|
                          DCD      0x42470000

                          AREA ||i.HAL_RCC_EnableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_EnableCSS PROC
;;;830      */
;;;831    void HAL_RCC_EnableCSS(void)
000000  4901              LDR      r1,|L5.8|
;;;832    {
;;;833      *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  64c8              STR      r0,[r1,#0x4c]
;;;834    }
000006  4770              BX       lr
;;;835    
                          ENDP

                  |L5.8|
                          DCD      0x42470000

                          AREA ||i.HAL_RCC_GetClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetClockConfig PROC
;;;1045     */
;;;1046   void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
000000  220f              MOVS     r2,#0xf
;;;1047   {
;;;1048     /* Set all possible values for the Clock type parameter --------------------*/
;;;1049     RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
;;;1050   
;;;1051     /* Get the SYSCLK configuration --------------------------------------------*/
;;;1052     RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
000002  6002              STR      r2,[r0,#0]
000004  4a0c              LDR      r2,|L6.56|
000006  6813              LDR      r3,[r2,#0]
000008  f0030303          AND      r3,r3,#3
;;;1053   
;;;1054     /* Get the HCLK configuration ----------------------------------------------*/
;;;1055     RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
00000c  6043              STR      r3,[r0,#4]
00000e  6813              LDR      r3,[r2,#0]
000010  f00303f0          AND      r3,r3,#0xf0
;;;1056   
;;;1057     /* Get the APB1 configuration ----------------------------------------------*/
;;;1058     RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
000014  6083              STR      r3,[r0,#8]
000016  6813              LDR      r3,[r2,#0]
000018  f40353e0          AND      r3,r3,#0x1c00
;;;1059   
;;;1060     /* Get the APB2 configuration ----------------------------------------------*/
;;;1061     RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
00001c  60c3              STR      r3,[r0,#0xc]
00001e  6812              LDR      r2,[r2,#0]
;;;1062   
;;;1063     /* Get the Flash Wait State (Latency) configuration ------------------------*/
;;;1064     *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
;;;1065   }
000020  f44f53e0          MOV      r3,#0x1c00
000024  ea0302d2          AND      r2,r3,r2,LSR #3
000028  6102              STR      r2,[r0,#0x10]         ;1064
00002a  4804              LDR      r0,|L6.60|
00002c  6800              LDR      r0,[r0,#0]            ;1064
00002e  f000000f          AND      r0,r0,#0xf            ;1064
000032  6008              STR      r0,[r1,#0]            ;1064
000034  4770              BX       lr
;;;1066   
                          ENDP

000036  0000              DCW      0x0000
                  |L6.56|
                          DCD      0x40023808
                  |L6.60|
                          DCD      0x40023c00

                          AREA ||i.HAL_RCC_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetHCLKFreq PROC
;;;930      */
;;;931    uint32_t HAL_RCC_GetHCLKFreq(void)
000000  4801              LDR      r0,|L7.8|
;;;932    {
;;;933      return SystemCoreClock;
000002  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;934    }
000004  4770              BX       lr
;;;935    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_GetOscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetOscConfig PROC
;;;966      */
;;;967    __weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b410              PUSH     {r4}
;;;968    {
;;;969      /* Set all possible values for the Oscillator type parameter ---------------*/
;;;970      RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
;;;971    
;;;972      /* Get the HSE configuration -----------------------------------------------*/
;;;973      if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
000002  4b31              LDR      r3,|L8.200|
000004  210f              MOVS     r1,#0xf               ;970
000006  6001              STR      r1,[r0,#0]
000008  6819              LDR      r1,[r3,#0]
00000a  f4112f80          TST      r1,#0x40000
00000e  f04f0100          MOV      r1,#0
;;;974      {
;;;975        RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
000012  bf18              IT       NE
000014  f44f22a0          MOVNE    r2,#0x50000
000018  d044              BEQ      |L8.164|
                  |L8.26|
;;;976      }
;;;977      else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
;;;978      {
;;;979        RCC_OscInitStruct->HSEState = RCC_HSE_ON;
00001a  6042              STR      r2,[r0,#4]
                  |L8.28|
;;;980      }
;;;981      else
;;;982      {
;;;983        RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
;;;984      }
;;;985    
;;;986      /* Get the HSI configuration -----------------------------------------------*/
;;;987      if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
00001c  681a              LDR      r2,[r3,#0]
00001e  f0120f01          TST      r2,#1
;;;988      {
;;;989        RCC_OscInitStruct->HSIState = RCC_HSI_ON;
000022  f04f0201          MOV      r2,#1
000026  bf14              ITE      NE
000028  60c2              STRNE    r2,[r0,#0xc]
;;;990      }
;;;991      else
;;;992      {
;;;993        RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
00002a  60c1              STREQ    r1,[r0,#0xc]
;;;994      }
;;;995    
;;;996      RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
00002c  f8d3c000          LDR      r12,[r3,#0]
000030  f3cc0cc4          UBFX     r12,r12,#3,#5
;;;997    
;;;998      /* Get the LSE configuration -----------------------------------------------*/
;;;999      if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
000034  f8c0c010          STR      r12,[r0,#0x10]
000038  f8dfc090          LDR      r12,|L8.204|
00003c  f8dc4000          LDR      r4,[r12,#0]
000040  f0140f04          TST      r4,#4
;;;1000     {
;;;1001       RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
000044  bf1c              ITT      NE
000046  f04f0c05          MOVNE    r12,#5
00004a  f8c0c008          STRNE    r12,[r0,#8]
00004e  d032              BEQ      |L8.182|
                  |L8.80|
;;;1002     }
;;;1003     else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
;;;1004     {
;;;1005       RCC_OscInitStruct->LSEState = RCC_LSE_ON;
;;;1006     }
;;;1007     else
;;;1008     {
;;;1009       RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
;;;1010     }
;;;1011   
;;;1012     /* Get the LSI configuration -----------------------------------------------*/
;;;1013     if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
000050  f8dfc07c          LDR      r12,|L8.208|
000054  f8dcc000          LDR      r12,[r12,#0]
000058  f01c0f01          TST      r12,#1
;;;1014     {
;;;1015       RCC_OscInitStruct->LSIState = RCC_LSI_ON;
00005c  bf14              ITE      NE
00005e  6142              STRNE    r2,[r0,#0x14]
;;;1016     }
;;;1017     else
;;;1018     {
;;;1019       RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
000060  6141              STREQ    r1,[r0,#0x14]
;;;1020     }
;;;1021   
;;;1022     /* Get the PLL configuration -----------------------------------------------*/
;;;1023     if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
000062  6819              LDR      r1,[r3,#0]
000064  f0117f80          TST      r1,#0x1000000
;;;1024     {
;;;1025       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
000068  bf1a              ITTE     NE
00006a  2102              MOVNE    r1,#2
00006c  6181              STRNE    r1,[r0,#0x18]
;;;1026     }
;;;1027     else
;;;1028     {
;;;1029       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
00006e  6182              STREQ    r2,[r0,#0x18]
;;;1030     }
;;;1031     RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
000070  4918              LDR      r1,|L8.212|
000072  680a              LDR      r2,[r1,#0]
000074  f4020280          AND      r2,r2,#0x400000
;;;1032     RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
000078  61c2              STR      r2,[r0,#0x1c]
00007a  680a              LDR      r2,[r1,#0]
00007c  f002023f          AND      r2,r2,#0x3f
;;;1033     RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
000080  6202              STR      r2,[r0,#0x20]
000082  680a              LDR      r2,[r1,#0]
000084  f3c21288          UBFX     r2,r2,#6,#9
;;;1034     RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
000088  6242              STR      r2,[r0,#0x24]
00008a  680a              LDR      r2,[r1,#0]
00008c  f4023240          AND      r2,r2,#0x30000
000090  f5023280          ADD      r2,r2,#0x10000
000094  0bd2              LSRS     r2,r2,#15
;;;1035     RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
000096  6282              STR      r2,[r0,#0x28]
000098  6809              LDR      r1,[r1,#0]
00009a  f3c16103          UBFX     r1,r1,#24,#4
00009e  62c1              STR      r1,[r0,#0x2c]         ;1013
;;;1036   }
0000a0  bc10              POP      {r4}
0000a2  4770              BX       lr
                  |L8.164|
0000a4  681a              LDR      r2,[r3,#0]            ;977
0000a6  f4123f80          TST      r2,#0x10000           ;977
0000aa  bf14              ITE      NE                    ;979
0000ac  f44f3280          MOVNE    r2,#0x10000           ;979
0000b0  6041              STREQ    r1,[r0,#4]            ;983
0000b2  d1b2              BNE      |L8.26|
0000b4  e7b2              B        |L8.28|
                  |L8.182|
0000b6  f8dcc000          LDR      r12,[r12,#0]          ;1003
0000ba  f01c0f01          TST      r12,#1                ;1003
0000be  bf14              ITE      NE                    ;1005
0000c0  6082              STRNE    r2,[r0,#8]            ;1005
0000c2  6081              STREQ    r1,[r0,#8]            ;1009
0000c4  e7c4              B        |L8.80|
;;;1037   
                          ENDP

0000c6  0000              DCW      0x0000
                  |L8.200|
                          DCD      0x40023800
                  |L8.204|
                          DCD      0x40023870
                  |L8.208|
                          DCD      0x40023874
                  |L8.212|
                          DCD      0x40023804

                          AREA ||i.HAL_RCC_GetPCLK1Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK1Freq PROC
;;;941      */
;;;942    uint32_t HAL_RCC_GetPCLK1Freq(void)
000000  4804              LDR      r0,|L9.20|
;;;943    {
;;;944      /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
;;;945      return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
000002  4905              LDR      r1,|L9.24|
000004  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000006  6809              LDR      r1,[r1,#0]
000008  4a04              LDR      r2,|L9.28|
00000a  f3c12182          UBFX     r1,r1,#10,#3
00000e  5c51              LDRB     r1,[r2,r1]
000010  40c8              LSRS     r0,r0,r1
;;;946    }
000012  4770              BX       lr
;;;947    
                          ENDP

                  |L9.20|
                          DCD      SystemCoreClock
                  |L9.24|
                          DCD      0x40023808
                  |L9.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetPCLK2Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK2Freq PROC
;;;953      */
;;;954    uint32_t HAL_RCC_GetPCLK2Freq(void)
000000  4804              LDR      r0,|L10.20|
;;;955    {
;;;956      /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
;;;957      return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
000002  4905              LDR      r1,|L10.24|
000004  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000006  6809              LDR      r1,[r1,#0]
000008  4a04              LDR      r2,|L10.28|
00000a  f3c13142          UBFX     r1,r1,#13,#3
00000e  5c51              LDRB     r1,[r2,r1]
000010  40c8              LSRS     r0,r0,r1
;;;958    }
000012  4770              BX       lr
;;;959    
                          ENDP

                  |L10.20|
                          DCD      SystemCoreClock
                  |L10.24|
                          DCD      0x40023808
                  |L10.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetSysClockFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetSysClockFreq PROC
;;;874      */
;;;875    __weak uint32_t HAL_RCC_GetSysClockFreq(void)
000000  4818              LDR      r0,|L11.100|
;;;876    {
;;;877      uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
;;;878      uint32_t sysclockfreq = 0U;
;;;879    
;;;880      /* Get SYSCLK source -------------------------------------------------------*/
;;;881      switch (RCC->CFGR & RCC_CFGR_SWS)
000002  6800              LDR      r0,[r0,#0]
000004  f010020c          ANDS     r2,r0,#0xc
;;;882      {
;;;883        case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
;;;884        {
;;;885          sysclockfreq = HSI_VALUE;
000008  4817              LDR      r0,|L11.104|
;;;886           break;
;;;887        }
;;;888        case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
;;;889        {
;;;890          sysclockfreq = HSE_VALUE;
;;;891          break;
;;;892        }
;;;893        case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
;;;894        {
;;;895          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
;;;896          SYSCLK = PLL_VCO / PLLP */
;;;897          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
;;;898          if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
;;;899          {
;;;900            /* HSE used as PLL clock source */
;;;901            pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
;;;902          }
;;;903          else
;;;904          {
;;;905            /* HSI used as PLL clock source */
;;;906            pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
;;;907          }
;;;908          pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
;;;909    
;;;910          sysclockfreq = pllvco/pllp;
;;;911          break;
;;;912        }
;;;913        default:
;;;914        {
;;;915          sysclockfreq = HSI_VALUE;
;;;916          break;
;;;917        }
;;;918      }
;;;919      return sysclockfreq;
;;;920    }
00000a  bf08              IT       EQ
00000c  4770              BXEQ     lr
00000e  4917              LDR      r1,|L11.108|
000010  2a04              CMP      r2,#4                 ;881
000012  bf04              ITT      EQ                    ;890
000014  4608              MOVEQ    r0,r1                 ;890
000016  4770              BXEQ     lr
000018  2a08              CMP      r2,#8                 ;881
00001a  bf18              IT       NE
00001c  4770              BXNE     lr
00001e  b510              PUSH     {r4,lr}               ;876
000020  4c13              LDR      r4,|L11.112|
000022  6822              LDR      r2,[r4,#0]            ;897
000024  6823              LDR      r3,[r4,#0]            ;898
000026  f002023f          AND      r2,r2,#0x3f           ;897
00002a  f4130f80          TST      r3,#0x400000          ;898
00002e  d008              BEQ      |L11.66|
000030  6820              LDR      r0,[r4,#0]            ;901
000032  2300              MOVS     r3,#0                 ;901
000034  f3c01088          UBFX     r0,r0,#6,#9           ;901
000038  fba00101          UMULL    r0,r1,r0,r1           ;901
00003c  f7fffffe          BL       __aeabi_uldivmod
000040  e007              B        |L11.82|
                  |L11.66|
000042  6821              LDR      r1,[r4,#0]            ;906
000044  2300              MOVS     r3,#0                 ;906
000046  f3c11188          UBFX     r1,r1,#6,#9           ;906
00004a  fba10100          UMULL    r0,r1,r1,r0           ;906
00004e  f7fffffe          BL       __aeabi_uldivmod
                  |L11.82|
000052  6821              LDR      r1,[r4,#0]            ;908
000054  f3c14101          UBFX     r1,r1,#16,#2          ;908
000058  1c49              ADDS     r1,r1,#1              ;908
00005a  0049              LSLS     r1,r1,#1              ;908
00005c  fbb0f0f1          UDIV     r0,r0,r1              ;910
000060  bd10              POP      {r4,pc}
;;;921    
                          ENDP

000062  0000              DCW      0x0000
                  |L11.100|
                          DCD      0x40023808
                  |L11.104|
                          DCD      0x00f42400
                  |L11.108|
                          DCD      0x007a1200
                  |L11.112|
                          DCD      0x40023804

                          AREA ||i.HAL_RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_MCOConfig PROC
;;;764      */
;;;765    void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
000000  b570              PUSH     {r4-r6,lr}
;;;766    {
000002  4615              MOV      r5,r2
000004  460e              MOV      r6,r1
;;;767      GPIO_InitTypeDef GPIO_InitStruct;
;;;768      /* Check the parameters */
;;;769      assert_param(IS_RCC_MCO(RCC_MCOx));
;;;770      assert_param(IS_RCC_MCODIV(RCC_MCODiv));
;;;771      /* RCC_MCO1 */
;;;772      if(RCC_MCOx == RCC_MCO1)
;;;773      {
;;;774        assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
;;;775    
;;;776        /* MCO1 Clock Enable */
;;;777        __MCO1_CLK_ENABLE();
000006  4b1f              LDR      r3,|L12.132|
;;;778    
;;;779        /* Configure the MCO1 pin in alternate function mode */
;;;780        GPIO_InitStruct.Pin = MCO1_PIN;
;;;781        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
000008  2102              MOVS     r1,#2
;;;782        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
00000a  2203              MOVS     r2,#3
00000c  2800              CMP      r0,#0                 ;772
;;;783        GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;784        GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
;;;785        HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
;;;786    
;;;787        /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
;;;788        MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
00000e  4c1e              LDR      r4,|L12.136|
;;;789    
;;;790       /* This RCC MCO1 enable feature is available only on STM32F410xx devices */
;;;791    #if defined(RCC_CFGR_MCO1EN)
;;;792        __HAL_RCC_MCO1_ENABLE();
;;;793    #endif /* RCC_CFGR_MCO1EN */
;;;794      }
;;;795    #if defined(RCC_CFGR_MCO2)
;;;796      else
;;;797      {
;;;798        assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
;;;799    
;;;800        /* MCO2 Clock Enable */
;;;801        __MCO2_CLK_ENABLE();
000010  6818              LDR      r0,[r3,#0]
000012  b086              SUB      sp,sp,#0x18           ;766
000014  f04f0c00          MOV      r12,#0                ;766
000018  d019              BEQ      |L12.78|
00001a  f0400004          ORR      r0,r0,#4
00001e  6018              STR      r0,[r3,#0]
000020  6818              LDR      r0,[r3,#0]
000022  f0000004          AND      r0,r0,#4
;;;802    
;;;803        /* Configure the MCO2 pin in alternate function mode */
;;;804        GPIO_InitStruct.Pin = MCO2_PIN;
000026  9005              STR      r0,[sp,#0x14]
000028  0208              LSLS     r0,r1,#8
00002a  9000              STR      r0,[sp,#0]
00002c  e9cd1c01          STRD     r1,r12,[sp,#4]
;;;805        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
;;;806        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
;;;807        GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;808        GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
;;;809        HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
000030  e9cd2c03          STRD     r2,r12,[sp,#0xc]
000034  4669              MOV      r1,sp
000036  4815              LDR      r0,|L12.140|
000038  f7fffffe          BL       HAL_GPIO_Init
;;;810    
;;;811        /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
;;;812        MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
00003c  6820              LDR      r0,[r4,#0]
00003e  ea4601c5          ORR      r1,r6,r5,LSL #3
000042  f0204078          BIC      r0,r0,#0xf8000000
000046  4308              ORRS     r0,r0,r1
000048  6020              STR      r0,[r4,#0]
;;;813    
;;;814       /* This RCC MCO2 enable feature is available only on STM32F410Rx devices */
;;;815    #if defined(RCC_CFGR_MCO2EN)
;;;816        __HAL_RCC_MCO2_ENABLE();
;;;817    #endif /* RCC_CFGR_MCO2EN */
;;;818      }
;;;819    #endif /* RCC_CFGR_MCO2 */
;;;820    }
00004a  b006              ADD      sp,sp,#0x18
00004c  bd70              POP      {r4-r6,pc}
                  |L12.78|
00004e  f0400001          ORR      r0,r0,#1              ;777
000052  6018              STR      r0,[r3,#0]            ;777
000054  6818              LDR      r0,[r3,#0]            ;777
000056  f0000001          AND      r0,r0,#1              ;777
00005a  9005              STR      r0,[sp,#0x14]         ;780
00005c  f44f7080          MOV      r0,#0x100             ;780
000060  9000              STR      r0,[sp,#0]            ;780
000062  e9cd1c01          STRD     r1,r12,[sp,#4]        ;780
000066  e9cd2c03          STRD     r2,r12,[sp,#0xc]      ;785
00006a  4669              MOV      r1,sp                 ;785
00006c  4808              LDR      r0,|L12.144|
00006e  f7fffffe          BL       HAL_GPIO_Init
000072  6820              LDR      r0,[r4,#0]            ;788
000074  ea460105          ORR      r1,r6,r5              ;788
000078  f02060ec          BIC      r0,r0,#0x7600000      ;788
00007c  4308              ORRS     r0,r0,r1              ;788
00007e  6020              STR      r0,[r4,#0]            ;788
000080  b006              ADD      sp,sp,#0x18
000082  bd70              POP      {r4-r6,pc}
;;;821    
                          ENDP

                  |L12.132|
                          DCD      0x40023830
                  |L12.136|
                          DCD      0x40023808
                  |L12.140|
                          DCD      0x40020800
                  |L12.144|
                          DCD      0x40020000

                          AREA ||i.HAL_RCC_NMI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RCC_NMI_IRQHandler PROC
;;;1071     */
;;;1072   void HAL_RCC_NMI_IRQHandler(void)
000000  4806              LDR      r0,|L13.28|
;;;1073   {
;;;1074     /* Check RCC CSSF flag  */
;;;1075     if(__HAL_RCC_GET_IT(RCC_IT_CSS))
000002  6800              LDR      r0,[r0,#0]
000004  f0100f80          TST      r0,#0x80
;;;1076     {
;;;1077       /* RCC Clock Security System interrupt user callback */
;;;1078       HAL_RCC_CSSCallback();
;;;1079   
;;;1080       /* Clear RCC CSS pending bit */
;;;1081       __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
;;;1082     }
;;;1083   }
000008  bf08              IT       EQ
00000a  4770              BXEQ     lr
00000c  b510              PUSH     {r4,lr}               ;1073
00000e  f7fffffe          BL       HAL_RCC_CSSCallback
000012  4903              LDR      r1,|L13.32|
000014  2080              MOVS     r0,#0x80              ;1081
000016  7008              STRB     r0,[r1,#0]            ;1081
000018  bd10              POP      {r4,pc}
;;;1084   
                          ENDP

00001a  0000              DCW      0x0000
                  |L13.28|
                          DCD      0x4002380c
                  |L13.32|
                          DCD      0x4002380e

                          AREA ||i.HAL_RCC_OscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_OscConfig PROC
;;;236      */
;;;237    __weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  2800              CMP      r0,#0
;;;238    {
;;;239      uint32_t tickstart;
;;;240    
;;;241      /* Check Null pointer */
;;;242      if(RCC_OscInitStruct == NULL)
;;;243      {
;;;244        return HAL_ERROR;
000002  bf04              ITT      EQ
000004  2001              MOVEQ    r0,#1
;;;245      }
;;;246    
;;;247      /* Check the parameters */
;;;248      assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;249      /*------------------------------- HSE Configuration ------------------------*/
;;;250      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
;;;251      {
;;;252        /* Check the parameters */
;;;253        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;254        /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
;;;255        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
;;;256          ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
;;;257        {
;;;258          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
;;;259          {
;;;260            return HAL_ERROR;
;;;261          }
;;;262        }
;;;263        else
;;;264        {
;;;265          /* Set the new HSE configuration ---------------------------------------*/
;;;266          __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
;;;267    
;;;268          /* Check the HSE State */
;;;269          if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
;;;270          {
;;;271            /* Get Start Tick */
;;;272            tickstart = HAL_GetTick();
;;;273    
;;;274            /* Wait till HSE is ready */
;;;275            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;276            {
;;;277              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;278              {
;;;279                return HAL_TIMEOUT;
;;;280              }
;;;281            }
;;;282          }
;;;283          else
;;;284          {
;;;285            /* Get Start Tick */
;;;286            tickstart = HAL_GetTick();
;;;287    
;;;288            /* Wait till HSE is bypassed or disabled */
;;;289            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;290            {
;;;291              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;292              {
;;;293                return HAL_TIMEOUT;
;;;294              }
;;;295            }
;;;296          }
;;;297        }
;;;298      }
;;;299      /*----------------------------- HSI Configuration --------------------------*/
;;;300      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
;;;301      {
;;;302        /* Check the parameters */
;;;303        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;304        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;305    
;;;306        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
;;;307        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
;;;308          ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
;;;309        {
;;;310          /* When HSI is used as system clock it will not disabled */
;;;311          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;312          {
;;;313            return HAL_ERROR;
;;;314          }
;;;315          /* Otherwise, just the calibration is allowed */
;;;316          else
;;;317          {
;;;318            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;319            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;320          }
;;;321        }
;;;322        else
;;;323        {
;;;324          /* Check the HSI State */
;;;325          if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
;;;326          {
;;;327            /* Enable the Internal High Speed oscillator (HSI). */
;;;328            __HAL_RCC_HSI_ENABLE();
;;;329    
;;;330            /* Get Start Tick*/
;;;331            tickstart = HAL_GetTick();
;;;332    
;;;333            /* Wait till HSI is ready */
;;;334            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;335            {
;;;336              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;337              {
;;;338                return HAL_TIMEOUT;
;;;339              }
;;;340            }
;;;341    
;;;342            /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
;;;343            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;344          }
;;;345          else
;;;346          {
;;;347            /* Disable the Internal High Speed oscillator (HSI). */
;;;348            __HAL_RCC_HSI_DISABLE();
;;;349    
;;;350            /* Get Start Tick*/
;;;351            tickstart = HAL_GetTick();
;;;352    
;;;353            /* Wait till HSI is ready */
;;;354            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
;;;355            {
;;;356              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;357              {
;;;358                return HAL_TIMEOUT;
;;;359              }
;;;360            }
;;;361          }
;;;362        }
;;;363      }
;;;364      /*------------------------------ LSI Configuration -------------------------*/
;;;365      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;366      {
;;;367        /* Check the parameters */
;;;368        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;369    
;;;370        /* Check the LSI State */
;;;371        if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
;;;372        {
;;;373          /* Enable the Internal Low Speed oscillator (LSI). */
;;;374          __HAL_RCC_LSI_ENABLE();
;;;375    
;;;376          /* Get Start Tick*/
;;;377          tickstart = HAL_GetTick();
;;;378    
;;;379          /* Wait till LSI is ready */
;;;380          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;381          {
;;;382            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;383            {
;;;384              return HAL_TIMEOUT;
;;;385            }
;;;386          }
;;;387        }
;;;388        else
;;;389        {
;;;390          /* Disable the Internal Low Speed oscillator (LSI). */
;;;391          __HAL_RCC_LSI_DISABLE();
;;;392    
;;;393          /* Get Start Tick */
;;;394          tickstart = HAL_GetTick();
;;;395    
;;;396          /* Wait till LSI is ready */
;;;397          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;398          {
;;;399            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;400            {
;;;401              return HAL_TIMEOUT;
;;;402            }
;;;403          }
;;;404        }
;;;405      }
;;;406      /*------------------------------ LSE Configuration -------------------------*/
;;;407      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;408      {
;;;409        FlagStatus       pwrclkchanged = RESET;
;;;410    
;;;411        /* Check the parameters */
;;;412        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;413    
;;;414        /* Update LSE configuration in Backup Domain control register    */
;;;415        /* Requires to enable write access to Backup Domain of necessary */
;;;416        if(__HAL_RCC_PWR_IS_CLK_DISABLED())
;;;417        {
;;;418          __HAL_RCC_PWR_CLK_ENABLE();
;;;419          pwrclkchanged = SET;
;;;420        }
;;;421    
;;;422        if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;423        {
;;;424          /* Enable write access to Backup domain */
;;;425          SET_BIT(PWR->CR, PWR_CR_DBP);
;;;426    
;;;427          /* Wait for Backup domain Write protection disable */
;;;428          tickstart = HAL_GetTick();
;;;429    
;;;430          while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;431          {
;;;432            if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
;;;433            {
;;;434              return HAL_TIMEOUT;
;;;435            }
;;;436          }
;;;437        }
;;;438    
;;;439        /* Set the new LSE configuration -----------------------------------------*/
;;;440        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;441        /* Check the LSE State */
;;;442        if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
;;;443        {
;;;444          /* Get Start Tick*/
;;;445          tickstart = HAL_GetTick();
;;;446    
;;;447          /* Wait till LSE is ready */
;;;448          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;449          {
;;;450            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;451            {
;;;452              return HAL_TIMEOUT;
;;;453            }
;;;454          }
;;;455        }
;;;456        else
;;;457        {
;;;458          /* Get Start Tick */
;;;459          tickstart = HAL_GetTick();
;;;460    
;;;461          /* Wait till LSE is ready */
;;;462          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;463          {
;;;464            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;465            {
;;;466              return HAL_TIMEOUT;
;;;467            }
;;;468          }
;;;469        }
;;;470    
;;;471        /* Restore clock configuration if changed */
;;;472        if(pwrclkchanged == SET)
;;;473        {
;;;474          __HAL_RCC_PWR_CLK_DISABLE();
;;;475        }
;;;476      }
;;;477      /*-------------------------------- PLL Configuration -----------------------*/
;;;478      /* Check the parameters */
;;;479      assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;480      if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;481      {
;;;482        /* Check if the PLL is used as system clock or not */
;;;483        if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
;;;484        {
;;;485          if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;486          {
;;;487            /* Check the parameters */
;;;488            assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;489            assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
;;;490            assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
;;;491            assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
;;;492            assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
;;;493    
;;;494            /* Disable the main PLL. */
;;;495            __HAL_RCC_PLL_DISABLE();
;;;496    
;;;497            /* Get Start Tick */
;;;498            tickstart = HAL_GetTick();
;;;499    
;;;500            /* Wait till PLL is ready */
;;;501            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;502            {
;;;503              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;504              {
;;;505                return HAL_TIMEOUT;
;;;506              }
;;;507            }
;;;508    
;;;509            /* Configure the main PLL clock source, multiplication and division factors. */
;;;510            WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
;;;511                                     RCC_OscInitStruct->PLL.PLLM                                                 | \
;;;512                                     (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
;;;513                                     (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
;;;514                                     (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
;;;515            /* Enable the main PLL. */
;;;516            __HAL_RCC_PLL_ENABLE();
;;;517    
;;;518            /* Get Start Tick */
;;;519            tickstart = HAL_GetTick();
;;;520    
;;;521            /* Wait till PLL is ready */
;;;522            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;523            {
;;;524              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;525              {
;;;526                return HAL_TIMEOUT;
;;;527              }
;;;528            }
;;;529          }
;;;530          else
;;;531          {
;;;532            /* Disable the main PLL. */
;;;533            __HAL_RCC_PLL_DISABLE();
;;;534    
;;;535            /* Get Start Tick */
;;;536            tickstart = HAL_GetTick();
;;;537    
;;;538            /* Wait till PLL is ready */
;;;539            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;540            {
;;;541              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;542              {
;;;543                return HAL_TIMEOUT;
;;;544              }
;;;545            }
;;;546          }
;;;547        }
;;;548        else
;;;549        {
;;;550          return HAL_ERROR;
;;;551        }
;;;552      }
;;;553      return HAL_OK;
;;;554    }
000006  4770              BXEQ     lr
000008  e92d4ff8          PUSH     {r3-r11,lr}           ;238
00000c  4604              MOV      r4,r0                 ;238
00000e  7800              LDRB     r0,[r0,#0]            ;250
000010  4dd9              LDR      r5,|L14.888|
000012  f0100f01          TST      r0,#1                 ;250
000016  d057              BEQ      |L14.200|
000018  48d8              LDR      r0,|L14.892|
00001a  6801              LDR      r1,[r0,#0]            ;255
00001c  f001010c          AND      r1,r1,#0xc            ;255
000020  2904              CMP      r1,#4                 ;255
000022  d009              BEQ      |L14.56|
000024  6800              LDR      r0,[r0,#0]            ;256
000026  f000000c          AND      r0,r0,#0xc            ;256
00002a  2808              CMP      r0,#8                 ;256
00002c  d10d              BNE      |L14.74|
00002e  1d28              ADDS     r0,r5,#4              ;256
000030  6800              LDR      r0,[r0,#0]            ;256
000032  f4100f80          TST      r0,#0x400000          ;256
000036  d008              BEQ      |L14.74|
                  |L14.56|
000038  6828              LDR      r0,[r5,#0]            ;258
00003a  f4103f00          TST      r0,#0x20000           ;258
00003e  d043              BEQ      |L14.200|
000040  6860              LDR      r0,[r4,#4]            ;258
000042  2800              CMP      r0,#0                 ;258
000044  f0008195          BEQ.W    |L14.882|
000048  e03e              B        |L14.200|
                  |L14.74|
00004a  6860              LDR      r0,[r4,#4]            ;266
00004c  f5b03f80          CMP      r0,#0x10000           ;266
000050  d019              BEQ      |L14.134|
000052  f5b02fa0          CMP      r0,#0x50000           ;266
000056  6828              LDR      r0,[r5,#0]            ;266
000058  bf0c              ITE      EQ                    ;266
00005a  f4402080          ORREQ    r0,r0,#0x40000        ;266
00005e  f4203080          BICNE    r0,r0,#0x10000        ;266
000062  6028              STR      r0,[r5,#0]            ;266
000064  6828              LDR      r0,[r5,#0]            ;266
000066  bf0c              ITE      EQ                    ;266
000068  f4403080          ORREQ    r0,r0,#0x10000        ;266
00006c  f4202080          BICNE    r0,r0,#0x40000        ;266
000070  6028              STR      r0,[r5,#0]            ;266
                  |L14.114|
000072  6860              LDR      r0,[r4,#4]            ;269
000074  b1b8              CBZ      r0,|L14.166|
000076  f7fffffe          BL       HAL_GetTick
00007a  4606              MOV      r6,r0                 ;272
00007c  6828              LDR      r0,[r5,#0]            ;275
00007e  f4103f00          TST      r0,#0x20000           ;275
000082  d005              BEQ      |L14.144|
000084  e020              B        |L14.200|
                  |L14.134|
000086  6828              LDR      r0,[r5,#0]            ;266
000088  f4403080          ORR      r0,r0,#0x10000        ;266
00008c  6028              STR      r0,[r5,#0]            ;266
00008e  e7f0              B        |L14.114|
                  |L14.144|
000090  f7fffffe          BL       HAL_GetTick
000094  1b80              SUBS     r0,r0,r6              ;277
000096  2864              CMP      r0,#0x64              ;277
000098  f2008129          BHI.W    |L14.750|
00009c  6828              LDR      r0,[r5,#0]            ;275
00009e  f4103f00          TST      r0,#0x20000           ;275
0000a2  d0f5              BEQ      |L14.144|
0000a4  e010              B        |L14.200|
                  |L14.166|
0000a6  f7fffffe          BL       HAL_GetTick
0000aa  4606              MOV      r6,r0                 ;286
0000ac  6828              LDR      r0,[r5,#0]            ;289
0000ae  f4103f00          TST      r0,#0x20000           ;289
0000b2  d009              BEQ      |L14.200|
                  |L14.180|
0000b4  f7fffffe          BL       HAL_GetTick
0000b8  1b80              SUBS     r0,r0,r6              ;291
0000ba  2864              CMP      r0,#0x64              ;291
0000bc  f2008117          BHI.W    |L14.750|
0000c0  6828              LDR      r0,[r5,#0]            ;289
0000c2  f4103f00          TST      r0,#0x20000           ;289
0000c6  d1f5              BNE      |L14.180|
                  |L14.200|
0000c8  7820              LDRB     r0,[r4,#0]            ;300
0000ca  4fad              LDR      r7,|L14.896|
0000cc  f0100f02          TST      r0,#2                 ;300
0000d0  f04f0800          MOV      r8,#0                 ;300
0000d4  d047              BEQ      |L14.358|
0000d6  48a9              LDR      r0,|L14.892|
0000d8  6801              LDR      r1,[r0,#0]            ;307
0000da  f0110f0c          TST      r1,#0xc               ;307
0000de  d015              BEQ      |L14.268|
0000e0  6800              LDR      r0,[r0,#0]            ;308
0000e2  f000000c          AND      r0,r0,#0xc            ;308
0000e6  2808              CMP      r0,#8                 ;308
0000e8  d104              BNE      |L14.244|
0000ea  48a6              LDR      r0,|L14.900|
0000ec  6800              LDR      r0,[r0,#0]            ;308
0000ee  f4100f80          TST      r0,#0x400000          ;308
0000f2  d00b              BEQ      |L14.268|
                  |L14.244|
0000f4  68e0              LDR      r0,[r4,#0xc]          ;325
0000f6  b318              CBZ      r0,|L14.320|
0000f8  2001              MOVS     r0,#1                 ;328
0000fa  6038              STR      r0,[r7,#0]            ;328
0000fc  f7fffffe          BL       HAL_GetTick
000100  4606              MOV      r6,r0                 ;331
000102  6828              LDR      r0,[r5,#0]            ;334
000104  f0100f02          TST      r0,#2                 ;334
000108  d009              BEQ      |L14.286|
00010a  e011              B        |L14.304|
                  |L14.268|
00010c  6828              LDR      r0,[r5,#0]            ;311
00010e  f0100f02          TST      r0,#2                 ;311
000112  bf1c              ITT      NE                    ;311
000114  68e0              LDRNE    r0,[r4,#0xc]          ;311
000116  2801              CMPNE    r0,#1                 ;311
000118  d00a              BEQ      |L14.304|
00011a  f000b92a          B.W      |L14.882|
                  |L14.286|
00011e  f7fffffe          BL       HAL_GetTick
000122  1b80              SUBS     r0,r0,r6              ;336
000124  2802              CMP      r0,#2                 ;336
000126  d87d              BHI      |L14.548|
000128  6828              LDR      r0,[r5,#0]            ;334
00012a  f0100f02          TST      r0,#2                 ;334
00012e  d0f6              BEQ      |L14.286|
                  |L14.304|
000130  6828              LDR      r0,[r5,#0]            ;343
000132  6921              LDR      r1,[r4,#0x10]         ;343
000134  f02000f8          BIC      r0,r0,#0xf8           ;343
000138  ea4000c1          ORR      r0,r0,r1,LSL #3       ;343
00013c  6028              STR      r0,[r5,#0]            ;343
00013e  e012              B        |L14.358|
                  |L14.320|
000140  f8c78000          STR      r8,[r7,#0]            ;348
000144  f7fffffe          BL       HAL_GetTick
000148  4606              MOV      r6,r0                 ;351
00014a  6828              LDR      r0,[r5,#0]            ;354
00014c  f0100f02          TST      r0,#2                 ;354
000150  d009              BEQ      |L14.358|
000152  bf00              NOP                            ;356
                  |L14.340|
000154  f7fffffe          BL       HAL_GetTick
000158  1b80              SUBS     r0,r0,r6              ;356
00015a  2802              CMP      r0,#2                 ;356
00015c  d862              BHI      |L14.548|
00015e  6828              LDR      r0,[r5,#0]            ;354
000160  f0100f02          TST      r0,#2                 ;354
000164  d1f6              BNE      |L14.340|
                  |L14.358|
000166  7820              LDRB     r0,[r4,#0]            ;365
000168  f0100f08          TST      r0,#8                 ;365
00016c  d02a              BEQ      |L14.452|
00016e  4886              LDR      r0,|L14.904|
000170  4e86              LDR      r6,|L14.908|
000172  6961              LDR      r1,[r4,#0x14]         ;371
000174  b199              CBZ      r1,|L14.414|
000176  2101              MOVS     r1,#1                 ;374
000178  6001              STR      r1,[r0,#0]            ;374
00017a  f7fffffe          BL       HAL_GetTick
00017e  4681              MOV      r9,r0                 ;377
000180  6830              LDR      r0,[r6,#0]            ;380
000182  f0100f02          TST      r0,#2                 ;380
000186  d11d              BNE      |L14.452|
                  |L14.392|
000188  f7fffffe          BL       HAL_GetTick
00018c  eba00009          SUB      r0,r0,r9              ;382
000190  2802              CMP      r0,#2                 ;382
000192  d847              BHI      |L14.548|
000194  6830              LDR      r0,[r6,#0]            ;380
000196  f0100f02          TST      r0,#2                 ;380
00019a  d0f5              BEQ      |L14.392|
00019c  e012              B        |L14.452|
                  |L14.414|
00019e  f8c08000          STR      r8,[r0,#0]            ;391
0001a2  f7fffffe          BL       HAL_GetTick
0001a6  4681              MOV      r9,r0                 ;394
0001a8  6830              LDR      r0,[r6,#0]            ;397
0001aa  f0100f02          TST      r0,#2                 ;397
0001ae  d009              BEQ      |L14.452|
                  |L14.432|
0001b0  f7fffffe          BL       HAL_GetTick
0001b4  eba00009          SUB      r0,r0,r9              ;399
0001b8  2802              CMP      r0,#2                 ;399
0001ba  d833              BHI      |L14.548|
0001bc  6830              LDR      r0,[r6,#0]            ;397
0001be  f0100f02          TST      r0,#2                 ;397
0001c2  d1f5              BNE      |L14.432|
                  |L14.452|
0001c4  7820              LDRB     r0,[r4,#0]            ;407
0001c6  f0100f04          TST      r0,#4                 ;407
0001ca  d077              BEQ      |L14.700|
0001cc  4870              LDR      r0,|L14.912|
0001ce  f04f0b00          MOV      r11,#0                ;409
0001d2  6800              LDR      r0,[r0,#0]            ;416
0001d4  f0105f80          TST      r0,#0x10000000        ;416
0001d8  d10a              BNE      |L14.496|
0001da  486d              LDR      r0,|L14.912|
0001dc  6801              LDR      r1,[r0,#0]            ;418
0001de  f0415180          ORR      r1,r1,#0x10000000     ;418
0001e2  6001              STR      r1,[r0,#0]            ;418
0001e4  6800              LDR      r0,[r0,#0]            ;418
0001e6  f04f0b01          MOV      r11,#1                ;419
0001ea  f0005080          AND      r0,r0,#0x10000000     ;418
0001ee  9000              STR      r0,[sp,#0]            ;419
                  |L14.496|
0001f0  4e68              LDR      r6,|L14.916|
0001f2  6830              LDR      r0,[r6,#0]            ;422
0001f4  f4107f80          TST      r0,#0x100             ;422
0001f8  d116              BNE      |L14.552|
0001fa  6830              LDR      r0,[r6,#0]            ;425
0001fc  f4407080          ORR      r0,r0,#0x100          ;425
000200  6030              STR      r0,[r6,#0]            ;425
000202  f7fffffe          BL       HAL_GetTick
000206  4681              MOV      r9,r0                 ;428
000208  6830              LDR      r0,[r6,#0]            ;430
00020a  f4107f80          TST      r0,#0x100             ;430
00020e  d10b              BNE      |L14.552|
                  |L14.528|
000210  f7fffffe          BL       HAL_GetTick
000214  eba00009          SUB      r0,r0,r9              ;432
000218  2802              CMP      r0,#2                 ;432
00021a  d868              BHI      |L14.750|
00021c  6830              LDR      r0,[r6,#0]            ;430
00021e  f4107f80          TST      r0,#0x100             ;430
000222  e000              B        |L14.550|
                  |L14.548|
000224  e063              B        |L14.750|
                  |L14.550|
000226  d0f3              BEQ      |L14.528|
                  |L14.552|
000228  68a0              LDR      r0,[r4,#8]            ;440
00022a  4e5b              LDR      r6,|L14.920|
00022c  2801              CMP      r0,#1                 ;440
00022e  d01b              BEQ      |L14.616|
000230  2805              CMP      r0,#5                 ;440
000232  6830              LDR      r0,[r6,#0]            ;440
000234  bf0c              ITE      EQ                    ;440
000236  f0400004          ORREQ    r0,r0,#4              ;440
00023a  f0200001          BICNE    r0,r0,#1              ;440
00023e  6030              STR      r0,[r6,#0]            ;440
000240  6830              LDR      r0,[r6,#0]            ;440
000242  bf0c              ITE      EQ                    ;440
000244  f0400001          ORREQ    r0,r0,#1              ;440
000248  f0200004          BICNE    r0,r0,#4              ;440
00024c  f8c60000          STR.W    r0,[r6,#0]            ;440
                  |L14.592|
000250  68a0              LDR      r0,[r4,#8]            ;442
000252  f2413a88          MOV      r10,#0x1388           ;450
000256  b1b8              CBZ      r0,|L14.648|
000258  f7fffffe          BL       HAL_GetTick
00025c  4681              MOV      r9,r0                 ;445
00025e  6830              LDR      r0,[r6,#0]            ;448
000260  f0100f02          TST      r0,#2                 ;448
000264  d005              BEQ      |L14.626|
000266  e021              B        |L14.684|
                  |L14.616|
000268  6830              LDR      r0,[r6,#0]            ;440
00026a  f0400001          ORR      r0,r0,#1              ;440
00026e  6030              STR      r0,[r6,#0]            ;440
000270  e7ee              B        |L14.592|
                  |L14.626|
000272  f7fffffe          BL       HAL_GetTick
000276  eba00009          SUB      r0,r0,r9              ;450
00027a  4550              CMP      r0,r10                ;450
00027c  d837              BHI      |L14.750|
00027e  6830              LDR      r0,[r6,#0]            ;448
000280  f0100f02          TST      r0,#2                 ;448
000284  d0f5              BEQ      |L14.626|
000286  e011              B        |L14.684|
                  |L14.648|
000288  f7fffffe          BL       HAL_GetTick
00028c  4681              MOV      r9,r0                 ;459
00028e  6830              LDR      r0,[r6,#0]            ;462
000290  f0100f02          TST      r0,#2                 ;462
000294  d00a              BEQ      |L14.684|
000296  bf00              NOP                            ;464
                  |L14.664|
000298  f7fffffe          BL       HAL_GetTick
00029c  eba00009          SUB      r0,r0,r9              ;464
0002a0  4550              CMP      r0,r10                ;464
0002a2  d824              BHI      |L14.750|
0002a4  6830              LDR      r0,[r6,#0]            ;462
0002a6  f0100f02          TST      r0,#2                 ;462
0002aa  d1f5              BNE      |L14.664|
                  |L14.684|
0002ac  f1bb0f00          CMP      r11,#0                ;472
0002b0  d004              BEQ      |L14.700|
0002b2  4837              LDR      r0,|L14.912|
0002b4  6801              LDR      r1,[r0,#0]            ;474
0002b6  f0215180          BIC      r1,r1,#0x10000000     ;474
0002ba  6001              STR      r1,[r0,#0]            ;474
                  |L14.700|
0002bc  69a0              LDR      r0,[r4,#0x18]         ;480
0002be  b3e8              CBZ      r0,|L14.828|
0002c0  492e              LDR      r1,|L14.892|
0002c2  6809              LDR      r1,[r1,#0]            ;483
0002c4  f001010c          AND      r1,r1,#0xc            ;483
0002c8  2908              CMP      r1,#8                 ;483
0002ca  d052              BEQ      |L14.882|
0002cc  2802              CMP      r0,#2                 ;485
0002ce  f8c78060          STR      r8,[r7,#0x60]         ;533
0002d2  d00f              BEQ      |L14.756|
0002d4  f7fffffe          BL       HAL_GetTick
0002d8  4604              MOV      r4,r0                 ;536
0002da  6828              LDR      r0,[r5,#0]            ;539
0002dc  f0107f00          TST      r0,#0x2000000         ;539
0002e0  d044              BEQ      |L14.876|
0002e2  bf00              NOP                            ;541
                  |L14.740|
0002e4  f7fffffe          BL       HAL_GetTick
0002e8  1b00              SUBS     r0,r0,r4              ;541
0002ea  2802              CMP      r0,#2                 ;541
0002ec  d93a              BLS      |L14.868|
                  |L14.750|
0002ee  2003              MOVS     r0,#3                 ;543
0002f0  e8bd8ff8          POP      {r3-r11,pc}
                  |L14.756|
0002f4  f7fffffe          BL       HAL_GetTick
0002f8  4606              MOV      r6,r0                 ;498
0002fa  6828              LDR      r0,[r5,#0]            ;501
0002fc  f0107f00          TST      r0,#0x2000000         ;501
000300  d009              BEQ      |L14.790|
000302  bf00              NOP                            ;503
                  |L14.772|
000304  f7fffffe          BL       HAL_GetTick
000308  1b80              SUBS     r0,r0,r6              ;503
00030a  2802              CMP      r0,#2                 ;503
00030c  d8ef              BHI      |L14.750|
00030e  6828              LDR      r0,[r5,#0]            ;501
000310  f0107f00          TST      r0,#0x2000000         ;501
000314  d1f6              BNE      |L14.772|
                  |L14.790|
000316  e9d40107          LDRD     r0,r1,[r4,#0x1c]      ;501
00031a  4308              ORRS     r0,r0,r1              ;510
00031c  6aa1              LDR      r1,[r4,#0x28]         ;510
00031e  4a1f              LDR      r2,|L14.924|
000320  0849              LSRS     r1,r1,#1              ;510
000322  eb024101          ADD      r1,r2,r1,LSL #16      ;510
000326  6a62              LDR      r2,[r4,#0x24]         ;510
000328  ea411182          ORR      r1,r1,r2,LSL #6       ;510
00032c  4308              ORRS     r0,r0,r1              ;510
00032e  f894102c          LDRB     r1,[r4,#0x2c]         ;510
000332  ea406101          ORR      r1,r0,r1,LSL #24      ;510
000336  4813              LDR      r0,|L14.900|
000338  6001              STR      r1,[r0,#0]            ;510
00033a  e000              B        |L14.830|
                  |L14.828|
00033c  e016              B        |L14.876|
                  |L14.830|
00033e  2001              MOVS     r0,#1                 ;516
000340  6638              STR      r0,[r7,#0x60]         ;516
000342  f7fffffe          BL       HAL_GetTick
000346  4604              MOV      r4,r0                 ;519
000348  6828              LDR      r0,[r5,#0]            ;522
00034a  f0107f00          TST      r0,#0x2000000         ;522
00034e  d10d              BNE      |L14.876|
                  |L14.848|
000350  f7fffffe          BL       HAL_GetTick
000354  1b00              SUBS     r0,r0,r4              ;524
000356  2802              CMP      r0,#2                 ;524
000358  d8c9              BHI      |L14.750|
00035a  6828              LDR      r0,[r5,#0]            ;522
00035c  f0107f00          TST      r0,#0x2000000         ;522
000360  d0f6              BEQ      |L14.848|
000362  e003              B        |L14.876|
                  |L14.868|
000364  6828              LDR      r0,[r5,#0]            ;539
000366  f0107f00          TST      r0,#0x2000000         ;539
00036a  d1bb              BNE      |L14.740|
                  |L14.876|
00036c  2000              MOVS     r0,#0                 ;553
00036e  e8bd8ff8          POP      {r3-r11,pc}
                  |L14.882|
000372  2001              MOVS     r0,#1                 ;550
000374  e8bd8ff8          POP      {r3-r11,pc}
;;;555    
                          ENDP

                  |L14.888|
                          DCD      0x40023800
                  |L14.892|
                          DCD      0x40023808
                  |L14.896|
                          DCD      0x42470000
                  |L14.900|
                          DCD      0x40023804
                  |L14.904|
                          DCD      0x42470e80
                  |L14.908|
                          DCD      0x40023874
                  |L14.912|
                          DCD      0x40023840
                  |L14.916|
                          DCD      0x40007000
                  |L14.920|
                          DCD      0x40023870
                  |L14.924|
                          DCD      0xffff0000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F4_V1.21.0\\Drivers\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F4_V1.21.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____REVSH|
#line 402
|__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____RRX|
#line 587
|__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
