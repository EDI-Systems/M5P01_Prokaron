


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************
    2 00000000         ;Filename    : rmp_platform_cmx_asm.s
    3 00000000         ;Author      : pry
    4 00000000         ;Date        : 10/04/2012
    5 00000000         ;Description : The assembly part of the RMP RTOS. This i
                       s for Cortex-M3/4/7.
    6 00000000         ;*******************************************************
                       **********************/
    7 00000000         
    8 00000000         ;/* The ARM Cortex-M Architecture **********************
                       ***********************
    9 00000000         ;R0-R7:General purpose registers that are accessible. 
   10 00000000         ;R8-R12:General purpose registers that can only be reach
                       ed by 32-bit instructions.
   11 00000000         ;R13:SP/SP_process/SP_main    Stack pointer
   12 00000000         ;R14:LR                       Link Register(used for ret
                       urning from a subfunction)
   13 00000000         ;R15:PC                       Program counter.
   14 00000000         ;IPSR                         Interrupt Program Status R
                       egister.
   15 00000000         ;APSR                         Application Program Status
                        Register.
   16 00000000         ;EPSR                         Execute Program Status Reg
                       ister.
   17 00000000         ;The above 3 registers are saved into the stack in combi
                       nation(xPSR).
   18 00000000         ;
   19 00000000         ;The ARM Cortex-M4/7 also include a FPU.
   20 00000000         ;*******************************************************
                       **********************/
   21 00000000         
   22 00000000         ;/* Begin Header ***************************************
                       **********************/
   23 00000000         ;2^3=8 byte alignment.
   24 00000000                 AREA             ARCH,CODE,READONLY,ALIGN=3
   25 00000000         
   26 00000000                 THUMB
   27 00000000                 REQUIRE8
   28 00000000                 PRESERVE8
   29 00000000         ;/* End Header *****************************************
                       **********************/
   30 00000000         
   31 00000000         ;/* Begin Exports **************************************
                       **********************/
   32 00000000         ;Disable all interrupts
   33 00000000                 EXPORT           RMP_Disable_Int
   34 00000000         ;Enable all interrupts            
   35 00000000                 EXPORT           RMP_Enable_Int
   36 00000000         ;Mask/unmask some interrupts
   37 00000000                 EXPORT           RMP_Mask_Int
   38 00000000         ;Get the MSB                              
   39 00000000                 EXPORT           RMP_MSB_Get
   40 00000000         ;Start the first thread
   41 00000000                 EXPORT           _RMP_Start
   42 00000000         ;The PendSV trigger
   43 00000000                 EXPORT           _RMP_Yield
   44 00000000         ;The system pending service routine              
   45 00000000                 EXPORT           PendSV_Handler



ARM Macro Assembler    Page 2 


   46 00000000         ;The systick timer routine              
   47 00000000                 EXPORT           SysTick_Handler
   48 00000000         ;/* End Exports ****************************************
                       **********************/
   49 00000000         
   50 00000000         ;/* Begin Imports **************************************
                       **********************/
   51 00000000         ;The real task switch handling function
   52 00000000                 IMPORT           _RMP_Get_High_Rdy
   53 00000000         ;The real systick handler function
   54 00000000                 IMPORT           _RMP_Tick_Handler
   55 00000000         ;The PID of the current thread                     
   56 00000000                 IMPORT           RMP_Cur_Thd
   57 00000000         ;The stack address of current thread
   58 00000000                 IMPORT           RMP_Cur_SP
   59 00000000         ;Save and load extra contexts, such as FPU, peripherals 
                       and MPU
   60 00000000                 IMPORT           RMP_Save_Ctx
   61 00000000                 IMPORT           RMP_Load_Ctx
   62 00000000         ;/* End Imports ****************************************
                       **********************/
   63 00000000         
   64 00000000         ;/* Begin Function:RMP_Disable_Int *********************
                       ***********************
   65 00000000         ;Description : The function for disabling all interrupts
                       . Does not allow nesting.
   66 00000000         ;Input       : None.
   67 00000000         ;Output      : None.
   68 00000000         ;Return      : None.
   69 00000000         ;*******************************************************
                       **********************/    
   70 00000000         RMP_Disable_Int
   71 00000000         ;Disable all interrupts (I is primask,F is Faultmask.)
   72 00000000 B672            CPSID            I
   73 00000002 4770            BX               LR
   74 00000004         ;/* End Function:RMP_Disable_Int ***********************
                       **********************/
   75 00000004         
   76 00000004         ;/* Begin Function:RMP_Enable_Int **********************
                       ***********************
   77 00000004         ;Description : The function for enabling all interrupts.
                        Does not allow nesting.
   78 00000004         ;Input       : None.
   79 00000004         ;Output      : None.
   80 00000004         ;Return      : None.
   81 00000004         ;*******************************************************
                       **********************/
   82 00000004         RMP_Enable_Int
   83 00000004         ;Enable all interrupts.
   84 00000004 B662            CPSIE            I
   85 00000006 4770            BX               LR
   86 00000008         ;/* End Function:RMP_Enable_Int ************************
                       **********************/
   87 00000008         
   88 00000008         ;/* Begin Function:RMP_Mask_Int ************************
                       ***********************
   89 00000008         ;Description : The function for masking & unmasking inte
                       rrupts. Does not allow nesting.
   90 00000008         ;Input       : rmp_ptr_t R0 - The new BASEPRI to set.



ARM Macro Assembler    Page 3 


   91 00000008         ;Output      : None.
   92 00000008         ;Return      : None.
   93 00000008         ;*******************************************************
                       **********************/
   94 00000008         RMP_Mask_Int
   95 00000008         ;Mask some interrupts.
   96 00000008 F380 8811       MSR              BASEPRI,R0
   97 0000000C         ;We are not influenced by errata #837070 as the next ins
                       truction is BX LR.
   98 0000000C         ;Thus we have a free window because the following BX LR 
                       falls into it.
   99 0000000C 4770            BX               LR
  100 0000000E         ;/* End Function:RMP_Mask_Int **************************
                       **********************/
  101 0000000E         
  102 0000000E         ;/* Begin Function:RMP_MSB_Get *************************
                       ***********************
  103 0000000E         ;Description : Get the MSB of the word.
  104 0000000E         ;Input       : rmp_ptr_t R0 - The value.
  105 0000000E         ;Output      : None.
  106 0000000E         ;Return      : rmp_ptr_t R0 - The MSB position.
  107 0000000E         ;*******************************************************
                       **********************/
  108 0000000E         RMP_MSB_Get
  109 0000000E FAB0 F180       CLZ              R1,R0
  110 00000012 201F            MOVS             R0,#31
  111 00000014 1A40            SUBS             R0,R1
  112 00000016 4770            BX               LR
  113 00000018         ;/* End Function:RMP_MSB_Get ***************************
                       **********************/
  114 00000018         
  115 00000018         ;/* Begin Function:_RMP_Yield **************************
                       ***********************
  116 00000018         ;Description : Trigger a yield to another thread.
  117 00000018         ;Input       : None.
  118 00000018         ;Output      : None.
  119 00000018         ;Return      : None.
  120 00000018         ;*******************************************************
                       **********************/
  121 00000018         _RMP_Yield
  122 00000018 4818            LDR              R0,=0xE000ED04 ;The NVIC_INT_CT
                                                            RL register
  123 0000001A F04F 5180       LDR              R1,=0x10000000 ;Trigger the Pen
                                                            dSV          
  124 0000001E 6001            STR              R1,[R0]
  125 00000020 F3BF 8F6F       ISB                          ;Instruction barrie
                                                            r 
  126 00000024 4770            BX               LR
  127 00000026         ;/* End Function:_RMP_Yield ****************************
                       **********************/
  128 00000026         
  129 00000026         ;/* Begin Function:_RMP_Start **************************
                       ***********************
  130 00000026         ;Description : Jump to the user function and will never 
                       return from it.
  131 00000026         ;Input       : None.
  132 00000026         ;Output      : None.
  133 00000026         ;Return      : None.                                   
  134 00000026         ;*******************************************************



ARM Macro Assembler    Page 4 


                       **********************/
  135 00000026         _RMP_Start
  136 00000026 3940            SUBS             R1,#64      ;This is how we pus
                                                            h our registers so 
                                                            move forward
  137 00000028 F381 8809       MSR              PSP,R1      ;Set the stack poin
                                                            ter
  138 0000002C 2402            MOVS             R4,#0x02    ;Previleged thread 
                                                            mode
  139 0000002E F384 8814       MSR              CONTROL,R4
  140 00000032 F3BF 8F6F       ISB                          ;Data and instructi
                                                            on barrier
  141 00000036 4780            BLX              R0          ;Branch to our targ
                                                            et
  142 00000038         ;/* End Function:_RMP_Start ****************************
                       **********************/
  143 00000038         
  144 00000038         ;/* Begin Function:PendSV_Handler **********************
                       ***********************
  145 00000038         ;Description : The PendSV interrupt routine. In fact, it
                        will call a C function
  146 00000038         ;              directly. The reason why the interrupt ro
                       utine must be an assembly
  147 00000038         ;              function is that the compiler may deal wi
                       th the stack in a different 
  148 00000038         ;              way when different optimization level is 
                       chosen. An assembly function
  149 00000038         ;              can make way around this problem.
  150 00000038         ;              However, if your compiler support inline 
                       assembly functions, this
  151 00000038         ;              can also be written in C.
  152 00000038         ;Input       : None.
  153 00000038         ;Output      : None.
  154 00000038         ;Return      : None.
  155 00000038         ;*******************************************************
                       **********************/
  156 00000038         PendSV_Handler
  157 00000038 F3EF 8009       MRS              R0,PSP      ;Spill all the regi
                                                            sters onto the user
                                                             stack
  158 0000003C F01E 0F10       TST              LR,#0x10    ;Are we using the F
                                                            PU or not at all?
  159 00000040 BF08            DCI              0xBF08      ;IT EQ ;If yes, (DC
                                                            I for compatibility
                                                             with no FPU suppor
                                                            t)
  160 00000042 ED20            DCI              0xED20      ;VSTMDBEQ R0!,{S16-
                                                            S31}
  161 00000044 8A10            DCI              0x8A10      ;Save FPU registers
                                                             not saved by lazy 
                                                            stacking.
  162 00000046 E920 4FF0       STMDB            R0!,{R4-R11,LR} ;Save the gener
                                                            al purpose register
                                                            s.
  163 0000004A         
  164 0000004A F7FF FFFE       BL               RMP_Save_Ctx 
                                                            ;Save extra context
                                                            
  165 0000004E         



ARM Macro Assembler    Page 5 


  166 0000004E 490C            LDR              R1,=RMP_Cur_SP ;Save The SP to 
                                                            control block.
  167 00000050 6008            STR              R0,[R1]
  168 00000052         
  169 00000052 F7FF FFFE       BL               _RMP_Get_High_Rdy ;Get the high
                                                            est ready task.
  170 00000056         
  171 00000056 490A            LDR              R1,=RMP_Cur_SP ;Load the SP.
  172 00000058 6808            LDR              R0,[R1]
  173 0000005A         
  174 0000005A F7FF FFFE       BL               RMP_Load_Ctx 
                                                            ;Load extra context
                                                            
  175 0000005E         
  176 0000005E E8B0 4FF0       LDMIA            R0!,{R4-R11,LR} ;Load the gener
                                                            al purpose register
                                                            s.
  177 00000062 F01E 0F10       TST              LR,#0x10    ;Are we using the F
                                                            PU or not at all?
  178 00000066 BF08            DCI              0xBF08      ;IT EQ ;If yes, (DC
                                                            I for compatibility
                                                             with no FPU suppor
                                                            t)
  179 00000068 ECB0            DCI              0xECB0      ;VLDMIAEQ R0!,{S16-
                                                            S31}
  180 0000006A 8A10            DCI              0x8A10      ;Load FPU registers
                                                             not loaded by lazy
                                                             stacking.
  181 0000006C F380 8809       MSR              PSP,R0
  182 00000070         
  183 00000070         ;There are some chips that may corrupt on this branch, s
                       uch as XMC4xxx step AA/step AB
  184 00000070         ;chips. For those chips, you must manually edit this to 
                       PUSH {LR} then POP {PC}. 
  185 00000070 4770            BX               LR          ;The LR will indica
                                                            te whether we are u
                                                            sing FPU.    
  186 00000072         ;/* End Function:PendSV_Handler ************************
                       **********************/
  187 00000072         
  188 00000072         ;/* Begin Function:SysTick_Handler *********************
                       ***********************
  189 00000072         ;Description : The SysTick interrupt routine. In fact, i
                       t will call a C function
  190 00000072         ;              directly. The reason why the interrupt ro
                       utine must be an assembly
  191 00000072         ;              function is that the compiler may deal wi
                       th the stack in a different 
  192 00000072         ;              way when different optimization level is 
                       chosen. An assembly function
  193 00000072         ;              can make way around this problem.
  194 00000072         ;              However, if your compiler support inline 
                       assembly functions, this
  195 00000072         ;              can also be written in C.
  196 00000072         ;Input       : None.
  197 00000072         ;Output      : None.
  198 00000072         ;Return      : None.
  199 00000072         ;*******************************************************
                       **********************/



ARM Macro Assembler    Page 6 


  200 00000072         SysTick_Handler
  201 00000072 B500            PUSH             {LR}
  202 00000074         
  203 00000074 2001            MOVS             R0,#0x01    ;We are not using t
                                                            ickless.
  204 00000076 F7FF FFFE       BL               _RMP_Tick_Handler
  205 0000007A         
  206 0000007A BD00            POP              {PC}
  207 0000007C                 ALIGN
  208 0000007C         ;/* End Function:SysTick_Handler ***********************
                       **********************/
  209 0000007C         
  210 0000007C                 END
              E000ED04 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\debug\output\rmp_platform_cmx_asm.d -o.\debug\output\rmp_plat
form_cmx_asm.o -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM3
2F405RGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Inc
lude -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\
CMSIS\Device\ST\STM32F4xx\Include --predefine="__MICROLIB SETA 1" --predefine="
__UVISION_VERSION SETA 520" --predefine="_RTE_ SETA 1" --predefine="STM32F405xx
 SETA 1" --list=.\debug\listings\rmp_platform_cmx_asm.lst ..\..\MProkaron\Platf
orm\CortexM\rmp_platform_cmx_asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARCH 00000000

Symbol: ARCH
   Definitions
      At line 24 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
   Uses
      None
Comment: ARCH unused
PendSV_Handler 00000038

Symbol: PendSV_Handler
   Definitions
      At line 156 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm
.s
   Uses
      At line 45 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
Comment: PendSV_Handler used once
RMP_Disable_Int 00000000

Symbol: RMP_Disable_Int
   Definitions
      At line 70 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
   Uses
      At line 33 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
Comment: RMP_Disable_Int used once
RMP_Enable_Int 00000004

Symbol: RMP_Enable_Int
   Definitions
      At line 82 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
   Uses
      At line 35 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
Comment: RMP_Enable_Int used once
RMP_MSB_Get 0000000E

Symbol: RMP_MSB_Get
   Definitions
      At line 108 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm
.s
   Uses
      At line 39 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
Comment: RMP_MSB_Get used once
RMP_Mask_Int 00000008

Symbol: RMP_Mask_Int
   Definitions
      At line 94 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
   Uses
      At line 37 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
Comment: RMP_Mask_Int used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

SysTick_Handler 00000072

Symbol: SysTick_Handler
   Definitions
      At line 200 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm
.s
   Uses
      At line 47 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
Comment: SysTick_Handler used once
_RMP_Start 00000026

Symbol: _RMP_Start
   Definitions
      At line 135 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm
.s
   Uses
      At line 41 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
Comment: _RMP_Start used once
_RMP_Yield 00000018

Symbol: _RMP_Yield
   Definitions
      At line 121 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm
.s
   Uses
      At line 43 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
Comment: _RMP_Yield used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

RMP_Cur_SP 00000000

Symbol: RMP_Cur_SP
   Definitions
      At line 58 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
   Uses
      At line 166 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm
.s
      At line 171 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm
.s

RMP_Cur_Thd 00000000

Symbol: RMP_Cur_Thd
   Definitions
      At line 56 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
   Uses
      None
Comment: RMP_Cur_Thd unused
RMP_Load_Ctx 00000000

Symbol: RMP_Load_Ctx
   Definitions
      At line 61 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
   Uses
      At line 174 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm
.s
Comment: RMP_Load_Ctx used once
RMP_Save_Ctx 00000000

Symbol: RMP_Save_Ctx
   Definitions
      At line 60 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
   Uses
      At line 164 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm
.s
Comment: RMP_Save_Ctx used once
_RMP_Get_High_Rdy 00000000

Symbol: _RMP_Get_High_Rdy
   Definitions
      At line 52 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
   Uses
      At line 169 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm
.s
Comment: _RMP_Get_High_Rdy used once
_RMP_Tick_Handler 00000000

Symbol: _RMP_Tick_Handler
   Definitions
      At line 54 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm.
s
   Uses
      At line 204 in file ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx_asm



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

.s
Comment: _RMP_Tick_Handler used once
6 symbols
352 symbols in table
