<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Debug\Output\RMP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Debug\Output\RMP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Thu Jul 19 16:02:47 2018
<BR><P>
<H3>Maximum Stack Usage =      10232 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
searcher_Croot &rArr; findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1d9]">RMP_Disable_Int</a>
 <LI><a href="#[1da]">RMP_Enable_Int</a>
 <LI><a href="#[1c6]">RMP_Mask_Int</a>
 <LI><a href="#[1d1]">RMP_MSB_Get</a>
 <LI><a href="#[1cd]">_RMP_Yield</a>
 <LI><a href="#[4a4]">_RMP_Start</a>
 <LI><a href="#[1b]">PendSV_Handler</a>
 <LI><a href="#[1c]">SysTick_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[14]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">NMI_Handler</a><BR>
 <LI><a href="#[15]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">HardFault_Handler</a><BR>
 <LI><a href="#[16]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">MemManage_Handler</a><BR>
 <LI><a href="#[17]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">BusFault_Handler</a><BR>
 <LI><a href="#[18]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">UsageFault_Handler</a><BR>
 <LI><a href="#[19]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">SVC_Handler</a><BR>
 <LI><a href="#[1a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">DebugMon_Handler</a><BR>
 <LI><a href="#[2f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">ADC_IRQHandler</a><BR>
 <LI><a href="#[23e]">reallymarkobject</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23e]">reallymarkobject</a><BR>
 <LI><a href="#[187]">GCTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18b]">luaO_pushfstring</a><BR>
 <LI><a href="#[1b0]">luaM_toobig</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36b]">luaG_runerror</a><BR>
 <LI><a href="#[1b1]">luaM_malloc_</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18c]">luaD_throw</a><BR>
 <LI><a href="#[3c6]">growstrtab</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18c]">luaD_throw</a><BR>
 <LI><a href="#[294]">luaS_resize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[430]">luaM_realloc_</a><BR>
 <LI><a href="#[18c]">luaD_throw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18c]">luaD_throw</a><BR>
 <LI><a href="#[429]">luaD_shrinkstack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[424]">luaD_reallocstack</a><BR>
 <LI><a href="#[41f]">luaD_growstack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36b]">luaG_runerror</a><BR>
 <LI><a href="#[43f]">luaO_pushvfstring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18b]">luaO_pushfstring</a><BR>
 <LI><a href="#[47c]">luaV_concat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36b]">luaG_runerror</a><BR>
 <LI><a href="#[440]">luaG_tointerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36b]">luaG_runerror</a><BR>
 <LI><a href="#[442]">varinfo</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18b]">luaO_pushfstring</a><BR>
 <LI><a href="#[3ba]">rname</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39b]">getobjname</a><BR>
 <LI><a href="#[3b9]">gxf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39b]">getobjname</a><BR>
 <LI><a href="#[39b]">getobjname</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39b]">getobjname</a><BR>
 <LI><a href="#[435]">luaG_typeerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36b]">luaG_runerror</a><BR>
 <LI><a href="#[422]">luaV_execute</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36b]">luaG_runerror</a><BR>
 <LI><a href="#[48c]">luaV_objlen</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[288]">luaT_callTMres</a><BR>
 <LI><a href="#[263]">luaV_finishset</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36b]">luaG_runerror</a><BR>
 <LI><a href="#[484]">luaT_callTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[333]">luaD_callnoyield</a><BR>
 <LI><a href="#[257]">luaV_finishget</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36b]">luaG_runerror</a><BR>
 <LI><a href="#[20d]">luaV_equalobj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[288]">luaT_callTMres</a><BR>
 <LI><a href="#[25a]">luaT_keydef</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[288]">luaT_callTMres</a><BR>
 <LI><a href="#[3cf]">luaH_resize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ec]">luaH_setint</a><BR>
 <LI><a href="#[447]">setnodevector</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36b]">luaG_runerror</a><BR>
 <LI><a href="#[20c]">luaH_set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[448]">luaH_newkey</a><BR>
 <LI><a href="#[3d1]">luaV_mod</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36b]">luaG_runerror</a><BR>
 <LI><a href="#[3d2]">luaV_div</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36b]">luaG_runerror</a><BR>
 <LI><a href="#[43d]">luaG_ordererror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36b]">luaG_runerror</a><BR>
 <LI><a href="#[3f6]">luaT_callorderTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[287]">callbinTM</a><BR>
 <LI><a href="#[487]">luaT_trybinassocTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[478]">luaT_trybinTM</a><BR>
 <LI><a href="#[234]">luaE_incCcalls</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36b]">luaG_runerror</a><BR>
 <LI><a href="#[41e]">luaD_call</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41e]">luaD_call</a><BR>
 <LI><a href="#[27e]">resizebox</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27e]">resizebox</a><BR>
 <LI><a href="#[363]">findfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[363]">findfield</a><BR>
 <LI><a href="#[3f9]">txtToken</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29a]">save</a><BR>
 <LI><a href="#[34c]">subexpr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34c]">subexpr</a><BR>
 <LI><a href="#[4d4]">yindex</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ee]">expr</a><BR>
 <LI><a href="#[4e5]">singlevaraux</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e5]">singlevaraux</a><BR>
 <LI><a href="#[4c1]">primaryexp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ee]">expr</a><BR>
 <LI><a href="#[237]">explist</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ee]">expr</a><BR>
 <LI><a href="#[35f]">recfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ee]">expr</a><BR>
 <LI><a href="#[35e]">listfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ee]">expr</a><BR>
 <LI><a href="#[276]">body</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[274]">statlist</a><BR>
 <LI><a href="#[272]">block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[274]">statlist</a><BR>
 <LI><a href="#[4d8]">repeatstat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[274]">statlist</a><BR>
 <LI><a href="#[3ee]">skipnoopstat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e9]">statement</a><BR>
 <LI><a href="#[3cb]">test_then_block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[274]">statlist</a><BR>
 <LI><a href="#[22f]">assignment</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22f]">assignment</a><BR>
 <LI><a href="#[1b9]">LoadProtos</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b7]">LoadFunction</a><BR>
 <LI><a href="#[4a8]">start_capture</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[335]">match</a><BR>
 <LI><a href="#[4ae]">min_expand</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[335]">match</a><BR>
 <LI><a href="#[4ad]">max_expand</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[335]">match</a><BR>
 <LI><a href="#[335]">match</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[335]">match</a><BR>
 <LI><a href="#[334]">end_capture</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[335]">match</a><BR>
 <LI><a href="#[17f]">DumpProtos</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17d]">DumpFunction</a><BR>
 <LI><a href="#[264]">auxsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[264]">auxsort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2f]">ADC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[17]">BusFault_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[31]">CAN1_RX0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[32]">CAN1_RX1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[33]">CAN1_SCE_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[30]">CAN1_TX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5d]">CAN2_RX0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5e]">CAN2_RX1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5f]">CAN2_SCE_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5c]">CAN2_TX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[84]">CAN3_RX0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[85]">CAN3_RX1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[86]">CAN3_SCE_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[83]">CAN3_TX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7a]">CEC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6b]">DCMI_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7e]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7f]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[80]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[81]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4c]">DMA1_Stream7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[76]">DMA2D_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1a]">DebugMon_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5a]">ETH_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5b]">ETH_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[23]">EXTI0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[45]">EXTI15_10_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[24]">EXTI1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[25]">EXTI2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[26]">EXTI3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[27]">EXTI4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[34]">EXTI9_5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[21]">FLASH_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4d]">FMC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6d]">FPU_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[90]">Func_1</a> from test_lua.o(i.Func_1) referenced from test_lua.o(i.RMP_Init_Hook)
 <LI><a href="#[91]">Func_2</a> from test_lua.o(i.Func_2) referenced from test_lua.o(i.RMP_Init_Hook)
 <LI><a href="#[15]">HardFault_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3d]">I2C1_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3c]">I2C1_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3f]">I2C2_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3e]">I2C2_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[66]">I2C3_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[65]">I2C3_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7c]">I2C4_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7b]">I2C4_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[87]">JPEG_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[79]">LPTIM1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[75]">LTDC_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[74]">LTDC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[88]">MDIOS_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[16]">MemManage_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[14]">NMI_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[60]">OTG_FS_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[47]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[68]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[67]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6a]">OTG_HS_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[69]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1e]">PVD_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1b]">PendSV_Handler</a> from rmp_platform_cmx_asm.o(ARCH) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[78]">QUADSPI_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[22]">RCC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[aa]">RMP_Init</a> from rmp_kernel.o(i.RMP_Init) referenced from rmp_kernel.o(i.main)
 <LI><a href="#[6c]">RNG_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[46]">RTC_Alarm_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[20]">RTC_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[13]">Reset_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[73]">SAI1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[77]">SAI2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4e]">SDMMC1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[82]">SDMMC2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7d]">SPDIF_RX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[40]">SPI1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[41]">SPI2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[50]">SPI3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[70]">SPI4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[71]">SPI5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[72]">SPI6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[19]">SVC_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1c]">SysTick_Handler</a> from rmp_platform_cmx_asm.o(ARCH) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[8a]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f767xx.o(.text)
 <LI><a href="#[1f]">TAMP_STAMP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[35]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[38]">TIM1_CC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[37]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[36]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[39]">TIM2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3a]">TIM3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3b]">TIM4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4f]">TIM5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[53]">TIM6_DAC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[54]">TIM7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[48]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4b]">TIM8_CC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4a]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[49]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[51]">UART4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[52]">UART5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6e]">UART7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6f]">UART8_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[42]">USART1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[43]">USART2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[44]">USART3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[64]">USART6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[18]">UsageFault_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1d]">WWDG_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[8b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f767xx.o(.text)
 <LI><a href="#[8d]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[8c]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[93]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[122]">arith_add</a> from lstrlib.o(i.arith_add) referenced from lstrlib.o(.constdata)
 <LI><a href="#[127]">arith_div</a> from lstrlib.o(i.arith_div) referenced from lstrlib.o(.constdata)
 <LI><a href="#[128]">arith_idiv</a> from lstrlib.o(i.arith_idiv) referenced from lstrlib.o(.constdata)
 <LI><a href="#[125]">arith_mod</a> from lstrlib.o(i.arith_mod) referenced from lstrlib.o(.constdata)
 <LI><a href="#[124]">arith_mul</a> from lstrlib.o(i.arith_mul) referenced from lstrlib.o(.constdata)
 <LI><a href="#[126]">arith_pow</a> from lstrlib.o(i.arith_pow) referenced from lstrlib.o(.constdata)
 <LI><a href="#[123]">arith_sub</a> from lstrlib.o(i.arith_sub) referenced from lstrlib.o(.constdata)
 <LI><a href="#[129]">arith_unm</a> from lstrlib.o(i.arith_unm) referenced from lstrlib.o(.constdata)
 <LI><a href="#[ac]">boxgc</a> from lauxlib.o(i.boxgc) referenced from lauxlib.o(i.newbox)
 <LI><a href="#[142]">byteoffset</a> from lutf8lib.o(i.byteoffset) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[143]">codepoint</a> from lutf8lib.o(i.codepoint) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[cb]">db_debug</a> from ldblib.o(i.db_debug) referenced from ldblib.o(.constdata)
 <LI><a href="#[cd]">db_gethook</a> from ldblib.o(i.db_gethook) referenced from ldblib.o(.constdata)
 <LI><a href="#[ce]">db_getinfo</a> from ldblib.o(i.db_getinfo) referenced from ldblib.o(.constdata)
 <LI><a href="#[cf]">db_getlocal</a> from ldblib.o(i.db_getlocal) referenced from ldblib.o(.constdata)
 <LI><a href="#[d1]">db_getmetatable</a> from ldblib.o(i.db_getmetatable) referenced from ldblib.o(.constdata)
 <LI><a href="#[d0]">db_getregistry</a> from ldblib.o(i.db_getregistry) referenced from ldblib.o(.constdata)
 <LI><a href="#[d2]">db_getupvalue</a> from ldblib.o(i.db_getupvalue) referenced from ldblib.o(.constdata)
 <LI><a href="#[cc]">db_getuservalue</a> from ldblib.o(i.db_getuservalue) referenced from ldblib.o(.constdata)
 <LI><a href="#[d6]">db_sethook</a> from ldblib.o(i.db_sethook) referenced from ldblib.o(.constdata)
 <LI><a href="#[d7]">db_setlocal</a> from ldblib.o(i.db_setlocal) referenced from ldblib.o(.constdata)
 <LI><a href="#[d8]">db_setmetatable</a> from ldblib.o(i.db_setmetatable) referenced from ldblib.o(.constdata)
 <LI><a href="#[d9]">db_setupvalue</a> from ldblib.o(i.db_setupvalue) referenced from ldblib.o(.constdata)
 <LI><a href="#[d5]">db_setuservalue</a> from ldblib.o(i.db_setuservalue) referenced from ldblib.o(.constdata)
 <LI><a href="#[da]">db_traceback</a> from ldblib.o(i.db_traceback) referenced from ldblib.o(.constdata)
 <LI><a href="#[d4]">db_upvalueid</a> from ldblib.o(i.db_upvalueid) referenced from ldblib.o(.constdata)
 <LI><a href="#[d3]">db_upvaluejoin</a> from ldblib.o(i.db_upvaluejoin) referenced from ldblib.o(.constdata)
 <LI><a href="#[9c]">dofilecont</a> from lbaselib.o(i.dofilecont) referenced from lbaselib.o(i.luaB_dofile)
 <LI><a href="#[8f]">dothecall</a> from lgc.o(i.dothecall) referenced from lgc.o(i.GCTM)
 <LI><a href="#[a7]">f_call</a> from lapi.o(i.f_call) referenced from lapi.o(i.lua_pcallk)
 <LI><a href="#[f0]">f_close</a> from liolib.o(i.f_close) referenced from liolib.o(.constdata)
 <LI><a href="#[f1]">f_flush</a> from liolib.o(i.f_flush) referenced from liolib.o(.constdata)
 <LI><a href="#[f7]">f_gc</a> from liolib.o(i.f_gc) referenced from liolib.o(.constdata)
 <LI><a href="#[f2]">f_lines</a> from liolib.o(i.f_lines) referenced from liolib.o(.constdata)
 <LI><a href="#[a6]">f_luaopen</a> from lstate.o(i.f_luaopen) referenced from lstate.o(i.lua_newstate)
 <LI><a href="#[a1]">f_parser</a> from ldo.o(i.f_parser) referenced from ldo.o(i.luaD_protectedparser)
 <LI><a href="#[f3]">f_read</a> from liolib.o(i.f_read) referenced from liolib.o(.constdata)
 <LI><a href="#[f4]">f_seek</a> from liolib.o(i.f_seek) referenced from liolib.o(.constdata)
 <LI><a href="#[f5]">f_setvbuf</a> from liolib.o(i.f_setvbuf) referenced from liolib.o(.constdata)
 <LI><a href="#[f8]">f_tostring</a> from liolib.o(i.f_tostring) referenced from liolib.o(.constdata)
 <LI><a href="#[f6]">f_write</a> from liolib.o(i.f_write) referenced from liolib.o(.constdata)
 <LI><a href="#[a0]">finishpcall</a> from lbaselib.o(i.finishpcall) referenced from lbaselib.o(i.luaB_pcall)
 <LI><a href="#[a0]">finishpcall</a> from lbaselib.o(i.finishpcall) referenced from lbaselib.o(i.luaB_xpcall)
 <LI><a href="#[92]">fputc</a> from fputc.o(i.fputc) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[95]">gctm</a> from loadlib.o(i.gctm) referenced from loadlib.o(i.createclibstable)
 <LI><a href="#[9e]">generic_reader</a> from lbaselib.o(i.generic_reader) referenced from lbaselib.o(i.luaB_load)
 <LI><a href="#[a3]">getF</a> from lauxlib.o(i.getF) referenced from lauxlib.o(i.luaL_loadfilex)
 <LI><a href="#[a2]">getS</a> from lauxlib.o(i.getS) referenced from lauxlib.o(i.luaL_loadbufferx)
 <LI><a href="#[12f]">gmatch</a> from lstrlib.o(i.gmatch) referenced from lstrlib.o(.constdata)
 <LI><a href="#[98]">gmatch_aux</a> from lstrlib.o(i.gmatch_aux) referenced from lstrlib.o(i.gmatch)
 <LI><a href="#[97]">hookf</a> from ldblib.o(i.hookf) referenced from ldblib.o(i.db_gethook)
 <LI><a href="#[97]">hookf</a> from ldblib.o(i.hookf) referenced from ldblib.o(i.db_sethook)
 <LI><a href="#[e5]">io_close</a> from liolib.o(i.io_close) referenced from liolib.o(.constdata)
 <LI><a href="#[ad]">io_fclose</a> from liolib.o(i.io_fclose) referenced from liolib.o(i.newfile)
 <LI><a href="#[e6]">io_flush</a> from liolib.o(i.io_flush) referenced from liolib.o(.constdata)
 <LI><a href="#[e7]">io_input</a> from liolib.o(i.io_input) referenced from liolib.o(.constdata)
 <LI><a href="#[e8]">io_lines</a> from liolib.o(i.io_lines) referenced from liolib.o(.constdata)
 <LI><a href="#[96]">io_noclose</a> from liolib.o(i.io_noclose) referenced from liolib.o(i.createstdfile)
 <LI><a href="#[96]">io_noclose</a> from liolib.o(i.io_noclose) referenced from liolib.o(i.io_noclose)
 <LI><a href="#[e9]">io_open</a> from liolib.o(i.io_open) referenced from liolib.o(.constdata)
 <LI><a href="#[ea]">io_output</a> from liolib.o(i.io_output) referenced from liolib.o(.constdata)
 <LI><a href="#[99]">io_pclose</a> from liolib.o(i.io_pclose) referenced from liolib.o(i.io_popen)
 <LI><a href="#[eb]">io_popen</a> from liolib.o(i.io_popen) referenced from liolib.o(.constdata)
 <LI><a href="#[ec]">io_read</a> from liolib.o(i.io_read) referenced from liolib.o(.constdata)
 <LI><a href="#[94]">io_readline</a> from liolib.o(i.io_readline) referenced from liolib.o(i.aux_lines)
 <LI><a href="#[ed]">io_tmpfile</a> from liolib.o(i.io_tmpfile) referenced from liolib.o(.constdata)
 <LI><a href="#[ee]">io_type</a> from liolib.o(i.io_type) referenced from liolib.o(.constdata)
 <LI><a href="#[ef]">io_write</a> from liolib.o(i.io_write) referenced from liolib.o(.constdata)
 <LI><a href="#[9d]">ipairsaux</a> from lbaselib.o(i.ipairsaux) referenced from lbaselib.o(i.luaB_ipairs)
 <LI><a href="#[8e]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[9a]">iter_aux</a> from lutf8lib.o(i.iter_aux) referenced from lutf8lib.o(i.iter_codes)
 <LI><a href="#[146]">iter_codes</a> from lutf8lib.o(i.iter_codes) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[a4]">l_alloc</a> from lauxlib.o(i.l_alloc) referenced from lauxlib.o(i.luaL_newstate)
 <LI><a href="#[110]">ll_loadlib</a> from loadlib.o(i.ll_loadlib) referenced from loadlib.o(.constdata)
 <LI><a href="#[112]">ll_require</a> from loadlib.o(i.ll_require) referenced from loadlib.o(.constdata)
 <LI><a href="#[111]">ll_searchpath</a> from loadlib.o(i.ll_searchpath) referenced from loadlib.o(.constdata)
 <LI><a href="#[af]">luaB_assert</a> from lbaselib.o(i.luaB_assert) referenced from lbaselib.o(.constdata)
 <LI><a href="#[9b]">luaB_auxwrap</a> from lcorolib.o(i.luaB_auxwrap) referenced from lcorolib.o(i.luaB_cowrap)
 <LI><a href="#[c4]">luaB_cocreate</a> from lcorolib.o(i.luaB_cocreate) referenced from lcorolib.o(.constdata)
 <LI><a href="#[b0]">luaB_collectgarbage</a> from lbaselib.o(i.luaB_collectgarbage) referenced from lbaselib.o(.constdata)
 <LI><a href="#[c5]">luaB_coresume</a> from lcorolib.o(i.luaB_coresume) referenced from lcorolib.o(.constdata)
 <LI><a href="#[c6]">luaB_corunning</a> from lcorolib.o(i.luaB_corunning) referenced from lcorolib.o(.constdata)
 <LI><a href="#[c7]">luaB_costatus</a> from lcorolib.o(i.luaB_costatus) referenced from lcorolib.o(.constdata)
 <LI><a href="#[c8]">luaB_cowrap</a> from lcorolib.o(i.luaB_cowrap) referenced from lcorolib.o(.constdata)
 <LI><a href="#[b1]">luaB_dofile</a> from lbaselib.o(i.luaB_dofile) referenced from lbaselib.o(.constdata)
 <LI><a href="#[b2]">luaB_error</a> from lbaselib.o(i.luaB_error) referenced from lbaselib.o(.constdata)
 <LI><a href="#[b3]">luaB_getmetatable</a> from lbaselib.o(i.luaB_getmetatable) referenced from lbaselib.o(.constdata)
 <LI><a href="#[b4]">luaB_ipairs</a> from lbaselib.o(i.luaB_ipairs) referenced from lbaselib.o(.constdata)
 <LI><a href="#[b6]">luaB_load</a> from lbaselib.o(i.luaB_load) referenced from lbaselib.o(.constdata)
 <LI><a href="#[b5]">luaB_loadfile</a> from lbaselib.o(i.luaB_loadfile) referenced from lbaselib.o(.constdata)
 <LI><a href="#[9f]">luaB_next</a> from lbaselib.o(i.luaB_next) referenced from lbaselib.o(.constdata)
 <LI><a href="#[9f]">luaB_next</a> from lbaselib.o(i.luaB_next) referenced from lbaselib.o(i.luaB_pairs)
 <LI><a href="#[b7]">luaB_pairs</a> from lbaselib.o(i.luaB_pairs) referenced from lbaselib.o(.constdata)
 <LI><a href="#[b8]">luaB_pcall</a> from lbaselib.o(i.luaB_pcall) referenced from lbaselib.o(.constdata)
 <LI><a href="#[b9]">luaB_print</a> from lbaselib.o(i.luaB_print) referenced from lbaselib.o(.constdata)
 <LI><a href="#[ba]">luaB_rawequal</a> from lbaselib.o(i.luaB_rawequal) referenced from lbaselib.o(.constdata)
 <LI><a href="#[bc]">luaB_rawget</a> from lbaselib.o(i.luaB_rawget) referenced from lbaselib.o(.constdata)
 <LI><a href="#[bb]">luaB_rawlen</a> from lbaselib.o(i.luaB_rawlen) referenced from lbaselib.o(.constdata)
 <LI><a href="#[bd]">luaB_rawset</a> from lbaselib.o(i.luaB_rawset) referenced from lbaselib.o(.constdata)
 <LI><a href="#[be]">luaB_select</a> from lbaselib.o(i.luaB_select) referenced from lbaselib.o(.constdata)
 <LI><a href="#[bf]">luaB_setmetatable</a> from lbaselib.o(i.luaB_setmetatable) referenced from lbaselib.o(.constdata)
 <LI><a href="#[c0]">luaB_tonumber</a> from lbaselib.o(i.luaB_tonumber) referenced from lbaselib.o(.constdata)
 <LI><a href="#[c1]">luaB_tostring</a> from lbaselib.o(i.luaB_tostring) referenced from lbaselib.o(.constdata)
 <LI><a href="#[c2]">luaB_type</a> from lbaselib.o(i.luaB_type) referenced from lbaselib.o(.constdata)
 <LI><a href="#[c3]">luaB_xpcall</a> from lbaselib.o(i.luaB_xpcall) referenced from lbaselib.o(.constdata)
 <LI><a href="#[c9]">luaB_yield</a> from lcorolib.o(i.luaB_yield) referenced from lcorolib.o(.constdata)
 <LI><a href="#[ca]">luaB_yieldable</a> from lcorolib.o(i.luaB_yieldable) referenced from lcorolib.o(.constdata)
 <LI><a href="#[ab]">lua_newstate</a> from lstate.o(i.lua_newstate) referenced from lstate.o(i.makeseed)
 <LI><a href="#[db]">luaopen_base</a> from lbaselib.o(i.luaopen_base) referenced from linit.o(.constdata)
 <LI><a href="#[dd]">luaopen_coroutine</a> from lcorolib.o(i.luaopen_coroutine) referenced from linit.o(.constdata)
 <LI><a href="#[e4]">luaopen_debug</a> from ldblib.o(i.luaopen_debug) referenced from linit.o(.constdata)
 <LI><a href="#[df]">luaopen_io</a> from liolib.o(i.luaopen_io) referenced from linit.o(.constdata)
 <LI><a href="#[e2]">luaopen_math</a> from lmathlib.o(i.luaopen_math) referenced from linit.o(.constdata)
 <LI><a href="#[e0]">luaopen_os</a> from loslib.o(i.luaopen_os) referenced from linit.o(.constdata)
 <LI><a href="#[dc]">luaopen_package</a> from loadlib.o(i.luaopen_package) referenced from linit.o(.constdata)
 <LI><a href="#[e1]">luaopen_string</a> from lstrlib.o(i.luaopen_string) referenced from linit.o(.constdata)
 <LI><a href="#[de]">luaopen_table</a> from ltablib.o(i.luaopen_table) referenced from linit.o(.constdata)
 <LI><a href="#[e3]">luaopen_utf8</a> from lutf8lib.o(i.luaopen_utf8) referenced from linit.o(.constdata)
 <LI><a href="#[89]">main</a> from rmp_kernel.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[fb]">math_abs</a> from lmathlib.o(i.math_abs) referenced from lmathlib.o(.constdata)
 <LI><a href="#[fc]">math_acos</a> from lmathlib.o(i.math_acos) referenced from lmathlib.o(.constdata)
 <LI><a href="#[fd]">math_asin</a> from lmathlib.o(i.math_asin) referenced from lmathlib.o(.constdata)
 <LI><a href="#[fe]">math_atan</a> from lmathlib.o(i.math_atan) referenced from lmathlib.o(.constdata)
 <LI><a href="#[ff]">math_ceil</a> from lmathlib.o(i.math_ceil) referenced from lmathlib.o(.constdata)
 <LI><a href="#[100]">math_cos</a> from lmathlib.o(i.math_cos) referenced from lmathlib.o(.constdata)
 <LI><a href="#[101]">math_deg</a> from lmathlib.o(i.math_deg) referenced from lmathlib.o(.constdata)
 <LI><a href="#[102]">math_exp</a> from lmathlib.o(i.math_exp) referenced from lmathlib.o(.constdata)
 <LI><a href="#[104]">math_floor</a> from lmathlib.o(i.math_floor) referenced from lmathlib.o(.constdata)
 <LI><a href="#[105]">math_fmod</a> from lmathlib.o(i.math_fmod) referenced from lmathlib.o(.constdata)
 <LI><a href="#[107]">math_log</a> from lmathlib.o(i.math_log) referenced from lmathlib.o(.constdata)
 <LI><a href="#[108]">math_max</a> from lmathlib.o(i.math_max) referenced from lmathlib.o(.constdata)
 <LI><a href="#[109]">math_min</a> from lmathlib.o(i.math_min) referenced from lmathlib.o(.constdata)
 <LI><a href="#[10a]">math_modf</a> from lmathlib.o(i.math_modf) referenced from lmathlib.o(.constdata)
 <LI><a href="#[10b]">math_rad</a> from lmathlib.o(i.math_rad) referenced from lmathlib.o(.constdata)
 <LI><a href="#[f9]">math_random</a> from lmathlib.o(i.math_random) referenced from lmathlib.o(.constdata)
 <LI><a href="#[fa]">math_randomseed</a> from lmathlib.o(i.math_randomseed) referenced from lmathlib.o(.constdata)
 <LI><a href="#[10c]">math_sin</a> from lmathlib.o(i.math_sin) referenced from lmathlib.o(.constdata)
 <LI><a href="#[10d]">math_sqrt</a> from lmathlib.o(i.math_sqrt) referenced from lmathlib.o(.constdata)
 <LI><a href="#[10e]">math_tan</a> from lmathlib.o(i.math_tan) referenced from lmathlib.o(.constdata)
 <LI><a href="#[103]">math_toint</a> from lmathlib.o(i.math_toint) referenced from lmathlib.o(.constdata)
 <LI><a href="#[10f]">math_type</a> from lmathlib.o(i.math_type) referenced from lmathlib.o(.constdata)
 <LI><a href="#[106]">math_ult</a> from lmathlib.o(i.math_ult) referenced from lmathlib.o(.constdata)
 <LI><a href="#[117]">os_clock</a> from loslib.o(i.os_clock) referenced from loslib.o(.constdata)
 <LI><a href="#[118]">os_date</a> from loslib.o(i.os_date) referenced from loslib.o(.constdata)
 <LI><a href="#[119]">os_difftime</a> from loslib.o(i.os_difftime) referenced from loslib.o(.constdata)
 <LI><a href="#[11a]">os_execute</a> from loslib.o(i.os_execute) referenced from loslib.o(.constdata)
 <LI><a href="#[11b]">os_exit</a> from loslib.o(i.os_exit) referenced from loslib.o(.constdata)
 <LI><a href="#[11c]">os_getenv</a> from loslib.o(i.os_getenv) referenced from loslib.o(.constdata)
 <LI><a href="#[11d]">os_remove</a> from loslib.o(i.os_remove) referenced from loslib.o(.constdata)
 <LI><a href="#[11e]">os_rename</a> from loslib.o(i.os_rename) referenced from loslib.o(.constdata)
 <LI><a href="#[11f]">os_setlocale</a> from loslib.o(i.os_setlocale) referenced from loslib.o(.constdata)
 <LI><a href="#[120]">os_time</a> from loslib.o(i.os_time) referenced from loslib.o(.constdata)
 <LI><a href="#[121]">os_tmpname</a> from loslib.o(i.os_tmpname) referenced from loslib.o(.constdata)
 <LI><a href="#[13d]">pack</a> from ltablib.o(i.pack) referenced from ltablib.o(.constdata)
 <LI><a href="#[a5]">panic</a> from lauxlib.o(i.panic) referenced from lauxlib.o(i.luaL_newstate)
 <LI><a href="#[a8]">resume</a> from ldo.o(i.resume) referenced from ldo.o(i.lua_resume)
 <LI><a href="#[115]">searcher_C</a> from loadlib.o(i.searcher_C) referenced from loadlib.o(.constdata)
 <LI><a href="#[116]">searcher_Croot</a> from loadlib.o(i.searcher_Croot) referenced from loadlib.o(.constdata)
 <LI><a href="#[114]">searcher_Lua</a> from loadlib.o(i.searcher_Lua) referenced from loadlib.o(.constdata)
 <LI><a href="#[113]">searcher_preload</a> from loadlib.o(i.searcher_preload) referenced from loadlib.o(.constdata)
 <LI><a href="#[141]">sort</a> from ltablib.o(i.sort) referenced from ltablib.o(.constdata)
 <LI><a href="#[12a]">str_byte</a> from lstrlib.o(i.str_byte) referenced from lstrlib.o(.constdata)
 <LI><a href="#[12b]">str_char</a> from lstrlib.o(i.str_char) referenced from lstrlib.o(.constdata)
 <LI><a href="#[12c]">str_dump</a> from lstrlib.o(i.str_dump) referenced from lstrlib.o(.constdata)
 <LI><a href="#[12d]">str_find</a> from lstrlib.o(i.str_find) referenced from lstrlib.o(.constdata)
 <LI><a href="#[12e]">str_format</a> from lstrlib.o(i.str_format) referenced from lstrlib.o(.constdata)
 <LI><a href="#[130]">str_gsub</a> from lstrlib.o(i.str_gsub) referenced from lstrlib.o(.constdata)
 <LI><a href="#[131]">str_len</a> from lstrlib.o(i.str_len) referenced from lstrlib.o(.constdata)
 <LI><a href="#[132]">str_lower</a> from lstrlib.o(i.str_lower) referenced from lstrlib.o(.constdata)
 <LI><a href="#[133]">str_match</a> from lstrlib.o(i.str_match) referenced from lstrlib.o(.constdata)
 <LI><a href="#[138]">str_pack</a> from lstrlib.o(i.str_pack) referenced from lstrlib.o(.constdata)
 <LI><a href="#[139]">str_packsize</a> from lstrlib.o(i.str_packsize) referenced from lstrlib.o(.constdata)
 <LI><a href="#[134]">str_rep</a> from lstrlib.o(i.str_rep) referenced from lstrlib.o(.constdata)
 <LI><a href="#[135]">str_reverse</a> from lstrlib.o(i.str_reverse) referenced from lstrlib.o(.constdata)
 <LI><a href="#[136]">str_sub</a> from lstrlib.o(i.str_sub) referenced from lstrlib.o(.constdata)
 <LI><a href="#[13a]">str_unpack</a> from lstrlib.o(i.str_unpack) referenced from lstrlib.o(.constdata)
 <LI><a href="#[137]">str_upper</a> from lstrlib.o(i.str_upper) referenced from lstrlib.o(.constdata)
 <LI><a href="#[13b]">tconcat</a> from ltablib.o(i.tconcat) referenced from ltablib.o(.constdata)
 <LI><a href="#[13c]">tinsert</a> from ltablib.o(i.tinsert) referenced from ltablib.o(.constdata)
 <LI><a href="#[140]">tmove</a> from ltablib.o(i.tmove) referenced from ltablib.o(.constdata)
 <LI><a href="#[13f]">tremove</a> from ltablib.o(i.tremove) referenced from ltablib.o(.constdata)
 <LI><a href="#[13e]">unpack</a> from ltablib.o(i.unpack) referenced from ltablib.o(.constdata)
 <LI><a href="#[a9]">unroll</a> from ldo.o(i.unroll) referenced from ldo.o(i.lua_resume)
 <LI><a href="#[144]">utfchar</a> from lutf8lib.o(i.utfchar) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[145]">utflen</a> from lutf8lib.o(i.utflen) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[ae]">writer</a> from lstrlib.o(i.writer) referenced from lstrlib.o(i.str_dump)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(.text)
</UL>
<P><STRONG><a name="[4f8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[147]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[16c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4f9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[4fa]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[4fb]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[4fc]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[4fd]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[13]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>CAN3_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>CAN3_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>CAN3_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>CAN3_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[35c]"></a>fgetc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc_u.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>

<P><STRONG><a name="[4cf]"></a>ungetc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fgetc_u.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_eof
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_search
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackint
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[4fe]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[4ff]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdigits
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[8e]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[271]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
</UL>

<P><STRONG><a name="[4b0]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
</UL>

<P><STRONG><a name="[3e8]"></a>localeconv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, localeconv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quotefloat
</UL>

<P><STRONG><a name="[14e]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
</UL>

<P><STRONG><a name="[152]"></a>strftime</STRONG> (Thumb, 580 bytes, Stack size 72 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
</UL>

<P><STRONG><a name="[2aa]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkoption
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy2buff
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[44c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapexps
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[500]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[46b]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
</UL>

<P><STRONG><a name="[2a5]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makemask
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checkmode
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnexttemplate
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
</UL>

<P><STRONG><a name="[211]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checkmode
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnexttemplate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nospecials
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addlenmod
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
</UL>

<P><STRONG><a name="[154]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gxf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
</UL>

<P><STRONG><a name="[402]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quotefloat
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmemfind
</UL>

<P><STRONG><a name="[2a2]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkoption
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_capture
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmemfind
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_eqlngstr
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
</UL>

<P><STRONG><a name="[153]"></a>strcoll</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strcoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcoll &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
</UL>

<P><STRONG><a name="[212]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addlenmod
</UL>

<P><STRONG><a name="[4ca]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[270]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checkmode
</UL>

<P><STRONG><a name="[3e6]"></a>strpbrk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, strpbrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nospecials
</UL>

<P><STRONG><a name="[342]"></a>strerror</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;difftime
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_rad
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_deg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2d
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;difftime
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTfloatint
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfloatint
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2d
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
</UL>

<P><STRONG><a name="[4f0]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
</UL>

<P><STRONG><a name="[292]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quotefloat
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equalkey
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
</UL>

<P><STRONG><a name="[1a3]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTfloatint
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfloatint
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTfloatint
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfloatint
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[162]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[42f]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
</UL>

<P><STRONG><a name="[434]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>

<P><STRONG><a name="[501]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[502]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[503]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
</UL>

<P><STRONG><a name="[14f]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[167]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[504]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[505]"></a>__I$use$semihosting$fgetc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusesemig.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[506]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[157]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
</UL>

<P><STRONG><a name="[1e0]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[507]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[169]"></a>_drem</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, drem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[148]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[508]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[16e]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[8c]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[509]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>RMP_Disable_Int</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_cmx_asm.o(ARCH))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[1da]"></a>RMP_Enable_Int</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_cmx_asm.o(ARCH))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Plat_Hook
</UL>

<P><STRONG><a name="[1c6]"></a>RMP_Mask_Int</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_cmx_asm.o(ARCH))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Lock_Sched
</UL>

<P><STRONG><a name="[1d1]"></a>RMP_MSB_Get</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_cmx_asm.o(ARCH))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_High_Rdy
</UL>

<P><STRONG><a name="[1cd]"></a>_RMP_Yield</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_cmx_asm.o(ARCH))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Tick_Handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
</UL>

<P><STRONG><a name="[4a4]"></a>_RMP_Start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_cmx_asm.o(ARCH))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_cmx_asm.o(ARCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; _RMP_Get_High_Rdy
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_High_Rdy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Save_Ctx
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Load_Ctx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_cmx_asm.o(ARCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; _RMP_Tick_Handler &rArr; _RMP_Timer_Proc &rArr; _RMP_Set_Rdy
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Tick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>Func_1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, test_lua.o(i.Func_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = Func_1 &rArr; luaopen_base &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_lua.o(i.RMP_Init_Hook)
</UL>
<P><STRONG><a name="[91]"></a>Func_2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, test_lua.o(i.Func_2))
<BR>[Address Reference Count : 1]<UL><LI> test_lua.o(i.RMP_Init_Hook)
</UL>
<P><STRONG><a name="[1d7]"></a>HAL_GPIO_Init</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[193]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[18d]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[18f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[192]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[194]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[197]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[196]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[198]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[195]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[199]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1204 bytes, Stack size 24 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[18e]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[19a]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[19b]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1c3]"></a>RMP_Clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rmp_kernel.o(i.RMP_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RMP_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>RMP_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rmp_kernel.o(i.RMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = RMP_Init &rArr; RMP_Init_Hook &rArr; RMP_Thd_Crt &rArr; RMP_Unlock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Plat_Hook
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Idle
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Lock_Sched
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmp_kernel.o(i.main)
</UL>
<P><STRONG><a name="[1c0]"></a>RMP_Init_Hook</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, test_lua.o(i.RMP_Init_Hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = RMP_Init_Hook &rArr; RMP_Thd_Crt &rArr; RMP_Unlock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Crt
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[1c2]"></a>RMP_Init_Idle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_lua.o(i.RMP_Init_Idle))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[1ca]"></a>RMP_List_Crt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rmp_kernel.o(i.RMP_List_Crt))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Crt
</UL>

<P><STRONG><a name="[1d2]"></a>RMP_List_Del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rmp_kernel.o(i.RMP_List_Del))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_High_Rdy
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Timer_Proc
</UL>

<P><STRONG><a name="[1d3]"></a>RMP_List_Ins</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rmp_kernel.o(i.RMP_List_Ins))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_High_Rdy
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Set_Rdy
</UL>

<P><STRONG><a name="[172]"></a>RMP_Load_Ctx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rmp_kernel.o(i.RMP_Load_Ctx))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1be]"></a>RMP_Lock_Sched</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rmp_kernel.o(i.RMP_Lock_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = RMP_Lock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Mask_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Crt
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[1c7]"></a>RMP_Print_Int</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, rmp_kernel.o(i.RMP_Print_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RMP_Print_Int
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[1c9]"></a>RMP_Print_String</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rmp_kernel.o(i.RMP_Print_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RMP_Print_String
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[1c8]"></a>RMP_Putchar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rmp_platform_cmx.o(i.RMP_Putchar))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Print_String
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Print_Int
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_lua_writestring
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_lua_writeline
</UL>

<P><STRONG><a name="[170]"></a>RMP_Save_Ctx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rmp_kernel.o(i.RMP_Save_Ctx))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1c4]"></a>RMP_Sem_Crt</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rmp_kernel.o(i.RMP_Sem_Crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = RMP_Sem_Crt &rArr; RMP_Unlock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Lock_Sched
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Crt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
</UL>

<P><STRONG><a name="[1c5]"></a>RMP_Thd_Crt</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, rmp_kernel.o(i.RMP_Thd_Crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = RMP_Thd_Crt &rArr; RMP_Unlock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Stack_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Lock_Sched
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Crt
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Set_Rdy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
</UL>

<P><STRONG><a name="[1c1]"></a>RMP_Unlock_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rmp_kernel.o(i.RMP_Unlock_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = RMP_Unlock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Yield
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Mask_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Crt
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[1ce]"></a>RMP_lua_writeline</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, test_lua.o(i.RMP_lua_writeline))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RMP_lua_writeline
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
</UL>

<P><STRONG><a name="[1cf]"></a>RMP_lua_writestring</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, test_lua.o(i.RMP_lua_writestring))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RMP_lua_writestring
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
</UL>

<P><STRONG><a name="[8a]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_stm32f7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(.text)
</UL>
<P><STRONG><a name="[19d]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[19e]"></a>UART_CheckIdleState</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[19c]"></a>UART_SetConfig</STRONG> (Thumb, 858 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1d0]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[171]"></a>_RMP_Get_High_Rdy</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, rmp_kernel.o(i._RMP_Get_High_Rdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _RMP_Get_High_Rdy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_MSB_Get
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Ins
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Del
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1d4]"></a>_RMP_Low_Level_Init</STRONG> (Thumb, 692 bytes, Stack size 224 bytes, rmp_platform_cmx.o(i._RMP_Low_Level_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _RMP_Low_Level_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Disable_Int
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Print_String
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Print_Int
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bf]"></a>_RMP_Plat_Hook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rmp_platform_cmx.o(i._RMP_Plat_Hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _RMP_Plat_Hook
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Enable_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[1cb]"></a>_RMP_Stack_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rmp_platform_cmx.o(i._RMP_Stack_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
</UL>

<P><STRONG><a name="[173]"></a>_RMP_Tick_Handler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rmp_kernel.o(i._RMP_Tick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = _RMP_Tick_Handler &rArr; _RMP_Timer_Proc &rArr; _RMP_Set_Rdy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Yield
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Timer_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1dc]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[50a]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[310]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
</UL>

<P><STRONG><a name="[50b]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[50c]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[1de]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[50d]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[219]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quotefloat
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[50e]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[50f]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1e4]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[341]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
</UL>

<P><STRONG><a name="[510]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[3e0]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alloc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[1df]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[1e1]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[1e2]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1e3]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[1e6]"></a>__kernel_tan</STRONG> (Thumb, 586 bytes, Stack size 80 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
</UL>

<P><STRONG><a name="[1e7]"></a>__malloc$realloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __malloc$realloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[1e9]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[1ea]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1eb]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1ec]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[1ed]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1e5]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[511]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[512]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[513]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1f3]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[16f]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1f2]"></a>acos</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, acos.o(i.acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = acos &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_acos
</UL>

<P><STRONG><a name="[22e]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = asin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_asin
</UL>

<P><STRONG><a name="[23b]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[23c]"></a>atan2</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
</UL>

<P><STRONG><a name="[28a]"></a>ceil</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ceil &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
</UL>

<P><STRONG><a name="[2fe]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_cos
</UL>

<P><STRONG><a name="[32e]"></a>difftime</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, difftime.o(i.difftime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_difftime
</UL>

<P><STRONG><a name="[4bf]"></a>exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, test_lua.o(i.exit))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
</UL>

<P><STRONG><a name="[345]"></a>exp</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, exp.o(i.exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = exp &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_exp
</UL>

<P><STRONG><a name="[311]"></a>fgets</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fgets.o(i.fgets))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fgets
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
</UL>

<P><STRONG><a name="[37c]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
</UL>

<P><STRONG><a name="[37d]"></a>fmod</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fmod.o(i.fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fmod &rArr; _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
</UL>

<P><STRONG><a name="[92]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0fprintf)
</UL>
<P><STRONG><a name="[387]"></a>fread</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, fread.o(i.fread))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fread
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getF
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chars
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all
</UL>

<P><STRONG><a name="[392]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
</UL>

<P><STRONG><a name="[39d]"></a>fwrite</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, fwrite.o(i.fwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fwrite &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
</UL>

<P><STRONG><a name="[3ab]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(i.getc))
<BR><BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipcomment
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipBOM
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_eof
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextc
</UL>

<P><STRONG><a name="[408]"></a>log</STRONG> (Thumb, 808 bytes, Stack size 96 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[409]"></a>log10</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, log10.o(i.log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
</UL>

<P><STRONG><a name="[40a]"></a>log2</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, log2.o(i.log2))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = log2 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
</UL>

<P><STRONG><a name="[20f]"></a>luaC_barrier_</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lgc.o(i.luaC_barrier_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_initupvals
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
</UL>

<P><STRONG><a name="[262]"></a>luaC_barrierback_</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lgc.o(i.luaC_barrierback_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaC_barrierback_
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgclist
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setiuservalue
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[41b]"></a>luaC_changemode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lgc.o(i.luaC_changemode))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = luaC_changemode &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterinc
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entergen
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
</UL>

<P><STRONG><a name="[41c]"></a>luaC_checkfinalizer</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, lgc.o(i.luaC_checkfinalizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = luaC_checkfinalizer &rArr; sweeptolive &rArr; sweeplist &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_close &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeptolive
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
</UL>

<P><STRONG><a name="[481]"></a>luaC_fix</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lgc.o(i.luaC_fix))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
</UL>

<P><STRONG><a name="[2bc]"></a>luaC_freeallobjects</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lgc.o(i.luaC_freeallobjects))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = luaC_freeallobjects &rArr; luaC_changemode &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_changemode
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separatetobefnz
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deletelist
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callallpendingfinalizers
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[3c7]"></a>luaC_fullgc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lgc.o(i.luaC_fullgc))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = luaC_fullgc &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullinc
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullgen
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;growstrtab
</UL>

<P><STRONG><a name="[30e]"></a>luaC_newobj</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lgc.o(i.luaC_newobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_findupval
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_initupvals
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newCclosure
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstrobj
</UL>

<P><STRONG><a name="[4c9]"></a>luaC_protobarrier_</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lgc.o(i.luaC_protobarrier_))
<BR><BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
</UL>

<P><STRONG><a name="[337]"></a>luaC_runtilstate</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lgc.o(i.luaC_runtilstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullinc
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entergen
</UL>

<P><STRONG><a name="[2b9]"></a>luaC_step</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lgc.o(i.luaC_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incstep
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genstep
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pretailcall
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdatauv
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_getvarargs
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_adjustvarargs
</UL>

<P><STRONG><a name="[41e]"></a>luaD_call</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, ldo.o(i.luaD_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + In Cycle
<LI>Call Chain = luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_extendCI
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_tryfuncTM
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>

<P><STRONG><a name="[333]"></a>luaD_callnoyield</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ldo.o(i.luaD_callnoyield))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = luaD_callnoyield &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_call
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dothecall
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>

<P><STRONG><a name="[41f]"></a>luaD_growstack</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ldo.o(i.luaD_growstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + In Cycle
<LI>Call Chain = luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pretailcall
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_getvarargs
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_adjustvarargs
</UL>

<P><STRONG><a name="[421]"></a>luaD_hook</STRONG> (Thumb, 182 bytes, Stack size 152 bytes, ldo.o(i.luaD_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hookcall
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rethook
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>

<P><STRONG><a name="[425]"></a>luaD_hookcall</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ldo.o(i.luaD_hookcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = luaD_hookcall &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[426]"></a>luaD_inctop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ldo.o(i.luaD_inctop))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = luaD_inctop &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
</UL>

<P><STRONG><a name="[18a]"></a>luaD_pcall</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, ldo.o(i.luaD_pcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>

<P><STRONG><a name="[376]"></a>luaD_poscall</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ldo.o(i.luaD_poscall))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = luaD_poscall &rArr; rethook &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rethook
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveresults
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishCcall
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>

<P><STRONG><a name="[42c]"></a>luaD_pretailcall</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, ldo.o(i.luaD_pretailcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = luaD_pretailcall &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[42d]"></a>luaD_protectedparser</STRONG> (Thumb, 144 bytes, Stack size 88 bytes, ldo.o(i.luaD_protectedparser))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = luaD_protectedparser &rArr; luaM_saferealloc_ &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>

<P><STRONG><a name="[427]"></a>luaD_rawrunprotected</STRONG> (Thumb, 64 bytes, Stack size 200 bytes, ldo.o(i.luaD_rawrunprotected))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
</UL>

<P><STRONG><a name="[424]"></a>luaD_reallocstack</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ldo.o(i.luaD_reallocstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctstack
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>

<P><STRONG><a name="[429]"></a>luaD_shrinkstack</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ldo.o(i.luaD_shrinkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = luaD_shrinkstack &rArr;  luaD_reallocstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_shrinkCI
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackinuse
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversethread
</UL>

<P><STRONG><a name="[18c]"></a>luaD_throw</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ldo.o(i.luaD_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + In Cycle
<LI>Call Chain = luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_yieldk
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_shrinkvector_
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;growstrtab
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_incCcalls
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[423]"></a>luaD_tryfuncTM</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ldo.o(i.luaD_tryfuncTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = luaD_tryfuncTM &rArr; luaG_typeerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>

<P><STRONG><a name="[420]"></a>luaE_extendCI</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lstate.o(i.luaE_extendCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = luaE_extendCI &rArr; luaE_incCcalls &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_incCcalls
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>

<P><STRONG><a name="[390]"></a>luaE_freeCI</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lstate.o(i.luaE_freeCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = luaE_freeCI &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
</UL>

<P><STRONG><a name="[38e]"></a>luaE_freethread</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lstate.o(i.luaE_freethread))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = luaE_freethread &rArr; luaF_close &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[234]"></a>luaE_incCcalls</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lstate.o(i.luaE_incCcalls))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = luaE_incCcalls &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_extendCI
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[3a9]"></a>luaE_setdebt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lstate.o(i.luaE_setdebt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaE_setdebt
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpause
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incstep
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genstep
</UL>

<P><STRONG><a name="[433]"></a>luaE_shrinkCI</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lstate.o(i.luaE_shrinkCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = luaE_shrinkCI &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>

<P><STRONG><a name="[2bb]"></a>luaF_close</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lfunc.o(i.luaF_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = luaF_close &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_unlinkupval
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[436]"></a>luaF_findupval</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, lfunc.o(i.luaF_findupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = luaF_findupval &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
</UL>

<P><STRONG><a name="[38b]"></a>luaF_freeproto</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lfunc.o(i.luaF_freeproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = luaF_freeproto &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[372]"></a>luaF_getlocalname</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, lfunc.o(i.luaF_getlocalname))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaF_getlocalname
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getlocal
</UL>

<P><STRONG><a name="[358]"></a>luaF_initupvals</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lfunc.o(i.luaF_initupvals))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = luaF_initupvals &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[437]"></a>luaF_newCclosure</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lfunc.o(i.luaF_newCclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = luaF_newCclosure &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>

<P><STRONG><a name="[438]"></a>luaF_newLclosure</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lfunc.o(i.luaF_newLclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = luaF_newLclosure &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
</UL>

<P><STRONG><a name="[1bb]"></a>luaF_newproto</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lfunc.o(i.luaF_newproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = luaF_newproto &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
</UL>

<P><STRONG><a name="[391]"></a>luaF_unlinkupval</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lfunc.o(i.luaF_unlinkupval))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeupval
</UL>

<P><STRONG><a name="[3f8]"></a>luaG_addinfo</STRONG> (Thumb, 58 bytes, Stack size 88 bytes, ldebug.o(i.luaG_addinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>

<P><STRONG><a name="[439]"></a>luaG_concaterror</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ldebug.o(i.luaG_concaterror))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = luaG_concaterror &rArr; luaG_typeerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[43a]"></a>luaG_errormsg</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ldebug.o(i.luaG_errormsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = luaG_errormsg &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
</UL>

<P><STRONG><a name="[28c]"></a>luaG_getfuncline</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ldebug.o(i.luaG_getfuncline))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = luaG_getfuncline &rArr; getbaseline
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getbaseline
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextline
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentline
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changedline
</UL>

<P><STRONG><a name="[43c]"></a>luaG_opinterror</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ldebug.o(i.luaG_opinterror))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = luaG_opinterror &rArr; luaG_typeerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[43d]"></a>luaG_ordererror</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ldebug.o(i.luaG_ordererror))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + In Cycle
<LI>Call Chain = luaG_ordererror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>

<P><STRONG><a name="[36b]"></a>luaG_runerror</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ldebug.o(i.luaG_runerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentline
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_yieldk
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_incCcalls
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>

<P><STRONG><a name="[440]"></a>luaG_tointerror</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ldebug.o(i.luaG_tointerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + In Cycle
<LI>Call Chain = luaG_tointerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[443]"></a>luaG_traceexec</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, ldebug.o(i.luaG_traceexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = luaG_traceexec &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_getfuncline
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changedline
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[435]"></a>luaG_typeerror</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ldebug.o(i.luaG_typeerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + In Cycle
<LI>Call Chain = luaG_typeerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_tryfuncTM
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_concaterror
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_keydef
</UL>

<P><STRONG><a name="[38d]"></a>luaH_free</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ltable.o(i.luaH_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = luaH_free &rArr; freehash &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freehash
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[444]"></a>luaH_get</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ltable.o(i.luaH_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = luaH_get &rArr; getgeneric &rArr; mainpositionTV &rArr; mainposition &rArr; l_hashfloat &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_keydef
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
</UL>

<P><STRONG><a name="[3c9]"></a>luaH_getint</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ltable.o(i.luaH_getint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaH_getint
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_search
</UL>

<P><STRONG><a name="[446]"></a>luaH_getn</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ltable.o(i.luaH_getn))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = luaH_getn &rArr; hash_search &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_search
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
</UL>

<P><STRONG><a name="[445]"></a>luaH_getshortstr</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ltable.o(i.luaH_getshortstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
</UL>

<P><STRONG><a name="[256]"></a>luaH_getstr</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ltable.o(i.luaH_getstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = luaH_getstr &rArr; getgeneric &rArr; mainpositionTV &rArr; mainposition &rArr; l_hashfloat &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
</UL>

<P><STRONG><a name="[2ea]"></a>luaH_new</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ltable.o(i.luaH_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = luaH_new &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_registry
</UL>

<P><STRONG><a name="[448]"></a>luaH_newkey</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, ltable.o(i.luaH_newkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainpositionTV
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfreepos
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
</UL>

<P><STRONG><a name="[44d]"></a>luaH_next</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, ltable.o(i.luaH_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaH_next &rArr; findindex &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
</UL>

<P><STRONG><a name="[3cf]"></a>luaH_resize</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, ltable.o(i.luaH_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + In Cycle
<LI>Call Chain = luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinsert
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freehash
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangehashpart
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_registry
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resizearray
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[450]"></a>luaH_resizearray</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ltable.o(i.luaH_resizearray))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = luaH_resizearray &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[20c]"></a>luaH_set</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ltable.o(i.luaH_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + In Cycle
<LI>Call Chain = luaH_set &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinsert
</UL>

<P><STRONG><a name="[2ec]"></a>luaH_setint</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, ltable.o(i.luaH_setint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_registry
</UL>

<P><STRONG><a name="[384]"></a>luaK_checkstack</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcode.o(i.luaK_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = luaK_checkstack &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
</UL>

<P><STRONG><a name="[296]"></a>luaK_codeABCk</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, lcode.o(i.luaK_codeABCk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeundef
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeindexed
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeisdef
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeconcat
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebitwise
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebini
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_loadbool
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeABRK
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvararg
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixbreaks
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_conflict
</UL>

<P><STRONG><a name="[2cf]"></a>luaK_codeABx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lcode.o(i.luaK_codeABx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeclosure
</UL>

<P><STRONG><a name="[452]"></a>luaK_codeAsBx</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lcode.o(i.luaK_codeAsBx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = luaK_codeAsBx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_float
</UL>

<P><STRONG><a name="[236]"></a>luaK_codeundef</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lcode.o(i.luaK_codeundef))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = luaK_codeundef &rArr; normalizeindexed &rArr; luaK_int &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeindexed
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[281]"></a>luaK_concat</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcode.o(i.luaK_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movegotosout
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakstat
</UL>

<P><STRONG><a name="[2de]"></a>luaK_dischargevars</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, lcode.o(i.luaK_dischargevars))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = luaK_dischargevars &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setoneret
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeregs
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
</UL>

<P><STRONG><a name="[2c4]"></a>luaK_exp2RK</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lcode.o(i.luaK_exp2RK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nilK
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boolK
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeeq
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebitwise
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeABRK
</UL>

<P><STRONG><a name="[2cb]"></a>luaK_exp2anyreg</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2anyreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeeq
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebitwise
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebini
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
</UL>

<P><STRONG><a name="[361]"></a>luaK_exp2anyregup</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2anyregup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = luaK_exp2anyregup &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
</UL>

<P><STRONG><a name="[226]"></a>luaK_exp2nextreg</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2nextreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlistfield
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeclosure
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closelistfield
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[454]"></a>luaK_exp2val</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2val))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
</UL>

<P><STRONG><a name="[2b7]"></a>luaK_finish</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lcode.o(i.luaK_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaK_finish &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finaltarget
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[2d4]"></a>luaK_fixline</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lcode.o(i.luaK_fixline))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = luaK_fixline &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeconcat
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[2c6]"></a>luaK_getlabel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcode.o(i.luaK_getlabel))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_loadbool
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[459]"></a>luaK_goiffalse</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lcode.o(i.luaK_goiffalse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = luaK_goiffalse &rArr; jumponcond &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
</UL>

<P><STRONG><a name="[2ef]"></a>luaK_goiftrue</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lcode.o(i.luaK_goiftrue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = luaK_goiftrue &rArr; jumponcond &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negatecondition
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
</UL>

<P><STRONG><a name="[362]"></a>luaK_indexed</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lcode.o(i.luaK_indexed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = luaK_indexed &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isKstr
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCint
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
</UL>

<P><STRONG><a name="[45b]"></a>luaK_infix</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, lcode.o(i.luaK_infix))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaK_infix &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonumeral
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[332]"></a>luaK_int</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lcode.o(i.luaK_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = luaK_int &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeAsBx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fitsBx
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeindexed
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
</UL>

<P><STRONG><a name="[347]"></a>luaK_isKint</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcode.o(i.luaK_isKint))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCint
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCint
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
</UL>

<P><STRONG><a name="[2f0]"></a>luaK_jump</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcode.o(i.luaK_jump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = luaK_jump &rArr; codesJ &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codesJ
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[227]"></a>luaK_nil</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lcode.o(i.luaK_nil))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = luaK_nil &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;previousinstruction
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[45c]"></a>luaK_patchclose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lcode.o(i.luaK_patchclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaK_patchclose &rArr; getjump
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solvelabel
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movegotosout
</UL>

<P><STRONG><a name="[2c0]"></a>luaK_patchgoto</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lcode.o(i.luaK_patchgoto))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaK_patchgoto &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixbreaks
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
</UL>

<P><STRONG><a name="[45e]"></a>luaK_patchlist</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, lcode.o(i.luaK_patchlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = luaK_patchlist &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
</UL>

<P><STRONG><a name="[34a]"></a>luaK_patchtohere</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcode.o(i.luaK_patchtohere))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = luaK_patchtohere &rArr; luaK_patchlist &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[45f]"></a>luaK_posfix</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, lcode.o(i.luaK_posfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = luaK_posfix &rArr; codecommutative &rArr; codearith &rArr; codebini &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapexps
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCint
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeshift
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeisdef
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeeq
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeconcat
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecommutative
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebitwise
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebini
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codearith
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[460]"></a>luaK_prefix</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lcode.o(i.luaK_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = luaK_prefix &rArr; codeunexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[225]"></a>luaK_reserveregs</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcode.o(i.luaK_reserveregs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = luaK_reserveregs &rArr; luaK_checkstack &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeindexed
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_conflict
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[2b6]"></a>luaK_ret</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, lcode.o(i.luaK_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = luaK_ret &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[461]"></a>luaK_self</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcode.o(i.luaK_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = luaK_self &rArr; codeABRK &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeABRK
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[2ad]"></a>luaK_semerror</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcode.o(i.luaK_semerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = luaK_semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeindexed
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrepeated
</UL>

<P><STRONG><a name="[2c2]"></a>luaK_setlist</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lcode.o(i.luaK_setlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = luaK_setlist &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeextraarg
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlistfield
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closelistfield
</UL>

<P><STRONG><a name="[238]"></a>luaK_setoneret</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lcode.o(i.luaK_setoneret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaK_setoneret
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[224]"></a>luaK_setreturns</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lcode.o(i.luaK_setreturns))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = luaK_setreturns &rArr; luaK_reserveregs &rArr; luaK_checkstack &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlistfield
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[239]"></a>luaK_storevar</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, lcode.o(i.luaK_storevar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaK_storevar &rArr; codeABRK &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeABRK
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[2e7]"></a>luaK_stringK</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, lcode.o(i.luaK_stringK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = luaK_stringK &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
</UL>

<P><STRONG><a name="[1f9]"></a>luaL_addlstring</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_addlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
</UL>

<P><STRONG><a name="[21c]"></a>luaL_addstring</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_addstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
</UL>

<P><STRONG><a name="[1fe]"></a>luaL_addvalue</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_addvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
</UL>

<P><STRONG><a name="[21a]"></a>luaL_argerror</STRONG> (Thumb, 122 bytes, Stack size 128 bytes, lauxlib.o(i.luaL_argerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getco
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interror
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checktime
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkoption
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushutfchar
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
</UL>

<P><STRONG><a name="[36d]"></a>luaL_buffinit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lauxlib.o(i.luaL_buffinit))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chars
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
</UL>

<P><STRONG><a name="[463]"></a>luaL_buffinitsize</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_buffinitsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = luaL_buffinitsize &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
</UL>

<P><STRONG><a name="[464]"></a>luaL_callmeta</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_callmeta))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = luaL_callmeta &rArr; lua_callk &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
</UL>

<P><STRONG><a name="[321]"></a>luaL_checkany</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checkany))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setupvalue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getmetatable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
</UL>

<P><STRONG><a name="[26b]"></a>luaL_checkinteger</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checkinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interror
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checktime
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ult
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushutfchar
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
</UL>

<P><STRONG><a name="[282]"></a>luaL_checklstring</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checklstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rename
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_remove
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_getenv
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_preload
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_len
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
</UL>

<P><STRONG><a name="[466]"></a>luaL_checknumber</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checknumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optnumber
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_tan
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sin
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_rad
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_exp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_deg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_cos
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_asin
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_acos
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[35a]"></a>luaL_checkoption</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_checkoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_setlocale
</UL>

<P><STRONG><a name="[2e3]"></a>luaL_checkstack</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
</UL>

<P><STRONG><a name="[26c]"></a>luaL_checktype</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checktype))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>

<P><STRONG><a name="[24a]"></a>luaL_checkudata</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checkudata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pclose
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_noclose
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_fclose
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_tostring
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_close
</UL>

<P><STRONG><a name="[468]"></a>luaL_checkversion_</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, lauxlib.o(i.luaL_checkversion_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaL_checkversion_ &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_version
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_debug
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_coroutine
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_os
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
</UL>

<P><STRONG><a name="[1f8]"></a>luaL_error</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmpname
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackint
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trymt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbalance
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnumlimit
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;classend
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_capture
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capture_to_close
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
</UL>

<P><STRONG><a name="[3db]"></a>luaL_execresult</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_execresult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = luaL_execresult &rArr; luaL_fileresult &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pclose
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_execute
</UL>

<P><STRONG><a name="[34f]"></a>luaL_fileresult</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_fileresult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = luaL_fileresult &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_tmpfile
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_flush
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_fclose
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_flush
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rename
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_remove
</UL>

<P><STRONG><a name="[414]"></a>luaL_getmetafield</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_getmetafield))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = luaL_getmetafield &rArr; lua_pushstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trymt
</UL>

<P><STRONG><a name="[46a]"></a>luaL_getsubtable</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_getsubtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = luaL_getsubtable &rArr; lua_createtable &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[405]"></a>luaL_gsub</STRONG> (Thumb, 100 bytes, Stack size 4192 bytes, lauxlib.o(i.luaL_gsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 5976<LI>Call Chain = luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
</UL>

<P><STRONG><a name="[221]"></a>luaL_len</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = luaL_len &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
</UL>

<P><STRONG><a name="[312]"></a>luaL_loadbufferx</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, lauxlib.o(i.luaL_loadbufferx))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = luaL_loadbufferx &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaM_saferealloc_ &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
</UL>

<P><STRONG><a name="[413]"></a>luaL_loadfilex</STRONG> (Thumb, 266 bytes, Stack size 560 bytes, lauxlib.o(i.luaL_loadfilex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = luaL_loadfilex &rArr; errfile &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipcomment
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
</UL>

<P><STRONG><a name="[184]"></a>luaL_loadstring</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_loadstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = luaL_loadstring &rArr; luaL_loadbufferx &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaM_saferealloc_ &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
</UL>

<P><STRONG><a name="[307]"></a>luaL_newmetatable</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_newmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = luaL_newmetatable &rArr; lua_createtable &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
</UL>

<P><STRONG><a name="[182]"></a>luaL_newstate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lauxlib.o(i.luaL_newstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = luaL_newstate &rArr; lua_newstate &rArr; close_state &rArr; luaC_freeallobjects &rArr; luaC_changemode &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_atpanic
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
</UL>

<P><STRONG><a name="[183]"></a>luaL_openlibs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, linit.o(i.luaL_openlibs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = luaL_openlibs &rArr; luaL_requiref &rArr; lua_callk &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
</UL>

<P><STRONG><a name="[283]"></a>luaL_optinteger</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_optinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getuservalue
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
</UL>

<P><STRONG><a name="[319]"></a>luaL_optlstring</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_optlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_setlocale
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_execute
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
</UL>

<P><STRONG><a name="[470]"></a>luaL_optnumber</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_optnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = luaL_optnumber &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
</UL>

<P><STRONG><a name="[1f7]"></a>luaL_prepbuffsize</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_prepbuffsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chars
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packint
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[36f]"></a>luaL_pushresult</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_pushresult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = luaL_pushresult &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chars
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
</UL>

<P><STRONG><a name="[472]"></a>luaL_pushresultsize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_pushresultsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = luaL_pushresultsize &rArr; luaL_pushresult &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
</UL>

<P><STRONG><a name="[46f]"></a>luaL_requiref</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_requiref))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = luaL_requiref &rArr; lua_callk &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
</UL>

<P><STRONG><a name="[308]"></a>luaL_setfuncs</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_setfuncs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_debug
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_coroutine
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_os
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setrandfunc
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
</UL>

<P><STRONG><a name="[474]"></a>luaL_setmetatable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = luaL_setmetatable &rArr; lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
</UL>

<P><STRONG><a name="[3dc]"></a>luaL_testudata</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_testudata))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = luaL_testudata &rArr; lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
</UL>

<P><STRONG><a name="[1fb]"></a>luaL_tolstring</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_tolstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = luaL_tolstring &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[328]"></a>luaL_traceback</STRONG> (Thumb, 228 bytes, Stack size 144 bytes, lauxlib.o(i.luaL_traceback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = luaL_traceback &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlevel
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
</UL>

<P><STRONG><a name="[40d]"></a>luaL_where</STRONG> (Thumb, 64 bytes, Stack size 120 bytes, lauxlib.o(i.luaL_where))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>

<P><STRONG><a name="[2bd]"></a>luaM_free_</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lmem.o(i.luaM_free_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeproto
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_shrinkCI
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeupval
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freeCI
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freehash
</UL>

<P><STRONG><a name="[20e]"></a>luaM_growaux_</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, lmem.o(i.luaM_growaux_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
</UL>

<P><STRONG><a name="[1b1]"></a>luaM_malloc_</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lmem.o(i.luaM_malloc_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_extendCI
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCode
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
</UL>

<P><STRONG><a name="[430]"></a>luaM_realloc_</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lmem.o(i.luaM_realloc_))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = luaM_realloc_ &rArr; luaC_fullgc &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
</UL>

<P><STRONG><a name="[42e]"></a>luaM_saferealloc_</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lmem.o(i.luaM_saferealloc_))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = luaM_saferealloc_ &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
</UL>

<P><STRONG><a name="[2b8]"></a>luaM_shrinkvector_</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, lmem.o(i.luaM_shrinkvector_))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = luaM_shrinkvector_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[1b0]"></a>luaM_toobig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lmem.o(i.luaM_toobig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = luaM_toobig &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCode
</UL>

<P><STRONG><a name="[477]"></a>luaO_arith</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lobject.o(i.luaO_arith))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = luaO_arith &rArr; luaT_trybinTM &rArr; callbinTM &rArr; luaT_callTMres &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_arith
</UL>

<P><STRONG><a name="[301]"></a>luaO_ceillog2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lobject.o(i.luaO_ceillog2))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
</UL>

<P><STRONG><a name="[397]"></a>luaO_chunkid</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, lobject.o(i.luaO_chunkid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaO_chunkid
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcinfo
</UL>

<P><STRONG><a name="[48a]"></a>luaO_fb2int</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lobject.o(i.luaO_fb2int))
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[3b3]"></a>luaO_hexavalue</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lobject.o(i.luaO_hexavalue))
<BR><BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2int
</UL>

<P><STRONG><a name="[2f8]"></a>luaO_int2fb</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lobject.o(i.luaO_int2fb))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[18b]"></a>luaO_pushfstring</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, lobject.o(i.luaO_pushfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txtToken
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrepeated
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[43f]"></a>luaO_pushvfstring</STRONG> (Thumb, 458 bytes, Stack size 64 bytes, lobject.o(i.luaO_pushvfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + In Cycle
<LI>Call Chain = luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_utf8esc
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>

<P><STRONG><a name="[2f4]"></a>luaO_rawarith</STRONG> (Thumb, 462 bytes, Stack size 80 bytes, lobject.o(i.luaO_rawarith))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = luaO_rawarith &rArr; numarith &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>

<P><STRONG><a name="[47e]"></a>luaO_str2num</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, lobject.o(i.luaO_str2num))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2int
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
</UL>

<P><STRONG><a name="[47a]"></a>luaO_tostring</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, lobject.o(i.luaO_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = luaO_tostring &rArr; luaS_newlstr &rArr; internshrstr &rArr; createstrobj &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
</UL>

<P><STRONG><a name="[47b]"></a>luaO_utf8esc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lobject.o(i.luaO_utf8esc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaO_utf8esc
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8esc
</UL>

<P><STRONG><a name="[247]"></a>luaS_clearcache</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lstring.o(i.luaS_clearcache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaS_clearcache
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[1bd]"></a>luaS_createlngstrobj</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lstring.o(i.luaS_createlngstrobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = luaS_createlngstrobj &rArr; createstrobj &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstrobj
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
</UL>

<P><STRONG><a name="[33f]"></a>luaS_eqlngstr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lstring.o(i.luaS_eqlngstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = luaS_eqlngstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equalkey
</UL>

<P><STRONG><a name="[3d5]"></a>luaS_hash</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lstring.o(i.luaS_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaS_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hashlongstr
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeseed
</UL>

<P><STRONG><a name="[47f]"></a>luaS_hashlongstr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lstring.o(i.luaS_hashlongstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaS_hashlongstr &rArr; luaS_hash
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>

<P><STRONG><a name="[352]"></a>luaS_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lstring.o(i.luaS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = luaS_init &rArr; luaS_newlstr &rArr; internshrstr &rArr; createstrobj &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tablerehash
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[255]"></a>luaS_new</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, lstring.o(i.luaS_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = luaS_new &rArr; luaS_newlstr &rArr; internshrstr &rArr; createstrobj &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_error
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
</UL>

<P><STRONG><a name="[1bc]"></a>luaS_newlstr</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lstring.o(i.luaS_newlstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = luaS_newlstr &rArr; internshrstr &rArr; createstrobj &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
</UL>

<P><STRONG><a name="[482]"></a>luaS_newudata</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lstring.o(i.luaS_newudata))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = luaS_newudata &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdatauv
</UL>

<P><STRONG><a name="[38f]"></a>luaS_remove</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, lstring.o(i.luaS_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaS_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[294]"></a>luaS_resize</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lstring.o(i.luaS_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + In Cycle
<LI>Call Chain = luaS_resize &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tablerehash
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSizes
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;growstrtab
</UL>

<P><STRONG><a name="[483]"></a>luaT_adjustvarargs</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, ltm.o(i.luaT_adjustvarargs))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = luaT_adjustvarargs &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[484]"></a>luaT_callTM</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ltm.o(i.luaT_callTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = luaT_callTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
</UL>

<P><STRONG><a name="[288]"></a>luaT_callTMres</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ltm.o(i.luaT_callTMres))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = luaT_callTMres &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_keydef
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callbinTM
</UL>

<P><STRONG><a name="[3f6]"></a>luaT_callorderTM</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ltm.o(i.luaT_callorderTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + In Cycle
<LI>Call Chain = luaT_callorderTM &rArr;  callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callbinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessthanothers
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessequalothers
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderiTM
</UL>

<P><STRONG><a name="[485]"></a>luaT_callorderiTM</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, ltm.o(i.luaT_callorderiTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = luaT_callorderiTM &rArr; luaT_callorderTM &rArr;  callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[41d]"></a>luaT_gettm</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ltm.o(i.luaT_gettm))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = luaT_gettm &rArr; luaH_getshortstr
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_keydef
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
</UL>

<P><STRONG><a name="[189]"></a>luaT_gettmbyobj</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ltm.o(i.luaT_gettmbyobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = luaT_gettmbyobj &rArr; luaH_getshortstr
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_tryfuncTM
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_keydef
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callbinTM
</UL>

<P><STRONG><a name="[486]"></a>luaT_getvarargs</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ltm.o(i.luaT_getvarargs))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = luaT_getvarargs &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[353]"></a>luaT_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ltm.o(i.luaT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = luaT_init &rArr; luaS_new &rArr; luaS_newlstr &rArr; internshrstr &rArr; createstrobj &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[25a]"></a>luaT_keydef</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, ltm.o(i.luaT_keydef))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + In Cycle
<LI>Call Chain = luaT_keydef &rArr;  luaT_callTMres (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxkeydef
</UL>

<P><STRONG><a name="[43e]"></a>luaT_objtypename</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ltm.o(i.luaT_objtypename))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; internshrstr &rArr; createstrobj &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
</UL>

<P><STRONG><a name="[478]"></a>luaT_trybinTM</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ltm.o(i.luaT_trybinTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = luaT_trybinTM &rArr; callbinTM &rArr; luaT_callTMres &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_concaterror
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callbinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinassocTM
</UL>

<P><STRONG><a name="[487]"></a>luaT_trybinassocTM</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ltm.o(i.luaT_trybinassocTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = luaT_trybinassocTM &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybiniTM
</UL>

<P><STRONG><a name="[488]"></a>luaT_trybiniTM</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, ltm.o(i.luaT_trybiniTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = luaT_trybiniTM &rArr; luaT_trybinassocTM &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinassocTM
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[489]"></a>luaU_dump</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, ldump.o(i.luaU_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = luaU_dump &rArr; DumpFunction &rArr; DumpConstants &rArr; DumpString &rArr; DumpSize &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_dump
</UL>

<P><STRONG><a name="[356]"></a>luaU_undump</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lundump.o(i.luaU_undump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = luaU_undump &rArr; LoadFunction &rArr; LoadConstants &rArr; LoadString &rArr; LoadSize &rArr; LoadByte &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[47c]"></a>luaV_concat</STRONG> (Thumb, 454 bytes, Stack size 72 bytes, lvm.o(i.luaV_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + In Cycle
<LI>Call Chain = luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy2buff
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishOp
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>

<P><STRONG><a name="[3d2]"></a>luaV_div</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, lvm.o(i.luaV_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = luaV_div &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>

<P><STRONG><a name="[20d]"></a>luaV_equalobj</STRONG> (Thumb, 680 bytes, Stack size 56 bytes, lvm.o(i.luaV_equalobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + In Cycle
<LI>Call Chain = luaV_equalobj &rArr;  luaT_callTMres (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_eqlngstr
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>

<P><STRONG><a name="[422]"></a>luaV_execute</STRONG> (Thumb, 11944 bytes, Stack size 120 bytes, lvm.o(i.luaV_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + In Cycle
<LI>Call Chain = luaV_execute &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_tryfuncTM
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pretailcall
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hookcall
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_keydef
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_fb2int
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessthanothers
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessequalothers
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcached
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybiniTM
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinassocTM
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_getvarargs
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderiTM
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_adjustvarargs
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resizearray
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>

<P><STRONG><a name="[48f]"></a>luaV_finishOp</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, lvm.o(i.luaV_finishOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = luaV_finishOp &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
</UL>

<P><STRONG><a name="[257]"></a>luaV_finishget</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, lvm.o(i.luaV_finishget))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + In Cycle
<LI>Call Chain = luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
</UL>

<P><STRONG><a name="[263]"></a>luaV_finishset</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, lvm.o(i.luaV_finishset))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + In Cycle
<LI>Call Chain = luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
</UL>

<P><STRONG><a name="[1a2]"></a>luaV_flttointeger</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, lvm.o(i.luaV_flttointeger))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = luaV_flttointeger &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatI
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTfloatint
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfloatint
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[490]"></a>luaV_lessequal</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lvm.o(i.luaV_lessequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = luaV_lessequal &rArr; lessequalothers &rArr; luaT_callorderTM &rArr;  callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessequalothers
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>

<P><STRONG><a name="[491]"></a>luaV_lessthan</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lvm.o(i.luaV_lessthan))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = luaV_lessthan &rArr; lessthanothers &rArr; luaT_callorderTM &rArr;  callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessthanothers
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>

<P><STRONG><a name="[3d1]"></a>luaV_mod</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lvm.o(i.luaV_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = luaV_mod &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>

<P><STRONG><a name="[48c]"></a>luaV_objlen</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, lvm.o(i.luaV_objlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + In Cycle
<LI>Call Chain = luaV_objlen &rArr;  luaT_callTMres (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
</UL>

<P><STRONG><a name="[3d3]"></a>luaV_shiftl</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lvm.o(i.luaV_shiftl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaV_shiftl
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>

<P><STRONG><a name="[380]"></a>luaV_tointeger</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lvm.o(i.luaV_tointeger))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = luaV_tointeger &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
</UL>

<P><STRONG><a name="[441]"></a>luaV_tointegerns</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lvm.o(i.luaV_tointegerns))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = luaV_tointegerns &rArr; luaV_flttointeger &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
</UL>

<P><STRONG><a name="[381]"></a>luaV_tonumber_</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, lvm.o(i.luaV_tonumber_))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
</UL>

<P><STRONG><a name="[354]"></a>luaX_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, llex.o(i.luaX_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = luaX_init &rArr; luaS_new &rArr; luaS_newlstr &rArr; internshrstr &rArr; createstrobj &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[35d]"></a>luaX_lookahead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, llex.o(i.luaX_lookahead))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = luaX_lookahead &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
</UL>

<P><STRONG><a name="[400]"></a>luaX_newstring</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, llex.o(i.luaX_newstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = luaX_newstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
</UL>

<P><STRONG><a name="[280]"></a>luaX_next</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, llex.o(i.luaX_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakstat
</UL>

<P><STRONG><a name="[492]"></a>luaX_setinput</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, llex.o(i.luaX_setinput))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = luaX_setinput &rArr; luaM_saferealloc_ &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[230]"></a>luaX_syntaxerror</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, llex.o(i.luaX_syntaxerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixforjump
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exprstat
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakstat
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[297]"></a>luaX_token2str</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, llex.o(i.luaX_token2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txtToken
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>

<P><STRONG><a name="[357]"></a>luaY_parser</STRONG> (Thumb, 144 bytes, Stack size 168 bytes, lparser.o(i.luaY_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 2496<LI>Call Chain = luaY_parser &rArr; mainfunc &rArr; statlist &rArr; statement &rArr; repeatstat &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[1ad]"></a>luaZ_fill</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lzio.o(i.luaZ_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next2
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next1
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>

<P><STRONG><a name="[497]"></a>luaZ_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lzio.o(i.luaZ_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaZ_init
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>

<P><STRONG><a name="[1aa]"></a>luaZ_read</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lzio.o(i.luaZ_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = luaZ_read &rArr; luaZ_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>

<P><STRONG><a name="[465]"></a>lua_absindex</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lapi.o(i.lua_absindex))
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
</UL>

<P><STRONG><a name="[22c]"></a>lua_arith</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lapi.o(i.lua_arith))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = lua_arith &rArr; luaO_arith &rArr; luaT_trybinTM &rArr; callbinTM &rArr; luaT_callTMres &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>

<P><STRONG><a name="[46e]"></a>lua_atpanic</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(i.lua_atpanic))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
</UL>

<P><STRONG><a name="[202]"></a>lua_callk</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lapi.o(i.lua_callk))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = lua_callk &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trymt
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
</UL>

<P><STRONG><a name="[25c]"></a>lua_checkstack</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lapi.o(i.lua_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = lua_checkstack &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
</UL>

<P><STRONG><a name="[186]"></a>lua_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lstate.o(i.lua_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lua_close &rArr; close_state &rArr; luaC_freeallobjects &rArr; luaC_changemode &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
</UL>

<P><STRONG><a name="[494]"></a>lua_compare</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lapi.o(i.lua_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lua_compare &rArr; luaV_lessthan &rArr; lessthanothers &rArr; luaT_callorderTM &rArr;  callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
</UL>

<P><STRONG><a name="[365]"></a>lua_concat</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lapi.o(i.lua_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = lua_concat &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[3a6]"></a>lua_copy</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lapi.o(i.lua_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lua_copy &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
</UL>

<P><STRONG><a name="[303]"></a>lua_createtable</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lapi.o(i.lua_createtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lua_createtable &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_debug
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_coroutine
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_os
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
</UL>

<P><STRONG><a name="[495]"></a>lua_dump</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, lapi.o(i.lua_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lua_dump &rArr; luaU_dump &rArr; DumpFunction &rArr; DumpConstants &rArr; DumpString &rArr; DumpSize &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[40e]"></a>lua_error</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lapi.o(i.lua_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = lua_error &rArr; luaG_errormsg &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>

<P><STRONG><a name="[410]"></a>lua_gc</STRONG> (Thumb, 440 bytes, Stack size 56 bytes, lapi.o(i.lua_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lua_gc &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_changemode
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[4d9]"></a>lua_getallocf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(i.lua_getallocf))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>

<P><STRONG><a name="[29c]"></a>lua_getfield</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lapi.o(i.lua_getfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getboolfield
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_preload
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noenv
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclib
</UL>

<P><STRONG><a name="[416]"></a>lua_getglobal</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lapi.o(i.lua_getglobal))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lua_getglobal &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
</UL>

<P><STRONG><a name="[315]"></a>lua_gethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ldebug.o(i.lua_gethook))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[318]"></a>lua_gethookcount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ldebug.o(i.lua_gethookcount))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[314]"></a>lua_gethookmask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ldebug.o(i.lua_gethookmask))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[20a]"></a>lua_geti</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, lapi.o(i.lua_geti))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lua_geti &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
</UL>

<P><STRONG><a name="[31b]"></a>lua_getinfo</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ldebug.o(i.lua_getinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[322]"></a>lua_getiuservalue</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lapi.o(i.lua_getiuservalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lua_getiuservalue &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getuservalue
</UL>

<P><STRONG><a name="[320]"></a>lua_getlocal</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ldebug.o(i.lua_getlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lua_getlocal &rArr; findlocal &rArr; luaF_getlocalname
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
</UL>

<P><STRONG><a name="[2b0]"></a>lua_getmetatable</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lapi.o(i.lua_getmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lua_getmetatable &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getmetatable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>

<P><STRONG><a name="[31a]"></a>lua_getstack</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, ldebug.o(i.lua_getstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lua_getstack
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlevel
</UL>

<P><STRONG><a name="[203]"></a>lua_gettable</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lapi.o(i.lua_gettable))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lua_gettable &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[24c]"></a>lua_gettop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(i.lua_gettop))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yield
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dofilecont
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
</UL>

<P><STRONG><a name="[26d]"></a>lua_getupvalue</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lapi.o(i.lua_getupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lua_getupvalue &rArr; aux_upvalue
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_upvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
</UL>

<P><STRONG><a name="[32a]"></a>lua_iscfunction</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lapi.o(i.lua_iscfunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_iscfunction &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
</UL>

<P><STRONG><a name="[215]"></a>lua_isinteger</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lapi.o(i.lua_isinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_isinteger &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[3d7]"></a>lua_isnumber</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lapi.o(i.lua_isnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lua_isnumber &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interror
</UL>

<P><STRONG><a name="[206]"></a>lua_isstring</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lapi.o(i.lua_isstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_isstring &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
</UL>

<P><STRONG><a name="[41a]"></a>lua_isyieldable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ldo.o(i.lua_isyieldable))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yieldable
</UL>

<P><STRONG><a name="[46c]"></a>lua_len</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lapi.o(i.lua_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lua_len &rArr; luaV_objlen &rArr;  luaT_callTMres (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
</UL>

<P><STRONG><a name="[415]"></a>lua_load</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, lapi.o(i.lua_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = lua_load &rArr; luaD_protectedparser &rArr; luaM_saferealloc_ &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_init
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
</UL>

<P><STRONG><a name="[ab]"></a>lua_newstate</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, lstate.o(i.lua_newstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lua_newstate &rArr; close_state &rArr; luaC_freeallobjects &rArr; luaC_changemode &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preinit_thread
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeseed
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstate.o(i.makeseed)
</UL>
<P><STRONG><a name="[40f]"></a>lua_newthread</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lstate.o(i.lua_newthread))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lua_newthread &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preinit_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
</UL>

<P><STRONG><a name="[3c0]"></a>lua_newuserdatauv</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lapi.o(i.lua_newuserdatauv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lua_newuserdatauv &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setrandfunc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
</UL>

<P><STRONG><a name="[366]"></a>lua_next</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lapi.o(i.lua_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = lua_next &rArr; luaH_next &rArr; findindex &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettable
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[185]"></a>lua_pcallk</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, lapi.o(i.lua_pcallk))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = lua_pcallk &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2stack
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
</UL>

<P><STRONG><a name="[24e]"></a>lua_pushboolean</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lapi.o(i.lua_pushboolean))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsb
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getuservalue
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yieldable
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_corunning
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setboolfield
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_execute
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ult
</UL>

<P><STRONG><a name="[24f]"></a>lua_pushcclosure</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lapi.o(i.lua_pushcclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lua_pushcclosure &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newCclosure
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cowrap
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
</UL>

<P><STRONG><a name="[2ab]"></a>lua_pushfstring</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lapi.o(i.lua_pushfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_tostring
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkoption
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_preload
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushutfchar
</UL>

<P><STRONG><a name="[24d]"></a>lua_pushinteger</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lapi.o(i.lua_pushinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_pushinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsi
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setfield
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_len
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
</UL>

<P><STRONG><a name="[21f]"></a>lua_pushlightuserdata</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(i.lua_pushlightuserdata))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
</UL>

<P><STRONG><a name="[205]"></a>lua_pushlstring</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lapi.o(i.lua_pushlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lua_pushlstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnexttemplate
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[285]"></a>lua_pushnil</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lapi.o(i.lua_pushnil))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getuservalue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getmetatable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_noclose
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
</UL>

<P><STRONG><a name="[411]"></a>lua_pushnumber</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lapi.o(i.lua_pushnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_pushnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_difftime
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_tan
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sin
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_rad
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_exp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_deg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_cos
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_asin
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_acos
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
</UL>

<P><STRONG><a name="[25d]"></a>lua_pushstring</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lapi.o(i.lua_pushstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lua_pushstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabss
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushmode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_eof
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_noclose
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_tostring
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmpname
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_setlocale
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_getenv
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsys_sym
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsys_load
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkfield
</UL>

<P><STRONG><a name="[316]"></a>lua_pushthread</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lapi.o(i.lua_pushthread))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_corunning
</UL>

<P><STRONG><a name="[200]"></a>lua_pushvalue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lapi.o(i.lua_pushvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lua_pushvalue &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getregistry
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstdfile
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonum
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[469]"></a>lua_pushvfstring</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, lapi.o(i.lua_pushvfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = lua_pushvfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>

<P><STRONG><a name="[364]"></a>lua_rawequal</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lapi.o(i.lua_rawequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lua_rawequal &rArr; luaV_equalobj &rArr;  luaT_callTMres (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[29f]"></a>lua_rawget</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lapi.o(i.lua_rawget))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lua_rawget &rArr; luaH_get &rArr; getgeneric &rArr; mainpositionTV &rArr; mainposition &rArr; l_hashfloat &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettable
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishrawget
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkfield
</UL>

<P><STRONG><a name="[36e]"></a>lua_rawgeti</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, lapi.o(i.lua_rawgeti))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lua_rawgeti &rArr; gettable &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettable
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishrawget
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
</UL>

<P><STRONG><a name="[21e]"></a>lua_rawgetp</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, lapi.o(i.lua_rawgetp))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lua_rawgetp &rArr; luaH_get &rArr; getgeneric &rArr; mainpositionTV &rArr; mainposition &rArr; l_hashfloat &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettable
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishrawget
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclib
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
</UL>

<P><STRONG><a name="[417]"></a>lua_rawlen</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lapi.o(i.lua_rawlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lua_rawlen &rArr; luaH_getn &rArr; hash_search &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
</UL>

<P><STRONG><a name="[324]"></a>lua_rawset</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lapi.o(i.lua_rawset))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lua_rawset &rArr; luaH_set &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettable
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
</UL>

<P><STRONG><a name="[222]"></a>lua_rawseti</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lapi.o(i.lua_rawseti))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = lua_rawseti &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettable
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
</UL>

<P><STRONG><a name="[305]"></a>lua_rawsetp</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, lapi.o(i.lua_rawsetp))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lua_rawsetp &rArr; luaH_set &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettable
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
</UL>

<P><STRONG><a name="[49c]"></a>lua_removekey</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lapi.o(i.lua_removekey))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lua_removekey &rArr; auxkeydef &rArr; luaT_keydef &rArr;  luaT_callTMres (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxkeydef
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
</UL>

<P><STRONG><a name="[260]"></a>lua_resume</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ldo.o(i.lua_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lua_resume &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_error
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
</UL>

<P><STRONG><a name="[1fc]"></a>lua_rotate</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lapi.o(i.lua_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lua_rotate &rArr; reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2stack
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treatstackoption
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trymt
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
</UL>

<P><STRONG><a name="[220]"></a>lua_setfield</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lapi.o(i.lua_setfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treatstackoption
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabss
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsi
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsb
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstdfile
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setfield
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setboolfield
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
</UL>

<P><STRONG><a name="[473]"></a>lua_setglobal</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lapi.o(i.lua_setglobal))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lua_setglobal &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
</UL>

<P><STRONG><a name="[325]"></a>lua_sethook</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ldebug.o(i.lua_sethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lua_sethook
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settraps
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
</UL>

<P><STRONG><a name="[4a1]"></a>lua_seti</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, lapi.o(i.lua_seti))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lua_seti &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set2
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
</UL>

<P><STRONG><a name="[327]"></a>lua_setiuservalue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lapi.o(i.lua_setiuservalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lua_setiuservalue &rArr; luaC_barrierback_
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
</UL>

<P><STRONG><a name="[326]"></a>lua_setlocal</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ldebug.o(i.lua_setlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lua_setlocal &rArr; findlocal &rArr; luaF_getlocalname
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
</UL>

<P><STRONG><a name="[304]"></a>lua_setmetatable</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, lapi.o(i.lua_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lua_setmetatable &rArr; luaC_checkfinalizer &rArr; sweeptolive &rArr; sweeplist &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_close &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
</UL>

<P><STRONG><a name="[1fd]"></a>lua_settop</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, lapi.o(i.lua_settop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getboolfield
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noenv
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclib
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trymt
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[26e]"></a>lua_setupvalue</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, lapi.o(i.lua_setupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lua_setupvalue &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_upvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
</UL>

<P><STRONG><a name="[25e]"></a>lua_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lapi.o(i.lua_status))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
</UL>

<P><STRONG><a name="[418]"></a>lua_stringtonumber</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lapi.o(i.lua_stringtonumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lua_stringtonumber &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonum
</UL>

<P><STRONG><a name="[204]"></a>lua_toboolean</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lapi.o(i.lua_toboolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_toboolean &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getboolfield
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noenv
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
</UL>

<P><STRONG><a name="[218]"></a>lua_tointegerx</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lapi.o(i.lua_tointegerx))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lua_tointegerx &rArr; luaV_tointeger &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
</UL>

<P><STRONG><a name="[1f6]"></a>lua_tolstring</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lapi.o(i.lua_tolstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lua_tolstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonum
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[216]"></a>lua_tonumberx</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lapi.o(i.lua_tonumberx))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lua_tonumberx &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[475]"></a>lua_topointer</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lapi.o(i.lua_topointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_topointer &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
</UL>

<P><STRONG><a name="[3ad]"></a>lua_tothread</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lapi.o(i.lua_tothread))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_tothread &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getco
</UL>

<P><STRONG><a name="[29d]"></a>lua_touserdata</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lapi.o(i.lua_touserdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_touserdata &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclib
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
</UL>

<P><STRONG><a name="[207]"></a>lua_type</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lapi.o(i.lua_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_type &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getuservalue
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optnumber
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trymt
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonum
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
</UL>

<P><STRONG><a name="[208]"></a>lua_typename</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lapi.o(i.lua_typename))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trymt
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
</UL>

<P><STRONG><a name="[329]"></a>lua_upvalueid</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lapi.o(i.lua_upvalueid))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lua_upvalueid &rArr; getupvalref &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalref
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
</UL>

<P><STRONG><a name="[32b]"></a>lua_upvaluejoin</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, lapi.o(i.lua_upvaluejoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lua_upvaluejoin &rArr; getupvalref &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalref
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
</UL>

<P><STRONG><a name="[355]"></a>lua_version</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(i.lua_version))
<BR><BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[25f]"></a>lua_xmove</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, lapi.o(i.lua_xmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lua_xmove
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treatstackoption
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
</UL>

<P><STRONG><a name="[419]"></a>lua_yieldk</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldo.o(i.lua_yieldk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = lua_yieldk &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yield
</UL>

<P><STRONG><a name="[db]"></a>luaopen_base</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lbaselib.o(i.luaopen_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = luaopen_base &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>luaopen_coroutine</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcorolib.o(i.luaopen_coroutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaopen_coroutine &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>luaopen_debug</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ldblib.o(i.luaopen_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaopen_debug &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>luaopen_io</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, liolib.o(i.luaopen_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = luaopen_io &rArr; createmeta &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstdfile
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>luaopen_math</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lmathlib.o(i.luaopen_math))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = luaopen_math &rArr; setrandfunc &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setrandfunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>luaopen_os</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, loslib.o(i.luaopen_os))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaopen_os &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>luaopen_package</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, loadlib.o(i.luaopen_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 6024<LI>Call Chain = luaopen_package &rArr; setpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>luaopen_string</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lstrlib.o(i.luaopen_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = luaopen_string &rArr; createmetatable &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>luaopen_table</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ltablib.o(i.luaopen_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaopen_table &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>luaopen_utf8</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lutf8lib.o(i.luaopen_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaopen_utf8 &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>main</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, rmp_kernel.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = main &rArr; _RMP_Low_Level_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Start
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Ins
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Crt
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[48b]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
</UL>

<P><STRONG><a name="[3e1]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = realloc &rArr; __malloc$realloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__malloc$realloc
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alloc
</UL>

<P><STRONG><a name="[4b5]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sin
</UL>

<P><STRONG><a name="[1f4]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[3e9]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2dloc
</UL>

<P><STRONG><a name="[4be]"></a>system</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, test_lua.o(i.system))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_execute
</UL>

<P><STRONG><a name="[4b6]"></a>tan</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tan.o(i.tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_tan
</UL>

<P><STRONG><a name="[3e4]"></a>time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, test_lua.o(i.time))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeseed
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_randomizePivot
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1cc]"></a>_RMP_Set_Rdy</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, rmp_kernel.o(i._RMP_Set_Rdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RMP_Set_Rdy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Ins
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Timer_Proc
</UL>

<P><STRONG><a name="[1db]"></a>_RMP_Timer_Proc</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, rmp_kernel.o(i._RMP_Timer_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _RMP_Timer_Proc &rArr; _RMP_Set_Rdy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Del
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Set_Rdy
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Tick_Handler
</UL>

<P><STRONG><a name="[1d6]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, rmp_platform_cmx.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[1d5]"></a>SCB_EnableICache</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, rmp_platform_cmx.o(i.SCB_EnableICache))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[1d8]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rmp_platform_cmx.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[190]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[191]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[496]"></a>aux_upvalue</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, lapi.o(i.aux_upvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aux_upvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
</UL>

<P><STRONG><a name="[254]"></a>auxgetstr</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lapi.o(i.auxgetstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = auxgetstr &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>

<P><STRONG><a name="[258]"></a>auxkeydef</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lapi.o(i.auxkeydef))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = auxkeydef &rArr; luaT_keydef &rArr;  luaT_callTMres (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_keydef
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_removekey
</UL>

<P><STRONG><a name="[261]"></a>auxsetstr</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, lapi.o(i.auxsetstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = auxsetstr &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
</UL>

<P><STRONG><a name="[a7]"></a>f_call</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lapi.o(i.f_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = f_call &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lapi.o(i.lua_pcallk)
</UL>
<P><STRONG><a name="[49b]"></a>finishrawget</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lapi.o(i.finishrawget))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finishrawget
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
</UL>

<P><STRONG><a name="[3bd]"></a>gettable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lapi.o(i.gettable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gettable &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
</UL>

<P><STRONG><a name="[3bf]"></a>getupvalref</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, lapi.o(i.getupvalref))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = getupvalref &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvalueid
</UL>

<P><STRONG><a name="[49a]"></a>index2stack</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lapi.o(i.index2stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = index2stack
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
</UL>

<P><STRONG><a name="[259]"></a>index2value</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, lapi.o(i.index2value))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvalueid
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setiuservalue
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_iscfunction
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getiuservalue
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalref
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettable
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxkeydef
</UL>

<P><STRONG><a name="[49f]"></a>reverse</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lapi.o(i.reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
</UL>

<P><STRONG><a name="[ac]"></a>boxgc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lauxlib.o(i.boxgc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = boxgc &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.newbox)
</UL>
<P><STRONG><a name="[340]"></a>errfile</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, lauxlib.o(i.errfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = errfile &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
</UL>

<P><STRONG><a name="[363]"></a>findfield</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, lauxlib.o(i.findfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408 + In Cycle
<LI>Call Chain = findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[a3]"></a>getF</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lauxlib.o(i.getF))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = getF &rArr; fread
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_loadfilex)
</UL>
<P><STRONG><a name="[a2]"></a>getS</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lauxlib.o(i.getS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_loadbufferx)
</UL>
<P><STRONG><a name="[3d6]"></a>interror</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lauxlib.o(i.interror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>

<P><STRONG><a name="[a4]"></a>l_alloc</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lauxlib.o(i.l_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = l_alloc &rArr; realloc &rArr; __malloc$realloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_newstate)
</UL>
<P><STRONG><a name="[3f1]"></a>lastlevel</STRONG> (Thumb, 70 bytes, Stack size 128 bytes, lauxlib.o(i.lastlevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lastlevel &rArr; lua_getstack
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
</UL>

<P><STRONG><a name="[471]"></a>newbox</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lauxlib.o(i.newbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdatauv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
</UL>

<P><STRONG><a name="[a5]"></a>panic</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lauxlib.o(i.panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = panic &rArr; lua_tolstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_newstate)
</UL>
<P><STRONG><a name="[476]"></a>pushfuncname</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lauxlib.o(i.pushfuncname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = pushfuncname &rArr; pushglobalfuncname &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
</UL>

<P><STRONG><a name="[462]"></a>pushglobalfuncname</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lauxlib.o(i.pushglobalfuncname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = pushglobalfuncname &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
</UL>

<P><STRONG><a name="[27e]"></a>resizebox</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, lauxlib.o(i.resizebox))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704 + In Cycle
<LI>Call Chain = resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getallocf
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boxgc
</UL>

<P><STRONG><a name="[4e8]"></a>skipBOM</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lauxlib.o(i.skipBOM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = skipBOM
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipcomment
</UL>

<P><STRONG><a name="[46d]"></a>skipcomment</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lauxlib.o(i.skipcomment))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = skipcomment &rArr; skipBOM
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipBOM
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
</UL>

<P><STRONG><a name="[3d8]"></a>tag_error</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lauxlib.o(i.tag_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interror
</UL>

<P><STRONG><a name="[467]"></a>typeerror</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lauxlib.o(i.typeerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
</UL>

<P><STRONG><a name="[26f]"></a>b_str2int</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, lbaselib.o(i.b_str2int))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = b_str2int &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
</UL>

<P><STRONG><a name="[9c]"></a>dofilecont</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lbaselib.o(i.dofilecont))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dofilecont
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_dofile)
</UL>
<P><STRONG><a name="[a0]"></a>finishpcall</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lbaselib.o(i.finishpcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = finishpcall &rArr; lua_pushvalue &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lbaselib.o(i.luaB_pcall)
<LI> lbaselib.o(i.luaB_xpcall)
</UL>
<P><STRONG><a name="[9e]"></a>generic_reader</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lbaselib.o(i.generic_reader))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = generic_reader &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_load)
</UL>
<P><STRONG><a name="[9d]"></a>ipairsaux</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lbaselib.o(i.ipairsaux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = ipairsaux &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_ipairs)
</UL>
<P><STRONG><a name="[403]"></a>load_aux</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lbaselib.o(i.load_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = load_aux &rArr; lua_setupvalue &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
</UL>

<P><STRONG><a name="[af]"></a>luaB_assert</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = luaB_assert &rArr; luaB_error &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>luaB_collectgarbage</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, lbaselib.o(i.luaB_collectgarbage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992<LI>Call Chain = luaB_collectgarbage &rArr; luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushmode
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>luaB_dofile</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_dofile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = luaB_dofile &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dofilecont
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>luaB_error</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = luaB_error &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>luaB_getmetatable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_getmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = luaB_getmetatable &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>luaB_ipairs</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_ipairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = luaB_ipairs &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>luaB_load</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, lbaselib.o(i.luaB_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = luaB_load &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>luaB_loadfile</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_loadfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = luaB_loadfile &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>luaB_next</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = luaB_next &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lbaselib.o(i.luaB_pairs)
<LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>luaB_pairs</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_pairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = luaB_pairs &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>luaB_pcall</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_pcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = luaB_pcall &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>luaB_print</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lbaselib.o(i.luaB_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = luaB_print &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_lua_writestring
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_lua_writeline
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>luaB_rawequal</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_rawequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = luaB_rawequal &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>luaB_rawget</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_rawget))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = luaB_rawget &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>luaB_rawlen</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_rawlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = luaB_rawlen &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>luaB_rawset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_rawset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = luaB_rawset &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>luaB_select</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = luaB_select &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>luaB_setmetatable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = luaB_setmetatable &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>luaB_tonumber</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, lbaselib.o(i.luaB_tonumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = luaB_tonumber &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>luaB_tostring</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = luaB_tostring &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>luaB_type</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = luaB_type &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>luaB_xpcall</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_xpcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = luaB_xpcall &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[412]"></a>pushmode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lbaselib.o(i.pushmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = pushmode &rArr; lua_pushstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[20b]"></a>addk</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, lcode.o(i.addk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_stringK
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nilK
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boolK
</UL>

<P><STRONG><a name="[27d]"></a>boolK</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, lcode.o(i.boolK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = boolK &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
</UL>

<P><STRONG><a name="[2c3]"></a>codeABRK</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, lcode.o(i.codeABRK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = codeABRK &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
</UL>

<P><STRONG><a name="[2c5]"></a>code_loadbool</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, lcode.o(i.code_loadbool))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = code_loadbool &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[2c7]"></a>codearith</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, lcode.o(i.codearith))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = codearith &rArr; codebini &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCint
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebini
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecommutative
</UL>

<P><STRONG><a name="[2c9]"></a>codebinexpval</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, lcode.o(i.codebinexpval))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = codebinexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeshift
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebitwise
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codearith
</UL>

<P><STRONG><a name="[2ca]"></a>codebini</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, lcode.o(i.codebini))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = codebini &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeshift
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codearith
</UL>

<P><STRONG><a name="[2cd]"></a>codebitwise</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, lcode.o(i.codebitwise))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = codebitwise &rArr; codebinexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapexps
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[2d0]"></a>codecommutative</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, lcode.o(i.codecommutative))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = codecommutative &rArr; codearith &rArr; codebini &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapexps
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCint
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codearith
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[2d1]"></a>codeconcat</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, lcode.o(i.codeconcat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = codeconcat &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;previousinstruction
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[2d5]"></a>codeeq</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, lcode.o(i.codeeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = codeeq &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapexps
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCnumber
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[2d9]"></a>codeextraarg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcode.o(i.codeextraarg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = codeextraarg &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
</UL>

<P><STRONG><a name="[2db]"></a>codeisdef</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcode.o(i.codeisdef))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = codeisdef &rArr; normalizeindexed &rArr; luaK_int &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeindexed
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[2dd]"></a>codenot</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lcode.o(i.codenot))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = codenot &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negatecondition
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
</UL>

<P><STRONG><a name="[2e2]"></a>codeorder</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, lcode.o(i.codeorder))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = codeorder &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCnumber
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[2e5]"></a>codesJ</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lcode.o(i.codesJ))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = codesJ &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
</UL>

<P><STRONG><a name="[2e6]"></a>codeshift</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, lcode.o(i.codeshift))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = codeshift &rArr; codebini &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCint
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebini
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[2e8]"></a>codeunexpval</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, lcode.o(i.codeunexpval))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = codeunexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
</UL>

<P><STRONG><a name="[2d8]"></a>condjump</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, lcode.o(i.condjump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = condjump &rArr; luaK_jump &rArr; codesJ &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeeq
</UL>

<P><STRONG><a name="[2f1]"></a>constfolding</STRONG> (Thumb, 144 bytes, Stack size 88 bytes, lcode.o(i.constfolding))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = constfolding &rArr; luaO_rawarith &rArr; numarith &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonumeral
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[2e0]"></a>discharge2anyreg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcode.o(i.discharge2anyreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = discharge2anyreg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[32f]"></a>discharge2reg</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, lcode.o(i.discharge2reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_float
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
</UL>

<P><STRONG><a name="[348]"></a>exp2reg</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, lcode.o(i.exp2reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_loadbool
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
</UL>

<P><STRONG><a name="[458]"></a>finaltarget</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, lcode.o(i.finaltarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finaltarget
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_finish
</UL>

<P><STRONG><a name="[2cc]"></a>finishbinexpval</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcode.o(i.finishbinexpval))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = finishbinexpval &rArr; luaK_fixline &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebitwise
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebini
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
</UL>

<P><STRONG><a name="[37b]"></a>fitsBx</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lcode.o(i.fitsBx))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatI
</UL>

<P><STRONG><a name="[3de]"></a>fitsC</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lcode.o(i.fitsC))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCnumber
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCint
</UL>

<P><STRONG><a name="[379]"></a>fixjump</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lcode.o(i.fixjump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchgoto
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_finish
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>

<P><STRONG><a name="[37a]"></a>floatI</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcode.o(i.floatI))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = floatI &rArr; luaV_flttointeger &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fitsBx
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_float
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCnumber
</UL>

<P><STRONG><a name="[2d3]"></a>freeexp</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lcode.o(i.freeexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = freeexp
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeconcat
</UL>

<P><STRONG><a name="[2d7]"></a>freeexps</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lcode.o(i.freeexps))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = freeexps &rArr; freeregs
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeregs
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeeq
</UL>

<P><STRONG><a name="[388]"></a>freereg</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcode.o(i.freereg))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeregs
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
</UL>

<P><STRONG><a name="[389]"></a>freeregs</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lcode.o(i.freeregs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = freeregs
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeindexed
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
</UL>

<P><STRONG><a name="[453]"></a>getjump</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcode.o(i.getjump))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchgoto
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
</UL>

<P><STRONG><a name="[4b7]"></a>getjumpcontrol</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcode.o(i.getjumpcontrol))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getjumpcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negatecondition
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
</UL>

<P><STRONG><a name="[3dd]"></a>isCint</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcode.o(i.isCint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isCint
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_isKint
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
</UL>

<P><STRONG><a name="[45a]"></a>isKstr</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lcode.o(i.isKstr))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
</UL>

<P><STRONG><a name="[2c8]"></a>isSCint</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcode.o(i.isSCint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isSCint
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_isKint
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fitsC
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeshift
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecommutative
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codearith
</UL>

<P><STRONG><a name="[2d6]"></a>isSCnumber</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lcode.o(i.isSCnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = isSCnumber &rArr; floatI &rArr; luaV_flttointeger &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatI
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fitsC
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeeq
</UL>

<P><STRONG><a name="[3df]"></a>jumponcond</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lcode.o(i.jumponcond))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = jumponcond &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
</UL>

<P><STRONG><a name="[2da]"></a>luaK_code</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lcode.o(i.luaK_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeAsBx
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codesJ
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeextraarg
</UL>

<P><STRONG><a name="[330]"></a>luaK_codek</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lcode.o(i.luaK_codek))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeextraarg
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeindexed
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_float
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>

<P><STRONG><a name="[331]"></a>luaK_float</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lcode.o(i.luaK_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeAsBx
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatI
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>

<P><STRONG><a name="[456]"></a>luaK_intK</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, lcode.o(i.luaK_intK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
</UL>

<P><STRONG><a name="[457]"></a>luaK_numberK</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, lcode.o(i.luaK_numberK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_float
</UL>

<P><STRONG><a name="[349]"></a>need_value</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcode.o(i.need_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = need_value &rArr; getjumpcontrol
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[2df]"></a>negatecondition</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcode.o(i.negatecondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = negatecondition &rArr; getjumpcontrol
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[455]"></a>nilK</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, lcode.o(i.nilK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = nilK &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
</UL>

<P><STRONG><a name="[2dc]"></a>normalizeindexed</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, lcode.o(i.normalizeindexed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = normalizeindexed &rArr; luaK_int &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeregs
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeundef
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeisdef
</UL>

<P><STRONG><a name="[34b]"></a>patchlistaux</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lcode.o(i.patchlistaux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[45d]"></a>patchtestreg</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lcode.o(i.patchtestreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = patchtestreg &rArr; getjumpcontrol
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchgoto
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>

<P><STRONG><a name="[2d2]"></a>previousinstruction</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lcode.o(i.previousinstruction))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeconcat
</UL>

<P><STRONG><a name="[2e1]"></a>removevalues</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcode.o(i.removevalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = removevalues &rArr; patchtestreg &rArr; getjumpcontrol
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[451]"></a>savelineinfo</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, lcode.o(i.savelineinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>

<P><STRONG><a name="[2ce]"></a>swapexps</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, lcode.o(i.swapexps))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = swapexps
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeeq
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecommutative
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebitwise
</UL>

<P><STRONG><a name="[2f2]"></a>tonumeral</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lcode.o(i.tonumeral))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tonumeral
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
</UL>

<P><STRONG><a name="[2f3]"></a>validop</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, lcode.o(i.validop))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = validop &rArr; luaV_tointegerns &rArr; luaV_flttointeger &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
</UL>

<P><STRONG><a name="[25b]"></a>auxresume</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lcorolib.o(i.auxresume))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = auxresume &rArr; lua_checkstack &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_status
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
</UL>

<P><STRONG><a name="[3ac]"></a>getco</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcorolib.o(i.getco))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = getco &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
</UL>

<P><STRONG><a name="[9b]"></a>luaB_auxwrap</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lcorolib.o(i.luaB_auxwrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = luaB_auxwrap &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(i.luaB_cowrap)
</UL>
<P><STRONG><a name="[c4]"></a>luaB_cocreate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcorolib.o(i.luaB_cocreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = luaB_cocreate &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cowrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>luaB_coresume</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lcorolib.o(i.luaB_coresume))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = luaB_coresume &rArr; getco &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getco
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>luaB_corunning</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcorolib.o(i.luaB_corunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaB_corunning
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>luaB_costatus</STRONG> (Thumb, 120 bytes, Stack size 120 bytes, lcorolib.o(i.luaB_costatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = luaB_costatus &rArr; getco &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getco
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_status
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>luaB_cowrap</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcorolib.o(i.luaB_cowrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = luaB_cowrap &rArr; luaB_cocreate &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>luaB_yield</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcorolib.o(i.luaB_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = luaB_yield &rArr; lua_yieldk &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_yieldk
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>luaB_yieldable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcorolib.o(i.luaB_yieldable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaB_yieldable
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isyieldable
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[26a]"></a>auxupvalue</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ldblib.o(i.auxupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = auxupvalue &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setupvalue
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getupvalue
</UL>

<P><STRONG><a name="[2ae]"></a>checkstack</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ldblib.o(i.checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[2b1]"></a>checkupval</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ldblib.o(i.checkupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = checkupval &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
</UL>

<P><STRONG><a name="[cb]"></a>db_debug</STRONG> (Thumb, 136 bytes, Stack size 272 bytes, ldblib.o(i.db_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = db_debug &rArr; lua_pcallk &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>db_gethook</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ldblib.o(i.db_gethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = db_gethook &rArr; checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gethookmask
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gethookcount
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gethook
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unmakemask
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>db_getinfo</STRONG> (Thumb, 418 bytes, Stack size 128 bytes, ldblib.o(i.db_getinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032<LI>Call Chain = db_getinfo &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treatstackoption
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabss
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsi
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsb
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>db_getlocal</STRONG> (Thumb, 186 bytes, Stack size 136 bytes, ldblib.o(i.db_getlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032<LI>Call Chain = db_getlocal &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getlocal
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>db_getmetatable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ldblib.o(i.db_getmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = db_getmetatable &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>db_getregistry</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ldblib.o(i.db_getregistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = db_getregistry &rArr; lua_pushvalue &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>db_getupvalue</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ldblib.o(i.db_getupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = db_getupvalue &rArr; auxupvalue &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>db_getuservalue</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ldblib.o(i.db_getuservalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = db_getuservalue &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getiuservalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>db_sethook</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, ldblib.o(i.db_sethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = db_sethook &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_sethook
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makemask
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>db_setlocal</STRONG> (Thumb, 148 bytes, Stack size 136 bytes, ldblib.o(i.db_setlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032<LI>Call Chain = db_setlocal &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setlocal
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>db_setmetatable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ldblib.o(i.db_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = db_setmetatable &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>db_setupvalue</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldblib.o(i.db_setupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = db_setupvalue &rArr; auxupvalue &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>db_setuservalue</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ldblib.o(i.db_setuservalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = db_setuservalue &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setiuservalue
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>db_traceback</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ldblib.o(i.db_traceback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = db_traceback &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>db_upvalueid</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ldblib.o(i.db_upvalueid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = db_upvalueid &rArr; checkupval &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvalueid
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlightuserdata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>db_upvaluejoin</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ldblib.o(i.db_upvaluejoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = db_upvaluejoin &rArr; checkupval &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_iscfunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[313]"></a>getthread</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ldblib.o(i.getthread))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = getthread &rArr; lua_type &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[97]"></a>hookf</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ldblib.o(i.hookf))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = hookf &rArr; lua_callk &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ldblib.o(i.db_gethook)
<LI> ldblib.o(i.db_sethook)
</UL>
<P><STRONG><a name="[323]"></a>makemask</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ldblib.o(i.makemask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = makemask
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
</UL>

<P><STRONG><a name="[31e]"></a>settabsb</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ldblib.o(i.settabsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = settabsb &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[31d]"></a>settabsi</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ldblib.o(i.settabsi))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = settabsi &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[31c]"></a>settabss</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ldblib.o(i.settabss))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = settabss &rArr; lua_pushstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[31f]"></a>treatstackoption</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ldblib.o(i.treatstackoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = treatstackoption &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[317]"></a>unmakemask</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, ldblib.o(i.unmakemask))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = unmakemask
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[250]"></a>auxgetinfo</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, ldebug.o(i.auxgetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = auxgetinfo &rArr; getfuncname &rArr; funcnamefromcode &rArr; getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfuncname
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcinfo
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentline
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>

<P><STRONG><a name="[28b]"></a>changedline</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ldebug.o(i.changedline))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = changedline &rArr; luaG_getfuncline &rArr; getbaseline
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_getfuncline
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
</UL>

<P><STRONG><a name="[2e9]"></a>collectvalidlines</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, ldebug.o(i.collectvalidlines))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextline
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>

<P><STRONG><a name="[252]"></a>currentline</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ldebug.o(i.currentline))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = currentline &rArr; luaG_getfuncline &rArr; getbaseline
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_getfuncline
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
</UL>

<P><STRONG><a name="[30f]"></a>currentpc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ldebug.o(i.currentpc))
<BR><BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcode
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentline
</UL>

<P><STRONG><a name="[374]"></a>filterpc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ldebug.o(i.filterpc))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findsetreg
</UL>

<P><STRONG><a name="[370]"></a>findlocal</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ldebug.o(i.findlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = findlocal &rArr; luaF_getlocalname
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findvararg
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setlocal
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getlocal
</UL>

<P><STRONG><a name="[373]"></a>findsetreg</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, ldebug.o(i.findsetreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = findsetreg
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterpc
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[371]"></a>findvararg</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, ldebug.o(i.findvararg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = findvararg
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
</UL>

<P><STRONG><a name="[251]"></a>funcinfo</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ldebug.o(i.funcinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = funcinfo &rArr; luaO_chunkid
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
</UL>

<P><STRONG><a name="[39a]"></a>funcnamefromcode</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, ldebug.o(i.funcnamefromcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = funcnamefromcode &rArr; getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfuncname
</UL>

<P><STRONG><a name="[43b]"></a>getbaseline</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ldebug.o(i.getbaseline))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getbaseline
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_getfuncline
</UL>

<P><STRONG><a name="[253]"></a>getfuncname</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ldebug.o(i.getfuncname))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = getfuncname &rArr; funcnamefromcode &rArr; getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcode
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
</UL>

<P><STRONG><a name="[39b]"></a>getobjname</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, ldebug.o(i.getobjname))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upvalname
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rname
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rkname
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kname
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gxf
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rname
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gxf
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcode
</UL>

<P><STRONG><a name="[3be]"></a>getupvalname</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ldebug.o(i.getupvalname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getupvalname
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upvalname
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>

<P><STRONG><a name="[3b9]"></a>gxf</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ldebug.o(i.gxf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = gxf &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upvalname
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[4f7]"></a>isinstack</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ldebug.o(i.isinstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isinstack
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>

<P><STRONG><a name="[3b8]"></a>kname</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ldebug.o(i.kname))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kname
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rkname
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[2eb]"></a>nextline</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ldebug.o(i.nextline))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nextline &rArr; luaG_getfuncline &rArr; getbaseline
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_getfuncline
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
</UL>

<P><STRONG><a name="[3bc]"></a>rkname</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ldebug.o(i.rkname))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rkname &rArr; rname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rname
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kname
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[3ba]"></a>rname</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ldebug.o(i.rname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = rname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rkname
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[4a0]"></a>settraps</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ldebug.o(i.settraps))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_sethook
</UL>

<P><STRONG><a name="[3bb]"></a>upvalname</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ldebug.o(i.upvalname))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gxf
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalname
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[442]"></a>varinfo</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ldebug.o(i.varinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = varinfo &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isinstack
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalname
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
</UL>

<P><STRONG><a name="[2a4]"></a>checkmode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ldo.o(i.checkmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = checkmode &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[431]"></a>correctstack</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ldo.o(i.correctstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = correctstack
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
</UL>

<P><STRONG><a name="[a1]"></a>f_parser</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ldo.o(i.f_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528<LI>Call Chain = f_parser &rArr; luaY_parser &rArr; mainfunc &rArr; statlist &rArr; statement &rArr; repeatstat &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_initupvals
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.luaD_protectedparser)
</UL>
<P><STRONG><a name="[4d5]"></a>findpcall</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ldo.o(i.findpcall))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover
</UL>

<P><STRONG><a name="[375]"></a>finishCcall</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ldo.o(i.finishCcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = finishCcall &rArr; luaD_poscall &rArr; rethook &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
</UL>

<P><STRONG><a name="[42b]"></a>moveresults</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, ldo.o(i.moveresults))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = moveresults
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
</UL>

<P><STRONG><a name="[49e]"></a>recover</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ldo.o(i.recover))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = recover &rArr; seterrorobj &rArr; luaS_newlstr &rArr; internshrstr &rArr; createstrobj &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findpcall
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
</UL>

<P><STRONG><a name="[a8]"></a>resume</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ldo.o(i.resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = resume &rArr; unroll &rArr; luaV_finishOp &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.lua_resume)
</UL>
<P><STRONG><a name="[49d]"></a>resume_error</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ldo.o(i.resume_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = resume_error &rArr; luaS_new &rArr; luaS_newlstr &rArr; internshrstr &rArr; createstrobj &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
</UL>

<P><STRONG><a name="[42a]"></a>rethook</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ldo.o(i.rethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = rethook &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
</UL>

<P><STRONG><a name="[428]"></a>seterrorobj</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ldo.o(i.seterrorobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = seterrorobj &rArr; luaS_newlstr &rArr; internshrstr &rArr; createstrobj &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
</UL>

<P><STRONG><a name="[432]"></a>stackinuse</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ldo.o(i.stackinuse))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>

<P><STRONG><a name="[a9]"></a>unroll</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ldo.o(i.unroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = unroll &rArr; luaV_finishOp &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishOp
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishCcall
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.lua_resume)
</UL>
<P><STRONG><a name="[175]"></a>DumpBlock</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ldump.o(i.DumpBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpSize
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpNumber
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInteger
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDebug
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpCode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>

<P><STRONG><a name="[174]"></a>DumpByte</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ldump.o(i.DumpByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpUpvalues
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
</UL>

<P><STRONG><a name="[176]"></a>DumpCode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ldump.o(i.DumpCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DumpCode &rArr; DumpInt &rArr; DumpSize &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[178]"></a>DumpConstants</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ldump.o(i.DumpConstants))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DumpConstants &rArr; DumpString &rArr; DumpSize &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpNumber
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInteger
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[17c]"></a>DumpDebug</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, ldump.o(i.DumpDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DumpDebug &rArr; DumpString &rArr; DumpSize &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[17d]"></a>DumpFunction</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ldump.o(i.DumpFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DumpFunction &rArr; DumpConstants &rArr; DumpString &rArr; DumpSize &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpUpvalues
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpProtos
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDebug
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpCode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpProtos
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
</UL>

<P><STRONG><a name="[180]"></a>DumpHeader</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, ldump.o(i.DumpHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DumpHeader &rArr; DumpNumber &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpNumber
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInteger
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
</UL>

<P><STRONG><a name="[177]"></a>DumpInt</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ldump.o(i.DumpInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DumpInt &rArr; DumpSize &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpSize
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpUpvalues
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpProtos
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDebug
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpCode
</UL>

<P><STRONG><a name="[17a]"></a>DumpInteger</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, ldump.o(i.DumpInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DumpInteger &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
</UL>

<P><STRONG><a name="[179]"></a>DumpNumber</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, ldump.o(i.DumpNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DumpNumber &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
</UL>

<P><STRONG><a name="[17f]"></a>DumpProtos</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ldump.o(i.DumpProtos))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = DumpProtos &rArr;  DumpFunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[181]"></a>DumpSize</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ldump.o(i.DumpSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DumpSize &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
</UL>

<P><STRONG><a name="[17b]"></a>DumpString</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ldump.o(i.DumpString))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DumpString &rArr; DumpSize &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpSize
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDebug
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
</UL>

<P><STRONG><a name="[17e]"></a>DumpUpvalues</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ldump.o(i.DumpUpvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DumpUpvalues &rArr; DumpInt &rArr; DumpSize &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[187]"></a>GCTM</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, lgc.o(i.GCTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + In Cycle
<LI>Call Chain = GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udata2finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callallpendingfinalizers
</UL>

<P><STRONG><a name="[23d]"></a>atomic</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, lgc.o(i.atomic))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_clearcache
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separatetobefnz
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remarkupvals
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markbeingfnz
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearprotolist
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbyvalues
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbykeys
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;youngcollection
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entergen
</UL>

<P><STRONG><a name="[286]"></a>callallpendingfinalizers</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lgc.o(i.callallpendingfinalizers))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = callallpendingfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishgencycle
</UL>

<P><STRONG><a name="[293]"></a>checkSizes</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lgc.o(i.checkSizes))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = checkSizes &rArr; luaS_resize &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishgencycle
</UL>

<P><STRONG><a name="[2b5]"></a>checkprotocache</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lgc.o(i.checkprotocache))
<BR><BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseproto
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearprotolist
</UL>

<P><STRONG><a name="[246]"></a>clearbykeys</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lgc.o(i.clearbykeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = clearbykeys &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkey
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[243]"></a>clearbyvalues</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, lgc.o(i.clearbyvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clearbyvalues &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkey
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[2b4]"></a>clearkey</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lgc.o(i.clearkey))
<BR><BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestrongtable
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbyvalues
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbykeys
</UL>

<P><STRONG><a name="[248]"></a>clearprotolist</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lgc.o(i.clearprotolist))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clearprotolist
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkprotocache
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[242]"></a>convergeephemerons</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lgc.o(i.convergeephemerons))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[2fb]"></a>correctgraylist</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lgc.o(i.correctgraylist))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = correctgraylist
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgclist
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctgraylists
</UL>

<P><STRONG><a name="[2fd]"></a>correctgraylists</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lgc.o(i.correctgraylists))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = correctgraylists &rArr; correctgraylist
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctgraylist
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishgencycle
</UL>

<P><STRONG><a name="[32c]"></a>deletelist</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lgc.o(i.deletelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = deletelist &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_close &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
</UL>

<P><STRONG><a name="[8f]"></a>dothecall</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lgc.o(i.dothecall))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = dothecall &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lgc.o(i.GCTM)
</UL>
<P><STRONG><a name="[336]"></a>entergen</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lgc.o(i.entergen))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_runtilstate
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweep2old
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishgencycle
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_changemode
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullgen
</UL>

<P><STRONG><a name="[33a]"></a>enterinc</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lgc.o(i.enterinc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enterinc
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_changemode
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullgen
</UL>

<P><STRONG><a name="[33c]"></a>entersweep</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lgc.o(i.entersweep))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = entersweep &rArr; sweeptolive &rArr; sweeplist &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_close &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeptolive
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullinc
</UL>

<P><STRONG><a name="[4e0]"></a>findlast</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lgc.o(i.findlast))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separatetobefnz
</UL>

<P><STRONG><a name="[339]"></a>finishgencycle</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lgc.o(i.finishgencycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = finishgencycle &rArr; callallpendingfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctgraylists
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSizes
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callallpendingfinalizers
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;youngcollection
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entergen
</UL>

<P><STRONG><a name="[32d]"></a>freeobj</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, lgc.o(i.freeobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = freeobj &rArr; luaE_freethread &rArr; luaF_close &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeproto
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_remove
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeupval
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweepgen
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweep2old
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deletelist
</UL>

<P><STRONG><a name="[38c]"></a>freeupval</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lgc.o(i.freeupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = freeupval &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_unlinkupval
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[393]"></a>fullgen</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lgc.o(i.fullgen))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterinc
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entergen
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genstep
</UL>

<P><STRONG><a name="[394]"></a>fullinc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lgc.o(i.fullinc))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = fullinc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_runtilstate
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpause
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entersweep
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>

<P><STRONG><a name="[3a7]"></a>genstep</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lgc.o(i.genstep))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;youngcollection
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullgen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>

<P><STRONG><a name="[2fc]"></a>getgclist</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lgc.o(i.getgclist))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctgraylist
</UL>

<P><STRONG><a name="[3cd]"></a>incstep</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, lgc.o(i.incstep))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = incstep &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpause
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>

<P><STRONG><a name="[2b3]"></a>iscleared</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lgc.o(i.iscleared))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbyvalues
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbykeys
</UL>

<P><STRONG><a name="[245]"></a>markbeingfnz</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lgc.o(i.markbeingfnz))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = markbeingfnz &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restartcollection
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[23f]"></a>markmt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lgc.o(i.markmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = markmt &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restartcollection
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[4a7]"></a>markold</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lgc.o(i.markold))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = markold &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;youngcollection
</UL>

<P><STRONG><a name="[241]"></a>propagateall</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lgc.o(i.propagateall))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[4c2]"></a>propagatemark</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lgc.o(i.propagatemark))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseudata
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversethread
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseproto
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseLclosure
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseCclosure
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgclist
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
</UL>

<P><STRONG><a name="[23e]"></a>reallymarkobject</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, lgc.o(i.reallymarkobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgclist
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseudata
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversethread
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestrongtable
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseproto
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseLclosure
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseCclosure
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restartcollection
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remarkupvals
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markold
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markbeingfnz
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[240]"></a>remarkupvals</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lgc.o(i.remarkupvals))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = remarkupvals &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[4da]"></a>restartcollection</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lgc.o(i.restartcollection))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = restartcollection &rArr; markmt &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markbeingfnz
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[4dc]"></a>runafewfinalizers</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lgc.o(i.runafewfinalizers))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[244]"></a>separatetobefnz</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lgc.o(i.separatetobefnz))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = separatetobefnz
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlast
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[395]"></a>setpause</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lgc.o(i.setpause))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setpause &rArr; luaE_setdebt
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incstep
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullinc
</UL>

<P><STRONG><a name="[3ce]"></a>singlestep</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, lgc.o(i.singlestep))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweepstep
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restartcollection
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entersweep
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSizes
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_runtilstate
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incstep
</UL>

<P><STRONG><a name="[338]"></a>sweep2old</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lgc.o(i.sweep2old))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sweep2old &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_close &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entergen
</UL>

<P><STRONG><a name="[4f3]"></a>sweepgen</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, lgc.o(i.sweepgen))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sweepgen &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_close &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;youngcollection
</UL>

<P><STRONG><a name="[4f4]"></a>sweeplist</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, lgc.o(i.sweeplist))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sweeplist &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_close &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeptolive
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweepstep
</UL>

<P><STRONG><a name="[4e4]"></a>sweepstep</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lgc.o(i.sweepstep))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sweepstep &rArr; sweeplist &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_close &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[33d]"></a>sweeptolive</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lgc.o(i.sweeptolive))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sweeptolive &rArr; sweeplist &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_close &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entersweep
</UL>

<P><STRONG><a name="[4c6]"></a>traverseCclosure</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lgc.o(i.traverseCclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = traverseCclosure &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[4c5]"></a>traverseLclosure</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lgc.o(i.traverseLclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = traverseLclosure &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[2f9]"></a>traverseephemeron</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, lgc.o(i.traverseephemeron))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkey
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
</UL>

<P><STRONG><a name="[4c7]"></a>traverseproto</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, lgc.o(i.traverseproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = traverseproto &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkprotocache
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[4f5]"></a>traversestrongtable</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, lgc.o(i.traversestrongtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = traversestrongtable &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkey
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
</UL>

<P><STRONG><a name="[4c3]"></a>traversetable</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, lgc.o(i.traversetable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestrongtable
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[4c8]"></a>traversethread</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lgc.o(i.traversethread))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = traversethread &rArr; luaD_shrinkstack &rArr;  luaD_reallocstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[4c4]"></a>traverseudata</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lgc.o(i.traverseudata))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = traverseudata &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[4f6]"></a>traverseweakvalue</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lgc.o(i.traverseweakvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = traverseweakvalue &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkey
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
</UL>

<P><STRONG><a name="[188]"></a>udata2finalize</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lgc.o(i.udata2finalize))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>

<P><STRONG><a name="[33b]"></a>whitelist</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lgc.o(i.whitelist))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterinc
</UL>

<P><STRONG><a name="[3a8]"></a>youngcollection</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, lgc.o(i.youngcollection))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = youngcollection &rArr; finishgencycle &rArr; callallpendingfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweepgen
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markold
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishgencycle
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genstep
</UL>

<P><STRONG><a name="[249]"></a>aux_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, liolib.o(i.aux_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = aux_close &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[24b]"></a>aux_lines</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, liolib.o(i.aux_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = aux_lines &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lines
</UL>

<P><STRONG><a name="[306]"></a>createmeta</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, liolib.o(i.createmeta))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = createmeta &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
</UL>

<P><STRONG><a name="[30b]"></a>createstdfile</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, liolib.o(i.createstdfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = createstdfile &rArr; newprefile &rArr; lua_newuserdatauv &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
</UL>

<P><STRONG><a name="[f0]"></a>f_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, liolib.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = f_close &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_close
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>f_flush</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, liolib.o(i.f_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = f_flush &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>f_gc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, liolib.o(i.f_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = f_gc &rArr; aux_close &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>f_lines</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, liolib.o(i.f_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = f_lines &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>f_read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, liolib.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 5984<LI>Call Chain = f_read &rArr; g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>f_seek</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, liolib.o(i.f_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = f_seek &rArr; luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>f_setvbuf</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, liolib.o(i.f_setvbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = f_setvbuf &rArr; luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>f_tostring</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, liolib.o(i.f_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = f_tostring &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>f_write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, liolib.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = f_write &rArr; g_write &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[39e]"></a>g_iofile</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, liolib.o(i.g_iofile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = g_iofile &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_output
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_input
</UL>

<P><STRONG><a name="[359]"></a>g_read</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, liolib.o(i.g_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 5968<LI>Call Chain = g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_eof
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chars
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[35b]"></a>g_write</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, liolib.o(i.g_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = g_write &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[3b4]"></a>getiofile</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, liolib.o(i.getiofile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = getiofile &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_flush
</UL>

<P><STRONG><a name="[e5]"></a>io_close</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, liolib.o(i.io_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = io_close &rArr; f_close &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>io_fclose</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, liolib.o(i.io_fclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = io_fclose &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(i.newfile)
</UL>
<P><STRONG><a name="[e6]"></a>io_flush</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, liolib.o(i.io_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = io_flush &rArr; getiofile &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>io_input</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, liolib.o(i.io_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = io_input &rArr; g_iofile &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>io_lines</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, liolib.o(i.io_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = io_lines &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>io_noclose</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, liolib.o(i.io_noclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = io_noclose &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Address Reference Count : 2]<UL><LI> liolib.o(i.io_noclose)
<LI> liolib.o(i.createstdfile)
</UL>
<P><STRONG><a name="[e9]"></a>io_open</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, liolib.o(i.io_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = io_open &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newfile
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checkmode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>io_output</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, liolib.o(i.io_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = io_output &rArr; g_iofile &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>io_pclose</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, liolib.o(i.io_pclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = io_pclose &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(i.io_popen)
</UL>
<P><STRONG><a name="[eb]"></a>io_popen</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, liolib.o(i.io_popen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = io_popen &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>io_read</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, liolib.o(i.io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 5984<LI>Call Chain = io_read &rArr; g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>io_readline</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, liolib.o(i.io_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 5992<LI>Call Chain = io_readline &rArr; g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(i.aux_lines)
</UL>
<P><STRONG><a name="[ed]"></a>io_tmpfile</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, liolib.o(i.io_tmpfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = io_tmpfile &rArr; luaL_fileresult &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newfile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>io_type</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, liolib.o(i.io_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = io_type &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>io_write</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, liolib.o(i.io_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = io_write &rArr; g_write &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[3da]"></a>l_checkmode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, liolib.o(i.l_checkmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = l_checkmode &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
</UL>

<P><STRONG><a name="[3d9]"></a>newfile</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, liolib.o(i.newfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = newfile &rArr; newprefile &rArr; lua_newuserdatauv &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_tmpfile
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
</UL>

<P><STRONG><a name="[30c]"></a>newprefile</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, liolib.o(i.newprefile))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = newprefile &rArr; lua_newuserdatauv &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdatauv
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newfile
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstdfile
</UL>

<P><STRONG><a name="[4b9]"></a>nextc</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, liolib.o(i.nextc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nextc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test2
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdigits
</UL>

<P><STRONG><a name="[39f]"></a>opencheck</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, liolib.o(i.opencheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = opencheck &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newfile
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
</UL>

<P><STRONG><a name="[3a4]"></a>read_all</STRONG> (Thumb, 76 bytes, Stack size 4184 bytes, liolib.o(i.read_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 5928<LI>Call Chain = read_all &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[3a2]"></a>read_chars</STRONG> (Thumb, 74 bytes, Stack size 4184 bytes, liolib.o(i.read_chars))
<BR><BR>[Stack]<UL><LI>Max Depth = 5928<LI>Call Chain = read_chars &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[3a0]"></a>read_line</STRONG> (Thumb, 168 bytes, Stack size 4192 bytes, liolib.o(i.read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 5936<LI>Call Chain = read_line &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[3a3]"></a>read_number</STRONG> (Thumb, 208 bytes, Stack size 240 bytes, liolib.o(i.read_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = read_number &rArr; lua_stringtonumber &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test2
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdigits
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ungetc
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[4ce]"></a>readdigits</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, liolib.o(i.readdigits))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readdigits &rArr; nextc
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
</UL>

<P><STRONG><a name="[4cd]"></a>test2</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, liolib.o(i.test2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = test2 &rArr; nextc
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
</UL>

<P><STRONG><a name="[3a1]"></a>test_eof</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, liolib.o(i.test_eof))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = test_eof &rArr; lua_pushstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ungetc
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[34e]"></a>tofile</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, liolib.o(i.tofile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lines
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_flush
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[298]"></a>check_next1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, llex.o(i.check_next1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_next1 &rArr; luaZ_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[299]"></a>check_next2</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, llex.o(i.check_next2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = check_next2 &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
</UL>

<P><STRONG><a name="[343]"></a>esccheck</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, llex.o(i.esccheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = esccheck &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
</UL>

<P><STRONG><a name="[3b2]"></a>gethexa</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, llex.o(i.gethexa))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_hexavalue
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readhexaesc
</UL>

<P><STRONG><a name="[3cc]"></a>inclinenumber</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, llex.o(i.inclinenumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = inclinenumber &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[344]"></a>lexerror</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, llex.o(i.lexerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txtToken
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>

<P><STRONG><a name="[3fb]"></a>llex</STRONG> (Thumb, 1128 bytes, Stack size 16 bytes, llex.o(i.llex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next1
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lookahead
</UL>

<P><STRONG><a name="[3fd]"></a>read_long_string</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, llex.o(i.read_long_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = read_long_string &rArr; skip_sep &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[3ff]"></a>read_numeral</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, llex.o(i.read_numeral))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = read_numeral &rArr; check_next2 &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next2
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[3fe]"></a>read_string</STRONG> (Thumb, 618 bytes, Stack size 24 bytes, llex.o(i.read_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8esc
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readhexaesc
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[4d2]"></a>readdecesc</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, llex.o(i.readdecesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = readdecesc &rArr; esccheck &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
</UL>

<P><STRONG><a name="[4d0]"></a>readhexaesc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, llex.o(i.readhexaesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = readhexaesc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
</UL>

<P><STRONG><a name="[4d3]"></a>readutf8esc</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, llex.o(i.readutf8esc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_hexavalue
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8esc
</UL>

<P><STRONG><a name="[29a]"></a>save</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, llex.o(i.save))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8esc
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txtToken
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next2
</UL>

<P><STRONG><a name="[3fc]"></a>skip_sep</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, llex.o(i.skip_sep))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = skip_sep &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[3f9]"></a>txtToken</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, llex.o(i.txtToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + In Cycle
<LI>Call Chain = txtToken &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>

<P><STRONG><a name="[4d1]"></a>utf8esc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, llex.o(i.utf8esc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_utf8esc
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
</UL>

<P><STRONG><a name="[19f]"></a>I2d</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(i.I2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = I2d &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
</UL>

<P><STRONG><a name="[fb]"></a>math_abs</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lmathlib.o(i.math_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = math_abs &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>math_acos</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(i.math_acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = math_acos &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>math_asin</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(i.math_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = math_asin &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>math_atan</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lmathlib.o(i.math_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = math_atan &rArr; luaL_optnumber &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optnumber
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>math_ceil</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lmathlib.o(i.math_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = math_ceil &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>math_cos</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(i.math_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = math_cos &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>math_deg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lmathlib.o(i.math_deg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = math_deg &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>math_exp</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(i.math_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = math_exp &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>math_floor</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lmathlib.o(i.math_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = math_floor &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>math_fmod</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lmathlib.o(i.math_fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = math_fmod &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>math_log</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, lmathlib.o(i.math_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = math_log &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>math_max</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lmathlib.o(i.math_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = math_max &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>math_min</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lmathlib.o(i.math_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = math_min &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>math_modf</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lmathlib.o(i.math_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = math_modf &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>math_rad</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lmathlib.o(i.math_rad))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = math_rad &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>math_random</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, lmathlib.o(i.math_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = math_random &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorshift128plus
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>math_randomseed</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lmathlib.o(i.math_randomseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = math_randomseed &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setseed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>math_sin</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(i.math_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = math_sin &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>math_sqrt</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(i.math_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = math_sqrt &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>math_tan</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(i.math_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = math_tan &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>math_toint</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lmathlib.o(i.math_toint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = math_toint &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>math_type</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lmathlib.o(i.math_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = math_type &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>math_ult</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lmathlib.o(i.math_ult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = math_ult &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[4b3]"></a>project</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, lmathlib.o(i.project))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = project &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorshift128plus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
</UL>

<P><STRONG><a name="[4b1]"></a>pushnumint</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lmathlib.o(i.pushnumint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pushnumint &rArr; __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
</UL>

<P><STRONG><a name="[4a2]"></a>setrandfunc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lmathlib.o(i.setrandfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = setrandfunc &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdatauv
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setseed
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
</UL>

<P><STRONG><a name="[4b4]"></a>setseed</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lmathlib.o(i.setseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = setseed &rArr; xorshift128plus
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorshift128plus
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setrandfunc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
</UL>

<P><STRONG><a name="[4b2]"></a>xorshift128plus</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, lmathlib.o(i.xorshift128plus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = xorshift128plus
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setseed
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
</UL>

<P><STRONG><a name="[21d]"></a>addtoclib</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, loadlib.o(i.addtoclib))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = addtoclib &rArr; luaL_len &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlightuserdata
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>

<P><STRONG><a name="[29b]"></a>checkclib</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, loadlib.o(i.checkclib))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = checkclib &rArr; lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>

<P><STRONG><a name="[2a3]"></a>checkload</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, loadlib.o(i.checkload))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = checkload &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
</UL>

<P><STRONG><a name="[302]"></a>createclibstable</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, loadlib.o(i.createclibstable))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = createclibstable &rArr; lua_createtable &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[30a]"></a>createsearcherstable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, loadlib.o(i.createsearcherstable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = createsearcherstable &rArr; lua_rawseti &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[367]"></a>findfile</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, loadlib.o(i.findfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 10200<LI>Call Chain = findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
</UL>

<P><STRONG><a name="[36c]"></a>findloader</STRONG> (Thumb, 190 bytes, Stack size 4184 bytes, loadlib.o(i.findloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 5976<LI>Call Chain = findloader &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
</UL>

<P><STRONG><a name="[95]"></a>gctm</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, loadlib.o(i.gctm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = gctm &rArr; luaL_len &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsys_unloadlib
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(i.createclibstable)
</UL>
<P><STRONG><a name="[110]"></a>ll_loadlib</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, loadlib.o(i.ll_loadlib))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = ll_loadlib &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>ll_require</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, loadlib.o(i.ll_require))
<BR><BR>[Stack]<UL><LI>Max Depth = 5992<LI>Call Chain = ll_require &rArr; findloader &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>ll_searchpath</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, loadlib.o(i.ll_searchpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 10200<LI>Call Chain = ll_searchpath &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[404]"></a>loadfunc</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, loadlib.o(i.loadfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 6008<LI>Call Chain = loadfunc &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
</UL>

<P><STRONG><a name="[3fa]"></a>lookforfunc</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, loadlib.o(i.lookforfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = lookforfunc &rArr; addtoclib &rArr; luaL_len &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsys_sym
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsys_load
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclib
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
</UL>

<P><STRONG><a name="[40b]"></a>lsys_load</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, loadlib.o(i.lsys_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lsys_load &rArr; lua_pushstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>

<P><STRONG><a name="[40c]"></a>lsys_sym</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, loadlib.o(i.lsys_sym))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lsys_sym &rArr; lua_pushstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>

<P><STRONG><a name="[3a5]"></a>lsys_unloadlib</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loadlib.o(i.lsys_unloadlib))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
</UL>

<P><STRONG><a name="[4ba]"></a>noenv</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, loadlib.o(i.noenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = noenv &rArr; lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
</UL>

<P><STRONG><a name="[4cb]"></a>pushnexttemplate</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, loadlib.o(i.pushnexttemplate))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = pushnexttemplate &rArr; lua_pushlstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>

<P><STRONG><a name="[4de]"></a>readable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, loadlib.o(i.readable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readable
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>

<P><STRONG><a name="[115]"></a>searcher_C</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, loadlib.o(i.searcher_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 10224<LI>Call Chain = searcher_C &rArr; findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>searcher_Croot</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, loadlib.o(i.searcher_Croot))
<BR><BR>[Stack]<UL><LI>Max Depth = 10232<LI>Call Chain = searcher_Croot &rArr; findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>searcher_Lua</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, loadlib.o(i.searcher_Lua))
<BR><BR>[Stack]<UL><LI>Max Depth = 10224<LI>Call Chain = searcher_Lua &rArr; findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>searcher_preload</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, loadlib.o(i.searcher_preload))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = searcher_preload &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[368]"></a>searchpath</STRONG> (Thumb, 180 bytes, Stack size 4192 bytes, loadlib.o(i.searchpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 10168<LI>Call Chain = searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readable
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnexttemplate
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
</UL>

<P><STRONG><a name="[4a3]"></a>setpath</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, loadlib.o(i.setpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 6008<LI>Call Chain = setpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noenv
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[3d0]"></a>intarith</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, lobject.o(i.intarith))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = intarith &rArr; luaV_mod &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
</UL>

<P><STRONG><a name="[3eb]"></a>isneg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lobject.o(i.isneg))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2int
</UL>

<P><STRONG><a name="[3e5]"></a>l_str2d</STRONG> (Thumb, 140 bytes, Stack size 232 bytes, lobject.o(i.l_str2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2dloc
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>

<P><STRONG><a name="[3e7]"></a>l_str2dloc</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lobject.o(i.l_str2dloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
</UL>

<P><STRONG><a name="[3ea]"></a>l_str2int</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, lobject.o(i.l_str2int))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = l_str2int
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_hexavalue
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isneg
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>

<P><STRONG><a name="[47d]"></a>numarith</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, lobject.o(i.numarith))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = numarith &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
</UL>

<P><STRONG><a name="[479]"></a>pushstr</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lobject.o(i.pushstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = pushstr &rArr; luaD_inctop &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>

<P><STRONG><a name="[2a9]"></a>checkoption</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, loslib.o(i.checkoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = checkoption &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
</UL>

<P><STRONG><a name="[3aa]"></a>getboolfield</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, loslib.o(i.getboolfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = getboolfield &rArr; lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
</UL>

<P><STRONG><a name="[3b0]"></a>getfield</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, loslib.o(i.getfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = getfield &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
</UL>

<P><STRONG><a name="[3e2]"></a>l_checktime</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, loslib.o(i.l_checktime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = l_checktime &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_difftime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
</UL>

<P><STRONG><a name="[117]"></a>os_clock</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, loslib.o(i.os_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = os_clock &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>os_date</STRONG> (Thumb, 280 bytes, Stack size 4192 bytes, loslib.o(i.os_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 6112<LI>Call Chain = os_date &rArr; l_checktime &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setallfields
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checktime
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkoption
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>os_difftime</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, loslib.o(i.os_difftime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = os_difftime &rArr; l_checktime &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checktime
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;difftime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>os_execute</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, loslib.o(i.os_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = os_execute &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>os_exit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, loslib.o(i.os_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = os_exit &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>os_getenv</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, loslib.o(i.os_getenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = os_getenv &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>os_remove</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, loslib.o(i.os_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = os_remove &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>os_rename</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, loslib.o(i.os_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = os_rename &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>os_setlocale</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, loslib.o(i.os_setlocale))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = os_setlocale &rArr; luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>os_time</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, loslib.o(i.os_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = os_time &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setallfields
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getboolfield
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>os_tmpname</STRONG> (Thumb, 48 bytes, Stack size 272 bytes, loslib.o(i.os_tmpname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = os_tmpname &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[4bd]"></a>setallfields</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, loslib.o(i.setallfields))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = setallfields &rArr; setfield &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setfield
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setboolfield
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
</UL>

<P><STRONG><a name="[4e2]"></a>setboolfield</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, loslib.o(i.setboolfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = setboolfield &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setallfields
</UL>

<P><STRONG><a name="[4e1]"></a>setfield</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, loslib.o(i.setfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = setfield &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setallfields
</UL>

<P><STRONG><a name="[21b]"></a>addprototype</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, lparser.o(i.addprototype))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = addprototype &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[223]"></a>adjust_assign</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lparser.o(i.adjust_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = adjust_assign &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[228]"></a>adjustlocalvars</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lparser.o(i.adjustlocalvars))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adjustlocalvars &rArr; getlocvar
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[22f]"></a>assignment</STRONG> (Thumb, 226 bytes, Stack size 80 bytes, lparser.o(i.assignment))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104 + In Cycle
<LI>Call Chain = assignment &rArr;  assignment (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setoneret
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeundef
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_incCcalls
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_conflict
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exprstat
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[272]"></a>block</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, lparser.o(i.block))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544 + In Cycle
<LI>Call Chain = block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[3ef]"></a>block_follow</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lparser.o(i.block_follow))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[276]"></a>body</STRONG> (Thumb, 120 bytes, Stack size 96 bytes, lparser.o(i.body))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720 + In Cycle
<LI>Call Chain = body &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeclosure
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
</UL>

<P><STRONG><a name="[27f]"></a>breakstat</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lparser.o(i.breakstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = breakstat &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[28d]"></a>check</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lparser.o(i.check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = check &rArr; error_expected &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>

<P><STRONG><a name="[233]"></a>check_conflict</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, lparser.o(i.check_conflict))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = check_conflict &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[27a]"></a>check_match</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, lparser.o(i.check_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = check_match &rArr; testnext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[2a0]"></a>checklimit</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lparser.o(i.checklimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = checklimit &rArr; errorlimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listfield
</UL>

<P><STRONG><a name="[2a6]"></a>checkname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lparser.o(i.checkname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = checkname &rArr; codestring &rArr; luaK_stringK &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
</UL>

<P><STRONG><a name="[235]"></a>checknext</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lparser.o(i.checknext))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = checknext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[2ac]"></a>checkrepeated</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lparser.o(i.checkrepeated))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = checkrepeated &rArr; luaK_semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[27c]"></a>close_func</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, lparser.o(i.close_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = close_func &rArr; leaveblock &rArr; fixbreaks &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_finish
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_shrinkvector_
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[2bf]"></a>closegoto</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, lparser.o(i.closegoto))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = closegoto &rArr; luaK_patchgoto &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchgoto
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solvelabel
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solvegotos
</UL>

<P><STRONG><a name="[2c1]"></a>closelistfield</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lparser.o(i.closelistfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = closelistfield &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[27b]"></a>codeclosure</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lparser.o(i.codeclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = codeclosure &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[2a8]"></a>codestring</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lparser.o(i.codestring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = codestring &rArr; luaK_stringK &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_stringK
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>

<P><STRONG><a name="[2ed]"></a>cond</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, lparser.o(i.cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168<LI>Call Chain = cond &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
</UL>

<P><STRONG><a name="[2f5]"></a>constructor</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, lparser.o(i.constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = constructor &rArr; field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_int2fb
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlistfield
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closelistfield
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
</UL>

<P><STRONG><a name="[273]"></a>enterblock</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lparser.o(i.enterblock))
<BR><BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>

<P><STRONG><a name="[28e]"></a>error_expected</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lparser.o(i.error_expected))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = error_expected &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>

<P><STRONG><a name="[2a1]"></a>errorlimit</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, lparser.o(i.errorlimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = errorlimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>

<P><STRONG><a name="[346]"></a>exp1</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, lparser.o(i.exp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176<LI>Call Chain = exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_isKint
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
</UL>

<P><STRONG><a name="[237]"></a>explist</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lparser.o(i.explist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616 + In Cycle
<LI>Call Chain = explist &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[2ee]"></a>expr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lparser.o(i.expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136<LI>Call Chain = expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listfield
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
</UL>

<P><STRONG><a name="[34d]"></a>exprstat</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, lparser.o(i.exprstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = exprstat &rArr; assignment &rArr;  assignment (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[2f6]"></a>field</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lparser.o(i.field))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lookahead
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listfield
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[360]"></a>fieldsel</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, lparser.o(i.fieldsel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = fieldsel &rArr; luaK_indexed &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcname
</UL>

<P><STRONG><a name="[377]"></a>fixbreaks</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lparser.o(i.fixbreaks))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = fixbreaks &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchgoto
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[378]"></a>fixforjump</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lparser.o(i.fixforjump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = fixforjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[37e]"></a>forbody</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, lparser.o(i.forbody))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = forbody &rArr; block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixforjump
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
</UL>

<P><STRONG><a name="[382]"></a>forlist</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, lparser.o(i.forlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = forlist &rArr; adjust_assign &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
</UL>

<P><STRONG><a name="[385]"></a>fornum</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, lparser.o(i.fornum))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208<LI>Call Chain = fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
</UL>

<P><STRONG><a name="[386]"></a>forstat</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lparser.o(i.forstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248<LI>Call Chain = forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[396]"></a>funcargs</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, lparser.o(i.funcargs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = funcargs &rArr; constructor &rArr; field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[398]"></a>funcname</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lparser.o(i.funcname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = funcname &rArr; singlevar &rArr; luaK_indexed &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
</UL>

<P><STRONG><a name="[39c]"></a>funcstat</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, lparser.o(i.funcstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = funcstat &rArr; luaK_storevar &rArr; codeABRK &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcname
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[4f2]"></a>getbinopr</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, lparser.o(i.getbinopr))
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[229]"></a>getlocvar</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lparser.o(i.getlocvar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getlocvar
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchvar
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevars
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>

<P><STRONG><a name="[4f1]"></a>getunopr</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lparser.o(i.getunopr))
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[3c3]"></a>gotostat</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, lparser.o(i.gotostat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = gotostat &rArr; str_checkname &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solvelabel
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[3ca]"></a>ifstat</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lparser.o(i.ifstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232<LI>Call Chain = ifstat &rArr; test_then_block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[23a]"></a>init_exp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lparser.o(i.init_exp))
<BR><BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeclosure
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[3ed]"></a>labelstat</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, lparser.o(i.labelstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = labelstat &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solvegotos
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipnoopstat
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrepeated
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[2f7]"></a>lastlistfield</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lparser.o(i.lastlistfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = lastlistfield &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[275]"></a>leaveblock</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lparser.o(i.leaveblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = leaveblock &rArr; fixbreaks &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevars
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movegotosout
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixbreaks
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>

<P><STRONG><a name="[35e]"></a>listfield</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lparser.o(i.listfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + In Cycle
<LI>Call Chain = listfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
</UL>

<P><STRONG><a name="[406]"></a>localfunc</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, lparser.o(i.localfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = localfunc &rArr; body &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[407]"></a>localstat</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, lparser.o(i.localstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = localstat &rArr; adjust_assign &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[493]"></a>mainfunc</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, lparser.o(i.mainfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2328<LI>Call Chain = mainfunc &rArr; statlist &rArr; statement &rArr; repeatstat &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvararg
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[4e6]"></a>markupval</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lparser.o(i.markupval))
<BR><BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[3f3]"></a>movegotosout</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lparser.o(i.movegotosout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = movegotosout &rArr; solvelabel &rArr; closegoto &rArr; luaK_patchgoto &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solvelabel
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[383]"></a>new_localvar</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, lparser.o(i.new_localvar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = new_localvar &rArr; registerlocalvar &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
</UL>

<P><STRONG><a name="[278]"></a>new_localvarliteral_</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lparser.o(i.new_localvarliteral_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = new_localvarliteral_ &rArr; new_localvar &rArr; registerlocalvar &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[3c4]"></a>newlabelentry</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, lparser.o(i.newlabelentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = newlabelentry &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
</UL>

<P><STRONG><a name="[4a6]"></a>newupvalue</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, lparser.o(i.newupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = newupvalue &rArr; checklimit &rArr; errorlimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
</UL>

<P><STRONG><a name="[277]"></a>open_func</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lparser.o(i.open_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = open_func
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[279]"></a>parlist</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lparser.o(i.parlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = parlist &rArr; setvararg &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvararg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[4c1]"></a>primaryexp</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lparser.o(i.primaryexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696 + In Cycle
<LI>Call Chain = primaryexp &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[35f]"></a>recfield</STRONG> (Thumb, 118 bytes, Stack size 96 bytes, lparser.o(i.recfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824 + In Cycle
<LI>Call Chain = recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
</UL>

<P><STRONG><a name="[4b8]"></a>registerlocalvar</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, lparser.o(i.registerlocalvar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = registerlocalvar &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
</UL>

<P><STRONG><a name="[3f2]"></a>removevars</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lparser.o(i.removevars))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = removevars &rArr; getlocvar
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[4d8]"></a>repeatstat</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, lparser.o(i.repeatstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248 + In Cycle
<LI>Call Chain = repeatstat &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[4db]"></a>retstat</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, lparser.o(i.retstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = retstat &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[4e7]"></a>searchupvalue</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lparser.o(i.searchupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = searchupvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[4df]"></a>searchvar</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lparser.o(i.searchvar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = searchvar &rArr; getlocvar
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[4a5]"></a>setvararg</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lparser.o(i.setvararg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = setvararg &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
</UL>

<P><STRONG><a name="[4e3]"></a>simpleexp</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, lparser.o(i.simpleexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056<LI>Call Chain = simpleexp &rArr; suffixedexp &rArr; funcargs &rArr; constructor &rArr; field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[399]"></a>singlevar</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, lparser.o(i.singlevar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = singlevar &rArr; luaK_indexed &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcname
</UL>

<P><STRONG><a name="[4e5]"></a>singlevaraux</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lparser.o(i.singlevaraux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456 + In Cycle
<LI>Call Chain = singlevaraux &rArr;  singlevaraux (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchvar
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchupvalue
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markupval
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
</UL>

<P><STRONG><a name="[3ee]"></a>skipnoopstat</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lparser.o(i.skipnoopstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = skipnoopstat &rArr;  statement (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[3f0]"></a>solvegotos</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lparser.o(i.solvegotos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = solvegotos &rArr; closegoto &rArr; luaK_patchgoto &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[3c5]"></a>solvelabel</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lparser.o(i.solvelabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = solvelabel &rArr; closegoto &rArr; luaK_patchgoto &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movegotosout
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
</UL>

<P><STRONG><a name="[4e9]"></a>statement</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, lparser.o(i.statement))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = statement &rArr; repeatstat &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_incCcalls
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exprstat
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakstat
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipnoopstat
</UL>

<P><STRONG><a name="[274]"></a>statlist</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lparser.o(i.statlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272<LI>Call Chain = statlist &rArr; statement &rArr; repeatstat &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>

<P><STRONG><a name="[2a7]"></a>str_checkname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lparser.o(i.str_checkname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = str_checkname &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>

<P><STRONG><a name="[34c]"></a>subexpr</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, lparser.o(i.subexpr))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + In Cycle
<LI>Call Chain = subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_incCcalls
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getunopr
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getbinopr
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>

<P><STRONG><a name="[232]"></a>suffixedexp</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, lparser.o(i.suffixedexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024<LI>Call Chain = suffixedexp &rArr; funcargs &rArr; constructor &rArr; field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exprstat
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[3cb]"></a>test_then_block</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, lparser.o(i.test_then_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208 + In Cycle
<LI>Call Chain = test_then_block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakstat
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
</UL>

<P><STRONG><a name="[231]"></a>testnext</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lparser.o(i.testnext))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = testnext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[3f4]"></a>undefgoto</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lparser.o(i.undefgoto))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = undefgoto &rArr; luaK_semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[4ea]"></a>whilestat</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, lparser.o(i.whilestat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216<LI>Call Chain = whilestat &rArr; cond &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[4d4]"></a>yindex</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lparser.o(i.yindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + In Cycle
<LI>Call Chain = yindex &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
</UL>

<P><STRONG><a name="[2ba]"></a>close_state</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lstate.o(i.close_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = close_state &rArr; luaC_freeallobjects &rArr; luaC_changemode &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[a6]"></a>f_luaopen</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lstate.o(i.f_luaopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = f_luaopen &rArr; init_registry &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_version
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_registry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstate.o(i.lua_newstate)
</UL>
<P><STRONG><a name="[2be]"></a>freestack</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lstate.o(i.freestack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = freestack &rArr; luaE_freeCI &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freeCI
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[351]"></a>init_registry</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, lstate.o(i.init_registry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = init_registry &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[499]"></a>makeseed</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lstate.o(i.makeseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = makeseed &rArr; luaS_hash
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[498]"></a>preinit_thread</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lstate.o(i.preinit_thread))
<BR><BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[350]"></a>stack_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lstate.o(i.stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stack_init &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[30d]"></a>createstrobj</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lstring.o(i.createstrobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = createstrobj &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
</UL>

<P><STRONG><a name="[3c6]"></a>growstrtab</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lstring.o(i.growstrtab))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + In Cycle
<LI>Call Chain = growstrtab &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
</UL>

<P><STRONG><a name="[3d4]"></a>internshrstr</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, lstring.o(i.internshrstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = internshrstr &rArr; createstrobj &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;growstrtab
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstrobj
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hash
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>

<P><STRONG><a name="[480]"></a>tablerehash</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, lstring.o(i.tablerehash))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tablerehash
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
</UL>

<P><STRONG><a name="[1f5]"></a>add_s</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, lstrlib.o(i.add_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = add_s &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[1ff]"></a>add_value</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, lstrlib.o(i.add_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = add_value &rArr; add_s &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
</UL>

<P><STRONG><a name="[210]"></a>addlenmod</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lstrlib.o(i.addlenmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = addlenmod
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[213]"></a>addliteral</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, lstrlib.o(i.addliteral))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = addliteral &rArr; addquoted &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quotefloat
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[214]"></a>addquoted</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, lstrlib.o(i.addquoted))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = addquoted &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[22a]"></a>arith</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lstrlib.o(i.arith))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = arith &rArr; trymt &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_arith
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trymt
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonum
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_unm
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_sub
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_pow
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_mul
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_mod
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_idiv
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_div
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_add
</UL>

<P><STRONG><a name="[122]"></a>arith_add</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstrlib.o(i.arith_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = arith_add &rArr; arith &rArr; trymt &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>arith_div</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstrlib.o(i.arith_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = arith_div &rArr; arith &rArr; trymt &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>arith_idiv</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstrlib.o(i.arith_idiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = arith_idiv &rArr; arith &rArr; trymt &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>arith_mod</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstrlib.o(i.arith_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = arith_mod &rArr; arith &rArr; trymt &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>arith_mul</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstrlib.o(i.arith_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = arith_mul &rArr; arith &rArr; trymt &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>arith_pow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstrlib.o(i.arith_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = arith_pow &rArr; arith &rArr; trymt &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>arith_sub</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstrlib.o(i.arith_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = arith_sub &rArr; arith &rArr; trymt &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>arith_unm</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstrlib.o(i.arith_unm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = arith_unm &rArr; arith &rArr; trymt &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[289]"></a>capture_to_close</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lstrlib.o(i.capture_to_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = capture_to_close &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_capture
</UL>

<P><STRONG><a name="[295]"></a>check_capture</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lstrlib.o(i.check_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = check_capture &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_capture
</UL>

<P><STRONG><a name="[2b2]"></a>classend</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lstrlib.o(i.classend))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = classend &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[4ee]"></a>copywithendian</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lstrlib.o(i.copywithendian))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = copywithendian
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[309]"></a>createmetatable</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lstrlib.o(i.createmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = createmetatable &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
</UL>

<P><STRONG><a name="[3b6]"></a>digit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lstrlib.o(i.digit))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
</UL>

<P><STRONG><a name="[334]"></a>end_capture</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lstrlib.o(i.end_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712 + In Cycle
<LI>Call Chain = end_capture &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capture_to_close
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[3ae]"></a>getdetails</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lstrlib.o(i.getdetails))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = getdetails &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[3b5]"></a>getnum</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lstrlib.o(i.getnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getnum
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnumlimit
</UL>

<P><STRONG><a name="[3b7]"></a>getnumlimit</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lstrlib.o(i.getnumlimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = getnumlimit &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
</UL>

<P><STRONG><a name="[3af]"></a>getoption</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, lstrlib.o(i.getoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = getoption &rArr; getnumlimit &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnumlimit
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
</UL>

<P><STRONG><a name="[12f]"></a>gmatch</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, lstrlib.o(i.gmatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = gmatch &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdatauv
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepstate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>gmatch_aux</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lstrlib.o(i.gmatch_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = gmatch_aux &rArr; match &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reprepstate
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(i.gmatch)
</UL>
<P><STRONG><a name="[4ed]"></a>initheader</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lstrlib.o(i.initheader))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[401]"></a>lmemfind</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lstrlib.o(i.lmemfind))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lmemfind &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[335]"></a>match</STRONG> (Thumb, 494 bytes, Stack size 24 bytes, lstrlib.o(i.match))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736 + In Cycle
<LI>Call Chain = match &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_expand
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbalance
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_capture
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_capture
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;classend
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_expand
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_capture
</UL>

<P><STRONG><a name="[4ab]"></a>match_capture</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lstrlib.o(i.match_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = match_capture &rArr; check_capture &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_capture
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[4af]"></a>match_class</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, lstrlib.o(i.match_class))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = match_class
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
</UL>

<P><STRONG><a name="[4a9]"></a>matchbalance</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lstrlib.o(i.matchbalance))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = matchbalance &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[4aa]"></a>matchbracketclass</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lstrlib.o(i.matchbracketclass))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = matchbracketclass &rArr; match_class
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[4ad]"></a>max_expand</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lstrlib.o(i.max_expand))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = max_expand &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[4ae]"></a>min_expand</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lstrlib.o(i.min_expand))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = min_expand &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[4bb]"></a>nospecials</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lstrlib.o(i.nospecials))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nospecials &rArr; strpbrk
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[4c0]"></a>packint</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, lstrlib.o(i.packint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = packint &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[4eb]"></a>posrelat</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lstrlib.o(i.posrelat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = posrelat
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
</UL>

<P><STRONG><a name="[3c1]"></a>prepstate</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lstrlib.o(i.prepstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prepstate
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
</UL>

<P><STRONG><a name="[201]"></a>push_captures</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lstrlib.o(i.push_captures))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = push_captures &rArr; push_onecapture &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[1fa]"></a>push_onecapture</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lstrlib.o(i.push_onecapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = push_onecapture &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[217]"></a>quotefloat</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, lstrlib.o(i.quotefloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = quotefloat &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[3c2]"></a>reprepstate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lstrlib.o(i.reprepstate))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
</UL>

<P><STRONG><a name="[4dd]"></a>scanformat</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, lstrlib.o(i.scanformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = scanformat &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[4ac]"></a>singlematch</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lstrlib.o(i.singlematch))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = singlematch &rArr; matchbracketclass &rArr; match_class
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_expand
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[4a8]"></a>start_capture</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lstrlib.o(i.start_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704 + In Cycle
<LI>Call Chain = start_capture &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[12a]"></a>str_byte</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, lstrlib.o(i.str_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = str_byte &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>str_char</STRONG> (Thumb, 96 bytes, Stack size 4192 bytes, lstrlib.o(i.str_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 6088<LI>Call Chain = str_char &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>str_dump</STRONG> (Thumb, 82 bytes, Stack size 4176 bytes, lstrlib.o(i.str_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 6048<LI>Call Chain = str_dump &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_dump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>str_find</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lstrlib.o(i.str_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272<LI>Call Chain = str_find &rArr; str_find_aux &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[4ec]"></a>str_find_aux</STRONG> (Thumb, 370 bytes, Stack size 344 bytes, lstrlib.o(i.str_find_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = str_find_aux &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reprepstate
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepstate
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelat
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nospecials
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmemfind
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_match
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find
</UL>

<P><STRONG><a name="[12e]"></a>str_format</STRONG> (Thumb, 648 bytes, Stack size 4208 bytes, lstrlib.o(i.str_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 6104<LI>Call Chain = str_format &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addlenmod
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>str_gsub</STRONG> (Thumb, 444 bytes, Stack size 4456 bytes, lstrlib.o(i.str_gsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 6376<LI>Call Chain = str_gsub &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reprepstate
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepstate
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>str_len</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lstrlib.o(i.str_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = str_len &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>str_lower</STRONG> (Thumb, 88 bytes, Stack size 4184 bytes, lstrlib.o(i.str_lower))
<BR><BR>[Stack]<UL><LI>Max Depth = 6064<LI>Call Chain = str_lower &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>str_match</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lstrlib.o(i.str_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272<LI>Call Chain = str_match &rArr; str_find_aux &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>str_pack</STRONG> (Thumb, 842 bytes, Stack size 4264 bytes, lstrlib.o(i.str_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 6160<LI>Call Chain = str_pack &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packint
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initheader
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copywithendian
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>str_packsize</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, lstrlib.o(i.str_packsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = str_packsize &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initheader
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>str_rep</STRONG> (Thumb, 280 bytes, Stack size 4192 bytes, lstrlib.o(i.str_rep))
<BR><BR>[Stack]<UL><LI>Max Depth = 6096<LI>Call Chain = str_rep &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>str_reverse</STRONG> (Thumb, 92 bytes, Stack size 4184 bytes, lstrlib.o(i.str_reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 6064<LI>Call Chain = str_reverse &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>str_sub</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, lstrlib.o(i.str_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = str_sub &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>str_unpack</STRONG> (Thumb, 420 bytes, Stack size 104 bytes, lstrlib.o(i.str_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024<LI>Call Chain = str_unpack &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackint
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelat
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initheader
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copywithendian
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>str_upper</STRONG> (Thumb, 88 bytes, Stack size 4184 bytes, lstrlib.o(i.str_upper))
<BR><BR>[Stack]<UL><LI>Max Depth = 6064<LI>Call Chain = str_upper &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[22b]"></a>tonum</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lstrlib.o(i.tonum))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tonum &rArr; lua_stringtonumber &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>

<P><STRONG><a name="[22d]"></a>trymt</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lstrlib.o(i.trymt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = trymt &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>

<P><STRONG><a name="[4ef]"></a>unpackint</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, lstrlib.o(i.unpackint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = unpackint &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
</UL>

<P><STRONG><a name="[ae]"></a>writer</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lstrlib.o(i.writer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = writer &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(i.str_dump)
</UL>
<P><STRONG><a name="[300]"></a>arrayindex</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ltable.o(i.arrayindex))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
</UL>

<P><STRONG><a name="[4d7]"></a>computesizes</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, ltable.o(i.computesizes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = computesizes
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[2ff]"></a>countint</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ltable.o(i.countint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = countint
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_ceillog2
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayindex
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numusehash
</UL>

<P><STRONG><a name="[33e]"></a>equalkey</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, ltable.o(i.equalkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = equalkey &rArr; luaS_eqlngstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_eqlngstr
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
</UL>

<P><STRONG><a name="[44e]"></a>exchangehashpart</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, ltable.o(i.exchangehashpart))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = exchangehashpart
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>

<P><STRONG><a name="[369]"></a>findindex</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ltable.o(i.findindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = findindex &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayindex
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
</UL>

<P><STRONG><a name="[38a]"></a>freehash</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ltable.o(i.freehash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = freehash &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
</UL>

<P><STRONG><a name="[449]"></a>getfreepos</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ltable.o(i.getfreepos))
<BR><BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[36a]"></a>getgeneric</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ltable.o(i.getgeneric))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = getgeneric &rArr; mainpositionTV &rArr; mainposition &rArr; l_hashfloat &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainpositionTV
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equalkey
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>

<P><STRONG><a name="[3c8]"></a>hash_search</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, ltable.o(i.hash_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hash_search &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
</UL>

<P><STRONG><a name="[3e3]"></a>l_hashfloat</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ltable.o(i.l_hashfloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = l_hashfloat &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>

<P><STRONG><a name="[44b]"></a>mainposition</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, ltable.o(i.mainposition))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mainposition &rArr; l_hashfloat &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hashlongstr
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainpositionTV
</UL>

<P><STRONG><a name="[3b1]"></a>mainpositionTV</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ltable.o(i.mainpositionTV))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mainpositionTV &rArr; mainposition &rArr; l_hashfloat &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
</UL>

<P><STRONG><a name="[4d6]"></a>numusearray</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ltable.o(i.numusearray))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = numusearray
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[4bc]"></a>numusehash</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ltable.o(i.numusehash))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = numusehash &rArr; countint
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[44a]"></a>rehash</STRONG> (Thumb, 108 bytes, Stack size 168 bytes, ltable.o(i.rehash))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numusehash
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numusearray
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computesizes
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[44f]"></a>reinsert</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, ltable.o(i.reinsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = reinsert &rArr; luaH_set &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>

<P><STRONG><a name="[447]"></a>setnodevector</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ltable.o(i.setnodevector))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = setnodevector &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_ceillog2
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
</UL>

<P><STRONG><a name="[209]"></a>addfield</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ltablib.o(i.addfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = addfield &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
</UL>

<P><STRONG><a name="[264]"></a>auxsort</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, ltablib.o(i.auxsort))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728 + In Cycle
<LI>Call Chain = auxsort &rArr;  auxsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set2
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_randomizePivot
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choosePivot
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[29e]"></a>checkfield</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ltablib.o(i.checkfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = checkfield &rArr; lua_pushstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>

<P><STRONG><a name="[2af]"></a>checktab</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ltablib.o(i.checktab))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = checktab &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkfield
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
</UL>

<P><STRONG><a name="[267]"></a>choosePivot</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ltablib.o(i.choosePivot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = choosePivot
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[269]"></a>l_randomizePivot</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, ltablib.o(i.l_randomizePivot))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = l_randomizePivot
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[13d]"></a>pack</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ltablib.o(i.pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = pack &rArr; lua_createtable &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[268]"></a>partition</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, ltablib.o(i.partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = partition &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set2
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[266]"></a>set2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ltablib.o(i.set2))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = set2 &rArr; lua_seti &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[141]"></a>sort</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ltablib.o(i.sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = sort &rArr; checktab &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[265]"></a>sort_comp</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ltablib.o(i.sort_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = sort_comp &rArr; lua_callk &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[13b]"></a>tconcat</STRONG> (Thumb, 164 bytes, Stack size 4192 bytes, ltablib.o(i.tconcat))
<BR><BR>[Stack]<UL><LI>Max Depth = 6112<LI>Call Chain = tconcat &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>tinsert</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ltablib.o(i.tinsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = tinsert &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>tmove</STRONG> (Thumb, 398 bytes, Stack size 64 bytes, ltablib.o(i.tmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = tmove &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>tremove</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ltablib.o(i.tremove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = tremove &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_removekey
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>unpack</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ltablib.o(i.unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = unpack &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[287]"></a>callbinTM</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ltm.o(i.callbinTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = callbinTM &rArr; luaT_callTMres &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>

<P><STRONG><a name="[1a9]"></a>LoadBlock</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lundump.o(i.LoadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNumber
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInteger
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCode
</UL>

<P><STRONG><a name="[1ac]"></a>LoadByte</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lundump.o(i.LoadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = LoadByte &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSize
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[1ae]"></a>LoadCode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lundump.o(i.LoadCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = LoadCode &rArr; LoadInt &rArr; LoadSize &rArr; LoadByte &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[1b2]"></a>LoadConstants</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, lundump.o(i.LoadConstants))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = LoadConstants &rArr; LoadString &rArr; LoadSize &rArr; LoadByte &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNumber
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInteger
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[1b6]"></a>LoadDebug</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, lundump.o(i.LoadDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = LoadDebug &rArr; LoadString &rArr; LoadSize &rArr; LoadByte &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[1b7]"></a>LoadFunction</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lundump.o(i.LoadFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = LoadFunction &rArr; LoadConstants &rArr; LoadString &rArr; LoadSize &rArr; LoadByte &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCode
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
</UL>

<P><STRONG><a name="[1af]"></a>LoadInt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lundump.o(i.LoadInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = LoadInt &rArr; LoadSize &rArr; LoadByte &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSize
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCode
</UL>

<P><STRONG><a name="[1b4]"></a>LoadInteger</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lundump.o(i.LoadInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = LoadInteger &rArr; LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[1b3]"></a>LoadNumber</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lundump.o(i.LoadNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = LoadNumber &rArr; LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[1b9]"></a>LoadProtos</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lundump.o(i.LoadProtos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + In Cycle
<LI>Call Chain = LoadProtos &rArr;  LoadFunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[1ba]"></a>LoadSize</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lundump.o(i.LoadSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = LoadSize &rArr; LoadByte &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
</UL>

<P><STRONG><a name="[1b5]"></a>LoadString</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, lundump.o(i.LoadString))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = LoadString &rArr; LoadSize &rArr; LoadByte &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSize
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[1b8]"></a>LoadUpvalues</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lundump.o(i.LoadUpvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = LoadUpvalues &rArr; LoadInt &rArr; LoadSize &rArr; LoadByte &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[28f]"></a>checkHeader</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, lundump.o(i.checkHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = checkHeader &rArr; checkliteral &rArr; LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNumber
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInteger
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
</UL>

<P><STRONG><a name="[290]"></a>checkliteral</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lundump.o(i.checkliteral))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = checkliteral &rArr; LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
</UL>

<P><STRONG><a name="[1ab]"></a>error</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lundump.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>

<P><STRONG><a name="[291]"></a>fchecksize</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lundump.o(i.fchecksize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = fchecksize &rArr; LoadByte &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
</UL>

<P><STRONG><a name="[142]"></a>byteoffset</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, lutf8lib.o(i.byteoffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = byteoffset &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>codepoint</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, lutf8lib.o(i.codepoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = codepoint &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_decode
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>iter_aux</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, lutf8lib.o(i.iter_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = iter_aux &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(i.iter_codes)
</UL>
<P><STRONG><a name="[146]"></a>iter_codes</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lutf8lib.o(i.iter_codes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = iter_codes &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[4cc]"></a>pushutfchar</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lutf8lib.o(i.pushutfchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = pushutfchar &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
</UL>

<P><STRONG><a name="[284]"></a>u_posrelat</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lutf8lib.o(i.u_posrelat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u_posrelat
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
</UL>

<P><STRONG><a name="[2e4]"></a>utf8_decode</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, lutf8lib.o(i.utf8_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = utf8_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
</UL>

<P><STRONG><a name="[144]"></a>utfchar</STRONG> (Thumb, 78 bytes, Stack size 4176 bytes, lutf8lib.o(i.utfchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 6096<LI>Call Chain = utfchar &rArr; pushutfchar &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushutfchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>utflen</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, lutf8lib.o(i.utflen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = utflen &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_decode
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[1a0]"></a>LEfloatint</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lvm.o(i.LEfloatint))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LEfloatint &rArr; luaV_flttointeger &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
</UL>

<P><STRONG><a name="[1a4]"></a>LEintfloat</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, lvm.o(i.LEintfloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LEintfloat &rArr; luaV_flttointeger &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
</UL>

<P><STRONG><a name="[1a5]"></a>LEnum</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lvm.o(i.LEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LEnum &rArr; LEintfloat &rArr; luaV_flttointeger &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfloatint
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
</UL>

<P><STRONG><a name="[1a6]"></a>LTfloatint</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, lvm.o(i.LTfloatint))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LTfloatint &rArr; luaV_flttointeger &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
</UL>

<P><STRONG><a name="[1a7]"></a>LTintfloat</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lvm.o(i.LTintfloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LTintfloat &rArr; luaV_flttointeger &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
</UL>

<P><STRONG><a name="[1a8]"></a>LTnum</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lvm.o(i.LTnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LTnum &rArr; LTintfloat &rArr; luaV_flttointeger &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTfloatint
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
</UL>

<P><STRONG><a name="[2fa]"></a>copy2buff</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lvm.o(i.copy2buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = copy2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
</UL>

<P><STRONG><a name="[37f]"></a>forlimit</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lvm.o(i.forlimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = forlimit &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[48d]"></a>getcached</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, lvm.o(i.getcached))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getcached
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[3ec]"></a>l_strcmp</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lvm.o(i.l_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = l_strcmp &rArr; strcoll &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessthanothers
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessequalothers
</UL>

<P><STRONG><a name="[3f5]"></a>lessequalothers</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lvm.o(i.lessequalothers))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lessequalothers &rArr; luaT_callorderTM &rArr;  callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
</UL>

<P><STRONG><a name="[3f7]"></a>lessthanothers</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lvm.o(i.lessthanothers))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lessthanothers &rArr; luaT_callorderTM &rArr;  callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
</UL>

<P><STRONG><a name="[48e]"></a>pushclosure</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, lvm.o(i.pushclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pushclosure &rArr; luaF_findupval &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_findupval
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_protobarrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[150]"></a>_isoweek</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_yeardays
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[151]"></a>_yeardays</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, strftime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>

<P><STRONG><a name="[1ee]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1dd]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[1f0]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ef]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[93]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[1e8]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__malloc$realloc
</UL>

<P><STRONG><a name="[165]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[16d]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
