; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\ldump.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\ldump.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\ldump.crf ..\..\..\M6P1(L)_Lua\lua\ldump.c]
                          THUMB

                          AREA ||i.DumpBlock||, CODE, READONLY, ALIGN=1

                  DumpBlock PROC
;;;39     
;;;40     static void DumpBlock (const void *b, size_t size, DumpState *D) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
;;;41       if (D->status == 0 && size > 0) {
00000a  6920              LDR      r0,[r4,#0x10]
00000c  b940              CBNZ     r0,|L1.32|
00000e  b13d              CBZ      r5,|L1.32|
;;;42         lua_unlock(D->L);
;;;43         D->status = (*D->writer)(D->L, b, size, D->data);
000010  462a              MOV      r2,r5
000012  4631              MOV      r1,r6
000014  e9d47301          LDRD     r7,r3,[r4,#4]
000018  6820              LDR      r0,[r4,#0]
00001a  47b8              BLX      r7
00001c  6120              STR      r0,[r4,#0x10]
;;;44         lua_lock(D->L);
00001e  bf00              NOP      
                  |L1.32|
;;;45       }
;;;46     }
000020  e8bd81f0          POP      {r4-r8,pc}
;;;47     
                          ENDP


                          AREA ||i.DumpByte||, CODE, READONLY, ALIGN=1

                  DumpByte PROC
;;;51     
;;;52     static void DumpByte (int y, DumpState *D) {
000000  b538              PUSH     {r3-r5,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;53       lu_byte x = (lu_byte)y;
000006  b2e8              UXTB     r0,r5
000008  9000              STR      r0,[sp,#0]
;;;54       DumpVar(x, D);
00000a  4622              MOV      r2,r4
00000c  2101              MOVS     r1,#1
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       DumpBlock
;;;55     }
000014  bd38              POP      {r3-r5,pc}
;;;56     
                          ENDP


                          AREA ||i.DumpCode||, CODE, READONLY, ALIGN=1

                  DumpCode PROC
;;;99     
;;;100    static void DumpCode (const Proto *f, DumpState *D) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;101      DumpInt(f->sizecode, D);
000006  4629              MOV      r1,r5
000008  6960              LDR      r0,[r4,#0x14]
00000a  f7fffffe          BL       DumpInt
;;;102      DumpVector(f->code, f->sizecode, D);
00000e  6962              LDR      r2,[r4,#0x14]
000010  0091              LSLS     r1,r2,#2
000012  462a              MOV      r2,r5
000014  6ba0              LDR      r0,[r4,#0x38]
000016  f7fffffe          BL       DumpBlock
;;;103    }
00001a  bd70              POP      {r4-r6,pc}
;;;104    
                          ENDP


                          AREA ||i.DumpConstants||, CODE, READONLY, ALIGN=1

                  DumpConstants PROC
;;;107    
;;;108    static void DumpConstants (const Proto *f, DumpState *D) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
;;;109      int i;
;;;110      int n = f->sizek;
000008  f8d5a010          LDR      r10,[r5,#0x10]
;;;111      DumpInt(n, D);
00000c  4639              MOV      r1,r7
00000e  4650              MOV      r0,r10
000010  f7fffffe          BL       DumpInt
;;;112      for (i = 0; i < n; i++) {
000014  2600              MOVS     r6,#0
000016  e036              B        |L4.134|
                  |L4.24|
;;;113        const TValue *o = &f->k[i];
000018  6b28              LDR      r0,[r5,#0x30]
00001a  eb001406          ADD      r4,r0,r6,LSL #4
;;;114        DumpByte(ttypetag(o), D);
00001e  7a21              LDRB     r1,[r4,#8]
000020  f001003f          AND      r0,r1,#0x3f
000024  4639              MOV      r1,r7
000026  f7fffffe          BL       DumpByte
;;;115        switch (ttypetag(o)) {
00002a  7a20              LDRB     r0,[r4,#8]
00002c  f000003f          AND      r0,r0,#0x3f
000030  2814              CMP      r0,#0x14
000032  d01f              BEQ      |L4.116|
000034  dc05              BGT      |L4.66|
000036  b148              CBZ      r0,|L4.76|
000038  2801              CMP      r0,#1
00003a  d008              BEQ      |L4.78|
00003c  2813              CMP      r0,#0x13
00003e  d11f              BNE      |L4.128|
000040  e00a              B        |L4.88|
                  |L4.66|
000042  2823              CMP      r0,#0x23
000044  d00f              BEQ      |L4.102|
000046  2824              CMP      r0,#0x24
000048  d11a              BNE      |L4.128|
00004a  e014              B        |L4.118|
                  |L4.76|
;;;116          case LUA_TNIL:
;;;117            break;
00004c  e019              B        |L4.130|
                  |L4.78|
;;;118          case LUA_TBOOLEAN:
;;;119            DumpByte(bvalue(o), D);
00004e  4639              MOV      r1,r7
000050  6820              LDR      r0,[r4,#0]
000052  f7fffffe          BL       DumpByte
;;;120            break;
000056  e014              B        |L4.130|
                  |L4.88|
;;;121          case LUA_TNUMFLT:
;;;122            DumpNumber(fltvalue(o), D);
000058  463a              MOV      r2,r7
00005a  e9d48100          LDRD     r8,r1,[r4,#0]
00005e  4640              MOV      r0,r8
000060  f7fffffe          BL       DumpNumber
;;;123            break;
000064  e00d              B        |L4.130|
                  |L4.102|
;;;124          case LUA_TNUMINT:
;;;125            DumpInteger(ivalue(o), D);
000066  463a              MOV      r2,r7
000068  e9d48100          LDRD     r8,r1,[r4,#0]
00006c  4640              MOV      r0,r8
00006e  f7fffffe          BL       DumpInteger
;;;126            break;
000072  e006              B        |L4.130|
                  |L4.116|
;;;127          case LUA_TSHRSTR:
;;;128          case LUA_TLNGSTR:
000074  bf00              NOP      
                  |L4.118|
;;;129            DumpString(tsvalue(o), D);
000076  4639              MOV      r1,r7
000078  6820              LDR      r0,[r4,#0]
00007a  f7fffffe          BL       DumpString
;;;130            break;
00007e  e000              B        |L4.130|
                  |L4.128|
000080  bf00              NOP                            ;115
                  |L4.130|
000082  bf00              NOP                            ;117
000084  1c76              ADDS     r6,r6,#1              ;112
                  |L4.134|
000086  4556              CMP      r6,r10                ;112
000088  dbc6              BLT      |L4.24|
;;;131          default: lua_assert(0);
;;;132        }
;;;133      }
;;;134    }
00008a  e8bd87f0          POP      {r4-r10,pc}
;;;135    
                          ENDP


                          AREA ||i.DumpDebug||, CODE, READONLY, ALIGN=1

                  DumpDebug PROC
;;;155    
;;;156    static void DumpDebug (const Proto *f, DumpState *D) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;157      int i, n;
;;;158      n = (D->strip) ? 0 : f->sizelineinfo;
000008  68f0              LDR      r0,[r6,#0xc]
00000a  b108              CBZ      r0,|L5.16|
00000c  2000              MOVS     r0,#0
00000e  e000              B        |L5.18|
                  |L5.16|
000010  69a8              LDR      r0,[r5,#0x18]
                  |L5.18|
000012  4607              MOV      r7,r0
;;;159      DumpInt(n, D);
000014  4631              MOV      r1,r6
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       DumpInt
;;;160      DumpVector(f->lineinfo, n, D);
00001c  4639              MOV      r1,r7
00001e  4632              MOV      r2,r6
000020  6c68              LDR      r0,[r5,#0x44]
000022  f7fffffe          BL       DumpBlock
;;;161      n = (D->strip) ? 0 : f->sizeabslineinfo;
000026  68f0              LDR      r0,[r6,#0xc]
000028  b108              CBZ      r0,|L5.46|
00002a  2000              MOVS     r0,#0
00002c  e000              B        |L5.48|
                  |L5.46|
00002e  6a68              LDR      r0,[r5,#0x24]
                  |L5.48|
000030  4607              MOV      r7,r0
;;;162      DumpInt(n, D);
000032  4631              MOV      r1,r6
000034  4638              MOV      r0,r7
000036  f7fffffe          BL       DumpInt
;;;163      for (i = 0; i < n; i++) {
00003a  2400              MOVS     r4,#0
00003c  e00d              B        |L5.90|
                  |L5.62|
;;;164        DumpInt(f->abslineinfo[i].pc, D);
00003e  6ca9              LDR      r1,[r5,#0x48]
000040  f8510034          LDR      r0,[r1,r4,LSL #3]
000044  4631              MOV      r1,r6
000046  f7fffffe          BL       DumpInt
;;;165        DumpInt(f->abslineinfo[i].line, D);
00004a  6ca9              LDR      r1,[r5,#0x48]
00004c  eb0101c4          ADD      r1,r1,r4,LSL #3
000050  6848              LDR      r0,[r1,#4]
000052  4631              MOV      r1,r6
000054  f7fffffe          BL       DumpInt
000058  1c64              ADDS     r4,r4,#1              ;163
                  |L5.90|
00005a  42bc              CMP      r4,r7                 ;163
00005c  dbef              BLT      |L5.62|
;;;166      }
;;;167      n = (D->strip) ? 0 : f->sizelocvars;
00005e  68f0              LDR      r0,[r6,#0xc]
000060  b108              CBZ      r0,|L5.102|
000062  2000              MOVS     r0,#0
000064  e000              B        |L5.104|
                  |L5.102|
000066  6a28              LDR      r0,[r5,#0x20]
                  |L5.104|
000068  4607              MOV      r7,r0
;;;168      DumpInt(n, D);
00006a  4631              MOV      r1,r6
00006c  4638              MOV      r0,r7
00006e  f7fffffe          BL       DumpInt
;;;169      for (i = 0; i < n; i++) {
000072  2400              MOVS     r4,#0
000074  e01a              B        |L5.172|
                  |L5.118|
;;;170        DumpString(f->locvars[i].varname, D);
000076  eb040244          ADD      r2,r4,r4,LSL #1
00007a  6ce9              LDR      r1,[r5,#0x4c]
00007c  f8510022          LDR      r0,[r1,r2,LSL #2]
000080  4631              MOV      r1,r6
000082  f7fffffe          BL       DumpString
;;;171        DumpInt(f->locvars[i].startpc, D);
000086  eb040244          ADD      r2,r4,r4,LSL #1
00008a  6ce9              LDR      r1,[r5,#0x4c]
00008c  eb010182          ADD      r1,r1,r2,LSL #2
000090  6848              LDR      r0,[r1,#4]
000092  4631              MOV      r1,r6
000094  f7fffffe          BL       DumpInt
;;;172        DumpInt(f->locvars[i].endpc, D);
000098  eb040244          ADD      r2,r4,r4,LSL #1
00009c  6ce9              LDR      r1,[r5,#0x4c]
00009e  eb010182          ADD      r1,r1,r2,LSL #2
0000a2  6888              LDR      r0,[r1,#8]
0000a4  4631              MOV      r1,r6
0000a6  f7fffffe          BL       DumpInt
0000aa  1c64              ADDS     r4,r4,#1              ;169
                  |L5.172|
0000ac  42bc              CMP      r4,r7                 ;169
0000ae  dbe2              BLT      |L5.118|
;;;173      }
;;;174      n = (D->strip) ? 0 : f->sizeupvalues;
0000b0  68f0              LDR      r0,[r6,#0xc]
0000b2  b108              CBZ      r0,|L5.184|
0000b4  2000              MOVS     r0,#0
0000b6  e000              B        |L5.186|
                  |L5.184|
0000b8  68e8              LDR      r0,[r5,#0xc]
                  |L5.186|
0000ba  4607              MOV      r7,r0
;;;175      DumpInt(n, D);
0000bc  4631              MOV      r1,r6
0000be  4638              MOV      r0,r7
0000c0  f7fffffe          BL       DumpInt
;;;176      for (i = 0; i < n; i++)
0000c4  2400              MOVS     r4,#0
0000c6  e006              B        |L5.214|
                  |L5.200|
;;;177        DumpString(f->upvalues[i].name, D);
0000c8  6c29              LDR      r1,[r5,#0x40]
0000ca  f8510034          LDR      r0,[r1,r4,LSL #3]
0000ce  4631              MOV      r1,r6
0000d0  f7fffffe          BL       DumpString
0000d4  1c64              ADDS     r4,r4,#1              ;176
                  |L5.214|
0000d6  42bc              CMP      r4,r7                 ;176
0000d8  dbf6              BLT      |L5.200|
;;;178    }
0000da  e8bd81f0          POP      {r4-r8,pc}
;;;179    
                          ENDP


                          AREA ||i.DumpFunction||, CODE, READONLY, ALIGN=1

                  DumpFunction PROC
;;;180    
;;;181    static void DumpFunction (const Proto *f, TString *psource, DumpState *D) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;182      if (D->strip || f->source == psource)
000008  68e8              LDR      r0,[r5,#0xc]
00000a  b910              CBNZ     r0,|L6.18|
00000c  6d20              LDR      r0,[r4,#0x50]
00000e  42b0              CMP      r0,r6
000010  d104              BNE      |L6.28|
                  |L6.18|
;;;183        DumpString(NULL, D);  /* no debug info or same source as its parent */
000012  4629              MOV      r1,r5
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       DumpString
00001a  e003              B        |L6.36|
                  |L6.28|
;;;184      else
;;;185        DumpString(f->source, D);
00001c  4629              MOV      r1,r5
00001e  6d20              LDR      r0,[r4,#0x50]
000020  f7fffffe          BL       DumpString
                  |L6.36|
;;;186      DumpInt(f->linedefined, D);
000024  4629              MOV      r1,r5
000026  6aa0              LDR      r0,[r4,#0x28]
000028  f7fffffe          BL       DumpInt
;;;187      DumpInt(f->lastlinedefined, D);
00002c  4629              MOV      r1,r5
00002e  6ae0              LDR      r0,[r4,#0x2c]
000030  f7fffffe          BL       DumpInt
;;;188      DumpByte(f->numparams, D);
000034  79a0              LDRB     r0,[r4,#6]
000036  4629              MOV      r1,r5
000038  f7fffffe          BL       DumpByte
;;;189      DumpByte(f->is_vararg, D);
00003c  79e0              LDRB     r0,[r4,#7]
00003e  4629              MOV      r1,r5
000040  f7fffffe          BL       DumpByte
;;;190      DumpByte(f->maxstacksize, D);
000044  7a20              LDRB     r0,[r4,#8]
000046  4629              MOV      r1,r5
000048  f7fffffe          BL       DumpByte
;;;191      DumpCode(f, D);
00004c  4629              MOV      r1,r5
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       DumpCode
;;;192      DumpConstants(f, D);
000054  4629              MOV      r1,r5
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       DumpConstants
;;;193      DumpUpvalues(f, D);
00005c  4629              MOV      r1,r5
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       DumpUpvalues
;;;194      DumpProtos(f, D);
000064  4629              MOV      r1,r5
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       DumpProtos
;;;195      DumpDebug(f, D);
00006c  4629              MOV      r1,r5
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       DumpDebug
;;;196    }
000074  bd70              POP      {r4-r6,pc}
;;;197    
                          ENDP


                          AREA ||i.DumpHeader||, CODE, READONLY, ALIGN=2

                  DumpHeader PROC
;;;198    
;;;199    static void DumpHeader (DumpState *D) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;200      DumpLiteral(LUA_SIGNATURE, D);
000004  4622              MOV      r2,r4
000006  2104              MOVS     r1,#4
000008  a01c              ADR      r0,|L7.124|
00000a  f7fffffe          BL       DumpBlock
;;;201      DumpByte(LUAC_VERSION, D);
00000e  a11d              ADR      r1,|L7.132|
000010  f9912000          LDRSB    r2,[r1,#0]
000014  3a30              SUBS     r2,r2,#0x30
000016  a11c              ADR      r1,|L7.136|
000018  f9911000          LDRSB    r1,[r1,#0]
00001c  3930              SUBS     r1,r1,#0x30
00001e  eb021001          ADD      r0,r2,r1,LSL #4
000022  4621              MOV      r1,r4
000024  f7fffffe          BL       DumpByte
;;;202      DumpByte(LUAC_FORMAT, D);
000028  4621              MOV      r1,r4
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       DumpByte
;;;203      DumpLiteral(LUAC_DATA, D);
000030  4622              MOV      r2,r4
000032  2106              MOVS     r1,#6
000034  a015              ADR      r0,|L7.140|
000036  f7fffffe          BL       DumpBlock
;;;204      DumpByte(sizeof(int), D);
00003a  4621              MOV      r1,r4
00003c  2004              MOVS     r0,#4
00003e  f7fffffe          BL       DumpByte
;;;205      DumpByte(sizeof(size_t), D);
000042  4621              MOV      r1,r4
000044  2004              MOVS     r0,#4
000046  f7fffffe          BL       DumpByte
;;;206      DumpByte(sizeof(Instruction), D);
00004a  4621              MOV      r1,r4
00004c  2004              MOVS     r0,#4
00004e  f7fffffe          BL       DumpByte
;;;207      DumpByte(sizeof(lua_Integer), D);
000052  4621              MOV      r1,r4
000054  2008              MOVS     r0,#8
000056  f7fffffe          BL       DumpByte
;;;208      DumpByte(sizeof(lua_Number), D);
00005a  4621              MOV      r1,r4
00005c  2008              MOVS     r0,#8
00005e  f7fffffe          BL       DumpByte
;;;209      DumpInteger(LUAC_INT, D);
000062  4622              MOV      r2,r4
000064  f2456078          MOV      r0,#0x5678
000068  2100              MOVS     r1,#0
00006a  f7fffffe          BL       DumpInteger
;;;210      DumpNumber(LUAC_NUM, D);
00006e  4622              MOV      r2,r4
000070  2000              MOVS     r0,#0
000072  4908              LDR      r1,|L7.148|
000074  f7fffffe          BL       DumpNumber
;;;211    }
000078  bd10              POP      {r4,pc}
;;;212    
                          ENDP

00007a  0000              DCW      0x0000
                  |L7.124|
00007c  1b4c7561          DCB      27,"Lua",0
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L7.132|
000084  3400              DCB      "4",0
000086  00                DCB      0
000087  00                DCB      0
                  |L7.136|
000088  3500              DCB      "5",0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L7.140|
00008c  19930d0a          DCB      25,147,"\r\n",26,"\n",0
000090  1a0a00  
000093  00                DCB      0
                  |L7.148|
                          DCD      0x40772800

                          AREA ||i.DumpInt||, CODE, READONLY, ALIGN=1

                  DumpInt PROC
;;;72     
;;;73     static void DumpInt (int x, DumpState *D) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;74       DumpSize(x, D);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       DumpSize
;;;75     }
00000e  bd70              POP      {r4-r6,pc}
;;;76     
                          ENDP


                          AREA ||i.DumpInteger||, CODE, READONLY, ALIGN=1

                  DumpInteger PROC
;;;82     
;;;83     static void DumpInteger (lua_Integer x, DumpState *D) {
000000  b537              PUSH     {r0-r2,r4,r5,lr}
000002  4614              MOV      r4,r2
;;;84       DumpVar(x, D);
000004  4622              MOV      r2,r4
000006  2108              MOVS     r1,#8
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       DumpBlock
;;;85     }
00000e  bd3e              POP      {r1-r5,pc}
;;;86     
                          ENDP


                          AREA ||i.DumpNumber||, CODE, READONLY, ALIGN=1

                  DumpNumber PROC
;;;77     
;;;78     static void DumpNumber (lua_Number x, DumpState *D) {
000000  b537              PUSH     {r0-r2,r4,r5,lr}
000002  4614              MOV      r4,r2
;;;79       DumpVar(x, D);
000004  4622              MOV      r2,r4
000006  2108              MOVS     r1,#8
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       DumpBlock
;;;80     }
00000e  bd3e              POP      {r1-r5,pc}
;;;81     
                          ENDP


                          AREA ||i.DumpProtos||, CODE, READONLY, ALIGN=1

                  DumpProtos PROC
;;;136    
;;;137    static void DumpProtos (const Proto *f, DumpState *D) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;138      int i;
;;;139      int n = f->sizep;
000008  69e7              LDR      r7,[r4,#0x1c]
;;;140      DumpInt(n, D);
00000a  4631              MOV      r1,r6
00000c  4638              MOV      r0,r7
00000e  f7fffffe          BL       DumpInt
;;;141      for (i = 0; i < n; i++)
000012  2500              MOVS     r5,#0
000014  e007              B        |L11.38|
                  |L11.22|
;;;142        DumpFunction(f->p[i], f->source, D);
000016  6be2              LDR      r2,[r4,#0x3c]
000018  f8520025          LDR      r0,[r2,r5,LSL #2]
00001c  4632              MOV      r2,r6
00001e  6d21              LDR      r1,[r4,#0x50]
000020  f7fffffe          BL       DumpFunction
000024  1c6d              ADDS     r5,r5,#1              ;141
                  |L11.38|
000026  42bd              CMP      r5,r7                 ;141
000028  dbf5              BLT      |L11.22|
;;;143    }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;144    
                          ENDP


                          AREA ||i.DumpSize||, CODE, READONLY, ALIGN=1

                  DumpSize PROC
;;;60     
;;;61     static void DumpSize (size_t x, DumpState *D) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;62       lu_byte buff[DIBS];
;;;63       int n = 0;
000006  2500              MOVS     r5,#0
;;;64       do {
000008  bf00              NOP      
                  |L12.10|
;;;65         buff[DIBS - (++n)] = x & 0x7f;  /* fill buffer in reverse order */
00000a  f004017f          AND      r1,r4,#0x7f
00000e  1c68              ADDS     r0,r5,#1
000010  4605              MOV      r5,r0
000012  f1c00005          RSB      r0,r0,#5
000016  f80d1000          STRB     r1,[sp,r0]
;;;66         x >>= 7;
00001a  09e4              LSRS     r4,r4,#7
;;;67       } while (x != 0);
00001c  2c00              CMP      r4,#0
00001e  d1f4              BNE      |L12.10|
;;;68       buff[DIBS - 1] |= 0x80;  /* mark last byte */
000020  f89d0004          LDRB     r0,[sp,#4]
000024  f0400080          ORR      r0,r0,#0x80
000028  f88d0004          STRB     r0,[sp,#4]
;;;69       DumpVector(buff + DIBS - n, n, D);
00002c  4629              MOV      r1,r5
00002e  f10d0205          ADD      r2,sp,#5
000032  1b50              SUBS     r0,r2,r5
000034  4632              MOV      r2,r6
000036  f7fffffe          BL       DumpBlock
;;;70     }
00003a  bd7c              POP      {r2-r6,pc}
;;;71     
                          ENDP


                          AREA ||i.DumpString||, CODE, READONLY, ALIGN=1

                  DumpString PROC
;;;87     
;;;88     static void DumpString (const TString *s, DumpState *D) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;89       if (s == NULL)
000008  b924              CBNZ     r4,|L13.20|
;;;90         DumpSize(0, D);
00000a  4631              MOV      r1,r6
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       DumpSize
000012  e012              B        |L13.58|
                  |L13.20|
;;;91       else {
;;;92         size_t size = tsslen(s);
000014  7920              LDRB     r0,[r4,#4]
000016  2814              CMP      r0,#0x14
000018  d101              BNE      |L13.30|
00001a  79e0              LDRB     r0,[r4,#7]
00001c  e000              B        |L13.32|
                  |L13.30|
00001e  68e0              LDR      r0,[r4,#0xc]
                  |L13.32|
000020  4605              MOV      r5,r0
;;;93         const char *str = getstr(s);
000022  f1040710          ADD      r7,r4,#0x10
;;;94         DumpSize(size + 1, D);
000026  4631              MOV      r1,r6
000028  1c68              ADDS     r0,r5,#1
00002a  f7fffffe          BL       DumpSize
;;;95         DumpVector(str, size, D);
00002e  4629              MOV      r1,r5
000030  4632              MOV      r2,r6
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       DumpBlock
;;;96       }
000038  bf00              NOP      
                  |L13.58|
;;;97     }
00003a  e8bd81f0          POP      {r4-r8,pc}
;;;98     
                          ENDP


                          AREA ||i.DumpUpvalues||, CODE, READONLY, ALIGN=1

                  DumpUpvalues PROC
;;;145    
;;;146    static void DumpUpvalues (const Proto *f, DumpState *D) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;147      int i, n = f->sizeupvalues;
000008  68e6              LDR      r6,[r4,#0xc]
;;;148      DumpInt(n, D);
00000a  4639              MOV      r1,r7
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       DumpInt
;;;149      for (i = 0; i < n; i++) {
000012  2500              MOVS     r5,#0
000014  e00e              B        |L14.52|
                  |L14.22|
;;;150        DumpByte(f->upvalues[i].instack, D);
000016  6c21              LDR      r1,[r4,#0x40]
000018  eb0101c5          ADD      r1,r1,r5,LSL #3
00001c  7908              LDRB     r0,[r1,#4]
00001e  4639              MOV      r1,r7
000020  f7fffffe          BL       DumpByte
;;;151        DumpByte(f->upvalues[i].idx, D);
000024  6c21              LDR      r1,[r4,#0x40]
000026  eb0101c5          ADD      r1,r1,r5,LSL #3
00002a  7948              LDRB     r0,[r1,#5]
00002c  4639              MOV      r1,r7
00002e  f7fffffe          BL       DumpByte
000032  1c6d              ADDS     r5,r5,#1              ;149
                  |L14.52|
000034  42b5              CMP      r5,r6                 ;149
000036  dbee              BLT      |L14.22|
;;;152      }
;;;153    }
000038  e8bd81f0          POP      {r4-r8,pc}
;;;154    
                          ENDP


                          AREA ||i.luaU_dump||, CODE, READONLY, ALIGN=1

                  luaU_dump PROC
;;;216    */
;;;217    int luaU_dump(lua_State *L, const Proto *f, lua_Writer w, void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;218                  int strip) {
000004  b086              SUB      sp,sp,#0x18
000006  4605              MOV      r5,r0
000008  460c              MOV      r4,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
00000e  f8dd8030          LDR      r8,[sp,#0x30]
;;;219      DumpState D;
;;;220      D.L = L;
000012  9501              STR      r5,[sp,#4]
;;;221      D.writer = w;
000014  9602              STR      r6,[sp,#8]
;;;222      D.data = data;
000016  9703              STR      r7,[sp,#0xc]
;;;223      D.strip = strip;
000018  f8cd8010          STR      r8,[sp,#0x10]
;;;224      D.status = 0;
00001c  2000              MOVS     r0,#0
00001e  9005              STR      r0,[sp,#0x14]
;;;225      DumpHeader(&D);
000020  a801              ADD      r0,sp,#4
000022  f7fffffe          BL       DumpHeader
;;;226      DumpByte(f->sizeupvalues, &D);
000026  a901              ADD      r1,sp,#4
000028  68e0              LDR      r0,[r4,#0xc]
00002a  f7fffffe          BL       DumpByte
;;;227      DumpFunction(f, NULL, &D);
00002e  aa01              ADD      r2,sp,#4
000030  2100              MOVS     r1,#0
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       DumpFunction
;;;228      return D.status;
000038  9805              LDR      r0,[sp,#0x14]
;;;229    }
00003a  b006              ADD      sp,sp,#0x18
00003c  e8bd81f0          POP      {r4-r8,pc}
;;;230    
                          ENDP

