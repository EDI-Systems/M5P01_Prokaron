L 1 "..\..\..\M6P1(L)_Lua\lua\ltable.c"
N/*
N** $Id: ltable.c,v 2.134 2018/02/23 13:13:31 roberto Exp roberto $
N** Lua tables (hash)
N** See Copyright Notice in lua.h
N*/
N
N#define ltable_c
N#define LUA_CORE
N
N#include "lprefix.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lprefix.h" 1
N/*
N** $Id: lprefix.h,v 1.1 2014/11/03 15:12:44 roberto Exp roberto $
N** Definitions for Lua code that must come before any other header file
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lprefix_h
N#define lprefix_h
N
N
N/*
N** Allows POSIX/XSI stuff
N*/
N#if !defined(LUA_USE_C89)	/* { */
X#if !0L	 
N
N#if !defined(_XOPEN_SOURCE)
X#if !0L
N#define _XOPEN_SOURCE           600
N#elif _XOPEN_SOURCE == 0
S#undef _XOPEN_SOURCE  /* use -D_XOPEN_SOURCE=0 to undefine it */
N#endif
N
N/*
N** Allows manipulation of large files in gcc and some other compilers
N*/
N#if !defined(LUA_32BITS) && !defined(_FILE_OFFSET_BITS)
X#if !0L && !0L
N#define _LARGEFILE_SOURCE       1
N#define _FILE_OFFSET_BITS       64
N#endif
N
N#endif				/* } */
N
N
N/*
N** Windows stuff
N*/
N#if defined(_WIN32) 	/* { */
X#if 0L 	 
S
S#if !defined(_CRT_SECURE_NO_WARNINGS)
S#define _CRT_SECURE_NO_WARNINGS  /* avoid warnings about ISO C functions */
S#endif
S
N#endif			/* } */
N
N#endif
N
L 11 "..\..\..\M6P1(L)_Lua\lua\ltable.c" 2
N
N
N/*
N** Implementation of tables (aka arrays, objects, or hash tables).
N** Tables keep its elements in two parts: an array part and a hash part.
N** Non-negative integer keys are all candidates to be kept in the array
N** part. The actual size of the array is the largest 'n' such that
N** more than half the slots between 1 and n are in use.
N** Hash uses a mix of chained scatter table with Brent's variation.
N** A main invariant of these tables is that, if an element is not
N** in its main position (i.e. the 'original' position that its hash gives
N** to it), then the colliding element is in its own main position.
N** Hence even when the load factor reaches 100%, performance remains good.
N*/
N
N#include <math.h>
L 1 "D:\Program_Files_x86\Keil_v5\ARM\ARMCC\Bin\..\include\math.h" 1
N/*
N * math.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.5
N * Copyright (C) Codemist Ltd., 1988
N * Copyright 1991-1998,2004-2006,2014 ARM Limited. All rights reserved
N */
N
N/*
N * RCS $Revision$ Codemist 0.03
N * Checkin $Date$
N * Revising $Author: statham $
N */
N
N/*
N * Parts of this file are based upon fdlibm:
N *
N * ====================================================
N * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
N *
N * Developed at SunSoft, a Sun Microsystems, Inc. business.
N * Permission to use, copy, modify, and distribute this
N * software is freely granted, provided that this notice
N * is preserved.
N * ====================================================
N */
N
N#ifndef __math_h
N#define __math_h
N#define __ARMCLIB_VERSION 5060009
N
N#if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X#if 0L || (1L && !0L)
N  /* armclang and non-strict armcc allow 'long long' in system headers */
N  #define __LONGLONG long long
N#else
S  /* strict armcc has '__int64' */
S  #define __LONGLONG __int64
N#endif
N
N/*
N * Some of these declarations are new in C99.  To access them in C++
N * you can use -D__USE_C99_MATH (or -D__USE_C99_ALL).
N */
N#ifndef __USE_C99_MATH
N  #if defined(__USE_C99_ALL) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X  #if 0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
S    #define __USE_C99_MATH 1
N  #endif
N#endif
N
N#define _ARMABI __declspec(__nothrow)
N#ifdef __TARGET_ARCH_AARCH64
S# define _ARMABI_SOFTFP __declspec(__nothrow)
N#else
N# define _ARMABI_SOFTFP __declspec(__nothrow) __attribute__((__pcs__("aapcs")))
N# define __HAVE_LONGDOUBLE 1
N#endif
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N#ifdef __FP_FENV_EXCEPTIONS
S# define _ARMABI_FPEXCEPT _ARMABI
N#else
N# define _ARMABI_FPEXCEPT _ARMABI __attribute__((const))
N#endif
N
N#ifdef __cplusplus
S#define _ARMABI_INLINE inline
S#define _ARMABI_INLINE_DEF inline
S#elif defined __GNUC__ || defined _USE_STATIC_INLINE
X#elif 0L || 0L
S#define _ARMABI_INLINE static __inline
S#define _ARMABI_INLINE_DEF static __inline
S#elif (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#elif (1L && 199901L <= 199409L)
S#define _ARMABI_INLINE inline
S#define _ARMABI_INLINE_DEF static inline
N#else
N#define _ARMABI_INLINE __inline
N#define _ARMABI_INLINE_DEF __inline
N#endif
N
N#ifdef __TARGET_ARCH_AARCH64
S#  define _SOFTFP
N#else
N#  define _SOFTFP __attribute__((__pcs__("aapcs")))
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain the nans function, as well as the
N    * FP_NANS and FP_NANQ classification macros.
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
N/*
N * Macros for our inline functions down below.
N * unsigned& __FLT(float x) - returns the bit pattern of x
N * unsigned& __HI(double x) - returns the bit pattern of the high part of x
N *                            (high part has exponent & sign bit in it)
N * unsigned& __LO(double x) - returns the bit pattern of the low part of x
N *
N * We can assign to __FLT, __HI, and __LO and the appropriate bits get set in
N * the floating point variable used.
N *
N * __HI & __LO are affected by the endianness and the target FPU.
N */
N#define __FLT(x) (*(unsigned *)&(x))
N#if defined(__ARM_BIG_ENDIAN) || defined(__BIG_ENDIAN)
X#if 0L || 0L
S#  define __LO(x) (*(1 + (unsigned *)&(x)))
S#  define __HI(x) (*(unsigned *)&(x))
N#else /* !defined(__ARM_BIG_ENDIAN) && !defined(__BIG_ENDIAN) */
N#  define __HI(x) (*(1 + (unsigned *)&(x)))
N#  define __LO(x) (*(unsigned *)&(x))
N#endif /* !defined(__ARM_BIG_ENDIAN) && !defined(__BIG_ENDIAN) */
N
N#   ifndef __MATH_DECLS
N#   define __MATH_DECLS
N
N
N/*
N * A set of functions that we don't actually want to put in the standard
N * namespace ever.  These are all called by the C99 macros.  As they're
N * not specified by any standard they can't belong in ::std::.  The
N * macro #defines are below amongst the standard function declarations.
N * We only include these if we actually need them later on
N */
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 0L
N#   ifdef __cplusplus
S      extern "C" {
N#   endif /* __cplusplus */
N
Nextern _SOFTFP unsigned __ARM_dcmp4(double /*x*/, double /*y*/);
Xextern __attribute__((__pcs__("aapcs"))) unsigned __ARM_dcmp4(double  , double  );
Nextern _SOFTFP unsigned __ARM_fcmp4(float /*x*/, float /*y*/);
Xextern __attribute__((__pcs__("aapcs"))) unsigned __ARM_fcmp4(float  , float  );
N    /*
N     * Compare x and y and return the CPSR in r0.  These means we can test for
N     * result types with bit pattern matching.
N     *
N     * These are a copy of the declarations in rt_fp.h keep in sync.
N     */
N
Nextern _ARMABI_SOFTFP int __ARM_fpclassifyf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_fpclassifyf(float  );
Nextern _ARMABI_SOFTFP int __ARM_fpclassify(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_fpclassify(double  );
N    /* Classify x into NaN, infinite, normal, subnormal, zero */
N    /* Used by fpclassify macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isfinitef(float __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isfinitef(float __x)
N{
N    return ((__FLT(__x) >> 23) & 0xff) != 0xff;
X    return (((*(unsigned *)&(__x)) >> 23) & 0xff) != 0xff;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isfinite(double __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isfinite(double __x)
N{
N    return ((__HI(__x) >> 20) & 0x7ff) != 0x7ff;
X    return (((*(1 + (unsigned *)&(__x))) >> 20) & 0x7ff) != 0x7ff;
N}
N    /* Return 1 if __x is finite, 0 otherwise */
N    /* Used by isfinite macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isinff(float __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isinff(float __x)
N{
N    return (__FLT(__x) << 1) == 0xff000000;
X    return ((*(unsigned *)&(__x)) << 1) == 0xff000000;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isinf(double __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isinf(double __x)
N{
N    return ((__HI(__x) << 1) == 0xffe00000) && (__LO(__x) == 0);
X    return (((*(1 + (unsigned *)&(__x))) << 1) == 0xffe00000) && ((*(unsigned *)&(__x)) == 0);
N}
N    /* Return 1 if __x is infinite, 0 otherwise */
N    /* Used by isinf macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_islessgreaterf(float __x, float __y)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_islessgreaterf(float __x, float __y)
N{
N    unsigned __f = __ARM_fcmp4(__x, __y) >> 28;
N    return (__f == 8) || (__f == 2); /* Just N set or Just Z set */
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_islessgreater(double __x, double __y)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_islessgreater(double __x, double __y)
N{
N    unsigned __f = __ARM_dcmp4(__x, __y) >> 28;
N    return (__f == 8) || (__f == 2); /* Just N set or Just Z set */
N}
N    /*
N     * Compare __x and __y and return 1 if __x < __y or __x > __y, 0 otherwise
N     * Used by islessgreater macro
N     */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnanf(float __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnanf(float __x)
N{
N    return (0x7f800000 - (__FLT(__x) & 0x7fffffff)) >> 31;
X    return (0x7f800000 - ((*(unsigned *)&(__x)) & 0x7fffffff)) >> 31;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnan(double __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnan(double __x)
N{
N    unsigned __xf = __HI(__x) | ((__LO(__x) == 0) ? 0 : 1);
X    unsigned __xf = (*(1 + (unsigned *)&(__x))) | (((*(unsigned *)&(__x)) == 0) ? 0 : 1);
N    return (0x7ff00000 - (__xf & 0x7fffffff)) >> 31;
N}
N    /* Return 1 if __x is a NaN, 0 otherwise */
N    /* Used by isnan macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnormalf(float __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnormalf(float __x)
N{
N    unsigned __xe = (__FLT(__x) >> 23) & 0xff;
X    unsigned __xe = ((*(unsigned *)&(__x)) >> 23) & 0xff;
N    return (__xe != 0xff) && (__xe != 0);
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnormal(double __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnormal(double __x)
N{
N    unsigned __xe = (__HI(__x) >> 20) & 0x7ff;
X    unsigned __xe = ((*(1 + (unsigned *)&(__x))) >> 20) & 0x7ff;
N    return (__xe != 0x7ff) && (__xe != 0);
N}
N    /* Return 1 if __x is a normalised number, 0 otherwise */
N    /* used by isnormal macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_signbitf(float __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_signbitf(float __x)
N{
N    return __FLT(__x) >> 31;
X    return (*(unsigned *)&(__x)) >> 31;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_signbit(double __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_signbit(double __x)
N{
N    return __HI(__x) >> 31;
X    return (*(1 + (unsigned *)&(__x))) >> 31;
N}
N    /* Return signbit of __x */
N    /* Used by signbit macro */
N
N#   ifdef __cplusplus
S      } /* extern "C" */
N#   endif /* __cplusplus */
N#endif /* Strict ANSI */
N
N#   undef __CLIBNS
N
N#   ifdef __cplusplus
S      namespace std {
S#       define __CLIBNS ::std::
S        extern "C" {
N#   else
N#       define __CLIBNS
N#   endif  /* __cplusplus */
N
N
N#ifndef __has_builtin
N  #define __has_builtin(x) 0
N#endif
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 0L
N  /* C99 additions */
N  typedef float float_t;
N  typedef double double_t;
N#if __has_builtin(__builtin_inf)
X#if 0
S#   define HUGE_VALF __builtin_inff()
S#   define HUGE_VALL __builtin_infl()
S#   define INFINITY __builtin_inff()
S#   define NAN __builtin_nanf("")
N# else
N#   define HUGE_VALF ((float)__INFINITY__)
N#   define HUGE_VALL ((long double)__INFINITY__)
N#   define INFINITY ((float)__INFINITY__)
N#   define NAN (__ESCAPE__(0f_7FC00000))
N#endif
N
N#   define MATH_ERRNO 1
N#   define MATH_ERREXCEPT 2
Nextern const int math_errhandling;
N#endif
N#if __has_builtin(__builtin_inf)
X#if 0
S# define HUGE_VAL __builtin_inf()
N#else
N# define HUGE_VAL ((double)__INFINITY__)
N#endif
N
Nextern _ARMABI double acos(double /*x*/);
Xextern __declspec(__nothrow) double acos(double  );
N   /* computes the principal value of the arc cosine of x */
N   /* a domain error occurs for arguments not in the range -1 to 1 */
N   /* Returns: the arc cosine in the range 0 to Pi. */
Nextern _ARMABI double asin(double /*x*/);
Xextern __declspec(__nothrow) double asin(double  );
N   /* computes the principal value of the arc sine of x */
N   /* a domain error occurs for arguments not in the range -1 to 1 */
N   /* and -HUGE_VAL is returned. */
N   /* Returns: the arc sine in the range -Pi/2 to Pi/2. */
N
Nextern _ARMABI_PURE double atan(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double atan(double  );
N   /* computes the principal value of the arc tangent of x */
N   /* Returns: the arc tangent in the range -Pi/2 to Pi/2. */
N
Nextern _ARMABI double atan2(double /*y*/, double /*x*/);
Xextern __declspec(__nothrow) double atan2(double  , double  );
N   /* computes the principal value of the arc tangent of y/x, using the */
N   /* signs of both arguments to determine the quadrant of the return value */
N   /* a domain error occurs if both args are zero, and -HUGE_VAL returned. */
N   /* Returns: the arc tangent of y/x, in the range -Pi to Pi. */
N
Nextern _ARMABI double cos(double /*x*/);
Xextern __declspec(__nothrow) double cos(double  );
N   /* computes the cosine of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance. */
N   /* a domain error occurs for infinite input (C 7.12.1 footnote 196). */
N   /* Returns: the cosine value. */
Nextern _ARMABI double sin(double /*x*/);
Xextern __declspec(__nothrow) double sin(double  );
N   /* computes the sine of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance. */
N   /* a domain error occurs for infinite input (C 7.12.1 footnote 196). */
N   /* Returns: the sine value. */
N
Nextern void __use_accurate_range_reduction(void);
N   /* reference this to select the larger, slower, but more accurate */
N   /* range reduction in sin, cos and tan */
N
Nextern _ARMABI double tan(double /*x*/);
Xextern __declspec(__nothrow) double tan(double  );
N   /* computes the tangent of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance */
N   /* Returns: the tangent value. */
N   /*          if range error; returns HUGE_VAL. */
N
Nextern _ARMABI double cosh(double /*x*/);
Xextern __declspec(__nothrow) double cosh(double  );
N   /* computes the hyperbolic cosine of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the hyperbolic cosine value. */
N   /*          if range error; returns HUGE_VAL. */
Nextern _ARMABI double sinh(double /*x*/);
Xextern __declspec(__nothrow) double sinh(double  );
N   /* computes the hyperbolic sine of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the hyperbolic sine value. */
N   /*          if range error; returns -HUGE_VAL or HUGE_VAL depending */
N   /*          on the sign of the argument */
N
Nextern _ARMABI_PURE double tanh(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double tanh(double  );
N   /* computes the hyperbolic tangent of x. */
N   /* Returns: the hyperbolic tangent value. */
N
Nextern _ARMABI double exp(double /*x*/);
Xextern __declspec(__nothrow) double exp(double  );
N   /* computes the exponential function of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the exponential value. */
N   /*          if underflow range error; 0 is returned. */
N   /*          if overflow range error; HUGE_VAL is returned. */
N
Nextern _ARMABI double frexp(double /*value*/, int * /*exp*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) double frexp(double  , int *  ) __attribute__((__nonnull__(2)));
N   /* breaks a floating-point number into a normalised fraction and an */
N   /* integral power of 2. It stores the integer in the int object pointed */
N   /* to by exp. */
N   /* Returns: the value x, such that x is a double with magnitude in the */
N   /* interval 0.5 to 1.0 or zero, and value equals x times 2 raised to the */
N   /* power *exp. If value is zero, both parts of the result are zero. */
N
Nextern _ARMABI double ldexp(double /*x*/, int /*exp*/);
Xextern __declspec(__nothrow) double ldexp(double  , int  );
N   /* multiplies a floating-point number by an integral power of 2. */
N   /* A range error may occur. */
N   /* Returns: the value of x times 2 raised to the power of exp. */
N   /*          if range error; HUGE_VAL is returned. */
Nextern _ARMABI double log(double /*x*/);
Xextern __declspec(__nothrow) double log(double  );
N   /* computes the natural logarithm of x. A domain error occurs if the */
N   /* argument is negative, and -HUGE_VAL is returned. A range error occurs */
N   /* if the argument is zero. */
N   /* Returns: the natural logarithm. */
N   /*          if range error; -HUGE_VAL is returned. */
Nextern _ARMABI double log10(double /*x*/);
Xextern __declspec(__nothrow) double log10(double  );
N   /* computes the base-ten logarithm of x. A domain error occurs if the */
N   /* argument is negative. A range error occurs if the argument is zero. */
N   /* Returns: the base-ten logarithm. */
Nextern _ARMABI double modf(double /*value*/, double * /*iptr*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) double modf(double  , double *  ) __attribute__((__nonnull__(2)));
N   /* breaks the argument value into integral and fraction parts, each of */
N   /* which has the same sign as the argument. It stores the integral part */
N   /* as a double in the object pointed to by iptr. */
N   /* Returns: the signed fractional part of value. */
N
Nextern _ARMABI double pow(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double pow(double  , double  );
N   /* computes x raised to the power of y. A domain error occurs if x is */
N   /* zero and y is less than or equal to zero, or if x is negative and y */
N   /* is not an integer, and -HUGE_VAL returned. A range error may occur. */
N   /* Returns: the value of x raised to the power of y. */
N   /*          if underflow range error; 0 is returned. */
N   /*          if overflow range error; HUGE_VAL is returned. */
Nextern _ARMABI double sqrt(double /*x*/);
Xextern __declspec(__nothrow) double sqrt(double  );
N   /* computes the non-negative square root of x. A domain error occurs */
N   /* if the argument is negative, and -HUGE_VAL returned. */
N   /* Returns: the value of the square root. */
N
N#if defined(__TARGET_FPU_VFP_DOUBLE) && !defined(__TARGET_FPU_SOFTVFP)
X#if 0L && !1L
S    _ARMABI_INLINE double _sqrt(double __x) { return __sqrt(__x); }
N#else
N    _ARMABI_INLINE double _sqrt(double __x) { return sqrt(__x); }
X    __inline double _sqrt(double __x) { return sqrt(__x); }
N#endif
N#if defined(__TARGET_FPU_VFP_SINGLE) && !defined(__TARGET_FPU_SOFTVFP)
X#if 0L && !1L
S    _ARMABI_INLINE float _sqrtf(float __x) { return __sqrtf(__x); }
N#else
N    _ARMABI_INLINE float _sqrtf(float __x) { return (float)sqrt(__x); }
X    __inline float _sqrtf(float __x) { return (float)sqrt(__x); }
N#endif
N    /* With VFP, _sqrt and _sqrtf should expand inline as the native VFP square root
N     * instructions. They will not behave like the C sqrt() function, because
N     * they will report unusual values as IEEE exceptions (in fpmodes which
N     * support IEEE exceptions) rather than in errno. These function names
N     * are not specified in any standard. */
N
Nextern _ARMABI_PURE double ceil(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double ceil(double  );
N   /* computes the smallest integer not less than x. */
N   /* Returns: the smallest integer not less than x, expressed as a double. */
Nextern _ARMABI_PURE double fabs(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double fabs(double  );
N   /* computes the absolute value of the floating-point number x. */
N   /* Returns: the absolute value of x. */
N
Nextern _ARMABI_PURE double floor(double /*d*/);
Xextern __declspec(__nothrow) __attribute__((const)) double floor(double  );
N   /* computes the largest integer not greater than x. */
N   /* Returns: the largest integer not greater than x, expressed as a double */
N
Nextern _ARMABI double fmod(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double fmod(double  , double  );
N   /* computes the floating-point remainder of x/y. */
N   /* Returns: the value x - i * y, for some integer i such that, if y is */
N   /*          nonzero, the result has the same sign as x and magnitude */
N   /*          less than the magnitude of y. If y is zero, a domain error */
N   /*          occurs and -HUGE_VAL is returned. */
N
N    /* Additional Mathlib functions not defined by the ANSI standard.
N     * Not guaranteed, and not necessarily very well tested.
N     * C99 requires the user to include <math.h> to use these functions
N     * declaring them "by hand" is not sufficient
N     *
N     * The above statement is not completely true now.  Some of the above
N     * C99 functionality has been added as per the Standard, and (where
N     * necessary) old Mathlib functionality withdrawn/changed.  Before
N     * including this header #define __ENABLE_MATHLIB_LEGACY if you want to
N     * re-enable the legacy functionality.
N     */
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 0L
N
Nextern _ARMABI double acosh(double /*x*/);
Xextern __declspec(__nothrow) double acosh(double  );
N    /*
N     * Inverse cosh. EDOM if argument < 1.0
N     */
Nextern _ARMABI double asinh(double /*x*/);
Xextern __declspec(__nothrow) double asinh(double  );
N    /*
N     * Inverse sinh.
N     */
Nextern _ARMABI double atanh(double /*x*/);
Xextern __declspec(__nothrow) double atanh(double  );
N    /*
N     * Inverse tanh. EDOM if |argument| > 1.0
N     */
Nextern _ARMABI double cbrt(double /*x*/);
Xextern __declspec(__nothrow) double cbrt(double  );
N    /*
N     * Cube root.
N     */
N_ARMABI_INLINE _ARMABI_PURE double copysign(double __x, double __y)
X__inline __declspec(__nothrow) __attribute__((const)) double copysign(double __x, double __y)
N    /*
N     * Returns x with sign bit replaced by sign of y.
N     */
N{
N    __HI(__x) = (__HI(__x) & 0x7fffffff) | (__HI(__y) & 0x80000000);
X    (*(1 + (unsigned *)&(__x))) = ((*(1 + (unsigned *)&(__x))) & 0x7fffffff) | ((*(1 + (unsigned *)&(__y))) & 0x80000000);
N    return __x;
N}
N_ARMABI_INLINE _ARMABI_PURE float copysignf(float __x, float __y)
X__inline __declspec(__nothrow) __attribute__((const)) float copysignf(float __x, float __y)
N    /*
N     * Returns x with sign bit replaced by sign of y.
N     */
N{
N    __FLT(__x) = (__FLT(__x) & 0x7fffffff) | (__FLT(__y) & 0x80000000);
X    (*(unsigned *)&(__x)) = ((*(unsigned *)&(__x)) & 0x7fffffff) | ((*(unsigned *)&(__y)) & 0x80000000);
N    return __x;
N}
Nextern _ARMABI double erf(double /*x*/);
Xextern __declspec(__nothrow) double erf(double  );
N    /*
N     * Error function. (2/sqrt(pi)) * integral from 0 to x of exp(-t*t) dt.
N     */
Nextern _ARMABI double erfc(double /*x*/);
Xextern __declspec(__nothrow) double erfc(double  );
N    /*
N     * 1-erf(x). (More accurate than just coding 1-erf(x), for large x.)
N     */
Nextern _ARMABI double expm1(double /*x*/);
Xextern __declspec(__nothrow) double expm1(double  );
N    /*
N     * exp(x)-1. (More accurate than just coding exp(x)-1, for small x.)
N     */
N#define fpclassify(x) \
N    ((sizeof(x) == sizeof(float)) ? \
N        __ARM_fpclassifyf(x) : __ARM_fpclassify(x))
X#define fpclassify(x)     ((sizeof(x) == sizeof(float)) ?         __ARM_fpclassifyf(x) : __ARM_fpclassify(x))
N    /*
N     * Classify a floating point number into one of the following values:
N     */
N#define FP_ZERO         (0)
N#define FP_SUBNORMAL    (4)
N#define FP_NORMAL       (5)
N#define FP_INFINITE     (3)
N#define FP_NAN          (7)
N
N#if defined(_WANT_SNAN) && defined(__SUPPORT_SNAN__)
X#if 0L && 0L
S/* 
S * Note that we'll never classify a number as FP_NAN, as all NaNs will 
S * be either FP_NANQ or FP_NANS
S */
S#  define FP_NANQ       (8)
S#  define FP_NANS       (9)
N#endif
N
N
Nextern _ARMABI double hypot(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double hypot(double  , double  );
N    /*
N     * sqrt(x*x+y*y), ie the length of the vector (x,y) or the
N     * hypotenuse of a right triangle whose other two sides are x
N     * and y. Won't overflow unless the _answer_ is too big, even
N     * if the intermediate x*x+y*y is too big.
N     */
Nextern _ARMABI int ilogb(double /*x*/);
Xextern __declspec(__nothrow) int ilogb(double  );
N    /*
N     * Exponent of x (returns 0 for 1.0, 1 for 2.0, -1 for 0.5, etc.)
N     */
Nextern _ARMABI int ilogbf(float /*x*/);
Xextern __declspec(__nothrow) int ilogbf(float  );
N    /*
N     * Like ilogb but takes a float
N     */
Nextern _ARMABI int ilogbl(long double /*x*/);
Xextern __declspec(__nothrow) int ilogbl(long double  );
N    /*
N     * Exponent of x (returns 0 for 1.0, 1 for 2.0, -1 for 0.5, etc.)
N     */
N#define FP_ILOGB0   (-0x7fffffff) /* ilogb(0) == -INT_MAX */
N#define FP_ILOGBNAN ( 0x80000000) /* ilogb(NAN) == INT_MIN */
N
N#define isfinite(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isfinitef(x) \
N        : __ARM_isfinite(x))
X#define isfinite(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isfinitef(x)         : __ARM_isfinite(x))
N    /*
N     * Returns true if x is a finite number, size independent.
N     */
N
N#define isgreater(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x20000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x20000000))
X#define isgreater(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x20000000)         : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x20000000))
N    /*
N     * Returns true if x > y, throws no exceptions except on Signaling NaNs
N     *
N     * We want the C not set but the Z bit clear, V must be clear
N     */
N
N#define isgreaterequal(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0x30000000) == 0x20000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0x30000000) == 0x20000000))
X#define isgreaterequal(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0x30000000) == 0x20000000)         : ((__ARM_dcmp4((x), (y)) & 0x30000000) == 0x20000000))
N    /*
N     * Returns true if x >= y, throws no exceptions except on Signaling NaNs
N     *
N     * We just need to see if the C bit is set or not and ensure V clear
N     */
N
N#define isinf(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isinff(x) \
N        : __ARM_isinf(x))
X#define isinf(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isinff(x)         : __ARM_isinf(x))
N    /*
N     * Returns true if x is an infinity, size independent.
N     */
N
N#define isless(x, y)  \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x80000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x80000000))
X#define isless(x, y)      (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x80000000)         : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x80000000))
N    /*
N     * Returns true if x < y, throws no exceptions except on Signaling NaNs
N     *
N     * We're less than if N is set, V clear
N     */
N
N#define islessequal(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xc0000000) != 0) \
N        : ((__ARM_dcmp4((x), (y)) & 0xc0000000) != 0))
X#define islessequal(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xc0000000) != 0)         : ((__ARM_dcmp4((x), (y)) & 0xc0000000) != 0))
N    /*
N     * Returns true if x <= y, throws no exceptions except on Signaling NaNs
N     *
N     * We're less than or equal if one of N or Z is set, V clear
N     */
N
N#define islessgreater(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? __ARM_islessgreaterf((x), (y)) \
N        : __ARM_islessgreater((x), (y)))
X#define islessgreater(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? __ARM_islessgreaterf((x), (y))         : __ARM_islessgreater((x), (y)))
N    /*
N     * Returns true if x <> y, throws no exceptions except on Signaling NaNs
N     * Unfortunately this test is too complicated to do in a macro without
N     * evaluating x & y twice.  Shame really...
N     */
N
N#define isnan(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isnanf(x) \
N        : __ARM_isnan(x))
X#define isnan(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isnanf(x)         : __ARM_isnan(x))
N    /*
N     * Returns TRUE if x is a NaN.
N     */
N
N#define isnormal(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isnormalf(x) \
N        : __ARM_isnormal(x))
X#define isnormal(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isnormalf(x)         : __ARM_isnormal(x))
N    /*
N     * Returns TRUE if x is a NaN.
N     */
N
N#define isunordered(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0x10000000) == 0x10000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0x10000000) == 0x10000000))
X#define isunordered(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0x10000000) == 0x10000000)         : ((__ARM_dcmp4((x), (y)) & 0x10000000) == 0x10000000))
N    /*
N     * Returns true if x ? y, throws no exceptions except on Signaling NaNs
N     * Unordered occurs if and only if the V bit is set
N     */
N
Nextern _ARMABI double lgamma (double /*x*/);
Xextern __declspec(__nothrow) double lgamma (double  );
N    /*
N     * The log of the absolute value of the gamma function of x. The sign
N     * of the gamma function of x is returned in the global `signgam'.
N     */
Nextern _ARMABI double log1p(double /*x*/);
Xextern __declspec(__nothrow) double log1p(double  );
N    /*
N     * log(1+x). (More accurate than just coding log(1+x), for small x.)
N     */
Nextern _ARMABI double logb(double /*x*/);
Xextern __declspec(__nothrow) double logb(double  );
N    /*
N     * Like ilogb but returns a double.
N     */
Nextern _ARMABI float logbf(float /*x*/);
Xextern __declspec(__nothrow) float logbf(float  );
N    /*
N     * Like logb but takes and returns float
N     */
Nextern _ARMABI long double logbl(long double /*x*/);
Xextern __declspec(__nothrow) long double logbl(long double  );
N    /*
N     * Like logb but takes and returns long double
N     */
Nextern _ARMABI double nextafter(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double nextafter(double  , double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI float nextafterf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float nextafterf(float  , float  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI long double nextafterl(long double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) long double nextafterl(long double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI double nexttoward(double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) double nexttoward(double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI float nexttowardf(float /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) float nexttowardf(float  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI long double nexttowardl(long double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) long double nexttowardl(long double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI double remainder(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double remainder(double  , double  );
N    /*
N     * Returns the remainder of x by y, in the IEEE 754 sense.
N     */
Nextern _ARMABI_FPEXCEPT double rint(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double rint(double  );
N    /*
N     * Rounds x to an integer, in the IEEE 754 sense.
N     */
Nextern _ARMABI double scalbln(double /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) double scalbln(double  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI float scalblnf(float /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) float scalblnf(float  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI long double scalblnl(long double /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) long double scalblnl(long double  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI double scalbn(double /*x*/, int /*n*/);
Xextern __declspec(__nothrow) double scalbn(double  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI float scalbnf(float /*x*/, int /*n*/);
Xextern __declspec(__nothrow) float scalbnf(float  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI long double scalbnl(long double /*x*/, int /*n*/);
Xextern __declspec(__nothrow) long double scalbnl(long double  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
N#define signbit(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_signbitf(x) \
N        : __ARM_signbit(x))
X#define signbit(x)     ((sizeof(x) == sizeof(float))         ? __ARM_signbitf(x)         : __ARM_signbit(x))
N    /*
N     * Returns the signbit of x, size independent macro
N     */
N#endif
N
N/* C99 float versions of functions.  math.h has always reserved these
N   identifiers for this purpose (7.13.4). */
Nextern _ARMABI_PURE float _fabsf(float); /* old ARM name */
Xextern __declspec(__nothrow) __attribute__((const)) float _fabsf(float);  
N_ARMABI_INLINE _ARMABI_PURE float fabsf(float __f) { return _fabsf(__f); }
X__inline __declspec(__nothrow) __attribute__((const)) float fabsf(float __f) { return _fabsf(__f); }
Nextern _ARMABI float sinf(float /*x*/);
Xextern __declspec(__nothrow) float sinf(float  );
Nextern _ARMABI float cosf(float /*x*/);
Xextern __declspec(__nothrow) float cosf(float  );
Nextern _ARMABI float tanf(float /*x*/);
Xextern __declspec(__nothrow) float tanf(float  );
Nextern _ARMABI float acosf(float /*x*/);
Xextern __declspec(__nothrow) float acosf(float  );
Nextern _ARMABI float asinf(float /*x*/);
Xextern __declspec(__nothrow) float asinf(float  );
Nextern _ARMABI float atanf(float /*x*/);
Xextern __declspec(__nothrow) float atanf(float  );
Nextern _ARMABI float atan2f(float /*y*/, float /*x*/);
Xextern __declspec(__nothrow) float atan2f(float  , float  );
Nextern _ARMABI float sinhf(float /*x*/);
Xextern __declspec(__nothrow) float sinhf(float  );
Nextern _ARMABI float coshf(float /*x*/);
Xextern __declspec(__nothrow) float coshf(float  );
Nextern _ARMABI float tanhf(float /*x*/);
Xextern __declspec(__nothrow) float tanhf(float  );
Nextern _ARMABI float expf(float /*x*/);
Xextern __declspec(__nothrow) float expf(float  );
Nextern _ARMABI float logf(float /*x*/);
Xextern __declspec(__nothrow) float logf(float  );
Nextern _ARMABI float log10f(float /*x*/);
Xextern __declspec(__nothrow) float log10f(float  );
Nextern _ARMABI float powf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float powf(float  , float  );
Nextern _ARMABI float sqrtf(float /*x*/);
Xextern __declspec(__nothrow) float sqrtf(float  );
Nextern _ARMABI float ldexpf(float /*x*/, int /*exp*/);
Xextern __declspec(__nothrow) float ldexpf(float  , int  );
Nextern _ARMABI float frexpf(float /*value*/, int * /*exp*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) float frexpf(float  , int *  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI_PURE float ceilf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float ceilf(float  );
Nextern _ARMABI_PURE float floorf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float floorf(float  );
Nextern _ARMABI float fmodf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float fmodf(float  , float  );
Nextern _ARMABI float modff(float /*value*/, float * /*iptr*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) float modff(float  , float *  ) __attribute__((__nonnull__(2)));
N
N/* C99 long double versions of functions. */
N/* (also need to have 'using' declarations below) */
N#define _ARMDEFLD1(f) \
N    _ARMABI long double f##l(long double /*x*/)
X#define _ARMDEFLD1(f)     _ARMABI long double f##l(long double  )
N
N#define _ARMDEFLD1P(f, T) \
N    _ARMABI long double f##l(long double /*x*/, T /*p*/)
X#define _ARMDEFLD1P(f, T)     _ARMABI long double f##l(long double  , T  )
N
N#define _ARMDEFLD2(f) \
N    _ARMABI long double f##l(long double /*x*/, long double /*y*/)
X#define _ARMDEFLD2(f)     _ARMABI long double f##l(long double  , long double  )
N
N/*
N * Long double versions of C89 functions can be defined
N * unconditionally, because C89 reserved these names in "future
N * library directions".
N */
N_ARMDEFLD1(acos);
X__declspec(__nothrow) long double acosl(long double );
N_ARMDEFLD1(asin);
X__declspec(__nothrow) long double asinl(long double );
N_ARMDEFLD1(atan);
X__declspec(__nothrow) long double atanl(long double );
N_ARMDEFLD2(atan2);
X__declspec(__nothrow) long double atan2l(long double , long double );
N_ARMDEFLD1(ceil);
X__declspec(__nothrow) long double ceill(long double );
N_ARMDEFLD1(cos);
X__declspec(__nothrow) long double cosl(long double );
N_ARMDEFLD1(cosh);
X__declspec(__nothrow) long double coshl(long double );
N_ARMDEFLD1(exp);
X__declspec(__nothrow) long double expl(long double );
N_ARMDEFLD1(fabs);
X__declspec(__nothrow) long double fabsl(long double );
N_ARMDEFLD1(floor);
X__declspec(__nothrow) long double floorl(long double );
N_ARMDEFLD2(fmod);
X__declspec(__nothrow) long double fmodl(long double , long double );
N_ARMDEFLD1P(frexp, int*) __attribute__((__nonnull__(2)));
X__declspec(__nothrow) long double frexpl(long double , int* ) __attribute__((__nonnull__(2)));
N_ARMDEFLD1P(ldexp, int);
X__declspec(__nothrow) long double ldexpl(long double , int );
N_ARMDEFLD1(log);
X__declspec(__nothrow) long double logl(long double );
N_ARMDEFLD1(log10);
X__declspec(__nothrow) long double log10l(long double );
N_ARMABI long double modfl(long double /*x*/, long double * /*p*/) __attribute__((__nonnull__(2)));
X__declspec(__nothrow) long double modfl(long double  , long double *  ) __attribute__((__nonnull__(2)));
N_ARMDEFLD2(pow);
X__declspec(__nothrow) long double powl(long double , long double );
N_ARMDEFLD1(sin);
X__declspec(__nothrow) long double sinl(long double );
N_ARMDEFLD1(sinh);
X__declspec(__nothrow) long double sinhl(long double );
N_ARMDEFLD1(sqrt);
X__declspec(__nothrow) long double sqrtl(long double );
N_ARMDEFLD1(tan);
X__declspec(__nothrow) long double tanl(long double );
N_ARMDEFLD1(tanh);
X__declspec(__nothrow) long double tanhl(long double );
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 0L
N
N/*
N * C99 float and long double versions of extra-C89 functions.
N */
Nextern _ARMABI float acoshf(float /*x*/);
Xextern __declspec(__nothrow) float acoshf(float  );
N_ARMDEFLD1(acosh);
X__declspec(__nothrow) long double acoshl(long double );
Nextern _ARMABI float asinhf(float /*x*/);
Xextern __declspec(__nothrow) float asinhf(float  );
N_ARMDEFLD1(asinh);
X__declspec(__nothrow) long double asinhl(long double );
Nextern _ARMABI float atanhf(float /*x*/);
Xextern __declspec(__nothrow) float atanhf(float  );
N_ARMDEFLD1(atanh);
X__declspec(__nothrow) long double atanhl(long double );
N_ARMDEFLD2(copysign);
X__declspec(__nothrow) long double copysignl(long double , long double );
Nextern _ARMABI float cbrtf(float /*x*/);
Xextern __declspec(__nothrow) float cbrtf(float  );
N_ARMDEFLD1(cbrt);
X__declspec(__nothrow) long double cbrtl(long double );
Nextern _ARMABI float erff(float /*x*/);
Xextern __declspec(__nothrow) float erff(float  );
N_ARMDEFLD1(erf);
X__declspec(__nothrow) long double erfl(long double );
Nextern _ARMABI float erfcf(float /*x*/);
Xextern __declspec(__nothrow) float erfcf(float  );
N_ARMDEFLD1(erfc);
X__declspec(__nothrow) long double erfcl(long double );
Nextern _ARMABI float expm1f(float /*x*/);
Xextern __declspec(__nothrow) float expm1f(float  );
N_ARMDEFLD1(expm1);
X__declspec(__nothrow) long double expm1l(long double );
Nextern _ARMABI float log1pf(float /*x*/);
Xextern __declspec(__nothrow) float log1pf(float  );
N_ARMDEFLD1(log1p);
X__declspec(__nothrow) long double log1pl(long double );
Nextern _ARMABI float hypotf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float hypotf(float  , float  );
N_ARMDEFLD2(hypot);
X__declspec(__nothrow) long double hypotl(long double , long double );
Nextern _ARMABI float lgammaf(float /*x*/);
Xextern __declspec(__nothrow) float lgammaf(float  );
N_ARMDEFLD1(lgamma);
X__declspec(__nothrow) long double lgammal(long double );
Nextern _ARMABI float remainderf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float remainderf(float  , float  );
N_ARMDEFLD2(remainder);
X__declspec(__nothrow) long double remainderl(long double , long double );
Nextern _ARMABI float rintf(float /*x*/);
Xextern __declspec(__nothrow) float rintf(float  );
N_ARMDEFLD1(rint);
X__declspec(__nothrow) long double rintl(long double );
N
N#endif
N
N#if (defined(__clang__) && !defined(__STRICT_ANSI)) || defined(__USE_C99_MATH)
X#if (0L && !0L) || 0L
S/*
S * Functions new in C99.
S */
Sextern _ARMABI double exp2(double /*x*/); /* * 2.^x. */
Sextern _ARMABI float exp2f(float /*x*/);
S_ARMDEFLD1(exp2);
Sextern _ARMABI double fdim(double /*x*/, double /*y*/);
Sextern _ARMABI float fdimf(float /*x*/, float /*y*/);
S_ARMDEFLD2(fdim);
S#ifdef __FP_FAST_FMA
S#define FP_FAST_FMA
S#endif
S#ifdef __FP_FAST_FMAF
S#define FP_FAST_FMAF
S#endif
S#ifdef __FP_FAST_FMAL
S#define FP_FAST_FMAL
S#endif
Sextern _ARMABI double fma(double /*x*/, double /*y*/, double /*z*/);
Sextern _ARMABI float fmaf(float /*x*/, float /*y*/, float /*z*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI long double fmal(long double __x, long double __y, long double __z) \
S    { return (long double)fma((double)__x, (double)__y, (double)__z); }
X_ARMABI_INLINE _ARMABI long double fmal(long double __x, long double __y, long double __z)     { return (long double)fma((double)__x, (double)__y, (double)__z); }
S#endif
Sextern _ARMABI_FPEXCEPT double fmax(double /*x*/, double /*y*/);
Sextern _ARMABI_FPEXCEPT float fmaxf(float /*x*/, float /*y*/);
S_ARMDEFLD2(fmax);
Sextern _ARMABI_FPEXCEPT double fmin(double /*x*/, double /*y*/);
Sextern _ARMABI_FPEXCEPT float fminf(float /*x*/, float /*y*/);
S_ARMDEFLD2(fmin);
Sextern _ARMABI double log2(double /*x*/); /* * log base 2 of x. */
Sextern _ARMABI float log2f(float /*x*/);
S_ARMDEFLD1(log2);
Sextern _ARMABI long lrint(double /*x*/);
Sextern _ARMABI long lrintf(float /*x*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI long lrintl(long double __x) \
S    { return lrint((double)__x); }
X_ARMABI_INLINE _ARMABI long lrintl(long double __x)     { return lrint((double)__x); }
S#endif
Sextern _ARMABI __LONGLONG llrint(double /*x*/);
Sextern _ARMABI __LONGLONG llrintf(float /*x*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI __LONGLONG llrintl(long double __x) \
S    { return llrint((double)__x); }
X_ARMABI_INLINE _ARMABI __LONGLONG llrintl(long double __x)     { return llrint((double)__x); }
S#endif
Sextern _ARMABI long lround(double /*x*/);
Sextern _ARMABI long lroundf(float /*x*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI long lroundl(long double __x) \
S    { return lround((double)__x); }
X_ARMABI_INLINE _ARMABI long lroundl(long double __x)     { return lround((double)__x); }
S#endif
Sextern _ARMABI __LONGLONG llround(double /*x*/);
Sextern _ARMABI __LONGLONG llroundf(float /*x*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI __LONGLONG llroundl(long double __x) \
S    { return llround((double)__x); }
X_ARMABI_INLINE _ARMABI __LONGLONG llroundl(long double __x)     { return llround((double)__x); }
S#endif
Sextern _ARMABI_PURE double nan(const char */*tagp*/);
Sextern _ARMABI_PURE float nanf(const char */*tagp*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI_PURE long double nanl(const char *__t) \
S    { return (long double)nan(__t); }
X_ARMABI_INLINE _ARMABI_PURE long double nanl(const char *__t)     { return (long double)nan(__t); }
S#endif
S#if defined(_WANT_SNAN) && defined(__SUPPORT_SNAN__)
Sextern _ARMABI_PURE double nans(const char */*tagp*/);
Sextern _ARMABI_PURE float nansf(const char */*tagp*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI_FPEXCEPT long double nansl(const char *__t) \
S    { return (long double)nans(__t); }
X_ARMABI_INLINE _ARMABI_FPEXCEPT long double nansl(const char *__t)     { return (long double)nans(__t); }
S#endif
S#endif 
Sextern _ARMABI_FPEXCEPT double nearbyint(double /*x*/);
Sextern _ARMABI_FPEXCEPT float nearbyintf(float /*x*/);
S_ARMDEFLD1(nearbyint);
Sextern  double remquo(double /*x*/, double /*y*/, int */*quo*/);
Sextern  float remquof(float /*x*/, float /*y*/, int */*quo*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE long double remquol(long double __x, long double __y, int *__q) \
S    { return (long double)remquo((double)__x, (double)__y, __q); }
X_ARMABI_INLINE long double remquol(long double __x, long double __y, int *__q)     { return (long double)remquo((double)__x, (double)__y, __q); }
S#endif
Sextern _ARMABI_FPEXCEPT double round(double /*x*/);
Sextern _ARMABI_FPEXCEPT float roundf(float /*x*/);
S_ARMDEFLD1(round);
Sextern _ARMABI double tgamma(double /*x*/); /* * The gamma function of x. */
Sextern _ARMABI float tgammaf(float /*x*/);
S_ARMDEFLD1(tgamma);
Sextern _ARMABI_FPEXCEPT double trunc(double /*x*/);
Sextern _ARMABI_FPEXCEPT float truncf(float /*x*/);
S_ARMDEFLD1(trunc);
N#endif
N
N#undef _ARMDEFLD1
N#undef _ARMDEFLD1P
N#undef _ARMDEFLD2
N
N#if defined(__cplusplus) && ((!defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)) || defined(__ARMCOMPILER_LIBCXX))
X#if 0L && ((!0L || 0L) || 0L)
S  extern "C++" {
S    inline int (fpclassify)(double __x) { return fpclassify(__x); }
S    inline bool (isfinite)(double __x) { return isfinite(__x); }
S    inline bool (isgreater)(double __x, double __y) { return isgreater(__x, __y); }
S    inline bool (isgreaterequal)(double __x, double __y) { return isgreaterequal(__x, __y); }
S    inline bool (isinf)(double __x) { return isinf(__x); }
S    inline bool (isless)(double __x, double __y) { return isless(__x, __y); }
S    inline bool (islessequal)(double __x, double __y) { return islessequal(__x, __y); }
S    inline bool (islessgreater)(double __x, double __y) { return islessgreater(__x, __y); }
S    inline bool (isnan)(double __x) { return isnan(__x); }
S    inline bool (isnormal)(double __x) { return isnormal(__x); }
S    inline bool (isunordered)(double __x, double __y) { return isunordered(__x, __y); }
S
S  }
N#endif
N
N#if defined(__cplusplus) && !defined(__ARMCOMPILER_LIBCXX)
X#if 0L && !0L
S  extern "C++" {
S    inline float abs(float __x)   { return fabsf(__x); }
S    inline float acos(float __x)  { return acosf(__x); }
S    inline float asin(float __x)  { return asinf(__x); }
S    inline float atan(float __x)  { return atanf(__x); }
S    inline float atan2(float __y, float __x)    { return atan2f(__y,__x); }
S    inline float ceil(float __x)  { return ceilf(__x); }
S    inline float cos(float __x)   { return cosf(__x); }
S    inline float cosh(float __x)  { return coshf(__x); }
S    inline float exp(float __x)   { return expf(__x); }
S    inline float fabs(float __x)  { return fabsf(__x); }
S    inline float floor(float __x) { return floorf(__x); }
S    inline float fmod(float __x, float __y)     { return fmodf(__x, __y); }
S    float frexp(float __x, int* __exp) __attribute__((__nonnull__(2)));
S    inline float frexp(float __x, int* __exp)   { return frexpf(__x, __exp); }
S    inline float ldexp(float __x, int __exp)    { return ldexpf(__x, __exp);}
S    inline float log(float __x)   { return logf(__x); }
S    inline float log10(float __x) { return log10f(__x); }
S    float modf(float __x, float* __iptr) __attribute__((__nonnull__(2)));
S    inline float modf(float __x, float* __iptr) { return modff(__x, __iptr); }
S    inline float pow(float __x, float __y)      { return powf(__x,__y); }
S    inline float pow(float __x, int __y)     { return powf(__x, (float)__y); }
S    inline float sin(float __x)   { return sinf(__x); }
S    inline float sinh(float __x)  { return sinhf(__x); }
S    inline float sqrt(float __x)  { return sqrtf(__x); }
S    inline float _sqrt(float __x) { return _sqrtf(__x); }
S    inline float tan(float __x)   { return tanf(__x); }
S    inline float tanh(float __x)  { return tanhf(__x); }
S
S    inline double abs(double __x) { return fabs(__x); }
S    inline double pow(double __x, int __y)
S                { return pow(__x, (double) __y); }
S
S#ifdef __HAVE_LONGDOUBLE
S    inline long double abs(long double __x)
S                { return (long double)fabsl(__x); }
S    inline long double acos(long double __x)
S                { return (long double)acosl(__x); }
S    inline long double asin(long double __x)
S                { return (long double)asinl(__x); }
S    inline long double atan(long double __x)
S                { return (long double)atanl(__x); }
S    inline long double atan2(long double __y, long double __x)
S                { return (long double)atan2l(__y, __x); }
S    inline long double ceil(long double __x)
S                { return (long double)ceill( __x); }
S    inline long double cos(long double __x)
S                { return (long double)cosl(__x); }
S    inline long double cosh(long double __x)
S                { return (long double)coshl(__x); }
S    inline long double exp(long double __x)
S                { return (long double)expl(__x); }
S    inline long double fabs(long double __x)
S                { return (long double)fabsl(__x); }
S    inline long double floor(long double __x)
S                { return (long double)floorl(__x); }
S    inline long double fmod(long double __x, long double __y)
S                { return (long double)fmodl(__x, __y); }
S    long double frexp(long double __x, int* __p) __attribute__((__nonnull__(2)));
S    inline long double frexp(long double __x, int* __p)
S                { return (long double)frexpl(__x, __p); }
S    inline long double ldexp(long double __x, int __exp)
S                { return (long double)ldexpl(__x, __exp); }
S    inline long double log(long double __x)
S                { return (long double)logl(__x); }
S    inline long double log10(long double __x)
S                { return (long double)log10l(__x); }
S    long double modf(long double __x, long double* __p) __attribute__((__nonnull__(2)));
S    inline long double modf(long double __x, long double* __p)
S                { return (long double)modfl(__x, __p); }
S    inline long double pow(long double __x, long double __y)
S                { return (long double)powl(__x, __y); }
S    inline long double pow(long double __x, int __y)
S                { return (long double)powl(__x, __y); }
S    inline long double sin(long double __x)
S                { return (long double)sinl(__x); }
S    inline long double sinh(long double __x)
S                { return (long double)sinhl(__x); }
S    inline long double sqrt(long double __x)
S                { return (long double)sqrtl(__x); }
S    inline long double _sqrt(long double __x)
S                { return (long double)_sqrt((double) __x); }
S    inline long double tan(long double __x)
S                { return (long double)tanl(__x); }
S    inline long double tanh(long double __x)
S                { return (long double)tanhl(__x); }
S#endif
S
S#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S    inline float acosh(float __x) { return acoshf(__x); }
S    inline float asinh(float __x) { return asinhf(__x); }
S    inline float atanh(float __x) { return atanhf(__x); }
S    inline float cbrt(float __x) { return cbrtf(__x); }
S    inline float erf(float __x) { return erff(__x); }
S    inline float erfc(float __x) { return erfcf(__x); }
S    inline float expm1(float __x) { return expm1f(__x); }
S    inline float log1p(float __x) { return log1pf(__x); }
S    inline float hypot(float __x, float __y) { return hypotf(__x, __y); }
S    inline float lgamma(float __x) { return lgammaf(__x); }
S    inline float remainder(float __x, float __y) { return remainderf(__x, __y); }
S    inline float rint(float __x) { return rintf(__x); }
S#endif
S
S#ifdef __USE_C99_MATH
S    inline float exp2(float __x) { return exp2f(__x); }
S    inline float fdim(float __x, float __y) { return fdimf(__x, __y); }
S    inline float fma(float __x, float __y, float __z) { return fmaf(__x, __y, __z); }
S    inline float fmax(float __x, float __y) { return fmaxf(__x, __y); }
S    inline float fmin(float __x, float __y) { return fminf(__x, __y); }
S    inline float log2(float __x) { return log2f(__x); }
S    inline _ARMABI long lrint(float __x) { return lrintf(__x); }
S    inline _ARMABI __LONGLONG llrint(float __x) { return llrintf(__x); }
S    inline _ARMABI long lround(float __x) { return lroundf(__x); }
S    inline _ARMABI __LONGLONG llround(float __x) { return llroundf(__x); }
S    inline _ARMABI_FPEXCEPT float nearbyint(float __x) { return nearbyintf(__x); }
S    inline float remquo(float __x, float __y, int *__q) { return remquof(__x, __y, __q); }
S    inline _ARMABI_FPEXCEPT float round(float __x) { return roundf(__x); }
S    inline float tgamma(float __x) { return tgammaf(__x); }
S    inline _ARMABI_FPEXCEPT float trunc(float __x) { return truncf(__x); }
S
S    inline int (fpclassify)(float __x) { return fpclassify(__x); }
S    inline bool (isfinite)(float __x) { return isfinite(__x); }
S    inline bool (isgreater)(float __x, float __y) { return isgreater(__x, __y); }
S    inline bool (isgreaterequal)(float __x, float __y) { return isgreaterequal(__x, __y); }
S    inline bool (isinf)(float __x) { return isinf(__x); }
S    inline bool (isless)(float __x, float __y) { return isless(__x, __y); }
S    inline bool (islessequal)(float __x, float __y) { return islessequal(__x, __y); }
S    inline bool (islessgreater)(float __x, float __y) { return islessgreater(__x, __y); }
S    inline bool (isnan)(float __x) { return isnan(__x); }
S    inline bool (isnormal)(float __x) { return isnormal(__x); }
S    inline bool (isunordered)(float __x, float __y) { return isunordered(__x, __y); }
S
S#ifdef __HAVE_LONGDOUBLE
S    inline long double acosh(long double __x) { return acoshl(__x); }
S    inline long double asinh(long double __x) { return asinhl(__x); }
S    inline long double atanh(long double __x) { return atanhl(__x); }
S    inline long double cbrt(long double __x) { return cbrtl(__x); }
S    inline long double erf(long double __x) { return erfl(__x); }
S    inline long double erfc(long double __x) { return erfcl(__x); }
S    inline long double expm1(long double __x) { return expm1l(__x); }
S    inline long double log1p(long double __x) { return log1pl(__x); }
S    inline long double hypot(long double __x, long double __y) { return hypotl(__x, __y); }
S    inline long double lgamma(long double __x) { return lgammal(__x); }
S    inline long double remainder(long double __x, long double __y) { return remainderl(__x, __y); }
S    inline long double rint(long double __x) { return rintl(__x); }
S    inline long double exp2(long double __x) { return exp2l(__x); }
S    inline long double fdim(long double __x, long double __y) { return fdiml(__x, __y); }
S    inline long double fma(long double __x, long double __y, long double __z) { return fmal(__x, __y, __z); }
S    inline long double fmax(long double __x, long double __y) { return fmaxl(__x, __y); }
S    inline long double fmin(long double __x, long double __y) { return fminl(__x, __y); }
S    inline long double log2(long double __x) { return log2l(__x); }
S    inline _ARMABI long lrint(long double __x) { return lrintl(__x); }
S    inline _ARMABI __LONGLONG llrint(long double __x) { return llrintl(__x); }
S    inline _ARMABI long lround(long double __x) { return lroundl(__x); }
S    inline _ARMABI __LONGLONG llround(long double __x) { return llroundl(__x); }
S    inline _ARMABI_FPEXCEPT long double nearbyint(long double __x) { return nearbyintl(__x); }
S    inline long double remquo(long double __x, long double __y, int *__q) { return remquol(__x, __y, __q); }
S    inline _ARMABI_FPEXCEPT long double round(long double __x) { return roundl(__x); }
S    inline long double tgamma(long double __x) { return tgammal(__x); }
S    inline _ARMABI_FPEXCEPT long double trunc(long double __x) { return truncl(__x); }
S    inline int (fpclassify)(long double __x) { return fpclassify(__x); }
S    inline bool (isfinite)(long double __x) { return isfinite(__x); }
S    inline bool (isgreater)(long double __x, long double __y) { return isgreater(__x, __y); }
S    inline bool (isgreaterequal)(long double __x, long double __y) { return isgreaterequal(__x, __y); }
S    inline bool (isinf)(long double __x) { return isinf(__x); }
S    inline bool (isless)(long double __x, long double __y) { return isless(__x, __y); }
S    inline bool (islessequal)(long double __x, long double __y) { return islessequal(__x, __y); }
S    inline bool (islessgreater)(long double __x, long double __y) { return islessgreater(__x, __y); }
S    inline bool (isnan)(long double __x) { return isnan(__x); }
S    inline bool (isnormal)(long double __x) { return isnormal(__x); }
S    inline bool (isunordered)(long double __x, long double __y) { return isunordered(__x, __y); }
S#endif
S
S#undef fpclassify
S#undef isfinite
S#undef isgreater
S#undef isgreaterequal
S#undef isinf
S#undef isless
S#undef islessequal
S#undef islessgreater
S#undef isnan
S#undef isnormal
S#undef isunordered
S
S#endif
S
S  }
N#endif
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __MATH_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__MATH_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::__use_accurate_range_reduction;
S    #ifndef __ARMCOMPILER_LIBCXX
S      using ::std::abs;
S    #endif
S    using ::std::acos;
S    using ::std::asin;
S    using ::std::atan2;
S    using ::std::atan;
S    using ::std::ceil;
S    using ::std::cos;
S    using ::std::cosh;
S    using ::std::exp;
S    using ::std::fabs;
S    using ::std::floor;
S    using ::std::fmod;
S    using ::std::frexp;
S    using ::std::ldexp;
S    using ::std::log10;
S    using ::std::log;
S    using ::std::modf;
S    using ::std::pow;
S    using ::std::sin;
S    using ::std::sinh;
S    using ::std::sqrt;
S    using ::std::_sqrt;
S    using ::std::_sqrtf;
S    using ::std::tan;
S    using ::std::tanh;
S    using ::std::_fabsf;
S    /* C99 float and long double versions in already-C89-reserved namespace */
S    using ::std::acosf;
S    using ::std::acosl;
S    using ::std::asinf;
S    using ::std::asinl;
S    using ::std::atan2f;
S    using ::std::atan2l;
S    using ::std::atanf;
S    using ::std::atanl;
S    using ::std::ceilf;
S    using ::std::ceill;
S    using ::std::cosf;
S    using ::std::coshf;
S    using ::std::coshl;
S    using ::std::cosl;
S    using ::std::expf;
S    using ::std::expl;
S    using ::std::fabsf;
S    using ::std::fabsl;
S    using ::std::floorf;
S    using ::std::floorl;
S    using ::std::fmodf;
S    using ::std::fmodl;
S    using ::std::frexpf;
S    using ::std::frexpl;
S    using ::std::ldexpf;
S    using ::std::ldexpl;
S    using ::std::log10f;
S    using ::std::log10l;
S    using ::std::logf;
S    using ::std::logl;
S    using ::std::modff;
S    using ::std::modfl;
S    using ::std::powf;
S    using ::std::powl;
S    using ::std::sinf;
S    using ::std::sinhf;
S    using ::std::sinhl;
S    using ::std::sinl;
S    using ::std::sqrtf;
S    using ::std::sqrtl;
S    using ::std::tanf;
S    using ::std::tanhf;
S    using ::std::tanhl;
S    using ::std::tanl;
S    #if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S      /* C99 additions which for historical reasons appear in non-strict mode */
S      using ::std::acosh;
S      using ::std::asinh;
S      using ::std::atanh;
S      using ::std::cbrt;
S      using ::std::copysign;
S      using ::std::copysignf;
S      using ::std::erf;
S      using ::std::erfc;
S      using ::std::expm1;
S      using ::std::hypot;
S      using ::std::ilogb;
S      using ::std::ilogbf;
S      using ::std::ilogbl;
S      using ::std::lgamma;
S      using ::std::log1p;
S      using ::std::logb;
S      using ::std::logbf;
S      using ::std::logbl;
S      using ::std::nextafter;
S      using ::std::nextafterf;
S      using ::std::nextafterl;
S      using ::std::nexttoward;
S      using ::std::nexttowardf;
S      using ::std::nexttowardl;
S      using ::std::remainder;
S      using ::std::rint;
S      using ::std::scalbln;
S      using ::std::scalblnf;
S      using ::std::scalblnl;
S      using ::std::scalbn;
S      using ::std::scalbnf;
S      using ::std::scalbnl;
S      using ::std::math_errhandling;
S      using ::std::acoshf;
S      using ::std::acoshl;
S      using ::std::asinhf;
S      using ::std::asinhl;
S      using ::std::atanhf;
S      using ::std::atanhl;
S      using ::std::copysignl;
S      using ::std::cbrtf;
S      using ::std::cbrtl;
S      using ::std::erff;
S      using ::std::erfl;
S      using ::std::erfcf;
S      using ::std::erfcl;
S      using ::std::expm1f;
S      using ::std::expm1l;
S      using ::std::log1pf;
S      using ::std::log1pl;
S      using ::std::hypotf;
S      using ::std::hypotl;
S      using ::std::lgammaf;
S      using ::std::lgammal;
S      using ::std::remainderf;
S      using ::std::remainderl;
S      using ::std::rintf;
S      using ::std::rintl;
S      /* New in C99. */
S      using ::std::float_t;
S      using ::std::double_t;
S    #endif
S    #if (defined(__clang__) && !defined(__STRICT_ANSI)) || defined(__USE_C99_MATH)
S      /* Functions new in C99. */
S      using ::std::exp2;
S      using ::std::exp2f;
S      using ::std::exp2l;
S      using ::std::fdim;
S      using ::std::fdimf;
S      using ::std::fdiml;
S      using ::std::fma;
S      using ::std::fmaf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::fmal;
S#endif
S      using ::std::fmax;
S      using ::std::fmaxf;
S      using ::std::fmaxl;
S      using ::std::fmin;
S      using ::std::fminf;
S      using ::std::fminl;
S      using ::std::log2;
S      using ::std::log2f;
S      using ::std::log2l;
S      using ::std::lrint;
S      using ::std::lrintf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::lrintl;
S#endif
S      using ::std::llrint;
S      using ::std::llrintf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::llrintl;
S#endif
S      using ::std::lround;
S      using ::std::lroundf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::lroundl;
S#endif
S      using ::std::llround;
S      using ::std::llroundf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::llroundl;
S#endif
S      using ::std::nan;
S      using ::std::nanf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::nanl;
S#endif
S      using ::std::nearbyint;
S      using ::std::nearbyintf;
S      using ::std::nearbyintl;
S      using ::std::remquo;
S      using ::std::remquof;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::remquol;
S#endif
S      using ::std::round;
S      using ::std::roundf;
S      using ::std::roundl;
S      using ::std::tgamma;
S      using ::std::tgammaf;
S      using ::std::tgammal;
S      using ::std::trunc;
S      using ::std::truncf;
S      using ::std::truncl;
S    #endif
S
S    #if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S      using ::std::fpclassify;
S      using ::std::isfinite;
S      using ::std::isgreater;
S      using ::std::isgreaterequal;
S      using ::std::isinf;
S      using ::std::isless;
S      using ::std::islessequal;
S      using ::std::islessgreater;
S      using ::std::isnan;
S      using ::std::isnormal;
S      using ::std::isunordered;
S    #endif
N  #endif
N
N#undef __LONGLONG
N
N#endif /* __math_h */
N
N/* end of math.h */
L 27 "..\..\..\M6P1(L)_Lua\lua\ltable.c" 2
N#include <limits.h>
L 1 "D:\Program_Files_x86\Keil_v5\ARM\ARMCC\Bin\..\include\limits.h" 1
N/* limits.h: ANSI 'C' (X3J11 Oct 88) library header, section 2.2.4.2 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991-1997 ARM Limited. All rights reserved         */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N#ifndef __limits_h
N#define __limits_h
N#define __ARMCLIB_VERSION 5060009
N
N#define CHAR_BIT 8
N    /* max number of bits for smallest object that is not a bit-field (byte) */
N#define SCHAR_MIN (-128)
N    /* mimimum value for an object of type signed char */
N#define SCHAR_MAX 127
N    /* maximum value for an object of type signed char */
N#define UCHAR_MAX 255
N    /* maximum value for an object of type unsigned char */
N#ifdef __FEATURE_SIGNED_CHAR
N  #define CHAR_MIN (-128)
N      /* minimum value for an object of type char */
N  #define CHAR_MAX 127
N      /* maximum value for an object of type char */
N#else
S  #define CHAR_MIN 0
S      /* minimum value for an object of type char */
S  #define CHAR_MAX 255
S      /* maximum value for an object of type char */
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X#if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S  #define _AEABI_PORTABLE
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
Sextern const int __aeabi_MB_LEN_MAX;
S#define MB_LEN_MAX (__aeabi_MB_LEN_MAX)
N#else
N#define MB_LEN_MAX 6
N#endif
N    /* maximum number of bytes in a multibyte character, */
N    /* for any supported locale */
N
N#define SHRT_MIN  (-0x8000)
N    /* minimum value for an object of type short int */
N#define SHRT_MAX  0x7fff
N    /* maximum value for an object of type short int */
N#define USHRT_MAX 65535
N    /* maximum value for an object of type unsigned short int */
N#define INT_MIN   (~0x7fffffff)  /* -2147483648 and 0x80000000 are unsigned */
N    /* minimum value for an object of type int */
N#define INT_MAX   0x7fffffff
N    /* maximum value for an object of type int */
N#define UINT_MAX  0xffffffffU
N    /* maximum value for an object of type unsigned int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define LONG_MIN  (~0x7fffffffffffffffL)
N#else
N  #define LONG_MIN  (~0x7fffffffL)
N#endif
N    /* minimum value for an object of type long int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define LONG_MAX  0x7fffffffffffffffL
N#else
N  #define LONG_MAX  0x7fffffffL
N#endif
N    /* maximum value for an object of type long int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define ULONG_MAX 0xffffffffffffffffUL
N#else
N  #define ULONG_MAX 0xffffffffUL
N#endif
N    /* maximum value for an object of type unsigned long int */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N  #define LLONG_MIN  (~0x7fffffffffffffffLL)
N      /* minimum value for an object of type long long int */
N  #define LLONG_MAX    0x7fffffffffffffffLL
N      /* maximum value for an object of type long long int */
N  #define ULLONG_MAX   0xffffffffffffffffULL
N      /* maximum value for an object of type unsigned long int */
N#endif
N
N#endif
N
N/* end of limits.h */
N
L 28 "..\..\..\M6P1(L)_Lua\lua\ltable.c" 2
N
N#include "lua.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lua.h" 1
N/*
N** $Id: lua.h,v 1.343 2018/03/02 16:30:47 roberto Exp roberto $
N** Lua - A Scripting Language
N** Lua.org, PUC-Rio, Brazil (http://www.lua.org)
N** See Copyright Notice at the end of this file
N*/
N
N
N#ifndef lua_h
N#define lua_h
N
N#include <stdarg.h>
L 1 "D:\Program_Files_x86\Keil_v5\ARM\ARMCC\Bin\..\include\stdarg.h" 1
N/* stdarg.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.8 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright (C) ARM Ltd., 1991-1999. All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdarg_h
N#define __stdarg_h
N#define __ARMCLIB_VERSION 5060009
N
N  #ifndef __STDARG_DECLS
N  #define __STDARG_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N/*
N * stdarg.h declares a type and defines macros for advancing through a
N * list of arguments whose number and types are not known to the called
N * function when it is translated. A function may be called with a variable
N * number of arguments of differing types. Its parameter list contains one or
N * more parameters. The rightmost parameter plays a special role in the access
N * mechanism, and will be called parmN in this description.
N */
N
N/* N.B. <stdio.h> is required to declare vfprintf() without defining      */
N/* va_list.  Clearly the type __va_list there must keep in step.          */
N#ifdef __clang__
S  typedef __builtin_va_list va_list;
S  #define va_start(ap, param) __builtin_va_start(ap, param)
S  #define va_end(ap)          __builtin_va_end(ap)
S  #define va_arg(ap, type)    __builtin_va_arg(ap, type)
S  #if __STDC_VERSION__ >= 199900L || __cplusplus >= 201103L || !defined(__STRICT_ANSI__)
S  #define va_copy(dest, src)  __builtin_va_copy(dest, src)
S  #endif
N#else
N  #ifdef __TARGET_ARCH_AARCH64
S    typedef struct __va_list {
S      void *__stack;
S      void *__gr_top;
S      void *__vr_top;
S      int __gr_offs;
S      int __vr_offs;
S    } va_list;
N  #else
N    typedef struct __va_list { void *__ap; } va_list;
N  #endif
N   /*
N    * an array type suitable for holding information needed by the macro va_arg
N    * and the function va_end. The called function shall declare a variable
N    * (referred to as ap) having type va_list. The variable ap may be passed as
N    * an argument to another function.
N    * Note: va_list is an array type so that when an object of that type
N    * is passed as an argument it gets passed by reference.
N    */
N  #define va_start(ap, parmN) __va_start(ap, parmN)
N
N   /*
N    * The va_start macro shall be executed before any access to the unnamed
N    * arguments. The parameter ap points to an object that has type va_list.
N    * The va_start macro initialises ap for subsequent use by va_arg and
N    * va_end. The parameter parmN is the identifier of the rightmost parameter
N    * in the variable parameter list in the function definition (the one just
N    * before the '...'). If the parameter parmN is declared with the register
N    * storage class an error is given.
N    * If parmN is a narrow type (char, short, float) an error is given in
N    * strict ANSI mode, or a warning otherwise.
N    * Returns: no value.
N    */
N  #define va_arg(ap, type) __va_arg(ap, type)
N
N   /*
N    * The va_arg macro expands to an expression that has the type and value of
N    * the next argument in the call. The parameter ap shall be the same as the
N    * va_list ap initialised by va_start. Each invocation of va_arg modifies
N    * ap so that successive arguments are returned in turn. The parameter
N    * 'type' is a type name such that the type of a pointer to an object that
N    * has the specified type can be obtained simply by postfixing a * to
N    * 'type'. If type is a narrow type, an error is given in strict ANSI
N    * mode, or a warning otherwise. If the type is an array or function type,
N    * an error is given.
N    * In non-strict ANSI mode, 'type' is allowed to be any expression.
N    * Returns: The first invocation of the va_arg macro after that of the
N    *          va_start macro returns the value of the argument after that
N    *          specified by parmN. Successive invocations return the values of
N    *          the remaining arguments in succession.
N    *          The result is cast to 'type', even if 'type' is narrow.
N    */
N
N#define __va_copy(dest, src) ((void)((dest) = (src)))
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N   /* va_copy is in C99 and non-strict C90 and non-strict C++
N    * __va_copy is always present.
N    */
N  #define va_copy(dest, src) ((void)((dest) = (src)))
N
N   /* The va_copy macro makes the va_list dest be a copy of
N    * the va_list src, as if the va_start macro had been applied
N    * to it followed by the same sequence of uses of the va_arg
N    * macro as had previously been used to reach the present state
N    * of src.
N    */
N#endif
N
N#define va_end(ap) __va_end(ap)
N   /*
N    * The va_end macro facilitates a normal return from the function whose
N    * variable argument list was referenced by the expansion of va_start that
N    * initialised the va_list ap. If the va_end macro is not invoked before
N    * the return, the behaviour is undefined.
N    * Returns: no value.
N    */
N#endif /* __clang__ */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N
N    #ifdef __GNUC__
S     /* be cooperative with glibc */
S     typedef __CLIBNS va_list __gnuc_va_list;
S     #define __GNUC_VA_LIST
S     #undef __need___va_list
N    #endif
N
N  #endif /* __STDARG_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDARG_NO_EXPORTS
S      using ::std::va_list;
S    #endif
N  #endif /* __cplusplus */
N#endif
N
N/* end of stdarg.h */
N
L 13 "..\..\..\M6P1(L)_Lua\lua\lua.h" 2
N#include <stddef.h>
L 1 "D:\Program_Files_x86\Keil_v5\ARM\ARMCC\Bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060009
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS ::std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N  /* unconditional in non-strict C for consistency of debug info */
N    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X    #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #else
N      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
N  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 201112L <= 199409L) || (0L && 201103L <= __cplusplus)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
S    #ifndef __STDDEF_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::ptrdiff_t;
S      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S        using ::std::max_align_t;
S      #endif
S    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 14 "..\..\..\M6P1(L)_Lua\lua\lua.h" 2
N
N
N#include "luaconf.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\luaconf.h" 1
N/*
N** $Id: luaconf.h,v 1.266 2018/03/02 18:31:51 roberto Exp roberto $
N** Configuration file for Lua
N** See Copyright Notice in lua.h
N*/
N
N
N#ifndef luaconf_h
N#define luaconf_h
N
N#include <limits.h>
N#include <stddef.h>
N
N
N/*
N** ===================================================================
N** Search for "@@" to find all configurable definitions.
N** ===================================================================
N*/
N
N
N/*
N** {====================================================================
N** System Configuration: macros to adapt (if needed) Lua to some
N** particular platform, for instance compiling it with 32-bit numbers or
N** restricting it to C89.
N** =====================================================================
N*/
N
N/*
N@@ LUA_32BITS enables Lua with 32-bit integers and 32-bit floats. You
N** can also define LUA_32BITS in the make file, but changing here you
N** ensure that all software connected to Lua will be compiled with the
N** same configuration.
N*/
N/* #define LUA_32BITS */
N
N
N/*
N@@ LUA_USE_C89 controls the use of non-ISO-C89 features.
N** Define it if you want Lua to avoid the use of a few C99 features
N** or Windows-specific features on Windows.
N*/
N/* #define LUA_USE_C89 */
N
N
N/*
N** By default, Lua on Windows use (some) specific Windows features
N*/
N#if !defined(LUA_USE_C89) && defined(_WIN32) && !defined(_WIN32_WCE)
X#if !0L && 0L && !0L
S#define LUA_USE_WINDOWS  /* enable goodies for regular Windows */
N#endif
N
N
N#if defined(LUA_USE_WINDOWS)
X#if 0L
S#define LUA_DL_DLL	/* enable support for DLL */
S#define LUA_USE_C89	/* broadly, Windows is C89 */
N#endif
N
N
N#if defined(LUA_USE_LINUX)
X#if 0L
S#define LUA_USE_POSIX
S#define LUA_USE_DLOPEN		/* needs an extra library: -ldl */
N#endif
N
N
N#if defined(LUA_USE_MACOSX)
X#if 0L
S#define LUA_USE_POSIX
S#define LUA_USE_DLOPEN		/* MacOS does not need -ldl */
N#endif
N
N
N/*
N@@ LUA_C89_NUMBERS ensures that Lua uses the largest types available for
N** C89 ('long' and 'double'); Windows always has '__int64', so it does
N** not need to use this case.
N*/
N#if defined(LUA_USE_C89) && !defined(LUA_USE_WINDOWS)
X#if 0L && !0L
S#define LUA_C89_NUMBERS
N#endif
N
N
N
N/*
N@@ LUAI_BITSINT defines the (minimum) number of bits in an 'int'.
N*/
N/* avoid undefined shifts */
N#if ((INT_MAX >> 15) >> 15) >= 1
X#if ((0x7fffffff >> 15) >> 15) >= 1
N#define LUAI_BITSINT	32
N#else
S/* 'int' always must have at least 16 bits */
S#define LUAI_BITSINT	16
N#endif
N
N
N/*
N@@ LUA_INT_TYPE defines the type for Lua integers.
N@@ LUA_FLOAT_TYPE defines the type for Lua floats.
N** Lua should work fine with any mix of these options (if supported
N** by your C compiler). The usual configurations are 64-bit integers
N** and 'double' (the default), 32-bit integers and 'float' (for
N** restricted platforms), and 'long'/'double' (for C compilers not
N** compliant with C99, which may not have support for 'long long').
N*/
N
N/* predefined options for LUA_INT_TYPE */
N#define LUA_INT_INT		1
N#define LUA_INT_LONG		2
N#define LUA_INT_LONGLONG	3
N
N/* predefined options for LUA_FLOAT_TYPE */
N#define LUA_FLOAT_FLOAT		1
N#define LUA_FLOAT_DOUBLE	2
N#define LUA_FLOAT_LONGDOUBLE	3
N
N#if defined(LUA_32BITS)		/* { */
X#if 0L		 
S/*
S** 32-bit integers and 'float'
S*/
S#if LUAI_BITSINT >= 32  /* use 'int' if big enough */
S#define LUA_INT_TYPE	LUA_INT_INT
S#else  /* otherwise use 'long' */
S#define LUA_INT_TYPE	LUA_INT_LONG
S#endif
S#define LUA_FLOAT_TYPE	LUA_FLOAT_FLOAT
S
S#elif defined(LUA_C89_NUMBERS)	/* }{ */
X#elif 0L	 
S/*
S** largest types available for C89 ('long' and 'double')
S*/
S#define LUA_INT_TYPE	LUA_INT_LONG
S#define LUA_FLOAT_TYPE	LUA_FLOAT_DOUBLE
S
N#endif				/* } */
N
N
N/*
N** default configuration for 64-bit Lua ('long long' and 'double')
N*/
N#if !defined(LUA_INT_TYPE)
X#if !0L
N#define LUA_INT_TYPE	LUA_INT_LONGLONG
N#endif
N
N#if !defined(LUA_FLOAT_TYPE)
X#if !0L
N#define LUA_FLOAT_TYPE	LUA_FLOAT_DOUBLE
N#endif
N
N/* }================================================================== */
N
N
N
N
N/*
N** {==================================================================
N** Configuration for Paths.
N** ===================================================================
N*/
N
N/*
N** LUA_PATH_SEP is the character that separates templates in a path.
N** LUA_PATH_MARK is the string that marks the substitution points in a
N** template.
N** LUA_EXEC_DIR in a Windows path is replaced by the executable's
N** directory.
N*/
N#define LUA_PATH_SEP            ";"
N#define LUA_PATH_MARK           "?"
N#define LUA_EXEC_DIR            "!"
N
N
N/*
N@@ LUA_PATH_DEFAULT is the default path that Lua uses to look for
N** Lua libraries.
N@@ LUA_CPATH_DEFAULT is the default path that Lua uses to look for
N** C libraries.
N** CHANGE them if your machine has a non-conventional directory
N** hierarchy or if you want to install your libraries in
N** non-conventional directories.
N*/
N#define LUA_VDIR	LUA_VERSION_MAJOR "." LUA_VERSION_MINOR
N#if defined(_WIN32)	/* { */
X#if 0L	 
S/*
S** In Windows, any exclamation mark ('!') in the path is replaced by the
S** path of the directory of the executable file of the current process.
S*/
S#define LUA_LDIR	"!\\lua\\"
S#define LUA_CDIR	"!\\"
S#define LUA_SHRDIR	"!\\..\\share\\lua\\" LUA_VDIR "\\"
S#define LUA_PATH_DEFAULT  \
S		LUA_LDIR"?.lua;"  LUA_LDIR"?\\init.lua;" \
S		LUA_CDIR"?.lua;"  LUA_CDIR"?\\init.lua;" \
S		LUA_SHRDIR"?.lua;" LUA_SHRDIR"?\\init.lua;" \
S		".\\?.lua;" ".\\?\\init.lua"
X#define LUA_PATH_DEFAULT  		LUA_LDIR"?.lua;"  LUA_LDIR"?\\init.lua;" 		LUA_CDIR"?.lua;"  LUA_CDIR"?\\init.lua;" 		LUA_SHRDIR"?.lua;" LUA_SHRDIR"?\\init.lua;" 		".\\?.lua;" ".\\?\\init.lua"
S#define LUA_CPATH_DEFAULT \
S		LUA_CDIR"?.dll;" \
S		LUA_CDIR"..\\lib\\lua\\" LUA_VDIR "\\?.dll;" \
S		LUA_CDIR"loadall.dll;" ".\\?.dll"
X#define LUA_CPATH_DEFAULT 		LUA_CDIR"?.dll;" 		LUA_CDIR"..\\lib\\lua\\" LUA_VDIR "\\?.dll;" 		LUA_CDIR"loadall.dll;" ".\\?.dll"
S
N#else			/* }{ */
N
N#define LUA_ROOT	"/usr/local/"
N#define LUA_LDIR	LUA_ROOT "share/lua/" LUA_VDIR "/"
N#define LUA_CDIR	LUA_ROOT "lib/lua/" LUA_VDIR "/"
N#define LUA_PATH_DEFAULT  \
N		LUA_LDIR"?.lua;"  LUA_LDIR"?/init.lua;" \
N		LUA_CDIR"?.lua;"  LUA_CDIR"?/init.lua;" \
N		"./?.lua;" "./?/init.lua"
X#define LUA_PATH_DEFAULT  		LUA_LDIR"?.lua;"  LUA_LDIR"?/init.lua;" 		LUA_CDIR"?.lua;"  LUA_CDIR"?/init.lua;" 		"./?.lua;" "./?/init.lua"
N#define LUA_CPATH_DEFAULT \
N		LUA_CDIR"?.so;" LUA_CDIR"loadall.so;" "./?.so"
X#define LUA_CPATH_DEFAULT 		LUA_CDIR"?.so;" LUA_CDIR"loadall.so;" "./?.so"
N#endif			/* } */
N
N
N/*
N@@ LUA_DIRSEP is the directory separator (for submodules).
N** CHANGE it if your machine does not use "/" as the directory separator
N** and is not Windows. (On Windows Lua automatically uses "\".)
N*/
N#if defined(_WIN32)
X#if 0L
S#define LUA_DIRSEP	"\\"
N#else
N#define LUA_DIRSEP	"/"
N#endif
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Marks for exported symbols in the C code
N** ===================================================================
N*/
N
N/*
N@@ LUA_API is a mark for all core API functions.
N@@ LUALIB_API is a mark for all auxiliary library functions.
N@@ LUAMOD_API is a mark for all standard library opening functions.
N** CHANGE them if you need to define those functions in some special way.
N** For instance, if you want to create one Windows DLL with the core and
N** the libraries, you may want to use the following definition (define
N** LUA_BUILD_AS_DLL to get it).
N*/
N#if defined(LUA_BUILD_AS_DLL)	/* { */
X#if 0L	 
S
S#if defined(LUA_CORE) || defined(LUA_LIB)	/* { */
S#define LUA_API __declspec(dllexport)
S#else						/* }{ */
S#define LUA_API __declspec(dllimport)
S#endif						/* } */
S
N#else				/* }{ */
N
N#define LUA_API		extern
N
N#endif				/* } */
N
N
N/* more often than not the libs go together with the core */
N#define LUALIB_API	LUA_API
N#define LUAMOD_API	LUALIB_API
N
N
N/*
N@@ LUAI_FUNC is a mark for all extern functions that are not to be
N** exported to outside modules.
N@@ LUAI_DDEF and LUAI_DDEC are marks for all extern (const) variables
N** that are not to be exported to outside modules (LUAI_DDEF for
N** definitions and LUAI_DDEC for declarations).
N** CHANGE them if you need to mark them in some special way. Elf/gcc
N** (versions 3.2 and later) mark them as "hidden" to optimize access
N** when Lua is compiled as a shared library. Not all elf targets support
N** this attribute. Unfortunately, gcc does not offer a way to check
N** whether the target offers that support, and those without support
N** give a warning about it. To avoid these warnings, change to the
N** default definition.
N*/
N#if defined(__GNUC__) && ((__GNUC__*100 + __GNUC_MINOR__) >= 302) && \
N    defined(__ELF__)		/* { */
X#if 0L && ((__GNUC__*100 + __GNUC_MINOR__) >= 302) &&     0L		 
S#define LUAI_FUNC	__attribute__((visibility("hidden"))) extern
N#else				/* }{ */
N#define LUAI_FUNC	extern
N#endif				/* } */
N
N#define LUAI_DDEC	LUAI_FUNC
N#define LUAI_DDEF	/* empty */
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Compatibility with previous versions
N** ===================================================================
N*/
N
N/*
N@@ LUA_COMPAT_5_3 controls other macros for compatibility with Lua 5.2.
N** You can define it to get all options, or change specific options
N** to fit your specific needs.
N*/
N#if defined(LUA_COMPAT_5_3)	/* { */
X#if 0L	 
S
S/*
S@@ LUA_COMPAT_MATHLIB controls the presence of several deprecated
S** functions in the mathematical library.
S** (These functions were already officially removed in 5.3, but
S** nevertheless they are available by default there.)
S*/
S#define LUA_COMPAT_MATHLIB
S
S/*
S@@ LUA_COMPAT_APIINTCASTS controls the presence of macros for
S** manipulating other integer types (lua_pushunsigned, lua_tounsigned,
S** luaL_checkint, luaL_checklong, etc.)
S*/
S#define LUA_COMPAT_APIINTCASTS
S
N#endif				/* } */
N
N
N
N/*
N@@ The following macros supply trivial compatibility for some
N** changes in the API. The macros themselves document how to
N** change your code to avoid using them.
N*/
N#define lua_strlen(L,i)		lua_rawlen(L, (i))
N
N#define lua_objlen(L,i)		lua_rawlen(L, (i))
N
N#define lua_equal(L,idx1,idx2)		lua_compare(L,(idx1),(idx2),LUA_OPEQ)
N#define lua_lessthan(L,idx1,idx2)	lua_compare(L,(idx1),(idx2),LUA_OPLT)
N
N/* }================================================================== */
N
N
N
N/*
N** {==================================================================
N** Configuration for Numbers.
N** Change these definitions if no predefined LUA_FLOAT_* / LUA_INT_*
N** satisfy your needs.
N** ===================================================================
N*/
N
N/*
N@@ LUA_NUMBER is the floating-point type used by Lua.
N@@ LUAI_UACNUMBER is the result of a 'default argument promotion'
N@@ over a floating number.
N@@ l_mathlim(x) corrects limit name 'x' to the proper float type
N** by prefixing it with one of FLT/DBL/LDBL.
N@@ LUA_NUMBER_FRMLEN is the length modifier for writing floats.
N@@ LUA_NUMBER_FMT is the format for writing floats.
N@@ lua_number2str converts a float to a string.
N@@ l_mathop allows the addition of an 'l' or 'f' to all math operations.
N@@ l_floor takes the floor of a float.
N@@ lua_str2number converts a decimal numeric string to a number.
N*/
N
N
N/* The following definitions are good for most cases here */
N
N#define l_floor(x)		(l_mathop(floor)(x))
N
N#define lua_number2str(s,sz,n)  \
N	l_sprintf((s), sz, LUA_NUMBER_FMT, (LUAI_UACNUMBER)(n))
X#define lua_number2str(s,sz,n)  	l_sprintf((s), sz, LUA_NUMBER_FMT, (LUAI_UACNUMBER)(n))
N
N/*
N@@ lua_numbertointeger converts a float number with an integral value
N** to an integer, or returns 0 if float is not within the range of
N** a lua_Integer.  (The range comparisons are tricky because of
N** rounding. The tests here assume a two-complement representation,
N** where MININTEGER always has an exact representation as a float;
N** MAXINTEGER may not have one, and therefore its conversion to float
N** may have an ill-defined value.)
N*/
N#define lua_numbertointeger(n,p) \
N  ((n) >= (LUA_NUMBER)(LUA_MININTEGER) && \
N   (n) < -(LUA_NUMBER)(LUA_MININTEGER) && \
N      (*(p) = (LUA_INTEGER)(n), 1))
X#define lua_numbertointeger(n,p)   ((n) >= (LUA_NUMBER)(LUA_MININTEGER) &&    (n) < -(LUA_NUMBER)(LUA_MININTEGER) &&       (*(p) = (LUA_INTEGER)(n), 1))
N
N
N/* now the variable definitions */
N
N#if LUA_FLOAT_TYPE == LUA_FLOAT_FLOAT		/* { single float */
X#if 2 == 1		 
S
S#define LUA_NUMBER	float
S
S#define l_mathlim(n)		(FLT_##n)
S
S#define LUAI_UACNUMBER	double
S
S#define LUA_NUMBER_FRMLEN	""
S#define LUA_NUMBER_FMT		"%.7g"
S
S#define l_mathop(op)		op##f
S
S#define lua_str2number(s,p)	strtof((s), (p))
S
S
S#elif LUA_FLOAT_TYPE == LUA_FLOAT_LONGDOUBLE	/* }{ long double */
X#elif 2 == 3	 
S
S#define LUA_NUMBER	long double
S
S#define l_mathlim(n)		(LDBL_##n)
S
S#define LUAI_UACNUMBER	long double
S
S#define LUA_NUMBER_FRMLEN	"L"
S#define LUA_NUMBER_FMT		"%.19Lg"
S
S#define l_mathop(op)		op##l
S
S#define lua_str2number(s,p)	strtold((s), (p))
S
N#elif LUA_FLOAT_TYPE == LUA_FLOAT_DOUBLE	/* }{ double */
X#elif 2 == 2	 
N
N#define LUA_NUMBER	double
N
N#define l_mathlim(n)		(DBL_##n)
N
N#define LUAI_UACNUMBER	double
N
N#define LUA_NUMBER_FRMLEN	""
N#define LUA_NUMBER_FMT		"%.14g"
N
N#define l_mathop(op)		op
N
N#define lua_str2number(s,p)	strtod((s), (p))
N
N#else						/* }{ */
S
S#error "numeric float type not defined"
S
N#endif					/* } */
N
N
N
N/*
N@@ LUA_INTEGER is the integer type used by Lua.
N**
N@@ LUA_UNSIGNED is the unsigned version of LUA_INTEGER.
N**
N@@ LUAI_UACINT is the result of a 'default argument promotion'
N@@ over a lUA_INTEGER.
N@@ LUA_INTEGER_FRMLEN is the length modifier for reading/writing integers.
N@@ LUA_INTEGER_FMT is the format for writing integers.
N@@ LUA_MAXINTEGER is the maximum value for a LUA_INTEGER.
N@@ LUA_MININTEGER is the minimum value for a LUA_INTEGER.
N@@ LUA_MAXUNSIGNED is the maximum value for a LUA_UNSIGNED.
N@@ lua_integer2str converts an integer to a string.
N*/
N
N
N/* The following definitions are good for most cases here */
N
N#define LUA_INTEGER_FMT		"%" LUA_INTEGER_FRMLEN "d"
N
N#define LUAI_UACINT		LUA_INTEGER
N
N#define lua_integer2str(s,sz,n)  \
N	l_sprintf((s), sz, LUA_INTEGER_FMT, (LUAI_UACINT)(n))
X#define lua_integer2str(s,sz,n)  	l_sprintf((s), sz, LUA_INTEGER_FMT, (LUAI_UACINT)(n))
N
N/*
N** use LUAI_UACINT here to avoid problems with promotions (which
N** can turn a comparison between unsigneds into a signed comparison)
N*/
N#define LUA_UNSIGNED		unsigned LUAI_UACINT
N
N#define LUA_MAXUNSIGNED		(~(lua_Unsigned)0)
N
N
N/* now the variable definitions */
N
N#if LUA_INT_TYPE == LUA_INT_INT		/* { int */
X#if 3 == 1		 
S
S#define LUA_INTEGER		int
S#define LUA_INTEGER_FRMLEN	""
S
S#define LUA_MAXINTEGER		INT_MAX
S#define LUA_MININTEGER		INT_MIN
S
S#elif LUA_INT_TYPE == LUA_INT_LONG	/* }{ long */
X#elif 3 == 2	 
S
S#define LUA_INTEGER		long
S#define LUA_INTEGER_FRMLEN	"l"
S
S#define LUA_MAXINTEGER		LONG_MAX
S#define LUA_MININTEGER		LONG_MIN
S
N#elif LUA_INT_TYPE == LUA_INT_LONGLONG	/* }{ long long */
X#elif 3 == 3	 
N
N/* use presence of macro LLONG_MAX as proxy for C99 compliance */
N#if defined(LLONG_MAX)		/* { */
X#if 1L		 
N/* use ISO C99 stuff */
N
N#define LUA_INTEGER		long long
N#define LUA_INTEGER_FRMLEN	"ll"
N
N#define LUA_MAXINTEGER		LLONG_MAX
N#define LUA_MININTEGER		LLONG_MIN
N
N#elif defined(LUA_USE_WINDOWS) /* }{ */
S/* in Windows, can use specific Windows types */
S
S#define LUA_INTEGER		__int64
S#define LUA_INTEGER_FRMLEN	"I64"
S
S#define LUA_MAXINTEGER		_I64_MAX
S#define LUA_MININTEGER		_I64_MIN
S
S#else				/* }{ */
S
S#error "Compiler does not support 'long long'. Use option '-DLUA_32BITS' \
S  or '-DLUA_C89_NUMBERS' (see file 'luaconf.h' for details)"
X#error "Compiler does not support 'long long'. Use option '-DLUA_32BITS'   or '-DLUA_C89_NUMBERS' (see file 'luaconf.h' for details)"
S
N#endif				/* } */
N
N#else				/* }{ */
S
S#error "numeric integer type not defined"
S
N#endif				/* } */
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Dependencies with C99 and other C details
N** ===================================================================
N*/
N
N/*
N@@ l_sprintf is equivalent to 'snprintf' or 'sprintf' in C89.
N** (All uses in Lua have only one format item.)
N*/
N#if !defined(LUA_USE_C89)
X#if !0L
N#define l_sprintf(s,sz,f,i)	snprintf(s,sz,f,i)
N#else
S#define l_sprintf(s,sz,f,i)	((void)(sz), sprintf(s,f,i))
N#endif
N
N
N/*
N@@ lua_strx2number converts a hexadecimal numeric string to a number.
N** In C99, 'strtod' does that conversion. Otherwise, you can
N** leave 'lua_strx2number' undefined and Lua will provide its own
N** implementation.
N*/
N#if !defined(LUA_USE_C89)
X#if !0L
N#define lua_strx2number(s,p)		lua_str2number(s,p)
N#endif
N
N
N/*
N@@ lua_pointer2str converts a pointer to a readable string in a
N** non-specified way.
N*/
N#define lua_pointer2str(buff,sz,p)	l_sprintf(buff,sz,"%p",p)
N
N
N/*
N@@ lua_number2strx converts a float to a hexadecimal numeric string.
N** In C99, 'sprintf' (with format specifiers '%a'/'%A') does that.
N** Otherwise, you can leave 'lua_number2strx' undefined and Lua will
N** provide its own implementation.
N*/
N#if !defined(LUA_USE_C89)
X#if !0L
N#define lua_number2strx(L,b,sz,f,n)  \
N	((void)L, l_sprintf(b,sz,f,(LUAI_UACNUMBER)(n)))
X#define lua_number2strx(L,b,sz,f,n)  	((void)L, l_sprintf(b,sz,f,(LUAI_UACNUMBER)(n)))
N#endif
N
N
N/*
N** 'strtof' and 'opf' variants for math functions are not valid in
N** C89. Otherwise, the macro 'HUGE_VALF' is a good proxy for testing the
N** availability of these variants. ('math.h' is already included in
N** all files that use these macros.)
N*/
N#if defined(LUA_USE_C89) || (defined(HUGE_VAL) && !defined(HUGE_VALF))
X#if 0L || (1L && !1L)
S#undef l_mathop  /* variants not available */
S#undef lua_str2number
S#define l_mathop(op)		(lua_Number)op  /* no variant */
S#define lua_str2number(s,p)	((lua_Number)strtod((s), (p)))
N#endif
N
N
N/*
N@@ LUA_KCONTEXT is the type of the context ('ctx') for continuation
N** functions.  It must be a numerical type; Lua will use 'intptr_t' if
N** available, otherwise it will use 'ptrdiff_t' (the nearest thing to
N** 'intptr_t' in C89)
N*/
N#define LUA_KCONTEXT	ptrdiff_t
N
N#if !defined(LUA_USE_C89) && defined(__STDC_VERSION__) && \
N    __STDC_VERSION__ >= 199901L
X#if !0L && 1L &&     199409L >= 199901L
S#include <stdint.h>
S#if defined(INTPTR_MAX)  /* even in C99 this type is optional */
S#undef LUA_KCONTEXT
S#define LUA_KCONTEXT	intptr_t
S#endif
N#endif
N
N
N/*
N@@ lua_getlocaledecpoint gets the locale "radix character" (decimal point).
N** Change that if you do not want to use C locales. (Code using this
N** macro must include header 'locale.h'.)
N*/
N#if !defined(lua_getlocaledecpoint)
X#if !0L
N#define lua_getlocaledecpoint()		(localeconv()->decimal_point[0])
N#endif
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Language Variations
N** =====================================================================
N*/
N
N/*
N@@ LUA_NOCVTN2S/LUA_NOCVTS2N control how Lua performs some
N** coercions. Define LUA_NOCVTN2S to turn off automatic coercion from
N** numbers to strings. Define LUA_NOCVTS2N to turn off automatic
N** coercion from strings to numbers.
N*/
N/* #define LUA_NOCVTN2S */
N/* #define LUA_NOCVTS2N */
N
N
N/*
N@@ LUA_USE_APICHECK turns on several consistency checks on the C API.
N** Define it as a help when debugging C code.
N*/
N#if defined(LUA_USE_APICHECK)
X#if 0L
S#include <assert.h>
S#define luai_apicheck(l,e)	assert(e)
N#endif
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Macros that affect the API and must be stable (that is, must be the
N** same when you compile Lua and when you compile code that links to
N** Lua). You probably do not want/need to change them.
N** =====================================================================
N*/
N
N/*
N@@ LUAI_MAXSTACK limits the size of the Lua stack.
N** CHANGE it if you need a different limit. This limit is arbitrary;
N** its only purpose is to stop Lua from consuming unlimited stack
N** space (and to reserve some numbers for pseudo-indices).
N** (It must fit into max(size_t)/32.)
N*/
N#if LUAI_BITSINT >= 32
X#if 32 >= 32
N#define LUAI_MAXSTACK		1000000
N#else
S#define LUAI_MAXSTACK		15000
N#endif
N
N
N/*
N@@ LUA_EXTRASPACE defines the size of a raw memory area associated with
N** a Lua state with very fast access.
N** CHANGE it if you need a different size.
N*/
N#define LUA_EXTRASPACE		(sizeof(void *))
N
N
N/*
N@@ LUA_IDSIZE gives the maximum size for the description of the source
N@@ of a function in debug information.
N** CHANGE it if you want a different size.
N*/
N#define LUA_IDSIZE	60
N
N
N/*
N@@ LUAL_BUFFERSIZE is the buffer size used by the lauxlib buffer system.
N** CHANGE it if it uses too much C-stack space. (For long double,
N** 'string.format("%.99f", -1e4932)' needs 5034 bytes, so a
N** smaller buffer would force a memory allocation for each call to
N** 'string.format'.)
N*/
N#if LUA_FLOAT_TYPE == LUA_FLOAT_LONGDOUBLE
X#if 2 == 3
S#define LUAL_BUFFERSIZE		8192
N#else
N#define LUAL_BUFFERSIZE   ((int)(0x80 * sizeof(void*) * sizeof(lua_Integer)))
N#endif
N
N/*
N@@ LUAI_MAXALIGN defines fields that, when used in a union, ensure
N** "maximum" alignment for the other items in that union.
N*/
N#define LUAI_MAXALIGN  lua_Number n; double u; void *s; lua_Integer i; long l
N
N/* }================================================================== */
N
N
N/*
N@@ LUA_QL describes how error messages quote program elements.
N** Lua does not use these macros anymore; they are here for
N** compatibility only.
N*/
N#define LUA_QL(x)	"'" x "'"
N#define LUA_QS		LUA_QL("%s")
N
N
N
N
N/* =================================================================== */
N
N/*
N** Local configuration. You can use this space to add your redefinitions
N** without modifying the main part of the file.
N*/
N
N
N
N
N
N#endif
N
L 17 "..\..\..\M6P1(L)_Lua\lua\lua.h" 2
N
N
N#define LUA_VERSION_MAJOR	"5"
N#define LUA_VERSION_MINOR	"4"
N#define LUA_VERSION_NUM		504
N#define LUA_VERSION_RELEASE	"0"
N
N#define LUA_VERSION	"Lua " LUA_VERSION_MAJOR "." LUA_VERSION_MINOR
N#define LUA_RELEASE	LUA_VERSION "." LUA_VERSION_RELEASE
N#define LUA_COPYRIGHT	LUA_RELEASE "  Copyright (C) 1994-2018 Lua.org, PUC-Rio"
N#define LUA_AUTHORS	"R. Ierusalimschy, L. H. de Figueiredo, W. Celes"
N
N
N/* mark for precompiled code ('<esc>Lua') */
N#define LUA_SIGNATURE	"\x1bLua"
N
N/* option for multiple returns in 'lua_pcall' and 'lua_call' */
N#define LUA_MULTRET	(-1)
N
N
N/*
N** Pseudo-indices
N** (-LUAI_MAXSTACK is the minimum valid index; we keep some free empty
N** space after that to help overflow detection)
N*/
N#define LUA_REGISTRYINDEX	(-LUAI_MAXSTACK - 1000)
N#define lua_upvalueindex(i)	(LUA_REGISTRYINDEX - (i))
N
N
N/* thread status */
N#define LUA_OK		0
N#define LUA_YIELD	1
N#define LUA_ERRRUN	2
N#define LUA_ERRSYNTAX	3
N#define LUA_ERRMEM	4
N#define LUA_ERRGCMM	5
N#define LUA_ERRERR	6
N
N
Ntypedef struct lua_State lua_State;
N
N
N/*
N** basic types
N*/
N#define LUA_TNONE		(-1)
N
N#define LUA_TNIL		0
N#define LUA_TBOOLEAN		1
N#define LUA_TLIGHTUSERDATA	2
N#define LUA_TNUMBER		3
N#define LUA_TSTRING		4
N#define LUA_TTABLE		5
N#define LUA_TFUNCTION		6
N#define LUA_TUSERDATA		7
N#define LUA_TTHREAD		8
N
N#define LUA_NUMTAGS		9
N
N
N
N/* minimum Lua stack available to a C function */
N#define LUA_MINSTACK	20
N
N
N/* predefined values in the registry */
N#define LUA_RIDX_MAINTHREAD	1
N#define LUA_RIDX_GLOBALS	2
N#define LUA_RIDX_LAST		LUA_RIDX_GLOBALS
N
N
N/* type of numbers in Lua */
Ntypedef LUA_NUMBER lua_Number;
Xtypedef double lua_Number;
N
N
N/* type for integer functions */
Ntypedef LUA_INTEGER lua_Integer;
Xtypedef long long lua_Integer;
N
N/* unsigned integer type */
Ntypedef LUA_UNSIGNED lua_Unsigned;
Xtypedef unsigned long long lua_Unsigned;
N
N/* type for continuation-function contexts */
Ntypedef LUA_KCONTEXT lua_KContext;
Xtypedef ptrdiff_t lua_KContext;
N
N
N/*
N** Type for C functions registered with Lua
N*/
Ntypedef int (*lua_CFunction) (lua_State *L);
N
N/*
N** Type for continuation functions
N*/
Ntypedef int (*lua_KFunction) (lua_State *L, int status, lua_KContext ctx);
N
N
N/*
N** Type for functions that read/write blocks when loading/dumping Lua chunks
N*/
Ntypedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);
N
Ntypedef int (*lua_Writer) (lua_State *L, const void *p, size_t sz, void *ud);
N
N
N/*
N** Type for memory-allocation functions
N*/
Ntypedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);
N
N
N
N/*
N** generic extra include file
N*/
N#if defined(LUA_USER_H)
X#if 0L
S#include LUA_USER_H
N#endif
N
N
N/*
N** RCS ident string
N*/
Nextern const char lua_ident[];
N
N
N/*
N** state manipulation
N*/
NLUA_API lua_State *(lua_newstate) (lua_Alloc f, void *ud);
Xextern lua_State *(lua_newstate) (lua_Alloc f, void *ud);
NLUA_API void       (lua_close) (lua_State *L);
Xextern void       (lua_close) (lua_State *L);
NLUA_API lua_State *(lua_newthread) (lua_State *L);
Xextern lua_State *(lua_newthread) (lua_State *L);
N
NLUA_API lua_CFunction (lua_atpanic) (lua_State *L, lua_CFunction panicf);
Xextern lua_CFunction (lua_atpanic) (lua_State *L, lua_CFunction panicf);
N
N
NLUA_API const lua_Number *(lua_version) (lua_State *L);
Xextern const lua_Number *(lua_version) (lua_State *L);
N
N
N/*
N** basic stack manipulation
N*/
NLUA_API int   (lua_absindex) (lua_State *L, int idx);
Xextern int   (lua_absindex) (lua_State *L, int idx);
NLUA_API int   (lua_gettop) (lua_State *L);
Xextern int   (lua_gettop) (lua_State *L);
NLUA_API void  (lua_settop) (lua_State *L, int idx);
Xextern void  (lua_settop) (lua_State *L, int idx);
NLUA_API void  (lua_pushvalue) (lua_State *L, int idx);
Xextern void  (lua_pushvalue) (lua_State *L, int idx);
NLUA_API void  (lua_rotate) (lua_State *L, int idx, int n);
Xextern void  (lua_rotate) (lua_State *L, int idx, int n);
NLUA_API void  (lua_copy) (lua_State *L, int fromidx, int toidx);
Xextern void  (lua_copy) (lua_State *L, int fromidx, int toidx);
NLUA_API int   (lua_checkstack) (lua_State *L, int n);
Xextern int   (lua_checkstack) (lua_State *L, int n);
N
NLUA_API void  (lua_xmove) (lua_State *from, lua_State *to, int n);
Xextern void  (lua_xmove) (lua_State *from, lua_State *to, int n);
N
N
N/*
N** access functions (stack -> C)
N*/
N
NLUA_API int             (lua_isnumber) (lua_State *L, int idx);
Xextern int             (lua_isnumber) (lua_State *L, int idx);
NLUA_API int             (lua_isstring) (lua_State *L, int idx);
Xextern int             (lua_isstring) (lua_State *L, int idx);
NLUA_API int             (lua_iscfunction) (lua_State *L, int idx);
Xextern int             (lua_iscfunction) (lua_State *L, int idx);
NLUA_API int             (lua_isinteger) (lua_State *L, int idx);
Xextern int             (lua_isinteger) (lua_State *L, int idx);
NLUA_API int             (lua_isuserdata) (lua_State *L, int idx);
Xextern int             (lua_isuserdata) (lua_State *L, int idx);
NLUA_API int             (lua_type) (lua_State *L, int idx);
Xextern int             (lua_type) (lua_State *L, int idx);
NLUA_API const char     *(lua_typename) (lua_State *L, int tp);
Xextern const char     *(lua_typename) (lua_State *L, int tp);
N
NLUA_API lua_Number      (lua_tonumberx) (lua_State *L, int idx, int *isnum);
Xextern lua_Number      (lua_tonumberx) (lua_State *L, int idx, int *isnum);
NLUA_API lua_Integer     (lua_tointegerx) (lua_State *L, int idx, int *isnum);
Xextern lua_Integer     (lua_tointegerx) (lua_State *L, int idx, int *isnum);
NLUA_API int             (lua_toboolean) (lua_State *L, int idx);
Xextern int             (lua_toboolean) (lua_State *L, int idx);
NLUA_API const char     *(lua_tolstring) (lua_State *L, int idx, size_t *len);
Xextern const char     *(lua_tolstring) (lua_State *L, int idx, size_t *len);
NLUA_API lua_Unsigned    (lua_rawlen) (lua_State *L, int idx);
Xextern lua_Unsigned    (lua_rawlen) (lua_State *L, int idx);
NLUA_API lua_CFunction   (lua_tocfunction) (lua_State *L, int idx);
Xextern lua_CFunction   (lua_tocfunction) (lua_State *L, int idx);
NLUA_API void	       *(lua_touserdata) (lua_State *L, int idx);
Xextern void	       *(lua_touserdata) (lua_State *L, int idx);
NLUA_API lua_State      *(lua_tothread) (lua_State *L, int idx);
Xextern lua_State      *(lua_tothread) (lua_State *L, int idx);
NLUA_API const void     *(lua_topointer) (lua_State *L, int idx);
Xextern const void     *(lua_topointer) (lua_State *L, int idx);
N
N
N/*
N** Comparison and arithmetic functions
N*/
N
N#define LUA_OPADD	0	/* ORDER TM, ORDER OP */
N#define LUA_OPSUB	1
N#define LUA_OPMUL	2
N#define LUA_OPMOD	3
N#define LUA_OPPOW	4
N#define LUA_OPDIV	5
N#define LUA_OPIDIV	6
N#define LUA_OPBAND	7
N#define LUA_OPBOR	8
N#define LUA_OPBXOR	9
N#define LUA_OPSHL	10
N#define LUA_OPSHR	11
N#define LUA_OPUNM	12
N#define LUA_OPBNOT	13
N
NLUA_API void  (lua_arith) (lua_State *L, int op);
Xextern void  (lua_arith) (lua_State *L, int op);
N
N#define LUA_OPEQ	0
N#define LUA_OPLT	1
N#define LUA_OPLE	2
N
NLUA_API int   (lua_rawequal) (lua_State *L, int idx1, int idx2);
Xextern int   (lua_rawequal) (lua_State *L, int idx1, int idx2);
NLUA_API int   (lua_compare) (lua_State *L, int idx1, int idx2, int op);
Xextern int   (lua_compare) (lua_State *L, int idx1, int idx2, int op);
N
N
N/*
N** push functions (C -> stack)
N*/
NLUA_API void        (lua_pushnil) (lua_State *L);
Xextern void        (lua_pushnil) (lua_State *L);
NLUA_API void        (lua_pushnumber) (lua_State *L, lua_Number n);
Xextern void        (lua_pushnumber) (lua_State *L, lua_Number n);
NLUA_API void        (lua_pushinteger) (lua_State *L, lua_Integer n);
Xextern void        (lua_pushinteger) (lua_State *L, lua_Integer n);
NLUA_API const char *(lua_pushlstring) (lua_State *L, const char *s, size_t len);
Xextern const char *(lua_pushlstring) (lua_State *L, const char *s, size_t len);
NLUA_API const char *(lua_pushstring) (lua_State *L, const char *s);
Xextern const char *(lua_pushstring) (lua_State *L, const char *s);
NLUA_API const char *(lua_pushvfstring) (lua_State *L, const char *fmt,
Xextern const char *(lua_pushvfstring) (lua_State *L, const char *fmt,
N                                                      va_list argp);
NLUA_API const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);
Xextern const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);
NLUA_API void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);
Xextern void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);
NLUA_API void  (lua_pushboolean) (lua_State *L, int b);
Xextern void  (lua_pushboolean) (lua_State *L, int b);
NLUA_API void  (lua_pushlightuserdata) (lua_State *L, void *p);
Xextern void  (lua_pushlightuserdata) (lua_State *L, void *p);
NLUA_API int   (lua_pushthread) (lua_State *L);
Xextern int   (lua_pushthread) (lua_State *L);
N
N
N/*
N** get functions (Lua -> stack)
N*/
NLUA_API int (lua_getglobal) (lua_State *L, const char *name);
Xextern int (lua_getglobal) (lua_State *L, const char *name);
NLUA_API int (lua_gettable) (lua_State *L, int idx);
Xextern int (lua_gettable) (lua_State *L, int idx);
NLUA_API int (lua_getfield) (lua_State *L, int idx, const char *k);
Xextern int (lua_getfield) (lua_State *L, int idx, const char *k);
NLUA_API int (lua_geti) (lua_State *L, int idx, lua_Integer n);
Xextern int (lua_geti) (lua_State *L, int idx, lua_Integer n);
NLUA_API int (lua_rawget) (lua_State *L, int idx);
Xextern int (lua_rawget) (lua_State *L, int idx);
NLUA_API int (lua_rawgeti) (lua_State *L, int idx, lua_Integer n);
Xextern int (lua_rawgeti) (lua_State *L, int idx, lua_Integer n);
NLUA_API int (lua_rawgetp) (lua_State *L, int idx, const void *p);
Xextern int (lua_rawgetp) (lua_State *L, int idx, const void *p);
N
NLUA_API void  (lua_createtable) (lua_State *L, int narr, int nrec);
Xextern void  (lua_createtable) (lua_State *L, int narr, int nrec);
NLUA_API void *(lua_newuserdatauv) (lua_State *L, size_t sz, int nuvalue);
Xextern void *(lua_newuserdatauv) (lua_State *L, size_t sz, int nuvalue);
NLUA_API int   (lua_getmetatable) (lua_State *L, int objindex);
Xextern int   (lua_getmetatable) (lua_State *L, int objindex);
NLUA_API int  (lua_getiuservalue) (lua_State *L, int idx, int n);
Xextern int  (lua_getiuservalue) (lua_State *L, int idx, int n);
N
N
N/*
N** set functions (stack -> Lua)
N*/
NLUA_API void  (lua_setglobal) (lua_State *L, const char *name);
Xextern void  (lua_setglobal) (lua_State *L, const char *name);
NLUA_API void  (lua_settable) (lua_State *L, int idx);
Xextern void  (lua_settable) (lua_State *L, int idx);
NLUA_API void  (lua_setfield) (lua_State *L, int idx, const char *k);
Xextern void  (lua_setfield) (lua_State *L, int idx, const char *k);
NLUA_API void  (lua_seti) (lua_State *L, int idx, lua_Integer n);
Xextern void  (lua_seti) (lua_State *L, int idx, lua_Integer n);
NLUA_API void  (lua_rawset) (lua_State *L, int idx);
Xextern void  (lua_rawset) (lua_State *L, int idx);
NLUA_API void  (lua_rawseti) (lua_State *L, int idx, lua_Integer n);
Xextern void  (lua_rawseti) (lua_State *L, int idx, lua_Integer n);
NLUA_API void  (lua_rawsetp) (lua_State *L, int idx, const void *p);
Xextern void  (lua_rawsetp) (lua_State *L, int idx, const void *p);
NLUA_API int   (lua_setmetatable) (lua_State *L, int objindex);
Xextern int   (lua_setmetatable) (lua_State *L, int objindex);
NLUA_API int   (lua_setiuservalue) (lua_State *L, int idx, int n);
Xextern int   (lua_setiuservalue) (lua_State *L, int idx, int n);
N
N
N/*
N** 'load' and 'call' functions (load and run Lua code)
N*/
NLUA_API void  (lua_callk) (lua_State *L, int nargs, int nresults,
Xextern void  (lua_callk) (lua_State *L, int nargs, int nresults,
N                           lua_KContext ctx, lua_KFunction k);
N#define lua_call(L,n,r)		lua_callk(L, (n), (r), 0, NULL)
N
NLUA_API int   (lua_pcallk) (lua_State *L, int nargs, int nresults, int errfunc,
Xextern int   (lua_pcallk) (lua_State *L, int nargs, int nresults, int errfunc,
N                            lua_KContext ctx, lua_KFunction k);
N#define lua_pcall(L,n,r,f)	lua_pcallk(L, (n), (r), (f), 0, NULL)
N
NLUA_API int   (lua_load) (lua_State *L, lua_Reader reader, void *dt,
Xextern int   (lua_load) (lua_State *L, lua_Reader reader, void *dt,
N                          const char *chunkname, const char *mode);
N
NLUA_API int (lua_dump) (lua_State *L, lua_Writer writer, void *data, int strip);
Xextern int (lua_dump) (lua_State *L, lua_Writer writer, void *data, int strip);
N
N
N/*
N** coroutine functions
N*/
NLUA_API int  (lua_yieldk)     (lua_State *L, int nresults, lua_KContext ctx,
Xextern int  (lua_yieldk)     (lua_State *L, int nresults, lua_KContext ctx,
N                               lua_KFunction k);
NLUA_API int  (lua_resume)     (lua_State *L, lua_State *from, int narg,
Xextern int  (lua_resume)     (lua_State *L, lua_State *from, int narg,
N                               int *nres);
NLUA_API int  (lua_status)     (lua_State *L);
Xextern int  (lua_status)     (lua_State *L);
NLUA_API int (lua_isyieldable) (lua_State *L);
Xextern int (lua_isyieldable) (lua_State *L);
N
N#define lua_yield(L,n)		lua_yieldk(L, (n), 0, NULL)
N
N
N/*
N** garbage-collection function and options
N*/
N
N#define LUA_GCSTOP		0
N#define LUA_GCRESTART		1
N#define LUA_GCCOLLECT		2
N#define LUA_GCCOUNT		3
N#define LUA_GCCOUNTB		4
N#define LUA_GCSTEP		5
N#define LUA_GCSETPAUSE		6
N#define LUA_GCSETSTEPMUL	7
N#define LUA_GCISRUNNING		9
N#define LUA_GCGEN		10
N#define LUA_GCINC		11
N
NLUA_API int (lua_gc) (lua_State *L, int what, ...);
Xextern int (lua_gc) (lua_State *L, int what, ...);
N
N
N/*
N** miscellaneous functions
N*/
N
NLUA_API int   (lua_error) (lua_State *L);
Xextern int   (lua_error) (lua_State *L);
N
NLUA_API int   (lua_next) (lua_State *L, int idx);
Xextern int   (lua_next) (lua_State *L, int idx);
N
NLUA_API void  (lua_concat) (lua_State *L, int n);
Xextern void  (lua_concat) (lua_State *L, int n);
NLUA_API void  (lua_len)    (lua_State *L, int idx);
Xextern void  (lua_len)    (lua_State *L, int idx);
N
NLUA_API size_t   (lua_stringtonumber) (lua_State *L, const char *s);
Xextern size_t   (lua_stringtonumber) (lua_State *L, const char *s);
N
NLUA_API lua_Alloc (lua_getallocf) (lua_State *L, void **ud);
Xextern lua_Alloc (lua_getallocf) (lua_State *L, void **ud);
NLUA_API void      (lua_setallocf) (lua_State *L, lua_Alloc f, void *ud);
Xextern void      (lua_setallocf) (lua_State *L, lua_Alloc f, void *ud);
N
NLUA_API void (lua_removekey) (lua_State *L, int idx);
Xextern void (lua_removekey) (lua_State *L, int idx);
NLUA_API int (lua_keyin) (lua_State *L, int idx);
Xextern int (lua_keyin) (lua_State *L, int idx);
N
N
N/*
N** {==============================================================
N** some useful macros
N** ===============================================================
N*/
N
N#define lua_getextraspace(L)	((void *)((char *)(L) - LUA_EXTRASPACE))
N
N#define lua_tonumber(L,i)	lua_tonumberx(L,(i),NULL)
N#define lua_tointeger(L,i)	lua_tointegerx(L,(i),NULL)
N
N#define lua_pop(L,n)		lua_settop(L, -(n)-1)
N
N#define lua_newtable(L)		lua_createtable(L, 0, 0)
N
N#define lua_register(L,n,f) (lua_pushcfunction(L, (f)), lua_setglobal(L, (n)))
N
N#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
N
N#define lua_isfunction(L,n)	(lua_type(L, (n)) == LUA_TFUNCTION)
N#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
N#define lua_islightuserdata(L,n)	(lua_type(L, (n)) == LUA_TLIGHTUSERDATA)
N#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
N#define lua_isboolean(L,n)	(lua_type(L, (n)) == LUA_TBOOLEAN)
N#define lua_isthread(L,n)	(lua_type(L, (n)) == LUA_TTHREAD)
N#define lua_isnone(L,n)		(lua_type(L, (n)) == LUA_TNONE)
N#define lua_isnoneornil(L, n)	(lua_type(L, (n)) <= 0)
N
N#define lua_pushliteral(L, s)	lua_pushstring(L, "" s)
N
N#define lua_pushglobaltable(L)  \
N	((void)lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS))
X#define lua_pushglobaltable(L)  	((void)lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS))
N
N#define lua_tostring(L,i)	lua_tolstring(L, (i), NULL)
N
N
N#define lua_insert(L,idx)	lua_rotate(L, (idx), 1)
N
N#define lua_remove(L,idx)	(lua_rotate(L, (idx), -1), lua_pop(L, 1))
N
N#define lua_replace(L,idx)	(lua_copy(L, -1, (idx)), lua_pop(L, 1))
N
N/* }============================================================== */
N
N
N/*
N** {==============================================================
N** compatibility macros
N** ===============================================================
N*/
N#if defined(LUA_COMPAT_APIINTCASTS)
X#if 0L
S
S#define lua_pushunsigned(L,n)	lua_pushinteger(L, (lua_Integer)(n))
S#define lua_tounsignedx(L,i,is)	((lua_Unsigned)lua_tointegerx(L,i,is))
S#define lua_tounsigned(L,i)	lua_tounsignedx(L,(i),NULL)
S
N#endif
N
N#define lua_newuserdata(L,s)	lua_newuserdatauv(L,s,1)
N#define lua_getuservalue(L,idx)	lua_getiuservalue(L,idx,1)
N#define lua_setuservalue(L,idx)	lua_setiuservalue(L,idx,1)
N
N/* }============================================================== */
N
N/*
N** {======================================================================
N** Debug API
N** =======================================================================
N*/
N
N
N/*
N** Event codes
N*/
N#define LUA_HOOKCALL	0
N#define LUA_HOOKRET	1
N#define LUA_HOOKLINE	2
N#define LUA_HOOKCOUNT	3
N#define LUA_HOOKTAILCALL 4
N
N
N/*
N** Event masks
N*/
N#define LUA_MASKCALL	(1 << LUA_HOOKCALL)
N#define LUA_MASKRET	(1 << LUA_HOOKRET)
N#define LUA_MASKLINE	(1 << LUA_HOOKLINE)
N#define LUA_MASKCOUNT	(1 << LUA_HOOKCOUNT)
N
Ntypedef struct lua_Debug lua_Debug;  /* activation record */
N
N
N/* Functions to be called by the debugger in specific events */
Ntypedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);
N
N
NLUA_API int (lua_getstack) (lua_State *L, int level, lua_Debug *ar);
Xextern int (lua_getstack) (lua_State *L, int level, lua_Debug *ar);
NLUA_API int (lua_getinfo) (lua_State *L, const char *what, lua_Debug *ar);
Xextern int (lua_getinfo) (lua_State *L, const char *what, lua_Debug *ar);
NLUA_API const char *(lua_getlocal) (lua_State *L, const lua_Debug *ar, int n);
Xextern const char *(lua_getlocal) (lua_State *L, const lua_Debug *ar, int n);
NLUA_API const char *(lua_setlocal) (lua_State *L, const lua_Debug *ar, int n);
Xextern const char *(lua_setlocal) (lua_State *L, const lua_Debug *ar, int n);
NLUA_API const char *(lua_getupvalue) (lua_State *L, int funcindex, int n);
Xextern const char *(lua_getupvalue) (lua_State *L, int funcindex, int n);
NLUA_API const char *(lua_setupvalue) (lua_State *L, int funcindex, int n);
Xextern const char *(lua_setupvalue) (lua_State *L, int funcindex, int n);
N
NLUA_API void *(lua_upvalueid) (lua_State *L, int fidx, int n);
Xextern void *(lua_upvalueid) (lua_State *L, int fidx, int n);
NLUA_API void  (lua_upvaluejoin) (lua_State *L, int fidx1, int n1,
Xextern void  (lua_upvaluejoin) (lua_State *L, int fidx1, int n1,
N                                               int fidx2, int n2);
N
NLUA_API void (lua_sethook) (lua_State *L, lua_Hook func, int mask, int count);
Xextern void (lua_sethook) (lua_State *L, lua_Hook func, int mask, int count);
NLUA_API lua_Hook (lua_gethook) (lua_State *L);
Xextern lua_Hook (lua_gethook) (lua_State *L);
NLUA_API int (lua_gethookmask) (lua_State *L);
Xextern int (lua_gethookmask) (lua_State *L);
NLUA_API int (lua_gethookcount) (lua_State *L);
Xextern int (lua_gethookcount) (lua_State *L);
N
N
Nstruct lua_Debug {
N  int event;
N  const char *name;	/* (n) */
N  const char *namewhat;	/* (n) 'global', 'local', 'field', 'method' */
N  const char *what;	/* (S) 'Lua', 'C', 'main', 'tail' */
N  const char *source;	/* (S) */
N  int currentline;	/* (l) */
N  int linedefined;	/* (S) */
N  int lastlinedefined;	/* (S) */
N  unsigned char nups;	/* (u) number of upvalues */
N  unsigned char nparams;/* (u) number of parameters */
N  char isvararg;        /* (u) */
N  char istailcall;	/* (t) */
N  unsigned short fTransfer;/* (r) index of first value transfered */
N  unsigned short nTransfer;   /* (r) number of transfered values */
N  char short_src[LUA_IDSIZE]; /* (S) */
X  char short_src[60];  
N  /* private part */
N  struct CallInfo *i_ci;  /* active function */
N};
N
N/* }====================================================================== */
N
N
N/******************************************************************************
N* Copyright (C) 1994-2018 Lua.org, PUC-Rio.
N*
N* Permission is hereby granted, free of charge, to any person obtaining
N* a copy of this software and associated documentation files (the
N* "Software"), to deal in the Software without restriction, including
N* without limitation the rights to use, copy, modify, merge, publish,
N* distribute, sublicense, and/or sell copies of the Software, and to
N* permit persons to whom the Software is furnished to do so, subject to
N* the following conditions:
N*
N* The above copyright notice and this permission notice shall be
N* included in all copies or substantial portions of the Software.
N*
N* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
N* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
N* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
N* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
N* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
N* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
N* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
N******************************************************************************/
N
N
N#endif
L 30 "..\..\..\M6P1(L)_Lua\lua\ltable.c" 2
N
N#include "ldebug.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\ldebug.h" 1
N/*
N** $Id: ldebug.h,v 2.15 2017/06/27 11:35:31 roberto Exp roberto $
N** Auxiliary functions from Debug Interface module
N** See Copyright Notice in lua.h
N*/
N
N#ifndef ldebug_h
N#define ldebug_h
N
N
N#include "lstate.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lstate.h" 1
N/*
N** $Id: lstate.h,v 2.156 2018/02/17 19:29:29 roberto Exp roberto $
N** Global State
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lstate_h
N#define lstate_h
N
N#include "lua.h"
N
N#include "lobject.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lobject.h" 1
N/*
N** $Id: lobject.h,v 2.140 2018/02/26 13:35:03 roberto Exp roberto $
N** Type definitions for Lua objects
N** See Copyright Notice in lua.h
N*/
N
N
N#ifndef lobject_h
N#define lobject_h
N
N
N#include <stdarg.h>
N
N
N#include "llimits.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\llimits.h" 1
N/*
N** $Id: llimits.h,v 1.148 2017/12/28 11:51:00 roberto Exp roberto $
N** Limits, basic types, and some other 'installation-dependent' definitions
N** See Copyright Notice in lua.h
N*/
N
N#ifndef llimits_h
N#define llimits_h
N
N
N#include <limits.h>
N#include <stddef.h>
N
N
N#include "lua.h"
N
N/*
N** 'lu_mem' and 'l_mem' are unsigned/signed integers big enough to count
N** the total memory used by Lua (in bytes). Usually, 'size_t' and
N** 'ptrdiff_t' should work, but we use 'long' for 16-bit machines.
N*/
N#if defined(LUAI_MEM)		/* { external definitions? */
X#if 0L		 
Stypedef LUAI_UMEM lu_mem;
Stypedef LUAI_MEM l_mem;
N#elif LUAI_BITSINT >= 32	/* }{ */
X#elif 32 >= 32	 
Ntypedef size_t lu_mem;
Ntypedef ptrdiff_t l_mem;
N#else  /* 16-bit ints */	/* }{ */
Stypedef unsigned long lu_mem;
Stypedef long l_mem;
N#endif				/* } */
N
N
N/* chars used as small naturals (so that 'char' is reserved for characters) */
Ntypedef unsigned char lu_byte;
Ntypedef signed char ls_byte;
N
N
N/* maximum value for size_t */
N#define MAX_SIZET	((size_t)(~(size_t)0))
N
N/* maximum size visible for Lua (must be representable in a lua_Integer */
N#define MAX_SIZE	(sizeof(size_t) < sizeof(lua_Integer) ? MAX_SIZET \
N                          : (size_t)(LUA_MAXINTEGER))
X#define MAX_SIZE	(sizeof(size_t) < sizeof(lua_Integer) ? MAX_SIZET                           : (size_t)(LUA_MAXINTEGER))
N
N
N#define MAX_LUMEM	((lu_mem)(~(lu_mem)0))
N
N#define MAX_LMEM	((l_mem)(MAX_LUMEM >> 1))
N
N
N#define MAX_INT		INT_MAX  /* maximum value of an int */
N
N
N/*
N** floor of the log2 of the maximum signed value for integral type 't'.
N** (That is, maximum 'n' such that '2^n' fits in the given signed type.)
N*/
N#define log2maxs(t)	(sizeof(t) * 8 - 2)
N
N
N/*
N** conversion of pointer to unsigned integer:
N** this is for hashing only; there is no problem if the integer
N** cannot hold the whole pointer value
N*/
N#define point2uint(p)	((unsigned int)((size_t)(p) & UINT_MAX))
N
N
N
N/* types of 'usual argument conversions' for lua_Number and lua_Integer */
Ntypedef LUAI_UACNUMBER l_uacNumber;
Xtypedef double l_uacNumber;
Ntypedef LUAI_UACINT l_uacInt;
Xtypedef long long l_uacInt;
N
N
N/* internal assertions for in-house debugging */
N#if defined(lua_assert)
X#if 0L
S#define check_exp(c,e)		(lua_assert(c), (e))
S/* to avoid problems with conditions too long */
S#define lua_longassert(c)	((c) ? (void)0 : lua_assert(0))
N#else
N#define lua_assert(c)		((void)0)
N#define check_exp(c,e)		(e)
N#define lua_longassert(c)	((void)0)
N#endif
N
N/*
N** assertion for checking API calls
N*/
N#if !defined(luai_apicheck)
X#if !0L
N#define luai_apicheck(l,e)	lua_assert(e)
N#endif
N
N#define api_check(l,e,msg)	luai_apicheck(l,(e) && msg)
N
N
N/* macro to avoid warnings about unused variables */
N#if !defined(UNUSED)
X#if !0L
N#define UNUSED(x)	((void)(x))
N#endif
N
N
N/* type casts (a macro highlights casts in the code) */
N#define cast(t, exp)	((t)(exp))
N
N#define cast_void(i)	cast(void, (i))
N#define cast_voidp(i)	cast(void *, (i))
N#define cast_num(i)	cast(lua_Number, (i))
N#define cast_int(i)	cast(int, (i))
N#define cast_uint(i)	cast(unsigned int, (i))
N#define cast_byte(i)	cast(lu_byte, (i))
N#define cast_uchar(i)	cast(unsigned char, (i))
N#define cast_char(i)	cast(char, (i))
N#define cast_charp(i)	cast(char *, (i))
N#define cast_sizet(i)	cast(size_t, (i))
N
N
N/* cast a signed lua_Integer to lua_Unsigned */
N#if !defined(l_castS2U)
X#if !0L
N#define l_castS2U(i)	((lua_Unsigned)(i))
N#endif
N
N/*
N** cast a lua_Unsigned to a signed lua_Integer; this cast is
N** not strict ISO C, but two-complement architectures should
N** work fine.
N*/
N#if !defined(l_castU2S)
X#if !0L
N#define l_castU2S(i)	((lua_Integer)(i))
N#endif
N
N
N/*
N** non-return type
N*/
N#if defined(__GNUC__)
X#if 0L
S#define l_noret		void __attribute__((noreturn))
S#elif defined(_MSC_VER) && _MSC_VER >= 1200
X#elif 0L && _MSC_VER >= 1200
S#define l_noret		void __declspec(noreturn)
N#else
N#define l_noret		void
N#endif
N
N
N
N/*
N** maximum depth for nested C calls and syntactical nested non-terminals
N** in a program. (Value must fit in an unsigned short int. It must also
N** be compatible with the size of the C stack.)
N*/
N#if !defined(LUAI_MAXCCALLS)
X#if !0L
N#define LUAI_MAXCCALLS		2200
N#endif
N
N
N
N/*
N** type for virtual-machine instructions;
N** must be an unsigned with (at least) 4 bytes (see details in lopcodes.h)
N*/
N#if LUAI_BITSINT >= 32
X#if 32 >= 32
Ntypedef unsigned int Instruction;
N#else
Stypedef unsigned long Instruction;
N#endif
N
N
N
N/*
N** Maximum length for short strings, that is, strings that are
N** internalized. (Cannot be smaller than reserved words or tags for
N** metamethods, as these strings must be internalized;
N** #("function") = 8, #("__newindex") = 10.)
N*/
N#if !defined(LUAI_MAXSHORTLEN)
X#if !0L
N#define LUAI_MAXSHORTLEN	40
N#endif
N
N
N/*
N** Initial size for the string table (must be power of 2).
N** The Lua core alone registers ~50 strings (reserved words +
N** metaevent keys + a few others). Libraries would typically add
N** a few dozens more.
N*/
N#if !defined(MINSTRTABSIZE)
X#if !0L
N#define MINSTRTABSIZE	128
N#endif
N
N
N/*
N** Size of cache for strings in the API. 'N' is the number of
N** sets (better be a prime) and "M" is the size of each set (M == 1
N** makes a direct cache.)
N*/
N#if !defined(STRCACHE_N)
X#if !0L
N#define STRCACHE_N		53
N#define STRCACHE_M		2
N#endif
N
N
N/* minimum size for string buffer */
N#if !defined(LUA_MINBUFFER)
X#if !0L
N#define LUA_MINBUFFER	32
N#endif
N
N
N/*
N** macros that are executed whenever program enters the Lua core
N** ('lua_lock') and leaves the core ('lua_unlock')
N*/
N#if !defined(lua_lock)
X#if !0L
N#define lua_lock(L)	((void) 0)
N#define lua_unlock(L)	((void) 0)
N#endif
N
N/*
N** macro executed during Lua functions at points where the
N** function can yield.
N*/
N#if !defined(luai_threadyield)
X#if !0L
N#define luai_threadyield(L)	{lua_unlock(L); lua_lock(L);}
N#endif
N
N
N/*
N** these macros allow user-specific actions when a thread is
N** created/deleted/resumed/yielded.
N*/
N#if !defined(luai_userstateopen)
X#if !0L
N#define luai_userstateopen(L)		((void)L)
N#endif
N
N#if !defined(luai_userstateclose)
X#if !0L
N#define luai_userstateclose(L)		((void)L)
N#endif
N
N#if !defined(luai_userstatethread)
X#if !0L
N#define luai_userstatethread(L,L1)	((void)L)
N#endif
N
N#if !defined(luai_userstatefree)
X#if !0L
N#define luai_userstatefree(L,L1)	((void)L)
N#endif
N
N#if !defined(luai_userstateresume)
X#if !0L
N#define luai_userstateresume(L,n)	((void)L)
N#endif
N
N#if !defined(luai_userstateyield)
X#if !0L
N#define luai_userstateyield(L,n)	((void)L)
N#endif
N
N
N
N/*
N** The luai_num* macros define the primitive operations over numbers.
N*/
N
N/* floor division (defined as 'floor(a/b)') */
N#if !defined(luai_numidiv)
X#if !0L
N#define luai_numidiv(L,a,b)     ((void)L, l_floor(luai_numdiv(L,a,b)))
N#endif
N
N/* float division */
N#if !defined(luai_numdiv)
X#if !0L
N#define luai_numdiv(L,a,b)      ((a)/(b))
N#endif
N
N/*
N** modulo: defined as 'a - floor(a/b)*b'; this definition gives NaN when
N** 'b' is huge, but the result should be 'a'. 'fmod' gives the result of
N** 'a - trunc(a/b)*b', and therefore must be corrected when 'trunc(a/b)
N** ~= floor(a/b)'. That happens when the division has a non-integer
N** negative result, which is equivalent to the test below.
N*/
N#if !defined(luai_nummod)
X#if !0L
N#define luai_nummod(L,a,b,m)  \
N  { (m) = l_mathop(fmod)(a,b); if ((m)*(b) < 0) (m) += (b); }
X#define luai_nummod(L,a,b,m)    { (m) = l_mathop(fmod)(a,b); if ((m)*(b) < 0) (m) += (b); }
N#endif
N
N/* exponentiation */
N#if !defined(luai_numpow)
X#if !0L
N#define luai_numpow(L,a,b)      ((void)L, l_mathop(pow)(a,b))
N#endif
N
N/* the others are quite standard operations */
N#if !defined(luai_numadd)
X#if !0L
N#define luai_numadd(L,a,b)      ((a)+(b))
N#define luai_numsub(L,a,b)      ((a)-(b))
N#define luai_nummul(L,a,b)      ((a)*(b))
N#define luai_numunm(L,a)        (-(a))
N#define luai_numeq(a,b)         ((a)==(b))
N#define luai_numlt(a,b)         ((a)<(b))
N#define luai_numle(a,b)         ((a)<=(b))
N#define luai_numisnan(a)        (!luai_numeq((a), (a)))
N#endif
N
N
N
N
N
N/*
N** macro to control inclusion of some hard tests on stack reallocation
N*/
N#if !defined(HARDSTACKTESTS)
X#if !0L
N#define condmovestack(L,pre,pos)	((void)0)
N#else
S/* realloc stack keeping its size */
S#define condmovestack(L,pre,pos)  \
S  { int sz_ = (L)->stacksize; pre; luaD_reallocstack((L), sz_, 0); pos; }
X#define condmovestack(L,pre,pos)    { int sz_ = (L)->stacksize; pre; luaD_reallocstack((L), sz_, 0); pos; }
N#endif
N
N#if !defined(HARDMEMTESTS)
X#if !0L
N#define condchangemem(L,pre,pos)	((void)0)
N#else
S#define condchangemem(L,pre,pos)  \
S	{ if (G(L)->gcrunning) { pre; luaC_fullgc(L, 0); pos; } }
X#define condchangemem(L,pre,pos)  	{ if (G(L)->gcrunning) { pre; luaC_fullgc(L, 0); pos; } }
N#endif
N
N#endif
L 16 "..\..\..\M6P1(L)_Lua\lua\lobject.h" 2
N#include "lua.h"
N
N
N/*
N** Extra tags for non-values
N*/
N#define LUA_TUPVAL	LUA_NUMTAGS  /* upvalues */
N#define LUA_TPROTO	(LUA_NUMTAGS+1)  /* function prototypes */
N
N/*
N** number of all possible tags (including LUA_TNONE)
N*/
N#define LUA_TOTALTAGS	(LUA_TPROTO + 2)
N
N
N/*
N** tags for Tagged Values have the following use of bits:
N** bits 0-3: actual tag (a LUA_T* value)
N** bits 4-5: variant bits
N** bit 6: whether value is collectable
N*/
N
N
N
N/*
N** Union of all Lua values
N*/
Ntypedef union Value {
N  struct GCObject *gc;    /* collectable objects */
N  void *p;         /* light userdata */
N  int b;           /* booleans */
N  lua_CFunction f; /* light C functions */
N  lua_Integer i;   /* integer numbers */
N  lua_Number n;    /* float numbers */
N} Value;
N
N
N/*
N** Tagged Values. This is the basic representation of values in Lua:
N** an actual value plus a tag with its type.
N*/
N
N#define TValuefields	Value value_; lu_byte tt_
N
Ntypedef struct TValue {
N  TValuefields;
X  Value value_; lu_byte tt_;
N} TValue;
N
N
N#define val_(o)		((o)->value_)
N#define valraw(o)	(&val_(o))
N
N
N/* raw type tag of a TValue */
N#define rawtt(o)	((o)->tt_)
N
N/* tag with no variants (bits 0-3) */
N#define novariant(t)	((t) & 0x0F)
N
N/* type tag of a TValue (bits 0-3 for tags + variant bits 4-5) */
N#define withvariant(t)	((t) & 0x3F)
N#define ttypetag(o)	withvariant(rawtt(o))
N
N/* type of a TValue */
N#define ttype(o)	(novariant(rawtt(o)))
N
N
N/* Macros to test type */
N#define checktag(o,t)		(rawtt(o) == (t))
N#define checktype(o,t)		(ttype(o) == (t))
N
N
N/* Macros for internal tests */
N#define righttt(obj)		(ttypetag(obj) == gcvalue(obj)->tt)
N
N#define checkliveness(L,obj) \
N	lua_longassert(!iscollectable(obj) || \
N		(righttt(obj) && (L == NULL || !isdead(G(L),gcvalue(obj)))))
X#define checkliveness(L,obj) 	lua_longassert(!iscollectable(obj) || 		(righttt(obj) && (L == NULL || !isdead(G(L),gcvalue(obj)))))
N
N
N/* Macros to set values */
N#define settt_(o,t)	((o)->tt_=(t))
N
N
N#define setobj(L,obj1,obj2) \
N	{ TValue *io1=(obj1); const TValue *io2=(obj2); \
N          io1->value_ = io2->value_; io1->tt_ = io2->tt_; \
N	  (void)L; checkliveness(L,io1); lua_assert(!isreallyempty(io1)); }
X#define setobj(L,obj1,obj2) 	{ TValue *io1=(obj1); const TValue *io2=(obj2);           io1->value_ = io2->value_; io1->tt_ = io2->tt_; 	  (void)L; checkliveness(L,io1); lua_assert(!isreallyempty(io1)); }
N
N/*
N** different types of assignments, according to destination
N*/
N
N/* from stack to stack */
N#define setobjs2s(L,o1,o2)	setobj(L,s2v(o1),s2v(o2))
N/* to stack (not from same stack) */
N#define setobj2s(L,o1,o2)	setobj(L,s2v(o1),o2)
N/* from table to same table */
N#define setobjt2t	setobj
N/* to new object */
N#define setobj2n	setobj
N/* to table */
N#define setobj2t	setobj
N
N
N
Ntypedef union StackValue {
N  TValue val;
N} StackValue;
N
N
Ntypedef StackValue *StkId;  /* index to stack elements */
N
N/* convert a 'StackValue' to a 'TValue' */
N#define s2v(o)	(&(o)->val)
N
N
N
N/*
N** {==================================================================
N** Nil
N** ===================================================================
N*/
N
N#define ttisnil(o)		checktag((o), LUA_TNIL)
N
N/* macro defining a nil value */
N#define NILCONSTANT	{NULL}, LUA_TNIL
N
N#define setnilvalue(obj) settt_(obj, LUA_TNIL)
N
N
N/* (address of) a fixed nil value */
N#define luaO_nilobject		(&luaO_nilobject_)
N
N
N/*
N** Variant tag, used only in tables to signal an empty slot
N** (which might be different from a slot containing nil)
N*/
N#define LUA_TEMPTY	(LUA_TNIL | (1 << 4))
N
N#define ttisnilorempty(v)	checktype((v), LUA_TNIL)
N
N#define isreallyempty(v)	checktag((v), LUA_TEMPTY)
N
N
N#if defined(LUA_NILINTABLE)
X#if 0L
S
S#define isempty(v)		isreallyempty(v)
S
N#else /* By default, entries with any kind of nil are considered empty */
N
N#define isempty(v)		ttisnilorempty(v)
N
N#endif
N
N/* macro defining an empty value */
N#define EMPTYCONSTANT	{NULL}, LUA_TEMPTY
N
N
N/* mark an entry as empty */
N#define setempty(v)		settt_(v, LUA_TEMPTY)
N
N
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Booleans
N** ===================================================================
N*/
N
N#define ttisboolean(o)		checktag((o), LUA_TBOOLEAN)
N
N#define bvalue(o)	check_exp(ttisboolean(o), val_(o).b)
N
N#define bvalueraw(v)	((v).b)
N
N#define l_isfalse(o)	(ttisnil(o) || (ttisboolean(o) && bvalue(o) == 0))
N
N#define setbvalue(obj,x) \
N  { TValue *io=(obj); val_(io).b=(x); settt_(io, LUA_TBOOLEAN); }
X#define setbvalue(obj,x)   { TValue *io=(obj); val_(io).b=(x); settt_(io, LUA_TBOOLEAN); }
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Threads
N** ===================================================================
N*/
N
N#define ttisthread(o)		checktag((o), ctb(LUA_TTHREAD))
N
N#define thvalue(o)	check_exp(ttisthread(o), gco2th(val_(o).gc))
N
N#define setthvalue(L,obj,x) \
N  { TValue *io = (obj); lua_State *x_ = (x); \
N    val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TTHREAD)); \
N    checkliveness(L,io); }
X#define setthvalue(L,obj,x)   { TValue *io = (obj); lua_State *x_ = (x);     val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TTHREAD));     checkliveness(L,io); }
N
N#define setthvalue2s(L,o,t)	setthvalue(L,s2v(o),t)
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Collectable Objects
N** ===================================================================
N*/
N
N/*
N** Common Header for all collectable objects (in macro form, to be
N** included in other objects)
N*/
N#define CommonHeader	struct GCObject *next; lu_byte tt; lu_byte marked
N
N
N/* Common type for all collectable objects */
Ntypedef struct GCObject {
N  CommonHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked;
N} GCObject;
N
N
N/* Bit mark for collectable types */
N#define BIT_ISCOLLECTABLE	(1 << 6)
N
N#define iscollectable(o)	(rawtt(o) & BIT_ISCOLLECTABLE)
N
N/* mark a tag as collectable */
N#define ctb(t)			((t) | BIT_ISCOLLECTABLE)
N
N#define gcvalue(o)	check_exp(iscollectable(o), val_(o).gc)
N
N#define gcvalueraw(v)	((v).gc)
N
N#define setgcovalue(L,obj,x) \
N  { TValue *io = (obj); GCObject *i_g=(x); \
N    val_(io).gc = i_g; settt_(io, ctb(i_g->tt)); }
X#define setgcovalue(L,obj,x)   { TValue *io = (obj); GCObject *i_g=(x);     val_(io).gc = i_g; settt_(io, ctb(i_g->tt)); }
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Numbers
N** ===================================================================
N*/
N
N/* Variant tags for numbers */
N#define LUA_TNUMFLT	(LUA_TNUMBER | (1 << 4))  /* float numbers */
N#define LUA_TNUMINT	(LUA_TNUMBER | (2 << 4))  /* integer numbers */
N
N#define ttisnumber(o)		checktype((o), LUA_TNUMBER)
N#define ttisfloat(o)		checktag((o), LUA_TNUMFLT)
N#define ttisinteger(o)		checktag((o), LUA_TNUMINT)
N
N#define nvalue(o)	check_exp(ttisnumber(o), \
N	(ttisinteger(o) ? cast_num(ivalue(o)) : fltvalue(o)))
X#define nvalue(o)	check_exp(ttisnumber(o), 	(ttisinteger(o) ? cast_num(ivalue(o)) : fltvalue(o)))
N#define fltvalue(o)	check_exp(ttisfloat(o), val_(o).n)
N#define ivalue(o)	check_exp(ttisinteger(o), val_(o).i)
N
N#define fltvalueraw(v)	((v).n)
N#define ivalueraw(v)	((v).i)
N
N#define setfltvalue(obj,x) \
N  { TValue *io=(obj); val_(io).n=(x); settt_(io, LUA_TNUMFLT); }
X#define setfltvalue(obj,x)   { TValue *io=(obj); val_(io).n=(x); settt_(io, LUA_TNUMFLT); }
N
N#define chgfltvalue(obj,x) \
N  { TValue *io=(obj); lua_assert(ttisfloat(io)); val_(io).n=(x); }
X#define chgfltvalue(obj,x)   { TValue *io=(obj); lua_assert(ttisfloat(io)); val_(io).n=(x); }
N
N#define setivalue(obj,x) \
N  { TValue *io=(obj); val_(io).i=(x); settt_(io, LUA_TNUMINT); }
X#define setivalue(obj,x)   { TValue *io=(obj); val_(io).i=(x); settt_(io, LUA_TNUMINT); }
N
N#define chgivalue(obj,x) \
N  { TValue *io=(obj); lua_assert(ttisinteger(io)); val_(io).i=(x); }
X#define chgivalue(obj,x)   { TValue *io=(obj); lua_assert(ttisinteger(io)); val_(io).i=(x); }
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Strings
N** ===================================================================
N*/
N
N/* Variant tags for strings */
N#define LUA_TSHRSTR	(LUA_TSTRING | (1 << 4))  /* short strings */
N#define LUA_TLNGSTR	(LUA_TSTRING | (2 << 4))  /* long strings */
N
N#define ttisstring(o)		checktype((o), LUA_TSTRING)
N#define ttisshrstring(o)	checktag((o), ctb(LUA_TSHRSTR))
N#define ttislngstring(o)	checktag((o), ctb(LUA_TLNGSTR))
N
N#define tsvalueraw(v)	(gco2ts((v).gc))
N
N#define tsvalue(o)	check_exp(ttisstring(o), gco2ts(val_(o).gc))
N
N#define setsvalue(L,obj,x) \
N  { TValue *io = (obj); TString *x_ = (x); \
N    val_(io).gc = obj2gco(x_); settt_(io, ctb(x_->tt)); \
N    checkliveness(L,io); }
X#define setsvalue(L,obj,x)   { TValue *io = (obj); TString *x_ = (x);     val_(io).gc = obj2gco(x_); settt_(io, ctb(x_->tt));     checkliveness(L,io); }
N
N/* set a string to the stack */
N#define setsvalue2s(L,o,s)	setsvalue(L,s2v(o),s)
N
N/* set a string to a new object */
N#define setsvalue2n	setsvalue
N
N
N/*
N** Header for string value; string bytes follow the end of this structure
N** (aligned according to 'UTString'; see next).
N*/
Ntypedef struct TString {
N  CommonHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked;
N  lu_byte extra;  /* reserved words for short strings; "has hash" for longs */
N  lu_byte shrlen;  /* length for short strings */
N  unsigned int hash;
N  union {
N    size_t lnglen;  /* length for long strings */
N    struct TString *hnext;  /* linked list for hash table */
N  } u;
N} TString;
N
N
N/*
N** Ensures that address after this type is always fully aligned.
N*/
Ntypedef union UTString {
N  LUAI_MAXALIGN;  /* ensures maximum alignment for strings */
X  lua_Number n; double u; void *s; lua_Integer i; long l;   
N  TString tsv;
N} UTString;
N
N
N/*
N** Get the actual string (array of bytes) from a 'TString'.
N** (Access to 'extra' ensures that value is really a 'TString'.)
N*/
N#define getstr(ts)  \
N  check_exp(sizeof((ts)->extra), cast_charp((ts)) + sizeof(UTString))
X#define getstr(ts)    check_exp(sizeof((ts)->extra), cast_charp((ts)) + sizeof(UTString))
N
N
N/* get the actual string (array of bytes) from a Lua value */
N#define svalue(o)       getstr(tsvalue(o))
N
N/* get string length from 'TString *s' */
N#define tsslen(s)	((s)->tt == LUA_TSHRSTR ? (s)->shrlen : (s)->u.lnglen)
N
N/* get string length from 'TValue *o' */
N#define vslen(o)	tsslen(tsvalue(o))
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Userdata
N** ===================================================================
N*/
N
N#define ttislightuserdata(o)	checktag((o), LUA_TLIGHTUSERDATA)
N#define ttisfulluserdata(o)	checktype((o), LUA_TUSERDATA)
N
N#define pvalue(o)	check_exp(ttislightuserdata(o), val_(o).p)
N#define uvalue(o)	check_exp(ttisfulluserdata(o), gco2u(val_(o).gc))
N
N#define pvalueraw(v)	((v).p)
N
N#define setpvalue(obj,x) \
N  { TValue *io=(obj); val_(io).p=(x); settt_(io, LUA_TLIGHTUSERDATA); }
X#define setpvalue(obj,x)   { TValue *io=(obj); val_(io).p=(x); settt_(io, LUA_TLIGHTUSERDATA); }
N
N#define setuvalue(L,obj,x) \
N  { TValue *io = (obj); Udata *x_ = (x); \
N    val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TUSERDATA)); \
N    checkliveness(L,io); }
X#define setuvalue(L,obj,x)   { TValue *io = (obj); Udata *x_ = (x);     val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TUSERDATA));     checkliveness(L,io); }
N
N
N/* Ensures that addresses after this type are always fully aligned. */
Ntypedef union UValue {
N  TValue uv;
N  LUAI_MAXALIGN;  /* ensures maximum alignment for udata bytes */
X  lua_Number n; double u; void *s; lua_Integer i; long l;   
N} UValue;
N
N
N/*
N** Header for userdata with user values;
N** memory area follows the end of this structure.
N*/
Ntypedef struct Udata {
N  CommonHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked;
N  unsigned short nuvalue;  /* number of user values */
N  size_t len;  /* number of bytes */
N  struct Table *metatable;
N  GCObject *gclist;
N  UValue uv[1];  /* user values */
N} Udata;
N
N
N/*
N** Header for userdata with no user values. These userdata do not need
N** to be gray during GC, and therefore do not need a 'gclist' field.
N** To simplify, the code always use 'Udata' for both kinds of userdata,
N** making sure it never accesses 'gclist' on userdata with no user values.
N** This structure here is used only to compute the correct size for
N** this representation. (The 'bindata' field in its end ensures correct
N** alignment for binary data following this header.)
N*/
Ntypedef struct Udata0 {
N  CommonHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked;
N  unsigned short nuvalue;  /* number of user values */
N  size_t len;  /* number of bytes */
N  struct Table *metatable;
N  union {LUAI_MAXALIGN;} bindata;
X  union {lua_Number n; double u; void *s; lua_Integer i; long l;} bindata;
N} Udata0;
N
N
N/* compute the offset of the memory area of a userdata */
N#define udatamemoffset(nuv) \
N	((nuv) == 0 ? offsetof(Udata0, bindata)  \
N                    : offsetof(Udata, uv) + (sizeof(UValue) * (nuv)))
X#define udatamemoffset(nuv) 	((nuv) == 0 ? offsetof(Udata0, bindata)                      : offsetof(Udata, uv) + (sizeof(UValue) * (nuv)))
N
N/* get the address of the memory block inside 'Udata' */
N#define getudatamem(u)	(cast_charp(u) + udatamemoffset((u)->nuvalue))
N
N/* compute the size of a userdata */
N#define sizeudata(nuv,nb)	(udatamemoffset(nuv) + (nb))
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Prototypes
N** ===================================================================
N*/
N
N/*
N** Description of an upvalue for function prototypes
N*/
Ntypedef struct Upvaldesc {
N  TString *name;  /* upvalue name (for debug information) */
N  lu_byte instack;  /* whether it is in stack (register) */
N  lu_byte idx;  /* index of upvalue (in stack or in outer function's list) */
N} Upvaldesc;
N
N
N/*
N** Description of a local variable for function prototypes
N** (used for debug information)
N*/
Ntypedef struct LocVar {
N  TString *varname;
N  int startpc;  /* first point where variable is active */
N  int endpc;    /* first point where variable is dead */
N} LocVar;
N
N
N/*
N** Associates the absolute line source for a given instruction ('pc').
N** The array 'lineinfo' gives, for each instruction, the difference in
N** lines from the previous instruction. When that difference does not
N** fit into a byte, Lua saves the absolute line for that instruction.
N** (Lua also saves the absolute line periodically, to speed up the
N** computation of a line number: we can use binary search in the
N** absolute-line array, but we must traverse the 'lineinfo' array
N** linearly to compute a line.)
N*/
Ntypedef struct AbsLineInfo {
N  int pc;
N  int line;
N} AbsLineInfo;
N
N/*
N** Function Prototypes
N*/
Ntypedef struct Proto {
N  CommonHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked;
N  lu_byte numparams;  /* number of fixed (named) parameters */
N  lu_byte is_vararg;
N  lu_byte maxstacksize;  /* number of registers needed by this function */
N  lu_byte cachemiss;  /* count for successive misses for 'cache' field */
N  int sizeupvalues;  /* size of 'upvalues' */
N  int sizek;  /* size of 'k' */
N  int sizecode;
N  int sizelineinfo;
N  int sizep;  /* size of 'p' */
N  int sizelocvars;
N  int sizeabslineinfo;  /* size of 'abslineinfo' */
N  int linedefined;  /* debug information  */
N  int lastlinedefined;  /* debug information  */
N  TValue *k;  /* constants used by the function */
N  struct LClosure *cache;  /* last-created closure with this prototype */
N  Instruction *code;  /* opcodes */
N  struct Proto **p;  /* functions defined inside the function */
N  Upvaldesc *upvalues;  /* upvalue information */
N  ls_byte *lineinfo;  /* information about source lines (debug information) */
N  AbsLineInfo *abslineinfo;  /* idem */
N  LocVar *locvars;  /* information about local variables (debug information) */
N  TString  *source;  /* used for debug information */
N  GCObject *gclist;
N} Proto;
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Closures
N** ===================================================================
N*/
N
N/* Variant tags for functions */
N#define LUA_TLCL	(LUA_TFUNCTION | (1 << 4))  /* Lua closure */
N#define LUA_TLCF	(LUA_TFUNCTION | (2 << 4))  /* light C function */
N#define LUA_TCCL	(LUA_TFUNCTION | (3 << 4))  /* C closure */
N
N#define ttisfunction(o)		checktype(o, LUA_TFUNCTION)
N#define ttisclosure(o)		((rawtt(o) & 0x1F) == LUA_TLCL)
N#define ttisLclosure(o)		checktag((o), ctb(LUA_TLCL))
N#define ttislcf(o)		checktag((o), LUA_TLCF)
N#define ttisCclosure(o)		checktag((o), ctb(LUA_TCCL))
N
N#define isLfunction(o)	ttisLclosure(o)
N
N#define clvalue(o)	check_exp(ttisclosure(o), gco2cl(val_(o).gc))
N#define clLvalue(o)	check_exp(ttisLclosure(o), gco2lcl(val_(o).gc))
N#define fvalue(o)	check_exp(ttislcf(o), val_(o).f)
N#define clCvalue(o)	check_exp(ttisCclosure(o), gco2ccl(val_(o).gc))
N
N#define fvalueraw(v)	((v).f)
N
N#define setclLvalue(L,obj,x) \
N  { TValue *io = (obj); LClosure *x_ = (x); \
N    val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TLCL)); \
N    checkliveness(L,io); }
X#define setclLvalue(L,obj,x)   { TValue *io = (obj); LClosure *x_ = (x);     val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TLCL));     checkliveness(L,io); }
N
N#define setclLvalue2s(L,o,cl)	setclLvalue(L,s2v(o),cl)
N
N#define setfvalue(obj,x) \
N  { TValue *io=(obj); val_(io).f=(x); settt_(io, LUA_TLCF); }
X#define setfvalue(obj,x)   { TValue *io=(obj); val_(io).f=(x); settt_(io, LUA_TLCF); }
N
N#define setclCvalue(L,obj,x) \
N  { TValue *io = (obj); CClosure *x_ = (x); \
N    val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TCCL)); \
N    checkliveness(L,io); }
X#define setclCvalue(L,obj,x)   { TValue *io = (obj); CClosure *x_ = (x);     val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TCCL));     checkliveness(L,io); }
N
N
N/*
N** Upvalues for Lua closures
N*/
Ntypedef struct UpVal {
N  CommonHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked;
N  TValue *v;  /* points to stack or to its own value */
N  union {
N    struct {  /* (when open) */
N      struct UpVal *next;  /* linked list */
N      struct UpVal **previous;
N    } open;
N    TValue value;  /* the value (when closed) */
N  } u;
N} UpVal;
N
N
N#define ClosureHeader \
N	CommonHeader; lu_byte nupvalues; GCObject *gclist
X#define ClosureHeader 	CommonHeader; lu_byte nupvalues; GCObject *gclist
N
Ntypedef struct CClosure {
N  ClosureHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked; lu_byte nupvalues; GCObject *gclist;
N  lua_CFunction f;
N  TValue upvalue[1];  /* list of upvalues */
N} CClosure;
N
N
Ntypedef struct LClosure {
N  ClosureHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked; lu_byte nupvalues; GCObject *gclist;
N  struct Proto *p;
N  UpVal *upvals[1];  /* list of upvalues */
N} LClosure;
N
N
Ntypedef union Closure {
N  CClosure c;
N  LClosure l;
N} Closure;
N
N
N#define getproto(o)	(clLvalue(o)->p)
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Tables
N** ===================================================================
N*/
N
N#define ttistable(o)		checktag((o), ctb(LUA_TTABLE))
N
N#define hvalue(o)	check_exp(ttistable(o), gco2t(val_(o).gc))
N
N#define sethvalue(L,obj,x) \
N  { TValue *io = (obj); Table *x_ = (x); \
N    val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TTABLE)); \
N    checkliveness(L,io); }
X#define sethvalue(L,obj,x)   { TValue *io = (obj); Table *x_ = (x);     val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TTABLE));     checkliveness(L,io); }
N
N#define sethvalue2s(L,o,h)	sethvalue(L,s2v(o),h)
N
N
N/*
N** Nodes for Hash tables: A pack of two TValue's (key-value pairs)
N** plus a 'next' field to link colliding entries. The distribution
N** of the key's fields ('key_tt' and 'key_val') not forming a proper
N** 'TValue' allows for a smaller size for 'Node' both in 4-byte
N** and 8-byte alignments.
N*/
Ntypedef union Node {
N  struct NodeKey {
N    TValuefields;  /* fields for value */
X    Value value_; lu_byte tt_;   
N    lu_byte key_tt;  /* key type */
N    int next;  /* for chaining */
N    Value key_val;  /* key value */
N  } u;
N  TValue i_val;  /* direct access to node's value as a proper 'TValue' */
N} Node;
N
N
N/* copy a value into a key */
N#define setnodekey(L,node,obj) \
N	{ Node *n_=(node); const TValue *io_=(obj); \
N	  n_->u.key_val = io_->value_; n_->u.key_tt = io_->tt_; \
N	  (void)L; checkliveness(L,io_); }
X#define setnodekey(L,node,obj) 	{ Node *n_=(node); const TValue *io_=(obj); 	  n_->u.key_val = io_->value_; n_->u.key_tt = io_->tt_; 	  (void)L; checkliveness(L,io_); }
N
N
N/* copy a value from a key */
N#define getnodekey(L,obj,node) \
N	{ TValue *io_=(obj); const Node *n_=(node); \
N	  io_->value_ = n_->u.key_val; io_->tt_ = n_->u.key_tt; \
N	  (void)L; checkliveness(L,io_); }
X#define getnodekey(L,obj,node) 	{ TValue *io_=(obj); const Node *n_=(node); 	  io_->value_ = n_->u.key_val; io_->tt_ = n_->u.key_tt; 	  (void)L; checkliveness(L,io_); }
N
N
Ntypedef struct Table {
N  CommonHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked;
N  lu_byte flags;  /* 1<<p means tagmethod(p) is not present */
N  lu_byte lsizenode;  /* log2 of size of 'node' array */
N  unsigned int sizearray;  /* size of 'array' array */
N  TValue *array;  /* array part */
N  Node *node;
N  Node *lastfree;  /* any free position is before this position */
N  struct Table *metatable;
N  GCObject *gclist;
N} Table;
N
N
N/*
N** Macros to manipulate keys inserted in nodes
N*/
N#define keytt(node)		((node)->u.key_tt)
N#define keyval(node)		((node)->u.key_val)
N
N#define keyisnil(node)		(keytt(node) == LUA_TNIL)
N#define keyisinteger(node)	(keytt(node) == LUA_TNUMINT)
N#define keyival(node)		(keyval(node).i)
N#define keyisshrstr(node)	(keytt(node) == ctb(LUA_TSHRSTR))
N#define keystrval(node)		(gco2ts(keyval(node).gc))
N
N#define setnilkey(node)		(keytt(node) = LUA_TNIL)
N
N#define keyiscollectable(n)	(keytt(n) & BIT_ISCOLLECTABLE)
N
N#define gckey(n)	(keyval(n).gc)
N#define gckeyN(n)	(keyiscollectable(n) ? gckey(n) : NULL)
N
N
N/*
N** Use a "nil table" to mark dead keys in a table. Those keys serve
N** to keep space for removed entries, which may still be part of
N** chains. Note that the 'keytt' does not have the BIT_ISCOLLECTABLE
N** set, so these values are considered not collectable and are different
N** from any valid value.
N*/
N#define setdeadkey(n)	(keytt(n) = LUA_TTABLE, gckey(n) = NULL)
N
N/* }================================================================== */
N
N
N
N/*
N** 'module' operation for hashing (size is always a power of 2)
N*/
N#define lmod(s,size) \
N	(check_exp((size&(size-1))==0, (cast_int((s) & ((size)-1)))))
X#define lmod(s,size) 	(check_exp((size&(size-1))==0, (cast_int((s) & ((size)-1)))))
N
N
N#define twoto(x)	(1<<(x))
N#define sizenode(t)	(twoto((t)->lsizenode))
N
N
NLUAI_DDEC const TValue luaO_nilobject_;
Xextern const TValue luaO_nilobject_;
N
N/* size of buffer for 'luaO_utf8esc' function */
N#define UTF8BUFFSZ	8
N
NLUAI_FUNC int luaO_int2fb (unsigned int x);
Xextern int luaO_int2fb (unsigned int x);
NLUAI_FUNC int luaO_fb2int (int x);
Xextern int luaO_fb2int (int x);
NLUAI_FUNC int luaO_utf8esc (char *buff, unsigned long x);
Xextern int luaO_utf8esc (char *buff, unsigned long x);
NLUAI_FUNC int luaO_ceillog2 (unsigned int x);
Xextern int luaO_ceillog2 (unsigned int x);
NLUAI_FUNC int luaO_rawarith (lua_State *L, int op, const TValue *p1,
Xextern int luaO_rawarith (lua_State *L, int op, const TValue *p1,
N                             const TValue *p2, TValue *res);
NLUAI_FUNC void luaO_arith (lua_State *L, int op, const TValue *p1,
Xextern void luaO_arith (lua_State *L, int op, const TValue *p1,
N                           const TValue *p2, StkId res);
NLUAI_FUNC size_t luaO_str2num (const char *s, TValue *o);
Xextern size_t luaO_str2num (const char *s, TValue *o);
NLUAI_FUNC int luaO_hexavalue (int c);
Xextern int luaO_hexavalue (int c);
NLUAI_FUNC void luaO_tostring (lua_State *L, TValue *obj);
Xextern void luaO_tostring (lua_State *L, TValue *obj);
NLUAI_FUNC const char *luaO_pushvfstring (lua_State *L, const char *fmt,
Xextern const char *luaO_pushvfstring (lua_State *L, const char *fmt,
N                                                       va_list argp);
NLUAI_FUNC const char *luaO_pushfstring (lua_State *L, const char *fmt, ...);
Xextern const char *luaO_pushfstring (lua_State *L, const char *fmt, ...);
NLUAI_FUNC void luaO_chunkid (char *out, const char *source, size_t len);
Xextern void luaO_chunkid (char *out, const char *source, size_t len);
N
N
N#endif
N
L 13 "..\..\..\M6P1(L)_Lua\lua\lstate.h" 2
N#include "ltm.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\ltm.h" 1
N/*
N** $Id: ltm.h,v 2.33 2018/02/23 13:13:31 roberto Exp roberto $
N** Tag methods
N** See Copyright Notice in lua.h
N*/
N
N#ifndef ltm_h
N#define ltm_h
N
N
N#include "lobject.h"
N#include "lstate.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lstate.h" 1
N/*
N** $Id: lstate.h,v 2.156 2018/02/17 19:29:29 roberto Exp roberto $
N** Global State
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lstate_h
S#define lstate_h
S
S#include "lua.h"
S
S#include "lobject.h"
S#include "ltm.h"
S#include "lzio.h"
S
S
S/*
S
S** Some notes about garbage-collected objects: All objects in Lua must
S** be kept somehow accessible until being freed, so all objects always
S** belong to one (and only one) of these lists, using field 'next' of
S** the 'CommonHeader' for the link:
S**
S** 'allgc': all objects not marked for finalization;
S** 'finobj': all objects marked for finalization;
S** 'tobefnz': all objects ready to be finalized;
S** 'fixedgc': all objects that are not to be collected (currently
S** only small strings, such as reserved words).
S**
S** Moreover, there is another set of lists that control gray objects.
S** These lists are linked by fields 'gclist'. (All objects that
S** can become gray have such a field. The field is not the same
S** in all objects, but it always has this name.)  Any gray object
S** must belong to one of these lists, and all objects in these lists
S** must be gray:
S**
S** 'gray': regular gray objects, still waiting to be visited.
S** 'grayagain': objects that must be revisited at the atomic phase.
S**   That includes
S**   - black objects got in a write barrier;
S**   - all kinds of weak tables during propagation phase;
S**   - all threads.
S** 'weak': tables with weak values to be cleared;
S** 'ephemeron': ephemeron tables with white->white entries;
S** 'allweak': tables with weak keys and/or weak values to be cleared.
S** There is also a list 'protogray' for prototypes that need to have
S** their caches cleared.
S
S*/
S
S
Sstruct lua_longjmp;  /* defined in ldo.c */
S
S
S/*
S** Atomic type (relative to signals) to better ensure that 'lua_sethook'
S** is thread safe
S*/
S#if !defined(l_signalT)
S#include <signal.h>
S#define l_signalT	sig_atomic_t
S#endif
S
S
S/* extra stack space to handle TM calls and some other extras */
S#define EXTRA_STACK   5
S
S
S#define BASIC_STACK_SIZE        (2*LUA_MINSTACK)
S
S
S/* kinds of Garbage Collection */
S#define KGC_INC		0	/* incremental gc */
S#define KGC_GEN		1	/* generational gc */
S
S
Stypedef struct stringtable {
S  TString **hash;
S  int nuse;  /* number of elements */
S  int size;
S} stringtable;
S
S
S/*
S** Information about a call.
S*/
Stypedef struct CallInfo {
S  StkId func;  /* function index in the stack */
S  StkId	top;  /* top for this function */
S  struct CallInfo *previous, *next;  /* dynamic call link */
S  union {
S    struct {  /* only for Lua functions */
S      const Instruction *savedpc;
S      l_signalT trap;
S      int nextraargs;  /* # of extra arguments in vararg functions */
S    } l;
S    struct {  /* only for C functions */
S      lua_KFunction k;  /* continuation in case of yields */
S      ptrdiff_t old_errfunc;
S      lua_KContext ctx;  /* context info. in case of yields */
S    } c;
S  } u;
S  union {
S    int funcidx;  /* called-function index */
S    int nyield;  /* number of values yielded */
S    struct {  /* info about transfered values (for call/return hooks) */
S      unsigned short fTransfer;  /* offset of first value transfered */
S      unsigned short nTransfer;  /* number of values transfered */
S    } transferinfo;
S  } u2;
S  short nresults;  /* expected number of results from this function */
S  unsigned short callstatus;
S} CallInfo;
S
S
S/*
S** Bits in CallInfo status
S*/
S#define CIST_OAH	(1<<0)	/* original value of 'allowhook' */
S#define CIST_C		(1<<1)	/* call is running a C function */
S#define CIST_HOOKED	(1<<2)	/* call is running a debug hook */
S#define CIST_YPCALL	(1<<3)	/* call is a yieldable protected call */
S#define CIST_TAIL	(1<<4)	/* call was tail called */
S#define CIST_HOOKYIELD	(1<<5)	/* last hook called yielded */
S#define CIST_LEQ	(1<<6)  /* using __lt for __le */
S#define CIST_FIN	(1<<7)  /* call is running a finalizer */
S#define CIST_TRAN	(1<<8)	/* 'ci' has transfer information */
S
S/* active function is a Lua function */
S#define isLua(ci)	(!((ci)->callstatus & CIST_C))
S
S/* call is running Lua code (not a hook) */
S#define isLuacode(ci)	(!((ci)->callstatus & (CIST_C | CIST_HOOKED)))
S
S/* assume that CIST_OAH has offset 0 and that 'v' is strictly 0/1 */
S#define setoah(st,v)	((st) = ((st) & ~CIST_OAH) | (v))
S#define getoah(st)	((st) & CIST_OAH)
S
S
S/*
S** 'global state', shared by all threads of this state
S*/
Stypedef struct global_State {
S  lua_Alloc frealloc;  /* function to reallocate memory */
S  void *ud;         /* auxiliary data to 'frealloc' */
S  l_mem totalbytes;  /* number of bytes currently allocated - GCdebt */
S  l_mem GCdebt;  /* bytes allocated not yet compensated by the collector */
S  lu_mem GCestimate;  /* an estimate of the non-garbage memory in use */
S  stringtable strt;  /* hash table for strings */
S  TValue l_registry;
S  unsigned int seed;  /* randomized seed for hashes */
S  lu_byte currentwhite;
S  lu_byte gcstate;  /* state of garbage collector */
S  lu_byte gckind;  /* kind of GC running */
S  lu_byte genminormul;  /* control for minor generational collections */
S  lu_byte genmajormul;  /* control for major generational collections */
S  lu_byte gcrunning;  /* true if GC is running */
S  lu_byte gcemergency;  /* true if this is an emergency collection */
S  lu_byte gcpause;  /* size of pause between successive GCs */
S  lu_byte gcstepmul;  /* GC "speed" */
S  lu_byte gcstepsize;  /* (log2 of) GC granularity */
S  GCObject *allgc;  /* list of all collectable objects */
S  GCObject **sweepgc;  /* current position of sweep in list */
S  GCObject *finobj;  /* list of collectable objects with finalizers */
S  GCObject *gray;  /* list of gray objects */
S  GCObject *grayagain;  /* list of objects to be traversed atomically */
S  GCObject *weak;  /* list of tables with weak values */
S  GCObject *ephemeron;  /* list of ephemeron tables (weak keys) */
S  GCObject *allweak;  /* list of all-weak tables */
S  GCObject *protogray;  /* list of prototypes with "new" caches */
S  GCObject *tobefnz;  /* list of userdata to be GC */
S  GCObject *fixedgc;  /* list of objects not to be collected */
S  /* fields for generational collector */
S  GCObject *survival;  /* start of objects that survived one GC cycle */
S  GCObject *old;  /* start of old objects */
S  GCObject *reallyold;  /* old objects with more than one cycle */
S  GCObject *finobjsur;  /* list of survival objects with finalizers */
S  GCObject *finobjold;  /* list of old objects with finalizers */
S  GCObject *finobjrold;  /* list of really old objects with finalizers */
S  struct lua_State *twups;  /* list of threads with open upvalues */
S  lua_CFunction panic;  /* to be called in unprotected errors */
S  struct lua_State *mainthread;
S  const lua_Number *version;  /* pointer to version number */
S  TString *memerrmsg;  /* message for memory-allocation errors */
S  TString *tmname[TM_N];  /* array with tag-method names */
S  struct Table *mt[LUA_NUMTAGS];  /* metatables for basic types */
S  TString *strcache[STRCACHE_N][STRCACHE_M];  /* cache for strings in API */
S} global_State;
S
S
S/*
S** 'per thread' state
S*/
Sstruct lua_State {
S  CommonHeader;
S  unsigned short nci;  /* number of items in 'ci' list */
S  lu_byte status;
S  StkId top;  /* first free slot in the stack */
S  global_State *l_G;
S  CallInfo *ci;  /* call info for current function */
S  const Instruction *oldpc;  /* last pc traced */
S  StkId stack_last;  /* last free slot in the stack */
S  StkId stack;  /* stack base */
S  UpVal *openupval;  /* list of open upvalues in this stack */
S  GCObject *gclist;
S  struct lua_State *twups;  /* list of threads with open upvalues */
S  struct lua_longjmp *errorJmp;  /* current error recover point */
S  CallInfo base_ci;  /* CallInfo for first level (C calling Lua) */
S  volatile lua_Hook hook;
S  ptrdiff_t errfunc;  /* current error handling function (stack index) */
S  int stacksize;
S  int basehookcount;
S  int hookcount;
S  unsigned short nny;  /* number of non-yieldable calls in stack */
S  unsigned short nCcalls;  /* number of nested C calls */
S  l_signalT hookmask;
S  lu_byte allowhook;
S};
S
S
S#define G(L)	(L->l_G)
S
S
S/*
S** Union of all collectable objects (only for conversions)
S*/
Sunion GCUnion {
S  GCObject gc;  /* common header */
S  struct TString ts;
S  struct Udata u;
S  union Closure cl;
S  struct Table h;
S  struct Proto p;
S  struct lua_State th;  /* thread */
S  struct UpVal upv;
S};
S
S
S#define cast_u(o)	cast(union GCUnion *, (o))
S
S/* macros to convert a GCObject into a specific value */
S#define gco2ts(o)  \
S	check_exp(novariant((o)->tt) == LUA_TSTRING, &((cast_u(o))->ts))
X#define gco2ts(o)  	check_exp(novariant((o)->tt) == LUA_TSTRING, &((cast_u(o))->ts))
S#define gco2u(o)  check_exp((o)->tt == LUA_TUSERDATA, &((cast_u(o))->u))
S#define gco2lcl(o)  check_exp((o)->tt == LUA_TLCL, &((cast_u(o))->cl.l))
S#define gco2ccl(o)  check_exp((o)->tt == LUA_TCCL, &((cast_u(o))->cl.c))
S#define gco2cl(o)  \
S	check_exp(novariant((o)->tt) == LUA_TFUNCTION, &((cast_u(o))->cl))
X#define gco2cl(o)  	check_exp(novariant((o)->tt) == LUA_TFUNCTION, &((cast_u(o))->cl))
S#define gco2t(o)  check_exp((o)->tt == LUA_TTABLE, &((cast_u(o))->h))
S#define gco2p(o)  check_exp((o)->tt == LUA_TPROTO, &((cast_u(o))->p))
S#define gco2th(o)  check_exp((o)->tt == LUA_TTHREAD, &((cast_u(o))->th))
S#define gco2upv(o)  check_exp((o)->tt == LUA_TUPVAL, &((cast_u(o))->upv))
S
S
S/*
S** macro to convert a Lua object into a GCObject
S** (The access to 'tt' tries to ensure that 'v' is actually a Lua object.)
S*/
S#define obj2gco(v)	check_exp((v)->tt >= LUA_TSTRING, &(cast_u(v)->gc))
S
S
S/* actual number of total bytes allocated */
S#define gettotalbytes(g)	cast(lu_mem, (g)->totalbytes + (g)->GCdebt)
S
SLUAI_FUNC void luaE_setdebt (global_State *g, l_mem debt);
SLUAI_FUNC void luaE_freethread (lua_State *L, lua_State *L1);
SLUAI_FUNC CallInfo *luaE_extendCI (lua_State *L);
SLUAI_FUNC void luaE_freeCI (lua_State *L);
SLUAI_FUNC void luaE_shrinkCI (lua_State *L);
SLUAI_FUNC void luaE_incCcalls (lua_State *L);
S
S
N#endif
N
L 13 "..\..\..\M6P1(L)_Lua\lua\ltm.h" 2
N
N
N/*
N* WARNING: if you change the order of this enumeration,
N* grep "ORDER TM" and "ORDER OP"
N*/
Ntypedef enum {
N  TM_INDEX,
N  TM_NEWINDEX,
N  TM_UNDEF,
N  TM_ISDEF,
N  TM_GC,
N  TM_MODE,
N  TM_LEN,
N  TM_EQ,  /* last tag method with fast access */
N  TM_ADD,
N  TM_SUB,
N  TM_MUL,
N  TM_MOD,
N  TM_POW,
N  TM_DIV,
N  TM_IDIV,
N  TM_BAND,
N  TM_BOR,
N  TM_BXOR,
N  TM_SHL,
N  TM_SHR,
N  TM_UNM,
N  TM_BNOT,
N  TM_LT,
N  TM_LE,
N  TM_CONCAT,
N  TM_CALL,
N  TM_N		/* number of elements in the enum */
N} TMS;
N
N
N/*
N** Test whether there is no tagmethod.
N** (Because tagmethods use raw accesses, the result may be an "empty" nil.)
N*/
N#define notm(tm)	ttisnilorempty(tm)
N
N
N#define gfasttm(g,et,e) ((et) == NULL ? NULL : \
N  ((et)->flags & (1u<<(e))) ? NULL : luaT_gettm(et, e, (g)->tmname[e]))
X#define gfasttm(g,et,e) ((et) == NULL ? NULL :   ((et)->flags & (1u<<(e))) ? NULL : luaT_gettm(et, e, (g)->tmname[e]))
N
N#define fasttm(l,et,e)	gfasttm(G(l), et, e)
N
N#define ttypename(x)	luaT_typenames_[(x) + 1]
N
NLUAI_DDEC const char *const luaT_typenames_[LUA_TOTALTAGS];
Xextern const char *const luaT_typenames_[((9+1) + 2)];
N
N
NLUAI_FUNC const char *luaT_objtypename (lua_State *L, const TValue *o);
Xextern const char *luaT_objtypename (lua_State *L, const TValue *o);
N
NLUAI_FUNC const TValue *luaT_gettm (Table *events, TMS event, TString *ename);
Xextern const TValue *luaT_gettm (Table *events, TMS event, TString *ename);
NLUAI_FUNC const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o,
Xextern const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o,
N                                                       TMS event);
NLUAI_FUNC void luaT_init (lua_State *L);
Xextern void luaT_init (lua_State *L);
N
NLUAI_FUNC void luaT_callTM (lua_State *L, const TValue *f, const TValue *p1,
Xextern void luaT_callTM (lua_State *L, const TValue *f, const TValue *p1,
N                            const TValue *p2, const TValue *p3);
NLUAI_FUNC void luaT_callTMres (lua_State *L, const TValue *f,
Xextern void luaT_callTMres (lua_State *L, const TValue *f,
N                            const TValue *p1, const TValue *p2, StkId p3);
NLUAI_FUNC void luaT_trybinTM (lua_State *L, const TValue *p1, const TValue *p2,
Xextern void luaT_trybinTM (lua_State *L, const TValue *p1, const TValue *p2,
N                              StkId res, TMS event);
NLUAI_FUNC void luaT_trybinassocTM (lua_State *L, const TValue *p1,
Xextern void luaT_trybinassocTM (lua_State *L, const TValue *p1,
N       const TValue *p2, StkId res, int inv, TMS event);
NLUAI_FUNC void luaT_trybiniTM (lua_State *L, const TValue *p1, int i2,
Xextern void luaT_trybiniTM (lua_State *L, const TValue *p1, int i2,
N                               int inv, StkId res, TMS event);
NLUAI_FUNC int luaT_callorderTM (lua_State *L, const TValue *p1,
Xextern int luaT_callorderTM (lua_State *L, const TValue *p1,
N                                const TValue *p2, TMS event);
NLUAI_FUNC int luaT_callorderiTM (lua_State *L, const TValue *p1, int v2,
Xextern int luaT_callorderiTM (lua_State *L, const TValue *p1, int v2,
N                                 int inv, TMS event);
N
NLUAI_FUNC void luaT_adjustvarargs (lua_State *L, int nfixparams,
Xextern void luaT_adjustvarargs (lua_State *L, int nfixparams,
N                                   struct CallInfo *ci, Proto *p);
NLUAI_FUNC void luaT_getvarargs (lua_State *L, struct CallInfo *ci,
Xextern void luaT_getvarargs (lua_State *L, struct CallInfo *ci,
N                                              StkId where, int wanted);
N
NLUAI_FUNC int luaT_keydef (lua_State *L, TValue *obj, TValue *key, int remove);
Xextern int luaT_keydef (lua_State *L, TValue *obj, TValue *key, int remove);
N
N
N#endif
L 14 "..\..\..\M6P1(L)_Lua\lua\lstate.h" 2
N#include "lzio.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lzio.h" 1
N/*
N** $Id: lzio.h,v 1.30 2014/12/19 17:26:14 roberto Exp roberto $
N** Buffered streams
N** See Copyright Notice in lua.h
N*/
N
N
N#ifndef lzio_h
N#define lzio_h
N
N#include "lua.h"
N
N#include "lmem.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lmem.h" 1
N/*
N** $Id: lmem.h,v 1.46 2017/12/08 17:28:25 roberto Exp roberto $
N** Interface to Memory Manager
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lmem_h
N#define lmem_h
N
N
N#include <stddef.h>
N
N#include "llimits.h"
N#include "lua.h"
N
N
N#define luaM_error(L)	luaD_throw(L, LUA_ERRMEM)
N
N
N/*
N** This macro tests whether it is safe to multiply 'n' by the size of
N** type 't' without overflows. Because 'e' is always constant, it avoids
N** the runtime division MAX_SIZET/(e).
N** (The macro is somewhat complex to avoid warnings:  The 'sizeof'
N** comparison avoids a runtime comparison when overflow cannot occur.
N** The compiler should be able to optimize the real test by itself, but
N** when it does it, it may give a warning about "comparison is always
N** false due to limited range of data type"; the +1 tricks the compiler,
N** avoiding this warning but also this optimization.)
N*/
N#define luaM_testsize(n,e)  \
N	(sizeof(n) >= sizeof(size_t) && cast_sizet((n)) + 1 > MAX_SIZET/(e))
X#define luaM_testsize(n,e)  	(sizeof(n) >= sizeof(size_t) && cast_sizet((n)) + 1 > MAX_SIZET/(e))
N
N#define luaM_checksize(L,n,e)  \
N	(luaM_testsize(n,e) ? luaM_toobig(L) : cast_void(0))
X#define luaM_checksize(L,n,e)  	(luaM_testsize(n,e) ? luaM_toobig(L) : cast_void(0))
N
N
N/*
N** Computes the minimum between 'n' and 'MAX_SIZET/sizeof(t)', so that
N** the result is not larger than 'n' and cannot overflow a 'size_t'
N** when multiplied by the size of type 't'. (Assumes that 'n' is an
N** 'int' or 'unsigned int' and that 'int' is not larger than 'size_t'.)
N*/
N#define luaM_limitN(n,t)  \
N  ((cast_sizet(n) <= MAX_SIZET/sizeof(t)) ? (n) :  \
N     cast_uint((MAX_SIZET/sizeof(t))))
X#define luaM_limitN(n,t)    ((cast_sizet(n) <= MAX_SIZET/sizeof(t)) ? (n) :       cast_uint((MAX_SIZET/sizeof(t))))
N
N
N/*
N** Arrays of chars do not need any test
N*/
N#define luaM_reallocvchar(L,b,on,n)  \
N  cast_charp(luaM_saferealloc_(L, (b), (on)*sizeof(char), (n)*sizeof(char)))
X#define luaM_reallocvchar(L,b,on,n)    cast_charp(luaM_saferealloc_(L, (b), (on)*sizeof(char), (n)*sizeof(char)))
N
N#define luaM_freemem(L, b, s)	luaM_free_(L, (b), (s))
N#define luaM_free(L, b)		luaM_free_(L, (b), sizeof(*(b)))
N#define luaM_freearray(L, b, n)   luaM_free_(L, (b), (n)*sizeof(*(b)))
N
N#define luaM_new(L,t)		cast(t*, luaM_malloc_(L, sizeof(t), 0))
N#define luaM_newvector(L,n,t)	cast(t*, luaM_malloc_(L, (n)*sizeof(t), 0))
N#define luaM_newvectorchecked(L,n,t) \
N  (luaM_checksize(L,n,sizeof(t)), luaM_newvector(L,n,t))
X#define luaM_newvectorchecked(L,n,t)   (luaM_checksize(L,n,sizeof(t)), luaM_newvector(L,n,t))
N
N#define luaM_newobject(L,tag,s)	luaM_malloc_(L, (s), tag)
N
N#define luaM_growvector(L,v,nelems,size,t,limit,e) \
N	((v)=cast(t *, luaM_growaux_(L,v,nelems,&(size),sizeof(t), \
N                         luaM_limitN(limit,t),e)))
X#define luaM_growvector(L,v,nelems,size,t,limit,e) 	((v)=cast(t *, luaM_growaux_(L,v,nelems,&(size),sizeof(t),                          luaM_limitN(limit,t),e)))
N
N#define luaM_reallocvector(L, v,oldn,n,t) \
N   (cast(t *, luaM_realloc_(L, v, cast_sizet(oldn) * sizeof(t), \
N                                  cast_sizet(n) * sizeof(t))))
X#define luaM_reallocvector(L, v,oldn,n,t)    (cast(t *, luaM_realloc_(L, v, cast_sizet(oldn) * sizeof(t),                                   cast_sizet(n) * sizeof(t))))
N
N#define luaM_shrinkvector(L,v,size,fs,t) \
N   ((v)=cast(t *, luaM_shrinkvector_(L, v, &(size), fs, sizeof(t))))
X#define luaM_shrinkvector(L,v,size,fs,t)    ((v)=cast(t *, luaM_shrinkvector_(L, v, &(size), fs, sizeof(t))))
N
NLUAI_FUNC l_noret luaM_toobig (lua_State *L);
Xextern void luaM_toobig (lua_State *L);
N
N/* not to be called directly */
NLUAI_FUNC void *luaM_realloc_ (lua_State *L, void *block, size_t oldsize,
Xextern void *luaM_realloc_ (lua_State *L, void *block, size_t oldsize,
N                                                          size_t size);
NLUAI_FUNC void *luaM_saferealloc_ (lua_State *L, void *block, size_t oldsize,
Xextern void *luaM_saferealloc_ (lua_State *L, void *block, size_t oldsize,
N                                                              size_t size);
NLUAI_FUNC void luaM_free_ (lua_State *L, void *block, size_t osize);
Xextern void luaM_free_ (lua_State *L, void *block, size_t osize);
NLUAI_FUNC void *luaM_growaux_ (lua_State *L, void *block, int nelems,
Xextern void *luaM_growaux_ (lua_State *L, void *block, int nelems,
N                               int *size, int size_elem, int limit,
N                               const char *what);
NLUAI_FUNC void *luaM_shrinkvector_ (lua_State *L, void *block, int *nelem,
Xextern void *luaM_shrinkvector_ (lua_State *L, void *block, int *nelem,
N                                    int final_n, int size_elem);
NLUAI_FUNC void *luaM_malloc_ (lua_State *L, size_t size, int tag);
Xextern void *luaM_malloc_ (lua_State *L, size_t size, int tag);
N
N#endif
N
L 14 "..\..\..\M6P1(L)_Lua\lua\lzio.h" 2
N
N
N#define EOZ	(-1)			/* end of stream */
N
Ntypedef struct Zio ZIO;
N
N#define zgetc(z)  (((z)->n--)>0 ?  cast_uchar(*(z)->p++) : luaZ_fill(z))
N
N
Ntypedef struct Mbuffer {
N  char *buffer;
N  size_t n;
N  size_t buffsize;
N} Mbuffer;
N
N#define luaZ_initbuffer(L, buff) ((buff)->buffer = NULL, (buff)->buffsize = 0)
N
N#define luaZ_buffer(buff)	((buff)->buffer)
N#define luaZ_sizebuffer(buff)	((buff)->buffsize)
N#define luaZ_bufflen(buff)	((buff)->n)
N
N#define luaZ_buffremove(buff,i)	((buff)->n -= (i))
N#define luaZ_resetbuffer(buff) ((buff)->n = 0)
N
N
N#define luaZ_resizebuffer(L, buff, size) \
N	((buff)->buffer = luaM_reallocvchar(L, (buff)->buffer, \
N				(buff)->buffsize, size), \
N	(buff)->buffsize = size)
X#define luaZ_resizebuffer(L, buff, size) 	((buff)->buffer = luaM_reallocvchar(L, (buff)->buffer, 				(buff)->buffsize, size), 	(buff)->buffsize = size)
N
N#define luaZ_freebuffer(L, buff)	luaZ_resizebuffer(L, buff, 0)
N
N
NLUAI_FUNC void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader,
Xextern void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader,
N                                        void *data);
NLUAI_FUNC size_t luaZ_read (ZIO* z, void *b, size_t n);	/* read next n bytes */
Xextern size_t luaZ_read (ZIO* z, void *b, size_t n);	 
N
N
N
N/* --------- Private Part ------------------ */
N
Nstruct Zio {
N  size_t n;			/* bytes still unread */
N  const char *p;		/* current position in buffer */
N  lua_Reader reader;		/* reader function */
N  void *data;			/* additional data */
N  lua_State *L;			/* Lua state (for reader) */
N};
N
N
NLUAI_FUNC int luaZ_fill (ZIO *z);
Xextern int luaZ_fill (ZIO *z);
N
N#endif
L 15 "..\..\..\M6P1(L)_Lua\lua\lstate.h" 2
N
N
N/*
N
N** Some notes about garbage-collected objects: All objects in Lua must
N** be kept somehow accessible until being freed, so all objects always
N** belong to one (and only one) of these lists, using field 'next' of
N** the 'CommonHeader' for the link:
N**
N** 'allgc': all objects not marked for finalization;
N** 'finobj': all objects marked for finalization;
N** 'tobefnz': all objects ready to be finalized;
N** 'fixedgc': all objects that are not to be collected (currently
N** only small strings, such as reserved words).
N**
N** Moreover, there is another set of lists that control gray objects.
N** These lists are linked by fields 'gclist'. (All objects that
N** can become gray have such a field. The field is not the same
N** in all objects, but it always has this name.)  Any gray object
N** must belong to one of these lists, and all objects in these lists
N** must be gray:
N**
N** 'gray': regular gray objects, still waiting to be visited.
N** 'grayagain': objects that must be revisited at the atomic phase.
N**   That includes
N**   - black objects got in a write barrier;
N**   - all kinds of weak tables during propagation phase;
N**   - all threads.
N** 'weak': tables with weak values to be cleared;
N** 'ephemeron': ephemeron tables with white->white entries;
N** 'allweak': tables with weak keys and/or weak values to be cleared.
N** There is also a list 'protogray' for prototypes that need to have
N** their caches cleared.
N
N*/
N
N
Nstruct lua_longjmp;  /* defined in ldo.c */
N
N
N/*
N** Atomic type (relative to signals) to better ensure that 'lua_sethook'
N** is thread safe
N*/
N#if !defined(l_signalT)
X#if !0L
N#include <signal.h>
L 1 "D:\Program_Files_x86\Keil_v5\ARM\ARMCC\Bin\..\include\signal.h" 1
N/* signal.h
N *
N * Copyright (C) Codemist Ltd., 1988-1993.
N * Copyright 1991-1999 ARM Limited. All rights reserved.
N *
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: statham $
N */
N
N/*
N * signal.h declares a type and two functions and defines several macros, for
N * handling various signals (conditions that may be reported during program
N * execution).
N */
N
N#ifndef __signal_h
N#define __signal_h
N#define __ARMCLIB_VERSION 5060009
N
N  #ifndef __SIGNAL_DECLS
N  #define __SIGNAL_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
Ntypedef int sig_atomic_t;
N   /* type which is the integral type of an object that can be modified as */
N   /* an atomic entity, even in the presence of asynchronous interrupts. */
N
N#if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X#if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S  #define _AEABI_PORTABLE
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S
Sextern void __aeabi_SIG_DFL(int);
S#define SIG_DFL (__CLIBNS __aeabi_SIG_DFL)
Sextern void __aeabi_SIG_ERR(int);
S#define SIG_ERR (__CLIBNS __aeabi_SIG_ERR)
Sextern void __aeabi_SIG_IGN(int);
S#define SIG_IGN (__CLIBNS __aeabi_SIG_IGN)
S
Sextern const int __aeabi_SIGABRT;
S#define SIGABRT (__CLIBNS __aeabi_SIGABRT)
Sextern const int __aeabi_SIGFPE;
S#define SIGFPE (__CLIBNS __aeabi_SIGFPE)
Sextern const int __aeabi_SIGILL;
S#define SIGILL (__CLIBNS __aeabi_SIGILL)
Sextern const int __aeabi_SIGINT;
S#define SIGINT (__CLIBNS __aeabi_SIGINT)
Sextern const int __aeabi_SIGSEGV;
S#define SIGSEGV (__CLIBNS __aeabi_SIGSEGV)
Sextern const int __aeabi_SIGTERM;
S#define SIGTERM (__CLIBNS __aeabi_SIGTERM)
S
N#else
N
N   /*
N    * Each of the following macros expand to a constant expression with a
N    * distinct value and has the same type as the second argument to, and the
N    * return value of the signal function, and whose value compares unequal to
N    * the address of any declarable function.  Use a typedef to ensure that
N    * the function pointer type is extern "C".
N    */
Ntypedef void(*__ARM_sigh_t)(int);
N#define SIG_DFL ( (__CLIBNS __ARM_sigh_t) -1 )
N#define SIG_ERR ( (__CLIBNS __ARM_sigh_t) -2 )
N#define SIG_IGN ( (__CLIBNS __ARM_sigh_t) -3 )
N
N   /*
N    * Each of the following macros expand to a positive integral constant
N    * expression that is the signal number corresponding the the specified
N    * condition.
N    */
N#define SIGABRT   1 /* abort                         */
N#define SIGFPE    2 /* arithmetic exception          */
N#define SIGILL    3 /* illegal instruction           */
N#define SIGINT    4 /* attention request from user   */
N#define SIGSEGV   5 /* bad memory access             */
N#define SIGTERM   6 /* termination request           */
N#endif
N
N   /* (these following macros are not part of the ANSI standard,
N    * but private to this implementation)
N    */
N#define SIGSTAK   7  /* stack overflow                */
N#define SIGRTRED  8  /* run-time redirection error    */
N#define SIGRTMEM  9  /* run-time memory error         */
N/* Signal numbers 10 and 11 are available for the user */
N#define SIGUSR1  10
N#define SIGUSR2  11
N#define SIGPVFN  12 /* pure virtual function called   */
N#define SIGCPPL  13 /* miscellaneous exception from C++ library */
N#define SIGOUTOFHEAP 14 /* ::operator new or new[] cannot allocate memory */
N/* Signal numbers 15-31 are reserved to the implementation */
N/* Signal numbers 32 and larger are for more user signals */
N
Nextern void (*signal (int /*sig*/, void (* /*func*/ )(int)))(int) __attribute__((__nonnull__(2)));
N   /*
N    * Chooses one of three ways in which receipt of the signal number sig is to
N    * be subsequently handled. If the value of func is SIG_DFL, default
N    * handling for that signal will occur. If the value of func is SIG_IGN, the
N    * signal will be ignored. Otherwise func shall point to a function to be
N    * called when that signal occurs.
N    * When a signal occurs, if func points to a function, first the
N    * equivalent of signal(sig, SIG_DFL); is executed. (If the value of sig
N    * is SIGILL, whether the reset to SIG_DFL occurs is implementation-
N    * defined). Next the equivalent of (*func)(sig); is executed. The
N    * function may terminate by calling the abort, exit or longjmp function.
N    * If func executes a return statement and the value of sig was SIGFPE or
N    * any other implementation-defined value corresponding to a computational
N    * exception, the behaviour is undefined. Otherwise, the program will
N    * resume execution at the point it was interrupted.
N    * If the signal occurs other than as a result of calling the abort or raise
N    * function, the behaviour is undefined if the signal handler calls any
N    * function in the standard library other than the signal function itself
N    * or refers to any object with static storage duration other than by
N    * assigning a value to a volatile static variable of type sig_atomic_t.
N    * At program startup, the equivalent of signal(sig, SIG_IGN); may be
N    * executed for some signals selected in an implementation-defined manner;
N    * the equivalent of signal(sig, SIG_DFL); is executed for all other
N    * signals defined by the implementation.
N    * Returns: If the request can be honoured, the signal function returns the
N    *          value of func for most recent call to signal for the specified
N    *          signal sig. Otherwise, a value of SIG_ERR is returned and the
N    *          integer expression errno is set to indicate the error.
N    */
N
Nextern int raise(int /*sig*/);
N   /* sends the signal sig to the executing program. */
N   /* Returns: zero if successful, non-zero if unsuccessful. */
N
N#define _DIVBYZERO 2                   /* SIGFPE param for integer div-by-0 */
N#ifndef __STRICT_ANSI__
N#define DIVBYZERO 2                    /* SIGFPE param for integer div-by-0 */
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */ 
N  #endif /* __SIGNAL_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __SIGNAL_NO_EXPORTS
S      using ::std::sig_atomic_t;
S      using ::std::raise;
S      using ::std::signal;
S    #endif 
N  #endif /* __cplusplus */ 
N
N#endif
N
N/* end of signal.h */
N
L 61 "..\..\..\M6P1(L)_Lua\lua\lstate.h" 2
N#define l_signalT	sig_atomic_t
N#endif
N
N
N/* extra stack space to handle TM calls and some other extras */
N#define EXTRA_STACK   5
N
N
N#define BASIC_STACK_SIZE        (2*LUA_MINSTACK)
N
N
N/* kinds of Garbage Collection */
N#define KGC_INC		0	/* incremental gc */
N#define KGC_GEN		1	/* generational gc */
N
N
Ntypedef struct stringtable {
N  TString **hash;
N  int nuse;  /* number of elements */
N  int size;
N} stringtable;
N
N
N/*
N** Information about a call.
N*/
Ntypedef struct CallInfo {
N  StkId func;  /* function index in the stack */
N  StkId	top;  /* top for this function */
N  struct CallInfo *previous, *next;  /* dynamic call link */
N  union {
N    struct {  /* only for Lua functions */
N      const Instruction *savedpc;
N      l_signalT trap;
X      sig_atomic_t trap;
N      int nextraargs;  /* # of extra arguments in vararg functions */
N    } l;
N    struct {  /* only for C functions */
N      lua_KFunction k;  /* continuation in case of yields */
N      ptrdiff_t old_errfunc;
N      lua_KContext ctx;  /* context info. in case of yields */
N    } c;
N  } u;
N  union {
N    int funcidx;  /* called-function index */
N    int nyield;  /* number of values yielded */
N    struct {  /* info about transfered values (for call/return hooks) */
N      unsigned short fTransfer;  /* offset of first value transfered */
N      unsigned short nTransfer;  /* number of values transfered */
N    } transferinfo;
N  } u2;
N  short nresults;  /* expected number of results from this function */
N  unsigned short callstatus;
N} CallInfo;
N
N
N/*
N** Bits in CallInfo status
N*/
N#define CIST_OAH	(1<<0)	/* original value of 'allowhook' */
N#define CIST_C		(1<<1)	/* call is running a C function */
N#define CIST_HOOKED	(1<<2)	/* call is running a debug hook */
N#define CIST_YPCALL	(1<<3)	/* call is a yieldable protected call */
N#define CIST_TAIL	(1<<4)	/* call was tail called */
N#define CIST_HOOKYIELD	(1<<5)	/* last hook called yielded */
N#define CIST_LEQ	(1<<6)  /* using __lt for __le */
N#define CIST_FIN	(1<<7)  /* call is running a finalizer */
N#define CIST_TRAN	(1<<8)	/* 'ci' has transfer information */
N
N/* active function is a Lua function */
N#define isLua(ci)	(!((ci)->callstatus & CIST_C))
N
N/* call is running Lua code (not a hook) */
N#define isLuacode(ci)	(!((ci)->callstatus & (CIST_C | CIST_HOOKED)))
N
N/* assume that CIST_OAH has offset 0 and that 'v' is strictly 0/1 */
N#define setoah(st,v)	((st) = ((st) & ~CIST_OAH) | (v))
N#define getoah(st)	((st) & CIST_OAH)
N
N
N/*
N** 'global state', shared by all threads of this state
N*/
Ntypedef struct global_State {
N  lua_Alloc frealloc;  /* function to reallocate memory */
N  void *ud;         /* auxiliary data to 'frealloc' */
N  l_mem totalbytes;  /* number of bytes currently allocated - GCdebt */
N  l_mem GCdebt;  /* bytes allocated not yet compensated by the collector */
N  lu_mem GCestimate;  /* an estimate of the non-garbage memory in use */
N  stringtable strt;  /* hash table for strings */
N  TValue l_registry;
N  unsigned int seed;  /* randomized seed for hashes */
N  lu_byte currentwhite;
N  lu_byte gcstate;  /* state of garbage collector */
N  lu_byte gckind;  /* kind of GC running */
N  lu_byte genminormul;  /* control for minor generational collections */
N  lu_byte genmajormul;  /* control for major generational collections */
N  lu_byte gcrunning;  /* true if GC is running */
N  lu_byte gcemergency;  /* true if this is an emergency collection */
N  lu_byte gcpause;  /* size of pause between successive GCs */
N  lu_byte gcstepmul;  /* GC "speed" */
N  lu_byte gcstepsize;  /* (log2 of) GC granularity */
N  GCObject *allgc;  /* list of all collectable objects */
N  GCObject **sweepgc;  /* current position of sweep in list */
N  GCObject *finobj;  /* list of collectable objects with finalizers */
N  GCObject *gray;  /* list of gray objects */
N  GCObject *grayagain;  /* list of objects to be traversed atomically */
N  GCObject *weak;  /* list of tables with weak values */
N  GCObject *ephemeron;  /* list of ephemeron tables (weak keys) */
N  GCObject *allweak;  /* list of all-weak tables */
N  GCObject *protogray;  /* list of prototypes with "new" caches */
N  GCObject *tobefnz;  /* list of userdata to be GC */
N  GCObject *fixedgc;  /* list of objects not to be collected */
N  /* fields for generational collector */
N  GCObject *survival;  /* start of objects that survived one GC cycle */
N  GCObject *old;  /* start of old objects */
N  GCObject *reallyold;  /* old objects with more than one cycle */
N  GCObject *finobjsur;  /* list of survival objects with finalizers */
N  GCObject *finobjold;  /* list of old objects with finalizers */
N  GCObject *finobjrold;  /* list of really old objects with finalizers */
N  struct lua_State *twups;  /* list of threads with open upvalues */
N  lua_CFunction panic;  /* to be called in unprotected errors */
N  struct lua_State *mainthread;
N  const lua_Number *version;  /* pointer to version number */
N  TString *memerrmsg;  /* message for memory-allocation errors */
N  TString *tmname[TM_N];  /* array with tag-method names */
N  struct Table *mt[LUA_NUMTAGS];  /* metatables for basic types */
X  struct Table *mt[9];   
N  TString *strcache[STRCACHE_N][STRCACHE_M];  /* cache for strings in API */
X  TString *strcache[53][2];   
N} global_State;
N
N
N/*
N** 'per thread' state
N*/
Nstruct lua_State {
N  CommonHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked;
N  unsigned short nci;  /* number of items in 'ci' list */
N  lu_byte status;
N  StkId top;  /* first free slot in the stack */
N  global_State *l_G;
N  CallInfo *ci;  /* call info for current function */
N  const Instruction *oldpc;  /* last pc traced */
N  StkId stack_last;  /* last free slot in the stack */
N  StkId stack;  /* stack base */
N  UpVal *openupval;  /* list of open upvalues in this stack */
N  GCObject *gclist;
N  struct lua_State *twups;  /* list of threads with open upvalues */
N  struct lua_longjmp *errorJmp;  /* current error recover point */
N  CallInfo base_ci;  /* CallInfo for first level (C calling Lua) */
N  volatile lua_Hook hook;
N  ptrdiff_t errfunc;  /* current error handling function (stack index) */
N  int stacksize;
N  int basehookcount;
N  int hookcount;
N  unsigned short nny;  /* number of non-yieldable calls in stack */
N  unsigned short nCcalls;  /* number of nested C calls */
N  l_signalT hookmask;
X  sig_atomic_t hookmask;
N  lu_byte allowhook;
N};
N
N
N#define G(L)	(L->l_G)
N
N
N/*
N** Union of all collectable objects (only for conversions)
N*/
Nunion GCUnion {
N  GCObject gc;  /* common header */
N  struct TString ts;
N  struct Udata u;
N  union Closure cl;
N  struct Table h;
N  struct Proto p;
N  struct lua_State th;  /* thread */
N  struct UpVal upv;
N};
N
N
N#define cast_u(o)	cast(union GCUnion *, (o))
N
N/* macros to convert a GCObject into a specific value */
N#define gco2ts(o)  \
N	check_exp(novariant((o)->tt) == LUA_TSTRING, &((cast_u(o))->ts))
X#define gco2ts(o)  	check_exp(novariant((o)->tt) == LUA_TSTRING, &((cast_u(o))->ts))
N#define gco2u(o)  check_exp((o)->tt == LUA_TUSERDATA, &((cast_u(o))->u))
N#define gco2lcl(o)  check_exp((o)->tt == LUA_TLCL, &((cast_u(o))->cl.l))
N#define gco2ccl(o)  check_exp((o)->tt == LUA_TCCL, &((cast_u(o))->cl.c))
N#define gco2cl(o)  \
N	check_exp(novariant((o)->tt) == LUA_TFUNCTION, &((cast_u(o))->cl))
X#define gco2cl(o)  	check_exp(novariant((o)->tt) == LUA_TFUNCTION, &((cast_u(o))->cl))
N#define gco2t(o)  check_exp((o)->tt == LUA_TTABLE, &((cast_u(o))->h))
N#define gco2p(o)  check_exp((o)->tt == LUA_TPROTO, &((cast_u(o))->p))
N#define gco2th(o)  check_exp((o)->tt == LUA_TTHREAD, &((cast_u(o))->th))
N#define gco2upv(o)  check_exp((o)->tt == LUA_TUPVAL, &((cast_u(o))->upv))
N
N
N/*
N** macro to convert a Lua object into a GCObject
N** (The access to 'tt' tries to ensure that 'v' is actually a Lua object.)
N*/
N#define obj2gco(v)	check_exp((v)->tt >= LUA_TSTRING, &(cast_u(v)->gc))
N
N
N/* actual number of total bytes allocated */
N#define gettotalbytes(g)	cast(lu_mem, (g)->totalbytes + (g)->GCdebt)
N
NLUAI_FUNC void luaE_setdebt (global_State *g, l_mem debt);
Xextern void luaE_setdebt (global_State *g, l_mem debt);
NLUAI_FUNC void luaE_freethread (lua_State *L, lua_State *L1);
Xextern void luaE_freethread (lua_State *L, lua_State *L1);
NLUAI_FUNC CallInfo *luaE_extendCI (lua_State *L);
Xextern CallInfo *luaE_extendCI (lua_State *L);
NLUAI_FUNC void luaE_freeCI (lua_State *L);
Xextern void luaE_freeCI (lua_State *L);
NLUAI_FUNC void luaE_shrinkCI (lua_State *L);
Xextern void luaE_shrinkCI (lua_State *L);
NLUAI_FUNC void luaE_incCcalls (lua_State *L);
Xextern void luaE_incCcalls (lua_State *L);
N
N
N#endif
N
L 12 "..\..\..\M6P1(L)_Lua\lua\ldebug.h" 2
N
N
N#define pcRel(pc, p)	(cast_int((pc) - (p)->code) - 1)
N
N#define resethookcount(L)	(L->hookcount = L->basehookcount)
N
N/*
N** mark for entries in 'lineinfo' array that has absolute information in
N** 'abslineinfo' array
N*/
N#define ABSLINEINFO	(-0x80)
N
NLUAI_FUNC int luaG_getfuncline (Proto *f, int pc);
Xextern int luaG_getfuncline (Proto *f, int pc);
NLUAI_FUNC l_noret luaG_typeerror (lua_State *L, const TValue *o,
Xextern void luaG_typeerror (lua_State *L, const TValue *o,
N                                                const char *opname);
NLUAI_FUNC l_noret luaG_concaterror (lua_State *L, const TValue *p1,
Xextern void luaG_concaterror (lua_State *L, const TValue *p1,
N                                                  const TValue *p2);
NLUAI_FUNC l_noret luaG_opinterror (lua_State *L, const TValue *p1,
Xextern void luaG_opinterror (lua_State *L, const TValue *p1,
N                                                 const TValue *p2,
N                                                 const char *msg);
NLUAI_FUNC l_noret luaG_tointerror (lua_State *L, const TValue *p1,
Xextern void luaG_tointerror (lua_State *L, const TValue *p1,
N                                                 const TValue *p2);
NLUAI_FUNC l_noret luaG_ordererror (lua_State *L, const TValue *p1,
Xextern void luaG_ordererror (lua_State *L, const TValue *p1,
N                                                 const TValue *p2);
NLUAI_FUNC l_noret luaG_runerror (lua_State *L, const char *fmt, ...);
Xextern void luaG_runerror (lua_State *L, const char *fmt, ...);
NLUAI_FUNC const char *luaG_addinfo (lua_State *L, const char *msg,
Xextern const char *luaG_addinfo (lua_State *L, const char *msg,
N                                                  TString *src, int line);
NLUAI_FUNC l_noret luaG_errormsg (lua_State *L);
Xextern void luaG_errormsg (lua_State *L);
NLUAI_FUNC void luaG_traceexec (lua_State *L);
Xextern void luaG_traceexec (lua_State *L);
N
N
N#endif
L 32 "..\..\..\M6P1(L)_Lua\lua\ltable.c" 2
N#include "ldo.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\ldo.h" 1
N/*
N** $Id: ldo.h,v 2.42 2018/02/15 15:34:29 roberto Exp roberto $
N** Stack and Call structure of Lua
N** See Copyright Notice in lua.h
N*/
N
N#ifndef ldo_h
N#define ldo_h
N
N
N#include "lobject.h"
N#include "lstate.h"
N#include "lzio.h"
N
N
N/*
N** Macro to check stack size and grow stack if needed.  Parameters
N** 'pre'/'pos' allow the macro to preserve a pointer into the
N** stack across reallocations, doing the work only when needed.
N** 'condmovestack' is used in heavy tests to force a stack reallocation
N** at every check.
N*/
N#define luaD_checkstackaux(L,n,pre,pos)  \
N	if (L->stack_last - L->top <= (n)) \
N	  { pre; luaD_growstack(L, n, 1); pos; } \
N        else { condmovestack(L,pre,pos); }
X#define luaD_checkstackaux(L,n,pre,pos)  	if (L->stack_last - L->top <= (n)) 	  { pre; luaD_growstack(L, n, 1); pos; }         else { condmovestack(L,pre,pos); }
N
N/* In general, 'pre'/'pos' are empty (nothing to save) */
N#define luaD_checkstack(L,n)	luaD_checkstackaux(L,n,(void)0,(void)0)
N
N
N
N#define savestack(L,p)		((char *)(p) - (char *)L->stack)
N#define restorestack(L,n)	((StkId)((char *)L->stack + (n)))
N
N
N/* macro to check stack size, preserving 'p' */
N#define checkstackp(L,n,p)  \
N  luaD_checkstackaux(L, n, \
N    ptrdiff_t t__ = savestack(L, p);  /* save 'p' */ \
N    luaC_checkGC(L),  /* stack grow uses memory */ \
N    p = restorestack(L, t__))  /* 'pos' part: restore 'p' */
X#define checkstackp(L,n,p)    luaD_checkstackaux(L, n,     ptrdiff_t t__ = savestack(L, p);        luaC_checkGC(L),        p = restorestack(L, t__))   
N
N
N/* macro to check stack size and GC */
N#define checkstackGC(L,fsize)  \
N	luaD_checkstackaux(L, (fsize), (void)0, luaC_checkGC(L))
X#define checkstackGC(L,fsize)  	luaD_checkstackaux(L, (fsize), (void)0, luaC_checkGC(L))
N
N
N/* type of protected functions, to be ran by 'runprotected' */
Ntypedef void (*Pfunc) (lua_State *L, void *ud);
N
NLUAI_FUNC int luaD_protectedparser (lua_State *L, ZIO *z, const char *name,
Xextern int luaD_protectedparser (lua_State *L, ZIO *z, const char *name,
N                                                  const char *mode);
NLUAI_FUNC void luaD_hook (lua_State *L, int event, int line,
Xextern void luaD_hook (lua_State *L, int event, int line,
N                                        int fTransfer, int nTransfer);
NLUAI_FUNC void luaD_hookcall (lua_State *L, CallInfo *ci);
Xextern void luaD_hookcall (lua_State *L, CallInfo *ci);
NLUAI_FUNC void luaD_pretailcall (lua_State *L, CallInfo *ci, StkId func, int n);
Xextern void luaD_pretailcall (lua_State *L, CallInfo *ci, StkId func, int n);
NLUAI_FUNC void luaD_call (lua_State *L, StkId func, int nResults);
Xextern void luaD_call (lua_State *L, StkId func, int nResults);
NLUAI_FUNC void luaD_callnoyield (lua_State *L, StkId func, int nResults);
Xextern void luaD_callnoyield (lua_State *L, StkId func, int nResults);
NLUAI_FUNC void luaD_tryfuncTM (lua_State *L, StkId func);
Xextern void luaD_tryfuncTM (lua_State *L, StkId func);
NLUAI_FUNC int luaD_pcall (lua_State *L, Pfunc func, void *u,
Xextern int luaD_pcall (lua_State *L, Pfunc func, void *u,
N                                        ptrdiff_t oldtop, ptrdiff_t ef);
NLUAI_FUNC void luaD_poscall (lua_State *L, CallInfo *ci, StkId firstResult,
Xextern void luaD_poscall (lua_State *L, CallInfo *ci, StkId firstResult,
N                                          int nres);
NLUAI_FUNC int luaD_reallocstack (lua_State *L, int newsize, int raiseerror);
Xextern int luaD_reallocstack (lua_State *L, int newsize, int raiseerror);
NLUAI_FUNC int luaD_growstack (lua_State *L, int n, int raiseerror);
Xextern int luaD_growstack (lua_State *L, int n, int raiseerror);
NLUAI_FUNC void luaD_shrinkstack (lua_State *L);
Xextern void luaD_shrinkstack (lua_State *L);
NLUAI_FUNC void luaD_inctop (lua_State *L);
Xextern void luaD_inctop (lua_State *L);
N
NLUAI_FUNC l_noret luaD_throw (lua_State *L, int errcode);
Xextern void luaD_throw (lua_State *L, int errcode);
NLUAI_FUNC int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud);
Xextern int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud);
N
N#endif
N
L 33 "..\..\..\M6P1(L)_Lua\lua\ltable.c" 2
N#include "lgc.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lgc.h" 1
N/*
N** $Id: lgc.h,v 2.102 2018/02/19 13:55:34 roberto Exp roberto $
N** Garbage Collector
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lgc_h
N#define lgc_h
N
N
N#include "lobject.h"
N#include "lstate.h"
N
N/*
N** Collectable objects may have one of three colors: white, which
N** means the object is not marked; gray, which means the
N** object is marked, but its references may be not marked; and
N** black, which means that the object and all its references are marked.
N** The main invariant of the garbage collector, while marking objects,
N** is that a black object can never point to a white one. Moreover,
N** any gray object must be in a "gray list" (gray, grayagain, weak,
N** allweak, ephemeron) so that it can be visited again before finishing
N** the collection cycle. These lists have no meaning when the invariant
N** is not being enforced (e.g., sweep phase).
N*/
N
N
N/*
N** Possible states of the Garbage Collector
N*/
N#define GCSpropagate	0
N#define GCSenteratomic	1
N#define GCSatomic	2
N#define GCSswpallgc	3
N#define GCSswpfinobj	4
N#define GCSswptobefnz	5
N#define GCSswpend	6
N#define GCScallfin	7
N#define GCSpause	8
N
N
N#define issweepphase(g)  \
N	(GCSswpallgc <= (g)->gcstate && (g)->gcstate <= GCSswpend)
X#define issweepphase(g)  	(GCSswpallgc <= (g)->gcstate && (g)->gcstate <= GCSswpend)
N
N
N/*
N** macro to tell when main invariant (white objects cannot point to black
N** ones) must be kept. During a collection, the sweep
N** phase may break the invariant, as objects turned white may point to
N** still-black objects. The invariant is restored when sweep ends and
N** all objects are white again.
N*/
N
N#define keepinvariant(g)	((g)->gcstate <= GCSatomic)
N
N
N/*
N** some useful bit tricks
N*/
N#define resetbits(x,m)		((x) &= cast_byte(~(m)))
N#define setbits(x,m)		((x) |= (m))
N#define testbits(x,m)		((x) & (m))
N#define bitmask(b)		(1<<(b))
N#define bit2mask(b1,b2)		(bitmask(b1) | bitmask(b2))
N#define l_setbit(x,b)		setbits(x, bitmask(b))
N#define resetbit(x,b)		resetbits(x, bitmask(b))
N#define testbit(x,b)		testbits(x, bitmask(b))
N
N
N/*
N** Layout for bit use in 'marked' field. First three bits are
N** used for object "age" in generational mode.
N*/
N#define WHITE0BIT	3  /* object is white (type 0) */
N#define WHITE1BIT	4  /* object is white (type 1) */
N#define BLACKBIT	5  /* object is black */
N#define FINALIZEDBIT	6  /* object has been marked for finalization */
N#define TESTGRAYBIT	7  /* used by tests (luaL_checkmemory) */
N
N
N#define WHITEBITS	bit2mask(WHITE0BIT, WHITE1BIT)
N
N
N#define iswhite(x)      testbits((x)->marked, WHITEBITS)
N#define isblack(x)      testbit((x)->marked, BLACKBIT)
N#define isgray(x)  /* neither white nor black */  \
N	(!testbits((x)->marked, WHITEBITS | bitmask(BLACKBIT)))
X#define isgray(x)     	(!testbits((x)->marked, WHITEBITS | bitmask(BLACKBIT)))
N
N#define tofinalize(x)	testbit((x)->marked, FINALIZEDBIT)
N
N#define otherwhite(g)	((g)->currentwhite ^ WHITEBITS)
N#define isdeadm(ow,m)	((m) & (ow))
N#define isdead(g,v)	isdeadm(otherwhite(g), (v)->marked)
N
N#define changewhite(x)	((x)->marked ^= WHITEBITS)
N#define gray2black(x)	l_setbit((x)->marked, BLACKBIT)
N
N#define luaC_white(g)	cast_byte((g)->currentwhite & WHITEBITS)
N
N
N/* object age in generational mode */
N#define G_NEW		0	/* created in current cycle */
N#define G_SURVIVAL	1	/* created in previous cycle */
N#define G_OLD0		2	/* marked old by frw. barrier in this cycle */
N#define G_OLD1		3	/* first full cycle as old */
N#define G_OLD		4	/* really old object (not to be visited) */
N#define G_TOUCHED1	5	/* old object touched this cycle */
N#define G_TOUCHED2	6	/* old object touched in previous cycle */
N
N#define AGEBITS		7  /* all age bits (111) */
N
N#define getage(o)	((o)->marked & AGEBITS)
N#define setage(o,a)  ((o)->marked = cast_byte(((o)->marked & (~AGEBITS)) | a))
N#define isold(o)	(getage(o) > G_SURVIVAL)
N
N#define changeage(o,f,t)  \
N	check_exp(getage(o) == (f), (o)->marked ^= ((f)^(t)))
X#define changeage(o,f,t)  	check_exp(getage(o) == (f), (o)->marked ^= ((f)^(t)))
N
N
N/* Default Values for GC parameters */
N#define LUAI_GENMAJORMUL         100
N#define LUAI_GENMINORMUL         20
N
N/* wait memory to double before starting new cycle */
N#define LUAI_GCPAUSE    200     /* 200% */
N
N/*
N** some gc parameters are stored divided by 4 to allow a maximum value
N** larger than 1000 in a 'lu_byte'.
N*/
N#define getgcparam(p)	((p) * 4)
N#define setgcparam(p,v)	((p) = (v) / 4)
N
N#define LUAI_GCMUL      100
N
N/* how much to allocate before next GC step (log2) */
N#define LUAI_GCSTEPSIZE 13      /* 8 KB */
N
N
N/*
N** Does one step of collection when debt becomes positive. 'pre'/'pos'
N** allows some adjustments to be done only when needed. macro
N** 'condchangemem' is used only for heavy tests (forcing a full
N** GC cycle on every opportunity)
N*/
N#define luaC_condGC(L,pre,pos) \
N	{ if (G(L)->GCdebt > 0) { pre; luaC_step(L); pos;}; \
N	  condchangemem(L,pre,pos); }
X#define luaC_condGC(L,pre,pos) 	{ if (G(L)->GCdebt > 0) { pre; luaC_step(L); pos;}; 	  condchangemem(L,pre,pos); }
N
N/* more often than not, 'pre'/'pos' are empty */
N#define luaC_checkGC(L)		luaC_condGC(L,(void)0,(void)0)
N
N
N#define luaC_barrier(L,p,v) (  \
N	(iscollectable(v) && isblack(p) && iswhite(gcvalue(v))) ?  \
N	luaC_barrier_(L,obj2gco(p),gcvalue(v)) : cast_void(0))
X#define luaC_barrier(L,p,v) (  	(iscollectable(v) && isblack(p) && iswhite(gcvalue(v))) ?  	luaC_barrier_(L,obj2gco(p),gcvalue(v)) : cast_void(0))
N
N#define luaC_barrierback(L,p,v) (  \
N	(iscollectable(v) && isblack(p) && iswhite(gcvalue(v))) ? \
N	luaC_barrierback_(L,p) : cast_void(0))
X#define luaC_barrierback(L,p,v) (  	(iscollectable(v) && isblack(p) && iswhite(gcvalue(v))) ? 	luaC_barrierback_(L,p) : cast_void(0))
N
N#define luaC_objbarrier(L,p,o) (  \
N	(isblack(p) && iswhite(o)) ? \
N	luaC_barrier_(L,obj2gco(p),obj2gco(o)) : cast_void(0))
X#define luaC_objbarrier(L,p,o) (  	(isblack(p) && iswhite(o)) ? 	luaC_barrier_(L,obj2gco(p),obj2gco(o)) : cast_void(0))
N
N#define luaC_protobarrier(L,p,o) \
N	(isblack(p) ? luaC_protobarrier_(L,p) : cast_void(0))
X#define luaC_protobarrier(L,p,o) 	(isblack(p) ? luaC_protobarrier_(L,p) : cast_void(0))
N
NLUAI_FUNC void luaC_fix (lua_State *L, GCObject *o);
Xextern void luaC_fix (lua_State *L, GCObject *o);
NLUAI_FUNC void luaC_freeallobjects (lua_State *L);
Xextern void luaC_freeallobjects (lua_State *L);
NLUAI_FUNC void luaC_step (lua_State *L);
Xextern void luaC_step (lua_State *L);
NLUAI_FUNC void luaC_runtilstate (lua_State *L, int statesmask);
Xextern void luaC_runtilstate (lua_State *L, int statesmask);
NLUAI_FUNC void luaC_fullgc (lua_State *L, int isemergency);
Xextern void luaC_fullgc (lua_State *L, int isemergency);
NLUAI_FUNC GCObject *luaC_newobj (lua_State *L, int tt, size_t sz);
Xextern GCObject *luaC_newobj (lua_State *L, int tt, size_t sz);
NLUAI_FUNC void luaC_barrier_ (lua_State *L, GCObject *o, GCObject *v);
Xextern void luaC_barrier_ (lua_State *L, GCObject *o, GCObject *v);
NLUAI_FUNC void luaC_barrierback_ (lua_State *L, GCObject *o);
Xextern void luaC_barrierback_ (lua_State *L, GCObject *o);
NLUAI_FUNC void luaC_protobarrier_ (lua_State *L, Proto *p);
Xextern void luaC_protobarrier_ (lua_State *L, Proto *p);
NLUAI_FUNC void luaC_checkfinalizer (lua_State *L, GCObject *o, Table *mt);
Xextern void luaC_checkfinalizer (lua_State *L, GCObject *o, Table *mt);
NLUAI_FUNC void luaC_changemode (lua_State *L, int newmode);
Xextern void luaC_changemode (lua_State *L, int newmode);
N
N
N#endif
L 34 "..\..\..\M6P1(L)_Lua\lua\ltable.c" 2
N#include "lmem.h"
N#include "lobject.h"
N#include "lstate.h"
N#include "lstring.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lstring.h" 1
N/*
N** $Id: lstring.h,v 1.63 2017/11/23 19:29:04 roberto Exp roberto $
N** String table (keep all strings handled by Lua)
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lstring_h
N#define lstring_h
N
N#include "lgc.h"
N#include "lobject.h"
N#include "lstate.h"
N
N
N/*
N** Memory-allocation error message must be preallocated (it cannot
N** be created after memory is exhausted)
N*/
N#define MEMERRMSG       "not enough memory"
N
N
N#define sizelstring(l)  (sizeof(union UTString) + ((l) + 1) * sizeof(char))
N
N#define luaS_newliteral(L, s)	(luaS_newlstr(L, "" s, \
N                                 (sizeof(s)/sizeof(char))-1))
X#define luaS_newliteral(L, s)	(luaS_newlstr(L, "" s,                                  (sizeof(s)/sizeof(char))-1))
N
N
N/*
N** test whether a string is a reserved word
N*/
N#define isreserved(s)	((s)->tt == LUA_TSHRSTR && (s)->extra > 0)
N
N
N/*
N** equality for short strings, which are always internalized
N*/
N#define eqshrstr(a,b)	check_exp((a)->tt == LUA_TSHRSTR, (a) == (b))
N
N
NLUAI_FUNC unsigned int luaS_hash (const char *str, size_t l, unsigned int seed);
Xextern unsigned int luaS_hash (const char *str, size_t l, unsigned int seed);
NLUAI_FUNC unsigned int luaS_hashlongstr (TString *ts);
Xextern unsigned int luaS_hashlongstr (TString *ts);
NLUAI_FUNC int luaS_eqlngstr (TString *a, TString *b);
Xextern int luaS_eqlngstr (TString *a, TString *b);
NLUAI_FUNC void luaS_resize (lua_State *L, int newsize);
Xextern void luaS_resize (lua_State *L, int newsize);
NLUAI_FUNC void luaS_clearcache (global_State *g);
Xextern void luaS_clearcache (global_State *g);
NLUAI_FUNC void luaS_init (lua_State *L);
Xextern void luaS_init (lua_State *L);
NLUAI_FUNC void luaS_remove (lua_State *L, TString *ts);
Xextern void luaS_remove (lua_State *L, TString *ts);
NLUAI_FUNC Udata *luaS_newudata (lua_State *L, size_t s, int nuvalue);
Xextern Udata *luaS_newudata (lua_State *L, size_t s, int nuvalue);
NLUAI_FUNC TString *luaS_newlstr (lua_State *L, const char *str, size_t l);
Xextern TString *luaS_newlstr (lua_State *L, const char *str, size_t l);
NLUAI_FUNC TString *luaS_new (lua_State *L, const char *str);
Xextern TString *luaS_new (lua_State *L, const char *str);
NLUAI_FUNC TString *luaS_createlngstrobj (lua_State *L, size_t l);
Xextern TString *luaS_createlngstrobj (lua_State *L, size_t l);
N
N
N#endif
L 38 "..\..\..\M6P1(L)_Lua\lua\ltable.c" 2
N#include "ltable.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\ltable.h" 1
N/*
N** $Id: ltable.h,v 2.25 2017/06/09 16:48:44 roberto Exp roberto $
N** Lua tables (hash)
N** See Copyright Notice in lua.h
N*/
N
N#ifndef ltable_h
N#define ltable_h
N
N#include "lobject.h"
N
N
N#define gnode(t,i)	(&(t)->node[i])
N#define gval(n)		(&(n)->i_val)
N#define gnext(n)	((n)->u.next)
N
N
N#define invalidateTMcache(t)	((t)->flags = 0)
N
N
N/* true when 't' is using 'dummynode' as its hash part */
N#define isdummy(t)		((t)->lastfree == NULL)
N
N#define luaH_emptyobject	(&luaH_emptyobject_)
N
N
N/* allocated size for hash nodes */
N#define allocsizenode(t)	(isdummy(t) ? 0 : sizenode(t))
N
N
N/* returns the Node, given the value of a table entry */
N#define nodefromval(v) 	cast(Node *, (v))
N
N
NLUAI_DDEC const TValue luaH_emptyobject_;
Xextern const TValue luaH_emptyobject_;
N
N
NLUAI_FUNC const TValue *luaH_getint (Table *t, lua_Integer key);
Xextern const TValue *luaH_getint (Table *t, lua_Integer key);
NLUAI_FUNC void luaH_setint (lua_State *L, Table *t, lua_Integer key,
Xextern void luaH_setint (lua_State *L, Table *t, lua_Integer key,
N                                                    TValue *value);
NLUAI_FUNC const TValue *luaH_getshortstr (Table *t, TString *key);
Xextern const TValue *luaH_getshortstr (Table *t, TString *key);
NLUAI_FUNC const TValue *luaH_getstr (Table *t, TString *key);
Xextern const TValue *luaH_getstr (Table *t, TString *key);
NLUAI_FUNC const TValue *luaH_get (Table *t, const TValue *key);
Xextern const TValue *luaH_get (Table *t, const TValue *key);
NLUAI_FUNC TValue *luaH_newkey (lua_State *L, Table *t, const TValue *key);
Xextern TValue *luaH_newkey (lua_State *L, Table *t, const TValue *key);
NLUAI_FUNC TValue *luaH_set (lua_State *L, Table *t, const TValue *key);
Xextern TValue *luaH_set (lua_State *L, Table *t, const TValue *key);
NLUAI_FUNC Table *luaH_new (lua_State *L);
Xextern Table *luaH_new (lua_State *L);
NLUAI_FUNC void luaH_resize (lua_State *L, Table *t, unsigned int nasize,
Xextern void luaH_resize (lua_State *L, Table *t, unsigned int nasize,
N                                                    unsigned int nhsize);
NLUAI_FUNC void luaH_resizearray (lua_State *L, Table *t, unsigned int nasize);
Xextern void luaH_resizearray (lua_State *L, Table *t, unsigned int nasize);
NLUAI_FUNC void luaH_free (lua_State *L, Table *t);
Xextern void luaH_free (lua_State *L, Table *t);
NLUAI_FUNC int luaH_next (lua_State *L, Table *t, StkId key);
Xextern int luaH_next (lua_State *L, Table *t, StkId key);
NLUAI_FUNC lua_Unsigned luaH_getn (Table *t);
Xextern lua_Unsigned luaH_getn (Table *t);
N
N
N#if defined(LUA_DEBUG)
X#if 0L
SLUAI_FUNC Node *luaH_mainposition (const Table *t, const TValue *key);
SLUAI_FUNC int luaH_isdummy (const Table *t);
N#endif
N
N
N#endif
L 39 "..\..\..\M6P1(L)_Lua\lua\ltable.c" 2
N#include "lvm.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lvm.h" 1
N/*
N** $Id: lvm.h,v 2.50 2018/02/21 12:54:26 roberto Exp roberto $
N** Lua virtual machine
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lvm_h
N#define lvm_h
N
N
N#include "ldo.h"
N#include "lobject.h"
N#include "ltm.h"
N
N
N#if !defined(LUA_NOCVTN2S)
X#if !0L
N#define cvt2str(o)	ttisnumber(o)
N#else
S#define cvt2str(o)	0	/* no conversion from numbers to strings */
N#endif
N
N
N#if !defined(LUA_NOCVTS2N)
X#if !0L
N#define cvt2num(o)	ttisstring(o)
N#else
S#define cvt2num(o)	0	/* no conversion from strings to numbers */
N#endif
N
N
N/*
N** You can define LUA_FLOORN2I if you want to convert floats to integers
N** by flooring them (instead of raising an error if they are not
N** integral values)
N*/
N#if !defined(LUA_FLOORN2I)
X#if !0L
N#define LUA_FLOORN2I		0
N#endif
N
N
N/* convert an object to a float (including string coercion) */
N#define tonumber(o,n) \
N	(ttisfloat(o) ? (*(n) = fltvalue(o), 1) : luaV_tonumber_(o,n))
X#define tonumber(o,n) 	(ttisfloat(o) ? (*(n) = fltvalue(o), 1) : luaV_tonumber_(o,n))
N
N
N/* convert an object to a float (without string coercion) */
N#define tonumberns(o,n) \
N	(ttisfloat(o) ? ((n) = fltvalue(o), 1) : \
N	(ttisinteger(o) ? ((n) = cast_num(ivalue(o)), 1) : 0))
X#define tonumberns(o,n) 	(ttisfloat(o) ? ((n) = fltvalue(o), 1) : 	(ttisinteger(o) ? ((n) = cast_num(ivalue(o)), 1) : 0))
N
N
N/* convert an object to an integer (including string coercion) */
N#define tointeger(o,i) \
N  (ttisinteger(o) ? (*(i) = ivalue(o), 1) : luaV_tointeger(o,i,LUA_FLOORN2I))
X#define tointeger(o,i)   (ttisinteger(o) ? (*(i) = ivalue(o), 1) : luaV_tointeger(o,i,LUA_FLOORN2I))
N
N
N/* convert an object to an integer (without string coercion) */
N#define tointegerns(o,i) \
N  (ttisinteger(o) ? (*(i) = ivalue(o), 1) : luaV_tointegerns(o,i,LUA_FLOORN2I))
X#define tointegerns(o,i)   (ttisinteger(o) ? (*(i) = ivalue(o), 1) : luaV_tointegerns(o,i,LUA_FLOORN2I))
N
N
N#define intop(op,v1,v2) l_castU2S(l_castS2U(v1) op l_castS2U(v2))
N
N#define luaV_rawequalobj(t1,t2)		luaV_equalobj(NULL,t1,t2)
N
N
N/*
N** fast track for 'gettable': if 't' is a table and 't[k]' is present,
N** return 1 with 'slot' pointing to 't[k]' (position of final result).
N** Otherwise, return 0 (meaning it will have to check metamethod)
N** with 'slot' pointing to an empty 't[k]' (if 't' is a table) or NULL
N** (otherwise). 'f' is the raw get function to use.
N*/
N#define luaV_fastget(L,t,k,slot,f) \
N  (!ttistable(t)  \
N   ? (slot = NULL, 0)  /* not a table; 'slot' is NULL and result is 0 */  \
N   : (slot = f(hvalue(t), k),  /* else, do raw access */  \
N      !isempty(slot)))  /* result not empty? */
X#define luaV_fastget(L,t,k,slot,f)   (!ttistable(t)     ? (slot = NULL, 0)        : (slot = f(hvalue(t), k),           !isempty(slot)))   
N
N
N/*
N** Special case of 'luaV_fastget' for integers, inlining the fast case
N** of 'luaH_getint'.
N*/
N#define luaV_fastgeti(L,t,k,slot) \
N  (!ttistable(t)  \
N   ? (slot = NULL, 0)  /* not a table; 'slot' is NULL and result is 0 */  \
N   : (slot = (l_castS2U(k) - 1u < hvalue(t)->sizearray) \
N              ? &hvalue(t)->array[k - 1] : luaH_getint(hvalue(t), k), \
N      !isempty(slot)))  /* result not empty? */
X#define luaV_fastgeti(L,t,k,slot)   (!ttistable(t)     ? (slot = NULL, 0)        : (slot = (l_castS2U(k) - 1u < hvalue(t)->sizearray)               ? &hvalue(t)->array[k - 1] : luaH_getint(hvalue(t), k),       !isempty(slot)))   
N
N
N/*
N** Finish a fast set operation (when fast get succeeds). In that case,
N** 'slot' points to the place to put the value.
N*/
N#define luaV_finishfastset(L,t,slot,v) \
N    { setobj2t(L, cast(TValue *,slot), v); \
N      luaC_barrierback(L, gcvalue(t), v); }
X#define luaV_finishfastset(L,t,slot,v)     { setobj2t(L, cast(TValue *,slot), v);       luaC_barrierback(L, gcvalue(t), v); }
N
N
N
N
NLUAI_FUNC int luaV_equalobj (lua_State *L, const TValue *t1, const TValue *t2);
Xextern int luaV_equalobj (lua_State *L, const TValue *t1, const TValue *t2);
NLUAI_FUNC int luaV_lessthan (lua_State *L, const TValue *l, const TValue *r);
Xextern int luaV_lessthan (lua_State *L, const TValue *l, const TValue *r);
NLUAI_FUNC int luaV_lessequal (lua_State *L, const TValue *l, const TValue *r);
Xextern int luaV_lessequal (lua_State *L, const TValue *l, const TValue *r);
NLUAI_FUNC int luaV_tonumber_ (const TValue *obj, lua_Number *n);
Xextern int luaV_tonumber_ (const TValue *obj, lua_Number *n);
NLUAI_FUNC int luaV_tointeger (const TValue *obj, lua_Integer *p, int mode);
Xextern int luaV_tointeger (const TValue *obj, lua_Integer *p, int mode);
NLUAI_FUNC int luaV_tointegerns (const TValue *obj, lua_Integer *p, int mode);
Xextern int luaV_tointegerns (const TValue *obj, lua_Integer *p, int mode);
NLUAI_FUNC int luaV_flttointeger (lua_Number n, lua_Integer *p, int mode);
Xextern int luaV_flttointeger (lua_Number n, lua_Integer *p, int mode);
NLUAI_FUNC void luaV_finishget (lua_State *L, const TValue *t, TValue *key,
Xextern void luaV_finishget (lua_State *L, const TValue *t, TValue *key,
N                               StkId val, const TValue *slot);
NLUAI_FUNC void luaV_finishset (lua_State *L, const TValue *t, TValue *key,
Xextern void luaV_finishset (lua_State *L, const TValue *t, TValue *key,
N                               TValue *val, const TValue *slot);
NLUAI_FUNC void luaV_finishOp (lua_State *L);
Xextern void luaV_finishOp (lua_State *L);
NLUAI_FUNC void luaV_execute (lua_State *L, CallInfo *ci);
Xextern void luaV_execute (lua_State *L, CallInfo *ci);
NLUAI_FUNC void luaV_concat (lua_State *L, int total);
Xextern void luaV_concat (lua_State *L, int total);
NLUAI_FUNC lua_Integer luaV_div (lua_State *L, lua_Integer x, lua_Integer y);
Xextern lua_Integer luaV_div (lua_State *L, lua_Integer x, lua_Integer y);
NLUAI_FUNC lua_Integer luaV_mod (lua_State *L, lua_Integer x, lua_Integer y);
Xextern lua_Integer luaV_mod (lua_State *L, lua_Integer x, lua_Integer y);
NLUAI_FUNC lua_Integer luaV_shiftl (lua_Integer x, lua_Integer y);
Xextern lua_Integer luaV_shiftl (lua_Integer x, lua_Integer y);
NLUAI_FUNC void luaV_objlen (lua_State *L, StkId ra, const TValue *rb);
Xextern void luaV_objlen (lua_State *L, StkId ra, const TValue *rb);
N
N#endif
L 40 "..\..\..\M6P1(L)_Lua\lua\ltable.c" 2
N
N
N/*
N** MAXABITS is the largest integer such that MAXASIZE fits in an
N** unsigned int.
N*/
N#define MAXABITS	cast_int(sizeof(int) * CHAR_BIT - 1)
N
N
N/*
N** MAXASIZE is the maximum size of the array part. It is the minimum
N** between 2^MAXABITS and the maximum size such that, measured in bytes,
N** it fits in a 'size_t'.
N*/
N#define MAXASIZE	luaM_limitN(1u << MAXABITS, TValue)
N
N/*
N** MAXHBITS is the largest integer such that 2^MAXHBITS fits in a
N** signed int.
N*/
N#define MAXHBITS	(MAXABITS - 1)
N
N
N/*
N** MAXHSIZE is the maximum size of the hash part. It is the minimum
N** between 2^MAXHBITS and the maximum size such that, measured in bytes,
N** it fits in a 'size_t'.
N*/
N#define MAXHSIZE	luaM_limitN(1u << MAXHBITS, Node)
N
N
N#define hashpow2(t,n)		(gnode(t, lmod((n), sizenode(t))))
N
N#define hashstr(t,str)		hashpow2(t, (str)->hash)
N#define hashboolean(t,p)	hashpow2(t, p)
N#define hashint(t,i)		hashpow2(t, i)
N
N
N/*
N** for some types, it is better to avoid modulus by power of 2, as
N** they tend to have many 2 factors.
N*/
N#define hashmod(t,n)	(gnode(t, ((n) % ((sizenode(t)-1)|1))))
N
N
N#define hashpointer(t,p)	hashmod(t, point2uint(p))
N
N
N#define dummynode		(&dummynode_)
N
Nstatic const Node dummynode_ = {
N  {{NULL}, LUA_TEMPTY,  /* value's value and type */
X  {{0}, (0 | (1 << 4)),   
N   LUA_TNIL, 0, {NULL}}  /* key type, next, and key value */
X   0, 0, {0}}   
N};
N
N
NLUAI_DDEF const TValue luaH_emptyobject_ = {EMPTYCONSTANT};
X const TValue luaH_emptyobject_ = {{0}, (0 | (1 << 4))};
N
N
N/*
N** Hash for floating-point numbers.
N** The main computation should be just
N**     n = frexp(n, &i); return (n * INT_MAX) + i
N** but there are some numerical subtleties.
N** In a two-complement representation, INT_MAX does not has an exact
N** representation as a float, but INT_MIN does; because the absolute
N** value of 'frexp' is smaller than 1 (unless 'n' is inf/NaN), the
N** absolute value of the product 'frexp * -INT_MIN' is smaller or equal
N** to INT_MAX. Next, the use of 'unsigned int' avoids overflows when
N** adding 'i'; the use of '~u' (instead of '-u') avoids problems with
N** INT_MIN.
N*/
N#if !defined(l_hashfloat)
X#if !0L
Nstatic int l_hashfloat (lua_Number n) {
N  int i;
N  lua_Integer ni;
N  n = l_mathop(frexp)(n, &i) * -cast_num(INT_MIN);
X  n = frexp(n, &i) * -((lua_Number)(((~0x7fffffff))));
N  if (!lua_numbertointeger(n, &ni)) {  /* is 'n' inf/-inf/NaN? */
X  if (!((n) >= (double)((~0x7fffffffffffffffLL)) && (n) < -(double)((~0x7fffffffffffffffLL)) && (*(&ni) = (long long)(n), 1))) {   
N    lua_assert(luai_numisnan(n) || l_mathop(fabs)(n) == cast_num(HUGE_VAL));
X    ((void)0);
N    return 0;
N  }
N  else {  /* normal case */
N    unsigned int u = cast_uint(i) + cast_uint(ni);
X    unsigned int u = ((unsigned int)((i))) + ((unsigned int)((ni)));
N    return cast_int(u <= cast_uint(INT_MAX) ? u : ~u);
X    return ((int)((u <= ((unsigned int)((0x7fffffff))) ? u : ~u)));
N  }
N}
N#endif
N
N
N/*
N** returns the 'main' position of an element in a table (that is,
N** the index of its hash value). The key comes broken (tag in 'ktt'
N** and value in 'vkl') so that we can call it on keys inserted into
N** nodes.
N*/
Nstatic Node *mainposition (const Table *t, int ktt, const Value *kvl) {
N  switch (withvariant(ktt)) {
X  switch (((ktt) & 0x3F)) {
N    case LUA_TNUMINT:
X    case (3 | (2 << 4)):
N      return hashint(t, ivalueraw(*kvl));
X      return ((&(t)->node[(((((int)((((((*kvl). i))) & ((((1<<((t)->lsizenode))))-1)))))))]));
N    case LUA_TNUMFLT:
X    case (3 | (1 << 4)):
N      return hashmod(t, l_hashfloat(fltvalueraw(*kvl)));
X      return ((&(t)->node[((l_hashfloat(((*kvl). n))) % ((((1<<((t)->lsizenode)))-1)|1))]));
N    case LUA_TSHRSTR:
X    case (4 | (1 << 4)):
N      return hashstr(t, tsvalueraw(*kvl));
X      return ((&(t)->node[(((((int)(((((((&((((union GCUnion *)(((*kvl). gc))))->ts))))->hash)) & ((((1<<((t)->lsizenode))))-1)))))))]));
N    case LUA_TLNGSTR:
X    case (4 | (2 << 4)):
N      return hashpow2(t, luaS_hashlongstr(tsvalueraw(*kvl)));
X      return ((&(t)->node[(((((int)((((luaS_hashlongstr(((&((((union GCUnion *)(((*kvl). gc))))->ts)))))) & ((((1<<((t)->lsizenode))))-1)))))))]));
N    case LUA_TBOOLEAN:
X    case 1:
N      return hashboolean(t, bvalueraw(*kvl));
X      return ((&(t)->node[(((((int)((((((*kvl). b))) & ((((1<<((t)->lsizenode))))-1)))))))]));
N    case LUA_TLIGHTUSERDATA:
X    case 2:
N      return hashpointer(t, pvalueraw(*kvl));
X      return ((&(t)->node[((((unsigned int)((size_t)(((*kvl). p)) & 0xffffffffU))) % ((((1<<((t)->lsizenode)))-1)|1))]));
N    case LUA_TLCF:
X    case (6 | (2 << 4)):
N      return hashpointer(t, fvalueraw(*kvl));
X      return ((&(t)->node[((((unsigned int)((size_t)(((*kvl). f)) & 0xffffffffU))) % ((((1<<((t)->lsizenode)))-1)|1))]));
N    default:
N      return hashpointer(t, gcvalueraw(*kvl));
X      return ((&(t)->node[((((unsigned int)((size_t)(((*kvl). gc)) & 0xffffffffU))) % ((((1<<((t)->lsizenode)))-1)|1))]));
N  }
N}
N
N
Nstatic Node *mainpositionTV (const Table *t, const TValue *key) {
N  return mainposition(t, rawtt(key), valraw(key));
X  return mainposition(t, ((key)->tt_), (&((key)->value_)));
N}
N
N
N/*
N** Check whether key 'k1' is equal to the key in node 'n2'.
N** This equality is raw, so there are no metamethods. Floats
N** with integer values have been normalized, so integers cannot
N** be equal to floats. It is assumed that 'eqshrstr' is simply
N** pointer equality, so that short strings are handled in the
N** default case.
N*/
Nstatic int equalkey (const TValue *k1, const Node *n2) {
N  if (rawtt(k1) != keytt(n2))  /* not the same variants? */
X  if (((k1)->tt_) != ((n2)->u . key_tt))   
N   return 0;  /* cannot be same key */
N  switch (ttypetag(k1)) {
X  switch (((((k1)->tt_)) & 0x3F)) {
N    case LUA_TNIL:
X    case 0:
N      return 1;
N    case LUA_TNUMINT:
X    case (3 | (2 << 4)):
N      return (ivalue(k1) == keyival(n2));
X      return ((((k1)->value_). i) == (((n2)->u . key_val). i));
N    case LUA_TNUMFLT:
X    case (3 | (1 << 4)):
N      return luai_numeq(fltvalue(k1), fltvalueraw(keyval(n2)));
X      return (((((k1)->value_). n))==(((((n2)->u . key_val)). n)));
N    case LUA_TBOOLEAN:
X    case 1:
N      return bvalue(k1) == bvalueraw(keyval(n2));
X      return (((k1)->value_). b) == ((((n2)->u . key_val)). b);
N    case LUA_TLIGHTUSERDATA:
X    case 2:
N      return pvalue(k1) == pvalueraw(keyval(n2));
X      return (((k1)->value_). p) == ((((n2)->u . key_val)). p);
N    case LUA_TLCF:
X    case (6 | (2 << 4)):
N      return fvalue(k1) == fvalueraw(keyval(n2));
X      return (((k1)->value_). f) == ((((n2)->u . key_val)). f);
N    case LUA_TLNGSTR:
X    case (4 | (2 << 4)):
N      return luaS_eqlngstr(tsvalue(k1), keystrval(n2));
X      return luaS_eqlngstr(((&((((union GCUnion *)((((k1)->value_). gc))))->ts))), ((&((((union GCUnion *)((((n2)->u . key_val). gc))))->ts))));
N    default:
N      return gcvalue(k1) == gcvalueraw(keyval(n2));
X      return (((k1)->value_). gc) == ((((n2)->u . key_val)). gc);
N  }
N}
N
N
N/*
N** "Generic" get version. (Not that generic: not valid for integers,
N** which may be in array part, nor for floats with integral values.)
N*/
Nstatic const TValue *getgeneric (Table *t, const TValue *key) {
N  Node *n = mainpositionTV(t, key);
N  for (;;) {  /* check whether 'key' is somewhere in the chain */
N    if (equalkey(key, n))
N      return gval(n);  /* that's it */
X      return (&(n)->i_val);   
N    else {
N      int nx = gnext(n);
X      int nx = ((n)->u . next);
N      if (nx == 0)
N        return luaH_emptyobject;  /* not found */
X        return (&luaH_emptyobject_);   
N      n += nx;
N    }
N  }
N}
N
N
N/*
N** returns the index for 'k' if 'k' is an appropriate key to live in
N** the array part of a table, 0 otherwise.
N*/
Nstatic unsigned int arrayindex (lua_Integer k) {
N  if (0 < k && l_castS2U(k) <= MAXASIZE)
X  if (0 < k && ((lua_Unsigned)(k)) <= ((((size_t)((1u << ((int)((sizeof(int) * 8 - 1)))))) <= ((size_t)(~(size_t)0))/sizeof(TValue)) ? (1u << ((int)((sizeof(int) * 8 - 1)))) : ((unsigned int)(((((size_t)(~(size_t)0))/sizeof(TValue)))))))
N    return cast_uint(k);  /* 'key' is an appropriate array index */
X    return ((unsigned int)((k)));   
N  else
N    return 0;
N}
N
N
N/*
N** returns the index of a 'key' for table traversals. First goes all
N** elements in the array part, then elements in the hash part. The
N** beginning of a traversal is signaled by 0.
N*/
Nstatic unsigned int findindex (lua_State *L, Table *t, TValue *key) {
N  unsigned int i;
N  if (ttisnil(key)) return 0;  /* first iteration */
X  if (((((key))->tt_) == (0))) return 0;   
N  i = ttisinteger(key) ? arrayindex(ivalue(key)) : 0;
X  i = ((((key))->tt_) == ((3 | (2 << 4)))) ? arrayindex((((key)->value_). i)) : 0;
N  if (i != 0 && i <= t->sizearray)  /* is 'key' inside array part? */
N    return i;  /* yes; that's the index */
N  else {
N    const TValue *n = getgeneric(t, key);
N    if (n == luaH_emptyobject)
X    if (n == (&luaH_emptyobject_))
N      luaG_runerror(L, "invalid key to 'next'");  /* key not found */
N    i = cast_int(nodefromval(n) - gnode(t, 0));  /* key index in hash table */
X    i = ((int)((((Node *)((n))) - (&(t)->node[0]))));   
N    /* hash elements are numbered after array ones */
N    return (i + 1) + t->sizearray;
N  }
N}
N
N
Nint luaH_next (lua_State *L, Table *t, StkId key) {
N  unsigned int i = findindex(L, t, s2v(key));  /* find original element */
X  unsigned int i = findindex(L, t, (&(key)->val));   
N  for (; i < t->sizearray; i++) {  /* try first array part */
N    if (!isempty(&t->array[i])) {  /* a non-empty entry? */
X    if (!(((((((&t->array[i]))->tt_)) & 0x0F)) == (0))) {   
N      setivalue(s2v(key), i + 1);
X      { TValue *io=((&(key)->val)); ((io)->value_). i=(i + 1); ((io)->tt_=((3 | (2 << 4)))); };
N      setobj2s(L, key + 1, &t->array[i]);
X      { TValue *io1=((&(key + 1)->val)); const TValue *io2=(&t->array[i]); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N      return 1;
N    }
N  }
N  for (i -= t->sizearray; cast_int(i) < sizenode(t); i++) {  /* hash part */
X  for (i -= t->sizearray; ((int)((i))) < ((1<<((t)->lsizenode))); i++) {   
N    if (!isempty(gval(gnode(t, i)))) {  /* a non-empty entry? */
X    if (!((((((((&((&(t)->node[i]))->i_val)))->tt_)) & 0x0F)) == (0))) {   
N      Node *n = gnode(t, i);
X      Node *n = (&(t)->node[i]);
N      getnodekey(L, s2v(key), n);
X      { TValue *io_=((&(key)->val)); const Node *n_=(n); io_->value_ = n_->u . key_val; io_->tt_ = n_->u . key_tt; (void)L; ((void)0); };
N      setobj2s(L, key + 1, gval(n));
X      { TValue *io1=((&(key + 1)->val)); const TValue *io2=((&(n)->i_val)); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N      return 1;
N    }
N  }
N  return 0;  /* no more elements */
N}
N
N
Nstatic void freehash (lua_State *L, Table *t) {
N  if (!isdummy(t))
X  if (!((t)->lastfree == 0))
N    luaM_freearray(L, t->node, cast_sizet(sizenode(t)));
X    luaM_free_(L, (t->node), (((size_t)((((1<<((t)->lsizenode)))))))*sizeof(*(t->node)));
N}
N
N
N/*
N** {=============================================================
N** Rehash
N** ==============================================================
N*/
N
N/*
N** Compute the optimal size for the array part of table 't'. 'nums' is a
N** "count array" where 'nums[i]' is the number of integers in the table
N** between 2^(i - 1) + 1 and 2^i. 'pna' enters with the total number of
N** integer keys in the table and leaves with the number of keys that
N** will go to the array part; return the optimal size.  (The condition
N** 'twotoi > 0' in the for loop stops the loop if 'twotoi' overflows.)
N*/
Nstatic unsigned int computesizes (unsigned int nums[], unsigned int *pna) {
N  int i;
N  unsigned int twotoi;  /* 2^i (candidate for optimal size) */
N  unsigned int a = 0;  /* number of elements smaller than 2^i */
N  unsigned int na = 0;  /* number of elements to go to array part */
N  unsigned int optimal = 0;  /* optimal size for array part */
N  /* loop while keys can fill more than half of total size */
N  for (i = 0, twotoi = 1;
N       twotoi > 0 && *pna > twotoi / 2;
N       i++, twotoi *= 2) {
N    a += nums[i];
N    if (a > twotoi/2) {  /* more than half elements present? */
N      optimal = twotoi;  /* optimal size (till now) */
N      na = a;  /* all elements up to 'optimal' will go to array part */
N    }
N  }
N  lua_assert((optimal == 0 || optimal / 2 < na) && na <= optimal);
X  ((void)0);
N  *pna = na;
N  return optimal;
N}
N
N
Nstatic int countint (lua_Integer key, unsigned int *nums) {
N  unsigned int k = arrayindex(key);
N  if (k != 0) {  /* is 'key' an appropriate array index? */
N    nums[luaO_ceillog2(k)]++;  /* count as such */
N    return 1;
N  }
N  else
N    return 0;
N}
N
N
N/*
N** Count keys in array part of table 't': Fill 'nums[i]' with
N** number of keys that will go into corresponding slice and return
N** total number of non-nil keys.
N*/
Nstatic unsigned int numusearray (const Table *t, unsigned int *nums) {
N  int lg;
N  unsigned int ttlg;  /* 2^lg */
N  unsigned int ause = 0;  /* summation of 'nums' */
N  unsigned int i = 1;  /* count to traverse all array keys */
N  /* traverse each slice */
N  for (lg = 0, ttlg = 1; lg <= MAXABITS; lg++, ttlg *= 2) {
X  for (lg = 0, ttlg = 1; lg <= ((int)((sizeof(int) * 8 - 1))); lg++, ttlg *= 2) {
N    unsigned int lc = 0;  /* counter */
N    unsigned int lim = ttlg;
N    if (lim > t->sizearray) {
N      lim = t->sizearray;  /* adjust upper limit */
N      if (i > lim)
N        break;  /* no more elements to count */
N    }
N    /* count elements in range (2^(lg - 1), 2^lg] */
N    for (; i <= lim; i++) {
N      if (!isempty(&t->array[i-1]))
X      if (!(((((((&t->array[i-1]))->tt_)) & 0x0F)) == (0)))
N        lc++;
N    }
N    nums[lg] += lc;
N    ause += lc;
N  }
N  return ause;
N}
N
N
Nstatic int numusehash (const Table *t, unsigned int *nums, unsigned int *pna) {
N  int totaluse = 0;  /* total number of elements */
N  int ause = 0;  /* elements added to 'nums' (can go to array part) */
N  int i = sizenode(t);
X  int i = ((1<<((t)->lsizenode)));
N  while (i--) {
N    Node *n = &t->node[i];
N    if (!isempty(gval(n))) {
X    if (!((((((((&(n)->i_val)))->tt_)) & 0x0F)) == (0))) {
N      if (keyisinteger(n))
X      if ((((n)->u . key_tt) == (3 | (2 << 4))))
N        ause += countint(keyival(n), nums);
X        ause += countint((((n)->u . key_val). i), nums);
N      totaluse++;
N    }
N  }
N  *pna += ause;
N  return totaluse;
N}
N
N
N/*
N** Creates an array for the hash part of a table with the given
N** size, or reuses the dummy node if size is zero.
N** The computation for size overflow is in two steps: the first
N** comparison ensures that the shift in the second one does not
N** overflow.
N*/
Nstatic void setnodevector (lua_State *L, Table *t, unsigned int size) {
N  if (size == 0) {  /* no elements to hash part? */
N    t->node = cast(Node *, dummynode);  /* use common 'dummynode' */
X    t->node = ((Node *)((&dummynode_)));   
N    t->lsizenode = 0;
N    t->lastfree = NULL;  /* signal that it is using dummy node */
X    t->lastfree = 0;   
N  }
N  else {
N    int i;
N    int lsize = luaO_ceillog2(size);
N    if (lsize > MAXHBITS || (1u << lsize) > MAXHSIZE)
X    if (lsize > (((int)((sizeof(int) * 8 - 1))) - 1) || (1u << lsize) > ((((size_t)((1u << (((int)((sizeof(int) * 8 - 1))) - 1)))) <= ((size_t)(~(size_t)0))/sizeof(Node)) ? (1u << (((int)((sizeof(int) * 8 - 1))) - 1)) : ((unsigned int)(((((size_t)(~(size_t)0))/sizeof(Node)))))))
N      luaG_runerror(L, "table overflow");
N    size = twoto(lsize);
X    size = (1<<(lsize));
N    t->node = luaM_newvector(L, size, Node);
X    t->node = ((Node*)(luaM_malloc_(L, (size)*sizeof(Node), 0)));
N    for (i = 0; i < (int)size; i++) {
N      Node *n = gnode(t, i);
X      Node *n = (&(t)->node[i]);
N      gnext(n) = 0;
X      ((n)->u . next) = 0;
N      setnilkey(n);
X      (((n)->u . key_tt) = 0);
N      setempty(gval(n));
X      (((&(n)->i_val))->tt_=((0 | (1 << 4))));
N    }
N    t->lsizenode = cast_byte(lsize);
X    t->lsizenode = ((lu_byte)((lsize)));
N    t->lastfree = gnode(t, size);  /* all positions are free */
X    t->lastfree = (&(t)->node[size]);   
N  }
N}
N
N
N/*
N** (Re)insert all elements from the hash part of 'ot' into table 't'.
N*/
Nstatic void reinsert (lua_State *L, Table *ot, Table *t) {
N  int j;
N  int size = sizenode(ot);
X  int size = ((1<<((ot)->lsizenode)));
N  for (j = 0; j < size; j++) {
N    Node *old = gnode(ot, j);
X    Node *old = (&(ot)->node[j]);
N    if (!isempty(gval(old))) {
X    if (!((((((((&(old)->i_val)))->tt_)) & 0x0F)) == (0))) {
N      /* doesn't need barrier/invalidate cache, as entry was
N         already present in the table */
N      TValue k;
N      getnodekey(L, &k, old);
X      { TValue *io_=(&k); const Node *n_=(old); io_->value_ = n_->u . key_val; io_->tt_ = n_->u . key_tt; (void)L; ((void)0); };
N      setobjt2t(L, luaH_set(L, t, &k), gval(old));
X      { TValue *io1=(luaH_set(L, t, &k)); const TValue *io2=((&(old)->i_val)); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N    }
N  }
N}
N
N
N/*
N** Exchange the hash part of 't1' and 't2'.
N*/
Nstatic void exchangehashpart (Table *t1, Table *t2) {
N  lu_byte lsizenode = t1->lsizenode;
N  Node *node = t1->node;
N  Node *lastfree = t1->lastfree;
N  t1->lsizenode = t2->lsizenode;
N  t1->node = t2->node;
N  t1->lastfree = t2->lastfree;
N  t2->lsizenode = lsizenode;
N  t2->node = node;
N  t2->lastfree = lastfree;
N}
N
N
N/*
N** Resize table 't' for the new given sizes. Both allocations (for
N** the hash part and for the array part) can fail, which creates some
N** subtleties. If the first allocation, for the hash part, fails, an
N** error is raised and that is it. Otherwise, it copies the elements from
N** the shrinking part of the array (if it is shrinking) into the new
N** hash. Then it reallocates the array part.  If that fails, the table
N** is in its original state; the function frees the new hash part and then
N** raises the allocation error. Otherwise, it sets the new hash part
N** into the table, initializes the new part of the array (if any) with
N** nils and reinserts the elements of the old hash back into the new
N** parts of the table.
N*/
Nvoid luaH_resize (lua_State *L, Table *t, unsigned int newasize,
N                                          unsigned int nhsize) {
N  unsigned int i;
N  Table newt;  /* to keep the new hash part */
N  unsigned int oldasize = t->sizearray;
N  TValue *newarray;
N  /* create new hash part with appropriate size into 'newt' */
N  setnodevector(L, &newt, nhsize);
N  if (newasize < oldasize) {  /* will array shrink? */
N    t->sizearray = newasize;  /* pretend array has new size... */
N    exchangehashpart(t, &newt);  /* and new hash */
N    /* re-insert into the new hash the elements from vanishing slice */
N    for (i = newasize; i < oldasize; i++) {
N      if (!isempty(&t->array[i]))
X      if (!(((((((&t->array[i]))->tt_)) & 0x0F)) == (0)))
N        luaH_setint(L, t, i + 1, &t->array[i]);
N    }
N    t->sizearray = oldasize;  /* restore current size... */
N    exchangehashpart(t, &newt);  /* and hash (in case of errors) */
N  }
N  /* allocate new array */
N  newarray = luaM_reallocvector(L, t->array, oldasize, newasize, TValue);
X  newarray = (((TValue *)(luaM_realloc_(L, t->array, ((size_t)((oldasize))) * sizeof(TValue), ((size_t)((newasize))) * sizeof(TValue)))));
N  if (newarray == NULL && newasize > 0) {  /* allocation failed? */
X  if (newarray == 0 && newasize > 0) {   
N    freehash(L, &newt);  /* release new hash part */
N    luaM_error(L);  /* raise error (with array unchanged) */
X    luaD_throw(L, 4);   
N  }
N  /* allocation ok; initialize new part of the array */
N  exchangehashpart(t, &newt);  /* 't' has the new hash ('newt' has the old) */
N  t->array = newarray;  /* set new array part */
N  t->sizearray = newasize;
N  for (i = oldasize; i < newasize; i++)  /* clear new slice of the array */
N     setempty(&t->array[i]);
X     ((&t->array[i])->tt_=((0 | (1 << 4))));
N  /* re-insert elements from old hash part into new parts */
N  reinsert(L, &newt, t);  /* 'newt' now has the old hash */
N  freehash(L, &newt);  /* free old hash part */
N}
N
N
Nvoid luaH_resizearray (lua_State *L, Table *t, unsigned int nasize) {
N  int nsize = allocsizenode(t);
X  int nsize = (((t)->lastfree == 0) ? 0 : ((1<<((t)->lsizenode))));
N  luaH_resize(L, t, nasize, nsize);
N}
N
N/*
N** nums[i] = number of keys 'k' where 2^(i - 1) < k <= 2^i
N*/
Nstatic void rehash (lua_State *L, Table *t, const TValue *ek) {
N  unsigned int asize;  /* optimal size for array part */
N  unsigned int na;  /* number of keys in the array part */
N  unsigned int nums[MAXABITS + 1];
X  unsigned int nums[((int)((sizeof(int) * 8 - 1))) + 1];
N  int i;
N  int totaluse;
N  for (i = 0; i <= MAXABITS; i++) nums[i] = 0;  /* reset counts */
X  for (i = 0; i <= ((int)((sizeof(int) * 8 - 1))); i++) nums[i] = 0;   
N  na = numusearray(t, nums);  /* count keys in array part */
N  totaluse = na;  /* all those keys are integer keys */
N  totaluse += numusehash(t, nums, &na);  /* count keys in hash part */
N  /* count extra key */
N  if (ttisinteger(ek))
X  if (((((ek))->tt_) == ((3 | (2 << 4)))))
N    na += countint(ivalue(ek), nums);
X    na += countint((((ek)->value_). i), nums);
N  totaluse++;
N  /* compute new size for array part */
N  asize = computesizes(nums, &na);
N  /* resize the table to new computed sizes */
N  luaH_resize(L, t, asize, totaluse - na);
N}
N
N
N
N/*
N** }=============================================================
N*/
N
N
NTable *luaH_new (lua_State *L) {
N  GCObject *o = luaC_newobj(L, LUA_TTABLE, sizeof(Table));
X  GCObject *o = luaC_newobj(L, 5, sizeof(Table));
N  Table *t = gco2t(o);
X  Table *t = (&((((union GCUnion *)((o))))->h));
N  t->metatable = NULL;
X  t->metatable = 0;
N  t->flags = cast_byte(~0);
X  t->flags = ((lu_byte)((~0)));
N  t->array = NULL;
X  t->array = 0;
N  t->sizearray = 0;
N  setnodevector(L, t, 0);
N  return t;
N}
N
N
Nvoid luaH_free (lua_State *L, Table *t) {
N  freehash(L, t);
N  luaM_freearray(L, t->array, t->sizearray);
X  luaM_free_(L, (t->array), (t->sizearray)*sizeof(*(t->array)));
N  luaM_free(L, t);
X  luaM_free_(L, (t), sizeof(*(t)));
N}
N
N
Nstatic Node *getfreepos (Table *t) {
N  if (!isdummy(t)) {
X  if (!((t)->lastfree == 0)) {
N    while (t->lastfree > t->node) {
N      t->lastfree--;
N      if (keyisnil(t->lastfree))
X      if ((((t->lastfree)->u . key_tt) == 0))
N        return t->lastfree;
N    }
N  }
N  return NULL;  /* could not find a free place */
X  return 0;   
N}
N
N
N
N/*
N** inserts a new key into a hash table; first, check whether key's main
N** position is free. If not, check whether colliding node is in its main
N** position or not: if it is not, move colliding node to an empty place and
N** put new key in its main position; otherwise (colliding node is in its main
N** position), new key goes to an empty position.
N*/
NTValue *luaH_newkey (lua_State *L, Table *t, const TValue *key) {
N  Node *mp;
N  TValue aux;
N  if (ttisnil(key)) luaG_runerror(L, "table index is nil");
X  if (((((key))->tt_) == (0))) luaG_runerror(L, "table index is nil");
N  else if (ttisfloat(key)) {
X  else if (((((key))->tt_) == ((3 | (1 << 4))))) {
N    lua_Number f = fltvalue(key);
X    lua_Number f = (((key)->value_). n);
N    lua_Integer k;
N    if (luaV_flttointeger(f, &k, 0)) {  /* does key fit in an integer? */
N      setivalue(&aux, k);
X      { TValue *io=(&aux); ((io)->value_). i=(k); ((io)->tt_=((3 | (2 << 4)))); };
N      key = &aux;  /* insert it as an integer */
N    }
N    else if (luai_numisnan(f))
X    else if ((!(((f))==((f)))))
N      luaG_runerror(L, "table index is NaN");
N  }
N  mp = mainpositionTV(t, key);
N  if (!isempty(gval(mp)) || isdummy(t)) {  /* main position is taken? */
X  if (!((((((((&(mp)->i_val)))->tt_)) & 0x0F)) == (0)) || ((t)->lastfree == 0)) {   
N    Node *othern;
N    Node *f = getfreepos(t);  /* get a free place */
N    if (f == NULL) {  /* cannot find a free place? */
X    if (f == 0) {   
N      rehash(L, t, key);  /* grow table */
N      /* whatever called 'newkey' takes care of TM cache */
N      return luaH_set(L, t, key);  /* insert key into grown table */
N    }
N    lua_assert(!isdummy(t));
X    ((void)0);
N    othern = mainposition(t, keytt(mp), &keyval(mp));
X    othern = mainposition(t, ((mp)->u . key_tt), &((mp)->u . key_val));
N    if (othern != mp) {  /* is colliding node out of its main position? */
N      /* yes; move colliding node into free position */
N      while (othern + gnext(othern) != mp)  /* find previous */
X      while (othern + ((othern)->u . next) != mp)   
N        othern += gnext(othern);
X        othern += ((othern)->u . next);
N      gnext(othern) = cast_int(f - othern);  /* rechain to point to 'f' */
X      ((othern)->u . next) = ((int)((f - othern)));   
N      *f = *mp;  /* copy colliding node into free pos. (mp->next also goes) */
N      if (gnext(mp) != 0) {
X      if (((mp)->u . next) != 0) {
N        gnext(f) += cast_int(mp - f);  /* correct 'next' */
X        ((f)->u . next) += ((int)((mp - f)));   
N        gnext(mp) = 0;  /* now 'mp' is free */
X        ((mp)->u . next) = 0;   
N      }
N      setempty(gval(mp));
X      (((&(mp)->i_val))->tt_=((0 | (1 << 4))));
N    }
N    else {  /* colliding node is in its own main position */
N      /* new node will go into free position */
N      if (gnext(mp) != 0)
X      if (((mp)->u . next) != 0)
N        gnext(f) = cast_int((mp + gnext(mp)) - f);  /* chain new position */
X        ((f)->u . next) = ((int)(((mp + ((mp)->u . next)) - f)));   
N      else lua_assert(gnext(f) == 0);
X      else ((void)0);
N      gnext(mp) = cast_int(f - mp);
X      ((mp)->u . next) = ((int)((f - mp)));
N      mp = f;
N    }
N  }
N  setnodekey(L, mp, key);
X  { Node *n_=(mp); const TValue *io_=(key); n_->u . key_val = io_->value_; n_->u . key_tt = io_->tt_; (void)L; ((void)0); };
N  luaC_barrierback(L, obj2gco(t), key);
X  ( ((((key)->tt_) & (1 << 6)) && ((((&(((union GCUnion *)((t)))->gc)))->marked) & ((1<<(5)))) && ((((((key)->value_). gc))->marked) & (((1<<(3)) | (1<<(4)))))) ? luaC_barrierback_(L,(&(((union GCUnion *)((t)))->gc))) : ((void)((0))));
N  lua_assert(isempty(gval(mp)));
X  ((void)0);
N  return gval(mp);
X  return (&(mp)->i_val);
N}
N
N
N/*
N** search function for integers
N*/
Nconst TValue *luaH_getint (Table *t, lua_Integer key) {
N  /* (1 <= key && key <= t->sizearray) */
N  if (l_castS2U(key) - 1u < t->sizearray)
X  if (((lua_Unsigned)(key)) - 1u < t->sizearray)
N    return &t->array[key - 1];
N  else {
N    Node *n = hashint(t, key);
X    Node *n = ((&(t)->node[(((((int)((((key)) & ((((1<<((t)->lsizenode))))-1)))))))]));
N    for (;;) {  /* check whether 'key' is somewhere in the chain */
N      if (keyisinteger(n) && keyival(n) == key)
X      if ((((n)->u . key_tt) == (3 | (2 << 4))) && (((n)->u . key_val). i) == key)
N        return gval(n);  /* that's it */
X        return (&(n)->i_val);   
N      else {
N        int nx = gnext(n);
X        int nx = ((n)->u . next);
N        if (nx == 0) break;
N        n += nx;
N      }
N    }
N    return luaH_emptyobject;
X    return (&luaH_emptyobject_);
N  }
N}
N
N
N/*
N** search function for short strings
N*/
Nconst TValue *luaH_getshortstr (Table *t, TString *key) {
N  Node *n = hashstr(t, key);
X  Node *n = ((&(t)->node[(((((int)(((((key)->hash)) & ((((1<<((t)->lsizenode))))-1)))))))]));
N  lua_assert(key->tt == LUA_TSHRSTR);
X  ((void)0);
N  for (;;) {  /* check whether 'key' is somewhere in the chain */
N    if (keyisshrstr(n) && eqshrstr(keystrval(n), key))
X    if ((((n)->u . key_tt) == (((4 | (1 << 4))) | (1 << 6))) && ((((&((((union GCUnion *)((((n)->u . key_val). gc))))->ts)))) == (key)))
N      return gval(n);  /* that's it */
X      return (&(n)->i_val);   
N    else {
N      int nx = gnext(n);
X      int nx = ((n)->u . next);
N      if (nx == 0)
N        return luaH_emptyobject;  /* not found */
X        return (&luaH_emptyobject_);   
N      n += nx;
N    }
N  }
N}
N
N
Nconst TValue *luaH_getstr (Table *t, TString *key) {
N  if (key->tt == LUA_TSHRSTR)
X  if (key->tt == (4 | (1 << 4)))
N    return luaH_getshortstr(t, key);
N  else {  /* for long strings, use generic case */
N    TValue ko;
N    setsvalue(cast(lua_State *, NULL), &ko, key);
X    { TValue *io = (&ko); TString *x_ = (key); ((io)->value_). gc = (&(((union GCUnion *)((x_)))->gc)); ((io)->tt_=(((x_->tt) | (1 << 6)))); ((void)0); };
N    return getgeneric(t, &ko);
N  }
N}
N
N
N/*
N** main search function
N*/
Nconst TValue *luaH_get (Table *t, const TValue *key) {
N  switch (ttypetag(key)) {
X  switch (((((key)->tt_)) & 0x3F)) {
N    case LUA_TSHRSTR: return luaH_getshortstr(t, tsvalue(key));
X    case (4 | (1 << 4)): return luaH_getshortstr(t, ((&((((union GCUnion *)((((key)->value_). gc))))->ts))));
N    case LUA_TNUMINT: return luaH_getint(t, ivalue(key));
X    case (3 | (2 << 4)): return luaH_getint(t, (((key)->value_). i));
N    case LUA_TNIL: return luaH_emptyobject;
X    case 0: return (&luaH_emptyobject_);
N    case LUA_TNUMFLT: {
X    case (3 | (1 << 4)): {
N      lua_Integer k;
N      if (luaV_flttointeger(fltvalue(key), &k, 0)) /* index is an integral? */
X      if (luaV_flttointeger((((key)->value_). n), &k, 0))  
N        return luaH_getint(t, k);  /* use specialized version */
N      /* else... */
N    }  /* FALLTHROUGH */
N    default:
N      return getgeneric(t, key);
N  }
N}
N
N
N/*
N** beware: when using this function you probably need to check a GC
N** barrier and invalidate the TM cache.
N*/
NTValue *luaH_set (lua_State *L, Table *t, const TValue *key) {
N  const TValue *p = luaH_get(t, key);
N  if (p != luaH_emptyobject)
X  if (p != (&luaH_emptyobject_))
N    return cast(TValue *, p);
X    return ((TValue *)(p));
N  else return luaH_newkey(L, t, key);
N}
N
N
Nvoid luaH_setint (lua_State *L, Table *t, lua_Integer key, TValue *value) {
N  const TValue *p = luaH_getint(t, key);
N  TValue *cell;
N  if (p != luaH_emptyobject)
X  if (p != (&luaH_emptyobject_))
N    cell = cast(TValue *, p);
X    cell = ((TValue *)(p));
N  else {
N    TValue k;
N    setivalue(&k, key);
X    { TValue *io=(&k); ((io)->value_). i=(key); ((io)->tt_=((3 | (2 << 4)))); };
N    cell = luaH_newkey(L, t, &k);
N  }
N  setobj2t(L, cell, value);
X  { TValue *io1=(cell); const TValue *io2=(value); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N}
N
N
N/*
N** Try to find a boundary in the hash part of table 't'. From the
N** caller, we know that 'j' is zero or present and that 'j + 1' is
N** present. We want to find a larger key that is absent from the
N** table, so that we can do a binary search between the two keys to
N** find a boundary. We keep doubling 'j' until we get an absent index.
N** If the doubling would overflow, we try LUA_MAXINTEGER. If it is
N** absent, we are ready for the binary search. ('j', being max integer,
N** is larger or equal to 'i', but it cannot be equal because it is
N** absent while 'i' is present; so 'j > i'.) Otherwise, 'j' is a
N** boundary. ('j + 1' cannot be a present integer key because it is
N** not a valid integer in Lua.)
N*/
Nstatic lua_Unsigned hash_search (Table *t, lua_Unsigned j) {
N  lua_Unsigned i;
N  if (j == 0) j++;  /* the caller ensures 'j + 1' is present */
N  do {
N    i = j;  /* 'i' is a present index */
N    if (j <= l_castS2U(LUA_MAXINTEGER) / 2)
X    if (j <= ((lua_Unsigned)(0x7fffffffffffffffLL)) / 2)
N      j *= 2;
N    else {
N      j = LUA_MAXINTEGER;
X      j = 0x7fffffffffffffffLL;
N      if (isempty(luaH_getint(t, j)))  /* t[j] not present? */
X      if ((((((((luaH_getint(t, j)))->tt_)) & 0x0F)) == (0)))   
N        break;  /* 'j' now is an absent index */
N      else  /* weird case */
N        return j;  /* well, max integer is a boundary... */
N    }
N  } while (!isempty(luaH_getint(t, j)));  /* repeat until an absent t[j] */
X  } while (!(((((((luaH_getint(t, j)))->tt_)) & 0x0F)) == (0)));   
N  /* i < j  &&  t[i] present  &&  t[j] absent */
N  while (j - i > 1u) {  /* do a binary search between them */
N    lua_Unsigned m = (i + j) / 2;
N    if (isempty(luaH_getint(t, m))) j = m;
X    if ((((((((luaH_getint(t, m)))->tt_)) & 0x0F)) == (0))) j = m;
N    else i = m;
N  }
N  return i;
N}
N
N
N/*
N** Try to find a boundary in table 't'. (A 'boundary' is an integer index
N** such that t[i] is present and t[i+1] is absent, or 0 if t[1] is absent
N** and 'maxinteger' if t[maxinteger] is present.)
N** First, try the array part: if there is an array part and its last
N** element is absent, there must be a boundary there; a binary search
N** finds that boundary. Otherwise, if the hash part is empty or does not
N** contain 'j + 1', 'j' is a boundary. Otherwize, call 'hash_search'
N** to find a boundary in the hash part.
N*/
Nlua_Unsigned luaH_getn (Table *t) {
N  unsigned int j = t->sizearray;
N  if (j > 0 && isempty(&t->array[j - 1])) {
X  if (j > 0 && (((((((&t->array[j - 1]))->tt_)) & 0x0F)) == (0))) {
N    unsigned int i = 0;
N    while (j - i > 1u) {  /* binary search */
N      unsigned int m = (i + j) / 2;
N      if (isempty(&t->array[m - 1])) j = m;
X      if ((((((((&t->array[m - 1]))->tt_)) & 0x0F)) == (0))) j = m;
N      else i = m;
N    }
N    return i;
N  }
N  else {  /* 'j' is zero or present in table */
N    if (isdummy(t) || isempty(luaH_getint(t, l_castU2S(j + 1))))
X    if (((t)->lastfree == 0) || (((((((luaH_getint(t, ((lua_Integer)(j + 1)))))->tt_)) & 0x0F)) == (0)))
N      return j;  /* 'j + 1' is absent... */
N    else  /* 'j + 1' is also present */
N      return hash_search(t, j);
N  }
N}
N
N
N
N#if defined(LUA_DEBUG)
X#if 0L
S
SNode *luaH_mainposition (const Table *t, const TValue *key) {
S  return mainpositionTV(t, key);
S}
S
Sint luaH_isdummy (const Table *t) { return isdummy(t); }
S
N#endif
