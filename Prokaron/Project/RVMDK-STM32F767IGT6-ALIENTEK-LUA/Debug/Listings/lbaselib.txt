; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\lbaselib.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\lbaselib.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\lbaselib.crf ..\..\..\M6P1(L)_Lua\lua\lbaselib.c]
                          THUMB

                          AREA ||i.b_str2int||, CODE, READONLY, ALIGN=2

                  b_str2int PROC
;;;47     
;;;48     static const char *b_str2int (const char *s, int base, lua_Integer *pn) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;49       lua_Unsigned n = 0;
00000a  2100              MOVS     r1,#0
00000c  460d              MOV      r5,r1
00000e  460e              MOV      r6,r1
;;;50       int neg = 0;
000010  4689              MOV      r9,r1
;;;51       s += strspn(s, SPACECHARS);  /* skip initial spaces */
000012  a12d              ADR      r1,|L1.200|
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       strspn
00001a  4404              ADD      r4,r4,r0
;;;52       if (*s == '-') { s++; neg = 1; }  /* handle sign */
00001c  7820              LDRB     r0,[r4,#0]
00001e  282d              CMP      r0,#0x2d
000020  d103              BNE      |L1.42|
000022  1c64              ADDS     r4,r4,#1
000024  f04f0901          MOV      r9,#1
000028  e003              B        |L1.50|
                  |L1.42|
;;;53       else if (*s == '+') s++;
00002a  7820              LDRB     r0,[r4,#0]
00002c  282b              CMP      r0,#0x2b
00002e  d100              BNE      |L1.50|
000030  1c64              ADDS     r4,r4,#1
                  |L1.50|
;;;54       if (!isalnum((unsigned char)*s))  /* no digit? */
000032  f7fffffe          BL       __rt_ctype_table
000036  6800              LDR      r0,[r0,#0]
000038  7821              LDRB     r1,[r4,#0]
00003a  5c40              LDRB     r0,[r0,r1]
00003c  f0000038          AND      r0,r0,#0x38
000040  b910              CBNZ     r0,|L1.72|
;;;55         return NULL;
000042  2000              MOVS     r0,#0
                  |L1.68|
;;;56       do {
;;;57         int digit = (isdigit((unsigned char)*s)) ? *s - '0'
;;;58                        : (toupper((unsigned char)*s) - 'A') + 10;
;;;59         if (digit >= base) return NULL;  /* invalid numeral */
;;;60         n = n * base + digit;
;;;61         s++;
;;;62       } while (isalnum((unsigned char)*s));
;;;63       s += strspn(s, SPACECHARS);  /* skip trailing spaces */
;;;64       *pn = (lua_Integer)((neg) ? (0u - n) : n);
;;;65       return s;
;;;66     }
000044  e8bd87f0          POP      {r4-r10,pc}
                  |L1.72|
000048  bf00              NOP                            ;56
                  |L1.74|
00004a  f7fffffe          BL       __rt_ctype_table
00004e  6800              LDR      r0,[r0,#0]            ;57
000050  7821              LDRB     r1,[r4,#0]            ;57
000052  5c40              LDRB     r0,[r0,r1]            ;57
000054  2820              CMP      r0,#0x20              ;57
000056  d103              BNE      |L1.96|
000058  f9940000          LDRSB    r0,[r4,#0]            ;57
00005c  3830              SUBS     r0,r0,#0x30           ;57
00005e  e003              B        |L1.104|
                  |L1.96|
000060  7820              LDRB     r0,[r4,#0]            ;58
000062  f7fffffe          BL       toupper
000066  3837              SUBS     r0,r0,#0x37           ;58
                  |L1.104|
000068  4682              MOV      r10,r0                ;58
00006a  45ba              CMP      r10,r7                ;59
00006c  db01              BLT      |L1.114|
00006e  2000              MOVS     r0,#0                 ;59
000070  e7e8              B        |L1.68|
                  |L1.114|
000072  17fb              ASRS     r3,r7,#31             ;60
000074  4629              MOV      r1,r5                 ;60
000076  fba10c07          UMULL    r0,r12,r1,r7          ;60
00007a  fb06c207          MLA      r2,r6,r7,r12          ;60
00007e  fb052303          MLA      r3,r5,r3,r2           ;60
000082  eb10050a          ADDS     r5,r0,r10             ;60
000086  eb4376ea          ADC      r6,r3,r10,ASR #31     ;60
00008a  f1040401          ADD      r4,r4,#1              ;61
00008e  f7fffffe          BL       __rt_ctype_table
000092  6800              LDR      r0,[r0,#0]            ;62
000094  7821              LDRB     r1,[r4,#0]            ;62
000096  5c40              LDRB     r0,[r0,r1]            ;62
000098  f0000038          AND      r0,r0,#0x38           ;62
00009c  2800              CMP      r0,#0                 ;62
00009e  d1d4              BNE      |L1.74|
0000a0  a109              ADR      r1,|L1.200|
0000a2  4620              MOV      r0,r4                 ;63
0000a4  f7fffffe          BL       strspn
0000a8  4404              ADD      r4,r4,r0              ;63
0000aa  f1b90f00          CMP      r9,#0                 ;64
0000ae  d005              BEQ      |L1.188|
0000b0  2000              MOVS     r0,#0                 ;64
0000b2  4601              MOV      r1,r0                 ;64
0000b4  1b40              SUBS     r0,r0,r5              ;64
0000b6  eb610106          SBC      r1,r1,r6              ;64
0000ba  e001              B        |L1.192|
                  |L1.188|
0000bc  4628              MOV      r0,r5                 ;64
0000be  4631              MOV      r1,r6                 ;64
                  |L1.192|
0000c0  e9c80100          STRD     r0,r1,[r8,#0]         ;64
0000c4  4620              MOV      r0,r4                 ;65
0000c6  e7bd              B        |L1.68|
;;;67     
                          ENDP

                  |L1.200|
0000c8  200c0a0d          DCB      " \f\n\r\t\v",0
0000cc  090b00  
0000cf  00                DCB      0

                          AREA ||i.dofilecont||, CODE, READONLY, ALIGN=1

                  dofilecont PROC
;;;375    
;;;376    static int dofilecont (lua_State *L, int d1, lua_KContext d2) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;377      (void)d1;  (void)d2;  /* only to match 'lua_Kfunction' prototype */
;;;378      return lua_gettop(L) - 1;
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       lua_gettop
00000e  1e40              SUBS     r0,r0,#1
;;;379    }
000010  bd70              POP      {r4-r6,pc}
;;;380    
                          ENDP


                          AREA ||i.finishpcall||, CODE, READONLY, ALIGN=1

                  finishpcall PROC
;;;427    */
;;;428    static int finishpcall (lua_State *L, int status, lua_KContext extra) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;429      if (status != LUA_OK && status != LUA_YIELD) {  /* error? */
000008  b164              CBZ      r4,|L3.36|
00000a  2c01              CMP      r4,#1
00000c  d00a              BEQ      |L3.36|
;;;430        lua_pushboolean(L, 0);  /* first result (false) */
00000e  2100              MOVS     r1,#0
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       lua_pushboolean
;;;431        lua_pushvalue(L, -2);  /* error message */
000016  f06f0101          MVN      r1,#1
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       lua_pushvalue
;;;432        return 2;  /* return false, msg */
000020  2002              MOVS     r0,#2
                  |L3.34|
;;;433      }
;;;434      else
;;;435        return lua_gettop(L) - (int)extra;  /* return all results */
;;;436    }
000022  bd70              POP      {r4-r6,pc}
                  |L3.36|
000024  4630              MOV      r0,r6                 ;435
000026  f7fffffe          BL       lua_gettop
00002a  1b40              SUBS     r0,r0,r5              ;435
00002c  e7f9              B        |L3.34|
;;;437    
                          ENDP


                          AREA ||i.generic_reader||, CODE, READONLY, ALIGN=2

                  generic_reader PROC
;;;336    */
;;;337    static const char *generic_reader (lua_State *L, void *ud, size_t *size) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;338      (void)(ud);  /* not used */
;;;339      luaL_checkstack(L, 2, "too many nested functions");
000008  a21c              ADR      r2,|L4.124|
00000a  2102              MOVS     r1,#2
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       luaL_checkstack
;;;340      lua_pushvalue(L, 1);  /* get function */
000012  2101              MOVS     r1,#1
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       lua_pushvalue
;;;341      lua_call(L, 0, 1);  /* call it */
00001a  2000              MOVS     r0,#0
00001c  4603              MOV      r3,r0
00001e  2201              MOVS     r2,#1
000020  4601              MOV      r1,r0
000022  9000              STR      r0,[sp,#0]
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       lua_callk
;;;342      if (lua_isnil(L, -1)) {
00002a  f04f31ff          MOV      r1,#0xffffffff
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       lua_type
000034  b938              CBNZ     r0,|L4.70|
;;;343        lua_pop(L, 1);  /* pop result */
000036  f06f0101          MVN      r1,#1
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       lua_settop
;;;344        *size = 0;
000040  2000              MOVS     r0,#0
000042  6020              STR      r0,[r4,#0]
                  |L4.68|
;;;345        return NULL;
;;;346      }
;;;347      else if (!lua_isstring(L, -1))
;;;348        luaL_error(L, "reader function must return a string");
;;;349      lua_replace(L, RESERVEDSLOT);  /* save string in reserved slot */
;;;350      return lua_tolstring(L, RESERVEDSLOT, size);
;;;351    }
000044  bdf8              POP      {r3-r7,pc}
                  |L4.70|
000046  f04f31ff          MOV      r1,#0xffffffff        ;347
00004a  4628              MOV      r0,r5                 ;347
00004c  f7fffffe          BL       lua_isstring
000050  b918              CBNZ     r0,|L4.90|
000052  a111              ADR      r1,|L4.152|
000054  4628              MOV      r0,r5                 ;348
000056  f7fffffe          BL       luaL_error
                  |L4.90|
00005a  2205              MOVS     r2,#5                 ;349
00005c  1f91              SUBS     r1,r2,#6              ;349
00005e  4628              MOV      r0,r5                 ;349
000060  f7fffffe          BL       lua_copy
000064  f06f0101          MVN      r1,#1                 ;349
000068  4628              MOV      r0,r5                 ;349
00006a  f7fffffe          BL       lua_settop
00006e  4622              MOV      r2,r4                 ;350
000070  2105              MOVS     r1,#5                 ;350
000072  4628              MOV      r0,r5                 ;350
000074  f7fffffe          BL       lua_tolstring
000078  e7e4              B        |L4.68|
;;;352    
                          ENDP

00007a  0000              DCW      0x0000
                  |L4.124|
00007c  746f6f20          DCB      "too many nested functions",0
000080  6d616e79
000084  206e6573
000088  74656420
00008c  66756e63
000090  74696f6e
000094  7300    
000096  00                DCB      0
000097  00                DCB      0
                  |L4.152|
000098  72656164          DCB      "reader function must return a string",0
00009c  65722066
0000a0  756e6374
0000a4  696f6e20
0000a8  6d757374
0000ac  20726574
0000b0  75726e20
0000b4  61207374
0000b8  72696e67
0000bc  00      
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0

                          AREA ||i.ipairsaux||, CODE, READONLY, ALIGN=1

                  ipairsaux PROC
;;;269    */
;;;270    static int ipairsaux (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
;;;271      lua_Integer i = luaL_checkinteger(L, 2) + 1;
000004  2102              MOVS     r1,#2
000006  4630              MOV      r0,r6
000008  f7fffffe          BL       luaL_checkinteger
00000c  1c44              ADDS     r4,r0,#1
00000e  f1410500          ADC      r5,r1,#0
;;;272      lua_pushinteger(L, i);
000012  4622              MOV      r2,r4
000014  462b              MOV      r3,r5
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       lua_pushinteger
;;;273      return (lua_geti(L, 1, i) == LUA_TNIL) ? 1 : 2;
00001c  4622              MOV      r2,r4
00001e  462b              MOV      r3,r5
000020  2101              MOVS     r1,#1
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       lua_geti
000028  b908              CBNZ     r0,|L5.46|
00002a  2001              MOVS     r0,#1
                  |L5.44|
;;;274    }
00002c  bd70              POP      {r4-r6,pc}
                  |L5.46|
00002e  2002              MOVS     r0,#2                 ;273
000030  e7fc              B        |L5.44|
;;;275    
                          ENDP


                          AREA ||i.load_aux||, CODE, READONLY, ALIGN=1

                  load_aux PROC
;;;289    
;;;290    static int load_aux (lua_State *L, int status, int envidx) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;291      if (status == LUA_OK) {
000008  b98d              CBNZ     r5,|L6.46|
;;;292        if (envidx != 0) {  /* 'env' parameter? */
00000a  b174              CBZ      r4,|L6.42|
;;;293          lua_pushvalue(L, envidx);  /* environment for loaded function */
00000c  4621              MOV      r1,r4
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       lua_pushvalue
;;;294          if (!lua_setupvalue(L, -2, 1))  /* set it as 1st upvalue */
000014  2201              MOVS     r2,#1
000016  1ed1              SUBS     r1,r2,#3
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lua_setupvalue
00001e  b920              CBNZ     r0,|L6.42|
;;;295            lua_pop(L, 1);  /* remove 'env' if not used by previous call */
000020  f06f0101          MVN      r1,#1
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       lua_settop
                  |L6.42|
;;;296        }
;;;297        return 1;
00002a  2001              MOVS     r0,#1
                  |L6.44|
;;;298      }
;;;299      else {  /* error (message is on top of the stack) */
;;;300        lua_pushnil(L);
;;;301        lua_insert(L, -2);  /* put before error message */
;;;302        return 2;  /* return nil plus error message */
;;;303      }
;;;304    }
00002c  bd70              POP      {r4-r6,pc}
                  |L6.46|
00002e  4630              MOV      r0,r6                 ;300
000030  f7fffffe          BL       lua_pushnil
000034  2201              MOVS     r2,#1                 ;301
000036  1ed1              SUBS     r1,r2,#3              ;301
000038  4630              MOV      r0,r6                 ;301
00003a  f7fffffe          BL       lua_rotate
00003e  2002              MOVS     r0,#2                 ;302
000040  e7f4              B        |L6.44|
;;;305    
                          ENDP


                          AREA ||i.luaB_assert||, CODE, READONLY, ALIGN=2

                  luaB_assert PROC
;;;391    
;;;392    static int luaB_assert (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;393      if (lua_toboolean(L, 1))  /* condition is true? */
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       lua_toboolean
00000c  b118              CBZ      r0,|L7.22|
;;;394        return lua_gettop(L);  /* return all arguments */
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       lua_gettop
                  |L7.20|
;;;395      else {  /* error */
;;;396        luaL_checkany(L, 1);  /* there must be a condition */
;;;397        lua_remove(L, 1);  /* remove it */
;;;398        lua_pushliteral(L, "assertion failed!");  /* default message */
;;;399        lua_settop(L, 1);  /* leave only message (default if no other one) */
;;;400        return luaB_error(L);  /* call 'error' */
;;;401      }
;;;402    }
000014  bd10              POP      {r4,pc}
                  |L7.22|
000016  2101              MOVS     r1,#1                 ;396
000018  4620              MOV      r0,r4                 ;396
00001a  f7fffffe          BL       luaL_checkany
00001e  f04f32ff          MOV      r2,#0xffffffff        ;397
000022  2101              MOVS     r1,#1                 ;397
000024  4620              MOV      r0,r4                 ;397
000026  f7fffffe          BL       lua_rotate
00002a  f06f0101          MVN      r1,#1                 ;397
00002e  4620              MOV      r0,r4                 ;397
000030  f7fffffe          BL       lua_settop
000034  a105              ADR      r1,|L7.76|
000036  4620              MOV      r0,r4                 ;398
000038  f7fffffe          BL       lua_pushstring
00003c  2101              MOVS     r1,#1                 ;399
00003e  4620              MOV      r0,r4                 ;399
000040  f7fffffe          BL       lua_settop
000044  4620              MOV      r0,r4                 ;400
000046  f7fffffe          BL       luaB_error
00004a  e7e3              B        |L7.20|
;;;403    
                          ENDP

                  |L7.76|
00004c  61737365          DCB      "assertion failed!",0
000050  7274696f
000054  6e206661
000058  696c6564
00005c  2100    
00005e  00                DCB      0
00005f  00                DCB      0

                          AREA ||i.luaB_collectgarbage||, CODE, READONLY, ALIGN=2

                  luaB_collectgarbage PROC
;;;178    
;;;179    static int luaB_collectgarbage (lua_State *L) {
000000  e92d5fff          PUSH     {r0-r12,lr}
000004  4683              MOV      r11,r0
;;;180      static const char *const opts[] = {"stop", "restart", "collect",
;;;181        "count", "step", "setpause", "setstepmul",
;;;182        "isrunning", "generational", "incremental", NULL};
;;;183      static const int optsnum[] = {LUA_GCSTOP, LUA_GCRESTART, LUA_GCCOLLECT,
;;;184        LUA_GCCOUNT, LUA_GCSTEP, LUA_GCSETPAUSE, LUA_GCSETSTEPMUL,
;;;185        LUA_GCISRUNNING, LUA_GCGEN, LUA_GCINC};
;;;186      int o = optsnum[luaL_checkoption(L, 1, "collect", opts)];
000006  4b5b              LDR      r3,|L8.372|
000008  a25b              ADR      r2,|L8.376|
00000a  2101              MOVS     r1,#1
00000c  4658              MOV      r0,r11
00000e  f7fffffe          BL       luaL_checkoption
000012  495b              LDR      r1,|L8.384|
000014  f851a020          LDR      r10,[r1,r0,LSL #2]
;;;187      switch (o) {
000018  f1aa0003          SUB      r0,r10,#3
00001c  2809              CMP      r0,#9
00001e  d27a              BCS      |L8.278|
000020  e8dff000          TBB      [pc,r0]
000024  059c2c3f          DCB      0x05,0x9c,0x2c,0x3f
000028  409c545f          DCB      0x40,0x9c,0x54,0x5f
00002c  7a00              DCB      0x7a,0x00
;;;188        case LUA_GCCOUNT: {
;;;189          int k = lua_gc(L, o);
00002e  4651              MOV      r1,r10
000030  4658              MOV      r0,r11
000032  f7fffffe          BL       lua_gc
000036  9003              STR      r0,[sp,#0xc]
;;;190          int b = lua_gc(L, LUA_GCCOUNTB);
000038  2104              MOVS     r1,#4
00003a  4658              MOV      r0,r11
00003c  f7fffffe          BL       lua_gc
000040  9002              STR      r0,[sp,#8]
;;;191          lua_pushnumber(L, (lua_Number)k + ((lua_Number)b/1024));
000042  9802              LDR      r0,[sp,#8]
000044  f7fffffe          BL       __aeabi_i2d
000048  4680              MOV      r8,r0
00004a  2200              MOVS     r2,#0
00004c  4b4d              LDR      r3,|L8.388|
00004e  f7fffffe          BL       __aeabi_ddiv
000052  4606              MOV      r6,r0
000054  460f              MOV      r7,r1
000056  9803              LDR      r0,[sp,#0xc]
000058  f7fffffe          BL       __aeabi_i2d
00005c  4632              MOV      r2,r6
00005e  463b              MOV      r3,r7
000060  e9cd0100          STRD     r0,r1,[sp,#0]
000064  f7fffffe          BL       __aeabi_dadd
000068  4604              MOV      r4,r0
00006a  4622              MOV      r2,r4
00006c  460b              MOV      r3,r1
00006e  4658              MOV      r0,r11
000070  f7fffffe          BL       lua_pushnumber
;;;192          return 1;
000074  2001              MOVS     r0,#1
                  |L8.118|
;;;193        }
;;;194        case LUA_GCSTEP: {
;;;195          int step = (int)luaL_optinteger(L, 2, 0);
;;;196          int res = lua_gc(L, o, step);
;;;197          lua_pushboolean(L, res);
;;;198          return 1;
;;;199        }
;;;200        case LUA_GCSETPAUSE:
;;;201        case LUA_GCSETSTEPMUL: {
;;;202          int p = (int)luaL_optinteger(L, 2, 0);
;;;203          int previous = lua_gc(L, o, p);
;;;204          lua_pushinteger(L, previous);
;;;205          return 1;
;;;206        }
;;;207        case LUA_GCISRUNNING: {
;;;208          int res = lua_gc(L, o);
;;;209          lua_pushboolean(L, res);
;;;210          return 1;
;;;211        }
;;;212        case LUA_GCGEN: {
;;;213          int minormul = (int)luaL_optinteger(L, 2, 0);
;;;214          int majormul = (int)luaL_optinteger(L, 3, 0);
;;;215          return pushmode(L, lua_gc(L, o, minormul, majormul));
;;;216        }
;;;217        case LUA_GCINC: {
;;;218          int pause = (int)luaL_optinteger(L, 2, 0);
;;;219          int stepmul = (int)luaL_optinteger(L, 3, 0);
;;;220          int stepsize = (int)luaL_optinteger(L, 4, 0);
;;;221          return pushmode(L, lua_gc(L, o, pause, stepmul, stepsize));
;;;222        }
;;;223        default: {
;;;224          int res = lua_gc(L, o);
;;;225          lua_pushinteger(L, res);
;;;226          return 1;
;;;227        }
;;;228      }
;;;229    }
000076  b004              ADD      sp,sp,#0x10
000078  e8bd9ff0          POP      {r4-r12,pc}
00007c  2200              MOVS     r2,#0                 ;195
00007e  4613              MOV      r3,r2                 ;195
000080  2102              MOVS     r1,#2                 ;195
000082  4658              MOV      r0,r11                ;195
000084  f7fffffe          BL       luaL_optinteger
000088  4604              MOV      r4,r0                 ;195
00008a  4622              MOV      r2,r4                 ;196
00008c  4651              MOV      r1,r10                ;196
00008e  4658              MOV      r0,r11                ;196
000090  f7fffffe          BL       lua_gc
000094  4605              MOV      r5,r0                 ;196
000096  4629              MOV      r1,r5                 ;197
000098  4658              MOV      r0,r11                ;197
00009a  f7fffffe          BL       lua_pushboolean
00009e  2001              MOVS     r0,#1                 ;198
0000a0  e7e9              B        |L8.118|
0000a2  bf00              NOP                            ;201
0000a4  2200              MOVS     r2,#0                 ;202
0000a6  4613              MOV      r3,r2                 ;202
0000a8  2102              MOVS     r1,#2                 ;202
0000aa  4658              MOV      r0,r11                ;202
0000ac  f7fffffe          BL       luaL_optinteger
0000b0  4605              MOV      r5,r0                 ;202
0000b2  462a              MOV      r2,r5                 ;203
0000b4  4651              MOV      r1,r10                ;203
0000b6  4658              MOV      r0,r11                ;203
0000b8  f7fffffe          BL       lua_gc
0000bc  4604              MOV      r4,r0                 ;203
0000be  4622              MOV      r2,r4                 ;204
0000c0  17e3              ASRS     r3,r4,#31             ;204
0000c2  4658              MOV      r0,r11                ;204
0000c4  f7fffffe          BL       lua_pushinteger
0000c8  2001              MOVS     r0,#1                 ;205
0000ca  e7d4              B        |L8.118|
0000cc  4651              MOV      r1,r10                ;208
0000ce  4658              MOV      r0,r11                ;208
0000d0  f7fffffe          BL       lua_gc
0000d4  4604              MOV      r4,r0                 ;208
0000d6  4621              MOV      r1,r4                 ;209
0000d8  4658              MOV      r0,r11                ;209
0000da  f7fffffe          BL       lua_pushboolean
0000de  2001              MOVS     r0,#1                 ;210
0000e0  e7c9              B        |L8.118|
0000e2  2200              MOVS     r2,#0                 ;213
0000e4  4613              MOV      r3,r2                 ;213
0000e6  2102              MOVS     r1,#2                 ;213
0000e8  4658              MOV      r0,r11                ;213
0000ea  f7fffffe          BL       luaL_optinteger
0000ee  4604              MOV      r4,r0                 ;213
0000f0  2200              MOVS     r2,#0                 ;214
0000f2  4613              MOV      r3,r2                 ;214
0000f4  2103              MOVS     r1,#3                 ;214
0000f6  4658              MOV      r0,r11                ;214
0000f8  f7fffffe          BL       luaL_optinteger
0000fc  4605              MOV      r5,r0                 ;214
0000fe  462b              MOV      r3,r5                 ;215
000100  4622              MOV      r2,r4                 ;215
000102  4651              MOV      r1,r10                ;215
000104  4658              MOV      r0,r11                ;215
000106  f7fffffe          BL       lua_gc
00010a  4606              MOV      r6,r0                 ;215
00010c  4631              MOV      r1,r6                 ;215
00010e  4658              MOV      r0,r11                ;215
000110  f7fffffe          BL       pushmode
000114  e7af              B        |L8.118|
                  |L8.278|
000116  e021              B        |L8.348|
000118  2200              MOVS     r2,#0                 ;218
00011a  4613              MOV      r3,r2                 ;218
00011c  2102              MOVS     r1,#2                 ;218
00011e  4658              MOV      r0,r11                ;218
000120  f7fffffe          BL       luaL_optinteger
000124  4604              MOV      r4,r0                 ;218
000126  2200              MOVS     r2,#0                 ;219
000128  4613              MOV      r3,r2                 ;219
00012a  2103              MOVS     r1,#3                 ;219
00012c  4658              MOV      r0,r11                ;219
00012e  f7fffffe          BL       luaL_optinteger
000132  4605              MOV      r5,r0                 ;219
000134  2200              MOVS     r2,#0                 ;220
000136  4613              MOV      r3,r2                 ;220
000138  2104              MOVS     r1,#4                 ;220
00013a  4658              MOV      r0,r11                ;220
00013c  f7fffffe          BL       luaL_optinteger
000140  4606              MOV      r6,r0                 ;220
000142  462b              MOV      r3,r5                 ;221
000144  4622              MOV      r2,r4                 ;221
000146  4651              MOV      r1,r10                ;221
000148  4658              MOV      r0,r11                ;221
00014a  9600              STR      r6,[sp,#0]            ;221
00014c  f7fffffe          BL       lua_gc
000150  4607              MOV      r7,r0                 ;221
000152  4639              MOV      r1,r7                 ;221
000154  4658              MOV      r0,r11                ;221
000156  f7fffffe          BL       pushmode
00015a  e78c              B        |L8.118|
                  |L8.348|
00015c  4651              MOV      r1,r10                ;224
00015e  4658              MOV      r0,r11                ;224
000160  f7fffffe          BL       lua_gc
000164  4604              MOV      r4,r0                 ;224
000166  4622              MOV      r2,r4                 ;225
000168  17e3              ASRS     r3,r4,#31             ;225
00016a  4658              MOV      r0,r11                ;225
00016c  f7fffffe          BL       lua_pushinteger
000170  2001              MOVS     r0,#1                 ;226
000172  e780              B        |L8.118|
;;;230    
                          ENDP

                  |L8.372|
                          DCD      opts
                  |L8.376|
000178  636f6c6c          DCB      "collect",0
00017c  65637400
                  |L8.384|
                          DCD      optsnum
                  |L8.388|
                          DCD      0x40900000

                          AREA ||i.luaB_dofile||, CODE, READONLY, ALIGN=2

                  luaB_dofile PROC
;;;381    
;;;382    static int luaB_dofile (lua_State *L) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;383      const char *fname = luaL_optstring(L, 1, NULL);
000004  2300              MOVS     r3,#0
000006  461a              MOV      r2,r3
000008  2101              MOVS     r1,#1
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       luaL_optlstring
000010  4605              MOV      r5,r0
;;;384      lua_settop(L, 1);
000012  2101              MOVS     r1,#1
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       lua_settop
;;;385      if (luaL_loadfile(L, fname) != LUA_OK)
00001a  2200              MOVS     r2,#0
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       luaL_loadfilex
000024  b118              CBZ      r0,|L9.46|
;;;386        return lua_error(L);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       lua_error
                  |L9.44|
;;;387      lua_callk(L, 0, LUA_MULTRET, 0, dofilecont);
;;;388      return dofilecont(L, 0, 0);
;;;389    }
00002c  bd38              POP      {r3-r5,pc}
                  |L9.46|
00002e  4807              LDR      r0,|L9.76|
000030  2300              MOVS     r3,#0                 ;387
000032  1e5a              SUBS     r2,r3,#1              ;387
000034  4619              MOV      r1,r3                 ;387
000036  9000              STR      r0,[sp,#0]            ;387
000038  4620              MOV      r0,r4                 ;387
00003a  f7fffffe          BL       lua_callk
00003e  2200              MOVS     r2,#0                 ;388
000040  4611              MOV      r1,r2                 ;388
000042  4620              MOV      r0,r4                 ;388
000044  f7fffffe          BL       dofilecont
000048  e7f0              B        |L9.44|
;;;390    
                          ENDP

00004a  0000              DCW      0x0000
                  |L9.76|
                          DCD      dofilecont

                          AREA ||i.luaB_error||, CODE, READONLY, ALIGN=1

                  luaB_error PROC
;;;101    
;;;102    static int luaB_error (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;103      int level = (int)luaL_optinteger(L, 2, 1);
000004  2201              MOVS     r2,#1
000006  2300              MOVS     r3,#0
000008  2102              MOVS     r1,#2
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       luaL_optinteger
000010  4604              MOV      r4,r0
;;;104      lua_settop(L, 1);
000012  2101              MOVS     r1,#1
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       lua_settop
;;;105      if (lua_type(L, 1) == LUA_TSTRING && level > 0) {
00001a  2101              MOVS     r1,#1
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       lua_type
000022  2804              CMP      r0,#4
000024  d10d              BNE      |L10.66|
000026  2c00              CMP      r4,#0
000028  dd0b              BLE      |L10.66|
;;;106        luaL_where(L, level);   /* add extra information */
00002a  4621              MOV      r1,r4
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       luaL_where
;;;107        lua_pushvalue(L, 1);
000032  2101              MOVS     r1,#1
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       lua_pushvalue
;;;108        lua_concat(L, 2);
00003a  2102              MOVS     r1,#2
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       lua_concat
                  |L10.66|
;;;109      }
;;;110      return lua_error(L);
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       lua_error
;;;111    }
000048  bd70              POP      {r4-r6,pc}
;;;112    
                          ENDP


                          AREA ||i.luaB_getmetatable||, CODE, READONLY, ALIGN=2

                  luaB_getmetatable PROC
;;;113    
;;;114    static int luaB_getmetatable (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;115      luaL_checkany(L, 1);
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       luaL_checkany
;;;116      if (!lua_getmetatable(L, 1)) {
00000c  2101              MOVS     r1,#1
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       lua_getmetatable
000014  b920              CBNZ     r0,|L11.32|
;;;117        lua_pushnil(L);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       lua_pushnil
;;;118        return 1;  /* no metatable */
00001c  2001              MOVS     r0,#1
                  |L11.30|
;;;119      }
;;;120      luaL_getmetafield(L, 1, "__metatable");
;;;121      return 1;  /* returns either __metatable field (if present) or metatable */
;;;122    }
00001e  bd10              POP      {r4,pc}
                  |L11.32|
000020  a203              ADR      r2,|L11.48|
000022  2101              MOVS     r1,#1                 ;120
000024  4620              MOV      r0,r4                 ;120
000026  f7fffffe          BL       luaL_getmetafield
00002a  2001              MOVS     r0,#1                 ;121
00002c  e7f7              B        |L11.30|
;;;123    
                          ENDP

00002e  0000              DCW      0x0000
                  |L11.48|
000030  5f5f6d65          DCB      "__metatable",0
000034  74617461
000038  626c6500

                          AREA ||i.luaB_ipairs||, CODE, READONLY, ALIGN=2

                  luaB_ipairs PROC
;;;280    */
;;;281    static int luaB_ipairs (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;282      luaL_checkany(L, 1);
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       luaL_checkany
;;;283      lua_pushcfunction(L, ipairsaux);  /* iteration function */
00000c  2200              MOVS     r2,#0
00000e  4907              LDR      r1,|L12.44|
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       lua_pushcclosure
;;;284      lua_pushvalue(L, 1);  /* state */
000016  2101              MOVS     r1,#1
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       lua_pushvalue
;;;285      lua_pushinteger(L, 0);  /* initial value */
00001e  2200              MOVS     r2,#0
000020  4613              MOV      r3,r2
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       lua_pushinteger
;;;286      return 3;
000028  2003              MOVS     r0,#3
;;;287    }
00002a  bd10              POP      {r4,pc}
;;;288    
                          ENDP

                  |L12.44|
                          DCD      ipairsaux

                          AREA ||i.luaB_load||, CODE, READONLY, ALIGN=2

                  luaB_load PROC
;;;353    
;;;354    static int luaB_load (lua_State *L) {
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4607              MOV      r7,r0
;;;355      int status;
;;;356      size_t l;
;;;357      const char *s = lua_tolstring(L, 1, &l);
000006  aa01              ADD      r2,sp,#4
000008  2101              MOVS     r1,#1
00000a  4638              MOV      r0,r7
00000c  f7fffffe          BL       lua_tolstring
000010  4605              MOV      r5,r0
;;;358      const char *mode = luaL_optstring(L, 3, "bt");
000012  2300              MOVS     r3,#0
000014  a220              ADR      r2,|L13.152|
000016  2103              MOVS     r1,#3
000018  4638              MOV      r0,r7
00001a  f7fffffe          BL       luaL_optlstring
00001e  4606              MOV      r6,r0
;;;359      int env = (!lua_isnone(L, 4) ? 4 : 0);  /* 'env' index or 0 if no 'env' */
000020  2104              MOVS     r1,#4
000022  4638              MOV      r0,r7
000024  f7fffffe          BL       lua_type
000028  1c40              ADDS     r0,r0,#1
00002a  b108              CBZ      r0,|L13.48|
00002c  2004              MOVS     r0,#4
00002e  e000              B        |L13.50|
                  |L13.48|
000030  2000              MOVS     r0,#0
                  |L13.50|
000032  4680              MOV      r8,r0
;;;360      if (s != NULL) {  /* loading a string? */
000034  b17d              CBZ      r5,|L13.86|
;;;361        const char *chunkname = luaL_optstring(L, 2, s);
000036  2300              MOVS     r3,#0
000038  462a              MOV      r2,r5
00003a  2102              MOVS     r1,#2
00003c  4638              MOV      r0,r7
00003e  f7fffffe          BL       luaL_optlstring
000042  4681              MOV      r9,r0
;;;362        status = luaL_loadbufferx(L, s, l, chunkname, mode);
000044  464b              MOV      r3,r9
000046  9600              STR      r6,[sp,#0]
000048  4629              MOV      r1,r5
00004a  4638              MOV      r0,r7
00004c  9a01              LDR      r2,[sp,#4]
00004e  f7fffffe          BL       luaL_loadbufferx
000052  4604              MOV      r4,r0
;;;363      }
000054  e018              B        |L13.136|
                  |L13.86|
;;;364      else {  /* loading from a reader function */
;;;365        const char *chunkname = luaL_optstring(L, 2, "=(load)");
000056  2300              MOVS     r3,#0
000058  a210              ADR      r2,|L13.156|
00005a  2102              MOVS     r1,#2
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       luaL_optlstring
000062  4681              MOV      r9,r0
;;;366        luaL_checktype(L, 1, LUA_TFUNCTION);
000064  2206              MOVS     r2,#6
000066  2101              MOVS     r1,#1
000068  4638              MOV      r0,r7
00006a  f7fffffe          BL       luaL_checktype
;;;367        lua_settop(L, RESERVEDSLOT);  /* create reserved slot */
00006e  2105              MOVS     r1,#5
000070  4638              MOV      r0,r7
000072  f7fffffe          BL       lua_settop
;;;368        status = lua_load(L, generic_reader, NULL, chunkname, mode);
000076  464b              MOV      r3,r9
000078  2200              MOVS     r2,#0
00007a  490a              LDR      r1,|L13.164|
00007c  4638              MOV      r0,r7
00007e  9600              STR      r6,[sp,#0]
000080  f7fffffe          BL       lua_load
000084  4604              MOV      r4,r0
;;;369      }
000086  bf00              NOP      
                  |L13.136|
;;;370      return load_aux(L, status, env);
000088  4642              MOV      r2,r8
00008a  4621              MOV      r1,r4
00008c  4638              MOV      r0,r7
00008e  f7fffffe          BL       load_aux
;;;371    }
000092  e8bd87fc          POP      {r2-r10,pc}
;;;372    
                          ENDP

000096  0000              DCW      0x0000
                  |L13.152|
000098  627400            DCB      "bt",0
00009b  00                DCB      0
                  |L13.156|
00009c  3d286c6f          DCB      "=(load)",0
0000a0  61642900
                  |L13.164|
                          DCD      generic_reader

                          AREA ||i.luaB_loadfile||, CODE, READONLY, ALIGN=1

                  luaB_loadfile PROC
;;;306    
;;;307    static int luaB_loadfile (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;308      const char *fname = luaL_optstring(L, 1, NULL);
000006  2300              MOVS     r3,#0
000008  461a              MOV      r2,r3
00000a  2101              MOVS     r1,#1
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       luaL_optlstring
000012  4607              MOV      r7,r0
;;;309      const char *mode = luaL_optstring(L, 2, NULL);
000014  2300              MOVS     r3,#0
000016  461a              MOV      r2,r3
000018  2102              MOVS     r1,#2
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       luaL_optlstring
000020  4680              MOV      r8,r0
;;;310      int env = (!lua_isnone(L, 3) ? 3 : 0);  /* 'env' index or 0 if no 'env' */
000022  2103              MOVS     r1,#3
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       lua_type
00002a  1c40              ADDS     r0,r0,#1
00002c  b108              CBZ      r0,|L14.50|
00002e  2003              MOVS     r0,#3
000030  e000              B        |L14.52|
                  |L14.50|
000032  2000              MOVS     r0,#0
                  |L14.52|
000034  4605              MOV      r5,r0
;;;311      int status = luaL_loadfilex(L, fname, mode);
000036  4642              MOV      r2,r8
000038  4639              MOV      r1,r7
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       luaL_loadfilex
000040  4606              MOV      r6,r0
;;;312      return load_aux(L, status, env);
000042  462a              MOV      r2,r5
000044  4631              MOV      r1,r6
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       load_aux
;;;313    }
00004c  e8bd81f0          POP      {r4-r8,pc}
;;;314    
                          ENDP


                          AREA ||i.luaB_next||, CODE, READONLY, ALIGN=1

                  luaB_next PROC
;;;239    
;;;240    static int luaB_next (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;241      luaL_checktype(L, 1, LUA_TTABLE);
000004  2205              MOVS     r2,#5
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checktype
;;;242      lua_settop(L, 2);  /* create a 2nd argument if there isn't one */
00000e  2102              MOVS     r1,#2
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       lua_settop
;;;243      if (lua_next(L, 1))
000016  2101              MOVS     r1,#1
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       lua_next
00001e  b108              CBZ      r0,|L15.36|
;;;244        return 2;
000020  2002              MOVS     r0,#2
                  |L15.34|
;;;245      else {
;;;246        lua_pushnil(L);
;;;247        return 1;
;;;248      }
;;;249    }
000022  bd10              POP      {r4,pc}
                  |L15.36|
000024  4620              MOV      r0,r4                 ;246
000026  f7fffffe          BL       lua_pushnil
00002a  2001              MOVS     r0,#1                 ;247
00002c  e7f9              B        |L15.34|
;;;250    
                          ENDP


                          AREA ||i.luaB_pairs||, CODE, READONLY, ALIGN=2

                  luaB_pairs PROC
;;;251    
;;;252    static int luaB_pairs (lua_State *L) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;253      luaL_checkany(L, 1);
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       luaL_checkany
;;;254      if (luaL_getmetafield(L, 1, "__pairs") == LUA_TNIL) {  /* no metamethod? */
00000c  a210              ADR      r2,|L16.80|
00000e  2101              MOVS     r1,#1
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       luaL_getmetafield
000016  b960              CBNZ     r0,|L16.50|
;;;255        lua_pushcfunction(L, luaB_next);  /* will return generator, */
000018  2200              MOVS     r2,#0
00001a  490f              LDR      r1,|L16.88|
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       lua_pushcclosure
;;;256        lua_pushvalue(L, 1);  /* state, */
000022  2101              MOVS     r1,#1
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       lua_pushvalue
;;;257        lua_pushnil(L);  /* and initial value */
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       lua_pushnil
000030  e00b              B        |L16.74|
                  |L16.50|
;;;258      }
;;;259      else {
;;;260        lua_pushvalue(L, 1);  /* argument 'self' to metamethod */
000032  2101              MOVS     r1,#1
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       lua_pushvalue
;;;261        lua_call(L, 1, 3);  /* get 3 values from metamethod */
00003a  2000              MOVS     r0,#0
00003c  4603              MOV      r3,r0
00003e  2203              MOVS     r2,#3
000040  2101              MOVS     r1,#1
000042  9000              STR      r0,[sp,#0]
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       lua_callk
                  |L16.74|
;;;262      }
;;;263      return 3;
00004a  2003              MOVS     r0,#3
;;;264    }
00004c  bd38              POP      {r3-r5,pc}
;;;265    
                          ENDP

00004e  0000              DCW      0x0000
                  |L16.80|
000050  5f5f7061          DCB      "__pairs",0
000054  69727300
                  |L16.88|
                          DCD      luaB_next

                          AREA ||i.luaB_pcall||, CODE, READONLY, ALIGN=2

                  luaB_pcall PROC
;;;438    
;;;439    static int luaB_pcall (lua_State *L) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4604              MOV      r4,r0
;;;440      int status;
;;;441      luaL_checkany(L, 1);
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       luaL_checkany
;;;442      lua_pushboolean(L, 1);  /* first result if no errors */
00000c  2101              MOVS     r1,#1
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       lua_pushboolean
;;;443      lua_insert(L, 1);  /* put it in place */
000014  2201              MOVS     r2,#1
000016  4611              MOV      r1,r2
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       lua_rotate
;;;444      status = lua_pcallk(L, lua_gettop(L) - 2, LUA_MULTRET, 0, 0, finishpcall);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       lua_gettop
000024  1e86              SUBS     r6,r0,#2
000026  4808              LDR      r0,|L17.72|
000028  2100              MOVS     r1,#0
00002a  460b              MOV      r3,r1
00002c  1e4a              SUBS     r2,r1,#1
00002e  e9cd1000          STRD     r1,r0,[sp,#0]
000032  4631              MOV      r1,r6
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       lua_pcallk
00003a  4605              MOV      r5,r0
;;;445      return finishpcall(L, status, 0);
00003c  2200              MOVS     r2,#0
00003e  4629              MOV      r1,r5
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       finishpcall
;;;446    }
000046  bd7c              POP      {r2-r6,pc}
;;;447    
                          ENDP

                  |L17.72|
                          DCD      finishpcall

                          AREA ||i.luaB_print||, CODE, READONLY, ALIGN=2

                  luaB_print PROC
;;;23     
;;;24     static int luaB_print (lua_State *L) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4606              MOV      r6,r0
;;;25       int n = lua_gettop(L);  /* number of arguments */
000006  4630              MOV      r0,r6
000008  f7fffffe          BL       lua_gettop
00000c  4607              MOV      r7,r0
;;;26       int i;
;;;27       lua_getglobal(L, "tostring");
00000e  a11d              ADR      r1,|L18.132|
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       lua_getglobal
;;;28       for (i=1; i<=n; i++) {
000016  2401              MOVS     r4,#1
000018  e02e              B        |L18.120|
                  |L18.26|
;;;29         const char *s;
;;;30         size_t l;
;;;31         lua_pushvalue(L, -1);  /* function to be called */
00001a  f04f31ff          MOV      r1,#0xffffffff
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       lua_pushvalue
;;;32         lua_pushvalue(L, i);   /* value to print */
000024  4621              MOV      r1,r4
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lua_pushvalue
;;;33         lua_call(L, 1, 1);
00002c  2000              MOVS     r0,#0
00002e  4603              MOV      r3,r0
000030  2201              MOVS     r2,#1
000032  4611              MOV      r1,r2
000034  9000              STR      r0,[sp,#0]
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       lua_callk
;;;34         s = lua_tolstring(L, -1, &l);  /* get result */
00003c  aa01              ADD      r2,sp,#4
00003e  f04f31ff          MOV      r1,#0xffffffff
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       lua_tolstring
000048  4605              MOV      r5,r0
;;;35         if (s == NULL)
00004a  b92d              CBNZ     r5,|L18.88|
;;;36           return luaL_error(L, "'tostring' must return a string to 'print'");
00004c  a110              ADR      r1,|L18.144|
00004e  4630              MOV      r0,r6
000050  f7fffffe          BL       luaL_error
                  |L18.84|
;;;37         if (i>1) lua_writestring("\t", 1);
;;;38         lua_writestring(s, l);
;;;39         lua_pop(L, 1);  /* pop result */
;;;40       }
;;;41       lua_writeline();
;;;42       return 0;
;;;43     }
000054  e8bd81fc          POP      {r2-r8,pc}
                  |L18.88|
000058  2c01              CMP      r4,#1                 ;37
00005a  dd03              BLE      |L18.100|
00005c  2101              MOVS     r1,#1                 ;37
00005e  a017              ADR      r0,|L18.188|
000060  f7fffffe          BL       RMP_lua_writestring
                  |L18.100|
000064  4628              MOV      r0,r5                 ;38
000066  9901              LDR      r1,[sp,#4]            ;38
000068  f7fffffe          BL       RMP_lua_writestring
00006c  f06f0101          MVN      r1,#1                 ;39
000070  4630              MOV      r0,r6                 ;39
000072  f7fffffe          BL       lua_settop
000076  1c64              ADDS     r4,r4,#1              ;28
                  |L18.120|
000078  42bc              CMP      r4,r7                 ;28
00007a  ddce              BLE      |L18.26|
00007c  f7fffffe          BL       RMP_lua_writeline
000080  2000              MOVS     r0,#0                 ;42
000082  e7e7              B        |L18.84|
;;;44     
                          ENDP

                  |L18.132|
000084  746f7374          DCB      "tostring",0
000088  72696e67
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L18.144|
000090  27746f73          DCB      "'tostring' must return a string to 'print'",0
000094  7472696e
000098  6727206d
00009c  75737420
0000a0  72657475
0000a4  726e2061
0000a8  20737472
0000ac  696e6720
0000b0  746f2027
0000b4  7072696e
0000b8  742700  
0000bb  00                DCB      0
                  |L18.188|
0000bc  0900              DCB      "\t",0
0000be  00                DCB      0
0000bf  00                DCB      0

                          AREA ||i.luaB_rawequal||, CODE, READONLY, ALIGN=1

                  luaB_rawequal PROC
;;;137    
;;;138    static int luaB_rawequal (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;139      luaL_checkany(L, 1);
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       luaL_checkany
;;;140      luaL_checkany(L, 2);
00000c  2102              MOVS     r1,#2
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       luaL_checkany
;;;141      lua_pushboolean(L, lua_rawequal(L, 1, 2));
000014  2202              MOVS     r2,#2
000016  2101              MOVS     r1,#1
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       lua_rawequal
00001e  4605              MOV      r5,r0
000020  4629              MOV      r1,r5
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       lua_pushboolean
;;;142      return 1;
000028  2001              MOVS     r0,#1
;;;143    }
00002a  bd70              POP      {r4-r6,pc}
;;;144    
                          ENDP


                          AREA ||i.luaB_rawget||, CODE, READONLY, ALIGN=1

                  luaB_rawget PROC
;;;154    
;;;155    static int luaB_rawget (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;156      luaL_checktype(L, 1, LUA_TTABLE);
000004  2205              MOVS     r2,#5
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checktype
;;;157      luaL_checkany(L, 2);
00000e  2102              MOVS     r1,#2
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       luaL_checkany
;;;158      lua_settop(L, 2);
000016  2102              MOVS     r1,#2
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       lua_settop
;;;159      lua_rawget(L, 1);
00001e  2101              MOVS     r1,#1
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       lua_rawget
;;;160      return 1;
000026  2001              MOVS     r0,#1
;;;161    }
000028  bd10              POP      {r4,pc}
;;;162    
                          ENDP


                          AREA ||i.luaB_rawlen||, CODE, READONLY, ALIGN=2

                  luaB_rawlen PROC
;;;145    
;;;146    static int luaB_rawlen (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
;;;147      int t = lua_type(L, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       lua_type
00000e  4604              MOV      r4,r0
;;;148      luaL_argcheck(L, t == LUA_TTABLE || t == LUA_TSTRING, 1,
000010  2c05              CMP      r4,#5
000012  d006              BEQ      |L21.34|
000014  2c04              CMP      r4,#4
000016  d004              BEQ      |L21.34|
000018  a208              ADR      r2,|L21.60|
00001a  2101              MOVS     r1,#1
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       luaL_argerror
                  |L21.34|
;;;149                       "table or string expected");
;;;150      lua_pushinteger(L, lua_rawlen(L, 1));
000022  2101              MOVS     r1,#1
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       lua_rawlen
00002a  4606              MOV      r6,r0
00002c  4632              MOV      r2,r6
00002e  460b              MOV      r3,r1
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       lua_pushinteger
;;;151      return 1;
000036  2001              MOVS     r0,#1
;;;152    }
000038  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP

                  |L21.60|
00003c  7461626c          DCB      "table or string expected",0
000040  65206f72
000044  20737472
000048  696e6720
00004c  65787065
000050  63746564
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0

                          AREA ||i.luaB_rawset||, CODE, READONLY, ALIGN=1

                  luaB_rawset PROC
;;;162    
;;;163    static int luaB_rawset (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;164      luaL_checktype(L, 1, LUA_TTABLE);
000004  2205              MOVS     r2,#5
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checktype
;;;165      luaL_checkany(L, 2);
00000e  2102              MOVS     r1,#2
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       luaL_checkany
;;;166      luaL_checkany(L, 3);
000016  2103              MOVS     r1,#3
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       luaL_checkany
;;;167      lua_settop(L, 3);
00001e  2103              MOVS     r1,#3
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       lua_settop
;;;168      lua_rawset(L, 1);
000026  2101              MOVS     r1,#1
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       lua_rawset
;;;169      return 1;
00002e  2001              MOVS     r0,#1
;;;170    }
000030  bd10              POP      {r4,pc}
;;;171    
                          ENDP


                          AREA ||i.luaB_select||, CODE, READONLY, ALIGN=2

                  luaB_select PROC
;;;404    
;;;405    static int luaB_select (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
;;;406      int n = lua_gettop(L);
000006  4638              MOV      r0,r7
000008  f7fffffe          BL       lua_gettop
00000c  4606              MOV      r6,r0
;;;407      if (lua_type(L, 1) == LUA_TSTRING && *lua_tostring(L, 1) == '#') {
00000e  2101              MOVS     r1,#1
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       lua_type
000016  2804              CMP      r0,#4
000018  d111              BNE      |L23.62|
00001a  2200              MOVS     r2,#0
00001c  2101              MOVS     r1,#1
00001e  4638              MOV      r0,r7
000020  f7fffffe          BL       lua_tolstring
000024  7800              LDRB     r0,[r0,#0]
000026  2823              CMP      r0,#0x23
000028  d109              BNE      |L23.62|
;;;408        lua_pushinteger(L, n-1);
00002a  1e70              SUBS     r0,r6,#1
00002c  17c3              ASRS     r3,r0,#31
00002e  4604              MOV      r4,r0
000030  4622              MOV      r2,r4
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       lua_pushinteger
;;;409        return 1;
000038  2001              MOVS     r0,#1
                  |L23.58|
;;;410      }
;;;411      else {
;;;412        lua_Integer i = luaL_checkinteger(L, 1);
;;;413        if (i < 0) i = n + i;
;;;414        else if (i > n) i = n;
;;;415        luaL_argcheck(L, 1 <= i, 1, "index out of range");
;;;416        return n - (int)i;
;;;417      }
;;;418    }
00003a  e8bd81f0          POP      {r4-r8,pc}
                  |L23.62|
00003e  2101              MOVS     r1,#1                 ;412
000040  4638              MOV      r0,r7                 ;412
000042  f7fffffe          BL       luaL_checkinteger
000046  4604              MOV      r4,r0                 ;412
000048  460d              MOV      r5,r1                 ;412
00004a  2100              MOVS     r1,#0                 ;413
00004c  4608              MOV      r0,r1                 ;413
00004e  1a61              SUBS     r1,r4,r1              ;413
000050  eb750000          SBCS     r0,r5,r0              ;413
000054  da03              BGE      |L23.94|
000056  1934              ADDS     r4,r6,r4              ;413
000058  eb4575e6          ADC      r5,r5,r6,ASR #31      ;413
00005c  e005              B        |L23.106|
                  |L23.94|
00005e  17f0              ASRS     r0,r6,#31             ;414
000060  1b31              SUBS     r1,r6,r4              ;414
000062  41a8              SBCS     r0,r0,r5              ;414
000064  da01              BGE      |L23.106|
000066  17f5              ASRS     r5,r6,#31             ;414
000068  4634              MOV      r4,r6                 ;414
                  |L23.106|
00006a  1e61              SUBS     r1,r4,#1              ;415
00006c  f1750000          SBCS     r0,r5,#0              ;415
000070  da04              BGE      |L23.124|
000072  a203              ADR      r2,|L23.128|
000074  2101              MOVS     r1,#1                 ;415
000076  4638              MOV      r0,r7                 ;415
000078  f7fffffe          BL       luaL_argerror
                  |L23.124|
00007c  1b30              SUBS     r0,r6,r4              ;416
00007e  e7dc              B        |L23.58|
;;;419    
                          ENDP

                  |L23.128|
000080  696e6465          DCB      "index out of range",0
000084  78206f75
000088  74206f66
00008c  2072616e
000090  676500  
000093  00                DCB      0

                          AREA ||i.luaB_setmetatable||, CODE, READONLY, ALIGN=2

                  luaB_setmetatable PROC
;;;124    
;;;125    static int luaB_setmetatable (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;126      int t = lua_type(L, 2);
000004  2102              MOVS     r1,#2
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       lua_type
00000c  4604              MOV      r4,r0
;;;127      luaL_checktype(L, 1, LUA_TTABLE);
00000e  2205              MOVS     r2,#5
000010  2101              MOVS     r1,#1
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       luaL_checktype
;;;128      luaL_argcheck(L, t == LUA_TNIL || t == LUA_TTABLE, 2,
000018  b134              CBZ      r4,|L24.40|
00001a  2c05              CMP      r4,#5
00001c  d004              BEQ      |L24.40|
00001e  a20d              ADR      r2,|L24.84|
000020  2102              MOVS     r1,#2
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       luaL_argerror
                  |L24.40|
;;;129                        "nil or table expected");
;;;130      if (luaL_getmetafield(L, 1, "__metatable") != LUA_TNIL)
000028  a210              ADR      r2,|L24.108|
00002a  2101              MOVS     r1,#1
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       luaL_getmetafield
000032  b120              CBZ      r0,|L24.62|
;;;131        return luaL_error(L, "cannot change a protected metatable");
000034  a110              ADR      r1,|L24.120|
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       luaL_error
                  |L24.60|
;;;132      lua_settop(L, 2);
;;;133      lua_setmetatable(L, 1);
;;;134      return 1;
;;;135    }
00003c  bd70              POP      {r4-r6,pc}
                  |L24.62|
00003e  2102              MOVS     r1,#2                 ;132
000040  4628              MOV      r0,r5                 ;132
000042  f7fffffe          BL       lua_settop
000046  2101              MOVS     r1,#1                 ;133
000048  4628              MOV      r0,r5                 ;133
00004a  f7fffffe          BL       lua_setmetatable
00004e  2001              MOVS     r0,#1                 ;134
000050  e7f4              B        |L24.60|
;;;136    
                          ENDP

000052  0000              DCW      0x0000
                  |L24.84|
000054  6e696c20          DCB      "nil or table expected",0
000058  6f722074
00005c  61626c65
000060  20657870
000064  65637465
000068  6400    
00006a  00                DCB      0
00006b  00                DCB      0
                  |L24.108|
00006c  5f5f6d65          DCB      "__metatable",0
000070  74617461
000074  626c6500
                  |L24.120|
000078  63616e6e          DCB      "cannot change a protected metatable",0
00007c  6f742063
000080  68616e67
000084  65206120
000088  70726f74
00008c  65637465
000090  64206d65
000094  74617461
000098  626c6500

                          AREA ||i.luaB_tonumber||, CODE, READONLY, ALIGN=2

                  luaB_tonumber PROC
;;;68     
;;;69     static int luaB_tonumber (lua_State *L) {
000000  b5fe              PUSH     {r1-r7,lr}
000002  4607              MOV      r7,r0
;;;70       if (lua_isnoneornil(L, 2)) {  /* standard conversion? */
000004  2102              MOVS     r1,#2
000006  4638              MOV      r0,r7
000008  f7fffffe          BL       lua_type
00000c  2800              CMP      r0,#0
00000e  dc21              BGT      |L25.84|
;;;71         luaL_checkany(L, 1);
000010  2101              MOVS     r1,#1
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       luaL_checkany
;;;72         if (lua_type(L, 1) == LUA_TNUMBER) {  /* already a number? */
000018  2101              MOVS     r1,#1
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       lua_type
000020  2803              CMP      r0,#3
000022  d105              BNE      |L25.48|
;;;73           lua_settop(L, 1);  /* yes; return it */
000024  2101              MOVS     r1,#1
000026  4638              MOV      r0,r7
000028  f7fffffe          BL       lua_settop
;;;74           return 1;
00002c  2001              MOVS     r0,#1
                  |L25.46|
;;;75         }
;;;76         else {
;;;77           size_t l;
;;;78           const char *s = lua_tolstring(L, 1, &l);
;;;79           if (s != NULL && lua_stringtonumber(L, s) == l + 1)
;;;80             return 1;  /* successful conversion to number */
;;;81           /* else not a number */
;;;82         }
;;;83       }
;;;84       else {
;;;85         size_t l;
;;;86         const char *s;
;;;87         lua_Integer n = 0;  /* to avoid warnings */
;;;88         lua_Integer base = luaL_checkinteger(L, 2);
;;;89         luaL_checktype(L, 1, LUA_TSTRING);  /* no numbers as strings */
;;;90         s = lua_tolstring(L, 1, &l);
;;;91         luaL_argcheck(L, 2 <= base && base <= 36, 2, "base out of range");
;;;92         if (b_str2int(s, (int)base, &n) == s + l) {
;;;93           lua_pushinteger(L, n);
;;;94           return 1;
;;;95         }  /* else not a number */
;;;96       }  /* else not a number */
;;;97       lua_pushnil(L);  /* not a number */
;;;98       return 1;
;;;99     }
00002e  bdfe              POP      {r1-r7,pc}
                  |L25.48|
000030  aa02              ADD      r2,sp,#8              ;78
000032  2101              MOVS     r1,#1                 ;78
000034  4638              MOV      r0,r7                 ;78
000036  f7fffffe          BL       lua_tolstring
00003a  4604              MOV      r4,r0                 ;78
00003c  b14c              CBZ      r4,|L25.82|
00003e  4621              MOV      r1,r4                 ;79
000040  4638              MOV      r0,r7                 ;79
000042  f7fffffe          BL       lua_stringtonumber
000046  9902              LDR      r1,[sp,#8]            ;79
000048  1c49              ADDS     r1,r1,#1              ;79
00004a  4288              CMP      r0,r1                 ;79
00004c  d101              BNE      |L25.82|
00004e  2001              MOVS     r0,#1                 ;80
000050  e7ed              B        |L25.46|
                  |L25.82|
000052  e032              B        |L25.186|
                  |L25.84|
000054  2100              MOVS     r1,#0                 ;87
000056  9100              STR      r1,[sp,#0]            ;87
000058  9101              STR      r1,[sp,#4]            ;87
00005a  2102              MOVS     r1,#2                 ;88
00005c  4638              MOV      r0,r7                 ;88
00005e  f7fffffe          BL       luaL_checkinteger
000062  4604              MOV      r4,r0                 ;88
000064  460d              MOV      r5,r1                 ;88
000066  2204              MOVS     r2,#4                 ;89
000068  2101              MOVS     r1,#1                 ;89
00006a  4638              MOV      r0,r7                 ;89
00006c  f7fffffe          BL       luaL_checktype
000070  aa02              ADD      r2,sp,#8              ;90
000072  2101              MOVS     r1,#1                 ;90
000074  4638              MOV      r0,r7                 ;90
000076  f7fffffe          BL       lua_tolstring
00007a  4606              MOV      r6,r0                 ;90
00007c  1ea1              SUBS     r1,r4,#2              ;91
00007e  f1750000          SBCS     r0,r5,#0              ;91
000082  db04              BLT      |L25.142|
000084  2000              MOVS     r0,#0                 ;91
000086  f1d40124          RSBS     r1,r4,#0x24           ;91
00008a  41a8              SBCS     r0,r0,r5              ;91
00008c  da04              BGE      |L25.152|
                  |L25.142|
00008e  a20d              ADR      r2,|L25.196|
000090  2102              MOVS     r1,#2                 ;91
000092  4638              MOV      r0,r7                 ;91
000094  f7fffffe          BL       luaL_argerror
                  |L25.152|
000098  466a              MOV      r2,sp                 ;92
00009a  4621              MOV      r1,r4                 ;92
00009c  4630              MOV      r0,r6                 ;92
00009e  f7fffffe          BL       b_str2int
0000a2  9902              LDR      r1,[sp,#8]            ;92
0000a4  4431              ADD      r1,r1,r6              ;92
0000a6  4288              CMP      r0,r1                 ;92
0000a8  d106              BNE      |L25.184|
0000aa  4638              MOV      r0,r7                 ;93
0000ac  e9dd2300          LDRD     r2,r3,[sp,#0]         ;93
0000b0  f7fffffe          BL       lua_pushinteger
0000b4  2001              MOVS     r0,#1                 ;94
0000b6  e7ba              B        |L25.46|
                  |L25.184|
0000b8  bf00              NOP                            ;96
                  |L25.186|
0000ba  4638              MOV      r0,r7                 ;97
0000bc  f7fffffe          BL       lua_pushnil
0000c0  2001              MOVS     r0,#1                 ;98
0000c2  e7b4              B        |L25.46|
;;;100    
                          ENDP

                  |L25.196|
0000c4  62617365          DCB      "base out of range",0
0000c8  206f7574
0000cc  206f6620
0000d0  72616e67
0000d4  6500    
0000d6  00                DCB      0
0000d7  00                DCB      0

                          AREA ||i.luaB_tostring||, CODE, READONLY, ALIGN=1

                  luaB_tostring PROC
;;;465    
;;;466    static int luaB_tostring (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;467      luaL_checkany(L, 1);
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       luaL_checkany
;;;468      luaL_tolstring(L, 1, NULL);
00000c  2200              MOVS     r2,#0
00000e  2101              MOVS     r1,#1
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       luaL_tolstring
;;;469      return 1;
000016  2001              MOVS     r0,#1
;;;470    }
000018  bd10              POP      {r4,pc}
;;;471    
                          ENDP


                          AREA ||i.luaB_type||, CODE, READONLY, ALIGN=2

                  luaB_type PROC
;;;231    
;;;232    static int luaB_type (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;233      int t = lua_type(L, 1);
000004  2101              MOVS     r1,#1
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       lua_type
00000c  4604              MOV      r4,r0
;;;234      luaL_argcheck(L, t != LUA_TNONE, 1, "value expected");
00000e  1c60              ADDS     r0,r4,#1
000010  b920              CBNZ     r0,|L27.28|
000012  a208              ADR      r2,|L27.52|
000014  2101              MOVS     r1,#1
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       luaL_argerror
                  |L27.28|
;;;235      lua_pushstring(L, lua_typename(L, t));
00001c  4621              MOV      r1,r4
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       lua_typename
000024  4606              MOV      r6,r0
000026  4631              MOV      r1,r6
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       lua_pushstring
;;;236      return 1;
00002e  2001              MOVS     r0,#1
;;;237    }
000030  bd70              POP      {r4-r6,pc}
;;;238    
                          ENDP

000032  0000              DCW      0x0000
                  |L27.52|
000034  76616c75          DCB      "value expected",0
000038  65206578
00003c  70656374
000040  656400  
000043  00                DCB      0

                          AREA ||i.luaB_xpcall||, CODE, READONLY, ALIGN=2

                  luaB_xpcall PROC
;;;453    */
;;;454    static int luaB_xpcall (lua_State *L) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4604              MOV      r4,r0
;;;455      int status;
;;;456      int n = lua_gettop(L);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       lua_gettop
00000a  4606              MOV      r6,r0
;;;457      luaL_checktype(L, 2, LUA_TFUNCTION);  /* check error function */
00000c  2206              MOVS     r2,#6
00000e  2102              MOVS     r1,#2
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       luaL_checktype
;;;458      lua_pushboolean(L, 1);  /* first result */
000016  2101              MOVS     r1,#1
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       lua_pushboolean
;;;459      lua_pushvalue(L, 1);  /* function */
00001e  2101              MOVS     r1,#1
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       lua_pushvalue
;;;460      lua_rotate(L, 3, 2);  /* move them below function's arguments */
000026  2202              MOVS     r2,#2
000028  2103              MOVS     r1,#3
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       lua_rotate
;;;461      status = lua_pcallk(L, n - 2, LUA_MULTRET, 2, 2, finishpcall);
000030  4808              LDR      r0,|L28.84|
000032  2102              MOVS     r1,#2
000034  e9cd1000          STRD     r1,r0,[sp,#0]
000038  1eb1              SUBS     r1,r6,#2
00003a  2302              MOVS     r3,#2
00003c  1eda              SUBS     r2,r3,#3
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       lua_pcallk
000044  4605              MOV      r5,r0
;;;462      return finishpcall(L, status, 2);
000046  2202              MOVS     r2,#2
000048  4629              MOV      r1,r5
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       finishpcall
;;;463    }
000050  bd7c              POP      {r2-r6,pc}
;;;464    
                          ENDP

000052  0000              DCW      0x0000
                  |L28.84|
                          DCD      finishpcall

                          AREA ||i.luaopen_base||, CODE, READONLY, ALIGN=2

                  luaopen_base PROC
;;;502    
;;;503    LUAMOD_API int luaopen_base (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;504      /* open lib into global table */
;;;505      lua_pushglobaltable(L);
000004  2202              MOVS     r2,#2
000006  2300              MOVS     r3,#0
000008  490f              LDR      r1,|L29.72|
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       lua_rawgeti
;;;506      luaL_setfuncs(L, base_funcs, 0);
000010  2200              MOVS     r2,#0
000012  490e              LDR      r1,|L29.76|
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       luaL_setfuncs
;;;507      /* set global _G */
;;;508      lua_pushvalue(L, -1);
00001a  f04f31ff          MOV      r1,#0xffffffff
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       lua_pushvalue
;;;509      lua_setfield(L, -2, LUA_GNAME);
000024  a20a              ADR      r2,|L29.80|
000026  f06f0101          MVN      r1,#1
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       lua_setfield
;;;510      /* set global _VERSION */
;;;511      lua_pushliteral(L, LUA_VERSION);
000030  a108              ADR      r1,|L29.84|
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       lua_pushstring
;;;512      lua_setfield(L, -2, "_VERSION");
000038  a208              ADR      r2,|L29.92|
00003a  f06f0101          MVN      r1,#1
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       lua_setfield
;;;513      return 1;
000044  2001              MOVS     r0,#1
;;;514    }
000046  bd10              POP      {r4,pc}
;;;515    
                          ENDP

                  |L29.72|
                          DCD      0xfff0b9d8
                  |L29.76|
                          DCD      base_funcs
                  |L29.80|
000050  5f4700            DCB      "_G",0
000053  00                DCB      0
                  |L29.84|
000054  4c756120          DCB      "Lua 5.4",0
000058  352e3400
                  |L29.92|
00005c  5f564552          DCB      "_VERSION",0
000060  53494f4e
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.pushmode||, CODE, READONLY, ALIGN=2

                  pushmode PROC
;;;172    
;;;173    static int pushmode (lua_State *L, int oldmode) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;174      lua_pushstring(L, (oldmode == LUA_GCINC) ? "incremental" : "generational");
000006  2c0b              CMP      r4,#0xb
000008  d101              BNE      |L30.14|
00000a  a004              ADR      r0,|L30.28|
00000c  e000              B        |L30.16|
                  |L30.14|
00000e  a006              ADR      r0,|L30.40|
                  |L30.16|
000010  4601              MOV      r1,r0
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       lua_pushstring
;;;175      return 1;
000018  2001              MOVS     r0,#1
;;;176    }
00001a  bd70              POP      {r4-r6,pc}
;;;177    
                          ENDP

                  |L30.28|
00001c  696e6372          DCB      "incremental",0
000020  656d656e
000024  74616c00
                  |L30.40|
000028  67656e65          DCB      "generational",0
00002c  72617469
000030  6f6e616c
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  base_funcs
                          DCD      ||.conststring||
                          DCD      luaB_assert
                          DCD      ||.conststring||+0x8
                          DCD      luaB_collectgarbage
                          DCD      ||.conststring||+0x18
                          DCD      luaB_dofile
                          DCD      ||.conststring||+0x20
                          DCD      luaB_error
                          DCD      ||.conststring||+0x28
                          DCD      luaB_getmetatable
                          DCD      ||.conststring||+0x38
                          DCD      luaB_ipairs
                          DCD      ||.conststring||+0x40
                          DCD      luaB_loadfile
                          DCD      ||.conststring||+0x4c
                          DCD      luaB_load
                          DCD      ||.conststring||+0x54
                          DCD      luaB_next
                          DCD      ||.conststring||+0x5c
                          DCD      luaB_pairs
                          DCD      ||.conststring||+0x64
                          DCD      luaB_pcall
                          DCD      ||.conststring||+0x6c
                          DCD      luaB_print
                          DCD      ||.conststring||+0x74
                          DCD      luaB_rawequal
                          DCD      ||.conststring||+0x80
                          DCD      luaB_rawlen
                          DCD      ||.conststring||+0x88
                          DCD      luaB_rawget
                          DCD      ||.conststring||+0x90
                          DCD      luaB_rawset
                          DCD      ||.conststring||+0x98
                          DCD      luaB_select
                          DCD      ||.conststring||+0xa0
                          DCD      luaB_setmetatable
                          DCD      ||.conststring||+0xb0
                          DCD      luaB_tonumber
                          DCD      ||.conststring||+0xbc
                          DCD      luaB_tostring
                          DCD      ||.conststring||+0xc8
                          DCD      luaB_type
                          DCD      ||.conststring||+0xd0
                          DCD      luaB_xpcall
                          DCD      ||.conststring||+0xd8
                          DCD      0x00000000
                          DCD      ||.conststring||+0xdc
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                  opts
                          DCD      ||.conststring||+0xe8
                          DCD      ||.conststring||+0xf0
                          DCD      ||.conststring||+0xf8
                          DCD      ||.conststring||+0x100
                          DCD      ||.conststring||+0x108
                          DCD      ||.conststring||+0x110
                          DCD      ||.conststring||+0x11c
                          DCD      ||.conststring||+0x128
                          DCD      ||.conststring||+0x134
                          DCD      ||.conststring||+0x144
                          DCD      0x00000000
                  optsnum
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000003
                          DCD      0x00000005
                          DCD      0x00000006
                          DCD      0x00000007
                          DCD      0x00000009
                          DCD      0x0000000a
                          DCD      0x0000000b

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  61737365          DCB      "assert",0
000004  727400  
000007  00                DCB      0
000008  636f6c6c          DCB      "collectgarbage",0
00000c  65637467
000010  61726261
000014  676500  
000017  00                DCB      0
000018  646f6669          DCB      "dofile",0
00001c  6c6500  
00001f  00                DCB      0
000020  6572726f          DCB      "error",0
000024  7200    
000026  00                DCB      0
000027  00                DCB      0
000028  6765746d          DCB      "getmetatable",0
00002c  65746174
000030  61626c65
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0
000038  69706169          DCB      "ipairs",0
00003c  727300  
00003f  00                DCB      0
000040  6c6f6164          DCB      "loadfile",0
000044  66696c65
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
00004c  6c6f6164          DCB      "load",0
000050  00      
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0
000054  6e657874          DCB      "next",0
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0
00005c  70616972          DCB      "pairs",0
000060  7300    
000062  00                DCB      0
000063  00                DCB      0
000064  7063616c          DCB      "pcall",0
000068  6c00    
00006a  00                DCB      0
00006b  00                DCB      0
00006c  7072696e          DCB      "print",0
000070  7400    
000072  00                DCB      0
000073  00                DCB      0
000074  72617765          DCB      "rawequal",0
000078  7175616c
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
000080  7261776c          DCB      "rawlen",0
000084  656e00  
000087  00                DCB      0
000088  72617767          DCB      "rawget",0
00008c  657400  
00008f  00                DCB      0
000090  72617773          DCB      "rawset",0
000094  657400  
000097  00                DCB      0
000098  73656c65          DCB      "select",0
00009c  637400  
00009f  00                DCB      0
0000a0  7365746d          DCB      "setmetatable",0
0000a4  65746174
0000a8  61626c65
0000ac  00      
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0
0000b0  746f6e75          DCB      "tonumber",0
0000b4  6d626572
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
0000bc  746f7374          DCB      "tostring",0
0000c0  72696e67
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
0000c8  74797065          DCB      "type",0
0000cc  00      
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
0000d0  78706361          DCB      "xpcall",0
0000d4  6c6c00  
0000d7  00                DCB      0
0000d8  5f4700            DCB      "_G",0
0000db  00                DCB      0
0000dc  5f564552          DCB      "_VERSION",0
0000e0  53494f4e
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0
0000e8  73746f70          DCB      "stop",0
0000ec  00      
0000ed  00                DCB      0
0000ee  00                DCB      0
0000ef  00                DCB      0
0000f0  72657374          DCB      "restart",0
0000f4  61727400
0000f8  636f6c6c          DCB      "collect",0
0000fc  65637400
000100  636f756e          DCB      "count",0
000104  7400    
000106  00                DCB      0
000107  00                DCB      0
000108  73746570          DCB      "step",0
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0
000110  73657470          DCB      "setpause",0
000114  61757365
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
00011c  73657473          DCB      "setstepmul",0
000120  7465706d
000124  756c00  
000127  00                DCB      0
000128  69737275          DCB      "isrunning",0
00012c  6e6e696e
000130  6700    
000132  00                DCB      0
000133  00                DCB      0
000134  67656e65          DCB      "generational",0
000138  72617469
00013c  6f6e616c
000140  00      
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0
000144  696e6372          DCB      "incremental",0
000148  656d656e
00014c  74616c00
