; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\test_duktape.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\test_duktape.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(D)_Duktape\duktape\src -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-DUKTAPE\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DDUK_USE_BYTEORDER=1 --enum_is_int --signed_chars --omf_browse=.\debug\output\test_duktape.crf Source\test_duktape.c]
                          THUMB

                          AREA ||i.Func_1||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  Func_1 PROC
;;;88     ******************************************************************************/
;;;89     void Func_1(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;90     {
;;;91         duk_context *ctx;
;;;92     	int i;
;;;93     	const char *res;
;;;94         
;;;95         const char argc=3;
000002  bf00              NOP      
;;;96         const char* argv[3]={"sss\n","var fac = function me(x) { return x <= 1 ? 1 : x * me(x-1) }","fac(10)"};
000004  4a2a              LDR      r2,|L1.176|
000006  ca07              LDM      r2,{r0-r2}
000008  ab01              ADD      r3,sp,#4
00000a  c307              STM      r3!,{r0-r2}
;;;97     
;;;98     	if (argc < 2) {
;;;99     		usage_exit();
;;;100    	}
;;;101    
;;;102    	ctx = duk_create_heap_default();
00000c  2000              MOVS     r0,#0
00000e  4603              MOV      r3,r0
000010  4602              MOV      r2,r0
000012  4601              MOV      r1,r0
000014  9000              STR      r0,[sp,#0]
000016  f7fffffe          BL       duk_create_heap
00001a  4606              MOV      r6,r0
;;;103    
;;;104    	duk_push_c_function(ctx, native_print, DUK_VARARGS);
00001c  f04f32ff          MOV      r2,#0xffffffff
000020  4924              LDR      r1,|L1.180|
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       duk_push_c_function
;;;105    	duk_put_global_string(ctx, "print");
000028  a123              ADR      r1,|L1.184|
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       duk_put_global_string
;;;106    
;;;107    	for (i = 1; i < argc; i++) {
000030  2401              MOVS     r4,#1
000032  e035              B        |L1.160|
                  |L1.52|
;;;108    		sprintf(Buf,"=== eval: '%s' ===\n", argv[i]);
000034  a801              ADD      r0,sp,#4
000036  f8502024          LDR      r2,[r0,r4,LSL #2]
00003a  a121              ADR      r1,|L1.192|
00003c  4825              LDR      r0,|L1.212|
00003e  f7fffffe          BL       __2sprintf
;;;109            RMP_PRINTK_S(Buf);
000042  4824              LDR      r0,|L1.212|
000044  f7fffffe          BL       RMP_Print_String
;;;110    		duk_push_string(ctx, argv[i]);
000048  a801              ADD      r0,sp,#4
00004a  f8501024          LDR      r1,[r0,r4,LSL #2]
00004e  4630              MOV      r0,r6
000050  f7fffffe          BL       duk_push_string
;;;111    		duk_safe_call(ctx, eval_raw, NULL, 1 /*nargs*/, 1 /*nrets*/);
000054  2001              MOVS     r0,#1
000056  4603              MOV      r3,r0
000058  2200              MOVS     r2,#0
00005a  491f              LDR      r1,|L1.216|
00005c  9000              STR      r0,[sp,#0]
00005e  4630              MOV      r0,r6
000060  f7fffffe          BL       duk_safe_call
;;;112    		duk_safe_call(ctx, tostring_raw, NULL, 1 /*nargs*/, 1 /*nrets*/);
000064  2001              MOVS     r0,#1
000066  4603              MOV      r3,r0
000068  2200              MOVS     r2,#0
00006a  491c              LDR      r1,|L1.220|
00006c  9000              STR      r0,[sp,#0]
00006e  4630              MOV      r0,r6
000070  f7fffffe          BL       duk_safe_call
;;;113    		res = duk_get_string(ctx, -1);
000074  f04f31ff          MOV      r1,#0xffffffff
000078  4630              MOV      r0,r6
00007a  f7fffffe          BL       duk_get_string
00007e  4605              MOV      r5,r0
;;;114    		sprintf(Buf,"%s\n", res ? res : "null");
000080  b10d              CBZ      r5,|L1.134|
000082  4628              MOV      r0,r5
000084  e000              B        |L1.136|
                  |L1.134|
000086  a016              ADR      r0,|L1.224|
                  |L1.136|
000088  4602              MOV      r2,r0
00008a  a117              ADR      r1,|L1.232|
00008c  4811              LDR      r0,|L1.212|
00008e  f7fffffe          BL       __2sprintf
;;;115            RMP_PRINTK_S(Buf);
000092  4810              LDR      r0,|L1.212|
000094  f7fffffe          BL       RMP_Print_String
;;;116    		duk_pop(ctx);
000098  4630              MOV      r0,r6
00009a  f7fffffe          BL       duk_pop
00009e  1c64              ADDS     r4,r4,#1              ;107
                  |L1.160|
0000a0  2c03              CMP      r4,#3                 ;107
0000a2  dbc7              BLT      |L1.52|
;;;117    	}
;;;118    
;;;119    	duk_destroy_heap(ctx);
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       duk_destroy_heap
;;;120        while(1);
0000aa  bf00              NOP      
                  |L1.172|
0000ac  e7fe              B        |L1.172|
;;;121    }
;;;122    /* End Function:Func_1 *******************************************************/
                          ENDP

0000ae  0000              DCW      0x0000
                  |L1.176|
                          DCD      ||.constdata||
                  |L1.180|
                          DCD      native_print
                  |L1.184|
0000b8  7072696e          DCB      "print",0
0000bc  7400    
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L1.192|
0000c0  3d3d3d20          DCB      "=== eval: '%s' ===\n",0
0000c4  6576616c
0000c8  3a202725
0000cc  7327203d
0000d0  3d3d0a00
                  |L1.212|
                          DCD      Buf
                  |L1.216|
                          DCD      eval_raw
                  |L1.220|
                          DCD      tostring_raw
                  |L1.224|
0000e0  6e756c6c          DCB      "null",0
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L1.232|
0000e8  25730a00          DCB      "%s\n",0

                          AREA ||i.Func_2||, CODE, READONLY, ALIGN=1

                  Func_2 PROC
;;;129    ******************************************************************************/
;;;130    void Func_2(void)
000000  bf00              NOP      
                  |L2.2|
;;;131    {
;;;132        while(1);
000002  e7fe              B        |L2.2|
;;;133    }
;;;134    /* End Function:Func_2 *******************************************************/
                          ENDP


                          AREA ||i.RMP_Init_Hook||, CODE, READONLY, ALIGN=2

                  RMP_Init_Hook PROC
;;;141    ******************************************************************************/
;;;142    void RMP_Init_Hook(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;143    {
;;;144        /* Clean up the structures */
;;;145        RMP_Clear(&Thd_1,sizeof(struct RMP_Thd));
000002  213c              MOVS     r1,#0x3c
000004  4812              LDR      r0,|L3.80|
000006  f7fffffe          BL       RMP_Clear
;;;146        RMP_Clear(&Thd_2,sizeof(struct RMP_Thd));
00000a  213c              MOVS     r1,#0x3c
00000c  4811              LDR      r0,|L3.84|
00000e  f7fffffe          BL       RMP_Clear
;;;147        RMP_Clear(&Sem_1,sizeof(struct RMP_Sem));
000012  2110              MOVS     r1,#0x10
000014  4810              LDR      r0,|L3.88|
000016  f7fffffe          BL       RMP_Clear
;;;148        /* Create counting semaphore */
;;;149        RMP_Sem_Crt(&Sem_1,0);
00001a  2100              MOVS     r1,#0
00001c  480e              LDR      r0,|L3.88|
00001e  f7fffffe          BL       RMP_Sem_Crt
;;;150        /* Start threads */
;;;151        RMP_Thd_Crt(&Thd_1, Func_1, THD1_STACK, (void*)0x1234, 1, 5);
000022  2005              MOVS     r0,#5
000024  2101              MOVS     r1,#1
000026  f2412334          MOV      r3,#0x1234
00002a  4a0c              LDR      r2,|L3.92|
00002c  e9cd1000          STRD     r1,r0,[sp,#0]
000030  490b              LDR      r1,|L3.96|
000032  4807              LDR      r0,|L3.80|
000034  f7fffffe          BL       RMP_Thd_Crt
;;;152        RMP_Thd_Crt(&Thd_2, Func_2, THD2_STACK, (void*)0x4321, 1, 5);
000038  2005              MOVS     r0,#5
00003a  2101              MOVS     r1,#1
00003c  f2443321          MOV      r3,#0x4321
000040  4a08              LDR      r2,|L3.100|
000042  e9cd1000          STRD     r1,r0,[sp,#0]
000046  4908              LDR      r1,|L3.104|
000048  4802              LDR      r0,|L3.84|
00004a  f7fffffe          BL       RMP_Thd_Crt
;;;153    }
00004e  bd1c              POP      {r2-r4,pc}
;;;154    
                          ENDP

                  |L3.80|
                          DCD      Thd_1
                  |L3.84|
                          DCD      Thd_2
                  |L3.88|
                          DCD      Sem_1
                  |L3.92|
                          DCD      Stack_1+0x7e90
                  |L3.96|
                          DCD      Func_1
                  |L3.100|
                          DCD      Stack_2+0x7e90
                  |L3.104|
                          DCD      Func_2

                          AREA ||i.RMP_Init_Idle||, CODE, READONLY, ALIGN=1

                  RMP_Init_Idle PROC
;;;154    
;;;155    void RMP_Init_Idle(void)
000000  4770              BX       lr
;;;156    {
;;;157        return;
;;;158    }
;;;159    /* End Function:RMP_Init *****************************************************/
                          ENDP


                          AREA ||i.RMP_Point||, CODE, READONLY, ALIGN=1

                  RMP_Point PROC
;;;46     
;;;47     void RMP_Point(cnt_t X, cnt_t Y, ptr_t C)
000000  4770              BX       lr
;;;48     {
;;;49         
;;;50     }
;;;51     
                          ENDP


                          AREA ||i.eval_raw||, CODE, READONLY, ALIGN=1

                  eval_raw PROC
;;;66     
;;;67     static duk_ret_t eval_raw(duk_context *ctx, void *udata) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;68     	(void) udata;
;;;69     	duk_eval(ctx);
000006  f6400309          MOV      r3,#0x809
00000a  2200              MOVS     r2,#0
00000c  4611              MOV      r1,r2
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       duk_eval_raw
;;;70     	return 1;
000014  2001              MOVS     r0,#1
;;;71     }
000016  bd70              POP      {r4-r6,pc}
;;;72     
                          ENDP


                          AREA ||i.native_print||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  native_print PROC
;;;57     
;;;58     static duk_ret_t native_print(duk_context *ctx) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;59     	duk_push_string(ctx, " ");
000004  a10f              ADR      r1,|L7.68|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       duk_push_string
;;;60     	duk_insert(ctx, 0);
00000c  2100              MOVS     r1,#0
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       duk_insert
;;;61     	duk_join(ctx, duk_get_top(ctx) - 1);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       duk_get_top
00001a  1e45              SUBS     r5,r0,#1
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       duk_join
;;;62     	sprintf(Buf,"%s\n", duk_to_string(ctx, -1));
000024  f04f31ff          MOV      r1,#0xffffffff
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       duk_to_string
00002e  4605              MOV      r5,r0
000030  462a              MOV      r2,r5
000032  a105              ADR      r1,|L7.72|
000034  4805              LDR      r0,|L7.76|
000036  f7fffffe          BL       __2sprintf
;;;63         RMP_PRINTK_S(Buf);
00003a  4804              LDR      r0,|L7.76|
00003c  f7fffffe          BL       RMP_Print_String
;;;64     	return 0;
000040  2000              MOVS     r0,#0
;;;65     }
000042  bd70              POP      {r4-r6,pc}
;;;66     
                          ENDP

                  |L7.68|
000044  2000              DCB      " ",0
000046  00                DCB      0
000047  00                DCB      0
                  |L7.72|
000048  25730a00          DCB      "%s\n",0
                  |L7.76|
                          DCD      Buf

                          AREA ||i.time||, CODE, READONLY, ALIGN=1

                  time PROC
;;;51     
;;;52     time_t time(time_t* time)
000000  4601              MOV      r1,r0
;;;53     {
;;;54         *time=0;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;55         return 0;
;;;56     }
000006  4770              BX       lr
;;;57     
                          ENDP


                          AREA ||i.tostring_raw||, CODE, READONLY, ALIGN=1

                  tostring_raw PROC
;;;72     
;;;73     static duk_ret_t tostring_raw(duk_context *ctx, void *udata) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;74     	(void) udata;
;;;75     	duk_to_string(ctx, -1);
000006  f04f31ff          MOV      r1,#0xffffffff
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       duk_to_string
;;;76     	return 1;
000010  2001              MOVS     r0,#1
;;;77     }
000012  bd70              POP      {r4-r6,pc}
;;;78     
                          ENDP


                          AREA ||i.usage_exit||, CODE, READONLY, ALIGN=1

                  usage_exit PROC
;;;78     
;;;79     static void usage_exit(void) {
000000  bf00              NOP      
                  |L10.2|
;;;80     	while(1);
000002  e7fe              B        |L10.2|
;;;81     }
;;;82     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Stack_1
                          %        32768
                  Stack_2
                          %        32768
                  Thd_1
                          %        60
                  Thd_2
                          %        60
                  Sem_1
                          %        16
                  Pool
                          %        32768
                  Buf
                          %        1024

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0x48

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  7373730a          DCB      "sss\n",0
000004  00      
000005  00                DCB      0
000006  00                DCB      0
000007  00                DCB      0
000008  76617220          DCB      "var fac = function me(x) { return x <= 1 ? 1 : x * me(x"
00000c  66616320
000010  3d206675
000014  6e637469
000018  6f6e206d
00001c  65287829
000020  207b2072
000024  65747572
000028  6e207820
00002c  3c3d2031
000030  203f2031
000034  203a2078
000038  202a206d
00003c  652878  
00003f  2d312920          DCB      "-1) }",0
000043  7d00    
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0
000048  66616328          DCB      "fac(10)",0
00004c  31302900

;*** Start embedded assembler ***

#line 1 "Source\\test_duktape.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_test_duktape_c_Pool____REV16|
#line 464 "D:\\Program_Files_x86\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_test_duktape_c_Pool____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_test_duktape_c_Pool____REVSH|
#line 479
|__asm___14_test_duktape_c_Pool____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_test_duktape_c_Pool____RRX|
#line 666
|__asm___14_test_duktape_c_Pool____RRX| PROC
#line 667

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
