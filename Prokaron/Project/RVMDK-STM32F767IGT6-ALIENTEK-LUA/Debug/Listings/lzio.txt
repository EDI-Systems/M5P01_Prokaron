; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\lzio.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\lzio.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\lzio.crf ..\..\..\M6P1(L)_Lua\lua\lzio.c]
                          THUMB

                          AREA ||i.luaZ_fill||, CODE, READONLY, ALIGN=1

                  luaZ_fill PROC
;;;22     
;;;23     int luaZ_fill (ZIO *z) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4604              MOV      r4,r0
;;;24       size_t size;
;;;25       lua_State *L = z->L;
000004  6926              LDR      r6,[r4,#0x10]
;;;26       const char *buff;
;;;27       lua_unlock(L);
;;;28       buff = z->reader(L, z->data, &size);
000006  466a              MOV      r2,sp
000008  4630              MOV      r0,r6
00000a  e9d43102          LDRD     r3,r1,[r4,#8]
00000e  4798              BLX      r3
000010  4605              MOV      r5,r0
;;;29       lua_lock(L);
;;;30       if (buff == NULL || size == 0)
000012  b10d              CBZ      r5,|L1.24|
000014  9800              LDR      r0,[sp,#0]
000016  b910              CBNZ     r0,|L1.30|
                  |L1.24|
;;;31         return EOZ;
000018  f04f30ff          MOV      r0,#0xffffffff
                  |L1.28|
;;;32       z->n = size - 1;  /* discount char being returned */
;;;33       z->p = buff;
;;;34       return cast_uchar(*(z->p++));
;;;35     }
00001c  bdf8              POP      {r3-r7,pc}
                  |L1.30|
00001e  9800              LDR      r0,[sp,#0]            ;32
000020  1e40              SUBS     r0,r0,#1              ;32
000022  6020              STR      r0,[r4,#0]            ;32
000024  6065              STR      r5,[r4,#4]            ;33
000026  6861              LDR      r1,[r4,#4]            ;34
000028  1c48              ADDS     r0,r1,#1              ;34
00002a  6060              STR      r0,[r4,#4]            ;34
00002c  7808              LDRB     r0,[r1,#0]            ;34
00002e  e7f5              B        |L1.28|
;;;36     
                          ENDP


                          AREA ||i.luaZ_init||, CODE, READONLY, ALIGN=1

                  luaZ_init PROC
;;;37     
;;;38     void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader, void *data) {
000000  b510              PUSH     {r4,lr}
;;;39       z->L = L;
000002  6108              STR      r0,[r1,#0x10]
;;;40       z->reader = reader;
000004  608a              STR      r2,[r1,#8]
;;;41       z->data = data;
000006  60cb              STR      r3,[r1,#0xc]
;;;42       z->n = 0;
000008  2400              MOVS     r4,#0
00000a  600c              STR      r4,[r1,#0]
;;;43       z->p = NULL;
00000c  604c              STR      r4,[r1,#4]
;;;44     }
00000e  bd10              POP      {r4,pc}
;;;45     
                          ENDP


                          AREA ||i.luaZ_read||, CODE, READONLY, ALIGN=1

                  luaZ_read PROC
;;;47     /* --------------------------------------------------------------- read --- */
;;;48     size_t luaZ_read (ZIO *z, void *b, size_t n) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;49       while (n) {
00000a  e024              B        |L3.86|
                  |L3.12|
;;;50         size_t m;
;;;51         if (z->n == 0) {  /* no bytes in buffer? */
00000c  6820              LDR      r0,[r4,#0]
00000e  b968              CBNZ     r0,|L3.44|
;;;52           if (luaZ_fill(z) == EOZ)  /* try to read more */
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       luaZ_fill
000016  1c40              ADDS     r0,r0,#1
000018  b910              CBNZ     r0,|L3.32|
;;;53             return n;  /* no more input; return number of missing bytes */
00001a  4628              MOV      r0,r5
                  |L3.28|
;;;54           else {
;;;55             z->n++;  /* luaZ_fill consumed first byte; put it back */
;;;56             z->p--;
;;;57           }
;;;58         }
;;;59         m = (n <= z->n) ? n : z->n;  /* min. between n and z->n */
;;;60         memcpy(b, z->p, m);
;;;61         z->n -= m;
;;;62         z->p += m;
;;;63         b = (char *)b + m;
;;;64         n -= m;
;;;65       }
;;;66       return 0;
;;;67     }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L3.32|
000020  6820              LDR      r0,[r4,#0]            ;55
000022  1c40              ADDS     r0,r0,#1              ;55
000024  6020              STR      r0,[r4,#0]            ;55
000026  6860              LDR      r0,[r4,#4]            ;56
000028  1e40              SUBS     r0,r0,#1              ;56
00002a  6060              STR      r0,[r4,#4]            ;56
                  |L3.44|
00002c  6820              LDR      r0,[r4,#0]            ;59
00002e  42a8              CMP      r0,r5                 ;59
000030  d301              BCC      |L3.54|
000032  4628              MOV      r0,r5                 ;59
000034  e000              B        |L3.56|
                  |L3.54|
000036  6820              LDR      r0,[r4,#0]            ;59
                  |L3.56|
000038  4606              MOV      r6,r0                 ;59
00003a  4632              MOV      r2,r6                 ;60
00003c  4638              MOV      r0,r7                 ;60
00003e  6861              LDR      r1,[r4,#4]            ;60
000040  f7fffffe          BL       __aeabi_memcpy
000044  6820              LDR      r0,[r4,#0]            ;61
000046  1b80              SUBS     r0,r0,r6              ;61
000048  6020              STR      r0,[r4,#0]            ;61
00004a  6860              LDR      r0,[r4,#4]            ;62
00004c  4430              ADD      r0,r0,r6              ;62
00004e  6060              STR      r0,[r4,#4]            ;62
000050  4437              ADD      r7,r7,r6              ;63
000052  1bad              SUBS     r5,r5,r6              ;64
000054  bf00              NOP                            ;65
                  |L3.86|
000056  2d00              CMP      r5,#0                 ;49
000058  d1d8              BNE      |L3.12|
00005a  2000              MOVS     r0,#0                 ;66
00005c  e7de              B        |L3.28|
;;;68     
                          ENDP

