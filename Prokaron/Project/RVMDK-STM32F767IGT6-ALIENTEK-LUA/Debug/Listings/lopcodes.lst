L 1 "..\..\..\M6P1(L)_Lua\lua\lopcodes.c"
N/*
N** $Id: lopcodes.c,v 1.79 2018/02/21 15:49:32 roberto Exp roberto $
N** Opcodes for Lua virtual machine
N** See Copyright Notice in lua.h
N*/
N
N#define lopcodes_c
N#define LUA_CORE
N
N#include "lprefix.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lprefix.h" 1
N/*
N** $Id: lprefix.h,v 1.1 2014/11/03 15:12:44 roberto Exp roberto $
N** Definitions for Lua code that must come before any other header file
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lprefix_h
N#define lprefix_h
N
N
N/*
N** Allows POSIX/XSI stuff
N*/
N#if !defined(LUA_USE_C89)	/* { */
X#if !0L	 
N
N#if !defined(_XOPEN_SOURCE)
X#if !0L
N#define _XOPEN_SOURCE           600
N#elif _XOPEN_SOURCE == 0
S#undef _XOPEN_SOURCE  /* use -D_XOPEN_SOURCE=0 to undefine it */
N#endif
N
N/*
N** Allows manipulation of large files in gcc and some other compilers
N*/
N#if !defined(LUA_32BITS) && !defined(_FILE_OFFSET_BITS)
X#if !0L && !0L
N#define _LARGEFILE_SOURCE       1
N#define _FILE_OFFSET_BITS       64
N#endif
N
N#endif				/* } */
N
N
N/*
N** Windows stuff
N*/
N#if defined(_WIN32) 	/* { */
X#if 0L 	 
S
S#if !defined(_CRT_SECURE_NO_WARNINGS)
S#define _CRT_SECURE_NO_WARNINGS  /* avoid warnings about ISO C functions */
S#endif
S
N#endif			/* } */
N
N#endif
N
L 11 "..\..\..\M6P1(L)_Lua\lua\lopcodes.c" 2
N
N
N#include <stddef.h>
L 1 "D:\Program_Files_x86\Keil_v5\ARM\ARMCC\Bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060009
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS ::std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N  /* unconditional in non-strict C for consistency of debug info */
N    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X    #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #else
N      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
N  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 201112L <= 199409L) || (0L && 201103L <= __cplusplus)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
S    #ifndef __STDDEF_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::ptrdiff_t;
S      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S        using ::std::max_align_t;
S      #endif
S    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 14 "..\..\..\M6P1(L)_Lua\lua\lopcodes.c" 2
N
N#include "lopcodes.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lopcodes.h" 1
N/*
N** $Id: lopcodes.h,v 1.189 2018/02/21 15:49:32 roberto Exp roberto $
N** Opcodes for Lua virtual machine
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lopcodes_h
N#define lopcodes_h
N
N#include "llimits.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\llimits.h" 1
N/*
N** $Id: llimits.h,v 1.148 2017/12/28 11:51:00 roberto Exp roberto $
N** Limits, basic types, and some other 'installation-dependent' definitions
N** See Copyright Notice in lua.h
N*/
N
N#ifndef llimits_h
N#define llimits_h
N
N
N#include <limits.h>
L 1 "D:\Program_Files_x86\Keil_v5\ARM\ARMCC\Bin\..\include\limits.h" 1
N/* limits.h: ANSI 'C' (X3J11 Oct 88) library header, section 2.2.4.2 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991-1997 ARM Limited. All rights reserved         */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N#ifndef __limits_h
N#define __limits_h
N#define __ARMCLIB_VERSION 5060009
N
N#define CHAR_BIT 8
N    /* max number of bits for smallest object that is not a bit-field (byte) */
N#define SCHAR_MIN (-128)
N    /* mimimum value for an object of type signed char */
N#define SCHAR_MAX 127
N    /* maximum value for an object of type signed char */
N#define UCHAR_MAX 255
N    /* maximum value for an object of type unsigned char */
N#ifdef __FEATURE_SIGNED_CHAR
N  #define CHAR_MIN (-128)
N      /* minimum value for an object of type char */
N  #define CHAR_MAX 127
N      /* maximum value for an object of type char */
N#else
S  #define CHAR_MIN 0
S      /* minimum value for an object of type char */
S  #define CHAR_MAX 255
S      /* maximum value for an object of type char */
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X#if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S  #define _AEABI_PORTABLE
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
Sextern const int __aeabi_MB_LEN_MAX;
S#define MB_LEN_MAX (__aeabi_MB_LEN_MAX)
N#else
N#define MB_LEN_MAX 6
N#endif
N    /* maximum number of bytes in a multibyte character, */
N    /* for any supported locale */
N
N#define SHRT_MIN  (-0x8000)
N    /* minimum value for an object of type short int */
N#define SHRT_MAX  0x7fff
N    /* maximum value for an object of type short int */
N#define USHRT_MAX 65535
N    /* maximum value for an object of type unsigned short int */
N#define INT_MIN   (~0x7fffffff)  /* -2147483648 and 0x80000000 are unsigned */
N    /* minimum value for an object of type int */
N#define INT_MAX   0x7fffffff
N    /* maximum value for an object of type int */
N#define UINT_MAX  0xffffffffU
N    /* maximum value for an object of type unsigned int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define LONG_MIN  (~0x7fffffffffffffffL)
N#else
N  #define LONG_MIN  (~0x7fffffffL)
N#endif
N    /* minimum value for an object of type long int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define LONG_MAX  0x7fffffffffffffffL
N#else
N  #define LONG_MAX  0x7fffffffL
N#endif
N    /* maximum value for an object of type long int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define ULONG_MAX 0xffffffffffffffffUL
N#else
N  #define ULONG_MAX 0xffffffffUL
N#endif
N    /* maximum value for an object of type unsigned long int */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N  #define LLONG_MIN  (~0x7fffffffffffffffLL)
N      /* minimum value for an object of type long long int */
N  #define LLONG_MAX    0x7fffffffffffffffLL
N      /* maximum value for an object of type long long int */
N  #define ULLONG_MAX   0xffffffffffffffffULL
N      /* maximum value for an object of type unsigned long int */
N#endif
N
N#endif
N
N/* end of limits.h */
N
L 12 "..\..\..\M6P1(L)_Lua\lua\llimits.h" 2
N#include <stddef.h>
N
N
N#include "lua.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lua.h" 1
N/*
N** $Id: lua.h,v 1.343 2018/03/02 16:30:47 roberto Exp roberto $
N** Lua - A Scripting Language
N** Lua.org, PUC-Rio, Brazil (http://www.lua.org)
N** See Copyright Notice at the end of this file
N*/
N
N
N#ifndef lua_h
N#define lua_h
N
N#include <stdarg.h>
L 1 "D:\Program_Files_x86\Keil_v5\ARM\ARMCC\Bin\..\include\stdarg.h" 1
N/* stdarg.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.8 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright (C) ARM Ltd., 1991-1999. All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdarg_h
N#define __stdarg_h
N#define __ARMCLIB_VERSION 5060009
N
N  #ifndef __STDARG_DECLS
N  #define __STDARG_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N/*
N * stdarg.h declares a type and defines macros for advancing through a
N * list of arguments whose number and types are not known to the called
N * function when it is translated. A function may be called with a variable
N * number of arguments of differing types. Its parameter list contains one or
N * more parameters. The rightmost parameter plays a special role in the access
N * mechanism, and will be called parmN in this description.
N */
N
N/* N.B. <stdio.h> is required to declare vfprintf() without defining      */
N/* va_list.  Clearly the type __va_list there must keep in step.          */
N#ifdef __clang__
S  typedef __builtin_va_list va_list;
S  #define va_start(ap, param) __builtin_va_start(ap, param)
S  #define va_end(ap)          __builtin_va_end(ap)
S  #define va_arg(ap, type)    __builtin_va_arg(ap, type)
S  #if __STDC_VERSION__ >= 199900L || __cplusplus >= 201103L || !defined(__STRICT_ANSI__)
S  #define va_copy(dest, src)  __builtin_va_copy(dest, src)
S  #endif
N#else
N  #ifdef __TARGET_ARCH_AARCH64
S    typedef struct __va_list {
S      void *__stack;
S      void *__gr_top;
S      void *__vr_top;
S      int __gr_offs;
S      int __vr_offs;
S    } va_list;
N  #else
N    typedef struct __va_list { void *__ap; } va_list;
N  #endif
N   /*
N    * an array type suitable for holding information needed by the macro va_arg
N    * and the function va_end. The called function shall declare a variable
N    * (referred to as ap) having type va_list. The variable ap may be passed as
N    * an argument to another function.
N    * Note: va_list is an array type so that when an object of that type
N    * is passed as an argument it gets passed by reference.
N    */
N  #define va_start(ap, parmN) __va_start(ap, parmN)
N
N   /*
N    * The va_start macro shall be executed before any access to the unnamed
N    * arguments. The parameter ap points to an object that has type va_list.
N    * The va_start macro initialises ap for subsequent use by va_arg and
N    * va_end. The parameter parmN is the identifier of the rightmost parameter
N    * in the variable parameter list in the function definition (the one just
N    * before the '...'). If the parameter parmN is declared with the register
N    * storage class an error is given.
N    * If parmN is a narrow type (char, short, float) an error is given in
N    * strict ANSI mode, or a warning otherwise.
N    * Returns: no value.
N    */
N  #define va_arg(ap, type) __va_arg(ap, type)
N
N   /*
N    * The va_arg macro expands to an expression that has the type and value of
N    * the next argument in the call. The parameter ap shall be the same as the
N    * va_list ap initialised by va_start. Each invocation of va_arg modifies
N    * ap so that successive arguments are returned in turn. The parameter
N    * 'type' is a type name such that the type of a pointer to an object that
N    * has the specified type can be obtained simply by postfixing a * to
N    * 'type'. If type is a narrow type, an error is given in strict ANSI
N    * mode, or a warning otherwise. If the type is an array or function type,
N    * an error is given.
N    * In non-strict ANSI mode, 'type' is allowed to be any expression.
N    * Returns: The first invocation of the va_arg macro after that of the
N    *          va_start macro returns the value of the argument after that
N    *          specified by parmN. Successive invocations return the values of
N    *          the remaining arguments in succession.
N    *          The result is cast to 'type', even if 'type' is narrow.
N    */
N
N#define __va_copy(dest, src) ((void)((dest) = (src)))
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N   /* va_copy is in C99 and non-strict C90 and non-strict C++
N    * __va_copy is always present.
N    */
N  #define va_copy(dest, src) ((void)((dest) = (src)))
N
N   /* The va_copy macro makes the va_list dest be a copy of
N    * the va_list src, as if the va_start macro had been applied
N    * to it followed by the same sequence of uses of the va_arg
N    * macro as had previously been used to reach the present state
N    * of src.
N    */
N#endif
N
N#define va_end(ap) __va_end(ap)
N   /*
N    * The va_end macro facilitates a normal return from the function whose
N    * variable argument list was referenced by the expansion of va_start that
N    * initialised the va_list ap. If the va_end macro is not invoked before
N    * the return, the behaviour is undefined.
N    * Returns: no value.
N    */
N#endif /* __clang__ */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N
N    #ifdef __GNUC__
S     /* be cooperative with glibc */
S     typedef __CLIBNS va_list __gnuc_va_list;
S     #define __GNUC_VA_LIST
S     #undef __need___va_list
N    #endif
N
N  #endif /* __STDARG_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDARG_NO_EXPORTS
S      using ::std::va_list;
S    #endif
N  #endif /* __cplusplus */
N#endif
N
N/* end of stdarg.h */
N
L 13 "..\..\..\M6P1(L)_Lua\lua\lua.h" 2
N#include <stddef.h>
N
N
N#include "luaconf.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\luaconf.h" 1
N/*
N** $Id: luaconf.h,v 1.266 2018/03/02 18:31:51 roberto Exp roberto $
N** Configuration file for Lua
N** See Copyright Notice in lua.h
N*/
N
N
N#ifndef luaconf_h
N#define luaconf_h
N
N#include <limits.h>
N#include <stddef.h>
N
N
N/*
N** ===================================================================
N** Search for "@@" to find all configurable definitions.
N** ===================================================================
N*/
N
N
N/*
N** {====================================================================
N** System Configuration: macros to adapt (if needed) Lua to some
N** particular platform, for instance compiling it with 32-bit numbers or
N** restricting it to C89.
N** =====================================================================
N*/
N
N/*
N@@ LUA_32BITS enables Lua with 32-bit integers and 32-bit floats. You
N** can also define LUA_32BITS in the make file, but changing here you
N** ensure that all software connected to Lua will be compiled with the
N** same configuration.
N*/
N/* #define LUA_32BITS */
N
N
N/*
N@@ LUA_USE_C89 controls the use of non-ISO-C89 features.
N** Define it if you want Lua to avoid the use of a few C99 features
N** or Windows-specific features on Windows.
N*/
N/* #define LUA_USE_C89 */
N
N
N/*
N** By default, Lua on Windows use (some) specific Windows features
N*/
N#if !defined(LUA_USE_C89) && defined(_WIN32) && !defined(_WIN32_WCE)
X#if !0L && 0L && !0L
S#define LUA_USE_WINDOWS  /* enable goodies for regular Windows */
N#endif
N
N
N#if defined(LUA_USE_WINDOWS)
X#if 0L
S#define LUA_DL_DLL	/* enable support for DLL */
S#define LUA_USE_C89	/* broadly, Windows is C89 */
N#endif
N
N
N#if defined(LUA_USE_LINUX)
X#if 0L
S#define LUA_USE_POSIX
S#define LUA_USE_DLOPEN		/* needs an extra library: -ldl */
N#endif
N
N
N#if defined(LUA_USE_MACOSX)
X#if 0L
S#define LUA_USE_POSIX
S#define LUA_USE_DLOPEN		/* MacOS does not need -ldl */
N#endif
N
N
N/*
N@@ LUA_C89_NUMBERS ensures that Lua uses the largest types available for
N** C89 ('long' and 'double'); Windows always has '__int64', so it does
N** not need to use this case.
N*/
N#if defined(LUA_USE_C89) && !defined(LUA_USE_WINDOWS)
X#if 0L && !0L
S#define LUA_C89_NUMBERS
N#endif
N
N
N
N/*
N@@ LUAI_BITSINT defines the (minimum) number of bits in an 'int'.
N*/
N/* avoid undefined shifts */
N#if ((INT_MAX >> 15) >> 15) >= 1
X#if ((0x7fffffff >> 15) >> 15) >= 1
N#define LUAI_BITSINT	32
N#else
S/* 'int' always must have at least 16 bits */
S#define LUAI_BITSINT	16
N#endif
N
N
N/*
N@@ LUA_INT_TYPE defines the type for Lua integers.
N@@ LUA_FLOAT_TYPE defines the type for Lua floats.
N** Lua should work fine with any mix of these options (if supported
N** by your C compiler). The usual configurations are 64-bit integers
N** and 'double' (the default), 32-bit integers and 'float' (for
N** restricted platforms), and 'long'/'double' (for C compilers not
N** compliant with C99, which may not have support for 'long long').
N*/
N
N/* predefined options for LUA_INT_TYPE */
N#define LUA_INT_INT		1
N#define LUA_INT_LONG		2
N#define LUA_INT_LONGLONG	3
N
N/* predefined options for LUA_FLOAT_TYPE */
N#define LUA_FLOAT_FLOAT		1
N#define LUA_FLOAT_DOUBLE	2
N#define LUA_FLOAT_LONGDOUBLE	3
N
N#if defined(LUA_32BITS)		/* { */
X#if 0L		 
S/*
S** 32-bit integers and 'float'
S*/
S#if LUAI_BITSINT >= 32  /* use 'int' if big enough */
S#define LUA_INT_TYPE	LUA_INT_INT
S#else  /* otherwise use 'long' */
S#define LUA_INT_TYPE	LUA_INT_LONG
S#endif
S#define LUA_FLOAT_TYPE	LUA_FLOAT_FLOAT
S
S#elif defined(LUA_C89_NUMBERS)	/* }{ */
X#elif 0L	 
S/*
S** largest types available for C89 ('long' and 'double')
S*/
S#define LUA_INT_TYPE	LUA_INT_LONG
S#define LUA_FLOAT_TYPE	LUA_FLOAT_DOUBLE
S
N#endif				/* } */
N
N
N/*
N** default configuration for 64-bit Lua ('long long' and 'double')
N*/
N#if !defined(LUA_INT_TYPE)
X#if !0L
N#define LUA_INT_TYPE	LUA_INT_LONGLONG
N#endif
N
N#if !defined(LUA_FLOAT_TYPE)
X#if !0L
N#define LUA_FLOAT_TYPE	LUA_FLOAT_DOUBLE
N#endif
N
N/* }================================================================== */
N
N
N
N
N/*
N** {==================================================================
N** Configuration for Paths.
N** ===================================================================
N*/
N
N/*
N** LUA_PATH_SEP is the character that separates templates in a path.
N** LUA_PATH_MARK is the string that marks the substitution points in a
N** template.
N** LUA_EXEC_DIR in a Windows path is replaced by the executable's
N** directory.
N*/
N#define LUA_PATH_SEP            ";"
N#define LUA_PATH_MARK           "?"
N#define LUA_EXEC_DIR            "!"
N
N
N/*
N@@ LUA_PATH_DEFAULT is the default path that Lua uses to look for
N** Lua libraries.
N@@ LUA_CPATH_DEFAULT is the default path that Lua uses to look for
N** C libraries.
N** CHANGE them if your machine has a non-conventional directory
N** hierarchy or if you want to install your libraries in
N** non-conventional directories.
N*/
N#define LUA_VDIR	LUA_VERSION_MAJOR "." LUA_VERSION_MINOR
N#if defined(_WIN32)	/* { */
X#if 0L	 
S/*
S** In Windows, any exclamation mark ('!') in the path is replaced by the
S** path of the directory of the executable file of the current process.
S*/
S#define LUA_LDIR	"!\\lua\\"
S#define LUA_CDIR	"!\\"
S#define LUA_SHRDIR	"!\\..\\share\\lua\\" LUA_VDIR "\\"
S#define LUA_PATH_DEFAULT  \
S		LUA_LDIR"?.lua;"  LUA_LDIR"?\\init.lua;" \
S		LUA_CDIR"?.lua;"  LUA_CDIR"?\\init.lua;" \
S		LUA_SHRDIR"?.lua;" LUA_SHRDIR"?\\init.lua;" \
S		".\\?.lua;" ".\\?\\init.lua"
X#define LUA_PATH_DEFAULT  		LUA_LDIR"?.lua;"  LUA_LDIR"?\\init.lua;" 		LUA_CDIR"?.lua;"  LUA_CDIR"?\\init.lua;" 		LUA_SHRDIR"?.lua;" LUA_SHRDIR"?\\init.lua;" 		".\\?.lua;" ".\\?\\init.lua"
S#define LUA_CPATH_DEFAULT \
S		LUA_CDIR"?.dll;" \
S		LUA_CDIR"..\\lib\\lua\\" LUA_VDIR "\\?.dll;" \
S		LUA_CDIR"loadall.dll;" ".\\?.dll"
X#define LUA_CPATH_DEFAULT 		LUA_CDIR"?.dll;" 		LUA_CDIR"..\\lib\\lua\\" LUA_VDIR "\\?.dll;" 		LUA_CDIR"loadall.dll;" ".\\?.dll"
S
N#else			/* }{ */
N
N#define LUA_ROOT	"/usr/local/"
N#define LUA_LDIR	LUA_ROOT "share/lua/" LUA_VDIR "/"
N#define LUA_CDIR	LUA_ROOT "lib/lua/" LUA_VDIR "/"
N#define LUA_PATH_DEFAULT  \
N		LUA_LDIR"?.lua;"  LUA_LDIR"?/init.lua;" \
N		LUA_CDIR"?.lua;"  LUA_CDIR"?/init.lua;" \
N		"./?.lua;" "./?/init.lua"
X#define LUA_PATH_DEFAULT  		LUA_LDIR"?.lua;"  LUA_LDIR"?/init.lua;" 		LUA_CDIR"?.lua;"  LUA_CDIR"?/init.lua;" 		"./?.lua;" "./?/init.lua"
N#define LUA_CPATH_DEFAULT \
N		LUA_CDIR"?.so;" LUA_CDIR"loadall.so;" "./?.so"
X#define LUA_CPATH_DEFAULT 		LUA_CDIR"?.so;" LUA_CDIR"loadall.so;" "./?.so"
N#endif			/* } */
N
N
N/*
N@@ LUA_DIRSEP is the directory separator (for submodules).
N** CHANGE it if your machine does not use "/" as the directory separator
N** and is not Windows. (On Windows Lua automatically uses "\".)
N*/
N#if defined(_WIN32)
X#if 0L
S#define LUA_DIRSEP	"\\"
N#else
N#define LUA_DIRSEP	"/"
N#endif
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Marks for exported symbols in the C code
N** ===================================================================
N*/
N
N/*
N@@ LUA_API is a mark for all core API functions.
N@@ LUALIB_API is a mark for all auxiliary library functions.
N@@ LUAMOD_API is a mark for all standard library opening functions.
N** CHANGE them if you need to define those functions in some special way.
N** For instance, if you want to create one Windows DLL with the core and
N** the libraries, you may want to use the following definition (define
N** LUA_BUILD_AS_DLL to get it).
N*/
N#if defined(LUA_BUILD_AS_DLL)	/* { */
X#if 0L	 
S
S#if defined(LUA_CORE) || defined(LUA_LIB)	/* { */
S#define LUA_API __declspec(dllexport)
S#else						/* }{ */
S#define LUA_API __declspec(dllimport)
S#endif						/* } */
S
N#else				/* }{ */
N
N#define LUA_API		extern
N
N#endif				/* } */
N
N
N/* more often than not the libs go together with the core */
N#define LUALIB_API	LUA_API
N#define LUAMOD_API	LUALIB_API
N
N
N/*
N@@ LUAI_FUNC is a mark for all extern functions that are not to be
N** exported to outside modules.
N@@ LUAI_DDEF and LUAI_DDEC are marks for all extern (const) variables
N** that are not to be exported to outside modules (LUAI_DDEF for
N** definitions and LUAI_DDEC for declarations).
N** CHANGE them if you need to mark them in some special way. Elf/gcc
N** (versions 3.2 and later) mark them as "hidden" to optimize access
N** when Lua is compiled as a shared library. Not all elf targets support
N** this attribute. Unfortunately, gcc does not offer a way to check
N** whether the target offers that support, and those without support
N** give a warning about it. To avoid these warnings, change to the
N** default definition.
N*/
N#if defined(__GNUC__) && ((__GNUC__*100 + __GNUC_MINOR__) >= 302) && \
N    defined(__ELF__)		/* { */
X#if 0L && ((__GNUC__*100 + __GNUC_MINOR__) >= 302) &&     0L		 
S#define LUAI_FUNC	__attribute__((visibility("hidden"))) extern
N#else				/* }{ */
N#define LUAI_FUNC	extern
N#endif				/* } */
N
N#define LUAI_DDEC	LUAI_FUNC
N#define LUAI_DDEF	/* empty */
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Compatibility with previous versions
N** ===================================================================
N*/
N
N/*
N@@ LUA_COMPAT_5_3 controls other macros for compatibility with Lua 5.2.
N** You can define it to get all options, or change specific options
N** to fit your specific needs.
N*/
N#if defined(LUA_COMPAT_5_3)	/* { */
X#if 0L	 
S
S/*
S@@ LUA_COMPAT_MATHLIB controls the presence of several deprecated
S** functions in the mathematical library.
S** (These functions were already officially removed in 5.3, but
S** nevertheless they are available by default there.)
S*/
S#define LUA_COMPAT_MATHLIB
S
S/*
S@@ LUA_COMPAT_APIINTCASTS controls the presence of macros for
S** manipulating other integer types (lua_pushunsigned, lua_tounsigned,
S** luaL_checkint, luaL_checklong, etc.)
S*/
S#define LUA_COMPAT_APIINTCASTS
S
N#endif				/* } */
N
N
N
N/*
N@@ The following macros supply trivial compatibility for some
N** changes in the API. The macros themselves document how to
N** change your code to avoid using them.
N*/
N#define lua_strlen(L,i)		lua_rawlen(L, (i))
N
N#define lua_objlen(L,i)		lua_rawlen(L, (i))
N
N#define lua_equal(L,idx1,idx2)		lua_compare(L,(idx1),(idx2),LUA_OPEQ)
N#define lua_lessthan(L,idx1,idx2)	lua_compare(L,(idx1),(idx2),LUA_OPLT)
N
N/* }================================================================== */
N
N
N
N/*
N** {==================================================================
N** Configuration for Numbers.
N** Change these definitions if no predefined LUA_FLOAT_* / LUA_INT_*
N** satisfy your needs.
N** ===================================================================
N*/
N
N/*
N@@ LUA_NUMBER is the floating-point type used by Lua.
N@@ LUAI_UACNUMBER is the result of a 'default argument promotion'
N@@ over a floating number.
N@@ l_mathlim(x) corrects limit name 'x' to the proper float type
N** by prefixing it with one of FLT/DBL/LDBL.
N@@ LUA_NUMBER_FRMLEN is the length modifier for writing floats.
N@@ LUA_NUMBER_FMT is the format for writing floats.
N@@ lua_number2str converts a float to a string.
N@@ l_mathop allows the addition of an 'l' or 'f' to all math operations.
N@@ l_floor takes the floor of a float.
N@@ lua_str2number converts a decimal numeric string to a number.
N*/
N
N
N/* The following definitions are good for most cases here */
N
N#define l_floor(x)		(l_mathop(floor)(x))
N
N#define lua_number2str(s,sz,n)  \
N	l_sprintf((s), sz, LUA_NUMBER_FMT, (LUAI_UACNUMBER)(n))
X#define lua_number2str(s,sz,n)  	l_sprintf((s), sz, LUA_NUMBER_FMT, (LUAI_UACNUMBER)(n))
N
N/*
N@@ lua_numbertointeger converts a float number with an integral value
N** to an integer, or returns 0 if float is not within the range of
N** a lua_Integer.  (The range comparisons are tricky because of
N** rounding. The tests here assume a two-complement representation,
N** where MININTEGER always has an exact representation as a float;
N** MAXINTEGER may not have one, and therefore its conversion to float
N** may have an ill-defined value.)
N*/
N#define lua_numbertointeger(n,p) \
N  ((n) >= (LUA_NUMBER)(LUA_MININTEGER) && \
N   (n) < -(LUA_NUMBER)(LUA_MININTEGER) && \
N      (*(p) = (LUA_INTEGER)(n), 1))
X#define lua_numbertointeger(n,p)   ((n) >= (LUA_NUMBER)(LUA_MININTEGER) &&    (n) < -(LUA_NUMBER)(LUA_MININTEGER) &&       (*(p) = (LUA_INTEGER)(n), 1))
N
N
N/* now the variable definitions */
N
N#if LUA_FLOAT_TYPE == LUA_FLOAT_FLOAT		/* { single float */
X#if 2 == 1		 
S
S#define LUA_NUMBER	float
S
S#define l_mathlim(n)		(FLT_##n)
S
S#define LUAI_UACNUMBER	double
S
S#define LUA_NUMBER_FRMLEN	""
S#define LUA_NUMBER_FMT		"%.7g"
S
S#define l_mathop(op)		op##f
S
S#define lua_str2number(s,p)	strtof((s), (p))
S
S
S#elif LUA_FLOAT_TYPE == LUA_FLOAT_LONGDOUBLE	/* }{ long double */
X#elif 2 == 3	 
S
S#define LUA_NUMBER	long double
S
S#define l_mathlim(n)		(LDBL_##n)
S
S#define LUAI_UACNUMBER	long double
S
S#define LUA_NUMBER_FRMLEN	"L"
S#define LUA_NUMBER_FMT		"%.19Lg"
S
S#define l_mathop(op)		op##l
S
S#define lua_str2number(s,p)	strtold((s), (p))
S
N#elif LUA_FLOAT_TYPE == LUA_FLOAT_DOUBLE	/* }{ double */
X#elif 2 == 2	 
N
N#define LUA_NUMBER	double
N
N#define l_mathlim(n)		(DBL_##n)
N
N#define LUAI_UACNUMBER	double
N
N#define LUA_NUMBER_FRMLEN	""
N#define LUA_NUMBER_FMT		"%.14g"
N
N#define l_mathop(op)		op
N
N#define lua_str2number(s,p)	strtod((s), (p))
N
N#else						/* }{ */
S
S#error "numeric float type not defined"
S
N#endif					/* } */
N
N
N
N/*
N@@ LUA_INTEGER is the integer type used by Lua.
N**
N@@ LUA_UNSIGNED is the unsigned version of LUA_INTEGER.
N**
N@@ LUAI_UACINT is the result of a 'default argument promotion'
N@@ over a lUA_INTEGER.
N@@ LUA_INTEGER_FRMLEN is the length modifier for reading/writing integers.
N@@ LUA_INTEGER_FMT is the format for writing integers.
N@@ LUA_MAXINTEGER is the maximum value for a LUA_INTEGER.
N@@ LUA_MININTEGER is the minimum value for a LUA_INTEGER.
N@@ LUA_MAXUNSIGNED is the maximum value for a LUA_UNSIGNED.
N@@ lua_integer2str converts an integer to a string.
N*/
N
N
N/* The following definitions are good for most cases here */
N
N#define LUA_INTEGER_FMT		"%" LUA_INTEGER_FRMLEN "d"
N
N#define LUAI_UACINT		LUA_INTEGER
N
N#define lua_integer2str(s,sz,n)  \
N	l_sprintf((s), sz, LUA_INTEGER_FMT, (LUAI_UACINT)(n))
X#define lua_integer2str(s,sz,n)  	l_sprintf((s), sz, LUA_INTEGER_FMT, (LUAI_UACINT)(n))
N
N/*
N** use LUAI_UACINT here to avoid problems with promotions (which
N** can turn a comparison between unsigneds into a signed comparison)
N*/
N#define LUA_UNSIGNED		unsigned LUAI_UACINT
N
N#define LUA_MAXUNSIGNED		(~(lua_Unsigned)0)
N
N
N/* now the variable definitions */
N
N#if LUA_INT_TYPE == LUA_INT_INT		/* { int */
X#if 3 == 1		 
S
S#define LUA_INTEGER		int
S#define LUA_INTEGER_FRMLEN	""
S
S#define LUA_MAXINTEGER		INT_MAX
S#define LUA_MININTEGER		INT_MIN
S
S#elif LUA_INT_TYPE == LUA_INT_LONG	/* }{ long */
X#elif 3 == 2	 
S
S#define LUA_INTEGER		long
S#define LUA_INTEGER_FRMLEN	"l"
S
S#define LUA_MAXINTEGER		LONG_MAX
S#define LUA_MININTEGER		LONG_MIN
S
N#elif LUA_INT_TYPE == LUA_INT_LONGLONG	/* }{ long long */
X#elif 3 == 3	 
N
N/* use presence of macro LLONG_MAX as proxy for C99 compliance */
N#if defined(LLONG_MAX)		/* { */
X#if 1L		 
N/* use ISO C99 stuff */
N
N#define LUA_INTEGER		long long
N#define LUA_INTEGER_FRMLEN	"ll"
N
N#define LUA_MAXINTEGER		LLONG_MAX
N#define LUA_MININTEGER		LLONG_MIN
N
N#elif defined(LUA_USE_WINDOWS) /* }{ */
S/* in Windows, can use specific Windows types */
S
S#define LUA_INTEGER		__int64
S#define LUA_INTEGER_FRMLEN	"I64"
S
S#define LUA_MAXINTEGER		_I64_MAX
S#define LUA_MININTEGER		_I64_MIN
S
S#else				/* }{ */
S
S#error "Compiler does not support 'long long'. Use option '-DLUA_32BITS' \
S  or '-DLUA_C89_NUMBERS' (see file 'luaconf.h' for details)"
X#error "Compiler does not support 'long long'. Use option '-DLUA_32BITS'   or '-DLUA_C89_NUMBERS' (see file 'luaconf.h' for details)"
S
N#endif				/* } */
N
N#else				/* }{ */
S
S#error "numeric integer type not defined"
S
N#endif				/* } */
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Dependencies with C99 and other C details
N** ===================================================================
N*/
N
N/*
N@@ l_sprintf is equivalent to 'snprintf' or 'sprintf' in C89.
N** (All uses in Lua have only one format item.)
N*/
N#if !defined(LUA_USE_C89)
X#if !0L
N#define l_sprintf(s,sz,f,i)	snprintf(s,sz,f,i)
N#else
S#define l_sprintf(s,sz,f,i)	((void)(sz), sprintf(s,f,i))
N#endif
N
N
N/*
N@@ lua_strx2number converts a hexadecimal numeric string to a number.
N** In C99, 'strtod' does that conversion. Otherwise, you can
N** leave 'lua_strx2number' undefined and Lua will provide its own
N** implementation.
N*/
N#if !defined(LUA_USE_C89)
X#if !0L
N#define lua_strx2number(s,p)		lua_str2number(s,p)
N#endif
N
N
N/*
N@@ lua_pointer2str converts a pointer to a readable string in a
N** non-specified way.
N*/
N#define lua_pointer2str(buff,sz,p)	l_sprintf(buff,sz,"%p",p)
N
N
N/*
N@@ lua_number2strx converts a float to a hexadecimal numeric string.
N** In C99, 'sprintf' (with format specifiers '%a'/'%A') does that.
N** Otherwise, you can leave 'lua_number2strx' undefined and Lua will
N** provide its own implementation.
N*/
N#if !defined(LUA_USE_C89)
X#if !0L
N#define lua_number2strx(L,b,sz,f,n)  \
N	((void)L, l_sprintf(b,sz,f,(LUAI_UACNUMBER)(n)))
X#define lua_number2strx(L,b,sz,f,n)  	((void)L, l_sprintf(b,sz,f,(LUAI_UACNUMBER)(n)))
N#endif
N
N
N/*
N** 'strtof' and 'opf' variants for math functions are not valid in
N** C89. Otherwise, the macro 'HUGE_VALF' is a good proxy for testing the
N** availability of these variants. ('math.h' is already included in
N** all files that use these macros.)
N*/
N#if defined(LUA_USE_C89) || (defined(HUGE_VAL) && !defined(HUGE_VALF))
X#if 0L || (0L && !0L)
S#undef l_mathop  /* variants not available */
S#undef lua_str2number
S#define l_mathop(op)		(lua_Number)op  /* no variant */
S#define lua_str2number(s,p)	((lua_Number)strtod((s), (p)))
N#endif
N
N
N/*
N@@ LUA_KCONTEXT is the type of the context ('ctx') for continuation
N** functions.  It must be a numerical type; Lua will use 'intptr_t' if
N** available, otherwise it will use 'ptrdiff_t' (the nearest thing to
N** 'intptr_t' in C89)
N*/
N#define LUA_KCONTEXT	ptrdiff_t
N
N#if !defined(LUA_USE_C89) && defined(__STDC_VERSION__) && \
N    __STDC_VERSION__ >= 199901L
X#if !0L && 1L &&     199409L >= 199901L
S#include <stdint.h>
S#if defined(INTPTR_MAX)  /* even in C99 this type is optional */
S#undef LUA_KCONTEXT
S#define LUA_KCONTEXT	intptr_t
S#endif
N#endif
N
N
N/*
N@@ lua_getlocaledecpoint gets the locale "radix character" (decimal point).
N** Change that if you do not want to use C locales. (Code using this
N** macro must include header 'locale.h'.)
N*/
N#if !defined(lua_getlocaledecpoint)
X#if !0L
N#define lua_getlocaledecpoint()		(localeconv()->decimal_point[0])
N#endif
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Language Variations
N** =====================================================================
N*/
N
N/*
N@@ LUA_NOCVTN2S/LUA_NOCVTS2N control how Lua performs some
N** coercions. Define LUA_NOCVTN2S to turn off automatic coercion from
N** numbers to strings. Define LUA_NOCVTS2N to turn off automatic
N** coercion from strings to numbers.
N*/
N/* #define LUA_NOCVTN2S */
N/* #define LUA_NOCVTS2N */
N
N
N/*
N@@ LUA_USE_APICHECK turns on several consistency checks on the C API.
N** Define it as a help when debugging C code.
N*/
N#if defined(LUA_USE_APICHECK)
X#if 0L
S#include <assert.h>
S#define luai_apicheck(l,e)	assert(e)
N#endif
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Macros that affect the API and must be stable (that is, must be the
N** same when you compile Lua and when you compile code that links to
N** Lua). You probably do not want/need to change them.
N** =====================================================================
N*/
N
N/*
N@@ LUAI_MAXSTACK limits the size of the Lua stack.
N** CHANGE it if you need a different limit. This limit is arbitrary;
N** its only purpose is to stop Lua from consuming unlimited stack
N** space (and to reserve some numbers for pseudo-indices).
N** (It must fit into max(size_t)/32.)
N*/
N#if LUAI_BITSINT >= 32
X#if 32 >= 32
N#define LUAI_MAXSTACK		1000000
N#else
S#define LUAI_MAXSTACK		15000
N#endif
N
N
N/*
N@@ LUA_EXTRASPACE defines the size of a raw memory area associated with
N** a Lua state with very fast access.
N** CHANGE it if you need a different size.
N*/
N#define LUA_EXTRASPACE		(sizeof(void *))
N
N
N/*
N@@ LUA_IDSIZE gives the maximum size for the description of the source
N@@ of a function in debug information.
N** CHANGE it if you want a different size.
N*/
N#define LUA_IDSIZE	60
N
N
N/*
N@@ LUAL_BUFFERSIZE is the buffer size used by the lauxlib buffer system.
N** CHANGE it if it uses too much C-stack space. (For long double,
N** 'string.format("%.99f", -1e4932)' needs 5034 bytes, so a
N** smaller buffer would force a memory allocation for each call to
N** 'string.format'.)
N*/
N#if LUA_FLOAT_TYPE == LUA_FLOAT_LONGDOUBLE
X#if 2 == 3
S#define LUAL_BUFFERSIZE		8192
N#else
N#define LUAL_BUFFERSIZE   ((int)(0x80 * sizeof(void*) * sizeof(lua_Integer)))
N#endif
N
N/*
N@@ LUAI_MAXALIGN defines fields that, when used in a union, ensure
N** "maximum" alignment for the other items in that union.
N*/
N#define LUAI_MAXALIGN  lua_Number n; double u; void *s; lua_Integer i; long l
N
N/* }================================================================== */
N
N
N/*
N@@ LUA_QL describes how error messages quote program elements.
N** Lua does not use these macros anymore; they are here for
N** compatibility only.
N*/
N#define LUA_QL(x)	"'" x "'"
N#define LUA_QS		LUA_QL("%s")
N
N
N
N
N/* =================================================================== */
N
N/*
N** Local configuration. You can use this space to add your redefinitions
N** without modifying the main part of the file.
N*/
N
N
N
N
N
N#endif
N
L 17 "..\..\..\M6P1(L)_Lua\lua\lua.h" 2
N
N
N#define LUA_VERSION_MAJOR	"5"
N#define LUA_VERSION_MINOR	"4"
N#define LUA_VERSION_NUM		504
N#define LUA_VERSION_RELEASE	"0"
N
N#define LUA_VERSION	"Lua " LUA_VERSION_MAJOR "." LUA_VERSION_MINOR
N#define LUA_RELEASE	LUA_VERSION "." LUA_VERSION_RELEASE
N#define LUA_COPYRIGHT	LUA_RELEASE "  Copyright (C) 1994-2018 Lua.org, PUC-Rio"
N#define LUA_AUTHORS	"R. Ierusalimschy, L. H. de Figueiredo, W. Celes"
N
N
N/* mark for precompiled code ('<esc>Lua') */
N#define LUA_SIGNATURE	"\x1bLua"
N
N/* option for multiple returns in 'lua_pcall' and 'lua_call' */
N#define LUA_MULTRET	(-1)
N
N
N/*
N** Pseudo-indices
N** (-LUAI_MAXSTACK is the minimum valid index; we keep some free empty
N** space after that to help overflow detection)
N*/
N#define LUA_REGISTRYINDEX	(-LUAI_MAXSTACK - 1000)
N#define lua_upvalueindex(i)	(LUA_REGISTRYINDEX - (i))
N
N
N/* thread status */
N#define LUA_OK		0
N#define LUA_YIELD	1
N#define LUA_ERRRUN	2
N#define LUA_ERRSYNTAX	3
N#define LUA_ERRMEM	4
N#define LUA_ERRGCMM	5
N#define LUA_ERRERR	6
N
N
Ntypedef struct lua_State lua_State;
N
N
N/*
N** basic types
N*/
N#define LUA_TNONE		(-1)
N
N#define LUA_TNIL		0
N#define LUA_TBOOLEAN		1
N#define LUA_TLIGHTUSERDATA	2
N#define LUA_TNUMBER		3
N#define LUA_TSTRING		4
N#define LUA_TTABLE		5
N#define LUA_TFUNCTION		6
N#define LUA_TUSERDATA		7
N#define LUA_TTHREAD		8
N
N#define LUA_NUMTAGS		9
N
N
N
N/* minimum Lua stack available to a C function */
N#define LUA_MINSTACK	20
N
N
N/* predefined values in the registry */
N#define LUA_RIDX_MAINTHREAD	1
N#define LUA_RIDX_GLOBALS	2
N#define LUA_RIDX_LAST		LUA_RIDX_GLOBALS
N
N
N/* type of numbers in Lua */
Ntypedef LUA_NUMBER lua_Number;
Xtypedef double lua_Number;
N
N
N/* type for integer functions */
Ntypedef LUA_INTEGER lua_Integer;
Xtypedef long long lua_Integer;
N
N/* unsigned integer type */
Ntypedef LUA_UNSIGNED lua_Unsigned;
Xtypedef unsigned long long lua_Unsigned;
N
N/* type for continuation-function contexts */
Ntypedef LUA_KCONTEXT lua_KContext;
Xtypedef ptrdiff_t lua_KContext;
N
N
N/*
N** Type for C functions registered with Lua
N*/
Ntypedef int (*lua_CFunction) (lua_State *L);
N
N/*
N** Type for continuation functions
N*/
Ntypedef int (*lua_KFunction) (lua_State *L, int status, lua_KContext ctx);
N
N
N/*
N** Type for functions that read/write blocks when loading/dumping Lua chunks
N*/
Ntypedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);
N
Ntypedef int (*lua_Writer) (lua_State *L, const void *p, size_t sz, void *ud);
N
N
N/*
N** Type for memory-allocation functions
N*/
Ntypedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);
N
N
N
N/*
N** generic extra include file
N*/
N#if defined(LUA_USER_H)
X#if 0L
S#include LUA_USER_H
N#endif
N
N
N/*
N** RCS ident string
N*/
Nextern const char lua_ident[];
N
N
N/*
N** state manipulation
N*/
NLUA_API lua_State *(lua_newstate) (lua_Alloc f, void *ud);
Xextern lua_State *(lua_newstate) (lua_Alloc f, void *ud);
NLUA_API void       (lua_close) (lua_State *L);
Xextern void       (lua_close) (lua_State *L);
NLUA_API lua_State *(lua_newthread) (lua_State *L);
Xextern lua_State *(lua_newthread) (lua_State *L);
N
NLUA_API lua_CFunction (lua_atpanic) (lua_State *L, lua_CFunction panicf);
Xextern lua_CFunction (lua_atpanic) (lua_State *L, lua_CFunction panicf);
N
N
NLUA_API const lua_Number *(lua_version) (lua_State *L);
Xextern const lua_Number *(lua_version) (lua_State *L);
N
N
N/*
N** basic stack manipulation
N*/
NLUA_API int   (lua_absindex) (lua_State *L, int idx);
Xextern int   (lua_absindex) (lua_State *L, int idx);
NLUA_API int   (lua_gettop) (lua_State *L);
Xextern int   (lua_gettop) (lua_State *L);
NLUA_API void  (lua_settop) (lua_State *L, int idx);
Xextern void  (lua_settop) (lua_State *L, int idx);
NLUA_API void  (lua_pushvalue) (lua_State *L, int idx);
Xextern void  (lua_pushvalue) (lua_State *L, int idx);
NLUA_API void  (lua_rotate) (lua_State *L, int idx, int n);
Xextern void  (lua_rotate) (lua_State *L, int idx, int n);
NLUA_API void  (lua_copy) (lua_State *L, int fromidx, int toidx);
Xextern void  (lua_copy) (lua_State *L, int fromidx, int toidx);
NLUA_API int   (lua_checkstack) (lua_State *L, int n);
Xextern int   (lua_checkstack) (lua_State *L, int n);
N
NLUA_API void  (lua_xmove) (lua_State *from, lua_State *to, int n);
Xextern void  (lua_xmove) (lua_State *from, lua_State *to, int n);
N
N
N/*
N** access functions (stack -> C)
N*/
N
NLUA_API int             (lua_isnumber) (lua_State *L, int idx);
Xextern int             (lua_isnumber) (lua_State *L, int idx);
NLUA_API int             (lua_isstring) (lua_State *L, int idx);
Xextern int             (lua_isstring) (lua_State *L, int idx);
NLUA_API int             (lua_iscfunction) (lua_State *L, int idx);
Xextern int             (lua_iscfunction) (lua_State *L, int idx);
NLUA_API int             (lua_isinteger) (lua_State *L, int idx);
Xextern int             (lua_isinteger) (lua_State *L, int idx);
NLUA_API int             (lua_isuserdata) (lua_State *L, int idx);
Xextern int             (lua_isuserdata) (lua_State *L, int idx);
NLUA_API int             (lua_type) (lua_State *L, int idx);
Xextern int             (lua_type) (lua_State *L, int idx);
NLUA_API const char     *(lua_typename) (lua_State *L, int tp);
Xextern const char     *(lua_typename) (lua_State *L, int tp);
N
NLUA_API lua_Number      (lua_tonumberx) (lua_State *L, int idx, int *isnum);
Xextern lua_Number      (lua_tonumberx) (lua_State *L, int idx, int *isnum);
NLUA_API lua_Integer     (lua_tointegerx) (lua_State *L, int idx, int *isnum);
Xextern lua_Integer     (lua_tointegerx) (lua_State *L, int idx, int *isnum);
NLUA_API int             (lua_toboolean) (lua_State *L, int idx);
Xextern int             (lua_toboolean) (lua_State *L, int idx);
NLUA_API const char     *(lua_tolstring) (lua_State *L, int idx, size_t *len);
Xextern const char     *(lua_tolstring) (lua_State *L, int idx, size_t *len);
NLUA_API lua_Unsigned    (lua_rawlen) (lua_State *L, int idx);
Xextern lua_Unsigned    (lua_rawlen) (lua_State *L, int idx);
NLUA_API lua_CFunction   (lua_tocfunction) (lua_State *L, int idx);
Xextern lua_CFunction   (lua_tocfunction) (lua_State *L, int idx);
NLUA_API void	       *(lua_touserdata) (lua_State *L, int idx);
Xextern void	       *(lua_touserdata) (lua_State *L, int idx);
NLUA_API lua_State      *(lua_tothread) (lua_State *L, int idx);
Xextern lua_State      *(lua_tothread) (lua_State *L, int idx);
NLUA_API const void     *(lua_topointer) (lua_State *L, int idx);
Xextern const void     *(lua_topointer) (lua_State *L, int idx);
N
N
N/*
N** Comparison and arithmetic functions
N*/
N
N#define LUA_OPADD	0	/* ORDER TM, ORDER OP */
N#define LUA_OPSUB	1
N#define LUA_OPMUL	2
N#define LUA_OPMOD	3
N#define LUA_OPPOW	4
N#define LUA_OPDIV	5
N#define LUA_OPIDIV	6
N#define LUA_OPBAND	7
N#define LUA_OPBOR	8
N#define LUA_OPBXOR	9
N#define LUA_OPSHL	10
N#define LUA_OPSHR	11
N#define LUA_OPUNM	12
N#define LUA_OPBNOT	13
N
NLUA_API void  (lua_arith) (lua_State *L, int op);
Xextern void  (lua_arith) (lua_State *L, int op);
N
N#define LUA_OPEQ	0
N#define LUA_OPLT	1
N#define LUA_OPLE	2
N
NLUA_API int   (lua_rawequal) (lua_State *L, int idx1, int idx2);
Xextern int   (lua_rawequal) (lua_State *L, int idx1, int idx2);
NLUA_API int   (lua_compare) (lua_State *L, int idx1, int idx2, int op);
Xextern int   (lua_compare) (lua_State *L, int idx1, int idx2, int op);
N
N
N/*
N** push functions (C -> stack)
N*/
NLUA_API void        (lua_pushnil) (lua_State *L);
Xextern void        (lua_pushnil) (lua_State *L);
NLUA_API void        (lua_pushnumber) (lua_State *L, lua_Number n);
Xextern void        (lua_pushnumber) (lua_State *L, lua_Number n);
NLUA_API void        (lua_pushinteger) (lua_State *L, lua_Integer n);
Xextern void        (lua_pushinteger) (lua_State *L, lua_Integer n);
NLUA_API const char *(lua_pushlstring) (lua_State *L, const char *s, size_t len);
Xextern const char *(lua_pushlstring) (lua_State *L, const char *s, size_t len);
NLUA_API const char *(lua_pushstring) (lua_State *L, const char *s);
Xextern const char *(lua_pushstring) (lua_State *L, const char *s);
NLUA_API const char *(lua_pushvfstring) (lua_State *L, const char *fmt,
Xextern const char *(lua_pushvfstring) (lua_State *L, const char *fmt,
N                                                      va_list argp);
NLUA_API const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);
Xextern const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);
NLUA_API void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);
Xextern void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);
NLUA_API void  (lua_pushboolean) (lua_State *L, int b);
Xextern void  (lua_pushboolean) (lua_State *L, int b);
NLUA_API void  (lua_pushlightuserdata) (lua_State *L, void *p);
Xextern void  (lua_pushlightuserdata) (lua_State *L, void *p);
NLUA_API int   (lua_pushthread) (lua_State *L);
Xextern int   (lua_pushthread) (lua_State *L);
N
N
N/*
N** get functions (Lua -> stack)
N*/
NLUA_API int (lua_getglobal) (lua_State *L, const char *name);
Xextern int (lua_getglobal) (lua_State *L, const char *name);
NLUA_API int (lua_gettable) (lua_State *L, int idx);
Xextern int (lua_gettable) (lua_State *L, int idx);
NLUA_API int (lua_getfield) (lua_State *L, int idx, const char *k);
Xextern int (lua_getfield) (lua_State *L, int idx, const char *k);
NLUA_API int (lua_geti) (lua_State *L, int idx, lua_Integer n);
Xextern int (lua_geti) (lua_State *L, int idx, lua_Integer n);
NLUA_API int (lua_rawget) (lua_State *L, int idx);
Xextern int (lua_rawget) (lua_State *L, int idx);
NLUA_API int (lua_rawgeti) (lua_State *L, int idx, lua_Integer n);
Xextern int (lua_rawgeti) (lua_State *L, int idx, lua_Integer n);
NLUA_API int (lua_rawgetp) (lua_State *L, int idx, const void *p);
Xextern int (lua_rawgetp) (lua_State *L, int idx, const void *p);
N
NLUA_API void  (lua_createtable) (lua_State *L, int narr, int nrec);
Xextern void  (lua_createtable) (lua_State *L, int narr, int nrec);
NLUA_API void *(lua_newuserdatauv) (lua_State *L, size_t sz, int nuvalue);
Xextern void *(lua_newuserdatauv) (lua_State *L, size_t sz, int nuvalue);
NLUA_API int   (lua_getmetatable) (lua_State *L, int objindex);
Xextern int   (lua_getmetatable) (lua_State *L, int objindex);
NLUA_API int  (lua_getiuservalue) (lua_State *L, int idx, int n);
Xextern int  (lua_getiuservalue) (lua_State *L, int idx, int n);
N
N
N/*
N** set functions (stack -> Lua)
N*/
NLUA_API void  (lua_setglobal) (lua_State *L, const char *name);
Xextern void  (lua_setglobal) (lua_State *L, const char *name);
NLUA_API void  (lua_settable) (lua_State *L, int idx);
Xextern void  (lua_settable) (lua_State *L, int idx);
NLUA_API void  (lua_setfield) (lua_State *L, int idx, const char *k);
Xextern void  (lua_setfield) (lua_State *L, int idx, const char *k);
NLUA_API void  (lua_seti) (lua_State *L, int idx, lua_Integer n);
Xextern void  (lua_seti) (lua_State *L, int idx, lua_Integer n);
NLUA_API void  (lua_rawset) (lua_State *L, int idx);
Xextern void  (lua_rawset) (lua_State *L, int idx);
NLUA_API void  (lua_rawseti) (lua_State *L, int idx, lua_Integer n);
Xextern void  (lua_rawseti) (lua_State *L, int idx, lua_Integer n);
NLUA_API void  (lua_rawsetp) (lua_State *L, int idx, const void *p);
Xextern void  (lua_rawsetp) (lua_State *L, int idx, const void *p);
NLUA_API int   (lua_setmetatable) (lua_State *L, int objindex);
Xextern int   (lua_setmetatable) (lua_State *L, int objindex);
NLUA_API int   (lua_setiuservalue) (lua_State *L, int idx, int n);
Xextern int   (lua_setiuservalue) (lua_State *L, int idx, int n);
N
N
N/*
N** 'load' and 'call' functions (load and run Lua code)
N*/
NLUA_API void  (lua_callk) (lua_State *L, int nargs, int nresults,
Xextern void  (lua_callk) (lua_State *L, int nargs, int nresults,
N                           lua_KContext ctx, lua_KFunction k);
N#define lua_call(L,n,r)		lua_callk(L, (n), (r), 0, NULL)
N
NLUA_API int   (lua_pcallk) (lua_State *L, int nargs, int nresults, int errfunc,
Xextern int   (lua_pcallk) (lua_State *L, int nargs, int nresults, int errfunc,
N                            lua_KContext ctx, lua_KFunction k);
N#define lua_pcall(L,n,r,f)	lua_pcallk(L, (n), (r), (f), 0, NULL)
N
NLUA_API int   (lua_load) (lua_State *L, lua_Reader reader, void *dt,
Xextern int   (lua_load) (lua_State *L, lua_Reader reader, void *dt,
N                          const char *chunkname, const char *mode);
N
NLUA_API int (lua_dump) (lua_State *L, lua_Writer writer, void *data, int strip);
Xextern int (lua_dump) (lua_State *L, lua_Writer writer, void *data, int strip);
N
N
N/*
N** coroutine functions
N*/
NLUA_API int  (lua_yieldk)     (lua_State *L, int nresults, lua_KContext ctx,
Xextern int  (lua_yieldk)     (lua_State *L, int nresults, lua_KContext ctx,
N                               lua_KFunction k);
NLUA_API int  (lua_resume)     (lua_State *L, lua_State *from, int narg,
Xextern int  (lua_resume)     (lua_State *L, lua_State *from, int narg,
N                               int *nres);
NLUA_API int  (lua_status)     (lua_State *L);
Xextern int  (lua_status)     (lua_State *L);
NLUA_API int (lua_isyieldable) (lua_State *L);
Xextern int (lua_isyieldable) (lua_State *L);
N
N#define lua_yield(L,n)		lua_yieldk(L, (n), 0, NULL)
N
N
N/*
N** garbage-collection function and options
N*/
N
N#define LUA_GCSTOP		0
N#define LUA_GCRESTART		1
N#define LUA_GCCOLLECT		2
N#define LUA_GCCOUNT		3
N#define LUA_GCCOUNTB		4
N#define LUA_GCSTEP		5
N#define LUA_GCSETPAUSE		6
N#define LUA_GCSETSTEPMUL	7
N#define LUA_GCISRUNNING		9
N#define LUA_GCGEN		10
N#define LUA_GCINC		11
N
NLUA_API int (lua_gc) (lua_State *L, int what, ...);
Xextern int (lua_gc) (lua_State *L, int what, ...);
N
N
N/*
N** miscellaneous functions
N*/
N
NLUA_API int   (lua_error) (lua_State *L);
Xextern int   (lua_error) (lua_State *L);
N
NLUA_API int   (lua_next) (lua_State *L, int idx);
Xextern int   (lua_next) (lua_State *L, int idx);
N
NLUA_API void  (lua_concat) (lua_State *L, int n);
Xextern void  (lua_concat) (lua_State *L, int n);
NLUA_API void  (lua_len)    (lua_State *L, int idx);
Xextern void  (lua_len)    (lua_State *L, int idx);
N
NLUA_API size_t   (lua_stringtonumber) (lua_State *L, const char *s);
Xextern size_t   (lua_stringtonumber) (lua_State *L, const char *s);
N
NLUA_API lua_Alloc (lua_getallocf) (lua_State *L, void **ud);
Xextern lua_Alloc (lua_getallocf) (lua_State *L, void **ud);
NLUA_API void      (lua_setallocf) (lua_State *L, lua_Alloc f, void *ud);
Xextern void      (lua_setallocf) (lua_State *L, lua_Alloc f, void *ud);
N
NLUA_API void (lua_removekey) (lua_State *L, int idx);
Xextern void (lua_removekey) (lua_State *L, int idx);
NLUA_API int (lua_keyin) (lua_State *L, int idx);
Xextern int (lua_keyin) (lua_State *L, int idx);
N
N
N/*
N** {==============================================================
N** some useful macros
N** ===============================================================
N*/
N
N#define lua_getextraspace(L)	((void *)((char *)(L) - LUA_EXTRASPACE))
N
N#define lua_tonumber(L,i)	lua_tonumberx(L,(i),NULL)
N#define lua_tointeger(L,i)	lua_tointegerx(L,(i),NULL)
N
N#define lua_pop(L,n)		lua_settop(L, -(n)-1)
N
N#define lua_newtable(L)		lua_createtable(L, 0, 0)
N
N#define lua_register(L,n,f) (lua_pushcfunction(L, (f)), lua_setglobal(L, (n)))
N
N#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
N
N#define lua_isfunction(L,n)	(lua_type(L, (n)) == LUA_TFUNCTION)
N#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
N#define lua_islightuserdata(L,n)	(lua_type(L, (n)) == LUA_TLIGHTUSERDATA)
N#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
N#define lua_isboolean(L,n)	(lua_type(L, (n)) == LUA_TBOOLEAN)
N#define lua_isthread(L,n)	(lua_type(L, (n)) == LUA_TTHREAD)
N#define lua_isnone(L,n)		(lua_type(L, (n)) == LUA_TNONE)
N#define lua_isnoneornil(L, n)	(lua_type(L, (n)) <= 0)
N
N#define lua_pushliteral(L, s)	lua_pushstring(L, "" s)
N
N#define lua_pushglobaltable(L)  \
N	((void)lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS))
X#define lua_pushglobaltable(L)  	((void)lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS))
N
N#define lua_tostring(L,i)	lua_tolstring(L, (i), NULL)
N
N
N#define lua_insert(L,idx)	lua_rotate(L, (idx), 1)
N
N#define lua_remove(L,idx)	(lua_rotate(L, (idx), -1), lua_pop(L, 1))
N
N#define lua_replace(L,idx)	(lua_copy(L, -1, (idx)), lua_pop(L, 1))
N
N/* }============================================================== */
N
N
N/*
N** {==============================================================
N** compatibility macros
N** ===============================================================
N*/
N#if defined(LUA_COMPAT_APIINTCASTS)
X#if 0L
S
S#define lua_pushunsigned(L,n)	lua_pushinteger(L, (lua_Integer)(n))
S#define lua_tounsignedx(L,i,is)	((lua_Unsigned)lua_tointegerx(L,i,is))
S#define lua_tounsigned(L,i)	lua_tounsignedx(L,(i),NULL)
S
N#endif
N
N#define lua_newuserdata(L,s)	lua_newuserdatauv(L,s,1)
N#define lua_getuservalue(L,idx)	lua_getiuservalue(L,idx,1)
N#define lua_setuservalue(L,idx)	lua_setiuservalue(L,idx,1)
N
N/* }============================================================== */
N
N/*
N** {======================================================================
N** Debug API
N** =======================================================================
N*/
N
N
N/*
N** Event codes
N*/
N#define LUA_HOOKCALL	0
N#define LUA_HOOKRET	1
N#define LUA_HOOKLINE	2
N#define LUA_HOOKCOUNT	3
N#define LUA_HOOKTAILCALL 4
N
N
N/*
N** Event masks
N*/
N#define LUA_MASKCALL	(1 << LUA_HOOKCALL)
N#define LUA_MASKRET	(1 << LUA_HOOKRET)
N#define LUA_MASKLINE	(1 << LUA_HOOKLINE)
N#define LUA_MASKCOUNT	(1 << LUA_HOOKCOUNT)
N
Ntypedef struct lua_Debug lua_Debug;  /* activation record */
N
N
N/* Functions to be called by the debugger in specific events */
Ntypedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);
N
N
NLUA_API int (lua_getstack) (lua_State *L, int level, lua_Debug *ar);
Xextern int (lua_getstack) (lua_State *L, int level, lua_Debug *ar);
NLUA_API int (lua_getinfo) (lua_State *L, const char *what, lua_Debug *ar);
Xextern int (lua_getinfo) (lua_State *L, const char *what, lua_Debug *ar);
NLUA_API const char *(lua_getlocal) (lua_State *L, const lua_Debug *ar, int n);
Xextern const char *(lua_getlocal) (lua_State *L, const lua_Debug *ar, int n);
NLUA_API const char *(lua_setlocal) (lua_State *L, const lua_Debug *ar, int n);
Xextern const char *(lua_setlocal) (lua_State *L, const lua_Debug *ar, int n);
NLUA_API const char *(lua_getupvalue) (lua_State *L, int funcindex, int n);
Xextern const char *(lua_getupvalue) (lua_State *L, int funcindex, int n);
NLUA_API const char *(lua_setupvalue) (lua_State *L, int funcindex, int n);
Xextern const char *(lua_setupvalue) (lua_State *L, int funcindex, int n);
N
NLUA_API void *(lua_upvalueid) (lua_State *L, int fidx, int n);
Xextern void *(lua_upvalueid) (lua_State *L, int fidx, int n);
NLUA_API void  (lua_upvaluejoin) (lua_State *L, int fidx1, int n1,
Xextern void  (lua_upvaluejoin) (lua_State *L, int fidx1, int n1,
N                                               int fidx2, int n2);
N
NLUA_API void (lua_sethook) (lua_State *L, lua_Hook func, int mask, int count);
Xextern void (lua_sethook) (lua_State *L, lua_Hook func, int mask, int count);
NLUA_API lua_Hook (lua_gethook) (lua_State *L);
Xextern lua_Hook (lua_gethook) (lua_State *L);
NLUA_API int (lua_gethookmask) (lua_State *L);
Xextern int (lua_gethookmask) (lua_State *L);
NLUA_API int (lua_gethookcount) (lua_State *L);
Xextern int (lua_gethookcount) (lua_State *L);
N
N
Nstruct lua_Debug {
N  int event;
N  const char *name;	/* (n) */
N  const char *namewhat;	/* (n) 'global', 'local', 'field', 'method' */
N  const char *what;	/* (S) 'Lua', 'C', 'main', 'tail' */
N  const char *source;	/* (S) */
N  int currentline;	/* (l) */
N  int linedefined;	/* (S) */
N  int lastlinedefined;	/* (S) */
N  unsigned char nups;	/* (u) number of upvalues */
N  unsigned char nparams;/* (u) number of parameters */
N  char isvararg;        /* (u) */
N  char istailcall;	/* (t) */
N  unsigned short fTransfer;/* (r) index of first value transfered */
N  unsigned short nTransfer;   /* (r) number of transfered values */
N  char short_src[LUA_IDSIZE]; /* (S) */
X  char short_src[60];  
N  /* private part */
N  struct CallInfo *i_ci;  /* active function */
N};
N
N/* }====================================================================== */
N
N
N/******************************************************************************
N* Copyright (C) 1994-2018 Lua.org, PUC-Rio.
N*
N* Permission is hereby granted, free of charge, to any person obtaining
N* a copy of this software and associated documentation files (the
N* "Software"), to deal in the Software without restriction, including
N* without limitation the rights to use, copy, modify, merge, publish,
N* distribute, sublicense, and/or sell copies of the Software, and to
N* permit persons to whom the Software is furnished to do so, subject to
N* the following conditions:
N*
N* The above copyright notice and this permission notice shall be
N* included in all copies or substantial portions of the Software.
N*
N* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
N* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
N* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
N* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
N* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
N* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
N* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
N******************************************************************************/
N
N
N#endif
L 16 "..\..\..\M6P1(L)_Lua\lua\llimits.h" 2
N
N/*
N** 'lu_mem' and 'l_mem' are unsigned/signed integers big enough to count
N** the total memory used by Lua (in bytes). Usually, 'size_t' and
N** 'ptrdiff_t' should work, but we use 'long' for 16-bit machines.
N*/
N#if defined(LUAI_MEM)		/* { external definitions? */
X#if 0L		 
Stypedef LUAI_UMEM lu_mem;
Stypedef LUAI_MEM l_mem;
N#elif LUAI_BITSINT >= 32	/* }{ */
X#elif 32 >= 32	 
Ntypedef size_t lu_mem;
Ntypedef ptrdiff_t l_mem;
N#else  /* 16-bit ints */	/* }{ */
Stypedef unsigned long lu_mem;
Stypedef long l_mem;
N#endif				/* } */
N
N
N/* chars used as small naturals (so that 'char' is reserved for characters) */
Ntypedef unsigned char lu_byte;
Ntypedef signed char ls_byte;
N
N
N/* maximum value for size_t */
N#define MAX_SIZET	((size_t)(~(size_t)0))
N
N/* maximum size visible for Lua (must be representable in a lua_Integer */
N#define MAX_SIZE	(sizeof(size_t) < sizeof(lua_Integer) ? MAX_SIZET \
N                          : (size_t)(LUA_MAXINTEGER))
X#define MAX_SIZE	(sizeof(size_t) < sizeof(lua_Integer) ? MAX_SIZET                           : (size_t)(LUA_MAXINTEGER))
N
N
N#define MAX_LUMEM	((lu_mem)(~(lu_mem)0))
N
N#define MAX_LMEM	((l_mem)(MAX_LUMEM >> 1))
N
N
N#define MAX_INT		INT_MAX  /* maximum value of an int */
N
N
N/*
N** floor of the log2 of the maximum signed value for integral type 't'.
N** (That is, maximum 'n' such that '2^n' fits in the given signed type.)
N*/
N#define log2maxs(t)	(sizeof(t) * 8 - 2)
N
N
N/*
N** conversion of pointer to unsigned integer:
N** this is for hashing only; there is no problem if the integer
N** cannot hold the whole pointer value
N*/
N#define point2uint(p)	((unsigned int)((size_t)(p) & UINT_MAX))
N
N
N
N/* types of 'usual argument conversions' for lua_Number and lua_Integer */
Ntypedef LUAI_UACNUMBER l_uacNumber;
Xtypedef double l_uacNumber;
Ntypedef LUAI_UACINT l_uacInt;
Xtypedef long long l_uacInt;
N
N
N/* internal assertions for in-house debugging */
N#if defined(lua_assert)
X#if 0L
S#define check_exp(c,e)		(lua_assert(c), (e))
S/* to avoid problems with conditions too long */
S#define lua_longassert(c)	((c) ? (void)0 : lua_assert(0))
N#else
N#define lua_assert(c)		((void)0)
N#define check_exp(c,e)		(e)
N#define lua_longassert(c)	((void)0)
N#endif
N
N/*
N** assertion for checking API calls
N*/
N#if !defined(luai_apicheck)
X#if !0L
N#define luai_apicheck(l,e)	lua_assert(e)
N#endif
N
N#define api_check(l,e,msg)	luai_apicheck(l,(e) && msg)
N
N
N/* macro to avoid warnings about unused variables */
N#if !defined(UNUSED)
X#if !0L
N#define UNUSED(x)	((void)(x))
N#endif
N
N
N/* type casts (a macro highlights casts in the code) */
N#define cast(t, exp)	((t)(exp))
N
N#define cast_void(i)	cast(void, (i))
N#define cast_voidp(i)	cast(void *, (i))
N#define cast_num(i)	cast(lua_Number, (i))
N#define cast_int(i)	cast(int, (i))
N#define cast_uint(i)	cast(unsigned int, (i))
N#define cast_byte(i)	cast(lu_byte, (i))
N#define cast_uchar(i)	cast(unsigned char, (i))
N#define cast_char(i)	cast(char, (i))
N#define cast_charp(i)	cast(char *, (i))
N#define cast_sizet(i)	cast(size_t, (i))
N
N
N/* cast a signed lua_Integer to lua_Unsigned */
N#if !defined(l_castS2U)
X#if !0L
N#define l_castS2U(i)	((lua_Unsigned)(i))
N#endif
N
N/*
N** cast a lua_Unsigned to a signed lua_Integer; this cast is
N** not strict ISO C, but two-complement architectures should
N** work fine.
N*/
N#if !defined(l_castU2S)
X#if !0L
N#define l_castU2S(i)	((lua_Integer)(i))
N#endif
N
N
N/*
N** non-return type
N*/
N#if defined(__GNUC__)
X#if 0L
S#define l_noret		void __attribute__((noreturn))
S#elif defined(_MSC_VER) && _MSC_VER >= 1200
X#elif 0L && _MSC_VER >= 1200
S#define l_noret		void __declspec(noreturn)
N#else
N#define l_noret		void
N#endif
N
N
N
N/*
N** maximum depth for nested C calls and syntactical nested non-terminals
N** in a program. (Value must fit in an unsigned short int. It must also
N** be compatible with the size of the C stack.)
N*/
N#if !defined(LUAI_MAXCCALLS)
X#if !0L
N#define LUAI_MAXCCALLS		2200
N#endif
N
N
N
N/*
N** type for virtual-machine instructions;
N** must be an unsigned with (at least) 4 bytes (see details in lopcodes.h)
N*/
N#if LUAI_BITSINT >= 32
X#if 32 >= 32
Ntypedef unsigned int Instruction;
N#else
Stypedef unsigned long Instruction;
N#endif
N
N
N
N/*
N** Maximum length for short strings, that is, strings that are
N** internalized. (Cannot be smaller than reserved words or tags for
N** metamethods, as these strings must be internalized;
N** #("function") = 8, #("__newindex") = 10.)
N*/
N#if !defined(LUAI_MAXSHORTLEN)
X#if !0L
N#define LUAI_MAXSHORTLEN	40
N#endif
N
N
N/*
N** Initial size for the string table (must be power of 2).
N** The Lua core alone registers ~50 strings (reserved words +
N** metaevent keys + a few others). Libraries would typically add
N** a few dozens more.
N*/
N#if !defined(MINSTRTABSIZE)
X#if !0L
N#define MINSTRTABSIZE	128
N#endif
N
N
N/*
N** Size of cache for strings in the API. 'N' is the number of
N** sets (better be a prime) and "M" is the size of each set (M == 1
N** makes a direct cache.)
N*/
N#if !defined(STRCACHE_N)
X#if !0L
N#define STRCACHE_N		53
N#define STRCACHE_M		2
N#endif
N
N
N/* minimum size for string buffer */
N#if !defined(LUA_MINBUFFER)
X#if !0L
N#define LUA_MINBUFFER	32
N#endif
N
N
N/*
N** macros that are executed whenever program enters the Lua core
N** ('lua_lock') and leaves the core ('lua_unlock')
N*/
N#if !defined(lua_lock)
X#if !0L
N#define lua_lock(L)	((void) 0)
N#define lua_unlock(L)	((void) 0)
N#endif
N
N/*
N** macro executed during Lua functions at points where the
N** function can yield.
N*/
N#if !defined(luai_threadyield)
X#if !0L
N#define luai_threadyield(L)	{lua_unlock(L); lua_lock(L);}
N#endif
N
N
N/*
N** these macros allow user-specific actions when a thread is
N** created/deleted/resumed/yielded.
N*/
N#if !defined(luai_userstateopen)
X#if !0L
N#define luai_userstateopen(L)		((void)L)
N#endif
N
N#if !defined(luai_userstateclose)
X#if !0L
N#define luai_userstateclose(L)		((void)L)
N#endif
N
N#if !defined(luai_userstatethread)
X#if !0L
N#define luai_userstatethread(L,L1)	((void)L)
N#endif
N
N#if !defined(luai_userstatefree)
X#if !0L
N#define luai_userstatefree(L,L1)	((void)L)
N#endif
N
N#if !defined(luai_userstateresume)
X#if !0L
N#define luai_userstateresume(L,n)	((void)L)
N#endif
N
N#if !defined(luai_userstateyield)
X#if !0L
N#define luai_userstateyield(L,n)	((void)L)
N#endif
N
N
N
N/*
N** The luai_num* macros define the primitive operations over numbers.
N*/
N
N/* floor division (defined as 'floor(a/b)') */
N#if !defined(luai_numidiv)
X#if !0L
N#define luai_numidiv(L,a,b)     ((void)L, l_floor(luai_numdiv(L,a,b)))
N#endif
N
N/* float division */
N#if !defined(luai_numdiv)
X#if !0L
N#define luai_numdiv(L,a,b)      ((a)/(b))
N#endif
N
N/*
N** modulo: defined as 'a - floor(a/b)*b'; this definition gives NaN when
N** 'b' is huge, but the result should be 'a'. 'fmod' gives the result of
N** 'a - trunc(a/b)*b', and therefore must be corrected when 'trunc(a/b)
N** ~= floor(a/b)'. That happens when the division has a non-integer
N** negative result, which is equivalent to the test below.
N*/
N#if !defined(luai_nummod)
X#if !0L
N#define luai_nummod(L,a,b,m)  \
N  { (m) = l_mathop(fmod)(a,b); if ((m)*(b) < 0) (m) += (b); }
X#define luai_nummod(L,a,b,m)    { (m) = l_mathop(fmod)(a,b); if ((m)*(b) < 0) (m) += (b); }
N#endif
N
N/* exponentiation */
N#if !defined(luai_numpow)
X#if !0L
N#define luai_numpow(L,a,b)      ((void)L, l_mathop(pow)(a,b))
N#endif
N
N/* the others are quite standard operations */
N#if !defined(luai_numadd)
X#if !0L
N#define luai_numadd(L,a,b)      ((a)+(b))
N#define luai_numsub(L,a,b)      ((a)-(b))
N#define luai_nummul(L,a,b)      ((a)*(b))
N#define luai_numunm(L,a)        (-(a))
N#define luai_numeq(a,b)         ((a)==(b))
N#define luai_numlt(a,b)         ((a)<(b))
N#define luai_numle(a,b)         ((a)<=(b))
N#define luai_numisnan(a)        (!luai_numeq((a), (a)))
N#endif
N
N
N
N
N
N/*
N** macro to control inclusion of some hard tests on stack reallocation
N*/
N#if !defined(HARDSTACKTESTS)
X#if !0L
N#define condmovestack(L,pre,pos)	((void)0)
N#else
S/* realloc stack keeping its size */
S#define condmovestack(L,pre,pos)  \
S  { int sz_ = (L)->stacksize; pre; luaD_reallocstack((L), sz_, 0); pos; }
X#define condmovestack(L,pre,pos)    { int sz_ = (L)->stacksize; pre; luaD_reallocstack((L), sz_, 0); pos; }
N#endif
N
N#if !defined(HARDMEMTESTS)
X#if !0L
N#define condchangemem(L,pre,pos)	((void)0)
N#else
S#define condchangemem(L,pre,pos)  \
S	{ if (G(L)->gcrunning) { pre; luaC_fullgc(L, 0); pos; } }
X#define condchangemem(L,pre,pos)  	{ if (G(L)->gcrunning) { pre; luaC_fullgc(L, 0); pos; } }
N#endif
N
N#endif
L 11 "..\..\..\M6P1(L)_Lua\lua\lopcodes.h" 2
N
N
N/*===========================================================================
N  We assume that instructions are unsigned 32-bit integers.
N  All instructions have an opcode in the first 7 bits.
N  Instructions can have the following formats:
N
N        3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0
N        1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
NiABC         C(8)     |      B(8)     |k|     A(8)      |   Op(7)     |
NiABx               Bx(17)               |     A(8)      |   Op(7)     |
NiAsB              sBx (signed)(17)      |     A(8)      |   Op(7)     |
NiAx                           Ax(25)                    |   Op(7)     |
NisJ                          sJ(24)                   |m|   Op(7)     |
N
N  A signed argument is represented in excess K: the represented value is
N  the written unsigned value minus K, where K is half the maximum for the
N  corresponding unsigned argument.
N===========================================================================*/
N
N
Nenum OpMode {iABC, iABx, iAsBx, iAx, isJ};  /* basic instruction formats */
N
N
N/*
N** size and position of opcode arguments.
N*/
N#define SIZE_C		8
N#define SIZE_B		8
N#define SIZE_Bx		(SIZE_C + SIZE_B + 1)
N#define SIZE_A		8
N#define SIZE_Ax		(SIZE_Bx + SIZE_A)
N#define SIZE_sJ		(SIZE_Bx + SIZE_A - 1)
N
N#define SIZE_OP		7
N
N#define POS_OP		0
N
N#define POS_A		(POS_OP + SIZE_OP)
N#define POS_k		(POS_A + SIZE_A)
N#define POS_B		(POS_k + 1)
N#define POS_C		(POS_B + SIZE_B)
N
N#define POS_Bx		POS_k
N
N#define POS_Ax		POS_A
N
N#define POS_m		POS_A
N#define POS_sJ		(POS_A + 1)
N
N/*
N** limits for opcode arguments.
N** we use (signed) int to manipulate most arguments,
N** so they must fit in LUAI_BITSINT-1 bits (-1 for sign)
N*/
N#if SIZE_Bx < LUAI_BITSINT-1
X#if (8 + 8 + 1) < 32-1
N#define MAXARG_Bx	((1<<SIZE_Bx)-1)
N#else
S#define MAXARG_Bx	MAX_INT
N#endif
N
N#define OFFSET_sBx	(MAXARG_Bx>>1)         /* 'sBx' is signed */
N
N
N#if SIZE_Ax < LUAI_BITSINT-1
X#if ((8 + 8 + 1) + 8) < 32-1
N#define MAXARG_Ax	((1<<SIZE_Ax)-1)
N#else
S#define MAXARG_Ax	MAX_INT
N#endif
N
N#if SIZE_sJ < LUAI_BITSINT-1
X#if ((8 + 8 + 1) + 8 - 1) < 32-1
N#define MAXARG_sJ	((1 << SIZE_sJ) - 1)
N#else
S#define MAXARG_sJ	MAX_INT
N#endif
N
N#define OFFSET_sJ	(MAXARG_sJ >> 1)
N
N
N#define MAXARG_A	((1<<SIZE_A)-1)
N#define MAXARG_B	((1<<SIZE_B)-1)
N#define MAXARG_C	((1<<SIZE_C)-1)
N#define OFFSET_sC	(MAXARG_C >> 1)
N#define MAXARG_Cx	((1<<(SIZE_C + 1))-1)
N
N
N/* creates a mask with 'n' 1 bits at position 'p' */
N#define MASK1(n,p)	((~((~(Instruction)0)<<(n)))<<(p))
N
N/* creates a mask with 'n' 0 bits at position 'p' */
N#define MASK0(n,p)	(~MASK1(n,p))
N
N/*
N** the following macros help to manipulate instructions
N*/
N
N#define GET_OPCODE(i)	(cast(OpCode, ((i)>>POS_OP) & MASK1(SIZE_OP,0)))
N#define SET_OPCODE(i,o)	((i) = (((i)&MASK0(SIZE_OP,POS_OP)) | \
N		((cast(Instruction, o)<<POS_OP)&MASK1(SIZE_OP,POS_OP))))
X#define SET_OPCODE(i,o)	((i) = (((i)&MASK0(SIZE_OP,POS_OP)) | 		((cast(Instruction, o)<<POS_OP)&MASK1(SIZE_OP,POS_OP))))
N
N#define checkopm(i,m)	(getOpMode(GET_OPCODE(i)) == m)
N
N
N#define getarg(i,pos,size)	(cast_int(((i)>>(pos)) & MASK1(size,0)))
N#define setarg(i,v,pos,size)	((i) = (((i)&MASK0(size,pos)) | \
N                ((cast(Instruction, v)<<pos)&MASK1(size,pos))))
X#define setarg(i,v,pos,size)	((i) = (((i)&MASK0(size,pos)) |                 ((cast(Instruction, v)<<pos)&MASK1(size,pos))))
N
N#define GETARG_A(i)	getarg(i, POS_A, SIZE_A)
N#define SETARG_A(i,v)	setarg(i, v, POS_A, SIZE_A)
N
N#define GETARG_B(i)	check_exp(checkopm(i, iABC), getarg(i, POS_B, SIZE_B))
N#define GETARG_sB(i)	(GETARG_B(i) - OFFSET_sC)
N#define SETARG_B(i,v)	setarg(i, v, POS_B, SIZE_B)
N
N#define GETARG_C(i)	check_exp(checkopm(i, iABC), getarg(i, POS_C, SIZE_C))
N#define GETARG_sC(i)	(GETARG_C(i) - OFFSET_sC)
N#define SETARG_C(i,v)	setarg(i, v, POS_C, SIZE_C)
N
N#define TESTARG_k(i)	(cast_int(((i) & (1u << POS_k))))
N#define GETARG_k(i)	check_exp(checkopm(i, iABC), getarg(i, POS_k, 1))
N#define SETARG_k(i,v)	setarg(i, v, POS_k, 1)
N
N#define GETARG_Bx(i)	check_exp(checkopm(i, iABx), getarg(i, POS_Bx, SIZE_Bx))
N#define SETARG_Bx(i,v)	setarg(i, v, POS_Bx, SIZE_Bx)
N
N#define GETARG_Ax(i)	check_exp(checkopm(i, iAx), getarg(i, POS_Ax, SIZE_Ax))
N#define SETARG_Ax(i,v)	setarg(i, v, POS_Ax, SIZE_Ax)
N
N#define GETARG_sBx(i)  \
N	check_exp(checkopm(i, iAsBx), getarg(i, POS_Bx, SIZE_Bx) - OFFSET_sBx)
X#define GETARG_sBx(i)  	check_exp(checkopm(i, iAsBx), getarg(i, POS_Bx, SIZE_Bx) - OFFSET_sBx)
N#define SETARG_sBx(i,b)	SETARG_Bx((i),cast_uint((b)+OFFSET_sBx))
N
N#define GETARG_sJ(i)  \
N	check_exp(checkopm(i, isJ), getarg(i, POS_sJ, SIZE_sJ) - OFFSET_sJ)
X#define GETARG_sJ(i)  	check_exp(checkopm(i, isJ), getarg(i, POS_sJ, SIZE_sJ) - OFFSET_sJ)
N#define SETARG_sJ(i,j) \
N	setarg(i, cast_uint((j)+OFFSET_sJ), POS_sJ, SIZE_sJ)
X#define SETARG_sJ(i,j) 	setarg(i, cast_uint((j)+OFFSET_sJ), POS_sJ, SIZE_sJ)
N#define GETARG_m(i)	check_exp(checkopm(i, isJ), getarg(i, POS_m, 1))
N#define SETARG_m(i,m)	setarg(i, m, POS_m, 1)
N
N
N#define CREATE_ABCk(o,a,b,c,k)	((cast(Instruction, o)<<POS_OP) \
N			| (cast(Instruction, a)<<POS_A) \
N			| (cast(Instruction, b)<<POS_B) \
N			| (cast(Instruction, c)<<POS_C) \
N			| (cast(Instruction, k)<<POS_k))
X#define CREATE_ABCk(o,a,b,c,k)	((cast(Instruction, o)<<POS_OP) 			| (cast(Instruction, a)<<POS_A) 			| (cast(Instruction, b)<<POS_B) 			| (cast(Instruction, c)<<POS_C) 			| (cast(Instruction, k)<<POS_k))
N
N#define CREATE_ABx(o,a,bc)	((cast(Instruction, o)<<POS_OP) \
N			| (cast(Instruction, a)<<POS_A) \
N			| (cast(Instruction, bc)<<POS_Bx))
X#define CREATE_ABx(o,a,bc)	((cast(Instruction, o)<<POS_OP) 			| (cast(Instruction, a)<<POS_A) 			| (cast(Instruction, bc)<<POS_Bx))
N
N#define CREATE_Ax(o,a)		((cast(Instruction, o)<<POS_OP) \
N			| (cast(Instruction, a)<<POS_Ax))
X#define CREATE_Ax(o,a)		((cast(Instruction, o)<<POS_OP) 			| (cast(Instruction, a)<<POS_Ax))
N
N#define CREATE_sJ(o,j,k)	((cast(Instruction, o) << POS_OP) \
N			| (cast(Instruction, j) << POS_sJ) \
N			| (cast(Instruction, k) << POS_k))
X#define CREATE_sJ(o,j,k)	((cast(Instruction, o) << POS_OP) 			| (cast(Instruction, j) << POS_sJ) 			| (cast(Instruction, k) << POS_k))
N
N
N#if !defined(MAXINDEXRK)  /* (for debugging only) */
X#if !0L   
N#define MAXINDEXRK	MAXARG_B
N#endif
N
N
N/*
N** invalid register that fits in 8 bits
N*/
N#define NO_REG		MAXARG_A
N
N
N/*
N** R(x) - register
N** K(x) - constant (in constant table)
N** RK(x) == if k(i) then K(x) else R(x)
N*/
N
N
N/*
N** grep "ORDER OP" if you change these enums
N*/
N
Ntypedef enum {
N/*----------------------------------------------------------------------
Nname		args	description
N------------------------------------------------------------------------*/
NOP_MOVE,/*	A B	R(A) := R(B)					*/
NOP_LOADI,/*	A sBx	R(A) := sBx					*/
NOP_LOADF,/*	A sBx	R(A) := (lua_Number)sBx				*/
NOP_LOADK,/*	A Bx	R(A) := K(Bx)					*/
NOP_LOADKX,/*	A 	R(A) := K(extra arg)				*/
NOP_LOADBOOL,/*	A B C	R(A) := (Bool)B; if (C) pc++			*/
NOP_LOADNIL,/*	A B	R(A), R(A+1), ..., R(A+B) := nil		*/
NOP_GETUPVAL,/*	A B	R(A) := UpValue[B]				*/
NOP_SETUPVAL,/*	A B	UpValue[B] := R(A)				*/
N
NOP_GETTABUP,/*	A B C	R(A) := UpValue[B][K(C):string]			*/
NOP_GETTABLE,/*	A B C	R(A) := R(B)[R(C)]				*/
NOP_GETI,/*	A B C	R(A) := R(B)[C]					*/
NOP_GETFIELD,/*	A B C	R(A) := R(B)[K(C):string]			*/
N
NOP_SETTABUP,/*	A B C	UpValue[A][K(B):string] := RK(C)		*/
NOP_SETTABLE,/*	A B C	R(A)[R(B)] := RK(C)				*/
NOP_SETI,/*	A B C	R(A)[B] := RK(C)				*/
NOP_SETFIELD,/*	A B C	R(A)[K(B):string] := RK(C)			*/
N
NOP_NEWTABLE,/*	A B C	R(A) := {} (size = B,C)				*/
N
NOP_SELF,/*	A B C	R(A+1) := R(B); R(A) := R(B)[RK(C):string]	*/
N
NOP_ADDI,/*	A B sC	R(A) := R(B) + C				*/
NOP_SUBI,/*	A B sC	R(A) := R(B) - C				*/
NOP_MULI,/*	A B sC	R(A) := R(B) * C				*/
NOP_MODI,/*	A B sC	R(A) := R(B) % C				*/
NOP_POWI,/*	A B sC	R(A) := R(B) ^ C				*/
NOP_DIVI,/*	A B sC	R(A) := R(B) / C				*/
NOP_IDIVI,/*	A B sC	R(A) := R(B) // C				*/
N
NOP_BANDK,/*	A B C	R(A) := R(B) & K(C):integer			*/
NOP_BORK,/*	A B C	R(A) := R(B) | K(C):integer			*/
NOP_BXORK,/*	A B C	R(A) := R(B) ~ K(C):integer			*/
N
NOP_SHRI,/*	A B C	R(A) := R(B) >> C				*/
NOP_SHLI,/*	A B C	R(A) := C << R(B)				*/
N
NOP_ADD,/*	A B C	R(A) := R(B) + R(C)				*/
NOP_SUB,/*	A B C	R(A) := R(B) - R(C)				*/
NOP_MUL,/*	A B C	R(A) := R(B) * R(C)				*/
NOP_MOD,/*	A B C	R(A) := R(B) % R(C)				*/
NOP_POW,/*	A B C	R(A) := R(B) ^ R(C)				*/
NOP_DIV,/*	A B C	R(A) := R(B) / R(C)				*/
NOP_IDIV,/*	A B C	R(A) := R(B) // R(C)				*/
NOP_BAND,/*	A B C	R(A) := R(B) & R(C)				*/
NOP_BOR,/*	A B C	R(A) := R(B) | R(C)				*/
NOP_BXOR,/*	A B C	R(A) := R(B) ~ R(C)				*/
NOP_SHL,/*	A B C	R(A) := R(B) << R(C)				*/
NOP_SHR,/*	A B C	R(A) := R(B) >> R(C)				*/
NOP_UNM,/*	A B	R(A) := -R(B)					*/
NOP_BNOT,/*	A B	R(A) := ~R(B)					*/
NOP_NOT,/*	A B	R(A) := not R(B)				*/
NOP_LEN,/*	A B	R(A) := length of R(B)				*/
N
NOP_CONCAT,/*	A B  	R(A) := R(A).. ... ..R(A + B - 1)		*/
N
NOP_CLOSE,/*	A	close all upvalues >= R(A)			*/
NOP_JMP,/*	k sJ	pc += sJ  (k is used in code generation)	*/
NOP_EQ,/*	A B	if ((R(A) == R(B)) ~= k) then pc++		*/
NOP_LT,/*	A B	if ((R(A) <  R(B)) ~= k) then pc++		*/
NOP_LE,/*	A B	if ((R(A) <= R(B)) ~= k) then pc++		*/
N
NOP_EQK,/*	A B	if ((R(A) == K(B)) ~= k) then pc++		*/
NOP_EQI,/*	A sB	if ((R(A) == sB) ~= k) then pc++		*/
NOP_LTI,/*	A sB	if ((R(A) < sB) ~= k) then pc++			*/
NOP_LEI,/*	A sB	if ((R(A) <= sB) ~= k) then pc++		*/
NOP_GTI,/*	A sB	if ((R(A) > sB) ~= k) then pc++			*/
NOP_GEI,/*	A sB	if ((R(A) >= sB) ~= k) then pc++		*/
N
NOP_TEST,/*	A 	if (not R(A) == k) then pc++			*/
NOP_TESTSET,/*	A B	if (not R(B) == k) then R(A) := R(B) else pc++	*/
N
NOP_UNDEF,/*	A B	R(A)[R(B)] = undef				*/
NOP_ISDEF,/*	A B C	R(A) = (R(B)[R(C)] == undef			*/
N
NOP_CALL,/*	A B C	R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) */
NOP_TAILCALL,/*	A B C	return R(A)(R(A+1), ... ,R(A+B-1))		*/
N
NOP_RETURN,/*	A B C	return R(A), ... ,R(A+B-2)	(see note)	*/
NOP_RETURN0,/*	  	return 						*/
NOP_RETURN1,/*	A 	return R(A)					*/
N
NOP_FORLOOP1,/*	A Bx	R(A)++;
N			if R(A) <= R(A+1) then { pc-=Bx; R(A+3)=R(A) }	*/
NOP_FORPREP1,/*	A Bx	R(A)--; pc+=Bx					*/
N
NOP_FORLOOP,/*	A Bx	R(A)+=R(A+2);
N			if R(A) <?= R(A+1) then { pc-=Bx; R(A+3)=R(A) }	*/
NOP_FORPREP,/*	A Bx	R(A)-=R(A+2); pc+=Bx				*/
N
NOP_TFORCALL,/*	A C	R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2));	*/
NOP_TFORLOOP,/*	A Bx	if R(A+1) ~= nil then { R(A)=R(A+1); pc -= Bx }	*/
N
NOP_SETLIST,/*	A B C	R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B	*/
N
NOP_CLOSURE,/*	A Bx	R(A) := closure(KPROTO[Bx])			*/
N
NOP_VARARG,/*	A B C  	R(A), R(A+1), ..., R(A+C-2) = vararg		*/
N
NOP_PREPVARARG,/*A 	(adjust vararg parameters)			*/
N
NOP_EXTRAARG/*	Ax	extra (larger) argument for previous opcode	*/
N} OpCode;
N
N
N#define NUM_OPCODES	(cast_int(OP_EXTRAARG) + 1)
N
N
N
N/*===========================================================================
N  Notes:
N  (*) In OP_CALL, if (B == 0) then B = top. If (C == 0), then 'top' is
N  set to last_result+1, so next open instruction (OP_CALL, OP_RETURN*,
N  OP_SETLIST) may use 'top'.
N
N  (*) In OP_VARARG, if (C == 0) then use actual number of varargs and
N  set top (like in OP_CALL with C == 0).
N
N  (*) In OP_RETURN, if (B == 0) then return up to 'top'.
N
N  (*) In OP_SETLIST, if (B == 0) then real B = 'top'; if (C == 0) then
N  next 'instruction' is EXTRAARG(real C).
N
N  (*) In OP_LOADKX, the next 'instruction' is always EXTRAARG.
N
N  (*) For comparisons, k specifies what condition the test should accept
N  (true or false).
N
N  (*) All 'skips' (pc++) assume that next instruction is a jump.
N
N  (*) In instructions OP_RETURN/OP_TAILCALL, 'k' specifies that the
N  function either builds upvalues, which may need to be closed, or is
N  vararg, which must be corrected before returning. When 'k' is true,
N  C > 0 means the function is vararg and (C - 1) is its number of
N  fixed parameters.
N
N===========================================================================*/
N
N
N/*
N** masks for instruction properties. The format is:
N** bits 0-2: op mode
N** bit 3: instruction set register A
N** bit 4: operator is a test (next instruction must be a jump)
N** bit 5: instruction uses 'L->top' set by previous instruction (when B == 0)
N** bit 6: instruction sets 'L->top' for next instruction (when C == 0)
N*/
N
NLUAI_DDEC const lu_byte luaP_opmodes[NUM_OPCODES];
Xextern const lu_byte luaP_opmodes[(((int)((OP_EXTRAARG))) + 1)];
N
N#define getOpMode(m)	(cast(enum OpMode, luaP_opmodes[m] & 7))
N#define testAMode(m)	(luaP_opmodes[m] & (1 << 3))
N#define testTMode(m)	(luaP_opmodes[m] & (1 << 4))
N#define testITMode(m)	(luaP_opmodes[m] & (1 << 5))
N#define testOTMode(m)	(luaP_opmodes[m] & (1 << 6))
N
N/* "out top" (set top for next instruction) */
N#define isOT(i)  \
N	((testOTMode(GET_OPCODE(i)) && GETARG_C(i) == 0) || \
N          GET_OPCODE(i) == OP_TAILCALL)
X#define isOT(i)  	((testOTMode(GET_OPCODE(i)) && GETARG_C(i) == 0) ||           GET_OPCODE(i) == OP_TAILCALL)
N
N/* "in top" (uses top from previous instruction) */
N#define isIT(i)		(testITMode(GET_OPCODE(i)) && GETARG_B(i) == 0)
N
N#define opmode(ot,it,t,a,m) (((ot)<<6) | ((it)<<5) | ((t)<<4) | ((a)<<3) | (m))
N
N
NLUAI_DDEC const char *const luaP_opnames[NUM_OPCODES+1];  /* opcode names */
Xextern const char *const luaP_opnames[(((int)((OP_EXTRAARG))) + 1)+1];   
N
N
N/* number of list items to accumulate before a SETLIST instruction */
N#define LFIELDS_PER_FLUSH	50
N
N
N#endif
L 16 "..\..\..\M6P1(L)_Lua\lua\lopcodes.c" 2
N
N
N/* ORDER OP */
N
NLUAI_DDEF const char *const luaP_opnames[NUM_OPCODES+1] = {
X const char *const luaP_opnames[(((int)((OP_EXTRAARG))) + 1)+1] = {
N  "MOVE",
N  "LOADI",
N  "LOADF",
N  "LOADK",
N  "LOADKX",
N  "LOADBOOL",
N  "LOADNIL",
N  "GETUPVAL",
N  "SETUPVAL",
N  "GETTABUP",
N  "GETTABLE",
N  "GETI",
N  "GETFIELD",
N  "SETTABUP",
N  "SETTABLE",
N  "SETI",
N  "SETFIELD",
N  "NEWTABLE",
N  "SELF",
N  "ADDI",
N  "SUBI",
N  "MULI",
N  "MODI",
N  "POWI",
N  "DIVI",
N  "IDIVI",
N  "BANDK",
N  "BORK",
N  "BXORK",
N  "SHRI",
N  "SHLI",
N  "ADD",
N  "SUB",
N  "MUL",
N  "MOD",
N  "POW",
N  "DIV",
N  "IDIV",
N  "BAND",
N  "BOR",
N  "BXOR",
N  "SHL",
N  "SHR",
N  "UNM",
N  "BNOT",
N  "NOT",
N  "LEN",
N  "CONCAT",
N  "CLOSE",
N  "JMP",
N  "EQ",
N  "LT",
N  "LE",
N  "EQK",
N  "EQI",
N  "LTI",
N  "LEI",
N  "GTI",
N  "GEI",
N  "TEST",
N  "TESTSET",
N  "UNDEF",
N  "ISDEF",
N  "CALL",
N  "TAILCALL",
N  "RETURN",
N  "RETURN0",
N  "RETURN1",
N  "FORLOOP1",
N  "FORPREP1",
N  "FORLOOP",
N  "FORPREP",
N  "TFORCALL",
N  "TFORLOOP",
N  "SETLIST",
N  "CLOSURE",
N  "VARARG",
N  "PREPVARARG",
N  "EXTRAARG",
N  NULL
X  0
N};
N
N
NLUAI_DDEF const lu_byte luaP_opmodes[NUM_OPCODES] = {
X const lu_byte luaP_opmodes[(((int)((OP_EXTRAARG))) + 1)] = {
N/*       OT IT T  A  mode		   opcode  */
N  opmode(0, 0, 0, 1, iABC)		/* OP_MOVE */
X  (((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iAsBx)		/* OP_LOADI */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iAsBx))		 
N ,opmode(0, 0, 0, 1, iAsBx)		/* OP_LOADF */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iAsBx))		 
N ,opmode(0, 0, 0, 1, iABx)		/* OP_LOADK */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABx))		 
N ,opmode(0, 0, 0, 1, iABx)		/* OP_LOADKX */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABx))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_LOADBOOL */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_LOADNIL */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_GETUPVAL */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 0, iABC)		/* OP_SETUPVAL */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_GETTABUP */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_GETTABLE */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_GETI */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_GETFIELD */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 0, iABC)		/* OP_SETTABUP */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 0, iABC)		/* OP_SETTABLE */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 0, iABC)		/* OP_SETI */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 0, iABC)		/* OP_SETFIELD */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_NEWTABLE */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_SELF */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_ADDI */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_SUBI */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_MULI */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_MODI */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_POWI */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_DIVI */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_IDIVI */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_BANDK */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_BORK */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_BXORK */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_SHRI */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_SHLI */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_ADD */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_SUB */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_MUL */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_MOD */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_POW */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_DIV */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_IDIV */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_BAND */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_BOR */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_BXOR */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_SHL */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_SHR */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_UNM */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_BNOT */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_NOT */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_LEN */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_CONCAT */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 0, iABC)		/* OP_CLOSE */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 0, isJ)		/* OP_JMP */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((0)<<3) | (isJ))		 
N ,opmode(0, 0, 1, 0, iABC)		/* OP_EQ */
X ,(((0)<<6) | ((0)<<5) | ((1)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 1, 0, iABC)		/* OP_LT */
X ,(((0)<<6) | ((0)<<5) | ((1)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 1, 0, iABC)		/* OP_LE */
X ,(((0)<<6) | ((0)<<5) | ((1)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 1, 0, iABC)		/* OP_EQK */
X ,(((0)<<6) | ((0)<<5) | ((1)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 1, 0, iABC)		/* OP_EQI */
X ,(((0)<<6) | ((0)<<5) | ((1)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 1, 0, iABC)		/* OP_LTI */
X ,(((0)<<6) | ((0)<<5) | ((1)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 1, 0, iABC)		/* OP_LEI */
X ,(((0)<<6) | ((0)<<5) | ((1)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 1, 0, iABC)		/* OP_GTI */
X ,(((0)<<6) | ((0)<<5) | ((1)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 1, 0, iABC)		/* OP_GEI */
X ,(((0)<<6) | ((0)<<5) | ((1)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 1, 0, iABC)		/* OP_TEST */
X ,(((0)<<6) | ((0)<<5) | ((1)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 1, 1, iABC)		/* OP_TESTSET */
X ,(((0)<<6) | ((0)<<5) | ((1)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 0, iABC)		/* OP_UNDEF */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_ISDEF */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(1, 1, 0, 1, iABC)		/* OP_CALL */
X ,(((1)<<6) | ((1)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(1, 1, 0, 1, iABC)		/* OP_TAILCALL */
X ,(((1)<<6) | ((1)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 1, 0, 0, iABC)		/* OP_RETURN */
X ,(((0)<<6) | ((1)<<5) | ((0)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 0, iABC)		/* OP_RETURN0 */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 0, iABC)		/* OP_RETURN1 */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABx)		/* OP_FORLOOP1 */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABx))		 
N ,opmode(0, 0, 0, 1, iABx)		/* OP_FORPREP1 */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABx))		 
N ,opmode(0, 0, 0, 1, iABx)		/* OP_FORLOOP */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABx))		 
N ,opmode(0, 0, 0, 1, iABx)		/* OP_FORPREP */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABx))		 
N ,opmode(0, 0, 0, 0, iABC)		/* OP_TFORCALL */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABx)		/* OP_TFORLOOP */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABx))		 
N ,opmode(0, 1, 0, 0, iABC)		/* OP_SETLIST */
X ,(((0)<<6) | ((1)<<5) | ((0)<<4) | ((0)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABx)		/* OP_CLOSURE */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABx))		 
N ,opmode(1, 0, 0, 1, iABC)		/* OP_VARARG */
X ,(((1)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 1, iABC)		/* OP_PREPVARARG */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((1)<<3) | (iABC))		 
N ,opmode(0, 0, 0, 0, iAx)		/* OP_EXTRAARG */
X ,(((0)<<6) | ((0)<<5) | ((0)<<4) | ((0)<<3) | (iAx))		 
N};
N
