; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f7xx_hal_tim_ex.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f7xx_hal_tim_ex.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f7xx_hal_tim_ex.crf ..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_tim_ex.c]
                          THUMB

                          AREA ||i.HAL_TIMEx_BreakCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_BreakCallback PROC
;;;1990     */
;;;1991   __weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1992   {
;;;1993     /* Prevent unused argument(s) compilation warning */
;;;1994     UNUSED(htim);
;;;1995    
;;;1996     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1997               the HAL_TIMEx_BreakCallback could be implemented in the user file
;;;1998      */
;;;1999   }
;;;2000   
                          ENDP


                          AREA ||i.HAL_TIMEx_CommutationCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_CommutationCallback PROC
;;;1974     */
;;;1975   __weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1976   {
;;;1977     /* Prevent unused argument(s) compilation warning */
;;;1978     UNUSED(htim);
;;;1979    
;;;1980     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1981               the HAL_TIMEx_CommutationCallback could be implemented in the user file
;;;1982      */
;;;1983   }
;;;1984   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigBreakDeadTime||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_ConfigBreakDeadTime PROC
;;;1713     */ 
;;;1714   HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
000000  b510              PUSH     {r4,lr}
;;;1715                                                 TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
;;;1716   {
000002  4603              MOV      r3,r0
;;;1717     uint32_t tmpbdtr = 0;
000004  2200              MOVS     r2,#0
;;;1718     
;;;1719     /* Check the parameters */
;;;1720     assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
;;;1721     assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
;;;1722     assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
;;;1723     assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
;;;1724     assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
;;;1725     assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
;;;1726     assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
;;;1727     assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
;;;1728     assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
;;;1729     assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
;;;1730     assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
;;;1731     assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
;;;1732     
;;;1733     /* Check input state */
;;;1734     __HAL_LOCK(htim);
000006  bf00              NOP      
000008  6bd8              LDR      r0,[r3,#0x3c]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L3.18|
00000e  2002              MOVS     r0,#2
                  |L3.16|
;;;1735   
;;;1736     /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
;;;1737        the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;1738     /* Set the BDTR bits */
;;;1739     MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
;;;1740     MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
;;;1741     MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
;;;1742     MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
;;;1743     MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
;;;1744     MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
;;;1745     MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
;;;1746     MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
;;;1747     MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
;;;1748     
;;;1749     if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
;;;1750     {
;;;1751       assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
;;;1752       assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
;;;1753       assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
;;;1754       
;;;1755       /* Set the BREAK2 input related BDTR bits */
;;;1756       MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
;;;1757       MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
;;;1758       MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
;;;1759     }
;;;1760     
;;;1761   
;;;1762     
;;;1763     /* Set TIMx_BDTR */
;;;1764     htim->Instance->BDTR = tmpbdtr;
;;;1765     
;;;1766     __HAL_UNLOCK(htim);
;;;1767     
;;;1768     return HAL_OK;
;;;1769   }
000010  bd10              POP      {r4,pc}
                  |L3.18|
000012  2001              MOVS     r0,#1                 ;1734
000014  63d8              STR      r0,[r3,#0x3c]         ;1734
000016  bf00              NOP                            ;1734
000018  f02200ff          BIC      r0,r2,#0xff           ;1739
00001c  68cc              LDR      r4,[r1,#0xc]          ;1739
00001e  ea400204          ORR      r2,r0,r4              ;1739
000022  f4227040          BIC      r0,r2,#0x300          ;1740
000026  688c              LDR      r4,[r1,#8]            ;1740
000028  ea400204          ORR      r2,r0,r4              ;1740
00002c  f4226080          BIC      r0,r2,#0x400          ;1741
000030  684c              LDR      r4,[r1,#4]            ;1741
000032  ea400204          ORR      r2,r0,r4              ;1741
000036  f4226000          BIC      r0,r2,#0x800          ;1742
00003a  680c              LDR      r4,[r1,#0]            ;1742
00003c  ea400204          ORR      r2,r0,r4              ;1742
000040  f4225080          BIC      r0,r2,#0x1000         ;1743
000044  690c              LDR      r4,[r1,#0x10]         ;1743
000046  ea400204          ORR      r2,r0,r4              ;1743
00004a  f4225000          BIC      r0,r2,#0x2000         ;1744
00004e  694c              LDR      r4,[r1,#0x14]         ;1744
000050  ea400204          ORR      r2,r0,r4              ;1744
000054  f4224080          BIC      r0,r2,#0x4000         ;1745
000058  6a8c              LDR      r4,[r1,#0x28]         ;1745
00005a  ea400204          ORR      r2,r0,r4              ;1745
00005e  f4224000          BIC      r0,r2,#0x8000         ;1746
000062  6a8c              LDR      r4,[r1,#0x28]         ;1746
000064  ea400204          ORR      r2,r0,r4              ;1746
000068  f4222070          BIC      r0,r2,#0xf0000        ;1747
00006c  8b0c              LDRH     r4,[r1,#0x18]         ;1747
00006e  ea404204          ORR      r2,r0,r4,LSL #16      ;1747
000072  4c0f              LDR      r4,|L3.176|
000074  6818              LDR      r0,[r3,#0]            ;1749
000076  42a0              CMP      r0,r4                 ;1749
000078  d003              BEQ      |L3.130|
00007a  4c0e              LDR      r4,|L3.180|
00007c  6818              LDR      r0,[r3,#0]            ;1749
00007e  42a0              CMP      r0,r4                 ;1749
000080  d10e              BNE      |L3.160|
                  |L3.130|
000082  f4220070          BIC      r0,r2,#0xf00000       ;1756
000086  8c8c              LDRH     r4,[r1,#0x24]         ;1756
000088  ea405204          ORR      r2,r0,r4,LSL #20      ;1756
00008c  f0227080          BIC      r0,r2,#0x1000000      ;1757
000090  69cc              LDR      r4,[r1,#0x1c]         ;1757
000092  ea400204          ORR      r2,r0,r4              ;1757
000096  f0227000          BIC      r0,r2,#0x2000000      ;1758
00009a  6a0c              LDR      r4,[r1,#0x20]         ;1758
00009c  ea400204          ORR      r2,r0,r4              ;1758
                  |L3.160|
0000a0  6818              LDR      r0,[r3,#0]            ;1764
0000a2  6442              STR      r2,[r0,#0x44]         ;1764
0000a4  bf00              NOP                            ;1766
0000a6  2000              MOVS     r0,#0                 ;1766
0000a8  63d8              STR      r0,[r3,#0x3c]         ;1766
0000aa  bf00              NOP                            ;1766
0000ac  bf00              NOP                            ;1768
0000ae  e7af              B        |L3.16|
;;;1770   #if defined (STM32F765xx) || defined(STM32F767xx) || defined(STM32F769xx) || defined(STM32F777xx) || defined(STM32F779xx)
                          ENDP

                  |L3.176|
                          DCD      0x40010000
                  |L3.180|
                          DCD      0x40010400

                          AREA ||i.HAL_TIMEx_ConfigBreakInput||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigBreakInput PROC
;;;1780     */
;;;1781   HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
000000  b5f0              PUSH     {r4-r7,lr}
;;;1782                                                uint32_t BreakInput,
;;;1783                                                TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
;;;1784   
;;;1785   {
000002  4603              MOV      r3,r0
000004  460e              MOV      r6,r1
;;;1786     uint32_t tmporx = 0;
000006  2100              MOVS     r1,#0
;;;1787     uint32_t bkin_enable_mask = 0;
000008  2400              MOVS     r4,#0
;;;1788     uint32_t bkin_polarity_mask = 0;
00000a  2500              MOVS     r5,#0
;;;1789     uint32_t bkin_enable_bitpos = 0;
00000c  2700              MOVS     r7,#0
;;;1790     uint32_t bkin_polarity_bitpos = 0;
00000e  468c              MOV      r12,r1
;;;1791   
;;;1792     /* Check the parameters */
;;;1793     assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
;;;1794     assert_param(IS_TIM_BREAKINPUT(BreakInput));
;;;1795     assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
;;;1796     assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
;;;1797     if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
000010  6810              LDR      r0,[r2,#0]
000012  2808              CMP      r0,#8
000014  d000              BEQ      |L4.24|
;;;1798     {
;;;1799       assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
000016  bf00              NOP      
                  |L4.24|
;;;1800     }
;;;1801   
;;;1802     /* Check input state */
;;;1803     __HAL_LOCK(htim);
000018  bf00              NOP      
00001a  6bd8              LDR      r0,[r3,#0x3c]
00001c  2801              CMP      r0,#1
00001e  d101              BNE      |L4.36|
000020  2002              MOVS     r0,#2
                  |L4.34|
;;;1804     
;;;1805     switch(sBreakInputConfig->Source)
;;;1806     {
;;;1807     case TIM_BREAKINPUTSOURCE_BKIN:
;;;1808       {
;;;1809         bkin_enable_mask = TIM1_AF1_BKINE;
;;;1810         bkin_enable_bitpos = 0;
;;;1811         bkin_polarity_mask = TIM1_AF1_BKINP;
;;;1812         bkin_polarity_bitpos = 9;
;;;1813       }
;;;1814       break;
;;;1815     
;;;1816     case TIM_BREAKINPUTSOURCE_DFSDM1:
;;;1817       {
;;;1818         bkin_enable_mask = TIM1_AF1_BKDF1BKE;
;;;1819         bkin_enable_bitpos = 8;
;;;1820       }
;;;1821       break;    
;;;1822   
;;;1823     default:
;;;1824       break;
;;;1825     }
;;;1826     
;;;1827     switch(BreakInput)
;;;1828     {
;;;1829       case TIM_BREAKINPUT_BRK:
;;;1830         {
;;;1831           /* Get the TIMx_AF1 register value */
;;;1832           tmporx = htim->Instance->AF1;
;;;1833           
;;;1834           /* Enable the break input */
;;;1835           tmporx &= ~bkin_enable_mask;
;;;1836           tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
;;;1837           
;;;1838           if(sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
;;;1839           {
;;;1840             tmporx &= ~bkin_polarity_mask;
;;;1841             tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
;;;1842           }
;;;1843           /* Set TIMx_AF1 */
;;;1844           htim->Instance->AF1 = tmporx;        
;;;1845         }
;;;1846           break;
;;;1847       case TIM_BREAKINPUT_BRK2:
;;;1848         {
;;;1849           /* Get the TIMx_AF2 register value */
;;;1850           tmporx = htim->Instance->AF2;
;;;1851   
;;;1852           /* Enable the break input */
;;;1853           tmporx &= ~bkin_enable_mask;
;;;1854           tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
;;;1855   
;;;1856           if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
;;;1857           {
;;;1858             tmporx &= ~bkin_polarity_mask;
;;;1859             tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
;;;1860           }
;;;1861   
;;;1862           /* Set TIMx_AF2 */
;;;1863           htim->Instance->AF2 = tmporx;        
;;;1864         }
;;;1865         break;    
;;;1866     default:
;;;1867       break;
;;;1868     }
;;;1869     
;;;1870     __HAL_UNLOCK(htim);
;;;1871   
;;;1872     return HAL_OK;
;;;1873   }
000022  bdf0              POP      {r4-r7,pc}
                  |L4.36|
000024  2001              MOVS     r0,#1                 ;1803
000026  63d8              STR      r0,[r3,#0x3c]         ;1803
000028  bf00              NOP                            ;1803
00002a  6810              LDR      r0,[r2,#0]            ;1805
00002c  2801              CMP      r0,#1                 ;1805
00002e  d002              BEQ      |L4.54|
000030  2808              CMP      r0,#8                 ;1805
000032  d10a              BNE      |L4.74|
000034  e005              B        |L4.66|
                  |L4.54|
000036  2401              MOVS     r4,#1                 ;1809
000038  2700              MOVS     r7,#0                 ;1810
00003a  0265              LSLS     r5,r4,#9              ;1811
00003c  f04f0c09          MOV      r12,#9                ;1812
000040  e004              B        |L4.76|
                  |L4.66|
000042  f44f7480          MOV      r4,#0x100             ;1818
000046  2708              MOVS     r7,#8                 ;1819
000048  e000              B        |L4.76|
                  |L4.74|
00004a  bf00              NOP                            ;1824
                  |L4.76|
00004c  bf00              NOP                            ;1814
00004e  2e01              CMP      r6,#1                 ;1827
000050  d002              BEQ      |L4.88|
000052  2e02              CMP      r6,#2                 ;1827
000054  d126              BNE      |L4.164|
000056  e012              B        |L4.126|
                  |L4.88|
000058  6818              LDR      r0,[r3,#0]            ;1832
00005a  6e01              LDR      r1,[r0,#0x60]         ;1832
00005c  43a1              BICS     r1,r1,r4              ;1835
00005e  6850              LDR      r0,[r2,#4]            ;1836
000060  40b8              LSLS     r0,r0,r7              ;1836
000062  4020              ANDS     r0,r0,r4              ;1836
000064  4301              ORRS     r1,r1,r0              ;1836
000066  6810              LDR      r0,[r2,#0]            ;1838
000068  2808              CMP      r0,#8                 ;1838
00006a  d005              BEQ      |L4.120|
00006c  43a9              BICS     r1,r1,r5              ;1840
00006e  6890              LDR      r0,[r2,#8]            ;1841
000070  fa00f00c          LSL      r0,r0,r12             ;1841
000074  4028              ANDS     r0,r0,r5              ;1841
000076  4301              ORRS     r1,r1,r0              ;1841
                  |L4.120|
000078  6818              LDR      r0,[r3,#0]            ;1844
00007a  6601              STR      r1,[r0,#0x60]         ;1844
00007c  e013              B        |L4.166|
                  |L4.126|
00007e  6818              LDR      r0,[r3,#0]            ;1850
000080  6e41              LDR      r1,[r0,#0x64]         ;1850
000082  43a1              BICS     r1,r1,r4              ;1853
000084  6850              LDR      r0,[r2,#4]            ;1854
000086  40b8              LSLS     r0,r0,r7              ;1854
000088  4020              ANDS     r0,r0,r4              ;1854
00008a  4301              ORRS     r1,r1,r0              ;1854
00008c  6810              LDR      r0,[r2,#0]            ;1856
00008e  2808              CMP      r0,#8                 ;1856
000090  d005              BEQ      |L4.158|
000092  43a9              BICS     r1,r1,r5              ;1858
000094  6890              LDR      r0,[r2,#8]            ;1859
000096  fa00f00c          LSL      r0,r0,r12             ;1859
00009a  4028              ANDS     r0,r0,r5              ;1859
00009c  4301              ORRS     r1,r1,r0              ;1859
                  |L4.158|
00009e  6818              LDR      r0,[r3,#0]            ;1863
0000a0  6641              STR      r1,[r0,#0x64]         ;1863
0000a2  e000              B        |L4.166|
                  |L4.164|
0000a4  bf00              NOP                            ;1867
                  |L4.166|
0000a6  bf00              NOP                            ;1846
0000a8  bf00              NOP                            ;1870
0000aa  2000              MOVS     r0,#0                 ;1870
0000ac  63d8              STR      r0,[r3,#0x3c]         ;1870
0000ae  bf00              NOP                            ;1870
0000b0  bf00              NOP                            ;1872
0000b2  e7b6              B        |L4.34|
;;;1874   #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutationEvent PROC
;;;1503     */
;;;1504   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  b510              PUSH     {r4,lr}
;;;1505   {
000002  4603              MOV      r3,r0
;;;1506     /* Check the parameters */
;;;1507     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1508     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1509     
;;;1510     __HAL_LOCK(htim);
000004  bf00              NOP      
000006  6bd8              LDR      r0,[r3,#0x3c]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L5.16|
00000c  2002              MOVS     r0,#2
                  |L5.14|
;;;1511     
;;;1512     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1513         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1514     {    
;;;1515       /* Select the Input trigger */
;;;1516       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1517       htim->Instance->SMCR |= InputTrigger;
;;;1518     }
;;;1519       
;;;1520     /* Select the Capture Compare preload feature */
;;;1521     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1522     /* Select the Commutation event source */
;;;1523     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1524     htim->Instance->CR2 |= CommutationSource;
;;;1525       
;;;1526     __HAL_UNLOCK(htim);
;;;1527     
;;;1528     return HAL_OK;
;;;1529   }
00000e  bd10              POP      {r4,pc}
                  |L5.16|
000010  2001              MOVS     r0,#1                 ;1510
000012  63d8              STR      r0,[r3,#0x3c]         ;1510
000014  bf00              NOP                            ;1510
000016  b129              CBZ      r1,|L5.36|
000018  2910              CMP      r1,#0x10              ;1512
00001a  d003              BEQ      |L5.36|
00001c  2920              CMP      r1,#0x20              ;1513
00001e  d001              BEQ      |L5.36|
000020  2930              CMP      r1,#0x30              ;1513
000022  d10a              BNE      |L5.58|
                  |L5.36|
000024  6818              LDR      r0,[r3,#0]            ;1516
000026  6880              LDR      r0,[r0,#8]            ;1516
000028  f0200070          BIC      r0,r0,#0x70           ;1516
00002c  681c              LDR      r4,[r3,#0]            ;1516
00002e  60a0              STR      r0,[r4,#8]            ;1516
000030  6818              LDR      r0,[r3,#0]            ;1517
000032  6880              LDR      r0,[r0,#8]            ;1517
000034  4308              ORRS     r0,r0,r1              ;1517
000036  681c              LDR      r4,[r3,#0]            ;1517
000038  60a0              STR      r0,[r4,#8]            ;1517
                  |L5.58|
00003a  6818              LDR      r0,[r3,#0]            ;1521
00003c  6840              LDR      r0,[r0,#4]            ;1521
00003e  f0400001          ORR      r0,r0,#1              ;1521
000042  681c              LDR      r4,[r3,#0]            ;1521
000044  6060              STR      r0,[r4,#4]            ;1521
000046  6818              LDR      r0,[r3,#0]            ;1523
000048  6840              LDR      r0,[r0,#4]            ;1523
00004a  f0200004          BIC      r0,r0,#4              ;1523
00004e  681c              LDR      r4,[r3,#0]            ;1523
000050  6060              STR      r0,[r4,#4]            ;1523
000052  6818              LDR      r0,[r3,#0]            ;1524
000054  6840              LDR      r0,[r0,#4]            ;1524
000056  4310              ORRS     r0,r0,r2              ;1524
000058  681c              LDR      r4,[r3,#0]            ;1524
00005a  6060              STR      r0,[r4,#4]            ;1524
00005c  bf00              NOP                            ;1526
00005e  2000              MOVS     r0,#0                 ;1526
000060  63d8              STR      r0,[r3,#0x3c]         ;1526
000062  bf00              NOP                            ;1526
000064  bf00              NOP                            ;1528
000066  e7d2              B        |L5.14|
;;;1530   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_ConfigCommutationEvent_DMA PROC
;;;1607     */
;;;1608   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  b510              PUSH     {r4,lr}
;;;1609   {
000002  4603              MOV      r3,r0
;;;1610     /* Check the parameters */
;;;1611     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1612     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1613     
;;;1614     __HAL_LOCK(htim);
000004  bf00              NOP      
000006  6bd8              LDR      r0,[r3,#0x3c]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L6.16|
00000c  2002              MOVS     r0,#2
                  |L6.14|
;;;1615     
;;;1616     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1617         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1618     {    
;;;1619       /* Select the Input trigger */
;;;1620       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1621       htim->Instance->SMCR |= InputTrigger;
;;;1622     }
;;;1623     
;;;1624     /* Select the Capture Compare preload feature */
;;;1625     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1626     /* Select the Commutation event source */
;;;1627     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1628     htim->Instance->CR2 |= CommutationSource;
;;;1629     
;;;1630     /* Enable the Commutation DMA Request */
;;;1631     /* Set the DMA Commutation Callback */
;;;1632     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = HAL_TIMEx_DMACommutationCplt;     
;;;1633     /* Set the DMA error callback */
;;;1634     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = HAL_TIM_DMAError;
;;;1635     
;;;1636     /* Enable the Commutation DMA Request */
;;;1637     __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
;;;1638   
;;;1639     __HAL_UNLOCK(htim);
;;;1640     
;;;1641     return HAL_OK;
;;;1642   }  
00000e  bd10              POP      {r4,pc}
                  |L6.16|
000010  2001              MOVS     r0,#1                 ;1614
000012  63d8              STR      r0,[r3,#0x3c]         ;1614
000014  bf00              NOP                            ;1614
000016  b129              CBZ      r1,|L6.36|
000018  2910              CMP      r1,#0x10              ;1616
00001a  d003              BEQ      |L6.36|
00001c  2920              CMP      r1,#0x20              ;1617
00001e  d001              BEQ      |L6.36|
000020  2930              CMP      r1,#0x30              ;1617
000022  d10a              BNE      |L6.58|
                  |L6.36|
000024  6818              LDR      r0,[r3,#0]            ;1620
000026  6880              LDR      r0,[r0,#8]            ;1620
000028  f0200070          BIC      r0,r0,#0x70           ;1620
00002c  681c              LDR      r4,[r3,#0]            ;1620
00002e  60a0              STR      r0,[r4,#8]            ;1620
000030  6818              LDR      r0,[r3,#0]            ;1621
000032  6880              LDR      r0,[r0,#8]            ;1621
000034  4308              ORRS     r0,r0,r1              ;1621
000036  681c              LDR      r4,[r3,#0]            ;1621
000038  60a0              STR      r0,[r4,#8]            ;1621
                  |L6.58|
00003a  6818              LDR      r0,[r3,#0]            ;1625
00003c  6840              LDR      r0,[r0,#4]            ;1625
00003e  f0400001          ORR      r0,r0,#1              ;1625
000042  681c              LDR      r4,[r3,#0]            ;1625
000044  6060              STR      r0,[r4,#4]            ;1625
000046  6818              LDR      r0,[r3,#0]            ;1627
000048  6840              LDR      r0,[r0,#4]            ;1627
00004a  f0200004          BIC      r0,r0,#4              ;1627
00004e  681c              LDR      r4,[r3,#0]            ;1627
000050  6060              STR      r0,[r4,#4]            ;1627
000052  6818              LDR      r0,[r3,#0]            ;1628
000054  6840              LDR      r0,[r0,#4]            ;1628
000056  4310              ORRS     r0,r0,r2              ;1628
000058  681c              LDR      r4,[r3,#0]            ;1628
00005a  6060              STR      r0,[r4,#4]            ;1628
00005c  4c08              LDR      r4,|L6.128|
00005e  6b58              LDR      r0,[r3,#0x34]         ;1632
000060  6404              STR      r4,[r0,#0x40]         ;1632
000062  4c08              LDR      r4,|L6.132|
000064  6b58              LDR      r0,[r3,#0x34]         ;1634
000066  6504              STR      r4,[r0,#0x50]         ;1634
000068  6818              LDR      r0,[r3,#0]            ;1637
00006a  68c0              LDR      r0,[r0,#0xc]          ;1637
00006c  f4405000          ORR      r0,r0,#0x2000         ;1637
000070  681c              LDR      r4,[r3,#0]            ;1637
000072  60e0              STR      r0,[r4,#0xc]          ;1637
000074  bf00              NOP                            ;1639
000076  2000              MOVS     r0,#0                 ;1639
000078  63d8              STR      r0,[r3,#0x3c]         ;1639
00007a  bf00              NOP                            ;1639
00007c  bf00              NOP                            ;1641
00007e  e7c6              B        |L6.14|
;;;1643   
                          ENDP

                  |L6.128|
                          DCD      TIMEx_DMACommutationCplt
                  |L6.132|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutationEvent_IT PROC
;;;1553     */
;;;1554   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  b510              PUSH     {r4,lr}
;;;1555   {
000002  4603              MOV      r3,r0
;;;1556     /* Check the parameters */
;;;1557     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1558     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1559     
;;;1560     __HAL_LOCK(htim);
000004  bf00              NOP      
000006  6bd8              LDR      r0,[r3,#0x3c]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L7.16|
00000c  2002              MOVS     r0,#2
                  |L7.14|
;;;1561     
;;;1562     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1563         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1564     {    
;;;1565       /* Select the Input trigger */
;;;1566       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1567       htim->Instance->SMCR |= InputTrigger;
;;;1568     }
;;;1569     
;;;1570     /* Select the Capture Compare preload feature */
;;;1571     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1572     /* Select the Commutation event source */
;;;1573     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1574     htim->Instance->CR2 |= CommutationSource;
;;;1575       
;;;1576     /* Enable the Commutation Interrupt Request */
;;;1577     __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
;;;1578   
;;;1579     __HAL_UNLOCK(htim);
;;;1580     
;;;1581     return HAL_OK;
;;;1582   }
00000e  bd10              POP      {r4,pc}
                  |L7.16|
000010  2001              MOVS     r0,#1                 ;1560
000012  63d8              STR      r0,[r3,#0x3c]         ;1560
000014  bf00              NOP                            ;1560
000016  b129              CBZ      r1,|L7.36|
000018  2910              CMP      r1,#0x10              ;1562
00001a  d003              BEQ      |L7.36|
00001c  2920              CMP      r1,#0x20              ;1563
00001e  d001              BEQ      |L7.36|
000020  2930              CMP      r1,#0x30              ;1563
000022  d10a              BNE      |L7.58|
                  |L7.36|
000024  6818              LDR      r0,[r3,#0]            ;1566
000026  6880              LDR      r0,[r0,#8]            ;1566
000028  f0200070          BIC      r0,r0,#0x70           ;1566
00002c  681c              LDR      r4,[r3,#0]            ;1566
00002e  60a0              STR      r0,[r4,#8]            ;1566
000030  6818              LDR      r0,[r3,#0]            ;1567
000032  6880              LDR      r0,[r0,#8]            ;1567
000034  4308              ORRS     r0,r0,r1              ;1567
000036  681c              LDR      r4,[r3,#0]            ;1567
000038  60a0              STR      r0,[r4,#8]            ;1567
                  |L7.58|
00003a  6818              LDR      r0,[r3,#0]            ;1571
00003c  6840              LDR      r0,[r0,#4]            ;1571
00003e  f0400001          ORR      r0,r0,#1              ;1571
000042  681c              LDR      r4,[r3,#0]            ;1571
000044  6060              STR      r0,[r4,#4]            ;1571
000046  6818              LDR      r0,[r3,#0]            ;1573
000048  6840              LDR      r0,[r0,#4]            ;1573
00004a  f0200004          BIC      r0,r0,#4              ;1573
00004e  681c              LDR      r4,[r3,#0]            ;1573
000050  6060              STR      r0,[r4,#4]            ;1573
000052  6818              LDR      r0,[r3,#0]            ;1574
000054  6840              LDR      r0,[r0,#4]            ;1574
000056  4310              ORRS     r0,r0,r2              ;1574
000058  681c              LDR      r4,[r3,#0]            ;1574
00005a  6060              STR      r0,[r4,#4]            ;1574
00005c  6818              LDR      r0,[r3,#0]            ;1577
00005e  68c0              LDR      r0,[r0,#0xc]          ;1577
000060  f0400020          ORR      r0,r0,#0x20           ;1577
000064  681c              LDR      r4,[r3,#0]            ;1577
000066  60e0              STR      r0,[r4,#0xc]          ;1577
000068  bf00              NOP                            ;1579
00006a  2000              MOVS     r0,#0                 ;1579
00006c  63d8              STR      r0,[r3,#0x3c]         ;1579
00006e  bf00              NOP                            ;1579
000070  bf00              NOP                            ;1581
000072  e7cc              B        |L7.14|
;;;1583   
                          ENDP


                          AREA ||i.HAL_TIMEx_GroupChannel5||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_GroupChannel5 PROC
;;;1925     */
;;;1926   HAL_StatusTypeDef HAL_TIMEx_GroupChannel5(TIM_HandleTypeDef *htim, uint32_t OCRef)
000000  4602              MOV      r2,r0
;;;1927   {
;;;1928     /* Check parameters */
;;;1929     assert_param(IS_TIM_COMBINED3PHASEPWM_INSTANCE(htim->Instance));
;;;1930     assert_param(IS_TIM_GROUPCH5(OCRef));
;;;1931   
;;;1932     /* Process Locked */
;;;1933     __HAL_LOCK(htim);
000002  bf00              NOP      
000004  6bd0              LDR      r0,[r2,#0x3c]
000006  2801              CMP      r0,#1
000008  d101              BNE      |L8.14|
00000a  2002              MOVS     r0,#2
                  |L8.12|
;;;1934     
;;;1935     htim->State = HAL_TIM_STATE_BUSY;
;;;1936     
;;;1937     /* Clear GC5Cx bit fields */
;;;1938     htim->Instance->CCR5 &= ~(TIM_CCR5_GC5C3|TIM_CCR5_GC5C2|TIM_CCR5_GC5C1);
;;;1939     
;;;1940     /* Set GC5Cx bit fields */
;;;1941     htim->Instance->CCR5 |= OCRef;
;;;1942                                      
;;;1943     htim->State = HAL_TIM_STATE_READY;                                 
;;;1944     
;;;1945     __HAL_UNLOCK(htim);
;;;1946     
;;;1947     return HAL_OK;
;;;1948   }
00000c  4770              BX       lr
                  |L8.14|
00000e  2001              MOVS     r0,#1                 ;1933
000010  63d0              STR      r0,[r2,#0x3c]         ;1933
000012  bf00              NOP                            ;1933
000014  2002              MOVS     r0,#2                 ;1935
000016  6410              STR      r0,[r2,#0x40]         ;1935
000018  6810              LDR      r0,[r2,#0]            ;1938
00001a  6d80              LDR      r0,[r0,#0x58]         ;1938
00001c  f0204060          BIC      r0,r0,#0xe0000000     ;1938
000020  6813              LDR      r3,[r2,#0]            ;1938
000022  6598              STR      r0,[r3,#0x58]         ;1938
000024  6810              LDR      r0,[r2,#0]            ;1941
000026  6d80              LDR      r0,[r0,#0x58]         ;1941
000028  4308              ORRS     r0,r0,r1              ;1941
00002a  6813              LDR      r3,[r2,#0]            ;1941
00002c  6598              STR      r0,[r3,#0x58]         ;1941
00002e  2001              MOVS     r0,#1                 ;1943
000030  6410              STR      r0,[r2,#0x40]         ;1943
000032  bf00              NOP                            ;1945
000034  2000              MOVS     r0,#0                 ;1945
000036  63d0              STR      r0,[r2,#0x3c]         ;1945
000038  bf00              NOP                            ;1945
00003a  bf00              NOP                            ;1947
00003c  e7e6              B        |L8.12|
;;;1949   /**
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_DeInit PROC
;;;255      */
;;;256    HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;257    {
000002  4604              MOV      r4,r0
;;;258      /* Check the parameters */
;;;259      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;260    
;;;261      htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  6420              STR      r0,[r4,#0x40]
;;;262      
;;;263      /* Disable the TIM Peripheral Clock */
;;;264      __HAL_TIM_DISABLE(htim);
000008  bf00              NOP      
00000a  6820              LDR      r0,[r4,#0]
00000c  6a00              LDR      r0,[r0,#0x20]
00000e  f2411111          MOV      r1,#0x1111
000012  4008              ANDS     r0,r0,r1
000014  b950              CBNZ     r0,|L9.44|
000016  6820              LDR      r0,[r4,#0]
000018  6a00              LDR      r0,[r0,#0x20]
00001a  1089              ASRS     r1,r1,#2
00001c  4008              ANDS     r0,r0,r1
00001e  b928              CBNZ     r0,|L9.44|
000020  6820              LDR      r0,[r4,#0]
000022  6800              LDR      r0,[r0,#0]
000024  f0200001          BIC      r0,r0,#1
000028  6821              LDR      r1,[r4,#0]
00002a  6008              STR      r0,[r1,#0]
                  |L9.44|
00002c  bf00              NOP      
;;;265    
;;;266    #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;267      if(htim->HallSensor_MspDeInitCallback == NULL)
;;;268      {
;;;269        htim->HallSensor_MspDeInitCallback = HAL_TIMEx_HallSensor_MspDeInit;
;;;270      }
;;;271      /* DeInit the low level hardware */
;;;272      htim->HallSensor_MspDeInitCallback(htim);
;;;273    #else
;;;274      /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;275      HAL_TIMEx_HallSensor_MspDeInit(htim);
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       HAL_TIMEx_HallSensor_MspDeInit
;;;276    #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;277    
;;;278      /* Change TIM state */  
;;;279      htim->State = HAL_TIM_STATE_RESET; 
000034  2000              MOVS     r0,#0
000036  6420              STR      r0,[r4,#0x40]
;;;280    
;;;281      /* Release Lock */
;;;282      __HAL_UNLOCK(htim);
000038  bf00              NOP      
00003a  63e0              STR      r0,[r4,#0x3c]
00003c  bf00              NOP      
;;;283    
;;;284      return HAL_OK;
;;;285    }
00003e  bd10              POP      {r4,pc}
;;;286    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_GetState PROC
;;;2025     */
;;;2026   HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
000000  4601              MOV      r1,r0
;;;2027   {
;;;2028     return htim->State;
000002  6c08              LDR      r0,[r1,#0x40]
;;;2029   }
000004  4770              BX       lr
;;;2030   
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Init||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Init PROC
;;;163      */
;;;164    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
000000  b530              PUSH     {r4,r5,lr}
;;;165    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;166      TIM_OC_InitTypeDef OC_Config;
;;;167        
;;;168      /* Check the TIM handle allocation */
;;;169      if(htim == NULL)
000008  b914              CBNZ     r4,|L11.16|
;;;170      {
;;;171        return HAL_ERROR;
00000a  2001              MOVS     r0,#1
                  |L11.12|
;;;172      }
;;;173      
;;;174      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;175      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;176      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;177      assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
;;;178      assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
;;;179      assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
;;;180      assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
;;;181    
;;;182      if(htim->State == HAL_TIM_STATE_RESET)
;;;183      {
;;;184        /* Allocate lock resource and initialize it */
;;;185        htim->Lock = HAL_UNLOCKED;
;;;186    
;;;187    #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;188        /* Reset interrupt callbacks to legacy week callbacks */
;;;189        TIM_ResetCallback(htim);
;;;190    
;;;191        if(htim->HallSensor_MspInitCallback == NULL)
;;;192        {
;;;193          htim->HallSensor_MspInitCallback = HAL_TIMEx_HallSensor_MspInit;
;;;194        }
;;;195        /* Init the low level hardware : GPIO, CLOCK, NVIC */
;;;196        htim->HallSensor_MspInitCallback(htim);
;;;197    #else
;;;198        /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;199        HAL_TIMEx_HallSensor_MspInit(htim);
;;;200    #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;201      }
;;;202    
;;;203      /* Set the TIM state */
;;;204      htim->State= HAL_TIM_STATE_BUSY;
;;;205    
;;;206      /* Configure the Time base in the Encoder Mode */
;;;207      TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;208      
;;;209      /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
;;;210      TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
;;;211      
;;;212      /* Reset the IC1PSC Bits */
;;;213      htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
;;;214      /* Set the IC1PSC value */
;;;215      htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
;;;216      
;;;217      /* Enable the Hall sensor interface (XOR function of the three inputs) */
;;;218      htim->Instance->CR2 |= TIM_CR2_TI1S;
;;;219      
;;;220      /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
;;;221      htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;222      htim->Instance->SMCR |= TIM_TS_TI1F_ED;
;;;223      
;;;224      /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */  
;;;225      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;226      htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
;;;227      
;;;228      /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
;;;229      OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
;;;230      OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
;;;231      OC_Config.OCMode = TIM_OCMODE_PWM2;
;;;232      OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
;;;233      OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
;;;234      OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
;;;235      OC_Config.Pulse = sConfig->Commutation_Delay; 
;;;236        
;;;237      TIM_OC2_SetConfig(htim->Instance, &OC_Config);
;;;238      
;;;239      /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
;;;240        register to 101 */
;;;241      htim->Instance->CR2 &= ~TIM_CR2_MMS;
;;;242      htim->Instance->CR2 |= TIM_TRGO_OC2REF; 
;;;243      
;;;244      /* Initialize the TIM state*/
;;;245      htim->State= HAL_TIM_STATE_READY;
;;;246    
;;;247      return HAL_OK;
;;;248    }
00000c  b007              ADD      sp,sp,#0x1c
00000e  bd30              POP      {r4,r5,pc}
                  |L11.16|
000010  6c20              LDR      r0,[r4,#0x40]         ;182
000012  b920              CBNZ     r0,|L11.30|
000014  2000              MOVS     r0,#0                 ;185
000016  63e0              STR      r0,[r4,#0x3c]         ;185
000018  4620              MOV      r0,r4                 ;199
00001a  f7fffffe          BL       HAL_TIMEx_HallSensor_MspInit
                  |L11.30|
00001e  2002              MOVS     r0,#2                 ;204
000020  6420              STR      r0,[r4,#0x40]         ;204
000022  1d21              ADDS     r1,r4,#4              ;207
000024  6820              LDR      r0,[r4,#0]            ;207
000026  f7fffffe          BL       TIM_Base_SetConfig
00002a  68ab              LDR      r3,[r5,#8]            ;210
00002c  6829              LDR      r1,[r5,#0]            ;210
00002e  2203              MOVS     r2,#3                 ;210
000030  6820              LDR      r0,[r4,#0]            ;210
000032  f7fffffe          BL       TIM_TI1_SetConfig
000036  6820              LDR      r0,[r4,#0]            ;213
000038  6980              LDR      r0,[r0,#0x18]         ;213
00003a  f020000c          BIC      r0,r0,#0xc            ;213
00003e  6821              LDR      r1,[r4,#0]            ;213
000040  6188              STR      r0,[r1,#0x18]         ;213
000042  6820              LDR      r0,[r4,#0]            ;215
000044  6980              LDR      r0,[r0,#0x18]         ;215
000046  6869              LDR      r1,[r5,#4]            ;215
000048  4308              ORRS     r0,r0,r1              ;215
00004a  6821              LDR      r1,[r4,#0]            ;215
00004c  6188              STR      r0,[r1,#0x18]         ;215
00004e  6820              LDR      r0,[r4,#0]            ;218
000050  6840              LDR      r0,[r0,#4]            ;218
000052  f0400080          ORR      r0,r0,#0x80           ;218
000056  6821              LDR      r1,[r4,#0]            ;218
000058  6048              STR      r0,[r1,#4]            ;218
00005a  6820              LDR      r0,[r4,#0]            ;221
00005c  6880              LDR      r0,[r0,#8]            ;221
00005e  f0200070          BIC      r0,r0,#0x70           ;221
000062  6821              LDR      r1,[r4,#0]            ;221
000064  6088              STR      r0,[r1,#8]            ;221
000066  6820              LDR      r0,[r4,#0]            ;222
000068  6880              LDR      r0,[r0,#8]            ;222
00006a  f0400040          ORR      r0,r0,#0x40           ;222
00006e  6821              LDR      r1,[r4,#0]            ;222
000070  6088              STR      r0,[r1,#8]            ;222
000072  6820              LDR      r0,[r4,#0]            ;225
000074  6880              LDR      r0,[r0,#8]            ;225
000076  4914              LDR      r1,|L11.200|
000078  4008              ANDS     r0,r0,r1              ;225
00007a  6821              LDR      r1,[r4,#0]            ;225
00007c  6088              STR      r0,[r1,#8]            ;225
00007e  6820              LDR      r0,[r4,#0]            ;226
000080  6880              LDR      r0,[r0,#8]            ;226
000082  f0400004          ORR      r0,r0,#4              ;226
000086  6821              LDR      r1,[r4,#0]            ;226
000088  6088              STR      r0,[r1,#8]            ;226
00008a  2000              MOVS     r0,#0                 ;229
00008c  9004              STR      r0,[sp,#0x10]         ;229
00008e  9005              STR      r0,[sp,#0x14]         ;230
000090  2070              MOVS     r0,#0x70              ;231
000092  9000              STR      r0,[sp,#0]            ;231
000094  2000              MOVS     r0,#0                 ;232
000096  9006              STR      r0,[sp,#0x18]         ;232
000098  9003              STR      r0,[sp,#0xc]          ;233
00009a  9002              STR      r0,[sp,#8]            ;234
00009c  68e8              LDR      r0,[r5,#0xc]          ;235
00009e  9001              STR      r0,[sp,#4]            ;235
0000a0  4669              MOV      r1,sp                 ;237
0000a2  6820              LDR      r0,[r4,#0]            ;237
0000a4  f7fffffe          BL       TIM_OC2_SetConfig
0000a8  6820              LDR      r0,[r4,#0]            ;241
0000aa  6840              LDR      r0,[r0,#4]            ;241
0000ac  f0200070          BIC      r0,r0,#0x70           ;241
0000b0  6821              LDR      r1,[r4,#0]            ;241
0000b2  6048              STR      r0,[r1,#4]            ;241
0000b4  6820              LDR      r0,[r4,#0]            ;242
0000b6  6840              LDR      r0,[r0,#4]            ;242
0000b8  f0400050          ORR      r0,r0,#0x50           ;242
0000bc  6821              LDR      r1,[r4,#0]            ;242
0000be  6048              STR      r0,[r1,#4]            ;242
0000c0  2001              MOVS     r0,#1                 ;245
0000c2  6420              STR      r0,[r4,#0x40]         ;245
0000c4  2000              MOVS     r0,#0                 ;247
0000c6  e7a1              B        |L11.12|
;;;249    
                          ENDP

                  |L11.200|
                          DCD      0xfffefff8

                          AREA ||i.HAL_TIMEx_HallSensor_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspDeInit PROC
;;;308      */
;;;309    __weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;310    {
;;;311      /* Prevent unused argument(s) compilation warning */
;;;312      UNUSED(htim);
;;;313     
;;;314      /* NOTE : This function Should not be modified, when the callback is needed,
;;;315                the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
;;;316       */
;;;317    }
;;;318    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspInit PROC
;;;292      */
;;;293    __weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;294    {
;;;295      /* Prevent unused argument(s) compilation warning */
;;;296      UNUSED(htim);
;;;297     
;;;298      /* NOTE : This function Should not be modified, when the callback is needed,
;;;299                the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
;;;300       */
;;;301    }
;;;302    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Start PROC
;;;324      */
;;;325    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;326    {
000002  4604              MOV      r4,r0
;;;327      /* Check the parameters */
;;;328      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;329      
;;;330      /* Enable the Input Capture channels 1
;;;331        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;332      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
000004  2201              MOVS     r2,#1
000006  2100              MOVS     r1,#0
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;333      
;;;334      /* Enable the Peripheral */
;;;335      __HAL_TIM_ENABLE(htim);
00000e  6820              LDR      r0,[r4,#0]
000010  6800              LDR      r0,[r0,#0]
000012  f0400001          ORR      r0,r0,#1
000016  6821              LDR      r1,[r4,#0]
000018  6008              STR      r0,[r1,#0]
;;;336      
;;;337      /* Return function status */
;;;338      return HAL_OK;
00001a  2000              MOVS     r0,#0
;;;339    }
00001c  bd10              POP      {r4,pc}
;;;340    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Start_DMA PROC
;;;420      */
;;;421    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;422    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;423      /* Check the parameters */
;;;424      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;425      
;;;426       if((htim->State == HAL_TIM_STATE_BUSY))
000008  6c20              LDR      r0,[r4,#0x40]
00000a  2802              CMP      r0,#2
00000c  d100              BNE      |L15.16|
                  |L15.14|
;;;427      {
;;;428         return HAL_BUSY;
;;;429      }
;;;430      else if((htim->State == HAL_TIM_STATE_READY))
;;;431      {
;;;432        if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;433        {
;;;434          return HAL_ERROR;                                    
;;;435        }
;;;436        else
;;;437        {
;;;438          htim->State = HAL_TIM_STATE_BUSY;
;;;439        }
;;;440      }
;;;441      /* Enable the Input Capture channels 1
;;;442        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;443      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
;;;444      
;;;445      /* Set the DMA Input Capture 1 Callback */
;;;446      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMACaptureCplt;     
;;;447      /* Set the DMA error callback */
;;;448      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;449      
;;;450      /* Enable the DMA Stream for Capture 1*/
;;;451      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);    
;;;452      
;;;453      /* Enable the capture compare 1 Interrupt */
;;;454      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;455     
;;;456      /* Enable the Peripheral */
;;;457      __HAL_TIM_ENABLE(htim);
;;;458      
;;;459      /* Return function status */
;;;460      return HAL_OK;
;;;461    }
00000e  bd70              POP      {r4-r6,pc}
                  |L15.16|
000010  6c20              LDR      r0,[r4,#0x40]         ;430
000012  2801              CMP      r0,#1                 ;430
000014  d105              BNE      |L15.34|
000016  b915              CBNZ     r5,|L15.30|
000018  2e00              CMP      r6,#0                 ;432
00001a  dd00              BLE      |L15.30|
00001c  e7f7              B        |L15.14|
                  |L15.30|
00001e  2002              MOVS     r0,#2                 ;438
000020  6420              STR      r0,[r4,#0x40]         ;438
                  |L15.34|
000022  2201              MOVS     r2,#1                 ;443
000024  2100              MOVS     r1,#0                 ;443
000026  6820              LDR      r0,[r4,#0]            ;443
000028  f7fffffe          BL       TIM_CCxChannelCmd
00002c  490d              LDR      r1,|L15.100|
00002e  6a60              LDR      r0,[r4,#0x24]         ;446
000030  6401              STR      r1,[r0,#0x40]         ;446
000032  490d              LDR      r1,|L15.104|
000034  6a60              LDR      r0,[r4,#0x24]         ;448
000036  6501              STR      r1,[r0,#0x50]         ;448
000038  6822              LDR      r2,[r4,#0]            ;451
00003a  f1020134          ADD      r1,r2,#0x34           ;451
00003e  4633              MOV      r3,r6                 ;451
000040  462a              MOV      r2,r5                 ;451
000042  6a60              LDR      r0,[r4,#0x24]         ;451
000044  f7fffffe          BL       HAL_DMA_Start_IT
000048  6820              LDR      r0,[r4,#0]            ;454
00004a  68c0              LDR      r0,[r0,#0xc]          ;454
00004c  f4407000          ORR      r0,r0,#0x200          ;454
000050  6821              LDR      r1,[r4,#0]            ;454
000052  60c8              STR      r0,[r1,#0xc]          ;454
000054  6820              LDR      r0,[r4,#0]            ;457
000056  6800              LDR      r0,[r0,#0]            ;457
000058  f0400001          ORR      r0,r0,#1              ;457
00005c  6821              LDR      r1,[r4,#0]            ;457
00005e  6008              STR      r0,[r1,#0]            ;457
000060  2000              MOVS     r0,#0                 ;460
000062  e7d4              B        |L15.14|
;;;462    
                          ENDP

                  |L15.100|
                          DCD      TIM_DMACaptureCplt
                  |L15.104|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_HallSensor_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Start_IT PROC
;;;368      */
;;;369    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;370    { 
000002  4604              MOV      r4,r0
;;;371      /* Check the parameters */
;;;372      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;373      
;;;374      /* Enable the capture compare Interrupts 1 event */
;;;375      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000004  6820              LDR      r0,[r4,#0]
000006  68c0              LDR      r0,[r0,#0xc]
000008  f0400002          ORR      r0,r0,#2
00000c  6821              LDR      r1,[r4,#0]
00000e  60c8              STR      r0,[r1,#0xc]
;;;376      
;;;377      /* Enable the Input Capture channels 1
;;;378        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;379      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);  
000010  2201              MOVS     r2,#1
000012  2100              MOVS     r1,#0
000014  6820              LDR      r0,[r4,#0]
000016  f7fffffe          BL       TIM_CCxChannelCmd
;;;380      
;;;381      /* Enable the Peripheral */
;;;382      __HAL_TIM_ENABLE(htim);
00001a  6820              LDR      r0,[r4,#0]
00001c  6800              LDR      r0,[r0,#0]
00001e  f0400001          ORR      r0,r0,#1
000022  6821              LDR      r1,[r4,#0]
000024  6008              STR      r0,[r1,#0]
;;;383      
;;;384      /* Return function status */
;;;385      return HAL_OK;
000026  2000              MOVS     r0,#0
;;;386    }
000028  bd10              POP      {r4,pc}
;;;387    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop PROC
;;;346      */
;;;347    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;348    {
000002  4604              MOV      r4,r0
;;;349      /* Check the parameters */
;;;350      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;351      
;;;352      /* Disable the Input Capture channels 1, 2 and 3
;;;353        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;354      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;355    
;;;356      /* Disable the Peripheral */
;;;357      __HAL_TIM_DISABLE(htim);
00000e  bf00              NOP      
000010  6820              LDR      r0,[r4,#0]
000012  6a00              LDR      r0,[r0,#0x20]
000014  f2411111          MOV      r1,#0x1111
000018  4008              ANDS     r0,r0,r1
00001a  b950              CBNZ     r0,|L17.50|
00001c  6820              LDR      r0,[r4,#0]
00001e  6a00              LDR      r0,[r0,#0x20]
000020  1089              ASRS     r1,r1,#2
000022  4008              ANDS     r0,r0,r1
000024  b928              CBNZ     r0,|L17.50|
000026  6820              LDR      r0,[r4,#0]
000028  6800              LDR      r0,[r0,#0]
00002a  f0200001          BIC      r0,r0,#1
00002e  6821              LDR      r1,[r4,#0]
000030  6008              STR      r0,[r1,#0]
                  |L17.50|
000032  bf00              NOP      
;;;358      
;;;359      /* Return function status */
;;;360      return HAL_OK;
000034  2000              MOVS     r0,#0
;;;361    }
000036  bd10              POP      {r4,pc}
;;;362    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop_DMA PROC
;;;468      */
;;;469    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;470    {
000002  4604              MOV      r4,r0
;;;471      /* Check the parameters */
;;;472      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;473      
;;;474      /* Disable the Input Capture channels 1
;;;475        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;476      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;477     
;;;478      
;;;479      /* Disable the capture compare Interrupts 1 event */
;;;480      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
00000e  6820              LDR      r0,[r4,#0]
000010  68c0              LDR      r0,[r0,#0xc]
000012  f4207000          BIC      r0,r0,#0x200
000016  6821              LDR      r1,[r4,#0]
000018  60c8              STR      r0,[r1,#0xc]
;;;481     
;;;482      /* Disable the Peripheral */
;;;483      __HAL_TIM_DISABLE(htim);
00001a  bf00              NOP      
00001c  6820              LDR      r0,[r4,#0]
00001e  6a00              LDR      r0,[r0,#0x20]
000020  f2411111          MOV      r1,#0x1111
000024  4008              ANDS     r0,r0,r1
000026  b950              CBNZ     r0,|L18.62|
000028  6820              LDR      r0,[r4,#0]
00002a  6a00              LDR      r0,[r0,#0x20]
00002c  1089              ASRS     r1,r1,#2
00002e  4008              ANDS     r0,r0,r1
000030  b928              CBNZ     r0,|L18.62|
000032  6820              LDR      r0,[r4,#0]
000034  6800              LDR      r0,[r0,#0]
000036  f0200001          BIC      r0,r0,#1
00003a  6821              LDR      r1,[r4,#0]
00003c  6008              STR      r0,[r1,#0]
                  |L18.62|
00003e  bf00              NOP      
;;;484      
;;;485      /* Return function status */
;;;486      return HAL_OK;
000040  2000              MOVS     r0,#0
;;;487    }
000042  bd10              POP      {r4,pc}
;;;488    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop_IT PROC
;;;393      */
;;;394    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;395    {
000002  4604              MOV      r4,r0
;;;396      /* Check the parameters */
;;;397      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;398      
;;;399      /* Disable the Input Capture channels 1
;;;400        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;401      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;402      
;;;403      /* Disable the capture compare Interrupts event */
;;;404      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
00000e  6820              LDR      r0,[r4,#0]
000010  68c0              LDR      r0,[r0,#0xc]
000012  f0200002          BIC      r0,r0,#2
000016  6821              LDR      r1,[r4,#0]
000018  60c8              STR      r0,[r1,#0xc]
;;;405      
;;;406      /* Disable the Peripheral */
;;;407      __HAL_TIM_DISABLE(htim);
00001a  bf00              NOP      
00001c  6820              LDR      r0,[r4,#0]
00001e  6a00              LDR      r0,[r0,#0x20]
000020  f2411111          MOV      r1,#0x1111
000024  4008              ANDS     r0,r0,r1
000026  b950              CBNZ     r0,|L19.62|
000028  6820              LDR      r0,[r4,#0]
00002a  6a00              LDR      r0,[r0,#0x20]
00002c  1089              ASRS     r1,r1,#2
00002e  4008              ANDS     r0,r0,r1
000030  b928              CBNZ     r0,|L19.62|
000032  6820              LDR      r0,[r4,#0]
000034  6800              LDR      r0,[r0,#0]
000036  f0200001          BIC      r0,r0,#1
00003a  6821              LDR      r1,[r4,#0]
00003c  6008              STR      r0,[r1,#0]
                  |L19.62|
00003e  bf00              NOP      
;;;408      
;;;409      /* Return function status */
;;;410      return HAL_OK;
000040  2000              MOVS     r0,#0
;;;411    }
000042  bd10              POP      {r4,pc}
;;;412    
                          ENDP


                          AREA ||i.HAL_TIMEx_MasterConfigSynchronization||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_MasterConfigSynchronization PROC
;;;1652     */
;;;1653   HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
000000  b530              PUSH     {r4,r5,lr}
;;;1654   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;1655     uint32_t tmpcr2;  
;;;1656     uint32_t tmpsmcr;  
;;;1657   
;;;1658     /* Check the parameters */
;;;1659     assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
;;;1660     assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
;;;1661     assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
;;;1662     
;;;1663     /* Check input state */
;;;1664     __HAL_LOCK(htim);
000006  bf00              NOP      
000008  6bd0              LDR      r0,[r2,#0x3c]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L20.18|
00000e  2002              MOVS     r0,#2
                  |L20.16|
;;;1665   
;;;1666    /* Get the TIMx CR2 register value */
;;;1667     tmpcr2 = htim->Instance->CR2;
;;;1668   
;;;1669     /* Get the TIMx SMCR register value */
;;;1670     tmpsmcr = htim->Instance->SMCR;
;;;1671   
;;;1672     /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
;;;1673     if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
;;;1674     {
;;;1675       /* Check the parameters */
;;;1676       assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
;;;1677       
;;;1678       /* Clear the MMS2 bits */
;;;1679       tmpcr2 &= ~TIM_CR2_MMS2;
;;;1680       /* Select the TRGO2 source*/
;;;1681       tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
;;;1682     }
;;;1683     
;;;1684     /* Reset the MMS Bits */
;;;1685     tmpcr2 &= ~TIM_CR2_MMS;
;;;1686     /* Select the TRGO source */
;;;1687     tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
;;;1688   
;;;1689     /* Reset the MSM Bit */
;;;1690     tmpsmcr &= ~TIM_SMCR_MSM;
;;;1691     /* Set master mode */
;;;1692     tmpsmcr |= sMasterConfig->MasterSlaveMode;
;;;1693     
;;;1694     /* Update TIMx CR2 */
;;;1695     htim->Instance->CR2 = tmpcr2;
;;;1696     
;;;1697     /* Update TIMx SMCR */
;;;1698     htim->Instance->SMCR = tmpsmcr;
;;;1699   
;;;1700     __HAL_UNLOCK(htim);
;;;1701     
;;;1702     return HAL_OK;
;;;1703   } 
000010  bd30              POP      {r4,r5,pc}
                  |L20.18|
000012  2001              MOVS     r0,#1                 ;1664
000014  63d0              STR      r0,[r2,#0x3c]         ;1664
000016  bf00              NOP                            ;1664
000018  6810              LDR      r0,[r2,#0]            ;1667
00001a  6841              LDR      r1,[r0,#4]            ;1667
00001c  6810              LDR      r0,[r2,#0]            ;1670
00001e  6884              LDR      r4,[r0,#8]            ;1670
000020  4d0e              LDR      r5,|L20.92|
000022  6810              LDR      r0,[r2,#0]            ;1673
000024  42a8              CMP      r0,r5                 ;1673
000026  d003              BEQ      |L20.48|
000028  4d0d              LDR      r5,|L20.96|
00002a  6810              LDR      r0,[r2,#0]            ;1673
00002c  42a8              CMP      r0,r5                 ;1673
00002e  d103              BNE      |L20.56|
                  |L20.48|
000030  f4210170          BIC      r1,r1,#0xf00000       ;1679
000034  6858              LDR      r0,[r3,#4]            ;1681
000036  4301              ORRS     r1,r1,r0              ;1681
                  |L20.56|
000038  f0210170          BIC      r1,r1,#0x70           ;1685
00003c  6818              LDR      r0,[r3,#0]            ;1687
00003e  4301              ORRS     r1,r1,r0              ;1687
000040  f0240480          BIC      r4,r4,#0x80           ;1690
000044  6898              LDR      r0,[r3,#8]            ;1692
000046  4304              ORRS     r4,r4,r0              ;1692
000048  6810              LDR      r0,[r2,#0]            ;1695
00004a  6041              STR      r1,[r0,#4]            ;1695
00004c  6810              LDR      r0,[r2,#0]            ;1698
00004e  6084              STR      r4,[r0,#8]            ;1698
000050  bf00              NOP                            ;1700
000052  2000              MOVS     r0,#0                 ;1700
000054  63d0              STR      r0,[r2,#0x3c]         ;1700
000056  bf00              NOP                            ;1700
000058  bf00              NOP                            ;1702
00005a  e7d9              B        |L20.16|
;;;1704                                                        
                          ENDP

                  |L20.92|
                          DCD      0x40010000
                  |L20.96|
                          DCD      0x40010400

                          AREA ||i.HAL_TIMEx_OCN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Start PROC
;;;524      */
;;;525    HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;526    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;527      /* Check the parameters */
;;;528      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;529      
;;;530         /* Enable the Capture compare channel N */
;;;531         TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
000006  2204              MOVS     r2,#4
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;532        
;;;533      /* Enable the Main Output */
;;;534        __HAL_TIM_MOE_ENABLE(htim);
000010  6820              LDR      r0,[r4,#0]
000012  6c40              LDR      r0,[r0,#0x44]
000014  f4404000          ORR      r0,r0,#0x8000
000018  6821              LDR      r1,[r4,#0]
00001a  6448              STR      r0,[r1,#0x44]
;;;535    
;;;536      /* Enable the Peripheral */
;;;537      __HAL_TIM_ENABLE(htim);
00001c  6820              LDR      r0,[r4,#0]
00001e  6800              LDR      r0,[r0,#0]
000020  f0400001          ORR      r0,r0,#1
000024  6821              LDR      r1,[r4,#0]
000026  6008              STR      r0,[r1,#0]
;;;538      
;;;539      /* Return function status */
;;;540      return HAL_OK;
000028  2000              MOVS     r0,#0
;;;541    } 
00002a  bd70              POP      {r4-r6,pc}
;;;542    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OCN_Start_DMA PROC
;;;726      */
;;;727    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;728    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;729      /* Check the parameters */
;;;730      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;731      
;;;732      if((htim->State == HAL_TIM_STATE_BUSY))
00000c  6c20              LDR      r0,[r4,#0x40]
00000e  2802              CMP      r0,#2
000010  d101              BNE      |L22.22|
                  |L22.18|
;;;733      {
;;;734         return HAL_BUSY;
;;;735      }
;;;736      else if((htim->State == HAL_TIM_STATE_READY))
;;;737      {
;;;738        if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;739        {
;;;740          return HAL_ERROR;                                    
;;;741        }
;;;742        else
;;;743        {
;;;744          htim->State = HAL_TIM_STATE_BUSY;
;;;745        }
;;;746      }    
;;;747      switch (Channel)
;;;748      {
;;;749        case TIM_CHANNEL_1:
;;;750        {      
;;;751          /* Set the DMA Period elapsed callback */
;;;752          htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;753         
;;;754          /* Set the DMA error callback */
;;;755          htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;756          
;;;757          /* Enable the DMA Stream */
;;;758          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;759          
;;;760          /* Enable the TIM Output Compare DMA request */
;;;761          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;762        }
;;;763        break;
;;;764        
;;;765        case TIM_CHANNEL_2:
;;;766        {
;;;767          /* Set the DMA Period elapsed callback */
;;;768          htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;769         
;;;770          /* Set the DMA error callback */
;;;771          htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
;;;772          
;;;773          /* Enable the DMA Stream */
;;;774          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;775          
;;;776          /* Enable the TIM Output Compare DMA request */
;;;777          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;778        }
;;;779        break;
;;;780        
;;;781        case TIM_CHANNEL_3:
;;;782    {
;;;783          /* Set the DMA Period elapsed callback */
;;;784          htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;785         
;;;786          /* Set the DMA error callback */
;;;787          htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
;;;788          
;;;789          /* Enable the DMA Stream */
;;;790          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;791          
;;;792          /* Enable the TIM Output Compare DMA request */
;;;793          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;794        }
;;;795        break;
;;;796        
;;;797        case TIM_CHANNEL_4:
;;;798        {
;;;799         /* Set the DMA Period elapsed callback */
;;;800          htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;801         
;;;802          /* Set the DMA error callback */
;;;803          htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
;;;804          
;;;805          /* Enable the DMA Stream */
;;;806          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;807          
;;;808          /* Enable the TIM Output Compare DMA request */
;;;809          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;810        }
;;;811        break;
;;;812        
;;;813        default:
;;;814        break;
;;;815      }
;;;816    
;;;817      /* Enable the Capture compare channel N */
;;;818      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;819      
;;;820      /* Enable the Main Output */
;;;821      __HAL_TIM_MOE_ENABLE(htim);
;;;822      
;;;823      /* Enable the Peripheral */
;;;824      __HAL_TIM_ENABLE(htim); 
;;;825      
;;;826      /* Return function status */
;;;827      return HAL_OK;
;;;828    }
000012  e8bd81f0          POP      {r4-r8,pc}
                  |L22.22|
000016  6c20              LDR      r0,[r4,#0x40]         ;736
000018  2801              CMP      r0,#1                 ;736
00001a  d105              BNE      |L22.40|
00001c  b915              CBNZ     r5,|L22.36|
00001e  2f00              CMP      r7,#0                 ;738
000020  dd00              BLE      |L22.36|
000022  e7f6              B        |L22.18|
                  |L22.36|
000024  2002              MOVS     r0,#2                 ;744
000026  6420              STR      r0,[r4,#0x40]         ;744
                  |L22.40|
000028  b136              CBZ      r6,|L22.56|
00002a  2e04              CMP      r6,#4                 ;747
00002c  d019              BEQ      |L22.98|
00002e  2e08              CMP      r6,#8                 ;747
000030  d02c              BEQ      |L22.140|
000032  2e0c              CMP      r6,#0xc               ;747
000034  d154              BNE      |L22.224|
000036  e03e              B        |L22.182|
                  |L22.56|
000038  4934              LDR      r1,|L22.268|
00003a  6a60              LDR      r0,[r4,#0x24]         ;752
00003c  6401              STR      r1,[r0,#0x40]         ;752
00003e  4934              LDR      r1,|L22.272|
000040  6a60              LDR      r0,[r4,#0x24]         ;755
000042  6501              STR      r1,[r0,#0x50]         ;755
000044  6821              LDR      r1,[r4,#0]            ;758
000046  f1010234          ADD      r2,r1,#0x34           ;758
00004a  463b              MOV      r3,r7                 ;758
00004c  4629              MOV      r1,r5                 ;758
00004e  6a60              LDR      r0,[r4,#0x24]         ;758
000050  f7fffffe          BL       HAL_DMA_Start_IT
000054  6820              LDR      r0,[r4,#0]            ;761
000056  68c0              LDR      r0,[r0,#0xc]          ;761
000058  f4407000          ORR      r0,r0,#0x200          ;761
00005c  6821              LDR      r1,[r4,#0]            ;761
00005e  60c8              STR      r0,[r1,#0xc]          ;761
000060  e03f              B        |L22.226|
                  |L22.98|
000062  492a              LDR      r1,|L22.268|
000064  6aa0              LDR      r0,[r4,#0x28]         ;768
000066  6401              STR      r1,[r0,#0x40]         ;768
000068  4929              LDR      r1,|L22.272|
00006a  6aa0              LDR      r0,[r4,#0x28]         ;771
00006c  6501              STR      r1,[r0,#0x50]         ;771
00006e  6821              LDR      r1,[r4,#0]            ;774
000070  f1010238          ADD      r2,r1,#0x38           ;774
000074  463b              MOV      r3,r7                 ;774
000076  4629              MOV      r1,r5                 ;774
000078  6aa0              LDR      r0,[r4,#0x28]         ;774
00007a  f7fffffe          BL       HAL_DMA_Start_IT
00007e  6820              LDR      r0,[r4,#0]            ;777
000080  68c0              LDR      r0,[r0,#0xc]          ;777
000082  f4406080          ORR      r0,r0,#0x400          ;777
000086  6821              LDR      r1,[r4,#0]            ;777
000088  60c8              STR      r0,[r1,#0xc]          ;777
00008a  e02a              B        |L22.226|
                  |L22.140|
00008c  491f              LDR      r1,|L22.268|
00008e  6ae0              LDR      r0,[r4,#0x2c]         ;784
000090  6401              STR      r1,[r0,#0x40]         ;784
000092  491f              LDR      r1,|L22.272|
000094  6ae0              LDR      r0,[r4,#0x2c]         ;787
000096  6501              STR      r1,[r0,#0x50]         ;787
000098  6821              LDR      r1,[r4,#0]            ;790
00009a  f101023c          ADD      r2,r1,#0x3c           ;790
00009e  463b              MOV      r3,r7                 ;790
0000a0  4629              MOV      r1,r5                 ;790
0000a2  6ae0              LDR      r0,[r4,#0x2c]         ;790
0000a4  f7fffffe          BL       HAL_DMA_Start_IT
0000a8  6820              LDR      r0,[r4,#0]            ;793
0000aa  68c0              LDR      r0,[r0,#0xc]          ;793
0000ac  f4406000          ORR      r0,r0,#0x800          ;793
0000b0  6821              LDR      r1,[r4,#0]            ;793
0000b2  60c8              STR      r0,[r1,#0xc]          ;793
0000b4  e015              B        |L22.226|
                  |L22.182|
0000b6  4915              LDR      r1,|L22.268|
0000b8  6b20              LDR      r0,[r4,#0x30]         ;800
0000ba  6401              STR      r1,[r0,#0x40]         ;800
0000bc  4914              LDR      r1,|L22.272|
0000be  6b20              LDR      r0,[r4,#0x30]         ;803
0000c0  6501              STR      r1,[r0,#0x50]         ;803
0000c2  6821              LDR      r1,[r4,#0]            ;806
0000c4  f1010240          ADD      r2,r1,#0x40           ;806
0000c8  463b              MOV      r3,r7                 ;806
0000ca  4629              MOV      r1,r5                 ;806
0000cc  6b20              LDR      r0,[r4,#0x30]         ;806
0000ce  f7fffffe          BL       HAL_DMA_Start_IT
0000d2  6820              LDR      r0,[r4,#0]            ;809
0000d4  68c0              LDR      r0,[r0,#0xc]          ;809
0000d6  f4405080          ORR      r0,r0,#0x1000         ;809
0000da  6821              LDR      r1,[r4,#0]            ;809
0000dc  60c8              STR      r0,[r1,#0xc]          ;809
0000de  e000              B        |L22.226|
                  |L22.224|
0000e0  bf00              NOP                            ;814
                  |L22.226|
0000e2  bf00              NOP                            ;763
0000e4  2204              MOVS     r2,#4                 ;818
0000e6  4631              MOV      r1,r6                 ;818
0000e8  6820              LDR      r0,[r4,#0]            ;818
0000ea  f7fffffe          BL       TIM_CCxNChannelCmd
0000ee  6820              LDR      r0,[r4,#0]            ;821
0000f0  6c40              LDR      r0,[r0,#0x44]         ;821
0000f2  f4404000          ORR      r0,r0,#0x8000         ;821
0000f6  6821              LDR      r1,[r4,#0]            ;821
0000f8  6448              STR      r0,[r1,#0x44]         ;821
0000fa  6820              LDR      r0,[r4,#0]            ;824
0000fc  6800              LDR      r0,[r0,#0]            ;824
0000fe  f0400001          ORR      r0,r0,#1              ;824
000102  6821              LDR      r1,[r4,#0]            ;824
000104  6008              STR      r0,[r1,#0]            ;824
000106  2000              MOVS     r0,#0                 ;827
000108  e783              B        |L22.18|
;;;829    
                          ENDP

00010a  0000              DCW      0x0000
                  |L22.268|
                          DCD      TIM_DMADelayPulseCplt
                  |L22.272|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_OCN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Start_IT PROC
;;;584      */
;;;585    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;586    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;587      /* Check the parameters */
;;;588      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;589      
;;;590      switch (Channel)
000006  b135              CBZ      r5,|L23.22|
000008  2d04              CMP      r5,#4
00000a  d00b              BEQ      |L23.36|
00000c  2d08              CMP      r5,#8
00000e  d010              BEQ      |L23.50|
000010  2d0c              CMP      r5,#0xc
000012  d11c              BNE      |L23.78|
000014  e014              B        |L23.64|
                  |L23.22|
;;;591      {
;;;592        case TIM_CHANNEL_1:
;;;593        {       
;;;594          /* Enable the TIM Output Compare interrupt */
;;;595          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000016  6820              LDR      r0,[r4,#0]
000018  68c0              LDR      r0,[r0,#0xc]
00001a  f0400002          ORR      r0,r0,#2
00001e  6821              LDR      r1,[r4,#0]
000020  60c8              STR      r0,[r1,#0xc]
;;;596        }
;;;597        break;
000022  e015              B        |L23.80|
                  |L23.36|
;;;598        
;;;599        case TIM_CHANNEL_2:
;;;600        {
;;;601          /* Enable the TIM Output Compare interrupt */
;;;602          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000024  6820              LDR      r0,[r4,#0]
000026  68c0              LDR      r0,[r0,#0xc]
000028  f0400004          ORR      r0,r0,#4
00002c  6821              LDR      r1,[r4,#0]
00002e  60c8              STR      r0,[r1,#0xc]
;;;603        }
;;;604        break;
000030  e00e              B        |L23.80|
                  |L23.50|
;;;605        
;;;606        case TIM_CHANNEL_3:
;;;607        {
;;;608          /* Enable the TIM Output Compare interrupt */
;;;609          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
000032  6820              LDR      r0,[r4,#0]
000034  68c0              LDR      r0,[r0,#0xc]
000036  f0400008          ORR      r0,r0,#8
00003a  6821              LDR      r1,[r4,#0]
00003c  60c8              STR      r0,[r1,#0xc]
;;;610        }
;;;611        break;
00003e  e007              B        |L23.80|
                  |L23.64|
;;;612        
;;;613        case TIM_CHANNEL_4:
;;;614        {
;;;615          /* Enable the TIM Output Compare interrupt */
;;;616          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000040  6820              LDR      r0,[r4,#0]
000042  68c0              LDR      r0,[r0,#0xc]
000044  f0400010          ORR      r0,r0,#0x10
000048  6821              LDR      r1,[r4,#0]
00004a  60c8              STR      r0,[r1,#0xc]
;;;617        }
;;;618        break;
00004c  e000              B        |L23.80|
                  |L23.78|
;;;619        
;;;620        default:
;;;621        break;
00004e  bf00              NOP      
                  |L23.80|
000050  bf00              NOP                            ;597
;;;622      } 
;;;623      
;;;624      /* Enable the TIM Break interrupt */
;;;625      __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
000052  6820              LDR      r0,[r4,#0]
000054  68c0              LDR      r0,[r0,#0xc]
000056  f0400080          ORR      r0,r0,#0x80
00005a  6821              LDR      r1,[r4,#0]
00005c  60c8              STR      r0,[r1,#0xc]
;;;626      
;;;627      /* Enable the Capture compare channel N */
;;;628      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
00005e  2204              MOVS     r2,#4
000060  4629              MOV      r1,r5
000062  6820              LDR      r0,[r4,#0]
000064  f7fffffe          BL       TIM_CCxNChannelCmd
;;;629    
;;;630      /* Enable the Main Output */
;;;631     __HAL_TIM_MOE_ENABLE(htim);
000068  6820              LDR      r0,[r4,#0]
00006a  6c40              LDR      r0,[r0,#0x44]
00006c  f4404000          ORR      r0,r0,#0x8000
000070  6821              LDR      r1,[r4,#0]
000072  6448              STR      r0,[r1,#0x44]
;;;632    
;;;633      /* Enable the Peripheral */
;;;634      __HAL_TIM_ENABLE(htim);
000074  6820              LDR      r0,[r4,#0]
000076  6800              LDR      r0,[r0,#0]
000078  f0400001          ORR      r0,r0,#1
00007c  6821              LDR      r1,[r4,#0]
00007e  6008              STR      r0,[r1,#0]
;;;635      
;;;636      /* Return function status */
;;;637      return HAL_OK;
000080  2000              MOVS     r0,#0
;;;638    } 
000082  bd70              POP      {r4-r6,pc}
;;;639    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop PROC
;;;554      */
;;;555    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;556    { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;557      /* Check the parameters */
;;;558      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;559      
;;;560        /* Disable the Capture compare channel N */
;;;561      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;562        
;;;563      /* Disable the Main Output */
;;;564        __HAL_TIM_MOE_DISABLE(htim);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  6a00              LDR      r0,[r0,#0x20]
000016  f2411111          MOV      r1,#0x1111
00001a  4008              ANDS     r0,r0,r1
00001c  b950              CBNZ     r0,|L24.52|
00001e  6820              LDR      r0,[r4,#0]
000020  6a00              LDR      r0,[r0,#0x20]
000022  1089              ASRS     r1,r1,#2
000024  4008              ANDS     r0,r0,r1
000026  b928              CBNZ     r0,|L24.52|
000028  6820              LDR      r0,[r4,#0]
00002a  6c40              LDR      r0,[r0,#0x44]
00002c  f4204000          BIC      r0,r0,#0x8000
000030  6821              LDR      r1,[r4,#0]
000032  6448              STR      r0,[r1,#0x44]
                  |L24.52|
000034  bf00              NOP      
;;;565    
;;;566      /* Disable the Peripheral */
;;;567      __HAL_TIM_DISABLE(htim);
000036  bf00              NOP      
000038  6820              LDR      r0,[r4,#0]
00003a  6a00              LDR      r0,[r0,#0x20]
00003c  f2411111          MOV      r1,#0x1111
000040  4008              ANDS     r0,r0,r1
000042  b950              CBNZ     r0,|L24.90|
000044  6820              LDR      r0,[r4,#0]
000046  6a00              LDR      r0,[r0,#0x20]
000048  1089              ASRS     r1,r1,#2
00004a  4008              ANDS     r0,r0,r1
00004c  b928              CBNZ     r0,|L24.90|
00004e  6820              LDR      r0,[r4,#0]
000050  6800              LDR      r0,[r0,#0]
000052  f0200001          BIC      r0,r0,#1
000056  6821              LDR      r1,[r4,#0]
000058  6008              STR      r0,[r1,#0]
                  |L24.90|
00005a  bf00              NOP      
;;;568      
;;;569      /* Return function status */
;;;570      return HAL_OK;
00005c  2000              MOVS     r0,#0
;;;571    } 
00005e  bd70              POP      {r4-r6,pc}
;;;572    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop_DMA PROC
;;;841      */
;;;842    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;843    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;844      /* Check the parameters */
;;;845      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;846      
;;;847      switch (Channel)
000006  b135              CBZ      r5,|L25.22|
000008  2d04              CMP      r5,#4
00000a  d00b              BEQ      |L25.36|
00000c  2d08              CMP      r5,#8
00000e  d010              BEQ      |L25.50|
000010  2d0c              CMP      r5,#0xc
000012  d11c              BNE      |L25.78|
000014  e014              B        |L25.64|
                  |L25.22|
;;;848      {
;;;849        case TIM_CHANNEL_1:
;;;850        {       
;;;851          /* Disable the TIM Output Compare DMA request */
;;;852          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000016  6820              LDR      r0,[r4,#0]
000018  68c0              LDR      r0,[r0,#0xc]
00001a  f4207000          BIC      r0,r0,#0x200
00001e  6821              LDR      r1,[r4,#0]
000020  60c8              STR      r0,[r1,#0xc]
;;;853        }
;;;854        break;
000022  e015              B        |L25.80|
                  |L25.36|
;;;855        
;;;856        case TIM_CHANNEL_2:
;;;857        {
;;;858          /* Disable the TIM Output Compare DMA request */
;;;859          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000024  6820              LDR      r0,[r4,#0]
000026  68c0              LDR      r0,[r0,#0xc]
000028  f4206080          BIC      r0,r0,#0x400
00002c  6821              LDR      r1,[r4,#0]
00002e  60c8              STR      r0,[r1,#0xc]
;;;860        }
;;;861        break;
000030  e00e              B        |L25.80|
                  |L25.50|
;;;862        
;;;863        case TIM_CHANNEL_3:
;;;864        {
;;;865          /* Disable the TIM Output Compare DMA request */
;;;866          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
000032  6820              LDR      r0,[r4,#0]
000034  68c0              LDR      r0,[r0,#0xc]
000036  f4206000          BIC      r0,r0,#0x800
00003a  6821              LDR      r1,[r4,#0]
00003c  60c8              STR      r0,[r1,#0xc]
;;;867        }
;;;868        break;
00003e  e007              B        |L25.80|
                  |L25.64|
;;;869        
;;;870        case TIM_CHANNEL_4:
;;;871        {
;;;872          /* Disable the TIM Output Compare interrupt */
;;;873          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
000040  6820              LDR      r0,[r4,#0]
000042  68c0              LDR      r0,[r0,#0xc]
000044  f4205080          BIC      r0,r0,#0x1000
000048  6821              LDR      r1,[r4,#0]
00004a  60c8              STR      r0,[r1,#0xc]
;;;874        }
;;;875        break;
00004c  e000              B        |L25.80|
                  |L25.78|
;;;876        
;;;877        default:
;;;878        break;
00004e  bf00              NOP      
                  |L25.80|
000050  bf00              NOP                            ;854
;;;879      } 
;;;880      
;;;881      /* Disable the Capture compare channel N */
;;;882      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000052  2200              MOVS     r2,#0
000054  4629              MOV      r1,r5
000056  6820              LDR      r0,[r4,#0]
000058  f7fffffe          BL       TIM_CCxNChannelCmd
;;;883      
;;;884      /* Disable the Main Output */
;;;885      __HAL_TIM_MOE_DISABLE(htim);
00005c  bf00              NOP      
00005e  6820              LDR      r0,[r4,#0]
000060  6a00              LDR      r0,[r0,#0x20]
000062  f2411111          MOV      r1,#0x1111
000066  4008              ANDS     r0,r0,r1
000068  b950              CBNZ     r0,|L25.128|
00006a  6820              LDR      r0,[r4,#0]
00006c  6a00              LDR      r0,[r0,#0x20]
00006e  1089              ASRS     r1,r1,#2
000070  4008              ANDS     r0,r0,r1
000072  b928              CBNZ     r0,|L25.128|
000074  6820              LDR      r0,[r4,#0]
000076  6c40              LDR      r0,[r0,#0x44]
000078  f4204000          BIC      r0,r0,#0x8000
00007c  6821              LDR      r1,[r4,#0]
00007e  6448              STR      r0,[r1,#0x44]
                  |L25.128|
000080  bf00              NOP      
;;;886      
;;;887      /* Disable the Peripheral */
;;;888      __HAL_TIM_DISABLE(htim);
000082  bf00              NOP      
000084  6820              LDR      r0,[r4,#0]
000086  6a00              LDR      r0,[r0,#0x20]
000088  f2411111          MOV      r1,#0x1111
00008c  4008              ANDS     r0,r0,r1
00008e  b950              CBNZ     r0,|L25.166|
000090  6820              LDR      r0,[r4,#0]
000092  6a00              LDR      r0,[r0,#0x20]
000094  1089              ASRS     r1,r1,#2
000096  4008              ANDS     r0,r0,r1
000098  b928              CBNZ     r0,|L25.166|
00009a  6820              LDR      r0,[r4,#0]
00009c  6800              LDR      r0,[r0,#0]
00009e  f0200001          BIC      r0,r0,#1
0000a2  6821              LDR      r1,[r4,#0]
0000a4  6008              STR      r0,[r1,#0]
                  |L25.166|
0000a6  bf00              NOP      
;;;889      
;;;890      /* Change the htim state */
;;;891      htim->State = HAL_TIM_STATE_READY;
0000a8  2001              MOVS     r0,#1
0000aa  6420              STR      r0,[r4,#0x40]
;;;892      
;;;893      /* Return function status */
;;;894      return HAL_OK;
0000ac  2000              MOVS     r0,#0
;;;895    }
0000ae  bd70              POP      {r4-r6,pc}
;;;896    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop_IT PROC
;;;651      */
;;;652    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;653    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;654      uint32_t tmpccer = 0; 
000006  2600              MOVS     r6,#0
;;;655    
;;;656      /* Check the parameters */
;;;657      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;658      
;;;659      switch (Channel)
000008  b135              CBZ      r5,|L26.24|
00000a  2d04              CMP      r5,#4
00000c  d00b              BEQ      |L26.38|
00000e  2d08              CMP      r5,#8
000010  d010              BEQ      |L26.52|
000012  2d0c              CMP      r5,#0xc
000014  d11c              BNE      |L26.80|
000016  e014              B        |L26.66|
                  |L26.24|
;;;660      {
;;;661        case TIM_CHANNEL_1:
;;;662        {       
;;;663          /* Disable the TIM Output Compare interrupt */
;;;664          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000018  6820              LDR      r0,[r4,#0]
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  f0200002          BIC      r0,r0,#2
000020  6821              LDR      r1,[r4,#0]
000022  60c8              STR      r0,[r1,#0xc]
;;;665        }
;;;666        break;
000024  e015              B        |L26.82|
                  |L26.38|
;;;667        
;;;668        case TIM_CHANNEL_2:
;;;669        {
;;;670          /* Disable the TIM Output Compare interrupt */
;;;671          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000026  6820              LDR      r0,[r4,#0]
000028  68c0              LDR      r0,[r0,#0xc]
00002a  f0200004          BIC      r0,r0,#4
00002e  6821              LDR      r1,[r4,#0]
000030  60c8              STR      r0,[r1,#0xc]
;;;672        }
;;;673        break;
000032  e00e              B        |L26.82|
                  |L26.52|
;;;674        
;;;675        case TIM_CHANNEL_3:
;;;676        {
;;;677          /* Disable the TIM Output Compare interrupt */
;;;678          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000034  6820              LDR      r0,[r4,#0]
000036  68c0              LDR      r0,[r0,#0xc]
000038  f0200008          BIC      r0,r0,#8
00003c  6821              LDR      r1,[r4,#0]
00003e  60c8              STR      r0,[r1,#0xc]
;;;679        }
;;;680        break;
000040  e007              B        |L26.82|
                  |L26.66|
;;;681        
;;;682        case TIM_CHANNEL_4:
;;;683        {
;;;684          /* Disable the TIM Output Compare interrupt */
;;;685          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
000042  6820              LDR      r0,[r4,#0]
000044  68c0              LDR      r0,[r0,#0xc]
000046  f0200010          BIC      r0,r0,#0x10
00004a  6821              LDR      r1,[r4,#0]
00004c  60c8              STR      r0,[r1,#0xc]
;;;686        }
;;;687        break;
00004e  e000              B        |L26.82|
                  |L26.80|
;;;688        
;;;689        default:
;;;690        break; 
000050  bf00              NOP      
                  |L26.82|
000052  bf00              NOP                            ;666
;;;691      }
;;;692    
;;;693      /* Disable the Capture compare channel N */
;;;694      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000054  2200              MOVS     r2,#0
000056  4629              MOV      r1,r5
000058  6820              LDR      r0,[r4,#0]
00005a  f7fffffe          BL       TIM_CCxNChannelCmd
;;;695    
;;;696      /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;697      tmpccer = htim->Instance->CCER;
00005e  6820              LDR      r0,[r4,#0]
000060  6a06              LDR      r6,[r0,#0x20]
;;;698      if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
000062  f2404044          MOV      r0,#0x444
000066  4030              ANDS     r0,r0,r6
000068  b928              CBNZ     r0,|L26.118|
;;;699      {
;;;700        __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
00006a  6820              LDR      r0,[r4,#0]
00006c  68c0              LDR      r0,[r0,#0xc]
00006e  f0200080          BIC      r0,r0,#0x80
000072  6821              LDR      r1,[r4,#0]
000074  60c8              STR      r0,[r1,#0xc]
                  |L26.118|
;;;701      }
;;;702    
;;;703      /* Disable the Main Output */
;;;704      __HAL_TIM_MOE_DISABLE(htim);
000076  bf00              NOP      
000078  6820              LDR      r0,[r4,#0]
00007a  6a00              LDR      r0,[r0,#0x20]
00007c  f2411111          MOV      r1,#0x1111
000080  4008              ANDS     r0,r0,r1
000082  b950              CBNZ     r0,|L26.154|
000084  6820              LDR      r0,[r4,#0]
000086  6a00              LDR      r0,[r0,#0x20]
000088  1089              ASRS     r1,r1,#2
00008a  4008              ANDS     r0,r0,r1
00008c  b928              CBNZ     r0,|L26.154|
00008e  6820              LDR      r0,[r4,#0]
000090  6c40              LDR      r0,[r0,#0x44]
000092  f4204000          BIC      r0,r0,#0x8000
000096  6821              LDR      r1,[r4,#0]
000098  6448              STR      r0,[r1,#0x44]
                  |L26.154|
00009a  bf00              NOP      
;;;705    
;;;706      /* Disable the Peripheral */
;;;707      __HAL_TIM_DISABLE(htim);
00009c  bf00              NOP      
00009e  6820              LDR      r0,[r4,#0]
0000a0  6a00              LDR      r0,[r0,#0x20]
0000a2  f2411111          MOV      r1,#0x1111
0000a6  4008              ANDS     r0,r0,r1
0000a8  b950              CBNZ     r0,|L26.192|
0000aa  6820              LDR      r0,[r4,#0]
0000ac  6a00              LDR      r0,[r0,#0x20]
0000ae  1089              ASRS     r1,r1,#2
0000b0  4008              ANDS     r0,r0,r1
0000b2  b928              CBNZ     r0,|L26.192|
0000b4  6820              LDR      r0,[r4,#0]
0000b6  6800              LDR      r0,[r0,#0]
0000b8  f0200001          BIC      r0,r0,#1
0000bc  6821              LDR      r1,[r4,#0]
0000be  6008              STR      r0,[r1,#0]
                  |L26.192|
0000c0  bf00              NOP      
;;;708      
;;;709      /* Return function status */
;;;710      return HAL_OK;
0000c2  2000              MOVS     r0,#0
;;;711    } 
0000c4  bd70              POP      {r4-r6,pc}
;;;712    
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start PROC
;;;1345     */
;;;1346   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1347     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1348     /* Check the parameters */
;;;1349     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1350     
;;;1351     /* Enable the complementary One Pulse output */
;;;1352     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
000006  2204              MOVS     r2,#4
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1353     
;;;1354     /* Enable the Main Output */
;;;1355     __HAL_TIM_MOE_ENABLE(htim);
000010  6820              LDR      r0,[r4,#0]
000012  6c40              LDR      r0,[r0,#0x44]
000014  f4404000          ORR      r0,r0,#0x8000
000018  6821              LDR      r1,[r4,#0]
00001a  6448              STR      r0,[r1,#0x44]
;;;1356     
;;;1357     /* Return function status */
;;;1358     return HAL_OK;
00001c  2000              MOVS     r0,#0
;;;1359   }
00001e  bd70              POP      {r4-r6,pc}
;;;1360   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start_IT PROC
;;;1401     */
;;;1402   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1403   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1404     /* Check the parameters */
;;;1405     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1406   
;;;1407     /* Enable the TIM Capture/Compare 1 interrupt */
;;;1408     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000006  6820              LDR      r0,[r4,#0]
000008  68c0              LDR      r0,[r0,#0xc]
00000a  f0400002          ORR      r0,r0,#2
00000e  6821              LDR      r1,[r4,#0]
000010  60c8              STR      r0,[r1,#0xc]
;;;1409     
;;;1410     /* Enable the TIM Capture/Compare 2 interrupt */
;;;1411     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000012  6820              LDR      r0,[r4,#0]
000014  68c0              LDR      r0,[r0,#0xc]
000016  f0400004          ORR      r0,r0,#4
00001a  6821              LDR      r1,[r4,#0]
00001c  60c8              STR      r0,[r1,#0xc]
;;;1412     
;;;1413     /* Enable the complementary One Pulse output */
;;;1414     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
00001e  2204              MOVS     r2,#4
000020  4629              MOV      r1,r5
000022  6820              LDR      r0,[r4,#0]
000024  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1415     
;;;1416     /* Enable the Main Output */
;;;1417     __HAL_TIM_MOE_ENABLE(htim);
000028  6820              LDR      r0,[r4,#0]
00002a  6c40              LDR      r0,[r0,#0x44]
00002c  f4404000          ORR      r0,r0,#0x8000
000030  6821              LDR      r1,[r4,#0]
000032  6448              STR      r0,[r1,#0x44]
;;;1418     
;;;1419     /* Return function status */
;;;1420     return HAL_OK;
000034  2000              MOVS     r0,#0
;;;1421     } 
000036  bd70              POP      {r4-r6,pc}
;;;1422     
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Stop PROC
;;;1371     */
;;;1372   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1373   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1374   
;;;1375     /* Check the parameters */
;;;1376     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1377   
;;;1378     /* Disable the complementary One Pulse output */
;;;1379       TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1380     
;;;1381     /* Disable the Main Output */
;;;1382       __HAL_TIM_MOE_DISABLE(htim);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  6a00              LDR      r0,[r0,#0x20]
000016  f2411111          MOV      r1,#0x1111
00001a  4008              ANDS     r0,r0,r1
00001c  b950              CBNZ     r0,|L29.52|
00001e  6820              LDR      r0,[r4,#0]
000020  6a00              LDR      r0,[r0,#0x20]
000022  1089              ASRS     r1,r1,#2
000024  4008              ANDS     r0,r0,r1
000026  b928              CBNZ     r0,|L29.52|
000028  6820              LDR      r0,[r4,#0]
00002a  6c40              LDR      r0,[r0,#0x44]
00002c  f4204000          BIC      r0,r0,#0x8000
000030  6821              LDR      r1,[r4,#0]
000032  6448              STR      r0,[r1,#0x44]
                  |L29.52|
000034  bf00              NOP      
;;;1383     
;;;1384     /* Disable the Peripheral */
;;;1385     __HAL_TIM_DISABLE(htim); 
000036  bf00              NOP      
000038  6820              LDR      r0,[r4,#0]
00003a  6a00              LDR      r0,[r0,#0x20]
00003c  f2411111          MOV      r1,#0x1111
000040  4008              ANDS     r0,r0,r1
000042  b950              CBNZ     r0,|L29.90|
000044  6820              LDR      r0,[r4,#0]
000046  6a00              LDR      r0,[r0,#0x20]
000048  1089              ASRS     r1,r1,#2
00004a  4008              ANDS     r0,r0,r1
00004c  b928              CBNZ     r0,|L29.90|
00004e  6820              LDR      r0,[r4,#0]
000050  6800              LDR      r0,[r0,#0]
000052  f0200001          BIC      r0,r0,#1
000056  6821              LDR      r1,[r4,#0]
000058  6008              STR      r0,[r1,#0]
                  |L29.90|
00005a  bf00              NOP      
;;;1386      
;;;1387     /* Return function status */
;;;1388     return HAL_OK;
00005c  2000              MOVS     r0,#0
;;;1389   }
00005e  bd70              POP      {r4-r6,pc}
;;;1390   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Stop_IT PROC
;;;1433     */
;;;1434   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1435   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1436     /* Check the parameters */
;;;1437     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1438   
;;;1439     /* Disable the TIM Capture/Compare 1 interrupt */
;;;1440     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000006  6820              LDR      r0,[r4,#0]
000008  68c0              LDR      r0,[r0,#0xc]
00000a  f0200002          BIC      r0,r0,#2
00000e  6821              LDR      r1,[r4,#0]
000010  60c8              STR      r0,[r1,#0xc]
;;;1441     
;;;1442     /* Disable the TIM Capture/Compare 2 interrupt */
;;;1443     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000012  6820              LDR      r0,[r4,#0]
000014  68c0              LDR      r0,[r0,#0xc]
000016  f0200004          BIC      r0,r0,#4
00001a  6821              LDR      r1,[r4,#0]
00001c  60c8              STR      r0,[r1,#0xc]
;;;1444     
;;;1445     /* Disable the complementary One Pulse output */
;;;1446     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
00001e  2200              MOVS     r2,#0
000020  4629              MOV      r1,r5
000022  6820              LDR      r0,[r4,#0]
000024  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1447     
;;;1448     /* Disable the Main Output */
;;;1449     __HAL_TIM_MOE_DISABLE(htim);
000028  bf00              NOP      
00002a  6820              LDR      r0,[r4,#0]
00002c  6a00              LDR      r0,[r0,#0x20]
00002e  f2411111          MOV      r1,#0x1111
000032  4008              ANDS     r0,r0,r1
000034  b950              CBNZ     r0,|L30.76|
000036  6820              LDR      r0,[r4,#0]
000038  6a00              LDR      r0,[r0,#0x20]
00003a  1089              ASRS     r1,r1,#2
00003c  4008              ANDS     r0,r0,r1
00003e  b928              CBNZ     r0,|L30.76|
000040  6820              LDR      r0,[r4,#0]
000042  6c40              LDR      r0,[r0,#0x44]
000044  f4204000          BIC      r0,r0,#0x8000
000048  6821              LDR      r1,[r4,#0]
00004a  6448              STR      r0,[r1,#0x44]
                  |L30.76|
00004c  bf00              NOP      
;;;1450     
;;;1451     /* Disable the Peripheral */
;;;1452      __HAL_TIM_DISABLE(htim);  
00004e  bf00              NOP      
000050  6820              LDR      r0,[r4,#0]
000052  6a00              LDR      r0,[r0,#0x20]
000054  f2411111          MOV      r1,#0x1111
000058  4008              ANDS     r0,r0,r1
00005a  b950              CBNZ     r0,|L30.114|
00005c  6820              LDR      r0,[r4,#0]
00005e  6a00              LDR      r0,[r0,#0x20]
000060  1089              ASRS     r1,r1,#2
000062  4008              ANDS     r0,r0,r1
000064  b928              CBNZ     r0,|L30.114|
000066  6820              LDR      r0,[r4,#0]
000068  6800              LDR      r0,[r0,#0]
00006a  f0200001          BIC      r0,r0,#1
00006e  6821              LDR      r1,[r4,#0]
000070  6008              STR      r0,[r1,#0]
                  |L30.114|
000072  bf00              NOP      
;;;1453     
;;;1454     /* Return function status */
;;;1455     return HAL_OK;
000074  2000              MOVS     r0,#0
;;;1456   }
000076  bd70              POP      {r4-r6,pc}
;;;1457   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Start PROC
;;;941      */
;;;942    HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;943    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;944      /* Check the parameters */
;;;945      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;946      
;;;947      /* Enable the complementary PWM output  */
;;;948      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
000006  2204              MOVS     r2,#4
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;949      
;;;950      /* Enable the Main Output */
;;;951      __HAL_TIM_MOE_ENABLE(htim);
000010  6820              LDR      r0,[r4,#0]
000012  6c40              LDR      r0,[r0,#0x44]
000014  f4404000          ORR      r0,r0,#0x8000
000018  6821              LDR      r1,[r4,#0]
00001a  6448              STR      r0,[r1,#0x44]
;;;952      
;;;953      /* Enable the Peripheral */
;;;954      __HAL_TIM_ENABLE(htim);
00001c  6820              LDR      r0,[r4,#0]
00001e  6800              LDR      r0,[r0,#0]
000020  f0400001          ORR      r0,r0,#1
000024  6821              LDR      r1,[r4,#0]
000026  6008              STR      r0,[r1,#0]
;;;955      
;;;956      /* Return function status */
;;;957      return HAL_OK;
000028  2000              MOVS     r0,#0
;;;958    } 
00002a  bd70              POP      {r4-r6,pc}
;;;959    
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_PWMN_Start_DMA PROC
;;;1142     */
;;;1143   HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1144   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;1145     /* Check the parameters */
;;;1146     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1147     
;;;1148     if((htim->State == HAL_TIM_STATE_BUSY))
00000c  6c20              LDR      r0,[r4,#0x40]
00000e  2802              CMP      r0,#2
000010  d101              BNE      |L32.22|
                  |L32.18|
;;;1149     {
;;;1150        return HAL_BUSY;
;;;1151     }
;;;1152     else if((htim->State == HAL_TIM_STATE_READY))
;;;1153     {
;;;1154       if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;1155       {
;;;1156         return HAL_ERROR;                                    
;;;1157       }
;;;1158       else
;;;1159       {
;;;1160         htim->State = HAL_TIM_STATE_BUSY;
;;;1161       }
;;;1162     }    
;;;1163     switch (Channel)
;;;1164     {
;;;1165       case TIM_CHANNEL_1:
;;;1166       {      
;;;1167         /* Set the DMA Period elapsed callback */
;;;1168         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1169        
;;;1170         /* Set the DMA error callback */
;;;1171         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1172         
;;;1173         /* Enable the DMA Stream */
;;;1174         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;1175         
;;;1176         /* Enable the TIM Capture/Compare 1 DMA request */
;;;1177         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;1178       }
;;;1179       break;
;;;1180       
;;;1181       case TIM_CHANNEL_2:
;;;1182       {
;;;1183         /* Set the DMA Period elapsed callback */
;;;1184         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1185        
;;;1186         /* Set the DMA error callback */
;;;1187         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1188         
;;;1189         /* Enable the DMA Stream */
;;;1190         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;1191         
;;;1192         /* Enable the TIM Capture/Compare 2 DMA request */
;;;1193         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;1194       }
;;;1195       break;
;;;1196       
;;;1197       case TIM_CHANNEL_3:
;;;1198       {
;;;1199         /* Set the DMA Period elapsed callback */
;;;1200         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1201        
;;;1202         /* Set the DMA error callback */
;;;1203         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1204         
;;;1205         /* Enable the DMA Stream */
;;;1206         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;1207         
;;;1208         /* Enable the TIM Capture/Compare 3 DMA request */
;;;1209         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;1210       }
;;;1211       break;
;;;1212       
;;;1213       case TIM_CHANNEL_4:
;;;1214       {
;;;1215        /* Set the DMA Period elapsed callback */
;;;1216         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1217        
;;;1218         /* Set the DMA error callback */
;;;1219         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1220         
;;;1221         /* Enable the DMA Stream */
;;;1222         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;1223         
;;;1224         /* Enable the TIM Capture/Compare 4 DMA request */
;;;1225         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;1226       }
;;;1227       break;
;;;1228       
;;;1229       default:
;;;1230       break;
;;;1231     }
;;;1232   
;;;1233     /* Enable the complementary PWM output  */
;;;1234        TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;1235       
;;;1236     /* Enable the Main Output */
;;;1237       __HAL_TIM_MOE_ENABLE(htim);
;;;1238     
;;;1239     /* Enable the Peripheral */
;;;1240     __HAL_TIM_ENABLE(htim); 
;;;1241     
;;;1242     /* Return function status */
;;;1243     return HAL_OK;
;;;1244   }
000012  e8bd81f0          POP      {r4-r8,pc}
                  |L32.22|
000016  6c20              LDR      r0,[r4,#0x40]         ;1152
000018  2801              CMP      r0,#1                 ;1152
00001a  d105              BNE      |L32.40|
00001c  b915              CBNZ     r5,|L32.36|
00001e  2f00              CMP      r7,#0                 ;1154
000020  dd00              BLE      |L32.36|
000022  e7f6              B        |L32.18|
                  |L32.36|
000024  2002              MOVS     r0,#2                 ;1160
000026  6420              STR      r0,[r4,#0x40]         ;1160
                  |L32.40|
000028  b136              CBZ      r6,|L32.56|
00002a  2e04              CMP      r6,#4                 ;1163
00002c  d019              BEQ      |L32.98|
00002e  2e08              CMP      r6,#8                 ;1163
000030  d02c              BEQ      |L32.140|
000032  2e0c              CMP      r6,#0xc               ;1163
000034  d154              BNE      |L32.224|
000036  e03e              B        |L32.182|
                  |L32.56|
000038  4934              LDR      r1,|L32.268|
00003a  6a60              LDR      r0,[r4,#0x24]         ;1168
00003c  6401              STR      r1,[r0,#0x40]         ;1168
00003e  4934              LDR      r1,|L32.272|
000040  6a60              LDR      r0,[r4,#0x24]         ;1171
000042  6501              STR      r1,[r0,#0x50]         ;1171
000044  6821              LDR      r1,[r4,#0]            ;1174
000046  f1010234          ADD      r2,r1,#0x34           ;1174
00004a  463b              MOV      r3,r7                 ;1174
00004c  4629              MOV      r1,r5                 ;1174
00004e  6a60              LDR      r0,[r4,#0x24]         ;1174
000050  f7fffffe          BL       HAL_DMA_Start_IT
000054  6820              LDR      r0,[r4,#0]            ;1177
000056  68c0              LDR      r0,[r0,#0xc]          ;1177
000058  f4407000          ORR      r0,r0,#0x200          ;1177
00005c  6821              LDR      r1,[r4,#0]            ;1177
00005e  60c8              STR      r0,[r1,#0xc]          ;1177
000060  e03f              B        |L32.226|
                  |L32.98|
000062  492a              LDR      r1,|L32.268|
000064  6aa0              LDR      r0,[r4,#0x28]         ;1184
000066  6401              STR      r1,[r0,#0x40]         ;1184
000068  4929              LDR      r1,|L32.272|
00006a  6aa0              LDR      r0,[r4,#0x28]         ;1187
00006c  6501              STR      r1,[r0,#0x50]         ;1187
00006e  6821              LDR      r1,[r4,#0]            ;1190
000070  f1010238          ADD      r2,r1,#0x38           ;1190
000074  463b              MOV      r3,r7                 ;1190
000076  4629              MOV      r1,r5                 ;1190
000078  6aa0              LDR      r0,[r4,#0x28]         ;1190
00007a  f7fffffe          BL       HAL_DMA_Start_IT
00007e  6820              LDR      r0,[r4,#0]            ;1193
000080  68c0              LDR      r0,[r0,#0xc]          ;1193
000082  f4406080          ORR      r0,r0,#0x400          ;1193
000086  6821              LDR      r1,[r4,#0]            ;1193
000088  60c8              STR      r0,[r1,#0xc]          ;1193
00008a  e02a              B        |L32.226|
                  |L32.140|
00008c  491f              LDR      r1,|L32.268|
00008e  6ae0              LDR      r0,[r4,#0x2c]         ;1200
000090  6401              STR      r1,[r0,#0x40]         ;1200
000092  491f              LDR      r1,|L32.272|
000094  6ae0              LDR      r0,[r4,#0x2c]         ;1203
000096  6501              STR      r1,[r0,#0x50]         ;1203
000098  6821              LDR      r1,[r4,#0]            ;1206
00009a  f101023c          ADD      r2,r1,#0x3c           ;1206
00009e  463b              MOV      r3,r7                 ;1206
0000a0  4629              MOV      r1,r5                 ;1206
0000a2  6ae0              LDR      r0,[r4,#0x2c]         ;1206
0000a4  f7fffffe          BL       HAL_DMA_Start_IT
0000a8  6820              LDR      r0,[r4,#0]            ;1209
0000aa  68c0              LDR      r0,[r0,#0xc]          ;1209
0000ac  f4406000          ORR      r0,r0,#0x800          ;1209
0000b0  6821              LDR      r1,[r4,#0]            ;1209
0000b2  60c8              STR      r0,[r1,#0xc]          ;1209
0000b4  e015              B        |L32.226|
                  |L32.182|
0000b6  4915              LDR      r1,|L32.268|
0000b8  6b20              LDR      r0,[r4,#0x30]         ;1216
0000ba  6401              STR      r1,[r0,#0x40]         ;1216
0000bc  4914              LDR      r1,|L32.272|
0000be  6b20              LDR      r0,[r4,#0x30]         ;1219
0000c0  6501              STR      r1,[r0,#0x50]         ;1219
0000c2  6821              LDR      r1,[r4,#0]            ;1222
0000c4  f1010240          ADD      r2,r1,#0x40           ;1222
0000c8  463b              MOV      r3,r7                 ;1222
0000ca  4629              MOV      r1,r5                 ;1222
0000cc  6b20              LDR      r0,[r4,#0x30]         ;1222
0000ce  f7fffffe          BL       HAL_DMA_Start_IT
0000d2  6820              LDR      r0,[r4,#0]            ;1225
0000d4  68c0              LDR      r0,[r0,#0xc]          ;1225
0000d6  f4405080          ORR      r0,r0,#0x1000         ;1225
0000da  6821              LDR      r1,[r4,#0]            ;1225
0000dc  60c8              STR      r0,[r1,#0xc]          ;1225
0000de  e000              B        |L32.226|
                  |L32.224|
0000e0  bf00              NOP                            ;1230
                  |L32.226|
0000e2  bf00              NOP                            ;1179
0000e4  2204              MOVS     r2,#4                 ;1234
0000e6  4631              MOV      r1,r6                 ;1234
0000e8  6820              LDR      r0,[r4,#0]            ;1234
0000ea  f7fffffe          BL       TIM_CCxNChannelCmd
0000ee  6820              LDR      r0,[r4,#0]            ;1237
0000f0  6c40              LDR      r0,[r0,#0x44]         ;1237
0000f2  f4404000          ORR      r0,r0,#0x8000         ;1237
0000f6  6821              LDR      r1,[r4,#0]            ;1237
0000f8  6448              STR      r0,[r1,#0x44]         ;1237
0000fa  6820              LDR      r0,[r4,#0]            ;1240
0000fc  6800              LDR      r0,[r0,#0]            ;1240
0000fe  f0400001          ORR      r0,r0,#1              ;1240
000102  6821              LDR      r1,[r4,#0]            ;1240
000104  6008              STR      r0,[r1,#0]            ;1240
000106  2000              MOVS     r0,#0                 ;1243
000108  e783              B        |L32.18|
;;;1245   
                          ENDP

00010a  0000              DCW      0x0000
                  |L32.268|
                          DCD      TIM_DMADelayPulseCplt
                  |L32.272|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_PWMN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Start_IT PROC
;;;1000     */
;;;1001   HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1002   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1003     /* Check the parameters */
;;;1004     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1005     
;;;1006     switch (Channel)
000006  b135              CBZ      r5,|L33.22|
000008  2d04              CMP      r5,#4
00000a  d00b              BEQ      |L33.36|
00000c  2d08              CMP      r5,#8
00000e  d010              BEQ      |L33.50|
000010  2d0c              CMP      r5,#0xc
000012  d11c              BNE      |L33.78|
000014  e014              B        |L33.64|
                  |L33.22|
;;;1007     {
;;;1008       case TIM_CHANNEL_1:
;;;1009       {       
;;;1010         /* Enable the TIM Capture/Compare 1 interrupt */
;;;1011         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000016  6820              LDR      r0,[r4,#0]
000018  68c0              LDR      r0,[r0,#0xc]
00001a  f0400002          ORR      r0,r0,#2
00001e  6821              LDR      r1,[r4,#0]
000020  60c8              STR      r0,[r1,#0xc]
;;;1012       }
;;;1013       break;
000022  e015              B        |L33.80|
                  |L33.36|
;;;1014       
;;;1015       case TIM_CHANNEL_2:
;;;1016       {
;;;1017         /* Enable the TIM Capture/Compare 2 interrupt */
;;;1018         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000024  6820              LDR      r0,[r4,#0]
000026  68c0              LDR      r0,[r0,#0xc]
000028  f0400004          ORR      r0,r0,#4
00002c  6821              LDR      r1,[r4,#0]
00002e  60c8              STR      r0,[r1,#0xc]
;;;1019       }
;;;1020       break;
000030  e00e              B        |L33.80|
                  |L33.50|
;;;1021       
;;;1022       case TIM_CHANNEL_3:
;;;1023       {
;;;1024         /* Enable the TIM Capture/Compare 3 interrupt */
;;;1025         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
000032  6820              LDR      r0,[r4,#0]
000034  68c0              LDR      r0,[r0,#0xc]
000036  f0400008          ORR      r0,r0,#8
00003a  6821              LDR      r1,[r4,#0]
00003c  60c8              STR      r0,[r1,#0xc]
;;;1026       }
;;;1027       break;
00003e  e007              B        |L33.80|
                  |L33.64|
;;;1028       
;;;1029       case TIM_CHANNEL_4:
;;;1030       {
;;;1031         /* Enable the TIM Capture/Compare 4 interrupt */
;;;1032         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000040  6820              LDR      r0,[r4,#0]
000042  68c0              LDR      r0,[r0,#0xc]
000044  f0400010          ORR      r0,r0,#0x10
000048  6821              LDR      r1,[r4,#0]
00004a  60c8              STR      r0,[r1,#0xc]
;;;1033       }
;;;1034       break;
00004c  e000              B        |L33.80|
                  |L33.78|
;;;1035       
;;;1036       default:
;;;1037       break;
00004e  bf00              NOP      
                  |L33.80|
000050  bf00              NOP                            ;1013
;;;1038     } 
;;;1039     
;;;1040     /* Enable the TIM Break interrupt */
;;;1041     __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
000052  6820              LDR      r0,[r4,#0]
000054  68c0              LDR      r0,[r0,#0xc]
000056  f0400080          ORR      r0,r0,#0x80
00005a  6821              LDR      r1,[r4,#0]
00005c  60c8              STR      r0,[r1,#0xc]
;;;1042     
;;;1043     /* Enable the complementary PWM output  */
;;;1044     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
00005e  2204              MOVS     r2,#4
000060  4629              MOV      r1,r5
000062  6820              LDR      r0,[r4,#0]
000064  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1045     
;;;1046     /* Enable the Main Output */
;;;1047     __HAL_TIM_MOE_ENABLE(htim);
000068  6820              LDR      r0,[r4,#0]
00006a  6c40              LDR      r0,[r0,#0x44]
00006c  f4404000          ORR      r0,r0,#0x8000
000070  6821              LDR      r1,[r4,#0]
000072  6448              STR      r0,[r1,#0x44]
;;;1048     
;;;1049     /* Enable the Peripheral */
;;;1050     __HAL_TIM_ENABLE(htim);
000074  6820              LDR      r0,[r4,#0]
000076  6800              LDR      r0,[r0,#0]
000078  f0400001          ORR      r0,r0,#1
00007c  6821              LDR      r1,[r4,#0]
00007e  6008              STR      r0,[r1,#0]
;;;1051     
;;;1052     /* Return function status */
;;;1053     return HAL_OK;
000080  2000              MOVS     r0,#0
;;;1054   } 
000082  bd70              POP      {r4-r6,pc}
;;;1055   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop PROC
;;;970      */
;;;971    HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;972    { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;973      /* Check the parameters */
;;;974      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;975      
;;;976      /* Disable the complementary PWM output  */
;;;977      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);  
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;978      
;;;979      /* Disable the Main Output */
;;;980      __HAL_TIM_MOE_DISABLE(htim);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  6a00              LDR      r0,[r0,#0x20]
000016  f2411111          MOV      r1,#0x1111
00001a  4008              ANDS     r0,r0,r1
00001c  b950              CBNZ     r0,|L34.52|
00001e  6820              LDR      r0,[r4,#0]
000020  6a00              LDR      r0,[r0,#0x20]
000022  1089              ASRS     r1,r1,#2
000024  4008              ANDS     r0,r0,r1
000026  b928              CBNZ     r0,|L34.52|
000028  6820              LDR      r0,[r4,#0]
00002a  6c40              LDR      r0,[r0,#0x44]
00002c  f4204000          BIC      r0,r0,#0x8000
000030  6821              LDR      r1,[r4,#0]
000032  6448              STR      r0,[r1,#0x44]
                  |L34.52|
000034  bf00              NOP      
;;;981      
;;;982      /* Disable the Peripheral */
;;;983      __HAL_TIM_DISABLE(htim);
000036  bf00              NOP      
000038  6820              LDR      r0,[r4,#0]
00003a  6a00              LDR      r0,[r0,#0x20]
00003c  f2411111          MOV      r1,#0x1111
000040  4008              ANDS     r0,r0,r1
000042  b950              CBNZ     r0,|L34.90|
000044  6820              LDR      r0,[r4,#0]
000046  6a00              LDR      r0,[r0,#0x20]
000048  1089              ASRS     r1,r1,#2
00004a  4008              ANDS     r0,r0,r1
00004c  b928              CBNZ     r0,|L34.90|
00004e  6820              LDR      r0,[r4,#0]
000050  6800              LDR      r0,[r0,#0]
000052  f0200001          BIC      r0,r0,#1
000056  6821              LDR      r1,[r4,#0]
000058  6008              STR      r0,[r1,#0]
                  |L34.90|
00005a  bf00              NOP      
;;;984      
;;;985      /* Return function status */
;;;986      return HAL_OK;
00005c  2000              MOVS     r0,#0
;;;987    } 
00005e  bd70              POP      {r4-r6,pc}
;;;988    
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop_DMA PROC
;;;1257     */
;;;1258   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1259   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1260     /* Check the parameters */
;;;1261     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1262     
;;;1263     switch (Channel)
000006  b135              CBZ      r5,|L35.22|
000008  2d04              CMP      r5,#4
00000a  d00b              BEQ      |L35.36|
00000c  2d08              CMP      r5,#8
00000e  d010              BEQ      |L35.50|
000010  2d0c              CMP      r5,#0xc
000012  d11c              BNE      |L35.78|
000014  e014              B        |L35.64|
                  |L35.22|
;;;1264     {
;;;1265       case TIM_CHANNEL_1:
;;;1266       {       
;;;1267         /* Disable the TIM Capture/Compare 1 DMA request */
;;;1268         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000016  6820              LDR      r0,[r4,#0]
000018  68c0              LDR      r0,[r0,#0xc]
00001a  f4207000          BIC      r0,r0,#0x200
00001e  6821              LDR      r1,[r4,#0]
000020  60c8              STR      r0,[r1,#0xc]
;;;1269       }
;;;1270       break;
000022  e015              B        |L35.80|
                  |L35.36|
;;;1271       
;;;1272       case TIM_CHANNEL_2:
;;;1273       {
;;;1274         /* Disable the TIM Capture/Compare 2 DMA request */
;;;1275         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000024  6820              LDR      r0,[r4,#0]
000026  68c0              LDR      r0,[r0,#0xc]
000028  f4206080          BIC      r0,r0,#0x400
00002c  6821              LDR      r1,[r4,#0]
00002e  60c8              STR      r0,[r1,#0xc]
;;;1276       }
;;;1277       break;
000030  e00e              B        |L35.80|
                  |L35.50|
;;;1278       
;;;1279       case TIM_CHANNEL_3:
;;;1280       {
;;;1281         /* Disable the TIM Capture/Compare 3 DMA request */
;;;1282         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
000032  6820              LDR      r0,[r4,#0]
000034  68c0              LDR      r0,[r0,#0xc]
000036  f4206000          BIC      r0,r0,#0x800
00003a  6821              LDR      r1,[r4,#0]
00003c  60c8              STR      r0,[r1,#0xc]
;;;1283       }
;;;1284       break;
00003e  e007              B        |L35.80|
                  |L35.64|
;;;1285       
;;;1286       case TIM_CHANNEL_4:
;;;1287       {
;;;1288         /* Disable the TIM Capture/Compare 4 DMA request */
;;;1289         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
000040  6820              LDR      r0,[r4,#0]
000042  68c0              LDR      r0,[r0,#0xc]
000044  f4205080          BIC      r0,r0,#0x1000
000048  6821              LDR      r1,[r4,#0]
00004a  60c8              STR      r0,[r1,#0xc]
;;;1290       }
;;;1291       break;
00004c  e000              B        |L35.80|
                  |L35.78|
;;;1292       
;;;1293       default:
;;;1294       break;
00004e  bf00              NOP      
                  |L35.80|
000050  bf00              NOP                            ;1270
;;;1295     } 
;;;1296     
;;;1297     /* Disable the complementary PWM output */
;;;1298       TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000052  2200              MOVS     r2,#0
000054  4629              MOV      r1,r5
000056  6820              LDR      r0,[r4,#0]
000058  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1299        
;;;1300     /* Disable the Main Output */
;;;1301       __HAL_TIM_MOE_DISABLE(htim);
00005c  bf00              NOP      
00005e  6820              LDR      r0,[r4,#0]
000060  6a00              LDR      r0,[r0,#0x20]
000062  f2411111          MOV      r1,#0x1111
000066  4008              ANDS     r0,r0,r1
000068  b950              CBNZ     r0,|L35.128|
00006a  6820              LDR      r0,[r4,#0]
00006c  6a00              LDR      r0,[r0,#0x20]
00006e  1089              ASRS     r1,r1,#2
000070  4008              ANDS     r0,r0,r1
000072  b928              CBNZ     r0,|L35.128|
000074  6820              LDR      r0,[r4,#0]
000076  6c40              LDR      r0,[r0,#0x44]
000078  f4204000          BIC      r0,r0,#0x8000
00007c  6821              LDR      r1,[r4,#0]
00007e  6448              STR      r0,[r1,#0x44]
                  |L35.128|
000080  bf00              NOP      
;;;1302   
;;;1303     /* Disable the Peripheral */
;;;1304     __HAL_TIM_DISABLE(htim);
000082  bf00              NOP      
000084  6820              LDR      r0,[r4,#0]
000086  6a00              LDR      r0,[r0,#0x20]
000088  f2411111          MOV      r1,#0x1111
00008c  4008              ANDS     r0,r0,r1
00008e  b950              CBNZ     r0,|L35.166|
000090  6820              LDR      r0,[r4,#0]
000092  6a00              LDR      r0,[r0,#0x20]
000094  1089              ASRS     r1,r1,#2
000096  4008              ANDS     r0,r0,r1
000098  b928              CBNZ     r0,|L35.166|
00009a  6820              LDR      r0,[r4,#0]
00009c  6800              LDR      r0,[r0,#0]
00009e  f0200001          BIC      r0,r0,#1
0000a2  6821              LDR      r1,[r4,#0]
0000a4  6008              STR      r0,[r1,#0]
                  |L35.166|
0000a6  bf00              NOP      
;;;1305     
;;;1306     /* Change the htim state */
;;;1307     htim->State = HAL_TIM_STATE_READY;
0000a8  2001              MOVS     r0,#1
0000aa  6420              STR      r0,[r4,#0x40]
;;;1308     
;;;1309     /* Return function status */
;;;1310     return HAL_OK;
0000ac  2000              MOVS     r0,#0
;;;1311   }
0000ae  bd70              POP      {r4-r6,pc}
;;;1312   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop_IT PROC
;;;1067     */
;;;1068   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1069   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1070     uint32_t tmpccer = 0;
000006  2600              MOVS     r6,#0
;;;1071     
;;;1072     /* Check the parameters */
;;;1073     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1074   
;;;1075     switch (Channel)
000008  b135              CBZ      r5,|L36.24|
00000a  2d04              CMP      r5,#4
00000c  d00b              BEQ      |L36.38|
00000e  2d08              CMP      r5,#8
000010  d010              BEQ      |L36.52|
000012  2d0c              CMP      r5,#0xc
000014  d11c              BNE      |L36.80|
000016  e014              B        |L36.66|
                  |L36.24|
;;;1076     {
;;;1077       case TIM_CHANNEL_1:
;;;1078       {       
;;;1079         /* Disable the TIM Capture/Compare 1 interrupt */
;;;1080         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000018  6820              LDR      r0,[r4,#0]
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  f0200002          BIC      r0,r0,#2
000020  6821              LDR      r1,[r4,#0]
000022  60c8              STR      r0,[r1,#0xc]
;;;1081       }
;;;1082       break;
000024  e015              B        |L36.82|
                  |L36.38|
;;;1083       
;;;1084       case TIM_CHANNEL_2:
;;;1085       {
;;;1086         /* Disable the TIM Capture/Compare 2 interrupt */
;;;1087         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000026  6820              LDR      r0,[r4,#0]
000028  68c0              LDR      r0,[r0,#0xc]
00002a  f0200004          BIC      r0,r0,#4
00002e  6821              LDR      r1,[r4,#0]
000030  60c8              STR      r0,[r1,#0xc]
;;;1088       }
;;;1089       break;
000032  e00e              B        |L36.82|
                  |L36.52|
;;;1090       
;;;1091       case TIM_CHANNEL_3:
;;;1092       {
;;;1093         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1094         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000034  6820              LDR      r0,[r4,#0]
000036  68c0              LDR      r0,[r0,#0xc]
000038  f0200008          BIC      r0,r0,#8
00003c  6821              LDR      r1,[r4,#0]
00003e  60c8              STR      r0,[r1,#0xc]
;;;1095       }
;;;1096       break;
000040  e007              B        |L36.82|
                  |L36.66|
;;;1097       
;;;1098       case TIM_CHANNEL_4:
;;;1099       {
;;;1100         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1101         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
000042  6820              LDR      r0,[r4,#0]
000044  68c0              LDR      r0,[r0,#0xc]
000046  f0200010          BIC      r0,r0,#0x10
00004a  6821              LDR      r1,[r4,#0]
00004c  60c8              STR      r0,[r1,#0xc]
;;;1102       }
;;;1103       break;
00004e  e000              B        |L36.82|
                  |L36.80|
;;;1104       
;;;1105       default:
;;;1106       break; 
000050  bf00              NOP      
                  |L36.82|
000052  bf00              NOP                            ;1082
;;;1107     }
;;;1108     
;;;1109     /* Disable the complementary PWM output  */
;;;1110     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000054  2200              MOVS     r2,#0
000056  4629              MOV      r1,r5
000058  6820              LDR      r0,[r4,#0]
00005a  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1111     
;;;1112     /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;1113     tmpccer = htim->Instance->CCER;
00005e  6820              LDR      r0,[r4,#0]
000060  6a06              LDR      r6,[r0,#0x20]
;;;1114     if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
000062  f2404044          MOV      r0,#0x444
000066  4030              ANDS     r0,r0,r6
000068  b928              CBNZ     r0,|L36.118|
;;;1115     {
;;;1116       __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
00006a  6820              LDR      r0,[r4,#0]
00006c  68c0              LDR      r0,[r0,#0xc]
00006e  f0200080          BIC      r0,r0,#0x80
000072  6821              LDR      r1,[r4,#0]
000074  60c8              STR      r0,[r1,#0xc]
                  |L36.118|
;;;1117     }
;;;1118     
;;;1119     /* Disable the Main Output */
;;;1120     __HAL_TIM_MOE_DISABLE(htim);
000076  bf00              NOP      
000078  6820              LDR      r0,[r4,#0]
00007a  6a00              LDR      r0,[r0,#0x20]
00007c  f2411111          MOV      r1,#0x1111
000080  4008              ANDS     r0,r0,r1
000082  b950              CBNZ     r0,|L36.154|
000084  6820              LDR      r0,[r4,#0]
000086  6a00              LDR      r0,[r0,#0x20]
000088  1089              ASRS     r1,r1,#2
00008a  4008              ANDS     r0,r0,r1
00008c  b928              CBNZ     r0,|L36.154|
00008e  6820              LDR      r0,[r4,#0]
000090  6c40              LDR      r0,[r0,#0x44]
000092  f4204000          BIC      r0,r0,#0x8000
000096  6821              LDR      r1,[r4,#0]
000098  6448              STR      r0,[r1,#0x44]
                  |L36.154|
00009a  bf00              NOP      
;;;1121     
;;;1122     /* Disable the Peripheral */
;;;1123     __HAL_TIM_DISABLE(htim);
00009c  bf00              NOP      
00009e  6820              LDR      r0,[r4,#0]
0000a0  6a00              LDR      r0,[r0,#0x20]
0000a2  f2411111          MOV      r1,#0x1111
0000a6  4008              ANDS     r0,r0,r1
0000a8  b950              CBNZ     r0,|L36.192|
0000aa  6820              LDR      r0,[r4,#0]
0000ac  6a00              LDR      r0,[r0,#0x20]
0000ae  1089              ASRS     r1,r1,#2
0000b0  4008              ANDS     r0,r0,r1
0000b2  b928              CBNZ     r0,|L36.192|
0000b4  6820              LDR      r0,[r4,#0]
0000b6  6800              LDR      r0,[r0,#0]
0000b8  f0200001          BIC      r0,r0,#1
0000bc  6821              LDR      r1,[r4,#0]
0000be  6008              STR      r0,[r1,#0]
                  |L36.192|
0000c0  bf00              NOP      
;;;1124     
;;;1125     /* Return function status */
;;;1126     return HAL_OK;
0000c2  2000              MOVS     r0,#0
;;;1127   } 
0000c4  bd70              POP      {r4-r6,pc}
;;;1128   
                          ENDP


                          AREA ||i.HAL_TIMEx_RemapConfig||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_RemapConfig PROC
;;;1896     */
;;;1897   HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
000000  4602              MOV      r2,r0
;;;1898   {
;;;1899     __HAL_LOCK(htim);
000002  bf00              NOP      
000004  6bd0              LDR      r0,[r2,#0x3c]
000006  2801              CMP      r0,#1
000008  d101              BNE      |L37.14|
00000a  2002              MOVS     r0,#2
                  |L37.12|
;;;1900       
;;;1901     /* Check parameters */
;;;1902     assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
;;;1903     assert_param(IS_TIM_REMAP(Remap));
;;;1904     
;;;1905     /* Set the Timer remapping configuration */
;;;1906     htim->Instance->OR = Remap;
;;;1907     
;;;1908     htim->State = HAL_TIM_STATE_READY;
;;;1909     
;;;1910     __HAL_UNLOCK(htim);  
;;;1911     
;;;1912     return HAL_OK;
;;;1913   }
00000c  4770              BX       lr
                  |L37.14|
00000e  2001              MOVS     r0,#1                 ;1899
000010  63d0              STR      r0,[r2,#0x3c]         ;1899
000012  bf00              NOP                            ;1899
000014  6810              LDR      r0,[r2,#0]            ;1906
000016  6501              STR      r1,[r0,#0x50]         ;1906
000018  2001              MOVS     r0,#1                 ;1908
00001a  6410              STR      r0,[r2,#0x40]         ;1908
00001c  bf00              NOP                            ;1910
00001e  2000              MOVS     r0,#0                 ;1910
000020  63d0              STR      r0,[r2,#0x3c]         ;1910
000022  bf00              NOP                            ;1910
000024  bf00              NOP                            ;1912
000026  e7f1              B        |L37.12|
;;;1914   
                          ENDP


                          AREA ||i.HAL_TIM_ConfigOCrefClear||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ConfigOCrefClear PROC
;;;2071     */ 
;;;2072   HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2073                                              TIM_ClearInputConfigTypeDef *sClearInputConfig,
;;;2074                                              uint32_t Channel)
;;;2075   { 
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;2076     uint32_t tmpsmcr = 0;
00000a  2700              MOVS     r7,#0
;;;2077   
;;;2078     /* Check the parameters */ 
;;;2079     assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
;;;2080     assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));
;;;2081                                           
;;;2082     /* Check input state */
;;;2083     __HAL_LOCK(htim);
00000c  bf00              NOP      
00000e  6be0              LDR      r0,[r4,#0x3c]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L38.26|
000014  2002              MOVS     r0,#2
                  |L38.22|
;;;2084     
;;;2085     switch (sClearInputConfig->ClearInputSource)
;;;2086     {
;;;2087       case TIM_CLEARINPUTSOURCE_NONE:
;;;2088       {
;;;2089         /* Get the TIMx SMCR register value */
;;;2090         tmpsmcr = htim->Instance->SMCR;
;;;2091         
;;;2092         /* Clear the ETR Bits */
;;;2093         tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
;;;2094         
;;;2095         /* Set TIMx_SMCR */
;;;2096         htim->Instance->SMCR = tmpsmcr;
;;;2097      }
;;;2098       break;
;;;2099   
;;;2100       case TIM_CLEARINPUTSOURCE_ETR:
;;;2101       {
;;;2102         /* Check the parameters */ 
;;;2103         assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
;;;2104         assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
;;;2105         assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));
;;;2106         
;;;2107         TIM_ETR_SetConfig(htim->Instance,
;;;2108                           sClearInputConfig->ClearInputPrescaler,
;;;2109                           sClearInputConfig->ClearInputPolarity,
;;;2110                           sClearInputConfig->ClearInputFilter);
;;;2111       }
;;;2112       break;
;;;2113       default:  
;;;2114       break;
;;;2115     }
;;;2116     
;;;2117     switch (Channel)
;;;2118     { 
;;;2119       case TIM_CHANNEL_1:
;;;2120         {
;;;2121           if(sClearInputConfig->ClearInputState != RESET)
;;;2122           {
;;;2123             /* Enable the Ocref clear feature for Channel 1 */
;;;2124             htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
;;;2125           }
;;;2126           else
;;;2127           {
;;;2128             /* Disable the Ocref clear feature for Channel 1 */
;;;2129             htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;      
;;;2130           }
;;;2131         }    
;;;2132         break;
;;;2133       case TIM_CHANNEL_2:    
;;;2134         {
;;;2135           if(sClearInputConfig->ClearInputState != RESET)
;;;2136           {
;;;2137             /* Enable the Ocref clear feature for Channel 2 */
;;;2138             htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
;;;2139           }
;;;2140           else
;;;2141           {
;;;2142             /* Disable the Ocref clear feature for Channel 2 */
;;;2143             htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;      
;;;2144           }
;;;2145         }    
;;;2146       break;
;;;2147       case TIM_CHANNEL_3:    
;;;2148         {
;;;2149           if(sClearInputConfig->ClearInputState != RESET)
;;;2150           {
;;;2151             /* Enable the Ocref clear feature for Channel 3 */
;;;2152             htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
;;;2153           }
;;;2154           else
;;;2155           {
;;;2156             /* Disable the Ocref clear feature for Channel 3 */
;;;2157             htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;      
;;;2158           }
;;;2159         }    
;;;2160       break;
;;;2161       case TIM_CHANNEL_4:    
;;;2162         {
;;;2163           if(sClearInputConfig->ClearInputState != RESET)
;;;2164           {
;;;2165             /* Enable the Ocref clear feature for Channel 4 */
;;;2166             htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
;;;2167           }
;;;2168           else
;;;2169           {
;;;2170             /* Disable the Ocref clear feature for Channel 4 */
;;;2171             htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;      
;;;2172           }
;;;2173         }    
;;;2174       break;
;;;2175       case TIM_CHANNEL_5:    
;;;2176         {
;;;2177           if(sClearInputConfig->ClearInputState != RESET)
;;;2178           {
;;;2179             /* Enable the Ocref clear feature for Channel 1 */
;;;2180             htim->Instance->CCMR3 |= TIM_CCMR3_OC5CE;
;;;2181           }
;;;2182           else
;;;2183           {
;;;2184             /* Disable the Ocref clear feature for Channel 1 */
;;;2185             htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5CE;      
;;;2186           }
;;;2187         }    
;;;2188       break;
;;;2189       case TIM_CHANNEL_6:    
;;;2190         {
;;;2191           if(sClearInputConfig->ClearInputState != RESET)
;;;2192           {
;;;2193             /* Enable the Ocref clear feature for Channel 1 */
;;;2194             htim->Instance->CCMR3 |= TIM_CCMR3_OC6CE;
;;;2195           }
;;;2196           else
;;;2197           {
;;;2198             /* Disable the Ocref clear feature for Channel 1 */
;;;2199             htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6CE;      
;;;2200           }
;;;2201         }    
;;;2202       break;
;;;2203       default:  
;;;2204       break;
;;;2205     } 
;;;2206     
;;;2207     __HAL_UNLOCK(htim);
;;;2208   
;;;2209     return HAL_OK;  
;;;2210   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L38.26|
00001a  2001              MOVS     r0,#1                 ;2083
00001c  63e0              STR      r0,[r4,#0x3c]         ;2083
00001e  bf00              NOP                            ;2083
000020  6868              LDR      r0,[r5,#4]            ;2085
000022  b110              CBZ      r0,|L38.42|
000024  2801              CMP      r0,#1                 ;2085
000026  d10e              BNE      |L38.70|
000028  e006              B        |L38.56|
                  |L38.42|
00002a  6820              LDR      r0,[r4,#0]            ;2090
00002c  6887              LDR      r7,[r0,#8]            ;2090
00002e  f427477f          BIC      r7,r7,#0xff00         ;2093
000032  6820              LDR      r0,[r4,#0]            ;2096
000034  6087              STR      r7,[r0,#8]            ;2096
000036  e007              B        |L38.72|
                  |L38.56|
000038  e9d51303          LDRD     r1,r3,[r5,#0xc]       ;2107
00003c  68aa              LDR      r2,[r5,#8]            ;2107
00003e  6820              LDR      r0,[r4,#0]            ;2107
000040  f7fffffe          BL       TIM_ETR_SetConfig
000044  e000              B        |L38.72|
                  |L38.70|
000046  bf00              NOP                            ;2114
                  |L38.72|
000048  bf00              NOP                            ;2098
00004a  2e0c              CMP      r6,#0xc               ;2117
00004c  d03b              BEQ      |L38.198|
00004e  dc05              BGT      |L38.92|
000050  b14e              CBZ      r6,|L38.102|
000052  2e04              CMP      r6,#4                 ;2117
000054  d017              BEQ      |L38.134|
000056  2e08              CMP      r6,#8                 ;2117
000058  d165              BNE      |L38.294|
00005a  e024              B        |L38.166|
                  |L38.92|
00005c  2e10              CMP      r6,#0x10              ;2117
00005e  d042              BEQ      |L38.230|
000060  2e14              CMP      r6,#0x14              ;2117
000062  d160              BNE      |L38.294|
000064  e04f              B        |L38.262|
                  |L38.102|
000066  6828              LDR      r0,[r5,#0]            ;2121
000068  b130              CBZ      r0,|L38.120|
00006a  6820              LDR      r0,[r4,#0]            ;2124
00006c  6980              LDR      r0,[r0,#0x18]         ;2124
00006e  f0400080          ORR      r0,r0,#0x80           ;2124
000072  6821              LDR      r1,[r4,#0]            ;2124
000074  6188              STR      r0,[r1,#0x18]         ;2124
000076  e005              B        |L38.132|
                  |L38.120|
000078  6820              LDR      r0,[r4,#0]            ;2129
00007a  6980              LDR      r0,[r0,#0x18]         ;2129
00007c  f0200080          BIC      r0,r0,#0x80           ;2129
000080  6821              LDR      r1,[r4,#0]            ;2129
000082  6188              STR      r0,[r1,#0x18]         ;2129
                  |L38.132|
000084  e050              B        |L38.296|
                  |L38.134|
000086  6828              LDR      r0,[r5,#0]            ;2135
000088  b130              CBZ      r0,|L38.152|
00008a  6820              LDR      r0,[r4,#0]            ;2138
00008c  6980              LDR      r0,[r0,#0x18]         ;2138
00008e  f4404000          ORR      r0,r0,#0x8000         ;2138
000092  6821              LDR      r1,[r4,#0]            ;2138
000094  6188              STR      r0,[r1,#0x18]         ;2138
000096  e005              B        |L38.164|
                  |L38.152|
000098  6820              LDR      r0,[r4,#0]            ;2143
00009a  6980              LDR      r0,[r0,#0x18]         ;2143
00009c  f4204000          BIC      r0,r0,#0x8000         ;2143
0000a0  6821              LDR      r1,[r4,#0]            ;2143
0000a2  6188              STR      r0,[r1,#0x18]         ;2143
                  |L38.164|
0000a4  e040              B        |L38.296|
                  |L38.166|
0000a6  6828              LDR      r0,[r5,#0]            ;2149
0000a8  b130              CBZ      r0,|L38.184|
0000aa  6820              LDR      r0,[r4,#0]            ;2152
0000ac  69c0              LDR      r0,[r0,#0x1c]         ;2152
0000ae  f0400080          ORR      r0,r0,#0x80           ;2152
0000b2  6821              LDR      r1,[r4,#0]            ;2152
0000b4  61c8              STR      r0,[r1,#0x1c]         ;2152
0000b6  e005              B        |L38.196|
                  |L38.184|
0000b8  6820              LDR      r0,[r4,#0]            ;2157
0000ba  69c0              LDR      r0,[r0,#0x1c]         ;2157
0000bc  f0200080          BIC      r0,r0,#0x80           ;2157
0000c0  6821              LDR      r1,[r4,#0]            ;2157
0000c2  61c8              STR      r0,[r1,#0x1c]         ;2157
                  |L38.196|
0000c4  e030              B        |L38.296|
                  |L38.198|
0000c6  6828              LDR      r0,[r5,#0]            ;2163
0000c8  b130              CBZ      r0,|L38.216|
0000ca  6820              LDR      r0,[r4,#0]            ;2166
0000cc  69c0              LDR      r0,[r0,#0x1c]         ;2166
0000ce  f4404000          ORR      r0,r0,#0x8000         ;2166
0000d2  6821              LDR      r1,[r4,#0]            ;2166
0000d4  61c8              STR      r0,[r1,#0x1c]         ;2166
0000d6  e005              B        |L38.228|
                  |L38.216|
0000d8  6820              LDR      r0,[r4,#0]            ;2171
0000da  69c0              LDR      r0,[r0,#0x1c]         ;2171
0000dc  f4204000          BIC      r0,r0,#0x8000         ;2171
0000e0  6821              LDR      r1,[r4,#0]            ;2171
0000e2  61c8              STR      r0,[r1,#0x1c]         ;2171
                  |L38.228|
0000e4  e020              B        |L38.296|
                  |L38.230|
0000e6  6828              LDR      r0,[r5,#0]            ;2177
0000e8  b130              CBZ      r0,|L38.248|
0000ea  6820              LDR      r0,[r4,#0]            ;2180
0000ec  6d40              LDR      r0,[r0,#0x54]         ;2180
0000ee  f0400080          ORR      r0,r0,#0x80           ;2180
0000f2  6821              LDR      r1,[r4,#0]            ;2180
0000f4  6548              STR      r0,[r1,#0x54]         ;2180
0000f6  e005              B        |L38.260|
                  |L38.248|
0000f8  6820              LDR      r0,[r4,#0]            ;2185
0000fa  6d40              LDR      r0,[r0,#0x54]         ;2185
0000fc  f0200080          BIC      r0,r0,#0x80           ;2185
000100  6821              LDR      r1,[r4,#0]            ;2185
000102  6548              STR      r0,[r1,#0x54]         ;2185
                  |L38.260|
000104  e010              B        |L38.296|
                  |L38.262|
000106  6828              LDR      r0,[r5,#0]            ;2191
000108  b130              CBZ      r0,|L38.280|
00010a  6820              LDR      r0,[r4,#0]            ;2194
00010c  6d40              LDR      r0,[r0,#0x54]         ;2194
00010e  f4404000          ORR      r0,r0,#0x8000         ;2194
000112  6821              LDR      r1,[r4,#0]            ;2194
000114  6548              STR      r0,[r1,#0x54]         ;2194
000116  e005              B        |L38.292|
                  |L38.280|
000118  6820              LDR      r0,[r4,#0]            ;2199
00011a  6d40              LDR      r0,[r0,#0x54]         ;2199
00011c  f4204000          BIC      r0,r0,#0x8000         ;2199
000120  6821              LDR      r1,[r4,#0]            ;2199
000122  6548              STR      r0,[r1,#0x54]         ;2199
                  |L38.292|
000124  e000              B        |L38.296|
                  |L38.294|
000126  bf00              NOP                            ;2204
                  |L38.296|
000128  bf00              NOP                            ;2132
00012a  bf00              NOP                            ;2207
00012c  2000              MOVS     r0,#0                 ;2207
00012e  63e0              STR      r0,[r4,#0x3c]         ;2207
000130  bf00              NOP                            ;2207
000132  bf00              NOP                            ;2209
000134  e76f              B        |L38.22|
;;;2211   
                          ENDP


                          AREA ||i.HAL_TIM_OC_ConfigChannel||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_ConfigChannel PROC
;;;2226     */
;;;2227   HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;2228   {  
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;2229     /* Check the parameters */
;;;2230     assert_param(IS_TIM_CHANNELS(Channel)); 
;;;2231     assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
;;;2232     assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
;;;2233     
;;;2234     /* Check input state */
;;;2235     __HAL_LOCK(htim); 
000008  bf00              NOP      
00000a  6be0              LDR      r0,[r4,#0x3c]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L39.20|
000010  2002              MOVS     r0,#2
                  |L39.18|
;;;2236     
;;;2237     htim->State = HAL_TIM_STATE_BUSY;
;;;2238     
;;;2239     switch (Channel)
;;;2240     {
;;;2241       case TIM_CHANNEL_1:
;;;2242       {
;;;2243         /* Check the parameters */
;;;2244         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
;;;2245         
;;;2246        /* Configure the TIM Channel 1 in Output Compare */
;;;2247         TIM_OC1_SetConfig(htim->Instance, sConfig);
;;;2248       }
;;;2249       break;
;;;2250       
;;;2251       case TIM_CHANNEL_2:
;;;2252       {
;;;2253         /* Check the parameters */
;;;2254         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
;;;2255         
;;;2256         /* Configure the TIM Channel 2 in Output Compare */
;;;2257         TIM_OC2_SetConfig(htim->Instance, sConfig);
;;;2258       }
;;;2259       break;
;;;2260       
;;;2261       case TIM_CHANNEL_3:
;;;2262       {
;;;2263         /* Check the parameters */
;;;2264         assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
;;;2265         
;;;2266         /* Configure the TIM Channel 3 in Output Compare */
;;;2267         TIM_OC3_SetConfig(htim->Instance, sConfig);
;;;2268       }
;;;2269       break;
;;;2270       
;;;2271       case TIM_CHANNEL_4:
;;;2272       {
;;;2273         /* Check the parameters */
;;;2274         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
;;;2275         
;;;2276          /* Configure the TIM Channel 4 in Output Compare */
;;;2277          TIM_OC4_SetConfig(htim->Instance, sConfig);
;;;2278       }
;;;2279       break;
;;;2280       
;;;2281       case TIM_CHANNEL_5:
;;;2282       {
;;;2283         /* Check the parameters */
;;;2284         assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
;;;2285         
;;;2286          /* Configure the TIM Channel 5 in Output Compare */
;;;2287          TIM_OC5_SetConfig(htim->Instance, sConfig);
;;;2288       }
;;;2289       break;
;;;2290       
;;;2291       case TIM_CHANNEL_6:
;;;2292       {
;;;2293         /* Check the parameters */
;;;2294         assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
;;;2295         
;;;2296          /* Configure the TIM Channel 6 in Output Compare */
;;;2297          TIM_OC6_SetConfig(htim->Instance, sConfig);
;;;2298       }
;;;2299       break;
;;;2300           
;;;2301       default:
;;;2302       break;    
;;;2303     }
;;;2304     
;;;2305     htim->State = HAL_TIM_STATE_READY;
;;;2306     
;;;2307     __HAL_UNLOCK(htim); 
;;;2308     
;;;2309     return HAL_OK;
;;;2310   }
000012  bd70              POP      {r4-r6,pc}
                  |L39.20|
000014  2001              MOVS     r0,#1                 ;2235
000016  63e0              STR      r0,[r4,#0x3c]         ;2235
000018  bf00              NOP                            ;2235
00001a  2002              MOVS     r0,#2                 ;2237
00001c  6420              STR      r0,[r4,#0x40]         ;2237
00001e  2d0c              CMP      r5,#0xc               ;2239
000020  d01a              BEQ      |L39.88|
000022  dc05              BGT      |L39.48|
000024  b14d              CBZ      r5,|L39.58|
000026  2d04              CMP      r5,#4                 ;2239
000028  d00c              BEQ      |L39.68|
00002a  2d08              CMP      r5,#8                 ;2239
00002c  d123              BNE      |L39.118|
00002e  e00e              B        |L39.78|
                  |L39.48|
000030  2d10              CMP      r5,#0x10              ;2239
000032  d016              BEQ      |L39.98|
000034  2d14              CMP      r5,#0x14              ;2239
000036  d11e              BNE      |L39.118|
000038  e018              B        |L39.108|
                  |L39.58|
00003a  4631              MOV      r1,r6                 ;2247
00003c  6820              LDR      r0,[r4,#0]            ;2247
00003e  f7fffffe          BL       TIM_OC1_SetConfig
000042  e019              B        |L39.120|
                  |L39.68|
000044  4631              MOV      r1,r6                 ;2257
000046  6820              LDR      r0,[r4,#0]            ;2257
000048  f7fffffe          BL       TIM_OC2_SetConfig
00004c  e014              B        |L39.120|
                  |L39.78|
00004e  4631              MOV      r1,r6                 ;2267
000050  6820              LDR      r0,[r4,#0]            ;2267
000052  f7fffffe          BL       TIM_OC3_SetConfig
000056  e00f              B        |L39.120|
                  |L39.88|
000058  4631              MOV      r1,r6                 ;2277
00005a  6820              LDR      r0,[r4,#0]            ;2277
00005c  f7fffffe          BL       TIM_OC4_SetConfig
000060  e00a              B        |L39.120|
                  |L39.98|
000062  4631              MOV      r1,r6                 ;2287
000064  6820              LDR      r0,[r4,#0]            ;2287
000066  f7fffffe          BL       TIM_OC5_SetConfig
00006a  e005              B        |L39.120|
                  |L39.108|
00006c  4631              MOV      r1,r6                 ;2297
00006e  6820              LDR      r0,[r4,#0]            ;2297
000070  f7fffffe          BL       TIM_OC6_SetConfig
000074  e000              B        |L39.120|
                  |L39.118|
000076  bf00              NOP                            ;2302
                  |L39.120|
000078  bf00              NOP                            ;2249
00007a  2001              MOVS     r0,#1                 ;2305
00007c  6420              STR      r0,[r4,#0x40]         ;2305
00007e  bf00              NOP                            ;2307
000080  2000              MOVS     r0,#0                 ;2307
000082  63e0              STR      r0,[r4,#0x3c]         ;2307
000084  bf00              NOP                            ;2307
000086  bf00              NOP                            ;2309
000088  e7c3              B        |L39.18|
;;;2311   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_ConfigChannel||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_ConfigChannel PROC
;;;2326     */
;;;2327   HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
000000  b570              PUSH     {r4-r6,lr}
;;;2328                                               TIM_OC_InitTypeDef* sConfig, 
;;;2329                                               uint32_t Channel)
;;;2330   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;2331     /* Check the parameters */
;;;2332     assert_param(IS_TIM_CHANNELS(Channel)); 
;;;2333     assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
;;;2334     assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
;;;2335     assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
;;;2336     
;;;2337     /* Check input state */
;;;2338     __HAL_LOCK(htim);
000008  bf00              NOP      
00000a  6be0              LDR      r0,[r4,#0x3c]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L40.20|
000010  2002              MOVS     r0,#2
                  |L40.18|
;;;2339     
;;;2340     htim->State = HAL_TIM_STATE_BUSY;
;;;2341       
;;;2342     switch (Channel)
;;;2343     {
;;;2344       case TIM_CHANNEL_1:
;;;2345       {
;;;2346         /* Check the parameters */
;;;2347         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
;;;2348         
;;;2349         /* Configure the Channel 1 in PWM mode */
;;;2350         TIM_OC1_SetConfig(htim->Instance, sConfig);
;;;2351         
;;;2352         /* Set the Preload enable bit for channel1 */
;;;2353         htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
;;;2354         
;;;2355         /* Configure the Output Fast mode */
;;;2356         htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
;;;2357         htim->Instance->CCMR1 |= sConfig->OCFastMode;
;;;2358       }
;;;2359       break;
;;;2360       
;;;2361       case TIM_CHANNEL_2:
;;;2362       {
;;;2363         /* Check the parameters */
;;;2364         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
;;;2365         
;;;2366         /* Configure the Channel 2 in PWM mode */
;;;2367         TIM_OC2_SetConfig(htim->Instance, sConfig);
;;;2368         
;;;2369         /* Set the Preload enable bit for channel2 */
;;;2370         htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
;;;2371         
;;;2372         /* Configure the Output Fast mode */
;;;2373         htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
;;;2374         htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
;;;2375       }
;;;2376       break;
;;;2377       
;;;2378       case TIM_CHANNEL_3:
;;;2379       {
;;;2380         /* Check the parameters */
;;;2381         assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
;;;2382         
;;;2383         /* Configure the Channel 3 in PWM mode */
;;;2384         TIM_OC3_SetConfig(htim->Instance, sConfig);
;;;2385         
;;;2386         /* Set the Preload enable bit for channel3 */
;;;2387         htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
;;;2388         
;;;2389        /* Configure the Output Fast mode */
;;;2390         htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
;;;2391         htim->Instance->CCMR2 |= sConfig->OCFastMode;  
;;;2392       }
;;;2393       break;
;;;2394       
;;;2395       case TIM_CHANNEL_4:
;;;2396       {
;;;2397         /* Check the parameters */
;;;2398         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
;;;2399         
;;;2400         /* Configure the Channel 4 in PWM mode */
;;;2401         TIM_OC4_SetConfig(htim->Instance, sConfig);
;;;2402         
;;;2403         /* Set the Preload enable bit for channel4 */
;;;2404         htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
;;;2405         
;;;2406        /* Configure the Output Fast mode */
;;;2407         htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
;;;2408         htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
;;;2409       }
;;;2410       break;
;;;2411       
;;;2412       case TIM_CHANNEL_5:
;;;2413       {
;;;2414          /* Check the parameters */
;;;2415         assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
;;;2416         
;;;2417        /* Configure the Channel 5 in PWM mode */
;;;2418         TIM_OC5_SetConfig(htim->Instance, sConfig);
;;;2419         
;;;2420         /* Set the Preload enable bit for channel5*/
;;;2421         htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
;;;2422         
;;;2423        /* Configure the Output Fast mode */
;;;2424         htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
;;;2425         htim->Instance->CCMR3 |= sConfig->OCFastMode;  
;;;2426       }
;;;2427       break;
;;;2428       
;;;2429       case TIM_CHANNEL_6:
;;;2430       {
;;;2431          /* Check the parameters */
;;;2432         assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
;;;2433         
;;;2434        /* Configure the Channel 5 in PWM mode */
;;;2435         TIM_OC6_SetConfig(htim->Instance, sConfig);
;;;2436         
;;;2437         /* Set the Preload enable bit for channel6 */
;;;2438         htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
;;;2439         
;;;2440        /* Configure the Output Fast mode */
;;;2441         htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
;;;2442         htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
;;;2443       }
;;;2444       break;
;;;2445       
;;;2446       default:
;;;2447       break;    
;;;2448     }
;;;2449     
;;;2450     htim->State = HAL_TIM_STATE_READY;
;;;2451       
;;;2452     __HAL_UNLOCK(htim);
;;;2453     
;;;2454     return HAL_OK;
;;;2455   }
000012  bd70              POP      {r4-r6,pc}
                  |L40.20|
000014  2001              MOVS     r0,#1                 ;2338
000016  63e0              STR      r0,[r4,#0x3c]         ;2338
000018  bf00              NOP                            ;2338
00001a  2002              MOVS     r0,#2                 ;2340
00001c  6420              STR      r0,[r4,#0x40]         ;2340
00001e  2e0c              CMP      r6,#0xc               ;2342
000020  d051              BEQ      |L40.198|
000022  dc05              BGT      |L40.48|
000024  b14e              CBZ      r6,|L40.58|
000026  2e04              CMP      r6,#4                 ;2342
000028  d01e              BEQ      |L40.104|
00002a  2e08              CMP      r6,#8                 ;2342
                  |L40.44|
00002c  d17a              BNE      |L40.292|
00002e  e033              B        |L40.152|
                  |L40.48|
000030  2e10              CMP      r6,#0x10              ;2342
000032  d060              BEQ      |L40.246|
000034  2e14              CMP      r6,#0x14              ;2342
000036  d1f9              BNE      |L40.44|
000038  e075              B        |L40.294|
                  |L40.58|
00003a  4629              MOV      r1,r5                 ;2350
00003c  6820              LDR      r0,[r4,#0]            ;2350
00003e  f7fffffe          BL       TIM_OC1_SetConfig
000042  6820              LDR      r0,[r4,#0]            ;2353
000044  6980              LDR      r0,[r0,#0x18]         ;2353
000046  f0400008          ORR      r0,r0,#8              ;2353
00004a  6821              LDR      r1,[r4,#0]            ;2353
00004c  6188              STR      r0,[r1,#0x18]         ;2353
00004e  6820              LDR      r0,[r4,#0]            ;2356
000050  6980              LDR      r0,[r0,#0x18]         ;2356
000052  f0200004          BIC      r0,r0,#4              ;2356
000056  6821              LDR      r1,[r4,#0]            ;2356
000058  6188              STR      r0,[r1,#0x18]         ;2356
00005a  6820              LDR      r0,[r4,#0]            ;2357
00005c  6980              LDR      r0,[r0,#0x18]         ;2357
00005e  6929              LDR      r1,[r5,#0x10]         ;2357
000060  4308              ORRS     r0,r0,r1              ;2357
000062  6821              LDR      r1,[r4,#0]            ;2357
000064  6188              STR      r0,[r1,#0x18]         ;2357
000066  e077              B        |L40.344|
                  |L40.104|
000068  4629              MOV      r1,r5                 ;2367
00006a  6820              LDR      r0,[r4,#0]            ;2367
00006c  f7fffffe          BL       TIM_OC2_SetConfig
000070  6820              LDR      r0,[r4,#0]            ;2370
000072  6980              LDR      r0,[r0,#0x18]         ;2370
000074  f4406000          ORR      r0,r0,#0x800          ;2370
000078  6821              LDR      r1,[r4,#0]            ;2370
00007a  6188              STR      r0,[r1,#0x18]         ;2370
00007c  6820              LDR      r0,[r4,#0]            ;2373
00007e  6980              LDR      r0,[r0,#0x18]         ;2373
000080  f4206080          BIC      r0,r0,#0x400          ;2373
000084  6821              LDR      r1,[r4,#0]            ;2373
000086  6188              STR      r0,[r1,#0x18]         ;2373
000088  6820              LDR      r0,[r4,#0]            ;2374
00008a  6980              LDR      r0,[r0,#0x18]         ;2374
00008c  6929              LDR      r1,[r5,#0x10]         ;2374
00008e  ea402001          ORR      r0,r0,r1,LSL #8       ;2374
000092  6821              LDR      r1,[r4,#0]            ;2374
000094  6188              STR      r0,[r1,#0x18]         ;2374
000096  e05f              B        |L40.344|
                  |L40.152|
000098  4629              MOV      r1,r5                 ;2384
00009a  6820              LDR      r0,[r4,#0]            ;2384
00009c  f7fffffe          BL       TIM_OC3_SetConfig
0000a0  6820              LDR      r0,[r4,#0]            ;2387
0000a2  69c0              LDR      r0,[r0,#0x1c]         ;2387
0000a4  f0400008          ORR      r0,r0,#8              ;2387
0000a8  6821              LDR      r1,[r4,#0]            ;2387
0000aa  61c8              STR      r0,[r1,#0x1c]         ;2387
0000ac  6820              LDR      r0,[r4,#0]            ;2390
0000ae  69c0              LDR      r0,[r0,#0x1c]         ;2390
0000b0  f0200004          BIC      r0,r0,#4              ;2390
0000b4  6821              LDR      r1,[r4,#0]            ;2390
0000b6  61c8              STR      r0,[r1,#0x1c]         ;2390
0000b8  6820              LDR      r0,[r4,#0]            ;2391
0000ba  69c0              LDR      r0,[r0,#0x1c]         ;2391
0000bc  6929              LDR      r1,[r5,#0x10]         ;2391
0000be  4308              ORRS     r0,r0,r1              ;2391
0000c0  6821              LDR      r1,[r4,#0]            ;2391
0000c2  61c8              STR      r0,[r1,#0x1c]         ;2391
0000c4  e048              B        |L40.344|
                  |L40.198|
0000c6  4629              MOV      r1,r5                 ;2401
0000c8  6820              LDR      r0,[r4,#0]            ;2401
0000ca  f7fffffe          BL       TIM_OC4_SetConfig
0000ce  6820              LDR      r0,[r4,#0]            ;2404
0000d0  69c0              LDR      r0,[r0,#0x1c]         ;2404
0000d2  f4406000          ORR      r0,r0,#0x800          ;2404
0000d6  6821              LDR      r1,[r4,#0]            ;2404
0000d8  61c8              STR      r0,[r1,#0x1c]         ;2404
0000da  6820              LDR      r0,[r4,#0]            ;2407
0000dc  69c0              LDR      r0,[r0,#0x1c]         ;2407
0000de  f4206080          BIC      r0,r0,#0x400          ;2407
0000e2  6821              LDR      r1,[r4,#0]            ;2407
0000e4  61c8              STR      r0,[r1,#0x1c]         ;2407
0000e6  6820              LDR      r0,[r4,#0]            ;2408
0000e8  69c0              LDR      r0,[r0,#0x1c]         ;2408
0000ea  6929              LDR      r1,[r5,#0x10]         ;2408
0000ec  ea402001          ORR      r0,r0,r1,LSL #8       ;2408
0000f0  6821              LDR      r1,[r4,#0]            ;2408
0000f2  61c8              STR      r0,[r1,#0x1c]         ;2408
0000f4  e030              B        |L40.344|
                  |L40.246|
0000f6  4629              MOV      r1,r5                 ;2418
0000f8  6820              LDR      r0,[r4,#0]            ;2418
0000fa  f7fffffe          BL       TIM_OC5_SetConfig
0000fe  6820              LDR      r0,[r4,#0]            ;2421
000100  6d40              LDR      r0,[r0,#0x54]         ;2421
000102  f0400008          ORR      r0,r0,#8              ;2421
000106  6821              LDR      r1,[r4,#0]            ;2421
000108  6548              STR      r0,[r1,#0x54]         ;2421
00010a  6820              LDR      r0,[r4,#0]            ;2424
00010c  6d40              LDR      r0,[r0,#0x54]         ;2424
00010e  f0200004          BIC      r0,r0,#4              ;2424
000112  6821              LDR      r1,[r4,#0]            ;2424
000114  6548              STR      r0,[r1,#0x54]         ;2424
000116  6820              LDR      r0,[r4,#0]            ;2425
000118  6d40              LDR      r0,[r0,#0x54]         ;2425
00011a  6929              LDR      r1,[r5,#0x10]         ;2425
00011c  4308              ORRS     r0,r0,r1              ;2425
00011e  6821              LDR      r1,[r4,#0]            ;2425
000120  6548              STR      r0,[r1,#0x54]         ;2425
000122  e019              B        |L40.344|
                  |L40.292|
000124  e017              B        |L40.342|
                  |L40.294|
000126  4629              MOV      r1,r5                 ;2435
000128  6820              LDR      r0,[r4,#0]            ;2435
00012a  f7fffffe          BL       TIM_OC6_SetConfig
00012e  6820              LDR      r0,[r4,#0]            ;2438
000130  6d40              LDR      r0,[r0,#0x54]         ;2438
000132  f4406000          ORR      r0,r0,#0x800          ;2438
000136  6821              LDR      r1,[r4,#0]            ;2438
000138  6548              STR      r0,[r1,#0x54]         ;2438
00013a  6820              LDR      r0,[r4,#0]            ;2441
00013c  6d40              LDR      r0,[r0,#0x54]         ;2441
00013e  f4206080          BIC      r0,r0,#0x400          ;2441
000142  6821              LDR      r1,[r4,#0]            ;2441
000144  6548              STR      r0,[r1,#0x54]         ;2441
000146  6820              LDR      r0,[r4,#0]            ;2442
000148  6d40              LDR      r0,[r0,#0x54]         ;2442
00014a  6929              LDR      r1,[r5,#0x10]         ;2442
00014c  ea402001          ORR      r0,r0,r1,LSL #8       ;2442
000150  6821              LDR      r1,[r4,#0]            ;2442
000152  6548              STR      r0,[r1,#0x54]         ;2442
000154  e000              B        |L40.344|
                  |L40.342|
000156  bf00              NOP                            ;2447
                  |L40.344|
000158  bf00              NOP                            ;2359
00015a  2001              MOVS     r0,#1                 ;2450
00015c  6420              STR      r0,[r4,#0x40]         ;2450
00015e  bf00              NOP                            ;2452
000160  2000              MOVS     r0,#0                 ;2452
000162  63e0              STR      r0,[r4,#0x3c]         ;2452
000164  bf00              NOP                            ;2452
000166  bf00              NOP                            ;2454
000168  e753              B        |L40.18|
;;;2456   
                          ENDP


                          AREA ||i.TIMEx_DMACommutationCplt||, CODE, READONLY, ALIGN=1

                  TIMEx_DMACommutationCplt PROC
;;;2040     */
;;;2041   void HAL_TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;2042   {
000002  4604              MOV      r4,r0
;;;2043     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6be5              LDR      r5,[r4,#0x3c]
;;;2044     
;;;2045     htim->State= HAL_TIM_STATE_READY;
000006  2001              MOVS     r0,#1
000008  6428              STR      r0,[r5,#0x40]
;;;2046   
;;;2047   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;2048     htim->CommutationCallback(htim);
;;;2049   #else
;;;2050     HAL_TIMEx_CommutationCallback(htim); 
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       HAL_TIMEx_CommutationCallback
;;;2051   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;2052   }
000010  bd70              POP      {r4-r6,pc}
;;;2053   /**
                          ENDP


                          AREA ||i.TIM_CCxNChannelCmd||, CODE, READONLY, ALIGN=1

                  TIM_CCxNChannelCmd PROC
;;;2468     */
;;;2469   static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
000000  b530              PUSH     {r4,r5,lr}
;;;2470   {
;;;2471     uint32_t tmp = 0;
000002  2300              MOVS     r3,#0
;;;2472   
;;;2473     /* Check the parameters */
;;;2474     assert_param(IS_TIM_ADVANCED_INSTANCE(TIMx));
;;;2475     assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));
;;;2476   
;;;2477     tmp = TIM_CCER_CC1NE << Channel;
000004  2404              MOVS     r4,#4
000006  fa04f301          LSL      r3,r4,r1
;;;2478   
;;;2479     /* Reset the CCxNE Bit */
;;;2480     TIMx->CCER &= ~tmp;
00000a  6a04              LDR      r4,[r0,#0x20]
00000c  439c              BICS     r4,r4,r3
00000e  6204              STR      r4,[r0,#0x20]
;;;2481   
;;;2482     /* Set or reset the CCxNE Bit */ 
;;;2483     TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
000010  6a04              LDR      r4,[r0,#0x20]
000012  fa02f501          LSL      r5,r2,r1
000016  432c              ORRS     r4,r4,r5
000018  6204              STR      r4,[r0,#0x20]
;;;2484   }
00001a  bd30              POP      {r4,r5,pc}
;;;2485   
                          ENDP


                          AREA ||i.TIM_OC5_SetConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC5_SetConfig PROC
;;;2491     */
;;;2492   static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
000000  b530              PUSH     {r4,r5,lr}
;;;2493   {
;;;2494     uint32_t tmpccmrx = 0;
000002  2400              MOVS     r4,#0
;;;2495     uint32_t tmpccer = 0;
000004  2200              MOVS     r2,#0
;;;2496     uint32_t tmpcr2 = 0; 
000006  2300              MOVS     r3,#0
;;;2497   
;;;2498     /* Disable the output: Reset the CCxE Bit */
;;;2499     TIMx->CCER &= ~TIM_CCER_CC5E;
000008  6a05              LDR      r5,[r0,#0x20]
00000a  f4253580          BIC      r5,r5,#0x10000
00000e  6205              STR      r5,[r0,#0x20]
;;;2500     
;;;2501     /* Get the TIMx CCER register value */
;;;2502     tmpccer = TIMx->CCER;
000010  6a02              LDR      r2,[r0,#0x20]
;;;2503     /* Get the TIMx CR2 register value */
;;;2504     tmpcr2 =  TIMx->CR2; 
000012  6843              LDR      r3,[r0,#4]
;;;2505     /* Get the TIMx CCMR1 register value */
;;;2506     tmpccmrx = TIMx->CCMR3;
000014  6d44              LDR      r4,[r0,#0x54]
;;;2507   
;;;2508     /* Reset the Output Compare Mode Bits */
;;;2509     tmpccmrx &= ~(TIM_CCMR3_OC5M);
000016  4d0d              LDR      r5,|L43.76|
000018  402c              ANDS     r4,r4,r5
;;;2510     /* Select the Output Compare Mode */
;;;2511     tmpccmrx |= OC_Config->OCMode;
00001a  680d              LDR      r5,[r1,#0]
00001c  432c              ORRS     r4,r4,r5
;;;2512     
;;;2513     /* Reset the Output Polarity level */
;;;2514     tmpccer &= ~TIM_CCER_CC5P;
00001e  f4223200          BIC      r2,r2,#0x20000
;;;2515     /* Set the Output Compare Polarity */
;;;2516     tmpccer |= (OC_Config->OCPolarity << 16);
000022  890d              LDRH     r5,[r1,#8]
000024  ea424205          ORR      r2,r2,r5,LSL #16
;;;2517   
;;;2518     if(IS_TIM_BREAK_INSTANCE(TIMx))
000028  4d09              LDR      r5,|L43.80|
00002a  42a8              CMP      r0,r5
00002c  d002              BEQ      |L43.52|
00002e  4d09              LDR      r5,|L43.84|
000030  42a8              CMP      r0,r5
000032  d104              BNE      |L43.62|
                  |L43.52|
;;;2519     {   
;;;2520       /* Reset the Output Compare IDLE State */
;;;2521       tmpcr2 &= ~TIM_CR2_OIS5;
000034  f4233380          BIC      r3,r3,#0x10000
;;;2522       /* Set the Output Idle state */
;;;2523       tmpcr2 |= (OC_Config->OCIdleState << 8);
000038  694d              LDR      r5,[r1,#0x14]
00003a  ea432305          ORR      r3,r3,r5,LSL #8
                  |L43.62|
;;;2524     }
;;;2525     /* Write to TIMx CR2 */
;;;2526     TIMx->CR2 = tmpcr2;
00003e  6043              STR      r3,[r0,#4]
;;;2527     
;;;2528     /* Write to TIMx CCMR3 */
;;;2529     TIMx->CCMR3 = tmpccmrx;
000040  6544              STR      r4,[r0,#0x54]
;;;2530     
;;;2531     /* Set the Capture Compare Register value */
;;;2532     TIMx->CCR5 = OC_Config->Pulse;
000042  684d              LDR      r5,[r1,#4]
000044  6585              STR      r5,[r0,#0x58]
;;;2533     
;;;2534     /* Write to TIMx CCER */
;;;2535     TIMx->CCER = tmpccer;  
000046  6202              STR      r2,[r0,#0x20]
;;;2536   }
000048  bd30              POP      {r4,r5,pc}
;;;2537   
                          ENDP

00004a  0000              DCW      0x0000
                  |L43.76|
                          DCD      0xfffeff8f
                  |L43.80|
                          DCD      0x40010000
                  |L43.84|
                          DCD      0x40010400

                          AREA ||i.TIM_OC6_SetConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC6_SetConfig PROC
;;;2543     */
;;;2544   static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
000000  b530              PUSH     {r4,r5,lr}
;;;2545   {
;;;2546     uint32_t tmpccmrx = 0;
000002  2400              MOVS     r4,#0
;;;2547     uint32_t tmpccer = 0;
000004  2200              MOVS     r2,#0
;;;2548     uint32_t tmpcr2 = 0; 
000006  2300              MOVS     r3,#0
;;;2549   
;;;2550     /* Disable the output: Reset the CCxE Bit */
;;;2551     TIMx->CCER &= ~TIM_CCER_CC6E;
000008  6a05              LDR      r5,[r0,#0x20]
00000a  f4251580          BIC      r5,r5,#0x100000
00000e  6205              STR      r5,[r0,#0x20]
;;;2552     
;;;2553     /* Get the TIMx CCER register value */
;;;2554     tmpccer = TIMx->CCER;
000010  6a02              LDR      r2,[r0,#0x20]
;;;2555     /* Get the TIMx CR2 register value */
;;;2556     tmpcr2 =  TIMx->CR2; 
000012  6843              LDR      r3,[r0,#4]
;;;2557     /* Get the TIMx CCMR1 register value */
;;;2558     tmpccmrx = TIMx->CCMR3;
000014  6d44              LDR      r4,[r0,#0x54]
;;;2559       
;;;2560     /* Reset the Output Compare Mode Bits */
;;;2561     tmpccmrx &= ~(TIM_CCMR3_OC6M);
000016  4d0d              LDR      r5,|L44.76|
000018  402c              ANDS     r4,r4,r5
;;;2562     /* Select the Output Compare Mode */
;;;2563     tmpccmrx |= (OC_Config->OCMode << 8);
00001a  680d              LDR      r5,[r1,#0]
00001c  ea442405          ORR      r4,r4,r5,LSL #8
;;;2564     
;;;2565     /* Reset the Output Polarity level */
;;;2566     tmpccer &= (uint32_t)~TIM_CCER_CC6P;
000020  f4221200          BIC      r2,r2,#0x200000
;;;2567     /* Set the Output Compare Polarity */
;;;2568     tmpccer |= (OC_Config->OCPolarity << 20);
000024  890d              LDRH     r5,[r1,#8]
000026  ea425205          ORR      r2,r2,r5,LSL #20
;;;2569   
;;;2570     if(IS_TIM_BREAK_INSTANCE(TIMx))
00002a  4d09              LDR      r5,|L44.80|
00002c  42a8              CMP      r0,r5
00002e  d002              BEQ      |L44.54|
000030  4d08              LDR      r5,|L44.84|
000032  42a8              CMP      r0,r5
000034  d104              BNE      |L44.64|
                  |L44.54|
;;;2571     {   
;;;2572       /* Reset the Output Compare IDLE State */
;;;2573       tmpcr2 &= ~TIM_CR2_OIS6;
000036  f4232380          BIC      r3,r3,#0x40000
;;;2574       /* Set the Output Idle state */
;;;2575       tmpcr2 |= (OC_Config->OCIdleState << 10);
00003a  694d              LDR      r5,[r1,#0x14]
00003c  ea432385          ORR      r3,r3,r5,LSL #10
                  |L44.64|
;;;2576     }
;;;2577     
;;;2578     /* Write to TIMx CR2 */
;;;2579     TIMx->CR2 = tmpcr2;
000040  6043              STR      r3,[r0,#4]
;;;2580     
;;;2581     /* Write to TIMx CCMR3 */
;;;2582     TIMx->CCMR3 = tmpccmrx;
000042  6544              STR      r4,[r0,#0x54]
;;;2583     
;;;2584     /* Set the Capture Compare Register value */
;;;2585     TIMx->CCR6 = OC_Config->Pulse;
000044  684d              LDR      r5,[r1,#4]
000046  65c5              STR      r5,[r0,#0x5c]
;;;2586     
;;;2587     /* Write to TIMx CCER */
;;;2588     TIMx->CCER = tmpccer;  
000048  6202              STR      r2,[r0,#0x20]
;;;2589   }
00004a  bd30              POP      {r4,r5,pc}
;;;2590   
                          ENDP

                  |L44.76|
                          DCD      0xfeff8fff
                  |L44.80|
                          DCD      0x40010000
                  |L44.84|
                          DCD      0x40010400

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F7_V1.11.0\\Drivers\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_tim_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____REV16|
#line 464 "D:\\Program_Files_x86\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____REVSH|
#line 479
|__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____RRX|
#line 666
|__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____RRX| PROC
#line 667

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
