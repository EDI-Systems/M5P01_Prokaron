; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\lauxlib.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\lauxlib.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\lauxlib.crf ..\..\..\M6P1(L)_Lua\lua\lauxlib.c]
                          THUMB

                          AREA ||i.boxgc||, CODE, READONLY, ALIGN=1

                  boxgc PROC
;;;475    
;;;476    static int boxgc (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;477      resizebox(L, 1, 0);
000004  2200              MOVS     r2,#0
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       resizebox
;;;478      return 0;
00000e  2000              MOVS     r0,#0
;;;479    }
000010  bd10              POP      {r4,pc}
;;;480    
                          ENDP


                          AREA ||i.errfile||, CODE, READONLY, ALIGN=2

                  errfile PROC
;;;659    
;;;660    static int errfile (lua_State *L, const char *what, int fnameindex) {
000000  e92d43f8          PUSH     {r3-r9,lr}
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;661      const char *serr = strerror(errno);
00000a  f7fffffe          BL       __aeabi_errno_addr
00000e  f8d09000          LDR      r9,[r0,#0]
000012  4648              MOV      r0,r9
000014  f7fffffe          BL       strerror
000018  4607              MOV      r7,r0
;;;662      const char *filename = lua_tostring(L, fnameindex) + 1;
00001a  2200              MOVS     r2,#0
00001c  4629              MOV      r1,r5
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       lua_tolstring
000024  f1000801          ADD      r8,r0,#1
;;;663      lua_pushfstring(L, "cannot %s %s: %s", what, filename, serr);
000028  4643              MOV      r3,r8
00002a  4622              MOV      r2,r4
00002c  a109              ADR      r1,|L2.84|
00002e  4630              MOV      r0,r6
000030  9700              STR      r7,[sp,#0]
000032  f7fffffe          BL       lua_pushfstring
;;;664      lua_remove(L, fnameindex);
000036  f04f32ff          MOV      r2,#0xffffffff
00003a  4629              MOV      r1,r5
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       lua_rotate
000042  f06f0101          MVN      r1,#1
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       lua_settop
;;;665      return LUA_ERRFILE;
00004c  2007              MOVS     r0,#7
;;;666    }
00004e  e8bd83f8          POP      {r3-r9,pc}
;;;667    
                          ENDP

000052  0000              DCW      0x0000
                  |L2.84|
000054  63616e6e          DCB      "cannot %s %s: %s",0
000058  6f742025
00005c  73202573
000060  3a202573
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.findfield||, CODE, READONLY, ALIGN=2

                  findfield PROC
;;;45     */
;;;46     static int findfield (lua_State *L, int objidx, int level) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;47       if (level == 0 || !lua_istable(L, -1))
000008  b134              CBZ      r4,|L3.24|
00000a  f04f31ff          MOV      r1,#0xffffffff
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       lua_type
000014  2805              CMP      r0,#5
000016  d001              BEQ      |L3.28|
                  |L3.24|
;;;48         return 0;  /* not found */
000018  2000              MOVS     r0,#0
                  |L3.26|
;;;49       lua_pushnil(L);  /* start 'next' loop */
;;;50       while (lua_next(L, -2)) {  /* for each pair in table */
;;;51         if (lua_type(L, -2) == LUA_TSTRING) {  /* ignore non-string keys */
;;;52           if (lua_rawequal(L, objidx, -1)) {  /* found object? */
;;;53             lua_pop(L, 1);  /* remove value (but keep name) */
;;;54             return 1;
;;;55           }
;;;56           else if (findfield(L, objidx, level - 1)) {  /* try recursively */
;;;57             lua_remove(L, -2);  /* remove table (but keep name) */
;;;58             lua_pushliteral(L, ".");
;;;59             lua_insert(L, -2);  /* place '.' between the two names */
;;;60             lua_concat(L, 3);
;;;61             return 1;
;;;62           }
;;;63         }
;;;64         lua_pop(L, 1);  /* remove value */
;;;65       }
;;;66       return 0;  /* not found */
;;;67     }
00001a  bd70              POP      {r4-r6,pc}
                  |L3.28|
00001c  4628              MOV      r0,r5                 ;49
00001e  f7fffffe          BL       lua_pushnil
000022  e038              B        |L3.150|
                  |L3.36|
000024  f06f0101          MVN      r1,#1                 ;51
000028  4628              MOV      r0,r5                 ;51
00002a  f7fffffe          BL       lua_type
00002e  2804              CMP      r0,#4                 ;51
000030  d12c              BNE      |L3.140|
000032  1f42              SUBS     r2,r0,#5              ;52
000034  4631              MOV      r1,r6                 ;52
000036  4628              MOV      r0,r5                 ;52
000038  f7fffffe          BL       lua_rawequal
00003c  b130              CBZ      r0,|L3.76|
00003e  f06f0101          MVN      r1,#1                 ;53
000042  4628              MOV      r0,r5                 ;53
000044  f7fffffe          BL       lua_settop
000048  2001              MOVS     r0,#1                 ;54
00004a  e7e6              B        |L3.26|
                  |L3.76|
00004c  1e62              SUBS     r2,r4,#1              ;56
00004e  4631              MOV      r1,r6                 ;56
000050  4628              MOV      r0,r5                 ;56
000052  f7fffffe          BL       findfield
000056  b1c8              CBZ      r0,|L3.140|
000058  f04f32ff          MOV      r2,#0xffffffff        ;57
00005c  0051              LSLS     r1,r2,#1              ;57
00005e  4628              MOV      r0,r5                 ;57
000060  f7fffffe          BL       lua_rotate
000064  f06f0101          MVN      r1,#1                 ;57
000068  4628              MOV      r0,r5                 ;57
00006a  f7fffffe          BL       lua_settop
00006e  a10e              ADR      r1,|L3.168|
000070  4628              MOV      r0,r5                 ;58
000072  f7fffffe          BL       lua_pushstring
000076  2201              MOVS     r2,#1                 ;59
000078  1ed1              SUBS     r1,r2,#3              ;59
00007a  4628              MOV      r0,r5                 ;59
00007c  f7fffffe          BL       lua_rotate
000080  2103              MOVS     r1,#3                 ;60
000082  4628              MOV      r0,r5                 ;60
000084  f7fffffe          BL       lua_concat
000088  2001              MOVS     r0,#1                 ;61
00008a  e7c6              B        |L3.26|
                  |L3.140|
00008c  f06f0101          MVN      r1,#1                 ;64
000090  4628              MOV      r0,r5                 ;64
000092  f7fffffe          BL       lua_settop
                  |L3.150|
000096  f06f0101          MVN      r1,#1                 ;50
00009a  4628              MOV      r0,r5                 ;50
00009c  f7fffffe          BL       lua_next
0000a0  2800              CMP      r0,#0                 ;50
0000a2  d1bf              BNE      |L3.36|
0000a4  bf00              NOP                            ;66
0000a6  e7b8              B        |L3.26|
;;;68     
                          ENDP

                  |L3.168|
0000a8  2e00              DCB      ".",0
0000aa  00                DCB      0
0000ab  00                DCB      0

                          AREA ||i.getF||, CODE, READONLY, ALIGN=1

                  getF PROC
;;;641    
;;;642    static const char *getF (lua_State *L, void *ud, size_t *size) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;643      LoadF *lf = (LoadF *)ud;
00000a  462c              MOV      r4,r5
;;;644      (void)L;  /* not used */
;;;645      if (lf->n > 0) {  /* are there pre-read characters to be read? */
00000c  6820              LDR      r0,[r4,#0]
00000e  2800              CMP      r0,#0
000010  dd04              BLE      |L4.28|
;;;646        *size = lf->n;  /* return them (chars already in buffer) */
000012  6820              LDR      r0,[r4,#0]
000014  6030              STR      r0,[r6,#0]
;;;647        lf->n = 0;  /* no more pre-read characters */
000016  2000              MOVS     r0,#0
000018  6020              STR      r0,[r4,#0]
00001a  e00f              B        |L4.60|
                  |L4.28|
;;;648      }
;;;649      else {  /* read a block from file */
;;;650        /* 'fread' can return > 0 *and* set the EOF flag. If next call to
;;;651           'getF' called 'fread', it might still wait for user input.
;;;652           The next check avoids this problem. */
;;;653        if (feof(lf->f)) return NULL;
00001c  6860              LDR      r0,[r4,#4]
00001e  f7fffffe          BL       feof
000022  b110              CBZ      r0,|L4.42|
000024  2000              MOVS     r0,#0
                  |L4.38|
;;;654        *size = fread(lf->buff, 1, sizeof(lf->buff), lf->f);  /* read block */
;;;655      }
;;;656      return lf->buff;
;;;657    }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L4.42|
00002a  f44f7200          MOV      r2,#0x200             ;654
00002e  2101              MOVS     r1,#1                 ;654
000030  f1040008          ADD      r0,r4,#8              ;654
000034  6863              LDR      r3,[r4,#4]            ;654
000036  f7fffffe          BL       fread
00003a  6030              STR      r0,[r6,#0]            ;654
                  |L4.60|
00003c  f1040008          ADD      r0,r4,#8              ;656
000040  e7f1              B        |L4.38|
;;;658    
                          ENDP


                          AREA ||i.getS||, CODE, READONLY, ALIGN=1

                  getS PROC
;;;744    
;;;745    static const char *getS (lua_State *L, void *ud, size_t *size) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  460b              MOV      r3,r1
;;;746      LoadS *ls = (LoadS *)ud;
000006  4619              MOV      r1,r3
;;;747      (void)L;  /* not used */
;;;748      if (ls->size == 0) return NULL;
000008  6848              LDR      r0,[r1,#4]
00000a  b908              CBNZ     r0,|L5.16|
00000c  2000              MOVS     r0,#0
                  |L5.14|
;;;749      *size = ls->size;
;;;750      ls->size = 0;
;;;751      return ls->s;
;;;752    }
00000e  bd10              POP      {r4,pc}
                  |L5.16|
000010  6848              LDR      r0,[r1,#4]            ;749
000012  6010              STR      r0,[r2,#0]            ;749
000014  2000              MOVS     r0,#0                 ;750
000016  6048              STR      r0,[r1,#4]            ;750
000018  6808              LDR      r0,[r1,#0]            ;751
00001a  e7f8              B        |L5.14|
;;;753    
                          ENDP


                          AREA ||i.interror||, CODE, READONLY, ALIGN=2

                  interror PROC
;;;421    
;;;422    static void interror (lua_State *L, int arg) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;423      if (lua_isnumber(L, arg))
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       lua_isnumber
00000e  b128              CBZ      r0,|L6.28|
;;;424        luaL_argerror(L, arg, "number has no integer representation");
000010  a205              ADR      r2,|L6.40|
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       luaL_argerror
00001a  e004              B        |L6.38|
                  |L6.28|
;;;425      else
;;;426        tag_error(L, arg, LUA_TNUMBER);
00001c  2203              MOVS     r2,#3
00001e  4629              MOV      r1,r5
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       tag_error
                  |L6.38|
;;;427    }
000026  bd70              POP      {r4-r6,pc}
;;;428    
                          ENDP

                  |L6.40|
000028  6e756d62          DCB      "number has no integer representation",0
00002c  65722068
000030  6173206e
000034  6f20696e
000038  74656765
00003c  72207265
000040  70726573
000044  656e7461
000048  74696f6e
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0

                          AREA ||i.l_alloc||, CODE, READONLY, ALIGN=1

                  l_alloc PROC
;;;926    
;;;927    static void *l_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  461c              MOV      r4,r3
;;;928      (void)ud; (void)osize;  /* not used */
;;;929      if (nsize == 0) {
00000c  b92c              CBNZ     r4,|L7.26|
;;;930        free(ptr);
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       free
;;;931        return NULL;
000014  2000              MOVS     r0,#0
                  |L7.22|
;;;932      }
;;;933      else
;;;934        return realloc(ptr, nsize);
;;;935    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L7.26|
00001a  4621              MOV      r1,r4                 ;934
00001c  4628              MOV      r0,r5                 ;934
00001e  f7fffffe          BL       realloc
000022  e7f8              B        |L7.22|
;;;936    
                          ENDP


                          AREA ||i.lastlevel||, CODE, READONLY, ALIGN=1

                  lastlevel PROC
;;;109    
;;;110    static int lastlevel (lua_State *L) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b09b              SUB      sp,sp,#0x6c
000004  4607              MOV      r7,r0
;;;111      lua_Debug ar;
;;;112      int li = 1, le = 1;
000006  2501              MOVS     r5,#1
000008  2401              MOVS     r4,#1
;;;113      /* find an upper bound */
;;;114      while (lua_getstack(L, le, &ar)) { li = le; le *= 2; }
00000a  e001              B        |L8.16|
                  |L8.12|
00000c  4625              MOV      r5,r4
00000e  0064              LSLS     r4,r4,#1
                  |L8.16|
000010  aa01              ADD      r2,sp,#4
000012  4621              MOV      r1,r4
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       lua_getstack
00001a  2800              CMP      r0,#0
00001c  d1f6              BNE      |L8.12|
;;;115      /* do a binary search */
;;;116      while (li < le) {
00001e  e00d              B        |L8.60|
                  |L8.32|
;;;117        int m = (li + le)/2;
000020  1928              ADDS     r0,r5,r4
000022  eb0071d0          ADD      r1,r0,r0,LSR #31
000026  104e              ASRS     r6,r1,#1
;;;118        if (lua_getstack(L, m, &ar)) li = m + 1;
000028  aa01              ADD      r2,sp,#4
00002a  4631              MOV      r1,r6
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       lua_getstack
000032  b108              CBZ      r0,|L8.56|
000034  1c75              ADDS     r5,r6,#1
000036  e000              B        |L8.58|
                  |L8.56|
;;;119        else le = m;
000038  4634              MOV      r4,r6
                  |L8.58|
;;;120      }
00003a  bf00              NOP      
                  |L8.60|
00003c  42a5              CMP      r5,r4                 ;116
00003e  dbef              BLT      |L8.32|
;;;121      return le - 1;
000040  1e60              SUBS     r0,r4,#1
;;;122    }
000042  b01b              ADD      sp,sp,#0x6c
000044  bdf0              POP      {r4-r7,pc}
;;;123    
                          ENDP


                          AREA ||i.luaL_addlstring||, CODE, READONLY, ALIGN=1

                  luaL_addlstring PROC
;;;527    
;;;528    LUALIB_API void luaL_addlstring (luaL_Buffer *B, const char *s, size_t l) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;529      if (l > 0) {  /* avoid 'memcpy' when 's' can be NULL */
00000a  b16c              CBZ      r4,|L9.40|
;;;530        char *b = luaL_prepbuffsize(B, l);
00000c  4621              MOV      r1,r4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       luaL_prepbuffsize
000014  4607              MOV      r7,r0
;;;531        memcpy(b, s, l * sizeof(char));
000016  4622              MOV      r2,r4
000018  4631              MOV      r1,r6
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       __aeabi_memcpy
;;;532        luaL_addsize(B, l);
000020  68a8              LDR      r0,[r5,#8]
000022  4420              ADD      r0,r0,r4
000024  60a8              STR      r0,[r5,#8]
;;;533      }
000026  bf00              NOP      
                  |L9.40|
;;;534    }
000028  e8bd81f0          POP      {r4-r8,pc}
;;;535    
                          ENDP


                          AREA ||i.luaL_addstring||, CODE, READONLY, ALIGN=1

                  luaL_addstring PROC
;;;536    
;;;537    LUALIB_API void luaL_addstring (luaL_Buffer *B, const char *s) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;538      luaL_addlstring(B, s, strlen(s));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       strlen
00000c  4606              MOV      r6,r0
00000e  4632              MOV      r2,r6
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       luaL_addlstring
;;;539    }
000018  bd70              POP      {r4-r6,pc}
;;;540    
                          ENDP


                          AREA ||i.luaL_addvalue||, CODE, READONLY, ALIGN=1

                  luaL_addvalue PROC
;;;557    
;;;558    LUALIB_API void luaL_addvalue (luaL_Buffer *B) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4604              MOV      r4,r0
;;;559      lua_State *L = B->L;
000004  68e5              LDR      r5,[r4,#0xc]
;;;560      size_t l;
;;;561      const char *s = lua_tolstring(L, -1, &l);
000006  466a              MOV      r2,sp
000008  f04f31ff          MOV      r1,#0xffffffff
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lua_tolstring
000012  4606              MOV      r6,r0
;;;562      if (buffonstack(B))
000014  f1040010          ADD      r0,r4,#0x10
000018  6821              LDR      r1,[r4,#0]
00001a  4281              CMP      r1,r0
00001c  d004              BEQ      |L11.40|
;;;563        lua_insert(L, -2);  /* put value below buffer */
00001e  2201              MOVS     r2,#1
000020  1ed1              SUBS     r1,r2,#3
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       lua_rotate
                  |L11.40|
;;;564      luaL_addlstring(B, s, l);
000028  4631              MOV      r1,r6
00002a  4620              MOV      r0,r4
00002c  9a00              LDR      r2,[sp,#0]
00002e  f7fffffe          BL       luaL_addlstring
;;;565      lua_remove(L, (buffonstack(B)) ? -2 : -1);  /* remove value */
000032  f1040010          ADD      r0,r4,#0x10
000036  6822              LDR      r2,[r4,#0]
000038  4282              CMP      r2,r0
00003a  d002              BEQ      |L11.66|
00003c  f06f0001          MVN      r0,#1
000040  e001              B        |L11.70|
                  |L11.66|
000042  f04f30ff          MOV      r0,#0xffffffff
                  |L11.70|
000046  4601              MOV      r1,r0
000048  f04f32ff          MOV      r2,#0xffffffff
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       lua_rotate
000052  f06f0101          MVN      r1,#1
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       lua_settop
;;;566    }
00005c  bdf8              POP      {r3-r7,pc}
;;;567    
                          ENDP


                          AREA ||i.luaL_argerror||, CODE, READONLY, ALIGN=2

                  luaL_argerror PROC
;;;163    
;;;164    LUALIB_API int luaL_argerror (lua_State *L, int arg, const char *extramsg) {
000000  b570              PUSH     {r4-r6,lr}
000002  b09c              SUB      sp,sp,#0x70
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;165      lua_Debug ar;
;;;166      if (!lua_getstack(L, 0, &ar))  /* no stack frame? */
00000a  aa02              ADD      r2,sp,#8
00000c  2100              MOVS     r1,#0
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       lua_getstack
000014  b938              CBNZ     r0,|L12.38|
;;;167        return luaL_error(L, "bad argument #%d (%s)", arg, extramsg);
000016  462b              MOV      r3,r5
000018  4622              MOV      r2,r4
00001a  a118              ADR      r1,|L12.124|
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       luaL_error
                  |L12.34|
;;;168      lua_getinfo(L, "n", &ar);
;;;169      if (strcmp(ar.namewhat, "method") == 0) {
;;;170        arg--;  /* do not count 'self' */
;;;171        if (arg == 0)  /* error is in the self argument itself? */
;;;172          return luaL_error(L, "calling '%s' on bad self (%s)",
;;;173                               ar.name, extramsg);
;;;174      }
;;;175      if (ar.name == NULL)
;;;176        ar.name = (pushglobalfuncname(L, &ar)) ? lua_tostring(L, -1) : "?";
;;;177      return luaL_error(L, "bad argument #%d to '%s' (%s)",
;;;178                            arg, ar.name, extramsg);
;;;179    }
000022  b01c              ADD      sp,sp,#0x70
000024  bd70              POP      {r4-r6,pc}
                  |L12.38|
000026  aa02              ADD      r2,sp,#8              ;168
000028  a11a              ADR      r1,|L12.148|
00002a  4630              MOV      r0,r6                 ;168
00002c  f7fffffe          BL       lua_getinfo
000030  a119              ADR      r1,|L12.152|
000032  9804              LDR      r0,[sp,#0x10]         ;169
000034  f7fffffe          BL       strcmp
000038  b940              CBNZ     r0,|L12.76|
00003a  1e64              SUBS     r4,r4,#1              ;170
00003c  b934              CBNZ     r4,|L12.76|
00003e  462b              MOV      r3,r5                 ;172
000040  a117              ADR      r1,|L12.160|
000042  4630              MOV      r0,r6                 ;172
000044  9a03              LDR      r2,[sp,#0xc]          ;172
000046  f7fffffe          BL       luaL_error
00004a  e7ea              B        |L12.34|
                  |L12.76|
00004c  9803              LDR      r0,[sp,#0xc]          ;175
00004e  b960              CBNZ     r0,|L12.106|
000050  a902              ADD      r1,sp,#8              ;176
000052  4630              MOV      r0,r6                 ;176
000054  f7fffffe          BL       pushglobalfuncname
000058  b128              CBZ      r0,|L12.102|
00005a  2200              MOVS     r2,#0                 ;176
00005c  1e51              SUBS     r1,r2,#1              ;176
00005e  4630              MOV      r0,r6                 ;176
000060  f7fffffe          BL       lua_tolstring
000064  e000              B        |L12.104|
                  |L12.102|
000066  a016              ADR      r0,|L12.192|
                  |L12.104|
000068  9003              STR      r0,[sp,#0xc]          ;176
                  |L12.106|
00006a  9500              STR      r5,[sp,#0]            ;177
00006c  4622              MOV      r2,r4                 ;177
00006e  a115              ADR      r1,|L12.196|
000070  4630              MOV      r0,r6                 ;177
000072  9b03              LDR      r3,[sp,#0xc]          ;177
000074  f7fffffe          BL       luaL_error
000078  e7d3              B        |L12.34|
;;;180    
                          ENDP

00007a  0000              DCW      0x0000
                  |L12.124|
00007c  62616420          DCB      "bad argument #%d (%s)",0
000080  61726775
000084  6d656e74
000088  20232564
00008c  20282573
000090  2900    
000092  00                DCB      0
000093  00                DCB      0
                  |L12.148|
000094  6e00              DCB      "n",0
000096  00                DCB      0
000097  00                DCB      0
                  |L12.152|
000098  6d657468          DCB      "method",0
00009c  6f6400  
00009f  00                DCB      0
                  |L12.160|
0000a0  63616c6c          DCB      "calling '%s' on bad self (%s)",0
0000a4  696e6720
0000a8  27257327
0000ac  206f6e20
0000b0  62616420
0000b4  73656c66
0000b8  20282573
0000bc  2900    
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L12.192|
0000c0  3f00              DCB      "?",0
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L12.196|
0000c4  62616420          DCB      "bad argument #%d to '%s' (%s)",0
0000c8  61726775
0000cc  6d656e74
0000d0  20232564
0000d4  20746f20
0000d8  27257327
0000dc  20282573
0000e0  2900    
0000e2  00                DCB      0
0000e3  00                DCB      0

                          AREA ||i.luaL_buffinit||, CODE, READONLY, ALIGN=1

                  luaL_buffinit PROC
;;;568    
;;;569    LUALIB_API void luaL_buffinit (lua_State *L, luaL_Buffer *B) {
000000  60c8              STR      r0,[r1,#0xc]
;;;570      B->L = L;
;;;571      B->b = B->init.b;
000002  f1010210          ADD      r2,r1,#0x10
000006  600a              STR      r2,[r1,#0]
;;;572      B->n = 0;
000008  2200              MOVS     r2,#0
00000a  608a              STR      r2,[r1,#8]
;;;573      B->size = LUAL_BUFFERSIZE;
00000c  f44f5280          MOV      r2,#0x1000
000010  604a              STR      r2,[r1,#4]
;;;574    }
000012  4770              BX       lr
;;;575    
                          ENDP


                          AREA ||i.luaL_buffinitsize||, CODE, READONLY, ALIGN=1

                  luaL_buffinitsize PROC
;;;576    
;;;577    LUALIB_API char *luaL_buffinitsize (lua_State *L, luaL_Buffer *B, size_t sz) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;578      luaL_buffinit(L, B);
000008  4621              MOV      r1,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       luaL_buffinit
;;;579      return luaL_prepbuffsize(B, sz);
000010  4629              MOV      r1,r5
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       luaL_prepbuffsize
;;;580    }
000018  bd70              POP      {r4-r6,pc}
;;;581    
                          ENDP


                          AREA ||i.luaL_callmeta||, CODE, READONLY, ALIGN=1

                  luaL_callmeta PROC
;;;787    
;;;788    LUALIB_API int luaL_callmeta (lua_State *L, int obj, const char *event) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;789      obj = lua_absindex(L, obj);
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       lua_absindex
000010  4605              MOV      r5,r0
;;;790      if (luaL_getmetafield(L, obj, event) == LUA_TNIL)  /* no metafield? */
000012  4632              MOV      r2,r6
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       luaL_getmetafield
00001c  b908              CBNZ     r0,|L15.34|
;;;791        return 0;
00001e  2000              MOVS     r0,#0
                  |L15.32|
;;;792      lua_pushvalue(L, obj);
;;;793      lua_call(L, 1, 1);
;;;794      return 1;
;;;795    }
000020  bdf8              POP      {r3-r7,pc}
                  |L15.34|
000022  4629              MOV      r1,r5                 ;792
000024  4620              MOV      r0,r4                 ;792
000026  f7fffffe          BL       lua_pushvalue
00002a  2000              MOVS     r0,#0                 ;793
00002c  4603              MOV      r3,r0                 ;793
00002e  2201              MOVS     r2,#1                 ;793
000030  4611              MOV      r1,r2                 ;793
000032  9000              STR      r0,[sp,#0]            ;793
000034  4620              MOV      r0,r4                 ;793
000036  f7fffffe          BL       lua_callk
00003a  2001              MOVS     r0,#1                 ;794
00003c  e7f0              B        |L15.32|
;;;796    
                          ENDP


                          AREA ||i.luaL_checkany||, CODE, READONLY, ALIGN=2

                  luaL_checkany PROC
;;;383    
;;;384    LUALIB_API void luaL_checkany (lua_State *L, int arg) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;385      if (lua_type(L, arg) == LUA_TNONE)
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       lua_type
00000e  1c40              ADDS     r0,r0,#1
000010  b920              CBNZ     r0,|L16.28|
;;;386        luaL_argerror(L, arg, "value expected");
000012  a203              ADR      r2,|L16.32|
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       luaL_argerror
                  |L16.28|
;;;387    }
00001c  bd70              POP      {r4-r6,pc}
;;;388    
                          ENDP

00001e  0000              DCW      0x0000
                  |L16.32|
000020  76616c75          DCB      "value expected",0
000024  65206578
000028  70656374
00002c  656400  
00002f  00                DCB      0

                          AREA ||i.luaL_checkinteger||, CODE, READONLY, ALIGN=1

                  luaL_checkinteger PROC
;;;429    
;;;430    LUALIB_API lua_Integer luaL_checkinteger (lua_State *L, int arg) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
;;;431      int isnum;
;;;432      lua_Integer d = lua_tointegerx(L, arg, &isnum);
000006  466a              MOV      r2,sp
000008  4639              MOV      r1,r7
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       lua_tointegerx
000010  4604              MOV      r4,r0
000012  460d              MOV      r5,r1
;;;433      if (!isnum) {
000014  9800              LDR      r0,[sp,#0]
000016  b918              CBNZ     r0,|L17.32|
;;;434        interror(L, arg);
000018  4639              MOV      r1,r7
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       interror
                  |L17.32|
;;;435      }
;;;436      return d;
000020  4620              MOV      r0,r4
000022  4629              MOV      r1,r5
;;;437    }
000024  bdf8              POP      {r3-r7,pc}
;;;438    
                          ENDP


                          AREA ||i.luaL_checklstring||, CODE, READONLY, ALIGN=1

                  luaL_checklstring PROC
;;;389    
;;;390    LUALIB_API const char *luaL_checklstring (lua_State *L, int arg, size_t *len) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;391      const char *s = lua_tolstring(L, arg, len);
00000a  463a              MOV      r2,r7
00000c  4631              MOV      r1,r6
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       lua_tolstring
000014  4604              MOV      r4,r0
;;;392      if (!s) tag_error(L, arg, LUA_TSTRING);
000016  b924              CBNZ     r4,|L18.34|
000018  2204              MOVS     r2,#4
00001a  4631              MOV      r1,r6
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       tag_error
                  |L18.34|
;;;393      return s;
000022  4620              MOV      r0,r4
;;;394    }
000024  e8bd81f0          POP      {r4-r8,pc}
;;;395    
                          ENDP


                          AREA ||i.luaL_checknumber||, CODE, READONLY, ALIGN=1

                  luaL_checknumber PROC
;;;407    
;;;408    LUALIB_API lua_Number luaL_checknumber (lua_State *L, int arg) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
;;;409      int isnum;
;;;410      lua_Number d = lua_tonumberx(L, arg, &isnum);
000006  466a              MOV      r2,sp
000008  4639              MOV      r1,r7
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       lua_tonumberx
000010  4604              MOV      r4,r0
000012  460d              MOV      r5,r1
;;;411      if (!isnum)
000014  9800              LDR      r0,[sp,#0]
000016  b920              CBNZ     r0,|L19.34|
;;;412        tag_error(L, arg, LUA_TNUMBER);
000018  2203              MOVS     r2,#3
00001a  4639              MOV      r1,r7
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       tag_error
                  |L19.34|
;;;413      return d;
000022  4620              MOV      r0,r4
000024  4629              MOV      r1,r5
;;;414    }
000026  bdf8              POP      {r3-r7,pc}
;;;415    
                          ENDP


                          AREA ||i.luaL_checkoption||, CODE, READONLY, ALIGN=2

                  luaL_checkoption PROC
;;;347    
;;;348    LUALIB_API int luaL_checkoption (lua_State *L, int arg, const char *def,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;349                                     const char *const lst[]) {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
;;;350      const char *name = (def) ? luaL_optstring(L, arg, def) :
00000c  b136              CBZ      r6,|L20.28|
00000e  2300              MOVS     r3,#0
000010  4632              MOV      r2,r6
000012  4649              MOV      r1,r9
000014  4640              MOV      r0,r8
000016  f7fffffe          BL       luaL_optlstring
00001a  e004              B        |L20.38|
                  |L20.28|
;;;351                                 luaL_checkstring(L, arg);
00001c  2200              MOVS     r2,#0
00001e  4649              MOV      r1,r9
000020  4640              MOV      r0,r8
000022  f7fffffe          BL       luaL_checklstring
                  |L20.38|
000026  4607              MOV      r7,r0
;;;352      int i;
;;;353      for (i=0; lst[i]; i++)
000028  2400              MOVS     r4,#0
00002a  e009              B        |L20.64|
                  |L20.44|
;;;354        if (strcmp(lst[i], name) == 0)
00002c  f8550024          LDR      r0,[r5,r4,LSL #2]
000030  4639              MOV      r1,r7
000032  f7fffffe          BL       strcmp
000036  b910              CBNZ     r0,|L20.62|
;;;355          return i;
000038  4620              MOV      r0,r4
                  |L20.58|
;;;356      return luaL_argerror(L, arg,
;;;357                           lua_pushfstring(L, "invalid option '%s'", name));
;;;358    }
00003a  e8bd87f0          POP      {r4-r10,pc}
                  |L20.62|
00003e  1c64              ADDS     r4,r4,#1              ;353
                  |L20.64|
000040  f8550024          LDR      r0,[r5,r4,LSL #2]     ;353
000044  2800              CMP      r0,#0                 ;353
000046  d1f1              BNE      |L20.44|
000048  463a              MOV      r2,r7                 ;356
00004a  a105              ADR      r1,|L20.96|
00004c  4640              MOV      r0,r8                 ;356
00004e  f7fffffe          BL       lua_pushfstring
000052  4682              MOV      r10,r0                ;356
000054  4652              MOV      r2,r10                ;356
000056  4649              MOV      r1,r9                 ;356
000058  4640              MOV      r0,r8                 ;356
00005a  f7fffffe          BL       luaL_argerror
00005e  e7ec              B        |L20.58|
;;;359    
                          ENDP

                  |L20.96|
000060  696e7661          DCB      "invalid option '%s'",0
000064  6c696420
000068  6f707469
00006c  6f6e2027
000070  25732700

                          AREA ||i.luaL_checkstack||, CODE, READONLY, ALIGN=2

                  luaL_checkstack PROC
;;;367    */
;;;368    LUALIB_API void luaL_checkstack (lua_State *L, int space, const char *msg) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;369      if (!lua_checkstack(L, space)) {
000008  4631              MOV      r1,r6
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       lua_checkstack
000010  b950              CBNZ     r0,|L21.40|
;;;370        if (msg)
000012  b12c              CBZ      r4,|L21.32|
;;;371          luaL_error(L, "stack overflow (%s)", msg);
000014  4622              MOV      r2,r4
000016  a105              ADR      r1,|L21.44|
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       luaL_error
00001e  e003              B        |L21.40|
                  |L21.32|
;;;372        else
;;;373          luaL_error(L, "stack overflow");
000020  a107              ADR      r1,|L21.64|
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       luaL_error
                  |L21.40|
;;;374      }
;;;375    }
000028  bd70              POP      {r4-r6,pc}
;;;376    
                          ENDP

00002a  0000              DCW      0x0000
                  |L21.44|
00002c  73746163          DCB      "stack overflow (%s)",0
000030  6b206f76
000034  6572666c
000038  6f772028
00003c  25732900
                  |L21.64|
000040  73746163          DCB      "stack overflow",0
000044  6b206f76
000048  6572666c
00004c  6f7700  
00004f  00                DCB      0

                          AREA ||i.luaL_checktype||, CODE, READONLY, ALIGN=1

                  luaL_checktype PROC
;;;377    
;;;378    LUALIB_API void luaL_checktype (lua_State *L, int arg, int t) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;379      if (lua_type(L, arg) != t)
000008  4631              MOV      r1,r6
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       lua_type
000010  42a0              CMP      r0,r4
000012  d004              BEQ      |L22.30|
;;;380        tag_error(L, arg, t);
000014  4622              MOV      r2,r4
000016  4631              MOV      r1,r6
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       tag_error
                  |L22.30|
;;;381    }
00001e  bd70              POP      {r4-r6,pc}
;;;382    
                          ENDP


                          AREA ||i.luaL_checkudata||, CODE, READONLY, ALIGN=1

                  luaL_checkudata PROC
;;;332    
;;;333    LUALIB_API void *luaL_checkudata (lua_State *L, int ud, const char *tname) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;334      void *p = luaL_testudata(L, ud, tname);
00000a  463a              MOV      r2,r7
00000c  4631              MOV      r1,r6
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       luaL_testudata
000014  4604              MOV      r4,r0
;;;335      if (p == NULL) typeerror(L, ud, tname);
000016  b924              CBNZ     r4,|L23.34|
000018  463a              MOV      r2,r7
00001a  4631              MOV      r1,r6
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       typeerror
                  |L23.34|
;;;336      return p;
000022  4620              MOV      r0,r4
;;;337    }
000024  e8bd81f0          POP      {r4-r8,pc}
;;;338    
                          ENDP


                          AREA ||i.luaL_checkversion_||, CODE, READONLY, ALIGN=2

                  luaL_checkversion_ PROC
;;;951    
;;;952    LUALIB_API void luaL_checkversion_ (lua_State *L, lua_Number ver, size_t sz) {
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4681              MOV      r9,r0
000006  4615              MOV      r5,r2
000008  461e              MOV      r6,r3
00000a  f8dda028          LDR      r10,[sp,#0x28]
;;;953      const lua_Number *v = lua_version(L);
00000e  4648              MOV      r0,r9
000010  f7fffffe          BL       lua_version
000014  4604              MOV      r4,r0
;;;954      if (sz != LUAL_NUMSIZES)  /* check numeric types */
000016  f1ba0f88          CMP      r10,#0x88
00001a  d003              BEQ      |L24.36|
;;;955        luaL_error(L, "core and library have incompatible numeric types");
00001c  a110              ADR      r1,|L24.96|
00001e  4648              MOV      r0,r9
000020  f7fffffe          BL       luaL_error
                  |L24.36|
;;;956      if (v != lua_version(NULL))
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       lua_version
00002a  42a0              CMP      r0,r4
00002c  d004              BEQ      |L24.56|
;;;957        luaL_error(L, "multiple Lua VMs detected");
00002e  a119              ADR      r1,|L24.148|
000030  4648              MOV      r0,r9
000032  f7fffffe          BL       luaL_error
000036  e011              B        |L24.92|
                  |L24.56|
;;;958      else if (*v != ver)
000038  462a              MOV      r2,r5
00003a  4633              MOV      r3,r6
00003c  e9d47100          LDRD     r7,r1,[r4,#0]
000040  4638              MOV      r0,r7
000042  f7fffffe          BL       __aeabi_cdcmpeq
000046  d009              BEQ      |L24.92|
;;;959        luaL_error(L, "version mismatch: app. needs %f, Lua core provides %f",
000048  e9d40100          LDRD     r0,r1,[r4,#0]
00004c  462a              MOV      r2,r5
00004e  4633              MOV      r3,r6
000050  e9cd0100          STRD     r0,r1,[sp,#0]
000054  a116              ADR      r1,|L24.176|
000056  4648              MOV      r0,r9
000058  f7fffffe          BL       luaL_error
                  |L24.92|
;;;960                      (LUAI_UACNUMBER)ver, (LUAI_UACNUMBER)*v);
;;;961    }
00005c  e8bd87fc          POP      {r2-r10,pc}
;;;962    
                          ENDP

                  |L24.96|
000060  636f7265          DCB      "core and library have incompatible numeric types",0
000064  20616e64
000068  206c6962
00006c  72617279
000070  20686176
000074  6520696e
000078  636f6d70
00007c  61746962
000080  6c65206e
000084  756d6572
000088  69632074
00008c  79706573
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0
                  |L24.148|
000094  6d756c74          DCB      "multiple Lua VMs detected",0
000098  69706c65
00009c  204c7561
0000a0  20564d73
0000a4  20646574
0000a8  65637465
0000ac  6400    
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L24.176|
0000b0  76657273          DCB      "version mismatch: app. needs %f, Lua core provides %f",0
0000b4  696f6e20
0000b8  6d69736d
0000bc  61746368
0000c0  3a206170
0000c4  702e206e
0000c8  65656473
0000cc  2025662c
0000d0  204c7561
0000d4  20636f72
0000d8  65207072
0000dc  6f766964
0000e0  65732025
0000e4  6600    
0000e6  00                DCB      0
0000e7  00                DCB      0

                          AREA ||i.luaL_error||, CODE, READONLY, ALIGN=1

                  luaL_error PROC
;;;222    */
;;;223    LUALIB_API int luaL_error (lua_State *L, const char *fmt, ...) {
000000  b40f              PUSH     {r0-r3}
000002  b538              PUSH     {r3-r5,lr}
000004  4604              MOV      r4,r0
;;;224      va_list argp;
;;;225      va_start(argp, fmt);
000006  a806              ADD      r0,sp,#0x18
000008  9000              STR      r0,[sp,#0]
;;;226      luaL_where(L, 1);
00000a  2101              MOVS     r1,#1
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       luaL_where
;;;227      lua_pushvfstring(L, fmt, argp);
000012  4620              MOV      r0,r4
000014  9a00              LDR      r2,[sp,#0]
000016  9905              LDR      r1,[sp,#0x14]
000018  f7fffffe          BL       lua_pushvfstring
;;;228      va_end(argp);
00001c  2000              MOVS     r0,#0
00001e  9000              STR      r0,[sp,#0]
;;;229      lua_concat(L, 2);
000020  2102              MOVS     r1,#2
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       lua_concat
;;;230      return lua_error(L);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       lua_error
;;;231    }
00002e  bc38              POP      {r3-r5}
000030  f85dfb14          LDR      pc,[sp],#0x14
;;;232    
                          ENDP


                          AREA ||i.luaL_execresult||, CODE, READONLY, ALIGN=2

                  luaL_execresult PROC
;;;273    
;;;274    LUALIB_API int luaL_execresult (lua_State *L, int stat) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;275      const char *what = "exit";  /* type of termination */
000006  a510              ADR      r5,|L26.72|
;;;276      if (stat == -1)  /* error? */
000008  1c60              ADDS     r0,r4,#1
00000a  b928              CBNZ     r0,|L26.24|
;;;277        return luaL_fileresult(L, 0, NULL);
00000c  2200              MOVS     r2,#0
00000e  4611              MOV      r1,r2
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       luaL_fileresult
                  |L26.22|
;;;278      else {
;;;279        l_inspectstat(stat, what);  /* interpret result */
;;;280        if (*what == 'e' && stat == 0)  /* successful termination? */
;;;281          lua_pushboolean(L, 1);
;;;282        else
;;;283          lua_pushnil(L);
;;;284        lua_pushstring(L, what);
;;;285        lua_pushinteger(L, stat);
;;;286        return 3;  /* return true/nil,what,code */
;;;287      }
;;;288    }
000016  bd70              POP      {r4-r6,pc}
                  |L26.24|
000018  7828              LDRB     r0,[r5,#0]            ;280
00001a  2865              CMP      r0,#0x65              ;280
00001c  d105              BNE      |L26.42|
00001e  b924              CBNZ     r4,|L26.42|
000020  2101              MOVS     r1,#1                 ;281
000022  4630              MOV      r0,r6                 ;281
000024  f7fffffe          BL       lua_pushboolean
000028  e002              B        |L26.48|
                  |L26.42|
00002a  4630              MOV      r0,r6                 ;283
00002c  f7fffffe          BL       lua_pushnil
                  |L26.48|
000030  4629              MOV      r1,r5                 ;284
000032  4630              MOV      r0,r6                 ;284
000034  f7fffffe          BL       lua_pushstring
000038  4622              MOV      r2,r4                 ;285
00003a  17e3              ASRS     r3,r4,#31             ;285
00003c  4630              MOV      r0,r6                 ;285
00003e  f7fffffe          BL       lua_pushinteger
000042  2003              MOVS     r0,#3                 ;286
000044  e7e7              B        |L26.22|
;;;289    
                          ENDP

000046  0000              DCW      0x0000
                  |L26.72|
000048  65786974          DCB      "exit",0
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0

                          AREA ||i.luaL_fileresult||, CODE, READONLY, ALIGN=2

                  luaL_fileresult PROC
;;;233    
;;;234    LUALIB_API int luaL_fileresult (lua_State *L, int stat, const char *fname) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;235      int en = errno;  /* calls to Lua API may change this value */
00000a  f7fffffe          BL       __aeabi_errno_addr
00000e  6804              LDR      r4,[r0,#0]
;;;236      if (stat) {
000010  b135              CBZ      r5,|L27.32|
;;;237        lua_pushboolean(L, 1);
000012  2101              MOVS     r1,#1
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       lua_pushboolean
;;;238        return 1;
00001a  2001              MOVS     r0,#1
                  |L27.28|
;;;239      }
;;;240      else {
;;;241        lua_pushnil(L);
;;;242        if (fname)
;;;243          lua_pushfstring(L, "%s: %s", fname, strerror(en));
;;;244        else
;;;245          lua_pushstring(L, strerror(en));
;;;246        lua_pushinteger(L, en);
;;;247        return 3;
;;;248      }
;;;249    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L27.32|
000020  4638              MOV      r0,r7                 ;241
000022  f7fffffe          BL       lua_pushnil
000026  b156              CBZ      r6,|L27.62|
000028  4620              MOV      r0,r4                 ;243
00002a  f7fffffe          BL       strerror
00002e  4680              MOV      r8,r0                 ;243
000030  4643              MOV      r3,r8                 ;243
000032  4632              MOV      r2,r6                 ;243
000034  a109              ADR      r1,|L27.92|
000036  4638              MOV      r0,r7                 ;243
000038  f7fffffe          BL       lua_pushfstring
00003c  e007              B        |L27.78|
                  |L27.62|
00003e  4620              MOV      r0,r4                 ;245
000040  f7fffffe          BL       strerror
000044  4680              MOV      r8,r0                 ;245
000046  4641              MOV      r1,r8                 ;245
000048  4638              MOV      r0,r7                 ;245
00004a  f7fffffe          BL       lua_pushstring
                  |L27.78|
00004e  4622              MOV      r2,r4                 ;246
000050  17e3              ASRS     r3,r4,#31             ;246
000052  4638              MOV      r0,r7                 ;246
000054  f7fffffe          BL       lua_pushinteger
000058  2003              MOVS     r0,#3                 ;247
00005a  e7df              B        |L27.28|
;;;250    
                          ENDP

                  |L27.92|
00005c  25733a20          DCB      "%s: %s",0
000060  257300  
000063  00                DCB      0

                          AREA ||i.luaL_getmetafield||, CODE, READONLY, ALIGN=1

                  luaL_getmetafield PROC
;;;771    
;;;772    LUALIB_API int luaL_getmetafield (lua_State *L, int obj, const char *event) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;773      if (!lua_getmetatable(L, obj))  /* no metatable? */
00000a  4639              MOV      r1,r7
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lua_getmetatable
000012  b910              CBNZ     r0,|L28.26|
;;;774        return LUA_TNIL;
000014  2000              MOVS     r0,#0
                  |L28.22|
;;;775      else {
;;;776        int tt;
;;;777        lua_pushstring(L, event);
;;;778        tt = lua_rawget(L, -2);
;;;779        if (tt == LUA_TNIL)  /* is metafield nil? */
;;;780          lua_pop(L, 2);  /* remove metatable and metafield */
;;;781        else
;;;782          lua_remove(L, -2);  /* remove only metatable */
;;;783        return tt;  /* return metafield type */
;;;784      }
;;;785    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L28.26|
00001a  4621              MOV      r1,r4                 ;777
00001c  4630              MOV      r0,r6                 ;777
00001e  f7fffffe          BL       lua_pushstring
000022  f06f0101          MVN      r1,#1                 ;778
000026  4630              MOV      r0,r6                 ;778
000028  f7fffffe          BL       lua_rawget
00002c  4605              MOV      r5,r0                 ;778
00002e  b92d              CBNZ     r5,|L28.60|
000030  f06f0102          MVN      r1,#2                 ;780
000034  4630              MOV      r0,r6                 ;780
000036  f7fffffe          BL       lua_settop
00003a  e00a              B        |L28.82|
                  |L28.60|
00003c  f04f32ff          MOV      r2,#0xffffffff        ;782
000040  0051              LSLS     r1,r2,#1              ;782
000042  4630              MOV      r0,r6                 ;782
000044  f7fffffe          BL       lua_rotate
000048  f06f0101          MVN      r1,#1                 ;782
00004c  4630              MOV      r0,r6                 ;782
00004e  f7fffffe          BL       lua_settop
                  |L28.82|
000052  4628              MOV      r0,r5                 ;783
000054  e7df              B        |L28.22|
;;;786    
                          ENDP


                          AREA ||i.luaL_getsubtable||, CODE, READONLY, ALIGN=1

                  luaL_getsubtable PROC
;;;869    */
;;;870    LUALIB_API int luaL_getsubtable (lua_State *L, int idx, const char *fname) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;871      if (lua_getfield(L, idx, fname) == LUA_TTABLE)
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       lua_getfield
000012  2805              CMP      r0,#5
000014  d101              BNE      |L29.26|
;;;872        return 1;  /* table already there */
000016  2001              MOVS     r0,#1
                  |L29.24|
;;;873      else {
;;;874        lua_pop(L, 1);  /* remove previous result */
;;;875        idx = lua_absindex(L, idx);
;;;876        lua_newtable(L);
;;;877        lua_pushvalue(L, -1);  /* copy to be left at top */
;;;878        lua_setfield(L, idx, fname);  /* assign new table to field */
;;;879        return 0;  /* false, because did not find table there */
;;;880      }
;;;881    }
000018  bd70              POP      {r4-r6,pc}
                  |L29.26|
00001a  f06f0101          MVN      r1,#1                 ;874
00001e  4620              MOV      r0,r4                 ;874
000020  f7fffffe          BL       lua_settop
000024  4629              MOV      r1,r5                 ;875
000026  4620              MOV      r0,r4                 ;875
000028  f7fffffe          BL       lua_absindex
00002c  4605              MOV      r5,r0                 ;875
00002e  2200              MOVS     r2,#0                 ;876
000030  4611              MOV      r1,r2                 ;876
000032  4620              MOV      r0,r4                 ;876
000034  f7fffffe          BL       lua_createtable
000038  f04f31ff          MOV      r1,#0xffffffff        ;877
00003c  4620              MOV      r0,r4                 ;877
00003e  f7fffffe          BL       lua_pushvalue
000042  4632              MOV      r2,r6                 ;878
000044  4629              MOV      r1,r5                 ;878
000046  4620              MOV      r0,r4                 ;878
000048  f7fffffe          BL       lua_setfield
00004c  2000              MOVS     r0,#0                 ;879
00004e  e7e3              B        |L29.24|
;;;882    
                          ENDP


                          AREA ||i.luaL_gsub||, CODE, READONLY, ALIGN=1

                  luaL_gsub PROC
;;;909    
;;;910    LUALIB_API const char *luaL_gsub (lua_State *L, const char *s, const char *p,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;911                                                                   const char *r) {
000004  f5ad5d82          SUB      sp,sp,#0x1040
000008  4680              MOV      r8,r0
00000a  460d              MOV      r5,r1
00000c  4616              MOV      r6,r2
00000e  461f              MOV      r7,r3
;;;912      const char *wild;
;;;913      size_t l = strlen(p);
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       strlen
000016  4681              MOV      r9,r0
;;;914      luaL_Buffer b;
;;;915      luaL_buffinit(L, &b);
000018  a90c              ADD      r1,sp,#0x30
00001a  4640              MOV      r0,r8
00001c  f7fffffe          BL       luaL_buffinit
;;;916      while ((wild = strstr(s, p)) != NULL) {
000020  e00a              B        |L30.56|
                  |L30.34|
;;;917        luaL_addlstring(&b, s, wild - s);  /* push prefix */
000022  1b62              SUBS     r2,r4,r5
000024  4629              MOV      r1,r5
000026  a80c              ADD      r0,sp,#0x30
000028  f7fffffe          BL       luaL_addlstring
;;;918        luaL_addstring(&b, r);  /* push replacement in place of pattern */
00002c  4639              MOV      r1,r7
00002e  a80c              ADD      r0,sp,#0x30
000030  f7fffffe          BL       luaL_addstring
;;;919        s = wild + l;  /* continue after 'p' */
000034  eb040509          ADD      r5,r4,r9
                  |L30.56|
000038  4631              MOV      r1,r6                 ;916
00003a  4628              MOV      r0,r5                 ;916
00003c  f7fffffe          BL       strstr
000040  1e04              SUBS     r4,r0,#0              ;916
000042  d1ee              BNE      |L30.34|
;;;920      }
;;;921      luaL_addstring(&b, s);  /* push last suffix */
000044  4629              MOV      r1,r5
000046  a80c              ADD      r0,sp,#0x30
000048  f7fffffe          BL       luaL_addstring
;;;922      luaL_pushresult(&b);
00004c  a80c              ADD      r0,sp,#0x30
00004e  f7fffffe          BL       luaL_pushresult
;;;923      return lua_tostring(L, -1);
000052  2200              MOVS     r2,#0
000054  1e51              SUBS     r1,r2,#1
000056  4640              MOV      r0,r8
000058  f7fffffe          BL       lua_tolstring
;;;924    }
00005c  f50d5d82          ADD      sp,sp,#0x1040
000060  e8bd87f0          POP      {r4-r10,pc}
;;;925    
                          ENDP


                          AREA ||i.luaL_len||, CODE, READONLY, ALIGN=2

                  luaL_len PROC
;;;797    
;;;798    LUALIB_API lua_Integer luaL_len (lua_State *L, int idx) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;799      lua_Integer l;
;;;800      int isnum;
;;;801      lua_len(L, idx);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       lua_len
;;;802      l = lua_tointegerx(L, -1, &isnum);
00000e  466a              MOV      r2,sp
000010  f04f31ff          MOV      r1,#0xffffffff
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       lua_tointegerx
00001a  4606              MOV      r6,r0
00001c  460f              MOV      r7,r1
;;;803      if (!isnum)
00001e  9800              LDR      r0,[sp,#0]
000020  b918              CBNZ     r0,|L31.42|
;;;804        luaL_error(L, "object length is not an integer");
000022  a106              ADR      r1,|L31.60|
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       luaL_error
                  |L31.42|
;;;805      lua_pop(L, 1);  /* remove object */
00002a  f06f0101          MVN      r1,#1
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       lua_settop
;;;806      return l;
000034  4630              MOV      r0,r6
000036  4639              MOV      r1,r7
;;;807    }
000038  bdf8              POP      {r3-r7,pc}
;;;808    
                          ENDP

00003a  0000              DCW      0x0000
                  |L31.60|
00003c  6f626a65          DCB      "object length is not an integer",0
000040  6374206c
000044  656e6774
000048  68206973
00004c  206e6f74
000050  20616e20
000054  696e7465
000058  67657200

                          AREA ||i.luaL_loadbufferx||, CODE, READONLY, ALIGN=2

                  luaL_loadbufferx PROC
;;;754    
;;;755    LUALIB_API int luaL_loadbufferx (lua_State *L, const char *buff, size_t size,
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;756                                     const char *name, const char *mode) {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8028          LDR      r8,[sp,#0x28]
;;;757      LoadS ls;
;;;758      ls.s = buff;
000010  9401              STR      r4,[sp,#4]
;;;759      ls.size = size;
000012  9502              STR      r5,[sp,#8]
;;;760      return lua_load(L, getS, &ls, name, mode);
000014  463b              MOV      r3,r7
000016  aa01              ADD      r2,sp,#4
000018  4903              LDR      r1,|L32.40|
00001a  4630              MOV      r0,r6
00001c  f8cd8000          STR      r8,[sp,#0]
000020  f7fffffe          BL       lua_load
;;;761    }
000024  e8bd83fe          POP      {r1-r9,pc}
;;;762    
                          ENDP

                  |L32.40|
                          DCD      getS

                          AREA ||i.luaL_loadfilex||, CODE, READONLY, ALIGN=2

                  luaL_loadfilex PROC
;;;702    
;;;703    LUALIB_API int luaL_loadfilex (lua_State *L, const char *filename,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;704                                                 const char *mode) {
000004  f5ad7d04          SUB      sp,sp,#0x210
000008  4681              MOV      r9,r0
00000a  460c              MOV      r4,r1
00000c  4616              MOV      r6,r2
;;;705      LoadF lf;
;;;706      int status, readstatus;
;;;707      int c;
;;;708      int fnameindex = lua_gettop(L) + 1;  /* index of filename on the stack */
00000e  4648              MOV      r0,r9
000010  f7fffffe          BL       lua_gettop
000014  f1000801          ADD      r8,r0,#1
;;;709      if (filename == NULL) {
000018  b934              CBNZ     r4,|L33.40|
;;;710        lua_pushliteral(L, "=stdin");
00001a  a13c              ADR      r1,|L33.268|
00001c  4648              MOV      r0,r9
00001e  f7fffffe          BL       lua_pushstring
;;;711        lf.f = stdin;
000022  483c              LDR      r0,|L33.276|
000024  9003              STR      r0,[sp,#0xc]
000026  e014              B        |L33.82|
                  |L33.40|
;;;712      }
;;;713      else {
;;;714        lua_pushfstring(L, "@%s", filename);
000028  4622              MOV      r2,r4
00002a  a13b              ADR      r1,|L33.280|
00002c  4648              MOV      r0,r9
00002e  f7fffffe          BL       lua_pushfstring
;;;715        lf.f = fopen(filename, "r");
000032  a13a              ADR      r1,|L33.284|
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       fopen
00003a  9003              STR      r0,[sp,#0xc]
;;;716        if (lf.f == NULL) return errfile(L, "open", fnameindex);
00003c  9803              LDR      r0,[sp,#0xc]
00003e  b940              CBNZ     r0,|L33.82|
000040  4642              MOV      r2,r8
000042  a137              ADR      r1,|L33.288|
000044  4648              MOV      r0,r9
000046  f7fffffe          BL       errfile
                  |L33.74|
;;;717      }
;;;718      if (skipcomment(&lf, &c))  /* read initial portion */
;;;719        lf.buff[lf.n++] = '\n';  /* add line to correct line numbers */
;;;720      if (c == LUA_SIGNATURE[0] && filename) {  /* binary file? */
;;;721        lf.f = freopen(filename, "rb", lf.f);  /* reopen in binary mode */
;;;722        if (lf.f == NULL) return errfile(L, "reopen", fnameindex);
;;;723        skipcomment(&lf, &c);  /* re-read initial portion */
;;;724      }
;;;725      if (c != EOF)
;;;726        lf.buff[lf.n++] = c;  /* 'c' is the first character of the stream */
;;;727      status = lua_load(L, getF, &lf, lua_tostring(L, -1), mode);
;;;728      readstatus = ferror(lf.f);
;;;729      if (filename) fclose(lf.f);  /* close file (even in case of errors) */
;;;730      if (readstatus) {
;;;731        lua_settop(L, fnameindex);  /* ignore results from 'lua_load' */
;;;732        return errfile(L, "read", fnameindex);
;;;733      }
;;;734      lua_remove(L, fnameindex);
;;;735      return status;
;;;736    }
00004a  f50d7d04          ADD      sp,sp,#0x210
00004e  e8bd87f0          POP      {r4-r10,pc}
                  |L33.82|
000052  a901              ADD      r1,sp,#4              ;718
000054  a802              ADD      r0,sp,#8              ;718
000056  f7fffffe          BL       skipcomment
00005a  b128              CBZ      r0,|L33.104|
00005c  210a              MOVS     r1,#0xa               ;719
00005e  9a02              LDR      r2,[sp,#8]            ;719
000060  1c50              ADDS     r0,r2,#1              ;719
000062  9002              STR      r0,[sp,#8]            ;719
000064  a804              ADD      r0,sp,#0x10           ;719
000066  5481              STRB     r1,[r0,r2]            ;719
                  |L33.104|
000068  a02f              ADR      r0,|L33.296|
00006a  f9900000          LDRSB    r0,[r0,#0]            ;720
00006e  9901              LDR      r1,[sp,#4]            ;720
000070  4288              CMP      r0,r1                 ;720
000072  d112              BNE      |L33.154|
000074  b18c              CBZ      r4,|L33.154|
000076  a12e              ADR      r1,|L33.304|
000078  4620              MOV      r0,r4                 ;721
00007a  9a03              LDR      r2,[sp,#0xc]          ;721
00007c  f7fffffe          BL       freopen
000080  9003              STR      r0,[sp,#0xc]          ;721
000082  9803              LDR      r0,[sp,#0xc]          ;722
000084  b928              CBNZ     r0,|L33.146|
000086  4642              MOV      r2,r8                 ;722
000088  a12a              ADR      r1,|L33.308|
00008a  4648              MOV      r0,r9                 ;722
00008c  f7fffffe          BL       errfile
000090  e7db              B        |L33.74|
                  |L33.146|
000092  a901              ADD      r1,sp,#4              ;723
000094  a802              ADD      r0,sp,#8              ;723
000096  f7fffffe          BL       skipcomment
                  |L33.154|
00009a  9801              LDR      r0,[sp,#4]            ;725
00009c  1c40              ADDS     r0,r0,#1              ;725
00009e  b130              CBZ      r0,|L33.174|
0000a0  9801              LDR      r0,[sp,#4]            ;726
0000a2  b241              SXTB     r1,r0                 ;726
0000a4  9a02              LDR      r2,[sp,#8]            ;726
0000a6  1c50              ADDS     r0,r2,#1              ;726
0000a8  9002              STR      r0,[sp,#8]            ;726
0000aa  a804              ADD      r0,sp,#0x10           ;726
0000ac  5481              STRB     r1,[r0,r2]            ;726
                  |L33.174|
0000ae  2200              MOVS     r2,#0                 ;727
0000b0  1e51              SUBS     r1,r2,#1              ;727
0000b2  4648              MOV      r0,r9                 ;727
0000b4  f7fffffe          BL       lua_tolstring
0000b8  4682              MOV      r10,r0                ;727
0000ba  4653              MOV      r3,r10                ;727
0000bc  aa02              ADD      r2,sp,#8              ;727
0000be  491f              LDR      r1,|L33.316|
0000c0  4648              MOV      r0,r9                 ;727
0000c2  9600              STR      r6,[sp,#0]            ;727
0000c4  f7fffffe          BL       lua_load
0000c8  4607              MOV      r7,r0                 ;727
0000ca  9803              LDR      r0,[sp,#0xc]          ;728
0000cc  f7fffffe          BL       ferror
0000d0  4605              MOV      r5,r0                 ;728
0000d2  b114              CBZ      r4,|L33.218|
0000d4  9803              LDR      r0,[sp,#0xc]          ;729
0000d6  f7fffffe          BL       fclose
                  |L33.218|
0000da  b14d              CBZ      r5,|L33.240|
0000dc  4641              MOV      r1,r8                 ;731
0000de  4648              MOV      r0,r9                 ;731
0000e0  f7fffffe          BL       lua_settop
0000e4  4642              MOV      r2,r8                 ;732
0000e6  a116              ADR      r1,|L33.320|
0000e8  4648              MOV      r0,r9                 ;732
0000ea  f7fffffe          BL       errfile
0000ee  e7ac              B        |L33.74|
                  |L33.240|
0000f0  f04f32ff          MOV      r2,#0xffffffff        ;734
0000f4  4641              MOV      r1,r8                 ;734
0000f6  4648              MOV      r0,r9                 ;734
0000f8  f7fffffe          BL       lua_rotate
0000fc  f06f0101          MVN      r1,#1                 ;734
000100  4648              MOV      r0,r9                 ;734
000102  f7fffffe          BL       lua_settop
000106  4638              MOV      r0,r7                 ;735
000108  e79f              B        |L33.74|
;;;737    
                          ENDP

00010a  0000              DCW      0x0000
                  |L33.268|
00010c  3d737464          DCB      "=stdin",0
000110  696e00  
000113  00                DCB      0
                  |L33.276|
                          DCD      __stdin
                  |L33.280|
000118  40257300          DCB      "@%s",0
                  |L33.284|
00011c  7200              DCB      "r",0
00011e  00                DCB      0
00011f  00                DCB      0
                  |L33.288|
000120  6f70656e          DCB      "open",0
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0
                  |L33.296|
000128  1b4c7561          DCB      27,"Lua",0
00012c  00      
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0
                  |L33.304|
000130  726200            DCB      "rb",0
000133  00                DCB      0
                  |L33.308|
000134  72656f70          DCB      "reopen",0
000138  656e00  
00013b  00                DCB      0
                  |L33.316|
                          DCD      getF
                  |L33.320|
000140  72656164          DCB      "read",0
000144  00      
000145  00                DCB      0
000146  00                DCB      0
000147  00                DCB      0

                          AREA ||i.luaL_loadstring||, CODE, READONLY, ALIGN=1

                  luaL_loadstring PROC
;;;763    
;;;764    LUALIB_API int luaL_loadstring (lua_State *L, const char *s) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;765      return luaL_loadbuffer(L, s, strlen(s), s);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       strlen
00000c  4606              MOV      r6,r0
00000e  2000              MOVS     r0,#0
000010  4623              MOV      r3,r4
000012  4632              MOV      r2,r6
000014  4621              MOV      r1,r4
000016  9000              STR      r0,[sp,#0]
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       luaL_loadbufferx
;;;766    }
00001e  bdf8              POP      {r3-r7,pc}
;;;767    
                          ENDP


                          AREA ||i.luaL_newmetatable||, CODE, READONLY, ALIGN=2

                  luaL_newmetatable PROC
;;;298    
;;;299    LUALIB_API int luaL_newmetatable (lua_State *L, const char *tname) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;300      if (luaL_getmetatable(L, tname) != LUA_TNIL)  /* name already in use? */
000006  4622              MOV      r2,r4
000008  4913              LDR      r1,|L35.88|
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       lua_getfield
000010  b108              CBZ      r0,|L35.22|
;;;301        return 0;  /* leave previous value on top, but return 0 */
000012  2000              MOVS     r0,#0
                  |L35.20|
;;;302      lua_pop(L, 1);
;;;303      lua_createtable(L, 0, 2);  /* create metatable */
;;;304      lua_pushstring(L, tname);
;;;305      lua_setfield(L, -2, "__name");  /* metatable.__name = tname */
;;;306      lua_pushvalue(L, -1);
;;;307      lua_setfield(L, LUA_REGISTRYINDEX, tname);  /* registry.name = metatable */
;;;308      return 1;
;;;309    }
000014  bd70              POP      {r4-r6,pc}
                  |L35.22|
000016  f06f0101          MVN      r1,#1                 ;302
00001a  4628              MOV      r0,r5                 ;302
00001c  f7fffffe          BL       lua_settop
000020  2202              MOVS     r2,#2                 ;303
000022  2100              MOVS     r1,#0                 ;303
000024  4628              MOV      r0,r5                 ;303
000026  f7fffffe          BL       lua_createtable
00002a  4621              MOV      r1,r4                 ;304
00002c  4628              MOV      r0,r5                 ;304
00002e  f7fffffe          BL       lua_pushstring
000032  a20a              ADR      r2,|L35.92|
000034  f06f0101          MVN      r1,#1                 ;305
000038  4628              MOV      r0,r5                 ;305
00003a  f7fffffe          BL       lua_setfield
00003e  f04f31ff          MOV      r1,#0xffffffff        ;306
000042  4628              MOV      r0,r5                 ;306
000044  f7fffffe          BL       lua_pushvalue
000048  4622              MOV      r2,r4                 ;307
00004a  4903              LDR      r1,|L35.88|
00004c  4628              MOV      r0,r5                 ;307
00004e  f7fffffe          BL       lua_setfield
000052  2001              MOVS     r0,#1                 ;308
000054  e7de              B        |L35.20|
;;;310    
                          ENDP

000056  0000              DCW      0x0000
                  |L35.88|
                          DCD      0xfff0b9d8
                  |L35.92|
00005c  5f5f6e61          DCB      "__name",0
000060  6d6500  
000063  00                DCB      0

                          AREA ||i.luaL_newstate||, CODE, READONLY, ALIGN=2

                  luaL_newstate PROC
;;;944    
;;;945    LUALIB_API lua_State *luaL_newstate (void) {
000000  b510              PUSH     {r4,lr}
;;;946      lua_State *L = lua_newstate(l_alloc, NULL);
000002  2100              MOVS     r1,#0
000004  4805              LDR      r0,|L36.28|
000006  f7fffffe          BL       lua_newstate
00000a  4604              MOV      r4,r0
;;;947      if (L) lua_atpanic(L, &panic);
00000c  b11c              CBZ      r4,|L36.22|
00000e  4904              LDR      r1,|L36.32|
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       lua_atpanic
                  |L36.22|
;;;948      return L;
000016  4620              MOV      r0,r4
;;;949    }
000018  bd10              POP      {r4,pc}
;;;950    
                          ENDP

00001a  0000              DCW      0x0000
                  |L36.28|
                          DCD      l_alloc
                  |L36.32|
                          DCD      panic

                          AREA ||i.luaL_optinteger||, CODE, READONLY, ALIGN=1

                  luaL_optinteger PROC
;;;439    
;;;440    LUALIB_API lua_Integer luaL_optinteger (lua_State *L, int arg,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;441                                                          lua_Integer def) {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;442      return luaL_opt(L, luaL_checkinteger, arg, def);
00000c  4639              MOV      r1,r7
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       lua_type
000014  2800              CMP      r0,#0
000016  dc03              BGT      |L37.32|
000018  4620              MOV      r0,r4
00001a  4629              MOV      r1,r5
                  |L37.28|
;;;443    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L37.32|
000020  4639              MOV      r1,r7                 ;442
000022  4630              MOV      r0,r6                 ;442
000024  f7fffffe          BL       luaL_checkinteger
000028  e7f8              B        |L37.28|
;;;444    
                          ENDP


                          AREA ||i.luaL_optlstring||, CODE, READONLY, ALIGN=1

                  luaL_optlstring PROC
;;;396    
;;;397    LUALIB_API const char *luaL_optlstring (lua_State *L, int arg,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;398                                            const char *def, size_t *len) {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
;;;399      if (lua_isnoneornil(L, arg)) {
00000c  4639              MOV      r1,r7
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       lua_type
000014  2800              CMP      r0,#0
000016  dc0a              BGT      |L38.46|
;;;400        if (len)
000018  b134              CBZ      r4,|L38.40|
;;;401          *len = (def ? strlen(def) : 0);
00001a  b11d              CBZ      r5,|L38.36|
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       strlen
000022  e000              B        |L38.38|
                  |L38.36|
000024  2000              MOVS     r0,#0
                  |L38.38|
000026  6020              STR      r0,[r4,#0]
                  |L38.40|
;;;402        return def;
000028  4628              MOV      r0,r5
                  |L38.42|
;;;403      }
;;;404      else return luaL_checklstring(L, arg, len);
;;;405    }
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L38.46|
00002e  4622              MOV      r2,r4                 ;404
000030  4639              MOV      r1,r7                 ;404
000032  4630              MOV      r0,r6                 ;404
000034  f7fffffe          BL       luaL_checklstring
000038  e7f7              B        |L38.42|
;;;406    
                          ENDP


                          AREA ||i.luaL_optnumber||, CODE, READONLY, ALIGN=1

                  luaL_optnumber PROC
;;;416    
;;;417    LUALIB_API lua_Number luaL_optnumber (lua_State *L, int arg, lua_Number def) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;418      return luaL_opt(L, luaL_checknumber, arg, def);
00000c  4639              MOV      r1,r7
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       lua_type
000014  2800              CMP      r0,#0
000016  dc03              BGT      |L39.32|
000018  4620              MOV      r0,r4
00001a  4629              MOV      r1,r5
                  |L39.28|
;;;419    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L39.32|
000020  4639              MOV      r1,r7                 ;418
000022  4630              MOV      r0,r6                 ;418
000024  f7fffffe          BL       luaL_checknumber
000028  e7f8              B        |L39.28|
;;;420    
                          ENDP


                          AREA ||i.luaL_prepbuffsize||, CODE, READONLY, ALIGN=2

                  luaL_prepbuffsize PROC
;;;504    */
;;;505    LUALIB_API char *luaL_prepbuffsize (luaL_Buffer *B, size_t sz) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;506      lua_State *L = B->L;
000008  f8d4800c          LDR      r8,[r4,#0xc]
;;;507      if (B->size - B->n < sz) {  /* not enough space? */
00000c  e9d40101          LDRD     r0,r1,[r4,#4]
000010  1a40              SUBS     r0,r0,r1
000012  42b0              CMP      r0,r6
000014  d22c              BCS      |L40.112|
;;;508        char *newbuff;
;;;509        size_t newsize = B->size * 2;  /* double buffer size */
000016  6860              LDR      r0,[r4,#4]
000018  0045              LSLS     r5,r0,#1
;;;510        if (newsize - B->n < sz)  /* not big enough? */
00001a  68a0              LDR      r0,[r4,#8]
00001c  1a28              SUBS     r0,r5,r0
00001e  42b0              CMP      r0,r6
000020  d201              BCS      |L40.38|
;;;511          newsize = B->n + sz;
000022  68a0              LDR      r0,[r4,#8]
000024  1985              ADDS     r5,r0,r6
                  |L40.38|
;;;512        if (newsize < B->n || newsize - B->n < sz)
000026  68a0              LDR      r0,[r4,#8]
000028  42a8              CMP      r0,r5
00002a  d803              BHI      |L40.52|
00002c  68a0              LDR      r0,[r4,#8]
00002e  1a28              SUBS     r0,r5,r0
000030  42b0              CMP      r0,r6
000032  d203              BCS      |L40.60|
                  |L40.52|
;;;513          luaL_error(L, "buffer too large");
000034  a111              ADR      r1,|L40.124|
000036  4640              MOV      r0,r8
000038  f7fffffe          BL       luaL_error
                  |L40.60|
;;;514        /* create larger buffer */
;;;515        if (buffonstack(B))
00003c  f1040010          ADD      r0,r4,#0x10
000040  6821              LDR      r1,[r4,#0]
000042  4281              CMP      r1,r0
000044  d007              BEQ      |L40.86|
;;;516          newbuff = (char *)resizebox(L, -1, newsize);
000046  462a              MOV      r2,r5
000048  f04f31ff          MOV      r1,#0xffffffff
00004c  4640              MOV      r0,r8
00004e  f7fffffe          BL       resizebox
000052  4607              MOV      r7,r0
000054  e009              B        |L40.106|
                  |L40.86|
;;;517        else {  /* no buffer yet */
;;;518          newbuff = (char *)newbox(L, newsize);
000056  4629              MOV      r1,r5
000058  4640              MOV      r0,r8
00005a  f7fffffe          BL       newbox
00005e  4607              MOV      r7,r0
;;;519          memcpy(newbuff, B->b, B->n * sizeof(char));  /* copy original content */
000060  4638              MOV      r0,r7
000062  68a2              LDR      r2,[r4,#8]
000064  6821              LDR      r1,[r4,#0]
000066  f7fffffe          BL       __aeabi_memcpy
                  |L40.106|
;;;520        }
;;;521        B->b = newbuff;
00006a  6027              STR      r7,[r4,#0]
;;;522        B->size = newsize;
00006c  6065              STR      r5,[r4,#4]
;;;523      }
00006e  bf00              NOP      
                  |L40.112|
;;;524      return &B->b[B->n];
000070  68a1              LDR      r1,[r4,#8]
000072  6820              LDR      r0,[r4,#0]
000074  4408              ADD      r0,r0,r1
;;;525    }
000076  e8bd81f0          POP      {r4-r8,pc}
;;;526    
                          ENDP

00007a  0000              DCW      0x0000
                  |L40.124|
00007c  62756666          DCB      "buffer too large",0
000080  65722074
000084  6f6f206c
000088  61726765
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0

                          AREA ||i.luaL_pushresult||, CODE, READONLY, ALIGN=1

                  luaL_pushresult PROC
;;;541    
;;;542    LUALIB_API void luaL_pushresult (luaL_Buffer *B) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;543      lua_State *L = B->L;
000004  68e5              LDR      r5,[r4,#0xc]
;;;544      lua_pushlstring(L, B->b, B->n);
000006  4628              MOV      r0,r5
000008  68a2              LDR      r2,[r4,#8]
00000a  6821              LDR      r1,[r4,#0]
00000c  f7fffffe          BL       lua_pushlstring
;;;545      if (buffonstack(B)) {
000010  f1040010          ADD      r0,r4,#0x10
000014  6821              LDR      r1,[r4,#0]
000016  4281              CMP      r1,r0
000018  d00f              BEQ      |L41.58|
;;;546        resizebox(L, -2, 0);  /* delete old buffer */
00001a  2200              MOVS     r2,#0
00001c  1e91              SUBS     r1,r2,#2
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       resizebox
;;;547        lua_remove(L, -2);  /* remove its header from the stack */
000024  f04f32ff          MOV      r2,#0xffffffff
000028  0051              LSLS     r1,r2,#1
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       lua_rotate
000030  f06f0101          MVN      r1,#1
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       lua_settop
                  |L41.58|
;;;548      }
;;;549    }
00003a  bd70              POP      {r4-r6,pc}
;;;550    
                          ENDP


                          AREA ||i.luaL_pushresultsize||, CODE, READONLY, ALIGN=1

                  luaL_pushresultsize PROC
;;;551    
;;;552    LUALIB_API void luaL_pushresultsize (luaL_Buffer *B, size_t sz) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;553      luaL_addsize(B, sz);
000006  68a0              LDR      r0,[r4,#8]
000008  4428              ADD      r0,r0,r5
00000a  60a0              STR      r0,[r4,#8]
;;;554      luaL_pushresult(B);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       luaL_pushresult
;;;555    }
000012  bd70              POP      {r4-r6,pc}
;;;556    
                          ENDP


                          AREA ||i.luaL_ref||, CODE, READONLY, ALIGN=1

                  luaL_ref PROC
;;;594    
;;;595    LUALIB_API int luaL_ref (lua_State *L, int t) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;596      int ref;
;;;597      if (lua_isnil(L, -1)) {
000006  f04f31ff          MOV      r1,#0xffffffff
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       lua_type
000010  b938              CBNZ     r0,|L43.34|
;;;598        lua_pop(L, 1);  /* remove from stack */
000012  f06f0101          MVN      r1,#1
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       lua_settop
;;;599        return LUA_REFNIL;  /* 'nil' has a unique fixed reference */
00001c  f04f30ff          MOV      r0,#0xffffffff
                  |L43.32|
;;;600      }
;;;601      t = lua_absindex(L, t);
;;;602      lua_rawgeti(L, t, freelist);  /* get first free element */
;;;603      ref = (int)lua_tointeger(L, -1);  /* ref = t[freelist] */
;;;604      lua_pop(L, 1);  /* remove it from stack */
;;;605      if (ref != 0) {  /* any free element? */
;;;606        lua_rawgeti(L, t, ref);  /* remove it from list */
;;;607        lua_rawseti(L, t, freelist);  /* (t[freelist] = t[ref]) */
;;;608      }
;;;609      else  /* no free elements */
;;;610        ref = (int)lua_rawlen(L, t) + 1;  /* get a new reference */
;;;611      lua_rawseti(L, t, ref);
;;;612      return ref;
;;;613    }
000020  bd70              POP      {r4-r6,pc}
                  |L43.34|
000022  4631              MOV      r1,r6                 ;601
000024  4628              MOV      r0,r5                 ;601
000026  f7fffffe          BL       lua_absindex
00002a  4606              MOV      r6,r0                 ;601
00002c  2200              MOVS     r2,#0                 ;602
00002e  4613              MOV      r3,r2                 ;602
000030  4631              MOV      r1,r6                 ;602
000032  4628              MOV      r0,r5                 ;602
000034  f7fffffe          BL       lua_rawgeti
000038  2200              MOVS     r2,#0                 ;603
00003a  1e51              SUBS     r1,r2,#1              ;603
00003c  4628              MOV      r0,r5                 ;603
00003e  f7fffffe          BL       lua_tointegerx
000042  4604              MOV      r4,r0                 ;603
000044  f06f0101          MVN      r1,#1                 ;604
000048  4628              MOV      r0,r5                 ;604
00004a  f7fffffe          BL       lua_settop
00004e  b164              CBZ      r4,|L43.106|
000050  4622              MOV      r2,r4                 ;606
000052  17e3              ASRS     r3,r4,#31             ;606
000054  4631              MOV      r1,r6                 ;606
000056  4628              MOV      r0,r5                 ;606
000058  f7fffffe          BL       lua_rawgeti
00005c  2200              MOVS     r2,#0                 ;607
00005e  4613              MOV      r3,r2                 ;607
000060  4631              MOV      r1,r6                 ;607
000062  4628              MOV      r0,r5                 ;607
000064  f7fffffe          BL       lua_rawseti
000068  e004              B        |L43.116|
                  |L43.106|
00006a  4631              MOV      r1,r6                 ;610
00006c  4628              MOV      r0,r5                 ;610
00006e  f7fffffe          BL       lua_rawlen
000072  1c44              ADDS     r4,r0,#1              ;610
                  |L43.116|
000074  4622              MOV      r2,r4                 ;611
000076  17e3              ASRS     r3,r4,#31             ;611
000078  4631              MOV      r1,r6                 ;611
00007a  4628              MOV      r0,r5                 ;611
00007c  f7fffffe          BL       lua_rawseti
000080  4620              MOV      r0,r4                 ;612
000082  e7cd              B        |L43.32|
;;;614    
                          ENDP


                          AREA ||i.luaL_requiref||, CODE, READONLY, ALIGN=2

                  luaL_requiref PROC
;;;889    */
;;;890    LUALIB_API void luaL_requiref (lua_State *L, const char *modname,
000000  b5f8              PUSH     {r3-r7,lr}
;;;891                                   lua_CFunction openf, int glb) {
000002  4607              MOV      r7,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
000008  461e              MOV      r6,r3
;;;892      luaL_getsubtable(L, LUA_REGISTRYINDEX, LUA_LOADED_TABLE);
00000a  a224              ADR      r2,|L44.156|
00000c  4925              LDR      r1,|L44.164|
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       luaL_getsubtable
;;;893      lua_getfield(L, -1, modname);  /* LOADED[modname] */
000014  4622              MOV      r2,r4
000016  f04f31ff          MOV      r1,#0xffffffff
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       lua_getfield
;;;894      if (!lua_toboolean(L, -1)) {  /* package not already loaded? */
000020  f04f31ff          MOV      r1,#0xffffffff
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       lua_toboolean
00002a  bb00              CBNZ     r0,|L44.110|
;;;895        lua_pop(L, 1);  /* remove field */
00002c  f06f0101          MVN      r1,#1
000030  4638              MOV      r0,r7
000032  f7fffffe          BL       lua_settop
;;;896        lua_pushcfunction(L, openf);
000036  2200              MOVS     r2,#0
000038  4629              MOV      r1,r5
00003a  4638              MOV      r0,r7
00003c  f7fffffe          BL       lua_pushcclosure
;;;897        lua_pushstring(L, modname);  /* argument to open function */
000040  4621              MOV      r1,r4
000042  4638              MOV      r0,r7
000044  f7fffffe          BL       lua_pushstring
;;;898        lua_call(L, 1, 1);  /* call 'openf' to open module */
000048  2000              MOVS     r0,#0
00004a  4603              MOV      r3,r0
00004c  2201              MOVS     r2,#1
00004e  4611              MOV      r1,r2
000050  9000              STR      r0,[sp,#0]
000052  4638              MOV      r0,r7
000054  f7fffffe          BL       lua_callk
;;;899        lua_pushvalue(L, -1);  /* make copy of module (call result) */
000058  f04f31ff          MOV      r1,#0xffffffff
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       lua_pushvalue
;;;900        lua_setfield(L, -3, modname);  /* LOADED[modname] = module */
000062  4622              MOV      r2,r4
000064  f06f0102          MVN      r1,#2
000068  4638              MOV      r0,r7
00006a  f7fffffe          BL       lua_setfield
                  |L44.110|
;;;901      }
;;;902      lua_remove(L, -2);  /* remove LOADED table */
00006e  f04f32ff          MOV      r2,#0xffffffff
000072  0051              LSLS     r1,r2,#1
000074  4638              MOV      r0,r7
000076  f7fffffe          BL       lua_rotate
00007a  f06f0101          MVN      r1,#1
00007e  4638              MOV      r0,r7
000080  f7fffffe          BL       lua_settop
;;;903      if (glb) {
000084  b146              CBZ      r6,|L44.152|
;;;904        lua_pushvalue(L, -1);  /* copy of module */
000086  f04f31ff          MOV      r1,#0xffffffff
00008a  4638              MOV      r0,r7
00008c  f7fffffe          BL       lua_pushvalue
;;;905        lua_setglobal(L, modname);  /* _G[modname] = module */
000090  4621              MOV      r1,r4
000092  4638              MOV      r0,r7
000094  f7fffffe          BL       lua_setglobal
                  |L44.152|
;;;906      }
;;;907    }
000098  bdf8              POP      {r3-r7,pc}
;;;908    
                          ENDP

00009a  0000              DCW      0x0000
                  |L44.156|
00009c  5f4c4f41          DCB      "_LOADED",0
0000a0  44454400
                  |L44.164|
                          DCD      0xfff0b9d8

                          AREA ||i.luaL_setfuncs||, CODE, READONLY, ALIGN=2

                  luaL_setfuncs PROC
;;;852    */
;;;853    LUALIB_API void luaL_setfuncs (lua_State *L, const luaL_Reg *l, int nup) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
;;;854      luaL_checkstack(L, nup, "too many upvalues");
00000a  a212              ADR      r2,|L45.84|
00000c  4621              MOV      r1,r4
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       luaL_checkstack
;;;855      for (; l->name != NULL; l++) {  /* fill the table with given functions */
000014  e014              B        |L45.64|
                  |L45.22|
;;;856        int i;
;;;857        for (i = 0; i < nup; i++)  /* copy upvalues to the top */
000016  2600              MOVS     r6,#0
000018  e004              B        |L45.36|
                  |L45.26|
;;;858          lua_pushvalue(L, -nup);
00001a  4261              RSBS     r1,r4,#0
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       lua_pushvalue
000022  1c76              ADDS     r6,r6,#1              ;857
                  |L45.36|
000024  42a6              CMP      r6,r4                 ;857
000026  dbf8              BLT      |L45.26|
;;;859        lua_pushcclosure(L, l->func, nup);  /* closure with those upvalues */
000028  4622              MOV      r2,r4
00002a  4638              MOV      r0,r7
00002c  6869              LDR      r1,[r5,#4]
00002e  f7fffffe          BL       lua_pushcclosure
;;;860        lua_setfield(L, -(nup + 2), l->name);
000032  1ca0              ADDS     r0,r4,#2
000034  4241              RSBS     r1,r0,#0
000036  4638              MOV      r0,r7
000038  682a              LDR      r2,[r5,#0]
00003a  f7fffffe          BL       lua_setfield
00003e  3508              ADDS     r5,r5,#8              ;855
                  |L45.64|
000040  6828              LDR      r0,[r5,#0]            ;855
000042  2800              CMP      r0,#0                 ;855
000044  d1e7              BNE      |L45.22|
;;;861      }
;;;862      lua_pop(L, nup);  /* remove upvalues */
000046  f1c431ff          RSB      r1,r4,#0xffffffff
00004a  4638              MOV      r0,r7
00004c  f7fffffe          BL       lua_settop
;;;863    }
000050  e8bd81f0          POP      {r4-r8,pc}
;;;864    
                          ENDP

                  |L45.84|
000054  746f6f20          DCB      "too many upvalues",0
000058  6d616e79
00005c  20757076
000060  616c7565
000064  7300    
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.luaL_setmetatable||, CODE, READONLY, ALIGN=2

                  luaL_setmetatable PROC
;;;311    
;;;312    LUALIB_API void luaL_setmetatable (lua_State *L, const char *tname) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;313      luaL_getmetatable(L, tname);
000006  4622              MOV      r2,r4
000008  4904              LDR      r1,|L46.28|
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       lua_getfield
;;;314      lua_setmetatable(L, -2);
000010  f06f0101          MVN      r1,#1
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       lua_setmetatable
;;;315    }
00001a  bd70              POP      {r4-r6,pc}
;;;316    
                          ENDP

                  |L46.28|
                          DCD      0xfff0b9d8

                          AREA ||i.luaL_testudata||, CODE, READONLY, ALIGN=2

                  luaL_testudata PROC
;;;317    
;;;318    LUALIB_API void *luaL_testudata (lua_State *L, int ud, const char *tname) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;319      void *p = lua_touserdata(L, ud);
00000a  4631              MOV      r1,r6
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lua_touserdata
000012  4604              MOV      r4,r0
;;;320      if (p != NULL) {  /* value is a userdata? */
000014  b1cc              CBZ      r4,|L47.74|
;;;321        if (lua_getmetatable(L, ud)) {  /* does it have a metatable? */
000016  4631              MOV      r1,r6
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       lua_getmetatable
00001e  b1a0              CBZ      r0,|L47.74|
;;;322          luaL_getmetatable(L, tname);  /* get correct metatable */
000020  463a              MOV      r2,r7
000022  490b              LDR      r1,|L47.80|
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       lua_getfield
;;;323          if (!lua_rawequal(L, -1, -2))  /* not the same? */
00002a  f06f0201          MVN      r2,#1
00002e  1051              ASRS     r1,r2,#1
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       lua_rawequal
000036  b900              CBNZ     r0,|L47.58|
;;;324            p = NULL;  /* value is a userdata with wrong metatable */
000038  2400              MOVS     r4,#0
                  |L47.58|
;;;325          lua_pop(L, 2);  /* remove both metatables */
00003a  f06f0102          MVN      r1,#2
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       lua_settop
;;;326          return p;
000044  4620              MOV      r0,r4
                  |L47.70|
;;;327        }
;;;328      }
;;;329      return NULL;  /* value is not a userdata with a metatable */
;;;330    }
000046  e8bd81f0          POP      {r4-r8,pc}
                  |L47.74|
00004a  2000              MOVS     r0,#0                 ;329
00004c  e7fb              B        |L47.70|
;;;331    
                          ENDP

00004e  0000              DCW      0x0000
                  |L47.80|
                          DCD      0xfff0b9d8

                          AREA ||i.luaL_tolstring||, CODE, READONLY, ALIGN=2

                  luaL_tolstring PROC
;;;809    
;;;810    LUALIB_API const char *luaL_tolstring (lua_State *L, int idx, size_t *len) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
;;;811      if (luaL_callmeta(L, idx, "__tostring")) {  /* metafield? */
00000a  a247              ADR      r2,|L48.296|
00000c  4631              MOV      r1,r6
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       luaL_callmeta
000014  b158              CBZ      r0,|L48.46|
;;;812        if (!lua_isstring(L, -1))
000016  f04f31ff          MOV      r1,#0xffffffff
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       lua_isstring
000020  2800              CMP      r0,#0
000022  d179              BNE      |L48.280|
;;;813          luaL_error(L, "'__tostring' must return a string");
000024  a143              ADR      r1,|L48.308|
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       luaL_error
00002c  e074              B        |L48.280|
                  |L48.46|
;;;814      }
;;;815      else {
;;;816        switch (lua_type(L, idx)) {
00002e  4631              MOV      r1,r6
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       lua_type
000036  2800              CMP      r0,#0
000038  d038              BEQ      |L48.172|
00003a  2801              CMP      r0,#1
00003c  d028              BEQ      |L48.144|
00003e  2803              CMP      r0,#3
000040  d002              BEQ      |L48.72|
000042  2804              CMP      r0,#4
000044  d137              BNE      |L48.182|
000046  e01e              B        |L48.134|
                  |L48.72|
;;;817          case LUA_TNUMBER: {
;;;818            if (lua_isinteger(L, idx))
000048  4631              MOV      r1,r6
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       lua_isinteger
000050  b160              CBZ      r0,|L48.108|
;;;819              lua_pushfstring(L, "%I", (LUAI_UACINT)lua_tointeger(L, idx));
000052  2200              MOVS     r2,#0
000054  4631              MOV      r1,r6
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       lua_tointegerx
00005c  4607              MOV      r7,r0
00005e  463a              MOV      r2,r7
000060  460b              MOV      r3,r1
000062  a13d              ADR      r1,|L48.344|
000064  4628              MOV      r0,r5
000066  f7fffffe          BL       lua_pushfstring
00006a  e00b              B        |L48.132|
                  |L48.108|
;;;820            else
;;;821              lua_pushfstring(L, "%f", (LUAI_UACNUMBER)lua_tonumber(L, idx));
00006c  2200              MOVS     r2,#0
00006e  4631              MOV      r1,r6
000070  4628              MOV      r0,r5
000072  f7fffffe          BL       lua_tonumberx
000076  4607              MOV      r7,r0
000078  463a              MOV      r2,r7
00007a  460b              MOV      r3,r1
00007c  a137              ADR      r1,|L48.348|
00007e  4628              MOV      r0,r5
000080  f7fffffe          BL       lua_pushfstring
                  |L48.132|
;;;822            break;
000084  e047              B        |L48.278|
                  |L48.134|
;;;823          }
;;;824          case LUA_TSTRING:
;;;825            lua_pushvalue(L, idx);
000086  4631              MOV      r1,r6
000088  4628              MOV      r0,r5
00008a  f7fffffe          BL       lua_pushvalue
;;;826            break;
00008e  e042              B        |L48.278|
                  |L48.144|
;;;827          case LUA_TBOOLEAN:
;;;828            lua_pushstring(L, (lua_toboolean(L, idx) ? "true" : "false"));
000090  4631              MOV      r1,r6
000092  4628              MOV      r0,r5
000094  f7fffffe          BL       lua_toboolean
000098  b108              CBZ      r0,|L48.158|
00009a  a031              ADR      r0,|L48.352|
00009c  e000              B        |L48.160|
                  |L48.158|
00009e  a032              ADR      r0,|L48.360|
                  |L48.160|
0000a0  4604              MOV      r4,r0
0000a2  4621              MOV      r1,r4
0000a4  4628              MOV      r0,r5
0000a6  f7fffffe          BL       lua_pushstring
;;;829            break;
0000aa  e034              B        |L48.278|
                  |L48.172|
;;;830          case LUA_TNIL:
;;;831            lua_pushliteral(L, "nil");
0000ac  a130              ADR      r1,|L48.368|
0000ae  4628              MOV      r0,r5
0000b0  f7fffffe          BL       lua_pushstring
;;;832            break;
0000b4  e02f              B        |L48.278|
                  |L48.182|
;;;833          default: {
;;;834            int tt = luaL_getmetafield(L, idx, "__name");  /* try name */
0000b6  a22f              ADR      r2,|L48.372|
0000b8  4631              MOV      r1,r6
0000ba  4628              MOV      r0,r5
0000bc  f7fffffe          BL       luaL_getmetafield
0000c0  4604              MOV      r4,r0
;;;835            const char *kind = (tt == LUA_TSTRING) ? lua_tostring(L, -1) :
0000c2  2c04              CMP      r4,#4
0000c4  d105              BNE      |L48.210|
0000c6  2200              MOVS     r2,#0
0000c8  1f41              SUBS     r1,r0,#5
0000ca  4628              MOV      r0,r5
0000cc  f7fffffe          BL       lua_tolstring
0000d0  e008              B        |L48.228|
                  |L48.210|
;;;836                                                     luaL_typename(L, idx);
0000d2  4631              MOV      r1,r6
0000d4  4628              MOV      r0,r5
0000d6  f7fffffe          BL       lua_type
0000da  4680              MOV      r8,r0
0000dc  4641              MOV      r1,r8
0000de  4628              MOV      r0,r5
0000e0  f7fffffe          BL       lua_typename
                  |L48.228|
0000e4  4607              MOV      r7,r0
;;;837            lua_pushfstring(L, "%s: %p", kind, lua_topointer(L, idx));
0000e6  4631              MOV      r1,r6
0000e8  4628              MOV      r0,r5
0000ea  f7fffffe          BL       lua_topointer
0000ee  4680              MOV      r8,r0
0000f0  4643              MOV      r3,r8
0000f2  463a              MOV      r2,r7
0000f4  a121              ADR      r1,|L48.380|
0000f6  4628              MOV      r0,r5
0000f8  f7fffffe          BL       lua_pushfstring
;;;838            if (tt != LUA_TNIL)
0000fc  b154              CBZ      r4,|L48.276|
;;;839              lua_remove(L, -2);  /* remove '__name' */
0000fe  f04f32ff          MOV      r2,#0xffffffff
000102  0051              LSLS     r1,r2,#1
000104  4628              MOV      r0,r5
000106  f7fffffe          BL       lua_rotate
00010a  f06f0101          MVN      r1,#1
00010e  4628              MOV      r0,r5
000110  f7fffffe          BL       lua_settop
                  |L48.276|
;;;840            break;
000114  bf00              NOP      
                  |L48.278|
000116  bf00              NOP                            ;822
                  |L48.280|
;;;841          }
;;;842        }
;;;843      }
;;;844      return lua_tolstring(L, -1, len);
000118  464a              MOV      r2,r9
00011a  f04f31ff          MOV      r1,#0xffffffff
00011e  4628              MOV      r0,r5
000120  f7fffffe          BL       lua_tolstring
;;;845    }
000124  e8bd87f0          POP      {r4-r10,pc}
;;;846    
                          ENDP

                  |L48.296|
000128  5f5f746f          DCB      "__tostring",0
00012c  73747269
000130  6e6700  
000133  00                DCB      0
                  |L48.308|
000134  275f5f74          DCB      "'__tostring' must return a string",0
000138  6f737472
00013c  696e6727
000140  206d7573
000144  74207265
000148  7475726e
00014c  20612073
000150  7472696e
000154  6700    
000156  00                DCB      0
000157  00                DCB      0
                  |L48.344|
000158  254900            DCB      "%I",0
00015b  00                DCB      0
                  |L48.348|
00015c  256600            DCB      "%f",0
00015f  00                DCB      0
                  |L48.352|
000160  74727565          DCB      "true",0
000164  00      
000165  00                DCB      0
000166  00                DCB      0
000167  00                DCB      0
                  |L48.360|
000168  66616c73          DCB      "false",0
00016c  6500    
00016e  00                DCB      0
00016f  00                DCB      0
                  |L48.368|
000170  6e696c00          DCB      "nil",0
                  |L48.372|
000174  5f5f6e61          DCB      "__name",0
000178  6d6500  
00017b  00                DCB      0
                  |L48.380|
00017c  25733a20          DCB      "%s: %p",0
000180  257000  
000183  00                DCB      0

                          AREA ||i.luaL_traceback||, CODE, READONLY, ALIGN=2

                  luaL_traceback PROC
;;;124    
;;;125    LUALIB_API void luaL_traceback (lua_State *L, lua_State *L1,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;126                                    const char *msg, int level) {
000004  b09b              SUB      sp,sp,#0x6c
000006  4681              MOV      r9,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461c              MOV      r4,r3
;;;127      lua_Debug ar;
;;;128      int top = lua_gettop(L);
00000e  4648              MOV      r0,r9
000010  f7fffffe          BL       lua_gettop
000014  4607              MOV      r7,r0
;;;129      int last = lastlevel(L1);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       lastlevel
00001c  4680              MOV      r8,r0
;;;130      int n1 = (last - level > LEVELS1 + LEVELS2) ? LEVELS1 : -1;
00001e  eba80004          SUB      r0,r8,r4
000022  2815              CMP      r0,#0x15
000024  dd01              BLE      |L49.42|
000026  200a              MOVS     r0,#0xa
000028  e001              B        |L49.46|
                  |L49.42|
00002a  f04f30ff          MOV      r0,#0xffffffff
                  |L49.46|
00002e  4682              MOV      r10,r0
;;;131      if (msg)
000030  b126              CBZ      r6,|L49.60|
;;;132        lua_pushfstring(L, "%s\n", msg);
000032  4632              MOV      r2,r6
000034  a12b              ADR      r1,|L49.228|
000036  4648              MOV      r0,r9
000038  f7fffffe          BL       lua_pushfstring
                  |L49.60|
;;;133      luaL_checkstack(L, 10, NULL);
00003c  2200              MOVS     r2,#0
00003e  210a              MOVS     r1,#0xa
000040  4648              MOV      r0,r9
000042  f7fffffe          BL       luaL_checkstack
;;;134      lua_pushliteral(L, "stack traceback:");
000046  a128              ADR      r1,|L49.232|
000048  4648              MOV      r0,r9
00004a  f7fffffe          BL       lua_pushstring
;;;135      while (lua_getstack(L1, level++, &ar)) {
00004e  e035              B        |L49.188|
                  |L49.80|
;;;136        if (n1-- == 0) {  /* too many levels? */
000050  f1ba0000          SUBS     r0,r10,#0
000054  f1aa0a01          SUB      r10,r10,#1
000058  d106              BNE      |L49.104|
;;;137          lua_pushliteral(L, "\n\t...");  /* add a '...' */
00005a  a128              ADR      r1,|L49.252|
00005c  4648              MOV      r0,r9
00005e  f7fffffe          BL       lua_pushstring
;;;138          level = last - LEVELS2 + 1;  /* and skip to last ones */
000062  f1a8040a          SUB      r4,r8,#0xa
000066  e029              B        |L49.188|
                  |L49.104|
;;;139        }
;;;140        else {
;;;141          lua_getinfo(L1, "Slnt", &ar);
000068  aa01              ADD      r2,sp,#4
00006a  a126              ADR      r1,|L49.260|
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       lua_getinfo
;;;142          lua_pushfstring(L, "\n\t%s:", ar.short_src);
000072  aa0b              ADD      r2,sp,#0x2c
000074  a125              ADR      r1,|L49.268|
000076  4648              MOV      r0,r9
000078  f7fffffe          BL       lua_pushfstring
;;;143          if (ar.currentline > 0)
00007c  9806              LDR      r0,[sp,#0x18]
00007e  2800              CMP      r0,#0
000080  dd04              BLE      |L49.140|
;;;144            lua_pushfstring(L, "%d:", ar.currentline);
000082  a124              ADR      r1,|L49.276|
000084  4648              MOV      r0,r9
000086  9a06              LDR      r2,[sp,#0x18]
000088  f7fffffe          BL       lua_pushfstring
                  |L49.140|
;;;145          lua_pushliteral(L, " in ");
00008c  a122              ADR      r1,|L49.280|
00008e  4648              MOV      r0,r9
000090  f7fffffe          BL       lua_pushstring
;;;146          pushfuncname(L, &ar);
000094  a901              ADD      r1,sp,#4
000096  4648              MOV      r0,r9
000098  f7fffffe          BL       pushfuncname
;;;147          if (ar.istailcall)
00009c  f89d0027          LDRB     r0,[sp,#0x27]
0000a0  b118              CBZ      r0,|L49.170|
;;;148            lua_pushliteral(L, "\n\t(...tail calls...)");
0000a2  a11f              ADR      r1,|L49.288|
0000a4  4648              MOV      r0,r9
0000a6  f7fffffe          BL       lua_pushstring
                  |L49.170|
;;;149          lua_concat(L, lua_gettop(L) - top);
0000aa  4648              MOV      r0,r9
0000ac  f7fffffe          BL       lua_gettop
0000b0  eba00b07          SUB      r11,r0,r7
0000b4  4659              MOV      r1,r11
0000b6  4648              MOV      r0,r9
0000b8  f7fffffe          BL       lua_concat
                  |L49.188|
0000bc  4621              MOV      r1,r4                 ;135
0000be  1c64              ADDS     r4,r4,#1              ;135
0000c0  aa01              ADD      r2,sp,#4              ;135
0000c2  4628              MOV      r0,r5                 ;135
0000c4  f7fffffe          BL       lua_getstack
0000c8  2800              CMP      r0,#0                 ;135
0000ca  d1c1              BNE      |L49.80|
;;;150        }
;;;151      }
;;;152      lua_concat(L, lua_gettop(L) - top);
0000cc  4648              MOV      r0,r9
0000ce  f7fffffe          BL       lua_gettop
0000d2  eba00b07          SUB      r11,r0,r7
0000d6  4659              MOV      r1,r11
0000d8  4648              MOV      r0,r9
0000da  f7fffffe          BL       lua_concat
;;;153    }
0000de  b01b              ADD      sp,sp,#0x6c
0000e0  e8bd8ff0          POP      {r4-r11,pc}
;;;154    
                          ENDP

                  |L49.228|
0000e4  25730a00          DCB      "%s\n",0
                  |L49.232|
0000e8  73746163          DCB      "stack traceback:",0
0000ec  6b207472
0000f0  61636562
0000f4  61636b3a
0000f8  00      
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L49.252|
0000fc  0a092e2e          DCB      "\n\t...",0
000100  2e00    
000102  00                DCB      0
000103  00                DCB      0
                  |L49.260|
000104  536c6e74          DCB      "Slnt",0
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0
                  |L49.268|
00010c  0a092573          DCB      "\n\t%s:",0
000110  3a00    
000112  00                DCB      0
000113  00                DCB      0
                  |L49.276|
000114  25643a00          DCB      "%d:",0
                  |L49.280|
000118  20696e20          DCB      " in ",0
00011c  00      
00011d  00                DCB      0
00011e  00                DCB      0
00011f  00                DCB      0
                  |L49.288|
000120  0a09282e          DCB      "\n\t(...tail calls...)",0
000124  2e2e7461
000128  696c2063
00012c  616c6c73
000130  2e2e2e29
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0

                          AREA ||i.luaL_unref||, CODE, READONLY, ALIGN=1

                  luaL_unref PROC
;;;615    
;;;616    LUALIB_API void luaL_unref (lua_State *L, int t, int ref) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;617      if (ref >= 0) {
000008  2c00              CMP      r4,#0
00000a  db1b              BLT      |L50.68|
;;;618        t = lua_absindex(L, t);
00000c  4631              MOV      r1,r6
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       lua_absindex
000014  4606              MOV      r6,r0
;;;619        lua_rawgeti(L, t, freelist);
000016  2200              MOVS     r2,#0
000018  4613              MOV      r3,r2
00001a  4631              MOV      r1,r6
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       lua_rawgeti
;;;620        lua_rawseti(L, t, ref);  /* t[ref] = t[freelist] */
000022  4622              MOV      r2,r4
000024  17e3              ASRS     r3,r4,#31
000026  4631              MOV      r1,r6
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       lua_rawseti
;;;621        lua_pushinteger(L, ref);
00002e  4622              MOV      r2,r4
000030  17e3              ASRS     r3,r4,#31
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       lua_pushinteger
;;;622        lua_rawseti(L, t, freelist);  /* t[freelist] = ref */
000038  2200              MOVS     r2,#0
00003a  4613              MOV      r3,r2
00003c  4631              MOV      r1,r6
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       lua_rawseti
                  |L50.68|
;;;623      }
;;;624    }
000044  bd70              POP      {r4-r6,pc}
;;;625    
                          ENDP


                          AREA ||i.luaL_where||, CODE, READONLY, ALIGN=2

                  luaL_where PROC
;;;204    */
;;;205    LUALIB_API void luaL_where (lua_State *L, int level) {
000000  b530              PUSH     {r4,r5,lr}
000002  b09b              SUB      sp,sp,#0x6c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;206      lua_Debug ar;
;;;207      if (lua_getstack(L, level, &ar)) {  /* check function at level */
000008  aa01              ADD      r2,sp,#4
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       lua_getstack
000012  b178              CBZ      r0,|L51.52|
;;;208        lua_getinfo(L, "Sl", &ar);  /* get info about it */
000014  aa01              ADD      r2,sp,#4
000016  a10a              ADR      r1,|L51.64|
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       lua_getinfo
;;;209        if (ar.currentline > 0) {  /* is there info? */
00001e  9806              LDR      r0,[sp,#0x18]
000020  2800              CMP      r0,#0
000022  dd07              BLE      |L51.52|
;;;210          lua_pushfstring(L, "%s:%d: ", ar.short_src, ar.currentline);
000024  aa0b              ADD      r2,sp,#0x2c
000026  a107              ADR      r1,|L51.68|
000028  4620              MOV      r0,r4
00002a  9b06              LDR      r3,[sp,#0x18]
00002c  f7fffffe          BL       lua_pushfstring
                  |L51.48|
;;;211          return;
;;;212        }
;;;213      }
;;;214      lua_pushfstring(L, "");  /* else, no information available... */
;;;215    }
000030  b01b              ADD      sp,sp,#0x6c
000032  bd30              POP      {r4,r5,pc}
                  |L51.52|
000034  a105              ADR      r1,|L51.76|
000036  4620              MOV      r0,r4                 ;214
000038  f7fffffe          BL       lua_pushfstring
00003c  bf00              NOP      
00003e  e7f7              B        |L51.48|
;;;216    
                          ENDP

                  |L51.64|
000040  536c00            DCB      "Sl",0
000043  00                DCB      0
                  |L51.68|
000044  25733a25          DCB      "%s:%d: ",0
000048  643a2000
                  |L51.76|
00004c  00                DCB      0
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0

                          AREA ||i.newbox||, CODE, READONLY, ALIGN=2

                  newbox PROC
;;;481    
;;;482    static void *newbox (lua_State *L, size_t newsize) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;483      UBox *box = (UBox *)lua_newuserdatauv(L, sizeof(UBox), 0);
000006  2200              MOVS     r2,#0
000008  2108              MOVS     r1,#8
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       lua_newuserdatauv
000010  4605              MOV      r5,r0
;;;484      box->box = NULL;
000012  2000              MOVS     r0,#0
000014  6028              STR      r0,[r5,#0]
;;;485      box->bsize = 0;
000016  6068              STR      r0,[r5,#4]
;;;486      if (luaL_newmetatable(L, "_UBOX*")) {  /* creating metatable? */
000018  a10d              ADR      r1,|L52.80|
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       luaL_newmetatable
000020  b150              CBZ      r0,|L52.56|
;;;487        lua_pushcfunction(L, boxgc);
000022  2200              MOVS     r2,#0
000024  490c              LDR      r1,|L52.88|
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lua_pushcclosure
;;;488        lua_setfield(L, -2, "__gc");  /* metatable.__gc = boxgc */
00002c  a20b              ADR      r2,|L52.92|
00002e  f06f0101          MVN      r1,#1
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       lua_setfield
                  |L52.56|
;;;489      }
;;;490      lua_setmetatable(L, -2);
000038  f06f0101          MVN      r1,#1
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       lua_setmetatable
;;;491      return resizebox(L, -1, newsize);
000042  4622              MOV      r2,r4
000044  f04f31ff          MOV      r1,#0xffffffff
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       resizebox
;;;492    }
00004e  bd70              POP      {r4-r6,pc}
;;;493    
                          ENDP

                  |L52.80|
000050  5f55424f          DCB      "_UBOX*",0
000054  582a00  
000057  00                DCB      0
                  |L52.88|
                          DCD      boxgc
                  |L52.92|
00005c  5f5f6763          DCB      "__gc",0
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.panic||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  panic PROC
;;;937    
;;;938    static int panic (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;939      lua_writestringerror("PANIC: unprotected error in call to Lua API (%s)\n",
000004  2200              MOVS     r2,#0
000006  1e51              SUBS     r1,r2,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       lua_tolstring
00000e  4605              MOV      r5,r0
000010  462a              MOV      r2,r5
000012  a104              ADR      r1,|L53.36|
000014  4810              LDR      r0,|L53.88|
000016  f7fffffe          BL       __2fprintf
00001a  480f              LDR      r0,|L53.88|
00001c  f7fffffe          BL       fflush
;;;940                            lua_tostring(L, -1));
;;;941      return 0;  /* return to Lua to abort */
000020  2000              MOVS     r0,#0
;;;942    }
000022  bd70              POP      {r4-r6,pc}
;;;943    
                          ENDP

                  |L53.36|
000024  50414e49          DCB      "PANIC: unprotected error in call to Lua API (%s)\n",0
000028  433a2075
00002c  6e70726f
000030  74656374
000034  65642065
000038  72726f72
00003c  20696e20
000040  63616c6c
000044  20746f20
000048  4c756120
00004c  41504920
000050  28257329
000054  0a00    
000056  00                DCB      0
000057  00                DCB      0
                  |L53.88|
                          DCD      __stderr

                          AREA ||i.pushfuncname||, CODE, READONLY, ALIGN=2

                  pushfuncname PROC
;;;93     
;;;94     static void pushfuncname (lua_State *L, lua_Debug *ar) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;95       if (pushglobalfuncname(L, ar)) {  /* try first a global name */
000006  4621              MOV      r1,r4
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       pushglobalfuncname
00000e  b1b0              CBZ      r0,|L54.62|
;;;96         lua_pushfstring(L, "function '%s'", lua_tostring(L, -1));
000010  2200              MOVS     r2,#0
000012  1e51              SUBS     r1,r2,#1
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       lua_tolstring
00001a  4606              MOV      r6,r0
00001c  4632              MOV      r2,r6
00001e  a11a              ADR      r1,|L54.136|
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       lua_pushfstring
;;;97         lua_remove(L, -2);  /* remove name */
000026  f04f32ff          MOV      r2,#0xffffffff
00002a  0051              LSLS     r1,r2,#1
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       lua_rotate
000032  f06f0101          MVN      r1,#1
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       lua_settop
00003c  e022              B        |L54.132|
                  |L54.62|
;;;98       }
;;;99       else if (*ar->namewhat != '\0')  /* is there a name from code? */
00003e  68a0              LDR      r0,[r4,#8]
000040  7800              LDRB     r0,[r0,#0]
000042  b130              CBZ      r0,|L54.82|
;;;100        lua_pushfstring(L, "%s '%s'", ar->namewhat, ar->name);  /* use it */
000044  a114              ADR      r1,|L54.152|
000046  4628              MOV      r0,r5
000048  e9d43201          LDRD     r3,r2,[r4,#4]
00004c  f7fffffe          BL       lua_pushfstring
000050  e018              B        |L54.132|
                  |L54.82|
;;;101      else if (*ar->what == 'm')  /* main? */
000052  68e0              LDR      r0,[r4,#0xc]
000054  7800              LDRB     r0,[r0,#0]
000056  286d              CMP      r0,#0x6d
000058  d104              BNE      |L54.100|
;;;102          lua_pushliteral(L, "main chunk");
00005a  a111              ADR      r1,|L54.160|
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       lua_pushstring
000062  e00f              B        |L54.132|
                  |L54.100|
;;;103      else if (*ar->what != 'C')  /* for Lua functions, use <file:line> */
000064  68e0              LDR      r0,[r4,#0xc]
000066  7800              LDRB     r0,[r0,#0]
000068  2843              CMP      r0,#0x43
00006a  d007              BEQ      |L54.124|
;;;104        lua_pushfstring(L, "function <%s:%d>", ar->short_src, ar->linedefined);
00006c  f1040228          ADD      r2,r4,#0x28
000070  a10e              ADR      r1,|L54.172|
000072  4628              MOV      r0,r5
000074  69a3              LDR      r3,[r4,#0x18]
000076  f7fffffe          BL       lua_pushfstring
00007a  e003              B        |L54.132|
                  |L54.124|
;;;105      else  /* nothing left... */
;;;106        lua_pushliteral(L, "?");
00007c  a110              ADR      r1,|L54.192|
00007e  4628              MOV      r0,r5
000080  f7fffffe          BL       lua_pushstring
                  |L54.132|
;;;107    }
000084  bd70              POP      {r4-r6,pc}
;;;108    
                          ENDP

000086  0000              DCW      0x0000
                  |L54.136|
000088  66756e63          DCB      "function '%s'",0
00008c  74696f6e
000090  20272573
000094  2700    
000096  00                DCB      0
000097  00                DCB      0
                  |L54.152|
000098  25732027          DCB      "%s '%s'",0
00009c  25732700
                  |L54.160|
0000a0  6d61696e          DCB      "main chunk",0
0000a4  20636875
0000a8  6e6b00  
0000ab  00                DCB      0
                  |L54.172|
0000ac  66756e63          DCB      "function <%s:%d>",0
0000b0  74696f6e
0000b4  203c2573
0000b8  3a25643e
0000bc  00      
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L54.192|
0000c0  3f00              DCB      "?",0
0000c2  00                DCB      0
0000c3  00                DCB      0

                          AREA ||i.pushglobalfuncname||, CODE, READONLY, ALIGN=2

                  pushglobalfuncname PROC
;;;72     */
;;;73     static int pushglobalfuncname (lua_State *L, lua_Debug *ar) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;74       int top = lua_gettop(L);
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       lua_gettop
00000e  4604              MOV      r4,r0
;;;75       lua_getinfo(L, "f", ar);  /* push function */
000010  462a              MOV      r2,r5
000012  a11f              ADR      r1,|L55.144|
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       lua_getinfo
;;;76       lua_getfield(L, LUA_REGISTRYINDEX, LUA_LOADED_TABLE);
00001a  a21e              ADR      r2,|L55.148|
00001c  491f              LDR      r1,|L55.156|
00001e  4638              MOV      r0,r7
000020  f7fffffe          BL       lua_getfield
;;;77       if (findfield(L, top + 1, 2)) {
000024  2202              MOVS     r2,#2
000026  1c61              ADDS     r1,r4,#1
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       findfield
00002e  b340              CBZ      r0,|L55.130|
;;;78         const char *name = lua_tostring(L, -1);
000030  2200              MOVS     r2,#0
000032  1e51              SUBS     r1,r2,#1
000034  4638              MOV      r0,r7
000036  f7fffffe          BL       lua_tolstring
00003a  4606              MOV      r6,r0
;;;79         if (strncmp(name, LUA_GNAME ".", 3) == 0) {  /* name start with '_G.'? */
00003c  2203              MOVS     r2,#3
00003e  a118              ADR      r1,|L55.160|
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       strncmp
000046  b970              CBNZ     r0,|L55.102|
;;;80           lua_pushstring(L, name + 3);  /* push name without prefix */
000048  1cf1              ADDS     r1,r6,#3
00004a  4638              MOV      r0,r7
00004c  f7fffffe          BL       lua_pushstring
;;;81           lua_remove(L, -2);  /* remove original name */
000050  f04f32ff          MOV      r2,#0xffffffff
000054  0051              LSLS     r1,r2,#1
000056  4638              MOV      r0,r7
000058  f7fffffe          BL       lua_rotate
00005c  f06f0101          MVN      r1,#1
000060  4638              MOV      r0,r7
000062  f7fffffe          BL       lua_settop
                  |L55.102|
;;;82         }
;;;83         lua_copy(L, -1, top + 1);  /* move name to proper place */
000066  1c62              ADDS     r2,r4,#1
000068  f04f31ff          MOV      r1,#0xffffffff
00006c  4638              MOV      r0,r7
00006e  f7fffffe          BL       lua_copy
;;;84         lua_pop(L, 2);  /* remove pushed values */
000072  f06f0102          MVN      r1,#2
000076  4638              MOV      r0,r7
000078  f7fffffe          BL       lua_settop
;;;85         return 1;
00007c  2001              MOVS     r0,#1
                  |L55.126|
;;;86       }
;;;87       else {
;;;88         lua_settop(L, top);  /* remove function and global table */
;;;89         return 0;
;;;90       }
;;;91     }
00007e  e8bd81f0          POP      {r4-r8,pc}
                  |L55.130|
000082  4621              MOV      r1,r4                 ;88
000084  4638              MOV      r0,r7                 ;88
000086  f7fffffe          BL       lua_settop
00008a  2000              MOVS     r0,#0                 ;89
00008c  e7f7              B        |L55.126|
;;;92     
                          ENDP

00008e  0000              DCW      0x0000
                  |L55.144|
000090  6600              DCB      "f",0
000092  00                DCB      0
000093  00                DCB      0
                  |L55.148|
000094  5f4c4f41          DCB      "_LOADED",0
000098  44454400
                  |L55.156|
                          DCD      0xfff0b9d8
                  |L55.160|
0000a0  5f472e00          DCB      "_G.",0

                          AREA ||i.resizebox||, CODE, READONLY, ALIGN=2

                  resizebox PROC
;;;460    
;;;461    static void *resizebox (lua_State *L, int idx, size_t newsize) {
000000  e92d43f8          PUSH     {r3-r9,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
;;;462      void *ud;
;;;463      lua_Alloc allocf = lua_getallocf(L, &ud);
00000a  4669              MOV      r1,sp
00000c  4638              MOV      r0,r7
00000e  f7fffffe          BL       lua_getallocf
000012  4681              MOV      r9,r0
;;;464      UBox *box = (UBox *)lua_touserdata(L, idx);
000014  4641              MOV      r1,r8
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       lua_touserdata
00001c  4605              MOV      r5,r0
;;;465      void *temp = allocf(ud, box->box, box->bsize, newsize);
00001e  4623              MOV      r3,r4
000020  e9d51200          LDRD     r1,r2,[r5,#0]
000024  9800              LDR      r0,[sp,#0]
000026  47c8              BLX      r9
000028  4606              MOV      r6,r0
;;;466      if (temp == NULL && newsize > 0) {  /* allocation error? */
00002a  b94e              CBNZ     r6,|L56.64|
00002c  b144              CBZ      r4,|L56.64|
;;;467        resizebox(L, idx, 0);  /* free buffer */
00002e  2200              MOVS     r2,#0
000030  4641              MOV      r1,r8
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       resizebox
;;;468        luaL_error(L, "not enough memory for buffer allocation");
000038  a104              ADR      r1,|L56.76|
00003a  4638              MOV      r0,r7
00003c  f7fffffe          BL       luaL_error
                  |L56.64|
;;;469      }
;;;470      box->box = temp;
000040  602e              STR      r6,[r5,#0]
;;;471      box->bsize = newsize;
000042  606c              STR      r4,[r5,#4]
;;;472      return temp;
000044  4630              MOV      r0,r6
;;;473    }
000046  e8bd83f8          POP      {r3-r9,pc}
;;;474    
                          ENDP

00004a  0000              DCW      0x0000
                  |L56.76|
00004c  6e6f7420          DCB      "not enough memory for buffer allocation",0
000050  656e6f75
000054  6768206d
000058  656d6f72
00005c  7920666f
000060  72206275
000064  66666572
000068  20616c6c
00006c  6f636174
000070  696f6e00

                          AREA ||i.skipBOM||, CODE, READONLY, ALIGN=2

                  skipBOM PROC
;;;668    
;;;669    static int skipBOM (LoadF *lf) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;670      const char *p = "\xEF\xBB\xBF";  /* UTF-8 BOM mark */
000004  a60f              ADR      r6,|L57.68|
;;;671      int c;
;;;672      lf->n = 0;
000006  2000              MOVS     r0,#0
000008  6020              STR      r0,[r4,#0]
;;;673      do {
00000a  bf00              NOP      
                  |L57.12|
;;;674        c = getc(lf->f);
00000c  6860              LDR      r0,[r4,#4]
00000e  f7fffffe          BL       getc
000012  4605              MOV      r5,r0
;;;675        if (c == EOF || c != *(const unsigned char *)p++) return c;
000014  1c68              ADDS     r0,r5,#1
000016  b118              CBZ      r0,|L57.32|
000018  f8161b01          LDRB     r1,[r6],#1
00001c  42a9              CMP      r1,r5
00001e  d001              BEQ      |L57.36|
                  |L57.32|
000020  4628              MOV      r0,r5
                  |L57.34|
;;;676        lf->buff[lf->n++] = c;  /* to be read by the parser */
;;;677      } while (*p != '\0');
;;;678      lf->n = 0;  /* prefix matched; discard it */
;;;679      return getc(lf->f);  /* return next character */
;;;680    }
000022  bd70              POP      {r4-r6,pc}
                  |L57.36|
000024  b269              SXTB     r1,r5                 ;676
000026  6822              LDR      r2,[r4,#0]            ;676
000028  1c50              ADDS     r0,r2,#1              ;676
00002a  6020              STR      r0,[r4,#0]            ;676
00002c  f1040008          ADD      r0,r4,#8              ;676
000030  5481              STRB     r1,[r0,r2]            ;676
000032  7830              LDRB     r0,[r6,#0]            ;677
000034  2800              CMP      r0,#0                 ;677
000036  d1e9              BNE      |L57.12|
000038  6020              STR      r0,[r4,#0]            ;678
00003a  6860              LDR      r0,[r4,#4]            ;679
00003c  f7fffffe          BL       getc
000040  e7ef              B        |L57.34|
;;;681    
                          ENDP

000042  0000              DCW      0x0000
                  |L57.68|
000044  efbbbf00          DCB      239,187,191,0

                          AREA ||i.skipcomment||, CODE, READONLY, ALIGN=1

                  skipcomment PROC
;;;689    */
;;;690    static int skipcomment (LoadF *lf, int *cp) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;691      int c = *cp = skipBOM(lf);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       skipBOM
00000c  4606              MOV      r6,r0
00000e  6028              STR      r0,[r5,#0]
;;;692      if (c == '#') {  /* first line is a comment (Unix exec. file)? */
000010  2e23              CMP      r6,#0x23
000012  d10e              BNE      |L58.50|
;;;693        do {  /* skip first line */
000014  bf00              NOP      
                  |L58.22|
;;;694          c = getc(lf->f);
000016  6860              LDR      r0,[r4,#4]
000018  f7fffffe          BL       getc
00001c  4606              MOV      r6,r0
;;;695        } while (c != EOF && c != '\n');
00001e  1c70              ADDS     r0,r6,#1
000020  b108              CBZ      r0,|L58.38|
000022  2e0a              CMP      r6,#0xa
000024  d1f7              BNE      |L58.22|
                  |L58.38|
;;;696        *cp = getc(lf->f);  /* skip end-of-line, if present */
000026  6860              LDR      r0,[r4,#4]
000028  f7fffffe          BL       getc
00002c  6028              STR      r0,[r5,#0]
;;;697        return 1;  /* there was a comment */
00002e  2001              MOVS     r0,#1
                  |L58.48|
;;;698      }
;;;699      else return 0;  /* no comment */
;;;700    }
000030  bd70              POP      {r4-r6,pc}
                  |L58.50|
000032  2000              MOVS     r0,#0                 ;699
000034  e7fc              B        |L58.48|
;;;701    
                          ENDP


                          AREA ||i.tag_error||, CODE, READONLY, ALIGN=1

                  tag_error PROC
;;;195    
;;;196    static void tag_error (lua_State *L, int arg, int tag) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;197      typeerror(L, arg, lua_typename(L, tag));
00000a  4621              MOV      r1,r4
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lua_typename
000012  4607              MOV      r7,r0
000014  463a              MOV      r2,r7
000016  4631              MOV      r1,r6
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       typeerror
;;;198    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;199    
                          ENDP


                          AREA ||i.typeerror||, CODE, READONLY, ALIGN=2

                  typeerror PROC
;;;181    
;;;182    static int typeerror (lua_State *L, int arg, const char *tname) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;183      const char *msg;
;;;184      const char *typearg;  /* name for the type of the actual argument */
;;;185      if (luaL_getmetafield(L, arg, "__name") == LUA_TSTRING)
00000a  a217              ADR      r2,|L60.104|
00000c  4631              MOV      r1,r6
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       luaL_getmetafield
000014  2804              CMP      r0,#4
000016  d106              BNE      |L60.38|
;;;186        typearg = lua_tostring(L, -1);  /* use the given type name */
000018  2200              MOVS     r2,#0
00001a  1f41              SUBS     r1,r0,#5
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       lua_tolstring
000022  4604              MOV      r4,r0
000024  e011              B        |L60.74|
                  |L60.38|
;;;187      else if (lua_type(L, arg) == LUA_TLIGHTUSERDATA)
000026  4631              MOV      r1,r6
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       lua_type
00002e  2802              CMP      r0,#2
000030  d101              BNE      |L60.54|
;;;188        typearg = "light userdata";  /* special name for messages */
000032  a40f              ADR      r4,|L60.112|
000034  e009              B        |L60.74|
                  |L60.54|
;;;189      else
;;;190        typearg = luaL_typename(L, arg);  /* standard name */
000036  4631              MOV      r1,r6
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       lua_type
00003e  4681              MOV      r9,r0
000040  4649              MOV      r1,r9
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       lua_typename
000048  4604              MOV      r4,r0
                  |L60.74|
;;;191      msg = lua_pushfstring(L, "%s expected, got %s", tname, typearg);
00004a  4623              MOV      r3,r4
00004c  463a              MOV      r2,r7
00004e  a10c              ADR      r1,|L60.128|
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       lua_pushfstring
000056  4680              MOV      r8,r0
;;;192      return luaL_argerror(L, arg, msg);
000058  4642              MOV      r2,r8
00005a  4631              MOV      r1,r6
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       luaL_argerror
;;;193    }
000062  e8bd87f0          POP      {r4-r10,pc}
;;;194    
                          ENDP

000066  0000              DCW      0x0000
                  |L60.104|
000068  5f5f6e61          DCB      "__name",0
00006c  6d6500  
00006f  00                DCB      0
                  |L60.112|
000070  6c696768          DCB      "light userdata",0
000074  74207573
000078  65726461
00007c  746100  
00007f  00                DCB      0
                  |L60.128|
000080  25732065          DCB      "%s expected, got %s",0
000084  78706563
000088  7465642c
00008c  20676f74
000090  20257300
