


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************
    2 00000000         ;Filename    : platform_cmx_asm.s
    3 00000000         ;Author      : pry
    4 00000000         ;Date        : 10/04/2012
    5 00000000         ;Description : The assembly part of the RMP RTOS. This i
                       s for Cortex-M3/4/7.
    6 00000000         ;*******************************************************
                       **********************/
    7 00000000         
    8 00000000         ;/* The ARM Cortex-M Structure *************************
                       ***********************
    9 00000000         ;R0-R7:General purpose registers that are accessible. 
   10 00000000         ;R8-R12:general purpose registers that can only be reach
                       ed by 32-bit instructions.
   11 00000000         ;R13:SP/SP_process/SP_main    Stack pointer
   12 00000000         ;R14:LR                       Link Register(used for ret
                       urning from a subfunction)
   13 00000000         ;R15:PC                       Program counter.
   14 00000000         ;IPSR                         Interrupt Program Status R
                       egister.
   15 00000000         ;APSR                         Application Program Status
                        Register.
   16 00000000         ;EPSR                         Execute Program Status Reg
                       ister.
   17 00000000         ;The above 3 registers are saved into the stack in combi
                       nation(xPSR).
   18 00000000         ;
   19 00000000         ;The ARM Cortex-M4/7 also include a single-accuracy FPU.
                       
   20 00000000         ;*******************************************************
                       **********************/
   21 00000000         
   22 00000000         ;/* Begin Header ***************************************
                       **********************/
   23 00000000         ;The align is "(2^3)/8=1(Byte)." In fact it does not tak
                       e effect.            
   24 00000000                 AREA             ARCH,CODE,READONLY,ALIGN=3
   25 00000000         
   26 00000000                 THUMB
   27 00000000                 REQUIRE8
   28 00000000                 PRESERVE8
   29 00000000         ;/* End Header *****************************************
                       **********************/
   30 00000000         
   31 00000000         ;/* Begin Exports **************************************
                       **********************/
   32 00000000         ;Disable all interrupts
   33 00000000                 EXPORT           RMP_Disable_Int
   34 00000000         ;Enable all interrupts            
   35 00000000                 EXPORT           RMP_Enable_Int
   36 00000000         ;Mask/unmask some interrupts
   37 00000000                 EXPORT           RMP_Mask_Int
   38 00000000         ;Get the MSB                              
   39 00000000                 EXPORT           RMP_MSB_Get
   40 00000000         ;Start the first thread
   41 00000000                 EXPORT           _RMP_Start
   42 00000000         ;The PendSV trigger
   43 00000000                 EXPORT           _RMP_Yield



ARM Macro Assembler    Page 2 


   44 00000000         ;The system pending service routine              
   45 00000000                 EXPORT           PendSV_Handler
   46 00000000         ;The systick timer routine              
   47 00000000                 EXPORT           SysTick_Handler
   48 00000000         ;/* End Exports ****************************************
                       **********************/
   49 00000000         
   50 00000000         ;/* Begin Imports **************************************
                       **********************/
   51 00000000         ;The real task switch handling function
   52 00000000                 IMPORT           _RMP_Get_High_Rdy
   53 00000000         ;The real systick handler function
   54 00000000                 IMPORT           _RMP_Tick_Handler
   55 00000000         ;The PID of the current thread                     
   56 00000000                 IMPORT           RMP_Cur_Thd
   57 00000000         ;The stack address of current thread
   58 00000000                 IMPORT           RMP_Cur_SP
   59 00000000         ;Save and load extra contexts, such as FPU, peripherals 
                       and MPU
   60 00000000                 IMPORT           RMP_Save_Ctx
   61 00000000                 IMPORT           RMP_Load_Ctx
   62 00000000         ;/* End Imports ****************************************
                       **********************/
   63 00000000         
   64 00000000         ;/* Begin Function:RMP_Disable_Int *********************
                       ***********************
   65 00000000         ;Description    : The function for disabling all interru
                       pts. Does not allow nesting.
   66 00000000         ;Input          : None.
   67 00000000         ;Output         : None.    
   68 00000000         ;Register Usage : None.                                 
                        
   69 00000000         ;*******************************************************
                       **********************/    
   70 00000000         RMP_Disable_Int
   71 00000000         ;Disable all interrupts (I is primask,F is Faultmask.)
   72 00000000 B672            CPSID            I
   73 00000002 4770            BX               LR
   74 00000004         ;/* End Function:RMP_Disable_Int ***********************
                       **********************/
   75 00000004         
   76 00000004         ;/* Begin Function:RMP_Enable_Int **********************
                       ***********************
   77 00000004         ;Description    : The function for enabling all interrup
                       ts. Does not allow nesting.
   78 00000004         ;Input          : None.
   79 00000004         ;Output         : None.    
   80 00000004         ;Register Usage : None.                                 
                        
   81 00000004         ;*******************************************************
                       **********************/
   82 00000004         RMP_Enable_Int
   83 00000004         ;Enable all interrupts.
   84 00000004 B662            CPSIE            I
   85 00000006 4770            BX               LR
   86 00000008         ;/* End Function:RMP_Enable_Int ************************
                       **********************/
   87 00000008         
   88 00000008         ;/* Begin Function:RMP_Mask_Int ************************



ARM Macro Assembler    Page 3 


                       ***********************
   89 00000008         ;Description    : The function for masking & unmasking i
                       nterrupts. Does not allow masking.
   90 00000008         ;Input          : R0 - The new basepri to set.
   91 00000008         ;Output         : None.    
   92 00000008         ;Register Usage : None.                                 
                        
   93 00000008         ;*******************************************************
                       **********************/
   94 00000008         RMP_Mask_Int
   95 00000008         ;Mask some interrupts.
   96 00000008 F380 8811       MSR              BASEPRI,R0
   97 0000000C 4770            BX               LR
   98 0000000E         ;/* End Function:RMP_Mask_Int **************************
                       **********************/
   99 0000000E         
  100 0000000E         ;/* Begin Function:RMP_MSB_Get *************************
                       ***********************
  101 0000000E         ;Description    : Get the MSB of the word.
  102 0000000E         ;Input          : ptr_t Val - The value.
  103 0000000E         ;Output         : None.
  104 0000000E         ;Return         : ptr_t - The MSB position.   
  105 0000000E         ;Register Usage : None. 
  106 0000000E         ;*******************************************************
                       **********************/
  107 0000000E         RMP_MSB_Get
  108 0000000E FAB0 F180       CLZ              R1,R0
  109 00000012 201F            MOVS             R0,#31
  110 00000014 1A40            SUBS             R0,R1
  111 00000016 4770            BX               LR
  112 00000018         ;/* End Function:RMP_MSB_Get ***************************
                       **********************/
  113 00000018         
  114 00000018         ;/* Begin Function:_RMP_Yield **************************
                       ***********************
  115 00000018         ;Description : Trigger a yield to another thread.
  116 00000018         ;Input       : None.
  117 00000018         ;Output      : None.                                    
                         
  118 00000018         ;*******************************************************
                       **********************/
  119 00000018         _RMP_Yield
  120 00000018 B403            PUSH             {R0-R1}
  121 0000001A         
  122 0000001A 4817            LDR              R0,=0xE000ED04 ;The NVIC_INT_CT
                                                            RL register
  123 0000001C F04F 5180       LDR              R1,=0x10000000 ;Trigger the Pen
                                                            dSV          
  124 00000020 6001            STR              R1,[R0]
  125 00000022         
  126 00000022 F3BF 8F4F       DSB                          ;Data and instructi
                                                            on barrier
  127 00000026 F3BF 8F6F       ISB
  128 0000002A         
  129 0000002A BC03            POP              {R0-R1}
  130 0000002C 4770            BX               LR
  131 0000002E         ;/* End Function:_RMP_Yield ****************************
                       **********************/
  132 0000002E         



ARM Macro Assembler    Page 4 


  133 0000002E         ;/* Begin Function:_RMP_Start **************************
                       ***********************
  134 0000002E         ;Description : Jump to the user function and will never 
                       return from it.
  135 0000002E         ;Input       : None.
  136 0000002E         ;Output      : None.                                    
                         
  137 0000002E         ;*******************************************************
                       **********************/
  138 0000002E         _RMP_Start
  139 0000002E         ;Should never reach here
  140 0000002E 3940            SUBS             R1,#64      ;This is how we pus
                                                            h our registers so 
                                                            move forward
  141 00000030 F381 8809       MSR              PSP,R1      ;Set the stack poin
                                                            ter
  142 00000034 2402            MOVS             R4,#0x02    ;Previleged thread 
                                                            mode
  143 00000036 F384 8814       MSR              CONTROL,R4
  144 0000003A         
  145 0000003A F3BF 8F4F       DSB                          ;Data and instructi
                                                            on barrier
  146 0000003E F3BF 8F6F       ISB
  147 00000042         
  148 00000042 4780            BLX              R0          ;Branch to our targ
                                                            et
  149 00000044 E7FE            B                .           ;Capture faults    
                                                              
  150 00000046         ;/* End Function:_RMP_Start ****************************
                       **********************/
  151 00000046         
  152 00000046         ;/* Begin Function:PendSV_Handler **********************
                       ***********************
  153 00000046         ;Description : The PendSV interrupt routine. In fact, it
                        will call a C function
  154 00000046         ;              directly. The reason why the interrupt ro
                       utine must be an assembly
  155 00000046         ;              function is that the compiler may deal wi
                       th the stack in a different 
  156 00000046         ;              way when different optimization level is 
                       chosen. An assembly function
  157 00000046         ;              can make way around this problem.
  158 00000046         ;              However, if your compiler support inline 
                       assembly functions, this
  159 00000046         ;              can also be written in C.
  160 00000046         ;Input       : None.
  161 00000046         ;Output      : None.                                    
                         
  162 00000046         ;*******************************************************
                       **********************/
  163 00000046         PendSV_Handler
  164 00000046 F3EF 8009       MRS              R0,PSP      ;Spill all the regi
                                                            sters onto the user
                                                             stack
  165 0000004A E920 4FF0       STMDB            R0!,{R4-R11,LR}
  166 0000004E         
  167 0000004E F7FF FFFE       BL               RMP_Save_Ctx 
                                                            ;Save extra context
                                                            



ARM Macro Assembler    Page 5 


  168 00000052         
  169 00000052 490A            LDR              R1,=RMP_Cur_SP ;Save The SP to 
                                                            control block.
  170 00000054 6008            STR              R0,[R1]
  171 00000056         
  172 00000056 F7FF FFFE       BL               _RMP_Get_High_Rdy ;Get the high
                                                            est ready task.
  173 0000005A         
  174 0000005A 4908            LDR              R1,=RMP_Cur_SP ;Load the SP.
  175 0000005C 6808            LDR              R0,[R1]
  176 0000005E         
  177 0000005E F7FF FFFE       BL               RMP_Load_Ctx 
                                                            ;Load extra context
                                                            
  178 00000062         
  179 00000062 E8B0 4FF0       LDMIA            R0!,{R4-R11,LR}
  180 00000066 F380 8809       MSR              PSP,R0
  181 0000006A         
  182 0000006A 4770            BX               LR          ;The LR will indica
                                                            te whether we are u
                                                            sing FPU.     
  183 0000006C         ;/* End Function:PendSV_Handler ************************
                       **********************/
  184 0000006C         
  185 0000006C         ;/* Begin Function:SysTick_Handler *********************
                       ***********************
  186 0000006C         ;Description : The SysTick interrupt routine. In fact, i
                       t will call a C function
  187 0000006C         ;              directly. The reason why the interrupt ro
                       utine must be an assembly
  188 0000006C         ;              function is that the compiler may deal wi
                       th the stack in a different 
  189 0000006C         ;              way when different optimization level is 
                       chosen. An assembly function
  190 0000006C         ;              can make way around this problem.
  191 0000006C         ;              However, if your compiler support inline 
                       assembly functions, this
  192 0000006C         ;              can also be written in C.
  193 0000006C         ;Input       : None.
  194 0000006C         ;Output      : None.                                    
                         
  195 0000006C         ;*******************************************************
                       **********************/
  196 0000006C         SysTick_Handler
  197 0000006C B500            PUSH             {LR}
  198 0000006E         
  199 0000006E 2001            MOVS             R0,#0x01    ;We are not using t
                                                            ickless.
  200 00000070 F7FF FFFE       BL               _RMP_Tick_Handler
  201 00000074         
  202 00000074 BD00            POP              {PC}
  203 00000076 BF00            NOP
  204 00000078         ;/* End Function:SysTick_Handler ***********************
                       **********************/
  205 00000078         
  206 00000078                 END
              E000ED04 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M7 --apcs=interw



ARM Macro Assembler    Page 6 


ork --depend=.\debug\output\platform_cmx_asm.d -o.\debug\output\platform_cmx_as
m.o -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-A
LIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\I
nclude -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers
\CMSIS\Device\ST\STM32F7xx\Include --predefine="__MICROLIB SETA 1" --predefine=
"__UVISION_VERSION SETA 520" --predefine="_RTE_ SETA 1" --predefine="STM32F767x
x SETA 1" --list=.\debug\listings\platform_cmx_asm.lst ..\..\MProkaron\Platform
\CortexM\platform_cmx_asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARCH 00000000

Symbol: ARCH
   Definitions
      At line 24 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      None
Comment: ARCH unused
PendSV_Handler 00000046

Symbol: PendSV_Handler
   Definitions
      At line 163 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 45 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: PendSV_Handler used once
RMP_Disable_Int 00000000

Symbol: RMP_Disable_Int
   Definitions
      At line 70 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 33 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: RMP_Disable_Int used once
RMP_Enable_Int 00000004

Symbol: RMP_Enable_Int
   Definitions
      At line 82 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 35 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: RMP_Enable_Int used once
RMP_MSB_Get 0000000E

Symbol: RMP_MSB_Get
   Definitions
      At line 107 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 39 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: RMP_MSB_Get used once
RMP_Mask_Int 00000008

Symbol: RMP_Mask_Int
   Definitions
      At line 94 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 37 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: RMP_Mask_Int used once
SysTick_Handler 0000006C

Symbol: SysTick_Handler
   Definitions
      At line 196 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 47 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: SysTick_Handler used once
_RMP_Start 0000002E

Symbol: _RMP_Start



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 138 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 41 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: _RMP_Start used once
_RMP_Yield 00000018

Symbol: _RMP_Yield
   Definitions
      At line 119 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 43 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: _RMP_Yield used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

RMP_Cur_SP 00000000

Symbol: RMP_Cur_SP
   Definitions
      At line 58 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 169 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
      At line 174 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s

RMP_Cur_Thd 00000000

Symbol: RMP_Cur_Thd
   Definitions
      At line 56 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      None
Comment: RMP_Cur_Thd unused
RMP_Load_Ctx 00000000

Symbol: RMP_Load_Ctx
   Definitions
      At line 61 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 177 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: RMP_Load_Ctx used once
RMP_Save_Ctx 00000000

Symbol: RMP_Save_Ctx
   Definitions
      At line 60 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 167 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: RMP_Save_Ctx used once
_RMP_Get_High_Rdy 00000000

Symbol: _RMP_Get_High_Rdy
   Definitions
      At line 52 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 172 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: _RMP_Get_High_Rdy used once
_RMP_Tick_Handler 00000000

Symbol: _RMP_Tick_Handler
   Definitions
      At line 54 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 200 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: _RMP_Tick_Handler used once
6 symbols
351 symbols in table
