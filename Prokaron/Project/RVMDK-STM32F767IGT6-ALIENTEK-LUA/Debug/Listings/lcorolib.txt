; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\lcorolib.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\lcorolib.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\lcorolib.crf ..\..\..\M6P1(L)_Lua\lua\lcorolib.c]
                          THUMB

                          AREA ||i.auxresume||, CODE, READONLY, ALIGN=2

                  auxresume PROC
;;;27     
;;;28     static int auxresume (lua_State *L, lua_State *co, int narg) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;29       int status, nres;
;;;30       if (!lua_checkstack(co, narg)) {
000008  4639              MOV      r1,r7
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       lua_checkstack
000010  b930              CBNZ     r0,|L1.32|
;;;31         lua_pushliteral(L, "too many arguments to resume");
000012  a123              ADR      r1,|L1.160|
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       lua_pushstring
;;;32         return -1;  /* error flag */
00001a  f04f30ff          MOV      r0,#0xffffffff
                  |L1.30|
;;;33       }
;;;34       if (lua_status(co) == LUA_OK && lua_gettop(co) == 0) {
;;;35         lua_pushliteral(L, "cannot resume dead coroutine");
;;;36         return -1;  /* error flag */
;;;37       }
;;;38       lua_xmove(L, co, narg);
;;;39       status = lua_resume(co, L, narg, &nres);
;;;40       if (status == LUA_OK || status == LUA_YIELD) {
;;;41         if (!lua_checkstack(L, nres + 1)) {
;;;42           lua_pop(co, nres);  /* remove results anyway */
;;;43           lua_pushliteral(L, "too many results to resume");
;;;44           return -1;  /* error flag */
;;;45         }
;;;46         lua_xmove(co, L, nres);  /* move yielded values */
;;;47         return nres;
;;;48       }
;;;49       else {
;;;50         lua_xmove(co, L, 1);  /* move error message */
;;;51         return -1;  /* error flag */
;;;52       }
;;;53     }
00001e  bdf8              POP      {r3-r7,pc}
                  |L1.32|
000020  4630              MOV      r0,r6                 ;34
000022  f7fffffe          BL       lua_status
000026  b950              CBNZ     r0,|L1.62|
000028  4630              MOV      r0,r6                 ;34
00002a  f7fffffe          BL       lua_gettop
00002e  b930              CBNZ     r0,|L1.62|
000030  a123              ADR      r1,|L1.192|
000032  4628              MOV      r0,r5                 ;35
000034  f7fffffe          BL       lua_pushstring
000038  f04f30ff          MOV      r0,#0xffffffff        ;36
00003c  e7ef              B        |L1.30|
                  |L1.62|
00003e  463a              MOV      r2,r7                 ;38
000040  4631              MOV      r1,r6                 ;38
000042  4628              MOV      r0,r5                 ;38
000044  f7fffffe          BL       lua_xmove
000048  466b              MOV      r3,sp                 ;39
00004a  463a              MOV      r2,r7                 ;39
00004c  4629              MOV      r1,r5                 ;39
00004e  4630              MOV      r0,r6                 ;39
000050  f7fffffe          BL       lua_resume
000054  4604              MOV      r4,r0                 ;39
000056  b10c              CBZ      r4,|L1.92|
000058  2c01              CMP      r4,#1                 ;40
00005a  d119              BNE      |L1.144|
                  |L1.92|
00005c  9900              LDR      r1,[sp,#0]            ;41
00005e  1c49              ADDS     r1,r1,#1              ;41
000060  4628              MOV      r0,r5                 ;41
000062  f7fffffe          BL       lua_checkstack
000066  b960              CBNZ     r0,|L1.130|
000068  9800              LDR      r0,[sp,#0]            ;42
00006a  f1c031ff          RSB      r1,r0,#0xffffffff     ;42
00006e  4630              MOV      r0,r6                 ;42
000070  f7fffffe          BL       lua_settop
000074  a11a              ADR      r1,|L1.224|
000076  4628              MOV      r0,r5                 ;43
000078  f7fffffe          BL       lua_pushstring
00007c  f04f30ff          MOV      r0,#0xffffffff        ;44
000080  e7cd              B        |L1.30|
                  |L1.130|
000082  4629              MOV      r1,r5                 ;46
000084  4630              MOV      r0,r6                 ;46
000086  9a00              LDR      r2,[sp,#0]            ;46
000088  f7fffffe          BL       lua_xmove
00008c  9800              LDR      r0,[sp,#0]            ;47
00008e  e7c6              B        |L1.30|
                  |L1.144|
000090  2201              MOVS     r2,#1                 ;50
000092  4629              MOV      r1,r5                 ;50
000094  4630              MOV      r0,r6                 ;50
000096  f7fffffe          BL       lua_xmove
00009a  f04f30ff          MOV      r0,#0xffffffff        ;51
00009e  e7be              B        |L1.30|
;;;54     
                          ENDP

                  |L1.160|
0000a0  746f6f20          DCB      "too many arguments to resume",0
0000a4  6d616e79
0000a8  20617267
0000ac  756d656e
0000b0  74732074
0000b4  6f207265
0000b8  73756d65
0000bc  00      
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L1.192|
0000c0  63616e6e          DCB      "cannot resume dead coroutine",0
0000c4  6f742072
0000c8  6573756d
0000cc  65206465
0000d0  61642063
0000d4  6f726f75
0000d8  74696e65
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
                  |L1.224|
0000e0  746f6f20          DCB      "too many results to resume",0
0000e4  6d616e79
0000e8  20726573
0000ec  756c7473
0000f0  20746f20
0000f4  72657375
0000f8  6d6500  
0000fb  00                DCB      0

                          AREA ||i.getco||, CODE, READONLY, ALIGN=2

                  getco PROC
;;;20     
;;;21     static lua_State *getco (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;22       lua_State *co = lua_tothread(L, 1);
000004  2101              MOVS     r1,#1
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       lua_tothread
00000c  4604              MOV      r4,r0
;;;23       luaL_argcheck(L, co, 1, "thread expected");
00000e  b924              CBNZ     r4,|L2.26|
000010  a203              ADR      r2,|L2.32|
000012  2101              MOVS     r1,#1
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       luaL_argerror
                  |L2.26|
;;;24       return co;
00001a  4620              MOV      r0,r4
;;;25     }
00001c  bd70              POP      {r4-r6,pc}
;;;26     
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
000020  74687265          DCB      "thread expected",0
000024  61642065
000028  78706563
00002c  74656400

                          AREA ||i.luaB_auxwrap||, CODE, READONLY, ALIGN=2

                  luaB_auxwrap PROC
;;;72     
;;;73     static int luaB_auxwrap (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
;;;74       lua_State *co = lua_tothread(L, lua_upvalueindex(1));
000006  4916              LDR      r1,|L3.96|
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       lua_tothread
00000e  4606              MOV      r6,r0
;;;75       int r = auxresume(L, co, lua_gettop(L));
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       lua_gettop
000016  4607              MOV      r7,r0
000018  463a              MOV      r2,r7
00001a  4631              MOV      r1,r6
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       auxresume
000022  4604              MOV      r4,r0
;;;76       if (r < 0) {
000024  2c00              CMP      r4,#0
000026  da18              BGE      |L3.90|
;;;77         if (lua_type(L, -1) == LUA_TSTRING) {  /* error object is a string? */
000028  f04f31ff          MOV      r1,#0xffffffff
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       lua_type
000032  2804              CMP      r0,#4
000034  d10c              BNE      |L3.80|
;;;78           luaL_where(L, 1);  /* add extra info */
000036  2101              MOVS     r1,#1
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       luaL_where
;;;79           lua_insert(L, -2);
00003e  2201              MOVS     r2,#1
000040  1ed1              SUBS     r1,r2,#3
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       lua_rotate
;;;80           lua_concat(L, 2);
000048  2102              MOVS     r1,#2
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       lua_concat
                  |L3.80|
;;;81         }
;;;82         return lua_error(L);  /* propagate error */
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       lua_error
                  |L3.86|
;;;83       }
;;;84       return r;
;;;85     }
000056  e8bd81f0          POP      {r4-r8,pc}
                  |L3.90|
00005a  4620              MOV      r0,r4                 ;84
00005c  e7fb              B        |L3.86|
;;;86     
                          ENDP

00005e  0000              DCW      0x0000
                  |L3.96|
                          DCD      0xfff0b9d7

                          AREA ||i.luaB_cocreate||, CODE, READONLY, ALIGN=1

                  luaB_cocreate PROC
;;;87     
;;;88     static int luaB_cocreate (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;89       lua_State *NL;
;;;90       luaL_checktype(L, 1, LUA_TFUNCTION);
000004  2206              MOVS     r2,#6
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checktype
;;;91       NL = lua_newthread(L);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       lua_newthread
000014  4605              MOV      r5,r0
;;;92       lua_pushvalue(L, 1);  /* move function to top */
000016  2101              MOVS     r1,#1
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       lua_pushvalue
;;;93       lua_xmove(L, NL, 1);  /* move function from L to NL */
00001e  2201              MOVS     r2,#1
000020  4629              MOV      r1,r5
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       lua_xmove
;;;94       return 1;
000028  2001              MOVS     r0,#1
;;;95     }
00002a  bd70              POP      {r4-r6,pc}
;;;96     
                          ENDP


                          AREA ||i.luaB_coresume||, CODE, READONLY, ALIGN=1

                  luaB_coresume PROC
;;;55     
;;;56     static int luaB_coresume (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
;;;57       lua_State *co = getco(L);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       getco
00000c  4607              MOV      r7,r0
;;;58       int r;
;;;59       r = auxresume(L, co, lua_gettop(L) - 1);
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       lua_gettop
000014  1e46              SUBS     r6,r0,#1
000016  4632              MOV      r2,r6
000018  4639              MOV      r1,r7
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       auxresume
000020  4604              MOV      r4,r0
;;;60       if (r < 0) {
000022  2c00              CMP      r4,#0
000024  da0b              BGE      |L5.62|
;;;61         lua_pushboolean(L, 0);
000026  2100              MOVS     r1,#0
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       lua_pushboolean
;;;62         lua_insert(L, -2);
00002e  2201              MOVS     r2,#1
000030  1ed1              SUBS     r1,r2,#3
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       lua_rotate
;;;63         return 2;  /* return false + error message */
000038  2002              MOVS     r0,#2
                  |L5.58|
;;;64       }
;;;65       else {
;;;66         lua_pushboolean(L, 1);
;;;67         lua_insert(L, -(r + 1));
;;;68         return r + 1;  /* return true + 'resume' returns */
;;;69       }
;;;70     }
00003a  e8bd81f0          POP      {r4-r8,pc}
                  |L5.62|
00003e  2101              MOVS     r1,#1                 ;66
000040  4628              MOV      r0,r5                 ;66
000042  f7fffffe          BL       lua_pushboolean
000046  2201              MOVS     r2,#1                 ;67
000048  1c60              ADDS     r0,r4,#1              ;67
00004a  4241              RSBS     r1,r0,#0              ;67
00004c  4628              MOV      r0,r5                 ;67
00004e  f7fffffe          BL       lua_rotate
000052  1c60              ADDS     r0,r4,#1              ;68
000054  e7f1              B        |L5.58|
;;;71     
                          ENDP


                          AREA ||i.luaB_corunning||, CODE, READONLY, ALIGN=1

                  luaB_corunning PROC
;;;142    
;;;143    static int luaB_corunning (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;144      int ismain = lua_pushthread(L);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       lua_pushthread
00000a  4605              MOV      r5,r0
;;;145      lua_pushboolean(L, ismain);
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       lua_pushboolean
;;;146      return 2;
000014  2002              MOVS     r0,#2
;;;147    }
000016  bd70              POP      {r4-r6,pc}
;;;148    
                          ENDP


                          AREA ||i.luaB_costatus||, CODE, READONLY, ALIGN=2

                  luaB_costatus PROC
;;;109    
;;;110    static int luaB_costatus (lua_State *L) {
000000  b530              PUSH     {r4,r5,lr}
000002  b09b              SUB      sp,sp,#0x6c
000004  4604              MOV      r4,r0
;;;111      lua_State *co = getco(L);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       getco
00000c  4605              MOV      r5,r0
;;;112      if (L == co) lua_pushliteral(L, "running");
00000e  42ac              CMP      r4,r5
000010  d104              BNE      |L7.28|
000012  a119              ADR      r1,|L7.120|
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       lua_pushstring
00001a  e02a              B        |L7.114|
                  |L7.28|
;;;113      else {
;;;114        switch (lua_status(co)) {
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       lua_status
000022  b130              CBZ      r0,|L7.50|
000024  2801              CMP      r0,#1
000026  d11e              BNE      |L7.102|
;;;115          case LUA_YIELD:
;;;116            lua_pushliteral(L, "suspended");
000028  a115              ADR      r1,|L7.128|
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       lua_pushstring
;;;117            break;
000030  e01e              B        |L7.112|
                  |L7.50|
;;;118          case LUA_OK: {
;;;119            lua_Debug ar;
;;;120            if (lua_getstack(co, 0, &ar) > 0)  /* does it have frames? */
000032  aa01              ADD      r2,sp,#4
000034  2100              MOVS     r1,#0
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       lua_getstack
00003c  2800              CMP      r0,#0
00003e  dd04              BLE      |L7.74|
;;;121              lua_pushliteral(L, "normal");  /* it is running */
000040  a112              ADR      r1,|L7.140|
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       lua_pushstring
000048  e00c              B        |L7.100|
                  |L7.74|
;;;122            else if (lua_gettop(co) == 0)
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       lua_gettop
000050  b920              CBNZ     r0,|L7.92|
;;;123                lua_pushliteral(L, "dead");
000052  a110              ADR      r1,|L7.148|
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       lua_pushstring
00005a  e003              B        |L7.100|
                  |L7.92|
;;;124            else
;;;125              lua_pushliteral(L, "suspended");  /* initial state */
00005c  a108              ADR      r1,|L7.128|
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       lua_pushstring
                  |L7.100|
;;;126            break;
000064  e004              B        |L7.112|
                  |L7.102|
;;;127          }
;;;128          default:  /* some error occurred */
;;;129            lua_pushliteral(L, "dead");
000066  a10b              ADR      r1,|L7.148|
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       lua_pushstring
;;;130            break;
00006e  bf00              NOP      
                  |L7.112|
000070  bf00              NOP                            ;117
                  |L7.114|
;;;131        }
;;;132      }
;;;133      return 1;
000072  2001              MOVS     r0,#1
;;;134    }
000074  b01b              ADD      sp,sp,#0x6c
000076  bd30              POP      {r4,r5,pc}
;;;135    
                          ENDP

                  |L7.120|
000078  72756e6e          DCB      "running",0
00007c  696e6700
                  |L7.128|
000080  73757370          DCB      "suspended",0
000084  656e6465
000088  6400    
00008a  00                DCB      0
00008b  00                DCB      0
                  |L7.140|
00008c  6e6f726d          DCB      "normal",0
000090  616c00  
000093  00                DCB      0
                  |L7.148|
000094  64656164          DCB      "dead",0
000098  00      
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0

                          AREA ||i.luaB_cowrap||, CODE, READONLY, ALIGN=2

                  luaB_cowrap PROC
;;;97     
;;;98     static int luaB_cowrap (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;99       luaB_cocreate(L);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       luaB_cocreate
;;;100      lua_pushcclosure(L, luaB_auxwrap, 1);
00000a  2201              MOVS     r2,#1
00000c  4902              LDR      r1,|L8.24|
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       lua_pushcclosure
;;;101      return 1;
000014  2001              MOVS     r0,#1
;;;102    }
000016  bd10              POP      {r4,pc}
;;;103    
                          ENDP

                  |L8.24|
                          DCD      luaB_auxwrap

                          AREA ||i.luaB_yield||, CODE, READONLY, ALIGN=1

                  luaB_yield PROC
;;;104    
;;;105    static int luaB_yield (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;106      return lua_yield(L, lua_gettop(L));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       lua_gettop
00000a  4605              MOV      r5,r0
00000c  2300              MOVS     r3,#0
00000e  461a              MOV      r2,r3
000010  4629              MOV      r1,r5
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       lua_yieldk
;;;107    }
000018  bd70              POP      {r4-r6,pc}
;;;108    
                          ENDP


                          AREA ||i.luaB_yieldable||, CODE, READONLY, ALIGN=1

                  luaB_yieldable PROC
;;;136    
;;;137    static int luaB_yieldable (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;138      lua_pushboolean(L, lua_isyieldable(L));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       lua_isyieldable
00000a  4605              MOV      r5,r0
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       lua_pushboolean
;;;139      return 1;
000014  2001              MOVS     r0,#1
;;;140    }
000016  bd70              POP      {r4-r6,pc}
;;;141    
                          ENDP


                          AREA ||i.luaopen_coroutine||, CODE, READONLY, ALIGN=2

                  luaopen_coroutine PROC
;;;162    
;;;163    LUAMOD_API int luaopen_coroutine (lua_State *L) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;164      luaL_newlib(L, co_funcs);
000004  2088              MOVS     r0,#0x88
000006  2200              MOVS     r2,#0
000008  4b08              LDR      r3,|L11.44|
00000a  9000              STR      r0,[sp,#0]
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       luaL_checkversion_
000012  2207              MOVS     r2,#7
000014  2100              MOVS     r1,#0
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       lua_createtable
00001c  2200              MOVS     r2,#0
00001e  4904              LDR      r1,|L11.48|
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       luaL_setfuncs
;;;165      return 1;
000026  2001              MOVS     r0,#1
;;;166    }
000028  bd38              POP      {r3-r5,pc}
;;;167    
                          ENDP

00002a  0000              DCW      0x0000
                  |L11.44|
                          DCD      0x407f8000
                  |L11.48|
                          DCD      co_funcs

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  co_funcs
                          DCD      ||.conststring||
                          DCD      luaB_cocreate
                          DCD      ||.conststring||+0x8
                          DCD      luaB_coresume
                          DCD      ||.conststring||+0x10
                          DCD      luaB_corunning
                          DCD      ||.conststring||+0x18
                          DCD      luaB_costatus
                          DCD      ||.conststring||+0x20
                          DCD      luaB_cowrap
                          DCD      ||.conststring||+0x28
                          DCD      luaB_yield
                          DCD      ||.conststring||+0x30
                          DCD      luaB_yieldable
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  63726561          DCB      "create",0
000004  746500  
000007  00                DCB      0
000008  72657375          DCB      "resume",0
00000c  6d6500  
00000f  00                DCB      0
000010  72756e6e          DCB      "running",0
000014  696e6700
000018  73746174          DCB      "status",0
00001c  757300  
00001f  00                DCB      0
000020  77726170          DCB      "wrap",0
000024  00      
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0
000028  7969656c          DCB      "yield",0
00002c  6400    
00002e  00                DCB      0
00002f  00                DCB      0
000030  69737969          DCB      "isyieldable",0
000034  656c6461
000038  626c6500
