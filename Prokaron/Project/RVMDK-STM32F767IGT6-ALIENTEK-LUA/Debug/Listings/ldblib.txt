; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\ldblib.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\ldblib.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\ldblib.crf ..\..\..\M6P1(L)_Lua\lua\ldblib.c]
                          THUMB

                          AREA ||i.auxupvalue||, CODE, READONLY, ALIGN=1

                  auxupvalue PROC
;;;256    */
;;;257    static int auxupvalue (lua_State *L, int get) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
;;;258      const char *name;
;;;259      int n = (int)luaL_checkinteger(L, 2);  /* upvalue index */
000008  2102              MOVS     r1,#2
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       luaL_checkinteger
000010  4607              MOV      r7,r0
;;;260      luaL_checktype(L, 1, LUA_TFUNCTION);  /* closure */
000012  2206              MOVS     r2,#6
000014  2101              MOVS     r1,#1
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       luaL_checktype
;;;261      name = get ? lua_getupvalue(L, 1, n) : lua_setupvalue(L, 1, n);
00001c  b12c              CBZ      r4,|L1.42|
00001e  463a              MOV      r2,r7
000020  2101              MOVS     r1,#1
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       lua_getupvalue
000028  e004              B        |L1.52|
                  |L1.42|
00002a  463a              MOV      r2,r7
00002c  2101              MOVS     r1,#1
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       lua_setupvalue
                  |L1.52|
000034  4605              MOV      r5,r0
;;;262      if (name == NULL) return 0;
000036  b915              CBNZ     r5,|L1.62|
000038  2000              MOVS     r0,#0
                  |L1.58|
;;;263      lua_pushstring(L, name);
;;;264      lua_insert(L, -(get+1));  /* no-op if get is false */
;;;265      return get + 1;
;;;266    }
00003a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.62|
00003e  4629              MOV      r1,r5                 ;263
000040  4630              MOV      r0,r6                 ;263
000042  f7fffffe          BL       lua_pushstring
000046  2201              MOVS     r2,#1                 ;264
000048  1c60              ADDS     r0,r4,#1              ;264
00004a  4241              RSBS     r1,r0,#0              ;264
00004c  4630              MOV      r0,r6                 ;264
00004e  f7fffffe          BL       lua_rotate
000052  1c60              ADDS     r0,r4,#1              ;265
000054  e7f1              B        |L1.58|
;;;267    
                          ENDP


                          AREA ||i.checkstack||, CODE, READONLY, ALIGN=2

                  checkstack PROC
;;;34     */
;;;35     static void checkstack (lua_State *L, lua_State *L1, int n) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;36       if (L != L1 && !lua_checkstack(L1, n))
000008  42a6              CMP      r6,r4
00000a  d008              BEQ      |L2.30|
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       lua_checkstack
000014  b918              CBNZ     r0,|L2.30|
;;;37         luaL_error(L, "stack overflow");
000016  a102              ADR      r1,|L2.32|
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       luaL_error
                  |L2.30|
;;;38     }
00001e  bd70              POP      {r4-r6,pc}
;;;39     
                          ENDP

                  |L2.32|
000020  73746163          DCB      "stack overflow",0
000024  6b206f76
000028  6572666c
00002c  6f7700  
00002f  00                DCB      0

                          AREA ||i.checkupval||, CODE, READONLY, ALIGN=2

                  checkupval PROC
;;;283    */
;;;284    static int checkupval (lua_State *L, int argf, int argnup) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;285      int nup = (int)luaL_checkinteger(L, argnup);  /* upvalue index */
00000a  4621              MOV      r1,r4
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       luaL_checkinteger
000012  4605              MOV      r5,r0
;;;286      luaL_checktype(L, argf, LUA_TFUNCTION);  /* closure */
000014  2206              MOVS     r2,#6
000016  4639              MOV      r1,r7
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       luaL_checktype
;;;287      luaL_argcheck(L, (lua_getupvalue(L, argf, nup) != NULL), argnup,
00001e  462a              MOV      r2,r5
000020  4639              MOV      r1,r7
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       lua_getupvalue
000028  b920              CBNZ     r0,|L3.52|
00002a  a204              ADR      r2,|L3.60|
00002c  4621              MOV      r1,r4
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       luaL_argerror
                  |L3.52|
;;;288                       "invalid upvalue index");
;;;289      return nup;
000034  4628              MOV      r0,r5
;;;290    }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;291    
                          ENDP

00003a  0000              DCW      0x0000
                  |L3.60|
00003c  696e7661          DCB      "invalid upvalue index",0
000040  6c696420
000044  75707661
000048  6c756520
00004c  696e6465
000050  7800    
000052  00                DCB      0
000053  00                DCB      0

                          AREA ||i.db_debug||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  db_debug PROC
;;;410    
;;;411    static int db_debug (lua_State *L) {
000000  b530              PUSH     {r4,r5,lr}
000002  b0c1              SUB      sp,sp,#0x104
000004  4604              MOV      r4,r0
;;;412      for (;;) {
000006  bf00              NOP      
                  |L4.8|
;;;413        char buffer[250];
;;;414        lua_writestringerror("%s", "lua_debug> ");
000008  a21f              ADR      r2,|L4.136|
00000a  a122              ADR      r1,|L4.148|
00000c  4822              LDR      r0,|L4.152|
00000e  f7fffffe          BL       __2fprintf
000012  4821              LDR      r0,|L4.152|
000014  f7fffffe          BL       fflush
;;;415        if (fgets(buffer, sizeof(buffer), stdin) == 0 ||
000018  4a20              LDR      r2,|L4.156|
00001a  21fa              MOVS     r1,#0xfa
00001c  a802              ADD      r0,sp,#8
00001e  f7fffffe          BL       fgets
000022  b120              CBZ      r0,|L4.46|
;;;416            strcmp(buffer, "cont\n") == 0)
000024  a11e              ADR      r1,|L4.160|
000026  a802              ADD      r0,sp,#8
000028  f7fffffe          BL       strcmp
00002c  b910              CBNZ     r0,|L4.52|
                  |L4.46|
;;;417          return 0;
00002e  2000              MOVS     r0,#0
;;;418        if (luaL_loadbuffer(L, buffer, strlen(buffer), "=(debug command)") ||
;;;419            lua_pcall(L, 0, 0, 0))
;;;420          lua_writestringerror("%s\n", lua_tostring(L, -1));
;;;421        lua_settop(L, 0);  /* remove eventual returns */
;;;422      }
;;;423    }
000030  b041              ADD      sp,sp,#0x104
000032  bd30              POP      {r4,r5,pc}
                  |L4.52|
000034  a802              ADD      r0,sp,#8              ;418
000036  f7fffffe          BL       strlen
00003a  4605              MOV      r5,r0                 ;418
00003c  2000              MOVS     r0,#0                 ;418
00003e  a31a              ADR      r3,|L4.168|
000040  462a              MOV      r2,r5                 ;418
000042  a902              ADD      r1,sp,#8              ;418
000044  9000              STR      r0,[sp,#0]            ;418
000046  4620              MOV      r0,r4                 ;418
000048  f7fffffe          BL       luaL_loadbufferx
00004c  b948              CBNZ     r0,|L4.98|
00004e  2000              MOVS     r0,#0                 ;419
000050  9000              STR      r0,[sp,#0]            ;419
000052  4603              MOV      r3,r0                 ;419
000054  4602              MOV      r2,r0                 ;419
000056  4601              MOV      r1,r0                 ;419
000058  9001              STR      r0,[sp,#4]            ;419
00005a  4620              MOV      r0,r4                 ;419
00005c  f7fffffe          BL       lua_pcallk
000060  b168              CBZ      r0,|L4.126|
                  |L4.98|
000062  2200              MOVS     r2,#0                 ;420
000064  1e51              SUBS     r1,r2,#1              ;420
000066  4620              MOV      r0,r4                 ;420
000068  f7fffffe          BL       lua_tolstring
00006c  4605              MOV      r5,r0                 ;420
00006e  462a              MOV      r2,r5                 ;420
000070  a112              ADR      r1,|L4.188|
000072  4809              LDR      r0,|L4.152|
000074  f7fffffe          BL       __2fprintf
000078  4807              LDR      r0,|L4.152|
00007a  f7fffffe          BL       fflush
                  |L4.126|
00007e  2100              MOVS     r1,#0                 ;421
000080  4620              MOV      r0,r4                 ;421
000082  f7fffffe          BL       lua_settop
000086  e7bf              B        |L4.8|
;;;424    
                          ENDP

                  |L4.136|
000088  6c75615f          DCB      "lua_debug> ",0
00008c  64656275
000090  673e2000
                  |L4.148|
000094  257300            DCB      "%s",0
000097  00                DCB      0
                  |L4.152|
                          DCD      __stderr
                  |L4.156|
                          DCD      __stdin
                  |L4.160|
0000a0  636f6e74          DCB      "cont\n",0
0000a4  0a00    
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L4.168|
0000a8  3d286465          DCB      "=(debug command)",0
0000ac  62756720
0000b0  636f6d6d
0000b4  616e6429
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L4.188|
0000bc  25730a00          DCB      "%s\n",0

                          AREA ||i.db_gethook||, CODE, READONLY, ALIGN=2

                  db_gethook PROC
;;;387    
;;;388    static int db_gethook (lua_State *L) {
000000  e92d43fe          PUSH     {r1-r9,lr}
000004  4604              MOV      r4,r0
;;;389      int arg;
;;;390      lua_State *L1 = getthread(L, &arg);
000006  a902              ADD      r1,sp,#8
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       getthread
00000e  4680              MOV      r8,r0
;;;391      char buff[5];
;;;392      int mask = lua_gethookmask(L1);
000010  4640              MOV      r0,r8
000012  f7fffffe          BL       lua_gethookmask
000016  4681              MOV      r9,r0
;;;393      lua_Hook hook = lua_gethook(L1);
000018  4640              MOV      r0,r8
00001a  f7fffffe          BL       lua_gethook
00001e  4605              MOV      r5,r0
;;;394      if (hook == NULL)  /* no hook? */
000020  b91d              CBNZ     r5,|L5.42|
;;;395        lua_pushnil(L);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       lua_pushnil
000028  e029              B        |L5.126|
                  |L5.42|
;;;396      else if (hook != hookf)  /* external hook? */
00002a  481f              LDR      r0,|L5.168|
00002c  4285              CMP      r5,r0
00002e  d004              BEQ      |L5.58|
;;;397        lua_pushliteral(L, "external hook");
000030  a11e              ADR      r1,|L5.172|
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       lua_pushstring
000038  e021              B        |L5.126|
                  |L5.58|
;;;398      else {  /* hook table must exist */
;;;399        lua_rawgetp(L, LUA_REGISTRYINDEX, &HOOKKEY);
00003a  4a20              LDR      r2,|L5.188|
00003c  4920              LDR      r1,|L5.192|
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       lua_rawgetp
;;;400        checkstack(L, L1, 1);
000044  2201              MOVS     r2,#1
000046  4641              MOV      r1,r8
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       checkstack
;;;401        lua_pushthread(L1); lua_xmove(L1, L, 1);
00004e  4640              MOV      r0,r8
000050  f7fffffe          BL       lua_pushthread
000054  2201              MOVS     r2,#1
000056  4621              MOV      r1,r4
000058  4640              MOV      r0,r8
00005a  f7fffffe          BL       lua_xmove
;;;402        lua_rawget(L, -2);   /* 1st result = hooktable[L1] */
00005e  f06f0101          MVN      r1,#1
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       lua_rawget
;;;403        lua_remove(L, -2);  /* remove hook table */
000068  f04f32ff          MOV      r2,#0xffffffff
00006c  0051              LSLS     r1,r2,#1
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       lua_rotate
000074  f06f0101          MVN      r1,#1
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       lua_settop
                  |L5.126|
;;;404      }
;;;405      lua_pushstring(L, unmakemask(mask, buff));  /* 2nd result = mask */
00007e  4669              MOV      r1,sp
000080  4648              MOV      r0,r9
000082  f7fffffe          BL       unmakemask
000086  4606              MOV      r6,r0
000088  4631              MOV      r1,r6
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       lua_pushstring
;;;406      lua_pushinteger(L, lua_gethookcount(L1));  /* 3rd result = count */
000090  4640              MOV      r0,r8
000092  f7fffffe          BL       lua_gethookcount
000096  17c3              ASRS     r3,r0,#31
000098  4606              MOV      r6,r0
00009a  4632              MOV      r2,r6
00009c  4620              MOV      r0,r4
00009e  f7fffffe          BL       lua_pushinteger
;;;407      return 3;
0000a2  2003              MOVS     r0,#3
;;;408    }
0000a4  e8bd83fe          POP      {r1-r9,pc}
;;;409    
                          ENDP

                  |L5.168|
                          DCD      hookf
                  |L5.172|
0000ac  65787465          DCB      "external hook",0
0000b0  726e616c
0000b4  20686f6f
0000b8  6b00    
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L5.188|
                          DCD      HOOKKEY
                  |L5.192|
                          DCD      0xfff0b9d8

                          AREA ||i.db_getinfo||, CODE, READONLY, ALIGN=2

                  db_getinfo PROC
;;;149    */
;;;150    static int db_getinfo (lua_State *L) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b09b              SUB      sp,sp,#0x6c
000004  4604              MOV      r4,r0
;;;151      lua_Debug ar;
;;;152      int arg;
;;;153      lua_State *L1 = getthread(L, &arg);
000006  4669              MOV      r1,sp
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       getthread
00000e  4607              MOV      r7,r0
;;;154      const char *options = luaL_optstring(L, arg+2, "flnSrtu");
000010  2300              MOVS     r3,#0
000012  a264              ADR      r2,|L6.420|
000014  9900              LDR      r1,[sp,#0]
000016  1c89              ADDS     r1,r1,#2
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       luaL_optlstring
00001e  4606              MOV      r6,r0
;;;155      checkstack(L, L1, 3);
000020  2203              MOVS     r2,#3
000022  4639              MOV      r1,r7
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       checkstack
;;;156      if (lua_isfunction(L, arg + 1)) {  /* info about a function? */
00002a  9900              LDR      r1,[sp,#0]
00002c  1c49              ADDS     r1,r1,#1
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       lua_type
000034  2806              CMP      r0,#6
000036  d110              BNE      |L6.90|
;;;157        options = lua_pushfstring(L, ">%s", options);  /* add '>' to 'options' */
000038  4632              MOV      r2,r6
00003a  a15c              ADR      r1,|L6.428|
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       lua_pushfstring
000042  4606              MOV      r6,r0
;;;158        lua_pushvalue(L, arg + 1);  /* move function to 'L1' stack */
000044  9900              LDR      r1,[sp,#0]
000046  1c49              ADDS     r1,r1,#1
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       lua_pushvalue
;;;159        lua_xmove(L, L1, 1);
00004e  2201              MOVS     r2,#1
000050  4639              MOV      r1,r7
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       lua_xmove
000058  e011              B        |L6.126|
                  |L6.90|
;;;160      }
;;;161      else {  /* stack level */
;;;162        if (!lua_getstack(L1, (int)luaL_checkinteger(L, arg + 1), &ar)) {
00005a  9900              LDR      r1,[sp,#0]
00005c  1c49              ADDS     r1,r1,#1
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       luaL_checkinteger
000064  4605              MOV      r5,r0
000066  aa01              ADD      r2,sp,#4
000068  4629              MOV      r1,r5
00006a  4638              MOV      r0,r7
00006c  f7fffffe          BL       lua_getstack
000070  b928              CBNZ     r0,|L6.126|
;;;163          lua_pushnil(L);  /* level out of range */
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       lua_pushnil
;;;164          return 1;
000078  2001              MOVS     r0,#1
                  |L6.122|
;;;165        }
;;;166      }
;;;167      if (!lua_getinfo(L1, options, &ar))
;;;168        return luaL_argerror(L, arg+2, "invalid option");
;;;169      lua_newtable(L);  /* table to collect results */
;;;170      if (strchr(options, 'S')) {
;;;171        settabss(L, "source", ar.source);
;;;172        settabss(L, "short_src", ar.short_src);
;;;173        settabsi(L, "linedefined", ar.linedefined);
;;;174        settabsi(L, "lastlinedefined", ar.lastlinedefined);
;;;175        settabss(L, "what", ar.what);
;;;176      }
;;;177      if (strchr(options, 'l'))
;;;178        settabsi(L, "currentline", ar.currentline);
;;;179      if (strchr(options, 'u')) {
;;;180        settabsi(L, "nups", ar.nups);
;;;181        settabsi(L, "nparams", ar.nparams);
;;;182        settabsb(L, "isvararg", ar.isvararg);
;;;183      }
;;;184      if (strchr(options, 'n')) {
;;;185        settabss(L, "name", ar.name);
;;;186        settabss(L, "namewhat", ar.namewhat);
;;;187      }
;;;188      if (strchr(options, 'r')) {
;;;189        settabsi(L, "fTransfer", ar.fTransfer);
;;;190        settabsi(L, "nTransfer", ar.nTransfer);
;;;191      }
;;;192      if (strchr(options, 't'))
;;;193        settabsb(L, "istailcall", ar.istailcall);
;;;194      if (strchr(options, 'L'))
;;;195        treatstackoption(L, L1, "activelines");
;;;196      if (strchr(options, 'f'))
;;;197        treatstackoption(L, L1, "func");
;;;198      return 1;  /* return table */
;;;199    }
00007a  b01b              ADD      sp,sp,#0x6c
00007c  bdf0              POP      {r4-r7,pc}
                  |L6.126|
00007e  aa01              ADD      r2,sp,#4              ;167
000080  4631              MOV      r1,r6                 ;167
000082  4638              MOV      r0,r7                 ;167
000084  f7fffffe          BL       lua_getinfo
000088  b930              CBNZ     r0,|L6.152|
00008a  a249              ADR      r2,|L6.432|
00008c  9900              LDR      r1,[sp,#0]            ;168
00008e  1c89              ADDS     r1,r1,#2              ;168
000090  4620              MOV      r0,r4                 ;168
000092  f7fffffe          BL       luaL_argerror
000096  e7f0              B        |L6.122|
                  |L6.152|
000098  2200              MOVS     r2,#0                 ;169
00009a  4611              MOV      r1,r2                 ;169
00009c  4620              MOV      r0,r4                 ;169
00009e  f7fffffe          BL       lua_createtable
0000a2  2153              MOVS     r1,#0x53              ;170
0000a4  4630              MOV      r0,r6                 ;170
0000a6  f7fffffe          BL       strchr
0000aa  b1c0              CBZ      r0,|L6.222|
0000ac  a144              ADR      r1,|L6.448|
0000ae  4620              MOV      r0,r4                 ;171
0000b0  9a05              LDR      r2,[sp,#0x14]         ;171
0000b2  f7fffffe          BL       settabss
0000b6  aa0b              ADD      r2,sp,#0x2c           ;172
0000b8  a143              ADR      r1,|L6.456|
0000ba  4620              MOV      r0,r4                 ;172
0000bc  f7fffffe          BL       settabss
0000c0  a144              ADR      r1,|L6.468|
0000c2  4620              MOV      r0,r4                 ;173
0000c4  9a07              LDR      r2,[sp,#0x1c]         ;173
0000c6  f7fffffe          BL       settabsi
0000ca  a145              ADR      r1,|L6.480|
0000cc  4620              MOV      r0,r4                 ;174
0000ce  9a08              LDR      r2,[sp,#0x20]         ;174
0000d0  f7fffffe          BL       settabsi
0000d4  a146              ADR      r1,|L6.496|
0000d6  4620              MOV      r0,r4                 ;175
0000d8  9a04              LDR      r2,[sp,#0x10]         ;175
0000da  f7fffffe          BL       settabss
                  |L6.222|
0000de  216c              MOVS     r1,#0x6c              ;177
0000e0  4630              MOV      r0,r6                 ;177
0000e2  f7fffffe          BL       strchr
0000e6  b120              CBZ      r0,|L6.242|
0000e8  a143              ADR      r1,|L6.504|
0000ea  4620              MOV      r0,r4                 ;178
0000ec  9a06              LDR      r2,[sp,#0x18]         ;178
0000ee  f7fffffe          BL       settabsi
                  |L6.242|
0000f2  2175              MOVS     r1,#0x75              ;179
0000f4  4630              MOV      r0,r6                 ;179
0000f6  f7fffffe          BL       strchr
0000fa  b188              CBZ      r0,|L6.288|
0000fc  f89d2024          LDRB     r2,[sp,#0x24]         ;180
000100  a140              ADR      r1,|L6.516|
000102  4620              MOV      r0,r4                 ;180
000104  f7fffffe          BL       settabsi
000108  f89d2025          LDRB     r2,[sp,#0x25]         ;181
00010c  a13f              ADR      r1,|L6.524|
00010e  4620              MOV      r0,r4                 ;181
000110  f7fffffe          BL       settabsi
000114  f99d2026          LDRSB    r2,[sp,#0x26]         ;182
000118  a13e              ADR      r1,|L6.532|
00011a  4620              MOV      r0,r4                 ;182
00011c  f7fffffe          BL       settabsb
                  |L6.288|
000120  216e              MOVS     r1,#0x6e              ;184
000122  4630              MOV      r0,r6                 ;184
000124  f7fffffe          BL       strchr
000128  b148              CBZ      r0,|L6.318|
00012a  a13d              ADR      r1,|L6.544|
00012c  4620              MOV      r0,r4                 ;185
00012e  9a02              LDR      r2,[sp,#8]            ;185
000130  f7fffffe          BL       settabss
000134  a13c              ADR      r1,|L6.552|
000136  4620              MOV      r0,r4                 ;186
000138  9a03              LDR      r2,[sp,#0xc]          ;186
00013a  f7fffffe          BL       settabss
                  |L6.318|
00013e  2172              MOVS     r1,#0x72              ;188
000140  4630              MOV      r0,r6                 ;188
000142  f7fffffe          BL       strchr
000146  b158              CBZ      r0,|L6.352|
000148  f8bd2028          LDRH     r2,[sp,#0x28]         ;189
00014c  a139              ADR      r1,|L6.564|
00014e  4620              MOV      r0,r4                 ;189
000150  f7fffffe          BL       settabsi
000154  f8bd202a          LDRH     r2,[sp,#0x2a]         ;190
000158  a139              ADR      r1,|L6.576|
00015a  4620              MOV      r0,r4                 ;190
00015c  f7fffffe          BL       settabsi
                  |L6.352|
000160  2174              MOVS     r1,#0x74              ;192
000162  4630              MOV      r0,r6                 ;192
000164  f7fffffe          BL       strchr
000168  b128              CBZ      r0,|L6.374|
00016a  f99d2027          LDRSB    r2,[sp,#0x27]         ;193
00016e  a137              ADR      r1,|L6.588|
000170  4620              MOV      r0,r4                 ;193
000172  f7fffffe          BL       settabsb
                  |L6.374|
000176  214c              MOVS     r1,#0x4c              ;194
000178  4630              MOV      r0,r6                 ;194
00017a  f7fffffe          BL       strchr
00017e  b120              CBZ      r0,|L6.394|
000180  a235              ADR      r2,|L6.600|
000182  4639              MOV      r1,r7                 ;195
000184  4620              MOV      r0,r4                 ;195
000186  f7fffffe          BL       treatstackoption
                  |L6.394|
00018a  2166              MOVS     r1,#0x66              ;196
00018c  4630              MOV      r0,r6                 ;196
00018e  f7fffffe          BL       strchr
000192  b120              CBZ      r0,|L6.414|
000194  a233              ADR      r2,|L6.612|
000196  4639              MOV      r1,r7                 ;197
000198  4620              MOV      r0,r4                 ;197
00019a  f7fffffe          BL       treatstackoption
                  |L6.414|
00019e  2001              MOVS     r0,#1                 ;198
0001a0  e76b              B        |L6.122|
;;;200    
                          ENDP

0001a2  0000              DCW      0x0000
                  |L6.420|
0001a4  666c6e53          DCB      "flnSrtu",0
0001a8  72747500
                  |L6.428|
0001ac  3e257300          DCB      ">%s",0
                  |L6.432|
0001b0  696e7661          DCB      "invalid option",0
0001b4  6c696420
0001b8  6f707469
0001bc  6f6e00  
0001bf  00                DCB      0
                  |L6.448|
0001c0  736f7572          DCB      "source",0
0001c4  636500  
0001c7  00                DCB      0
                  |L6.456|
0001c8  73686f72          DCB      "short_src",0
0001cc  745f7372
0001d0  6300    
0001d2  00                DCB      0
0001d3  00                DCB      0
                  |L6.468|
0001d4  6c696e65          DCB      "linedefined",0
0001d8  64656669
0001dc  6e656400
                  |L6.480|
0001e0  6c617374          DCB      "lastlinedefined",0
0001e4  6c696e65
0001e8  64656669
0001ec  6e656400
                  |L6.496|
0001f0  77686174          DCB      "what",0
0001f4  00      
0001f5  00                DCB      0
0001f6  00                DCB      0
0001f7  00                DCB      0
                  |L6.504|
0001f8  63757272          DCB      "currentline",0
0001fc  656e746c
000200  696e6500
                  |L6.516|
000204  6e757073          DCB      "nups",0
000208  00      
000209  00                DCB      0
00020a  00                DCB      0
00020b  00                DCB      0
                  |L6.524|
00020c  6e706172          DCB      "nparams",0
000210  616d7300
                  |L6.532|
000214  69737661          DCB      "isvararg",0
000218  72617267
00021c  00      
00021d  00                DCB      0
00021e  00                DCB      0
00021f  00                DCB      0
                  |L6.544|
000220  6e616d65          DCB      "name",0
000224  00      
000225  00                DCB      0
000226  00                DCB      0
000227  00                DCB      0
                  |L6.552|
000228  6e616d65          DCB      "namewhat",0
00022c  77686174
000230  00      
000231  00                DCB      0
000232  00                DCB      0
000233  00                DCB      0
                  |L6.564|
000234  66547261          DCB      "fTransfer",0
000238  6e736665
00023c  7200    
00023e  00                DCB      0
00023f  00                DCB      0
                  |L6.576|
000240  6e547261          DCB      "nTransfer",0
000244  6e736665
000248  7200    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L6.588|
00024c  69737461          DCB      "istailcall",0
000250  696c6361
000254  6c6c00  
000257  00                DCB      0
                  |L6.600|
000258  61637469          DCB      "activelines",0
00025c  76656c69
000260  6e657300
                  |L6.612|
000264  66756e63          DCB      "func",0
000268  00      
000269  00                DCB      0
00026a  00                DCB      0
00026b  00                DCB      0

                          AREA ||i.db_getlocal||, CODE, READONLY, ALIGN=2

                  db_getlocal PROC
;;;201    
;;;202    static int db_getlocal (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  b09c              SUB      sp,sp,#0x70
000006  4605              MOV      r5,r0
;;;203      int arg;
;;;204      lua_State *L1 = getthread(L, &arg);
000008  a91b              ADD      r1,sp,#0x6c
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       getthread
000010  4680              MOV      r8,r0
;;;205      lua_Debug ar;
;;;206      const char *name;
;;;207      int nvar = (int)luaL_checkinteger(L, arg + 2);  /* local-variable index */
000012  991b              LDR      r1,[sp,#0x6c]
000014  1c89              ADDS     r1,r1,#2
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       luaL_checkinteger
00001c  4606              MOV      r6,r0
;;;208      if (lua_isfunction(L, arg + 1)) {  /* function argument? */
00001e  991b              LDR      r1,[sp,#0x6c]
000020  1c49              ADDS     r1,r1,#1
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       lua_type
000028  2806              CMP      r0,#6
00002a  d112              BNE      |L7.82|
;;;209        lua_pushvalue(L, arg + 1);  /* push function */
00002c  991b              LDR      r1,[sp,#0x6c]
00002e  1c49              ADDS     r1,r1,#1
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       lua_pushvalue
;;;210        lua_pushstring(L, lua_getlocal(L, NULL, nvar));  /* push local name */
000036  4632              MOV      r2,r6
000038  2100              MOVS     r1,#0
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       lua_getlocal
000040  4607              MOV      r7,r0
000042  4639              MOV      r1,r7
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       lua_pushstring
;;;211        return 1;  /* return only name (there is no value) */
00004a  2001              MOVS     r0,#1
                  |L7.76|
;;;212      }
;;;213      else {  /* stack-level argument */
;;;214        int level = (int)luaL_checkinteger(L, arg + 1);
;;;215        if (!lua_getstack(L1, level, &ar))  /* out of range? */
;;;216          return luaL_argerror(L, arg+1, "level out of range");
;;;217        checkstack(L, L1, 1);
;;;218        name = lua_getlocal(L1, &ar, nvar);
;;;219        if (name) {
;;;220          lua_xmove(L1, L, 1);  /* move local value */
;;;221          lua_pushstring(L, name);  /* push name */
;;;222          lua_rotate(L, -2, 1);  /* re-order */
;;;223          return 2;
;;;224        }
;;;225        else {
;;;226          lua_pushnil(L);  /* no name (nor value) */
;;;227          return 1;
;;;228        }
;;;229      }
;;;230    }
00004c  b01c              ADD      sp,sp,#0x70
00004e  e8bd81f0          POP      {r4-r8,pc}
                  |L7.82|
000052  991b              LDR      r1,[sp,#0x6c]         ;214
000054  1c49              ADDS     r1,r1,#1              ;214
000056  4628              MOV      r0,r5                 ;214
000058  f7fffffe          BL       luaL_checkinteger
00005c  4607              MOV      r7,r0                 ;214
00005e  aa01              ADD      r2,sp,#4              ;215
000060  4639              MOV      r1,r7                 ;215
000062  4640              MOV      r0,r8                 ;215
000064  f7fffffe          BL       lua_getstack
000068  b930              CBNZ     r0,|L7.120|
00006a  a214              ADR      r2,|L7.188|
00006c  991b              LDR      r1,[sp,#0x6c]         ;216
00006e  1c49              ADDS     r1,r1,#1              ;216
000070  4628              MOV      r0,r5                 ;216
000072  f7fffffe          BL       luaL_argerror
000076  e7e9              B        |L7.76|
                  |L7.120|
000078  2201              MOVS     r2,#1                 ;217
00007a  4641              MOV      r1,r8                 ;217
00007c  4628              MOV      r0,r5                 ;217
00007e  f7fffffe          BL       checkstack
000082  4632              MOV      r2,r6                 ;218
000084  a901              ADD      r1,sp,#4              ;218
000086  4640              MOV      r0,r8                 ;218
000088  f7fffffe          BL       lua_getlocal
00008c  4604              MOV      r4,r0                 ;218
00008e  b17c              CBZ      r4,|L7.176|
000090  2201              MOVS     r2,#1                 ;220
000092  4629              MOV      r1,r5                 ;220
000094  4640              MOV      r0,r8                 ;220
000096  f7fffffe          BL       lua_xmove
00009a  4621              MOV      r1,r4                 ;221
00009c  4628              MOV      r0,r5                 ;221
00009e  f7fffffe          BL       lua_pushstring
0000a2  2201              MOVS     r2,#1                 ;222
0000a4  1ed1              SUBS     r1,r2,#3              ;222
0000a6  4628              MOV      r0,r5                 ;222
0000a8  f7fffffe          BL       lua_rotate
0000ac  2002              MOVS     r0,#2                 ;223
0000ae  e7cd              B        |L7.76|
                  |L7.176|
0000b0  4628              MOV      r0,r5                 ;226
0000b2  f7fffffe          BL       lua_pushnil
0000b6  2001              MOVS     r0,#1                 ;227
0000b8  e7c8              B        |L7.76|
;;;231    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L7.188|
0000bc  6c657665          DCB      "level out of range",0
0000c0  6c206f75
0000c4  74206f66
0000c8  2072616e
0000cc  676500  
0000cf  00                DCB      0

                          AREA ||i.db_getmetatable||, CODE, READONLY, ALIGN=1

                  db_getmetatable PROC
;;;46     
;;;47     static int db_getmetatable (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;48       luaL_checkany(L, 1);
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       luaL_checkany
;;;49       if (!lua_getmetatable(L, 1)) {
00000c  2101              MOVS     r1,#1
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       lua_getmetatable
000014  b910              CBNZ     r0,|L8.28|
;;;50         lua_pushnil(L);  /* no metatable */
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       lua_pushnil
                  |L8.28|
;;;51       }
;;;52       return 1;
00001c  2001              MOVS     r0,#1
;;;53     }
00001e  bd10              POP      {r4,pc}
;;;54     
                          ENDP


                          AREA ||i.db_getregistry||, CODE, READONLY, ALIGN=2

                  db_getregistry PROC
;;;40     
;;;41     static int db_getregistry (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;42       lua_pushvalue(L, LUA_REGISTRYINDEX);
000004  4902              LDR      r1,|L9.16|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       lua_pushvalue
;;;43       return 1;
00000c  2001              MOVS     r0,#1
;;;44     }
00000e  bd10              POP      {r4,pc}
;;;45     
                          ENDP

                  |L9.16|
                          DCD      0xfff0b9d8

                          AREA ||i.db_getupvalue||, CODE, READONLY, ALIGN=1

                  db_getupvalue PROC
;;;268    
;;;269    static int db_getupvalue (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;270      return auxupvalue(L, 1);
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       auxupvalue
;;;271    }
00000c  bd10              POP      {r4,pc}
;;;272    
                          ENDP


                          AREA ||i.db_getuservalue||, CODE, READONLY, ALIGN=1

                  db_getuservalue PROC
;;;65     
;;;66     static int db_getuservalue (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;67       int n = (int)luaL_optinteger(L, 2, 1);
000004  2201              MOVS     r2,#1
000006  2300              MOVS     r3,#0
000008  2102              MOVS     r1,#2
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       luaL_optinteger
000010  4605              MOV      r5,r0
;;;68       if (lua_type(L, 1) != LUA_TUSERDATA)
000012  2101              MOVS     r1,#1
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       lua_type
00001a  2807              CMP      r0,#7
00001c  d003              BEQ      |L11.38|
;;;69         lua_pushnil(L);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       lua_pushnil
000024  e00c              B        |L11.64|
                  |L11.38|
;;;70       else if (lua_getiuservalue(L, 1, n) != LUA_TNONE) {
000026  462a              MOV      r2,r5
000028  2101              MOVS     r1,#1
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       lua_getiuservalue
000030  1c40              ADDS     r0,r0,#1
000032  b128              CBZ      r0,|L11.64|
;;;71         lua_pushboolean(L, 1);
000034  2101              MOVS     r1,#1
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       lua_pushboolean
;;;72         return 2;
00003c  2002              MOVS     r0,#2
                  |L11.62|
;;;73       }
;;;74       return 1;
;;;75     }
00003e  bd70              POP      {r4-r6,pc}
                  |L11.64|
000040  2001              MOVS     r0,#1                 ;74
000042  e7fc              B        |L11.62|
;;;76     
                          ENDP


                          AREA ||i.db_sethook||, CODE, READONLY, ALIGN=2

                  db_sethook PROC
;;;355    
;;;356    static int db_sethook (lua_State *L) {
000000  e92d43f8          PUSH     {r3-r9,lr}
000004  4607              MOV      r7,r0
;;;357      int arg, mask, count;
;;;358      lua_Hook func;
;;;359      lua_State *L1 = getthread(L, &arg);
000006  4669              MOV      r1,sp
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       getthread
00000e  4680              MOV      r8,r0
;;;360      if (lua_isnoneornil(L, arg+1)) {  /* no hook? */
000010  9900              LDR      r1,[sp,#0]
000012  1c49              ADDS     r1,r1,#1
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       lua_type
00001a  2800              CMP      r0,#0
00001c  dc08              BGT      |L12.48|
;;;361        lua_settop(L, arg+1);
00001e  9900              LDR      r1,[sp,#0]
000020  1c49              ADDS     r1,r1,#1
000022  4638              MOV      r0,r7
000024  f7fffffe          BL       lua_settop
;;;362        func = NULL; mask = 0; count = 0;  /* turn off hooks */
000028  2600              MOVS     r6,#0
00002a  2400              MOVS     r4,#0
00002c  2500              MOVS     r5,#0
00002e  e01b              B        |L12.104|
                  |L12.48|
;;;363      }
;;;364      else {
;;;365        const char *smask = luaL_checkstring(L, arg+2);
000030  2200              MOVS     r2,#0
000032  9900              LDR      r1,[sp,#0]
000034  1c89              ADDS     r1,r1,#2
000036  4638              MOV      r0,r7
000038  f7fffffe          BL       luaL_checklstring
00003c  4681              MOV      r9,r0
;;;366        luaL_checktype(L, arg+1, LUA_TFUNCTION);
00003e  2206              MOVS     r2,#6
000040  9900              LDR      r1,[sp,#0]
000042  1c49              ADDS     r1,r1,#1
000044  4638              MOV      r0,r7
000046  f7fffffe          BL       luaL_checktype
;;;367        count = (int)luaL_optinteger(L, arg + 3, 0);
00004a  2200              MOVS     r2,#0
00004c  4613              MOV      r3,r2
00004e  9900              LDR      r1,[sp,#0]
000050  1cc9              ADDS     r1,r1,#3
000052  4638              MOV      r0,r7
000054  f7fffffe          BL       luaL_optinteger
000058  4605              MOV      r5,r0
;;;368        func = hookf; mask = makemask(smask, count);
00005a  4e28              LDR      r6,|L12.252|
00005c  4629              MOV      r1,r5
00005e  4648              MOV      r0,r9
000060  f7fffffe          BL       makemask
000064  4604              MOV      r4,r0
;;;369      }
000066  bf00              NOP      
                  |L12.104|
;;;370      if (lua_rawgetp(L, LUA_REGISTRYINDEX, &HOOKKEY) == LUA_TNIL) {
000068  4a25              LDR      r2,|L12.256|
00006a  4926              LDR      r1,|L12.260|
00006c  4638              MOV      r0,r7
00006e  f7fffffe          BL       lua_rawgetp
000072  bb10              CBNZ     r0,|L12.186|
;;;371        lua_createtable(L, 0, 2);  /* create a hook table */
000074  2202              MOVS     r2,#2
000076  2100              MOVS     r1,#0
000078  4638              MOV      r0,r7
00007a  f7fffffe          BL       lua_createtable
;;;372        lua_pushvalue(L, -1);
00007e  f04f31ff          MOV      r1,#0xffffffff
000082  4638              MOV      r0,r7
000084  f7fffffe          BL       lua_pushvalue
;;;373        lua_rawsetp(L, LUA_REGISTRYINDEX, &HOOKKEY);  /* set it in position */
000088  4a1d              LDR      r2,|L12.256|
00008a  491e              LDR      r1,|L12.260|
00008c  4638              MOV      r0,r7
00008e  f7fffffe          BL       lua_rawsetp
;;;374        lua_pushstring(L, "k");
000092  a11d              ADR      r1,|L12.264|
000094  4638              MOV      r0,r7
000096  f7fffffe          BL       lua_pushstring
;;;375        lua_setfield(L, -2, "__mode");  /** hooktable.__mode = "k" */
00009a  a21c              ADR      r2,|L12.268|
00009c  f06f0101          MVN      r1,#1
0000a0  4638              MOV      r0,r7
0000a2  f7fffffe          BL       lua_setfield
;;;376        lua_pushvalue(L, -1);
0000a6  f04f31ff          MOV      r1,#0xffffffff
0000aa  4638              MOV      r0,r7
0000ac  f7fffffe          BL       lua_pushvalue
;;;377        lua_setmetatable(L, -2);  /* setmetatable(hooktable) = hooktable */
0000b0  f06f0101          MVN      r1,#1
0000b4  4638              MOV      r0,r7
0000b6  f7fffffe          BL       lua_setmetatable
                  |L12.186|
;;;378      }
;;;379      checkstack(L, L1, 1);
0000ba  2201              MOVS     r2,#1
0000bc  4641              MOV      r1,r8
0000be  4638              MOV      r0,r7
0000c0  f7fffffe          BL       checkstack
;;;380      lua_pushthread(L1); lua_xmove(L1, L, 1);  /* key (thread) */
0000c4  4640              MOV      r0,r8
0000c6  f7fffffe          BL       lua_pushthread
0000ca  2201              MOVS     r2,#1
0000cc  4639              MOV      r1,r7
0000ce  4640              MOV      r0,r8
0000d0  f7fffffe          BL       lua_xmove
;;;381      lua_pushvalue(L, arg + 1);  /* value (hook function) */
0000d4  9900              LDR      r1,[sp,#0]
0000d6  1c49              ADDS     r1,r1,#1
0000d8  4638              MOV      r0,r7
0000da  f7fffffe          BL       lua_pushvalue
;;;382      lua_rawset(L, -3);  /* hooktable[L1] = new Lua hook */
0000de  f06f0102          MVN      r1,#2
0000e2  4638              MOV      r0,r7
0000e4  f7fffffe          BL       lua_rawset
;;;383      lua_sethook(L1, func, mask, count);
0000e8  462b              MOV      r3,r5
0000ea  4622              MOV      r2,r4
0000ec  4631              MOV      r1,r6
0000ee  4640              MOV      r0,r8
0000f0  f7fffffe          BL       lua_sethook
;;;384      return 0;
0000f4  2000              MOVS     r0,#0
;;;385    }
0000f6  e8bd83f8          POP      {r3-r9,pc}
;;;386    
                          ENDP

0000fa  0000              DCW      0x0000
                  |L12.252|
                          DCD      hookf
                  |L12.256|
                          DCD      HOOKKEY
                  |L12.260|
                          DCD      0xfff0b9d8
                  |L12.264|
000108  6b00              DCB      "k",0
00010a  00                DCB      0
00010b  00                DCB      0
                  |L12.268|
00010c  5f5f6d6f          DCB      "__mode",0
000110  646500  
000113  00                DCB      0

                          AREA ||i.db_setlocal||, CODE, READONLY, ALIGN=2

                  db_setlocal PROC
;;;232    
;;;233    static int db_setlocal (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  b09c              SUB      sp,sp,#0x70
000006  4605              MOV      r5,r0
;;;234      int arg;
;;;235      const char *name;
;;;236      lua_State *L1 = getthread(L, &arg);
000008  a91b              ADD      r1,sp,#0x6c
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       getthread
000010  4680              MOV      r8,r0
;;;237      lua_Debug ar;
;;;238      int level = (int)luaL_checkinteger(L, arg + 1);
000012  991b              LDR      r1,[sp,#0x6c]
000014  1c49              ADDS     r1,r1,#1
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       luaL_checkinteger
00001c  4606              MOV      r6,r0
;;;239      int nvar = (int)luaL_checkinteger(L, arg + 2);
00001e  991b              LDR      r1,[sp,#0x6c]
000020  1c89              ADDS     r1,r1,#2
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       luaL_checkinteger
000028  4607              MOV      r7,r0
;;;240      if (!lua_getstack(L1, level, &ar))  /* out of range? */
00002a  aa01              ADD      r2,sp,#4
00002c  4631              MOV      r1,r6
00002e  4640              MOV      r0,r8
000030  f7fffffe          BL       lua_getstack
000034  b940              CBNZ     r0,|L13.72|
;;;241        return luaL_argerror(L, arg+1, "level out of range");
000036  a217              ADR      r2,|L13.148|
000038  991b              LDR      r1,[sp,#0x6c]
00003a  1c49              ADDS     r1,r1,#1
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       luaL_argerror
                  |L13.66|
;;;242      luaL_checkany(L, arg+3);
;;;243      lua_settop(L, arg+3);
;;;244      checkstack(L, L1, 1);
;;;245      lua_xmove(L, L1, 1);
;;;246      name = lua_setlocal(L1, &ar, nvar);
;;;247      if (name == NULL)
;;;248        lua_pop(L1, 1);  /* pop value (if not popped by 'lua_setlocal') */
;;;249      lua_pushstring(L, name);
;;;250      return 1;
;;;251    }
000042  b01c              ADD      sp,sp,#0x70
000044  e8bd81f0          POP      {r4-r8,pc}
                  |L13.72|
000048  991b              LDR      r1,[sp,#0x6c]         ;242
00004a  1cc9              ADDS     r1,r1,#3              ;242
00004c  4628              MOV      r0,r5                 ;242
00004e  f7fffffe          BL       luaL_checkany
000052  991b              LDR      r1,[sp,#0x6c]         ;243
000054  1cc9              ADDS     r1,r1,#3              ;243
000056  4628              MOV      r0,r5                 ;243
000058  f7fffffe          BL       lua_settop
00005c  2201              MOVS     r2,#1                 ;244
00005e  4641              MOV      r1,r8                 ;244
000060  4628              MOV      r0,r5                 ;244
000062  f7fffffe          BL       checkstack
000066  2201              MOVS     r2,#1                 ;245
000068  4641              MOV      r1,r8                 ;245
00006a  4628              MOV      r0,r5                 ;245
00006c  f7fffffe          BL       lua_xmove
000070  463a              MOV      r2,r7                 ;246
000072  a901              ADD      r1,sp,#4              ;246
000074  4640              MOV      r0,r8                 ;246
000076  f7fffffe          BL       lua_setlocal
00007a  4604              MOV      r4,r0                 ;246
00007c  b924              CBNZ     r4,|L13.136|
00007e  f06f0101          MVN      r1,#1                 ;248
000082  4640              MOV      r0,r8                 ;248
000084  f7fffffe          BL       lua_settop
                  |L13.136|
000088  4621              MOV      r1,r4                 ;249
00008a  4628              MOV      r0,r5                 ;249
00008c  f7fffffe          BL       lua_pushstring
000090  2001              MOVS     r0,#1                 ;250
000092  e7d6              B        |L13.66|
;;;252    
                          ENDP

                  |L13.148|
000094  6c657665          DCB      "level out of range",0
000098  6c206f75
00009c  74206f66
0000a0  2072616e
0000a4  676500  
0000a7  00                DCB      0

                          AREA ||i.db_setmetatable||, CODE, READONLY, ALIGN=2

                  db_setmetatable PROC
;;;55     
;;;56     static int db_setmetatable (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;57       int t = lua_type(L, 2);
000004  2102              MOVS     r1,#2
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       lua_type
00000c  4604              MOV      r4,r0
;;;58       luaL_argcheck(L, t == LUA_TNIL || t == LUA_TTABLE, 2,
00000e  b134              CBZ      r4,|L14.30|
000010  2c05              CMP      r4,#5
000012  d004              BEQ      |L14.30|
000014  a207              ADR      r2,|L14.52|
000016  2102              MOVS     r1,#2
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       luaL_argerror
                  |L14.30|
;;;59                         "nil or table expected");
;;;60       lua_settop(L, 2);
00001e  2102              MOVS     r1,#2
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       lua_settop
;;;61       lua_setmetatable(L, 1);
000026  2101              MOVS     r1,#1
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       lua_setmetatable
;;;62       return 1;  /* return 1st argument */
00002e  2001              MOVS     r0,#1
;;;63     }
000030  bd70              POP      {r4-r6,pc}
;;;64     
                          ENDP

000032  0000              DCW      0x0000
                  |L14.52|
000034  6e696c20          DCB      "nil or table expected",0
000038  6f722074
00003c  61626c65
000040  20657870
000044  65637465
000048  6400    
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.db_setupvalue||, CODE, READONLY, ALIGN=1

                  db_setupvalue PROC
;;;273    
;;;274    static int db_setupvalue (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;275      luaL_checkany(L, 3);
000004  2103              MOVS     r1,#3
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       luaL_checkany
;;;276      return auxupvalue(L, 0);
00000c  2100              MOVS     r1,#0
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       auxupvalue
;;;277    }
000014  bd10              POP      {r4,pc}
;;;278    
                          ENDP


                          AREA ||i.db_setuservalue||, CODE, READONLY, ALIGN=1

                  db_setuservalue PROC
;;;77     
;;;78     static int db_setuservalue (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;79       int n = (int)luaL_optinteger(L, 3, 1);
000004  2201              MOVS     r2,#1
000006  2300              MOVS     r3,#0
000008  2103              MOVS     r1,#3
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       luaL_optinteger
000010  4605              MOV      r5,r0
;;;80       luaL_checktype(L, 1, LUA_TUSERDATA);
000012  2207              MOVS     r2,#7
000014  2101              MOVS     r1,#1
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       luaL_checktype
;;;81       luaL_checkany(L, 2);
00001c  2102              MOVS     r1,#2
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       luaL_checkany
;;;82       lua_settop(L, 2);
000024  2102              MOVS     r1,#2
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       lua_settop
;;;83       if (!lua_setiuservalue(L, 1, n))
00002c  462a              MOV      r2,r5
00002e  2101              MOVS     r1,#1
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       lua_setiuservalue
000036  b910              CBNZ     r0,|L16.62|
;;;84         lua_pushnil(L);
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       lua_pushnil
                  |L16.62|
;;;85       return 1;
00003e  2001              MOVS     r0,#1
;;;86     }
000040  bd70              POP      {r4-r6,pc}
;;;87     
                          ENDP


                          AREA ||i.db_traceback||, CODE, READONLY, ALIGN=1

                  db_traceback PROC
;;;425    
;;;426    static int db_traceback (lua_State *L) {
000000  e92d43f8          PUSH     {r3-r9,lr}
000004  4606              MOV      r6,r0
;;;427      int arg;
;;;428      lua_State *L1 = getthread(L, &arg);
000006  4669              MOV      r1,sp
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       getthread
00000e  4607              MOV      r7,r0
;;;429      const char *msg = lua_tostring(L, arg + 1);
000010  2200              MOVS     r2,#0
000012  9900              LDR      r1,[sp,#0]
000014  1c49              ADDS     r1,r1,#1
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       lua_tolstring
00001c  4680              MOV      r8,r0
;;;430      if (msg == NULL && !lua_isnoneornil(L, arg + 1))  /* non-string 'msg'? */
00001e  f1b80f00          CMP      r8,#0
000022  d10c              BNE      |L17.62|
000024  9900              LDR      r1,[sp,#0]
000026  1c49              ADDS     r1,r1,#1
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       lua_type
00002e  2800              CMP      r0,#0
000030  dd05              BLE      |L17.62|
;;;431        lua_pushvalue(L, arg + 1);  /* return it untouched */
000032  9900              LDR      r1,[sp,#0]
000034  1c49              ADDS     r1,r1,#1
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       lua_pushvalue
00003c  e013              B        |L17.102|
                  |L17.62|
;;;432      else {
;;;433        int level = (int)luaL_optinteger(L, arg + 2, (L == L1) ? 1 : 0);
00003e  42be              CMP      r6,r7
000040  d101              BNE      |L17.70|
000042  2201              MOVS     r2,#1
000044  e000              B        |L17.72|
                  |L17.70|
000046  2200              MOVS     r2,#0
                  |L17.72|
000048  17d3              ASRS     r3,r2,#31
00004a  4614              MOV      r4,r2
00004c  9900              LDR      r1,[sp,#0]
00004e  1c89              ADDS     r1,r1,#2
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       luaL_optinteger
000056  4681              MOV      r9,r0
;;;434        luaL_traceback(L, L1, msg, level);
000058  464b              MOV      r3,r9
00005a  4642              MOV      r2,r8
00005c  4639              MOV      r1,r7
00005e  4630              MOV      r0,r6
000060  f7fffffe          BL       luaL_traceback
;;;435      }
000064  bf00              NOP      
                  |L17.102|
;;;436      return 1;
000066  2001              MOVS     r0,#1
;;;437    }
000068  e8bd83f8          POP      {r3-r9,pc}
;;;438    
                          ENDP


                          AREA ||i.db_upvalueid||, CODE, READONLY, ALIGN=1

                  db_upvalueid PROC
;;;292    
;;;293    static int db_upvalueid (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;294      int n = checkupval(L, 1, 2);
000004  2202              MOVS     r2,#2
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       checkupval
00000e  4605              MOV      r5,r0
;;;295      lua_pushlightuserdata(L, lua_upvalueid(L, 1, n));
000010  462a              MOV      r2,r5
000012  2101              MOVS     r1,#1
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       lua_upvalueid
00001a  4606              MOV      r6,r0
00001c  4631              MOV      r1,r6
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       lua_pushlightuserdata
;;;296      return 1;
000024  2001              MOVS     r0,#1
;;;297    }
000026  bd70              POP      {r4-r6,pc}
;;;298    
                          ENDP


                          AREA ||i.db_upvaluejoin||, CODE, READONLY, ALIGN=2

                  db_upvaluejoin PROC
;;;299    
;;;300    static int db_upvaluejoin (lua_State *L) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4604              MOV      r4,r0
;;;301      int n1 = checkupval(L, 1, 2);
000004  2202              MOVS     r2,#2
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       checkupval
00000e  4606              MOV      r6,r0
;;;302      int n2 = checkupval(L, 3, 4);
000010  2204              MOVS     r2,#4
000012  2103              MOVS     r1,#3
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       checkupval
00001a  4605              MOV      r5,r0
;;;303      luaL_argcheck(L, !lua_iscfunction(L, 1), 1, "Lua function expected");
00001c  2101              MOVS     r1,#1
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       lua_iscfunction
000024  b120              CBZ      r0,|L19.48|
000026  a20c              ADR      r2,|L19.88|
000028  2101              MOVS     r1,#1
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       luaL_argerror
                  |L19.48|
;;;304      luaL_argcheck(L, !lua_iscfunction(L, 3), 3, "Lua function expected");
000030  2103              MOVS     r1,#3
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       lua_iscfunction
000038  b120              CBZ      r0,|L19.68|
00003a  a207              ADR      r2,|L19.88|
00003c  2103              MOVS     r1,#3
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       luaL_argerror
                  |L19.68|
;;;305      lua_upvaluejoin(L, 1, n1, 3, n2);
000044  2303              MOVS     r3,#3
000046  4632              MOV      r2,r6
000048  2101              MOVS     r1,#1
00004a  4620              MOV      r0,r4
00004c  9500              STR      r5,[sp,#0]
00004e  f7fffffe          BL       lua_upvaluejoin
;;;306      return 0;
000052  2000              MOVS     r0,#0
;;;307    }
000054  bdf8              POP      {r3-r7,pc}
;;;308    
                          ENDP

000056  0000              DCW      0x0000
                  |L19.88|
000058  4c756120          DCB      "Lua function expected",0
00005c  66756e63
000060  74696f6e
000064  20657870
000068  65637465
00006c  6400    
00006e  00                DCB      0
00006f  00                DCB      0

                          AREA ||i.getthread||, CODE, READONLY, ALIGN=1

                  getthread PROC
;;;94     */
;;;95     static lua_State *getthread (lua_State *L, int *arg) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;96       if (lua_isthread(L, 1)) {
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       lua_type
00000e  2808              CMP      r0,#8
000010  d106              BNE      |L20.32|
;;;97         *arg = 1;
000012  2001              MOVS     r0,#1
000014  6020              STR      r0,[r4,#0]
;;;98         return lua_tothread(L, 1);
000016  2101              MOVS     r1,#1
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       lua_tothread
                  |L20.30|
;;;99       }
;;;100      else {
;;;101        *arg = 0;
;;;102        return L;  /* function will operate over current thread */
;;;103      }
;;;104    }
00001e  bd70              POP      {r4-r6,pc}
                  |L20.32|
000020  2000              MOVS     r0,#0                 ;101
000022  6020              STR      r0,[r4,#0]            ;101
000024  4628              MOV      r0,r5                 ;102
000026  e7fa              B        |L20.30|
;;;105    
                          ENDP


                          AREA ||i.hookf||, CODE, READONLY, ALIGN=2

                  hookf PROC
;;;313    */
;;;314    static void hookf (lua_State *L, lua_Debug *ar) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;315      static const char *const hooknames[] =
;;;316        {"call", "return", "line", "count", "tail call"};
;;;317      lua_rawgetp(L, LUA_REGISTRYINDEX, &HOOKKEY);
000006  4a16              LDR      r2,|L21.96|
000008  4916              LDR      r1,|L21.100|
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       lua_rawgetp
;;;318      lua_pushthread(L);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       lua_pushthread
;;;319      if (lua_rawget(L, -2) == LUA_TFUNCTION) {  /* is there a hook function? */
000016  f06f0101          MVN      r1,#1
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       lua_rawget
000020  2806              CMP      r0,#6
000022  d11c              BNE      |L21.94|
;;;320        lua_pushstring(L, hooknames[(int)ar->event]);  /* push event name */
000024  4a10              LDR      r2,|L21.104|
000026  6820              LDR      r0,[r4,#0]
000028  f8521020          LDR      r1,[r2,r0,LSL #2]
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       lua_pushstring
;;;321        if (ar->currentline >= 0)
000032  6960              LDR      r0,[r4,#0x14]
000034  2800              CMP      r0,#0
000036  db07              BLT      |L21.72|
;;;322          lua_pushinteger(L, ar->currentline);  /* push current line */
000038  6960              LDR      r0,[r4,#0x14]
00003a  17c3              ASRS     r3,r0,#31
00003c  4606              MOV      r6,r0
00003e  4632              MOV      r2,r6
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       lua_pushinteger
000046  e002              B        |L21.78|
                  |L21.72|
;;;323        else lua_pushnil(L);
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       lua_pushnil
                  |L21.78|
;;;324        lua_assert(lua_getinfo(L, "lS", ar));
;;;325        lua_call(L, 2, 0);  /* call hook function */
00004e  2000              MOVS     r0,#0
000050  4603              MOV      r3,r0
000052  4602              MOV      r2,r0
000054  2102              MOVS     r1,#2
000056  9000              STR      r0,[sp,#0]
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       lua_callk
                  |L21.94|
;;;326      }
;;;327    }
00005e  bdf8              POP      {r3-r7,pc}
;;;328    
                          ENDP

                  |L21.96|
                          DCD      HOOKKEY
                  |L21.100|
                          DCD      0xfff0b9d8
                  |L21.104|
                          DCD      hooknames

                          AREA ||i.luaopen_debug||, CODE, READONLY, ALIGN=2

                  luaopen_debug PROC
;;;460    
;;;461    LUAMOD_API int luaopen_debug (lua_State *L) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;462      luaL_newlib(L, dblib);
000004  2088              MOVS     r0,#0x88
000006  2200              MOVS     r2,#0
000008  4b08              LDR      r3,|L22.44|
00000a  9000              STR      r0,[sp,#0]
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       luaL_checkversion_
000012  2210              MOVS     r2,#0x10
000014  2100              MOVS     r1,#0
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       lua_createtable
00001c  2200              MOVS     r2,#0
00001e  4904              LDR      r1,|L22.48|
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       luaL_setfuncs
;;;463      return 1;
000026  2001              MOVS     r0,#1
;;;464    }
000028  bd38              POP      {r3-r5,pc}
;;;465    
                          ENDP

00002a  0000              DCW      0x0000
                  |L22.44|
                          DCD      0x407f8000
                  |L22.48|
                          DCD      dblib

                          AREA ||i.makemask||, CODE, READONLY, ALIGN=1

                  makemask PROC
;;;332    */
;;;333    static int makemask (const char *smask, int count) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;334      int mask = 0;
000006  2400              MOVS     r4,#0
;;;335      if (strchr(smask, 'c')) mask |= LUA_MASKCALL;
000008  2163              MOVS     r1,#0x63
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       strchr
000010  b108              CBZ      r0,|L23.22|
000012  f0440401          ORR      r4,r4,#1
                  |L23.22|
;;;336      if (strchr(smask, 'r')) mask |= LUA_MASKRET;
000016  2172              MOVS     r1,#0x72
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       strchr
00001e  b108              CBZ      r0,|L23.36|
000020  f0440402          ORR      r4,r4,#2
                  |L23.36|
;;;337      if (strchr(smask, 'l')) mask |= LUA_MASKLINE;
000024  216c              MOVS     r1,#0x6c
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       strchr
00002c  b108              CBZ      r0,|L23.50|
00002e  f0440404          ORR      r4,r4,#4
                  |L23.50|
;;;338      if (count > 0) mask |= LUA_MASKCOUNT;
000032  2d00              CMP      r5,#0
000034  dd01              BLE      |L23.58|
000036  f0440408          ORR      r4,r4,#8
                  |L23.58|
;;;339      return mask;
00003a  4620              MOV      r0,r4
;;;340    }
00003c  bd70              POP      {r4-r6,pc}
;;;341    
                          ENDP


                          AREA ||i.settabsb||, CODE, READONLY, ALIGN=1

                  settabsb PROC
;;;121    
;;;122    static void settabsb (lua_State *L, const char *k, int v) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;123      lua_pushboolean(L, v);
000008  4629              MOV      r1,r5
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       lua_pushboolean
;;;124      lua_setfield(L, -2, k);
000010  4622              MOV      r2,r4
000012  f06f0101          MVN      r1,#1
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       lua_setfield
;;;125    }
00001c  bd70              POP      {r4-r6,pc}
;;;126    
                          ENDP


                          AREA ||i.settabsi||, CODE, READONLY, ALIGN=1

                  settabsi PROC
;;;116    
;;;117    static void settabsi (lua_State *L, const char *k, int v) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;118      lua_pushinteger(L, v);
000008  4622              MOV      r2,r4
00000a  17e3              ASRS     r3,r4,#31
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lua_pushinteger
;;;119      lua_setfield(L, -2, k);
000012  462a              MOV      r2,r5
000014  f06f0101          MVN      r1,#1
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lua_setfield
;;;120    }
00001e  bd70              POP      {r4-r6,pc}
;;;121    
                          ENDP


                          AREA ||i.settabss||, CODE, READONLY, ALIGN=1

                  settabss PROC
;;;111    */
;;;112    static void settabss (lua_State *L, const char *k, const char *v) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;113      lua_pushstring(L, v);
000008  4629              MOV      r1,r5
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       lua_pushstring
;;;114      lua_setfield(L, -2, k);
000010  4622              MOV      r2,r4
000012  f06f0101          MVN      r1,#1
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       lua_setfield
;;;115    }
00001c  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.treatstackoption||, CODE, READONLY, ALIGN=1

                  treatstackoption PROC
;;;134    */
;;;135    static void treatstackoption (lua_State *L, lua_State *L1, const char *fname) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;136      if (L == L1)
000008  42ac              CMP      r4,r5
00000a  d105              BNE      |L27.24|
;;;137        lua_rotate(L, -2, 1);  /* exchange object and table */
00000c  2201              MOVS     r2,#1
00000e  1ed1              SUBS     r1,r2,#3
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       lua_rotate
000016  e004              B        |L27.34|
                  |L27.24|
;;;138      else
;;;139        lua_xmove(L1, L, 1);  /* move object to the "main" stack */
000018  2201              MOVS     r2,#1
00001a  4621              MOV      r1,r4
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       lua_xmove
                  |L27.34|
;;;140      lua_setfield(L, -2, fname);  /* put object into table */
000022  4632              MOV      r2,r6
000024  f06f0101          MVN      r1,#1
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       lua_setfield
;;;141    }
00002e  bd70              POP      {r4-r6,pc}
;;;142    
                          ENDP


                          AREA ||i.unmakemask||, CODE, READONLY, ALIGN=1

                  unmakemask PROC
;;;345    */
;;;346    static char *unmakemask (int mask, char *smask) {
000000  b530              PUSH     {r4,r5,lr}
000002  4602              MOV      r2,r0
;;;347      int i = 0;
000004  2300              MOVS     r3,#0
;;;348      if (mask & LUA_MASKCALL) smask[i++] = 'c';
000006  f0020001          AND      r0,r2,#1
00000a  b118              CBZ      r0,|L28.20|
00000c  2563              MOVS     r5,#0x63
00000e  4618              MOV      r0,r3
000010  1c5b              ADDS     r3,r3,#1
000012  540d              STRB     r5,[r1,r0]
                  |L28.20|
;;;349      if (mask & LUA_MASKRET) smask[i++] = 'r';
000014  f0020002          AND      r0,r2,#2
000018  b118              CBZ      r0,|L28.34|
00001a  2572              MOVS     r5,#0x72
00001c  4618              MOV      r0,r3
00001e  1c5b              ADDS     r3,r3,#1
000020  540d              STRB     r5,[r1,r0]
                  |L28.34|
;;;350      if (mask & LUA_MASKLINE) smask[i++] = 'l';
000022  f0020004          AND      r0,r2,#4
000026  b118              CBZ      r0,|L28.48|
000028  256c              MOVS     r5,#0x6c
00002a  4618              MOV      r0,r3
00002c  1c5b              ADDS     r3,r3,#1
00002e  540d              STRB     r5,[r1,r0]
                  |L28.48|
;;;351      smask[i] = '\0';
000030  2000              MOVS     r0,#0
000032  54c8              STRB     r0,[r1,r3]
;;;352      return smask;
000034  4608              MOV      r0,r1
;;;353    }
000036  bd30              POP      {r4,r5,pc}
;;;354    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  HOOKKEY
                          DCD      0x00000000
                  dblib
                          DCD      ||.conststring||
                          DCD      db_debug
                          DCD      ||.conststring||+0x8
                          DCD      db_getuservalue
                          DCD      ||.conststring||+0x18
                          DCD      db_gethook
                          DCD      ||.conststring||+0x20
                          DCD      db_getinfo
                          DCD      ||.conststring||+0x28
                          DCD      db_getlocal
                          DCD      ||.conststring||+0x34
                          DCD      db_getregistry
                          DCD      ||.conststring||+0x40
                          DCD      db_getmetatable
                          DCD      ||.conststring||+0x50
                          DCD      db_getupvalue
                          DCD      ||.conststring||+0x5c
                          DCD      db_upvaluejoin
                          DCD      ||.conststring||+0x68
                          DCD      db_upvalueid
                          DCD      ||.conststring||+0x74
                          DCD      db_setuservalue
                          DCD      ||.conststring||+0x84
                          DCD      db_sethook
                          DCD      ||.conststring||+0x8c
                          DCD      db_setlocal
                          DCD      ||.conststring||+0x98
                          DCD      db_setmetatable
                          DCD      ||.conststring||+0xa8
                          DCD      db_setupvalue
                          DCD      ||.conststring||+0xb4
                          DCD      db_traceback
                          DCD      0x00000000
                          DCD      0x00000000
                  hooknames
                          DCD      ||.conststring||+0xc0
                          DCD      ||.conststring||+0xc8
                          DCD      ||.conststring||+0xd0
                          DCD      ||.conststring||+0xd8
                          DCD      ||.conststring||+0xe0

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  64656275          DCB      "debug",0
000004  6700    
000006  00                DCB      0
000007  00                DCB      0
000008  67657475          DCB      "getuservalue",0
00000c  73657276
000010  616c7565
000014  00      
000015  00                DCB      0
000016  00                DCB      0
000017  00                DCB      0
000018  67657468          DCB      "gethook",0
00001c  6f6f6b00
000020  67657469          DCB      "getinfo",0
000024  6e666f00
000028  6765746c          DCB      "getlocal",0
00002c  6f63616c
000030  00      
000031  00                DCB      0
000032  00                DCB      0
000033  00                DCB      0
000034  67657472          DCB      "getregistry",0
000038  65676973
00003c  74727900
000040  6765746d          DCB      "getmetatable",0
000044  65746174
000048  61626c65
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0
000050  67657475          DCB      "getupvalue",0
000054  7076616c
000058  756500  
00005b  00                DCB      0
00005c  75707661          DCB      "upvaluejoin",0
000060  6c75656a
000064  6f696e00
000068  75707661          DCB      "upvalueid",0
00006c  6c756569
000070  6400    
000072  00                DCB      0
000073  00                DCB      0
000074  73657475          DCB      "setuservalue",0
000078  73657276
00007c  616c7565
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
000084  73657468          DCB      "sethook",0
000088  6f6f6b00
00008c  7365746c          DCB      "setlocal",0
000090  6f63616c
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
000098  7365746d          DCB      "setmetatable",0
00009c  65746174
0000a0  61626c65
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
0000a8  73657475          DCB      "setupvalue",0
0000ac  7076616c
0000b0  756500  
0000b3  00                DCB      0
0000b4  74726163          DCB      "traceback",0
0000b8  65626163
0000bc  6b00    
0000be  00                DCB      0
0000bf  00                DCB      0
0000c0  63616c6c          DCB      "call",0
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
0000c8  72657475          DCB      "return",0
0000cc  726e00  
0000cf  00                DCB      0
0000d0  6c696e65          DCB      "line",0
0000d4  00      
0000d5  00                DCB      0
0000d6  00                DCB      0
0000d7  00                DCB      0
0000d8  636f756e          DCB      "count",0
0000dc  7400    
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  7461696c          DCB      "tail call",0
0000e4  2063616c
0000e8  6c00    
