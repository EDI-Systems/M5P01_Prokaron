; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\lfunc.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\lfunc.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\lfunc.crf ..\..\..\M6P1(L)_Lua\lua\lfunc.c]
                          THUMB

                          AREA ||i.luaF_close||, CODE, READONLY, ALIGN=1

                  luaF_close PROC
;;;93     
;;;94     void luaF_close (lua_State *L, StkId level) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;95       UpVal *uv;
;;;96       while (L->openupval != NULL &&
000008  e02a              B        |L1.96|
                  |L1.10|
;;;97             (uv = L->openupval, uplevel(uv) >= level)) {
;;;98         TValue *slot = &uv->u.value;  /* new position for value */
00000a  f1040510          ADD      r5,r4,#0x10
;;;99         luaF_unlinkupval(uv);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       luaF_unlinkupval
;;;100        setobj(L, slot, uv->v);  /* move value to upvalue slot */
000014  4628              MOV      r0,r5
000016  68a1              LDR      r1,[r4,#8]
000018  e9d12300          LDRD     r2,r3,[r1,#0]
00001c  e9c02300          STRD     r2,r3,[r0,#0]
000020  7a0a              LDRB     r2,[r1,#8]
000022  7202              STRB     r2,[r0,#8]
;;;101        uv->v = slot;  /* now current value lives here */
000024  60a5              STR      r5,[r4,#8]
;;;102        if (!iswhite(uv))
000026  7960              LDRB     r0,[r4,#5]
000028  f0000018          AND      r0,r0,#0x18
00002c  b918              CBNZ     r0,|L1.54|
;;;103          gray2black(uv);  /* closed upvalues cannot be gray */
00002e  7960              LDRB     r0,[r4,#5]
000030  f0400020          ORR      r0,r0,#0x20
000034  7160              STRB     r0,[r4,#5]
                  |L1.54|
;;;104        luaC_barrier(L, uv, slot);
000036  7a28              LDRB     r0,[r5,#8]
000038  f0000040          AND      r0,r0,#0x40
00003c  b170              CBZ      r0,|L1.92|
00003e  7960              LDRB     r0,[r4,#5]
000040  f0000020          AND      r0,r0,#0x20
000044  b150              CBZ      r0,|L1.92|
000046  6828              LDR      r0,[r5,#0]
000048  7940              LDRB     r0,[r0,#5]
00004a  f0000018          AND      r0,r0,#0x18
00004e  b128              CBZ      r0,|L1.92|
000050  4621              MOV      r1,r4
000052  4630              MOV      r0,r6
000054  682a              LDR      r2,[r5,#0]
000056  f7fffffe          BL       luaC_barrier_
00005a  e000              B        |L1.94|
                  |L1.92|
00005c  bf00              NOP      
                  |L1.94|
;;;105      }
00005e  bf00              NOP      
                  |L1.96|
000060  6a70              LDR      r0,[r6,#0x24]         ;96
000062  b140              CBZ      r0,|L1.118|
000064  6a74              LDR      r4,[r6,#0x24]         ;97
000066  68a0              LDR      r0,[r4,#8]            ;97
000068  42b8              CMP      r0,r7                 ;97
00006a  d301              BCC      |L1.112|
00006c  2001              MOVS     r0,#1                 ;97
00006e  e000              B        |L1.114|
                  |L1.112|
000070  2000              MOVS     r0,#0                 ;97
                  |L1.114|
000072  2800              CMP      r0,#0                 ;97
000074  d1c9              BNE      |L1.10|
                  |L1.118|
;;;106    }
000076  e8bd81f0          POP      {r4-r8,pc}
;;;107    
                          ENDP


                          AREA ||i.luaF_findupval||, CODE, READONLY, ALIGN=1

                  luaF_findupval PROC
;;;57     
;;;58     UpVal *luaF_findupval (lua_State *L, StkId level) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
;;;59       UpVal **pp = &L->openupval;
000008  f1040924          ADD      r9,r4,#0x24
;;;60       GCObject *o;
;;;61       UpVal *p;
;;;62       UpVal *uv;
;;;63       lua_assert(isintwups(L) || L->openupval == NULL);
;;;64       while ((p = *pp) != NULL && uplevel(p) >= level) {
00000c  e00f              B        |L2.46|
                  |L2.14|
;;;65         if (uplevel(p) == level && !isdead(G(L), p))  /* corresponding upvalue? */
00000e  68a8              LDR      r0,[r5,#8]
000010  4540              CMP      r0,r8
000012  d10a              BNE      |L2.42|
000014  7968              LDRB     r0,[r5,#5]
000016  6921              LDR      r1,[r4,#0x10]
000018  f8911034          LDRB     r1,[r1,#0x34]
00001c  f0810118          EOR      r1,r1,#0x18
000020  4008              ANDS     r0,r0,r1
000022  b910              CBNZ     r0,|L2.42|
;;;66           return p;  /* return it */
000024  4628              MOV      r0,r5
                  |L2.38|
;;;67         pp = &p->u.open.next;
;;;68       }
;;;69       /* not found: create a new upvalue between 'pp' and 'p' */
;;;70       o = luaC_newobj(L, LUA_TUPVAL, sizeof(UpVal));
;;;71       uv = gco2upv(o);
;;;72       uv->u.open.next = p;  /* link it to list of open upvalues */
;;;73       uv->u.open.previous = pp;
;;;74       if (p)
;;;75         p->u.open.previous = &uv->u.open.next;
;;;76       *pp = uv;
;;;77       uv->v = s2v(level);  /* current value lives in the stack */
;;;78       if (!isintwups(L)) {  /* thread not in list of threads with upvalues? */
;;;79         L->twups = G(L)->twups;  /* link it to the list */
;;;80         G(L)->twups = L;
;;;81       }
;;;82       return uv;
;;;83     }
000026  e8bd87f0          POP      {r4-r10,pc}
                  |L2.42|
00002a  f1050910          ADD      r9,r5,#0x10           ;67
                  |L2.46|
00002e  f8d95000          LDR      r5,[r9,#0]            ;64
000032  b115              CBZ      r5,|L2.58|
000034  68a8              LDR      r0,[r5,#8]            ;64
000036  4540              CMP      r0,r8                 ;64
000038  d2e9              BCS      |L2.14|
                  |L2.58|
00003a  2220              MOVS     r2,#0x20              ;70
00003c  2109              MOVS     r1,#9                 ;70
00003e  4620              MOV      r0,r4                 ;70
000040  f7fffffe          BL       luaC_newobj
000044  4607              MOV      r7,r0                 ;70
000046  463e              MOV      r6,r7                 ;71
000048  6135              STR      r5,[r6,#0x10]         ;72
00004a  f8c69014          STR      r9,[r6,#0x14]         ;73
00004e  b115              CBZ      r5,|L2.86|
000050  f1060010          ADD      r0,r6,#0x10           ;75
000054  6168              STR      r0,[r5,#0x14]         ;75
                  |L2.86|
000056  f8c96000          STR      r6,[r9,#0]            ;76
00005a  f8c68008          STR      r8,[r6,#8]            ;77
00005e  6ae0              LDR      r0,[r4,#0x2c]         ;78
000060  42a0              CMP      r0,r4                 ;78
000062  d106              BNE      |L2.114|
000064  6920              LDR      r0,[r4,#0x10]         ;79
000066  f8d00084          LDR      r0,[r0,#0x84]         ;79
00006a  62e0              STR      r0,[r4,#0x2c]         ;79
00006c  6920              LDR      r0,[r4,#0x10]         ;80
00006e  f8c04084          STR      r4,[r0,#0x84]         ;80
                  |L2.114|
000072  4630              MOV      r0,r6                 ;82
000074  e7d7              B        |L2.38|
;;;84     
                          ENDP


                          AREA ||i.luaF_freeproto||, CODE, READONLY, ALIGN=1

                  luaF_freeproto PROC
;;;137    
;;;138    void luaF_freeproto (lua_State *L, Proto *f) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;139      luaM_freearray(L, f->code, f->sizecode);
000006  6960              LDR      r0,[r4,#0x14]
000008  0082              LSLS     r2,r0,#2
00000a  4628              MOV      r0,r5
00000c  6ba1              LDR      r1,[r4,#0x38]
00000e  f7fffffe          BL       luaM_free_
;;;140      luaM_freearray(L, f->p, f->sizep);
000012  69e0              LDR      r0,[r4,#0x1c]
000014  0082              LSLS     r2,r0,#2
000016  4628              MOV      r0,r5
000018  6be1              LDR      r1,[r4,#0x3c]
00001a  f7fffffe          BL       luaM_free_
;;;141      luaM_freearray(L, f->k, f->sizek);
00001e  6920              LDR      r0,[r4,#0x10]
000020  0102              LSLS     r2,r0,#4
000022  4628              MOV      r0,r5
000024  6b21              LDR      r1,[r4,#0x30]
000026  f7fffffe          BL       luaM_free_
;;;142      luaM_freearray(L, f->lineinfo, f->sizelineinfo);
00002a  4628              MOV      r0,r5
00002c  69a2              LDR      r2,[r4,#0x18]
00002e  6c61              LDR      r1,[r4,#0x44]
000030  f7fffffe          BL       luaM_free_
;;;143      luaM_freearray(L, f->abslineinfo, f->sizeabslineinfo);
000034  6a60              LDR      r0,[r4,#0x24]
000036  00c2              LSLS     r2,r0,#3
000038  4628              MOV      r0,r5
00003a  6ca1              LDR      r1,[r4,#0x48]
00003c  f7fffffe          BL       luaM_free_
;;;144      luaM_freearray(L, f->locvars, f->sizelocvars);
000040  6a20              LDR      r0,[r4,#0x20]
000042  eb000040          ADD      r0,r0,r0,LSL #1
000046  0082              LSLS     r2,r0,#2
000048  4628              MOV      r0,r5
00004a  6ce1              LDR      r1,[r4,#0x4c]
00004c  f7fffffe          BL       luaM_free_
;;;145      luaM_freearray(L, f->upvalues, f->sizeupvalues);
000050  68e0              LDR      r0,[r4,#0xc]
000052  00c2              LSLS     r2,r0,#3
000054  4628              MOV      r0,r5
000056  6c21              LDR      r1,[r4,#0x40]
000058  f7fffffe          BL       luaM_free_
;;;146      luaM_free(L, f);
00005c  2258              MOVS     r2,#0x58
00005e  4621              MOV      r1,r4
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       luaM_free_
;;;147    }
000066  bd70              POP      {r4-r6,pc}
;;;148    
                          ENDP


                          AREA ||i.luaF_getlocalname||, CODE, READONLY, ALIGN=1

                  luaF_getlocalname PROC
;;;153    */
;;;154    const char *luaF_getlocalname (const Proto *f, int local_number, int pc) {
000000  b530              PUSH     {r4,r5,lr}
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;155      int i;
;;;156      for (i = 0; i<f->sizelocvars && f->locvars[i].startpc <= pc; i++) {
000006  2100              MOVS     r1,#0
000008  e011              B        |L4.46|
                  |L4.10|
;;;157        if (pc < f->locvars[i].endpc) {  /* is variable active? */
00000a  eb010541          ADD      r5,r1,r1,LSL #1
00000e  6cd8              LDR      r0,[r3,#0x4c]
000010  eb000085          ADD      r0,r0,r5,LSL #2
000014  6880              LDR      r0,[r0,#8]
000016  4290              CMP      r0,r2
000018  dd08              BLE      |L4.44|
;;;158          local_number--;
00001a  1e64              SUBS     r4,r4,#1
;;;159          if (local_number == 0)
00001c  b934              CBNZ     r4,|L4.44|
;;;160            return getstr(f->locvars[i].varname);
00001e  eb010541          ADD      r5,r1,r1,LSL #1
000022  6cd8              LDR      r0,[r3,#0x4c]
000024  f8500025          LDR      r0,[r0,r5,LSL #2]
000028  3010              ADDS     r0,r0,#0x10
                  |L4.42|
;;;161        }
;;;162      }
;;;163      return NULL;  /* not found */
;;;164    }
00002a  bd30              POP      {r4,r5,pc}
                  |L4.44|
00002c  1c49              ADDS     r1,r1,#1              ;156
                  |L4.46|
00002e  6a18              LDR      r0,[r3,#0x20]         ;156
000030  4288              CMP      r0,r1                 ;156
000032  dd07              BLE      |L4.68|
000034  eb010541          ADD      r5,r1,r1,LSL #1       ;156
000038  6cd8              LDR      r0,[r3,#0x4c]         ;156
00003a  eb000085          ADD      r0,r0,r5,LSL #2       ;156
00003e  6840              LDR      r0,[r0,#4]            ;156
000040  4290              CMP      r0,r2                 ;156
000042  dde2              BLE      |L4.10|
                  |L4.68|
000044  2000              MOVS     r0,#0                 ;163
000046  e7f0              B        |L4.42|
;;;165    
                          ENDP


                          AREA ||i.luaF_initupvals||, CODE, READONLY, ALIGN=1

                  luaF_initupvals PROC
;;;44     */
;;;45     void luaF_initupvals (lua_State *L, LClosure *cl) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
;;;46       int i;
;;;47       for (i = 0; i < cl->nupvalues; i++) {
000008  2700              MOVS     r7,#0
00000a  e020              B        |L5.78|
                  |L5.12|
;;;48         GCObject *o = luaC_newobj(L, LUA_TUPVAL, sizeof(UpVal));
00000c  2220              MOVS     r2,#0x20
00000e  2109              MOVS     r1,#9
000010  4640              MOV      r0,r8
000012  f7fffffe          BL       luaC_newobj
000016  4604              MOV      r4,r0
;;;49         UpVal *uv = gco2upv(o);
000018  4626              MOV      r6,r4
;;;50         uv->v = &uv->u.value;  /* make it closed */
00001a  f1060010          ADD      r0,r6,#0x10
00001e  60b0              STR      r0,[r6,#8]
;;;51         setnilvalue(uv->v);
000020  2000              MOVS     r0,#0
000022  68b1              LDR      r1,[r6,#8]
000024  7208              STRB     r0,[r1,#8]
;;;52         cl->upvals[i] = uv;
000026  f1050010          ADD      r0,r5,#0x10
00002a  f8406027          STR      r6,[r0,r7,LSL #2]
;;;53         luaC_objbarrier(L, cl, o);
00002e  7968              LDRB     r0,[r5,#5]
000030  f0000020          AND      r0,r0,#0x20
000034  b148              CBZ      r0,|L5.74|
000036  7960              LDRB     r0,[r4,#5]
000038  f0000018          AND      r0,r0,#0x18
00003c  b128              CBZ      r0,|L5.74|
00003e  4622              MOV      r2,r4
000040  4629              MOV      r1,r5
000042  4640              MOV      r0,r8
000044  f7fffffe          BL       luaC_barrier_
000048  e000              B        |L5.76|
                  |L5.74|
00004a  bf00              NOP      
                  |L5.76|
00004c  1c7f              ADDS     r7,r7,#1              ;47
                  |L5.78|
00004e  79a8              LDRB     r0,[r5,#6]            ;47
000050  42b8              CMP      r0,r7                 ;47
000052  dcdb              BGT      |L5.12|
;;;54       }
;;;55     }
000054  e8bd81f0          POP      {r4-r8,pc}
;;;56     
                          ENDP


                          AREA ||i.luaF_newCclosure||, CODE, READONLY, ALIGN=1

                  luaF_newCclosure PROC
;;;24     
;;;25     CClosure *luaF_newCclosure (lua_State *L, int n) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
;;;26       GCObject *o = luaC_newobj(L, LUA_TCCL, sizeCclosure(n));
000008  0120              LSLS     r0,r4,#4
00000a  f1000210          ADD      r2,r0,#0x10
00000e  2136              MOVS     r1,#0x36
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       luaC_newobj
000016  4605              MOV      r5,r0
;;;27       CClosure *c = gco2ccl(o);
000018  462e              MOV      r6,r5
;;;28       c->nupvalues = cast_byte(n);
00001a  71b4              STRB     r4,[r6,#6]
;;;29       return c;
00001c  4630              MOV      r0,r6
;;;30     }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;31     
                          ENDP


                          AREA ||i.luaF_newLclosure||, CODE, READONLY, ALIGN=1

                  luaF_newLclosure PROC
;;;32     
;;;33     LClosure *luaF_newLclosure (lua_State *L, int n) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
;;;34       GCObject *o = luaC_newobj(L, LUA_TLCL, sizeLclosure(n));
000008  00a0              LSLS     r0,r4,#2
00000a  f1000210          ADD      r2,r0,#0x10
00000e  2116              MOVS     r1,#0x16
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       luaC_newobj
000016  4606              MOV      r6,r0
;;;35       LClosure *c = gco2lcl(o);
000018  4635              MOV      r5,r6
;;;36       c->p = NULL;
00001a  2000              MOVS     r0,#0
00001c  60e8              STR      r0,[r5,#0xc]
;;;37       c->nupvalues = cast_byte(n);
00001e  71ac              STRB     r4,[r5,#6]
;;;38       while (n--) c->upvals[n] = NULL;
000020  e004              B        |L7.44|
                  |L7.34|
000022  2100              MOVS     r1,#0
000024  f1050010          ADD      r0,r5,#0x10
000028  f8401024          STR      r1,[r0,r4,LSL #2]
                  |L7.44|
00002c  1e20              SUBS     r0,r4,#0
00002e  f1a40401          SUB      r4,r4,#1
000032  d1f6              BNE      |L7.34|
;;;39       return c;
000034  4628              MOV      r0,r5
;;;40     }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;41     
                          ENDP


                          AREA ||i.luaF_newproto||, CODE, READONLY, ALIGN=1

                  luaF_newproto PROC
;;;108    
;;;109    Proto *luaF_newproto (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
;;;110      GCObject *o = luaC_newobj(L, LUA_TPROTO, sizeof(Proto));
000004  2258              MOVS     r2,#0x58
000006  210a              MOVS     r1,#0xa
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       luaC_newobj
00000e  4604              MOV      r4,r0
;;;111      Proto *f = gco2p(o);
000010  4625              MOV      r5,r4
;;;112      f->k = NULL;
000012  2000              MOVS     r0,#0
000014  6328              STR      r0,[r5,#0x30]
;;;113      f->sizek = 0;
000016  6128              STR      r0,[r5,#0x10]
;;;114      f->p = NULL;
000018  63e8              STR      r0,[r5,#0x3c]
;;;115      f->sizep = 0;
00001a  61e8              STR      r0,[r5,#0x1c]
;;;116      f->code = NULL;
00001c  63a8              STR      r0,[r5,#0x38]
;;;117      f->cache = NULL;
00001e  6368              STR      r0,[r5,#0x34]
;;;118      f->cachemiss = 0;
000020  7268              STRB     r0,[r5,#9]
;;;119      f->sizecode = 0;
000022  6168              STR      r0,[r5,#0x14]
;;;120      f->lineinfo = NULL;
000024  6468              STR      r0,[r5,#0x44]
;;;121      f->sizelineinfo = 0;
000026  61a8              STR      r0,[r5,#0x18]
;;;122      f->abslineinfo = NULL;
000028  64a8              STR      r0,[r5,#0x48]
;;;123      f->sizeabslineinfo = 0;
00002a  6268              STR      r0,[r5,#0x24]
;;;124      f->upvalues = NULL;
00002c  6428              STR      r0,[r5,#0x40]
;;;125      f->sizeupvalues = 0;
00002e  60e8              STR      r0,[r5,#0xc]
;;;126      f->numparams = 0;
000030  71a8              STRB     r0,[r5,#6]
;;;127      f->is_vararg = 0;
000032  71e8              STRB     r0,[r5,#7]
;;;128      f->maxstacksize = 0;
000034  7228              STRB     r0,[r5,#8]
;;;129      f->locvars = NULL;
000036  64e8              STR      r0,[r5,#0x4c]
;;;130      f->sizelocvars = 0;
000038  6228              STR      r0,[r5,#0x20]
;;;131      f->linedefined = 0;
00003a  62a8              STR      r0,[r5,#0x28]
;;;132      f->lastlinedefined = 0;
00003c  62e8              STR      r0,[r5,#0x2c]
;;;133      f->source = NULL;
00003e  6528              STR      r0,[r5,#0x50]
;;;134      return f;
000040  4628              MOV      r0,r5
;;;135    }
000042  bd70              POP      {r4-r6,pc}
;;;136    
                          ENDP


                          AREA ||i.luaF_unlinkupval||, CODE, READONLY, ALIGN=1

                  luaF_unlinkupval PROC
;;;85     
;;;86     void luaF_unlinkupval (UpVal *uv) {
000000  e9d02104          LDRD     r2,r1,[r0,#0x10]
;;;87       lua_assert(upisopen(uv));
;;;88       *uv->u.open.previous = uv->u.open.next;
000004  600a              STR      r2,[r1,#0]
;;;89       if (uv->u.open.next)
000006  6901              LDR      r1,[r0,#0x10]
000008  b111              CBZ      r1,|L9.16|
;;;90         uv->u.open.next->u.open.previous = uv->u.open.previous;
00000a  e9d01204          LDRD     r1,r2,[r0,#0x10]
00000e  614a              STR      r2,[r1,#0x14]
                  |L9.16|
;;;91     }
000010  4770              BX       lr
;;;92     
                          ENDP

