; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\ltablib.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\ltablib.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\ltablib.crf ..\..\..\M6P1(L)_Lua\lua\ltablib.c]
                          THUMB

                          AREA ||i.addfield||, CODE, READONLY, ALIGN=2

                  addfield PROC
;;;141    
;;;142    static void addfield (lua_State *L, luaL_Buffer *b, lua_Integer i) {
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;143      lua_geti(L, 1, i);
00000c  4622              MOV      r2,r4
00000e  462b              MOV      r3,r5
000010  2101              MOVS     r1,#1
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       lua_geti
;;;144      if (!lua_isstring(L, -1))
000018  f04f31ff          MOV      r1,#0xffffffff
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       lua_isstring
000022  b988              CBNZ     r0,|L1.72|
;;;145        luaL_error(L, "invalid value (%s) at index %d in table for 'concat'",
000024  f04f31ff          MOV      r1,#0xffffffff
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       lua_type
00002e  4681              MOV      r9,r0
000030  4649              MOV      r1,r9
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       lua_typename
000038  4680              MOV      r8,r0
00003a  4642              MOV      r2,r8
00003c  a105              ADR      r1,|L1.84|
00003e  4638              MOV      r0,r7
000040  e9cd4500          STRD     r4,r5,[sp,#0]
000044  f7fffffe          BL       luaL_error
                  |L1.72|
;;;146                      luaL_typename(L, -1), i);
;;;147      luaL_addvalue(b);
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       luaL_addvalue
;;;148    }
00004e  e8bd87fc          POP      {r2-r10,pc}
;;;149    
                          ENDP

000052  0000              DCW      0x0000
                  |L1.84|
000054  696e7661          DCB      "invalid value (%s) at index %d in table for 'concat'",0
000058  6c696420
00005c  76616c75
000060  65202825
000064  73292061
000068  7420696e
00006c  64657820
000070  25642069
000074  6e207461
000078  626c6520
00007c  666f7220
000080  27636f6e
000084  63617427
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0

                          AREA ||i.auxsort||, CODE, READONLY, ALIGN=1

                  auxsort PROC
;;;338    */
;;;339    static void auxsort (lua_State *L, IdxT lo, IdxT up,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;340                                       unsigned int rnd) {
000004  4681              MOV      r9,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
;;;341      while (lo < up) {  /* loop for tail recursion */
00000c  e0a6              B        |L2.348|
                  |L2.14|
;;;342        IdxT p;  /* Pivot index */
;;;343        IdxT n;  /* to be used later */
;;;344        /* sort elements 'lo', 'p', and 'up' */
;;;345        lua_geti(L, 1, lo);
00000e  4632              MOV      r2,r6
000010  2300              MOVS     r3,#0
000012  2101              MOVS     r1,#1
000014  4648              MOV      r0,r9
000016  f7fffffe          BL       lua_geti
;;;346        lua_geti(L, 1, up);
00001a  4622              MOV      r2,r4
00001c  2300              MOVS     r3,#0
00001e  2101              MOVS     r1,#1
000020  4648              MOV      r0,r9
000022  f7fffffe          BL       lua_geti
;;;347        if (sort_comp(L, -1, -2))  /* a[up] < a[lo]? */
000026  f06f0201          MVN      r2,#1
00002a  1051              ASRS     r1,r2,#1
00002c  4648              MOV      r0,r9
00002e  f7fffffe          BL       sort_comp
000032  b128              CBZ      r0,|L2.64|
;;;348          set2(L, lo, up);  /* swap a[lo] - a[up] */
000034  4622              MOV      r2,r4
000036  4631              MOV      r1,r6
000038  4648              MOV      r0,r9
00003a  f7fffffe          BL       set2
00003e  e004              B        |L2.74|
                  |L2.64|
;;;349        else
;;;350          lua_pop(L, 2);  /* remove both values */
000040  f06f0102          MVN      r1,#2
000044  4648              MOV      r0,r9
000046  f7fffffe          BL       lua_settop
                  |L2.74|
;;;351        if (up - lo == 1)  /* only 2 elements? */
00004a  1ba0              SUBS     r0,r4,r6
00004c  2801              CMP      r0,#1
00004e  d101              BNE      |L2.84|
                  |L2.80|
;;;352          return;  /* already sorted */
;;;353        if (up - lo < RANLIMIT || rnd == 0)  /* small interval or no randomize? */
;;;354          p = (lo + up)/2;  /* middle element is a good pivot */
;;;355        else  /* for larger intervals, it is worth a random pivot */
;;;356          p = choosePivot(lo, up, rnd);
;;;357        lua_geti(L, 1, p);
;;;358        lua_geti(L, 1, lo);
;;;359        if (sort_comp(L, -2, -1))  /* a[p] < a[lo]? */
;;;360          set2(L, p, lo);  /* swap a[p] - a[lo] */
;;;361        else {
;;;362          lua_pop(L, 1);  /* remove a[lo] */
;;;363          lua_geti(L, 1, up);
;;;364          if (sort_comp(L, -1, -2))  /* a[up] < a[p]? */
;;;365            set2(L, p, up);  /* swap a[up] - a[p] */
;;;366          else
;;;367            lua_pop(L, 2);
;;;368        }
;;;369        if (up - lo == 2)  /* only 3 elements? */
;;;370          return;  /* already sorted */
;;;371        lua_geti(L, 1, p);  /* get middle element (Pivot) */
;;;372        lua_pushvalue(L, -1);  /* push Pivot */
;;;373        lua_geti(L, 1, up - 1);  /* push a[up - 1] */
;;;374        set2(L, p, up - 1);  /* swap Pivot (a[p]) with a[up - 1] */
;;;375        p = partition(L, lo, up);
;;;376        /* a[lo .. p - 1] <= a[p] == P <= a[p + 1 .. up] */
;;;377        if (p - lo < up - p) {  /* lower interval is smaller? */
;;;378          auxsort(L, lo, p - 1, rnd);  /* call recursively for lower interval */
;;;379          n = p - lo;  /* size of smaller interval */
;;;380          lo = p + 1;  /* tail call for [p + 1 .. up] (upper interval) */
;;;381        }
;;;382        else {
;;;383          auxsort(L, p + 1, up, rnd);  /* call recursively for upper interval */
;;;384          n = up - p;  /* size of smaller interval */
;;;385          up = p - 1;  /* tail call for [lo .. p - 1]  (lower interval) */
;;;386        }
;;;387        if ((up - lo) / 128 > n) /* partition too imbalanced? */
;;;388          rnd = l_randomizePivot();  /* try a new randomization */
;;;389      }  /* tail call auxsort(L, lo, up, rnd) */
;;;390    }
000050  e8bd87f0          POP      {r4-r10,pc}
                  |L2.84|
000054  1ba0              SUBS     r0,r4,r6              ;353
000056  2864              CMP      r0,#0x64              ;353
000058  d300              BCC      |L2.92|
00005a  b917              CBNZ     r7,|L2.98|
                  |L2.92|
00005c  1930              ADDS     r0,r6,r4              ;354
00005e  0845              LSRS     r5,r0,#1              ;354
000060  e005              B        |L2.110|
                  |L2.98|
000062  463a              MOV      r2,r7                 ;356
000064  4621              MOV      r1,r4                 ;356
000066  4630              MOV      r0,r6                 ;356
000068  f7fffffe          BL       choosePivot
00006c  4605              MOV      r5,r0                 ;356
                  |L2.110|
00006e  462a              MOV      r2,r5                 ;357
000070  2300              MOVS     r3,#0                 ;357
000072  2101              MOVS     r1,#1                 ;357
000074  4648              MOV      r0,r9                 ;357
000076  f7fffffe          BL       lua_geti
00007a  4632              MOV      r2,r6                 ;358
00007c  2300              MOVS     r3,#0                 ;358
00007e  2101              MOVS     r1,#1                 ;358
000080  4648              MOV      r0,r9                 ;358
000082  f7fffffe          BL       lua_geti
000086  f04f32ff          MOV      r2,#0xffffffff        ;359
00008a  0051              LSLS     r1,r2,#1              ;359
00008c  4648              MOV      r0,r9                 ;359
00008e  f7fffffe          BL       sort_comp
000092  b128              CBZ      r0,|L2.160|
000094  4632              MOV      r2,r6                 ;360
000096  4629              MOV      r1,r5                 ;360
000098  4648              MOV      r0,r9                 ;360
00009a  f7fffffe          BL       set2
00009e  e01c              B        |L2.218|
                  |L2.160|
0000a0  f06f0101          MVN      r1,#1                 ;362
0000a4  4648              MOV      r0,r9                 ;362
0000a6  f7fffffe          BL       lua_settop
0000aa  4622              MOV      r2,r4                 ;363
0000ac  2300              MOVS     r3,#0                 ;363
0000ae  2101              MOVS     r1,#1                 ;363
0000b0  4648              MOV      r0,r9                 ;363
0000b2  f7fffffe          BL       lua_geti
0000b6  f06f0201          MVN      r2,#1                 ;364
0000ba  1051              ASRS     r1,r2,#1              ;364
0000bc  4648              MOV      r0,r9                 ;364
0000be  f7fffffe          BL       sort_comp
0000c2  b128              CBZ      r0,|L2.208|
0000c4  4622              MOV      r2,r4                 ;365
0000c6  4629              MOV      r1,r5                 ;365
0000c8  4648              MOV      r0,r9                 ;365
0000ca  f7fffffe          BL       set2
0000ce  e004              B        |L2.218|
                  |L2.208|
0000d0  f06f0102          MVN      r1,#2                 ;367
0000d4  4648              MOV      r0,r9                 ;367
0000d6  f7fffffe          BL       lua_settop
                  |L2.218|
0000da  1ba0              SUBS     r0,r4,r6              ;369
0000dc  2802              CMP      r0,#2                 ;369
0000de  d100              BNE      |L2.226|
0000e0  e7b6              B        |L2.80|
                  |L2.226|
0000e2  462a              MOV      r2,r5                 ;371
0000e4  2300              MOVS     r3,#0                 ;371
0000e6  2101              MOVS     r1,#1                 ;371
0000e8  4648              MOV      r0,r9                 ;371
0000ea  f7fffffe          BL       lua_geti
0000ee  f04f31ff          MOV      r1,#0xffffffff        ;372
0000f2  4648              MOV      r0,r9                 ;372
0000f4  f7fffffe          BL       lua_pushvalue
0000f8  f1a40c01          SUB      r12,r4,#1             ;373
0000fc  4662              MOV      r2,r12                ;373
0000fe  2300              MOVS     r3,#0                 ;373
000100  2101              MOVS     r1,#1                 ;373
000102  4648              MOV      r0,r9                 ;373
000104  f7fffffe          BL       lua_geti
000108  1e62              SUBS     r2,r4,#1              ;374
00010a  4629              MOV      r1,r5                 ;374
00010c  4648              MOV      r0,r9                 ;374
00010e  f7fffffe          BL       set2
000112  4622              MOV      r2,r4                 ;375
000114  4631              MOV      r1,r6                 ;375
000116  4648              MOV      r0,r9                 ;375
000118  f7fffffe          BL       partition
00011c  4605              MOV      r5,r0                 ;375
00011e  1ba8              SUBS     r0,r5,r6              ;377
000120  1b61              SUBS     r1,r4,r5              ;377
000122  4288              CMP      r0,r1                 ;377
000124  d209              BCS      |L2.314|
000126  1e6a              SUBS     r2,r5,#1              ;378
000128  463b              MOV      r3,r7                 ;378
00012a  4631              MOV      r1,r6                 ;378
00012c  4648              MOV      r0,r9                 ;378
00012e  f7fffffe          BL       auxsort
000132  eba50806          SUB      r8,r5,r6              ;379
000136  1c6e              ADDS     r6,r5,#1              ;380
000138  e008              B        |L2.332|
                  |L2.314|
00013a  463b              MOV      r3,r7                 ;383
00013c  4622              MOV      r2,r4                 ;383
00013e  1c69              ADDS     r1,r5,#1              ;383
000140  4648              MOV      r0,r9                 ;383
000142  f7fffffe          BL       auxsort
000146  eba40805          SUB      r8,r4,r5              ;384
00014a  1e6c              SUBS     r4,r5,#1              ;385
                  |L2.332|
00014c  1ba0              SUBS     r0,r4,r6              ;387
00014e  ebb81fd0          CMP      r8,r0,LSR #7          ;387
000152  d202              BCS      |L2.346|
000154  f7fffffe          BL       l_randomizePivot
000158  4607              MOV      r7,r0                 ;388
                  |L2.346|
00015a  bf00              NOP                            ;389
                  |L2.348|
00015c  42a6              CMP      r6,r4                 ;341
00015e  f4ffaf56          BCC      |L2.14|
000162  bf00              NOP      
000164  e774              B        |L2.80|
;;;391    
                          ENDP


                          AREA ||i.checkfield||, CODE, READONLY, ALIGN=1

                  checkfield PROC
;;;35     
;;;36     static int checkfield (lua_State *L, const char *key, int n) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;37       lua_pushstring(L, key);
000008  4631              MOV      r1,r6
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       lua_pushstring
;;;38       return (lua_rawget(L, -n) != LUA_TNIL);
000010  4261              RSBS     r1,r4,#0
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       lua_rawget
000018  b108              CBZ      r0,|L3.30|
00001a  2001              MOVS     r0,#1
                  |L3.28|
;;;39     }
00001c  bd70              POP      {r4-r6,pc}
                  |L3.30|
00001e  2000              MOVS     r0,#0                 ;38
000020  e7fc              B        |L3.28|
;;;40     
                          ENDP


                          AREA ||i.checktab||, CODE, READONLY, ALIGN=2

                  checktab PROC
;;;45     */
;;;46     static void checktab (lua_State *L, int arg, int what) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;47       if (lua_type(L, arg) != LUA_TTABLE) {  /* is it not a table? */
00000a  4639              MOV      r1,r7
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lua_type
000012  2805              CMP      r0,#5
000014  d032              BEQ      |L4.124|
;;;48         int n = 1;  /* number of elements to pop */
000016  2501              MOVS     r5,#1
;;;49         if (lua_getmetatable(L, arg) &&  /* must have metatable */
000018  4639              MOV      r1,r7
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       lua_getmetatable
000020  b330              CBZ      r0,|L4.112|
;;;50             (!(what & TAB_R) || checkfield(L, "__index", ++n)) &&
000022  f0040001          AND      r0,r4,#1
000026  b138              CBZ      r0,|L4.56|
000028  1c68              ADDS     r0,r5,#1
00002a  4605              MOV      r5,r0
00002c  4602              MOV      r2,r0
00002e  a114              ADR      r1,|L4.128|
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       checkfield
000036  b1d8              CBZ      r0,|L4.112|
                  |L4.56|
;;;51             (!(what & TAB_W) || checkfield(L, "__newindex", ++n)) &&
000038  f0040002          AND      r0,r4,#2
00003c  b138              CBZ      r0,|L4.78|
00003e  1c68              ADDS     r0,r5,#1
000040  4605              MOV      r5,r0
000042  4602              MOV      r2,r0
000044  a110              ADR      r1,|L4.136|
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       checkfield
00004c  b180              CBZ      r0,|L4.112|
                  |L4.78|
;;;52             (!(what & TAB_L) || checkfield(L, "__len", ++n))) {
00004e  f0040004          AND      r0,r4,#4
000052  b138              CBZ      r0,|L4.100|
000054  1c68              ADDS     r0,r5,#1
000056  4605              MOV      r5,r0
000058  4602              MOV      r2,r0
00005a  a10e              ADR      r1,|L4.148|
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       checkfield
000062  b128              CBZ      r0,|L4.112|
                  |L4.100|
;;;53           lua_pop(L, n);  /* pop metatable and tested metamethods */
000064  f1c531ff          RSB      r1,r5,#0xffffffff
000068  4630              MOV      r0,r6
00006a  f7fffffe          BL       lua_settop
00006e  e004              B        |L4.122|
                  |L4.112|
;;;54         }
;;;55         else
;;;56           luaL_checktype(L, arg, LUA_TTABLE);  /* force an error */
000070  2205              MOVS     r2,#5
000072  4639              MOV      r1,r7
000074  4630              MOV      r0,r6
000076  f7fffffe          BL       luaL_checktype
                  |L4.122|
;;;57       }
00007a  bf00              NOP      
                  |L4.124|
;;;58     }
00007c  e8bd81f0          POP      {r4-r8,pc}
;;;59     
                          ENDP

                  |L4.128|
000080  5f5f696e          DCB      "__index",0
000084  64657800
                  |L4.136|
000088  5f5f6e65          DCB      "__newindex",0
00008c  77696e64
000090  657800  
000093  00                DCB      0
                  |L4.148|
000094  5f5f6c65          DCB      "__len",0
000098  6e00    
00009a  00                DCB      0
00009b  00                DCB      0

                          AREA ||i.choosePivot||, CODE, READONLY, ALIGN=1

                  choosePivot PROC
;;;327    */
;;;328    static IdxT choosePivot (IdxT lo, IdxT up, unsigned int rnd) {
000000  b570              PUSH     {r4-r6,lr}
000002  4603              MOV      r3,r0
;;;329      IdxT r4 = (up - lo) / 4;  /* range/4 */
000004  1acd              SUBS     r5,r1,r3
000006  08ac              LSRS     r4,r5,#2
;;;330      IdxT p = rnd % (r4 * 2) + (lo + r4);
000008  0065              LSLS     r5,r4,#1
00000a  fbb2f6f5          UDIV     r6,r2,r5
00000e  fb052516          MLS      r5,r5,r6,r2
000012  191e              ADDS     r6,r3,r4
000014  19a8              ADDS     r0,r5,r6
;;;331      lua_assert(lo + r4 <= p && p <= up - r4);
;;;332      return p;
;;;333    }
000016  bd70              POP      {r4-r6,pc}
;;;334    
                          ENDP


                          AREA ||i.l_randomizePivot||, CODE, READONLY, ALIGN=1

                  l_randomizePivot PROC
;;;239    */
;;;240    static unsigned int l_randomizePivot (void) {
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;241      clock_t c = clock();
000004  f7fffffe          BL       clock
000008  4606              MOV      r6,r0
;;;242      time_t t = time(NULL);
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       time
000010  4607              MOV      r7,r0
;;;243      unsigned int buff[sof(c) + sof(t)];
;;;244      unsigned int i, rnd = 0;
000012  2500              MOVS     r5,#0
;;;245      memcpy(buff, &c, sof(c) * sizeof(unsigned int));
000014  9600              STR      r6,[sp,#0]
;;;246      memcpy(buff + sof(c), &t, sof(t) * sizeof(unsigned int));
000016  9701              STR      r7,[sp,#4]
;;;247      for (i = 0; i < sof(buff); i++)
000018  2400              MOVS     r4,#0
00001a  e003              B        |L6.36|
                  |L6.28|
;;;248        rnd += buff[i];
00001c  f85d0024          LDR      r0,[sp,r4,LSL #2]
000020  4405              ADD      r5,r5,r0
000022  1c64              ADDS     r4,r4,#1              ;247
                  |L6.36|
000024  2c02              CMP      r4,#2                 ;247
000026  d3f9              BCC      |L6.28|
;;;249      return rnd;
000028  4628              MOV      r0,r5
;;;250    }
00002a  e8bd81fc          POP      {r2-r8,pc}
;;;251    
                          ENDP


                          AREA ||i.luaopen_table||, CODE, READONLY, ALIGN=2

                  luaopen_table PROC
;;;419    
;;;420    LUAMOD_API int luaopen_table (lua_State *L) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;421      luaL_newlib(L, tab_funcs);
000004  2088              MOVS     r0,#0x88
000006  2200              MOVS     r2,#0
000008  4b08              LDR      r3,|L7.44|
00000a  9000              STR      r0,[sp,#0]
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       luaL_checkversion_
000012  2207              MOVS     r2,#7
000014  2100              MOVS     r1,#0
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       lua_createtable
00001c  2200              MOVS     r2,#0
00001e  4904              LDR      r1,|L7.48|
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       luaL_setfuncs
;;;422      return 1;
000026  2001              MOVS     r0,#1
;;;423    }
000028  bd38              POP      {r3-r5,pc}
;;;424    
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      0x407f8000
                  |L7.48|
                          DCD      tab_funcs

                          AREA ||i.pack||, CODE, READONLY, ALIGN=2

                  pack PROC
;;;175    
;;;176    static int pack (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
;;;177      int i;
;;;178      int n = lua_gettop(L);  /* number of elements to pack */
000004  4630              MOV      r0,r6
000006  f7fffffe          BL       lua_gettop
00000a  4605              MOV      r5,r0
;;;179      lua_createtable(L, n, 1);  /* create result table */
00000c  2201              MOVS     r2,#1
00000e  4629              MOV      r1,r5
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       lua_createtable
;;;180      lua_insert(L, 1);  /* put it at index 1 */
000016  2201              MOVS     r2,#1
000018  4611              MOV      r1,r2
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       lua_rotate
;;;181      for (i = n; i >= 1; i--)  /* assign elements */
000020  462c              MOV      r4,r5
000022  e006              B        |L8.50|
                  |L8.36|
;;;182        lua_seti(L, 1, i);
000024  4622              MOV      r2,r4
000026  17e3              ASRS     r3,r4,#31
000028  2101              MOVS     r1,#1
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       lua_seti
000030  1e64              SUBS     r4,r4,#1              ;181
                  |L8.50|
000032  2c01              CMP      r4,#1                 ;181
000034  daf6              BGE      |L8.36|
;;;183      lua_pushinteger(L, n);
000036  462a              MOV      r2,r5
000038  17eb              ASRS     r3,r5,#31
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       lua_pushinteger
;;;184      lua_setfield(L, 1, "n");  /* t.n = number of elements */
000040  a203              ADR      r2,|L8.80|
000042  2101              MOVS     r1,#1
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       lua_setfield
;;;185      return 1;  /* return table */
00004a  2001              MOVS     r0,#1
;;;186    }
00004c  bd70              POP      {r4-r6,pc}
;;;187    
                          ENDP

00004e  0000              DCW      0x0000
                  |L8.80|
000050  6e00              DCB      "n",0
000052  00                DCB      0
000053  00                DCB      0

                          AREA ||i.partition||, CODE, READONLY, ALIGN=2

                  partition PROC
;;;291    */
;;;292    static IdxT partition (lua_State *L, IdxT lo, IdxT up) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4680              MOV      r8,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;293      IdxT i = lo;  /* will be incremented before first use */
00000a  463c              MOV      r4,r7
;;;294      IdxT j = up - 1;  /* will be decremented before first use */
00000c  1e75              SUBS     r5,r6,#1
;;;295      /* loop invariant: a[lo .. i] <= P <= a[j .. up] */
;;;296      for (;;) {
00000e  bf00              NOP      
                  |L9.16|
;;;297        /* next loop: repeat ++i while a[i] < P */
;;;298        while (lua_geti(L, 1, ++i), sort_comp(L, -1, -2)) {
000010  e00b              B        |L9.42|
                  |L9.18|
;;;299          if (i == up - 1)  /* a[i] < P  but a[up - 1] == P  ?? */
000012  1e70              SUBS     r0,r6,#1
000014  42a0              CMP      r0,r4
000016  d103              BNE      |L9.32|
;;;300            luaL_error(L, "invalid order function for sorting");
000018  a125              ADR      r1,|L9.176|
00001a  4640              MOV      r0,r8
00001c  f7fffffe          BL       luaL_error
                  |L9.32|
;;;301          lua_pop(L, 1);  /* remove a[i] */
000020  f06f0101          MVN      r1,#1
000024  4640              MOV      r0,r8
000026  f7fffffe          BL       lua_settop
                  |L9.42|
00002a  1c60              ADDS     r0,r4,#1              ;298
00002c  4604              MOV      r4,r0                 ;298
00002e  4684              MOV      r12,r0                ;298
000030  4662              MOV      r2,r12                ;298
000032  2300              MOVS     r3,#0                 ;298
000034  2101              MOVS     r1,#1                 ;298
000036  4640              MOV      r0,r8                 ;298
000038  f7fffffe          BL       lua_geti
00003c  f06f0201          MVN      r2,#1                 ;298
000040  1051              ASRS     r1,r2,#1              ;298
000042  4640              MOV      r0,r8                 ;298
000044  f7fffffe          BL       sort_comp
000048  2800              CMP      r0,#0                 ;298
00004a  d1e2              BNE      |L9.18|
;;;302        }
;;;303        /* after the loop, a[i] >= P and a[lo .. i - 1] < P */
;;;304        /* next loop: repeat --j while P < a[j] */
;;;305        while (lua_geti(L, 1, --j), sort_comp(L, -3, -1)) {
00004c  e00a              B        |L9.100|
                  |L9.78|
;;;306          if (j < i)  /* j < i  but  a[j] > P ?? */
00004e  42a5              CMP      r5,r4
000050  d203              BCS      |L9.90|
;;;307            luaL_error(L, "invalid order function for sorting");
000052  a117              ADR      r1,|L9.176|
000054  4640              MOV      r0,r8
000056  f7fffffe          BL       luaL_error
                  |L9.90|
;;;308          lua_pop(L, 1);  /* remove a[j] */
00005a  f06f0101          MVN      r1,#1
00005e  4640              MOV      r0,r8
000060  f7fffffe          BL       lua_settop
                  |L9.100|
000064  1e68              SUBS     r0,r5,#1              ;305
000066  4605              MOV      r5,r0                 ;305
000068  4684              MOV      r12,r0                ;305
00006a  4662              MOV      r2,r12                ;305
00006c  2300              MOVS     r3,#0                 ;305
00006e  2101              MOVS     r1,#1                 ;305
000070  4640              MOV      r0,r8                 ;305
000072  f7fffffe          BL       lua_geti
000076  f04f32ff          MOV      r2,#0xffffffff        ;305
00007a  1e91              SUBS     r1,r2,#2              ;305
00007c  4640              MOV      r0,r8                 ;305
00007e  f7fffffe          BL       sort_comp
000082  2800              CMP      r0,#0                 ;305
000084  d1e3              BNE      |L9.78|
;;;309        }
;;;310        /* after the loop, a[j] <= P and a[j + 1 .. up] >= P */
;;;311        if (j < i) {  /* no elements out of place? */
000086  42a5              CMP      r5,r4
000088  d20b              BCS      |L9.162|
;;;312          /* a[lo .. i - 1] <= P <= a[j + 1 .. i .. up] */
;;;313          lua_pop(L, 1);  /* pop a[j] */
00008a  1e81              SUBS     r1,r0,#2
00008c  4640              MOV      r0,r8
00008e  f7fffffe          BL       lua_settop
;;;314          /* swap pivot (a[up - 1]) with a[i] to satisfy pos-condition */
;;;315          set2(L, up - 1, i);
000092  1e71              SUBS     r1,r6,#1
000094  4622              MOV      r2,r4
000096  4640              MOV      r0,r8
000098  f7fffffe          BL       set2
;;;316          return i;
00009c  4620              MOV      r0,r4
;;;317        }
;;;318        /* otherwise, swap a[i] - a[j] to restore invariant and repeat */
;;;319        set2(L, i, j);
;;;320      }
;;;321    }
00009e  e8bd81f0          POP      {r4-r8,pc}
                  |L9.162|
0000a2  462a              MOV      r2,r5                 ;319
0000a4  4621              MOV      r1,r4                 ;319
0000a6  4640              MOV      r0,r8                 ;319
0000a8  f7fffffe          BL       set2
0000ac  e7b0              B        |L9.16|
;;;322    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L9.176|
0000b0  696e7661          DCB      "invalid order function for sorting",0
0000b4  6c696420
0000b8  6f726465
0000bc  72206675
0000c0  6e637469
0000c4  6f6e2066
0000c8  6f722073
0000cc  6f727469
0000d0  6e6700  
0000d3  00                DCB      0

                          AREA ||i.set2||, CODE, READONLY, ALIGN=1

                  set2 PROC
;;;258    
;;;259    static void set2 (lua_State *L, IdxT i, IdxT j) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;260      lua_seti(L, 1, i);
000008  4622              MOV      r2,r4
00000a  2300              MOVS     r3,#0
00000c  2101              MOVS     r1,#1
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       lua_seti
;;;261      lua_seti(L, 1, j);
000014  462a              MOV      r2,r5
000016  2300              MOVS     r3,#0
000018  2101              MOVS     r1,#1
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       lua_seti
;;;262    }
000020  bd70              POP      {r4-r6,pc}
;;;263    
                          ENDP


                          AREA ||i.sort||, CODE, READONLY, ALIGN=2

                  sort PROC
;;;392    
;;;393    static int sort (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
;;;394      lua_Integer n = aux_getn(L, 1, TAB_RW);
000004  2207              MOVS     r2,#7
000006  2101              MOVS     r1,#1
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       checktab
00000e  2101              MOVS     r1,#1
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       luaL_len
000016  4604              MOV      r4,r0
000018  460d              MOV      r5,r1
;;;395      if (n > 1) {  /* non-trivial interval? */
00001a  2000              MOVS     r0,#0
00001c  f1d40101          RSBS     r1,r4,#1
000020  41a8              SBCS     r0,r0,r5
000022  da1f              BGE      |L11.100|
;;;396        luaL_argcheck(L, n < INT_MAX, 1, "array too big");
000024  f06f4100          MVN      r1,#0x80000000
000028  1a61              SUBS     r1,r4,r1
00002a  f1750000          SBCS     r0,r5,#0
00002e  db04              BLT      |L11.58|
000030  a20d              ADR      r2,|L11.104|
000032  2101              MOVS     r1,#1
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       luaL_argerror
                  |L11.58|
;;;397        if (!lua_isnoneornil(L, 2))  /* is there a 2nd argument? */
00003a  2102              MOVS     r1,#2
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       lua_type
000042  2800              CMP      r0,#0
000044  dd04              BLE      |L11.80|
;;;398          luaL_checktype(L, 2, LUA_TFUNCTION);  /* must be a function */
000046  2206              MOVS     r2,#6
000048  2102              MOVS     r1,#2
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       luaL_checktype
                  |L11.80|
;;;399        lua_settop(L, 2);  /* make sure there are two arguments */
000050  2102              MOVS     r1,#2
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       lua_settop
;;;400        auxsort(L, 1, (IdxT)n, 0);
000058  2300              MOVS     r3,#0
00005a  4622              MOV      r2,r4
00005c  2101              MOVS     r1,#1
00005e  4630              MOV      r0,r6
000060  f7fffffe          BL       auxsort
                  |L11.100|
;;;401      }
;;;402      return 0;
000064  2000              MOVS     r0,#0
;;;403    }
000066  bd70              POP      {r4-r6,pc}
;;;404    
                          ENDP

                  |L11.104|
000068  61727261          DCB      "array too big",0
00006c  7920746f
000070  6f206269
000074  6700    
000076  00                DCB      0
000077  00                DCB      0

                          AREA ||i.sort_comp||, CODE, READONLY, ALIGN=1

                  sort_comp PROC
;;;268    */
;;;269    static int sort_comp (lua_State *L, int a, int b) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;270      if (lua_isnil(L, 2))  /* no function? */
000008  2102              MOVS     r1,#2
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       lua_type
000010  b930              CBNZ     r0,|L12.32|
;;;271        return lua_compare(L, a, b, LUA_OPLT);  /* a < b */
000012  2301              MOVS     r3,#1
000014  462a              MOV      r2,r5
000016  4621              MOV      r1,r4
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lua_compare
                  |L12.30|
;;;272      else {  /* function */
;;;273        int res;
;;;274        lua_pushvalue(L, 2);    /* push function */
;;;275        lua_pushvalue(L, a-1);  /* -1 to compensate function */
;;;276        lua_pushvalue(L, b-2);  /* -2 to compensate function and 'a' */
;;;277        lua_call(L, 2, 1);      /* call function */
;;;278        res = lua_toboolean(L, -1);  /* get result */
;;;279        lua_pop(L, 1);          /* pop result */
;;;280        return res;
;;;281      }
;;;282    }
00001e  bdf8              POP      {r3-r7,pc}
                  |L12.32|
000020  2102              MOVS     r1,#2                 ;274
000022  4630              MOV      r0,r6                 ;274
000024  f7fffffe          BL       lua_pushvalue
000028  1e61              SUBS     r1,r4,#1              ;275
00002a  4630              MOV      r0,r6                 ;275
00002c  f7fffffe          BL       lua_pushvalue
000030  1ea9              SUBS     r1,r5,#2              ;276
000032  4630              MOV      r0,r6                 ;276
000034  f7fffffe          BL       lua_pushvalue
000038  2000              MOVS     r0,#0                 ;277
00003a  4603              MOV      r3,r0                 ;277
00003c  2201              MOVS     r2,#1                 ;277
00003e  2102              MOVS     r1,#2                 ;277
000040  9000              STR      r0,[sp,#0]            ;277
000042  4630              MOV      r0,r6                 ;277
000044  f7fffffe          BL       lua_callk
000048  f04f31ff          MOV      r1,#0xffffffff        ;278
00004c  4630              MOV      r0,r6                 ;278
00004e  f7fffffe          BL       lua_toboolean
000052  4607              MOV      r7,r0                 ;278
000054  f06f0101          MVN      r1,#1                 ;279
000058  4630              MOV      r0,r6                 ;279
00005a  f7fffffe          BL       lua_settop
00005e  4638              MOV      r0,r7                 ;280
000060  e7dd              B        |L12.30|
;;;283    
                          ENDP


                          AREA ||i.tconcat||, CODE, READONLY, ALIGN=2

                  tconcat PROC
;;;150    
;;;151    static int tconcat (lua_State *L) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  f5ad5d82          SUB      sp,sp,#0x1040
000008  4680              MOV      r8,r0
;;;152      luaL_Buffer b;
;;;153      lua_Integer last = aux_getn(L, 1, TAB_R);
00000a  2205              MOVS     r2,#5
00000c  2101              MOVS     r1,#1
00000e  4640              MOV      r0,r8
000010  f7fffffe          BL       checktab
000014  2101              MOVS     r1,#1
000016  4640              MOV      r0,r8
000018  f7fffffe          BL       luaL_len
00001c  4606              MOV      r6,r0
00001e  460f              MOV      r7,r1
;;;154      size_t lsep;
;;;155      const char *sep = luaL_optlstring(L, 2, "", &lsep);
000020  ab0b              ADD      r3,sp,#0x2c
000022  a220              ADR      r2,|L13.164|
000024  2102              MOVS     r1,#2
000026  4640              MOV      r0,r8
000028  f7fffffe          BL       luaL_optlstring
00002c  4681              MOV      r9,r0
;;;156      lua_Integer i = luaL_optinteger(L, 3, 1);
00002e  2201              MOVS     r2,#1
000030  2300              MOVS     r3,#0
000032  2103              MOVS     r1,#3
000034  4640              MOV      r0,r8
000036  f7fffffe          BL       luaL_optinteger
00003a  4604              MOV      r4,r0
00003c  460d              MOV      r5,r1
;;;157      last = luaL_optinteger(L, 4, last);
00003e  4632              MOV      r2,r6
000040  463b              MOV      r3,r7
000042  2104              MOVS     r1,#4
000044  4640              MOV      r0,r8
000046  f7fffffe          BL       luaL_optinteger
00004a  4606              MOV      r6,r0
00004c  460f              MOV      r7,r1
;;;158      luaL_buffinit(L, &b);
00004e  a90c              ADD      r1,sp,#0x30
000050  4640              MOV      r0,r8
000052  f7fffffe          BL       luaL_buffinit
;;;159      for (; i < last; i++) {
000056  e00d              B        |L13.116|
                  |L13.88|
;;;160        addfield(L, &b, i);
000058  4622              MOV      r2,r4
00005a  462b              MOV      r3,r5
00005c  a90c              ADD      r1,sp,#0x30
00005e  4640              MOV      r0,r8
000060  f7fffffe          BL       addfield
;;;161        luaL_addlstring(&b, sep, lsep);
000064  4649              MOV      r1,r9
000066  a80c              ADD      r0,sp,#0x30
000068  9a0b              LDR      r2,[sp,#0x2c]
00006a  f7fffffe          BL       luaL_addlstring
00006e  1c64              ADDS     r4,r4,#1              ;159
000070  f1450500          ADC      r5,r5,#0              ;159
                  |L13.116|
000074  1ba0              SUBS     r0,r4,r6              ;159
000076  eb750007          SBCS     r0,r5,r7              ;159
00007a  dbed              BLT      |L13.88|
;;;162      }
;;;163      if (i == last)  /* add last value (if interval was not empty) */
00007c  ea840006          EOR      r0,r4,r6
000080  ea850107          EOR      r1,r5,r7
000084  4308              ORRS     r0,r0,r1
000086  d105              BNE      |L13.148|
;;;164        addfield(L, &b, i);
000088  4622              MOV      r2,r4
00008a  462b              MOV      r3,r5
00008c  a90c              ADD      r1,sp,#0x30
00008e  4640              MOV      r0,r8
000090  f7fffffe          BL       addfield
                  |L13.148|
;;;165      luaL_pushresult(&b);
000094  a80c              ADD      r0,sp,#0x30
000096  f7fffffe          BL       luaL_pushresult
;;;166      return 1;
00009a  2001              MOVS     r0,#1
;;;167    }
00009c  f50d5d82          ADD      sp,sp,#0x1040
0000a0  e8bd87f0          POP      {r4-r10,pc}
;;;168    
                          ENDP

                  |L13.164|
0000a4  00                DCB      0
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0

                          AREA ||i.tinsert||, CODE, READONLY, ALIGN=2

                  tinsert PROC
;;;60     
;;;61     static int tinsert (lua_State *L) {
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;62       lua_Integer e = aux_getn(L, 1, TAB_RW) + 1;  /* first empty element */
000004  2207              MOVS     r2,#7
000006  2101              MOVS     r1,#1
000008  9800              LDR      r0,[sp,#0]
00000a  f7fffffe          BL       checktab
00000e  2101              MOVS     r1,#1
000010  9800              LDR      r0,[sp,#0]
000012  f7fffffe          BL       luaL_len
000016  f1100801          ADDS     r8,r0,#1
00001a  f1410900          ADC      r9,r1,#0
;;;63       lua_Integer pos;  /* where to insert new element */
;;;64       switch (lua_gettop(L)) {
00001e  9800              LDR      r0,[sp,#0]
000020  f7fffffe          BL       lua_gettop
000024  2802              CMP      r0,#2
000026  d002              BEQ      |L14.46|
000028  2803              CMP      r0,#3
00002a  d131              BNE      |L14.144|
00002c  e002              B        |L14.52|
                  |L14.46|
;;;65         case 2: {  /* called with only 2 arguments */
;;;66           pos = e;  /* insert new element at the end */
00002e  4644              MOV      r4,r8
000030  464d              MOV      r5,r9
;;;67           break;
000032  e033              B        |L14.156|
                  |L14.52|
;;;68         }
;;;69         case 3: {
;;;70           lua_Integer i;
;;;71           pos = luaL_checkinteger(L, 2);  /* 2nd argument is the position */
000034  2102              MOVS     r1,#2
000036  9800              LDR      r0,[sp,#0]
000038  f7fffffe          BL       luaL_checkinteger
00003c  4604              MOV      r4,r0
00003e  460d              MOV      r5,r1
;;;72           luaL_argcheck(L, 1 <= pos && pos <= e, 2, "position out of bounds");
000040  1e60              SUBS     r0,r4,#1
000042  f1750100          SBCS     r1,r5,#0
000046  db04              BLT      |L14.82|
000048  ebb80004          SUBS     r0,r8,r4
00004c  eb790005          SBCS     r0,r9,r5
000050  da04              BGE      |L14.92|
                  |L14.82|
000052  a217              ADR      r2,|L14.176|
000054  2102              MOVS     r1,#2
000056  9800              LDR      r0,[sp,#0]
000058  f7fffffe          BL       luaL_argerror
                  |L14.92|
;;;73           for (i = e; i > pos; i--) {  /* move up elements */
00005c  4646              MOV      r6,r8
00005e  464f              MOV      r7,r9
000060  e011              B        |L14.134|
                  |L14.98|
;;;74             lua_geti(L, 1, i - 1);
000062  f1b60a01          SUBS     r10,r6,#1
000066  f1670300          SBC      r3,r7,#0
00006a  4652              MOV      r2,r10
00006c  2101              MOVS     r1,#1
00006e  9800              LDR      r0,[sp,#0]
000070  f7fffffe          BL       lua_geti
;;;75             lua_seti(L, 1, i);  /* t[i] = t[i - 1] */
000074  4632              MOV      r2,r6
000076  463b              MOV      r3,r7
000078  2101              MOVS     r1,#1
00007a  9800              LDR      r0,[sp,#0]
00007c  f7fffffe          BL       lua_seti
000080  1e76              SUBS     r6,r6,#1              ;73
000082  f1670700          SBC      r7,r7,#0              ;73
                  |L14.134|
000086  1ba0              SUBS     r0,r4,r6              ;73
000088  eb750007          SBCS     r0,r5,r7              ;73
00008c  dbe9              BLT      |L14.98|
;;;76           }
;;;77           break;
00008e  e005              B        |L14.156|
                  |L14.144|
;;;78         }
;;;79         default: {
;;;80           return luaL_error(L, "wrong number of arguments to 'insert'");
000090  a10d              ADR      r1,|L14.200|
000092  9800              LDR      r0,[sp,#0]
000094  f7fffffe          BL       luaL_error
                  |L14.152|
;;;81         }
;;;82       }
;;;83       lua_seti(L, 1, pos);  /* t[pos] = v */
;;;84       return 0;
;;;85     }
000098  e8bd8ff8          POP      {r3-r11,pc}
                  |L14.156|
00009c  bf00              NOP                            ;67
00009e  4622              MOV      r2,r4                 ;83
0000a0  462b              MOV      r3,r5                 ;83
0000a2  2101              MOVS     r1,#1                 ;83
0000a4  9800              LDR      r0,[sp,#0]            ;83
0000a6  f7fffffe          BL       lua_seti
0000aa  2000              MOVS     r0,#0                 ;84
0000ac  e7f4              B        |L14.152|
;;;86     
                          ENDP

0000ae  0000              DCW      0x0000
                  |L14.176|
0000b0  706f7369          DCB      "position out of bounds",0
0000b4  74696f6e
0000b8  206f7574
0000bc  206f6620
0000c0  626f756e
0000c4  647300  
0000c7  00                DCB      0
                  |L14.200|
0000c8  77726f6e          DCB      "wrong number of arguments to 'insert'",0
0000cc  67206e75
0000d0  6d626572
0000d4  206f6620
0000d8  61726775
0000dc  6d656e74
0000e0  7320746f
0000e4  2027696e
0000e8  73657274
0000ec  2700    
0000ee  00                DCB      0
0000ef  00                DCB      0

                          AREA ||i.tmove||, CODE, READONLY, ALIGN=2

                  tmove PROC
;;;109    */
;;;110    static int tmove (lua_State *L) {
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
000004  b086              SUB      sp,sp,#0x18
;;;111      lua_Integer f = luaL_checkinteger(L, 2);
000006  2102              MOVS     r1,#2
000008  9806              LDR      r0,[sp,#0x18]
00000a  f7fffffe          BL       luaL_checkinteger
00000e  4606              MOV      r6,r0
000010  460f              MOV      r7,r1
;;;112      lua_Integer e = luaL_checkinteger(L, 3);
000012  2103              MOVS     r1,#3
000014  9806              LDR      r0,[sp,#0x18]
000016  f7fffffe          BL       luaL_checkinteger
00001a  4682              MOV      r10,r0
00001c  468b              MOV      r11,r1
;;;113      lua_Integer t = luaL_checkinteger(L, 4);
00001e  2104              MOVS     r1,#4
000020  9806              LDR      r0,[sp,#0x18]
000022  f7fffffe          BL       luaL_checkinteger
000026  4680              MOV      r8,r0
000028  4689              MOV      r9,r1
;;;114      int tt = !lua_isnoneornil(L, 5) ? 5 : 1;  /* destination table */
00002a  2105              MOVS     r1,#5
00002c  9806              LDR      r0,[sp,#0x18]
00002e  f7fffffe          BL       lua_type
000032  2800              CMP      r0,#0
000034  dd01              BLE      |L15.58|
000036  2005              MOVS     r0,#5
000038  e000              B        |L15.60|
                  |L15.58|
00003a  2001              MOVS     r0,#1
                  |L15.60|
00003c  9004              STR      r0,[sp,#0x10]
;;;115      checktab(L, 1, TAB_R);
00003e  2201              MOVS     r2,#1
000040  4611              MOV      r1,r2
000042  9806              LDR      r0,[sp,#0x18]
000044  f7fffffe          BL       checktab
;;;116      checktab(L, tt, TAB_W);
000048  2202              MOVS     r2,#2
00004a  9904              LDR      r1,[sp,#0x10]
00004c  9806              LDR      r0,[sp,#0x18]
00004e  f7fffffe          BL       checktab
;;;117      if (e >= f) {  /* otherwise, nothing to move */
000052  ebba0006          SUBS     r0,r10,r6
000056  eb7b0007          SBCS     r0,r11,r7
00005a  db7d              BLT      |L15.344|
;;;118        lua_Integer n, i;
;;;119        luaL_argcheck(L, f > 0 || e < LUA_MAXINTEGER + f, 3,
00005c  2100              MOVS     r1,#0
00005e  4608              MOV      r0,r1
000060  1b89              SUBS     r1,r1,r6
000062  41b8              SBCS     r0,r0,r7
000064  db0c              BLT      |L15.128|
000066  1e71              SUBS     r1,r6,#1
000068  f1674000          SBC      r0,r7,#0x80000000
00006c  ebba0101          SUBS     r1,r10,r1
000070  eb7b0000          SBCS     r0,r11,r0
000074  db04              BLT      |L15.128|
000076  a246              ADR      r2,|L15.400|
000078  2103              MOVS     r1,#3
00007a  9806              LDR      r0,[sp,#0x18]
00007c  f7fffffe          BL       luaL_argerror
                  |L15.128|
;;;120                      "too many elements to move");
;;;121        n = e - f + 1;  /* number of elements to move */
000080  ebba0106          SUBS     r1,r10,r6
000084  eb6b0007          SBC      r0,r11,r7
000088  1c49              ADDS     r1,r1,#1
00008a  f1400000          ADC      r0,r0,#0
00008e  e9cd1002          STRD     r1,r0,[sp,#8]
;;;122        luaL_argcheck(L, t <= LUA_MAXINTEGER - n + 1, 4,
000092  f06f4200          MVN      r2,#0x80000000
000096  e9dd1002          LDRD     r1,r0,[sp,#8]
00009a  f1d131ff          RSBS     r1,r1,#0xffffffff
00009e  eb620000          SBC      r0,r2,r0
0000a2  1c49              ADDS     r1,r1,#1
0000a4  f1400000          ADC      r0,r0,#0
0000a8  ebb10108          SUBS     r1,r1,r8
0000ac  eb700009          SBCS     r0,r0,r9
0000b0  da04              BGE      |L15.188|
0000b2  a23e              ADR      r2,|L15.428|
0000b4  2104              MOVS     r1,#4
0000b6  9806              LDR      r0,[sp,#0x18]
0000b8  f7fffffe          BL       luaL_argerror
                  |L15.188|
;;;123                      "destination wrap around");
;;;124        if (t > e || t <= f || (tt != 1 && !lua_compare(L, 1, tt, LUA_OPEQ))) {
0000bc  ebba0008          SUBS     r0,r10,r8
0000c0  eb7b0009          SBCS     r0,r11,r9
0000c4  db0e              BLT      |L15.228|
0000c6  ebb60008          SUBS     r0,r6,r8
0000ca  eb770009          SBCS     r0,r7,r9
0000ce  da09              BGE      |L15.228|
0000d0  9804              LDR      r0,[sp,#0x10]
0000d2  2801              CMP      r0,#1
0000d4  d02a              BEQ      |L15.300|
0000d6  2300              MOVS     r3,#0
0000d8  2101              MOVS     r1,#1
0000da  9a04              LDR      r2,[sp,#0x10]
0000dc  9806              LDR      r0,[sp,#0x18]
0000de  f7fffffe          BL       lua_compare
0000e2  bb18              CBNZ     r0,|L15.300|
                  |L15.228|
;;;125          for (i = 0; i < n; i++) {
0000e4  2400              MOVS     r4,#0
0000e6  4625              MOV      r5,r4
0000e8  e019              B        |L15.286|
                  |L15.234|
;;;126            lua_geti(L, 1, f + i);
0000ea  1931              ADDS     r1,r6,r4
0000ec  eb470005          ADC      r0,r7,r5
0000f0  460a              MOV      r2,r1
0000f2  4603              MOV      r3,r0
0000f4  e9cd1000          STRD     r1,r0,[sp,#0]
0000f8  2101              MOVS     r1,#1
0000fa  9806              LDR      r0,[sp,#0x18]
0000fc  f7fffffe          BL       lua_geti
;;;127            lua_seti(L, tt, t + i);
000100  eb180104          ADDS     r1,r8,r4
000104  eb490005          ADC      r0,r9,r5
000108  460a              MOV      r2,r1
00010a  4603              MOV      r3,r0
00010c  e9cd1000          STRD     r1,r0,[sp,#0]
000110  9904              LDR      r1,[sp,#0x10]
000112  9806              LDR      r0,[sp,#0x18]
000114  f7fffffe          BL       lua_seti
000118  1c64              ADDS     r4,r4,#1              ;125
00011a  f1450500          ADC      r5,r5,#0              ;125
                  |L15.286|
00011e  e9dd1002          LDRD     r1,r0,[sp,#8]         ;125
000122  1a61              SUBS     r1,r4,r1              ;125
000124  eb750000          SBCS     r0,r5,r0              ;125
000128  dbdf              BLT      |L15.234|
00012a  e027              B        |L15.380|
                  |L15.300|
;;;128          }
;;;129        }
;;;130        else {
;;;131          for (i = n - 1; i >= 0; i--) {
00012c  e9dd1002          LDRD     r1,r0,[sp,#8]
000130  1e4c              SUBS     r4,r1,#1
000132  f1600500          SBC      r5,r0,#0
000136  e01b              B        |L15.368|
                  |L15.312|
;;;132            lua_geti(L, 1, f + i);
000138  1931              ADDS     r1,r6,r4
00013a  eb470005          ADC      r0,r7,r5
00013e  460a              MOV      r2,r1
000140  4603              MOV      r3,r0
000142  e9cd1000          STRD     r1,r0,[sp,#0]
000146  2101              MOVS     r1,#1
000148  9806              LDR      r0,[sp,#0x18]
00014a  f7fffffe          BL       lua_geti
;;;133            lua_seti(L, tt, t + i);
00014e  eb180104          ADDS     r1,r8,r4
000152  eb490005          ADC      r0,r9,r5
000156  e000              B        |L15.346|
                  |L15.344|
000158  e011              B        |L15.382|
                  |L15.346|
00015a  460a              MOV      r2,r1
00015c  4603              MOV      r3,r0
00015e  e9cd1000          STRD     r1,r0,[sp,#0]
000162  9904              LDR      r1,[sp,#0x10]
000164  9806              LDR      r0,[sp,#0x18]
000166  f7fffffe          BL       lua_seti
00016a  1e64              SUBS     r4,r4,#1              ;131
00016c  f1650500          SBC      r5,r5,#0              ;131
                  |L15.368|
000170  2100              MOVS     r1,#0                 ;131
000172  4608              MOV      r0,r1                 ;131
000174  1a61              SUBS     r1,r4,r1              ;131
000176  eb750000          SBCS     r0,r5,r0              ;131
00017a  dadd              BGE      |L15.312|
                  |L15.380|
;;;134          }
;;;135        }
;;;136      }
00017c  bf00              NOP      
                  |L15.382|
;;;137      lua_pushvalue(L, tt);  /* return destination table */
00017e  9904              LDR      r1,[sp,#0x10]
000180  9806              LDR      r0,[sp,#0x18]
000182  f7fffffe          BL       lua_pushvalue
;;;138      return 1;
000186  2001              MOVS     r0,#1
;;;139    }
000188  b007              ADD      sp,sp,#0x1c
00018a  e8bd8ff0          POP      {r4-r11,pc}
;;;140    
                          ENDP

00018e  0000              DCW      0x0000
                  |L15.400|
000190  746f6f20          DCB      "too many elements to move",0
000194  6d616e79
000198  20656c65
00019c  6d656e74
0001a0  7320746f
0001a4  206d6f76
0001a8  6500    
0001aa  00                DCB      0
0001ab  00                DCB      0
                  |L15.428|
0001ac  64657374          DCB      "destination wrap around",0
0001b0  696e6174
0001b4  696f6e20
0001b8  77726170
0001bc  2061726f
0001c0  756e6400

                          AREA ||i.tremove||, CODE, READONLY, ALIGN=2

                  tremove PROC
;;;87     
;;;88     static int tremove (lua_State *L) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4682              MOV      r10,r0
;;;89       lua_Integer size = aux_getn(L, 1, TAB_RW);
000006  2207              MOVS     r2,#7
000008  2101              MOVS     r1,#1
00000a  4650              MOV      r0,r10
00000c  f7fffffe          BL       checktab
000010  2101              MOVS     r1,#1
000012  4650              MOV      r0,r10
000014  f7fffffe          BL       luaL_len
000018  4606              MOV      r6,r0
00001a  460f              MOV      r7,r1
;;;90       lua_Integer pos = luaL_optinteger(L, 2, size);
00001c  4632              MOV      r2,r6
00001e  463b              MOV      r3,r7
000020  2102              MOVS     r1,#2
000022  4650              MOV      r0,r10
000024  f7fffffe          BL       luaL_optinteger
000028  4604              MOV      r4,r0
00002a  460d              MOV      r5,r1
;;;91       if (pos != size)  /* validate 'pos' if given */
00002c  ea840006          EOR      r0,r4,r6
000030  ea850107          EOR      r1,r5,r7
000034  4308              ORRS     r0,r0,r1
000036  d00e              BEQ      |L16.86|
;;;92         luaL_argcheck(L, 1 <= pos && pos <= size + 1, 1, "position out of bounds");
000038  1e61              SUBS     r1,r4,#1
00003a  f1750000          SBCS     r0,r5,#0
00003e  db05              BLT      |L16.76|
000040  1c71              ADDS     r1,r6,#1
000042  f1470000          ADC      r0,r7,#0
000046  1b09              SUBS     r1,r1,r4
000048  41a8              SBCS     r0,r0,r5
00004a  da04              BGE      |L16.86|
                  |L16.76|
00004c  a216              ADR      r2,|L16.168|
00004e  2101              MOVS     r1,#1
000050  4650              MOV      r0,r10
000052  f7fffffe          BL       luaL_argerror
                  |L16.86|
;;;93       lua_geti(L, 1, pos);  /* result = t[pos] */
000056  4622              MOV      r2,r4
000058  462b              MOV      r3,r5
00005a  2101              MOVS     r1,#1
00005c  4650              MOV      r0,r10
00005e  f7fffffe          BL       lua_geti
;;;94       for ( ; pos < size; pos++) {
000062  e011              B        |L16.136|
                  |L16.100|
;;;95         lua_geti(L, 1, pos + 1);
000064  f1140801          ADDS     r8,r4,#1
000068  f1450300          ADC      r3,r5,#0
00006c  4642              MOV      r2,r8
00006e  2101              MOVS     r1,#1
000070  4650              MOV      r0,r10
000072  f7fffffe          BL       lua_geti
;;;96         lua_seti(L, 1, pos);  /* t[pos] = t[pos + 1] */
000076  4622              MOV      r2,r4
000078  462b              MOV      r3,r5
00007a  2101              MOVS     r1,#1
00007c  4650              MOV      r0,r10
00007e  f7fffffe          BL       lua_seti
000082  1c64              ADDS     r4,r4,#1              ;94
000084  f1450500          ADC      r5,r5,#0              ;94
                  |L16.136|
000088  1ba0              SUBS     r0,r4,r6              ;94
00008a  eb750007          SBCS     r0,r5,r7              ;94
00008e  dbe9              BLT      |L16.100|
;;;97       }
;;;98       lua_pushinteger(L, pos);
000090  4622              MOV      r2,r4
000092  462b              MOV      r3,r5
000094  4650              MOV      r0,r10
000096  f7fffffe          BL       lua_pushinteger
;;;99       lua_removekey(L, 1);  /* remove entry t[pos] */
00009a  2101              MOVS     r1,#1
00009c  4650              MOV      r0,r10
00009e  f7fffffe          BL       lua_removekey
;;;100      return 1;
0000a2  2001              MOVS     r0,#1
;;;101    }
0000a4  e8bd87f0          POP      {r4-r10,pc}
;;;102    
                          ENDP

                  |L16.168|
0000a8  706f7369          DCB      "position out of bounds",0
0000ac  74696f6e
0000b0  206f7574
0000b4  206f6620
0000b8  626f756e
0000bc  647300  
0000bf  00                DCB      0

                          AREA ||i.unpack||, CODE, READONLY, ALIGN=2

                  unpack PROC
;;;188    
;;;189    static int unpack (lua_State *L) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4682              MOV      r10,r0
;;;190      lua_Unsigned n;
;;;191      lua_Integer i = luaL_optinteger(L, 2, 1);
000006  2201              MOVS     r2,#1
000008  2300              MOVS     r3,#0
00000a  2102              MOVS     r1,#2
00000c  4650              MOV      r0,r10
00000e  f7fffffe          BL       luaL_optinteger
000012  4606              MOV      r6,r0
000014  460f              MOV      r7,r1
;;;192      lua_Integer e = luaL_opt(L, luaL_checkinteger, 3, luaL_len(L, 1));
000016  2103              MOVS     r1,#3
000018  4650              MOV      r0,r10
00001a  f7fffffe          BL       lua_type
00001e  2800              CMP      r0,#0
000020  dc04              BGT      |L17.44|
000022  2101              MOVS     r1,#1
000024  4650              MOV      r0,r10
000026  f7fffffe          BL       luaL_len
00002a  e003              B        |L17.52|
                  |L17.44|
00002c  2103              MOVS     r1,#3
00002e  4650              MOV      r0,r10
000030  f7fffffe          BL       luaL_checkinteger
                  |L17.52|
000034  4689              MOV      r9,r1
000036  4680              MOV      r8,r0
;;;193      if (i > e) return 0;  /* empty range */
000038  ebb80006          SUBS     r0,r8,r6
00003c  eb790007          SBCS     r0,r9,r7
000040  da02              BGE      |L17.72|
000042  2000              MOVS     r0,#0
                  |L17.68|
;;;194      n = (lua_Unsigned)e - i;  /* number of elements minus 1 (avoid overflows) */
;;;195      if (n >= (unsigned int)INT_MAX  || !lua_checkstack(L, (int)(++n)))
;;;196        return luaL_error(L, "too many results to unpack");
;;;197      for (; i < e; i++) {  /* push arg[i..e - 1] (to avoid overflows) */
;;;198        lua_geti(L, 1, i);
;;;199      }
;;;200      lua_geti(L, 1, e);  /* push last element */
;;;201      return (int)n;
;;;202    }
000044  e8bd87f0          POP      {r4-r10,pc}
                  |L17.72|
000048  ebb80406          SUBS     r4,r8,r6              ;194
00004c  eb690507          SBC      r5,r9,r7              ;194
000050  f06f4100          MVN      r1,#0x80000000        ;195
000054  1a61              SUBS     r1,r4,r1              ;195
000056  f1750000          SBCS     r0,r5,#0              ;195
00005a  d206              BCS      |L17.106|
00005c  1c60              ADDS     r0,r4,#1              ;195
00005e  4604              MOV      r4,r0                 ;195
000060  4601              MOV      r1,r0                 ;195
000062  4650              MOV      r0,r10                ;195
000064  f7fffffe          BL       lua_checkstack
000068  b920              CBNZ     r0,|L17.116|
                  |L17.106|
00006a  a10e              ADR      r1,|L17.164|
00006c  4650              MOV      r0,r10                ;196
00006e  f7fffffe          BL       luaL_error
000072  e7e7              B        |L17.68|
                  |L17.116|
000074  e008              B        |L17.136|
                  |L17.118|
000076  4632              MOV      r2,r6                 ;198
000078  463b              MOV      r3,r7                 ;198
00007a  2101              MOVS     r1,#1                 ;198
00007c  4650              MOV      r0,r10                ;198
00007e  f7fffffe          BL       lua_geti
000082  1c76              ADDS     r6,r6,#1              ;197
000084  f1470700          ADC      r7,r7,#0              ;197
                  |L17.136|
000088  ebb60008          SUBS     r0,r6,r8              ;197
00008c  eb770009          SBCS     r0,r7,r9              ;197
000090  dbf1              BLT      |L17.118|
000092  4642              MOV      r2,r8                 ;200
000094  464b              MOV      r3,r9                 ;200
000096  2101              MOVS     r1,#1                 ;200
000098  4650              MOV      r0,r10                ;200
00009a  f7fffffe          BL       lua_geti
00009e  4620              MOV      r0,r4                 ;201
0000a0  e7d0              B        |L17.68|
;;;203    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L17.164|
0000a4  746f6f20          DCB      "too many results to unpack",0
0000a8  6d616e79
0000ac  20726573
0000b0  756c7473
0000b4  20746f20
0000b8  756e7061
0000bc  636b00  
0000bf  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  tab_funcs
                          DCD      ||.conststring||
                          DCD      tconcat
                          DCD      ||.conststring||+0x8
                          DCD      tinsert
                          DCD      ||.conststring||+0x10
                          DCD      pack
                          DCD      ||.conststring||+0x18
                          DCD      unpack
                          DCD      ||.conststring||+0x20
                          DCD      tremove
                          DCD      ||.conststring||+0x28
                          DCD      tmove
                          DCD      ||.conststring||+0x30
                          DCD      sort
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  636f6e63          DCB      "concat",0
000004  617400  
000007  00                DCB      0
000008  696e7365          DCB      "insert",0
00000c  727400  
00000f  00                DCB      0
000010  7061636b          DCB      "pack",0
000014  00      
000015  00                DCB      0
000016  00                DCB      0
000017  00                DCB      0
000018  756e7061          DCB      "unpack",0
00001c  636b00  
00001f  00                DCB      0
000020  72656d6f          DCB      "remove",0
000024  766500  
000027  00                DCB      0
000028  6d6f7665          DCB      "move",0
00002c  00      
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
000030  736f7274          DCB      "sort",0
000034  00      
