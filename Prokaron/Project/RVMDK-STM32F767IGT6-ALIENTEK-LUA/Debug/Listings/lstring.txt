; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\lstring.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\lstring.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\lstring.crf ..\..\..\M6P1(L)_Lua\lua\lstring.c]
                          THUMB

                          AREA ||i.createstrobj||, CODE, READONLY, ALIGN=1

                  createstrobj PROC
;;;152    */
;;;153    static TString *createstrobj (lua_State *L, size_t l, int tag, unsigned int h) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4681              MOV      r9,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;154      TString *ts;
;;;155      GCObject *o;
;;;156      size_t totalsize;  /* total size of TString object */
;;;157      totalsize = sizelstring(l);
00000c  f1060a11          ADD      r10,r6,#0x11
;;;158      o = luaC_newobj(L, tag, totalsize);
000010  4652              MOV      r2,r10
000012  4639              MOV      r1,r7
000014  4648              MOV      r0,r9
000016  f7fffffe          BL       luaC_newobj
00001a  4605              MOV      r5,r0
;;;159      ts = gco2ts(o);
00001c  462c              MOV      r4,r5
;;;160      ts->hash = h;
00001e  f8c48008          STR      r8,[r4,#8]
;;;161      ts->extra = 0;
000022  2000              MOVS     r0,#0
000024  71a0              STRB     r0,[r4,#6]
;;;162      getstr(ts)[l] = '\0';  /* ending 0 */
000026  2100              MOVS     r1,#0
000028  f1040010          ADD      r0,r4,#0x10
00002c  5581              STRB     r1,[r0,r6]
;;;163      return ts;
00002e  4620              MOV      r0,r4
;;;164    }
000030  e8bd87f0          POP      {r4-r10,pc}
;;;165    
                          ENDP


                          AREA ||i.growstrtab||, CODE, READONLY, ALIGN=1

                  growstrtab PROC
;;;183    
;;;184    static void growstrtab (lua_State *L, stringtable *tb) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;185      if (tb->nuse == MAX_INT) {  /* too many strings? */
000006  f06f4100          MVN      r1,#0x80000000
00000a  6860              LDR      r0,[r4,#4]
00000c  4288              CMP      r0,r1
00000e  d10c              BNE      |L2.42|
;;;186        luaC_fullgc(L, 1);  /* try to free some... */
000010  2101              MOVS     r1,#1
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       luaC_fullgc
;;;187        if (tb->nuse == MAX_INT)  /* still too many? */
000018  f06f4100          MVN      r1,#0x80000000
00001c  6860              LDR      r0,[r4,#4]
00001e  4288              CMP      r0,r1
000020  d103              BNE      |L2.42|
;;;188          luaM_error(L);  /* cannot even create a message... */
000022  2104              MOVS     r1,#4
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       luaD_throw
                  |L2.42|
;;;189      }
;;;190      if (tb->size <= MAXSTRTB / 2)  /* can grow string table? */
00002a  68a0              LDR      r0,[r4,#8]
00002c  f1b05f00          CMP      r0,#0x20000000
000030  da04              BGE      |L2.60|
;;;191        luaS_resize(L, tb->size * 2);
000032  68a0              LDR      r0,[r4,#8]
000034  0041              LSLS     r1,r0,#1
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       luaS_resize
                  |L2.60|
;;;192    }
00003c  bd70              POP      {r4-r6,pc}
;;;193    
                          ENDP


                          AREA ||i.internshrstr||, CODE, READONLY, ALIGN=1

                  internshrstr PROC
;;;197    */
;;;198    static TString *internshrstr (lua_State *L, const char *str, size_t l) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4682              MOV      r10,r0
000006  468b              MOV      r11,r1
000008  4616              MOV      r6,r2
;;;199      TString *ts;
;;;200      global_State *g = G(L);
00000a  f8da7010          LDR      r7,[r10,#0x10]
;;;201      stringtable *tb = &g->strt;
00000e  f1070514          ADD      r5,r7,#0x14
;;;202      unsigned int h = luaS_hash(str, l, g->seed);
000012  4631              MOV      r1,r6
000014  4658              MOV      r0,r11
000016  6b3a              LDR      r2,[r7,#0x30]
000018  f7fffffe          BL       luaS_hash
00001c  4680              MOV      r8,r0
;;;203      TString **list = &tb->hash[lmod(h, tb->size)];
00001e  68a8              LDR      r0,[r5,#8]
000020  1e40              SUBS     r0,r0,#1
000022  ea000008          AND      r0,r0,r8
000026  6829              LDR      r1,[r5,#0]
000028  eb010980          ADD      r9,r1,r0,LSL #2
;;;204      lua_assert(str != NULL);  /* otherwise 'memcmp'/'memcpy' are undefined */
;;;205      for (ts = *list; ts != NULL; ts = ts->u.hnext) {
00002c  f8d94000          LDR      r4,[r9,#0]
000030  e018              B        |L3.100|
                  |L3.50|
;;;206        if (l == ts->shrlen && (memcmp(str, getstr(ts), l * sizeof(char)) == 0)) {
000032  79e0              LDRB     r0,[r4,#7]
000034  42b0              CMP      r0,r6
000036  d114              BNE      |L3.98|
000038  4632              MOV      r2,r6
00003a  f1040110          ADD      r1,r4,#0x10
00003e  4658              MOV      r0,r11
000040  f7fffffe          BL       memcmp
000044  b968              CBNZ     r0,|L3.98|
;;;207          /* found! */
;;;208          if (isdead(g, ts))  /* dead (but not collected yet)? */
000046  7960              LDRB     r0,[r4,#5]
000048  f8971034          LDRB     r1,[r7,#0x34]
00004c  f0810118          EOR      r1,r1,#0x18
000050  4008              ANDS     r0,r0,r1
000052  b118              CBZ      r0,|L3.92|
;;;209            changewhite(ts);  /* resurrect it */
000054  7960              LDRB     r0,[r4,#5]
000056  f0800018          EOR      r0,r0,#0x18
00005a  7160              STRB     r0,[r4,#5]
                  |L3.92|
;;;210          return ts;
00005c  4620              MOV      r0,r4
                  |L3.94|
;;;211        }
;;;212      }
;;;213      /* else must create a new string */
;;;214      if (tb->nuse >= tb->size) {  /* need to grow string table? */
;;;215        growstrtab(L, tb);
;;;216        list = &tb->hash[lmod(h, tb->size)];  /* rehash with new size */
;;;217      }
;;;218      ts = createstrobj(L, l, LUA_TSHRSTR, h);
;;;219      memcpy(getstr(ts), str, l * sizeof(char));
;;;220      ts->shrlen = cast_byte(l);
;;;221      ts->u.hnext = *list;
;;;222      *list = ts;
;;;223      tb->nuse++;
;;;224      return ts;
;;;225    }
00005e  e8bd9ff0          POP      {r4-r12,pc}
                  |L3.98|
000062  68e4              LDR      r4,[r4,#0xc]          ;205
                  |L3.100|
000064  2c00              CMP      r4,#0                 ;205
000066  d1e4              BNE      |L3.50|
000068  e9d50101          LDRD     r0,r1,[r5,#4]         ;214
00006c  4288              CMP      r0,r1                 ;214
00006e  db0a              BLT      |L3.134|
000070  4629              MOV      r1,r5                 ;215
000072  4650              MOV      r0,r10                ;215
000074  f7fffffe          BL       growstrtab
000078  68a8              LDR      r0,[r5,#8]            ;216
00007a  1e40              SUBS     r0,r0,#1              ;216
00007c  ea000008          AND      r0,r0,r8              ;216
000080  6829              LDR      r1,[r5,#0]            ;216
000082  eb010980          ADD      r9,r1,r0,LSL #2       ;216
                  |L3.134|
000086  4643              MOV      r3,r8                 ;218
000088  2214              MOVS     r2,#0x14              ;218
00008a  4631              MOV      r1,r6                 ;218
00008c  4650              MOV      r0,r10                ;218
00008e  f7fffffe          BL       createstrobj
000092  4604              MOV      r4,r0                 ;218
000094  4632              MOV      r2,r6                 ;219
000096  4659              MOV      r1,r11                ;219
000098  f1040010          ADD      r0,r4,#0x10           ;219
00009c  f7fffffe          BL       __aeabi_memcpy
0000a0  71e6              STRB     r6,[r4,#7]            ;220
0000a2  f8d90000          LDR      r0,[r9,#0]            ;221
0000a6  60e0              STR      r0,[r4,#0xc]          ;221
0000a8  f8c94000          STR      r4,[r9,#0]            ;222
0000ac  6868              LDR      r0,[r5,#4]            ;223
0000ae  1c40              ADDS     r0,r0,#1              ;223
0000b0  6068              STR      r0,[r5,#4]            ;223
0000b2  4620              MOV      r0,r4                 ;224
0000b4  e7d3              B        |L3.94|
;;;226    
                          ENDP


                          AREA ||i.luaS_clearcache||, CODE, READONLY, ALIGN=1

                  luaS_clearcache PROC
;;;119    */
;;;120    void luaS_clearcache (global_State *g) {
000000  b510              PUSH     {r4,lr}
000002  4602              MOV      r2,r0
;;;121      int i, j;
;;;122      for (i = 0; i < STRCACHE_N; i++)
000004  2000              MOVS     r0,#0
000006  e017              B        |L4.56|
                  |L4.8|
;;;123        for (j = 0; j < STRCACHE_M; j++) {
000008  2100              MOVS     r1,#0
00000a  e012              B        |L4.50|
                  |L4.12|
;;;124        if (iswhite(g->strcache[i][j]))  /* will entry be collected? */
00000c  f5027392          ADD      r3,r2,#0x124
000010  eb0303c0          ADD      r3,r3,r0,LSL #3
000014  f8533021          LDR      r3,[r3,r1,LSL #2]
000018  795b              LDRB     r3,[r3,#5]
00001a  f0030318          AND      r3,r3,#0x18
00001e  b13b              CBZ      r3,|L4.48|
;;;125          g->strcache[i][j] = g->memerrmsg;  /* replace it with something fixed */
000020  f5027392          ADD      r3,r2,#0x124
000024  eb0303c0          ADD      r3,r3,r0,LSL #3
000028  f8d24094          LDR      r4,[r2,#0x94]
00002c  f8434021          STR      r4,[r3,r1,LSL #2]
                  |L4.48|
000030  1c49              ADDS     r1,r1,#1              ;123
                  |L4.50|
000032  2902              CMP      r1,#2                 ;123
000034  dbea              BLT      |L4.12|
000036  1c40              ADDS     r0,r0,#1              ;122
                  |L4.56|
000038  2835              CMP      r0,#0x35              ;122
00003a  dbe5              BLT      |L4.8|
;;;126        }
;;;127    }
00003c  bd10              POP      {r4,pc}
;;;128    
                          ENDP


                          AREA ||i.luaS_createlngstrobj||, CODE, READONLY, ALIGN=1

                  luaS_createlngstrobj PROC
;;;166    
;;;167    TString *luaS_createlngstrobj (lua_State *L, size_t l) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;168      TString *ts = createstrobj(L, l, LUA_TLNGSTR, G(L)->seed);
000006  6920              LDR      r0,[r4,#0x10]
000008  2224              MOVS     r2,#0x24
00000a  4629              MOV      r1,r5
00000c  6b03              LDR      r3,[r0,#0x30]
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       createstrobj
000014  4606              MOV      r6,r0
;;;169      ts->u.lnglen = l;
000016  60f5              STR      r5,[r6,#0xc]
;;;170      return ts;
000018  4630              MOV      r0,r6
;;;171    }
00001a  bd70              POP      {r4-r6,pc}
;;;172    
                          ENDP


                          AREA ||i.luaS_eqlngstr||, CODE, READONLY, ALIGN=1

                  luaS_eqlngstr PROC
;;;43     */
;;;44     int luaS_eqlngstr (TString *a, TString *b) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;45       size_t len = a->u.lnglen;
000006  68e6              LDR      r6,[r4,#0xc]
;;;46       lua_assert(a->tt == LUA_TLNGSTR && b->tt == LUA_TLNGSTR);
;;;47       return (a == b) ||  /* same instance or... */
000008  42ac              CMP      r4,r5
00000a  d00a              BEQ      |L6.34|
;;;48         ((len == b->u.lnglen) &&  /* equal length and ... */
00000c  68e8              LDR      r0,[r5,#0xc]
00000e  42b0              CMP      r0,r6
000010  d109              BNE      |L6.38|
;;;49          (memcmp(getstr(a), getstr(b), len) == 0));  /* equal contents */
000012  4632              MOV      r2,r6
000014  f1050110          ADD      r1,r5,#0x10
000018  f1040010          ADD      r0,r4,#0x10
00001c  f7fffffe          BL       memcmp
000020  b908              CBNZ     r0,|L6.38|
                  |L6.34|
000022  2001              MOVS     r0,#1                 ;47
                  |L6.36|
;;;50     }
000024  bd70              POP      {r4-r6,pc}
                  |L6.38|
000026  2000              MOVS     r0,#0                 ;47
000028  e7fc              B        |L6.36|
;;;51     
                          ENDP


                          AREA ||i.luaS_hash||, CODE, READONLY, ALIGN=1

                  luaS_hash PROC
;;;52     
;;;53     unsigned int luaS_hash (const char *str, size_t l, unsigned int seed) {
000000  b570              PUSH     {r4-r6,lr}
000002  4603              MOV      r3,r0
;;;54       unsigned int h = seed ^ cast_uint(l);
000004  ea820001          EOR      r0,r2,r1
;;;55       size_t step = (l >> LUAI_HASHLIMIT) + 1;
000008  2501              MOVS     r5,#1
00000a  eb051451          ADD      r4,r5,r1,LSR #5
;;;56       for (; l >= step; l -= step)
00000e  e007              B        |L7.32|
                  |L7.16|
;;;57         h ^= ((h<<5) + (h>>2) + cast_byte(str[l - 1]));
000010  0145              LSLS     r5,r0,#5
000012  eb050690          ADD      r6,r5,r0,LSR #2
000016  1e4d              SUBS     r5,r1,#1
000018  5d5d              LDRB     r5,[r3,r5]
00001a  4435              ADD      r5,r5,r6
00001c  4068              EORS     r0,r0,r5
00001e  1b09              SUBS     r1,r1,r4              ;56
                  |L7.32|
000020  42a1              CMP      r1,r4                 ;56
000022  d2f5              BCS      |L7.16|
;;;58       return h;
;;;59     }
000024  bd70              POP      {r4-r6,pc}
;;;60     
                          ENDP


                          AREA ||i.luaS_hashlongstr||, CODE, READONLY, ALIGN=1

                  luaS_hashlongstr PROC
;;;61     
;;;62     unsigned int luaS_hashlongstr (TString *ts) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;63       lua_assert(ts->tt == LUA_TLNGSTR);
;;;64       if (ts->extra == 0) {  /* no hash? */
000004  79a0              LDRB     r0,[r4,#6]
000006  b940              CBNZ     r0,|L8.26|
;;;65         ts->hash = luaS_hash(getstr(ts), ts->u.lnglen, ts->hash);
000008  f1040010          ADD      r0,r4,#0x10
00000c  e9d42102          LDRD     r2,r1,[r4,#8]
000010  f7fffffe          BL       luaS_hash
000014  60a0              STR      r0,[r4,#8]
;;;66         ts->extra = 1;  /* now it has its hash */
000016  2001              MOVS     r0,#1
000018  71a0              STRB     r0,[r4,#6]
                  |L8.26|
;;;67       }
;;;68       return ts->hash;
00001a  68a0              LDR      r0,[r4,#8]
;;;69     }
00001c  bd10              POP      {r4,pc}
;;;70     
                          ENDP


                          AREA ||i.luaS_init||, CODE, READONLY, ALIGN=2

                  luaS_init PROC
;;;132    */
;;;133    void luaS_init (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
;;;134      global_State *g = G(L);
000006  692c              LDR      r4,[r5,#0x10]
;;;135      int i, j;
;;;136      stringtable *tb = &G(L)->strt;
000008  6928              LDR      r0,[r5,#0x10]
00000a  f1000814          ADD      r8,r0,#0x14
;;;137      tb->hash = luaM_newvector(L, MINSTRTABSIZE, TString*);
00000e  2200              MOVS     r2,#0
000010  f44f7100          MOV      r1,#0x200
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       luaM_malloc_
00001a  f8c80000          STR      r0,[r8,#0]
;;;138      tablerehash(tb->hash, 0, MINSTRTABSIZE);  /* clear array */
00001e  2280              MOVS     r2,#0x80
000020  2100              MOVS     r1,#0
000022  f8d80000          LDR      r0,[r8,#0]
000026  f7fffffe          BL       tablerehash
;;;139      tb->size = MINSTRTABSIZE;
00002a  2080              MOVS     r0,#0x80
00002c  f8c80008          STR      r0,[r8,#8]
;;;140      /* pre-create memory-error message */
;;;141      g->memerrmsg = luaS_newliteral(L, MEMERRMSG);
000030  2211              MOVS     r2,#0x11
000032  a10f              ADR      r1,|L9.112|
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       luaS_newlstr
00003a  f8c40094          STR      r0,[r4,#0x94]
;;;142      luaC_fix(L, obj2gco(g->memerrmsg));  /* it should never be collected */
00003e  4628              MOV      r0,r5
000040  f8d41094          LDR      r1,[r4,#0x94]
000044  f7fffffe          BL       luaC_fix
;;;143      for (i = 0; i < STRCACHE_N; i++)  /* fill cache with valid strings */
000048  2600              MOVS     r6,#0
00004a  e00d              B        |L9.104|
                  |L9.76|
;;;144        for (j = 0; j < STRCACHE_M; j++)
00004c  2700              MOVS     r7,#0
00004e  e008              B        |L9.98|
                  |L9.80|
;;;145          g->strcache[i][j] = g->memerrmsg;
000050  f5047092          ADD      r0,r4,#0x124
000054  eb0000c6          ADD      r0,r0,r6,LSL #3
000058  f8d41094          LDR      r1,[r4,#0x94]
00005c  f8401027          STR      r1,[r0,r7,LSL #2]
000060  1c7f              ADDS     r7,r7,#1              ;144
                  |L9.98|
000062  2f02              CMP      r7,#2                 ;144
000064  dbf4              BLT      |L9.80|
000066  1c76              ADDS     r6,r6,#1              ;143
                  |L9.104|
000068  2e35              CMP      r6,#0x35              ;143
00006a  dbef              BLT      |L9.76|
;;;146    }
00006c  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP

                  |L9.112|
000070  6e6f7420          DCB      "not enough memory",0
000074  656e6f75
000078  6768206d
00007c  656d6f72
000080  7900    
000082  00                DCB      0
000083  00                DCB      0

                          AREA ||i.luaS_new||, CODE, READONLY, ALIGN=1

                  luaS_new PROC
;;;250    */
;;;251    TString *luaS_new (lua_State *L, const char *str) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
;;;252      unsigned int i = point2uint(str) % STRCACHE_N;  /* hash */
000008  2035              MOVS     r0,#0x35
00000a  fbb6f1f0          UDIV     r1,r6,r0
00000e  fb006811          MLS      r8,r0,r1,r6
;;;253      int j;
;;;254      TString **p = G(L)->strcache[i];
000012  6938              LDR      r0,[r7,#0x10]
000014  f5007092          ADD      r0,r0,#0x124
000018  eb0005c8          ADD      r5,r0,r8,LSL #3
;;;255      for (j = 0; j < STRCACHE_M; j++) {
00001c  2400              MOVS     r4,#0
00001e  e00c              B        |L10.58|
                  |L10.32|
;;;256        if (strcmp(str, getstr(p[j])) == 0)  /* hit? */
000020  f8550024          LDR      r0,[r5,r4,LSL #2]
000024  f1000110          ADD      r1,r0,#0x10
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       strcmp
00002e  b918              CBNZ     r0,|L10.56|
;;;257          return p[j];  /* that is it */
000030  f8550024          LDR      r0,[r5,r4,LSL #2]
                  |L10.52|
;;;258      }
;;;259      /* normal route */
;;;260      for (j = STRCACHE_M - 1; j > 0; j--)
;;;261        p[j] = p[j - 1];  /* move out last element */
;;;262      /* new element is first in the list */
;;;263      p[0] = luaS_newlstr(L, str, strlen(str));
;;;264      return p[0];
;;;265    }
000034  e8bd87f0          POP      {r4-r10,pc}
                  |L10.56|
000038  1c64              ADDS     r4,r4,#1              ;255
                  |L10.58|
00003a  2c02              CMP      r4,#2                 ;255
00003c  dbf0              BLT      |L10.32|
00003e  2401              MOVS     r4,#1                 ;260
000040  e005              B        |L10.78|
                  |L10.66|
000042  1e60              SUBS     r0,r4,#1              ;261
000044  f8550020          LDR      r0,[r5,r0,LSL #2]     ;261
000048  f8450024          STR      r0,[r5,r4,LSL #2]     ;261
00004c  1e64              SUBS     r4,r4,#1              ;260
                  |L10.78|
00004e  2c00              CMP      r4,#0                 ;260
000050  dcf7              BGT      |L10.66|
000052  4630              MOV      r0,r6                 ;263
000054  f7fffffe          BL       strlen
000058  4681              MOV      r9,r0                 ;263
00005a  464a              MOV      r2,r9                 ;263
00005c  4631              MOV      r1,r6                 ;263
00005e  4638              MOV      r0,r7                 ;263
000060  f7fffffe          BL       luaS_newlstr
000064  6028              STR      r0,[r5,#0]            ;263
000066  6828              LDR      r0,[r5,#0]            ;264
000068  e7e4              B        |L10.52|
;;;266    
                          ENDP


                          AREA ||i.luaS_newlstr||, CODE, READONLY, ALIGN=1

                  luaS_newlstr PROC
;;;230    */
;;;231    TString *luaS_newlstr (lua_State *L, const char *str, size_t l) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;232      if (l <= LUAI_MAXSHORTLEN)  /* short string? */
00000a  2c28              CMP      r4,#0x28
00000c  d806              BHI      |L11.28|
;;;233        return internshrstr(L, str, l);
00000e  4622              MOV      r2,r4
000010  4639              MOV      r1,r7
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       internshrstr
                  |L11.24|
;;;234      else {
;;;235        TString *ts;
;;;236        if (l >= (MAX_SIZE - sizeof(TString))/sizeof(char))
;;;237          luaM_toobig(L);
;;;238        ts = luaS_createlngstrobj(L, l);
;;;239        memcpy(getstr(ts), str, l * sizeof(char));
;;;240        return ts;
;;;241      }
;;;242    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L11.28|
00001c  f1140f11          CMN      r4,#0x11              ;236
000020  d302              BCC      |L11.40|
000022  4630              MOV      r0,r6                 ;237
000024  f7fffffe          BL       luaM_toobig
                  |L11.40|
000028  4621              MOV      r1,r4                 ;238
00002a  4630              MOV      r0,r6                 ;238
00002c  f7fffffe          BL       luaS_createlngstrobj
000030  4605              MOV      r5,r0                 ;238
000032  4622              MOV      r2,r4                 ;239
000034  4639              MOV      r1,r7                 ;239
000036  f1050010          ADD      r0,r5,#0x10           ;239
00003a  f7fffffe          BL       __aeabi_memcpy
00003e  4628              MOV      r0,r5                 ;240
000040  e7ea              B        |L11.24|
;;;243    
                          ENDP


                          AREA ||i.luaS_newudata||, CODE, READONLY, ALIGN=1

                  luaS_newudata PROC
;;;267    
;;;268    Udata *luaS_newudata (lua_State *L, size_t s, int nuvalue) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;269      Udata *u;
;;;270      int i;
;;;271      GCObject *o;
;;;272      if (s > MAX_SIZE - udatamemoffset(nuvalue))
00000a  b90c              CBNZ     r4,|L12.16|
00000c  2010              MOVS     r0,#0x10
00000e  e001              B        |L12.20|
                  |L12.16|
000010  0120              LSLS     r0,r4,#4
000012  3018              ADDS     r0,r0,#0x18
                  |L12.20|
000014  f1c030ff          RSB      r0,r0,#0xffffffff
000018  42b8              CMP      r0,r7
00001a  d202              BCS      |L12.34|
;;;273        luaM_toobig(L);
00001c  4648              MOV      r0,r9
00001e  f7fffffe          BL       luaM_toobig
                  |L12.34|
;;;274      o = luaC_newobj(L, LUA_TUSERDATA, sizeudata(nuvalue, s));
000022  b90c              CBNZ     r4,|L12.40|
000024  2010              MOVS     r0,#0x10
000026  e001              B        |L12.44|
                  |L12.40|
000028  0120              LSLS     r0,r4,#4
00002a  3018              ADDS     r0,r0,#0x18
                  |L12.44|
00002c  19c2              ADDS     r2,r0,r7
00002e  2107              MOVS     r1,#7
000030  4648              MOV      r0,r9
000032  f7fffffe          BL       luaC_newobj
000036  4606              MOV      r6,r0
;;;275      u = gco2u(o);
000038  4635              MOV      r5,r6
;;;276      u->len = s;
00003a  60af              STR      r7,[r5,#8]
;;;277      u->nuvalue = nuvalue;
00003c  80ec              STRH     r4,[r5,#6]
;;;278      u->metatable = NULL;
00003e  2000              MOVS     r0,#0
000040  60e8              STR      r0,[r5,#0xc]
;;;279      for (i = 0; i < nuvalue; i++)
000042  4680              MOV      r8,r0
000044  e007              B        |L12.86|
                  |L12.70|
;;;280        setnilvalue(&u->uv[i].uv);
000046  2100              MOVS     r1,#0
000048  f1050018          ADD      r0,r5,#0x18
00004c  eb001008          ADD      r0,r0,r8,LSL #4
000050  7201              STRB     r1,[r0,#8]
000052  f1080801          ADD      r8,r8,#1              ;279
                  |L12.86|
000056  45a0              CMP      r8,r4                 ;279
000058  dbf5              BLT      |L12.70|
;;;281      return u;
00005a  4628              MOV      r0,r5
;;;282    }
00005c  e8bd87f0          POP      {r4-r10,pc}
;;;283    
                          ENDP


                          AREA ||i.luaS_remove||, CODE, READONLY, ALIGN=1

                  luaS_remove PROC
;;;173    
;;;174    void luaS_remove (lua_State *L, TString *ts) {
000000  b530              PUSH     {r4,r5,lr}
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;175      stringtable *tb = &G(L)->strt;
000006  691c              LDR      r4,[r3,#0x10]
000008  f1040014          ADD      r0,r4,#0x14
;;;176      TString **p = &tb->hash[lmod(ts->hash, tb->size)];
00000c  6894              LDR      r4,[r2,#8]
00000e  6885              LDR      r5,[r0,#8]
000010  1e6d              SUBS     r5,r5,#1
000012  402c              ANDS     r4,r4,r5
000014  6805              LDR      r5,[r0,#0]
000016  eb050184          ADD      r1,r5,r4,LSL #2
;;;177      while (*p != ts)  /* find previous element */
00001a  e002              B        |L13.34|
                  |L13.28|
;;;178        p = &(*p)->u.hnext;
00001c  680c              LDR      r4,[r1,#0]
00001e  f104010c          ADD      r1,r4,#0xc
                  |L13.34|
000022  680c              LDR      r4,[r1,#0]            ;177
000024  4294              CMP      r4,r2                 ;177
000026  d1f9              BNE      |L13.28|
;;;179      *p = (*p)->u.hnext;  /* remove element from its list */
000028  680c              LDR      r4,[r1,#0]
00002a  68e4              LDR      r4,[r4,#0xc]
00002c  600c              STR      r4,[r1,#0]
;;;180      tb->nuse--;
00002e  6844              LDR      r4,[r0,#4]
000030  1e64              SUBS     r4,r4,#1
000032  6044              STR      r4,[r0,#4]
;;;181    }
000034  bd30              POP      {r4,r5,pc}
;;;182    
                          ENDP


                          AREA ||i.luaS_resize||, CODE, READONLY, ALIGN=1

                  luaS_resize PROC
;;;94     */
;;;95     void luaS_resize (lua_State *L, int nsize) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
;;;96       stringtable *tb = &G(L)->strt;
000008  f8d80010          LDR      r0,[r8,#0x10]
00000c  f1000514          ADD      r5,r0,#0x14
;;;97       int osize = tb->size;
000010  68ae              LDR      r6,[r5,#8]
;;;98       TString **newvect;
;;;99       if (nsize < osize)  /* shrinking table? */
000012  42b4              CMP      r4,r6
000014  da04              BGE      |L14.32|
;;;100        tablerehash(tb->hash, osize, nsize);  /* depopulate shrinking part */
000016  4622              MOV      r2,r4
000018  4631              MOV      r1,r6
00001a  6828              LDR      r0,[r5,#0]
00001c  f7fffffe          BL       tablerehash
                  |L14.32|
;;;101      newvect = luaM_reallocvector(L, tb->hash, osize, nsize, TString*);
000020  00a3              LSLS     r3,r4,#2
000022  00b2              LSLS     r2,r6,#2
000024  4640              MOV      r0,r8
000026  6829              LDR      r1,[r5,#0]
000028  f7fffffe          BL       luaM_realloc_
00002c  4607              MOV      r7,r0
;;;102      if (newvect == NULL) {  /* reallocation failed? */
00002e  b93f              CBNZ     r7,|L14.64|
;;;103        if (nsize < osize)  /* was it shrinking table? */
000030  42b4              CMP      r4,r6
000032  da0e              BGE      |L14.82|
;;;104          tablerehash(tb->hash, nsize, osize);  /* restore to original size */
000034  4632              MOV      r2,r6
000036  4621              MOV      r1,r4
000038  6828              LDR      r0,[r5,#0]
00003a  f7fffffe          BL       tablerehash
00003e  e008              B        |L14.82|
                  |L14.64|
;;;105        /* leave table as it was */
;;;106      }
;;;107      else {  /* allocation succeeded */
;;;108        tb->hash = newvect;
000040  602f              STR      r7,[r5,#0]
;;;109        tb->size = nsize;
000042  60ac              STR      r4,[r5,#8]
;;;110        if (nsize > osize)
000044  42b4              CMP      r4,r6
000046  dd04              BLE      |L14.82|
;;;111          tablerehash(newvect, osize, nsize);  /* rehash for new size */
000048  4622              MOV      r2,r4
00004a  4631              MOV      r1,r6
00004c  4638              MOV      r0,r7
00004e  f7fffffe          BL       tablerehash
                  |L14.82|
;;;112      }
;;;113    }
000052  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.tablerehash||, CODE, READONLY, ALIGN=1

                  tablerehash PROC
;;;71     
;;;72     static void tablerehash (TString **vect, int osize, int nsize) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;73       int i;
;;;74       for (i = osize; i < nsize; i++)  /* clear new elements */
000006  4620              MOV      r0,r4
000008  e003              B        |L15.18|
                  |L15.10|
;;;75         vect[i] = NULL;
00000a  2100              MOVS     r1,#0
00000c  f8431020          STR      r1,[r3,r0,LSL #2]
000010  1c40              ADDS     r0,r0,#1              ;74
                  |L15.18|
000012  4290              CMP      r0,r2                 ;74
000014  dbf9              BLT      |L15.10|
;;;76       for (i = 0; i < osize; i++) {  /* rehash old part of the array */
000016  2000              MOVS     r0,#0
000018  e015              B        |L15.70|
                  |L15.26|
;;;77         TString *p = vect[i];
00001a  f8531020          LDR      r1,[r3,r0,LSL #2]
;;;78         vect[i] = NULL;
00001e  2500              MOVS     r5,#0
000020  f8435020          STR      r5,[r3,r0,LSL #2]
;;;79         while (p) {  /* for each string in the list */
000024  e00c              B        |L15.64|
                  |L15.38|
;;;80           TString *hnext = p->u.hnext;  /* save next */
000026  68ce              LDR      r6,[r1,#0xc]
;;;81           unsigned int h = lmod(p->hash, nsize);  /* new position */
000028  f1a20c01          SUB      r12,r2,#1
00002c  688f              LDR      r7,[r1,#8]
00002e  ea07050c          AND      r5,r7,r12
;;;82           p->u.hnext = vect[h];  /* chain it into array */
000032  f8537025          LDR      r7,[r3,r5,LSL #2]
000036  60cf              STR      r7,[r1,#0xc]
;;;83           vect[h] = p;
000038  f8431025          STR      r1,[r3,r5,LSL #2]
;;;84           p = hnext;
00003c  4631              MOV      r1,r6
;;;85         }
00003e  bf00              NOP      
                  |L15.64|
000040  2900              CMP      r1,#0                 ;79
000042  d1f0              BNE      |L15.38|
000044  1c40              ADDS     r0,r0,#1              ;76
                  |L15.70|
000046  42a0              CMP      r0,r4                 ;76
000048  dbe7              BLT      |L15.26|
;;;86       }
;;;87     }
00004a  bdf0              POP      {r4-r7,pc}
;;;88     
                          ENDP

