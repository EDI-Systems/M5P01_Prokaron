; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\ltm.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\ltm.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\ltm.crf ..\..\..\M6P1(L)_Lua\lua\ltm.c]
                          THUMB

                          AREA ||i.callbinTM||, CODE, READONLY, ALIGN=1

                  callbinTM PROC
;;;137    
;;;138    static int callbinTM (lua_State *L, const TValue *p1, const TValue *p2,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;139                          StkId res, TMS event) {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
00000c  f8dd9020          LDR      r9,[sp,#0x20]
;;;140      const TValue *tm = luaT_gettmbyobj(L, p1, event);  /* try first operand */
000010  464a              MOV      r2,r9
000012  4631              MOV      r1,r6
000014  4640              MOV      r0,r8
000016  f7fffffe          BL       luaT_gettmbyobj
00001a  4605              MOV      r5,r0
;;;141      if (notm(tm))
00001c  7a28              LDRB     r0,[r5,#8]
00001e  f000000f          AND      r0,r0,#0xf
000022  b928              CBNZ     r0,|L1.48|
;;;142        tm = luaT_gettmbyobj(L, p2, event);  /* try second operand */
000024  464a              MOV      r2,r9
000026  4621              MOV      r1,r4
000028  4640              MOV      r0,r8
00002a  f7fffffe          BL       luaT_gettmbyobj
00002e  4605              MOV      r5,r0
                  |L1.48|
;;;143      if (notm(tm)) return 0;
000030  7a28              LDRB     r0,[r5,#8]
000032  f000000f          AND      r0,r0,#0xf
000036  b910              CBNZ     r0,|L1.62|
000038  2000              MOVS     r0,#0
                  |L1.58|
;;;144      luaT_callTMres(L, tm, p1, p2, res);
;;;145      return 1;
;;;146    }
00003a  e8bd83f8          POP      {r3-r9,pc}
                  |L1.62|
00003e  4623              MOV      r3,r4                 ;144
000040  4632              MOV      r2,r6                 ;144
000042  4629              MOV      r1,r5                 ;144
000044  4640              MOV      r0,r8                 ;144
000046  9700              STR      r7,[sp,#0]            ;144
000048  f7fffffe          BL       luaT_callTMres
00004c  2001              MOVS     r0,#1                 ;145
00004e  e7f4              B        |L1.58|
;;;147    
                          ENDP


                          AREA ||i.luaT_adjustvarargs||, CODE, READONLY, ALIGN=1

                  luaT_adjustvarargs PROC
;;;218    
;;;219    void luaT_adjustvarargs (lua_State *L, int nfixparams, CallInfo *ci,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;220                             Proto *p) {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  4698              MOV      r8,r3
;;;221      int i;
;;;222      int actual = cast_int(L->top - ci->func) - 1;  /* number of arguments */
00000c  68e0              LDR      r0,[r4,#0xc]
00000e  6829              LDR      r1,[r5,#0]
000010  1a40              SUBS     r0,r0,r1
000012  2101              MOVS     r1,#1
000014  ebc11920          RSB      r9,r1,r0,ASR #4
;;;223      int nextra = actual - nfixparams;  /* number of extra arguments */
000018  eba90a07          SUB      r10,r9,r7
;;;224      ci->u.l.nextraargs = nextra;
00001c  f8c5a018          STR      r10,[r5,#0x18]
;;;225      checkstackGC(L, p->maxstacksize + 1);
000020  68e1              LDR      r1,[r4,#0xc]
000022  69e0              LDR      r0,[r4,#0x1c]
000024  1a41              SUBS     r1,r0,r1
000026  f8980008          LDRB     r0,[r8,#8]
00002a  1c40              ADDS     r0,r0,#1
00002c  ebb01f21          CMP      r0,r1,ASR #4
000030  db0f              BLT      |L2.82|
000032  f8980008          LDRB     r0,[r8,#8]
000036  1c41              ADDS     r1,r0,#1
000038  2201              MOVS     r2,#1
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       luaD_growstack
000040  6920              LDR      r0,[r4,#0x10]
000042  68c0              LDR      r0,[r0,#0xc]
000044  2800              CMP      r0,#0
000046  dd03              BLE      |L2.80|
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       luaC_step
00004e  bf00              NOP      
                  |L2.80|
000050  e000              B        |L2.84|
                  |L2.82|
000052  bf00              NOP      
                  |L2.84|
;;;226      /* copy function to the top of the stack */
;;;227      setobjs2s(L, L->top++, ci->func);
000054  68e0              LDR      r0,[r4,#0xc]
000056  f1000210          ADD      r2,r0,#0x10
00005a  60e2              STR      r2,[r4,#0xc]
00005c  6829              LDR      r1,[r5,#0]
00005e  e9d12300          LDRD     r2,r3,[r1,#0]
000062  e9c02300          STRD     r2,r3,[r0,#0]
000066  7a0a              LDRB     r2,[r1,#8]
000068  7202              STRB     r2,[r0,#8]
;;;228      /* move fixed parameters to the top of the stack */
;;;229      for (i = 1; i <= nfixparams; i++) {
00006a  2601              MOVS     r6,#1
00006c  e012              B        |L2.148|
                  |L2.110|
;;;230        setobjs2s(L, L->top++, ci->func + i);
00006e  68e0              LDR      r0,[r4,#0xc]
000070  f1000210          ADD      r2,r0,#0x10
000074  60e2              STR      r2,[r4,#0xc]
000076  682a              LDR      r2,[r5,#0]
000078  eb021106          ADD      r1,r2,r6,LSL #4
00007c  e9d12300          LDRD     r2,r3,[r1,#0]
000080  e9c02300          STRD     r2,r3,[r0,#0]
000084  7a0a              LDRB     r2,[r1,#8]
000086  7202              STRB     r2,[r0,#8]
;;;231        setnilvalue(s2v(ci->func + i));  /* erase original parameter (for GC) */
000088  2000              MOVS     r0,#0
00008a  6829              LDR      r1,[r5,#0]
00008c  eb011106          ADD      r1,r1,r6,LSL #4
000090  7208              STRB     r0,[r1,#8]
000092  1c76              ADDS     r6,r6,#1              ;229
                  |L2.148|
000094  42be              CMP      r6,r7                 ;229
000096  ddea              BLE      |L2.110|
;;;232      }
;;;233      ci->func += actual + 1;
000098  f1090001          ADD      r0,r9,#1
00009c  6829              LDR      r1,[r5,#0]
00009e  eb011000          ADD      r0,r1,r0,LSL #4
0000a2  6028              STR      r0,[r5,#0]
;;;234      ci->top += actual + 1;
0000a4  f1090001          ADD      r0,r9,#1
0000a8  6869              LDR      r1,[r5,#4]
0000aa  eb011000          ADD      r0,r1,r0,LSL #4
0000ae  6068              STR      r0,[r5,#4]
;;;235      lua_assert(L->top <= ci->top && ci->top <= L->stack_last);
;;;236    }
0000b0  e8bd87f0          POP      {r4-r10,pc}
;;;237    
                          ENDP


                          AREA ||i.luaT_callTM||, CODE, READONLY, ALIGN=1

                  luaT_callTM PROC
;;;103    
;;;104    void luaT_callTM (lua_State *L, const TValue *f, const TValue *p1,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;105                      const TValue *p2, const TValue *p3) {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  f8dd9020          LDR      r9,[sp,#0x20]
;;;106      StkId func = L->top;
000010  68ec              LDR      r4,[r5,#0xc]
;;;107      setobj2s(L, func, f);  /* push function (assume EXTRA_STACK) */
000012  4620              MOV      r0,r4
000014  4631              MOV      r1,r6
000016  e9d12300          LDRD     r2,r3,[r1,#0]
00001a  e9c02300          STRD     r2,r3,[r0,#0]
00001e  7a0a              LDRB     r2,[r1,#8]
000020  7202              STRB     r2,[r0,#8]
;;;108      setobj2s(L, func + 1, p1);  /* 1st argument */
000022  3010              ADDS     r0,r0,#0x10
000024  4639              MOV      r1,r7
000026  e9d12300          LDRD     r2,r3,[r1,#0]
00002a  e9c02300          STRD     r2,r3,[r0,#0]
00002e  7a0a              LDRB     r2,[r1,#8]
000030  7202              STRB     r2,[r0,#8]
;;;109      setobj2s(L, func + 2, p2);  /* 2nd argument */
000032  3010              ADDS     r0,r0,#0x10
000034  4641              MOV      r1,r8
000036  e9d12300          LDRD     r2,r3,[r1,#0]
00003a  e9c02300          STRD     r2,r3,[r0,#0]
00003e  7a0a              LDRB     r2,[r1,#8]
000040  7202              STRB     r2,[r0,#8]
;;;110      setobj2s(L, func + 3, p3);  /* 3rd argument */
000042  3010              ADDS     r0,r0,#0x10
000044  4649              MOV      r1,r9
000046  e9d12300          LDRD     r2,r3,[r1,#0]
00004a  e9c02300          STRD     r2,r3,[r0,#0]
00004e  7a0a              LDRB     r2,[r1,#8]
000050  7202              STRB     r2,[r0,#8]
;;;111      L->top = func + 4;
000052  3010              ADDS     r0,r0,#0x10
000054  60e8              STR      r0,[r5,#0xc]
;;;112      /* metamethod may yield only when called from Lua code */
;;;113      if (isLuacode(L->ci))
000056  6968              LDR      r0,[r5,#0x14]
000058  f8900022          LDRB     r0,[r0,#0x22]
00005c  f0000006          AND      r0,r0,#6
000060  b928              CBNZ     r0,|L3.110|
;;;114        luaD_call(L, func, 0);
000062  2200              MOVS     r2,#0
000064  4621              MOV      r1,r4
000066  4628              MOV      r0,r5
000068  f7fffffe          BL       luaD_call
00006c  e004              B        |L3.120|
                  |L3.110|
;;;115      else
;;;116        luaD_callnoyield(L, func, 0);
00006e  2200              MOVS     r2,#0
000070  4621              MOV      r1,r4
000072  4628              MOV      r0,r5
000074  f7fffffe          BL       luaD_callnoyield
                  |L3.120|
;;;117    }
000078  e8bd87f0          POP      {r4-r10,pc}
;;;118    
                          ENDP


                          AREA ||i.luaT_callTMres||, CODE, READONLY, ALIGN=1

                  luaT_callTMres PROC
;;;119    
;;;120    void luaT_callTMres (lua_State *L, const TValue *f, const TValue *p1,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;121                         const TValue *p2, StkId res) {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  f8dd9020          LDR      r9,[sp,#0x20]
;;;122      ptrdiff_t result = savestack(L, res);
000010  6a20              LDR      r0,[r4,#0x20]
000012  eba90a00          SUB      r10,r9,r0
;;;123      StkId func = L->top;
000016  68e5              LDR      r5,[r4,#0xc]
;;;124      setobj2s(L, func, f);  /* push function (assume EXTRA_STACK) */
000018  4628              MOV      r0,r5
00001a  4631              MOV      r1,r6
00001c  e9d12300          LDRD     r2,r3,[r1,#0]
000020  e9c02300          STRD     r2,r3,[r0,#0]
000024  7a0a              LDRB     r2,[r1,#8]
000026  7202              STRB     r2,[r0,#8]
;;;125      setobj2s(L, func + 1, p1);  /* 1st argument */
000028  3010              ADDS     r0,r0,#0x10
00002a  4639              MOV      r1,r7
00002c  e9d12300          LDRD     r2,r3,[r1,#0]
000030  e9c02300          STRD     r2,r3,[r0,#0]
000034  7a0a              LDRB     r2,[r1,#8]
000036  7202              STRB     r2,[r0,#8]
;;;126      setobj2s(L, func + 2, p2);  /* 2nd argument */
000038  3010              ADDS     r0,r0,#0x10
00003a  4641              MOV      r1,r8
00003c  e9d12300          LDRD     r2,r3,[r1,#0]
000040  e9c02300          STRD     r2,r3,[r0,#0]
000044  7a0a              LDRB     r2,[r1,#8]
000046  7202              STRB     r2,[r0,#8]
;;;127      L->top += 3;
000048  68e0              LDR      r0,[r4,#0xc]
00004a  3030              ADDS     r0,r0,#0x30
00004c  60e0              STR      r0,[r4,#0xc]
;;;128      /* metamethod may yield only when called from Lua code */
;;;129      if (isLuacode(L->ci))
00004e  6960              LDR      r0,[r4,#0x14]
000050  f8900022          LDRB     r0,[r0,#0x22]
000054  f0000006          AND      r0,r0,#6
000058  b928              CBNZ     r0,|L4.102|
;;;130        luaD_call(L, func, 1);
00005a  2201              MOVS     r2,#1
00005c  4629              MOV      r1,r5
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       luaD_call
000064  e004              B        |L4.112|
                  |L4.102|
;;;131      else
;;;132        luaD_callnoyield(L, func, 1);
000066  2201              MOVS     r2,#1
000068  4629              MOV      r1,r5
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       luaD_callnoyield
                  |L4.112|
;;;133      res = restorestack(L, result);
000070  6a20              LDR      r0,[r4,#0x20]
000072  eb00090a          ADD      r9,r0,r10
;;;134      setobjs2s(L, res, --L->top);  /* move result to its place */
000076  4648              MOV      r0,r9
000078  68e2              LDR      r2,[r4,#0xc]
00007a  3a10              SUBS     r2,r2,#0x10
00007c  4611              MOV      r1,r2
00007e  60e2              STR      r2,[r4,#0xc]
000080  e9d12300          LDRD     r2,r3,[r1,#0]
000084  e9c02300          STRD     r2,r3,[r0,#0]
000088  7a0a              LDRB     r2,[r1,#8]
00008a  7202              STRB     r2,[r0,#8]
;;;135    }
00008c  e8bd87f0          POP      {r4-r10,pc}
;;;136    
                          ENDP


                          AREA ||i.luaT_callorderTM||, CODE, READONLY, ALIGN=1

                  luaT_callorderTM PROC
;;;187    
;;;188    int luaT_callorderTM (lua_State *L, const TValue *p1, const TValue *p2,
000000  b5f8              PUSH     {r3-r7,lr}
;;;189                          TMS event) {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
000008  461d              MOV      r5,r3
;;;190      if (callbinTM(L, p1, p2, L->top, event))  /* try original event */
00000a  9500              STR      r5,[sp,#0]
00000c  463a              MOV      r2,r7
00000e  4631              MOV      r1,r6
000010  4620              MOV      r0,r4
000012  68e3              LDR      r3,[r4,#0xc]
000014  f7fffffe          BL       callbinTM
000018  b168              CBZ      r0,|L5.54|
;;;191        return !l_isfalse(s2v(L->top));
00001a  68e0              LDR      r0,[r4,#0xc]
00001c  7a00              LDRB     r0,[r0,#8]
00001e  b140              CBZ      r0,|L5.50|
000020  68e0              LDR      r0,[r4,#0xc]
000022  7a00              LDRB     r0,[r0,#8]
000024  2801              CMP      r0,#1
000026  d102              BNE      |L5.46|
000028  68e0              LDR      r0,[r4,#0xc]
00002a  6800              LDR      r0,[r0,#0]
00002c  b108              CBZ      r0,|L5.50|
                  |L5.46|
00002e  2001              MOVS     r0,#1
                  |L5.48|
;;;192      else if (event == TM_LE) {
;;;193          /* try '!(p2 < p1)' for '(p1 <= p2)' */
;;;194          L->ci->callstatus |= CIST_LEQ;  /* mark it is doing 'lt' for 'le' */
;;;195          if (callbinTM(L, p2, p1, L->top, TM_LT)) {
;;;196            L->ci->callstatus ^= CIST_LEQ;  /* clear mark */
;;;197            return l_isfalse(s2v(L->top));
;;;198          }
;;;199          /* else error will remove this 'ci'; no need to clear mark */
;;;200      }
;;;201      luaG_ordererror(L, p1, p2);  /* no metamethod found */
;;;202      return 0;  /* to avoid warnings */
;;;203    }
000030  bdf8              POP      {r3-r7,pc}
                  |L5.50|
000032  2000              MOVS     r0,#0                 ;191
000034  e7fc              B        |L5.48|
                  |L5.54|
000036  2d17              CMP      r5,#0x17              ;192
000038  d122              BNE      |L5.128|
00003a  6960              LDR      r0,[r4,#0x14]         ;194
00003c  8c40              LDRH     r0,[r0,#0x22]         ;194
00003e  f0400040          ORR      r0,r0,#0x40           ;194
000042  6961              LDR      r1,[r4,#0x14]         ;194
000044  8448              STRH     r0,[r1,#0x22]         ;194
000046  2016              MOVS     r0,#0x16              ;195
000048  9000              STR      r0,[sp,#0]            ;195
00004a  4632              MOV      r2,r6                 ;195
00004c  4639              MOV      r1,r7                 ;195
00004e  4620              MOV      r0,r4                 ;195
000050  68e3              LDR      r3,[r4,#0xc]          ;195
000052  f7fffffe          BL       callbinTM
000056  b198              CBZ      r0,|L5.128|
000058  6960              LDR      r0,[r4,#0x14]         ;196
00005a  8c40              LDRH     r0,[r0,#0x22]         ;196
00005c  f0800040          EOR      r0,r0,#0x40           ;196
000060  6961              LDR      r1,[r4,#0x14]         ;196
000062  8448              STRH     r0,[r1,#0x22]         ;196
000064  68e0              LDR      r0,[r4,#0xc]          ;197
000066  7a00              LDRB     r0,[r0,#8]            ;197
000068  b130              CBZ      r0,|L5.120|
00006a  68e0              LDR      r0,[r4,#0xc]          ;197
00006c  7a00              LDRB     r0,[r0,#8]            ;197
00006e  2801              CMP      r0,#1                 ;197
000070  d104              BNE      |L5.124|
000072  68e0              LDR      r0,[r4,#0xc]          ;197
000074  6800              LDR      r0,[r0,#0]            ;197
000076  b908              CBNZ     r0,|L5.124|
                  |L5.120|
000078  2001              MOVS     r0,#1                 ;197
00007a  e7d9              B        |L5.48|
                  |L5.124|
00007c  2000              MOVS     r0,#0                 ;197
00007e  e7d7              B        |L5.48|
                  |L5.128|
000080  463a              MOV      r2,r7                 ;201
000082  4631              MOV      r1,r6                 ;201
000084  4620              MOV      r0,r4                 ;201
000086  f7fffffe          BL       luaG_ordererror
00008a  2000              MOVS     r0,#0                 ;202
00008c  e7d0              B        |L5.48|
;;;204    
                          ENDP


                          AREA ||i.luaT_callorderiTM||, CODE, READONLY, ALIGN=1

                  luaT_callorderiTM PROC
;;;205    
;;;206    int luaT_callorderiTM (lua_State *L, const TValue *p1, int v2,
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;207                           int inv, TMS event) {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
00000c  f8dd9030          LDR      r9,[sp,#0x30]
;;;208      TValue aux; const TValue *p2;
;;;209      setivalue(&aux, v2);
000010  4668              MOV      r0,sp
000012  17e1              ASRS     r1,r4,#31
000014  e9c04100          STRD     r4,r1,[r0,#0]
000018  2123              MOVS     r1,#0x23
00001a  7201              STRB     r1,[r0,#8]
;;;210      if (inv) {  /* arguments were exchanged? */
00001c  b117              CBZ      r7,|L6.36|
;;;211        p2 = p1; p1 = &aux;  /* correct them */
00001e  4635              MOV      r5,r6
000020  466e              MOV      r6,sp
000022  e000              B        |L6.38|
                  |L6.36|
;;;212      }
;;;213      else
;;;214        p2 = &aux;
000024  466d              MOV      r5,sp
                  |L6.38|
;;;215      return luaT_callorderTM(L, p1, p2, event);
000026  464b              MOV      r3,r9
000028  462a              MOV      r2,r5
00002a  4631              MOV      r1,r6
00002c  4640              MOV      r0,r8
00002e  f7fffffe          BL       luaT_callorderTM
;;;216    }
000032  b004              ADD      sp,sp,#0x10
000034  e8bd87f0          POP      {r4-r10,pc}
;;;217    
                          ENDP


                          AREA ||i.luaT_gettm||, CODE, READONLY, ALIGN=1

                  luaT_gettm PROC
;;;60     */
;;;61     const TValue *luaT_gettm (Table *events, TMS event, TString *ename) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;62       const TValue *tm = luaH_getshortstr(events, ename);
00000a  4631              MOV      r1,r6
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       luaH_getshortstr
000012  4607              MOV      r7,r0
;;;63       lua_assert(event <= TM_EQ);
;;;64       if (notm(tm)) {  /* no tag method? */
000014  7a38              LDRB     r0,[r7,#8]
000016  f000000f          AND      r0,r0,#0xf
00001a  b940              CBNZ     r0,|L7.46|
;;;65         events->flags |= cast_byte(1u<<event);  /* cache this fact */
00001c  79a0              LDRB     r0,[r4,#6]
00001e  2101              MOVS     r1,#1
000020  40a9              LSLS     r1,r1,r5
000022  b2c9              UXTB     r1,r1
000024  4308              ORRS     r0,r0,r1
000026  71a0              STRB     r0,[r4,#6]
;;;66         return NULL;
000028  2000              MOVS     r0,#0
                  |L7.42|
;;;67       }
;;;68       else return tm;
;;;69     }
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L7.46|
00002e  4638              MOV      r0,r7                 ;68
000030  e7fb              B        |L7.42|
;;;70     
                          ENDP


                          AREA ||i.luaT_gettmbyobj||, CODE, READONLY, ALIGN=2

                  luaT_gettmbyobj PROC
;;;71     
;;;72     const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o, TMS event) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
;;;73       Table *mt;
;;;74       switch (ttype(o)) {
00000a  7a20              LDRB     r0,[r4,#8]
00000c  f000000f          AND      r0,r0,#0xf
000010  2805              CMP      r0,#5
000012  d002              BEQ      |L8.26|
000014  2807              CMP      r0,#7
000016  d106              BNE      |L8.38|
000018  e002              B        |L8.32|
                  |L8.26|
;;;75         case LUA_TTABLE:
;;;76           mt = hvalue(o)->metatable;
00001a  6820              LDR      r0,[r4,#0]
00001c  6985              LDR      r5,[r0,#0x18]
;;;77           break;
00001e  e00b              B        |L8.56|
                  |L8.32|
;;;78         case LUA_TUSERDATA:
;;;79           mt = uvalue(o)->metatable;
000020  6820              LDR      r0,[r4,#0]
000022  68c5              LDR      r5,[r0,#0xc]
;;;80           break;
000024  e008              B        |L8.56|
                  |L8.38|
;;;81         default:
;;;82           mt = G(L)->mt[ttype(o)];
000026  6930              LDR      r0,[r6,#0x10]
000028  f5007080          ADD      r0,r0,#0x100
00002c  7a21              LDRB     r1,[r4,#8]
00002e  f001010f          AND      r1,r1,#0xf
000032  f8505021          LDR      r5,[r0,r1,LSL #2]
000036  bf00              NOP                            ;74
                  |L8.56|
000038  bf00              NOP                            ;77
;;;83       }
;;;84       return (mt ? luaH_getshortstr(mt, G(L)->tmname[event]) : luaO_nilobject);
00003a  b145              CBZ      r5,|L8.78|
00003c  6930              LDR      r0,[r6,#0x10]
00003e  3098              ADDS     r0,r0,#0x98
000040  f8501027          LDR      r1,[r0,r7,LSL #2]
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       luaH_getshortstr
                  |L8.74|
;;;85     }
00004a  e8bd81f0          POP      {r4-r8,pc}
                  |L8.78|
00004e  4801              LDR      r0,|L8.84|
000050  e7fb              B        |L8.74|
;;;86     
                          ENDP

000052  0000              DCW      0x0000
                  |L8.84|
                          DCD      luaO_nilobject_

                          AREA ||i.luaT_getvarargs||, CODE, READONLY, ALIGN=1

                  luaT_getvarargs PROC
;;;238    
;;;239    void luaT_getvarargs (lua_State *L, CallInfo *ci, StkId where, int wanted) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4605              MOV      r5,r0
000006  4689              MOV      r9,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;240      int i;
;;;241      int nextra = ci->u.l.nextraargs;
00000c  f8d96018          LDR      r6,[r9,#0x18]
;;;242      if (wanted < 0) {
000010  f1b80f00          CMP      r8,#0
000014  da1e              BGE      |L9.84|
;;;243        wanted = nextra;  /* get all extra arguments available */
000016  46b0              MOV      r8,r6
;;;244        checkstackp(L, nextra, where);  /* ensure stack space */
000018  68e9              LDR      r1,[r5,#0xc]
00001a  69e8              LDR      r0,[r5,#0x1c]
00001c  1a40              SUBS     r0,r0,r1
00001e  ebb61f20          CMP      r6,r0,ASR #4
000022  db13              BLT      |L9.76|
000024  6a28              LDR      r0,[r5,#0x20]
000026  eba70a00          SUB      r10,r7,r0
00002a  6928              LDR      r0,[r5,#0x10]
00002c  68c0              LDR      r0,[r0,#0xc]
00002e  2800              CMP      r0,#0
000030  dd03              BLE      |L9.58|
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       luaC_step
000038  bf00              NOP      
                  |L9.58|
00003a  2201              MOVS     r2,#1
00003c  4631              MOV      r1,r6
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       luaD_growstack
000044  6a28              LDR      r0,[r5,#0x20]
000046  eb00070a          ADD      r7,r0,r10
00004a  e000              B        |L9.78|
                  |L9.76|
00004c  bf00              NOP      
                  |L9.78|
;;;245        L->top = where + nextra;  /* next instruction will need top */
00004e  eb071006          ADD      r0,r7,r6,LSL #4
000052  60e8              STR      r0,[r5,#0xc]
                  |L9.84|
;;;246      }
;;;247      for (i = 0; i < wanted && i < nextra; i++)
000054  2400              MOVS     r4,#0
000056  e00e              B        |L9.118|
                  |L9.88|
;;;248        setobjs2s(L, where + i, ci->func - nextra + i);
000058  eb071004          ADD      r0,r7,r4,LSL #4
00005c  f8d92000          LDR      r2,[r9,#0]
000060  eba21206          SUB      r2,r2,r6,LSL #4
000064  eb021104          ADD      r1,r2,r4,LSL #4
000068  e9d12300          LDRD     r2,r3,[r1,#0]
00006c  e9c02300          STRD     r2,r3,[r0,#0]
000070  7a0a              LDRB     r2,[r1,#8]
000072  7202              STRB     r2,[r0,#8]
000074  1c64              ADDS     r4,r4,#1              ;247
                  |L9.118|
000076  4544              CMP      r4,r8                 ;247
000078  da01              BGE      |L9.126|
00007a  42b4              CMP      r4,r6                 ;247
00007c  dbec              BLT      |L9.88|
                  |L9.126|
;;;249      for (; i < wanted; i++)   /* complete required results with nil */
00007e  e004              B        |L9.138|
                  |L9.128|
;;;250        setnilvalue(s2v(where + i));
000080  2000              MOVS     r0,#0
000082  eb071104          ADD      r1,r7,r4,LSL #4
000086  7208              STRB     r0,[r1,#8]
000088  1c64              ADDS     r4,r4,#1              ;249
                  |L9.138|
00008a  4544              CMP      r4,r8                 ;249
00008c  dbf8              BLT      |L9.128|
;;;251    }
00008e  e8bd87f0          POP      {r4-r10,pc}
;;;252    
                          ENDP


                          AREA ||i.luaT_init||, CODE, READONLY, ALIGN=2

                  luaT_init PROC
;;;37     
;;;38     void luaT_init (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;39       static const char *const luaT_eventname[] = {  /* ORDER TM */
;;;40         "__index", "__newindex",
;;;41         "__undef", "__isdef",
;;;42         "__gc", "__mode", "__len", "__eq",
;;;43         "__add", "__sub", "__mul", "__mod", "__pow",
;;;44         "__div", "__idiv",
;;;45         "__band", "__bor", "__bxor", "__shl", "__shr",
;;;46         "__unm", "__bnot", "__lt", "__le",
;;;47         "__concat", "__call"
;;;48       };
;;;49       int i;
;;;50       for (i=0; i<TM_N; i++) {
000004  2400              MOVS     r4,#0
000006  e011              B        |L10.44|
                  |L10.8|
;;;51         G(L)->tmname[i] = luaS_new(L, luaT_eventname[i]);
000008  480a              LDR      r0,|L10.52|
00000a  f8501024          LDR      r1,[r0,r4,LSL #2]
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       luaS_new
000014  6929              LDR      r1,[r5,#0x10]
000016  3198              ADDS     r1,r1,#0x98
000018  f8410024          STR      r0,[r1,r4,LSL #2]
;;;52         luaC_fix(L, obj2gco(G(L)->tmname[i]));  /* never collect these names */
00001c  6928              LDR      r0,[r5,#0x10]
00001e  3098              ADDS     r0,r0,#0x98
000020  f8501024          LDR      r1,[r0,r4,LSL #2]
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       luaC_fix
00002a  1c64              ADDS     r4,r4,#1              ;50
                  |L10.44|
00002c  2c1a              CMP      r4,#0x1a              ;50
00002e  dbeb              BLT      |L10.8|
;;;53       }
;;;54     }
000030  bd70              POP      {r4-r6,pc}
;;;55     
                          ENDP

000032  0000              DCW      0x0000
                  |L10.52|
                          DCD      luaT_eventname

                          AREA ||i.luaT_keydef||, CODE, READONLY, ALIGN=2

                  luaT_keydef PROC
;;;253    
;;;254    int luaT_keydef (lua_State *L, TValue *obj, TValue *key, int remove) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4692              MOV      r10,r2
00000a  461f              MOV      r7,r3
;;;255      const TValue *tm;
;;;256      TMS event = remove ? TM_UNDEF : TM_ISDEF;
00000c  b10f              CBZ      r7,|L11.18|
00000e  2002              MOVS     r0,#2
000010  e000              B        |L11.20|
                  |L11.18|
000012  2003              MOVS     r0,#3
                  |L11.20|
000014  4680              MOV      r8,r0
;;;257      if (!ttistable(obj)) {  /* not a table? */
000016  7a30              LDRB     r0,[r6,#8]
000018  2845              CMP      r0,#0x45
00001a  d015              BEQ      |L11.72|
;;;258        tm = luaT_gettmbyobj(L, obj, event);  /* get its metamethod */
00001c  4642              MOV      r2,r8
00001e  4631              MOV      r1,r6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       luaT_gettmbyobj
000026  4605              MOV      r5,r0
;;;259        if (notm(tm)) {  /* no metamethod? */
000028  7a28              LDRB     r0,[r5,#8]
00002a  f000000f          AND      r0,r0,#0xf
00002e  2800              CMP      r0,#0
000030  d13e              BNE      |L11.176|
;;;260          const char *msg = remove ? "remove key from" : "check key from";
000032  b10f              CBZ      r7,|L11.56|
000034  a029              ADR      r0,|L11.220|
000036  e000              B        |L11.58|
                  |L11.56|
000038  a02c              ADR      r0,|L11.236|
                  |L11.58|
00003a  4681              MOV      r9,r0
;;;261          luaG_typeerror(L, obj, msg);  /* error */
00003c  464a              MOV      r2,r9
00003e  4631              MOV      r1,r6
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       luaG_typeerror
;;;262        }
000046  e033              B        |L11.176|
                  |L11.72|
;;;263        /* else will call metamethod 'tm' */
;;;264      }
;;;265      else {  /* 'obj' is a table */
;;;266        Table *t = hvalue(obj);
000048  f8d69000          LDR      r9,[r6,#0]
;;;267        tm = fasttm(L, t->metatable, event);
00004c  f8d90018          LDR      r0,[r9,#0x18]
000050  b908              CBNZ     r0,|L11.86|
000052  2000              MOVS     r0,#0
000054  e012              B        |L11.124|
                  |L11.86|
000056  f8d90018          LDR      r0,[r9,#0x18]
00005a  7980              LDRB     r0,[r0,#6]
00005c  2101              MOVS     r1,#1
00005e  fa01f108          LSL      r1,r1,r8
000062  4008              ANDS     r0,r0,r1
000064  b108              CBZ      r0,|L11.106|
000066  2000              MOVS     r0,#0
000068  e008              B        |L11.124|
                  |L11.106|
00006a  6921              LDR      r1,[r4,#0x10]
00006c  3198              ADDS     r1,r1,#0x98
00006e  f8512028          LDR      r2,[r1,r8,LSL #2]
000072  4641              MOV      r1,r8
000074  f8d90018          LDR      r0,[r9,#0x18]
000078  f7fffffe          BL       luaT_gettm
                  |L11.124|
00007c  4605              MOV      r5,r0
;;;268        if (tm == NULL) {  /* no metamethod? */
00007e  b9b5              CBNZ     r5,|L11.174|
;;;269          const TValue *val = luaH_get(t, key);  /* get entry */
000080  4651              MOV      r1,r10
000082  4648              MOV      r0,r9
000084  f7fffffe          BL       luaH_get
000088  4683              MOV      r11,r0
;;;270          int res = !isempty(val);  /* true if entry is not empty */
00008a  f89b0008          LDRB     r0,[r11,#8]
00008e  f000000f          AND      r0,r0,#0xf
000092  b108              CBZ      r0,|L11.152|
000094  2001              MOVS     r0,#1
000096  e000              B        |L11.154|
                  |L11.152|
000098  2000              MOVS     r0,#0
                  |L11.154|
00009a  9000              STR      r0,[sp,#0]
;;;271          if (remove && res)  /* key is present and should be removed? */
00009c  b127              CBZ      r7,|L11.168|
00009e  9800              LDR      r0,[sp,#0]
0000a0  b110              CBZ      r0,|L11.168|
;;;272            setempty(cast(TValue*, val));  /* remove it */
0000a2  2010              MOVS     r0,#0x10
0000a4  f88b0008          STRB     r0,[r11,#8]
                  |L11.168|
;;;273          return res;
0000a8  9800              LDR      r0,[sp,#0]
                  |L11.170|
;;;274        }
;;;275        /* else will call metamethod 'tm' */
;;;276      }
;;;277      luaT_callTMres(L, tm, obj, key, L->top);
;;;278      return !l_isfalse(s2v(L->top));
;;;279    }
0000aa  e8bd8ff8          POP      {r3-r11,pc}
                  |L11.174|
0000ae  bf00              NOP                            ;276
                  |L11.176|
0000b0  68e0              LDR      r0,[r4,#0xc]          ;277
0000b2  4653              MOV      r3,r10                ;277
0000b4  4632              MOV      r2,r6                 ;277
0000b6  4629              MOV      r1,r5                 ;277
0000b8  9000              STR      r0,[sp,#0]            ;277
0000ba  4620              MOV      r0,r4                 ;277
0000bc  f7fffffe          BL       luaT_callTMres
0000c0  68e0              LDR      r0,[r4,#0xc]          ;278
0000c2  7a00              LDRB     r0,[r0,#8]            ;278
0000c4  b140              CBZ      r0,|L11.216|
0000c6  68e0              LDR      r0,[r4,#0xc]          ;278
0000c8  7a00              LDRB     r0,[r0,#8]            ;278
0000ca  2801              CMP      r0,#1                 ;278
0000cc  d102              BNE      |L11.212|
0000ce  68e0              LDR      r0,[r4,#0xc]          ;278
0000d0  6800              LDR      r0,[r0,#0]            ;278
0000d2  b108              CBZ      r0,|L11.216|
                  |L11.212|
0000d4  2001              MOVS     r0,#1                 ;278
0000d6  e7e8              B        |L11.170|
                  |L11.216|
0000d8  2000              MOVS     r0,#0                 ;278
0000da  e7e6              B        |L11.170|
                          ENDP

                  |L11.220|
0000dc  72656d6f          DCB      "remove key from",0
0000e0  7665206b
0000e4  65792066
0000e8  726f6d00
                  |L11.236|
0000ec  63686563          DCB      "check key from",0
0000f0  6b206b65
0000f4  79206672
0000f8  6f6d00  
0000fb  00                DCB      0

                          AREA ||i.luaT_objtypename||, CODE, READONLY, ALIGN=2

                  luaT_objtypename PROC
;;;91     */
;;;92     const char *luaT_objtypename (lua_State *L, const TValue *o) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
;;;93       Table *mt;
;;;94       if ((ttistable(o) && (mt = hvalue(o)->metatable) != NULL) ||
000008  7a20              LDRB     r0,[r4,#8]
00000a  2845              CMP      r0,#0x45
00000c  d102              BNE      |L12.20|
00000e  6820              LDR      r0,[r4,#0]
000010  6985              LDR      r5,[r0,#0x18]
000012  b945              CBNZ     r5,|L12.38|
                  |L12.20|
;;;95           (ttisfulluserdata(o) && (mt = uvalue(o)->metatable) != NULL)) {
000014  7a20              LDRB     r0,[r4,#8]
000016  f000000f          AND      r0,r0,#0xf
00001a  2807              CMP      r0,#7
00001c  d117              BNE      |L12.78|
00001e  6820              LDR      r0,[r4,#0]
000020  68c0              LDR      r0,[r0,#0xc]
000022  1e05              SUBS     r5,r0,#0
000024  d013              BEQ      |L12.78|
                  |L12.38|
;;;96         const TValue *name = luaH_getshortstr(mt, luaS_new(L, "__name"));
000026  a10e              ADR      r1,|L12.96|
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       luaS_new
00002e  4680              MOV      r8,r0
000030  4641              MOV      r1,r8
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       luaH_getshortstr
000038  4606              MOV      r6,r0
;;;97         if (ttisstring(name))  /* is '__name' a string? */
00003a  7a30              LDRB     r0,[r6,#8]
00003c  f000000f          AND      r0,r0,#0xf
000040  2804              CMP      r0,#4
000042  d103              BNE      |L12.76|
;;;98           return getstr(tsvalue(name));  /* use it as type name */
000044  6830              LDR      r0,[r6,#0]
000046  3010              ADDS     r0,r0,#0x10
                  |L12.72|
;;;99       }
;;;100      return ttypename(ttype(o));  /* else use standard type name */
;;;101    }
000048  e8bd81f0          POP      {r4-r8,pc}
                  |L12.76|
00004c  bf00              NOP                            ;99
                  |L12.78|
00004e  7a20              LDRB     r0,[r4,#8]            ;100
000050  f000000f          AND      r0,r0,#0xf            ;100
000054  1c40              ADDS     r0,r0,#1              ;100
000056  4904              LDR      r1,|L12.104|
000058  f8510020          LDR      r0,[r1,r0,LSL #2]     ;100
00005c  e7f4              B        |L12.72|
;;;102    
                          ENDP

00005e  0000              DCW      0x0000
                  |L12.96|
000060  5f5f6e61          DCB      "__name",0
000064  6d6500  
000067  00                DCB      0
                  |L12.104|
                          DCD      luaT_typenames_

                          AREA ||i.luaT_trybinTM||, CODE, READONLY, ALIGN=2

                  luaT_trybinTM PROC
;;;148    
;;;149    void luaT_trybinTM (lua_State *L, const TValue *p1, const TValue *p2,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;150                        StkId res, TMS event) {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  4698              MOV      r8,r3
00000c  9e08              LDR      r6,[sp,#0x20]
;;;151      if (!callbinTM(L, p1, p2, res, event)) {
00000e  4643              MOV      r3,r8
000010  462a              MOV      r2,r5
000012  4621              MOV      r1,r4
000014  4638              MOV      r0,r7
000016  9600              STR      r6,[sp,#0]
000018  f7fffffe          BL       callbinTM
00001c  2800              CMP      r0,#0
00001e  d134              BNE      |L13.138|
;;;152        switch (event) {
000020  f1a6000f          SUB      r0,r6,#0xf
000024  280a              CMP      r0,#0xa
000026  d228              BCS      |L13.122|
000028  e8dff000          TBB      [pc,r0]
00002c  0b0c0d0e          DCB      0x0b,0x0c,0x0d,0x0e
000030  0f271027          DCB      0x0f,0x27,0x10,0x27
000034  2705              DCB      0x27,0x05
;;;153          case TM_CONCAT:
;;;154            luaG_concaterror(L, p1, p2);
000036  462a              MOV      r2,r5
000038  4621              MOV      r1,r4
00003a  4638              MOV      r0,r7
00003c  f7fffffe          BL       luaG_concaterror
;;;155          /* call never returns, but to avoid warnings: *//* FALLTHROUGH */
;;;156          case TM_BAND: case TM_BOR: case TM_BXOR:
000040  bf00              NOP      
000042  bf00              NOP      
000044  bf00              NOP      
;;;157          case TM_SHL: case TM_SHR: case TM_BNOT: {
000046  bf00              NOP      
000048  bf00              NOP      
00004a  bf00              NOP      
;;;158            if (ttisnumber(p1) && ttisnumber(p2))
00004c  7a20              LDRB     r0,[r4,#8]
00004e  f000000f          AND      r0,r0,#0xf
000052  2803              CMP      r0,#3
000054  d10a              BNE      |L13.108|
000056  7a28              LDRB     r0,[r5,#8]
000058  f000000f          AND      r0,r0,#0xf
00005c  2803              CMP      r0,#3
00005e  d105              BNE      |L13.108|
;;;159              luaG_tointerror(L, p1, p2);
000060  462a              MOV      r2,r5
000062  4621              MOV      r1,r4
000064  4638              MOV      r0,r7
000066  f7fffffe          BL       luaG_tointerror
00006a  e005              B        |L13.120|
                  |L13.108|
;;;160            else
;;;161              luaG_opinterror(L, p1, p2, "perform bitwise operation on");
00006c  a308              ADR      r3,|L13.144|
00006e  462a              MOV      r2,r5
000070  4621              MOV      r1,r4
000072  4638              MOV      r0,r7
000074  f7fffffe          BL       luaG_opinterror
                  |L13.120|
;;;162          }
;;;163          /* calls never return, but to avoid warnings: *//* FALLTHROUGH */
;;;164          default:
000078  bf00              NOP      
                  |L13.122|
;;;165            luaG_opinterror(L, p1, p2, "perform arithmetic on");
00007a  a30d              ADR      r3,|L13.176|
00007c  462a              MOV      r2,r5
00007e  4621              MOV      r1,r4
000080  4638              MOV      r0,r7
000082  f7fffffe          BL       luaG_opinterror
000086  bf00              NOP                            ;152
000088  bf00              NOP                            ;152
                  |L13.138|
;;;166        }
;;;167      }
;;;168    }
00008a  e8bd83f8          POP      {r3-r9,pc}
;;;169    
                          ENDP

00008e  0000              DCW      0x0000
                  |L13.144|
000090  70657266          DCB      "perform bitwise operation on",0
000094  6f726d20
000098  62697477
00009c  69736520
0000a0  6f706572
0000a4  6174696f
0000a8  6e206f6e
0000ac  00      
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L13.176|
0000b0  70657266          DCB      "perform arithmetic on",0
0000b4  6f726d20
0000b8  61726974
0000bc  686d6574
0000c0  6963206f
0000c4  6e00    
0000c6  00                DCB      0
0000c7  00                DCB      0

                          AREA ||i.luaT_trybinassocTM||, CODE, READONLY, ALIGN=1

                  luaT_trybinassocTM PROC
;;;170    
;;;171    void luaT_trybinassocTM (lua_State *L, const TValue *p1, const TValue *p2,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;172                                           StkId res, int inv, TMS event) {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  4698              MOV      r8,r3
00000c  e9dd9608          LDRD     r9,r6,[sp,#0x20]
;;;173      if (inv)
000010  f1b90f00          CMP      r9,#0
000014  d007              BEQ      |L14.38|
;;;174        luaT_trybinTM(L, p2, p1, res, event);
000016  4643              MOV      r3,r8
000018  4622              MOV      r2,r4
00001a  4629              MOV      r1,r5
00001c  4638              MOV      r0,r7
00001e  9600              STR      r6,[sp,#0]
000020  f7fffffe          BL       luaT_trybinTM
000024  e006              B        |L14.52|
                  |L14.38|
;;;175      else
;;;176        luaT_trybinTM(L, p1, p2, res, event);
000026  4643              MOV      r3,r8
000028  462a              MOV      r2,r5
00002a  4621              MOV      r1,r4
00002c  4638              MOV      r0,r7
00002e  9600              STR      r6,[sp,#0]
000030  f7fffffe          BL       luaT_trybinTM
                  |L14.52|
;;;177    }
000034  e8bd83f8          POP      {r3-r9,pc}
;;;178    
                          ENDP


                          AREA ||i.luaT_trybiniTM||, CODE, READONLY, ALIGN=1

                  luaT_trybiniTM PROC
;;;179    
;;;180    void luaT_trybiniTM (lua_State *L, const TValue *p1, int i2,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;181                                       int inv, StkId res, TMS event) {
000004  b087              SUB      sp,sp,#0x1c
000006  4606              MOV      r6,r0
000008  460f              MOV      r7,r1
00000a  4614              MOV      r4,r2
00000c  461d              MOV      r5,r3
00000e  e9dd890e          LDRD     r8,r9,[sp,#0x38]
;;;182      TValue aux;
;;;183      setivalue(&aux, i2);
000012  a802              ADD      r0,sp,#8
000014  17e1              ASRS     r1,r4,#31
000016  e9c04100          STRD     r4,r1,[r0,#0]
00001a  2123              MOVS     r1,#0x23
00001c  7201              STRB     r1,[r0,#8]
;;;184      luaT_trybinassocTM(L, p1, &aux, res, inv, event);
00001e  4643              MOV      r3,r8
000020  aa02              ADD      r2,sp,#8
000022  4639              MOV      r1,r7
000024  4630              MOV      r0,r6
000026  e9cd5900          STRD     r5,r9,[sp,#0]
00002a  f7fffffe          BL       luaT_trybinassocTM
;;;185    }
00002e  b007              ADD      sp,sp,#0x1c
000030  e8bd83f0          POP      {r4-r9,pc}
;;;186    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  udatatypename
000000  75736572          DCB      0x75,0x73,0x65,0x72
000004  64617461          DCB      0x64,0x61,0x74,0x61
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  luaT_typenames_
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0x10
                          DCD      udatatypename
                          DCD      ||.conststring||+0x18
                          DCD      ||.conststring||+0x20
                          DCD      ||.conststring||+0x28
                          DCD      ||.conststring||+0x30
                          DCD      udatatypename
                          DCD      ||.conststring||+0x3c
                          DCD      ||.conststring||+0x44
                          DCD      ||.conststring||+0x4c
                  luaT_eventname
                          DCD      ||.conststring||+0x54
                          DCD      ||.conststring||+0x5c
                          DCD      ||.conststring||+0x68
                          DCD      ||.conststring||+0x70
                          DCD      ||.conststring||+0x78
                          DCD      ||.conststring||+0x80
                          DCD      ||.conststring||+0x88
                          DCD      ||.conststring||+0x90
                          DCD      ||.conststring||+0x98
                          DCD      ||.conststring||+0xa0
                          DCD      ||.conststring||+0xa8
                          DCD      ||.conststring||+0xb0
                          DCD      ||.conststring||+0xb8
                          DCD      ||.conststring||+0xc0
                          DCD      ||.conststring||+0xc8
                          DCD      ||.conststring||+0xd0
                          DCD      ||.conststring||+0xd8
                          DCD      ||.conststring||+0xe0
                          DCD      ||.conststring||+0xe8
                          DCD      ||.conststring||+0xf0
                          DCD      ||.conststring||+0xf8
                          DCD      ||.conststring||+0x100
                          DCD      ||.conststring||+0x108
                          DCD      ||.conststring||+0x110
                          DCD      ||.conststring||+0x118
                          DCD      ||.conststring||+0x124

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  6e6f2076          DCB      "no value",0
000004  616c7565
000008  00      
000009  00                DCB      0
00000a  00                DCB      0
00000b  00                DCB      0
00000c  6e696c00          DCB      "nil",0
000010  626f6f6c          DCB      "boolean",0
000014  65616e00
000018  6e756d62          DCB      "number",0
00001c  657200  
00001f  00                DCB      0
000020  73747269          DCB      "string",0
000024  6e6700  
000027  00                DCB      0
000028  7461626c          DCB      "table",0
00002c  6500    
00002e  00                DCB      0
00002f  00                DCB      0
000030  66756e63          DCB      "function",0
000034  74696f6e
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0
00003c  74687265          DCB      "thread",0
000040  616400  
000043  00                DCB      0
000044  75707661          DCB      "upvalue",0
000048  6c756500
00004c  70726f74          DCB      "proto",0
000050  6f00    
000052  00                DCB      0
000053  00                DCB      0
000054  5f5f696e          DCB      "__index",0
000058  64657800
00005c  5f5f6e65          DCB      "__newindex",0
000060  77696e64
000064  657800  
000067  00                DCB      0
000068  5f5f756e          DCB      "__undef",0
00006c  64656600
000070  5f5f6973          DCB      "__isdef",0
000074  64656600
000078  5f5f6763          DCB      "__gc",0
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
000080  5f5f6d6f          DCB      "__mode",0
000084  646500  
000087  00                DCB      0
000088  5f5f6c65          DCB      "__len",0
00008c  6e00    
00008e  00                DCB      0
00008f  00                DCB      0
000090  5f5f6571          DCB      "__eq",0
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
000098  5f5f6164          DCB      "__add",0
00009c  6400    
00009e  00                DCB      0
00009f  00                DCB      0
0000a0  5f5f7375          DCB      "__sub",0
0000a4  6200    
0000a6  00                DCB      0
0000a7  00                DCB      0
0000a8  5f5f6d75          DCB      "__mul",0
0000ac  6c00    
0000ae  00                DCB      0
0000af  00                DCB      0
0000b0  5f5f6d6f          DCB      "__mod",0
0000b4  6400    
0000b6  00                DCB      0
0000b7  00                DCB      0
0000b8  5f5f706f          DCB      "__pow",0
0000bc  7700    
0000be  00                DCB      0
0000bf  00                DCB      0
0000c0  5f5f6469          DCB      "__div",0
0000c4  7600    
0000c6  00                DCB      0
0000c7  00                DCB      0
0000c8  5f5f6964          DCB      "__idiv",0
0000cc  697600  
0000cf  00                DCB      0
0000d0  5f5f6261          DCB      "__band",0
0000d4  6e6400  
0000d7  00                DCB      0
0000d8  5f5f626f          DCB      "__bor",0
0000dc  7200    
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  5f5f6278          DCB      "__bxor",0
0000e4  6f7200  
0000e7  00                DCB      0
0000e8  5f5f7368          DCB      "__shl",0
0000ec  6c00    
0000ee  00                DCB      0
0000ef  00                DCB      0
0000f0  5f5f7368          DCB      "__shr",0
0000f4  7200    
0000f6  00                DCB      0
0000f7  00                DCB      0
0000f8  5f5f756e          DCB      "__unm",0
0000fc  6d00    
0000fe  00                DCB      0
0000ff  00                DCB      0
000100  5f5f626e          DCB      "__bnot",0
000104  6f7400  
000107  00                DCB      0
000108  5f5f6c74          DCB      "__lt",0
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0
000110  5f5f6c65          DCB      "__le",0
000114  00      
000115  00                DCB      0
000116  00                DCB      0
000117  00                DCB      0
000118  5f5f636f          DCB      "__concat",0
00011c  6e636174
000120  00      
000121  00                DCB      0
000122  00                DCB      0
000123  00                DCB      0
000124  5f5f6361          DCB      "__call",0
000128  6c6c00  
