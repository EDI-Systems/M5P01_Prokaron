; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\llex.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\llex.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\llex.crf ..\..\..\M6P1(L)_Lua\lua\llex.c]
                          THUMB

                          AREA ||i.check_next1||, CODE, READONLY, ALIGN=1

                  check_next1 PROC
;;;185    
;;;186    static int check_next1 (LexState *ls, int c) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;187      if (ls->current == c) {
000006  6820              LDR      r0,[r4,#0]
000008  42a8              CMP      r0,r5
00000a  d112              BNE      |L1.50|
;;;188        next(ls);
00000c  6ba0              LDR      r0,[r4,#0x38]
00000e  6801              LDR      r1,[r0,#0]
000010  1e48              SUBS     r0,r1,#1
000012  6ba2              LDR      r2,[r4,#0x38]
000014  6010              STR      r0,[r2,#0]
000016  b131              CBZ      r1,|L1.38|
000018  6ba0              LDR      r0,[r4,#0x38]
00001a  6841              LDR      r1,[r0,#4]
00001c  1c48              ADDS     r0,r1,#1
00001e  6ba2              LDR      r2,[r4,#0x38]
000020  6050              STR      r0,[r2,#4]
000022  7808              LDRB     r0,[r1,#0]
000024  e002              B        |L1.44|
                  |L1.38|
000026  6ba0              LDR      r0,[r4,#0x38]
000028  f7fffffe          BL       luaZ_fill
                  |L1.44|
00002c  6020              STR      r0,[r4,#0]
;;;189        return 1;
00002e  2001              MOVS     r0,#1
                  |L1.48|
;;;190      }
;;;191      else return 0;
;;;192    }
000030  bd70              POP      {r4-r6,pc}
                  |L1.50|
000032  2000              MOVS     r0,#0                 ;191
000034  e7fc              B        |L1.48|
;;;193    
                          ENDP


                          AREA ||i.check_next2||, CODE, READONLY, ALIGN=1

                  check_next2 PROC
;;;198    */
;;;199    static int check_next2 (LexState *ls, const char *set) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;200      lua_assert(set[2] == '\0');
;;;201      if (ls->current == set[0] || ls->current == set[1]) {
000006  f9951000          LDRSB    r1,[r5,#0]
00000a  6820              LDR      r0,[r4,#0]
00000c  4288              CMP      r0,r1
00000e  d004              BEQ      |L2.26|
000010  f9951001          LDRSB    r1,[r5,#1]
000014  6820              LDR      r0,[r4,#0]
000016  4288              CMP      r0,r1
000018  d116              BNE      |L2.72|
                  |L2.26|
;;;202        save_and_next(ls);
00001a  4620              MOV      r0,r4
00001c  6821              LDR      r1,[r4,#0]
00001e  f7fffffe          BL       save
000022  6ba0              LDR      r0,[r4,#0x38]
000024  6801              LDR      r1,[r0,#0]
000026  1e48              SUBS     r0,r1,#1
000028  6ba2              LDR      r2,[r4,#0x38]
00002a  6010              STR      r0,[r2,#0]
00002c  b131              CBZ      r1,|L2.60|
00002e  6ba0              LDR      r0,[r4,#0x38]
000030  6841              LDR      r1,[r0,#4]
000032  1c48              ADDS     r0,r1,#1
000034  6ba2              LDR      r2,[r4,#0x38]
000036  6050              STR      r0,[r2,#4]
000038  7808              LDRB     r0,[r1,#0]
00003a  e002              B        |L2.66|
                  |L2.60|
00003c  6ba0              LDR      r0,[r4,#0x38]
00003e  f7fffffe          BL       luaZ_fill
                  |L2.66|
000042  6020              STR      r0,[r4,#0]
;;;203        return 1;
000044  2001              MOVS     r0,#1
                  |L2.70|
;;;204      }
;;;205      else return 0;
;;;206    }
000046  bd70              POP      {r4-r6,pc}
                  |L2.72|
000048  2000              MOVS     r0,#0                 ;205
00004a  e7fc              B        |L2.70|
;;;207    
                          ENDP


                          AREA ||i.esccheck||, CODE, READONLY, ALIGN=1

                  esccheck PROC
;;;302    
;;;303    static void esccheck (LexState *ls, int c, const char *msg) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;304      if (!c) {
000008  b9ed              CBNZ     r5,|L3.70|
;;;305        if (ls->current != EOZ)
00000a  6820              LDR      r0,[r4,#0]
00000c  1c40              ADDS     r0,r0,#1
00000e  b1a0              CBZ      r0,|L3.58|
;;;306          save_and_next(ls);  /* add current to buffer for error message */
000010  4620              MOV      r0,r4
000012  6821              LDR      r1,[r4,#0]
000014  f7fffffe          BL       save
000018  6ba0              LDR      r0,[r4,#0x38]
00001a  6801              LDR      r1,[r0,#0]
00001c  1e48              SUBS     r0,r1,#1
00001e  6ba2              LDR      r2,[r4,#0x38]
000020  6010              STR      r0,[r2,#0]
000022  b131              CBZ      r1,|L3.50|
000024  6ba0              LDR      r0,[r4,#0x38]
000026  6841              LDR      r1,[r0,#4]
000028  1c48              ADDS     r0,r1,#1
00002a  6ba2              LDR      r2,[r4,#0x38]
00002c  6050              STR      r0,[r2,#4]
00002e  7808              LDRB     r0,[r1,#0]
000030  e002              B        |L3.56|
                  |L3.50|
000032  6ba0              LDR      r0,[r4,#0x38]
000034  f7fffffe          BL       luaZ_fill
                  |L3.56|
000038  6020              STR      r0,[r4,#0]
                  |L3.58|
;;;307        lexerror(ls, msg, TK_STRING);
00003a  f44f7293          MOV      r2,#0x126
00003e  4631              MOV      r1,r6
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       lexerror
                  |L3.70|
;;;308      }
;;;309    }
000046  bd70              POP      {r4-r6,pc}
;;;310    
                          ENDP


                          AREA ||i.gethexa||, CODE, READONLY, ALIGN=2

                  gethexa PROC
;;;311    
;;;312    static int gethexa (LexState *ls) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;313      save_and_next(ls);
000004  4620              MOV      r0,r4
000006  6821              LDR      r1,[r4,#0]
000008  f7fffffe          BL       save
00000c  6ba0              LDR      r0,[r4,#0x38]
00000e  6801              LDR      r1,[r0,#0]
000010  1e48              SUBS     r0,r1,#1
000012  6ba2              LDR      r2,[r4,#0x38]
000014  6010              STR      r0,[r2,#0]
000016  b131              CBZ      r1,|L4.38|
000018  6ba0              LDR      r0,[r4,#0x38]
00001a  6841              LDR      r1,[r0,#4]
00001c  1c48              ADDS     r0,r1,#1
00001e  6ba2              LDR      r2,[r4,#0x38]
000020  6050              STR      r0,[r2,#4]
000022  7808              LDRB     r0,[r1,#0]
000024  e002              B        |L4.44|
                  |L4.38|
000026  6ba0              LDR      r0,[r4,#0x38]
000028  f7fffffe          BL       luaZ_fill
                  |L4.44|
00002c  6020              STR      r0,[r4,#0]
;;;314      esccheck (ls, lisxdigit(ls->current), "hexadecimal digit expected");
00002e  6820              LDR      r0,[r4,#0]
000030  1c40              ADDS     r0,r0,#1
000032  4a06              LDR      r2,|L4.76|
000034  5c10              LDRB     r0,[r2,r0]
000036  f0000110          AND      r1,r0,#0x10
00003a  a205              ADR      r2,|L4.80|
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       esccheck
;;;315      return luaO_hexavalue(ls->current);
000042  6820              LDR      r0,[r4,#0]
000044  f7fffffe          BL       luaO_hexavalue
;;;316    }
000048  bd10              POP      {r4,pc}
;;;317    
                          ENDP

00004a  0000              DCW      0x0000
                  |L4.76|
                          DCD      luai_ctype_
                  |L4.80|
000050  68657861          DCB      "hexadecimal digit expected",0
000054  64656369
000058  6d616c20
00005c  64696769
000060  74206578
000064  70656374
000068  656400  
00006b  00                DCB      0

                          AREA ||i.inclinenumber||, CODE, READONLY, ALIGN=2

                  inclinenumber PROC
;;;150    */
;;;151    static void inclinenumber (LexState *ls) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;152      int old = ls->current;
000004  6825              LDR      r5,[r4,#0]
;;;153      lua_assert(currIsNewline(ls));
;;;154      next(ls);  /* skip '\n' or '\r' */
000006  6ba0              LDR      r0,[r4,#0x38]
000008  6801              LDR      r1,[r0,#0]
00000a  1e48              SUBS     r0,r1,#1
00000c  6ba2              LDR      r2,[r4,#0x38]
00000e  6010              STR      r0,[r2,#0]
000010  b131              CBZ      r1,|L5.32|
000012  6ba0              LDR      r0,[r4,#0x38]
000014  6841              LDR      r1,[r0,#4]
000016  1c48              ADDS     r0,r1,#1
000018  6ba2              LDR      r2,[r4,#0x38]
00001a  6050              STR      r0,[r2,#4]
00001c  7808              LDRB     r0,[r1,#0]
00001e  e002              B        |L5.38|
                  |L5.32|
000020  6ba0              LDR      r0,[r4,#0x38]
000022  f7fffffe          BL       luaZ_fill
                  |L5.38|
000026  6020              STR      r0,[r4,#0]
;;;155      if (currIsNewline(ls) && ls->current != old)
000028  6820              LDR      r0,[r4,#0]
00002a  280a              CMP      r0,#0xa
00002c  d002              BEQ      |L5.52|
00002e  6820              LDR      r0,[r4,#0]
000030  280d              CMP      r0,#0xd
000032  d113              BNE      |L5.92|
                  |L5.52|
000034  6820              LDR      r0,[r4,#0]
000036  42a8              CMP      r0,r5
000038  d010              BEQ      |L5.92|
;;;156        next(ls);  /* skip '\n\r' or '\r\n' */
00003a  6ba0              LDR      r0,[r4,#0x38]
00003c  6801              LDR      r1,[r0,#0]
00003e  1e48              SUBS     r0,r1,#1
000040  6ba2              LDR      r2,[r4,#0x38]
000042  6010              STR      r0,[r2,#0]
000044  b131              CBZ      r1,|L5.84|
000046  6ba0              LDR      r0,[r4,#0x38]
000048  6841              LDR      r1,[r0,#4]
00004a  1c48              ADDS     r0,r1,#1
00004c  6ba2              LDR      r2,[r4,#0x38]
00004e  6050              STR      r0,[r2,#4]
000050  7808              LDRB     r0,[r1,#0]
000052  e002              B        |L5.90|
                  |L5.84|
000054  6ba0              LDR      r0,[r4,#0x38]
000056  f7fffffe          BL       luaZ_fill
                  |L5.90|
00005a  6020              STR      r0,[r4,#0]
                  |L5.92|
;;;157      if (++ls->linenumber >= MAX_INT)
00005c  6860              LDR      r0,[r4,#4]
00005e  1c40              ADDS     r0,r0,#1
000060  f06f4100          MVN      r1,#0x80000000
000064  6060              STR      r0,[r4,#4]
000066  4288              CMP      r0,r1
000068  d104              BNE      |L5.116|
;;;158        lexerror(ls, "chunk has too many lines", 0);
00006a  2200              MOVS     r2,#0
00006c  a102              ADR      r1,|L5.120|
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       lexerror
                  |L5.116|
;;;159    }
000074  bd70              POP      {r4-r6,pc}
;;;160    
                          ENDP

000076  0000              DCW      0x0000
                  |L5.120|
000078  6368756e          DCB      "chunk has too many lines",0
00007c  6b206861
000080  7320746f
000084  6f206d61
000088  6e79206c
00008c  696e6573
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0

                          AREA ||i.lexerror||, CODE, READONLY, ALIGN=2

                  lexerror PROC
;;;108    
;;;109    static l_noret lexerror (LexState *ls, const char *msg, int token) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;110      msg = luaG_addinfo(ls->L, msg, ls->source, ls->linenumber);
00000a  4631              MOV      r1,r6
00000c  6863              LDR      r3,[r4,#4]
00000e  6ca2              LDR      r2,[r4,#0x48]
000010  6b60              LDR      r0,[r4,#0x34]
000012  f7fffffe          BL       luaG_addinfo
000016  4606              MOV      r6,r0
;;;111      if (token)
000018  b155              CBZ      r5,|L6.48|
;;;112        luaO_pushfstring(ls->L, "%s near %s", msg, txtToken(ls, token));
00001a  4629              MOV      r1,r5
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       txtToken
000022  4607              MOV      r7,r0
000024  463b              MOV      r3,r7
000026  4632              MOV      r2,r6
000028  a104              ADR      r1,|L6.60|
00002a  6b60              LDR      r0,[r4,#0x34]
00002c  f7fffffe          BL       luaO_pushfstring
                  |L6.48|
;;;113      luaD_throw(ls->L, LUA_ERRSYNTAX);
000030  2103              MOVS     r1,#3
000032  6b60              LDR      r0,[r4,#0x34]
000034  f7fffffe          BL       luaD_throw
;;;114    }
000038  e8bd81f0          POP      {r4-r8,pc}
;;;115    
                          ENDP

                  |L6.60|
00003c  2573206e          DCB      "%s near %s",0
000040  65617220
000044  257300  
000047  00                DCB      0

                          AREA ||i.llex||, CODE, READONLY, ALIGN=2

                  llex PROC
;;;428    
;;;429    static int llex (LexState *ls, SemInfo *seminfo) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;430      luaZ_resetbuffer(ls->buff);
000006  2000              MOVS     r0,#0
000008  6be1              LDR      r1,[r4,#0x3c]
00000a  6048              STR      r0,[r1,#4]
;;;431      for (;;) {
00000c  bf00              NOP      
                  |L7.14|
;;;432        switch (ls->current) {
00000e  6820              LDR      r0,[r4,#0]
000010  2832              CMP      r0,#0x32
000012  d078              BEQ      |L7.262|
000014  dc1f              BGT      |L7.86|
000016  2822              CMP      r0,#0x22
000018  d076              BEQ      |L7.264|
00001a  dc11              BGT      |L7.64|
00001c  280b              CMP      r0,#0xb
00001e  d03d              BEQ      |L7.156|
000020  dc07              BGT      |L7.50|
000022  f1b03fff          CMP      r0,#0xffffffff
000026  d070              BEQ      |L7.266|
000028  2809              CMP      r0,#9
00002a  d036              BEQ      |L7.154|
00002c  280a              CMP      r0,#0xa
                  |L7.46|
00002e  d16d              BNE      |L7.268|
000030  e02c              B        |L7.140|
                  |L7.50|
000032  280c              CMP      r0,#0xc
000034  d030              BEQ      |L7.152|
000036  280d              CMP      r0,#0xd
000038  d029              BEQ      |L7.142|
00003a  2820              CMP      r0,#0x20
00003c  d1f7              BNE      |L7.46|
00003e  e02a              B        |L7.150|
                  |L7.64|
000040  3827              SUBS     r0,r0,#0x27
000042  280b              CMP      r0,#0xb
                  |L7.68|
000044  d262              BCS      |L7.268|
000046  e8dff000          TBB      [pc,r0]
00004a  ee61              DCB      0xee,0x61
00004c  61616161          DCB      0x61,0x61,0x61,0x61
000050  3bedeceb          DCB      0x3b,0xed,0xec,0xeb
000054  ea00              DCB      0xea,0x00
                  |L7.86|
000056  2839              CMP      r0,#0x39
000058  d072              BEQ      |L7.320|
00005a  dc08              BGT      |L7.110|
00005c  f1a00033          SUB      r0,r0,#0x33
000060  2806              CMP      r0,#6
000062  d2ef              BCS      |L7.68|
000064  e8dff000          TBB      [pc,r0]
000068  efeeedec          DCB      0xef,0xee,0xed,0xec
00006c  ebea              DCB      0xeb,0xea
                  |L7.110|
00006e  283e              CMP      r0,#0x3e
000070  d067              BEQ      |L7.322|
000072  dc06              BGT      |L7.130|
000074  283a              CMP      r0,#0x3a
000076  d074              BEQ      |L7.354|
000078  283c              CMP      r0,#0x3c
00007a  d073              BEQ      |L7.356|
00007c  283d              CMP      r0,#0x3d
00007e  d1d6              BNE      |L7.46|
000080  e099              B        |L7.438|
                  |L7.130|
000082  285b              CMP      r0,#0x5b
000084  d07f              BEQ      |L7.390|
000086  287e              CMP      r0,#0x7e
000088  d1d1              BNE      |L7.46|
00008a  e11b              B        |L7.708|
                  |L7.140|
;;;433          case '\n': case '\r': {  /* line breaks */
00008c  bf00              NOP      
                  |L7.142|
;;;434            inclinenumber(ls);
00008e  4620              MOV      r0,r4
000090  f7fffffe          BL       inclinenumber
;;;435            break;
000094  e1e7              B        |L7.1126|
                  |L7.150|
;;;436          }
;;;437          case ' ': case '\f': case '\t': case '\v': {  /* spaces */
000096  bf00              NOP      
                  |L7.152|
000098  bf00              NOP      
                  |L7.154|
00009a  bf00              NOP      
                  |L7.156|
;;;438            next(ls);
00009c  6ba0              LDR      r0,[r4,#0x38]
00009e  6801              LDR      r1,[r0,#0]
0000a0  1e48              SUBS     r0,r1,#1
0000a2  6ba2              LDR      r2,[r4,#0x38]
0000a4  6010              STR      r0,[r2,#0]
0000a6  b131              CBZ      r1,|L7.182|
0000a8  6ba0              LDR      r0,[r4,#0x38]
0000aa  6841              LDR      r1,[r0,#4]
0000ac  1c48              ADDS     r0,r1,#1
0000ae  6ba2              LDR      r2,[r4,#0x38]
0000b0  6050              STR      r0,[r2,#4]
0000b2  7808              LDRB     r0,[r1,#0]
0000b4  e002              B        |L7.188|
                  |L7.182|
0000b6  6ba0              LDR      r0,[r4,#0x38]
0000b8  f7fffffe          BL       luaZ_fill
                  |L7.188|
0000bc  6020              STR      r0,[r4,#0]
;;;439            break;
0000be  e1d2              B        |L7.1126|
;;;440          }
;;;441          case '-': {  /* '-' or '--' (comment) */
;;;442            next(ls);
0000c0  6ba0              LDR      r0,[r4,#0x38]
0000c2  6801              LDR      r1,[r0,#0]
0000c4  1e48              SUBS     r0,r1,#1
0000c6  6ba2              LDR      r2,[r4,#0x38]
0000c8  6010              STR      r0,[r2,#0]
0000ca  b131              CBZ      r1,|L7.218|
0000cc  6ba0              LDR      r0,[r4,#0x38]
0000ce  6841              LDR      r1,[r0,#4]
0000d0  1c48              ADDS     r0,r1,#1
0000d2  6ba2              LDR      r2,[r4,#0x38]
0000d4  6050              STR      r0,[r2,#4]
0000d6  7808              LDRB     r0,[r1,#0]
0000d8  e002              B        |L7.224|
                  |L7.218|
0000da  6ba0              LDR      r0,[r4,#0x38]
0000dc  f7fffffe          BL       luaZ_fill
                  |L7.224|
0000e0  6020              STR      r0,[r4,#0]
;;;443            if (ls->current != '-') return '-';
0000e2  6820              LDR      r0,[r4,#0]
0000e4  282d              CMP      r0,#0x2d
0000e6  d001              BEQ      |L7.236|
0000e8  202d              MOVS     r0,#0x2d
                  |L7.234|
;;;444            /* else is a comment */
;;;445            next(ls);
;;;446            if (ls->current == '[') {  /* long comment? */
;;;447              int sep = skip_sep(ls);
;;;448              luaZ_resetbuffer(ls->buff);  /* 'skip_sep' may dirty the buffer */
;;;449              if (sep >= 0) {
;;;450                read_long_string(ls, NULL, sep);  /* skip long comment */
;;;451                luaZ_resetbuffer(ls->buff);  /* previous call may dirty the buff. */
;;;452                break;
;;;453              }
;;;454            }
;;;455            /* else short comment */
;;;456            while (!currIsNewline(ls) && ls->current != EOZ)
;;;457              next(ls);  /* skip until end of line (or end of file) */
;;;458            break;
;;;459          }
;;;460          case '[': {  /* long string or simply '[' */
;;;461            int sep = skip_sep(ls);
;;;462            if (sep >= 0) {
;;;463              read_long_string(ls, seminfo, sep);
;;;464              return TK_STRING;
;;;465            }
;;;466            else if (sep != -1)  /* '[=...' missing second bracket */
;;;467              lexerror(ls, "invalid long string delimiter", TK_STRING);
;;;468            return '[';
;;;469          }
;;;470          case '=': {
;;;471            next(ls);
;;;472            if (check_next1(ls, '=')) return TK_EQ;
;;;473            else return '=';
;;;474          }
;;;475          case '<': {
;;;476            next(ls);
;;;477            if (check_next1(ls, '=')) return TK_LE;
;;;478            else if (check_next1(ls, '<')) return TK_SHL;
;;;479            else return '<';
;;;480          }
;;;481          case '>': {
;;;482            next(ls);
;;;483            if (check_next1(ls, '=')) return TK_GE;
;;;484            else if (check_next1(ls, '>')) return TK_SHR;
;;;485            else return '>';
;;;486          }
;;;487          case '/': {
;;;488            next(ls);
;;;489            if (check_next1(ls, '/')) return TK_IDIV;
;;;490            else return '/';
;;;491          }
;;;492          case '~': {
;;;493            next(ls);
;;;494            if (check_next1(ls, '=')) return TK_NE;
;;;495            else return '~';
;;;496          }
;;;497          case ':': {
;;;498            next(ls);
;;;499            if (check_next1(ls, ':')) return TK_DBCOLON;
;;;500            else return ':';
;;;501          }
;;;502          case '"': case '\'': {  /* short literal strings */
;;;503            read_string(ls, ls->current, seminfo);
;;;504            return TK_STRING;
;;;505          }
;;;506          case '.': {  /* '.', '..', '...', or number */
;;;507            save_and_next(ls);
;;;508            if (check_next1(ls, '.')) {
;;;509              if (check_next1(ls, '.'))
;;;510                return TK_DOTS;   /* '...' */
;;;511              else return TK_CONCAT;   /* '..' */
;;;512            }
;;;513            else if (!lisdigit(ls->current)) return '.';
;;;514            else return read_numeral(ls, seminfo);
;;;515          }
;;;516          case '0': case '1': case '2': case '3': case '4':
;;;517          case '5': case '6': case '7': case '8': case '9': {
;;;518            return read_numeral(ls, seminfo);
;;;519          }
;;;520          case EOZ: {
;;;521            return TK_EOS;
;;;522          }
;;;523          default: {
;;;524            if (lislalpha(ls->current)) {  /* identifier or reserved word? */
;;;525              TString *ts;
;;;526              do {
;;;527                save_and_next(ls);
;;;528              } while (lislalnum(ls->current));
;;;529              ts = luaX_newstring(ls, luaZ_buffer(ls->buff),
;;;530                                      luaZ_bufflen(ls->buff));
;;;531              seminfo->ts = ts;
;;;532              if (isreserved(ts))  /* reserved word? */
;;;533                return ts->extra - 1 + FIRST_RESERVED;
;;;534              else {
;;;535                return TK_NAME;
;;;536              }
;;;537            }
;;;538            else {  /* single-char tokens (+ - / ...) */
;;;539              int c = ls->current;
;;;540              next(ls);
;;;541              return c;
;;;542            }
;;;543          }
;;;544        }
;;;545      }
;;;546    }
0000ea  bd70              POP      {r4-r6,pc}
                  |L7.236|
0000ec  6ba0              LDR      r0,[r4,#0x38]         ;445
0000ee  6801              LDR      r1,[r0,#0]            ;445
0000f0  1e48              SUBS     r0,r1,#1              ;445
0000f2  6ba2              LDR      r2,[r4,#0x38]         ;445
0000f4  6010              STR      r0,[r2,#0]            ;445
0000f6  b151              CBZ      r1,|L7.270|
0000f8  6ba0              LDR      r0,[r4,#0x38]         ;445
0000fa  6841              LDR      r1,[r0,#4]            ;445
0000fc  1c48              ADDS     r0,r1,#1              ;445
0000fe  6ba2              LDR      r2,[r4,#0x38]         ;445
000100  6050              STR      r0,[r2,#4]            ;445
000102  7808              LDRB     r0,[r1,#0]            ;445
000104  e006              B        |L7.276|
                  |L7.262|
000106  e151              B        |L7.940|
                  |L7.264|
000108  e112              B        |L7.816|
                  |L7.266|
00010a  e15b              B        |L7.964|
                  |L7.268|
00010c  e15d              B        |L7.970|
                  |L7.270|
00010e  6ba0              LDR      r0,[r4,#0x38]         ;445
000110  f7fffffe          BL       luaZ_fill
                  |L7.276|
000114  6020              STR      r0,[r4,#0]            ;445
000116  6820              LDR      r0,[r4,#0]            ;446
000118  285b              CMP      r0,#0x5b              ;446
00011a  d114              BNE      |L7.326|
00011c  4620              MOV      r0,r4                 ;447
00011e  f7fffffe          BL       skip_sep
000122  4605              MOV      r5,r0                 ;447
000124  2000              MOVS     r0,#0                 ;448
000126  6be1              LDR      r1,[r4,#0x3c]         ;448
000128  6048              STR      r0,[r1,#4]            ;448
00012a  2d00              CMP      r5,#0                 ;449
00012c  db0a              BLT      |L7.324|
00012e  462a              MOV      r2,r5                 ;450
000130  2100              MOVS     r1,#0                 ;450
000132  4620              MOV      r0,r4                 ;450
000134  f7fffffe          BL       read_long_string
000138  2000              MOVS     r0,#0                 ;451
00013a  6be1              LDR      r1,[r4,#0x3c]         ;451
00013c  6048              STR      r0,[r1,#4]            ;451
00013e  e192              B        |L7.1126|
                  |L7.320|
000140  e13b              B        |L7.954|
                  |L7.322|
000142  e081              B        |L7.584|
                  |L7.324|
000144  bf00              NOP                            ;454
                  |L7.326|
000146  e013              B        |L7.368|
                  |L7.328|
000148  6ba0              LDR      r0,[r4,#0x38]         ;457
00014a  6801              LDR      r1,[r0,#0]            ;457
00014c  1e48              SUBS     r0,r1,#1              ;457
00014e  6ba2              LDR      r2,[r4,#0x38]         ;457
000150  6010              STR      r0,[r2,#0]            ;457
000152  b149              CBZ      r1,|L7.360|
000154  6ba0              LDR      r0,[r4,#0x38]         ;457
000156  6841              LDR      r1,[r0,#4]            ;457
000158  1c48              ADDS     r0,r1,#1              ;457
00015a  6ba2              LDR      r2,[r4,#0x38]         ;457
00015c  6050              STR      r0,[r2,#4]            ;457
00015e  7808              LDRB     r0,[r1,#0]            ;457
000160  e005              B        |L7.366|
                  |L7.354|
000162  e0ca              B        |L7.762|
                  |L7.356|
000164  e042              B        |L7.492|
000166  e00e              B        |L7.390|
                  |L7.360|
000168  6ba0              LDR      r0,[r4,#0x38]         ;457
00016a  f7fffffe          BL       luaZ_fill
                  |L7.366|
00016e  6020              STR      r0,[r4,#0]            ;457
                  |L7.368|
000170  6820              LDR      r0,[r4,#0]            ;456
000172  280a              CMP      r0,#0xa               ;456
000174  d006              BEQ      |L7.388|
000176  6820              LDR      r0,[r4,#0]            ;456
000178  280d              CMP      r0,#0xd               ;456
00017a  d003              BEQ      |L7.388|
00017c  6820              LDR      r0,[r4,#0]            ;456
00017e  1c40              ADDS     r0,r0,#1              ;456
000180  2800              CMP      r0,#0                 ;456
000182  d1e1              BNE      |L7.328|
                  |L7.388|
000184  e16f              B        |L7.1126|
                  |L7.390|
000186  4620              MOV      r0,r4                 ;461
000188  f7fffffe          BL       skip_sep
00018c  4605              MOV      r5,r0                 ;461
00018e  2d00              CMP      r5,#0                 ;462
000190  db07              BLT      |L7.418|
000192  462a              MOV      r2,r5                 ;463
000194  4631              MOV      r1,r6                 ;463
000196  4620              MOV      r0,r4                 ;463
000198  f7fffffe          BL       read_long_string
00019c  f44f7093          MOV      r0,#0x126             ;464
0001a0  e7a3              B        |L7.234|
                  |L7.418|
0001a2  1c68              ADDS     r0,r5,#1              ;466
0001a4  b128              CBZ      r0,|L7.434|
0001a6  f44f7293          MOV      r2,#0x126             ;467
0001aa  a1af              ADR      r1,|L7.1128|
0001ac  4620              MOV      r0,r4                 ;467
0001ae  f7fffffe          BL       lexerror
                  |L7.434|
0001b2  205b              MOVS     r0,#0x5b              ;468
0001b4  e799              B        |L7.234|
                  |L7.438|
0001b6  6ba0              LDR      r0,[r4,#0x38]         ;471
0001b8  6801              LDR      r1,[r0,#0]            ;471
0001ba  1e48              SUBS     r0,r1,#1              ;471
0001bc  6ba2              LDR      r2,[r4,#0x38]         ;471
0001be  6010              STR      r0,[r2,#0]            ;471
0001c0  b131              CBZ      r1,|L7.464|
0001c2  6ba0              LDR      r0,[r4,#0x38]         ;471
0001c4  6841              LDR      r1,[r0,#4]            ;471
0001c6  1c48              ADDS     r0,r1,#1              ;471
0001c8  6ba2              LDR      r2,[r4,#0x38]         ;471
0001ca  6050              STR      r0,[r2,#4]            ;471
0001cc  7808              LDRB     r0,[r1,#0]            ;471
0001ce  e002              B        |L7.470|
                  |L7.464|
0001d0  6ba0              LDR      r0,[r4,#0x38]         ;471
0001d2  f7fffffe          BL       luaZ_fill
                  |L7.470|
0001d6  6020              STR      r0,[r4,#0]            ;471
0001d8  213d              MOVS     r1,#0x3d              ;472
0001da  4620              MOV      r0,r4                 ;472
0001dc  f7fffffe          BL       check_next1
0001e0  b110              CBZ      r0,|L7.488|
0001e2  f240101b          MOV      r0,#0x11b             ;472
0001e6  e780              B        |L7.234|
                  |L7.488|
0001e8  203d              MOVS     r0,#0x3d              ;473
0001ea  e77e              B        |L7.234|
                  |L7.492|
0001ec  6ba0              LDR      r0,[r4,#0x38]         ;476
0001ee  6801              LDR      r1,[r0,#0]            ;476
0001f0  1e48              SUBS     r0,r1,#1              ;476
0001f2  6ba2              LDR      r2,[r4,#0x38]         ;476
0001f4  6010              STR      r0,[r2,#0]            ;476
0001f6  b131              CBZ      r1,|L7.518|
0001f8  6ba0              LDR      r0,[r4,#0x38]         ;476
0001fa  6841              LDR      r1,[r0,#4]            ;476
0001fc  1c48              ADDS     r0,r1,#1              ;476
0001fe  6ba2              LDR      r2,[r4,#0x38]         ;476
000200  6050              STR      r0,[r2,#4]            ;476
000202  7808              LDRB     r0,[r1,#0]            ;476
000204  e002              B        |L7.524|
                  |L7.518|
000206  6ba0              LDR      r0,[r4,#0x38]         ;476
000208  f7fffffe          BL       luaZ_fill
                  |L7.524|
00020c  6020              STR      r0,[r4,#0]            ;476
00020e  213d              MOVS     r1,#0x3d              ;477
000210  4620              MOV      r0,r4                 ;477
000212  f7fffffe          BL       check_next1
000216  b138              CBZ      r0,|L7.552|
000218  f240101d          MOV      r0,#0x11d             ;477
00021c  e765              B        |L7.234|
00021e  e0c4              B        |L7.938|
000220  e0c2              B        |L7.936|
000222  e034              B        |L7.654|
000224  e08d              B        |L7.834|
000226  e084              B        |L7.818|
                  |L7.552|
000228  213c              MOVS     r1,#0x3c              ;478
00022a  4620              MOV      r0,r4                 ;478
00022c  f7fffffe          BL       check_next1
000230  b110              CBZ      r0,|L7.568|
000232  f240101f          MOV      r0,#0x11f             ;478
000236  e758              B        |L7.234|
                  |L7.568|
000238  203c              MOVS     r0,#0x3c              ;479
00023a  e756              B        |L7.234|
00023c  e0bc              B        |L7.952|
00023e  e0ba              B        |L7.950|
000240  e0b8              B        |L7.948|
000242  e0b6              B        |L7.946|
000244  e0b4              B        |L7.944|
000246  e0b2              B        |L7.942|
                  |L7.584|
000248  6ba0              LDR      r0,[r4,#0x38]         ;482
00024a  6801              LDR      r1,[r0,#0]            ;482
00024c  1e48              SUBS     r0,r1,#1              ;482
00024e  6ba2              LDR      r2,[r4,#0x38]         ;482
000250  6010              STR      r0,[r2,#0]            ;482
000252  b131              CBZ      r1,|L7.610|
000254  6ba0              LDR      r0,[r4,#0x38]         ;482
000256  6841              LDR      r1,[r0,#4]            ;482
000258  1c48              ADDS     r0,r1,#1              ;482
00025a  6ba2              LDR      r2,[r4,#0x38]         ;482
00025c  6050              STR      r0,[r2,#4]            ;482
00025e  7808              LDRB     r0,[r1,#0]            ;482
000260  e002              B        |L7.616|
                  |L7.610|
000262  6ba0              LDR      r0,[r4,#0x38]         ;482
000264  f7fffffe          BL       luaZ_fill
                  |L7.616|
000268  6020              STR      r0,[r4,#0]            ;482
00026a  213d              MOVS     r1,#0x3d              ;483
00026c  4620              MOV      r0,r4                 ;483
00026e  f7fffffe          BL       check_next1
000272  b110              CBZ      r0,|L7.634|
000274  f44f708e          MOV      r0,#0x11c             ;483
000278  e737              B        |L7.234|
                  |L7.634|
00027a  213e              MOVS     r1,#0x3e              ;484
00027c  4620              MOV      r0,r4                 ;484
00027e  f7fffffe          BL       check_next1
000282  b110              CBZ      r0,|L7.650|
000284  f44f7090          MOV      r0,#0x120             ;484
000288  e72f              B        |L7.234|
                  |L7.650|
00028a  203e              MOVS     r0,#0x3e              ;485
00028c  e72d              B        |L7.234|
                  |L7.654|
00028e  6ba0              LDR      r0,[r4,#0x38]         ;488
000290  6801              LDR      r1,[r0,#0]            ;488
000292  1e48              SUBS     r0,r1,#1              ;488
000294  6ba2              LDR      r2,[r4,#0x38]         ;488
000296  6010              STR      r0,[r2,#0]            ;488
000298  b131              CBZ      r1,|L7.680|
00029a  6ba0              LDR      r0,[r4,#0x38]         ;488
00029c  6841              LDR      r1,[r0,#4]            ;488
00029e  1c48              ADDS     r0,r1,#1              ;488
0002a0  6ba2              LDR      r2,[r4,#0x38]         ;488
0002a2  6050              STR      r0,[r2,#4]            ;488
0002a4  7808              LDRB     r0,[r1,#0]            ;488
0002a6  e002              B        |L7.686|
                  |L7.680|
0002a8  6ba0              LDR      r0,[r4,#0x38]         ;488
0002aa  f7fffffe          BL       luaZ_fill
                  |L7.686|
0002ae  6020              STR      r0,[r4,#0]            ;488
0002b0  212f              MOVS     r1,#0x2f              ;489
0002b2  4620              MOV      r0,r4                 ;489
0002b4  f7fffffe          BL       check_next1
0002b8  b110              CBZ      r0,|L7.704|
0002ba  f44f708c          MOV      r0,#0x118             ;489
0002be  e714              B        |L7.234|
                  |L7.704|
0002c0  202f              MOVS     r0,#0x2f              ;490
0002c2  e712              B        |L7.234|
                  |L7.708|
0002c4  6ba0              LDR      r0,[r4,#0x38]         ;493
0002c6  6801              LDR      r1,[r0,#0]            ;493
0002c8  1e48              SUBS     r0,r1,#1              ;493
0002ca  6ba2              LDR      r2,[r4,#0x38]         ;493
0002cc  6010              STR      r0,[r2,#0]            ;493
0002ce  b131              CBZ      r1,|L7.734|
0002d0  6ba0              LDR      r0,[r4,#0x38]         ;493
0002d2  6841              LDR      r1,[r0,#4]            ;493
0002d4  1c48              ADDS     r0,r1,#1              ;493
0002d6  6ba2              LDR      r2,[r4,#0x38]         ;493
0002d8  6050              STR      r0,[r2,#4]            ;493
0002da  7808              LDRB     r0,[r1,#0]            ;493
0002dc  e002              B        |L7.740|
                  |L7.734|
0002de  6ba0              LDR      r0,[r4,#0x38]         ;493
0002e0  f7fffffe          BL       luaZ_fill
                  |L7.740|
0002e4  6020              STR      r0,[r4,#0]            ;493
0002e6  213d              MOVS     r1,#0x3d              ;494
0002e8  4620              MOV      r0,r4                 ;494
0002ea  f7fffffe          BL       check_next1
0002ee  b110              CBZ      r0,|L7.758|
0002f0  f44f708f          MOV      r0,#0x11e             ;494
0002f4  e6f9              B        |L7.234|
                  |L7.758|
0002f6  207e              MOVS     r0,#0x7e              ;495
0002f8  e6f7              B        |L7.234|
                  |L7.762|
0002fa  6ba0              LDR      r0,[r4,#0x38]         ;498
0002fc  6801              LDR      r1,[r0,#0]            ;498
0002fe  1e48              SUBS     r0,r1,#1              ;498
000300  6ba2              LDR      r2,[r4,#0x38]         ;498
000302  6010              STR      r0,[r2,#0]            ;498
000304  b131              CBZ      r1,|L7.788|
000306  6ba0              LDR      r0,[r4,#0x38]         ;498
000308  6841              LDR      r1,[r0,#4]            ;498
00030a  1c48              ADDS     r0,r1,#1              ;498
00030c  6ba2              LDR      r2,[r4,#0x38]         ;498
00030e  6050              STR      r0,[r2,#4]            ;498
000310  7808              LDRB     r0,[r1,#0]            ;498
000312  e002              B        |L7.794|
                  |L7.788|
000314  6ba0              LDR      r0,[r4,#0x38]         ;498
000316  f7fffffe          BL       luaZ_fill
                  |L7.794|
00031a  6020              STR      r0,[r4,#0]            ;498
00031c  213a              MOVS     r1,#0x3a              ;499
00031e  4620              MOV      r0,r4                 ;499
000320  f7fffffe          BL       check_next1
000324  b110              CBZ      r0,|L7.812|
000326  f2401021          MOV      r0,#0x121             ;499
00032a  e6de              B        |L7.234|
                  |L7.812|
00032c  203a              MOVS     r0,#0x3a              ;500
00032e  e6dc              B        |L7.234|
                  |L7.816|
000330  bf00              NOP                            ;502
                  |L7.818|
000332  4632              MOV      r2,r6                 ;503
000334  4620              MOV      r0,r4                 ;503
000336  6821              LDR      r1,[r4,#0]            ;503
000338  f7fffffe          BL       read_string
00033c  f44f7093          MOV      r0,#0x126             ;504
000340  e6d3              B        |L7.234|
                  |L7.834|
000342  4620              MOV      r0,r4                 ;507
000344  6821              LDR      r1,[r4,#0]            ;507
000346  f7fffffe          BL       save
00034a  6ba0              LDR      r0,[r4,#0x38]         ;507
00034c  6801              LDR      r1,[r0,#0]            ;507
00034e  1e48              SUBS     r0,r1,#1              ;507
000350  6ba2              LDR      r2,[r4,#0x38]         ;507
000352  6010              STR      r0,[r2,#0]            ;507
000354  b131              CBZ      r1,|L7.868|
000356  6ba0              LDR      r0,[r4,#0x38]         ;507
000358  6841              LDR      r1,[r0,#4]            ;507
00035a  1c48              ADDS     r0,r1,#1              ;507
00035c  6ba2              LDR      r2,[r4,#0x38]         ;507
00035e  6050              STR      r0,[r2,#4]            ;507
000360  7808              LDRB     r0,[r1,#0]            ;507
000362  e002              B        |L7.874|
                  |L7.868|
000364  6ba0              LDR      r0,[r4,#0x38]         ;507
000366  f7fffffe          BL       luaZ_fill
                  |L7.874|
00036a  6020              STR      r0,[r4,#0]            ;507
00036c  212e              MOVS     r1,#0x2e              ;508
00036e  4620              MOV      r0,r4                 ;508
000370  f7fffffe          BL       check_next1
000374  b150              CBZ      r0,|L7.908|
000376  212e              MOVS     r1,#0x2e              ;509
000378  4620              MOV      r0,r4                 ;509
00037a  f7fffffe          BL       check_next1
00037e  b110              CBZ      r0,|L7.902|
000380  f44f708d          MOV      r0,#0x11a             ;510
000384  e6b1              B        |L7.234|
                  |L7.902|
000386  f2401019          MOV      r0,#0x119             ;511
00038a  e6ae              B        |L7.234|
                  |L7.908|
00038c  6820              LDR      r0,[r4,#0]            ;513
00038e  1c40              ADDS     r0,r0,#1              ;513
000390  493d              LDR      r1,|L7.1160|
000392  5c08              LDRB     r0,[r1,r0]            ;513
000394  f0000002          AND      r0,r0,#2              ;513
000398  b908              CBNZ     r0,|L7.926|
00039a  202e              MOVS     r0,#0x2e              ;513
00039c  e6a5              B        |L7.234|
                  |L7.926|
00039e  4631              MOV      r1,r6                 ;514
0003a0  4620              MOV      r0,r4                 ;514
0003a2  f7fffffe          BL       read_numeral
0003a6  e6a0              B        |L7.234|
                  |L7.936|
0003a8  bf00              NOP                            ;516
                  |L7.938|
0003aa  bf00              NOP                            ;516
                  |L7.940|
0003ac  bf00              NOP                            ;516
                  |L7.942|
0003ae  bf00              NOP                            ;516
                  |L7.944|
0003b0  bf00              NOP                            ;517
                  |L7.946|
0003b2  bf00              NOP                            ;517
                  |L7.948|
0003b4  bf00              NOP                            ;517
                  |L7.950|
0003b6  bf00              NOP                            ;517
                  |L7.952|
0003b8  bf00              NOP                            ;517
                  |L7.954|
0003ba  4631              MOV      r1,r6                 ;518
0003bc  4620              MOV      r0,r4                 ;518
0003be  f7fffffe          BL       read_numeral
0003c2  e692              B        |L7.234|
                  |L7.964|
0003c4  f44f7091          MOV      r0,#0x122             ;521
0003c8  e68f              B        |L7.234|
                  |L7.970|
0003ca  6820              LDR      r0,[r4,#0]            ;524
0003cc  1c40              ADDS     r0,r0,#1              ;524
0003ce  492e              LDR      r1,|L7.1160|
0003d0  5c08              LDRB     r0,[r1,r0]            ;524
0003d2  f0000001          AND      r0,r0,#1              ;524
0003d6  b370              CBZ      r0,|L7.1078|
0003d8  bf00              NOP                            ;526
                  |L7.986|
0003da  4620              MOV      r0,r4                 ;527
0003dc  6821              LDR      r1,[r4,#0]            ;527
0003de  f7fffffe          BL       save
0003e2  6ba0              LDR      r0,[r4,#0x38]         ;527
0003e4  6801              LDR      r1,[r0,#0]            ;527
0003e6  1e48              SUBS     r0,r1,#1              ;527
0003e8  6ba2              LDR      r2,[r4,#0x38]         ;527
0003ea  6010              STR      r0,[r2,#0]            ;527
0003ec  b131              CBZ      r1,|L7.1020|
0003ee  6ba0              LDR      r0,[r4,#0x38]         ;527
0003f0  6841              LDR      r1,[r0,#4]            ;527
0003f2  1c48              ADDS     r0,r1,#1              ;527
0003f4  6ba2              LDR      r2,[r4,#0x38]         ;527
0003f6  6050              STR      r0,[r2,#4]            ;527
0003f8  7808              LDRB     r0,[r1,#0]            ;527
0003fa  e002              B        |L7.1026|
                  |L7.1020|
0003fc  6ba0              LDR      r0,[r4,#0x38]         ;527
0003fe  f7fffffe          BL       luaZ_fill
                  |L7.1026|
000402  6020              STR      r0,[r4,#0]            ;527
000404  6820              LDR      r0,[r4,#0]            ;528
000406  1c40              ADDS     r0,r0,#1              ;528
000408  491f              LDR      r1,|L7.1160|
00040a  5c08              LDRB     r0,[r1,r0]            ;528
00040c  f0000003          AND      r0,r0,#3              ;528
000410  2800              CMP      r0,#0                 ;528
000412  d1e2              BNE      |L7.986|
000414  6be0              LDR      r0,[r4,#0x3c]         ;529
000416  c806              LDM      r0!,{r1,r2}           ;529
000418  4620              MOV      r0,r4                 ;529
00041a  f7fffffe          BL       luaX_newstring
00041e  4605              MOV      r5,r0                 ;529
000420  6035              STR      r5,[r6,#0]            ;531
000422  7928              LDRB     r0,[r5,#4]            ;532
000424  2814              CMP      r0,#0x14              ;532
000426  d107              BNE      |L7.1080|
000428  79a8              LDRB     r0,[r5,#6]            ;532
00042a  2800              CMP      r0,#0                 ;532
00042c  dd04              BLE      |L7.1080|
00042e  79a8              LDRB     r0,[r5,#6]            ;533
000430  f5007080          ADD      r0,r0,#0x100          ;533
000434  e659              B        |L7.234|
                  |L7.1078|
000436  e002              B        |L7.1086|
                  |L7.1080|
000438  f2401025          MOV      r0,#0x125             ;535
00043c  e655              B        |L7.234|
                  |L7.1086|
00043e  6825              LDR      r5,[r4,#0]            ;539
000440  6ba0              LDR      r0,[r4,#0x38]         ;540
000442  6801              LDR      r1,[r0,#0]            ;540
000444  1e48              SUBS     r0,r1,#1              ;540
000446  6ba2              LDR      r2,[r4,#0x38]         ;540
000448  6010              STR      r0,[r2,#0]            ;540
00044a  b131              CBZ      r1,|L7.1114|
00044c  6ba0              LDR      r0,[r4,#0x38]         ;540
00044e  6841              LDR      r1,[r0,#4]            ;540
000450  1c48              ADDS     r0,r1,#1              ;540
000452  6ba2              LDR      r2,[r4,#0x38]         ;540
000454  6050              STR      r0,[r2,#4]            ;540
000456  7808              LDRB     r0,[r1,#0]            ;540
000458  e002              B        |L7.1120|
                  |L7.1114|
00045a  6ba0              LDR      r0,[r4,#0x38]         ;540
00045c  f7fffffe          BL       luaZ_fill
                  |L7.1120|
000460  6020              STR      r0,[r4,#0]            ;540
000462  4628              MOV      r0,r5                 ;541
000464  e641              B        |L7.234|
                  |L7.1126|
000466  e5d2              B        |L7.14|
;;;547    
                          ENDP

                  |L7.1128|
000468  696e7661          DCB      "invalid long string delimiter",0
00046c  6c696420
000470  6c6f6e67
000474  20737472
000478  696e6720
00047c  64656c69
000480  6d697465
000484  7200    
000486  00                DCB      0
000487  00                DCB      0
                  |L7.1160|
                          DCD      luai_ctype_

                          AREA ||i.luaX_init||, CODE, READONLY, ALIGN=2

                  luaX_init PROC
;;;69     
;;;70     void luaX_init (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
;;;71       int i;
;;;72       TString *e = luaS_newliteral(L, LUA_ENV);  /* create env name */
000006  2204              MOVS     r2,#4
000008  a10e              ADR      r1,|L8.68|
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       luaS_newlstr
000010  4607              MOV      r7,r0
;;;73       luaC_fix(L, obj2gco(e));  /* never collect this name */
000012  4639              MOV      r1,r7
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       luaC_fix
;;;74       for (i=0; i<NUM_RESERVED; i++) {
00001a  2400              MOVS     r4,#0
00001c  e00d              B        |L8.58|
                  |L8.30|
;;;75         TString *ts = luaS_new(L, luaX_tokens[i]);
00001e  480b              LDR      r0,|L8.76|
000020  f8501024          LDR      r1,[r0,r4,LSL #2]
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       luaS_new
00002a  4605              MOV      r5,r0
;;;76         luaC_fix(L, obj2gco(ts));  /* reserved words are never collected */
00002c  4629              MOV      r1,r5
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       luaC_fix
;;;77         ts->extra = cast_byte(i+1);  /* reserved word */
000034  1c60              ADDS     r0,r4,#1
000036  71a8              STRB     r0,[r5,#6]
000038  1c64              ADDS     r4,r4,#1              ;74
                  |L8.58|
00003a  2c17              CMP      r4,#0x17              ;74
00003c  dbef              BLT      |L8.30|
;;;78       }
;;;79     }
00003e  e8bd81f0          POP      {r4-r8,pc}
;;;80     
                          ENDP

000042  0000              DCW      0x0000
                  |L8.68|
000044  5f454e56          DCB      "_ENV",0
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
                  |L8.76|
                          DCD      luaX_tokens

                          AREA ||i.luaX_lookahead||, CODE, READONLY, ALIGN=1

                  luaX_lookahead PROC
;;;559    
;;;560    int luaX_lookahead (LexState *ls) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;561      lua_assert(ls->lookahead.token == TK_EOS);
;;;562      ls->lookahead.token = llex(ls, &ls->lookahead.seminfo);
000004  f1040128          ADD      r1,r4,#0x28
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       llex
00000e  6220              STR      r0,[r4,#0x20]
;;;563      return ls->lookahead.token;
000010  6a20              LDR      r0,[r4,#0x20]
;;;564    }
000012  bd10              POP      {r4,pc}
;;;565    
                          ENDP


                          AREA ||i.luaX_newstring||, CODE, READONLY, ALIGN=1

                  luaX_newstring PROC
;;;126    */
;;;127    TString *luaX_newstring (LexState *ls, const char *str, size_t l) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
;;;128      lua_State *L = ls->L;
00000a  6b7c              LDR      r4,[r7,#0x34]
;;;129      TValue *o;  /* entry for 'str' */
;;;130      TString *ts = luaS_newlstr(L, str, l);  /* create new string */
00000c  464a              MOV      r2,r9
00000e  4641              MOV      r1,r8
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       luaS_newlstr
000016  4606              MOV      r6,r0
;;;131      setsvalue2s(L, L->top++, ts);  /* temporarily anchor it in stack */
000018  68e0              LDR      r0,[r4,#0xc]
00001a  f1000210          ADD      r2,r0,#0x10
00001e  60e2              STR      r2,[r4,#0xc]
000020  4631              MOV      r1,r6
000022  6001              STR      r1,[r0,#0]
000024  790a              LDRB     r2,[r1,#4]
000026  f0420240          ORR      r2,r2,#0x40
00002a  7202              STRB     r2,[r0,#8]
;;;132      o = luaH_set(L, ls->h, s2v(L->top - 1));
00002c  68e0              LDR      r0,[r4,#0xc]
00002e  f1a00210          SUB      r2,r0,#0x10
000032  4620              MOV      r0,r4
000034  6c39              LDR      r1,[r7,#0x40]
000036  f7fffffe          BL       luaH_set
00003a  4605              MOV      r5,r0
;;;133      if (isempty(o)) {  /* not in use yet? */
00003c  7a28              LDRB     r0,[r5,#8]
00003e  f000000f          AND      r0,r0,#0xf
000042  b960              CBNZ     r0,|L10.94|
;;;134        /* boolean value does not need GC barrier;
;;;135           table is not a metatable, so it does not need to invalidate cache */
;;;136        setbvalue(o, 1);  /* t[string] = true */
000044  4628              MOV      r0,r5
000046  2101              MOVS     r1,#1
000048  6001              STR      r1,[r0,#0]
00004a  7201              STRB     r1,[r0,#8]
;;;137        luaC_checkGC(L);
00004c  6920              LDR      r0,[r4,#0x10]
00004e  68c0              LDR      r0,[r0,#0xc]
000050  2800              CMP      r0,#0
000052  dd03              BLE      |L10.92|
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       luaC_step
00005a  bf00              NOP      
                  |L10.92|
00005c  e000              B        |L10.96|
                  |L10.94|
;;;138      }
;;;139      else {  /* string already present */
;;;140        ts = keystrval(nodefromval(o));  /* re-use value previously stored */
00005e  692e              LDR      r6,[r5,#0x10]
                  |L10.96|
;;;141      }
;;;142      L->top--;  /* remove string from stack */
000060  68e0              LDR      r0,[r4,#0xc]
000062  3810              SUBS     r0,r0,#0x10
000064  60e0              STR      r0,[r4,#0xc]
;;;143      return ts;
000066  4630              MOV      r0,r6
;;;144    }
000068  e8bd87f0          POP      {r4-r10,pc}
;;;145    
                          ENDP


                          AREA ||i.luaX_next||, CODE, READONLY, ALIGN=1

                  luaX_next PROC
;;;548    
;;;549    void luaX_next (LexState *ls) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;550      ls->lastline = ls->linenumber;
000004  6860              LDR      r0,[r4,#4]
000006  60a0              STR      r0,[r4,#8]
;;;551      if (ls->lookahead.token != TK_EOS) {  /* is there a look-ahead token? */
000008  6a20              LDR      r0,[r4,#0x20]
00000a  f5b07f91          CMP      r0,#0x122
00000e  d009              BEQ      |L11.36|
;;;552        ls->t = ls->lookahead;  /* use this one */
000010  f1040020          ADD      r0,r4,#0x20
000014  c80f              LDM      r0,{r0-r3}
000016  3410              ADDS     r4,r4,#0x10
000018  c40f              STM      r4!,{r0-r3}
00001a  3c20              SUBS     r4,r4,#0x20
;;;553        ls->lookahead.token = TK_EOS;  /* and discharge it */
00001c  f44f7091          MOV      r0,#0x122
000020  6220              STR      r0,[r4,#0x20]
000022  e005              B        |L11.48|
                  |L11.36|
;;;554      }
;;;555      else
;;;556        ls->t.token = llex(ls, &ls->t.seminfo);  /* read next token */
000024  f1040118          ADD      r1,r4,#0x18
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       llex
00002e  6120              STR      r0,[r4,#0x10]
                  |L11.48|
;;;557    }
000030  bd10              POP      {r4,pc}
;;;558    
                          ENDP


                          AREA ||i.luaX_setinput||, CODE, READONLY, ALIGN=2

                  luaX_setinput PROC
;;;161    
;;;162    void luaX_setinput (lua_State *L, LexState *ls, ZIO *z, TString *source,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;163                        int firstchar) {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8018          LDR      r8,[sp,#0x18]
;;;164      ls->t.token = 0;
000010  2000              MOVS     r0,#0
000012  6120              STR      r0,[r4,#0x10]
;;;165      ls->L = L;
000014  6365              STR      r5,[r4,#0x34]
;;;166      ls->current = firstchar;
000016  f8c48000          STR      r8,[r4,#0]
;;;167      ls->lookahead.token = TK_EOS;  /* no look-ahead token */
00001a  f44f7091          MOV      r0,#0x122
00001e  6220              STR      r0,[r4,#0x20]
;;;168      ls->z = z;
000020  63a6              STR      r6,[r4,#0x38]
;;;169      ls->fs = NULL;
000022  2000              MOVS     r0,#0
000024  6320              STR      r0,[r4,#0x30]
;;;170      ls->linenumber = 1;
000026  2001              MOVS     r0,#1
000028  6060              STR      r0,[r4,#4]
;;;171      ls->lastline = 1;
00002a  60a0              STR      r0,[r4,#8]
;;;172      ls->source = source;
00002c  64a7              STR      r7,[r4,#0x48]
;;;173      ls->envn = luaS_newliteral(L, LUA_ENV);  /* get env name */
00002e  2204              MOVS     r2,#4
000030  a109              ADR      r1,|L12.88|
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       luaS_newlstr
000038  64e0              STR      r0,[r4,#0x4c]
;;;174      luaZ_resizebuffer(ls->L, ls->buff, LUA_MINBUFFER);  /* initialize buffer */
00003a  6be3              LDR      r3,[r4,#0x3c]
00003c  689a              LDR      r2,[r3,#8]
00003e  6819              LDR      r1,[r3,#0]
000040  2320              MOVS     r3,#0x20
000042  6b60              LDR      r0,[r4,#0x34]
000044  f7fffffe          BL       luaM_saferealloc_
000048  6be1              LDR      r1,[r4,#0x3c]
00004a  6008              STR      r0,[r1,#0]
00004c  2020              MOVS     r0,#0x20
00004e  6be1              LDR      r1,[r4,#0x3c]
000050  6088              STR      r0,[r1,#8]
;;;175    }
000052  e8bd81f0          POP      {r4-r8,pc}
;;;176    
                          ENDP

000056  0000              DCW      0x0000
                  |L12.88|
000058  5f454e56          DCB      "_ENV",0
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0

                          AREA ||i.luaX_syntaxerror||, CODE, READONLY, ALIGN=1

                  luaX_syntaxerror PROC
;;;116    
;;;117    l_noret luaX_syntaxerror (LexState *ls, const char *msg) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;118      lexerror(ls, msg, ls->t.token);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  6922              LDR      r2,[r4,#0x10]
00000c  f7fffffe          BL       lexerror
;;;119    }
000010  bd70              POP      {r4-r6,pc}
;;;120    
                          ENDP


                          AREA ||i.luaX_token2str||, CODE, READONLY, ALIGN=2

                  luaX_token2str PROC
;;;81     
;;;82     const char *luaX_token2str (LexState *ls, int token) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;83       if (token < FIRST_RESERVED) {  /* single-byte symbols? */
000006  f5b47f80          CMP      r4,#0x100
00000a  dc05              BGT      |L14.24|
;;;84         lua_assert(token == cast_uchar(token));
;;;85         return luaO_pushfstring(ls->L, "'%c'", token);
00000c  4622              MOV      r2,r4
00000e  a10a              ADR      r1,|L14.56|
000010  6b68              LDR      r0,[r5,#0x34]
000012  f7fffffe          BL       luaO_pushfstring
                  |L14.22|
;;;86       }
;;;87       else {
;;;88         const char *s = luaX_tokens[token - FIRST_RESERVED];
;;;89         if (token < TK_EOS)  /* fixed format (symbols and reserved words)? */
;;;90           return luaO_pushfstring(ls->L, "'%s'", s);
;;;91         else  /* names, strings, and numerals */
;;;92           return s;
;;;93       }
;;;94     }
000016  bd70              POP      {r4-r6,pc}
                  |L14.24|
000018  f2a41001          SUB      r0,r4,#0x101          ;88
00001c  4908              LDR      r1,|L14.64|
00001e  f8516020          LDR      r6,[r1,r0,LSL #2]     ;88
000022  f5b47f91          CMP      r4,#0x122             ;89
000026  da05              BGE      |L14.52|
000028  4632              MOV      r2,r6                 ;90
00002a  a106              ADR      r1,|L14.68|
00002c  6b68              LDR      r0,[r5,#0x34]         ;90
00002e  f7fffffe          BL       luaO_pushfstring
000032  e7f0              B        |L14.22|
                  |L14.52|
000034  4630              MOV      r0,r6                 ;92
000036  e7ee              B        |L14.22|
;;;95     
                          ENDP

                  |L14.56|
000038  27256327          DCB      "'%c'",0
00003c  00      
00003d  00                DCB      0
00003e  00                DCB      0
00003f  00                DCB      0
                  |L14.64|
                          DCD      luaX_tokens
                  |L14.68|
000044  27257327          DCB      "'%s'",0
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.read_long_string||, CODE, READONLY, ALIGN=2

                  read_long_string PROC
;;;263    
;;;264    static void read_long_string (LexState *ls, SemInfo *seminfo, int sep) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;265      int line = ls->linenumber;  /* initial line (for error message) */
00000a  6867              LDR      r7,[r4,#4]
;;;266      save_and_next(ls);  /* skip 2nd '[' */
00000c  4620              MOV      r0,r4
00000e  6821              LDR      r1,[r4,#0]
000010  f7fffffe          BL       save
000014  6ba0              LDR      r0,[r4,#0x38]
000016  6801              LDR      r1,[r0,#0]
000018  1e48              SUBS     r0,r1,#1
00001a  6ba2              LDR      r2,[r4,#0x38]
00001c  6010              STR      r0,[r2,#0]
00001e  b131              CBZ      r1,|L15.46|
000020  6ba0              LDR      r0,[r4,#0x38]
000022  6841              LDR      r1,[r0,#4]
000024  1c48              ADDS     r0,r1,#1
000026  6ba2              LDR      r2,[r4,#0x38]
000028  6050              STR      r0,[r2,#4]
00002a  7808              LDRB     r0,[r1,#0]
00002c  e002              B        |L15.52|
                  |L15.46|
00002e  6ba0              LDR      r0,[r4,#0x38]
000030  f7fffffe          BL       luaZ_fill
                  |L15.52|
000034  6020              STR      r0,[r4,#0]
;;;267      if (currIsNewline(ls))  /* string starts with a newline? */
000036  6820              LDR      r0,[r4,#0]
000038  280a              CMP      r0,#0xa
00003a  d002              BEQ      |L15.66|
00003c  6820              LDR      r0,[r4,#0]
00003e  280d              CMP      r0,#0xd
000040  d102              BNE      |L15.72|
                  |L15.66|
;;;268        inclinenumber(ls);  /* skip it */
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       inclinenumber
                  |L15.72|
;;;269      for (;;) {
000048  bf00              NOP      
                  |L15.74|
;;;270        switch (ls->current) {
00004a  6820              LDR      r0,[r4,#0]
00004c  f1b03fff          CMP      r0,#0xffffffff
000050  d006              BEQ      |L15.96|
000052  280a              CMP      r0,#0xa
000054  d033              BEQ      |L15.190|
000056  280d              CMP      r0,#0xd
000058  d032              BEQ      |L15.192|
00005a  285d              CMP      r0,#0x5d
00005c  d13c              BNE      |L15.216|
00005e  e012              B        |L15.134|
                  |L15.96|
;;;271          case EOZ: {  /* error */
;;;272            const char *what = (seminfo ? "string" : "comment");
000060  b10d              CBZ      r5,|L15.102|
000062  a03b              ADR      r0,|L15.336|
000064  e000              B        |L15.104|
                  |L15.102|
000066  a03c              ADR      r0,|L15.344|
                  |L15.104|
000068  4680              MOV      r8,r0
;;;273            const char *msg = luaO_pushfstring(ls->L,
00006a  463b              MOV      r3,r7
00006c  4642              MOV      r2,r8
00006e  a13c              ADR      r1,|L15.352|
000070  6b60              LDR      r0,[r4,#0x34]
000072  f7fffffe          BL       luaO_pushfstring
000076  4681              MOV      r9,r0
;;;274                         "unfinished long %s (starting at line %d)", what, line);
;;;275            lexerror(ls, msg, TK_EOS);
000078  f44f7291          MOV      r2,#0x122
00007c  4649              MOV      r1,r9
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       lexerror
;;;276            break;  /* to avoid warnings */
000084  e051              B        |L15.298|
                  |L15.134|
;;;277          }
;;;278          case ']': {
;;;279            if (skip_sep(ls) == sep) {
000086  4620              MOV      r0,r4
000088  f7fffffe          BL       skip_sep
00008c  42b0              CMP      r0,r6
00008e  d115              BNE      |L15.188|
;;;280              save_and_next(ls);  /* skip 2nd ']' */
000090  4620              MOV      r0,r4
000092  6821              LDR      r1,[r4,#0]
000094  f7fffffe          BL       save
000098  6ba0              LDR      r0,[r4,#0x38]
00009a  6801              LDR      r1,[r0,#0]
00009c  1e48              SUBS     r0,r1,#1
00009e  6ba2              LDR      r2,[r4,#0x38]
0000a0  6010              STR      r0,[r2,#0]
0000a2  b131              CBZ      r1,|L15.178|
0000a4  6ba0              LDR      r0,[r4,#0x38]
0000a6  6841              LDR      r1,[r0,#4]
0000a8  1c48              ADDS     r0,r1,#1
0000aa  6ba2              LDR      r2,[r4,#0x38]
0000ac  6050              STR      r0,[r2,#4]
0000ae  7808              LDRB     r0,[r1,#0]
0000b0  e002              B        |L15.184|
                  |L15.178|
0000b2  6ba0              LDR      r0,[r4,#0x38]
0000b4  f7fffffe          BL       luaZ_fill
                  |L15.184|
0000b8  6020              STR      r0,[r4,#0]
;;;281              goto endloop;
0000ba  e037              B        |L15.300|
                  |L15.188|
;;;282            }
;;;283            break;
0000bc  e035              B        |L15.298|
                  |L15.190|
;;;284          }
;;;285          case '\n': case '\r': {
0000be  bf00              NOP      
                  |L15.192|
;;;286            save(ls, '\n');
0000c0  210a              MOVS     r1,#0xa
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       save
;;;287            inclinenumber(ls);
0000c8  4620              MOV      r0,r4
0000ca  f7fffffe          BL       inclinenumber
;;;288            if (!seminfo) luaZ_resetbuffer(ls->buff);  /* avoid wasting space */
0000ce  b915              CBNZ     r5,|L15.214|
0000d0  2000              MOVS     r0,#0
0000d2  6be1              LDR      r1,[r4,#0x3c]
0000d4  6048              STR      r0,[r1,#4]
                  |L15.214|
;;;289            break;
0000d6  e028              B        |L15.298|
                  |L15.216|
;;;290          }
;;;291          default: {
;;;292            if (seminfo) save_and_next(ls);
0000d8  b1ad              CBZ      r5,|L15.262|
0000da  4620              MOV      r0,r4
0000dc  6821              LDR      r1,[r4,#0]
0000de  f7fffffe          BL       save
0000e2  6ba0              LDR      r0,[r4,#0x38]
0000e4  6801              LDR      r1,[r0,#0]
0000e6  1e48              SUBS     r0,r1,#1
0000e8  6ba2              LDR      r2,[r4,#0x38]
0000ea  6010              STR      r0,[r2,#0]
0000ec  b131              CBZ      r1,|L15.252|
0000ee  6ba0              LDR      r0,[r4,#0x38]
0000f0  6841              LDR      r1,[r0,#4]
0000f2  1c48              ADDS     r0,r1,#1
0000f4  6ba2              LDR      r2,[r4,#0x38]
0000f6  6050              STR      r0,[r2,#4]
0000f8  7808              LDRB     r0,[r1,#0]
0000fa  e002              B        |L15.258|
                  |L15.252|
0000fc  6ba0              LDR      r0,[r4,#0x38]
0000fe  f7fffffe          BL       luaZ_fill
                  |L15.258|
000102  6020              STR      r0,[r4,#0]
000104  e010              B        |L15.296|
                  |L15.262|
;;;293            else next(ls);
000106  6ba0              LDR      r0,[r4,#0x38]
000108  6801              LDR      r1,[r0,#0]
00010a  1e48              SUBS     r0,r1,#1
00010c  6ba2              LDR      r2,[r4,#0x38]
00010e  6010              STR      r0,[r2,#0]
000110  b131              CBZ      r1,|L15.288|
000112  6ba0              LDR      r0,[r4,#0x38]
000114  6841              LDR      r1,[r0,#4]
000116  1c48              ADDS     r0,r1,#1
000118  6ba2              LDR      r2,[r4,#0x38]
00011a  6050              STR      r0,[r2,#4]
00011c  7808              LDRB     r0,[r1,#0]
00011e  e002              B        |L15.294|
                  |L15.288|
000120  6ba0              LDR      r0,[r4,#0x38]
000122  f7fffffe          BL       luaZ_fill
                  |L15.294|
000126  6020              STR      r0,[r4,#0]
                  |L15.296|
000128  bf00              NOP                            ;270
                  |L15.298|
00012a  e78e              B        |L15.74|
                  |L15.300|
;;;294          }
;;;295        }
;;;296      } endloop:
;;;297      if (seminfo)
00012c  b175              CBZ      r5,|L15.332|
;;;298        seminfo->ts = luaX_newstring(ls, luaZ_buffer(ls->buff) + (2 + sep),
00012e  6be0              LDR      r0,[r4,#0x3c]
000130  6843              LDR      r3,[r0,#4]
000132  1cb0              ADDS     r0,r6,#2
000134  f04f0c02          MOV      r12,#2
000138  fb0c3210          MLS      r2,r12,r0,r3
00013c  6be0              LDR      r0,[r4,#0x3c]
00013e  6803              LDR      r3,[r0,#0]
000140  1cb0              ADDS     r0,r6,#2
000142  1819              ADDS     r1,r3,r0
000144  4620              MOV      r0,r4
000146  f7fffffe          BL       luaX_newstring
00014a  6028              STR      r0,[r5,#0]
                  |L15.332|
;;;299                                         luaZ_bufflen(ls->buff) - 2*(2 + sep));
;;;300    }
00014c  e8bd87f0          POP      {r4-r10,pc}
;;;301    
                          ENDP

                  |L15.336|
000150  73747269          DCB      "string",0
000154  6e6700  
000157  00                DCB      0
                  |L15.344|
000158  636f6d6d          DCB      "comment",0
00015c  656e7400
                  |L15.352|
000160  756e6669          DCB      "unfinished long %s (starting at line %d)",0
000164  6e697368
000168  6564206c
00016c  6f6e6720
000170  25732028
000174  73746172
000178  74696e67
00017c  20617420
000180  6c696e65
000184  20256429
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0

                          AREA ||i.read_numeral||, CODE, READONLY, ALIGN=2

                  read_numeral PROC
;;;213    */
;;;214    static int read_numeral (LexState *ls, SemInfo *seminfo) {
000000  e92d41ff          PUSH     {r0-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;215      TValue obj;
;;;216      const char *expo = "Ee";
000008  a642              ADR      r6,|L16.276|
;;;217      int first = ls->current;
00000a  6827              LDR      r7,[r4,#0]
;;;218      lua_assert(lisdigit(ls->current));
;;;219      save_and_next(ls);
00000c  4620              MOV      r0,r4
00000e  6821              LDR      r1,[r4,#0]
000010  f7fffffe          BL       save
000014  6ba0              LDR      r0,[r4,#0x38]
000016  6801              LDR      r1,[r0,#0]
000018  1e48              SUBS     r0,r1,#1
00001a  6ba2              LDR      r2,[r4,#0x38]
00001c  6010              STR      r0,[r2,#0]
00001e  b131              CBZ      r1,|L16.46|
000020  6ba0              LDR      r0,[r4,#0x38]
000022  6841              LDR      r1,[r0,#4]
000024  1c48              ADDS     r0,r1,#1
000026  6ba2              LDR      r2,[r4,#0x38]
000028  6050              STR      r0,[r2,#4]
00002a  7808              LDRB     r0,[r1,#0]
00002c  e002              B        |L16.52|
                  |L16.46|
00002e  6ba0              LDR      r0,[r4,#0x38]
000030  f7fffffe          BL       luaZ_fill
                  |L16.52|
000034  6020              STR      r0,[r4,#0]
;;;220      if (first == '0' && check_next2(ls, "xX"))  /* hexadecimal? */
000036  2f30              CMP      r7,#0x30
000038  d105              BNE      |L16.70|
00003a  a137              ADR      r1,|L16.280|
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       check_next2
000042  b100              CBZ      r0,|L16.70|
;;;221        expo = "Pp";
000044  a635              ADR      r6,|L16.284|
                  |L16.70|
;;;222      for (;;) {
000046  bf00              NOP      
                  |L16.72|
;;;223        if (check_next2(ls, expo))  /* exponent part? */
000048  4631              MOV      r1,r6
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       check_next2
000050  b118              CBZ      r0,|L16.90|
;;;224          check_next2(ls, "-+");  /* optional exponent sign */
000052  a133              ADR      r1,|L16.288|
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       check_next2
                  |L16.90|
;;;225        if (lisxdigit(ls->current))
00005a  6820              LDR      r0,[r4,#0]
00005c  1c40              ADDS     r0,r0,#1
00005e  4931              LDR      r1,|L16.292|
000060  5c08              LDRB     r0,[r1,r0]
000062  f0000010          AND      r0,r0,#0x10
000066  b1a8              CBZ      r0,|L16.148|
;;;226          save_and_next(ls);
000068  4620              MOV      r0,r4
00006a  6821              LDR      r1,[r4,#0]
00006c  f7fffffe          BL       save
000070  6ba0              LDR      r0,[r4,#0x38]
000072  6801              LDR      r1,[r0,#0]
000074  1e48              SUBS     r0,r1,#1
000076  6ba2              LDR      r2,[r4,#0x38]
000078  6010              STR      r0,[r2,#0]
00007a  b131              CBZ      r1,|L16.138|
00007c  6ba0              LDR      r0,[r4,#0x38]
00007e  6841              LDR      r1,[r0,#4]
000080  1c48              ADDS     r0,r1,#1
000082  6ba2              LDR      r2,[r4,#0x38]
000084  6050              STR      r0,[r2,#4]
000086  7808              LDRB     r0,[r1,#0]
000088  e002              B        |L16.144|
                  |L16.138|
00008a  6ba0              LDR      r0,[r4,#0x38]
00008c  f7fffffe          BL       luaZ_fill
                  |L16.144|
000090  6020              STR      r0,[r4,#0]
000092  e7d9              B        |L16.72|
                  |L16.148|
;;;227        else if (ls->current == '.')
000094  6820              LDR      r0,[r4,#0]
000096  282e              CMP      r0,#0x2e
000098  d115              BNE      |L16.198|
;;;228          save_and_next(ls);
00009a  4620              MOV      r0,r4
00009c  6821              LDR      r1,[r4,#0]
00009e  f7fffffe          BL       save
0000a2  6ba0              LDR      r0,[r4,#0x38]
0000a4  6801              LDR      r1,[r0,#0]
0000a6  1e48              SUBS     r0,r1,#1
0000a8  6ba2              LDR      r2,[r4,#0x38]
0000aa  6010              STR      r0,[r2,#0]
0000ac  b131              CBZ      r1,|L16.188|
0000ae  6ba0              LDR      r0,[r4,#0x38]
0000b0  6841              LDR      r1,[r0,#4]
0000b2  1c48              ADDS     r0,r1,#1
0000b4  6ba2              LDR      r2,[r4,#0x38]
0000b6  6050              STR      r0,[r2,#4]
0000b8  7808              LDRB     r0,[r1,#0]
0000ba  e002              B        |L16.194|
                  |L16.188|
0000bc  6ba0              LDR      r0,[r4,#0x38]
0000be  f7fffffe          BL       luaZ_fill
                  |L16.194|
0000c2  6020              STR      r0,[r4,#0]
0000c4  e7c0              B        |L16.72|
                  |L16.198|
;;;229        else break;
0000c6  bf00              NOP      
0000c8  bf00              NOP      
;;;230      }
;;;231      save(ls, '\0');
0000ca  2100              MOVS     r1,#0
0000cc  4620              MOV      r0,r4
0000ce  f7fffffe          BL       save
;;;232      if (luaO_str2num(luaZ_buffer(ls->buff), &obj) == 0)  /* format error? */
0000d2  6be1              LDR      r1,[r4,#0x3c]
0000d4  6808              LDR      r0,[r1,#0]
0000d6  4669              MOV      r1,sp
0000d8  f7fffffe          BL       luaO_str2num
0000dc  b928              CBNZ     r0,|L16.234|
;;;233        lexerror(ls, "malformed number", TK_FLT);
0000de  f2401223          MOV      r2,#0x123
0000e2  a111              ADR      r1,|L16.296|
0000e4  4620              MOV      r0,r4
0000e6  f7fffffe          BL       lexerror
                  |L16.234|
;;;234      if (ttisinteger(&obj)) {
0000ea  f89d0008          LDRB     r0,[sp,#8]
0000ee  2823              CMP      r0,#0x23
0000f0  d108              BNE      |L16.260|
;;;235        seminfo->i = ivalue(&obj);
0000f2  e9dd0100          LDRD     r0,r1,[sp,#0]
0000f6  e9c50100          STRD     r0,r1,[r5,#0]
;;;236        return TK_INT;
0000fa  f44f7092          MOV      r0,#0x124
                  |L16.254|
;;;237      }
;;;238      else {
;;;239        lua_assert(ttisfloat(&obj));
;;;240        seminfo->r = fltvalue(&obj);
;;;241        return TK_FLT;
;;;242      }
;;;243    }
0000fe  b004              ADD      sp,sp,#0x10
000100  e8bd81f0          POP      {r4-r8,pc}
                  |L16.260|
000104  e9dd0100          LDRD     r0,r1,[sp,#0]         ;240
000108  e9c50100          STRD     r0,r1,[r5,#0]         ;240
00010c  f2401023          MOV      r0,#0x123             ;241
000110  e7f5              B        |L16.254|
;;;244    
                          ENDP

000112  0000              DCW      0x0000
                  |L16.276|
000114  456500            DCB      "Ee",0
000117  00                DCB      0
                  |L16.280|
000118  785800            DCB      "xX",0
00011b  00                DCB      0
                  |L16.284|
00011c  507000            DCB      "Pp",0
00011f  00                DCB      0
                  |L16.288|
000120  2d2b00            DCB      "-+",0
000123  00                DCB      0
                  |L16.292|
                          DCD      luai_ctype_
                  |L16.296|
000128  6d616c66          DCB      "malformed number",0
00012c  6f726d65
000130  64206e75
000134  6d626572
000138  00      
000139  00                DCB      0
00013a  00                DCB      0
00013b  00                DCB      0

                          AREA ||i.read_string||, CODE, READONLY, ALIGN=2

                  read_string PROC
;;;365    
;;;366    static void read_string (LexState *ls, int del, SemInfo *seminfo) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;367      save_and_next(ls);  /* keep delimiter (for error messages) */
00000a  4620              MOV      r0,r4
00000c  6821              LDR      r1,[r4,#0]
00000e  f7fffffe          BL       save
000012  6ba0              LDR      r0,[r4,#0x38]
000014  6801              LDR      r1,[r0,#0]
000016  1e48              SUBS     r0,r1,#1
000018  6ba2              LDR      r2,[r4,#0x38]
00001a  6010              STR      r0,[r2,#0]
00001c  b131              CBZ      r1,|L17.44|
00001e  6ba0              LDR      r0,[r4,#0x38]
000020  6841              LDR      r1,[r0,#4]
000022  1c48              ADDS     r0,r1,#1
000024  6ba2              LDR      r2,[r4,#0x38]
000026  6050              STR      r0,[r2,#4]
000028  7808              LDRB     r0,[r1,#0]
00002a  e002              B        |L17.50|
                  |L17.44|
00002c  6ba0              LDR      r0,[r4,#0x38]
00002e  f7fffffe          BL       luaZ_fill
                  |L17.50|
000032  6020              STR      r0,[r4,#0]
;;;368      while (ls->current != del) {
000034  e0f4              B        |L17.544|
                  |L17.54|
;;;369        switch (ls->current) {
000036  6820              LDR      r0,[r4,#0]
000038  f1b03fff          CMP      r0,#0xffffffff
00003c  d006              BEQ      |L17.76|
00003e  280a              CMP      r0,#0xa
000040  d00b              BEQ      |L17.90|
000042  280d              CMP      r0,#0xd
000044  d00a              BEQ      |L17.92|
000046  285c              CMP      r0,#0x5c
000048  d17c              BNE      |L17.324|
00004a  e00e              B        |L17.106|
                  |L17.76|
;;;370          case EOZ:
;;;371            lexerror(ls, "unfinished string", TK_EOS);
00004c  f44f7291          MOV      r2,#0x122
000050  a186              ADR      r1,|L17.620|
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       lexerror
;;;372            break;  /* to avoid warnings */
000058  e0e1              B        |L17.542|
                  |L17.90|
;;;373          case '\n':
;;;374          case '\r':
00005a  bf00              NOP      
                  |L17.92|
;;;375            lexerror(ls, "unfinished string", TK_STRING);
00005c  f44f7293          MOV      r2,#0x126
000060  a182              ADR      r1,|L17.620|
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       lexerror
;;;376            break;  /* to avoid warnings */
000068  e0d9              B        |L17.542|
                  |L17.106|
;;;377          case '\\': {  /* escape sequences */
;;;378            int c;  /* final character to be saved */
;;;379            save_and_next(ls);  /* keep '\\' for error messages */
00006a  4620              MOV      r0,r4
00006c  6821              LDR      r1,[r4,#0]
00006e  f7fffffe          BL       save
000072  6ba0              LDR      r0,[r4,#0x38]
000074  6801              LDR      r1,[r0,#0]
000076  1e48              SUBS     r0,r1,#1
000078  6ba2              LDR      r2,[r4,#0x38]
00007a  6010              STR      r0,[r2,#0]
00007c  b131              CBZ      r1,|L17.140|
00007e  6ba0              LDR      r0,[r4,#0x38]
000080  6841              LDR      r1,[r0,#4]
000082  1c48              ADDS     r0,r1,#1
000084  6ba2              LDR      r2,[r4,#0x38]
000086  6050              STR      r0,[r2,#4]
000088  7808              LDRB     r0,[r1,#0]
00008a  e002              B        |L17.146|
                  |L17.140|
00008c  6ba0              LDR      r0,[r4,#0x38]
00008e  f7fffffe          BL       luaZ_fill
                  |L17.146|
000092  6020              STR      r0,[r4,#0]
;;;380            switch (ls->current) {
000094  6820              LDR      r0,[r4,#0]
000096  2866              CMP      r0,#0x66
000098  d024              BEQ      |L17.228|
00009a  dc13              BGT      |L17.196|
00009c  2827              CMP      r0,#0x27
00009e  d03c              BEQ      |L17.282|
0000a0  dc09              BGT      |L17.182|
0000a2  f1b03fff          CMP      r0,#0xffffffff
0000a6  d03a              BEQ      |L17.286|
0000a8  280a              CMP      r0,#0xa
0000aa  d02e              BEQ      |L17.266|
0000ac  280d              CMP      r0,#0xd
0000ae  d02d              BEQ      |L17.268|
0000b0  2822              CMP      r0,#0x22
0000b2  d172              BNE      |L17.410|
0000b4  e030              B        |L17.280|
                  |L17.182|
0000b6  285c              CMP      r0,#0x5c
0000b8  d02d              BEQ      |L17.278|
0000ba  2861              CMP      r0,#0x61
0000bc  d00e              BEQ      |L17.220|
0000be  2862              CMP      r0,#0x62
0000c0  d16b              BNE      |L17.410|
0000c2  e00d              B        |L17.224|
                  |L17.196|
0000c4  386e              SUBS     r0,r0,#0x6e
0000c6  280d              CMP      r0,#0xd
0000c8  d267              BCS      |L17.410|
0000ca  e8dff000          TBB      [pc,r0]
0000ce  0d66              DCB      0x0d,0x66
0000d0  66660f66          DCB      0x66,0x66,0x0f,0x66
0000d4  111a1366          DCB      0x11,0x1a,0x13,0x66
0000d8  15662900          DCB      0x15,0x66,0x29,0x00
                  |L17.220|
;;;381              case 'a': c = '\a'; goto read_save;
0000dc  2507              MOVS     r5,#7
0000de  e06b              B        |L17.440|
                  |L17.224|
;;;382              case 'b': c = '\b'; goto read_save;
0000e0  2508              MOVS     r5,#8
0000e2  e069              B        |L17.440|
                  |L17.228|
;;;383              case 'f': c = '\f'; goto read_save;
0000e4  250c              MOVS     r5,#0xc
0000e6  e067              B        |L17.440|
;;;384              case 'n': c = '\n'; goto read_save;
0000e8  250a              MOVS     r5,#0xa
0000ea  e065              B        |L17.440|
;;;385              case 'r': c = '\r'; goto read_save;
0000ec  250d              MOVS     r5,#0xd
0000ee  e063              B        |L17.440|
;;;386              case 't': c = '\t'; goto read_save;
0000f0  2509              MOVS     r5,#9
0000f2  e061              B        |L17.440|
;;;387              case 'v': c = '\v'; goto read_save;
0000f4  250b              MOVS     r5,#0xb
0000f6  e05f              B        |L17.440|
;;;388              case 'x': c = readhexaesc(ls); goto read_save;
0000f8  4620              MOV      r0,r4
0000fa  f7fffffe          BL       readhexaesc
0000fe  4605              MOV      r5,r0
000100  e05a              B        |L17.440|
;;;389              case 'u': utf8esc(ls);  goto no_save;
000102  4620              MOV      r0,r4
000104  f7fffffe          BL       utf8esc
000108  e072              B        |L17.496|
                  |L17.266|
;;;390              case '\n': case '\r':
00010a  bf00              NOP      
                  |L17.268|
;;;391                inclinenumber(ls); c = '\n'; goto only_save;
00010c  4620              MOV      r0,r4
00010e  f7fffffe          BL       inclinenumber
000112  250a              MOVS     r5,#0xa
000114  e062              B        |L17.476|
                  |L17.278|
;;;392              case '\\': case '\"': case '\'':
000116  bf00              NOP      
                  |L17.280|
000118  bf00              NOP      
                  |L17.282|
;;;393                c = ls->current; goto read_save;
00011a  6825              LDR      r5,[r4,#0]
00011c  e04c              B        |L17.440|
                  |L17.286|
;;;394              case EOZ: goto no_save;  /* will raise an error next loop */
00011e  e067              B        |L17.496|
;;;395              case 'z': {  /* zap following span of spaces */
;;;396                luaZ_buffremove(ls->buff, 1);  /* remove '\\' */
000120  6be0              LDR      r0,[r4,#0x3c]
000122  6840              LDR      r0,[r0,#4]
000124  1e40              SUBS     r0,r0,#1
000126  6be1              LDR      r1,[r4,#0x3c]
000128  6048              STR      r0,[r1,#4]
;;;397                next(ls);  /* skip the 'z' */
00012a  6ba0              LDR      r0,[r4,#0x38]
00012c  6801              LDR      r1,[r0,#0]
00012e  1e48              SUBS     r0,r1,#1
000130  6ba2              LDR      r2,[r4,#0x38]
000132  6010              STR      r0,[r2,#0]
000134  b139              CBZ      r1,|L17.326|
000136  6ba0              LDR      r0,[r4,#0x38]
000138  6841              LDR      r1,[r0,#4]
00013a  1c48              ADDS     r0,r1,#1
00013c  6ba2              LDR      r2,[r4,#0x38]
00013e  6050              STR      r0,[r2,#4]
000140  7808              LDRB     r0,[r1,#0]
000142  e003              B        |L17.332|
                  |L17.324|
000144  e055              B        |L17.498|
                  |L17.326|
000146  6ba0              LDR      r0,[r4,#0x38]
000148  f7fffffe          BL       luaZ_fill
                  |L17.332|
00014c  6020              STR      r0,[r4,#0]
;;;398                while (lisspace(ls->current)) {
00014e  e01a              B        |L17.390|
                  |L17.336|
;;;399                  if (currIsNewline(ls)) inclinenumber(ls);
000150  6820              LDR      r0,[r4,#0]
000152  280a              CMP      r0,#0xa
000154  d002              BEQ      |L17.348|
000156  6820              LDR      r0,[r4,#0]
000158  280d              CMP      r0,#0xd
00015a  d103              BNE      |L17.356|
                  |L17.348|
00015c  4620              MOV      r0,r4
00015e  f7fffffe          BL       inclinenumber
000162  e010              B        |L17.390|
                  |L17.356|
;;;400                  else next(ls);
000164  6ba0              LDR      r0,[r4,#0x38]
000166  6801              LDR      r1,[r0,#0]
000168  1e48              SUBS     r0,r1,#1
00016a  6ba2              LDR      r2,[r4,#0x38]
00016c  6010              STR      r0,[r2,#0]
00016e  b131              CBZ      r1,|L17.382|
000170  6ba0              LDR      r0,[r4,#0x38]
000172  6841              LDR      r1,[r0,#4]
000174  1c48              ADDS     r0,r1,#1
000176  6ba2              LDR      r2,[r4,#0x38]
000178  6050              STR      r0,[r2,#4]
00017a  7808              LDRB     r0,[r1,#0]
00017c  e002              B        |L17.388|
                  |L17.382|
00017e  6ba0              LDR      r0,[r4,#0x38]
000180  f7fffffe          BL       luaZ_fill
                  |L17.388|
000184  6020              STR      r0,[r4,#0]
                  |L17.390|
000186  6820              LDR      r0,[r4,#0]            ;398
000188  1c40              ADDS     r0,r0,#1              ;398
00018a  493d              LDR      r1,|L17.640|
00018c  5c08              LDRB     r0,[r1,r0]            ;398
00018e  f0000008          AND      r0,r0,#8              ;398
000192  2800              CMP      r0,#0                 ;398
000194  d1dc              BNE      |L17.336|
;;;401                }
;;;402                goto no_save;
000196  e02b              B        |L17.496|
000198  e7ff              B        |L17.410|
                  |L17.410|
;;;403              }
;;;404              default: {
;;;405                esccheck(ls, lisdigit(ls->current), "invalid escape sequence");
00019a  6820              LDR      r0,[r4,#0]
00019c  1c40              ADDS     r0,r0,#1
00019e  4a38              LDR      r2,|L17.640|
0001a0  5c10              LDRB     r0,[r2,r0]
0001a2  f0000102          AND      r1,r0,#2
0001a6  a237              ADR      r2,|L17.644|
0001a8  4620              MOV      r0,r4
0001aa  f7fffffe          BL       esccheck
;;;406                c = readdecesc(ls);  /* digital escape '\ddd' */
0001ae  4620              MOV      r0,r4
0001b0  f7fffffe          BL       readdecesc
0001b4  4605              MOV      r5,r0
;;;407                goto only_save;
0001b6  e011              B        |L17.476|
                  |L17.440|
;;;408              }
;;;409            }
;;;410           read_save:
;;;411             next(ls);
0001b8  6ba0              LDR      r0,[r4,#0x38]
0001ba  6801              LDR      r1,[r0,#0]
0001bc  1e48              SUBS     r0,r1,#1
0001be  6ba2              LDR      r2,[r4,#0x38]
0001c0  6010              STR      r0,[r2,#0]
0001c2  b131              CBZ      r1,|L17.466|
0001c4  6ba0              LDR      r0,[r4,#0x38]
0001c6  6841              LDR      r1,[r0,#4]
0001c8  1c48              ADDS     r0,r1,#1
0001ca  6ba2              LDR      r2,[r4,#0x38]
0001cc  6050              STR      r0,[r2,#4]
0001ce  7808              LDRB     r0,[r1,#0]
0001d0  e002              B        |L17.472|
                  |L17.466|
0001d2  6ba0              LDR      r0,[r4,#0x38]
0001d4  f7fffffe          BL       luaZ_fill
                  |L17.472|
0001d8  6020              STR      r0,[r4,#0]
;;;412             /* go through */
;;;413           only_save:
0001da  bf00              NOP      
                  |L17.476|
;;;414             luaZ_buffremove(ls->buff, 1);  /* remove '\\' */
0001dc  6be0              LDR      r0,[r4,#0x3c]
0001de  6840              LDR      r0,[r0,#4]
0001e0  1e40              SUBS     r0,r0,#1
0001e2  6be1              LDR      r1,[r4,#0x3c]
0001e4  6048              STR      r0,[r1,#4]
;;;415             save(ls, c);
0001e6  4629              MOV      r1,r5
0001e8  4620              MOV      r0,r4
0001ea  f7fffffe          BL       save
;;;416             /* go through */
;;;417           no_save: break;
0001ee  bf00              NOP      
                  |L17.496|
0001f0  e015              B        |L17.542|
                  |L17.498|
;;;418          }
;;;419          default:
;;;420            save_and_next(ls);
0001f2  4620              MOV      r0,r4
0001f4  6821              LDR      r1,[r4,#0]
0001f6  f7fffffe          BL       save
0001fa  6ba0              LDR      r0,[r4,#0x38]
0001fc  6801              LDR      r1,[r0,#0]
0001fe  1e48              SUBS     r0,r1,#1
000200  6ba2              LDR      r2,[r4,#0x38]
000202  6010              STR      r0,[r2,#0]
000204  b131              CBZ      r1,|L17.532|
000206  6ba0              LDR      r0,[r4,#0x38]
000208  6841              LDR      r1,[r0,#4]
00020a  1c48              ADDS     r0,r1,#1
00020c  6ba2              LDR      r2,[r4,#0x38]
00020e  6050              STR      r0,[r2,#4]
000210  7808              LDRB     r0,[r1,#0]
000212  e002              B        |L17.538|
                  |L17.532|
000214  6ba0              LDR      r0,[r4,#0x38]
000216  f7fffffe          BL       luaZ_fill
                  |L17.538|
00021a  6020              STR      r0,[r4,#0]
00021c  bf00              NOP                            ;369
                  |L17.542|
00021e  bf00              NOP                            ;372
                  |L17.544|
000220  6820              LDR      r0,[r4,#0]            ;368
000222  42b0              CMP      r0,r6                 ;368
000224  f47faf07          BNE      |L17.54|
;;;421        }
;;;422      }
;;;423      save_and_next(ls);  /* skip delimiter */
000228  4620              MOV      r0,r4
00022a  6821              LDR      r1,[r4,#0]
00022c  f7fffffe          BL       save
000230  6ba0              LDR      r0,[r4,#0x38]
000232  6801              LDR      r1,[r0,#0]
000234  1e48              SUBS     r0,r1,#1
000236  6ba2              LDR      r2,[r4,#0x38]
000238  6010              STR      r0,[r2,#0]
00023a  b131              CBZ      r1,|L17.586|
00023c  6ba0              LDR      r0,[r4,#0x38]
00023e  6841              LDR      r1,[r0,#4]
000240  1c48              ADDS     r0,r1,#1
000242  6ba2              LDR      r2,[r4,#0x38]
000244  6050              STR      r0,[r2,#4]
000246  7808              LDRB     r0,[r1,#0]
000248  e002              B        |L17.592|
                  |L17.586|
00024a  6ba0              LDR      r0,[r4,#0x38]
00024c  f7fffffe          BL       luaZ_fill
                  |L17.592|
000250  6020              STR      r0,[r4,#0]
;;;424      seminfo->ts = luaX_newstring(ls, luaZ_buffer(ls->buff) + 1,
000252  6be0              LDR      r0,[r4,#0x3c]
000254  6840              LDR      r0,[r0,#4]
000256  1e82              SUBS     r2,r0,#2
000258  6be0              LDR      r0,[r4,#0x3c]
00025a  6800              LDR      r0,[r0,#0]
00025c  1c41              ADDS     r1,r0,#1
00025e  4620              MOV      r0,r4
000260  f7fffffe          BL       luaX_newstring
000264  6038              STR      r0,[r7,#0]
;;;425                                       luaZ_bufflen(ls->buff) - 2);
;;;426    }
000266  e8bd81f0          POP      {r4-r8,pc}
;;;427    
                          ENDP

00026a  0000              DCW      0x0000
                  |L17.620|
00026c  756e6669          DCB      "unfinished string",0
000270  6e697368
000274  65642073
000278  7472696e
00027c  6700    
00027e  00                DCB      0
00027f  00                DCB      0
                  |L17.640|
                          DCD      luai_ctype_
                  |L17.644|
000284  696e7661          DCB      "invalid escape sequence",0
000288  6c696420
00028c  65736361
000290  70652073
000294  65717565
000298  6e636500

                          AREA ||i.readdecesc||, CODE, READONLY, ALIGN=2

                  readdecesc PROC
;;;352    
;;;353    static int readdecesc (LexState *ls) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;354      int i;
;;;355      int r = 0;  /* result accumulator */
000004  2600              MOVS     r6,#0
;;;356      for (i = 0; i < 3 && lisdigit(ls->current); i++) {  /* read up to 3 digits */
000006  2500              MOVS     r5,#0
000008  e01b              B        |L18.66|
                  |L18.10|
;;;357        r = 10*r + ls->current - '0';
00000a  210a              MOVS     r1,#0xa
00000c  6820              LDR      r0,[r4,#0]
00000e  fb010006          MLA      r0,r1,r6,r0
000012  f1a00630          SUB      r6,r0,#0x30
;;;358        save_and_next(ls);
000016  4620              MOV      r0,r4
000018  6821              LDR      r1,[r4,#0]
00001a  f7fffffe          BL       save
00001e  6ba0              LDR      r0,[r4,#0x38]
000020  6801              LDR      r1,[r0,#0]
000022  1e48              SUBS     r0,r1,#1
000024  6ba2              LDR      r2,[r4,#0x38]
000026  6010              STR      r0,[r2,#0]
000028  b131              CBZ      r1,|L18.56|
00002a  6ba0              LDR      r0,[r4,#0x38]
00002c  6841              LDR      r1,[r0,#4]
00002e  1c48              ADDS     r0,r1,#1
000030  6ba2              LDR      r2,[r4,#0x38]
000032  6050              STR      r0,[r2,#4]
000034  7808              LDRB     r0,[r1,#0]
000036  e002              B        |L18.62|
                  |L18.56|
000038  6ba0              LDR      r0,[r4,#0x38]
00003a  f7fffffe          BL       luaZ_fill
                  |L18.62|
00003e  6020              STR      r0,[r4,#0]
000040  1c6d              ADDS     r5,r5,#1              ;356
                  |L18.66|
000042  2d03              CMP      r5,#3                 ;356
000044  da07              BGE      |L18.86|
000046  6820              LDR      r0,[r4,#0]            ;356
000048  1c40              ADDS     r0,r0,#1              ;356
00004a  490b              LDR      r1,|L18.120|
00004c  5c08              LDRB     r0,[r1,r0]            ;356
00004e  f0000002          AND      r0,r0,#2              ;356
000052  2800              CMP      r0,#0                 ;356
000054  d1d9              BNE      |L18.10|
                  |L18.86|
;;;359      }
;;;360      esccheck(ls, r <= UCHAR_MAX, "decimal escape too large");
000056  2eff              CMP      r6,#0xff
000058  dc01              BGT      |L18.94|
00005a  2001              MOVS     r0,#1
00005c  e000              B        |L18.96|
                  |L18.94|
00005e  2000              MOVS     r0,#0
                  |L18.96|
000060  4601              MOV      r1,r0
000062  a206              ADR      r2,|L18.124|
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       esccheck
;;;361      luaZ_buffremove(ls->buff, i);  /* remove read digits from buffer */
00006a  6be0              LDR      r0,[r4,#0x3c]
00006c  6840              LDR      r0,[r0,#4]
00006e  1b40              SUBS     r0,r0,r5
000070  6be1              LDR      r1,[r4,#0x3c]
000072  6048              STR      r0,[r1,#4]
;;;362      return r;
000074  4630              MOV      r0,r6
;;;363    }
000076  bd70              POP      {r4-r6,pc}
;;;364    
                          ENDP

                  |L18.120|
                          DCD      luai_ctype_
                  |L18.124|
00007c  64656369          DCB      "decimal escape too large",0
000080  6d616c20
000084  65736361
000088  70652074
00008c  6f6f206c
000090  61726765
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0

                          AREA ||i.readhexaesc||, CODE, READONLY, ALIGN=1

                  readhexaesc PROC
;;;318    
;;;319    static int readhexaesc (LexState *ls) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;320      int r = gethexa(ls);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       gethexa
00000a  4605              MOV      r5,r0
;;;321      r = (r << 4) + gethexa(ls);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       gethexa
000012  eb001505          ADD      r5,r0,r5,LSL #4
;;;322      luaZ_buffremove(ls->buff, 2);  /* remove saved chars from buffer */
000016  6be0              LDR      r0,[r4,#0x3c]
000018  6840              LDR      r0,[r0,#4]
00001a  1e80              SUBS     r0,r0,#2
00001c  6be1              LDR      r1,[r4,#0x3c]
00001e  6048              STR      r0,[r1,#4]
;;;323      return r;
000020  4628              MOV      r0,r5
;;;324    }
000022  bd70              POP      {r4-r6,pc}
;;;325    
                          ENDP


                          AREA ||i.readutf8esc||, CODE, READONLY, ALIGN=2

                  readutf8esc PROC
;;;326    
;;;327    static unsigned long readutf8esc (LexState *ls) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;328      unsigned long r;
;;;329      int i = 4;  /* chars to be removed: '\', 'u', '{', and first digit */
000004  2604              MOVS     r6,#4
;;;330      save_and_next(ls);  /* skip 'u' */
000006  4620              MOV      r0,r4
000008  6821              LDR      r1,[r4,#0]
00000a  f7fffffe          BL       save
00000e  6ba0              LDR      r0,[r4,#0x38]
000010  6801              LDR      r1,[r0,#0]
000012  1e48              SUBS     r0,r1,#1
000014  6ba2              LDR      r2,[r4,#0x38]
000016  6010              STR      r0,[r2,#0]
000018  b131              CBZ      r1,|L20.40|
00001a  6ba0              LDR      r0,[r4,#0x38]
00001c  6841              LDR      r1,[r0,#4]
00001e  1c48              ADDS     r0,r1,#1
000020  6ba2              LDR      r2,[r4,#0x38]
000022  6050              STR      r0,[r2,#4]
000024  7808              LDRB     r0,[r1,#0]
000026  e002              B        |L20.46|
                  |L20.40|
000028  6ba0              LDR      r0,[r4,#0x38]
00002a  f7fffffe          BL       luaZ_fill
                  |L20.46|
00002e  6020              STR      r0,[r4,#0]
;;;331      esccheck(ls, ls->current == '{', "missing '{'");
000030  6820              LDR      r0,[r4,#0]
000032  287b              CMP      r0,#0x7b
000034  d101              BNE      |L20.58|
000036  2001              MOVS     r0,#1
000038  e000              B        |L20.60|
                  |L20.58|
00003a  2000              MOVS     r0,#0
                  |L20.60|
00003c  4601              MOV      r1,r0
00003e  a22d              ADR      r2,|L20.244|
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       esccheck
;;;332      r = gethexa(ls);  /* must have at least one digit */
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       gethexa
00004c  4605              MOV      r5,r0
;;;333      while ((save_and_next(ls), lisxdigit(ls->current))) {
00004e  e010              B        |L20.114|
                  |L20.80|
;;;334        i++;
000050  1c76              ADDS     r6,r6,#1
;;;335        r = (r << 4) + luaO_hexavalue(ls->current);
000052  6820              LDR      r0,[r4,#0]
000054  f7fffffe          BL       luaO_hexavalue
000058  eb001505          ADD      r5,r0,r5,LSL #4
;;;336        esccheck(ls, r <= 0x10FFFF, "UTF-8 value too large");
00005c  f5b51f88          CMP      r5,#0x110000
000060  d201              BCS      |L20.102|
000062  2001              MOVS     r0,#1
000064  e000              B        |L20.104|
                  |L20.102|
000066  2000              MOVS     r0,#0
                  |L20.104|
000068  4601              MOV      r1,r0
00006a  a225              ADR      r2,|L20.256|
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       esccheck
                  |L20.114|
000072  4620              MOV      r0,r4                 ;333
000074  6821              LDR      r1,[r4,#0]            ;333
000076  f7fffffe          BL       save
00007a  6ba0              LDR      r0,[r4,#0x38]         ;333
00007c  6801              LDR      r1,[r0,#0]            ;333
00007e  1e48              SUBS     r0,r1,#1              ;333
000080  6ba2              LDR      r2,[r4,#0x38]         ;333
000082  6010              STR      r0,[r2,#0]            ;333
000084  b131              CBZ      r1,|L20.148|
000086  6ba0              LDR      r0,[r4,#0x38]         ;333
000088  6841              LDR      r1,[r0,#4]            ;333
00008a  1c48              ADDS     r0,r1,#1              ;333
00008c  6ba2              LDR      r2,[r4,#0x38]         ;333
00008e  6050              STR      r0,[r2,#4]            ;333
000090  7808              LDRB     r0,[r1,#0]            ;333
000092  e002              B        |L20.154|
                  |L20.148|
000094  6ba0              LDR      r0,[r4,#0x38]         ;333
000096  f7fffffe          BL       luaZ_fill
                  |L20.154|
00009a  6020              STR      r0,[r4,#0]            ;333
00009c  6820              LDR      r0,[r4,#0]            ;333
00009e  1c40              ADDS     r0,r0,#1              ;333
0000a0  491d              LDR      r1,|L20.280|
0000a2  5c08              LDRB     r0,[r1,r0]            ;333
0000a4  f0000010          AND      r0,r0,#0x10           ;333
0000a8  2800              CMP      r0,#0                 ;333
0000aa  d1d1              BNE      |L20.80|
;;;337      }
;;;338      esccheck(ls, ls->current == '}', "missing '}'");
0000ac  6820              LDR      r0,[r4,#0]
0000ae  287d              CMP      r0,#0x7d
0000b0  d101              BNE      |L20.182|
0000b2  2001              MOVS     r0,#1
0000b4  e000              B        |L20.184|
                  |L20.182|
0000b6  2000              MOVS     r0,#0
                  |L20.184|
0000b8  4601              MOV      r1,r0
0000ba  a218              ADR      r2,|L20.284|
0000bc  4620              MOV      r0,r4
0000be  f7fffffe          BL       esccheck
;;;339      next(ls);  /* skip '}' */
0000c2  6ba0              LDR      r0,[r4,#0x38]
0000c4  6801              LDR      r1,[r0,#0]
0000c6  1e48              SUBS     r0,r1,#1
0000c8  6ba2              LDR      r2,[r4,#0x38]
0000ca  6010              STR      r0,[r2,#0]
0000cc  b131              CBZ      r1,|L20.220|
0000ce  6ba0              LDR      r0,[r4,#0x38]
0000d0  6841              LDR      r1,[r0,#4]
0000d2  1c48              ADDS     r0,r1,#1
0000d4  6ba2              LDR      r2,[r4,#0x38]
0000d6  6050              STR      r0,[r2,#4]
0000d8  7808              LDRB     r0,[r1,#0]
0000da  e002              B        |L20.226|
                  |L20.220|
0000dc  6ba0              LDR      r0,[r4,#0x38]
0000de  f7fffffe          BL       luaZ_fill
                  |L20.226|
0000e2  6020              STR      r0,[r4,#0]
;;;340      luaZ_buffremove(ls->buff, i);  /* remove saved chars from buffer */
0000e4  6be0              LDR      r0,[r4,#0x3c]
0000e6  6840              LDR      r0,[r0,#4]
0000e8  1b80              SUBS     r0,r0,r6
0000ea  6be1              LDR      r1,[r4,#0x3c]
0000ec  6048              STR      r0,[r1,#4]
;;;341      return r;
0000ee  4628              MOV      r0,r5
;;;342    }
0000f0  bd70              POP      {r4-r6,pc}
;;;343    
                          ENDP

0000f2  0000              DCW      0x0000
                  |L20.244|
0000f4  6d697373          DCB      "missing '{'",0
0000f8  696e6720
0000fc  277b2700
                  |L20.256|
000100  5554462d          DCB      "UTF-8 value too large",0
000104  38207661
000108  6c756520
00010c  746f6f20
000110  6c617267
000114  6500    
000116  00                DCB      0
000117  00                DCB      0
                  |L20.280|
                          DCD      luai_ctype_
                  |L20.284|
00011c  6d697373          DCB      "missing '}'",0
000120  696e6720
000124  277d2700

                          AREA ||i.save||, CODE, READONLY, ALIGN=2

                  save PROC
;;;56     
;;;57     static void save (LexState *ls, int c) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;58       Mbuffer *b = ls->buff;
000008  6bf4              LDR      r4,[r6,#0x3c]
;;;59       if (luaZ_bufflen(b) + 1 > luaZ_sizebuffer(b)) {
00000a  6860              LDR      r0,[r4,#4]
00000c  1c40              ADDS     r0,r0,#1
00000e  68a1              LDR      r1,[r4,#8]
000010  4288              CMP      r0,r1
000012  d914              BLS      |L21.62|
;;;60         size_t newsize;
;;;61         if (luaZ_sizebuffer(b) >= MAX_SIZE/2)
000014  f06f4100          MVN      r1,#0x80000000
000018  68a0              LDR      r0,[r4,#8]
00001a  4288              CMP      r0,r1
00001c  d304              BCC      |L21.40|
;;;62           lexerror(ls, "lexical element too long", 0);
00001e  2200              MOVS     r2,#0
000020  a10b              ADR      r1,|L21.80|
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       lexerror
                  |L21.40|
;;;63         newsize = luaZ_sizebuffer(b) * 2;
000028  68a0              LDR      r0,[r4,#8]
00002a  0045              LSLS     r5,r0,#1
;;;64         luaZ_resizebuffer(ls->L, b, newsize);
00002c  462b              MOV      r3,r5
00002e  68a2              LDR      r2,[r4,#8]
000030  6821              LDR      r1,[r4,#0]
000032  6b70              LDR      r0,[r6,#0x34]
000034  f7fffffe          BL       luaM_saferealloc_
000038  6020              STR      r0,[r4,#0]
00003a  60a5              STR      r5,[r4,#8]
;;;65       }
00003c  bf00              NOP      
                  |L21.62|
;;;66       b->buffer[luaZ_bufflen(b)++] = cast_char(c);
00003e  b279              SXTB     r1,r7
000040  6862              LDR      r2,[r4,#4]
000042  1c50              ADDS     r0,r2,#1
000044  6060              STR      r0,[r4,#4]
000046  6820              LDR      r0,[r4,#0]
000048  5481              STRB     r1,[r0,r2]
;;;67     }
00004a  e8bd81f0          POP      {r4-r8,pc}
;;;68     
                          ENDP

00004e  0000              DCW      0x0000
                  |L21.80|
000050  6c657869          DCB      "lexical element too long",0
000054  63616c20
000058  656c656d
00005c  656e7420
000060  746f6f20
000064  6c6f6e67
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.skip_sep||, CODE, READONLY, ALIGN=1

                  skip_sep PROC
;;;250    */
;;;251    static int skip_sep (LexState *ls) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;252      int count = 0;
000004  2500              MOVS     r5,#0
;;;253      int s = ls->current;
000006  6826              LDR      r6,[r4,#0]
;;;254      lua_assert(s == '[' || s == ']');
;;;255      save_and_next(ls);
000008  4620              MOV      r0,r4
00000a  6821              LDR      r1,[r4,#0]
00000c  f7fffffe          BL       save
000010  6ba0              LDR      r0,[r4,#0x38]
000012  6801              LDR      r1,[r0,#0]
000014  1e48              SUBS     r0,r1,#1
000016  6ba2              LDR      r2,[r4,#0x38]
000018  6010              STR      r0,[r2,#0]
00001a  b131              CBZ      r1,|L22.42|
00001c  6ba0              LDR      r0,[r4,#0x38]
00001e  6841              LDR      r1,[r0,#4]
000020  1c48              ADDS     r0,r1,#1
000022  6ba2              LDR      r2,[r4,#0x38]
000024  6050              STR      r0,[r2,#4]
000026  7808              LDRB     r0,[r1,#0]
000028  e002              B        |L22.48|
                  |L22.42|
00002a  6ba0              LDR      r0,[r4,#0x38]
00002c  f7fffffe          BL       luaZ_fill
                  |L22.48|
000030  6020              STR      r0,[r4,#0]
;;;256      while (ls->current == '=') {
000032  e015              B        |L22.96|
                  |L22.52|
;;;257        save_and_next(ls);
000034  4620              MOV      r0,r4
000036  6821              LDR      r1,[r4,#0]
000038  f7fffffe          BL       save
00003c  6ba0              LDR      r0,[r4,#0x38]
00003e  6801              LDR      r1,[r0,#0]
000040  1e48              SUBS     r0,r1,#1
000042  6ba2              LDR      r2,[r4,#0x38]
000044  6010              STR      r0,[r2,#0]
000046  b131              CBZ      r1,|L22.86|
000048  6ba0              LDR      r0,[r4,#0x38]
00004a  6841              LDR      r1,[r0,#4]
00004c  1c48              ADDS     r0,r1,#1
00004e  6ba2              LDR      r2,[r4,#0x38]
000050  6050              STR      r0,[r2,#4]
000052  7808              LDRB     r0,[r1,#0]
000054  e002              B        |L22.92|
                  |L22.86|
000056  6ba0              LDR      r0,[r4,#0x38]
000058  f7fffffe          BL       luaZ_fill
                  |L22.92|
00005c  6020              STR      r0,[r4,#0]
;;;258        count++;
00005e  1c6d              ADDS     r5,r5,#1
                  |L22.96|
000060  6820              LDR      r0,[r4,#0]            ;256
000062  283d              CMP      r0,#0x3d              ;256
000064  d0e6              BEQ      |L22.52|
;;;259      }
;;;260      return (ls->current == s) ? count : (-count) - 1;
000066  6820              LDR      r0,[r4,#0]
000068  42b0              CMP      r0,r6
00006a  d101              BNE      |L22.112|
00006c  4628              MOV      r0,r5
                  |L22.110|
;;;261    }
00006e  bd70              POP      {r4-r6,pc}
                  |L22.112|
000070  f1c530ff          RSB      r0,r5,#0xffffffff     ;260
000074  e7fb              B        |L22.110|
;;;262    
                          ENDP


                          AREA ||i.txtToken||, CODE, READONLY, ALIGN=2

                  txtToken PROC
;;;96     
;;;97     static const char *txtToken (LexState *ls, int token) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;98       switch (token) {
000006  f2a51023          SUB      r0,r5,#0x123
00000a  b140              CBZ      r0,|L23.30|
00000c  2801              CMP      r0,#1
00000e  d007              BEQ      |L23.32|
000010  2802              CMP      r0,#2
000012  d002              BEQ      |L23.26|
000014  2803              CMP      r0,#3
000016  d10e              BNE      |L23.54|
000018  e000              B        |L23.28|
                  |L23.26|
;;;99         case TK_NAME: case TK_STRING:
00001a  bf00              NOP      
                  |L23.28|
;;;100        case TK_FLT: case TK_INT:
00001c  bf00              NOP      
                  |L23.30|
00001e  bf00              NOP      
                  |L23.32|
;;;101          save(ls, '\0');
000020  2100              MOVS     r1,#0
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       save
;;;102          return luaO_pushfstring(ls->L, "'%s'", luaZ_buffer(ls->buff));
000028  6be1              LDR      r1,[r4,#0x3c]
00002a  680a              LDR      r2,[r1,#0]
00002c  a104              ADR      r1,|L23.64|
00002e  6b60              LDR      r0,[r4,#0x34]
000030  f7fffffe          BL       luaO_pushfstring
                  |L23.52|
;;;103        default:
;;;104          return luaX_token2str(ls, token);
;;;105      }
;;;106    }
000034  bd70              POP      {r4-r6,pc}
                  |L23.54|
000036  4629              MOV      r1,r5                 ;104
000038  4620              MOV      r0,r4                 ;104
00003a  f7fffffe          BL       luaX_token2str
00003e  e7f9              B        |L23.52|
;;;107    
                          ENDP

                  |L23.64|
000040  27257327          DCB      "'%s'",0
000044  00      
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0

                          AREA ||i.utf8esc||, CODE, READONLY, ALIGN=1

                  utf8esc PROC
;;;344    
;;;345    static void utf8esc (LexState *ls) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4605              MOV      r5,r0
;;;346      char buff[UTF8BUFFSZ];
;;;347      int n = luaO_utf8esc(buff, readutf8esc(ls));
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       readutf8esc
00000a  4606              MOV      r6,r0
00000c  4631              MOV      r1,r6
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       luaO_utf8esc
000014  4604              MOV      r4,r0
;;;348      for (; n > 0; n--)  /* add 'buff' to string */
000016  e007              B        |L24.40|
                  |L24.24|
;;;349        save(ls, buff[UTF8BUFFSZ - n]);
000018  f1c40008          RSB      r0,r4,#8
00001c  f91d1000          LDRSB    r1,[sp,r0]
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       save
000026  1e64              SUBS     r4,r4,#1              ;348
                  |L24.40|
000028  2c00              CMP      r4,#0                 ;348
00002a  dcf5              BGT      |L24.24|
;;;350    }
00002c  bd7c              POP      {r2-r6,pc}
;;;351    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  luaX_tokens
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x4
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0x10
                          DCD      ||.conststring||+0x18
                          DCD      ||.conststring||+0x20
                          DCD      ||.conststring||+0x24
                          DCD      ||.conststring||+0x2c
                          DCD      ||.conststring||+0x30
                          DCD      ||.conststring||+0x3c
                          DCD      ||.conststring||+0x44
                          DCD      ||.conststring||+0x48
                          DCD      ||.conststring||+0x4c
                          DCD      ||.conststring||+0x54
                          DCD      ||.conststring||+0x58
                          DCD      ||.conststring||+0x5c
                          DCD      ||.conststring||+0x60
                          DCD      ||.conststring||+0x68
                          DCD      ||.conststring||+0x70
                          DCD      ||.conststring||+0x78
                          DCD      ||.conststring||+0x80
                          DCD      ||.conststring||+0x88
                          DCD      ||.conststring||+0x90
                          DCD      ||.conststring||+0x98
                          DCD      ||.conststring||+0x9c
                          DCD      ||.conststring||+0xa0
                          DCD      ||.conststring||+0xa4
                          DCD      ||.conststring||+0xa8
                          DCD      ||.conststring||+0xac
                          DCD      ||.conststring||+0xb0
                          DCD      ||.conststring||+0xb4
                          DCD      ||.conststring||+0xb8
                          DCD      ||.conststring||+0xbc
                          DCD      ||.conststring||+0xc0
                          DCD      ||.conststring||+0xc8
                          DCD      ||.conststring||+0xd4
                          DCD      ||.conststring||+0xe0
                          DCD      ||.conststring||+0xe8

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  616e6400          DCB      "and",0
000004  62726561          DCB      "break",0
000008  6b00    
00000a  00                DCB      0
00000b  00                DCB      0
00000c  646f00            DCB      "do",0
00000f  00                DCB      0
000010  656c7365          DCB      "else",0
000014  00      
000015  00                DCB      0
000016  00                DCB      0
000017  00                DCB      0
000018  656c7365          DCB      "elseif",0
00001c  696600  
00001f  00                DCB      0
000020  656e6400          DCB      "end",0
000024  66616c73          DCB      "false",0
000028  6500    
00002a  00                DCB      0
00002b  00                DCB      0
00002c  666f7200          DCB      "for",0
000030  66756e63          DCB      "function",0
000034  74696f6e
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0
00003c  676f746f          DCB      "goto",0
000040  00      
000041  00                DCB      0
000042  00                DCB      0
000043  00                DCB      0
000044  696600            DCB      "if",0
000047  00                DCB      0
000048  696e00            DCB      "in",0
00004b  00                DCB      0
00004c  6c6f6361          DCB      "local",0
000050  6c00    
000052  00                DCB      0
000053  00                DCB      0
000054  6e696c00          DCB      "nil",0
000058  6e6f7400          DCB      "not",0
00005c  6f7200            DCB      "or",0
00005f  00                DCB      0
000060  72657065          DCB      "repeat",0
000064  617400  
000067  00                DCB      0
000068  72657475          DCB      "return",0
00006c  726e00  
00006f  00                DCB      0
000070  7468656e          DCB      "then",0
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
000078  74727565          DCB      "true",0
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
000080  756e6465          DCB      "undef",0
000084  6600    
000086  00                DCB      0
000087  00                DCB      0
000088  756e7469          DCB      "until",0
00008c  6c00    
00008e  00                DCB      0
00008f  00                DCB      0
000090  7768696c          DCB      "while",0
000094  6500    
000096  00                DCB      0
000097  00                DCB      0
000098  2f2f00            DCB      "//",0
00009b  00                DCB      0
00009c  2e2e00            DCB      "..",0
00009f  00                DCB      0
0000a0  2e2e2e00          DCB      "...",0
0000a4  3d3d00            DCB      "==",0
0000a7  00                DCB      0
0000a8  3e3d00            DCB      ">=",0
0000ab  00                DCB      0
0000ac  3c3d00            DCB      "<=",0
0000af  00                DCB      0
0000b0  7e3d00            DCB      "~=",0
0000b3  00                DCB      0
0000b4  3c3c00            DCB      "<<",0
0000b7  00                DCB      0
0000b8  3e3e00            DCB      ">>",0
0000bb  00                DCB      0
0000bc  3a3a00            DCB      "::",0
0000bf  00                DCB      0
0000c0  3c656f66          DCB      "<eof>",0
0000c4  3e00    
0000c6  00                DCB      0
0000c7  00                DCB      0
0000c8  3c6e756d          DCB      "<number>",0
0000cc  6265723e
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
0000d4  3c696e74          DCB      "<integer>",0
0000d8  65676572
0000dc  3e00    
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  3c6e616d          DCB      "<name>",0
0000e4  653e00  
0000e7  00                DCB      0
0000e8  3c737472          DCB      "<string>",0
0000ec  696e673e
0000f0  00      
