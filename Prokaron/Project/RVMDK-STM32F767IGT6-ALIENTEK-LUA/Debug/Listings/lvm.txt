; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\lvm.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\lvm.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\lvm.crf ..\..\..\M6P1(L)_Lua\lua\lvm.c]
                          THUMB

                          AREA ||i.LEfloatint||, CODE, READONLY, ALIGN=2

                  LEfloatint PROC
;;;358    */
;;;359    static int LEfloatint (lua_Number f, lua_Integer i) {
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;360      if (l_intfitsf(i))
00000c  481a              LDR      r0,|L1.120|
00000e  1e21              SUBS     r1,r4,#0
000010  eb750000          SBCS     r0,r5,r0
000014  db13              BLT      |L1.62|
000016  f44f1000          MOV      r0,#0x200000
00001a  4261              RSBS     r1,r4,#0
00001c  41a8              SBCS     r0,r0,r5
00001e  db0e              BLT      |L1.62|
;;;361        return luai_numle(f, cast_num(i));  /* compare them as floats */
000020  4620              MOV      r0,r4
000022  4629              MOV      r1,r5
000024  f7fffffe          BL       __aeabi_l2d
000028  4680              MOV      r8,r0
00002a  4632              MOV      r2,r6
00002c  463b              MOV      r3,r7
00002e  f7fffffe          BL       __aeabi_cdrcmple
000032  d802              BHI      |L1.58|
000034  2001              MOVS     r0,#1
                  |L1.54|
;;;362      else {  /* f <= i <=> ceil(f) <= i */
;;;363        lua_Integer fi;
;;;364        if (luaV_flttointeger(f, &fi, 2))  /* fi = ceil(f) */
;;;365          return fi <= i;   /* compare them as integers */
;;;366        else  /* 'f' is either greater or less than all integers */
;;;367          return f < 0;  /* less? */
;;;368      }
;;;369    }
000036  e8bd87fc          POP      {r2-r10,pc}
                  |L1.58|
00003a  2000              MOVS     r0,#0                 ;361
00003c  e7fb              B        |L1.54|
                  |L1.62|
00003e  2302              MOVS     r3,#2                 ;364
000040  466a              MOV      r2,sp                 ;364
000042  4630              MOV      r0,r6                 ;364
000044  4639              MOV      r1,r7                 ;364
000046  f7fffffe          BL       luaV_flttointeger
00004a  b148              CBZ      r0,|L1.96|
00004c  e9dd1000          LDRD     r1,r0,[sp,#0]         ;365
000050  1a61              SUBS     r1,r4,r1              ;365
000052  eb750000          SBCS     r0,r5,r0              ;365
000056  db01              BLT      |L1.92|
000058  2001              MOVS     r0,#1                 ;365
00005a  e7ec              B        |L1.54|
                  |L1.92|
00005c  2000              MOVS     r0,#0                 ;365
00005e  e7ea              B        |L1.54|
                  |L1.96|
000060  2200              MOVS     r2,#0                 ;367
000062  4613              MOV      r3,r2                 ;367
000064  4630              MOV      r0,r6                 ;367
000066  4639              MOV      r1,r7                 ;367
000068  f7fffffe          BL       __aeabi_cdcmple
00006c  d201              BCS      |L1.114|
00006e  2001              MOVS     r0,#1                 ;367
000070  e7e1              B        |L1.54|
                  |L1.114|
000072  2000              MOVS     r0,#0                 ;367
000074  e7df              B        |L1.54|
;;;370    
                          ENDP

000076  0000              DCW      0x0000
                  |L1.120|
                          DCD      0xffe00000

                          AREA ||i.LEintfloat||, CODE, READONLY, ALIGN=2

                  LEintfloat PROC
;;;324    */
;;;325    static int LEintfloat (lua_Integer i, lua_Number f) {
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;326      if (l_intfitsf(i))
00000c  4819              LDR      r0,|L2.116|
00000e  1e21              SUBS     r1,r4,#0
000010  eb750000          SBCS     r0,r5,r0
000014  db13              BLT      |L2.62|
000016  f44f1000          MOV      r0,#0x200000
00001a  4261              RSBS     r1,r4,#0
00001c  41a8              SBCS     r0,r0,r5
00001e  db0e              BLT      |L2.62|
;;;327        return luai_numle(cast_num(i), f);  /* compare them as floats */
000020  4620              MOV      r0,r4
000022  4629              MOV      r1,r5
000024  f7fffffe          BL       __aeabi_l2d
000028  4680              MOV      r8,r0
00002a  4632              MOV      r2,r6
00002c  463b              MOV      r3,r7
00002e  f7fffffe          BL       __aeabi_cdcmple
000032  d802              BHI      |L2.58|
000034  2001              MOVS     r0,#1
                  |L2.54|
;;;328      else {  /* i <= f <=> i <= floor(f) */
;;;329        lua_Integer fi;
;;;330        if (luaV_flttointeger(f, &fi, 1))  /* fi = floor(f) */
;;;331          return i <= fi;   /* compare them as integers */
;;;332        else  /* 'f' is either greater or less than all integers */
;;;333          return f > 0;  /* greater? */
;;;334      }
;;;335    }
000036  e8bd87fc          POP      {r2-r10,pc}
                  |L2.58|
00003a  2000              MOVS     r0,#0                 ;327
00003c  e7fb              B        |L2.54|
                  |L2.62|
00003e  2301              MOVS     r3,#1                 ;330
000040  466a              MOV      r2,sp                 ;330
000042  4630              MOV      r0,r6                 ;330
000044  4639              MOV      r1,r7                 ;330
000046  f7fffffe          BL       luaV_flttointeger
00004a  b140              CBZ      r0,|L2.94|
00004c  e9dd1000          LDRD     r1,r0,[sp,#0]         ;331
000050  1b09              SUBS     r1,r1,r4              ;331
000052  41a8              SBCS     r0,r0,r5              ;331
000054  db01              BLT      |L2.90|
000056  2001              MOVS     r0,#1                 ;331
000058  e7ed              B        |L2.54|
                  |L2.90|
00005a  2000              MOVS     r0,#0                 ;331
00005c  e7eb              B        |L2.54|
                  |L2.94|
00005e  2200              MOVS     r2,#0                 ;333
000060  4613              MOV      r3,r2                 ;333
000062  4630              MOV      r0,r6                 ;333
000064  4639              MOV      r1,r7                 ;333
000066  f7fffffe          BL       __aeabi_cdrcmple
00006a  d201              BCS      |L2.112|
00006c  2001              MOVS     r0,#1                 ;333
00006e  e7e2              B        |L2.54|
                  |L2.112|
000070  2000              MOVS     r0,#0                 ;333
000072  e7e0              B        |L2.54|
;;;336    
                          ENDP

                  |L2.116|
                          DCD      0xffe00000

                          AREA ||i.LEnum||, CODE, READONLY, ALIGN=1

                  LEnum PROC
;;;396    */
;;;397    static int LEnum (const TValue *l, const TValue *r) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4681              MOV      r9,r0
000006  460c              MOV      r4,r1
;;;398      lua_assert(ttisnumber(l) && ttisnumber(r));
;;;399      if (ttisinteger(l)) {
000008  f8990008          LDRB     r0,[r9,#8]
00000c  2823              CMP      r0,#0x23
00000e  d116              BNE      |L3.62|
;;;400        lua_Integer li = ivalue(l);
000010  e9d95600          LDRD     r5,r6,[r9,#0]
;;;401        if (ttisinteger(r))
000014  7a20              LDRB     r0,[r4,#8]
000016  2823              CMP      r0,#0x23
000018  d109              BNE      |L3.46|
;;;402          return li <= ivalue(r);  /* both are integers */
00001a  e9d41000          LDRD     r1,r0,[r4,#0]
00001e  1b49              SUBS     r1,r1,r5
000020  41b0              SBCS     r0,r0,r6
000022  db02              BLT      |L3.42|
000024  2001              MOVS     r0,#1
                  |L3.38|
;;;403        else  /* 'l' is int and 'r' is float */
;;;404          return LEintfloat(li, fltvalue(r));  /* l <= r ? */
;;;405      }
;;;406      else {
;;;407        lua_Number lf = fltvalue(l);  /* 'l' must be float */
;;;408        if (ttisfloat(r))
;;;409          return luai_numle(lf, fltvalue(r));  /* both are float */
;;;410        else  /* 'l' is float and 'r' is int */
;;;411          return LEfloatint(lf, ivalue(r));
;;;412      }
;;;413    }
000026  e8bd87f0          POP      {r4-r10,pc}
                  |L3.42|
00002a  2000              MOVS     r0,#0                 ;402
00002c  e7fb              B        |L3.38|
                  |L3.46|
00002e  e9d47300          LDRD     r7,r3,[r4,#0]         ;404
000032  463a              MOV      r2,r7                 ;404
000034  4628              MOV      r0,r5                 ;404
000036  4631              MOV      r1,r6                 ;404
000038  f7fffffe          BL       LEintfloat
00003c  e7f3              B        |L3.38|
                  |L3.62|
00003e  e9d95600          LDRD     r5,r6,[r9,#0]         ;407
000042  7a20              LDRB     r0,[r4,#8]            ;408
000044  2813              CMP      r0,#0x13              ;408
000046  d10b              BNE      |L3.96|
000048  e9d47300          LDRD     r7,r3,[r4,#0]         ;409
00004c  463a              MOV      r2,r7                 ;409
00004e  4628              MOV      r0,r5                 ;409
000050  4631              MOV      r1,r6                 ;409
000052  f7fffffe          BL       __aeabi_cdcmple
000056  d801              BHI      |L3.92|
000058  2001              MOVS     r0,#1                 ;409
00005a  e7e4              B        |L3.38|
                  |L3.92|
00005c  2000              MOVS     r0,#0                 ;409
00005e  e7e2              B        |L3.38|
                  |L3.96|
000060  e9d47300          LDRD     r7,r3,[r4,#0]         ;411
000064  463a              MOV      r2,r7                 ;411
000066  4628              MOV      r0,r5                 ;411
000068  4631              MOV      r1,r6                 ;411
00006a  f7fffffe          BL       LEfloatint
00006e  e7da              B        |L3.38|
;;;414    
                          ENDP


                          AREA ||i.LTfloatint||, CODE, READONLY, ALIGN=2

                  LTfloatint PROC
;;;341    */
;;;342    static int LTfloatint (lua_Number f, lua_Integer i) {
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;343      if (l_intfitsf(i))
00000c  4819              LDR      r0,|L4.116|
00000e  1e21              SUBS     r1,r4,#0
000010  eb750000          SBCS     r0,r5,r0
000014  db13              BLT      |L4.62|
000016  f44f1000          MOV      r0,#0x200000
00001a  4261              RSBS     r1,r4,#0
00001c  41a8              SBCS     r0,r0,r5
00001e  db0e              BLT      |L4.62|
;;;344        return luai_numlt(f, cast_num(i));  /* compare them as floats */
000020  4620              MOV      r0,r4
000022  4629              MOV      r1,r5
000024  f7fffffe          BL       __aeabi_l2d
000028  4680              MOV      r8,r0
00002a  4632              MOV      r2,r6
00002c  463b              MOV      r3,r7
00002e  f7fffffe          BL       __aeabi_cdrcmple
000032  d202              BCS      |L4.58|
000034  2001              MOVS     r0,#1
                  |L4.54|
;;;345      else {  /* f < i <=> floor(f) < i */
;;;346        lua_Integer fi;
;;;347        if (luaV_flttointeger(f, &fi, 1))  /* fi = floor(f) */
;;;348          return fi < i;   /* compare them as integers */
;;;349        else  /* 'f' is either greater or less than all integers */
;;;350          return f < 0;  /* less? */
;;;351      }
;;;352    }
000036  e8bd87fc          POP      {r2-r10,pc}
                  |L4.58|
00003a  2000              MOVS     r0,#0                 ;344
00003c  e7fb              B        |L4.54|
                  |L4.62|
00003e  2301              MOVS     r3,#1                 ;347
000040  466a              MOV      r2,sp                 ;347
000042  4630              MOV      r0,r6                 ;347
000044  4639              MOV      r1,r7                 ;347
000046  f7fffffe          BL       luaV_flttointeger
00004a  b140              CBZ      r0,|L4.94|
00004c  e9dd1000          LDRD     r1,r0,[sp,#0]         ;348
000050  1b09              SUBS     r1,r1,r4              ;348
000052  41a8              SBCS     r0,r0,r5              ;348
000054  da01              BGE      |L4.90|
000056  2001              MOVS     r0,#1                 ;348
000058  e7ed              B        |L4.54|
                  |L4.90|
00005a  2000              MOVS     r0,#0                 ;348
00005c  e7eb              B        |L4.54|
                  |L4.94|
00005e  2200              MOVS     r2,#0                 ;350
000060  4613              MOV      r3,r2                 ;350
000062  4630              MOV      r0,r6                 ;350
000064  4639              MOV      r1,r7                 ;350
000066  f7fffffe          BL       __aeabi_cdcmple
00006a  d201              BCS      |L4.112|
00006c  2001              MOVS     r0,#1                 ;350
00006e  e7e2              B        |L4.54|
                  |L4.112|
000070  2000              MOVS     r0,#0                 ;350
000072  e7e0              B        |L4.54|
;;;353    
                          ENDP

                  |L4.116|
                          DCD      0xffe00000

                          AREA ||i.LTintfloat||, CODE, READONLY, ALIGN=2

                  LTintfloat PROC
;;;307    */
;;;308    static int LTintfloat (lua_Integer i, lua_Number f) {
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;309      if (l_intfitsf(i))
00000c  481a              LDR      r0,|L5.120|
00000e  1e21              SUBS     r1,r4,#0
000010  eb750000          SBCS     r0,r5,r0
000014  db13              BLT      |L5.62|
000016  f44f1000          MOV      r0,#0x200000
00001a  4261              RSBS     r1,r4,#0
00001c  41a8              SBCS     r0,r0,r5
00001e  db0e              BLT      |L5.62|
;;;310        return luai_numlt(cast_num(i), f);  /* compare them as floats */
000020  4620              MOV      r0,r4
000022  4629              MOV      r1,r5
000024  f7fffffe          BL       __aeabi_l2d
000028  4680              MOV      r8,r0
00002a  4632              MOV      r2,r6
00002c  463b              MOV      r3,r7
00002e  f7fffffe          BL       __aeabi_cdcmple
000032  d202              BCS      |L5.58|
000034  2001              MOVS     r0,#1
                  |L5.54|
;;;311      else {  /* i < f <=> i < ceil(f) */
;;;312        lua_Integer fi;
;;;313        if (luaV_flttointeger(f, &fi, 2))  /* fi = ceil(f) */
;;;314          return i < fi;   /* compare them as integers */
;;;315        else  /* 'f' is either greater or less than all integers */
;;;316          return f > 0;  /* greater? */
;;;317      }
;;;318    }
000036  e8bd87fc          POP      {r2-r10,pc}
                  |L5.58|
00003a  2000              MOVS     r0,#0                 ;310
00003c  e7fb              B        |L5.54|
                  |L5.62|
00003e  2302              MOVS     r3,#2                 ;313
000040  466a              MOV      r2,sp                 ;313
000042  4630              MOV      r0,r6                 ;313
000044  4639              MOV      r1,r7                 ;313
000046  f7fffffe          BL       luaV_flttointeger
00004a  b148              CBZ      r0,|L5.96|
00004c  e9dd1000          LDRD     r1,r0,[sp,#0]         ;314
000050  1a61              SUBS     r1,r4,r1              ;314
000052  eb750000          SBCS     r0,r5,r0              ;314
000056  da01              BGE      |L5.92|
000058  2001              MOVS     r0,#1                 ;314
00005a  e7ec              B        |L5.54|
                  |L5.92|
00005c  2000              MOVS     r0,#0                 ;314
00005e  e7ea              B        |L5.54|
                  |L5.96|
000060  2200              MOVS     r2,#0                 ;316
000062  4613              MOV      r3,r2                 ;316
000064  4630              MOV      r0,r6                 ;316
000066  4639              MOV      r1,r7                 ;316
000068  f7fffffe          BL       __aeabi_cdrcmple
00006c  d201              BCS      |L5.114|
00006e  2001              MOVS     r0,#1                 ;316
000070  e7e1              B        |L5.54|
                  |L5.114|
000072  2000              MOVS     r0,#0                 ;316
000074  e7df              B        |L5.54|
;;;319    
                          ENDP

000076  0000              DCW      0x0000
                  |L5.120|
                          DCD      0xffe00000

                          AREA ||i.LTnum||, CODE, READONLY, ALIGN=1

                  LTnum PROC
;;;374    */
;;;375    static int LTnum (const TValue *l, const TValue *r) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4681              MOV      r9,r0
000006  460c              MOV      r4,r1
;;;376      lua_assert(ttisnumber(l) && ttisnumber(r));
;;;377      if (ttisinteger(l)) {
000008  f8990008          LDRB     r0,[r9,#8]
00000c  2823              CMP      r0,#0x23
00000e  d117              BNE      |L6.64|
;;;378        lua_Integer li = ivalue(l);
000010  e9d95600          LDRD     r5,r6,[r9,#0]
;;;379        if (ttisinteger(r))
000014  7a20              LDRB     r0,[r4,#8]
000016  2823              CMP      r0,#0x23
000018  d10a              BNE      |L6.48|
;;;380          return li < ivalue(r);  /* both are integers */
00001a  e9d41000          LDRD     r1,r0,[r4,#0]
00001e  1a69              SUBS     r1,r5,r1
000020  eb760000          SBCS     r0,r6,r0
000024  da02              BGE      |L6.44|
000026  2001              MOVS     r0,#1
                  |L6.40|
;;;381        else  /* 'l' is int and 'r' is float */
;;;382          return LTintfloat(li, fltvalue(r));  /* l < r ? */
;;;383      }
;;;384      else {
;;;385        lua_Number lf = fltvalue(l);  /* 'l' must be float */
;;;386        if (ttisfloat(r))
;;;387          return luai_numlt(lf, fltvalue(r));  /* both are float */
;;;388        else  /* 'l' is float and 'r' is int */
;;;389          return LTfloatint(lf, ivalue(r));
;;;390      }
;;;391    }
000028  e8bd87f0          POP      {r4-r10,pc}
                  |L6.44|
00002c  2000              MOVS     r0,#0                 ;380
00002e  e7fb              B        |L6.40|
                  |L6.48|
000030  e9d47300          LDRD     r7,r3,[r4,#0]         ;382
000034  463a              MOV      r2,r7                 ;382
000036  4628              MOV      r0,r5                 ;382
000038  4631              MOV      r1,r6                 ;382
00003a  f7fffffe          BL       LTintfloat
00003e  e7f3              B        |L6.40|
                  |L6.64|
000040  e9d95600          LDRD     r5,r6,[r9,#0]         ;385
000044  7a20              LDRB     r0,[r4,#8]            ;386
000046  2813              CMP      r0,#0x13              ;386
000048  d10b              BNE      |L6.98|
00004a  e9d47300          LDRD     r7,r3,[r4,#0]         ;387
00004e  463a              MOV      r2,r7                 ;387
000050  4628              MOV      r0,r5                 ;387
000052  4631              MOV      r1,r6                 ;387
000054  f7fffffe          BL       __aeabi_cdcmple
000058  d201              BCS      |L6.94|
00005a  2001              MOVS     r0,#1                 ;387
00005c  e7e4              B        |L6.40|
                  |L6.94|
00005e  2000              MOVS     r0,#0                 ;387
000060  e7e2              B        |L6.40|
                  |L6.98|
000062  e9d47300          LDRD     r7,r3,[r4,#0]         ;389
000066  463a              MOV      r2,r7                 ;389
000068  4628              MOV      r0,r5                 ;389
00006a  4631              MOV      r1,r6                 ;389
00006c  f7fffffe          BL       LTfloatint
000070  e7da              B        |L6.40|
;;;392    
                          ENDP


                          AREA ||i.copy2buff||, CODE, READONLY, ALIGN=1

                  copy2buff PROC
;;;521    /* copy strings in stack from top - n up to top - 1 to buffer */
;;;522    static void copy2buff (StkId top, int n, char *buff) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
;;;523      size_t tl = 0;  /* size already copied */
00000a  f04f0800          MOV      r8,#0
;;;524      do {
00000e  bf00              NOP      
                  |L7.16|
;;;525        size_t l = vslen(s2v(top - n));  /* length of string being copied */
000010  eba51004          SUB      r0,r5,r4,LSL #4
000014  6800              LDR      r0,[r0,#0]
000016  7900              LDRB     r0,[r0,#4]
000018  2814              CMP      r0,#0x14
00001a  d104              BNE      |L7.38|
00001c  eba51004          SUB      r0,r5,r4,LSL #4
000020  6800              LDR      r0,[r0,#0]
000022  79c0              LDRB     r0,[r0,#7]
000024  e003              B        |L7.46|
                  |L7.38|
000026  eba51004          SUB      r0,r5,r4,LSL #4
00002a  6800              LDR      r0,[r0,#0]
00002c  68c0              LDR      r0,[r0,#0xc]
                  |L7.46|
00002e  4606              MOV      r6,r0
;;;526        memcpy(buff + tl, svalue(s2v(top - n)), l * sizeof(char));
000030  4632              MOV      r2,r6
000032  eba51304          SUB      r3,r5,r4,LSL #4
000036  681b              LDR      r3,[r3,#0]
000038  f1030110          ADD      r1,r3,#0x10
00003c  eb070008          ADD      r0,r7,r8
000040  f7fffffe          BL       __aeabi_memcpy
;;;527        tl += l;
000044  44b0              ADD      r8,r8,r6
;;;528      } while (--n > 0);
000046  1e60              SUBS     r0,r4,#1
000048  1e04              SUBS     r4,r0,#0
00004a  dce1              BGT      |L7.16|
;;;529    }
00004c  e8bd81f0          POP      {r4-r8,pc}
;;;530    
                          ENDP


                          AREA ||i.forlimit||, CODE, READONLY, ALIGN=1

                  forlimit PROC
;;;154    */
;;;155    static int forlimit (const TValue *obj, lua_Integer *p, lua_Integer step,
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;156                         int *stopnow) {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;157      *stopnow = 0;  /* usually, let loops run */
000010  2000              MOVS     r0,#0
000012  f8c80000          STR      r0,[r8,#0]
;;;158      if (ttisinteger(obj))
000016  7a30              LDRB     r0,[r6,#8]
000018  2823              CMP      r0,#0x23
00001a  d104              BNE      |L8.38|
;;;159        *p = ivalue(obj);
00001c  e9d60100          LDRD     r0,r1,[r6,#0]
000020  e9c70100          STRD     r0,r1,[r7,#0]
000024  e043              B        |L8.174|
                  |L8.38|
;;;160      else if (!luaV_tointeger(obj, p, (step < 0 ? 2 : 1))) {
000026  2100              MOVS     r1,#0
000028  4608              MOV      r0,r1
00002a  1a61              SUBS     r1,r4,r1
00002c  eb750000          SBCS     r0,r5,r0
000030  da01              BGE      |L8.54|
000032  2002              MOVS     r0,#2
000034  e000              B        |L8.56|
                  |L8.54|
000036  2001              MOVS     r0,#1
                  |L8.56|
000038  4602              MOV      r2,r0
00003a  4639              MOV      r1,r7
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       luaV_tointeger
000042  bba0              CBNZ     r0,|L8.174|
;;;161        /* not coercible to in integer */
;;;162        lua_Number n;  /* try to convert to float */
;;;163        if (!tonumber(obj, &n)) /* cannot convert to float? */
000044  7a30              LDRB     r0,[r6,#8]
000046  2813              CMP      r0,#0x13
000048  d105              BNE      |L8.86|
00004a  e9d60100          LDRD     r0,r1,[r6,#0]
00004e  e9cd0100          STRD     r0,r1,[sp,#0]
000052  2001              MOVS     r0,#1
000054  e003              B        |L8.94|
                  |L8.86|
000056  4669              MOV      r1,sp
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       luaV_tonumber_
                  |L8.94|
00005e  b910              CBNZ     r0,|L8.102|
;;;164          return 0;  /* not a number */
000060  2000              MOVS     r0,#0
                  |L8.98|
;;;165        if (luai_numlt(0, n)) {  /* if true, float is larger than max integer */
;;;166          *p = LUA_MAXINTEGER;
;;;167          if (step < 0) *stopnow = 1;
;;;168        }
;;;169        else {  /* float is less than min integer */
;;;170          *p = LUA_MININTEGER;
;;;171          if (step >= 0) *stopnow = 1;
;;;172        }
;;;173      }
;;;174      return 1;
;;;175    }
000062  e8bd81fc          POP      {r2-r8,pc}
                  |L8.102|
000066  2000              MOVS     r0,#0                 ;165
000068  4601              MOV      r1,r0                 ;165
00006a  e9dd2300          LDRD     r2,r3,[sp,#0]         ;165
00006e  f7fffffe          BL       __aeabi_cdcmple
000072  d20e              BCS      |L8.146|
000074  f04f31ff          MOV      r1,#0xffffffff        ;166
000078  0848              LSRS     r0,r1,#1              ;166
00007a  e9c71000          STRD     r1,r0,[r7,#0]         ;166
00007e  2100              MOVS     r1,#0                 ;167
000080  4608              MOV      r0,r1                 ;167
000082  1a61              SUBS     r1,r4,r1              ;167
000084  eb750000          SBCS     r0,r5,r0              ;167
000088  da10              BGE      |L8.172|
00008a  2001              MOVS     r0,#1                 ;167
00008c  f8c80000          STR      r0,[r8,#0]            ;167
000090  e00c              B        |L8.172|
                  |L8.146|
000092  2100              MOVS     r1,#0                 ;170
000094  f04f4000          MOV      r0,#0x80000000        ;170
000098  e9c71000          STRD     r1,r0,[r7,#0]         ;170
00009c  4608              MOV      r0,r1                 ;171
00009e  1a61              SUBS     r1,r4,r1              ;171
0000a0  eb750000          SBCS     r0,r5,r0              ;171
0000a4  db02              BLT      |L8.172|
0000a6  2001              MOVS     r0,#1                 ;171
0000a8  f8c80000          STR      r0,[r8,#0]            ;171
                  |L8.172|
0000ac  bf00              NOP                            ;173
                  |L8.174|
0000ae  2001              MOVS     r0,#1                 ;174
0000b0  e7d7              B        |L8.98|
;;;176    
                          ENDP


                          AREA ||i.getcached||, CODE, READONLY, ALIGN=1

                  getcached PROC
;;;672    */
;;;673    static LClosure *getcached (Proto *p, UpVal **encup, StkId base) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4603              MOV      r3,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;674      LClosure *c = p->cache;
000008  6b5a              LDR      r2,[r3,#0x34]
;;;675      if (c != NULL) {  /* is there a cached closure? */
00000a  b31a              CBZ      r2,|L9.84|
;;;676        int nup = p->sizeupvalues;
00000c  68df              LDR      r7,[r3,#0xc]
;;;677        Upvaldesc *uv = p->upvalues;
00000e  6c1c              LDR      r4,[r3,#0x40]
;;;678        int i;
;;;679        for (i = 0; i < nup; i++) {  /* check whether it has right upvalues */
000010  2100              MOVS     r1,#0
000012  e01a              B        |L9.74|
                  |L9.20|
;;;680          TValue *v = uv[i].instack ? s2v(base + uv[i].idx) : encup[uv[i].idx]->v;
000014  eb0400c1          ADD      r0,r4,r1,LSL #3
000018  7900              LDRB     r0,[r0,#4]
00001a  b128              CBZ      r0,|L9.40|
00001c  eb0400c1          ADD      r0,r4,r1,LSL #3
000020  7940              LDRB     r0,[r0,#5]
000022  eb061000          ADD      r0,r6,r0,LSL #4
000026  e005              B        |L9.52|
                  |L9.40|
000028  eb0400c1          ADD      r0,r4,r1,LSL #3
00002c  7940              LDRB     r0,[r0,#5]
00002e  f8550020          LDR      r0,[r5,r0,LSL #2]
000032  6880              LDR      r0,[r0,#8]
                  |L9.52|
000034  4684              MOV      r12,r0
;;;681          if (c->upvals[i]->v != v)
000036  f1020010          ADD      r0,r2,#0x10
00003a  f8500021          LDR      r0,[r0,r1,LSL #2]
00003e  6880              LDR      r0,[r0,#8]
000040  4560              CMP      r0,r12
000042  d001              BEQ      |L9.72|
;;;682            return NULL;  /* wrong upvalue; cannot reuse closure */
000044  2000              MOVS     r0,#0
                  |L9.70|
;;;683        }
;;;684        p->cachemiss = 0;  /* got a hit */
;;;685      }
;;;686      return c;  /* return cached closure (or NULL if no cached closure) */
;;;687    }
000046  bdf0              POP      {r4-r7,pc}
                  |L9.72|
000048  1c49              ADDS     r1,r1,#1              ;679
                  |L9.74|
00004a  42b9              CMP      r1,r7                 ;679
00004c  dbe2              BLT      |L9.20|
00004e  2000              MOVS     r0,#0                 ;684
000050  7258              STRB     r0,[r3,#9]            ;684
000052  bf00              NOP                            ;685
                  |L9.84|
000054  4610              MOV      r0,r2                 ;686
000056  e7f6              B        |L9.70|
;;;688    
                          ENDP


                          AREA ||i.l_strcmp||, CODE, READONLY, ALIGN=1

                  l_strcmp PROC
;;;273    */
;;;274    static int l_strcmp (const TString *ls, const TString *rs) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;275      const char *l = getstr(ls);
000008  f1050910          ADD      r9,r5,#0x10
;;;276      size_t ll = tsslen(ls);
00000c  7928              LDRB     r0,[r5,#4]
00000e  2814              CMP      r0,#0x14
000010  d101              BNE      |L10.22|
000012  79e8              LDRB     r0,[r5,#7]
000014  e000              B        |L10.24|
                  |L10.22|
000016  68e8              LDR      r0,[r5,#0xc]
                  |L10.24|
000018  4607              MOV      r7,r0
;;;277      const char *r = getstr(rs);
00001a  f1060810          ADD      r8,r6,#0x10
;;;278      size_t lr = tsslen(rs);
00001e  7930              LDRB     r0,[r6,#4]
000020  2814              CMP      r0,#0x14
000022  d101              BNE      |L10.40|
000024  79f0              LDRB     r0,[r6,#7]
000026  e000              B        |L10.42|
                  |L10.40|
000028  68f0              LDR      r0,[r6,#0xc]
                  |L10.42|
00002a  4682              MOV      r10,r0
;;;279      for (;;) {  /* for each segment */
00002c  bf00              NOP      
                  |L10.46|
;;;280        int temp = strcoll(l, r);
00002e  4641              MOV      r1,r8
000030  4648              MOV      r0,r9
000032  f7fffffe          BL       strcoll
000036  4683              MOV      r11,r0
;;;281        if (temp != 0)  /* not equal? */
000038  f1bb0f00          CMP      r11,#0
00003c  d002              BEQ      |L10.68|
;;;282          return temp;  /* done */
00003e  4658              MOV      r0,r11
                  |L10.64|
;;;283        else {  /* strings are equal up to a '\0' */
;;;284          size_t len = strlen(l);  /* index of first '\0' in both strings */
;;;285          if (len == lr)  /* 'rs' is finished? */
;;;286            return (len == ll) ? 0 : 1;  /* check 'ls' */
;;;287          else if (len == ll)  /* 'ls' is finished? */
;;;288            return -1;  /* 'ls' is less than 'rs' ('rs' is not finished) */
;;;289          /* both strings longer than 'len'; go on comparing after the '\0' */
;;;290          len++;
;;;291          l += len; ll -= len; r += len; lr -= len;
;;;292        }
;;;293      }
;;;294    }
000040  e8bd9ff0          POP      {r4-r12,pc}
                  |L10.68|
000044  4648              MOV      r0,r9                 ;284
000046  f7fffffe          BL       strlen
00004a  4604              MOV      r4,r0                 ;284
00004c  4554              CMP      r4,r10                ;285
00004e  d105              BNE      |L10.92|
000050  42bc              CMP      r4,r7                 ;286
000052  d001              BEQ      |L10.88|
000054  2001              MOVS     r0,#1                 ;286
000056  e7f3              B        |L10.64|
                  |L10.88|
000058  2000              MOVS     r0,#0                 ;286
00005a  e7f1              B        |L10.64|
                  |L10.92|
00005c  42bc              CMP      r4,r7                 ;287
00005e  d102              BNE      |L10.102|
000060  f04f30ff          MOV      r0,#0xffffffff        ;288
000064  e7ec              B        |L10.64|
                  |L10.102|
000066  1c64              ADDS     r4,r4,#1              ;290
000068  44a1              ADD      r9,r9,r4              ;291
00006a  1b3f              SUBS     r7,r7,r4              ;291
00006c  44a0              ADD      r8,r8,r4              ;291
00006e  ebaa0a04          SUB      r10,r10,r4            ;291
000072  bf00              NOP                            ;292
000074  e7db              B        |L10.46|
;;;295    
                          ENDP


                          AREA ||i.lessequalothers||, CODE, READONLY, ALIGN=1

                  lessequalothers PROC
;;;445    */
;;;446    static int lessequalothers (lua_State *L, const TValue *l, const TValue *r) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;447      lua_assert(!ttisnumber(l) || !ttisnumber(r));
;;;448      if (ttisstring(l) && ttisstring(r))  /* both are strings? */
000008  7a20              LDRB     r0,[r4,#8]
00000a  f000000f          AND      r0,r0,#0xf
00000e  2804              CMP      r0,#4
000010  d10e              BNE      |L11.48|
000012  7a28              LDRB     r0,[r5,#8]
000014  f000000f          AND      r0,r0,#0xf
000018  2804              CMP      r0,#4
00001a  d109              BNE      |L11.48|
;;;449        return l_strcmp(tsvalue(l), tsvalue(r)) <= 0;
00001c  6829              LDR      r1,[r5,#0]
00001e  6820              LDR      r0,[r4,#0]
000020  f7fffffe          BL       l_strcmp
000024  2800              CMP      r0,#0
000026  dc01              BGT      |L11.44|
000028  2001              MOVS     r0,#1
                  |L11.42|
;;;450      else
;;;451        return luaT_callorderTM(L, l, r, TM_LE);
;;;452    }
00002a  bd70              POP      {r4-r6,pc}
                  |L11.44|
00002c  2000              MOVS     r0,#0                 ;449
00002e  e7fc              B        |L11.42|
                  |L11.48|
000030  2317              MOVS     r3,#0x17              ;451
000032  462a              MOV      r2,r5                 ;451
000034  4621              MOV      r1,r4                 ;451
000036  4630              MOV      r0,r6                 ;451
000038  f7fffffe          BL       luaT_callorderTM
00003c  e7f5              B        |L11.42|
;;;453    
                          ENDP


                          AREA ||i.lessthanothers||, CODE, READONLY, ALIGN=1

                  lessthanothers PROC
;;;418    */
;;;419    static int lessthanothers (lua_State *L, const TValue *l, const TValue *r) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;420      lua_assert(!ttisnumber(l) || !ttisnumber(r));
;;;421      if (ttisstring(l) && ttisstring(r))  /* both are strings? */
000008  7a20              LDRB     r0,[r4,#8]
00000a  f000000f          AND      r0,r0,#0xf
00000e  2804              CMP      r0,#4
000010  d10a              BNE      |L12.40|
000012  7a28              LDRB     r0,[r5,#8]
000014  f000000f          AND      r0,r0,#0xf
000018  2804              CMP      r0,#4
00001a  d105              BNE      |L12.40|
;;;422        return l_strcmp(tsvalue(l), tsvalue(r)) < 0;
00001c  6829              LDR      r1,[r5,#0]
00001e  6820              LDR      r0,[r4,#0]
000020  f7fffffe          BL       l_strcmp
000024  0fc0              LSRS     r0,r0,#31
                  |L12.38|
;;;423      else
;;;424        return luaT_callorderTM(L, l, r, TM_LT);
;;;425    }
000026  bd70              POP      {r4-r6,pc}
                  |L12.40|
000028  2316              MOVS     r3,#0x16              ;424
00002a  462a              MOV      r2,r5                 ;424
00002c  4621              MOV      r1,r4                 ;424
00002e  4630              MOV      r0,r6                 ;424
000030  f7fffffe          BL       luaT_callorderTM
000034  e7f7              B        |L12.38|
;;;426    
                          ENDP


                          AREA ||i.luaV_concat||, CODE, READONLY, ALIGN=2

                  luaV_concat PROC
;;;535    */
;;;536    void luaV_concat (lua_State *L, int total) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  b08a              SUB      sp,sp,#0x28
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
;;;537      lua_assert(total >= 2);
;;;538      do {
00000a  bf00              NOP      
                  |L13.12|
;;;539        StkId top = L->top;
00000c  f8d8400c          LDR      r4,[r8,#0xc]
;;;540        int n = 2;  /* number of elements handled in this pass (at least 2) */
000010  2502              MOVS     r5,#2
;;;541        if (!(ttisstring(s2v(top - 2)) || cvt2str(s2v(top - 2))) ||
000012  f1a40020          SUB      r0,r4,#0x20
000016  7a00              LDRB     r0,[r0,#8]
000018  f000000f          AND      r0,r0,#0xf
00001c  2804              CMP      r0,#4
00001e  d006              BEQ      |L13.46|
000020  f1a40020          SUB      r0,r4,#0x20
000024  7a00              LDRB     r0,[r0,#8]
000026  f000000f          AND      r0,r0,#0xf
00002a  2803              CMP      r0,#3
00002c  d114              BNE      |L13.88|
                  |L13.46|
;;;542            !tostring(L, s2v(top - 1)))
00002e  f1a40010          SUB      r0,r4,#0x10
000032  7a00              LDRB     r0,[r0,#8]
000034  f000000f          AND      r0,r0,#0xf
000038  2804              CMP      r0,#4
00003a  d018              BEQ      |L13.110|
00003c  f1a40010          SUB      r0,r4,#0x10
000040  7a00              LDRB     r0,[r0,#8]
000042  f000000f          AND      r0,r0,#0xf
000046  2803              CMP      r0,#3
000048  d106              BNE      |L13.88|
00004a  f1a40110          SUB      r1,r4,#0x10
00004e  4640              MOV      r0,r8
000050  f7fffffe          BL       luaO_tostring
000054  2001              MOVS     r0,#1
000056  b950              CBNZ     r0,|L13.110|
                  |L13.88|
;;;543          luaT_trybinTM(L, s2v(top - 2), s2v(top - 1), top - 2, TM_CONCAT);
000058  2018              MOVS     r0,#0x18
00005a  f1a40320          SUB      r3,r4,#0x20
00005e  f1a40210          SUB      r2,r4,#0x10
000062  4619              MOV      r1,r3
000064  9000              STR      r0,[sp,#0]
000066  4640              MOV      r0,r8
000068  f7fffffe          BL       luaT_trybinTM
                  |L13.108|
00006c  e09b              B        |L13.422|
                  |L13.110|
;;;544        else if (isemptystr(s2v(top - 1)))  /* second operand is empty? */
00006e  f1a40010          SUB      r0,r4,#0x10
000072  7a00              LDRB     r0,[r0,#8]
000074  2854              CMP      r0,#0x54
000076  d118              BNE      |L13.170|
000078  f8540c10          LDR      r0,[r4,#-0x10]
00007c  79c0              LDRB     r0,[r0,#7]
00007e  b9a0              CBNZ     r0,|L13.170|
;;;545          cast_void(tostring(L, s2v(top - 2)));  /* result is first operand */
000080  f1a40020          SUB      r0,r4,#0x20
000084  7a00              LDRB     r0,[r0,#8]
000086  f000000f          AND      r0,r0,#0xf
00008a  2804              CMP      r0,#4
00008c  d0ee              BEQ      |L13.108|
00008e  f1a40020          SUB      r0,r4,#0x20
000092  7a00              LDRB     r0,[r0,#8]
000094  f000000f          AND      r0,r0,#0xf
000098  2803              CMP      r0,#3
00009a  d105              BNE      |L13.168|
00009c  f1a40120          SUB      r1,r4,#0x20
0000a0  4640              MOV      r0,r8
0000a2  f7fffffe          BL       luaO_tostring
0000a6  e07e              B        |L13.422|
                  |L13.168|
0000a8  e07d              B        |L13.422|
                  |L13.170|
;;;546        else if (isemptystr(s2v(top - 2))) {  /* first operand is empty string? */
0000aa  f1a40020          SUB      r0,r4,#0x20
0000ae  7a00              LDRB     r0,[r0,#8]
0000b0  2854              CMP      r0,#0x54
0000b2  d10e              BNE      |L13.210|
0000b4  f8540c20          LDR      r0,[r4,#-0x20]
0000b8  79c0              LDRB     r0,[r0,#7]
0000ba  b950              CBNZ     r0,|L13.210|
;;;547          setobjs2s(L, top - 2, top - 1);  /* result is second op. */
0000bc  f1a40020          SUB      r0,r4,#0x20
0000c0  f1a40110          SUB      r1,r4,#0x10
0000c4  e9d12300          LDRD     r2,r3,[r1,#0]
0000c8  e9c02300          STRD     r2,r3,[r0,#0]
0000cc  7a0a              LDRB     r2,[r1,#8]
0000ce  7202              STRB     r2,[r0,#8]
0000d0  e069              B        |L13.422|
                  |L13.210|
;;;548        }
;;;549        else {
;;;550          /* at least two non-empty string values; get as many as possible */
;;;551          size_t tl = vslen(s2v(top - 1));
0000d2  f8540c10          LDR      r0,[r4,#-0x10]
0000d6  7900              LDRB     r0,[r0,#4]
0000d8  2814              CMP      r0,#0x14
0000da  d103              BNE      |L13.228|
0000dc  f8540c10          LDR      r0,[r4,#-0x10]
0000e0  79c0              LDRB     r0,[r0,#7]
0000e2  e002              B        |L13.234|
                  |L13.228|
0000e4  f8540c10          LDR      r0,[r4,#-0x10]
0000e8  68c0              LDR      r0,[r0,#0xc]
                  |L13.234|
0000ea  4607              MOV      r7,r0
;;;552          TString *ts;
;;;553          /* collect total length and number of strings */
;;;554          for (n = 1; n < total && tostring(L, s2v(top - n - 1)); n++) {
0000ec  2501              MOVS     r5,#1
0000ee  e01c              B        |L13.298|
                  |L13.240|
;;;555            size_t l = vslen(s2v(top - n - 1));
0000f0  eba41005          SUB      r0,r4,r5,LSL #4
0000f4  f8500c10          LDR      r0,[r0,#-0x10]
0000f8  7900              LDRB     r0,[r0,#4]
0000fa  2814              CMP      r0,#0x14
0000fc  d105              BNE      |L13.266|
0000fe  eba41005          SUB      r0,r4,r5,LSL #4
000102  f8500c10          LDR      r0,[r0,#-0x10]
000106  79c0              LDRB     r0,[r0,#7]
000108  e004              B        |L13.276|
                  |L13.266|
00010a  eba41005          SUB      r0,r4,r5,LSL #4
00010e  f8500c10          LDR      r0,[r0,#-0x10]
000112  68c0              LDR      r0,[r0,#0xc]
                  |L13.276|
000114  4682              MOV      r10,r0
;;;556            if (l >= (MAX_SIZE/sizeof(char)) - tl)
000116  f1c730ff          RSB      r0,r7,#0xffffffff
00011a  4550              CMP      r0,r10
00011c  d803              BHI      |L13.294|
;;;557              luaG_runerror(L, "string length overflow");
00011e  a12a              ADR      r1,|L13.456|
000120  4640              MOV      r0,r8
000122  f7fffffe          BL       luaG_runerror
                  |L13.294|
;;;558            tl += l;
000126  4457              ADD      r7,r7,r10
000128  1c6d              ADDS     r5,r5,#1              ;554
                  |L13.298|
00012a  454d              CMP      r5,r9                 ;554
00012c  da19              BGE      |L13.354|
00012e  eba41005          SUB      r0,r4,r5,LSL #4       ;554
000132  f8100c08          LDRB     r0,[r0,#-8]           ;554
000136  f000000f          AND      r0,r0,#0xf            ;554
00013a  2804              CMP      r0,#4                 ;554
00013c  d0d8              BEQ      |L13.240|
00013e  eba41005          SUB      r0,r4,r5,LSL #4       ;554
000142  f8100c08          LDRB     r0,[r0,#-8]           ;554
000146  f000000f          AND      r0,r0,#0xf            ;554
00014a  2803              CMP      r0,#3                 ;554
00014c  d109              BNE      |L13.354|
00014e  eba41005          SUB      r0,r4,r5,LSL #4       ;554
000152  f1a00110          SUB      r1,r0,#0x10           ;554
000156  4640              MOV      r0,r8                 ;554
000158  f7fffffe          BL       luaO_tostring
00015c  2001              MOVS     r0,#1                 ;554
00015e  2800              CMP      r0,#0                 ;554
000160  d1c6              BNE      |L13.240|
                  |L13.354|
;;;559          }
;;;560          if (tl <= LUAI_MAXSHORTLEN) {  /* is result a short string? */
000162  2f28              CMP      r7,#0x28
000164  d80b              BHI      |L13.382|
;;;561            char buff[LUAI_MAXSHORTLEN];
;;;562            copy2buff(top, n, buff);  /* copy strings to buffer */
000166  466a              MOV      r2,sp
000168  4629              MOV      r1,r5
00016a  4620              MOV      r0,r4
00016c  f7fffffe          BL       copy2buff
;;;563            ts = luaS_newlstr(L, buff, tl);
000170  463a              MOV      r2,r7
000172  4669              MOV      r1,sp
000174  4640              MOV      r0,r8
000176  f7fffffe          BL       luaS_newlstr
00017a  4606              MOV      r6,r0
;;;564          }
00017c  e00a              B        |L13.404|
                  |L13.382|
;;;565          else {  /* long string; copy strings directly to final result */
;;;566            ts = luaS_createlngstrobj(L, tl);
00017e  4639              MOV      r1,r7
000180  4640              MOV      r0,r8
000182  f7fffffe          BL       luaS_createlngstrobj
000186  4606              MOV      r6,r0
;;;567            copy2buff(top, n, getstr(ts));
000188  f1060210          ADD      r2,r6,#0x10
00018c  4629              MOV      r1,r5
00018e  4620              MOV      r0,r4
000190  f7fffffe          BL       copy2buff
                  |L13.404|
;;;568          }
;;;569          setsvalue2s(L, top - n, ts);  /* create result */
000194  eba41005          SUB      r0,r4,r5,LSL #4
000198  4631              MOV      r1,r6
00019a  6001              STR      r1,[r0,#0]
00019c  790a              LDRB     r2,[r1,#4]
00019e  f0420240          ORR      r2,r2,#0x40
0001a2  7202              STRB     r2,[r0,#8]
;;;570        }
0001a4  bf00              NOP      
                  |L13.422|
;;;571        total -= n-1;  /* got 'n' strings to create 1 new */
0001a6  1e68              SUBS     r0,r5,#1
0001a8  eba90900          SUB      r9,r9,r0
;;;572        L->top -= n-1;  /* popped 'n' strings and pushed one */
0001ac  f8d8100c          LDR      r1,[r8,#0xc]
0001b0  eba11000          SUB      r0,r1,r0,LSL #4
0001b4  f8c8000c          STR      r0,[r8,#0xc]
;;;573      } while (total > 1);  /* repeat until only 1 result left */
0001b8  f1b90f01          CMP      r9,#1
0001bc  f73faf26          BGT      |L13.12|
;;;574    }
0001c0  b00a              ADD      sp,sp,#0x28
0001c2  e8bd87f0          POP      {r4-r10,pc}
;;;575    
                          ENDP

0001c6  0000              DCW      0x0000
                  |L13.456|
0001c8  73747269          DCB      "string length overflow",0
0001cc  6e67206c
0001d0  656e6774
0001d4  68206f76
0001d8  6572666c
0001dc  6f7700  
0001df  00                DCB      0

                          AREA ||i.luaV_div||, CODE, READONLY, ALIGN=2

                  luaV_div PROC
;;;614    */
;;;615    lua_Integer luaV_div (lua_State *L, lua_Integer m, lua_Integer n) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4682              MOV      r10,r0
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
00000a  e9dd4508          LDRD     r4,r5,[sp,#0x20]
;;;616      if (l_castS2U(n) + 1u <= 1u) {  /* special cases: -1 or 0 */
00000e  1c62              ADDS     r2,r4,#1
000010  f1450000          ADC      r0,r5,#0
000014  2100              MOVS     r1,#0
000016  f1d20201          RSBS     r2,r2,#1
00001a  4181              SBCS     r1,r1,r0
00001c  d30f              BCC      |L14.62|
;;;617        if (n == 0)
00001e  2100              MOVS     r1,#0
000020  ea840001          EOR      r0,r4,r1
000024  4069              EORS     r1,r1,r5
000026  4308              ORRS     r0,r0,r1
000028  d103              BNE      |L14.50|
;;;618          luaG_runerror(L, "attempt to divide by zero");
00002a  a118              ADR      r1,|L14.140|
00002c  4650              MOV      r0,r10
00002e  f7fffffe          BL       luaG_runerror
                  |L14.50|
;;;619        return intop(-, 0, m);   /* n==-1; avoid overflow with 0x80000...//-1 */
000032  2100              MOVS     r1,#0
000034  1b88              SUBS     r0,r1,r6
000036  eb610107          SBC      r1,r1,r7
                  |L14.58|
;;;620      }
;;;621      else {
;;;622        lua_Integer q = m / n;  /* perform C division */
;;;623        if ((m ^ n) < 0 && m % n != 0)  /* 'm/n' would be negative non-integer? */
;;;624          q -= 1;  /* correct result for different rounding */
;;;625        return q;
;;;626      }
;;;627    }
00003a  e8bd87f0          POP      {r4-r10,pc}
                  |L14.62|
00003e  4622              MOV      r2,r4                 ;622
000040  462b              MOV      r3,r5                 ;622
000042  4630              MOV      r0,r6                 ;622
000044  4639              MOV      r1,r7                 ;622
000046  f7fffffe          BL       __aeabi_ldivmod
00004a  4680              MOV      r8,r0                 ;622
00004c  4689              MOV      r9,r1                 ;622
00004e  ea860304          EOR      r3,r6,r4              ;623
000052  ea870005          EOR      r0,r7,r5              ;623
000056  f04f0c00          MOV      r12,#0                ;623
00005a  ebb3010c          SUBS     r1,r3,r12             ;623
00005e  eb70000c          SBCS     r0,r0,r12             ;623
000062  da0f              BGE      |L14.132|
000064  4622              MOV      r2,r4                 ;623
000066  462b              MOV      r3,r5                 ;623
000068  4630              MOV      r0,r6                 ;623
00006a  4639              MOV      r1,r7                 ;623
00006c  f7fffffe          BL       __aeabi_ldivmod
000070  2100              MOVS     r1,#0                 ;623
000072  404a              EORS     r2,r2,r1              ;623
000074  404b              EORS     r3,r3,r1              ;623
000076  431a              ORRS     r2,r2,r3              ;623
000078  d004              BEQ      |L14.132|
00007a  2301              MOVS     r3,#1                 ;624
00007c  ebb80803          SUBS     r8,r8,r3              ;624
000080  f1690900          SBC      r9,r9,#0              ;624
                  |L14.132|
000084  4640              MOV      r0,r8                 ;625
000086  4649              MOV      r1,r9                 ;625
000088  e7d7              B        |L14.58|
;;;628    
                          ENDP

00008a  0000              DCW      0x0000
                  |L14.140|
00008c  61747465          DCB      "attempt to divide by zero",0
000090  6d707420
000094  746f2064
000098  69766964
00009c  65206279
0000a0  207a6572
0000a4  6f00    
0000a6  00                DCB      0
0000a7  00                DCB      0

                          AREA ||i.luaV_equalobj||, CODE, READONLY, ALIGN=1

                  luaV_equalobj PROC
;;;468    */
;;;469    int luaV_equalobj (lua_State *L, const TValue *t1, const TValue *t2) {
000000  e92d5fff          PUSH     {r0-r12,lr}
000004  4682              MOV      r10,r0
000006  460c              MOV      r4,r1
000008  4691              MOV      r9,r2
;;;470      const TValue *tm;
;;;471      if (ttypetag(t1) != ttypetag(t2)) {  /* not the same variant? */
00000a  7a20              LDRB     r0,[r4,#8]
00000c  f000003f          AND      r0,r0,#0x3f
000010  f8991008          LDRB     r1,[r9,#8]
000014  f001013f          AND      r1,r1,#0x3f
000018  4288              CMP      r0,r1
00001a  d03c              BEQ      |L15.150|
;;;472        if (ttype(t1) != ttype(t2) || ttype(t1) != LUA_TNUMBER)
00001c  7a20              LDRB     r0,[r4,#8]
00001e  f000000f          AND      r0,r0,#0xf
000022  f8991008          LDRB     r1,[r9,#8]
000026  f001010f          AND      r1,r1,#0xf
00002a  4288              CMP      r0,r1
00002c  d104              BNE      |L15.56|
00002e  7a20              LDRB     r0,[r4,#8]
000030  f000000f          AND      r0,r0,#0xf
000034  2803              CMP      r0,#3
000036  d003              BEQ      |L15.64|
                  |L15.56|
;;;473          return 0;  /* only numbers can be equal with different variants */
000038  2000              MOVS     r0,#0
                  |L15.58|
;;;474        else {  /* two numbers with different variants */
;;;475          lua_Integer i1, i2;  /* compare them as integers */
;;;476          return (tointegerns(t1, &i1) && tointegerns(t2, &i2) && i1 == i2);
;;;477        }
;;;478      }
;;;479      /* values have same type and same variant */
;;;480      switch (ttypetag(t1)) {
;;;481        case LUA_TNIL: return 1;
;;;482        case LUA_TNUMINT: return (ivalue(t1) == ivalue(t2));
;;;483        case LUA_TNUMFLT: return luai_numeq(fltvalue(t1), fltvalue(t2));
;;;484        case LUA_TBOOLEAN: return bvalue(t1) == bvalue(t2);  /* true must be 1 !! */
;;;485        case LUA_TLIGHTUSERDATA: return pvalue(t1) == pvalue(t2);
;;;486        case LUA_TLCF: return fvalue(t1) == fvalue(t2);
;;;487        case LUA_TSHRSTR: return eqshrstr(tsvalue(t1), tsvalue(t2));
;;;488        case LUA_TLNGSTR: return luaS_eqlngstr(tsvalue(t1), tsvalue(t2));
;;;489        case LUA_TUSERDATA: {
;;;490          if (uvalue(t1) == uvalue(t2)) return 1;
;;;491          else if (L == NULL) return 0;
;;;492          tm = fasttm(L, uvalue(t1)->metatable, TM_EQ);
;;;493          if (tm == NULL)
;;;494            tm = fasttm(L, uvalue(t2)->metatable, TM_EQ);
;;;495          break;  /* will try TM */
;;;496        }
;;;497        case LUA_TTABLE: {
;;;498          if (hvalue(t1) == hvalue(t2)) return 1;
;;;499          else if (L == NULL) return 0;
;;;500          tm = fasttm(L, hvalue(t1)->metatable, TM_EQ);
;;;501          if (tm == NULL)
;;;502            tm = fasttm(L, hvalue(t2)->metatable, TM_EQ);
;;;503          break;  /* will try TM */
;;;504        }
;;;505        default:
;;;506          return gcvalue(t1) == gcvalue(t2);
;;;507      }
;;;508      if (tm == NULL)  /* no TM? */
;;;509        return 0;  /* objects are different */
;;;510      luaT_callTMres(L, tm, t1, t2, L->top);  /* call TM */
;;;511      return !l_isfalse(s2v(L->top));
;;;512    }
00003a  b004              ADD      sp,sp,#0x10
00003c  e8bd9ff0          POP      {r4-r12,pc}
                  |L15.64|
000040  7a20              LDRB     r0,[r4,#8]            ;476
000042  2823              CMP      r0,#0x23              ;476
000044  d105              BNE      |L15.82|
000046  e9d40100          LDRD     r0,r1,[r4,#0]         ;476
00004a  e9cd0102          STRD     r0,r1,[sp,#8]         ;476
00004e  2001              MOVS     r0,#1                 ;476
000050  e004              B        |L15.92|
                  |L15.82|
000052  2200              MOVS     r2,#0                 ;476
000054  a902              ADD      r1,sp,#8              ;476
000056  4620              MOV      r0,r4                 ;476
000058  f7fffffe          BL       luaV_tointegerns
                  |L15.92|
00005c  b1c8              CBZ      r0,|L15.146|
00005e  f8990008          LDRB     r0,[r9,#8]            ;476
000062  2823              CMP      r0,#0x23              ;476
000064  d105              BNE      |L15.114|
000066  e9d90100          LDRD     r0,r1,[r9,#0]         ;476
00006a  e9cd0100          STRD     r0,r1,[sp,#0]         ;476
00006e  2001              MOVS     r0,#1                 ;476
000070  e004              B        |L15.124|
                  |L15.114|
000072  2200              MOVS     r2,#0                 ;476
000074  4669              MOV      r1,sp                 ;476
000076  4648              MOV      r0,r9                 ;476
000078  f7fffffe          BL       luaV_tointegerns
                  |L15.124|
00007c  b148              CBZ      r0,|L15.146|
00007e  e9dd3200          LDRD     r3,r2,[sp,#0]         ;476
000082  e9dd1002          LDRD     r1,r0,[sp,#8]         ;476
000086  4059              EORS     r1,r1,r3              ;476
000088  4050              EORS     r0,r0,r2              ;476
00008a  4301              ORRS     r1,r1,r0              ;476
00008c  d101              BNE      |L15.146|
00008e  2001              MOVS     r0,#1                 ;476
000090  e7d3              B        |L15.58|
                  |L15.146|
000092  2000              MOVS     r0,#0                 ;476
000094  e7d1              B        |L15.58|
                  |L15.150|
000096  7a20              LDRB     r0,[r4,#8]            ;480
000098  f000003f          AND      r0,r0,#0x3f           ;480
00009c  2813              CMP      r0,#0x13              ;480
00009e  d01f              BEQ      |L15.224|
0000a0  dc07              BGT      |L15.178|
0000a2  2808              CMP      r0,#8                 ;480
0000a4  d27e              BCS      |L15.420|
0000a6  e8dff000          TBB      [pc,r0]               ;480
0000aa  0d28              DCB      0x0d,0x28
0000ac  31d6d695          DCB      0x31,0xd6,0xd6,0x95
0000b0  d652              DCB      0xd6,0x52
                  |L15.178|
0000b2  2814              CMP      r0,#0x14              ;480
0000b4  d03c              BEQ      |L15.304|
0000b6  2823              CMP      r0,#0x23              ;480
0000b8  d006              BEQ      |L15.200|
0000ba  2824              CMP      r0,#0x24              ;480
0000bc  d041              BEQ      |L15.322|
0000be  2826              CMP      r0,#0x26              ;480
0000c0  d170              BNE      |L15.420|
0000c2  e02c              B        |L15.286|
0000c4  2001              MOVS     r0,#1                 ;481
0000c6  e7b8              B        |L15.58|
                  |L15.200|
0000c8  e9d40100          LDRD     r0,r1,[r4,#0]         ;482
0000cc  e9d93200          LDRD     r3,r2,[r9,#0]         ;482
0000d0  4058              EORS     r0,r0,r3              ;482
0000d2  4051              EORS     r1,r1,r2              ;482
0000d4  4308              ORRS     r0,r0,r1              ;482
0000d6  d101              BNE      |L15.220|
0000d8  2001              MOVS     r0,#1                 ;482
0000da  e7ae              B        |L15.58|
                  |L15.220|
0000dc  2000              MOVS     r0,#0                 ;482
0000de  e7ac              B        |L15.58|
                  |L15.224|
0000e0  e9d95300          LDRD     r5,r3,[r9,#0]         ;483
0000e4  462a              MOV      r2,r5                 ;483
0000e6  e9d47100          LDRD     r7,r1,[r4,#0]         ;483
0000ea  4638              MOV      r0,r7                 ;483
0000ec  f7fffffe          BL       __aeabi_cdcmpeq
0000f0  d101              BNE      |L15.246|
0000f2  2001              MOVS     r0,#1                 ;483
0000f4  e7a1              B        |L15.58|
                  |L15.246|
0000f6  2000              MOVS     r0,#0                 ;483
0000f8  e79f              B        |L15.58|
0000fa  6820              LDR      r0,[r4,#0]            ;484
0000fc  f8d91000          LDR      r1,[r9,#0]            ;484
000100  4288              CMP      r0,r1                 ;484
000102  d101              BNE      |L15.264|
000104  2001              MOVS     r0,#1                 ;484
000106  e798              B        |L15.58|
                  |L15.264|
000108  2000              MOVS     r0,#0                 ;484
00010a  e796              B        |L15.58|
00010c  6820              LDR      r0,[r4,#0]            ;485
00010e  f8d91000          LDR      r1,[r9,#0]            ;485
000112  4288              CMP      r0,r1                 ;485
000114  d101              BNE      |L15.282|
000116  2001              MOVS     r0,#1                 ;485
000118  e78f              B        |L15.58|
                  |L15.282|
00011a  2000              MOVS     r0,#0                 ;485
00011c  e78d              B        |L15.58|
                  |L15.286|
00011e  6820              LDR      r0,[r4,#0]            ;486
000120  f8d91000          LDR      r1,[r9,#0]            ;486
000124  4288              CMP      r0,r1                 ;486
000126  d101              BNE      |L15.300|
000128  2001              MOVS     r0,#1                 ;486
00012a  e786              B        |L15.58|
                  |L15.300|
00012c  2000              MOVS     r0,#0                 ;486
00012e  e784              B        |L15.58|
                  |L15.304|
000130  6820              LDR      r0,[r4,#0]            ;487
000132  f8d91000          LDR      r1,[r9,#0]            ;487
000136  4288              CMP      r0,r1                 ;487
000138  d101              BNE      |L15.318|
00013a  2001              MOVS     r0,#1                 ;487
00013c  e77d              B        |L15.58|
                  |L15.318|
00013e  2000              MOVS     r0,#0                 ;487
000140  e77b              B        |L15.58|
                  |L15.322|
000142  f8d91000          LDR      r1,[r9,#0]            ;488
000146  6820              LDR      r0,[r4,#0]            ;488
000148  f7fffffe          BL       luaS_eqlngstr
00014c  e775              B        |L15.58|
00014e  6820              LDR      r0,[r4,#0]            ;490
000150  f8d91000          LDR      r1,[r9,#0]            ;490
000154  4288              CMP      r0,r1                 ;490
000156  d101              BNE      |L15.348|
000158  2001              MOVS     r0,#1                 ;490
00015a  e76e              B        |L15.58|
                  |L15.348|
00015c  f1ba0f00          CMP      r10,#0                ;491
000160  d101              BNE      |L15.358|
000162  2000              MOVS     r0,#0                 ;491
000164  e769              B        |L15.58|
                  |L15.358|
000166  6820              LDR      r0,[r4,#0]            ;492
000168  68c0              LDR      r0,[r0,#0xc]          ;492
00016a  b908              CBNZ     r0,|L15.368|
00016c  2000              MOVS     r0,#0                 ;492
00016e  e010              B        |L15.402|
                  |L15.368|
000170  6820              LDR      r0,[r4,#0]            ;492
000172  68c0              LDR      r0,[r0,#0xc]          ;492
000174  7980              LDRB     r0,[r0,#6]            ;492
000176  f0000080          AND      r0,r0,#0x80           ;492
00017a  b108              CBZ      r0,|L15.384|
00017c  2000              MOVS     r0,#0                 ;492
00017e  e008              B        |L15.402|
                  |L15.384|
000180  f8da1010          LDR      r1,[r10,#0x10]        ;492
000184  f8d120b4          LDR      r2,[r1,#0xb4]         ;492
000188  6821              LDR      r1,[r4,#0]            ;492
00018a  68c8              LDR      r0,[r1,#0xc]          ;492
00018c  2107              MOVS     r1,#7                 ;492
00018e  f7fffffe          BL       luaT_gettm
                  |L15.402|
000192  4683              MOV      r11,r0                ;492
000194  f1bb0f00          CMP      r11,#0                ;493
000198  d11b              BNE      |L15.466|
00019a  f8d90000          LDR      r0,[r9,#0]            ;494
00019e  68c0              LDR      r0,[r0,#0xc]          ;494
0001a0  b918              CBNZ     r0,|L15.426|
0001a2  e000              B        |L15.422|
                  |L15.420|
0001a4  e057              B        |L15.598|
                  |L15.422|
0001a6  2000              MOVS     r0,#0                 ;494
0001a8  e012              B        |L15.464|
                  |L15.426|
0001aa  f8d90000          LDR      r0,[r9,#0]            ;494
0001ae  68c0              LDR      r0,[r0,#0xc]          ;494
0001b0  7980              LDRB     r0,[r0,#6]            ;494
0001b2  f0000080          AND      r0,r0,#0x80           ;494
0001b6  b108              CBZ      r0,|L15.444|
0001b8  2000              MOVS     r0,#0                 ;494
0001ba  e009              B        |L15.464|
                  |L15.444|
0001bc  f8da1010          LDR      r1,[r10,#0x10]        ;494
0001c0  f8d120b4          LDR      r2,[r1,#0xb4]         ;494
0001c4  f8d91000          LDR      r1,[r9,#0]            ;494
0001c8  68c8              LDR      r0,[r1,#0xc]          ;494
0001ca  2107              MOVS     r1,#7                 ;494
0001cc  f7fffffe          BL       luaT_gettm
                  |L15.464|
0001d0  4683              MOV      r11,r0                ;494
                  |L15.466|
0001d2  e049              B        |L15.616|
0001d4  6820              LDR      r0,[r4,#0]            ;498
0001d6  f8d91000          LDR      r1,[r9,#0]            ;498
0001da  4288              CMP      r0,r1                 ;498
0001dc  d101              BNE      |L15.482|
0001de  2001              MOVS     r0,#1                 ;498
0001e0  e72b              B        |L15.58|
                  |L15.482|
0001e2  f1ba0f00          CMP      r10,#0                ;499
0001e6  d101              BNE      |L15.492|
0001e8  2000              MOVS     r0,#0                 ;499
0001ea  e726              B        |L15.58|
                  |L15.492|
0001ec  6820              LDR      r0,[r4,#0]            ;500
0001ee  6980              LDR      r0,[r0,#0x18]         ;500
0001f0  b908              CBNZ     r0,|L15.502|
0001f2  2000              MOVS     r0,#0                 ;500
0001f4  e010              B        |L15.536|
                  |L15.502|
0001f6  6820              LDR      r0,[r4,#0]            ;500
0001f8  6980              LDR      r0,[r0,#0x18]         ;500
0001fa  7980              LDRB     r0,[r0,#6]            ;500
0001fc  f0000080          AND      r0,r0,#0x80           ;500
000200  b108              CBZ      r0,|L15.518|
000202  2000              MOVS     r0,#0                 ;500
000204  e008              B        |L15.536|
                  |L15.518|
000206  f8da1010          LDR      r1,[r10,#0x10]        ;500
00020a  f8d120b4          LDR      r2,[r1,#0xb4]         ;500
00020e  6821              LDR      r1,[r4,#0]            ;500
000210  6988              LDR      r0,[r1,#0x18]         ;500
000212  2107              MOVS     r1,#7                 ;500
000214  f7fffffe          BL       luaT_gettm
                  |L15.536|
000218  4683              MOV      r11,r0                ;500
00021a  f1bb0f00          CMP      r11,#0                ;501
00021e  d119              BNE      |L15.596|
000220  f8d90000          LDR      r0,[r9,#0]            ;502
000224  6980              LDR      r0,[r0,#0x18]         ;502
000226  b908              CBNZ     r0,|L15.556|
000228  2000              MOVS     r0,#0                 ;502
00022a  e012              B        |L15.594|
                  |L15.556|
00022c  f8d90000          LDR      r0,[r9,#0]            ;502
000230  6980              LDR      r0,[r0,#0x18]         ;502
000232  7980              LDRB     r0,[r0,#6]            ;502
000234  f0000080          AND      r0,r0,#0x80           ;502
000238  b108              CBZ      r0,|L15.574|
00023a  2000              MOVS     r0,#0                 ;502
00023c  e009              B        |L15.594|
                  |L15.574|
00023e  f8da1010          LDR      r1,[r10,#0x10]        ;502
000242  f8d120b4          LDR      r2,[r1,#0xb4]         ;502
000246  f8d91000          LDR      r1,[r9,#0]            ;502
00024a  6988              LDR      r0,[r1,#0x18]         ;502
00024c  2107              MOVS     r1,#7                 ;502
00024e  f7fffffe          BL       luaT_gettm
                  |L15.594|
000252  4683              MOV      r11,r0                ;502
                  |L15.596|
000254  e008              B        |L15.616|
                  |L15.598|
000256  6820              LDR      r0,[r4,#0]            ;506
000258  f8d91000          LDR      r1,[r9,#0]            ;506
00025c  4288              CMP      r0,r1                 ;506
00025e  d101              BNE      |L15.612|
000260  2001              MOVS     r0,#1                 ;506
000262  e6ea              B        |L15.58|
                  |L15.612|
000264  2000              MOVS     r0,#0                 ;506
000266  e6e8              B        |L15.58|
                  |L15.616|
000268  bf00              NOP                            ;495
00026a  f1bb0f00          CMP      r11,#0                ;508
00026e  d101              BNE      |L15.628|
000270  2000              MOVS     r0,#0                 ;509
000272  e6e2              B        |L15.58|
                  |L15.628|
000274  f8da000c          LDR      r0,[r10,#0xc]         ;510
000278  464b              MOV      r3,r9                 ;510
00027a  4622              MOV      r2,r4                 ;510
00027c  4659              MOV      r1,r11                ;510
00027e  9000              STR      r0,[sp,#0]            ;510
000280  4650              MOV      r0,r10                ;510
000282  f7fffffe          BL       luaT_callTMres
000286  f8da000c          LDR      r0,[r10,#0xc]         ;511
00028a  7a00              LDRB     r0,[r0,#8]            ;511
00028c  b150              CBZ      r0,|L15.676|
00028e  f8da000c          LDR      r0,[r10,#0xc]         ;511
000292  7a00              LDRB     r0,[r0,#8]            ;511
000294  2801              CMP      r0,#1                 ;511
000296  d103              BNE      |L15.672|
000298  f8da000c          LDR      r0,[r10,#0xc]         ;511
00029c  6800              LDR      r0,[r0,#0]            ;511
00029e  b108              CBZ      r0,|L15.676|
                  |L15.672|
0002a0  2001              MOVS     r0,#1                 ;511
0002a2  e6ca              B        |L15.58|
                  |L15.676|
0002a4  2000              MOVS     r0,#0                 ;511
0002a6  e6c8              B        |L15.58|
;;;513    
                          ENDP


                          AREA ||i.luaV_execute||, CODE, READONLY, ALIGN=2

                  luaV_execute PROC
;;;877    
;;;878    void luaV_execute (lua_State *L, CallInfo *ci) {
000000  b533              PUSH     {r0,r1,r4,r5,lr}
000002  b099              SUB      sp,sp,#0x64
;;;879      LClosure *cl;
;;;880      TValue *k;
;;;881      StkId base;
;;;882      const Instruction *pc;
;;;883      int trap;
;;;884    #if LUA_USE_JUMPTABLE
;;;885    #include "ljumptab.h"
;;;886    #endif
;;;887     tailcall:
000004  bf00              NOP      
                  |L16.6|
;;;888      trap = L->hookmask;
000006  9819              LDR      r0,[sp,#0x64]
000008  6f01              LDR      r1,[r0,#0x70]
00000a  9113              STR      r1,[sp,#0x4c]
;;;889      cl = clLvalue(s2v(ci->func));
00000c  981a              LDR      r0,[sp,#0x68]
00000e  6800              LDR      r0,[r0,#0]
000010  6800              LDR      r0,[r0,#0]
000012  9017              STR      r0,[sp,#0x5c]
;;;890      k = cl->p->k;
000014  9817              LDR      r0,[sp,#0x5c]
000016  68c0              LDR      r0,[r0,#0xc]
000018  6b00              LDR      r0,[r0,#0x30]
00001a  9016              STR      r0,[sp,#0x58]
;;;891      pc = ci->u.l.savedpc;
00001c  981a              LDR      r0,[sp,#0x68]
00001e  6900              LDR      r0,[r0,#0x10]
000020  9014              STR      r0,[sp,#0x50]
;;;892      if (trap) {
000022  9813              LDR      r0,[sp,#0x4c]
000024  b198              CBZ      r0,|L16.78|
;;;893        if (cl->p->is_vararg)
000026  9817              LDR      r0,[sp,#0x5c]
000028  68c0              LDR      r0,[r0,#0xc]
00002a  79c0              LDRB     r0,[r0,#7]
00002c  b110              CBZ      r0,|L16.52|
;;;894          trap = 0;  /* hooks will start with PREPVARARG instruction */
00002e  2100              MOVS     r1,#0
000030  9113              STR      r1,[sp,#0x4c]
000032  e009              B        |L16.72|
                  |L16.52|
;;;895        else if (pc == cl->p->code)  /* first instruction (not resuming)? */
000034  9817              LDR      r0,[sp,#0x5c]
000036  68c0              LDR      r0,[r0,#0xc]
000038  6b81              LDR      r1,[r0,#0x38]
00003a  9814              LDR      r0,[sp,#0x50]
00003c  4281              CMP      r1,r0
00003e  d103              BNE      |L16.72|
;;;896          luaD_hookcall(L, ci);
000040  e9dd0119          LDRD     r0,r1,[sp,#0x64]
000044  f7fffffe          BL       luaD_hookcall
                  |L16.72|
;;;897        ci->u.l.trap = 1;  /* there may be other hooks */
000048  2101              MOVS     r1,#1
00004a  981a              LDR      r0,[sp,#0x68]
00004c  6141              STR      r1,[r0,#0x14]
                  |L16.78|
;;;898      }
;;;899      base = ci->func + 1;
00004e  981a              LDR      r0,[sp,#0x68]
000050  6800              LDR      r0,[r0,#0]
000052  3010              ADDS     r0,r0,#0x10
000054  9015              STR      r0,[sp,#0x54]
;;;900      /* main loop of interpreter */
;;;901      for (;;) {
000056  bf00              NOP      
                  |L16.88|
;;;902        int cond;  /* flag for conditional jumps */
;;;903        Instruction i;  /* instruction being executed */
;;;904        StkId ra;  /* instruction's A register */
;;;905        TValue *vra;  /* corresponding value */
;;;906        vmfetch();
000058  9814              LDR      r0,[sp,#0x50]
00005a  6801              LDR      r1,[r0,#0]
00005c  9111              STR      r1,[sp,#0x44]
00005e  1d01              ADDS     r1,r0,#4
000060  9114              STR      r1,[sp,#0x50]
000062  9813              LDR      r0,[sp,#0x4c]
000064  b1a0              CBZ      r0,|L16.144|
000066  9819              LDR      r0,[sp,#0x64]
000068  f8900070          LDRB     r0,[r0,#0x70]
00006c  f000000c          AND      r0,r0,#0xc
000070  b920              CBNZ     r0,|L16.124|
000072  2100              MOVS     r1,#0
000074  981a              LDR      r0,[sp,#0x68]
000076  6141              STR      r1,[r0,#0x14]
000078  9113              STR      r1,[sp,#0x4c]
00007a  e005              B        |L16.136|
                  |L16.124|
00007c  9914              LDR      r1,[sp,#0x50]
00007e  981a              LDR      r0,[sp,#0x68]
000080  6101              STR      r1,[r0,#0x10]
000082  9819              LDR      r0,[sp,#0x64]
000084  f7fffffe          BL       luaG_traceexec
                  |L16.136|
000088  981a              LDR      r0,[sp,#0x68]
00008a  6800              LDR      r0,[r0,#0]
00008c  3010              ADDS     r0,r0,#0x10
00008e  9015              STR      r0,[sp,#0x54]
                  |L16.144|
000090  9911              LDR      r1,[sp,#0x44]
000092  f3c111c7          UBFX     r1,r1,#7,#8
000096  9815              LDR      r0,[sp,#0x54]
000098  eb001001          ADD      r0,r0,r1,LSL #4
00009c  9010              STR      r0,[sp,#0x40]
00009e  9810              LDR      r0,[sp,#0x40]
0000a0  900f              STR      r0,[sp,#0x3c]
;;;907        lua_assert(base == ci->func + 1);
;;;908        lua_assert(base <= L->top && L->top < L->stack + L->stacksize);
;;;909        lua_assert(ci->top < L->stack + L->stacksize);
;;;910        vmdispatch (GET_OPCODE(i)) {
0000a2  9811              LDR      r0,[sp,#0x44]
0000a4  f000007f          AND      r0,r0,#0x7f
0000a8  284f              CMP      r0,#0x4f
0000aa  f08286fa          BCS.W    |L16.11938|
0000ae  e8dff010          TBH      [pc,r0,LSL #1]
0000b2  004f              DCW      0x004f
0000b4  0077008b          DCW      0x0077,0x008b
0000b8  0062009d          DCW      0x0062,0x009d
0000bc  00b700c8          DCW      0x00b7,0x00c8
0000c0  00d900ef          DCW      0x00d9,0x00ef
0000c4  011f0169          DCW      0x011f,0x0169
0000c8  01e30244          DCW      0x01e3,0x0244
0000cc  028e0301          DCW      0x028e,0x0301
0000d0  039d0420          DCW      0x039d,0x0420
0000d4  048a04c6          DCW      0x048a,0x04c6
0000d8  05250587          DCW      0x0525,0x0587
0000dc  05e7064b          DCW      0x05e7,0x064b
0000e0  06cb0718          DCW      0x06cb,0x0718
0000e4  076509b6          DCW      0x0765,0x09b6
0000e8  09fa0a3e          DCW      0x09fa,0x0a3e
0000ec  0b6e0bb9          DCW      0x0b6e,0x0bb9
0000f0  07cb084d          DCW      0x07cb,0x084d
0000f4  08cf0c97          DCW      0x08cf,0x0c97
0000f8  0db60954          DCW      0x0db6,0x0954
0000fc  0d2f0a82          DCW      0x0d2f,0x0a82
000100  0ad10b1f          DCW      0x0ad1,0x0b1f
000104  0bf70c45          DCW      0x0bf7,0x0c45
000108  0e180e70          DCW      0x0e18,0x0e70
00010c  0ea90ec7          DCW      0x0ea9,0x0ec7
000110  0ede0f01          DCW      0x0ede,0x0f01
000114  0f060f16          DCW      0x0f06,0x0f16
000118  0f4b0fa8          DCW      0x0f4b,0x0fa8
00011c  10051030          DCW      0x1005,0x1030
000120  107d10dd          DCW      0x107d,0x10dd
000124  113d119c          DCW      0x113d,0x119c
000128  11fc1228          DCW      0x11fc,0x1228
00012c  12651273          DCW      0x1265,0x1273
000130  129812b4          DCW      0x1298,0x12b4
000134  132a135a          DCW      0x132a,0x135a
000138  138313be          DCW      0x1383,0x13be
00013c  13ef1430          DCW      0x13ef,0x1430
000140  14cf1576          DCW      0x14cf,0x1576
000144  15ff1619          DCW      0x15ff,0x1619
000148  168916c9          DCW      0x1689,0x16c9
00014c  16da16f7          DCW      0x16da,0x16f7
;;;911          vmcase(OP_MOVE) {
;;;912            setobjs2s(L, ra, RB(i));
000150  9810              LDR      r0,[sp,#0x40]
000152  900e              STR      r0,[sp,#0x38]
000154  9911              LDR      r1,[sp,#0x44]
000156  f3c14107          UBFX     r1,r1,#16,#8
00015a  9815              LDR      r0,[sp,#0x54]
00015c  eb001001          ADD      r0,r0,r1,LSL #4
000160  900d              STR      r0,[sp,#0x34]
000162  e9dd100d          LDRD     r1,r0,[sp,#0x34]
000166  c906              LDM      r1,{r1,r2}
000168  c006              STM      r0!,{r1,r2}
00016a  980d              LDR      r0,[sp,#0x34]
00016c  7a02              LDRB     r2,[r0,#8]
00016e  980e              LDR      r0,[sp,#0x38]
000170  7202              STRB     r2,[r0,#8]
                  |L16.370|
;;;913            vmbreak;
000172  f002be96          B.W      |L16.11938|
;;;914          }
;;;915          vmcase(OP_LOADK) {
;;;916            TValue *rb = k + GETARG_Bx(i);
000176  49fc              LDR      r1,|L16.1384|
000178  9811              LDR      r0,[sp,#0x44]
00017a  ea0131d0          AND      r1,r1,r0,LSR #15
00017e  9816              LDR      r0,[sp,#0x58]
000180  eb001101          ADD      r1,r0,r1,LSL #4
000184  910e              STR      r1,[sp,#0x38]
;;;917            setobj2s(L, ra, rb);
000186  9810              LDR      r0,[sp,#0x40]
000188  900d              STR      r0,[sp,#0x34]
00018a  980e              LDR      r0,[sp,#0x38]
00018c  900c              STR      r0,[sp,#0x30]
00018e  e9dd100c          LDRD     r1,r0,[sp,#0x30]
000192  c906              LDM      r1,{r1,r2}
000194  c006              STM      r0!,{r1,r2}
000196  980c              LDR      r0,[sp,#0x30]
000198  7a02              LDRB     r2,[r0,#8]
00019a  980d              LDR      r0,[sp,#0x34]
00019c  7202              STRB     r2,[r0,#8]
;;;918            vmbreak;
00019e  e7e8              B        |L16.370|
;;;919          }
;;;920          vmcase(OP_LOADI) {
;;;921            lua_Integer b = GETARG_sBx(i);
0001a0  49f1              LDR      r1,|L16.1384|
0001a2  9811              LDR      r0,[sp,#0x44]
0001a4  ea0130d0          AND      r0,r1,r0,LSR #15
0001a8  eb004031          ADD      r0,r0,r1,ROR #16
0001ac  17c1              ASRS     r1,r0,#31
0001ae  e9cd010c          STRD     r0,r1,[sp,#0x30]
;;;922            setivalue(vra, b);
0001b2  980f              LDR      r0,[sp,#0x3c]
0001b4  900b              STR      r0,[sp,#0x2c]
0001b6  e9dd210c          LDRD     r2,r1,[sp,#0x30]
0001ba  980b              LDR      r0,[sp,#0x2c]
0001bc  e9c02100          STRD     r2,r1,[r0,#0]
0001c0  2123              MOVS     r1,#0x23
0001c2  980b              LDR      r0,[sp,#0x2c]
0001c4  7201              STRB     r1,[r0,#8]
;;;923            vmbreak;
0001c6  e7d4              B        |L16.370|
;;;924          }
;;;925          vmcase(OP_LOADF) {
;;;926            int b = GETARG_sBx(i);
0001c8  49e7              LDR      r1,|L16.1384|
0001ca  9811              LDR      r0,[sp,#0x44]
0001cc  ea0130d0          AND      r0,r1,r0,LSR #15
0001d0  eb004031          ADD      r0,r0,r1,ROR #16
0001d4  900e              STR      r0,[sp,#0x38]
;;;927            setfltvalue(vra, cast_num(b));
0001d6  980f              LDR      r0,[sp,#0x3c]
0001d8  900d              STR      r0,[sp,#0x34]
0001da  980e              LDR      r0,[sp,#0x38]
0001dc  f7fffffe          BL       __aeabi_i2d
0001e0  9a0d              LDR      r2,[sp,#0x34]
0001e2  c203              STM      r2!,{r0,r1}
0001e4  2113              MOVS     r1,#0x13
0001e6  980d              LDR      r0,[sp,#0x34]
0001e8  7201              STRB     r1,[r0,#8]
                  |L16.490|
;;;928            vmbreak;
0001ea  e7c2              B        |L16.370|
;;;929          }
;;;930          vmcase(OP_LOADKX) {
;;;931            TValue *rb;
;;;932            rb = k + GETARG_Ax(*pc); pc++;
0001ec  9814              LDR      r0,[sp,#0x50]
0001ee  6800              LDR      r0,[r0,#0]
0001f0  f06f417e          MVN      r1,#0xfe000000
0001f4  ea0111d0          AND      r1,r1,r0,LSR #7
0001f8  9816              LDR      r0,[sp,#0x58]
0001fa  eb001101          ADD      r1,r0,r1,LSL #4
0001fe  910e              STR      r1,[sp,#0x38]
000200  9814              LDR      r0,[sp,#0x50]
000202  1d01              ADDS     r1,r0,#4
000204  9114              STR      r1,[sp,#0x50]
;;;933            setobj2s(L, ra, rb);
000206  9810              LDR      r0,[sp,#0x40]
000208  900d              STR      r0,[sp,#0x34]
00020a  980e              LDR      r0,[sp,#0x38]
00020c  900c              STR      r0,[sp,#0x30]
00020e  e9dd100c          LDRD     r1,r0,[sp,#0x30]
000212  c906              LDM      r1,{r1,r2}
000214  c006              STM      r0!,{r1,r2}
000216  980c              LDR      r0,[sp,#0x30]
000218  7a02              LDRB     r2,[r0,#8]
00021a  980d              LDR      r0,[sp,#0x34]
00021c  7202              STRB     r2,[r0,#8]
;;;934            vmbreak;
00021e  e7a8              B        |L16.370|
;;;935          }
;;;936          vmcase(OP_LOADBOOL) {
;;;937            setbvalue(vra, GETARG_B(i));
000220  980f              LDR      r0,[sp,#0x3c]
000222  900e              STR      r0,[sp,#0x38]
000224  9811              LDR      r0,[sp,#0x44]
000226  f3c04207          UBFX     r2,r0,#16,#8
00022a  980e              LDR      r0,[sp,#0x38]
00022c  6002              STR      r2,[r0,#0]
00022e  2201              MOVS     r2,#1
000230  980e              LDR      r0,[sp,#0x38]
000232  7202              STRB     r2,[r0,#8]
;;;938            if (GETARG_C(i)) pc++;  /* skip next instruction (if C) */
000234  9811              LDR      r0,[sp,#0x44]
000236  0e00              LSRS     r0,r0,#24
000238  b110              CBZ      r0,|L16.576|
00023a  9814              LDR      r0,[sp,#0x50]
00023c  1d00              ADDS     r0,r0,#4
00023e  9014              STR      r0,[sp,#0x50]
                  |L16.576|
;;;939            vmbreak;
000240  e797              B        |L16.370|
;;;940          }
;;;941          vmcase(OP_LOADNIL) {
;;;942            int b = GETARG_B(i);
000242  9811              LDR      r0,[sp,#0x44]
000244  f3c04007          UBFX     r0,r0,#16,#8
000248  900e              STR      r0,[sp,#0x38]
;;;943            do {
00024a  bf00              NOP      
                  |L16.588|
;;;944              setnilvalue(s2v(ra++));
00024c  2300              MOVS     r3,#0
00024e  9910              LDR      r1,[sp,#0x40]
000250  f1010210          ADD      r2,r1,#0x10
000254  9210              STR      r2,[sp,#0x40]
000256  720b              STRB     r3,[r1,#8]
;;;945            } while (b--);
000258  990e              LDR      r1,[sp,#0x38]
00025a  1e48              SUBS     r0,r1,#1
00025c  900e              STR      r0,[sp,#0x38]
00025e  2900              CMP      r1,#0
000260  d1f4              BNE      |L16.588|
                  |L16.610|
;;;946            vmbreak;
000262  e786              B        |L16.370|
;;;947          }
;;;948          vmcase(OP_GETUPVAL) {
;;;949            int b = GETARG_B(i);
000264  9811              LDR      r0,[sp,#0x44]
000266  f3c04107          UBFX     r1,r0,#16,#8
00026a  910e              STR      r1,[sp,#0x38]
;;;950            setobj2s(L, ra, cl->upvals[b]->v);
00026c  9810              LDR      r0,[sp,#0x40]
00026e  900d              STR      r0,[sp,#0x34]
000270  9817              LDR      r0,[sp,#0x5c]
000272  3010              ADDS     r0,r0,#0x10
000274  990e              LDR      r1,[sp,#0x38]
000276  f8500021          LDR      r0,[r0,r1,LSL #2]
00027a  6880              LDR      r0,[r0,#8]
00027c  900c              STR      r0,[sp,#0x30]
00027e  e9dd100c          LDRD     r1,r0,[sp,#0x30]
000282  c906              LDM      r1,{r1,r2}
000284  c006              STM      r0!,{r1,r2}
000286  980c              LDR      r0,[sp,#0x30]
000288  7a02              LDRB     r2,[r0,#8]
00028a  980d              LDR      r0,[sp,#0x34]
00028c  7202              STRB     r2,[r0,#8]
;;;951            vmbreak;
00028e  e770              B        |L16.370|
;;;952          }
;;;953          vmcase(OP_SETUPVAL) {
;;;954            UpVal *uv = cl->upvals[GETARG_B(i)];
000290  9811              LDR      r0,[sp,#0x44]
000292  f3c04007          UBFX     r0,r0,#16,#8
000296  0081              LSLS     r1,r0,#2
000298  9817              LDR      r0,[sp,#0x5c]
00029a  3010              ADDS     r0,r0,#0x10
00029c  5841              LDR      r1,[r0,r1]
00029e  910e              STR      r1,[sp,#0x38]
;;;955            setobj(L, uv->v, vra);
0002a0  980e              LDR      r0,[sp,#0x38]
0002a2  6881              LDR      r1,[r0,#8]
0002a4  910d              STR      r1,[sp,#0x34]
0002a6  980f              LDR      r0,[sp,#0x3c]
0002a8  900c              STR      r0,[sp,#0x30]
0002aa  e9dd010c          LDRD     r0,r1,[sp,#0x30]
0002ae  c805              LDM      r0,{r0,r2}
0002b0  c105              STM      r1!,{r0,r2}
0002b2  980c              LDR      r0,[sp,#0x30]
0002b4  7a01              LDRB     r1,[r0,#8]
0002b6  980d              LDR      r0,[sp,#0x34]
0002b8  7201              STRB     r1,[r0,#8]
;;;956            luaC_barrier(L, uv, vra);
0002ba  980f              LDR      r0,[sp,#0x3c]
0002bc  7a00              LDRB     r0,[r0,#8]
0002be  f0000040          AND      r0,r0,#0x40
0002c2  b198              CBZ      r0,|L16.748|
0002c4  980e              LDR      r0,[sp,#0x38]
0002c6  7940              LDRB     r0,[r0,#5]
0002c8  f0000020          AND      r0,r0,#0x20
0002cc  b170              CBZ      r0,|L16.748|
0002ce  980f              LDR      r0,[sp,#0x3c]
0002d0  6800              LDR      r0,[r0,#0]
0002d2  7940              LDRB     r0,[r0,#5]
0002d4  f0000018          AND      r0,r0,#0x18
0002d8  b140              CBZ      r0,|L16.748|
0002da  980f              LDR      r0,[sp,#0x3c]
0002dc  6801              LDR      r1,[r0,#0]
0002de  460a              MOV      r2,r1
0002e0  910d              STR      r1,[sp,#0x34]
0002e2  990e              LDR      r1,[sp,#0x38]
0002e4  9819              LDR      r0,[sp,#0x64]
0002e6  f7fffffe          BL       luaC_barrier_
0002ea  e000              B        |L16.750|
                  |L16.748|
0002ec  bf00              NOP      
                  |L16.750|
;;;957            vmbreak;
0002ee  e740              B        |L16.370|
;;;958          }
;;;959          vmcase(OP_GETTABUP) {
;;;960            const TValue *slot;
;;;961            TValue *upval = cl->upvals[GETARG_B(i)]->v;
0002f0  9811              LDR      r0,[sp,#0x44]
0002f2  f3c04007          UBFX     r0,r0,#16,#8
0002f6  0081              LSLS     r1,r0,#2
0002f8  9817              LDR      r0,[sp,#0x5c]
0002fa  3010              ADDS     r0,r0,#0x10
0002fc  5840              LDR      r0,[r0,r1]
0002fe  6881              LDR      r1,[r0,#8]
000300  910d              STR      r1,[sp,#0x34]
;;;962            TValue *rc = KC(i);
000302  9811              LDR      r0,[sp,#0x44]
000304  0e01              LSRS     r1,r0,#24
000306  9816              LDR      r0,[sp,#0x58]
000308  eb001101          ADD      r1,r0,r1,LSL #4
00030c  910c              STR      r1,[sp,#0x30]
;;;963            TString *key = tsvalue(rc);  /* key must be a string */
00030e  980c              LDR      r0,[sp,#0x30]
000310  6801              LDR      r1,[r0,#0]
000312  910b              STR      r1,[sp,#0x2c]
;;;964            if (luaV_fastget(L, upval, key, slot, luaH_getshortstr)) {
000314  980d              LDR      r0,[sp,#0x34]
000316  7a00              LDRB     r0,[r0,#8]
000318  2845              CMP      r0,#0x45
00031a  d002              BEQ      |L16.802|
00031c  2000              MOVS     r0,#0
00031e  900e              STR      r0,[sp,#0x38]
000320  e00f              B        |L16.834|
                  |L16.802|
000322  980d              LDR      r0,[sp,#0x34]
000324  6801              LDR      r1,[r0,#0]
000326  910a              STR      r1,[sp,#0x28]
000328  e9dd010a          LDRD     r0,r1,[sp,#0x28]
00032c  f7fffffe          BL       luaH_getshortstr
000330  900e              STR      r0,[sp,#0x38]
000332  980e              LDR      r0,[sp,#0x38]
000334  7a00              LDRB     r0,[r0,#8]
000336  f000000f          AND      r0,r0,#0xf
00033a  b108              CBZ      r0,|L16.832|
00033c  2001              MOVS     r0,#1
00033e  e000              B        |L16.834|
                  |L16.832|
000340  2000              MOVS     r0,#0
                  |L16.834|
000342  b160              CBZ      r0,|L16.862|
;;;965              setobj2s(L, ra, slot);
000344  9810              LDR      r0,[sp,#0x40]
000346  900a              STR      r0,[sp,#0x28]
000348  980e              LDR      r0,[sp,#0x38]
00034a  9009              STR      r0,[sp,#0x24]
00034c  e9dd1009          LDRD     r1,r0,[sp,#0x24]
000350  c906              LDM      r1,{r1,r2}
000352  c006              STM      r0!,{r1,r2}
000354  9809              LDR      r0,[sp,#0x24]
000356  7a02              LDRB     r2,[r0,#8]
000358  980a              LDR      r0,[sp,#0x28]
00035a  7202              STRB     r2,[r0,#8]
00035c  e011              B        |L16.898|
                  |L16.862|
;;;966            }
;;;967            else
;;;968              Protect(luaV_finishget(L, upval, rc, ra, slot));
00035e  9914              LDR      r1,[sp,#0x50]
000360  981a              LDR      r0,[sp,#0x68]
000362  6101              STR      r1,[r0,#0x10]
000364  981a              LDR      r0,[sp,#0x68]
000366  6841              LDR      r1,[r0,#4]
000368  9819              LDR      r0,[sp,#0x64]
00036a  60c1              STR      r1,[r0,#0xc]
00036c  980e              LDR      r0,[sp,#0x38]
00036e  9000              STR      r0,[sp,#0]
000370  9b10              LDR      r3,[sp,#0x40]
000372  e9dd210c          LDRD     r2,r1,[sp,#0x30]
000376  9819              LDR      r0,[sp,#0x64]
000378  f7fffffe          BL       luaV_finishget
00037c  981a              LDR      r0,[sp,#0x68]
00037e  6941              LDR      r1,[r0,#0x14]
000380  9113              STR      r1,[sp,#0x4c]
                  |L16.898|
;;;969            vmbreak;
000382  e6f6              B        |L16.370|
;;;970          }
;;;971          vmcase(OP_GETTABLE) {
;;;972            const TValue *slot;
;;;973            TValue *rb = vRB(i);
000384  9811              LDR      r0,[sp,#0x44]
000386  f3c04007          UBFX     r0,r0,#16,#8
00038a  9915              LDR      r1,[sp,#0x54]
00038c  eb011100          ADD      r1,r1,r0,LSL #4
000390  910d              STR      r1,[sp,#0x34]
;;;974            TValue *rc = vRC(i);
000392  9811              LDR      r0,[sp,#0x44]
000394  0e01              LSRS     r1,r0,#24
000396  9815              LDR      r0,[sp,#0x54]
000398  eb001101          ADD      r1,r0,r1,LSL #4
00039c  910c              STR      r1,[sp,#0x30]
;;;975            lua_Unsigned n;
;;;976            if (ttisinteger(rc)  /* fast track for integers? */
00039e  980c              LDR      r0,[sp,#0x30]
0003a0  7a00              LDRB     r0,[r0,#8]
0003a2  2823              CMP      r0,#0x23
0003a4  d130              BNE      |L16.1032|
0003a6  990c              LDR      r1,[sp,#0x30]
0003a8  c903              LDM      r1,{r0,r1}
0003aa  e9cd010a          STRD     r0,r1,[sp,#0x28]
0003ae  980d              LDR      r0,[sp,#0x34]
0003b0  7a00              LDRB     r0,[r0,#8]
0003b2  2845              CMP      r0,#0x45
0003b4  d002              BEQ      |L16.956|
0003b6  2000              MOVS     r0,#0
0003b8  900e              STR      r0,[sp,#0x38]
;;;977                ? (n = ivalue(rc), luaV_fastgeti(L, rb, n, slot))
0003ba  e03c              B        |L16.1078|
                  |L16.956|
0003bc  e9dd100a          LDRD     r1,r0,[sp,#0x28]
0003c0  1e4b              SUBS     r3,r1,#1
0003c2  f1600100          SBC      r1,r0,#0
0003c6  980d              LDR      r0,[sp,#0x34]
0003c8  6800              LDR      r0,[r0,#0]
0003ca  6880              LDR      r0,[r0,#8]
0003cc  1a18              SUBS     r0,r3,r0
0003ce  f1710100          SBCS     r1,r1,#0
0003d2  d207              BCS      |L16.996|
0003d4  980d              LDR      r0,[sp,#0x34]
0003d6  6800              LDR      r0,[r0,#0]
0003d8  68c2              LDR      r2,[r0,#0xc]
0003da  980a              LDR      r0,[sp,#0x28]
0003dc  1e40              SUBS     r0,r0,#1
0003de  eb021000          ADD      r0,r2,r0,LSL #4
0003e2  e007              B        |L16.1012|
                  |L16.996|
0003e4  980d              LDR      r0,[sp,#0x34]
0003e6  6801              LDR      r1,[r0,#0]
0003e8  9109              STR      r1,[sp,#0x24]
0003ea  4608              MOV      r0,r1
0003ec  e9dd230a          LDRD     r2,r3,[sp,#0x28]
0003f0  f7fffffe          BL       luaH_getint
                  |L16.1012|
0003f4  900e              STR      r0,[sp,#0x38]
0003f6  980e              LDR      r0,[sp,#0x38]
0003f8  7a00              LDRB     r0,[r0,#8]
0003fa  f000000f          AND      r0,r0,#0xf
0003fe  b108              CBZ      r0,|L16.1028|
000400  2001              MOVS     r0,#1
000402  e018              B        |L16.1078|
                  |L16.1028|
000404  2000              MOVS     r0,#0
000406  e016              B        |L16.1078|
                  |L16.1032|
000408  980d              LDR      r0,[sp,#0x34]
00040a  7a00              LDRB     r0,[r0,#8]
00040c  2845              CMP      r0,#0x45
00040e  d002              BEQ      |L16.1046|
000410  2000              MOVS     r0,#0
000412  900e              STR      r0,[sp,#0x38]
;;;978                : luaV_fastget(L, rb, rc, slot, luaH_get)) {
000414  e00f              B        |L16.1078|
                  |L16.1046|
000416  980d              LDR      r0,[sp,#0x34]
000418  6801              LDR      r1,[r0,#0]
00041a  9109              STR      r1,[sp,#0x24]
00041c  990c              LDR      r1,[sp,#0x30]
00041e  9809              LDR      r0,[sp,#0x24]
000420  f7fffffe          BL       luaH_get
000424  900e              STR      r0,[sp,#0x38]
000426  980e              LDR      r0,[sp,#0x38]
000428  7a00              LDRB     r0,[r0,#8]
00042a  f000000f          AND      r0,r0,#0xf
00042e  b108              CBZ      r0,|L16.1076|
000430  2001              MOVS     r0,#1
000432  e000              B        |L16.1078|
                  |L16.1076|
000434  2000              MOVS     r0,#0
                  |L16.1078|
000436  b160              CBZ      r0,|L16.1106|
;;;979              setobj2s(L, ra, slot);
000438  9810              LDR      r0,[sp,#0x40]
00043a  9009              STR      r0,[sp,#0x24]
00043c  980e              LDR      r0,[sp,#0x38]
00043e  9008              STR      r0,[sp,#0x20]
000440  e9dd1008          LDRD     r1,r0,[sp,#0x20]
000444  c906              LDM      r1,{r1,r2}
000446  c006              STM      r0!,{r1,r2}
000448  9808              LDR      r0,[sp,#0x20]
00044a  7a02              LDRB     r2,[r0,#8]
00044c  9809              LDR      r0,[sp,#0x24]
00044e  7202              STRB     r2,[r0,#8]
000450  e011              B        |L16.1142|
                  |L16.1106|
;;;980            }
;;;981            else
;;;982              Protect(luaV_finishget(L, rb, rc, ra, slot));
000452  9914              LDR      r1,[sp,#0x50]
000454  981a              LDR      r0,[sp,#0x68]
000456  6101              STR      r1,[r0,#0x10]
000458  981a              LDR      r0,[sp,#0x68]
00045a  6841              LDR      r1,[r0,#4]
00045c  9819              LDR      r0,[sp,#0x64]
00045e  60c1              STR      r1,[r0,#0xc]
000460  980e              LDR      r0,[sp,#0x38]
000462  9000              STR      r0,[sp,#0]
000464  9b10              LDR      r3,[sp,#0x40]
000466  e9dd210c          LDRD     r2,r1,[sp,#0x30]
00046a  9819              LDR      r0,[sp,#0x64]
00046c  f7fffffe          BL       luaV_finishget
000470  981a              LDR      r0,[sp,#0x68]
000472  6941              LDR      r1,[r0,#0x14]
000474  9113              STR      r1,[sp,#0x4c]
                  |L16.1142|
;;;983            vmbreak;
000476  e67c              B        |L16.370|
;;;984          }
;;;985          vmcase(OP_GETI) {
;;;986            const TValue *slot;
;;;987            TValue *rb = vRB(i);
000478  9811              LDR      r0,[sp,#0x44]
00047a  f3c04007          UBFX     r0,r0,#16,#8
00047e  9915              LDR      r1,[sp,#0x54]
000480  eb011100          ADD      r1,r1,r0,LSL #4
000484  910d              STR      r1,[sp,#0x34]
;;;988            int c = GETARG_C(i);
000486  9811              LDR      r0,[sp,#0x44]
000488  0e00              LSRS     r0,r0,#24
00048a  900c              STR      r0,[sp,#0x30]
;;;989            if (luaV_fastgeti(L, rb, c, slot)) {
00048c  980d              LDR      r0,[sp,#0x34]
00048e  7a00              LDRB     r0,[r0,#8]
000490  2845              CMP      r0,#0x45
000492  d002              BEQ      |L16.1178|
000494  2000              MOVS     r0,#0
000496  900e              STR      r0,[sp,#0x38]
000498  e024              B        |L16.1252|
                  |L16.1178|
00049a  980c              LDR      r0,[sp,#0x30]
00049c  17c1              ASRS     r1,r0,#31
00049e  1e43              SUBS     r3,r0,#1
0004a0  f1610100          SBC      r1,r1,#0
0004a4  980d              LDR      r0,[sp,#0x34]
0004a6  6800              LDR      r0,[r0,#0]
0004a8  6880              LDR      r0,[r0,#8]
0004aa  1a18              SUBS     r0,r3,r0
0004ac  f1710100          SBCS     r1,r1,#0
0004b0  d207              BCS      |L16.1218|
0004b2  980d              LDR      r0,[sp,#0x34]
0004b4  6800              LDR      r0,[r0,#0]
0004b6  68c1              LDR      r1,[r0,#0xc]
0004b8  980c              LDR      r0,[sp,#0x30]
0004ba  1e40              SUBS     r0,r0,#1
0004bc  eb011000          ADD      r0,r1,r0,LSL #4
0004c0  e007              B        |L16.1234|
                  |L16.1218|
0004c2  980d              LDR      r0,[sp,#0x34]
0004c4  6801              LDR      r1,[r0,#0]
0004c6  910b              STR      r1,[sp,#0x2c]
0004c8  9a0c              LDR      r2,[sp,#0x30]
0004ca  17d3              ASRS     r3,r2,#31
0004cc  4608              MOV      r0,r1
0004ce  f7fffffe          BL       luaH_getint
                  |L16.1234|
0004d2  900e              STR      r0,[sp,#0x38]
0004d4  980e              LDR      r0,[sp,#0x38]
0004d6  7a00              LDRB     r0,[r0,#8]
0004d8  f000000f          AND      r0,r0,#0xf
0004dc  b108              CBZ      r0,|L16.1250|
0004de  2001              MOVS     r0,#1
0004e0  e000              B        |L16.1252|
                  |L16.1250|
0004e2  2000              MOVS     r0,#0
                  |L16.1252|
0004e4  b160              CBZ      r0,|L16.1280|
;;;990              setobj2s(L, ra, slot);
0004e6  9810              LDR      r0,[sp,#0x40]
0004e8  900b              STR      r0,[sp,#0x2c]
0004ea  980e              LDR      r0,[sp,#0x38]
0004ec  900a              STR      r0,[sp,#0x28]
0004ee  e9dd100a          LDRD     r1,r0,[sp,#0x28]
0004f2  c906              LDM      r1,{r1,r2}
0004f4  c006              STM      r0!,{r1,r2}
0004f6  980a              LDR      r0,[sp,#0x28]
0004f8  7a02              LDRB     r2,[r0,#8]
0004fa  980b              LDR      r0,[sp,#0x2c]
0004fc  7202              STRB     r2,[r0,#8]
0004fe  e01b              B        |L16.1336|
                  |L16.1280|
;;;991            }
;;;992            else {
;;;993              TValue key;
;;;994              setivalue(&key, c);
000500  a808              ADD      r0,sp,#0x20
000502  9007              STR      r0,[sp,#0x1c]
000504  980c              LDR      r0,[sp,#0x30]
000506  17c2              ASRS     r2,r0,#31
000508  9907              LDR      r1,[sp,#0x1c]
00050a  c105              STM      r1!,{r0,r2}
00050c  2223              MOVS     r2,#0x23
00050e  9807              LDR      r0,[sp,#0x1c]
000510  7202              STRB     r2,[r0,#8]
;;;995              Protect(luaV_finishget(L, rb, &key, ra, slot));
000512  991a              LDR      r1,[sp,#0x68]
000514  9814              LDR      r0,[sp,#0x50]
000516  6108              STR      r0,[r1,#0x10]
000518  981a              LDR      r0,[sp,#0x68]
00051a  6842              LDR      r2,[r0,#4]
00051c  9819              LDR      r0,[sp,#0x64]
00051e  60c2              STR      r2,[r0,#0xc]
000520  980e              LDR      r0,[sp,#0x38]
000522  9000              STR      r0,[sp,#0]
000524  aa08              ADD      r2,sp,#0x20
000526  9b10              LDR      r3,[sp,#0x40]
000528  990d              LDR      r1,[sp,#0x34]
00052a  9819              LDR      r0,[sp,#0x64]
00052c  f7fffffe          BL       luaV_finishget
000530  981a              LDR      r0,[sp,#0x68]
000532  6941              LDR      r1,[r0,#0x14]
000534  9113              STR      r1,[sp,#0x4c]
;;;996            }
000536  bf00              NOP      
                  |L16.1336|
;;;997            vmbreak;
000538  e61b              B        |L16.370|
;;;998          }
;;;999          vmcase(OP_GETFIELD) {
;;;1000           const TValue *slot;
;;;1001           TValue *rb = vRB(i);
00053a  9811              LDR      r0,[sp,#0x44]
00053c  f3c04007          UBFX     r0,r0,#16,#8
000540  9915              LDR      r1,[sp,#0x54]
000542  eb011100          ADD      r1,r1,r0,LSL #4
000546  910d              STR      r1,[sp,#0x34]
;;;1002           TValue *rc = KC(i);
000548  9811              LDR      r0,[sp,#0x44]
00054a  0e01              LSRS     r1,r0,#24
00054c  9816              LDR      r0,[sp,#0x58]
00054e  eb001101          ADD      r1,r0,r1,LSL #4
000552  910c              STR      r1,[sp,#0x30]
;;;1003           TString *key = tsvalue(rc);  /* key must be a string */
000554  980c              LDR      r0,[sp,#0x30]
000556  6801              LDR      r1,[r0,#0]
000558  910b              STR      r1,[sp,#0x2c]
;;;1004           if (luaV_fastget(L, rb, key, slot, luaH_getshortstr)) {
00055a  980d              LDR      r0,[sp,#0x34]
00055c  7a00              LDRB     r0,[r0,#8]
00055e  2845              CMP      r0,#0x45
000560  d004              BEQ      |L16.1388|
000562  2000              MOVS     r0,#0
000564  900e              STR      r0,[sp,#0x38]
000566  e011              B        |L16.1420|
                  |L16.1384|
                          DCD      0x0001ffff
                  |L16.1388|
00056c  980d              LDR      r0,[sp,#0x34]
00056e  6801              LDR      r1,[r0,#0]
000570  910a              STR      r1,[sp,#0x28]
000572  e9dd010a          LDRD     r0,r1,[sp,#0x28]
000576  f7fffffe          BL       luaH_getshortstr
00057a  900e              STR      r0,[sp,#0x38]
00057c  980e              LDR      r0,[sp,#0x38]
00057e  7a00              LDRB     r0,[r0,#8]
000580  f000000f          AND      r0,r0,#0xf
000584  b108              CBZ      r0,|L16.1418|
000586  2001              MOVS     r0,#1
000588  e000              B        |L16.1420|
                  |L16.1418|
00058a  2000              MOVS     r0,#0
                  |L16.1420|
00058c  b160              CBZ      r0,|L16.1448|
;;;1005             setobj2s(L, ra, slot);
00058e  9810              LDR      r0,[sp,#0x40]
000590  900a              STR      r0,[sp,#0x28]
000592  980e              LDR      r0,[sp,#0x38]
000594  9009              STR      r0,[sp,#0x24]
000596  e9dd1009          LDRD     r1,r0,[sp,#0x24]
00059a  c906              LDM      r1,{r1,r2}
00059c  c006              STM      r0!,{r1,r2}
00059e  9809              LDR      r0,[sp,#0x24]
0005a0  7a02              LDRB     r2,[r0,#8]
0005a2  980a              LDR      r0,[sp,#0x28]
0005a4  7202              STRB     r2,[r0,#8]
0005a6  e011              B        |L16.1484|
                  |L16.1448|
;;;1006           }
;;;1007           else
;;;1008             Protect(luaV_finishget(L, rb, rc, ra, slot));
0005a8  9914              LDR      r1,[sp,#0x50]
0005aa  981a              LDR      r0,[sp,#0x68]
0005ac  6101              STR      r1,[r0,#0x10]
0005ae  981a              LDR      r0,[sp,#0x68]
0005b0  6841              LDR      r1,[r0,#4]
0005b2  9819              LDR      r0,[sp,#0x64]
0005b4  60c1              STR      r1,[r0,#0xc]
0005b6  980e              LDR      r0,[sp,#0x38]
0005b8  9000              STR      r0,[sp,#0]
0005ba  9b10              LDR      r3,[sp,#0x40]
0005bc  e9dd210c          LDRD     r2,r1,[sp,#0x30]
0005c0  9819              LDR      r0,[sp,#0x64]
0005c2  f7fffffe          BL       luaV_finishget
0005c6  981a              LDR      r0,[sp,#0x68]
0005c8  6941              LDR      r1,[r0,#0x14]
0005ca  9113              STR      r1,[sp,#0x4c]
                  |L16.1484|
;;;1009           vmbreak;
0005cc  e5d1              B        |L16.370|
;;;1010         }
;;;1011         vmcase(OP_SETTABUP) {
;;;1012           const TValue *slot;
;;;1013           TValue *upval = cl->upvals[GETARG_A(i)]->v;
0005ce  9811              LDR      r0,[sp,#0x44]
0005d0  f3c010c7          UBFX     r0,r0,#7,#8
0005d4  0081              LSLS     r1,r0,#2
0005d6  9817              LDR      r0,[sp,#0x5c]
0005d8  3010              ADDS     r0,r0,#0x10
0005da  5840              LDR      r0,[r0,r1]
0005dc  6881              LDR      r1,[r0,#8]
0005de  910d              STR      r1,[sp,#0x34]
;;;1014           TValue *rb = KB(i);
0005e0  9811              LDR      r0,[sp,#0x44]
0005e2  f3c04007          UBFX     r0,r0,#16,#8
0005e6  9916              LDR      r1,[sp,#0x58]
0005e8  eb011100          ADD      r1,r1,r0,LSL #4
0005ec  910c              STR      r1,[sp,#0x30]
;;;1015           TValue *rc = RKC(i);
0005ee  9811              LDR      r0,[sp,#0x44]
0005f0  f4004000          AND      r0,r0,#0x8000
0005f4  b128              CBZ      r0,|L16.1538|
0005f6  9811              LDR      r0,[sp,#0x44]
0005f8  0e01              LSRS     r1,r0,#24
0005fa  9816              LDR      r0,[sp,#0x58]
0005fc  eb001001          ADD      r0,r0,r1,LSL #4
000600  e004              B        |L16.1548|
                  |L16.1538|
000602  9811              LDR      r0,[sp,#0x44]
000604  0e00              LSRS     r0,r0,#24
000606  9915              LDR      r1,[sp,#0x54]
000608  eb011000          ADD      r0,r1,r0,LSL #4
                  |L16.1548|
00060c  900b              STR      r0,[sp,#0x2c]
;;;1016           TString *key = tsvalue(rb);  /* key must be a string */
00060e  980c              LDR      r0,[sp,#0x30]
000610  6801              LDR      r1,[r0,#0]
000612  910a              STR      r1,[sp,#0x28]
;;;1017           if (luaV_fastget(L, upval, key, slot, luaH_getshortstr)) {
000614  980d              LDR      r0,[sp,#0x34]
000616  7a00              LDRB     r0,[r0,#8]
000618  2845              CMP      r0,#0x45
00061a  d002              BEQ      |L16.1570|
00061c  2000              MOVS     r0,#0
00061e  900e              STR      r0,[sp,#0x38]
000620  e00f              B        |L16.1602|
                  |L16.1570|
000622  980d              LDR      r0,[sp,#0x34]
000624  6801              LDR      r1,[r0,#0]
000626  9109              STR      r1,[sp,#0x24]
000628  e9dd0109          LDRD     r0,r1,[sp,#0x24]
00062c  f7fffffe          BL       luaH_getshortstr
000630  900e              STR      r0,[sp,#0x38]
000632  980e              LDR      r0,[sp,#0x38]
000634  7a00              LDRB     r0,[r0,#8]
000636  f000000f          AND      r0,r0,#0xf
00063a  b108              CBZ      r0,|L16.1600|
00063c  2001              MOVS     r0,#1
00063e  e000              B        |L16.1602|
                  |L16.1600|
000640  2000              MOVS     r0,#0
                  |L16.1602|
000642  b320              CBZ      r0,|L16.1678|
;;;1018             luaV_finishfastset(L, upval, slot, rc);
000644  980e              LDR      r0,[sp,#0x38]
000646  9009              STR      r0,[sp,#0x24]
000648  980b              LDR      r0,[sp,#0x2c]
00064a  9008              STR      r0,[sp,#0x20]
00064c  e9dd1008          LDRD     r1,r0,[sp,#0x20]
000650  c906              LDM      r1,{r1,r2}
000652  c006              STM      r0!,{r1,r2}
000654  9808              LDR      r0,[sp,#0x20]
000656  7a02              LDRB     r2,[r0,#8]
000658  9809              LDR      r0,[sp,#0x24]
00065a  7202              STRB     r2,[r0,#8]
00065c  980b              LDR      r0,[sp,#0x2c]
00065e  7a00              LDRB     r0,[r0,#8]
000660  f0000040          AND      r0,r0,#0x40
000664  b190              CBZ      r0,|L16.1676|
000666  980d              LDR      r0,[sp,#0x34]
000668  6800              LDR      r0,[r0,#0]
00066a  7940              LDRB     r0,[r0,#5]
00066c  f0000020          AND      r0,r0,#0x20
000670  b160              CBZ      r0,|L16.1676|
000672  980b              LDR      r0,[sp,#0x2c]
000674  6800              LDR      r0,[r0,#0]
000676  7940              LDRB     r0,[r0,#5]
000678  f0000018          AND      r0,r0,#0x18
00067c  b130              CBZ      r0,|L16.1676|
00067e  980d              LDR      r0,[sp,#0x34]
000680  6801              LDR      r1,[r0,#0]
000682  9109              STR      r1,[sp,#0x24]
000684  9819              LDR      r0,[sp,#0x64]
000686  f7fffffe          BL       luaC_barrierback_
00068a  e012              B        |L16.1714|
                  |L16.1676|
00068c  e011              B        |L16.1714|
                  |L16.1678|
;;;1019           }
;;;1020           else
;;;1021             Protect(luaV_finishset(L, upval, rb, rc, slot));
00068e  9914              LDR      r1,[sp,#0x50]
000690  981a              LDR      r0,[sp,#0x68]
000692  6101              STR      r1,[r0,#0x10]
000694  981a              LDR      r0,[sp,#0x68]
000696  6841              LDR      r1,[r0,#4]
000698  9819              LDR      r0,[sp,#0x64]
00069a  60c1              STR      r1,[r0,#0xc]
00069c  980e              LDR      r0,[sp,#0x38]
00069e  9000              STR      r0,[sp,#0]
0006a0  e9dd320b          LDRD     r3,r2,[sp,#0x2c]
0006a4  990d              LDR      r1,[sp,#0x34]
0006a6  9819              LDR      r0,[sp,#0x64]
0006a8  f7fffffe          BL       luaV_finishset
0006ac  981a              LDR      r0,[sp,#0x68]
0006ae  6941              LDR      r1,[r0,#0x14]
0006b0  9113              STR      r1,[sp,#0x4c]
                  |L16.1714|
;;;1022           vmbreak;
0006b2  e55e              B        |L16.370|
;;;1023         }
;;;1024         vmcase(OP_SETTABLE) {
;;;1025           const TValue *slot;
;;;1026           TValue *rb = vRB(i);  /* key (table is in 'ra') */
0006b4  9811              LDR      r0,[sp,#0x44]
0006b6  f3c04007          UBFX     r0,r0,#16,#8
0006ba  9915              LDR      r1,[sp,#0x54]
0006bc  eb011100          ADD      r1,r1,r0,LSL #4
0006c0  910d              STR      r1,[sp,#0x34]
;;;1027           TValue *rc = RKC(i);  /* value */
0006c2  9811              LDR      r0,[sp,#0x44]
0006c4  f4004000          AND      r0,r0,#0x8000
0006c8  b128              CBZ      r0,|L16.1750|
0006ca  9811              LDR      r0,[sp,#0x44]
0006cc  0e00              LSRS     r0,r0,#24
0006ce  9916              LDR      r1,[sp,#0x58]
0006d0  eb011000          ADD      r0,r1,r0,LSL #4
0006d4  e004              B        |L16.1760|
                  |L16.1750|
0006d6  9811              LDR      r0,[sp,#0x44]
0006d8  0e00              LSRS     r0,r0,#24
0006da  9915              LDR      r1,[sp,#0x54]
0006dc  eb011000          ADD      r0,r1,r0,LSL #4
                  |L16.1760|
0006e0  900c              STR      r0,[sp,#0x30]
;;;1028           lua_Unsigned n;
;;;1029           if (ttisinteger(rb)  /* fast track for integers? */
0006e2  980d              LDR      r0,[sp,#0x34]
0006e4  7a00              LDRB     r0,[r0,#8]
0006e6  2823              CMP      r0,#0x23
0006e8  d130              BNE      |L16.1868|
0006ea  990d              LDR      r1,[sp,#0x34]
0006ec  c903              LDM      r1,{r0,r1}
0006ee  e9cd010a          STRD     r0,r1,[sp,#0x28]
0006f2  980f              LDR      r0,[sp,#0x3c]
0006f4  7a00              LDRB     r0,[r0,#8]
0006f6  2845              CMP      r0,#0x45
0006f8  d002              BEQ      |L16.1792|
0006fa  2000              MOVS     r0,#0
0006fc  900e              STR      r0,[sp,#0x38]
;;;1030               ? (n = ivalue(rb), luaV_fastgeti(L, vra, n, slot))
0006fe  e03c              B        |L16.1914|
                  |L16.1792|
000700  e9dd100a          LDRD     r1,r0,[sp,#0x28]
000704  1e4b              SUBS     r3,r1,#1
000706  f1600100          SBC      r1,r0,#0
00070a  980f              LDR      r0,[sp,#0x3c]
00070c  6800              LDR      r0,[r0,#0]
00070e  6880              LDR      r0,[r0,#8]
000710  1a18              SUBS     r0,r3,r0
000712  f1710100          SBCS     r1,r1,#0
000716  d207              BCS      |L16.1832|
000718  980f              LDR      r0,[sp,#0x3c]
00071a  6800              LDR      r0,[r0,#0]
00071c  68c2              LDR      r2,[r0,#0xc]
00071e  980a              LDR      r0,[sp,#0x28]
000720  1e40              SUBS     r0,r0,#1
000722  eb021000          ADD      r0,r2,r0,LSL #4
000726  e007              B        |L16.1848|
                  |L16.1832|
000728  980f              LDR      r0,[sp,#0x3c]
00072a  6801              LDR      r1,[r0,#0]
00072c  9109              STR      r1,[sp,#0x24]
00072e  4608              MOV      r0,r1
000730  e9dd230a          LDRD     r2,r3,[sp,#0x28]
000734  f7fffffe          BL       luaH_getint
                  |L16.1848|
000738  900e              STR      r0,[sp,#0x38]
00073a  980e              LDR      r0,[sp,#0x38]
00073c  7a00              LDRB     r0,[r0,#8]
00073e  f000000f          AND      r0,r0,#0xf
000742  b108              CBZ      r0,|L16.1864|
000744  2001              MOVS     r0,#1
000746  e018              B        |L16.1914|
                  |L16.1864|
000748  2000              MOVS     r0,#0
00074a  e016              B        |L16.1914|
                  |L16.1868|
00074c  980f              LDR      r0,[sp,#0x3c]
00074e  7a00              LDRB     r0,[r0,#8]
000750  2845              CMP      r0,#0x45
000752  d002              BEQ      |L16.1882|
000754  2000              MOVS     r0,#0
000756  900e              STR      r0,[sp,#0x38]
;;;1031               : luaV_fastget(L, vra, rb, slot, luaH_get)) {
000758  e00f              B        |L16.1914|
                  |L16.1882|
00075a  980f              LDR      r0,[sp,#0x3c]
00075c  6801              LDR      r1,[r0,#0]
00075e  9109              STR      r1,[sp,#0x24]
000760  990d              LDR      r1,[sp,#0x34]
000762  9809              LDR      r0,[sp,#0x24]
000764  f7fffffe          BL       luaH_get
000768  900e              STR      r0,[sp,#0x38]
00076a  980e              LDR      r0,[sp,#0x38]
00076c  7a00              LDRB     r0,[r0,#8]
00076e  f000000f          AND      r0,r0,#0xf
000772  b108              CBZ      r0,|L16.1912|
000774  2001              MOVS     r0,#1
000776  e000              B        |L16.1914|
                  |L16.1912|
000778  2000              MOVS     r0,#0
                  |L16.1914|
00077a  b320              CBZ      r0,|L16.1990|
;;;1032             luaV_finishfastset(L, vra, slot, rc);
00077c  980e              LDR      r0,[sp,#0x38]
00077e  9009              STR      r0,[sp,#0x24]
000780  980c              LDR      r0,[sp,#0x30]
000782  9008              STR      r0,[sp,#0x20]
000784  e9dd1008          LDRD     r1,r0,[sp,#0x20]
000788  c906              LDM      r1,{r1,r2}
00078a  c006              STM      r0!,{r1,r2}
00078c  9808              LDR      r0,[sp,#0x20]
00078e  7a02              LDRB     r2,[r0,#8]
000790  9809              LDR      r0,[sp,#0x24]
000792  7202              STRB     r2,[r0,#8]
000794  980c              LDR      r0,[sp,#0x30]
000796  7a00              LDRB     r0,[r0,#8]
000798  f0000040          AND      r0,r0,#0x40
00079c  b190              CBZ      r0,|L16.1988|
00079e  980f              LDR      r0,[sp,#0x3c]
0007a0  6800              LDR      r0,[r0,#0]
0007a2  7940              LDRB     r0,[r0,#5]
0007a4  f0000020          AND      r0,r0,#0x20
0007a8  b160              CBZ      r0,|L16.1988|
0007aa  980c              LDR      r0,[sp,#0x30]
0007ac  6800              LDR      r0,[r0,#0]
0007ae  7940              LDRB     r0,[r0,#5]
0007b0  f0000018          AND      r0,r0,#0x18
0007b4  b130              CBZ      r0,|L16.1988|
0007b6  980f              LDR      r0,[sp,#0x3c]
0007b8  6801              LDR      r1,[r0,#0]
0007ba  9109              STR      r1,[sp,#0x24]
0007bc  9819              LDR      r0,[sp,#0x64]
0007be  f7fffffe          BL       luaC_barrierback_
0007c2  e012              B        |L16.2026|
                  |L16.1988|
0007c4  e011              B        |L16.2026|
                  |L16.1990|
;;;1033           }
;;;1034           else
;;;1035             Protect(luaV_finishset(L, vra, rb, rc, slot));
0007c6  9914              LDR      r1,[sp,#0x50]
0007c8  981a              LDR      r0,[sp,#0x68]
0007ca  6101              STR      r1,[r0,#0x10]
0007cc  981a              LDR      r0,[sp,#0x68]
0007ce  6841              LDR      r1,[r0,#4]
0007d0  9819              LDR      r0,[sp,#0x64]
0007d2  60c1              STR      r1,[r0,#0xc]
0007d4  980e              LDR      r0,[sp,#0x38]
0007d6  9000              STR      r0,[sp,#0]
0007d8  e9dd320c          LDRD     r3,r2,[sp,#0x30]
0007dc  990f              LDR      r1,[sp,#0x3c]
0007de  9819              LDR      r0,[sp,#0x64]
0007e0  f7fffffe          BL       luaV_finishset
0007e4  981a              LDR      r0,[sp,#0x68]
0007e6  6941              LDR      r1,[r0,#0x14]
0007e8  9113              STR      r1,[sp,#0x4c]
                  |L16.2026|
;;;1036           vmbreak;
0007ea  e4c2              B        |L16.370|
;;;1037         }
;;;1038         vmcase(OP_SETI) {
;;;1039           const TValue *slot;
;;;1040           int c = GETARG_B(i);
0007ec  9811              LDR      r0,[sp,#0x44]
0007ee  f3c04107          UBFX     r1,r0,#16,#8
0007f2  910d              STR      r1,[sp,#0x34]
;;;1041           TValue *rc = RKC(i);
0007f4  9811              LDR      r0,[sp,#0x44]
0007f6  f4004000          AND      r0,r0,#0x8000
0007fa  b128              CBZ      r0,|L16.2056|
0007fc  9811              LDR      r0,[sp,#0x44]
0007fe  0e00              LSRS     r0,r0,#24
000800  9916              LDR      r1,[sp,#0x58]
000802  eb011000          ADD      r0,r1,r0,LSL #4
000806  e004              B        |L16.2066|
                  |L16.2056|
000808  9811              LDR      r0,[sp,#0x44]
00080a  0e00              LSRS     r0,r0,#24
00080c  9915              LDR      r1,[sp,#0x54]
00080e  eb011000          ADD      r0,r1,r0,LSL #4
                  |L16.2066|
000812  900c              STR      r0,[sp,#0x30]
;;;1042           if (luaV_fastgeti(L, vra, c, slot)) {
000814  980f              LDR      r0,[sp,#0x3c]
000816  7a00              LDRB     r0,[r0,#8]
000818  2845              CMP      r0,#0x45
00081a  d002              BEQ      |L16.2082|
00081c  2000              MOVS     r0,#0
00081e  900e              STR      r0,[sp,#0x38]
000820  e024              B        |L16.2156|
                  |L16.2082|
000822  980d              LDR      r0,[sp,#0x34]
000824  17c1              ASRS     r1,r0,#31
000826  1e43              SUBS     r3,r0,#1
000828  f1610100          SBC      r1,r1,#0
00082c  980f              LDR      r0,[sp,#0x3c]
00082e  6800              LDR      r0,[r0,#0]
000830  6880              LDR      r0,[r0,#8]
000832  1a18              SUBS     r0,r3,r0
000834  f1710100          SBCS     r1,r1,#0
000838  d207              BCS      |L16.2122|
00083a  980f              LDR      r0,[sp,#0x3c]
00083c  6800              LDR      r0,[r0,#0]
00083e  68c1              LDR      r1,[r0,#0xc]
000840  980d              LDR      r0,[sp,#0x34]
000842  1e40              SUBS     r0,r0,#1
000844  eb011000          ADD      r0,r1,r0,LSL #4
000848  e007              B        |L16.2138|
                  |L16.2122|
00084a  980f              LDR      r0,[sp,#0x3c]
00084c  6801              LDR      r1,[r0,#0]
00084e  910b              STR      r1,[sp,#0x2c]
000850  9a0d              LDR      r2,[sp,#0x34]
000852  17d3              ASRS     r3,r2,#31
000854  4608              MOV      r0,r1
000856  f7fffffe          BL       luaH_getint
                  |L16.2138|
00085a  900e              STR      r0,[sp,#0x38]
00085c  980e              LDR      r0,[sp,#0x38]
00085e  7a00              LDRB     r0,[r0,#8]
000860  f000000f          AND      r0,r0,#0xf
000864  b108              CBZ      r0,|L16.2154|
000866  2001              MOVS     r0,#1
000868  e000              B        |L16.2156|
                  |L16.2154|
00086a  2000              MOVS     r0,#0
                  |L16.2156|
00086c  b320              CBZ      r0,|L16.2232|
;;;1043             luaV_finishfastset(L, vra, slot, rc);
00086e  980e              LDR      r0,[sp,#0x38]
000870  900b              STR      r0,[sp,#0x2c]
000872  980c              LDR      r0,[sp,#0x30]
000874  900a              STR      r0,[sp,#0x28]
000876  e9dd100a          LDRD     r1,r0,[sp,#0x28]
00087a  c906              LDM      r1,{r1,r2}
00087c  c006              STM      r0!,{r1,r2}
00087e  980a              LDR      r0,[sp,#0x28]
000880  7a02              LDRB     r2,[r0,#8]
000882  980b              LDR      r0,[sp,#0x2c]
000884  7202              STRB     r2,[r0,#8]
000886  980c              LDR      r0,[sp,#0x30]
000888  7a00              LDRB     r0,[r0,#8]
00088a  f0000040          AND      r0,r0,#0x40
00088e  b190              CBZ      r0,|L16.2230|
000890  980f              LDR      r0,[sp,#0x3c]
000892  6800              LDR      r0,[r0,#0]
000894  7940              LDRB     r0,[r0,#5]
000896  f0000020          AND      r0,r0,#0x20
00089a  b160              CBZ      r0,|L16.2230|
00089c  980c              LDR      r0,[sp,#0x30]
00089e  6800              LDR      r0,[r0,#0]
0008a0  7940              LDRB     r0,[r0,#5]
0008a2  f0000018          AND      r0,r0,#0x18
0008a6  b130              CBZ      r0,|L16.2230|
0008a8  980f              LDR      r0,[sp,#0x3c]
0008aa  6801              LDR      r1,[r0,#0]
0008ac  910b              STR      r1,[sp,#0x2c]
0008ae  9819              LDR      r0,[sp,#0x64]
0008b0  f7fffffe          BL       luaC_barrierback_
0008b4  e01c              B        |L16.2288|
                  |L16.2230|
0008b6  e01b              B        |L16.2288|
                  |L16.2232|
;;;1044           }
;;;1045           else {
;;;1046             TValue key;
;;;1047             setivalue(&key, c);
0008b8  a808              ADD      r0,sp,#0x20
0008ba  9007              STR      r0,[sp,#0x1c]
0008bc  980d              LDR      r0,[sp,#0x34]
0008be  17c2              ASRS     r2,r0,#31
0008c0  9907              LDR      r1,[sp,#0x1c]
0008c2  c105              STM      r1!,{r0,r2}
0008c4  2223              MOVS     r2,#0x23
0008c6  9807              LDR      r0,[sp,#0x1c]
0008c8  7202              STRB     r2,[r0,#8]
;;;1048             Protect(luaV_finishset(L, vra, &key, rc, slot));
0008ca  9914              LDR      r1,[sp,#0x50]
0008cc  981a              LDR      r0,[sp,#0x68]
0008ce  6101              STR      r1,[r0,#0x10]
0008d0  981a              LDR      r0,[sp,#0x68]
0008d2  6841              LDR      r1,[r0,#4]
0008d4  9819              LDR      r0,[sp,#0x64]
0008d6  60c1              STR      r1,[r0,#0xc]
0008d8  980e              LDR      r0,[sp,#0x38]
0008da  9000              STR      r0,[sp,#0]
0008dc  aa08              ADD      r2,sp,#0x20
0008de  9b0c              LDR      r3,[sp,#0x30]
0008e0  990f              LDR      r1,[sp,#0x3c]
0008e2  9819              LDR      r0,[sp,#0x64]
0008e4  f7fffffe          BL       luaV_finishset
0008e8  981a              LDR      r0,[sp,#0x68]
0008ea  6941              LDR      r1,[r0,#0x14]
0008ec  9113              STR      r1,[sp,#0x4c]
;;;1049           }
0008ee  bf00              NOP      
                  |L16.2288|
;;;1050           vmbreak;
0008f0  e43f              B        |L16.370|
;;;1051         }
;;;1052         vmcase(OP_SETFIELD) {
;;;1053           const TValue *slot;
;;;1054           TValue *rb = KB(i);
0008f2  9811              LDR      r0,[sp,#0x44]
0008f4  f3c04007          UBFX     r0,r0,#16,#8
0008f8  9916              LDR      r1,[sp,#0x58]
0008fa  eb011100          ADD      r1,r1,r0,LSL #4
0008fe  910d              STR      r1,[sp,#0x34]
;;;1055           TValue *rc = RKC(i);
000900  9811              LDR      r0,[sp,#0x44]
000902  f4004000          AND      r0,r0,#0x8000
000906  b128              CBZ      r0,|L16.2324|
000908  9811              LDR      r0,[sp,#0x44]
00090a  0e01              LSRS     r1,r0,#24
00090c  9816              LDR      r0,[sp,#0x58]
00090e  eb001001          ADD      r0,r0,r1,LSL #4
000912  e004              B        |L16.2334|
                  |L16.2324|
000914  9811              LDR      r0,[sp,#0x44]
000916  0e00              LSRS     r0,r0,#24
000918  9915              LDR      r1,[sp,#0x54]
00091a  eb011000          ADD      r0,r1,r0,LSL #4
                  |L16.2334|
00091e  900c              STR      r0,[sp,#0x30]
;;;1056           TString *key = tsvalue(rb);  /* key must be a string */
000920  980d              LDR      r0,[sp,#0x34]
000922  6801              LDR      r1,[r0,#0]
000924  910b              STR      r1,[sp,#0x2c]
;;;1057           if (luaV_fastget(L, vra, key, slot, luaH_getshortstr)) {
000926  980f              LDR      r0,[sp,#0x3c]
000928  7a00              LDRB     r0,[r0,#8]
00092a  2845              CMP      r0,#0x45
00092c  d002              BEQ      |L16.2356|
00092e  2000              MOVS     r0,#0
000930  900e              STR      r0,[sp,#0x38]
000932  e00f              B        |L16.2388|
                  |L16.2356|
000934  980f              LDR      r0,[sp,#0x3c]
000936  6801              LDR      r1,[r0,#0]
000938  910a              STR      r1,[sp,#0x28]
00093a  e9dd010a          LDRD     r0,r1,[sp,#0x28]
00093e  f7fffffe          BL       luaH_getshortstr
000942  900e              STR      r0,[sp,#0x38]
000944  980e              LDR      r0,[sp,#0x38]
000946  7a00              LDRB     r0,[r0,#8]
000948  f000000f          AND      r0,r0,#0xf
00094c  b108              CBZ      r0,|L16.2386|
00094e  2001              MOVS     r0,#1
000950  e000              B        |L16.2388|
                  |L16.2386|
000952  2000              MOVS     r0,#0
                  |L16.2388|
000954  b320              CBZ      r0,|L16.2464|
;;;1058             luaV_finishfastset(L, vra, slot, rc);
000956  980e              LDR      r0,[sp,#0x38]
000958  900a              STR      r0,[sp,#0x28]
00095a  980c              LDR      r0,[sp,#0x30]
00095c  9009              STR      r0,[sp,#0x24]
00095e  e9dd1009          LDRD     r1,r0,[sp,#0x24]
000962  c906              LDM      r1,{r1,r2}
000964  c006              STM      r0!,{r1,r2}
000966  9809              LDR      r0,[sp,#0x24]
000968  7a02              LDRB     r2,[r0,#8]
00096a  980a              LDR      r0,[sp,#0x28]
00096c  7202              STRB     r2,[r0,#8]
00096e  980c              LDR      r0,[sp,#0x30]
000970  7a00              LDRB     r0,[r0,#8]
000972  f0000040          AND      r0,r0,#0x40
000976  b190              CBZ      r0,|L16.2462|
000978  980f              LDR      r0,[sp,#0x3c]
00097a  6800              LDR      r0,[r0,#0]
00097c  7940              LDRB     r0,[r0,#5]
00097e  f0000020          AND      r0,r0,#0x20
000982  b160              CBZ      r0,|L16.2462|
000984  980c              LDR      r0,[sp,#0x30]
000986  6800              LDR      r0,[r0,#0]
000988  7940              LDRB     r0,[r0,#5]
00098a  f0000018          AND      r0,r0,#0x18
00098e  b130              CBZ      r0,|L16.2462|
000990  980f              LDR      r0,[sp,#0x3c]
000992  6801              LDR      r1,[r0,#0]
000994  910a              STR      r1,[sp,#0x28]
000996  9819              LDR      r0,[sp,#0x64]
000998  f7fffffe          BL       luaC_barrierback_
00099c  e012              B        |L16.2500|
                  |L16.2462|
00099e  e011              B        |L16.2500|
                  |L16.2464|
;;;1059           }
;;;1060           else
;;;1061             Protect(luaV_finishset(L, vra, rb, rc, slot));
0009a0  9914              LDR      r1,[sp,#0x50]
0009a2  981a              LDR      r0,[sp,#0x68]
0009a4  6101              STR      r1,[r0,#0x10]
0009a6  981a              LDR      r0,[sp,#0x68]
0009a8  6841              LDR      r1,[r0,#4]
0009aa  9819              LDR      r0,[sp,#0x64]
0009ac  60c1              STR      r1,[r0,#0xc]
0009ae  980e              LDR      r0,[sp,#0x38]
0009b0  9000              STR      r0,[sp,#0]
0009b2  e9dd320c          LDRD     r3,r2,[sp,#0x30]
0009b6  990f              LDR      r1,[sp,#0x3c]
0009b8  9819              LDR      r0,[sp,#0x64]
0009ba  f7fffffe          BL       luaV_finishset
0009be  981a              LDR      r0,[sp,#0x68]
0009c0  6941              LDR      r1,[r0,#0x14]
0009c2  9113              STR      r1,[sp,#0x4c]
                  |L16.2500|
;;;1062           vmbreak;
0009c4  e411              B        |L16.490|
;;;1063         }
;;;1064         vmcase(OP_NEWTABLE) {
;;;1065           int b = GETARG_B(i);
0009c6  9811              LDR      r0,[sp,#0x44]
0009c8  f3c04107          UBFX     r1,r0,#16,#8
0009cc  910e              STR      r1,[sp,#0x38]
;;;1066           int c = GETARG_C(i);
0009ce  9811              LDR      r0,[sp,#0x44]
0009d0  0e00              LSRS     r0,r0,#24
0009d2  900d              STR      r0,[sp,#0x34]
;;;1067           Table *t;
;;;1068           L->top = ci->top;  /* correct top in case of GC */
0009d4  981a              LDR      r0,[sp,#0x68]
0009d6  6842              LDR      r2,[r0,#4]
0009d8  9819              LDR      r0,[sp,#0x64]
0009da  60c2              STR      r2,[r0,#0xc]
;;;1069           t = luaH_new(L);  /* memory allocation */
0009dc  9819              LDR      r0,[sp,#0x64]
0009de  f7fffffe          BL       luaH_new
0009e2  900c              STR      r0,[sp,#0x30]
;;;1070           sethvalue2s(L, ra, t);
0009e4  9810              LDR      r0,[sp,#0x40]
0009e6  900b              STR      r0,[sp,#0x2c]
0009e8  980c              LDR      r0,[sp,#0x30]
0009ea  900a              STR      r0,[sp,#0x28]
0009ec  e9dd010a          LDRD     r0,r1,[sp,#0x28]
0009f0  6008              STR      r0,[r1,#0]
0009f2  2245              MOVS     r2,#0x45
0009f4  980b              LDR      r0,[sp,#0x2c]
0009f6  7202              STRB     r2,[r0,#8]
;;;1071           if (b != 0 || c != 0)
0009f8  980e              LDR      r0,[sp,#0x38]
0009fa  b908              CBNZ     r0,|L16.2560|
0009fc  980d              LDR      r0,[sp,#0x34]
0009fe  b168              CBZ      r0,|L16.2588|
                  |L16.2560|
;;;1072             luaH_resize(L, t, luaO_fb2int(b), luaO_fb2int(c));  /* idem */
000a00  980d              LDR      r0,[sp,#0x34]
000a02  f7fffffe          BL       luaO_fb2int
000a06  900b              STR      r0,[sp,#0x2c]
000a08  980e              LDR      r0,[sp,#0x38]
000a0a  f7fffffe          BL       luaO_fb2int
000a0e  900a              STR      r0,[sp,#0x28]
000a10  4602              MOV      r2,r0
000a12  e9dd310b          LDRD     r3,r1,[sp,#0x2c]
000a16  9819              LDR      r0,[sp,#0x64]
000a18  f7fffffe          BL       luaH_resize
                  |L16.2588|
;;;1073           checkGC(L, ra + 1);
000a1c  9819              LDR      r0,[sp,#0x64]
000a1e  6900              LDR      r0,[r0,#0x10]
000a20  68c0              LDR      r0,[r0,#0xc]
000a22  2800              CMP      r0,#0
000a24  dd0a              BLE      |L16.2620|
000a26  9810              LDR      r0,[sp,#0x40]
000a28  f1000110          ADD      r1,r0,#0x10
000a2c  9819              LDR      r0,[sp,#0x64]
000a2e  60c1              STR      r1,[r0,#0xc]
000a30  9819              LDR      r0,[sp,#0x64]
000a32  f7fffffe          BL       luaC_step
000a36  981a              LDR      r0,[sp,#0x68]
000a38  6941              LDR      r1,[r0,#0x14]
000a3a  9113              STR      r1,[sp,#0x4c]
                  |L16.2620|
;;;1074           vmbreak;
000a3c  e411              B        |L16.610|
;;;1075         }
;;;1076         vmcase(OP_SELF) {
;;;1077           const TValue *slot;
;;;1078           TValue *rb = vRB(i);
000a3e  9811              LDR      r0,[sp,#0x44]
000a40  f3c04007          UBFX     r0,r0,#16,#8
000a44  9915              LDR      r1,[sp,#0x54]
000a46  eb011100          ADD      r1,r1,r0,LSL #4
000a4a  910d              STR      r1,[sp,#0x34]
;;;1079           TValue *rc = RKC(i);
000a4c  9811              LDR      r0,[sp,#0x44]
000a4e  f4004000          AND      r0,r0,#0x8000
000a52  b128              CBZ      r0,|L16.2656|
000a54  9811              LDR      r0,[sp,#0x44]
000a56  0e00              LSRS     r0,r0,#24
000a58  9916              LDR      r1,[sp,#0x58]
000a5a  eb011000          ADD      r0,r1,r0,LSL #4
000a5e  e004              B        |L16.2666|
                  |L16.2656|
000a60  9811              LDR      r0,[sp,#0x44]
000a62  0e00              LSRS     r0,r0,#24
000a64  9915              LDR      r1,[sp,#0x54]
000a66  eb011000          ADD      r0,r1,r0,LSL #4
                  |L16.2666|
000a6a  900c              STR      r0,[sp,#0x30]
;;;1080           TString *key = tsvalue(rc);  /* key must be a string */
000a6c  980c              LDR      r0,[sp,#0x30]
000a6e  6801              LDR      r1,[r0,#0]
000a70  910b              STR      r1,[sp,#0x2c]
;;;1081           setobj2s(L, ra + 1, rb);
000a72  9810              LDR      r0,[sp,#0x40]
000a74  3010              ADDS     r0,r0,#0x10
000a76  900a              STR      r0,[sp,#0x28]
000a78  980d              LDR      r0,[sp,#0x34]
000a7a  9009              STR      r0,[sp,#0x24]
000a7c  e9dd0209          LDRD     r0,r2,[sp,#0x24]
000a80  c803              LDM      r0,{r0,r1}
000a82  c203              STM      r2!,{r0,r1}
000a84  9809              LDR      r0,[sp,#0x24]
000a86  7a02              LDRB     r2,[r0,#8]
000a88  980a              LDR      r0,[sp,#0x28]
000a8a  7202              STRB     r2,[r0,#8]
;;;1082           if (luaV_fastget(L, rb, key, slot, luaH_getstr)) {
000a8c  980d              LDR      r0,[sp,#0x34]
000a8e  7a00              LDRB     r0,[r0,#8]
000a90  2845              CMP      r0,#0x45
000a92  d002              BEQ      |L16.2714|
000a94  2000              MOVS     r0,#0
000a96  900e              STR      r0,[sp,#0x38]
000a98  e00f              B        |L16.2746|
                  |L16.2714|
000a9a  980d              LDR      r0,[sp,#0x34]
000a9c  6801              LDR      r1,[r0,#0]
000a9e  910a              STR      r1,[sp,#0x28]
000aa0  e9dd010a          LDRD     r0,r1,[sp,#0x28]
000aa4  f7fffffe          BL       luaH_getstr
000aa8  900e              STR      r0,[sp,#0x38]
000aaa  980e              LDR      r0,[sp,#0x38]
000aac  7a00              LDRB     r0,[r0,#8]
000aae  f000000f          AND      r0,r0,#0xf
000ab2  b108              CBZ      r0,|L16.2744|
000ab4  2001              MOVS     r0,#1
000ab6  e000              B        |L16.2746|
                  |L16.2744|
000ab8  2000              MOVS     r0,#0
                  |L16.2746|
000aba  b160              CBZ      r0,|L16.2774|
;;;1083             setobj2s(L, ra, slot);
000abc  9810              LDR      r0,[sp,#0x40]
000abe  900a              STR      r0,[sp,#0x28]
000ac0  980e              LDR      r0,[sp,#0x38]
000ac2  9009              STR      r0,[sp,#0x24]
000ac4  e9dd1009          LDRD     r1,r0,[sp,#0x24]
000ac8  c906              LDM      r1,{r1,r2}
000aca  c006              STM      r0!,{r1,r2}
000acc  9809              LDR      r0,[sp,#0x24]
000ace  7a02              LDRB     r2,[r0,#8]
000ad0  980a              LDR      r0,[sp,#0x28]
000ad2  7202              STRB     r2,[r0,#8]
000ad4  e011              B        |L16.2810|
                  |L16.2774|
;;;1084           }
;;;1085           else
;;;1086             Protect(luaV_finishget(L, rb, rc, ra, slot));
000ad6  9914              LDR      r1,[sp,#0x50]
000ad8  981a              LDR      r0,[sp,#0x68]
000ada  6101              STR      r1,[r0,#0x10]
000adc  981a              LDR      r0,[sp,#0x68]
000ade  6841              LDR      r1,[r0,#4]
000ae0  9819              LDR      r0,[sp,#0x64]
000ae2  60c1              STR      r1,[r0,#0xc]
000ae4  980e              LDR      r0,[sp,#0x38]
000ae6  9000              STR      r0,[sp,#0]
000ae8  9b10              LDR      r3,[sp,#0x40]
000aea  e9dd210c          LDRD     r2,r1,[sp,#0x30]
000aee  9819              LDR      r0,[sp,#0x64]
000af0  f7fffffe          BL       luaV_finishget
000af4  981a              LDR      r0,[sp,#0x68]
000af6  6941              LDR      r1,[r0,#0x14]
000af8  9113              STR      r1,[sp,#0x4c]
                  |L16.2810|
;;;1087           vmbreak;
000afa  e442              B        |L16.898|
;;;1088         }
;;;1089         vmcase(OP_ADDI) {
;;;1090           TValue *rb = vRB(i);
000afc  9811              LDR      r0,[sp,#0x44]
000afe  f3c04007          UBFX     r0,r0,#16,#8
000b02  9915              LDR      r1,[sp,#0x54]
000b04  eb011100          ADD      r1,r1,r0,LSL #4
000b08  910e              STR      r1,[sp,#0x38]
;;;1091           int ic = GETARG_sC(i);
000b0a  9811              LDR      r0,[sp,#0x44]
000b0c  0e00              LSRS     r0,r0,#24
000b0e  387f              SUBS     r0,r0,#0x7f
000b10  900d              STR      r0,[sp,#0x34]
;;;1092           lua_Number nb;
;;;1093           if (ttisinteger(rb)) {
000b12  980e              LDR      r0,[sp,#0x38]
000b14  7a00              LDRB     r0,[r0,#8]
000b16  2823              CMP      r0,#0x23
000b18  d110              BNE      |L16.2876|
;;;1094             setivalue(vra, intop(+, ivalue(rb), ic));
000b1a  980f              LDR      r0,[sp,#0x3c]
000b1c  9009              STR      r0,[sp,#0x24]
000b1e  980e              LDR      r0,[sp,#0x38]
000b20  e9d03100          LDRD     r3,r1,[r0,#0]
000b24  980d              LDR      r0,[sp,#0x34]
000b26  181a              ADDS     r2,r3,r0
000b28  eb4171e0          ADC      r1,r1,r0,ASR #31
000b2c  9809              LDR      r0,[sp,#0x24]
000b2e  e9c02100          STRD     r2,r1,[r0,#0]
000b32  f04f0123          MOV      r1,#0x23
000b36  9809              LDR      r0,[sp,#0x24]
000b38  7201              STRB     r1,[r0,#8]
000b3a  e040              B        |L16.3006|
                  |L16.2876|
;;;1095           }
;;;1096           else if (tonumberns(rb, nb)) {
000b3c  980e              LDR      r0,[sp,#0x38]
000b3e  7a00              LDRB     r0,[r0,#8]
000b40  2813              CMP      r0,#0x13
000b42  d105              BNE      |L16.2896|
000b44  990e              LDR      r1,[sp,#0x38]
000b46  c903              LDM      r1,{r0,r1}
000b48  e9cd010a          STRD     r0,r1,[sp,#0x28]
000b4c  2001              MOVS     r0,#1
000b4e  e00e              B        |L16.2926|
                  |L16.2896|
000b50  980e              LDR      r0,[sp,#0x38]
000b52  7a00              LDRB     r0,[r0,#8]
000b54  2823              CMP      r0,#0x23
000b56  d109              BNE      |L16.2924|
000b58  990e              LDR      r1,[sp,#0x38]
000b5a  c903              LDM      r1,{r0,r1}
000b5c  e9cd0108          STRD     r0,r1,[sp,#0x20]
000b60  f7fffffe          BL       __aeabi_l2d
000b64  e9cd010a          STRD     r0,r1,[sp,#0x28]
000b68  2001              MOVS     r0,#1
000b6a  e000              B        |L16.2926|
                  |L16.2924|
000b6c  2000              MOVS     r0,#0
                  |L16.2926|
000b6e  b180              CBZ      r0,|L16.2962|
;;;1097             setfltvalue(vra, luai_numadd(L, nb, cast_num(ic)));
000b70  980f              LDR      r0,[sp,#0x3c]
000b72  9009              STR      r0,[sp,#0x24]
000b74  980d              LDR      r0,[sp,#0x34]
000b76  f7fffffe          BL       __aeabi_i2d
000b7a  e9cd0106          STRD     r0,r1,[sp,#0x18]
000b7e  e9dd230a          LDRD     r2,r3,[sp,#0x28]
000b82  f7fffffe          BL       __aeabi_dadd
000b86  9a09              LDR      r2,[sp,#0x24]
000b88  c203              STM      r2!,{r0,r1}
000b8a  2113              MOVS     r1,#0x13
000b8c  9809              LDR      r0,[sp,#0x24]
000b8e  7201              STRB     r1,[r0,#8]
000b90  e015              B        |L16.3006|
                  |L16.2962|
;;;1098           }
;;;1099           else
;;;1100             Protect(luaT_trybiniTM(L, rb, ic, GETARG_k(i), ra, TM_ADD));
000b92  9914              LDR      r1,[sp,#0x50]
000b94  981a              LDR      r0,[sp,#0x68]
000b96  6101              STR      r1,[r0,#0x10]
000b98  981a              LDR      r0,[sp,#0x68]
000b9a  6841              LDR      r1,[r0,#4]
000b9c  9819              LDR      r0,[sp,#0x64]
000b9e  60c1              STR      r1,[r0,#0xc]
000ba0  2108              MOVS     r1,#8
000ba2  9810              LDR      r0,[sp,#0x40]
000ba4  e9cd0100          STRD     r0,r1,[sp,#0]
000ba8  9811              LDR      r0,[sp,#0x44]
000baa  f3c033c0          UBFX     r3,r0,#15,#1
000bae  e9dd210d          LDRD     r2,r1,[sp,#0x34]
000bb2  9819              LDR      r0,[sp,#0x64]
000bb4  f7fffffe          BL       luaT_trybiniTM
000bb8  981a              LDR      r0,[sp,#0x68]
000bba  6941              LDR      r1,[r0,#0x14]
000bbc  9113              STR      r1,[sp,#0x4c]
                  |L16.3006|
;;;1101           vmbreak;
000bbe  e45a              B        |L16.1142|
;;;1102         }
;;;1103         vmcase(OP_SUBI) {
;;;1104           TValue *rb = vRB(i);
000bc0  9811              LDR      r0,[sp,#0x44]
000bc2  f3c04007          UBFX     r0,r0,#16,#8
000bc6  9915              LDR      r1,[sp,#0x54]
000bc8  eb011100          ADD      r1,r1,r0,LSL #4
000bcc  910e              STR      r1,[sp,#0x38]
;;;1105           int ic = GETARG_sC(i);
000bce  9811              LDR      r0,[sp,#0x44]
000bd0  0e00              LSRS     r0,r0,#24
000bd2  387f              SUBS     r0,r0,#0x7f
000bd4  900d              STR      r0,[sp,#0x34]
;;;1106           lua_Number nb;
;;;1107           if (ttisinteger(rb)) {
000bd6  980e              LDR      r0,[sp,#0x38]
000bd8  7a00              LDRB     r0,[r0,#8]
000bda  2823              CMP      r0,#0x23
000bdc  d110              BNE      |L16.3072|
;;;1108             setivalue(vra, intop(-, ivalue(rb), ic));
000bde  980f              LDR      r0,[sp,#0x3c]
000be0  9009              STR      r0,[sp,#0x24]
000be2  980e              LDR      r0,[sp,#0x38]
000be4  e9d03100          LDRD     r3,r1,[r0,#0]
000be8  980d              LDR      r0,[sp,#0x34]
000bea  1a1a              SUBS     r2,r3,r0
000bec  eb6171e0          SBC      r1,r1,r0,ASR #31
000bf0  9809              LDR      r0,[sp,#0x24]
000bf2  e9c02100          STRD     r2,r1,[r0,#0]
000bf6  f04f0123          MOV      r1,#0x23
000bfa  9809              LDR      r0,[sp,#0x24]
000bfc  7201              STRB     r1,[r0,#8]
000bfe  e03e              B        |L16.3198|
                  |L16.3072|
;;;1109           }
;;;1110           else if (tonumberns(rb, nb)) {
000c00  980e              LDR      r0,[sp,#0x38]
000c02  7a00              LDRB     r0,[r0,#8]
000c04  2813              CMP      r0,#0x13
000c06  d105              BNE      |L16.3092|
000c08  990e              LDR      r1,[sp,#0x38]
000c0a  c903              LDM      r1,{r0,r1}
000c0c  e9cd010a          STRD     r0,r1,[sp,#0x28]
000c10  2001              MOVS     r0,#1
000c12  e00e              B        |L16.3122|
                  |L16.3092|
000c14  980e              LDR      r0,[sp,#0x38]
000c16  7a00              LDRB     r0,[r0,#8]
000c18  2823              CMP      r0,#0x23
000c1a  d109              BNE      |L16.3120|
000c1c  980e              LDR      r0,[sp,#0x38]
000c1e  c803              LDM      r0,{r0,r1}
000c20  e9cd0108          STRD     r0,r1,[sp,#0x20]
000c24  f7fffffe          BL       __aeabi_l2d
000c28  e9cd010a          STRD     r0,r1,[sp,#0x28]
000c2c  2001              MOVS     r0,#1
000c2e  e000              B        |L16.3122|
                  |L16.3120|
000c30  2000              MOVS     r0,#0
                  |L16.3122|
000c32  b180              CBZ      r0,|L16.3158|
;;;1111             setfltvalue(vra, luai_numsub(L, nb, cast_num(ic)));
000c34  980f              LDR      r0,[sp,#0x3c]
000c36  9009              STR      r0,[sp,#0x24]
000c38  980d              LDR      r0,[sp,#0x34]
000c3a  f7fffffe          BL       __aeabi_i2d
000c3e  e9cd0106          STRD     r0,r1,[sp,#0x18]
000c42  e9dd230a          LDRD     r2,r3,[sp,#0x28]
000c46  f7fffffe          BL       __aeabi_drsub
000c4a  9a09              LDR      r2,[sp,#0x24]
000c4c  c203              STM      r2!,{r0,r1}
000c4e  2113              MOVS     r1,#0x13
000c50  9809              LDR      r0,[sp,#0x24]
000c52  7201              STRB     r1,[r0,#8]
000c54  e013              B        |L16.3198|
                  |L16.3158|
;;;1112           }
;;;1113           else
;;;1114             Protect(luaT_trybiniTM(L, rb, ic, 0, ra, TM_SUB));
000c56  9914              LDR      r1,[sp,#0x50]
000c58  981a              LDR      r0,[sp,#0x68]
000c5a  6101              STR      r1,[r0,#0x10]
000c5c  981a              LDR      r0,[sp,#0x68]
000c5e  6841              LDR      r1,[r0,#4]
000c60  9819              LDR      r0,[sp,#0x64]
000c62  60c1              STR      r1,[r0,#0xc]
000c64  2109              MOVS     r1,#9
000c66  9810              LDR      r0,[sp,#0x40]
000c68  2300              MOVS     r3,#0
000c6a  e9cd0100          STRD     r0,r1,[sp,#0]
000c6e  e9dd210d          LDRD     r2,r1,[sp,#0x34]
000c72  9819              LDR      r0,[sp,#0x64]
000c74  f7fffffe          BL       luaT_trybiniTM
000c78  981a              LDR      r0,[sp,#0x68]
000c7a  6941              LDR      r1,[r0,#0x14]
000c7c  9113              STR      r1,[sp,#0x4c]
                  |L16.3198|
;;;1115           vmbreak;
000c7e  e45b              B        |L16.1336|
;;;1116         }
;;;1117         vmcase(OP_MULI) {
;;;1118           TValue *rb = vRB(i);
000c80  9811              LDR      r0,[sp,#0x44]
000c82  f3c04007          UBFX     r0,r0,#16,#8
000c86  9915              LDR      r1,[sp,#0x54]
000c88  eb011100          ADD      r1,r1,r0,LSL #4
000c8c  910e              STR      r1,[sp,#0x38]
;;;1119           int ic = GETARG_sC(i);
000c8e  9811              LDR      r0,[sp,#0x44]
000c90  0e00              LSRS     r0,r0,#24
000c92  387f              SUBS     r0,r0,#0x7f
000c94  900d              STR      r0,[sp,#0x34]
;;;1120           lua_Number nb;
;;;1121           if (ttisinteger(rb)) {
000c96  980e              LDR      r0,[sp,#0x38]
000c98  7a00              LDRB     r0,[r0,#8]
000c9a  2823              CMP      r0,#0x23
000c9c  d112              BNE      |L16.3268|
;;;1122             setivalue(vra, intop(*, ivalue(rb), ic));
000c9e  980f              LDR      r0,[sp,#0x3c]
000ca0  9009              STR      r0,[sp,#0x24]
000ca2  980e              LDR      r0,[sp,#0x38]
000ca4  c806              LDM      r0!,{r1,r2}
000ca6  980d              LDR      r0,[sp,#0x34]
000ca8  17c4              ASRS     r4,r0,#31
000caa  fba13500          UMULL    r3,r5,r1,r0
000cae  fb025000          MLA      r0,r2,r0,r5
000cb2  fb010104          MLA      r1,r1,r4,r0
000cb6  9809              LDR      r0,[sp,#0x24]
000cb8  e9c03100          STRD     r3,r1,[r0,#0]
000cbc  2123              MOVS     r1,#0x23
000cbe  9809              LDR      r0,[sp,#0x24]
000cc0  7201              STRB     r1,[r0,#8]
000cc2  e040              B        |L16.3398|
                  |L16.3268|
;;;1123           }
;;;1124           else if (tonumberns(rb, nb)) {
000cc4  980e              LDR      r0,[sp,#0x38]
000cc6  7a00              LDRB     r0,[r0,#8]
000cc8  2813              CMP      r0,#0x13
000cca  d105              BNE      |L16.3288|
000ccc  990e              LDR      r1,[sp,#0x38]
000cce  c903              LDM      r1,{r0,r1}
000cd0  e9cd010a          STRD     r0,r1,[sp,#0x28]
000cd4  2001              MOVS     r0,#1
000cd6  e00e              B        |L16.3318|
                  |L16.3288|
000cd8  980e              LDR      r0,[sp,#0x38]
000cda  7a00              LDRB     r0,[r0,#8]
000cdc  2823              CMP      r0,#0x23
000cde  d109              BNE      |L16.3316|
000ce0  980e              LDR      r0,[sp,#0x38]
000ce2  c803              LDM      r0,{r0,r1}
000ce4  e9cd0108          STRD     r0,r1,[sp,#0x20]
000ce8  f7fffffe          BL       __aeabi_l2d
000cec  e9cd010a          STRD     r0,r1,[sp,#0x28]
000cf0  2001              MOVS     r0,#1
000cf2  e000              B        |L16.3318|
                  |L16.3316|
000cf4  2000              MOVS     r0,#0
                  |L16.3318|
000cf6  b180              CBZ      r0,|L16.3354|
;;;1125             setfltvalue(vra, luai_nummul(L, nb, cast_num(ic)));
000cf8  980f              LDR      r0,[sp,#0x3c]
000cfa  9009              STR      r0,[sp,#0x24]
000cfc  980d              LDR      r0,[sp,#0x34]
000cfe  f7fffffe          BL       __aeabi_i2d
000d02  e9cd0106          STRD     r0,r1,[sp,#0x18]
000d06  e9dd230a          LDRD     r2,r3,[sp,#0x28]
000d0a  f7fffffe          BL       __aeabi_dmul
000d0e  9a09              LDR      r2,[sp,#0x24]
000d10  c203              STM      r2!,{r0,r1}
000d12  2113              MOVS     r1,#0x13
000d14  9809              LDR      r0,[sp,#0x24]
000d16  7201              STRB     r1,[r0,#8]
000d18  e015              B        |L16.3398|
                  |L16.3354|
;;;1126           }
;;;1127           else
;;;1128             Protect(luaT_trybiniTM(L, rb, ic, GETARG_k(i), ra, TM_MUL));
000d1a  9914              LDR      r1,[sp,#0x50]
000d1c  981a              LDR      r0,[sp,#0x68]
000d1e  6101              STR      r1,[r0,#0x10]
000d20  981a              LDR      r0,[sp,#0x68]
000d22  6841              LDR      r1,[r0,#4]
000d24  9819              LDR      r0,[sp,#0x64]
000d26  60c1              STR      r1,[r0,#0xc]
000d28  210a              MOVS     r1,#0xa
000d2a  9810              LDR      r0,[sp,#0x40]
000d2c  e9cd0100          STRD     r0,r1,[sp,#0]
000d30  9811              LDR      r0,[sp,#0x44]
000d32  f3c033c0          UBFX     r3,r0,#15,#1
000d36  e9dd210d          LDRD     r2,r1,[sp,#0x34]
000d3a  9819              LDR      r0,[sp,#0x64]
000d3c  f7fffffe          BL       luaT_trybiniTM
000d40  981a              LDR      r0,[sp,#0x68]
000d42  6941              LDR      r1,[r0,#0x14]
000d44  9113              STR      r1,[sp,#0x4c]
                  |L16.3398|
;;;1129           vmbreak;
000d46  e441              B        |L16.1484|
;;;1130         }
;;;1131         vmcase(OP_MODI) {
;;;1132           TValue *rb = vRB(i);
000d48  9811              LDR      r0,[sp,#0x44]
000d4a  f3c04007          UBFX     r0,r0,#16,#8
000d4e  9915              LDR      r1,[sp,#0x54]
000d50  eb011100          ADD      r1,r1,r0,LSL #4
000d54  910e              STR      r1,[sp,#0x38]
;;;1133           int ic = GETARG_sC(i);
000d56  9811              LDR      r0,[sp,#0x44]
000d58  0e00              LSRS     r0,r0,#24
000d5a  387f              SUBS     r0,r0,#0x7f
000d5c  900d              STR      r0,[sp,#0x34]
;;;1134           lua_Number nb;
;;;1135           if (ttisinteger(rb)) {
000d5e  980e              LDR      r0,[sp,#0x38]
000d60  7a00              LDRB     r0,[r0,#8]
000d62  2823              CMP      r0,#0x23
000d64  d114              BNE      |L16.3472|
;;;1136             setivalue(vra, luaV_mod(L, ivalue(rb), ic));
000d66  980f              LDR      r0,[sp,#0x3c]
000d68  9009              STR      r0,[sp,#0x24]
000d6a  980d              LDR      r0,[sp,#0x34]
000d6c  17c1              ASRS     r1,r0,#31
000d6e  e9cd0100          STRD     r0,r1,[sp,#0]
000d72  980e              LDR      r0,[sp,#0x38]
000d74  c803              LDM      r0,{r0,r1}
000d76  4602              MOV      r2,r0
000d78  460b              MOV      r3,r1
000d7a  e9cd0106          STRD     r0,r1,[sp,#0x18]
000d7e  9819              LDR      r0,[sp,#0x64]
000d80  f7fffffe          BL       luaV_mod
000d84  9a09              LDR      r2,[sp,#0x24]
000d86  c203              STM      r2!,{r0,r1}
000d88  2123              MOVS     r1,#0x23
000d8a  9809              LDR      r0,[sp,#0x24]
000d8c  7201              STRB     r1,[r0,#8]
000d8e  e05a              B        |L16.3654|
                  |L16.3472|
;;;1137           }
;;;1138           else if (tonumberns(rb, nb)) {
000d90  980e              LDR      r0,[sp,#0x38]
000d92  7a00              LDRB     r0,[r0,#8]
000d94  2813              CMP      r0,#0x13
000d96  d105              BNE      |L16.3492|
000d98  980e              LDR      r0,[sp,#0x38]
000d9a  c803              LDM      r0,{r0,r1}
000d9c  e9cd010a          STRD     r0,r1,[sp,#0x28]
000da0  2001              MOVS     r0,#1
000da2  e00e              B        |L16.3522|
                  |L16.3492|
000da4  980e              LDR      r0,[sp,#0x38]
000da6  7a00              LDRB     r0,[r0,#8]
000da8  2823              CMP      r0,#0x23
000daa  d109              BNE      |L16.3520|
000dac  990e              LDR      r1,[sp,#0x38]
000dae  c903              LDM      r1,{r0,r1}
000db0  e9cd0108          STRD     r0,r1,[sp,#0x20]
000db4  f7fffffe          BL       __aeabi_l2d
000db8  e9cd010a          STRD     r0,r1,[sp,#0x28]
000dbc  2001              MOVS     r0,#1
000dbe  e000              B        |L16.3522|
                  |L16.3520|
000dc0  2000              MOVS     r0,#0
                  |L16.3522|
000dc2  b360              CBZ      r0,|L16.3614|
;;;1139             lua_Number m;
;;;1140             lua_Number nc = cast_num(ic);
000dc4  980d              LDR      r0,[sp,#0x34]
000dc6  f7fffffe          BL       __aeabi_i2d
000dca  e9cd0106          STRD     r0,r1,[sp,#0x18]
;;;1141             luai_nummod(L, nb, nc, m);
000dce  e9dd2306          LDRD     r2,r3,[sp,#0x18]
000dd2  e9dd010a          LDRD     r0,r1,[sp,#0x28]
000dd6  f7fffffe          BL       fmod
000dda  e9cd0108          STRD     r0,r1,[sp,#0x20]
000dde  e9dd2306          LDRD     r2,r3,[sp,#0x18]
000de2  e9dd0108          LDRD     r0,r1,[sp,#0x20]
000de6  f7fffffe          BL       __aeabi_dmul
000dea  2200              MOVS     r2,#0
000dec  4613              MOV      r3,r2
000dee  e9cd0104          STRD     r0,r1,[sp,#0x10]
000df2  f7fffffe          BL       __aeabi_cdcmple
000df6  d207              BCS      |L16.3592|
000df8  e9dd2306          LDRD     r2,r3,[sp,#0x18]
000dfc  e9dd0108          LDRD     r0,r1,[sp,#0x20]
000e00  f7fffffe          BL       __aeabi_dadd
000e04  e9cd0108          STRD     r0,r1,[sp,#0x20]
                  |L16.3592|
;;;1142             setfltvalue(vra, m);
000e08  980f              LDR      r0,[sp,#0x3c]
000e0a  9005              STR      r0,[sp,#0x14]
000e0c  e9dd2108          LDRD     r2,r1,[sp,#0x20]
000e10  9805              LDR      r0,[sp,#0x14]
000e12  e9c02100          STRD     r2,r1,[r0,#0]
000e16  2113              MOVS     r1,#0x13
000e18  9805              LDR      r0,[sp,#0x14]
000e1a  7201              STRB     r1,[r0,#8]
;;;1143           }
000e1c  e013              B        |L16.3654|
                  |L16.3614|
;;;1144           else
;;;1145             Protect(luaT_trybiniTM(L, rb, ic, 0, ra, TM_MOD));
000e1e  9914              LDR      r1,[sp,#0x50]
000e20  981a              LDR      r0,[sp,#0x68]
000e22  6101              STR      r1,[r0,#0x10]
000e24  981a              LDR      r0,[sp,#0x68]
000e26  6841              LDR      r1,[r0,#4]
000e28  9819              LDR      r0,[sp,#0x64]
000e2a  60c1              STR      r1,[r0,#0xc]
000e2c  210b              MOVS     r1,#0xb
000e2e  9810              LDR      r0,[sp,#0x40]
000e30  2300              MOVS     r3,#0
000e32  e9cd0100          STRD     r0,r1,[sp,#0]
000e36  e9dd210d          LDRD     r2,r1,[sp,#0x34]
000e3a  9819              LDR      r0,[sp,#0x64]
000e3c  f7fffffe          BL       luaT_trybiniTM
000e40  981a              LDR      r0,[sp,#0x68]
000e42  6941              LDR      r1,[r0,#0x14]
000e44  9113              STR      r1,[sp,#0x4c]
                  |L16.3654|
;;;1146           vmbreak;
000e46  e434              B        |L16.1714|
;;;1147         }
;;;1148         vmcase(OP_POWI) {
;;;1149           TValue *rb = vRB(i);
000e48  9811              LDR      r0,[sp,#0x44]
000e4a  f3c04007          UBFX     r0,r0,#16,#8
000e4e  9915              LDR      r1,[sp,#0x54]
000e50  eb011100          ADD      r1,r1,r0,LSL #4
000e54  910e              STR      r1,[sp,#0x38]
;;;1150           int ic = GETARG_sC(i);
000e56  9811              LDR      r0,[sp,#0x44]
000e58  0e00              LSRS     r0,r0,#24
000e5a  387f              SUBS     r0,r0,#0x7f
000e5c  900d              STR      r0,[sp,#0x34]
;;;1151           lua_Number nb;
;;;1152           if (tonumberns(rb, nb)) {
000e5e  980e              LDR      r0,[sp,#0x38]
000e60  7a00              LDRB     r0,[r0,#8]
000e62  2813              CMP      r0,#0x13
000e64  d105              BNE      |L16.3698|
000e66  980e              LDR      r0,[sp,#0x38]
000e68  c803              LDM      r0,{r0,r1}
000e6a  e9cd010a          STRD     r0,r1,[sp,#0x28]
000e6e  2001              MOVS     r0,#1
000e70  e00e              B        |L16.3728|
                  |L16.3698|
000e72  980e              LDR      r0,[sp,#0x38]
000e74  7a00              LDRB     r0,[r0,#8]
000e76  2823              CMP      r0,#0x23
000e78  d109              BNE      |L16.3726|
000e7a  980e              LDR      r0,[sp,#0x38]
000e7c  c803              LDM      r0,{r0,r1}
000e7e  e9cd0108          STRD     r0,r1,[sp,#0x20]
000e82  f7fffffe          BL       __aeabi_l2d
000e86  e9cd010a          STRD     r0,r1,[sp,#0x28]
000e8a  2001              MOVS     r0,#1
000e8c  e000              B        |L16.3728|
                  |L16.3726|
000e8e  2000              MOVS     r0,#0
                  |L16.3728|
000e90  b190              CBZ      r0,|L16.3768|
;;;1153             lua_Number nc = cast_num(ic);
000e92  980d              LDR      r0,[sp,#0x34]
000e94  f7fffffe          BL       __aeabi_i2d
000e98  e9cd0108          STRD     r0,r1,[sp,#0x20]
;;;1154             setfltvalue(vra, luai_numpow(L, nb, nc));
000e9c  980f              LDR      r0,[sp,#0x3c]
000e9e  9007              STR      r0,[sp,#0x1c]
000ea0  e9dd2308          LDRD     r2,r3,[sp,#0x20]
000ea4  e9dd010a          LDRD     r0,r1,[sp,#0x28]
000ea8  f7fffffe          BL       pow
000eac  9a07              LDR      r2,[sp,#0x1c]
000eae  c203              STM      r2!,{r0,r1}
000eb0  2113              MOVS     r1,#0x13
000eb2  9807              LDR      r0,[sp,#0x1c]
000eb4  7201              STRB     r1,[r0,#8]
;;;1155           }
000eb6  e013              B        |L16.3808|
                  |L16.3768|
;;;1156           else
;;;1157             Protect(luaT_trybiniTM(L, rb, ic, 0, ra, TM_POW));
000eb8  9914              LDR      r1,[sp,#0x50]
000eba  981a              LDR      r0,[sp,#0x68]
000ebc  6101              STR      r1,[r0,#0x10]
000ebe  981a              LDR      r0,[sp,#0x68]
000ec0  6841              LDR      r1,[r0,#4]
000ec2  9819              LDR      r0,[sp,#0x64]
000ec4  60c1              STR      r1,[r0,#0xc]
000ec6  210c              MOVS     r1,#0xc
000ec8  9810              LDR      r0,[sp,#0x40]
000eca  2300              MOVS     r3,#0
000ecc  e9cd0100          STRD     r0,r1,[sp,#0]
000ed0  e9dd210d          LDRD     r2,r1,[sp,#0x34]
000ed4  9819              LDR      r0,[sp,#0x64]
000ed6  f7fffffe          BL       luaT_trybiniTM
000eda  981a              LDR      r0,[sp,#0x68]
000edc  6941              LDR      r1,[r0,#0x14]
000ede  9113              STR      r1,[sp,#0x4c]
                  |L16.3808|
;;;1158           vmbreak;
000ee0  e483              B        |L16.2026|
;;;1159         }
;;;1160         vmcase(OP_DIVI) {
;;;1161           TValue *rb = vRB(i);
000ee2  9811              LDR      r0,[sp,#0x44]
000ee4  f3c04007          UBFX     r0,r0,#16,#8
000ee8  9915              LDR      r1,[sp,#0x54]
000eea  eb011100          ADD      r1,r1,r0,LSL #4
000eee  910e              STR      r1,[sp,#0x38]
;;;1162           int ic = GETARG_sC(i);
000ef0  9811              LDR      r0,[sp,#0x44]
000ef2  0e00              LSRS     r0,r0,#24
000ef4  387f              SUBS     r0,r0,#0x7f
000ef6  900d              STR      r0,[sp,#0x34]
;;;1163           lua_Number nb;
;;;1164           if (tonumberns(rb, nb)) {
000ef8  980e              LDR      r0,[sp,#0x38]
000efa  7a00              LDRB     r0,[r0,#8]
000efc  2813              CMP      r0,#0x13
000efe  d105              BNE      |L16.3852|
000f00  980e              LDR      r0,[sp,#0x38]
000f02  c803              LDM      r0,{r0,r1}
000f04  e9cd010a          STRD     r0,r1,[sp,#0x28]
000f08  2001              MOVS     r0,#1
000f0a  e00e              B        |L16.3882|
                  |L16.3852|
000f0c  980e              LDR      r0,[sp,#0x38]
000f0e  7a00              LDRB     r0,[r0,#8]
000f10  2823              CMP      r0,#0x23
000f12  d109              BNE      |L16.3880|
000f14  980e              LDR      r0,[sp,#0x38]
000f16  c803              LDM      r0,{r0,r1}
000f18  e9cd0108          STRD     r0,r1,[sp,#0x20]
000f1c  f7fffffe          BL       __aeabi_l2d
000f20  e9cd010a          STRD     r0,r1,[sp,#0x28]
000f24  2001              MOVS     r0,#1
000f26  e000              B        |L16.3882|
                  |L16.3880|
000f28  2000              MOVS     r0,#0
                  |L16.3882|
000f2a  b190              CBZ      r0,|L16.3922|
;;;1165             lua_Number nc = cast_num(ic);
000f2c  980d              LDR      r0,[sp,#0x34]
000f2e  f7fffffe          BL       __aeabi_i2d
000f32  e9cd0108          STRD     r0,r1,[sp,#0x20]
;;;1166             setfltvalue(vra, luai_numdiv(L, nb, nc));
000f36  980f              LDR      r0,[sp,#0x3c]
000f38  9007              STR      r0,[sp,#0x1c]
000f3a  e9dd2308          LDRD     r2,r3,[sp,#0x20]
000f3e  e9dd010a          LDRD     r0,r1,[sp,#0x28]
000f42  f7fffffe          BL       __aeabi_ddiv
000f46  9a07              LDR      r2,[sp,#0x1c]
000f48  c203              STM      r2!,{r0,r1}
000f4a  2113              MOVS     r1,#0x13
000f4c  9807              LDR      r0,[sp,#0x1c]
000f4e  7201              STRB     r1,[r0,#8]
;;;1167           }
000f50  e013              B        |L16.3962|
                  |L16.3922|
;;;1168           else
;;;1169             Protect(luaT_trybiniTM(L, rb, ic, 0, ra, TM_DIV));
000f52  9914              LDR      r1,[sp,#0x50]
000f54  981a              LDR      r0,[sp,#0x68]
000f56  6101              STR      r1,[r0,#0x10]
000f58  981a              LDR      r0,[sp,#0x68]
000f5a  6841              LDR      r1,[r0,#4]
000f5c  9819              LDR      r0,[sp,#0x64]
000f5e  60c1              STR      r1,[r0,#0xc]
000f60  210d              MOVS     r1,#0xd
000f62  9810              LDR      r0,[sp,#0x40]
000f64  2300              MOVS     r3,#0
000f66  e9cd0100          STRD     r0,r1,[sp,#0]
000f6a  e9dd210d          LDRD     r2,r1,[sp,#0x34]
000f6e  9819              LDR      r0,[sp,#0x64]
000f70  f7fffffe          BL       luaT_trybiniTM
000f74  981a              LDR      r0,[sp,#0x68]
000f76  6941              LDR      r1,[r0,#0x14]
000f78  9113              STR      r1,[sp,#0x4c]
                  |L16.3962|
;;;1170           vmbreak;
000f7a  e436              B        |L16.2026|
;;;1171         }
;;;1172         vmcase(OP_IDIVI) {
;;;1173           TValue *rb = vRB(i);
000f7c  9811              LDR      r0,[sp,#0x44]
000f7e  f3c04007          UBFX     r0,r0,#16,#8
000f82  9915              LDR      r1,[sp,#0x54]
000f84  eb011100          ADD      r1,r1,r0,LSL #4
000f88  910e              STR      r1,[sp,#0x38]
;;;1174           int ic = GETARG_sC(i);
000f8a  9811              LDR      r0,[sp,#0x44]
000f8c  0e00              LSRS     r0,r0,#24
000f8e  387f              SUBS     r0,r0,#0x7f
000f90  900d              STR      r0,[sp,#0x34]
;;;1175           lua_Number nb;
;;;1176           if (ttisinteger(rb)) {
000f92  980e              LDR      r0,[sp,#0x38]
000f94  7a00              LDRB     r0,[r0,#8]
000f96  2823              CMP      r0,#0x23
000f98  d114              BNE      |L16.4036|
;;;1177             setivalue(vra, luaV_div(L, ivalue(rb), ic));
000f9a  980f              LDR      r0,[sp,#0x3c]
000f9c  9009              STR      r0,[sp,#0x24]
000f9e  980d              LDR      r0,[sp,#0x34]
000fa0  17c1              ASRS     r1,r0,#31
000fa2  e9cd0100          STRD     r0,r1,[sp,#0]
000fa6  990e              LDR      r1,[sp,#0x38]
000fa8  c903              LDM      r1,{r0,r1}
000faa  4602              MOV      r2,r0
000fac  460b              MOV      r3,r1
000fae  e9cd0106          STRD     r0,r1,[sp,#0x18]
000fb2  9819              LDR      r0,[sp,#0x64]
000fb4  f7fffffe          BL       luaV_div
000fb8  9a09              LDR      r2,[sp,#0x24]
000fba  c203              STM      r2!,{r0,r1}
000fbc  2123              MOVS     r1,#0x23
000fbe  9809              LDR      r0,[sp,#0x24]
000fc0  7201              STRB     r1,[r0,#8]
000fc2  e040              B        |L16.4166|
                  |L16.4036|
;;;1178           }
;;;1179           else if (tonumberns(rb, nb)) {
000fc4  980e              LDR      r0,[sp,#0x38]
000fc6  7a00              LDRB     r0,[r0,#8]
000fc8  2813              CMP      r0,#0x13
000fca  d105              BNE      |L16.4056|
000fcc  980e              LDR      r0,[sp,#0x38]
000fce  c803              LDM      r0,{r0,r1}
000fd0  e9cd010a          STRD     r0,r1,[sp,#0x28]
000fd4  2001              MOVS     r0,#1
000fd6  e00e              B        |L16.4086|
                  |L16.4056|
000fd8  980e              LDR      r0,[sp,#0x38]
000fda  7a00              LDRB     r0,[r0,#8]
000fdc  2823              CMP      r0,#0x23
000fde  d109              BNE      |L16.4084|
000fe0  980e              LDR      r0,[sp,#0x38]
000fe2  c803              LDM      r0,{r0,r1}
000fe4  e9cd0108          STRD     r0,r1,[sp,#0x20]
000fe8  f7fffffe          BL       __aeabi_l2d
000fec  e9cd010a          STRD     r0,r1,[sp,#0x28]
000ff0  2001              MOVS     r0,#1
000ff2  e000              B        |L16.4086|
                  |L16.4084|
000ff4  2000              MOVS     r0,#0
                  |L16.4086|
000ff6  b190              CBZ      r0,|L16.4126|
;;;1180             lua_Number nc = cast_num(ic);
000ff8  980d              LDR      r0,[sp,#0x34]
000ffa  f7fffffe          BL       __aeabi_i2d
000ffe  e9cd0108          STRD     r0,r1,[sp,#0x20]
;;;1181             setfltvalue(vra, luai_numdiv(L, nb, nc));
001002  980f              LDR      r0,[sp,#0x3c]
001004  9007              STR      r0,[sp,#0x1c]
001006  e9dd2308          LDRD     r2,r3,[sp,#0x20]
00100a  e9dd010a          LDRD     r0,r1,[sp,#0x28]
00100e  f7fffffe          BL       __aeabi_ddiv
001012  9a07              LDR      r2,[sp,#0x1c]
001014  c203              STM      r2!,{r0,r1}
001016  2113              MOVS     r1,#0x13
001018  9807              LDR      r0,[sp,#0x1c]
00101a  7201              STRB     r1,[r0,#8]
;;;1182           }
00101c  e013              B        |L16.4166|
                  |L16.4126|
;;;1183           else
;;;1184             Protect(luaT_trybiniTM(L, rb, ic, 0, ra, TM_IDIV));
00101e  9914              LDR      r1,[sp,#0x50]
001020  981a              LDR      r0,[sp,#0x68]
001022  6101              STR      r1,[r0,#0x10]
001024  981a              LDR      r0,[sp,#0x68]
001026  6841              LDR      r1,[r0,#4]
001028  9819              LDR      r0,[sp,#0x64]
00102a  60c1              STR      r1,[r0,#0xc]
00102c  210e              MOVS     r1,#0xe
00102e  9810              LDR      r0,[sp,#0x40]
001030  2300              MOVS     r3,#0
001032  e9cd0100          STRD     r0,r1,[sp,#0]
001036  e9dd210d          LDRD     r2,r1,[sp,#0x34]
00103a  9819              LDR      r0,[sp,#0x64]
00103c  f7fffffe          BL       luaT_trybiniTM
001040  981a              LDR      r0,[sp,#0x68]
001042  6941              LDR      r1,[r0,#0x14]
001044  9113              STR      r1,[sp,#0x4c]
                  |L16.4166|
;;;1185           vmbreak;
001046  e453              B        |L16.2288|
;;;1186         }
;;;1187         vmcase(OP_ADD) {
;;;1188           TValue *rb = vRB(i);
001048  9811              LDR      r0,[sp,#0x44]
00104a  f3c04007          UBFX     r0,r0,#16,#8
00104e  9915              LDR      r1,[sp,#0x54]
001050  eb011100          ADD      r1,r1,r0,LSL #4
001054  910e              STR      r1,[sp,#0x38]
;;;1189           TValue *rc = vRC(i);
001056  9811              LDR      r0,[sp,#0x44]
001058  0e01              LSRS     r1,r0,#24
00105a  9815              LDR      r0,[sp,#0x54]
00105c  eb001101          ADD      r1,r0,r1,LSL #4
001060  910d              STR      r1,[sp,#0x34]
;;;1190           lua_Number nb; lua_Number nc;
;;;1191           if (ttisinteger(rb) && ttisinteger(rc)) {
001062  980e              LDR      r0,[sp,#0x38]
001064  7a00              LDRB     r0,[r0,#8]
001066  2823              CMP      r0,#0x23
001068  d11b              BNE      |L16.4258|
00106a  980d              LDR      r0,[sp,#0x34]
00106c  7a00              LDRB     r0,[r0,#8]
00106e  2823              CMP      r0,#0x23
001070  d117              BNE      |L16.4258|
;;;1192             lua_Integer ib = ivalue(rb); lua_Integer ic = ivalue(rc);
001072  980e              LDR      r0,[sp,#0x38]
001074  c803              LDM      r0,{r0,r1}
001076  e9cd0106          STRD     r0,r1,[sp,#0x18]
00107a  980d              LDR      r0,[sp,#0x34]
00107c  c803              LDM      r0,{r0,r1}
00107e  e9cd0104          STRD     r0,r1,[sp,#0x10]
;;;1193             setivalue(vra, intop(+, ib, ic));
001082  980f              LDR      r0,[sp,#0x3c]
001084  9003              STR      r0,[sp,#0xc]
001086  e9dd2304          LDRD     r2,r3,[sp,#0x10]
00108a  e9dd1006          LDRD     r1,r0,[sp,#0x18]
00108e  188a              ADDS     r2,r1,r2
001090  eb400103          ADC      r1,r0,r3
001094  9803              LDR      r0,[sp,#0xc]
001096  e9c02100          STRD     r2,r1,[r0,#0]
00109a  2123              MOVS     r1,#0x23
00109c  9803              LDR      r0,[sp,#0xc]
00109e  7201              STRB     r1,[r0,#8]
;;;1194           }
0010a0  e053              B        |L16.4426|
                  |L16.4258|
;;;1195           else if (tonumberns(rb, nb) && tonumberns(rc, nc)) {
0010a2  980e              LDR      r0,[sp,#0x38]
0010a4  7a00              LDRB     r0,[r0,#8]
0010a6  2813              CMP      r0,#0x13
0010a8  d105              BNE      |L16.4278|
0010aa  980e              LDR      r0,[sp,#0x38]
0010ac  c803              LDM      r0,{r0,r1}
0010ae  e9cd010a          STRD     r0,r1,[sp,#0x28]
0010b2  2001              MOVS     r0,#1
0010b4  e00e              B        |L16.4308|
                  |L16.4278|
0010b6  980e              LDR      r0,[sp,#0x38]
0010b8  7a00              LDRB     r0,[r0,#8]
0010ba  2823              CMP      r0,#0x23
0010bc  d109              BNE      |L16.4306|
0010be  990e              LDR      r1,[sp,#0x38]
0010c0  c903              LDM      r1,{r0,r1}
0010c2  e9cd0106          STRD     r0,r1,[sp,#0x18]
0010c6  f7fffffe          BL       __aeabi_l2d
0010ca  e9cd010a          STRD     r0,r1,[sp,#0x28]
0010ce  2001              MOVS     r0,#1
0010d0  e000              B        |L16.4308|
                  |L16.4306|
0010d2  2000              MOVS     r0,#0
                  |L16.4308|
0010d4  b338              CBZ      r0,|L16.4390|
0010d6  980d              LDR      r0,[sp,#0x34]
0010d8  7a00              LDRB     r0,[r0,#8]
0010da  2813              CMP      r0,#0x13
0010dc  d105              BNE      |L16.4330|
0010de  990d              LDR      r1,[sp,#0x34]
0010e0  c903              LDM      r1,{r0,r1}
0010e2  e9cd0108          STRD     r0,r1,[sp,#0x20]
0010e6  2001              MOVS     r0,#1
0010e8  e00e              B        |L16.4360|
                  |L16.4330|
0010ea  980d              LDR      r0,[sp,#0x34]
0010ec  7a00              LDRB     r0,[r0,#8]
0010ee  2823              CMP      r0,#0x23
0010f0  d109              BNE      |L16.4358|
0010f2  980d              LDR      r0,[sp,#0x34]
0010f4  c803              LDM      r0,{r0,r1}
0010f6  e9cd0106          STRD     r0,r1,[sp,#0x18]
0010fa  f7fffffe          BL       __aeabi_l2d
0010fe  e9cd0108          STRD     r0,r1,[sp,#0x20]
001102  2001              MOVS     r0,#1
001104  e000              B        |L16.4360|
                  |L16.4358|
001106  2000              MOVS     r0,#0
                  |L16.4360|
001108  b168              CBZ      r0,|L16.4390|
;;;1196             setfltvalue(vra, luai_numadd(L, nb, nc));
00110a  980f              LDR      r0,[sp,#0x3c]
00110c  9007              STR      r0,[sp,#0x1c]
00110e  e9dd2308          LDRD     r2,r3,[sp,#0x20]
001112  e9dd010a          LDRD     r0,r1,[sp,#0x28]
001116  f7fffffe          BL       __aeabi_dadd
00111a  9a07              LDR      r2,[sp,#0x1c]
00111c  c203              STM      r2!,{r0,r1}
00111e  2113              MOVS     r1,#0x13
001120  9807              LDR      r0,[sp,#0x1c]
001122  7201              STRB     r1,[r0,#8]
001124  e011              B        |L16.4426|
                  |L16.4390|
;;;1197           }
;;;1198           else
;;;1199             Protect(luaT_trybinTM(L, rb, rc, ra, TM_ADD));
001126  9914              LDR      r1,[sp,#0x50]
001128  981a              LDR      r0,[sp,#0x68]
00112a  6101              STR      r1,[r0,#0x10]
00112c  981a              LDR      r0,[sp,#0x68]
00112e  6841              LDR      r1,[r0,#4]
001130  9819              LDR      r0,[sp,#0x64]
001132  60c1              STR      r1,[r0,#0xc]
001134  2008              MOVS     r0,#8
001136  9000              STR      r0,[sp,#0]
001138  9b10              LDR      r3,[sp,#0x40]
00113a  e9dd210d          LDRD     r2,r1,[sp,#0x34]
00113e  9819              LDR      r0,[sp,#0x64]
001140  f7fffffe          BL       luaT_trybinTM
001144  981a              LDR      r0,[sp,#0x68]
001146  6941              LDR      r1,[r0,#0x14]
001148  9113              STR      r1,[sp,#0x4c]
                  |L16.4426|
;;;1200           vmbreak;
00114a  e43b              B        |L16.2500|
;;;1201         }
;;;1202         vmcase(OP_SUB) {
;;;1203           TValue *rb = vRB(i);
00114c  9811              LDR      r0,[sp,#0x44]
00114e  f3c04007          UBFX     r0,r0,#16,#8
001152  9915              LDR      r1,[sp,#0x54]
001154  eb011100          ADD      r1,r1,r0,LSL #4
001158  910e              STR      r1,[sp,#0x38]
;;;1204           TValue *rc = vRC(i);
00115a  9811              LDR      r0,[sp,#0x44]
00115c  0e01              LSRS     r1,r0,#24
00115e  9815              LDR      r0,[sp,#0x54]
001160  eb001101          ADD      r1,r0,r1,LSL #4
001164  910d              STR      r1,[sp,#0x34]
;;;1205           lua_Number nb; lua_Number nc;
;;;1206           if (ttisinteger(rb) && ttisinteger(rc)) {
001166  980e              LDR      r0,[sp,#0x38]
001168  7a00              LDRB     r0,[r0,#8]
00116a  2823              CMP      r0,#0x23
00116c  d11b              BNE      |L16.4518|
00116e  980d              LDR      r0,[sp,#0x34]
001170  7a00              LDRB     r0,[r0,#8]
001172  2823              CMP      r0,#0x23
001174  d117              BNE      |L16.4518|
;;;1207             lua_Integer ib = ivalue(rb); lua_Integer ic = ivalue(rc);
001176  990e              LDR      r1,[sp,#0x38]
001178  c903              LDM      r1,{r0,r1}
00117a  e9cd0106          STRD     r0,r1,[sp,#0x18]
00117e  980d              LDR      r0,[sp,#0x34]
001180  c803              LDM      r0,{r0,r1}
001182  e9cd0104          STRD     r0,r1,[sp,#0x10]
;;;1208             setivalue(vra, intop(-, ib, ic));
001186  980f              LDR      r0,[sp,#0x3c]
001188  9003              STR      r0,[sp,#0xc]
00118a  e9dd3104          LDRD     r3,r1,[sp,#0x10]
00118e  e9dd2006          LDRD     r2,r0,[sp,#0x18]
001192  1ad2              SUBS     r2,r2,r3
001194  eb600101          SBC      r1,r0,r1
001198  9803              LDR      r0,[sp,#0xc]
00119a  e9c02100          STRD     r2,r1,[r0,#0]
00119e  2123              MOVS     r1,#0x23
0011a0  9803              LDR      r0,[sp,#0xc]
0011a2  7201              STRB     r1,[r0,#8]
;;;1209           }
0011a4  e053              B        |L16.4686|
                  |L16.4518|
;;;1210           else if (tonumberns(rb, nb) && tonumberns(rc, nc)) {
0011a6  980e              LDR      r0,[sp,#0x38]
0011a8  7a00              LDRB     r0,[r0,#8]
0011aa  2813              CMP      r0,#0x13
0011ac  d105              BNE      |L16.4538|
0011ae  980e              LDR      r0,[sp,#0x38]
0011b0  c803              LDM      r0,{r0,r1}
0011b2  e9cd010a          STRD     r0,r1,[sp,#0x28]
0011b6  2001              MOVS     r0,#1
0011b8  e00e              B        |L16.4568|
                  |L16.4538|
0011ba  980e              LDR      r0,[sp,#0x38]
0011bc  7a00              LDRB     r0,[r0,#8]
0011be  2823              CMP      r0,#0x23
0011c0  d109              BNE      |L16.4566|
0011c2  990e              LDR      r1,[sp,#0x38]
0011c4  c903              LDM      r1,{r0,r1}
0011c6  e9cd0106          STRD     r0,r1,[sp,#0x18]
0011ca  f7fffffe          BL       __aeabi_l2d
0011ce  e9cd010a          STRD     r0,r1,[sp,#0x28]
0011d2  2001              MOVS     r0,#1
0011d4  e000              B        |L16.4568|
                  |L16.4566|
0011d6  2000              MOVS     r0,#0
                  |L16.4568|
0011d8  b338              CBZ      r0,|L16.4650|
0011da  980d              LDR      r0,[sp,#0x34]
0011dc  7a00              LDRB     r0,[r0,#8]
0011de  2813              CMP      r0,#0x13
0011e0  d105              BNE      |L16.4590|
0011e2  990d              LDR      r1,[sp,#0x34]
0011e4  c903              LDM      r1,{r0,r1}
0011e6  e9cd0108          STRD     r0,r1,[sp,#0x20]
0011ea  2001              MOVS     r0,#1
0011ec  e00e              B        |L16.4620|
                  |L16.4590|
0011ee  980d              LDR      r0,[sp,#0x34]
0011f0  7a00              LDRB     r0,[r0,#8]
0011f2  2823              CMP      r0,#0x23
0011f4  d109              BNE      |L16.4618|
0011f6  990d              LDR      r1,[sp,#0x34]
0011f8  c903              LDM      r1,{r0,r1}
0011fa  e9cd0106          STRD     r0,r1,[sp,#0x18]
0011fe  f7fffffe          BL       __aeabi_l2d
001202  e9cd0108          STRD     r0,r1,[sp,#0x20]
001206  2001              MOVS     r0,#1
001208  e000              B        |L16.4620|
                  |L16.4618|
00120a  2000              MOVS     r0,#0
                  |L16.4620|
00120c  b168              CBZ      r0,|L16.4650|
;;;1211             setfltvalue(vra, luai_numsub(L, nb, nc));
00120e  980f              LDR      r0,[sp,#0x3c]
001210  9007              STR      r0,[sp,#0x1c]
001212  e9dd2308          LDRD     r2,r3,[sp,#0x20]
001216  e9dd010a          LDRD     r0,r1,[sp,#0x28]
00121a  f7fffffe          BL       __aeabi_dsub
00121e  9a07              LDR      r2,[sp,#0x1c]
001220  c203              STM      r2!,{r0,r1}
001222  2113              MOVS     r1,#0x13
001224  9807              LDR      r0,[sp,#0x1c]
001226  7201              STRB     r1,[r0,#8]
001228  e011              B        |L16.4686|
                  |L16.4650|
;;;1212           }
;;;1213           else
;;;1214             Protect(luaT_trybinTM(L, rb, rc, ra, TM_SUB));
00122a  9914              LDR      r1,[sp,#0x50]
00122c  981a              LDR      r0,[sp,#0x68]
00122e  6101              STR      r1,[r0,#0x10]
001230  981a              LDR      r0,[sp,#0x68]
001232  6841              LDR      r1,[r0,#4]
001234  9819              LDR      r0,[sp,#0x64]
001236  60c1              STR      r1,[r0,#0xc]
001238  2009              MOVS     r0,#9
00123a  9000              STR      r0,[sp,#0]
00123c  9b10              LDR      r3,[sp,#0x40]
00123e  e9dd210d          LDRD     r2,r1,[sp,#0x34]
001242  9819              LDR      r0,[sp,#0x64]
001244  f7fffffe          BL       luaT_trybinTM
001248  981a              LDR      r0,[sp,#0x68]
00124a  6941              LDR      r1,[r0,#0x14]
00124c  9113              STR      r1,[sp,#0x4c]
                  |L16.4686|
;;;1215           vmbreak;
00124e  e454              B        |L16.2810|
;;;1216         }
;;;1217         vmcase(OP_MUL) {
;;;1218           TValue *rb = vRB(i);
001250  9811              LDR      r0,[sp,#0x44]
001252  f3c04007          UBFX     r0,r0,#16,#8
001256  9915              LDR      r1,[sp,#0x54]
001258  eb011100          ADD      r1,r1,r0,LSL #4
00125c  910e              STR      r1,[sp,#0x38]
;;;1219           TValue *rc = vRC(i);
00125e  9811              LDR      r0,[sp,#0x44]
001260  0e01              LSRS     r1,r0,#24
001262  9815              LDR      r0,[sp,#0x54]
001264  eb001101          ADD      r1,r0,r1,LSL #4
001268  910d              STR      r1,[sp,#0x34]
;;;1220           lua_Number nb; lua_Number nc;
;;;1221           if (ttisinteger(rb) && ttisinteger(rc)) {
00126a  980e              LDR      r0,[sp,#0x38]
00126c  7a00              LDRB     r0,[r0,#8]
00126e  2823              CMP      r0,#0x23
001270  d11e              BNE      |L16.4784|
001272  980d              LDR      r0,[sp,#0x34]
001274  7a00              LDRB     r0,[r0,#8]
001276  2823              CMP      r0,#0x23
001278  d11a              BNE      |L16.4784|
;;;1222             lua_Integer ib = ivalue(rb); lua_Integer ic = ivalue(rc);
00127a  980e              LDR      r0,[sp,#0x38]
00127c  c803              LDM      r0,{r0,r1}
00127e  e9cd0106          STRD     r0,r1,[sp,#0x18]
001282  990d              LDR      r1,[sp,#0x34]
001284  c903              LDM      r1,{r0,r1}
001286  e9cd0104          STRD     r0,r1,[sp,#0x10]
;;;1223             setivalue(vra, intop(*, ib, ic));
00128a  980f              LDR      r0,[sp,#0x3c]
00128c  9003              STR      r0,[sp,#0xc]
00128e  e9dd2304          LDRD     r2,r3,[sp,#0x10]
001292  e9dd0106          LDRD     r0,r1,[sp,#0x18]
001296  fba04502          UMULL    r4,r5,r0,r2
00129a  fb015102          MLA      r1,r1,r2,r5
00129e  fb001103          MLA      r1,r0,r3,r1
0012a2  9803              LDR      r0,[sp,#0xc]
0012a4  e9c04100          STRD     r4,r1,[r0,#0]
0012a8  2123              MOVS     r1,#0x23
0012aa  9803              LDR      r0,[sp,#0xc]
0012ac  7201              STRB     r1,[r0,#8]
;;;1224           }
0012ae  e053              B        |L16.4952|
                  |L16.4784|
;;;1225           else if (tonumberns(rb, nb) && tonumberns(rc, nc)) {
0012b0  980e              LDR      r0,[sp,#0x38]
0012b2  7a00              LDRB     r0,[r0,#8]
0012b4  2813              CMP      r0,#0x13
0012b6  d105              BNE      |L16.4804|
0012b8  980e              LDR      r0,[sp,#0x38]
0012ba  c803              LDM      r0,{r0,r1}
0012bc  e9cd010a          STRD     r0,r1,[sp,#0x28]
0012c0  2001              MOVS     r0,#1
0012c2  e00e              B        |L16.4834|
                  |L16.4804|
0012c4  980e              LDR      r0,[sp,#0x38]
0012c6  7a00              LDRB     r0,[r0,#8]
0012c8  2823              CMP      r0,#0x23
0012ca  d109              BNE      |L16.4832|
0012cc  990e              LDR      r1,[sp,#0x38]
0012ce  c903              LDM      r1,{r0,r1}
0012d0  e9cd0106          STRD     r0,r1,[sp,#0x18]
0012d4  f7fffffe          BL       __aeabi_l2d
0012d8  e9cd010a          STRD     r0,r1,[sp,#0x28]
0012dc  2001              MOVS     r0,#1
0012de  e000              B        |L16.4834|
                  |L16.4832|
0012e0  2000              MOVS     r0,#0
                  |L16.4834|
0012e2  b338              CBZ      r0,|L16.4916|
0012e4  980d              LDR      r0,[sp,#0x34]
0012e6  7a00              LDRB     r0,[r0,#8]
0012e8  2813              CMP      r0,#0x13
0012ea  d105              BNE      |L16.4856|
0012ec  990d              LDR      r1,[sp,#0x34]
0012ee  c903              LDM      r1,{r0,r1}
0012f0  e9cd0108          STRD     r0,r1,[sp,#0x20]
0012f4  2001              MOVS     r0,#1
0012f6  e00e              B        |L16.4886|
                  |L16.4856|
0012f8  980d              LDR      r0,[sp,#0x34]
0012fa  7a00              LDRB     r0,[r0,#8]
0012fc  2823              CMP      r0,#0x23
0012fe  d109              BNE      |L16.4884|
001300  990d              LDR      r1,[sp,#0x34]
001302  c903              LDM      r1,{r0,r1}
001304  e9cd0106          STRD     r0,r1,[sp,#0x18]
001308  f7fffffe          BL       __aeabi_l2d
00130c  e9cd0108          STRD     r0,r1,[sp,#0x20]
001310  2001              MOVS     r0,#1
001312  e000              B        |L16.4886|
                  |L16.4884|
001314  2000              MOVS     r0,#0
                  |L16.4886|
001316  b168              CBZ      r0,|L16.4916|
;;;1226             setfltvalue(vra, luai_nummul(L, nb, nc));
001318  980f              LDR      r0,[sp,#0x3c]
00131a  9007              STR      r0,[sp,#0x1c]
00131c  e9dd2308          LDRD     r2,r3,[sp,#0x20]
001320  e9dd010a          LDRD     r0,r1,[sp,#0x28]
001324  f7fffffe          BL       __aeabi_dmul
001328  9a07              LDR      r2,[sp,#0x1c]
00132a  c203              STM      r2!,{r0,r1}
00132c  2113              MOVS     r1,#0x13
00132e  9807              LDR      r0,[sp,#0x1c]
001330  7201              STRB     r1,[r0,#8]
001332  e011              B        |L16.4952|
                  |L16.4916|
;;;1227           }
;;;1228           else
;;;1229             Protect(luaT_trybinTM(L, rb, rc, ra, TM_MUL));
001334  9914              LDR      r1,[sp,#0x50]
001336  981a              LDR      r0,[sp,#0x68]
001338  6101              STR      r1,[r0,#0x10]
00133a  981a              LDR      r0,[sp,#0x68]
00133c  6841              LDR      r1,[r0,#4]
00133e  9819              LDR      r0,[sp,#0x64]
001340  60c1              STR      r1,[r0,#0xc]
001342  200a              MOVS     r0,#0xa
001344  9000              STR      r0,[sp,#0]
001346  9b10              LDR      r3,[sp,#0x40]
001348  e9dd210d          LDRD     r2,r1,[sp,#0x34]
00134c  9819              LDR      r0,[sp,#0x64]
00134e  f7fffffe          BL       luaT_trybinTM
001352  981a              LDR      r0,[sp,#0x68]
001354  6941              LDR      r1,[r0,#0x14]
001356  9113              STR      r1,[sp,#0x4c]
                  |L16.4952|
;;;1230           vmbreak;
001358  e431              B        |L16.3006|
;;;1231         }
;;;1232         vmcase(OP_DIV) {  /* float division (always with floats) */
;;;1233           TValue *rb = vRB(i);
00135a  9811              LDR      r0,[sp,#0x44]
00135c  f3c04007          UBFX     r0,r0,#16,#8
001360  9915              LDR      r1,[sp,#0x54]
001362  eb011100          ADD      r1,r1,r0,LSL #4
001366  910e              STR      r1,[sp,#0x38]
;;;1234           TValue *rc = vRC(i);
001368  9811              LDR      r0,[sp,#0x44]
00136a  0e01              LSRS     r1,r0,#24
00136c  9815              LDR      r0,[sp,#0x54]
00136e  eb001101          ADD      r1,r0,r1,LSL #4
001372  910d              STR      r1,[sp,#0x34]
;;;1235           lua_Number nb; lua_Number nc;
;;;1236           if (tonumberns(rb, nb) && tonumberns(rc, nc)) {
001374  980e              LDR      r0,[sp,#0x38]
001376  7a00              LDRB     r0,[r0,#8]
001378  2813              CMP      r0,#0x13
00137a  d105              BNE      |L16.5000|
00137c  980e              LDR      r0,[sp,#0x38]
00137e  c803              LDM      r0,{r0,r1}
001380  e9cd010a          STRD     r0,r1,[sp,#0x28]
001384  2001              MOVS     r0,#1
001386  e00e              B        |L16.5030|
                  |L16.5000|
001388  980e              LDR      r0,[sp,#0x38]
00138a  7a00              LDRB     r0,[r0,#8]
00138c  2823              CMP      r0,#0x23
00138e  d109              BNE      |L16.5028|
001390  990e              LDR      r1,[sp,#0x38]
001392  c903              LDM      r1,{r0,r1}
001394  e9cd0106          STRD     r0,r1,[sp,#0x18]
001398  f7fffffe          BL       __aeabi_l2d
00139c  e9cd010a          STRD     r0,r1,[sp,#0x28]
0013a0  2001              MOVS     r0,#1
0013a2  e000              B        |L16.5030|
                  |L16.5028|
0013a4  2000              MOVS     r0,#0
                  |L16.5030|
0013a6  b338              CBZ      r0,|L16.5112|
0013a8  980d              LDR      r0,[sp,#0x34]
0013aa  7a00              LDRB     r0,[r0,#8]
0013ac  2813              CMP      r0,#0x13
0013ae  d105              BNE      |L16.5052|
0013b0  980d              LDR      r0,[sp,#0x34]
0013b2  c803              LDM      r0,{r0,r1}
0013b4  e9cd0108          STRD     r0,r1,[sp,#0x20]
0013b8  2001              MOVS     r0,#1
0013ba  e00e              B        |L16.5082|
                  |L16.5052|
0013bc  980d              LDR      r0,[sp,#0x34]
0013be  7a00              LDRB     r0,[r0,#8]
0013c0  2823              CMP      r0,#0x23
0013c2  d109              BNE      |L16.5080|
0013c4  980d              LDR      r0,[sp,#0x34]
0013c6  c803              LDM      r0,{r0,r1}
0013c8  e9cd0106          STRD     r0,r1,[sp,#0x18]
0013cc  f7fffffe          BL       __aeabi_l2d
0013d0  e9cd0108          STRD     r0,r1,[sp,#0x20]
0013d4  2001              MOVS     r0,#1
0013d6  e000              B        |L16.5082|
                  |L16.5080|
0013d8  2000              MOVS     r0,#0
                  |L16.5082|
0013da  b168              CBZ      r0,|L16.5112|
;;;1237             setfltvalue(vra, luai_numdiv(L, nb, nc));
0013dc  980f              LDR      r0,[sp,#0x3c]
0013de  9007              STR      r0,[sp,#0x1c]
0013e0  e9dd2308          LDRD     r2,r3,[sp,#0x20]
0013e4  e9dd010a          LDRD     r0,r1,[sp,#0x28]
0013e8  f7fffffe          BL       __aeabi_ddiv
0013ec  9a07              LDR      r2,[sp,#0x1c]
0013ee  c203              STM      r2!,{r0,r1}
0013f0  2113              MOVS     r1,#0x13
0013f2  9807              LDR      r0,[sp,#0x1c]
0013f4  7201              STRB     r1,[r0,#8]
0013f6  e011              B        |L16.5148|
                  |L16.5112|
;;;1238           }
;;;1239           else
;;;1240             Protect(luaT_trybinTM(L, rb, rc, ra, TM_DIV));
0013f8  9914              LDR      r1,[sp,#0x50]
0013fa  981a              LDR      r0,[sp,#0x68]
0013fc  6101              STR      r1,[r0,#0x10]
0013fe  981a              LDR      r0,[sp,#0x68]
001400  6841              LDR      r1,[r0,#4]
001402  9819              LDR      r0,[sp,#0x64]
001404  60c1              STR      r1,[r0,#0xc]
001406  200d              MOVS     r0,#0xd
001408  9000              STR      r0,[sp,#0]
00140a  9b10              LDR      r3,[sp,#0x40]
00140c  e9dd210d          LDRD     r2,r1,[sp,#0x34]
001410  9819              LDR      r0,[sp,#0x64]
001412  f7fffffe          BL       luaT_trybinTM
001416  981a              LDR      r0,[sp,#0x68]
001418  6941              LDR      r1,[r0,#0x14]
00141a  9113              STR      r1,[sp,#0x4c]
                  |L16.5148|
;;;1241           vmbreak;
00141c  e42f              B        |L16.3198|
;;;1242         }
;;;1243         vmcase(OP_BANDK) {
;;;1244           TValue *p1 = vRB(i);
00141e  9811              LDR      r0,[sp,#0x44]
001420  f3c04007          UBFX     r0,r0,#16,#8
001424  9915              LDR      r1,[sp,#0x54]
001426  eb011100          ADD      r1,r1,r0,LSL #4
00142a  910e              STR      r1,[sp,#0x38]
;;;1245           TValue *p2 = KC(i);
00142c  9811              LDR      r0,[sp,#0x44]
00142e  0e01              LSRS     r1,r0,#24
001430  9816              LDR      r0,[sp,#0x58]
001432  eb001101          ADD      r1,r0,r1,LSL #4
001436  910d              STR      r1,[sp,#0x34]
;;;1246           lua_Integer i1;
;;;1247           if (tointegerns(p1, &i1)) {
001438  980e              LDR      r0,[sp,#0x38]
00143a  7a00              LDRB     r0,[r0,#8]
00143c  2823              CMP      r0,#0x23
00143e  d105              BNE      |L16.5196|
001440  980e              LDR      r0,[sp,#0x38]
001442  c806              LDM      r0!,{r1,r2}
001444  e9cd120a          STRD     r1,r2,[sp,#0x28]
001448  2001              MOVS     r0,#1
00144a  e004              B        |L16.5206|
                  |L16.5196|
00144c  2200              MOVS     r2,#0
00144e  a90a              ADD      r1,sp,#0x28
001450  980e              LDR      r0,[sp,#0x38]
001452  f7fffffe          BL       luaV_tointegerns
                  |L16.5206|
001456  b178              CBZ      r0,|L16.5240|
;;;1248             setivalue(vra, intop(&, i1, ivalue(p2)));
001458  980f              LDR      r0,[sp,#0x3c]
00145a  9009              STR      r0,[sp,#0x24]
00145c  980d              LDR      r0,[sp,#0x34]
00145e  e9d02100          LDRD     r2,r1,[r0,#0]
001462  e9dd300a          LDRD     r3,r0,[sp,#0x28]
001466  401a              ANDS     r2,r2,r3
001468  4001              ANDS     r1,r1,r0
00146a  9809              LDR      r0,[sp,#0x24]
00146c  e9c02100          STRD     r2,r1,[r0,#0]
001470  2123              MOVS     r1,#0x23
001472  9809              LDR      r0,[sp,#0x24]
001474  7201              STRB     r1,[r0,#8]
001476  e015              B        |L16.5284|
                  |L16.5240|
;;;1249           }
;;;1250           else
;;;1251             Protect(luaT_trybinassocTM(L, p1, p2, ra, TESTARG_k(i), TM_BAND));
001478  9914              LDR      r1,[sp,#0x50]
00147a  981a              LDR      r0,[sp,#0x68]
00147c  6101              STR      r1,[r0,#0x10]
00147e  981a              LDR      r0,[sp,#0x68]
001480  6841              LDR      r1,[r0,#4]
001482  9819              LDR      r0,[sp,#0x64]
001484  60c1              STR      r1,[r0,#0xc]
001486  210f              MOVS     r1,#0xf
001488  9811              LDR      r0,[sp,#0x44]
00148a  f4004000          AND      r0,r0,#0x8000
00148e  e9cd0100          STRD     r0,r1,[sp,#0]
001492  9b10              LDR      r3,[sp,#0x40]
001494  e9dd210d          LDRD     r2,r1,[sp,#0x34]
001498  9819              LDR      r0,[sp,#0x64]
00149a  f7fffffe          BL       luaT_trybinassocTM
00149e  981a              LDR      r0,[sp,#0x68]
0014a0  6941              LDR      r1,[r0,#0x14]
0014a2  9113              STR      r1,[sp,#0x4c]
                  |L16.5284|
;;;1252           vmbreak;
0014a4  e44f              B        |L16.3398|
;;;1253         }
;;;1254         vmcase(OP_BORK) {
;;;1255           TValue *p1 = vRB(i);
0014a6  9811              LDR      r0,[sp,#0x44]
0014a8  f3c04007          UBFX     r0,r0,#16,#8
0014ac  9915              LDR      r1,[sp,#0x54]
0014ae  eb011100          ADD      r1,r1,r0,LSL #4
0014b2  910e              STR      r1,[sp,#0x38]
;;;1256           TValue *p2 = KC(i);
0014b4  9811              LDR      r0,[sp,#0x44]
0014b6  0e01              LSRS     r1,r0,#24
0014b8  9816              LDR      r0,[sp,#0x58]
0014ba  eb001101          ADD      r1,r0,r1,LSL #4
0014be  910d              STR      r1,[sp,#0x34]
;;;1257           lua_Integer i1;
;;;1258           if (tointegerns(p1, &i1)) {
0014c0  980e              LDR      r0,[sp,#0x38]
0014c2  7a00              LDRB     r0,[r0,#8]
0014c4  2823              CMP      r0,#0x23
0014c6  d105              BNE      |L16.5332|
0014c8  980e              LDR      r0,[sp,#0x38]
0014ca  c806              LDM      r0!,{r1,r2}
0014cc  e9cd120a          STRD     r1,r2,[sp,#0x28]
0014d0  2001              MOVS     r0,#1
0014d2  e004              B        |L16.5342|
                  |L16.5332|
0014d4  2200              MOVS     r2,#0
0014d6  a90a              ADD      r1,sp,#0x28
0014d8  980e              LDR      r0,[sp,#0x38]
0014da  f7fffffe          BL       luaV_tointegerns
                  |L16.5342|
0014de  b178              CBZ      r0,|L16.5376|
;;;1259             setivalue(vra, intop(|, i1, ivalue(p2)));
0014e0  980f              LDR      r0,[sp,#0x3c]
0014e2  9009              STR      r0,[sp,#0x24]
0014e4  980d              LDR      r0,[sp,#0x34]
0014e6  e9d02100          LDRD     r2,r1,[r0,#0]
0014ea  e9dd300a          LDRD     r3,r0,[sp,#0x28]
0014ee  431a              ORRS     r2,r2,r3
0014f0  4301              ORRS     r1,r1,r0
0014f2  9809              LDR      r0,[sp,#0x24]
0014f4  e9c02100          STRD     r2,r1,[r0,#0]
0014f8  2123              MOVS     r1,#0x23
0014fa  9809              LDR      r0,[sp,#0x24]
0014fc  7201              STRB     r1,[r0,#8]
0014fe  e015              B        |L16.5420|
                  |L16.5376|
;;;1260           }
;;;1261           else
;;;1262             Protect(luaT_trybinassocTM(L, p1, p2, ra, TESTARG_k(i), TM_BOR));
001500  9914              LDR      r1,[sp,#0x50]
001502  981a              LDR      r0,[sp,#0x68]
001504  6101              STR      r1,[r0,#0x10]
001506  981a              LDR      r0,[sp,#0x68]
001508  6841              LDR      r1,[r0,#4]
00150a  9819              LDR      r0,[sp,#0x64]
00150c  60c1              STR      r1,[r0,#0xc]
00150e  2110              MOVS     r1,#0x10
001510  9811              LDR      r0,[sp,#0x44]
001512  f4004000          AND      r0,r0,#0x8000
001516  e9cd0100          STRD     r0,r1,[sp,#0]
00151a  9b10              LDR      r3,[sp,#0x40]
00151c  e9dd210d          LDRD     r2,r1,[sp,#0x34]
001520  9819              LDR      r0,[sp,#0x64]
001522  f7fffffe          BL       luaT_trybinassocTM
001526  981a              LDR      r0,[sp,#0x68]
001528  6941              LDR      r1,[r0,#0x14]
00152a  9113              STR      r1,[sp,#0x4c]
                  |L16.5420|
;;;1263           vmbreak;
00152c  e40b              B        |L16.3398|
;;;1264         }
;;;1265         vmcase(OP_BXORK) {
;;;1266           TValue *p1 = vRB(i);
00152e  9811              LDR      r0,[sp,#0x44]
001530  f3c04007          UBFX     r0,r0,#16,#8
001534  9915              LDR      r1,[sp,#0x54]
001536  eb011100          ADD      r1,r1,r0,LSL #4
00153a  910e              STR      r1,[sp,#0x38]
;;;1267           TValue *p2 = KC(i);
00153c  9811              LDR      r0,[sp,#0x44]
00153e  0e01              LSRS     r1,r0,#24
001540  9816              LDR      r0,[sp,#0x58]
001542  eb001101          ADD      r1,r0,r1,LSL #4
001546  910d              STR      r1,[sp,#0x34]
;;;1268           lua_Integer i1;
;;;1269           if (tointegerns(p1, &i1)) {
001548  980e              LDR      r0,[sp,#0x38]
00154a  7a00              LDRB     r0,[r0,#8]
00154c  2823              CMP      r0,#0x23
00154e  d105              BNE      |L16.5468|
001550  980e              LDR      r0,[sp,#0x38]
001552  c806              LDM      r0!,{r1,r2}
001554  e9cd120a          STRD     r1,r2,[sp,#0x28]
001558  2001              MOVS     r0,#1
00155a  e004              B        |L16.5478|
                  |L16.5468|
00155c  2200              MOVS     r2,#0
00155e  a90a              ADD      r1,sp,#0x28
001560  980e              LDR      r0,[sp,#0x38]
001562  f7fffffe          BL       luaV_tointegerns
                  |L16.5478|
001566  b178              CBZ      r0,|L16.5512|
;;;1270             setivalue(vra, intop(^, i1, ivalue(p2)));
001568  980f              LDR      r0,[sp,#0x3c]
00156a  9009              STR      r0,[sp,#0x24]
00156c  980d              LDR      r0,[sp,#0x34]
00156e  e9d02100          LDRD     r2,r1,[r0,#0]
001572  e9dd300a          LDRD     r3,r0,[sp,#0x28]
001576  405a              EORS     r2,r2,r3
001578  4041              EORS     r1,r1,r0
00157a  9809              LDR      r0,[sp,#0x24]
00157c  e9c02100          STRD     r2,r1,[r0,#0]
001580  2123              MOVS     r1,#0x23
001582  9809              LDR      r0,[sp,#0x24]
001584  7201              STRB     r1,[r0,#8]
001586  e015              B        |L16.5556|
                  |L16.5512|
;;;1271           }
;;;1272           else
;;;1273             Protect(luaT_trybinassocTM(L, p1, p2, ra, TESTARG_k(i), TM_BXOR));
001588  9914              LDR      r1,[sp,#0x50]
00158a  981a              LDR      r0,[sp,#0x68]
00158c  6101              STR      r1,[r0,#0x10]
00158e  981a              LDR      r0,[sp,#0x68]
001590  6841              LDR      r1,[r0,#4]
001592  9819              LDR      r0,[sp,#0x64]
001594  60c1              STR      r1,[r0,#0xc]
001596  2111              MOVS     r1,#0x11
001598  9811              LDR      r0,[sp,#0x44]
00159a  f4004000          AND      r0,r0,#0x8000
00159e  e9cd0100          STRD     r0,r1,[sp,#0]
0015a2  9b10              LDR      r3,[sp,#0x40]
0015a4  e9dd210d          LDRD     r2,r1,[sp,#0x34]
0015a8  9819              LDR      r0,[sp,#0x64]
0015aa  f7fffffe          BL       luaT_trybinassocTM
0015ae  981a              LDR      r0,[sp,#0x68]
0015b0  6941              LDR      r1,[r0,#0x14]
0015b2  9113              STR      r1,[sp,#0x4c]
                  |L16.5556|
;;;1274           vmbreak;
0015b4  e447              B        |L16.3654|
;;;1275         }
;;;1276         vmcase(OP_BAND) {
;;;1277           TValue *rb = vRB(i);
0015b6  9811              LDR      r0,[sp,#0x44]
0015b8  f3c04007          UBFX     r0,r0,#16,#8
0015bc  9915              LDR      r1,[sp,#0x54]
0015be  eb011100          ADD      r1,r1,r0,LSL #4
0015c2  910e              STR      r1,[sp,#0x38]
;;;1278           TValue *rc = vRC(i);
0015c4  9811              LDR      r0,[sp,#0x44]
0015c6  0e01              LSRS     r1,r0,#24
0015c8  9815              LDR      r0,[sp,#0x54]
0015ca  eb001101          ADD      r1,r0,r1,LSL #4
0015ce  910d              STR      r1,[sp,#0x34]
;;;1279           lua_Integer ib; lua_Integer ic;
;;;1280           if (tointegerns(rb, &ib) && tointegerns(rc, &ic)) {
0015d0  980e              LDR      r0,[sp,#0x38]
0015d2  7a00              LDRB     r0,[r0,#8]
0015d4  2823              CMP      r0,#0x23
0015d6  d105              BNE      |L16.5604|
0015d8  980e              LDR      r0,[sp,#0x38]
0015da  c806              LDM      r0!,{r1,r2}
0015dc  e9cd120a          STRD     r1,r2,[sp,#0x28]
0015e0  2001              MOVS     r0,#1
0015e2  e004              B        |L16.5614|
                  |L16.5604|
0015e4  2200              MOVS     r2,#0
0015e6  a90a              ADD      r1,sp,#0x28
0015e8  980e              LDR      r0,[sp,#0x38]
0015ea  f7fffffe          BL       luaV_tointegerns
                  |L16.5614|
0015ee  b1f0              CBZ      r0,|L16.5678|
0015f0  980d              LDR      r0,[sp,#0x34]
0015f2  7a00              LDRB     r0,[r0,#8]
0015f4  2823              CMP      r0,#0x23
0015f6  d105              BNE      |L16.5636|
0015f8  980d              LDR      r0,[sp,#0x34]
0015fa  c806              LDM      r0!,{r1,r2}
0015fc  e9cd1208          STRD     r1,r2,[sp,#0x20]
001600  2001              MOVS     r0,#1
001602  e004              B        |L16.5646|
                  |L16.5636|
001604  2200              MOVS     r2,#0
001606  a908              ADD      r1,sp,#0x20
001608  980d              LDR      r0,[sp,#0x34]
00160a  f7fffffe          BL       luaV_tointegerns
                  |L16.5646|
00160e  b170              CBZ      r0,|L16.5678|
;;;1281             setivalue(vra, intop(&, ib, ic));
001610  980f              LDR      r0,[sp,#0x3c]
001612  9007              STR      r0,[sp,#0x1c]
001614  e9dd3008          LDRD     r3,r0,[sp,#0x20]
001618  e9dd210a          LDRD     r2,r1,[sp,#0x28]
00161c  401a              ANDS     r2,r2,r3
00161e  4001              ANDS     r1,r1,r0
001620  9807              LDR      r0,[sp,#0x1c]
001622  e9c02100          STRD     r2,r1,[r0,#0]
001626  2123              MOVS     r1,#0x23
001628  9807              LDR      r0,[sp,#0x1c]
00162a  7201              STRB     r1,[r0,#8]
00162c  e011              B        |L16.5714|
                  |L16.5678|
;;;1282           }
;;;1283           else
;;;1284             Protect(luaT_trybinTM(L, rb, rc, ra, TM_BAND));
00162e  9914              LDR      r1,[sp,#0x50]
001630  981a              LDR      r0,[sp,#0x68]
001632  6101              STR      r1,[r0,#0x10]
001634  981a              LDR      r0,[sp,#0x68]
001636  6841              LDR      r1,[r0,#4]
001638  9819              LDR      r0,[sp,#0x64]
00163a  60c1              STR      r1,[r0,#0xc]
00163c  200f              MOVS     r0,#0xf
00163e  9000              STR      r0,[sp,#0]
001640  9b10              LDR      r3,[sp,#0x40]
001642  e9dd210d          LDRD     r2,r1,[sp,#0x34]
001646  9819              LDR      r0,[sp,#0x64]
001648  f7fffffe          BL       luaT_trybinTM
00164c  981a              LDR      r0,[sp,#0x68]
00164e  6941              LDR      r1,[r0,#0x14]
001650  9113              STR      r1,[sp,#0x4c]
                  |L16.5714|
;;;1285           vmbreak;
001652  e445              B        |L16.3808|
;;;1286         }
;;;1287         vmcase(OP_BOR) {
;;;1288           TValue *rb = vRB(i);
001654  9811              LDR      r0,[sp,#0x44]
001656  f3c04007          UBFX     r0,r0,#16,#8
00165a  9915              LDR      r1,[sp,#0x54]
00165c  eb011100          ADD      r1,r1,r0,LSL #4
001660  910e              STR      r1,[sp,#0x38]
;;;1289           TValue *rc = vRC(i);
001662  9811              LDR      r0,[sp,#0x44]
001664  0e01              LSRS     r1,r0,#24
001666  9815              LDR      r0,[sp,#0x54]
001668  eb001101          ADD      r1,r0,r1,LSL #4
00166c  910d              STR      r1,[sp,#0x34]
;;;1290           lua_Integer ib; lua_Integer ic;
;;;1291           if (tointegerns(rb, &ib) && tointegerns(rc, &ic)) {
00166e  980e              LDR      r0,[sp,#0x38]
001670  7a00              LDRB     r0,[r0,#8]
001672  2823              CMP      r0,#0x23
001674  d105              BNE      |L16.5762|
001676  980e              LDR      r0,[sp,#0x38]
001678  c806              LDM      r0!,{r1,r2}
00167a  e9cd120a          STRD     r1,r2,[sp,#0x28]
00167e  2001              MOVS     r0,#1
001680  e004              B        |L16.5772|
                  |L16.5762|
001682  2200              MOVS     r2,#0
001684  a90a              ADD      r1,sp,#0x28
001686  980e              LDR      r0,[sp,#0x38]
001688  f7fffffe          BL       luaV_tointegerns
                  |L16.5772|
00168c  b1e8              CBZ      r0,|L16.5834|
00168e  980d              LDR      r0,[sp,#0x34]
001690  7a00              LDRB     r0,[r0,#8]
001692  2823              CMP      r0,#0x23
001694  d105              BNE      |L16.5794|
001696  980d              LDR      r0,[sp,#0x34]
001698  c806              LDM      r0!,{r1,r2}
00169a  e9cd1208          STRD     r1,r2,[sp,#0x20]
00169e  2001              MOVS     r0,#1
0016a0  e004              B        |L16.5804|
                  |L16.5794|
0016a2  2200              MOVS     r2,#0
0016a4  a908              ADD      r1,sp,#0x20
0016a6  980d              LDR      r0,[sp,#0x34]
0016a8  f7fffffe          BL       luaV_tointegerns
                  |L16.5804|
0016ac  b168              CBZ      r0,|L16.5834|
;;;1292             setivalue(vra, intop(|, ib, ic));
0016ae  980f              LDR      r0,[sp,#0x3c]
0016b0  9007              STR      r0,[sp,#0x1c]
0016b2  e9dd1408          LDRD     r1,r4,[sp,#0x20]
0016b6  e9dd020a          LDRD     r0,r2,[sp,#0x28]
0016ba  4308              ORRS     r0,r0,r1
0016bc  4322              ORRS     r2,r2,r4
0016be  9907              LDR      r1,[sp,#0x1c]
0016c0  c105              STM      r1!,{r0,r2}
0016c2  2223              MOVS     r2,#0x23
0016c4  9807              LDR      r0,[sp,#0x1c]
0016c6  7202              STRB     r2,[r0,#8]
0016c8  e011              B        |L16.5870|
                  |L16.5834|
;;;1293           }
;;;1294           else
;;;1295             Protect(luaT_trybinTM(L, rb, rc, ra, TM_BOR));
0016ca  9914              LDR      r1,[sp,#0x50]
0016cc  981a              LDR      r0,[sp,#0x68]
0016ce  6101              STR      r1,[r0,#0x10]
0016d0  981a              LDR      r0,[sp,#0x68]
0016d2  6841              LDR      r1,[r0,#4]
0016d4  9819              LDR      r0,[sp,#0x64]
0016d6  60c1              STR      r1,[r0,#0xc]
0016d8  2010              MOVS     r0,#0x10
0016da  9000              STR      r0,[sp,#0]
0016dc  9b10              LDR      r3,[sp,#0x40]
0016de  e9dd210d          LDRD     r2,r1,[sp,#0x34]
0016e2  9819              LDR      r0,[sp,#0x64]
0016e4  f7fffffe          BL       luaT_trybinTM
0016e8  981a              LDR      r0,[sp,#0x68]
0016ea  6941              LDR      r1,[r0,#0x14]
0016ec  9113              STR      r1,[sp,#0x4c]
                  |L16.5870|
;;;1296           vmbreak;
0016ee  e444              B        |L16.3962|
;;;1297         }
;;;1298         vmcase(OP_BXOR) {
;;;1299           TValue *rb = vRB(i);
0016f0  9811              LDR      r0,[sp,#0x44]
0016f2  f3c04007          UBFX     r0,r0,#16,#8
0016f6  9915              LDR      r1,[sp,#0x54]
0016f8  eb011100          ADD      r1,r1,r0,LSL #4
0016fc  910e              STR      r1,[sp,#0x38]
;;;1300           TValue *rc = vRC(i);
0016fe  9811              LDR      r0,[sp,#0x44]
001700  0e01              LSRS     r1,r0,#24
001702  9815              LDR      r0,[sp,#0x54]
001704  eb001101          ADD      r1,r0,r1,LSL #4
001708  910d              STR      r1,[sp,#0x34]
;;;1301           lua_Integer ib; lua_Integer ic;
;;;1302           if (tointegerns(rb, &ib) && tointegerns(rc, &ic)) {
00170a  980e              LDR      r0,[sp,#0x38]
00170c  7a00              LDRB     r0,[r0,#8]
00170e  2823              CMP      r0,#0x23
001710  d105              BNE      |L16.5918|
001712  980e              LDR      r0,[sp,#0x38]
001714  c806              LDM      r0!,{r1,r2}
001716  e9cd120a          STRD     r1,r2,[sp,#0x28]
00171a  2001              MOVS     r0,#1
00171c  e004              B        |L16.5928|
                  |L16.5918|
00171e  2200              MOVS     r2,#0
001720  a90a              ADD      r1,sp,#0x28
001722  980e              LDR      r0,[sp,#0x38]
001724  f7fffffe          BL       luaV_tointegerns
                  |L16.5928|
001728  b1f0              CBZ      r0,|L16.5992|
00172a  980d              LDR      r0,[sp,#0x34]
00172c  7a00              LDRB     r0,[r0,#8]
00172e  2823              CMP      r0,#0x23
001730  d105              BNE      |L16.5950|
001732  980d              LDR      r0,[sp,#0x34]
001734  c806              LDM      r0!,{r1,r2}
001736  e9cd1208          STRD     r1,r2,[sp,#0x20]
00173a  2001              MOVS     r0,#1
00173c  e004              B        |L16.5960|
                  |L16.5950|
00173e  2200              MOVS     r2,#0
001740  a908              ADD      r1,sp,#0x20
001742  980d              LDR      r0,[sp,#0x34]
001744  f7fffffe          BL       luaV_tointegerns
                  |L16.5960|
001748  b170              CBZ      r0,|L16.5992|
;;;1303             setivalue(vra, intop(^, ib, ic));
00174a  980f              LDR      r0,[sp,#0x3c]
00174c  9007              STR      r0,[sp,#0x1c]
00174e  e9dd3008          LDRD     r3,r0,[sp,#0x20]
001752  e9dd210a          LDRD     r2,r1,[sp,#0x28]
001756  405a              EORS     r2,r2,r3
001758  4041              EORS     r1,r1,r0
00175a  9807              LDR      r0,[sp,#0x1c]
00175c  e9c02100          STRD     r2,r1,[r0,#0]
001760  2123              MOVS     r1,#0x23
001762  9807              LDR      r0,[sp,#0x1c]
001764  7201              STRB     r1,[r0,#8]
001766  e011              B        |L16.6028|
                  |L16.5992|
;;;1304           }
;;;1305           else
;;;1306             Protect(luaT_trybinTM(L, rb, rc, ra, TM_BXOR));
001768  9914              LDR      r1,[sp,#0x50]
00176a  981a              LDR      r0,[sp,#0x68]
00176c  6101              STR      r1,[r0,#0x10]
00176e  981a              LDR      r0,[sp,#0x68]
001770  6841              LDR      r1,[r0,#4]
001772  9819              LDR      r0,[sp,#0x64]
001774  60c1              STR      r1,[r0,#0xc]
001776  2011              MOVS     r0,#0x11
001778  9000              STR      r0,[sp,#0]
00177a  9b10              LDR      r3,[sp,#0x40]
00177c  e9dd210d          LDRD     r2,r1,[sp,#0x34]
001780  9819              LDR      r0,[sp,#0x64]
001782  f7fffffe          BL       luaT_trybinTM
001786  981a              LDR      r0,[sp,#0x68]
001788  6941              LDR      r1,[r0,#0x14]
00178a  9113              STR      r1,[sp,#0x4c]
                  |L16.6028|
;;;1307           vmbreak;
00178c  e45b              B        |L16.4166|
;;;1308         }
;;;1309         vmcase(OP_SHRI) {
;;;1310           TValue *rb = vRB(i);
00178e  9811              LDR      r0,[sp,#0x44]
001790  f3c04007          UBFX     r0,r0,#16,#8
001794  9915              LDR      r1,[sp,#0x54]
001796  eb011100          ADD      r1,r1,r0,LSL #4
00179a  910e              STR      r1,[sp,#0x38]
;;;1311           int ic = GETARG_sC(i);
00179c  9811              LDR      r0,[sp,#0x44]
00179e  0e00              LSRS     r0,r0,#24
0017a0  387f              SUBS     r0,r0,#0x7f
0017a2  900d              STR      r0,[sp,#0x34]
;;;1312           lua_Integer ib;
;;;1313           if (tointegerns(rb, &ib)) {
0017a4  980e              LDR      r0,[sp,#0x38]
0017a6  7a00              LDRB     r0,[r0,#8]
0017a8  2823              CMP      r0,#0x23
0017aa  d105              BNE      |L16.6072|
0017ac  980e              LDR      r0,[sp,#0x38]
0017ae  c806              LDM      r0!,{r1,r2}
0017b0  e9cd120a          STRD     r1,r2,[sp,#0x28]
0017b4  2001              MOVS     r0,#1
0017b6  e004              B        |L16.6082|
                  |L16.6072|
0017b8  2200              MOVS     r2,#0
0017ba  a90a              ADD      r1,sp,#0x28
0017bc  980e              LDR      r0,[sp,#0x38]
0017be  f7fffffe          BL       luaV_tointegerns
                  |L16.6082|
0017c2  b170              CBZ      r0,|L16.6114|
;;;1314             setivalue(vra, luaV_shiftl(ib, -ic));
0017c4  980f              LDR      r0,[sp,#0x3c]
0017c6  9009              STR      r0,[sp,#0x24]
0017c8  980d              LDR      r0,[sp,#0x34]
0017ca  4242              RSBS     r2,r0,#0
0017cc  17d3              ASRS     r3,r2,#31
0017ce  e9dd010a          LDRD     r0,r1,[sp,#0x28]
0017d2  f7fffffe          BL       luaV_shiftl
0017d6  9a09              LDR      r2,[sp,#0x24]
0017d8  c203              STM      r2!,{r0,r1}
0017da  2123              MOVS     r1,#0x23
0017dc  9809              LDR      r0,[sp,#0x24]
0017de  7201              STRB     r1,[r0,#8]
0017e0  e01f              B        |L16.6178|
                  |L16.6114|
;;;1315           }
;;;1316           else {
;;;1317             TMS ev = TM_SHR;
0017e2  2113              MOVS     r1,#0x13
0017e4  9109              STR      r1,[sp,#0x24]
;;;1318             if (TESTARG_k(i)) {
0017e6  9811              LDR      r0,[sp,#0x44]
0017e8  f4004000          AND      r0,r0,#0x8000
0017ec  b120              CBZ      r0,|L16.6136|
;;;1319               ic = -ic;  ev = TM_SHL;
0017ee  980d              LDR      r0,[sp,#0x34]
0017f0  4241              RSBS     r1,r0,#0
0017f2  910d              STR      r1,[sp,#0x34]
0017f4  2112              MOVS     r1,#0x12
0017f6  9109              STR      r1,[sp,#0x24]
                  |L16.6136|
;;;1320             }
;;;1321             Protect(luaT_trybiniTM(L, rb, ic, 0, ra, ev));
0017f8  9914              LDR      r1,[sp,#0x50]
0017fa  981a              LDR      r0,[sp,#0x68]
0017fc  6101              STR      r1,[r0,#0x10]
0017fe  981a              LDR      r0,[sp,#0x68]
001800  6841              LDR      r1,[r0,#4]
001802  9819              LDR      r0,[sp,#0x64]
001804  60c1              STR      r1,[r0,#0xc]
001806  9909              LDR      r1,[sp,#0x24]
001808  9810              LDR      r0,[sp,#0x40]
00180a  2300              MOVS     r3,#0
00180c  e9cd0100          STRD     r0,r1,[sp,#0]
001810  e9dd210d          LDRD     r2,r1,[sp,#0x34]
001814  9819              LDR      r0,[sp,#0x64]
001816  f7fffffe          BL       luaT_trybiniTM
00181a  981a              LDR      r0,[sp,#0x68]
00181c  6941              LDR      r1,[r0,#0x14]
00181e  9113              STR      r1,[sp,#0x4c]
;;;1322           }
001820  bf00              NOP      
                  |L16.6178|
;;;1323           vmbreak;
001822  e410              B        |L16.4166|
;;;1324         }
;;;1325         vmcase(OP_SHLI) {
;;;1326           TValue *rb = vRB(i);
001824  9811              LDR      r0,[sp,#0x44]
001826  f3c04007          UBFX     r0,r0,#16,#8
00182a  9915              LDR      r1,[sp,#0x54]
00182c  eb011100          ADD      r1,r1,r0,LSL #4
001830  910e              STR      r1,[sp,#0x38]
;;;1327           int ic = GETARG_sC(i);
001832  9811              LDR      r0,[sp,#0x44]
001834  0e00              LSRS     r0,r0,#24
001836  387f              SUBS     r0,r0,#0x7f
001838  900d              STR      r0,[sp,#0x34]
;;;1328           lua_Integer ib;
;;;1329           if (tointegerns(rb, &ib)) {
00183a  980e              LDR      r0,[sp,#0x38]
00183c  7a00              LDRB     r0,[r0,#8]
00183e  2823              CMP      r0,#0x23
001840  d105              BNE      |L16.6222|
001842  980e              LDR      r0,[sp,#0x38]
001844  c806              LDM      r0!,{r1,r2}
001846  e9cd120a          STRD     r1,r2,[sp,#0x28]
00184a  2001              MOVS     r0,#1
00184c  e004              B        |L16.6232|
                  |L16.6222|
00184e  2200              MOVS     r2,#0
001850  a90a              ADD      r1,sp,#0x28
001852  980e              LDR      r0,[sp,#0x38]
001854  f7fffffe          BL       luaV_tointegerns
                  |L16.6232|
001858  b168              CBZ      r0,|L16.6262|
;;;1330             setivalue(vra, luaV_shiftl(ic, ib));
00185a  980f              LDR      r0,[sp,#0x3c]
00185c  9009              STR      r0,[sp,#0x24]
00185e  980d              LDR      r0,[sp,#0x34]
001860  17c1              ASRS     r1,r0,#31
001862  e9dd230a          LDRD     r2,r3,[sp,#0x28]
001866  f7fffffe          BL       luaV_shiftl
00186a  9a09              LDR      r2,[sp,#0x24]
00186c  c203              STM      r2!,{r0,r1}
00186e  2123              MOVS     r1,#0x23
001870  9809              LDR      r0,[sp,#0x24]
001872  7201              STRB     r1,[r0,#8]
001874  e013              B        |L16.6302|
                  |L16.6262|
;;;1331           }
;;;1332           else
;;;1333             Protect(luaT_trybiniTM(L, rb, ic, 1, ra, TM_SHL));
001876  9914              LDR      r1,[sp,#0x50]
001878  981a              LDR      r0,[sp,#0x68]
00187a  6101              STR      r1,[r0,#0x10]
00187c  981a              LDR      r0,[sp,#0x68]
00187e  6841              LDR      r1,[r0,#4]
001880  9819              LDR      r0,[sp,#0x64]
001882  60c1              STR      r1,[r0,#0xc]
001884  2112              MOVS     r1,#0x12
001886  9810              LDR      r0,[sp,#0x40]
001888  2301              MOVS     r3,#1
00188a  e9cd0100          STRD     r0,r1,[sp,#0]
00188e  e9dd210d          LDRD     r2,r1,[sp,#0x34]
001892  9819              LDR      r0,[sp,#0x64]
001894  f7fffffe          BL       luaT_trybiniTM
001898  981a              LDR      r0,[sp,#0x68]
00189a  6941              LDR      r1,[r0,#0x14]
00189c  9113              STR      r1,[sp,#0x4c]
                  |L16.6302|
;;;1334           vmbreak;
00189e  e454              B        |L16.4426|
;;;1335         }
;;;1336         vmcase(OP_SHL) {
;;;1337           TValue *rb = vRB(i);
0018a0  9811              LDR      r0,[sp,#0x44]
0018a2  f3c04007          UBFX     r0,r0,#16,#8
0018a6  9915              LDR      r1,[sp,#0x54]
0018a8  eb011100          ADD      r1,r1,r0,LSL #4
0018ac  910e              STR      r1,[sp,#0x38]
;;;1338           TValue *rc = vRC(i);
0018ae  9811              LDR      r0,[sp,#0x44]
0018b0  0e01              LSRS     r1,r0,#24
0018b2  9815              LDR      r0,[sp,#0x54]
0018b4  eb001101          ADD      r1,r0,r1,LSL #4
0018b8  910d              STR      r1,[sp,#0x34]
;;;1339           lua_Integer ib; lua_Integer ic;
;;;1340           if (tointegerns(rb, &ib) && tointegerns(rc, &ic)) {
0018ba  980e              LDR      r0,[sp,#0x38]
0018bc  7a00              LDRB     r0,[r0,#8]
0018be  2823              CMP      r0,#0x23
0018c0  d105              BNE      |L16.6350|
0018c2  980e              LDR      r0,[sp,#0x38]
0018c4  c806              LDM      r0!,{r1,r2}
0018c6  e9cd120a          STRD     r1,r2,[sp,#0x28]
0018ca  2001              MOVS     r0,#1
0018cc  e004              B        |L16.6360|
                  |L16.6350|
0018ce  2200              MOVS     r2,#0
0018d0  a90a              ADD      r1,sp,#0x28
0018d2  980e              LDR      r0,[sp,#0x38]
0018d4  f7fffffe          BL       luaV_tointegerns
                  |L16.6360|
0018d8  b1e8              CBZ      r0,|L16.6422|
0018da  980d              LDR      r0,[sp,#0x34]
0018dc  7a00              LDRB     r0,[r0,#8]
0018de  2823              CMP      r0,#0x23
0018e0  d105              BNE      |L16.6382|
0018e2  980d              LDR      r0,[sp,#0x34]
0018e4  c806              LDM      r0!,{r1,r2}
0018e6  e9cd1208          STRD     r1,r2,[sp,#0x20]
0018ea  2001              MOVS     r0,#1
0018ec  e004              B        |L16.6392|
                  |L16.6382|
0018ee  2200              MOVS     r2,#0
0018f0  a908              ADD      r1,sp,#0x20
0018f2  980d              LDR      r0,[sp,#0x34]
0018f4  f7fffffe          BL       luaV_tointegerns
                  |L16.6392|
0018f8  b168              CBZ      r0,|L16.6422|
;;;1341             setivalue(vra, luaV_shiftl(ib, ic));
0018fa  980f              LDR      r0,[sp,#0x3c]
0018fc  9007              STR      r0,[sp,#0x1c]
0018fe  e9dd2308          LDRD     r2,r3,[sp,#0x20]
001902  e9dd010a          LDRD     r0,r1,[sp,#0x28]
001906  f7fffffe          BL       luaV_shiftl
00190a  9a07              LDR      r2,[sp,#0x1c]
00190c  c203              STM      r2!,{r0,r1}
00190e  2123              MOVS     r1,#0x23
001910  9807              LDR      r0,[sp,#0x1c]
001912  7201              STRB     r1,[r0,#8]
001914  e011              B        |L16.6458|
                  |L16.6422|
;;;1342           }
;;;1343           else
;;;1344             Protect(luaT_trybinTM(L, rb, rc, ra, TM_SHL));
001916  9914              LDR      r1,[sp,#0x50]
001918  981a              LDR      r0,[sp,#0x68]
00191a  6101              STR      r1,[r0,#0x10]
00191c  981a              LDR      r0,[sp,#0x68]
00191e  6841              LDR      r1,[r0,#4]
001920  9819              LDR      r0,[sp,#0x64]
001922  60c1              STR      r1,[r0,#0xc]
001924  2012              MOVS     r0,#0x12
001926  9000              STR      r0,[sp,#0]
001928  9b10              LDR      r3,[sp,#0x40]
00192a  e9dd210d          LDRD     r2,r1,[sp,#0x34]
00192e  9819              LDR      r0,[sp,#0x64]
001930  f7fffffe          BL       luaT_trybinTM
001934  981a              LDR      r0,[sp,#0x68]
001936  6941              LDR      r1,[r0,#0x14]
001938  9113              STR      r1,[sp,#0x4c]
                  |L16.6458|
;;;1345           vmbreak;
00193a  e406              B        |L16.4426|
;;;1346         }
;;;1347         vmcase(OP_SHR) {
;;;1348           TValue *rb = vRB(i);
00193c  9811              LDR      r0,[sp,#0x44]
00193e  f3c04007          UBFX     r0,r0,#16,#8
001942  9915              LDR      r1,[sp,#0x54]
001944  eb011100          ADD      r1,r1,r0,LSL #4
001948  910e              STR      r1,[sp,#0x38]
;;;1349           TValue *rc = vRC(i);
00194a  9811              LDR      r0,[sp,#0x44]
00194c  0e01              LSRS     r1,r0,#24
00194e  9815              LDR      r0,[sp,#0x54]
001950  eb001101          ADD      r1,r0,r1,LSL #4
001954  910d              STR      r1,[sp,#0x34]
;;;1350           lua_Integer ib; lua_Integer ic;
;;;1351           if (tointegerns(rb, &ib) && tointegerns(rc, &ic)) {
001956  980e              LDR      r0,[sp,#0x38]
001958  7a00              LDRB     r0,[r0,#8]
00195a  2823              CMP      r0,#0x23
00195c  d105              BNE      |L16.6506|
00195e  980e              LDR      r0,[sp,#0x38]
001960  c806              LDM      r0!,{r1,r2}
001962  e9cd120a          STRD     r1,r2,[sp,#0x28]
001966  2001              MOVS     r0,#1
001968  e004              B        |L16.6516|
                  |L16.6506|
00196a  2200              MOVS     r2,#0
00196c  a90a              ADD      r1,sp,#0x28
00196e  980e              LDR      r0,[sp,#0x38]
001970  f7fffffe          BL       luaV_tointegerns
                  |L16.6516|
001974  b308              CBZ      r0,|L16.6586|
001976  980d              LDR      r0,[sp,#0x34]
001978  7a00              LDRB     r0,[r0,#8]
00197a  2823              CMP      r0,#0x23
00197c  d105              BNE      |L16.6538|
00197e  980d              LDR      r0,[sp,#0x34]
001980  c806              LDM      r0!,{r1,r2}
001982  e9cd1208          STRD     r1,r2,[sp,#0x20]
001986  2001              MOVS     r0,#1
001988  e004              B        |L16.6548|
                  |L16.6538|
00198a  2200              MOVS     r2,#0
00198c  a908              ADD      r1,sp,#0x20
00198e  980d              LDR      r0,[sp,#0x34]
001990  f7fffffe          BL       luaV_tointegerns
                  |L16.6548|
001994  b188              CBZ      r0,|L16.6586|
;;;1352             setivalue(vra, luaV_shiftl(ib, -ic));
001996  980f              LDR      r0,[sp,#0x3c]
001998  9007              STR      r0,[sp,#0x1c]
00199a  2300              MOVS     r3,#0
00199c  e9dd1008          LDRD     r1,r0,[sp,#0x20]
0019a0  424a              RSBS     r2,r1,#0
0019a2  eb630300          SBC      r3,r3,r0
0019a6  e9dd010a          LDRD     r0,r1,[sp,#0x28]
0019aa  f7fffffe          BL       luaV_shiftl
0019ae  9a07              LDR      r2,[sp,#0x1c]
0019b0  c203              STM      r2!,{r0,r1}
0019b2  2123              MOVS     r1,#0x23
0019b4  9807              LDR      r0,[sp,#0x1c]
0019b6  7201              STRB     r1,[r0,#8]
0019b8  e011              B        |L16.6622|
                  |L16.6586|
;;;1353           }
;;;1354           else
;;;1355             Protect(luaT_trybinTM(L, rb, rc, ra, TM_SHR));
0019ba  9914              LDR      r1,[sp,#0x50]
0019bc  981a              LDR      r0,[sp,#0x68]
0019be  6101              STR      r1,[r0,#0x10]
0019c0  981a              LDR      r0,[sp,#0x68]
0019c2  6841              LDR      r1,[r0,#4]
0019c4  9819              LDR      r0,[sp,#0x64]
0019c6  60c1              STR      r1,[r0,#0xc]
0019c8  2013              MOVS     r0,#0x13
0019ca  9000              STR      r0,[sp,#0]
0019cc  9b10              LDR      r3,[sp,#0x40]
0019ce  e9dd210d          LDRD     r2,r1,[sp,#0x34]
0019d2  9819              LDR      r0,[sp,#0x64]
0019d4  f7fffffe          BL       luaT_trybinTM
0019d8  981a              LDR      r0,[sp,#0x68]
0019da  6941              LDR      r1,[r0,#0x14]
0019dc  9113              STR      r1,[sp,#0x4c]
                  |L16.6622|
;;;1356           vmbreak;
0019de  e436              B        |L16.4686|
;;;1357         }
;;;1358         vmcase(OP_MOD) {
;;;1359           TValue *rb = vRB(i);
0019e0  9811              LDR      r0,[sp,#0x44]
0019e2  f3c04007          UBFX     r0,r0,#16,#8
0019e6  9915              LDR      r1,[sp,#0x54]
0019e8  eb011100          ADD      r1,r1,r0,LSL #4
0019ec  910e              STR      r1,[sp,#0x38]
;;;1360           TValue *rc = vRC(i);
0019ee  9811              LDR      r0,[sp,#0x44]
0019f0  0e01              LSRS     r1,r0,#24
0019f2  9815              LDR      r0,[sp,#0x54]
0019f4  eb001101          ADD      r1,r0,r1,LSL #4
0019f8  910d              STR      r1,[sp,#0x34]
;;;1361           lua_Number nb; lua_Number nc;
;;;1362           if (ttisinteger(rb) && ttisinteger(rc)) {
0019fa  980e              LDR      r0,[sp,#0x38]
0019fc  7a00              LDRB     r0,[r0,#8]
0019fe  2823              CMP      r0,#0x23
001a00  d11c              BNE      |L16.6716|
001a02  980d              LDR      r0,[sp,#0x34]
001a04  7a00              LDRB     r0,[r0,#8]
001a06  2823              CMP      r0,#0x23
001a08  d118              BNE      |L16.6716|
;;;1363             lua_Integer ib = ivalue(rb); lua_Integer ic = ivalue(rc);
001a0a  990e              LDR      r1,[sp,#0x38]
001a0c  c903              LDM      r1,{r0,r1}
001a0e  e9cd0106          STRD     r0,r1,[sp,#0x18]
001a12  980d              LDR      r0,[sp,#0x34]
001a14  c803              LDM      r0,{r0,r1}
001a16  e9cd0104          STRD     r0,r1,[sp,#0x10]
;;;1364             setivalue(vra, luaV_mod(L, ib, ic));
001a1a  980f              LDR      r0,[sp,#0x3c]
001a1c  9003              STR      r0,[sp,#0xc]
001a1e  e9dd0104          LDRD     r0,r1,[sp,#0x10]
001a22  e9cd0100          STRD     r0,r1,[sp,#0]
001a26  e9dd2306          LDRD     r2,r3,[sp,#0x18]
001a2a  9819              LDR      r0,[sp,#0x64]
001a2c  f7fffffe          BL       luaV_mod
001a30  9a03              LDR      r2,[sp,#0xc]
001a32  c203              STM      r2!,{r0,r1}
001a34  2123              MOVS     r1,#0x23
001a36  9803              LDR      r0,[sp,#0xc]
001a38  7201              STRB     r1,[r0,#8]
;;;1365           }
001a3a  e068              B        |L16.6926|
                  |L16.6716|
;;;1366           else if (tonumberns(rb, nb) && tonumberns(rc, nc)) {
001a3c  980e              LDR      r0,[sp,#0x38]
001a3e  7a00              LDRB     r0,[r0,#8]
001a40  2813              CMP      r0,#0x13
001a42  d105              BNE      |L16.6736|
001a44  990e              LDR      r1,[sp,#0x38]
001a46  c903              LDM      r1,{r0,r1}
001a48  e9cd010a          STRD     r0,r1,[sp,#0x28]
001a4c  2001              MOVS     r0,#1
001a4e  e00e              B        |L16.6766|
                  |L16.6736|
001a50  980e              LDR      r0,[sp,#0x38]
001a52  7a00              LDRB     r0,[r0,#8]
001a54  2823              CMP      r0,#0x23
001a56  d109              BNE      |L16.6764|
001a58  990e              LDR      r1,[sp,#0x38]
001a5a  c903              LDM      r1,{r0,r1}
001a5c  e9cd0106          STRD     r0,r1,[sp,#0x18]
001a60  f7fffffe          BL       __aeabi_l2d
001a64  e9cd010a          STRD     r0,r1,[sp,#0x28]
001a68  2001              MOVS     r0,#1
001a6a  e000              B        |L16.6766|
                  |L16.6764|
001a6c  2000              MOVS     r0,#0
                  |L16.6766|
001a6e  b3d8              CBZ      r0,|L16.6888|
001a70  980d              LDR      r0,[sp,#0x34]
001a72  7a00              LDRB     r0,[r0,#8]
001a74  2813              CMP      r0,#0x13
001a76  d105              BNE      |L16.6788|
001a78  980d              LDR      r0,[sp,#0x34]
001a7a  c803              LDM      r0,{r0,r1}
001a7c  e9cd0108          STRD     r0,r1,[sp,#0x20]
001a80  2001              MOVS     r0,#1
001a82  e00e              B        |L16.6818|
                  |L16.6788|
001a84  980d              LDR      r0,[sp,#0x34]
001a86  7a00              LDRB     r0,[r0,#8]
001a88  2823              CMP      r0,#0x23
001a8a  d109              BNE      |L16.6816|
001a8c  980d              LDR      r0,[sp,#0x34]
001a8e  c803              LDM      r0,{r0,r1}
001a90  e9cd0106          STRD     r0,r1,[sp,#0x18]
001a94  f7fffffe          BL       __aeabi_l2d
001a98  e9cd0108          STRD     r0,r1,[sp,#0x20]
001a9c  2001              MOVS     r0,#1
001a9e  e000              B        |L16.6818|
                  |L16.6816|
001aa0  2000              MOVS     r0,#0
                  |L16.6818|
001aa2  b308              CBZ      r0,|L16.6888|
;;;1367             lua_Number m;
;;;1368             luai_nummod(L, nb, nc, m);
001aa4  e9dd2308          LDRD     r2,r3,[sp,#0x20]
001aa8  e9dd010a          LDRD     r0,r1,[sp,#0x28]
001aac  f7fffffe          BL       fmod
001ab0  e9cd0106          STRD     r0,r1,[sp,#0x18]
001ab4  a806              ADD      r0,sp,#0x18
001ab6  c80f              LDM      r0,{r0-r3}
001ab8  f7fffffe          BL       __aeabi_dmul
001abc  2200              MOVS     r2,#0
001abe  4613              MOV      r3,r2
001ac0  e9cd0104          STRD     r0,r1,[sp,#0x10]
001ac4  f7fffffe          BL       __aeabi_cdcmple
001ac8  d205              BCS      |L16.6870|
001aca  a806              ADD      r0,sp,#0x18
001acc  c80f              LDM      r0,{r0-r3}
001ace  f7fffffe          BL       __aeabi_dadd
001ad2  e9cd0106          STRD     r0,r1,[sp,#0x18]
                  |L16.6870|
;;;1369             setfltvalue(vra, m);
001ad6  980f              LDR      r0,[sp,#0x3c]
001ad8  9005              STR      r0,[sp,#0x14]
001ada  a805              ADD      r0,sp,#0x14
001adc  c807              LDM      r0,{r0-r2}
001ade  c006              STM      r0!,{r1,r2}
001ae0  2113              MOVS     r1,#0x13
001ae2  9805              LDR      r0,[sp,#0x14]
001ae4  7201              STRB     r1,[r0,#8]
;;;1370           }
001ae6  e012              B        |L16.6926|
                  |L16.6888|
001ae8  e7ff              B        |L16.6890|
                  |L16.6890|
;;;1371           else
;;;1372             Protect(luaT_trybinTM(L, rb, rc, ra, TM_MOD));
001aea  9914              LDR      r1,[sp,#0x50]
001aec  981a              LDR      r0,[sp,#0x68]
001aee  6101              STR      r1,[r0,#0x10]
001af0  981a              LDR      r0,[sp,#0x68]
001af2  6841              LDR      r1,[r0,#4]
001af4  9819              LDR      r0,[sp,#0x64]
001af6  60c1              STR      r1,[r0,#0xc]
001af8  200b              MOVS     r0,#0xb
001afa  9000              STR      r0,[sp,#0]
001afc  9b10              LDR      r3,[sp,#0x40]
001afe  e9dd210d          LDRD     r2,r1,[sp,#0x34]
001b02  9819              LDR      r0,[sp,#0x64]
001b04  f7fffffe          BL       luaT_trybinTM
001b08  981a              LDR      r0,[sp,#0x68]
001b0a  6941              LDR      r1,[r0,#0x14]
001b0c  9113              STR      r1,[sp,#0x4c]
                  |L16.6926|
;;;1373           vmbreak;
001b0e  e423              B        |L16.4952|
;;;1374         }
;;;1375         vmcase(OP_IDIV) {  /* floor division */
;;;1376           TValue *rb = vRB(i);
001b10  9811              LDR      r0,[sp,#0x44]
001b12  f3c04007          UBFX     r0,r0,#16,#8
001b16  9915              LDR      r1,[sp,#0x54]
001b18  eb011100          ADD      r1,r1,r0,LSL #4
001b1c  910e              STR      r1,[sp,#0x38]
;;;1377           TValue *rc = vRC(i);
001b1e  9811              LDR      r0,[sp,#0x44]
001b20  0e01              LSRS     r1,r0,#24
001b22  9815              LDR      r0,[sp,#0x54]
001b24  eb001101          ADD      r1,r0,r1,LSL #4
001b28  910d              STR      r1,[sp,#0x34]
;;;1378           lua_Number nb; lua_Number nc;
;;;1379           if (ttisinteger(rb) && ttisinteger(rc)) {
001b2a  980e              LDR      r0,[sp,#0x38]
001b2c  7a00              LDRB     r0,[r0,#8]
001b2e  2823              CMP      r0,#0x23
001b30  d11c              BNE      |L16.7020|
001b32  980d              LDR      r0,[sp,#0x34]
001b34  7a00              LDRB     r0,[r0,#8]
001b36  2823              CMP      r0,#0x23
001b38  d118              BNE      |L16.7020|
;;;1380             lua_Integer ib = ivalue(rb); lua_Integer ic = ivalue(rc);
001b3a  980e              LDR      r0,[sp,#0x38]
001b3c  c803              LDM      r0,{r0,r1}
001b3e  e9cd0106          STRD     r0,r1,[sp,#0x18]
001b42  980d              LDR      r0,[sp,#0x34]
001b44  c803              LDM      r0,{r0,r1}
001b46  e9cd0104          STRD     r0,r1,[sp,#0x10]
;;;1381             setivalue(vra, luaV_div(L, ib, ic));
001b4a  980f              LDR      r0,[sp,#0x3c]
001b4c  9003              STR      r0,[sp,#0xc]
001b4e  e9dd0104          LDRD     r0,r1,[sp,#0x10]
001b52  e9cd0100          STRD     r0,r1,[sp,#0]
001b56  e9dd2306          LDRD     r2,r3,[sp,#0x18]
001b5a  9819              LDR      r0,[sp,#0x64]
001b5c  f7fffffe          BL       luaV_div
001b60  9a03              LDR      r2,[sp,#0xc]
001b62  c203              STM      r2!,{r0,r1}
001b64  2123              MOVS     r1,#0x23
001b66  9803              LDR      r0,[sp,#0xc]
001b68  7201              STRB     r1,[r0,#8]
;;;1382           }
001b6a  e057              B        |L16.7196|
                  |L16.7020|
;;;1383           else if (tonumberns(rb, nb) && tonumberns(rc, nc)) {
001b6c  980e              LDR      r0,[sp,#0x38]
001b6e  7a00              LDRB     r0,[r0,#8]
001b70  2813              CMP      r0,#0x13
001b72  d105              BNE      |L16.7040|
001b74  980e              LDR      r0,[sp,#0x38]
001b76  c803              LDM      r0,{r0,r1}
001b78  e9cd010a          STRD     r0,r1,[sp,#0x28]
001b7c  2001              MOVS     r0,#1
001b7e  e00e              B        |L16.7070|
                  |L16.7040|
001b80  980e              LDR      r0,[sp,#0x38]
001b82  7a00              LDRB     r0,[r0,#8]
001b84  2823              CMP      r0,#0x23
001b86  d109              BNE      |L16.7068|
001b88  990e              LDR      r1,[sp,#0x38]
001b8a  c903              LDM      r1,{r0,r1}
001b8c  e9cd0106          STRD     r0,r1,[sp,#0x18]
001b90  f7fffffe          BL       __aeabi_l2d
001b94  e9cd010a          STRD     r0,r1,[sp,#0x28]
001b98  2001              MOVS     r0,#1
001b9a  e000              B        |L16.7070|
                  |L16.7068|
001b9c  2000              MOVS     r0,#0
                  |L16.7070|
001b9e  b358              CBZ      r0,|L16.7160|
001ba0  980d              LDR      r0,[sp,#0x34]
001ba2  7a00              LDRB     r0,[r0,#8]
001ba4  2813              CMP      r0,#0x13
001ba6  d105              BNE      |L16.7092|
001ba8  980d              LDR      r0,[sp,#0x34]
001baa  c803              LDM      r0,{r0,r1}
001bac  e9cd0108          STRD     r0,r1,[sp,#0x20]
001bb0  2001              MOVS     r0,#1
001bb2  e00e              B        |L16.7122|
                  |L16.7092|
001bb4  980d              LDR      r0,[sp,#0x34]
001bb6  7a00              LDRB     r0,[r0,#8]
001bb8  2823              CMP      r0,#0x23
001bba  d109              BNE      |L16.7120|
001bbc  980d              LDR      r0,[sp,#0x34]
001bbe  c803              LDM      r0,{r0,r1}
001bc0  e9cd0106          STRD     r0,r1,[sp,#0x18]
001bc4  f7fffffe          BL       __aeabi_l2d
001bc8  e9cd0108          STRD     r0,r1,[sp,#0x20]
001bcc  2001              MOVS     r0,#1
001bce  e000              B        |L16.7122|
                  |L16.7120|
001bd0  2000              MOVS     r0,#0
                  |L16.7122|
001bd2  b188              CBZ      r0,|L16.7160|
;;;1384             setfltvalue(vra, luai_numidiv(L, nb, nc));
001bd4  980f              LDR      r0,[sp,#0x3c]
001bd6  9007              STR      r0,[sp,#0x1c]
001bd8  e9dd2308          LDRD     r2,r3,[sp,#0x20]
001bdc  e9dd010a          LDRD     r0,r1,[sp,#0x28]
001be0  f7fffffe          BL       __aeabi_ddiv
001be4  e9cd0104          STRD     r0,r1,[sp,#0x10]
001be8  f7fffffe          BL       floor
001bec  9a07              LDR      r2,[sp,#0x1c]
001bee  c203              STM      r2!,{r0,r1}
001bf0  2113              MOVS     r1,#0x13
001bf2  9807              LDR      r0,[sp,#0x1c]
001bf4  7201              STRB     r1,[r0,#8]
001bf6  e011              B        |L16.7196|
                  |L16.7160|
;;;1385           }
;;;1386           else
;;;1387             Protect(luaT_trybinTM(L, rb, rc, ra, TM_IDIV));
001bf8  9914              LDR      r1,[sp,#0x50]
001bfa  981a              LDR      r0,[sp,#0x68]
001bfc  6101              STR      r1,[r0,#0x10]
001bfe  981a              LDR      r0,[sp,#0x68]
001c00  6841              LDR      r1,[r0,#4]
001c02  9819              LDR      r0,[sp,#0x64]
001c04  60c1              STR      r1,[r0,#0xc]
001c06  200e              MOVS     r0,#0xe
001c08  9000              STR      r0,[sp,#0]
001c0a  9b10              LDR      r3,[sp,#0x40]
001c0c  e9dd210d          LDRD     r2,r1,[sp,#0x34]
001c10  9819              LDR      r0,[sp,#0x64]
001c12  f7fffffe          BL       luaT_trybinTM
001c16  981a              LDR      r0,[sp,#0x68]
001c18  6941              LDR      r1,[r0,#0x14]
001c1a  9113              STR      r1,[sp,#0x4c]
                  |L16.7196|
;;;1388           vmbreak;
001c1c  e442              B        |L16.5284|
;;;1389         }
;;;1390         vmcase(OP_POW) {
;;;1391           TValue *rb = vRB(i);
001c1e  9811              LDR      r0,[sp,#0x44]
001c20  f3c04007          UBFX     r0,r0,#16,#8
001c24  9915              LDR      r1,[sp,#0x54]
001c26  eb011100          ADD      r1,r1,r0,LSL #4
001c2a  910e              STR      r1,[sp,#0x38]
;;;1392           TValue *rc = vRC(i);
001c2c  9811              LDR      r0,[sp,#0x44]
001c2e  0e01              LSRS     r1,r0,#24
001c30  9815              LDR      r0,[sp,#0x54]
001c32  eb001101          ADD      r1,r0,r1,LSL #4
001c36  910d              STR      r1,[sp,#0x34]
;;;1393           lua_Number nb; lua_Number nc;
;;;1394           if (tonumberns(rb, nb) && tonumberns(rc, nc)) {
001c38  980e              LDR      r0,[sp,#0x38]
001c3a  7a00              LDRB     r0,[r0,#8]
001c3c  2813              CMP      r0,#0x13
001c3e  d105              BNE      |L16.7244|
001c40  990e              LDR      r1,[sp,#0x38]
001c42  c903              LDM      r1,{r0,r1}
001c44  e9cd010a          STRD     r0,r1,[sp,#0x28]
001c48  2001              MOVS     r0,#1
001c4a  e00e              B        |L16.7274|
                  |L16.7244|
001c4c  980e              LDR      r0,[sp,#0x38]
001c4e  7a00              LDRB     r0,[r0,#8]
001c50  2823              CMP      r0,#0x23
001c52  d109              BNE      |L16.7272|
001c54  990e              LDR      r1,[sp,#0x38]
001c56  c903              LDM      r1,{r0,r1}
001c58  e9cd0106          STRD     r0,r1,[sp,#0x18]
001c5c  f7fffffe          BL       __aeabi_l2d
001c60  e9cd010a          STRD     r0,r1,[sp,#0x28]
001c64  2001              MOVS     r0,#1
001c66  e000              B        |L16.7274|
                  |L16.7272|
001c68  2000              MOVS     r0,#0
                  |L16.7274|
001c6a  b338              CBZ      r0,|L16.7356|
001c6c  980d              LDR      r0,[sp,#0x34]
001c6e  7a00              LDRB     r0,[r0,#8]
001c70  2813              CMP      r0,#0x13
001c72  d105              BNE      |L16.7296|
001c74  990d              LDR      r1,[sp,#0x34]
001c76  c903              LDM      r1,{r0,r1}
001c78  e9cd0108          STRD     r0,r1,[sp,#0x20]
001c7c  2001              MOVS     r0,#1
001c7e  e00e              B        |L16.7326|
                  |L16.7296|
001c80  980d              LDR      r0,[sp,#0x34]
001c82  7a00              LDRB     r0,[r0,#8]
001c84  2823              CMP      r0,#0x23
001c86  d109              BNE      |L16.7324|
001c88  990d              LDR      r1,[sp,#0x34]
001c8a  c903              LDM      r1,{r0,r1}
001c8c  e9cd0106          STRD     r0,r1,[sp,#0x18]
001c90  f7fffffe          BL       __aeabi_l2d
001c94  e9cd0108          STRD     r0,r1,[sp,#0x20]
001c98  2001              MOVS     r0,#1
001c9a  e000              B        |L16.7326|
                  |L16.7324|
001c9c  2000              MOVS     r0,#0
                  |L16.7326|
001c9e  b168              CBZ      r0,|L16.7356|
;;;1395             setfltvalue(vra, luai_numpow(L, nb, nc));
001ca0  980f              LDR      r0,[sp,#0x3c]
001ca2  9007              STR      r0,[sp,#0x1c]
001ca4  e9dd2308          LDRD     r2,r3,[sp,#0x20]
001ca8  e9dd010a          LDRD     r0,r1,[sp,#0x28]
001cac  f7fffffe          BL       pow
001cb0  9a07              LDR      r2,[sp,#0x1c]
001cb2  c203              STM      r2!,{r0,r1}
001cb4  2113              MOVS     r1,#0x13
001cb6  9807              LDR      r0,[sp,#0x1c]
001cb8  7201              STRB     r1,[r0,#8]
001cba  e011              B        |L16.7392|
                  |L16.7356|
;;;1396           }
;;;1397           else
;;;1398             Protect(luaT_trybinTM(L, rb, rc, ra, TM_POW));
001cbc  9914              LDR      r1,[sp,#0x50]
001cbe  981a              LDR      r0,[sp,#0x68]
001cc0  6101              STR      r1,[r0,#0x10]
001cc2  981a              LDR      r0,[sp,#0x68]
001cc4  6841              LDR      r1,[r0,#4]
001cc6  9819              LDR      r0,[sp,#0x64]
001cc8  60c1              STR      r1,[r0,#0xc]
001cca  200c              MOVS     r0,#0xc
001ccc  9000              STR      r0,[sp,#0]
001cce  9b10              LDR      r3,[sp,#0x40]
001cd0  e9dd210d          LDRD     r2,r1,[sp,#0x34]
001cd4  9819              LDR      r0,[sp,#0x64]
001cd6  f7fffffe          BL       luaT_trybinTM
001cda  981a              LDR      r0,[sp,#0x68]
001cdc  6941              LDR      r1,[r0,#0x14]
001cde  9113              STR      r1,[sp,#0x4c]
                  |L16.7392|
;;;1399           vmbreak;
001ce0  e424              B        |L16.5420|
;;;1400         }
;;;1401         vmcase(OP_UNM) {
;;;1402           TValue *rb = vRB(i);
001ce2  9811              LDR      r0,[sp,#0x44]
001ce4  f3c04007          UBFX     r0,r0,#16,#8
001ce8  9915              LDR      r1,[sp,#0x54]
001cea  eb011100          ADD      r1,r1,r0,LSL #4
001cee  910e              STR      r1,[sp,#0x38]
;;;1403           lua_Number nb;
;;;1404           if (ttisinteger(rb)) {
001cf0  980e              LDR      r0,[sp,#0x38]
001cf2  7a00              LDRB     r0,[r0,#8]
001cf4  2823              CMP      r0,#0x23
001cf6  d113              BNE      |L16.7456|
;;;1405             lua_Integer ib = ivalue(rb);
001cf8  990e              LDR      r1,[sp,#0x38]
001cfa  c903              LDM      r1,{r0,r1}
001cfc  e9cd010a          STRD     r0,r1,[sp,#0x28]
;;;1406             setivalue(vra, intop(-, 0, ib));
001d00  980f              LDR      r0,[sp,#0x3c]
001d02  9009              STR      r0,[sp,#0x24]
001d04  2300              MOVS     r3,#0
001d06  461a              MOV      r2,r3
001d08  e9dd010a          LDRD     r0,r1,[sp,#0x28]
001d0c  1a1b              SUBS     r3,r3,r0
001d0e  eb620201          SBC      r2,r2,r1
001d12  9809              LDR      r0,[sp,#0x24]
001d14  e9c03200          STRD     r3,r2,[r0,#0]
001d18  2223              MOVS     r2,#0x23
001d1a  9809              LDR      r0,[sp,#0x24]
001d1c  7202              STRB     r2,[r0,#8]
;;;1407           }
001d1e  e037              B        |L16.7568|
                  |L16.7456|
;;;1408           else if (tonumberns(rb, nb)) {
001d20  980e              LDR      r0,[sp,#0x38]
001d22  7a00              LDRB     r0,[r0,#8]
001d24  2813              CMP      r0,#0x13
001d26  d105              BNE      |L16.7476|
001d28  990e              LDR      r1,[sp,#0x38]
001d2a  c903              LDM      r1,{r0,r1}
001d2c  e9cd010c          STRD     r0,r1,[sp,#0x30]
001d30  2001              MOVS     r0,#1
001d32  e00e              B        |L16.7506|
                  |L16.7476|
001d34  980e              LDR      r0,[sp,#0x38]
001d36  7a00              LDRB     r0,[r0,#8]
001d38  2823              CMP      r0,#0x23
001d3a  d109              BNE      |L16.7504|
001d3c  990e              LDR      r1,[sp,#0x38]
001d3e  c903              LDM      r1,{r0,r1}
001d40  e9cd010a          STRD     r0,r1,[sp,#0x28]
001d44  f7fffffe          BL       __aeabi_l2d
001d48  e9cd010c          STRD     r0,r1,[sp,#0x30]
001d4c  2001              MOVS     r0,#1
001d4e  e000              B        |L16.7506|
                  |L16.7504|
001d50  2000              MOVS     r0,#0
                  |L16.7506|
001d52  b158              CBZ      r0,|L16.7532|
;;;1409             setfltvalue(vra, luai_numunm(L, nb));
001d54  980f              LDR      r0,[sp,#0x3c]
001d56  900b              STR      r0,[sp,#0x2c]
001d58  e9dd010c          LDRD     r0,r1,[sp,#0x30]
001d5c  f0814200          EOR      r2,r1,#0x80000000
001d60  990b              LDR      r1,[sp,#0x2c]
001d62  c105              STM      r1!,{r0,r2}
001d64  2213              MOVS     r2,#0x13
001d66  980b              LDR      r0,[sp,#0x2c]
001d68  7202              STRB     r2,[r0,#8]
001d6a  e011              B        |L16.7568|
                  |L16.7532|
;;;1410           }
;;;1411           else
;;;1412             Protect(luaT_trybinTM(L, rb, rb, ra, TM_UNM));
001d6c  9914              LDR      r1,[sp,#0x50]
001d6e  981a              LDR      r0,[sp,#0x68]
001d70  6101              STR      r1,[r0,#0x10]
001d72  981a              LDR      r0,[sp,#0x68]
001d74  6841              LDR      r1,[r0,#4]
001d76  9819              LDR      r0,[sp,#0x64]
001d78  60c1              STR      r1,[r0,#0xc]
001d7a  2014              MOVS     r0,#0x14
001d7c  9000              STR      r0,[sp,#0]
001d7e  9a0e              LDR      r2,[sp,#0x38]
001d80  4611              MOV      r1,r2
001d82  9b10              LDR      r3,[sp,#0x40]
001d84  9819              LDR      r0,[sp,#0x64]
001d86  f7fffffe          BL       luaT_trybinTM
001d8a  981a              LDR      r0,[sp,#0x68]
001d8c  6941              LDR      r1,[r0,#0x14]
001d8e  9113              STR      r1,[sp,#0x4c]
                  |L16.7568|
;;;1413           vmbreak;
001d90  e410              B        |L16.5556|
;;;1414         }
;;;1415         vmcase(OP_BNOT) {
;;;1416           TValue *rb = vRB(i);
001d92  9811              LDR      r0,[sp,#0x44]
001d94  f3c04007          UBFX     r0,r0,#16,#8
001d98  9915              LDR      r1,[sp,#0x54]
001d9a  eb011100          ADD      r1,r1,r0,LSL #4
001d9e  910e              STR      r1,[sp,#0x38]
;;;1417           lua_Integer ib;
;;;1418           if (tointegerns(rb, &ib)) {
001da0  980e              LDR      r0,[sp,#0x38]
001da2  7a00              LDRB     r0,[r0,#8]
001da4  2823              CMP      r0,#0x23
001da6  d105              BNE      |L16.7604|
001da8  980e              LDR      r0,[sp,#0x38]
001daa  c806              LDM      r0!,{r1,r2}
001dac  e9cd120c          STRD     r1,r2,[sp,#0x30]
001db0  2001              MOVS     r0,#1
001db2  e004              B        |L16.7614|
                  |L16.7604|
001db4  2200              MOVS     r2,#0
001db6  a90c              ADD      r1,sp,#0x30
001db8  980e              LDR      r0,[sp,#0x38]
001dba  f7fffffe          BL       luaV_tointegerns
                  |L16.7614|
001dbe  b170              CBZ      r0,|L16.7646|
;;;1419             setivalue(vra, intop(^, ~l_castS2U(0), ib));
001dc0  980f              LDR      r0,[sp,#0x3c]
001dc2  900b              STR      r0,[sp,#0x2c]
001dc4  f04f33ff          MOV      r3,#0xffffffff
001dc8  e9dd210c          LDRD     r2,r1,[sp,#0x30]
001dcc  405a              EORS     r2,r2,r3
001dce  4059              EORS     r1,r1,r3
001dd0  980b              LDR      r0,[sp,#0x2c]
001dd2  e9c02100          STRD     r2,r1,[r0,#0]
001dd6  2123              MOVS     r1,#0x23
001dd8  980b              LDR      r0,[sp,#0x2c]
001dda  7201              STRB     r1,[r0,#8]
001ddc  e011              B        |L16.7682|
                  |L16.7646|
;;;1420           }
;;;1421           else
;;;1422             Protect(luaT_trybinTM(L, rb, rb, ra, TM_BNOT));
001dde  9914              LDR      r1,[sp,#0x50]
001de0  981a              LDR      r0,[sp,#0x68]
001de2  6101              STR      r1,[r0,#0x10]
001de4  981a              LDR      r0,[sp,#0x68]
001de6  6841              LDR      r1,[r0,#4]
001de8  9819              LDR      r0,[sp,#0x64]
001dea  60c1              STR      r1,[r0,#0xc]
001dec  2015              MOVS     r0,#0x15
001dee  9000              STR      r0,[sp,#0]
001df0  9a0e              LDR      r2,[sp,#0x38]
001df2  4611              MOV      r1,r2
001df4  9b10              LDR      r3,[sp,#0x40]
001df6  9819              LDR      r0,[sp,#0x64]
001df8  f7fffffe          BL       luaT_trybinTM
001dfc  981a              LDR      r0,[sp,#0x68]
001dfe  6941              LDR      r1,[r0,#0x14]
001e00  9113              STR      r1,[sp,#0x4c]
                  |L16.7682|
;;;1423           vmbreak;
001e02  e426              B        |L16.5714|
;;;1424         }
;;;1425         vmcase(OP_NOT) {
;;;1426           TValue *rb = vRB(i);
001e04  9811              LDR      r0,[sp,#0x44]
001e06  f3c04007          UBFX     r0,r0,#16,#8
001e0a  9915              LDR      r1,[sp,#0x54]
001e0c  eb011100          ADD      r1,r1,r0,LSL #4
001e10  910e              STR      r1,[sp,#0x38]
;;;1427           int nrb = l_isfalse(rb);  /* next assignment may change this value */
001e12  980e              LDR      r0,[sp,#0x38]
001e14  7a00              LDRB     r0,[r0,#8]
001e16  b130              CBZ      r0,|L16.7718|
001e18  980e              LDR      r0,[sp,#0x38]
001e1a  7a00              LDRB     r0,[r0,#8]
001e1c  2801              CMP      r0,#1
001e1e  d104              BNE      |L16.7722|
001e20  980e              LDR      r0,[sp,#0x38]
001e22  6800              LDR      r0,[r0,#0]
001e24  b908              CBNZ     r0,|L16.7722|
                  |L16.7718|
001e26  2001              MOVS     r0,#1
001e28  e000              B        |L16.7724|
                  |L16.7722|
001e2a  2000              MOVS     r0,#0
                  |L16.7724|
001e2c  900d              STR      r0,[sp,#0x34]
;;;1428           setbvalue(vra, nrb);
001e2e  980f              LDR      r0,[sp,#0x3c]
001e30  900c              STR      r0,[sp,#0x30]
001e32  e9dd100c          LDRD     r1,r0,[sp,#0x30]
001e36  6008              STR      r0,[r1,#0]
001e38  2201              MOVS     r2,#1
001e3a  980c              LDR      r0,[sp,#0x30]
001e3c  7202              STRB     r2,[r0,#8]
;;;1429           vmbreak;
001e3e  e408              B        |L16.5714|
;;;1430         }
;;;1431         vmcase(OP_LEN) {
;;;1432           Protect(luaV_objlen(L, ra, vRB(i)));
001e40  9914              LDR      r1,[sp,#0x50]
001e42  981a              LDR      r0,[sp,#0x68]
001e44  6101              STR      r1,[r0,#0x10]
001e46  981a              LDR      r0,[sp,#0x68]
001e48  6841              LDR      r1,[r0,#4]
001e4a  9819              LDR      r0,[sp,#0x64]
001e4c  60c1              STR      r1,[r0,#0xc]
001e4e  9811              LDR      r0,[sp,#0x44]
001e50  f3c04007          UBFX     r0,r0,#16,#8
001e54  9915              LDR      r1,[sp,#0x54]
001e56  eb011100          ADD      r1,r1,r0,LSL #4
001e5a  460a              MOV      r2,r1
001e5c  910e              STR      r1,[sp,#0x38]
001e5e  9910              LDR      r1,[sp,#0x40]
001e60  9819              LDR      r0,[sp,#0x64]
001e62  f7fffffe          BL       luaV_objlen
001e66  981a              LDR      r0,[sp,#0x68]
001e68  6941              LDR      r1,[r0,#0x14]
001e6a  9113              STR      r1,[sp,#0x4c]
;;;1433           vmbreak;
001e6c  e43f              B        |L16.5870|
;;;1434         }
;;;1435         vmcase(OP_CONCAT) {
;;;1436           int n = GETARG_B(i);  /* number of elements to concatenate */
001e6e  9811              LDR      r0,[sp,#0x44]
001e70  f3c04107          UBFX     r1,r0,#16,#8
001e74  910e              STR      r1,[sp,#0x38]
;;;1437           L->top = ra + n;  /* mark the end of concat operands */
001e76  9910              LDR      r1,[sp,#0x40]
001e78  980e              LDR      r0,[sp,#0x38]
001e7a  eb011100          ADD      r1,r1,r0,LSL #4
001e7e  9819              LDR      r0,[sp,#0x64]
001e80  60c1              STR      r1,[r0,#0xc]
;;;1438           ProtectNT(luaV_concat(L, n));
001e82  9914              LDR      r1,[sp,#0x50]
001e84  981a              LDR      r0,[sp,#0x68]
001e86  6101              STR      r1,[r0,#0x10]
001e88  990e              LDR      r1,[sp,#0x38]
001e8a  9819              LDR      r0,[sp,#0x64]
001e8c  f7fffffe          BL       luaV_concat
001e90  981a              LDR      r0,[sp,#0x68]
001e92  6941              LDR      r1,[r0,#0x14]
001e94  9113              STR      r1,[sp,#0x4c]
;;;1439           checkGC(L, L->top); /* 'luaV_concat' ensures correct top */
001e96  9819              LDR      r0,[sp,#0x64]
001e98  6900              LDR      r0,[r0,#0x10]
001e9a  68c0              LDR      r0,[r0,#0xc]
001e9c  2800              CMP      r0,#0
001e9e  dd08              BLE      |L16.7858|
001ea0  9819              LDR      r0,[sp,#0x64]
001ea2  68c1              LDR      r1,[r0,#0xc]
001ea4  60c1              STR      r1,[r0,#0xc]
001ea6  9819              LDR      r0,[sp,#0x64]
001ea8  f7fffffe          BL       luaC_step
001eac  981a              LDR      r0,[sp,#0x68]
001eae  6941              LDR      r1,[r0,#0x14]
001eb0  9113              STR      r1,[sp,#0x4c]
                  |L16.7858|
;;;1440           vmbreak;
001eb2  e41c              B        |L16.5870|
;;;1441         }
;;;1442         vmcase(OP_CLOSE) {
;;;1443           luaF_close(L, ra);
001eb4  9910              LDR      r1,[sp,#0x40]
001eb6  9819              LDR      r0,[sp,#0x64]
001eb8  f7fffffe          BL       luaF_close
;;;1444           vmbreak;
001ebc  e417              B        |L16.5870|
;;;1445         }
;;;1446         vmcase(OP_JMP) {
;;;1447           dojump(ci, i, 0);
001ebe  f06f417f          MVN      r1,#0xff000000
001ec2  9811              LDR      r0,[sp,#0x44]
001ec4  ea012010          AND      r0,r1,r0,LSR #8
001ec8  f06f517e          MVN      r1,#0x3f800000
001ecc  1a41              SUBS     r1,r0,r1
001ece  9814              LDR      r0,[sp,#0x50]
001ed0  eb000181          ADD      r1,r0,r1,LSL #2
001ed4  9114              STR      r1,[sp,#0x50]
001ed6  981a              LDR      r0,[sp,#0x68]
001ed8  6941              LDR      r1,[r0,#0x14]
001eda  9113              STR      r1,[sp,#0x4c]
;;;1448           vmbreak;
001edc  e407              B        |L16.5870|
;;;1449         }
;;;1450         vmcase(OP_EQ) {
;;;1451           TValue *rb = vRB(i);
001ede  9811              LDR      r0,[sp,#0x44]
001ee0  f3c04007          UBFX     r0,r0,#16,#8
001ee4  9915              LDR      r1,[sp,#0x54]
001ee6  eb011100          ADD      r1,r1,r0,LSL #4
001eea  910e              STR      r1,[sp,#0x38]
;;;1452           Protect(cond = luaV_equalobj(L, vra, rb));
001eec  9914              LDR      r1,[sp,#0x50]
001eee  981a              LDR      r0,[sp,#0x68]
001ef0  6101              STR      r1,[r0,#0x10]
001ef2  981a              LDR      r0,[sp,#0x68]
001ef4  6841              LDR      r1,[r0,#4]
001ef6  9819              LDR      r0,[sp,#0x64]
001ef8  60c1              STR      r1,[r0,#0xc]
001efa  e9dd210e          LDRD     r2,r1,[sp,#0x38]
001efe  9819              LDR      r0,[sp,#0x64]
001f00  f7fffffe          BL       luaV_equalobj
001f04  9012              STR      r0,[sp,#0x48]
001f06  981a              LDR      r0,[sp,#0x68]
001f08  6941              LDR      r1,[r0,#0x14]
001f0a  9113              STR      r1,[sp,#0x4c]
;;;1453           docondjump();
001f0c  e9dd1011          LDRD     r1,r0,[sp,#0x44]
001f10  f3c131c0          UBFX     r1,r1,#15,#1
001f14  4288              CMP      r0,r1
001f16  d003              BEQ      |L16.7968|
001f18  9814              LDR      r0,[sp,#0x50]
001f1a  1d01              ADDS     r1,r0,#4
001f1c  9114              STR      r1,[sp,#0x50]
001f1e  e012              B        |L16.8006|
                  |L16.7968|
001f20  9814              LDR      r0,[sp,#0x50]
001f22  6801              LDR      r1,[r0,#0]
001f24  9111              STR      r1,[sp,#0x44]
001f26  f06f417f          MVN      r1,#0xff000000
001f2a  9811              LDR      r0,[sp,#0x44]
001f2c  ea012010          AND      r0,r1,r0,LSR #8
001f30  f06f517e          MVN      r1,#0x3f800000
001f34  1a41              SUBS     r1,r0,r1
001f36  1c49              ADDS     r1,r1,#1
001f38  9814              LDR      r0,[sp,#0x50]
001f3a  eb000181          ADD      r1,r0,r1,LSL #2
001f3e  9114              STR      r1,[sp,#0x50]
001f40  981a              LDR      r0,[sp,#0x68]
001f42  6941              LDR      r1,[r0,#0x14]
001f44  9113              STR      r1,[sp,#0x4c]
                  |L16.8006|
;;;1454           vmbreak;
001f46  e421              B        |L16.6028|
;;;1455         }
;;;1456         vmcase(OP_LT) {
;;;1457           TValue *rb = vRB(i);
001f48  9811              LDR      r0,[sp,#0x44]
001f4a  f3c04007          UBFX     r0,r0,#16,#8
001f4e  9915              LDR      r1,[sp,#0x54]
001f50  eb011100          ADD      r1,r1,r0,LSL #4
001f54  910e              STR      r1,[sp,#0x38]
;;;1458           if (ttisinteger(vra) && ttisinteger(rb))
001f56  980f              LDR      r0,[sp,#0x3c]
001f58  7a00              LDRB     r0,[r0,#8]
001f5a  2823              CMP      r0,#0x23
001f5c  d111              BNE      |L16.8066|
001f5e  980e              LDR      r0,[sp,#0x38]
001f60  7a00              LDRB     r0,[r0,#8]
001f62  2823              CMP      r0,#0x23
001f64  d10d              BNE      |L16.8066|
;;;1459             cond = (ivalue(vra) < ivalue(rb));
001f66  990f              LDR      r1,[sp,#0x3c]
001f68  c911              LDM      r1!,{r0,r4}
001f6a  9a0e              LDR      r2,[sp,#0x38]
001f6c  ca0a              LDM      r2!,{r1,r3}
001f6e  4602              MOV      r2,r0
001f70  1a51              SUBS     r1,r2,r1
001f72  eb740003          SBCS     r0,r4,r3
001f76  da01              BGE      |L16.8060|
001f78  2001              MOVS     r0,#1
001f7a  e000              B        |L16.8062|
                  |L16.8060|
001f7c  2000              MOVS     r0,#0
                  |L16.8062|
001f7e  9012              STR      r0,[sp,#0x48]
001f80  e021              B        |L16.8134|
                  |L16.8066|
;;;1460           else if (ttisnumber(vra) && ttisnumber(rb))
001f82  980f              LDR      r0,[sp,#0x3c]
001f84  7a00              LDRB     r0,[r0,#8]
001f86  f000000f          AND      r0,r0,#0xf
001f8a  2803              CMP      r0,#3
001f8c  d10b              BNE      |L16.8102|
001f8e  980e              LDR      r0,[sp,#0x38]
001f90  7a00              LDRB     r0,[r0,#8]
001f92  f000000f          AND      r0,r0,#0xf
001f96  2803              CMP      r0,#3
001f98  d105              BNE      |L16.8102|
;;;1461             cond = LTnum(vra, rb);
001f9a  e9dd100e          LDRD     r1,r0,[sp,#0x38]
001f9e  f7fffffe          BL       LTnum
001fa2  9012              STR      r0,[sp,#0x48]
001fa4  e00f              B        |L16.8134|
                  |L16.8102|
;;;1462           else
;;;1463             Protect(cond = lessthanothers(L, vra, rb));
001fa6  9914              LDR      r1,[sp,#0x50]
001fa8  981a              LDR      r0,[sp,#0x68]
001faa  6101              STR      r1,[r0,#0x10]
001fac  981a              LDR      r0,[sp,#0x68]
001fae  6841              LDR      r1,[r0,#4]
001fb0  9819              LDR      r0,[sp,#0x64]
001fb2  60c1              STR      r1,[r0,#0xc]
001fb4  e9dd210e          LDRD     r2,r1,[sp,#0x38]
001fb8  9819              LDR      r0,[sp,#0x64]
001fba  f7fffffe          BL       lessthanothers
001fbe  9012              STR      r0,[sp,#0x48]
001fc0  981a              LDR      r0,[sp,#0x68]
001fc2  6940              LDR      r0,[r0,#0x14]
001fc4  9013              STR      r0,[sp,#0x4c]
                  |L16.8134|
;;;1464           docondjump();
001fc6  e9dd1011          LDRD     r1,r0,[sp,#0x44]
001fca  f3c131c0          UBFX     r1,r1,#15,#1
001fce  4288              CMP      r0,r1
001fd0  d003              BEQ      |L16.8154|
001fd2  9814              LDR      r0,[sp,#0x50]
001fd4  1d00              ADDS     r0,r0,#4
001fd6  9014              STR      r0,[sp,#0x50]
001fd8  e012              B        |L16.8192|
                  |L16.8154|
001fda  9814              LDR      r0,[sp,#0x50]
001fdc  6801              LDR      r1,[r0,#0]
001fde  9111              STR      r1,[sp,#0x44]
001fe0  f06f417f          MVN      r1,#0xff000000
001fe4  9811              LDR      r0,[sp,#0x44]
001fe6  ea012010          AND      r0,r1,r0,LSR #8
001fea  f06f517e          MVN      r1,#0x3f800000
001fee  1a41              SUBS     r1,r0,r1
001ff0  1c49              ADDS     r1,r1,#1
001ff2  9814              LDR      r0,[sp,#0x50]
001ff4  eb000181          ADD      r1,r0,r1,LSL #2
001ff8  9114              STR      r1,[sp,#0x50]
001ffa  981a              LDR      r0,[sp,#0x68]
001ffc  6941              LDR      r1,[r0,#0x14]
001ffe  9113              STR      r1,[sp,#0x4c]
                  |L16.8192|
;;;1465           vmbreak;
002000  e40f              B        |L16.6178|
;;;1466         }
;;;1467         vmcase(OP_LE) {
;;;1468           TValue *rb = vRB(i);
002002  9811              LDR      r0,[sp,#0x44]
002004  f3c04007          UBFX     r0,r0,#16,#8
002008  9915              LDR      r1,[sp,#0x54]
00200a  eb011100          ADD      r1,r1,r0,LSL #4
00200e  910e              STR      r1,[sp,#0x38]
;;;1469           if (ttisinteger(vra) && ttisinteger(rb))
002010  980f              LDR      r0,[sp,#0x3c]
002012  7a00              LDRB     r0,[r0,#8]
002014  2823              CMP      r0,#0x23
002016  d111              BNE      |L16.8252|
002018  980e              LDR      r0,[sp,#0x38]
00201a  7a00              LDRB     r0,[r0,#8]
00201c  2823              CMP      r0,#0x23
00201e  d10d              BNE      |L16.8252|
;;;1470             cond = (ivalue(vra) <= ivalue(rb));
002020  980e              LDR      r0,[sp,#0x38]
002022  e9d02000          LDRD     r2,r0,[r0,#0]
002026  990f              LDR      r1,[sp,#0x3c]
002028  e9d13100          LDRD     r3,r1,[r1,#0]
00202c  1ad2              SUBS     r2,r2,r3
00202e  4188              SBCS     r0,r0,r1
002030  db01              BLT      |L16.8246|
002032  2001              MOVS     r0,#1
002034  e000              B        |L16.8248|
                  |L16.8246|
002036  2000              MOVS     r0,#0
                  |L16.8248|
002038  9012              STR      r0,[sp,#0x48]
00203a  e021              B        |L16.8320|
                  |L16.8252|
;;;1471           else if (ttisnumber(vra) && ttisnumber(rb))
00203c  980f              LDR      r0,[sp,#0x3c]
00203e  7a00              LDRB     r0,[r0,#8]
002040  f000000f          AND      r0,r0,#0xf
002044  2803              CMP      r0,#3
002046  d10b              BNE      |L16.8288|
002048  980e              LDR      r0,[sp,#0x38]
00204a  7a00              LDRB     r0,[r0,#8]
00204c  f000000f          AND      r0,r0,#0xf
002050  2803              CMP      r0,#3
002052  d105              BNE      |L16.8288|
;;;1472             cond = LEnum(vra, rb);
002054  e9dd100e          LDRD     r1,r0,[sp,#0x38]
002058  f7fffffe          BL       LEnum
00205c  9012              STR      r0,[sp,#0x48]
00205e  e00f              B        |L16.8320|
                  |L16.8288|
;;;1473           else
;;;1474             Protect(cond = lessequalothers(L, vra, rb));
002060  9914              LDR      r1,[sp,#0x50]
002062  981a              LDR      r0,[sp,#0x68]
002064  6101              STR      r1,[r0,#0x10]
002066  981a              LDR      r0,[sp,#0x68]
002068  6841              LDR      r1,[r0,#4]
00206a  9819              LDR      r0,[sp,#0x64]
00206c  60c1              STR      r1,[r0,#0xc]
00206e  e9dd210e          LDRD     r2,r1,[sp,#0x38]
002072  9819              LDR      r0,[sp,#0x64]
002074  f7fffffe          BL       lessequalothers
002078  9012              STR      r0,[sp,#0x48]
00207a  981a              LDR      r0,[sp,#0x68]
00207c  6940              LDR      r0,[r0,#0x14]
00207e  9013              STR      r0,[sp,#0x4c]
                  |L16.8320|
;;;1475           docondjump();
002080  e9dd1011          LDRD     r1,r0,[sp,#0x44]
002084  f3c131c0          UBFX     r1,r1,#15,#1
002088  4288              CMP      r0,r1
00208a  d003              BEQ      |L16.8340|
00208c  9814              LDR      r0,[sp,#0x50]
00208e  1d00              ADDS     r0,r0,#4
002090  9014              STR      r0,[sp,#0x50]
002092  e012              B        |L16.8378|
                  |L16.8340|
002094  9814              LDR      r0,[sp,#0x50]
002096  6801              LDR      r1,[r0,#0]
002098  9111              STR      r1,[sp,#0x44]
00209a  f06f417f          MVN      r1,#0xff000000
00209e  9811              LDR      r0,[sp,#0x44]
0020a0  ea012010          AND      r0,r1,r0,LSR #8
0020a4  f06f517e          MVN      r1,#0x3f800000
0020a8  1a41              SUBS     r1,r0,r1
0020aa  1c49              ADDS     r1,r1,#1
0020ac  9814              LDR      r0,[sp,#0x50]
0020ae  eb000181          ADD      r1,r0,r1,LSL #2
0020b2  9114              STR      r1,[sp,#0x50]
0020b4  981a              LDR      r0,[sp,#0x68]
0020b6  6941              LDR      r1,[r0,#0x14]
0020b8  9113              STR      r1,[sp,#0x4c]
                  |L16.8378|
;;;1476           vmbreak;
0020ba  e43e              B        |L16.6458|
;;;1477         }
;;;1478         vmcase(OP_EQK) {
;;;1479           TValue *rb = KB(i);
0020bc  9811              LDR      r0,[sp,#0x44]
0020be  f3c04007          UBFX     r0,r0,#16,#8
0020c2  9916              LDR      r1,[sp,#0x58]
0020c4  eb011100          ADD      r1,r1,r0,LSL #4
0020c8  910e              STR      r1,[sp,#0x38]
;;;1480           /* basic types do not use '__eq'; we can use raw equality */
;;;1481           cond = luaV_equalobj(NULL, vra, rb);
0020ca  2000              MOVS     r0,#0
0020cc  e9dd210e          LDRD     r2,r1,[sp,#0x38]
0020d0  f7fffffe          BL       luaV_equalobj
0020d4  9012              STR      r0,[sp,#0x48]
;;;1482           docondjump();
0020d6  e9dd1011          LDRD     r1,r0,[sp,#0x44]
0020da  f3c131c0          UBFX     r1,r1,#15,#1
0020de  4288              CMP      r0,r1
0020e0  d003              BEQ      |L16.8426|
0020e2  9814              LDR      r0,[sp,#0x50]
0020e4  1d00              ADDS     r0,r0,#4
0020e6  9014              STR      r0,[sp,#0x50]
0020e8  e012              B        |L16.8464|
                  |L16.8426|
0020ea  9814              LDR      r0,[sp,#0x50]
0020ec  6801              LDR      r1,[r0,#0]
0020ee  9111              STR      r1,[sp,#0x44]
0020f0  f06f417f          MVN      r1,#0xff000000
0020f4  9811              LDR      r0,[sp,#0x44]
0020f6  ea012010          AND      r0,r1,r0,LSR #8
0020fa  f06f517e          MVN      r1,#0x3f800000
0020fe  1a41              SUBS     r1,r0,r1
002100  1c49              ADDS     r1,r1,#1
002102  9814              LDR      r0,[sp,#0x50]
002104  eb000181          ADD      r1,r0,r1,LSL #2
002108  9114              STR      r1,[sp,#0x50]
00210a  981a              LDR      r0,[sp,#0x68]
00210c  6941              LDR      r1,[r0,#0x14]
00210e  9113              STR      r1,[sp,#0x4c]
                  |L16.8464|
;;;1483           vmbreak;
002110  e413              B        |L16.6458|
;;;1484         }
;;;1485         vmcase(OP_EQI) {
;;;1486           int im = GETARG_sB(i);
002112  9811              LDR      r0,[sp,#0x44]
002114  f3c04007          UBFX     r0,r0,#16,#8
002118  387f              SUBS     r0,r0,#0x7f
00211a  900e              STR      r0,[sp,#0x38]
;;;1487           if (ttisinteger(vra))
00211c  980f              LDR      r0,[sp,#0x3c]
00211e  7a00              LDRB     r0,[r0,#8]
002120  2823              CMP      r0,#0x23
002122  d10c              BNE      |L16.8510|
;;;1488             cond = (ivalue(vra) == im);
002124  980f              LDR      r0,[sp,#0x3c]
002126  c806              LDM      r0!,{r1,r2}
002128  980e              LDR      r0,[sp,#0x38]
00212a  4041              EORS     r1,r1,r0
00212c  ea8272e0          EOR      r2,r2,r0,ASR #31
002130  4311              ORRS     r1,r1,r2
002132  d101              BNE      |L16.8504|
002134  2001              MOVS     r0,#1
002136  e000              B        |L16.8506|
                  |L16.8504|
002138  2000              MOVS     r0,#0
                  |L16.8506|
00213a  9012              STR      r0,[sp,#0x48]
00213c  e018              B        |L16.8560|
                  |L16.8510|
;;;1489           else if (ttisfloat(vra))
00213e  980f              LDR      r0,[sp,#0x3c]
002140  7a00              LDRB     r0,[r0,#8]
002142  2813              CMP      r0,#0x13
002144  d112              BNE      |L16.8556|
;;;1490             cond = luai_numeq(fltvalue(vra), cast_num(im));
002146  980e              LDR      r0,[sp,#0x38]
002148  f7fffffe          BL       __aeabi_i2d
00214c  e9cd010c          STRD     r0,r1,[sp,#0x30]
002150  980f              LDR      r0,[sp,#0x3c]
002152  c803              LDM      r0,{r0,r1}
002154  e9cd010a          STRD     r0,r1,[sp,#0x28]
002158  e9dd230c          LDRD     r2,r3,[sp,#0x30]
00215c  f7fffffe          BL       __aeabi_cdcmpeq
002160  d101              BNE      |L16.8550|
002162  2001              MOVS     r0,#1
002164  e000              B        |L16.8552|
                  |L16.8550|
002166  2000              MOVS     r0,#0
                  |L16.8552|
002168  9012              STR      r0,[sp,#0x48]
00216a  e001              B        |L16.8560|
                  |L16.8556|
;;;1491           else
;;;1492             cond = 0;  /* other types cannot be equal to a number */
00216c  2000              MOVS     r0,#0
00216e  9012              STR      r0,[sp,#0x48]
                  |L16.8560|
;;;1493           docondjump();
002170  e9dd1011          LDRD     r1,r0,[sp,#0x44]
002174  f3c131c0          UBFX     r1,r1,#15,#1
002178  4288              CMP      r0,r1
00217a  d003              BEQ      |L16.8580|
00217c  9814              LDR      r0,[sp,#0x50]
00217e  1d00              ADDS     r0,r0,#4
002180  9014              STR      r0,[sp,#0x50]
002182  e012              B        |L16.8618|
                  |L16.8580|
002184  9814              LDR      r0,[sp,#0x50]
002186  6801              LDR      r1,[r0,#0]
002188  9111              STR      r1,[sp,#0x44]
00218a  f06f417f          MVN      r1,#0xff000000
00218e  9811              LDR      r0,[sp,#0x44]
002190  ea012010          AND      r0,r1,r0,LSR #8
002194  f06f517e          MVN      r1,#0x3f800000
002198  1a41              SUBS     r1,r0,r1
00219a  1c49              ADDS     r1,r1,#1
00219c  9814              LDR      r0,[sp,#0x50]
00219e  eb000181          ADD      r1,r0,r1,LSL #2
0021a2  9114              STR      r1,[sp,#0x50]
0021a4  981a              LDR      r0,[sp,#0x68]
0021a6  6941              LDR      r1,[r0,#0x14]
0021a8  9113              STR      r1,[sp,#0x4c]
                  |L16.8618|
;;;1494           vmbreak;
0021aa  e418              B        |L16.6622|
;;;1495         }
;;;1496         vmcase(OP_LTI) {
;;;1497           int im = GETARG_sB(i);
0021ac  9811              LDR      r0,[sp,#0x44]
0021ae  f3c04007          UBFX     r0,r0,#16,#8
0021b2  387f              SUBS     r0,r0,#0x7f
0021b4  900e              STR      r0,[sp,#0x38]
;;;1498           if (ttisinteger(vra))
0021b6  980f              LDR      r0,[sp,#0x3c]
0021b8  7a00              LDRB     r0,[r0,#8]
0021ba  2823              CMP      r0,#0x23
0021bc  d10c              BNE      |L16.8664|
;;;1499             cond = (ivalue(vra) < im);
0021be  980f              LDR      r0,[sp,#0x3c]
0021c0  e9d03100          LDRD     r3,r1,[r0,#0]
0021c4  980e              LDR      r0,[sp,#0x38]
0021c6  17c2              ASRS     r2,r0,#31
0021c8  1a18              SUBS     r0,r3,r0
0021ca  4191              SBCS     r1,r1,r2
0021cc  da01              BGE      |L16.8658|
0021ce  2001              MOVS     r0,#1
0021d0  e000              B        |L16.8660|
                  |L16.8658|
0021d2  2000              MOVS     r0,#0
                  |L16.8660|
0021d4  9012              STR      r0,[sp,#0x48]
0021d6  e02b              B        |L16.8752|
                  |L16.8664|
;;;1500           else if (ttisfloat(vra))
0021d8  980f              LDR      r0,[sp,#0x3c]
0021da  7a00              LDRB     r0,[r0,#8]
0021dc  2813              CMP      r0,#0x13
0021de  d114              BNE      |L16.8714|
;;;1501             cond = luai_numlt(fltvalue(vra), cast_num(im));
0021e0  980e              LDR      r0,[sp,#0x38]
0021e2  f7fffffe          BL       __aeabi_i2d
0021e6  e9cd010c          STRD     r0,r1,[sp,#0x30]
0021ea  980f              LDR      r0,[sp,#0x3c]
0021ec  c803              LDM      r0,{r0,r1}
0021ee  4602              MOV      r2,r0
0021f0  460b              MOV      r3,r1
0021f2  e9cd010a          STRD     r0,r1,[sp,#0x28]
0021f6  e9dd010c          LDRD     r0,r1,[sp,#0x30]
0021fa  f7fffffe          BL       __aeabi_cdrcmple
0021fe  d201              BCS      |L16.8708|
002200  2001              MOVS     r0,#1
002202  e000              B        |L16.8710|
                  |L16.8708|
002204  2000              MOVS     r0,#0
                  |L16.8710|
002206  9012              STR      r0,[sp,#0x48]
002208  e012              B        |L16.8752|
                  |L16.8714|
;;;1502           else
;;;1503             Protect(cond = luaT_callorderiTM(L, vra, im, 0, TM_LT));
00220a  9914              LDR      r1,[sp,#0x50]
00220c  981a              LDR      r0,[sp,#0x68]
00220e  6101              STR      r1,[r0,#0x10]
002210  981a              LDR      r0,[sp,#0x68]
002212  6841              LDR      r1,[r0,#4]
002214  9819              LDR      r0,[sp,#0x64]
002216  60c1              STR      r1,[r0,#0xc]
002218  2016              MOVS     r0,#0x16
00221a  2300              MOVS     r3,#0
00221c  9000              STR      r0,[sp,#0]
00221e  e9dd210e          LDRD     r2,r1,[sp,#0x38]
002222  9819              LDR      r0,[sp,#0x64]
002224  f7fffffe          BL       luaT_callorderiTM
002228  9012              STR      r0,[sp,#0x48]
00222a  981a              LDR      r0,[sp,#0x68]
00222c  6940              LDR      r0,[r0,#0x14]
00222e  9013              STR      r0,[sp,#0x4c]
                  |L16.8752|
;;;1504           docondjump();
002230  e9dd1011          LDRD     r1,r0,[sp,#0x44]
002234  f3c131c0          UBFX     r1,r1,#15,#1
002238  4288              CMP      r0,r1
00223a  d003              BEQ      |L16.8772|
00223c  9814              LDR      r0,[sp,#0x50]
00223e  1d00              ADDS     r0,r0,#4
002240  9014              STR      r0,[sp,#0x50]
002242  e012              B        |L16.8810|
                  |L16.8772|
002244  9814              LDR      r0,[sp,#0x50]
002246  6801              LDR      r1,[r0,#0]
002248  9111              STR      r1,[sp,#0x44]
00224a  f06f417f          MVN      r1,#0xff000000
00224e  9811              LDR      r0,[sp,#0x44]
002250  ea012010          AND      r0,r1,r0,LSR #8
002254  f06f517e          MVN      r1,#0x3f800000
002258  1a41              SUBS     r1,r0,r1
00225a  1c49              ADDS     r1,r1,#1
00225c  9814              LDR      r0,[sp,#0x50]
00225e  eb000181          ADD      r1,r0,r1,LSL #2
002262  9114              STR      r1,[sp,#0x50]
002264  981a              LDR      r0,[sp,#0x68]
002266  6941              LDR      r1,[r0,#0x14]
002268  9113              STR      r1,[sp,#0x4c]
                  |L16.8810|
;;;1505           vmbreak;
00226a  e450              B        |L16.6926|
;;;1506         }
;;;1507         vmcase(OP_LEI) {
;;;1508           int im = GETARG_sB(i);
00226c  9811              LDR      r0,[sp,#0x44]
00226e  f3c04007          UBFX     r0,r0,#16,#8
002272  387f              SUBS     r0,r0,#0x7f
002274  900e              STR      r0,[sp,#0x38]
;;;1509           if (ttisinteger(vra))
002276  980f              LDR      r0,[sp,#0x3c]
002278  7a00              LDRB     r0,[r0,#8]
00227a  2823              CMP      r0,#0x23
00227c  d10c              BNE      |L16.8856|
;;;1510             cond = (ivalue(vra) <= im);
00227e  980f              LDR      r0,[sp,#0x3c]
002280  e9d03200          LDRD     r3,r2,[r0,#0]
002284  980e              LDR      r0,[sp,#0x38]
002286  17c1              ASRS     r1,r0,#31
002288  1ac0              SUBS     r0,r0,r3
00228a  4191              SBCS     r1,r1,r2
00228c  db01              BLT      |L16.8850|
00228e  2001              MOVS     r0,#1
002290  e000              B        |L16.8852|
                  |L16.8850|
002292  2000              MOVS     r0,#0
                  |L16.8852|
002294  9012              STR      r0,[sp,#0x48]
002296  e02b              B        |L16.8944|
                  |L16.8856|
;;;1511           else if (ttisfloat(vra))
002298  980f              LDR      r0,[sp,#0x3c]
00229a  7a00              LDRB     r0,[r0,#8]
00229c  2813              CMP      r0,#0x13
00229e  d114              BNE      |L16.8906|
;;;1512             cond = luai_numle(fltvalue(vra), cast_num(im));
0022a0  980e              LDR      r0,[sp,#0x38]
0022a2  f7fffffe          BL       __aeabi_i2d
0022a6  e9cd010c          STRD     r0,r1,[sp,#0x30]
0022aa  990f              LDR      r1,[sp,#0x3c]
0022ac  c903              LDM      r1,{r0,r1}
0022ae  4602              MOV      r2,r0
0022b0  460b              MOV      r3,r1
0022b2  e9cd010a          STRD     r0,r1,[sp,#0x28]
0022b6  e9dd010c          LDRD     r0,r1,[sp,#0x30]
0022ba  f7fffffe          BL       __aeabi_cdrcmple
0022be  d801              BHI      |L16.8900|
0022c0  2001              MOVS     r0,#1
0022c2  e000              B        |L16.8902|
                  |L16.8900|
0022c4  2000              MOVS     r0,#0
                  |L16.8902|
0022c6  9012              STR      r0,[sp,#0x48]
0022c8  e012              B        |L16.8944|
                  |L16.8906|
;;;1513           else
;;;1514             Protect(cond = luaT_callorderiTM(L, vra, im, 0, TM_LE));
0022ca  9914              LDR      r1,[sp,#0x50]
0022cc  981a              LDR      r0,[sp,#0x68]
0022ce  6101              STR      r1,[r0,#0x10]
0022d0  981a              LDR      r0,[sp,#0x68]
0022d2  6841              LDR      r1,[r0,#4]
0022d4  9819              LDR      r0,[sp,#0x64]
0022d6  60c1              STR      r1,[r0,#0xc]
0022d8  2017              MOVS     r0,#0x17
0022da  2300              MOVS     r3,#0
0022dc  9000              STR      r0,[sp,#0]
0022de  e9dd210e          LDRD     r2,r1,[sp,#0x38]
0022e2  9819              LDR      r0,[sp,#0x64]
0022e4  f7fffffe          BL       luaT_callorderiTM
0022e8  9012              STR      r0,[sp,#0x48]
0022ea  981a              LDR      r0,[sp,#0x68]
0022ec  6940              LDR      r0,[r0,#0x14]
0022ee  9013              STR      r0,[sp,#0x4c]
                  |L16.8944|
;;;1515           docondjump();
0022f0  e9dd0111          LDRD     r0,r1,[sp,#0x44]
0022f4  f3c030c0          UBFX     r0,r0,#15,#1
0022f8  4281              CMP      r1,r0
0022fa  d003              BEQ      |L16.8964|
0022fc  9814              LDR      r0,[sp,#0x50]
0022fe  1d00              ADDS     r0,r0,#4
002300  9014              STR      r0,[sp,#0x50]
002302  e012              B        |L16.9002|
                  |L16.8964|
002304  9814              LDR      r0,[sp,#0x50]
002306  6801              LDR      r1,[r0,#0]
002308  9111              STR      r1,[sp,#0x44]
00230a  f06f417f          MVN      r1,#0xff000000
00230e  9811              LDR      r0,[sp,#0x44]
002310  ea012010          AND      r0,r1,r0,LSR #8
002314  f06f517e          MVN      r1,#0x3f800000
002318  1a41              SUBS     r1,r0,r1
00231a  1c49              ADDS     r1,r1,#1
00231c  9814              LDR      r0,[sp,#0x50]
00231e  eb000181          ADD      r1,r0,r1,LSL #2
002322  9114              STR      r1,[sp,#0x50]
002324  981a              LDR      r0,[sp,#0x68]
002326  6941              LDR      r1,[r0,#0x14]
002328  9113              STR      r1,[sp,#0x4c]
                  |L16.9002|
;;;1516           vmbreak;
00232a  e477              B        |L16.7196|
;;;1517         }
;;;1518         vmcase(OP_GTI) {
;;;1519           int im = GETARG_sB(i);
00232c  9811              LDR      r0,[sp,#0x44]
00232e  f3c04007          UBFX     r0,r0,#16,#8
002332  387f              SUBS     r0,r0,#0x7f
002334  900e              STR      r0,[sp,#0x38]
;;;1520           if (ttisinteger(vra))
002336  980f              LDR      r0,[sp,#0x3c]
002338  7a00              LDRB     r0,[r0,#8]
00233a  2823              CMP      r0,#0x23
00233c  d10b              BNE      |L16.9046|
;;;1521             cond = (im < ivalue(vra));
00233e  980f              LDR      r0,[sp,#0x3c]
002340  c80c              LDM      r0!,{r2,r3}
002342  980e              LDR      r0,[sp,#0x38]
002344  17c1              ASRS     r1,r0,#31
002346  1a80              SUBS     r0,r0,r2
002348  4199              SBCS     r1,r1,r3
00234a  da01              BGE      |L16.9040|
00234c  2001              MOVS     r0,#1
00234e  e000              B        |L16.9042|
                  |L16.9040|
002350  2000              MOVS     r0,#0
                  |L16.9042|
002352  9012              STR      r0,[sp,#0x48]
002354  e02b              B        |L16.9134|
                  |L16.9046|
;;;1522           else if (ttisfloat(vra))
002356  980f              LDR      r0,[sp,#0x3c]
002358  7a00              LDRB     r0,[r0,#8]
00235a  2813              CMP      r0,#0x13
00235c  d114              BNE      |L16.9096|
;;;1523             cond = luai_numlt(cast_num(im), fltvalue(vra));
00235e  980e              LDR      r0,[sp,#0x38]
002360  f7fffffe          BL       __aeabi_i2d
002364  e9cd010c          STRD     r0,r1,[sp,#0x30]
002368  980f              LDR      r0,[sp,#0x3c]
00236a  c803              LDM      r0,{r0,r1}
00236c  4602              MOV      r2,r0
00236e  460b              MOV      r3,r1
002370  e9cd010a          STRD     r0,r1,[sp,#0x28]
002374  e9dd010c          LDRD     r0,r1,[sp,#0x30]
002378  f7fffffe          BL       __aeabi_cdcmple
00237c  d201              BCS      |L16.9090|
00237e  2001              MOVS     r0,#1
002380  e000              B        |L16.9092|
                  |L16.9090|
002382  2000              MOVS     r0,#0
                  |L16.9092|
002384  9012              STR      r0,[sp,#0x48]
002386  e012              B        |L16.9134|
                  |L16.9096|
;;;1524           else
;;;1525             Protect(cond = luaT_callorderiTM(L, vra, im, 1, TM_LT));
002388  9914              LDR      r1,[sp,#0x50]
00238a  981a              LDR      r0,[sp,#0x68]
00238c  6101              STR      r1,[r0,#0x10]
00238e  981a              LDR      r0,[sp,#0x68]
002390  6841              LDR      r1,[r0,#4]
002392  9819              LDR      r0,[sp,#0x64]
002394  60c1              STR      r1,[r0,#0xc]
002396  2016              MOVS     r0,#0x16
002398  2301              MOVS     r3,#1
00239a  9000              STR      r0,[sp,#0]
00239c  e9dd210e          LDRD     r2,r1,[sp,#0x38]
0023a0  9819              LDR      r0,[sp,#0x64]
0023a2  f7fffffe          BL       luaT_callorderiTM
0023a6  9012              STR      r0,[sp,#0x48]
0023a8  981a              LDR      r0,[sp,#0x68]
0023aa  6940              LDR      r0,[r0,#0x14]
0023ac  9013              STR      r0,[sp,#0x4c]
                  |L16.9134|
;;;1526           docondjump();
0023ae  e9dd1011          LDRD     r1,r0,[sp,#0x44]
0023b2  f3c131c0          UBFX     r1,r1,#15,#1
0023b6  4288              CMP      r0,r1
0023b8  d003              BEQ      |L16.9154|
0023ba  9814              LDR      r0,[sp,#0x50]
0023bc  1d00              ADDS     r0,r0,#4
0023be  9014              STR      r0,[sp,#0x50]
0023c0  e012              B        |L16.9192|
                  |L16.9154|
0023c2  9814              LDR      r0,[sp,#0x50]
0023c4  6801              LDR      r1,[r0,#0]
0023c6  9111              STR      r1,[sp,#0x44]
0023c8  f06f417f          MVN      r1,#0xff000000
0023cc  9811              LDR      r0,[sp,#0x44]
0023ce  ea012010          AND      r0,r1,r0,LSR #8
0023d2  f06f517e          MVN      r1,#0x3f800000
0023d6  1a41              SUBS     r1,r0,r1
0023d8  1c49              ADDS     r1,r1,#1
0023da  9814              LDR      r0,[sp,#0x50]
0023dc  eb000181          ADD      r1,r0,r1,LSL #2
0023e0  9114              STR      r1,[sp,#0x50]
0023e2  981a              LDR      r0,[sp,#0x68]
0023e4  6941              LDR      r1,[r0,#0x14]
0023e6  9113              STR      r1,[sp,#0x4c]
                  |L16.9192|
;;;1527           vmbreak;
0023e8  e418              B        |L16.7196|
;;;1528         }
;;;1529         vmcase(OP_GEI) {
;;;1530           int im = GETARG_sB(i);
0023ea  9811              LDR      r0,[sp,#0x44]
0023ec  f3c04007          UBFX     r0,r0,#16,#8
0023f0  387f              SUBS     r0,r0,#0x7f
0023f2  900e              STR      r0,[sp,#0x38]
;;;1531           if (ttisinteger(vra))
0023f4  980f              LDR      r0,[sp,#0x3c]
0023f6  7a00              LDRB     r0,[r0,#8]
0023f8  2823              CMP      r0,#0x23
0023fa  d10c              BNE      |L16.9238|
;;;1532             cond = (im <= ivalue(vra));
0023fc  980f              LDR      r0,[sp,#0x3c]
0023fe  e9d03100          LDRD     r3,r1,[r0,#0]
002402  980e              LDR      r0,[sp,#0x38]
002404  17c2              ASRS     r2,r0,#31
002406  1a18              SUBS     r0,r3,r0
002408  4191              SBCS     r1,r1,r2
00240a  db01              BLT      |L16.9232|
00240c  2001              MOVS     r0,#1
00240e  e000              B        |L16.9234|
                  |L16.9232|
002410  2000              MOVS     r0,#0
                  |L16.9234|
002412  9012              STR      r0,[sp,#0x48]
002414  e02b              B        |L16.9326|
                  |L16.9238|
;;;1533           else if (ttisfloat(vra))
002416  980f              LDR      r0,[sp,#0x3c]
002418  7a00              LDRB     r0,[r0,#8]
00241a  2813              CMP      r0,#0x13
00241c  d114              BNE      |L16.9288|
;;;1534             cond = luai_numle(cast_num(im), fltvalue(vra));
00241e  980e              LDR      r0,[sp,#0x38]
002420  f7fffffe          BL       __aeabi_i2d
002424  e9cd010c          STRD     r0,r1,[sp,#0x30]
002428  980f              LDR      r0,[sp,#0x3c]
00242a  c803              LDM      r0,{r0,r1}
00242c  4602              MOV      r2,r0
00242e  460b              MOV      r3,r1
002430  e9cd010a          STRD     r0,r1,[sp,#0x28]
002434  e9dd010c          LDRD     r0,r1,[sp,#0x30]
002438  f7fffffe          BL       __aeabi_cdcmple
00243c  d801              BHI      |L16.9282|
00243e  2001              MOVS     r0,#1
002440  e000              B        |L16.9284|
                  |L16.9282|
002442  2000              MOVS     r0,#0
                  |L16.9284|
002444  9012              STR      r0,[sp,#0x48]
002446  e012              B        |L16.9326|
                  |L16.9288|
;;;1535           else
;;;1536             Protect(cond = luaT_callorderiTM(L, vra, im, 1, TM_LE));
002448  9914              LDR      r1,[sp,#0x50]
00244a  981a              LDR      r0,[sp,#0x68]
00244c  6101              STR      r1,[r0,#0x10]
00244e  981a              LDR      r0,[sp,#0x68]
002450  6841              LDR      r1,[r0,#4]
002452  9819              LDR      r0,[sp,#0x64]
002454  60c1              STR      r1,[r0,#0xc]
002456  2017              MOVS     r0,#0x17
002458  2301              MOVS     r3,#1
00245a  9000              STR      r0,[sp,#0]
00245c  e9dd210e          LDRD     r2,r1,[sp,#0x38]
002460  9819              LDR      r0,[sp,#0x64]
002462  f7fffffe          BL       luaT_callorderiTM
002466  9012              STR      r0,[sp,#0x48]
002468  981a              LDR      r0,[sp,#0x68]
00246a  6940              LDR      r0,[r0,#0x14]
00246c  9013              STR      r0,[sp,#0x4c]
                  |L16.9326|
;;;1537           docondjump();
00246e  e9dd1011          LDRD     r1,r0,[sp,#0x44]
002472  f3c131c0          UBFX     r1,r1,#15,#1
002476  4288              CMP      r0,r1
002478  d003              BEQ      |L16.9346|
00247a  9814              LDR      r0,[sp,#0x50]
00247c  1d00              ADDS     r0,r0,#4
00247e  9014              STR      r0,[sp,#0x50]
002480  e012              B        |L16.9384|
                  |L16.9346|
002482  9814              LDR      r0,[sp,#0x50]
002484  6801              LDR      r1,[r0,#0]
002486  9111              STR      r1,[sp,#0x44]
002488  f06f417f          MVN      r1,#0xff000000
00248c  9811              LDR      r0,[sp,#0x44]
00248e  ea012010          AND      r0,r1,r0,LSR #8
002492  f06f517e          MVN      r1,#0x3f800000
002496  1a41              SUBS     r1,r0,r1
002498  1c49              ADDS     r1,r1,#1
00249a  9814              LDR      r0,[sp,#0x50]
00249c  eb000181          ADD      r1,r0,r1,LSL #2
0024a0  9114              STR      r1,[sp,#0x50]
0024a2  981a              LDR      r0,[sp,#0x68]
0024a4  6941              LDR      r1,[r0,#0x14]
0024a6  9113              STR      r1,[sp,#0x4c]
                  |L16.9384|
;;;1538           vmbreak;
0024a8  e41a              B        |L16.7392|
;;;1539         }
;;;1540         vmcase(OP_TEST) {
;;;1541           cond = !l_isfalse(vra);
0024aa  980f              LDR      r0,[sp,#0x3c]
0024ac  7a00              LDRB     r0,[r0,#8]
0024ae  b140              CBZ      r0,|L16.9410|
0024b0  980f              LDR      r0,[sp,#0x3c]
0024b2  7a00              LDRB     r0,[r0,#8]
0024b4  2801              CMP      r0,#1
0024b6  d102              BNE      |L16.9406|
0024b8  980f              LDR      r0,[sp,#0x3c]
0024ba  6800              LDR      r0,[r0,#0]
0024bc  b108              CBZ      r0,|L16.9410|
                  |L16.9406|
0024be  2001              MOVS     r0,#1
0024c0  e000              B        |L16.9412|
                  |L16.9410|
0024c2  2000              MOVS     r0,#0
                  |L16.9412|
0024c4  9012              STR      r0,[sp,#0x48]
;;;1542           docondjump();
0024c6  e9dd1011          LDRD     r1,r0,[sp,#0x44]
0024ca  f3c131c0          UBFX     r1,r1,#15,#1
0024ce  4288              CMP      r0,r1
0024d0  d003              BEQ      |L16.9434|
0024d2  9814              LDR      r0,[sp,#0x50]
0024d4  1d00              ADDS     r0,r0,#4
0024d6  9014              STR      r0,[sp,#0x50]
0024d8  e012              B        |L16.9472|
                  |L16.9434|
0024da  9814              LDR      r0,[sp,#0x50]
0024dc  6801              LDR      r1,[r0,#0]
0024de  9111              STR      r1,[sp,#0x44]
0024e0  f06f417f          MVN      r1,#0xff000000
0024e4  9811              LDR      r0,[sp,#0x44]
0024e6  ea012010          AND      r0,r1,r0,LSR #8
0024ea  f06f517e          MVN      r1,#0x3f800000
0024ee  1a41              SUBS     r1,r0,r1
0024f0  1c49              ADDS     r1,r1,#1
0024f2  9814              LDR      r0,[sp,#0x50]
0024f4  eb000181          ADD      r1,r0,r1,LSL #2
0024f8  9114              STR      r1,[sp,#0x50]
0024fa  981a              LDR      r0,[sp,#0x68]
0024fc  6941              LDR      r1,[r0,#0x14]
0024fe  9113              STR      r1,[sp,#0x4c]
                  |L16.9472|
;;;1543           vmbreak;
002500  e446              B        |L16.7568|
;;;1544         }
;;;1545         vmcase(OP_TESTSET) {
;;;1546           TValue *rb = vRB(i);
002502  9811              LDR      r0,[sp,#0x44]
002504  f3c04007          UBFX     r0,r0,#16,#8
002508  9915              LDR      r1,[sp,#0x54]
00250a  eb011100          ADD      r1,r1,r0,LSL #4
00250e  910e              STR      r1,[sp,#0x38]
;;;1547           if (l_isfalse(rb) == GETARG_k(i))
002510  980e              LDR      r0,[sp,#0x38]
002512  7a00              LDRB     r0,[r0,#8]
002514  b130              CBZ      r0,|L16.9508|
002516  980e              LDR      r0,[sp,#0x38]
002518  7a00              LDRB     r0,[r0,#8]
00251a  2801              CMP      r0,#1
00251c  d104              BNE      |L16.9512|
00251e  980e              LDR      r0,[sp,#0x38]
002520  6800              LDR      r0,[r0,#0]
002522  b908              CBNZ     r0,|L16.9512|
                  |L16.9508|
002524  2101              MOVS     r1,#1
002526  e000              B        |L16.9514|
                  |L16.9512|
002528  2100              MOVS     r1,#0
                  |L16.9514|
00252a  9811              LDR      r0,[sp,#0x44]
00252c  f3c030c0          UBFX     r0,r0,#15,#1
002530  4281              CMP      r1,r0
002532  d103              BNE      |L16.9532|
;;;1548             pc++;
002534  9814              LDR      r0,[sp,#0x50]
002536  1d00              ADDS     r0,r0,#4
002538  9014              STR      r0,[sp,#0x50]
00253a  e01e              B        |L16.9594|
                  |L16.9532|
;;;1549           else {
;;;1550             setobj2s(L, ra, rb);
00253c  9810              LDR      r0,[sp,#0x40]
00253e  900d              STR      r0,[sp,#0x34]
002540  980e              LDR      r0,[sp,#0x38]
002542  900c              STR      r0,[sp,#0x30]
002544  e9dd100c          LDRD     r1,r0,[sp,#0x30]
002548  c906              LDM      r1,{r1,r2}
00254a  c006              STM      r0!,{r1,r2}
00254c  980c              LDR      r0,[sp,#0x30]
00254e  7a02              LDRB     r2,[r0,#8]
002550  980d              LDR      r0,[sp,#0x34]
002552  7202              STRB     r2,[r0,#8]
;;;1551             donextjump(ci);
002554  9814              LDR      r0,[sp,#0x50]
002556  6800              LDR      r0,[r0,#0]
002558  9011              STR      r0,[sp,#0x44]
00255a  f06f417f          MVN      r1,#0xff000000
00255e  9811              LDR      r0,[sp,#0x44]
002560  ea012010          AND      r0,r1,r0,LSR #8
002564  f06f517e          MVN      r1,#0x3f800000
002568  1a41              SUBS     r1,r0,r1
00256a  1c49              ADDS     r1,r1,#1
00256c  9814              LDR      r0,[sp,#0x50]
00256e  eb000181          ADD      r1,r0,r1,LSL #2
002572  9114              STR      r1,[sp,#0x50]
002574  981a              LDR      r0,[sp,#0x68]
002576  6941              LDR      r1,[r0,#0x14]
002578  9113              STR      r1,[sp,#0x4c]
                  |L16.9594|
;;;1552           }
;;;1553           vmbreak;
00257a  e268              B        |L16.10830|
;;;1554         }
;;;1555         vmcase(OP_UNDEF) {
;;;1556           TValue *rb = vRB(i);
00257c  9811              LDR      r0,[sp,#0x44]
00257e  f3c04007          UBFX     r0,r0,#16,#8
002582  9915              LDR      r1,[sp,#0x54]
002584  eb011100          ADD      r1,r1,r0,LSL #4
002588  910e              STR      r1,[sp,#0x38]
;;;1557           luaT_keydef(L, vra, rb, 1);
00258a  2301              MOVS     r3,#1
00258c  e9dd210e          LDRD     r2,r1,[sp,#0x38]
002590  9819              LDR      r0,[sp,#0x64]
002592  f7fffffe          BL       luaT_keydef
;;;1558           vmbreak;
002596  e25a              B        |L16.10830|
;;;1559         }
;;;1560         vmcase(OP_ISDEF) {
;;;1561           TValue *rb = vRB(i);
002598  9811              LDR      r0,[sp,#0x44]
00259a  f3c04007          UBFX     r0,r0,#16,#8
00259e  9915              LDR      r1,[sp,#0x54]
0025a0  eb011100          ADD      r1,r1,r0,LSL #4
0025a4  910e              STR      r1,[sp,#0x38]
;;;1562           TValue *rc = vRC(i);
0025a6  9811              LDR      r0,[sp,#0x44]
0025a8  0e01              LSRS     r1,r0,#24
0025aa  9815              LDR      r0,[sp,#0x54]
0025ac  eb001101          ADD      r1,r0,r1,LSL #4
0025b0  910d              STR      r1,[sp,#0x34]
;;;1563           int res = luaT_keydef(L, rb, rc, 0);
0025b2  2300              MOVS     r3,#0
0025b4  e9dd210d          LDRD     r2,r1,[sp,#0x34]
0025b8  9819              LDR      r0,[sp,#0x64]
0025ba  f7fffffe          BL       luaT_keydef
0025be  900c              STR      r0,[sp,#0x30]
;;;1564           setbvalue(vra, res == GETARG_k(i));
0025c0  980f              LDR      r0,[sp,#0x3c]
0025c2  900b              STR      r0,[sp,#0x2c]
0025c4  9911              LDR      r1,[sp,#0x44]
0025c6  f3c131c0          UBFX     r1,r1,#15,#1
0025ca  980c              LDR      r0,[sp,#0x30]
0025cc  4288              CMP      r0,r1
0025ce  d101              BNE      |L16.9684|
0025d0  2101              MOVS     r1,#1
0025d2  e000              B        |L16.9686|
                  |L16.9684|
0025d4  2100              MOVS     r1,#0
                  |L16.9686|
0025d6  980b              LDR      r0,[sp,#0x2c]
0025d8  6001              STR      r1,[r0,#0]
0025da  2101              MOVS     r1,#1
0025dc  980b              LDR      r0,[sp,#0x2c]
0025de  7201              STRB     r1,[r0,#8]
;;;1565           vmbreak;
0025e0  e235              B        |L16.10830|
;;;1566         }
;;;1567         vmcase(OP_CALL) {
;;;1568           int b = GETARG_B(i);
0025e2  9811              LDR      r0,[sp,#0x44]
0025e4  f3c04107          UBFX     r1,r0,#16,#8
0025e8  910e              STR      r1,[sp,#0x38]
;;;1569           int nresults = GETARG_C(i) - 1;
0025ea  9811              LDR      r0,[sp,#0x44]
0025ec  0e00              LSRS     r0,r0,#24
0025ee  1e40              SUBS     r0,r0,#1
0025f0  900d              STR      r0,[sp,#0x34]
;;;1570           if (b != 0)  /* fixed number of arguments? */
0025f2  980e              LDR      r0,[sp,#0x38]
0025f4  b128              CBZ      r0,|L16.9730|
;;;1571             L->top = ra + b;  /* top signals number of arguments */
0025f6  9910              LDR      r1,[sp,#0x40]
0025f8  980e              LDR      r0,[sp,#0x38]
0025fa  eb011100          ADD      r1,r1,r0,LSL #4
0025fe  9819              LDR      r0,[sp,#0x64]
002600  60c1              STR      r1,[r0,#0xc]
                  |L16.9730|
;;;1572           /* else previous instruction set top */
;;;1573           ProtectNT(luaD_call(L, ra, nresults));
002602  9914              LDR      r1,[sp,#0x50]
002604  981a              LDR      r0,[sp,#0x68]
002606  6101              STR      r1,[r0,#0x10]
002608  9a0d              LDR      r2,[sp,#0x34]
00260a  9910              LDR      r1,[sp,#0x40]
00260c  9819              LDR      r0,[sp,#0x64]
00260e  f7fffffe          BL       luaD_call
002612  981a              LDR      r0,[sp,#0x68]
002614  6941              LDR      r1,[r0,#0x14]
002616  9113              STR      r1,[sp,#0x4c]
;;;1574           vmbreak;
002618  e219              B        |L16.10830|
;;;1575         }
;;;1576         vmcase(OP_TAILCALL) {
;;;1577           int b = GETARG_B(i);  /* number of arguments + 1 (function) */
00261a  9811              LDR      r0,[sp,#0x44]
00261c  f3c04107          UBFX     r1,r0,#16,#8
002620  910e              STR      r1,[sp,#0x38]
;;;1578           int delta = 0;  /* virtual 'func' - real 'func' (vararg functions) */
002622  2100              MOVS     r1,#0
002624  910d              STR      r1,[sp,#0x34]
;;;1579           if (b != 0)
002626  980e              LDR      r0,[sp,#0x38]
002628  b130              CBZ      r0,|L16.9784|
;;;1580             L->top = ra + b;
00262a  9910              LDR      r1,[sp,#0x40]
00262c  980e              LDR      r0,[sp,#0x38]
00262e  eb011100          ADD      r1,r1,r0,LSL #4
002632  9819              LDR      r0,[sp,#0x64]
002634  60c1              STR      r1,[r0,#0xc]
002636  e005              B        |L16.9796|
                  |L16.9784|
;;;1581           else  /* previous instruction set top */
;;;1582             b = cast_int(L->top - ra);
002638  9819              LDR      r0,[sp,#0x64]
00263a  68c1              LDR      r1,[r0,#0xc]
00263c  9810              LDR      r0,[sp,#0x40]
00263e  1a08              SUBS     r0,r1,r0
002640  1101              ASRS     r1,r0,#4
002642  910e              STR      r1,[sp,#0x38]
                  |L16.9796|
;;;1583           savepc(ci);
002644  9914              LDR      r1,[sp,#0x50]
002646  981a              LDR      r0,[sp,#0x68]
002648  6101              STR      r1,[r0,#0x10]
;;;1584           if (TESTARG_k(i)) {
00264a  9811              LDR      r0,[sp,#0x44]
00264c  f4004000          AND      r0,r0,#0x8000
002650  b170              CBZ      r0,|L16.9840|
;;;1585             int nparams1 = GETARG_C(i);
002652  9811              LDR      r0,[sp,#0x44]
002654  0e00              LSRS     r0,r0,#24
002656  900c              STR      r0,[sp,#0x30]
;;;1586             if (nparams1)  /* vararg function? */
002658  980c              LDR      r0,[sp,#0x30]
00265a  b120              CBZ      r0,|L16.9830|
;;;1587               delta = ci->u.l.nextraargs + nparams1;
00265c  981a              LDR      r0,[sp,#0x68]
00265e  6981              LDR      r1,[r0,#0x18]
002660  980c              LDR      r0,[sp,#0x30]
002662  4401              ADD      r1,r1,r0
002664  910d              STR      r1,[sp,#0x34]
                  |L16.9830|
;;;1588             luaF_close(L, base);  /* close upvalues from current call */
002666  9915              LDR      r1,[sp,#0x54]
002668  9819              LDR      r0,[sp,#0x64]
00266a  f7fffffe          BL       luaF_close
;;;1589           }
00266e  bf00              NOP      
                  |L16.9840|
;;;1590           if (!ttisfunction(vra)) {  /* not a function? */
002670  980f              LDR      r0,[sp,#0x3c]
002672  7a00              LDRB     r0,[r0,#8]
002674  f000000f          AND      r0,r0,#0xf
002678  2806              CMP      r0,#6
00267a  d006              BEQ      |L16.9866|
;;;1591             luaD_tryfuncTM(L, ra);  /* try '__call' metamethod */
00267c  9910              LDR      r1,[sp,#0x40]
00267e  9819              LDR      r0,[sp,#0x64]
002680  f7fffffe          BL       luaD_tryfuncTM
;;;1592             b++;  /* there is now one extra argument */
002684  980e              LDR      r0,[sp,#0x38]
002686  1c40              ADDS     r0,r0,#1
002688  900e              STR      r0,[sp,#0x38]
                  |L16.9866|
;;;1593           }
;;;1594           if (!ttisLclosure(vra)) {  /* C function? */
00268a  980f              LDR      r0,[sp,#0x3c]
00268c  7a00              LDRB     r0,[r0,#8]
00268e  2856              CMP      r0,#0x56
002690  d02a              BEQ      |L16.9960|
;;;1595             luaD_call(L, ra, LUA_MULTRET);  /* call it */
002692  f04f32ff          MOV      r2,#0xffffffff
002696  9910              LDR      r1,[sp,#0x40]
002698  9819              LDR      r0,[sp,#0x64]
00269a  f7fffffe          BL       luaD_call
;;;1596             updatetrap(ci);
00269e  981a              LDR      r0,[sp,#0x68]
0026a0  6941              LDR      r1,[r0,#0x14]
0026a2  9113              STR      r1,[sp,#0x4c]
;;;1597             if (trap) {  /* stack may have been relocated */
0026a4  9813              LDR      r0,[sp,#0x4c]
0026a6  b150              CBZ      r0,|L16.9918|
;;;1598               updatebase(ci);
0026a8  981a              LDR      r0,[sp,#0x68]
0026aa  6801              LDR      r1,[r0,#0]
0026ac  3110              ADDS     r1,r1,#0x10
0026ae  9115              STR      r1,[sp,#0x54]
;;;1599               ra = RA(i);
0026b0  9811              LDR      r0,[sp,#0x44]
0026b2  f3c010c7          UBFX     r0,r0,#7,#8
0026b6  9915              LDR      r1,[sp,#0x54]
0026b8  eb011100          ADD      r1,r1,r0,LSL #4
0026bc  9110              STR      r1,[sp,#0x40]
                  |L16.9918|
;;;1600             }
;;;1601             ci->func -= delta;
0026be  981a              LDR      r0,[sp,#0x68]
0026c0  6801              LDR      r1,[r0,#0]
0026c2  980d              LDR      r0,[sp,#0x34]
0026c4  eba11100          SUB      r1,r1,r0,LSL #4
0026c8  981a              LDR      r0,[sp,#0x68]
0026ca  6001              STR      r1,[r0,#0]
;;;1602             luaD_poscall(L, ci, ra, cast_int(L->top - ra));
0026cc  9819              LDR      r0,[sp,#0x64]
0026ce  68c1              LDR      r1,[r0,#0xc]
0026d0  9810              LDR      r0,[sp,#0x40]
0026d2  1a08              SUBS     r0,r1,r0
0026d4  1101              ASRS     r1,r0,#4
0026d6  460b              MOV      r3,r1
0026d8  910c              STR      r1,[sp,#0x30]
0026da  9a10              LDR      r2,[sp,#0x40]
0026dc  e9dd0119          LDRD     r0,r1,[sp,#0x64]
0026e0  f7fffffe          BL       luaD_poscall
                  |L16.9956|
;;;1603             return;
;;;1604           }
;;;1605           else {  /* Lua tail call */
;;;1606             ci->func -= delta;
;;;1607             luaD_pretailcall(L, ci, ra, b);  /* prepare call frame */
;;;1608             goto tailcall;
;;;1609           }
;;;1610           vmbreak;
;;;1611         }
;;;1612         vmcase(OP_RETURN) {
;;;1613           int b = GETARG_B(i);
;;;1614           int n = (b != 0 ? b - 1 : cast_int(L->top - ra));
;;;1615           if (TESTARG_k(i)) {
;;;1616             int nparams1 = GETARG_C(i);
;;;1617             if (nparams1)  /* vararg function? */
;;;1618               ci->func -= ci->u.l.nextraargs + nparams1;
;;;1619             luaF_close(L, base);  /* there may be open upvalues */
;;;1620           }
;;;1621           halfProtect(luaD_poscall(L, ci, ra, n));
;;;1622           return;
;;;1623         }
;;;1624         vmcase(OP_RETURN0) {
;;;1625           if (L->hookmask)
;;;1626             halfProtect(luaD_poscall(L, ci, ra, 0));  /* no hurry... */
;;;1627           else {
;;;1628             int nres = ci->nresults;
;;;1629             L->ci = ci->previous;  /* back to caller */
;;;1630             L->top = base - 1;
;;;1631             while (nres-- > 0)
;;;1632               setnilvalue(s2v(L->top++));  /* all results are nil */
;;;1633           }
;;;1634           return;
;;;1635         }
;;;1636         vmcase(OP_RETURN1) {
;;;1637           if (L->hookmask)
;;;1638             halfProtect(luaD_poscall(L, ci, ra, 1));  /* no hurry... */
;;;1639           else {
;;;1640             int nres = ci->nresults;
;;;1641             L->ci = ci->previous;  /* back to caller */
;;;1642             if (nres == 0)
;;;1643               L->top = base - 1;  /* asked for no results */
;;;1644             else {
;;;1645               setobjs2s(L, base - 1, ra);  /* at least this result */
;;;1646               L->top = base;
;;;1647               while (--nres > 0)  /* complete missing results */
;;;1648                 setnilvalue(s2v(L->top++));
;;;1649             }
;;;1650           }
;;;1651           return;
;;;1652         }
;;;1653         vmcase(OP_FORLOOP1) {
;;;1654           lua_Integer idx = intop(+, ivalue(vra), 1); /* increment index */
;;;1655           lua_Integer limit = ivalue(s2v(ra + 1));
;;;1656           if (idx <= limit) {
;;;1657             pc -= GETARG_Bx(i);  /* jump back */
;;;1658             chgivalue(vra, idx);  /* update internal index... */
;;;1659             setivalue(s2v(ra + 3), idx);  /* ...and external index */
;;;1660           }
;;;1661           updatetrap(ci);
;;;1662           vmbreak;
;;;1663         }
;;;1664         vmcase(OP_FORPREP1) {
;;;1665           TValue *init = vra;
;;;1666           TValue *plimit = s2v(ra + 1);
;;;1667           lua_Integer ilimit, initv;
;;;1668           int stopnow;
;;;1669           if (!forlimit(plimit, &ilimit, 1, &stopnow)) {
;;;1670               savestate(L, ci);  /* for the error message */
;;;1671               luaG_runerror(L, "'for' limit must be a number");
;;;1672           }
;;;1673           initv = (stopnow ? 0 : ivalue(init));
;;;1674           setivalue(plimit, ilimit);
;;;1675           setivalue(init, intop(-, initv, 1));
;;;1676           pc += GETARG_Bx(i);
;;;1677           vmbreak;
;;;1678         }
;;;1679         vmcase(OP_FORLOOP) {
;;;1680           if (ttisinteger(vra)) {  /* integer loop? */
;;;1681             lua_Integer step = ivalue(s2v(ra + 2));
;;;1682             lua_Integer idx = intop(+, ivalue(vra), step); /* increment index */
;;;1683             lua_Integer limit = ivalue(s2v(ra + 1));
;;;1684             if ((0 < step) ? (idx <= limit) : (limit <= idx)) {
;;;1685               pc -= GETARG_Bx(i);  /* jump back */
;;;1686               chgivalue(vra, idx);  /* update internal index... */
;;;1687               setivalue(s2v(ra + 3), idx);  /* ...and external index */
;;;1688             }
;;;1689           }
;;;1690           else {  /* floating loop */
;;;1691             lua_Number step = fltvalue(s2v(ra + 2));
;;;1692             lua_Number limit = fltvalue(s2v(ra + 1));
;;;1693             lua_Number idx = fltvalue(vra);
;;;1694             idx = luai_numadd(L, idx, step);  /* inc. index */
;;;1695             if (luai_numlt(0, step) ? luai_numle(idx, limit)
;;;1696                                     : luai_numle(limit, idx)) {
;;;1697               pc -= GETARG_Bx(i);  /* jump back */
;;;1698               chgfltvalue(vra, idx);  /* update internal index... */
;;;1699               setfltvalue(s2v(ra + 3), idx);  /* ...and external index */
;;;1700             }
;;;1701           }
;;;1702           updatetrap(ci);
;;;1703           vmbreak;
;;;1704         }
;;;1705         vmcase(OP_FORPREP) {
;;;1706           TValue *init = vra;
;;;1707           TValue *plimit = s2v(ra + 1);
;;;1708           TValue *pstep = s2v(ra + 2);
;;;1709           lua_Integer ilimit;
;;;1710           int stopnow;
;;;1711           if (ttisinteger(init) && ttisinteger(pstep) &&
;;;1712               forlimit(plimit, &ilimit, ivalue(pstep), &stopnow)) {
;;;1713             /* all values are integer */
;;;1714             lua_Integer initv = (stopnow ? 0 : ivalue(init));
;;;1715             setivalue(plimit, ilimit);
;;;1716             setivalue(init, intop(-, initv, ivalue(pstep)));
;;;1717           }
;;;1718           else {  /* try making all values floats */
;;;1719             lua_Number ninit; lua_Number nlimit; lua_Number nstep;
;;;1720             savestate(L, ci);  /* in case of errors */
;;;1721             if (!tonumber(plimit, &nlimit))
;;;1722               luaG_runerror(L, "'for' limit must be a number");
;;;1723             setfltvalue(plimit, nlimit);
;;;1724             if (!tonumber(pstep, &nstep))
;;;1725               luaG_runerror(L, "'for' step must be a number");
;;;1726             setfltvalue(pstep, nstep);
;;;1727             if (!tonumber(init, &ninit))
;;;1728               luaG_runerror(L, "'for' initial value must be a number");
;;;1729             setfltvalue(init, luai_numsub(L, ninit, nstep));
;;;1730           }
;;;1731           pc += GETARG_Bx(i);
;;;1732           vmbreak;
;;;1733         }
;;;1734         vmcase(OP_TFORCALL) {
;;;1735           StkId cb = ra + 3;  /* call base */
;;;1736           setobjs2s(L, cb+2, ra+2);
;;;1737           setobjs2s(L, cb+1, ra+1);
;;;1738           setobjs2s(L, cb, ra);
;;;1739           L->top = cb + 3;  /* func. + 2 args (state and index) */
;;;1740           Protect(luaD_call(L, cb, GETARG_C(i)));
;;;1741           if (trap)  /* keep 'base' correct for next instruction */
;;;1742             updatebase(ci);
;;;1743           i = *(pc++);  /* go to next instruction */
;;;1744           ra = RA(i);  /* get its 'ra' */
;;;1745           lua_assert(GET_OPCODE(i) == OP_TFORLOOP);
;;;1746           goto l_tforloop;
;;;1747         }
;;;1748         vmcase(OP_TFORLOOP) {
;;;1749           l_tforloop:
;;;1750           if (!ttisnil(s2v(ra + 1))) {  /* continue loop? */
;;;1751             setobjs2s(L, ra, ra + 1);  /* save control variable */
;;;1752             pc -= GETARG_Bx(i);  /* jump back */
;;;1753           }
;;;1754           vmbreak;
;;;1755         }
;;;1756         vmcase(OP_SETLIST) {
;;;1757           int n = GETARG_B(i);
;;;1758           int c = GETARG_C(i);
;;;1759           unsigned int last;
;;;1760           Table *h;
;;;1761           if (n == 0)
;;;1762             n = cast_int(L->top - ra) - 1;
;;;1763           else
;;;1764             L->top = ci->top;  /* correct top in case of GC */
;;;1765           if (c == 0) {
;;;1766             c = GETARG_Ax(*pc); pc++;
;;;1767           }
;;;1768           h = hvalue(vra);
;;;1769           last = ((c-1)*LFIELDS_PER_FLUSH) + n;
;;;1770           if (last > h->sizearray)  /* needs more space? */
;;;1771             luaH_resizearray(L, h, last);  /* preallocate it at once */
;;;1772           for (; n > 0; n--) {
;;;1773             TValue *val = s2v(ra + n);
;;;1774             setobj2t(L, &h->array[last - 1], val);
;;;1775             last--;
;;;1776             luaC_barrierback(L, obj2gco(h), val);
;;;1777           }
;;;1778           vmbreak;
;;;1779         }
;;;1780         vmcase(OP_CLOSURE) {
;;;1781           Proto *p = cl->p->p[GETARG_Bx(i)];
;;;1782           LClosure *ncl = getcached(p, cl->upvals, base);  /* cached closure */
;;;1783           if (ncl == NULL) {  /* no match? */
;;;1784             savestate(L, ci);  /* in case of allocation errors */
;;;1785             pushclosure(L, p, cl->upvals, base, ra);  /* create a new one */
;;;1786           }
;;;1787           else
;;;1788             setclLvalue2s(L, ra, ncl);  /* push cashed closure */
;;;1789           checkGC(L, ra + 1);
;;;1790           vmbreak;
;;;1791         }
;;;1792         vmcase(OP_VARARG) {
;;;1793           int n = GETARG_C(i) - 1;  /* required results */
;;;1794           ProtectNT(luaT_getvarargs(L, ci, ra, n));
;;;1795           vmbreak;
;;;1796         }
;;;1797         vmcase(OP_PREPVARARG) {
;;;1798           luaT_adjustvarargs(L, GETARG_A(i), ci, cl->p);
;;;1799           updatetrap(ci);
;;;1800           if (trap) {
;;;1801             luaD_hookcall(L, ci);
;;;1802             L->oldpc = pc + 1;  /* next opcode will be seen as a "new" line */
;;;1803           }
;;;1804           updatebase(ci);  /* function has new base after adjustment */
;;;1805           vmbreak;
;;;1806         }
;;;1807         vmcase(OP_EXTRAARG) {
;;;1808           lua_assert(0);
;;;1809           vmbreak;
;;;1810         }
;;;1811       }
;;;1812     }
;;;1813   }
0026e4  b01b              ADD      sp,sp,#0x6c
0026e6  bd30              POP      {r4,r5,pc}
                  |L16.9960|
0026e8  981a              LDR      r0,[sp,#0x68]         ;1606
0026ea  6801              LDR      r1,[r0,#0]            ;1606
0026ec  980d              LDR      r0,[sp,#0x34]         ;1606
0026ee  eba11100          SUB      r1,r1,r0,LSL #4       ;1606
0026f2  981a              LDR      r0,[sp,#0x68]         ;1606
0026f4  6001              STR      r1,[r0,#0]            ;1606
0026f6  9b0e              LDR      r3,[sp,#0x38]         ;1607
0026f8  9a10              LDR      r2,[sp,#0x40]         ;1607
0026fa  e9dd0119          LDRD     r0,r1,[sp,#0x64]      ;1607
0026fe  f7fffffe          BL       luaD_pretailcall
002702  f7fdbc80          B        |L16.6|
002706  9811              LDR      r0,[sp,#0x44]         ;1613
002708  f3c04107          UBFX     r1,r0,#16,#8          ;1613
00270c  910e              STR      r1,[sp,#0x38]         ;1613
00270e  980e              LDR      r0,[sp,#0x38]         ;1614
002710  b110              CBZ      r0,|L16.10008|
002712  980e              LDR      r0,[sp,#0x38]         ;1614
002714  1e40              SUBS     r0,r0,#1              ;1614
002716  e004              B        |L16.10018|
                  |L16.10008|
002718  9819              LDR      r0,[sp,#0x64]         ;1614
00271a  68c1              LDR      r1,[r0,#0xc]          ;1614
00271c  9810              LDR      r0,[sp,#0x40]         ;1614
00271e  1a08              SUBS     r0,r1,r0              ;1614
002720  1100              ASRS     r0,r0,#4              ;1614
                  |L16.10018|
002722  900d              STR      r0,[sp,#0x34]         ;1614
002724  9811              LDR      r0,[sp,#0x44]         ;1615
002726  f4004000          AND      r0,r0,#0x8000         ;1615
00272a  b190              CBZ      r0,|L16.10066|
00272c  9811              LDR      r0,[sp,#0x44]         ;1616
00272e  0e00              LSRS     r0,r0,#24             ;1616
002730  900c              STR      r0,[sp,#0x30]         ;1616
002732  980c              LDR      r0,[sp,#0x30]         ;1617
002734  b140              CBZ      r0,|L16.10056|
002736  981a              LDR      r0,[sp,#0x68]         ;1618
002738  6982              LDR      r2,[r0,#0x18]         ;1618
00273a  6801              LDR      r1,[r0,#0]            ;1618
00273c  980c              LDR      r0,[sp,#0x30]         ;1618
00273e  4410              ADD      r0,r0,r2              ;1618
002740  eba11100          SUB      r1,r1,r0,LSL #4       ;1618
002744  981a              LDR      r0,[sp,#0x68]         ;1618
002746  6001              STR      r1,[r0,#0]            ;1618
                  |L16.10056|
002748  9915              LDR      r1,[sp,#0x54]         ;1619
00274a  9819              LDR      r0,[sp,#0x64]         ;1619
00274c  f7fffffe          BL       luaF_close
002750  bf00              NOP                            ;1620
                  |L16.10066|
002752  9914              LDR      r1,[sp,#0x50]         ;1621
002754  981a              LDR      r0,[sp,#0x68]         ;1621
002756  6101              STR      r1,[r0,#0x10]         ;1621
002758  9b0d              LDR      r3,[sp,#0x34]         ;1621
00275a  9a10              LDR      r2,[sp,#0x40]         ;1621
00275c  e9dd0119          LDRD     r0,r1,[sp,#0x64]      ;1621
002760  f7fffffe          BL       luaD_poscall
002764  e7be              B        |L16.9956|
002766  9819              LDR      r0,[sp,#0x64]         ;1625
002768  6f00              LDR      r0,[r0,#0x70]         ;1625
00276a  b148              CBZ      r0,|L16.10112|
00276c  9914              LDR      r1,[sp,#0x50]         ;1626
00276e  981a              LDR      r0,[sp,#0x68]         ;1626
002770  6101              STR      r1,[r0,#0x10]         ;1626
002772  2300              MOVS     r3,#0                 ;1626
002774  9a10              LDR      r2,[sp,#0x40]         ;1626
002776  e9dd0119          LDRD     r0,r1,[sp,#0x64]      ;1626
00277a  f7fffffe          BL       luaD_poscall
00277e  e01a              B        |L16.10166|
                  |L16.10112|
002780  981a              LDR      r0,[sp,#0x68]         ;1628
002782  f9b01020          LDRSH    r1,[r0,#0x20]         ;1628
002786  910e              STR      r1,[sp,#0x38]         ;1628
002788  981a              LDR      r0,[sp,#0x68]         ;1629
00278a  6881              LDR      r1,[r0,#8]            ;1629
00278c  9819              LDR      r0,[sp,#0x64]         ;1629
00278e  6141              STR      r1,[r0,#0x14]         ;1629
002790  9815              LDR      r0,[sp,#0x54]         ;1630
002792  3810              SUBS     r0,r0,#0x10           ;1630
002794  9919              LDR      r1,[sp,#0x64]         ;1630
002796  60c8              STR      r0,[r1,#0xc]          ;1630
002798  e007              B        |L16.10154|
                  |L16.10138|
00279a  2200              MOVS     r2,#0                 ;1632
00279c  9819              LDR      r0,[sp,#0x64]         ;1632
00279e  68c3              LDR      r3,[r0,#0xc]          ;1632
0027a0  f1030010          ADD      r0,r3,#0x10           ;1632
0027a4  9919              LDR      r1,[sp,#0x64]         ;1632
0027a6  60c8              STR      r0,[r1,#0xc]          ;1632
0027a8  721a              STRB     r2,[r3,#8]            ;1632
                  |L16.10154|
0027aa  990e              LDR      r1,[sp,#0x38]         ;1631
0027ac  1e48              SUBS     r0,r1,#1              ;1631
0027ae  900e              STR      r0,[sp,#0x38]         ;1631
0027b0  2900              CMP      r1,#0                 ;1631
0027b2  dcf2              BGT      |L16.10138|
0027b4  bf00              NOP                            ;1633
                  |L16.10166|
0027b6  e795              B        |L16.9956|
0027b8  9819              LDR      r0,[sp,#0x64]         ;1637
0027ba  6f00              LDR      r0,[r0,#0x70]         ;1637
0027bc  b148              CBZ      r0,|L16.10194|
0027be  9914              LDR      r1,[sp,#0x50]         ;1638
0027c0  981a              LDR      r0,[sp,#0x68]         ;1638
0027c2  6101              STR      r1,[r0,#0x10]         ;1638
0027c4  2301              MOVS     r3,#1                 ;1638
0027c6  9a10              LDR      r2,[sp,#0x40]         ;1638
0027c8  e9dd0119          LDRD     r0,r1,[sp,#0x64]      ;1638
0027cc  f7fffffe          BL       luaD_poscall
0027d0  e02c              B        |L16.10284|
                  |L16.10194|
0027d2  981a              LDR      r0,[sp,#0x68]         ;1640
0027d4  f9b01020          LDRSH    r1,[r0,#0x20]         ;1640
0027d8  910e              STR      r1,[sp,#0x38]         ;1640
0027da  981a              LDR      r0,[sp,#0x68]         ;1641
0027dc  6881              LDR      r1,[r0,#8]            ;1641
0027de  9819              LDR      r0,[sp,#0x64]         ;1641
0027e0  6141              STR      r1,[r0,#0x14]         ;1641
0027e2  980e              LDR      r0,[sp,#0x38]         ;1642
0027e4  b920              CBNZ     r0,|L16.10224|
0027e6  9815              LDR      r0,[sp,#0x54]         ;1643
0027e8  3810              SUBS     r0,r0,#0x10           ;1643
0027ea  9919              LDR      r1,[sp,#0x64]         ;1643
0027ec  60c8              STR      r0,[r1,#0xc]          ;1643
0027ee  e01c              B        |L16.10282|
                  |L16.10224|
0027f0  9815              LDR      r0,[sp,#0x54]         ;1645
0027f2  3810              SUBS     r0,r0,#0x10           ;1645
0027f4  900d              STR      r0,[sp,#0x34]         ;1645
0027f6  9810              LDR      r0,[sp,#0x40]         ;1645
0027f8  900c              STR      r0,[sp,#0x30]         ;1645
0027fa  e9dd010c          LDRD     r0,r1,[sp,#0x30]      ;1645
0027fe  c805              LDM      r0,{r0,r2}            ;1645
002800  c105              STM      r1!,{r0,r2}           ;1645
002802  980c              LDR      r0,[sp,#0x30]         ;1645
002804  7a01              LDRB     r1,[r0,#8]            ;1645
002806  980d              LDR      r0,[sp,#0x34]         ;1645
002808  7201              STRB     r1,[r0,#8]            ;1645
00280a  9919              LDR      r1,[sp,#0x64]         ;1646
00280c  9815              LDR      r0,[sp,#0x54]         ;1646
00280e  60c8              STR      r0,[r1,#0xc]          ;1646
002810  e006              B        |L16.10272|
                  |L16.10258|
002812  2200              MOVS     r2,#0                 ;1648
002814  9819              LDR      r0,[sp,#0x64]         ;1648
002816  68c3              LDR      r3,[r0,#0xc]          ;1648
002818  f1030110          ADD      r1,r3,#0x10           ;1648
00281c  60c1              STR      r1,[r0,#0xc]          ;1648
00281e  721a              STRB     r2,[r3,#8]            ;1648
                  |L16.10272|
002820  980e              LDR      r0,[sp,#0x38]         ;1647
002822  1e40              SUBS     r0,r0,#1              ;1647
002824  900e              STR      r0,[sp,#0x38]         ;1647
002826  2800              CMP      r0,#0                 ;1647
002828  dcf3              BGT      |L16.10258|
                  |L16.10282|
00282a  bf00              NOP                            ;1650
                  |L16.10284|
00282c  e75a              B        |L16.9956|
00282e  980f              LDR      r0,[sp,#0x3c]         ;1654
002830  e9d01000          LDRD     r1,r0,[r0,#0]         ;1654
002834  1c49              ADDS     r1,r1,#1              ;1654
002836  f1400000          ADC      r0,r0,#0              ;1654
00283a  e9cd100c          STRD     r1,r0,[sp,#0x30]      ;1654
00283e  9810              LDR      r0,[sp,#0x40]         ;1655
002840  e9d00104          LDRD     r0,r1,[r0,#0x10]      ;1655
002844  e9cd010a          STRD     r0,r1,[sp,#0x28]      ;1655
002848  e9dd310c          LDRD     r3,r1,[sp,#0x30]      ;1656
00284c  e9dd200a          LDRD     r2,r0,[sp,#0x28]      ;1656
002850  1ad2              SUBS     r2,r2,r3              ;1656
002852  4188              SBCS     r0,r0,r1              ;1656
002854  db18              BLT      |L16.10376|
002856  49fc              LDR      r1,|L16.11336|
002858  9811              LDR      r0,[sp,#0x44]         ;1657
00285a  ea0131d0          AND      r1,r1,r0,LSR #15      ;1657
00285e  9814              LDR      r0,[sp,#0x50]         ;1657
002860  eba00181          SUB      r1,r0,r1,LSL #2       ;1657
002864  9114              STR      r1,[sp,#0x50]         ;1657
002866  980f              LDR      r0,[sp,#0x3c]         ;1658
002868  9009              STR      r0,[sp,#0x24]         ;1658
00286a  e9dd120c          LDRD     r1,r2,[sp,#0x30]      ;1658
00286e  9809              LDR      r0,[sp,#0x24]         ;1658
002870  c006              STM      r0!,{r1,r2}           ;1658
002872  9810              LDR      r0,[sp,#0x40]         ;1659
002874  3030              ADDS     r0,r0,#0x30           ;1659
002876  9009              STR      r0,[sp,#0x24]         ;1659
002878  9a09              LDR      r2,[sp,#0x24]         ;1659
00287a  e9dd010c          LDRD     r0,r1,[sp,#0x30]      ;1659
00287e  c203              STM      r2!,{r0,r1}           ;1659
002880  2123              MOVS     r1,#0x23              ;1659
002882  9809              LDR      r0,[sp,#0x24]         ;1659
002884  7201              STRB     r1,[r0,#8]            ;1659
002886  bf00              NOP                            ;1659
                  |L16.10376|
002888  981a              LDR      r0,[sp,#0x68]         ;1661
00288a  6941              LDR      r1,[r0,#0x14]         ;1661
00288c  9113              STR      r1,[sp,#0x4c]         ;1661
00288e  e308              B        |L16.11938|
002890  980f              LDR      r0,[sp,#0x3c]         ;1665
002892  900e              STR      r0,[sp,#0x38]         ;1665
002894  9810              LDR      r0,[sp,#0x40]         ;1666
002896  3010              ADDS     r0,r0,#0x10           ;1666
002898  900d              STR      r0,[sp,#0x34]         ;1666
00289a  a807              ADD      r0,sp,#0x1c           ;1669
00289c  2201              MOVS     r2,#1                 ;1669
00289e  2300              MOVS     r3,#0                 ;1669
0028a0  a90a              ADD      r1,sp,#0x28           ;1669
0028a2  9000              STR      r0,[sp,#0]            ;1669
0028a4  980d              LDR      r0,[sp,#0x34]         ;1669
0028a6  f7fffffe          BL       forlimit
0028aa  b950              CBNZ     r0,|L16.10434|
0028ac  9914              LDR      r1,[sp,#0x50]         ;1670
0028ae  981a              LDR      r0,[sp,#0x68]         ;1670
0028b0  6101              STR      r1,[r0,#0x10]         ;1670
0028b2  981a              LDR      r0,[sp,#0x68]         ;1670
0028b4  6841              LDR      r1,[r0,#4]            ;1670
0028b6  9819              LDR      r0,[sp,#0x64]         ;1670
0028b8  60c1              STR      r1,[r0,#0xc]          ;1670
0028ba  a1e4              ADR      r1,|L16.11340|
0028bc  9819              LDR      r0,[sp,#0x64]         ;1671
0028be  f7fffffe          BL       luaG_runerror
                  |L16.10434|
0028c2  9807              LDR      r0,[sp,#0x1c]         ;1673
0028c4  b110              CBZ      r0,|L16.10444|
0028c6  2000              MOVS     r0,#0                 ;1673
0028c8  4601              MOV      r1,r0                 ;1673
0028ca  e001              B        |L16.10448|
                  |L16.10444|
0028cc  990e              LDR      r1,[sp,#0x38]         ;1673
0028ce  c903              LDM      r1,{r0,r1}            ;1673
                  |L16.10448|
0028d0  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;1673
0028d4  980d              LDR      r0,[sp,#0x34]         ;1674
0028d6  9006              STR      r0,[sp,#0x18]         ;1674
0028d8  e9dd120a          LDRD     r1,r2,[sp,#0x28]      ;1674
0028dc  9806              LDR      r0,[sp,#0x18]         ;1674
0028de  c006              STM      r0!,{r1,r2}           ;1674
0028e0  2123              MOVS     r1,#0x23              ;1674
0028e2  9806              LDR      r0,[sp,#0x18]         ;1674
0028e4  7201              STRB     r1,[r0,#8]            ;1674
0028e6  980e              LDR      r0,[sp,#0x38]         ;1675
0028e8  9006              STR      r0,[sp,#0x18]         ;1675
0028ea  e9dd0108          LDRD     r0,r1,[sp,#0x20]      ;1675
0028ee  1e42              SUBS     r2,r0,#1              ;1675
0028f0  f1610100          SBC      r1,r1,#0              ;1675
0028f4  9806              LDR      r0,[sp,#0x18]         ;1675
0028f6  e9c02100          STRD     r2,r1,[r0,#0]         ;1675
0028fa  2123              MOVS     r1,#0x23              ;1675
0028fc  9806              LDR      r0,[sp,#0x18]         ;1675
0028fe  7201              STRB     r1,[r0,#8]            ;1675
002900  49d1              LDR      r1,|L16.11336|
002902  9811              LDR      r0,[sp,#0x44]         ;1676
002904  ea0131d0          AND      r1,r1,r0,LSR #15      ;1676
002908  9814              LDR      r0,[sp,#0x50]         ;1676
00290a  eb000181          ADD      r1,r0,r1,LSL #2       ;1676
00290e  9114              STR      r1,[sp,#0x50]         ;1676
002910  e2c7              B        |L16.11938|
002912  980f              LDR      r0,[sp,#0x3c]         ;1680
002914  7a00              LDRB     r0,[r0,#8]            ;1680
002916  2823              CMP      r0,#0x23              ;1680
002918  d14a              BNE      |L16.10672|
00291a  9810              LDR      r0,[sp,#0x40]         ;1681
00291c  e9d00108          LDRD     r0,r1,[r0,#0x20]      ;1681
002920  e9cd010c          STRD     r0,r1,[sp,#0x30]      ;1681
002924  980f              LDR      r0,[sp,#0x3c]         ;1682
002926  e9d03000          LDRD     r3,r0,[r0,#0]         ;1682
00292a  e9dd120c          LDRD     r1,r2,[sp,#0x30]      ;1682
00292e  185b              ADDS     r3,r3,r1              ;1682
002930  eb400102          ADC      r1,r0,r2              ;1682
002934  e9cd310a          STRD     r3,r1,[sp,#0x28]      ;1682
002938  9810              LDR      r0,[sp,#0x40]         ;1683
00293a  e9d00104          LDRD     r0,r1,[r0,#0x10]      ;1683
00293e  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;1683
002942  2300              MOVS     r3,#0                 ;1684
002944  e9dd210c          LDRD     r2,r1,[sp,#0x30]      ;1684
002948  1a9a              SUBS     r2,r3,r2              ;1684
00294a  eb730001          SBCS     r0,r3,r1              ;1684
00294e  da09              BGE      |L16.10596|
002950  a809              ADD      r0,sp,#0x24           ;1684
002952  c80b              LDM      r0,{r0,r1,r3}         ;1684
002954  9a08              LDR      r2,[sp,#0x20]         ;1684
002956  1a51              SUBS     r1,r2,r1              ;1684
002958  4198              SBCS     r0,r0,r3              ;1684
00295a  db01              BLT      |L16.10592|
00295c  2001              MOVS     r0,#1                 ;1684
00295e  e00b              B        |L16.10616|
                  |L16.10592|
002960  2000              MOVS     r0,#0                 ;1684
002962  e009              B        |L16.10616|
                  |L16.10596|
002964  e9dd3208          LDRD     r3,r2,[sp,#0x20]      ;1684
002968  e9dd100a          LDRD     r1,r0,[sp,#0x28]      ;1684
00296c  1ac9              SUBS     r1,r1,r3              ;1684
00296e  4190              SBCS     r0,r0,r2              ;1684
002970  db01              BLT      |L16.10614|
002972  2001              MOVS     r0,#1                 ;1684
002974  e000              B        |L16.10616|
                  |L16.10614|
002976  2000              MOVS     r0,#0                 ;1684
                  |L16.10616|
002978  b1c8              CBZ      r0,|L16.10670|
00297a  49b3              LDR      r1,|L16.11336|
00297c  9811              LDR      r0,[sp,#0x44]         ;1685
00297e  ea0131d0          AND      r1,r1,r0,LSR #15      ;1685
002982  9814              LDR      r0,[sp,#0x50]         ;1685
002984  eba00181          SUB      r1,r0,r1,LSL #2       ;1685
002988  9114              STR      r1,[sp,#0x50]         ;1685
00298a  980f              LDR      r0,[sp,#0x3c]         ;1686
00298c  9007              STR      r0,[sp,#0x1c]         ;1686
00298e  9a07              LDR      r2,[sp,#0x1c]         ;1686
002990  e9dd010a          LDRD     r0,r1,[sp,#0x28]      ;1686
002994  c203              STM      r2!,{r0,r1}           ;1686
002996  9810              LDR      r0,[sp,#0x40]         ;1687
002998  3030              ADDS     r0,r0,#0x30           ;1687
00299a  9007              STR      r0,[sp,#0x1c]         ;1687
00299c  9a07              LDR      r2,[sp,#0x1c]         ;1687
00299e  e9dd100a          LDRD     r1,r0,[sp,#0x28]      ;1687
0029a2  e9c21000          STRD     r1,r0,[r2,#0]         ;1687
0029a6  2123              MOVS     r1,#0x23              ;1687
0029a8  9807              LDR      r0,[sp,#0x1c]         ;1687
0029aa  7201              STRB     r1,[r0,#8]            ;1687
0029ac  bf00              NOP                            ;1687
                  |L16.10670|
0029ae  e04b              B        |L16.10824|
                  |L16.10672|
0029b0  9910              LDR      r1,[sp,#0x40]         ;1691
0029b2  e9d10108          LDRD     r0,r1,[r1,#0x20]      ;1691
0029b6  e9cd010c          STRD     r0,r1,[sp,#0x30]      ;1691
0029ba  9910              LDR      r1,[sp,#0x40]         ;1692
0029bc  e9d10104          LDRD     r0,r1,[r1,#0x10]      ;1692
0029c0  e9cd010a          STRD     r0,r1,[sp,#0x28]      ;1692
0029c4  990f              LDR      r1,[sp,#0x3c]         ;1693
0029c6  c903              LDM      r1,{r0,r1}            ;1693
0029c8  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;1693
0029cc  e9dd230c          LDRD     r2,r3,[sp,#0x30]      ;1694
0029d0  e9dd0108          LDRD     r0,r1,[sp,#0x20]      ;1694
0029d4  f7fffffe          BL       __aeabi_dadd
0029d8  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;1694
0029dc  2000              MOVS     r0,#0                 ;1695
0029de  4601              MOV      r1,r0                 ;1695
0029e0  e9dd230c          LDRD     r2,r3,[sp,#0x30]      ;1695
0029e4  f7fffffe          BL       __aeabi_cdcmple
0029e8  d208              BCS      |L16.10748|
0029ea  a808              ADD      r0,sp,#0x20           ;1695
0029ec  c80f              LDM      r0,{r0-r3}            ;1695
0029ee  f7fffffe          BL       __aeabi_cdcmple
0029f2  d801              BHI      |L16.10744|
0029f4  2001              MOVS     r0,#1                 ;1695
0029f6  e00b              B        |L16.10768|
                  |L16.10744|
0029f8  2000              MOVS     r0,#0                 ;1695
0029fa  e009              B        |L16.10768|
                  |L16.10748|
0029fc  e9dd2308          LDRD     r2,r3,[sp,#0x20]      ;1696
002a00  e9dd010a          LDRD     r0,r1,[sp,#0x28]      ;1696
002a04  f7fffffe          BL       __aeabi_cdcmple
002a08  d801              BHI      |L16.10766|
002a0a  2001              MOVS     r0,#1                 ;1696
002a0c  e000              B        |L16.10768|
                  |L16.10766|
002a0e  2000              MOVS     r0,#0                 ;1696
                  |L16.10768|
002a10  b1c8              CBZ      r0,|L16.10822|
002a12  498d              LDR      r1,|L16.11336|
002a14  9811              LDR      r0,[sp,#0x44]         ;1697
002a16  ea0131d0          AND      r1,r1,r0,LSR #15      ;1697
002a1a  9814              LDR      r0,[sp,#0x50]         ;1697
002a1c  eba00181          SUB      r1,r0,r1,LSL #2       ;1697
002a20  9114              STR      r1,[sp,#0x50]         ;1697
002a22  980f              LDR      r0,[sp,#0x3c]         ;1698
002a24  9007              STR      r0,[sp,#0x1c]         ;1698
002a26  e9dd2107          LDRD     r2,r1,[sp,#0x1c]      ;1698
002a2a  9809              LDR      r0,[sp,#0x24]         ;1698
002a2c  e9c21000          STRD     r1,r0,[r2,#0]         ;1698
002a30  9810              LDR      r0,[sp,#0x40]         ;1699
002a32  3030              ADDS     r0,r0,#0x30           ;1699
002a34  9007              STR      r0,[sp,#0x1c]         ;1699
002a36  e9dd2007          LDRD     r2,r0,[sp,#0x1c]      ;1699
002a3a  9909              LDR      r1,[sp,#0x24]         ;1699
002a3c  c203              STM      r2!,{r0,r1}           ;1699
002a3e  2113              MOVS     r1,#0x13              ;1699
002a40  9807              LDR      r0,[sp,#0x1c]         ;1699
002a42  7201              STRB     r1,[r0,#8]            ;1699
002a44  bf00              NOP                            ;1699
                  |L16.10822|
002a46  bf00              NOP                            ;1701
                  |L16.10824|
002a48  981a              LDR      r0,[sp,#0x68]         ;1702
002a4a  6941              LDR      r1,[r0,#0x14]         ;1702
002a4c  9113              STR      r1,[sp,#0x4c]         ;1702
                  |L16.10830|
002a4e  e228              B        |L16.11938|
002a50  980f              LDR      r0,[sp,#0x3c]         ;1706
002a52  900e              STR      r0,[sp,#0x38]         ;1706
002a54  9810              LDR      r0,[sp,#0x40]         ;1707
002a56  3010              ADDS     r0,r0,#0x10           ;1707
002a58  900d              STR      r0,[sp,#0x34]         ;1707
002a5a  9810              LDR      r0,[sp,#0x40]         ;1708
002a5c  3020              ADDS     r0,r0,#0x20           ;1708
002a5e  900c              STR      r0,[sp,#0x30]         ;1708
002a60  980e              LDR      r0,[sp,#0x38]         ;1711
002a62  7a00              LDRB     r0,[r0,#8]            ;1711
002a64  2823              CMP      r0,#0x23              ;1711
002a66  d132              BNE      |L16.10958|
002a68  980c              LDR      r0,[sp,#0x30]         ;1711
002a6a  7a00              LDRB     r0,[r0,#8]            ;1711
002a6c  2823              CMP      r0,#0x23              ;1711
002a6e  d12e              BNE      |L16.10958|
002a70  a809              ADD      r0,sp,#0x24           ;1712
002a72  9000              STR      r0,[sp,#0]            ;1712
002a74  980c              LDR      r0,[sp,#0x30]         ;1712
002a76  c803              LDM      r0,{r0,r1}            ;1712
002a78  4602              MOV      r2,r0                 ;1712
002a7a  460b              MOV      r3,r1                 ;1712
002a7c  e9cd0106          STRD     r0,r1,[sp,#0x18]      ;1712
002a80  a90a              ADD      r1,sp,#0x28           ;1712
002a82  980d              LDR      r0,[sp,#0x34]         ;1712
002a84  f7fffffe          BL       forlimit
002a88  b308              CBZ      r0,|L16.10958|
002a8a  9809              LDR      r0,[sp,#0x24]         ;1714
002a8c  b110              CBZ      r0,|L16.10900|
002a8e  2000              MOVS     r0,#0                 ;1714
002a90  4601              MOV      r1,r0                 ;1714
002a92  e001              B        |L16.10904|
                  |L16.10900|
002a94  990e              LDR      r1,[sp,#0x38]         ;1714
002a96  c903              LDM      r1,{r0,r1}            ;1714
                  |L16.10904|
002a98  e9cd0106          STRD     r0,r1,[sp,#0x18]      ;1714
002a9c  980d              LDR      r0,[sp,#0x34]         ;1715
002a9e  9005              STR      r0,[sp,#0x14]         ;1715
002aa0  e9dd120a          LDRD     r1,r2,[sp,#0x28]      ;1715
002aa4  9805              LDR      r0,[sp,#0x14]         ;1715
002aa6  c006              STM      r0!,{r1,r2}           ;1715
002aa8  2123              MOVS     r1,#0x23              ;1715
002aaa  9805              LDR      r0,[sp,#0x14]         ;1715
002aac  7201              STRB     r1,[r0,#8]            ;1715
002aae  980e              LDR      r0,[sp,#0x38]         ;1716
002ab0  9005              STR      r0,[sp,#0x14]         ;1716
002ab2  980c              LDR      r0,[sp,#0x30]         ;1716
002ab4  c80c              LDM      r0!,{r2,r3}           ;1716
002ab6  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;1716
002aba  1a82              SUBS     r2,r0,r2              ;1716
002abc  eb610103          SBC      r1,r1,r3              ;1716
002ac0  9805              LDR      r0,[sp,#0x14]         ;1716
002ac2  e9c02100          STRD     r2,r1,[r0,#0]         ;1716
002ac6  2123              MOVS     r1,#0x23              ;1716
002ac8  9805              LDR      r0,[sp,#0x14]         ;1716
002aca  7201              STRB     r1,[r0,#8]            ;1716
002acc  e05e              B        |L16.11148|
                  |L16.10958|
002ace  9914              LDR      r1,[sp,#0x50]         ;1720
002ad0  981a              LDR      r0,[sp,#0x68]         ;1720
002ad2  6101              STR      r1,[r0,#0x10]         ;1720
002ad4  981a              LDR      r0,[sp,#0x68]         ;1720
002ad6  6841              LDR      r1,[r0,#4]            ;1720
002ad8  9819              LDR      r0,[sp,#0x64]         ;1720
002ada  60c1              STR      r1,[r0,#0xc]          ;1720
002adc  980d              LDR      r0,[sp,#0x34]         ;1721
002ade  7a00              LDRB     r0,[r0,#8]            ;1721
002ae0  2813              CMP      r0,#0x13              ;1721
002ae2  d105              BNE      |L16.10992|
002ae4  980d              LDR      r0,[sp,#0x34]         ;1721
002ae6  c806              LDM      r0!,{r1,r2}           ;1721
002ae8  e9cd1204          STRD     r1,r2,[sp,#0x10]      ;1721
002aec  2001              MOVS     r0,#1                 ;1721
002aee  e003              B        |L16.11000|
                  |L16.10992|
002af0  a904              ADD      r1,sp,#0x10           ;1721
002af2  980d              LDR      r0,[sp,#0x34]         ;1721
002af4  f7fffffe          BL       luaV_tonumber_
                  |L16.11000|
002af8  b918              CBNZ     r0,|L16.11010|
002afa  a154              ADR      r1,|L16.11340|
002afc  9819              LDR      r0,[sp,#0x64]         ;1722
002afe  f7fffffe          BL       luaG_runerror
                  |L16.11010|
002b02  980d              LDR      r0,[sp,#0x34]         ;1723
002b04  9001              STR      r0,[sp,#4]            ;1723
002b06  e9dd1204          LDRD     r1,r2,[sp,#0x10]      ;1723
002b0a  9801              LDR      r0,[sp,#4]            ;1723
002b0c  c006              STM      r0!,{r1,r2}           ;1723
002b0e  2113              MOVS     r1,#0x13              ;1723
002b10  9801              LDR      r0,[sp,#4]            ;1723
002b12  7201              STRB     r1,[r0,#8]            ;1723
002b14  980c              LDR      r0,[sp,#0x30]         ;1724
002b16  7a00              LDRB     r0,[r0,#8]            ;1724
002b18  2813              CMP      r0,#0x13              ;1724
002b1a  d105              BNE      |L16.11048|
002b1c  980c              LDR      r0,[sp,#0x30]         ;1724
002b1e  c806              LDM      r0!,{r1,r2}           ;1724
002b20  e9cd1202          STRD     r1,r2,[sp,#8]         ;1724
002b24  2001              MOVS     r0,#1                 ;1724
002b26  e003              B        |L16.11056|
                  |L16.11048|
002b28  a902              ADD      r1,sp,#8              ;1724
002b2a  980c              LDR      r0,[sp,#0x30]         ;1724
002b2c  f7fffffe          BL       luaV_tonumber_
                  |L16.11056|
002b30  b918              CBNZ     r0,|L16.11066|
002b32  a14e              ADR      r1,|L16.11372|
002b34  9819              LDR      r0,[sp,#0x64]         ;1725
002b36  f7fffffe          BL       luaG_runerror
                  |L16.11066|
002b3a  980c              LDR      r0,[sp,#0x30]         ;1726
002b3c  9001              STR      r0,[sp,#4]            ;1726
002b3e  a801              ADD      r0,sp,#4              ;1726
002b40  c807              LDM      r0,{r0-r2}            ;1726
002b42  c006              STM      r0!,{r1,r2}           ;1726
002b44  2113              MOVS     r1,#0x13              ;1726
002b46  9801              LDR      r0,[sp,#4]            ;1726
002b48  7201              STRB     r1,[r0,#8]            ;1726
002b4a  980e              LDR      r0,[sp,#0x38]         ;1727
002b4c  7a00              LDRB     r0,[r0,#8]            ;1727
002b4e  2813              CMP      r0,#0x13              ;1727
002b50  d105              BNE      |L16.11102|
002b52  980e              LDR      r0,[sp,#0x38]         ;1727
002b54  c806              LDM      r0!,{r1,r2}           ;1727
002b56  e9cd1206          STRD     r1,r2,[sp,#0x18]      ;1727
002b5a  2001              MOVS     r0,#1                 ;1727
002b5c  e003              B        |L16.11110|
                  |L16.11102|
002b5e  a906              ADD      r1,sp,#0x18           ;1727
002b60  980e              LDR      r0,[sp,#0x38]         ;1727
002b62  f7fffffe          BL       luaV_tonumber_
                  |L16.11110|
002b66  b918              CBNZ     r0,|L16.11120|
002b68  a147              ADR      r1,|L16.11400|
002b6a  9819              LDR      r0,[sp,#0x64]         ;1728
002b6c  f7fffffe          BL       luaG_runerror
                  |L16.11120|
002b70  980e              LDR      r0,[sp,#0x38]         ;1729
002b72  9001              STR      r0,[sp,#4]            ;1729
002b74  e9dd2302          LDRD     r2,r3,[sp,#8]         ;1729
002b78  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;1729
002b7c  f7fffffe          BL       __aeabi_dsub
002b80  9a01              LDR      r2,[sp,#4]            ;1729
002b82  c203              STM      r2!,{r0,r1}           ;1729
002b84  2113              MOVS     r1,#0x13              ;1729
002b86  9801              LDR      r0,[sp,#4]            ;1729
002b88  7201              STRB     r1,[r0,#8]            ;1729
002b8a  bf00              NOP                            ;1730
                  |L16.11148|
002b8c  492e              LDR      r1,|L16.11336|
002b8e  9811              LDR      r0,[sp,#0x44]         ;1731
002b90  ea0131d0          AND      r1,r1,r0,LSR #15      ;1731
002b94  9814              LDR      r0,[sp,#0x50]         ;1731
002b96  eb000181          ADD      r1,r0,r1,LSL #2       ;1731
002b9a  9114              STR      r1,[sp,#0x50]         ;1731
002b9c  e181              B        |L16.11938|
002b9e  9810              LDR      r0,[sp,#0x40]         ;1735
002ba0  3030              ADDS     r0,r0,#0x30           ;1735
002ba2  900e              STR      r0,[sp,#0x38]         ;1735
002ba4  980e              LDR      r0,[sp,#0x38]         ;1736
002ba6  3020              ADDS     r0,r0,#0x20           ;1736
002ba8  900d              STR      r0,[sp,#0x34]         ;1736
002baa  9810              LDR      r0,[sp,#0x40]         ;1736
002bac  3020              ADDS     r0,r0,#0x20           ;1736
002bae  900c              STR      r0,[sp,#0x30]         ;1736
002bb0  e9dd010c          LDRD     r0,r1,[sp,#0x30]      ;1736
002bb4  c805              LDM      r0,{r0,r2}            ;1736
002bb6  c105              STM      r1!,{r0,r2}           ;1736
002bb8  980c              LDR      r0,[sp,#0x30]         ;1736
002bba  7a01              LDRB     r1,[r0,#8]            ;1736
002bbc  980d              LDR      r0,[sp,#0x34]         ;1736
002bbe  7201              STRB     r1,[r0,#8]            ;1736
002bc0  980e              LDR      r0,[sp,#0x38]         ;1737
002bc2  3010              ADDS     r0,r0,#0x10           ;1737
002bc4  900d              STR      r0,[sp,#0x34]         ;1737
002bc6  9810              LDR      r0,[sp,#0x40]         ;1737
002bc8  3010              ADDS     r0,r0,#0x10           ;1737
002bca  900c              STR      r0,[sp,#0x30]         ;1737
002bcc  e9dd010c          LDRD     r0,r1,[sp,#0x30]      ;1737
002bd0  c805              LDM      r0,{r0,r2}            ;1737
002bd2  c105              STM      r1!,{r0,r2}           ;1737
002bd4  980c              LDR      r0,[sp,#0x30]         ;1737
002bd6  7a01              LDRB     r1,[r0,#8]            ;1737
002bd8  980d              LDR      r0,[sp,#0x34]         ;1737
002bda  7201              STRB     r1,[r0,#8]            ;1737
002bdc  980e              LDR      r0,[sp,#0x38]         ;1738
002bde  900d              STR      r0,[sp,#0x34]         ;1738
002be0  9810              LDR      r0,[sp,#0x40]         ;1738
002be2  900c              STR      r0,[sp,#0x30]         ;1738
002be4  e9dd100c          LDRD     r1,r0,[sp,#0x30]      ;1738
002be8  c906              LDM      r1,{r1,r2}            ;1738
002bea  c006              STM      r0!,{r1,r2}           ;1738
002bec  980c              LDR      r0,[sp,#0x30]         ;1738
002bee  7a02              LDRB     r2,[r0,#8]            ;1738
002bf0  980d              LDR      r0,[sp,#0x34]         ;1738
002bf2  7202              STRB     r2,[r0,#8]            ;1738
002bf4  980e              LDR      r0,[sp,#0x38]         ;1739
002bf6  f1000130          ADD      r1,r0,#0x30           ;1739
002bfa  9819              LDR      r0,[sp,#0x64]         ;1739
002bfc  60c1              STR      r1,[r0,#0xc]          ;1739
002bfe  9914              LDR      r1,[sp,#0x50]         ;1740
002c00  981a              LDR      r0,[sp,#0x68]         ;1740
002c02  6101              STR      r1,[r0,#0x10]         ;1740
002c04  981a              LDR      r0,[sp,#0x68]         ;1740
002c06  6841              LDR      r1,[r0,#4]            ;1740
002c08  9819              LDR      r0,[sp,#0x64]         ;1740
002c0a  60c1              STR      r1,[r0,#0xc]          ;1740
002c0c  9811              LDR      r0,[sp,#0x44]         ;1740
002c0e  0e00              LSRS     r0,r0,#24             ;1740
002c10  4602              MOV      r2,r0                 ;1740
002c12  900d              STR      r0,[sp,#0x34]         ;1740
002c14  990e              LDR      r1,[sp,#0x38]         ;1740
002c16  9819              LDR      r0,[sp,#0x64]         ;1740
002c18  f7fffffe          BL       luaD_call
002c1c  981a              LDR      r0,[sp,#0x68]         ;1740
002c1e  6941              LDR      r1,[r0,#0x14]         ;1740
002c20  9113              STR      r1,[sp,#0x4c]         ;1740
002c22  9813              LDR      r0,[sp,#0x4c]         ;1741
002c24  b118              CBZ      r0,|L16.11310|
002c26  981a              LDR      r0,[sp,#0x68]         ;1742
002c28  6800              LDR      r0,[r0,#0]            ;1742
002c2a  3010              ADDS     r0,r0,#0x10           ;1742
002c2c  9015              STR      r0,[sp,#0x54]         ;1742
                  |L16.11310|
002c2e  9814              LDR      r0,[sp,#0x50]         ;1743
002c30  6801              LDR      r1,[r0,#0]            ;1743
002c32  9111              STR      r1,[sp,#0x44]         ;1743
002c34  1d01              ADDS     r1,r0,#4              ;1743
002c36  9114              STR      r1,[sp,#0x50]         ;1743
002c38  9811              LDR      r0,[sp,#0x44]         ;1744
002c3a  f3c010c7          UBFX     r0,r0,#7,#8           ;1744
002c3e  9915              LDR      r1,[sp,#0x54]         ;1744
002c40  eb011100          ADD      r1,r1,r0,LSL #4       ;1744
002c44  9110              STR      r1,[sp,#0x40]         ;1744
002c46  e034              B        |L16.11442|
                  |L16.11336|
                          DCD      0x0001ffff
                  |L16.11340|
002c4c  27666f72          DCB      "'for' limit must be a number",0
002c50  27206c69
002c54  6d697420
002c58  6d757374
002c5c  20626520
002c60  61206e75
002c64  6d626572
002c68  00      
002c69  00                DCB      0
002c6a  00                DCB      0
002c6b  00                DCB      0
                  |L16.11372|
002c6c  27666f72          DCB      "'for' step must be a number",0
002c70  27207374
002c74  6570206d
002c78  75737420
002c7c  62652061
002c80  206e756d
002c84  62657200
                  |L16.11400|
002c88  27666f72          DCB      "'for' initial value must be a number",0
002c8c  2720696e
002c90  69746961
002c94  6c207661
002c98  6c756520
002c9c  6d757374
002ca0  20626520
002ca4  61206e75
002ca8  6d626572
002cac  00      
002cad  00                DCB      0
002cae  00                DCB      0
002caf  00                DCB      0
002cb0  bf00              NOP                            ;1749
                  |L16.11442|
002cb2  9810              LDR      r0,[sp,#0x40]         ;1750
002cb4  7e00              LDRB     r0,[r0,#0x18]         ;1750
002cb6  b1a0              CBZ      r0,|L16.11490|
002cb8  9810              LDR      r0,[sp,#0x40]         ;1751
002cba  900e              STR      r0,[sp,#0x38]         ;1751
002cbc  9810              LDR      r0,[sp,#0x40]         ;1751
002cbe  3010              ADDS     r0,r0,#0x10           ;1751
002cc0  900d              STR      r0,[sp,#0x34]         ;1751
002cc2  e9dd100d          LDRD     r1,r0,[sp,#0x34]      ;1751
002cc6  c906              LDM      r1,{r1,r2}            ;1751
002cc8  c006              STM      r0!,{r1,r2}           ;1751
002cca  980d              LDR      r0,[sp,#0x34]         ;1751
002ccc  7a02              LDRB     r2,[r0,#8]            ;1751
002cce  980e              LDR      r0,[sp,#0x38]         ;1751
002cd0  7202              STRB     r2,[r0,#8]            ;1751
002cd2  4975              LDR      r1,|L16.11944|
002cd4  9811              LDR      r0,[sp,#0x44]         ;1752
002cd6  ea0132d0          AND      r2,r1,r0,LSR #15      ;1752
002cda  9814              LDR      r0,[sp,#0x50]         ;1752
002cdc  eba00082          SUB      r0,r0,r2,LSL #2       ;1752
002ce0  9014              STR      r0,[sp,#0x50]         ;1752
                  |L16.11490|
002ce2  e0de              B        |L16.11938|
002ce4  9811              LDR      r0,[sp,#0x44]         ;1757
002ce6  f3c04107          UBFX     r1,r0,#16,#8          ;1757
002cea  910e              STR      r1,[sp,#0x38]         ;1757
002cec  9811              LDR      r0,[sp,#0x44]         ;1758
002cee  0e00              LSRS     r0,r0,#24             ;1758
002cf0  900d              STR      r0,[sp,#0x34]         ;1758
002cf2  980e              LDR      r0,[sp,#0x38]         ;1761
002cf4  b940              CBNZ     r0,|L16.11528|
002cf6  9819              LDR      r0,[sp,#0x64]         ;1762
002cf8  68c1              LDR      r1,[r0,#0xc]          ;1762
002cfa  9810              LDR      r0,[sp,#0x40]         ;1762
002cfc  1a08              SUBS     r0,r1,r0              ;1762
002cfe  2101              MOVS     r1,#1                 ;1762
002d00  ebc11120          RSB      r1,r1,r0,ASR #4       ;1762
002d04  910e              STR      r1,[sp,#0x38]         ;1762
002d06  e003              B        |L16.11536|
                  |L16.11528|
002d08  981a              LDR      r0,[sp,#0x68]         ;1764
002d0a  6841              LDR      r1,[r0,#4]            ;1764
002d0c  9819              LDR      r0,[sp,#0x64]         ;1764
002d0e  60c1              STR      r1,[r0,#0xc]          ;1764
                  |L16.11536|
002d10  980d              LDR      r0,[sp,#0x34]         ;1765
002d12  b948              CBNZ     r0,|L16.11560|
002d14  9814              LDR      r0,[sp,#0x50]         ;1766
002d16  6800              LDR      r0,[r0,#0]            ;1766
002d18  f06f417e          MVN      r1,#0xfe000000        ;1766
002d1c  ea0111d0          AND      r1,r1,r0,LSR #7       ;1766
002d20  910d              STR      r1,[sp,#0x34]         ;1766
002d22  9814              LDR      r0,[sp,#0x50]         ;1766
002d24  1d00              ADDS     r0,r0,#4              ;1766
002d26  9014              STR      r0,[sp,#0x50]         ;1766
                  |L16.11560|
002d28  980f              LDR      r0,[sp,#0x3c]         ;1768
002d2a  6800              LDR      r0,[r0,#0]            ;1768
002d2c  900b              STR      r0,[sp,#0x2c]         ;1768
002d2e  980d              LDR      r0,[sp,#0x34]         ;1769
002d30  1e40              SUBS     r0,r0,#1              ;1769
002d32  eb0001c0          ADD      r1,r0,r0,LSL #3       ;1769
002d36  eb011200          ADD      r2,r1,r0,LSL #4       ;1769
002d3a  980e              LDR      r0,[sp,#0x38]         ;1769
002d3c  eb000042          ADD      r0,r0,r2,LSL #1       ;1769
002d40  900c              STR      r0,[sp,#0x30]         ;1769
002d42  980b              LDR      r0,[sp,#0x2c]         ;1770
002d44  6882              LDR      r2,[r0,#8]            ;1770
002d46  980c              LDR      r0,[sp,#0x30]         ;1770
002d48  4282              CMP      r2,r0                 ;1770
002d4a  d204              BCS      |L16.11606|
002d4c  e9dd120b          LDRD     r1,r2,[sp,#0x2c]      ;1771
002d50  9819              LDR      r0,[sp,#0x64]         ;1771
002d52  f7fffffe          BL       luaH_resizearray
                  |L16.11606|
002d56  e031              B        |L16.11708|
                  |L16.11608|
002d58  9910              LDR      r1,[sp,#0x40]         ;1773
002d5a  980e              LDR      r0,[sp,#0x38]         ;1773
002d5c  eb011100          ADD      r1,r1,r0,LSL #4       ;1773
002d60  910a              STR      r1,[sp,#0x28]         ;1773
002d62  980b              LDR      r0,[sp,#0x2c]         ;1774
002d64  68c1              LDR      r1,[r0,#0xc]          ;1774
002d66  980c              LDR      r0,[sp,#0x30]         ;1774
002d68  1e40              SUBS     r0,r0,#1              ;1774
002d6a  eb011100          ADD      r1,r1,r0,LSL #4       ;1774
002d6e  9109              STR      r1,[sp,#0x24]         ;1774
002d70  980a              LDR      r0,[sp,#0x28]         ;1774
002d72  9008              STR      r0,[sp,#0x20]         ;1774
002d74  e9dd0108          LDRD     r0,r1,[sp,#0x20]      ;1774
002d78  c805              LDM      r0,{r0,r2}            ;1774
002d7a  c105              STM      r1!,{r0,r2}           ;1774
002d7c  9808              LDR      r0,[sp,#0x20]         ;1774
002d7e  7a01              LDRB     r1,[r0,#8]            ;1774
002d80  9809              LDR      r0,[sp,#0x24]         ;1774
002d82  7201              STRB     r1,[r0,#8]            ;1774
002d84  980c              LDR      r0,[sp,#0x30]         ;1775
002d86  1e41              SUBS     r1,r0,#1              ;1775
002d88  910c              STR      r1,[sp,#0x30]         ;1775
002d8a  980a              LDR      r0,[sp,#0x28]         ;1776
002d8c  7a00              LDRB     r0,[r0,#8]            ;1776
002d8e  f0000040          AND      r0,r0,#0x40           ;1776
002d92  b178              CBZ      r0,|L16.11700|
002d94  980b              LDR      r0,[sp,#0x2c]         ;1776
002d96  7940              LDRB     r0,[r0,#5]            ;1776
002d98  f0000020          AND      r0,r0,#0x20           ;1776
002d9c  b150              CBZ      r0,|L16.11700|
002d9e  980a              LDR      r0,[sp,#0x28]         ;1776
002da0  6800              LDR      r0,[r0,#0]            ;1776
002da2  7940              LDRB     r0,[r0,#5]            ;1776
002da4  f0000018          AND      r0,r0,#0x18           ;1776
002da8  b120              CBZ      r0,|L16.11700|
002daa  990b              LDR      r1,[sp,#0x2c]         ;1776
002dac  9819              LDR      r0,[sp,#0x64]         ;1776
002dae  f7fffffe          BL       luaC_barrierback_
002db2  e000              B        |L16.11702|
                  |L16.11700|
002db4  bf00              NOP                            ;1776
                  |L16.11702|
002db6  980e              LDR      r0,[sp,#0x38]         ;1772
002db8  1e40              SUBS     r0,r0,#1              ;1772
002dba  900e              STR      r0,[sp,#0x38]         ;1772
                  |L16.11708|
002dbc  980e              LDR      r0,[sp,#0x38]         ;1772
002dbe  2800              CMP      r0,#0                 ;1772
002dc0  dcca              BGT      |L16.11608|
002dc2  e06e              B        |L16.11938|
002dc4  9817              LDR      r0,[sp,#0x5c]         ;1781
002dc6  68c0              LDR      r0,[r0,#0xc]          ;1781
002dc8  6bc1              LDR      r1,[r0,#0x3c]         ;1781
002dca  4a37              LDR      r2,|L16.11944|
002dcc  9811              LDR      r0,[sp,#0x44]         ;1781
002dce  ea0230d0          AND      r0,r2,r0,LSR #15      ;1781
002dd2  f8511020          LDR      r1,[r1,r0,LSL #2]     ;1781
002dd6  910e              STR      r1,[sp,#0x38]         ;1781
002dd8  9917              LDR      r1,[sp,#0x5c]         ;1782
002dda  3110              ADDS     r1,r1,#0x10           ;1782
002ddc  9a15              LDR      r2,[sp,#0x54]         ;1782
002dde  980e              LDR      r0,[sp,#0x38]         ;1782
002de0  f7fffffe          BL       getcached
002de4  900d              STR      r0,[sp,#0x34]         ;1782
002de6  980d              LDR      r0,[sp,#0x34]         ;1783
002de8  b980              CBNZ     r0,|L16.11788|
002dea  9914              LDR      r1,[sp,#0x50]         ;1784
002dec  981a              LDR      r0,[sp,#0x68]         ;1784
002dee  6101              STR      r1,[r0,#0x10]         ;1784
002df0  981a              LDR      r0,[sp,#0x68]         ;1784
002df2  6841              LDR      r1,[r0,#4]            ;1784
002df4  9819              LDR      r0,[sp,#0x64]         ;1784
002df6  60c1              STR      r1,[r0,#0xc]          ;1784
002df8  9810              LDR      r0,[sp,#0x40]         ;1785
002dfa  9000              STR      r0,[sp,#0]            ;1785
002dfc  9a17              LDR      r2,[sp,#0x5c]         ;1785
002dfe  3210              ADDS     r2,r2,#0x10           ;1785
002e00  9b15              LDR      r3,[sp,#0x54]         ;1785
002e02  990e              LDR      r1,[sp,#0x38]         ;1785
002e04  9819              LDR      r0,[sp,#0x64]         ;1785
002e06  f7fffffe          BL       pushclosure
002e0a  e00a              B        |L16.11810|
                  |L16.11788|
002e0c  9810              LDR      r0,[sp,#0x40]         ;1788
002e0e  900c              STR      r0,[sp,#0x30]         ;1788
002e10  980d              LDR      r0,[sp,#0x34]         ;1788
002e12  900b              STR      r0,[sp,#0x2c]         ;1788
002e14  e9dd010b          LDRD     r0,r1,[sp,#0x2c]      ;1788
002e18  6008              STR      r0,[r1,#0]            ;1788
002e1a  2256              MOVS     r2,#0x56              ;1788
002e1c  980c              LDR      r0,[sp,#0x30]         ;1788
002e1e  7202              STRB     r2,[r0,#8]            ;1788
002e20  bf00              NOP                            ;1788
                  |L16.11810|
002e22  9819              LDR      r0,[sp,#0x64]         ;1789
002e24  6900              LDR      r0,[r0,#0x10]         ;1789
002e26  68c0              LDR      r0,[r0,#0xc]          ;1789
002e28  2800              CMP      r0,#0                 ;1789
002e2a  dd0a              BLE      |L16.11842|
002e2c  9810              LDR      r0,[sp,#0x40]         ;1789
002e2e  f1000110          ADD      r1,r0,#0x10           ;1789
002e32  9819              LDR      r0,[sp,#0x64]         ;1789
002e34  60c1              STR      r1,[r0,#0xc]          ;1789
002e36  9819              LDR      r0,[sp,#0x64]         ;1789
002e38  f7fffffe          BL       luaC_step
002e3c  981a              LDR      r0,[sp,#0x68]         ;1789
002e3e  6941              LDR      r1,[r0,#0x14]         ;1789
002e40  9113              STR      r1,[sp,#0x4c]         ;1789
                  |L16.11842|
002e42  e02e              B        |L16.11938|
002e44  9811              LDR      r0,[sp,#0x44]         ;1793
002e46  0e00              LSRS     r0,r0,#24             ;1793
002e48  1e40              SUBS     r0,r0,#1              ;1793
002e4a  900e              STR      r0,[sp,#0x38]         ;1793
002e4c  9914              LDR      r1,[sp,#0x50]         ;1794
002e4e  981a              LDR      r0,[sp,#0x68]         ;1794
002e50  6101              STR      r1,[r0,#0x10]         ;1794
002e52  9b0e              LDR      r3,[sp,#0x38]         ;1794
002e54  9a10              LDR      r2,[sp,#0x40]         ;1794
002e56  e9dd0119          LDRD     r0,r1,[sp,#0x64]      ;1794
002e5a  f7fffffe          BL       luaT_getvarargs
002e5e  981a              LDR      r0,[sp,#0x68]         ;1794
002e60  6941              LDR      r1,[r0,#0x14]         ;1794
002e62  9113              STR      r1,[sp,#0x4c]         ;1794
002e64  e01d              B        |L16.11938|
002e66  9817              LDR      r0,[sp,#0x5c]         ;1798
002e68  68c1              LDR      r1,[r0,#0xc]          ;1798
002e6a  460b              MOV      r3,r1                 ;1798
002e6c  910e              STR      r1,[sp,#0x38]         ;1798
002e6e  9811              LDR      r0,[sp,#0x44]         ;1798
002e70  f3c011c7          UBFX     r1,r0,#7,#8           ;1798
002e74  e9dd0219          LDRD     r0,r2,[sp,#0x64]      ;1798
002e78  f7fffffe          BL       luaT_adjustvarargs
002e7c  981a              LDR      r0,[sp,#0x68]         ;1799
002e7e  6941              LDR      r1,[r0,#0x14]         ;1799
002e80  9113              STR      r1,[sp,#0x4c]         ;1799
002e82  9813              LDR      r0,[sp,#0x4c]         ;1800
002e84  b138              CBZ      r0,|L16.11926|
002e86  e9dd0119          LDRD     r0,r1,[sp,#0x64]      ;1801
002e8a  f7fffffe          BL       luaD_hookcall
002e8e  9814              LDR      r0,[sp,#0x50]         ;1802
002e90  1d00              ADDS     r0,r0,#4              ;1802
002e92  9919              LDR      r1,[sp,#0x64]         ;1802
002e94  6188              STR      r0,[r1,#0x18]         ;1802
                  |L16.11926|
002e96  981a              LDR      r0,[sp,#0x68]         ;1804
002e98  6800              LDR      r0,[r0,#0]            ;1804
002e9a  3010              ADDS     r0,r0,#0x10           ;1804
002e9c  9015              STR      r0,[sp,#0x54]         ;1804
002e9e  e000              B        |L16.11938|
002ea0  bf00              NOP                            ;1809
                  |L16.11938|
002ea2  bf00              NOP                            ;913
002ea4  f7fdb8d8          B        |L16.88|
;;;1814   
                          ENDP

                  |L16.11944|
                          DCD      0x0001ffff

                          AREA ||i.luaV_finishOp||, CODE, READONLY, ALIGN=1

                  luaV_finishOp PROC
;;;721    */
;;;722    void luaV_finishOp (lua_State *L) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4604              MOV      r4,r0
;;;723      CallInfo *ci = L->ci;
000006  6965              LDR      r5,[r4,#0x14]
;;;724      StkId base = ci->func + 1;
000008  6828              LDR      r0,[r5,#0]
00000a  f1000810          ADD      r8,r0,#0x10
;;;725      Instruction inst = *(ci->u.l.savedpc - 1);  /* interrupted instruction */
00000e  6928              LDR      r0,[r5,#0x10]
000010  f8507c04          LDR      r7,[r0,#-4]
;;;726      OpCode op = GET_OPCODE(inst);
000014  f0070a7f          AND      r10,r7,#0x7f
;;;727      switch (op) {  /* finish its execution */
000018  f1aa0009          SUB      r0,r10,#9
00001c  2840              CMP      r0,#0x40
00001e  d274              BCS      |L17.266|
000020  e8dff000          TBB      [pc,r0]
000024  3a3b3c3d          DCB      0x3a,0x3b,0x3c,0x3d
000028  a0a1a2a3          DCB      0xa0,0xa1,0xa2,0xa3
00002c  a43e2021          DCB      0xa4,0x3e,0x20,0x21
000030  22252623          DCB      0x22,0x25,0x26,0x23
000034  242c2d2e          DCB      0x24,0x2c,0x2d,0x2e
000038  32a42728          DCB      0x32,0xa4,0x27,0x28
00003c  2935362a          DCB      0x29,0x35,0x36,0x2a
000040  2b2f3031          DCB      0x2b,0x2f,0x30,0x31
000044  33343738          DCB      0x33,0x34,0x37,0x38
000048  a4397ea4          DCB      0xa4,0x39,0x7e,0xa4
00004c  a4534d4e          DCB      0xa4,0x53,0x4d,0x4e
000050  a4a44f50          DCB      0xa4,0xa4,0x4f,0x50
000054  5152a4a4          DCB      0x51,0x52,0xa4,0xa4
000058  a4a49e9f          DCB      0xa4,0xa4,0x9e,0x9f
00005c  a4a4a4a4          DCB      0xa4,0xa4,0xa4,0xa4
000060  a4a4a49d          DCB      0xa4,0xa4,0xa4,0x9d
;;;728        case OP_ADDI: case OP_SUBI:
000064  bf00              NOP      
;;;729        case OP_MULI: case OP_DIVI: case OP_IDIVI:
000066  bf00              NOP      
000068  bf00              NOP      
00006a  bf00              NOP      
;;;730        case OP_MODI: case OP_POWI:
00006c  bf00              NOP      
00006e  bf00              NOP      
;;;731        case OP_ADD: case OP_SUB:
000070  bf00              NOP      
000072  bf00              NOP      
;;;732        case OP_MUL: case OP_DIV: case OP_IDIV:
000074  bf00              NOP      
000076  bf00              NOP      
000078  bf00              NOP      
;;;733        case OP_BANDK: case OP_BORK: case OP_BXORK:
00007a  bf00              NOP      
00007c  bf00              NOP      
00007e  bf00              NOP      
;;;734        case OP_BAND: case OP_BOR: case OP_BXOR:
000080  bf00              NOP      
000082  bf00              NOP      
000084  bf00              NOP      
;;;735        case OP_SHRI: case OP_SHL: case OP_SHR:
000086  bf00              NOP      
000088  bf00              NOP      
00008a  bf00              NOP      
;;;736        case OP_MOD: case OP_POW:
00008c  bf00              NOP      
00008e  bf00              NOP      
;;;737        case OP_UNM: case OP_BNOT: case OP_LEN:
000090  bf00              NOP      
000092  bf00              NOP      
000094  bf00              NOP      
;;;738        case OP_GETTABUP: case OP_GETTABLE: case OP_GETI:
000096  bf00              NOP      
000098  bf00              NOP      
00009a  bf00              NOP      
;;;739        case OP_GETFIELD: case OP_SELF: {
00009c  bf00              NOP      
00009e  bf00              NOP      
;;;740          setobjs2s(L, base + GETARG_A(inst), --L->top);
0000a0  f3c712c7          UBFX     r2,r7,#7,#8
0000a4  eb081002          ADD      r0,r8,r2,LSL #4
0000a8  68e2              LDR      r2,[r4,#0xc]
0000aa  3a10              SUBS     r2,r2,#0x10
0000ac  4611              MOV      r1,r2
0000ae  60e2              STR      r2,[r4,#0xc]
0000b0  e9d12300          LDRD     r2,r3,[r1,#0]
0000b4  e9c02300          STRD     r2,r3,[r0,#0]
0000b8  7a0a              LDRB     r2,[r1,#8]
0000ba  7202              STRB     r2,[r0,#8]
;;;741          break;
0000bc  e057              B        |L17.366|
;;;742        }
;;;743        case OP_LT: case OP_LE:
0000be  bf00              NOP      
;;;744        case OP_LTI: case OP_LEI:
0000c0  bf00              NOP      
0000c2  bf00              NOP      
;;;745        case OP_GTI: case OP_GEI:
0000c4  bf00              NOP      
0000c6  bf00              NOP      
;;;746        case OP_EQ: {  /* note that 'OP_EQI'/'OP_EQK' cannot yield */
0000c8  bf00              NOP      
;;;747          int res = !l_isfalse(s2v(L->top - 1));
0000ca  68e1              LDR      r1,[r4,#0xc]
0000cc  f8111c08          LDRB     r1,[r1,#-8]
0000d0  b151              CBZ      r1,|L17.232|
0000d2  68e1              LDR      r1,[r4,#0xc]
0000d4  f8111c08          LDRB     r1,[r1,#-8]
0000d8  2901              CMP      r1,#1
0000da  d103              BNE      |L17.228|
0000dc  68e1              LDR      r1,[r4,#0xc]
0000de  f8511c10          LDR      r1,[r1,#-0x10]
0000e2  b109              CBZ      r1,|L17.232|
                  |L17.228|
0000e4  2101              MOVS     r1,#1
0000e6  e000              B        |L17.234|
                  |L17.232|
0000e8  2100              MOVS     r1,#0
                  |L17.234|
0000ea  4608              MOV      r0,r1
;;;748          L->top--;
0000ec  68e1              LDR      r1,[r4,#0xc]
0000ee  3910              SUBS     r1,r1,#0x10
0000f0  60e1              STR      r1,[r4,#0xc]
;;;749          if (ci->callstatus & CIST_LEQ) {  /* "<=" using "<" instead? */
0000f2  f8951022          LDRB     r1,[r5,#0x22]
0000f6  f0010140          AND      r1,r1,#0x40
0000fa  b149              CBZ      r1,|L17.272|
;;;750            ci->callstatus ^= CIST_LEQ;  /* clear mark */
0000fc  8c69              LDRH     r1,[r5,#0x22]
0000fe  f0810140          EOR      r1,r1,#0x40
000102  8469              STRH     r1,[r5,#0x22]
;;;751            res = !res;  /* negate result */
000104  b910              CBNZ     r0,|L17.268|
000106  2101              MOVS     r1,#1
000108  e001              B        |L17.270|
                  |L17.266|
00010a  e02f              B        |L17.364|
                  |L17.268|
00010c  2100              MOVS     r1,#0
                  |L17.270|
00010e  4608              MOV      r0,r1
                  |L17.272|
;;;752          }
;;;753          lua_assert(GET_OPCODE(*ci->u.l.savedpc) == OP_JMP);
;;;754          if (res != GETARG_k(inst))  /* condition failed? */
000110  f3c731c0          UBFX     r1,r7,#15,#1
000114  4288              CMP      r0,r1
000116  d002              BEQ      |L17.286|
;;;755            ci->u.l.savedpc++;  /* skip jump instruction */
000118  6929              LDR      r1,[r5,#0x10]
00011a  1d09              ADDS     r1,r1,#4
00011c  6129              STR      r1,[r5,#0x10]
                  |L17.286|
;;;756          break;
00011e  e026              B        |L17.366|
;;;757        }
;;;758        case OP_CONCAT: {
;;;759          StkId top = L->top - 1;  /* top when 'luaT_trybinTM' was called */
000120  68e0              LDR      r0,[r4,#0xc]
000122  f1a00610          SUB      r6,r0,#0x10
;;;760          int a = GETARG_A(inst);      /* first element to concatenate */
000126  f3c71bc7          UBFX     r11,r7,#7,#8
;;;761          int total = cast_int(top - 1 - (base + a));  /* yet to concatenate */
00012a  f1a60010          SUB      r0,r6,#0x10
00012e  eb08110b          ADD      r1,r8,r11,LSL #4
000132  1a40              SUBS     r0,r0,r1
000134  ea4f1920          ASR      r9,r0,#4
;;;762          setobjs2s(L, top - 2, top);  /* put TM result in proper position */
000138  f1a60020          SUB      r0,r6,#0x20
00013c  4631              MOV      r1,r6
00013e  e9d12300          LDRD     r2,r3,[r1,#0]
000142  e9c02300          STRD     r2,r3,[r0,#0]
000146  7a0a              LDRB     r2,[r1,#8]
000148  7202              STRB     r2,[r0,#8]
;;;763          if (total > 1) {  /* are there elements to concat? */
00014a  f1b90f01          CMP      r9,#1
00014e  dd05              BLE      |L17.348|
;;;764            L->top = top - 1;  /* top is one after last element (at top-2) */
000150  3010              ADDS     r0,r0,#0x10
000152  60e0              STR      r0,[r4,#0xc]
;;;765            luaV_concat(L, total);  /* concat them (may yield again) */
000154  4649              MOV      r1,r9
000156  4620              MOV      r0,r4
000158  f7fffffe          BL       luaV_concat
                  |L17.348|
;;;766          }
;;;767          break;
00015c  e007              B        |L17.366|
;;;768        }
;;;769        case OP_TFORCALL: case OP_CALL: case OP_TAILCALL:
00015e  bf00              NOP      
000160  bf00              NOP      
;;;770        case OP_SETTABUP: case OP_SETTABLE:
000162  bf00              NOP      
000164  bf00              NOP      
;;;771        case OP_SETI: case OP_SETFIELD:
000166  bf00              NOP      
000168  bf00              NOP      
;;;772          break;
00016a  e000              B        |L17.366|
                  |L17.364|
00016c  bf00              NOP                            ;727
                  |L17.366|
00016e  bf00              NOP                            ;741
;;;773        default: lua_assert(0);
;;;774      }
;;;775    }
000170  e8bd9ff0          POP      {r4-r12,pc}
;;;776    
                          ENDP


                          AREA ||i.luaV_finishget||, CODE, READONLY, ALIGN=2

                  luaV_finishget PROC
;;;182    */
;;;183    void luaV_finishget (lua_State *L, const TValue *t, TValue *key, StkId val,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;184                          const TValue *slot) {
000004  4681              MOV      r9,r0
000006  460c              MOV      r4,r1
000008  4690              MOV      r8,r2
00000a  461d              MOV      r5,r3
00000c  9f0a              LDR      r7,[sp,#0x28]
;;;185      int loop;  /* counter to avoid infinite loops */
;;;186      const TValue *tm;  /* metamethod */
;;;187      for (loop = 0; loop < MAXTAGLOOP; loop++) {
00000e  f04f0a00          MOV      r10,#0
000012  e058              B        |L18.198|
                  |L18.20|
;;;188        if (slot == NULL) {  /* 't' is not a table? */
000014  b97f              CBNZ     r7,|L18.54|
;;;189          lua_assert(!ttistable(t));
;;;190          tm = luaT_gettmbyobj(L, t, TM_INDEX);
000016  2200              MOVS     r2,#0
000018  4621              MOV      r1,r4
00001a  4648              MOV      r0,r9
00001c  f7fffffe          BL       luaT_gettmbyobj
000020  4606              MOV      r6,r0
;;;191          if (notm(tm))
000022  7a30              LDRB     r0,[r6,#8]
000024  f000000f          AND      r0,r0,#0xf
000028  bb08              CBNZ     r0,|L18.110|
;;;192            luaG_typeerror(L, t, "index");  /* no metamethod */
00002a  a22b              ADR      r2,|L18.216|
00002c  4621              MOV      r1,r4
00002e  4648              MOV      r0,r9
000030  f7fffffe          BL       luaG_typeerror
000034  e01b              B        |L18.110|
                  |L18.54|
;;;193          /* else will try the metamethod */
;;;194        }
;;;195        else {  /* 't' is a table */
;;;196          lua_assert(isempty(slot));
;;;197          tm = fasttm(L, hvalue(t)->metatable, TM_INDEX);  /* table's metamethod */
000036  6820              LDR      r0,[r4,#0]
000038  6980              LDR      r0,[r0,#0x18]
00003a  b908              CBNZ     r0,|L18.64|
00003c  2000              MOVS     r0,#0
00003e  e010              B        |L18.98|
                  |L18.64|
000040  6820              LDR      r0,[r4,#0]
000042  6980              LDR      r0,[r0,#0x18]
000044  7980              LDRB     r0,[r0,#6]
000046  f0000001          AND      r0,r0,#1
00004a  b108              CBZ      r0,|L18.80|
00004c  2000              MOVS     r0,#0
00004e  e008              B        |L18.98|
                  |L18.80|
000050  f8d91010          LDR      r1,[r9,#0x10]
000054  f8d12098          LDR      r2,[r1,#0x98]
000058  6821              LDR      r1,[r4,#0]
00005a  6988              LDR      r0,[r1,#0x18]
00005c  2100              MOVS     r1,#0
00005e  f7fffffe          BL       luaT_gettm
                  |L18.98|
000062  4606              MOV      r6,r0
;;;198          if (tm == NULL) {  /* no metamethod? */
000064  b91e              CBNZ     r6,|L18.110|
;;;199            setnilvalue(s2v(val));  /* result is nil */
000066  2000              MOVS     r0,#0
000068  7228              STRB     r0,[r5,#8]
                  |L18.106|
;;;200            return;
;;;201          }
;;;202          /* else will try the metamethod */
;;;203        }
;;;204        if (ttisfunction(tm)) {  /* is metamethod a function? */
;;;205          luaT_callTMres(L, tm, t, key, val);  /* call it */
;;;206          return;
;;;207        }
;;;208        t = tm;  /* else try to access 'tm[key]' */
;;;209        if (luaV_fastget(L, t, key, slot, luaH_get)) {  /* fast track? */
;;;210          setobj2s(L, val, slot);  /* done */
;;;211          return;
;;;212        }
;;;213        /* else repeat (tail call 'luaV_finishget') */
;;;214      }
;;;215      luaG_runerror(L, "'__index' chain too long; possible loop");
;;;216    }
00006a  e8bd8ff8          POP      {r3-r11,pc}
                  |L18.110|
00006e  7a30              LDRB     r0,[r6,#8]            ;204
000070  f000000f          AND      r0,r0,#0xf            ;204
000074  2806              CMP      r0,#6                 ;204
000076  d107              BNE      |L18.136|
000078  4643              MOV      r3,r8                 ;205
00007a  4622              MOV      r2,r4                 ;205
00007c  4631              MOV      r1,r6                 ;205
00007e  4648              MOV      r0,r9                 ;205
000080  9500              STR      r5,[sp,#0]            ;205
000082  f7fffffe          BL       luaT_callTMres
000086  e7f0              B        |L18.106|
                  |L18.136|
000088  4634              MOV      r4,r6                 ;208
00008a  7a20              LDRB     r0,[r4,#8]            ;209
00008c  2845              CMP      r0,#0x45              ;209
00008e  d002              BEQ      |L18.150|
000090  2700              MOVS     r7,#0                 ;209
000092  2000              MOVS     r0,#0                 ;209
000094  e00b              B        |L18.174|
                  |L18.150|
000096  4641              MOV      r1,r8                 ;209
000098  6820              LDR      r0,[r4,#0]            ;209
00009a  f7fffffe          BL       luaH_get
00009e  4607              MOV      r7,r0                 ;209
0000a0  7a38              LDRB     r0,[r7,#8]            ;209
0000a2  f000000f          AND      r0,r0,#0xf            ;209
0000a6  b108              CBZ      r0,|L18.172|
0000a8  2001              MOVS     r0,#1                 ;209
0000aa  e000              B        |L18.174|
                  |L18.172|
0000ac  2000              MOVS     r0,#0                 ;209
                  |L18.174|
0000ae  b140              CBZ      r0,|L18.194|
0000b0  4628              MOV      r0,r5                 ;210
0000b2  4639              MOV      r1,r7                 ;210
0000b4  e9d12300          LDRD     r2,r3,[r1,#0]         ;210
0000b8  e9c02300          STRD     r2,r3,[r0,#0]         ;210
0000bc  7a0a              LDRB     r2,[r1,#8]            ;210
0000be  7202              STRB     r2,[r0,#8]            ;210
0000c0  e7d3              B        |L18.106|
                  |L18.194|
0000c2  f10a0a01          ADD      r10,r10,#1            ;187
                  |L18.198|
0000c6  f5ba6ffa          CMP      r10,#0x7d0            ;187
0000ca  dba3              BLT      |L18.20|
0000cc  a104              ADR      r1,|L18.224|
0000ce  4648              MOV      r0,r9                 ;215
0000d0  f7fffffe          BL       luaG_runerror
0000d4  bf00              NOP      
0000d6  e7c8              B        |L18.106|
;;;217    
                          ENDP

                  |L18.216|
0000d8  696e6465          DCB      "index",0
0000dc  7800    
0000de  00                DCB      0
0000df  00                DCB      0
                  |L18.224|
0000e0  275f5f69          DCB      "'__index' chain too long; possible loop",0
0000e4  6e646578
0000e8  27206368
0000ec  61696e20
0000f0  746f6f20
0000f4  6c6f6e67
0000f8  3b20706f
0000fc  73736962
000100  6c65206c
000104  6f6f7000

                          AREA ||i.luaV_finishset||, CODE, READONLY, ALIGN=2

                  luaV_finishset PROC
;;;225    */
;;;226    void luaV_finishset (lua_State *L, const TValue *t, TValue *key,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;227                         TValue *val, const TValue *slot) {
000004  4682              MOV      r10,r0
000006  460f              MOV      r7,r1
000008  4691              MOV      r9,r2
00000a  461c              MOV      r4,r3
00000c  9d0a              LDR      r5,[sp,#0x28]
;;;228      int loop;  /* counter to avoid infinite loops */
;;;229      for (loop = 0; loop < MAXTAGLOOP; loop++) {
00000e  f04f0b00          MOV      r11,#0
000012  e095              B        |L19.320|
                  |L19.20|
;;;230        const TValue *tm;  /* '__newindex' metamethod */
;;;231        if (slot != NULL) {  /* is 't' a table? */
000014  2d00              CMP      r5,#0
000016  d044              BEQ      |L19.162|
;;;232          Table *h = hvalue(t);  /* save 't' table */
000018  f8d78000          LDR      r8,[r7,#0]
;;;233          lua_assert(isempty(slot));  /* slot must be empty */
;;;234          tm = fasttm(L, h->metatable, TM_NEWINDEX);  /* get metamethod */
00001c  f8d80018          LDR      r0,[r8,#0x18]
000020  b908              CBNZ     r0,|L19.38|
000022  2000              MOVS     r0,#0
000024  e010              B        |L19.72|
                  |L19.38|
000026  f8d80018          LDR      r0,[r8,#0x18]
00002a  7980              LDRB     r0,[r0,#6]
00002c  f0000002          AND      r0,r0,#2
000030  b108              CBZ      r0,|L19.54|
000032  2000              MOVS     r0,#0
000034  e008              B        |L19.72|
                  |L19.54|
000036  f8da1010          LDR      r1,[r10,#0x10]
00003a  f8d1209c          LDR      r2,[r1,#0x9c]
00003e  2101              MOVS     r1,#1
000040  f8d80018          LDR      r0,[r8,#0x18]
000044  f7fffffe          BL       luaT_gettm
                  |L19.72|
000048  4606              MOV      r6,r0
;;;235          if (tm == NULL) {  /* no metamethod? */
00004a  bb4e              CBNZ     r6,|L19.160|
;;;236            if (slot == luaH_emptyobject)  /* no previous entry? */
00004c  4841              LDR      r0,|L19.340|
00004e  4285              CMP      r5,r0
000050  d105              BNE      |L19.94|
;;;237              slot = luaH_newkey(L, h, key);  /* create one */
000052  464a              MOV      r2,r9
000054  4641              MOV      r1,r8
000056  4650              MOV      r0,r10
000058  f7fffffe          BL       luaH_newkey
00005c  4605              MOV      r5,r0
                  |L19.94|
;;;238            /* no metamethod and (now) there is an entry with given key */
;;;239            setobj2t(L, cast(TValue *, slot), val);  /* set its new value */
00005e  4628              MOV      r0,r5
000060  4621              MOV      r1,r4
000062  e9d12300          LDRD     r2,r3,[r1,#0]
000066  e9c02300          STRD     r2,r3,[r0,#0]
00006a  7a0a              LDRB     r2,[r1,#8]
00006c  7202              STRB     r2,[r0,#8]
;;;240            invalidateTMcache(h);
00006e  2000              MOVS     r0,#0
000070  f8880006          STRB     r0,[r8,#6]
;;;241            luaC_barrierback(L, obj2gco(h), val);
000074  7a20              LDRB     r0,[r4,#8]
000076  f0000040          AND      r0,r0,#0x40
00007a  b170              CBZ      r0,|L19.154|
00007c  f8980005          LDRB     r0,[r8,#5]
000080  f0000020          AND      r0,r0,#0x20
000084  b148              CBZ      r0,|L19.154|
000086  6820              LDR      r0,[r4,#0]
000088  7940              LDRB     r0,[r0,#5]
00008a  f0000018          AND      r0,r0,#0x18
00008e  b120              CBZ      r0,|L19.154|
000090  4641              MOV      r1,r8
000092  4650              MOV      r0,r10
000094  f7fffffe          BL       luaC_barrierback_
000098  e000              B        |L19.156|
                  |L19.154|
00009a  bf00              NOP      
                  |L19.156|
;;;242            return;
;;;243          }
;;;244          /* else will try the metamethod */
;;;245        }
;;;246        else {  /* not a table; check metamethod */
;;;247          tm = luaT_gettmbyobj(L, t, TM_NEWINDEX);
;;;248          if (notm(tm))
;;;249            luaG_typeerror(L, t, "index");
;;;250        }
;;;251        /* try the metamethod */
;;;252        if (ttisfunction(tm)) {
;;;253          luaT_callTM(L, tm, t, key, val);
;;;254          return;
;;;255        }
;;;256        t = tm;  /* else repeat assignment over 'tm' */
;;;257        if (luaV_fastget(L, t, key, slot, luaH_get)) {
;;;258          luaV_finishfastset(L, t, slot, val);
;;;259          return;  /* done */
;;;260        }
;;;261        /* else 'return luaV_finishset(L, t, key, val, slot)' (loop) */
;;;262      }
;;;263      luaG_runerror(L, "'__newindex' chain too long; possible loop");
;;;264    }
00009c  e8bd8ff8          POP      {r3-r11,pc}
                  |L19.160|
0000a0  e00e              B        |L19.192|
                  |L19.162|
0000a2  2201              MOVS     r2,#1                 ;247
0000a4  4639              MOV      r1,r7                 ;247
0000a6  4650              MOV      r0,r10                ;247
0000a8  f7fffffe          BL       luaT_gettmbyobj
0000ac  4606              MOV      r6,r0                 ;247
0000ae  7a30              LDRB     r0,[r6,#8]            ;248
0000b0  f000000f          AND      r0,r0,#0xf            ;248
0000b4  b920              CBNZ     r0,|L19.192|
0000b6  a228              ADR      r2,|L19.344|
0000b8  4639              MOV      r1,r7                 ;249
0000ba  4650              MOV      r0,r10                ;249
0000bc  f7fffffe          BL       luaG_typeerror
                  |L19.192|
0000c0  7a30              LDRB     r0,[r6,#8]            ;252
0000c2  f000000f          AND      r0,r0,#0xf            ;252
0000c6  2806              CMP      r0,#6                 ;252
0000c8  d107              BNE      |L19.218|
0000ca  464b              MOV      r3,r9                 ;253
0000cc  463a              MOV      r2,r7                 ;253
0000ce  4631              MOV      r1,r6                 ;253
0000d0  4650              MOV      r0,r10                ;253
0000d2  9400              STR      r4,[sp,#0]            ;253
0000d4  f7fffffe          BL       luaT_callTM
0000d8  e7e0              B        |L19.156|
                  |L19.218|
0000da  4637              MOV      r7,r6                 ;256
0000dc  7a38              LDRB     r0,[r7,#8]            ;257
0000de  2845              CMP      r0,#0x45              ;257
0000e0  d002              BEQ      |L19.232|
0000e2  2500              MOVS     r5,#0                 ;257
0000e4  2000              MOVS     r0,#0                 ;257
0000e6  e00b              B        |L19.256|
                  |L19.232|
0000e8  4649              MOV      r1,r9                 ;257
0000ea  6838              LDR      r0,[r7,#0]            ;257
0000ec  f7fffffe          BL       luaH_get
0000f0  4605              MOV      r5,r0                 ;257
0000f2  7a28              LDRB     r0,[r5,#8]            ;257
0000f4  f000000f          AND      r0,r0,#0xf            ;257
0000f8  b108              CBZ      r0,|L19.254|
0000fa  2001              MOVS     r0,#1                 ;257
0000fc  e000              B        |L19.256|
                  |L19.254|
0000fe  2000              MOVS     r0,#0                 ;257
                  |L19.256|
000100  b1e0              CBZ      r0,|L19.316|
000102  4628              MOV      r0,r5                 ;258
000104  4621              MOV      r1,r4                 ;258
000106  e9d12300          LDRD     r2,r3,[r1,#0]         ;258
00010a  e9c02300          STRD     r2,r3,[r0,#0]         ;258
00010e  7a0a              LDRB     r2,[r1,#8]            ;258
000110  7202              STRB     r2,[r0,#8]            ;258
000112  7a20              LDRB     r0,[r4,#8]            ;258
000114  f0000040          AND      r0,r0,#0x40           ;258
000118  b170              CBZ      r0,|L19.312|
00011a  6838              LDR      r0,[r7,#0]            ;258
00011c  7940              LDRB     r0,[r0,#5]            ;258
00011e  f0000020          AND      r0,r0,#0x20           ;258
000122  b148              CBZ      r0,|L19.312|
000124  6820              LDR      r0,[r4,#0]            ;258
000126  7940              LDRB     r0,[r0,#5]            ;258
000128  f0000018          AND      r0,r0,#0x18           ;258
00012c  b120              CBZ      r0,|L19.312|
00012e  4650              MOV      r0,r10                ;258
000130  6839              LDR      r1,[r7,#0]            ;258
000132  f7fffffe          BL       luaC_barrierback_
000136  e000              B        |L19.314|
                  |L19.312|
000138  bf00              NOP                            ;258
                  |L19.314|
00013a  e7af              B        |L19.156|
                  |L19.316|
00013c  f10b0b01          ADD      r11,r11,#1            ;229
                  |L19.320|
000140  f5bb6ffa          CMP      r11,#0x7d0            ;229
000144  f6ffaf66          BLT      |L19.20|
000148  a105              ADR      r1,|L19.352|
00014a  4650              MOV      r0,r10                ;263
00014c  f7fffffe          BL       luaG_runerror
000150  bf00              NOP      
000152  e7a3              B        |L19.156|
;;;265    
                          ENDP

                  |L19.340|
                          DCD      luaH_emptyobject_
                  |L19.344|
000158  696e6465          DCB      "index",0
00015c  7800    
00015e  00                DCB      0
00015f  00                DCB      0
                  |L19.352|
000160  275f5f6e          DCB      "'__newindex' chain too long; possible loop",0
000164  6577696e
000168  64657827
00016c  20636861
000170  696e2074
000174  6f6f206c
000178  6f6e673b
00017c  20706f73
000180  7369626c
000184  65206c6f
000188  6f7000  
00018b  00                DCB      0

                          AREA ||i.luaV_flttointeger||, CODE, READONLY, ALIGN=2

                  luaV_flttointeger PROC
;;;101    */
;;;102    int luaV_flttointeger (lua_Number n, lua_Integer *p, int mode) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  461e              MOV      r6,r3
;;;103      lua_Number f = l_floor(n);
00000c  4638              MOV      r0,r7
00000e  4641              MOV      r1,r8
000010  f7fffffe          BL       floor
000014  4604              MOV      r4,r0
000016  460d              MOV      r5,r1
;;;104      if (n != f) {  /* not an integral value? */
000018  4622              MOV      r2,r4
00001a  462b              MOV      r3,r5
00001c  4638              MOV      r0,r7
00001e  4641              MOV      r1,r8
000020  f7fffffe          BL       __aeabi_cdcmpeq
000024  d00d              BEQ      |L20.66|
;;;105        if (mode == 0) return 0;  /* fails if mode demands integral value */
000026  b916              CBNZ     r6,|L20.46|
000028  2000              MOVS     r0,#0
                  |L20.42|
;;;106        else if (mode > 1)  /* needs ceil? */
;;;107          f += 1;  /* convert floor to ceil (remember: n != f) */
;;;108      }
;;;109      return lua_numbertointeger(f, p);
;;;110    }
00002a  e8bd87f0          POP      {r4-r10,pc}
                  |L20.46|
00002e  2e01              CMP      r6,#1                 ;106
000030  dd07              BLE      |L20.66|
000032  2200              MOVS     r2,#0                 ;107
000034  4b0f              LDR      r3,|L20.116|
000036  4620              MOV      r0,r4                 ;107
000038  4629              MOV      r1,r5                 ;107
00003a  f7fffffe          BL       __aeabi_dadd
00003e  4604              MOV      r4,r0                 ;107
000040  460d              MOV      r5,r1                 ;107
                  |L20.66|
000042  2200              MOVS     r2,#0                 ;109
000044  4b0c              LDR      r3,|L20.120|
000046  4620              MOV      r0,r4                 ;109
000048  4629              MOV      r1,r5                 ;109
00004a  f7fffffe          BL       __aeabi_cdrcmple
00004e  d80f              BHI      |L20.112|
000050  2200              MOVS     r2,#0                 ;109
000052  4b0a              LDR      r3,|L20.124|
000054  4620              MOV      r0,r4                 ;109
000056  4629              MOV      r1,r5                 ;109
000058  f7fffffe          BL       __aeabi_cdcmple
00005c  d208              BCS      |L20.112|
00005e  4620              MOV      r0,r4                 ;109
000060  4629              MOV      r1,r5                 ;109
000062  f7fffffe          BL       __aeabi_d2lz
000066  e9c90100          STRD     r0,r1,[r9,#0]         ;109
00006a  2001              MOVS     r0,#1                 ;109
00006c  b100              CBZ      r0,|L20.112|
00006e  e7dc              B        |L20.42|
                  |L20.112|
000070  2000              MOVS     r0,#0                 ;109
000072  e7da              B        |L20.42|
;;;111    
                          ENDP

                  |L20.116|
                          DCD      0x3ff00000
                  |L20.120|
                          DCD      0xc3e00000
                  |L20.124|
                          DCD      0x43e00000

                          AREA ||i.luaV_lessequal||, CODE, READONLY, ALIGN=1

                  luaV_lessequal PROC
;;;457    */
;;;458    int luaV_lessequal (lua_State *L, const TValue *l, const TValue *r) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;459      if (ttisnumber(l) && ttisnumber(r))  /* both operands are numbers? */
000008  7a20              LDRB     r0,[r4,#8]
00000a  f000000f          AND      r0,r0,#0xf
00000e  2803              CMP      r0,#3
000010  d109              BNE      |L21.38|
000012  7a28              LDRB     r0,[r5,#8]
000014  f000000f          AND      r0,r0,#0xf
000018  2803              CMP      r0,#3
00001a  d104              BNE      |L21.38|
;;;460        return LEnum(l, r);
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       LEnum
                  |L21.36|
;;;461      else return lessequalothers(L, l, r);
;;;462    }
000024  bd70              POP      {r4-r6,pc}
                  |L21.38|
000026  462a              MOV      r2,r5                 ;461
000028  4621              MOV      r1,r4                 ;461
00002a  4630              MOV      r0,r6                 ;461
00002c  f7fffffe          BL       lessequalothers
000030  e7f8              B        |L21.36|
;;;463    
                          ENDP


                          AREA ||i.luaV_lessthan||, CODE, READONLY, ALIGN=1

                  luaV_lessthan PROC
;;;430    */
;;;431    int luaV_lessthan (lua_State *L, const TValue *l, const TValue *r) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;432      if (ttisnumber(l) && ttisnumber(r))  /* both operands are numbers? */
000008  7a20              LDRB     r0,[r4,#8]
00000a  f000000f          AND      r0,r0,#0xf
00000e  2803              CMP      r0,#3
000010  d109              BNE      |L22.38|
000012  7a28              LDRB     r0,[r5,#8]
000014  f000000f          AND      r0,r0,#0xf
000018  2803              CMP      r0,#3
00001a  d104              BNE      |L22.38|
;;;433        return LTnum(l, r);
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       LTnum
                  |L22.36|
;;;434      else return lessthanothers(L, l, r);
;;;435    }
000024  bd70              POP      {r4-r6,pc}
                  |L22.38|
000026  462a              MOV      r2,r5                 ;434
000028  4621              MOV      r1,r4                 ;434
00002a  4630              MOV      r0,r6                 ;434
00002c  f7fffffe          BL       lessthanothers
000030  e7f8              B        |L22.36|
;;;436    
                          ENDP


                          AREA ||i.luaV_mod||, CODE, READONLY, ALIGN=2

                  luaV_mod PROC
;;;634    */
;;;635    lua_Integer luaV_mod (lua_State *L, lua_Integer m, lua_Integer n) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4682              MOV      r10,r0
000006  4690              MOV      r8,r2
000008  4699              MOV      r9,r3
00000a  e9dd4508          LDRD     r4,r5,[sp,#0x20]
;;;636      if (l_castS2U(n) + 1u <= 1u) {  /* special cases: -1 or 0 */
00000e  1c62              ADDS     r2,r4,#1
000010  f1450100          ADC      r1,r5,#0
000014  2000              MOVS     r0,#0
000016  f1d20201          RSBS     r2,r2,#1
00001a  4188              SBCS     r0,r0,r1
00001c  d30d              BCC      |L23.58|
;;;637        if (n == 0)
00001e  2100              MOVS     r1,#0
000020  ea840001          EOR      r0,r4,r1
000024  4069              EORS     r1,r1,r5
000026  4308              ORRS     r0,r0,r1
000028  d103              BNE      |L23.50|
;;;638          luaG_runerror(L, "attempt to perform 'n%%0'");
00002a  a111              ADR      r1,|L23.112|
00002c  4650              MOV      r0,r10
00002e  f7fffffe          BL       luaG_runerror
                  |L23.50|
;;;639        return 0;   /* m % -1 == 0; avoid overflow with 0x80000...%-1 */
000032  2000              MOVS     r0,#0
000034  4601              MOV      r1,r0
                  |L23.54|
;;;640      }
;;;641      else {
;;;642        lua_Integer r = m % n;
;;;643        if (r != 0 && (m ^ n) < 0)  /* 'm/n' would be non-integer negative? */
;;;644          r += n;  /* correct result for different rounding */
;;;645        return r;
;;;646      }
;;;647    }
000036  e8bd87f0          POP      {r4-r10,pc}
                  |L23.58|
00003a  4622              MOV      r2,r4                 ;642
00003c  462b              MOV      r3,r5                 ;642
00003e  4640              MOV      r0,r8                 ;642
000040  4649              MOV      r1,r9                 ;642
000042  f7fffffe          BL       __aeabi_ldivmod
000046  4616              MOV      r6,r2                 ;642
000048  461f              MOV      r7,r3                 ;642
00004a  2100              MOVS     r1,#0                 ;643
00004c  ea860001          EOR      r0,r6,r1              ;643
000050  4079              EORS     r1,r1,r7              ;643
000052  4308              ORRS     r0,r0,r1              ;643
000054  d009              BEQ      |L23.106|
000056  ea880004          EOR      r0,r8,r4              ;643
00005a  ea890105          EOR      r1,r9,r5              ;643
00005e  2300              MOVS     r3,#0                 ;643
000060  1ac0              SUBS     r0,r0,r3              ;643
000062  4199              SBCS     r1,r1,r3              ;643
000064  da01              BGE      |L23.106|
000066  1936              ADDS     r6,r6,r4              ;644
000068  416f              ADCS     r7,r7,r5              ;644
                  |L23.106|
00006a  4630              MOV      r0,r6                 ;645
00006c  4639              MOV      r1,r7                 ;645
00006e  e7e2              B        |L23.54|
;;;648    
                          ENDP

                  |L23.112|
000070  61747465          DCB      "attempt to perform 'n%%0'",0
000074  6d707420
000078  746f2070
00007c  6572666f
000080  726d2027
000084  6e252530
000088  2700    
00008a  00                DCB      0
00008b  00                DCB      0

                          AREA ||i.luaV_objlen||, CODE, READONLY, ALIGN=2

                  luaV_objlen PROC
;;;579    */
;;;580    void luaV_objlen (lua_State *L, StkId ra, const TValue *rb) {
000000  e92d43f8          PUSH     {r3-r9,lr}
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;581      const TValue *tm;
;;;582      switch (ttypetag(rb)) {
00000a  7a28              LDRB     r0,[r5,#8]
00000c  f000003f          AND      r0,r0,#0x3f
000010  2805              CMP      r0,#5
000012  d004              BEQ      |L24.30|
000014  2814              CMP      r0,#0x14
000016  d024              BEQ      |L24.98|
000018  2824              CMP      r0,#0x24
00001a  d134              BNE      |L24.134|
00001c  e02a              B        |L24.116|
                  |L24.30|
;;;583        case LUA_TTABLE: {
;;;584          Table *h = hvalue(rb);
00001e  682f              LDR      r7,[r5,#0]
;;;585          tm = fasttm(L, h->metatable, TM_LEN);
000020  69b8              LDR      r0,[r7,#0x18]
000022  b908              CBNZ     r0,|L24.40|
000024  2000              MOVS     r0,#0
000026  e00e              B        |L24.70|
                  |L24.40|
000028  69b8              LDR      r0,[r7,#0x18]
00002a  7980              LDRB     r0,[r0,#6]
00002c  f0000040          AND      r0,r0,#0x40
000030  b108              CBZ      r0,|L24.54|
000032  2000              MOVS     r0,#0
000034  e007              B        |L24.70|
                  |L24.54|
000036  f8d81010          LDR      r1,[r8,#0x10]
00003a  f8d120b0          LDR      r2,[r1,#0xb0]
00003e  2106              MOVS     r1,#6
000040  69b8              LDR      r0,[r7,#0x18]
000042  f7fffffe          BL       luaT_gettm
                  |L24.70|
000046  4606              MOV      r6,r0
;;;586          if (tm) break;  /* metamethod? break switch to call it */
000048  b106              CBZ      r6,|L24.76|
00004a  e02c              B        |L24.166|
                  |L24.76|
;;;587          setivalue(s2v(ra), luaH_getn(h));  /* else primitive len */
00004c  46a1              MOV      r9,r4
00004e  4638              MOV      r0,r7
000050  f7fffffe          BL       luaH_getn
000054  e9c90100          STRD     r0,r1,[r9,#0]
000058  2023              MOVS     r0,#0x23
00005a  f8890008          STRB     r0,[r9,#8]
                  |L24.94|
;;;588          return;
;;;589        }
;;;590        case LUA_TSHRSTR: {
;;;591          setivalue(s2v(ra), tsvalue(rb)->shrlen);
;;;592          return;
;;;593        }
;;;594        case LUA_TLNGSTR: {
;;;595          setivalue(s2v(ra), tsvalue(rb)->u.lnglen);
;;;596          return;
;;;597        }
;;;598        default: {  /* try metamethod */
;;;599          tm = luaT_gettmbyobj(L, rb, TM_LEN);
;;;600          if (notm(tm))  /* no metamethod? */
;;;601            luaG_typeerror(L, rb, "get length of");
;;;602          break;
;;;603        }
;;;604      }
;;;605      luaT_callTMres(L, tm, rb, rb, ra);
;;;606    }
00005e  e8bd83f8          POP      {r3-r9,pc}
                  |L24.98|
000062  4620              MOV      r0,r4                 ;591
000064  6829              LDR      r1,[r5,#0]            ;591
000066  79c9              LDRB     r1,[r1,#7]            ;591
000068  2200              MOVS     r2,#0                 ;591
00006a  e9c01200          STRD     r1,r2,[r0,#0]         ;591
00006e  2123              MOVS     r1,#0x23              ;591
000070  7201              STRB     r1,[r0,#8]            ;591
000072  e7f4              B        |L24.94|
                  |L24.116|
000074  4620              MOV      r0,r4                 ;595
000076  6829              LDR      r1,[r5,#0]            ;595
000078  68c9              LDR      r1,[r1,#0xc]          ;595
00007a  2200              MOVS     r2,#0                 ;595
00007c  e9c01200          STRD     r1,r2,[r0,#0]         ;595
000080  2123              MOVS     r1,#0x23              ;595
000082  7201              STRB     r1,[r0,#8]            ;595
000084  e7eb              B        |L24.94|
                  |L24.134|
000086  2206              MOVS     r2,#6                 ;599
000088  4629              MOV      r1,r5                 ;599
00008a  4640              MOV      r0,r8                 ;599
00008c  f7fffffe          BL       luaT_gettmbyobj
000090  4606              MOV      r6,r0                 ;599
000092  7a30              LDRB     r0,[r6,#8]            ;600
000094  f000000f          AND      r0,r0,#0xf            ;600
000098  b920              CBNZ     r0,|L24.164|
00009a  a208              ADR      r2,|L24.188|
00009c  4629              MOV      r1,r5                 ;601
00009e  4640              MOV      r0,r8                 ;601
0000a0  f7fffffe          BL       luaG_typeerror
                  |L24.164|
0000a4  bf00              NOP                            ;602
                  |L24.166|
0000a6  bf00              NOP                            ;586
0000a8  462b              MOV      r3,r5                 ;605
0000aa  462a              MOV      r2,r5                 ;605
0000ac  4631              MOV      r1,r6                 ;605
0000ae  4640              MOV      r0,r8                 ;605
0000b0  9400              STR      r4,[sp,#0]            ;605
0000b2  f7fffffe          BL       luaT_callTMres
0000b6  bf00              NOP      
0000b8  e7d1              B        |L24.94|
;;;607    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L24.188|
0000bc  67657420          DCB      "get length of",0
0000c0  6c656e67
0000c4  7468206f
0000c8  6600    
0000ca  00                DCB      0
0000cb  00                DCB      0

                          AREA ||i.luaV_shiftl||, CODE, READONLY, ALIGN=1

                  luaV_shiftl PROC
;;;655    */
;;;656    lua_Integer luaV_shiftl (lua_Integer x, lua_Integer y) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;657      if (y < 0) {  /* shift right? */
00000c  2100              MOVS     r1,#0
00000e  4608              MOV      r0,r1
000010  1a61              SUBS     r1,r4,r1
000012  eb750000          SBCS     r0,r5,r0
000016  da0f              BGE      |L25.56|
;;;658        if (y <= -NBITS) return 0;
000018  f06f013f          MVN      r1,#0x3f
00001c  1188              ASRS     r0,r1,#6
00001e  1b09              SUBS     r1,r1,r4
000020  41a8              SBCS     r0,r0,r5
000022  db03              BLT      |L25.44|
000024  2000              MOVS     r0,#0
000026  4601              MOV      r1,r0
                  |L25.40|
;;;659        else return intop(>>, x, -y);
;;;660      }
;;;661      else {  /* shift left */
;;;662        if (y >= NBITS) return 0;
;;;663        else return intop(<<, x, y);
;;;664      }
;;;665    }
000028  e8bd81f0          POP      {r4-r8,pc}
                  |L25.44|
00002c  4262              RSBS     r2,r4,#0              ;659
00002e  4630              MOV      r0,r6                 ;659
000030  4639              MOV      r1,r7                 ;659
000032  f7fffffe          BL       __aeabi_llsr
000036  e7f7              B        |L25.40|
                  |L25.56|
000038  2140              MOVS     r1,#0x40              ;662
00003a  1a61              SUBS     r1,r4,r1              ;662
00003c  f1750000          SBCS     r0,r5,#0              ;662
000040  db02              BLT      |L25.72|
000042  2000              MOVS     r0,#0                 ;662
000044  4601              MOV      r1,r0                 ;662
000046  e7ef              B        |L25.40|
                  |L25.72|
000048  4622              MOV      r2,r4                 ;663
00004a  4630              MOV      r0,r6                 ;663
00004c  4639              MOV      r1,r7                 ;663
00004e  f7fffffe          BL       __aeabi_llsl
000052  e7e9              B        |L25.40|
;;;666    
                          ENDP


                          AREA ||i.luaV_tointeger||, CODE, READONLY, ALIGN=1

                  luaV_tointeger PROC
;;;132    */
;;;133    int luaV_tointeger (const TValue *obj, lua_Integer *p, int mode) {
000000  b57f              PUSH     {r0-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;134      TValue v;
;;;135      if (cvt2num(obj) && luaO_str2num(svalue(obj), &v) == vslen(obj) + 1)
000008  7a20              LDRB     r0,[r4,#8]
00000a  f000000f          AND      r0,r0,#0xf
00000e  2804              CMP      r0,#4
000010  d113              BNE      |L26.58|
000012  6821              LDR      r1,[r4,#0]
000014  f1010010          ADD      r0,r1,#0x10
000018  4669              MOV      r1,sp
00001a  f7fffffe          BL       luaO_str2num
00001e  4601              MOV      r1,r0
000020  6820              LDR      r0,[r4,#0]
000022  7900              LDRB     r0,[r0,#4]
000024  2814              CMP      r0,#0x14
000026  d102              BNE      |L26.46|
000028  6820              LDR      r0,[r4,#0]
00002a  79c0              LDRB     r0,[r0,#7]
00002c  e001              B        |L26.50|
                  |L26.46|
00002e  6820              LDR      r0,[r4,#0]
000030  68c0              LDR      r0,[r0,#0xc]
                  |L26.50|
000032  1c40              ADDS     r0,r0,#1
000034  4281              CMP      r1,r0
000036  d100              BNE      |L26.58|
;;;136        obj = &v;  /* change string to its corresponding number */
000038  466c              MOV      r4,sp
                  |L26.58|
;;;137      return luaV_tointegerns(obj, p, mode);
00003a  4632              MOV      r2,r6
00003c  4629              MOV      r1,r5
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       luaV_tointegerns
;;;138    }
000044  b004              ADD      sp,sp,#0x10
000046  bd70              POP      {r4-r6,pc}
;;;139    
                          ENDP


                          AREA ||i.luaV_tointegerns||, CODE, READONLY, ALIGN=1

                  luaV_tointegerns PROC
;;;117    */
;;;118    int luaV_tointegerns (const TValue *obj, lua_Integer *p, int mode) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
;;;119      if (ttisfloat(obj))
00000a  7a20              LDRB     r0,[r4,#8]
00000c  2813              CMP      r0,#0x13
00000e  d108              BNE      |L27.34|
;;;120        return luaV_flttointeger(fltvalue(obj), p, mode);
000010  4643              MOV      r3,r8
000012  462a              MOV      r2,r5
000014  e9d46100          LDRD     r6,r1,[r4,#0]
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       luaV_flttointeger
                  |L27.30|
;;;121      else if (ttisinteger(obj)) {
;;;122        *p = ivalue(obj);
;;;123        return 1;
;;;124      }
;;;125      else
;;;126        return 0;
;;;127    }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L27.34|
000022  7a20              LDRB     r0,[r4,#8]            ;121
000024  2823              CMP      r0,#0x23              ;121
000026  d105              BNE      |L27.52|
000028  e9d40100          LDRD     r0,r1,[r4,#0]         ;122
00002c  e9c50100          STRD     r0,r1,[r5,#0]         ;122
000030  2001              MOVS     r0,#1                 ;123
000032  e7f4              B        |L27.30|
                  |L27.52|
000034  2000              MOVS     r0,#0                 ;126
000036  e7f2              B        |L27.30|
;;;128    
                          ENDP


                          AREA ||i.luaV_tonumber_||, CODE, READONLY, ALIGN=1

                  luaV_tonumber_ PROC
;;;79     */
;;;80     int luaV_tonumber_ (const TValue *obj, lua_Number *n) {
000000  b57f              PUSH     {r0-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;81       TValue v;
;;;82       if (ttisinteger(obj)) {
000006  7a20              LDRB     r0,[r4,#8]
000008  2823              CMP      r0,#0x23
00000a  d109              BNE      |L28.32|
;;;83         *n = cast_num(ivalue(obj));
00000c  e9d42100          LDRD     r2,r1,[r4,#0]
000010  4610              MOV      r0,r2
000012  f7fffffe          BL       __aeabi_l2d
000016  e9c50100          STRD     r0,r1,[r5,#0]
;;;84         return 1;
00001a  2001              MOVS     r0,#1
                  |L28.28|
;;;85       }
;;;86       else if (cvt2num(obj) &&  /* string coercible to number? */
;;;87                 luaO_str2num(svalue(obj), &v) == vslen(obj) + 1) {
;;;88         *n = nvalue(&v);  /* convert result of 'luaO_str2num' to a float */
;;;89         return 1;
;;;90       }
;;;91       else
;;;92         return 0;  /* conversion failed */
;;;93     }
00001c  b004              ADD      sp,sp,#0x10
00001e  bd70              POP      {r4-r6,pc}
                  |L28.32|
000020  7a20              LDRB     r0,[r4,#8]            ;86
000022  f000000f          AND      r0,r0,#0xf            ;86
000026  2804              CMP      r0,#4                 ;86
000028  d122              BNE      |L28.112|
00002a  6821              LDR      r1,[r4,#0]            ;87
00002c  f1010010          ADD      r0,r1,#0x10           ;87
000030  4669              MOV      r1,sp                 ;87
000032  f7fffffe          BL       luaO_str2num
000036  4601              MOV      r1,r0                 ;87
000038  6820              LDR      r0,[r4,#0]            ;87
00003a  7900              LDRB     r0,[r0,#4]            ;87
00003c  2814              CMP      r0,#0x14              ;87
00003e  d102              BNE      |L28.70|
000040  6820              LDR      r0,[r4,#0]            ;87
000042  79c0              LDRB     r0,[r0,#7]            ;87
000044  e001              B        |L28.74|
                  |L28.70|
000046  6820              LDR      r0,[r4,#0]            ;87
000048  68c0              LDR      r0,[r0,#0xc]          ;87
                  |L28.74|
00004a  1c40              ADDS     r0,r0,#1              ;87
00004c  4281              CMP      r1,r0                 ;87
00004e  d10f              BNE      |L28.112|
000050  f89d0008          LDRB     r0,[sp,#8]            ;88
000054  2823              CMP      r0,#0x23              ;88
000056  d105              BNE      |L28.100|
000058  e9dd2100          LDRD     r2,r1,[sp,#0]         ;88
00005c  4610              MOV      r0,r2                 ;88
00005e  f7fffffe          BL       __aeabi_l2d
000062  e001              B        |L28.104|
                  |L28.100|
000064  e9dd0100          LDRD     r0,r1,[sp,#0]         ;88
                  |L28.104|
000068  e9c50100          STRD     r0,r1,[r5,#0]         ;88
00006c  2001              MOVS     r0,#1                 ;89
00006e  e7d5              B        |L28.28|
                  |L28.112|
000070  2000              MOVS     r0,#0                 ;92
000072  e7d3              B        |L28.28|
;;;94     
                          ENDP


                          AREA ||i.pushclosure||, CODE, READONLY, ALIGN=1

                  pushclosure PROC
;;;693    */
;;;694    static void pushclosure (lua_State *L, Proto *p, UpVal **encup, StkId base,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;695                             StkId ra) {
000004  460c              MOV      r4,r1
000006  4691              MOV      r9,r2
000008  469a              MOV      r10,r3
00000a  9f0e              LDR      r7,[sp,#0x38]
;;;696      int nup = p->sizeupvalues;
00000c  f8d4b00c          LDR      r11,[r4,#0xc]
;;;697      Upvaldesc *uv = p->upvalues;
000010  f8d48040          LDR      r8,[r4,#0x40]
;;;698      int i;
;;;699      LClosure *ncl = luaF_newLclosure(L, nup);
000014  4659              MOV      r1,r11
000016  9800              LDR      r0,[sp,#0]
000018  f7fffffe          BL       luaF_newLclosure
00001c  4606              MOV      r6,r0
;;;700      ncl->p = p;
00001e  60f4              STR      r4,[r6,#0xc]
;;;701      setclLvalue2s(L, ra, ncl);  /* anchor new closure in stack */
000020  4638              MOV      r0,r7
000022  4631              MOV      r1,r6
000024  6001              STR      r1,[r0,#0]
000026  2256              MOVS     r2,#0x56
000028  7202              STRB     r2,[r0,#8]
;;;702      for (i = 0; i < nup; i++) {  /* fill in its upvalues */
00002a  2500              MOVS     r5,#0
00002c  e01a              B        |L29.100|
                  |L29.46|
;;;703        if (uv[i].instack)  /* upvalue refers to local variable? */
00002e  eb0800c5          ADD      r0,r8,r5,LSL #3
000032  7900              LDRB     r0,[r0,#4]
000034  b160              CBZ      r0,|L29.80|
;;;704          ncl->upvals[i] = luaF_findupval(L, base + uv[i].idx);
000036  eb0800c5          ADD      r0,r8,r5,LSL #3
00003a  7940              LDRB     r0,[r0,#5]
00003c  eb0a1100          ADD      r1,r10,r0,LSL #4
000040  9800              LDR      r0,[sp,#0]
000042  f7fffffe          BL       luaF_findupval
000046  f1060110          ADD      r1,r6,#0x10
00004a  f8410025          STR      r0,[r1,r5,LSL #2]
00004e  e008              B        |L29.98|
                  |L29.80|
;;;705        else  /* get upvalue from enclosing function */
;;;706          ncl->upvals[i] = encup[uv[i].idx];
000050  eb0800c5          ADD      r0,r8,r5,LSL #3
000054  7940              LDRB     r0,[r0,#5]
000056  f8591020          LDR      r1,[r9,r0,LSL #2]
00005a  f1060010          ADD      r0,r6,#0x10
00005e  f8401025          STR      r1,[r0,r5,LSL #2]
                  |L29.98|
000062  1c6d              ADDS     r5,r5,#1              ;702
                  |L29.100|
000064  455d              CMP      r5,r11                ;702
000066  dbe2              BLT      |L29.46|
;;;707        /* new closure is white, so we do not need a barrier here */
;;;708      }
;;;709      if (p->cachemiss >= MAXMISS)  /* too many missings? */
000068  7a60              LDRB     r0,[r4,#9]
00006a  280a              CMP      r0,#0xa
00006c  db02              BLT      |L29.116|
;;;710        p->cache = NULL;  /* give up cache */
00006e  2000              MOVS     r0,#0
000070  6360              STR      r0,[r4,#0x34]
000072  e00d              B        |L29.144|
                  |L29.116|
;;;711      else {
;;;712        p->cache = ncl;  /* save it on cache for reuse */
000074  6366              STR      r6,[r4,#0x34]
;;;713        luaC_protobarrier(L, p, ncl);
000076  7960              LDRB     r0,[r4,#5]
000078  f0000020          AND      r0,r0,#0x20
00007c  b120              CBZ      r0,|L29.136|
00007e  4621              MOV      r1,r4
000080  9800              LDR      r0,[sp,#0]
000082  f7fffffe          BL       luaC_protobarrier_
000086  e000              B        |L29.138|
                  |L29.136|
000088  bf00              NOP      
                  |L29.138|
;;;714        p->cachemiss++;
00008a  7a60              LDRB     r0,[r4,#9]
00008c  1c40              ADDS     r0,r0,#1
00008e  7260              STRB     r0,[r4,#9]
                  |L29.144|
;;;715      }
;;;716    }
000090  e8bd9fff          POP      {r0-r12,pc}
;;;717    
                          ENDP

