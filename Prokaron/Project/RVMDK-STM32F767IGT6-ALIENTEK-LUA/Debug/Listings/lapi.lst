L 1 "..\..\..\M6P1(L)_Lua\lua\lapi.c"
N/*
N** $Id: lapi.c,v 2.289 2018/02/27 17:48:28 roberto Exp roberto $
N** Lua API
N** See Copyright Notice in lua.h
N*/
N
N#define lapi_c
N#define LUA_CORE
N
N#include "lprefix.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lprefix.h" 1
N/*
N** $Id: lprefix.h,v 1.1 2014/11/03 15:12:44 roberto Exp roberto $
N** Definitions for Lua code that must come before any other header file
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lprefix_h
N#define lprefix_h
N
N
N/*
N** Allows POSIX/XSI stuff
N*/
N#if !defined(LUA_USE_C89)	/* { */
X#if !0L	 
N
N#if !defined(_XOPEN_SOURCE)
X#if !0L
N#define _XOPEN_SOURCE           600
N#elif _XOPEN_SOURCE == 0
S#undef _XOPEN_SOURCE  /* use -D_XOPEN_SOURCE=0 to undefine it */
N#endif
N
N/*
N** Allows manipulation of large files in gcc and some other compilers
N*/
N#if !defined(LUA_32BITS) && !defined(_FILE_OFFSET_BITS)
X#if !0L && !0L
N#define _LARGEFILE_SOURCE       1
N#define _FILE_OFFSET_BITS       64
N#endif
N
N#endif				/* } */
N
N
N/*
N** Windows stuff
N*/
N#if defined(_WIN32) 	/* { */
X#if 0L 	 
S
S#if !defined(_CRT_SECURE_NO_WARNINGS)
S#define _CRT_SECURE_NO_WARNINGS  /* avoid warnings about ISO C functions */
S#endif
S
N#endif			/* } */
N
N#endif
N
L 11 "..\..\..\M6P1(L)_Lua\lua\lapi.c" 2
N
N
N#include <limits.h>
L 1 "D:\Program_Files_x86\Keil_v5\ARM\ARMCC\Bin\..\include\limits.h" 1
N/* limits.h: ANSI 'C' (X3J11 Oct 88) library header, section 2.2.4.2 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991-1997 ARM Limited. All rights reserved         */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N#ifndef __limits_h
N#define __limits_h
N#define __ARMCLIB_VERSION 5060009
N
N#define CHAR_BIT 8
N    /* max number of bits for smallest object that is not a bit-field (byte) */
N#define SCHAR_MIN (-128)
N    /* mimimum value for an object of type signed char */
N#define SCHAR_MAX 127
N    /* maximum value for an object of type signed char */
N#define UCHAR_MAX 255
N    /* maximum value for an object of type unsigned char */
N#ifdef __FEATURE_SIGNED_CHAR
N  #define CHAR_MIN (-128)
N      /* minimum value for an object of type char */
N  #define CHAR_MAX 127
N      /* maximum value for an object of type char */
N#else
S  #define CHAR_MIN 0
S      /* minimum value for an object of type char */
S  #define CHAR_MAX 255
S      /* maximum value for an object of type char */
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X#if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S  #define _AEABI_PORTABLE
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
Sextern const int __aeabi_MB_LEN_MAX;
S#define MB_LEN_MAX (__aeabi_MB_LEN_MAX)
N#else
N#define MB_LEN_MAX 6
N#endif
N    /* maximum number of bytes in a multibyte character, */
N    /* for any supported locale */
N
N#define SHRT_MIN  (-0x8000)
N    /* minimum value for an object of type short int */
N#define SHRT_MAX  0x7fff
N    /* maximum value for an object of type short int */
N#define USHRT_MAX 65535
N    /* maximum value for an object of type unsigned short int */
N#define INT_MIN   (~0x7fffffff)  /* -2147483648 and 0x80000000 are unsigned */
N    /* minimum value for an object of type int */
N#define INT_MAX   0x7fffffff
N    /* maximum value for an object of type int */
N#define UINT_MAX  0xffffffffU
N    /* maximum value for an object of type unsigned int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define LONG_MIN  (~0x7fffffffffffffffL)
N#else
N  #define LONG_MIN  (~0x7fffffffL)
N#endif
N    /* minimum value for an object of type long int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define LONG_MAX  0x7fffffffffffffffL
N#else
N  #define LONG_MAX  0x7fffffffL
N#endif
N    /* maximum value for an object of type long int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define ULONG_MAX 0xffffffffffffffffUL
N#else
N  #define ULONG_MAX 0xffffffffUL
N#endif
N    /* maximum value for an object of type unsigned long int */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N  #define LLONG_MIN  (~0x7fffffffffffffffLL)
N      /* minimum value for an object of type long long int */
N  #define LLONG_MAX    0x7fffffffffffffffLL
N      /* maximum value for an object of type long long int */
N  #define ULLONG_MAX   0xffffffffffffffffULL
N      /* maximum value for an object of type unsigned long int */
N#endif
N
N#endif
N
N/* end of limits.h */
N
L 14 "..\..\..\M6P1(L)_Lua\lua\lapi.c" 2
N#include <stdarg.h>
L 1 "D:\Program_Files_x86\Keil_v5\ARM\ARMCC\Bin\..\include\stdarg.h" 1
N/* stdarg.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.8 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright (C) ARM Ltd., 1991-1999. All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdarg_h
N#define __stdarg_h
N#define __ARMCLIB_VERSION 5060009
N
N  #ifndef __STDARG_DECLS
N  #define __STDARG_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N/*
N * stdarg.h declares a type and defines macros for advancing through a
N * list of arguments whose number and types are not known to the called
N * function when it is translated. A function may be called with a variable
N * number of arguments of differing types. Its parameter list contains one or
N * more parameters. The rightmost parameter plays a special role in the access
N * mechanism, and will be called parmN in this description.
N */
N
N/* N.B. <stdio.h> is required to declare vfprintf() without defining      */
N/* va_list.  Clearly the type __va_list there must keep in step.          */
N#ifdef __clang__
S  typedef __builtin_va_list va_list;
S  #define va_start(ap, param) __builtin_va_start(ap, param)
S  #define va_end(ap)          __builtin_va_end(ap)
S  #define va_arg(ap, type)    __builtin_va_arg(ap, type)
S  #if __STDC_VERSION__ >= 199900L || __cplusplus >= 201103L || !defined(__STRICT_ANSI__)
S  #define va_copy(dest, src)  __builtin_va_copy(dest, src)
S  #endif
N#else
N  #ifdef __TARGET_ARCH_AARCH64
S    typedef struct __va_list {
S      void *__stack;
S      void *__gr_top;
S      void *__vr_top;
S      int __gr_offs;
S      int __vr_offs;
S    } va_list;
N  #else
N    typedef struct __va_list { void *__ap; } va_list;
N  #endif
N   /*
N    * an array type suitable for holding information needed by the macro va_arg
N    * and the function va_end. The called function shall declare a variable
N    * (referred to as ap) having type va_list. The variable ap may be passed as
N    * an argument to another function.
N    * Note: va_list is an array type so that when an object of that type
N    * is passed as an argument it gets passed by reference.
N    */
N  #define va_start(ap, parmN) __va_start(ap, parmN)
N
N   /*
N    * The va_start macro shall be executed before any access to the unnamed
N    * arguments. The parameter ap points to an object that has type va_list.
N    * The va_start macro initialises ap for subsequent use by va_arg and
N    * va_end. The parameter parmN is the identifier of the rightmost parameter
N    * in the variable parameter list in the function definition (the one just
N    * before the '...'). If the parameter parmN is declared with the register
N    * storage class an error is given.
N    * If parmN is a narrow type (char, short, float) an error is given in
N    * strict ANSI mode, or a warning otherwise.
N    * Returns: no value.
N    */
N  #define va_arg(ap, type) __va_arg(ap, type)
N
N   /*
N    * The va_arg macro expands to an expression that has the type and value of
N    * the next argument in the call. The parameter ap shall be the same as the
N    * va_list ap initialised by va_start. Each invocation of va_arg modifies
N    * ap so that successive arguments are returned in turn. The parameter
N    * 'type' is a type name such that the type of a pointer to an object that
N    * has the specified type can be obtained simply by postfixing a * to
N    * 'type'. If type is a narrow type, an error is given in strict ANSI
N    * mode, or a warning otherwise. If the type is an array or function type,
N    * an error is given.
N    * In non-strict ANSI mode, 'type' is allowed to be any expression.
N    * Returns: The first invocation of the va_arg macro after that of the
N    *          va_start macro returns the value of the argument after that
N    *          specified by parmN. Successive invocations return the values of
N    *          the remaining arguments in succession.
N    *          The result is cast to 'type', even if 'type' is narrow.
N    */
N
N#define __va_copy(dest, src) ((void)((dest) = (src)))
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N   /* va_copy is in C99 and non-strict C90 and non-strict C++
N    * __va_copy is always present.
N    */
N  #define va_copy(dest, src) ((void)((dest) = (src)))
N
N   /* The va_copy macro makes the va_list dest be a copy of
N    * the va_list src, as if the va_start macro had been applied
N    * to it followed by the same sequence of uses of the va_arg
N    * macro as had previously been used to reach the present state
N    * of src.
N    */
N#endif
N
N#define va_end(ap) __va_end(ap)
N   /*
N    * The va_end macro facilitates a normal return from the function whose
N    * variable argument list was referenced by the expansion of va_start that
N    * initialised the va_list ap. If the va_end macro is not invoked before
N    * the return, the behaviour is undefined.
N    * Returns: no value.
N    */
N#endif /* __clang__ */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N
N    #ifdef __GNUC__
S     /* be cooperative with glibc */
S     typedef __CLIBNS va_list __gnuc_va_list;
S     #define __GNUC_VA_LIST
S     #undef __need___va_list
N    #endif
N
N  #endif /* __STDARG_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDARG_NO_EXPORTS
S      using ::std::va_list;
S    #endif
N  #endif /* __cplusplus */
N#endif
N
N/* end of stdarg.h */
N
L 15 "..\..\..\M6P1(L)_Lua\lua\lapi.c" 2
N#include <string.h>
L 1 "D:\Program_Files_x86\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060009
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 16 "..\..\..\M6P1(L)_Lua\lua\lapi.c" 2
N
N#include "lua.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lua.h" 1
N/*
N** $Id: lua.h,v 1.343 2018/03/02 16:30:47 roberto Exp roberto $
N** Lua - A Scripting Language
N** Lua.org, PUC-Rio, Brazil (http://www.lua.org)
N** See Copyright Notice at the end of this file
N*/
N
N
N#ifndef lua_h
N#define lua_h
N
N#include <stdarg.h>
N#include <stddef.h>
L 1 "D:\Program_Files_x86\Keil_v5\ARM\ARMCC\Bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060009
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS ::std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N  /* unconditional in non-strict C for consistency of debug info */
N    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X    #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #else
N      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
N  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 201112L <= 199409L) || (0L && 201103L <= __cplusplus)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
S    #ifndef __STDDEF_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::ptrdiff_t;
S      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S        using ::std::max_align_t;
S      #endif
S    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 14 "..\..\..\M6P1(L)_Lua\lua\lua.h" 2
N
N
N#include "luaconf.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\luaconf.h" 1
N/*
N** $Id: luaconf.h,v 1.266 2018/03/02 18:31:51 roberto Exp roberto $
N** Configuration file for Lua
N** See Copyright Notice in lua.h
N*/
N
N
N#ifndef luaconf_h
N#define luaconf_h
N
N#include <limits.h>
N#include <stddef.h>
N
N
N/*
N** ===================================================================
N** Search for "@@" to find all configurable definitions.
N** ===================================================================
N*/
N
N
N/*
N** {====================================================================
N** System Configuration: macros to adapt (if needed) Lua to some
N** particular platform, for instance compiling it with 32-bit numbers or
N** restricting it to C89.
N** =====================================================================
N*/
N
N/*
N@@ LUA_32BITS enables Lua with 32-bit integers and 32-bit floats. You
N** can also define LUA_32BITS in the make file, but changing here you
N** ensure that all software connected to Lua will be compiled with the
N** same configuration.
N*/
N/* #define LUA_32BITS */
N
N
N/*
N@@ LUA_USE_C89 controls the use of non-ISO-C89 features.
N** Define it if you want Lua to avoid the use of a few C99 features
N** or Windows-specific features on Windows.
N*/
N/* #define LUA_USE_C89 */
N
N
N/*
N** By default, Lua on Windows use (some) specific Windows features
N*/
N#if !defined(LUA_USE_C89) && defined(_WIN32) && !defined(_WIN32_WCE)
X#if !0L && 0L && !0L
S#define LUA_USE_WINDOWS  /* enable goodies for regular Windows */
N#endif
N
N
N#if defined(LUA_USE_WINDOWS)
X#if 0L
S#define LUA_DL_DLL	/* enable support for DLL */
S#define LUA_USE_C89	/* broadly, Windows is C89 */
N#endif
N
N
N#if defined(LUA_USE_LINUX)
X#if 0L
S#define LUA_USE_POSIX
S#define LUA_USE_DLOPEN		/* needs an extra library: -ldl */
N#endif
N
N
N#if defined(LUA_USE_MACOSX)
X#if 0L
S#define LUA_USE_POSIX
S#define LUA_USE_DLOPEN		/* MacOS does not need -ldl */
N#endif
N
N
N/*
N@@ LUA_C89_NUMBERS ensures that Lua uses the largest types available for
N** C89 ('long' and 'double'); Windows always has '__int64', so it does
N** not need to use this case.
N*/
N#if defined(LUA_USE_C89) && !defined(LUA_USE_WINDOWS)
X#if 0L && !0L
S#define LUA_C89_NUMBERS
N#endif
N
N
N
N/*
N@@ LUAI_BITSINT defines the (minimum) number of bits in an 'int'.
N*/
N/* avoid undefined shifts */
N#if ((INT_MAX >> 15) >> 15) >= 1
X#if ((0x7fffffff >> 15) >> 15) >= 1
N#define LUAI_BITSINT	32
N#else
S/* 'int' always must have at least 16 bits */
S#define LUAI_BITSINT	16
N#endif
N
N
N/*
N@@ LUA_INT_TYPE defines the type for Lua integers.
N@@ LUA_FLOAT_TYPE defines the type for Lua floats.
N** Lua should work fine with any mix of these options (if supported
N** by your C compiler). The usual configurations are 64-bit integers
N** and 'double' (the default), 32-bit integers and 'float' (for
N** restricted platforms), and 'long'/'double' (for C compilers not
N** compliant with C99, which may not have support for 'long long').
N*/
N
N/* predefined options for LUA_INT_TYPE */
N#define LUA_INT_INT		1
N#define LUA_INT_LONG		2
N#define LUA_INT_LONGLONG	3
N
N/* predefined options for LUA_FLOAT_TYPE */
N#define LUA_FLOAT_FLOAT		1
N#define LUA_FLOAT_DOUBLE	2
N#define LUA_FLOAT_LONGDOUBLE	3
N
N#if defined(LUA_32BITS)		/* { */
X#if 0L		 
S/*
S** 32-bit integers and 'float'
S*/
S#if LUAI_BITSINT >= 32  /* use 'int' if big enough */
S#define LUA_INT_TYPE	LUA_INT_INT
S#else  /* otherwise use 'long' */
S#define LUA_INT_TYPE	LUA_INT_LONG
S#endif
S#define LUA_FLOAT_TYPE	LUA_FLOAT_FLOAT
S
S#elif defined(LUA_C89_NUMBERS)	/* }{ */
X#elif 0L	 
S/*
S** largest types available for C89 ('long' and 'double')
S*/
S#define LUA_INT_TYPE	LUA_INT_LONG
S#define LUA_FLOAT_TYPE	LUA_FLOAT_DOUBLE
S
N#endif				/* } */
N
N
N/*
N** default configuration for 64-bit Lua ('long long' and 'double')
N*/
N#if !defined(LUA_INT_TYPE)
X#if !0L
N#define LUA_INT_TYPE	LUA_INT_LONGLONG
N#endif
N
N#if !defined(LUA_FLOAT_TYPE)
X#if !0L
N#define LUA_FLOAT_TYPE	LUA_FLOAT_DOUBLE
N#endif
N
N/* }================================================================== */
N
N
N
N
N/*
N** {==================================================================
N** Configuration for Paths.
N** ===================================================================
N*/
N
N/*
N** LUA_PATH_SEP is the character that separates templates in a path.
N** LUA_PATH_MARK is the string that marks the substitution points in a
N** template.
N** LUA_EXEC_DIR in a Windows path is replaced by the executable's
N** directory.
N*/
N#define LUA_PATH_SEP            ";"
N#define LUA_PATH_MARK           "?"
N#define LUA_EXEC_DIR            "!"
N
N
N/*
N@@ LUA_PATH_DEFAULT is the default path that Lua uses to look for
N** Lua libraries.
N@@ LUA_CPATH_DEFAULT is the default path that Lua uses to look for
N** C libraries.
N** CHANGE them if your machine has a non-conventional directory
N** hierarchy or if you want to install your libraries in
N** non-conventional directories.
N*/
N#define LUA_VDIR	LUA_VERSION_MAJOR "." LUA_VERSION_MINOR
N#if defined(_WIN32)	/* { */
X#if 0L	 
S/*
S** In Windows, any exclamation mark ('!') in the path is replaced by the
S** path of the directory of the executable file of the current process.
S*/
S#define LUA_LDIR	"!\\lua\\"
S#define LUA_CDIR	"!\\"
S#define LUA_SHRDIR	"!\\..\\share\\lua\\" LUA_VDIR "\\"
S#define LUA_PATH_DEFAULT  \
S		LUA_LDIR"?.lua;"  LUA_LDIR"?\\init.lua;" \
S		LUA_CDIR"?.lua;"  LUA_CDIR"?\\init.lua;" \
S		LUA_SHRDIR"?.lua;" LUA_SHRDIR"?\\init.lua;" \
S		".\\?.lua;" ".\\?\\init.lua"
X#define LUA_PATH_DEFAULT  		LUA_LDIR"?.lua;"  LUA_LDIR"?\\init.lua;" 		LUA_CDIR"?.lua;"  LUA_CDIR"?\\init.lua;" 		LUA_SHRDIR"?.lua;" LUA_SHRDIR"?\\init.lua;" 		".\\?.lua;" ".\\?\\init.lua"
S#define LUA_CPATH_DEFAULT \
S		LUA_CDIR"?.dll;" \
S		LUA_CDIR"..\\lib\\lua\\" LUA_VDIR "\\?.dll;" \
S		LUA_CDIR"loadall.dll;" ".\\?.dll"
X#define LUA_CPATH_DEFAULT 		LUA_CDIR"?.dll;" 		LUA_CDIR"..\\lib\\lua\\" LUA_VDIR "\\?.dll;" 		LUA_CDIR"loadall.dll;" ".\\?.dll"
S
N#else			/* }{ */
N
N#define LUA_ROOT	"/usr/local/"
N#define LUA_LDIR	LUA_ROOT "share/lua/" LUA_VDIR "/"
N#define LUA_CDIR	LUA_ROOT "lib/lua/" LUA_VDIR "/"
N#define LUA_PATH_DEFAULT  \
N		LUA_LDIR"?.lua;"  LUA_LDIR"?/init.lua;" \
N		LUA_CDIR"?.lua;"  LUA_CDIR"?/init.lua;" \
N		"./?.lua;" "./?/init.lua"
X#define LUA_PATH_DEFAULT  		LUA_LDIR"?.lua;"  LUA_LDIR"?/init.lua;" 		LUA_CDIR"?.lua;"  LUA_CDIR"?/init.lua;" 		"./?.lua;" "./?/init.lua"
N#define LUA_CPATH_DEFAULT \
N		LUA_CDIR"?.so;" LUA_CDIR"loadall.so;" "./?.so"
X#define LUA_CPATH_DEFAULT 		LUA_CDIR"?.so;" LUA_CDIR"loadall.so;" "./?.so"
N#endif			/* } */
N
N
N/*
N@@ LUA_DIRSEP is the directory separator (for submodules).
N** CHANGE it if your machine does not use "/" as the directory separator
N** and is not Windows. (On Windows Lua automatically uses "\".)
N*/
N#if defined(_WIN32)
X#if 0L
S#define LUA_DIRSEP	"\\"
N#else
N#define LUA_DIRSEP	"/"
N#endif
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Marks for exported symbols in the C code
N** ===================================================================
N*/
N
N/*
N@@ LUA_API is a mark for all core API functions.
N@@ LUALIB_API is a mark for all auxiliary library functions.
N@@ LUAMOD_API is a mark for all standard library opening functions.
N** CHANGE them if you need to define those functions in some special way.
N** For instance, if you want to create one Windows DLL with the core and
N** the libraries, you may want to use the following definition (define
N** LUA_BUILD_AS_DLL to get it).
N*/
N#if defined(LUA_BUILD_AS_DLL)	/* { */
X#if 0L	 
S
S#if defined(LUA_CORE) || defined(LUA_LIB)	/* { */
S#define LUA_API __declspec(dllexport)
S#else						/* }{ */
S#define LUA_API __declspec(dllimport)
S#endif						/* } */
S
N#else				/* }{ */
N
N#define LUA_API		extern
N
N#endif				/* } */
N
N
N/* more often than not the libs go together with the core */
N#define LUALIB_API	LUA_API
N#define LUAMOD_API	LUALIB_API
N
N
N/*
N@@ LUAI_FUNC is a mark for all extern functions that are not to be
N** exported to outside modules.
N@@ LUAI_DDEF and LUAI_DDEC are marks for all extern (const) variables
N** that are not to be exported to outside modules (LUAI_DDEF for
N** definitions and LUAI_DDEC for declarations).
N** CHANGE them if you need to mark them in some special way. Elf/gcc
N** (versions 3.2 and later) mark them as "hidden" to optimize access
N** when Lua is compiled as a shared library. Not all elf targets support
N** this attribute. Unfortunately, gcc does not offer a way to check
N** whether the target offers that support, and those without support
N** give a warning about it. To avoid these warnings, change to the
N** default definition.
N*/
N#if defined(__GNUC__) && ((__GNUC__*100 + __GNUC_MINOR__) >= 302) && \
N    defined(__ELF__)		/* { */
X#if 0L && ((__GNUC__*100 + __GNUC_MINOR__) >= 302) &&     0L		 
S#define LUAI_FUNC	__attribute__((visibility("hidden"))) extern
N#else				/* }{ */
N#define LUAI_FUNC	extern
N#endif				/* } */
N
N#define LUAI_DDEC	LUAI_FUNC
N#define LUAI_DDEF	/* empty */
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Compatibility with previous versions
N** ===================================================================
N*/
N
N/*
N@@ LUA_COMPAT_5_3 controls other macros for compatibility with Lua 5.2.
N** You can define it to get all options, or change specific options
N** to fit your specific needs.
N*/
N#if defined(LUA_COMPAT_5_3)	/* { */
X#if 0L	 
S
S/*
S@@ LUA_COMPAT_MATHLIB controls the presence of several deprecated
S** functions in the mathematical library.
S** (These functions were already officially removed in 5.3, but
S** nevertheless they are available by default there.)
S*/
S#define LUA_COMPAT_MATHLIB
S
S/*
S@@ LUA_COMPAT_APIINTCASTS controls the presence of macros for
S** manipulating other integer types (lua_pushunsigned, lua_tounsigned,
S** luaL_checkint, luaL_checklong, etc.)
S*/
S#define LUA_COMPAT_APIINTCASTS
S
N#endif				/* } */
N
N
N
N/*
N@@ The following macros supply trivial compatibility for some
N** changes in the API. The macros themselves document how to
N** change your code to avoid using them.
N*/
N#define lua_strlen(L,i)		lua_rawlen(L, (i))
N
N#define lua_objlen(L,i)		lua_rawlen(L, (i))
N
N#define lua_equal(L,idx1,idx2)		lua_compare(L,(idx1),(idx2),LUA_OPEQ)
N#define lua_lessthan(L,idx1,idx2)	lua_compare(L,(idx1),(idx2),LUA_OPLT)
N
N/* }================================================================== */
N
N
N
N/*
N** {==================================================================
N** Configuration for Numbers.
N** Change these definitions if no predefined LUA_FLOAT_* / LUA_INT_*
N** satisfy your needs.
N** ===================================================================
N*/
N
N/*
N@@ LUA_NUMBER is the floating-point type used by Lua.
N@@ LUAI_UACNUMBER is the result of a 'default argument promotion'
N@@ over a floating number.
N@@ l_mathlim(x) corrects limit name 'x' to the proper float type
N** by prefixing it with one of FLT/DBL/LDBL.
N@@ LUA_NUMBER_FRMLEN is the length modifier for writing floats.
N@@ LUA_NUMBER_FMT is the format for writing floats.
N@@ lua_number2str converts a float to a string.
N@@ l_mathop allows the addition of an 'l' or 'f' to all math operations.
N@@ l_floor takes the floor of a float.
N@@ lua_str2number converts a decimal numeric string to a number.
N*/
N
N
N/* The following definitions are good for most cases here */
N
N#define l_floor(x)		(l_mathop(floor)(x))
N
N#define lua_number2str(s,sz,n)  \
N	l_sprintf((s), sz, LUA_NUMBER_FMT, (LUAI_UACNUMBER)(n))
X#define lua_number2str(s,sz,n)  	l_sprintf((s), sz, LUA_NUMBER_FMT, (LUAI_UACNUMBER)(n))
N
N/*
N@@ lua_numbertointeger converts a float number with an integral value
N** to an integer, or returns 0 if float is not within the range of
N** a lua_Integer.  (The range comparisons are tricky because of
N** rounding. The tests here assume a two-complement representation,
N** where MININTEGER always has an exact representation as a float;
N** MAXINTEGER may not have one, and therefore its conversion to float
N** may have an ill-defined value.)
N*/
N#define lua_numbertointeger(n,p) \
N  ((n) >= (LUA_NUMBER)(LUA_MININTEGER) && \
N   (n) < -(LUA_NUMBER)(LUA_MININTEGER) && \
N      (*(p) = (LUA_INTEGER)(n), 1))
X#define lua_numbertointeger(n,p)   ((n) >= (LUA_NUMBER)(LUA_MININTEGER) &&    (n) < -(LUA_NUMBER)(LUA_MININTEGER) &&       (*(p) = (LUA_INTEGER)(n), 1))
N
N
N/* now the variable definitions */
N
N#if LUA_FLOAT_TYPE == LUA_FLOAT_FLOAT		/* { single float */
X#if 2 == 1		 
S
S#define LUA_NUMBER	float
S
S#define l_mathlim(n)		(FLT_##n)
S
S#define LUAI_UACNUMBER	double
S
S#define LUA_NUMBER_FRMLEN	""
S#define LUA_NUMBER_FMT		"%.7g"
S
S#define l_mathop(op)		op##f
S
S#define lua_str2number(s,p)	strtof((s), (p))
S
S
S#elif LUA_FLOAT_TYPE == LUA_FLOAT_LONGDOUBLE	/* }{ long double */
X#elif 2 == 3	 
S
S#define LUA_NUMBER	long double
S
S#define l_mathlim(n)		(LDBL_##n)
S
S#define LUAI_UACNUMBER	long double
S
S#define LUA_NUMBER_FRMLEN	"L"
S#define LUA_NUMBER_FMT		"%.19Lg"
S
S#define l_mathop(op)		op##l
S
S#define lua_str2number(s,p)	strtold((s), (p))
S
N#elif LUA_FLOAT_TYPE == LUA_FLOAT_DOUBLE	/* }{ double */
X#elif 2 == 2	 
N
N#define LUA_NUMBER	double
N
N#define l_mathlim(n)		(DBL_##n)
N
N#define LUAI_UACNUMBER	double
N
N#define LUA_NUMBER_FRMLEN	""
N#define LUA_NUMBER_FMT		"%.14g"
N
N#define l_mathop(op)		op
N
N#define lua_str2number(s,p)	strtod((s), (p))
N
N#else						/* }{ */
S
S#error "numeric float type not defined"
S
N#endif					/* } */
N
N
N
N/*
N@@ LUA_INTEGER is the integer type used by Lua.
N**
N@@ LUA_UNSIGNED is the unsigned version of LUA_INTEGER.
N**
N@@ LUAI_UACINT is the result of a 'default argument promotion'
N@@ over a lUA_INTEGER.
N@@ LUA_INTEGER_FRMLEN is the length modifier for reading/writing integers.
N@@ LUA_INTEGER_FMT is the format for writing integers.
N@@ LUA_MAXINTEGER is the maximum value for a LUA_INTEGER.
N@@ LUA_MININTEGER is the minimum value for a LUA_INTEGER.
N@@ LUA_MAXUNSIGNED is the maximum value for a LUA_UNSIGNED.
N@@ lua_integer2str converts an integer to a string.
N*/
N
N
N/* The following definitions are good for most cases here */
N
N#define LUA_INTEGER_FMT		"%" LUA_INTEGER_FRMLEN "d"
N
N#define LUAI_UACINT		LUA_INTEGER
N
N#define lua_integer2str(s,sz,n)  \
N	l_sprintf((s), sz, LUA_INTEGER_FMT, (LUAI_UACINT)(n))
X#define lua_integer2str(s,sz,n)  	l_sprintf((s), sz, LUA_INTEGER_FMT, (LUAI_UACINT)(n))
N
N/*
N** use LUAI_UACINT here to avoid problems with promotions (which
N** can turn a comparison between unsigneds into a signed comparison)
N*/
N#define LUA_UNSIGNED		unsigned LUAI_UACINT
N
N#define LUA_MAXUNSIGNED		(~(lua_Unsigned)0)
N
N
N/* now the variable definitions */
N
N#if LUA_INT_TYPE == LUA_INT_INT		/* { int */
X#if 3 == 1		 
S
S#define LUA_INTEGER		int
S#define LUA_INTEGER_FRMLEN	""
S
S#define LUA_MAXINTEGER		INT_MAX
S#define LUA_MININTEGER		INT_MIN
S
S#elif LUA_INT_TYPE == LUA_INT_LONG	/* }{ long */
X#elif 3 == 2	 
S
S#define LUA_INTEGER		long
S#define LUA_INTEGER_FRMLEN	"l"
S
S#define LUA_MAXINTEGER		LONG_MAX
S#define LUA_MININTEGER		LONG_MIN
S
N#elif LUA_INT_TYPE == LUA_INT_LONGLONG	/* }{ long long */
X#elif 3 == 3	 
N
N/* use presence of macro LLONG_MAX as proxy for C99 compliance */
N#if defined(LLONG_MAX)		/* { */
X#if 1L		 
N/* use ISO C99 stuff */
N
N#define LUA_INTEGER		long long
N#define LUA_INTEGER_FRMLEN	"ll"
N
N#define LUA_MAXINTEGER		LLONG_MAX
N#define LUA_MININTEGER		LLONG_MIN
N
N#elif defined(LUA_USE_WINDOWS) /* }{ */
S/* in Windows, can use specific Windows types */
S
S#define LUA_INTEGER		__int64
S#define LUA_INTEGER_FRMLEN	"I64"
S
S#define LUA_MAXINTEGER		_I64_MAX
S#define LUA_MININTEGER		_I64_MIN
S
S#else				/* }{ */
S
S#error "Compiler does not support 'long long'. Use option '-DLUA_32BITS' \
S  or '-DLUA_C89_NUMBERS' (see file 'luaconf.h' for details)"
X#error "Compiler does not support 'long long'. Use option '-DLUA_32BITS'   or '-DLUA_C89_NUMBERS' (see file 'luaconf.h' for details)"
S
N#endif				/* } */
N
N#else				/* }{ */
S
S#error "numeric integer type not defined"
S
N#endif				/* } */
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Dependencies with C99 and other C details
N** ===================================================================
N*/
N
N/*
N@@ l_sprintf is equivalent to 'snprintf' or 'sprintf' in C89.
N** (All uses in Lua have only one format item.)
N*/
N#if !defined(LUA_USE_C89)
X#if !0L
N#define l_sprintf(s,sz,f,i)	snprintf(s,sz,f,i)
N#else
S#define l_sprintf(s,sz,f,i)	((void)(sz), sprintf(s,f,i))
N#endif
N
N
N/*
N@@ lua_strx2number converts a hexadecimal numeric string to a number.
N** In C99, 'strtod' does that conversion. Otherwise, you can
N** leave 'lua_strx2number' undefined and Lua will provide its own
N** implementation.
N*/
N#if !defined(LUA_USE_C89)
X#if !0L
N#define lua_strx2number(s,p)		lua_str2number(s,p)
N#endif
N
N
N/*
N@@ lua_pointer2str converts a pointer to a readable string in a
N** non-specified way.
N*/
N#define lua_pointer2str(buff,sz,p)	l_sprintf(buff,sz,"%p",p)
N
N
N/*
N@@ lua_number2strx converts a float to a hexadecimal numeric string.
N** In C99, 'sprintf' (with format specifiers '%a'/'%A') does that.
N** Otherwise, you can leave 'lua_number2strx' undefined and Lua will
N** provide its own implementation.
N*/
N#if !defined(LUA_USE_C89)
X#if !0L
N#define lua_number2strx(L,b,sz,f,n)  \
N	((void)L, l_sprintf(b,sz,f,(LUAI_UACNUMBER)(n)))
X#define lua_number2strx(L,b,sz,f,n)  	((void)L, l_sprintf(b,sz,f,(LUAI_UACNUMBER)(n)))
N#endif
N
N
N/*
N** 'strtof' and 'opf' variants for math functions are not valid in
N** C89. Otherwise, the macro 'HUGE_VALF' is a good proxy for testing the
N** availability of these variants. ('math.h' is already included in
N** all files that use these macros.)
N*/
N#if defined(LUA_USE_C89) || (defined(HUGE_VAL) && !defined(HUGE_VALF))
X#if 0L || (0L && !0L)
S#undef l_mathop  /* variants not available */
S#undef lua_str2number
S#define l_mathop(op)		(lua_Number)op  /* no variant */
S#define lua_str2number(s,p)	((lua_Number)strtod((s), (p)))
N#endif
N
N
N/*
N@@ LUA_KCONTEXT is the type of the context ('ctx') for continuation
N** functions.  It must be a numerical type; Lua will use 'intptr_t' if
N** available, otherwise it will use 'ptrdiff_t' (the nearest thing to
N** 'intptr_t' in C89)
N*/
N#define LUA_KCONTEXT	ptrdiff_t
N
N#if !defined(LUA_USE_C89) && defined(__STDC_VERSION__) && \
N    __STDC_VERSION__ >= 199901L
X#if !0L && 1L &&     199409L >= 199901L
S#include <stdint.h>
S#if defined(INTPTR_MAX)  /* even in C99 this type is optional */
S#undef LUA_KCONTEXT
S#define LUA_KCONTEXT	intptr_t
S#endif
N#endif
N
N
N/*
N@@ lua_getlocaledecpoint gets the locale "radix character" (decimal point).
N** Change that if you do not want to use C locales. (Code using this
N** macro must include header 'locale.h'.)
N*/
N#if !defined(lua_getlocaledecpoint)
X#if !0L
N#define lua_getlocaledecpoint()		(localeconv()->decimal_point[0])
N#endif
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Language Variations
N** =====================================================================
N*/
N
N/*
N@@ LUA_NOCVTN2S/LUA_NOCVTS2N control how Lua performs some
N** coercions. Define LUA_NOCVTN2S to turn off automatic coercion from
N** numbers to strings. Define LUA_NOCVTS2N to turn off automatic
N** coercion from strings to numbers.
N*/
N/* #define LUA_NOCVTN2S */
N/* #define LUA_NOCVTS2N */
N
N
N/*
N@@ LUA_USE_APICHECK turns on several consistency checks on the C API.
N** Define it as a help when debugging C code.
N*/
N#if defined(LUA_USE_APICHECK)
X#if 0L
S#include <assert.h>
S#define luai_apicheck(l,e)	assert(e)
N#endif
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Macros that affect the API and must be stable (that is, must be the
N** same when you compile Lua and when you compile code that links to
N** Lua). You probably do not want/need to change them.
N** =====================================================================
N*/
N
N/*
N@@ LUAI_MAXSTACK limits the size of the Lua stack.
N** CHANGE it if you need a different limit. This limit is arbitrary;
N** its only purpose is to stop Lua from consuming unlimited stack
N** space (and to reserve some numbers for pseudo-indices).
N** (It must fit into max(size_t)/32.)
N*/
N#if LUAI_BITSINT >= 32
X#if 32 >= 32
N#define LUAI_MAXSTACK		1000000
N#else
S#define LUAI_MAXSTACK		15000
N#endif
N
N
N/*
N@@ LUA_EXTRASPACE defines the size of a raw memory area associated with
N** a Lua state with very fast access.
N** CHANGE it if you need a different size.
N*/
N#define LUA_EXTRASPACE		(sizeof(void *))
N
N
N/*
N@@ LUA_IDSIZE gives the maximum size for the description of the source
N@@ of a function in debug information.
N** CHANGE it if you want a different size.
N*/
N#define LUA_IDSIZE	60
N
N
N/*
N@@ LUAL_BUFFERSIZE is the buffer size used by the lauxlib buffer system.
N** CHANGE it if it uses too much C-stack space. (For long double,
N** 'string.format("%.99f", -1e4932)' needs 5034 bytes, so a
N** smaller buffer would force a memory allocation for each call to
N** 'string.format'.)
N*/
N#if LUA_FLOAT_TYPE == LUA_FLOAT_LONGDOUBLE
X#if 2 == 3
S#define LUAL_BUFFERSIZE		8192
N#else
N#define LUAL_BUFFERSIZE   ((int)(0x80 * sizeof(void*) * sizeof(lua_Integer)))
N#endif
N
N/*
N@@ LUAI_MAXALIGN defines fields that, when used in a union, ensure
N** "maximum" alignment for the other items in that union.
N*/
N#define LUAI_MAXALIGN  lua_Number n; double u; void *s; lua_Integer i; long l
N
N/* }================================================================== */
N
N
N/*
N@@ LUA_QL describes how error messages quote program elements.
N** Lua does not use these macros anymore; they are here for
N** compatibility only.
N*/
N#define LUA_QL(x)	"'" x "'"
N#define LUA_QS		LUA_QL("%s")
N
N
N
N
N/* =================================================================== */
N
N/*
N** Local configuration. You can use this space to add your redefinitions
N** without modifying the main part of the file.
N*/
N
N
N
N
N
N#endif
N
L 17 "..\..\..\M6P1(L)_Lua\lua\lua.h" 2
N
N
N#define LUA_VERSION_MAJOR	"5"
N#define LUA_VERSION_MINOR	"4"
N#define LUA_VERSION_NUM		504
N#define LUA_VERSION_RELEASE	"0"
N
N#define LUA_VERSION	"Lua " LUA_VERSION_MAJOR "." LUA_VERSION_MINOR
N#define LUA_RELEASE	LUA_VERSION "." LUA_VERSION_RELEASE
N#define LUA_COPYRIGHT	LUA_RELEASE "  Copyright (C) 1994-2018 Lua.org, PUC-Rio"
N#define LUA_AUTHORS	"R. Ierusalimschy, L. H. de Figueiredo, W. Celes"
N
N
N/* mark for precompiled code ('<esc>Lua') */
N#define LUA_SIGNATURE	"\x1bLua"
N
N/* option for multiple returns in 'lua_pcall' and 'lua_call' */
N#define LUA_MULTRET	(-1)
N
N
N/*
N** Pseudo-indices
N** (-LUAI_MAXSTACK is the minimum valid index; we keep some free empty
N** space after that to help overflow detection)
N*/
N#define LUA_REGISTRYINDEX	(-LUAI_MAXSTACK - 1000)
N#define lua_upvalueindex(i)	(LUA_REGISTRYINDEX - (i))
N
N
N/* thread status */
N#define LUA_OK		0
N#define LUA_YIELD	1
N#define LUA_ERRRUN	2
N#define LUA_ERRSYNTAX	3
N#define LUA_ERRMEM	4
N#define LUA_ERRGCMM	5
N#define LUA_ERRERR	6
N
N
Ntypedef struct lua_State lua_State;
N
N
N/*
N** basic types
N*/
N#define LUA_TNONE		(-1)
N
N#define LUA_TNIL		0
N#define LUA_TBOOLEAN		1
N#define LUA_TLIGHTUSERDATA	2
N#define LUA_TNUMBER		3
N#define LUA_TSTRING		4
N#define LUA_TTABLE		5
N#define LUA_TFUNCTION		6
N#define LUA_TUSERDATA		7
N#define LUA_TTHREAD		8
N
N#define LUA_NUMTAGS		9
N
N
N
N/* minimum Lua stack available to a C function */
N#define LUA_MINSTACK	20
N
N
N/* predefined values in the registry */
N#define LUA_RIDX_MAINTHREAD	1
N#define LUA_RIDX_GLOBALS	2
N#define LUA_RIDX_LAST		LUA_RIDX_GLOBALS
N
N
N/* type of numbers in Lua */
Ntypedef LUA_NUMBER lua_Number;
Xtypedef double lua_Number;
N
N
N/* type for integer functions */
Ntypedef LUA_INTEGER lua_Integer;
Xtypedef long long lua_Integer;
N
N/* unsigned integer type */
Ntypedef LUA_UNSIGNED lua_Unsigned;
Xtypedef unsigned long long lua_Unsigned;
N
N/* type for continuation-function contexts */
Ntypedef LUA_KCONTEXT lua_KContext;
Xtypedef ptrdiff_t lua_KContext;
N
N
N/*
N** Type for C functions registered with Lua
N*/
Ntypedef int (*lua_CFunction) (lua_State *L);
N
N/*
N** Type for continuation functions
N*/
Ntypedef int (*lua_KFunction) (lua_State *L, int status, lua_KContext ctx);
N
N
N/*
N** Type for functions that read/write blocks when loading/dumping Lua chunks
N*/
Ntypedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);
N
Ntypedef int (*lua_Writer) (lua_State *L, const void *p, size_t sz, void *ud);
N
N
N/*
N** Type for memory-allocation functions
N*/
Ntypedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);
N
N
N
N/*
N** generic extra include file
N*/
N#if defined(LUA_USER_H)
X#if 0L
S#include LUA_USER_H
N#endif
N
N
N/*
N** RCS ident string
N*/
Nextern const char lua_ident[];
N
N
N/*
N** state manipulation
N*/
NLUA_API lua_State *(lua_newstate) (lua_Alloc f, void *ud);
Xextern lua_State *(lua_newstate) (lua_Alloc f, void *ud);
NLUA_API void       (lua_close) (lua_State *L);
Xextern void       (lua_close) (lua_State *L);
NLUA_API lua_State *(lua_newthread) (lua_State *L);
Xextern lua_State *(lua_newthread) (lua_State *L);
N
NLUA_API lua_CFunction (lua_atpanic) (lua_State *L, lua_CFunction panicf);
Xextern lua_CFunction (lua_atpanic) (lua_State *L, lua_CFunction panicf);
N
N
NLUA_API const lua_Number *(lua_version) (lua_State *L);
Xextern const lua_Number *(lua_version) (lua_State *L);
N
N
N/*
N** basic stack manipulation
N*/
NLUA_API int   (lua_absindex) (lua_State *L, int idx);
Xextern int   (lua_absindex) (lua_State *L, int idx);
NLUA_API int   (lua_gettop) (lua_State *L);
Xextern int   (lua_gettop) (lua_State *L);
NLUA_API void  (lua_settop) (lua_State *L, int idx);
Xextern void  (lua_settop) (lua_State *L, int idx);
NLUA_API void  (lua_pushvalue) (lua_State *L, int idx);
Xextern void  (lua_pushvalue) (lua_State *L, int idx);
NLUA_API void  (lua_rotate) (lua_State *L, int idx, int n);
Xextern void  (lua_rotate) (lua_State *L, int idx, int n);
NLUA_API void  (lua_copy) (lua_State *L, int fromidx, int toidx);
Xextern void  (lua_copy) (lua_State *L, int fromidx, int toidx);
NLUA_API int   (lua_checkstack) (lua_State *L, int n);
Xextern int   (lua_checkstack) (lua_State *L, int n);
N
NLUA_API void  (lua_xmove) (lua_State *from, lua_State *to, int n);
Xextern void  (lua_xmove) (lua_State *from, lua_State *to, int n);
N
N
N/*
N** access functions (stack -> C)
N*/
N
NLUA_API int             (lua_isnumber) (lua_State *L, int idx);
Xextern int             (lua_isnumber) (lua_State *L, int idx);
NLUA_API int             (lua_isstring) (lua_State *L, int idx);
Xextern int             (lua_isstring) (lua_State *L, int idx);
NLUA_API int             (lua_iscfunction) (lua_State *L, int idx);
Xextern int             (lua_iscfunction) (lua_State *L, int idx);
NLUA_API int             (lua_isinteger) (lua_State *L, int idx);
Xextern int             (lua_isinteger) (lua_State *L, int idx);
NLUA_API int             (lua_isuserdata) (lua_State *L, int idx);
Xextern int             (lua_isuserdata) (lua_State *L, int idx);
NLUA_API int             (lua_type) (lua_State *L, int idx);
Xextern int             (lua_type) (lua_State *L, int idx);
NLUA_API const char     *(lua_typename) (lua_State *L, int tp);
Xextern const char     *(lua_typename) (lua_State *L, int tp);
N
NLUA_API lua_Number      (lua_tonumberx) (lua_State *L, int idx, int *isnum);
Xextern lua_Number      (lua_tonumberx) (lua_State *L, int idx, int *isnum);
NLUA_API lua_Integer     (lua_tointegerx) (lua_State *L, int idx, int *isnum);
Xextern lua_Integer     (lua_tointegerx) (lua_State *L, int idx, int *isnum);
NLUA_API int             (lua_toboolean) (lua_State *L, int idx);
Xextern int             (lua_toboolean) (lua_State *L, int idx);
NLUA_API const char     *(lua_tolstring) (lua_State *L, int idx, size_t *len);
Xextern const char     *(lua_tolstring) (lua_State *L, int idx, size_t *len);
NLUA_API lua_Unsigned    (lua_rawlen) (lua_State *L, int idx);
Xextern lua_Unsigned    (lua_rawlen) (lua_State *L, int idx);
NLUA_API lua_CFunction   (lua_tocfunction) (lua_State *L, int idx);
Xextern lua_CFunction   (lua_tocfunction) (lua_State *L, int idx);
NLUA_API void	       *(lua_touserdata) (lua_State *L, int idx);
Xextern void	       *(lua_touserdata) (lua_State *L, int idx);
NLUA_API lua_State      *(lua_tothread) (lua_State *L, int idx);
Xextern lua_State      *(lua_tothread) (lua_State *L, int idx);
NLUA_API const void     *(lua_topointer) (lua_State *L, int idx);
Xextern const void     *(lua_topointer) (lua_State *L, int idx);
N
N
N/*
N** Comparison and arithmetic functions
N*/
N
N#define LUA_OPADD	0	/* ORDER TM, ORDER OP */
N#define LUA_OPSUB	1
N#define LUA_OPMUL	2
N#define LUA_OPMOD	3
N#define LUA_OPPOW	4
N#define LUA_OPDIV	5
N#define LUA_OPIDIV	6
N#define LUA_OPBAND	7
N#define LUA_OPBOR	8
N#define LUA_OPBXOR	9
N#define LUA_OPSHL	10
N#define LUA_OPSHR	11
N#define LUA_OPUNM	12
N#define LUA_OPBNOT	13
N
NLUA_API void  (lua_arith) (lua_State *L, int op);
Xextern void  (lua_arith) (lua_State *L, int op);
N
N#define LUA_OPEQ	0
N#define LUA_OPLT	1
N#define LUA_OPLE	2
N
NLUA_API int   (lua_rawequal) (lua_State *L, int idx1, int idx2);
Xextern int   (lua_rawequal) (lua_State *L, int idx1, int idx2);
NLUA_API int   (lua_compare) (lua_State *L, int idx1, int idx2, int op);
Xextern int   (lua_compare) (lua_State *L, int idx1, int idx2, int op);
N
N
N/*
N** push functions (C -> stack)
N*/
NLUA_API void        (lua_pushnil) (lua_State *L);
Xextern void        (lua_pushnil) (lua_State *L);
NLUA_API void        (lua_pushnumber) (lua_State *L, lua_Number n);
Xextern void        (lua_pushnumber) (lua_State *L, lua_Number n);
NLUA_API void        (lua_pushinteger) (lua_State *L, lua_Integer n);
Xextern void        (lua_pushinteger) (lua_State *L, lua_Integer n);
NLUA_API const char *(lua_pushlstring) (lua_State *L, const char *s, size_t len);
Xextern const char *(lua_pushlstring) (lua_State *L, const char *s, size_t len);
NLUA_API const char *(lua_pushstring) (lua_State *L, const char *s);
Xextern const char *(lua_pushstring) (lua_State *L, const char *s);
NLUA_API const char *(lua_pushvfstring) (lua_State *L, const char *fmt,
Xextern const char *(lua_pushvfstring) (lua_State *L, const char *fmt,
N                                                      va_list argp);
NLUA_API const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);
Xextern const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);
NLUA_API void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);
Xextern void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);
NLUA_API void  (lua_pushboolean) (lua_State *L, int b);
Xextern void  (lua_pushboolean) (lua_State *L, int b);
NLUA_API void  (lua_pushlightuserdata) (lua_State *L, void *p);
Xextern void  (lua_pushlightuserdata) (lua_State *L, void *p);
NLUA_API int   (lua_pushthread) (lua_State *L);
Xextern int   (lua_pushthread) (lua_State *L);
N
N
N/*
N** get functions (Lua -> stack)
N*/
NLUA_API int (lua_getglobal) (lua_State *L, const char *name);
Xextern int (lua_getglobal) (lua_State *L, const char *name);
NLUA_API int (lua_gettable) (lua_State *L, int idx);
Xextern int (lua_gettable) (lua_State *L, int idx);
NLUA_API int (lua_getfield) (lua_State *L, int idx, const char *k);
Xextern int (lua_getfield) (lua_State *L, int idx, const char *k);
NLUA_API int (lua_geti) (lua_State *L, int idx, lua_Integer n);
Xextern int (lua_geti) (lua_State *L, int idx, lua_Integer n);
NLUA_API int (lua_rawget) (lua_State *L, int idx);
Xextern int (lua_rawget) (lua_State *L, int idx);
NLUA_API int (lua_rawgeti) (lua_State *L, int idx, lua_Integer n);
Xextern int (lua_rawgeti) (lua_State *L, int idx, lua_Integer n);
NLUA_API int (lua_rawgetp) (lua_State *L, int idx, const void *p);
Xextern int (lua_rawgetp) (lua_State *L, int idx, const void *p);
N
NLUA_API void  (lua_createtable) (lua_State *L, int narr, int nrec);
Xextern void  (lua_createtable) (lua_State *L, int narr, int nrec);
NLUA_API void *(lua_newuserdatauv) (lua_State *L, size_t sz, int nuvalue);
Xextern void *(lua_newuserdatauv) (lua_State *L, size_t sz, int nuvalue);
NLUA_API int   (lua_getmetatable) (lua_State *L, int objindex);
Xextern int   (lua_getmetatable) (lua_State *L, int objindex);
NLUA_API int  (lua_getiuservalue) (lua_State *L, int idx, int n);
Xextern int  (lua_getiuservalue) (lua_State *L, int idx, int n);
N
N
N/*
N** set functions (stack -> Lua)
N*/
NLUA_API void  (lua_setglobal) (lua_State *L, const char *name);
Xextern void  (lua_setglobal) (lua_State *L, const char *name);
NLUA_API void  (lua_settable) (lua_State *L, int idx);
Xextern void  (lua_settable) (lua_State *L, int idx);
NLUA_API void  (lua_setfield) (lua_State *L, int idx, const char *k);
Xextern void  (lua_setfield) (lua_State *L, int idx, const char *k);
NLUA_API void  (lua_seti) (lua_State *L, int idx, lua_Integer n);
Xextern void  (lua_seti) (lua_State *L, int idx, lua_Integer n);
NLUA_API void  (lua_rawset) (lua_State *L, int idx);
Xextern void  (lua_rawset) (lua_State *L, int idx);
NLUA_API void  (lua_rawseti) (lua_State *L, int idx, lua_Integer n);
Xextern void  (lua_rawseti) (lua_State *L, int idx, lua_Integer n);
NLUA_API void  (lua_rawsetp) (lua_State *L, int idx, const void *p);
Xextern void  (lua_rawsetp) (lua_State *L, int idx, const void *p);
NLUA_API int   (lua_setmetatable) (lua_State *L, int objindex);
Xextern int   (lua_setmetatable) (lua_State *L, int objindex);
NLUA_API int   (lua_setiuservalue) (lua_State *L, int idx, int n);
Xextern int   (lua_setiuservalue) (lua_State *L, int idx, int n);
N
N
N/*
N** 'load' and 'call' functions (load and run Lua code)
N*/
NLUA_API void  (lua_callk) (lua_State *L, int nargs, int nresults,
Xextern void  (lua_callk) (lua_State *L, int nargs, int nresults,
N                           lua_KContext ctx, lua_KFunction k);
N#define lua_call(L,n,r)		lua_callk(L, (n), (r), 0, NULL)
N
NLUA_API int   (lua_pcallk) (lua_State *L, int nargs, int nresults, int errfunc,
Xextern int   (lua_pcallk) (lua_State *L, int nargs, int nresults, int errfunc,
N                            lua_KContext ctx, lua_KFunction k);
N#define lua_pcall(L,n,r,f)	lua_pcallk(L, (n), (r), (f), 0, NULL)
N
NLUA_API int   (lua_load) (lua_State *L, lua_Reader reader, void *dt,
Xextern int   (lua_load) (lua_State *L, lua_Reader reader, void *dt,
N                          const char *chunkname, const char *mode);
N
NLUA_API int (lua_dump) (lua_State *L, lua_Writer writer, void *data, int strip);
Xextern int (lua_dump) (lua_State *L, lua_Writer writer, void *data, int strip);
N
N
N/*
N** coroutine functions
N*/
NLUA_API int  (lua_yieldk)     (lua_State *L, int nresults, lua_KContext ctx,
Xextern int  (lua_yieldk)     (lua_State *L, int nresults, lua_KContext ctx,
N                               lua_KFunction k);
NLUA_API int  (lua_resume)     (lua_State *L, lua_State *from, int narg,
Xextern int  (lua_resume)     (lua_State *L, lua_State *from, int narg,
N                               int *nres);
NLUA_API int  (lua_status)     (lua_State *L);
Xextern int  (lua_status)     (lua_State *L);
NLUA_API int (lua_isyieldable) (lua_State *L);
Xextern int (lua_isyieldable) (lua_State *L);
N
N#define lua_yield(L,n)		lua_yieldk(L, (n), 0, NULL)
N
N
N/*
N** garbage-collection function and options
N*/
N
N#define LUA_GCSTOP		0
N#define LUA_GCRESTART		1
N#define LUA_GCCOLLECT		2
N#define LUA_GCCOUNT		3
N#define LUA_GCCOUNTB		4
N#define LUA_GCSTEP		5
N#define LUA_GCSETPAUSE		6
N#define LUA_GCSETSTEPMUL	7
N#define LUA_GCISRUNNING		9
N#define LUA_GCGEN		10
N#define LUA_GCINC		11
N
NLUA_API int (lua_gc) (lua_State *L, int what, ...);
Xextern int (lua_gc) (lua_State *L, int what, ...);
N
N
N/*
N** miscellaneous functions
N*/
N
NLUA_API int   (lua_error) (lua_State *L);
Xextern int   (lua_error) (lua_State *L);
N
NLUA_API int   (lua_next) (lua_State *L, int idx);
Xextern int   (lua_next) (lua_State *L, int idx);
N
NLUA_API void  (lua_concat) (lua_State *L, int n);
Xextern void  (lua_concat) (lua_State *L, int n);
NLUA_API void  (lua_len)    (lua_State *L, int idx);
Xextern void  (lua_len)    (lua_State *L, int idx);
N
NLUA_API size_t   (lua_stringtonumber) (lua_State *L, const char *s);
Xextern size_t   (lua_stringtonumber) (lua_State *L, const char *s);
N
NLUA_API lua_Alloc (lua_getallocf) (lua_State *L, void **ud);
Xextern lua_Alloc (lua_getallocf) (lua_State *L, void **ud);
NLUA_API void      (lua_setallocf) (lua_State *L, lua_Alloc f, void *ud);
Xextern void      (lua_setallocf) (lua_State *L, lua_Alloc f, void *ud);
N
NLUA_API void (lua_removekey) (lua_State *L, int idx);
Xextern void (lua_removekey) (lua_State *L, int idx);
NLUA_API int (lua_keyin) (lua_State *L, int idx);
Xextern int (lua_keyin) (lua_State *L, int idx);
N
N
N/*
N** {==============================================================
N** some useful macros
N** ===============================================================
N*/
N
N#define lua_getextraspace(L)	((void *)((char *)(L) - LUA_EXTRASPACE))
N
N#define lua_tonumber(L,i)	lua_tonumberx(L,(i),NULL)
N#define lua_tointeger(L,i)	lua_tointegerx(L,(i),NULL)
N
N#define lua_pop(L,n)		lua_settop(L, -(n)-1)
N
N#define lua_newtable(L)		lua_createtable(L, 0, 0)
N
N#define lua_register(L,n,f) (lua_pushcfunction(L, (f)), lua_setglobal(L, (n)))
N
N#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
N
N#define lua_isfunction(L,n)	(lua_type(L, (n)) == LUA_TFUNCTION)
N#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
N#define lua_islightuserdata(L,n)	(lua_type(L, (n)) == LUA_TLIGHTUSERDATA)
N#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
N#define lua_isboolean(L,n)	(lua_type(L, (n)) == LUA_TBOOLEAN)
N#define lua_isthread(L,n)	(lua_type(L, (n)) == LUA_TTHREAD)
N#define lua_isnone(L,n)		(lua_type(L, (n)) == LUA_TNONE)
N#define lua_isnoneornil(L, n)	(lua_type(L, (n)) <= 0)
N
N#define lua_pushliteral(L, s)	lua_pushstring(L, "" s)
N
N#define lua_pushglobaltable(L)  \
N	((void)lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS))
X#define lua_pushglobaltable(L)  	((void)lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS))
N
N#define lua_tostring(L,i)	lua_tolstring(L, (i), NULL)
N
N
N#define lua_insert(L,idx)	lua_rotate(L, (idx), 1)
N
N#define lua_remove(L,idx)	(lua_rotate(L, (idx), -1), lua_pop(L, 1))
N
N#define lua_replace(L,idx)	(lua_copy(L, -1, (idx)), lua_pop(L, 1))
N
N/* }============================================================== */
N
N
N/*
N** {==============================================================
N** compatibility macros
N** ===============================================================
N*/
N#if defined(LUA_COMPAT_APIINTCASTS)
X#if 0L
S
S#define lua_pushunsigned(L,n)	lua_pushinteger(L, (lua_Integer)(n))
S#define lua_tounsignedx(L,i,is)	((lua_Unsigned)lua_tointegerx(L,i,is))
S#define lua_tounsigned(L,i)	lua_tounsignedx(L,(i),NULL)
S
N#endif
N
N#define lua_newuserdata(L,s)	lua_newuserdatauv(L,s,1)
N#define lua_getuservalue(L,idx)	lua_getiuservalue(L,idx,1)
N#define lua_setuservalue(L,idx)	lua_setiuservalue(L,idx,1)
N
N/* }============================================================== */
N
N/*
N** {======================================================================
N** Debug API
N** =======================================================================
N*/
N
N
N/*
N** Event codes
N*/
N#define LUA_HOOKCALL	0
N#define LUA_HOOKRET	1
N#define LUA_HOOKLINE	2
N#define LUA_HOOKCOUNT	3
N#define LUA_HOOKTAILCALL 4
N
N
N/*
N** Event masks
N*/
N#define LUA_MASKCALL	(1 << LUA_HOOKCALL)
N#define LUA_MASKRET	(1 << LUA_HOOKRET)
N#define LUA_MASKLINE	(1 << LUA_HOOKLINE)
N#define LUA_MASKCOUNT	(1 << LUA_HOOKCOUNT)
N
Ntypedef struct lua_Debug lua_Debug;  /* activation record */
N
N
N/* Functions to be called by the debugger in specific events */
Ntypedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);
N
N
NLUA_API int (lua_getstack) (lua_State *L, int level, lua_Debug *ar);
Xextern int (lua_getstack) (lua_State *L, int level, lua_Debug *ar);
NLUA_API int (lua_getinfo) (lua_State *L, const char *what, lua_Debug *ar);
Xextern int (lua_getinfo) (lua_State *L, const char *what, lua_Debug *ar);
NLUA_API const char *(lua_getlocal) (lua_State *L, const lua_Debug *ar, int n);
Xextern const char *(lua_getlocal) (lua_State *L, const lua_Debug *ar, int n);
NLUA_API const char *(lua_setlocal) (lua_State *L, const lua_Debug *ar, int n);
Xextern const char *(lua_setlocal) (lua_State *L, const lua_Debug *ar, int n);
NLUA_API const char *(lua_getupvalue) (lua_State *L, int funcindex, int n);
Xextern const char *(lua_getupvalue) (lua_State *L, int funcindex, int n);
NLUA_API const char *(lua_setupvalue) (lua_State *L, int funcindex, int n);
Xextern const char *(lua_setupvalue) (lua_State *L, int funcindex, int n);
N
NLUA_API void *(lua_upvalueid) (lua_State *L, int fidx, int n);
Xextern void *(lua_upvalueid) (lua_State *L, int fidx, int n);
NLUA_API void  (lua_upvaluejoin) (lua_State *L, int fidx1, int n1,
Xextern void  (lua_upvaluejoin) (lua_State *L, int fidx1, int n1,
N                                               int fidx2, int n2);
N
NLUA_API void (lua_sethook) (lua_State *L, lua_Hook func, int mask, int count);
Xextern void (lua_sethook) (lua_State *L, lua_Hook func, int mask, int count);
NLUA_API lua_Hook (lua_gethook) (lua_State *L);
Xextern lua_Hook (lua_gethook) (lua_State *L);
NLUA_API int (lua_gethookmask) (lua_State *L);
Xextern int (lua_gethookmask) (lua_State *L);
NLUA_API int (lua_gethookcount) (lua_State *L);
Xextern int (lua_gethookcount) (lua_State *L);
N
N
Nstruct lua_Debug {
N  int event;
N  const char *name;	/* (n) */
N  const char *namewhat;	/* (n) 'global', 'local', 'field', 'method' */
N  const char *what;	/* (S) 'Lua', 'C', 'main', 'tail' */
N  const char *source;	/* (S) */
N  int currentline;	/* (l) */
N  int linedefined;	/* (S) */
N  int lastlinedefined;	/* (S) */
N  unsigned char nups;	/* (u) number of upvalues */
N  unsigned char nparams;/* (u) number of parameters */
N  char isvararg;        /* (u) */
N  char istailcall;	/* (t) */
N  unsigned short fTransfer;/* (r) index of first value transfered */
N  unsigned short nTransfer;   /* (r) number of transfered values */
N  char short_src[LUA_IDSIZE]; /* (S) */
X  char short_src[60];  
N  /* private part */
N  struct CallInfo *i_ci;  /* active function */
N};
N
N/* }====================================================================== */
N
N
N/******************************************************************************
N* Copyright (C) 1994-2018 Lua.org, PUC-Rio.
N*
N* Permission is hereby granted, free of charge, to any person obtaining
N* a copy of this software and associated documentation files (the
N* "Software"), to deal in the Software without restriction, including
N* without limitation the rights to use, copy, modify, merge, publish,
N* distribute, sublicense, and/or sell copies of the Software, and to
N* permit persons to whom the Software is furnished to do so, subject to
N* the following conditions:
N*
N* The above copyright notice and this permission notice shall be
N* included in all copies or substantial portions of the Software.
N*
N* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
N* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
N* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
N* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
N* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
N* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
N* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
N******************************************************************************/
N
N
N#endif
L 18 "..\..\..\M6P1(L)_Lua\lua\lapi.c" 2
N
N#include "lapi.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lapi.h" 1
N/*
N** $Id: lapi.h,v 2.10 2017/11/01 18:20:48 roberto Exp $
N** Auxiliary functions from Lua API
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lapi_h
N#define lapi_h
N
N
N#include "llimits.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\llimits.h" 1
N/*
N** $Id: llimits.h,v 1.148 2017/12/28 11:51:00 roberto Exp roberto $
N** Limits, basic types, and some other 'installation-dependent' definitions
N** See Copyright Notice in lua.h
N*/
N
N#ifndef llimits_h
N#define llimits_h
N
N
N#include <limits.h>
N#include <stddef.h>
N
N
N#include "lua.h"
N
N/*
N** 'lu_mem' and 'l_mem' are unsigned/signed integers big enough to count
N** the total memory used by Lua (in bytes). Usually, 'size_t' and
N** 'ptrdiff_t' should work, but we use 'long' for 16-bit machines.
N*/
N#if defined(LUAI_MEM)		/* { external definitions? */
X#if 0L		 
Stypedef LUAI_UMEM lu_mem;
Stypedef LUAI_MEM l_mem;
N#elif LUAI_BITSINT >= 32	/* }{ */
X#elif 32 >= 32	 
Ntypedef size_t lu_mem;
Ntypedef ptrdiff_t l_mem;
N#else  /* 16-bit ints */	/* }{ */
Stypedef unsigned long lu_mem;
Stypedef long l_mem;
N#endif				/* } */
N
N
N/* chars used as small naturals (so that 'char' is reserved for characters) */
Ntypedef unsigned char lu_byte;
Ntypedef signed char ls_byte;
N
N
N/* maximum value for size_t */
N#define MAX_SIZET	((size_t)(~(size_t)0))
N
N/* maximum size visible for Lua (must be representable in a lua_Integer */
N#define MAX_SIZE	(sizeof(size_t) < sizeof(lua_Integer) ? MAX_SIZET \
N                          : (size_t)(LUA_MAXINTEGER))
X#define MAX_SIZE	(sizeof(size_t) < sizeof(lua_Integer) ? MAX_SIZET                           : (size_t)(LUA_MAXINTEGER))
N
N
N#define MAX_LUMEM	((lu_mem)(~(lu_mem)0))
N
N#define MAX_LMEM	((l_mem)(MAX_LUMEM >> 1))
N
N
N#define MAX_INT		INT_MAX  /* maximum value of an int */
N
N
N/*
N** floor of the log2 of the maximum signed value for integral type 't'.
N** (That is, maximum 'n' such that '2^n' fits in the given signed type.)
N*/
N#define log2maxs(t)	(sizeof(t) * 8 - 2)
N
N
N/*
N** conversion of pointer to unsigned integer:
N** this is for hashing only; there is no problem if the integer
N** cannot hold the whole pointer value
N*/
N#define point2uint(p)	((unsigned int)((size_t)(p) & UINT_MAX))
N
N
N
N/* types of 'usual argument conversions' for lua_Number and lua_Integer */
Ntypedef LUAI_UACNUMBER l_uacNumber;
Xtypedef double l_uacNumber;
Ntypedef LUAI_UACINT l_uacInt;
Xtypedef long long l_uacInt;
N
N
N/* internal assertions for in-house debugging */
N#if defined(lua_assert)
X#if 0L
S#define check_exp(c,e)		(lua_assert(c), (e))
S/* to avoid problems with conditions too long */
S#define lua_longassert(c)	((c) ? (void)0 : lua_assert(0))
N#else
N#define lua_assert(c)		((void)0)
N#define check_exp(c,e)		(e)
N#define lua_longassert(c)	((void)0)
N#endif
N
N/*
N** assertion for checking API calls
N*/
N#if !defined(luai_apicheck)
X#if !0L
N#define luai_apicheck(l,e)	lua_assert(e)
N#endif
N
N#define api_check(l,e,msg)	luai_apicheck(l,(e) && msg)
N
N
N/* macro to avoid warnings about unused variables */
N#if !defined(UNUSED)
X#if !0L
N#define UNUSED(x)	((void)(x))
N#endif
N
N
N/* type casts (a macro highlights casts in the code) */
N#define cast(t, exp)	((t)(exp))
N
N#define cast_void(i)	cast(void, (i))
N#define cast_voidp(i)	cast(void *, (i))
N#define cast_num(i)	cast(lua_Number, (i))
N#define cast_int(i)	cast(int, (i))
N#define cast_uint(i)	cast(unsigned int, (i))
N#define cast_byte(i)	cast(lu_byte, (i))
N#define cast_uchar(i)	cast(unsigned char, (i))
N#define cast_char(i)	cast(char, (i))
N#define cast_charp(i)	cast(char *, (i))
N#define cast_sizet(i)	cast(size_t, (i))
N
N
N/* cast a signed lua_Integer to lua_Unsigned */
N#if !defined(l_castS2U)
X#if !0L
N#define l_castS2U(i)	((lua_Unsigned)(i))
N#endif
N
N/*
N** cast a lua_Unsigned to a signed lua_Integer; this cast is
N** not strict ISO C, but two-complement architectures should
N** work fine.
N*/
N#if !defined(l_castU2S)
X#if !0L
N#define l_castU2S(i)	((lua_Integer)(i))
N#endif
N
N
N/*
N** non-return type
N*/
N#if defined(__GNUC__)
X#if 0L
S#define l_noret		void __attribute__((noreturn))
S#elif defined(_MSC_VER) && _MSC_VER >= 1200
X#elif 0L && _MSC_VER >= 1200
S#define l_noret		void __declspec(noreturn)
N#else
N#define l_noret		void
N#endif
N
N
N
N/*
N** maximum depth for nested C calls and syntactical nested non-terminals
N** in a program. (Value must fit in an unsigned short int. It must also
N** be compatible with the size of the C stack.)
N*/
N#if !defined(LUAI_MAXCCALLS)
X#if !0L
N#define LUAI_MAXCCALLS		2200
N#endif
N
N
N
N/*
N** type for virtual-machine instructions;
N** must be an unsigned with (at least) 4 bytes (see details in lopcodes.h)
N*/
N#if LUAI_BITSINT >= 32
X#if 32 >= 32
Ntypedef unsigned int Instruction;
N#else
Stypedef unsigned long Instruction;
N#endif
N
N
N
N/*
N** Maximum length for short strings, that is, strings that are
N** internalized. (Cannot be smaller than reserved words or tags for
N** metamethods, as these strings must be internalized;
N** #("function") = 8, #("__newindex") = 10.)
N*/
N#if !defined(LUAI_MAXSHORTLEN)
X#if !0L
N#define LUAI_MAXSHORTLEN	40
N#endif
N
N
N/*
N** Initial size for the string table (must be power of 2).
N** The Lua core alone registers ~50 strings (reserved words +
N** metaevent keys + a few others). Libraries would typically add
N** a few dozens more.
N*/
N#if !defined(MINSTRTABSIZE)
X#if !0L
N#define MINSTRTABSIZE	128
N#endif
N
N
N/*
N** Size of cache for strings in the API. 'N' is the number of
N** sets (better be a prime) and "M" is the size of each set (M == 1
N** makes a direct cache.)
N*/
N#if !defined(STRCACHE_N)
X#if !0L
N#define STRCACHE_N		53
N#define STRCACHE_M		2
N#endif
N
N
N/* minimum size for string buffer */
N#if !defined(LUA_MINBUFFER)
X#if !0L
N#define LUA_MINBUFFER	32
N#endif
N
N
N/*
N** macros that are executed whenever program enters the Lua core
N** ('lua_lock') and leaves the core ('lua_unlock')
N*/
N#if !defined(lua_lock)
X#if !0L
N#define lua_lock(L)	((void) 0)
N#define lua_unlock(L)	((void) 0)
N#endif
N
N/*
N** macro executed during Lua functions at points where the
N** function can yield.
N*/
N#if !defined(luai_threadyield)
X#if !0L
N#define luai_threadyield(L)	{lua_unlock(L); lua_lock(L);}
N#endif
N
N
N/*
N** these macros allow user-specific actions when a thread is
N** created/deleted/resumed/yielded.
N*/
N#if !defined(luai_userstateopen)
X#if !0L
N#define luai_userstateopen(L)		((void)L)
N#endif
N
N#if !defined(luai_userstateclose)
X#if !0L
N#define luai_userstateclose(L)		((void)L)
N#endif
N
N#if !defined(luai_userstatethread)
X#if !0L
N#define luai_userstatethread(L,L1)	((void)L)
N#endif
N
N#if !defined(luai_userstatefree)
X#if !0L
N#define luai_userstatefree(L,L1)	((void)L)
N#endif
N
N#if !defined(luai_userstateresume)
X#if !0L
N#define luai_userstateresume(L,n)	((void)L)
N#endif
N
N#if !defined(luai_userstateyield)
X#if !0L
N#define luai_userstateyield(L,n)	((void)L)
N#endif
N
N
N
N/*
N** The luai_num* macros define the primitive operations over numbers.
N*/
N
N/* floor division (defined as 'floor(a/b)') */
N#if !defined(luai_numidiv)
X#if !0L
N#define luai_numidiv(L,a,b)     ((void)L, l_floor(luai_numdiv(L,a,b)))
N#endif
N
N/* float division */
N#if !defined(luai_numdiv)
X#if !0L
N#define luai_numdiv(L,a,b)      ((a)/(b))
N#endif
N
N/*
N** modulo: defined as 'a - floor(a/b)*b'; this definition gives NaN when
N** 'b' is huge, but the result should be 'a'. 'fmod' gives the result of
N** 'a - trunc(a/b)*b', and therefore must be corrected when 'trunc(a/b)
N** ~= floor(a/b)'. That happens when the division has a non-integer
N** negative result, which is equivalent to the test below.
N*/
N#if !defined(luai_nummod)
X#if !0L
N#define luai_nummod(L,a,b,m)  \
N  { (m) = l_mathop(fmod)(a,b); if ((m)*(b) < 0) (m) += (b); }
X#define luai_nummod(L,a,b,m)    { (m) = l_mathop(fmod)(a,b); if ((m)*(b) < 0) (m) += (b); }
N#endif
N
N/* exponentiation */
N#if !defined(luai_numpow)
X#if !0L
N#define luai_numpow(L,a,b)      ((void)L, l_mathop(pow)(a,b))
N#endif
N
N/* the others are quite standard operations */
N#if !defined(luai_numadd)
X#if !0L
N#define luai_numadd(L,a,b)      ((a)+(b))
N#define luai_numsub(L,a,b)      ((a)-(b))
N#define luai_nummul(L,a,b)      ((a)*(b))
N#define luai_numunm(L,a)        (-(a))
N#define luai_numeq(a,b)         ((a)==(b))
N#define luai_numlt(a,b)         ((a)<(b))
N#define luai_numle(a,b)         ((a)<=(b))
N#define luai_numisnan(a)        (!luai_numeq((a), (a)))
N#endif
N
N
N
N
N
N/*
N** macro to control inclusion of some hard tests on stack reallocation
N*/
N#if !defined(HARDSTACKTESTS)
X#if !0L
N#define condmovestack(L,pre,pos)	((void)0)
N#else
S/* realloc stack keeping its size */
S#define condmovestack(L,pre,pos)  \
S  { int sz_ = (L)->stacksize; pre; luaD_reallocstack((L), sz_, 0); pos; }
X#define condmovestack(L,pre,pos)    { int sz_ = (L)->stacksize; pre; luaD_reallocstack((L), sz_, 0); pos; }
N#endif
N
N#if !defined(HARDMEMTESTS)
X#if !0L
N#define condchangemem(L,pre,pos)	((void)0)
N#else
S#define condchangemem(L,pre,pos)  \
S	{ if (G(L)->gcrunning) { pre; luaC_fullgc(L, 0); pos; } }
X#define condchangemem(L,pre,pos)  	{ if (G(L)->gcrunning) { pre; luaC_fullgc(L, 0); pos; } }
N#endif
N
N#endif
L 12 "..\..\..\M6P1(L)_Lua\lua\lapi.h" 2
N#include "lstate.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lstate.h" 1
N/*
N** $Id: lstate.h,v 2.156 2018/02/17 19:29:29 roberto Exp roberto $
N** Global State
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lstate_h
N#define lstate_h
N
N#include "lua.h"
N
N#include "lobject.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lobject.h" 1
N/*
N** $Id: lobject.h,v 2.140 2018/02/26 13:35:03 roberto Exp roberto $
N** Type definitions for Lua objects
N** See Copyright Notice in lua.h
N*/
N
N
N#ifndef lobject_h
N#define lobject_h
N
N
N#include <stdarg.h>
N
N
N#include "llimits.h"
N#include "lua.h"
N
N
N/*
N** Extra tags for non-values
N*/
N#define LUA_TUPVAL	LUA_NUMTAGS  /* upvalues */
N#define LUA_TPROTO	(LUA_NUMTAGS+1)  /* function prototypes */
N
N/*
N** number of all possible tags (including LUA_TNONE)
N*/
N#define LUA_TOTALTAGS	(LUA_TPROTO + 2)
N
N
N/*
N** tags for Tagged Values have the following use of bits:
N** bits 0-3: actual tag (a LUA_T* value)
N** bits 4-5: variant bits
N** bit 6: whether value is collectable
N*/
N
N
N
N/*
N** Union of all Lua values
N*/
Ntypedef union Value {
N  struct GCObject *gc;    /* collectable objects */
N  void *p;         /* light userdata */
N  int b;           /* booleans */
N  lua_CFunction f; /* light C functions */
N  lua_Integer i;   /* integer numbers */
N  lua_Number n;    /* float numbers */
N} Value;
N
N
N/*
N** Tagged Values. This is the basic representation of values in Lua:
N** an actual value plus a tag with its type.
N*/
N
N#define TValuefields	Value value_; lu_byte tt_
N
Ntypedef struct TValue {
N  TValuefields;
X  Value value_; lu_byte tt_;
N} TValue;
N
N
N#define val_(o)		((o)->value_)
N#define valraw(o)	(&val_(o))
N
N
N/* raw type tag of a TValue */
N#define rawtt(o)	((o)->tt_)
N
N/* tag with no variants (bits 0-3) */
N#define novariant(t)	((t) & 0x0F)
N
N/* type tag of a TValue (bits 0-3 for tags + variant bits 4-5) */
N#define withvariant(t)	((t) & 0x3F)
N#define ttypetag(o)	withvariant(rawtt(o))
N
N/* type of a TValue */
N#define ttype(o)	(novariant(rawtt(o)))
N
N
N/* Macros to test type */
N#define checktag(o,t)		(rawtt(o) == (t))
N#define checktype(o,t)		(ttype(o) == (t))
N
N
N/* Macros for internal tests */
N#define righttt(obj)		(ttypetag(obj) == gcvalue(obj)->tt)
N
N#define checkliveness(L,obj) \
N	lua_longassert(!iscollectable(obj) || \
N		(righttt(obj) && (L == NULL || !isdead(G(L),gcvalue(obj)))))
X#define checkliveness(L,obj) 	lua_longassert(!iscollectable(obj) || 		(righttt(obj) && (L == NULL || !isdead(G(L),gcvalue(obj)))))
N
N
N/* Macros to set values */
N#define settt_(o,t)	((o)->tt_=(t))
N
N
N#define setobj(L,obj1,obj2) \
N	{ TValue *io1=(obj1); const TValue *io2=(obj2); \
N          io1->value_ = io2->value_; io1->tt_ = io2->tt_; \
N	  (void)L; checkliveness(L,io1); lua_assert(!isreallyempty(io1)); }
X#define setobj(L,obj1,obj2) 	{ TValue *io1=(obj1); const TValue *io2=(obj2);           io1->value_ = io2->value_; io1->tt_ = io2->tt_; 	  (void)L; checkliveness(L,io1); lua_assert(!isreallyempty(io1)); }
N
N/*
N** different types of assignments, according to destination
N*/
N
N/* from stack to stack */
N#define setobjs2s(L,o1,o2)	setobj(L,s2v(o1),s2v(o2))
N/* to stack (not from same stack) */
N#define setobj2s(L,o1,o2)	setobj(L,s2v(o1),o2)
N/* from table to same table */
N#define setobjt2t	setobj
N/* to new object */
N#define setobj2n	setobj
N/* to table */
N#define setobj2t	setobj
N
N
N
Ntypedef union StackValue {
N  TValue val;
N} StackValue;
N
N
Ntypedef StackValue *StkId;  /* index to stack elements */
N
N/* convert a 'StackValue' to a 'TValue' */
N#define s2v(o)	(&(o)->val)
N
N
N
N/*
N** {==================================================================
N** Nil
N** ===================================================================
N*/
N
N#define ttisnil(o)		checktag((o), LUA_TNIL)
N
N/* macro defining a nil value */
N#define NILCONSTANT	{NULL}, LUA_TNIL
N
N#define setnilvalue(obj) settt_(obj, LUA_TNIL)
N
N
N/* (address of) a fixed nil value */
N#define luaO_nilobject		(&luaO_nilobject_)
N
N
N/*
N** Variant tag, used only in tables to signal an empty slot
N** (which might be different from a slot containing nil)
N*/
N#define LUA_TEMPTY	(LUA_TNIL | (1 << 4))
N
N#define ttisnilorempty(v)	checktype((v), LUA_TNIL)
N
N#define isreallyempty(v)	checktag((v), LUA_TEMPTY)
N
N
N#if defined(LUA_NILINTABLE)
X#if 0L
S
S#define isempty(v)		isreallyempty(v)
S
N#else /* By default, entries with any kind of nil are considered empty */
N
N#define isempty(v)		ttisnilorempty(v)
N
N#endif
N
N/* macro defining an empty value */
N#define EMPTYCONSTANT	{NULL}, LUA_TEMPTY
N
N
N/* mark an entry as empty */
N#define setempty(v)		settt_(v, LUA_TEMPTY)
N
N
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Booleans
N** ===================================================================
N*/
N
N#define ttisboolean(o)		checktag((o), LUA_TBOOLEAN)
N
N#define bvalue(o)	check_exp(ttisboolean(o), val_(o).b)
N
N#define bvalueraw(v)	((v).b)
N
N#define l_isfalse(o)	(ttisnil(o) || (ttisboolean(o) && bvalue(o) == 0))
N
N#define setbvalue(obj,x) \
N  { TValue *io=(obj); val_(io).b=(x); settt_(io, LUA_TBOOLEAN); }
X#define setbvalue(obj,x)   { TValue *io=(obj); val_(io).b=(x); settt_(io, LUA_TBOOLEAN); }
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Threads
N** ===================================================================
N*/
N
N#define ttisthread(o)		checktag((o), ctb(LUA_TTHREAD))
N
N#define thvalue(o)	check_exp(ttisthread(o), gco2th(val_(o).gc))
N
N#define setthvalue(L,obj,x) \
N  { TValue *io = (obj); lua_State *x_ = (x); \
N    val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TTHREAD)); \
N    checkliveness(L,io); }
X#define setthvalue(L,obj,x)   { TValue *io = (obj); lua_State *x_ = (x);     val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TTHREAD));     checkliveness(L,io); }
N
N#define setthvalue2s(L,o,t)	setthvalue(L,s2v(o),t)
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Collectable Objects
N** ===================================================================
N*/
N
N/*
N** Common Header for all collectable objects (in macro form, to be
N** included in other objects)
N*/
N#define CommonHeader	struct GCObject *next; lu_byte tt; lu_byte marked
N
N
N/* Common type for all collectable objects */
Ntypedef struct GCObject {
N  CommonHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked;
N} GCObject;
N
N
N/* Bit mark for collectable types */
N#define BIT_ISCOLLECTABLE	(1 << 6)
N
N#define iscollectable(o)	(rawtt(o) & BIT_ISCOLLECTABLE)
N
N/* mark a tag as collectable */
N#define ctb(t)			((t) | BIT_ISCOLLECTABLE)
N
N#define gcvalue(o)	check_exp(iscollectable(o), val_(o).gc)
N
N#define gcvalueraw(v)	((v).gc)
N
N#define setgcovalue(L,obj,x) \
N  { TValue *io = (obj); GCObject *i_g=(x); \
N    val_(io).gc = i_g; settt_(io, ctb(i_g->tt)); }
X#define setgcovalue(L,obj,x)   { TValue *io = (obj); GCObject *i_g=(x);     val_(io).gc = i_g; settt_(io, ctb(i_g->tt)); }
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Numbers
N** ===================================================================
N*/
N
N/* Variant tags for numbers */
N#define LUA_TNUMFLT	(LUA_TNUMBER | (1 << 4))  /* float numbers */
N#define LUA_TNUMINT	(LUA_TNUMBER | (2 << 4))  /* integer numbers */
N
N#define ttisnumber(o)		checktype((o), LUA_TNUMBER)
N#define ttisfloat(o)		checktag((o), LUA_TNUMFLT)
N#define ttisinteger(o)		checktag((o), LUA_TNUMINT)
N
N#define nvalue(o)	check_exp(ttisnumber(o), \
N	(ttisinteger(o) ? cast_num(ivalue(o)) : fltvalue(o)))
X#define nvalue(o)	check_exp(ttisnumber(o), 	(ttisinteger(o) ? cast_num(ivalue(o)) : fltvalue(o)))
N#define fltvalue(o)	check_exp(ttisfloat(o), val_(o).n)
N#define ivalue(o)	check_exp(ttisinteger(o), val_(o).i)
N
N#define fltvalueraw(v)	((v).n)
N#define ivalueraw(v)	((v).i)
N
N#define setfltvalue(obj,x) \
N  { TValue *io=(obj); val_(io).n=(x); settt_(io, LUA_TNUMFLT); }
X#define setfltvalue(obj,x)   { TValue *io=(obj); val_(io).n=(x); settt_(io, LUA_TNUMFLT); }
N
N#define chgfltvalue(obj,x) \
N  { TValue *io=(obj); lua_assert(ttisfloat(io)); val_(io).n=(x); }
X#define chgfltvalue(obj,x)   { TValue *io=(obj); lua_assert(ttisfloat(io)); val_(io).n=(x); }
N
N#define setivalue(obj,x) \
N  { TValue *io=(obj); val_(io).i=(x); settt_(io, LUA_TNUMINT); }
X#define setivalue(obj,x)   { TValue *io=(obj); val_(io).i=(x); settt_(io, LUA_TNUMINT); }
N
N#define chgivalue(obj,x) \
N  { TValue *io=(obj); lua_assert(ttisinteger(io)); val_(io).i=(x); }
X#define chgivalue(obj,x)   { TValue *io=(obj); lua_assert(ttisinteger(io)); val_(io).i=(x); }
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Strings
N** ===================================================================
N*/
N
N/* Variant tags for strings */
N#define LUA_TSHRSTR	(LUA_TSTRING | (1 << 4))  /* short strings */
N#define LUA_TLNGSTR	(LUA_TSTRING | (2 << 4))  /* long strings */
N
N#define ttisstring(o)		checktype((o), LUA_TSTRING)
N#define ttisshrstring(o)	checktag((o), ctb(LUA_TSHRSTR))
N#define ttislngstring(o)	checktag((o), ctb(LUA_TLNGSTR))
N
N#define tsvalueraw(v)	(gco2ts((v).gc))
N
N#define tsvalue(o)	check_exp(ttisstring(o), gco2ts(val_(o).gc))
N
N#define setsvalue(L,obj,x) \
N  { TValue *io = (obj); TString *x_ = (x); \
N    val_(io).gc = obj2gco(x_); settt_(io, ctb(x_->tt)); \
N    checkliveness(L,io); }
X#define setsvalue(L,obj,x)   { TValue *io = (obj); TString *x_ = (x);     val_(io).gc = obj2gco(x_); settt_(io, ctb(x_->tt));     checkliveness(L,io); }
N
N/* set a string to the stack */
N#define setsvalue2s(L,o,s)	setsvalue(L,s2v(o),s)
N
N/* set a string to a new object */
N#define setsvalue2n	setsvalue
N
N
N/*
N** Header for string value; string bytes follow the end of this structure
N** (aligned according to 'UTString'; see next).
N*/
Ntypedef struct TString {
N  CommonHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked;
N  lu_byte extra;  /* reserved words for short strings; "has hash" for longs */
N  lu_byte shrlen;  /* length for short strings */
N  unsigned int hash;
N  union {
N    size_t lnglen;  /* length for long strings */
N    struct TString *hnext;  /* linked list for hash table */
N  } u;
N} TString;
N
N
N/*
N** Ensures that address after this type is always fully aligned.
N*/
Ntypedef union UTString {
N  LUAI_MAXALIGN;  /* ensures maximum alignment for strings */
X  lua_Number n; double u; void *s; lua_Integer i; long l;   
N  TString tsv;
N} UTString;
N
N
N/*
N** Get the actual string (array of bytes) from a 'TString'.
N** (Access to 'extra' ensures that value is really a 'TString'.)
N*/
N#define getstr(ts)  \
N  check_exp(sizeof((ts)->extra), cast_charp((ts)) + sizeof(UTString))
X#define getstr(ts)    check_exp(sizeof((ts)->extra), cast_charp((ts)) + sizeof(UTString))
N
N
N/* get the actual string (array of bytes) from a Lua value */
N#define svalue(o)       getstr(tsvalue(o))
N
N/* get string length from 'TString *s' */
N#define tsslen(s)	((s)->tt == LUA_TSHRSTR ? (s)->shrlen : (s)->u.lnglen)
N
N/* get string length from 'TValue *o' */
N#define vslen(o)	tsslen(tsvalue(o))
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Userdata
N** ===================================================================
N*/
N
N#define ttislightuserdata(o)	checktag((o), LUA_TLIGHTUSERDATA)
N#define ttisfulluserdata(o)	checktype((o), LUA_TUSERDATA)
N
N#define pvalue(o)	check_exp(ttislightuserdata(o), val_(o).p)
N#define uvalue(o)	check_exp(ttisfulluserdata(o), gco2u(val_(o).gc))
N
N#define pvalueraw(v)	((v).p)
N
N#define setpvalue(obj,x) \
N  { TValue *io=(obj); val_(io).p=(x); settt_(io, LUA_TLIGHTUSERDATA); }
X#define setpvalue(obj,x)   { TValue *io=(obj); val_(io).p=(x); settt_(io, LUA_TLIGHTUSERDATA); }
N
N#define setuvalue(L,obj,x) \
N  { TValue *io = (obj); Udata *x_ = (x); \
N    val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TUSERDATA)); \
N    checkliveness(L,io); }
X#define setuvalue(L,obj,x)   { TValue *io = (obj); Udata *x_ = (x);     val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TUSERDATA));     checkliveness(L,io); }
N
N
N/* Ensures that addresses after this type are always fully aligned. */
Ntypedef union UValue {
N  TValue uv;
N  LUAI_MAXALIGN;  /* ensures maximum alignment for udata bytes */
X  lua_Number n; double u; void *s; lua_Integer i; long l;   
N} UValue;
N
N
N/*
N** Header for userdata with user values;
N** memory area follows the end of this structure.
N*/
Ntypedef struct Udata {
N  CommonHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked;
N  unsigned short nuvalue;  /* number of user values */
N  size_t len;  /* number of bytes */
N  struct Table *metatable;
N  GCObject *gclist;
N  UValue uv[1];  /* user values */
N} Udata;
N
N
N/*
N** Header for userdata with no user values. These userdata do not need
N** to be gray during GC, and therefore do not need a 'gclist' field.
N** To simplify, the code always use 'Udata' for both kinds of userdata,
N** making sure it never accesses 'gclist' on userdata with no user values.
N** This structure here is used only to compute the correct size for
N** this representation. (The 'bindata' field in its end ensures correct
N** alignment for binary data following this header.)
N*/
Ntypedef struct Udata0 {
N  CommonHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked;
N  unsigned short nuvalue;  /* number of user values */
N  size_t len;  /* number of bytes */
N  struct Table *metatable;
N  union {LUAI_MAXALIGN;} bindata;
X  union {lua_Number n; double u; void *s; lua_Integer i; long l;} bindata;
N} Udata0;
N
N
N/* compute the offset of the memory area of a userdata */
N#define udatamemoffset(nuv) \
N	((nuv) == 0 ? offsetof(Udata0, bindata)  \
N                    : offsetof(Udata, uv) + (sizeof(UValue) * (nuv)))
X#define udatamemoffset(nuv) 	((nuv) == 0 ? offsetof(Udata0, bindata)                      : offsetof(Udata, uv) + (sizeof(UValue) * (nuv)))
N
N/* get the address of the memory block inside 'Udata' */
N#define getudatamem(u)	(cast_charp(u) + udatamemoffset((u)->nuvalue))
N
N/* compute the size of a userdata */
N#define sizeudata(nuv,nb)	(udatamemoffset(nuv) + (nb))
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Prototypes
N** ===================================================================
N*/
N
N/*
N** Description of an upvalue for function prototypes
N*/
Ntypedef struct Upvaldesc {
N  TString *name;  /* upvalue name (for debug information) */
N  lu_byte instack;  /* whether it is in stack (register) */
N  lu_byte idx;  /* index of upvalue (in stack or in outer function's list) */
N} Upvaldesc;
N
N
N/*
N** Description of a local variable for function prototypes
N** (used for debug information)
N*/
Ntypedef struct LocVar {
N  TString *varname;
N  int startpc;  /* first point where variable is active */
N  int endpc;    /* first point where variable is dead */
N} LocVar;
N
N
N/*
N** Associates the absolute line source for a given instruction ('pc').
N** The array 'lineinfo' gives, for each instruction, the difference in
N** lines from the previous instruction. When that difference does not
N** fit into a byte, Lua saves the absolute line for that instruction.
N** (Lua also saves the absolute line periodically, to speed up the
N** computation of a line number: we can use binary search in the
N** absolute-line array, but we must traverse the 'lineinfo' array
N** linearly to compute a line.)
N*/
Ntypedef struct AbsLineInfo {
N  int pc;
N  int line;
N} AbsLineInfo;
N
N/*
N** Function Prototypes
N*/
Ntypedef struct Proto {
N  CommonHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked;
N  lu_byte numparams;  /* number of fixed (named) parameters */
N  lu_byte is_vararg;
N  lu_byte maxstacksize;  /* number of registers needed by this function */
N  lu_byte cachemiss;  /* count for successive misses for 'cache' field */
N  int sizeupvalues;  /* size of 'upvalues' */
N  int sizek;  /* size of 'k' */
N  int sizecode;
N  int sizelineinfo;
N  int sizep;  /* size of 'p' */
N  int sizelocvars;
N  int sizeabslineinfo;  /* size of 'abslineinfo' */
N  int linedefined;  /* debug information  */
N  int lastlinedefined;  /* debug information  */
N  TValue *k;  /* constants used by the function */
N  struct LClosure *cache;  /* last-created closure with this prototype */
N  Instruction *code;  /* opcodes */
N  struct Proto **p;  /* functions defined inside the function */
N  Upvaldesc *upvalues;  /* upvalue information */
N  ls_byte *lineinfo;  /* information about source lines (debug information) */
N  AbsLineInfo *abslineinfo;  /* idem */
N  LocVar *locvars;  /* information about local variables (debug information) */
N  TString  *source;  /* used for debug information */
N  GCObject *gclist;
N} Proto;
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Closures
N** ===================================================================
N*/
N
N/* Variant tags for functions */
N#define LUA_TLCL	(LUA_TFUNCTION | (1 << 4))  /* Lua closure */
N#define LUA_TLCF	(LUA_TFUNCTION | (2 << 4))  /* light C function */
N#define LUA_TCCL	(LUA_TFUNCTION | (3 << 4))  /* C closure */
N
N#define ttisfunction(o)		checktype(o, LUA_TFUNCTION)
N#define ttisclosure(o)		((rawtt(o) & 0x1F) == LUA_TLCL)
N#define ttisLclosure(o)		checktag((o), ctb(LUA_TLCL))
N#define ttislcf(o)		checktag((o), LUA_TLCF)
N#define ttisCclosure(o)		checktag((o), ctb(LUA_TCCL))
N
N#define isLfunction(o)	ttisLclosure(o)
N
N#define clvalue(o)	check_exp(ttisclosure(o), gco2cl(val_(o).gc))
N#define clLvalue(o)	check_exp(ttisLclosure(o), gco2lcl(val_(o).gc))
N#define fvalue(o)	check_exp(ttislcf(o), val_(o).f)
N#define clCvalue(o)	check_exp(ttisCclosure(o), gco2ccl(val_(o).gc))
N
N#define fvalueraw(v)	((v).f)
N
N#define setclLvalue(L,obj,x) \
N  { TValue *io = (obj); LClosure *x_ = (x); \
N    val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TLCL)); \
N    checkliveness(L,io); }
X#define setclLvalue(L,obj,x)   { TValue *io = (obj); LClosure *x_ = (x);     val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TLCL));     checkliveness(L,io); }
N
N#define setclLvalue2s(L,o,cl)	setclLvalue(L,s2v(o),cl)
N
N#define setfvalue(obj,x) \
N  { TValue *io=(obj); val_(io).f=(x); settt_(io, LUA_TLCF); }
X#define setfvalue(obj,x)   { TValue *io=(obj); val_(io).f=(x); settt_(io, LUA_TLCF); }
N
N#define setclCvalue(L,obj,x) \
N  { TValue *io = (obj); CClosure *x_ = (x); \
N    val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TCCL)); \
N    checkliveness(L,io); }
X#define setclCvalue(L,obj,x)   { TValue *io = (obj); CClosure *x_ = (x);     val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TCCL));     checkliveness(L,io); }
N
N
N/*
N** Upvalues for Lua closures
N*/
Ntypedef struct UpVal {
N  CommonHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked;
N  TValue *v;  /* points to stack or to its own value */
N  union {
N    struct {  /* (when open) */
N      struct UpVal *next;  /* linked list */
N      struct UpVal **previous;
N    } open;
N    TValue value;  /* the value (when closed) */
N  } u;
N} UpVal;
N
N
N#define ClosureHeader \
N	CommonHeader; lu_byte nupvalues; GCObject *gclist
X#define ClosureHeader 	CommonHeader; lu_byte nupvalues; GCObject *gclist
N
Ntypedef struct CClosure {
N  ClosureHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked; lu_byte nupvalues; GCObject *gclist;
N  lua_CFunction f;
N  TValue upvalue[1];  /* list of upvalues */
N} CClosure;
N
N
Ntypedef struct LClosure {
N  ClosureHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked; lu_byte nupvalues; GCObject *gclist;
N  struct Proto *p;
N  UpVal *upvals[1];  /* list of upvalues */
N} LClosure;
N
N
Ntypedef union Closure {
N  CClosure c;
N  LClosure l;
N} Closure;
N
N
N#define getproto(o)	(clLvalue(o)->p)
N
N/* }================================================================== */
N
N
N/*
N** {==================================================================
N** Tables
N** ===================================================================
N*/
N
N#define ttistable(o)		checktag((o), ctb(LUA_TTABLE))
N
N#define hvalue(o)	check_exp(ttistable(o), gco2t(val_(o).gc))
N
N#define sethvalue(L,obj,x) \
N  { TValue *io = (obj); Table *x_ = (x); \
N    val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TTABLE)); \
N    checkliveness(L,io); }
X#define sethvalue(L,obj,x)   { TValue *io = (obj); Table *x_ = (x);     val_(io).gc = obj2gco(x_); settt_(io, ctb(LUA_TTABLE));     checkliveness(L,io); }
N
N#define sethvalue2s(L,o,h)	sethvalue(L,s2v(o),h)
N
N
N/*
N** Nodes for Hash tables: A pack of two TValue's (key-value pairs)
N** plus a 'next' field to link colliding entries. The distribution
N** of the key's fields ('key_tt' and 'key_val') not forming a proper
N** 'TValue' allows for a smaller size for 'Node' both in 4-byte
N** and 8-byte alignments.
N*/
Ntypedef union Node {
N  struct NodeKey {
N    TValuefields;  /* fields for value */
X    Value value_; lu_byte tt_;   
N    lu_byte key_tt;  /* key type */
N    int next;  /* for chaining */
N    Value key_val;  /* key value */
N  } u;
N  TValue i_val;  /* direct access to node's value as a proper 'TValue' */
N} Node;
N
N
N/* copy a value into a key */
N#define setnodekey(L,node,obj) \
N	{ Node *n_=(node); const TValue *io_=(obj); \
N	  n_->u.key_val = io_->value_; n_->u.key_tt = io_->tt_; \
N	  (void)L; checkliveness(L,io_); }
X#define setnodekey(L,node,obj) 	{ Node *n_=(node); const TValue *io_=(obj); 	  n_->u.key_val = io_->value_; n_->u.key_tt = io_->tt_; 	  (void)L; checkliveness(L,io_); }
N
N
N/* copy a value from a key */
N#define getnodekey(L,obj,node) \
N	{ TValue *io_=(obj); const Node *n_=(node); \
N	  io_->value_ = n_->u.key_val; io_->tt_ = n_->u.key_tt; \
N	  (void)L; checkliveness(L,io_); }
X#define getnodekey(L,obj,node) 	{ TValue *io_=(obj); const Node *n_=(node); 	  io_->value_ = n_->u.key_val; io_->tt_ = n_->u.key_tt; 	  (void)L; checkliveness(L,io_); }
N
N
Ntypedef struct Table {
N  CommonHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked;
N  lu_byte flags;  /* 1<<p means tagmethod(p) is not present */
N  lu_byte lsizenode;  /* log2 of size of 'node' array */
N  unsigned int sizearray;  /* size of 'array' array */
N  TValue *array;  /* array part */
N  Node *node;
N  Node *lastfree;  /* any free position is before this position */
N  struct Table *metatable;
N  GCObject *gclist;
N} Table;
N
N
N/*
N** Macros to manipulate keys inserted in nodes
N*/
N#define keytt(node)		((node)->u.key_tt)
N#define keyval(node)		((node)->u.key_val)
N
N#define keyisnil(node)		(keytt(node) == LUA_TNIL)
N#define keyisinteger(node)	(keytt(node) == LUA_TNUMINT)
N#define keyival(node)		(keyval(node).i)
N#define keyisshrstr(node)	(keytt(node) == ctb(LUA_TSHRSTR))
N#define keystrval(node)		(gco2ts(keyval(node).gc))
N
N#define setnilkey(node)		(keytt(node) = LUA_TNIL)
N
N#define keyiscollectable(n)	(keytt(n) & BIT_ISCOLLECTABLE)
N
N#define gckey(n)	(keyval(n).gc)
N#define gckeyN(n)	(keyiscollectable(n) ? gckey(n) : NULL)
N
N
N/*
N** Use a "nil table" to mark dead keys in a table. Those keys serve
N** to keep space for removed entries, which may still be part of
N** chains. Note that the 'keytt' does not have the BIT_ISCOLLECTABLE
N** set, so these values are considered not collectable and are different
N** from any valid value.
N*/
N#define setdeadkey(n)	(keytt(n) = LUA_TTABLE, gckey(n) = NULL)
N
N/* }================================================================== */
N
N
N
N/*
N** 'module' operation for hashing (size is always a power of 2)
N*/
N#define lmod(s,size) \
N	(check_exp((size&(size-1))==0, (cast_int((s) & ((size)-1)))))
X#define lmod(s,size) 	(check_exp((size&(size-1))==0, (cast_int((s) & ((size)-1)))))
N
N
N#define twoto(x)	(1<<(x))
N#define sizenode(t)	(twoto((t)->lsizenode))
N
N
NLUAI_DDEC const TValue luaO_nilobject_;
Xextern const TValue luaO_nilobject_;
N
N/* size of buffer for 'luaO_utf8esc' function */
N#define UTF8BUFFSZ	8
N
NLUAI_FUNC int luaO_int2fb (unsigned int x);
Xextern int luaO_int2fb (unsigned int x);
NLUAI_FUNC int luaO_fb2int (int x);
Xextern int luaO_fb2int (int x);
NLUAI_FUNC int luaO_utf8esc (char *buff, unsigned long x);
Xextern int luaO_utf8esc (char *buff, unsigned long x);
NLUAI_FUNC int luaO_ceillog2 (unsigned int x);
Xextern int luaO_ceillog2 (unsigned int x);
NLUAI_FUNC int luaO_rawarith (lua_State *L, int op, const TValue *p1,
Xextern int luaO_rawarith (lua_State *L, int op, const TValue *p1,
N                             const TValue *p2, TValue *res);
NLUAI_FUNC void luaO_arith (lua_State *L, int op, const TValue *p1,
Xextern void luaO_arith (lua_State *L, int op, const TValue *p1,
N                           const TValue *p2, StkId res);
NLUAI_FUNC size_t luaO_str2num (const char *s, TValue *o);
Xextern size_t luaO_str2num (const char *s, TValue *o);
NLUAI_FUNC int luaO_hexavalue (int c);
Xextern int luaO_hexavalue (int c);
NLUAI_FUNC void luaO_tostring (lua_State *L, TValue *obj);
Xextern void luaO_tostring (lua_State *L, TValue *obj);
NLUAI_FUNC const char *luaO_pushvfstring (lua_State *L, const char *fmt,
Xextern const char *luaO_pushvfstring (lua_State *L, const char *fmt,
N                                                       va_list argp);
NLUAI_FUNC const char *luaO_pushfstring (lua_State *L, const char *fmt, ...);
Xextern const char *luaO_pushfstring (lua_State *L, const char *fmt, ...);
NLUAI_FUNC void luaO_chunkid (char *out, const char *source, size_t len);
Xextern void luaO_chunkid (char *out, const char *source, size_t len);
N
N
N#endif
N
L 13 "..\..\..\M6P1(L)_Lua\lua\lstate.h" 2
N#include "ltm.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\ltm.h" 1
N/*
N** $Id: ltm.h,v 2.33 2018/02/23 13:13:31 roberto Exp roberto $
N** Tag methods
N** See Copyright Notice in lua.h
N*/
N
N#ifndef ltm_h
N#define ltm_h
N
N
N#include "lobject.h"
N#include "lstate.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lstate.h" 1
N/*
N** $Id: lstate.h,v 2.156 2018/02/17 19:29:29 roberto Exp roberto $
N** Global State
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lstate_h
S#define lstate_h
S
S#include "lua.h"
S
S#include "lobject.h"
S#include "ltm.h"
S#include "lzio.h"
S
S
S/*
S
S** Some notes about garbage-collected objects: All objects in Lua must
S** be kept somehow accessible until being freed, so all objects always
S** belong to one (and only one) of these lists, using field 'next' of
S** the 'CommonHeader' for the link:
S**
S** 'allgc': all objects not marked for finalization;
S** 'finobj': all objects marked for finalization;
S** 'tobefnz': all objects ready to be finalized;
S** 'fixedgc': all objects that are not to be collected (currently
S** only small strings, such as reserved words).
S**
S** Moreover, there is another set of lists that control gray objects.
S** These lists are linked by fields 'gclist'. (All objects that
S** can become gray have such a field. The field is not the same
S** in all objects, but it always has this name.)  Any gray object
S** must belong to one of these lists, and all objects in these lists
S** must be gray:
S**
S** 'gray': regular gray objects, still waiting to be visited.
S** 'grayagain': objects that must be revisited at the atomic phase.
S**   That includes
S**   - black objects got in a write barrier;
S**   - all kinds of weak tables during propagation phase;
S**   - all threads.
S** 'weak': tables with weak values to be cleared;
S** 'ephemeron': ephemeron tables with white->white entries;
S** 'allweak': tables with weak keys and/or weak values to be cleared.
S** There is also a list 'protogray' for prototypes that need to have
S** their caches cleared.
S
S*/
S
S
Sstruct lua_longjmp;  /* defined in ldo.c */
S
S
S/*
S** Atomic type (relative to signals) to better ensure that 'lua_sethook'
S** is thread safe
S*/
S#if !defined(l_signalT)
S#include <signal.h>
S#define l_signalT	sig_atomic_t
S#endif
S
S
S/* extra stack space to handle TM calls and some other extras */
S#define EXTRA_STACK   5
S
S
S#define BASIC_STACK_SIZE        (2*LUA_MINSTACK)
S
S
S/* kinds of Garbage Collection */
S#define KGC_INC		0	/* incremental gc */
S#define KGC_GEN		1	/* generational gc */
S
S
Stypedef struct stringtable {
S  TString **hash;
S  int nuse;  /* number of elements */
S  int size;
S} stringtable;
S
S
S/*
S** Information about a call.
S*/
Stypedef struct CallInfo {
S  StkId func;  /* function index in the stack */
S  StkId	top;  /* top for this function */
S  struct CallInfo *previous, *next;  /* dynamic call link */
S  union {
S    struct {  /* only for Lua functions */
S      const Instruction *savedpc;
S      l_signalT trap;
S      int nextraargs;  /* # of extra arguments in vararg functions */
S    } l;
S    struct {  /* only for C functions */
S      lua_KFunction k;  /* continuation in case of yields */
S      ptrdiff_t old_errfunc;
S      lua_KContext ctx;  /* context info. in case of yields */
S    } c;
S  } u;
S  union {
S    int funcidx;  /* called-function index */
S    int nyield;  /* number of values yielded */
S    struct {  /* info about transfered values (for call/return hooks) */
S      unsigned short fTransfer;  /* offset of first value transfered */
S      unsigned short nTransfer;  /* number of values transfered */
S    } transferinfo;
S  } u2;
S  short nresults;  /* expected number of results from this function */
S  unsigned short callstatus;
S} CallInfo;
S
S
S/*
S** Bits in CallInfo status
S*/
S#define CIST_OAH	(1<<0)	/* original value of 'allowhook' */
S#define CIST_C		(1<<1)	/* call is running a C function */
S#define CIST_HOOKED	(1<<2)	/* call is running a debug hook */
S#define CIST_YPCALL	(1<<3)	/* call is a yieldable protected call */
S#define CIST_TAIL	(1<<4)	/* call was tail called */
S#define CIST_HOOKYIELD	(1<<5)	/* last hook called yielded */
S#define CIST_LEQ	(1<<6)  /* using __lt for __le */
S#define CIST_FIN	(1<<7)  /* call is running a finalizer */
S#define CIST_TRAN	(1<<8)	/* 'ci' has transfer information */
S
S/* active function is a Lua function */
S#define isLua(ci)	(!((ci)->callstatus & CIST_C))
S
S/* call is running Lua code (not a hook) */
S#define isLuacode(ci)	(!((ci)->callstatus & (CIST_C | CIST_HOOKED)))
S
S/* assume that CIST_OAH has offset 0 and that 'v' is strictly 0/1 */
S#define setoah(st,v)	((st) = ((st) & ~CIST_OAH) | (v))
S#define getoah(st)	((st) & CIST_OAH)
S
S
S/*
S** 'global state', shared by all threads of this state
S*/
Stypedef struct global_State {
S  lua_Alloc frealloc;  /* function to reallocate memory */
S  void *ud;         /* auxiliary data to 'frealloc' */
S  l_mem totalbytes;  /* number of bytes currently allocated - GCdebt */
S  l_mem GCdebt;  /* bytes allocated not yet compensated by the collector */
S  lu_mem GCestimate;  /* an estimate of the non-garbage memory in use */
S  stringtable strt;  /* hash table for strings */
S  TValue l_registry;
S  unsigned int seed;  /* randomized seed for hashes */
S  lu_byte currentwhite;
S  lu_byte gcstate;  /* state of garbage collector */
S  lu_byte gckind;  /* kind of GC running */
S  lu_byte genminormul;  /* control for minor generational collections */
S  lu_byte genmajormul;  /* control for major generational collections */
S  lu_byte gcrunning;  /* true if GC is running */
S  lu_byte gcemergency;  /* true if this is an emergency collection */
S  lu_byte gcpause;  /* size of pause between successive GCs */
S  lu_byte gcstepmul;  /* GC "speed" */
S  lu_byte gcstepsize;  /* (log2 of) GC granularity */
S  GCObject *allgc;  /* list of all collectable objects */
S  GCObject **sweepgc;  /* current position of sweep in list */
S  GCObject *finobj;  /* list of collectable objects with finalizers */
S  GCObject *gray;  /* list of gray objects */
S  GCObject *grayagain;  /* list of objects to be traversed atomically */
S  GCObject *weak;  /* list of tables with weak values */
S  GCObject *ephemeron;  /* list of ephemeron tables (weak keys) */
S  GCObject *allweak;  /* list of all-weak tables */
S  GCObject *protogray;  /* list of prototypes with "new" caches */
S  GCObject *tobefnz;  /* list of userdata to be GC */
S  GCObject *fixedgc;  /* list of objects not to be collected */
S  /* fields for generational collector */
S  GCObject *survival;  /* start of objects that survived one GC cycle */
S  GCObject *old;  /* start of old objects */
S  GCObject *reallyold;  /* old objects with more than one cycle */
S  GCObject *finobjsur;  /* list of survival objects with finalizers */
S  GCObject *finobjold;  /* list of old objects with finalizers */
S  GCObject *finobjrold;  /* list of really old objects with finalizers */
S  struct lua_State *twups;  /* list of threads with open upvalues */
S  lua_CFunction panic;  /* to be called in unprotected errors */
S  struct lua_State *mainthread;
S  const lua_Number *version;  /* pointer to version number */
S  TString *memerrmsg;  /* message for memory-allocation errors */
S  TString *tmname[TM_N];  /* array with tag-method names */
S  struct Table *mt[LUA_NUMTAGS];  /* metatables for basic types */
S  TString *strcache[STRCACHE_N][STRCACHE_M];  /* cache for strings in API */
S} global_State;
S
S
S/*
S** 'per thread' state
S*/
Sstruct lua_State {
S  CommonHeader;
S  unsigned short nci;  /* number of items in 'ci' list */
S  lu_byte status;
S  StkId top;  /* first free slot in the stack */
S  global_State *l_G;
S  CallInfo *ci;  /* call info for current function */
S  const Instruction *oldpc;  /* last pc traced */
S  StkId stack_last;  /* last free slot in the stack */
S  StkId stack;  /* stack base */
S  UpVal *openupval;  /* list of open upvalues in this stack */
S  GCObject *gclist;
S  struct lua_State *twups;  /* list of threads with open upvalues */
S  struct lua_longjmp *errorJmp;  /* current error recover point */
S  CallInfo base_ci;  /* CallInfo for first level (C calling Lua) */
S  volatile lua_Hook hook;
S  ptrdiff_t errfunc;  /* current error handling function (stack index) */
S  int stacksize;
S  int basehookcount;
S  int hookcount;
S  unsigned short nny;  /* number of non-yieldable calls in stack */
S  unsigned short nCcalls;  /* number of nested C calls */
S  l_signalT hookmask;
S  lu_byte allowhook;
S};
S
S
S#define G(L)	(L->l_G)
S
S
S/*
S** Union of all collectable objects (only for conversions)
S*/
Sunion GCUnion {
S  GCObject gc;  /* common header */
S  struct TString ts;
S  struct Udata u;
S  union Closure cl;
S  struct Table h;
S  struct Proto p;
S  struct lua_State th;  /* thread */
S  struct UpVal upv;
S};
S
S
S#define cast_u(o)	cast(union GCUnion *, (o))
S
S/* macros to convert a GCObject into a specific value */
S#define gco2ts(o)  \
S	check_exp(novariant((o)->tt) == LUA_TSTRING, &((cast_u(o))->ts))
X#define gco2ts(o)  	check_exp(novariant((o)->tt) == LUA_TSTRING, &((cast_u(o))->ts))
S#define gco2u(o)  check_exp((o)->tt == LUA_TUSERDATA, &((cast_u(o))->u))
S#define gco2lcl(o)  check_exp((o)->tt == LUA_TLCL, &((cast_u(o))->cl.l))
S#define gco2ccl(o)  check_exp((o)->tt == LUA_TCCL, &((cast_u(o))->cl.c))
S#define gco2cl(o)  \
S	check_exp(novariant((o)->tt) == LUA_TFUNCTION, &((cast_u(o))->cl))
X#define gco2cl(o)  	check_exp(novariant((o)->tt) == LUA_TFUNCTION, &((cast_u(o))->cl))
S#define gco2t(o)  check_exp((o)->tt == LUA_TTABLE, &((cast_u(o))->h))
S#define gco2p(o)  check_exp((o)->tt == LUA_TPROTO, &((cast_u(o))->p))
S#define gco2th(o)  check_exp((o)->tt == LUA_TTHREAD, &((cast_u(o))->th))
S#define gco2upv(o)  check_exp((o)->tt == LUA_TUPVAL, &((cast_u(o))->upv))
S
S
S/*
S** macro to convert a Lua object into a GCObject
S** (The access to 'tt' tries to ensure that 'v' is actually a Lua object.)
S*/
S#define obj2gco(v)	check_exp((v)->tt >= LUA_TSTRING, &(cast_u(v)->gc))
S
S
S/* actual number of total bytes allocated */
S#define gettotalbytes(g)	cast(lu_mem, (g)->totalbytes + (g)->GCdebt)
S
SLUAI_FUNC void luaE_setdebt (global_State *g, l_mem debt);
SLUAI_FUNC void luaE_freethread (lua_State *L, lua_State *L1);
SLUAI_FUNC CallInfo *luaE_extendCI (lua_State *L);
SLUAI_FUNC void luaE_freeCI (lua_State *L);
SLUAI_FUNC void luaE_shrinkCI (lua_State *L);
SLUAI_FUNC void luaE_incCcalls (lua_State *L);
S
S
N#endif
N
L 13 "..\..\..\M6P1(L)_Lua\lua\ltm.h" 2
N
N
N/*
N* WARNING: if you change the order of this enumeration,
N* grep "ORDER TM" and "ORDER OP"
N*/
Ntypedef enum {
N  TM_INDEX,
N  TM_NEWINDEX,
N  TM_UNDEF,
N  TM_ISDEF,
N  TM_GC,
N  TM_MODE,
N  TM_LEN,
N  TM_EQ,  /* last tag method with fast access */
N  TM_ADD,
N  TM_SUB,
N  TM_MUL,
N  TM_MOD,
N  TM_POW,
N  TM_DIV,
N  TM_IDIV,
N  TM_BAND,
N  TM_BOR,
N  TM_BXOR,
N  TM_SHL,
N  TM_SHR,
N  TM_UNM,
N  TM_BNOT,
N  TM_LT,
N  TM_LE,
N  TM_CONCAT,
N  TM_CALL,
N  TM_N		/* number of elements in the enum */
N} TMS;
N
N
N/*
N** Test whether there is no tagmethod.
N** (Because tagmethods use raw accesses, the result may be an "empty" nil.)
N*/
N#define notm(tm)	ttisnilorempty(tm)
N
N
N#define gfasttm(g,et,e) ((et) == NULL ? NULL : \
N  ((et)->flags & (1u<<(e))) ? NULL : luaT_gettm(et, e, (g)->tmname[e]))
X#define gfasttm(g,et,e) ((et) == NULL ? NULL :   ((et)->flags & (1u<<(e))) ? NULL : luaT_gettm(et, e, (g)->tmname[e]))
N
N#define fasttm(l,et,e)	gfasttm(G(l), et, e)
N
N#define ttypename(x)	luaT_typenames_[(x) + 1]
N
NLUAI_DDEC const char *const luaT_typenames_[LUA_TOTALTAGS];
Xextern const char *const luaT_typenames_[((9+1) + 2)];
N
N
NLUAI_FUNC const char *luaT_objtypename (lua_State *L, const TValue *o);
Xextern const char *luaT_objtypename (lua_State *L, const TValue *o);
N
NLUAI_FUNC const TValue *luaT_gettm (Table *events, TMS event, TString *ename);
Xextern const TValue *luaT_gettm (Table *events, TMS event, TString *ename);
NLUAI_FUNC const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o,
Xextern const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o,
N                                                       TMS event);
NLUAI_FUNC void luaT_init (lua_State *L);
Xextern void luaT_init (lua_State *L);
N
NLUAI_FUNC void luaT_callTM (lua_State *L, const TValue *f, const TValue *p1,
Xextern void luaT_callTM (lua_State *L, const TValue *f, const TValue *p1,
N                            const TValue *p2, const TValue *p3);
NLUAI_FUNC void luaT_callTMres (lua_State *L, const TValue *f,
Xextern void luaT_callTMres (lua_State *L, const TValue *f,
N                            const TValue *p1, const TValue *p2, StkId p3);
NLUAI_FUNC void luaT_trybinTM (lua_State *L, const TValue *p1, const TValue *p2,
Xextern void luaT_trybinTM (lua_State *L, const TValue *p1, const TValue *p2,
N                              StkId res, TMS event);
NLUAI_FUNC void luaT_trybinassocTM (lua_State *L, const TValue *p1,
Xextern void luaT_trybinassocTM (lua_State *L, const TValue *p1,
N       const TValue *p2, StkId res, int inv, TMS event);
NLUAI_FUNC void luaT_trybiniTM (lua_State *L, const TValue *p1, int i2,
Xextern void luaT_trybiniTM (lua_State *L, const TValue *p1, int i2,
N                               int inv, StkId res, TMS event);
NLUAI_FUNC int luaT_callorderTM (lua_State *L, const TValue *p1,
Xextern int luaT_callorderTM (lua_State *L, const TValue *p1,
N                                const TValue *p2, TMS event);
NLUAI_FUNC int luaT_callorderiTM (lua_State *L, const TValue *p1, int v2,
Xextern int luaT_callorderiTM (lua_State *L, const TValue *p1, int v2,
N                                 int inv, TMS event);
N
NLUAI_FUNC void luaT_adjustvarargs (lua_State *L, int nfixparams,
Xextern void luaT_adjustvarargs (lua_State *L, int nfixparams,
N                                   struct CallInfo *ci, Proto *p);
NLUAI_FUNC void luaT_getvarargs (lua_State *L, struct CallInfo *ci,
Xextern void luaT_getvarargs (lua_State *L, struct CallInfo *ci,
N                                              StkId where, int wanted);
N
NLUAI_FUNC int luaT_keydef (lua_State *L, TValue *obj, TValue *key, int remove);
Xextern int luaT_keydef (lua_State *L, TValue *obj, TValue *key, int remove);
N
N
N#endif
L 14 "..\..\..\M6P1(L)_Lua\lua\lstate.h" 2
N#include "lzio.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lzio.h" 1
N/*
N** $Id: lzio.h,v 1.30 2014/12/19 17:26:14 roberto Exp roberto $
N** Buffered streams
N** See Copyright Notice in lua.h
N*/
N
N
N#ifndef lzio_h
N#define lzio_h
N
N#include "lua.h"
N
N#include "lmem.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lmem.h" 1
N/*
N** $Id: lmem.h,v 1.46 2017/12/08 17:28:25 roberto Exp roberto $
N** Interface to Memory Manager
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lmem_h
N#define lmem_h
N
N
N#include <stddef.h>
N
N#include "llimits.h"
N#include "lua.h"
N
N
N#define luaM_error(L)	luaD_throw(L, LUA_ERRMEM)
N
N
N/*
N** This macro tests whether it is safe to multiply 'n' by the size of
N** type 't' without overflows. Because 'e' is always constant, it avoids
N** the runtime division MAX_SIZET/(e).
N** (The macro is somewhat complex to avoid warnings:  The 'sizeof'
N** comparison avoids a runtime comparison when overflow cannot occur.
N** The compiler should be able to optimize the real test by itself, but
N** when it does it, it may give a warning about "comparison is always
N** false due to limited range of data type"; the +1 tricks the compiler,
N** avoiding this warning but also this optimization.)
N*/
N#define luaM_testsize(n,e)  \
N	(sizeof(n) >= sizeof(size_t) && cast_sizet((n)) + 1 > MAX_SIZET/(e))
X#define luaM_testsize(n,e)  	(sizeof(n) >= sizeof(size_t) && cast_sizet((n)) + 1 > MAX_SIZET/(e))
N
N#define luaM_checksize(L,n,e)  \
N	(luaM_testsize(n,e) ? luaM_toobig(L) : cast_void(0))
X#define luaM_checksize(L,n,e)  	(luaM_testsize(n,e) ? luaM_toobig(L) : cast_void(0))
N
N
N/*
N** Computes the minimum between 'n' and 'MAX_SIZET/sizeof(t)', so that
N** the result is not larger than 'n' and cannot overflow a 'size_t'
N** when multiplied by the size of type 't'. (Assumes that 'n' is an
N** 'int' or 'unsigned int' and that 'int' is not larger than 'size_t'.)
N*/
N#define luaM_limitN(n,t)  \
N  ((cast_sizet(n) <= MAX_SIZET/sizeof(t)) ? (n) :  \
N     cast_uint((MAX_SIZET/sizeof(t))))
X#define luaM_limitN(n,t)    ((cast_sizet(n) <= MAX_SIZET/sizeof(t)) ? (n) :       cast_uint((MAX_SIZET/sizeof(t))))
N
N
N/*
N** Arrays of chars do not need any test
N*/
N#define luaM_reallocvchar(L,b,on,n)  \
N  cast_charp(luaM_saferealloc_(L, (b), (on)*sizeof(char), (n)*sizeof(char)))
X#define luaM_reallocvchar(L,b,on,n)    cast_charp(luaM_saferealloc_(L, (b), (on)*sizeof(char), (n)*sizeof(char)))
N
N#define luaM_freemem(L, b, s)	luaM_free_(L, (b), (s))
N#define luaM_free(L, b)		luaM_free_(L, (b), sizeof(*(b)))
N#define luaM_freearray(L, b, n)   luaM_free_(L, (b), (n)*sizeof(*(b)))
N
N#define luaM_new(L,t)		cast(t*, luaM_malloc_(L, sizeof(t), 0))
N#define luaM_newvector(L,n,t)	cast(t*, luaM_malloc_(L, (n)*sizeof(t), 0))
N#define luaM_newvectorchecked(L,n,t) \
N  (luaM_checksize(L,n,sizeof(t)), luaM_newvector(L,n,t))
X#define luaM_newvectorchecked(L,n,t)   (luaM_checksize(L,n,sizeof(t)), luaM_newvector(L,n,t))
N
N#define luaM_newobject(L,tag,s)	luaM_malloc_(L, (s), tag)
N
N#define luaM_growvector(L,v,nelems,size,t,limit,e) \
N	((v)=cast(t *, luaM_growaux_(L,v,nelems,&(size),sizeof(t), \
N                         luaM_limitN(limit,t),e)))
X#define luaM_growvector(L,v,nelems,size,t,limit,e) 	((v)=cast(t *, luaM_growaux_(L,v,nelems,&(size),sizeof(t),                          luaM_limitN(limit,t),e)))
N
N#define luaM_reallocvector(L, v,oldn,n,t) \
N   (cast(t *, luaM_realloc_(L, v, cast_sizet(oldn) * sizeof(t), \
N                                  cast_sizet(n) * sizeof(t))))
X#define luaM_reallocvector(L, v,oldn,n,t)    (cast(t *, luaM_realloc_(L, v, cast_sizet(oldn) * sizeof(t),                                   cast_sizet(n) * sizeof(t))))
N
N#define luaM_shrinkvector(L,v,size,fs,t) \
N   ((v)=cast(t *, luaM_shrinkvector_(L, v, &(size), fs, sizeof(t))))
X#define luaM_shrinkvector(L,v,size,fs,t)    ((v)=cast(t *, luaM_shrinkvector_(L, v, &(size), fs, sizeof(t))))
N
NLUAI_FUNC l_noret luaM_toobig (lua_State *L);
Xextern void luaM_toobig (lua_State *L);
N
N/* not to be called directly */
NLUAI_FUNC void *luaM_realloc_ (lua_State *L, void *block, size_t oldsize,
Xextern void *luaM_realloc_ (lua_State *L, void *block, size_t oldsize,
N                                                          size_t size);
NLUAI_FUNC void *luaM_saferealloc_ (lua_State *L, void *block, size_t oldsize,
Xextern void *luaM_saferealloc_ (lua_State *L, void *block, size_t oldsize,
N                                                              size_t size);
NLUAI_FUNC void luaM_free_ (lua_State *L, void *block, size_t osize);
Xextern void luaM_free_ (lua_State *L, void *block, size_t osize);
NLUAI_FUNC void *luaM_growaux_ (lua_State *L, void *block, int nelems,
Xextern void *luaM_growaux_ (lua_State *L, void *block, int nelems,
N                               int *size, int size_elem, int limit,
N                               const char *what);
NLUAI_FUNC void *luaM_shrinkvector_ (lua_State *L, void *block, int *nelem,
Xextern void *luaM_shrinkvector_ (lua_State *L, void *block, int *nelem,
N                                    int final_n, int size_elem);
NLUAI_FUNC void *luaM_malloc_ (lua_State *L, size_t size, int tag);
Xextern void *luaM_malloc_ (lua_State *L, size_t size, int tag);
N
N#endif
N
L 14 "..\..\..\M6P1(L)_Lua\lua\lzio.h" 2
N
N
N#define EOZ	(-1)			/* end of stream */
N
Ntypedef struct Zio ZIO;
N
N#define zgetc(z)  (((z)->n--)>0 ?  cast_uchar(*(z)->p++) : luaZ_fill(z))
N
N
Ntypedef struct Mbuffer {
N  char *buffer;
N  size_t n;
N  size_t buffsize;
N} Mbuffer;
N
N#define luaZ_initbuffer(L, buff) ((buff)->buffer = NULL, (buff)->buffsize = 0)
N
N#define luaZ_buffer(buff)	((buff)->buffer)
N#define luaZ_sizebuffer(buff)	((buff)->buffsize)
N#define luaZ_bufflen(buff)	((buff)->n)
N
N#define luaZ_buffremove(buff,i)	((buff)->n -= (i))
N#define luaZ_resetbuffer(buff) ((buff)->n = 0)
N
N
N#define luaZ_resizebuffer(L, buff, size) \
N	((buff)->buffer = luaM_reallocvchar(L, (buff)->buffer, \
N				(buff)->buffsize, size), \
N	(buff)->buffsize = size)
X#define luaZ_resizebuffer(L, buff, size) 	((buff)->buffer = luaM_reallocvchar(L, (buff)->buffer, 				(buff)->buffsize, size), 	(buff)->buffsize = size)
N
N#define luaZ_freebuffer(L, buff)	luaZ_resizebuffer(L, buff, 0)
N
N
NLUAI_FUNC void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader,
Xextern void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader,
N                                        void *data);
NLUAI_FUNC size_t luaZ_read (ZIO* z, void *b, size_t n);	/* read next n bytes */
Xextern size_t luaZ_read (ZIO* z, void *b, size_t n);	 
N
N
N
N/* --------- Private Part ------------------ */
N
Nstruct Zio {
N  size_t n;			/* bytes still unread */
N  const char *p;		/* current position in buffer */
N  lua_Reader reader;		/* reader function */
N  void *data;			/* additional data */
N  lua_State *L;			/* Lua state (for reader) */
N};
N
N
NLUAI_FUNC int luaZ_fill (ZIO *z);
Xextern int luaZ_fill (ZIO *z);
N
N#endif
L 15 "..\..\..\M6P1(L)_Lua\lua\lstate.h" 2
N
N
N/*
N
N** Some notes about garbage-collected objects: All objects in Lua must
N** be kept somehow accessible until being freed, so all objects always
N** belong to one (and only one) of these lists, using field 'next' of
N** the 'CommonHeader' for the link:
N**
N** 'allgc': all objects not marked for finalization;
N** 'finobj': all objects marked for finalization;
N** 'tobefnz': all objects ready to be finalized;
N** 'fixedgc': all objects that are not to be collected (currently
N** only small strings, such as reserved words).
N**
N** Moreover, there is another set of lists that control gray objects.
N** These lists are linked by fields 'gclist'. (All objects that
N** can become gray have such a field. The field is not the same
N** in all objects, but it always has this name.)  Any gray object
N** must belong to one of these lists, and all objects in these lists
N** must be gray:
N**
N** 'gray': regular gray objects, still waiting to be visited.
N** 'grayagain': objects that must be revisited at the atomic phase.
N**   That includes
N**   - black objects got in a write barrier;
N**   - all kinds of weak tables during propagation phase;
N**   - all threads.
N** 'weak': tables with weak values to be cleared;
N** 'ephemeron': ephemeron tables with white->white entries;
N** 'allweak': tables with weak keys and/or weak values to be cleared.
N** There is also a list 'protogray' for prototypes that need to have
N** their caches cleared.
N
N*/
N
N
Nstruct lua_longjmp;  /* defined in ldo.c */
N
N
N/*
N** Atomic type (relative to signals) to better ensure that 'lua_sethook'
N** is thread safe
N*/
N#if !defined(l_signalT)
X#if !0L
N#include <signal.h>
L 1 "D:\Program_Files_x86\Keil_v5\ARM\ARMCC\Bin\..\include\signal.h" 1
N/* signal.h
N *
N * Copyright (C) Codemist Ltd., 1988-1993.
N * Copyright 1991-1999 ARM Limited. All rights reserved.
N *
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: statham $
N */
N
N/*
N * signal.h declares a type and two functions and defines several macros, for
N * handling various signals (conditions that may be reported during program
N * execution).
N */
N
N#ifndef __signal_h
N#define __signal_h
N#define __ARMCLIB_VERSION 5060009
N
N  #ifndef __SIGNAL_DECLS
N  #define __SIGNAL_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
Ntypedef int sig_atomic_t;
N   /* type which is the integral type of an object that can be modified as */
N   /* an atomic entity, even in the presence of asynchronous interrupts. */
N
N#if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X#if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S  #define _AEABI_PORTABLE
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S
Sextern void __aeabi_SIG_DFL(int);
S#define SIG_DFL (__CLIBNS __aeabi_SIG_DFL)
Sextern void __aeabi_SIG_ERR(int);
S#define SIG_ERR (__CLIBNS __aeabi_SIG_ERR)
Sextern void __aeabi_SIG_IGN(int);
S#define SIG_IGN (__CLIBNS __aeabi_SIG_IGN)
S
Sextern const int __aeabi_SIGABRT;
S#define SIGABRT (__CLIBNS __aeabi_SIGABRT)
Sextern const int __aeabi_SIGFPE;
S#define SIGFPE (__CLIBNS __aeabi_SIGFPE)
Sextern const int __aeabi_SIGILL;
S#define SIGILL (__CLIBNS __aeabi_SIGILL)
Sextern const int __aeabi_SIGINT;
S#define SIGINT (__CLIBNS __aeabi_SIGINT)
Sextern const int __aeabi_SIGSEGV;
S#define SIGSEGV (__CLIBNS __aeabi_SIGSEGV)
Sextern const int __aeabi_SIGTERM;
S#define SIGTERM (__CLIBNS __aeabi_SIGTERM)
S
N#else
N
N   /*
N    * Each of the following macros expand to a constant expression with a
N    * distinct value and has the same type as the second argument to, and the
N    * return value of the signal function, and whose value compares unequal to
N    * the address of any declarable function.  Use a typedef to ensure that
N    * the function pointer type is extern "C".
N    */
Ntypedef void(*__ARM_sigh_t)(int);
N#define SIG_DFL ( (__CLIBNS __ARM_sigh_t) -1 )
N#define SIG_ERR ( (__CLIBNS __ARM_sigh_t) -2 )
N#define SIG_IGN ( (__CLIBNS __ARM_sigh_t) -3 )
N
N   /*
N    * Each of the following macros expand to a positive integral constant
N    * expression that is the signal number corresponding the the specified
N    * condition.
N    */
N#define SIGABRT   1 /* abort                         */
N#define SIGFPE    2 /* arithmetic exception          */
N#define SIGILL    3 /* illegal instruction           */
N#define SIGINT    4 /* attention request from user   */
N#define SIGSEGV   5 /* bad memory access             */
N#define SIGTERM   6 /* termination request           */
N#endif
N
N   /* (these following macros are not part of the ANSI standard,
N    * but private to this implementation)
N    */
N#define SIGSTAK   7  /* stack overflow                */
N#define SIGRTRED  8  /* run-time redirection error    */
N#define SIGRTMEM  9  /* run-time memory error         */
N/* Signal numbers 10 and 11 are available for the user */
N#define SIGUSR1  10
N#define SIGUSR2  11
N#define SIGPVFN  12 /* pure virtual function called   */
N#define SIGCPPL  13 /* miscellaneous exception from C++ library */
N#define SIGOUTOFHEAP 14 /* ::operator new or new[] cannot allocate memory */
N/* Signal numbers 15-31 are reserved to the implementation */
N/* Signal numbers 32 and larger are for more user signals */
N
Nextern void (*signal (int /*sig*/, void (* /*func*/ )(int)))(int) __attribute__((__nonnull__(2)));
N   /*
N    * Chooses one of three ways in which receipt of the signal number sig is to
N    * be subsequently handled. If the value of func is SIG_DFL, default
N    * handling for that signal will occur. If the value of func is SIG_IGN, the
N    * signal will be ignored. Otherwise func shall point to a function to be
N    * called when that signal occurs.
N    * When a signal occurs, if func points to a function, first the
N    * equivalent of signal(sig, SIG_DFL); is executed. (If the value of sig
N    * is SIGILL, whether the reset to SIG_DFL occurs is implementation-
N    * defined). Next the equivalent of (*func)(sig); is executed. The
N    * function may terminate by calling the abort, exit or longjmp function.
N    * If func executes a return statement and the value of sig was SIGFPE or
N    * any other implementation-defined value corresponding to a computational
N    * exception, the behaviour is undefined. Otherwise, the program will
N    * resume execution at the point it was interrupted.
N    * If the signal occurs other than as a result of calling the abort or raise
N    * function, the behaviour is undefined if the signal handler calls any
N    * function in the standard library other than the signal function itself
N    * or refers to any object with static storage duration other than by
N    * assigning a value to a volatile static variable of type sig_atomic_t.
N    * At program startup, the equivalent of signal(sig, SIG_IGN); may be
N    * executed for some signals selected in an implementation-defined manner;
N    * the equivalent of signal(sig, SIG_DFL); is executed for all other
N    * signals defined by the implementation.
N    * Returns: If the request can be honoured, the signal function returns the
N    *          value of func for most recent call to signal for the specified
N    *          signal sig. Otherwise, a value of SIG_ERR is returned and the
N    *          integer expression errno is set to indicate the error.
N    */
N
Nextern int raise(int /*sig*/);
N   /* sends the signal sig to the executing program. */
N   /* Returns: zero if successful, non-zero if unsuccessful. */
N
N#define _DIVBYZERO 2                   /* SIGFPE param for integer div-by-0 */
N#ifndef __STRICT_ANSI__
N#define DIVBYZERO 2                    /* SIGFPE param for integer div-by-0 */
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */ 
N  #endif /* __SIGNAL_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __SIGNAL_NO_EXPORTS
S      using ::std::sig_atomic_t;
S      using ::std::raise;
S      using ::std::signal;
S    #endif 
N  #endif /* __cplusplus */ 
N
N#endif
N
N/* end of signal.h */
N
L 61 "..\..\..\M6P1(L)_Lua\lua\lstate.h" 2
N#define l_signalT	sig_atomic_t
N#endif
N
N
N/* extra stack space to handle TM calls and some other extras */
N#define EXTRA_STACK   5
N
N
N#define BASIC_STACK_SIZE        (2*LUA_MINSTACK)
N
N
N/* kinds of Garbage Collection */
N#define KGC_INC		0	/* incremental gc */
N#define KGC_GEN		1	/* generational gc */
N
N
Ntypedef struct stringtable {
N  TString **hash;
N  int nuse;  /* number of elements */
N  int size;
N} stringtable;
N
N
N/*
N** Information about a call.
N*/
Ntypedef struct CallInfo {
N  StkId func;  /* function index in the stack */
N  StkId	top;  /* top for this function */
N  struct CallInfo *previous, *next;  /* dynamic call link */
N  union {
N    struct {  /* only for Lua functions */
N      const Instruction *savedpc;
N      l_signalT trap;
X      sig_atomic_t trap;
N      int nextraargs;  /* # of extra arguments in vararg functions */
N    } l;
N    struct {  /* only for C functions */
N      lua_KFunction k;  /* continuation in case of yields */
N      ptrdiff_t old_errfunc;
N      lua_KContext ctx;  /* context info. in case of yields */
N    } c;
N  } u;
N  union {
N    int funcidx;  /* called-function index */
N    int nyield;  /* number of values yielded */
N    struct {  /* info about transfered values (for call/return hooks) */
N      unsigned short fTransfer;  /* offset of first value transfered */
N      unsigned short nTransfer;  /* number of values transfered */
N    } transferinfo;
N  } u2;
N  short nresults;  /* expected number of results from this function */
N  unsigned short callstatus;
N} CallInfo;
N
N
N/*
N** Bits in CallInfo status
N*/
N#define CIST_OAH	(1<<0)	/* original value of 'allowhook' */
N#define CIST_C		(1<<1)	/* call is running a C function */
N#define CIST_HOOKED	(1<<2)	/* call is running a debug hook */
N#define CIST_YPCALL	(1<<3)	/* call is a yieldable protected call */
N#define CIST_TAIL	(1<<4)	/* call was tail called */
N#define CIST_HOOKYIELD	(1<<5)	/* last hook called yielded */
N#define CIST_LEQ	(1<<6)  /* using __lt for __le */
N#define CIST_FIN	(1<<7)  /* call is running a finalizer */
N#define CIST_TRAN	(1<<8)	/* 'ci' has transfer information */
N
N/* active function is a Lua function */
N#define isLua(ci)	(!((ci)->callstatus & CIST_C))
N
N/* call is running Lua code (not a hook) */
N#define isLuacode(ci)	(!((ci)->callstatus & (CIST_C | CIST_HOOKED)))
N
N/* assume that CIST_OAH has offset 0 and that 'v' is strictly 0/1 */
N#define setoah(st,v)	((st) = ((st) & ~CIST_OAH) | (v))
N#define getoah(st)	((st) & CIST_OAH)
N
N
N/*
N** 'global state', shared by all threads of this state
N*/
Ntypedef struct global_State {
N  lua_Alloc frealloc;  /* function to reallocate memory */
N  void *ud;         /* auxiliary data to 'frealloc' */
N  l_mem totalbytes;  /* number of bytes currently allocated - GCdebt */
N  l_mem GCdebt;  /* bytes allocated not yet compensated by the collector */
N  lu_mem GCestimate;  /* an estimate of the non-garbage memory in use */
N  stringtable strt;  /* hash table for strings */
N  TValue l_registry;
N  unsigned int seed;  /* randomized seed for hashes */
N  lu_byte currentwhite;
N  lu_byte gcstate;  /* state of garbage collector */
N  lu_byte gckind;  /* kind of GC running */
N  lu_byte genminormul;  /* control for minor generational collections */
N  lu_byte genmajormul;  /* control for major generational collections */
N  lu_byte gcrunning;  /* true if GC is running */
N  lu_byte gcemergency;  /* true if this is an emergency collection */
N  lu_byte gcpause;  /* size of pause between successive GCs */
N  lu_byte gcstepmul;  /* GC "speed" */
N  lu_byte gcstepsize;  /* (log2 of) GC granularity */
N  GCObject *allgc;  /* list of all collectable objects */
N  GCObject **sweepgc;  /* current position of sweep in list */
N  GCObject *finobj;  /* list of collectable objects with finalizers */
N  GCObject *gray;  /* list of gray objects */
N  GCObject *grayagain;  /* list of objects to be traversed atomically */
N  GCObject *weak;  /* list of tables with weak values */
N  GCObject *ephemeron;  /* list of ephemeron tables (weak keys) */
N  GCObject *allweak;  /* list of all-weak tables */
N  GCObject *protogray;  /* list of prototypes with "new" caches */
N  GCObject *tobefnz;  /* list of userdata to be GC */
N  GCObject *fixedgc;  /* list of objects not to be collected */
N  /* fields for generational collector */
N  GCObject *survival;  /* start of objects that survived one GC cycle */
N  GCObject *old;  /* start of old objects */
N  GCObject *reallyold;  /* old objects with more than one cycle */
N  GCObject *finobjsur;  /* list of survival objects with finalizers */
N  GCObject *finobjold;  /* list of old objects with finalizers */
N  GCObject *finobjrold;  /* list of really old objects with finalizers */
N  struct lua_State *twups;  /* list of threads with open upvalues */
N  lua_CFunction panic;  /* to be called in unprotected errors */
N  struct lua_State *mainthread;
N  const lua_Number *version;  /* pointer to version number */
N  TString *memerrmsg;  /* message for memory-allocation errors */
N  TString *tmname[TM_N];  /* array with tag-method names */
N  struct Table *mt[LUA_NUMTAGS];  /* metatables for basic types */
X  struct Table *mt[9];   
N  TString *strcache[STRCACHE_N][STRCACHE_M];  /* cache for strings in API */
X  TString *strcache[53][2];   
N} global_State;
N
N
N/*
N** 'per thread' state
N*/
Nstruct lua_State {
N  CommonHeader;
X  struct GCObject *next; lu_byte tt; lu_byte marked;
N  unsigned short nci;  /* number of items in 'ci' list */
N  lu_byte status;
N  StkId top;  /* first free slot in the stack */
N  global_State *l_G;
N  CallInfo *ci;  /* call info for current function */
N  const Instruction *oldpc;  /* last pc traced */
N  StkId stack_last;  /* last free slot in the stack */
N  StkId stack;  /* stack base */
N  UpVal *openupval;  /* list of open upvalues in this stack */
N  GCObject *gclist;
N  struct lua_State *twups;  /* list of threads with open upvalues */
N  struct lua_longjmp *errorJmp;  /* current error recover point */
N  CallInfo base_ci;  /* CallInfo for first level (C calling Lua) */
N  volatile lua_Hook hook;
N  ptrdiff_t errfunc;  /* current error handling function (stack index) */
N  int stacksize;
N  int basehookcount;
N  int hookcount;
N  unsigned short nny;  /* number of non-yieldable calls in stack */
N  unsigned short nCcalls;  /* number of nested C calls */
N  l_signalT hookmask;
X  sig_atomic_t hookmask;
N  lu_byte allowhook;
N};
N
N
N#define G(L)	(L->l_G)
N
N
N/*
N** Union of all collectable objects (only for conversions)
N*/
Nunion GCUnion {
N  GCObject gc;  /* common header */
N  struct TString ts;
N  struct Udata u;
N  union Closure cl;
N  struct Table h;
N  struct Proto p;
N  struct lua_State th;  /* thread */
N  struct UpVal upv;
N};
N
N
N#define cast_u(o)	cast(union GCUnion *, (o))
N
N/* macros to convert a GCObject into a specific value */
N#define gco2ts(o)  \
N	check_exp(novariant((o)->tt) == LUA_TSTRING, &((cast_u(o))->ts))
X#define gco2ts(o)  	check_exp(novariant((o)->tt) == LUA_TSTRING, &((cast_u(o))->ts))
N#define gco2u(o)  check_exp((o)->tt == LUA_TUSERDATA, &((cast_u(o))->u))
N#define gco2lcl(o)  check_exp((o)->tt == LUA_TLCL, &((cast_u(o))->cl.l))
N#define gco2ccl(o)  check_exp((o)->tt == LUA_TCCL, &((cast_u(o))->cl.c))
N#define gco2cl(o)  \
N	check_exp(novariant((o)->tt) == LUA_TFUNCTION, &((cast_u(o))->cl))
X#define gco2cl(o)  	check_exp(novariant((o)->tt) == LUA_TFUNCTION, &((cast_u(o))->cl))
N#define gco2t(o)  check_exp((o)->tt == LUA_TTABLE, &((cast_u(o))->h))
N#define gco2p(o)  check_exp((o)->tt == LUA_TPROTO, &((cast_u(o))->p))
N#define gco2th(o)  check_exp((o)->tt == LUA_TTHREAD, &((cast_u(o))->th))
N#define gco2upv(o)  check_exp((o)->tt == LUA_TUPVAL, &((cast_u(o))->upv))
N
N
N/*
N** macro to convert a Lua object into a GCObject
N** (The access to 'tt' tries to ensure that 'v' is actually a Lua object.)
N*/
N#define obj2gco(v)	check_exp((v)->tt >= LUA_TSTRING, &(cast_u(v)->gc))
N
N
N/* actual number of total bytes allocated */
N#define gettotalbytes(g)	cast(lu_mem, (g)->totalbytes + (g)->GCdebt)
N
NLUAI_FUNC void luaE_setdebt (global_State *g, l_mem debt);
Xextern void luaE_setdebt (global_State *g, l_mem debt);
NLUAI_FUNC void luaE_freethread (lua_State *L, lua_State *L1);
Xextern void luaE_freethread (lua_State *L, lua_State *L1);
NLUAI_FUNC CallInfo *luaE_extendCI (lua_State *L);
Xextern CallInfo *luaE_extendCI (lua_State *L);
NLUAI_FUNC void luaE_freeCI (lua_State *L);
Xextern void luaE_freeCI (lua_State *L);
NLUAI_FUNC void luaE_shrinkCI (lua_State *L);
Xextern void luaE_shrinkCI (lua_State *L);
NLUAI_FUNC void luaE_incCcalls (lua_State *L);
Xextern void luaE_incCcalls (lua_State *L);
N
N
N#endif
N
L 13 "..\..\..\M6P1(L)_Lua\lua\lapi.h" 2
N
N#define api_incr_top(L)   {L->top++; api_check(L, L->top <= L->ci->top, \
N				"stack overflow");}
X#define api_incr_top(L)   {L->top++; api_check(L, L->top <= L->ci->top, 				"stack overflow");}
N
N#define adjustresults(L,nres) \
N    { if ((nres) == LUA_MULTRET && L->ci->top < L->top) L->ci->top = L->top; }
X#define adjustresults(L,nres)     { if ((nres) == LUA_MULTRET && L->ci->top < L->top) L->ci->top = L->top; }
N
N#define api_checknelems(L,n)	api_check(L, (n) < (L->top - L->ci->func), \
N				  "not enough elements in the stack")
X#define api_checknelems(L,n)	api_check(L, (n) < (L->top - L->ci->func), 				  "not enough elements in the stack")
N
N
N#endif
L 20 "..\..\..\M6P1(L)_Lua\lua\lapi.c" 2
N#include "ldebug.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\ldebug.h" 1
N/*
N** $Id: ldebug.h,v 2.15 2017/06/27 11:35:31 roberto Exp roberto $
N** Auxiliary functions from Debug Interface module
N** See Copyright Notice in lua.h
N*/
N
N#ifndef ldebug_h
N#define ldebug_h
N
N
N#include "lstate.h"
N
N
N#define pcRel(pc, p)	(cast_int((pc) - (p)->code) - 1)
N
N#define resethookcount(L)	(L->hookcount = L->basehookcount)
N
N/*
N** mark for entries in 'lineinfo' array that has absolute information in
N** 'abslineinfo' array
N*/
N#define ABSLINEINFO	(-0x80)
N
NLUAI_FUNC int luaG_getfuncline (Proto *f, int pc);
Xextern int luaG_getfuncline (Proto *f, int pc);
NLUAI_FUNC l_noret luaG_typeerror (lua_State *L, const TValue *o,
Xextern void luaG_typeerror (lua_State *L, const TValue *o,
N                                                const char *opname);
NLUAI_FUNC l_noret luaG_concaterror (lua_State *L, const TValue *p1,
Xextern void luaG_concaterror (lua_State *L, const TValue *p1,
N                                                  const TValue *p2);
NLUAI_FUNC l_noret luaG_opinterror (lua_State *L, const TValue *p1,
Xextern void luaG_opinterror (lua_State *L, const TValue *p1,
N                                                 const TValue *p2,
N                                                 const char *msg);
NLUAI_FUNC l_noret luaG_tointerror (lua_State *L, const TValue *p1,
Xextern void luaG_tointerror (lua_State *L, const TValue *p1,
N                                                 const TValue *p2);
NLUAI_FUNC l_noret luaG_ordererror (lua_State *L, const TValue *p1,
Xextern void luaG_ordererror (lua_State *L, const TValue *p1,
N                                                 const TValue *p2);
NLUAI_FUNC l_noret luaG_runerror (lua_State *L, const char *fmt, ...);
Xextern void luaG_runerror (lua_State *L, const char *fmt, ...);
NLUAI_FUNC const char *luaG_addinfo (lua_State *L, const char *msg,
Xextern const char *luaG_addinfo (lua_State *L, const char *msg,
N                                                  TString *src, int line);
NLUAI_FUNC l_noret luaG_errormsg (lua_State *L);
Xextern void luaG_errormsg (lua_State *L);
NLUAI_FUNC void luaG_traceexec (lua_State *L);
Xextern void luaG_traceexec (lua_State *L);
N
N
N#endif
L 21 "..\..\..\M6P1(L)_Lua\lua\lapi.c" 2
N#include "ldo.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\ldo.h" 1
N/*
N** $Id: ldo.h,v 2.42 2018/02/15 15:34:29 roberto Exp roberto $
N** Stack and Call structure of Lua
N** See Copyright Notice in lua.h
N*/
N
N#ifndef ldo_h
N#define ldo_h
N
N
N#include "lobject.h"
N#include "lstate.h"
N#include "lzio.h"
N
N
N/*
N** Macro to check stack size and grow stack if needed.  Parameters
N** 'pre'/'pos' allow the macro to preserve a pointer into the
N** stack across reallocations, doing the work only when needed.
N** 'condmovestack' is used in heavy tests to force a stack reallocation
N** at every check.
N*/
N#define luaD_checkstackaux(L,n,pre,pos)  \
N	if (L->stack_last - L->top <= (n)) \
N	  { pre; luaD_growstack(L, n, 1); pos; } \
N        else { condmovestack(L,pre,pos); }
X#define luaD_checkstackaux(L,n,pre,pos)  	if (L->stack_last - L->top <= (n)) 	  { pre; luaD_growstack(L, n, 1); pos; }         else { condmovestack(L,pre,pos); }
N
N/* In general, 'pre'/'pos' are empty (nothing to save) */
N#define luaD_checkstack(L,n)	luaD_checkstackaux(L,n,(void)0,(void)0)
N
N
N
N#define savestack(L,p)		((char *)(p) - (char *)L->stack)
N#define restorestack(L,n)	((StkId)((char *)L->stack + (n)))
N
N
N/* macro to check stack size, preserving 'p' */
N#define checkstackp(L,n,p)  \
N  luaD_checkstackaux(L, n, \
N    ptrdiff_t t__ = savestack(L, p);  /* save 'p' */ \
N    luaC_checkGC(L),  /* stack grow uses memory */ \
N    p = restorestack(L, t__))  /* 'pos' part: restore 'p' */
X#define checkstackp(L,n,p)    luaD_checkstackaux(L, n,     ptrdiff_t t__ = savestack(L, p);        luaC_checkGC(L),        p = restorestack(L, t__))   
N
N
N/* macro to check stack size and GC */
N#define checkstackGC(L,fsize)  \
N	luaD_checkstackaux(L, (fsize), (void)0, luaC_checkGC(L))
X#define checkstackGC(L,fsize)  	luaD_checkstackaux(L, (fsize), (void)0, luaC_checkGC(L))
N
N
N/* type of protected functions, to be ran by 'runprotected' */
Ntypedef void (*Pfunc) (lua_State *L, void *ud);
N
NLUAI_FUNC int luaD_protectedparser (lua_State *L, ZIO *z, const char *name,
Xextern int luaD_protectedparser (lua_State *L, ZIO *z, const char *name,
N                                                  const char *mode);
NLUAI_FUNC void luaD_hook (lua_State *L, int event, int line,
Xextern void luaD_hook (lua_State *L, int event, int line,
N                                        int fTransfer, int nTransfer);
NLUAI_FUNC void luaD_hookcall (lua_State *L, CallInfo *ci);
Xextern void luaD_hookcall (lua_State *L, CallInfo *ci);
NLUAI_FUNC void luaD_pretailcall (lua_State *L, CallInfo *ci, StkId func, int n);
Xextern void luaD_pretailcall (lua_State *L, CallInfo *ci, StkId func, int n);
NLUAI_FUNC void luaD_call (lua_State *L, StkId func, int nResults);
Xextern void luaD_call (lua_State *L, StkId func, int nResults);
NLUAI_FUNC void luaD_callnoyield (lua_State *L, StkId func, int nResults);
Xextern void luaD_callnoyield (lua_State *L, StkId func, int nResults);
NLUAI_FUNC void luaD_tryfuncTM (lua_State *L, StkId func);
Xextern void luaD_tryfuncTM (lua_State *L, StkId func);
NLUAI_FUNC int luaD_pcall (lua_State *L, Pfunc func, void *u,
Xextern int luaD_pcall (lua_State *L, Pfunc func, void *u,
N                                        ptrdiff_t oldtop, ptrdiff_t ef);
NLUAI_FUNC void luaD_poscall (lua_State *L, CallInfo *ci, StkId firstResult,
Xextern void luaD_poscall (lua_State *L, CallInfo *ci, StkId firstResult,
N                                          int nres);
NLUAI_FUNC int luaD_reallocstack (lua_State *L, int newsize, int raiseerror);
Xextern int luaD_reallocstack (lua_State *L, int newsize, int raiseerror);
NLUAI_FUNC int luaD_growstack (lua_State *L, int n, int raiseerror);
Xextern int luaD_growstack (lua_State *L, int n, int raiseerror);
NLUAI_FUNC void luaD_shrinkstack (lua_State *L);
Xextern void luaD_shrinkstack (lua_State *L);
NLUAI_FUNC void luaD_inctop (lua_State *L);
Xextern void luaD_inctop (lua_State *L);
N
NLUAI_FUNC l_noret luaD_throw (lua_State *L, int errcode);
Xextern void luaD_throw (lua_State *L, int errcode);
NLUAI_FUNC int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud);
Xextern int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud);
N
N#endif
N
L 22 "..\..\..\M6P1(L)_Lua\lua\lapi.c" 2
N#include "lfunc.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lfunc.h" 1
N/*
N** $Id: lfunc.h,v 2.19 2018/01/28 15:13:26 roberto Exp roberto $
N** Auxiliary functions to manipulate prototypes and closures
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lfunc_h
N#define lfunc_h
N
N
N#include "lobject.h"
N
N
N#define sizeCclosure(n)	(cast_int(offsetof(CClosure, upvalue)) + \
N                         cast_int(sizeof(TValue)) * (n))
X#define sizeCclosure(n)	(cast_int(offsetof(CClosure, upvalue)) +                          cast_int(sizeof(TValue)) * (n))
N
N#define sizeLclosure(n)	(cast_int(offsetof(LClosure, upvals)) + \
N                         cast_int(sizeof(TValue *)) * (n))
X#define sizeLclosure(n)	(cast_int(offsetof(LClosure, upvals)) +                          cast_int(sizeof(TValue *)) * (n))
N
N
N/* test whether thread is in 'twups' list */
N#define isintwups(L)	(L->twups != L)
N
N
N/*
N** maximum number of upvalues in a closure (both C and Lua). (Value
N** must fit in a VM register.)
N*/
N#define MAXUPVAL	255
N
N
N#define upisopen(up)	((up)->v != &(up)->u.value)
N
N
N#define uplevel(up)	check_exp(upisopen(up), cast(StkId, (up)->v))
N
N
N/*
N** maximum number of misses before giving up the cache of closures
N** in prototypes
N*/
N#define MAXMISS		10
N
N
NLUAI_FUNC Proto *luaF_newproto (lua_State *L);
Xextern Proto *luaF_newproto (lua_State *L);
NLUAI_FUNC CClosure *luaF_newCclosure (lua_State *L, int nelems);
Xextern CClosure *luaF_newCclosure (lua_State *L, int nelems);
NLUAI_FUNC LClosure *luaF_newLclosure (lua_State *L, int nelems);
Xextern LClosure *luaF_newLclosure (lua_State *L, int nelems);
NLUAI_FUNC void luaF_initupvals (lua_State *L, LClosure *cl);
Xextern void luaF_initupvals (lua_State *L, LClosure *cl);
NLUAI_FUNC UpVal *luaF_findupval (lua_State *L, StkId level);
Xextern UpVal *luaF_findupval (lua_State *L, StkId level);
NLUAI_FUNC void luaF_close (lua_State *L, StkId level);
Xextern void luaF_close (lua_State *L, StkId level);
NLUAI_FUNC void luaF_unlinkupval (UpVal *uv);
Xextern void luaF_unlinkupval (UpVal *uv);
NLUAI_FUNC void luaF_freeproto (lua_State *L, Proto *f);
Xextern void luaF_freeproto (lua_State *L, Proto *f);
NLUAI_FUNC const char *luaF_getlocalname (const Proto *func, int local_number,
Xextern const char *luaF_getlocalname (const Proto *func, int local_number,
N                                         int pc);
N
N
N#endif
L 23 "..\..\..\M6P1(L)_Lua\lua\lapi.c" 2
N#include "lgc.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lgc.h" 1
N/*
N** $Id: lgc.h,v 2.102 2018/02/19 13:55:34 roberto Exp roberto $
N** Garbage Collector
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lgc_h
N#define lgc_h
N
N
N#include "lobject.h"
N#include "lstate.h"
N
N/*
N** Collectable objects may have one of three colors: white, which
N** means the object is not marked; gray, which means the
N** object is marked, but its references may be not marked; and
N** black, which means that the object and all its references are marked.
N** The main invariant of the garbage collector, while marking objects,
N** is that a black object can never point to a white one. Moreover,
N** any gray object must be in a "gray list" (gray, grayagain, weak,
N** allweak, ephemeron) so that it can be visited again before finishing
N** the collection cycle. These lists have no meaning when the invariant
N** is not being enforced (e.g., sweep phase).
N*/
N
N
N/*
N** Possible states of the Garbage Collector
N*/
N#define GCSpropagate	0
N#define GCSenteratomic	1
N#define GCSatomic	2
N#define GCSswpallgc	3
N#define GCSswpfinobj	4
N#define GCSswptobefnz	5
N#define GCSswpend	6
N#define GCScallfin	7
N#define GCSpause	8
N
N
N#define issweepphase(g)  \
N	(GCSswpallgc <= (g)->gcstate && (g)->gcstate <= GCSswpend)
X#define issweepphase(g)  	(GCSswpallgc <= (g)->gcstate && (g)->gcstate <= GCSswpend)
N
N
N/*
N** macro to tell when main invariant (white objects cannot point to black
N** ones) must be kept. During a collection, the sweep
N** phase may break the invariant, as objects turned white may point to
N** still-black objects. The invariant is restored when sweep ends and
N** all objects are white again.
N*/
N
N#define keepinvariant(g)	((g)->gcstate <= GCSatomic)
N
N
N/*
N** some useful bit tricks
N*/
N#define resetbits(x,m)		((x) &= cast_byte(~(m)))
N#define setbits(x,m)		((x) |= (m))
N#define testbits(x,m)		((x) & (m))
N#define bitmask(b)		(1<<(b))
N#define bit2mask(b1,b2)		(bitmask(b1) | bitmask(b2))
N#define l_setbit(x,b)		setbits(x, bitmask(b))
N#define resetbit(x,b)		resetbits(x, bitmask(b))
N#define testbit(x,b)		testbits(x, bitmask(b))
N
N
N/*
N** Layout for bit use in 'marked' field. First three bits are
N** used for object "age" in generational mode.
N*/
N#define WHITE0BIT	3  /* object is white (type 0) */
N#define WHITE1BIT	4  /* object is white (type 1) */
N#define BLACKBIT	5  /* object is black */
N#define FINALIZEDBIT	6  /* object has been marked for finalization */
N#define TESTGRAYBIT	7  /* used by tests (luaL_checkmemory) */
N
N
N#define WHITEBITS	bit2mask(WHITE0BIT, WHITE1BIT)
N
N
N#define iswhite(x)      testbits((x)->marked, WHITEBITS)
N#define isblack(x)      testbit((x)->marked, BLACKBIT)
N#define isgray(x)  /* neither white nor black */  \
N	(!testbits((x)->marked, WHITEBITS | bitmask(BLACKBIT)))
X#define isgray(x)     	(!testbits((x)->marked, WHITEBITS | bitmask(BLACKBIT)))
N
N#define tofinalize(x)	testbit((x)->marked, FINALIZEDBIT)
N
N#define otherwhite(g)	((g)->currentwhite ^ WHITEBITS)
N#define isdeadm(ow,m)	((m) & (ow))
N#define isdead(g,v)	isdeadm(otherwhite(g), (v)->marked)
N
N#define changewhite(x)	((x)->marked ^= WHITEBITS)
N#define gray2black(x)	l_setbit((x)->marked, BLACKBIT)
N
N#define luaC_white(g)	cast_byte((g)->currentwhite & WHITEBITS)
N
N
N/* object age in generational mode */
N#define G_NEW		0	/* created in current cycle */
N#define G_SURVIVAL	1	/* created in previous cycle */
N#define G_OLD0		2	/* marked old by frw. barrier in this cycle */
N#define G_OLD1		3	/* first full cycle as old */
N#define G_OLD		4	/* really old object (not to be visited) */
N#define G_TOUCHED1	5	/* old object touched this cycle */
N#define G_TOUCHED2	6	/* old object touched in previous cycle */
N
N#define AGEBITS		7  /* all age bits (111) */
N
N#define getage(o)	((o)->marked & AGEBITS)
N#define setage(o,a)  ((o)->marked = cast_byte(((o)->marked & (~AGEBITS)) | a))
N#define isold(o)	(getage(o) > G_SURVIVAL)
N
N#define changeage(o,f,t)  \
N	check_exp(getage(o) == (f), (o)->marked ^= ((f)^(t)))
X#define changeage(o,f,t)  	check_exp(getage(o) == (f), (o)->marked ^= ((f)^(t)))
N
N
N/* Default Values for GC parameters */
N#define LUAI_GENMAJORMUL         100
N#define LUAI_GENMINORMUL         20
N
N/* wait memory to double before starting new cycle */
N#define LUAI_GCPAUSE    200     /* 200% */
N
N/*
N** some gc parameters are stored divided by 4 to allow a maximum value
N** larger than 1000 in a 'lu_byte'.
N*/
N#define getgcparam(p)	((p) * 4)
N#define setgcparam(p,v)	((p) = (v) / 4)
N
N#define LUAI_GCMUL      100
N
N/* how much to allocate before next GC step (log2) */
N#define LUAI_GCSTEPSIZE 13      /* 8 KB */
N
N
N/*
N** Does one step of collection when debt becomes positive. 'pre'/'pos'
N** allows some adjustments to be done only when needed. macro
N** 'condchangemem' is used only for heavy tests (forcing a full
N** GC cycle on every opportunity)
N*/
N#define luaC_condGC(L,pre,pos) \
N	{ if (G(L)->GCdebt > 0) { pre; luaC_step(L); pos;}; \
N	  condchangemem(L,pre,pos); }
X#define luaC_condGC(L,pre,pos) 	{ if (G(L)->GCdebt > 0) { pre; luaC_step(L); pos;}; 	  condchangemem(L,pre,pos); }
N
N/* more often than not, 'pre'/'pos' are empty */
N#define luaC_checkGC(L)		luaC_condGC(L,(void)0,(void)0)
N
N
N#define luaC_barrier(L,p,v) (  \
N	(iscollectable(v) && isblack(p) && iswhite(gcvalue(v))) ?  \
N	luaC_barrier_(L,obj2gco(p),gcvalue(v)) : cast_void(0))
X#define luaC_barrier(L,p,v) (  	(iscollectable(v) && isblack(p) && iswhite(gcvalue(v))) ?  	luaC_barrier_(L,obj2gco(p),gcvalue(v)) : cast_void(0))
N
N#define luaC_barrierback(L,p,v) (  \
N	(iscollectable(v) && isblack(p) && iswhite(gcvalue(v))) ? \
N	luaC_barrierback_(L,p) : cast_void(0))
X#define luaC_barrierback(L,p,v) (  	(iscollectable(v) && isblack(p) && iswhite(gcvalue(v))) ? 	luaC_barrierback_(L,p) : cast_void(0))
N
N#define luaC_objbarrier(L,p,o) (  \
N	(isblack(p) && iswhite(o)) ? \
N	luaC_barrier_(L,obj2gco(p),obj2gco(o)) : cast_void(0))
X#define luaC_objbarrier(L,p,o) (  	(isblack(p) && iswhite(o)) ? 	luaC_barrier_(L,obj2gco(p),obj2gco(o)) : cast_void(0))
N
N#define luaC_protobarrier(L,p,o) \
N	(isblack(p) ? luaC_protobarrier_(L,p) : cast_void(0))
X#define luaC_protobarrier(L,p,o) 	(isblack(p) ? luaC_protobarrier_(L,p) : cast_void(0))
N
NLUAI_FUNC void luaC_fix (lua_State *L, GCObject *o);
Xextern void luaC_fix (lua_State *L, GCObject *o);
NLUAI_FUNC void luaC_freeallobjects (lua_State *L);
Xextern void luaC_freeallobjects (lua_State *L);
NLUAI_FUNC void luaC_step (lua_State *L);
Xextern void luaC_step (lua_State *L);
NLUAI_FUNC void luaC_runtilstate (lua_State *L, int statesmask);
Xextern void luaC_runtilstate (lua_State *L, int statesmask);
NLUAI_FUNC void luaC_fullgc (lua_State *L, int isemergency);
Xextern void luaC_fullgc (lua_State *L, int isemergency);
NLUAI_FUNC GCObject *luaC_newobj (lua_State *L, int tt, size_t sz);
Xextern GCObject *luaC_newobj (lua_State *L, int tt, size_t sz);
NLUAI_FUNC void luaC_barrier_ (lua_State *L, GCObject *o, GCObject *v);
Xextern void luaC_barrier_ (lua_State *L, GCObject *o, GCObject *v);
NLUAI_FUNC void luaC_barrierback_ (lua_State *L, GCObject *o);
Xextern void luaC_barrierback_ (lua_State *L, GCObject *o);
NLUAI_FUNC void luaC_protobarrier_ (lua_State *L, Proto *p);
Xextern void luaC_protobarrier_ (lua_State *L, Proto *p);
NLUAI_FUNC void luaC_checkfinalizer (lua_State *L, GCObject *o, Table *mt);
Xextern void luaC_checkfinalizer (lua_State *L, GCObject *o, Table *mt);
NLUAI_FUNC void luaC_changemode (lua_State *L, int newmode);
Xextern void luaC_changemode (lua_State *L, int newmode);
N
N
N#endif
L 24 "..\..\..\M6P1(L)_Lua\lua\lapi.c" 2
N#include "lmem.h"
N#include "lobject.h"
N#include "lstate.h"
N#include "lstring.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lstring.h" 1
N/*
N** $Id: lstring.h,v 1.63 2017/11/23 19:29:04 roberto Exp roberto $
N** String table (keep all strings handled by Lua)
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lstring_h
N#define lstring_h
N
N#include "lgc.h"
N#include "lobject.h"
N#include "lstate.h"
N
N
N/*
N** Memory-allocation error message must be preallocated (it cannot
N** be created after memory is exhausted)
N*/
N#define MEMERRMSG       "not enough memory"
N
N
N#define sizelstring(l)  (sizeof(union UTString) + ((l) + 1) * sizeof(char))
N
N#define luaS_newliteral(L, s)	(luaS_newlstr(L, "" s, \
N                                 (sizeof(s)/sizeof(char))-1))
X#define luaS_newliteral(L, s)	(luaS_newlstr(L, "" s,                                  (sizeof(s)/sizeof(char))-1))
N
N
N/*
N** test whether a string is a reserved word
N*/
N#define isreserved(s)	((s)->tt == LUA_TSHRSTR && (s)->extra > 0)
N
N
N/*
N** equality for short strings, which are always internalized
N*/
N#define eqshrstr(a,b)	check_exp((a)->tt == LUA_TSHRSTR, (a) == (b))
N
N
NLUAI_FUNC unsigned int luaS_hash (const char *str, size_t l, unsigned int seed);
Xextern unsigned int luaS_hash (const char *str, size_t l, unsigned int seed);
NLUAI_FUNC unsigned int luaS_hashlongstr (TString *ts);
Xextern unsigned int luaS_hashlongstr (TString *ts);
NLUAI_FUNC int luaS_eqlngstr (TString *a, TString *b);
Xextern int luaS_eqlngstr (TString *a, TString *b);
NLUAI_FUNC void luaS_resize (lua_State *L, int newsize);
Xextern void luaS_resize (lua_State *L, int newsize);
NLUAI_FUNC void luaS_clearcache (global_State *g);
Xextern void luaS_clearcache (global_State *g);
NLUAI_FUNC void luaS_init (lua_State *L);
Xextern void luaS_init (lua_State *L);
NLUAI_FUNC void luaS_remove (lua_State *L, TString *ts);
Xextern void luaS_remove (lua_State *L, TString *ts);
NLUAI_FUNC Udata *luaS_newudata (lua_State *L, size_t s, int nuvalue);
Xextern Udata *luaS_newudata (lua_State *L, size_t s, int nuvalue);
NLUAI_FUNC TString *luaS_newlstr (lua_State *L, const char *str, size_t l);
Xextern TString *luaS_newlstr (lua_State *L, const char *str, size_t l);
NLUAI_FUNC TString *luaS_new (lua_State *L, const char *str);
Xextern TString *luaS_new (lua_State *L, const char *str);
NLUAI_FUNC TString *luaS_createlngstrobj (lua_State *L, size_t l);
Xextern TString *luaS_createlngstrobj (lua_State *L, size_t l);
N
N
N#endif
L 28 "..\..\..\M6P1(L)_Lua\lua\lapi.c" 2
N#include "ltable.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\ltable.h" 1
N/*
N** $Id: ltable.h,v 2.25 2017/06/09 16:48:44 roberto Exp roberto $
N** Lua tables (hash)
N** See Copyright Notice in lua.h
N*/
N
N#ifndef ltable_h
N#define ltable_h
N
N#include "lobject.h"
N
N
N#define gnode(t,i)	(&(t)->node[i])
N#define gval(n)		(&(n)->i_val)
N#define gnext(n)	((n)->u.next)
N
N
N#define invalidateTMcache(t)	((t)->flags = 0)
N
N
N/* true when 't' is using 'dummynode' as its hash part */
N#define isdummy(t)		((t)->lastfree == NULL)
N
N#define luaH_emptyobject	(&luaH_emptyobject_)
N
N
N/* allocated size for hash nodes */
N#define allocsizenode(t)	(isdummy(t) ? 0 : sizenode(t))
N
N
N/* returns the Node, given the value of a table entry */
N#define nodefromval(v) 	cast(Node *, (v))
N
N
NLUAI_DDEC const TValue luaH_emptyobject_;
Xextern const TValue luaH_emptyobject_;
N
N
NLUAI_FUNC const TValue *luaH_getint (Table *t, lua_Integer key);
Xextern const TValue *luaH_getint (Table *t, lua_Integer key);
NLUAI_FUNC void luaH_setint (lua_State *L, Table *t, lua_Integer key,
Xextern void luaH_setint (lua_State *L, Table *t, lua_Integer key,
N                                                    TValue *value);
NLUAI_FUNC const TValue *luaH_getshortstr (Table *t, TString *key);
Xextern const TValue *luaH_getshortstr (Table *t, TString *key);
NLUAI_FUNC const TValue *luaH_getstr (Table *t, TString *key);
Xextern const TValue *luaH_getstr (Table *t, TString *key);
NLUAI_FUNC const TValue *luaH_get (Table *t, const TValue *key);
Xextern const TValue *luaH_get (Table *t, const TValue *key);
NLUAI_FUNC TValue *luaH_newkey (lua_State *L, Table *t, const TValue *key);
Xextern TValue *luaH_newkey (lua_State *L, Table *t, const TValue *key);
NLUAI_FUNC TValue *luaH_set (lua_State *L, Table *t, const TValue *key);
Xextern TValue *luaH_set (lua_State *L, Table *t, const TValue *key);
NLUAI_FUNC Table *luaH_new (lua_State *L);
Xextern Table *luaH_new (lua_State *L);
NLUAI_FUNC void luaH_resize (lua_State *L, Table *t, unsigned int nasize,
Xextern void luaH_resize (lua_State *L, Table *t, unsigned int nasize,
N                                                    unsigned int nhsize);
NLUAI_FUNC void luaH_resizearray (lua_State *L, Table *t, unsigned int nasize);
Xextern void luaH_resizearray (lua_State *L, Table *t, unsigned int nasize);
NLUAI_FUNC void luaH_free (lua_State *L, Table *t);
Xextern void luaH_free (lua_State *L, Table *t);
NLUAI_FUNC int luaH_next (lua_State *L, Table *t, StkId key);
Xextern int luaH_next (lua_State *L, Table *t, StkId key);
NLUAI_FUNC lua_Unsigned luaH_getn (Table *t);
Xextern lua_Unsigned luaH_getn (Table *t);
N
N
N#if defined(LUA_DEBUG)
X#if 0L
SLUAI_FUNC Node *luaH_mainposition (const Table *t, const TValue *key);
SLUAI_FUNC int luaH_isdummy (const Table *t);
N#endif
N
N
N#endif
L 29 "..\..\..\M6P1(L)_Lua\lua\lapi.c" 2
N#include "ltm.h"
N#include "lundump.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lundump.h" 1
N/*
N** $Id: lundump.h,v 1.44 2014/06/19 18:27:20 roberto Exp roberto $
N** load precompiled Lua chunks
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lundump_h
N#define lundump_h
N
N#include "llimits.h"
N#include "lobject.h"
N#include "lzio.h"
N
N
N/* data to catch conversion errors */
N#define LUAC_DATA	"\x19\x93\r\n\x1a\n"
N
N#define LUAC_INT	0x5678
N#define LUAC_NUM	cast_num(370.5)
N
N#define MYINT(s)	(s[0]-'0')
N#define LUAC_VERSION	(MYINT(LUA_VERSION_MAJOR)*16+MYINT(LUA_VERSION_MINOR))
N#define LUAC_FORMAT	0	/* this is the official format */
N
N/* load one chunk; from lundump.c */
NLUAI_FUNC LClosure* luaU_undump (lua_State* L, ZIO* Z, const char* name);
Xextern LClosure* luaU_undump (lua_State* L, ZIO* Z, const char* name);
N
N/* dump one chunk; from ldump.c */
NLUAI_FUNC int luaU_dump (lua_State* L, const Proto* f, lua_Writer w,
Xextern int luaU_dump (lua_State* L, const Proto* f, lua_Writer w,
N                         void* data, int strip);
N
N#endif
L 31 "..\..\..\M6P1(L)_Lua\lua\lapi.c" 2
N#include "lvm.h"
L 1 "..\..\..\M6P1(L)_Lua\lua\lvm.h" 1
N/*
N** $Id: lvm.h,v 2.50 2018/02/21 12:54:26 roberto Exp roberto $
N** Lua virtual machine
N** See Copyright Notice in lua.h
N*/
N
N#ifndef lvm_h
N#define lvm_h
N
N
N#include "ldo.h"
N#include "lobject.h"
N#include "ltm.h"
N
N
N#if !defined(LUA_NOCVTN2S)
X#if !0L
N#define cvt2str(o)	ttisnumber(o)
N#else
S#define cvt2str(o)	0	/* no conversion from numbers to strings */
N#endif
N
N
N#if !defined(LUA_NOCVTS2N)
X#if !0L
N#define cvt2num(o)	ttisstring(o)
N#else
S#define cvt2num(o)	0	/* no conversion from strings to numbers */
N#endif
N
N
N/*
N** You can define LUA_FLOORN2I if you want to convert floats to integers
N** by flooring them (instead of raising an error if they are not
N** integral values)
N*/
N#if !defined(LUA_FLOORN2I)
X#if !0L
N#define LUA_FLOORN2I		0
N#endif
N
N
N/* convert an object to a float (including string coercion) */
N#define tonumber(o,n) \
N	(ttisfloat(o) ? (*(n) = fltvalue(o), 1) : luaV_tonumber_(o,n))
X#define tonumber(o,n) 	(ttisfloat(o) ? (*(n) = fltvalue(o), 1) : luaV_tonumber_(o,n))
N
N
N/* convert an object to a float (without string coercion) */
N#define tonumberns(o,n) \
N	(ttisfloat(o) ? ((n) = fltvalue(o), 1) : \
N	(ttisinteger(o) ? ((n) = cast_num(ivalue(o)), 1) : 0))
X#define tonumberns(o,n) 	(ttisfloat(o) ? ((n) = fltvalue(o), 1) : 	(ttisinteger(o) ? ((n) = cast_num(ivalue(o)), 1) : 0))
N
N
N/* convert an object to an integer (including string coercion) */
N#define tointeger(o,i) \
N  (ttisinteger(o) ? (*(i) = ivalue(o), 1) : luaV_tointeger(o,i,LUA_FLOORN2I))
X#define tointeger(o,i)   (ttisinteger(o) ? (*(i) = ivalue(o), 1) : luaV_tointeger(o,i,LUA_FLOORN2I))
N
N
N/* convert an object to an integer (without string coercion) */
N#define tointegerns(o,i) \
N  (ttisinteger(o) ? (*(i) = ivalue(o), 1) : luaV_tointegerns(o,i,LUA_FLOORN2I))
X#define tointegerns(o,i)   (ttisinteger(o) ? (*(i) = ivalue(o), 1) : luaV_tointegerns(o,i,LUA_FLOORN2I))
N
N
N#define intop(op,v1,v2) l_castU2S(l_castS2U(v1) op l_castS2U(v2))
N
N#define luaV_rawequalobj(t1,t2)		luaV_equalobj(NULL,t1,t2)
N
N
N/*
N** fast track for 'gettable': if 't' is a table and 't[k]' is present,
N** return 1 with 'slot' pointing to 't[k]' (position of final result).
N** Otherwise, return 0 (meaning it will have to check metamethod)
N** with 'slot' pointing to an empty 't[k]' (if 't' is a table) or NULL
N** (otherwise). 'f' is the raw get function to use.
N*/
N#define luaV_fastget(L,t,k,slot,f) \
N  (!ttistable(t)  \
N   ? (slot = NULL, 0)  /* not a table; 'slot' is NULL and result is 0 */  \
N   : (slot = f(hvalue(t), k),  /* else, do raw access */  \
N      !isempty(slot)))  /* result not empty? */
X#define luaV_fastget(L,t,k,slot,f)   (!ttistable(t)     ? (slot = NULL, 0)        : (slot = f(hvalue(t), k),           !isempty(slot)))   
N
N
N/*
N** Special case of 'luaV_fastget' for integers, inlining the fast case
N** of 'luaH_getint'.
N*/
N#define luaV_fastgeti(L,t,k,slot) \
N  (!ttistable(t)  \
N   ? (slot = NULL, 0)  /* not a table; 'slot' is NULL and result is 0 */  \
N   : (slot = (l_castS2U(k) - 1u < hvalue(t)->sizearray) \
N              ? &hvalue(t)->array[k - 1] : luaH_getint(hvalue(t), k), \
N      !isempty(slot)))  /* result not empty? */
X#define luaV_fastgeti(L,t,k,slot)   (!ttistable(t)     ? (slot = NULL, 0)        : (slot = (l_castS2U(k) - 1u < hvalue(t)->sizearray)               ? &hvalue(t)->array[k - 1] : luaH_getint(hvalue(t), k),       !isempty(slot)))   
N
N
N/*
N** Finish a fast set operation (when fast get succeeds). In that case,
N** 'slot' points to the place to put the value.
N*/
N#define luaV_finishfastset(L,t,slot,v) \
N    { setobj2t(L, cast(TValue *,slot), v); \
N      luaC_barrierback(L, gcvalue(t), v); }
X#define luaV_finishfastset(L,t,slot,v)     { setobj2t(L, cast(TValue *,slot), v);       luaC_barrierback(L, gcvalue(t), v); }
N
N
N
N
NLUAI_FUNC int luaV_equalobj (lua_State *L, const TValue *t1, const TValue *t2);
Xextern int luaV_equalobj (lua_State *L, const TValue *t1, const TValue *t2);
NLUAI_FUNC int luaV_lessthan (lua_State *L, const TValue *l, const TValue *r);
Xextern int luaV_lessthan (lua_State *L, const TValue *l, const TValue *r);
NLUAI_FUNC int luaV_lessequal (lua_State *L, const TValue *l, const TValue *r);
Xextern int luaV_lessequal (lua_State *L, const TValue *l, const TValue *r);
NLUAI_FUNC int luaV_tonumber_ (const TValue *obj, lua_Number *n);
Xextern int luaV_tonumber_ (const TValue *obj, lua_Number *n);
NLUAI_FUNC int luaV_tointeger (const TValue *obj, lua_Integer *p, int mode);
Xextern int luaV_tointeger (const TValue *obj, lua_Integer *p, int mode);
NLUAI_FUNC int luaV_tointegerns (const TValue *obj, lua_Integer *p, int mode);
Xextern int luaV_tointegerns (const TValue *obj, lua_Integer *p, int mode);
NLUAI_FUNC int luaV_flttointeger (lua_Number n, lua_Integer *p, int mode);
Xextern int luaV_flttointeger (lua_Number n, lua_Integer *p, int mode);
NLUAI_FUNC void luaV_finishget (lua_State *L, const TValue *t, TValue *key,
Xextern void luaV_finishget (lua_State *L, const TValue *t, TValue *key,
N                               StkId val, const TValue *slot);
NLUAI_FUNC void luaV_finishset (lua_State *L, const TValue *t, TValue *key,
Xextern void luaV_finishset (lua_State *L, const TValue *t, TValue *key,
N                               TValue *val, const TValue *slot);
NLUAI_FUNC void luaV_finishOp (lua_State *L);
Xextern void luaV_finishOp (lua_State *L);
NLUAI_FUNC void luaV_execute (lua_State *L, CallInfo *ci);
Xextern void luaV_execute (lua_State *L, CallInfo *ci);
NLUAI_FUNC void luaV_concat (lua_State *L, int total);
Xextern void luaV_concat (lua_State *L, int total);
NLUAI_FUNC lua_Integer luaV_div (lua_State *L, lua_Integer x, lua_Integer y);
Xextern lua_Integer luaV_div (lua_State *L, lua_Integer x, lua_Integer y);
NLUAI_FUNC lua_Integer luaV_mod (lua_State *L, lua_Integer x, lua_Integer y);
Xextern lua_Integer luaV_mod (lua_State *L, lua_Integer x, lua_Integer y);
NLUAI_FUNC lua_Integer luaV_shiftl (lua_Integer x, lua_Integer y);
Xextern lua_Integer luaV_shiftl (lua_Integer x, lua_Integer y);
NLUAI_FUNC void luaV_objlen (lua_State *L, StkId ra, const TValue *rb);
Xextern void luaV_objlen (lua_State *L, StkId ra, const TValue *rb);
N
N#endif
L 32 "..\..\..\M6P1(L)_Lua\lua\lapi.c" 2
N
N
N
Nconst char lua_ident[] =
N  "$LuaVersion: " LUA_COPYRIGHT " $"
X  "$LuaVersion: " "Lua " "5" "." "4" "." "0" "  Copyright (C) 1994-2018 Lua.org, PUC-Rio" " $"
N  "$LuaAuthors: " LUA_AUTHORS " $";
X  "$LuaAuthors: " "R. Ierusalimschy, L. H. de Figueiredo, W. Celes" " $";
N
N
N/* value at a non-valid index */
N#define NONVALIDVALUE		cast(TValue *, luaO_nilobject)
N
N/* corresponding test */
N#define isvalid(o)	((o) != luaO_nilobject)
N
N/* test for pseudo index */
N#define ispseudo(i)		((i) <= LUA_REGISTRYINDEX)
N
N/* test for upvalue */
N#define isupvalue(i)		((i) < LUA_REGISTRYINDEX)
N
N/* test for valid but not pseudo index */
N#define isstackindex(i, o)	(isvalid(o) && !ispseudo(i))
N
N#define api_checkvalidindex(l,o)  api_check(l, isvalid(o), "invalid index")
N
N#define api_checkstackindex(l, i, o)  \
N	api_check(l, isstackindex(i, o), "index not in the stack")
X#define api_checkstackindex(l, i, o)  	api_check(l, isstackindex(i, o), "index not in the stack")
N
N
Nstatic TValue *index2value (lua_State *L, int idx) {
N  CallInfo *ci = L->ci;
N  if (idx > 0) {
N    StkId o = ci->func + idx;
N    api_check(L, idx <= L->ci->top - (ci->func + 1), "unacceptable index");
X    ((void)0);
N    if (o >= L->top) return NONVALIDVALUE;
X    if (o >= L->top) return ((TValue *)((&luaO_nilobject_)));
N    else return s2v(o);
X    else return (&(o)->val);
N  }
N  else if (!ispseudo(idx)) {  /* negative index */
X  else if (!((idx) <= (-1000000 - 1000))) {   
N    api_check(L, idx != 0 && -idx <= L->top - (ci->func + 1), "invalid index");
X    ((void)0);
N    return s2v(L->top + idx);
X    return (&(L->top + idx)->val);
N  }
N  else if (idx == LUA_REGISTRYINDEX)
X  else if (idx == (-1000000 - 1000))
N    return &G(L)->l_registry;
X    return &(L->l_G)->l_registry;
N  else {  /* upvalues */
N    idx = LUA_REGISTRYINDEX - idx;
X    idx = (-1000000 - 1000) - idx;
N    api_check(L, idx <= MAXUPVAL + 1, "upvalue index too large");
X    ((void)0);
N    if (ttislcf(s2v(ci->func)))  /* light C function? */
X    if ((((((&(ci->func)->val)))->tt_) == ((6 | (2 << 4)))))   
N      return NONVALIDVALUE;  /* it has no upvalues */
X      return ((TValue *)((&luaO_nilobject_)));   
N    else {
N      CClosure *func = clCvalue(s2v(ci->func));
X      CClosure *func = ((&((((union GCUnion *)(((((&(ci->func)->val))->value_). gc))))->cl . c)));
N      return (idx <= func->nupvalues) ? &func->upvalue[idx-1] : NONVALIDVALUE;
X      return (idx <= func->nupvalues) ? &func->upvalue[idx-1] : ((TValue *)((&luaO_nilobject_)));
N    }
N  }
N}
N
N
Nstatic StkId index2stack (lua_State *L, int idx) {
N  CallInfo *ci = L->ci;
N  if (idx > 0) {
N    StkId o = ci->func + idx;
N    api_check(L, o < L->top, "unacceptable index");
X    ((void)0);
N    return o;
N  }
N  else {    /* non-positive index */
N    api_check(L, idx != 0 && -idx <= L->top - (ci->func + 1), "invalid index");
X    ((void)0);
N    api_check(L, !ispseudo(idx), "invalid index");
X    ((void)0);
N    return L->top + idx;
N  }
N}
N
N
NLUA_API int lua_checkstack (lua_State *L, int n) {
Xextern int lua_checkstack (lua_State *L, int n) {
N  int res;
N  CallInfo *ci = L->ci;
N  lua_lock(L);
X  ((void) 0);
N  api_check(L, n >= 0, "negative 'n'");
X  ((void)0);
N  if (L->stack_last - L->top > n)  /* stack large enough? */
N    res = 1;  /* yes; check is OK */
N  else {  /* no; need to grow stack */
N    int inuse = cast_int(L->top - L->stack) + EXTRA_STACK;
X    int inuse = ((int)((L->top - L->stack))) + 5;
N    if (inuse > LUAI_MAXSTACK - n)  /* can grow without overflow? */
X    if (inuse > 1000000 - n)   
N      res = 0;  /* no */
N    else  /* try to grow stack */
N      res = luaD_growstack(L, n, 0);
N  }
N  if (res && ci->top < L->top + n)
N    ci->top = L->top + n;  /* adjust frame top */
N  lua_unlock(L);
X  ((void) 0);
N  return res;
N}
N
N
NLUA_API void lua_xmove (lua_State *from, lua_State *to, int n) {
Xextern void lua_xmove (lua_State *from, lua_State *to, int n) {
N  int i;
N  if (from == to) return;
N  lua_lock(to);
X  ((void) 0);
N  api_checknelems(from, n);
X  ((void)0);
N  api_check(from, G(from) == G(to), "moving among independent states");
X  ((void)0);
N  api_check(from, to->ci->top - to->top >= n, "stack overflow");
X  ((void)0);
N  from->top -= n;
N  for (i = 0; i < n; i++) {
N    setobjs2s(to, to->top, from->top + i);
X    { TValue *io1=((&(to->top)->val)); const TValue *io2=((&(from->top + i)->val)); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)to; ((void)0); ((void)0); };
N    to->top++;  /* stack already checked by previous 'api_check' */
N  }
N  lua_unlock(to);
X  ((void) 0);
N}
N
N
NLUA_API lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf) {
Xextern lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf) {
N  lua_CFunction old;
N  lua_lock(L);
X  ((void) 0);
N  old = G(L)->panic;
X  old = (L->l_G)->panic;
N  G(L)->panic = panicf;
X  (L->l_G)->panic = panicf;
N  lua_unlock(L);
X  ((void) 0);
N  return old;
N}
N
N
NLUA_API const lua_Number *lua_version (lua_State *L) {
Xextern const lua_Number *lua_version (lua_State *L) {
N  static const lua_Number version = LUA_VERSION_NUM;
X  static const lua_Number version = 504;
N  if (L == NULL) return &version;
X  if (L == 0) return &version;
N  else return G(L)->version;
X  else return (L->l_G)->version;
N}
N
N
N
N/*
N** basic stack manipulation
N*/
N
N
N/*
N** convert an acceptable stack index into an absolute index
N*/
NLUA_API int lua_absindex (lua_State *L, int idx) {
Xextern int lua_absindex (lua_State *L, int idx) {
N  return (idx > 0 || ispseudo(idx))
X  return (idx > 0 || ((idx) <= (-1000000 - 1000)))
N         ? idx
N         : cast_int(L->top - L->ci->func) + idx;
X         : ((int)((L->top - L->ci->func))) + idx;
N}
N
N
NLUA_API int lua_gettop (lua_State *L) {
Xextern int lua_gettop (lua_State *L) {
N  return cast_int(L->top - (L->ci->func + 1));
X  return ((int)((L->top - (L->ci->func + 1))));
N}
N
N
NLUA_API void lua_settop (lua_State *L, int idx) {
Xextern void lua_settop (lua_State *L, int idx) {
N  StkId func = L->ci->func;
N  lua_lock(L);
X  ((void) 0);
N  if (idx >= 0) {
N    api_check(L, idx <= L->stack_last - (func + 1), "new top too large");
X    ((void)0);
N    while (L->top < (func + 1) + idx)
N      setnilvalue(s2v(L->top++));
X      (((&(L->top++)->val))->tt_=(0));
N    L->top = (func + 1) + idx;
N  }
N  else {
N    api_check(L, -(idx+1) <= (L->top - (func + 1)), "invalid new top");
X    ((void)0);
N    L->top += idx+1;  /* 'subtract' index (index is negative) */
N  }
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
N/*
N** Reverse the stack segment from 'from' to 'to'
N** (auxiliary to 'lua_rotate')
N** Note that we move(copy) only the value inside the stack.
N** (We do not move additional fields that may exist.)
N*/
Nstatic void reverse (lua_State *L, StkId from, StkId to) {
N  for (; from < to; from++, to--) {
N    TValue temp;
N    setobj(L, &temp, s2v(from));
X    { TValue *io1=(&temp); const TValue *io2=((&(from)->val)); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N    setobjs2s(L, from, to);
X    { TValue *io1=((&(from)->val)); const TValue *io2=((&(to)->val)); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N    setobj2s(L, to, &temp);
X    { TValue *io1=((&(to)->val)); const TValue *io2=(&temp); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N  }
N}
N
N
N/*
N** Let x = AB, where A is a prefix of length 'n'. Then,
N** rotate x n == BA. But BA == (A^r . B^r)^r.
N*/
NLUA_API void lua_rotate (lua_State *L, int idx, int n) {
Xextern void lua_rotate (lua_State *L, int idx, int n) {
N  StkId p, t, m;
N  lua_lock(L);
X  ((void) 0);
N  t = L->top - 1;  /* end of stack segment being rotated */
N  p = index2stack(L, idx);  /* start of segment */
N  api_check(L, (n >= 0 ? n : -n) <= (t - p + 1), "invalid 'n'");
X  ((void)0);
N  m = (n >= 0 ? t - n : p - n - 1);  /* end of prefix */
N  reverse(L, p, m);  /* reverse the prefix with length 'n' */
N  reverse(L, m + 1, t);  /* reverse the suffix */
N  reverse(L, p, t);  /* reverse the entire segment */
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
NLUA_API void lua_copy (lua_State *L, int fromidx, int toidx) {
Xextern void lua_copy (lua_State *L, int fromidx, int toidx) {
N  TValue *fr, *to;
N  lua_lock(L);
X  ((void) 0);
N  fr = index2value(L, fromidx);
N  to = index2value(L, toidx);
N  api_checkvalidindex(L, to);
X  ((void)0);
N  setobj(L, to, fr);
X  { TValue *io1=(to); const TValue *io2=(fr); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N  if (isupvalue(toidx))  /* function upvalue? */
X  if (((toidx) < (-1000000 - 1000)))   
N    luaC_barrier(L, clCvalue(s2v(L->ci->func)), fr);
X    ( ((((fr)->tt_) & (1 << 6)) && (((((&((((union GCUnion *)(((((&(L->ci->func)->val))->value_). gc))))->cl . c))))->marked) & ((1<<(5)))) && ((((((fr)->value_). gc))->marked) & (((1<<(3)) | (1<<(4)))))) ? luaC_barrier_(L,(&(((union GCUnion *)((((&((((union GCUnion *)(((((&(L->ci->func)->val))->value_). gc))))->cl . c))))))->gc)),(((fr)->value_). gc)) : ((void)((0))));
N  /* LUA_REGISTRYINDEX does not need gc barrier
N     (collector revisits it before finishing collection) */
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
NLUA_API void lua_pushvalue (lua_State *L, int idx) {
Xextern void lua_pushvalue (lua_State *L, int idx) {
N  lua_lock(L);
X  ((void) 0);
N  setobj2s(L, L->top, index2value(L, idx));
X  { TValue *io1=((&(L->top)->val)); const TValue *io2=(index2value(L, idx)); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N  api_incr_top(L);
X  {L->top++; ((void)0);};
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
N
N/*
N** access functions (stack -> C)
N*/
N
N
NLUA_API int lua_type (lua_State *L, int idx) {
Xextern int lua_type (lua_State *L, int idx) {
N  const TValue *o = index2value(L, idx);
N  return (isvalid(o) ? ttype(o) : LUA_TNONE);
X  return (((o) != (&luaO_nilobject_)) ? (((((o)->tt_)) & 0x0F)) : (-1));
N}
N
N
NLUA_API const char *lua_typename (lua_State *L, int t) {
Xextern const char *lua_typename (lua_State *L, int t) {
N  UNUSED(L);
X  ((void)(L));
N  api_check(L, LUA_TNONE <= t && t < LUA_NUMTAGS, "invalid tag");
X  ((void)0);
N  return ttypename(t);
X  return luaT_typenames_[(t) + 1];
N}
N
N
NLUA_API int lua_iscfunction (lua_State *L, int idx) {
Xextern int lua_iscfunction (lua_State *L, int idx) {
N  const TValue *o = index2value(L, idx);
N  return (ttislcf(o) || (ttisCclosure(o)));
X  return (((((o))->tt_) == ((6 | (2 << 4)))) || (((((o))->tt_) == ((((6 | (3 << 4))) | (1 << 6))))));
N}
N
N
NLUA_API int lua_isinteger (lua_State *L, int idx) {
Xextern int lua_isinteger (lua_State *L, int idx) {
N  const TValue *o = index2value(L, idx);
N  return ttisinteger(o);
X  return ((((o))->tt_) == ((3 | (2 << 4))));
N}
N
N
NLUA_API int lua_isnumber (lua_State *L, int idx) {
Xextern int lua_isnumber (lua_State *L, int idx) {
N  lua_Number n;
N  const TValue *o = index2value(L, idx);
N  return tonumber(o, &n);
X  return (((((o))->tt_) == ((3 | (1 << 4)))) ? (*(&n) = (((o)->value_). n), 1) : luaV_tonumber_(o,&n));
N}
N
N
NLUA_API int lua_isstring (lua_State *L, int idx) {
Xextern int lua_isstring (lua_State *L, int idx) {
N  const TValue *o = index2value(L, idx);
N  return (ttisstring(o) || cvt2str(o));
X  return ((((((((o))->tt_)) & 0x0F)) == (4)) || (((((((o))->tt_)) & 0x0F)) == (3)));
N}
N
N
NLUA_API int lua_isuserdata (lua_State *L, int idx) {
Xextern int lua_isuserdata (lua_State *L, int idx) {
N  const TValue *o = index2value(L, idx);
N  return (ttisfulluserdata(o) || ttislightuserdata(o));
X  return ((((((((o))->tt_)) & 0x0F)) == (7)) || ((((o))->tt_) == (2)));
N}
N
N
NLUA_API int lua_rawequal (lua_State *L, int index1, int index2) {
Xextern int lua_rawequal (lua_State *L, int index1, int index2) {
N  const TValue *o1 = index2value(L, index1);
N  const TValue *o2 = index2value(L, index2);
N  return (isvalid(o1) && isvalid(o2)) ? luaV_rawequalobj(o1, o2) : 0;
X  return (((o1) != (&luaO_nilobject_)) && ((o2) != (&luaO_nilobject_))) ? luaV_equalobj(0,o1,o2) : 0;
N}
N
N
NLUA_API void lua_arith (lua_State *L, int op) {
Xextern void lua_arith (lua_State *L, int op) {
N  lua_lock(L);
X  ((void) 0);
N  if (op != LUA_OPUNM && op != LUA_OPBNOT)
X  if (op != 12 && op != 13)
N    api_checknelems(L, 2);  /* all other operations expect two operands */
X    ((void)0);   
N  else {  /* for unary operations, add fake 2nd operand */
N    api_checknelems(L, 1);
X    ((void)0);
N    setobjs2s(L, L->top, L->top - 1);
X    { TValue *io1=((&(L->top)->val)); const TValue *io2=((&(L->top - 1)->val)); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N    api_incr_top(L);
X    {L->top++; ((void)0);};
N  }
N  /* first operand at top - 2, second at top - 1; result go to top - 2 */
N  luaO_arith(L, op, s2v(L->top - 2), s2v(L->top - 1), L->top - 2);
X  luaO_arith(L, op, (&(L->top - 2)->val), (&(L->top - 1)->val), L->top - 2);
N  L->top--;  /* remove second operand */
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
NLUA_API int lua_compare (lua_State *L, int index1, int index2, int op) {
Xextern int lua_compare (lua_State *L, int index1, int index2, int op) {
N  const TValue *o1;
N  const TValue *o2;
N  int i = 0;
N  lua_lock(L);  /* may call tag method */
X  ((void) 0);   
N  o1 = index2value(L, index1);
N  o2 = index2value(L, index2);
N  if (isvalid(o1) && isvalid(o2)) {
X  if (((o1) != (&luaO_nilobject_)) && ((o2) != (&luaO_nilobject_))) {
N    switch (op) {
N      case LUA_OPEQ: i = luaV_equalobj(L, o1, o2); break;
X      case 0: i = luaV_equalobj(L, o1, o2); break;
N      case LUA_OPLT: i = luaV_lessthan(L, o1, o2); break;
X      case 1: i = luaV_lessthan(L, o1, o2); break;
N      case LUA_OPLE: i = luaV_lessequal(L, o1, o2); break;
X      case 2: i = luaV_lessequal(L, o1, o2); break;
N      default: api_check(L, 0, "invalid option");
X      default: ((void)0);
N    }
N  }
N  lua_unlock(L);
X  ((void) 0);
N  return i;
N}
N
N
NLUA_API size_t lua_stringtonumber (lua_State *L, const char *s) {
Xextern size_t lua_stringtonumber (lua_State *L, const char *s) {
N  size_t sz = luaO_str2num(s, s2v(L->top));
X  size_t sz = luaO_str2num(s, (&(L->top)->val));
N  if (sz != 0)
N    api_incr_top(L);
X    {L->top++; ((void)0);};
N  return sz;
N}
N
N
NLUA_API lua_Number lua_tonumberx (lua_State *L, int idx, int *pisnum) {
Xextern lua_Number lua_tonumberx (lua_State *L, int idx, int *pisnum) {
N  lua_Number n;
N  const TValue *o = index2value(L, idx);
N  int isnum = tonumber(o, &n);
X  int isnum = (((((o))->tt_) == ((3 | (1 << 4)))) ? (*(&n) = (((o)->value_). n), 1) : luaV_tonumber_(o,&n));
N  if (!isnum)
N    n = 0;  /* call to 'tonumber' may change 'n' even if it fails */
N  if (pisnum) *pisnum = isnum;
N  return n;
N}
N
N
NLUA_API lua_Integer lua_tointegerx (lua_State *L, int idx, int *pisnum) {
Xextern lua_Integer lua_tointegerx (lua_State *L, int idx, int *pisnum) {
N  lua_Integer res;
N  const TValue *o = index2value(L, idx);
N  int isnum = tointeger(o, &res);
X  int isnum = (((((o))->tt_) == ((3 | (2 << 4)))) ? (*(&res) = (((o)->value_). i), 1) : luaV_tointeger(o,&res,0));
N  if (!isnum)
N    res = 0;  /* call to 'tointeger' may change 'n' even if it fails */
N  if (pisnum) *pisnum = isnum;
N  return res;
N}
N
N
NLUA_API int lua_toboolean (lua_State *L, int idx) {
Xextern int lua_toboolean (lua_State *L, int idx) {
N  const TValue *o = index2value(L, idx);
N  return !l_isfalse(o);
X  return !(((((o))->tt_) == (0)) || (((((o))->tt_) == (1)) && (((o)->value_). b) == 0));
N}
N
N
NLUA_API const char *lua_tolstring (lua_State *L, int idx, size_t *len) {
Xextern const char *lua_tolstring (lua_State *L, int idx, size_t *len) {
N  TValue *o = index2value(L, idx);
N  if (!ttisstring(o)) {
X  if (!(((((((o))->tt_)) & 0x0F)) == (4))) {
N    if (!cvt2str(o)) {  /* not convertible? */
X    if (!(((((((o))->tt_)) & 0x0F)) == (3))) {   
N      if (len != NULL) *len = 0;
X      if (len != 0) *len = 0;
N      return NULL;
X      return 0;
N    }
N    lua_lock(L);  /* 'luaO_tostring' may create a new string */
X    ((void) 0);   
N    luaO_tostring(L, o);
N    luaC_checkGC(L);
X    { if ((L->l_G)->GCdebt > 0) { (void)0; luaC_step(L); (void)0;}; ((void)0); };
N    o = index2value(L, idx);  /* previous call may reallocate the stack */
N    lua_unlock(L);
X    ((void) 0);
N  }
N  if (len != NULL)
X  if (len != 0)
N    *len = vslen(o);
X    *len = ((((&((((union GCUnion *)((((o)->value_). gc))))->ts))))->tt == (4 | (1 << 4)) ? (((&((((union GCUnion *)((((o)->value_). gc))))->ts))))->shrlen : (((&((((union GCUnion *)((((o)->value_). gc))))->ts))))->u . lnglen);
N  return svalue(o);
X  return (((char *)(((((&((((union GCUnion *)((((o)->value_). gc))))->ts))))))) + sizeof(UTString));
N}
N
N
NLUA_API lua_Unsigned lua_rawlen (lua_State *L, int idx) {
Xextern lua_Unsigned lua_rawlen (lua_State *L, int idx) {
N  const TValue *o = index2value(L, idx);
N  switch (ttypetag(o)) {
X  switch (((((o)->tt_)) & 0x3F)) {
N    case LUA_TSHRSTR: return tsvalue(o)->shrlen;
X    case (4 | (1 << 4)): return ((&((((union GCUnion *)((((o)->value_). gc))))->ts)))->shrlen;
N    case LUA_TLNGSTR: return tsvalue(o)->u.lnglen;
X    case (4 | (2 << 4)): return ((&((((union GCUnion *)((((o)->value_). gc))))->ts)))->u.lnglen;
N    case LUA_TUSERDATA: return uvalue(o)->len;
X    case 7: return ((&((((union GCUnion *)((((o)->value_). gc))))->u)))->len;
N    case LUA_TTABLE: return luaH_getn(hvalue(o));
X    case 5: return luaH_getn(((&((((union GCUnion *)((((o)->value_). gc))))->h))));
N    default: return 0;
N  }
N}
N
N
NLUA_API lua_CFunction lua_tocfunction (lua_State *L, int idx) {
Xextern lua_CFunction lua_tocfunction (lua_State *L, int idx) {
N  const TValue *o = index2value(L, idx);
N  if (ttislcf(o)) return fvalue(o);
X  if (((((o))->tt_) == ((6 | (2 << 4))))) return (((o)->value_). f);
N  else if (ttisCclosure(o))
X  else if (((((o))->tt_) == ((((6 | (3 << 4))) | (1 << 6)))))
N    return clCvalue(o)->f;
X    return ((&((((union GCUnion *)((((o)->value_). gc))))->cl . c)))->f;
N  else return NULL;  /* not a C function */
X  else return 0;   
N}
N
N
NLUA_API void *lua_touserdata (lua_State *L, int idx) {
Xextern void *lua_touserdata (lua_State *L, int idx) {
N  const TValue *o = index2value(L, idx);
N  switch (ttype(o)) {
X  switch ((((((o)->tt_)) & 0x0F))) {
N    case LUA_TUSERDATA: return getudatamem(uvalue(o));
X    case 7: return (((char *)((((&((((union GCUnion *)((((o)->value_). gc))))->u)))))) + (((((&((((union GCUnion *)((((o)->value_). gc))))->u))))->nuvalue) == 0 ? (( size_t)__INTADDR__(&(((Udata0 *)0)->bindata))) : (( size_t)__INTADDR__(&(((Udata *)0)->uv))) + (sizeof(UValue) * ((((&((((union GCUnion *)((((o)->value_). gc))))->u))))->nuvalue))));
N    case LUA_TLIGHTUSERDATA: return pvalue(o);
X    case 2: return (((o)->value_). p);
N    default: return NULL;
X    default: return 0;
N  }
N}
N
N
NLUA_API lua_State *lua_tothread (lua_State *L, int idx) {
Xextern lua_State *lua_tothread (lua_State *L, int idx) {
N  const TValue *o = index2value(L, idx);
N  return (!ttisthread(o)) ? NULL : thvalue(o);
X  return (!((((o))->tt_) == (((8) | (1 << 6))))) ? 0 : ((&((((union GCUnion *)((((o)->value_). gc))))->th)));
N}
N
N
NLUA_API const void *lua_topointer (lua_State *L, int idx) {
Xextern const void *lua_topointer (lua_State *L, int idx) {
N  const TValue *o = index2value(L, idx);
N  switch (ttypetag(o)) {
X  switch (((((o)->tt_)) & 0x3F)) {
N    case LUA_TTABLE: return hvalue(o);
X    case 5: return ((&((((union GCUnion *)((((o)->value_). gc))))->h)));
N    case LUA_TLCL: return clLvalue(o);
X    case (6 | (1 << 4)): return ((&((((union GCUnion *)((((o)->value_). gc))))->cl . l)));
N    case LUA_TCCL: return clCvalue(o);
X    case (6 | (3 << 4)): return ((&((((union GCUnion *)((((o)->value_). gc))))->cl . c)));
N    case LUA_TLCF: return cast_voidp(cast_sizet(fvalue(o)));
X    case (6 | (2 << 4)): return ((void *)((((size_t)(((((o)->value_). f)))))));
N    case LUA_TTHREAD: return thvalue(o);
X    case 8: return ((&((((union GCUnion *)((((o)->value_). gc))))->th)));
N    case LUA_TUSERDATA: return getudatamem(uvalue(o));
X    case 7: return (((char *)((((&((((union GCUnion *)((((o)->value_). gc))))->u)))))) + (((((&((((union GCUnion *)((((o)->value_). gc))))->u))))->nuvalue) == 0 ? (( size_t)__INTADDR__(&(((Udata0 *)0)->bindata))) : (( size_t)__INTADDR__(&(((Udata *)0)->uv))) + (sizeof(UValue) * ((((&((((union GCUnion *)((((o)->value_). gc))))->u))))->nuvalue))));
N    case LUA_TLIGHTUSERDATA: return pvalue(o);
X    case 2: return (((o)->value_). p);
N    default: return NULL;
X    default: return 0;
N  }
N}
N
N
N
N/*
N** push functions (C -> stack)
N*/
N
N
NLUA_API void lua_pushnil (lua_State *L) {
Xextern void lua_pushnil (lua_State *L) {
N  lua_lock(L);
X  ((void) 0);
N  setnilvalue(s2v(L->top));
X  (((&(L->top)->val))->tt_=(0));
N  api_incr_top(L);
X  {L->top++; ((void)0);};
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
NLUA_API void lua_pushnumber (lua_State *L, lua_Number n) {
Xextern void lua_pushnumber (lua_State *L, lua_Number n) {
N  lua_lock(L);
X  ((void) 0);
N  setfltvalue(s2v(L->top), n);
X  { TValue *io=((&(L->top)->val)); ((io)->value_). n=(n); ((io)->tt_=((3 | (1 << 4)))); };
N  api_incr_top(L);
X  {L->top++; ((void)0);};
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
NLUA_API void lua_pushinteger (lua_State *L, lua_Integer n) {
Xextern void lua_pushinteger (lua_State *L, lua_Integer n) {
N  lua_lock(L);
X  ((void) 0);
N  setivalue(s2v(L->top), n);
X  { TValue *io=((&(L->top)->val)); ((io)->value_). i=(n); ((io)->tt_=((3 | (2 << 4)))); };
N  api_incr_top(L);
X  {L->top++; ((void)0);};
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
N/*
N** Pushes on the stack a string with given length. Avoid using 's' when
N** 'len' == 0 (as 's' can be NULL in that case), due to later use of
N** 'memcmp' and 'memcpy'.
N*/
NLUA_API const char *lua_pushlstring (lua_State *L, const char *s, size_t len) {
Xextern const char *lua_pushlstring (lua_State *L, const char *s, size_t len) {
N  TString *ts;
N  lua_lock(L);
X  ((void) 0);
N  ts = (len == 0) ? luaS_new(L, "") : luaS_newlstr(L, s, len);
N  setsvalue2s(L, L->top, ts);
X  { TValue *io = ((&(L->top)->val)); TString *x_ = (ts); ((io)->value_). gc = (&(((union GCUnion *)((x_)))->gc)); ((io)->tt_=(((x_->tt) | (1 << 6)))); ((void)0); };
N  api_incr_top(L);
X  {L->top++; ((void)0);};
N  luaC_checkGC(L);
X  { if ((L->l_G)->GCdebt > 0) { (void)0; luaC_step(L); (void)0;}; ((void)0); };
N  lua_unlock(L);
X  ((void) 0);
N  return getstr(ts);
X  return (((char *)(((ts)))) + sizeof(UTString));
N}
N
N
NLUA_API const char *lua_pushstring (lua_State *L, const char *s) {
Xextern const char *lua_pushstring (lua_State *L, const char *s) {
N  lua_lock(L);
X  ((void) 0);
N  if (s == NULL)
X  if (s == 0)
N    setnilvalue(s2v(L->top));
X    (((&(L->top)->val))->tt_=(0));
N  else {
N    TString *ts;
N    ts = luaS_new(L, s);
N    setsvalue2s(L, L->top, ts);
X    { TValue *io = ((&(L->top)->val)); TString *x_ = (ts); ((io)->value_). gc = (&(((union GCUnion *)((x_)))->gc)); ((io)->tt_=(((x_->tt) | (1 << 6)))); ((void)0); };
N    s = getstr(ts);  /* internal copy's address */
X    s = (((char *)(((ts)))) + sizeof(UTString));   
N  }
N  api_incr_top(L);
X  {L->top++; ((void)0);};
N  luaC_checkGC(L);
X  { if ((L->l_G)->GCdebt > 0) { (void)0; luaC_step(L); (void)0;}; ((void)0); };
N  lua_unlock(L);
X  ((void) 0);
N  return s;
N}
N
N
NLUA_API const char *lua_pushvfstring (lua_State *L, const char *fmt,
Xextern const char *lua_pushvfstring (lua_State *L, const char *fmt,
N                                      va_list argp) {
N  const char *ret;
N  lua_lock(L);
X  ((void) 0);
N  ret = luaO_pushvfstring(L, fmt, argp);
N  luaC_checkGC(L);
X  { if ((L->l_G)->GCdebt > 0) { (void)0; luaC_step(L); (void)0;}; ((void)0); };
N  lua_unlock(L);
X  ((void) 0);
N  return ret;
N}
N
N
NLUA_API const char *lua_pushfstring (lua_State *L, const char *fmt, ...) {
Xextern const char *lua_pushfstring (lua_State *L, const char *fmt, ...) {
N  const char *ret;
N  va_list argp;
N  lua_lock(L);
X  ((void) 0);
N  va_start(argp, fmt);
X  __va_start(argp, fmt);
N  ret = luaO_pushvfstring(L, fmt, argp);
N  va_end(argp);
X  __va_end(argp);
N  luaC_checkGC(L);
X  { if ((L->l_G)->GCdebt > 0) { (void)0; luaC_step(L); (void)0;}; ((void)0); };
N  lua_unlock(L);
X  ((void) 0);
N  return ret;
N}
N
N
NLUA_API void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n) {
Xextern void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n) {
N  lua_lock(L);
X  ((void) 0);
N  if (n == 0) {
N    setfvalue(s2v(L->top), fn);
X    { TValue *io=((&(L->top)->val)); ((io)->value_). f=(fn); ((io)->tt_=((6 | (2 << 4)))); };
N    api_incr_top(L);
X    {L->top++; ((void)0);};
N  }
N  else {
N    CClosure *cl;
N    api_checknelems(L, n);
X    ((void)0);
N    api_check(L, n <= MAXUPVAL, "upvalue index too large");
X    ((void)0);
N    cl = luaF_newCclosure(L, n);
N    cl->f = fn;
N    L->top -= n;
N    while (n--) {
N      setobj2n(L, &cl->upvalue[n], s2v(L->top + n));
X      { TValue *io1=(&cl->upvalue[n]); const TValue *io2=((&(L->top + n)->val)); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N      /* does not need barrier because closure is white */
N    }
N    setclCvalue(L, s2v(L->top), cl);
X    { TValue *io = ((&(L->top)->val)); CClosure *x_ = (cl); ((io)->value_). gc = (&(((union GCUnion *)((x_)))->gc)); ((io)->tt_=((((6 | (3 << 4))) | (1 << 6)))); ((void)0); };
N    api_incr_top(L);
X    {L->top++; ((void)0);};
N    luaC_checkGC(L);
X    { if ((L->l_G)->GCdebt > 0) { (void)0; luaC_step(L); (void)0;}; ((void)0); };
N  }
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
NLUA_API void lua_pushboolean (lua_State *L, int b) {
Xextern void lua_pushboolean (lua_State *L, int b) {
N  lua_lock(L);
X  ((void) 0);
N  setbvalue(s2v(L->top), (b != 0));  /* ensure that true is 1 */
X  { TValue *io=((&(L->top)->val)); ((io)->value_). b=((b != 0)); ((io)->tt_=(1)); };   
N  api_incr_top(L);
X  {L->top++; ((void)0);};
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
NLUA_API void lua_pushlightuserdata (lua_State *L, void *p) {
Xextern void lua_pushlightuserdata (lua_State *L, void *p) {
N  lua_lock(L);
X  ((void) 0);
N  setpvalue(s2v(L->top), p);
X  { TValue *io=((&(L->top)->val)); ((io)->value_). p=(p); ((io)->tt_=(2)); };
N  api_incr_top(L);
X  {L->top++; ((void)0);};
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
NLUA_API int lua_pushthread (lua_State *L) {
Xextern int lua_pushthread (lua_State *L) {
N  lua_lock(L);
X  ((void) 0);
N  setthvalue(L, s2v(L->top), L);
X  { TValue *io = ((&(L->top)->val)); lua_State *x_ = (L); ((io)->value_). gc = (&(((union GCUnion *)((x_)))->gc)); ((io)->tt_=(((8) | (1 << 6)))); ((void)0); };
N  api_incr_top(L);
X  {L->top++; ((void)0);};
N  lua_unlock(L);
X  ((void) 0);
N  return (G(L)->mainthread == L);
X  return ((L->l_G)->mainthread == L);
N}
N
N
N
N/*
N** get functions (Lua -> stack)
N*/
N
N
Nstatic int auxgetstr (lua_State *L, const TValue *t, const char *k) {
N  const TValue *slot;
N  TString *str = luaS_new(L, k);
N  if (luaV_fastget(L, t, str, slot, luaH_getstr)) {
X  if ((!((((t))->tt_) == (((5) | (1 << 6)))) ? (slot = 0, 0) : (slot = luaH_getstr(((&((((union GCUnion *)((((t)->value_). gc))))->h))), str), !(((((((slot))->tt_)) & 0x0F)) == (0))))) {
N    setobj2s(L, L->top, slot);
X    { TValue *io1=((&(L->top)->val)); const TValue *io2=(slot); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N    api_incr_top(L);
X    {L->top++; ((void)0);};
N  }
N  else {
N    setsvalue2s(L, L->top, str);
X    { TValue *io = ((&(L->top)->val)); TString *x_ = (str); ((io)->value_). gc = (&(((union GCUnion *)((x_)))->gc)); ((io)->tt_=(((x_->tt) | (1 << 6)))); ((void)0); };
N    api_incr_top(L);
X    {L->top++; ((void)0);};
N    luaV_finishget(L, t, s2v(L->top - 1), L->top - 1, slot);
X    luaV_finishget(L, t, (&(L->top - 1)->val), L->top - 1, slot);
N  }
N  lua_unlock(L);
X  ((void) 0);
N  return ttype(s2v(L->top - 1));
X  return ((((((&(L->top - 1)->val))->tt_)) & 0x0F));
N}
N
N
NLUA_API int lua_getglobal (lua_State *L, const char *name) {
Xextern int lua_getglobal (lua_State *L, const char *name) {
N  Table *reg = hvalue(&G(L)->l_registry);
X  Table *reg = ((&((((union GCUnion *)((((&(L->l_G)->l_registry)->value_). gc))))->h)));
N  lua_lock(L);
X  ((void) 0);
N  return auxgetstr(L, luaH_getint(reg, LUA_RIDX_GLOBALS), name);
X  return auxgetstr(L, luaH_getint(reg, 2), name);
N}
N
N
NLUA_API int lua_gettable (lua_State *L, int idx) {
Xextern int lua_gettable (lua_State *L, int idx) {
N  const TValue *slot;
N  TValue *t;
N  lua_lock(L);
X  ((void) 0);
N  t = index2value(L, idx);
N  if (luaV_fastget(L, t, s2v(L->top - 1), slot, luaH_get)) {
X  if ((!((((t))->tt_) == (((5) | (1 << 6)))) ? (slot = 0, 0) : (slot = luaH_get(((&((((union GCUnion *)((((t)->value_). gc))))->h))), (&(L->top - 1)->val)), !(((((((slot))->tt_)) & 0x0F)) == (0))))) {
N    setobj2s(L, L->top - 1, slot);
X    { TValue *io1=((&(L->top - 1)->val)); const TValue *io2=(slot); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N  }
N  else
N    luaV_finishget(L, t, s2v(L->top - 1), L->top - 1, slot);
X    luaV_finishget(L, t, (&(L->top - 1)->val), L->top - 1, slot);
N  lua_unlock(L);
X  ((void) 0);
N  return ttype(s2v(L->top - 1));
X  return ((((((&(L->top - 1)->val))->tt_)) & 0x0F));
N}
N
N
NLUA_API int lua_getfield (lua_State *L, int idx, const char *k) {
Xextern int lua_getfield (lua_State *L, int idx, const char *k) {
N  lua_lock(L);
X  ((void) 0);
N  return auxgetstr(L, index2value(L, idx), k);
N}
N
N
NLUA_API int lua_geti (lua_State *L, int idx, lua_Integer n) {
Xextern int lua_geti (lua_State *L, int idx, lua_Integer n) {
N  TValue *t;
N  const TValue *slot;
N  lua_lock(L);
X  ((void) 0);
N  t = index2value(L, idx);
N  if (luaV_fastgeti(L, t, n, slot)) {
X  if ((!((((t))->tt_) == (((5) | (1 << 6)))) ? (slot = 0, 0) : (slot = (((lua_Unsigned)(n)) - 1u < ((&((((union GCUnion *)((((t)->value_). gc))))->h)))->sizearray) ? &((&((((union GCUnion *)((((t)->value_). gc))))->h)))->array[n - 1] : luaH_getint(((&((((union GCUnion *)((((t)->value_). gc))))->h))), n), !(((((((slot))->tt_)) & 0x0F)) == (0))))) {
N    setobj2s(L, L->top, slot);
X    { TValue *io1=((&(L->top)->val)); const TValue *io2=(slot); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N  }
N  else {
N    TValue aux;
N    setivalue(&aux, n);
X    { TValue *io=(&aux); ((io)->value_). i=(n); ((io)->tt_=((3 | (2 << 4)))); };
N    luaV_finishget(L, t, &aux, L->top, slot);
N  }
N  api_incr_top(L);
X  {L->top++; ((void)0);};
N  lua_unlock(L);
X  ((void) 0);
N  return ttype(s2v(L->top - 1));
X  return ((((((&(L->top - 1)->val))->tt_)) & 0x0F));
N}
N
N
Nstatic int finishrawget (lua_State *L, const TValue *val) {
N  if (isempty(val))  /* avoid copying empty items to the stack */
X  if ((((((((val))->tt_)) & 0x0F)) == (0)))   
N    setnilvalue(s2v(L->top));
X    (((&(L->top)->val))->tt_=(0));
N  else
N    setobj2s(L, L->top, val);
X    { TValue *io1=((&(L->top)->val)); const TValue *io2=(val); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N  api_incr_top(L);
X  {L->top++; ((void)0);};
N  lua_unlock(L);
X  ((void) 0);
N  return ttype(s2v(L->top - 1));
X  return ((((((&(L->top - 1)->val))->tt_)) & 0x0F));
N}
N
N
Nstatic Table *gettable (lua_State *L, int idx) {
N  TValue *t = index2value(L, idx);
N  api_check(L, ttistable(t), "table expected");
X  ((void)0);
N  return hvalue(t);
X  return ((&((((union GCUnion *)((((t)->value_). gc))))->h)));
N}
N
N
NLUA_API int lua_rawget (lua_State *L, int idx) {
Xextern int lua_rawget (lua_State *L, int idx) {
N  Table *t;
N  const TValue *val;
N  lua_lock(L);
X  ((void) 0);
N  api_checknelems(L, 1);
X  ((void)0);
N  t = gettable(L, idx);
N  val = luaH_get(t, s2v(L->top - 1));
X  val = luaH_get(t, (&(L->top - 1)->val));
N  L->top--;  /* remove key */
N  return finishrawget(L, val);
N}
N
N
NLUA_API int lua_rawgeti (lua_State *L, int idx, lua_Integer n) {
Xextern int lua_rawgeti (lua_State *L, int idx, lua_Integer n) {
N  Table *t;
N  lua_lock(L);
X  ((void) 0);
N  t = gettable(L, idx);
N  return finishrawget(L, luaH_getint(t, n));
N}
N
N
NLUA_API int lua_rawgetp (lua_State *L, int idx, const void *p) {
Xextern int lua_rawgetp (lua_State *L, int idx, const void *p) {
N  Table *t;
N  TValue k;
N  lua_lock(L);
X  ((void) 0);
N  t = gettable(L, idx);
N  setpvalue(&k, cast_voidp(p));
X  { TValue *io=(&k); ((io)->value_). p=(((void *)((p)))); ((io)->tt_=(2)); };
N  return finishrawget(L, luaH_get(t, &k));
N}
N
N
Nstatic int auxkeydef (lua_State *L, int idx, int remove) {
N  int res;
N  lua_lock(L);
X  ((void) 0);
N  api_checknelems(L, 1);
X  ((void)0);
N  res = luaT_keydef(L, index2value(L, idx), s2v(L->top - 1), remove);
X  res = luaT_keydef(L, index2value(L, idx), (&(L->top - 1)->val), remove);
N  L->top--;  /* remove key */
N  lua_unlock(L);
X  ((void) 0);
N  return res;
N}
N
N
NLUA_API void lua_removekey (lua_State *L, int idx) {
Xextern void lua_removekey (lua_State *L, int idx) {
N  auxkeydef(L, idx, 1);
N}
N
N
NLUA_API int lua_keyin (lua_State *L, int idx) {
Xextern int lua_keyin (lua_State *L, int idx) {
N  return auxkeydef(L, idx, 0);
N}
N
N
NLUA_API void lua_createtable (lua_State *L, int narray, int nrec) {
Xextern void lua_createtable (lua_State *L, int narray, int nrec) {
N  Table *t;
N  lua_lock(L);
X  ((void) 0);
N  t = luaH_new(L);
N  sethvalue2s(L, L->top, t);
X  { TValue *io = ((&(L->top)->val)); Table *x_ = (t); ((io)->value_). gc = (&(((union GCUnion *)((x_)))->gc)); ((io)->tt_=(((5) | (1 << 6)))); ((void)0); };
N  api_incr_top(L);
X  {L->top++; ((void)0);};
N  if (narray > 0 || nrec > 0)
N    luaH_resize(L, t, narray, nrec);
N  luaC_checkGC(L);
X  { if ((L->l_G)->GCdebt > 0) { (void)0; luaC_step(L); (void)0;}; ((void)0); };
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
NLUA_API int lua_getmetatable (lua_State *L, int objindex) {
Xextern int lua_getmetatable (lua_State *L, int objindex) {
N  const TValue *obj;
N  Table *mt;
N  int res = 0;
N  lua_lock(L);
X  ((void) 0);
N  obj = index2value(L, objindex);
N  switch (ttype(obj)) {
X  switch ((((((obj)->tt_)) & 0x0F))) {
N    case LUA_TTABLE:
X    case 5:
N      mt = hvalue(obj)->metatable;
X      mt = ((&((((union GCUnion *)((((obj)->value_). gc))))->h)))->metatable;
N      break;
N    case LUA_TUSERDATA:
X    case 7:
N      mt = uvalue(obj)->metatable;
X      mt = ((&((((union GCUnion *)((((obj)->value_). gc))))->u)))->metatable;
N      break;
N    default:
N      mt = G(L)->mt[ttype(obj)];
X      mt = (L->l_G)->mt[(((((obj)->tt_)) & 0x0F))];
N      break;
N  }
N  if (mt != NULL) {
X  if (mt != 0) {
N    sethvalue2s(L, L->top, mt);
X    { TValue *io = ((&(L->top)->val)); Table *x_ = (mt); ((io)->value_). gc = (&(((union GCUnion *)((x_)))->gc)); ((io)->tt_=(((5) | (1 << 6)))); ((void)0); };
N    api_incr_top(L);
X    {L->top++; ((void)0);};
N    res = 1;
N  }
N  lua_unlock(L);
X  ((void) 0);
N  return res;
N}
N
N
NLUA_API int lua_getiuservalue (lua_State *L, int idx, int n) {
Xextern int lua_getiuservalue (lua_State *L, int idx, int n) {
N  TValue *o;
N  int t;
N  lua_lock(L);
X  ((void) 0);
N  o = index2value(L, idx);
N  api_check(L, ttisfulluserdata(o), "full userdata expected");
X  ((void)0);
N  if (n <= 0 || n > uvalue(o)->nuvalue) {
X  if (n <= 0 || n > ((&((((union GCUnion *)((((o)->value_). gc))))->u)))->nuvalue) {
N    setnilvalue(s2v(L->top));
X    (((&(L->top)->val))->tt_=(0));
N    t = LUA_TNONE;
X    t = (-1);
N  }
N  else {
N    setobj2s(L, L->top, &uvalue(o)->uv[n - 1].uv);
X    { TValue *io1=((&(L->top)->val)); const TValue *io2=(&((&((((union GCUnion *)((((o)->value_). gc))))->u)))->uv[n - 1]. uv); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N    t = ttype(s2v(L->top));
X    t = ((((((&(L->top)->val))->tt_)) & 0x0F));
N  }
N  api_incr_top(L);
X  {L->top++; ((void)0);};
N  lua_unlock(L);
X  ((void) 0);
N  return t;
N}
N
N
N/*
N** set functions (stack -> Lua)
N*/
N
N/*
N** t[k] = value at the top of the stack (where 'k' is a string)
N*/
Nstatic void auxsetstr (lua_State *L, const TValue *t, const char *k) {
N  const TValue *slot;
N  TString *str = luaS_new(L, k);
N  api_checknelems(L, 1);
X  ((void)0);
N  if (luaV_fastget(L, t, str, slot, luaH_getstr)) {
X  if ((!((((t))->tt_) == (((5) | (1 << 6)))) ? (slot = 0, 0) : (slot = luaH_getstr(((&((((union GCUnion *)((((t)->value_). gc))))->h))), str), !(((((((slot))->tt_)) & 0x0F)) == (0))))) {
N    luaV_finishfastset(L, t, slot, s2v(L->top - 1));
X    { { TValue *io1=(((TValue *)(slot))); const TValue *io2=((&(L->top - 1)->val)); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); }; ( (((((&(L->top - 1)->val))->tt_) & (1 << 6)) && ((((((t)->value_). gc))->marked) & ((1<<(5)))) && (((((((&(L->top - 1)->val))->value_). gc))->marked) & (((1<<(3)) | (1<<(4)))))) ? luaC_barrierback_(L,(((t)->value_). gc)) : ((void)((0)))); };
N    L->top--;  /* pop value */
N  }
N  else {
N    setsvalue2s(L, L->top, str);  /* push 'str' (to make it a TValue) */
X    { TValue *io = ((&(L->top)->val)); TString *x_ = (str); ((io)->value_). gc = (&(((union GCUnion *)((x_)))->gc)); ((io)->tt_=(((x_->tt) | (1 << 6)))); ((void)0); };   
N    api_incr_top(L);
X    {L->top++; ((void)0);};
N    luaV_finishset(L, t, s2v(L->top - 1), s2v(L->top - 2), slot);
X    luaV_finishset(L, t, (&(L->top - 1)->val), (&(L->top - 2)->val), slot);
N    L->top -= 2;  /* pop value and key */
N  }
N  lua_unlock(L);  /* lock done by caller */
X  ((void) 0);   
N}
N
N
NLUA_API void lua_setglobal (lua_State *L, const char *name) {
Xextern void lua_setglobal (lua_State *L, const char *name) {
N  Table *reg = hvalue(&G(L)->l_registry);
X  Table *reg = ((&((((union GCUnion *)((((&(L->l_G)->l_registry)->value_). gc))))->h)));
N  lua_lock(L);  /* unlock done in 'auxsetstr' */
X  ((void) 0);   
N  auxsetstr(L, luaH_getint(reg, LUA_RIDX_GLOBALS), name);
X  auxsetstr(L, luaH_getint(reg, 2), name);
N}
N
N
NLUA_API void lua_settable (lua_State *L, int idx) {
Xextern void lua_settable (lua_State *L, int idx) {
N  TValue *t;
N  const TValue *slot;
N  lua_lock(L);
X  ((void) 0);
N  api_checknelems(L, 2);
X  ((void)0);
N  t = index2value(L, idx);
N  if (luaV_fastget(L, t, s2v(L->top - 2), slot, luaH_get)) {
X  if ((!((((t))->tt_) == (((5) | (1 << 6)))) ? (slot = 0, 0) : (slot = luaH_get(((&((((union GCUnion *)((((t)->value_). gc))))->h))), (&(L->top - 2)->val)), !(((((((slot))->tt_)) & 0x0F)) == (0))))) {
N    luaV_finishfastset(L, t, slot, s2v(L->top - 1));
X    { { TValue *io1=(((TValue *)(slot))); const TValue *io2=((&(L->top - 1)->val)); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); }; ( (((((&(L->top - 1)->val))->tt_) & (1 << 6)) && ((((((t)->value_). gc))->marked) & ((1<<(5)))) && (((((((&(L->top - 1)->val))->value_). gc))->marked) & (((1<<(3)) | (1<<(4)))))) ? luaC_barrierback_(L,(((t)->value_). gc)) : ((void)((0)))); };
N  }
N  else
N    luaV_finishset(L, t, s2v(L->top - 2), s2v(L->top - 1), slot);
X    luaV_finishset(L, t, (&(L->top - 2)->val), (&(L->top - 1)->val), slot);
N  L->top -= 2;  /* pop index and value */
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
NLUA_API void lua_setfield (lua_State *L, int idx, const char *k) {
Xextern void lua_setfield (lua_State *L, int idx, const char *k) {
N  lua_lock(L);  /* unlock done in 'auxsetstr' */
X  ((void) 0);   
N  auxsetstr(L, index2value(L, idx), k);
N}
N
N
NLUA_API void lua_seti (lua_State *L, int idx, lua_Integer n) {
Xextern void lua_seti (lua_State *L, int idx, lua_Integer n) {
N  TValue *t;
N  const TValue *slot;
N  lua_lock(L);
X  ((void) 0);
N  api_checknelems(L, 1);
X  ((void)0);
N  t = index2value(L, idx);
N  if (luaV_fastgeti(L, t, n, slot)) {
X  if ((!((((t))->tt_) == (((5) | (1 << 6)))) ? (slot = 0, 0) : (slot = (((lua_Unsigned)(n)) - 1u < ((&((((union GCUnion *)((((t)->value_). gc))))->h)))->sizearray) ? &((&((((union GCUnion *)((((t)->value_). gc))))->h)))->array[n - 1] : luaH_getint(((&((((union GCUnion *)((((t)->value_). gc))))->h))), n), !(((((((slot))->tt_)) & 0x0F)) == (0))))) {
N    luaV_finishfastset(L, t, slot, s2v(L->top - 1));
X    { { TValue *io1=(((TValue *)(slot))); const TValue *io2=((&(L->top - 1)->val)); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); }; ( (((((&(L->top - 1)->val))->tt_) & (1 << 6)) && ((((((t)->value_). gc))->marked) & ((1<<(5)))) && (((((((&(L->top - 1)->val))->value_). gc))->marked) & (((1<<(3)) | (1<<(4)))))) ? luaC_barrierback_(L,(((t)->value_). gc)) : ((void)((0)))); };
N  }
N  else {
N    TValue aux;
N    setivalue(&aux, n);
X    { TValue *io=(&aux); ((io)->value_). i=(n); ((io)->tt_=((3 | (2 << 4)))); };
N    luaV_finishset(L, t, &aux, s2v(L->top - 1), slot);
X    luaV_finishset(L, t, &aux, (&(L->top - 1)->val), slot);
N  }
N  L->top--;  /* pop value */
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
NLUA_API void lua_rawset (lua_State *L, int idx) {
Xextern void lua_rawset (lua_State *L, int idx) {
N  Table *t;
N  TValue *slot;
N  lua_lock(L);
X  ((void) 0);
N  api_checknelems(L, 2);
X  ((void)0);
N  t = gettable(L, idx);
N  slot = luaH_set(L, t, s2v(L->top - 2));
X  slot = luaH_set(L, t, (&(L->top - 2)->val));
N  setobj2t(L, slot, s2v(L->top - 1));
X  { TValue *io1=(slot); const TValue *io2=((&(L->top - 1)->val)); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N  invalidateTMcache(t);
X  ((t)->flags = 0);
N  luaC_barrierback(L, obj2gco(t), s2v(L->top - 1));
X  ( (((((&(L->top - 1)->val))->tt_) & (1 << 6)) && ((((&(((union GCUnion *)((t)))->gc)))->marked) & ((1<<(5)))) && (((((((&(L->top - 1)->val))->value_). gc))->marked) & (((1<<(3)) | (1<<(4)))))) ? luaC_barrierback_(L,(&(((union GCUnion *)((t)))->gc))) : ((void)((0))));
N  L->top -= 2;
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
NLUA_API void lua_rawseti (lua_State *L, int idx, lua_Integer n) {
Xextern void lua_rawseti (lua_State *L, int idx, lua_Integer n) {
N  Table *t;
N  lua_lock(L);
X  ((void) 0);
N  api_checknelems(L, 1);
X  ((void)0);
N  t = gettable(L, idx);
N  luaH_setint(L, t, n, s2v(L->top - 1));
X  luaH_setint(L, t, n, (&(L->top - 1)->val));
N  luaC_barrierback(L, obj2gco(t), s2v(L->top - 1));
X  ( (((((&(L->top - 1)->val))->tt_) & (1 << 6)) && ((((&(((union GCUnion *)((t)))->gc)))->marked) & ((1<<(5)))) && (((((((&(L->top - 1)->val))->value_). gc))->marked) & (((1<<(3)) | (1<<(4)))))) ? luaC_barrierback_(L,(&(((union GCUnion *)((t)))->gc))) : ((void)((0))));
N  L->top--;
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
NLUA_API void lua_rawsetp (lua_State *L, int idx, const void *p) {
Xextern void lua_rawsetp (lua_State *L, int idx, const void *p) {
N  Table *t;
N  TValue k, *slot;
N  lua_lock(L);
X  ((void) 0);
N  api_checknelems(L, 1);
X  ((void)0);
N  t = gettable(L, idx);
N  setpvalue(&k, cast_voidp(p));
X  { TValue *io=(&k); ((io)->value_). p=(((void *)((p)))); ((io)->tt_=(2)); };
N  slot = luaH_set(L, t, &k);
N  setobj2t(L, slot, s2v(L->top - 1));
X  { TValue *io1=(slot); const TValue *io2=((&(L->top - 1)->val)); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N  luaC_barrierback(L, obj2gco(t), s2v(L->top - 1));
X  ( (((((&(L->top - 1)->val))->tt_) & (1 << 6)) && ((((&(((union GCUnion *)((t)))->gc)))->marked) & ((1<<(5)))) && (((((((&(L->top - 1)->val))->value_). gc))->marked) & (((1<<(3)) | (1<<(4)))))) ? luaC_barrierback_(L,(&(((union GCUnion *)((t)))->gc))) : ((void)((0))));
N  L->top--;
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
NLUA_API int lua_setmetatable (lua_State *L, int objindex) {
Xextern int lua_setmetatable (lua_State *L, int objindex) {
N  TValue *obj;
N  Table *mt;
N  lua_lock(L);
X  ((void) 0);
N  api_checknelems(L, 1);
X  ((void)0);
N  obj = index2value(L, objindex);
N  if (ttisnil(s2v(L->top - 1)))
X  if ((((((&(L->top - 1)->val)))->tt_) == (0)))
N    mt = NULL;
X    mt = 0;
N  else {
N    api_check(L, ttistable(s2v(L->top - 1)), "table expected");
X    ((void)0);
N    mt = hvalue(s2v(L->top - 1));
X    mt = ((&((((union GCUnion *)(((((&(L->top - 1)->val))->value_). gc))))->h)));
N  }
N  switch (ttype(obj)) {
X  switch ((((((obj)->tt_)) & 0x0F))) {
N    case LUA_TTABLE: {
X    case 5: {
N      hvalue(obj)->metatable = mt;
X      ((&((((union GCUnion *)((((obj)->value_). gc))))->h)))->metatable = mt;
N      if (mt) {
N        luaC_objbarrier(L, gcvalue(obj), mt);
X        ( (((((((obj)->value_). gc))->marked) & ((1<<(5)))) && (((mt)->marked) & (((1<<(3)) | (1<<(4)))))) ? luaC_barrier_(L,(&(((union GCUnion *)(((((obj)->value_). gc))))->gc)),(&(((union GCUnion *)((mt)))->gc))) : ((void)((0))));
N        luaC_checkfinalizer(L, gcvalue(obj), mt);
X        luaC_checkfinalizer(L, (((obj)->value_). gc), mt);
N      }
N      break;
N    }
N    case LUA_TUSERDATA: {
X    case 7: {
N      uvalue(obj)->metatable = mt;
X      ((&((((union GCUnion *)((((obj)->value_). gc))))->u)))->metatable = mt;
N      if (mt) {
N        luaC_objbarrier(L, uvalue(obj), mt);
X        ( ((((((&((((union GCUnion *)((((obj)->value_). gc))))->u))))->marked) & ((1<<(5)))) && (((mt)->marked) & (((1<<(3)) | (1<<(4)))))) ? luaC_barrier_(L,(&(((union GCUnion *)((((&((((union GCUnion *)((((obj)->value_). gc))))->u))))))->gc)),(&(((union GCUnion *)((mt)))->gc))) : ((void)((0))));
N        luaC_checkfinalizer(L, gcvalue(obj), mt);
X        luaC_checkfinalizer(L, (((obj)->value_). gc), mt);
N      }
N      break;
N    }
N    default: {
N      G(L)->mt[ttype(obj)] = mt;
X      (L->l_G)->mt[(((((obj)->tt_)) & 0x0F))] = mt;
N      break;
N    }
N  }
N  L->top--;
N  lua_unlock(L);
X  ((void) 0);
N  return 1;
N}
N
N
NLUA_API int lua_setiuservalue (lua_State *L, int idx, int n) {
Xextern int lua_setiuservalue (lua_State *L, int idx, int n) {
N  TValue *o;
N  int res;
N  lua_lock(L);
X  ((void) 0);
N  api_checknelems(L, 1);
X  ((void)0);
N  o = index2value(L, idx);
N  api_check(L, ttisfulluserdata(o), "full userdata expected");
X  ((void)0);
N  if (!(0 < n && n <= uvalue(o)->nuvalue))
X  if (!(0 < n && n <= ((&((((union GCUnion *)((((o)->value_). gc))))->u)))->nuvalue))
N    res = 0;
N  else {
N    setobj(L, &uvalue(o)->uv[n - 1].uv, s2v(L->top - 1));
X    { TValue *io1=(&((&((((union GCUnion *)((((o)->value_). gc))))->u)))->uv[n - 1]. uv); const TValue *io2=((&(L->top - 1)->val)); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N    luaC_barrierback(L, gcvalue(o), s2v(L->top - 1));
X    ( (((((&(L->top - 1)->val))->tt_) & (1 << 6)) && ((((((o)->value_). gc))->marked) & ((1<<(5)))) && (((((((&(L->top - 1)->val))->value_). gc))->marked) & (((1<<(3)) | (1<<(4)))))) ? luaC_barrierback_(L,(((o)->value_). gc)) : ((void)((0))));
N    res = 1;
N  }
N  L->top--;
N  lua_unlock(L);
X  ((void) 0);
N  return res;
N}
N
N
N/*
N** 'load' and 'call' functions (run Lua code)
N*/
N
N
N#define checkresults(L,na,nr) \
N     api_check(L, (nr) == LUA_MULTRET || (L->ci->top - L->top >= (nr) - (na)), \
N	"results from function overflow current stack size")
X#define checkresults(L,na,nr)      api_check(L, (nr) == LUA_MULTRET || (L->ci->top - L->top >= (nr) - (na)), 	"results from function overflow current stack size")
N
N
NLUA_API void lua_callk (lua_State *L, int nargs, int nresults,
Xextern void lua_callk (lua_State *L, int nargs, int nresults,
N                        lua_KContext ctx, lua_KFunction k) {
N  StkId func;
N  lua_lock(L);
X  ((void) 0);
N  api_check(L, k == NULL || !isLua(L->ci),
N    "cannot use continuations inside hooks");
X  ((void)0);
N  api_checknelems(L, nargs+1);
X  ((void)0);
N  api_check(L, L->status == LUA_OK, "cannot do calls on non-normal thread");
X  ((void)0);
N  checkresults(L, nargs, nresults);
X  ((void)0);
N  func = L->top - (nargs+1);
N  if (k != NULL && L->nny == 0) {  /* need to prepare continuation? */
X  if (k != 0 && L->nny == 0) {   
N    L->ci->u.c.k = k;  /* save continuation */
N    L->ci->u.c.ctx = ctx;  /* save context */
N    luaD_call(L, func, nresults);  /* do the call */
N  }
N  else  /* no continuation or no yieldable */
N    luaD_callnoyield(L, func, nresults);  /* just do the call */
N  adjustresults(L, nresults);
X  { if ((nresults) == (-1) && L->ci->top < L->top) L->ci->top = L->top; };
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
N
N/*
N** Execute a protected call.
N*/
Nstruct CallS {  /* data to 'f_call' */
N  StkId func;
N  int nresults;
N};
N
N
Nstatic void f_call (lua_State *L, void *ud) {
N  struct CallS *c = cast(struct CallS *, ud);
X  struct CallS *c = ((struct CallS *)(ud));
N  luaD_callnoyield(L, c->func, c->nresults);
N}
N
N
N
NLUA_API int lua_pcallk (lua_State *L, int nargs, int nresults, int errfunc,
Xextern int lua_pcallk (lua_State *L, int nargs, int nresults, int errfunc,
N                        lua_KContext ctx, lua_KFunction k) {
N  struct CallS c;
N  int status;
N  ptrdiff_t func;
N  lua_lock(L);
X  ((void) 0);
N  api_check(L, k == NULL || !isLua(L->ci),
N    "cannot use continuations inside hooks");
X  ((void)0);
N  api_checknelems(L, nargs+1);
X  ((void)0);
N  api_check(L, L->status == LUA_OK, "cannot do calls on non-normal thread");
X  ((void)0);
N  checkresults(L, nargs, nresults);
X  ((void)0);
N  if (errfunc == 0)
N    func = 0;
N  else {
N    StkId o = index2stack(L, errfunc);
N    api_check(L, ttisfunction(s2v(o)), "error handler must be a function");
X    ((void)0);
N    func = savestack(L, o);
X    func = ((char *)(o) - (char *)L->stack);
N  }
N  c.func = L->top - (nargs+1);  /* function to be called */
N  if (k == NULL || L->nny > 0) {  /* no continuation or no yieldable? */
X  if (k == 0 || L->nny > 0) {   
N    c.nresults = nresults;  /* do a 'conventional' protected call */
N    status = luaD_pcall(L, f_call, &c, savestack(L, c.func), func);
X    status = luaD_pcall(L, f_call, &c, ((char *)(c . func) - (char *)L->stack), func);
N  }
N  else {  /* prepare continuation (call is already protected by 'resume') */
N    CallInfo *ci = L->ci;
N    ci->u.c.k = k;  /* save continuation */
N    ci->u.c.ctx = ctx;  /* save context */
N    /* save information for error recovery */
N    ci->u2.funcidx = cast_int(savestack(L, c.func));
X    ci->u2.funcidx = ((int)((((char *)(c . func) - (char *)L->stack))));
N    ci->u.c.old_errfunc = L->errfunc;
N    L->errfunc = func;
N    setoah(ci->callstatus, L->allowhook);  /* save value of 'allowhook' */
X    ((ci->callstatus) = ((ci->callstatus) & ~(1<<0)) | (L->allowhook));   
N    ci->callstatus |= CIST_YPCALL;  /* function can do error recovery */
X    ci->callstatus |= (1<<3);   
N    luaD_call(L, c.func, nresults);  /* do the call */
N    ci->callstatus &= ~CIST_YPCALL;
X    ci->callstatus &= ~(1<<3);
N    L->errfunc = ci->u.c.old_errfunc;
N    status = LUA_OK;  /* if it is here, there were no errors */
X    status = 0;   
N  }
N  adjustresults(L, nresults);
X  { if ((nresults) == (-1) && L->ci->top < L->top) L->ci->top = L->top; };
N  lua_unlock(L);
X  ((void) 0);
N  return status;
N}
N
N
NLUA_API int lua_load (lua_State *L, lua_Reader reader, void *data,
Xextern int lua_load (lua_State *L, lua_Reader reader, void *data,
N                      const char *chunkname, const char *mode) {
N  ZIO z;
N  int status;
N  lua_lock(L);
X  ((void) 0);
N  if (!chunkname) chunkname = "?";
N  luaZ_init(L, &z, reader, data);
N  status = luaD_protectedparser(L, &z, chunkname, mode);
N  if (status == LUA_OK) {  /* no errors? */
X  if (status == 0) {   
N    LClosure *f = clLvalue(s2v(L->top - 1));  /* get newly created function */
X    LClosure *f = ((&((((union GCUnion *)(((((&(L->top - 1)->val))->value_). gc))))->cl . l)));   
N    if (f->nupvalues >= 1) {  /* does it have an upvalue? */
N      /* get global table from registry */
N      Table *reg = hvalue(&G(L)->l_registry);
X      Table *reg = ((&((((union GCUnion *)((((&(L->l_G)->l_registry)->value_). gc))))->h)));
N      const TValue *gt = luaH_getint(reg, LUA_RIDX_GLOBALS);
X      const TValue *gt = luaH_getint(reg, 2);
N      /* set global table as 1st upvalue of 'f' (may be LUA_ENV) */
N      setobj(L, f->upvals[0]->v, gt);
X      { TValue *io1=(f->upvals[0]->v); const TValue *io2=(gt); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N      luaC_barrier(L, f->upvals[0], gt);
X      ( ((((gt)->tt_) & (1 << 6)) && (((f->upvals[0])->marked) & ((1<<(5)))) && ((((((gt)->value_). gc))->marked) & (((1<<(3)) | (1<<(4)))))) ? luaC_barrier_(L,(&(((union GCUnion *)((f->upvals[0])))->gc)),(((gt)->value_). gc)) : ((void)((0))));
N    }
N  }
N  lua_unlock(L);
X  ((void) 0);
N  return status;
N}
N
N
NLUA_API int lua_dump (lua_State *L, lua_Writer writer, void *data, int strip) {
Xextern int lua_dump (lua_State *L, lua_Writer writer, void *data, int strip) {
N  int status;
N  TValue *o;
N  lua_lock(L);
X  ((void) 0);
N  api_checknelems(L, 1);
X  ((void)0);
N  o = s2v(L->top - 1);
X  o = (&(L->top - 1)->val);
N  if (isLfunction(o))
X  if (((((o))->tt_) == ((((6 | (1 << 4))) | (1 << 6)))))
N    status = luaU_dump(L, getproto(o), writer, data, strip);
X    status = luaU_dump(L, (((&((((union GCUnion *)((((o)->value_). gc))))->cl . l)))->p), writer, data, strip);
N  else
N    status = 1;
N  lua_unlock(L);
X  ((void) 0);
N  return status;
N}
N
N
NLUA_API int lua_status (lua_State *L) {
Xextern int lua_status (lua_State *L) {
N  return L->status;
N}
N
N
N/*
N** Garbage-collection function
N*/
NLUA_API int lua_gc (lua_State *L, int what, ...) {
Xextern int lua_gc (lua_State *L, int what, ...) {
N  va_list argp;
N  int res = 0;
N  global_State *g = G(L);
X  global_State *g = (L->l_G);
N  lua_lock(L);
X  ((void) 0);
N  va_start(argp, what);
X  __va_start(argp, what);
N  switch (what) {
N    case LUA_GCSTOP: {
X    case 0: {
N      g->gcrunning = 0;
N      break;
N    }
N    case LUA_GCRESTART: {
X    case 1: {
N      luaE_setdebt(g, 0);
N      g->gcrunning = 1;
N      break;
N    }
N    case LUA_GCCOLLECT: {
X    case 2: {
N      luaC_fullgc(L, 0);
N      break;
N    }
N    case LUA_GCCOUNT: {
X    case 3: {
N      /* GC values are expressed in Kbytes: #bytes/2^10 */
N      res = cast_int(gettotalbytes(g) >> 10);
X      res = ((int)((((lu_mem)((g)->totalbytes + (g)->GCdebt)) >> 10)));
N      break;
N    }
N    case LUA_GCCOUNTB: {
X    case 4: {
N      res = cast_int(gettotalbytes(g) & 0x3ff);
X      res = ((int)((((lu_mem)((g)->totalbytes + (g)->GCdebt)) & 0x3ff)));
N      break;
N    }
N    case LUA_GCSTEP: {
X    case 5: {
N      int data = va_arg(argp, int);
X      int data = __va_arg(argp, int);
N      l_mem debt = 1;  /* =1 to signal that it did an actual step */
N      lu_byte oldrunning = g->gcrunning;
N      g->gcrunning = 1;  /* allow GC to run */
N      if (data == 0) {
N        luaE_setdebt(g, 0);  /* do a basic step */
N        luaC_step(L);
N      }
N      else {  /* add 'data' to total debt */
N        debt = cast(l_mem, data) * 1024 + g->GCdebt;
X        debt = ((l_mem)(data)) * 1024 + g->GCdebt;
N        luaE_setdebt(g, debt);
N        luaC_checkGC(L);
X        { if ((L->l_G)->GCdebt > 0) { (void)0; luaC_step(L); (void)0;}; ((void)0); };
N      }
N      g->gcrunning = oldrunning;  /* restore previous state */
N      if (debt > 0 && g->gcstate == GCSpause)  /* end of cycle? */
X      if (debt > 0 && g->gcstate == 8)   
N        res = 1;  /* signal it */
N      break;
N    }
N    case LUA_GCSETPAUSE: {
X    case 6: {
N      int data = va_arg(argp, int);
X      int data = __va_arg(argp, int);
N      res = getgcparam(g->gcpause);
X      res = ((g->gcpause) * 4);
N      setgcparam(g->gcpause, data);
X      ((g->gcpause) = (data) / 4);
N      break;
N    }
N    case LUA_GCSETSTEPMUL: {
X    case 7: {
N      int data = va_arg(argp, int);
X      int data = __va_arg(argp, int);
N      res = getgcparam(g->gcstepmul);
X      res = ((g->gcstepmul) * 4);
N      setgcparam(g->gcstepmul, data);
X      ((g->gcstepmul) = (data) / 4);
N      break;
N    }
N    case LUA_GCISRUNNING: {
X    case 9: {
N      res = g->gcrunning;
N      break;
N    }
N    case LUA_GCGEN: {
X    case 10: {
N      int oldmode = g->gckind;
N      int minormul = va_arg(argp, int);
X      int minormul = __va_arg(argp, int);
N      int majormul = va_arg(argp, int);
X      int majormul = __va_arg(argp, int);
N      if (minormul != 0)
N        g->genminormul = minormul;
N      if (majormul != 0)
N        setgcparam(g->genmajormul, majormul);
X        ((g->genmajormul) = (majormul) / 4);
N      luaC_changemode(L, KGC_GEN);
X      luaC_changemode(L, 1);
N      res = (oldmode == KGC_GEN) ? LUA_GCGEN : LUA_GCINC;
X      res = (oldmode == 1) ? 10 : 11;
N      break;
N    }
N    case LUA_GCINC: {
X    case 11: {
N      int oldmode = g->gckind;
N      int pause = va_arg(argp, int);
X      int pause = __va_arg(argp, int);
N      int stepmul = va_arg(argp, int);
X      int stepmul = __va_arg(argp, int);
N      int stepsize = va_arg(argp, int);
X      int stepsize = __va_arg(argp, int);
N      if (pause != 0)
N        setgcparam(g->gcpause, pause);
X        ((g->gcpause) = (pause) / 4);
N      if (stepmul != 0)
N        setgcparam(g->gcstepmul, stepmul);
X        ((g->gcstepmul) = (stepmul) / 4);
N      if (stepsize != 0)
N        g->gcstepsize = stepsize;
N      luaC_changemode(L, KGC_INC);
X      luaC_changemode(L, 0);
N      res = (oldmode == KGC_GEN) ? LUA_GCGEN : LUA_GCINC;
X      res = (oldmode == 1) ? 10 : 11;
N      break;
N    }
N    default: res = -1;  /* invalid option */
N  }
N  va_end(argp);
X  __va_end(argp);
N  lua_unlock(L);
X  ((void) 0);
N  return res;
N}
N
N
N
N/*
N** miscellaneous functions
N*/
N
N
NLUA_API int lua_error (lua_State *L) {
Xextern int lua_error (lua_State *L) {
N  lua_lock(L);
X  ((void) 0);
N  api_checknelems(L, 1);
X  ((void)0);
N  luaG_errormsg(L);
N  /* code unreachable; will unlock when control actually leaves the kernel */
N  return 0;  /* to avoid warnings */
N}
N
N
NLUA_API int lua_next (lua_State *L, int idx) {
Xextern int lua_next (lua_State *L, int idx) {
N  Table *t;
N  int more;
N  lua_lock(L);
X  ((void) 0);
N  api_checknelems(L, 1);
X  ((void)0);
N  t = gettable(L, idx);
N  more = luaH_next(L, t, L->top - 1);
N  if (more) {
N    api_incr_top(L);
X    {L->top++; ((void)0);};
N  }
N  else  /* no more elements */
N    L->top -= 1;  /* remove key */
N  lua_unlock(L);
X  ((void) 0);
N  return more;
N}
N
N
NLUA_API void lua_concat (lua_State *L, int n) {
Xextern void lua_concat (lua_State *L, int n) {
N  lua_lock(L);
X  ((void) 0);
N  api_checknelems(L, n);
X  ((void)0);
N  if (n >= 2) {
N    luaV_concat(L, n);
N  }
N  else if (n == 0) {  /* push empty string */
N    setsvalue2s(L, L->top, luaS_newlstr(L, "", 0));
X    { TValue *io = ((&(L->top)->val)); TString *x_ = (luaS_newlstr(L, "", 0)); ((io)->value_). gc = (&(((union GCUnion *)((x_)))->gc)); ((io)->tt_=(((x_->tt) | (1 << 6)))); ((void)0); };
N    api_incr_top(L);
X    {L->top++; ((void)0);};
N  }
N  /* else n == 1; nothing to do */
N  luaC_checkGC(L);
X  { if ((L->l_G)->GCdebt > 0) { (void)0; luaC_step(L); (void)0;}; ((void)0); };
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
NLUA_API void lua_len (lua_State *L, int idx) {
Xextern void lua_len (lua_State *L, int idx) {
N  TValue *t;
N  lua_lock(L);
X  ((void) 0);
N  t = index2value(L, idx);
N  luaV_objlen(L, L->top, t);
N  api_incr_top(L);
X  {L->top++; ((void)0);};
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
NLUA_API lua_Alloc lua_getallocf (lua_State *L, void **ud) {
Xextern lua_Alloc lua_getallocf (lua_State *L, void **ud) {
N  lua_Alloc f;
N  lua_lock(L);
X  ((void) 0);
N  if (ud) *ud = G(L)->ud;
X  if (ud) *ud = (L->l_G)->ud;
N  f = G(L)->frealloc;
X  f = (L->l_G)->frealloc;
N  lua_unlock(L);
X  ((void) 0);
N  return f;
N}
N
N
NLUA_API void lua_setallocf (lua_State *L, lua_Alloc f, void *ud) {
Xextern void lua_setallocf (lua_State *L, lua_Alloc f, void *ud) {
N  lua_lock(L);
X  ((void) 0);
N  G(L)->ud = ud;
X  (L->l_G)->ud = ud;
N  G(L)->frealloc = f;
X  (L->l_G)->frealloc = f;
N  lua_unlock(L);
X  ((void) 0);
N}
N
N
NLUA_API void *lua_newuserdatauv (lua_State *L, size_t size, int nuvalue) {
Xextern void *lua_newuserdatauv (lua_State *L, size_t size, int nuvalue) {
N  Udata *u;
N  lua_lock(L);
X  ((void) 0);
N  api_check(L, 0 <= nuvalue && nuvalue < USHRT_MAX, "invalid value");
X  ((void)0);
N  u = luaS_newudata(L, size, nuvalue);
N  setuvalue(L, s2v(L->top), u);
X  { TValue *io = ((&(L->top)->val)); Udata *x_ = (u); ((io)->value_). gc = (&(((union GCUnion *)((x_)))->gc)); ((io)->tt_=(((7) | (1 << 6)))); ((void)0); };
N  api_incr_top(L);
X  {L->top++; ((void)0);};
N  luaC_checkGC(L);
X  { if ((L->l_G)->GCdebt > 0) { (void)0; luaC_step(L); (void)0;}; ((void)0); };
N  lua_unlock(L);
X  ((void) 0);
N  return getudatamem(u);
X  return (((char *)((u))) + (((u)->nuvalue) == 0 ? (( size_t)__INTADDR__(&(((Udata0 *)0)->bindata))) : (( size_t)__INTADDR__(&(((Udata *)0)->uv))) + (sizeof(UValue) * ((u)->nuvalue))));
N}
N
N
N
Nstatic const char *aux_upvalue (TValue *fi, int n, TValue **val,
N                                GCObject **owner) {
N  switch (ttypetag(fi)) {
X  switch (((((fi)->tt_)) & 0x3F)) {
N    case LUA_TCCL: {  /* C closure */
X    case (6 | (3 << 4)): {   
N      CClosure *f = clCvalue(fi);
X      CClosure *f = ((&((((union GCUnion *)((((fi)->value_). gc))))->cl . c)));
N      if (!(1 <= n && n <= f->nupvalues)) return NULL;
X      if (!(1 <= n && n <= f->nupvalues)) return 0;
N      *val = &f->upvalue[n-1];
N      if (owner) *owner = obj2gco(f);
X      if (owner) *owner = (&(((union GCUnion *)((f)))->gc));
N      return "";
N    }
N    case LUA_TLCL: {  /* Lua closure */
X    case (6 | (1 << 4)): {   
N      LClosure *f = clLvalue(fi);
X      LClosure *f = ((&((((union GCUnion *)((((fi)->value_). gc))))->cl . l)));
N      TString *name;
N      Proto *p = f->p;
N      if (!(1 <= n && n <= p->sizeupvalues)) return NULL;
X      if (!(1 <= n && n <= p->sizeupvalues)) return 0;
N      *val = f->upvals[n-1]->v;
N      if (owner) *owner = obj2gco(f->upvals[n - 1]);
X      if (owner) *owner = (&(((union GCUnion *)((f->upvals[n - 1])))->gc));
N      name = p->upvalues[n-1].name;
N      return (name == NULL) ? "(*no name)" : getstr(name);
X      return (name == 0) ? "(*no name)" : (((char *)(((name)))) + sizeof(UTString));
N    }
N    default: return NULL;  /* not a closure */
X    default: return 0;   
N  }
N}
N
N
NLUA_API const char *lua_getupvalue (lua_State *L, int funcindex, int n) {
Xextern const char *lua_getupvalue (lua_State *L, int funcindex, int n) {
N  const char *name;
N  TValue *val = NULL;  /* to avoid warnings */
X  TValue *val = 0;   
N  lua_lock(L);
X  ((void) 0);
N  name = aux_upvalue(index2value(L, funcindex), n, &val, NULL);
X  name = aux_upvalue(index2value(L, funcindex), n, &val, 0);
N  if (name) {
N    setobj2s(L, L->top, val);
X    { TValue *io1=((&(L->top)->val)); const TValue *io2=(val); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N    api_incr_top(L);
X    {L->top++; ((void)0);};
N  }
N  lua_unlock(L);
X  ((void) 0);
N  return name;
N}
N
N
NLUA_API const char *lua_setupvalue (lua_State *L, int funcindex, int n) {
Xextern const char *lua_setupvalue (lua_State *L, int funcindex, int n) {
N  const char *name;
N  TValue *val = NULL;  /* to avoid warnings */
X  TValue *val = 0;   
N  GCObject *owner = NULL;  /* to avoid warnings */
X  GCObject *owner = 0;   
N  TValue *fi;
N  lua_lock(L);
X  ((void) 0);
N  fi = index2value(L, funcindex);
N  api_checknelems(L, 1);
X  ((void)0);
N  name = aux_upvalue(fi, n, &val, &owner);
N  if (name) {
N    L->top--;
N    setobj(L, val, s2v(L->top));
X    { TValue *io1=(val); const TValue *io2=((&(L->top)->val)); io1->value_ = io2->value_; io1->tt_ = io2->tt_; (void)L; ((void)0); ((void)0); };
N    luaC_barrier(L, owner, val);
X    ( ((((val)->tt_) & (1 << 6)) && (((owner)->marked) & ((1<<(5)))) && ((((((val)->value_). gc))->marked) & (((1<<(3)) | (1<<(4)))))) ? luaC_barrier_(L,(&(((union GCUnion *)((owner)))->gc)),(((val)->value_). gc)) : ((void)((0))));
N  }
N  lua_unlock(L);
X  ((void) 0);
N  return name;
N}
N
N
Nstatic UpVal **getupvalref (lua_State *L, int fidx, int n, LClosure **pf) {
N  LClosure *f;
N  TValue *fi = index2value(L, fidx);
N  api_check(L, ttisLclosure(fi), "Lua function expected");
X  ((void)0);
N  f = clLvalue(fi);
X  f = ((&((((union GCUnion *)((((fi)->value_). gc))))->cl . l)));
N  api_check(L, (1 <= n && n <= f->p->sizeupvalues), "invalid upvalue index");
X  ((void)0);
N  if (pf) *pf = f;
N  return &f->upvals[n - 1];  /* get its upvalue pointer */
N}
N
N
NLUA_API void *lua_upvalueid (lua_State *L, int fidx, int n) {
Xextern void *lua_upvalueid (lua_State *L, int fidx, int n) {
N  TValue *fi = index2value(L, fidx);
N  switch (ttypetag(fi)) {
X  switch (((((fi)->tt_)) & 0x3F)) {
N    case LUA_TLCL: {  /* lua closure */
X    case (6 | (1 << 4)): {   
N      return *getupvalref(L, fidx, n, NULL);
X      return *getupvalref(L, fidx, n, 0);
N    }
N    case LUA_TCCL: {  /* C closure */
X    case (6 | (3 << 4)): {   
N      CClosure *f = clCvalue(fi);
X      CClosure *f = ((&((((union GCUnion *)((((fi)->value_). gc))))->cl . c)));
N      api_check(L, 1 <= n && n <= f->nupvalues, "invalid upvalue index");
X      ((void)0);
N      return &f->upvalue[n - 1];
N    }
N    default: {
N      api_check(L, 0, "closure expected");
X      ((void)0);
N      return NULL;
X      return 0;
N    }
N  }
N}
N
N
NLUA_API void lua_upvaluejoin (lua_State *L, int fidx1, int n1,
Xextern void lua_upvaluejoin (lua_State *L, int fidx1, int n1,
N                                            int fidx2, int n2) {
N  LClosure *f1;
N  UpVal **up1 = getupvalref(L, fidx1, n1, &f1);
N  UpVal **up2 = getupvalref(L, fidx2, n2, NULL);
X  UpVal **up2 = getupvalref(L, fidx2, n2, 0);
N  *up1 = *up2;
N  luaC_objbarrier(L, f1, *up1);
X  ( ((((f1)->marked) & ((1<<(5)))) && (((*up1)->marked) & (((1<<(3)) | (1<<(4)))))) ? luaC_barrier_(L,(&(((union GCUnion *)((f1)))->gc)),(&(((union GCUnion *)((*up1)))->gc))) : ((void)((0))));
N}
N
N
