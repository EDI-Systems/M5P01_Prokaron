; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\lobject.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\lobject.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\lobject.crf ..\..\..\M6P1(L)_Lua\lua\lobject.c]
                          THUMB

                          AREA ||i.intarith||, CODE, READONLY, ALIGN=1

                  intarith PROC
;;;82     
;;;83     static lua_Integer intarith (lua_State *L, int op, lua_Integer v1,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;84                                                        lua_Integer v2) {
000004  4681              MOV      r9,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  e9dd670a          LDRD     r6,r7,[sp,#0x28]
;;;85       switch (op) {
000010  f1b80f0e          CMP      r8,#0xe
000014  d252              BCS      |L1.188|
000016  e8dff008          TBB      [pc,r8]
00001a  070c              DCB      0x07,0x0c
00001c  10175151          DCB      0x10,0x17,0x51,0x51
000020  1f272c31          DCB      0x1f,0x27,0x2c,0x31
000024  363d464b          DCB      0x36,0x3d,0x46,0x4b
;;;86         case LUA_OPADD: return intop(+, v1, v2);
000028  19a0              ADDS     r0,r4,r6
00002a  eb450107          ADC      r1,r5,r7
                  |L1.46|
;;;87         case LUA_OPSUB:return intop(-, v1, v2);
;;;88         case LUA_OPMUL:return intop(*, v1, v2);
;;;89         case LUA_OPMOD: return luaV_mod(L, v1, v2);
;;;90         case LUA_OPIDIV: return luaV_div(L, v1, v2);
;;;91         case LUA_OPBAND: return intop(&, v1, v2);
;;;92         case LUA_OPBOR: return intop(|, v1, v2);
;;;93         case LUA_OPBXOR: return intop(^, v1, v2);
;;;94         case LUA_OPSHL: return luaV_shiftl(v1, v2);
;;;95         case LUA_OPSHR: return luaV_shiftl(v1, -v2);
;;;96         case LUA_OPUNM: return intop(-, 0, v1);
;;;97         case LUA_OPBNOT: return intop(^, ~l_castS2U(0), v1);
;;;98         default: lua_assert(0); return 0;
;;;99       }
;;;100    }
00002e  e8bd87fc          POP      {r2-r10,pc}
000032  1ba0              SUBS     r0,r4,r6              ;87
000034  eb650107          SBC      r1,r5,r7              ;87
000038  e7f9              B        |L1.46|
00003a  fba40106          UMULL    r0,r1,r4,r6           ;88
00003e  fb051106          MLA      r1,r5,r6,r1           ;88
000042  fb041107          MLA      r1,r4,r7,r1           ;88
000046  e7f2              B        |L1.46|
000048  4622              MOV      r2,r4                 ;89
00004a  462b              MOV      r3,r5                 ;89
00004c  4648              MOV      r0,r9                 ;89
00004e  e9cd6700          STRD     r6,r7,[sp,#0]         ;89
000052  f7fffffe          BL       luaV_mod
000056  e7ea              B        |L1.46|
000058  4622              MOV      r2,r4                 ;90
00005a  462b              MOV      r3,r5                 ;90
00005c  4648              MOV      r0,r9                 ;90
00005e  e9cd6700          STRD     r6,r7,[sp,#0]         ;90
000062  f7fffffe          BL       luaV_div
000066  e7e2              B        |L1.46|
000068  ea040006          AND      r0,r4,r6              ;91
00006c  ea050107          AND      r1,r5,r7              ;91
000070  e7dd              B        |L1.46|
000072  ea440006          ORR      r0,r4,r6              ;92
000076  ea450107          ORR      r1,r5,r7              ;92
00007a  e7d8              B        |L1.46|
00007c  ea840006          EOR      r0,r4,r6              ;93
000080  ea850107          EOR      r1,r5,r7              ;93
000084  e7d3              B        |L1.46|
000086  4632              MOV      r2,r6                 ;94
000088  463b              MOV      r3,r7                 ;94
00008a  4620              MOV      r0,r4                 ;94
00008c  4629              MOV      r1,r5                 ;94
00008e  f7fffffe          BL       luaV_shiftl
000092  e7cc              B        |L1.46|
000094  2300              MOVS     r3,#0                 ;95
000096  4272              RSBS     r2,r6,#0              ;95
000098  eb630307          SBC      r3,r3,r7              ;95
00009c  4620              MOV      r0,r4                 ;95
00009e  4629              MOV      r1,r5                 ;95
0000a0  f7fffffe          BL       luaV_shiftl
0000a4  e7c3              B        |L1.46|
0000a6  2100              MOVS     r1,#0                 ;96
0000a8  1b08              SUBS     r0,r1,r4              ;96
0000aa  eb610105          SBC      r1,r1,r5              ;96
0000ae  e7be              B        |L1.46|
0000b0  f04f31ff          MOV      r1,#0xffffffff        ;97
0000b4  ea840001          EOR      r0,r4,r1              ;97
0000b8  4069              EORS     r1,r1,r5              ;97
0000ba  e7b8              B        |L1.46|
                  |L1.188|
0000bc  2000              MOVS     r0,#0                 ;98
0000be  4601              MOV      r1,r0                 ;98
0000c0  e7b5              B        |L1.46|
;;;101    
                          ENDP


                          AREA ||i.isneg||, CODE, READONLY, ALIGN=1

                  isneg PROC
;;;174    
;;;175    static int isneg (const char **s) {
000000  4601              MOV      r1,r0
;;;176      if (**s == '-') { (*s)++; return 1; }
000002  6808              LDR      r0,[r1,#0]
000004  7800              LDRB     r0,[r0,#0]
000006  282d              CMP      r0,#0x2d
000008  d104              BNE      |L2.20|
00000a  6808              LDR      r0,[r1,#0]
00000c  1c40              ADDS     r0,r0,#1
00000e  6008              STR      r0,[r1,#0]
000010  2001              MOVS     r0,#1
                  |L2.18|
;;;177      else if (**s == '+') (*s)++;
;;;178      return 0;
;;;179    }
000012  4770              BX       lr
                  |L2.20|
000014  6808              LDR      r0,[r1,#0]            ;177
000016  7800              LDRB     r0,[r0,#0]            ;177
000018  282b              CMP      r0,#0x2b              ;177
00001a  d102              BNE      |L2.34|
00001c  6808              LDR      r0,[r1,#0]            ;177
00001e  1c40              ADDS     r0,r0,#1              ;177
000020  6008              STR      r0,[r1,#0]            ;177
                  |L2.34|
000022  2000              MOVS     r0,#0                 ;178
000024  e7f5              B        |L2.18|
;;;180    
                          ENDP


                          AREA ||i.l_str2d||, CODE, READONLY, ALIGN=2

                  l_str2d PROC
;;;279    */
;;;280    static const char *l_str2d (const char *s, lua_Number *result) {
000000  e92d43f0          PUSH     {r4-r9,lr}
000004  b0b3              SUB      sp,sp,#0xcc
000006  4605              MOV      r5,r0
000008  4689              MOV      r9,r1
;;;281      const char *endptr;
;;;282      const char *pmode = strpbrk(s, ".xXnN");
00000a  a120              ADR      r1,|L3.140|
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       strpbrk
000012  4606              MOV      r6,r0
;;;283      int mode = pmode ? ltolower(cast_uchar(*pmode)) : 0;
000014  b11e              CBZ      r6,|L3.30|
000016  7830              LDRB     r0,[r6,#0]
000018  f0400020          ORR      r0,r0,#0x20
00001c  e000              B        |L3.32|
                  |L3.30|
00001e  2000              MOVS     r0,#0
                  |L3.32|
000020  4607              MOV      r7,r0
;;;284      if (mode == 'n')  /* reject 'inf' and 'nan' */
000022  2f6e              CMP      r7,#0x6e
000024  d103              BNE      |L3.46|
;;;285        return NULL;
000026  2000              MOVS     r0,#0
                  |L3.40|
;;;286      endptr = l_str2dloc(s, result, mode);  /* try to convert */
;;;287      if (endptr == NULL) {  /* failed? may be a different locale */
;;;288        char buff[L_MAXLENNUM + 1];
;;;289        const char *pdot = strchr(s, '.');
;;;290        if (strlen(s) > L_MAXLENNUM || pdot == NULL)
;;;291          return NULL;  /* string too long or no dot; fail */
;;;292        strcpy(buff, s);  /* copy string to buffer */
;;;293        buff[pdot - s] = lua_getlocaledecpoint();  /* correct decimal point */
;;;294        endptr = l_str2dloc(buff, result, mode);  /* try again */
;;;295        if (endptr != NULL)
;;;296          endptr = s + (endptr - buff);  /* make relative to 's' */
;;;297      }
;;;298      return endptr;
;;;299    }
000028  b033              ADD      sp,sp,#0xcc
00002a  e8bd83f0          POP      {r4-r9,pc}
                  |L3.46|
00002e  463a              MOV      r2,r7                 ;286
000030  4649              MOV      r1,r9                 ;286
000032  4628              MOV      r0,r5                 ;286
000034  f7fffffe          BL       l_str2dloc
000038  4604              MOV      r4,r0                 ;286
00003a  bb2c              CBNZ     r4,|L3.136|
00003c  212e              MOVS     r1,#0x2e              ;289
00003e  4628              MOV      r0,r5                 ;289
000040  f7fffffe          BL       strchr
000044  4680              MOV      r8,r0                 ;289
000046  4628              MOV      r0,r5                 ;290
000048  f7fffffe          BL       strlen
00004c  28c8              CMP      r0,#0xc8              ;290
00004e  d802              BHI      |L3.86|
000050  f1b80f00          CMP      r8,#0                 ;290
000054  d101              BNE      |L3.90|
                  |L3.86|
000056  2000              MOVS     r0,#0                 ;291
000058  e7e6              B        |L3.40|
                  |L3.90|
00005a  4629              MOV      r1,r5                 ;292
00005c  4668              MOV      r0,sp                 ;292
00005e  f7fffffe          BL       strcpy
000062  f7fffffe          BL       localeconv
000066  6800              LDR      r0,[r0,#0]            ;293
000068  7800              LDRB     r0,[r0,#0]            ;293
00006a  eba80105          SUB      r1,r8,r5              ;293
00006e  f80d0001          STRB     r0,[sp,r1]            ;293
000072  463a              MOV      r2,r7                 ;294
000074  4649              MOV      r1,r9                 ;294
000076  4668              MOV      r0,sp                 ;294
000078  f7fffffe          BL       l_str2dloc
00007c  4604              MOV      r4,r0                 ;294
00007e  b114              CBZ      r4,|L3.134|
000080  4668              MOV      r0,sp                 ;296
000082  1a20              SUBS     r0,r4,r0              ;296
000084  1944              ADDS     r4,r0,r5              ;296
                  |L3.134|
000086  bf00              NOP                            ;297
                  |L3.136|
000088  4620              MOV      r0,r4                 ;298
00008a  e7cd              B        |L3.40|
;;;300    
                          ENDP

                  |L3.140|
00008c  2e78586e          DCB      ".xXnN",0
000090  4e00    
000092  00                DCB      0
000093  00                DCB      0

                          AREA ||i.l_str2dloc||, CODE, READONLY, ALIGN=2

                  l_str2dloc PROC
;;;256    
;;;257    static const char *l_str2dloc (const char *s, lua_Number *result, int mode) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;258      char *endptr;
;;;259      *result = (mode == 'x') ? lua_strx2number(s, &endptr)  /* try to convert */
000008  2e78              CMP      r6,#0x78
00000a  d104              BNE      |L4.22|
00000c  4669              MOV      r1,sp
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       strtod
000014  e003              B        |L4.30|
                  |L4.22|
;;;260                              : lua_str2number(s, &endptr);
000016  4669              MOV      r1,sp
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       strtod
                  |L4.30|
00001e  e9c50100          STRD     r0,r1,[r5,#0]
;;;261      if (endptr == s) return NULL;  /* nothing recognized? */
000022  9800              LDR      r0,[sp,#0]
000024  42a0              CMP      r0,r4
000026  d101              BNE      |L4.44|
000028  2000              MOVS     r0,#0
                  |L4.42|
;;;262      while (lisspace(cast_uchar(*endptr))) endptr++;  /* skip trailing spaces */
;;;263      return (*endptr == '\0') ? endptr : NULL;  /* OK if no trailing characters */
;;;264    }
00002a  bdf8              POP      {r3-r7,pc}
                  |L4.44|
00002c  e002              B        |L4.52|
                  |L4.46|
00002e  9800              LDR      r0,[sp,#0]            ;262
000030  1c40              ADDS     r0,r0,#1              ;262
000032  9000              STR      r0,[sp,#0]            ;262
                  |L4.52|
000034  9800              LDR      r0,[sp,#0]            ;262
000036  7800              LDRB     r0,[r0,#0]            ;262
000038  1c40              ADDS     r0,r0,#1              ;262
00003a  4906              LDR      r1,|L4.84|
00003c  5c08              LDRB     r0,[r1,r0]            ;262
00003e  f0000008          AND      r0,r0,#8              ;262
000042  2800              CMP      r0,#0                 ;262
000044  d1f3              BNE      |L4.46|
000046  9800              LDR      r0,[sp,#0]            ;263
000048  7800              LDRB     r0,[r0,#0]            ;263
00004a  b908              CBNZ     r0,|L4.80|
00004c  9800              LDR      r0,[sp,#0]            ;263
00004e  e7ec              B        |L4.42|
                  |L4.80|
000050  2000              MOVS     r0,#0                 ;263
000052  e7ea              B        |L4.42|
;;;265    
                          ENDP

                  |L4.84|
                          DCD      luai_ctype_

                          AREA ||i.l_str2int||, CODE, READONLY, ALIGN=2

                  l_str2int PROC
;;;304    
;;;305    static const char *l_str2int (const char *s, lua_Integer *result) {
000000  e92d5ff3          PUSH     {r0,r1,r4-r12,lr}
000004  460f              MOV      r7,r1
;;;306      lua_Unsigned a = 0;
000006  2000              MOVS     r0,#0
000008  4604              MOV      r4,r0
00000a  4605              MOV      r5,r0
;;;307      int empty = 1;
00000c  f04f0801          MOV      r8,#1
;;;308      int neg;
;;;309      while (lisspace(cast_uchar(*s))) s++;  /* skip initial spaces */
000010  e002              B        |L5.24|
                  |L5.18|
000012  9800              LDR      r0,[sp,#0]
000014  1c40              ADDS     r0,r0,#1
000016  9000              STR      r0,[sp,#0]
                  |L5.24|
000018  9800              LDR      r0,[sp,#0]
00001a  7800              LDRB     r0,[r0,#0]
00001c  1c40              ADDS     r0,r0,#1
00001e  494b              LDR      r1,|L5.332|
000020  5c08              LDRB     r0,[r1,r0]
000022  f0000008          AND      r0,r0,#8
000026  2800              CMP      r0,#0
000028  d1f3              BNE      |L5.18|
;;;310      neg = isneg(&s);
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       isneg
000030  4606              MOV      r6,r0
;;;311      if (s[0] == '0' &&
000032  9800              LDR      r0,[sp,#0]
000034  7800              LDRB     r0,[r0,#0]
000036  2830              CMP      r0,#0x30
000038  d12e              BNE      |L5.152|
;;;312          (s[1] == 'x' || s[1] == 'X')) {  /* hex? */
00003a  9800              LDR      r0,[sp,#0]
00003c  7840              LDRB     r0,[r0,#1]
00003e  2878              CMP      r0,#0x78
000040  d003              BEQ      |L5.74|
000042  9800              LDR      r0,[sp,#0]
000044  7840              LDRB     r0,[r0,#1]
000046  2858              CMP      r0,#0x58
000048  d126              BNE      |L5.152|
                  |L5.74|
;;;313        s += 2;  /* skip '0x' */
00004a  9800              LDR      r0,[sp,#0]
00004c  1c80              ADDS     r0,r0,#2
00004e  9000              STR      r0,[sp,#0]
;;;314        for (; lisxdigit(cast_uchar(*s)); s++) {
000050  e017              B        |L5.130|
                  |L5.82|
;;;315          a = a * 16 + luaO_hexavalue(*s);
000052  9900              LDR      r1,[sp,#0]
000054  f9910000          LDRSB    r0,[r1,#0]
000058  f7fffffe          BL       luaO_hexavalue
00005c  f04f0c10          MOV      r12,#0x10
000060  f04f0a00          MOV      r10,#0
000064  4623              MOV      r3,r4
000066  fba32b0c          UMULL    r2,r11,r3,r12
00006a  fb05bc0c          MLA      r12,r5,r12,r11
00006e  fb04c30a          MLA      r3,r4,r10,r12
000072  1884              ADDS     r4,r0,r2
000074  eb4375e0          ADC      r5,r3,r0,ASR #31
;;;316          empty = 0;
000078  46d0              MOV      r8,r10
00007a  9800              LDR      r0,[sp,#0]            ;314
00007c  f1000001          ADD      r0,r0,#1              ;314
000080  9000              STR      r0,[sp,#0]            ;314
                  |L5.130|
000082  9800              LDR      r0,[sp,#0]            ;314
000084  7800              LDRB     r0,[r0,#0]            ;314
000086  f1000001          ADD      r0,r0,#1              ;314
00008a  4930              LDR      r1,|L5.332|
00008c  5c08              LDRB     r0,[r1,r0]            ;314
00008e  f0000010          AND      r0,r0,#0x10           ;314
000092  2800              CMP      r0,#0                 ;314
000094  d1dd              BNE      |L5.82|
000096  e037              B        |L5.264|
                  |L5.152|
;;;317        }
;;;318      }
;;;319      else {  /* decimal */
;;;320        for (; lisdigit(cast_uchar(*s)); s++) {
000098  e02c              B        |L5.244|
                  |L5.154|
;;;321          int d = *s - '0';
00009a  9800              LDR      r0,[sp,#0]
00009c  f9900000          LDRSB    r0,[r0,#0]
0000a0  f1a00130          SUB      r1,r0,#0x30
;;;322          if (a >= MAXBY10 && (a > MAXBY10 || d > MAXLASTD + neg))  /* overflow? */
0000a4  f04f32cc          MOV      r2,#0xcccccccc
0000a8  0910              LSRS     r0,r2,#4
0000aa  1aa2              SUBS     r2,r4,r2
0000ac  eb750000          SBCS     r0,r5,r0
0000b0  d30b              BCC      |L5.202|
0000b2  f04f32cc          MOV      r2,#0xcccccccc
0000b6  0910              LSRS     r0,r2,#4
0000b8  1b12              SUBS     r2,r2,r4
0000ba  41a8              SBCS     r0,r0,r5
0000bc  d302              BCC      |L5.196|
0000be  1df0              ADDS     r0,r6,#7
0000c0  4288              CMP      r0,r1
0000c2  da02              BGE      |L5.202|
                  |L5.196|
;;;323            return NULL;  /* do not accept it (as integer) */
0000c4  2000              MOVS     r0,#0
                  |L5.198|
;;;324          a = a * 10 + d;
;;;325          empty = 0;
;;;326        }
;;;327      }
;;;328      while (lisspace(cast_uchar(*s))) s++;  /* skip trailing spaces */
;;;329      if (empty || *s != '\0') return NULL;  /* something wrong in the numeral */
;;;330      else {
;;;331        *result = l_castU2S((neg) ? 0u - a : a);
;;;332        return s;
;;;333      }
;;;334    }
0000c6  e8bd9ffc          POP      {r2-r12,pc}
                  |L5.202|
0000ca  f04f0c0a          MOV      r12,#0xa              ;324
0000ce  f04f0900          MOV      r9,#0                 ;324
0000d2  4623              MOV      r3,r4                 ;324
0000d4  fba30a0c          UMULL    r0,r10,r3,r12         ;324
0000d8  fb05a20c          MLA      r2,r5,r12,r10         ;324
0000dc  fb042309          MLA      r3,r4,r9,r2           ;324
0000e0  4684              MOV      r12,r0                ;324
0000e2  eb1c0401          ADDS     r4,r12,r1             ;324
0000e6  eb4375e1          ADC      r5,r3,r1,ASR #31      ;324
0000ea  46c8              MOV      r8,r9                 ;325
0000ec  9800              LDR      r0,[sp,#0]            ;320
0000ee  f1000001          ADD      r0,r0,#1              ;320
0000f2  9000              STR      r0,[sp,#0]            ;320
                  |L5.244|
0000f4  9800              LDR      r0,[sp,#0]            ;320
0000f6  7800              LDRB     r0,[r0,#0]            ;320
0000f8  f1000001          ADD      r0,r0,#1              ;320
0000fc  4913              LDR      r1,|L5.332|
0000fe  5c08              LDRB     r0,[r1,r0]            ;320
000100  f0000002          AND      r0,r0,#2              ;320
000104  2800              CMP      r0,#0                 ;320
000106  d1c8              BNE      |L5.154|
                  |L5.264|
000108  e002              B        |L5.272|
                  |L5.266|
00010a  9800              LDR      r0,[sp,#0]            ;328
00010c  1c40              ADDS     r0,r0,#1              ;328
00010e  9000              STR      r0,[sp,#0]            ;328
                  |L5.272|
000110  9800              LDR      r0,[sp,#0]            ;328
000112  7800              LDRB     r0,[r0,#0]            ;328
000114  1c40              ADDS     r0,r0,#1              ;328
000116  490d              LDR      r1,|L5.332|
000118  5c08              LDRB     r0,[r1,r0]            ;328
00011a  f0000008          AND      r0,r0,#8              ;328
00011e  2800              CMP      r0,#0                 ;328
000120  d1f3              BNE      |L5.266|
000122  f1b80f00          CMP      r8,#0                 ;329
000126  d102              BNE      |L5.302|
000128  9800              LDR      r0,[sp,#0]            ;329
00012a  7800              LDRB     r0,[r0,#0]            ;329
00012c  b108              CBZ      r0,|L5.306|
                  |L5.302|
00012e  2000              MOVS     r0,#0                 ;329
000130  e7c9              B        |L5.198|
                  |L5.306|
000132  b12e              CBZ      r6,|L5.320|
000134  2000              MOVS     r0,#0                 ;331
000136  4601              MOV      r1,r0                 ;331
000138  1b00              SUBS     r0,r0,r4              ;331
00013a  eb610105          SBC      r1,r1,r5              ;331
00013e  e001              B        |L5.324|
                  |L5.320|
000140  4620              MOV      r0,r4                 ;331
000142  4629              MOV      r1,r5                 ;331
                  |L5.324|
000144  e9c70100          STRD     r0,r1,[r7,#0]         ;331
000148  9800              LDR      r0,[sp,#0]            ;332
00014a  e7bc              B        |L5.198|
;;;335    
                          ENDP

                  |L5.332|
                          DCD      luai_ctype_

                          AREA ||i.luaO_arith||, CODE, READONLY, ALIGN=1

                  luaO_arith PROC
;;;159    
;;;160    void luaO_arith (lua_State *L, int op, const TValue *p1, const TValue *p2,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;161                     StkId res) {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  9f08              LDR      r7,[sp,#0x20]
;;;162      if (!luaO_rawarith(L, op, p1, p2, s2v(res))) {
00000e  4633              MOV      r3,r6
000010  462a              MOV      r2,r5
000012  4621              MOV      r1,r4
000014  4640              MOV      r0,r8
000016  9700              STR      r7,[sp,#0]
000018  f7fffffe          BL       luaO_rawarith
00001c  b940              CBNZ     r0,|L6.48|
;;;163        /* could not perform raw operation; try metamethod */
;;;164        luaT_trybinTM(L, p1, p2, res, cast(TMS, (op - LUA_OPADD) + TM_ADD));
00001e  4620              MOV      r0,r4
000020  3008              ADDS     r0,r0,#8
000022  463b              MOV      r3,r7
000024  4632              MOV      r2,r6
000026  4629              MOV      r1,r5
000028  9000              STR      r0,[sp,#0]
00002a  4640              MOV      r0,r8
00002c  f7fffffe          BL       luaT_trybinTM
                  |L6.48|
;;;165      }
;;;166    }
000030  e8bd83f8          POP      {r3-r9,pc}
;;;167    
                          ENDP


                          AREA ||i.luaO_ceillog2||, CODE, READONLY, ALIGN=2

                  luaO_ceillog2 PROC
;;;64     */
;;;65     int luaO_ceillog2 (unsigned int x) {
000000  4601              MOV      r1,r0
;;;66       static const lu_byte log_2[256] = {  /* log_2[i] = ceil(log2(i - 1)) */
;;;67         0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
;;;68         6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
;;;69         7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
;;;70         7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
;;;71         8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
;;;72         8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
;;;73         8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
;;;74         8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
;;;75       };
;;;76       int l = 0;
000002  2200              MOVS     r2,#0
;;;77       x--;
000004  1e49              SUBS     r1,r1,#1
;;;78       while (x >= 256) { l += 8; x >>= 8; }
000006  e001              B        |L7.12|
                  |L7.8|
000008  3208              ADDS     r2,r2,#8
00000a  0a09              LSRS     r1,r1,#8
                  |L7.12|
00000c  29ff              CMP      r1,#0xff
00000e  d8fb              BHI      |L7.8|
;;;79       return l + log_2[x];
000010  4801              LDR      r0,|L7.24|
000012  5c40              LDRB     r0,[r0,r1]
000014  4410              ADD      r0,r0,r2
;;;80     }
000016  4770              BX       lr
;;;81     
                          ENDP

                  |L7.24|
                          DCD      log_2

                          AREA ||i.luaO_chunkid||, CODE, READONLY, ALIGN=2

                  luaO_chunkid PROC
;;;490    
;;;491    void luaO_chunkid (char *out, const char *source, size_t bufflen) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;492      size_t l = strlen(source);
00000a  4638              MOV      r0,r7
00000c  f7fffffe          BL       strlen
000010  4604              MOV      r4,r0
;;;493      if (*source == '=') {  /* 'literal' source */
000012  7838              LDRB     r0,[r7,#0]
000014  283d              CMP      r0,#0x3d
000016  d111              BNE      |L8.60|
;;;494        if (l <= bufflen)  /* small enough? */
000018  42ac              CMP      r4,r5
00001a  d805              BHI      |L8.40|
;;;495          memcpy(out, source + 1, l * sizeof(char));
00001c  4622              MOV      r2,r4
00001e  1c79              ADDS     r1,r7,#1
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       __aeabi_memcpy
000026  e057              B        |L8.216|
                  |L8.40|
;;;496        else {  /* truncate it */
;;;497          addstr(out, source + 1, bufflen - 1);
000028  1e6a              SUBS     r2,r5,#1
00002a  1c79              ADDS     r1,r7,#1
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       __aeabi_memcpy
000032  1e68              SUBS     r0,r5,#1
000034  4406              ADD      r6,r6,r0
;;;498          *out = '\0';
000036  2000              MOVS     r0,#0
000038  7030              STRB     r0,[r6,#0]
00003a  e04d              B        |L8.216|
                  |L8.60|
;;;499        }
;;;500      }
;;;501      else if (*source == '@') {  /* file name */
00003c  7838              LDRB     r0,[r7,#0]
00003e  2840              CMP      r0,#0x40
000040  d116              BNE      |L8.112|
;;;502        if (l <= bufflen)  /* small enough? */
000042  42ac              CMP      r4,r5
000044  d805              BHI      |L8.82|
;;;503          memcpy(out, source + 1, l * sizeof(char));
000046  4622              MOV      r2,r4
000048  1c79              ADDS     r1,r7,#1
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       __aeabi_memcpy
000050  e042              B        |L8.216|
                  |L8.82|
;;;504        else {  /* add '...' before rest of name */
;;;505          addstr(out, RETS, LL(RETS));
000052  a022              ADR      r0,|L8.220|
000054  8801              LDRH     r1,[r0,#0]
000056  8031              STRH     r1,[r6,#0]
000058  7880              LDRB     r0,[r0,#2]
00005a  70b0              STRB     r0,[r6,#2]
00005c  1cf6              ADDS     r6,r6,#3
;;;506          bufflen -= LL(RETS);
00005e  1eed              SUBS     r5,r5,#3
;;;507          memcpy(out, source + 1 + l - bufflen, bufflen * sizeof(char));
000060  462a              MOV      r2,r5
000062  1c78              ADDS     r0,r7,#1
000064  4420              ADD      r0,r0,r4
000066  1b41              SUBS     r1,r0,r5
000068  4630              MOV      r0,r6
00006a  f7fffffe          BL       __aeabi_memcpy
00006e  e033              B        |L8.216|
                  |L8.112|
;;;508        }
;;;509      }
;;;510      else {  /* string; format as [string "source"] */
;;;511        const char *nl = strchr(source, '\n');  /* find first new line (if any) */
000070  210a              MOVS     r1,#0xa
000072  4638              MOV      r0,r7
000074  f7fffffe          BL       strchr
000078  4680              MOV      r8,r0
;;;512        addstr(out, PRE, LL(PRE));  /* add prefix */
00007a  a019              ADR      r0,|L8.224|
00007c  6801              LDR      r1,[r0,#0]
00007e  6031              STR      r1,[r6,#0]
000080  6841              LDR      r1,[r0,#4]
000082  6071              STR      r1,[r6,#4]
000084  7a00              LDRB     r0,[r0,#8]
000086  7230              STRB     r0,[r6,#8]
000088  3609              ADDS     r6,r6,#9
;;;513        bufflen -= LL(PRE RETS POS) + 1;  /* save space for prefix+suffix+'\0' */
00008a  3d0f              SUBS     r5,r5,#0xf
;;;514        if (l < bufflen && nl == NULL) {  /* small one-line source? */
00008c  42ac              CMP      r4,r5
00008e  d209              BCS      |L8.164|
000090  f1b80f00          CMP      r8,#0
000094  d106              BNE      |L8.164|
;;;515          addstr(out, source, l);  /* keep it */
000096  4622              MOV      r2,r4
000098  4639              MOV      r1,r7
00009a  4630              MOV      r0,r6
00009c  f7fffffe          BL       __aeabi_memcpy
0000a0  4426              ADD      r6,r6,r4
0000a2  e013              B        |L8.204|
                  |L8.164|
;;;516        }
;;;517        else {
;;;518          if (nl != NULL) l = nl - source;  /* stop at first newline */
0000a4  f1b80f00          CMP      r8,#0
0000a8  d001              BEQ      |L8.174|
0000aa  eba80407          SUB      r4,r8,r7
                  |L8.174|
;;;519          if (l > bufflen) l = bufflen;
0000ae  42ac              CMP      r4,r5
0000b0  d900              BLS      |L8.180|
0000b2  462c              MOV      r4,r5
                  |L8.180|
;;;520          addstr(out, source, l);
0000b4  4622              MOV      r2,r4
0000b6  4639              MOV      r1,r7
0000b8  4630              MOV      r0,r6
0000ba  f7fffffe          BL       __aeabi_memcpy
0000be  4426              ADD      r6,r6,r4
;;;521          addstr(out, RETS, LL(RETS));
0000c0  a006              ADR      r0,|L8.220|
0000c2  8801              LDRH     r1,[r0,#0]
0000c4  8031              STRH     r1,[r6,#0]
0000c6  7880              LDRB     r0,[r0,#2]
0000c8  70b0              STRB     r0,[r6,#2]
0000ca  1cf6              ADDS     r6,r6,#3
                  |L8.204|
;;;522        }
;;;523        memcpy(out, POS, (LL(POS) + 1) * sizeof(char));
0000cc  a007              ADR      r0,|L8.236|
0000ce  8801              LDRH     r1,[r0,#0]
0000d0  8031              STRH     r1,[r6,#0]
0000d2  7880              LDRB     r0,[r0,#2]
0000d4  70b0              STRB     r0,[r6,#2]
;;;524      }
0000d6  bf00              NOP      
                  |L8.216|
;;;525    }
0000d8  e8bd81f0          POP      {r4-r8,pc}
;;;526    
                          ENDP

                  |L8.220|
0000dc  2e2e2e00          DCB      "...",0
                  |L8.224|
0000e0  5b737472          DCB      "[string """,0
0000e4  696e6720
0000e8  2200    
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L8.236|
0000ec  225d00            DCB      """]",0
0000ef  00                DCB      0

                          AREA ||i.luaO_fb2int||, CODE, READONLY, ALIGN=1

                  luaO_fb2int PROC
;;;56     /* converts back */
;;;57     int luaO_fb2int (int x) {
000000  4601              MOV      r1,r0
;;;58       return (x < 8) ? x : ((x & 7) + 8) << ((x >> 3) - 1);
000002  2908              CMP      r1,#8
000004  da01              BGE      |L9.10|
000006  4608              MOV      r0,r1
                  |L9.8|
;;;59     }
000008  4770              BX       lr
                  |L9.10|
00000a  f0010007          AND      r0,r1,#7              ;58
00000e  3008              ADDS     r0,r0,#8              ;58
000010  2201              MOVS     r2,#1                 ;58
000012  ebc202e1          RSB      r2,r2,r1,ASR #3       ;58
000016  4090              LSLS     r0,r0,r2              ;58
000018  e7f6              B        |L9.8|
;;;60     
                          ENDP


                          AREA ||i.luaO_hexavalue||, CODE, READONLY, ALIGN=2

                  luaO_hexavalue PROC
;;;168    
;;;169    int luaO_hexavalue (int c) {
000000  4601              MOV      r1,r0
;;;170      if (lisdigit(c)) return c - '0';
000002  4a06              LDR      r2,|L10.28|
000004  1c48              ADDS     r0,r1,#1
000006  5c10              LDRB     r0,[r2,r0]
000008  f0000002          AND      r0,r0,#2
00000c  b110              CBZ      r0,|L10.20|
00000e  f1a10030          SUB      r0,r1,#0x30
                  |L10.18|
;;;171      else return (ltolower(c) - 'a') + 10;
;;;172    }
000012  4770              BX       lr
                  |L10.20|
000014  f0410020          ORR      r0,r1,#0x20           ;171
000018  3857              SUBS     r0,r0,#0x57           ;171
00001a  e7fa              B        |L10.18|
;;;173    
                          ENDP

                  |L10.28|
                          DCD      luai_ctype_

                          AREA ||i.luaO_int2fb||, CODE, READONLY, ALIGN=1

                  luaO_int2fb PROC
;;;40     */
;;;41     int luaO_int2fb (unsigned int x) {
000000  4601              MOV      r1,r0
;;;42       int e = 0;  /* exponent */
000002  2200              MOVS     r2,#0
;;;43       if (x < 8) return x;
000004  2908              CMP      r1,#8
000006  d201              BCS      |L11.12|
000008  4608              MOV      r0,r1
                  |L11.10|
;;;44       while (x >= (8 << 4)) {  /* coarse steps */
;;;45         x = (x + 0xf) >> 4;  /* x = ceil(x / 16) */
;;;46         e += 4;
;;;47       }
;;;48       while (x >= (8 << 1)) {  /* fine steps */
;;;49         x = (x + 1) >> 1;  /* x = ceil(x / 2) */
;;;50         e++;
;;;51       }
;;;52       return ((e+1) << 3) | (cast_int(x) - 8);
;;;53     }
00000a  4770              BX       lr
                  |L11.12|
00000c  e003              B        |L11.22|
                  |L11.14|
00000e  f101000f          ADD      r0,r1,#0xf            ;45
000012  0901              LSRS     r1,r0,#4              ;45
000014  1d12              ADDS     r2,r2,#4              ;46
                  |L11.22|
000016  2980              CMP      r1,#0x80              ;44
000018  d2f9              BCS      |L11.14|
00001a  e002              B        |L11.34|
                  |L11.28|
00001c  1c48              ADDS     r0,r1,#1              ;49
00001e  0841              LSRS     r1,r0,#1              ;49
000020  1c52              ADDS     r2,r2,#1              ;50
                  |L11.34|
000022  2910              CMP      r1,#0x10              ;48
000024  d2fa              BCS      |L11.28|
000026  f1a10008          SUB      r0,r1,#8              ;52
00002a  1c53              ADDS     r3,r2,#1              ;52
00002c  ea4000c3          ORR      r0,r0,r3,LSL #3       ;52
000030  e7eb              B        |L11.10|
;;;54     
                          ENDP


                          AREA ||i.luaO_pushfstring||, CODE, READONLY, ALIGN=1

                  luaO_pushfstring PROC
;;;471    
;;;472    const char *luaO_pushfstring (lua_State *L, const char *fmt, ...) {
000000  b40f              PUSH     {r0-r3}
000002  b538              PUSH     {r3-r5,lr}
000004  4604              MOV      r4,r0
;;;473      const char *msg;
;;;474      va_list argp;
;;;475      va_start(argp, fmt);
000006  a806              ADD      r0,sp,#0x18
000008  9000              STR      r0,[sp,#0]
;;;476      msg = luaO_pushvfstring(L, fmt, argp);
00000a  4620              MOV      r0,r4
00000c  9a00              LDR      r2,[sp,#0]
00000e  9905              LDR      r1,[sp,#0x14]
000010  f7fffffe          BL       luaO_pushvfstring
000014  4605              MOV      r5,r0
;;;477      va_end(argp);
000016  2000              MOVS     r0,#0
000018  9000              STR      r0,[sp,#0]
;;;478      return msg;
00001a  4628              MOV      r0,r5
;;;479    }
00001c  bc38              POP      {r3-r5}
00001e  f85dfb14          LDR      pc,[sp],#0x14
;;;480    
                          ENDP


                          AREA ||i.luaO_pushvfstring||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_p
                          REQUIRE _printf_longlong_hex
                  luaO_pushvfstring PROC
;;;403    */
;;;404    const char *luaO_pushvfstring (lua_State *L, const char *fmt, va_list argp) {
000000  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
000004  b086              SUB      sp,sp,#0x18
000006  4604              MOV      r4,r0
000008  460e              MOV      r6,r1
;;;405      int n = 0;
00000a  2700              MOVS     r7,#0
;;;406      for (;;) {
00000c  bf00              NOP      
                  |L13.14|
;;;407        const char *e = strchr(fmt, '%');
00000e  2125              MOVS     r1,#0x25
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       strchr
000016  4605              MOV      r5,r0
;;;408        if (e == NULL) break;
000018  b905              CBNZ     r5,|L13.28|
00001a  e0b1              B        |L13.384|
                  |L13.28|
;;;409        pushstr(L, fmt, e - fmt);
00001c  1baa              SUBS     r2,r5,r6
00001e  4631              MOV      r1,r6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       pushstr
;;;410        switch (*(e+1)) {
000026  f9950001          LDRSB    r0,[r5,#1]
00002a  2864              CMP      r0,#0x64
00002c  d03d              BEQ      |L13.170|
00002e  dc08              BGT      |L13.66|
000030  2825              CMP      r0,#0x25
000032  d070              BEQ      |L13.278|
000034  2849              CMP      r0,#0x49
000036  d044              BEQ      |L13.194|
000038  2855              CMP      r0,#0x55
00003a  d06d              BEQ      |L13.280|
00003c  2863              CMP      r0,#0x63
                  |L13.62|
00003e  d16c              BNE      |L13.282|
000040  e018              B        |L13.116|
                  |L13.66|
000042  2866              CMP      r0,#0x66
000044  d04d              BEQ      |L13.226|
000046  2870              CMP      r0,#0x70
000048  d069              BEQ      |L13.286|
00004a  2873              CMP      r0,#0x73
00004c  d1f7              BNE      |L13.62|
;;;411          case 's': {  /* zero-terminated string */
;;;412            const char *s = va_arg(argp, char *);
00004e  9808              LDR      r0,[sp,#0x20]
000050  f8508b04          LDR      r8,[r0],#4
000054  9008              STR      r0,[sp,#0x20]
;;;413            if (s == NULL) s = "(null)";
000056  f1b80f00          CMP      r8,#0
00005a  d101              BNE      |L13.96|
00005c  f20f186c          ADR      r8,|L13.460|
                  |L13.96|
;;;414            pushstr(L, s, strlen(s));
000060  4640              MOV      r0,r8
000062  f7fffffe          BL       strlen
000066  4681              MOV      r9,r0
000068  464a              MOV      r2,r9
00006a  4641              MOV      r1,r8
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       pushstr
;;;415            break;
000072  e081              B        |L13.376|
                  |L13.116|
;;;416          }
;;;417          case 'c': {  /* an 'int' as a character */
;;;418            char buff = cast_char(va_arg(argp, int));
000074  9808              LDR      r0,[sp,#0x20]
000076  f8101b04          LDRB     r1,[r0],#4
00007a  9008              STR      r0,[sp,#0x20]
00007c  b248              SXTB     r0,r1
00007e  9005              STR      r0,[sp,#0x14]
;;;419            if (lisprint(cast_uchar(buff)))
000080  f89d0014          LDRB     r0,[sp,#0x14]
000084  1c40              ADDS     r0,r0,#1
000086  4953              LDR      r1,|L13.468|
000088  5c08              LDRB     r0,[r1,r0]
00008a  f0000004          AND      r0,r0,#4
00008e  b128              CBZ      r0,|L13.156|
;;;420              pushstr(L, &buff, 1);
000090  2201              MOVS     r2,#1
000092  a905              ADD      r1,sp,#0x14
000094  4620              MOV      r0,r4
000096  f7fffffe          BL       pushstr
00009a  e005              B        |L13.168|
                  |L13.156|
;;;421            else  /* non-printable character; print its code */
;;;422              luaO_pushfstring(L, "<\\%d>", cast_uchar(buff));
00009c  f89d2014          LDRB     r2,[sp,#0x14]
0000a0  a14d              ADR      r1,|L13.472|
0000a2  4620              MOV      r0,r4
0000a4  f7fffffe          BL       luaO_pushfstring
                  |L13.168|
;;;423            break;
0000a8  e066              B        |L13.376|
                  |L13.170|
;;;424          }
;;;425          case 'd': {  /* an 'int' */
;;;426            setivalue(s2v(L->top), va_arg(argp, int));
0000aa  68e0              LDR      r0,[r4,#0xc]
0000ac  9908              LDR      r1,[sp,#0x20]
0000ae  6809              LDR      r1,[r1,#0]
0000b0  9a08              LDR      r2,[sp,#0x20]
0000b2  1d12              ADDS     r2,r2,#4
0000b4  9208              STR      r2,[sp,#0x20]
0000b6  17ca              ASRS     r2,r1,#31
0000b8  e9c01200          STRD     r1,r2,[r0,#0]
0000bc  2123              MOVS     r1,#0x23
0000be  7201              STRB     r1,[r0,#8]
;;;427            goto top2str;
0000c0  e01f              B        |L13.258|
                  |L13.194|
;;;428          }
;;;429          case 'I': {  /* a 'lua_Integer' */
;;;430            setivalue(s2v(L->top), cast(lua_Integer, va_arg(argp, l_uacInt)));
0000c2  68e0              LDR      r0,[r4,#0xc]
0000c4  9908              LDR      r1,[sp,#0x20]
0000c6  1dc9              ADDS     r1,r1,#7
0000c8  f0210107          BIC      r1,r1,#7
0000cc  9108              STR      r1,[sp,#0x20]
0000ce  e9d13100          LDRD     r3,r1,[r1,#0]
0000d2  9a08              LDR      r2,[sp,#0x20]
0000d4  3208              ADDS     r2,r2,#8
0000d6  9208              STR      r2,[sp,#0x20]
0000d8  e9c03100          STRD     r3,r1,[r0,#0]
0000dc  2123              MOVS     r1,#0x23
0000de  7201              STRB     r1,[r0,#8]
;;;431            goto top2str;
0000e0  e00f              B        |L13.258|
                  |L13.226|
;;;432          }
;;;433          case 'f': {  /* a 'lua_Number' */
;;;434            setfltvalue(s2v(L->top), cast_num(va_arg(argp, l_uacNumber)));
0000e2  68e0              LDR      r0,[r4,#0xc]
0000e4  9908              LDR      r1,[sp,#0x20]
0000e6  1dc9              ADDS     r1,r1,#7
0000e8  f0210107          BIC      r1,r1,#7
0000ec  9108              STR      r1,[sp,#0x20]
0000ee  e9d12100          LDRD     r2,r1,[r1,#0]
0000f2  9b08              LDR      r3,[sp,#0x20]
0000f4  3308              ADDS     r3,r3,#8
0000f6  9308              STR      r3,[sp,#0x20]
0000f8  e9c02100          STRD     r2,r1,[r0,#0]
0000fc  2113              MOVS     r1,#0x13
0000fe  7201              STRB     r1,[r0,#8]
;;;435          top2str:  /* convert the top element to a string */
000100  bf00              NOP      
                  |L13.258|
;;;436            luaD_inctop(L);
000102  4620              MOV      r0,r4
000104  f7fffffe          BL       luaD_inctop
;;;437            luaO_tostring(L, s2v(L->top - 1));
000108  68e0              LDR      r0,[r4,#0xc]
00010a  f1a00110          SUB      r1,r0,#0x10
00010e  4620              MOV      r0,r4
000110  f7fffffe          BL       luaO_tostring
;;;438            break;
000114  e030              B        |L13.376|
                  |L13.278|
000116  e022              B        |L13.350|
                  |L13.280|
000118  e012              B        |L13.320|
                  |L13.282|
00011a  e026              B        |L13.362|
00011c  e7ff              B        |L13.286|
                  |L13.286|
;;;439          }
;;;440          case 'p': {  /* a pointer */
;;;441            char buff[4*sizeof(void *) + 8]; /* should be enough space for a '%p' */
;;;442            void *p = va_arg(argp, void *);
00011e  9808              LDR      r0,[sp,#0x20]
000120  f8508b04          LDR      r8,[r0],#4
000124  9008              STR      r0,[sp,#0x20]
;;;443            int l = lua_pointer2str(buff, sizeof(buff), p);
000126  4643              MOV      r3,r8
000128  a22d              ADR      r2,|L13.480|
00012a  2118              MOVS     r1,#0x18
00012c  4668              MOV      r0,sp
00012e  f7fffffe          BL       __2snprintf
000132  4681              MOV      r9,r0
;;;444            pushstr(L, buff, l);
000134  464a              MOV      r2,r9
000136  4669              MOV      r1,sp
000138  4620              MOV      r0,r4
00013a  f7fffffe          BL       pushstr
;;;445            break;
00013e  e01b              B        |L13.376|
                  |L13.320|
;;;446          }
;;;447          case 'U': {  /* an 'int' as a UTF-8 sequence */
;;;448            char buff[UTF8BUFFSZ];
;;;449            int l = luaO_utf8esc(buff, cast(long, va_arg(argp, long)));
000140  9808              LDR      r0,[sp,#0x20]
000142  c802              LDM      r0!,{r1}
000144  9008              STR      r0,[sp,#0x20]
000146  a804              ADD      r0,sp,#0x10
000148  f7fffffe          BL       luaO_utf8esc
00014c  4680              MOV      r8,r0
;;;450            pushstr(L, buff + UTF8BUFFSZ - l, l);
00014e  a806              ADD      r0,sp,#0x18
000150  eba00108          SUB      r1,r0,r8
000154  4642              MOV      r2,r8
000156  4620              MOV      r0,r4
000158  f7fffffe          BL       pushstr
;;;451            break;
00015c  e00c              B        |L13.376|
                  |L13.350|
;;;452          }
;;;453          case '%': {
;;;454            pushstr(L, "%", 1);
00015e  2201              MOVS     r2,#1
000160  a120              ADR      r1,|L13.484|
000162  4620              MOV      r0,r4
000164  f7fffffe          BL       pushstr
;;;455            break;
000168  e006              B        |L13.376|
                  |L13.362|
;;;456          }
;;;457          default: {
;;;458            luaG_runerror(L, "invalid option '%%%c' to 'lua_pushfstring'",
00016a  f9952001          LDRSB    r2,[r5,#1]
00016e  a11e              ADR      r1,|L13.488|
000170  4620              MOV      r0,r4
000172  f7fffffe          BL       luaG_runerror
000176  bf00              NOP                            ;410
                  |L13.376|
000178  bf00              NOP                            ;415
;;;459                             *(e + 1));
;;;460          }
;;;461        }
;;;462        n += 2;
00017a  1cbf              ADDS     r7,r7,#2
;;;463        fmt = e+2;
00017c  1cae              ADDS     r6,r5,#2
;;;464      }
00017e  e746              B        |L13.14|
                  |L13.384|
000180  bf00              NOP                            ;408
;;;465      luaD_checkstack(L, 1);
000182  68e1              LDR      r1,[r4,#0xc]
000184  69e0              LDR      r0,[r4,#0x1c]
000186  1a40              SUBS     r0,r0,r1
000188  2101              MOVS     r1,#1
00018a  ebb11f20          CMP      r1,r0,ASR #4
00018e  db05              BLT      |L13.412|
000190  2201              MOVS     r2,#1
000192  4611              MOV      r1,r2
000194  4620              MOV      r0,r4
000196  f7fffffe          BL       luaD_growstack
00019a  e000              B        |L13.414|
                  |L13.412|
00019c  bf00              NOP      
                  |L13.414|
;;;466      pushstr(L, fmt, strlen(fmt));
00019e  4630              MOV      r0,r6
0001a0  f7fffffe          BL       strlen
0001a4  4605              MOV      r5,r0
0001a6  462a              MOV      r2,r5
0001a8  4631              MOV      r1,r6
0001aa  4620              MOV      r0,r4
0001ac  f7fffffe          BL       pushstr
;;;467      if (n > 0) luaV_concat(L, n + 1);
0001b0  2f00              CMP      r7,#0
0001b2  dd03              BLE      |L13.444|
0001b4  1c79              ADDS     r1,r7,#1
0001b6  4620              MOV      r0,r4
0001b8  f7fffffe          BL       luaV_concat
                  |L13.444|
;;;468      return svalue(s2v(L->top - 1));
0001bc  68e0              LDR      r0,[r4,#0xc]
0001be  f8500c10          LDR      r0,[r0,#-0x10]
0001c2  3010              ADDS     r0,r0,#0x10
;;;469    }
0001c4  b009              ADD      sp,sp,#0x24
0001c6  e8bd83f0          POP      {r4-r9,pc}
;;;470    
                          ENDP

0001ca  0000              DCW      0x0000
                  |L13.460|
0001cc  286e756c          DCB      "(null)",0
0001d0  6c2900  
0001d3  00                DCB      0
                  |L13.468|
                          DCD      luai_ctype_
                  |L13.472|
0001d8  3c5c2564          DCB      "<\\%d>",0
0001dc  3e00    
0001de  00                DCB      0
0001df  00                DCB      0
                  |L13.480|
0001e0  257000            DCB      "%p",0
0001e3  00                DCB      0
                  |L13.484|
0001e4  2500              DCB      "%",0
0001e6  00                DCB      0
0001e7  00                DCB      0
                  |L13.488|
0001e8  696e7661          DCB      "invalid option '%%%c' to 'lua_pushfstring'",0
0001ec  6c696420
0001f0  6f707469
0001f4  6f6e2027
0001f8  25252563
0001fc  2720746f
000200  20276c75
000204  615f7075
000208  73686673
00020c  7472696e
000210  672700  
000213  00                DCB      0

                          AREA ||i.luaO_rawarith||, CODE, READONLY, ALIGN=1

                  luaO_rawarith PROC
;;;122    
;;;123    int luaO_rawarith (lua_State *L, int op, const TValue *p1, const TValue *p2,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;124                       TValue *res) {
000004  b087              SUB      sp,sp,#0x1c
000006  4614              MOV      r4,r2
000008  4699              MOV      r9,r3
00000a  f8dda050          LDR      r10,[sp,#0x50]
;;;125      switch (op) {
00000e  9808              LDR      r0,[sp,#0x20]
000010  1f00              SUBS     r0,r0,#4
000012  280a              CMP      r0,#0xa
000014  d27c              BCS      |L14.272|
000016  e8dff000          TBB      [pc,r0]
00001a  3f3e              DCB      0x3f,0x3e
00001c  7f050607          DCB      0x7f,0x05,0x06,0x07
000020  08097f0a          DCB      0x08,0x09,0x7f,0x0a
;;;126        case LUA_OPBAND: case LUA_OPBOR: case LUA_OPBXOR:
000024  bf00              NOP      
000026  bf00              NOP      
;;;127        case LUA_OPSHL: case LUA_OPSHR:
000028  bf00              NOP      
00002a  bf00              NOP      
;;;128        case LUA_OPBNOT: {  /* operate only on integers */
00002c  bf00              NOP      
;;;129          lua_Integer i1; lua_Integer i2;
;;;130          if (tointegerns(p1, &i1) && tointegerns(p2, &i2)) {
00002e  7a20              LDRB     r0,[r4,#8]
000030  2823              CMP      r0,#0x23
000032  d105              BNE      |L14.64|
000034  e9d40100          LDRD     r0,r1,[r4,#0]
000038  e9cd0104          STRD     r0,r1,[sp,#0x10]
00003c  2001              MOVS     r0,#1
00003e  e004              B        |L14.74|
                  |L14.64|
000040  2200              MOVS     r2,#0
000042  a904              ADD      r1,sp,#0x10
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       luaV_tointegerns
                  |L14.74|
00004a  b310              CBZ      r0,|L14.146|
00004c  f8990008          LDRB     r0,[r9,#8]
000050  2823              CMP      r0,#0x23
000052  d105              BNE      |L14.96|
000054  e9d90100          LDRD     r0,r1,[r9,#0]
000058  e9cd0102          STRD     r0,r1,[sp,#8]
00005c  2001              MOVS     r0,#1
00005e  e004              B        |L14.106|
                  |L14.96|
000060  2200              MOVS     r2,#0
000062  a902              ADD      r1,sp,#8
000064  4648              MOV      r0,r9
000066  f7fffffe          BL       luaV_tointegerns
                  |L14.106|
00006a  b190              CBZ      r0,|L14.146|
;;;131            setivalue(res, intarith(L, op, i1, i2));
00006c  4655              MOV      r5,r10
00006e  e9dd0102          LDRD     r0,r1,[sp,#8]
000072  e9cd0100          STRD     r0,r1,[sp,#0]
000076  e9dd2304          LDRD     r2,r3,[sp,#0x10]
00007a  e9dd0107          LDRD     r0,r1,[sp,#0x1c]
00007e  f7fffffe          BL       intarith
000082  e9c50100          STRD     r0,r1,[r5,#0]
000086  2023              MOVS     r0,#0x23
000088  7228              STRB     r0,[r5,#8]
;;;132            return 1;
00008a  2001              MOVS     r0,#1
                  |L14.140|
;;;133          }
;;;134          else return 0;  /* fail */
;;;135        }
;;;136        case LUA_OPDIV: case LUA_OPPOW: {  /* operate only on floats */
;;;137          lua_Number n1; lua_Number n2;
;;;138          if (tonumberns(p1, n1) && tonumberns(p2, n2)) {
;;;139            setfltvalue(res, numarith(L, op, n1, n2));
;;;140            return 1;
;;;141          }
;;;142          else return 0;  /* fail */
;;;143        }
;;;144        default: {  /* other operations */
;;;145          lua_Number n1; lua_Number n2;
;;;146          if (ttisinteger(p1) && ttisinteger(p2)) {
;;;147            setivalue(res, intarith(L, op, ivalue(p1), ivalue(p2)));
;;;148            return 1;
;;;149          }
;;;150          else if (tonumberns(p1, n1) && tonumberns(p2, n2)) {
;;;151            setfltvalue(res, numarith(L, op, n1, n2));
;;;152            return 1;
;;;153          }
;;;154          else return 0;  /* fail */
;;;155        }
;;;156      }
;;;157    }
00008c  b00b              ADD      sp,sp,#0x2c
00008e  e8bd8ff0          POP      {r4-r11,pc}
                  |L14.146|
000092  2000              MOVS     r0,#0                 ;134
000094  e7fa              B        |L14.140|
000096  bf00              NOP                            ;136
000098  7a20              LDRB     r0,[r4,#8]            ;138
00009a  2813              CMP      r0,#0x13              ;138
00009c  d103              BNE      |L14.166|
00009e  e9d47800          LDRD     r7,r8,[r4,#0]         ;138
0000a2  2001              MOVS     r0,#1                 ;138
0000a4  e00c              B        |L14.192|
                  |L14.166|
0000a6  7a20              LDRB     r0,[r4,#8]            ;138
0000a8  2823              CMP      r0,#0x23              ;138
0000aa  d108              BNE      |L14.190|
0000ac  e9d42100          LDRD     r2,r1,[r4,#0]         ;138
0000b0  4610              MOV      r0,r2                 ;138
0000b2  f7fffffe          BL       __aeabi_l2d
0000b6  4607              MOV      r7,r0                 ;138
0000b8  4688              MOV      r8,r1                 ;138
0000ba  2001              MOVS     r0,#1                 ;138
0000bc  e000              B        |L14.192|
                  |L14.190|
0000be  2000              MOVS     r0,#0                 ;138
                  |L14.192|
0000c0  b338              CBZ      r0,|L14.274|
0000c2  f8990008          LDRB     r0,[r9,#8]            ;138
0000c6  2813              CMP      r0,#0x13              ;138
0000c8  d103              BNE      |L14.210|
0000ca  e9d95600          LDRD     r5,r6,[r9,#0]         ;138
0000ce  2001              MOVS     r0,#1                 ;138
0000d0  e00d              B        |L14.238|
                  |L14.210|
0000d2  f8990008          LDRB     r0,[r9,#8]            ;138
0000d6  2823              CMP      r0,#0x23              ;138
0000d8  d108              BNE      |L14.236|
0000da  e9d92100          LDRD     r2,r1,[r9,#0]         ;138
0000de  4610              MOV      r0,r2                 ;138
0000e0  f7fffffe          BL       __aeabi_l2d
0000e4  4605              MOV      r5,r0                 ;138
0000e6  460e              MOV      r6,r1                 ;138
0000e8  2001              MOVS     r0,#1                 ;138
0000ea  e000              B        |L14.238|
                  |L14.236|
0000ec  2000              MOVS     r0,#0                 ;138
                  |L14.238|
0000ee  b180              CBZ      r0,|L14.274|
0000f0  46d3              MOV      r11,r10               ;139
0000f2  463a              MOV      r2,r7                 ;139
0000f4  4643              MOV      r3,r8                 ;139
0000f6  e9cd5600          STRD     r5,r6,[sp,#0]         ;139
0000fa  e9dd0107          LDRD     r0,r1,[sp,#0x1c]      ;139
0000fe  f7fffffe          BL       numarith
000102  e9cb0100          STRD     r0,r1,[r11,#0]        ;139
000106  2013              MOVS     r0,#0x13              ;139
000108  f88b0008          STRB     r0,[r11,#8]           ;139
00010c  2001              MOVS     r0,#1                 ;140
00010e  e7bd              B        |L14.140|
                  |L14.272|
000110  e002              B        |L14.280|
                  |L14.274|
000112  e7ff              B        |L14.276|
                  |L14.276|
000114  2000              MOVS     r0,#0                 ;142
000116  e7b9              B        |L14.140|
                  |L14.280|
000118  7a20              LDRB     r0,[r4,#8]            ;146
00011a  2823              CMP      r0,#0x23              ;146
00011c  d119              BNE      |L14.338|
00011e  f8990008          LDRB     r0,[r9,#8]            ;146
000122  2823              CMP      r0,#0x23              ;146
000124  d115              BNE      |L14.338|
000126  46d3              MOV      r11,r10               ;147
000128  e9d90100          LDRD     r0,r1,[r9,#0]         ;147
00012c  e9cd0100          STRD     r0,r1,[sp,#0]         ;147
000130  e9d40100          LDRD     r0,r1,[r4,#0]         ;147
000134  4602              MOV      r2,r0                 ;147
000136  460b              MOV      r3,r1                 ;147
000138  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;147
00013c  e9dd0107          LDRD     r0,r1,[sp,#0x1c]      ;147
000140  f7fffffe          BL       intarith
000144  e9cb0100          STRD     r0,r1,[r11,#0]        ;147
000148  2023              MOVS     r0,#0x23              ;147
00014a  f88b0008          STRB     r0,[r11,#8]           ;147
00014e  2001              MOVS     r0,#1                 ;148
000150  e79c              B        |L14.140|
                  |L14.338|
000152  7a20              LDRB     r0,[r4,#8]            ;150
000154  2813              CMP      r0,#0x13              ;150
000156  d103              BNE      |L14.352|
000158  e9d47800          LDRD     r7,r8,[r4,#0]         ;150
00015c  2001              MOVS     r0,#1                 ;150
00015e  e00c              B        |L14.378|
                  |L14.352|
000160  7a20              LDRB     r0,[r4,#8]            ;150
000162  2823              CMP      r0,#0x23              ;150
000164  d108              BNE      |L14.376|
000166  e9d42100          LDRD     r2,r1,[r4,#0]         ;150
00016a  4610              MOV      r0,r2                 ;150
00016c  f7fffffe          BL       __aeabi_l2d
000170  4607              MOV      r7,r0                 ;150
000172  4688              MOV      r8,r1                 ;150
000174  2001              MOVS     r0,#1                 ;150
000176  e000              B        |L14.378|
                  |L14.376|
000178  2000              MOVS     r0,#0                 ;150
                  |L14.378|
00017a  b330              CBZ      r0,|L14.458|
00017c  f8990008          LDRB     r0,[r9,#8]            ;150
000180  2813              CMP      r0,#0x13              ;150
000182  d103              BNE      |L14.396|
000184  e9d95600          LDRD     r5,r6,[r9,#0]         ;150
000188  2001              MOVS     r0,#1                 ;150
00018a  e00d              B        |L14.424|
                  |L14.396|
00018c  f8990008          LDRB     r0,[r9,#8]            ;150
000190  2823              CMP      r0,#0x23              ;150
000192  d108              BNE      |L14.422|
000194  e9d92100          LDRD     r2,r1,[r9,#0]         ;150
000198  4610              MOV      r0,r2                 ;150
00019a  f7fffffe          BL       __aeabi_l2d
00019e  4605              MOV      r5,r0                 ;150
0001a0  460e              MOV      r6,r1                 ;150
0001a2  2001              MOVS     r0,#1                 ;150
0001a4  e000              B        |L14.424|
                  |L14.422|
0001a6  2000              MOVS     r0,#0                 ;150
                  |L14.424|
0001a8  b178              CBZ      r0,|L14.458|
0001aa  46d3              MOV      r11,r10               ;151
0001ac  463a              MOV      r2,r7                 ;151
0001ae  4643              MOV      r3,r8                 ;151
0001b0  e9cd5600          STRD     r5,r6,[sp,#0]         ;151
0001b4  e9dd0107          LDRD     r0,r1,[sp,#0x1c]      ;151
0001b8  f7fffffe          BL       numarith
0001bc  e9cb0100          STRD     r0,r1,[r11,#0]        ;151
0001c0  2013              MOVS     r0,#0x13              ;151
0001c2  f88b0008          STRB     r0,[r11,#8]           ;151
0001c6  2001              MOVS     r0,#1                 ;152
0001c8  e760              B        |L14.140|
                  |L14.458|
0001ca  2000              MOVS     r0,#0                 ;154
0001cc  e75e              B        |L14.140|
;;;158    
                          ENDP


                          AREA ||i.luaO_str2num||, CODE, READONLY, ALIGN=1

                  luaO_str2num PROC
;;;336    
;;;337    size_t luaO_str2num (const char *s, TValue *o) {
000000  b57f              PUSH     {r0-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;338      lua_Integer i; lua_Number n;
;;;339      const char *e;
;;;340      if ((e = l_str2int(s, &i)) != NULL) {  /* try as an integer */
000006  a902              ADD      r1,sp,#8
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       l_str2int
00000e  1e06              SUBS     r6,r0,#0
000010  d007              BEQ      |L15.34|
;;;341        setivalue(o, i);
000012  4620              MOV      r0,r4
000014  e9dd1202          LDRD     r1,r2,[sp,#8]
000018  e9c01200          STRD     r1,r2,[r0,#0]
00001c  2123              MOVS     r1,#0x23
00001e  7201              STRB     r1,[r0,#8]
000020  e010              B        |L15.68|
                  |L15.34|
;;;342      }
;;;343      else if ((e = l_str2d(s, &n)) != NULL) {  /* else try as a float */
000022  4669              MOV      r1,sp
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       l_str2d
00002a  1e06              SUBS     r6,r0,#0
00002c  d007              BEQ      |L15.62|
;;;344        setfltvalue(o, n);
00002e  4620              MOV      r0,r4
000030  e9dd1200          LDRD     r1,r2,[sp,#0]
000034  e9c01200          STRD     r1,r2,[r0,#0]
000038  2113              MOVS     r1,#0x13
00003a  7201              STRB     r1,[r0,#8]
00003c  e002              B        |L15.68|
                  |L15.62|
;;;345      }
;;;346      else
;;;347        return 0;  /* conversion failed */
00003e  2000              MOVS     r0,#0
                  |L15.64|
;;;348      return (e - s) + 1;  /* success; return string size */
;;;349    }
000040  b004              ADD      sp,sp,#0x10
000042  bd70              POP      {r4-r6,pc}
                  |L15.68|
000044  1b70              SUBS     r0,r6,r5              ;348
000046  1c40              ADDS     r0,r0,#1              ;348
000048  e7fa              B        |L15.64|
;;;350    
                          ENDP


                          AREA ||i.luaO_tostring||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_lld
                          REQUIRE _printf_longlong_dec
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_g
                          REQUIRE _printf_fp_dec
                  luaO_tostring PROC
;;;376    */
;;;377    void luaO_tostring (lua_State *L, TValue *obj) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  b090              SUB      sp,sp,#0x40
000006  4680              MOV      r8,r0
000008  460c              MOV      r4,r1
;;;378      char buff[MAXNUMBER2STR];
;;;379      size_t len;
;;;380      lua_assert(ttisnumber(obj));
;;;381      if (ttisinteger(obj))
00000a  7a20              LDRB     r0,[r4,#8]
00000c  2823              CMP      r0,#0x23
00000e  d10a              BNE      |L16.38|
;;;382        len = lua_integer2str(buff, sizeof(buff), ivalue(obj));
000010  e9d40100          LDRD     r0,r1,[r4,#0]
000014  a21a              ADR      r2,|L16.128|
000016  e9cd0100          STRD     r0,r1,[sp,#0]
00001a  2132              MOVS     r1,#0x32
00001c  a803              ADD      r0,sp,#0xc
00001e  f7fffffe          BL       __2snprintf
000022  4605              MOV      r5,r0
000024  e01c              B        |L16.96|
                  |L16.38|
;;;383      else {
;;;384        len = lua_number2str(buff, sizeof(buff), fltvalue(obj));
000026  e9d40100          LDRD     r0,r1,[r4,#0]
00002a  a217              ADR      r2,|L16.136|
00002c  e9cd0100          STRD     r0,r1,[sp,#0]
000030  2132              MOVS     r1,#0x32
000032  a803              ADD      r0,sp,#0xc
000034  f7fffffe          BL       __2snprintf
000038  4605              MOV      r5,r0
;;;385        if (buff[strspn(buff, "-0123456789")] == '\0') {  /* looks like an int? */
00003a  a115              ADR      r1,|L16.144|
00003c  a803              ADD      r0,sp,#0xc
00003e  f7fffffe          BL       strspn
000042  a903              ADD      r1,sp,#0xc
000044  5c08              LDRB     r0,[r1,r0]
000046  b958              CBNZ     r0,|L16.96|
;;;386          buff[len++] = lua_getlocaledecpoint();
000048  f7fffffe          BL       localeconv
00004c  6800              LDR      r0,[r0,#0]
00004e  7802              LDRB     r2,[r0,#0]
000050  4628              MOV      r0,r5
000052  1c6d              ADDS     r5,r5,#1
000054  a903              ADD      r1,sp,#0xc
000056  540a              STRB     r2,[r1,r0]
;;;387          buff[len++] = '0';  /* adds '.0' to result */
000058  2230              MOVS     r2,#0x30
00005a  4628              MOV      r0,r5
00005c  1c6d              ADDS     r5,r5,#1
00005e  540a              STRB     r2,[r1,r0]
                  |L16.96|
;;;388        }
;;;389      }
;;;390      setsvalue(L, obj, luaS_newlstr(L, buff, len));
000060  4626              MOV      r6,r4
000062  462a              MOV      r2,r5
000064  a903              ADD      r1,sp,#0xc
000066  4640              MOV      r0,r8
000068  f7fffffe          BL       luaS_newlstr
00006c  4607              MOV      r7,r0
00006e  6037              STR      r7,[r6,#0]
000070  7938              LDRB     r0,[r7,#4]
000072  f0400040          ORR      r0,r0,#0x40
000076  7230              STRB     r0,[r6,#8]
;;;391    }
000078  b010              ADD      sp,sp,#0x40
00007a  e8bd81f0          POP      {r4-r8,pc}
;;;392    
                          ENDP

00007e  0000              DCW      0x0000
                  |L16.128|
000080  256c6c64          DCB      "%lld",0
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L16.136|
000088  252e3134          DCB      "%.14g",0
00008c  6700    
00008e  00                DCB      0
00008f  00                DCB      0
                  |L16.144|
000090  2d303132          DCB      "-0123456789",0
000094  33343536
000098  37383900

                          AREA ||i.luaO_utf8esc||, CODE, READONLY, ALIGN=1

                  luaO_utf8esc PROC
;;;351    
;;;352    int luaO_utf8esc (char *buff, unsigned long x) {
000000  b570              PUSH     {r4-r6,lr}
000002  4602              MOV      r2,r0
;;;353      int n = 1;  /* number of bytes put in buffer (backwards) */
000004  2301              MOVS     r3,#1
;;;354      lua_assert(x <= 0x10FFFF);
;;;355      if (x < 0x80)  /* ascii? */
000006  2980              CMP      r1,#0x80
000008  d202              BCS      |L17.16|
;;;356        buff[UTF8BUFFSZ - 1] = cast_char(x);
00000a  b248              SXTB     r0,r1
00000c  71d0              STRB     r0,[r2,#7]
00000e  e017              B        |L17.64|
                  |L17.16|
;;;357      else {  /* need continuation bytes */
;;;358        unsigned int mfb = 0x3f;  /* maximum that fits in first byte */
000010  203f              MOVS     r0,#0x3f
;;;359        do {  /* add continuation bytes */
000012  bf00              NOP      
                  |L17.20|
;;;360          buff[UTF8BUFFSZ - (n++)] = cast_char(0x80 | (x & 0x3f));
000014  f001043f          AND      r4,r1,#0x3f
000018  f0440480          ORR      r4,r4,#0x80
00001c  b266              SXTB     r6,r4
00001e  461c              MOV      r4,r3
000020  1c5b              ADDS     r3,r3,#1
000022  f1c40408          RSB      r4,r4,#8
000026  5516              STRB     r6,[r2,r4]
;;;361          x >>= 6;  /* remove added bits */
000028  0989              LSRS     r1,r1,#6
;;;362          mfb >>= 1;  /* now there is one less bit available in first byte */
00002a  0840              LSRS     r0,r0,#1
;;;363        } while (x > mfb);  /* still needs continuation byte? */
00002c  4281              CMP      r1,r0
00002e  d8f1              BHI      |L17.20|
;;;364        buff[UTF8BUFFSZ - n] = cast_char((~mfb << 1) | x);  /* add first byte */
000030  43c4              MVNS     r4,r0
000032  ea410444          ORR      r4,r1,r4,LSL #1
000036  b264              SXTB     r4,r4
000038  f1c30508          RSB      r5,r3,#8
00003c  5554              STRB     r4,[r2,r5]
;;;365      }
00003e  bf00              NOP      
                  |L17.64|
;;;366      return n;
000040  4618              MOV      r0,r3
;;;367    }
000042  bd70              POP      {r4-r6,pc}
;;;368    
                          ENDP


                          AREA ||i.numarith||, CODE, READONLY, ALIGN=1

                  numarith PROC
;;;102    
;;;103    static lua_Number numarith (lua_State *L, int op, lua_Number v1,
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;104                                                      lua_Number v2) {
000004  4683              MOV      r11,r0
000006  468a              MOV      r10,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  e9dd670c          LDRD     r6,r7,[sp,#0x30]
;;;105      switch (op) {
000010  f1ba0f0d          CMP      r10,#0xd
000014  d25a              BCS      |L18.204|
000016  e8dff00a          TBB      [pc,r10]
00001a  070f              DCB      0x07,0x0f
00001c  1639241d          DCB      0x16,0x39,0x24,0x1d
000020  2b595959          DCB      0x2b,0x59,0x59,0x59
000024  59593500          DCB      0x59,0x59,0x35,0x00
;;;106        case LUA_OPADD: return luai_numadd(L, v1, v2);
000028  4632              MOV      r2,r6
00002a  463b              MOV      r3,r7
00002c  4620              MOV      r0,r4
00002e  4629              MOV      r1,r5
000030  f7fffffe          BL       __aeabi_dadd
                  |L18.52|
;;;107        case LUA_OPSUB: return luai_numsub(L, v1, v2);
;;;108        case LUA_OPMUL: return luai_nummul(L, v1, v2);
;;;109        case LUA_OPDIV: return luai_numdiv(L, v1, v2);
;;;110        case LUA_OPPOW: return luai_numpow(L, v1, v2);
;;;111        case LUA_OPIDIV: return luai_numidiv(L, v1, v2);
;;;112        case LUA_OPUNM: return luai_numunm(L, v1);
;;;113        case LUA_OPMOD: {
;;;114          lua_Number m;
;;;115          luai_nummod(L, v1, v2, m);
;;;116          return m;
;;;117        }
;;;118        default: lua_assert(0); return 0;
;;;119      }
;;;120    }
000034  e8bd9ffc          POP      {r2-r12,pc}
000038  4632              MOV      r2,r6                 ;107
00003a  463b              MOV      r3,r7                 ;107
00003c  4620              MOV      r0,r4                 ;107
00003e  4629              MOV      r1,r5                 ;107
000040  f7fffffe          BL       __aeabi_dsub
000044  e7f6              B        |L18.52|
000046  4632              MOV      r2,r6                 ;108
000048  463b              MOV      r3,r7                 ;108
00004a  4620              MOV      r0,r4                 ;108
00004c  4629              MOV      r1,r5                 ;108
00004e  f7fffffe          BL       __aeabi_dmul
000052  e7ef              B        |L18.52|
000054  4632              MOV      r2,r6                 ;109
000056  463b              MOV      r3,r7                 ;109
000058  4620              MOV      r0,r4                 ;109
00005a  4629              MOV      r1,r5                 ;109
00005c  f7fffffe          BL       __aeabi_ddiv
000060  e7e8              B        |L18.52|
000062  4632              MOV      r2,r6                 ;110
000064  463b              MOV      r3,r7                 ;110
000066  4620              MOV      r0,r4                 ;110
000068  4629              MOV      r1,r5                 ;110
00006a  f7fffffe          BL       pow
00006e  e7e1              B        |L18.52|
000070  4632              MOV      r2,r6                 ;111
000072  463b              MOV      r3,r7                 ;111
000074  4620              MOV      r0,r4                 ;111
000076  4629              MOV      r1,r5                 ;111
000078  f7fffffe          BL       __aeabi_ddiv
00007c  4680              MOV      r8,r0                 ;111
00007e  f7fffffe          BL       floor
000082  e7d7              B        |L18.52|
000084  f0854100          EOR      r1,r5,#0x80000000     ;112
000088  4620              MOV      r0,r4                 ;112
00008a  e7d3              B        |L18.52|
00008c  4632              MOV      r2,r6                 ;115
00008e  463b              MOV      r3,r7                 ;115
000090  4620              MOV      r0,r4                 ;115
000092  4629              MOV      r1,r5                 ;115
000094  f7fffffe          BL       fmod
000098  4680              MOV      r8,r0                 ;115
00009a  4689              MOV      r9,r1                 ;115
00009c  4632              MOV      r2,r6                 ;115
00009e  463b              MOV      r3,r7                 ;115
0000a0  4640              MOV      r0,r8                 ;115
0000a2  4649              MOV      r1,r9                 ;115
0000a4  f7fffffe          BL       __aeabi_dmul
0000a8  2200              MOVS     r2,#0                 ;115
0000aa  4613              MOV      r3,r2                 ;115
0000ac  e9cd0100          STRD     r0,r1,[sp,#0]         ;115
0000b0  f7fffffe          BL       __aeabi_cdcmple
0000b4  d207              BCS      |L18.198|
0000b6  4632              MOV      r2,r6                 ;115
0000b8  463b              MOV      r3,r7                 ;115
0000ba  4640              MOV      r0,r8                 ;115
0000bc  4649              MOV      r1,r9                 ;115
0000be  f7fffffe          BL       __aeabi_dadd
0000c2  4680              MOV      r8,r0                 ;115
0000c4  4689              MOV      r9,r1                 ;115
                  |L18.198|
0000c6  4640              MOV      r0,r8                 ;116
0000c8  4649              MOV      r1,r9                 ;116
0000ca  e7b3              B        |L18.52|
                  |L18.204|
0000cc  2000              MOVS     r0,#0                 ;118
0000ce  4601              MOV      r1,r0                 ;118
0000d0  e7b0              B        |L18.52|
;;;121    
                          ENDP


                          AREA ||i.pushstr||, CODE, READONLY, ALIGN=1

                  pushstr PROC
;;;393    
;;;394    static void pushstr (lua_State *L, const char *str, size_t l) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;395      setsvalue2s(L, L->top, luaS_newlstr(L, str, l));
00000a  68e5              LDR      r5,[r4,#0xc]
00000c  4642              MOV      r2,r8
00000e  4639              MOV      r1,r7
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       luaS_newlstr
000016  4606              MOV      r6,r0
000018  602e              STR      r6,[r5,#0]
00001a  7930              LDRB     r0,[r6,#4]
00001c  f0400040          ORR      r0,r0,#0x40
000020  7228              STRB     r0,[r5,#8]
;;;396      luaD_inctop(L);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       luaD_inctop
;;;397    }
000028  e8bd81f0          POP      {r4-r8,pc}
;;;398    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=3

                  luaO_nilobject_
                          DCD      0x00000000
                          DCD      0x00000000
000008  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                  log_2
000010  00010202          DCB      0x00,0x01,0x02,0x02
000014  03030303          DCB      0x03,0x03,0x03,0x03
000018  04040404          DCB      0x04,0x04,0x04,0x04
00001c  04040404          DCB      0x04,0x04,0x04,0x04
000020  05050505          DCB      0x05,0x05,0x05,0x05
000024  05050505          DCB      0x05,0x05,0x05,0x05
000028  05050505          DCB      0x05,0x05,0x05,0x05
00002c  05050505          DCB      0x05,0x05,0x05,0x05
000030  06060606          DCB      0x06,0x06,0x06,0x06
000034  06060606          DCB      0x06,0x06,0x06,0x06
000038  06060606          DCB      0x06,0x06,0x06,0x06
00003c  06060606          DCB      0x06,0x06,0x06,0x06
000040  06060606          DCB      0x06,0x06,0x06,0x06
000044  06060606          DCB      0x06,0x06,0x06,0x06
000048  06060606          DCB      0x06,0x06,0x06,0x06
00004c  06060606          DCB      0x06,0x06,0x06,0x06
000050  07070707          DCB      0x07,0x07,0x07,0x07
000054  07070707          DCB      0x07,0x07,0x07,0x07
000058  07070707          DCB      0x07,0x07,0x07,0x07
00005c  07070707          DCB      0x07,0x07,0x07,0x07
000060  07070707          DCB      0x07,0x07,0x07,0x07
000064  07070707          DCB      0x07,0x07,0x07,0x07
000068  07070707          DCB      0x07,0x07,0x07,0x07
00006c  07070707          DCB      0x07,0x07,0x07,0x07
000070  07070707          DCB      0x07,0x07,0x07,0x07
000074  07070707          DCB      0x07,0x07,0x07,0x07
000078  07070707          DCB      0x07,0x07,0x07,0x07
00007c  07070707          DCB      0x07,0x07,0x07,0x07
000080  07070707          DCB      0x07,0x07,0x07,0x07
000084  07070707          DCB      0x07,0x07,0x07,0x07
000088  07070707          DCB      0x07,0x07,0x07,0x07
00008c  07070707          DCB      0x07,0x07,0x07,0x07
000090  08080808          DCB      0x08,0x08,0x08,0x08
000094  08080808          DCB      0x08,0x08,0x08,0x08
000098  08080808          DCB      0x08,0x08,0x08,0x08
00009c  08080808          DCB      0x08,0x08,0x08,0x08
0000a0  08080808          DCB      0x08,0x08,0x08,0x08
0000a4  08080808          DCB      0x08,0x08,0x08,0x08
0000a8  08080808          DCB      0x08,0x08,0x08,0x08
0000ac  08080808          DCB      0x08,0x08,0x08,0x08
0000b0  08080808          DCB      0x08,0x08,0x08,0x08
0000b4  08080808          DCB      0x08,0x08,0x08,0x08
0000b8  08080808          DCB      0x08,0x08,0x08,0x08
0000bc  08080808          DCB      0x08,0x08,0x08,0x08
0000c0  08080808          DCB      0x08,0x08,0x08,0x08
0000c4  08080808          DCB      0x08,0x08,0x08,0x08
0000c8  08080808          DCB      0x08,0x08,0x08,0x08
0000cc  08080808          DCB      0x08,0x08,0x08,0x08
0000d0  08080808          DCB      0x08,0x08,0x08,0x08
0000d4  08080808          DCB      0x08,0x08,0x08,0x08
0000d8  08080808          DCB      0x08,0x08,0x08,0x08
0000dc  08080808          DCB      0x08,0x08,0x08,0x08
0000e0  08080808          DCB      0x08,0x08,0x08,0x08
0000e4  08080808          DCB      0x08,0x08,0x08,0x08
0000e8  08080808          DCB      0x08,0x08,0x08,0x08
0000ec  08080808          DCB      0x08,0x08,0x08,0x08
0000f0  08080808          DCB      0x08,0x08,0x08,0x08
0000f4  08080808          DCB      0x08,0x08,0x08,0x08
0000f8  08080808          DCB      0x08,0x08,0x08,0x08
0000fc  08080808          DCB      0x08,0x08,0x08,0x08
000100  08080808          DCB      0x08,0x08,0x08,0x08
000104  08080808          DCB      0x08,0x08,0x08,0x08
000108  08080808          DCB      0x08,0x08,0x08,0x08
00010c  08080808          DCB      0x08,0x08,0x08,0x08
