; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\lundump.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\lundump.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\lundump.crf ..\..\..\M6P1(L)_Lua\lua\lundump.c]
                          THUMB

                          AREA ||i.LoadBlock||, CODE, READONLY, ALIGN=2

                  LoadBlock PROC
;;;50     
;;;51     static void LoadBlock (LoadState *S, void *b, size_t size) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;52       if (luaZ_read(S->Z, b, size) != 0)
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
00000c  6860              LDR      r0,[r4,#4]
00000e  f7fffffe          BL       luaZ_read
000012  b118              CBZ      r0,|L1.28|
;;;53         error(S, "truncated");
000014  a102              ADR      r1,|L1.32|
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       error
                  |L1.28|
;;;54     }
00001c  bd70              POP      {r4-r6,pc}
;;;55     
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
000020  7472756e          DCB      "truncated",0
000024  63617465
000028  6400    
00002a  00                DCB      0
00002b  00                DCB      0

                          AREA ||i.LoadByte||, CODE, READONLY, ALIGN=2

                  LoadByte PROC
;;;59     
;;;60     static lu_byte LoadByte (LoadState *S) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;61       int b = zgetc(S->Z);
000004  6860              LDR      r0,[r4,#4]
000006  6801              LDR      r1,[r0,#0]
000008  1e48              SUBS     r0,r1,#1
00000a  6862              LDR      r2,[r4,#4]
00000c  6010              STR      r0,[r2,#0]
00000e  b131              CBZ      r1,|L2.30|
000010  6860              LDR      r0,[r4,#4]
000012  6841              LDR      r1,[r0,#4]
000014  1c48              ADDS     r0,r1,#1
000016  6862              LDR      r2,[r4,#4]
000018  6050              STR      r0,[r2,#4]
00001a  7808              LDRB     r0,[r1,#0]
00001c  e002              B        |L2.36|
                  |L2.30|
00001e  6860              LDR      r0,[r4,#4]
000020  f7fffffe          BL       luaZ_fill
                  |L2.36|
000024  4605              MOV      r5,r0
;;;62       if (b == EOZ)
000026  1c68              ADDS     r0,r5,#1
000028  b918              CBNZ     r0,|L2.50|
;;;63         error(S, "truncated");
00002a  a103              ADR      r1,|L2.56|
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       error
                  |L2.50|
;;;64       return cast_byte(b);
000032  b2e8              UXTB     r0,r5
;;;65     }
000034  bd70              POP      {r4-r6,pc}
;;;66     
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
000038  7472756e          DCB      "truncated",0
00003c  63617465
000040  6400    
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.LoadCode||, CODE, READONLY, ALIGN=1

                  LoadCode PROC
;;;114    
;;;115    static void LoadCode (LoadState *S, Proto *f) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;116      int n = LoadInt(S);
000006  4630              MOV      r0,r6
000008  f7fffffe          BL       LoadInt
00000c  4605              MOV      r5,r0
;;;117      f->code = luaM_newvectorchecked(S->L, n, Instruction);
00000e  1c68              ADDS     r0,r5,#1
000010  f1b04f80          CMP      r0,#0x40000000
000014  d303              BCC      |L3.30|
000016  6830              LDR      r0,[r6,#0]
000018  f7fffffe          BL       luaM_toobig
00001c  e000              B        |L3.32|
                  |L3.30|
00001e  bf00              NOP      
                  |L3.32|
000020  00a9              LSLS     r1,r5,#2
000022  2200              MOVS     r2,#0
000024  6830              LDR      r0,[r6,#0]
000026  f7fffffe          BL       luaM_malloc_
00002a  63a0              STR      r0,[r4,#0x38]
;;;118      f->sizecode = n;
00002c  6165              STR      r5,[r4,#0x14]
;;;119      LoadVector(S, f->code, n);
00002e  00aa              LSLS     r2,r5,#2
000030  4630              MOV      r0,r6
000032  6ba1              LDR      r1,[r4,#0x38]
000034  f7fffffe          BL       LoadBlock
;;;120    }
000038  bd70              POP      {r4-r6,pc}
;;;121    
                          ENDP


                          AREA ||i.LoadConstants||, CODE, READONLY, ALIGN=1

                  LoadConstants PROC
;;;125    
;;;126    static void LoadConstants (LoadState *S, Proto *f) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
;;;127      int i;
;;;128      int n = LoadInt(S);
000008  4640              MOV      r0,r8
00000a  f7fffffe          BL       LoadInt
00000e  4607              MOV      r7,r0
;;;129      f->k = luaM_newvectorchecked(S->L, n, TValue);
000010  1c78              ADDS     r0,r7,#1
000012  f1b05f80          CMP      r0,#0x10000000
000016  d304              BCC      |L4.34|
000018  f8d80000          LDR      r0,[r8,#0]
00001c  f7fffffe          BL       luaM_toobig
000020  e000              B        |L4.36|
                  |L4.34|
000022  bf00              NOP      
                  |L4.36|
000024  0139              LSLS     r1,r7,#4
000026  2200              MOVS     r2,#0
000028  f8d80000          LDR      r0,[r8,#0]
00002c  f7fffffe          BL       luaM_malloc_
000030  6330              STR      r0,[r6,#0x30]
;;;130      f->sizek = n;
000032  6137              STR      r7,[r6,#0x10]
;;;131      for (i = 0; i < n; i++)
000034  2500              MOVS     r5,#0
000036  e005              B        |L4.68|
                  |L4.56|
;;;132        setnilvalue(&f->k[i]);
000038  2000              MOVS     r0,#0
00003a  6b31              LDR      r1,[r6,#0x30]
00003c  eb011105          ADD      r1,r1,r5,LSL #4
000040  7208              STRB     r0,[r1,#8]
000042  1c6d              ADDS     r5,r5,#1              ;131
                  |L4.68|
000044  42bd              CMP      r5,r7                 ;131
000046  dbf7              BLT      |L4.56|
;;;133      for (i = 0; i < n; i++) {
000048  2500              MOVS     r5,#0
00004a  e04e              B        |L4.234|
                  |L4.76|
;;;134        TValue *o = &f->k[i];
00004c  6b30              LDR      r0,[r6,#0x30]
00004e  eb001405          ADD      r4,r0,r5,LSL #4
;;;135        int t = LoadByte(S);
000052  4640              MOV      r0,r8
000054  f7fffffe          BL       LoadByte
000058  4683              MOV      r11,r0
;;;136        switch (t) {
00005a  f1bb0f14          CMP      r11,#0x14
00005e  d032              BEQ      |L4.198|
000060  dc09              BGT      |L4.118|
000062  f1bb0f00          CMP      r11,#0
000066  d00d              BEQ      |L4.132|
000068  f1bb0f01          CMP      r11,#1
00006c  d00d              BEQ      |L4.138|
00006e  f1bb0f13          CMP      r11,#0x13
000072  d137              BNE      |L4.228|
000074  e013              B        |L4.158|
                  |L4.118|
000076  f1bb0f23          CMP      r11,#0x23
00007a  d01a              BEQ      |L4.178|
00007c  f1bb0f24          CMP      r11,#0x24
000080  d130              BNE      |L4.228|
000082  e021              B        |L4.200|
                  |L4.132|
;;;137          case LUA_TNIL:
;;;138            setnilvalue(o);
000084  2000              MOVS     r0,#0
000086  7220              STRB     r0,[r4,#8]
;;;139            break;
000088  e02d              B        |L4.230|
                  |L4.138|
;;;140          case LUA_TBOOLEAN:
;;;141            setbvalue(o, LoadByte(S));
00008a  46a1              MOV      r9,r4
00008c  4640              MOV      r0,r8
00008e  f7fffffe          BL       LoadByte
000092  f8c90000          STR      r0,[r9,#0]
000096  2001              MOVS     r0,#1
000098  f8890008          STRB     r0,[r9,#8]
;;;142            break;
00009c  e023              B        |L4.230|
                  |L4.158|
;;;143          case LUA_TNUMFLT:
;;;144            setfltvalue(o, LoadNumber(S));
00009e  46a1              MOV      r9,r4
0000a0  4640              MOV      r0,r8
0000a2  f7fffffe          BL       LoadNumber
0000a6  e9c90100          STRD     r0,r1,[r9,#0]
0000aa  2013              MOVS     r0,#0x13
0000ac  f8890008          STRB     r0,[r9,#8]
;;;145            break;
0000b0  e019              B        |L4.230|
                  |L4.178|
;;;146          case LUA_TNUMINT:
;;;147            setivalue(o, LoadInteger(S));
0000b2  46a1              MOV      r9,r4
0000b4  4640              MOV      r0,r8
0000b6  f7fffffe          BL       LoadInteger
0000ba  e9c90100          STRD     r0,r1,[r9,#0]
0000be  2023              MOVS     r0,#0x23
0000c0  f8890008          STRB     r0,[r9,#8]
;;;148            break;
0000c4  e00f              B        |L4.230|
                  |L4.198|
;;;149          case LUA_TSHRSTR:
;;;150          case LUA_TLNGSTR:
0000c6  bf00              NOP      
                  |L4.200|
;;;151            setsvalue2n(S->L, o, LoadString(S));
0000c8  46a1              MOV      r9,r4
0000ca  4640              MOV      r0,r8
0000cc  f7fffffe          BL       LoadString
0000d0  4682              MOV      r10,r0
0000d2  f8c9a000          STR      r10,[r9,#0]
0000d6  f89a0004          LDRB     r0,[r10,#4]
0000da  f0400040          ORR      r0,r0,#0x40
0000de  f8890008          STRB     r0,[r9,#8]
;;;152            break;
0000e2  e000              B        |L4.230|
                  |L4.228|
0000e4  bf00              NOP                            ;136
                  |L4.230|
0000e6  bf00              NOP                            ;139
0000e8  1c6d              ADDS     r5,r5,#1              ;133
                  |L4.234|
0000ea  42bd              CMP      r5,r7                 ;133
0000ec  dbae              BLT      |L4.76|
;;;153          default: lua_assert(0);
;;;154        }
;;;155      }
;;;156    }
0000ee  e8bd9ff0          POP      {r4-r12,pc}
;;;157    
                          ENDP


                          AREA ||i.LoadDebug||, CODE, READONLY, ALIGN=2

                  LoadDebug PROC
;;;186    
;;;187    static void LoadDebug (LoadState *S, Proto *f) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;188      int i, n;
;;;189      n = LoadInt(S);
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       LoadInt
00000e  4606              MOV      r6,r0
;;;190      f->lineinfo = luaM_newvectorchecked(S->L, n, ls_byte);
000010  bf00              NOP      
000012  bf00              NOP      
000014  4631              MOV      r1,r6
000016  2200              MOVS     r2,#0
000018  6838              LDR      r0,[r7,#0]
00001a  f7fffffe          BL       luaM_malloc_
00001e  6468              STR      r0,[r5,#0x44]
;;;191      f->sizelineinfo = n;
000020  61ae              STR      r6,[r5,#0x18]
;;;192      LoadVector(S, f->lineinfo, n);
000022  4632              MOV      r2,r6
000024  4638              MOV      r0,r7
000026  6c69              LDR      r1,[r5,#0x44]
000028  f7fffffe          BL       LoadBlock
;;;193      n = LoadInt(S);
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       LoadInt
000032  4606              MOV      r6,r0
;;;194      f->abslineinfo = luaM_newvectorchecked(S->L, n, AbsLineInfo);
000034  1c70              ADDS     r0,r6,#1
000036  f1b05f00          CMP      r0,#0x20000000
00003a  d303              BCC      |L5.68|
00003c  6838              LDR      r0,[r7,#0]
00003e  f7fffffe          BL       luaM_toobig
000042  e000              B        |L5.70|
                  |L5.68|
000044  bf00              NOP      
                  |L5.70|
000046  00f1              LSLS     r1,r6,#3
000048  2200              MOVS     r2,#0
00004a  6838              LDR      r0,[r7,#0]
00004c  f7fffffe          BL       luaM_malloc_
000050  64a8              STR      r0,[r5,#0x48]
;;;195      f->sizeabslineinfo = n;
000052  626e              STR      r6,[r5,#0x24]
;;;196      for (i = 0; i < n; i++) {
000054  2400              MOVS     r4,#0
000056  e00d              B        |L5.116|
                  |L5.88|
;;;197        f->abslineinfo[i].pc = LoadInt(S);
000058  4638              MOV      r0,r7
00005a  f7fffffe          BL       LoadInt
00005e  6ca9              LDR      r1,[r5,#0x48]
000060  f8410034          STR      r0,[r1,r4,LSL #3]
;;;198        f->abslineinfo[i].line = LoadInt(S);
000064  4638              MOV      r0,r7
000066  f7fffffe          BL       LoadInt
00006a  6ca9              LDR      r1,[r5,#0x48]
00006c  eb0101c4          ADD      r1,r1,r4,LSL #3
000070  6048              STR      r0,[r1,#4]
000072  1c64              ADDS     r4,r4,#1              ;196
                  |L5.116|
000074  42b4              CMP      r4,r6                 ;196
000076  dbef              BLT      |L5.88|
;;;199      }
;;;200      n = LoadInt(S);
000078  4638              MOV      r0,r7
00007a  f7fffffe          BL       LoadInt
00007e  4606              MOV      r6,r0
;;;201      f->locvars = luaM_newvectorchecked(S->L, n, LocVar);
000080  1c70              ADDS     r0,r6,#1
000082  4926              LDR      r1,|L5.284|
000084  4288              CMP      r0,r1
000086  d903              BLS      |L5.144|
000088  6838              LDR      r0,[r7,#0]
00008a  f7fffffe          BL       luaM_toobig
00008e  e000              B        |L5.146|
                  |L5.144|
000090  bf00              NOP      
                  |L5.146|
000092  eb060246          ADD      r2,r6,r6,LSL #1
000096  0091              LSLS     r1,r2,#2
000098  2200              MOVS     r2,#0
00009a  6838              LDR      r0,[r7,#0]
00009c  f7fffffe          BL       luaM_malloc_
0000a0  64e8              STR      r0,[r5,#0x4c]
;;;202      f->sizelocvars = n;
0000a2  622e              STR      r6,[r5,#0x20]
;;;203      for (i = 0; i < n; i++)
0000a4  2400              MOVS     r4,#0
0000a6  e006              B        |L5.182|
                  |L5.168|
;;;204        f->locvars[i].varname = NULL;
0000a8  2000              MOVS     r0,#0
0000aa  eb040244          ADD      r2,r4,r4,LSL #1
0000ae  6ce9              LDR      r1,[r5,#0x4c]
0000b0  f8410022          STR      r0,[r1,r2,LSL #2]
0000b4  1c64              ADDS     r4,r4,#1              ;203
                  |L5.182|
0000b6  42b4              CMP      r4,r6                 ;203
0000b8  dbf6              BLT      |L5.168|
;;;205      for (i = 0; i < n; i++) {
0000ba  2400              MOVS     r4,#0
0000bc  e01a              B        |L5.244|
                  |L5.190|
;;;206        f->locvars[i].varname = LoadString(S);
0000be  4638              MOV      r0,r7
0000c0  f7fffffe          BL       LoadString
0000c4  eb040244          ADD      r2,r4,r4,LSL #1
0000c8  6ce9              LDR      r1,[r5,#0x4c]
0000ca  f8410022          STR      r0,[r1,r2,LSL #2]
;;;207        f->locvars[i].startpc = LoadInt(S);
0000ce  4638              MOV      r0,r7
0000d0  f7fffffe          BL       LoadInt
0000d4  eb040244          ADD      r2,r4,r4,LSL #1
0000d8  6ce9              LDR      r1,[r5,#0x4c]
0000da  eb010182          ADD      r1,r1,r2,LSL #2
0000de  6048              STR      r0,[r1,#4]
;;;208        f->locvars[i].endpc = LoadInt(S);
0000e0  4638              MOV      r0,r7
0000e2  f7fffffe          BL       LoadInt
0000e6  eb040244          ADD      r2,r4,r4,LSL #1
0000ea  6ce9              LDR      r1,[r5,#0x4c]
0000ec  eb010182          ADD      r1,r1,r2,LSL #2
0000f0  6088              STR      r0,[r1,#8]
0000f2  1c64              ADDS     r4,r4,#1              ;205
                  |L5.244|
0000f4  42b4              CMP      r4,r6                 ;205
0000f6  dbe2              BLT      |L5.190|
;;;209      }
;;;210      n = LoadInt(S);
0000f8  4638              MOV      r0,r7
0000fa  f7fffffe          BL       LoadInt
0000fe  4606              MOV      r6,r0
;;;211      for (i = 0; i < n; i++)
000100  2400              MOVS     r4,#0
000102  e006              B        |L5.274|
                  |L5.260|
;;;212        f->upvalues[i].name = LoadString(S);
000104  4638              MOV      r0,r7
000106  f7fffffe          BL       LoadString
00010a  6c29              LDR      r1,[r5,#0x40]
00010c  f8410034          STR      r0,[r1,r4,LSL #3]
000110  1c64              ADDS     r4,r4,#1              ;211
                  |L5.274|
000112  42b4              CMP      r4,r6                 ;211
000114  dbf6              BLT      |L5.260|
;;;213    }
000116  e8bd81f0          POP      {r4-r8,pc}
;;;214    
                          ENDP

00011a  0000              DCW      0x0000
                  |L5.284|
                          DCD      0x15555555

                          AREA ||i.LoadFunction||, CODE, READONLY, ALIGN=1

                  LoadFunction PROC
;;;215    
;;;216    static void LoadFunction (LoadState *S, Proto *f, TString *psource) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;217      f->source = LoadString(S);
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       LoadString
00000e  6520              STR      r0,[r4,#0x50]
;;;218      if (f->source == NULL)  /* no source in dump? */
000010  6d20              LDR      r0,[r4,#0x50]
000012  b900              CBNZ     r0,|L6.22|
;;;219        f->source = psource;  /* reuse parent's source */
000014  6525              STR      r5,[r4,#0x50]
                  |L6.22|
;;;220      f->linedefined = LoadInt(S);
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       LoadInt
00001c  62a0              STR      r0,[r4,#0x28]
;;;221      f->lastlinedefined = LoadInt(S);
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       LoadInt
000024  62e0              STR      r0,[r4,#0x2c]
;;;222      f->numparams = LoadByte(S);
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       LoadByte
00002c  71a0              STRB     r0,[r4,#6]
;;;223      f->is_vararg = LoadByte(S);
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       LoadByte
000034  71e0              STRB     r0,[r4,#7]
;;;224      f->maxstacksize = LoadByte(S);
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       LoadByte
00003c  7220              STRB     r0,[r4,#8]
;;;225      LoadCode(S, f);
00003e  4621              MOV      r1,r4
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       LoadCode
;;;226      LoadConstants(S, f);
000046  4621              MOV      r1,r4
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       LoadConstants
;;;227      LoadUpvalues(S, f);
00004e  4621              MOV      r1,r4
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       LoadUpvalues
;;;228      LoadProtos(S, f);
000056  4621              MOV      r1,r4
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       LoadProtos
;;;229      LoadDebug(S, f);
00005e  4621              MOV      r1,r4
000060  4630              MOV      r0,r6
000062  f7fffffe          BL       LoadDebug
;;;230    }
000066  bd70              POP      {r4-r6,pc}
;;;231    
                          ENDP


                          AREA ||i.LoadInt||, CODE, READONLY, ALIGN=1

                  LoadInt PROC
;;;78     
;;;79     static int LoadInt (LoadState *S) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;80       return cast_int(LoadSize(S));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       LoadSize
;;;81     }
00000a  bd10              POP      {r4,pc}
;;;82     
                          ENDP


                          AREA ||i.LoadInteger||, CODE, READONLY, ALIGN=1

                  LoadInteger PROC
;;;90     
;;;91     static lua_Integer LoadInteger (LoadState *S) {
000000  b51c              PUSH     {r2-r4,lr}
000002  4604              MOV      r4,r0
;;;92       lua_Integer x;
;;;93       LoadVar(S, x);
000004  2208              MOVS     r2,#8
000006  4669              MOV      r1,sp
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       LoadBlock
;;;94       return x;
00000e  e9dd0100          LDRD     r0,r1,[sp,#0]
;;;95     }
000012  bd1c              POP      {r2-r4,pc}
;;;96     
                          ENDP


                          AREA ||i.LoadNumber||, CODE, READONLY, ALIGN=1

                  LoadNumber PROC
;;;83     
;;;84     static lua_Number LoadNumber (LoadState *S) {
000000  b51c              PUSH     {r2-r4,lr}
000002  4604              MOV      r4,r0
;;;85       lua_Number x;
;;;86       LoadVar(S, x);
000004  2208              MOVS     r2,#8
000006  4669              MOV      r1,sp
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       LoadBlock
;;;87       return x;
00000e  e9dd0100          LDRD     r0,r1,[sp,#0]
;;;88     }
000012  bd1c              POP      {r2-r4,pc}
;;;89     
                          ENDP


                          AREA ||i.LoadProtos||, CODE, READONLY, ALIGN=1

                  LoadProtos PROC
;;;158    
;;;159    static void LoadProtos (LoadState *S, Proto *f) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;160      int i;
;;;161      int n = LoadInt(S);
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       LoadInt
00000e  4606              MOV      r6,r0
;;;162      f->p = luaM_newvectorchecked(S->L, n, Proto *);
000010  1c70              ADDS     r0,r6,#1
000012  f1b04f80          CMP      r0,#0x40000000
000016  d303              BCC      |L10.32|
000018  6838              LDR      r0,[r7,#0]
00001a  f7fffffe          BL       luaM_toobig
00001e  e000              B        |L10.34|
                  |L10.32|
000020  bf00              NOP      
                  |L10.34|
000022  00b1              LSLS     r1,r6,#2
000024  2200              MOVS     r2,#0
000026  6838              LDR      r0,[r7,#0]
000028  f7fffffe          BL       luaM_malloc_
00002c  63e8              STR      r0,[r5,#0x3c]
;;;163      f->sizep = n;
00002e  61ee              STR      r6,[r5,#0x1c]
;;;164      for (i = 0; i < n; i++)
000030  2400              MOVS     r4,#0
000032  e004              B        |L10.62|
                  |L10.52|
;;;165        f->p[i] = NULL;
000034  2000              MOVS     r0,#0
000036  6be9              LDR      r1,[r5,#0x3c]
000038  f8410024          STR      r0,[r1,r4,LSL #2]
00003c  1c64              ADDS     r4,r4,#1              ;164
                  |L10.62|
00003e  42b4              CMP      r4,r6                 ;164
000040  dbf8              BLT      |L10.52|
;;;166      for (i = 0; i < n; i++) {
000042  2400              MOVS     r4,#0
000044  e00d              B        |L10.98|
                  |L10.70|
;;;167        f->p[i] = luaF_newproto(S->L);
000046  6838              LDR      r0,[r7,#0]
000048  f7fffffe          BL       luaF_newproto
00004c  6be9              LDR      r1,[r5,#0x3c]
00004e  f8410024          STR      r0,[r1,r4,LSL #2]
;;;168        LoadFunction(S, f->p[i], f->source);
000052  6be8              LDR      r0,[r5,#0x3c]
000054  f8501024          LDR      r1,[r0,r4,LSL #2]
000058  4638              MOV      r0,r7
00005a  6d2a              LDR      r2,[r5,#0x50]
00005c  f7fffffe          BL       LoadFunction
000060  1c64              ADDS     r4,r4,#1              ;166
                  |L10.98|
000062  42b4              CMP      r4,r6                 ;166
000064  dbef              BLT      |L10.70|
;;;169      }
;;;170    }
000066  e8bd81f0          POP      {r4-r8,pc}
;;;171    
                          ENDP


                          AREA ||i.LoadSize||, CODE, READONLY, ALIGN=1

                  LoadSize PROC
;;;67     
;;;68     static size_t LoadSize (LoadState *S) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
;;;69       size_t x = 0;
000004  2500              MOVS     r5,#0
;;;70       int b;
;;;71       do {
000006  bf00              NOP      
                  |L11.8|
;;;72         b = LoadByte(S);
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       LoadByte
00000e  4604              MOV      r4,r0
;;;73         x = (x << 7) | (b & 0x7f);
000010  4620              MOV      r0,r4
000012  f36510df          BFI      r0,r5,#7,#25
000016  4605              MOV      r5,r0
;;;74       } while ((b & 0x80) == 0);
000018  f0040080          AND      r0,r4,#0x80
00001c  2800              CMP      r0,#0
00001e  d0f3              BEQ      |L11.8|
;;;75       return x;
000020  4628              MOV      r0,r5
;;;76     }
000022  bd70              POP      {r4-r6,pc}
;;;77     
                          ENDP


                          AREA ||i.LoadString||, CODE, READONLY, ALIGN=1

                  LoadString PROC
;;;97     
;;;98     static TString *LoadString (LoadState *S) {
000000  b570              PUSH     {r4-r6,lr}
000002  b08a              SUB      sp,sp,#0x28
000004  4605              MOV      r5,r0
;;;99       size_t size = LoadSize(S);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       LoadSize
00000c  4604              MOV      r4,r0
;;;100      if (size == 0)
00000e  b914              CBNZ     r4,|L12.22|
;;;101        return NULL;
000010  2000              MOVS     r0,#0
                  |L12.18|
;;;102      else if (--size <= LUAI_MAXSHORTLEN) {  /* short string? */
;;;103        char buff[LUAI_MAXSHORTLEN];
;;;104        LoadVector(S, buff, size);
;;;105        return luaS_newlstr(S->L, buff, size);
;;;106      }
;;;107      else {  /* long string */
;;;108        TString *ts = luaS_createlngstrobj(S->L, size);
;;;109        LoadVector(S, getstr(ts), size);  /* load directly in final place */
;;;110        return ts;
;;;111      }
;;;112    }
000012  b00a              ADD      sp,sp,#0x28
000014  bd70              POP      {r4-r6,pc}
                  |L12.22|
000016  1e60              SUBS     r0,r4,#1              ;102
000018  4604              MOV      r4,r0                 ;102
00001a  2828              CMP      r0,#0x28              ;102
00001c  d80a              BHI      |L12.52|
00001e  4622              MOV      r2,r4                 ;104
000020  4669              MOV      r1,sp                 ;104
000022  4628              MOV      r0,r5                 ;104
000024  f7fffffe          BL       LoadBlock
000028  4622              MOV      r2,r4                 ;105
00002a  4669              MOV      r1,sp                 ;105
00002c  6828              LDR      r0,[r5,#0]            ;105
00002e  f7fffffe          BL       luaS_newlstr
000032  e7ee              B        |L12.18|
                  |L12.52|
000034  4621              MOV      r1,r4                 ;108
000036  6828              LDR      r0,[r5,#0]            ;108
000038  f7fffffe          BL       luaS_createlngstrobj
00003c  4606              MOV      r6,r0                 ;108
00003e  4622              MOV      r2,r4                 ;109
000040  f1060110          ADD      r1,r6,#0x10           ;109
000044  4628              MOV      r0,r5                 ;109
000046  f7fffffe          BL       LoadBlock
00004a  4630              MOV      r0,r6                 ;110
00004c  e7e1              B        |L12.18|
;;;113    
                          ENDP


                          AREA ||i.LoadUpvalues||, CODE, READONLY, ALIGN=1

                  LoadUpvalues PROC
;;;172    
;;;173    static void LoadUpvalues (LoadState *S, Proto *f) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;174      int i, n;
;;;175      n = LoadInt(S);
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       LoadInt
00000e  4606              MOV      r6,r0
;;;176      f->upvalues = luaM_newvectorchecked(S->L, n, Upvaldesc);
000010  1c70              ADDS     r0,r6,#1
000012  f1b05f00          CMP      r0,#0x20000000
000016  d303              BCC      |L13.32|
000018  6838              LDR      r0,[r7,#0]
00001a  f7fffffe          BL       luaM_toobig
00001e  e000              B        |L13.34|
                  |L13.32|
000020  bf00              NOP      
                  |L13.34|
000022  00f1              LSLS     r1,r6,#3
000024  2200              MOVS     r2,#0
000026  6838              LDR      r0,[r7,#0]
000028  f7fffffe          BL       luaM_malloc_
00002c  6428              STR      r0,[r5,#0x40]
;;;177      f->sizeupvalues = n;
00002e  60ee              STR      r6,[r5,#0xc]
;;;178      for (i = 0; i < n; i++)
000030  2400              MOVS     r4,#0
000032  e004              B        |L13.62|
                  |L13.52|
;;;179        f->upvalues[i].name = NULL;
000034  2000              MOVS     r0,#0
000036  6c29              LDR      r1,[r5,#0x40]
000038  f8410034          STR      r0,[r1,r4,LSL #3]
00003c  1c64              ADDS     r4,r4,#1              ;178
                  |L13.62|
00003e  42b4              CMP      r4,r6                 ;178
000040  dbf8              BLT      |L13.52|
;;;180      for (i = 0; i < n; i++) {
000042  2400              MOVS     r4,#0
000044  e00e              B        |L13.100|
                  |L13.70|
;;;181        f->upvalues[i].instack = LoadByte(S);
000046  4638              MOV      r0,r7
000048  f7fffffe          BL       LoadByte
00004c  6c29              LDR      r1,[r5,#0x40]
00004e  eb0101c4          ADD      r1,r1,r4,LSL #3
000052  7108              STRB     r0,[r1,#4]
;;;182        f->upvalues[i].idx = LoadByte(S);
000054  4638              MOV      r0,r7
000056  f7fffffe          BL       LoadByte
00005a  6c29              LDR      r1,[r5,#0x40]
00005c  eb0101c4          ADD      r1,r1,r4,LSL #3
000060  7148              STRB     r0,[r1,#5]
000062  1c64              ADDS     r4,r4,#1              ;180
                  |L13.100|
000064  42b4              CMP      r4,r6                 ;180
000066  dbee              BLT      |L13.70|
;;;183      }
;;;184    }
000068  e8bd81f0          POP      {r4-r8,pc}
;;;185    
                          ENDP


                          AREA ||i.checkHeader||, CODE, READONLY, ALIGN=2

                  checkHeader PROC
;;;249    
;;;250    static void checkHeader (LoadState *S) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;251      checkliteral(S, LUA_SIGNATURE + 1, "not a");  /* 1st char already checked */
000004  a02c              ADR      r0,|L14.184|
000006  1c41              ADDS     r1,r0,#1
000008  a22d              ADR      r2,|L14.192|
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       checkliteral
;;;252      if (LoadByte(S) != LUAC_VERSION)
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       LoadByte
000016  4602              MOV      r2,r0
000018  a02b              ADR      r0,|L14.200|
00001a  f9901000          LDRSB    r1,[r0,#0]
00001e  3930              SUBS     r1,r1,#0x30
000020  a02a              ADR      r0,|L14.204|
000022  f9900000          LDRSB    r0,[r0,#0]
000026  3830              SUBS     r0,r0,#0x30
000028  eb011000          ADD      r0,r1,r0,LSL #4
00002c  4282              CMP      r2,r0
00002e  d003              BEQ      |L14.56|
;;;253        error(S, "version mismatch in");
000030  a127              ADR      r1,|L14.208|
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       error
                  |L14.56|
;;;254      if (LoadByte(S) != LUAC_FORMAT)
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       LoadByte
00003e  b118              CBZ      r0,|L14.72|
;;;255        error(S, "format mismatch in");
000040  a128              ADR      r1,|L14.228|
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       error
                  |L14.72|
;;;256      checkliteral(S, LUAC_DATA, "corrupted");
000048  a22b              ADR      r2,|L14.248|
00004a  a12e              ADR      r1,|L14.260|
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       checkliteral
;;;257      checksize(S, int);
000052  a22e              ADR      r2,|L14.268|
000054  2104              MOVS     r1,#4
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       fchecksize
;;;258      checksize(S, size_t);
00005c  a22c              ADR      r2,|L14.272|
00005e  2104              MOVS     r1,#4
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       fchecksize
;;;259      checksize(S, Instruction);
000066  a22c              ADR      r2,|L14.280|
000068  2104              MOVS     r1,#4
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       fchecksize
;;;260      checksize(S, lua_Integer);
000070  a22c              ADR      r2,|L14.292|
000072  2108              MOVS     r1,#8
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       fchecksize
;;;261      checksize(S, lua_Number);
00007a  a22d              ADR      r2,|L14.304|
00007c  2108              MOVS     r1,#8
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       fchecksize
;;;262      if (LoadInteger(S) != LUAC_INT)
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       LoadInteger
00008a  f2456378          MOV      r3,#0x5678
00008e  4058              EORS     r0,r0,r3
000090  4308              ORRS     r0,r0,r1
000092  d003              BEQ      |L14.156|
;;;263        error(S, "endianness mismatch in");
000094  a129              ADR      r1,|L14.316|
000096  4620              MOV      r0,r4
000098  f7fffffe          BL       error
                  |L14.156|
;;;264      if (LoadNumber(S) != LUAC_NUM)
00009c  4620              MOV      r0,r4
00009e  f7fffffe          BL       LoadNumber
0000a2  4605              MOV      r5,r0
0000a4  2200              MOVS     r2,#0
0000a6  4b2b              LDR      r3,|L14.340|
0000a8  f7fffffe          BL       __aeabi_cdcmpeq
0000ac  d003              BEQ      |L14.182|
;;;265        error(S, "float format mismatch in");
0000ae  a12a              ADR      r1,|L14.344|
0000b0  4620              MOV      r0,r4
0000b2  f7fffffe          BL       error
                  |L14.182|
;;;266    }
0000b6  bd70              POP      {r4-r6,pc}
;;;267    
                          ENDP

                  |L14.184|
0000b8  1b4c7561          DCB      27,"Lua",0
0000bc  00      
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L14.192|
0000c0  6e6f7420          DCB      "not a",0
0000c4  6100    
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L14.200|
0000c8  3400              DCB      "4",0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L14.204|
0000cc  3500              DCB      "5",0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L14.208|
0000d0  76657273          DCB      "version mismatch in",0
0000d4  696f6e20
0000d8  6d69736d
0000dc  61746368
0000e0  20696e00
                  |L14.228|
0000e4  666f726d          DCB      "format mismatch in",0
0000e8  6174206d
0000ec  69736d61
0000f0  74636820
0000f4  696e00  
0000f7  00                DCB      0
                  |L14.248|
0000f8  636f7272          DCB      "corrupted",0
0000fc  75707465
000100  6400    
000102  00                DCB      0
000103  00                DCB      0
                  |L14.260|
000104  19930d0a          DCB      25,147,"\r\n",26,"\n",0
000108  1a0a00  
00010b  00                DCB      0
                  |L14.268|
00010c  696e7400          DCB      "int",0
                  |L14.272|
000110  73697a65          DCB      "size_t",0
000114  5f7400  
000117  00                DCB      0
                  |L14.280|
000118  496e7374          DCB      "Instruction",0
00011c  72756374
000120  696f6e00
                  |L14.292|
000124  6c75615f          DCB      "lua_Integer",0
000128  496e7465
00012c  67657200
                  |L14.304|
000130  6c75615f          DCB      "lua_Number",0
000134  4e756d62
000138  657200  
00013b  00                DCB      0
                  |L14.316|
00013c  656e6469          DCB      "endianness mismatch in",0
000140  616e6e65
000144  7373206d
000148  69736d61
00014c  74636820
000150  696e00  
000153  00                DCB      0
                  |L14.340|
                          DCD      0x40772800
                  |L14.344|
000158  666c6f61          DCB      "float format mismatch in",0
00015c  7420666f
000160  726d6174
000164  206d6973
000168  6d617463
00016c  6820696e
000170  00      
000171  00                DCB      0
000172  00                DCB      0
000173  00                DCB      0

                          AREA ||i.checkliteral||, CODE, READONLY, ALIGN=1

                  checkliteral PROC
;;;232    
;;;233    static void checkliteral (LoadState *S, const char *s, const char *msg) {
000000  b5fe              PUSH     {r1-r7,lr}
000002  4607              MOV      r7,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;234      char buff[sizeof(LUA_SIGNATURE) + sizeof(LUAC_DATA)]; /* larger than both */
;;;235      size_t len = strlen(s);
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       strlen
00000e  4604              MOV      r4,r0
;;;236      LoadVector(S, buff, len);
000010  4622              MOV      r2,r4
000012  4669              MOV      r1,sp
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       LoadBlock
;;;237      if (memcmp(s, buff, len) != 0)
00001a  4622              MOV      r2,r4
00001c  4669              MOV      r1,sp
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       memcmp
000024  b118              CBZ      r0,|L15.46|
;;;238        error(S, msg);
000026  4631              MOV      r1,r6
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       error
                  |L15.46|
;;;239    }
00002e  bdfe              POP      {r1-r7,pc}
;;;240    
                          ENDP


                          AREA ||i.error||, CODE, READONLY, ALIGN=2

                  error PROC
;;;38     
;;;39     static l_noret error(LoadState *S, const char *why) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;40       luaO_pushfstring(S->L, "%s: %s precompiled chunk", S->name, why);
000006  462b              MOV      r3,r5
000008  a104              ADR      r1,|L16.28|
00000a  68a2              LDR      r2,[r4,#8]
00000c  6820              LDR      r0,[r4,#0]
00000e  f7fffffe          BL       luaO_pushfstring
;;;41       luaD_throw(S->L, LUA_ERRSYNTAX);
000012  2103              MOVS     r1,#3
000014  6820              LDR      r0,[r4,#0]
000016  f7fffffe          BL       luaD_throw
;;;42     }
00001a  bd70              POP      {r4-r6,pc}
;;;43     
                          ENDP

                  |L16.28|
00001c  25733a20          DCB      "%s: %s precompiled chunk",0
000020  25732070
000024  7265636f
000028  6d70696c
00002c  65642063
000030  68756e6b
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0

                          AREA ||i.fchecksize||, CODE, READONLY, ALIGN=2

                  fchecksize PROC
;;;241    
;;;242    static void fchecksize (LoadState *S, size_t size, const char *tname) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;243      if (LoadByte(S) != size)
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       LoadByte
000010  42a8              CMP      r0,r5
000012  d009              BEQ      |L17.40|
;;;244        error(S, luaO_pushfstring(S->L, "%s size mismatch in", tname));
000014  4632              MOV      r2,r6
000016  a105              ADR      r1,|L17.44|
000018  6820              LDR      r0,[r4,#0]
00001a  f7fffffe          BL       luaO_pushfstring
00001e  4607              MOV      r7,r0
000020  4639              MOV      r1,r7
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       error
                  |L17.40|
;;;245    }
000028  e8bd81f0          POP      {r4-r8,pc}
;;;246    
                          ENDP

                  |L17.44|
00002c  25732073          DCB      "%s size mismatch in",0
000030  697a6520
000034  6d69736d
000038  61746368
00003c  20696e00

                          AREA ||i.luaU_undump||, CODE, READONLY, ALIGN=2

                  luaU_undump PROC
;;;271    */
;;;272    LClosure *luaU_undump(lua_State *L, ZIO *Z, const char *name) {
000000  e92d43fe          PUSH     {r1-r9,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;273      LoadState S;
;;;274      LClosure *cl;
;;;275      if (*name == '@' || *name == '=')
00000a  7820              LDRB     r0,[r4,#0]
00000c  2840              CMP      r0,#0x40
00000e  d002              BEQ      |L18.22|
000010  7820              LDRB     r0,[r4,#0]
000012  283d              CMP      r0,#0x3d
000014  d102              BNE      |L18.28|
                  |L18.22|
;;;276        S.name = name + 1;
000016  1c60              ADDS     r0,r4,#1
000018  9002              STR      r0,[sp,#8]
00001a  e00a              B        |L18.50|
                  |L18.28|
;;;277      else if (*name == LUA_SIGNATURE[0])
00001c  f9940000          LDRSB    r0,[r4,#0]
000020  a115              ADR      r1,|L18.120|
000022  f9911000          LDRSB    r1,[r1,#0]
000026  4288              CMP      r0,r1
000028  d102              BNE      |L18.48|
;;;278        S.name = "binary string";
00002a  a015              ADR      r0,|L18.128|
00002c  9002              STR      r0,[sp,#8]
00002e  e000              B        |L18.50|
                  |L18.48|
;;;279      else
;;;280        S.name = name;
000030  9402              STR      r4,[sp,#8]
                  |L18.50|
;;;281      S.L = L;
000032  9600              STR      r6,[sp,#0]
;;;282      S.Z = Z;
000034  9701              STR      r7,[sp,#4]
;;;283      checkHeader(&S);
000036  4668              MOV      r0,sp
000038  f7fffffe          BL       checkHeader
;;;284      cl = luaF_newLclosure(L, LoadByte(&S));
00003c  4668              MOV      r0,sp
00003e  f7fffffe          BL       LoadByte
000042  4680              MOV      r8,r0
000044  4641              MOV      r1,r8
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       luaF_newLclosure
00004c  4605              MOV      r5,r0
;;;285      setclLvalue2s(L, L->top, cl);
00004e  68f0              LDR      r0,[r6,#0xc]
000050  4629              MOV      r1,r5
000052  6001              STR      r1,[r0,#0]
000054  2256              MOVS     r2,#0x56
000056  7202              STRB     r2,[r0,#8]
;;;286      luaD_inctop(L);
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       luaD_inctop
;;;287      cl->p = luaF_newproto(L);
00005e  4630              MOV      r0,r6
000060  f7fffffe          BL       luaF_newproto
000064  60e8              STR      r0,[r5,#0xc]
;;;288      LoadFunction(&S, cl->p, NULL);
000066  2200              MOVS     r2,#0
000068  4668              MOV      r0,sp
00006a  68e9              LDR      r1,[r5,#0xc]
00006c  f7fffffe          BL       LoadFunction
;;;289      lua_assert(cl->nupvalues == cl->p->sizeupvalues);
;;;290      luai_verifycode(L, buff, cl->p);
;;;291      return cl;
000070  4628              MOV      r0,r5
;;;292    }
000072  e8bd83fe          POP      {r1-r9,pc}
;;;293    
                          ENDP

000076  0000              DCW      0x0000
                  |L18.120|
000078  1b4c7561          DCB      27,"Lua",0
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L18.128|
000080  62696e61          DCB      "binary string",0
000084  72792073
000088  7472696e
00008c  6700    
00008e  00                DCB      0
00008f  00                DCB      0
