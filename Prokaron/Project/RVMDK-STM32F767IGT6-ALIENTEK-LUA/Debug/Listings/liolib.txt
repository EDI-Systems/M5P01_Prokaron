; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\liolib.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\liolib.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\liolib.crf ..\..\..\M6P1(L)_Lua\lua\liolib.c]
                          THUMB

                          AREA ||i.aux_close||, CODE, READONLY, ALIGN=2

                  aux_close PROC
;;;200    */
;;;201    static int aux_close (lua_State *L) {
000000  b538              PUSH     {r3-r5,lr}
000002  4605              MOV      r5,r0
;;;202      LStream *p = tolstream(L);
000004  a206              ADR      r2,|L1.32|
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       luaL_checkudata
00000e  4604              MOV      r4,r0
;;;203      volatile lua_CFunction cf = p->closef;
000010  6860              LDR      r0,[r4,#4]
000012  9000              STR      r0,[sp,#0]
;;;204      p->closef = NULL;  /* mark stream as closed */
000014  2000              MOVS     r0,#0
000016  6060              STR      r0,[r4,#4]
;;;205      return (*cf)(L);  /* close it */
000018  4628              MOV      r0,r5
00001a  9900              LDR      r1,[sp,#0]
00001c  4788              BLX      r1
;;;206    }
00001e  bd38              POP      {r3-r5,pc}
;;;207    
                          ENDP

                  |L1.32|
000020  46494c45          DCB      "FILE*",0
000024  2a00    
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.aux_lines||, CODE, READONLY, ALIGN=2

                  aux_lines PROC
;;;338    
;;;339    static void aux_lines (lua_State *L, int toclose) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;340      int n = lua_gettop(L) - 1;  /* number of arguments to read */
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       lua_gettop
00000c  1e44              SUBS     r4,r0,#1
;;;341      luaL_argcheck(L, n <= MAXARGLINE, MAXARGLINE + 2, "too many arguments");
00000e  2cfa              CMP      r4,#0xfa
000010  dd04              BLE      |L2.28|
000012  a20c              ADR      r2,|L2.68|
000014  21fc              MOVS     r1,#0xfc
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       luaL_argerror
                  |L2.28|
;;;342      lua_pushinteger(L, n);  /* number of arguments to read */
00001c  4622              MOV      r2,r4
00001e  17e3              ASRS     r3,r4,#31
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       lua_pushinteger
;;;343      lua_pushboolean(L, toclose);  /* close/not close file when finished */
000026  4631              MOV      r1,r6
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       lua_pushboolean
;;;344      lua_rotate(L, 2, 2);  /* move 'n' and 'toclose' to their positions */
00002e  2202              MOVS     r2,#2
000030  4611              MOV      r1,r2
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       lua_rotate
;;;345      lua_pushcclosure(L, io_readline, 3 + n);
000038  1ce2              ADDS     r2,r4,#3
00003a  4907              LDR      r1,|L2.88|
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       lua_pushcclosure
;;;346    }
000042  bd70              POP      {r4-r6,pc}
;;;347    
                          ENDP

                  |L2.68|
000044  746f6f20          DCB      "too many arguments",0
000048  6d616e79
00004c  20617267
000050  756d656e
000054  747300  
000057  00                DCB      0
                  |L2.88|
                          DCD      io_readline

                          AREA ||i.createmeta||, CODE, READONLY, ALIGN=2

                  createmeta PROC
;;;732    
;;;733    static void createmeta (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;734      luaL_newmetatable(L, LUA_FILEHANDLE);  /* create metatable for file handles */
000004  a10c              ADR      r1,|L3.56|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       luaL_newmetatable
;;;735      lua_pushvalue(L, -1);  /* push metatable */
00000c  f04f31ff          MOV      r1,#0xffffffff
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       lua_pushvalue
;;;736      lua_setfield(L, -2, "__index");  /* metatable.__index = metatable */
000016  a20a              ADR      r2,|L3.64|
000018  f06f0101          MVN      r1,#1
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       lua_setfield
;;;737      luaL_setfuncs(L, flib, 0);  /* add file methods to new metatable */
000022  2200              MOVS     r2,#0
000024  4908              LDR      r1,|L3.72|
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       luaL_setfuncs
;;;738      lua_pop(L, 1);  /* pop new metatable */
00002c  f06f0101          MVN      r1,#1
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       lua_settop
;;;739    }
000036  bd10              POP      {r4,pc}
;;;740    
                          ENDP

                  |L3.56|
000038  46494c45          DCB      "FILE*",0
00003c  2a00    
00003e  00                DCB      0
00003f  00                DCB      0
                  |L3.64|
000040  5f5f696e          DCB      "__index",0
000044  64657800
                  |L3.72|
                          DCD      flib

                          AREA ||i.createstdfile||, CODE, READONLY, ALIGN=2

                  createstdfile PROC
;;;753    
;;;754    static void createstdfile (lua_State *L, FILE *f, const char *k,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;755                               const char *fname) {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;756      LStream *p = newprefile(L);
00000c  4640              MOV      r0,r8
00000e  f7fffffe          BL       newprefile
000012  4607              MOV      r7,r0
;;;757      p->f = f;
000014  603c              STR      r4,[r7,#0]
;;;758      p->closef = &io_noclose;
000016  480a              LDR      r0,|L4.64|
000018  6078              STR      r0,[r7,#4]
;;;759      if (k != NULL) {
00001a  b14d              CBZ      r5,|L4.48|
;;;760        lua_pushvalue(L, -1);
00001c  f04f31ff          MOV      r1,#0xffffffff
000020  4640              MOV      r0,r8
000022  f7fffffe          BL       lua_pushvalue
;;;761        lua_setfield(L, LUA_REGISTRYINDEX, k);  /* add file to registry */
000026  462a              MOV      r2,r5
000028  4906              LDR      r1,|L4.68|
00002a  4640              MOV      r0,r8
00002c  f7fffffe          BL       lua_setfield
                  |L4.48|
;;;762      }
;;;763      lua_setfield(L, -2, fname);  /* add file to module */
000030  4632              MOV      r2,r6
000032  f06f0101          MVN      r1,#1
000036  4640              MOV      r0,r8
000038  f7fffffe          BL       lua_setfield
;;;764    }
00003c  e8bd81f0          POP      {r4-r8,pc}
;;;765    
                          ENDP

                  |L4.64|
                          DCD      io_noclose
                  |L4.68|
                          DCD      0xfff0b9d8

                          AREA ||i.f_close||, CODE, READONLY, ALIGN=1

                  f_close PROC
;;;208    
;;;209    static int f_close (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;210      tofile(L);  /* make sure argument is an open stream */
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       tofile
;;;211      return aux_close(L);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       aux_close
;;;212    }
000010  bd10              POP      {r4,pc}
;;;213    
                          ENDP


                          AREA ||i.f_flush||, CODE, READONLY, ALIGN=1

                  f_flush PROC
;;;691    
;;;692    static int f_flush (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;693      return luaL_fileresult(L, fflush(tofile(L)) == 0, NULL);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       tofile
00000a  4606              MOV      r6,r0
00000c  f7fffffe          BL       fflush
000010  b908              CBNZ     r0,|L6.22|
000012  2001              MOVS     r0,#1
000014  e000              B        |L6.24|
                  |L6.22|
000016  2000              MOVS     r0,#0
                  |L6.24|
000018  4605              MOV      r5,r0
00001a  2200              MOVS     r2,#0
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       luaL_fileresult
;;;694    }
000024  bd70              POP      {r4-r6,pc}
;;;695    
                          ENDP


                          AREA ||i.f_gc||, CODE, READONLY, ALIGN=2

                  f_gc PROC
;;;221    
;;;222    static int f_gc (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;223      LStream *p = tolstream(L);
000004  a207              ADR      r2,|L7.36|
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       luaL_checkudata
00000e  4604              MOV      r4,r0
;;;224      if (!isclosed(p) && p->f != NULL)
000010  6860              LDR      r0,[r4,#4]
000012  b120              CBZ      r0,|L7.30|
000014  6820              LDR      r0,[r4,#0]
000016  b110              CBZ      r0,|L7.30|
;;;225        aux_close(L);  /* ignore closed and incompletely open files */
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       aux_close
                  |L7.30|
;;;226      return 0;
00001e  2000              MOVS     r0,#0
;;;227    }
000020  bd70              POP      {r4-r6,pc}
;;;228    
                          ENDP

000022  0000              DCW      0x0000
                  |L7.36|
000024  46494c45          DCB      "FILE*",0
000028  2a00    
00002a  00                DCB      0
00002b  00                DCB      0

                          AREA ||i.f_lines||, CODE, READONLY, ALIGN=1

                  f_lines PROC
;;;348    
;;;349    static int f_lines (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;350      tofile(L);  /* check that it's a valid file handle */
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       tofile
;;;351      aux_lines(L, 0);
00000a  2100              MOVS     r1,#0
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       aux_lines
;;;352      return 1;
000012  2001              MOVS     r0,#1
;;;353    }
000014  bd10              POP      {r4,pc}
;;;354    
                          ENDP


                          AREA ||i.f_read||, CODE, READONLY, ALIGN=1

                  f_read PROC
;;;583    
;;;584    static int f_read (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;585      return g_read(L, tofile(L), 2);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       tofile
00000a  4605              MOV      r5,r0
00000c  2202              MOVS     r2,#2
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       g_read
;;;586    }
000016  bd70              POP      {r4-r6,pc}
;;;587    
                          ENDP


                          AREA ||i.f_seek||, CODE, READONLY, ALIGN=2

                  f_seek PROC
;;;655    
;;;656    static int f_seek (lua_State *L) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4682              MOV      r10,r0
;;;657      static const int mode[] = {SEEK_SET, SEEK_CUR, SEEK_END};
;;;658      static const char *const modenames[] = {"set", "cur", "end", NULL};
;;;659      FILE *f = tofile(L);
000006  4650              MOV      r0,r10
000008  f7fffffe          BL       tofile
00000c  4683              MOV      r11,r0
;;;660      int op = luaL_checkoption(L, 2, "cur", modenames);
00000e  4b1c              LDR      r3,|L10.128|
000010  a21c              ADR      r2,|L10.132|
000012  2102              MOVS     r1,#2
000014  4650              MOV      r0,r10
000016  f7fffffe          BL       luaL_checkoption
00001a  4681              MOV      r9,r0
;;;661      lua_Integer p3 = luaL_optinteger(L, 3, 0);
00001c  2200              MOVS     r2,#0
00001e  4613              MOV      r3,r2
000020  2103              MOVS     r1,#3
000022  4650              MOV      r0,r10
000024  f7fffffe          BL       luaL_optinteger
000028  4605              MOV      r5,r0
00002a  460e              MOV      r6,r1
;;;662      l_seeknum offset = (l_seeknum)p3;
00002c  462c              MOV      r4,r5
;;;663      luaL_argcheck(L, (lua_Integer)offset == p3, 3,
00002e  17e0              ASRS     r0,r4,#31
000030  462c              MOV      r4,r5
000032  ea850104          EOR      r1,r5,r4
000036  4070              EORS     r0,r0,r6
000038  4301              ORRS     r1,r1,r0
00003a  d004              BEQ      |L10.70|
00003c  a212              ADR      r2,|L10.136|
00003e  2103              MOVS     r1,#3
000040  4650              MOV      r0,r10
000042  f7fffffe          BL       luaL_argerror
                  |L10.70|
;;;664                      "not an integer in proper range");
;;;665      op = l_fseek(f, offset, mode[op]);
000046  4818              LDR      r0,|L10.168|
000048  f8502029          LDR      r2,[r0,r9,LSL #2]
00004c  4621              MOV      r1,r4
00004e  4658              MOV      r0,r11
000050  f7fffffe          BL       fseek
000054  4681              MOV      r9,r0
;;;666      if (op)
000056  f1b90f00          CMP      r9,#0
00005a  d006              BEQ      |L10.106|
;;;667        return luaL_fileresult(L, 0, NULL);  /* error */
00005c  2200              MOVS     r2,#0
00005e  4611              MOV      r1,r2
000060  4650              MOV      r0,r10
000062  f7fffffe          BL       luaL_fileresult
                  |L10.102|
;;;668      else {
;;;669        lua_pushinteger(L, (lua_Integer)l_ftell(f));
;;;670        return 1;
;;;671      }
;;;672    }
000066  e8bd9ff0          POP      {r4-r12,pc}
                  |L10.106|
00006a  4658              MOV      r0,r11                ;669
00006c  f7fffffe          BL       ftell
000070  17c3              ASRS     r3,r0,#31             ;669
000072  4607              MOV      r7,r0                 ;669
000074  463a              MOV      r2,r7                 ;669
000076  4650              MOV      r0,r10                ;669
000078  f7fffffe          BL       lua_pushinteger
00007c  2001              MOVS     r0,#1                 ;670
00007e  e7f2              B        |L10.102|
;;;673    
                          ENDP

                  |L10.128|
                          DCD      modenames
                  |L10.132|
000084  63757200          DCB      "cur",0
                  |L10.136|
000088  6e6f7420          DCB      "not an integer in proper range",0
00008c  616e2069
000090  6e746567
000094  65722069
000098  6e207072
00009c  6f706572
0000a0  2072616e
0000a4  676500  
0000a7  00                DCB      0
                  |L10.168|
                          DCD      mode

                          AREA ||i.f_setvbuf||, CODE, READONLY, ALIGN=2

                  f_setvbuf PROC
;;;674    
;;;675    static int f_setvbuf (lua_State *L) {
000000  e92d42f0          PUSH     {r4-r7,r9,lr}
000004  4604              MOV      r4,r0
;;;676      static const int mode[] = {_IONBF, _IOFBF, _IOLBF};
;;;677      static const char *const modenames[] = {"no", "full", "line", NULL};
;;;678      FILE *f = tofile(L);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       tofile
00000c  4681              MOV      r9,r0
;;;679      int op = luaL_checkoption(L, 2, NULL, modenames);
00000e  4b11              LDR      r3,|L11.84|
000010  2200              MOVS     r2,#0
000012  2102              MOVS     r1,#2
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       luaL_checkoption
00001a  4605              MOV      r5,r0
;;;680      lua_Integer sz = luaL_optinteger(L, 3, LUAL_BUFFERSIZE);
00001c  f44f5280          MOV      r2,#0x1000
000020  2300              MOVS     r3,#0
000022  2103              MOVS     r1,#3
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       luaL_optinteger
00002a  4607              MOV      r7,r0
;;;681      int res = setvbuf(f, NULL, mode[op], (size_t)sz);
00002c  480a              LDR      r0,|L11.88|
00002e  f8502025          LDR      r2,[r0,r5,LSL #2]
000032  463b              MOV      r3,r7
000034  2100              MOVS     r1,#0
000036  4648              MOV      r0,r9
000038  f7fffffe          BL       setvbuf
00003c  4606              MOV      r6,r0
;;;682      return luaL_fileresult(L, res == 0, NULL);
00003e  b90e              CBNZ     r6,|L11.68|
000040  2001              MOVS     r0,#1
000042  e000              B        |L11.70|
                  |L11.68|
000044  2000              MOVS     r0,#0
                  |L11.70|
000046  4601              MOV      r1,r0
000048  2200              MOVS     r2,#0
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       luaL_fileresult
;;;683    }
000050  e8bd82f0          POP      {r4-r7,r9,pc}
;;;684    
                          ENDP

                  |L11.84|
                          DCD      |symbol_number.136|
                  |L11.88|
                          DCD      |symbol_number.135|

                          AREA ||i.f_tostring||, CODE, READONLY, ALIGN=2

                  f_tostring PROC
;;;163    
;;;164    static int f_tostring (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;165      LStream *p = tolstream(L);
000004  a209              ADR      r2,|L12.44|
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       luaL_checkudata
00000e  4604              MOV      r4,r0
;;;166      if (isclosed(p))
000010  6860              LDR      r0,[r4,#4]
000012  b920              CBNZ     r0,|L12.30|
;;;167        lua_pushliteral(L, "file (closed)");
000014  a107              ADR      r1,|L12.52|
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       lua_pushstring
00001c  e004              B        |L12.40|
                  |L12.30|
;;;168      else
;;;169        lua_pushfstring(L, "file (%p)", p->f);
00001e  a109              ADR      r1,|L12.68|
000020  4628              MOV      r0,r5
000022  6822              LDR      r2,[r4,#0]
000024  f7fffffe          BL       lua_pushfstring
                  |L12.40|
;;;170      return 1;
000028  2001              MOVS     r0,#1
;;;171    }
00002a  bd70              POP      {r4-r6,pc}
;;;172    
                          ENDP

                  |L12.44|
00002c  46494c45          DCB      "FILE*",0
000030  2a00    
000032  00                DCB      0
000033  00                DCB      0
                  |L12.52|
000034  66696c65          DCB      "file (closed)",0
000038  2028636c
00003c  6f736564
000040  2900    
000042  00                DCB      0
000043  00                DCB      0
                  |L12.68|
000044  66696c65          DCB      "file (%p)",0
000048  20282570
00004c  2900    
00004e  00                DCB      0
00004f  00                DCB      0

                          AREA ||i.f_write||, CODE, READONLY, ALIGN=1

                  f_write PROC
;;;648    
;;;649    static int f_write (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;650      FILE *f = tofile(L);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       tofile
00000a  4605              MOV      r5,r0
;;;651      lua_pushvalue(L, 1);  /* push file at the stack top (to be returned) */
00000c  2101              MOVS     r1,#1
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       lua_pushvalue
;;;652      return g_write(L, f, 2);
000014  2202              MOVS     r2,#2
000016  4629              MOV      r1,r5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       g_write
;;;653    }
00001e  bd70              POP      {r4-r6,pc}
;;;654    
                          ENDP


                          AREA ||i.g_iofile||, CODE, READONLY, ALIGN=2

                  g_iofile PROC
;;;302    
;;;303    static int g_iofile (lua_State *L, const char *f, const char *mode) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
;;;304      if (!lua_isnoneornil(L, 1)) {
00000a  2101              MOVS     r1,#1
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lua_type
000012  2800              CMP      r0,#0
000014  dd19              BLE      |L14.74|
;;;305        const char *filename = lua_tostring(L, 1);
000016  2200              MOVS     r2,#0
000018  2101              MOVS     r1,#1
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       lua_tolstring
000020  4605              MOV      r5,r0
;;;306        if (filename)
000022  b12d              CBZ      r5,|L14.48|
;;;307          opencheck(L, filename, mode);
000024  463a              MOV      r2,r7
000026  4629              MOV      r1,r5
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       opencheck
00002e  e006              B        |L14.62|
                  |L14.48|
;;;308        else {
;;;309          tofile(L);  /* check that it's a valid file handle */
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       tofile
;;;310          lua_pushvalue(L, 1);
000036  2101              MOVS     r1,#1
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       lua_pushvalue
                  |L14.62|
;;;311        }
;;;312        lua_setfield(L, LUA_REGISTRYINDEX, f);
00003e  4622              MOV      r2,r4
000040  4906              LDR      r1,|L14.92|
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       lua_setfield
;;;313      }
000048  bf00              NOP      
                  |L14.74|
;;;314      /* return current value */
;;;315      lua_getfield(L, LUA_REGISTRYINDEX, f);
00004a  4622              MOV      r2,r4
00004c  4903              LDR      r1,|L14.92|
00004e  4630              MOV      r0,r6
000050  f7fffffe          BL       lua_getfield
;;;316      return 1;
000054  2001              MOVS     r0,#1
;;;317    }
000056  e8bd81f0          POP      {r4-r8,pc}
;;;318    
                          ENDP

00005a  0000              DCW      0x0000
                  |L14.92|
                          DCD      0xfff0b9d8

                          AREA ||i.g_read||, CODE, READONLY, ALIGN=2

                  g_read PROC
;;;528    
;;;529    static int g_read (lua_State *L, FILE *f, int first) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4682              MOV      r10,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
;;;530      int nargs = lua_gettop(L) - 1;
00000a  4650              MOV      r0,r10
00000c  f7fffffe          BL       lua_gettop
000010  1e47              SUBS     r7,r0,#1
;;;531      int n, success;
;;;532      clearerr(f);
000012  4648              MOV      r0,r9
000014  f7fffffe          BL       clearerr
;;;533      if (nargs == 0) {  /* no arguments? */
000018  b93f              CBNZ     r7,|L15.42|
;;;534        success = read_line(L, f, 1);
00001a  2201              MOVS     r2,#1
00001c  4649              MOV      r1,r9
00001e  4650              MOV      r0,r10
000020  f7fffffe          BL       read_line
000024  4605              MOV      r5,r0
;;;535        n = first + 1;  /* to return 1 result */
000026  1c74              ADDS     r4,r6,#1
000028  e062              B        |L15.240|
                  |L15.42|
;;;536      }
;;;537      else {
;;;538        /* ensure stack space for all results and for auxlib's buffer */
;;;539        luaL_checkstack(L, nargs+LUA_MINSTACK, "too many arguments");
00002a  a23c              ADR      r2,|L15.284|
00002c  f1070114          ADD      r1,r7,#0x14
000030  4650              MOV      r0,r10
000032  f7fffffe          BL       luaL_checkstack
;;;540        success = 1;
000036  2501              MOVS     r5,#1
;;;541        for (n = first; nargs-- && success; n++) {
000038  4634              MOV      r4,r6
00003a  e053              B        |L15.228|
                  |L15.60|
;;;542          if (lua_type(L, n) == LUA_TNUMBER) {
00003c  4621              MOV      r1,r4
00003e  4650              MOV      r0,r10
000040  f7fffffe          BL       lua_type
000044  2803              CMP      r0,#3
000046  d113              BNE      |L15.112|
;;;543            size_t l = (size_t)luaL_checkinteger(L, n);
000048  4621              MOV      r1,r4
00004a  4650              MOV      r0,r10
00004c  f7fffffe          BL       luaL_checkinteger
000050  4680              MOV      r8,r0
;;;544            success = (l == 0) ? test_eof(L, f) : read_chars(L, f, l);
000052  f1b80f00          CMP      r8,#0
000056  d104              BNE      |L15.98|
000058  4649              MOV      r1,r9
00005a  4650              MOV      r0,r10
00005c  f7fffffe          BL       test_eof
000060  e004              B        |L15.108|
                  |L15.98|
000062  4642              MOV      r2,r8
000064  4649              MOV      r1,r9
000066  4650              MOV      r0,r10
000068  f7fffffe          BL       read_chars
                  |L15.108|
00006c  4605              MOV      r5,r0
;;;545          }
00006e  e038              B        |L15.226|
                  |L15.112|
;;;546          else {
;;;547            const char *p = luaL_checkstring(L, n);
000070  2200              MOVS     r2,#0
000072  4621              MOV      r1,r4
000074  4650              MOV      r0,r10
000076  f7fffffe          BL       luaL_checklstring
00007a  4680              MOV      r8,r0
;;;548            if (*p == '*') p++;  /* skip optional '*' (for compatibility) */
00007c  f8980000          LDRB     r0,[r8,#0]
000080  282a              CMP      r0,#0x2a
000082  d101              BNE      |L15.136|
000084  f1080801          ADD      r8,r8,#1
                  |L15.136|
;;;549            switch (*p) {
000088  f9980000          LDRSB    r0,[r8,#0]
00008c  284c              CMP      r0,#0x4c
00008e  d012              BEQ      |L15.182|
000090  2861              CMP      r0,#0x61
000092  d017              BEQ      |L15.196|
000094  286c              CMP      r0,#0x6c
000096  d007              BEQ      |L15.168|
000098  286e              CMP      r0,#0x6e
00009a  d119              BNE      |L15.208|
;;;550              case 'n':  /* number */
;;;551                success = read_number(L, f);
00009c  4649              MOV      r1,r9
00009e  4650              MOV      r0,r10
0000a0  f7fffffe          BL       read_number
0000a4  4605              MOV      r5,r0
;;;552                break;
0000a6  e01a              B        |L15.222|
                  |L15.168|
;;;553              case 'l':  /* line */
;;;554                success = read_line(L, f, 1);
0000a8  2201              MOVS     r2,#1
0000aa  4649              MOV      r1,r9
0000ac  4650              MOV      r0,r10
0000ae  f7fffffe          BL       read_line
0000b2  4605              MOV      r5,r0
;;;555                break;
0000b4  e013              B        |L15.222|
                  |L15.182|
;;;556              case 'L':  /* line with end-of-line */
;;;557                success = read_line(L, f, 0);
0000b6  2200              MOVS     r2,#0
0000b8  4649              MOV      r1,r9
0000ba  4650              MOV      r0,r10
0000bc  f7fffffe          BL       read_line
0000c0  4605              MOV      r5,r0
;;;558                break;
0000c2  e00c              B        |L15.222|
                  |L15.196|
;;;559              case 'a':  /* file */
;;;560                read_all(L, f);  /* read entire file */
0000c4  4649              MOV      r1,r9
0000c6  4650              MOV      r0,r10
0000c8  f7fffffe          BL       read_all
;;;561                success = 1; /* always success */
0000cc  2501              MOVS     r5,#1
;;;562                break;
0000ce  e006              B        |L15.222|
                  |L15.208|
;;;563              default:
;;;564                return luaL_argerror(L, n, "invalid format");
0000d0  a217              ADR      r2,|L15.304|
0000d2  4621              MOV      r1,r4
0000d4  4650              MOV      r0,r10
0000d6  f7fffffe          BL       luaL_argerror
                  |L15.218|
;;;565            }
;;;566          }
;;;567        }
;;;568      }
;;;569      if (ferror(f))
;;;570        return luaL_fileresult(L, 0, NULL);
;;;571      if (!success) {
;;;572        lua_pop(L, 1);  /* remove last result */
;;;573        lua_pushnil(L);  /* push nil instead */
;;;574      }
;;;575      return n - first;
;;;576    }
0000da  e8bd87f0          POP      {r4-r10,pc}
                  |L15.222|
0000de  bf00              NOP                            ;552
0000e0  bf00              NOP                            ;566
                  |L15.226|
0000e2  1c64              ADDS     r4,r4,#1              ;541
                  |L15.228|
0000e4  1e38              SUBS     r0,r7,#0              ;541
0000e6  f1a70701          SUB      r7,r7,#1              ;541
0000ea  d001              BEQ      |L15.240|
0000ec  2d00              CMP      r5,#0                 ;541
0000ee  d1a5              BNE      |L15.60|
                  |L15.240|
0000f0  4648              MOV      r0,r9                 ;569
0000f2  f7fffffe          BL       ferror
0000f6  b128              CBZ      r0,|L15.260|
0000f8  2200              MOVS     r2,#0                 ;570
0000fa  4611              MOV      r1,r2                 ;570
0000fc  4650              MOV      r0,r10                ;570
0000fe  f7fffffe          BL       luaL_fileresult
000102  e7ea              B        |L15.218|
                  |L15.260|
000104  b93d              CBNZ     r5,|L15.278|
000106  f06f0101          MVN      r1,#1                 ;572
00010a  4650              MOV      r0,r10                ;572
00010c  f7fffffe          BL       lua_settop
000110  4650              MOV      r0,r10                ;573
000112  f7fffffe          BL       lua_pushnil
                  |L15.278|
000116  1ba0              SUBS     r0,r4,r6              ;575
000118  e7df              B        |L15.218|
;;;577    
                          ENDP

00011a  0000              DCW      0x0000
                  |L15.284|
00011c  746f6f20          DCB      "too many arguments",0
000120  6d616e79
000124  20617267
000128  756d656e
00012c  747300  
00012f  00                DCB      0
                  |L15.304|
000130  696e7661          DCB      "invalid format",0
000134  6c696420
000138  666f726d
00013c  617400  
00013f  00                DCB      0

                          AREA ||i.g_write||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_lld
                          REQUIRE _printf_longlong_dec
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_g
                          REQUIRE _printf_fp_dec
                  g_write PROC
;;;619    
;;;620    static int g_write (lua_State *L, FILE *f, int arg) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4683              MOV      r11,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;621      int nargs = lua_gettop(L) - arg;
00000a  4658              MOV      r0,r11
00000c  f7fffffe          BL       lua_gettop
000010  eba00904          SUB      r9,r0,r4
;;;622      int status = 1;
000014  2501              MOVS     r5,#1
;;;623      for (; nargs--; arg++) {
000016  e043              B        |L16.160|
                  |L16.24|
;;;624        if (lua_type(L, arg) == LUA_TNUMBER) {
000018  4621              MOV      r1,r4
00001a  4658              MOV      r0,r11
00001c  f7fffffe          BL       lua_type
000020  2803              CMP      r0,#3
000022  d127              BNE      |L16.116|
;;;625          /* optimization: could be done exactly as for strings */
;;;626          int len = lua_isinteger(L, arg)
000024  4621              MOV      r1,r4
000026  4658              MOV      r0,r11
000028  f7fffffe          BL       lua_isinteger
00002c  b160              CBZ      r0,|L16.72|
;;;627                    ? fprintf(f, LUA_INTEGER_FMT,
00002e  2200              MOVS     r2,#0
000030  4621              MOV      r1,r4
000032  4658              MOV      r0,r11
000034  f7fffffe          BL       lua_tointegerx
000038  4607              MOV      r7,r0
00003a  463a              MOV      r2,r7
00003c  460b              MOV      r3,r1
00003e  a120              ADR      r1,|L16.192|
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       __2fprintf
000046  e00b              B        |L16.96|
                  |L16.72|
;;;628                                 (LUAI_UACINT)lua_tointeger(L, arg))
;;;629                    : fprintf(f, LUA_NUMBER_FMT,
000048  2200              MOVS     r2,#0
00004a  4621              MOV      r1,r4
00004c  4658              MOV      r0,r11
00004e  f7fffffe          BL       lua_tonumberx
000052  4607              MOV      r7,r0
000054  463a              MOV      r2,r7
000056  460b              MOV      r3,r1
000058  a11b              ADR      r1,|L16.200|
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       __2fprintf
                  |L16.96|
000060  4682              MOV      r10,r0
;;;630                                 (LUAI_UACNUMBER)lua_tonumber(L, arg));
;;;631          status = status && (len > 0);
000062  b125              CBZ      r5,|L16.110|
000064  f1ba0f00          CMP      r10,#0
000068  dd01              BLE      |L16.110|
00006a  2001              MOVS     r0,#1
00006c  e000              B        |L16.112|
                  |L16.110|
00006e  2000              MOVS     r0,#0
                  |L16.112|
000070  4605              MOV      r5,r0
;;;632        }
000072  e014              B        |L16.158|
                  |L16.116|
;;;633        else {
;;;634          size_t l;
;;;635          const char *s = luaL_checklstring(L, arg, &l);
000074  466a              MOV      r2,sp
000076  4621              MOV      r1,r4
000078  4658              MOV      r0,r11
00007a  f7fffffe          BL       luaL_checklstring
00007e  4607              MOV      r7,r0
;;;636          status = status && (fwrite(s, sizeof(char), l, f) == l);
000080  b155              CBZ      r5,|L16.152|
000082  4633              MOV      r3,r6
000084  2101              MOVS     r1,#1
000086  4638              MOV      r0,r7
000088  9a00              LDR      r2,[sp,#0]
00008a  f7fffffe          BL       fwrite
00008e  9900              LDR      r1,[sp,#0]
000090  4288              CMP      r0,r1
000092  d101              BNE      |L16.152|
000094  2001              MOVS     r0,#1
000096  e000              B        |L16.154|
                  |L16.152|
000098  2000              MOVS     r0,#0
                  |L16.154|
00009a  4605              MOV      r5,r0
;;;637        }
00009c  bf00              NOP      
                  |L16.158|
00009e  1c64              ADDS     r4,r4,#1              ;623
                  |L16.160|
0000a0  f1b90000          SUBS     r0,r9,#0              ;623
0000a4  f1a90901          SUB      r9,r9,#1              ;623
0000a8  d1b6              BNE      |L16.24|
;;;638      }
;;;639      if (status) return 1;  /* file handle already on stack top */
0000aa  b115              CBZ      r5,|L16.178|
0000ac  2001              MOVS     r0,#1
                  |L16.174|
;;;640      else return luaL_fileresult(L, status, NULL);
;;;641    }
0000ae  e8bd8ff8          POP      {r3-r11,pc}
                  |L16.178|
0000b2  2200              MOVS     r2,#0                 ;640
0000b4  4629              MOV      r1,r5                 ;640
0000b6  4658              MOV      r0,r11                ;640
0000b8  f7fffffe          BL       luaL_fileresult
0000bc  e7f7              B        |L16.174|
;;;642    
                          ENDP

0000be  0000              DCW      0x0000
                  |L16.192|
0000c0  256c6c64          DCB      "%lld",0
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L16.200|
0000c8  252e3134          DCB      "%.14g",0
0000cc  6700    
0000ce  00                DCB      0
0000cf  00                DCB      0

                          AREA ||i.getiofile||, CODE, READONLY, ALIGN=2

                  getiofile PROC
;;;292    
;;;293    static FILE *getiofile (lua_State *L, const char *findex) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;294      LStream *p;
;;;295      lua_getfield(L, LUA_REGISTRYINDEX, findex);
000006  4622              MOV      r2,r4
000008  4909              LDR      r1,|L17.48|
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       lua_getfield
;;;296      p = (LStream *)lua_touserdata(L, -1);
000010  f04f31ff          MOV      r1,#0xffffffff
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       lua_touserdata
00001a  4605              MOV      r5,r0
;;;297      if (isclosed(p))
00001c  6868              LDR      r0,[r5,#4]
00001e  b920              CBNZ     r0,|L17.42|
;;;298        luaL_error(L, "standard %s file is closed", findex + IOPREF_LEN);
000020  1d22              ADDS     r2,r4,#4
000022  a104              ADR      r1,|L17.52|
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       luaL_error
                  |L17.42|
;;;299      return p->f;
00002a  6828              LDR      r0,[r5,#0]
;;;300    }
00002c  bd70              POP      {r4-r6,pc}
;;;301    
                          ENDP

00002e  0000              DCW      0x0000
                  |L17.48|
                          DCD      0xfff0b9d8
                  |L17.52|
000034  7374616e          DCB      "standard %s file is closed",0
000038  64617264
00003c  20257320
000040  66696c65
000044  20697320
000048  636c6f73
00004c  656400  
00004f  00                DCB      0

                          AREA ||i.io_close||, CODE, READONLY, ALIGN=2

                  io_close PROC
;;;214    
;;;215    static int io_close (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;216      if (lua_isnone(L, 1))  /* no argument? */
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       lua_type
00000c  1c40              ADDS     r0,r0,#1
00000e  b920              CBNZ     r0,|L18.26|
;;;217        lua_getfield(L, LUA_REGISTRYINDEX, IO_OUTPUT);  /* use standard output */
000010  a204              ADR      r2,|L18.36|
000012  4907              LDR      r1,|L18.48|
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       lua_getfield
                  |L18.26|
;;;218      return f_close(L);
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       f_close
;;;219    }
000020  bd10              POP      {r4,pc}
;;;220    
                          ENDP

000022  0000              DCW      0x0000
                  |L18.36|
000024  5f494f5f          DCB      "_IO_output",0
000028  6f757470
00002c  757400  
00002f  00                DCB      0
                  |L18.48|
                          DCD      0xfff0b9d8

                          AREA ||i.io_fclose||, CODE, READONLY, ALIGN=2

                  io_fclose PROC
;;;232    */
;;;233    static int io_fclose (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;234      LStream *p = tolstream(L);
000004  a209              ADR      r2,|L19.44|
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checkudata
00000e  4605              MOV      r5,r0
;;;235      int res = fclose(p->f);
000010  6828              LDR      r0,[r5,#0]
000012  f7fffffe          BL       fclose
000016  4606              MOV      r6,r0
;;;236      return luaL_fileresult(L, (res == 0), NULL);
000018  b90e              CBNZ     r6,|L19.30|
00001a  2001              MOVS     r0,#1
00001c  e000              B        |L19.32|
                  |L19.30|
00001e  2000              MOVS     r0,#0
                  |L19.32|
000020  4601              MOV      r1,r0
000022  2200              MOVS     r2,#0
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       luaL_fileresult
;;;237    }
00002a  bd70              POP      {r4-r6,pc}
;;;238    
                          ENDP

                  |L19.44|
00002c  46494c45          DCB      "FILE*",0
000030  2a00    
000032  00                DCB      0
000033  00                DCB      0

                          AREA ||i.io_flush||, CODE, READONLY, ALIGN=2

                  io_flush PROC
;;;686    
;;;687    static int io_flush (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;688      return luaL_fileresult(L, fflush(getiofile(L, IO_OUTPUT)) == 0, NULL);
000004  a108              ADR      r1,|L20.40|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       getiofile
00000c  4606              MOV      r6,r0
00000e  f7fffffe          BL       fflush
000012  b908              CBNZ     r0,|L20.24|
000014  2001              MOVS     r0,#1
000016  e000              B        |L20.26|
                  |L20.24|
000018  2000              MOVS     r0,#0
                  |L20.26|
00001a  4605              MOV      r5,r0
00001c  2200              MOVS     r2,#0
00001e  4629              MOV      r1,r5
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       luaL_fileresult
;;;689    }
000026  bd70              POP      {r4-r6,pc}
;;;690    
                          ENDP

                  |L20.40|
000028  5f494f5f          DCB      "_IO_output",0
00002c  6f757470
000030  757400  
000033  00                DCB      0

                          AREA ||i.io_input||, CODE, READONLY, ALIGN=2

                  io_input PROC
;;;319    
;;;320    static int io_input (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;321      return g_iofile(L, IO_INPUT, "r");
000004  a202              ADR      r2,|L21.16|
000006  a103              ADR      r1,|L21.20|
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       g_iofile
;;;322    }
00000e  bd10              POP      {r4,pc}
;;;323    
                          ENDP

                  |L21.16|
000010  7200              DCB      "r",0
000012  00                DCB      0
000013  00                DCB      0
                  |L21.20|
000014  5f494f5f          DCB      "_IO_input",0
000018  696e7075
00001c  7400    
00001e  00                DCB      0
00001f  00                DCB      0

                          AREA ||i.io_lines||, CODE, READONLY, ALIGN=2

                  io_lines PROC
;;;355    
;;;356    static int io_lines (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;357      int toclose;
;;;358      if (lua_isnone(L, 1)) lua_pushnil(L);  /* at least one argument */
000004  2101              MOVS     r1,#1
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       lua_type
00000c  1c40              ADDS     r0,r0,#1
00000e  b910              CBNZ     r0,|L22.22|
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       lua_pushnil
                  |L22.22|
;;;359      if (lua_isnil(L, 1)) {  /* no file name? */
000016  2101              MOVS     r1,#1
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       lua_type
00001e  b998              CBNZ     r0,|L22.72|
;;;360        lua_getfield(L, LUA_REGISTRYINDEX, IO_INPUT);  /* get default input */
000020  a218              ADR      r2,|L22.132|
000022  491b              LDR      r1,|L22.144|
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       lua_getfield
;;;361        lua_replace(L, 1);  /* put it at index 1 */
00002a  2201              MOVS     r2,#1
00002c  1e91              SUBS     r1,r2,#2
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       lua_copy
000034  f06f0101          MVN      r1,#1
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       lua_settop
;;;362        tofile(L);  /* check that it's a valid file handle */
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       tofile
;;;363        toclose = 0;  /* do not close it after iteration */
000044  2400              MOVS     r4,#0
000046  e016              B        |L22.118|
                  |L22.72|
;;;364      }
;;;365      else {  /* open a new file */
;;;366        const char *filename = luaL_checkstring(L, 1);
000048  2200              MOVS     r2,#0
00004a  2101              MOVS     r1,#1
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       luaL_checklstring
000052  4606              MOV      r6,r0
;;;367        opencheck(L, filename, "r");
000054  a20f              ADR      r2,|L22.148|
000056  4631              MOV      r1,r6
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       opencheck
;;;368        lua_replace(L, 1);  /* put file at index 1 */
00005e  2201              MOVS     r2,#1
000060  1e91              SUBS     r1,r2,#2
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       lua_copy
000068  f06f0101          MVN      r1,#1
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       lua_settop
;;;369        toclose = 1;  /* close it after iteration */
000072  2401              MOVS     r4,#1
;;;370      }
000074  bf00              NOP      
                  |L22.118|
;;;371      aux_lines(L, toclose);
000076  4621              MOV      r1,r4
000078  4628              MOV      r0,r5
00007a  f7fffffe          BL       aux_lines
;;;372      return 1;
00007e  2001              MOVS     r0,#1
;;;373    }
000080  bd70              POP      {r4-r6,pc}
;;;374    
                          ENDP

000082  0000              DCW      0x0000
                  |L22.132|
000084  5f494f5f          DCB      "_IO_input",0
000088  696e7075
00008c  7400    
00008e  00                DCB      0
00008f  00                DCB      0
                  |L22.144|
                          DCD      0xfff0b9d8
                  |L22.148|
000094  7200              DCB      "r",0
000096  00                DCB      0
000097  00                DCB      0

                          AREA ||i.io_noclose||, CODE, READONLY, ALIGN=2

                  io_noclose PROC
;;;744    */
;;;745    static int io_noclose (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;746      LStream *p = tolstream(L);
000004  a208              ADR      r2,|L23.40|
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checkudata
00000e  4605              MOV      r5,r0
;;;747      p->closef = &io_noclose;  /* keep file opened */
000010  4807              LDR      r0,|L23.48|
000012  6068              STR      r0,[r5,#4]
;;;748      lua_pushnil(L);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       lua_pushnil
;;;749      lua_pushliteral(L, "cannot close standard file");
00001a  a106              ADR      r1,|L23.52|
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       lua_pushstring
;;;750      return 2;
000022  2002              MOVS     r0,#2
;;;751    }
000024  bd70              POP      {r4-r6,pc}
;;;752    
                          ENDP

000026  0000              DCW      0x0000
                  |L23.40|
000028  46494c45          DCB      "FILE*",0
00002c  2a00    
00002e  00                DCB      0
00002f  00                DCB      0
                  |L23.48|
                          DCD      io_noclose
                  |L23.52|
000034  63616e6e          DCB      "cannot close standard file",0
000038  6f742063
00003c  6c6f7365
000040  20737461
000044  6e646172
000048  64206669
00004c  6c6500  
00004f  00                DCB      0

                          AREA ||i.io_open||, CODE, READONLY, ALIGN=2

                  io_open PROC
;;;255    
;;;256    static int io_open (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
;;;257      const char *filename = luaL_checkstring(L, 1);
000006  2200              MOVS     r2,#0
000008  2101              MOVS     r1,#1
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       luaL_checklstring
000010  4680              MOV      r8,r0
;;;258      const char *mode = luaL_optstring(L, 2, "r");
000012  2300              MOVS     r3,#0
000014  a211              ADR      r2,|L24.92|
000016  2102              MOVS     r1,#2
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       luaL_optlstring
00001e  4604              MOV      r4,r0
;;;259      LStream *p = newfile(L);
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       newfile
000026  4605              MOV      r5,r0
;;;260      const char *md = mode;  /* to traverse/check mode */
000028  4627              MOV      r7,r4
;;;261      luaL_argcheck(L, l_checkmode(md), 2, "invalid mode");
00002a  4638              MOV      r0,r7
00002c  f7fffffe          BL       l_checkmode
000030  b920              CBNZ     r0,|L24.60|
000032  a20b              ADR      r2,|L24.96|
000034  2102              MOVS     r1,#2
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       luaL_argerror
                  |L24.60|
;;;262      p->f = fopen(filename, mode);
00003c  4621              MOV      r1,r4
00003e  4640              MOV      r0,r8
000040  f7fffffe          BL       fopen
000044  6028              STR      r0,[r5,#0]
;;;263      return (p->f == NULL) ? luaL_fileresult(L, 0, filename) : 1;
000046  6828              LDR      r0,[r5,#0]
000048  b930              CBNZ     r0,|L24.88|
00004a  4642              MOV      r2,r8
00004c  2100              MOVS     r1,#0
00004e  4630              MOV      r0,r6
000050  f7fffffe          BL       luaL_fileresult
                  |L24.84|
;;;264    }
000054  e8bd81f0          POP      {r4-r8,pc}
                  |L24.88|
000058  2001              MOVS     r0,#1                 ;263
00005a  e7fb              B        |L24.84|
;;;265    
                          ENDP

                  |L24.92|
00005c  7200              DCB      "r",0
00005e  00                DCB      0
00005f  00                DCB      0
                  |L24.96|
000060  696e7661          DCB      "invalid mode",0
000064  6c696420
000068  6d6f6465
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0

                          AREA ||i.io_output||, CODE, READONLY, ALIGN=2

                  io_output PROC
;;;324    
;;;325    static int io_output (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;326      return g_iofile(L, IO_OUTPUT, "w");
000004  a202              ADR      r2,|L25.16|
000006  a103              ADR      r1,|L25.20|
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       g_iofile
;;;327    }
00000e  bd10              POP      {r4,pc}
;;;328    
                          ENDP

                  |L25.16|
000010  7700              DCB      "w",0
000012  00                DCB      0
000013  00                DCB      0
                  |L25.20|
000014  5f494f5f          DCB      "_IO_output",0
000018  6f757470
00001c  757400  
00001f  00                DCB      0

                          AREA ||i.io_pclose||, CODE, READONLY, ALIGN=2

                  io_pclose PROC
;;;269    */
;;;270    static int io_pclose (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;271      LStream *p = tolstream(L);
000004  a205              ADR      r2,|L26.28|
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checkudata
00000e  4605              MOV      r5,r0
;;;272      return luaL_execresult(L, l_pclose(L, p->f));
000010  f04f31ff          MOV      r1,#0xffffffff
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       luaL_execresult
;;;273    }
00001a  bd70              POP      {r4-r6,pc}
;;;274    
                          ENDP

                  |L26.28|
00001c  46494c45          DCB      "FILE*",0
000020  2a00    
000022  00                DCB      0
000023  00                DCB      0

                          AREA ||i.io_popen||, CODE, READONLY, ALIGN=2

                  io_popen PROC
;;;275    
;;;276    static int io_popen (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
;;;277      const char *filename = luaL_checkstring(L, 1);
000006  2200              MOVS     r2,#0
000008  2101              MOVS     r1,#1
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       luaL_checklstring
000010  4606              MOV      r6,r0
;;;278      const char *mode = luaL_optstring(L, 2, "r");
000012  2300              MOVS     r3,#0
000014  a20e              ADR      r2,|L27.80|
000016  2102              MOVS     r1,#2
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       luaL_optlstring
00001e  4607              MOV      r7,r0
;;;279      LStream *p = newprefile(L);
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       newprefile
000026  4604              MOV      r4,r0
;;;280      p->f = l_popen(L, filename, mode);
000028  a10a              ADR      r1,|L27.84|
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       luaL_error
000030  2000              MOVS     r0,#0
000032  6020              STR      r0,[r4,#0]
;;;281      p->closef = &io_pclose;
000034  480d              LDR      r0,|L27.108|
000036  6060              STR      r0,[r4,#4]
;;;282      return (p->f == NULL) ? luaL_fileresult(L, 0, filename) : 1;
000038  6820              LDR      r0,[r4,#0]
00003a  b930              CBNZ     r0,|L27.74|
00003c  4632              MOV      r2,r6
00003e  2100              MOVS     r1,#0
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       luaL_fileresult
                  |L27.70|
;;;283    }
000046  e8bd81f0          POP      {r4-r8,pc}
                  |L27.74|
00004a  2001              MOVS     r0,#1                 ;282
00004c  e7fb              B        |L27.70|
;;;284    
                          ENDP

00004e  0000              DCW      0x0000
                  |L27.80|
000050  7200              DCB      "r",0
000052  00                DCB      0
000053  00                DCB      0
                  |L27.84|
000054  27706f70          DCB      "'popen' not supported",0
000058  656e2720
00005c  6e6f7420
000060  73757070
000064  6f727465
000068  6400    
00006a  00                DCB      0
00006b  00                DCB      0
                  |L27.108|
                          DCD      io_pclose

                          AREA ||i.io_read||, CODE, READONLY, ALIGN=2

                  io_read PROC
;;;578    
;;;579    static int io_read (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;580      return g_read(L, getiofile(L, IO_INPUT), 1);
000004  a105              ADR      r1,|L28.28|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       getiofile
00000c  4605              MOV      r5,r0
00000e  2201              MOVS     r2,#1
000010  4629              MOV      r1,r5
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       g_read
;;;581    }
000018  bd70              POP      {r4-r6,pc}
;;;582    
                          ENDP

00001a  0000              DCW      0x0000
                  |L28.28|
00001c  5f494f5f          DCB      "_IO_input",0
000020  696e7075
000024  7400    
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.io_readline||, CODE, READONLY, ALIGN=2

                  io_readline PROC
;;;588    
;;;589    static int io_readline (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
;;;590      LStream *p = (LStream *)lua_touserdata(L, lua_upvalueindex(1));
000006  492c              LDR      r1,|L29.184|
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       lua_touserdata
00000e  4606              MOV      r6,r0
;;;591      int i;
;;;592      int n = (int)lua_tointeger(L, lua_upvalueindex(2));
000010  2200              MOVS     r2,#0
000012  4929              LDR      r1,|L29.184|
000014  1e49              SUBS     r1,r1,#1
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       lua_tointegerx
00001c  4604              MOV      r4,r0
;;;593      if (isclosed(p))  /* file is already closed? */
00001e  6870              LDR      r0,[r6,#4]
000020  b928              CBNZ     r0,|L29.46|
;;;594        return luaL_error(L, "file is already closed");
000022  a126              ADR      r1,|L29.188|
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       luaL_error
                  |L29.42|
;;;595      lua_settop(L , 1);
;;;596      luaL_checkstack(L, n, "too many arguments");
;;;597      for (i = 1; i <= n; i++)  /* push arguments to 'g_read' */
;;;598        lua_pushvalue(L, lua_upvalueindex(3 + i));
;;;599      n = g_read(L, p->f, 2);  /* 'n' is number of results */
;;;600      lua_assert(n > 0);  /* should return at least a nil */
;;;601      if (lua_toboolean(L, -n))  /* read at least one value? */
;;;602        return n;  /* return them */
;;;603      else {  /* first result is nil: EOF or error */
;;;604        if (n > 1) {  /* is there error information? */
;;;605          /* 2nd result is error message */
;;;606          return luaL_error(L, "%s", lua_tostring(L, -n + 1));
;;;607        }
;;;608        if (lua_toboolean(L, lua_upvalueindex(3))) {  /* generator created file? */
;;;609          lua_settop(L, 0);
;;;610          lua_pushvalue(L, lua_upvalueindex(1));
;;;611          aux_close(L);  /* close it */
;;;612        }
;;;613        return 0;
;;;614      }
;;;615    }
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L29.46|
00002e  2101              MOVS     r1,#1                 ;595
000030  4638              MOV      r0,r7                 ;595
000032  f7fffffe          BL       lua_settop
000036  a227              ADR      r2,|L29.212|
000038  4621              MOV      r1,r4                 ;596
00003a  4638              MOV      r0,r7                 ;596
00003c  f7fffffe          BL       luaL_checkstack
000040  2501              MOVS     r5,#1                 ;597
000042  e007              B        |L29.84|
                  |L29.68|
000044  1ce8              ADDS     r0,r5,#3              ;598
000046  4a1c              LDR      r2,|L29.184|
000048  1c52              ADDS     r2,r2,#1              ;598
00004a  1a11              SUBS     r1,r2,r0              ;598
00004c  4638              MOV      r0,r7                 ;598
00004e  f7fffffe          BL       lua_pushvalue
000052  1c6d              ADDS     r5,r5,#1              ;597
                  |L29.84|
000054  42a5              CMP      r5,r4                 ;597
000056  ddf5              BLE      |L29.68|
000058  2202              MOVS     r2,#2                 ;599
00005a  4638              MOV      r0,r7                 ;599
00005c  6831              LDR      r1,[r6,#0]            ;599
00005e  f7fffffe          BL       g_read
000062  4604              MOV      r4,r0                 ;599
000064  4261              RSBS     r1,r4,#0              ;601
000066  4638              MOV      r0,r7                 ;601
000068  f7fffffe          BL       lua_toboolean
00006c  b108              CBZ      r0,|L29.114|
00006e  4620              MOV      r0,r4                 ;602
000070  e7db              B        |L29.42|
                  |L29.114|
000072  2c01              CMP      r4,#1                 ;604
000074  dd0c              BLE      |L29.144|
000076  2200              MOVS     r2,#0                 ;606
000078  f1c40101          RSB      r1,r4,#1              ;606
00007c  4638              MOV      r0,r7                 ;606
00007e  f7fffffe          BL       lua_tolstring
000082  4680              MOV      r8,r0                 ;606
000084  4642              MOV      r2,r8                 ;606
000086  a118              ADR      r1,|L29.232|
000088  4638              MOV      r0,r7                 ;606
00008a  f7fffffe          BL       luaL_error
00008e  e7cc              B        |L29.42|
                  |L29.144|
000090  4909              LDR      r1,|L29.184|
000092  1e89              SUBS     r1,r1,#2              ;608
000094  4638              MOV      r0,r7                 ;608
000096  f7fffffe          BL       lua_toboolean
00009a  b150              CBZ      r0,|L29.178|
00009c  2100              MOVS     r1,#0                 ;609
00009e  4638              MOV      r0,r7                 ;609
0000a0  f7fffffe          BL       lua_settop
0000a4  4904              LDR      r1,|L29.184|
0000a6  4638              MOV      r0,r7                 ;610
0000a8  f7fffffe          BL       lua_pushvalue
0000ac  4638              MOV      r0,r7                 ;611
0000ae  f7fffffe          BL       aux_close
                  |L29.178|
0000b2  2000              MOVS     r0,#0                 ;613
0000b4  e7b9              B        |L29.42|
;;;616    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L29.184|
                          DCD      0xfff0b9d7
                  |L29.188|
0000bc  66696c65          DCB      "file is already closed",0
0000c0  20697320
0000c4  616c7265
0000c8  61647920
0000cc  636c6f73
0000d0  656400  
0000d3  00                DCB      0
                  |L29.212|
0000d4  746f6f20          DCB      "too many arguments",0
0000d8  6d616e79
0000dc  20617267
0000e0  756d656e
0000e4  747300  
0000e7  00                DCB      0
                  |L29.232|
0000e8  257300            DCB      "%s",0
0000eb  00                DCB      0

                          AREA ||i.io_tmpfile||, CODE, READONLY, ALIGN=1

                  io_tmpfile PROC
;;;285    
;;;286    static int io_tmpfile (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;287      LStream *p = newfile(L);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       newfile
00000a  4604              MOV      r4,r0
;;;288      p->f = tmpfile();
00000c  f7fffffe          BL       tmpfile
000010  6020              STR      r0,[r4,#0]
;;;289      return (p->f == NULL) ? luaL_fileresult(L, 0, NULL) : 1;
000012  6820              LDR      r0,[r4,#0]
000014  b928              CBNZ     r0,|L30.34|
000016  2200              MOVS     r2,#0
000018  4611              MOV      r1,r2
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       luaL_fileresult
                  |L30.32|
;;;290    }
000020  bd70              POP      {r4-r6,pc}
                  |L30.34|
000022  2001              MOVS     r0,#1                 ;289
000024  e7fc              B        |L30.32|
;;;291    
                          ENDP


                          AREA ||i.io_type||, CODE, READONLY, ALIGN=2

                  io_type PROC
;;;149    
;;;150    static int io_type (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;151      LStream *p;
;;;152      luaL_checkany(L, 1);
000004  2101              MOVS     r1,#1
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       luaL_checkany
;;;153      p = (LStream *)luaL_testudata(L, 1, LUA_FILEHANDLE);
00000c  a20b              ADR      r2,|L31.60|
00000e  2101              MOVS     r1,#1
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       luaL_testudata
000016  4604              MOV      r4,r0
;;;154      if (p == NULL)
000018  b91c              CBNZ     r4,|L31.34|
;;;155        lua_pushnil(L);  /* not a file */
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       lua_pushnil
000020  e00a              B        |L31.56|
                  |L31.34|
;;;156      else if (isclosed(p))
000022  6860              LDR      r0,[r4,#4]
000024  b920              CBNZ     r0,|L31.48|
;;;157        lua_pushliteral(L, "closed file");
000026  a107              ADR      r1,|L31.68|
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       lua_pushstring
00002e  e003              B        |L31.56|
                  |L31.48|
;;;158      else
;;;159        lua_pushliteral(L, "file");
000030  a107              ADR      r1,|L31.80|
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       lua_pushstring
                  |L31.56|
;;;160      return 1;
000038  2001              MOVS     r0,#1
;;;161    }
00003a  bd70              POP      {r4-r6,pc}
;;;162    
                          ENDP

                  |L31.60|
00003c  46494c45          DCB      "FILE*",0
000040  2a00    
000042  00                DCB      0
000043  00                DCB      0
                  |L31.68|
000044  636c6f73          DCB      "closed file",0
000048  65642066
00004c  696c6500
                  |L31.80|
000050  66696c65          DCB      "file",0
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0

                          AREA ||i.io_write||, CODE, READONLY, ALIGN=2

                  io_write PROC
;;;643    
;;;644    static int io_write (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;645      return g_write(L, getiofile(L, IO_OUTPUT), 1);
000004  a105              ADR      r1,|L32.28|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       getiofile
00000c  4605              MOV      r5,r0
00000e  2201              MOVS     r2,#1
000010  4629              MOV      r1,r5
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       g_write
;;;646    }
000018  bd70              POP      {r4-r6,pc}
;;;647    
                          ENDP

00001a  0000              DCW      0x0000
                  |L32.28|
00001c  5f494f5f          DCB      "_IO_output",0
000020  6f757470
000024  757400  
000027  00                DCB      0

                          AREA ||i.l_checkmode||, CODE, READONLY, ALIGN=2

                  l_checkmode PROC
;;;39     /* Check whether 'mode' matches '[rwa]%+?[L_MODEEXT]*' */
;;;40     static int l_checkmode (const char *mode) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;41       return (*mode != '\0' && strchr("rwa", *(mode++)) != NULL &&
000004  7820              LDRB     r0,[r4,#0]
000006  b1b8              CBZ      r0,|L33.56|
000008  f9141b01          LDRSB    r1,[r4],#1
00000c  a00b              ADR      r0,|L33.60|
00000e  f7fffffe          BL       strchr
000012  b188              CBZ      r0,|L33.56|
;;;42              (*mode != '+' || (++mode, 1)) &&  /* skip if char is '+' */
000014  7820              LDRB     r0,[r4,#0]
000016  282b              CMP      r0,#0x2b
000018  d102              BNE      |L33.32|
00001a  1c64              ADDS     r4,r4,#1
00001c  2001              MOVS     r0,#1
00001e  b158              CBZ      r0,|L33.56|
                  |L33.32|
;;;43              (strspn(mode, L_MODEEXT) == strlen(mode)));  /* check extensions */
000020  a107              ADR      r1,|L33.64|
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       strspn
000028  4605              MOV      r5,r0
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       strlen
000030  4285              CMP      r5,r0
000032  d101              BNE      |L33.56|
000034  2001              MOVS     r0,#1                 ;41
                  |L33.54|
;;;44     }
000036  bd70              POP      {r4-r6,pc}
                  |L33.56|
000038  2000              MOVS     r0,#0                 ;41
00003a  e7fc              B        |L33.54|
;;;45     
                          ENDP

                  |L33.60|
00003c  72776100          DCB      "rwa",0
                  |L33.64|
000040  6200              DCB      "b",0
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.luaopen_io||, CODE, READONLY, ALIGN=2

                  luaopen_io PROC
;;;766    
;;;767    LUAMOD_API int luaopen_io (lua_State *L) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;768      luaL_newlib(L, iolib);  /* new module */
000004  2088              MOVS     r0,#0x88
000006  2200              MOVS     r2,#0
000008  4b12              LDR      r3,|L34.84|
00000a  9000              STR      r0,[sp,#0]
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       luaL_checkversion_
000012  220b              MOVS     r2,#0xb
000014  2100              MOVS     r1,#0
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       lua_createtable
00001c  2200              MOVS     r2,#0
00001e  490e              LDR      r1,|L34.88|
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       luaL_setfuncs
;;;769      createmeta(L);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       createmeta
;;;770      /* create (and set) default files */
;;;771      createstdfile(L, stdin, IO_INPUT, "stdin");
00002c  a30b              ADR      r3,|L34.92|
00002e  a20d              ADR      r2,|L34.100|
000030  490f              LDR      r1,|L34.112|
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       createstdfile
;;;772      createstdfile(L, stdout, IO_OUTPUT, "stdout");
000038  a30e              ADR      r3,|L34.116|
00003a  a210              ADR      r2,|L34.124|
00003c  4912              LDR      r1,|L34.136|
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       createstdfile
;;;773      createstdfile(L, stderr, NULL, "stderr");
000044  a311              ADR      r3,|L34.140|
000046  2200              MOVS     r2,#0
000048  4912              LDR      r1,|L34.148|
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       createstdfile
;;;774      return 1;
000050  2001              MOVS     r0,#1
;;;775    }
000052  bd38              POP      {r3-r5,pc}
;;;776    
                          ENDP

                  |L34.84|
                          DCD      0x407f8000
                  |L34.88|
                          DCD      iolib
                  |L34.92|
00005c  73746469          DCB      "stdin",0
000060  6e00    
000062  00                DCB      0
000063  00                DCB      0
                  |L34.100|
000064  5f494f5f          DCB      "_IO_input",0
000068  696e7075
00006c  7400    
00006e  00                DCB      0
00006f  00                DCB      0
                  |L34.112|
                          DCD      __stdin
                  |L34.116|
000074  7374646f          DCB      "stdout",0
000078  757400  
00007b  00                DCB      0
                  |L34.124|
00007c  5f494f5f          DCB      "_IO_output",0
000080  6f757470
000084  757400  
000087  00                DCB      0
                  |L34.136|
                          DCD      __stdout
                  |L34.140|
00008c  73746465          DCB      "stderr",0
000090  727200  
000093  00                DCB      0
                  |L34.148|
                          DCD      __stderr

                          AREA ||i.newfile||, CODE, READONLY, ALIGN=2

                  newfile PROC
;;;239    
;;;240    static LStream *newfile (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;241      LStream *p = newprefile(L);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       newprefile
00000a  4604              MOV      r4,r0
;;;242      p->f = NULL;
00000c  2000              MOVS     r0,#0
00000e  6020              STR      r0,[r4,#0]
;;;243      p->closef = &io_fclose;
000010  4801              LDR      r0,|L35.24|
000012  6060              STR      r0,[r4,#4]
;;;244      return p;
000014  4620              MOV      r0,r4
;;;245    }
000016  bd70              POP      {r4-r6,pc}
;;;246    
                          ENDP

                  |L35.24|
                          DCD      io_fclose

                          AREA ||i.newprefile||, CODE, READONLY, ALIGN=2

                  newprefile PROC
;;;187    */
;;;188    static LStream *newprefile (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;189      LStream *p = (LStream *)lua_newuserdatauv(L, sizeof(LStream), 0);
000004  2200              MOVS     r2,#0
000006  2108              MOVS     r1,#8
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       lua_newuserdatauv
00000e  4604              MOV      r4,r0
;;;190      p->closef = NULL;  /* mark file handle as 'closed' */
000010  2000              MOVS     r0,#0
000012  6060              STR      r0,[r4,#4]
;;;191      luaL_setmetatable(L, LUA_FILEHANDLE);
000014  a102              ADR      r1,|L36.32|
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       luaL_setmetatable
;;;192      return p;
00001c  4620              MOV      r0,r4
;;;193    }
00001e  bd70              POP      {r4-r6,pc}
;;;194    
                          ENDP

                  |L36.32|
000020  46494c45          DCB      "FILE*",0
000024  2a00    
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.nextc||, CODE, READONLY, ALIGN=1

                  nextc PROC
;;;400    */
;;;401    static int nextc (RN *rn) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;402      if (rn->n >= L_MAXLENNUM) {  /* buffer overflow? */
000004  68a0              LDR      r0,[r4,#8]
000006  28c8              CMP      r0,#0xc8
000008  db02              BLT      |L37.16|
;;;403        rn->buff[0] = '\0';  /* invalidate result */
00000a  2000              MOVS     r0,#0
00000c  7320              STRB     r0,[r4,#0xc]
                  |L37.14|
;;;404        return 0;  /* fail */
;;;405      }
;;;406      else {
;;;407        rn->buff[rn->n++] = rn->c;  /* save current char */
;;;408        rn->c = l_getc(rn->f);  /* read next one */
;;;409        return 1;
;;;410      }
;;;411    }
00000e  bd10              POP      {r4,pc}
                  |L37.16|
000010  7920              LDRB     r0,[r4,#4]            ;407
000012  b241              SXTB     r1,r0                 ;407
000014  68a2              LDR      r2,[r4,#8]            ;407
000016  1c50              ADDS     r0,r2,#1              ;407
000018  60a0              STR      r0,[r4,#8]            ;407
00001a  f104000c          ADD      r0,r4,#0xc            ;407
00001e  5481              STRB     r1,[r0,r2]            ;407
000020  6820              LDR      r0,[r4,#0]            ;408
000022  f7fffffe          BL       getc
000026  6060              STR      r0,[r4,#4]            ;408
000028  2001              MOVS     r0,#1                 ;409
00002a  e7f0              B        |L37.14|
;;;412    
                          ENDP


                          AREA ||i.opencheck||, CODE, READONLY, ALIGN=2

                  opencheck PROC
;;;247    
;;;248    static void opencheck (lua_State *L, const char *fname, const char *mode) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;249      LStream *p = newfile(L);
00000a  4638              MOV      r0,r7
00000c  f7fffffe          BL       newfile
000010  4606              MOV      r6,r0
;;;250      p->f = fopen(fname, mode);
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       fopen
00001a  6030              STR      r0,[r6,#0]
;;;251      if (p->f == NULL)
00001c  6830              LDR      r0,[r6,#0]
00001e  b968              CBNZ     r0,|L38.60|
;;;252        luaL_error(L, "cannot open file '%s' (%s)", fname, strerror(errno));
000020  f7fffffe          BL       __aeabi_errno_addr
000024  f8d09000          LDR      r9,[r0,#0]
000028  4648              MOV      r0,r9
00002a  f7fffffe          BL       strerror
00002e  4680              MOV      r8,r0
000030  4643              MOV      r3,r8
000032  4622              MOV      r2,r4
000034  a102              ADR      r1,|L38.64|
000036  4638              MOV      r0,r7
000038  f7fffffe          BL       luaL_error
                  |L38.60|
;;;253    }
00003c  e8bd87f0          POP      {r4-r10,pc}
;;;254    
                          ENDP

                  |L38.64|
000040  63616e6e          DCB      "cannot open file '%s' (%s)",0
000044  6f74206f
000048  70656e20
00004c  66696c65
000050  20272573
000054  27202825
000058  732900  
00005b  00                DCB      0

                          AREA ||i.read_all||, CODE, READONLY, ALIGN=1

                  read_all PROC
;;;502    
;;;503    static void read_all (lua_State *L, FILE *f) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  f5ad5d82          SUB      sp,sp,#0x1040
000008  4606              MOV      r6,r0
00000a  460d              MOV      r5,r1
;;;504      size_t nr;
;;;505      luaL_Buffer b;
;;;506      luaL_buffinit(L, &b);
00000c  a90c              ADD      r1,sp,#0x30
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       luaL_buffinit
;;;507      do {  /* read file in chunks of LUAL_BUFFERSIZE bytes */
000014  bf00              NOP      
                  |L39.22|
;;;508        char *p = luaL_prepbuffer(&b);
000016  f44f5180          MOV      r1,#0x1000
00001a  a80c              ADD      r0,sp,#0x30
00001c  f7fffffe          BL       luaL_prepbuffsize
000020  4607              MOV      r7,r0
;;;509        nr = fread(p, sizeof(char), LUAL_BUFFERSIZE, f);
000022  462b              MOV      r3,r5
000024  f44f5280          MOV      r2,#0x1000
000028  2101              MOVS     r1,#1
00002a  4638              MOV      r0,r7
00002c  f7fffffe          BL       fread
000030  4604              MOV      r4,r0
;;;510        luaL_addsize(&b, nr);
000032  990e              LDR      r1,[sp,#0x38]
000034  4421              ADD      r1,r1,r4
000036  910e              STR      r1,[sp,#0x38]
;;;511      } while (nr == LUAL_BUFFERSIZE);
000038  f5b45f80          CMP      r4,#0x1000
00003c  d0eb              BEQ      |L39.22|
;;;512      luaL_pushresult(&b);  /* close buffer */
00003e  a80c              ADD      r0,sp,#0x30
000040  f7fffffe          BL       luaL_pushresult
;;;513    }
000044  f50d5d82          ADD      sp,sp,#0x1040
000048  e8bd81f0          POP      {r4-r8,pc}
;;;514    
                          ENDP


                          AREA ||i.read_chars||, CODE, READONLY, ALIGN=1

                  read_chars PROC
;;;515    
;;;516    static int read_chars (lua_State *L, FILE *f, size_t n) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  f5ad5d82          SUB      sp,sp,#0x1040
000008  4607              MOV      r7,r0
00000a  460c              MOV      r4,r1
00000c  4615              MOV      r5,r2
;;;517      size_t nr;  /* number of chars actually read */
;;;518      char *p;
;;;519      luaL_Buffer b;
;;;520      luaL_buffinit(L, &b);
00000e  a90c              ADD      r1,sp,#0x30
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       luaL_buffinit
;;;521      p = luaL_prepbuffsize(&b, n);  /* prepare buffer to read whole block */
000016  4629              MOV      r1,r5
000018  a80c              ADD      r0,sp,#0x30
00001a  f7fffffe          BL       luaL_prepbuffsize
00001e  4680              MOV      r8,r0
;;;522      nr = fread(p, sizeof(char), n, f);  /* try to read 'n' chars */
000020  4623              MOV      r3,r4
000022  462a              MOV      r2,r5
000024  2101              MOVS     r1,#1
000026  4640              MOV      r0,r8
000028  f7fffffe          BL       fread
00002c  4606              MOV      r6,r0
;;;523      luaL_addsize(&b, nr);
00002e  990e              LDR      r1,[sp,#0x38]
000030  4431              ADD      r1,r1,r6
000032  910e              STR      r1,[sp,#0x38]
;;;524      luaL_pushresult(&b);  /* close buffer */
000034  a80c              ADD      r0,sp,#0x30
000036  f7fffffe          BL       luaL_pushresult
;;;525      return (nr > 0);  /* true iff read something */
00003a  b126              CBZ      r6,|L40.70|
00003c  2001              MOVS     r0,#1
                  |L40.62|
;;;526    }
00003e  f50d5d82          ADD      sp,sp,#0x1040
000042  e8bd81f0          POP      {r4-r8,pc}
                  |L40.70|
000046  2000              MOVS     r0,#0                 ;525
000048  e7f9              B        |L40.62|
;;;527    
                          ENDP


                          AREA ||i.read_line||, CODE, READONLY, ALIGN=1

                  read_line PROC
;;;481    
;;;482    static int read_line (lua_State *L, FILE *f, int chop) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  f5ad5d82          SUB      sp,sp,#0x1040
000008  4680              MOV      r8,r0
00000a  460e              MOV      r6,r1
00000c  4617              MOV      r7,r2
;;;483      luaL_Buffer b;
;;;484      int c = '\0';
00000e  2400              MOVS     r4,#0
;;;485      luaL_buffinit(L, &b);
000010  a90c              ADD      r1,sp,#0x30
000012  4640              MOV      r0,r8
000014  f7fffffe          BL       luaL_buffinit
;;;486      while (c != EOF && c != '\n') {  /* repeat until end of line */
000018  e01b              B        |L41.82|
                  |L41.26|
;;;487        char *buff = luaL_prepbuffer(&b);  /* preallocate buffer */
00001a  f44f5180          MOV      r1,#0x1000
00001e  a80c              ADD      r0,sp,#0x30
000020  f7fffffe          BL       luaL_prepbuffsize
000024  4681              MOV      r9,r0
;;;488        int i = 0;
000026  2500              MOVS     r5,#0
;;;489        l_lockfile(f);  /* no memory errors can happen inside the lock */
;;;490        while (i < LUAL_BUFFERSIZE && (c = l_getc(f)) != EOF && c != '\n')
000028  e004              B        |L41.52|
                  |L41.42|
;;;491          buff[i++] = c;
00002a  b262              SXTB     r2,r4
00002c  4628              MOV      r0,r5
00002e  1c6d              ADDS     r5,r5,#1
000030  f8092000          STRB     r2,[r9,r0]
                  |L41.52|
000034  f5b55f80          CMP      r5,#0x1000            ;490
000038  da07              BGE      |L41.74|
00003a  4630              MOV      r0,r6                 ;490
00003c  f7fffffe          BL       getc
000040  4604              MOV      r4,r0                 ;490
000042  1c40              ADDS     r0,r0,#1              ;490
000044  b108              CBZ      r0,|L41.74|
000046  2c0a              CMP      r4,#0xa               ;490
000048  d1ef              BNE      |L41.42|
                  |L41.74|
;;;492        l_unlockfile(f);
;;;493        luaL_addsize(&b, i);
00004a  980e              LDR      r0,[sp,#0x38]
00004c  1941              ADDS     r1,r0,r5
00004e  910e              STR      r1,[sp,#0x38]
;;;494      }
000050  bf00              NOP      
                  |L41.82|
000052  1c60              ADDS     r0,r4,#1              ;486
000054  b108              CBZ      r0,|L41.90|
000056  2c0a              CMP      r4,#0xa               ;486
000058  d1df              BNE      |L41.26|
                  |L41.90|
;;;495      if (!chop && c == '\n')  /* want a newline and have one? */
00005a  b97f              CBNZ     r7,|L41.124|
00005c  2c0a              CMP      r4,#0xa
00005e  d10d              BNE      |L41.124|
;;;496        luaL_addchar(&b, c);  /* add ending newline to result */
000060  e9dd010d          LDRD     r0,r1,[sp,#0x34]
000064  4281              CMP      r1,r0
000066  d303              BCC      |L41.112|
000068  2101              MOVS     r1,#1
00006a  a80c              ADD      r0,sp,#0x30
00006c  f7fffffe          BL       luaL_prepbuffsize
                  |L41.112|
000070  b262              SXTB     r2,r4
000072  9b0e              LDR      r3,[sp,#0x38]
000074  1c59              ADDS     r1,r3,#1
000076  910e              STR      r1,[sp,#0x38]
000078  980c              LDR      r0,[sp,#0x30]
00007a  54c2              STRB     r2,[r0,r3]
                  |L41.124|
;;;497      luaL_pushresult(&b);  /* close buffer */
00007c  a80c              ADD      r0,sp,#0x30
00007e  f7fffffe          BL       luaL_pushresult
;;;498      /* return ok if read something (either a newline or something else) */
;;;499      return (c == '\n' || lua_rawlen(L, -1) > 0);
000082  2c0a              CMP      r4,#0xa
000084  d009              BEQ      |L41.154|
000086  f04f31ff          MOV      r1,#0xffffffff
00008a  4640              MOV      r0,r8
00008c  f7fffffe          BL       lua_rawlen
000090  2300              MOVS     r3,#0
000092  4058              EORS     r0,r0,r3
000094  4059              EORS     r1,r1,r3
000096  4308              ORRS     r0,r0,r1
000098  d004              BEQ      |L41.164|
                  |L41.154|
00009a  2001              MOVS     r0,#1
                  |L41.156|
;;;500    }
00009c  f50d5d82          ADD      sp,sp,#0x1040
0000a0  e8bd87f0          POP      {r4-r10,pc}
                  |L41.164|
0000a4  2000              MOVS     r0,#0                 ;499
0000a6  e7f9              B        |L41.156|
;;;501    
                          ENDP


                          AREA ||i.read_number||, CODE, READONLY, ALIGN=2

                  read_number PROC
;;;439    */
;;;440    static int read_number (lua_State *L, FILE *f) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b0b7              SUB      sp,sp,#0xdc
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;441      RN rn;
;;;442      int count = 0;
000008  2400              MOVS     r4,#0
;;;443      int hex = 0;
00000a  2600              MOVS     r6,#0
;;;444      char decp[2];
;;;445      rn.f = f; rn.n = 0;
00000c  9501              STR      r5,[sp,#4]
00000e  2000              MOVS     r0,#0
000010  9003              STR      r0,[sp,#0xc]
;;;446      decp[0] = lua_getlocaledecpoint();  /* get decimal point from locale */
000012  f7fffffe          BL       localeconv
000016  6800              LDR      r0,[r0,#0]
000018  7800              LDRB     r0,[r0,#0]
00001a  f88d0000          STRB     r0,[sp,#0]
;;;447      decp[1] = '.';  /* always accept a dot */
00001e  202e              MOVS     r0,#0x2e
000020  f88d0001          STRB     r0,[sp,#1]
;;;448      l_lockfile(rn.f);
;;;449      do { rn.c = l_getc(rn.f); } while (isspace(rn.c));  /* skip spaces */
000024  bf00              NOP      
                  |L42.38|
000026  9801              LDR      r0,[sp,#4]
000028  f7fffffe          BL       getc
00002c  9002              STR      r0,[sp,#8]
00002e  f7fffffe          BL       __rt_ctype_table
000032  6800              LDR      r0,[r0,#0]
000034  9902              LDR      r1,[sp,#8]
000036  5c40              LDRB     r0,[r0,r1]
000038  f0000001          AND      r0,r0,#1
00003c  2800              CMP      r0,#0
00003e  d1f2              BNE      |L42.38|
;;;450      test2(&rn, "-+");  /* optional sign */
000040  a123              ADR      r1,|L42.208|
000042  a801              ADD      r0,sp,#4
000044  f7fffffe          BL       test2
;;;451      if (test2(&rn, "00")) {
000048  a122              ADR      r1,|L42.212|
00004a  a801              ADD      r0,sp,#4
00004c  f7fffffe          BL       test2
000050  b138              CBZ      r0,|L42.98|
;;;452        if (test2(&rn, "xX")) hex = 1;  /* numeral is hexadecimal */
000052  a121              ADR      r1,|L42.216|
000054  a801              ADD      r0,sp,#4
000056  f7fffffe          BL       test2
00005a  b108              CBZ      r0,|L42.96|
00005c  2601              MOVS     r6,#1
00005e  e000              B        |L42.98|
                  |L42.96|
;;;453        else count = 1;  /* count initial '0' as a valid digit */
000060  2401              MOVS     r4,#1
                  |L42.98|
;;;454      }
;;;455      count += readdigits(&rn, hex);  /* integral part */
000062  4631              MOV      r1,r6
000064  a801              ADD      r0,sp,#4
000066  f7fffffe          BL       readdigits
00006a  4404              ADD      r4,r4,r0
;;;456      if (test2(&rn, decp))  /* decimal point? */
00006c  4669              MOV      r1,sp
00006e  a801              ADD      r0,sp,#4
000070  f7fffffe          BL       test2
000074  b120              CBZ      r0,|L42.128|
;;;457        count += readdigits(&rn, hex);  /* fractional part */
000076  4631              MOV      r1,r6
000078  a801              ADD      r0,sp,#4
00007a  f7fffffe          BL       readdigits
00007e  4404              ADD      r4,r4,r0
                  |L42.128|
;;;458      if (count > 0 && test2(&rn, (hex ? "pP" : "eE"))) {  /* exponent mark? */
000080  2c00              CMP      r4,#0
000082  dd10              BLE      |L42.166|
000084  b10e              CBZ      r6,|L42.138|
000086  a015              ADR      r0,|L42.220|
000088  e000              B        |L42.140|
                  |L42.138|
00008a  a015              ADR      r0,|L42.224|
                  |L42.140|
00008c  4601              MOV      r1,r0
00008e  a801              ADD      r0,sp,#4
000090  f7fffffe          BL       test2
000094  b138              CBZ      r0,|L42.166|
;;;459        test2(&rn, "-+");  /* exponent sign */
000096  a10e              ADR      r1,|L42.208|
000098  a801              ADD      r0,sp,#4
00009a  f7fffffe          BL       test2
;;;460        readdigits(&rn, 0);  /* exponent digits */
00009e  2100              MOVS     r1,#0
0000a0  a801              ADD      r0,sp,#4
0000a2  f7fffffe          BL       readdigits
                  |L42.166|
;;;461      }
;;;462      ungetc(rn.c, rn.f);  /* unread look-ahead char */
0000a6  e9dd1001          LDRD     r1,r0,[sp,#4]
0000aa  f7fffffe          BL       ungetc
;;;463      l_unlockfile(rn.f);
;;;464      rn.buff[rn.n] = '\0';  /* finish string */
0000ae  2100              MOVS     r1,#0
0000b0  a804              ADD      r0,sp,#0x10
0000b2  9a03              LDR      r2,[sp,#0xc]
0000b4  5481              STRB     r1,[r0,r2]
;;;465      if (lua_stringtonumber(L, rn.buff))  /* is this a valid number? */
0000b6  a904              ADD      r1,sp,#0x10
0000b8  4638              MOV      r0,r7
0000ba  f7fffffe          BL       lua_stringtonumber
0000be  b110              CBZ      r0,|L42.198|
;;;466        return 1;  /* ok */
0000c0  2001              MOVS     r0,#1
                  |L42.194|
;;;467      else {  /* invalid format */
;;;468       lua_pushnil(L);  /* "result" to be removed */
;;;469       return 0;  /* read fails */
;;;470      }
;;;471    }
0000c2  b037              ADD      sp,sp,#0xdc
0000c4  bdf0              POP      {r4-r7,pc}
                  |L42.198|
0000c6  4638              MOV      r0,r7                 ;468
0000c8  f7fffffe          BL       lua_pushnil
0000cc  2000              MOVS     r0,#0                 ;469
0000ce  e7f8              B        |L42.194|
;;;472    
                          ENDP

                  |L42.208|
0000d0  2d2b00            DCB      "-+",0
0000d3  00                DCB      0
                  |L42.212|
0000d4  303000            DCB      "00",0
0000d7  00                DCB      0
                  |L42.216|
0000d8  785800            DCB      "xX",0
0000db  00                DCB      0
                  |L42.220|
0000dc  705000            DCB      "pP",0
0000df  00                DCB      0
                  |L42.224|
0000e0  654500            DCB      "eE",0
0000e3  00                DCB      0

                          AREA ||i.readdigits||, CODE, READONLY, ALIGN=1

                  readdigits PROC
;;;426    */
;;;427    static int readdigits (RN *rn, int hex) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;428      int count = 0;
000008  2600              MOVS     r6,#0
;;;429      while ((hex ? isxdigit(rn->c) : isdigit(rn->c)) && nextc(rn))
00000a  e000              B        |L43.14|
                  |L43.12|
;;;430        count++;
00000c  1c76              ADDS     r6,r6,#1
                  |L43.14|
00000e  b14d              CBZ      r5,|L43.36|
000010  f7fffffe          BL       __rt_ctype_table
000014  6800              LDR      r0,[r0,#0]            ;429
000016  6861              LDR      r1,[r4,#4]            ;429
000018  5c47              LDRB     r7,[r0,r1]            ;429
00001a  ea870087          EOR      r0,r7,r7,LSL #2       ;429
00001e  f0000080          AND      r0,r0,#0x80           ;429
000022  e009              B        |L43.56|
                  |L43.36|
000024  f7fffffe          BL       __rt_ctype_table
000028  6800              LDR      r0,[r0,#0]            ;429
00002a  6861              LDR      r1,[r4,#4]            ;429
00002c  5c40              LDRB     r0,[r0,r1]            ;429
00002e  2820              CMP      r0,#0x20              ;429
000030  d101              BNE      |L43.54|
000032  2001              MOVS     r0,#1                 ;429
000034  e000              B        |L43.56|
                  |L43.54|
000036  2000              MOVS     r0,#0                 ;429
                  |L43.56|
000038  b120              CBZ      r0,|L43.68|
00003a  4620              MOV      r0,r4                 ;429
00003c  f7fffffe          BL       nextc
000040  2800              CMP      r0,#0                 ;429
000042  d1e3              BNE      |L43.12|
                  |L43.68|
;;;431      return count;
000044  4630              MOV      r0,r6
;;;432    }
000046  e8bd81f0          POP      {r4-r8,pc}
;;;433    
                          ENDP


                          AREA ||i.test2||, CODE, READONLY, ALIGN=1

                  test2 PROC
;;;416    */
;;;417    static int test2 (RN *rn, const char *set) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;418      if (rn->c == set[0] || rn->c == set[1])
000006  f9951000          LDRSB    r1,[r5,#0]
00000a  6860              LDR      r0,[r4,#4]
00000c  4288              CMP      r0,r1
00000e  d004              BEQ      |L44.26|
000010  f9951001          LDRSB    r1,[r5,#1]
000014  6860              LDR      r0,[r4,#4]
000016  4288              CMP      r0,r1
000018  d103              BNE      |L44.34|
                  |L44.26|
;;;419        return nextc(rn);
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       nextc
                  |L44.32|
;;;420      else return 0;
;;;421    }
000020  bd70              POP      {r4-r6,pc}
                  |L44.34|
000022  2000              MOVS     r0,#0                 ;420
000024  e7fc              B        |L44.32|
;;;422    
                          ENDP


                          AREA ||i.test_eof||, CODE, READONLY, ALIGN=2

                  test_eof PROC
;;;473    
;;;474    static int test_eof (lua_State *L, FILE *f) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;475      int c = getc(f);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       getc
00000c  4605              MOV      r5,r0
;;;476      ungetc(c, f);  /* no-op when c == EOF */
00000e  4621              MOV      r1,r4
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       ungetc
;;;477      lua_pushliteral(L, "");
000016  a105              ADR      r1,|L45.44|
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lua_pushstring
;;;478      return (c != EOF);
00001e  1c68              ADDS     r0,r5,#1
000020  b108              CBZ      r0,|L45.38|
000022  2001              MOVS     r0,#1
                  |L45.36|
;;;479    }
000024  bd70              POP      {r4-r6,pc}
                  |L45.38|
000026  2000              MOVS     r0,#0                 ;478
000028  e7fc              B        |L45.36|
;;;480    
                          ENDP

00002a  0000              DCW      0x0000
                  |L45.44|
00002c  00                DCB      0
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0

                          AREA ||i.tofile||, CODE, READONLY, ALIGN=2

                  tofile PROC
;;;173    
;;;174    static FILE *tofile (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;175      LStream *p = tolstream(L);
000004  a206              ADR      r2,|L46.32|
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       luaL_checkudata
00000e  4604              MOV      r4,r0
;;;176      if (isclosed(p))
000010  6860              LDR      r0,[r4,#4]
000012  b918              CBNZ     r0,|L46.28|
;;;177        luaL_error(L, "attempt to use a closed file");
000014  a104              ADR      r1,|L46.40|
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       luaL_error
                  |L46.28|
;;;178      lua_assert(p->f);
;;;179      return p->f;
00001c  6820              LDR      r0,[r4,#0]
;;;180    }
00001e  bd70              POP      {r4-r6,pc}
;;;181    
                          ENDP

                  |L46.32|
000020  46494c45          DCB      "FILE*",0
000024  2a00    
000026  00                DCB      0
000027  00                DCB      0
                  |L46.40|
000028  61747465          DCB      "attempt to use a closed file",0
00002c  6d707420
000030  746f2075
000034  73652061
000038  20636c6f
00003c  73656420
000040  66696c65
000044  00      
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  iolib
                          DCD      ||.conststring||
                          DCD      io_close
                          DCD      ||.conststring||+0x8
                          DCD      io_flush
                          DCD      ||.conststring||+0x10
                          DCD      io_input
                          DCD      ||.conststring||+0x18
                          DCD      io_lines
                          DCD      ||.conststring||+0x20
                          DCD      io_open
                          DCD      ||.conststring||+0x28
                          DCD      io_output
                          DCD      ||.conststring||+0x30
                          DCD      io_popen
                          DCD      ||.conststring||+0x38
                          DCD      io_read
                          DCD      ||.conststring||+0x40
                          DCD      io_tmpfile
                          DCD      ||.conststring||+0x48
                          DCD      io_type
                          DCD      ||.conststring||+0x50
                          DCD      io_write
                          DCD      0x00000000
                          DCD      0x00000000
                  flib
                          DCD      ||.conststring||
                          DCD      f_close
                          DCD      ||.conststring||+0x8
                          DCD      f_flush
                          DCD      ||.conststring||+0x18
                          DCD      f_lines
                          DCD      ||.conststring||+0x38
                          DCD      f_read
                          DCD      ||.conststring||+0x58
                          DCD      f_seek
                          DCD      ||.conststring||+0x60
                          DCD      f_setvbuf
                          DCD      ||.conststring||+0x50
                          DCD      f_write
                          DCD      ||.conststring||+0x68
                          DCD      f_gc
                          DCD      ||.conststring||+0x70
                          DCD      f_tostring
                          DCD      0x00000000
                          DCD      0x00000000
                  mode
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000002
                  modenames
                          DCD      ||.conststring||+0x7c
                          DCD      ||.conststring||+0x80
                          DCD      ||.conststring||+0x84
                          DCD      0x00000000
                  |symbol_number.135|
                          DCD      0x00000400
                          DCD      0x00000100
                          DCD      0x00000200
                  |symbol_number.136|
                          DCD      ||.conststring||+0x88
                          DCD      ||.conststring||+0x8c
                          DCD      ||.conststring||+0x94
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  636c6f73          DCB      "close",0
000004  6500    
000006  00                DCB      0
000007  00                DCB      0
000008  666c7573          DCB      "flush",0
00000c  6800    
00000e  00                DCB      0
00000f  00                DCB      0
000010  696e7075          DCB      "input",0
000014  7400    
000016  00                DCB      0
000017  00                DCB      0
000018  6c696e65          DCB      "lines",0
00001c  7300    
00001e  00                DCB      0
00001f  00                DCB      0
000020  6f70656e          DCB      "open",0
000024  00      
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0
000028  6f757470          DCB      "output",0
00002c  757400  
00002f  00                DCB      0
000030  706f7065          DCB      "popen",0
000034  6e00    
000036  00                DCB      0
000037  00                DCB      0
000038  72656164          DCB      "read",0
00003c  00      
00003d  00                DCB      0
00003e  00                DCB      0
00003f  00                DCB      0
000040  746d7066          DCB      "tmpfile",0
000044  696c6500
000048  74797065          DCB      "type",0
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0
000050  77726974          DCB      "write",0
000054  6500    
000056  00                DCB      0
000057  00                DCB      0
000058  7365656b          DCB      "seek",0
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0
000060  73657476          DCB      "setvbuf",0
000064  62756600
000068  5f5f6763          DCB      "__gc",0
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
000070  5f5f746f          DCB      "__tostring",0
000074  73747269
000078  6e6700  
00007b  00                DCB      0
00007c  73657400          DCB      "set",0
000080  63757200          DCB      "cur",0
000084  656e6400          DCB      "end",0
000088  6e6f00            DCB      "no",0
00008b  00                DCB      0
00008c  66756c6c          DCB      "full",0
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0
000094  6c696e65          DCB      "line",0
000098  00      
