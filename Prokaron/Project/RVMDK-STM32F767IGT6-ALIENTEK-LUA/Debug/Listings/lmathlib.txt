; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\lmathlib.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\lmathlib.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\lmathlib.crf ..\..\..\M6P1(L)_Lua\lua\lmathlib.c]
                          THUMB

                          AREA ||i.I2d||, CODE, READONLY, ALIGN=2

                  I2d PROC
;;;290    */
;;;291    static lua_Number I2d (I x) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;292      return (lua_Number)(x & maskFIG) * shiftFIG;
000008  f8dfc01c          LDR      r12,|L1.40|
00000c  ea05010c          AND      r1,r5,r12
000010  4622              MOV      r2,r4
000012  4610              MOV      r0,r2
000014  f7fffffe          BL       __aeabi_ul2d
000018  4606              MOV      r6,r0
00001a  2200              MOVS     r2,#0
00001c  4b03              LDR      r3,|L1.44|
00001e  f7fffffe          BL       __aeabi_dmul
;;;293    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;294    
                          ENDP

000026  0000              DCW      0x0000
                  |L1.40|
                          DCD      0x001fffff
                  |L1.44|
                          DCD      0x3ca00000

                          AREA ||i.luaopen_math||, CODE, READONLY, ALIGN=2

                  luaopen_math PROC
;;;629    */
;;;630    LUAMOD_API int luaopen_math (lua_State *L) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;631      luaL_newlib(L, mathlib);
000004  2088              MOVS     r0,#0x88
000006  2200              MOVS     r2,#0
000008  4b20              LDR      r3,|L2.140|
00000a  9000              STR      r0,[sp,#0]
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       luaL_checkversion_
000012  221b              MOVS     r2,#0x1b
000014  2100              MOVS     r1,#0
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       lua_createtable
00001c  2200              MOVS     r2,#0
00001e  491c              LDR      r1,|L2.144|
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       luaL_setfuncs
;;;632      lua_pushnumber(L, PI);
000026  4a1b              LDR      r2,|L2.148|
000028  4b1b              LDR      r3,|L2.152|
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       lua_pushnumber
;;;633      lua_setfield(L, -2, "pi");
000030  a21a              ADR      r2,|L2.156|
000032  f06f0101          MVN      r1,#1
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       lua_setfield
;;;634      lua_pushnumber(L, (lua_Number)HUGE_VAL);
00003c  2200              MOVS     r2,#0
00003e  4b18              LDR      r3,|L2.160|
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       lua_pushnumber
;;;635      lua_setfield(L, -2, "huge");
000046  a217              ADR      r2,|L2.164|
000048  f06f0101          MVN      r1,#1
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       lua_setfield
;;;636      lua_pushinteger(L, LUA_MAXINTEGER);
000052  f04f32ff          MOV      r2,#0xffffffff
000056  0853              LSRS     r3,r2,#1
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       lua_pushinteger
;;;637      lua_setfield(L, -2, "maxinteger");
00005e  a213              ADR      r2,|L2.172|
000060  f06f0101          MVN      r1,#1
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       lua_setfield
;;;638      lua_pushinteger(L, LUA_MININTEGER);
00006a  2200              MOVS     r2,#0
00006c  f04f4300          MOV      r3,#0x80000000
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       lua_pushinteger
;;;639      lua_setfield(L, -2, "mininteger");
000076  a210              ADR      r2,|L2.184|
000078  f06f0101          MVN      r1,#1
00007c  4620              MOV      r0,r4
00007e  f7fffffe          BL       lua_setfield
;;;640      setrandfunc(L);
000082  4620              MOV      r0,r4
000084  f7fffffe          BL       setrandfunc
;;;641      return 1;
000088  2001              MOVS     r0,#1
;;;642    }
00008a  bd38              POP      {r3-r5,pc}
;;;643    
                          ENDP

                  |L2.140|
                          DCD      0x407f8000
                  |L2.144|
                          DCD      mathlib
                  |L2.148|
                          DCD      0x54442d18
                  |L2.152|
                          DCD      0x400921fb
                  |L2.156|
00009c  706900            DCB      "pi",0
00009f  00                DCB      0
                  |L2.160|
                          DCD      0x7ff00000
                  |L2.164|
0000a4  68756765          DCB      "huge",0
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L2.172|
0000ac  6d617869          DCB      "maxinteger",0
0000b0  6e746567
0000b4  657200  
0000b7  00                DCB      0
                  |L2.184|
0000b8  6d696e69          DCB      "mininteger",0
0000bc  6e746567
0000c0  657200  
0000c3  00                DCB      0

                          AREA ||i.math_abs||, CODE, READONLY, ALIGN=1

                  math_abs PROC
;;;27     
;;;28     static int math_abs (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
;;;29       if (lua_isinteger(L, 1)) {
000004  2101              MOVS     r1,#1
000006  4630              MOV      r0,r6
000008  f7fffffe          BL       lua_isinteger
00000c  b1b0              CBZ      r0,|L3.60|
;;;30         lua_Integer n = lua_tointeger(L, 1);
00000e  2200              MOVS     r2,#0
000010  2101              MOVS     r1,#1
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       lua_tointegerx
000018  4604              MOV      r4,r0
00001a  460d              MOV      r5,r1
;;;31         if (n < 0) n = (lua_Integer)(0u - (lua_Unsigned)n);
00001c  2100              MOVS     r1,#0
00001e  4608              MOV      r0,r1
000020  1a61              SUBS     r1,r4,r1
000022  eb750000          SBCS     r0,r5,r0
000026  da03              BGE      |L3.48|
000028  2100              MOVS     r1,#0
00002a  1b0c              SUBS     r4,r1,r4
00002c  eb610505          SBC      r5,r1,r5
                  |L3.48|
;;;32         lua_pushinteger(L, n);
000030  4622              MOV      r2,r4
000032  462b              MOV      r3,r5
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       lua_pushinteger
;;;33       }
00003a  e00a              B        |L3.82|
                  |L3.60|
;;;34       else
;;;35         lua_pushnumber(L, l_mathop(fabs)(luaL_checknumber(L, 1)));
00003c  2101              MOVS     r1,#1
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       luaL_checknumber
000044  f0214300          BIC      r3,r1,#0x80000000
000048  4604              MOV      r4,r0
00004a  4622              MOV      r2,r4
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       lua_pushnumber
                  |L3.82|
;;;36       return 1;
000052  2001              MOVS     r0,#1
;;;37     }
000054  bd70              POP      {r4-r6,pc}
;;;38     
                          ENDP


                          AREA ||i.math_acos||, CODE, READONLY, ALIGN=1

                  math_acos PROC
;;;58     
;;;59     static int math_acos (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;60       lua_pushnumber(L, l_mathop(acos)(luaL_checknumber(L, 1)));
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checknumber
00000e  4605              MOV      r5,r0
000010  f7fffffe          BL       acos
000014  4607              MOV      r7,r0
000016  463a              MOV      r2,r7
000018  460b              MOV      r3,r1
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       lua_pushnumber
;;;61       return 1;
000020  2001              MOVS     r0,#1
;;;62     }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;63     
                          ENDP


                          AREA ||i.math_asin||, CODE, READONLY, ALIGN=1

                  math_asin PROC
;;;53     
;;;54     static int math_asin (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;55       lua_pushnumber(L, l_mathop(asin)(luaL_checknumber(L, 1)));
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checknumber
00000e  4605              MOV      r5,r0
000010  f7fffffe          BL       asin
000014  4607              MOV      r7,r0
000016  463a              MOV      r2,r7
000018  460b              MOV      r3,r1
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       lua_pushnumber
;;;56       return 1;
000020  2001              MOVS     r0,#1
;;;57     }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;58     
                          ENDP


                          AREA ||i.math_atan||, CODE, READONLY, ALIGN=2

                  math_atan PROC
;;;63     
;;;64     static int math_atan (lua_State *L) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4682              MOV      r10,r0
;;;65       lua_Number y = luaL_checknumber(L, 1);
000006  2101              MOVS     r1,#1
000008  4650              MOV      r0,r10
00000a  f7fffffe          BL       luaL_checknumber
00000e  4604              MOV      r4,r0
000010  460d              MOV      r5,r1
;;;66       lua_Number x = luaL_optnumber(L, 2, 1);
000012  2200              MOVS     r2,#0
000014  4b0a              LDR      r3,|L6.64|
000016  2102              MOVS     r1,#2
000018  4650              MOV      r0,r10
00001a  f7fffffe          BL       luaL_optnumber
00001e  4606              MOV      r6,r0
000020  460f              MOV      r7,r1
;;;67       lua_pushnumber(L, l_mathop(atan2)(y, x));
000022  4632              MOV      r2,r6
000024  463b              MOV      r3,r7
000026  4620              MOV      r0,r4
000028  4629              MOV      r1,r5
00002a  f7fffffe          BL       atan2
00002e  4680              MOV      r8,r0
000030  4642              MOV      r2,r8
000032  460b              MOV      r3,r1
000034  4650              MOV      r0,r10
000036  f7fffffe          BL       lua_pushnumber
;;;68       return 1;
00003a  2001              MOVS     r0,#1
;;;69     }
00003c  e8bd87f0          POP      {r4-r10,pc}
;;;70     
                          ENDP

                  |L6.64|
                          DCD      0x3ff00000

                          AREA ||i.math_ceil||, CODE, READONLY, ALIGN=1

                  math_ceil PROC
;;;104    
;;;105    static int math_ceil (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;106      if (lua_isinteger(L, 1))
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       lua_isinteger
00000e  b120              CBZ      r0,|L7.26|
;;;107        lua_settop(L, 1);  /* integer is its own ceil */
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       lua_settop
000018  e00e              B        |L7.56|
                  |L7.26|
;;;108      else {
;;;109        lua_Number d = l_mathop(ceil)(luaL_checknumber(L, 1));
00001a  2101              MOVS     r1,#1
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       luaL_checknumber
000022  4605              MOV      r5,r0
000024  f7fffffe          BL       ceil
000028  4607              MOV      r7,r0
00002a  4688              MOV      r8,r1
;;;110        pushnumint(L, d);
00002c  463a              MOV      r2,r7
00002e  4643              MOV      r3,r8
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       pushnumint
;;;111      }
000036  bf00              NOP      
                  |L7.56|
;;;112      return 1;
000038  2001              MOVS     r0,#1
;;;113    }
00003a  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.math_cos||, CODE, READONLY, ALIGN=1

                  math_cos PROC
;;;43     
;;;44     static int math_cos (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;45       lua_pushnumber(L, l_mathop(cos)(luaL_checknumber(L, 1)));
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checknumber
00000e  4605              MOV      r5,r0
000010  f7fffffe          BL       ||cos||
000014  4607              MOV      r7,r0
000016  463a              MOV      r2,r7
000018  460b              MOV      r3,r1
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       lua_pushnumber
;;;46       return 1;
000020  2001              MOVS     r0,#1
;;;47     }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;48     
                          ENDP


                          AREA ||i.math_deg||, CODE, READONLY, ALIGN=2

                  math_deg PROC
;;;192    
;;;193    static int math_deg (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;194      lua_pushnumber(L, luaL_checknumber(L, 1) * (l_mathop(180.0) / PI));
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checknumber
00000e  4605              MOV      r5,r0
000010  4a06              LDR      r2,|L9.44|
000012  4b07              LDR      r3,|L9.48|
000014  f7fffffe          BL       __aeabi_dmul
000018  4607              MOV      r7,r0
00001a  463a              MOV      r2,r7
00001c  460b              MOV      r3,r1
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       lua_pushnumber
;;;195      return 1;
000024  2001              MOVS     r0,#1
;;;196    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;197    
                          ENDP

00002a  0000              DCW      0x0000
                  |L9.44|
                          DCD      0x1a63c1f8
                  |L9.48|
                          DCD      0x404ca5dc

                          AREA ||i.math_exp||, CODE, READONLY, ALIGN=1

                  math_exp PROC
;;;187    
;;;188    static int math_exp (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;189      lua_pushnumber(L, l_mathop(exp)(luaL_checknumber(L, 1)));
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checknumber
00000e  4605              MOV      r5,r0
000010  f7fffffe          BL       exp
000014  4607              MOV      r7,r0
000016  463a              MOV      r2,r7
000018  460b              MOV      r3,r1
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       lua_pushnumber
;;;190      return 1;
000020  2001              MOVS     r0,#1
;;;191    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;192    
                          ENDP


                          AREA ||i.math_floor||, CODE, READONLY, ALIGN=1

                  math_floor PROC
;;;93     
;;;94     static int math_floor (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;95       if (lua_isinteger(L, 1))
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       lua_isinteger
00000e  b120              CBZ      r0,|L11.26|
;;;96         lua_settop(L, 1);  /* integer is its own floor */
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       lua_settop
000018  e00e              B        |L11.56|
                  |L11.26|
;;;97       else {
;;;98         lua_Number d = l_mathop(floor)(luaL_checknumber(L, 1));
00001a  2101              MOVS     r1,#1
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       luaL_checknumber
000022  4605              MOV      r5,r0
000024  f7fffffe          BL       floor
000028  4607              MOV      r7,r0
00002a  4688              MOV      r8,r1
;;;99         pushnumint(L, d);
00002c  463a              MOV      r2,r7
00002e  4643              MOV      r3,r8
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       pushnumint
;;;100      }
000036  bf00              NOP      
                  |L11.56|
;;;101      return 1;
000038  2001              MOVS     r0,#1
;;;102    }
00003a  e8bd81f0          POP      {r4-r8,pc}
;;;103    
                          ENDP


                          AREA ||i.math_fmod||, CODE, READONLY, ALIGN=2

                  math_fmod PROC
;;;115    
;;;116    static int math_fmod (lua_State *L) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4682              MOV      r10,r0
;;;117      if (lua_isinteger(L, 1) && lua_isinteger(L, 2)) {
000006  2101              MOVS     r1,#1
000008  4650              MOV      r0,r10
00000a  f7fffffe          BL       lua_isinteger
00000e  2800              CMP      r0,#0
000010  d034              BEQ      |L12.124|
000012  2102              MOVS     r1,#2
000014  4650              MOV      r0,r10
000016  f7fffffe          BL       lua_isinteger
00001a  b370              CBZ      r0,|L12.122|
;;;118        lua_Integer d = lua_tointeger(L, 2);
00001c  2200              MOVS     r2,#0
00001e  2102              MOVS     r1,#2
000020  4650              MOV      r0,r10
000022  f7fffffe          BL       lua_tointegerx
000026  4604              MOV      r4,r0
000028  460d              MOV      r5,r1
;;;119        if ((lua_Unsigned)d + 1u <= 1u) {  /* special cases: -1 or 0 */
00002a  1c63              ADDS     r3,r4,#1
00002c  f1450000          ADC      r0,r5,#0
000030  2100              MOVS     r1,#0
000032  f1d30201          RSBS     r2,r3,#1
000036  4181              SBCS     r1,r1,r0
000038  d310              BCC      |L12.92|
;;;120          luaL_argcheck(L, d != 0, 2, "zero");
00003a  2100              MOVS     r1,#0
00003c  ea840001          EOR      r0,r4,r1
000040  4069              EORS     r1,r1,r5
000042  4308              ORRS     r0,r0,r1
000044  d104              BNE      |L12.80|
000046  a219              ADR      r2,|L12.172|
000048  2102              MOVS     r1,#2
00004a  4650              MOV      r0,r10
00004c  f7fffffe          BL       luaL_argerror
                  |L12.80|
;;;121          lua_pushinteger(L, 0);  /* avoid overflow with 0x80000... / -1 */
000050  2200              MOVS     r2,#0
000052  4613              MOV      r3,r2
000054  4650              MOV      r0,r10
000056  f7fffffe          BL       lua_pushinteger
00005a  e00d              B        |L12.120|
                  |L12.92|
;;;122        }
;;;123        else
;;;124          lua_pushinteger(L, lua_tointeger(L, 1) % d);
00005c  2200              MOVS     r2,#0
00005e  2101              MOVS     r1,#1
000060  4650              MOV      r0,r10
000062  f7fffffe          BL       lua_tointegerx
000066  4680              MOV      r8,r0
000068  4622              MOV      r2,r4
00006a  462b              MOV      r3,r5
00006c  f7fffffe          BL       __aeabi_ldivmod
000070  4616              MOV      r6,r2
000072  4650              MOV      r0,r10
000074  f7fffffe          BL       lua_pushinteger
                  |L12.120|
;;;125      }
000078  e015              B        |L12.166|
                  |L12.122|
00007a  e7ff              B        |L12.124|
                  |L12.124|
;;;126      else
;;;127        lua_pushnumber(L, l_mathop(fmod)(luaL_checknumber(L, 1),
00007c  2102              MOVS     r1,#2
00007e  4650              MOV      r0,r10
000080  f7fffffe          BL       luaL_checknumber
000084  4606              MOV      r6,r0
000086  460f              MOV      r7,r1
000088  2101              MOVS     r1,#1
00008a  4650              MOV      r0,r10
00008c  f7fffffe          BL       luaL_checknumber
000090  4680              MOV      r8,r0
000092  4632              MOV      r2,r6
000094  463b              MOV      r3,r7
000096  f7fffffe          BL       fmod
00009a  4604              MOV      r4,r0
00009c  4622              MOV      r2,r4
00009e  460b              MOV      r3,r1
0000a0  4650              MOV      r0,r10
0000a2  f7fffffe          BL       lua_pushnumber
                  |L12.166|
;;;128                                         luaL_checknumber(L, 2)));
;;;129      return 1;
0000a6  2001              MOVS     r0,#1
;;;130    }
0000a8  e8bd87f0          POP      {r4-r10,pc}
;;;131    
                          ENDP

                  |L12.172|
0000ac  7a65726f          DCB      "zero",0
0000b0  00      
0000b1  00                DCB      0
0000b2  00                DCB      0
0000b3  00                DCB      0

                          AREA ||i.math_log||, CODE, READONLY, ALIGN=2

                  math_log PROC
;;;167    
;;;168    static int math_log (lua_State *L) {
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
000004  b082              SUB      sp,sp,#8
;;;169      lua_Number x = luaL_checknumber(L, 1);
000006  2101              MOVS     r1,#1
000008  9802              LDR      r0,[sp,#8]
00000a  f7fffffe          BL       luaL_checknumber
00000e  4606              MOV      r6,r0
000010  460f              MOV      r7,r1
;;;170      lua_Number res;
;;;171      if (lua_isnoneornil(L, 2))
000012  2102              MOVS     r1,#2
000014  9802              LDR      r0,[sp,#8]
000016  f7fffffe          BL       lua_type
00001a  2800              CMP      r0,#0
00001c  dc06              BGT      |L13.44|
;;;172        res = l_mathop(log)(x);
00001e  4630              MOV      r0,r6
000020  4639              MOV      r1,r7
000022  f7fffffe          BL       log
000026  4604              MOV      r4,r0
000028  460d              MOV      r5,r1
00002a  e038              B        |L13.158|
                  |L13.44|
;;;173      else {
;;;174        lua_Number base = luaL_checknumber(L, 2);
00002c  2102              MOVS     r1,#2
00002e  9802              LDR      r0,[sp,#8]
000030  f7fffffe          BL       luaL_checknumber
000034  4680              MOV      r8,r0
000036  4689              MOV      r9,r1
;;;175    #if !defined(LUA_USE_C89)
;;;176        if (base == l_mathop(2.0))
000038  2200              MOVS     r2,#0
00003a  f04f4380          MOV      r3,#0x40000000
00003e  4640              MOV      r0,r8
000040  4649              MOV      r1,r9
000042  f7fffffe          BL       __aeabi_cdcmpeq
000046  d109              BNE      |L13.92|
;;;177          res = l_mathop(log2)(x); else
000048  4630              MOV      r0,r6
00004a  4639              MOV      r1,r7
00004c  f7fffffe          BL       log2
000050  4682              MOV      r10,r0
000052  f7fffffe          BL       __aeabi_i2d
000056  4604              MOV      r4,r0
000058  460d              MOV      r5,r1
00005a  e01f              B        |L13.156|
                  |L13.92|
;;;178    #endif
;;;179        if (base == l_mathop(10.0))
00005c  2200              MOVS     r2,#0
00005e  4b14              LDR      r3,|L13.176|
000060  4640              MOV      r0,r8
000062  4649              MOV      r1,r9
000064  f7fffffe          BL       __aeabi_cdcmpeq
000068  d106              BNE      |L13.120|
;;;180          res = l_mathop(log10)(x);
00006a  4630              MOV      r0,r6
00006c  4639              MOV      r1,r7
00006e  f7fffffe          BL       log10
000072  4604              MOV      r4,r0
000074  460d              MOV      r5,r1
000076  e011              B        |L13.156|
                  |L13.120|
;;;181        else
;;;182          res = l_mathop(log)(x)/l_mathop(log)(base);
000078  4640              MOV      r0,r8
00007a  4649              MOV      r1,r9
00007c  f7fffffe          BL       log
000080  4682              MOV      r10,r0
000082  468b              MOV      r11,r1
000084  4630              MOV      r0,r6
000086  4639              MOV      r1,r7
000088  f7fffffe          BL       log
00008c  4652              MOV      r2,r10
00008e  465b              MOV      r3,r11
000090  e9cd0100          STRD     r0,r1,[sp,#0]
000094  f7fffffe          BL       __aeabi_ddiv
000098  4604              MOV      r4,r0
00009a  460d              MOV      r5,r1
                  |L13.156|
;;;183      }
00009c  bf00              NOP      
                  |L13.158|
;;;184      lua_pushnumber(L, res);
00009e  4622              MOV      r2,r4
0000a0  462b              MOV      r3,r5
0000a2  9802              LDR      r0,[sp,#8]
0000a4  f7fffffe          BL       lua_pushnumber
;;;185      return 1;
0000a8  2001              MOVS     r0,#1
;;;186    }
0000aa  e8bd8ffe          POP      {r1-r11,pc}
;;;187    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L13.176|
                          DCD      0x40240000

                          AREA ||i.math_max||, CODE, READONLY, ALIGN=2

                  math_max PROC
;;;217    
;;;218    static int math_max (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
;;;219      int n = lua_gettop(L);  /* number of arguments */
000006  4630              MOV      r0,r6
000008  f7fffffe          BL       lua_gettop
00000c  4605              MOV      r5,r0
;;;220      int imax = 1;  /* index of current maximum value */
00000e  2701              MOVS     r7,#1
;;;221      int i;
;;;222      luaL_argcheck(L, n >= 1, 1, "value expected");
000010  2d01              CMP      r5,#1
000012  da04              BGE      |L14.30|
000014  a20c              ADR      r2,|L14.72|
000016  2101              MOVS     r1,#1
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       luaL_argerror
                  |L14.30|
;;;223      for (i = 2; i <= n; i++) {
00001e  2402              MOVS     r4,#2
000020  e008              B        |L14.52|
                  |L14.34|
;;;224        if (lua_compare(L, imax, i, LUA_OPLT))
000022  2301              MOVS     r3,#1
000024  4622              MOV      r2,r4
000026  4639              MOV      r1,r7
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       lua_compare
00002e  b100              CBZ      r0,|L14.50|
;;;225          imax = i;
000030  4627              MOV      r7,r4
                  |L14.50|
000032  1c64              ADDS     r4,r4,#1              ;223
                  |L14.52|
000034  42ac              CMP      r4,r5                 ;223
000036  ddf4              BLE      |L14.34|
;;;226      }
;;;227      lua_pushvalue(L, imax);
000038  4639              MOV      r1,r7
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       lua_pushvalue
;;;228      return 1;
000040  2001              MOVS     r0,#1
;;;229    }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;230    
                          ENDP

000046  0000              DCW      0x0000
                  |L14.72|
000048  76616c75          DCB      "value expected",0
00004c  65206578
000050  70656374
000054  656400  
000057  00                DCB      0

                          AREA ||i.math_min||, CODE, READONLY, ALIGN=2

                  math_min PROC
;;;203    
;;;204    static int math_min (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
;;;205      int n = lua_gettop(L);  /* number of arguments */
000006  4638              MOV      r0,r7
000008  f7fffffe          BL       lua_gettop
00000c  4605              MOV      r5,r0
;;;206      int imin = 1;  /* index of current minimum value */
00000e  2601              MOVS     r6,#1
;;;207      int i;
;;;208      luaL_argcheck(L, n >= 1, 1, "value expected");
000010  2d01              CMP      r5,#1
000012  da04              BGE      |L15.30|
000014  a20c              ADR      r2,|L15.72|
000016  2101              MOVS     r1,#1
000018  4638              MOV      r0,r7
00001a  f7fffffe          BL       luaL_argerror
                  |L15.30|
;;;209      for (i = 2; i <= n; i++) {
00001e  2402              MOVS     r4,#2
000020  e008              B        |L15.52|
                  |L15.34|
;;;210        if (lua_compare(L, i, imin, LUA_OPLT))
000022  2301              MOVS     r3,#1
000024  4632              MOV      r2,r6
000026  4621              MOV      r1,r4
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       lua_compare
00002e  b100              CBZ      r0,|L15.50|
;;;211          imin = i;
000030  4626              MOV      r6,r4
                  |L15.50|
000032  1c64              ADDS     r4,r4,#1              ;209
                  |L15.52|
000034  42ac              CMP      r4,r5                 ;209
000036  ddf4              BLE      |L15.34|
;;;212      }
;;;213      lua_pushvalue(L, imin);
000038  4631              MOV      r1,r6
00003a  4638              MOV      r0,r7
00003c  f7fffffe          BL       lua_pushvalue
;;;214      return 1;
000040  2001              MOVS     r0,#1
;;;215    }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;216    
                          ENDP

000046  0000              DCW      0x0000
                  |L15.72|
000048  76616c75          DCB      "value expected",0
00004c  65206578
000050  70656374
000054  656400  
000057  00                DCB      0

                          AREA ||i.math_modf||, CODE, READONLY, ALIGN=1

                  math_modf PROC
;;;137    */
;;;138    static int math_modf (lua_State *L) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4682              MOV      r10,r0
;;;139      if (lua_isinteger(L ,1)) {
000006  2101              MOVS     r1,#1
000008  4650              MOV      r0,r10
00000a  f7fffffe          BL       lua_isinteger
00000e  b148              CBZ      r0,|L16.36|
;;;140        lua_settop(L, 1);  /* number is its own integer part */
000010  2101              MOVS     r1,#1
000012  4650              MOV      r0,r10
000014  f7fffffe          BL       lua_settop
;;;141        lua_pushnumber(L, 0);  /* no fractional part */
000018  2200              MOVS     r2,#0
00001a  4613              MOV      r3,r2
00001c  4650              MOV      r0,r10
00001e  f7fffffe          BL       lua_pushnumber
000022  e033              B        |L16.140|
                  |L16.36|
;;;142      }
;;;143      else {
;;;144        lua_Number n = luaL_checknumber(L, 1);
000024  2101              MOVS     r1,#1
000026  4650              MOV      r0,r10
000028  f7fffffe          BL       luaL_checknumber
00002c  4604              MOV      r4,r0
00002e  460d              MOV      r5,r1
;;;145        /* integer part (rounds toward zero) */
;;;146        lua_Number ip = (n < 0) ? l_mathop(ceil)(n) : l_mathop(floor)(n);
000030  2200              MOVS     r2,#0
000032  4613              MOV      r3,r2
000034  4620              MOV      r0,r4
000036  4629              MOV      r1,r5
000038  f7fffffe          BL       __aeabi_cdcmple
00003c  d204              BCS      |L16.72|
00003e  4620              MOV      r0,r4
000040  4629              MOV      r1,r5
000042  f7fffffe          BL       ceil
000046  e003              B        |L16.80|
                  |L16.72|
000048  4620              MOV      r0,r4
00004a  4629              MOV      r1,r5
00004c  f7fffffe          BL       floor
                  |L16.80|
000050  4606              MOV      r6,r0
000052  460f              MOV      r7,r1
;;;147        pushnumint(L, ip);
000054  463b              MOV      r3,r7
000056  4632              MOV      r2,r6
000058  4650              MOV      r0,r10
00005a  f7fffffe          BL       pushnumint
;;;148        /* fractional part (test needed for inf/-inf) */
;;;149        lua_pushnumber(L, (n == ip) ? l_mathop(0.0) : (n - ip));
00005e  4632              MOV      r2,r6
000060  463b              MOV      r3,r7
000062  4620              MOV      r0,r4
000064  4629              MOV      r1,r5
000066  f7fffffe          BL       __aeabi_cdcmpeq
00006a  d102              BNE      |L16.114|
00006c  2000              MOVS     r0,#0
00006e  4601              MOV      r1,r0
000070  e005              B        |L16.126|
                  |L16.114|
000072  4632              MOV      r2,r6
000074  463b              MOV      r3,r7
000076  4620              MOV      r0,r4
000078  4629              MOV      r1,r5
00007a  f7fffffe          BL       __aeabi_dsub
                  |L16.126|
00007e  4680              MOV      r8,r0
000080  4642              MOV      r2,r8
000082  460b              MOV      r3,r1
000084  4650              MOV      r0,r10
000086  f7fffffe          BL       lua_pushnumber
;;;150      }
00008a  bf00              NOP      
                  |L16.140|
;;;151      return 2;
00008c  2002              MOVS     r0,#2
;;;152    }
00008e  e8bd87f0          POP      {r4-r10,pc}
;;;153    
                          ENDP


                          AREA ||i.math_rad||, CODE, READONLY, ALIGN=2

                  math_rad PROC
;;;197    
;;;198    static int math_rad (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;199      lua_pushnumber(L, luaL_checknumber(L, 1) * (PI / l_mathop(180.0)));
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checknumber
00000e  4605              MOV      r5,r0
000010  4a06              LDR      r2,|L17.44|
000012  4b07              LDR      r3,|L17.48|
000014  f7fffffe          BL       __aeabi_dmul
000018  4607              MOV      r7,r0
00001a  463a              MOV      r2,r7
00001c  460b              MOV      r3,r1
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       lua_pushnumber
;;;200      return 1;
000024  2001              MOVS     r0,#1
;;;201    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;202    
                          ENDP

00002a  0000              DCW      0x0000
                  |L17.44|
                          DCD      0xa2529d39
                  |L17.48|
                          DCD      0x3f91df46

                          AREA ||i.math_random||, CODE, READONLY, ALIGN=2

                  math_random PROC
;;;463    
;;;464    static int math_random (lua_State *L) {
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
000004  b086              SUB      sp,sp,#0x18
;;;465      lua_Integer low, up;
;;;466      lua_Unsigned p;
;;;467      RanState *state = (RanState *)lua_touserdata(L, lua_upvalueindex(1));
000006  4938              LDR      r1,|L18.232|
000008  9806              LDR      r0,[sp,#0x18]
00000a  f7fffffe          BL       lua_touserdata
00000e  9004              STR      r0,[sp,#0x10]
;;;468      I rv = xorshift128plus(state->s);  /* next pseudo-random value */
000010  9804              LDR      r0,[sp,#0x10]
000012  f7fffffe          BL       xorshift128plus
000016  4682              MOV      r10,r0
000018  468b              MOV      r11,r1
;;;469      switch (lua_gettop(L)) {  /* check number of arguments */
00001a  9806              LDR      r0,[sp,#0x18]
00001c  f7fffffe          BL       lua_gettop
000020  b120              CBZ      r0,|L18.44|
000022  2801              CMP      r0,#1
000024  d011              BEQ      |L18.74|
000026  2802              CMP      r0,#2
000028  d133              BNE      |L18.146|
00002a  e025              B        |L18.120|
                  |L18.44|
;;;470        case 0: {  /* no arguments */
;;;471          lua_pushnumber(L, I2d(rv));  /* float between 0 and 1 */
00002c  4650              MOV      r0,r10
00002e  4659              MOV      r1,r11
000030  f7fffffe          BL       I2d
000034  4602              MOV      r2,r0
000036  460b              MOV      r3,r1
000038  e9cd0102          STRD     r0,r1,[sp,#8]
00003c  9806              LDR      r0,[sp,#0x18]
00003e  f7fffffe          BL       lua_pushnumber
;;;472          return 1;
000042  2001              MOVS     r0,#1
                  |L18.68|
;;;473        }
;;;474        case 1: {  /* only upper limit */
;;;475          low = 1;
;;;476          up = luaL_checkinteger(L, 1);
;;;477          if (up == 0) {  /* single 0 as argument? */
;;;478            lua_pushinteger(L, I2UInt(rv));  /* full random integer */
;;;479            return 1;
;;;480          }
;;;481          break;
;;;482        }
;;;483        case 2: {  /* lower and upper limits */
;;;484          low = luaL_checkinteger(L, 1);
;;;485          up = luaL_checkinteger(L, 2);
;;;486          break;
;;;487        }
;;;488        default: return luaL_error(L, "wrong number of arguments");
;;;489      }
;;;490      /* random integer in the interval [low, up] */
;;;491      luaL_argcheck(L, low <= up, 1, "interval is empty");
;;;492      /* project random integer into the interval [0, up - low] */
;;;493      p = project(I2UInt(rv), (lua_Unsigned)up - (lua_Unsigned)low, state);
;;;494      lua_pushinteger(L, p + (lua_Unsigned)low);
;;;495      return 1;
;;;496    }
000044  b007              ADD      sp,sp,#0x1c
000046  e8bd8ff0          POP      {r4-r11,pc}
                  |L18.74|
00004a  2401              MOVS     r4,#1                 ;475
00004c  2500              MOVS     r5,#0                 ;475
00004e  2101              MOVS     r1,#1                 ;476
000050  9806              LDR      r0,[sp,#0x18]         ;476
000052  f7fffffe          BL       luaL_checkinteger
000056  4606              MOV      r6,r0                 ;476
000058  460f              MOV      r7,r1                 ;476
00005a  2300              MOVS     r3,#0                 ;477
00005c  ea860003          EOR      r0,r6,r3              ;477
000060  ea870103          EOR      r1,r7,r3              ;477
000064  4308              ORRS     r0,r0,r1              ;477
000066  d106              BNE      |L18.118|
000068  4652              MOV      r2,r10                ;478
00006a  465b              MOV      r3,r11                ;478
00006c  9806              LDR      r0,[sp,#0x18]         ;478
00006e  f7fffffe          BL       lua_pushinteger
000072  2001              MOVS     r0,#1                 ;479
000074  e7e6              B        |L18.68|
                  |L18.118|
000076  e011              B        |L18.156|
                  |L18.120|
000078  2101              MOVS     r1,#1                 ;484
00007a  9806              LDR      r0,[sp,#0x18]         ;484
00007c  f7fffffe          BL       luaL_checkinteger
000080  4604              MOV      r4,r0                 ;484
000082  460d              MOV      r5,r1                 ;484
000084  2102              MOVS     r1,#2                 ;485
000086  9806              LDR      r0,[sp,#0x18]         ;485
000088  f7fffffe          BL       luaL_checkinteger
00008c  4606              MOV      r6,r0                 ;485
00008e  460f              MOV      r7,r1                 ;485
000090  e004              B        |L18.156|
                  |L18.146|
000092  a116              ADR      r1,|L18.236|
000094  9806              LDR      r0,[sp,#0x18]         ;488
000096  f7fffffe          BL       luaL_error
00009a  e7d3              B        |L18.68|
                  |L18.156|
00009c  bf00              NOP                            ;481
00009e  1b30              SUBS     r0,r6,r4              ;491
0000a0  eb770005          SBCS     r0,r7,r5              ;491
0000a4  da04              BGE      |L18.176|
0000a6  a218              ADR      r2,|L18.264|
0000a8  2101              MOVS     r1,#1                 ;491
0000aa  9806              LDR      r0,[sp,#0x18]         ;491
0000ac  f7fffffe          BL       luaL_argerror
                  |L18.176|
0000b0  9804              LDR      r0,[sp,#0x10]         ;493
0000b2  9000              STR      r0,[sp,#0]            ;493
0000b4  1b31              SUBS     r1,r6,r4              ;493
0000b6  eb670005          SBC      r0,r7,r5              ;493
0000ba  460a              MOV      r2,r1                 ;493
0000bc  4603              MOV      r3,r0                 ;493
0000be  e9cd1002          STRD     r1,r0,[sp,#8]         ;493
0000c2  4650              MOV      r0,r10                ;493
0000c4  4659              MOV      r1,r11                ;493
0000c6  f7fffffe          BL       project
0000ca  4680              MOV      r8,r0                 ;493
0000cc  4689              MOV      r9,r1                 ;493
0000ce  eb180004          ADDS     r0,r8,r4              ;494
0000d2  eb490105          ADC      r1,r9,r5              ;494
0000d6  4602              MOV      r2,r0                 ;494
0000d8  460b              MOV      r3,r1                 ;494
0000da  e9cd0102          STRD     r0,r1,[sp,#8]         ;494
0000de  9806              LDR      r0,[sp,#0x18]         ;494
0000e0  f7fffffe          BL       lua_pushinteger
0000e4  2001              MOVS     r0,#1                 ;495
0000e6  e7ad              B        |L18.68|
;;;497    
                          ENDP

                  |L18.232|
                          DCD      0xfff0b9d7
                  |L18.236|
0000ec  77726f6e          DCB      "wrong number of arguments",0
0000f0  67206e75
0000f4  6d626572
0000f8  206f6620
0000fc  61726775
000100  6d656e74
000104  7300    
000106  00                DCB      0
000107  00                DCB      0
                  |L18.264|
000108  696e7465          DCB      "interval is empty",0
00010c  7276616c
000110  20697320
000114  656d7074
000118  7900    
00011a  00                DCB      0
00011b  00                DCB      0

                          AREA ||i.math_randomseed||, CODE, READONLY, ALIGN=2

                  math_randomseed PROC
;;;507    
;;;508    static int math_randomseed (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;509      RanState *state = (RanState *)lua_touserdata(L, lua_upvalueindex(1));
000006  4909              LDR      r1,|L19.44|
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       lua_touserdata
00000e  4607              MOV      r7,r0
;;;510      lua_Integer n = luaL_checkinteger(L, 1);
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       luaL_checkinteger
000018  4605              MOV      r5,r0
00001a  460e              MOV      r6,r1
;;;511      setseed(state->s, n);
00001c  462a              MOV      r2,r5
00001e  4633              MOV      r3,r6
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       setseed
;;;512      return 0;
000026  2000              MOVS     r0,#0
;;;513    }
000028  e8bd81f0          POP      {r4-r8,pc}
;;;514    
                          ENDP

                  |L19.44|
                          DCD      0xfff0b9d7

                          AREA ||i.math_sin||, CODE, READONLY, ALIGN=1

                  math_sin PROC
;;;38     
;;;39     static int math_sin (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;40       lua_pushnumber(L, l_mathop(sin)(luaL_checknumber(L, 1)));
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checknumber
00000e  4605              MOV      r5,r0
000010  f7fffffe          BL       ||sin||
000014  4607              MOV      r7,r0
000016  463a              MOV      r2,r7
000018  460b              MOV      r3,r1
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       lua_pushnumber
;;;41       return 1;
000020  2001              MOVS     r0,#1
;;;42     }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;43     
                          ENDP


                          AREA ||i.math_sqrt||, CODE, READONLY, ALIGN=1

                  math_sqrt PROC
;;;154    
;;;155    static int math_sqrt (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;156      lua_pushnumber(L, l_mathop(sqrt)(luaL_checknumber(L, 1)));
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checknumber
00000e  4605              MOV      r5,r0
000010  f7fffffe          BL       sqrt
000014  4607              MOV      r7,r0
000016  463a              MOV      r2,r7
000018  460b              MOV      r3,r1
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       lua_pushnumber
;;;157      return 1;
000020  2001              MOVS     r0,#1
;;;158    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;159    
                          ENDP


                          AREA ||i.math_tan||, CODE, READONLY, ALIGN=1

                  math_tan PROC
;;;48     
;;;49     static int math_tan (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;50       lua_pushnumber(L, l_mathop(tan)(luaL_checknumber(L, 1)));
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checknumber
00000e  4605              MOV      r5,r0
000010  f7fffffe          BL       tan
000014  4607              MOV      r7,r0
000016  463a              MOV      r2,r7
000018  460b              MOV      r3,r1
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       lua_pushnumber
;;;51       return 1;
000020  2001              MOVS     r0,#1
;;;52     }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;53     
                          ENDP


                          AREA ||i.math_toint||, CODE, READONLY, ALIGN=1

                  math_toint PROC
;;;71     
;;;72     static int math_toint (lua_State *L) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4604              MOV      r4,r0
;;;73       int valid;
;;;74       lua_Integer n = lua_tointegerx(L, 1, &valid);
000004  466a              MOV      r2,sp
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       lua_tointegerx
00000e  4605              MOV      r5,r0
000010  460e              MOV      r6,r1
;;;75       if (valid)
000012  9800              LDR      r0,[sp,#0]
000014  b128              CBZ      r0,|L23.34|
;;;76         lua_pushinteger(L, n);
000016  462a              MOV      r2,r5
000018  4633              MOV      r3,r6
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       lua_pushinteger
000020  e006              B        |L23.48|
                  |L23.34|
;;;77       else {
;;;78         luaL_checkany(L, 1);
000022  2101              MOVS     r1,#1
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       luaL_checkany
;;;79         lua_pushnil(L);  /* value is not convertible to integer */
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       lua_pushnil
                  |L23.48|
;;;80       }
;;;81       return 1;
000030  2001              MOVS     r0,#1
;;;82     }
000032  bdf8              POP      {r3-r7,pc}
;;;83     
                          ENDP


                          AREA ||i.math_type||, CODE, READONLY, ALIGN=2

                  math_type PROC
;;;231    
;;;232    static int math_type (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;233      if (lua_type(L, 1) == LUA_TNUMBER) {
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       lua_type
00000c  2803              CMP      r0,#3
00000e  d10e              BNE      |L24.46|
;;;234          if (lua_isinteger(L, 1))
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       lua_isinteger
000018  b120              CBZ      r0,|L24.36|
;;;235            lua_pushliteral(L, "integer");
00001a  a109              ADR      r1,|L24.64|
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       lua_pushstring
000022  e00b              B        |L24.60|
                  |L24.36|
;;;236          else
;;;237            lua_pushliteral(L, "float");
000024  a108              ADR      r1,|L24.72|
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       lua_pushstring
00002c  e006              B        |L24.60|
                  |L24.46|
;;;238      }
;;;239      else {
;;;240        luaL_checkany(L, 1);
00002e  2101              MOVS     r1,#1
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       luaL_checkany
;;;241        lua_pushnil(L);
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       lua_pushnil
                  |L24.60|
;;;242      }
;;;243      return 1;
00003c  2001              MOVS     r0,#1
;;;244    }
00003e  bd10              POP      {r4,pc}
;;;245    
                          ENDP

                  |L24.64|
000040  696e7465          DCB      "integer",0
000044  67657200
                  |L24.72|
000048  666c6f61          DCB      "float",0
00004c  7400    
00004e  00                DCB      0
00004f  00                DCB      0

                          AREA ||i.math_ult||, CODE, READONLY, ALIGN=1

                  math_ult PROC
;;;160    
;;;161    static int math_ult (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;162      lua_Integer a = luaL_checkinteger(L, 1);
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checkinteger
00000e  4605              MOV      r5,r0
000010  460e              MOV      r6,r1
;;;163      lua_Integer b = luaL_checkinteger(L, 2);
000012  2102              MOVS     r1,#2
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       luaL_checkinteger
00001a  4607              MOV      r7,r0
00001c  4688              MOV      r8,r1
;;;164      lua_pushboolean(L, (lua_Unsigned)a < (lua_Unsigned)b);
00001e  1bea              SUBS     r2,r5,r7
000020  eb760008          SBCS     r0,r6,r8
000024  d201              BCS      |L25.42|
000026  2001              MOVS     r0,#1
000028  e000              B        |L25.44|
                  |L25.42|
00002a  2000              MOVS     r0,#0
                  |L25.44|
00002c  4601              MOV      r1,r0
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       lua_pushboolean
;;;165      return 1;
000034  2001              MOVS     r0,#1
;;;166    }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;167    
                          ENDP


                          AREA ||i.project||, CODE, READONLY, ALIGN=2

                  project PROC
;;;438    
;;;439    static lua_Unsigned project (lua_Unsigned ran, lua_Unsigned n,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;440                                 RanState *state) {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dda020          LDR      r10,[sp,#0x20]
;;;441      if (n < LUA_MAXUNSIGNED / MAXBIAS)
000010  4929              LDR      r1,|L26.184|
000012  f24100c6          MOV      r0,#0x10c6
000016  1a71              SUBS     r1,r6,r1
000018  eb770000          SBCS     r0,r7,r0
00001c  d20b              BCS      |L26.54|
;;;442        return ran % (n + 1);
00001e  1c74              ADDS     r4,r6,#1
000020  f1470300          ADC      r3,r7,#0
000024  4622              MOV      r2,r4
000026  4640              MOV      r0,r8
000028  4649              MOV      r1,r9
00002a  f7fffffe          BL       __aeabi_uldivmod
00002e  4610              MOV      r0,r2
000030  4619              MOV      r1,r3
                  |L26.50|
;;;443      else {
;;;444        /* compute the smallest (2^b - 1) not smaller than 'n' */
;;;445        lua_Unsigned lim = n;
;;;446        lim |= (lim >> 1);
;;;447        lim |= (lim >> 2);
;;;448        lim |= (lim >> 4);
;;;449        lim |= (lim >> 8);
;;;450        lim |= (lim >> 16);
;;;451    #if (LUA_MAXINTEGER >> 30 >> 2) > 0
;;;452        lim |= (lim >> 32);  /* integer type has more than 32 bits */
;;;453    #endif
;;;454        lua_assert((lim & (lim + 1)) == 0  /* 'lim + 1' is a power of 2 */
;;;455          && lim >= n  /* not smaller than 'n' */
;;;456          && (lim >> 1) < n);  /* it is the smallest one */
;;;457        while ((ran & lim) > n)
;;;458          ran = I2UInt(xorshift128plus(state->s));
;;;459        return ran & lim;
;;;460      }
;;;461    }
000032  e8bd87f0          POP      {r4-r10,pc}
                  |L26.54|
000036  4634              MOV      r4,r6                 ;445
000038  463d              MOV      r5,r7                 ;445
00003a  0869              LSRS     r1,r5,#1              ;446
00003c  ea4f0034          RRX      r0,r4                 ;446
000040  4626              MOV      r6,r4                 ;446
000042  462f              MOV      r7,r5                 ;446
000044  ea400406          ORR      r4,r0,r6              ;446
000048  ea410507          ORR      r5,r1,r7              ;446
00004c  ea4f0094          LSR      r0,r4,#2              ;447
000050  ea407085          ORR      r0,r0,r5,LSL #30      ;447
000054  ea400404          ORR      r4,r0,r4              ;447
000058  ea450595          ORR      r5,r5,r5,LSR #2       ;447
00005c  ea4f1114          LSR      r1,r4,#4              ;448
000060  ea417105          ORR      r1,r1,r5,LSL #28      ;448
000064  ea410404          ORR      r4,r1,r4              ;448
000068  ea451515          ORR      r5,r5,r5,LSR #4       ;448
00006c  ea4f2014          LSR      r0,r4,#8              ;449
000070  ea406005          ORR      r0,r0,r5,LSL #24      ;449
000074  ea400404          ORR      r4,r0,r4              ;449
000078  ea452515          ORR      r5,r5,r5,LSR #8       ;449
00007c  ea4f4014          LSR      r0,r4,#16             ;450
000080  ea404005          ORR      r0,r0,r5,LSL #16      ;450
000084  ea400404          ORR      r4,r0,r4              ;450
000088  ea454515          ORR      r5,r5,r5,LSR #16      ;450
00008c  ea450404          ORR      r4,r5,r4              ;452
000090  e004              B        |L26.156|
                  |L26.146|
000092  4650              MOV      r0,r10                ;458
000094  f7fffffe          BL       xorshift128plus
000098  4680              MOV      r8,r0                 ;458
00009a  4689              MOV      r9,r1                 ;458
                  |L26.156|
00009c  ea080004          AND      r0,r8,r4              ;457
0000a0  ea090105          AND      r1,r9,r5              ;457
0000a4  1a30              SUBS     r0,r6,r0              ;457
0000a6  eb770001          SBCS     r0,r7,r1              ;457
0000aa  d3f2              BCC      |L26.146|
0000ac  ea080004          AND      r0,r8,r4              ;459
0000b0  ea090105          AND      r1,r9,r5              ;459
0000b4  e7bd              B        |L26.50|
;;;462    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L26.184|
                          DCD      0xf7a0b5ed

                          AREA ||i.pushnumint||, CODE, READONLY, ALIGN=2

                  pushnumint PROC
;;;84     
;;;85     static void pushnumint (lua_State *L, lua_Number d) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4680              MOV      r8,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
;;;86       lua_Integer n;
;;;87       if (lua_numbertointeger(d, &n))  /* does 'd' fit in an integer? */
00000a  2200              MOVS     r2,#0
00000c  4b10              LDR      r3,|L27.80|
00000e  4620              MOV      r0,r4
000010  4629              MOV      r1,r5
000012  f7fffffe          BL       __aeabi_cdrcmple
000016  d814              BHI      |L27.66|
000018  2200              MOVS     r2,#0
00001a  4b0e              LDR      r3,|L27.84|
00001c  4620              MOV      r0,r4
00001e  4629              MOV      r1,r5
000020  f7fffffe          BL       __aeabi_cdcmple
000024  d20d              BCS      |L27.66|
000026  4620              MOV      r0,r4
000028  4629              MOV      r1,r5
00002a  f7fffffe          BL       __aeabi_d2lz
00002e  4606              MOV      r6,r0
000030  460f              MOV      r7,r1
000032  2001              MOVS     r0,#1
000034  b128              CBZ      r0,|L27.66|
;;;88         lua_pushinteger(L, n);  /* result is integer */
000036  4632              MOV      r2,r6
000038  463b              MOV      r3,r7
00003a  4640              MOV      r0,r8
00003c  f7fffffe          BL       lua_pushinteger
000040  e004              B        |L27.76|
                  |L27.66|
;;;89       else
;;;90         lua_pushnumber(L, d);  /* result is float */
000042  4622              MOV      r2,r4
000044  462b              MOV      r3,r5
000046  4640              MOV      r0,r8
000048  f7fffffe          BL       lua_pushnumber
                  |L27.76|
;;;91     }
00004c  e8bd81f0          POP      {r4-r8,pc}
;;;92     
                          ENDP

                  |L27.80|
                          DCD      0xc3e00000
                  |L27.84|
                          DCD      0x43e00000

                          AREA ||i.setrandfunc||, CODE, READONLY, ALIGN=2

                  setrandfunc PROC
;;;521    
;;;522    static void setrandfunc (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;523      RanState *state = (RanState *)lua_newuserdatauv(L, sizeof(RanState), 0);
000004  2200              MOVS     r2,#0
000006  2110              MOVS     r1,#0x10
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       lua_newuserdatauv
00000e  4605              MOV      r5,r0
;;;524      setseed(state->s, 0);
000010  2200              MOVS     r2,#0
000012  4613              MOV      r3,r2
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       setseed
;;;525      luaL_setfuncs(L, randfuncs, 1);
00001a  2201              MOVS     r2,#1
00001c  4902              LDR      r1,|L28.40|
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       luaL_setfuncs
;;;526    }
000024  bd70              POP      {r4-r6,pc}
;;;527    
                          ENDP

000026  0000              DCW      0x0000
                  |L28.40|
                          DCD      randfuncs

                          AREA ||i.setseed||, CODE, READONLY, ALIGN=1

                  setseed PROC
;;;498    
;;;499    static void setseed (I *state, lua_Integer n) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
;;;500      int i;
;;;501      state[0] = Int2I(n);
00000a  e9c64500          STRD     r4,r5,[r6,#0]
;;;502      state[1] = Int2I(~n);
00000e  43e1              MVNS     r1,r4
000010  43e8              MVNS     r0,r5
000012  e9c61002          STRD     r1,r0,[r6,#8]
;;;503      for (i = 0; i < 16; i++)
000016  2700              MOVS     r7,#0
000018  e003              B        |L29.34|
                  |L29.26|
;;;504        xorshift128plus(state);  /* discard initial values */
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       xorshift128plus
000020  1c7f              ADDS     r7,r7,#1              ;503
                  |L29.34|
000022  2f10              CMP      r7,#0x10              ;503
000024  dbf9              BLT      |L29.26|
;;;505    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;506    
                          ENDP


                          AREA ||i.xorshift128plus||, CODE, READONLY, ALIGN=1

                  xorshift128plus PROC
;;;272    
;;;273    static I xorshift128plus (I *state) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4604              MOV      r4,r0
;;;274      I x = state[0];
000004  e9d45600          LDRD     r5,r6,[r4,#0]
;;;275      I y = state[1];
000008  e9d42302          LDRD     r2,r3,[r4,#8]
;;;276      state[0] = y;
00000c  e9c42300          STRD     r2,r3,[r4,#0]
;;;277      x ^= x << 23;
000010  05f0              LSLS     r0,r6,#23
000012  ea402055          ORR      r0,r0,r5,LSR #9
000016  ea8555c5          EOR      r5,r5,r5,LSL #23
00001a  4046              EORS     r6,r6,r0
;;;278      state[1] = (x ^ (x >> 18)) ^ (y ^ (y >> 5));
00001c  0ca9              LSRS     r1,r5,#18
00001e  ea413186          ORR      r1,r1,r6,LSL #14
000022  4069              EORS     r1,r1,r5
000024  ea864096          EOR      r0,r6,r6,LSR #18
000028  ea4f1c52          LSR      r12,r2,#5
00002c  ea4c6cc3          ORR      r12,r12,r3,LSL #27
000030  ea8c0c02          EOR      r12,r12,r2
000034  ea831753          EOR      r7,r3,r3,LSR #5
000038  ea81010c          EOR      r1,r1,r12
00003c  4078              EORS     r0,r0,r7
00003e  e9c41002          STRD     r1,r0,[r4,#8]
;;;279      return state[1] + y;
000042  e9d41002          LDRD     r1,r0,[r4,#8]
000046  188f              ADDS     r7,r1,r2
000048  eb400103          ADC      r1,r0,r3
00004c  4638              MOV      r0,r7
;;;280    }
00004e  bdf0              POP      {r4-r7,pc}
;;;281    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  randfuncs
                          DCD      ||.conststring||
                          DCD      math_random
                          DCD      ||.conststring||+0x8
                          DCD      math_randomseed
                          DCD      0x00000000
                          DCD      0x00000000
                  mathlib
                          DCD      ||.conststring||+0x14
                          DCD      math_abs
                          DCD      ||.conststring||+0x18
                          DCD      math_acos
                          DCD      ||.conststring||+0x20
                          DCD      math_asin
                          DCD      ||.conststring||+0x28
                          DCD      math_atan
                          DCD      ||.conststring||+0x30
                          DCD      math_ceil
                          DCD      ||.conststring||+0x38
                          DCD      math_cos
                          DCD      ||.conststring||+0x3c
                          DCD      math_deg
                          DCD      ||.conststring||+0x40
                          DCD      math_exp
                          DCD      ||.conststring||+0x44
                          DCD      math_toint
                          DCD      ||.conststring||+0x50
                          DCD      math_floor
                          DCD      ||.conststring||+0x58
                          DCD      math_fmod
                          DCD      ||.conststring||+0x60
                          DCD      math_ult
                          DCD      ||.conststring||+0x64
                          DCD      math_log
                          DCD      ||.conststring||+0x68
                          DCD      math_max
                          DCD      ||.conststring||+0x6c
                          DCD      math_min
                          DCD      ||.conststring||+0x70
                          DCD      math_modf
                          DCD      ||.conststring||+0x78
                          DCD      math_rad
                          DCD      ||.conststring||+0x7c
                          DCD      math_sin
                          DCD      ||.conststring||+0x80
                          DCD      math_sqrt
                          DCD      ||.conststring||+0x88
                          DCD      math_tan
                          DCD      ||.conststring||+0x8c
                          DCD      math_type
                          DCD      ||.conststring||
                          DCD      0x00000000
                          DCD      ||.conststring||+0x8
                          DCD      0x00000000
                          DCD      ||.conststring||+0x94
                          DCD      0x00000000
                          DCD      ||.conststring||+0x98
                          DCD      0x00000000
                          DCD      ||.conststring||+0xa0
                          DCD      0x00000000
                          DCD      ||.conststring||+0xac
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  72616e64          DCB      "random",0
000004  6f6d00  
000007  00                DCB      0
000008  72616e64          DCB      "randomseed",0
00000c  6f6d7365
000010  656400  
000013  00                DCB      0
000014  61627300          DCB      "abs",0
000018  61636f73          DCB      "acos",0
00001c  00      
00001d  00                DCB      0
00001e  00                DCB      0
00001f  00                DCB      0
000020  6173696e          DCB      "asin",0
000024  00      
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0
000028  6174616e          DCB      "atan",0
00002c  00      
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
000030  6365696c          DCB      "ceil",0
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0
000038  636f7300          DCB      "cos",0
00003c  64656700          DCB      "deg",0
000040  65787000          DCB      "exp",0
000044  746f696e          DCB      "tointeger",0
000048  74656765
00004c  7200    
00004e  00                DCB      0
00004f  00                DCB      0
000050  666c6f6f          DCB      "floor",0
000054  7200    
000056  00                DCB      0
000057  00                DCB      0
000058  666d6f64          DCB      "fmod",0
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0
000060  756c7400          DCB      "ult",0
000064  6c6f6700          DCB      "log",0
000068  6d617800          DCB      "max",0
00006c  6d696e00          DCB      "min",0
000070  6d6f6466          DCB      "modf",0
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
000078  72616400          DCB      "rad",0
00007c  73696e00          DCB      "sin",0
000080  73717274          DCB      "sqrt",0
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
000088  74616e00          DCB      "tan",0
00008c  74797065          DCB      "type",0
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0
000094  706900            DCB      "pi",0
000097  00                DCB      0
000098  68756765          DCB      "huge",0
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
0000a0  6d617869          DCB      "maxinteger",0
0000a4  6e746567
0000a8  657200  
0000ab  00                DCB      0
0000ac  6d696e69          DCB      "mininteger",0
0000b0  6e746567
0000b4  657200  
