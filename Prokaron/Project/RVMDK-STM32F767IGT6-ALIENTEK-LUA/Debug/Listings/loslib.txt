; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\loslib.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\loslib.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\loslib.crf ..\..\..\M6P1(L)_Lua\lua\loslib.c]
                          THUMB

                          AREA ||i.checkoption||, CODE, READONLY, ALIGN=2

                  checkoption PROC
;;;259    
;;;260    static const char *checkoption (lua_State *L, const char *conv,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;261                                    ptrdiff_t convlen, char *buff) {
000004  4681              MOV      r9,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  461f              MOV      r7,r3
;;;262      const char *option = LUA_STRFTIMEOPTIONS;
00000c  4e14              LDR      r6,|L1.96|
;;;263      int oplen = 1;  /* length of options being checked */
00000e  2401              MOVS     r4,#1
;;;264      for (; *option != '\0' && oplen <= convlen; option += oplen) {
000010  e015              B        |L1.62|
                  |L1.18|
;;;265        if (*option == '|')  /* next block? */
000012  7830              LDRB     r0,[r6,#0]
000014  287c              CMP      r0,#0x7c
000016  d101              BNE      |L1.28|
;;;266          oplen++;  /* will check options with next length (+1) */
000018  1c64              ADDS     r4,r4,#1
00001a  e00f              B        |L1.60|
                  |L1.28|
;;;267        else if (memcmp(conv, option, oplen) == 0) {  /* match? */
00001c  4622              MOV      r2,r4
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       memcmp
000026  b948              CBNZ     r0,|L1.60|
;;;268          memcpy(buff, conv, oplen);  /* copy valid option to buffer */
000028  4622              MOV      r2,r4
00002a  4629              MOV      r1,r5
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       __aeabi_memcpy
;;;269          buff[oplen] = '\0';
000032  2000              MOVS     r0,#0
000034  5538              STRB     r0,[r7,r4]
;;;270          return conv + oplen;  /* return next item */
000036  1928              ADDS     r0,r5,r4
                  |L1.56|
;;;271        }
;;;272      }
;;;273      luaL_argerror(L, 1,
;;;274        lua_pushfstring(L, "invalid conversion specifier '%%%s'", conv));
;;;275      return conv;  /* to avoid warnings */
;;;276    }
000038  e8bd87f0          POP      {r4-r10,pc}
                  |L1.60|
00003c  4426              ADD      r6,r6,r4              ;264
                  |L1.62|
00003e  7830              LDRB     r0,[r6,#0]            ;264
000040  b108              CBZ      r0,|L1.70|
000042  4544              CMP      r4,r8                 ;264
000044  dde5              BLE      |L1.18|
                  |L1.70|
000046  462a              MOV      r2,r5                 ;273
000048  a106              ADR      r1,|L1.100|
00004a  4648              MOV      r0,r9                 ;273
00004c  f7fffffe          BL       lua_pushfstring
000050  4682              MOV      r10,r0                ;273
000052  4652              MOV      r2,r10                ;273
000054  2101              MOVS     r1,#1                 ;273
000056  4648              MOV      r0,r9                 ;273
000058  f7fffffe          BL       luaL_argerror
00005c  4628              MOV      r0,r5                 ;275
00005e  e7eb              B        |L1.56|
;;;277    
                          ENDP

                  |L1.96|
                          DCD      ||.conststring||+0x88
                  |L1.100|
000064  696e7661          DCB      "invalid conversion specifier '%%%s'",0
000068  6c696420
00006c  636f6e76
000070  65727369
000074  6f6e2073
000078  70656369
00007c  66696572
000080  20272525
000084  25732700

                          AREA ||i.getboolfield||, CODE, READONLY, ALIGN=1

                  getboolfield PROC
;;;225    
;;;226    static int getboolfield (lua_State *L, const char *key) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;227      int res;
;;;228      res = (lua_getfield(L, -1, key) == LUA_TNIL) ? -1 : lua_toboolean(L, -1);
000006  4622              MOV      r2,r4
000008  f04f31ff          MOV      r1,#0xffffffff
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lua_getfield
000012  b910              CBNZ     r0,|L2.26|
000014  f04f30ff          MOV      r0,#0xffffffff
000018  e004              B        |L2.36|
                  |L2.26|
00001a  f04f31ff          MOV      r1,#0xffffffff
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       lua_toboolean
                  |L2.36|
000024  4606              MOV      r6,r0
;;;229      lua_pop(L, 1);
000026  f06f0101          MVN      r1,#1
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       lua_settop
;;;230      return res;
000030  4630              MOV      r0,r6
;;;231    }
000032  bd70              POP      {r4-r6,pc}
;;;232    
                          ENDP


                          AREA ||i.getfield||, CODE, READONLY, ALIGN=2

                  getfield PROC
;;;238    
;;;239    static int getfield (lua_State *L, const char *key, int d, int delta) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4681              MOV      r9,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;240      int isnum;
;;;241      int t = lua_getfield(L, -1, key);  /* get field and its type */
00000c  4642              MOV      r2,r8
00000e  f04f31ff          MOV      r1,#0xffffffff
000012  4648              MOV      r0,r9
000014  f7fffffe          BL       lua_getfield
000018  4682              MOV      r10,r0
;;;242      lua_Integer res = lua_tointegerx(L, -1, &isnum);
00001a  466a              MOV      r2,sp
00001c  f04f31ff          MOV      r1,#0xffffffff
000020  4648              MOV      r0,r9
000022  f7fffffe          BL       lua_tointegerx
000026  4604              MOV      r4,r0
000028  460d              MOV      r5,r1
;;;243      if (!isnum) {  /* field is not an integer? */
00002a  9800              LDR      r0,[sp,#0]
00002c  b998              CBNZ     r0,|L3.86|
;;;244        if (t != LUA_TNIL)  /* some other value? */
00002e  f1ba0f00          CMP      r10,#0
000032  d006              BEQ      |L3.66|
;;;245          return luaL_error(L, "field '%s' is not an integer", key);
000034  4642              MOV      r2,r8
000036  a114              ADR      r1,|L3.136|
000038  4648              MOV      r0,r9
00003a  f7fffffe          BL       luaL_error
                  |L3.62|
;;;246        else if (d < 0)  /* absent field; no default? */
;;;247          return luaL_error(L, "field '%s' missing in date table", key);
;;;248        res = d;
;;;249      }
;;;250      else {
;;;251        if (!(-L_MAXDATEFIELD <= res && res <= L_MAXDATEFIELD))
;;;252          return luaL_error(L, "field '%s' is out-of-bound", key);
;;;253        res -= delta;
;;;254      }
;;;255      lua_pop(L, 1);
;;;256      return (int)res;
;;;257    }
00003e  e8bd8ff8          POP      {r3-r11,pc}
                  |L3.66|
000042  2e00              CMP      r6,#0                 ;246
000044  da05              BGE      |L3.82|
000046  4642              MOV      r2,r8                 ;247
000048  a117              ADR      r1,|L3.168|
00004a  4648              MOV      r0,r9                 ;247
00004c  f7fffffe          BL       luaL_error
000050  e7f5              B        |L3.62|
                  |L3.82|
000052  4634              MOV      r4,r6                 ;248
000054  e011              B        |L3.122|
                  |L3.86|
000056  491d              LDR      r1,|L3.204|
000058  1a61              SUBS     r1,r4,r1              ;251
00005a  f17530ff          SBCS     r0,r5,#0xffffffff     ;251
00005e  db05              BLT      |L3.108|
000060  f06f4140          MVN      r1,#0xc0000000        ;251
000064  2000              MOVS     r0,#0                 ;251
000066  1b09              SUBS     r1,r1,r4              ;251
000068  41a8              SBCS     r0,r0,r5              ;251
00006a  da05              BGE      |L3.120|
                  |L3.108|
00006c  4642              MOV      r2,r8                 ;252
00006e  a118              ADR      r1,|L3.208|
000070  4648              MOV      r0,r9                 ;252
000072  f7fffffe          BL       luaL_error
000076  e7e2              B        |L3.62|
                  |L3.120|
000078  1be4              SUBS     r4,r4,r7              ;253
                  |L3.122|
00007a  f06f0101          MVN      r1,#1                 ;255
00007e  4648              MOV      r0,r9                 ;255
000080  f7fffffe          BL       lua_settop
000084  4620              MOV      r0,r4                 ;256
000086  e7da              B        |L3.62|
;;;258    
                          ENDP

                  |L3.136|
000088  6669656c          DCB      "field '%s' is not an integer",0
00008c  64202725
000090  73272069
000094  73206e6f
000098  7420616e
00009c  20696e74
0000a0  65676572
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L3.168|
0000a8  6669656c          DCB      "field '%s' missing in date table",0
0000ac  64202725
0000b0  7327206d
0000b4  69737369
0000b8  6e672069
0000bc  6e206461
0000c0  74652074
0000c4  61626c65
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L3.204|
                          DCD      0xc0000001
                  |L3.208|
0000d0  6669656c          DCB      "field '%s' is out-of-bound",0
0000d4  64202725
0000d8  73272069
0000dc  73206f75
0000e0  742d6f66
0000e4  2d626f75
0000e8  6e6400  
0000eb  00                DCB      0

                          AREA ||i.l_checktime||, CODE, READONLY, ALIGN=2

                  l_checktime PROC
;;;68     
;;;69     static time_t l_checktime (lua_State *L, int arg) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;70       lua_Integer t = luaL_checkinteger(L, arg);
000008  4639              MOV      r1,r7
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       luaL_checkinteger
000010  4604              MOV      r4,r0
000012  460d              MOV      r5,r1
;;;71       luaL_argcheck(L, (time_t)t == t, arg, "time out-of-bounds");
000014  ea840104          EOR      r1,r4,r4
000018  4329              ORRS     r1,r1,r5
00001a  d004              BEQ      |L4.38|
00001c  a203              ADR      r2,|L4.44|
00001e  4639              MOV      r1,r7
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       luaL_argerror
                  |L4.38|
;;;72       return (time_t)t;
000026  4620              MOV      r0,r4
;;;73     }
000028  e8bd81f0          POP      {r4-r8,pc}
;;;74     
                          ENDP

                  |L4.44|
00002c  74696d65          DCB      "time out-of-bounds",0
000030  206f7574
000034  2d6f662d
000038  626f756e
00003c  647300  
00003f  00                DCB      0

                          AREA ||i.luaopen_os||, CODE, READONLY, ALIGN=2

                  luaopen_os PROC
;;;404    
;;;405    LUAMOD_API int luaopen_os (lua_State *L) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;406      luaL_newlib(L, syslib);
000004  2088              MOVS     r0,#0x88
000006  2200              MOVS     r2,#0
000008  4b08              LDR      r3,|L5.44|
00000a  9000              STR      r0,[sp,#0]
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       luaL_checkversion_
000012  220b              MOVS     r2,#0xb
000014  2100              MOVS     r1,#0
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       lua_createtable
00001c  2200              MOVS     r2,#0
00001e  4904              LDR      r1,|L5.48|
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       luaL_setfuncs
;;;407      return 1;
000026  2001              MOVS     r0,#1
;;;408    }
000028  bd38              POP      {r3-r5,pc}
;;;409    
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      0x407f8000
                  |L5.48|
                          DCD      syslib

                          AREA ||i.os_clock||, CODE, READONLY, ALIGN=2

                  os_clock PROC
;;;182    
;;;183    static int os_clock (lua_State *L) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4604              MOV      r4,r0
;;;184      lua_pushnumber(L, ((lua_Number)clock())/(lua_Number)CLOCKS_PER_SEC);
000006  f7fffffe          BL       clock
00000a  4681              MOV      r9,r0
00000c  f7fffffe          BL       __aeabi_ui2d
000010  4607              MOV      r7,r0
000012  2200              MOVS     r2,#0
000014  4b05              LDR      r3,|L6.44|
000016  f7fffffe          BL       __aeabi_ddiv
00001a  4605              MOV      r5,r0
00001c  462a              MOV      r2,r5
00001e  460b              MOV      r3,r1
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       lua_pushnumber
;;;185      return 1;
000026  2001              MOVS     r0,#1
;;;186    }
000028  e8bd87f0          POP      {r4-r10,pc}
;;;187    
                          ENDP

                  |L6.44|
                          DCD      0x40590000

                          AREA ||i.os_date||, CODE, READONLY, ALIGN=2

                  os_date PROC
;;;282    
;;;283    static int os_date (lua_State *L) {
000000  e92d43f0          PUSH     {r4-r9,lr}
000004  b091              SUB      sp,sp,#0x44
000006  f5ad5d80          SUB      sp,sp,#0x1000
00000a  4607              MOV      r7,r0
;;;284      size_t slen;
;;;285      const char *s = luaL_optlstring(L, 1, "%c", &slen);
00000c  f50d5382          ADD      r3,sp,#0x1040
000010  a241              ADR      r2,|L7.280|
000012  2101              MOVS     r1,#1
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       luaL_optlstring
00001a  4604              MOV      r4,r0
;;;286      time_t t = luaL_opt(L, l_checktime, 2, time(NULL));
00001c  2102              MOVS     r1,#2
00001e  4638              MOV      r0,r7
000020  f7fffffe          BL       lua_type
000024  2800              CMP      r0,#0
000026  dc03              BGT      |L7.48|
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       time
00002e  e003              B        |L7.56|
                  |L7.48|
000030  2102              MOVS     r1,#2
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       l_checktime
                  |L7.56|
000038  f50d5180          ADD      r1,sp,#0x1000
00003c  63c8              STR      r0,[r1,#0x3c]
;;;287      const char *se = s + slen;  /* 's' end */
00003e  4608              MOV      r0,r1
000040  6c00              LDR      r0,[r0,#0x40]
000042  1826              ADDS     r6,r4,r0
;;;288      struct tm tmr, *stm;
;;;289      if (*s == '!') {  /* UTC? */
000044  7820              LDRB     r0,[r4,#0]
000046  2821              CMP      r0,#0x21
000048  d106              BNE      |L7.88|
;;;290        stm = l_gmtime(&t, &tmr);
00004a  f101003c          ADD      r0,r1,#0x3c
00004e  f7fffffe          BL       gmtime
000052  4605              MOV      r5,r0
;;;291        s++;  /* skip '!' */
000054  1c64              ADDS     r4,r4,#1
000056  e005              B        |L7.100|
                  |L7.88|
;;;292      }
;;;293      else
;;;294        stm = l_localtime(&t, &tmr);
000058  f241003c          MOV      r0,#0x103c
00005c  4468              ADD      r0,r0,sp
00005e  f7fffffe          BL       localtime
000062  4605              MOV      r5,r0
                  |L7.100|
;;;295      if (stm == NULL)  /* invalid date? */
000064  b945              CBNZ     r5,|L7.120|
;;;296        return luaL_error(L,
000066  a12d              ADR      r1,|L7.284|
000068  4638              MOV      r0,r7
00006a  f7fffffe          BL       luaL_error
                  |L7.110|
;;;297                     "time result cannot be represented in this installation");
;;;298      if (strcmp(s, "*t") == 0) {
;;;299        lua_createtable(L, 0, 9);  /* 9 = number of fields */
;;;300        setallfields(L, stm);
;;;301      }
;;;302      else {
;;;303        char cc[4];  /* buffer for individual conversion specifiers */
;;;304        luaL_Buffer b;
;;;305        cc[0] = '%';
;;;306        luaL_buffinit(L, &b);
;;;307        while (s < se) {
;;;308          if (*s != '%')  /* not a conversion specifier? */
;;;309            luaL_addchar(&b, *s++);
;;;310          else {
;;;311            size_t reslen;
;;;312            char *buff = luaL_prepbuffsize(&b, SIZETIMEFMT);
;;;313            s++;  /* skip '%' */
;;;314            s = checkoption(L, s, se - s, cc + 1);  /* copy specifier to 'cc' */
;;;315            reslen = strftime(buff, SIZETIMEFMT, cc, stm);
;;;316            luaL_addsize(&b, reslen);
;;;317          }
;;;318        }
;;;319        luaL_pushresult(&b);
;;;320      }
;;;321      return 1;
;;;322    }
00006e  b011              ADD      sp,sp,#0x44
000070  f50d5d80          ADD      sp,sp,#0x1000
000074  e8bd83f0          POP      {r4-r9,pc}
                  |L7.120|
000078  a136              ADR      r1,|L7.340|
00007a  4620              MOV      r0,r4                 ;298
00007c  f7fffffe          BL       strcmp
000080  b948              CBNZ     r0,|L7.150|
000082  2209              MOVS     r2,#9                 ;299
000084  2100              MOVS     r1,#0                 ;299
000086  4638              MOV      r0,r7                 ;299
000088  f7fffffe          BL       lua_createtable
00008c  4629              MOV      r1,r5                 ;300
00008e  4638              MOV      r0,r7                 ;300
000090  f7fffffe          BL       setallfields
000094  e03e              B        |L7.276|
                  |L7.150|
000096  2125              MOVS     r1,#0x25              ;305
000098  f50d5080          ADD      r0,sp,#0x1000         ;305
00009c  f8801038          STRB     r1,[r0,#0x38]         ;305
0000a0  a90a              ADD      r1,sp,#0x28           ;306
0000a2  4638              MOV      r0,r7                 ;306
0000a4  f7fffffe          BL       luaL_buffinit
0000a8  e02e              B        |L7.264|
                  |L7.170|
0000aa  7820              LDRB     r0,[r4,#0]            ;308
0000ac  2825              CMP      r0,#0x25              ;308
0000ae  d00f              BEQ      |L7.208|
0000b0  e9dd010b          LDRD     r0,r1,[sp,#0x2c]      ;309
0000b4  4281              CMP      r1,r0                 ;309
0000b6  d303              BCC      |L7.192|
0000b8  2101              MOVS     r1,#1                 ;309
0000ba  a80a              ADD      r0,sp,#0x28           ;309
0000bc  f7fffffe          BL       luaL_prepbuffsize
                  |L7.192|
0000c0  f8142b01          LDRB     r2,[r4],#1            ;309
0000c4  9b0c              LDR      r3,[sp,#0x30]         ;309
0000c6  1c59              ADDS     r1,r3,#1              ;309
0000c8  910c              STR      r1,[sp,#0x30]         ;309
0000ca  980a              LDR      r0,[sp,#0x28]         ;309
0000cc  54c2              STRB     r2,[r0,r3]            ;309
0000ce  e01b              B        |L7.264|
                  |L7.208|
0000d0  21fa              MOVS     r1,#0xfa              ;312
0000d2  a80a              ADD      r0,sp,#0x28           ;312
0000d4  f7fffffe          BL       luaL_prepbuffsize
0000d8  4681              MOV      r9,r0                 ;312
0000da  1c64              ADDS     r4,r4,#1              ;313
0000dc  1b32              SUBS     r2,r6,r4              ;314
0000de  f2410339          MOV      r3,#0x1039            ;314
0000e2  446b              ADD      r3,r3,sp              ;314
0000e4  4621              MOV      r1,r4                 ;314
0000e6  4638              MOV      r0,r7                 ;314
0000e8  f7fffffe          BL       checkoption
0000ec  4604              MOV      r4,r0                 ;314
0000ee  462b              MOV      r3,r5                 ;315
0000f0  f2410238          MOV      r2,#0x1038            ;315
0000f4  446a              ADD      r2,r2,sp              ;315
0000f6  21fa              MOVS     r1,#0xfa              ;315
0000f8  4648              MOV      r0,r9                 ;315
0000fa  f7fffffe          BL       strftime
0000fe  4680              MOV      r8,r0                 ;315
000100  990c              LDR      r1,[sp,#0x30]         ;316
000102  4441              ADD      r1,r1,r8              ;316
000104  910c              STR      r1,[sp,#0x30]         ;316
000106  bf00              NOP                            ;317
                  |L7.264|
000108  42b4              CMP      r4,r6                 ;307
00010a  d3ce              BCC      |L7.170|
00010c  a80a              ADD      r0,sp,#0x28           ;319
00010e  f7fffffe          BL       luaL_pushresult
000112  bf00              NOP                            ;320
                  |L7.276|
000114  2001              MOVS     r0,#1                 ;321
000116  e7aa              B        |L7.110|
;;;323    
                          ENDP

                  |L7.280|
000118  256300            DCB      "%c",0
00011b  00                DCB      0
                  |L7.284|
00011c  74696d65          DCB      "time result cannot be represented in this installation",0
000120  20726573
000124  756c7420
000128  63616e6e
00012c  6f742062
000130  65207265
000134  70726573
000138  656e7465
00013c  6420696e
000140  20746869
000144  7320696e
000148  7374616c
00014c  6c617469
000150  6f6e00  
000153  00                DCB      0
                  |L7.340|
000154  2a7400            DCB      "*t",0
000157  00                DCB      0

                          AREA ||i.os_difftime||, CODE, READONLY, ALIGN=1

                  os_difftime PROC
;;;350    
;;;351    static int os_difftime (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;352      time_t t1 = l_checktime(L, 1);
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       l_checktime
00000e  4607              MOV      r7,r0
;;;353      time_t t2 = l_checktime(L, 2);
000010  2102              MOVS     r1,#2
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       l_checktime
000018  4680              MOV      r8,r0
;;;354      lua_pushnumber(L, (lua_Number)difftime(t1, t2));
00001a  4641              MOV      r1,r8
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       difftime
000022  4605              MOV      r5,r0
000024  462a              MOV      r2,r5
000026  460b              MOV      r3,r1
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       lua_pushnumber
;;;355      return 1;
00002e  2001              MOVS     r0,#1
;;;356    }
000030  e8bd81f0          POP      {r4-r8,pc}
;;;357    
                          ENDP


                          AREA ||i.os_execute||, CODE, READONLY, ALIGN=1

                  os_execute PROC
;;;140    
;;;141    static int os_execute (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;142      const char *cmd = luaL_optstring(L, 1, NULL);
000004  2300              MOVS     r3,#0
000006  461a              MOV      r2,r3
000008  2101              MOVS     r1,#1
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       luaL_optlstring
000010  4604              MOV      r4,r0
;;;143      int stat = system(cmd);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       system
000018  4606              MOV      r6,r0
;;;144      if (cmd != NULL)
00001a  b124              CBZ      r4,|L9.38|
;;;145        return luaL_execresult(L, stat);
00001c  4631              MOV      r1,r6
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       luaL_execresult
                  |L9.36|
;;;146      else {
;;;147        lua_pushboolean(L, stat);  /* true if there is a shell */
;;;148        return 1;
;;;149      }
;;;150    }
000024  bd70              POP      {r4-r6,pc}
                  |L9.38|
000026  4631              MOV      r1,r6                 ;147
000028  4628              MOV      r0,r5                 ;147
00002a  f7fffffe          BL       lua_pushboolean
00002e  2001              MOVS     r0,#1                 ;148
000030  e7f8              B        |L9.36|
;;;151    
                          ENDP


                          AREA ||i.os_exit||, CODE, READONLY, ALIGN=1

                  os_exit PROC
;;;372    
;;;373    static int os_exit (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;374      int status;
;;;375      if (lua_isboolean(L, 1))
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       lua_type
00000c  2801              CMP      r0,#1
00000e  d109              BNE      |L10.36|
;;;376        status = (lua_toboolean(L, 1) ? EXIT_SUCCESS : EXIT_FAILURE);
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       lua_toboolean
000018  b908              CBNZ     r0,|L10.30|
00001a  2001              MOVS     r0,#1
00001c  e000              B        |L10.32|
                  |L10.30|
00001e  2000              MOVS     r0,#0
                  |L10.32|
000020  4605              MOV      r5,r0
000022  e006              B        |L10.50|
                  |L10.36|
;;;377      else
;;;378        status = (int)luaL_optinteger(L, 1, EXIT_SUCCESS);
000024  2200              MOVS     r2,#0
000026  4613              MOV      r3,r2
000028  2101              MOVS     r1,#1
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       luaL_optinteger
000030  4605              MOV      r5,r0
                  |L10.50|
;;;379      if (lua_toboolean(L, 2))
000032  2102              MOVS     r1,#2
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       lua_toboolean
00003a  b110              CBZ      r0,|L10.66|
;;;380        lua_close(L);
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       lua_close
                  |L10.66|
;;;381      if (L) exit(status);  /* 'if' to avoid warnings for unreachable 'return' */
000042  b114              CBZ      r4,|L10.74|
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       exit
                  |L10.74|
;;;382      return 0;
00004a  2000              MOVS     r0,#0
;;;383    }
00004c  bd70              POP      {r4-r6,pc}
;;;384    
                          ENDP


                          AREA ||i.os_getenv||, CODE, READONLY, ALIGN=1

                  os_getenv PROC
;;;176    
;;;177    static int os_getenv (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;178      lua_pushstring(L, getenv(luaL_checkstring(L, 1)));  /* if NULL push nil */
000004  2200              MOVS     r2,#0
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checklstring
00000e  4606              MOV      r6,r0
000010  f7fffffe          BL       getenv
000014  4605              MOV      r5,r0
000016  4629              MOV      r1,r5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       lua_pushstring
;;;179      return 1;
00001e  2001              MOVS     r0,#1
;;;180    }
000020  bd70              POP      {r4-r6,pc}
;;;181    
                          ENDP


                          AREA ||i.os_remove||, CODE, READONLY, ALIGN=1

                  os_remove PROC
;;;152    
;;;153    static int os_remove (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;154      const char *filename = luaL_checkstring(L, 1);
000004  2200              MOVS     r2,#0
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checklstring
00000e  4606              MOV      r6,r0
;;;155      return luaL_fileresult(L, remove(filename) == 0, filename);
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       remove
000016  b908              CBNZ     r0,|L12.28|
000018  2001              MOVS     r0,#1
00001a  e000              B        |L12.30|
                  |L12.28|
00001c  2000              MOVS     r0,#0
                  |L12.30|
00001e  4605              MOV      r5,r0
000020  4632              MOV      r2,r6
000022  4629              MOV      r1,r5
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       luaL_fileresult
;;;156    }
00002a  bd70              POP      {r4-r6,pc}
;;;157    
                          ENDP


                          AREA ||i.os_rename||, CODE, READONLY, ALIGN=1

                  os_rename PROC
;;;158    
;;;159    static int os_rename (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;160      const char *fromname = luaL_checkstring(L, 1);
000006  2200              MOVS     r2,#0
000008  2101              MOVS     r1,#1
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       luaL_checklstring
000010  4606              MOV      r6,r0
;;;161      const char *toname = luaL_checkstring(L, 2);
000012  2200              MOVS     r2,#0
000014  2102              MOVS     r1,#2
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       luaL_checklstring
00001c  4607              MOV      r7,r0
;;;162      return luaL_fileresult(L, rename(fromname, toname) == 0, NULL);
00001e  4639              MOV      r1,r7
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       rename
000026  b908              CBNZ     r0,|L13.44|
000028  2001              MOVS     r0,#1
00002a  e000              B        |L13.46|
                  |L13.44|
00002c  2000              MOVS     r0,#0
                  |L13.46|
00002e  4605              MOV      r5,r0
000030  2200              MOVS     r2,#0
000032  4629              MOV      r1,r5
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       luaL_fileresult
;;;163    }
00003a  e8bd81f0          POP      {r4-r8,pc}
;;;164    
                          ENDP


                          AREA ||i.os_setlocale||, CODE, READONLY, ALIGN=2

                  os_setlocale PROC
;;;360    
;;;361    static int os_setlocale (lua_State *L) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;362      static const int cat[] = {LC_ALL, LC_COLLATE, LC_CTYPE, LC_MONETARY,
;;;363                          LC_NUMERIC, LC_TIME};
;;;364      static const char *const catnames[] = {"all", "collate", "ctype", "monetary",
;;;365         "numeric", "time", NULL};
;;;366      const char *l = luaL_optstring(L, 1, NULL);
000006  2300              MOVS     r3,#0
000008  461a              MOV      r2,r3
00000a  2101              MOVS     r1,#1
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       luaL_optlstring
000012  4606              MOV      r6,r0
;;;367      int op = luaL_checkoption(L, 2, "all", catnames);
000014  4b0a              LDR      r3,|L14.64|
000016  a20b              ADR      r2,|L14.68|
000018  2102              MOVS     r1,#2
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       luaL_checkoption
000020  4605              MOV      r5,r0
;;;368      lua_pushstring(L, setlocale(cat[op], l));
000022  4909              LDR      r1,|L14.72|
000024  f8510025          LDR      r0,[r1,r5,LSL #2]
000028  4631              MOV      r1,r6
00002a  f7fffffe          BL       setlocale
00002e  4607              MOV      r7,r0
000030  4639              MOV      r1,r7
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       lua_pushstring
;;;369      return 1;
000038  2001              MOVS     r0,#1
;;;370    }
00003a  e8bd81f0          POP      {r4-r8,pc}
;;;371    
                          ENDP

00003e  0000              DCW      0x0000
                  |L14.64|
                          DCD      catnames
                  |L14.68|
000044  616c6c00          DCB      "all",0
                  |L14.72|
                          DCD      ||cat||

                          AREA ||i.os_time||, CODE, READONLY, ALIGN=2

                  os_time PROC
;;;324    
;;;325    static int os_time (lua_State *L) {
000000  b530              PUSH     {r4,r5,lr}
000002  b08b              SUB      sp,sp,#0x2c
000004  4605              MOV      r5,r0
;;;326      time_t t;
;;;327      if (lua_isnoneornil(L, 1))  /* called without args? */
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       lua_type
00000e  2800              CMP      r0,#0
000010  dc04              BGT      |L15.28|
;;;328        t = time(NULL);  /* get current time */
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       time
000018  4604              MOV      r4,r0
00001a  e042              B        |L15.162|
                  |L15.28|
;;;329      else {
;;;330        struct tm ts;
;;;331        luaL_checktype(L, 1, LUA_TTABLE);
00001c  2205              MOVS     r2,#5
00001e  2101              MOVS     r1,#1
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       luaL_checktype
;;;332        lua_settop(L, 1);  /* make sure table is at the top */
000026  2101              MOVS     r1,#1
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       lua_settop
;;;333        ts.tm_sec = getfield(L, "sec", 0, 0);
00002e  2300              MOVS     r3,#0
000030  461a              MOV      r2,r3
000032  a124              ADR      r1,|L15.196|
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       getfield
00003a  9000              STR      r0,[sp,#0]
;;;334        ts.tm_min = getfield(L, "min", 0, 0);
00003c  2300              MOVS     r3,#0
00003e  461a              MOV      r2,r3
000040  a121              ADR      r1,|L15.200|
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       getfield
000048  9001              STR      r0,[sp,#4]
;;;335        ts.tm_hour = getfield(L, "hour", 12, 0);
00004a  2300              MOVS     r3,#0
00004c  220c              MOVS     r2,#0xc
00004e  a11f              ADR      r1,|L15.204|
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       getfield
000056  9002              STR      r0,[sp,#8]
;;;336        ts.tm_mday = getfield(L, "day", -1, 0);
000058  2300              MOVS     r3,#0
00005a  1e5a              SUBS     r2,r3,#1
00005c  a11d              ADR      r1,|L15.212|
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       getfield
000064  9003              STR      r0,[sp,#0xc]
;;;337        ts.tm_mon = getfield(L, "month", -1, 1);
000066  2301              MOVS     r3,#1
000068  1e9a              SUBS     r2,r3,#2
00006a  a11b              ADR      r1,|L15.216|
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       getfield
000072  9004              STR      r0,[sp,#0x10]
;;;338        ts.tm_year = getfield(L, "year", -1, 1900);
000074  f240736c          MOV      r3,#0x76c
000078  f04f32ff          MOV      r2,#0xffffffff
00007c  a118              ADR      r1,|L15.224|
00007e  4628              MOV      r0,r5
000080  f7fffffe          BL       getfield
000084  9005              STR      r0,[sp,#0x14]
;;;339        ts.tm_isdst = getboolfield(L, "isdst");
000086  a118              ADR      r1,|L15.232|
000088  4628              MOV      r0,r5
00008a  f7fffffe          BL       getboolfield
00008e  9008              STR      r0,[sp,#0x20]
;;;340        t = mktime(&ts);
000090  4668              MOV      r0,sp
000092  f7fffffe          BL       mktime
000096  4604              MOV      r4,r0
;;;341        setallfields(L, &ts);  /* update fields with normalized values */
000098  4669              MOV      r1,sp
00009a  4628              MOV      r0,r5
00009c  f7fffffe          BL       setallfields
;;;342      }
0000a0  bf00              NOP      
                  |L15.162|
;;;343      if (t != (time_t)(l_timet)t || t == (time_t)(-1))
0000a2  42a4              CMP      r4,r4
0000a4  d101              BNE      |L15.170|
0000a6  1c60              ADDS     r0,r4,#1
0000a8  b928              CBNZ     r0,|L15.182|
                  |L15.170|
;;;344        return luaL_error(L,
0000aa  a111              ADR      r1,|L15.240|
0000ac  4628              MOV      r0,r5
0000ae  f7fffffe          BL       luaL_error
                  |L15.178|
;;;345                      "time result cannot be represented in this installation");
;;;346      l_pushtime(L, t);
;;;347      return 1;
;;;348    }
0000b2  b00b              ADD      sp,sp,#0x2c
0000b4  bd30              POP      {r4,r5,pc}
                  |L15.182|
0000b6  4622              MOV      r2,r4                 ;346
0000b8  2300              MOVS     r3,#0                 ;346
0000ba  4628              MOV      r0,r5                 ;346
0000bc  f7fffffe          BL       lua_pushinteger
0000c0  2001              MOVS     r0,#1                 ;347
0000c2  e7f6              B        |L15.178|
;;;349    
                          ENDP

                  |L15.196|
0000c4  73656300          DCB      "sec",0
                  |L15.200|
0000c8  6d696e00          DCB      "min",0
                  |L15.204|
0000cc  686f7572          DCB      "hour",0
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L15.212|
0000d4  64617900          DCB      "day",0
                  |L15.216|
0000d8  6d6f6e74          DCB      "month",0
0000dc  6800    
0000de  00                DCB      0
0000df  00                DCB      0
                  |L15.224|
0000e0  79656172          DCB      "year",0
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L15.232|
0000e8  69736473          DCB      "isdst",0
0000ec  7400    
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L15.240|
0000f0  74696d65          DCB      "time result cannot be represented in this installation",0
0000f4  20726573
0000f8  756c7420
0000fc  63616e6e
000100  6f742062
000104  65207265
000108  70726573
00010c  656e7465
000110  6420696e
000114  20746869
000118  7320696e
00011c  7374616c
000120  6c617469
000124  6f6e00  
000127  00                DCB      0

                          AREA ||i.os_tmpname||, CODE, READONLY, ALIGN=2

                  os_tmpname PROC
;;;165    
;;;166    static int os_tmpname (lua_State *L) {
000000  b530              PUSH     {r4,r5,lr}
000002  b0c1              SUB      sp,sp,#0x104
000004  4604              MOV      r4,r0
;;;167      char buff[LUA_TMPNAMBUFSIZE];
;;;168      int err;
;;;169      lua_tmpnam(buff, err);
000006  a801              ADD      r0,sp,#4
000008  f7fffffe          BL       tmpnam
00000c  b908              CBNZ     r0,|L16.18|
00000e  2001              MOVS     r0,#1
000010  e000              B        |L16.20|
                  |L16.18|
000012  2000              MOVS     r0,#0
                  |L16.20|
000014  4605              MOV      r5,r0
;;;170      if (err)
000016  b12d              CBZ      r5,|L16.36|
;;;171        return luaL_error(L, "unable to generate a unique filename");
000018  a105              ADR      r1,|L16.48|
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       luaL_error
                  |L16.32|
;;;172      lua_pushstring(L, buff);
;;;173      return 1;
;;;174    }
000020  b041              ADD      sp,sp,#0x104
000022  bd30              POP      {r4,r5,pc}
                  |L16.36|
000024  a901              ADD      r1,sp,#4              ;172
000026  4620              MOV      r0,r4                 ;172
000028  f7fffffe          BL       lua_pushstring
00002c  2001              MOVS     r0,#1                 ;173
00002e  e7f7              B        |L16.32|
;;;175    
                          ENDP

                  |L16.48|
000030  756e6162          DCB      "unable to generate a unique filename",0
000034  6c652074
000038  6f206765
00003c  6e657261
000040  74652061
000044  20756e69
000048  71756520
00004c  66696c65
000050  6e616d65
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0

                          AREA ||i.setallfields||, CODE, READONLY, ALIGN=2

                  setallfields PROC
;;;212    */
;;;213    static void setallfields (lua_State *L, struct tm *stm) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;214      setfield(L, "sec", stm->tm_sec);
000006  a119              ADR      r1,|L17.108|
000008  4628              MOV      r0,r5
00000a  6822              LDR      r2,[r4,#0]
00000c  f7fffffe          BL       setfield
;;;215      setfield(L, "min", stm->tm_min);
000010  a117              ADR      r1,|L17.112|
000012  4628              MOV      r0,r5
000014  6862              LDR      r2,[r4,#4]
000016  f7fffffe          BL       setfield
;;;216      setfield(L, "hour", stm->tm_hour);
00001a  a116              ADR      r1,|L17.116|
00001c  4628              MOV      r0,r5
00001e  68a2              LDR      r2,[r4,#8]
000020  f7fffffe          BL       setfield
;;;217      setfield(L, "day", stm->tm_mday);
000024  a115              ADR      r1,|L17.124|
000026  4628              MOV      r0,r5
000028  68e2              LDR      r2,[r4,#0xc]
00002a  f7fffffe          BL       setfield
;;;218      setfield(L, "month", stm->tm_mon + 1);
00002e  6920              LDR      r0,[r4,#0x10]
000030  1c42              ADDS     r2,r0,#1
000032  a113              ADR      r1,|L17.128|
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       setfield
;;;219      setfield(L, "year", stm->tm_year + 1900);
00003a  6960              LDR      r0,[r4,#0x14]
00003c  f200726c          ADD      r2,r0,#0x76c
000040  a111              ADR      r1,|L17.136|
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       setfield
;;;220      setfield(L, "wday", stm->tm_wday + 1);
000048  69a0              LDR      r0,[r4,#0x18]
00004a  1c42              ADDS     r2,r0,#1
00004c  a110              ADR      r1,|L17.144|
00004e  4628              MOV      r0,r5
000050  f7fffffe          BL       setfield
;;;221      setfield(L, "yday", stm->tm_yday + 1);
000054  69e0              LDR      r0,[r4,#0x1c]
000056  1c42              ADDS     r2,r0,#1
000058  a10f              ADR      r1,|L17.152|
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       setfield
;;;222      setboolfield(L, "isdst", stm->tm_isdst);
000060  a10f              ADR      r1,|L17.160|
000062  4628              MOV      r0,r5
000064  6a22              LDR      r2,[r4,#0x20]
000066  f7fffffe          BL       setboolfield
;;;223    }
00006a  bd70              POP      {r4-r6,pc}
;;;224    
                          ENDP

                  |L17.108|
00006c  73656300          DCB      "sec",0
                  |L17.112|
000070  6d696e00          DCB      "min",0
                  |L17.116|
000074  686f7572          DCB      "hour",0
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0
                  |L17.124|
00007c  64617900          DCB      "day",0
                  |L17.128|
000080  6d6f6e74          DCB      "month",0
000084  6800    
000086  00                DCB      0
000087  00                DCB      0
                  |L17.136|
000088  79656172          DCB      "year",0
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L17.144|
000090  77646179          DCB      "wday",0
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
                  |L17.152|
000098  79646179          DCB      "yday",0
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L17.160|
0000a0  69736473          DCB      "isdst",0
0000a4  7400    
0000a6  00                DCB      0
0000a7  00                DCB      0

                          AREA ||i.setboolfield||, CODE, READONLY, ALIGN=1

                  setboolfield PROC
;;;201    
;;;202    static void setboolfield (lua_State *L, const char *key, int value) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;203      if (value < 0)  /* undefined? */
000008  2c00              CMP      r4,#0
00000a  da00              BGE      |L18.14|
                  |L18.12|
;;;204        return;  /* does not set field */
;;;205      lua_pushboolean(L, value);
;;;206      lua_setfield(L, -2, key);
;;;207    }
00000c  bd70              POP      {r4-r6,pc}
                  |L18.14|
00000e  4621              MOV      r1,r4                 ;205
000010  4630              MOV      r0,r6                 ;205
000012  f7fffffe          BL       lua_pushboolean
000016  462a              MOV      r2,r5                 ;206
000018  f06f0101          MVN      r1,#1                 ;206
00001c  4630              MOV      r0,r6                 ;206
00001e  f7fffffe          BL       lua_setfield
000022  bf00              NOP      
000024  e7f2              B        |L18.12|
;;;208    
                          ENDP


                          AREA ||i.setfield||, CODE, READONLY, ALIGN=1

                  setfield PROC
;;;196    
;;;197    static void setfield (lua_State *L, const char *key, int value) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;198      lua_pushinteger(L, value);
000008  4622              MOV      r2,r4
00000a  17e3              ASRS     r3,r4,#31
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lua_pushinteger
;;;199      lua_setfield(L, -2, key);
000012  462a              MOV      r2,r5
000014  f06f0101          MVN      r1,#1
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lua_setfield
;;;200    }
00001e  bd70              POP      {r4-r6,pc}
;;;201    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  syslib
                          DCD      ||.conststring||
                          DCD      os_clock
                          DCD      ||.conststring||+0x8
                          DCD      os_date
                          DCD      ||.conststring||+0x10
                          DCD      os_difftime
                          DCD      ||.conststring||+0x1c
                          DCD      os_execute
                          DCD      ||.conststring||+0x24
                          DCD      os_exit
                          DCD      ||.conststring||+0x2c
                          DCD      os_getenv
                          DCD      ||.conststring||+0x34
                          DCD      os_remove
                          DCD      ||.conststring||+0x3c
                          DCD      os_rename
                          DCD      ||.conststring||+0x44
                          DCD      os_setlocale
                          DCD      ||.conststring||+0x50
                          DCD      os_time
                          DCD      ||.conststring||+0x58
                          DCD      os_tmpname
                          DCD      0x00000000
                          DCD      0x00000000
                  ||cat||
                          DCD      0x0000001f
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000004
                          DCD      0x00000008
                          DCD      0x00000010
                  catnames
                          DCD      ||.conststring||+0x60
                          DCD      ||.conststring||+0x64
                          DCD      ||.conststring||+0x6c
                          DCD      ||.conststring||+0x74
                          DCD      ||.conststring||+0x80
                          DCD      ||.conststring||+0x50
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  636c6f63          DCB      "clock",0
000004  6b00    
000006  00                DCB      0
000007  00                DCB      0
000008  64617465          DCB      "date",0
00000c  00      
00000d  00                DCB      0
00000e  00                DCB      0
00000f  00                DCB      0
000010  64696666          DCB      "difftime",0
000014  74696d65
000018  00      
000019  00                DCB      0
00001a  00                DCB      0
00001b  00                DCB      0
00001c  65786563          DCB      "execute",0
000020  75746500
000024  65786974          DCB      "exit",0
000028  00      
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
00002c  67657465          DCB      "getenv",0
000030  6e7600  
000033  00                DCB      0
000034  72656d6f          DCB      "remove",0
000038  766500  
00003b  00                DCB      0
00003c  72656e61          DCB      "rename",0
000040  6d6500  
000043  00                DCB      0
000044  7365746c          DCB      "setlocale",0
000048  6f63616c
00004c  6500    
00004e  00                DCB      0
00004f  00                DCB      0
000050  74696d65          DCB      "time",0
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
000058  746d706e          DCB      "tmpname",0
00005c  616d6500
000060  616c6c00          DCB      "all",0
000064  636f6c6c          DCB      "collate",0
000068  61746500
00006c  63747970          DCB      "ctype",0
000070  6500    
000072  00                DCB      0
000073  00                DCB      0
000074  6d6f6e65          DCB      "monetary",0
000078  74617279
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
000080  6e756d65          DCB      "numeric",0
000084  72696300
000088  61416242          DCB      "aAbBcCdDeFgGhHIjmMnprRStTuUVwWxXyYzZ%||EcECExEXEyEYOdOe"
00008c  63436444
000090  65466747
000094  6848496a
000098  6d4d6e70
00009c  72525374
0000a0  54755556
0000a4  77577858
0000a8  79597a5a
0000ac  257c7c45
0000b0  63454345
0000b4  78455845
0000b8  7945594f
0000bc  644f65  
0000bf  4f484f49          DCB      "OHOIOmOMOSOuOUOVOwOWOy",0
0000c3  4f6d4f4d
0000c7  4f534f75
0000cb  4f554f56
0000cf  4f774f57
0000d3  4f7900  
