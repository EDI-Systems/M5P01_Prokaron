; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f7xx_hal_ltdc.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f7xx_hal_ltdc.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f7xx_hal_ltdc.crf ..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_ltdc.c]
                          THUMB

                          AREA ||i.HAL_LTDC_ConfigCLUT||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_ConfigCLUT PROC
;;;592      */
;;;593    HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
000000  b5f0              PUSH     {r4-r7,lr}
;;;594    {
000002  4604              MOV      r4,r0
000004  4615              MOV      r5,r2
;;;595      uint32_t tmp = 0;
000006  2600              MOVS     r6,#0
;;;596      uint32_t counter = 0;
000008  2200              MOVS     r2,#0
;;;597      uint32_t pcounter = 0;
00000a  2700              MOVS     r7,#0
;;;598    
;;;599      /* Process locked */
;;;600      __HAL_LOCK(hltdc);
00000c  bf00              NOP      
00000e  f8d400a0          LDR      r0,[r4,#0xa0]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L1.26|
000016  2002              MOVS     r0,#2
                  |L1.24|
;;;601    
;;;602      /* Change LTDC peripheral state */
;;;603      hltdc->State = HAL_LTDC_STATE_BUSY;  
;;;604    
;;;605      /* Check the parameters */
;;;606      assert_param(IS_LTDC_LAYER(LayerIdx)); 
;;;607    
;;;608      for(counter = 0; (counter < CLUTSize); counter++)
;;;609      {
;;;610        if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
;;;611        {
;;;612          tmp  = (((counter + 16*counter) << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
;;;613        }
;;;614        else
;;;615        { 
;;;616          tmp  = ((counter << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
;;;617        }
;;;618        pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
;;;619        pCLUT = (uint32_t *)pcounter;
;;;620    
;;;621        /* Specifies the C-LUT address and RGB value */
;;;622        LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
;;;623      }
;;;624      
;;;625      /* Change the LTDC state*/
;;;626      hltdc->State = HAL_LTDC_STATE_READY; 
;;;627    
;;;628      /* Process unlocked */
;;;629      __HAL_UNLOCK(hltdc);  
;;;630    
;;;631      return HAL_OK;
;;;632    }
000018  bdf0              POP      {r4-r7,pc}
                  |L1.26|
00001a  2001              MOVS     r0,#1                 ;600
00001c  f8c400a0          STR      r0,[r4,#0xa0]         ;600
000020  bf00              NOP                            ;600
000022  2002              MOVS     r0,#2                 ;603
000024  f8c400a4          STR      r0,[r4,#0xa4]         ;603
000028  2200              MOVS     r2,#0                 ;608
00002a  e037              B        |L1.156|
                  |L1.44|
00002c  eb030083          ADD      r0,r3,r3,LSL #2       ;610
000030  eb000cc3          ADD      r12,r0,r3,LSL #3      ;610
000034  f1040038          ADD      r0,r4,#0x38           ;610
000038  eb00008c          ADD      r0,r0,r12,LSL #2      ;610
00003c  6900              LDR      r0,[r0,#0x10]         ;610
00003e  2806              CMP      r0,#6                 ;610
000040  d113              BNE      |L1.106|
000042  7808              LDRB     r0,[r1,#0]            ;612
000044  f04f0c10          MOV      r12,#0x10             ;612
000048  fb0c2c02          MLA      r12,r12,r2,r2         ;612
00004c  ea40600c          ORR      r0,r0,r12,LSL #24     ;612
000050  f8b1c000          LDRH     r12,[r1,#0]           ;612
000054  f40c4c7f          AND      r12,r12,#0xff00       ;612
000058  ea40000c          ORR      r0,r0,r12             ;612
00005c  f8d1c000          LDR      r12,[r1,#0]           ;612
000060  f40c0c7f          AND      r12,r12,#0xff0000     ;612
000064  ea40060c          ORR      r6,r0,r12             ;612
000068  e00e              B        |L1.136|
                  |L1.106|
00006a  7808              LDRB     r0,[r1,#0]            ;616
00006c  ea406002          ORR      r0,r0,r2,LSL #24      ;616
000070  f8b1c000          LDRH     r12,[r1,#0]           ;616
000074  f40c4c7f          AND      r12,r12,#0xff00       ;616
000078  ea40000c          ORR      r0,r0,r12             ;616
00007c  f8d1c000          LDR      r12,[r1,#0]           ;616
000080  f40c0c7f          AND      r12,r12,#0xff0000     ;616
000084  ea40060c          ORR      r6,r0,r12             ;616
                  |L1.136|
000088  1d0f              ADDS     r7,r1,#4              ;618
00008a  4639              MOV      r1,r7                 ;619
00008c  6820              LDR      r0,[r4,#0]            ;622
00008e  3084              ADDS     r0,r0,#0x84           ;622
000090  f04f0c80          MOV      r12,#0x80             ;622
000094  fb0c0003          MLA      r0,r12,r3,r0          ;622
000098  6406              STR      r6,[r0,#0x40]         ;622
00009a  1c52              ADDS     r2,r2,#1              ;608
                  |L1.156|
00009c  42aa              CMP      r2,r5                 ;608
00009e  d3c5              BCC      |L1.44|
0000a0  2001              MOVS     r0,#1                 ;626
0000a2  f8c400a4          STR      r0,[r4,#0xa4]         ;626
0000a6  bf00              NOP                            ;629
0000a8  2000              MOVS     r0,#0                 ;629
0000aa  f8c400a0          STR      r0,[r4,#0xa0]         ;629
0000ae  bf00              NOP                            ;629
0000b0  bf00              NOP                            ;631
0000b2  e7b1              B        |L1.24|
;;;633    
                          ENDP


                          AREA ||i.HAL_LTDC_ConfigColorKeying||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_ConfigColorKeying PROC
;;;554      */
;;;555    HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
000000  b530              PUSH     {r4,r5,lr}
;;;556    {
000002  4603              MOV      r3,r0
;;;557      /* Process locked */
;;;558      __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f8d300a0          LDR      r0,[r3,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L2.18|
00000e  2002              MOVS     r0,#2
                  |L2.16|
;;;559    
;;;560      /* Change LTDC peripheral state */
;;;561      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;562    
;;;563      /* Check the parameters */
;;;564      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;565    
;;;566      /* Configures the default color values */
;;;567      LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
;;;568      LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
;;;569    
;;;570      /* Sets the Reload type */
;;;571      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;572    
;;;573      /* Change the LTDC state*/
;;;574      hltdc->State = HAL_LTDC_STATE_READY;
;;;575    
;;;576      /* Process unlocked */
;;;577      __HAL_UNLOCK(hltdc);
;;;578    
;;;579      return HAL_OK;
;;;580    }
000010  bd30              POP      {r4,r5,pc}
                  |L2.18|
000012  2001              MOVS     r0,#1                 ;558
000014  f8c300a0          STR      r0,[r3,#0xa0]         ;558
000018  bf00              NOP                            ;558
00001a  2002              MOVS     r0,#2                 ;561
00001c  f8c300a4          STR      r0,[r3,#0xa4]         ;561
000020  6818              LDR      r0,[r3,#0]            ;567
000022  3084              ADDS     r0,r0,#0x84           ;567
000024  2480              MOVS     r4,#0x80              ;567
000026  fb040002          MLA      r0,r4,r2,r0           ;567
00002a  68c0              LDR      r0,[r0,#0xc]          ;567
00002c  f000447f          AND      r4,r0,#0xff000000     ;567
000030  6818              LDR      r0,[r3,#0]            ;567
000032  3084              ADDS     r0,r0,#0x84           ;567
000034  2580              MOVS     r5,#0x80              ;567
000036  fb050002          MLA      r0,r5,r2,r0           ;567
00003a  60c4              STR      r4,[r0,#0xc]          ;567
00003c  6818              LDR      r0,[r3,#0]            ;568
00003e  3084              ADDS     r0,r0,#0x84           ;568
000040  2480              MOVS     r4,#0x80              ;568
000042  fb040002          MLA      r0,r4,r2,r0           ;568
000046  60c1              STR      r1,[r0,#0xc]          ;568
000048  2001              MOVS     r0,#1                 ;571
00004a  681c              LDR      r4,[r3,#0]            ;571
00004c  6260              STR      r0,[r4,#0x24]         ;571
00004e  f8c300a4          STR      r0,[r3,#0xa4]         ;574
000052  bf00              NOP                            ;577
000054  2000              MOVS     r0,#0                 ;577
000056  f8c300a0          STR      r0,[r3,#0xa0]         ;577
00005a  bf00              NOP                            ;577
00005c  bf00              NOP                            ;579
00005e  e7d7              B        |L2.16|
;;;581    
                          ENDP


                          AREA ||i.HAL_LTDC_ConfigColorKeying_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_ConfigColorKeying_NoReload PROC
;;;1603     */
;;;1604   HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
000000  b530              PUSH     {r4,r5,lr}
;;;1605   {
000002  4603              MOV      r3,r0
;;;1606     /* Process locked */
;;;1607     __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f8d300a0          LDR      r0,[r3,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L3.18|
00000e  2002              MOVS     r0,#2
                  |L3.16|
;;;1608   
;;;1609     /* Change LTDC peripheral state */
;;;1610     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1611   
;;;1612     /* Check the parameters */
;;;1613     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1614   
;;;1615     /* Configures the default color values */
;;;1616     LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
;;;1617     LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
;;;1618   
;;;1619     /* Do not Sets the Reload  */
;;;1620   
;;;1621     /* Change the LTDC state*/
;;;1622     hltdc->State = HAL_LTDC_STATE_READY;
;;;1623   
;;;1624     /* Process unlocked */
;;;1625     __HAL_UNLOCK(hltdc);
;;;1626   
;;;1627     return HAL_OK;
;;;1628   }
000010  bd30              POP      {r4,r5,pc}
                  |L3.18|
000012  2001              MOVS     r0,#1                 ;1607
000014  f8c300a0          STR      r0,[r3,#0xa0]         ;1607
000018  bf00              NOP                            ;1607
00001a  2002              MOVS     r0,#2                 ;1610
00001c  f8c300a4          STR      r0,[r3,#0xa4]         ;1610
000020  6818              LDR      r0,[r3,#0]            ;1616
000022  3084              ADDS     r0,r0,#0x84           ;1616
000024  2480              MOVS     r4,#0x80              ;1616
000026  fb040002          MLA      r0,r4,r2,r0           ;1616
00002a  68c0              LDR      r0,[r0,#0xc]          ;1616
00002c  f000447f          AND      r4,r0,#0xff000000     ;1616
000030  6818              LDR      r0,[r3,#0]            ;1616
000032  3084              ADDS     r0,r0,#0x84           ;1616
000034  2580              MOVS     r5,#0x80              ;1616
000036  fb050002          MLA      r0,r5,r2,r0           ;1616
00003a  60c4              STR      r4,[r0,#0xc]          ;1616
00003c  6818              LDR      r0,[r3,#0]            ;1617
00003e  3084              ADDS     r0,r0,#0x84           ;1617
000040  2480              MOVS     r4,#0x80              ;1617
000042  fb040002          MLA      r0,r4,r2,r0           ;1617
000046  60c1              STR      r1,[r0,#0xc]          ;1617
000048  2001              MOVS     r0,#1                 ;1622
00004a  f8c300a4          STR      r0,[r3,#0xa4]         ;1622
00004e  bf00              NOP                            ;1625
000050  2000              MOVS     r0,#0                 ;1625
000052  f8c300a0          STR      r0,[r3,#0xa0]         ;1625
000056  bf00              NOP                            ;1625
000058  bf00              NOP                            ;1627
00005a  e7d9              B        |L3.16|
;;;1629   
                          ENDP


                          AREA ||i.HAL_LTDC_ConfigLayer||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_ConfigLayer PROC
;;;505      */
;;;506    HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
000000  b570              PUSH     {r4-r6,lr}
;;;507    {   
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;508      /* Process locked */
;;;509      __HAL_LOCK(hltdc);
000008  bf00              NOP      
00000a  f8d400a0          LDR      r0,[r4,#0xa0]
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L4.22|
000012  2002              MOVS     r0,#2
                  |L4.20|
;;;510      
;;;511      /* Change LTDC peripheral state */
;;;512      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;513    
;;;514      /* Check the parameters */
;;;515      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;516      assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
;;;517      assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
;;;518      assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
;;;519      assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
;;;520      assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
;;;521      assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
;;;522      assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
;;;523      assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
;;;524      assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
;;;525      assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
;;;526    
;;;527      /* Copy new layer configuration into handle structure */
;;;528      hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
;;;529    
;;;530      /* Configure the LTDC Layer */  
;;;531      LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;532    
;;;533      /* Sets the Reload type */
;;;534      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;535    
;;;536      /* Initialize the LTDC state*/
;;;537      hltdc->State  = HAL_LTDC_STATE_READY;
;;;538    
;;;539      /* Process unlocked */
;;;540      __HAL_UNLOCK(hltdc);
;;;541    
;;;542      return HAL_OK;
;;;543    }
000014  bd70              POP      {r4-r6,pc}
                  |L4.22|
000016  2001              MOVS     r0,#1                 ;509
000018  f8c400a0          STR      r0,[r4,#0xa0]         ;509
00001c  bf00              NOP                            ;509
00001e  2002              MOVS     r0,#2                 ;512
000020  f8c400a4          STR      r0,[r4,#0xa4]         ;512
000024  eb050185          ADD      r1,r5,r5,LSL #2       ;528
000028  eb0102c5          ADD      r2,r1,r5,LSL #3       ;528
00002c  f1040138          ADD      r1,r4,#0x38           ;528
000030  eb010082          ADD      r0,r1,r2,LSL #2       ;528
000034  2234              MOVS     r2,#0x34              ;528
000036  4631              MOV      r1,r6                 ;528
000038  f7fffffe          BL       __aeabi_memcpy4
00003c  462a              MOV      r2,r5                 ;531
00003e  4631              MOV      r1,r6                 ;531
000040  4620              MOV      r0,r4                 ;531
000042  f7fffffe          BL       LTDC_SetConfig
000046  2001              MOVS     r0,#1                 ;534
000048  6821              LDR      r1,[r4,#0]            ;534
00004a  6248              STR      r0,[r1,#0x24]         ;534
00004c  f8c400a4          STR      r0,[r4,#0xa4]         ;537
000050  bf00              NOP                            ;540
000052  2000              MOVS     r0,#0                 ;540
000054  f8c400a0          STR      r0,[r4,#0xa0]         ;540
000058  bf00              NOP                            ;540
00005a  bf00              NOP                            ;542
00005c  e7da              B        |L4.20|
;;;544    
                          ENDP


                          AREA ||i.HAL_LTDC_ConfigLayer_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_ConfigLayer_NoReload PROC
;;;1232     */
;;;1233   HAL_StatusTypeDef HAL_LTDC_ConfigLayer_NoReload(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
000000  b570              PUSH     {r4-r6,lr}
;;;1234   {   
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;1235     /* Process locked */
;;;1236     __HAL_LOCK(hltdc);
000008  bf00              NOP      
00000a  f8d400a0          LDR      r0,[r4,#0xa0]
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L5.22|
000012  2002              MOVS     r0,#2
                  |L5.20|
;;;1237     
;;;1238     /* Change LTDC peripheral state */
;;;1239     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1240   
;;;1241     /* Check the parameters */
;;;1242     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1243     assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
;;;1244     assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
;;;1245     assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
;;;1246     assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
;;;1247     assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
;;;1248     assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
;;;1249     assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
;;;1250     assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
;;;1251     assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
;;;1252     assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
;;;1253   
;;;1254     /* Copy new layer configuration into handle structure */
;;;1255     hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
;;;1256   
;;;1257     /* Configure the LTDC Layer */  
;;;1258     LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;1259   
;;;1260     /* Do not Sets the Reload  */
;;;1261   
;;;1262     /* Initialize the LTDC state*/
;;;1263     hltdc->State  = HAL_LTDC_STATE_READY;
;;;1264   
;;;1265     /* Process unlocked */
;;;1266     __HAL_UNLOCK(hltdc);
;;;1267   
;;;1268     return HAL_OK;
;;;1269   }
000014  bd70              POP      {r4-r6,pc}
                  |L5.22|
000016  2001              MOVS     r0,#1                 ;1236
000018  f8c400a0          STR      r0,[r4,#0xa0]         ;1236
00001c  bf00              NOP                            ;1236
00001e  2002              MOVS     r0,#2                 ;1239
000020  f8c400a4          STR      r0,[r4,#0xa4]         ;1239
000024  eb050185          ADD      r1,r5,r5,LSL #2       ;1255
000028  eb0102c5          ADD      r2,r1,r5,LSL #3       ;1255
00002c  f1040138          ADD      r1,r4,#0x38           ;1255
000030  eb010082          ADD      r0,r1,r2,LSL #2       ;1255
000034  2234              MOVS     r2,#0x34              ;1255
000036  4631              MOV      r1,r6                 ;1255
000038  f7fffffe          BL       __aeabi_memcpy4
00003c  462a              MOV      r2,r5                 ;1258
00003e  4631              MOV      r1,r6                 ;1258
000040  4620              MOV      r0,r4                 ;1258
000042  f7fffffe          BL       LTDC_SetConfig
000046  2001              MOVS     r0,#1                 ;1263
000048  f8c400a4          STR      r0,[r4,#0xa4]         ;1263
00004c  bf00              NOP                            ;1266
00004e  2000              MOVS     r0,#0                 ;1266
000050  f8c400a0          STR      r0,[r4,#0xa0]         ;1266
000054  bf00              NOP                            ;1266
000056  bf00              NOP                            ;1268
000058  e7dc              B        |L5.20|
;;;1270   
                          ENDP


                          AREA ||i.HAL_LTDC_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_DeInit PROC
;;;251    
;;;252    HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
000000  b510              PUSH     {r4,lr}
;;;253    {
000002  4604              MOV      r4,r0
;;;254      /* DeInit the low level hardware */
;;;255      HAL_LTDC_MspDeInit(hltdc); 
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       HAL_LTDC_MspDeInit
;;;256    
;;;257      /* Initialize the error code */
;;;258      hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
00000a  2000              MOVS     r0,#0
00000c  f8c400a8          STR      r0,[r4,#0xa8]
;;;259    
;;;260      /* Initialize the LTDC state*/
;;;261      hltdc->State = HAL_LTDC_STATE_RESET;
000010  f8c400a4          STR      r0,[r4,#0xa4]
;;;262    
;;;263      /* Release Lock */
;;;264      __HAL_UNLOCK(hltdc);
000014  bf00              NOP      
000016  f8c400a0          STR      r0,[r4,#0xa0]
00001a  bf00              NOP      
;;;265    
;;;266      return HAL_OK;
;;;267    }
00001c  bd10              POP      {r4,pc}
;;;268    
                          ENDP


                          AREA ||i.HAL_LTDC_DisableCLUT||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_DisableCLUT PROC
;;;748      */
;;;749    HAL_StatusTypeDef HAL_LTDC_DisableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
000000  b510              PUSH     {r4,lr}
;;;750    {
000002  4602              MOV      r2,r0
;;;751     
;;;752      /* Process locked */
;;;753      __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f8d200a0          LDR      r0,[r2,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L7.18|
00000e  2002              MOVS     r0,#2
                  |L7.16|
;;;754    
;;;755      /* Change LTDC peripheral state */
;;;756      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;757    
;;;758      /* Check the parameters */
;;;759      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;760    
;;;761      /* Disable LTDC color lookup table by setting CLUTEN bit */
;;;762      LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
;;;763    
;;;764      /* Sets the Reload type */
;;;765      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;766    
;;;767      /* Change the LTDC state*/
;;;768      hltdc->State = HAL_LTDC_STATE_READY; 
;;;769    
;;;770      /* Process unlocked */
;;;771      __HAL_UNLOCK(hltdc);
;;;772    
;;;773      return HAL_OK;
;;;774    }
000010  bd10              POP      {r4,pc}
                  |L7.18|
000012  2001              MOVS     r0,#1                 ;753
000014  f8c200a0          STR      r0,[r2,#0xa0]         ;753
000018  bf00              NOP                            ;753
00001a  2002              MOVS     r0,#2                 ;756
00001c  f8c200a4          STR      r0,[r2,#0xa4]         ;756
000020  6810              LDR      r0,[r2,#0]            ;762
000022  3084              ADDS     r0,r0,#0x84           ;762
000024  01cb              LSLS     r3,r1,#7              ;762
000026  58c0              LDR      r0,[r0,r3]            ;762
000028  f0200310          BIC      r3,r0,#0x10           ;762
00002c  6810              LDR      r0,[r2,#0]            ;762
00002e  3084              ADDS     r0,r0,#0x84           ;762
000030  01cc              LSLS     r4,r1,#7              ;762
000032  5103              STR      r3,[r0,r4]            ;762
000034  2001              MOVS     r0,#1                 ;765
000036  6813              LDR      r3,[r2,#0]            ;765
000038  6258              STR      r0,[r3,#0x24]         ;765
00003a  f8c200a4          STR      r0,[r2,#0xa4]         ;768
00003e  bf00              NOP                            ;771
000040  2000              MOVS     r0,#0                 ;771
000042  f8c200a0          STR      r0,[r2,#0xa0]         ;771
000046  bf00              NOP                            ;771
000048  bf00              NOP                            ;773
00004a  e7e1              B        |L7.16|
;;;775    
                          ENDP


                          AREA ||i.HAL_LTDC_DisableCLUT_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_DisableCLUT_NoReload PROC
;;;1745     */
;;;1746   HAL_StatusTypeDef HAL_LTDC_DisableCLUT_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
000000  b510              PUSH     {r4,lr}
;;;1747   {
000002  4602              MOV      r2,r0
;;;1748    
;;;1749     /* Process locked */
;;;1750     __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f8d200a0          LDR      r0,[r2,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L8.18|
00000e  2002              MOVS     r0,#2
                  |L8.16|
;;;1751   
;;;1752     /* Change LTDC peripheral state */
;;;1753     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1754   
;;;1755     /* Check the parameters */
;;;1756     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1757   
;;;1758     /* Disable LTDC color lookup table by setting CLUTEN bit */
;;;1759     LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
;;;1760   
;;;1761     /* Do not Sets the Reload  */
;;;1762   
;;;1763     /* Change the LTDC state*/
;;;1764     hltdc->State = HAL_LTDC_STATE_READY; 
;;;1765   
;;;1766     /* Process unlocked */
;;;1767     __HAL_UNLOCK(hltdc);
;;;1768   
;;;1769     return HAL_OK;
;;;1770   }
000010  bd10              POP      {r4,pc}
                  |L8.18|
000012  2001              MOVS     r0,#1                 ;1750
000014  f8c200a0          STR      r0,[r2,#0xa0]         ;1750
000018  bf00              NOP                            ;1750
00001a  2002              MOVS     r0,#2                 ;1753
00001c  f8c200a4          STR      r0,[r2,#0xa4]         ;1753
000020  6810              LDR      r0,[r2,#0]            ;1759
000022  3084              ADDS     r0,r0,#0x84           ;1759
000024  01cb              LSLS     r3,r1,#7              ;1759
000026  58c0              LDR      r0,[r0,r3]            ;1759
000028  f0200310          BIC      r3,r0,#0x10           ;1759
00002c  6810              LDR      r0,[r2,#0]            ;1759
00002e  3084              ADDS     r0,r0,#0x84           ;1759
000030  01cc              LSLS     r4,r1,#7              ;1759
000032  5103              STR      r3,[r0,r4]            ;1759
000034  2001              MOVS     r0,#1                 ;1764
000036  f8c200a4          STR      r0,[r2,#0xa4]         ;1764
00003a  bf00              NOP                            ;1767
00003c  2000              MOVS     r0,#0                 ;1767
00003e  f8c200a0          STR      r0,[r2,#0xa0]         ;1767
000042  bf00              NOP                            ;1767
000044  bf00              NOP                            ;1769
000046  e7e3              B        |L8.16|
;;;1771   
                          ENDP


                          AREA ||i.HAL_LTDC_DisableColorKeying||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_DisableColorKeying PROC
;;;677      */
;;;678    HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
000000  b510              PUSH     {r4,lr}
;;;679    {
000002  4602              MOV      r2,r0
;;;680      /* Process locked */
;;;681      __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f8d200a0          LDR      r0,[r2,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L9.18|
00000e  2002              MOVS     r0,#2
                  |L9.16|
;;;682    
;;;683      /* Change LTDC peripheral state */
;;;684      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;685    
;;;686      /* Check the parameters */
;;;687      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;688    
;;;689      /* Disable LTDC color keying by setting COLKEN bit */
;;;690      LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
;;;691    
;;;692      /* Sets the Reload type */
;;;693      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;694    
;;;695      /* Change the LTDC state*/
;;;696      hltdc->State = HAL_LTDC_STATE_READY; 
;;;697    
;;;698      /* Process unlocked */
;;;699      __HAL_UNLOCK(hltdc);
;;;700    
;;;701      return HAL_OK;
;;;702    }
000010  bd10              POP      {r4,pc}
                  |L9.18|
000012  2001              MOVS     r0,#1                 ;681
000014  f8c200a0          STR      r0,[r2,#0xa0]         ;681
000018  bf00              NOP                            ;681
00001a  2002              MOVS     r0,#2                 ;684
00001c  f8c200a4          STR      r0,[r2,#0xa4]         ;684
000020  6810              LDR      r0,[r2,#0]            ;690
000022  3084              ADDS     r0,r0,#0x84           ;690
000024  01cb              LSLS     r3,r1,#7              ;690
000026  58c0              LDR      r0,[r0,r3]            ;690
000028  f0200302          BIC      r3,r0,#2              ;690
00002c  6810              LDR      r0,[r2,#0]            ;690
00002e  3084              ADDS     r0,r0,#0x84           ;690
000030  01cc              LSLS     r4,r1,#7              ;690
000032  5103              STR      r3,[r0,r4]            ;690
000034  2001              MOVS     r0,#1                 ;693
000036  6813              LDR      r3,[r2,#0]            ;693
000038  6258              STR      r0,[r3,#0x24]         ;693
00003a  f8c200a4          STR      r0,[r2,#0xa4]         ;696
00003e  bf00              NOP                            ;699
000040  2000              MOVS     r0,#0                 ;699
000042  f8c200a0          STR      r0,[r2,#0xa0]         ;699
000046  bf00              NOP                            ;699
000048  bf00              NOP                            ;701
00004a  e7e1              B        |L9.16|
;;;703    
                          ENDP


                          AREA ||i.HAL_LTDC_DisableColorKeying_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_DisableColorKeying_NoReload PROC
;;;1674     */
;;;1675   HAL_StatusTypeDef HAL_LTDC_DisableColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
000000  b510              PUSH     {r4,lr}
;;;1676   {
000002  4602              MOV      r2,r0
;;;1677     /* Process locked */
;;;1678     __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f8d200a0          LDR      r0,[r2,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L10.18|
00000e  2002              MOVS     r0,#2
                  |L10.16|
;;;1679   
;;;1680     /* Change LTDC peripheral state */
;;;1681     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1682   
;;;1683     /* Check the parameters */
;;;1684     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1685   
;;;1686     /* Disable LTDC color keying by setting COLKEN bit */
;;;1687     LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
;;;1688   
;;;1689     /* Do not Sets the Reload  */
;;;1690   
;;;1691     /* Change the LTDC state*/
;;;1692     hltdc->State = HAL_LTDC_STATE_READY; 
;;;1693   
;;;1694     /* Process unlocked */
;;;1695     __HAL_UNLOCK(hltdc);
;;;1696   
;;;1697     return HAL_OK;
;;;1698   }
000010  bd10              POP      {r4,pc}
                  |L10.18|
000012  2001              MOVS     r0,#1                 ;1678
000014  f8c200a0          STR      r0,[r2,#0xa0]         ;1678
000018  bf00              NOP                            ;1678
00001a  2002              MOVS     r0,#2                 ;1681
00001c  f8c200a4          STR      r0,[r2,#0xa4]         ;1681
000020  6810              LDR      r0,[r2,#0]            ;1687
000022  3084              ADDS     r0,r0,#0x84           ;1687
000024  01cb              LSLS     r3,r1,#7              ;1687
000026  58c0              LDR      r0,[r0,r3]            ;1687
000028  f0200302          BIC      r3,r0,#2              ;1687
00002c  6810              LDR      r0,[r2,#0]            ;1687
00002e  3084              ADDS     r0,r0,#0x84           ;1687
000030  01cc              LSLS     r4,r1,#7              ;1687
000032  5103              STR      r3,[r0,r4]            ;1687
000034  2001              MOVS     r0,#1                 ;1692
000036  f8c200a4          STR      r0,[r2,#0xa4]         ;1692
00003a  bf00              NOP                            ;1695
00003c  2000              MOVS     r0,#0                 ;1695
00003e  f8c200a0          STR      r0,[r2,#0xa0]         ;1695
000042  bf00              NOP                            ;1695
000044  bf00              NOP                            ;1697
000046  e7e3              B        |L10.16|
;;;1699   
                          ENDP


                          AREA ||i.HAL_LTDC_DisableDither||, CODE, READONLY, ALIGN=2

                  HAL_LTDC_DisableDither PROC
;;;809    
;;;810    HAL_StatusTypeDef HAL_LTDC_DisableDither(LTDC_HandleTypeDef *hltdc)
000000  4601              MOV      r1,r0
;;;811    {
;;;812      /* Process locked */
;;;813      __HAL_LOCK(hltdc);
000002  bf00              NOP      
000004  f8d100a0          LDR      r0,[r1,#0xa0]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L11.16|
00000c  2002              MOVS     r0,#2
                  |L11.14|
;;;814    
;;;815      /* Change LTDC peripheral state */
;;;816      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;817    
;;;818      /* Disable Dither by setting DTEN bit */
;;;819      LTDC->GCR &= ~(uint32_t)LTDC_GCR_DEN;
;;;820    
;;;821      /* Change the LTDC state*/
;;;822      hltdc->State = HAL_LTDC_STATE_READY;
;;;823    
;;;824      /* Process unlocked */
;;;825      __HAL_UNLOCK(hltdc);
;;;826    
;;;827      return HAL_OK;
;;;828    }
00000e  4770              BX       lr
                  |L11.16|
000010  2001              MOVS     r0,#1                 ;813
000012  f8c100a0          STR      r0,[r1,#0xa0]         ;813
000016  bf00              NOP                            ;813
000018  2002              MOVS     r0,#2                 ;816
00001a  f8c100a4          STR      r0,[r1,#0xa4]         ;816
00001e  4808              LDR      r0,|L11.64|
000020  6800              LDR      r0,[r0,#0]            ;819
000022  f4203080          BIC      r0,r0,#0x10000        ;819
000026  4a06              LDR      r2,|L11.64|
000028  6010              STR      r0,[r2,#0]            ;819
00002a  2001              MOVS     r0,#1                 ;822
00002c  f8c100a4          STR      r0,[r1,#0xa4]         ;822
000030  bf00              NOP                            ;825
000032  2000              MOVS     r0,#0                 ;825
000034  f8c100a0          STR      r0,[r1,#0xa0]         ;825
000038  bf00              NOP                            ;825
00003a  bf00              NOP                            ;827
00003c  e7e7              B        |L11.14|
;;;829    
                          ENDP

00003e  0000              DCW      0x0000
                  |L11.64|
                          DCD      0x40016818

                          AREA ||i.HAL_LTDC_EnableCLUT||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_EnableCLUT PROC
;;;712      */
;;;713    HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
000000  b510              PUSH     {r4,lr}
;;;714    {
000002  4602              MOV      r2,r0
;;;715    
;;;716      /* Process locked */
;;;717      __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f8d200a0          LDR      r0,[r2,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L12.18|
00000e  2002              MOVS     r0,#2
                  |L12.16|
;;;718    
;;;719      /* Change LTDC peripheral state */
;;;720      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;721    
;;;722      /* Check the parameters */
;;;723      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;724    
;;;725      /* Disable LTDC color lookup table by setting CLUTEN bit */
;;;726      LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
;;;727    
;;;728      /* Sets the Reload type */
;;;729      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;730    
;;;731      /* Change the LTDC state*/
;;;732      hltdc->State = HAL_LTDC_STATE_READY; 
;;;733    
;;;734      /* Process unlocked */
;;;735      __HAL_UNLOCK(hltdc);
;;;736    
;;;737      return HAL_OK;
;;;738    }
000010  bd10              POP      {r4,pc}
                  |L12.18|
000012  2001              MOVS     r0,#1                 ;717
000014  f8c200a0          STR      r0,[r2,#0xa0]         ;717
000018  bf00              NOP                            ;717
00001a  2002              MOVS     r0,#2                 ;720
00001c  f8c200a4          STR      r0,[r2,#0xa4]         ;720
000020  6810              LDR      r0,[r2,#0]            ;726
000022  3084              ADDS     r0,r0,#0x84           ;726
000024  01cb              LSLS     r3,r1,#7              ;726
000026  58c0              LDR      r0,[r0,r3]            ;726
000028  f0400310          ORR      r3,r0,#0x10           ;726
00002c  6810              LDR      r0,[r2,#0]            ;726
00002e  3084              ADDS     r0,r0,#0x84           ;726
000030  01cc              LSLS     r4,r1,#7              ;726
000032  5103              STR      r3,[r0,r4]            ;726
000034  2001              MOVS     r0,#1                 ;729
000036  6813              LDR      r3,[r2,#0]            ;729
000038  6258              STR      r0,[r3,#0x24]         ;729
00003a  f8c200a4          STR      r0,[r2,#0xa4]         ;732
00003e  bf00              NOP                            ;735
000040  2000              MOVS     r0,#0                 ;735
000042  f8c200a0          STR      r0,[r2,#0xa0]         ;735
000046  bf00              NOP                            ;735
000048  bf00              NOP                            ;737
00004a  e7e1              B        |L12.16|
;;;739    
                          ENDP


                          AREA ||i.HAL_LTDC_EnableCLUT_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_EnableCLUT_NoReload PROC
;;;1709     */
;;;1710   HAL_StatusTypeDef HAL_LTDC_EnableCLUT_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
000000  b510              PUSH     {r4,lr}
;;;1711   {
000002  4602              MOV      r2,r0
;;;1712   
;;;1713     /* Process locked */
;;;1714     __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f8d200a0          LDR      r0,[r2,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L13.18|
00000e  2002              MOVS     r0,#2
                  |L13.16|
;;;1715   
;;;1716     /* Change LTDC peripheral state */
;;;1717     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1718   
;;;1719     /* Check the parameters */
;;;1720     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1721   
;;;1722     /* Disable LTDC color lookup table by setting CLUTEN bit */
;;;1723     LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
;;;1724   
;;;1725     /* Do not Sets the Reload  */
;;;1726   
;;;1727     /* Change the LTDC state*/
;;;1728     hltdc->State = HAL_LTDC_STATE_READY; 
;;;1729   
;;;1730     /* Process unlocked */
;;;1731     __HAL_UNLOCK(hltdc);
;;;1732   
;;;1733     return HAL_OK;
;;;1734   }
000010  bd10              POP      {r4,pc}
                  |L13.18|
000012  2001              MOVS     r0,#1                 ;1714
000014  f8c200a0          STR      r0,[r2,#0xa0]         ;1714
000018  bf00              NOP                            ;1714
00001a  2002              MOVS     r0,#2                 ;1717
00001c  f8c200a4          STR      r0,[r2,#0xa4]         ;1717
000020  6810              LDR      r0,[r2,#0]            ;1723
000022  3084              ADDS     r0,r0,#0x84           ;1723
000024  01cb              LSLS     r3,r1,#7              ;1723
000026  58c0              LDR      r0,[r0,r3]            ;1723
000028  f0400310          ORR      r3,r0,#0x10           ;1723
00002c  6810              LDR      r0,[r2,#0]            ;1723
00002e  3084              ADDS     r0,r0,#0x84           ;1723
000030  01cc              LSLS     r4,r1,#7              ;1723
000032  5103              STR      r3,[r0,r4]            ;1723
000034  2001              MOVS     r0,#1                 ;1728
000036  f8c200a4          STR      r0,[r2,#0xa4]         ;1728
00003a  bf00              NOP                            ;1731
00003c  2000              MOVS     r0,#0                 ;1731
00003e  f8c200a0          STR      r0,[r2,#0xa0]         ;1731
000042  bf00              NOP                            ;1731
000044  bf00              NOP                            ;1733
000046  e7e3              B        |L13.16|
;;;1735   
                          ENDP


                          AREA ||i.HAL_LTDC_EnableColorKeying||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_EnableColorKeying PROC
;;;642      */
;;;643    HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
000000  b510              PUSH     {r4,lr}
;;;644    {  
000002  4602              MOV      r2,r0
;;;645      /* Process locked */
;;;646      __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f8d200a0          LDR      r0,[r2,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L14.18|
00000e  2002              MOVS     r0,#2
                  |L14.16|
;;;647    
;;;648      /* Change LTDC peripheral state */
;;;649      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;650    
;;;651      /* Check the parameters */
;;;652      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;653    
;;;654      /* Enable LTDC color keying by setting COLKEN bit */
;;;655      LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
;;;656    
;;;657      /* Sets the Reload type */
;;;658      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;659    
;;;660      /* Change the LTDC state*/
;;;661      hltdc->State = HAL_LTDC_STATE_READY; 
;;;662    
;;;663      /* Process unlocked */
;;;664      __HAL_UNLOCK(hltdc);
;;;665    
;;;666      return HAL_OK;  
;;;667    }
000010  bd10              POP      {r4,pc}
                  |L14.18|
000012  2001              MOVS     r0,#1                 ;646
000014  f8c200a0          STR      r0,[r2,#0xa0]         ;646
000018  bf00              NOP                            ;646
00001a  2002              MOVS     r0,#2                 ;649
00001c  f8c200a4          STR      r0,[r2,#0xa4]         ;649
000020  6810              LDR      r0,[r2,#0]            ;655
000022  3084              ADDS     r0,r0,#0x84           ;655
000024  01cb              LSLS     r3,r1,#7              ;655
000026  58c0              LDR      r0,[r0,r3]            ;655
000028  f0400302          ORR      r3,r0,#2              ;655
00002c  6810              LDR      r0,[r2,#0]            ;655
00002e  3084              ADDS     r0,r0,#0x84           ;655
000030  01cc              LSLS     r4,r1,#7              ;655
000032  5103              STR      r3,[r0,r4]            ;655
000034  2001              MOVS     r0,#1                 ;658
000036  6813              LDR      r3,[r2,#0]            ;658
000038  6258              STR      r0,[r3,#0x24]         ;658
00003a  f8c200a4          STR      r0,[r2,#0xa4]         ;661
00003e  bf00              NOP                            ;664
000040  2000              MOVS     r0,#0                 ;664
000042  f8c200a0          STR      r0,[r2,#0xa0]         ;664
000046  bf00              NOP                            ;664
000048  bf00              NOP                            ;666
00004a  e7e1              B        |L14.16|
;;;668      
                          ENDP


                          AREA ||i.HAL_LTDC_EnableColorKeying_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_EnableColorKeying_NoReload PROC
;;;1639     */
;;;1640   HAL_StatusTypeDef HAL_LTDC_EnableColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
000000  b510              PUSH     {r4,lr}
;;;1641   {  
000002  4602              MOV      r2,r0
;;;1642     /* Process locked */
;;;1643     __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f8d200a0          LDR      r0,[r2,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L15.18|
00000e  2002              MOVS     r0,#2
                  |L15.16|
;;;1644   
;;;1645     /* Change LTDC peripheral state */
;;;1646     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1647   
;;;1648     /* Check the parameters */
;;;1649     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1650   
;;;1651     /* Enable LTDC color keying by setting COLKEN bit */
;;;1652     LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
;;;1653   
;;;1654     /* Do not Sets the Reload  */
;;;1655   
;;;1656     /* Change the LTDC state*/
;;;1657     hltdc->State = HAL_LTDC_STATE_READY; 
;;;1658   
;;;1659     /* Process unlocked */
;;;1660     __HAL_UNLOCK(hltdc);
;;;1661   
;;;1662     return HAL_OK;  
;;;1663   }
000010  bd10              POP      {r4,pc}
                  |L15.18|
000012  2001              MOVS     r0,#1                 ;1643
000014  f8c200a0          STR      r0,[r2,#0xa0]         ;1643
000018  bf00              NOP                            ;1643
00001a  2002              MOVS     r0,#2                 ;1646
00001c  f8c200a4          STR      r0,[r2,#0xa4]         ;1646
000020  6810              LDR      r0,[r2,#0]            ;1652
000022  3084              ADDS     r0,r0,#0x84           ;1652
000024  01cb              LSLS     r3,r1,#7              ;1652
000026  58c0              LDR      r0,[r0,r3]            ;1652
000028  f0400302          ORR      r3,r0,#2              ;1652
00002c  6810              LDR      r0,[r2,#0]            ;1652
00002e  3084              ADDS     r0,r0,#0x84           ;1652
000030  01cc              LSLS     r4,r1,#7              ;1652
000032  5103              STR      r3,[r0,r4]            ;1652
000034  2001              MOVS     r0,#1                 ;1657
000036  f8c200a4          STR      r0,[r2,#0xa4]         ;1657
00003a  bf00              NOP                            ;1660
00003c  2000              MOVS     r0,#0                 ;1660
00003e  f8c200a0          STR      r0,[r2,#0xa0]         ;1660
000042  bf00              NOP                            ;1660
000044  bf00              NOP                            ;1662
000046  e7e3              B        |L15.16|
;;;1664   
                          ENDP


                          AREA ||i.HAL_LTDC_EnableDither||, CODE, READONLY, ALIGN=2

                  HAL_LTDC_EnableDither PROC
;;;782    
;;;783    HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
000000  4601              MOV      r1,r0
;;;784    {
;;;785      /* Process locked */
;;;786      __HAL_LOCK(hltdc);
000002  bf00              NOP      
000004  f8d100a0          LDR      r0,[r1,#0xa0]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L16.16|
00000c  2002              MOVS     r0,#2
                  |L16.14|
;;;787    
;;;788      /* Change LTDC peripheral state */
;;;789      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;790    
;;;791      /* Enable Dither by setting DTEN bit */
;;;792      LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
;;;793    
;;;794      /* Change the LTDC state*/
;;;795      hltdc->State = HAL_LTDC_STATE_READY; 
;;;796    
;;;797      /* Process unlocked */
;;;798      __HAL_UNLOCK(hltdc);
;;;799    
;;;800      return HAL_OK;
;;;801    }
00000e  4770              BX       lr
                  |L16.16|
000010  2001              MOVS     r0,#1                 ;786
000012  f8c100a0          STR      r0,[r1,#0xa0]         ;786
000016  bf00              NOP                            ;786
000018  2002              MOVS     r0,#2                 ;789
00001a  f8c100a4          STR      r0,[r1,#0xa4]         ;789
00001e  4808              LDR      r0,|L16.64|
000020  6800              LDR      r0,[r0,#0]            ;792
000022  f4403080          ORR      r0,r0,#0x10000        ;792
000026  4a06              LDR      r2,|L16.64|
000028  6010              STR      r0,[r2,#0]            ;792
00002a  2001              MOVS     r0,#1                 ;795
00002c  f8c100a4          STR      r0,[r1,#0xa4]         ;795
000030  bf00              NOP                            ;798
000032  2000              MOVS     r0,#0                 ;798
000034  f8c100a0          STR      r0,[r1,#0xa0]         ;798
000038  bf00              NOP                            ;798
00003a  bf00              NOP                            ;800
00003c  e7e7              B        |L16.14|
;;;802    
                          ENDP

00003e  0000              DCW      0x0000
                  |L16.64|
                          DCD      0x40016818

                          AREA ||i.HAL_LTDC_ErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_ErrorCallback PROC
;;;423      */
;;;424    __weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
000000  4770              BX       lr
;;;425    {
;;;426      /* Prevent unused argument(s) compilation warning */
;;;427      UNUSED(hltdc);
;;;428      
;;;429      /* NOTE : This function Should not be modified, when the callback is needed,
;;;430                the HAL_LTDC_ErrorCallback could be implemented in the user file
;;;431       */
;;;432    }
;;;433    
                          ENDP


                          AREA ||i.HAL_LTDC_GetError||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_GetError PROC
;;;1808   */
;;;1809   uint32_t HAL_LTDC_GetError(LTDC_HandleTypeDef *hltdc)
000000  4601              MOV      r1,r0
;;;1810   {
;;;1811     return hltdc->ErrorCode;
000002  f8d100a8          LDR      r0,[r1,#0xa8]
;;;1812   }
000006  4770              BX       lr
;;;1813   
                          ENDP


                          AREA ||i.HAL_LTDC_GetState||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_GetState PROC
;;;1797     */
;;;1798   HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
000000  4601              MOV      r1,r0
;;;1799   {
;;;1800     return hltdc->State;
000002  f8d100a4          LDR      r0,[r1,#0xa4]
;;;1801   }
000006  4770              BX       lr
;;;1802   
                          ENDP


                          AREA ||i.HAL_LTDC_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_IRQHandler PROC
;;;323      */
;;;324    void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
000000  b510              PUSH     {r4,lr}
;;;325    {
000002  4604              MOV      r4,r0
;;;326      /* Transfer Error Interrupt management ***************************************/
;;;327      if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
000004  6820              LDR      r0,[r4,#0]
000006  6b80              LDR      r0,[r0,#0x38]
000008  f0000004          AND      r0,r0,#4
00000c  b1f0              CBZ      r0,|L20.76|
;;;328      {
;;;329        if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
00000e  6820              LDR      r0,[r4,#0]
000010  6b80              LDR      r0,[r0,#0x38]
000012  f0000004          AND      r0,r0,#4
000016  b1c8              CBZ      r0,|L20.76|
;;;330        {
;;;331          /* Disable the transfer Error interrupt */
;;;332          __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
000018  6820              LDR      r0,[r4,#0]
00001a  6b40              LDR      r0,[r0,#0x34]
00001c  f0200004          BIC      r0,r0,#4
000020  6821              LDR      r1,[r4,#0]
000022  6348              STR      r0,[r1,#0x34]
;;;333    
;;;334          /* Clear the transfer error flag */
;;;335          __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
000024  2004              MOVS     r0,#4
000026  6821              LDR      r1,[r4,#0]
000028  63c8              STR      r0,[r1,#0x3c]
;;;336    
;;;337          /* Update error code */
;;;338          hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
00002a  f8d400a8          LDR      r0,[r4,#0xa8]
00002e  f0400001          ORR      r0,r0,#1
000032  f8c400a8          STR      r0,[r4,#0xa8]
;;;339    
;;;340          /* Change LTDC state */
;;;341          hltdc->State = HAL_LTDC_STATE_ERROR;
000036  2004              MOVS     r0,#4
000038  f8c400a4          STR      r0,[r4,#0xa4]
;;;342    
;;;343          /* Process unlocked */
;;;344          __HAL_UNLOCK(hltdc);
00003c  bf00              NOP      
00003e  2000              MOVS     r0,#0
000040  f8c400a0          STR      r0,[r4,#0xa0]
000044  bf00              NOP      
;;;345    
;;;346          /* Transfer error Callback */
;;;347          HAL_LTDC_ErrorCallback(hltdc);
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       HAL_LTDC_ErrorCallback
                  |L20.76|
;;;348        }
;;;349      }
;;;350      /* FIFO underrun Interrupt management ***************************************/
;;;351      if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
00004c  6820              LDR      r0,[r4,#0]
00004e  6b80              LDR      r0,[r0,#0x38]
000050  f0000002          AND      r0,r0,#2
000054  b1f0              CBZ      r0,|L20.148|
;;;352      {
;;;353        if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
000056  6820              LDR      r0,[r4,#0]
000058  6b80              LDR      r0,[r0,#0x38]
00005a  f0000002          AND      r0,r0,#2
00005e  b1c8              CBZ      r0,|L20.148|
;;;354        {
;;;355          /* Disable the FIFO underrun interrupt */
;;;356          __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
000060  6820              LDR      r0,[r4,#0]
000062  6b40              LDR      r0,[r0,#0x34]
000064  f0200002          BIC      r0,r0,#2
000068  6821              LDR      r1,[r4,#0]
00006a  6348              STR      r0,[r1,#0x34]
;;;357    
;;;358          /* Clear the FIFO underrun flag */
;;;359          __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
00006c  2002              MOVS     r0,#2
00006e  6821              LDR      r1,[r4,#0]
000070  63c8              STR      r0,[r1,#0x3c]
;;;360    
;;;361          /* Update error code */
;;;362          hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
000072  f8d400a8          LDR      r0,[r4,#0xa8]
000076  f0400002          ORR      r0,r0,#2
00007a  f8c400a8          STR      r0,[r4,#0xa8]
;;;363    
;;;364          /* Change LTDC state */
;;;365          hltdc->State = HAL_LTDC_STATE_ERROR;
00007e  2004              MOVS     r0,#4
000080  f8c400a4          STR      r0,[r4,#0xa4]
;;;366    
;;;367          /* Process unlocked */
;;;368          __HAL_UNLOCK(hltdc);
000084  bf00              NOP      
000086  2000              MOVS     r0,#0
000088  f8c400a0          STR      r0,[r4,#0xa0]
00008c  bf00              NOP      
;;;369          
;;;370          /* Transfer error Callback */
;;;371          HAL_LTDC_ErrorCallback(hltdc);
00008e  4620              MOV      r0,r4
000090  f7fffffe          BL       HAL_LTDC_ErrorCallback
                  |L20.148|
;;;372        }
;;;373      }
;;;374      /* Line Interrupt management ************************************************/
;;;375      if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
000094  6820              LDR      r0,[r4,#0]
000096  6b80              LDR      r0,[r0,#0x38]
000098  f0000001          AND      r0,r0,#1
00009c  b1b8              CBZ      r0,|L20.206|
;;;376      {
;;;377        if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
00009e  6820              LDR      r0,[r4,#0]
0000a0  6b80              LDR      r0,[r0,#0x38]
0000a2  f0000001          AND      r0,r0,#1
0000a6  b190              CBZ      r0,|L20.206|
;;;378        {
;;;379          /* Disable the Line interrupt */
;;;380          __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
0000a8  6820              LDR      r0,[r4,#0]
0000aa  6b40              LDR      r0,[r0,#0x34]
0000ac  f0200001          BIC      r0,r0,#1
0000b0  6821              LDR      r1,[r4,#0]
0000b2  6348              STR      r0,[r1,#0x34]
;;;381    
;;;382          /* Clear the Line interrupt flag */  
;;;383          __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
0000b4  2001              MOVS     r0,#1
0000b6  6821              LDR      r1,[r4,#0]
0000b8  63c8              STR      r0,[r1,#0x3c]
;;;384    
;;;385          /* Change LTDC state */
;;;386          hltdc->State = HAL_LTDC_STATE_READY;
0000ba  f8c400a4          STR      r0,[r4,#0xa4]
;;;387    
;;;388          /* Process unlocked */
;;;389          __HAL_UNLOCK(hltdc);
0000be  bf00              NOP      
0000c0  2000              MOVS     r0,#0
0000c2  f8c400a0          STR      r0,[r4,#0xa0]
0000c6  bf00              NOP      
;;;390    
;;;391          /* Line interrupt Callback */
;;;392          HAL_LTDC_LineEventCallback(hltdc);
0000c8  4620              MOV      r0,r4
0000ca  f7fffffe          BL       HAL_LTDC_LineEventCallback
                  |L20.206|
;;;393        }
;;;394      }
;;;395      /* Register reload Interrupt management ***************************************/
;;;396      if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
0000ce  6820              LDR      r0,[r4,#0]
0000d0  6b80              LDR      r0,[r0,#0x38]
0000d2  f0000008          AND      r0,r0,#8
0000d6  b1c0              CBZ      r0,|L20.266|
;;;397      {
;;;398        if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
0000d8  6820              LDR      r0,[r4,#0]
0000da  6b80              LDR      r0,[r0,#0x38]
0000dc  f0000008          AND      r0,r0,#8
0000e0  b198              CBZ      r0,|L20.266|
;;;399        {
;;;400          /* Disable the register reload interrupt */
;;;401          __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
0000e2  6820              LDR      r0,[r4,#0]
0000e4  6b40              LDR      r0,[r0,#0x34]
0000e6  f0200008          BIC      r0,r0,#8
0000ea  6821              LDR      r1,[r4,#0]
0000ec  6348              STR      r0,[r1,#0x34]
;;;402          
;;;403          /* Clear the register reload flag */
;;;404          __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
0000ee  2008              MOVS     r0,#8
0000f0  6821              LDR      r1,[r4,#0]
0000f2  63c8              STR      r0,[r1,#0x3c]
;;;405          
;;;406          /* Change LTDC state */
;;;407          hltdc->State = HAL_LTDC_STATE_READY;
0000f4  2001              MOVS     r0,#1
0000f6  f8c400a4          STR      r0,[r4,#0xa4]
;;;408          
;;;409          /* Process unlocked */
;;;410          __HAL_UNLOCK(hltdc);
0000fa  bf00              NOP      
0000fc  2000              MOVS     r0,#0
0000fe  f8c400a0          STR      r0,[r4,#0xa0]
000102  bf00              NOP      
;;;411          
;;;412          /* Register reload interrupt Callback */
;;;413          HAL_LTDC_ReloadEventCallback(hltdc);
000104  4620              MOV      r0,r4
000106  f7fffffe          BL       HAL_LTDC_ReloadEventCallback
                  |L20.266|
;;;414        }
;;;415      }  
;;;416    }
00010a  bd10              POP      {r4,pc}
;;;417    
                          ENDP


                          AREA ||i.HAL_LTDC_Init||, CODE, READONLY, ALIGN=2

                  HAL_LTDC_Init PROC
;;;158      */
;;;159    HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
000000  b570              PUSH     {r4-r6,lr}
;;;160    {
000002  4604              MOV      r4,r0
;;;161      uint32_t tmp = 0, tmp1 = 0;
000004  2500              MOVS     r5,#0
000006  2600              MOVS     r6,#0
;;;162    
;;;163      /* Check the LTDC peripheral state */
;;;164      if(hltdc == NULL)
000008  b90c              CBNZ     r4,|L21.14|
;;;165      {
;;;166        return HAL_ERROR;
00000a  2001              MOVS     r0,#1
                  |L21.12|
;;;167      }
;;;168    
;;;169      /* Check function parameters */
;;;170      assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
;;;171      assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
;;;172      assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
;;;173      assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
;;;174      assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
;;;175      assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
;;;176      assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
;;;177      assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
;;;178      assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
;;;179      assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
;;;180      assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
;;;181      assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
;;;182      assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
;;;183    
;;;184      if(hltdc->State == HAL_LTDC_STATE_RESET)
;;;185      {
;;;186        /* Allocate lock resource and initialize it */
;;;187        hltdc->Lock = HAL_UNLOCKED;
;;;188        /* Init the low level hardware */
;;;189        HAL_LTDC_MspInit(hltdc);
;;;190      }
;;;191      
;;;192      /* Change LTDC peripheral state */
;;;193      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;194    
;;;195      /* Configures the HS, VS, DE and PC polarity */
;;;196      hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
;;;197      hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
;;;198      hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
;;;199    
;;;200      /* Sets Synchronization size */
;;;201      hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
;;;202      tmp = (hltdc->Init.HorizontalSync << 16);
;;;203      hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
;;;204    
;;;205      /* Sets Accumulated Back porch */
;;;206      hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
;;;207      tmp = (hltdc->Init.AccumulatedHBP << 16);
;;;208      hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
;;;209    
;;;210      /* Sets Accumulated Active Width */
;;;211      hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
;;;212      tmp = (hltdc->Init.AccumulatedActiveW << 16);
;;;213      hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
;;;214    
;;;215      /* Sets Total Width */
;;;216      hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
;;;217      tmp = (hltdc->Init.TotalWidth << 16);
;;;218      hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
;;;219    
;;;220      /* Sets the background color value */
;;;221      tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
;;;222      tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
;;;223      hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
;;;224      hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
;;;225    
;;;226      /* Enable the transfer Error interrupt */
;;;227      __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
;;;228    
;;;229      /* Enable the FIFO underrun interrupt */
;;;230      __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
;;;231    
;;;232      /* Enable LTDC by setting LTDCEN bit */
;;;233      __HAL_LTDC_ENABLE(hltdc);
;;;234    
;;;235      /* Initialize the error code */
;;;236      hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
;;;237    
;;;238      /* Initialize the LTDC state*/
;;;239      hltdc->State = HAL_LTDC_STATE_READY;
;;;240    
;;;241      return HAL_OK;
;;;242    }
00000c  bd70              POP      {r4-r6,pc}
                  |L21.14|
00000e  f8d400a4          LDR      r0,[r4,#0xa4]         ;184
000012  b928              CBNZ     r0,|L21.32|
000014  2000              MOVS     r0,#0                 ;187
000016  f8c400a0          STR      r0,[r4,#0xa0]         ;187
00001a  4620              MOV      r0,r4                 ;189
00001c  f7fffffe          BL       HAL_LTDC_MspInit
                  |L21.32|
000020  2002              MOVS     r0,#2                 ;193
000022  f8c400a4          STR      r0,[r4,#0xa4]         ;193
000026  6820              LDR      r0,[r4,#0]            ;196
000028  6980              LDR      r0,[r0,#0x18]         ;196
00002a  f0204070          BIC      r0,r0,#0xf0000000     ;196
00002e  6821              LDR      r1,[r4,#0]            ;196
000030  6188              STR      r0,[r1,#0x18]         ;196
000032  e9d40101          LDRD     r0,r1,[r4,#4]         ;197
000036  4308              ORRS     r0,r0,r1              ;197
000038  68e1              LDR      r1,[r4,#0xc]          ;197
00003a  4308              ORRS     r0,r0,r1              ;197
00003c  6921              LDR      r1,[r4,#0x10]         ;197
00003e  4308              ORRS     r0,r0,r1              ;197
000040  6821              LDR      r1,[r4,#0]            ;197
000042  6989              LDR      r1,[r1,#0x18]         ;197
000044  4308              ORRS     r0,r0,r1              ;197
000046  6821              LDR      r1,[r4,#0]            ;197
000048  6188              STR      r0,[r1,#0x18]         ;197
00004a  6820              LDR      r0,[r4,#0]            ;201
00004c  6880              LDR      r0,[r0,#8]            ;201
00004e  4935              LDR      r1,|L21.292|
000050  4008              ANDS     r0,r0,r1              ;201
000052  6821              LDR      r1,[r4,#0]            ;201
000054  6088              STR      r0,[r1,#8]            ;201
000056  8aa0              LDRH     r0,[r4,#0x14]         ;202
000058  0405              LSLS     r5,r0,#16             ;202
00005a  6820              LDR      r0,[r4,#0]            ;203
00005c  6880              LDR      r0,[r0,#8]            ;203
00005e  69a1              LDR      r1,[r4,#0x18]         ;203
000060  4329              ORRS     r1,r1,r5              ;203
000062  4308              ORRS     r0,r0,r1              ;203
000064  6821              LDR      r1,[r4,#0]            ;203
000066  6088              STR      r0,[r1,#8]            ;203
000068  6820              LDR      r0,[r4,#0]            ;206
00006a  68c0              LDR      r0,[r0,#0xc]          ;206
00006c  492d              LDR      r1,|L21.292|
00006e  4008              ANDS     r0,r0,r1              ;206
000070  6821              LDR      r1,[r4,#0]            ;206
000072  60c8              STR      r0,[r1,#0xc]          ;206
000074  8ba0              LDRH     r0,[r4,#0x1c]         ;207
000076  0405              LSLS     r5,r0,#16             ;207
000078  6820              LDR      r0,[r4,#0]            ;208
00007a  68c0              LDR      r0,[r0,#0xc]          ;208
00007c  6a21              LDR      r1,[r4,#0x20]         ;208
00007e  4329              ORRS     r1,r1,r5              ;208
000080  4308              ORRS     r0,r0,r1              ;208
000082  6821              LDR      r1,[r4,#0]            ;208
000084  60c8              STR      r0,[r1,#0xc]          ;208
000086  6820              LDR      r0,[r4,#0]            ;211
000088  6900              LDR      r0,[r0,#0x10]         ;211
00008a  4926              LDR      r1,|L21.292|
00008c  4008              ANDS     r0,r0,r1              ;211
00008e  6821              LDR      r1,[r4,#0]            ;211
000090  6108              STR      r0,[r1,#0x10]         ;211
000092  8ca0              LDRH     r0,[r4,#0x24]         ;212
000094  0405              LSLS     r5,r0,#16             ;212
000096  6820              LDR      r0,[r4,#0]            ;213
000098  6900              LDR      r0,[r0,#0x10]         ;213
00009a  6aa1              LDR      r1,[r4,#0x28]         ;213
00009c  4329              ORRS     r1,r1,r5              ;213
00009e  4308              ORRS     r0,r0,r1              ;213
0000a0  6821              LDR      r1,[r4,#0]            ;213
0000a2  6108              STR      r0,[r1,#0x10]         ;213
0000a4  6820              LDR      r0,[r4,#0]            ;216
0000a6  6940              LDR      r0,[r0,#0x14]         ;216
0000a8  491e              LDR      r1,|L21.292|
0000aa  4008              ANDS     r0,r0,r1              ;216
0000ac  6821              LDR      r1,[r4,#0]            ;216
0000ae  6148              STR      r0,[r1,#0x14]         ;216
0000b0  8da0              LDRH     r0,[r4,#0x2c]         ;217
0000b2  0405              LSLS     r5,r0,#16             ;217
0000b4  6820              LDR      r0,[r4,#0]            ;218
0000b6  6940              LDR      r0,[r0,#0x14]         ;218
0000b8  6b21              LDR      r1,[r4,#0x30]         ;218
0000ba  4329              ORRS     r1,r1,r5              ;218
0000bc  4308              ORRS     r0,r0,r1              ;218
0000be  6821              LDR      r1,[r4,#0]            ;218
0000c0  6148              STR      r0,[r1,#0x14]         ;218
0000c2  f8940035          LDRB     r0,[r4,#0x35]         ;221
0000c6  0205              LSLS     r5,r0,#8              ;221
0000c8  f8940036          LDRB     r0,[r4,#0x36]         ;222
0000cc  0406              LSLS     r6,r0,#16             ;222
0000ce  6820              LDR      r0,[r4,#0]            ;223
0000d0  6ac0              LDR      r0,[r0,#0x2c]         ;223
0000d2  f000407f          AND      r0,r0,#0xff000000     ;223
0000d6  6821              LDR      r1,[r4,#0]            ;223
0000d8  62c8              STR      r0,[r1,#0x2c]         ;223
0000da  ea460005          ORR      r0,r6,r5              ;224
0000de  f8941034          LDRB     r1,[r4,#0x34]         ;224
0000e2  4308              ORRS     r0,r0,r1              ;224
0000e4  6821              LDR      r1,[r4,#0]            ;224
0000e6  6ac9              LDR      r1,[r1,#0x2c]         ;224
0000e8  4308              ORRS     r0,r0,r1              ;224
0000ea  6821              LDR      r1,[r4,#0]            ;224
0000ec  62c8              STR      r0,[r1,#0x2c]         ;224
0000ee  6820              LDR      r0,[r4,#0]            ;227
0000f0  6b40              LDR      r0,[r0,#0x34]         ;227
0000f2  f0400004          ORR      r0,r0,#4              ;227
0000f6  6821              LDR      r1,[r4,#0]            ;227
0000f8  6348              STR      r0,[r1,#0x34]         ;227
0000fa  6820              LDR      r0,[r4,#0]            ;230
0000fc  6b40              LDR      r0,[r0,#0x34]         ;230
0000fe  f0400002          ORR      r0,r0,#2              ;230
000102  6821              LDR      r1,[r4,#0]            ;230
000104  6348              STR      r0,[r1,#0x34]         ;230
000106  6820              LDR      r0,[r4,#0]            ;233
000108  6980              LDR      r0,[r0,#0x18]         ;233
00010a  f0400001          ORR      r0,r0,#1              ;233
00010e  6821              LDR      r1,[r4,#0]            ;233
000110  6188              STR      r0,[r1,#0x18]         ;233
000112  2000              MOVS     r0,#0                 ;236
000114  f8c400a8          STR      r0,[r4,#0xa8]         ;236
000118  2001              MOVS     r0,#1                 ;239
00011a  f8c400a4          STR      r0,[r4,#0xa4]         ;239
00011e  2000              MOVS     r0,#0                 ;241
000120  e774              B        |L21.12|
;;;243    
                          ENDP

000122  0000              DCW      0x0000
                  |L21.292|
                          DCD      0xf000f800

                          AREA ||i.HAL_LTDC_LineEventCallback||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_LineEventCallback PROC
;;;439      */
;;;440    __weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
000000  4770              BX       lr
;;;441    {
;;;442      /* Prevent unused argument(s) compilation warning */
;;;443      UNUSED(hltdc);
;;;444      
;;;445      /* NOTE : This function Should not be modified, when the callback is needed,
;;;446                the HAL_LTDC_LineEventCallback could be implemented in the user file
;;;447       */
;;;448    }
;;;449    
                          ENDP


                          AREA ||i.HAL_LTDC_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_MspDeInit PROC
;;;290      */
;;;291    __weak void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* hltdc)
000000  4770              BX       lr
;;;292    {
;;;293      /* Prevent unused argument(s) compilation warning */
;;;294      UNUSED(hltdc);
;;;295      
;;;296      /* NOTE : This function Should not be modified, when the callback is needed,
;;;297                the HAL_LTDC_MspDeInit could be implemented in the user file
;;;298       */
;;;299    }
;;;300    
                          ENDP


                          AREA ||i.HAL_LTDC_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_MspInit PROC
;;;274      */
;;;275    __weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
000000  4770              BX       lr
;;;276    {
;;;277      /* Prevent unused argument(s) compilation warning */
;;;278      UNUSED(hltdc);
;;;279      
;;;280      /* NOTE : This function Should not be modified, when the callback is needed,
;;;281                the HAL_LTDC_MspInit could be implemented in the user file
;;;282       */ 
;;;283    }
;;;284    
                          ENDP


                          AREA ||i.HAL_LTDC_ProgramLineEvent||, CODE, READONLY, ALIGN=2

                  HAL_LTDC_ProgramLineEvent PROC
;;;1159     */
;;;1160   HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
000000  4602              MOV      r2,r0
;;;1161   {
;;;1162     /* Process locked */
;;;1163     __HAL_LOCK(hltdc);
000002  bf00              NOP      
000004  f8d200a0          LDR      r0,[r2,#0xa0]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L25.16|
00000c  2002              MOVS     r0,#2
                  |L25.14|
;;;1164   
;;;1165     /* Change LTDC peripheral state */
;;;1166     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1167   
;;;1168     /* Check the parameters */
;;;1169     assert_param(IS_LTDC_LIPOS(Line));
;;;1170   
;;;1171     /* Enable the Line interrupt */
;;;1172     __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
;;;1173   
;;;1174     /* Sets the Line Interrupt position */
;;;1175     LTDC->LIPCR = (uint32_t)Line;
;;;1176   
;;;1177     /* Change the LTDC state*/
;;;1178     hltdc->State = HAL_LTDC_STATE_READY;
;;;1179   
;;;1180     /* Process unlocked */
;;;1181     __HAL_UNLOCK(hltdc);
;;;1182   
;;;1183     return HAL_OK;
;;;1184   }
00000e  4770              BX       lr
                  |L25.16|
000010  2001              MOVS     r0,#1                 ;1163
000012  f8c200a0          STR      r0,[r2,#0xa0]         ;1163
000016  bf00              NOP                            ;1163
000018  2002              MOVS     r0,#2                 ;1166
00001a  f8c200a4          STR      r0,[r2,#0xa4]         ;1166
00001e  6810              LDR      r0,[r2,#0]            ;1172
000020  6b40              LDR      r0,[r0,#0x34]         ;1172
000022  f0400001          ORR      r0,r0,#1              ;1172
000026  6813              LDR      r3,[r2,#0]            ;1172
000028  6358              STR      r0,[r3,#0x34]         ;1172
00002a  4806              LDR      r0,|L25.68|
00002c  6001              STR      r1,[r0,#0]            ;1175
00002e  2001              MOVS     r0,#1                 ;1178
000030  f8c200a4          STR      r0,[r2,#0xa4]         ;1178
000034  bf00              NOP                            ;1181
000036  2000              MOVS     r0,#0                 ;1181
000038  f8c200a0          STR      r0,[r2,#0xa0]         ;1181
00003c  bf00              NOP                            ;1181
00003e  bf00              NOP                            ;1183
000040  e7e5              B        |L25.14|
;;;1185   
                          ENDP

000042  0000              DCW      0x0000
                  |L25.68|
                          DCD      0x40016840

                          AREA ||i.HAL_LTDC_Reload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_Reload PROC
;;;1194     */
;;;1195   HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
000000  4602              MOV      r2,r0
;;;1196   {
;;;1197     assert_param(IS_LTDC_RELAOD(ReloadType));
;;;1198   
;;;1199     /* Process locked */
;;;1200     __HAL_LOCK(hltdc);
000002  bf00              NOP      
000004  f8d200a0          LDR      r0,[r2,#0xa0]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L26.16|
00000c  2002              MOVS     r0,#2
                  |L26.14|
;;;1201   
;;;1202     /* Change LTDC peripheral state */
;;;1203     hltdc->State = HAL_LTDC_STATE_BUSY;  
;;;1204     
;;;1205     /* Enable the Reload interrupt */  
;;;1206     __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
;;;1207          
;;;1208     /* Apply Reload type */
;;;1209     hltdc->Instance->SRCR = ReloadType;        
;;;1210   
;;;1211     /* Change the LTDC state*/
;;;1212     hltdc->State = HAL_LTDC_STATE_READY;
;;;1213     
;;;1214     /* Process unlocked */
;;;1215     __HAL_UNLOCK(hltdc);
;;;1216     
;;;1217     return HAL_OK;
;;;1218   }
00000e  4770              BX       lr
                  |L26.16|
000010  2001              MOVS     r0,#1                 ;1200
000012  f8c200a0          STR      r0,[r2,#0xa0]         ;1200
000016  bf00              NOP                            ;1200
000018  2002              MOVS     r0,#2                 ;1203
00001a  f8c200a4          STR      r0,[r2,#0xa4]         ;1203
00001e  6810              LDR      r0,[r2,#0]            ;1206
000020  6b40              LDR      r0,[r0,#0x34]         ;1206
000022  f0400008          ORR      r0,r0,#8              ;1206
000026  6813              LDR      r3,[r2,#0]            ;1206
000028  6358              STR      r0,[r3,#0x34]         ;1206
00002a  6810              LDR      r0,[r2,#0]            ;1209
00002c  6241              STR      r1,[r0,#0x24]         ;1209
00002e  2001              MOVS     r0,#1                 ;1212
000030  f8c200a4          STR      r0,[r2,#0xa4]         ;1212
000034  bf00              NOP                            ;1215
000036  2000              MOVS     r0,#0                 ;1215
000038  f8c200a0          STR      r0,[r2,#0xa0]         ;1215
00003c  bf00              NOP                            ;1215
00003e  bf00              NOP                            ;1217
000040  e7e5              B        |L26.14|
;;;1219   
                          ENDP


                          AREA ||i.HAL_LTDC_ReloadEventCallback||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_ReloadEventCallback PROC
;;;455      */
;;;456    __weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
000000  4770              BX       lr
;;;457    {
;;;458      /* Prevent unused argument(s) compilation warning */
;;;459      UNUSED(hltdc);
;;;460      
;;;461      /* NOTE : This function Should not be modified, when the callback is needed,
;;;462                the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
;;;463       */
;;;464    }
;;;465    
                          ENDP


                          AREA ||i.HAL_LTDC_SetAddress||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetAddress PROC
;;;1044     */
;;;1045   HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1046   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;1047     LTDC_LayerCfgTypeDef *pLayerCfg;
;;;1048   
;;;1049     /* Process locked */
;;;1050     __HAL_LOCK(hltdc);
00000a  bf00              NOP      
00000c  f8d400a0          LDR      r0,[r4,#0xa0]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L28.26|
000014  2002              MOVS     r0,#2
                  |L28.22|
;;;1051   
;;;1052     /* Change LTDC peripheral state */
;;;1053     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1054   
;;;1055     /* Check the parameters */
;;;1056     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1057   
;;;1058     /* Get layer configuration from handle structure */
;;;1059     pLayerCfg = &hltdc->LayerCfg[LayerIdx];
;;;1060   
;;;1061     /* Reconfigure the Address */
;;;1062     pLayerCfg->FBStartAdress = Address;
;;;1063   
;;;1064     /* Set LTDC parameters */
;;;1065     LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;1066   
;;;1067     /* Sets the Reload type */
;;;1068     hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;1069   
;;;1070     /* Change the LTDC state*/
;;;1071     hltdc->State = HAL_LTDC_STATE_READY;
;;;1072   
;;;1073     /* Process unlocked */
;;;1074     __HAL_UNLOCK(hltdc);
;;;1075   
;;;1076     return HAL_OK;
;;;1077   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L28.26|
00001a  2001              MOVS     r0,#1                 ;1050
00001c  f8c400a0          STR      r0,[r4,#0xa0]         ;1050
000020  bf00              NOP                            ;1050
000022  2002              MOVS     r0,#2                 ;1053
000024  f8c400a4          STR      r0,[r4,#0xa4]         ;1053
000028  eb070087          ADD      r0,r7,r7,LSL #2       ;1059
00002c  eb0001c7          ADD      r1,r0,r7,LSL #3       ;1059
000030  f1040038          ADD      r0,r4,#0x38           ;1059
000034  eb000581          ADD      r5,r0,r1,LSL #2       ;1059
000038  626e              STR      r6,[r5,#0x24]         ;1062
00003a  463a              MOV      r2,r7                 ;1065
00003c  4629              MOV      r1,r5                 ;1065
00003e  4620              MOV      r0,r4                 ;1065
000040  f7fffffe          BL       LTDC_SetConfig
000044  2001              MOVS     r0,#1                 ;1068
000046  6821              LDR      r1,[r4,#0]            ;1068
000048  6248              STR      r0,[r1,#0x24]         ;1068
00004a  f8c400a4          STR      r0,[r4,#0xa4]         ;1071
00004e  bf00              NOP                            ;1074
000050  2000              MOVS     r0,#0                 ;1074
000052  f8c400a0          STR      r0,[r4,#0xa0]         ;1074
000056  bf00              NOP                            ;1074
000058  bf00              NOP                            ;1076
00005a  e7dc              B        |L28.22|
;;;1078   
                          ENDP


                          AREA ||i.HAL_LTDC_SetAddress_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetAddress_NoReload PROC
;;;1487     */
;;;1488   HAL_StatusTypeDef HAL_LTDC_SetAddress_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1489   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;1490     LTDC_LayerCfgTypeDef *pLayerCfg;
;;;1491   
;;;1492     /* Process locked */
;;;1493     __HAL_LOCK(hltdc);
00000a  bf00              NOP      
00000c  f8d400a0          LDR      r0,[r4,#0xa0]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L29.26|
000014  2002              MOVS     r0,#2
                  |L29.22|
;;;1494   
;;;1495     /* Change LTDC peripheral state */
;;;1496     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1497   
;;;1498     /* Check the parameters */
;;;1499     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1500   
;;;1501     /* Get layer configuration from handle structure */
;;;1502     pLayerCfg = &hltdc->LayerCfg[LayerIdx];
;;;1503   
;;;1504     /* Reconfigure the Address */
;;;1505     pLayerCfg->FBStartAdress = Address;
;;;1506   
;;;1507     /* Set LTDC parameters */
;;;1508     LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;1509   
;;;1510     /* Do not Sets the Reload  */
;;;1511   
;;;1512     /* Change the LTDC state*/
;;;1513     hltdc->State = HAL_LTDC_STATE_READY;
;;;1514   
;;;1515     /* Process unlocked */
;;;1516     __HAL_UNLOCK(hltdc);
;;;1517   
;;;1518     return HAL_OK;
;;;1519   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L29.26|
00001a  2001              MOVS     r0,#1                 ;1493
00001c  f8c400a0          STR      r0,[r4,#0xa0]         ;1493
000020  bf00              NOP                            ;1493
000022  2002              MOVS     r0,#2                 ;1496
000024  f8c400a4          STR      r0,[r4,#0xa4]         ;1496
000028  eb070087          ADD      r0,r7,r7,LSL #2       ;1502
00002c  eb0001c7          ADD      r1,r0,r7,LSL #3       ;1502
000030  f1040038          ADD      r0,r4,#0x38           ;1502
000034  eb000581          ADD      r5,r0,r1,LSL #2       ;1502
000038  626e              STR      r6,[r5,#0x24]         ;1505
00003a  463a              MOV      r2,r7                 ;1508
00003c  4629              MOV      r1,r5                 ;1508
00003e  4620              MOV      r0,r4                 ;1508
000040  f7fffffe          BL       LTDC_SetConfig
000044  2001              MOVS     r0,#1                 ;1513
000046  f8c400a4          STR      r0,[r4,#0xa4]         ;1513
00004a  bf00              NOP                            ;1516
00004c  2000              MOVS     r0,#0                 ;1516
00004e  f8c400a0          STR      r0,[r4,#0xa0]         ;1516
000052  bf00              NOP                            ;1516
000054  bf00              NOP                            ;1518
000056  e7de              B        |L29.22|
;;;1520   
                          ENDP


                          AREA ||i.HAL_LTDC_SetAlpha||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetAlpha PROC
;;;1000     */
;;;1001   HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1002   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;1003     LTDC_LayerCfgTypeDef *pLayerCfg;
;;;1004   
;;;1005     /* Process locked */
;;;1006     __HAL_LOCK(hltdc);
00000a  bf00              NOP      
00000c  f8d400a0          LDR      r0,[r4,#0xa0]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L30.26|
000014  2002              MOVS     r0,#2
                  |L30.22|
;;;1007   
;;;1008     /* Change LTDC peripheral state */
;;;1009     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1010   
;;;1011     /* Check the parameters */
;;;1012     assert_param(IS_LTDC_ALPHA(Alpha));
;;;1013     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1014   
;;;1015     /* Get layer configuration from handle structure */
;;;1016     pLayerCfg = &hltdc->LayerCfg[LayerIdx];
;;;1017   
;;;1018     /* Reconfigure the Alpha value */
;;;1019     pLayerCfg->Alpha = Alpha;
;;;1020   
;;;1021     /* Set LTDC parameters */
;;;1022     LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;1023   
;;;1024     /* Sets the Reload type */
;;;1025     hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;1026   
;;;1027     /* Change the LTDC state*/
;;;1028     hltdc->State = HAL_LTDC_STATE_READY;
;;;1029   
;;;1030     /* Process unlocked */
;;;1031     __HAL_UNLOCK(hltdc);
;;;1032   
;;;1033     return HAL_OK;
;;;1034   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L30.26|
00001a  2001              MOVS     r0,#1                 ;1006
00001c  f8c400a0          STR      r0,[r4,#0xa0]         ;1006
000020  bf00              NOP                            ;1006
000022  2002              MOVS     r0,#2                 ;1009
000024  f8c400a4          STR      r0,[r4,#0xa4]         ;1009
000028  eb070087          ADD      r0,r7,r7,LSL #2       ;1016
00002c  eb0001c7          ADD      r1,r0,r7,LSL #3       ;1016
000030  f1040038          ADD      r0,r4,#0x38           ;1016
000034  eb000581          ADD      r5,r0,r1,LSL #2       ;1016
000038  616e              STR      r6,[r5,#0x14]         ;1019
00003a  463a              MOV      r2,r7                 ;1022
00003c  4629              MOV      r1,r5                 ;1022
00003e  4620              MOV      r0,r4                 ;1022
000040  f7fffffe          BL       LTDC_SetConfig
000044  2001              MOVS     r0,#1                 ;1025
000046  6821              LDR      r1,[r4,#0]            ;1025
000048  6248              STR      r0,[r1,#0x24]         ;1025
00004a  f8c400a4          STR      r0,[r4,#0xa4]         ;1028
00004e  bf00              NOP                            ;1031
000050  2000              MOVS     r0,#0                 ;1031
000052  f8c400a0          STR      r0,[r4,#0xa0]         ;1031
000056  bf00              NOP                            ;1031
000058  bf00              NOP                            ;1033
00005a  e7dc              B        |L30.22|
;;;1035   /**
                          ENDP


                          AREA ||i.HAL_LTDC_SetAlpha_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetAlpha_NoReload PROC
;;;1442     */
;;;1443   HAL_StatusTypeDef HAL_LTDC_SetAlpha_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1444   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;1445     LTDC_LayerCfgTypeDef *pLayerCfg;
;;;1446   
;;;1447     /* Process locked */
;;;1448     __HAL_LOCK(hltdc);
00000a  bf00              NOP      
00000c  f8d400a0          LDR      r0,[r4,#0xa0]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L31.26|
000014  2002              MOVS     r0,#2
                  |L31.22|
;;;1449   
;;;1450     /* Change LTDC peripheral state */
;;;1451     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1452   
;;;1453     /* Check the parameters */
;;;1454     assert_param(IS_LTDC_ALPHA(Alpha));
;;;1455     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1456   
;;;1457     /* Get layer configuration from handle structure */
;;;1458     pLayerCfg = &hltdc->LayerCfg[LayerIdx];
;;;1459   
;;;1460     /* Reconfigure the Alpha value */
;;;1461     pLayerCfg->Alpha = Alpha;
;;;1462   
;;;1463     /* Set LTDC parameters */
;;;1464     LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;1465   
;;;1466     /* Do not Sets the Reload  */
;;;1467   
;;;1468     /* Change the LTDC state*/
;;;1469     hltdc->State = HAL_LTDC_STATE_READY;
;;;1470   
;;;1471     /* Process unlocked */
;;;1472     __HAL_UNLOCK(hltdc);
;;;1473   
;;;1474     return HAL_OK;
;;;1475   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L31.26|
00001a  2001              MOVS     r0,#1                 ;1448
00001c  f8c400a0          STR      r0,[r4,#0xa0]         ;1448
000020  bf00              NOP                            ;1448
000022  2002              MOVS     r0,#2                 ;1451
000024  f8c400a4          STR      r0,[r4,#0xa4]         ;1451
000028  eb070087          ADD      r0,r7,r7,LSL #2       ;1458
00002c  eb0001c7          ADD      r1,r0,r7,LSL #3       ;1458
000030  f1040038          ADD      r0,r4,#0x38           ;1458
000034  eb000581          ADD      r5,r0,r1,LSL #2       ;1458
000038  616e              STR      r6,[r5,#0x14]         ;1461
00003a  463a              MOV      r2,r7                 ;1464
00003c  4629              MOV      r1,r5                 ;1464
00003e  4620              MOV      r0,r4                 ;1464
000040  f7fffffe          BL       LTDC_SetConfig
000044  2001              MOVS     r0,#1                 ;1469
000046  f8c400a4          STR      r0,[r4,#0xa4]         ;1469
00004a  bf00              NOP                            ;1472
00004c  2000              MOVS     r0,#0                 ;1472
00004e  f8c400a0          STR      r0,[r4,#0xa0]         ;1472
000052  bf00              NOP                            ;1472
000054  bf00              NOP                            ;1474
000056  e7de              B        |L31.22|
;;;1476   
                          ENDP


                          AREA ||i.HAL_LTDC_SetPitch||, CODE, READONLY, ALIGN=2

                  HAL_LTDC_SetPitch PROC
;;;1091     */
;;;1092   HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1093   {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;1094     uint32_t tmp = 0;
000006  2500              MOVS     r5,#0
;;;1095     uint32_t pitchUpdate = 0;
000008  2600              MOVS     r6,#0
;;;1096     uint32_t pixelFormat = 0;
00000a  2100              MOVS     r1,#0
;;;1097     
;;;1098     /* Process locked */
;;;1099     __HAL_LOCK(hltdc);
00000c  bf00              NOP      
00000e  f8d300a0          LDR      r0,[r3,#0xa0]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L32.26|
000016  2002              MOVS     r0,#2
                  |L32.24|
;;;1100     
;;;1101     /* Change LTDC peripheral state */
;;;1102     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1103     
;;;1104     /* Check the parameters */
;;;1105     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1106     
;;;1107     /* get LayerIdx used pixel format */
;;;1108     pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
;;;1109     
;;;1110     if(pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
;;;1111     {
;;;1112       tmp = 4;
;;;1113     }
;;;1114     else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
;;;1115     {
;;;1116       tmp = 3;
;;;1117     }
;;;1118     else if((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
;;;1119             (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
;;;1120             (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
;;;1121            (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
;;;1122     {
;;;1123       tmp = 2;
;;;1124     }
;;;1125     else
;;;1126     {
;;;1127       tmp = 1;
;;;1128     }
;;;1129     
;;;1130     pitchUpdate = ((LinePitchInPixels * tmp) << 16);
;;;1131     
;;;1132     /* Clear previously set standard pitch */
;;;1133     LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
;;;1134     
;;;1135     /* Sets the Reload type as immediate update of LTDC pitch configured above */
;;;1136     LTDC->SRCR |= LTDC_SRCR_IMR;
;;;1137     
;;;1138     /* Set new line pitch value */
;;;1139     LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
;;;1140     
;;;1141     /* Sets the Reload type as immediate update of LTDC pitch configured above */
;;;1142     LTDC->SRCR |= LTDC_SRCR_IMR;
;;;1143     
;;;1144     /* Change the LTDC state*/
;;;1145     hltdc->State = HAL_LTDC_STATE_READY;
;;;1146     
;;;1147     /* Process unlocked */
;;;1148     __HAL_UNLOCK(hltdc);
;;;1149     
;;;1150     return HAL_OK;  
;;;1151   }
000018  bdf0              POP      {r4-r7,pc}
                  |L32.26|
00001a  2001              MOVS     r0,#1                 ;1099
00001c  f8c300a0          STR      r0,[r3,#0xa0]         ;1099
000020  bf00              NOP                            ;1099
000022  2002              MOVS     r0,#2                 ;1102
000024  f8c300a4          STR      r0,[r3,#0xa4]         ;1102
000028  eb020082          ADD      r0,r2,r2,LSL #2       ;1108
00002c  eb0007c2          ADD      r7,r0,r2,LSL #3       ;1108
000030  f1030038          ADD      r0,r3,#0x38           ;1108
000034  eb000087          ADD      r0,r0,r7,LSL #2       ;1108
000038  6901              LDR      r1,[r0,#0x10]         ;1108
00003a  b909              CBNZ     r1,|L32.64|
00003c  2504              MOVS     r5,#4                 ;1112
00003e  e00e              B        |L32.94|
                  |L32.64|
000040  2901              CMP      r1,#1                 ;1114
000042  d101              BNE      |L32.72|
000044  2503              MOVS     r5,#3                 ;1116
000046  e00a              B        |L32.94|
                  |L32.72|
000048  2904              CMP      r1,#4                 ;1118
00004a  d005              BEQ      |L32.88|
00004c  2902              CMP      r1,#2                 ;1119
00004e  d003              BEQ      |L32.88|
000050  2903              CMP      r1,#3                 ;1120
000052  d001              BEQ      |L32.88|
000054  2907              CMP      r1,#7                 ;1121
000056  d101              BNE      |L32.92|
                  |L32.88|
000058  2502              MOVS     r5,#2                 ;1123
00005a  e000              B        |L32.94|
                  |L32.92|
00005c  2501              MOVS     r5,#1                 ;1127
                  |L32.94|
00005e  fb04f005          MUL      r0,r4,r5              ;1130
000062  0406              LSLS     r6,r0,#16             ;1130
000064  6818              LDR      r0,[r3,#0]            ;1133
000066  3084              ADDS     r0,r0,#0x84           ;1133
000068  2780              MOVS     r7,#0x80              ;1133
00006a  fb070002          MLA      r0,r7,r2,r0           ;1133
00006e  6ac0              LDR      r0,[r0,#0x2c]         ;1133
000070  4f15              LDR      r7,|L32.200|
000072  4038              ANDS     r0,r0,r7              ;1133
000074  681f              LDR      r7,[r3,#0]            ;1133
000076  3784              ADDS     r7,r7,#0x84           ;1133
000078  f04f0c80          MOV      r12,#0x80             ;1133
00007c  fb0c7702          MLA      r7,r12,r2,r7          ;1133
000080  62f8              STR      r0,[r7,#0x2c]         ;1133
000082  4812              LDR      r0,|L32.204|
000084  6800              LDR      r0,[r0,#0]            ;1136
000086  f0400001          ORR      r0,r0,#1              ;1136
00008a  4f10              LDR      r7,|L32.204|
00008c  6038              STR      r0,[r7,#0]            ;1136
00008e  6818              LDR      r0,[r3,#0]            ;1139
000090  3084              ADDS     r0,r0,#0x84           ;1139
000092  2780              MOVS     r7,#0x80              ;1139
000094  fb070002          MLA      r0,r7,r2,r0           ;1139
000098  6ac0              LDR      r0,[r0,#0x2c]         ;1139
00009a  4330              ORRS     r0,r0,r6              ;1139
00009c  681f              LDR      r7,[r3,#0]            ;1139
00009e  3784              ADDS     r7,r7,#0x84           ;1139
0000a0  fb0c7702          MLA      r7,r12,r2,r7          ;1139
0000a4  62f8              STR      r0,[r7,#0x2c]         ;1139
0000a6  4809              LDR      r0,|L32.204|
0000a8  6800              LDR      r0,[r0,#0]            ;1142
0000aa  f0400001          ORR      r0,r0,#1              ;1142
0000ae  4f07              LDR      r7,|L32.204|
0000b0  6038              STR      r0,[r7,#0]            ;1142
0000b2  2001              MOVS     r0,#1                 ;1145
0000b4  f8c300a4          STR      r0,[r3,#0xa4]         ;1145
0000b8  bf00              NOP                            ;1148
0000ba  2000              MOVS     r0,#0                 ;1148
0000bc  f8c300a0          STR      r0,[r3,#0xa0]         ;1148
0000c0  bf00              NOP                            ;1148
0000c2  bf00              NOP                            ;1150
0000c4  e7a8              B        |L32.24|
;;;1152   
                          ENDP

0000c6  0000              DCW      0x0000
                  |L32.200|
                          DCD      0xe000ffff
                  |L32.204|
                          DCD      0x40016824

                          AREA ||i.HAL_LTDC_SetPitch_NoReload||, CODE, READONLY, ALIGN=2

                  HAL_LTDC_SetPitch_NoReload PROC
;;;1534     */
;;;1535   HAL_StatusTypeDef HAL_LTDC_SetPitch_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1536   {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;1537     uint32_t tmp = 0;
000006  2500              MOVS     r5,#0
;;;1538     uint32_t pitchUpdate = 0;
000008  2600              MOVS     r6,#0
;;;1539     uint32_t pixelFormat = 0;
00000a  2100              MOVS     r1,#0
;;;1540     
;;;1541     /* Process locked */
;;;1542     __HAL_LOCK(hltdc);
00000c  bf00              NOP      
00000e  f8d300a0          LDR      r0,[r3,#0xa0]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L33.26|
000016  2002              MOVS     r0,#2
                  |L33.24|
;;;1543     
;;;1544     /* Change LTDC peripheral state */
;;;1545     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1546     
;;;1547     /* Check the parameters */
;;;1548     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1549     
;;;1550     /* get LayerIdx used pixel format */
;;;1551     pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
;;;1552     
;;;1553     if(pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
;;;1554     {
;;;1555       tmp = 4;
;;;1556     }
;;;1557     else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
;;;1558     {
;;;1559       tmp = 3;
;;;1560     }
;;;1561     else if((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
;;;1562             (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
;;;1563             (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
;;;1564            (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
;;;1565     {
;;;1566       tmp = 2;
;;;1567     }
;;;1568     else
;;;1569     {
;;;1570       tmp = 1;
;;;1571     }
;;;1572     
;;;1573     pitchUpdate = ((LinePitchInPixels * tmp) << 16);
;;;1574     
;;;1575     /* Clear previously set standard pitch */
;;;1576     LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
;;;1577     
;;;1578     /* Set new line pitch value */
;;;1579     LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
;;;1580     
;;;1581     /* Do not Sets the Reload  */
;;;1582     
;;;1583     /* Change the LTDC state*/
;;;1584     hltdc->State = HAL_LTDC_STATE_READY;
;;;1585     
;;;1586     /* Process unlocked */
;;;1587     __HAL_UNLOCK(hltdc);
;;;1588     
;;;1589     return HAL_OK;  
;;;1590   }
000018  bdf0              POP      {r4-r7,pc}
                  |L33.26|
00001a  2001              MOVS     r0,#1                 ;1542
00001c  f8c300a0          STR      r0,[r3,#0xa0]         ;1542
000020  bf00              NOP                            ;1542
000022  2002              MOVS     r0,#2                 ;1545
000024  f8c300a4          STR      r0,[r3,#0xa4]         ;1545
000028  eb020082          ADD      r0,r2,r2,LSL #2       ;1551
00002c  eb0007c2          ADD      r7,r0,r2,LSL #3       ;1551
000030  f1030038          ADD      r0,r3,#0x38           ;1551
000034  eb000087          ADD      r0,r0,r7,LSL #2       ;1551
000038  6901              LDR      r1,[r0,#0x10]         ;1551
00003a  b909              CBNZ     r1,|L33.64|
00003c  2504              MOVS     r5,#4                 ;1555
00003e  e00e              B        |L33.94|
                  |L33.64|
000040  2901              CMP      r1,#1                 ;1557
000042  d101              BNE      |L33.72|
000044  2503              MOVS     r5,#3                 ;1559
000046  e00a              B        |L33.94|
                  |L33.72|
000048  2904              CMP      r1,#4                 ;1561
00004a  d005              BEQ      |L33.88|
00004c  2902              CMP      r1,#2                 ;1562
00004e  d003              BEQ      |L33.88|
000050  2903              CMP      r1,#3                 ;1563
000052  d001              BEQ      |L33.88|
000054  2907              CMP      r1,#7                 ;1564
000056  d101              BNE      |L33.92|
                  |L33.88|
000058  2502              MOVS     r5,#2                 ;1566
00005a  e000              B        |L33.94|
                  |L33.92|
00005c  2501              MOVS     r5,#1                 ;1570
                  |L33.94|
00005e  fb04f005          MUL      r0,r4,r5              ;1573
000062  0406              LSLS     r6,r0,#16             ;1573
000064  6818              LDR      r0,[r3,#0]            ;1576
000066  3084              ADDS     r0,r0,#0x84           ;1576
000068  2780              MOVS     r7,#0x80              ;1576
00006a  fb070002          MLA      r0,r7,r2,r0           ;1576
00006e  6ac0              LDR      r0,[r0,#0x2c]         ;1576
000070  4f0f              LDR      r7,|L33.176|
000072  4038              ANDS     r0,r0,r7              ;1576
000074  681f              LDR      r7,[r3,#0]            ;1576
000076  3784              ADDS     r7,r7,#0x84           ;1576
000078  f04f0c80          MOV      r12,#0x80             ;1576
00007c  fb0c7702          MLA      r7,r12,r2,r7          ;1576
000080  62f8              STR      r0,[r7,#0x2c]         ;1576
000082  6818              LDR      r0,[r3,#0]            ;1579
000084  3084              ADDS     r0,r0,#0x84           ;1579
000086  2780              MOVS     r7,#0x80              ;1579
000088  fb070002          MLA      r0,r7,r2,r0           ;1579
00008c  6ac0              LDR      r0,[r0,#0x2c]         ;1579
00008e  4330              ORRS     r0,r0,r6              ;1579
000090  681f              LDR      r7,[r3,#0]            ;1579
000092  3784              ADDS     r7,r7,#0x84           ;1579
000094  fb0c7702          MLA      r7,r12,r2,r7          ;1579
000098  62f8              STR      r0,[r7,#0x2c]         ;1579
00009a  2001              MOVS     r0,#1                 ;1584
00009c  f8c300a4          STR      r0,[r3,#0xa4]         ;1584
0000a0  bf00              NOP                            ;1587
0000a2  2000              MOVS     r0,#0                 ;1587
0000a4  f8c300a0          STR      r0,[r3,#0xa0]         ;1587
0000a8  bf00              NOP                            ;1587
0000aa  bf00              NOP                            ;1589
0000ac  e7b4              B        |L33.24|
;;;1591   
                          ENDP

0000ae  0000              DCW      0x0000
                  |L33.176|
                          DCD      0xe000ffff

                          AREA ||i.HAL_LTDC_SetPixelFormat||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetPixelFormat PROC
;;;955      */
;;;956    HAL_StatusTypeDef HAL_LTDC_SetPixelFormat(LTDC_HandleTypeDef *hltdc, uint32_t Pixelformat, uint32_t LayerIdx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;957    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;958      LTDC_LayerCfgTypeDef *pLayerCfg;
;;;959    
;;;960      /* Process locked */
;;;961      __HAL_LOCK(hltdc);
00000a  bf00              NOP      
00000c  f8d400a0          LDR      r0,[r4,#0xa0]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L34.26|
000014  2002              MOVS     r0,#2
                  |L34.22|
;;;962    
;;;963      /* Change LTDC peripheral state */
;;;964      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;965    
;;;966      /* Check the parameters */
;;;967      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;968      assert_param(IS_LTDC_PIXEL_FORMAT(Pixelformat));
;;;969    
;;;970      /* Get layer configuration from handle structure */
;;;971      pLayerCfg = &hltdc->LayerCfg[LayerIdx];  
;;;972    
;;;973      /* Reconfigure the pixel format */
;;;974      pLayerCfg->PixelFormat = Pixelformat;
;;;975    
;;;976      /* Set LTDC parameters */
;;;977      LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);   
;;;978    
;;;979      /* Sets the Reload type */
;;;980      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;981    
;;;982      /* Change the LTDC state*/
;;;983      hltdc->State = HAL_LTDC_STATE_READY;
;;;984    
;;;985      /* Process unlocked */
;;;986      __HAL_UNLOCK(hltdc);
;;;987    
;;;988      return HAL_OK;
;;;989    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L34.26|
00001a  2001              MOVS     r0,#1                 ;961
00001c  f8c400a0          STR      r0,[r4,#0xa0]         ;961
000020  bf00              NOP                            ;961
000022  2002              MOVS     r0,#2                 ;964
000024  f8c400a4          STR      r0,[r4,#0xa4]         ;964
000028  eb070087          ADD      r0,r7,r7,LSL #2       ;971
00002c  eb0001c7          ADD      r1,r0,r7,LSL #3       ;971
000030  f1040038          ADD      r0,r4,#0x38           ;971
000034  eb000581          ADD      r5,r0,r1,LSL #2       ;971
000038  612e              STR      r6,[r5,#0x10]         ;974
00003a  463a              MOV      r2,r7                 ;977
00003c  4629              MOV      r1,r5                 ;977
00003e  4620              MOV      r0,r4                 ;977
000040  f7fffffe          BL       LTDC_SetConfig
000044  2001              MOVS     r0,#1                 ;980
000046  6821              LDR      r1,[r4,#0]            ;980
000048  6248              STR      r0,[r1,#0x24]         ;980
00004a  f8c400a4          STR      r0,[r4,#0xa4]         ;983
00004e  bf00              NOP                            ;986
000050  2000              MOVS     r0,#0                 ;986
000052  f8c400a0          STR      r0,[r4,#0xa0]         ;986
000056  bf00              NOP                            ;986
000058  bf00              NOP                            ;988
00005a  e7dc              B        |L34.22|
;;;990    
                          ENDP


                          AREA ||i.HAL_LTDC_SetPixelFormat_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetPixelFormat_NoReload PROC
;;;1397     */
;;;1398   HAL_StatusTypeDef HAL_LTDC_SetPixelFormat_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t Pixelformat, uint32_t LayerIdx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1399   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;1400     LTDC_LayerCfgTypeDef *pLayerCfg;
;;;1401   
;;;1402     /* Process locked */
;;;1403     __HAL_LOCK(hltdc);
00000a  bf00              NOP      
00000c  f8d400a0          LDR      r0,[r4,#0xa0]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L35.26|
000014  2002              MOVS     r0,#2
                  |L35.22|
;;;1404   
;;;1405     /* Change LTDC peripheral state */
;;;1406     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1407   
;;;1408     /* Check the parameters */
;;;1409     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1410     assert_param(IS_LTDC_PIXEL_FORMAT(Pixelformat));
;;;1411   
;;;1412     /* Get layer configuration from handle structure */
;;;1413     pLayerCfg = &hltdc->LayerCfg[LayerIdx];  
;;;1414   
;;;1415     /* Reconfigure the pixel format */
;;;1416     pLayerCfg->PixelFormat = Pixelformat;
;;;1417   
;;;1418     /* Set LTDC parameters */
;;;1419     LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);   
;;;1420   
;;;1421     /* Do not Sets the Reload  */
;;;1422   
;;;1423     /* Change the LTDC state*/
;;;1424     hltdc->State = HAL_LTDC_STATE_READY;
;;;1425   
;;;1426     /* Process unlocked */
;;;1427     __HAL_UNLOCK(hltdc);
;;;1428   
;;;1429     return HAL_OK;
;;;1430   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L35.26|
00001a  2001              MOVS     r0,#1                 ;1403
00001c  f8c400a0          STR      r0,[r4,#0xa0]         ;1403
000020  bf00              NOP                            ;1403
000022  2002              MOVS     r0,#2                 ;1406
000024  f8c400a4          STR      r0,[r4,#0xa4]         ;1406
000028  eb070087          ADD      r0,r7,r7,LSL #2       ;1413
00002c  eb0001c7          ADD      r1,r0,r7,LSL #3       ;1413
000030  f1040038          ADD      r0,r4,#0x38           ;1413
000034  eb000581          ADD      r5,r0,r1,LSL #2       ;1413
000038  612e              STR      r6,[r5,#0x10]         ;1416
00003a  463a              MOV      r2,r7                 ;1419
00003c  4629              MOV      r1,r5                 ;1419
00003e  4620              MOV      r0,r4                 ;1419
000040  f7fffffe          BL       LTDC_SetConfig
000044  2001              MOVS     r0,#1                 ;1424
000046  f8c400a4          STR      r0,[r4,#0xa4]         ;1424
00004a  bf00              NOP                            ;1427
00004c  2000              MOVS     r0,#0                 ;1427
00004e  f8c400a0          STR      r0,[r4,#0xa0]         ;1427
000052  bf00              NOP                            ;1427
000054  bf00              NOP                            ;1429
000056  e7de              B        |L35.22|
;;;1431   
                          ENDP


                          AREA ||i.HAL_LTDC_SetWindowPosition||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetWindowPosition PROC
;;;902      */
;;;903    HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;904    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;905      LTDC_LayerCfgTypeDef *pLayerCfg;
;;;906      
;;;907      /* Process locked */
;;;908      __HAL_LOCK(hltdc);
00000c  bf00              NOP      
00000e  f8d400a0          LDR      r0,[r4,#0xa0]
000012  2801              CMP      r0,#1
000014  d102              BNE      |L36.28|
000016  2002              MOVS     r0,#2
                  |L36.24|
;;;909    
;;;910      /* Change LTDC peripheral state */
;;;911      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;912    
;;;913      /* Get layer configuration from handle structure */
;;;914      pLayerCfg = &hltdc->LayerCfg[LayerIdx];
;;;915    
;;;916      /* Check the parameters */
;;;917      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;918      assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
;;;919      assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
;;;920      assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
;;;921      assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
;;;922    
;;;923      /* update horizontal start/stop */
;;;924      pLayerCfg->WindowX0 = X0;
;;;925      pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
;;;926    
;;;927      /* update vertical start/stop */
;;;928      pLayerCfg->WindowY0 = Y0;
;;;929      pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
;;;930    
;;;931      /* Set LTDC parameters */
;;;932      LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;933    
;;;934      /* Sets the Reload type */
;;;935      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;936    
;;;937      /* Change the LTDC state*/
;;;938      hltdc->State = HAL_LTDC_STATE_READY;
;;;939    
;;;940      /* Process unlocked */
;;;941      __HAL_UNLOCK(hltdc);
;;;942    
;;;943      return HAL_OK;
;;;944    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L36.28|
00001c  2001              MOVS     r0,#1                 ;908
00001e  f8c400a0          STR      r0,[r4,#0xa0]         ;908
000022  bf00              NOP                            ;908
000024  2002              MOVS     r0,#2                 ;911
000026  f8c400a4          STR      r0,[r4,#0xa4]         ;911
00002a  eb080088          ADD      r0,r8,r8,LSL #2       ;914
00002e  eb0001c8          ADD      r1,r0,r8,LSL #3       ;914
000032  f1040038          ADD      r0,r4,#0x38           ;914
000036  eb000581          ADD      r5,r0,r1,LSL #2       ;914
00003a  602e              STR      r6,[r5,#0]            ;924
00003c  6aa8              LDR      r0,[r5,#0x28]         ;925
00003e  4430              ADD      r0,r0,r6              ;925
000040  6068              STR      r0,[r5,#4]            ;925
000042  60af              STR      r7,[r5,#8]            ;928
000044  6ae8              LDR      r0,[r5,#0x2c]         ;929
000046  4438              ADD      r0,r0,r7              ;929
000048  60e8              STR      r0,[r5,#0xc]          ;929
00004a  4642              MOV      r2,r8                 ;932
00004c  4629              MOV      r1,r5                 ;932
00004e  4620              MOV      r0,r4                 ;932
000050  f7fffffe          BL       LTDC_SetConfig
000054  2001              MOVS     r0,#1                 ;935
000056  6821              LDR      r1,[r4,#0]            ;935
000058  6248              STR      r0,[r1,#0x24]         ;935
00005a  f8c400a4          STR      r0,[r4,#0xa4]         ;938
00005e  bf00              NOP                            ;941
000060  2000              MOVS     r0,#0                 ;941
000062  f8c400a0          STR      r0,[r4,#0xa0]         ;941
000066  bf00              NOP                            ;941
000068  bf00              NOP                            ;943
00006a  e7d5              B        |L36.24|
;;;945    
                          ENDP


                          AREA ||i.HAL_LTDC_SetWindowPosition_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetWindowPosition_NoReload PROC
;;;1344     */
;;;1345   HAL_StatusTypeDef HAL_LTDC_SetWindowPosition_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1346   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;1347     LTDC_LayerCfgTypeDef *pLayerCfg;
;;;1348     
;;;1349     /* Process locked */
;;;1350     __HAL_LOCK(hltdc);
00000c  bf00              NOP      
00000e  f8d500a0          LDR      r0,[r5,#0xa0]
000012  2801              CMP      r0,#1
000014  d102              BNE      |L37.28|
000016  2002              MOVS     r0,#2
                  |L37.24|
;;;1351   
;;;1352     /* Change LTDC peripheral state */
;;;1353     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1354   
;;;1355     /* Get layer configuration from handle structure */
;;;1356     pLayerCfg = &hltdc->LayerCfg[LayerIdx];
;;;1357   
;;;1358     /* Check the parameters */
;;;1359     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1360     assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
;;;1361     assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
;;;1362     assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
;;;1363     assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
;;;1364   
;;;1365     /* update horizontal start/stop */
;;;1366     pLayerCfg->WindowX0 = X0;
;;;1367     pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
;;;1368   
;;;1369     /* update vertical start/stop */
;;;1370     pLayerCfg->WindowY0 = Y0;
;;;1371     pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
;;;1372   
;;;1373     /* Set LTDC parameters */
;;;1374     LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;1375   
;;;1376     /* Do not Sets the Reload  */
;;;1377   
;;;1378     /* Change the LTDC state*/
;;;1379     hltdc->State = HAL_LTDC_STATE_READY;
;;;1380   
;;;1381     /* Process unlocked */
;;;1382     __HAL_UNLOCK(hltdc);
;;;1383   
;;;1384     return HAL_OK;
;;;1385   }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L37.28|
00001c  2001              MOVS     r0,#1                 ;1350
00001e  f8c500a0          STR      r0,[r5,#0xa0]         ;1350
000022  bf00              NOP                            ;1350
000024  2002              MOVS     r0,#2                 ;1353
000026  f8c500a4          STR      r0,[r5,#0xa4]         ;1353
00002a  eb080088          ADD      r0,r8,r8,LSL #2       ;1356
00002e  eb0001c8          ADD      r1,r0,r8,LSL #3       ;1356
000032  f1050038          ADD      r0,r5,#0x38           ;1356
000036  eb000481          ADD      r4,r0,r1,LSL #2       ;1356
00003a  6026              STR      r6,[r4,#0]            ;1366
00003c  6aa0              LDR      r0,[r4,#0x28]         ;1367
00003e  4430              ADD      r0,r0,r6              ;1367
000040  6060              STR      r0,[r4,#4]            ;1367
000042  60a7              STR      r7,[r4,#8]            ;1370
000044  6ae0              LDR      r0,[r4,#0x2c]         ;1371
000046  4438              ADD      r0,r0,r7              ;1371
000048  60e0              STR      r0,[r4,#0xc]          ;1371
00004a  4642              MOV      r2,r8                 ;1374
00004c  4621              MOV      r1,r4                 ;1374
00004e  4628              MOV      r0,r5                 ;1374
000050  f7fffffe          BL       LTDC_SetConfig
000054  2001              MOVS     r0,#1                 ;1379
000056  f8c500a4          STR      r0,[r5,#0xa4]         ;1379
00005a  bf00              NOP                            ;1382
00005c  2000              MOVS     r0,#0                 ;1382
00005e  f8c500a0          STR      r0,[r5,#0xa0]         ;1382
000062  bf00              NOP                            ;1382
000064  bf00              NOP                            ;1384
000066  e7d7              B        |L37.24|
;;;1386   
                          ENDP


                          AREA ||i.HAL_LTDC_SetWindowSize||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetWindowSize PROC
;;;840      */
;;;841    HAL_StatusTypeDef HAL_LTDC_SetWindowSize(LTDC_HandleTypeDef *hltdc, uint32_t XSize, uint32_t YSize, uint32_t LayerIdx) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;842    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;843      LTDC_LayerCfgTypeDef *pLayerCfg;
;;;844    
;;;845      /* Process locked */
;;;846      __HAL_LOCK(hltdc);
00000c  bf00              NOP      
00000e  f8d500a0          LDR      r0,[r5,#0xa0]
000012  2801              CMP      r0,#1
000014  d102              BNE      |L38.28|
000016  2002              MOVS     r0,#2
                  |L38.24|
;;;847    
;;;848      /* Change LTDC peripheral state */
;;;849      hltdc->State = HAL_LTDC_STATE_BUSY; 
;;;850    
;;;851      /* Get layer configuration from handle structure */
;;;852      pLayerCfg = &hltdc->LayerCfg[LayerIdx];
;;;853    
;;;854      /* Check the parameters (Layers parameters)*/
;;;855      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;856      assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
;;;857      assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
;;;858      assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
;;;859      assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
;;;860      assert_param(IS_LTDC_CFBLL(XSize));
;;;861      assert_param(IS_LTDC_CFBLNBR(YSize));
;;;862    
;;;863      /* update horizontal start/stop */
;;;864      pLayerCfg->WindowX0 = 0;
;;;865      pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
;;;866    
;;;867      /* update vertical start/stop */  
;;;868      pLayerCfg->WindowY0 = 0;
;;;869      pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
;;;870    
;;;871      /* Reconfigures the color frame buffer pitch in byte */
;;;872      pLayerCfg->ImageWidth = XSize;
;;;873    
;;;874      /* Reconfigures the frame buffer line number */
;;;875      pLayerCfg->ImageHeight = YSize;
;;;876    
;;;877      /* Set LTDC parameters */
;;;878      LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;879    
;;;880      /* Sets the Reload type */
;;;881      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;882    
;;;883      /* Change the LTDC state*/
;;;884      hltdc->State = HAL_LTDC_STATE_READY;
;;;885    
;;;886      /* Process unlocked */
;;;887      __HAL_UNLOCK(hltdc);
;;;888    
;;;889      return HAL_OK;
;;;890    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L38.28|
00001c  2001              MOVS     r0,#1                 ;846
00001e  f8c500a0          STR      r0,[r5,#0xa0]         ;846
000022  bf00              NOP                            ;846
000024  2002              MOVS     r0,#2                 ;849
000026  f8c500a4          STR      r0,[r5,#0xa4]         ;849
00002a  eb080088          ADD      r0,r8,r8,LSL #2       ;852
00002e  eb0001c8          ADD      r1,r0,r8,LSL #3       ;852
000032  f1050038          ADD      r0,r5,#0x38           ;852
000036  eb000481          ADD      r4,r0,r1,LSL #2       ;852
00003a  2000              MOVS     r0,#0                 ;864
00003c  6020              STR      r0,[r4,#0]            ;864
00003e  6820              LDR      r0,[r4,#0]            ;865
000040  4430              ADD      r0,r0,r6              ;865
000042  6060              STR      r0,[r4,#4]            ;865
000044  2000              MOVS     r0,#0                 ;868
000046  60a0              STR      r0,[r4,#8]            ;868
000048  68a0              LDR      r0,[r4,#8]            ;869
00004a  4438              ADD      r0,r0,r7              ;869
00004c  60e0              STR      r0,[r4,#0xc]          ;869
00004e  62a6              STR      r6,[r4,#0x28]         ;872
000050  62e7              STR      r7,[r4,#0x2c]         ;875
000052  4642              MOV      r2,r8                 ;878
000054  4621              MOV      r1,r4                 ;878
000056  4628              MOV      r0,r5                 ;878
000058  f7fffffe          BL       LTDC_SetConfig
00005c  2001              MOVS     r0,#1                 ;881
00005e  6829              LDR      r1,[r5,#0]            ;881
000060  6248              STR      r0,[r1,#0x24]         ;881
000062  f8c500a4          STR      r0,[r5,#0xa4]         ;884
000066  bf00              NOP                            ;887
000068  2000              MOVS     r0,#0                 ;887
00006a  f8c500a0          STR      r0,[r5,#0xa0]         ;887
00006e  bf00              NOP                            ;887
000070  bf00              NOP                            ;889
000072  e7d1              B        |L38.24|
;;;891    
                          ENDP


                          AREA ||i.HAL_LTDC_SetWindowSize_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetWindowSize_NoReload PROC
;;;1282     */
;;;1283   HAL_StatusTypeDef HAL_LTDC_SetWindowSize_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t XSize, uint32_t YSize, uint32_t LayerIdx) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1284   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;1285     LTDC_LayerCfgTypeDef *pLayerCfg;
;;;1286   
;;;1287     /* Process locked */
;;;1288     __HAL_LOCK(hltdc);
00000c  bf00              NOP      
00000e  f8d500a0          LDR      r0,[r5,#0xa0]
000012  2801              CMP      r0,#1
000014  d102              BNE      |L39.28|
000016  2002              MOVS     r0,#2
                  |L39.24|
;;;1289   
;;;1290     /* Change LTDC peripheral state */
;;;1291     hltdc->State = HAL_LTDC_STATE_BUSY; 
;;;1292   
;;;1293     /* Get layer configuration from handle structure */
;;;1294     pLayerCfg = &hltdc->LayerCfg[LayerIdx];
;;;1295   
;;;1296     /* Check the parameters (Layers parameters)*/
;;;1297     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1298     assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
;;;1299     assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
;;;1300     assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
;;;1301     assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
;;;1302     assert_param(IS_LTDC_CFBLL(XSize));
;;;1303     assert_param(IS_LTDC_CFBLNBR(YSize));
;;;1304   
;;;1305     /* update horizontal start/stop */
;;;1306     pLayerCfg->WindowX0 = 0;
;;;1307     pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
;;;1308   
;;;1309     /* update vertical start/stop */  
;;;1310     pLayerCfg->WindowY0 = 0;
;;;1311     pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
;;;1312   
;;;1313     /* Reconfigures the color frame buffer pitch in byte */
;;;1314     pLayerCfg->ImageWidth = XSize;
;;;1315   
;;;1316     /* Reconfigures the frame buffer line number */
;;;1317     pLayerCfg->ImageHeight = YSize;
;;;1318   
;;;1319     /* Set LTDC parameters */
;;;1320     LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;1321   
;;;1322     /* Do not Sets the Reload  */
;;;1323   
;;;1324     /* Change the LTDC state*/
;;;1325     hltdc->State = HAL_LTDC_STATE_READY;
;;;1326   
;;;1327     /* Process unlocked */
;;;1328     __HAL_UNLOCK(hltdc);
;;;1329   
;;;1330     return HAL_OK;
;;;1331   }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L39.28|
00001c  2001              MOVS     r0,#1                 ;1288
00001e  f8c500a0          STR      r0,[r5,#0xa0]         ;1288
000022  bf00              NOP                            ;1288
000024  2002              MOVS     r0,#2                 ;1291
000026  f8c500a4          STR      r0,[r5,#0xa4]         ;1291
00002a  eb080088          ADD      r0,r8,r8,LSL #2       ;1294
00002e  eb0001c8          ADD      r1,r0,r8,LSL #3       ;1294
000032  f1050038          ADD      r0,r5,#0x38           ;1294
000036  eb000481          ADD      r4,r0,r1,LSL #2       ;1294
00003a  2000              MOVS     r0,#0                 ;1306
00003c  6020              STR      r0,[r4,#0]            ;1306
00003e  6820              LDR      r0,[r4,#0]            ;1307
000040  4430              ADD      r0,r0,r6              ;1307
000042  6060              STR      r0,[r4,#4]            ;1307
000044  2000              MOVS     r0,#0                 ;1310
000046  60a0              STR      r0,[r4,#8]            ;1310
000048  68a0              LDR      r0,[r4,#8]            ;1311
00004a  4438              ADD      r0,r0,r7              ;1311
00004c  60e0              STR      r0,[r4,#0xc]          ;1311
00004e  62a6              STR      r6,[r4,#0x28]         ;1314
000050  62e7              STR      r7,[r4,#0x2c]         ;1317
000052  4642              MOV      r2,r8                 ;1320
000054  4621              MOV      r1,r4                 ;1320
000056  4628              MOV      r0,r5                 ;1320
000058  f7fffffe          BL       LTDC_SetConfig
00005c  2001              MOVS     r0,#1                 ;1325
00005e  f8c500a4          STR      r0,[r5,#0xa4]         ;1325
000062  bf00              NOP                            ;1328
000064  2000              MOVS     r0,#0                 ;1328
000066  f8c500a0          STR      r0,[r5,#0xa0]         ;1328
00006a  bf00              NOP                            ;1328
00006c  bf00              NOP                            ;1330
00006e  e7d3              B        |L39.24|
;;;1332   
                          ENDP


                          AREA ||i.LTDC_SetConfig||, CODE, READONLY, ALIGN=1

                  LTDC_SetConfig PROC
;;;1826     */
;;;1827   static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1828   {
;;;1829     uint32_t tmp = 0;
000002  2300              MOVS     r3,#0
;;;1830     uint32_t tmp1 = 0;
000004  2400              MOVS     r4,#0
;;;1831     uint32_t tmp2 = 0;
000006  2500              MOVS     r5,#0
;;;1832   
;;;1833     /* Configures the horizontal start and stop position */
;;;1834     tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
000008  888e              LDRH     r6,[r1,#4]
00000a  6807              LDR      r7,[r0,#0]
00000c  68ff              LDR      r7,[r7,#0xc]
00000e  f3c7470b          UBFX     r7,r7,#16,#12
000012  443e              ADD      r6,r6,r7
000014  0433              LSLS     r3,r6,#16
;;;1835     LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
000016  6806              LDR      r6,[r0,#0]
000018  3684              ADDS     r6,r6,#0x84
00001a  2780              MOVS     r7,#0x80
00001c  fb076602          MLA      r6,r7,r2,r6
000020  6876              LDR      r6,[r6,#4]
000022  f4064770          AND      r7,r6,#0xf000
000026  6806              LDR      r6,[r0,#0]
000028  3684              ADDS     r6,r6,#0x84
00002a  f04f0c80          MOV      r12,#0x80
00002e  fb0c6602          MLA      r6,r12,r2,r6
000032  6077              STR      r7,[r6,#4]
;;;1836     LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
000034  680e              LDR      r6,[r1,#0]
000036  6807              LDR      r7,[r0,#0]
000038  68ff              LDR      r7,[r7,#0xc]
00003a  f3c7470b          UBFX     r7,r7,#16,#12
00003e  443e              ADD      r6,r6,r7
000040  1c76              ADDS     r6,r6,#1
000042  431e              ORRS     r6,r6,r3
000044  6807              LDR      r7,[r0,#0]
000046  3784              ADDS     r7,r7,#0x84
000048  fb0c7702          MLA      r7,r12,r2,r7
00004c  607e              STR      r6,[r7,#4]
;;;1837   
;;;1838     /* Configures the vertical start and stop position */
;;;1839     tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
00004e  898e              LDRH     r6,[r1,#0xc]
000050  6807              LDR      r7,[r0,#0]
000052  68ff              LDR      r7,[r7,#0xc]
000054  f3c7070a          UBFX     r7,r7,#0,#11
000058  443e              ADD      r6,r6,r7
00005a  0433              LSLS     r3,r6,#16
;;;1840     LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
00005c  6806              LDR      r6,[r0,#0]
00005e  3684              ADDS     r6,r6,#0x84
000060  2780              MOVS     r7,#0x80
000062  fb076602          MLA      r6,r7,r2,r6
000066  68b6              LDR      r6,[r6,#8]
000068  f4064770          AND      r7,r6,#0xf000
00006c  6806              LDR      r6,[r0,#0]
00006e  3684              ADDS     r6,r6,#0x84
000070  fb0c6602          MLA      r6,r12,r2,r6
000074  60b7              STR      r7,[r6,#8]
;;;1841     LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
000076  688e              LDR      r6,[r1,#8]
000078  6807              LDR      r7,[r0,#0]
00007a  68ff              LDR      r7,[r7,#0xc]
00007c  f3c7070a          UBFX     r7,r7,#0,#11
000080  443e              ADD      r6,r6,r7
000082  1c76              ADDS     r6,r6,#1
000084  431e              ORRS     r6,r6,r3
000086  6807              LDR      r7,[r0,#0]
000088  3784              ADDS     r7,r7,#0x84
00008a  fb0c7702          MLA      r7,r12,r2,r7
00008e  60be              STR      r6,[r7,#8]
;;;1842   
;;;1843     /* Specifies the pixel format */
;;;1844     LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
000090  6806              LDR      r6,[r0,#0]
000092  3684              ADDS     r6,r6,#0x84
000094  2780              MOVS     r7,#0x80
000096  fb076602          MLA      r6,r7,r2,r6
00009a  6936              LDR      r6,[r6,#0x10]
00009c  f0260707          BIC      r7,r6,#7
0000a0  6806              LDR      r6,[r0,#0]
0000a2  3684              ADDS     r6,r6,#0x84
0000a4  fb0c6602          MLA      r6,r12,r2,r6
0000a8  6137              STR      r7,[r6,#0x10]
;;;1845     LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
0000aa  690f              LDR      r7,[r1,#0x10]
0000ac  6806              LDR      r6,[r0,#0]
0000ae  3684              ADDS     r6,r6,#0x84
0000b0  fb0c6602          MLA      r6,r12,r2,r6
0000b4  6137              STR      r7,[r6,#0x10]
;;;1846   
;;;1847     /* Configures the default color values */
;;;1848     tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
0000b6  2631              MOVS     r6,#0x31
0000b8  5c76              LDRB     r6,[r6,r1]
0000ba  0233              LSLS     r3,r6,#8
;;;1849     tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
0000bc  2632              MOVS     r6,#0x32
0000be  5c76              LDRB     r6,[r6,r1]
0000c0  0434              LSLS     r4,r6,#16
;;;1850     tmp2 = (pLayerCfg->Alpha0 << 24);  
0000c2  7e0e              LDRB     r6,[r1,#0x18]
0000c4  0635              LSLS     r5,r6,#24
;;;1851     LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
0000c6  6806              LDR      r6,[r0,#0]
0000c8  3684              ADDS     r6,r6,#0x84
0000ca  2780              MOVS     r7,#0x80
0000cc  fb076602          MLA      r6,r7,r2,r6
0000d0  69b6              LDR      r6,[r6,#0x18]
0000d2  2700              MOVS     r7,#0
0000d4  6806              LDR      r6,[r0,#0]
0000d6  3684              ADDS     r6,r6,#0x84
0000d8  fb0c6602          MLA      r6,r12,r2,r6
0000dc  61b7              STR      r7,[r6,#0x18]
;;;1852     LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
0000de  f8916030          LDRB     r6,[r1,#0x30]
0000e2  431e              ORRS     r6,r6,r3
0000e4  4326              ORRS     r6,r6,r4
0000e6  432e              ORRS     r6,r6,r5
0000e8  6807              LDR      r7,[r0,#0]
0000ea  3784              ADDS     r7,r7,#0x84
0000ec  fb0c7702          MLA      r7,r12,r2,r7
0000f0  61be              STR      r6,[r7,#0x18]
;;;1853   
;;;1854     /* Specifies the constant alpha value */
;;;1855     LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
0000f2  6806              LDR      r6,[r0,#0]
0000f4  3684              ADDS     r6,r6,#0x84
0000f6  2780              MOVS     r7,#0x80
0000f8  fb076602          MLA      r6,r7,r2,r6
0000fc  6976              LDR      r6,[r6,#0x14]
0000fe  f02607ff          BIC      r7,r6,#0xff
000102  6806              LDR      r6,[r0,#0]
000104  3684              ADDS     r6,r6,#0x84
000106  fb0c6602          MLA      r6,r12,r2,r6
00010a  6177              STR      r7,[r6,#0x14]
;;;1856     LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
00010c  694f              LDR      r7,[r1,#0x14]
00010e  6806              LDR      r6,[r0,#0]
000110  3684              ADDS     r6,r6,#0x84
000112  fb0c6602          MLA      r6,r12,r2,r6
000116  6177              STR      r7,[r6,#0x14]
;;;1857   
;;;1858     /* Specifies the blending factors */
;;;1859     LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
000118  6806              LDR      r6,[r0,#0]
00011a  3684              ADDS     r6,r6,#0x84
00011c  2780              MOVS     r7,#0x80
00011e  fb076602          MLA      r6,r7,r2,r6
000122  69f7              LDR      r7,[r6,#0x1c]
000124  f2407607          MOV      r6,#0x707
000128  43b7              BICS     r7,r7,r6
00012a  6806              LDR      r6,[r0,#0]
00012c  3684              ADDS     r6,r6,#0x84
00012e  fb0c6602          MLA      r6,r12,r2,r6
000132  61f7              STR      r7,[r6,#0x1c]
;;;1860     LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
000134  e9d16707          LDRD     r6,r7,[r1,#0x1c]
000138  433e              ORRS     r6,r6,r7
00013a  6807              LDR      r7,[r0,#0]
00013c  3784              ADDS     r7,r7,#0x84
00013e  fb0c7702          MLA      r7,r12,r2,r7
000142  61fe              STR      r6,[r7,#0x1c]
;;;1861   
;;;1862     /* Configures the color frame buffer start address */
;;;1863     LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
000144  6806              LDR      r6,[r0,#0]
000146  3684              ADDS     r6,r6,#0x84
000148  2780              MOVS     r7,#0x80
00014a  fb076602          MLA      r6,r7,r2,r6
00014e  6ab6              LDR      r6,[r6,#0x28]
000150  2700              MOVS     r7,#0
000152  6806              LDR      r6,[r0,#0]
000154  3684              ADDS     r6,r6,#0x84
000156  fb0c6602          MLA      r6,r12,r2,r6
00015a  62b7              STR      r7,[r6,#0x28]
;;;1864     LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
00015c  6a4f              LDR      r7,[r1,#0x24]
00015e  6806              LDR      r6,[r0,#0]
000160  3684              ADDS     r6,r6,#0x84
000162  fb0c6602          MLA      r6,r12,r2,r6
000166  62b7              STR      r7,[r6,#0x28]
;;;1865   
;;;1866     if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
000168  690e              LDR      r6,[r1,#0x10]
00016a  b90e              CBNZ     r6,|L40.368|
;;;1867     {
;;;1868       tmp = 4;
00016c  2304              MOVS     r3,#4
00016e  e013              B        |L40.408|
                  |L40.368|
;;;1869     }
;;;1870     else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
000170  690e              LDR      r6,[r1,#0x10]
000172  2e01              CMP      r6,#1
000174  d101              BNE      |L40.378|
;;;1871     {
;;;1872       tmp = 3;
000176  2303              MOVS     r3,#3
000178  e00e              B        |L40.408|
                  |L40.378|
;;;1873     }
;;;1874     else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
00017a  690e              LDR      r6,[r1,#0x10]
00017c  2e04              CMP      r6,#4
00017e  d008              BEQ      |L40.402|
;;;1875       (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
000180  690e              LDR      r6,[r1,#0x10]
000182  2e02              CMP      r6,#2
000184  d005              BEQ      |L40.402|
;;;1876         (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
000186  690e              LDR      r6,[r1,#0x10]
000188  2e03              CMP      r6,#3
00018a  d002              BEQ      |L40.402|
;;;1877           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
00018c  690e              LDR      r6,[r1,#0x10]
00018e  2e07              CMP      r6,#7
000190  d101              BNE      |L40.406|
                  |L40.402|
;;;1878     {
;;;1879       tmp = 2;
000192  2302              MOVS     r3,#2
000194  e000              B        |L40.408|
                  |L40.406|
;;;1880     }
;;;1881     else
;;;1882     {
;;;1883       tmp = 1;
000196  2301              MOVS     r3,#1
                  |L40.408|
;;;1884     }
;;;1885   
;;;1886     /* Configures the color frame buffer pitch in byte */
;;;1887     LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
000198  6806              LDR      r6,[r0,#0]
00019a  3684              ADDS     r6,r6,#0x84
00019c  2780              MOVS     r7,#0x80
00019e  fb076602          MLA      r6,r7,r2,r6
0001a2  6af6              LDR      r6,[r6,#0x2c]
0001a4  f00627e0          AND      r7,r6,#0xe000e000
0001a8  6806              LDR      r6,[r0,#0]
0001aa  3684              ADDS     r6,r6,#0x84
0001ac  f04f0c80          MOV      r12,#0x80
0001b0  fb0c6602          MLA      r6,r12,r2,r6
0001b4  62f7              STR      r7,[r6,#0x2c]
;;;1888     LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
0001b6  e9d17600          LDRD     r7,r6,[r1,#0]
0001ba  1bf6              SUBS     r6,r6,r7
0001bc  435e              MULS     r6,r3,r6
0001be  1cf7              ADDS     r7,r6,#3
0001c0  8d0e              LDRH     r6,[r1,#0x28]
0001c2  435e              MULS     r6,r3,r6
0001c4  ea474706          ORR      r7,r7,r6,LSL #16
0001c8  6806              LDR      r6,[r0,#0]
0001ca  3684              ADDS     r6,r6,#0x84
0001cc  fb0c6602          MLA      r6,r12,r2,r6
0001d0  62f7              STR      r7,[r6,#0x2c]
;;;1889   
;;;1890     /* Configures the frame buffer line number */
;;;1891     LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
0001d2  6806              LDR      r6,[r0,#0]
0001d4  3684              ADDS     r6,r6,#0x84
0001d6  2780              MOVS     r7,#0x80
0001d8  fb076602          MLA      r6,r7,r2,r6
0001dc  6b36              LDR      r6,[r6,#0x30]
0001de  0af7              LSRS     r7,r6,#11
0001e0  02ff              LSLS     r7,r7,#11
0001e2  6806              LDR      r6,[r0,#0]
0001e4  3684              ADDS     r6,r6,#0x84
0001e6  fb0c6602          MLA      r6,r12,r2,r6
0001ea  6337              STR      r7,[r6,#0x30]
;;;1892     LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
0001ec  6acf              LDR      r7,[r1,#0x2c]
0001ee  6806              LDR      r6,[r0,#0]
0001f0  3684              ADDS     r6,r6,#0x84
0001f2  fb0c6602          MLA      r6,r12,r2,r6
0001f6  6337              STR      r7,[r6,#0x30]
;;;1893   
;;;1894     /* Enable LTDC_Layer by setting LEN bit */  
;;;1895     LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
0001f8  6806              LDR      r6,[r0,#0]
0001fa  3684              ADDS     r6,r6,#0x84
0001fc  01d7              LSLS     r7,r2,#7
0001fe  59f6              LDR      r6,[r6,r7]
000200  f0460701          ORR      r7,r6,#1
000204  6806              LDR      r6,[r0,#0]
000206  3684              ADDS     r6,r6,#0x84
000208  ea4f1cc2          LSL      r12,r2,#7
00020c  f846700c          STR      r7,[r6,r12]
;;;1896   }
000210  bdf0              POP      {r4-r7,pc}
;;;1897   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F7_V1.11.0\\Drivers\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_ltdc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f7xx_hal_ltdc_c_fa7241fd____REV16|
#line 464 "D:\\Program_Files_x86\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_stm32f7xx_hal_ltdc_c_fa7241fd____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f7xx_hal_ltdc_c_fa7241fd____REVSH|
#line 479
|__asm___20_stm32f7xx_hal_ltdc_c_fa7241fd____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f7xx_hal_ltdc_c_fa7241fd____RRX|
#line 666
|__asm___20_stm32f7xx_hal_ltdc_c_fa7241fd____RRX| PROC
#line 667

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
