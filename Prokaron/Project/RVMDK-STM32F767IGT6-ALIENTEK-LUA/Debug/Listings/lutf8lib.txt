; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\lutf8lib.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\lutf8lib.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\lutf8lib.crf ..\..\..\M6P1(L)_Lua\lua\lutf8lib.c]
                          THUMB

                          AREA ||i.byteoffset||, CODE, READONLY, ALIGN=2

                  byteoffset PROC
;;;159    */
;;;160    static int byteoffset (lua_State *L) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4683              MOV      r11,r0
;;;161      size_t len;
;;;162      const char *s = luaL_checklstring(L, 1, &len);
000006  466a              MOV      r2,sp
000008  2101              MOVS     r1,#1
00000a  4658              MOV      r0,r11
00000c  f7fffffe          BL       luaL_checklstring
000010  4682              MOV      r10,r0
;;;163      lua_Integer n  = luaL_checkinteger(L, 2);
000012  2102              MOVS     r1,#2
000014  4658              MOV      r0,r11
000016  f7fffffe          BL       luaL_checkinteger
00001a  4606              MOV      r6,r0
00001c  460f              MOV      r7,r1
;;;164      lua_Integer posi = (n >= 0) ? 1 : len + 1;
00001e  2100              MOVS     r1,#0
000020  4608              MOV      r0,r1
000022  1a71              SUBS     r1,r6,r1
000024  eb770000          SBCS     r0,r7,r0
000028  db01              BLT      |L1.46|
00002a  2001              MOVS     r0,#1
00002c  e001              B        |L1.50|
                  |L1.46|
00002e  9800              LDR      r0,[sp,#0]
000030  1c40              ADDS     r0,r0,#1
                  |L1.50|
000032  2500              MOVS     r5,#0
000034  4604              MOV      r4,r0
;;;165      posi = u_posrelat(luaL_optinteger(L, 3, posi), len);
000036  4622              MOV      r2,r4
000038  462b              MOV      r3,r5
00003a  2103              MOVS     r1,#3
00003c  4658              MOV      r0,r11
00003e  f7fffffe          BL       luaL_optinteger
000042  4680              MOV      r8,r0
000044  9a00              LDR      r2,[sp,#0]
000046  f7fffffe          BL       u_posrelat
00004a  4604              MOV      r4,r0
00004c  460d              MOV      r5,r1
;;;166      luaL_argcheck(L, 1 <= posi && --posi <= (lua_Integer)len, 3,
00004e  1e61              SUBS     r1,r4,#1
000050  f1750000          SBCS     r0,r5,#0
000054  db09              BLT      |L1.106|
000056  1e61              SUBS     r1,r4,#1
000058  f1650000          SBC      r0,r5,#0
00005c  460c              MOV      r4,r1
00005e  4605              MOV      r5,r0
000060  2300              MOVS     r3,#0
000062  9a00              LDR      r2,[sp,#0]
000064  1a51              SUBS     r1,r2,r1
000066  4183              SBCS     r3,r3,r0
000068  da04              BGE      |L1.116|
                  |L1.106|
00006a  a23d              ADR      r2,|L1.352|
00006c  2103              MOVS     r1,#3
00006e  4658              MOV      r0,r11
000070  f7fffffe          BL       luaL_argerror
                  |L1.116|
;;;167                       "position out of range");
;;;168      if (n == 0) {
000074  2100              MOVS     r1,#0
000076  ea860001          EOR      r0,r6,r1
00007a  4079              EORS     r1,r1,r7
00007c  4308              ORRS     r0,r0,r1
00007e  d10f              BNE      |L1.160|
;;;169        /* find beginning of current byte sequence */
;;;170        while (posi > 0 && iscont(s + posi)) posi--;
000080  e002              B        |L1.136|
                  |L1.130|
000082  1e64              SUBS     r4,r4,#1
000084  f1650500          SBC      r5,r5,#0
                  |L1.136|
000088  2100              MOVS     r1,#0
00008a  4608              MOV      r0,r1
00008c  1b09              SUBS     r1,r1,r4
00008e  41a8              SBCS     r0,r0,r5
000090  da52              BGE      |L1.312|
000092  f81a0004          LDRB     r0,[r10,r4]
000096  f00000c0          AND      r0,r0,#0xc0
00009a  2880              CMP      r0,#0x80
00009c  d0f1              BEQ      |L1.130|
00009e  e04b              B        |L1.312|
                  |L1.160|
;;;171      }
;;;172      else {
;;;173        if (iscont(s + posi))
0000a0  f81a0004          LDRB     r0,[r10,r4]
0000a4  f00000c0          AND      r0,r0,#0xc0
0000a8  2880              CMP      r0,#0x80
0000aa  d105              BNE      |L1.184|
;;;174          return luaL_error(L, "initial position is a continuation byte");
0000ac  a132              ADR      r1,|L1.376|
0000ae  4658              MOV      r0,r11
0000b0  f7fffffe          BL       luaL_error
                  |L1.180|
;;;175        if (n < 0) {
;;;176           while (n < 0 && posi > 0) {  /* move back */
;;;177             do {  /* find beginning of previous character */
;;;178               posi--;
;;;179             } while (posi > 0 && iscont(s + posi));
;;;180             n++;
;;;181           }
;;;182         }
;;;183         else {
;;;184           n--;  /* do not move for 1st character */
;;;185           while (n > 0 && posi < (lua_Integer)len) {
;;;186             do {  /* find beginning of next character */
;;;187               posi++;
;;;188             } while (iscont(s + posi));  /* (cannot pass final '\0') */
;;;189             n--;
;;;190           }
;;;191         }
;;;192      }
;;;193      if (n == 0)  /* did it find given character? */
;;;194        lua_pushinteger(L, posi + 1);
;;;195      else  /* no such character */
;;;196        lua_pushnil(L);
;;;197      return 1;
;;;198    }
0000b4  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.184|
0000b8  2100              MOVS     r1,#0                 ;175
0000ba  4608              MOV      r0,r1                 ;175
0000bc  1a71              SUBS     r1,r6,r1              ;175
0000be  eb770000          SBCS     r0,r7,r0              ;175
0000c2  da1e              BGE      |L1.258|
0000c4  e011              B        |L1.234|
                  |L1.198|
0000c6  bf00              NOP                            ;177
                  |L1.200|
0000c8  1e64              SUBS     r4,r4,#1              ;178
0000ca  f1650500          SBC      r5,r5,#0              ;178
0000ce  2100              MOVS     r1,#0                 ;179
0000d0  4608              MOV      r0,r1                 ;179
0000d2  1b09              SUBS     r1,r1,r4              ;179
0000d4  41a8              SBCS     r0,r0,r5              ;179
0000d6  da05              BGE      |L1.228|
0000d8  f81a0004          LDRB     r0,[r10,r4]           ;179
0000dc  f00000c0          AND      r0,r0,#0xc0           ;179
0000e0  2880              CMP      r0,#0x80              ;179
0000e2  d0f1              BEQ      |L1.200|
                  |L1.228|
0000e4  1c76              ADDS     r6,r6,#1              ;180
0000e6  f1470700          ADC      r7,r7,#0              ;180
                  |L1.234|
0000ea  2100              MOVS     r1,#0                 ;176
0000ec  4608              MOV      r0,r1                 ;176
0000ee  1a71              SUBS     r1,r6,r1              ;176
0000f0  eb770000          SBCS     r0,r7,r0              ;176
0000f4  da20              BGE      |L1.312|
0000f6  2100              MOVS     r1,#0                 ;176
0000f8  4608              MOV      r0,r1                 ;176
0000fa  1b09              SUBS     r1,r1,r4              ;176
0000fc  41a8              SBCS     r0,r0,r5              ;176
0000fe  dbe2              BLT      |L1.198|
000100  e01a              B        |L1.312|
                  |L1.258|
000102  1e76              SUBS     r6,r6,#1              ;184
000104  f1670700          SBC      r7,r7,#0              ;184
000108  e00c              B        |L1.292|
                  |L1.266|
00010a  bf00              NOP                            ;186
                  |L1.268|
00010c  1c64              ADDS     r4,r4,#1              ;187
00010e  f1450500          ADC      r5,r5,#0              ;187
000112  f81a0004          LDRB     r0,[r10,r4]           ;188
000116  f00000c0          AND      r0,r0,#0xc0           ;188
00011a  2880              CMP      r0,#0x80              ;188
00011c  d0f6              BEQ      |L1.268|
00011e  1e76              SUBS     r6,r6,#1              ;189
000120  f1670700          SBC      r7,r7,#0              ;189
                  |L1.292|
000124  2100              MOVS     r1,#0                 ;185
000126  4608              MOV      r0,r1                 ;185
000128  1b89              SUBS     r1,r1,r6              ;185
00012a  41b8              SBCS     r0,r0,r7              ;185
00012c  da04              BGE      |L1.312|
00012e  9800              LDR      r0,[sp,#0]            ;185
000130  1a20              SUBS     r0,r4,r0              ;185
000132  f1750000          SBCS     r0,r5,#0              ;185
000136  dbe8              BLT      |L1.266|
                  |L1.312|
000138  2100              MOVS     r1,#0                 ;193
00013a  ea860001          EOR      r0,r6,r1              ;193
00013e  4079              EORS     r1,r1,r7              ;193
000140  4308              ORRS     r0,r0,r1              ;193
000142  d108              BNE      |L1.342|
000144  f1140801          ADDS     r8,r4,#1              ;194
000148  f1450300          ADC      r3,r5,#0              ;194
00014c  4642              MOV      r2,r8                 ;194
00014e  4658              MOV      r0,r11                ;194
000150  f7fffffe          BL       lua_pushinteger
000154  e002              B        |L1.348|
                  |L1.342|
000156  4658              MOV      r0,r11                ;196
000158  f7fffffe          BL       lua_pushnil
                  |L1.348|
00015c  2001              MOVS     r0,#1                 ;197
00015e  e7a9              B        |L1.180|
;;;199    
                          ENDP

                  |L1.352|
000160  706f7369          DCB      "position out of range",0
000164  74696f6e
000168  206f7574
00016c  206f6620
000170  72616e67
000174  6500    
000176  00                DCB      0
000177  00                DCB      0
                  |L1.376|
000178  696e6974          DCB      "initial position is a continuation byte",0
00017c  69616c20
000180  706f7369
000184  74696f6e
000188  20697320
00018c  6120636f
000190  6e74696e
000194  75617469
000198  6f6e2062
00019c  79746500

                          AREA ||i.codepoint||, CODE, READONLY, ALIGN=2

                  codepoint PROC
;;;99     */
;;;100    static int codepoint (lua_State *L) {
000000  e92d4ffe          PUSH     {r1-r11,lr}
000004  4683              MOV      r11,r0
;;;101      size_t len;
;;;102      const char *s = luaL_checklstring(L, 1, &len);
000006  aa02              ADD      r2,sp,#8
000008  2101              MOVS     r1,#1
00000a  4658              MOV      r0,r11
00000c  f7fffffe          BL       luaL_checklstring
000010  4680              MOV      r8,r0
;;;103      lua_Integer posi = u_posrelat(luaL_optinteger(L, 2, 1), len);
000012  2201              MOVS     r2,#1
000014  2300              MOVS     r3,#0
000016  2102              MOVS     r1,#2
000018  4658              MOV      r0,r11
00001a  f7fffffe          BL       luaL_optinteger
00001e  e9cd0100          STRD     r0,r1,[sp,#0]
000022  9a02              LDR      r2,[sp,#8]
000024  f7fffffe          BL       u_posrelat
000028  4604              MOV      r4,r0
00002a  460d              MOV      r5,r1
;;;104      lua_Integer pose = u_posrelat(luaL_optinteger(L, 3, posi), len);
00002c  4622              MOV      r2,r4
00002e  462b              MOV      r3,r5
000030  2103              MOVS     r1,#3
000032  4658              MOV      r0,r11
000034  f7fffffe          BL       luaL_optinteger
000038  e9cd0100          STRD     r0,r1,[sp,#0]
00003c  9a02              LDR      r2,[sp,#8]
00003e  f7fffffe          BL       u_posrelat
000042  4606              MOV      r6,r0
000044  460f              MOV      r7,r1
;;;105      int n;
;;;106      const char *se;
;;;107      luaL_argcheck(L, posi >= 1, 2, "out of range");
000046  1e61              SUBS     r1,r4,#1
000048  f1750000          SBCS     r0,r5,#0
00004c  da04              BGE      |L2.88|
00004e  a226              ADR      r2,|L2.232|
000050  2102              MOVS     r1,#2
000052  4658              MOV      r0,r11
000054  f7fffffe          BL       luaL_argerror
                  |L2.88|
;;;108      luaL_argcheck(L, pose <= (lua_Integer)len, 3, "out of range");
000058  2100              MOVS     r1,#0
00005a  9802              LDR      r0,[sp,#8]
00005c  1b80              SUBS     r0,r0,r6
00005e  41b9              SBCS     r1,r1,r7
000060  da04              BGE      |L2.108|
000062  a221              ADR      r2,|L2.232|
000064  2103              MOVS     r1,#3
000066  4658              MOV      r0,r11
000068  f7fffffe          BL       luaL_argerror
                  |L2.108|
;;;109      if (posi > pose) return 0;  /* empty interval; return no values */
00006c  1b30              SUBS     r0,r6,r4
00006e  eb770005          SBCS     r0,r7,r5
000072  da02              BGE      |L2.122|
000074  2000              MOVS     r0,#0
                  |L2.118|
;;;110      if (pose - posi >= INT_MAX)  /* (lua_Integer -> int) overflow? */
;;;111        return luaL_error(L, "string slice too long");
;;;112      n = (int)(pose -  posi) + 1;
;;;113      luaL_checkstack(L, n, "string slice too long");
;;;114      n = 0;
;;;115      se = s + pose;
;;;116      for (s += posi - 1; s < se;) {
;;;117        int code;
;;;118        s = utf8_decode(s, &code);
;;;119        if (s == NULL)
;;;120          return luaL_error(L, "invalid UTF-8 code");
;;;121        lua_pushinteger(L, code);
;;;122        n++;
;;;123      }
;;;124      return n;
;;;125    }
000076  e8bd8ffe          POP      {r1-r11,pc}
                  |L2.122|
00007a  1b31              SUBS     r1,r6,r4              ;110
00007c  eb670005          SBC      r0,r7,r5              ;110
000080  f06f4300          MVN      r3,#0x80000000        ;110
000084  1ac9              SUBS     r1,r1,r3              ;110
000086  f1700000          SBCS     r0,r0,#0              ;110
00008a  db04              BLT      |L2.150|
00008c  a11a              ADR      r1,|L2.248|
00008e  4658              MOV      r0,r11                ;111
000090  f7fffffe          BL       luaL_error
000094  e7ef              B        |L2.118|
                  |L2.150|
000096  1b30              SUBS     r0,r6,r4              ;112
000098  f1000901          ADD      r9,r0,#1              ;112
00009c  a216              ADR      r2,|L2.248|
00009e  4649              MOV      r1,r9                 ;113
0000a0  4658              MOV      r0,r11                ;113
0000a2  f7fffffe          BL       luaL_checkstack
0000a6  f04f0900          MOV      r9,#0                 ;114
0000aa  eb080a06          ADD      r10,r8,r6             ;115
0000ae  1e60              SUBS     r0,r4,#1              ;116
0000b0  4480              ADD      r8,r8,r0              ;116
0000b2  e014              B        |L2.222|
                  |L2.180|
0000b4  a901              ADD      r1,sp,#4              ;118
0000b6  4640              MOV      r0,r8                 ;118
0000b8  f7fffffe          BL       utf8_decode
0000bc  4680              MOV      r8,r0                 ;118
0000be  f1b80f00          CMP      r8,#0                 ;119
0000c2  d104              BNE      |L2.206|
0000c4  a112              ADR      r1,|L2.272|
0000c6  4658              MOV      r0,r11                ;120
0000c8  f7fffffe          BL       luaL_error
0000cc  e7d3              B        |L2.118|
                  |L2.206|
0000ce  9a01              LDR      r2,[sp,#4]            ;121
0000d0  17d3              ASRS     r3,r2,#31             ;121
0000d2  4658              MOV      r0,r11                ;121
0000d4  f7fffffe          BL       lua_pushinteger
0000d8  f1090901          ADD      r9,r9,#1              ;122
0000dc  bf00              NOP                            ;123
                  |L2.222|
0000de  45d0              CMP      r8,r10                ;116
0000e0  d3e8              BCC      |L2.180|
0000e2  4648              MOV      r0,r9                 ;124
0000e4  e7c7              B        |L2.118|
;;;126    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L2.232|
0000e8  6f757420          DCB      "out of range",0
0000ec  6f662072
0000f0  616e6765
0000f4  00      
0000f5  00                DCB      0
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L2.248|
0000f8  73747269          DCB      "string slice too long",0
0000fc  6e672073
000100  6c696365
000104  20746f6f
000108  206c6f6e
00010c  6700    
00010e  00                DCB      0
00010f  00                DCB      0
                  |L2.272|
000110  696e7661          DCB      "invalid UTF-8 code",0
000114  6c696420
000118  5554462d
00011c  3820636f
000120  646500  
000123  00                DCB      0

                          AREA ||i.iter_aux||, CODE, READONLY, ALIGN=2

                  iter_aux PROC
;;;200    
;;;201    static int iter_aux (lua_State *L) {
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4682              MOV      r10,r0
;;;202      size_t len;
;;;203      const char *s = luaL_checklstring(L, 1, &len);
000006  aa01              ADD      r2,sp,#4
000008  2101              MOVS     r1,#1
00000a  4650              MOV      r0,r10
00000c  f7fffffe          BL       luaL_checklstring
000010  4606              MOV      r6,r0
;;;204      lua_Integer n = lua_tointeger(L, 2) - 1;
000012  2200              MOVS     r2,#0
000014  2102              MOVS     r1,#2
000016  4650              MOV      r0,r10
000018  f7fffffe          BL       lua_tointegerx
00001c  1e44              SUBS     r4,r0,#1
00001e  f1610500          SBC      r5,r1,#0
;;;205      if (n < 0)  /* first iteration? */
000022  2100              MOVS     r1,#0
000024  4608              MOV      r0,r1
000026  1a61              SUBS     r1,r4,r1
000028  eb750000          SBCS     r0,r5,r0
00002c  da02              BGE      |L3.52|
;;;206        n = 0;  /* start from here */
00002e  2400              MOVS     r4,#0
000030  4625              MOV      r5,r4
000032  e010              B        |L3.86|
                  |L3.52|
;;;207      else if (n < (lua_Integer)len) {
000034  9801              LDR      r0,[sp,#4]
000036  1a20              SUBS     r0,r4,r0
000038  f1750000          SBCS     r0,r5,#0
00003c  da0b              BGE      |L3.86|
;;;208        n++;  /* skip current byte */
00003e  1c64              ADDS     r4,r4,#1
000040  f1450500          ADC      r5,r5,#0
;;;209        while (iscont(s + n)) n++;  /* and its continuations */
000044  e002              B        |L3.76|
                  |L3.70|
000046  1c64              ADDS     r4,r4,#1
000048  f1450500          ADC      r5,r5,#0
                  |L3.76|
00004c  5d30              LDRB     r0,[r6,r4]
00004e  f00000c0          AND      r0,r0,#0xc0
000052  2880              CMP      r0,#0x80
000054  d0f7              BEQ      |L3.70|
                  |L3.86|
;;;210      }
;;;211      if (n >= (lua_Integer)len)
000056  9801              LDR      r0,[sp,#4]
000058  1a20              SUBS     r0,r4,r0
00005a  f1750000          SBCS     r0,r5,#0
00005e  db02              BLT      |L3.102|
;;;212        return 0;  /* no more codepoints */
000060  2000              MOVS     r0,#0
                  |L3.98|
;;;213      else {
;;;214        int code;
;;;215        const char *next = utf8_decode(s + n, &code);
;;;216        if (next == NULL || iscont(next))
;;;217          return luaL_error(L, "invalid UTF-8 code");
;;;218        lua_pushinteger(L, n + 1);
;;;219        lua_pushinteger(L, code);
;;;220        return 2;
;;;221      }
;;;222    }
000062  e8bd87fc          POP      {r2-r10,pc}
                  |L3.102|
000066  1930              ADDS     r0,r6,r4              ;215
000068  4669              MOV      r1,sp                 ;215
00006a  f7fffffe          BL       utf8_decode
00006e  4681              MOV      r9,r0                 ;215
000070  f1b90f00          CMP      r9,#0                 ;216
000074  d005              BEQ      |L3.130|
000076  f8990000          LDRB     r0,[r9,#0]            ;216
00007a  f00000c0          AND      r0,r0,#0xc0           ;216
00007e  2880              CMP      r0,#0x80              ;216
000080  d104              BNE      |L3.140|
                  |L3.130|
000082  a109              ADR      r1,|L3.168|
000084  4650              MOV      r0,r10                ;217
000086  f7fffffe          BL       luaL_error
00008a  e7ea              B        |L3.98|
                  |L3.140|
00008c  1c67              ADDS     r7,r4,#1              ;218
00008e  f1450300          ADC      r3,r5,#0              ;218
000092  463a              MOV      r2,r7                 ;218
000094  4650              MOV      r0,r10                ;218
000096  f7fffffe          BL       lua_pushinteger
00009a  9a00              LDR      r2,[sp,#0]            ;219
00009c  17d3              ASRS     r3,r2,#31             ;219
00009e  4650              MOV      r0,r10                ;219
0000a0  f7fffffe          BL       lua_pushinteger
0000a4  2002              MOVS     r0,#2                 ;220
0000a6  e7dc              B        |L3.98|
;;;223    
                          ENDP

                  |L3.168|
0000a8  696e7661          DCB      "invalid UTF-8 code",0
0000ac  6c696420
0000b0  5554462d
0000b4  3820636f
0000b8  646500  
0000bb  00                DCB      0

                          AREA ||i.iter_codes||, CODE, READONLY, ALIGN=2

                  iter_codes PROC
;;;224    
;;;225    static int iter_codes (lua_State *L) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;226      luaL_checkstring(L, 1);
000004  2200              MOVS     r2,#0
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_checklstring
;;;227      lua_pushcfunction(L, iter_aux);
00000e  2200              MOVS     r2,#0
000010  4907              LDR      r1,|L4.48|
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       lua_pushcclosure
;;;228      lua_pushvalue(L, 1);
000018  2101              MOVS     r1,#1
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       lua_pushvalue
;;;229      lua_pushinteger(L, 0);
000020  2200              MOVS     r2,#0
000022  4613              MOV      r3,r2
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       lua_pushinteger
;;;230      return 3;
00002a  2003              MOVS     r0,#3
;;;231    }
00002c  bd10              POP      {r4,pc}
;;;232    
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      iter_aux

                          AREA ||i.luaopen_utf8||, CODE, READONLY, ALIGN=2

                  luaopen_utf8 PROC
;;;249    
;;;250    LUAMOD_API int luaopen_utf8 (lua_State *L) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;251      luaL_newlib(L, funcs);
000004  2088              MOVS     r0,#0x88
000006  2200              MOVS     r2,#0
000008  4b0d              LDR      r3,|L5.64|
00000a  9000              STR      r0,[sp,#0]
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       luaL_checkversion_
000012  2206              MOVS     r2,#6
000014  2100              MOVS     r1,#0
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       lua_createtable
00001c  2200              MOVS     r2,#0
00001e  4909              LDR      r1,|L5.68|
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       luaL_setfuncs
;;;252      lua_pushlstring(L, UTF8PATT, sizeof(UTF8PATT)/sizeof(char) - 1);
000026  220e              MOVS     r2,#0xe
000028  a107              ADR      r1,|L5.72|
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       lua_pushlstring
;;;253      lua_setfield(L, -2, "charpattern");
000030  a209              ADR      r2,|L5.88|
000032  f06f0101          MVN      r1,#1
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       lua_setfield
;;;254      return 1;
00003c  2001              MOVS     r0,#1
;;;255    }
00003e  bd38              POP      {r3-r5,pc}
;;;256    
                          ENDP

                  |L5.64|
                          DCD      0x407f8000
                  |L5.68|
                          DCD      funcs
                  |L5.72|
000048  5b00              DCB      "[",0
00004a  2d7fc22d          DCB      "-",127,194,"-",244,"][",128,"-",191,"]*",0
00004e  f45d5b80
000052  2dbf5d2a
000056  00      
000057  00                DCB      0
                  |L5.88|
000058  63686172          DCB      "charpattern",0
00005c  70617474
000060  65726e00

                          AREA ||i.pushutfchar||, CODE, READONLY, ALIGN=2

                  pushutfchar PROC
;;;127    
;;;128    static void pushutfchar (lua_State *L, int arg) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;129      lua_Integer code = luaL_checkinteger(L, arg);
000008  4639              MOV      r1,r7
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       luaL_checkinteger
000010  4604              MOV      r4,r0
000012  460d              MOV      r5,r1
;;;130      luaL_argcheck(L, 0 <= code && code <= MAXUNICODE, arg, "value out of range");
000014  2100              MOVS     r1,#0
000016  4608              MOV      r0,r1
000018  1a61              SUBS     r1,r4,r1
00001a  eb750000          SBCS     r0,r5,r0
00001e  db04              BLT      |L6.42|
000020  4908              LDR      r1,|L6.68|
000022  2000              MOVS     r0,#0
000024  1b09              SUBS     r1,r1,r4
000026  41a8              SBCS     r0,r0,r5
000028  da04              BGE      |L6.52|
                  |L6.42|
00002a  a207              ADR      r2,|L6.72|
00002c  4639              MOV      r1,r7
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       luaL_argerror
                  |L6.52|
;;;131      lua_pushfstring(L, "%U", (long)code);
000034  4622              MOV      r2,r4
000036  a109              ADR      r1,|L6.92|
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       lua_pushfstring
;;;132    }
00003e  e8bd81f0          POP      {r4-r8,pc}
;;;133    
                          ENDP

000042  0000              DCW      0x0000
                  |L6.68|
                          DCD      0x0010ffff
                  |L6.72|
000048  76616c75          DCB      "value out of range",0
00004c  65206f75
000050  74206f66
000054  2072616e
000058  676500  
00005b  00                DCB      0
                  |L6.92|
00005c  255500            DCB      "%U",0
00005f  00                DCB      0

                          AREA ||i.u_posrelat||, CODE, READONLY, ALIGN=1

                  u_posrelat PROC
;;;29     /* translate a relative string position: negative means back from end */
;;;30     static lua_Integer u_posrelat (lua_Integer pos, size_t len) {
000000  b570              PUSH     {r4-r6,lr}
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;31       if (pos >= 0) return pos;
000006  2100              MOVS     r1,#0
000008  4608              MOV      r0,r1
00000a  1a59              SUBS     r1,r3,r1
00000c  eb740000          SBCS     r0,r4,r0
000010  db02              BLT      |L7.24|
000012  4618              MOV      r0,r3
000014  4621              MOV      r1,r4
                  |L7.22|
;;;32       else if (0u - (size_t)pos > len) return 0;
;;;33       else return (lua_Integer)len + pos + 1;
;;;34     }
000016  bd70              POP      {r4-r6,pc}
                  |L7.24|
000018  4258              RSBS     r0,r3,#0              ;32
00001a  4290              CMP      r0,r2                 ;32
00001c  d902              BLS      |L7.36|
00001e  2000              MOVS     r0,#0                 ;32
000020  4601              MOV      r1,r0                 ;32
000022  e7f8              B        |L7.22|
                  |L7.36|
000024  18d5              ADDS     r5,r2,r3              ;33
000026  f1440000          ADC      r0,r4,#0              ;33
00002a  1c6d              ADDS     r5,r5,#1              ;33
00002c  f1400100          ADC      r1,r0,#0              ;33
000030  4628              MOV      r0,r5                 ;33
000032  e7f0              B        |L7.22|
;;;35     
                          ENDP


                          AREA ||i.utf8_decode||, CODE, READONLY, ALIGN=2

                  utf8_decode PROC
;;;39     */
;;;40     static const char *utf8_decode (const char *o, int *val) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;41       static const unsigned int limits[] = {0xFF, 0x7F, 0x7FF, 0xFFFF};
;;;42       const unsigned char *s = (const unsigned char *)o;
000006  462c              MOV      r4,r5
;;;43       unsigned int c = s[0];
000008  7821              LDRB     r1,[r4,#0]
;;;44       unsigned int res = 0;  /* final result */
00000a  2200              MOVS     r2,#0
;;;45       if (c < 0x80)  /* ascii? */
00000c  2980              CMP      r1,#0x80
00000e  d201              BCS      |L8.20|
;;;46         res = c;
000010  460a              MOV      r2,r1
000012  e028              B        |L8.102|
                  |L8.20|
;;;47       else {
;;;48         int count = 0;  /* to count number of continuation bytes */
000014  2300              MOVS     r3,#0
;;;49         while (c & 0x40) {  /* still have continuation bytes? */
000016  e00e              B        |L8.54|
                  |L8.24|
;;;50           int cc = s[++count];  /* read next byte */
000018  1c58              ADDS     r0,r3,#1
00001a  4603              MOV      r3,r0
00001c  5c27              LDRB     r7,[r4,r0]
;;;51           if ((cc & 0xC0) != 0x80)  /* not a continuation byte? */
00001e  f00700c0          AND      r0,r7,#0xc0
000022  2880              CMP      r0,#0x80
000024  d001              BEQ      |L8.42|
;;;52             return NULL;  /* invalid byte sequence */
000026  2000              MOVS     r0,#0
                  |L8.40|
;;;53           res = (res << 6) | (cc & 0x3F);  /* add lower 6 bits from cont. byte */
;;;54           c <<= 1;  /* to test next bit */
;;;55         }
;;;56         res |= ((c & 0x7F) << (count * 5));  /* add first byte */
;;;57         if (count > 3 || res > MAXUNICODE || res <= limits[count])
;;;58           return NULL;  /* invalid byte sequence */
;;;59         s += count;  /* skip continuation bytes read */
;;;60       }
;;;61       if (val) *val = res;
;;;62       return (const char *)s + 1;  /* +1 to include first byte */
;;;63     }
000028  bdf0              POP      {r4-r7,pc}
                  |L8.42|
00002a  4638              MOV      r0,r7                 ;53
00002c  f362109f          BFI      r0,r2,#6,#26          ;53
000030  4602              MOV      r2,r0                 ;53
000032  0049              LSLS     r1,r1,#1              ;54
000034  bf00              NOP                            ;55
                  |L8.54|
000036  f0010040          AND      r0,r1,#0x40           ;49
00003a  2800              CMP      r0,#0                 ;49
00003c  d1ec              BNE      |L8.24|
00003e  f001007f          AND      r0,r1,#0x7f           ;56
000042  eb030783          ADD      r7,r3,r3,LSL #2       ;56
000046  40b8              LSLS     r0,r0,r7              ;56
000048  4302              ORRS     r2,r2,r0              ;56
00004a  2b03              CMP      r3,#3                 ;57
00004c  dc07              BGT      |L8.94|
00004e  f5b21f88          CMP      r2,#0x110000          ;57
000052  d204              BCS      |L8.94|
000054  4806              LDR      r0,|L8.112|
000056  f8500023          LDR      r0,[r0,r3,LSL #2]     ;57
00005a  4290              CMP      r0,r2                 ;57
00005c  d301              BCC      |L8.98|
                  |L8.94|
00005e  2000              MOVS     r0,#0                 ;58
000060  e7e2              B        |L8.40|
                  |L8.98|
000062  441c              ADD      r4,r4,r3              ;59
000064  bf00              NOP                            ;60
                  |L8.102|
000066  b106              CBZ      r6,|L8.106|
000068  6032              STR      r2,[r6,#0]            ;61
                  |L8.106|
00006a  1c60              ADDS     r0,r4,#1              ;62
00006c  e7dc              B        |L8.40|
;;;64     
                          ENDP

00006e  0000              DCW      0x0000
                  |L8.112|
                          DCD      limits

                          AREA ||i.utfchar||, CODE, READONLY, ALIGN=1

                  utfchar PROC
;;;137    */
;;;138    static int utfchar (lua_State *L) {
000000  b570              PUSH     {r4-r6,lr}
000002  f5ad5d82          SUB      sp,sp,#0x1040
000006  4606              MOV      r6,r0
;;;139      int n = lua_gettop(L);  /* number of arguments */
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lua_gettop
00000e  4605              MOV      r5,r0
;;;140      if (n == 1)  /* optimize common case of single char */
000010  2d01              CMP      r5,#1
000012  d104              BNE      |L9.30|
;;;141        pushutfchar(L, 1);
000014  2101              MOVS     r1,#1
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       pushutfchar
00001c  e013              B        |L9.70|
                  |L9.30|
;;;142      else {
;;;143        int i;
;;;144        luaL_Buffer b;
;;;145        luaL_buffinit(L, &b);
00001e  a90c              ADD      r1,sp,#0x30
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       luaL_buffinit
;;;146        for (i = 1; i <= n; i++) {
000026  2401              MOVS     r4,#1
000028  e007              B        |L9.58|
                  |L9.42|
;;;147          pushutfchar(L, i);
00002a  4621              MOV      r1,r4
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       pushutfchar
;;;148          luaL_addvalue(&b);
000032  a80c              ADD      r0,sp,#0x30
000034  f7fffffe          BL       luaL_addvalue
000038  1c64              ADDS     r4,r4,#1              ;146
                  |L9.58|
00003a  42ac              CMP      r4,r5                 ;146
00003c  ddf5              BLE      |L9.42|
;;;149        }
;;;150        luaL_pushresult(&b);
00003e  a80c              ADD      r0,sp,#0x30
000040  f7fffffe          BL       luaL_pushresult
;;;151      }
000044  bf00              NOP      
                  |L9.70|
;;;152      return 1;
000046  2001              MOVS     r0,#1
;;;153    }
000048  f50d5d82          ADD      sp,sp,#0x1040
00004c  bd70              POP      {r4-r6,pc}
;;;154    
                          ENDP


                          AREA ||i.utflen||, CODE, READONLY, ALIGN=2

                  utflen PROC
;;;70     */
;;;71     static int utflen (lua_State *L) {
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
000004  b084              SUB      sp,sp,#0x10
;;;72       int n = 0;
000006  f04f0a00          MOV      r10,#0
;;;73       size_t len;
;;;74       const char *s = luaL_checklstring(L, 1, &len);
00000a  aa02              ADD      r2,sp,#8
00000c  2101              MOVS     r1,#1
00000e  9804              LDR      r0,[sp,#0x10]
000010  f7fffffe          BL       luaL_checklstring
000014  4683              MOV      r11,r0
;;;75       lua_Integer posi = u_posrelat(luaL_optinteger(L, 2, 1), len);
000016  2201              MOVS     r2,#1
000018  2300              MOVS     r3,#0
00001a  2102              MOVS     r1,#2
00001c  9804              LDR      r0,[sp,#0x10]
00001e  f7fffffe          BL       luaL_optinteger
000022  4680              MOV      r8,r0
000024  9a02              LDR      r2,[sp,#8]
000026  f7fffffe          BL       u_posrelat
00002a  4604              MOV      r4,r0
00002c  460d              MOV      r5,r1
;;;76       lua_Integer posj = u_posrelat(luaL_optinteger(L, 3, -1), len);
00002e  f04f32ff          MOV      r2,#0xffffffff
000032  4613              MOV      r3,r2
000034  2103              MOVS     r1,#3
000036  9804              LDR      r0,[sp,#0x10]
000038  f7fffffe          BL       luaL_optinteger
00003c  4680              MOV      r8,r0
00003e  9a02              LDR      r2,[sp,#8]
000040  f7fffffe          BL       u_posrelat
000044  4606              MOV      r6,r0
000046  460f              MOV      r7,r1
;;;77       luaL_argcheck(L, 1 <= posi && --posi <= (lua_Integer)len, 2,
000048  1e61              SUBS     r1,r4,#1
00004a  f1750000          SBCS     r0,r5,#0
00004e  db09              BLT      |L10.100|
000050  1e62              SUBS     r2,r4,#1
000052  f1650000          SBC      r0,r5,#0
000056  4614              MOV      r4,r2
000058  4605              MOV      r5,r0
00005a  2100              MOVS     r1,#0
00005c  9b02              LDR      r3,[sp,#8]
00005e  1a9a              SUBS     r2,r3,r2
000060  4181              SBCS     r1,r1,r0
000062  da04              BGE      |L10.110|
                  |L10.100|
000064  a220              ADR      r2,|L10.232|
000066  2102              MOVS     r1,#2
000068  9804              LDR      r0,[sp,#0x10]
00006a  f7fffffe          BL       luaL_argerror
                  |L10.110|
;;;78                        "initial position out of string");
;;;79       luaL_argcheck(L, --posj < (lua_Integer)len, 3,
00006e  1e72              SUBS     r2,r6,#1
000070  f1670000          SBC      r0,r7,#0
000074  4616              MOV      r6,r2
000076  4607              MOV      r7,r0
000078  9902              LDR      r1,[sp,#8]
00007a  1a51              SUBS     r1,r2,r1
00007c  f1700000          SBCS     r0,r0,#0
000080  db04              BLT      |L10.140|
000082  a221              ADR      r2,|L10.264|
000084  2103              MOVS     r1,#3
000086  9804              LDR      r0,[sp,#0x10]
000088  f7fffffe          BL       luaL_argerror
                  |L10.140|
;;;80                        "final position out of string");
;;;81       while (posi <= posj) {
00008c  e01f              B        |L10.206|
                  |L10.142|
;;;82         const char *s1 = utf8_decode(s + posi, NULL);
00008e  eb0b0004          ADD      r0,r11,r4
000092  2100              MOVS     r1,#0
000094  f7fffffe          BL       utf8_decode
000098  4680              MOV      r8,r0
;;;83         if (s1 == NULL) {  /* conversion error? */
00009a  f1b80f00          CMP      r8,#0
00009e  d110              BNE      |L10.194|
;;;84           lua_pushnil(L);  /* return nil ... */
0000a0  9804              LDR      r0,[sp,#0x10]
0000a2  f7fffffe          BL       lua_pushnil
;;;85           lua_pushinteger(L, posi + 1);  /* ... and current position */
0000a6  1c61              ADDS     r1,r4,#1
0000a8  f1450000          ADC      r0,r5,#0
0000ac  460a              MOV      r2,r1
0000ae  4603              MOV      r3,r0
0000b0  e9cd1000          STRD     r1,r0,[sp,#0]
0000b4  9804              LDR      r0,[sp,#0x10]
0000b6  f7fffffe          BL       lua_pushinteger
;;;86           return 2;
0000ba  2002              MOVS     r0,#2
                  |L10.188|
;;;87         }
;;;88         posi = s1 - s;
;;;89         n++;
;;;90       }
;;;91       lua_pushinteger(L, n);
;;;92       return 1;
;;;93     }
0000bc  b005              ADD      sp,sp,#0x14
0000be  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.194|
0000c2  eba8040b          SUB      r4,r8,r11             ;88
0000c6  17e5              ASRS     r5,r4,#31             ;88
0000c8  f10a0a01          ADD      r10,r10,#1            ;89
0000cc  bf00              NOP                            ;90
                  |L10.206|
0000ce  1b30              SUBS     r0,r6,r4              ;81
0000d0  eb770005          SBCS     r0,r7,r5              ;81
0000d4  dadb              BGE      |L10.142|
0000d6  4652              MOV      r2,r10                ;91
0000d8  ea4f73ea          ASR      r3,r10,#31            ;91
0000dc  9804              LDR      r0,[sp,#0x10]         ;91
0000de  f7fffffe          BL       lua_pushinteger
0000e2  2001              MOVS     r0,#1                 ;92
0000e4  e7ea              B        |L10.188|
;;;94     
                          ENDP

0000e6  0000              DCW      0x0000
                  |L10.232|
0000e8  696e6974          DCB      "initial position out of string",0
0000ec  69616c20
0000f0  706f7369
0000f4  74696f6e
0000f8  206f7574
0000fc  206f6620
000100  73747269
000104  6e6700  
000107  00                DCB      0
                  |L10.264|
000108  66696e61          DCB      "final position out of string",0
00010c  6c20706f
000110  73697469
000114  6f6e206f
000118  7574206f
00011c  66207374
000120  72696e67
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  funcs
                          DCD      ||.conststring||
                          DCD      byteoffset
                          DCD      ||.conststring||+0x8
                          DCD      codepoint
                          DCD      ||.conststring||+0x14
                          DCD      utfchar
                          DCD      ||.conststring||+0x1c
                          DCD      utflen
                          DCD      ||.conststring||+0x20
                          DCD      iter_codes
                          DCD      ||.conststring||+0x28
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                  limits
                          DCD      0x000000ff
                          DCD      0x0000007f
                          DCD      0x000007ff
                          DCD      0x0000ffff

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  6f666673          DCB      "offset",0
000004  657400  
000007  00                DCB      0
000008  636f6465          DCB      "codepoint",0
00000c  706f696e
000010  7400    
000012  00                DCB      0
000013  00                DCB      0
000014  63686172          DCB      "char",0
000018  00      
000019  00                DCB      0
00001a  00                DCB      0
00001b  00                DCB      0
00001c  6c656e00          DCB      "len",0
000020  636f6465          DCB      "codes",0
000024  7300    
000026  00                DCB      0
000027  00                DCB      0
000028  63686172          DCB      "charpattern",0
00002c  70617474
000030  65726e00
