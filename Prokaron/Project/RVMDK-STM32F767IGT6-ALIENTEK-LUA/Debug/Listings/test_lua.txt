; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\test_lua.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\test_lua.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(L)_Lua\lua -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-LUA\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -Dlua_writestring=RMP_lua_writestring -Dlua_writeline=RMP_lua_writeline --enum_is_int --signed_chars --omf_browse=.\debug\output\test_lua.crf Source\test_lua.c]
                          THUMB

                          AREA ||i.Func_1||, CODE, READONLY, ALIGN=2

                  Func_1 PROC
;;;100    ******************************************************************************/
;;;101    void Func_1(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;102    {
;;;103        lua_State *L;  
;;;104          
;;;105        L = luaL_newstate();
000002  f7fffffe          BL       luaL_newstate
000006  4604              MOV      r4,r0
;;;106        luaL_openlibs(L);  
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       luaL_openlibs
;;;107        luaopen_base(L);  
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       luaopen_base
;;;108        luaL_dostring(L, lua_test);
000014  4909              LDR      r1,|L1.60|
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       luaL_loadstring
00001c  b940              CBNZ     r0,|L1.48|
00001e  2000              MOVS     r0,#0
000020  9000              STR      r0,[sp,#0]
000022  4603              MOV      r3,r0
000024  1e42              SUBS     r2,r0,#1
000026  4601              MOV      r1,r0
000028  9001              STR      r0,[sp,#4]
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       lua_pcallk
                  |L1.48|
;;;109        lua_close(L);  
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       lua_close
;;;110    
;;;111        while(1);
000036  bf00              NOP      
                  |L1.56|
000038  e7fe              B        |L1.56|
;;;112    }
;;;113    /* End Function:Func_1 *******************************************************/
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      lua_test

                          AREA ||i.Func_2||, CODE, READONLY, ALIGN=1

                  Func_2 PROC
;;;120    ******************************************************************************/
;;;121    void Func_2(void)
000000  bf00              NOP      
                  |L2.2|
;;;122    {
;;;123        while(1);
000002  e7fe              B        |L2.2|
;;;124    }
;;;125    /* End Function:Func_2 *******************************************************/
                          ENDP


                          AREA ||i.RMP_Init_Hook||, CODE, READONLY, ALIGN=2

                  RMP_Init_Hook PROC
;;;132    ******************************************************************************/
;;;133    void RMP_Init_Hook(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;134    {
;;;135        /* Clean up the structures */
;;;136        RMP_Clear(&Thd_1,sizeof(struct RMP_Thd));
000002  213c              MOVS     r1,#0x3c
000004  4812              LDR      r0,|L3.80|
000006  f7fffffe          BL       RMP_Clear
;;;137        RMP_Clear(&Thd_2,sizeof(struct RMP_Thd));
00000a  213c              MOVS     r1,#0x3c
00000c  4811              LDR      r0,|L3.84|
00000e  f7fffffe          BL       RMP_Clear
;;;138        RMP_Clear(&Sem_1,sizeof(struct RMP_Sem));
000012  2110              MOVS     r1,#0x10
000014  4810              LDR      r0,|L3.88|
000016  f7fffffe          BL       RMP_Clear
;;;139        /* Create counting semaphore */
;;;140        RMP_Sem_Crt(&Sem_1,0);
00001a  2100              MOVS     r1,#0
00001c  480e              LDR      r0,|L3.88|
00001e  f7fffffe          BL       RMP_Sem_Crt
;;;141        /* Start threads */
;;;142        RMP_Thd_Crt(&Thd_1, Func_1, THD1_STACK, (void*)0x1234, 1, 5);
000022  2005              MOVS     r0,#5
000024  2101              MOVS     r1,#1
000026  f2412334          MOV      r3,#0x1234
00002a  4a0c              LDR      r2,|L3.92|
00002c  e9cd1000          STRD     r1,r0,[sp,#0]
000030  490b              LDR      r1,|L3.96|
000032  4807              LDR      r0,|L3.80|
000034  f7fffffe          BL       RMP_Thd_Crt
;;;143        RMP_Thd_Crt(&Thd_2, Func_2, THD2_STACK, (void*)0x4321, 1, 5);
000038  2005              MOVS     r0,#5
00003a  2101              MOVS     r1,#1
00003c  f2443321          MOV      r3,#0x4321
000040  4a08              LDR      r2,|L3.100|
000042  e9cd1000          STRD     r1,r0,[sp,#0]
000046  4908              LDR      r1,|L3.104|
000048  4802              LDR      r0,|L3.84|
00004a  f7fffffe          BL       RMP_Thd_Crt
;;;144    }
00004e  bd1c              POP      {r2-r4,pc}
;;;145    
                          ENDP

                  |L3.80|
                          DCD      Thd_1
                  |L3.84|
                          DCD      Thd_2
                  |L3.88|
                          DCD      Sem_1
                  |L3.92|
                          DCD      Stack_1+0x7e90
                  |L3.96|
                          DCD      Func_1
                  |L3.100|
                          DCD      Stack_2+0x7e90
                  |L3.104|
                          DCD      Func_2

                          AREA ||i.RMP_Init_Idle||, CODE, READONLY, ALIGN=1

                  RMP_Init_Idle PROC
;;;145    
;;;146    void RMP_Init_Idle(void)
000000  4770              BX       lr
;;;147    {
;;;148        return;
;;;149    }
;;;150    /* End Function:RMP_Init *****************************************************/
                          ENDP


                          AREA ||i.RMP_Point||, CODE, READONLY, ALIGN=1

                  RMP_Point PROC
;;;40     
;;;41     void RMP_Point(rmp_cnt_t X, rmp_cnt_t Y, rmp_ptr_t C)
000000  4770              BX       lr
;;;42     {
;;;43     
;;;44     }
;;;45     
                          ENDP


                          AREA ||i.RMP_lua_writeline||, CODE, READONLY, ALIGN=1

                  RMP_lua_writeline PROC
;;;52     
;;;53     void RMP_lua_writeline(void)
000000  b510              PUSH     {r4,lr}
;;;54     {
;;;55         RMP_Putchar('\r');
000002  200d              MOVS     r0,#0xd
000004  f7fffffe          BL       RMP_Putchar
;;;56         RMP_Putchar('\n');
000008  200a              MOVS     r0,#0xa
00000a  f7fffffe          BL       RMP_Putchar
;;;57     }
00000e  bd10              POP      {r4,pc}
;;;58     
                          ENDP


                          AREA ||i.RMP_lua_writestring||, CODE, READONLY, ALIGN=1

                  RMP_lua_writestring PROC
;;;45     
;;;46     void RMP_lua_writestring(char* string, int len)
000000  b570              PUSH     {r4-r6,lr}
;;;47     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;48         int i;
;;;49         for(i=0;i<len;i++)
000006  2400              MOVS     r4,#0
000008  e003              B        |L7.18|
                  |L7.10|
;;;50             RMP_Putchar(string[i]);
00000a  5728              LDRSB    r0,[r5,r4]
00000c  f7fffffe          BL       RMP_Putchar
000010  1c64              ADDS     r4,r4,#1              ;49
                  |L7.18|
000012  42b4              CMP      r4,r6                 ;49
000014  dbf9              BLT      |L7.10|
;;;51     }
000016  bd70              POP      {r4-r6,pc}
;;;52     
                          ENDP


                          AREA ||i.exit||, CODE, READONLY, ALIGN=1

                  exit PROC
;;;64     
;;;65     void exit(int status)  
000000  bf00              NOP      
                  |L8.2|
;;;66     {  
;;;67         while(1);
000002  e7fe              B        |L8.2|
;;;68     }  
;;;69       
                          ENDP


                          AREA ||i.system||, CODE, READONLY, ALIGN=1

                  system PROC
;;;69       
;;;70     int system(const char * string)  
000000  4601              MOV      r1,r0
;;;71     {  
;;;72         return 0;  
000002  2000              MOVS     r0,#0
;;;73     }  
000004  4770              BX       lr
;;;74     
                          ENDP


                          AREA ||i.time||, CODE, READONLY, ALIGN=1

                  time PROC
;;;58     
;;;59     time_t time(time_t* time)
000000  4601              MOV      r1,r0
;;;60     {
;;;61         *time=0;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;62         return 0;
;;;63     }
000006  4770              BX       lr
;;;64     
                          ENDP


                          AREA ||i.usage_exit||, CODE, READONLY, ALIGN=1

                  usage_exit PROC
;;;74     
;;;75     static void usage_exit(void) {
000000  bf00              NOP      
                  |L11.2|
;;;76     	while(1);
000002  e7fe              B        |L11.2|
;;;77     }
;;;78     /* Lua test script */  
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Stack_1
                          %        32768
                  Stack_2
                          %        32768
                  Thd_1
                          %        60
                  Thd_2
                          %        60
                  Sem_1
                          %        16
                  Pool
                          %        32768
                  Buf
                          %        1024

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  lua_test
000000  7072696e          DCB      0x70,0x72,0x69,0x6e
000004  74282248          DCB      0x74,0x28,0x22,0x48
000008  656c6c6f          DCB      0x65,0x6c,0x6c,0x6f
00000c  2c492061          DCB      0x2c,0x49,0x20,0x61
000010  6d206c75          DCB      0x6d,0x20,0x6c,0x75
000014  61215c6e          DCB      0x61,0x21,0x5c,0x6e
000018  2d2d7468          DCB      0x2d,0x2d,0x74,0x68
00001c  69732069          DCB      0x69,0x73,0x20,0x69
000020  73206e65          DCB      0x73,0x20,0x6e,0x65
000024  776c696e          DCB      0x77,0x6c,0x69,0x6e
000028  65207072          DCB      0x65,0x20,0x70,0x72
00002c  696e7466          DCB      0x69,0x6e,0x74,0x66
000030  22290a66          DCB      0x22,0x29,0x0a,0x66
000034  756e6374          DCB      0x75,0x6e,0x63,0x74
000038  696f6e20          DCB      0x69,0x6f,0x6e,0x20
00003c  666f6f28          DCB      0x66,0x6f,0x6f,0x28
000040  290a2020          DCB      0x29,0x0a,0x20,0x20
000044  6c6f6361          DCB      0x6c,0x6f,0x63,0x61
000048  6c206920          DCB      0x6c,0x20,0x69,0x20
00004c  3d20300a          DCB      0x3d,0x20,0x30,0x0a
000050  20206c6f          DCB      0x20,0x20,0x6c,0x6f
000054  63616c20          DCB      0x63,0x61,0x6c,0x20
000058  73756d20          DCB      0x73,0x75,0x6d,0x20
00005c  3d20310a          DCB      0x3d,0x20,0x31,0x0a
000060  20207768          DCB      0x20,0x20,0x77,0x68
000064  696c6520          DCB      0x69,0x6c,0x65,0x20
000068  69203c3d          DCB      0x69,0x20,0x3c,0x3d
00006c  20313020          DCB      0x20,0x31,0x30,0x20
000070  646f0a20          DCB      0x64,0x6f,0x0a,0x20
000074  20202073          DCB      0x20,0x20,0x20,0x73
000078  756d203d          DCB      0x75,0x6d,0x20,0x3d
00007c  2073756d          DCB      0x20,0x73,0x75,0x6d
000080  202a2032          DCB      0x20,0x2a,0x20,0x32
000084  0a202020          DCB      0x0a,0x20,0x20,0x20
000088  2069203d          DCB      0x20,0x69,0x20,0x3d
00008c  2069202b          DCB      0x20,0x69,0x20,0x2b
000090  20310a20          DCB      0x20,0x31,0x0a,0x20
000094  20656e64          DCB      0x20,0x65,0x6e,0x64
000098  0a726574          DCB      0x0a,0x72,0x65,0x74
00009c  75726e20          DCB      0x75,0x72,0x6e,0x20
0000a0  73756d0a          DCB      0x73,0x75,0x6d,0x0a
0000a4  656e640a          DCB      0x65,0x6e,0x64,0x0a
0000a8  7072696e          DCB      0x70,0x72,0x69,0x6e
0000ac  74282273          DCB      0x74,0x28,0x22,0x73
0000b0  756d203d          DCB      0x75,0x6d,0x20,0x3d
0000b4  222c2066          DCB      0x22,0x2c,0x20,0x66
0000b8  6f6f2829          DCB      0x6f,0x6f,0x28,0x29
0000bc  290a7072          DCB      0x29,0x0a,0x70,0x72
0000c0  696e7428          DCB      0x69,0x6e,0x74,0x28
0000c4  22616e64          DCB      0x22,0x61,0x6e,0x64
0000c8  2073756d          DCB      0x20,0x73,0x75,0x6d
0000cc  203d2032          DCB      0x20,0x3d,0x20,0x32
0000d0  5e313120          DCB      0x5e,0x31,0x31,0x20
0000d4  3d222c20          DCB      0x3d,0x22,0x2c,0x20
0000d8  32205e20          DCB      0x32,0x20,0x5e,0x20
0000dc  3131290a          DCB      0x31,0x31,0x29,0x0a
0000e0  7072696e          DCB      0x70,0x72,0x69,0x6e
0000e4  74282265          DCB      0x74,0x28,0x22,0x65
0000e8  78702832          DCB      0x78,0x70,0x28,0x32
0000ec  30302920          DCB      0x30,0x30,0x29,0x20
0000f0  3d222c20          DCB      0x3d,0x22,0x2c,0x20
0000f4  6d617468          DCB      0x6d,0x61,0x74,0x68
0000f8  2e657870          DCB      0x2e,0x65,0x78,0x70
0000fc  28323030          DCB      0x28,0x32,0x30,0x30
000100  29290a00          DCB      0x29,0x29,0x0a,0x00

;*** Start embedded assembler ***

#line 1 "Source\\test_lua.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_test_lua_c_Pool____REV16|
#line 464 "D:\\Program_Files_x86\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_test_lua_c_Pool____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_test_lua_c_Pool____REVSH|
#line 479
|__asm___10_test_lua_c_Pool____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_test_lua_c_Pool____RRX|
#line 666
|__asm___10_test_lua_c_Pool____RRX| PROC
#line 667

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
