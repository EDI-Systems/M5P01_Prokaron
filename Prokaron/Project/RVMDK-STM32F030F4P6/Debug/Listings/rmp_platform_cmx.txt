; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\rmp_platform_cmx.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\rmp_platform_cmx.d --cpu=Cortex-M0 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\STM32F0xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\STM32F0xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F030F4P6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0\Drivers\CMSIS\Device\ST\STM32F0xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F030x6 -DSTM32F030x6 -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\rmp_platform_cmx.crf ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx.c]
                          THUMB

                          AREA ||i.RMP_Putchar||, CODE, READONLY, ALIGN=2

                  RMP_Putchar PROC
;;;103    ******************************************************************************/
;;;104    void RMP_Putchar(char Char)
000000  4903              LDR      r1,|L1.16|
;;;105    {
;;;106        RMP_CMX_PUTCHAR(Char);
000002  8108              STRH     r0,[r1,#8]
000004  4803              LDR      r0,|L1.20|
                  |L1.6|
000006  69c1              LDR      r1,[r0,#0x1c]
000008  0649              LSLS     r1,r1,#25
00000a  d5fc              BPL      |L1.6|
;;;107    }
00000c  4770              BX       lr
;;;108    /* End Function:RMP_Putchar **************************************************/
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40013820
                  |L1.20|
                          DCD      0x40013800

                          AREA ||i._RMP_Low_Level_Init||, CODE, READONLY, ALIGN=2

                  _RMP_Low_Level_Init PROC
;;;77     ******************************************************************************/
;;;78     void _RMP_Low_Level_Init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;79     {    
000002  b0b4              SUB      sp,sp,#0xd0
;;;80         RMP_CMX_LOW_LEVEL_INIT();
000004  2130              MOVS     r1,#0x30
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       RMP_Clear
00000c  2110              MOVS     r1,#0x10
00000e  a812              ADD      r0,sp,#0x48
000010  f7fffffe          BL       RMP_Clear
000014  2114              MOVS     r1,#0x14
000016  a80c              ADD      r0,sp,#0x30
000018  f7fffffe          BL       RMP_Clear
00001c  2178              MOVS     r1,#0x78
00001e  a816              ADD      r0,sp,#0x58
000020  f7fffffe          BL       RMP_Clear
000024  2500              MOVS     r5,#0
000026  2005              MOVS     r0,#5
000028  9500              STR      r5,[sp,#0]
00002a  04c0              LSLS     r0,r0,#19
00002c  2402              MOVS     r4,#2
00002e  900a              STR      r0,[sp,#0x28]
000030  9509              STR      r5,[sp,#0x24]
000032  950b              STR      r5,[sp,#0x2c]
000034  9408              STR      r4,[sp,#0x20]
000036  4668              MOV      r0,sp
000038  f7fffffe          BL       HAL_RCC_OscConfig
00003c  2800              CMP      r0,#0
00003e  d01b              BEQ      |L2.120|
000040  a04d              ADR      r0,|L2.376|
000042  f7fffffe          BL       RMP_Print_String
000046  a056              ADR      r0,|L2.416|
000048  f7fffffe          BL       RMP_Print_String
00004c  a061              ADR      r0,|L2.468|
00004e  f7fffffe          BL       RMP_Print_String
000052  2050              MOVS     r0,#0x50
000054  f7fffffe          BL       RMP_Print_Int
000058  a061              ADR      r0,|L2.480|
00005a  f7fffffe          BL       RMP_Print_String
00005e  a061              ADR      r0,|L2.484|
000060  f7fffffe          BL       RMP_Print_String
000064  a062              ADR      r0,|L2.496|
000066  f7fffffe          BL       RMP_Print_String
00006a  a062              ADR      r0,|L2.500|
00006c  f7fffffe          BL       RMP_Print_String
000070  a05b              ADR      r0,|L2.480|
000072  f7fffffe          BL       RMP_Print_String
                  |L2.118|
000076  e7fe              B        |L2.118|
                  |L2.120|
000078  2607              MOVS     r6,#7
00007a  9514              STR      r5,[sp,#0x50]
00007c  2101              MOVS     r1,#1
00007e  a812              ADD      r0,sp,#0x48
000080  9612              STR      r6,[sp,#0x48]
000082  9515              STR      r5,[sp,#0x54]
000084  9413              STR      r4,[sp,#0x4c]
000086  f7fffffe          BL       HAL_RCC_ClockConfig
00008a  2800              CMP      r0,#0
00008c  d01b              BEQ      |L2.198|
00008e  a03a              ADR      r0,|L2.376|
000090  f7fffffe          BL       RMP_Print_String
000094  a042              ADR      r0,|L2.416|
000096  f7fffffe          BL       RMP_Print_String
00009a  a04e              ADR      r0,|L2.468|
00009c  f7fffffe          BL       RMP_Print_String
0000a0  2050              MOVS     r0,#0x50
0000a2  f7fffffe          BL       RMP_Print_Int
0000a6  a04e              ADR      r0,|L2.480|
0000a8  f7fffffe          BL       RMP_Print_String
0000ac  a04d              ADR      r0,|L2.484|
0000ae  f7fffffe          BL       RMP_Print_String
0000b2  a04f              ADR      r0,|L2.496|
0000b4  f7fffffe          BL       RMP_Print_String
0000b8  a04e              ADR      r0,|L2.500|
0000ba  f7fffffe          BL       RMP_Print_String
0000be  a048              ADR      r0,|L2.480|
0000c0  f7fffffe          BL       RMP_Print_String
                  |L2.196|
0000c4  e7fe              B        |L2.196|
                  |L2.198|
0000c6  484e              LDR      r0,|L2.512|
0000c8  6942              LDR      r2,[r0,#0x14]
0000ca  2101              MOVS     r1,#1
0000cc  0449              LSLS     r1,r1,#17
0000ce  430a              ORRS     r2,r2,r1
0000d0  6142              STR      r2,[r0,#0x14]
0000d2  6942              LDR      r2,[r0,#0x14]
0000d4  400a              ANDS     r2,r2,r1
0000d6  9211              STR      r2,[sp,#0x44]
0000d8  6982              LDR      r2,[r0,#0x18]
0000da  10c9              ASRS     r1,r1,#3
0000dc  430a              ORRS     r2,r2,r1
0000de  6182              STR      r2,[r0,#0x18]
0000e0  6980              LDR      r0,[r0,#0x18]
0000e2  940d              STR      r4,[sp,#0x34]
0000e4  4008              ANDS     r0,r0,r1
0000e6  9011              STR      r0,[sp,#0x44]
0000e8  1148              ASRS     r0,r1,#5
0000ea  900c              STR      r0,[sp,#0x30]
0000ec  2001              MOVS     r0,#1
0000ee  2103              MOVS     r1,#3
0000f0  900e              STR      r0,[sp,#0x38]
0000f2  9010              STR      r0,[sp,#0x40]
0000f4  910f              STR      r1,[sp,#0x3c]
0000f6  2009              MOVS     r0,#9
0000f8  a90c              ADD      r1,sp,#0x30
0000fa  06c0              LSLS     r0,r0,#27
0000fc  f7fffffe          BL       HAL_GPIO_Init
000100  20e1              MOVS     r0,#0xe1
000102  0240              LSLS     r0,r0,#9
000104  951c              STR      r5,[sp,#0x70]
000106  4c3f              LDR      r4,|L2.516|
000108  9017              STR      r0,[sp,#0x5c]
00010a  9416              STR      r4,[sp,#0x58]
00010c  2008              MOVS     r0,#8
00010e  901b              STR      r0,[sp,#0x6c]
000110  9518              STR      r5,[sp,#0x60]
000112  9519              STR      r5,[sp,#0x64]
000114  951a              STR      r5,[sp,#0x68]
000116  a816              ADD      r0,sp,#0x58
000118  f7fffffe          BL       HAL_UART_Init
00011c  493a              LDR      r1,|L2.520|
00011e  200d              MOVS     r0,#0xd
000120  8108              STRH     r0,[r1,#8]
                  |L2.290|
000122  69e0              LDR      r0,[r4,#0x1c]
000124  0640              LSLS     r0,r0,#25
000126  d5fc              BPL      |L2.290|
000128  200a              MOVS     r0,#0xa
00012a  8108              STRH     r0,[r1,#8]
                  |L2.300|
00012c  69e0              LDR      r0,[r4,#0x1c]
00012e  0640              LSLS     r0,r0,#25
000130  d5fc              BPL      |L2.300|
000132  4836              LDR      r0,|L2.524|
000134  69c1              LDR      r1,[r0,#0x1c]
000136  020a              LSLS     r2,r1,#8
000138  2103              MOVS     r1,#3
00013a  0a12              LSRS     r2,r2,#8
00013c  0789              LSLS     r1,r1,#30
00013e  1852              ADDS     r2,r2,r1
000140  61c2              STR      r2,[r0,#0x1c]
000142  6a02              LDR      r2,[r0,#0x20]
000144  23ff              MOVS     r3,#0xff
000146  041b              LSLS     r3,r3,#16
000148  439a              BICS     r2,r2,r3
00014a  0a0b              LSRS     r3,r1,#8
00014c  18d2              ADDS     r2,r2,r3
00014e  6202              STR      r2,[r0,#0x20]
000150  6a02              LDR      r2,[r0,#0x20]
000152  0212              LSLS     r2,r2,#8
000154  0a12              LSRS     r2,r2,#8
000156  1852              ADDS     r2,r2,r1
000158  6202              STR      r2,[r0,#0x20]
00015a  4a2e              LDR      r2,|L2.532|
00015c  4b2c              LDR      r3,|L2.528|
00015e  6153              STR      r3,[r2,#0x14]
000160  6a03              LDR      r3,[r0,#0x20]
000162  021b              LSLS     r3,r3,#8
000164  0a1b              LSRS     r3,r3,#8
000166  1859              ADDS     r1,r3,r1
000168  6201              STR      r1,[r0,#0x20]
00016a  6195              STR      r5,[r2,#0x18]
00016c  6116              STR      r6,[r2,#0x10]
;;;81       
;;;82         RMP_Disable_Int();
00016e  f7fffffe          BL       RMP_Disable_Int
;;;83     }
000172  b034              ADD      sp,sp,#0xd0
000174  bd70              POP      {r4-r6,pc}
;;;84     /* End Function:_RMP_Low_Level_Init ******************************************/
                          ENDP

000176  0000              DCW      0x0000
                  |L2.376|
000178  0d0a2a2a          DCB      "\r\n***\r\nKernel panic - not syncing:\r\n",0
00017c  2a0d0a4b
000180  65726e65
000184  6c207061
000188  6e696320
00018c  2d206e6f
000190  74207379
000194  6e63696e
000198  673a0d0a
00019c  00      
00019d  00                DCB      0
00019e  00                DCB      0
00019f  00                DCB      0
                  |L2.416|
0001a0  2e2e5c2e          DCB      "..\\..\\MProkaron\\Platform\\CortexM\\rmp_platform_cmx."
0001a4  2e5c4d50
0001a8  726f6b61
0001ac  726f6e5c
0001b0  506c6174
0001b4  666f726d
0001b8  5c436f72
0001bc  7465784d
0001c0  5c726d70
0001c4  5f706c61
0001c8  74666f72
0001cc  6d5f636d
0001d0  782e    
0001d2  6300              DCB      "c",0
                  |L2.468|
0001d4  202c204c          DCB      " , Line ",0
0001d8  696e6520
0001dc  00      
0001dd  00                DCB      0
0001de  00                DCB      0
0001df  00                DCB      0
                  |L2.480|
0001e0  0d0a00            DCB      "\r\n",0
0001e3  00                DCB      0
                  |L2.484|
0001e4  4e6f7620          DCB      "Nov 24 2018",0
0001e8  32342032
0001ec  30313800
                  |L2.496|
0001f0  202c2000          DCB      " , ",0
                  |L2.500|
0001f4  30313a35          DCB      "01:55:44",0
0001f8  353a3434
0001fc  00      
0001fd  00                DCB      0
0001fe  00                DCB      0
0001ff  00                DCB      0
                  |L2.512|
                          DCD      0x40021000
                  |L2.516|
                          DCD      0x40013800
                  |L2.520|
                          DCD      0x40013820
                  |L2.524|
                          DCD      0xe000ed00
                  |L2.528|
                          DCD      0x00000e0f
                  |L2.532|
                          DCD      0xe000e000

                          AREA ||i._RMP_Plat_Hook||, CODE, READONLY, ALIGN=1

                  _RMP_Plat_Hook PROC
;;;91     ******************************************************************************/
;;;92     void _RMP_Plat_Hook(void)
000000  b510              PUSH     {r4,lr}
;;;93     {
;;;94         RMP_Enable_Int();
000002  f7fffffe          BL       RMP_Enable_Int
;;;95     }
000006  bd10              POP      {r4,pc}
;;;96     /* End Function:_RMP_Plat_Hook ***********************************************/
                          ENDP


                          AREA ||i._RMP_Stack_Init||, CODE, READONLY, ALIGN=1

                  _RMP_Stack_Init PROC
;;;52     ******************************************************************************/
;;;53     void _RMP_Stack_Init(rmp_ptr_t Entry, rmp_ptr_t Stack, rmp_ptr_t Arg)
000000  2302              MOVS     r3,#2
;;;54     {
;;;55         /* This is the LR value indicating that we never used the FPU */
;;;56         ((rmp_ptr_t*)Stack)[0+8]=0xFFFFFFFD;    
000002  43db              MVNS     r3,r3
;;;57         /* Cortex-M:Pass the parameter */                            
;;;58         ((rmp_ptr_t*)Stack)[0+9]=Arg;       
;;;59         /* Cortex-M:Set the process entry */
;;;60         ((rmp_ptr_t*)Stack)[6+9]=Entry;
;;;61         /* Cortex-M:Set the T bit or an INVSTATE will happen; don't set STKALIGN, 
;;;62          * and there is no stack padding. The effect of STKALIGN is, if it is set
;;;63          * and the (hardware-pushed) interrupt stack is 8n byte aligned, it will
;;;64          * pop an extra word (to restore the stack to an previous unaligned state);
;;;65          * if the interrupt stack is 8n+4 byte aligned, even if STKALIGN is set, it
;;;66          * will not pop this extra word. The result is, if STKALIGN is set, we will
;;;67          * never be able to get a 8n byte aligned stack, so we do not set it. */                            
;;;68         ((rmp_ptr_t*)Stack)[7+9]=0x01000000;
000004  620b              STR      r3,[r1,#0x20]
000006  624a              STR      r2,[r1,#0x24]
000008  63c8              STR      r0,[r1,#0x3c]
00000a  2001              MOVS     r0,#1
00000c  0600              LSLS     r0,r0,#24
00000e  6408              STR      r0,[r1,#0x40]
;;;69     }
000010  4770              BX       lr
;;;70     /* End Function:_RMP_Stack_Init **********************************************/
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\MProkaron\\Platform\\CortexM\\rmp_platform_cmx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_rmp_platform_cmx_c_203ac359____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F0_V1.9.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___18_rmp_platform_cmx_c_203ac359____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_rmp_platform_cmx_c_203ac359____REVSH|
#line 402
|__asm___18_rmp_platform_cmx_c_203ac359____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
