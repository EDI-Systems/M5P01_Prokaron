; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\lcd.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\lcd.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Core -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\lcd.crf Drivers\lcd.c]
                          THUMB

                          AREA ||i.HAL_SRAM_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_SRAM_MspInit PROC
;;;82     
;;;83     void HAL_SRAM_MspInit(SRAM_HandleTypeDef *hsram)
000000  4818              LDR      r0,|L1.100|
;;;84     {
000002  b510              PUSH     {r4,lr}
000004  b086              SUB      sp,sp,#0x18
;;;85         GPIO_InitTypeDef GPIO_Initure;
;;;86         
;;;87         __HAL_RCC_FMC_CLK_ENABLE();
000006  6801              LDR      r1,[r0,#0]
000008  f0410101          ORR      r1,r1,#1
00000c  6001              STR      r1,[r0,#0]
00000e  6800              LDR      r0,[r0,#0]
000010  f0000001          AND      r0,r0,#1
;;;88         __HAL_RCC_GPIOD_CLK_ENABLE();
000014  9005              STR      r0,[sp,#0x14]
000016  4813              LDR      r0,|L1.100|
000018  3808              SUBS     r0,r0,#8
00001a  6801              LDR      r1,[r0,#0]
00001c  f0410108          ORR      r1,r1,#8
000020  6001              STR      r1,[r0,#0]
000022  6801              LDR      r1,[r0,#0]
000024  f0010108          AND      r1,r1,#8
;;;89         __HAL_RCC_GPIOE_CLK_ENABLE();
000028  9105              STR      r1,[sp,#0x14]
00002a  6801              LDR      r1,[r0,#0]
00002c  f0410110          ORR      r1,r1,#0x10
000030  6001              STR      r1,[r0,#0]
000032  6800              LDR      r0,[r0,#0]
;;;90         
;;;91         GPIO_Initure.Pin=GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8|\
;;;92                          GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
;;;93         GPIO_Initure.Mode=GPIO_MODE_AF_PP;
000034  2102              MOVS     r1,#2
;;;94         GPIO_Initure.Pull=GPIO_PULLUP;
000036  2201              MOVS     r2,#1
000038  f0000010          AND      r0,r0,#0x10           ;89
00003c  9005              STR      r0,[sp,#0x14]         ;91
;;;95         GPIO_Initure.Speed=GPIO_SPEED_HIGH;
00003e  2303              MOVS     r3,#3
000040  f24e70b3          MOV      r0,#0xe7b3            ;91
;;;96         GPIO_Initure.Alternate=GPIO_AF12_FMC;
000044  240c              MOVS     r4,#0xc
000046  e88d001f          STM      sp,{r0-r4}
;;;97         HAL_GPIO_Init(GPIOD,&GPIO_Initure);
00004a  4807              LDR      r0,|L1.104|
00004c  4669              MOV      r1,sp
00004e  f7fffffe          BL       HAL_GPIO_Init
;;;98         
;;;99         GPIO_Initure.Pin=GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|\
000052  f64f7080          MOV      r0,#0xff80
;;;100                         GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
;;;101        HAL_GPIO_Init(GPIOE,&GPIO_Initure);
000056  9000              STR      r0,[sp,#0]
000058  4804              LDR      r0,|L1.108|
00005a  4669              MOV      r1,sp
00005c  f7fffffe          BL       HAL_GPIO_Init
;;;102    }
000060  b006              ADD      sp,sp,#0x18
000062  bd10              POP      {r4,pc}
;;;103    
                          ENDP

                  |L1.100|
                          DCD      0x40023838
                  |L1.104|
                          DCD      0x40020c00
                  |L1.108|
                          DCD      0x40021000

                          AREA ||i.LCD_BGR2RGB||, CODE, READONLY, ALIGN=1

                  LCD_BGR2RGB PROC
;;;10     
;;;11     u16 LCD_BGR2RGB(u16 c)
000000  0ac2              LSRS     r2,r0,#11
;;;12     {
;;;13         u16  r,g,b,rgb;   
;;;14         b=(c>>0)&0x1f;
;;;15         g=(c>>5)&0x3f;
000002  f3c01145          UBFX     r1,r0,#5,#6
;;;16         r=(c>>11)&0x1f;     
;;;17         rgb=(b<<11)+(g<<5)+(r<<0);         
000006  02c0              LSLS     r0,r0,#11
000008  eb001041          ADD      r0,r0,r1,LSL #5
00000c  4410              ADD      r0,r0,r2
00000e  b280              UXTH     r0,r0
;;;18         return(rgb);
;;;19     } 
000010  4770              BX       lr
;;;20     
                          ENDP


                          AREA ||i.LCD_Clear||, CODE, READONLY, ALIGN=1

                  LCD_Clear PROC
;;;116    
;;;117    void LCD_Clear(u32 color)
000000  f7ffbffe          B.W      LTDC_Clear
;;;118    {   
;;;119        LTDC_Clear(color);
;;;120    }
;;;121    
                          ENDP


                          AREA ||i.LCD_DisplayOff||, CODE, READONLY, ALIGN=1

                  LCD_DisplayOff PROC
;;;36     
;;;37     void LCD_DisplayOff(void)
000000  2000              MOVS     r0,#0
;;;38     {       
;;;39         LTDC_Switch(0);
000002  f7ffbffe          B.W      LTDC_Switch
;;;40     }
;;;41     
                          ENDP


                          AREA ||i.LCD_DisplayOn||, CODE, READONLY, ALIGN=1

                  LCD_DisplayOn PROC
;;;31     
;;;32     void LCD_DisplayOn(void)
000000  2001              MOVS     r0,#1
;;;33     {                       
;;;34         LTDC_Switch(1);
000002  f7ffbffe          B.W      LTDC_Switch
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.LCD_Display_Dir||, CODE, READONLY, ALIGN=2

                  LCD_Display_Dir PROC
;;;54     
;;;55     void LCD_Display_Dir(u8 dir)
000000  b510              PUSH     {r4,lr}
;;;56     {
;;;57         lcddev.dir=dir;
000002  4c05              LDR      r4,|L6.24|
000004  71a0              STRB     r0,[r4,#6]
;;;58         LTDC_Display_Dir(dir);
000006  f7fffffe          BL       LTDC_Display_Dir
;;;59         lcddev.width=lcdltdc.width;
00000a  4804              LDR      r0,|L6.28|
00000c  8ac1              LDRH     r1,[r0,#0x16]  ; lcdltdc
00000e  8021              STRH     r1,[r4,#0]
;;;60         lcddev.height=lcdltdc.height;
000010  8b00              LDRH     r0,[r0,#0x18]  ; lcdltdc
000012  8060              STRH     r0,[r4,#2]
;;;61     }
000014  bd10              POP      {r4,pc}
;;;62     
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      ||area_number.15||
                  |L6.28|
                          DCD      lcdltdc

                          AREA ||i.LCD_DrawPoint||, CODE, READONLY, ALIGN=2

                  LCD_DrawPoint PROC
;;;41     
;;;42     void LCD_DrawPoint(u16 x,u16 y)
000000  4a04              LDR      r2,|L7.20|
;;;43     {
;;;44         if(lcdltdc.pwidth!=0)
000002  6812              LDR      r2,[r2,#0]  ; lcdltdc
000004  2a00              CMP      r2,#0                 ;43
000006  d003              BEQ      |L7.16|
;;;45         {
;;;46             LTDC_Draw_Point(x,y,POINT_COLOR);
000008  4a03              LDR      r2,|L7.24|
00000a  6812              LDR      r2,[r2,#0]  ; POINT_COLOR
00000c  f7ffbffe          B.W      LTDC_Draw_Point
                  |L7.16|
;;;47         }
;;;48     }
000010  4770              BX       lr
;;;49     
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      lcdltdc
                  |L7.24|
                          DCD      ||.data||

                          AREA ||i.LCD_Fast_DrawPoint||, CODE, READONLY, ALIGN=1

                  LCD_Fast_DrawPoint PROC
;;;49     
;;;50     void LCD_Fast_DrawPoint(u16 x,u16 y,u32 color)
000000  f7ffbffe          B.W      LTDC_Draw_Point
;;;51     {       
;;;52         LTDC_Draw_Point(x,y,color);
;;;53     }
;;;54     
                          ENDP


                          AREA ||i.LCD_Init||, CODE, READONLY, ALIGN=2

                  LCD_Init PROC
;;;103    
;;;104    void LCD_Init(void)
000000  b510              PUSH     {r4,lr}
;;;105    {
;;;106        lcddev.id=LTDC_PanelID_Read();
000002  f7fffffe          BL       LTDC_PanelID_Read
000006  4909              LDR      r1,|L9.44|
000008  8088              STRH     r0,[r1,#4]
;;;107        if(lcddev.id!=0)
00000a  b108              CBZ      r0,|L9.16|
;;;108        {
;;;109            LTDC_Init();
00000c  f7fffffe          BL       LTDC_Init
                  |L9.16|
;;;110        }
;;;111    
;;;112        LCD_Display_Dir(0);
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       LCD_Display_Dir
;;;113        LCD_LED(1);
000016  4806              LDR      r0,|L9.48|
000018  2201              MOVS     r2,#1
00001a  2120              MOVS     r1,#0x20
00001c  f7fffffe          BL       HAL_GPIO_WritePin
000020  e8bd4010          POP      {r4,lr}
;;;114        LCD_Clear(WHITE);
000024  f64f70ff          MOV      r0,#0xffff
000028  f7ffbffe          B.W      LTDC_Clear
;;;115    }
;;;116    
                          ENDP

                  |L9.44|
                          DCD      ||area_number.15||
                  |L9.48|
                          DCD      0x40020400

                          AREA ||i.LCD_MPU_Config||, CODE, READONLY, ALIGN=1

                  LCD_MPU_Config PROC
;;;62     
;;;63     void LCD_MPU_Config(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;64     {    
;;;65         MPU_Region_InitTypeDef MPU_Initure;
;;;66     
;;;67         HAL_MPU_Disable();
000002  f7fffffe          BL       HAL_MPU_Disable
;;;68         MPU_Initure.Enable=MPU_REGION_ENABLE;
;;;69         MPU_Initure.Number=LCD_REGION_NUMBER;
;;;70         MPU_Initure.BaseAddress=LCD_ADDRESS_START;
;;;71         MPU_Initure.Size=LCD_REGION_SIZE;
;;;72         MPU_Initure.SubRegionDisable=0X00;
000006  2000              MOVS     r0,#0
;;;73         MPU_Initure.TypeExtField=MPU_TEX_LEVEL0;
;;;74         MPU_Initure.AccessPermission=MPU_REGION_FULL_ACCESS;
;;;75         MPU_Initure.DisableExec=MPU_INSTRUCTION_ACCESS_ENABLE;
000008  f88d000c          STRB     r0,[sp,#0xc]
00000c  231b              MOVS     r3,#0x1b              ;71
00000e  f88d3008          STRB     r3,[sp,#8]            ;71
000012  2101              MOVS     r1,#1                 ;68
000014  f88d0009          STRB     r0,[sp,#9]            ;72
;;;76         MPU_Initure.IsShareable=MPU_ACCESS_NOT_SHAREABLE;
000018  f88d000d          STRB     r0,[sp,#0xd]
00001c  2504              MOVS     r5,#4                 ;69
00001e  f88d1000          STRB     r1,[sp,#0]            ;68
000022  2403              MOVS     r4,#3                 ;74
000024  f88d000a          STRB     r0,[sp,#0xa]          ;73
000028  f04f42c0          MOV      r2,#0x60000000        ;70
;;;77         MPU_Initure.IsCacheable=MPU_ACCESS_NOT_CACHEABLE;
00002c  f88d000e          STRB     r0,[sp,#0xe]
;;;78         MPU_Initure.IsBufferable=MPU_ACCESS_BUFFERABLE;
;;;79         HAL_MPU_ConfigRegion(&MPU_Initure);
000030  4668              MOV      r0,sp
000032  f88d5001          STRB     r5,[sp,#1]            ;69
000036  9201              STR      r2,[sp,#4]            ;71
000038  f88d400b          STRB     r4,[sp,#0xb]          ;74
00003c  f88d100f          STRB     r1,[sp,#0xf]          ;78
000040  f7fffffe          BL       HAL_MPU_ConfigRegion
;;;80         HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
000044  2004              MOVS     r0,#4
000046  f7fffffe          BL       HAL_MPU_Enable
;;;81     }
00004a  bd7f              POP      {r0-r6,pc}
;;;82     
                          ENDP


                          AREA ||i.LCD_ReadPoint||, CODE, READONLY, ALIGN=2

                  LCD_ReadPoint PROC
;;;25     
;;;26     u32 LCD_ReadPoint(u16 x,u16 y)
000000  4a05              LDR      r2,|L11.24|
;;;27     {
;;;28         if(x>=lcddev.width||y>=lcddev.height)return 0;
000002  8813              LDRH     r3,[r2,#0]  ; lcddev
000004  4283              CMP      r3,r0
000006  d902              BLS      |L11.14|
000008  8852              LDRH     r2,[r2,#2]  ; lcddev
00000a  428a              CMP      r2,r1
00000c  d801              BHI      |L11.18|
                  |L11.14|
00000e  2000              MOVS     r0,#0
;;;29         return LTDC_Read_Point(x,y);
;;;30     }
000010  4770              BX       lr
                  |L11.18|
000012  f7ffbffe          B.W      LTDC_Read_Point
;;;31     
                          ENDP

000016  0000              DCW      0x0000
                  |L11.24|
                          DCD      ||area_number.15||

                          AREA ||i.opt_delay||, CODE, READONLY, ALIGN=1

                  opt_delay PROC
                  |L12.0|
;;;20     
;;;21     void opt_delay(u8 i)
000000  1e41              SUBS     r1,r0,#1
;;;22     {
;;;23         while(i--);
000002  b2c8              UXTB     r0,r1
000004  d2fc              BCS      |L12.0|
;;;24     }
000006  4770              BX       lr
;;;25     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  SRAM_Handler
                          %        80

                          AREA ||area_number.15||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.15||, ||.bss||
                  lcddev
                          %        14

                          AREA ||.data||, DATA, ALIGN=2

                  POINT_COLOR
                          DCD      0xff000000

                          AREA ||area_number.18||, DATA, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.data||
                  BACK_COLOR
                          DCD      0xffffffff

;*** Start embedded assembler ***

#line 1 "Drivers\\lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_4fcc5fa4____REV16|
#line 468 "D:\\Program_Files_x86\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.3.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_lcd_c_4fcc5fa4____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_4fcc5fa4____REVSH|
#line 483
|__asm___5_lcd_c_4fcc5fa4____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_4fcc5fa4____RRX|
#line 670
|__asm___5_lcd_c_4fcc5fa4____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
