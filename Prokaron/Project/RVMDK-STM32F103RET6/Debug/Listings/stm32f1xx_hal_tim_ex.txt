; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f1xx_hal_tim_ex.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f1xx_hal_tim_ex.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F1_V1.6.0\Drivers\STM32F1xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_F1_V1.6.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F1_V1.6.0\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F1_V1.6.0\Drivers\STM32F1xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F103RET6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F10X_HD -DUSE_HAL_DRIVER -DSTM32F103xE -W --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f1xx_hal_tim_ex.crf ..\..\..\M0P0_Library\STM32Cube_FW_F1_V1.6.0\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_tim_ex.c]
                          THUMB

                          AREA ||i.HAL_TIMEx_BreakCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_BreakCallback PROC
;;;1743     */
;;;1744   __weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1745   {
;;;1746     /* Prevent unused argument(s) compilation warning */
;;;1747     UNUSED(htim);
;;;1748     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1749               the HAL_TIMEx_BreakCallback could be implemented in the user file
;;;1750      */
;;;1751   }
;;;1752   
                          ENDP


                          AREA ||i.HAL_TIMEx_CommutationCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_CommutationCallback PROC
;;;1729     */
;;;1730   __weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1731   {
;;;1732     /* Prevent unused argument(s) compilation warning */
;;;1733     UNUSED(htim);
;;;1734     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1735               the HAL_TIMEx_CommutationCallback could be implemented in the user file
;;;1736      */
;;;1737   }
;;;1738   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigBreakDeadTime||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigBreakDeadTime PROC
;;;1625     */
;;;1626   HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
000000  6bc2              LDR      r2,[r0,#0x3c]
;;;1627                                                   TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
;;;1628   {
;;;1629     uint32_t tmpbdtr = 0U;
;;;1630   
;;;1631     /* Check the parameters */
;;;1632     assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
;;;1633     assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
;;;1634     assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
;;;1635     assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
;;;1636     assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
;;;1637     assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
;;;1638     assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
;;;1639     assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
;;;1640   
;;;1641     /* Process Locked */
;;;1642     __HAL_LOCK(htim);
000002  2a01              CMP      r2,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;1643   
;;;1644     /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
;;;1645        the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;1646     
;;;1647     /* Set the BDTR bits */
;;;1648     MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
;;;1649     MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
;;;1650     MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
;;;1651     MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
;;;1652     MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
;;;1653     MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
;;;1654     MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
;;;1655     MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
;;;1656     
;;;1657     /* Set TIMx_BDTR */
;;;1658     htim->Instance->BDTR = tmpbdtr;
;;;1659     
;;;1660     __HAL_UNLOCK(htim);
;;;1661   
;;;1662     return HAL_OK;
;;;1663   }
000008  4770              BXEQ     lr
00000a  2201              MOVS     r2,#1                 ;1642
00000c  63c2              STR      r2,[r0,#0x3c]         ;1648
00000e  68ca              LDR      r2,[r1,#0xc]          ;1649
000010  688b              LDR      r3,[r1,#8]            ;1649
000012  f4227240          BIC      r2,r2,#0x300          ;1649
000016  431a              ORRS     r2,r2,r3              ;1649
000018  684b              LDR      r3,[r1,#4]            ;1650
00001a  f4226280          BIC      r2,r2,#0x400          ;1650
00001e  431a              ORRS     r2,r2,r3              ;1650
000020  680b              LDR      r3,[r1,#0]            ;1651
000022  f4226200          BIC      r2,r2,#0x800          ;1651
000026  431a              ORRS     r2,r2,r3              ;1651
000028  690b              LDR      r3,[r1,#0x10]         ;1652
00002a  f4225280          BIC      r2,r2,#0x1000         ;1652
00002e  431a              ORRS     r2,r2,r3              ;1652
000030  694b              LDR      r3,[r1,#0x14]         ;1653
000032  f4225200          BIC      r2,r2,#0x2000         ;1653
000036  431a              ORRS     r2,r2,r3              ;1653
000038  6989              LDR      r1,[r1,#0x18]         ;1654
00003a  f4224280          BIC      r2,r2,#0x4000         ;1654
00003e  430a              ORRS     r2,r2,r1              ;1654
000040  f4224200          BIC      r2,r2,#0x8000         ;1655
000044  4311              ORRS     r1,r1,r2              ;1655
000046  6802              LDR      r2,[r0,#0]            ;1658
000048  6451              STR      r1,[r2,#0x44]         ;1658
00004a  2100              MOVS     r1,#0                 ;1660
00004c  63c1              STR      r1,[r0,#0x3c]         ;1662
00004e  4608              MOV      r0,r1                 ;1662
000050  4770              BX       lr
;;;1664   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutationEvent PROC
;;;1479     */
;;;1480   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  6bc3              LDR      r3,[r0,#0x3c]
;;;1481   {
;;;1482     /* Check the parameters */
;;;1483     assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
;;;1484     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1485   
;;;1486     __HAL_LOCK(htim);
000002  2b01              CMP      r3,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;1487   
;;;1488     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1489         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1490     {
;;;1491       /* Select the Input trigger */
;;;1492       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1493       htim->Instance->SMCR |= InputTrigger;
;;;1494     }
;;;1495   
;;;1496     /* Select the Capture Compare preload feature */
;;;1497     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1498     /* Select the Commutation event source */
;;;1499     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1500     htim->Instance->CR2 |= CommutationSource;
;;;1501   
;;;1502     __HAL_UNLOCK(htim);
;;;1503   
;;;1504     return HAL_OK;
;;;1505   }
000008  4770              BXEQ     lr
00000a  2301              MOVS     r3,#1                 ;1486
00000c  63c3              STR      r3,[r0,#0x3c]         ;1488
00000e  2900              CMP      r1,#0                 ;1488
000010  bf18              IT       NE                    ;1488
000012  2910              CMPNE    r1,#0x10              ;1488
000014  d003              BEQ      |L4.30|
000016  2920              CMP      r1,#0x20              ;1488
000018  bf18              IT       NE                    ;1488
00001a  2930              CMPNE    r1,#0x30              ;1488
00001c  d10c              BNE      |L4.56|
                  |L4.30|
00001e  6803              LDR      r3,[r0,#0]            ;1492
000020  f8d3c008          LDR      r12,[r3,#8]           ;1492
000024  f02c0c70          BIC      r12,r12,#0x70         ;1492
000028  f8c3c008          STR      r12,[r3,#8]           ;1492
00002c  6803              LDR      r3,[r0,#0]            ;1493
00002e  f8d3c008          LDR      r12,[r3,#8]           ;1493
000032  ea4c0101          ORR      r1,r12,r1             ;1493
000036  6099              STR      r1,[r3,#8]            ;1493
                  |L4.56|
000038  6801              LDR      r1,[r0,#0]            ;1497
00003a  684b              LDR      r3,[r1,#4]            ;1497
00003c  f0430301          ORR      r3,r3,#1              ;1497
000040  604b              STR      r3,[r1,#4]            ;1497
000042  6801              LDR      r1,[r0,#0]            ;1499
000044  684b              LDR      r3,[r1,#4]            ;1499
000046  f0230304          BIC      r3,r3,#4              ;1499
00004a  604b              STR      r3,[r1,#4]            ;1499
00004c  6801              LDR      r1,[r0,#0]            ;1500
00004e  684b              LDR      r3,[r1,#4]            ;1500
000050  431a              ORRS     r2,r2,r3              ;1500
000052  604a              STR      r2,[r1,#4]            ;1500
000054  2100              MOVS     r1,#0                 ;1502
000056  63c1              STR      r1,[r0,#0x3c]         ;1504
000058  4608              MOV      r0,r1                 ;1504
00005a  4770              BX       lr
;;;1506   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_ConfigCommutationEvent_DMA PROC
;;;1581     */
;;;1582   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  6bc3              LDR      r3,[r0,#0x3c]
;;;1583   {
;;;1584     /* Check the parameters */
;;;1585     assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
;;;1586     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1587   
;;;1588     __HAL_LOCK(htim);
000002  2b01              CMP      r3,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;1589   
;;;1590     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1591         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1592     {
;;;1593       /* Select the Input trigger */
;;;1594       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1595       htim->Instance->SMCR |= InputTrigger;
;;;1596     }
;;;1597   
;;;1598     /* Select the Capture Compare preload feature */
;;;1599     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1600     /* Select the Commutation event source */
;;;1601     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1602     htim->Instance->CR2 |= CommutationSource;
;;;1603   
;;;1604     /* Enable the Commutation DMA Request */
;;;1605     /* Set the DMA Commutation Callback */
;;;1606     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
;;;1607     /* Set the DMA error callback */
;;;1608     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
;;;1609   
;;;1610     /* Enable the Commutation DMA Request */
;;;1611     __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
;;;1612   
;;;1613     __HAL_UNLOCK(htim);
;;;1614   
;;;1615     return HAL_OK;
;;;1616   }
000008  4770              BXEQ     lr
00000a  2301              MOVS     r3,#1                 ;1588
00000c  63c3              STR      r3,[r0,#0x3c]         ;1590
00000e  2900              CMP      r1,#0                 ;1590
000010  bf18              IT       NE                    ;1590
000012  2910              CMPNE    r1,#0x10              ;1590
000014  d003              BEQ      |L5.30|
000016  2920              CMP      r1,#0x20              ;1590
000018  bf18              IT       NE                    ;1590
00001a  2930              CMPNE    r1,#0x30              ;1590
00001c  d10c              BNE      |L5.56|
                  |L5.30|
00001e  6803              LDR      r3,[r0,#0]            ;1594
000020  f8d3c008          LDR      r12,[r3,#8]           ;1594
000024  f02c0c70          BIC      r12,r12,#0x70         ;1594
000028  f8c3c008          STR      r12,[r3,#8]           ;1594
00002c  6803              LDR      r3,[r0,#0]            ;1595
00002e  f8d3c008          LDR      r12,[r3,#8]           ;1595
000032  ea4c0101          ORR      r1,r12,r1             ;1595
000036  6099              STR      r1,[r3,#8]            ;1595
                  |L5.56|
000038  6801              LDR      r1,[r0,#0]            ;1599
00003a  684b              LDR      r3,[r1,#4]            ;1599
00003c  f0430301          ORR      r3,r3,#1              ;1599
000040  604b              STR      r3,[r1,#4]            ;1599
000042  6801              LDR      r1,[r0,#0]            ;1601
000044  684b              LDR      r3,[r1,#4]            ;1601
000046  f0230304          BIC      r3,r3,#4              ;1601
00004a  604b              STR      r3,[r1,#4]            ;1601
00004c  6801              LDR      r1,[r0,#0]            ;1602
00004e  684b              LDR      r3,[r1,#4]            ;1602
000050  431a              ORRS     r2,r2,r3              ;1602
000052  604a              STR      r2,[r1,#4]            ;1602
000054  6b42              LDR      r2,[r0,#0x34]         ;1606
000056  4907              LDR      r1,|L5.116|
000058  62d1              STR      r1,[r2,#0x2c]         ;1608
00005a  6b42              LDR      r2,[r0,#0x34]         ;1608
00005c  4906              LDR      r1,|L5.120|
00005e  6351              STR      r1,[r2,#0x34]         ;1611
000060  6801              LDR      r1,[r0,#0]            ;1611
000062  68ca              LDR      r2,[r1,#0xc]          ;1611
000064  f4425200          ORR      r2,r2,#0x2000         ;1611
000068  60ca              STR      r2,[r1,#0xc]          ;1611
00006a  2100              MOVS     r1,#0                 ;1613
00006c  63c1              STR      r1,[r0,#0x3c]         ;1615
00006e  4608              MOV      r0,r1                 ;1615
000070  4770              BX       lr
;;;1617   
                          ENDP

000072  0000              DCW      0x0000
                  |L5.116|
                          DCD      TIMEx_DMACommutationCplt
                  |L5.120|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutationEvent_IT PROC
;;;1528     */
;;;1529   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  6bc3              LDR      r3,[r0,#0x3c]
;;;1530   {
;;;1531     /* Check the parameters */
;;;1532     assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
;;;1533     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1534   
;;;1535     __HAL_LOCK(htim);
000002  2b01              CMP      r3,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;1536   
;;;1537     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1538         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1539     {
;;;1540       /* Select the Input trigger */
;;;1541       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1542       htim->Instance->SMCR |= InputTrigger;
;;;1543     }
;;;1544   
;;;1545     /* Select the Capture Compare preload feature */
;;;1546     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1547     /* Select the Commutation event source */
;;;1548     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1549     htim->Instance->CR2 |= CommutationSource;
;;;1550   
;;;1551     /* Enable the Commutation Interrupt Request */
;;;1552     __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
;;;1553   
;;;1554     __HAL_UNLOCK(htim);
;;;1555   
;;;1556     return HAL_OK;
;;;1557   }
000008  4770              BXEQ     lr
00000a  2301              MOVS     r3,#1                 ;1535
00000c  63c3              STR      r3,[r0,#0x3c]         ;1537
00000e  2900              CMP      r1,#0                 ;1537
000010  bf18              IT       NE                    ;1537
000012  2910              CMPNE    r1,#0x10              ;1537
000014  d003              BEQ      |L6.30|
000016  2920              CMP      r1,#0x20              ;1537
000018  bf18              IT       NE                    ;1537
00001a  2930              CMPNE    r1,#0x30              ;1537
00001c  d10c              BNE      |L6.56|
                  |L6.30|
00001e  6803              LDR      r3,[r0,#0]            ;1541
000020  f8d3c008          LDR      r12,[r3,#8]           ;1541
000024  f02c0c70          BIC      r12,r12,#0x70         ;1541
000028  f8c3c008          STR      r12,[r3,#8]           ;1541
00002c  6803              LDR      r3,[r0,#0]            ;1542
00002e  f8d3c008          LDR      r12,[r3,#8]           ;1542
000032  ea4c0101          ORR      r1,r12,r1             ;1542
000036  6099              STR      r1,[r3,#8]            ;1542
                  |L6.56|
000038  6801              LDR      r1,[r0,#0]            ;1546
00003a  684b              LDR      r3,[r1,#4]            ;1546
00003c  f0430301          ORR      r3,r3,#1              ;1546
000040  604b              STR      r3,[r1,#4]            ;1546
000042  6801              LDR      r1,[r0,#0]            ;1548
000044  684b              LDR      r3,[r1,#4]            ;1548
000046  f0230304          BIC      r3,r3,#4              ;1548
00004a  604b              STR      r3,[r1,#4]            ;1548
00004c  6801              LDR      r1,[r0,#0]            ;1549
00004e  684b              LDR      r3,[r1,#4]            ;1549
000050  431a              ORRS     r2,r2,r3              ;1549
000052  604a              STR      r2,[r1,#4]            ;1549
000054  6801              LDR      r1,[r0,#0]            ;1552
000056  68ca              LDR      r2,[r1,#0xc]          ;1552
000058  f0420220          ORR      r2,r2,#0x20           ;1552
00005c  60ca              STR      r2,[r1,#0xc]          ;1552
00005e  2100              MOVS     r1,#0                 ;1554
000060  63c1              STR      r1,[r0,#0x3c]         ;1556
000062  4608              MOV      r0,r1                 ;1556
000064  4770              BX       lr
;;;1558   
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_DeInit PROC
;;;245      */
;;;246    HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;247    {
000002  4604              MOV      r4,r0
;;;248      /* Check the parameters */
;;;249      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;250    
;;;251      htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  6420              STR      r0,[r4,#0x40]
;;;252    
;;;253      /* Disable the TIM Peripheral Clock */
;;;254      __HAL_TIM_DISABLE(htim);
000008  6820              LDR      r0,[r4,#0]
00000a  6a01              LDR      r1,[r0,#0x20]
00000c  f2411211          MOV      r2,#0x1111
000010  4211              TST      r1,r2
000012  d107              BNE      |L7.36|
000014  6a01              LDR      r1,[r0,#0x20]
000016  1092              ASRS     r2,r2,#2
000018  4211              TST      r1,r2
00001a  d103              BNE      |L7.36|
00001c  6801              LDR      r1,[r0,#0]
00001e  f0210101          BIC      r1,r1,#1
000022  6001              STR      r1,[r0,#0]
                  |L7.36|
;;;255    
;;;256      /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;257      HAL_TIMEx_HallSensor_MspDeInit(htim);
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       HAL_TIMEx_HallSensor_MspDeInit
;;;258    
;;;259      /* Change TIM state */
;;;260      htim->State = HAL_TIM_STATE_RESET;
00002a  2000              MOVS     r0,#0
00002c  6420              STR      r0,[r4,#0x40]
;;;261    
;;;262      /* Release Lock */
;;;263      __HAL_UNLOCK(htim);
00002e  63e0              STR      r0,[r4,#0x3c]
;;;264    
;;;265      return HAL_OK;
;;;266    }
000030  bd10              POP      {r4,pc}
;;;267    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_GetState PROC
;;;1794     */
;;;1795   HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
000000  6c00              LDR      r0,[r0,#0x40]
;;;1796   {
;;;1797     return htim->State;
;;;1798   }
000002  4770              BX       lr
;;;1799   
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Init PROC
;;;166      */
;;;167    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
000000  2800              CMP      r0,#0
;;;168    {
;;;169      TIM_OC_InitTypeDef OC_Config;
;;;170    
;;;171      /* Check the TIM handle allocation */
;;;172      if(htim == NULL)
;;;173      {
;;;174        return HAL_ERROR;
000002  bf04              ITT      EQ
000004  2001              MOVEQ    r0,#1
;;;175      }
;;;176    
;;;177      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;178      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;179      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;180      assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
;;;181      assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
;;;182      assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
;;;183      assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
;;;184    
;;;185      if(htim->State == HAL_TIM_STATE_RESET)
;;;186      {
;;;187        /* Allocate lock resource and initialize it */
;;;188        htim->Lock = HAL_UNLOCKED;
;;;189        
;;;190        /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;191        HAL_TIMEx_HallSensor_MspInit(htim);
;;;192      }
;;;193    
;;;194      /* Set the TIM state */
;;;195      htim->State= HAL_TIM_STATE_BUSY;
;;;196    
;;;197      /* Configure the Time base in the Encoder Mode */
;;;198      TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;199    
;;;200      /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
;;;201      TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
;;;202    
;;;203      /* Reset the IC1PSC Bits */
;;;204      htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
;;;205      /* Set the IC1PSC value */
;;;206      htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
;;;207    
;;;208      /* Enable the Hall sensor interface (XOR function of the three inputs) */
;;;209      htim->Instance->CR2 |= TIM_CR2_TI1S;
;;;210    
;;;211      /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
;;;212      htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;213      htim->Instance->SMCR |= TIM_TS_TI1F_ED;
;;;214    
;;;215      /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
;;;216      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;217      htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
;;;218    
;;;219      /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
;;;220      OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
;;;221      OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
;;;222      OC_Config.OCMode = TIM_OCMODE_PWM2;
;;;223      OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
;;;224      OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
;;;225      OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
;;;226      OC_Config.Pulse = sConfig->Commutation_Delay;
;;;227    
;;;228      TIM_OC2_SetConfig(htim->Instance, &OC_Config);
;;;229    
;;;230      /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
;;;231        register to 101 */
;;;232      htim->Instance->CR2 &= ~TIM_CR2_MMS;
;;;233      htim->Instance->CR2 |= TIM_TRGO_OC2REF;
;;;234    
;;;235      /* Initialize the TIM state*/
;;;236      htim->State= HAL_TIM_STATE_READY;
;;;237    
;;;238      return HAL_OK;
;;;239    }
000006  4770              BXEQ     lr
000008  b570              PUSH     {r4-r6,lr}            ;168
00000a  4604              MOV      r4,r0                 ;168
00000c  6c00              LDR      r0,[r0,#0x40]         ;185
00000e  b088              SUB      sp,sp,#0x20           ;168
000010  460e              MOV      r6,r1                 ;168
000012  2500              MOVS     r5,#0                 ;185
000014  b918              CBNZ     r0,|L9.30|
000016  4620              MOV      r0,r4                 ;191
000018  63e5              STR      r5,[r4,#0x3c]         ;191
00001a  f7fffffe          BL       HAL_TIMEx_HallSensor_MspInit
                  |L9.30|
00001e  2002              MOVS     r0,#2                 ;195
000020  6420              STR      r0,[r4,#0x40]         ;195
000022  1d21              ADDS     r1,r4,#4              ;198
000024  6820              LDR      r0,[r4,#0]            ;198
000026  f7fffffe          BL       TIM_Base_SetConfig
00002a  68b3              LDR      r3,[r6,#8]            ;201
00002c  6831              LDR      r1,[r6,#0]            ;201
00002e  2203              MOVS     r2,#3                 ;201
000030  6820              LDR      r0,[r4,#0]            ;201
000032  f7fffffe          BL       TIM_TI1_SetConfig
000036  6820              LDR      r0,[r4,#0]            ;204
000038  6981              LDR      r1,[r0,#0x18]         ;204
00003a  f021010c          BIC      r1,r1,#0xc            ;204
00003e  6181              STR      r1,[r0,#0x18]         ;204
000040  6820              LDR      r0,[r4,#0]            ;206
000042  6981              LDR      r1,[r0,#0x18]         ;206
000044  6872              LDR      r2,[r6,#4]            ;206
000046  4311              ORRS     r1,r1,r2              ;206
000048  6181              STR      r1,[r0,#0x18]         ;206
00004a  6820              LDR      r0,[r4,#0]            ;209
00004c  6841              LDR      r1,[r0,#4]            ;209
00004e  f0410180          ORR      r1,r1,#0x80           ;209
000052  6041              STR      r1,[r0,#4]            ;209
000054  6820              LDR      r0,[r4,#0]            ;212
000056  6881              LDR      r1,[r0,#8]            ;212
000058  f0210170          BIC      r1,r1,#0x70           ;212
00005c  6081              STR      r1,[r0,#8]            ;212
00005e  6820              LDR      r0,[r4,#0]            ;213
000060  6881              LDR      r1,[r0,#8]            ;213
000062  f0410140          ORR      r1,r1,#0x40           ;213
000066  6081              STR      r1,[r0,#8]            ;213
000068  6820              LDR      r0,[r4,#0]            ;216
00006a  6881              LDR      r1,[r0,#8]            ;216
00006c  f0210107          BIC      r1,r1,#7              ;216
000070  6081              STR      r1,[r0,#8]            ;216
000072  6820              LDR      r0,[r4,#0]            ;217
000074  6881              LDR      r1,[r0,#8]            ;217
000076  f0410104          ORR      r1,r1,#4              ;217
00007a  6081              STR      r1,[r0,#8]            ;217
00007c  2070              MOVS     r0,#0x70              ;222
00007e  9505              STR      r5,[sp,#0x14]         ;223
000080  9504              STR      r5,[sp,#0x10]         ;221
000082  9506              STR      r5,[sp,#0x18]         ;224
000084  9503              STR      r5,[sp,#0xc]          ;225
000086  9502              STR      r5,[sp,#8]            ;226
000088  9000              STR      r0,[sp,#0]            ;226
00008a  68f0              LDR      r0,[r6,#0xc]          ;226
00008c  9001              STR      r0,[sp,#4]            ;228
00008e  4669              MOV      r1,sp                 ;228
000090  6820              LDR      r0,[r4,#0]            ;228
000092  f7fffffe          BL       TIM_OC2_SetConfig
000096  6820              LDR      r0,[r4,#0]            ;232
000098  6841              LDR      r1,[r0,#4]            ;232
00009a  f0210170          BIC      r1,r1,#0x70           ;232
00009e  6041              STR      r1,[r0,#4]            ;232
0000a0  6820              LDR      r0,[r4,#0]            ;233
0000a2  6841              LDR      r1,[r0,#4]            ;233
0000a4  f0410150          ORR      r1,r1,#0x50           ;233
0000a8  6041              STR      r1,[r0,#4]            ;233
0000aa  2001              MOVS     r0,#1                 ;236
0000ac  6420              STR      r0,[r4,#0x40]         ;236
0000ae  b008              ADD      sp,sp,#0x20
0000b0  2000              MOVS     r0,#0                 ;238
0000b2  bd70              POP      {r4-r6,pc}
;;;240    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspDeInit PROC
;;;286      */
;;;287    __weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;288    {
;;;289      /* Prevent unused argument(s) compilation warning */
;;;290      UNUSED(htim);
;;;291      /* NOTE : This function Should not be modified, when the callback is needed,
;;;292                the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
;;;293       */
;;;294    }
;;;295    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspInit PROC
;;;272      */
;;;273    __weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;274    {
;;;275      /* Prevent unused argument(s) compilation warning */
;;;276      UNUSED(htim);
;;;277      /* NOTE : This function Should not be modified, when the callback is needed,
;;;278                the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
;;;279       */
;;;280    }
;;;281    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Start PROC
;;;300      */
;;;301    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;302    {
000002  4604              MOV      r4,r0
;;;303      /* Check the parameters */
;;;304      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;305    
;;;306      /* Enable the Input Capture channel 1
;;;307        (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;308      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
000004  6800              LDR      r0,[r0,#0]
000006  2201              MOVS     r2,#1
000008  2100              MOVS     r1,#0
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;309    
;;;310      /* Enable the Peripheral */
;;;311      __HAL_TIM_ENABLE(htim);
00000e  6820              LDR      r0,[r4,#0]
000010  6801              LDR      r1,[r0,#0]
000012  f0410101          ORR      r1,r1,#1
000016  6001              STR      r1,[r0,#0]
;;;312    
;;;313      /* Return function status */
;;;314      return HAL_OK;
000018  2000              MOVS     r0,#0
;;;315    }
00001a  bd10              POP      {r4,pc}
;;;316    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Start_DMA PROC
;;;392      */
;;;393    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;394    {
000002  4604              MOV      r4,r0
;;;395      /* Check the parameters */
;;;396      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;397    
;;;398       if((htim->State == HAL_TIM_STATE_BUSY))
000004  6c00              LDR      r0,[r0,#0x40]
000006  4615              MOV      r5,r2                 ;394
000008  460e              MOV      r6,r1                 ;394
00000a  2802              CMP      r0,#2
;;;399      {
;;;400         return HAL_BUSY;
;;;401      }
;;;402      else if((htim->State == HAL_TIM_STATE_READY))
;;;403      {
;;;404        if(((uint32_t)pData == 0U) && (Length > 0U))
;;;405        {
;;;406          return HAL_ERROR;
;;;407        }
;;;408        else
;;;409        {
;;;410          htim->State = HAL_TIM_STATE_BUSY;
;;;411        }
;;;412      }
;;;413      /* Enable the Input Capture channel 1
;;;414        (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;415      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;416    
;;;417      /* Set the DMA Input Capture 1 Callback */
;;;418      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
;;;419      /* Set the DMA error callback */
;;;420      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;421    
;;;422      /* Enable the DMA channel for Capture 1*/
;;;423      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
;;;424    
;;;425      /* Enable the capture compare 1 Interrupt */
;;;426      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;427    
;;;428      /* Enable the Peripheral */
;;;429      __HAL_TIM_ENABLE(htim);
;;;430    
;;;431      /* Return function status */
;;;432      return HAL_OK;
;;;433    }
00000c  bf08              IT       EQ
00000e  bd70              POPEQ    {r4-r6,pc}
000010  6c20              LDR      r0,[r4,#0x40]         ;402
000012  2801              CMP      r0,#1                 ;402
000014  d106              BNE      |L13.36|
000016  b91e              CBNZ     r6,|L13.32|
000018  2d00              CMP      r5,#0                 ;404
00001a  bf1c              ITT      NE                    ;406
00001c  2001              MOVNE    r0,#1                 ;406
00001e  bd70              POPNE    {r4-r6,pc}
                  |L13.32|
000020  2002              MOVS     r0,#2                 ;410
000022  6420              STR      r0,[r4,#0x40]         ;410
                  |L13.36|
000024  2201              MOVS     r2,#1                 ;415
000026  2100              MOVS     r1,#0                 ;415
000028  6820              LDR      r0,[r4,#0]            ;415
00002a  f7fffffe          BL       TIM_CCxChannelCmd
00002e  6a61              LDR      r1,[r4,#0x24]         ;418
000030  480c              LDR      r0,|L13.100|
000032  462b              MOV      r3,r5                 ;423
000034  62c8              STR      r0,[r1,#0x2c]         ;420
000036  6a61              LDR      r1,[r4,#0x24]         ;420
000038  480b              LDR      r0,|L13.104|
00003a  4632              MOV      r2,r6                 ;423
00003c  6348              STR      r0,[r1,#0x34]         ;423
00003e  6820              LDR      r0,[r4,#0]            ;423
000040  f1000134          ADD      r1,r0,#0x34           ;423
000044  6a60              LDR      r0,[r4,#0x24]         ;423
000046  f7fffffe          BL       HAL_DMA_Start_IT
00004a  6820              LDR      r0,[r4,#0]            ;426
00004c  68c1              LDR      r1,[r0,#0xc]          ;426
00004e  f4417100          ORR      r1,r1,#0x200          ;426
000052  60c1              STR      r1,[r0,#0xc]          ;426
000054  6820              LDR      r0,[r4,#0]            ;429
000056  6801              LDR      r1,[r0,#0]            ;429
000058  f0410101          ORR      r1,r1,#1              ;429
00005c  6001              STR      r1,[r0,#0]            ;429
00005e  2000              MOVS     r0,#0                 ;432
000060  bd70              POP      {r4-r6,pc}
;;;434    
                          ENDP

000062  0000              DCW      0x0000
                  |L13.100|
                          DCD      TIM_DMACaptureCplt
                  |L13.104|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_HallSensor_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Start_IT PROC
;;;342      */
;;;343    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;344    {
000002  4604              MOV      r4,r0
;;;345      /* Check the parameters */
;;;346      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;347    
;;;348      /* Enable the capture compare Interrupts 1 event */
;;;349      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000004  6800              LDR      r0,[r0,#0]
000006  68c1              LDR      r1,[r0,#0xc]
000008  f0410102          ORR      r1,r1,#2
00000c  60c1              STR      r1,[r0,#0xc]
;;;350    
;;;351      /* Enable the Input Capture channel 1
;;;352        (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;353      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
00000e  2201              MOVS     r2,#1
000010  2100              MOVS     r1,#0
000012  6820              LDR      r0,[r4,#0]
000014  f7fffffe          BL       TIM_CCxChannelCmd
;;;354    
;;;355      /* Enable the Peripheral */
;;;356      __HAL_TIM_ENABLE(htim);
000018  6820              LDR      r0,[r4,#0]
00001a  6801              LDR      r1,[r0,#0]
00001c  f0410101          ORR      r1,r1,#1
000020  6001              STR      r1,[r0,#0]
;;;357    
;;;358      /* Return function status */
;;;359      return HAL_OK;
000022  2000              MOVS     r0,#0
;;;360    }
000024  bd10              POP      {r4,pc}
;;;361    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop PROC
;;;321      */
;;;322    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;323    {
000002  4604              MOV      r4,r0
;;;324      /* Check the parameters */
;;;325      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;326    
;;;327      /* Disable the Input Capture channel 1
;;;328        (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;329      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
000004  2200              MOVS     r2,#0
000006  6800              LDR      r0,[r0,#0]
000008  4611              MOV      r1,r2
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;330    
;;;331      /* Disable the Peripheral */
;;;332      __HAL_TIM_DISABLE(htim);
00000e  6820              LDR      r0,[r4,#0]
000010  6a01              LDR      r1,[r0,#0x20]
000012  f2411211          MOV      r2,#0x1111
000016  4211              TST      r1,r2
000018  d107              BNE      |L15.42|
00001a  6a01              LDR      r1,[r0,#0x20]
00001c  1092              ASRS     r2,r2,#2
00001e  4211              TST      r1,r2
000020  d103              BNE      |L15.42|
000022  6801              LDR      r1,[r0,#0]
000024  f0210101          BIC      r1,r1,#1
000028  6001              STR      r1,[r0,#0]
                  |L15.42|
;;;333    
;;;334      /* Return function status */
;;;335      return HAL_OK;
00002a  2000              MOVS     r0,#0
;;;336    }
00002c  bd10              POP      {r4,pc}
;;;337    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop_DMA PROC
;;;439      */
;;;440    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;441    {
000002  4604              MOV      r4,r0
;;;442      /* Check the parameters */
;;;443      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;444    
;;;445      /* Disable the Input Capture channel 1
;;;446        (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;447      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
000004  2200              MOVS     r2,#0
000006  6800              LDR      r0,[r0,#0]
000008  4611              MOV      r1,r2
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;448    
;;;449    
;;;450      /* Disable the capture compare Interrupts 1 event */
;;;451      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
00000e  6820              LDR      r0,[r4,#0]
000010  68c1              LDR      r1,[r0,#0xc]
000012  f4217100          BIC      r1,r1,#0x200
000016  60c1              STR      r1,[r0,#0xc]
;;;452    
;;;453      /* Disable the Peripheral */
;;;454      __HAL_TIM_DISABLE(htim);
000018  6820              LDR      r0,[r4,#0]
00001a  6a01              LDR      r1,[r0,#0x20]
00001c  f2411211          MOV      r2,#0x1111
000020  4211              TST      r1,r2
000022  d107              BNE      |L16.52|
000024  6a01              LDR      r1,[r0,#0x20]
000026  1092              ASRS     r2,r2,#2
000028  4211              TST      r1,r2
00002a  d103              BNE      |L16.52|
00002c  6801              LDR      r1,[r0,#0]
00002e  f0210101          BIC      r1,r1,#1
000032  6001              STR      r1,[r0,#0]
                  |L16.52|
;;;455    
;;;456      /* Return function status */
;;;457      return HAL_OK;
000034  2000              MOVS     r0,#0
;;;458    }
000036  bd10              POP      {r4,pc}
;;;459    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop_IT PROC
;;;366      */
;;;367    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;368    {
000002  4604              MOV      r4,r0
;;;369      /* Check the parameters */
;;;370      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;371    
;;;372      /* Disable the Input Capture channel 1
;;;373        (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;374      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
000004  2200              MOVS     r2,#0
000006  6800              LDR      r0,[r0,#0]
000008  4611              MOV      r1,r2
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;375    
;;;376      /* Disable the capture compare Interrupts event */
;;;377      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
00000e  6820              LDR      r0,[r4,#0]
000010  68c1              LDR      r1,[r0,#0xc]
000012  f0210102          BIC      r1,r1,#2
000016  60c1              STR      r1,[r0,#0xc]
;;;378    
;;;379      /* Disable the Peripheral */
;;;380      __HAL_TIM_DISABLE(htim);
000018  6820              LDR      r0,[r4,#0]
00001a  6a01              LDR      r1,[r0,#0x20]
00001c  f2411211          MOV      r2,#0x1111
000020  4211              TST      r1,r2
000022  d107              BNE      |L17.52|
000024  6a01              LDR      r1,[r0,#0x20]
000026  1092              ASRS     r2,r2,#2
000028  4211              TST      r1,r2
00002a  d103              BNE      |L17.52|
00002c  6801              LDR      r1,[r0,#0]
00002e  f0210101          BIC      r1,r1,#1
000032  6001              STR      r1,[r0,#0]
                  |L17.52|
;;;381    
;;;382      /* Return function status */
;;;383      return HAL_OK;
000034  2000              MOVS     r0,#0
;;;384    }
000036  bd10              POP      {r4,pc}
;;;385    
                          ENDP


                          AREA ||i.HAL_TIMEx_MasterConfigSynchronization||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_MasterConfigSynchronization PROC
;;;1676     */
;;;1677   HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
000000  6bc2              LDR      r2,[r0,#0x3c]
;;;1678   {
;;;1679     /* Check the parameters */
;;;1680     assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
;;;1681     assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
;;;1682     assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
;;;1683   
;;;1684     __HAL_LOCK(htim);
000002  2a01              CMP      r2,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;1685   
;;;1686     htim->State = HAL_TIM_STATE_BUSY;
;;;1687   
;;;1688     /* Reset the MMS Bits */
;;;1689     htim->Instance->CR2 &= ~TIM_CR2_MMS;
;;;1690     /* Select the TRGO source */
;;;1691     htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
;;;1692   
;;;1693     /* Reset the MSM Bit */
;;;1694     htim->Instance->SMCR &= ~TIM_SMCR_MSM;
;;;1695     /* Set or Reset the MSM Bit */
;;;1696     htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
;;;1697   
;;;1698     htim->State = HAL_TIM_STATE_READY;
;;;1699   
;;;1700     __HAL_UNLOCK(htim);
;;;1701   
;;;1702     return HAL_OK;
;;;1703   }
000008  4770              BXEQ     lr
00000a  b410              PUSH     {r4}                  ;1678
00000c  2201              MOVS     r2,#1                 ;1684
00000e  2302              MOVS     r3,#2                 ;1686
000010  6403              STR      r3,[r0,#0x40]         ;1686
000012  63c2              STR      r2,[r0,#0x3c]         ;1686
000014  6803              LDR      r3,[r0,#0]            ;1689
000016  f8d3c004          LDR      r12,[r3,#4]           ;1689
00001a  f02c0c70          BIC      r12,r12,#0x70         ;1689
00001e  f8c3c004          STR      r12,[r3,#4]           ;1689
000022  6803              LDR      r3,[r0,#0]            ;1691
000024  f8d3c004          LDR      r12,[r3,#4]           ;1691
000028  680c              LDR      r4,[r1,#0]            ;1691
00002a  ea4c0c04          ORR      r12,r12,r4            ;1691
00002e  f8c3c004          STR      r12,[r3,#4]           ;1691
000032  6803              LDR      r3,[r0,#0]            ;1694
000034  f8d3c008          LDR      r12,[r3,#8]           ;1694
000038  f02c0c80          BIC      r12,r12,#0x80         ;1694
00003c  f8c3c008          STR      r12,[r3,#8]           ;1694
000040  6803              LDR      r3,[r0,#0]            ;1696
000042  f8d3c008          LDR      r12,[r3,#8]           ;1696
000046  6849              LDR      r1,[r1,#4]            ;1696
000048  ea4c0101          ORR      r1,r12,r1             ;1696
00004c  6099              STR      r1,[r3,#8]            ;1696
00004e  6402              STR      r2,[r0,#0x40]         ;1698
000050  2100              MOVS     r1,#0                 ;1700
000052  63c1              STR      r1,[r0,#0x3c]         ;1702
000054  bc10              POP      {r4}
000056  4608              MOV      r0,r1                 ;1702
000058  4770              BX       lr
;;;1704   
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Start PROC
;;;499      */
;;;500    HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
000002  2304              MOVS     r3,#4
000004  fa03f101          LSL      r1,r3,r1
000008  6a13              LDR      r3,[r2,#0x20]
00000a  438b              BICS     r3,r3,r1
00000c  6213              STR      r3,[r2,#0x20]
00000e  6a13              LDR      r3,[r2,#0x20]
000010  4319              ORRS     r1,r1,r3
000012  6211              STR      r1,[r2,#0x20]
;;;501    {
;;;502      /* Check the parameters */
;;;503      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;504    
;;;505      /* Enable the Capture compare channel N */
;;;506      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;507    
;;;508      /* Enable the Main Ouput */
;;;509      __HAL_TIM_MOE_ENABLE(htim);
000014  6801              LDR      r1,[r0,#0]
000016  6c4a              LDR      r2,[r1,#0x44]
000018  f4424200          ORR      r2,r2,#0x8000
00001c  644a              STR      r2,[r1,#0x44]
;;;510    
;;;511      /* Enable the Peripheral */
;;;512      __HAL_TIM_ENABLE(htim);
00001e  6800              LDR      r0,[r0,#0]
000020  6801              LDR      r1,[r0,#0]
000022  f0410101          ORR      r1,r1,#1
000026  6001              STR      r1,[r0,#0]
;;;513    
;;;514      /* Return function status */
;;;515      return HAL_OK;
000028  2000              MOVS     r0,#0
;;;516    }
00002a  4770              BX       lr
;;;517    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OCN_Start_DMA PROC
;;;701      */
;;;702    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;703    {
000002  4604              MOV      r4,r0
;;;704      /* Check the parameters */
;;;705      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;706    
;;;707      if((htim->State == HAL_TIM_STATE_BUSY))
000004  6c00              LDR      r0,[r0,#0x40]
000006  4694              MOV      r12,r2                ;703
000008  460d              MOV      r5,r1                 ;703
00000a  2802              CMP      r0,#2
;;;708      {
;;;709         return HAL_BUSY;
;;;710      }
;;;711      else if((htim->State == HAL_TIM_STATE_READY))
;;;712      {
;;;713        if(((uint32_t)pData == 0U) && (Length > 0U))
;;;714        {
;;;715          return HAL_ERROR;
;;;716        }
;;;717        else
;;;718        {
;;;719          htim->State = HAL_TIM_STATE_BUSY;
;;;720        }
;;;721      }
;;;722      switch (Channel)
;;;723      {
;;;724        case TIM_CHANNEL_1:
;;;725        {
;;;726          /* Set the DMA Period elapsed callback */
;;;727          htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;728    
;;;729          /* Set the DMA error callback */
;;;730          htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;731    
;;;732          /* Enable the DMA channel */
;;;733          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;734    
;;;735          /* Enable the TIM Output Compare DMA request */
;;;736          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;737        }
;;;738        break;
;;;739    
;;;740        case TIM_CHANNEL_2:
;;;741        {
;;;742          /* Set the DMA Period elapsed callback */
;;;743          htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;744    
;;;745          /* Set the DMA error callback */
;;;746          htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;747    
;;;748          /* Enable the DMA channel */
;;;749          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;750    
;;;751          /* Enable the TIM Output Compare DMA request */
;;;752          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;753        }
;;;754        break;
;;;755    
;;;756        case TIM_CHANNEL_3:
;;;757    {
;;;758          /* Set the DMA Period elapsed callback */
;;;759          htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;760    
;;;761          /* Set the DMA error callback */
;;;762          htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;763    
;;;764          /* Enable the DMA channel */
;;;765          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;766    
;;;767          /* Enable the TIM Output Compare DMA request */
;;;768          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;769        }
;;;770        break;
;;;771    
;;;772        case TIM_CHANNEL_4:
;;;773        {
;;;774         /* Set the DMA Period elapsed callback */
;;;775          htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;776    
;;;777          /* Set the DMA error callback */
;;;778          htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;779    
;;;780          /* Enable the DMA channel */
;;;781          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;782    
;;;783          /* Enable the TIM Output Compare DMA request */
;;;784          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;785        }
;;;786        break;
;;;787    
;;;788        default:
;;;789        break;
;;;790      }
;;;791    
;;;792      /* Enable the Capture compare channel N */
;;;793      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;794    
;;;795      /* Enable the Main Ouput */
;;;796      __HAL_TIM_MOE_ENABLE(htim);
;;;797    
;;;798      /* Enable the Peripheral */
;;;799      __HAL_TIM_ENABLE(htim);
;;;800    
;;;801      /* Return function status */
;;;802      return HAL_OK;
;;;803    }
00000c  bf08              IT       EQ
00000e  bd70              POPEQ    {r4-r6,pc}
000010  6c20              LDR      r0,[r4,#0x40]         ;711
000012  2801              CMP      r0,#1                 ;711
000014  d108              BNE      |L20.40|
000016  f1bc0f00          CMP      r12,#0                ;713
00001a  d103              BNE      |L20.36|
00001c  2b00              CMP      r3,#0                 ;713
00001e  bf1c              ITT      NE                    ;715
000020  2001              MOVNE    r0,#1                 ;715
000022  bd70              POPNE    {r4-r6,pc}
                  |L20.36|
000024  2002              MOVS     r0,#2                 ;719
000026  6420              STR      r0,[r4,#0x40]         ;719
                  |L20.40|
000028  482f              LDR      r0,|L20.232|
00002a  4930              LDR      r1,|L20.236|
00002c  b135              CBZ      r5,|L20.60|
00002e  2d04              CMP      r5,#4                 ;722
000030  d014              BEQ      |L20.92|
000032  2d08              CMP      r5,#8                 ;722
000034  d022              BEQ      |L20.124|
000036  2d0c              CMP      r5,#0xc               ;722
000038  d030              BEQ      |L20.156|
00003a  e03f              B        |L20.188|
                  |L20.60|
00003c  6a62              LDR      r2,[r4,#0x24]         ;727
00003e  62d0              STR      r0,[r2,#0x2c]         ;730
000040  6a60              LDR      r0,[r4,#0x24]         ;730
000042  6341              STR      r1,[r0,#0x34]         ;733
000044  6820              LDR      r0,[r4,#0]            ;733
000046  4661              MOV      r1,r12                ;733
000048  f1000234          ADD      r2,r0,#0x34           ;733
00004c  6a60              LDR      r0,[r4,#0x24]         ;733
00004e  f7fffffe          BL       HAL_DMA_Start_IT
000052  6820              LDR      r0,[r4,#0]            ;736
000054  68c1              LDR      r1,[r0,#0xc]          ;736
000056  f4417100          ORR      r1,r1,#0x200          ;736
00005a  e02e              B        |L20.186|
                  |L20.92|
00005c  6aa2              LDR      r2,[r4,#0x28]         ;743
00005e  62d0              STR      r0,[r2,#0x2c]         ;746
000060  6aa0              LDR      r0,[r4,#0x28]         ;746
000062  6341              STR      r1,[r0,#0x34]         ;749
000064  6820              LDR      r0,[r4,#0]            ;749
000066  4661              MOV      r1,r12                ;749
000068  f1000238          ADD      r2,r0,#0x38           ;749
00006c  6aa0              LDR      r0,[r4,#0x28]         ;749
00006e  f7fffffe          BL       HAL_DMA_Start_IT
000072  6820              LDR      r0,[r4,#0]            ;752
000074  68c1              LDR      r1,[r0,#0xc]          ;752
000076  f4416180          ORR      r1,r1,#0x400          ;752
00007a  e01e              B        |L20.186|
                  |L20.124|
00007c  6ae2              LDR      r2,[r4,#0x2c]         ;759
00007e  62d0              STR      r0,[r2,#0x2c]         ;762
000080  6ae0              LDR      r0,[r4,#0x2c]         ;762
000082  6341              STR      r1,[r0,#0x34]         ;765
000084  6820              LDR      r0,[r4,#0]            ;765
000086  4661              MOV      r1,r12                ;765
000088  f100023c          ADD      r2,r0,#0x3c           ;765
00008c  6ae0              LDR      r0,[r4,#0x2c]         ;765
00008e  f7fffffe          BL       HAL_DMA_Start_IT
000092  6820              LDR      r0,[r4,#0]            ;768
000094  68c1              LDR      r1,[r0,#0xc]          ;768
000096  f4416100          ORR      r1,r1,#0x800          ;768
00009a  e00e              B        |L20.186|
                  |L20.156|
00009c  6b22              LDR      r2,[r4,#0x30]         ;775
00009e  62d0              STR      r0,[r2,#0x2c]         ;778
0000a0  6b20              LDR      r0,[r4,#0x30]         ;778
0000a2  6341              STR      r1,[r0,#0x34]         ;781
0000a4  6820              LDR      r0,[r4,#0]            ;781
0000a6  4661              MOV      r1,r12                ;781
0000a8  f1000240          ADD      r2,r0,#0x40           ;781
0000ac  6b20              LDR      r0,[r4,#0x30]         ;781
0000ae  f7fffffe          BL       HAL_DMA_Start_IT
0000b2  6820              LDR      r0,[r4,#0]            ;784
0000b4  68c1              LDR      r1,[r0,#0xc]          ;784
0000b6  f4415180          ORR      r1,r1,#0x1000         ;784
                  |L20.186|
0000ba  60c1              STR      r1,[r0,#0xc]          ;768
                  |L20.188|
0000bc  6820              LDR      r0,[r4,#0]            ;768
0000be  2104              MOVS     r1,#4                 ;768
0000c0  40a9              LSLS     r1,r1,r5              ;768
0000c2  6a02              LDR      r2,[r0,#0x20]         ;768
0000c4  438a              BICS     r2,r2,r1              ;768
0000c6  6202              STR      r2,[r0,#0x20]         ;768
0000c8  6a02              LDR      r2,[r0,#0x20]         ;768
0000ca  4311              ORRS     r1,r1,r2              ;768
0000cc  6201              STR      r1,[r0,#0x20]         ;768
0000ce  6820              LDR      r0,[r4,#0]            ;796
0000d0  6c41              LDR      r1,[r0,#0x44]         ;796
0000d2  f4414100          ORR      r1,r1,#0x8000         ;796
0000d6  6441              STR      r1,[r0,#0x44]         ;796
0000d8  6820              LDR      r0,[r4,#0]            ;799
0000da  6801              LDR      r1,[r0,#0]            ;799
0000dc  f0410101          ORR      r1,r1,#1              ;799
0000e0  6001              STR      r1,[r0,#0]            ;799
0000e2  2000              MOVS     r0,#0                 ;802
0000e4  bd70              POP      {r4-r6,pc}
;;;804    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L20.232|
                          DCD      TIM_DMADelayPulseCplt
                  |L20.236|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_OCN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Start_IT PROC
;;;559      */
;;;560    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
;;;561    {
;;;562      /* Check the parameters */
;;;563      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;564    
;;;565      switch (Channel)
000002  2900              CMP      r1,#0
;;;566      {
;;;567        case TIM_CHANNEL_1:
;;;568        {
;;;569          /* Enable the TIM Output Compare interrupt */
;;;570          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000004  bf04              ITT      EQ
000006  68d3              LDREQ    r3,[r2,#0xc]
000008  f0430302          ORREQ    r3,r3,#2
00000c  d011              BEQ      |L21.50|
00000e  2904              CMP      r1,#4                 ;565
;;;571        }
;;;572        break;
;;;573    
;;;574        case TIM_CHANNEL_2:
;;;575        {
;;;576          /* Enable the TIM Output Compare interrupt */
;;;577          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000010  bf04              ITT      EQ
000012  68d3              LDREQ    r3,[r2,#0xc]
000014  f0430304          ORREQ    r3,r3,#4
000018  d00b              BEQ      |L21.50|
00001a  2908              CMP      r1,#8                 ;565
;;;578        }
;;;579        break;
;;;580    
;;;581        case TIM_CHANNEL_3:
;;;582        {
;;;583          /* Enable the TIM Output Compare interrupt */
;;;584          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
00001c  bf04              ITT      EQ
00001e  68d3              LDREQ    r3,[r2,#0xc]
000020  f0430308          ORREQ    r3,r3,#8
000024  d005              BEQ      |L21.50|
000026  290c              CMP      r1,#0xc               ;565
;;;585        }
;;;586        break;
;;;587    
;;;588        case TIM_CHANNEL_4:
;;;589        {
;;;590          /* Enable the TIM Output Compare interrupt */
;;;591          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000028  bf04              ITT      EQ
00002a  68d3              LDREQ    r3,[r2,#0xc]
00002c  f0430310          ORREQ    r3,r3,#0x10
000030  d100              BNE      |L21.52|
                  |L21.50|
000032  60d3              STR      r3,[r2,#0xc]          ;584
                  |L21.52|
;;;592        }
;;;593        break;
;;;594    
;;;595        default:
;;;596        break;
;;;597      }
;;;598    
;;;599      /* Enable the TIM Break interrupt */
;;;600      __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
000034  6802              LDR      r2,[r0,#0]
000036  68d3              LDR      r3,[r2,#0xc]
000038  f0430380          ORR      r3,r3,#0x80
00003c  60d3              STR      r3,[r2,#0xc]
00003e  6802              LDR      r2,[r0,#0]
000040  2304              MOVS     r3,#4
000042  fa03f101          LSL      r1,r3,r1
000046  6a13              LDR      r3,[r2,#0x20]
000048  438b              BICS     r3,r3,r1
00004a  6213              STR      r3,[r2,#0x20]
00004c  6a13              LDR      r3,[r2,#0x20]
00004e  4319              ORRS     r1,r1,r3
000050  6211              STR      r1,[r2,#0x20]
;;;601    
;;;602      /* Enable the Capture compare channel N */
;;;603      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;604    
;;;605      /* Enable the Main Ouput */
;;;606      __HAL_TIM_MOE_ENABLE(htim);
000052  6801              LDR      r1,[r0,#0]
000054  6c4a              LDR      r2,[r1,#0x44]
000056  f4424200          ORR      r2,r2,#0x8000
00005a  644a              STR      r2,[r1,#0x44]
;;;607    
;;;608      /* Enable the Peripheral */
;;;609      __HAL_TIM_ENABLE(htim);
00005c  6800              LDR      r0,[r0,#0]
00005e  6801              LDR      r1,[r0,#0]
000060  f0410101          ORR      r1,r1,#1
000064  6001              STR      r1,[r0,#0]
;;;610    
;;;611      /* Return function status */
;;;612      return HAL_OK;
000066  2000              MOVS     r0,#0
;;;613    }
000068  4770              BX       lr
;;;614    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop PROC
;;;529      */
;;;530    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b410              PUSH     {r4}
000002  6802              LDR      r2,[r0,#0]
000004  f04f0c04          MOV      r12,#4
;;;531    {
;;;532      /* Check the parameters */
;;;533      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;534    
;;;535      /* Disable the Capture compare channel N */
;;;536      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000008  2300              MOVS     r3,#0
00000a  6a14              LDR      r4,[r2,#0x20]
00000c  fa0cfc01          LSL      r12,r12,r1
000010  ea240c0c          BIC      r12,r4,r12
000014  f8c2c020          STR      r12,[r2,#0x20]
000018  f8d2c020          LDR      r12,[r2,#0x20]
00001c  fa03f101          LSL      r1,r3,r1
000020  ea4c0101          ORR      r1,r12,r1
000024  6211              STR      r1,[r2,#0x20]
;;;537    
;;;538      /* Disable the Main Ouput */
;;;539      __HAL_TIM_MOE_DISABLE(htim);
000026  6801              LDR      r1,[r0,#0]
000028  6a0b              LDR      r3,[r1,#0x20]
00002a  f2411211          MOV      r2,#0x1111
00002e  4213              TST      r3,r2
000030  f2404344          MOV      r3,#0x444
000034  bf04              ITT      EQ
000036  f8d1c020          LDREQ    r12,[r1,#0x20]
00003a  ea1c0f03          TSTEQ    r12,r3
00003e  d105              BNE      |L22.76|
000040  f8d1c044          LDR      r12,[r1,#0x44]
000044  f42c4c00          BIC      r12,r12,#0x8000
000048  f8c1c044          STR      r12,[r1,#0x44]
                  |L22.76|
;;;540    
;;;541      /* Disable the Peripheral */
;;;542      __HAL_TIM_DISABLE(htim);
00004c  6800              LDR      r0,[r0,#0]
00004e  6a01              LDR      r1,[r0,#0x20]
000050  4211              TST      r1,r2
000052  bf04              ITT      EQ
000054  6a01              LDREQ    r1,[r0,#0x20]
000056  4219              TSTEQ    r1,r3
000058  d103              BNE      |L22.98|
00005a  6801              LDR      r1,[r0,#0]
00005c  f0210101          BIC      r1,r1,#1
000060  6001              STR      r1,[r0,#0]
                  |L22.98|
;;;543    
;;;544      /* Return function status */
;;;545      return HAL_OK;
;;;546    }
000062  bc10              POP      {r4}
000064  2000              MOVS     r0,#0                 ;545
000066  4770              BX       lr
;;;547    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop_DMA PROC
;;;816      */
;;;817    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b410              PUSH     {r4}
;;;818    {
;;;819      /* Check the parameters */
;;;820      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;821    
;;;822      switch (Channel)
000002  6802              LDR      r2,[r0,#0]
000004  2900              CMP      r1,#0
;;;823      {
;;;824        case TIM_CHANNEL_1:
;;;825        {
;;;826          /* Disable the TIM Output Compare DMA request */
;;;827          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000006  bf04              ITT      EQ
000008  68d3              LDREQ    r3,[r2,#0xc]
00000a  f4237300          BICEQ    r3,r3,#0x200
00000e  d011              BEQ      |L23.52|
000010  2904              CMP      r1,#4                 ;822
;;;828        }
;;;829        break;
;;;830    
;;;831        case TIM_CHANNEL_2:
;;;832        {
;;;833          /* Disable the TIM Output Compare DMA request */
;;;834          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000012  bf04              ITT      EQ
000014  68d3              LDREQ    r3,[r2,#0xc]
000016  f4236380          BICEQ    r3,r3,#0x400
00001a  d00b              BEQ      |L23.52|
00001c  2908              CMP      r1,#8                 ;822
;;;835        }
;;;836        break;
;;;837    
;;;838        case TIM_CHANNEL_3:
;;;839        {
;;;840          /* Disable the TIM Output Compare DMA request */
;;;841          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
00001e  bf04              ITT      EQ
000020  68d3              LDREQ    r3,[r2,#0xc]
000022  f4236300          BICEQ    r3,r3,#0x800
000026  d005              BEQ      |L23.52|
000028  290c              CMP      r1,#0xc               ;822
;;;842        }
;;;843        break;
;;;844    
;;;845        case TIM_CHANNEL_4:
;;;846        {
;;;847          /* Disable the TIM Output Compare interrupt */
;;;848          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
00002a  bf04              ITT      EQ
00002c  68d3              LDREQ    r3,[r2,#0xc]
00002e  f4235380          BICEQ    r3,r3,#0x1000
000032  d100              BNE      |L23.54|
                  |L23.52|
000034  60d3              STR      r3,[r2,#0xc]          ;841
                  |L23.54|
000036  6802              LDR      r2,[r0,#0]            ;841
000038  f04f0c04          MOV      r12,#4                ;841
;;;849        }
;;;850        break;
;;;851    
;;;852        default:
;;;853        break;
;;;854      }
;;;855    
;;;856      /* Disable the Capture compare channel N */
;;;857      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
00003c  2300              MOVS     r3,#0
00003e  6a14              LDR      r4,[r2,#0x20]
000040  fa0cfc01          LSL      r12,r12,r1
000044  ea240c0c          BIC      r12,r4,r12
000048  f8c2c020          STR      r12,[r2,#0x20]
00004c  f8d2c020          LDR      r12,[r2,#0x20]
000050  fa03f101          LSL      r1,r3,r1
000054  ea4c0101          ORR      r1,r12,r1
000058  6211              STR      r1,[r2,#0x20]
;;;858    
;;;859      /* Disable the Main Ouput */
;;;860      __HAL_TIM_MOE_DISABLE(htim);
00005a  6801              LDR      r1,[r0,#0]
00005c  6a0b              LDR      r3,[r1,#0x20]
00005e  f2411211          MOV      r2,#0x1111
000062  4213              TST      r3,r2
000064  f2404344          MOV      r3,#0x444
000068  bf04              ITT      EQ
00006a  f8d1c020          LDREQ    r12,[r1,#0x20]
00006e  ea1c0f03          TSTEQ    r12,r3
000072  d105              BNE      |L23.128|
000074  f8d1c044          LDR      r12,[r1,#0x44]
000078  f42c4c00          BIC      r12,r12,#0x8000
00007c  f8c1c044          STR      r12,[r1,#0x44]
                  |L23.128|
;;;861    
;;;862      /* Disable the Peripheral */
;;;863      __HAL_TIM_DISABLE(htim);
000080  6801              LDR      r1,[r0,#0]
000082  f8d1c020          LDR      r12,[r1,#0x20]
000086  ea1c0f02          TST      r12,r2
00008a  bf04              ITT      EQ
00008c  6a0a              LDREQ    r2,[r1,#0x20]
00008e  421a              TSTEQ    r2,r3
000090  d103              BNE      |L23.154|
000092  680a              LDR      r2,[r1,#0]
000094  f0220201          BIC      r2,r2,#1
000098  600a              STR      r2,[r1,#0]
                  |L23.154|
;;;864    
;;;865      /* Change the htim state */
;;;866      htim->State = HAL_TIM_STATE_READY;
00009a  2101              MOVS     r1,#1
00009c  6401              STR      r1,[r0,#0x40]
;;;867    
;;;868      /* Return function status */
;;;869      return HAL_OK;
;;;870    }
00009e  bc10              POP      {r4}
0000a0  2000              MOVS     r0,#0                 ;869
0000a2  4770              BX       lr
;;;871    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop_IT PROC
;;;626      */
;;;627    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b410              PUSH     {r4}
;;;628    {
;;;629      uint32_t tmpccer = 0U;
;;;630    
;;;631      /* Check the parameters */
;;;632      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;633    
;;;634      switch (Channel)
000002  6802              LDR      r2,[r0,#0]
000004  2900              CMP      r1,#0
;;;635      {
;;;636        case TIM_CHANNEL_1:
;;;637        {
;;;638          /* Disable the TIM Output Compare interrupt */
;;;639          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000006  bf04              ITT      EQ
000008  68d3              LDREQ    r3,[r2,#0xc]
00000a  f0230302          BICEQ    r3,r3,#2
00000e  d011              BEQ      |L24.52|
000010  2904              CMP      r1,#4                 ;634
;;;640        }
;;;641        break;
;;;642    
;;;643        case TIM_CHANNEL_2:
;;;644        {
;;;645          /* Disable the TIM Output Compare interrupt */
;;;646          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000012  bf04              ITT      EQ
000014  68d3              LDREQ    r3,[r2,#0xc]
000016  f0230304          BICEQ    r3,r3,#4
00001a  d00b              BEQ      |L24.52|
00001c  2908              CMP      r1,#8                 ;634
;;;647        }
;;;648        break;
;;;649    
;;;650        case TIM_CHANNEL_3:
;;;651        {
;;;652          /* Disable the TIM Output Compare interrupt */
;;;653          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
00001e  bf04              ITT      EQ
000020  68d3              LDREQ    r3,[r2,#0xc]
000022  f0230308          BICEQ    r3,r3,#8
000026  d005              BEQ      |L24.52|
000028  290c              CMP      r1,#0xc               ;634
;;;654        }
;;;655        break;
;;;656    
;;;657        case TIM_CHANNEL_4:
;;;658        {
;;;659          /* Disable the TIM Output Compare interrupt */
;;;660          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
00002a  bf04              ITT      EQ
00002c  68d3              LDREQ    r3,[r2,#0xc]
00002e  f0230310          BICEQ    r3,r3,#0x10
000032  d100              BNE      |L24.54|
                  |L24.52|
000034  60d3              STR      r3,[r2,#0xc]          ;653
                  |L24.54|
000036  6802              LDR      r2,[r0,#0]            ;653
000038  f04f0c04          MOV      r12,#4                ;653
;;;661        }
;;;662        break;
;;;663    
;;;664        default:
;;;665        break;
;;;666      }
;;;667    
;;;668      /* Disable the Capture compare channel N */
;;;669      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
00003c  2300              MOVS     r3,#0
00003e  6a14              LDR      r4,[r2,#0x20]
000040  fa0cfc01          LSL      r12,r12,r1
000044  ea240c0c          BIC      r12,r4,r12
000048  f8c2c020          STR      r12,[r2,#0x20]
00004c  f8d2c020          LDR      r12,[r2,#0x20]
000050  fa03f101          LSL      r1,r3,r1
000054  ea4c0101          ORR      r1,r12,r1
000058  6211              STR      r1,[r2,#0x20]
;;;670    
;;;671      /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;672      tmpccer = htim->Instance->CCER;
00005a  6801              LDR      r1,[r0,#0]
00005c  6a0b              LDR      r3,[r1,#0x20]
;;;673      if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
00005e  f2404244          MOV      r2,#0x444
000062  4213              TST      r3,r2
000064  d103              BNE      |L24.110|
;;;674      {
;;;675        __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
000066  68cb              LDR      r3,[r1,#0xc]
000068  f0230380          BIC      r3,r3,#0x80
00006c  60cb              STR      r3,[r1,#0xc]
                  |L24.110|
;;;676      }
;;;677    
;;;678      /* Disable the Main Ouput */
;;;679      __HAL_TIM_MOE_DISABLE(htim);
00006e  6801              LDR      r1,[r0,#0]
000070  f8d1c020          LDR      r12,[r1,#0x20]
000074  f2411311          MOV      r3,#0x1111
000078  ea1c0f03          TST      r12,r3
00007c  bf04              ITT      EQ
00007e  f8d1c020          LDREQ    r12,[r1,#0x20]
000082  ea1c0f02          TSTEQ    r12,r2
000086  d105              BNE      |L24.148|
000088  f8d1c044          LDR      r12,[r1,#0x44]
00008c  f42c4c00          BIC      r12,r12,#0x8000
000090  f8c1c044          STR      r12,[r1,#0x44]
                  |L24.148|
;;;680    
;;;681      /* Disable the Peripheral */
;;;682      __HAL_TIM_DISABLE(htim);
000094  6800              LDR      r0,[r0,#0]
000096  6a01              LDR      r1,[r0,#0x20]
000098  4219              TST      r1,r3
00009a  bf04              ITT      EQ
00009c  6a01              LDREQ    r1,[r0,#0x20]
00009e  4211              TSTEQ    r1,r2
0000a0  d103              BNE      |L24.170|
0000a2  6801              LDR      r1,[r0,#0]
0000a4  f0210101          BIC      r1,r1,#1
0000a8  6001              STR      r1,[r0,#0]
                  |L24.170|
;;;683    
;;;684      /* Return function status */
;;;685      return HAL_OK;
;;;686    }
0000aa  bc10              POP      {r4}
0000ac  2000              MOVS     r0,#0                 ;685
0000ae  4770              BX       lr
;;;687    
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start PROC
;;;1319     */
;;;1320   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  6802              LDR      r2,[r0,#0]
000002  2304              MOVS     r3,#4
000004  fa03f101          LSL      r1,r3,r1
000008  6a13              LDR      r3,[r2,#0x20]
00000a  438b              BICS     r3,r3,r1
00000c  6213              STR      r3,[r2,#0x20]
00000e  6a13              LDR      r3,[r2,#0x20]
000010  4319              ORRS     r1,r1,r3
000012  6211              STR      r1,[r2,#0x20]
;;;1321     {
;;;1322     /* Check the parameters */
;;;1323     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));
;;;1324   
;;;1325     /* Enable the complementary One Pulse output */
;;;1326     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
;;;1327   
;;;1328     /* Enable the Main Ouput */
;;;1329     __HAL_TIM_MOE_ENABLE(htim);
000014  6800              LDR      r0,[r0,#0]
000016  6c41              LDR      r1,[r0,#0x44]
000018  f4414100          ORR      r1,r1,#0x8000
00001c  6441              STR      r1,[r0,#0x44]
;;;1330   
;;;1331     /* Return function status */
;;;1332     return HAL_OK;
00001e  2000              MOVS     r0,#0
;;;1333   }
000020  4770              BX       lr
;;;1334   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start_IT PROC
;;;1373     */
;;;1374   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  6802              LDR      r2,[r0,#0]
;;;1375   {
;;;1376     /* Check the parameters */
;;;1377     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));
;;;1378   
;;;1379     /* Enable the TIM Capture/Compare 1 interrupt */
;;;1380     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000002  68d3              LDR      r3,[r2,#0xc]
000004  f0430302          ORR      r3,r3,#2
000008  60d3              STR      r3,[r2,#0xc]
;;;1381   
;;;1382     /* Enable the TIM Capture/Compare 2 interrupt */
;;;1383     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
00000a  6802              LDR      r2,[r0,#0]
00000c  68d3              LDR      r3,[r2,#0xc]
00000e  f0430304          ORR      r3,r3,#4
000012  60d3              STR      r3,[r2,#0xc]
000014  6802              LDR      r2,[r0,#0]
000016  2304              MOVS     r3,#4
000018  fa03f101          LSL      r1,r3,r1
00001c  6a13              LDR      r3,[r2,#0x20]
00001e  438b              BICS     r3,r3,r1
000020  6213              STR      r3,[r2,#0x20]
000022  6a13              LDR      r3,[r2,#0x20]
000024  4319              ORRS     r1,r1,r3
000026  6211              STR      r1,[r2,#0x20]
;;;1384   
;;;1385     /* Enable the complementary One Pulse output */
;;;1386     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
;;;1387   
;;;1388     /* Enable the Main Ouput */
;;;1389     __HAL_TIM_MOE_ENABLE(htim);
000028  6800              LDR      r0,[r0,#0]
00002a  6c41              LDR      r1,[r0,#0x44]
00002c  f4414100          ORR      r1,r1,#0x8000
000030  6441              STR      r1,[r0,#0x44]
;;;1390   
;;;1391     /* Return function status */
;;;1392     return HAL_OK;
000032  2000              MOVS     r0,#0
;;;1393     }
000034  4770              BX       lr
;;;1394   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Stop PROC
;;;1344     */
;;;1345   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b410              PUSH     {r4}
000002  6802              LDR      r2,[r0,#0]
000004  f04f0c04          MOV      r12,#4
;;;1346   {
;;;1347   
;;;1348     /* Check the parameters */
;;;1349     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));
;;;1350   
;;;1351     /* Disable the complementary One Pulse output */
;;;1352     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
000008  2300              MOVS     r3,#0
00000a  6a14              LDR      r4,[r2,#0x20]
00000c  fa0cfc01          LSL      r12,r12,r1
000010  ea240c0c          BIC      r12,r4,r12
000014  f8c2c020          STR      r12,[r2,#0x20]
000018  f8d2c020          LDR      r12,[r2,#0x20]
00001c  fa03f101          LSL      r1,r3,r1
000020  ea4c0101          ORR      r1,r12,r1
000024  6211              STR      r1,[r2,#0x20]
;;;1353   
;;;1354     /* Disable the Main Ouput */
;;;1355     __HAL_TIM_MOE_DISABLE(htim);
000026  6801              LDR      r1,[r0,#0]
000028  6a0b              LDR      r3,[r1,#0x20]
00002a  f2411211          MOV      r2,#0x1111
00002e  4213              TST      r3,r2
000030  f2404344          MOV      r3,#0x444
000034  bf04              ITT      EQ
000036  f8d1c020          LDREQ    r12,[r1,#0x20]
00003a  ea1c0f03          TSTEQ    r12,r3
00003e  d105              BNE      |L27.76|
000040  f8d1c044          LDR      r12,[r1,#0x44]
000044  f42c4c00          BIC      r12,r12,#0x8000
000048  f8c1c044          STR      r12,[r1,#0x44]
                  |L27.76|
;;;1356   
;;;1357     /* Disable the Peripheral */
;;;1358     __HAL_TIM_DISABLE(htim);
00004c  6800              LDR      r0,[r0,#0]
00004e  6a01              LDR      r1,[r0,#0x20]
000050  4211              TST      r1,r2
000052  bf04              ITT      EQ
000054  6a01              LDREQ    r1,[r0,#0x20]
000056  4219              TSTEQ    r1,r3
000058  d103              BNE      |L27.98|
00005a  6801              LDR      r1,[r0,#0]
00005c  f0210101          BIC      r1,r1,#1
000060  6001              STR      r1,[r0,#0]
                  |L27.98|
;;;1359   
;;;1360     /* Return function status */
;;;1361     return HAL_OK;
;;;1362   }
000062  bc10              POP      {r4}
000064  2000              MOVS     r0,#0                 ;1361
000066  4770              BX       lr
;;;1363   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Stop_IT PROC
;;;1404     */
;;;1405   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b410              PUSH     {r4}
;;;1406   {
;;;1407     /* Check the parameters */
;;;1408     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));
;;;1409   
;;;1410     /* Disable the TIM Capture/Compare 1 interrupt */
;;;1411     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000002  6802              LDR      r2,[r0,#0]
000004  68d3              LDR      r3,[r2,#0xc]
000006  f0230302          BIC      r3,r3,#2
00000a  60d3              STR      r3,[r2,#0xc]
;;;1412   
;;;1413     /* Disable the TIM Capture/Compare 2 interrupt */
;;;1414     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
00000c  6802              LDR      r2,[r0,#0]
00000e  68d3              LDR      r3,[r2,#0xc]
000010  f0230304          BIC      r3,r3,#4
000014  60d3              STR      r3,[r2,#0xc]
000016  6802              LDR      r2,[r0,#0]
000018  f04f0c04          MOV      r12,#4
;;;1415   
;;;1416     /* Disable the complementary One Pulse output */
;;;1417     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
00001c  2300              MOVS     r3,#0
00001e  6a14              LDR      r4,[r2,#0x20]
000020  fa0cfc01          LSL      r12,r12,r1
000024  ea240c0c          BIC      r12,r4,r12
000028  f8c2c020          STR      r12,[r2,#0x20]
00002c  f8d2c020          LDR      r12,[r2,#0x20]
000030  fa03f101          LSL      r1,r3,r1
000034  ea4c0101          ORR      r1,r12,r1
000038  6211              STR      r1,[r2,#0x20]
;;;1418   
;;;1419     /* Disable the Main Ouput */
;;;1420     __HAL_TIM_MOE_DISABLE(htim);
00003a  6801              LDR      r1,[r0,#0]
00003c  6a0b              LDR      r3,[r1,#0x20]
00003e  f2411211          MOV      r2,#0x1111
000042  4213              TST      r3,r2
000044  f2404344          MOV      r3,#0x444
000048  bf04              ITT      EQ
00004a  f8d1c020          LDREQ    r12,[r1,#0x20]
00004e  ea1c0f03          TSTEQ    r12,r3
000052  d105              BNE      |L28.96|
000054  f8d1c044          LDR      r12,[r1,#0x44]
000058  f42c4c00          BIC      r12,r12,#0x8000
00005c  f8c1c044          STR      r12,[r1,#0x44]
                  |L28.96|
;;;1421   
;;;1422     /* Disable the Peripheral */
;;;1423      __HAL_TIM_DISABLE(htim);
000060  6800              LDR      r0,[r0,#0]
000062  6a01              LDR      r1,[r0,#0x20]
000064  4211              TST      r1,r2
000066  bf04              ITT      EQ
000068  6a01              LDREQ    r1,[r0,#0x20]
00006a  4219              TSTEQ    r1,r3
00006c  d103              BNE      |L28.118|
00006e  6801              LDR      r1,[r0,#0]
000070  f0210101          BIC      r1,r1,#1
000074  6001              STR      r1,[r0,#0]
                  |L28.118|
;;;1424   
;;;1425     /* Return function status */
;;;1426     return HAL_OK;
;;;1427   }
000076  bc10              POP      {r4}
000078  2000              MOVS     r0,#0                 ;1426
00007a  4770              BX       lr
;;;1428   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Start PROC
;;;916      */
;;;917    HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
000002  2304              MOVS     r3,#4
000004  fa03f101          LSL      r1,r3,r1
000008  6a13              LDR      r3,[r2,#0x20]
00000a  438b              BICS     r3,r3,r1
00000c  6213              STR      r3,[r2,#0x20]
00000e  6a13              LDR      r3,[r2,#0x20]
000010  4319              ORRS     r1,r1,r3
000012  6211              STR      r1,[r2,#0x20]
;;;918    {
;;;919      /* Check the parameters */
;;;920      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;921    
;;;922      /* Enable the complementary PWM output  */
;;;923      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;924    
;;;925      /* Enable the Main Ouput */
;;;926      __HAL_TIM_MOE_ENABLE(htim);
000014  6801              LDR      r1,[r0,#0]
000016  6c4a              LDR      r2,[r1,#0x44]
000018  f4424200          ORR      r2,r2,#0x8000
00001c  644a              STR      r2,[r1,#0x44]
;;;927    
;;;928      /* Enable the Peripheral */
;;;929      __HAL_TIM_ENABLE(htim);
00001e  6800              LDR      r0,[r0,#0]
000020  6801              LDR      r1,[r0,#0]
000022  f0410101          ORR      r1,r1,#1
000026  6001              STR      r1,[r0,#0]
;;;930    
;;;931      /* Return function status */
;;;932      return HAL_OK;
000028  2000              MOVS     r0,#0
;;;933    }
00002a  4770              BX       lr
;;;934    
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_PWMN_Start_DMA PROC
;;;1117     */
;;;1118   HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;1119   {
000002  4604              MOV      r4,r0
;;;1120     /* Check the parameters */
;;;1121     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;1122   
;;;1123     if((htim->State == HAL_TIM_STATE_BUSY))
000004  6c00              LDR      r0,[r0,#0x40]
000006  4694              MOV      r12,r2                ;1119
000008  460d              MOV      r5,r1                 ;1119
00000a  2802              CMP      r0,#2
;;;1124     {
;;;1125        return HAL_BUSY;
;;;1126     }
;;;1127     else if((htim->State == HAL_TIM_STATE_READY))
;;;1128     {
;;;1129       if(((uint32_t)pData == 0U) && (Length > 0U))
;;;1130       {
;;;1131         return HAL_ERROR;
;;;1132       }
;;;1133       else
;;;1134       {
;;;1135         htim->State = HAL_TIM_STATE_BUSY;
;;;1136       }
;;;1137     }
;;;1138     switch (Channel)
;;;1139     {
;;;1140       case TIM_CHANNEL_1:
;;;1141       {
;;;1142         /* Set the DMA Period elapsed callback */
;;;1143         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1144   
;;;1145         /* Set the DMA error callback */
;;;1146         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;1147   
;;;1148         /* Enable the DMA channel */
;;;1149         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;1150   
;;;1151         /* Enable the TIM Capture/Compare 1 DMA request */
;;;1152         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;1153       }
;;;1154       break;
;;;1155   
;;;1156       case TIM_CHANNEL_2:
;;;1157       {
;;;1158         /* Set the DMA Period elapsed callback */
;;;1159         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1160   
;;;1161         /* Set the DMA error callback */
;;;1162         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;1163   
;;;1164         /* Enable the DMA channel */
;;;1165         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;1166   
;;;1167         /* Enable the TIM Capture/Compare 2 DMA request */
;;;1168         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;1169       }
;;;1170       break;
;;;1171   
;;;1172       case TIM_CHANNEL_3:
;;;1173       {
;;;1174         /* Set the DMA Period elapsed callback */
;;;1175         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1176   
;;;1177         /* Set the DMA error callback */
;;;1178         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;1179   
;;;1180         /* Enable the DMA channel */
;;;1181         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;1182   
;;;1183         /* Enable the TIM Capture/Compare 3 DMA request */
;;;1184         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;1185       }
;;;1186       break;
;;;1187   
;;;1188       case TIM_CHANNEL_4:
;;;1189       {
;;;1190        /* Set the DMA Period elapsed callback */
;;;1191         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1192   
;;;1193         /* Set the DMA error callback */
;;;1194         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;1195   
;;;1196         /* Enable the DMA channel */
;;;1197         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;1198   
;;;1199         /* Enable the TIM Capture/Compare 4 DMA request */
;;;1200         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;1201       }
;;;1202       break;
;;;1203   
;;;1204       default:
;;;1205       break;
;;;1206     }
;;;1207   
;;;1208     /* Enable the complementary PWM output  */
;;;1209        TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;1210   
;;;1211     /* Enable the Main Ouput */
;;;1212       __HAL_TIM_MOE_ENABLE(htim);
;;;1213   
;;;1214     /* Enable the Peripheral */
;;;1215     __HAL_TIM_ENABLE(htim);
;;;1216   
;;;1217     /* Return function status */
;;;1218     return HAL_OK;
;;;1219   }
00000c  bf08              IT       EQ
00000e  bd70              POPEQ    {r4-r6,pc}
000010  6c20              LDR      r0,[r4,#0x40]         ;1127
000012  2801              CMP      r0,#1                 ;1127
000014  d108              BNE      |L30.40|
000016  f1bc0f00          CMP      r12,#0                ;1129
00001a  d103              BNE      |L30.36|
00001c  2b00              CMP      r3,#0                 ;1129
00001e  bf1c              ITT      NE                    ;1131
000020  2001              MOVNE    r0,#1                 ;1131
000022  bd70              POPNE    {r4-r6,pc}
                  |L30.36|
000024  2002              MOVS     r0,#2                 ;1135
000026  6420              STR      r0,[r4,#0x40]         ;1135
                  |L30.40|
000028  482f              LDR      r0,|L30.232|
00002a  4930              LDR      r1,|L30.236|
00002c  b135              CBZ      r5,|L30.60|
00002e  2d04              CMP      r5,#4                 ;1138
000030  d014              BEQ      |L30.92|
000032  2d08              CMP      r5,#8                 ;1138
000034  d022              BEQ      |L30.124|
000036  2d0c              CMP      r5,#0xc               ;1138
000038  d030              BEQ      |L30.156|
00003a  e03f              B        |L30.188|
                  |L30.60|
00003c  6a62              LDR      r2,[r4,#0x24]         ;1143
00003e  62d0              STR      r0,[r2,#0x2c]         ;1146
000040  6a60              LDR      r0,[r4,#0x24]         ;1146
000042  6341              STR      r1,[r0,#0x34]         ;1149
000044  6820              LDR      r0,[r4,#0]            ;1149
000046  4661              MOV      r1,r12                ;1149
000048  f1000234          ADD      r2,r0,#0x34           ;1149
00004c  6a60              LDR      r0,[r4,#0x24]         ;1149
00004e  f7fffffe          BL       HAL_DMA_Start_IT
000052  6820              LDR      r0,[r4,#0]            ;1152
000054  68c1              LDR      r1,[r0,#0xc]          ;1152
000056  f4417100          ORR      r1,r1,#0x200          ;1152
00005a  e02e              B        |L30.186|
                  |L30.92|
00005c  6aa2              LDR      r2,[r4,#0x28]         ;1159
00005e  62d0              STR      r0,[r2,#0x2c]         ;1162
000060  6aa0              LDR      r0,[r4,#0x28]         ;1162
000062  6341              STR      r1,[r0,#0x34]         ;1165
000064  6820              LDR      r0,[r4,#0]            ;1165
000066  4661              MOV      r1,r12                ;1165
000068  f1000238          ADD      r2,r0,#0x38           ;1165
00006c  6aa0              LDR      r0,[r4,#0x28]         ;1165
00006e  f7fffffe          BL       HAL_DMA_Start_IT
000072  6820              LDR      r0,[r4,#0]            ;1168
000074  68c1              LDR      r1,[r0,#0xc]          ;1168
000076  f4416180          ORR      r1,r1,#0x400          ;1168
00007a  e01e              B        |L30.186|
                  |L30.124|
00007c  6ae2              LDR      r2,[r4,#0x2c]         ;1175
00007e  62d0              STR      r0,[r2,#0x2c]         ;1178
000080  6ae0              LDR      r0,[r4,#0x2c]         ;1178
000082  6341              STR      r1,[r0,#0x34]         ;1181
000084  6820              LDR      r0,[r4,#0]            ;1181
000086  4661              MOV      r1,r12                ;1181
000088  f100023c          ADD      r2,r0,#0x3c           ;1181
00008c  6ae0              LDR      r0,[r4,#0x2c]         ;1181
00008e  f7fffffe          BL       HAL_DMA_Start_IT
000092  6820              LDR      r0,[r4,#0]            ;1184
000094  68c1              LDR      r1,[r0,#0xc]          ;1184
000096  f4416100          ORR      r1,r1,#0x800          ;1184
00009a  e00e              B        |L30.186|
                  |L30.156|
00009c  6b22              LDR      r2,[r4,#0x30]         ;1191
00009e  62d0              STR      r0,[r2,#0x2c]         ;1194
0000a0  6b20              LDR      r0,[r4,#0x30]         ;1194
0000a2  6341              STR      r1,[r0,#0x34]         ;1197
0000a4  6820              LDR      r0,[r4,#0]            ;1197
0000a6  4661              MOV      r1,r12                ;1197
0000a8  f1000240          ADD      r2,r0,#0x40           ;1197
0000ac  6b20              LDR      r0,[r4,#0x30]         ;1197
0000ae  f7fffffe          BL       HAL_DMA_Start_IT
0000b2  6820              LDR      r0,[r4,#0]            ;1200
0000b4  68c1              LDR      r1,[r0,#0xc]          ;1200
0000b6  f4415180          ORR      r1,r1,#0x1000         ;1200
                  |L30.186|
0000ba  60c1              STR      r1,[r0,#0xc]          ;1184
                  |L30.188|
0000bc  6820              LDR      r0,[r4,#0]            ;1184
0000be  2104              MOVS     r1,#4                 ;1184
0000c0  40a9              LSLS     r1,r1,r5              ;1184
0000c2  6a02              LDR      r2,[r0,#0x20]         ;1184
0000c4  438a              BICS     r2,r2,r1              ;1184
0000c6  6202              STR      r2,[r0,#0x20]         ;1184
0000c8  6a02              LDR      r2,[r0,#0x20]         ;1184
0000ca  4311              ORRS     r1,r1,r2              ;1184
0000cc  6201              STR      r1,[r0,#0x20]         ;1184
0000ce  6820              LDR      r0,[r4,#0]            ;1212
0000d0  6c41              LDR      r1,[r0,#0x44]         ;1212
0000d2  f4414100          ORR      r1,r1,#0x8000         ;1212
0000d6  6441              STR      r1,[r0,#0x44]         ;1212
0000d8  6820              LDR      r0,[r4,#0]            ;1215
0000da  6801              LDR      r1,[r0,#0]            ;1215
0000dc  f0410101          ORR      r1,r1,#1              ;1215
0000e0  6001              STR      r1,[r0,#0]            ;1215
0000e2  2000              MOVS     r0,#0                 ;1218
0000e4  bd70              POP      {r4-r6,pc}
;;;1220   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L30.232|
                          DCD      TIM_DMADelayPulseCplt
                  |L30.236|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_PWMN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Start_IT PROC
;;;975      */
;;;976    HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
;;;977    {
;;;978      /* Check the parameters */
;;;979      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;980    
;;;981      switch (Channel)
000002  2900              CMP      r1,#0
;;;982      {
;;;983        case TIM_CHANNEL_1:
;;;984        {
;;;985          /* Enable the TIM Capture/Compare 1 interrupt */
;;;986          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000004  bf04              ITT      EQ
000006  68d3              LDREQ    r3,[r2,#0xc]
000008  f0430302          ORREQ    r3,r3,#2
00000c  d011              BEQ      |L31.50|
00000e  2904              CMP      r1,#4                 ;981
;;;987        }
;;;988        break;
;;;989    
;;;990        case TIM_CHANNEL_2:
;;;991        {
;;;992          /* Enable the TIM Capture/Compare 2 interrupt */
;;;993          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000010  bf04              ITT      EQ
000012  68d3              LDREQ    r3,[r2,#0xc]
000014  f0430304          ORREQ    r3,r3,#4
000018  d00b              BEQ      |L31.50|
00001a  2908              CMP      r1,#8                 ;981
;;;994        }
;;;995        break;
;;;996    
;;;997        case TIM_CHANNEL_3:
;;;998        {
;;;999          /* Enable the TIM Capture/Compare 3 interrupt */
;;;1000         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
00001c  bf04              ITT      EQ
00001e  68d3              LDREQ    r3,[r2,#0xc]
000020  f0430308          ORREQ    r3,r3,#8
000024  d005              BEQ      |L31.50|
000026  290c              CMP      r1,#0xc               ;981
;;;1001       }
;;;1002       break;
;;;1003   
;;;1004       case TIM_CHANNEL_4:
;;;1005       {
;;;1006         /* Enable the TIM Capture/Compare 4 interrupt */
;;;1007         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000028  bf04              ITT      EQ
00002a  68d3              LDREQ    r3,[r2,#0xc]
00002c  f0430310          ORREQ    r3,r3,#0x10
000030  d100              BNE      |L31.52|
                  |L31.50|
000032  60d3              STR      r3,[r2,#0xc]          ;1000
                  |L31.52|
;;;1008       }
;;;1009       break;
;;;1010   
;;;1011       default:
;;;1012       break;
;;;1013     }
;;;1014   
;;;1015     /* Enable the TIM Break interrupt */
;;;1016     __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
000034  6802              LDR      r2,[r0,#0]
000036  68d3              LDR      r3,[r2,#0xc]
000038  f0430380          ORR      r3,r3,#0x80
00003c  60d3              STR      r3,[r2,#0xc]
00003e  6802              LDR      r2,[r0,#0]
000040  2304              MOVS     r3,#4
000042  fa03f101          LSL      r1,r3,r1
000046  6a13              LDR      r3,[r2,#0x20]
000048  438b              BICS     r3,r3,r1
00004a  6213              STR      r3,[r2,#0x20]
00004c  6a13              LDR      r3,[r2,#0x20]
00004e  4319              ORRS     r1,r1,r3
000050  6211              STR      r1,[r2,#0x20]
;;;1017   
;;;1018     /* Enable the complementary PWM output  */
;;;1019     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;1020   
;;;1021     /* Enable the Main Ouput */
;;;1022     __HAL_TIM_MOE_ENABLE(htim);
000052  6801              LDR      r1,[r0,#0]
000054  6c4a              LDR      r2,[r1,#0x44]
000056  f4424200          ORR      r2,r2,#0x8000
00005a  644a              STR      r2,[r1,#0x44]
;;;1023   
;;;1024     /* Enable the Peripheral */
;;;1025     __HAL_TIM_ENABLE(htim);
00005c  6800              LDR      r0,[r0,#0]
00005e  6801              LDR      r1,[r0,#0]
000060  f0410101          ORR      r1,r1,#1
000064  6001              STR      r1,[r0,#0]
;;;1026   
;;;1027     /* Return function status */
;;;1028     return HAL_OK;
000066  2000              MOVS     r0,#0
;;;1029   }
000068  4770              BX       lr
;;;1030   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop PROC
;;;945      */
;;;946    HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b410              PUSH     {r4}
000002  6802              LDR      r2,[r0,#0]
000004  f04f0c04          MOV      r12,#4
;;;947    {
;;;948      /* Check the parameters */
;;;949      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;950    
;;;951      /* Disable the complementary PWM output  */
;;;952      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000008  2300              MOVS     r3,#0
00000a  6a14              LDR      r4,[r2,#0x20]
00000c  fa0cfc01          LSL      r12,r12,r1
000010  ea240c0c          BIC      r12,r4,r12
000014  f8c2c020          STR      r12,[r2,#0x20]
000018  f8d2c020          LDR      r12,[r2,#0x20]
00001c  fa03f101          LSL      r1,r3,r1
000020  ea4c0101          ORR      r1,r12,r1
000024  6211              STR      r1,[r2,#0x20]
;;;953    
;;;954      /* Disable the Main Ouput */
;;;955      __HAL_TIM_MOE_DISABLE(htim);
000026  6801              LDR      r1,[r0,#0]
000028  6a0b              LDR      r3,[r1,#0x20]
00002a  f2411211          MOV      r2,#0x1111
00002e  4213              TST      r3,r2
000030  f2404344          MOV      r3,#0x444
000034  bf04              ITT      EQ
000036  f8d1c020          LDREQ    r12,[r1,#0x20]
00003a  ea1c0f03          TSTEQ    r12,r3
00003e  d105              BNE      |L32.76|
000040  f8d1c044          LDR      r12,[r1,#0x44]
000044  f42c4c00          BIC      r12,r12,#0x8000
000048  f8c1c044          STR      r12,[r1,#0x44]
                  |L32.76|
;;;956    
;;;957      /* Disable the Peripheral */
;;;958      __HAL_TIM_DISABLE(htim);
00004c  6800              LDR      r0,[r0,#0]
00004e  6a01              LDR      r1,[r0,#0x20]
000050  4211              TST      r1,r2
000052  bf04              ITT      EQ
000054  6a01              LDREQ    r1,[r0,#0x20]
000056  4219              TSTEQ    r1,r3
000058  d103              BNE      |L32.98|
00005a  6801              LDR      r1,[r0,#0]
00005c  f0210101          BIC      r1,r1,#1
000060  6001              STR      r1,[r0,#0]
                  |L32.98|
;;;959    
;;;960      /* Return function status */
;;;961      return HAL_OK;
;;;962    }
000062  bc10              POP      {r4}
000064  2000              MOVS     r0,#0                 ;961
000066  4770              BX       lr
;;;963    
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop_DMA PROC
;;;1232     */
;;;1233   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b410              PUSH     {r4}
;;;1234   {
;;;1235     /* Check the parameters */
;;;1236     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;1237   
;;;1238     switch (Channel)
000002  6802              LDR      r2,[r0,#0]
000004  2900              CMP      r1,#0
;;;1239     {
;;;1240       case TIM_CHANNEL_1:
;;;1241       {
;;;1242         /* Disable the TIM Capture/Compare 1 DMA request */
;;;1243         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000006  bf04              ITT      EQ
000008  68d3              LDREQ    r3,[r2,#0xc]
00000a  f4237300          BICEQ    r3,r3,#0x200
00000e  d011              BEQ      |L33.52|
000010  2904              CMP      r1,#4                 ;1238
;;;1244       }
;;;1245       break;
;;;1246   
;;;1247       case TIM_CHANNEL_2:
;;;1248       {
;;;1249         /* Disable the TIM Capture/Compare 2 DMA request */
;;;1250         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000012  bf04              ITT      EQ
000014  68d3              LDREQ    r3,[r2,#0xc]
000016  f4236380          BICEQ    r3,r3,#0x400
00001a  d00b              BEQ      |L33.52|
00001c  2908              CMP      r1,#8                 ;1238
;;;1251       }
;;;1252       break;
;;;1253   
;;;1254       case TIM_CHANNEL_3:
;;;1255       {
;;;1256         /* Disable the TIM Capture/Compare 3 DMA request */
;;;1257         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
00001e  bf04              ITT      EQ
000020  68d3              LDREQ    r3,[r2,#0xc]
000022  f4236300          BICEQ    r3,r3,#0x800
000026  d005              BEQ      |L33.52|
000028  290c              CMP      r1,#0xc               ;1238
;;;1258       }
;;;1259       break;
;;;1260   
;;;1261       case TIM_CHANNEL_4:
;;;1262       {
;;;1263         /* Disable the TIM Capture/Compare 4 DMA request */
;;;1264         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
00002a  bf04              ITT      EQ
00002c  68d3              LDREQ    r3,[r2,#0xc]
00002e  f4235380          BICEQ    r3,r3,#0x1000
000032  d100              BNE      |L33.54|
                  |L33.52|
000034  60d3              STR      r3,[r2,#0xc]          ;1257
                  |L33.54|
000036  6802              LDR      r2,[r0,#0]            ;1257
000038  f04f0c04          MOV      r12,#4                ;1257
;;;1265       }
;;;1266       break;
;;;1267   
;;;1268       default:
;;;1269       break;
;;;1270     }
;;;1271   
;;;1272     /* Disable the complementary PWM output */
;;;1273       TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
00003c  2300              MOVS     r3,#0
00003e  6a14              LDR      r4,[r2,#0x20]
000040  fa0cfc01          LSL      r12,r12,r1
000044  ea240c0c          BIC      r12,r4,r12
000048  f8c2c020          STR      r12,[r2,#0x20]
00004c  f8d2c020          LDR      r12,[r2,#0x20]
000050  fa03f101          LSL      r1,r3,r1
000054  ea4c0101          ORR      r1,r12,r1
000058  6211              STR      r1,[r2,#0x20]
;;;1274   
;;;1275     /* Disable the Main Ouput */
;;;1276       __HAL_TIM_MOE_DISABLE(htim);
00005a  6801              LDR      r1,[r0,#0]
00005c  6a0b              LDR      r3,[r1,#0x20]
00005e  f2411211          MOV      r2,#0x1111
000062  4213              TST      r3,r2
000064  f2404344          MOV      r3,#0x444
000068  bf04              ITT      EQ
00006a  f8d1c020          LDREQ    r12,[r1,#0x20]
00006e  ea1c0f03          TSTEQ    r12,r3
000072  d105              BNE      |L33.128|
000074  f8d1c044          LDR      r12,[r1,#0x44]
000078  f42c4c00          BIC      r12,r12,#0x8000
00007c  f8c1c044          STR      r12,[r1,#0x44]
                  |L33.128|
;;;1277   
;;;1278     /* Disable the Peripheral */
;;;1279     __HAL_TIM_DISABLE(htim);
000080  6801              LDR      r1,[r0,#0]
000082  f8d1c020          LDR      r12,[r1,#0x20]
000086  ea1c0f02          TST      r12,r2
00008a  bf04              ITT      EQ
00008c  6a0a              LDREQ    r2,[r1,#0x20]
00008e  421a              TSTEQ    r2,r3
000090  d103              BNE      |L33.154|
000092  680a              LDR      r2,[r1,#0]
000094  f0220201          BIC      r2,r2,#1
000098  600a              STR      r2,[r1,#0]
                  |L33.154|
;;;1280   
;;;1281     /* Change the htim state */
;;;1282     htim->State = HAL_TIM_STATE_READY;
00009a  2101              MOVS     r1,#1
00009c  6401              STR      r1,[r0,#0x40]
;;;1283   
;;;1284     /* Return function status */
;;;1285     return HAL_OK;
;;;1286   }
00009e  bc10              POP      {r4}
0000a0  2000              MOVS     r0,#0                 ;1285
0000a2  4770              BX       lr
;;;1287   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop_IT PROC
;;;1042     */
;;;1043   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b410              PUSH     {r4}
;;;1044   {
;;;1045     uint32_t tmpccer = 0U;
;;;1046   
;;;1047     /* Check the parameters */
;;;1048     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;1049   
;;;1050     switch (Channel)
000002  6802              LDR      r2,[r0,#0]
000004  2900              CMP      r1,#0
;;;1051     {
;;;1052       case TIM_CHANNEL_1:
;;;1053       {
;;;1054         /* Disable the TIM Capture/Compare 1 interrupt */
;;;1055         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000006  bf04              ITT      EQ
000008  68d3              LDREQ    r3,[r2,#0xc]
00000a  f0230302          BICEQ    r3,r3,#2
00000e  d011              BEQ      |L34.52|
000010  2904              CMP      r1,#4                 ;1050
;;;1056       }
;;;1057       break;
;;;1058   
;;;1059       case TIM_CHANNEL_2:
;;;1060       {
;;;1061         /* Disable the TIM Capture/Compare 2 interrupt */
;;;1062         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000012  bf04              ITT      EQ
000014  68d3              LDREQ    r3,[r2,#0xc]
000016  f0230304          BICEQ    r3,r3,#4
00001a  d00b              BEQ      |L34.52|
00001c  2908              CMP      r1,#8                 ;1050
;;;1063       }
;;;1064       break;
;;;1065   
;;;1066       case TIM_CHANNEL_3:
;;;1067       {
;;;1068         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1069         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
00001e  bf04              ITT      EQ
000020  68d3              LDREQ    r3,[r2,#0xc]
000022  f0230308          BICEQ    r3,r3,#8
000026  d005              BEQ      |L34.52|
000028  290c              CMP      r1,#0xc               ;1050
;;;1070       }
;;;1071       break;
;;;1072   
;;;1073       case TIM_CHANNEL_4:
;;;1074       {
;;;1075         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1076         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
00002a  bf04              ITT      EQ
00002c  68d3              LDREQ    r3,[r2,#0xc]
00002e  f0230310          BICEQ    r3,r3,#0x10
000032  d100              BNE      |L34.54|
                  |L34.52|
000034  60d3              STR      r3,[r2,#0xc]          ;1069
                  |L34.54|
000036  6802              LDR      r2,[r0,#0]            ;1069
000038  f04f0c04          MOV      r12,#4                ;1069
;;;1077       }
;;;1078       break;
;;;1079   
;;;1080       default:
;;;1081       break;
;;;1082     }
;;;1083   
;;;1084     /* Disable the complementary PWM output  */
;;;1085     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
00003c  2300              MOVS     r3,#0
00003e  6a14              LDR      r4,[r2,#0x20]
000040  fa0cfc01          LSL      r12,r12,r1
000044  ea240c0c          BIC      r12,r4,r12
000048  f8c2c020          STR      r12,[r2,#0x20]
00004c  f8d2c020          LDR      r12,[r2,#0x20]
000050  fa03f101          LSL      r1,r3,r1
000054  ea4c0101          ORR      r1,r12,r1
000058  6211              STR      r1,[r2,#0x20]
;;;1086   
;;;1087     /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;1088     tmpccer = htim->Instance->CCER;
00005a  6801              LDR      r1,[r0,#0]
00005c  6a0b              LDR      r3,[r1,#0x20]
;;;1089     if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
00005e  f2404244          MOV      r2,#0x444
000062  4213              TST      r3,r2
000064  d103              BNE      |L34.110|
;;;1090     {
;;;1091       __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
000066  68cb              LDR      r3,[r1,#0xc]
000068  f0230380          BIC      r3,r3,#0x80
00006c  60cb              STR      r3,[r1,#0xc]
                  |L34.110|
;;;1092     }
;;;1093   
;;;1094     /* Disable the Main Ouput */
;;;1095     __HAL_TIM_MOE_DISABLE(htim);
00006e  6801              LDR      r1,[r0,#0]
000070  f8d1c020          LDR      r12,[r1,#0x20]
000074  f2411311          MOV      r3,#0x1111
000078  ea1c0f03          TST      r12,r3
00007c  bf04              ITT      EQ
00007e  f8d1c020          LDREQ    r12,[r1,#0x20]
000082  ea1c0f02          TSTEQ    r12,r2
000086  d105              BNE      |L34.148|
000088  f8d1c044          LDR      r12,[r1,#0x44]
00008c  f42c4c00          BIC      r12,r12,#0x8000
000090  f8c1c044          STR      r12,[r1,#0x44]
                  |L34.148|
;;;1096   
;;;1097     /* Disable the Peripheral */
;;;1098     __HAL_TIM_DISABLE(htim);
000094  6800              LDR      r0,[r0,#0]
000096  6a01              LDR      r1,[r0,#0x20]
000098  4219              TST      r1,r3
00009a  bf04              ITT      EQ
00009c  6a01              LDREQ    r1,[r0,#0x20]
00009e  4211              TSTEQ    r1,r2
0000a0  d103              BNE      |L34.170|
0000a2  6801              LDR      r1,[r0,#0]
0000a4  f0210101          BIC      r1,r1,#1
0000a8  6001              STR      r1,[r0,#0]
                  |L34.170|
;;;1099   
;;;1100     /* Return function status */
;;;1101     return HAL_OK;
;;;1102   }
0000aa  bc10              POP      {r4}
0000ac  2000              MOVS     r0,#0                 ;1101
0000ae  4770              BX       lr
;;;1103   
                          ENDP


                          AREA ||i.TIMEx_DMACommutationCplt||, CODE, READONLY, ALIGN=1

                  TIMEx_DMACommutationCplt PROC
;;;1757     */
;;;1758   void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;1759   {
;;;1760     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6a80              LDR      r0,[r0,#0x28]
;;;1761   
;;;1762     htim->State= HAL_TIM_STATE_READY;
000004  2101              MOVS     r1,#1
000006  6401              STR      r1,[r0,#0x40]
;;;1763   
;;;1764     HAL_TIMEx_CommutationCallback(htim);
000008  f7fffffe          BL       HAL_TIMEx_CommutationCallback
;;;1765   }
00000c  bd10              POP      {r4,pc}
;;;1766   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F1_V1.6.0\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_tim_ex_c_e8ef3920____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F1_V1.6.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f1xx_hal_tim_ex_c_e8ef3920____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_tim_ex_c_e8ef3920____REVSH|
#line 402
|__asm___22_stm32f1xx_hal_tim_ex_c_e8ef3920____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_tim_ex_c_e8ef3920____RRX|
#line 587
|__asm___22_stm32f1xx_hal_tim_ex_c_e8ef3920____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
