; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f1xx_hal_cortex.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f1xx_hal_cortex.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F1_V1.6.0\Drivers\STM32F1xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_F1_V1.6.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F1_V1.6.0\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F1_V1.6.0\Drivers\STM32F1xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F103RET6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F10X_HD -DUSE_HAL_DRIVER -DSTM32F103xE -W --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f1xx_hal_cortex.crf ..\..\..\M0P0_Library\STM32Cube_FW_F1_V1.6.0\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_cortex.c]
                          THUMB

                          AREA ||i.HAL_NVIC_ClearPendingIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_ClearPendingIRQ PROC
;;;437      */
;;;438    void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000000  f000011f          AND      r1,r0,#0x1f
000004  2201              MOVS     r2,#1
000006  fa02f101          LSL      r1,r2,r1
00000a  0940              LSRS     r0,r0,#5
00000c  0080              LSLS     r0,r0,#2
00000e  f10020e0          ADD      r0,r0,#0xe000e000
000012  f8c01280          STR      r1,[r0,#0x280]
;;;439    {
;;;440      /* Check the parameters */
;;;441      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;442    
;;;443      /* Clear pending interrupt */
;;;444      NVIC_ClearPendingIRQ(IRQn);
;;;445    }
000016  4770              BX       lr
;;;446    
                          ENDP


                          AREA ||i.HAL_NVIC_DisableIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_DisableIRQ PROC
;;;220      */
;;;221    void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
000000  f000011f          AND      r1,r0,#0x1f
000004  2201              MOVS     r2,#1
000006  fa02f101          LSL      r1,r2,r1
00000a  0940              LSRS     r0,r0,#5
00000c  0080              LSLS     r0,r0,#2
00000e  f10020e0          ADD      r0,r0,#0xe000e000
000012  f8c01180          STR      r1,[r0,#0x180]
;;;222    {
;;;223      /* Check the parameters */
;;;224      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;225    
;;;226      /* Disable interrupt */
;;;227      NVIC_DisableIRQ(IRQn);
;;;228    }
000016  4770              BX       lr
;;;229    
                          ENDP


                          AREA ||i.HAL_NVIC_EnableIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_EnableIRQ PROC
;;;204      */
;;;205    void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
000000  f000011f          AND      r1,r0,#0x1f
000004  2201              MOVS     r2,#1
000006  fa02f101          LSL      r1,r2,r1
00000a  0940              LSRS     r0,r0,#5
00000c  0080              LSLS     r0,r0,#2
00000e  f10020e0          ADD      r0,r0,#0xe000e000
000012  f8c01100          STR      r1,[r0,#0x100]
;;;206    {
;;;207      /* Check the parameters */
;;;208      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;209    
;;;210      /* Enable interrupt */
;;;211      NVIC_EnableIRQ(IRQn);
;;;212    }
000016  4770              BX       lr
;;;213    
                          ENDP


                          AREA ||i.HAL_NVIC_GetActive||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_GetActive PROC
;;;454      */
;;;455    uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
000000  0941              LSRS     r1,r0,#5
;;;456    {
;;;457      /* Check the parameters */
;;;458      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;459    
;;;460      /* Return 1 if active else 0 */
;;;461      return NVIC_GetActive(IRQn);
000002  0089              LSLS     r1,r1,#2
000004  f10121e0          ADD      r1,r1,#0xe000e000
000008  f8d11300          LDR      r1,[r1,#0x300]
00000c  f000001f          AND      r0,r0,#0x1f
000010  2201              MOVS     r2,#1
000012  fa02f000          LSL      r0,r2,r0
000016  4008              ANDS     r0,r0,r1
000018  bf18              IT       NE
00001a  2001              MOVNE    r0,#1
;;;462    }
00001c  4770              BX       lr
;;;463    
                          ENDP


                          AREA ||i.HAL_NVIC_GetPendingIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_GetPendingIRQ PROC
;;;421      */
;;;422    uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
000000  0941              LSRS     r1,r0,#5
;;;423    {
;;;424      /* Check the parameters */
;;;425      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;426    
;;;427      /* Return 1 if pending else 0 */
;;;428      return NVIC_GetPendingIRQ(IRQn);
000002  0089              LSLS     r1,r1,#2
000004  f10121e0          ADD      r1,r1,#0xe000e000
000008  f8d11200          LDR      r1,[r1,#0x200]
00000c  f000001f          AND      r0,r0,#0x1f
000010  2201              MOVS     r2,#1
000012  fa02f000          LSL      r0,r2,r0
000016  4008              ANDS     r0,r0,r1
000018  bf18              IT       NE
00001a  2001              MOVNE    r0,#1
;;;429    }
00001c  4770              BX       lr
;;;430    
                          ENDP


                          AREA ||i.HAL_NVIC_GetPriority||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_GetPriority PROC
;;;388      */
;;;389    void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
000000  b430              PUSH     {r4,r5}
000002  2800              CMP      r0,#0
000004  bfb8              IT       LT
000006  f000000f          ANDLT    r0,r0,#0xf
00000a  f10020e0          ADD      r0,r0,#0xe000e000
00000e  bfb4              ITE      LT
000010  f8900d14          LDRBLT   r0,[r0,#0xd14]
000014  f8900400          LDRBGE   r0,[r0,#0x400]
000018  0900              LSRS     r0,r0,#4
00001a  f0010c07          AND      r12,r1,#7
00001e  f1cc0107          RSB      r1,r12,#7
000022  2904              CMP      r1,#4
000024  bf88              IT       HI
000026  2104              MOVHI    r1,#4
000028  f10c0404          ADD      r4,r12,#4
00002c  2c07              CMP      r4,#7
00002e  bf34              ITE      CC
000030  f04f0c00          MOVCC    r12,#0
000034  f1ac0c03          SUBCS    r12,r12,#3
000038  fa20f50c          LSR      r5,r0,r12
00003c  2401              MOVS     r4,#1
00003e  fa04f101          LSL      r1,r4,r1
000042  1e49              SUBS     r1,r1,#1
000044  4029              ANDS     r1,r1,r5
000046  6011              STR      r1,[r2,#0]
000048  fa04f10c          LSL      r1,r4,r12
00004c  1e49              SUBS     r1,r1,#1
00004e  4008              ANDS     r0,r0,r1
000050  6018              STR      r0,[r3,#0]
;;;390    {
;;;391      /* Check the parameters */
;;;392      assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
;;;393     /* Get priority for Cortex-M system or device specific interrupts */
;;;394      NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
;;;395    }
000052  bc30              POP      {r4,r5}
000054  4770              BX       lr
;;;396    
                          ENDP


                          AREA ||i.HAL_NVIC_GetPriorityGrouping||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_GetPriorityGrouping PROC
;;;361      */
;;;362    uint32_t HAL_NVIC_GetPriorityGrouping(void)
000000  4802              LDR      r0,|L7.12|
;;;363    {
;;;364      /* Get the PRIGROUP[10:8] field value */
;;;365      return NVIC_GetPriorityGrouping();
000002  6800              LDR      r0,[r0,#0]
000004  f3c02002          UBFX     r0,r0,#8,#3
;;;366    }
000008  4770              BX       lr
;;;367    
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      0xe000ed0c

                          AREA ||i.HAL_NVIC_SetPendingIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_SetPendingIRQ PROC
;;;403      */
;;;404    void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
000000  f000011f          AND      r1,r0,#0x1f
000004  2201              MOVS     r2,#1
000006  fa02f101          LSL      r1,r2,r1
00000a  0940              LSRS     r0,r0,#5
00000c  0080              LSLS     r0,r0,#2
00000e  f10020e0          ADD      r0,r0,#0xe000e000
000012  f8c01200          STR      r1,[r0,#0x200]
;;;405    {
;;;406      /* Check the parameters */
;;;407      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;408      
;;;409      /* Set interrupt pending */
;;;410      NVIC_SetPendingIRQ(IRQn);
;;;411    }
000016  4770              BX       lr
;;;412    
                          ENDP


                          AREA ||i.HAL_NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SetPriority PROC
;;;182      */
;;;183    void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
000000  4b17              LDR      r3,|L9.96|
;;;184    { 
000002  b410              PUSH     {r4}
000004  681b              LDR      r3,[r3,#0]
000006  f3c32302          UBFX     r3,r3,#8,#3
00000a  f1c30c07          RSB      r12,r3,#7
00000e  f1bc0f04          CMP      r12,#4
000012  bf88              IT       HI
000014  f04f0c04          MOVHI    r12,#4
000018  1d1c              ADDS     r4,r3,#4
00001a  2c07              CMP      r4,#7
00001c  bf34              ITE      CC
00001e  2300              MOVCC    r3,#0
000020  1edb              SUBCS    r3,r3,#3
000022  2401              MOVS     r4,#1
000024  fa04fc0c          LSL      r12,r4,r12
000028  f1ac0c01          SUB      r12,r12,#1
00002c  ea0c0101          AND      r1,r12,r1
000030  4099              LSLS     r1,r1,r3
000032  fa04f303          LSL      r3,r4,r3
000036  1e5b              SUBS     r3,r3,#1
000038  401a              ANDS     r2,r2,r3
00003a  4311              ORRS     r1,r1,r2
00003c  2800              CMP      r0,#0
00003e  ea4f1101          LSL      r1,r1,#4
000042  bfa1              ITTTT    GE
000044  f10020e0          ADDGE    r0,r0,#0xe000e000
000048  f8801400          STRBGE   r1,[r0,#0x400]
;;;185      uint32_t prioritygroup = 0x00U;
;;;186      
;;;187      /* Check the parameters */
;;;188      assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
;;;189      assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
;;;190      
;;;191      prioritygroup = NVIC_GetPriorityGrouping();
;;;192      
;;;193      NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
;;;194    }
00004c  bc10              POPGE    {r4}
00004e  4770              BXGE     lr
000050  f000000f          AND      r0,r0,#0xf
000054  f10020e0          ADD      r0,r0,#0xe000e000
000058  f8801d14          STRB     r1,[r0,#0xd14]
00005c  bc10              POP      {r4}
00005e  4770              BX       lr
;;;195    
                          ENDP

                  |L9.96|
                          DCD      0xe000ed0c

                          AREA ||i.HAL_NVIC_SetPriorityGrouping||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SetPriorityGrouping PROC
;;;160      */
;;;161    void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
000000  4907              LDR      r1,|L10.32|
000002  f0000007          AND      r0,r0,#7
000006  680a              LDR      r2,[r1,#0]
000008  f64f03ff          MOV      r3,#0xf8ff
00000c  401a              ANDS     r2,r2,r3
00000e  ea422000          ORR      r0,r2,r0,LSL #8
000012  f04070fd          ORR      r0,r0,#0x1fa0000
000016  f0406080          ORR      r0,r0,#0x4000000
00001a  6008              STR      r0,[r1,#0]
;;;162    {
;;;163      /* Check the parameters */
;;;164      assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
;;;165      
;;;166      /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
;;;167      NVIC_SetPriorityGrouping(PriorityGroup);
;;;168    }
00001c  4770              BX       lr
;;;169    
                          ENDP

00001e  0000              DCW      0x0000
                  |L10.32|
                          DCD      0xe000ed0c

                          AREA ||i.HAL_NVIC_SystemReset||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SystemReset PROC
;;;233      */
;;;234    void HAL_NVIC_SystemReset(void)
000000  f3bf8f4f          DSB      
000004  4805              LDR      r0,|L11.28|
000006  6801              LDR      r1,[r0,#0]
000008  4a05              LDR      r2,|L11.32|
00000a  f40161e0          AND      r1,r1,#0x700
00000e  4311              ORRS     r1,r1,r2
000010  6001              STR      r1,[r0,#0]
000012  f3bf8f4f          DSB      
                  |L11.22|
000016  bf00              NOP      
000018  e7fd              B        |L11.22|
;;;235    {
;;;236      /* System Reset */
;;;237      NVIC_SystemReset();
;;;238    }
;;;239    
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
                          DCD      0xe000ed0c
                  |L11.32|
                          DCD      0x05fa0004

                          AREA ||i.HAL_SYSTICK_CLKSourceConfig||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_CLKSourceConfig PROC
;;;471      */
;;;472    void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;473    {
;;;474      /* Check the parameters */
;;;475      assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
;;;476      if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
000004  2804              CMP      r0,#4
;;;477      {
;;;478        SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
;;;479      }
;;;480      else
;;;481      {
;;;482        SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
000006  6908              LDR      r0,[r1,#0x10]
000008  bf0c              ITE      EQ                    ;478
00000a  f0400004          ORREQ    r0,r0,#4              ;478
00000e  f0200004          BICNE    r0,r0,#4
000012  6108              STR      r0,[r1,#0x10]         ;478
;;;483      }
;;;484    }
000014  4770              BX       lr
;;;485    
                          ENDP


                          AREA ||i.HAL_SYSTICK_Callback||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_Callback PROC
;;;498      */
;;;499    __weak void HAL_SYSTICK_Callback(void)
000000  4770              BX       lr
;;;500    {
;;;501      /* NOTE : This function Should not be modified, when the callback is needed,
;;;502                the HAL_SYSTICK_Callback could be implemented in the user file
;;;503       */
;;;504    }
;;;505    
                          ENDP


                          AREA ||i.HAL_SYSTICK_Config||, CODE, READONLY, ALIGN=2

                  HAL_SYSTICK_Config PROC
;;;246      */
;;;247    uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
000000  1e41              SUBS     r1,r0,#1
000002  f1b17f80          CMP      r1,#0x1000000
000006  bf24              ITT      CS
000008  2001              MOVCS    r0,#1
;;;248    {
;;;249       return SysTick_Config(TicksNumb);
;;;250    }
00000a  4770              BXCS     lr
00000c  f04f20e0          MOV      r0,#0xe000e000
000010  6141              STR      r1,[r0,#0x14]
000012  4a05              LDR      r2,|L14.40|
000014  21f0              MOVS     r1,#0xf0
000016  f8821d14          STRB     r1,[r2,#0xd14]
00001a  2100              MOVS     r1,#0
00001c  6181              STR      r1,[r0,#0x18]
00001e  2107              MOVS     r1,#7
000020  6101              STR      r1,[r0,#0x10]
000022  2000              MOVS     r0,#0
000024  4770              BX       lr
;;;251    /**
                          ENDP

000026  0000              DCW      0x0000
                  |L14.40|
                          DCD      0xe000e00f

                          AREA ||i.HAL_SYSTICK_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_IRQHandler PROC
;;;489      */
;;;490    void HAL_SYSTICK_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;491    {
;;;492      HAL_SYSTICK_Callback();
000002  f7fffffe          BL       HAL_SYSTICK_Callback
;;;493    }
000006  bd10              POP      {r4,pc}
;;;494    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F1_V1.6.0\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_cortex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F1_V1.6.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REVSH|
#line 402
|__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____RRX|
#line 587
|__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
