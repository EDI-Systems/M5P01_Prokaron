; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f1xx_hal_flash.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f1xx_hal_flash.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F1_V1.6.0\Drivers\STM32F1xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_F1_V1.6.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F1_V1.6.0\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F1_V1.6.0\Drivers\STM32F1xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F103RET6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F10X_HD -DUSE_HAL_DRIVER -DSTM32F103xE --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f1xx_hal_flash.crf ..\..\..\M0P0_Library\STM32Cube_FW_F1_V1.6.0\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_flash.c]
                          THUMB

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;838      */
;;;839    HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;840    {
000002  4605              MOV      r5,r0
;;;841      /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;842         Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;843         flag will be set */
;;;844         
;;;845      uint32_t tickstart = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
;;;846         
;;;847      while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
000008  4c29              LDR      r4,|L1.176|
00000a  4606              MOV      r6,r0                 ;845
00000c  68e0              LDR      r0,[r4,#0xc]
00000e  f0100f01          TST      r0,#1
000012  d00e              BEQ      |L1.50|
                  |L1.20|
;;;848      { 
;;;849        if (Timeout != HAL_MAX_DELAY)
000014  f1b53fff          CMP      r5,#0xffffffff
000018  d007              BEQ      |L1.42|
;;;850        {
;;;851          if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
00001a  b125              CBZ      r5,|L1.38|
00001c  f7fffffe          BL       HAL_GetTick
000020  1b80              SUBS     r0,r0,r6
000022  42a8              CMP      r0,r5
000024  d901              BLS      |L1.42|
                  |L1.38|
;;;852          {
;;;853            return HAL_TIMEOUT;
000026  2003              MOVS     r0,#3
;;;854          }
;;;855        }
;;;856      }
;;;857      
;;;858      /* Check FLASH End of Operation flag  */
;;;859      if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
;;;860      {
;;;861        /* Clear FLASH End of Operation pending bit */
;;;862        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
;;;863      }
;;;864      
;;;865      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
;;;866         __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
;;;867         __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
;;;868      {
;;;869        /*Save the error code*/
;;;870        FLASH_SetErrorCode();
;;;871        return HAL_ERROR;
;;;872      }
;;;873    
;;;874      /* There is no error flag set */
;;;875      return HAL_OK;
;;;876    }
000028  bd70              POP      {r4-r6,pc}
                  |L1.42|
00002a  68e0              LDR      r0,[r4,#0xc]          ;853
00002c  f0100f01          TST      r0,#1                 ;853
000030  d1f0              BNE      |L1.20|
                  |L1.50|
000032  68e0              LDR      r0,[r4,#0xc]          ;859
000034  f0100f20          TST      r0,#0x20              ;859
000038  bf1c              ITT      NE                    ;862
00003a  2020              MOVNE    r0,#0x20              ;862
00003c  60e0              STRNE    r0,[r4,#0xc]          ;862
00003e  68e0              LDR      r0,[r4,#0xc]          ;865
000040  f0100f10          TST      r0,#0x10              ;865
000044  bf01              ITTTT    EQ                    ;865
000046  69e0              LDREQ    r0,[r4,#0x1c]         ;865
000048  f0100f01          TSTEQ    r0,#1                 ;865
00004c  68e0              LDREQ    r0,[r4,#0xc]          ;865
00004e  f0100004          ANDSEQ   r0,r0,#4              ;865
000052  bf08              IT       EQ
000054  bd70              POPEQ    {r4-r6,pc}
000056  2100              MOVS     r1,#0
000058  68e0              LDR      r0,[r4,#0xc]
00005a  f0100f10          TST      r0,#0x10
00005e  4815              LDR      r0,|L1.180|
000060  d004              BEQ      |L1.108|
000062  69c1              LDR      r1,[r0,#0x1c]  ; pFlash
000064  f0410102          ORR      r1,r1,#2
000068  61c1              STR      r1,[r0,#0x1c]  ; pFlash
00006a  2110              MOVS     r1,#0x10
                  |L1.108|
00006c  68e2              LDR      r2,[r4,#0xc]
00006e  f0120f04          TST      r2,#4
000072  d005              BEQ      |L1.128|
000074  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
000076  f0420201          ORR      r2,r2,#1
00007a  61c2              STR      r2,[r0,#0x1c]  ; pFlash
00007c  f0410104          ORR      r1,r1,#4
                  |L1.128|
000080  69e2              LDR      r2,[r4,#0x1c]
000082  f0120f01          TST      r2,#1
000086  d007              BEQ      |L1.152|
000088  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
00008a  f0420204          ORR      r2,r2,#4
00008e  61c2              STR      r2,[r0,#0x1c]  ; pFlash
000090  69e0              LDR      r0,[r4,#0x1c]
000092  f0200001          BIC      r0,r0,#1
000096  61e0              STR      r0,[r4,#0x1c]
                  |L1.152|
000098  f5a17080          SUB      r0,r1,#0x100
00009c  3801              SUBS     r0,#1
00009e  bf18              IT       NE
0000a0  60e1              STRNE    r1,[r4,#0xc]
0000a2  d103              BNE      |L1.172|
0000a4  69e0              LDR      r0,[r4,#0x1c]
0000a6  f0200001          BIC      r0,r0,#1
0000aa  61e0              STR      r0,[r4,#0x1c]
                  |L1.172|
0000ac  2001              MOVS     r0,#1                 ;871
0000ae  bd70              POP      {r4-r6,pc}
;;;877    
                          ENDP

                  |L1.176|
                          DCD      0x40022000
                  |L1.180|
                          DCD      ||.bss||

                          AREA ||i.HAL_FLASH_EndOfOperationCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_EndOfOperationCallback PROC
;;;623      */
;;;624    __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;625    {
;;;626      /* Prevent unused argument(s) compilation warning */
;;;627      UNUSED(ReturnValue);
;;;628    
;;;629      /* NOTE : This function Should not be modified, when the callback is needed,
;;;630                the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
;;;631       */ 
;;;632    }
;;;633    
                          ENDP


                          AREA ||i.HAL_FLASH_GetError||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_GetError PROC
;;;786      */
;;;787    uint32_t HAL_FLASH_GetError(void)
000000  4801              LDR      r0,|L3.8|
;;;788    {
;;;789       return pFlash.ErrorCode;
000002  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
;;;790    }
000004  4770              BX       lr
;;;791    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      ||.bss||

                          AREA ||i.HAL_FLASH_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_IRQHandler PROC
;;;349      */
;;;350    void HAL_FLASH_IRQHandler(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;351    {
;;;352      uint32_t addresstmp = 0U;
;;;353      
;;;354      /* Check FLASH operation error flags */
;;;355    #if defined(FLASH_BANK2_END)
;;;356      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
;;;357        (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
;;;358    #else
;;;359      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
000004  4d56              LDR      r5,|L4.352|
000006  68e8              LDR      r0,[r5,#0xc]
;;;360    #endif /* FLASH_BANK2_END */
;;;361      {
;;;362        /* Return the faulty address */
;;;363        addresstmp = pFlash.Address;
000008  4c56              LDR      r4,|L4.356|
00000a  f0100f10          TST      r0,#0x10              ;359
;;;364        /* Reset address */
;;;365        pFlash.Address = 0xFFFFFFFFU;
00000e  f04f37ff          MOV      r7,#0xffffffff
000012  f04f0600          MOV      r6,#0
000016  bf04              ITT      EQ                    ;359
000018  68e8              LDREQ    r0,[r5,#0xc]          ;359
00001a  f0100f04          TSTEQ    r0,#4                 ;359
00001e  d02e              BEQ      |L4.126|
000020  68a0              LDR      r0,[r4,#8]            ;363  ; pFlash
000022  60a7              STR      r7,[r4,#8]  ; pFlash
000024  68ea              LDR      r2,[r5,#0xc]
000026  2100              MOVS     r1,#0
000028  f0120f10          TST      r2,#0x10
00002c  d004              BEQ      |L4.56|
00002e  69e1              LDR      r1,[r4,#0x1c]  ; pFlash
000030  f0410102          ORR      r1,r1,#2
000034  61e1              STR      r1,[r4,#0x1c]  ; pFlash
000036  2110              MOVS     r1,#0x10
                  |L4.56|
000038  68ea              LDR      r2,[r5,#0xc]
00003a  f0120f04          TST      r2,#4
00003e  d005              BEQ      |L4.76|
000040  69e2              LDR      r2,[r4,#0x1c]  ; pFlash
000042  f0420201          ORR      r2,r2,#1
000046  61e2              STR      r2,[r4,#0x1c]  ; pFlash
000048  f0410104          ORR      r1,r1,#4
                  |L4.76|
00004c  69ea              LDR      r2,[r5,#0x1c]
00004e  f0120f01          TST      r2,#1
000052  d007              BEQ      |L4.100|
000054  69e2              LDR      r2,[r4,#0x1c]  ; pFlash
000056  f0420204          ORR      r2,r2,#4
00005a  61e2              STR      r2,[r4,#0x1c]  ; pFlash
00005c  69ea              LDR      r2,[r5,#0x1c]
00005e  f0220201          BIC      r2,r2,#1
000062  61ea              STR      r2,[r5,#0x1c]
                  |L4.100|
000064  f5a17280          SUB      r2,r1,#0x100
000068  3a01              SUBS     r2,#1
00006a  bf18              IT       NE
00006c  60e9              STRNE    r1,[r5,#0xc]
00006e  d103              BNE      |L4.120|
000070  69e9              LDR      r1,[r5,#0x1c]
000072  f0210101          BIC      r1,r1,#1
000076  61e9              STR      r1,[r5,#0x1c]
                  |L4.120|
;;;366      
;;;367        /* Save the Error code */
;;;368        FLASH_SetErrorCode();
;;;369        
;;;370        /* FLASH error interrupt user callback */
;;;371        HAL_FLASH_OperationErrorCallback(addresstmp);
000078  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
;;;372    
;;;373        /* Stop the procedure ongoing */
;;;374        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00007c  6026              STR      r6,[r4,#0]  ; pFlash
                  |L4.126|
;;;375      }
;;;376    
;;;377      /* Check FLASH End of Operation flag  */
;;;378    #if defined(FLASH_BANK2_END)
;;;379      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
;;;380      {
;;;381        /* Clear FLASH End of Operation pending bit */
;;;382        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
;;;383    #else
;;;384      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
00007e  68e8              LDR      r0,[r5,#0xc]
000080  f0100f20          TST      r0,#0x20
000084  d058              BEQ      |L4.312|
;;;385      {
;;;386        /* Clear FLASH End of Operation pending bit */
;;;387        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
000086  2020              MOVS     r0,#0x20
000088  60e8              STR      r0,[r5,#0xc]
;;;388    #endif /* FLASH_BANK2_END */
;;;389        
;;;390        /* Process can continue only if no error detected */
;;;391        if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
00008a  6820              LDR      r0,[r4,#0]  ; pFlash
00008c  2800              CMP      r0,#0
00008e  d053              BEQ      |L4.312|
;;;392        {
;;;393          if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
000090  6820              LDR      r0,[r4,#0]  ; pFlash
000092  2801              CMP      r0,#1
000094  d021              BEQ      |L4.218|
;;;394          {
;;;395            /* Nb of pages to erased can be decreased */
;;;396            pFlash.DataRemaining--;
;;;397    
;;;398            /* Check if there are still pages to erase */
;;;399            if(pFlash.DataRemaining != 0U)
;;;400            {
;;;401              addresstmp = pFlash.Address;
;;;402              /*Indicate user which sector has been erased */
;;;403              HAL_FLASH_EndOfOperationCallback(addresstmp);
;;;404    
;;;405              /*Increment sector number*/
;;;406              addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
;;;407              pFlash.Address = addresstmp;
;;;408    
;;;409              /* If the erase operation is completed, disable the PER Bit */
;;;410              CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
;;;411    
;;;412              FLASH_PageErase(addresstmp);
;;;413            }
;;;414            else
;;;415            {
;;;416              /* No more pages to Erase, user callback can be called. */
;;;417              /* Reset Sector and stop Erase pages procedure */
;;;418              pFlash.Address = addresstmp = 0xFFFFFFFFU;
;;;419              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;420              /* FLASH EOP interrupt user callback */
;;;421              HAL_FLASH_EndOfOperationCallback(addresstmp);
;;;422            }
;;;423          }
;;;424          else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
000096  6820              LDR      r0,[r4,#0]  ; pFlash
000098  2802              CMP      r0,#2
00009a  d038              BEQ      |L4.270|
;;;425          {
;;;426            /* Operation is completed, disable the MER Bit */
;;;427            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
;;;428    
;;;429    #if defined(FLASH_BANK2_END)
;;;430            /* Stop Mass Erase procedure if no pending mass erase on other bank */
;;;431            if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
;;;432            {
;;;433    #endif /* FLASH_BANK2_END */
;;;434              /* MassErase ended. Return the selected bank */
;;;435              /* FLASH EOP interrupt user callback */
;;;436              HAL_FLASH_EndOfOperationCallback(0U);
;;;437    
;;;438              /* Stop Mass Erase procedure*/
;;;439              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;440            }
;;;441    #if defined(FLASH_BANK2_END)
;;;442          }
;;;443    #endif /* FLASH_BANK2_END */
;;;444          else
;;;445          {
;;;446            /* Nb of 16-bit data to program can be decreased */
;;;447            pFlash.DataRemaining--;
00009c  6860              LDR      r0,[r4,#4]  ; pFlash
00009e  1e40              SUBS     r0,r0,#1
0000a0  6060              STR      r0,[r4,#4]  ; pFlash
;;;448            
;;;449            /* Check if there are still 16-bit data to program */
;;;450            if(pFlash.DataRemaining != 0U)
0000a2  6860              LDR      r0,[r4,#4]  ; pFlash
0000a4  2800              CMP      r0,#0
0000a6  d03a              BEQ      |L4.286|
;;;451            {
;;;452              /* Increment address to 16-bit */
;;;453              pFlash.Address += 2U;
0000a8  68a0              LDR      r0,[r4,#8]  ; pFlash
0000aa  1c80              ADDS     r0,r0,#2
0000ac  60a0              STR      r0,[r4,#8]  ; pFlash
;;;454              addresstmp = pFlash.Address;
0000ae  68a0              LDR      r0,[r4,#8]  ; pFlash
;;;455              
;;;456              /* Shift to have next 16-bit data */
;;;457              pFlash.Data = (pFlash.Data >> 16U);
0000b0  6921              LDR      r1,[r4,#0x10]  ; pFlash
0000b2  6962              LDR      r2,[r4,#0x14]  ; pFlash
0000b4  0c09              LSRS     r1,r1,#16
0000b6  ea414102          ORR      r1,r1,r2,LSL #16
0000ba  0c12              LSRS     r2,r2,#16
0000bc  6121              STR      r1,[r4,#0x10]  ; pFlash
0000be  6162              STR      r2,[r4,#0x14]  ; pFlash
;;;458              
;;;459              /* Operation is completed, disable the PG Bit */
;;;460              CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
0000c0  6929              LDR      r1,[r5,#0x10]
0000c2  f0210101          BIC      r1,r1,#1
0000c6  6129              STR      r1,[r5,#0x10]
;;;461    
;;;462              /*Program halfword (16-bit) at a specified address.*/
;;;463              FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
0000c8  6921              LDR      r1,[r4,#0x10]  ; pFlash
0000ca  6962              LDR      r2,[r4,#0x14]  ; pFlash
0000cc  61e6              STR      r6,[r4,#0x1c]  ; pFlash
0000ce  692a              LDR      r2,[r5,#0x10]
0000d0  f0420201          ORR      r2,r2,#1
0000d4  612a              STR      r2,[r5,#0x10]
0000d6  8001              STRH     r1,[r0,#0]
0000d8  e02e              B        |L4.312|
                  |L4.218|
0000da  6860              LDR      r0,[r4,#4]            ;396  ; pFlash
0000dc  1e40              SUBS     r0,r0,#1              ;396
0000de  6060              STR      r0,[r4,#4]            ;396  ; pFlash
0000e0  6860              LDR      r0,[r4,#4]            ;399  ; pFlash
0000e2  b168              CBZ      r0,|L4.256|
0000e4  68a0              LDR      r0,[r4,#8]            ;401  ; pFlash
0000e6  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000ea  68a0              LDR      r0,[r4,#8]            ;406  ; pFlash
0000ec  f5006000          ADD      r0,r0,#0x800          ;406
0000f0  60a0              STR      r0,[r4,#8]            ;407  ; pFlash
0000f2  6929              LDR      r1,[r5,#0x10]         ;410
0000f4  f0210102          BIC      r1,r1,#2              ;410
0000f8  6129              STR      r1,[r5,#0x10]         ;410
0000fa  f7fffffe          BL       FLASH_PageErase
0000fe  e01b              B        |L4.312|
                  |L4.256|
000100  f04f30ff          MOV      r0,#0xffffffff        ;418
000104  60a0              STR      r0,[r4,#8]            ;418  ; pFlash
000106  6026              STR      r6,[r4,#0]            ;419  ; pFlash
000108  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
00010c  e014              B        |L4.312|
                  |L4.270|
00010e  6928              LDR      r0,[r5,#0x10]         ;427
000110  f0200004          BIC      r0,r0,#4              ;427
000114  6128              STR      r0,[r5,#0x10]         ;427
000116  2000              MOVS     r0,#0                 ;436
000118  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
00011c  e00b              B        |L4.310|
                  |L4.286|
;;;464            }
;;;465            else
;;;466            {
;;;467              /* Program ended. Return the selected address */
;;;468              /* FLASH EOP interrupt user callback */
;;;469              if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
00011e  6820              LDR      r0,[r4,#0]  ; pFlash
000120  2803              CMP      r0,#3
000122  d019              BEQ      |L4.344|
;;;470              {
;;;471                HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;472              }
;;;473              else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
000124  6820              LDR      r0,[r4,#0]  ; pFlash
000126  2804              CMP      r0,#4
;;;474              {
;;;475                HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
;;;476              }
;;;477              else 
;;;478              {
;;;479                HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
000128  68a0              LDR      r0,[r4,#8]  ; pFlash
00012a  bf0c              ITE      EQ
00012c  1e80              SUBEQ    r0,r0,#2
00012e  1f80              SUBNE    r0,r0,#6
000130  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
                  |L4.308|
;;;480              }
;;;481            
;;;482              /* Reset Address and stop Program procedure */
;;;483              pFlash.Address = 0xFFFFFFFFU;
000134  60a7              STR      r7,[r4,#8]  ; pFlash
                  |L4.310|
;;;484              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
000136  6026              STR      r6,[r4,#0]  ; pFlash
                  |L4.312|
;;;485            }
;;;486          }
;;;487        }
;;;488      }
;;;489      
;;;490    #if defined(FLASH_BANK2_END)
;;;491      /* Check FLASH End of Operation flag  */
;;;492      if(__HAL_FLASH_GET_FLAG( FLASH_FLAG_EOP_BANK2))
;;;493      {
;;;494        /* Clear FLASH End of Operation pending bit */
;;;495        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK2);
;;;496        
;;;497        /* Process can continue only if no error detected */
;;;498        if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;499        {
;;;500          if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
;;;501          {
;;;502            /* Nb of pages to erased can be decreased */
;;;503            pFlash.DataRemaining--;
;;;504            
;;;505            /* Check if there are still pages to erase*/
;;;506            if(pFlash.DataRemaining != 0U)
;;;507            {
;;;508              /* Indicate user which page address has been erased*/
;;;509              HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;510            
;;;511              /* Increment page address to next page */
;;;512              pFlash.Address += FLASH_PAGE_SIZE;
;;;513              addresstmp = pFlash.Address;
;;;514    
;;;515              /* Operation is completed, disable the PER Bit */
;;;516              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;517    
;;;518              FLASH_PageErase(addresstmp);
;;;519            }
;;;520            else
;;;521            {
;;;522              /*No more pages to Erase*/
;;;523              
;;;524              /*Reset Address and stop Erase pages procedure*/
;;;525              pFlash.Address = 0xFFFFFFFFU;
;;;526              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;527    
;;;528              /* FLASH EOP interrupt user callback */
;;;529              HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;530            }
;;;531          }
;;;532          else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
;;;533          {
;;;534            /* Operation is completed, disable the MER Bit */
;;;535            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;536    
;;;537            if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_MER))
;;;538            {
;;;539              /* MassErase ended. Return the selected bank*/
;;;540              /* FLASH EOP interrupt user callback */
;;;541              HAL_FLASH_EndOfOperationCallback(0U);
;;;542            
;;;543              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;544            }
;;;545          }
;;;546          else
;;;547          {
;;;548            /* Nb of 16-bit data to program can be decreased */
;;;549            pFlash.DataRemaining--;
;;;550            
;;;551            /* Check if there are still 16-bit data to program */
;;;552            if(pFlash.DataRemaining != 0U)
;;;553            {
;;;554              /* Increment address to 16-bit */
;;;555              pFlash.Address += 2U;
;;;556              addresstmp = pFlash.Address;
;;;557              
;;;558              /* Shift to have next 16-bit data */
;;;559              pFlash.Data = (pFlash.Data >> 16U);
;;;560              
;;;561              /* Operation is completed, disable the PG Bit */
;;;562              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;563    
;;;564              /*Program halfword (16-bit) at a specified address.*/
;;;565              FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
;;;566            }
;;;567            else
;;;568            {
;;;569              /*Program ended. Return the selected address*/
;;;570              /* FLASH EOP interrupt user callback */
;;;571              if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
;;;572              {
;;;573                HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;574              }
;;;575              else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
;;;576              {
;;;577                HAL_FLASH_EndOfOperationCallback(pFlash.Address-2U);
;;;578              }
;;;579              else 
;;;580              {
;;;581                HAL_FLASH_EndOfOperationCallback(pFlash.Address-6U);
;;;582              }
;;;583              
;;;584              /* Reset Address and stop Program procedure*/
;;;585              pFlash.Address = 0xFFFFFFFFU;
;;;586              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;587            }
;;;588          }
;;;589        }
;;;590      }
;;;591    #endif 
;;;592    
;;;593      if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
000138  6820              LDR      r0,[r4,#0]  ; pFlash
00013a  2800              CMP      r0,#0
;;;594      {
;;;595    #if defined(FLASH_BANK2_END)
;;;596        /* Operation is completed, disable the PG, PER and MER Bits for both bank */
;;;597        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
;;;598        CLEAR_BIT(FLASH->CR2, (FLASH_CR2_PG | FLASH_CR2_PER | FLASH_CR2_MER));  
;;;599      
;;;600        /* Disable End of FLASH Operation and Error source interrupts for both banks */
;;;601        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;602    #else
;;;603        /* Operation is completed, disable the PG, PER and MER Bits */
;;;604        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
;;;605    
;;;606        /* Disable End of FLASH Operation and Error source interrupts */
;;;607        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
;;;608    #endif /* FLASH_BANK2_END */
;;;609    
;;;610        /* Process Unlocked */
;;;611        __HAL_UNLOCK(&pFlash);
;;;612      }
;;;613    }
00013c  bf18              IT       NE
00013e  e8bd81f0          POPNE    {r4-r8,pc}
000142  6928              LDR      r0,[r5,#0x10]         ;604
000144  f0200007          BIC      r0,r0,#7              ;604
000148  6128              STR      r0,[r5,#0x10]         ;604
00014a  6928              LDR      r0,[r5,#0x10]         ;607
00014c  f42050a0          BIC      r0,r0,#0x1400         ;607
000150  6128              STR      r0,[r5,#0x10]         ;607
000152  61a6              STR      r6,[r4,#0x18]         ;611  ; pFlash
000154  e8bd81f0          POP      {r4-r8,pc}
                  |L4.344|
000158  68a0              LDR      r0,[r4,#8]            ;471  ; pFlash
00015a  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
00015e  e7e9              B        |L4.308|
;;;614    
                          ENDP

                  |L4.352|
                          DCD      0x40022000
                  |L4.356|
                          DCD      ||.bss||

                          AREA ||i.HAL_FLASH_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Lock PROC
;;;707      */
;;;708    HAL_StatusTypeDef HAL_FLASH_Lock(void)
000000  4803              LDR      r0,|L5.16|
;;;709    {
;;;710      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;711      SET_BIT(FLASH->CR, FLASH_CR_LOCK);
000002  6901              LDR      r1,[r0,#0x10]
000004  f0410180          ORR      r1,r1,#0x80
000008  6101              STR      r1,[r0,#0x10]
;;;712      
;;;713    #if defined(FLASH_BANK2_END)
;;;714      /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
;;;715      SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);
;;;716    
;;;717    #endif /* FLASH_BANK2_END */
;;;718      return HAL_OK;  
00000a  2000              MOVS     r0,#0
;;;719    }
00000c  4770              BX       lr
;;;720    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Launch||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OB_Launch PROC
;;;757      */
;;;758    void HAL_FLASH_OB_Launch(void)
000000  f7ffbffe          B.W      HAL_NVIC_SystemReset
;;;759    {
;;;760      /* Initiates a system reset request to launch the option byte loading */
;;;761      HAL_NVIC_SystemReset();
;;;762    }
;;;763    
                          ENDP


                          AREA ||i.HAL_FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Lock PROC
;;;744      */
;;;745    HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
000000  4803              LDR      r0,|L7.16|
;;;746    {
;;;747      /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
;;;748      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
000002  6901              LDR      r1,[r0,#0x10]
000004  f4217100          BIC      r1,r1,#0x200
000008  6101              STR      r1,[r0,#0x10]
;;;749      
;;;750      return HAL_OK;  
00000a  2000              MOVS     r0,#0
;;;751    }
00000c  4770              BX       lr
;;;752      
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Unlock PROC
;;;724      */
;;;725    HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
000000  4806              LDR      r0,|L8.28|
;;;726    {
;;;727      if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
000002  6901              LDR      r1,[r0,#0x10]
000004  f4117f00          TST      r1,#0x200
;;;728      {
;;;729        /* Authorizes the Option Byte register programming */
;;;730        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
;;;731        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
;;;732      }
;;;733      else
;;;734      {
;;;735        return HAL_ERROR;
000008  bf1c              ITT      NE
00000a  2001              MOVNE    r0,#1
;;;736      }  
;;;737      
;;;738      return HAL_OK;  
;;;739    }
00000c  4770              BXNE     lr
00000e  4904              LDR      r1,|L8.32|
000010  6081              STR      r1,[r0,#8]            ;730
000012  4904              LDR      r1,|L8.36|
000014  6081              STR      r1,[r0,#8]            ;731
000016  2000              MOVS     r0,#0                 ;738
000018  4770              BX       lr
;;;740    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      0x40022000
                  |L8.32|
                          DCD      0x45670123
                  |L8.36|
                          DCD      0xcdef89ab

                          AREA ||i.HAL_FLASH_OperationErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OperationErrorCallback PROC
;;;641      */
;;;642    __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;643    {
;;;644      /* Prevent unused argument(s) compilation warning */
;;;645      UNUSED(ReturnValue);
;;;646    
;;;647      /* NOTE : This function Should not be modified, when the callback is needed,
;;;648                the HAL_FLASH_OperationErrorCallback could be implemented in the user file
;;;649       */ 
;;;650    }
;;;651    
                          ENDP


                          AREA ||i.HAL_FLASH_Program||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program PROC
;;;185      */
;;;186    HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;187    {
;;;188      HAL_StatusTypeDef status = HAL_ERROR;
;;;189      uint8_t index = 0;
;;;190      uint8_t nbiterations = 0;
;;;191      
;;;192      /* Process Locked */
;;;193      __HAL_LOCK(&pFlash);
000004  f8df8140          LDR      r8,|L10.328|
000008  4606              MOV      r6,r0                 ;187
00000a  2500              MOVS     r5,#0                 ;189
00000c  f8d80018          LDR      r0,[r8,#0x18]  ; pFlash
000010  b082              SUB      sp,sp,#8              ;187
000012  4692              MOV      r10,r2                ;187
000014  469b              MOV      r11,r3                ;187
000016  2801              CMP      r0,#1
000018  bf02              ITTT     EQ
00001a  2002              MOVEQ    r0,#2
;;;194    
;;;195      /* Check the parameters */
;;;196      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;197      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;198    
;;;199    #if defined(FLASH_BANK2_END)
;;;200      if(Address <= FLASH_BANK1_END)
;;;201      {
;;;202    #endif /* FLASH_BANK2_END */
;;;203        /* Wait for last operation to be completed */
;;;204        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
;;;205    #if defined(FLASH_BANK2_END)
;;;206      }
;;;207      else
;;;208      {
;;;209        /* Wait for last operation to be completed */
;;;210        status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
;;;211      }
;;;212    #endif /* FLASH_BANK2_END */
;;;213      
;;;214      if(status == HAL_OK)
;;;215      {
;;;216        if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;217        {
;;;218          /* Program halfword (16-bit) at a specified address. */
;;;219          nbiterations = 1U;
;;;220        }
;;;221        else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;222        {
;;;223          /* Program word (32-bit = 2*16-bit) at a specified address. */
;;;224          nbiterations = 2U;
;;;225        }
;;;226        else
;;;227        {
;;;228          /* Program double word (64-bit = 4*16-bit) at a specified address. */
;;;229          nbiterations = 4U;
;;;230        }
;;;231    
;;;232        for (index = 0U; index < nbiterations; index++)
;;;233        {
;;;234          FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
;;;235    
;;;236    #if defined(FLASH_BANK2_END)
;;;237          if(Address <= FLASH_BANK1_END)
;;;238          {
;;;239    #endif /* FLASH_BANK2_END */
;;;240            /* Wait for last operation to be completed */
;;;241            status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
;;;242        
;;;243            /* If the program operation is completed, disable the PG Bit */
;;;244            CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
;;;245    #if defined(FLASH_BANK2_END)
;;;246          }
;;;247          else
;;;248          {
;;;249            /* Wait for last operation to be completed */
;;;250            status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
;;;251            
;;;252            /* If the program operation is completed, disable the PG Bit */
;;;253            CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;254          }
;;;255    #endif /* FLASH_BANK2_END */
;;;256          /* In case of error, stop programation procedure */
;;;257          if (status != HAL_OK)
;;;258          {
;;;259            break;
;;;260          }
;;;261        }
;;;262      }
;;;263    
;;;264      /* Process Unlocked */
;;;265      __HAL_UNLOCK(&pFlash);
;;;266    
;;;267      return status;
;;;268    }
00001c  b006              ADDEQ    sp,sp,#0x18
00001e  e8bd9ff0          POPEQ    {r4-r12,pc}
000022  2401              MOVS     r4,#1                 ;193
000024  f24c3050          MOV      r0,#0xc350            ;204
000028  f8c84018          STR      r4,[r8,#0x18]         ;204  ; pFlash
00002c  f7fffffe          BL       FLASH_WaitForLastOperation
000030  f04f0900          MOV      r9,#0                 ;204
000034  2800              CMP      r0,#0                 ;214
000036  d17d              BNE      |L10.308|
000038  2e01              CMP      r6,#1                 ;216
00003a  bf08              IT       EQ                    ;219
00003c  2001              MOVEQ    r0,#1                 ;219
00003e  d026              BEQ      |L10.142|
000040  2e02              CMP      r6,#2                 ;221
000042  bf0e              ITEE     EQ                    ;224
000044  2002              MOVEQ    r0,#2                 ;224
000046  2004              MOVNE    r0,#4                 ;229
000048  9000              STRNE    r0,[sp,#0]            ;229
00004a  d020              BEQ      |L10.142|
                  |L10.76|
00004c  4c3f              LDR      r4,|L10.332|
                  |L10.78|
00004e  9803              LDR      r0,[sp,#0xc]          ;234
000050  012a              LSLS     r2,r5,#4              ;234
000052  eb000645          ADD      r6,r0,r5,LSL #1       ;234
000056  4650              MOV      r0,r10                ;234
000058  4659              MOV      r1,r11                ;234
00005a  f7fffffe          BL       __aeabi_llsr
00005e  f8c8901c          STR      r9,[r8,#0x1c]         ;234  ; pFlash
000062  6921              LDR      r1,[r4,#0x10]         ;234
000064  f0410101          ORR      r1,r1,#1              ;234
000068  6121              STR      r1,[r4,#0x10]         ;234
00006a  8030              STRH     r0,[r6,#0]            ;234
00006c  f24c3650          MOV      r6,#0xc350            ;241
000070  f7fffffe          BL       HAL_GetTick
000074  4607              MOV      r7,r0                 ;241
000076  68e0              LDR      r0,[r4,#0xc]          ;241
000078  f0100f01          TST      r0,#1                 ;241
00007c  d00d              BEQ      |L10.154|
00007e  bf00              NOP                            ;241
                  |L10.128|
000080  f7fffffe          BL       HAL_GetTick
000084  1bc0              SUBS     r0,r0,r7              ;241
000086  42b0              CMP      r0,r6                 ;241
000088  d903              BLS      |L10.146|
00008a  2003              MOVS     r0,#3                 ;241
00008c  e04a              B        |L10.292|
                  |L10.142|
00008e  9000              STR      r0,[sp,#0]            ;219
000090  e7dc              B        |L10.76|
                  |L10.146|
000092  68e0              LDR      r0,[r4,#0xc]          ;219
000094  f0100f01          TST      r0,#1                 ;219
000098  d1f2              BNE      |L10.128|
                  |L10.154|
00009a  68e0              LDR      r0,[r4,#0xc]          ;219
00009c  f0100f20          TST      r0,#0x20              ;219
0000a0  bf1c              ITT      NE                    ;219
0000a2  2020              MOVNE    r0,#0x20              ;219
0000a4  60e0              STRNE    r0,[r4,#0xc]          ;219
0000a6  68e0              LDR      r0,[r4,#0xc]          ;219
0000a8  f0100f10          TST      r0,#0x10              ;219
0000ac  bf04              ITT      EQ                    ;219
0000ae  69e0              LDREQ    r0,[r4,#0x1c]         ;219
0000b0  f0100f01          TSTEQ    r0,#1                 ;219
0000b4  d105              BNE      |L10.194|
0000b6  68e0              LDR      r0,[r4,#0xc]          ;219
0000b8  f0100f04          TST      r0,#4                 ;219
0000bc  bf08              IT       EQ                    ;219
0000be  4648              MOVEQ    r0,r9                 ;219
0000c0  d030              BEQ      |L10.292|
                  |L10.194|
0000c2  68e1              LDR      r1,[r4,#0xc]          ;219
0000c4  2000              MOVS     r0,#0                 ;219
0000c6  f0110f10          TST      r1,#0x10              ;219
0000ca  d006              BEQ      |L10.218|
0000cc  f8d8001c          LDR      r0,[r8,#0x1c]         ;219  ; pFlash
0000d0  f0400002          ORR      r0,r0,#2              ;219
0000d4  f8c8001c          STR      r0,[r8,#0x1c]         ;219  ; pFlash
0000d8  2010              MOVS     r0,#0x10              ;219
                  |L10.218|
0000da  68e1              LDR      r1,[r4,#0xc]          ;219
0000dc  f0110f04          TST      r1,#4                 ;219
0000e0  d007              BEQ      |L10.242|
0000e2  f8d8101c          LDR      r1,[r8,#0x1c]         ;219  ; pFlash
0000e6  f0410101          ORR      r1,r1,#1              ;219
0000ea  f8c8101c          STR      r1,[r8,#0x1c]         ;219  ; pFlash
0000ee  f0400004          ORR      r0,r0,#4              ;219
                  |L10.242|
0000f2  69e1              LDR      r1,[r4,#0x1c]         ;219
0000f4  f0110f01          TST      r1,#1                 ;219
0000f8  d009              BEQ      |L10.270|
0000fa  f8d8101c          LDR      r1,[r8,#0x1c]         ;219  ; pFlash
0000fe  f0410104          ORR      r1,r1,#4              ;219
000102  f8c8101c          STR      r1,[r8,#0x1c]         ;219  ; pFlash
000106  69e1              LDR      r1,[r4,#0x1c]         ;219
000108  f0210101          BIC      r1,r1,#1              ;219
00010c  61e1              STR      r1,[r4,#0x1c]         ;219
                  |L10.270|
00010e  f5a07180          SUB      r1,r0,#0x100          ;219
000112  3901              SUBS     r1,#1                 ;219
000114  bf18              IT       NE                    ;219
000116  60e0              STRNE    r0,[r4,#0xc]          ;219
000118  d103              BNE      |L10.290|
00011a  69e0              LDR      r0,[r4,#0x1c]         ;219
00011c  f0200001          BIC      r0,r0,#1              ;219
000120  61e0              STR      r0,[r4,#0x1c]         ;219
                  |L10.290|
000122  2001              MOVS     r0,#1                 ;219
                  |L10.292|
000124  6921              LDR      r1,[r4,#0x10]         ;244
000126  f0210101          BIC      r1,r1,#1              ;244
00012a  6121              STR      r1,[r4,#0x10]         ;244
00012c  b910              CBNZ     r0,|L10.308|
00012e  1c69              ADDS     r1,r5,#1              ;259
000130  b2cd              UXTB     r5,r1                 ;259
000132  e000              B        |L10.310|
                  |L10.308|
000134  e002              B        |L10.316|
                  |L10.310|
000136  9900              LDR      r1,[sp,#0]            ;259
000138  428d              CMP      r5,r1                 ;259
00013a  d388              BCC      |L10.78|
                  |L10.316|
00013c  f8c89018          STR      r9,[r8,#0x18]         ;265  ; pFlash
000140  b006              ADD      sp,sp,#0x18
000142  e8bd9ff0          POP      {r4-r12,pc}
;;;269    
                          ENDP

000146  0000              DCW      0x0000
                  |L10.328|
                          DCD      ||.bss||
                  |L10.332|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Program_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program_IT PROC
;;;284      */
;;;285    HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  b470              PUSH     {r4-r6}
;;;286    {
;;;287      HAL_StatusTypeDef status = HAL_OK;
;;;288      
;;;289      /* Process Locked */
;;;290      __HAL_LOCK(&pFlash);
000002  f8dfc06c          LDR      r12,|L11.112|
000006  f8dc4018          LDR      r4,[r12,#0x18]  ; pFlash
00000a  2c01              CMP      r4,#1
00000c  bf02              ITTT     EQ
00000e  2002              MOVEQ    r0,#2
;;;291    
;;;292      /* Check the parameters */
;;;293      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;294      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;295    
;;;296    #if defined(FLASH_BANK2_END)
;;;297      /* If procedure already ongoing, reject the next one */
;;;298      if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;299      {
;;;300        return HAL_ERROR;
;;;301      }
;;;302      
;;;303      if(Address <= FLASH_BANK1_END)
;;;304      {
;;;305        /* Enable End of FLASH Operation and Error source interrupts */
;;;306        __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1);
;;;307    
;;;308      }else
;;;309      {
;;;310        /* Enable End of FLASH Operation and Error source interrupts */
;;;311        __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;312      }
;;;313    #else
;;;314      /* Enable End of FLASH Operation and Error source interrupts */
;;;315      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
;;;316    #endif /* FLASH_BANK2_END */
;;;317      
;;;318      pFlash.Address = Address;
;;;319      pFlash.Data = Data;
;;;320    
;;;321      if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;322      {
;;;323        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
;;;324        /* Program halfword (16-bit) at a specified address. */
;;;325        pFlash.DataRemaining = 1U;
;;;326      }
;;;327      else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;328      {
;;;329        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
;;;330        /* Program word (32-bit : 2*16-bit) at a specified address. */
;;;331        pFlash.DataRemaining = 2U;
;;;332      }
;;;333      else
;;;334      {
;;;335        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
;;;336        /* Program double word (64-bit : 4*16-bit) at a specified address. */
;;;337        pFlash.DataRemaining = 4U;
;;;338      }
;;;339    
;;;340      /* Program halfword (16-bit) at a specified address. */
;;;341      FLASH_Program_HalfWord(Address, (uint16_t)Data);
;;;342    
;;;343      return status;
;;;344    }
000010  bc70              POPEQ    {r4-r6}
000012  4770              BXEQ     lr
000014  2501              MOVS     r5,#1                 ;290
000016  f8cc5018          STR      r5,[r12,#0x18]        ;315  ; pFlash
00001a  4c16              LDR      r4,|L11.116|
00001c  6926              LDR      r6,[r4,#0x10]         ;315
00001e  f44656a0          ORR      r6,r6,#0x1400         ;315
000022  6126              STR      r6,[r4,#0x10]         ;315
000024  f8cc1008          STR      r1,[r12,#8]           ;318  ; pFlash
000028  f8cc2010          STR      r2,[r12,#0x10]        ;319  ; pFlash
00002c  f8cc3014          STR      r3,[r12,#0x14]        ;319  ; pFlash
000030  2801              CMP      r0,#1                 ;321
000032  d017              BEQ      |L11.100|
000034  2304              MOVS     r3,#4                 ;329
000036  2802              CMP      r0,#2                 ;327
000038  bf03              ITTTE    EQ                    ;329
00003a  f8cc3000          STREQ    r3,[r12,#0]           ;329  ; pFlash
00003e  2002              MOVEQ    r0,#2                 ;331
000040  f8cc0004          STREQ    r0,[r12,#4]           ;331  ; pFlash
000044  2005              MOVNE    r0,#5                 ;335
000046  bf1c              ITT      NE                    ;335
000048  f8cc0000          STRNE    r0,[r12,#0]           ;335  ; pFlash
00004c  f8cc3004          STRNE    r3,[r12,#4]           ;337  ; pFlash
                  |L11.80|
000050  2000              MOVS     r0,#0                 ;337
000052  f8cc001c          STR      r0,[r12,#0x1c]        ;337  ; pFlash
000056  6923              LDR      r3,[r4,#0x10]         ;337
000058  f0430301          ORR      r3,r3,#1              ;337
00005c  6123              STR      r3,[r4,#0x10]         ;337
00005e  800a              STRH     r2,[r1,#0]            ;337
000060  bc70              POP      {r4-r6}
000062  4770              BX       lr
                  |L11.100|
000064  2003              MOVS     r0,#3                 ;323
000066  f8cc0000          STR      r0,[r12,#0]           ;323  ; pFlash
00006a  f8cc5004          STR      r5,[r12,#4]           ;325  ; pFlash
00006e  e7ef              B        |L11.80|
;;;345    
                          ENDP

                  |L11.112|
                          DCD      ||.bss||
                  |L11.116|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Unlock PROC
;;;674      */
;;;675    HAL_StatusTypeDef HAL_FLASH_Unlock(void)
000000  4806              LDR      r0,|L12.28|
;;;676    {
;;;677      if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
000002  6901              LDR      r1,[r0,#0x10]
000004  f0110f80          TST      r1,#0x80
;;;678      {
;;;679        /* Authorize the FLASH Registers access */
;;;680        WRITE_REG(FLASH->KEYR, FLASH_KEY1);
;;;681        WRITE_REG(FLASH->KEYR, FLASH_KEY2);
;;;682      }
;;;683      else
;;;684      {
;;;685        return HAL_ERROR;
000008  bf04              ITT      EQ
00000a  2001              MOVEQ    r0,#1
;;;686      }
;;;687    
;;;688    #if defined(FLASH_BANK2_END)
;;;689      if (HAL_IS_BIT_SET(FLASH->CR2, FLASH_CR2_LOCK))
;;;690      {
;;;691        /* Authorize the FLASH BANK2 Registers access */
;;;692        WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
;;;693        WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
;;;694      }
;;;695      else
;;;696      {
;;;697        return HAL_ERROR;
;;;698      }
;;;699      
;;;700    #endif /* FLASH_BANK2_END */
;;;701      return HAL_OK; 
;;;702    }
00000c  4770              BXEQ     lr
00000e  4904              LDR      r1,|L12.32|
000010  6041              STR      r1,[r0,#4]            ;680
000012  4904              LDR      r1,|L12.36|
000014  6041              STR      r1,[r0,#4]            ;681
000016  2000              MOVS     r0,#0                 ;701
000018  4770              BX       lr
;;;703    
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
                          DCD      0x40022000
                  |L12.32|
                          DCD      0x45670123
                  |L12.36|
                          DCD      0xcdef89ab

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  pFlash
                          %        32

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F1_V1.6.0\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F1_V1.6.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REVSH|
#line 402
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____RRX|
#line 587
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
