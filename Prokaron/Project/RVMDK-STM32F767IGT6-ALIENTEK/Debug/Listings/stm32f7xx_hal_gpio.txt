; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f7xx_hal_gpio.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f7xx_hal_gpio.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Core -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f7xx_hal_gpio.crf ..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_gpio.c]
                          THUMB

                          AREA ||i.HAL_GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_DeInit PROC
;;;309      */
;;;310    void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;311    {
;;;312      uint32_t position;
;;;313      uint32_t ioposition = 0x00;
;;;314      uint32_t iocurrent = 0x00;
;;;315      uint32_t tmp = 0x00;
;;;316    
;;;317      /* Check the parameters */
;;;318      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;319      
;;;320      /* Configure the port pins */
;;;321      for(position = 0; position < GPIO_NUMBER; position++)
;;;322      {
;;;323        /* Get the IO position */
;;;324        ioposition = ((uint32_t)0x01) << position;
;;;325        /* Get the current IO position */
;;;326        iocurrent = (GPIO_Pin) & ioposition;
;;;327    
;;;328        if(iocurrent == ioposition)
;;;329        {
;;;330          /*------------------------- GPIO Mode Configuration --------------------*/
;;;331          /* Configure IO Direction in Input Floating Mode */
;;;332          GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
;;;333    
;;;334          /* Configure the default Alternate Function in current IO */
;;;335          GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
;;;336    
;;;337          /* Configure the default value for IO Speed */
;;;338          GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
;;;339    
;;;340          /* Configure the default value IO Output Type */
;;;341          GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
;;;342    
;;;343          /* Deactivate the Pull-up and Pull-down resistor for the current IO */
;;;344          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
;;;345    
;;;346          /*------------------------- EXTI Mode Configuration --------------------*/
;;;347          tmp = SYSCFG->EXTICR[position >> 2];
000004  f8dfe11c          LDR      lr,|L1.292|
000008  4689              MOV      r9,r1                 ;311
00000a  2100              MOVS     r1,#0                 ;321
00000c  f04f0a01          MOV      r10,#1                ;324
000010  f04f0b0f          MOV      r11,#0xf              ;335
                  |L1.20|
000014  fa0af401          LSL      r4,r10,r1             ;324
000018  ea090304          AND      r3,r9,r4              ;326
00001c  42a3              CMP      r3,r4                 ;328
00001e  d17b              BNE      |L1.280|
000020  6807              LDR      r7,[r0,#0]            ;332
000022  2503              MOVS     r5,#3                 ;332
000024  004e              LSLS     r6,r1,#1              ;332
000026  08ca              LSRS     r2,r1,#3              ;335
000028  40b5              LSLS     r5,r5,r6              ;332
00002a  43af              BICS     r7,r7,r5              ;332
00002c  6007              STR      r7,[r0,#0]            ;332
00002e  074e              LSLS     r6,r1,#29             ;335
000030  eb000282          ADD      r2,r0,r2,LSL #2       ;335
000034  f8d2c020          LDR      r12,[r2,#0x20]        ;335
000038  ea4f68d6          LSR      r8,r6,#27             ;335
00003c  fa0bf708          LSL      r7,r11,r8             ;335
000040  ea2c0c07          BIC      r12,r12,r7            ;335
000044  f8c2c020          STR      r12,[r2,#0x20]        ;335
;;;348          tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
000048  078f              LSLS     r7,r1,#30
00004a  f0210803          BIC      r8,r1,#3              ;347
00004e  f8d0c008          LDR      r12,[r0,#8]           ;338
000052  0f3f              LSRS     r7,r7,#28
000054  eb08060e          ADD      r6,r8,lr              ;347
;;;349          if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
000058  f8df80cc          LDR      r8,|L1.296|
00005c  fa0bf207          LSL      r2,r11,r7             ;348
000060  ea2c0c05          BIC      r12,r12,r5            ;338
000064  f8c0c008          STR      r12,[r0,#8]           ;338
000068  f8d0c004          LDR      r12,[r0,#4]           ;341
00006c  4540              CMP      r0,r8
00006e  ea2c0c04          BIC      r12,r12,r4            ;341
000072  f8c0c004          STR      r12,[r0,#4]           ;341
000076  68c4              LDR      r4,[r0,#0xc]          ;344
000078  ea240405          BIC      r4,r4,r5              ;344
00007c  60c4              STR      r4,[r0,#0xc]          ;344
00007e  f8d64808          LDR      r4,[r6,#0x808]        ;347
000082  ea020404          AND      r4,r2,r4              ;348
000086  d101              BNE      |L1.140|
000088  2500              MOVS     r5,#0
00008a  e02d              B        |L1.232|
                  |L1.140|
00008c  4d27              LDR      r5,|L1.300|
00008e  42a8              CMP      r0,r5
000090  d101              BNE      |L1.150|
000092  2501              MOVS     r5,#1
000094  e028              B        |L1.232|
                  |L1.150|
000096  4d26              LDR      r5,|L1.304|
000098  42a8              CMP      r0,r5
00009a  d101              BNE      |L1.160|
00009c  2502              MOVS     r5,#2
00009e  e023              B        |L1.232|
                  |L1.160|
0000a0  4d24              LDR      r5,|L1.308|
0000a2  42a8              CMP      r0,r5
0000a4  d101              BNE      |L1.170|
0000a6  2503              MOVS     r5,#3
0000a8  e01e              B        |L1.232|
                  |L1.170|
0000aa  4d23              LDR      r5,|L1.312|
0000ac  42a8              CMP      r0,r5
0000ae  d101              BNE      |L1.180|
0000b0  2504              MOVS     r5,#4
0000b2  e019              B        |L1.232|
                  |L1.180|
0000b4  4d21              LDR      r5,|L1.316|
0000b6  42a8              CMP      r0,r5
0000b8  d101              BNE      |L1.190|
0000ba  2505              MOVS     r5,#5
0000bc  e014              B        |L1.232|
                  |L1.190|
0000be  4d20              LDR      r5,|L1.320|
0000c0  42a8              CMP      r0,r5
0000c2  d101              BNE      |L1.200|
0000c4  2506              MOVS     r5,#6
0000c6  e00f              B        |L1.232|
                  |L1.200|
0000c8  4d1e              LDR      r5,|L1.324|
0000ca  42a8              CMP      r0,r5
0000cc  d101              BNE      |L1.210|
0000ce  2507              MOVS     r5,#7
0000d0  e00a              B        |L1.232|
                  |L1.210|
0000d2  4d1d              LDR      r5,|L1.328|
0000d4  42a8              CMP      r0,r5
0000d6  d101              BNE      |L1.220|
0000d8  2508              MOVS     r5,#8
0000da  e005              B        |L1.232|
                  |L1.220|
0000dc  4d1b              LDR      r5,|L1.332|
0000de  42a8              CMP      r0,r5
0000e0  d101              BNE      |L1.230|
0000e2  2509              MOVS     r5,#9
0000e4  e000              B        |L1.232|
                  |L1.230|
0000e6  250a              MOVS     r5,#0xa
                  |L1.232|
0000e8  40bd              LSLS     r5,r5,r7
0000ea  42a5              CMP      r5,r4
0000ec  d114              BNE      |L1.280|
;;;350          {
;;;351            /* Configure the External Interrupt or event for the current IO */
;;;352            tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
;;;353            SYSCFG->EXTICR[position >> 2] &= ~tmp;
0000ee  f8d65808          LDR      r5,[r6,#0x808]
;;;354    
;;;355            /* Clear EXTI line configuration */
;;;356            EXTI->IMR &= ~((uint32_t)iocurrent);
0000f2  4c17              LDR      r4,|L1.336|
;;;357            EXTI->EMR &= ~((uint32_t)iocurrent);
0000f4  1d27              ADDS     r7,r4,#4
0000f6  4395              BICS     r5,r5,r2              ;353
0000f8  f8c65808          STR      r5,[r6,#0x808]        ;353
0000fc  6826              LDR      r6,[r4,#0]            ;356
;;;358    
;;;359            /* Clear Rising Falling edge configuration */
;;;360            EXTI->RTSR &= ~((uint32_t)iocurrent);
0000fe  1d3a              ADDS     r2,r7,#4
;;;361            EXTI->FTSR &= ~((uint32_t)iocurrent);
000100  1d15              ADDS     r5,r2,#4
000102  439e              BICS     r6,r6,r3              ;356
000104  6026              STR      r6,[r4,#0]            ;356
000106  683c              LDR      r4,[r7,#0]            ;357
000108  439c              BICS     r4,r4,r3              ;357
00010a  603c              STR      r4,[r7,#0]            ;357
00010c  6814              LDR      r4,[r2,#0]            ;360
00010e  439c              BICS     r4,r4,r3              ;360
000110  6014              STR      r4,[r2,#0]            ;360
000112  682a              LDR      r2,[r5,#0]
000114  439a              BICS     r2,r2,r3
000116  602a              STR      r2,[r5,#0]
                  |L1.280|
000118  1c49              ADDS     r1,r1,#1
00011a  2910              CMP      r1,#0x10              ;321
00011c  f4ffaf7a          BCC      |L1.20|
;;;362    	  }
;;;363        }
;;;364      }
;;;365    }
000120  e8bd8ff0          POP      {r4-r11,pc}
;;;366    
                          ENDP

                  |L1.292|
                          DCD      0x40013000
                  |L1.296|
                          DCD      0x40020000
                  |L1.300|
                          DCD      0x40020400
                  |L1.304|
                          DCD      0x40020800
                  |L1.308|
                          DCD      0x40020c00
                  |L1.312|
                          DCD      0x40021000
                  |L1.316|
                          DCD      0x40021400
                  |L1.320|
                          DCD      0x40021800
                  |L1.324|
                          DCD      0x40021c00
                  |L1.328|
                          DCD      0x40022000
                  |L1.332|
                          DCD      0x40022400
                  |L1.336|
                          DCD      0x40013c00

                          AREA ||i.HAL_GPIO_EXTI_Callback||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_EXTI_Callback PROC
;;;512      */
;;;513    __weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
000000  4770              BX       lr
;;;514    {
;;;515      /* Prevent unused argument(s) compilation warning */
;;;516      UNUSED(GPIO_Pin);
;;;517      
;;;518      /* NOTE: This function Should not be modified, when the callback is needed,
;;;519               the HAL_GPIO_EXTI_Callback could be implemented in the user file
;;;520       */
;;;521    }
;;;522    
                          ENDP


                          AREA ||i.HAL_GPIO_EXTI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_EXTI_IRQHandler PROC
;;;497      */
;;;498    void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
000000  4904              LDR      r1,|L3.20|
;;;499    {
000002  b510              PUSH     {r4,lr}
;;;500      /* EXTI line interrupt detected */
;;;501      if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
000004  680a              LDR      r2,[r1,#0]
000006  4202              TST      r2,r0
000008  d002              BEQ      |L3.16|
;;;502      {
;;;503        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
00000a  6008              STR      r0,[r1,#0]
;;;504        HAL_GPIO_EXTI_Callback(GPIO_Pin);
00000c  f7fffffe          BL       HAL_GPIO_EXTI_Callback
                  |L3.16|
;;;505      }
;;;506    }
000010  bd10              POP      {r4,pc}
;;;507    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x40013c14

                          AREA ||i.HAL_GPIO_Init||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_Init PROC
;;;184      */
;;;185    void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;186    {
;;;187      uint32_t position = 0x00;
;;;188      uint32_t ioposition = 0x00;
;;;189      uint32_t iocurrent = 0x00;
;;;190      uint32_t temp = 0x00;
;;;191    
;;;192      /* Check the parameters */
;;;193      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;194      assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
;;;195      assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
;;;196      assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
;;;197    
;;;198      /* Configure the port pins */
;;;199      for(position = 0; position < GPIO_NUMBER; position++)
;;;200      {
;;;201        /* Get the IO position */
;;;202        ioposition = ((uint32_t)0x01) << position;
;;;203        /* Get the current IO position */
;;;204        iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
;;;205    
;;;206        if(iocurrent == ioposition)
;;;207        {
;;;208          /*--------------------- GPIO Mode Configuration ------------------------*/
;;;209          /* In case of Alternate function mode selection */
;;;210          if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
;;;211          {
;;;212            /* Check the Alternate function parameter */
;;;213            assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
;;;214            
;;;215            /* Configure Alternate function mapped with the current IO */
;;;216            temp = GPIOx->AFR[position >> 3];
;;;217            temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
;;;218            temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
;;;219            GPIOx->AFR[position >> 3] = temp;
;;;220          }
;;;221    
;;;222          /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
;;;223          temp = GPIOx->MODER;
;;;224          temp &= ~(GPIO_MODER_MODER0 << (position * 2));
;;;225          temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
;;;226          GPIOx->MODER = temp;
;;;227    
;;;228          /* In case of Output or Alternate function mode selection */
;;;229          if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
;;;230             (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
;;;231          {
;;;232            /* Check the Speed parameter */
;;;233            assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
;;;234            /* Configure the IO Speed */
;;;235            temp = GPIOx->OSPEEDR; 
;;;236            temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
;;;237            temp |= (GPIO_Init->Speed << (position * 2));
;;;238            GPIOx->OSPEEDR = temp;
;;;239    
;;;240            /* Configure the IO Output Type */
;;;241            temp = GPIOx->OTYPER;
;;;242            temp &= ~(GPIO_OTYPER_OT_0 << position) ;
;;;243            temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
;;;244            GPIOx->OTYPER = temp;
;;;245          }
;;;246    
;;;247          /* Activate the Pull-up or Pull down resistor for the current IO */
;;;248          temp = GPIOx->PUPDR;
;;;249          temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
;;;250          temp |= ((GPIO_Init->Pull) << (position * 2));
;;;251          GPIOx->PUPDR = temp;
;;;252    
;;;253          /*--------------------- EXTI Mode Configuration ------------------------*/
;;;254          /* Configure the External Interrupt or event for the current IO */
;;;255          if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
;;;256          {
;;;257            /* Enable SYSCFG Clock */
;;;258            __HAL_RCC_SYSCFG_CLK_ENABLE();
;;;259    
;;;260            temp = SYSCFG->EXTICR[position >> 2];
;;;261            temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
;;;262            temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
;;;263            SYSCFG->EXTICR[position >> 2] = temp;
;;;264    
;;;265            /* Clear EXTI line configuration */
;;;266            temp = EXTI->IMR;
000004  f8dfe19c          LDR      lr,|L4.420|
000008  2200              MOVS     r2,#0                 ;187
00000a  f04f0801          MOV      r8,#1                 ;202
00000e  f04f0b03          MOV      r11,#3                ;224
000012  f04f0a0f          MOV      r10,#0xf              ;217
000016  bf00              NOP                            ;202
                  |L4.24|
000018  680b              LDR      r3,[r1,#0]            ;204
00001a  fa08f402          LSL      r4,r8,r2              ;202
00001e  4023              ANDS     r3,r3,r4              ;204
000020  42a3              CMP      r3,r4                 ;206
000022  d171              BNE      |L4.264|
000024  684d              LDR      r5,[r1,#4]            ;210
000026  2d02              CMP      r5,#2                 ;210
000028  d001              BEQ      |L4.46|
00002a  2d12              CMP      r5,#0x12              ;210
00002c  d10f              BNE      |L4.78|
                  |L4.46|
00002e  08d5              LSRS     r5,r2,#3              ;216
000030  690e              LDR      r6,[r1,#0x10]         ;216
000032  0757              LSLS     r7,r2,#29             ;217
000034  eb000585          ADD      r5,r0,r5,LSL #2       ;216
000038  46a9              MOV      r9,r5                 ;216
00003a  6a2d              LDR      r5,[r5,#0x20]         ;216
00003c  0eff              LSRS     r7,r7,#27             ;217
00003e  fa0afc07          LSL      r12,r10,r7            ;217
000042  40be              LSLS     r6,r6,r7              ;218
000044  ea25050c          BIC      r5,r5,r12             ;217
000048  432e              ORRS     r6,r6,r5              ;218
00004a  f8c96020          STR      r6,[r9,#0x20]         ;219
                  |L4.78|
00004e  790f              LDRB     r7,[r1,#4]            ;225
000050  0055              LSLS     r5,r2,#1              ;224
000052  6806              LDR      r6,[r0,#0]            ;223
000054  fa0bfc05          LSL      r12,r11,r5            ;224
000058  f0070703          AND      r7,r7,#3              ;225
00005c  ea26060c          BIC      r6,r6,r12             ;224
000060  40af              LSLS     r7,r7,r5              ;225
000062  4337              ORRS     r7,r7,r6              ;225
000064  6007              STR      r7,[r0,#0]            ;226
000066  684e              LDR      r6,[r1,#4]            ;229
000068  2e01              CMP      r6,#1                 ;229
00006a  d005              BEQ      |L4.120|
00006c  2e02              CMP      r6,#2                 ;229
00006e  d003              BEQ      |L4.120|
000070  2e11              CMP      r6,#0x11              ;230
000072  d001              BEQ      |L4.120|
000074  2e12              CMP      r6,#0x12              ;230
000076  d10e              BNE      |L4.150|
                  |L4.120|
000078  6886              LDR      r6,[r0,#8]            ;235
00007a  68cf              LDR      r7,[r1,#0xc]          ;237
00007c  ea26060c          BIC      r6,r6,r12             ;236
000080  40af              LSLS     r7,r7,r5              ;237
000082  4337              ORRS     r7,r7,r6              ;237
000084  6087              STR      r7,[r0,#8]            ;238
000086  6846              LDR      r6,[r0,#4]            ;241
000088  790f              LDRB     r7,[r1,#4]            ;243
00008a  43a6              BICS     r6,r6,r4              ;242
00008c  f3c71700          UBFX     r7,r7,#4,#1           ;243
000090  4097              LSLS     r7,r7,r2              ;243
000092  4337              ORRS     r7,r7,r6              ;243
000094  6047              STR      r7,[r0,#4]            ;244
                  |L4.150|
000096  68c4              LDR      r4,[r0,#0xc]          ;248
000098  688e              LDR      r6,[r1,#8]            ;250
00009a  ea24040c          BIC      r4,r4,r12             ;249
00009e  40ae              LSLS     r6,r6,r5              ;250
0000a0  4326              ORRS     r6,r6,r4              ;250
0000a2  60c6              STR      r6,[r0,#0xc]          ;251
0000a4  684c              LDR      r4,[r1,#4]            ;255
0000a6  00e4              LSLS     r4,r4,#3              ;255
0000a8  d575              BPL      |L4.406|
0000aa  4c3f              LDR      r4,|L4.424|
0000ac  6825              LDR      r5,[r4,#0]            ;258
0000ae  f4454580          ORR      r5,r5,#0x4000         ;258
0000b2  6025              STR      r5,[r4,#0]            ;258
0000b4  6824              LDR      r4,[r4,#0]            ;258
0000b6  f0220603          BIC      r6,r2,#3              ;260
0000ba  0795              LSLS     r5,r2,#30             ;261
0000bc  f4044480          AND      r4,r4,#0x4000         ;258
0000c0  9400              STR      r4,[sp,#0]            ;260
0000c2  4c3a              LDR      r4,|L4.428|
0000c4  0f2d              LSRS     r5,r5,#28             ;261
0000c6  4426              ADD      r6,r6,r4              ;260
0000c8  f8d64808          LDR      r4,[r6,#0x808]        ;260
0000cc  f8dfc0e0          LDR      r12,|L4.432|
0000d0  fa0af705          LSL      r7,r10,r5             ;261
0000d4  4560              CMP      r0,r12                ;262
0000d6  ea240407          BIC      r4,r4,r7              ;261
0000da  d101              BNE      |L4.224|
0000dc  2700              MOVS     r7,#0                 ;262
0000de  e02e              B        |L4.318|
                  |L4.224|
0000e0  4f34              LDR      r7,|L4.436|
0000e2  42b8              CMP      r0,r7                 ;262
0000e4  d101              BNE      |L4.234|
0000e6  2701              MOVS     r7,#1                 ;262
0000e8  e029              B        |L4.318|
                  |L4.234|
0000ea  4f33              LDR      r7,|L4.440|
0000ec  42b8              CMP      r0,r7                 ;262
0000ee  d101              BNE      |L4.244|
0000f0  2702              MOVS     r7,#2                 ;262
0000f2  e024              B        |L4.318|
                  |L4.244|
0000f4  4f31              LDR      r7,|L4.444|
0000f6  42b8              CMP      r0,r7                 ;262
0000f8  d101              BNE      |L4.254|
0000fa  2703              MOVS     r7,#3                 ;262
0000fc  e01f              B        |L4.318|
                  |L4.254|
0000fe  4f30              LDR      r7,|L4.448|
000100  42b8              CMP      r0,r7                 ;262
000102  d102              BNE      |L4.266|
000104  2704              MOVS     r7,#4                 ;262
000106  e01a              B        |L4.318|
                  |L4.264|
000108  e045              B        |L4.406|
                  |L4.266|
00010a  4f2e              LDR      r7,|L4.452|
00010c  42b8              CMP      r0,r7                 ;262
00010e  d101              BNE      |L4.276|
000110  2705              MOVS     r7,#5                 ;262
000112  e014              B        |L4.318|
                  |L4.276|
000114  4f2c              LDR      r7,|L4.456|
000116  42b8              CMP      r0,r7                 ;262
000118  d101              BNE      |L4.286|
00011a  2706              MOVS     r7,#6                 ;262
00011c  e00f              B        |L4.318|
                  |L4.286|
00011e  4f2b              LDR      r7,|L4.460|
000120  42b8              CMP      r0,r7                 ;262
000122  d101              BNE      |L4.296|
000124  2707              MOVS     r7,#7                 ;262
000126  e00a              B        |L4.318|
                  |L4.296|
000128  4f29              LDR      r7,|L4.464|
00012a  42b8              CMP      r0,r7                 ;262
00012c  d101              BNE      |L4.306|
00012e  2708              MOVS     r7,#8                 ;262
000130  e005              B        |L4.318|
                  |L4.306|
000132  4f28              LDR      r7,|L4.468|
000134  42b8              CMP      r0,r7                 ;262
000136  d101              BNE      |L4.316|
000138  2709              MOVS     r7,#9                 ;262
00013a  e000              B        |L4.318|
                  |L4.316|
00013c  270a              MOVS     r7,#0xa               ;262
                  |L4.318|
00013e  40af              LSLS     r7,r7,r5              ;262
000140  4327              ORRS     r7,r7,r4              ;262
000142  4675              MOV      r5,lr
000144  f8c67808          STR      r7,[r6,#0x808]        ;263
000148  684e              LDR      r6,[r1,#4]
00014a  f8de4000          LDR      r4,[lr,#0]
;;;267            temp &= ~((uint32_t)iocurrent);
;;;268            if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
00014e  03f6              LSLS     r6,r6,#15
000150  ea240403          BIC      r4,r4,r3              ;267
000154  d500              BPL      |L4.344|
;;;269            {
;;;270              temp |= iocurrent;
000156  431c              ORRS     r4,r4,r3
                  |L4.344|
;;;271            }
;;;272            EXTI->IMR = temp;
;;;273    
;;;274            temp = EXTI->EMR;
000158  4e12              LDR      r6,|L4.420|
00015a  602c              STR      r4,[r5,#0]            ;272
00015c  1d36              ADDS     r6,r6,#4
00015e  684d              LDR      r5,[r1,#4]
000160  6834              LDR      r4,[r6,#0]
;;;275            temp &= ~((uint32_t)iocurrent);
;;;276            if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
000162  03ad              LSLS     r5,r5,#14
000164  ea240403          BIC      r4,r4,r3              ;275
000168  d500              BPL      |L4.364|
;;;277            {
;;;278              temp |= iocurrent;
00016a  431c              ORRS     r4,r4,r3
                  |L4.364|
;;;279            }
;;;280            EXTI->EMR = temp;
;;;281    
;;;282            /* Clear Rising Falling edge configuration */
;;;283            temp = EXTI->RTSR;
00016c  4f0d              LDR      r7,|L4.420|
00016e  6034              STR      r4,[r6,#0]            ;280
000170  3708              ADDS     r7,r7,#8
000172  684d              LDR      r5,[r1,#4]
000174  683c              LDR      r4,[r7,#0]
;;;284            temp &= ~((uint32_t)iocurrent);
;;;285            if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
000176  02ed              LSLS     r5,r5,#11
000178  ea240403          BIC      r4,r4,r3              ;284
00017c  d500              BPL      |L4.384|
;;;286            {
;;;287              temp |= iocurrent;
00017e  431c              ORRS     r4,r4,r3
                  |L4.384|
;;;288            }
;;;289            EXTI->RTSR = temp;
;;;290    
;;;291            temp = EXTI->FTSR;
000180  4d08              LDR      r5,|L4.420|
000182  603c              STR      r4,[r7,#0]            ;289
000184  350c              ADDS     r5,r5,#0xc
000186  684e              LDR      r6,[r1,#4]
000188  682c              LDR      r4,[r5,#0]
;;;292            temp &= ~((uint32_t)iocurrent);
;;;293            if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
00018a  02b6              LSLS     r6,r6,#10
00018c  ea240403          BIC      r4,r4,r3              ;292
000190  d500              BPL      |L4.404|
;;;294            {
;;;295              temp |= iocurrent;
000192  431c              ORRS     r4,r4,r3
                  |L4.404|
;;;296            }
;;;297            EXTI->FTSR = temp;
000194  602c              STR      r4,[r5,#0]
                  |L4.406|
000196  1c52              ADDS     r2,r2,#1
000198  2a10              CMP      r2,#0x10              ;199
00019a  f4ffaf3d          BCC      |L4.24|
;;;298          }
;;;299        }
;;;300      }
;;;301    }
00019e  e8bd8ff8          POP      {r3-r11,pc}
;;;302    
                          ENDP

0001a2  0000              DCW      0x0000
                  |L4.420|
                          DCD      0x40013c00
                  |L4.424|
                          DCD      0x40023844
                  |L4.428|
                          DCD      0x40013000
                  |L4.432|
                          DCD      0x40020000
                  |L4.436|
                          DCD      0x40020400
                  |L4.440|
                          DCD      0x40020800
                  |L4.444|
                          DCD      0x40020c00
                  |L4.448|
                          DCD      0x40021000
                  |L4.452|
                          DCD      0x40021400
                  |L4.456|
                          DCD      0x40021800
                  |L4.460|
                          DCD      0x40021c00
                  |L4.464|
                          DCD      0x40022000
                  |L4.468|
                          DCD      0x40022400

                          AREA ||i.HAL_GPIO_LockPin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_LockPin PROC
;;;464      */
;;;465    HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b508              PUSH     {r3,lr}
;;;466    {
;;;467      __IO uint32_t tmp = GPIO_LCKR_LCKK;
;;;468    
;;;469      /* Check the parameters */
;;;470      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;471    
;;;472      /* Apply lock key write sequence */
;;;473      tmp |= GPIO_Pin;
000002  f4413280          ORR      r2,r1,#0x10000
;;;474      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;475      GPIOx->LCKR = tmp;
000006  9200              STR      r2,[sp,#0]
000008  61c2              STR      r2,[r0,#0x1c]
;;;476      /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
;;;477      GPIOx->LCKR = GPIO_Pin;
00000a  61c1              STR      r1,[r0,#0x1c]
;;;478      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;479      GPIOx->LCKR = tmp;
00000c  9900              LDR      r1,[sp,#0]
00000e  61c1              STR      r1,[r0,#0x1c]
;;;480      /* Read LCKK bit*/
;;;481      tmp = GPIOx->LCKR;
000010  69c1              LDR      r1,[r0,#0x1c]
;;;482    
;;;483     if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
000012  9100              STR      r1,[sp,#0]
000014  69c0              LDR      r0,[r0,#0x1c]
000016  03c0              LSLS     r0,r0,#15
000018  d501              BPL      |L5.30|
;;;484      {
;;;485        return HAL_OK;
00001a  2000              MOVS     r0,#0
;;;486      }
;;;487      else
;;;488      {
;;;489        return HAL_ERROR;
;;;490      }
;;;491    }
00001c  bd08              POP      {r3,pc}
                  |L5.30|
00001e  2001              MOVS     r0,#1                 ;489
000020  bd08              POP      {r3,pc}
;;;492    
                          ENDP


                          AREA ||i.HAL_GPIO_ReadPin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_ReadPin PROC
;;;389      */
;;;390    GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6900              LDR      r0,[r0,#0x10]
;;;391    {
;;;392      GPIO_PinState bitstatus;
;;;393    
;;;394      /* Check the parameters */
;;;395      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;396    
;;;397      if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
000002  4008              ANDS     r0,r0,r1
000004  d000              BEQ      |L6.8|
;;;398      {
;;;399        bitstatus = GPIO_PIN_SET;
000006  2001              MOVS     r0,#1
                  |L6.8|
;;;400      }
;;;401      else
;;;402      {
;;;403        bitstatus = GPIO_PIN_RESET;
;;;404      }
;;;405      return bitstatus;
;;;406    }
000008  4770              BX       lr
;;;407    
                          ENDP


                          AREA ||i.HAL_GPIO_TogglePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_TogglePin PROC
;;;445      */
;;;446    void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6942              LDR      r2,[r0,#0x14]
;;;447    {
;;;448      /* Check the parameters */
;;;449      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;450    
;;;451      GPIOx->ODR ^= GPIO_Pin;
000002  404a              EORS     r2,r2,r1
000004  6142              STR      r2,[r0,#0x14]
;;;452    }
000006  4770              BX       lr
;;;453    
                          ENDP


                          AREA ||i.HAL_GPIO_WritePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_WritePin PROC
;;;423      */
;;;424    void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
000000  b10a              CBZ      r2,|L8.6|
                  |L8.2|
;;;425    {
;;;426      /* Check the parameters */
;;;427      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;428      assert_param(IS_GPIO_PIN_ACTION(PinState));
;;;429    
;;;430      if(PinState != GPIO_PIN_RESET)
;;;431      {
;;;432        GPIOx->BSRR = GPIO_Pin;
000002  6181              STR      r1,[r0,#0x18]
;;;433      }
;;;434      else
;;;435      {
;;;436        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
;;;437      }
;;;438    }
000004  4770              BX       lr
                  |L8.6|
000006  0409              LSLS     r1,r1,#16             ;436
000008  e7fb              B        |L8.2|
;;;439    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F7_V1.11.0\\Drivers\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f7xx_hal_gpio_c_ea787061____REV16|
#line 468 "D:\\Program_Files_x86\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.3.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_stm32f7xx_hal_gpio_c_ea787061____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f7xx_hal_gpio_c_ea787061____REVSH|
#line 483
|__asm___20_stm32f7xx_hal_gpio_c_ea787061____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f7xx_hal_gpio_c_ea787061____RRX|
#line 670
|__asm___20_stm32f7xx_hal_gpio_c_ea787061____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
