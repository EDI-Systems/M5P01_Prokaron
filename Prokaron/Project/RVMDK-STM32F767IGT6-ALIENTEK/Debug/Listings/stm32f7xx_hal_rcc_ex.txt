; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f7xx_hal_rcc_ex.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f7xx_hal_rcc_ex.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Core -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f7xx_hal_rcc_ex.crf ..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_rcc_ex.c]
                          THUMB

                          AREA ||i.HAL_RCCEx_DisablePLLI2S||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_DisablePLLI2S PROC
;;;1663     */
;;;1664   HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1665   {
;;;1666     uint32_t tickstart;
;;;1667   
;;;1668     /* Disable the PLLI2S */
;;;1669     __HAL_RCC_PLLI2S_DISABLE();
000002  4d0a              LDR      r5,|L1.44|
000004  6828              LDR      r0,[r5,#0]
000006  f0206080          BIC      r0,r0,#0x4000000
00000a  6028              STR      r0,[r5,#0]
;;;1670   
;;;1671     /* Wait till PLLI2S is disabled */
;;;1672     tickstart = HAL_GetTick();
00000c  f7fffffe          BL       HAL_GetTick
000010  4604              MOV      r4,r0
;;;1673     while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
000012  e006              B        |L1.34|
                  |L1.20|
;;;1674     {
;;;1675       if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
000014  f7fffffe          BL       HAL_GetTick
000018  1b00              SUBS     r0,r0,r4
00001a  2864              CMP      r0,#0x64
00001c  d901              BLS      |L1.34|
;;;1676       {
;;;1677         /* return in case of Timeout detected */
;;;1678         return HAL_TIMEOUT;
00001e  2003              MOVS     r0,#3
;;;1679       }
;;;1680     }
;;;1681   
;;;1682     return HAL_OK;
;;;1683   }
000020  bd70              POP      {r4-r6,pc}
                  |L1.34|
000022  6828              LDR      r0,[r5,#0]            ;1673
000024  0100              LSLS     r0,r0,#4              ;1673
000026  d4f5              BMI      |L1.20|
000028  2000              MOVS     r0,#0                 ;1682
00002a  bd70              POP      {r4-r6,pc}
;;;1684   
                          ENDP

                  |L1.44|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_DisablePLLSAI||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_DisablePLLSAI PROC
;;;1752     */
;;;1753   HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1754   {
;;;1755     uint32_t tickstart;
;;;1756   
;;;1757     /* Disable the PLLSAI */
;;;1758     __HAL_RCC_PLLSAI_DISABLE();
000002  4d0b              LDR      r5,|L2.48|
000004  6828              LDR      r0,[r5,#0]
000006  f0205080          BIC      r0,r0,#0x10000000
00000a  6028              STR      r0,[r5,#0]
;;;1759   
;;;1760     /* Wait till PLLSAI is disabled */
;;;1761     tickstart = HAL_GetTick();
00000c  f7fffffe          BL       HAL_GetTick
000010  4604              MOV      r4,r0
;;;1762     while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
000012  e006              B        |L2.34|
                  |L2.20|
;;;1763     {
;;;1764       if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
000014  f7fffffe          BL       HAL_GetTick
000018  1b00              SUBS     r0,r0,r4
00001a  2864              CMP      r0,#0x64
00001c  d901              BLS      |L2.34|
;;;1765       {
;;;1766         /* return in case of Timeout detected */
;;;1767         return HAL_TIMEOUT;
00001e  2003              MOVS     r0,#3
;;;1768       }
;;;1769     }
;;;1770   
;;;1771     return HAL_OK;
;;;1772   }
000020  bd70              POP      {r4-r6,pc}
                  |L2.34|
000022  6828              LDR      r0,[r5,#0]            ;1762
000024  43c0              MVNS     r0,r0                 ;1762
000026  0080              LSLS     r0,r0,#2              ;1762
000028  d5f4              BPL      |L2.20|
00002a  2000              MOVS     r0,#0                 ;1771
00002c  bd70              POP      {r4-r6,pc}
;;;1773   
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_EnablePLLI2S||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_EnablePLLI2S PROC
;;;1602     */
;;;1603   HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
000000  b570              PUSH     {r4-r6,lr}
;;;1604   {
;;;1605     uint32_t tickstart;
;;;1606   
;;;1607     /* Check for parameters */
;;;1608     assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SInit->PLLI2SN));
;;;1609     assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SInit->PLLI2SR));
;;;1610     assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
;;;1611   #if defined(RCC_PLLI2SCFGR_PLLI2SP)
;;;1612     assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SInit->PLLI2SP));
;;;1613   #endif /* RCC_PLLI2SCFGR_PLLI2SP */
;;;1614   
;;;1615     /* Disable the PLLI2S */
;;;1616     __HAL_RCC_PLLI2S_DISABLE();
000002  4c1a              LDR      r4,|L3.108|
000004  4605              MOV      r5,r0                 ;1604
000006  6820              LDR      r0,[r4,#0]
000008  f0206080          BIC      r0,r0,#0x4000000
00000c  6020              STR      r0,[r4,#0]
;;;1617   
;;;1618     /* Wait till PLLI2S is disabled */
;;;1619     tickstart = HAL_GetTick();
00000e  f7fffffe          BL       HAL_GetTick
000012  4606              MOV      r6,r0
;;;1620     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
000014  e005              B        |L3.34|
;;;1621     {
;;;1622       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
000016  bf00              NOP      
                  |L3.24|
000018  f7fffffe          BL       HAL_GetTick
00001c  1b80              SUBS     r0,r0,r6
00001e  2864              CMP      r0,#0x64
000020  d81d              BHI      |L3.94|
                  |L3.34|
000022  6820              LDR      r0,[r4,#0]            ;1620
000024  0100              LSLS     r0,r0,#4              ;1620
000026  d4f7              BMI      |L3.24|
;;;1623       {
;;;1624         /* return in case of Timeout detected */
;;;1625         return HAL_TIMEOUT;
;;;1626       }
;;;1627     }
;;;1628   
;;;1629     /* Configure the PLLI2S division factors */
;;;1630   #if defined (STM32F722xx) || defined (STM32F723xx) || defined (STM32F732xx) || defined (STM32F733xx)
;;;1631     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * PLLI2SN */
;;;1632     /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
;;;1633     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;1634     __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
;;;1635   #else
;;;1636     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * PLLI2SN */
;;;1637     /* I2SPCLK = PLLI2S_VCO / PLLI2SP */
;;;1638     /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
;;;1639     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;1640     __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SP, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
000028  682a              LDR      r2,[r5,#0]
00002a  89ab              LDRH     r3,[r5,#0xc]
00002c  7a28              LDRB     r0,[r5,#8]
00002e  0192              LSLS     r2,r2,#6
000030  7929              LDRB     r1,[r5,#4]
000032  ea424303          ORR      r3,r2,r3,LSL #16
000036  4a0d              LDR      r2,|L3.108|
000038  ea436000          ORR      r0,r3,r0,LSL #24
00003c  3284              ADDS     r2,r2,#0x84
00003e  ea407001          ORR      r0,r0,r1,LSL #28
000042  6010              STR      r0,[r2,#0]
;;;1641   #endif /* STM32F722xx || STM32F723xx || STM32F732xx || STM32F733xx */
;;;1642   
;;;1643     /* Enable the PLLI2S */
;;;1644     __HAL_RCC_PLLI2S_ENABLE();
000044  6820              LDR      r0,[r4,#0]
000046  f0406080          ORR      r0,r0,#0x4000000
00004a  6020              STR      r0,[r4,#0]
;;;1645   
;;;1646     /* Wait till PLLI2S is ready */
;;;1647     tickstart = HAL_GetTick();
00004c  f7fffffe          BL       HAL_GetTick
000050  4605              MOV      r5,r0
;;;1648     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
000052  e006              B        |L3.98|
                  |L3.84|
;;;1649     {
;;;1650       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
000054  f7fffffe          BL       HAL_GetTick
000058  1b40              SUBS     r0,r0,r5
00005a  2864              CMP      r0,#0x64
00005c  d901              BLS      |L3.98|
                  |L3.94|
;;;1651       {
;;;1652         /* return in case of Timeout detected */
;;;1653         return HAL_TIMEOUT;
00005e  2003              MOVS     r0,#3
;;;1654       }
;;;1655     }
;;;1656   
;;;1657    return HAL_OK;
;;;1658   }
000060  bd70              POP      {r4-r6,pc}
                  |L3.98|
000062  6820              LDR      r0,[r4,#0]            ;1648
000064  0100              LSLS     r0,r0,#4              ;1648
000066  d5f5              BPL      |L3.84|
000068  2000              MOVS     r0,#0                 ;1657
00006a  bd70              POP      {r4-r6,pc}
;;;1659   
                          ENDP

                  |L3.108|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_EnablePLLSAI||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_EnablePLLSAI PROC
;;;1690     */
;;;1691   HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI(RCC_PLLSAIInitTypeDef  *PLLSAIInit)
000000  b570              PUSH     {r4-r6,lr}
;;;1692   {
;;;1693     uint32_t tickstart;
;;;1694   
;;;1695     /* Check for parameters */
;;;1696     assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIInit->PLLSAIN));
;;;1697     assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIInit->PLLSAIQ));
;;;1698     assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIInit->PLLSAIP));
;;;1699   #if defined(RCC_PLLSAICFGR_PLLSAIR)
;;;1700     assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIInit->PLLSAIR));
;;;1701   #endif /* RCC_PLLSAICFGR_PLLSAIR */
;;;1702   
;;;1703     /* Disable the PLLSAI */
;;;1704     __HAL_RCC_PLLSAI_DISABLE();
000002  4c1c              LDR      r4,|L4.116|
000004  4605              MOV      r5,r0                 ;1692
000006  6820              LDR      r0,[r4,#0]
000008  f0205080          BIC      r0,r0,#0x10000000
00000c  6020              STR      r0,[r4,#0]
;;;1705   
;;;1706     /* Wait till PLLSAI is disabled */
;;;1707     tickstart = HAL_GetTick();
00000e  f7fffffe          BL       HAL_GetTick
000012  4606              MOV      r6,r0
;;;1708     while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
000014  e005              B        |L4.34|
;;;1709     {
;;;1710       if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
000016  bf00              NOP      
                  |L4.24|
000018  f7fffffe          BL       HAL_GetTick
00001c  1b80              SUBS     r0,r0,r6
00001e  2864              CMP      r0,#0x64
000020  d81f              BHI      |L4.98|
                  |L4.34|
000022  6820              LDR      r0,[r4,#0]            ;1708
000024  43c0              MVNS     r0,r0                 ;1708
000026  0080              LSLS     r0,r0,#2              ;1708
000028  d5f6              BPL      |L4.24|
;;;1711       {
;;;1712         /* return in case of Timeout detected */
;;;1713         return HAL_TIMEOUT;
;;;1714       }
;;;1715     }
;;;1716   
;;;1717     /* Configure the PLLSAI division factors */
;;;1718   #if defined (STM32F722xx) || defined (STM32F723xx) || defined (STM32F732xx) || defined (STM32F733xx)
;;;1719     /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * PLLSAIN */
;;;1720     /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
;;;1721     /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
;;;1722     __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIP, PLLSAIInit->PLLSAIQ);
;;;1723   #else
;;;1724     /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * PLLSAIN */
;;;1725     /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
;;;1726     /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
;;;1727     /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
;;;1728     __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIP, \
00002a  682a              LDR      r2,[r5,#0]
00002c  89ab              LDRH     r3,[r5,#0xc]
00002e  7928              LDRB     r0,[r5,#4]
000030  0192              LSLS     r2,r2,#6
000032  7a29              LDRB     r1,[r5,#8]
000034  ea424303          ORR      r3,r2,r3,LSL #16
000038  4a0e              LDR      r2,|L4.116|
00003a  ea436000          ORR      r0,r3,r0,LSL #24
00003e  3288              ADDS     r2,r2,#0x88
000040  ea407001          ORR      r0,r0,r1,LSL #28
000044  6010              STR      r0,[r2,#0]
;;;1729                             PLLSAIInit->PLLSAIQ, PLLSAIInit->PLLSAIR);
;;;1730   #endif /* STM32F722xx || STM32F723xx || STM32F732xx || STM32F733xx */
;;;1731   
;;;1732     /* Enable the PLLSAI */
;;;1733     __HAL_RCC_PLLSAI_ENABLE();
000046  6820              LDR      r0,[r4,#0]
000048  f0405080          ORR      r0,r0,#0x10000000
00004c  6020              STR      r0,[r4,#0]
;;;1734   
;;;1735     /* Wait till PLLSAI is ready */
;;;1736     tickstart = HAL_GetTick();
00004e  f7fffffe          BL       HAL_GetTick
000052  4605              MOV      r5,r0
;;;1737     while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
000054  e007              B        |L4.102|
;;;1738     {
;;;1739       if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
000056  bf00              NOP      
                  |L4.88|
000058  f7fffffe          BL       HAL_GetTick
00005c  1b40              SUBS     r0,r0,r5
00005e  2864              CMP      r0,#0x64
000060  d901              BLS      |L4.102|
                  |L4.98|
;;;1740       {
;;;1741         /* return in case of Timeout detected */
;;;1742         return HAL_TIMEOUT;
000062  2003              MOVS     r0,#3
;;;1743       }
;;;1744     }
;;;1745   
;;;1746    return HAL_OK;
;;;1747   }
000064  bd70              POP      {r4-r6,pc}
                  |L4.102|
000066  6820              LDR      r0,[r4,#0]            ;1737
000068  43c0              MVNS     r0,r0                 ;1737
00006a  0080              LSLS     r0,r0,#2              ;1737
00006c  d4f4              BMI      |L4.88|
00006e  2000              MOVS     r0,#0                 ;1746
000070  bd70              POP      {r4-r6,pc}
;;;1748   
                          ENDP

000072  0000              DCW      0x0000
                  |L4.116|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_GetPeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKConfig PROC
;;;681      */
;;;682    void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  4b52              LDR      r3,|L5.332|
;;;683    {
000002  b530              PUSH     {r4,r5,lr}
;;;684      uint32_t tempreg = 0;
;;;685      
;;;686      /* Set all possible values for the extended clock type parameter------------*/
;;;687    #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
;;;688      PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
000004  4950              LDR      r1,|L5.328|
;;;689                                            RCC_PERIPHCLK_SAI1     | RCC_PERIPHCLK_SAI2     |\
;;;690                                            RCC_PERIPHCLK_TIM      | RCC_PERIPHCLK_RTC      |\
;;;691                                            RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_I2C4     |\
;;;692                                            RCC_PERIPHCLK_I2C1     | RCC_PERIPHCLK_I2C2     |\
;;;693                                            RCC_PERIPHCLK_I2C3     | RCC_PERIPHCLK_USART1   |\
;;;694                                            RCC_PERIPHCLK_USART2   | RCC_PERIPHCLK_USART3   |\
;;;695                                            RCC_PERIPHCLK_UART4    | RCC_PERIPHCLK_UART5    |\
;;;696                                            RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
;;;697                                            RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
;;;698                                            RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
;;;699                                            RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
;;;700    #else  
;;;701      PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
;;;702                                            RCC_PERIPHCLK_SAI1     | RCC_PERIPHCLK_SAI2     |\
;;;703                                            RCC_PERIPHCLK_TIM      | RCC_PERIPHCLK_RTC      |\
;;;704                                            RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_I2C4     |\
;;;705                                            RCC_PERIPHCLK_I2C1     | RCC_PERIPHCLK_I2C2     |\
;;;706                                            RCC_PERIPHCLK_I2C3     | RCC_PERIPHCLK_USART1   |\
;;;707                                            RCC_PERIPHCLK_USART2   | RCC_PERIPHCLK_USART3   |\
;;;708                                            RCC_PERIPHCLK_UART4    | RCC_PERIPHCLK_UART5    |\
;;;709                                            RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
;;;710                                            RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
;;;711                                            RCC_PERIPHCLK_CLK48;
;;;712    #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
;;;713      
;;;714      /* Get the PLLI2S Clock configuration -----------------------------------------------*/
;;;715      PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
;;;716      PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
;;;717      PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
;;;718      PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
;;;719      
;;;720      /* Get the PLLSAI Clock configuration -----------------------------------------------*/
;;;721      PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
000006  6001              STR      r1,[r0,#0]
000008  1d19              ADDS     r1,r3,#4
00000a  681c              LDR      r4,[r3,#0]            ;715
;;;722      PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
;;;723      PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos); 
;;;724      PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos); 
;;;725      
;;;726      /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
;;;727      PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
00000c  1d0a              ADDS     r2,r1,#4
00000e  f3c41488          UBFX     r4,r4,#6,#9           ;715
000012  6044              STR      r4,[r0,#4]            ;716
000014  681c              LDR      r4,[r3,#0]            ;716
000016  f3c44401          UBFX     r4,r4,#16,#2          ;716
00001a  6104              STR      r4,[r0,#0x10]         ;717
00001c  681c              LDR      r4,[r3,#0]            ;717
00001e  f3c46403          UBFX     r4,r4,#24,#4          ;717
000022  60c4              STR      r4,[r0,#0xc]          ;718
000024  681b              LDR      r3,[r3,#0]            ;718
000026  f3c37302          UBFX     r3,r3,#28,#3          ;718
00002a  6083              STR      r3,[r0,#8]            ;721
00002c  680b              LDR      r3,[r1,#0]            ;721
00002e  f3c31388          UBFX     r3,r3,#6,#9           ;721
000032  6143              STR      r3,[r0,#0x14]         ;722
000034  680b              LDR      r3,[r1,#0]            ;722
000036  f3c34301          UBFX     r3,r3,#16,#2          ;722
;;;728      PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
;;;729      PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
;;;730    
;;;731      /* Get the SAI1 clock configuration ----------------------------------------------*/
;;;732      PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
;;;733      
;;;734      /* Get the SAI2 clock configuration ----------------------------------------------*/
;;;735      PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
;;;736      
;;;737      /* Get the I2S clock configuration ------------------------------------------*/
;;;738      PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
00003a  6203              STR      r3,[r0,#0x20]
00003c  4b43              LDR      r3,|L5.332|
00003e  680c              LDR      r4,[r1,#0]            ;723
000040  3b7c              SUBS     r3,r3,#0x7c
000042  f3c46403          UBFX     r4,r4,#24,#4          ;723
000046  6184              STR      r4,[r0,#0x18]         ;724
000048  6809              LDR      r1,[r1,#0]            ;724
00004a  f3c17102          UBFX     r1,r1,#28,#3          ;724
;;;739      
;;;740      /* Get the I2C1 clock configuration ------------------------------------------*/
;;;741      PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
00004e  61c1              STR      r1,[r0,#0x1c]
000050  6814              LDR      r4,[r2,#0]            ;727
000052  1d11              ADDS     r1,r2,#4
000054  f004041f          AND      r4,r4,#0x1f           ;727
000058  6244              STR      r4,[r0,#0x24]         ;728
00005a  6814              LDR      r4,[r2,#0]            ;728
00005c  f3c42404          UBFX     r4,r4,#8,#5           ;728
000060  6284              STR      r4,[r0,#0x28]         ;729
000062  6814              LDR      r4,[r2,#0]            ;729
000064  f3c44401          UBFX     r4,r4,#16,#2          ;729
000068  62c4              STR      r4,[r0,#0x2c]         ;732
00006a  6814              LDR      r4,[r2,#0]            ;732
00006c  f4041440          AND      r4,r4,#0x300000       ;732
000070  63c4              STR      r4,[r0,#0x3c]         ;735
000072  6814              LDR      r4,[r2,#0]            ;735
000074  f4040440          AND      r4,r4,#0xc00000       ;735
000078  6404              STR      r4,[r0,#0x40]         ;738
00007a  681c              LDR      r4,[r3,#0]            ;738
00007c  f4040400          AND      r4,r4,#0x800000       ;738
000080  6344              STR      r4,[r0,#0x34]
000082  680c              LDR      r4,[r1,#0]
000084  f4043440          AND      r4,r4,#0x30000
;;;742      
;;;743      /* Get the I2C2 clock configuration ------------------------------------------*/
;;;744      PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
000088  6644              STR      r4,[r0,#0x64]
00008a  680c              LDR      r4,[r1,#0]
00008c  f4042440          AND      r4,r4,#0xc0000
;;;745      
;;;746      /* Get the I2C3 clock configuration ------------------------------------------*/
;;;747      PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
000090  6684              STR      r4,[r0,#0x68]
000092  680c              LDR      r4,[r1,#0]
000094  f4041440          AND      r4,r4,#0x300000
;;;748      
;;;749      /* Get the I2C4 clock configuration ------------------------------------------*/
;;;750      PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
000098  66c4              STR      r4,[r0,#0x6c]
00009a  680c              LDR      r4,[r1,#0]
00009c  f4040440          AND      r4,r4,#0xc00000
;;;751      
;;;752      /* Get the USART1 clock configuration ------------------------------------------*/
;;;753      PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
0000a0  6704              STR      r4,[r0,#0x70]
0000a2  680c              LDR      r4,[r1,#0]
0000a4  f0040403          AND      r4,r4,#3
;;;754      
;;;755      /* Get the USART2 clock configuration ------------------------------------------*/
;;;756      PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
0000a8  6444              STR      r4,[r0,#0x44]
0000aa  680c              LDR      r4,[r1,#0]
0000ac  f004040c          AND      r4,r4,#0xc
;;;757      
;;;758      /* Get the USART3 clock configuration ------------------------------------------*/
;;;759      PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
0000b0  6484              STR      r4,[r0,#0x48]
0000b2  680c              LDR      r4,[r1,#0]
0000b4  f0040430          AND      r4,r4,#0x30
;;;760      
;;;761      /* Get the UART4 clock configuration ------------------------------------------*/
;;;762      PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
0000b8  64c4              STR      r4,[r0,#0x4c]
0000ba  680c              LDR      r4,[r1,#0]
0000bc  f00404c0          AND      r4,r4,#0xc0
;;;763      
;;;764      /* Get the UART5 clock configuration ------------------------------------------*/
;;;765      PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
0000c0  6504              STR      r4,[r0,#0x50]
0000c2  680c              LDR      r4,[r1,#0]
0000c4  f4047440          AND      r4,r4,#0x300
;;;766      
;;;767      /* Get the USART6 clock configuration ------------------------------------------*/
;;;768      PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
0000c8  6544              STR      r4,[r0,#0x54]
0000ca  680c              LDR      r4,[r1,#0]
0000cc  f4046440          AND      r4,r4,#0xc00
;;;769      
;;;770      /* Get the UART7 clock configuration ------------------------------------------*/
;;;771      PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
0000d0  6584              STR      r4,[r0,#0x58]
0000d2  680c              LDR      r4,[r1,#0]
0000d4  f4045440          AND      r4,r4,#0x3000
;;;772      
;;;773      /* Get the UART8 clock configuration ------------------------------------------*/
;;;774      PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
0000d8  65c4              STR      r4,[r0,#0x5c]
0000da  680c              LDR      r4,[r1,#0]
0000dc  f4044440          AND      r4,r4,#0xc000
;;;775      
;;;776      /* Get the LPTIM1 clock configuration ------------------------------------------*/
;;;777      PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
0000e0  6604              STR      r4,[r0,#0x60]
0000e2  680c              LDR      r4,[r1,#0]
0000e4  f0047440          AND      r4,r4,#0x3000000
;;;778      
;;;779      /* Get the CEC clock configuration -----------------------------------------------*/
;;;780      PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
;;;781      
;;;782      /* Get the CK48 clock configuration -----------------------------------------------*/
;;;783      PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
;;;784    
;;;785      /* Get the SDMMC1 clock configuration -----------------------------------------------*/
;;;786      PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
;;;787      
;;;788    #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
;;;789      /* Get the SDMMC2 clock configuration -----------------------------------------------*/
;;;790      PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
;;;791    	
;;;792      /* Get the DFSDM clock configuration -----------------------------------------------*/
;;;793      PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
;;;794      
;;;795      /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
;;;796      PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
;;;797    #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
;;;798      
;;;799      /* Get the RTC Clock configuration -----------------------------------------------*/
;;;800      tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
;;;801      PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
0000e8  6744              STR      r4,[r0,#0x74]
0000ea  4c18              LDR      r4,|L5.332|
0000ec  680d              LDR      r5,[r1,#0]            ;780
0000ee  3c14              SUBS     r4,r4,#0x14
0000f0  f0056580          AND      r5,r5,#0x4000000      ;780
0000f4  6785              STR      r5,[r0,#0x78]         ;783
0000f6  680d              LDR      r5,[r1,#0]            ;783
0000f8  f0056500          AND      r5,r5,#0x8000000      ;783
0000fc  67c5              STR      r5,[r0,#0x7c]         ;786
0000fe  680d              LDR      r5,[r1,#0]            ;786
000100  f0055580          AND      r5,r5,#0x10000000     ;786
000104  f8c05080          STR      r5,[r0,#0x80]         ;790
000108  6809              LDR      r1,[r1,#0]            ;790
00010a  f0015100          AND      r1,r1,#0x20000000     ;790
00010e  f8c01084          STR      r1,[r0,#0x84]         ;793
000112  6811              LDR      r1,[r2,#0]            ;793
000114  f0017100          AND      r1,r1,#0x2000000      ;793
000118  f8c01088          STR      r1,[r0,#0x88]         ;796
00011c  6811              LDR      r1,[r2,#0]            ;796
00011e  f0016180          AND      r1,r1,#0x4000000      ;796
000122  f8c0108c          STR      r1,[r0,#0x8c]         ;800
000126  6819              LDR      r1,[r3,#0]            ;800
000128  6823              LDR      r3,[r4,#0]
00012a  f40111f8          AND      r1,r1,#0x1f0000       ;800
00012e  f4037340          AND      r3,r3,#0x300
000132  430b              ORRS     r3,r3,r1
;;;802      
;;;803      /* Get the TIM Prescaler configuration --------------------------------------------*/
;;;804      if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
000134  6303              STR      r3,[r0,#0x30]
000136  6811              LDR      r1,[r2,#0]
000138  01c9              LSLS     r1,r1,#7
00013a  d401              BMI      |L5.320|
;;;805      {
;;;806        PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
00013c  2100              MOVS     r1,#0
00013e  e001              B        |L5.324|
                  |L5.320|
;;;807      }
;;;808      else
;;;809      {
;;;810        PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
000140  f04f7180          MOV      r1,#0x1000000
                  |L5.324|
000144  6381              STR      r1,[r0,#0x38]         ;806
;;;811      }
;;;812    }
000146  bd30              POP      {r4,r5,pc}
;;;813    #endif /* STM32F745xx || STM32F746xx || STM32F756xx || STM32F765xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
                          ENDP

                  |L5.328|
                          DCD      0x1cfffff1
                  |L5.332|
                          DCD      0x40023884

                          AREA ||i.HAL_RCCEx_GetPeriphCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKFreq PROC
;;;1399     */
;;;1400   uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1401   {
;;;1402     uint32_t tmpreg = 0;
;;;1403     /* This variable is used to store the SAI clock frequency (value in Hz) */
;;;1404     uint32_t frequency = 0;
;;;1405     /* This variable is used to store the VCO Input (value in Hz) */
;;;1406     uint32_t vcoinput = 0;
;;;1407     /* This variable is used to store the SAI clock source */
;;;1408     uint32_t saiclocksource = 0;
;;;1409     
;;;1410     if (PeriphClk == RCC_PERIPHCLK_SAI1)
;;;1411     {
;;;1412       saiclocksource = RCC->DCKCFGR1;   
;;;1413       saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
;;;1414       switch (saiclocksource)
;;;1415       {
;;;1416       case 0: /* PLLSAI is the clock source for SAI1 */ 
;;;1417         {
;;;1418           /* Configure the PLLSAI division factor */
;;;1419           /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */ 
;;;1420           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
;;;1421           {
;;;1422             /* In Case the PLL Source is HSI (Internal Clock) */
;;;1423             vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
;;;1424           }
;;;1425           else
;;;1426           {
;;;1427             /* In Case the PLL Source is HSE (External Clock) */
;;;1428             vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
;;;1429           }   
;;;1430           /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
;;;1431           /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
;;;1432           tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
000002  4d40              LDR      r5,|L6.260|
000004  f5b02f00          CMP      r0,#0x80000           ;1410
000008  4b3c              LDR      r3,|L6.252|
00000a  f44f1e80          MOV      lr,#0x100000          ;1414
00000e  4c3c              LDR      r4,|L6.256|
;;;1433           frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
;;;1434           
;;;1435           /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
;;;1436           tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
;;;1437           frequency = frequency/(tmpreg); 
;;;1438           break;       
;;;1439         }
;;;1440       case RCC_DCKCFGR1_SAI1SEL_0: /* PLLI2S is the clock source for SAI1 */
;;;1441         {  
;;;1442           /* Configure the PLLI2S division factor */
;;;1443           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */ 
;;;1444           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
;;;1445           {
;;;1446             /* In Case the PLL Source is HSI (Internal Clock) */
;;;1447             vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
;;;1448           }
;;;1449           else
;;;1450           {
;;;1451             /* In Case the PLL Source is HSE (External Clock) */
;;;1452             vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
;;;1453           }
;;;1454           
;;;1455           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
;;;1456           /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
;;;1457           tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
000010  f1a50604          SUB      r6,r5,#4
;;;1458           frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
;;;1459           
;;;1460           /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
;;;1461           tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
;;;1462           frequency = frequency/(tmpreg);
;;;1463           break;
;;;1464         }
;;;1465       case RCC_DCKCFGR1_SAI1SEL_1: /* External clock is the clock source for SAI1 */
;;;1466         {
;;;1467           frequency = EXTERNAL_CLOCK_VALUE;
000014  4f3c              LDR      r7,|L6.264|
000016  f1050204          ADD      r2,r5,#4              ;1412
00001a  493c              LDR      r1,|L6.268|
00001c  4684              MOV      r12,r0                ;1401
00001e  f04f0000          MOV      r0,#0                 ;1404
000022  d010              BEQ      |L6.70|
;;;1468           break;       
;;;1469         }
;;;1470   #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)      
;;;1471       case RCC_DCKCFGR1_SAI1SEL: /* HSI or HSE is the clock source for SAI*/
;;;1472         {
;;;1473           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
;;;1474           {
;;;1475             /* In Case the main PLL Source is HSI */
;;;1476             frequency = HSI_VALUE;
;;;1477           }
;;;1478           else
;;;1479           {
;;;1480             /* In Case the main PLL Source is HSE */
;;;1481             frequency = HSE_VALUE;
;;;1482           }
;;;1483           break;       
;;;1484         }
;;;1485   #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
;;;1486       default :
;;;1487         {
;;;1488           break;
;;;1489         }
;;;1490       }
;;;1491     }
;;;1492     
;;;1493     if (PeriphClk == RCC_PERIPHCLK_SAI2)
000024  45f4              CMP      r12,lr
000026  d11f              BNE      |L6.104|
;;;1494     {
;;;1495       saiclocksource = RCC->DCKCFGR1;   
000028  f8d2c000          LDR      r12,[r2,#0]
;;;1496       saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
00002c  f41c0c40          ANDS     r12,r12,#0xc00000
;;;1497       switch (saiclocksource)
000030  d01b              BEQ      |L6.106|
000032  f5bc0f80          CMP      r12,#0x400000
000036  d042              BEQ      |L6.190|
000038  f5bc0f00          CMP      r12,#0x800000
00003c  d05a              BEQ      |L6.244|
00003e  f5bc0f40          CMP      r12,#0xc00000
000042  d111              BNE      |L6.104|
000044  e00c              B        |L6.96|
                  |L6.70|
000046  f8d2c000          LDR      r12,[r2,#0]           ;1412
00004a  f41c1c40          ANDS     r12,r12,#0x300000     ;1413
00004e  d00c              BEQ      |L6.106|
000050  45f4              CMP      r12,lr                ;1414
000052  d01c              BEQ      |L6.142|
000054  f5bc1f00          CMP      r12,#0x200000         ;1414
000058  d04c              BEQ      |L6.244|
00005a  f5bc1f40          CMP      r12,#0x300000         ;1414
00005e  d103              BNE      |L6.104|
                  |L6.96|
000060  6808              LDR      r0,[r1,#0]            ;1473
000062  0240              LSLS     r0,r0,#9              ;1473
000064  d448              BMI      |L6.248|
;;;1498       {
;;;1499       case 0: /* PLLSAI is the clock source for SAI*/ 
;;;1500         {
;;;1501           /* Configure the PLLSAI division factor */
;;;1502           /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */ 
;;;1503           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
;;;1504           {
;;;1505             /* In Case the PLL Source is HSI (Internal Clock) */
;;;1506             vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
;;;1507           }
;;;1508           else
;;;1509           {
;;;1510             /* In Case the PLL Source is HSE (External Clock) */
;;;1511             vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
;;;1512           }   
;;;1513           /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
;;;1514           /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
;;;1515           tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
;;;1516           frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
;;;1517           
;;;1518           /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
;;;1519           tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
;;;1520           frequency = frequency/(tmpreg); 
;;;1521           break;       
;;;1522         }
;;;1523       case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
;;;1524         {  
;;;1525           /* Configure the PLLI2S division factor */
;;;1526           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */ 
;;;1527           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
;;;1528           {
;;;1529             /* In Case the PLL Source is HSI (Internal Clock) */
;;;1530             vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
;;;1531           }
;;;1532           else
;;;1533           {
;;;1534             /* In Case the PLL Source is HSE (External Clock) */
;;;1535             vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
;;;1536           }
;;;1537           
;;;1538           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
;;;1539           /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
;;;1540           tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
;;;1541           frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
;;;1542           
;;;1543           /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
;;;1544           tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
;;;1545           frequency = frequency/(tmpreg);
;;;1546           break;
;;;1547         }
;;;1548       case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
;;;1549         {
;;;1550           frequency = EXTERNAL_CLOCK_VALUE;
;;;1551           break;       
;;;1552         }
;;;1553   #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
;;;1554       case RCC_DCKCFGR1_SAI2SEL: /* HSI or HSE is the clock source for SAI2 */
;;;1555         {
;;;1556           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
;;;1557           {
;;;1558             /* In Case the main PLL Source is HSI */
;;;1559             frequency = HSI_VALUE;
000066  4618              MOV      r0,r3
                  |L6.104|
;;;1560           }
;;;1561           else
;;;1562           {
;;;1563             /* In Case the main PLL Source is HSE */
;;;1564             frequency = HSE_VALUE;
;;;1565           }
;;;1566           break;       
;;;1567         }
;;;1568   #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
;;;1569       default :
;;;1570         {
;;;1571           break;
;;;1572         }
;;;1573       }
;;;1574     }
;;;1575     
;;;1576     return frequency;
;;;1577   }
000068  bdf0              POP      {r4-r7,pc}
                  |L6.106|
00006a  6808              LDR      r0,[r1,#0]            ;1420
00006c  0240              LSLS     r0,r0,#9              ;1420
00006e  6808              LDR      r0,[r1,#0]            ;1511
000070  f000003f          AND      r0,r0,#0x3f           ;1511
000074  d420              BMI      |L6.184|
000076  fbb3f0f0          UDIV     r0,r3,r0              ;1506
                  |L6.122|
00007a  6829              LDR      r1,[r5,#0]            ;1432
00007c  682b              LDR      r3,[r5,#0]            ;1433
00007e  6814              LDR      r4,[r2,#0]            ;1436
000080  f3c16203          UBFX     r2,r1,#24,#4          ;1432
000084  f3c31388          UBFX     r3,r3,#6,#9           ;1433
000088  f3c42104          UBFX     r1,r4,#8,#5           ;1436
00008c  e02b              B        |L6.230|
                  |L6.142|
00008e  6808              LDR      r0,[r1,#0]            ;1444
000090  0240              LSLS     r0,r0,#9              ;1444
000092  6808              LDR      r0,[r1,#0]            ;1452
000094  f000003f          AND      r0,r0,#0x3f           ;1452
000098  d402              BMI      |L6.160|
00009a  fbb3f0f0          UDIV     r0,r3,r0              ;1447
00009e  e001              B        |L6.164|
                  |L6.160|
0000a0  fbb4f0f0          UDIV     r0,r4,r0              ;1452
                  |L6.164|
0000a4  6831              LDR      r1,[r6,#0]            ;1457
0000a6  6833              LDR      r3,[r6,#0]            ;1458
0000a8  6814              LDR      r4,[r2,#0]            ;1461
0000aa  f3c16203          UBFX     r2,r1,#24,#4          ;1457
0000ae  f004011f          AND      r1,r4,#0x1f           ;1461
0000b2  f3c31388          UBFX     r3,r3,#6,#9           ;1458
0000b6  e016              B        |L6.230|
                  |L6.184|
0000b8  fbb4f0f0          UDIV     r0,r4,r0              ;1511
0000bc  e7dd              B        |L6.122|
                  |L6.190|
0000be  6808              LDR      r0,[r1,#0]            ;1527
0000c0  0240              LSLS     r0,r0,#9              ;1527
0000c2  6808              LDR      r0,[r1,#0]            ;1535
0000c4  f000003f          AND      r0,r0,#0x3f           ;1535
0000c8  d402              BMI      |L6.208|
0000ca  fbb3f0f0          UDIV     r0,r3,r0              ;1530
0000ce  e001              B        |L6.212|
                  |L6.208|
0000d0  fbb4f0f0          UDIV     r0,r4,r0              ;1535
                  |L6.212|
0000d4  6834              LDR      r4,[r6,#0]            ;1540
0000d6  6833              LDR      r3,[r6,#0]            ;1541
0000d8  6811              LDR      r1,[r2,#0]            ;1544
0000da  f3c46203          UBFX     r2,r4,#24,#4          ;1540
0000de  f001011f          AND      r1,r1,#0x1f           ;1544
0000e2  f3c31388          UBFX     r3,r3,#6,#9           ;1541
                  |L6.230|
0000e6  4343              MULS     r3,r0,r3              ;1516
0000e8  1c49              ADDS     r1,r1,#1              ;1516
0000ea  fbb3f0f2          UDIV     r0,r3,r2              ;1516
0000ee  fbb0f0f1          UDIV     r0,r0,r1              ;1520
0000f2  bdf0              POP      {r4-r7,pc}
                  |L6.244|
0000f4  4638              MOV      r0,r7                 ;1550
0000f6  bdf0              POP      {r4-r7,pc}
                  |L6.248|
0000f8  4620              MOV      r0,r4                 ;1564
0000fa  bdf0              POP      {r4-r7,pc}
;;;1578   
                          ENDP

                  |L6.252|
                          DCD      0x00f42400
                  |L6.256|
                          DCD      0x017d7840
                  |L6.260|
                          DCD      0x40023888
                  |L6.264|
                          DCD      0x00bb8000
                  |L6.268|
                          DCD      0x40023804

                          AREA ||i.HAL_RCCEx_PeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_PeriphCLKConfig PROC
;;;121      */
;;;122    HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;123    {
000004  4604              MOV      r4,r0
;;;124      uint32_t tickstart = 0;
;;;125      uint32_t tmpreg0 = 0;
;;;126      uint32_t tmpreg1 = 0;
;;;127      uint32_t plli2sused = 0;
;;;128      uint32_t pllsaiused = 0;
;;;129        
;;;130      /* Check the parameters */
;;;131      assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
;;;132      
;;;133      /*----------------------------------- I2S configuration ----------------------------------*/
;;;134      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
000006  7800              LDRB     r0,[r0,#0]
;;;135      {
;;;136        /* Check the parameters */
;;;137        assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
;;;138        
;;;139        /* Configure I2S Clock source */
;;;140        __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
000008  f8df9424          LDR      r9,|L7.1072|
00000c  f04f0600          MOV      r6,#0                 ;127
000010  4637              MOV      r7,r6                 ;128
000012  07c0              LSLS     r0,r0,#31             ;134
000014  d00e              BEQ      |L7.52|
000016  f8d91000          LDR      r1,[r9,#0]
00001a  f4210100          BIC      r1,r1,#0x800000
00001e  f8c91000          STR      r1,[r9,#0]
000022  f8d91000          LDR      r1,[r9,#0]
000026  6b62              LDR      r2,[r4,#0x34]
000028  4311              ORRS     r1,r1,r2
00002a  f8c91000          STR      r1,[r9,#0]
;;;141        
;;;142        /* Enable the PLLI2S when it's used as clock source for I2S */
;;;143        if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
00002e  6b60              LDR      r0,[r4,#0x34]
000030  b900              CBNZ     r0,|L7.52|
;;;144        {
;;;145          plli2sused = 1; 
000032  2601              MOVS     r6,#1
                  |L7.52|
;;;146        }
;;;147      }
;;;148      
;;;149      /*------------------------------------ SAI1 configuration --------------------------------------*/
;;;150      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
;;;151      {
;;;152        /* Check the parameters */
;;;153        assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
;;;154        
;;;155        /* Configure SAI1 Clock source */
;;;156        __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
000034  4dfe              LDR      r5,|L7.1072|
000036  6820              LDR      r0,[r4,#0]            ;150
000038  3584              ADDS     r5,r5,#0x84
00003a  0300              LSLS     r0,r0,#12             ;150
00003c  d50e              BPL      |L7.92|
00003e  6be1              LDR      r1,[r4,#0x3c]
000040  6828              LDR      r0,[r5,#0]
000042  f4201040          BIC      r0,r0,#0x300000
000046  4308              ORRS     r0,r0,r1
000048  6028              STR      r0,[r5,#0]
;;;157        /* Enable the PLLI2S when it's used as clock source for SAI */
;;;158        if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
00004a  6be0              LDR      r0,[r4,#0x3c]
00004c  f5b01f80          CMP      r0,#0x100000
000050  d001              BEQ      |L7.86|
;;;159        {
;;;160          plli2sused = 1; 
;;;161        }
;;;162        /* Enable the PLLSAI when it's used as clock source for SAI */
;;;163        if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
000052  b110              CBZ      r0,|L7.90|
000054  e002              B        |L7.92|
                  |L7.86|
000056  2601              MOVS     r6,#1                 ;160
000058  e000              B        |L7.92|
                  |L7.90|
;;;164        {
;;;165          pllsaiused = 1; 
00005a  2701              MOVS     r7,#1
                  |L7.92|
;;;166        }
;;;167      }
;;;168      
;;;169      /*------------------------------------ SAI2 configuration --------------------------------------*/
;;;170      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
00005c  6820              LDR      r0,[r4,#0]
;;;171      {
;;;172        /* Check the parameters */
;;;173        assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
;;;174        
;;;175        /* Configure SAI2 Clock source */
;;;176        __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
;;;177        
;;;178        /* Enable the PLLI2S when it's used as clock source for SAI */
;;;179        if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
00005e  f44f0b80          MOV      r11,#0x400000
000062  02c0              LSLS     r0,r0,#11             ;170
000064  d50c              BPL      |L7.128|
000066  6c21              LDR      r1,[r4,#0x40]         ;176
000068  6828              LDR      r0,[r5,#0]            ;176
00006a  f4200040          BIC      r0,r0,#0xc00000       ;176
00006e  4308              ORRS     r0,r0,r1              ;176
000070  6028              STR      r0,[r5,#0]            ;176
000072  6c20              LDR      r0,[r4,#0x40]
000074  4558              CMP      r0,r11
000076  d101              BNE      |L7.124|
;;;180        {
;;;181          plli2sused = 1; 
000078  2601              MOVS     r6,#1
00007a  e001              B        |L7.128|
                  |L7.124|
;;;182        }
;;;183        /* Enable the PLLSAI when it's used as clock source for SAI */
;;;184        if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
00007c  b900              CBNZ     r0,|L7.128|
;;;185        {
;;;186          pllsaiused = 1; 
00007e  2701              MOVS     r7,#1
                  |L7.128|
;;;187        }
;;;188      }
;;;189      
;;;190      /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
;;;191      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
000080  6820              LDR      r0,[r4,#0]
000082  01c1              LSLS     r1,r0,#7
000084  d500              BPL      |L7.136|
;;;192      {    
;;;193          plli2sused = 1; 
000086  2601              MOVS     r6,#1
                  |L7.136|
;;;194      }  
;;;195      
;;;196      /*------------------------------------ RTC configuration --------------------------------------*/
;;;197      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
000088  0680              LSLS     r0,r0,#26
00008a  d566              BPL      |L7.346|
;;;198      {
;;;199        /* Check for RTC Parameters used to output RTCCLK */
;;;200        assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
;;;201        
;;;202        /* Enable Power Clock*/
;;;203        __HAL_RCC_PWR_CLK_ENABLE();
00008c  48e8              LDR      r0,|L7.1072|
00008e  3038              ADDS     r0,r0,#0x38
000090  6801              LDR      r1,[r0,#0]
000092  f0415180          ORR      r1,r1,#0x10000000
000096  6001              STR      r1,[r0,#0]
000098  6800              LDR      r0,[r0,#0]
;;;204        
;;;205        /* Enable write access to Backup domain */
;;;206        PWR->CR1 |= PWR_CR1_DBP;
00009a  f8dfa398          LDR      r10,|L7.1076|
00009e  f0005080          AND      r0,r0,#0x10000000     ;203
0000a2  9000              STR      r0,[sp,#0]
0000a4  f8da1000          LDR      r1,[r10,#0]
0000a8  f4417180          ORR      r1,r1,#0x100
0000ac  f8ca1000          STR      r1,[r10,#0]
;;;207        
;;;208        /* Get Start Tick*/
;;;209        tickstart = HAL_GetTick();
0000b0  f7fffffe          BL       HAL_GetTick
0000b4  4680              MOV      r8,r0
;;;210        
;;;211        /* Wait for Backup domain Write protection disable */
;;;212        while((PWR->CR1 & PWR_CR1_DBP) == RESET)
0000b6  e005              B        |L7.196|
                  |L7.184|
;;;213        {
;;;214          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
0000b8  f7fffffe          BL       HAL_GetTick
0000bc  eba00008          SUB      r0,r0,r8
0000c0  2864              CMP      r0,#0x64
                  |L7.194|
0000c2  d87d              BHI      |L7.448|
                  |L7.196|
0000c4  f8da0000          LDR      r0,[r10,#0]           ;212
0000c8  05c0              LSLS     r0,r0,#23             ;212
0000ca  d5f5              BPL      |L7.184|
;;;215          {
;;;216            return HAL_TIMEOUT;
;;;217          }
;;;218        }
;;;219    
;;;220        /* Reset the Backup domain only if the RTC Clock source selection is modified */
;;;221        tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
0000cc  f8df8360          LDR      r8,|L7.1072|
0000d0  f1080868          ADD      r8,r8,#0x68
0000d4  f8d80000          LDR      r0,[r8,#0]
0000d8  f4107040          ANDS     r0,r0,#0x300
;;;222    
;;;223        if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
0000dc  d02a              BEQ      |L7.308|
0000de  8e21              LDRH     r1,[r4,#0x30]
0000e0  f4017140          AND      r1,r1,#0x300
0000e4  4281              CMP      r1,r0
0000e6  d025              BEQ      |L7.308|
;;;224        {
;;;225          /* Store the content of BDCR register before the reset of Backup Domain */
;;;226          tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
0000e8  f8d81000          LDR      r1,[r8,#0]
;;;227    
;;;228          /* RTC Clock selection can be changed only if the Backup Domain is reset */
;;;229          __HAL_RCC_BACKUPRESET_FORCE();
0000ec  f8d82000          LDR      r2,[r8,#0]
0000f0  f4217140          BIC      r1,r1,#0x300          ;226
0000f4  f4423280          ORR      r2,r2,#0x10000
0000f8  f8c82000          STR      r2,[r8,#0]
;;;230          __HAL_RCC_BACKUPRESET_RELEASE();
0000fc  f8d82000          LDR      r2,[r8,#0]
000100  f4223280          BIC      r2,r2,#0x10000
000104  f8c82000          STR      r2,[r8,#0]
;;;231    
;;;232          /* Restore the Content of BDCR register */
;;;233          RCC->BDCR = tmpreg0;
000108  f8c81000          STR      r1,[r8,#0]
;;;234    
;;;235          /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
;;;236          if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
00010c  f8d80000          LDR      r0,[r8,#0]
000110  07c0              LSLS     r0,r0,#31
000112  d00f              BEQ      |L7.308|
;;;237          {
;;;238            /* Get Start Tick*/
;;;239            tickstart = HAL_GetTick();
000114  f7fffffe          BL       HAL_GetTick
000118  4682              MOV      r10,r0
;;;240            
;;;241            /* Wait till LSE is ready */  
;;;242            while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
00011a  e007              B        |L7.300|
                  |L7.284|
;;;243            {
;;;244              if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
00011c  f7fffffe          BL       HAL_GetTick
000120  eba0010a          SUB      r1,r0,r10
000124  f2413088          MOV      r0,#0x1388
000128  4281              CMP      r1,r0
00012a  d8ca              BHI      |L7.194|
                  |L7.300|
00012c  f8d80000          LDR      r0,[r8,#0]            ;242
000130  0780              LSLS     r0,r0,#30             ;242
000132  d5f3              BPL      |L7.284|
                  |L7.308|
;;;245              {
;;;246                return HAL_TIMEOUT;
;;;247              }
;;;248            }
;;;249          }
;;;250        }
;;;251        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
000134  6b20              LDR      r0,[r4,#0x30]
000136  f3c02101          UBFX     r1,r0,#8,#2
00013a  2903              CMP      r1,#3
00013c  d07e              BEQ      |L7.572|
00013e  f8d91000          LDR      r1,[r9,#0]
000142  f42111f8          BIC      r1,r1,#0x1f0000
000146  f8c91000          STR      r1,[r9,#0]
                  |L7.330|
00014a  8e22              LDRH     r2,[r4,#0x30]
00014c  f8d81000          LDR      r1,[r8,#0]
000150  f3c2020b          UBFX     r2,r2,#0,#12
000154  4311              ORRS     r1,r1,r2
000156  f8c81000          STR      r1,[r8,#0]
                  |L7.346|
;;;252      }
;;;253    
;;;254      /*------------------------------------ TIM configuration --------------------------------------*/
;;;255      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
00015a  7820              LDRB     r0,[r4,#0]
00015c  06c0              LSLS     r0,r0,#27
00015e  d507              BPL      |L7.368|
;;;256      {
;;;257        /* Check the parameters */
;;;258        assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
;;;259        
;;;260        /* Configure Timer Prescaler */
;;;261        __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
000160  6828              LDR      r0,[r5,#0]
000162  f0207080          BIC      r0,r0,#0x1000000
000166  6028              STR      r0,[r5,#0]
000168  6828              LDR      r0,[r5,#0]
00016a  6ba1              LDR      r1,[r4,#0x38]
00016c  4308              ORRS     r0,r0,r1
00016e  6028              STR      r0,[r5,#0]
                  |L7.368|
;;;262      }
;;;263      
;;;264      /*-------------------------------------- I2C1 Configuration -----------------------------------*/
;;;265      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
000170  8821              LDRH     r1,[r4,#0]
;;;266      {
;;;267        /* Check the parameters */
;;;268        assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
;;;269        
;;;270        /* Configure the I2C1 clock source */
;;;271        __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
000172  48af              LDR      r0,|L7.1072|
000174  3088              ADDS     r0,r0,#0x88
000176  0449              LSLS     r1,r1,#17             ;265
000178  d505              BPL      |L7.390|
00017a  6e62              LDR      r2,[r4,#0x64]
00017c  6801              LDR      r1,[r0,#0]
00017e  f4213140          BIC      r1,r1,#0x30000
000182  4311              ORRS     r1,r1,r2
000184  6001              STR      r1,[r0,#0]
                  |L7.390|
;;;272      }
;;;273      
;;;274      /*-------------------------------------- I2C2 Configuration -----------------------------------*/
;;;275      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
000186  8821              LDRH     r1,[r4,#0]
000188  0409              LSLS     r1,r1,#16
00018a  d505              BPL      |L7.408|
;;;276      {
;;;277        /* Check the parameters */
;;;278        assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
;;;279        
;;;280        /* Configure the I2C2 clock source */
;;;281        __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
00018c  6ea2              LDR      r2,[r4,#0x68]
00018e  6801              LDR      r1,[r0,#0]
000190  f4212140          BIC      r1,r1,#0xc0000
000194  4311              ORRS     r1,r1,r2
000196  6001              STR      r1,[r0,#0]
                  |L7.408|
;;;282      }
;;;283      
;;;284      /*-------------------------------------- I2C3 Configuration -----------------------------------*/
;;;285      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
000198  6821              LDR      r1,[r4,#0]
00019a  03c9              LSLS     r1,r1,#15
00019c  d505              BPL      |L7.426|
;;;286      {
;;;287        /* Check the parameters */
;;;288        assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
;;;289        
;;;290        /* Configure the I2C3 clock source */
;;;291        __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
00019e  6ee2              LDR      r2,[r4,#0x6c]
0001a0  6801              LDR      r1,[r0,#0]
0001a2  f4211140          BIC      r1,r1,#0x300000
0001a6  4311              ORRS     r1,r1,r2
0001a8  6001              STR      r1,[r0,#0]
                  |L7.426|
;;;292      }
;;;293        
;;;294      /*-------------------------------------- I2C4 Configuration -----------------------------------*/
;;;295      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
0001aa  6821              LDR      r1,[r4,#0]
0001ac  0389              LSLS     r1,r1,#14
0001ae  d505              BPL      |L7.444|
;;;296      {
;;;297        /* Check the parameters */
;;;298        assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
;;;299        
;;;300        /* Configure the I2C4 clock source */
;;;301        __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
0001b0  6f22              LDR      r2,[r4,#0x70]
0001b2  6801              LDR      r1,[r0,#0]
0001b4  f4210140          BIC      r1,r1,#0xc00000
0001b8  4311              ORRS     r1,r1,r2
0001ba  6001              STR      r1,[r0,#0]
                  |L7.444|
;;;302      }
;;;303    
;;;304      /*-------------------------------------- USART1 Configuration -----------------------------------*/
;;;305      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
0001bc  7821              LDRB     r1,[r4,#0]
0001be  e000              B        |L7.450|
                  |L7.448|
0001c0  e134              B        |L7.1068|
                  |L7.450|
0001c2  0649              LSLS     r1,r1,#25
0001c4  d505              BPL      |L7.466|
;;;306      {
;;;307        /* Check the parameters */
;;;308        assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
;;;309        
;;;310        /* Configure the USART1 clock source */
;;;311        __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
0001c6  6c62              LDR      r2,[r4,#0x44]
0001c8  6801              LDR      r1,[r0,#0]
0001ca  f0210103          BIC      r1,r1,#3
0001ce  4311              ORRS     r1,r1,r2
0001d0  6001              STR      r1,[r0,#0]
                  |L7.466|
;;;312      }
;;;313    
;;;314      /*-------------------------------------- USART2 Configuration -----------------------------------*/
;;;315      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
0001d2  7821              LDRB     r1,[r4,#0]
0001d4  0609              LSLS     r1,r1,#24
0001d6  d505              BPL      |L7.484|
;;;316      {
;;;317        /* Check the parameters */
;;;318        assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
;;;319        
;;;320        /* Configure the USART2 clock source */
;;;321        __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
0001d8  6ca2              LDR      r2,[r4,#0x48]
0001da  6801              LDR      r1,[r0,#0]
0001dc  f021010c          BIC      r1,r1,#0xc
0001e0  4311              ORRS     r1,r1,r2
0001e2  6001              STR      r1,[r0,#0]
                  |L7.484|
;;;322      }
;;;323    
;;;324      /*-------------------------------------- USART3 Configuration -----------------------------------*/
;;;325      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
0001e4  8821              LDRH     r1,[r4,#0]
0001e6  05c9              LSLS     r1,r1,#23
0001e8  d505              BPL      |L7.502|
;;;326      {
;;;327        /* Check the parameters */
;;;328        assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
;;;329        
;;;330        /* Configure the USART3 clock source */
;;;331        __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
0001ea  6ce2              LDR      r2,[r4,#0x4c]
0001ec  6801              LDR      r1,[r0,#0]
0001ee  f0210130          BIC      r1,r1,#0x30
0001f2  4311              ORRS     r1,r1,r2
0001f4  6001              STR      r1,[r0,#0]
                  |L7.502|
;;;332      }
;;;333    
;;;334      /*-------------------------------------- UART4 Configuration -----------------------------------*/
;;;335      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
0001f6  8821              LDRH     r1,[r4,#0]
0001f8  0589              LSLS     r1,r1,#22
0001fa  d505              BPL      |L7.520|
;;;336      {
;;;337        /* Check the parameters */
;;;338        assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
;;;339        
;;;340        /* Configure the UART4 clock source */
;;;341        __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
0001fc  6d22              LDR      r2,[r4,#0x50]
0001fe  6801              LDR      r1,[r0,#0]
000200  f02101c0          BIC      r1,r1,#0xc0
000204  4311              ORRS     r1,r1,r2
000206  6001              STR      r1,[r0,#0]
                  |L7.520|
;;;342      }
;;;343    
;;;344      /*-------------------------------------- UART5 Configuration -----------------------------------*/
;;;345      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
000208  8821              LDRH     r1,[r4,#0]
00020a  0549              LSLS     r1,r1,#21
00020c  d505              BPL      |L7.538|
;;;346      {
;;;347        /* Check the parameters */
;;;348        assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
;;;349        
;;;350        /* Configure the UART5 clock source */
;;;351        __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
00020e  6d62              LDR      r2,[r4,#0x54]
000210  6801              LDR      r1,[r0,#0]
000212  f4217140          BIC      r1,r1,#0x300
000216  4311              ORRS     r1,r1,r2
000218  6001              STR      r1,[r0,#0]
                  |L7.538|
;;;352      }
;;;353    
;;;354      /*-------------------------------------- USART6 Configuration -----------------------------------*/
;;;355      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
00021a  8821              LDRH     r1,[r4,#0]
00021c  0509              LSLS     r1,r1,#20
00021e  d505              BPL      |L7.556|
;;;356      {
;;;357        /* Check the parameters */
;;;358        assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
;;;359        
;;;360        /* Configure the USART6 clock source */
;;;361        __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
000220  6da2              LDR      r2,[r4,#0x58]
000222  6801              LDR      r1,[r0,#0]
000224  f4216140          BIC      r1,r1,#0xc00
000228  4311              ORRS     r1,r1,r2
00022a  6001              STR      r1,[r0,#0]
                  |L7.556|
;;;362      }
;;;363    
;;;364      /*-------------------------------------- UART7 Configuration -----------------------------------*/
;;;365      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
00022c  8821              LDRH     r1,[r4,#0]
00022e  04c9              LSLS     r1,r1,#19
000230  d507              BPL      |L7.578|
;;;366      {
;;;367        /* Check the parameters */
;;;368        assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
;;;369        
;;;370        /* Configure the UART7 clock source */
;;;371        __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
000232  6de2              LDR      r2,[r4,#0x5c]
000234  6801              LDR      r1,[r0,#0]
000236  f4215140          BIC      r1,r1,#0x3000
00023a  e000              B        |L7.574|
                  |L7.572|
00023c  e05f              B        |L7.766|
                  |L7.574|
00023e  4311              ORRS     r1,r1,r2
000240  6001              STR      r1,[r0,#0]
                  |L7.578|
;;;372      }
;;;373    
;;;374      /*-------------------------------------- UART8 Configuration -----------------------------------*/
;;;375      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
000242  8821              LDRH     r1,[r4,#0]
000244  0489              LSLS     r1,r1,#18
000246  d505              BPL      |L7.596|
;;;376      {
;;;377        /* Check the parameters */
;;;378        assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
;;;379        
;;;380        /* Configure the UART8 clock source */
;;;381        __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
000248  6e22              LDR      r2,[r4,#0x60]
00024a  6801              LDR      r1,[r0,#0]
00024c  f4214140          BIC      r1,r1,#0xc000
000250  4311              ORRS     r1,r1,r2
000252  6001              STR      r1,[r0,#0]
                  |L7.596|
;;;382      }
;;;383      
;;;384      /*--------------------------------------- CEC Configuration -----------------------------------*/
;;;385      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
000254  6821              LDR      r1,[r4,#0]
000256  0249              LSLS     r1,r1,#9
000258  d505              BPL      |L7.614|
;;;386      {
;;;387        /* Check the parameters */
;;;388        assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
;;;389        
;;;390        /* Configure the CEC clock source */
;;;391        __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
00025a  6fa2              LDR      r2,[r4,#0x78]
00025c  6801              LDR      r1,[r0,#0]
00025e  f0216180          BIC      r1,r1,#0x4000000
000262  4311              ORRS     r1,r1,r2
000264  6001              STR      r1,[r0,#0]
                  |L7.614|
;;;392      }
;;;393      
;;;394      /*-------------------------------------- CK48 Configuration -----------------------------------*/
;;;395      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
000266  6821              LDR      r1,[r4,#0]
;;;396      {
;;;397        /* Check the parameters */
;;;398        assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
;;;399        
;;;400        /* Configure the CLK48 source */
;;;401        __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
;;;402    
;;;403        /* Enable the PLLSAI when it's used as clock source for CK48 */
;;;404        if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
000268  f04f6a00          MOV      r10,#0x8000000
00026c  0289              LSLS     r1,r1,#10             ;395
00026e  d509              BPL      |L7.644|
000270  6fe2              LDR      r2,[r4,#0x7c]         ;401
000272  6801              LDR      r1,[r0,#0]            ;401
000274  f0216100          BIC      r1,r1,#0x8000000      ;401
000278  4311              ORRS     r1,r1,r2              ;401
00027a  6001              STR      r1,[r0,#0]            ;401
00027c  6fe1              LDR      r1,[r4,#0x7c]
00027e  4551              CMP      r1,r10
000280  d100              BNE      |L7.644|
;;;405        {
;;;406          pllsaiused = 1; 
000282  2701              MOVS     r7,#1
                  |L7.644|
;;;407        }
;;;408      }
;;;409    
;;;410      /*-------------------------------------- LTDC Configuration -----------------------------------*/
;;;411    #if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
;;;412      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
000284  6821              LDR      r1,[r4,#0]
000286  070a              LSLS     r2,r1,#28
000288  d500              BPL      |L7.652|
;;;413      {
;;;414        pllsaiused = 1; 
00028a  2701              MOVS     r7,#1
                  |L7.652|
;;;415      }
;;;416    #endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
;;;417      
;;;418      /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
;;;419      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
00028c  0349              LSLS     r1,r1,#13
00028e  d505              BPL      |L7.668|
;;;420      {
;;;421        /* Check the parameters */
;;;422        assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
;;;423        
;;;424        /* Configure the LTPIM1 clock source */
;;;425        __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
000290  6f62              LDR      r2,[r4,#0x74]
000292  6801              LDR      r1,[r0,#0]
000294  f0217140          BIC      r1,r1,#0x3000000
000298  4311              ORRS     r1,r1,r2
00029a  6001              STR      r1,[r0,#0]
                  |L7.668|
;;;426       }
;;;427      
;;;428      /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
;;;429      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
00029c  6821              LDR      r1,[r4,#0]
00029e  0209              LSLS     r1,r1,#8
0002a0  d506              BPL      |L7.688|
;;;430      {
;;;431        /* Check the parameters */
;;;432        assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
;;;433        
;;;434        /* Configure the SDMMC1 clock source */
;;;435        __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
0002a2  f8d42080          LDR      r2,[r4,#0x80]
0002a6  6801              LDR      r1,[r0,#0]
0002a8  f0215180          BIC      r1,r1,#0x10000000
0002ac  4311              ORRS     r1,r1,r2
0002ae  6001              STR      r1,[r0,#0]
                  |L7.688|
;;;436      }
;;;437      
;;;438    #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
;;;439      /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
;;;440      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
0002b0  6821              LDR      r1,[r4,#0]
0002b2  0149              LSLS     r1,r1,#5
0002b4  d506              BPL      |L7.708|
;;;441      {
;;;442        /* Check the parameters */
;;;443        assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
;;;444        
;;;445        /* Configure the SDMMC2 clock source */
;;;446        __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
0002b6  f8d42084          LDR      r2,[r4,#0x84]
0002ba  6801              LDR      r1,[r0,#0]
0002bc  f0215100          BIC      r1,r1,#0x20000000
0002c0  4311              ORRS     r1,r1,r2
0002c2  6001              STR      r1,[r0,#0]
                  |L7.708|
;;;447      }
;;;448    	
;;;449      /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
;;;450      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
0002c4  6820              LDR      r0,[r4,#0]
0002c6  0100              LSLS     r0,r0,#4
0002c8  d506              BPL      |L7.728|
;;;451      {
;;;452        /* Check the parameters */
;;;453        assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
;;;454    
;;;455        /* Configure the DFSDM1 interface clock source */
;;;456        __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
0002ca  f8d41088          LDR      r1,[r4,#0x88]
0002ce  6828              LDR      r0,[r5,#0]
0002d0  f0207000          BIC      r0,r0,#0x2000000
0002d4  4308              ORRS     r0,r0,r1
0002d6  6028              STR      r0,[r5,#0]
                  |L7.728|
;;;457      }
;;;458      
;;;459      /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
;;;460      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
0002d8  6820              LDR      r0,[r4,#0]
0002da  00c0              LSLS     r0,r0,#3
0002dc  d506              BPL      |L7.748|
;;;461      {
;;;462        /* Check the parameters */
;;;463        assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
;;;464    
;;;465        /* Configure the DFSDM interface clock source */
;;;466        __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
0002de  f8d4108c          LDR      r1,[r4,#0x8c]
0002e2  6828              LDR      r0,[r5,#0]
0002e4  f0206080          BIC      r0,r0,#0x4000000
0002e8  4308              ORRS     r0,r0,r1
0002ea  6028              STR      r0,[r5,#0]
                  |L7.748|
;;;467      }  
;;;468    #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
;;;469      
;;;470      /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
;;;471      /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
;;;472      if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
;;;473      {
;;;474        /* Disable the PLLI2S */
;;;475        __HAL_RCC_PLLI2S_DISABLE();  
0002ec  f8df9148          LDR      r9,|L7.1080|
0002f0  2e01              CMP      r6,#1                 ;472
0002f2  d00e              BEQ      |L7.786|
0002f4  6820              LDR      r0,[r4,#0]            ;472
0002f6  f1b07f00          CMP      r0,#0x2000000         ;472
0002fa  d00a              BEQ      |L7.786|
0002fc  e08f              B        |L7.1054|
                  |L7.766|
0002fe  4a4f              LDR      r2,|L7.1084|
000300  f8d93000          LDR      r3,[r9,#0]            ;251
000304  4010              ANDS     r0,r0,r2              ;251
000306  f42312f8          BIC      r2,r3,#0x1f0000       ;251
00030a  4302              ORRS     r2,r2,r0              ;251
00030c  f8c92000          STR      r2,[r9,#0]            ;251
000310  e71b              B        |L7.330|
                  |L7.786|
000312  f8d90000          LDR      r0,[r9,#0]
000316  464e              MOV      r6,r9
000318  f0206080          BIC      r0,r0,#0x4000000
00031c  f8c90000          STR      r0,[r9,#0]
;;;476        
;;;477        /* Get Start Tick*/
;;;478        tickstart = HAL_GetTick();
000320  f7fffffe          BL       HAL_GetTick
000324  4680              MOV      r8,r0
;;;479        
;;;480        /* Wait till PLLI2S is disabled */
;;;481        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
000326  e005              B        |L7.820|
                  |L7.808|
;;;482        {
;;;483          if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
000328  f7fffffe          BL       HAL_GetTick
00032c  eba00008          SUB      r0,r0,r8
000330  2864              CMP      r0,#0x64
000332  d87b              BHI      |L7.1068|
                  |L7.820|
000334  6830              LDR      r0,[r6,#0]            ;481
000336  0100              LSLS     r0,r0,#4              ;481
000338  d4f6              BMI      |L7.808|
;;;484          {
;;;485            /* return in case of Timeout detected */         
;;;486            return HAL_TIMEOUT;
;;;487          }
;;;488        }
;;;489        
;;;490        /* check for common PLLI2S Parameters */
;;;491        assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
;;;492          
;;;493        /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
;;;494        if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
00033a  7821              LDRB     r1,[r4,#0]
;;;495        {
;;;496          /* check for Parameters */
;;;497          assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
;;;498        
;;;499          /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
;;;500          tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
00033c  483c              LDR      r0,|L7.1072|
00033e  307c              ADDS     r0,r0,#0x7c
000340  07c9              LSLS     r1,r1,#31             ;494
000342  d012              BEQ      |L7.874|
000344  6b61              LDR      r1,[r4,#0x34]         ;494
000346  b981              CBNZ     r1,|L7.874|
;;;501          tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
;;;502          /* Configure the PLLI2S division factors */
;;;503          /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
;;;504          /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
;;;505          __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
000348  7a23              LDRB     r3,[r4,#8]
00034a  6862              LDR      r2,[r4,#4]            ;500
00034c  6801              LDR      r1,[r0,#0]            ;500
00034e  f8d0c000          LDR      r12,[r0,#0]           ;501
000352  0192              LSLS     r2,r2,#6
000354  f3c14101          UBFX     r1,r1,#16,#2          ;500
000358  ea424201          ORR      r2,r2,r1,LSL #16
00035c  f3cc6103          UBFX     r1,r12,#24,#4         ;501
000360  ea426101          ORR      r1,r2,r1,LSL #24
000364  ea417103          ORR      r1,r1,r3,LSL #28
000368  6001              STR      r1,[r0,#0]
                  |L7.874|
;;;506        }
;;;507            
;;;508        /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
;;;509        if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
00036a  6821              LDR      r1,[r4,#0]
00036c  030a              LSLS     r2,r1,#12
00036e  d503              BPL      |L7.888|
000370  6be2              LDR      r2,[r4,#0x3c]
000372  f5b21f80          CMP      r2,#0x100000
000376  d004              BEQ      |L7.898|
                  |L7.888|
;;;510           ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
000378  02c9              LSLS     r1,r1,#11
00037a  d51a              BPL      |L7.946|
00037c  6c21              LDR      r1,[r4,#0x40]
00037e  4559              CMP      r1,r11
000380  d117              BNE      |L7.946|
                  |L7.898|
;;;511        {
;;;512          /* Check for PLLI2S Parameters */
;;;513          assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
;;;514          /* Check for PLLI2S/DIVQ parameters */
;;;515          assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
;;;516                
;;;517          /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
;;;518          tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
000382  6863              LDR      r3,[r4,#4]
000384  6801              LDR      r1,[r0,#0]
;;;519          tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
;;;520          /* Configure the PLLI2S division factors */      
;;;521          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
;;;522          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
;;;523          /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
;;;524          __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
000386  f894c00c          LDRB     r12,[r4,#0xc]
00038a  6802              LDR      r2,[r0,#0]            ;519
00038c  019b              LSLS     r3,r3,#6
00038e  f3c14101          UBFX     r1,r1,#16,#2          ;518
000392  ea434101          ORR      r1,r3,r1,LSL #16
000396  f3c27202          UBFX     r2,r2,#28,#3          ;519
00039a  ea41610c          ORR      r1,r1,r12,LSL #24
00039e  ea417102          ORR      r1,r1,r2,LSL #28
0003a2  6001              STR      r1,[r0,#0]
;;;525       
;;;526          /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
;;;527          __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
0003a4  6829              LDR      r1,[r5,#0]
0003a6  6a62              LDR      r2,[r4,#0x24]
0003a8  f021011f          BIC      r1,r1,#0x1f
0003ac  1e52              SUBS     r2,r2,#1
0003ae  4311              ORRS     r1,r1,r2
0003b0  6029              STR      r1,[r5,#0]
                  |L7.946|
;;;528        }          
;;;529    
;;;530        /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
;;;531        if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
0003b2  6821              LDR      r1,[r4,#0]
0003b4  01c9              LSLS     r1,r1,#7
0003b6  d510              BPL      |L7.986|
;;;532        {
;;;533          /* check for Parameters */
;;;534          assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
;;;535         
;;;536         /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
;;;537          tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
;;;538          tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
;;;539          /* Configure the PLLI2S division factors */
;;;540          /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
;;;541          /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
;;;542          __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
0003b8  8a23              LDRH     r3,[r4,#0x10]
0003ba  6862              LDR      r2,[r4,#4]            ;537
0003bc  6801              LDR      r1,[r0,#0]            ;537
0003be  f8d0c000          LDR      r12,[r0,#0]           ;538
0003c2  0192              LSLS     r2,r2,#6
0003c4  f3c16103          UBFX     r1,r1,#24,#4          ;537
0003c8  ea424203          ORR      r2,r2,r3,LSL #16
0003cc  ea426201          ORR      r2,r2,r1,LSL #24
0003d0  f3cc7102          UBFX     r1,r12,#28,#3         ;538
0003d4  ea427101          ORR      r1,r2,r1,LSL #28
0003d8  6001              STR      r1,[r0,#0]
                  |L7.986|
;;;543        }  
;;;544             
;;;545        /*----------------- In Case of PLLI2S is just selected  -----------------*/  
;;;546        if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
0003da  6821              LDR      r1,[r4,#0]
0003dc  0189              LSLS     r1,r1,#6
0003de  d50c              BPL      |L7.1018|
;;;547        {
;;;548          /* Check for Parameters */
;;;549          assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
;;;550          assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
;;;551          assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
;;;552    
;;;553          /* Configure the PLLI2S division factors */
;;;554          /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
;;;555          /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
;;;556          __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
0003e0  6861              LDR      r1,[r4,#4]
0003e2  8a22              LDRH     r2,[r4,#0x10]
0003e4  7b23              LDRB     r3,[r4,#0xc]
0003e6  f894c008          LDRB     r12,[r4,#8]
0003ea  0189              LSLS     r1,r1,#6
0003ec  ea414102          ORR      r1,r1,r2,LSL #16
0003f0  ea416103          ORR      r1,r1,r3,LSL #24
0003f4  ea41710c          ORR      r1,r1,r12,LSL #28
0003f8  6001              STR      r1,[r0,#0]
                  |L7.1018|
;;;557        } 
;;;558        
;;;559        /* Enable the PLLI2S */
;;;560        __HAL_RCC_PLLI2S_ENABLE();
0003fa  6831              LDR      r1,[r6,#0]
0003fc  46b0              MOV      r8,r6
0003fe  f0416180          ORR      r1,r1,#0x4000000
000402  6031              STR      r1,[r6,#0]
;;;561        
;;;562        /* Get Start Tick*/
;;;563        tickstart = HAL_GetTick();
000404  f7fffffe          BL       HAL_GetTick
000408  4606              MOV      r6,r0
;;;564    
;;;565        /* Wait till PLLI2S is ready */
;;;566        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
00040a  e004              B        |L7.1046|
                  |L7.1036|
;;;567        {
;;;568          if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
00040c  f7fffffe          BL       HAL_GetTick
000410  1b80              SUBS     r0,r0,r6
000412  2864              CMP      r0,#0x64
000414  d80a              BHI      |L7.1068|
                  |L7.1046|
000416  f8d80000          LDR      r0,[r8,#0]            ;566
00041a  0100              LSLS     r0,r0,#4              ;566
00041c  d5f6              BPL      |L7.1036|
                  |L7.1054|
;;;569          {
;;;570            /* return in case of Timeout detected */                
;;;571            return HAL_TIMEOUT;
;;;572          }
;;;573        }
;;;574      } 
;;;575      
;;;576      /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
;;;577      /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
;;;578      if(pllsaiused == 1)
00041e  b3e7              CBZ      r7,|L7.1178|
;;;579      {
;;;580        /* Disable PLLSAI Clock */
;;;581        __HAL_RCC_PLLSAI_DISABLE(); 
000420  f8d90000          LDR      r0,[r9,#0]
000424  464e              MOV      r6,r9
000426  f0205080          BIC      r0,r0,#0x10000000
00042a  e009              B        |L7.1088|
                  |L7.1068|
00042c  e07b              B        |L7.1318|
00042e  0000              DCW      0x0000
                  |L7.1072|
                          DCD      0x40023808
                  |L7.1076|
                          DCD      0x40007000
                  |L7.1080|
                          DCD      0x40023800
                  |L7.1084|
                          DCD      0x0ffffcff
                  |L7.1088|
000440  f8c90000          STR      r0,[r9,#0]
;;;582        
;;;583        /* Get Start Tick*/
;;;584        tickstart = HAL_GetTick();
000444  f7fffffe          BL       HAL_GetTick
000448  4607              MOV      r7,r0
;;;585    
;;;586        /* Wait till PLLSAI is disabled */
;;;587        while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
00044a  e004              B        |L7.1110|
                  |L7.1100|
;;;588        {
;;;589          if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
00044c  f7fffffe          BL       HAL_GetTick
000450  1bc0              SUBS     r0,r0,r7
000452  2864              CMP      r0,#0x64
000454  d867              BHI      |L7.1318|
                  |L7.1110|
000456  6830              LDR      r0,[r6,#0]            ;587
000458  43c0              MVNS     r0,r0                 ;587
00045a  0080              LSLS     r0,r0,#2              ;587
00045c  d5f6              BPL      |L7.1100|
;;;590          { 
;;;591            /* return in case of Timeout detected */        
;;;592            return HAL_TIMEOUT;
;;;593          }
;;;594        } 
;;;595        
;;;596        /* Check the PLLSAI division factors */
;;;597        assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
;;;598        
;;;599        /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
;;;600        if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
00045e  6821              LDR      r1,[r4,#0]
;;;601           ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
;;;602        {
;;;603          /* check for PLLSAIQ Parameter */
;;;604          assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
;;;605          /* check for PLLSAI/DIVQ Parameter */
;;;606          assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
;;;607        
;;;608          /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
;;;609          tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
000460  4835              LDR      r0,|L7.1336|
000462  030a              LSLS     r2,r1,#12             ;600
000464  d501              BPL      |L7.1130|
000466  6be2              LDR      r2,[r4,#0x3c]         ;600
000468  b11a              CBZ      r2,|L7.1138|
                  |L7.1130|
00046a  02c9              LSLS     r1,r1,#11             ;601
00046c  d51d              BPL      |L7.1194|
00046e  6c21              LDR      r1,[r4,#0x40]         ;601
000470  b9d9              CBNZ     r1,|L7.1194|
                  |L7.1138|
000472  6963              LDR      r3,[r4,#0x14]
000474  6801              LDR      r1,[r0,#0]
;;;610          tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
;;;611          /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
;;;612          /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
;;;613          /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
;;;614          __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
000476  7e27              LDRB     r7,[r4,#0x18]
000478  6802              LDR      r2,[r0,#0]            ;610
00047a  019b              LSLS     r3,r3,#6
00047c  f3c14101          UBFX     r1,r1,#16,#2          ;609
000480  ea434301          ORR      r3,r3,r1,LSL #16
000484  f3c27102          UBFX     r1,r2,#28,#3          ;610
000488  ea436207          ORR      r2,r3,r7,LSL #24
00048c  ea427101          ORR      r1,r2,r1,LSL #28
000490  6001              STR      r1,[r0,#0]
;;;615          
;;;616          /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
;;;617          __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
000492  6829              LDR      r1,[r5,#0]
000494  f06f03ff          MVN      r3,#0xff
000498  e000              B        |L7.1180|
                  |L7.1178|
00049a  e04b              B        |L7.1332|
                  |L7.1180|
00049c  6aa2              LDR      r2,[r4,#0x28]
00049e  f42151f8          BIC      r1,r1,#0x1f00
0004a2  eb032202          ADD      r2,r3,r2,LSL #8
0004a6  4311              ORRS     r1,r1,r2
0004a8  6029              STR      r1,[r5,#0]
                  |L7.1194|
;;;618        }           
;;;619    
;;;620        /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
;;;621        /* In Case of PLLI2S is selected as source clock for CK48 */ 
;;;622        if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
0004aa  6821              LDR      r1,[r4,#0]
0004ac  0289              LSLS     r1,r1,#10
0004ae  d512              BPL      |L7.1238|
0004b0  6fe1              LDR      r1,[r4,#0x7c]
0004b2  4551              CMP      r1,r10
0004b4  d10f              BNE      |L7.1238|
;;;623        {
;;;624          /* check for Parameters */
;;;625          assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
;;;626          /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
;;;627          tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
;;;628          tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
;;;629          
;;;630          /* Configure the PLLSAI division factors */
;;;631          /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
;;;632          /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
;;;633          __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
0004b6  8c23              LDRH     r3,[r4,#0x20]
0004b8  6962              LDR      r2,[r4,#0x14]         ;627
0004ba  6801              LDR      r1,[r0,#0]            ;627
0004bc  6807              LDR      r7,[r0,#0]            ;628
0004be  0192              LSLS     r2,r2,#6
0004c0  f3c16103          UBFX     r1,r1,#24,#4          ;627
0004c4  ea424203          ORR      r2,r2,r3,LSL #16
0004c8  ea426201          ORR      r2,r2,r1,LSL #24
0004cc  f3c77102          UBFX     r1,r7,#28,#3          ;628
0004d0  ea427101          ORR      r1,r2,r1,LSL #28
0004d4  6001              STR      r1,[r0,#0]
                  |L7.1238|
;;;634        }        
;;;635    
;;;636    #if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
;;;637        /*---------------------------- LTDC configuration -------------------------------*/
;;;638        if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
0004d6  7821              LDRB     r1,[r4,#0]
0004d8  0709              LSLS     r1,r1,#28
0004da  d516              BPL      |L7.1290|
;;;639        {
;;;640          assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
;;;641          assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
;;;642          
;;;643          /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
;;;644          tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
0004dc  6961              LDR      r1,[r4,#0x14]
0004de  6802              LDR      r2,[r0,#0]
;;;645          tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
0004e0  f8d0c000          LDR      r12,[r0,#0]
;;;646          
;;;647          /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
;;;648          /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
;;;649          /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
;;;650          __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
0004e4  018b              LSLS     r3,r1,#6
0004e6  7f27              LDRB     r7,[r4,#0x1c]
0004e8  f3c26203          UBFX     r2,r2,#24,#4          ;644
0004ec  f3cc4101          UBFX     r1,r12,#16,#2         ;645
0004f0  ea434101          ORR      r1,r3,r1,LSL #16
0004f4  ea416102          ORR      r1,r1,r2,LSL #24
0004f8  ea417107          ORR      r1,r1,r7,LSL #28
0004fc  6001              STR      r1,[r0,#0]
;;;651          
;;;652          /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
;;;653          __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
0004fe  6828              LDR      r0,[r5,#0]
000500  6ae1              LDR      r1,[r4,#0x2c]
000502  f4203040          BIC      r0,r0,#0x30000
000506  4308              ORRS     r0,r0,r1
000508  6028              STR      r0,[r5,#0]
                  |L7.1290|
;;;654        }    
;;;655    #endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  
;;;656    
;;;657        /* Enable PLLSAI Clock */
;;;658        __HAL_RCC_PLLSAI_ENABLE();
00050a  6830              LDR      r0,[r6,#0]
00050c  f0405080          ORR      r0,r0,#0x10000000
000510  6030              STR      r0,[r6,#0]
;;;659        
;;;660        /* Get Start Tick*/
;;;661        tickstart = HAL_GetTick();
000512  f7fffffe          BL       HAL_GetTick
000516  4604              MOV      r4,r0
;;;662    
;;;663        /* Wait till PLLSAI is ready */
;;;664        while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
000518  e008              B        |L7.1324|
;;;665        {
;;;666          if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
00051a  bf00              NOP      
                  |L7.1308|
00051c  f7fffffe          BL       HAL_GetTick
000520  1b00              SUBS     r0,r0,r4
000522  2864              CMP      r0,#0x64
000524  d902              BLS      |L7.1324|
                  |L7.1318|
;;;667          { 
;;;668            /* return in case of Timeout detected */        
;;;669            return HAL_TIMEOUT;
000526  2003              MOVS     r0,#3
                  |L7.1320|
;;;670          }
;;;671        }
;;;672      }
;;;673      return HAL_OK;
;;;674    }
000528  e8bd8ff8          POP      {r3-r11,pc}
                  |L7.1324|
00052c  6830              LDR      r0,[r6,#0]            ;664
00052e  43c0              MVNS     r0,r0                 ;664
000530  0080              LSLS     r0,r0,#2              ;664
000532  d4f3              BMI      |L7.1308|
                  |L7.1332|
000534  2000              MOVS     r0,#0                 ;673
000536  e7f7              B        |L7.1320|
;;;675    
                          ENDP

                  |L7.1336|
                          DCD      0x40023888

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F7_V1.11.0\\Drivers\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_rcc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____REV16|
#line 468 "D:\\Program_Files_x86\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.3.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____REVSH|
#line 483
|__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____RRX|
#line 670
|__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
