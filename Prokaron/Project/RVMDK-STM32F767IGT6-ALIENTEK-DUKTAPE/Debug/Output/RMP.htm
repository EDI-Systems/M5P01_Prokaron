<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Debug\Output\RMP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Debug\Output\RMP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Thu Jul 19 15:54:55 2018
<BR><P>
<H3>Maximum Stack Usage =       6584 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
eval_raw &rArr; duk_eval_raw &rArr; duk_compile_raw &rArr; duk__do_compile &rArr; duk_js_compile &rArr; duk_safe_call &rArr; duk_handle_safe_call &rArr; duk__handle_safe_call_error &rArr; duk__safe_call_adjust_valstack &rArr; duk_set_top_unsafe &rArr; duk_refzero_check_fast &rArr; duk_heap_process_finalize_list &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1bc]">RMP_Disable_Int</a>
 <LI><a href="#[1bd]">RMP_Enable_Int</a>
 <LI><a href="#[1ac]">RMP_Mask_Int</a>
 <LI><a href="#[1b4]">RMP_MSB_Get</a>
 <LI><a href="#[1b2]">_RMP_Yield</a>
 <LI><a href="#[5ba]">_RMP_Start</a>
 <LI><a href="#[a]">PendSV_Handler</a>
 <LI><a href="#[b]">SysTick_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">DebugMon_Handler</a><BR>
 <LI><a href="#[1e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4a8]">duk__refcount_free_pending</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a9]">duk_hobject_refcount_finalize_norz</a><BR>
 <LI><a href="#[3ea]">duk__refcount_refzero_hobject</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4ae]">duk_heap_process_finalize_list</a><BR>
 <LI><a href="#[375]">duk_heap_run_finalizer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18e]">duk_safe_call</a><BR>
 <LI><a href="#[4d9]">duk_valstack_shrink_check_nothrow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4bd]">duk__resize_valstack</a><BR>
 <LI><a href="#[452]">duk__mark_tvals</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3dd]">duk__mark_heaphdr_nonnull</a><BR>
 <LI><a href="#[451]">duk__mark_tval</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3dd]">duk__mark_heaphdr_nonnull</a><BR>
 <LI><a href="#[450]">duk__mark_hobject</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3dd]">duk__mark_heaphdr_nonnull</a><BR>
 <LI><a href="#[27b]">duk__compact_object_list</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18e]">duk_safe_call</a><BR>
 <LI><a href="#[48a]">duk_err_range_push_beyond</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">duk_err_handle_error</a><BR>
 <LI><a href="#[4d6]">duk_heap_mem_realloc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[270]">duk__check_voluntary_gc</a><BR>
 <LI><a href="#[271]">duk_heap_mark_and_sweep</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4ae]">duk_heap_process_finalize_list</a><BR>
 <LI><a href="#[4f7]">duk__valstack_grow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[4f8]">duk_err_error_alloc_failed</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">duk_err_handle_error</a><BR>
 <LI><a href="#[32b]">duk_to_string</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32b]">duk_to_string</a><BR>
 <LI><a href="#[25e]">duk_err_handle_error_fmt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56b]">duk_err_create_and_throw</a><BR>
 <LI><a href="#[2df]">duk_check_type_mask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">duk_err_handle_error</a><BR>
 <LI><a href="#[255]">duk_err_type_invalid_args</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">duk_err_handle_error</a><BR>
 <LI><a href="#[190]">duk_pop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[4e3]">duk_to_property_key_hstring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f9]">duk_to_primitive</a><BR>
 <LI><a href="#[22d]">duk_to_hstring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32b]">duk_to_string</a><BR>
 <LI><a href="#[487]">duk__proxy_check_prop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ee]">duk_get_prop_stridx_short_raw</a><BR>
 <LI><a href="#[266]">duk_require_hobject</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[210]">duk_err_require_type_index</a><BR>
 <LI><a href="#[265]">duk_hobject_get_own_propdesc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[383]">duk__get_own_propdesc_raw</a><BR>
 <LI><a href="#[26b]">duk_require_hstring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[210]">duk_err_require_type_index</a><BR>
 <LI><a href="#[38c]">duk__get_propdesc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[383]">duk__get_own_propdesc_raw</a><BR>
 <LI><a href="#[381]">duk_hobject_hasprop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[383]">duk__get_own_propdesc_raw</a><BR>
 <LI><a href="#[2d8]">duk__get_identifier_reference</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[39a]">duk__getvar_helper</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[329]">duk_hobject_getprop</a><BR>
 <LI><a href="#[3a1]">duk_err_error_internal</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">duk_err_handle_error</a><BR>
 <LI><a href="#[329]">duk_hobject_getprop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2cf]">duk_call_method</a><BR>
 <LI><a href="#[480]">duk__pop_n_unsafe_raw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ab]">duk_refzero_check_fast</a><BR>
 <LI><a href="#[394]">duk_js_equals_helper</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f9]">duk_to_primitive</a><BR>
 <LI><a href="#[2bb]">duk_push_lstring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[2bc]">duk_numconv_parse</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[4e2]">duk_js_tonumber</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f9]">duk_to_primitive</a><BR>
 <LI><a href="#[3db]">duk_unpack_array_like</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[3d6]">duk__handle_specialfuncs_for_call</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[342]">duk_set_top_unsafe</a><BR>
 <LI><a href="#[3cc]">duk__handle_proxy_for_call</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a6]">duk_pop_2</a><BR>
 <LI><a href="#[3ce]">duk_pack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[3d1]">duk__to_new_array_length_checked</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[1ef]">duk_push_sprintf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b0]">duk_push_vsprintf</a><BR>
 <LI><a href="#[286]">duk_pop_n</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[483]">duk_get_buffer_data_raw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[210]">duk_err_require_type_index</a><BR>
 <LI><a href="#[3fc]">duk_push_buffer_raw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[283]">duk__concat_and_join_helper</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[52d]">duk_push_buffer_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5ae]">duk_require_hbuffer</a><BR>
 <LI><a href="#[279]">duk_to_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">duk_err_handle_error</a><BR>
 <LI><a href="#[4f2]">duk_push_string_tval_readable_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[495]">duk__push_string_tval_readable</a><BR>
 <LI><a href="#[5ac]">duk_pcall_method_flags</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18e]">duk_safe_call</a><BR>
 <LI><a href="#[3a8]">duk__resolve_target_func_and_this_binding</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c1]">duk_push_string_tval_readable</a><BR>
 <LI><a href="#[24e]">duk__call_callstack_limit_check_slowpath</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[29a]">duk__create_arguments_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a6]">duk_pop_2</a><BR>
 <LI><a href="#[321]">duk_set_top</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ab]">duk_refzero_check_fast</a><BR>
 <LI><a href="#[264]">duk__check_arguments_map_for_delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[268]">duk_hobject_delprop_raw</a><BR>
 <LI><a href="#[3b7]">duk_refzero_check_slow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4ae]">duk_heap_process_finalize_list</a><BR>
 <LI><a href="#[268]">duk_hobject_delprop_raw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">duk_err_handle_error</a><BR>
 <LI><a href="#[26d]">duk__check_arguments_map_for_put</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26f]">duk_js_putvar_envrec</a><BR>
 <LI><a href="#[432]">duk_hobject_putprop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2cf]">duk_call_method</a><BR>
 <LI><a href="#[539]">duk_hobject_define_property_helper</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">duk_err_handle_error</a><BR>
 <LI><a href="#[37b]">duk__get_hobject_promote_mask_raw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[210]">duk_err_require_type_index</a><BR>
 <LI><a href="#[340]">duk_def_prop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">duk_err_handle_error</a><BR>
 <LI><a href="#[24c]">duk__call_c_recursion_limit_check_slowpath</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[3a5]">duk__handle_call_raw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[342]">duk_set_top_unsafe</a><BR>
 <LI><a href="#[3aa]">duk_set_top_and_wipe</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[342]">duk_set_top_unsafe</a><BR>
 <LI><a href="#[42b]">duk__vm_arith_add</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f9]">duk_to_primitive</a><BR>
 <LI><a href="#[4fb]">duk_concat_2</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[49a]">duk__push_this_helper</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">duk_err_handle_error</a><BR>
 <LI><a href="#[55e]">duk_err_type_invalid_trap_result</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">duk_err_handle_error</a><BR>
 <LI><a href="#[4a2]">duk__put_prop_shared</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a6]">duk_pop_2</a><BR>
 <LI><a href="#[496]">duk_hobject_prototype_chain_contains</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[211]">duk__api_coerce_d2ui</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[210]">duk_err_require_type_index</a><BR>
 <LI><a href="#[3c3]">duk_hobject_enumerator_create</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a6]">duk_pop_2</a><BR>
 <LI><a href="#[341]">duk__executor_handle_call</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[342]">duk_set_top_unsafe</a><BR>
 <LI><a href="#[423]">duk__js_execute_bytecode_inner</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[342]">duk_set_top_unsafe</a><BR>
 <LI><a href="#[42e]">duk_js_instanceof</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[2d7]">duk__declvar_helper</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">duk_err_handle_error</a><BR>
 <LI><a href="#[429]">duk_js_compare_helper</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f9]">duk_to_primitive</a><BR>
 <LI><a href="#[435]">duk_hobject_delprop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2cf]">duk_call_method</a><BR>
 <LI><a href="#[43d]">duk_err_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">duk_err_handle_error</a><BR>
 <LI><a href="#[434]">duk_call_setup_propcall_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55f]">duk_push_string_readable</a><BR>
 <LI><a href="#[3ba]">duk_handle_call_unprotected_nargs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[343]">duk_handle_call_unprotected</a><BR>
 <LI><a href="#[56e]">duk_error_raw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56f]">duk_push_error_object_va_raw</a><BR>
 <LI><a href="#[4f9]">duk_to_primitive</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">duk_err_handle_error</a><BR>
 <LI><a href="#[5ab]">duk_require_number</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[210]">duk_err_require_type_index</a><BR>
 <LI><a href="#[1fa]">duk_hbuffer_resize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[502]">duk_resize_buffer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">duk_err_handle_error</a><BR>
 <LI><a href="#[5b0]">duk_push_vsprintf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">duk_err_range</a><BR>
 <LI><a href="#[311]">duk__emit_load_int32_raw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[304]">duk__emit_a_bc</a><BR>
 <LI><a href="#[473]">duk__parse_with_stmt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[461]">duk__parse_stmt</a><BR>
 <LI><a href="#[360]">duk__parse_func_like_fnum</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[420]">duk__parse_func_like_raw</a><BR>
 <LI><a href="#[354]">duk__expr_toforcedreg</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[345]">duk__expr</a><BR>
 <LI><a href="#[361]">duk__expr_toplain_ignore</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[345]">duk__expr</a><BR>
 <LI><a href="#[347]">duk__expr_nud</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[345]">duk__expr</a><BR>
 <LI><a href="#[45c]">duk__parse_disjunction</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45c]">duk__parse_disjunction</a><BR>
 <LI><a href="#[358]">duk__expr_toregconst</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[345]">duk__expr</a><BR>
 <LI><a href="#[34d]">duk__expr_toplain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[345]">duk__expr</a><BR>
 <LI><a href="#[348]">duk__expr_led</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[345]">duk__expr</a><BR>
 <LI><a href="#[472]">duk__parse_while_stmt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[461]">duk__parse_stmt</a><BR>
 <LI><a href="#[476]">duk__parse_try_stmt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[467]">duk__parse_stmts</a><BR>
 <LI><a href="#[474]">duk__parse_switch_stmt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[461]">duk__parse_stmt</a><BR>
 <LI><a href="#[461]">duk__parse_stmt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[467]">duk__parse_stmts</a><BR>
 <LI><a href="#[46c]">duk__parse_if_stmt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[461]">duk__parse_stmt</a><BR>
 <LI><a href="#[462]">duk__parse_for_stmt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[461]">duk__parse_stmt</a><BR>
 <LI><a href="#[460]">duk__parse_do_stmt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[461]">duk__parse_stmt</a><BR>
 <LI><a href="#[222]">duk__array_qsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[222]">duk__array_qsort</a><BR>
 <LI><a href="#[499]">duk_bi_date_get_local_tzoffset_gmtime</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47b]">duk_bi_date_get_timeval_from_dparts</a><BR>
 <LI><a href="#[2bf]">duk__dec_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b1]">duk__dec_value</a><BR>
 <LI><a href="#[2ad]">duk__dec_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b1]">duk__dec_value</a><BR>
 <LI><a href="#[2c8]">duk__dec_reviver_walk</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c8]">duk__dec_reviver_walk</a><BR>
 <LI><a href="#[322]">duk__enc_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[316]">duk__enc_value</a><BR>
 <LI><a href="#[313]">duk__enc_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[316]">duk__enc_value</a><BR>
 <LI><a href="#[455]">duk__match_regexp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[455]">duk__match_regexp</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[21]">CAN1_RX1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[22]">CAN1_SCE_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1f]">CAN1_TX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4c]">CAN2_RX0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4d]">CAN2_RX1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4e]">CAN2_SCE_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4b]">CAN2_TX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[73]">CAN3_RX0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[74]">CAN3_RX1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[75]">CAN3_SCE_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[72]">CAN3_TX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[69]">CEC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5a]">DCMI_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6d]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6e]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6f]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[70]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[65]">DMA2D_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[49]">ETH_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4a]">ETH_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[34]">EXTI15_10_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[23]">EXTI9_5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3c]">FMC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5c]">FPU_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[82]">Func_1</a> from test_duktape.o(i.Func_1) referenced from test_duktape.o(i.RMP_Init_Hook)
 <LI><a href="#[83]">Func_2</a> from test_duktape.o(i.Func_2) referenced from test_duktape.o(i.RMP_Init_Hook)
 <LI><a href="#[4]">HardFault_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2e]">I2C2_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2d]">I2C2_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[55]">I2C3_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[54]">I2C3_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6b]">I2C4_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6a]">I2C4_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[76]">JPEG_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[68]">LPTIM1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[64]">LTDC_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[63]">LTDC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[77]">MDIOS_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4f]">OTG_FS_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[36]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[d]">PVD_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from rmp_platform_cmx_asm.o(ARCH) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[67]">QUADSPI_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[a1]">RMP_Init</a> from rmp_kernel.o(i.RMP_Init) referenced from rmp_kernel.o(i.main)
 <LI><a href="#[5b]">RNG_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[35]">RTC_Alarm_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[f]">RTC_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[62]">SAI1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[66]">SAI2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3d]">SDMMC1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[71]">SDMMC2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6c]">SPDIF_RX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3f]">SPI3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5f]">SPI4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[60]">SPI5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[61]">SPI6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from rmp_platform_cmx_asm.o(ARCH) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[79]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f767xx.o(.text)
 <LI><a href="#[e]">TAMP_STAMP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[24]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[27]">TIM1_CC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[26]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[25]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[28]">TIM2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[29]">TIM3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2a]">TIM4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3e]">TIM5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[42]">TIM6_DAC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[43]">TIM7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[37]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3a]">TIM8_CC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[39]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[38]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[40]">UART4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[41]">UART5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5d]">UART7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5e]">UART8_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[31]">USART1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[33]">USART3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[53]">USART6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f767xx.o(.text)
 <LI><a href="#[7c]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[7d]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[7b]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[84]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[86]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[85]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[14d]">duk__acos</a> from duktape.o(i.duk__acos) referenced from duktape.o(.constdata)
 <LI><a href="#[14e]">duk__asin</a> from duktape.o(i.duk__asin) referenced from duktape.o(.constdata)
 <LI><a href="#[14f]">duk__atan</a> from duktape.o(i.duk__atan) referenced from duktape.o(.constdata)
 <LI><a href="#[15d]">duk__atan2_fixed</a> from duktape.o(i.duk__atan2_fixed) referenced from duktape.o(.constdata)
 <LI><a href="#[159]">duk__cbrt</a> from duktape.o(i.duk__cbrt) referenced from duktape.o(.constdata)
 <LI><a href="#[150]">duk__ceil</a> from duktape.o(i.duk__ceil) referenced from duktape.o(.constdata)
 <LI><a href="#[151]">duk__cos</a> from duktape.o(i.duk__cos) referenced from duktape.o(.constdata)
 <LI><a href="#[92]">duk__do_compile</a> from duktape.o(i.duk__do_compile) referenced from duktape.o(i.duk_compile_raw)
 <LI><a href="#[152]">duk__exp</a> from duktape.o(i.duk__exp) referenced from duktape.o(.constdata)
 <LI><a href="#[14c]">duk__fabs</a> from duktape.o(i.duk__fabs) referenced from duktape.o(.constdata)
 <LI><a href="#[98]">duk__finalize_helper</a> from duktape.o(i.duk__finalize_helper) referenced from duktape.o(i.duk_heap_run_finalizer)
 <LI><a href="#[153]">duk__floor</a> from duktape.o(i.duk__floor) referenced from duktape.o(.constdata)
 <LI><a href="#[8e]">duk__fmax_fixed</a> from duktape.o(i.duk__fmax_fixed) referenced from duktape.o(i.duk_bi_math_object_max)
 <LI><a href="#[8f]">duk__fmin_fixed</a> from duktape.o(i.duk__fmin_fixed) referenced from duktape.o(i.duk_bi_math_object_min)
 <LI><a href="#[9e]">duk__js_compile_raw</a> from duktape.o(i.duk__js_compile_raw) referenced from duktape.o(i.duk_js_compile)
 <LI><a href="#[154]">duk__log</a> from duktape.o(i.duk__log) referenced from duktape.o(.constdata)
 <LI><a href="#[15b]">duk__log10</a> from duktape.o(i.duk__log10) referenced from duktape.o(.constdata)
 <LI><a href="#[15a]">duk__log2</a> from duktape.o(i.duk__log2) referenced from duktape.o(.constdata)
 <LI><a href="#[9f]">duk__pcall_method_raw</a> from duktape.o(i.duk__pcall_method_raw) referenced from duktape.o(i.duk_pcall_method_flags)
 <LI><a href="#[87]">duk__protected_compact_object</a> from duktape.o(i.duk__protected_compact_object) referenced from duktape.o(i.duk__compact_object_list)
 <LI><a href="#[88]">duk__regexp_generate_ranges</a> from duktape.o(i.duk__regexp_generate_ranges) referenced from duktape.o(i.duk__parse_disjunction)
 <LI><a href="#[155]">duk__round_fixed</a> from duktape.o(i.duk__round_fixed) referenced from duktape.o(.constdata)
 <LI><a href="#[156]">duk__sin</a> from duktape.o(i.duk__sin) referenced from duktape.o(.constdata)
 <LI><a href="#[157]">duk__sqrt</a> from duktape.o(i.duk__sqrt) referenced from duktape.o(.constdata)
 <LI><a href="#[158]">duk__tan</a> from duktape.o(i.duk__tan) referenced from duktape.o(.constdata)
 <LI><a href="#[8a]">duk__transform_callback_decode_uri</a> from duktape.o(i.duk__transform_callback_decode_uri) referenced from duktape.o(i.duk_bi_global_object_decode_uri)
 <LI><a href="#[8a]">duk__transform_callback_decode_uri</a> from duktape.o(i.duk__transform_callback_decode_uri) referenced from duktape.o(i.duk_bi_global_object_decode_uri_component)
 <LI><a href="#[8b]">duk__transform_callback_encode_uri</a> from duktape.o(i.duk__transform_callback_encode_uri) referenced from duktape.o(i.duk_bi_global_object_encode_uri)
 <LI><a href="#[8b]">duk__transform_callback_encode_uri</a> from duktape.o(i.duk__transform_callback_encode_uri) referenced from duktape.o(i.duk_bi_global_object_encode_uri_component)
 <LI><a href="#[8c]">duk__transform_callback_escape</a> from duktape.o(i.duk__transform_callback_escape) referenced from duktape.o(i.duk_bi_global_object_escape)
 <LI><a href="#[8d]">duk__transform_callback_unescape</a> from duktape.o(i.duk__transform_callback_unescape) referenced from duktape.o(i.duk_bi_global_object_unescape)
 <LI><a href="#[15c]">duk__trunc</a> from duktape.o(i.duk__trunc) referenced from duktape.o(.constdata)
 <LI><a href="#[90]">duk__utf8_encode_char</a> from duktape.o(i.duk__utf8_encode_char) referenced from duktape.o(i.duk_bi_textencoder_prototype_encode)
 <LI><a href="#[a2]">duk_bi_array_constructor</a> from duktape.o(i.duk_bi_array_constructor) referenced from duktape.o(.constdata)
 <LI><a href="#[a3]">duk_bi_array_constructor_is_array</a> from duktape.o(i.duk_bi_array_constructor_is_array) referenced from duktape.o(.constdata)
 <LI><a href="#[a4]">duk_bi_array_prototype_concat</a> from duktape.o(i.duk_bi_array_prototype_concat) referenced from duktape.o(.constdata)
 <LI><a href="#[a5]">duk_bi_array_prototype_indexof_shared</a> from duktape.o(i.duk_bi_array_prototype_indexof_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[a6]">duk_bi_array_prototype_iter_shared</a> from duktape.o(i.duk_bi_array_prototype_iter_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[a7]">duk_bi_array_prototype_join_shared</a> from duktape.o(i.duk_bi_array_prototype_join_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[a8]">duk_bi_array_prototype_pop</a> from duktape.o(i.duk_bi_array_prototype_pop) referenced from duktape.o(.constdata)
 <LI><a href="#[a9]">duk_bi_array_prototype_push</a> from duktape.o(i.duk_bi_array_prototype_push) referenced from duktape.o(.constdata)
 <LI><a href="#[aa]">duk_bi_array_prototype_reduce_shared</a> from duktape.o(i.duk_bi_array_prototype_reduce_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[ab]">duk_bi_array_prototype_reverse</a> from duktape.o(i.duk_bi_array_prototype_reverse) referenced from duktape.o(.constdata)
 <LI><a href="#[ac]">duk_bi_array_prototype_shift</a> from duktape.o(i.duk_bi_array_prototype_shift) referenced from duktape.o(.constdata)
 <LI><a href="#[ad]">duk_bi_array_prototype_slice</a> from duktape.o(i.duk_bi_array_prototype_slice) referenced from duktape.o(.constdata)
 <LI><a href="#[ae]">duk_bi_array_prototype_sort</a> from duktape.o(i.duk_bi_array_prototype_sort) referenced from duktape.o(.constdata)
 <LI><a href="#[af]">duk_bi_array_prototype_splice</a> from duktape.o(i.duk_bi_array_prototype_splice) referenced from duktape.o(.constdata)
 <LI><a href="#[b0]">duk_bi_array_prototype_to_string</a> from duktape.o(i.duk_bi_array_prototype_to_string) referenced from duktape.o(.constdata)
 <LI><a href="#[b1]">duk_bi_array_prototype_unshift</a> from duktape.o(i.duk_bi_array_prototype_unshift) referenced from duktape.o(.constdata)
 <LI><a href="#[b2]">duk_bi_arraybuffer_constructor</a> from duktape.o(i.duk_bi_arraybuffer_constructor) referenced from duktape.o(.constdata)
 <LI><a href="#[b3]">duk_bi_arraybuffer_isview</a> from duktape.o(i.duk_bi_arraybuffer_isview) referenced from duktape.o(.constdata)
 <LI><a href="#[b4]">duk_bi_boolean_constructor</a> from duktape.o(i.duk_bi_boolean_constructor) referenced from duktape.o(.constdata)
 <LI><a href="#[b5]">duk_bi_boolean_prototype_tostring_shared</a> from duktape.o(i.duk_bi_boolean_prototype_tostring_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[b6]">duk_bi_buffer_compare_shared</a> from duktape.o(i.duk_bi_buffer_compare_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[b7]">duk_bi_buffer_readfield</a> from duktape.o(i.duk_bi_buffer_readfield) referenced from duktape.o(.constdata)
 <LI><a href="#[b8]">duk_bi_buffer_slice_shared</a> from duktape.o(i.duk_bi_buffer_slice_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[b9]">duk_bi_buffer_writefield</a> from duktape.o(i.duk_bi_buffer_writefield) referenced from duktape.o(.constdata)
 <LI><a href="#[ba]">duk_bi_dataview_constructor</a> from duktape.o(i.duk_bi_dataview_constructor) referenced from duktape.o(.constdata)
 <LI><a href="#[bb]">duk_bi_date_constructor</a> from duktape.o(i.duk_bi_date_constructor) referenced from duktape.o(.constdata)
 <LI><a href="#[bc]">duk_bi_date_constructor_now</a> from duktape.o(i.duk_bi_date_constructor_now) referenced from duktape.o(.constdata)
 <LI><a href="#[bd]">duk_bi_date_constructor_parse</a> from duktape.o(i.duk_bi_date_constructor_parse) referenced from duktape.o(.constdata)
 <LI><a href="#[be]">duk_bi_date_constructor_utc</a> from duktape.o(i.duk_bi_date_constructor_utc) referenced from duktape.o(.constdata)
 <LI><a href="#[bf]">duk_bi_date_prototype_get_shared</a> from duktape.o(i.duk_bi_date_prototype_get_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[c0]">duk_bi_date_prototype_get_timezone_offset</a> from duktape.o(i.duk_bi_date_prototype_get_timezone_offset) referenced from duktape.o(.constdata)
 <LI><a href="#[c1]">duk_bi_date_prototype_set_shared</a> from duktape.o(i.duk_bi_date_prototype_set_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[c2]">duk_bi_date_prototype_set_time</a> from duktape.o(i.duk_bi_date_prototype_set_time) referenced from duktape.o(.constdata)
 <LI><a href="#[c3]">duk_bi_date_prototype_to_json</a> from duktape.o(i.duk_bi_date_prototype_to_json) referenced from duktape.o(.constdata)
 <LI><a href="#[c4]">duk_bi_date_prototype_tostring_shared</a> from duktape.o(i.duk_bi_date_prototype_tostring_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[c5]">duk_bi_date_prototype_value_of</a> from duktape.o(i.duk_bi_date_prototype_value_of) referenced from duktape.o(.constdata)
 <LI><a href="#[c6]">duk_bi_duktape_object_act</a> from duktape.o(i.duk_bi_duktape_object_act) referenced from duktape.o(.constdata)
 <LI><a href="#[c7]">duk_bi_duktape_object_compact</a> from duktape.o(i.duk_bi_duktape_object_compact) referenced from duktape.o(.constdata)
 <LI><a href="#[c8]">duk_bi_duktape_object_dec</a> from duktape.o(i.duk_bi_duktape_object_dec) referenced from duktape.o(.constdata)
 <LI><a href="#[c9]">duk_bi_duktape_object_enc</a> from duktape.o(i.duk_bi_duktape_object_enc) referenced from duktape.o(.constdata)
 <LI><a href="#[ca]">duk_bi_duktape_object_fin</a> from duktape.o(i.duk_bi_duktape_object_fin) referenced from duktape.o(.constdata)
 <LI><a href="#[cb]">duk_bi_duktape_object_gc</a> from duktape.o(i.duk_bi_duktape_object_gc) referenced from duktape.o(.constdata)
 <LI><a href="#[cc]">duk_bi_duktape_object_info</a> from duktape.o(i.duk_bi_duktape_object_info) referenced from duktape.o(.constdata)
 <LI><a href="#[cd]">duk_bi_error_constructor_shared</a> from duktape.o(i.duk_bi_error_constructor_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[ce]">duk_bi_error_prototype_filename_getter</a> from duktape.o(i.duk_bi_error_prototype_filename_getter) referenced from duktape.o(.constdata)
 <LI><a href="#[cf]">duk_bi_error_prototype_filename_setter</a> from duktape.o(i.duk_bi_error_prototype_filename_setter) referenced from duktape.o(.constdata)
 <LI><a href="#[d0]">duk_bi_error_prototype_linenumber_getter</a> from duktape.o(i.duk_bi_error_prototype_linenumber_getter) referenced from duktape.o(.constdata)
 <LI><a href="#[d1]">duk_bi_error_prototype_linenumber_setter</a> from duktape.o(i.duk_bi_error_prototype_linenumber_setter) referenced from duktape.o(.constdata)
 <LI><a href="#[d2]">duk_bi_error_prototype_stack_getter</a> from duktape.o(i.duk_bi_error_prototype_stack_getter) referenced from duktape.o(.constdata)
 <LI><a href="#[d3]">duk_bi_error_prototype_stack_setter</a> from duktape.o(i.duk_bi_error_prototype_stack_setter) referenced from duktape.o(.constdata)
 <LI><a href="#[d4]">duk_bi_error_prototype_to_string</a> from duktape.o(i.duk_bi_error_prototype_to_string) referenced from duktape.o(.constdata)
 <LI><a href="#[d5]">duk_bi_function_constructor</a> from duktape.o(i.duk_bi_function_constructor) referenced from duktape.o(.constdata)
 <LI><a href="#[d6]">duk_bi_function_prototype</a> from duktape.o(i.duk_bi_function_prototype) referenced from duktape.o(.constdata)
 <LI><a href="#[9b]">duk_bi_function_prototype_apply</a> from duktape.o(i.duk_bi_function_prototype_apply) referenced from duktape.o(.constdata)
 <LI><a href="#[9b]">duk_bi_function_prototype_apply</a> from duktape.o(i.duk_bi_function_prototype_apply) referenced from duktape.o(i.duk_hthread_create_builtin_objects)
 <LI><a href="#[d7]">duk_bi_function_prototype_bind</a> from duktape.o(i.duk_bi_function_prototype_bind) referenced from duktape.o(.constdata)
 <LI><a href="#[9a]">duk_bi_function_prototype_call</a> from duktape.o(i.duk_bi_function_prototype_call) referenced from duktape.o(.constdata)
 <LI><a href="#[9a]">duk_bi_function_prototype_call</a> from duktape.o(i.duk_bi_function_prototype_call) referenced from duktape.o(i.duk_hthread_create_builtin_objects)
 <LI><a href="#[d8]">duk_bi_function_prototype_to_string</a> from duktape.o(i.duk_bi_function_prototype_to_string) referenced from duktape.o(.constdata)
 <LI><a href="#[d9]">duk_bi_global_object_decode_uri</a> from duktape.o(i.duk_bi_global_object_decode_uri) referenced from duktape.o(.constdata)
 <LI><a href="#[da]">duk_bi_global_object_decode_uri_component</a> from duktape.o(i.duk_bi_global_object_decode_uri_component) referenced from duktape.o(.constdata)
 <LI><a href="#[db]">duk_bi_global_object_encode_uri</a> from duktape.o(i.duk_bi_global_object_encode_uri) referenced from duktape.o(.constdata)
 <LI><a href="#[dc]">duk_bi_global_object_encode_uri_component</a> from duktape.o(i.duk_bi_global_object_encode_uri_component) referenced from duktape.o(.constdata)
 <LI><a href="#[dd]">duk_bi_global_object_escape</a> from duktape.o(i.duk_bi_global_object_escape) referenced from duktape.o(.constdata)
 <LI><a href="#[99]">duk_bi_global_object_eval</a> from duktape.o(i.duk_bi_global_object_eval) referenced from duktape.o(.constdata)
 <LI><a href="#[99]">duk_bi_global_object_eval</a> from duktape.o(i.duk_bi_global_object_eval) referenced from duktape.o(i.duk_hthread_create_builtin_objects)
 <LI><a href="#[de]">duk_bi_global_object_is_finite</a> from duktape.o(i.duk_bi_global_object_is_finite) referenced from duktape.o(.constdata)
 <LI><a href="#[df]">duk_bi_global_object_is_nan</a> from duktape.o(i.duk_bi_global_object_is_nan) referenced from duktape.o(.constdata)
 <LI><a href="#[e0]">duk_bi_global_object_parse_float</a> from duktape.o(i.duk_bi_global_object_parse_float) referenced from duktape.o(.constdata)
 <LI><a href="#[e1]">duk_bi_global_object_parse_int</a> from duktape.o(i.duk_bi_global_object_parse_int) referenced from duktape.o(.constdata)
 <LI><a href="#[e2]">duk_bi_global_object_unescape</a> from duktape.o(i.duk_bi_global_object_unescape) referenced from duktape.o(.constdata)
 <LI><a href="#[e3]">duk_bi_json_object_parse</a> from duktape.o(i.duk_bi_json_object_parse) referenced from duktape.o(.constdata)
 <LI><a href="#[e4]">duk_bi_json_object_stringify</a> from duktape.o(i.duk_bi_json_object_stringify) referenced from duktape.o(.constdata)
 <LI><a href="#[e5]">duk_bi_math_object_clz32</a> from duktape.o(i.duk_bi_math_object_clz32) referenced from duktape.o(.constdata)
 <LI><a href="#[e6]">duk_bi_math_object_hypot</a> from duktape.o(i.duk_bi_math_object_hypot) referenced from duktape.o(.constdata)
 <LI><a href="#[e7]">duk_bi_math_object_imul</a> from duktape.o(i.duk_bi_math_object_imul) referenced from duktape.o(.constdata)
 <LI><a href="#[e8]">duk_bi_math_object_max</a> from duktape.o(i.duk_bi_math_object_max) referenced from duktape.o(.constdata)
 <LI><a href="#[e9]">duk_bi_math_object_min</a> from duktape.o(i.duk_bi_math_object_min) referenced from duktape.o(.constdata)
 <LI><a href="#[ea]">duk_bi_math_object_onearg_shared</a> from duktape.o(i.duk_bi_math_object_onearg_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[eb]">duk_bi_math_object_random</a> from duktape.o(i.duk_bi_math_object_random) referenced from duktape.o(.constdata)
 <LI><a href="#[ec]">duk_bi_math_object_sign</a> from duktape.o(i.duk_bi_math_object_sign) referenced from duktape.o(.constdata)
 <LI><a href="#[ed]">duk_bi_math_object_twoarg_shared</a> from duktape.o(i.duk_bi_math_object_twoarg_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[ee]">duk_bi_native_function_length</a> from duktape.o(i.duk_bi_native_function_length) referenced from duktape.o(.constdata)
 <LI><a href="#[ef]">duk_bi_native_function_name</a> from duktape.o(i.duk_bi_native_function_name) referenced from duktape.o(.constdata)
 <LI><a href="#[f0]">duk_bi_nodejs_buffer_byte_length</a> from duktape.o(i.duk_bi_nodejs_buffer_byte_length) referenced from duktape.o(.constdata)
 <LI><a href="#[f1]">duk_bi_nodejs_buffer_concat</a> from duktape.o(i.duk_bi_nodejs_buffer_concat) referenced from duktape.o(.constdata)
 <LI><a href="#[f2]">duk_bi_nodejs_buffer_constructor</a> from duktape.o(i.duk_bi_nodejs_buffer_constructor) referenced from duktape.o(.constdata)
 <LI><a href="#[f3]">duk_bi_nodejs_buffer_copy</a> from duktape.o(i.duk_bi_nodejs_buffer_copy) referenced from duktape.o(.constdata)
 <LI><a href="#[f4]">duk_bi_nodejs_buffer_fill</a> from duktape.o(i.duk_bi_nodejs_buffer_fill) referenced from duktape.o(.constdata)
 <LI><a href="#[f5]">duk_bi_nodejs_buffer_is_buffer</a> from duktape.o(i.duk_bi_nodejs_buffer_is_buffer) referenced from duktape.o(.constdata)
 <LI><a href="#[f6]">duk_bi_nodejs_buffer_is_encoding</a> from duktape.o(i.duk_bi_nodejs_buffer_is_encoding) referenced from duktape.o(.constdata)
 <LI><a href="#[f7]">duk_bi_nodejs_buffer_tojson</a> from duktape.o(i.duk_bi_nodejs_buffer_tojson) referenced from duktape.o(.constdata)
 <LI><a href="#[f8]">duk_bi_nodejs_buffer_tostring</a> from duktape.o(i.duk_bi_nodejs_buffer_tostring) referenced from duktape.o(.constdata)
 <LI><a href="#[f9]">duk_bi_nodejs_buffer_write</a> from duktape.o(i.duk_bi_nodejs_buffer_write) referenced from duktape.o(.constdata)
 <LI><a href="#[fa]">duk_bi_number_constructor</a> from duktape.o(i.duk_bi_number_constructor) referenced from duktape.o(.constdata)
 <LI><a href="#[fb]">duk_bi_number_prototype_to_exponential</a> from duktape.o(i.duk_bi_number_prototype_to_exponential) referenced from duktape.o(.constdata)
 <LI><a href="#[fc]">duk_bi_number_prototype_to_fixed</a> from duktape.o(i.duk_bi_number_prototype_to_fixed) referenced from duktape.o(.constdata)
 <LI><a href="#[fd]">duk_bi_number_prototype_to_locale_string</a> from duktape.o(i.duk_bi_number_prototype_to_locale_string) referenced from duktape.o(.constdata)
 <LI><a href="#[fe]">duk_bi_number_prototype_to_precision</a> from duktape.o(i.duk_bi_number_prototype_to_precision) referenced from duktape.o(.constdata)
 <LI><a href="#[ff]">duk_bi_number_prototype_to_string</a> from duktape.o(i.duk_bi_number_prototype_to_string) referenced from duktape.o(.constdata)
 <LI><a href="#[100]">duk_bi_number_prototype_value_of</a> from duktape.o(i.duk_bi_number_prototype_value_of) referenced from duktape.o(.constdata)
 <LI><a href="#[101]">duk_bi_object_constructor</a> from duktape.o(i.duk_bi_object_constructor) referenced from duktape.o(.constdata)
 <LI><a href="#[102]">duk_bi_object_constructor_assign</a> from duktape.o(i.duk_bi_object_constructor_assign) referenced from duktape.o(.constdata)
 <LI><a href="#[103]">duk_bi_object_constructor_create</a> from duktape.o(i.duk_bi_object_constructor_create) referenced from duktape.o(.constdata)
 <LI><a href="#[104]">duk_bi_object_constructor_define_properties</a> from duktape.o(i.duk_bi_object_constructor_define_properties) referenced from duktape.o(.constdata)
 <LI><a href="#[105]">duk_bi_object_constructor_define_property</a> from duktape.o(i.duk_bi_object_constructor_define_property) referenced from duktape.o(.constdata)
 <LI><a href="#[106]">duk_bi_object_constructor_get_own_property_descriptor</a> from duktape.o(i.duk_bi_object_constructor_get_own_property_descriptor) referenced from duktape.o(.constdata)
 <LI><a href="#[107]">duk_bi_object_constructor_is</a> from duktape.o(i.duk_bi_object_constructor_is) referenced from duktape.o(.constdata)
 <LI><a href="#[108]">duk_bi_object_constructor_is_extensible</a> from duktape.o(i.duk_bi_object_constructor_is_extensible) referenced from duktape.o(.constdata)
 <LI><a href="#[109]">duk_bi_object_constructor_is_sealed_frozen_shared</a> from duktape.o(i.duk_bi_object_constructor_is_sealed_frozen_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[10a]">duk_bi_object_constructor_keys_shared</a> from duktape.o(i.duk_bi_object_constructor_keys_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[10b]">duk_bi_object_constructor_prevent_extensions</a> from duktape.o(i.duk_bi_object_constructor_prevent_extensions) referenced from duktape.o(.constdata)
 <LI><a href="#[10c]">duk_bi_object_constructor_seal_freeze_shared</a> from duktape.o(i.duk_bi_object_constructor_seal_freeze_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[10d]">duk_bi_object_getprototype_shared</a> from duktape.o(i.duk_bi_object_getprototype_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[10e]">duk_bi_object_prototype_defineaccessor</a> from duktape.o(i.duk_bi_object_prototype_defineaccessor) referenced from duktape.o(.constdata)
 <LI><a href="#[10f]">duk_bi_object_prototype_has_own_property</a> from duktape.o(i.duk_bi_object_prototype_has_own_property) referenced from duktape.o(.constdata)
 <LI><a href="#[110]">duk_bi_object_prototype_is_prototype_of</a> from duktape.o(i.duk_bi_object_prototype_is_prototype_of) referenced from duktape.o(.constdata)
 <LI><a href="#[111]">duk_bi_object_prototype_lookupaccessor</a> from duktape.o(i.duk_bi_object_prototype_lookupaccessor) referenced from duktape.o(.constdata)
 <LI><a href="#[112]">duk_bi_object_prototype_property_is_enumerable</a> from duktape.o(i.duk_bi_object_prototype_property_is_enumerable) referenced from duktape.o(.constdata)
 <LI><a href="#[113]">duk_bi_object_prototype_to_locale_string</a> from duktape.o(i.duk_bi_object_prototype_to_locale_string) referenced from duktape.o(.constdata)
 <LI><a href="#[114]">duk_bi_object_prototype_to_string</a> from duktape.o(i.duk_bi_object_prototype_to_string) referenced from duktape.o(.constdata)
 <LI><a href="#[115]">duk_bi_object_prototype_value_of</a> from duktape.o(i.duk_bi_object_prototype_value_of) referenced from duktape.o(.constdata)
 <LI><a href="#[116]">duk_bi_object_setprototype_shared</a> from duktape.o(i.duk_bi_object_setprototype_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[117]">duk_bi_performance_now</a> from duktape.o(i.duk_bi_performance_now) referenced from duktape.o(.constdata)
 <LI><a href="#[118]">duk_bi_pointer_constructor</a> from duktape.o(i.duk_bi_pointer_constructor) referenced from duktape.o(.constdata)
 <LI><a href="#[119]">duk_bi_pointer_prototype_tostring_shared</a> from duktape.o(i.duk_bi_pointer_prototype_tostring_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[11a]">duk_bi_proxy_constructor</a> from duktape.o(i.duk_bi_proxy_constructor) referenced from duktape.o(.constdata)
 <LI><a href="#[9c]">duk_bi_reflect_apply</a> from duktape.o(i.duk_bi_reflect_apply) referenced from duktape.o(.constdata)
 <LI><a href="#[9c]">duk_bi_reflect_apply</a> from duktape.o(i.duk_bi_reflect_apply) referenced from duktape.o(i.duk_hthread_create_builtin_objects)
 <LI><a href="#[9d]">duk_bi_reflect_construct</a> from duktape.o(i.duk_bi_reflect_construct) referenced from duktape.o(.constdata)
 <LI><a href="#[9d]">duk_bi_reflect_construct</a> from duktape.o(i.duk_bi_reflect_construct) referenced from duktape.o(i.duk_hthread_create_builtin_objects)
 <LI><a href="#[11b]">duk_bi_reflect_object_delete_property</a> from duktape.o(i.duk_bi_reflect_object_delete_property) referenced from duktape.o(.constdata)
 <LI><a href="#[11c]">duk_bi_reflect_object_get</a> from duktape.o(i.duk_bi_reflect_object_get) referenced from duktape.o(.constdata)
 <LI><a href="#[11d]">duk_bi_reflect_object_has</a> from duktape.o(i.duk_bi_reflect_object_has) referenced from duktape.o(.constdata)
 <LI><a href="#[11e]">duk_bi_reflect_object_set</a> from duktape.o(i.duk_bi_reflect_object_set) referenced from duktape.o(.constdata)
 <LI><a href="#[11f]">duk_bi_regexp_constructor</a> from duktape.o(i.duk_bi_regexp_constructor) referenced from duktape.o(.constdata)
 <LI><a href="#[120]">duk_bi_regexp_prototype_exec</a> from duktape.o(i.duk_bi_regexp_prototype_exec) referenced from duktape.o(.constdata)
 <LI><a href="#[121]">duk_bi_regexp_prototype_flags</a> from duktape.o(i.duk_bi_regexp_prototype_flags) referenced from duktape.o(.constdata)
 <LI><a href="#[122]">duk_bi_regexp_prototype_shared_getter</a> from duktape.o(i.duk_bi_regexp_prototype_shared_getter) referenced from duktape.o(.constdata)
 <LI><a href="#[123]">duk_bi_regexp_prototype_test</a> from duktape.o(i.duk_bi_regexp_prototype_test) referenced from duktape.o(.constdata)
 <LI><a href="#[124]">duk_bi_regexp_prototype_tostring</a> from duktape.o(i.duk_bi_regexp_prototype_tostring) referenced from duktape.o(.constdata)
 <LI><a href="#[125]">duk_bi_string_constructor</a> from duktape.o(i.duk_bi_string_constructor) referenced from duktape.o(.constdata)
 <LI><a href="#[126]">duk_bi_string_constructor_from_char_code</a> from duktape.o(i.duk_bi_string_constructor_from_char_code) referenced from duktape.o(.constdata)
 <LI><a href="#[127]">duk_bi_string_constructor_from_code_point</a> from duktape.o(i.duk_bi_string_constructor_from_code_point) referenced from duktape.o(.constdata)
 <LI><a href="#[128]">duk_bi_string_prototype_caseconv_shared</a> from duktape.o(i.duk_bi_string_prototype_caseconv_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[129]">duk_bi_string_prototype_char_at</a> from duktape.o(i.duk_bi_string_prototype_char_at) referenced from duktape.o(.constdata)
 <LI><a href="#[12a]">duk_bi_string_prototype_char_code_at</a> from duktape.o(i.duk_bi_string_prototype_char_code_at) referenced from duktape.o(.constdata)
 <LI><a href="#[12b]">duk_bi_string_prototype_concat</a> from duktape.o(i.duk_bi_string_prototype_concat) referenced from duktape.o(.constdata)
 <LI><a href="#[12c]">duk_bi_string_prototype_includes</a> from duktape.o(i.duk_bi_string_prototype_includes) referenced from duktape.o(.constdata)
 <LI><a href="#[12d]">duk_bi_string_prototype_indexof_shared</a> from duktape.o(i.duk_bi_string_prototype_indexof_shared) referenced from duktape.o(.constdata)
 <LI><a href="#[12e]">duk_bi_string_prototype_locale_compare</a> from duktape.o(i.duk_bi_string_prototype_locale_compare) referenced from duktape.o(.constdata)
 <LI><a href="#[12f]">duk_bi_string_prototype_match</a> from duktape.o(i.duk_bi_string_prototype_match) referenced from duktape.o(.constdata)
 <LI><a href="#[130]">duk_bi_string_prototype_repeat</a> from duktape.o(i.duk_bi_string_prototype_repeat) referenced from duktape.o(.constdata)
 <LI><a href="#[131]">duk_bi_string_prototype_replace</a> from duktape.o(i.duk_bi_string_prototype_replace) referenced from duktape.o(.constdata)
 <LI><a href="#[132]">duk_bi_string_prototype_search</a> from duktape.o(i.duk_bi_string_prototype_search) referenced from duktape.o(.constdata)
 <LI><a href="#[133]">duk_bi_string_prototype_slice</a> from duktape.o(i.duk_bi_string_prototype_slice) referenced from duktape.o(.constdata)
 <LI><a href="#[134]">duk_bi_string_prototype_split</a> from duktape.o(i.duk_bi_string_prototype_split) referenced from duktape.o(.constdata)
 <LI><a href="#[135]">duk_bi_string_prototype_startswith_endswith</a> from duktape.o(i.duk_bi_string_prototype_startswith_endswith) referenced from duktape.o(.constdata)
 <LI><a href="#[136]">duk_bi_string_prototype_substr</a> from duktape.o(i.duk_bi_string_prototype_substr) referenced from duktape.o(.constdata)
 <LI><a href="#[137]">duk_bi_string_prototype_substring</a> from duktape.o(i.duk_bi_string_prototype_substring) referenced from duktape.o(.constdata)
 <LI><a href="#[138]">duk_bi_string_prototype_to_string</a> from duktape.o(i.duk_bi_string_prototype_to_string) referenced from duktape.o(.constdata)
 <LI><a href="#[139]">duk_bi_string_prototype_trim</a> from duktape.o(i.duk_bi_string_prototype_trim) referenced from duktape.o(.constdata)
 <LI><a href="#[13a]">duk_bi_textdecoder_constructor</a> from duktape.o(i.duk_bi_textdecoder_constructor) referenced from duktape.o(.constdata)
 <LI><a href="#[13b]">duk_bi_textdecoder_prototype_decode</a> from duktape.o(i.duk_bi_textdecoder_prototype_decode) referenced from duktape.o(.constdata)
 <LI><a href="#[13c]">duk_bi_textdecoder_prototype_shared_getter</a> from duktape.o(i.duk_bi_textdecoder_prototype_shared_getter) referenced from duktape.o(.constdata)
 <LI><a href="#[13d]">duk_bi_textencoder_constructor</a> from duktape.o(i.duk_bi_textencoder_constructor) referenced from duktape.o(.constdata)
 <LI><a href="#[13e]">duk_bi_textencoder_prototype_encode</a> from duktape.o(i.duk_bi_textencoder_prototype_encode) referenced from duktape.o(.constdata)
 <LI><a href="#[13f]">duk_bi_textencoder_prototype_encoding_getter</a> from duktape.o(i.duk_bi_textencoder_prototype_encoding_getter) referenced from duktape.o(.constdata)
 <LI><a href="#[140]">duk_bi_thread_constructor</a> from duktape.o(i.duk_bi_thread_constructor) referenced from duktape.o(.constdata)
 <LI><a href="#[141]">duk_bi_thread_current</a> from duktape.o(i.duk_bi_thread_current) referenced from duktape.o(.constdata)
 <LI><a href="#[142]">duk_bi_thread_resume</a> from duktape.o(i.duk_bi_thread_resume) referenced from duktape.o(.constdata)
 <LI><a href="#[143]">duk_bi_thread_yield</a> from duktape.o(i.duk_bi_thread_yield) referenced from duktape.o(.constdata)
 <LI><a href="#[144]">duk_bi_type_error_thrower</a> from duktape.o(i.duk_bi_type_error_thrower) referenced from duktape.o(.constdata)
 <LI><a href="#[145]">duk_bi_typedarray_buffer_getter</a> from duktape.o(i.duk_bi_typedarray_buffer_getter) referenced from duktape.o(.constdata)
 <LI><a href="#[146]">duk_bi_typedarray_bytelength_getter</a> from duktape.o(i.duk_bi_typedarray_bytelength_getter) referenced from duktape.o(.constdata)
 <LI><a href="#[147]">duk_bi_typedarray_byteoffset_getter</a> from duktape.o(i.duk_bi_typedarray_byteoffset_getter) referenced from duktape.o(.constdata)
 <LI><a href="#[148]">duk_bi_typedarray_constructor</a> from duktape.o(i.duk_bi_typedarray_constructor) referenced from duktape.o(.constdata)
 <LI><a href="#[149]">duk_bi_typedarray_set</a> from duktape.o(i.duk_bi_typedarray_set) referenced from duktape.o(.constdata)
 <LI><a href="#[14a]">duk_bi_uint8array_allocplain</a> from duktape.o(i.duk_bi_uint8array_allocplain) referenced from duktape.o(.constdata)
 <LI><a href="#[14b]">duk_bi_uint8array_plainof</a> from duktape.o(i.duk_bi_uint8array_plainof) referenced from duktape.o(.constdata)
 <LI><a href="#[93]">duk_default_alloc_function</a> from duktape.o(i.duk_default_alloc_function) referenced from duktape.o(i.duk_create_heap)
 <LI><a href="#[96]">duk_default_fatal_handler</a> from duktape.o(i.duk_default_fatal_handler) referenced from duktape.o(i.duk_create_heap)
 <LI><a href="#[95]">duk_default_free_function</a> from duktape.o(i.duk_default_free_function) referenced from duktape.o(i.duk_create_heap)
 <LI><a href="#[94]">duk_default_realloc_function</a> from duktape.o(i.duk_default_realloc_function) referenced from duktape.o(i.duk_create_heap)
 <LI><a href="#[97]">duk_hbuffer_get_dynalloc_ptr</a> from duktape.o(i.duk_hbuffer_get_dynalloc_ptr) referenced from duktape.o(i.duk_hbuffer_resize)
 <LI><a href="#[89]">duk_hthread_get_valstack_ptr</a> from duktape.o(i.duk_hthread_get_valstack_ptr) referenced from duktape.o(i.duk__resize_valstack)
 <LI><a href="#[15e]">duk_js_arith_pow</a> from duktape.o(i.duk_js_arith_pow) referenced from duktape.o(.constdata)
 <LI><a href="#[a0]">duk_js_tointeger</a> from duktape.o(i.duk_js_tointeger) referenced from duktape.o(i.duk_to_int)
 <LI><a href="#[a0]">duk_js_tointeger</a> from duktape.o(i.duk_js_tointeger) referenced from duktape.o(i.duk_to_uint)
 <LI><a href="#[91]">duk_push_error_object_stash</a> from duktape.o(i.duk_push_error_object_stash) referenced from duktape.o(i.duk_call_setup_propcall_error)
 <LI><a href="#[80]">eval_raw</a> from test_duktape.o(i.eval_raw) referenced from test_duktape.o(i.Func_1)
 <LI><a href="#[7e]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[78]">main</a> from rmp_kernel.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7f]">native_print</a> from test_duktape.o(i.native_print) referenced from test_duktape.o(i.Func_1)
 <LI><a href="#[81]">tostring_raw</a> from test_duktape.o(i.tostring_raw) referenced from test_duktape.o(i.Func_1)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(.text)
</UL>
<P><STRONG><a name="[5bb]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[15f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[182]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5bc]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[5bd]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[5be]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[5bf]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[5c0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>CAN3_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>CAN3_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>CAN3_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>CAN3_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[161]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[163]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_readfield
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__rnd_rotl
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>

<P><STRONG><a name="[5c1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__rnd_rotl
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>

<P><STRONG><a name="[5c2]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_readfield
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5c3]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_local_tzoffset_gmtime
</UL>

<P><STRONG><a name="[5c4]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_slice_shared
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__strtable_alloc_hstring
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_newline_indent
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_stridx
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_hstring
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_cstring
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_buffer
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__concat_and_join_helper
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__arraybuffer_plain_slice
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_buffer_raw
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_validated_write
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_push_validated_read
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat_2
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_write_raw_slice
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_insert_raw_slice
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_insert_raw_bytes
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_repeat
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_tostring
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_concat
</UL>

<P><STRONG><a name="[207]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__match_regexp
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_copy
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_helper
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pack
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_realloc_props
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_copy_tvals_incref
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_local_tzoffset_gmtime
</UL>

<P><STRONG><a name="[2f5]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_buffer_data_hex
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_format_uint32
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_fixed_format_round
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_remove_raw_slice
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_insert_raw_slice
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_insert_raw_bytes
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_insert_raw_area
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_set
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_copy
</UL>

<P><STRONG><a name="[203]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__sort_enum_keys_es6
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_bytes
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_reserve_gap
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_n
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strcache_offset_char2byte
</UL>

<P><STRONG><a name="[5c5]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_inspect_value
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_realloc_props
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_fill
</UL>

<P><STRONG><a name="[5c6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5c7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc_zeroed
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_resize
</UL>

<P><STRONG><a name="[245]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__uni_range_match
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__strtable_alloc_hstring
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_string_iso8601_subset
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmts
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__match_regexp
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_heap_strings
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_func_valstack_slots
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_pc2line_query_raw
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_pointer
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__case_transform_helper
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_twoexp
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_compile
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_re_token
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_initctx
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_compile
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_init_stacks
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_alloc_unchecked
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_pc2line_pack
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_alloc
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_alloc
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hboundfunc_alloc
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_parse_helper
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_local_tzoffset_gmtime
</UL>

<P><STRONG><a name="[5c8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[308]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__inspect_multiple_uint
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_cstring
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_vsprintf
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_compile_raw
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_equals_ascii_cstring
</UL>

<P><STRONG><a name="[530]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_is_encoding
</UL>

<P><STRONG><a name="[4cd]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__str_search_shared
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_data_compare
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_equals_ascii_cstring
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_intern
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_startswith_endswith
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_locale_compare
</UL>

<P><STRONG><a name="[477]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
</UL>

<P><STRONG><a name="[169]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_pointer
</UL>

<P><STRONG><a name="[16b]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_add
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__twodigit_year_fixup
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__toint32_touint32_helper
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__round_fixed
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval_tzoffset
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prepost_incdec_var_helper
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prepost_incdec_reg_helper
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__make_day
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_traceback
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint8clamped
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_hypot
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_to_parts
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_timeval_from_dparts
</UL>

<P><STRONG><a name="[171]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;difftime
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_binary_op
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__toint32_touint32_helper
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_parts_from_args
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_part_helper
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prepost_incdec_var_helper
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prepost_incdec_reg_helper
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_util_tinyrandom_get_double
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_hypot
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint8clamped
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_timeval_from_dparts
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_binary_op
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__log2
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__log10
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_qsort
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_traceback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_hypot
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_timeval_from_dparts
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_now_time
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_binary_op
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__make_day
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_hypot
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_to_parts
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_local_tzoffset_gmtime
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_bitwise_not
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_bitwise_binary_op
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval_tzoffset
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_string_iso8601_subset
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__make_day
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_qsort
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_traceback
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int32
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped_raw
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_whole_get_int32_nonegzero
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_whole_get_int32
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_create_and_throw
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_to_parts
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_timeval_from_dparts
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;difftime
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_constructor
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_bitwise_binary_op
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tval_number_to_arr_idx
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_new_array_length_checked
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_catcher_regs_norz
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_break_or_continue
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_traceback
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint32
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_tojson
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_now_time
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_readfield
</UL>

<P><STRONG><a name="[178]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__make_day
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_qsort
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__api_coerce_d2i
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped_raw
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_toint32
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_whole_get_int32_nonegzero
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_whole_get_int32
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_to_parts
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_local_tzoffset_gmtime
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tval_number_to_arr_idx
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_new_array_length_checked
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_endfin
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getid_open_decl_env_regs
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getid_activation_regs
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__api_coerce_d2ui
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint8clamped
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_touint32
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_close_environment_record
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_length
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_local_tzoffset_gmtime
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_writefield
</UL>

<P><STRONG><a name="[17b]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_alloc
</UL>

<P><STRONG><a name="[516]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_readfield
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_push_validated_read
</UL>

<P><STRONG><a name="[362]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_constructor
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tval_number_to_arr_idx
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_new_array_length_checked
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_samevalue_number
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_equals_number
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__fmin_fixed
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__fmax_fixed
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint8clamped
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_arith_pow
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_whole_get_int32_nonegzero
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_whole_get_int32
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_sign
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_hypot
</UL>

<P><STRONG><a name="[20f]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__twodigit_year_fixup
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__toint32_touint32_helper
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__round_fixed
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__make_day
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__compare_number
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_compare
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__api_coerce_d2ui
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__api_coerce_d2i
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint8clamped
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped_raw
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_length
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_fmin
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_fixed
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_year_in_valid_range
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_to_parts
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_in_valid_range
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_in_leeway_range
</UL>

<P><STRONG><a name="[1d4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__twodigit_year_fixup
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__trunc
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__toint32_touint32_helper
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__round_fixed
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_compare
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__api_coerce_d2ui
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__api_coerce_d2i
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint8clamped
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped_raw
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_length
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_fmax
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_fixed
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_sign
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_year_in_valid_range
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_in_valid_range
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_in_leeway_range
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_writefield
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_validated_write
</UL>

<P><STRONG><a name="[576]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_execute_bytecode
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_safe_call
</UL>

<P><STRONG><a name="[56d]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_longjmp
</UL>

<P><STRONG><a name="[5c9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17e]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_local_tzoffset_gmtime
</UL>

<P><STRONG><a name="[165]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[16c]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[16a]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[7b]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[5ca]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[5cb]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[16f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1c5]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[5cc]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[181]"></a>_drem</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, drem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
</UL>

<P><STRONG><a name="[160]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[5cd]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[17f]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[183]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[1bc]"></a>RMP_Disable_Int</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_cmx_asm.o(ARCH))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[1bd]"></a>RMP_Enable_Int</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_cmx_asm.o(ARCH))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Plat_Hook
</UL>

<P><STRONG><a name="[1ac]"></a>RMP_Mask_Int</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_cmx_asm.o(ARCH))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Lock_Sched
</UL>

<P><STRONG><a name="[1b4]"></a>RMP_MSB_Get</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_cmx_asm.o(ARCH))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_High_Rdy
</UL>

<P><STRONG><a name="[1b2]"></a>_RMP_Yield</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_cmx_asm.o(ARCH))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Tick_Handler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
</UL>

<P><STRONG><a name="[5ba]"></a>_RMP_Start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_cmx_asm.o(ARCH))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_cmx_asm.o(ARCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; _RMP_Get_High_Rdy
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_High_Rdy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Save_Ctx
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Load_Ctx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_cmx_asm.o(ARCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; _RMP_Tick_Handler &rArr; _RMP_Timer_Proc &rArr; _RMP_Set_Rdy
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Tick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>Func_1</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, test_duktape.o(i.Func_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 5272<LI>Call Chain = Func_1 &rArr; duk_safe_call &rArr; duk_handle_safe_call &rArr; duk__handle_safe_call_error &rArr; duk__safe_call_adjust_valstack &rArr; duk_set_top_unsafe &rArr; duk_refzero_check_fast &rArr; duk_heap_process_finalize_list &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_safe_call
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_global_string
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_c_function
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_string
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_destroy_heap
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_create_heap
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Print_String
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_duktape.o(i.RMP_Init_Hook)
</UL>
<P><STRONG><a name="[83]"></a>Func_2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, test_duktape.o(i.Func_2))
<BR>[Address Reference Count : 1]<UL><LI> test_duktape.o(i.RMP_Init_Hook)
</UL>
<P><STRONG><a name="[1ba]"></a>HAL_GPIO_Init</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[198]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>

<P><STRONG><a name="[192]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[194]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[197]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[199]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[19c]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[19b]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[19d]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[19a]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[19e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1204 bytes, Stack size 24 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[193]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[19f]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1a9]"></a>RMP_Clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rmp_kernel.o(i.RMP_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RMP_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>RMP_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rmp_kernel.o(i.RMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = RMP_Init &rArr; RMP_Init_Hook &rArr; RMP_Thd_Crt &rArr; RMP_Unlock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Plat_Hook
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Idle
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Lock_Sched
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmp_kernel.o(i.main)
</UL>
<P><STRONG><a name="[1a6]"></a>RMP_Init_Hook</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, test_duktape.o(i.RMP_Init_Hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = RMP_Init_Hook &rArr; RMP_Thd_Crt &rArr; RMP_Unlock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Crt
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[1a8]"></a>RMP_Init_Idle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_duktape.o(i.RMP_Init_Idle))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[1af]"></a>RMP_List_Crt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rmp_kernel.o(i.RMP_List_Crt))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Crt
</UL>

<P><STRONG><a name="[1b5]"></a>RMP_List_Del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rmp_kernel.o(i.RMP_List_Del))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_High_Rdy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Timer_Proc
</UL>

<P><STRONG><a name="[1b6]"></a>RMP_List_Ins</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rmp_kernel.o(i.RMP_List_Ins))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_High_Rdy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Set_Rdy
</UL>

<P><STRONG><a name="[186]"></a>RMP_Load_Ctx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rmp_kernel.o(i.RMP_Load_Ctx))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1a4]"></a>RMP_Lock_Sched</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rmp_kernel.o(i.RMP_Lock_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = RMP_Lock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Mask_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Crt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[1ad]"></a>RMP_Print_Int</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, rmp_kernel.o(i.RMP_Print_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RMP_Print_Int
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[18c]"></a>RMP_Print_String</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rmp_kernel.o(i.RMP_Print_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RMP_Print_String
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_print
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[1ae]"></a>RMP_Putchar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rmp_platform_cmx.o(i.RMP_Putchar))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Print_String
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Print_Int
</UL>

<P><STRONG><a name="[184]"></a>RMP_Save_Ctx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rmp_kernel.o(i.RMP_Save_Ctx))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1aa]"></a>RMP_Sem_Crt</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rmp_kernel.o(i.RMP_Sem_Crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = RMP_Sem_Crt &rArr; RMP_Unlock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Lock_Sched
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Crt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
</UL>

<P><STRONG><a name="[1ab]"></a>RMP_Thd_Crt</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, rmp_kernel.o(i.RMP_Thd_Crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = RMP_Thd_Crt &rArr; RMP_Unlock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Stack_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Lock_Sched
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Crt
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Set_Rdy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
</UL>

<P><STRONG><a name="[1a7]"></a>RMP_Unlock_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rmp_kernel.o(i.RMP_Unlock_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = RMP_Unlock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Yield
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Mask_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Crt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[79]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_stm32f7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(.text)
</UL>
<P><STRONG><a name="[1a2]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1a3]"></a>UART_CheckIdleState</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1a1]"></a>UART_SetConfig</STRONG> (Thumb, 858 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1b3]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[185]"></a>_RMP_Get_High_Rdy</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, rmp_kernel.o(i._RMP_Get_High_Rdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _RMP_Get_High_Rdy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_MSB_Get
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Ins
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Del
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1b7]"></a>_RMP_Low_Level_Init</STRONG> (Thumb, 692 bytes, Stack size 224 bytes, rmp_platform_cmx.o(i._RMP_Low_Level_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _RMP_Low_Level_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Disable_Int
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Print_String
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Print_Int
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>_RMP_Plat_Hook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rmp_platform_cmx.o(i._RMP_Plat_Hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _RMP_Plat_Hook
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Enable_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[1b0]"></a>_RMP_Stack_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rmp_platform_cmx.o(i._RMP_Stack_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
</UL>

<P><STRONG><a name="[187]"></a>_RMP_Tick_Handler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rmp_kernel.o(i._RMP_Tick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = _RMP_Tick_Handler &rArr; _RMP_Timer_Proc &rArr; _RMP_Set_Rdy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Yield
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Timer_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1bf]"></a>__0snprintf$8</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5ce]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[326]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__uncaught_error_aware
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__format_parts_iso8601
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_pointer
</UL>

<P><STRONG><a name="[1c1]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5cf]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[18b]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_print
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__format_parts_iso8601
</UL>

<P><STRONG><a name="[1c2]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5d0]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[5d1]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4f0]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__try_push_vsprintf
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error_fmt
</UL>

<P><STRONG><a name="[5d2]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1c9]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__round_fixed
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__math_minmax
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_samevalue_number
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_double
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__cbrt
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__api_coerce_d2ui
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__api_coerce_d2i
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_arith_pow
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_precision
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_fixed
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_exponential
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_hypot
</UL>

<P><STRONG><a name="[449]"></a>__ARM_isfinite</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, duktape.o(i.__ARM_isfinite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_isfinite
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__timeclip
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_part_helper
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__make_day
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_is_finite
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_to_json
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_timeval_from_dparts
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_local_tzoffset_gmtime
</UL>

<P><STRONG><a name="[38a]"></a>__ARM_isnan</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, duktape.o(i.__ARM_isnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_isnan
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_string_helper
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval_tzoffset
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_part_helper
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_nan
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint8clamped
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_is_nan
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_get_timezone_offset
</UL>

<P><STRONG><a name="[262]"></a>__ARM_signbit</STRONG> (Thumb, 8 bytes, Stack size 16 bytes, duktape.o(i.__ARM_signbit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_signbit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__fmax_fixed
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_double
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__cbrt
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
</UL>

<P><STRONG><a name="[566]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_default_free_function
</UL>

<P><STRONG><a name="[1c4]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[1c6]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[1c7]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1c8]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[1cb]"></a>__kernel_tan</STRONG> (Thumb, 586 bytes, Stack size 80 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
</UL>

<P><STRONG><a name="[1cc]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_default_alloc_function
</UL>

<P><STRONG><a name="[1ce]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1cf]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[1d0]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[1d1]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[1d2]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[1ca]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[5d3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[5d4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[5d5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1db]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[1da]"></a>acos</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, acos.o(i.acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = acos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__acos
</UL>

<P><STRONG><a name="[1dd]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__asin
</UL>

<P><STRONG><a name="[1de]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__atan
</UL>

<P><STRONG><a name="[1df]"></a>atan2</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__atan2_fixed
</UL>

<P><STRONG><a name="[1e0]"></a>ceil</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__trunc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ceil
</UL>

<P><STRONG><a name="[1e1]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__cos
</UL>

<P><STRONG><a name="[1e2]"></a>difftime</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, difftime.o(i.difftime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_local_tzoffset_gmtime
</UL>

<P><STRONG><a name="[500]"></a>duk_base64_decode</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, duktape.o(i.duk_base64_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = duk_base64_decode &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prep_codec_arg
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__base64_decode_helper
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_resize_buffer
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_raw
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_dec
</UL>

<P><STRONG><a name="[503]"></a>duk_base64_encode</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, duktape.o(i.duk_base64_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = duk_base64_encode &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prep_codec_arg
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__base64_encode_helper
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_buffer_to_string
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_nozero
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_enc
</UL>

<P><STRONG><a name="[287]"></a>duk_buffer_to_string</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, duktape.o(i.duk_buffer_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = duk_buffer_to_string &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_buffer_data
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_helper
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_string
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_escaped_source
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__construct_from_codepoints
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__concat_and_join_helper
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hex_encode
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_base64_encode
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_case_convert_string
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_compile
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat_2
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_repeat
</UL>

<P><STRONG><a name="[22a]"></a>duk_call</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, duktape.o(i.duk_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 4056<LI>Call Chain = duk_call &rArr; duk_handle_call_unprotected &rArr; duk__handle_call_raw &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_get_idx_func
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert_undefined
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_call_unprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reduce_shared
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__finalize_helper
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_compare
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
</UL>

<P><STRONG><a name="[2cf]"></a>duk_call_method</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, duktape.o(i.duk_call_method))
<BR><BR>[Stack]<UL><LI>Max Depth = 4056<LI>Call Chain = duk_call_method &rArr; duk_handle_call_unprotected &rArr; duk__handle_call_raw &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_get_idx_func
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_call_unprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_eval_raw
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_to_string
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__defaultvalue_coerce_attempt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_to_locale_string
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_keys_shared
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_to_json
</UL>

<P><STRONG><a name="[561]"></a>duk_check_stack</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, duktape.o(i.duk_check_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = duk_check_stack &rArr; duk_valstack_grow_check_nothrow &rArr; duk__valstack_grow &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_valstack_grow_check_nothrow
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_realloc_props
</UL>

<P><STRONG><a name="[334]"></a>duk_check_type</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, duktape.o(i.duk_check_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = duk_check_type &rArr; duk_get_type &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
</UL>

<P><STRONG><a name="[2df]"></a>duk_check_type_mask</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, duktape.o(i.duk_check_type_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + In Cycle
<LI>Call Chain = duk_check_type_mask &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type_mask
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__defaultvalue_coerce_attempt
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decode_helper
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_primitive
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_prototype
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_def_prop
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_in
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_construct_postprocess
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_setprototype_shared
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_prevent_extensions
</UL>

<P><STRONG><a name="[51d]"></a>duk_compact</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, duktape.o(i.duk_compact))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = duk_compact &rArr; duk_hobject_compact_props &rArr; duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_compact_props
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_compact_m1
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_compact
</UL>

<P><STRONG><a name="[563]"></a>duk_compile_raw</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, duktape.o(i.duk_compile_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 6544<LI>Call Chain = duk_compile_raw &rArr; duk__do_compile &rArr; duk_js_compile &rArr; duk_safe_call &rArr; duk_handle_safe_call &rArr; duk__handle_safe_call_error &rArr; duk__safe_call_adjust_valstack &rArr; duk_set_top_unsafe &rArr; duk_refzero_check_fast &rArr; duk_heap_process_finalize_list &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_safe_call
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__do_compile
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_eval_raw
</UL>

<P><STRONG><a name="[1f0]"></a>duk_concat</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, duktape.o(i.duk_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = duk_concat &rArr; duk__concat_and_join_helper &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__concat_and_join_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_string_tval_readable
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_compiler_error_line
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_symbol_descriptive_string
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lightfunc_tostring
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lightfunc_name_raw
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_concat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_tostring
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_constructor
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_prototype_to_string
</UL>

<P><STRONG><a name="[208]"></a>duk_copy</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, duktape.o(i.duk_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = duk_copy &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__copy_ivalue
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__copy_ispec
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_helper
</UL>

<P><STRONG><a name="[188]"></a>duk_create_heap</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, duktape.o(i.duk_create_heap))
<BR><BR>[Stack]<UL><LI>Max Depth = 4928<LI>Call Chain = duk_create_heap &rArr; duk_heap_alloc &rArr; duk_heap_free &rArr; duk__free_run_finalizers &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
</UL>

<P><STRONG><a name="[552]"></a>duk_decode_string</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, duktape.o(i.duk_decode_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = duk_decode_string &rArr; duk_require_hstring &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_decode_xutf8_checked
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textencoder_prototype_encode
</UL>

<P><STRONG><a name="[340]"></a>duk_def_prop</STRONG> (Thumb, 404 bytes, Stack size 72 bytes, duktape.o(i.duk_def_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 3544 + In Cycle
<LI>Call Chain = duk_def_prop &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_valid_index
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top_index
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_check_type_mask
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_property_key_hstring
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject_promote_mask
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_initset_initget
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_setter_helper
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_thrower
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_defineaccessor
</UL>

<P><STRONG><a name="[2cd]"></a>duk_del_prop</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, duktape.o(i.duk_del_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = duk_del_prop &rArr; duk_hobject_delprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_strict_call
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_exit
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop_index
</UL>

<P><STRONG><a name="[231]"></a>duk_del_prop_index</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, duktape.o(i.duk_del_prop_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = duk_del_prop_index &rArr; duk_del_prop &rArr; duk_hobject_delprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_unshift
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_shift
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reverse
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_pop
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_swap
</UL>

<P><STRONG><a name="[191]"></a>duk_destroy_heap</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, duktape.o(i.duk_destroy_heap))
<BR><BR>[Stack]<UL><LI>Max Depth = 4856<LI>Call Chain = duk_destroy_heap &rArr; duk_heap_free &rArr; duk__free_run_finalizers &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
</UL>

<P><STRONG><a name="[228]"></a>duk_dup</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, duktape.o(i.duk_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = duk_dup &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_unshift
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reduce_shared
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_push
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_concat
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__twodigit_year_fixup
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_regexp_helper
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ispec_toregconst_raw
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_trycatch
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_nextenum
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_initset_initget
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_initenum
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_object
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__defaultvalue_coerce_attempt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__convert_to_func_template
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_compare
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_next
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_enum
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m4
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m3
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m2
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_2
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_1
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_lookupaccessor
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>

<P><STRONG><a name="[2a1]"></a>duk_dup_top</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, duktape.o(i.duk_dup_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = duk_dup_top &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_index
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_unshift
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_push
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_this_timeval_from_dparts
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_decl
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_lhs
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_entry
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_thrower
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_to_json
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_set_time
</UL>

<P><STRONG><a name="[2ca]"></a>duk_enum</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, duktape.o(i.duk_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 3376<LI>Call Chain = duk_enum &rArr; duk_hobject_enumerator_create &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject_promote_mask
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_properties
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_assign
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>

<P><STRONG><a name="[56e]"></a>duk_error_raw</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, duktape.o(i.duk_error_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + In Cycle
<LI>Call Chain = duk_error_raw &rArr;  duk_push_error_object_va_raw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_throw_raw
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_error_object_va_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_error_throw_from_negative_rc
</UL>

<P><STRONG><a name="[570]"></a>duk_eval_raw</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, duktape.o(i.duk_eval_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 6568<LI>Call Chain = duk_eval_raw &rArr; duk_compile_raw &rArr; duk__do_compile &rArr; duk_js_compile &rArr; duk_safe_call &rArr; duk_handle_safe_call &rArr; duk__handle_safe_call_error &rArr; duk__safe_call_adjust_valstack &rArr; duk_set_top_unsafe &rArr; duk_refzero_check_fast &rArr; duk_heap_process_finalize_list &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_global_object
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pcall_method
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_compile_raw
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_method
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_raw
</UL>

<P><STRONG><a name="[4f3]"></a>duk_fatal_raw</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, duktape.o(i.duk_fatal_raw))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__uncaught_error_aware
</UL>

<P><STRONG><a name="[4b5]"></a>duk_get_buffer</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, duktape.o(i.duk_get_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4328<LI>Call Chain = duk_get_buffer &rArr; duk__get_buffer_helper &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_buffer_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
</UL>

<P><STRONG><a name="[2e2]"></a>duk_get_buffer_data</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, duktape.o(i.duk_get_buffer_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = duk_get_buffer_data &rArr; duk_get_buffer_data_raw &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_buffer_data_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decode_helper
</UL>

<P><STRONG><a name="[2aa]"></a>duk_get_current_magic</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, duktape.o(i.duk_get_current_magic))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = duk_get_current_magic
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_writefield
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_slice_shared
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_readfield
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_compare_shared
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_boolean_prototype_tostring_shared
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reduce_shared
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_indexof_shared
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__date_get_indirect_magic
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textdecoder_prototype_shared_getter
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_startswith_endswith
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_indexof_shared
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_char_code_at
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_caseconv_shared
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_shared_getter
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_pointer_prototype_tostring_shared
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_setprototype_shared
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_lookupaccessor
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_defineaccessor
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_getprototype_shared
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_seal_freeze_shared
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_prevent_extensions
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_keys_shared
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_is_sealed_frozen_shared
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_is_extensible
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_get_own_property_descriptor
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_property
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_twoarg_shared
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_onearg_shared
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_constructor_shared
</UL>

<P><STRONG><a name="[523]"></a>duk_get_finalizer</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, duktape.o(i.duk_get_finalizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 3120<LI>Call Chain = duk_get_finalizer &rArr; duk_get_prop_stridx &rArr; duk_get_prop &rArr; duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_fin
</UL>

<P><STRONG><a name="[47d]"></a>duk_get_int</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 4304<LI>Call Chain = duk_get_int &rArr; duk__api_coerce_d2i &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__api_coerce_d2i
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_writefield
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_readfield
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_repeat
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_match
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
</UL>

<P><STRONG><a name="[296]"></a>duk_get_length</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, duktape.o(i.duk_get_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 3136<LI>Call Chain = duk_get_length &rArr; duk_get_prop_stridx &rArr; duk_get_prop &rArr; duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m1
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_length
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_concat
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_decl
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_formals
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getconst
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_object
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_array
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__convert_to_func_template
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_proxy_ownkeys_postprocess
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_concat
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_prototype_to_string
</UL>

<P><STRONG><a name="[52f]"></a>duk_get_lstring</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, duktape.o(i.duk_get_lstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = duk_get_lstring &rArr; duk_get_hstring &rArr; duk__get_tagged_heaphdr_raw &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_fill
</UL>

<P><STRONG><a name="[49c]"></a>duk_get_number</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_get_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = duk_get_number &rArr; duk__get_number_raw &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_number_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_constructor
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__twodigit_year_fixup
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_number_plain
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_hypot
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_to_json
</UL>

<P><STRONG><a name="[2c9]"></a>duk_get_prop</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, duktape.o(i.duk_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 3088<LI>Call Chain = duk_get_prop &rArr; duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_active_register_binding
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_string
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_next
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx
</UL>

<P><STRONG><a name="[540]"></a>duk_get_prop_desc</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, duktape.o(i.duk_get_prop_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 3304<LI>Call Chain = duk_get_prop_desc &rArr; duk_hobject_object_get_own_property_descriptor &rArr; duk_put_prop_stridx_short_raw &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_get_own_property_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_lookupaccessor
</UL>

<P><STRONG><a name="[226]"></a>duk_get_prop_index</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, duktape.o(i.duk_get_prop_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 3104<LI>Call Chain = duk_get_prop_index &rArr; duk_get_prop &rArr; duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_unshift
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_slice
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_shift
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reverse
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reduce_shared
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_pop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_indexof_shared
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_concat
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_fixed_from_argvalue
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_object
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__const_needs_refcount
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_swap
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_compare
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unpack_array_like
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_proxy_ownkeys_postprocess
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_match
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_concat
</UL>

<P><STRONG><a name="[2e0]"></a>duk_get_prop_string</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, duktape.o(i.duk_get_prop_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 3104<LI>Call Chain = duk_get_prop_string &rArr; duk_get_prop &rArr; duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_textdecoder_context
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decode_helper
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textdecoder_constructor
</UL>

<P><STRONG><a name="[541]"></a>duk_get_prototype</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, duktape.o(i.duk_get_prototype))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = duk_get_prototype &rArr; duk_require_hobject &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_lookupaccessor
</UL>

<P><STRONG><a name="[18f]"></a>duk_get_string</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, duktape.o(i.duk_get_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = duk_get_string &rArr; duk_get_hstring &rArr; duk__get_tagged_heaphdr_raw &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
</UL>

<P><STRONG><a name="[254]"></a>duk_get_top</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, duktape.o(i.duk_get_top))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_print
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_unshift
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reduce_shared
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_push
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_indexof_shared
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_concat
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_constructor
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_part_helper
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__safe_call_adjust_valstack
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmts
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__math_minmax
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_compile_raw
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_func_valstack_slots
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_specialfuncs_for_call
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_proxy_for_call
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_entry
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__construct_from_codepoints
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_get_idx_func_unvalidated
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_get_idx_func
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_safe_call
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_call_unprotected_nargs
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_setup_propcall_error
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_concat
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_constructor
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_pointer_constructor
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_constructor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_hypot
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_constructor
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_fin
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor_utc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor
</UL>

<P><STRONG><a name="[333]"></a>duk_get_top_index</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, duktape.o(i.duk_get_top_index))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_def_prop
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_prepare_property_descriptor
</UL>

<P><STRONG><a name="[337]"></a>duk_get_type</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, duktape.o(i.duk_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = duk_get_type &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type_tval
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_fixed_from_argvalue
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_check_type
</UL>

<P><STRONG><a name="[37c]"></a>duk_get_type_mask</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, duktape.o(i.duk_get_type_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = duk_get_type_mask &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type_mask_tval
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_initenum
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_hobject_promote_mask_raw
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_check_type_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textdecoder_constructor
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_setprototype_shared
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_is_sealed_frozen_shared
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_assign
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor
</UL>

<P><STRONG><a name="[524]"></a>duk_get_uint</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_get_uint))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = duk_get_uint &rArr; duk__api_coerce_d2ui &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__api_coerce_d2ui
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_gc
</UL>

<P><STRONG><a name="[2a2]"></a>duk_has_prop</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, duktape.o(i.duk_has_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = duk_has_prop &rArr; duk_hobject_hasprop &rArr;  duk__get_own_propdesc_raw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_entry
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_has_prop_index
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_has_prop_stridx
</UL>

<P><STRONG><a name="[50f]"></a>duk_has_prop_index</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, duktape.o(i.duk_has_prop_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = duk_has_prop_index &rArr; duk_has_prop &rArr; duk_hobject_hasprop &rArr;  duk__get_own_propdesc_raw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_has_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reduce_shared
</UL>

<P><STRONG><a name="[2b6]"></a>duk_hex_decode</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, duktape.o(i.duk_hex_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4792<LI>Call Chain = duk_hex_decode &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prep_codec_arg
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_nozero
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_buffer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_dec
</UL>

<P><STRONG><a name="[520]"></a>duk_hex_encode</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, duktape.o(i.duk_hex_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4240<LI>Call Chain = duk_hex_encode &rArr; duk__prep_codec_arg &rArr; duk_to_lstring &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prep_codec_arg
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_buffer_to_string
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_nozero
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_enc
</UL>

<P><STRONG><a name="[229]"></a>duk_insert</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, duktape.o(i.duk_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = duk_insert &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_global_string
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_print
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_to_string
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_concat
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__proxy_check_prop
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_specialfuncs_for_call
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_proxy_for_call
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_this_regexp
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__err_augment_user
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_compare
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_new
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_create_instance
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert_undefined
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal_arridx
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_concat
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_setprototype_shared
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_defineaccessor
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_keys_shared
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_eval
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_constructor
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_prototype_to_string
</UL>

<P><STRONG><a name="[51c]"></a>duk_inspect_callstack_entry</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, duktape.o(i.duk_inspect_callstack_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 3264<LI>Call Chain = duk_inspect_callstack_entry &rArr; duk_put_prop_stridx_short_raw &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_bare_object
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_get_activation_for_level
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_get_act_prev_pc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_pc2line_query
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_act
</UL>

<P><STRONG><a name="[525]"></a>duk_inspect_value</STRONG> (Thumb, 462 bytes, Stack size 80 bytes, duktape.o(i.duk_inspect_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 3336<LI>Call Chain = duk_inspect_value &rArr; duk__inspect_multiple_uint &rArr; duk_put_prop &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__inspect_multiple_uint
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_string
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_pointer
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_bare_object
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type_tval
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_info
</UL>

<P><STRONG><a name="[511]"></a>duk_is_buffer</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_is_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = duk_is_buffer &rArr; duk__tag_check &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tag_check
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_arraybuffer_isview
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_promote_plain
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_uint8array_plainof
</UL>

<P><STRONG><a name="[3d9]"></a>duk_is_constructable</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, duktape.o(i.duk_is_constructable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = duk_is_constructable &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_specialfuncs_for_call
</UL>

<P><STRONG><a name="[512]"></a>duk_is_constructor_call</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, duktape.o(i.duk_is_constructor_call))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_boolean_constructor
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_constructor_call
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_constructor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_constructor
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_pointer_constructor
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_constructor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_constructor_shared
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor
</UL>

<P><STRONG><a name="[2e9]"></a>duk_is_function</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, duktape.o(i.duk_is_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = duk_is_function &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_to_string
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_specialfuncs_for_call
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__defaultvalue_coerce_attempt
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_finalizer
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_function
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_parse_helper
</UL>

<P><STRONG><a name="[2bd]"></a>duk_is_nan</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, duktape.o(i.duk_is_nan))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = duk_is_nan &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__twodigit_year_fixup
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_number
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_indexof_shared
</UL>

<P><STRONG><a name="[47c]"></a>duk_is_null</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_is_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = duk_is_null &rArr; duk__tag_check &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tag_check
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_test
</UL>

<P><STRONG><a name="[289]"></a>duk_is_number</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, duktape.o(i.duk_is_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = duk_is_number &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_constructor
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_number_plain
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_active_register_binding
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__const_needs_refcount
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_to_json
</UL>

<P><STRONG><a name="[3c6]"></a>duk_is_object</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_is_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = duk_is_object &rArr; duk__tag_check &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tag_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_nextenum
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_search
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_match
</UL>

<P><STRONG><a name="[4a3]"></a>duk_is_strict_call</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, duktape.o(i.duk_is_strict_call))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__put_prop_shared
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop
</UL>

<P><STRONG><a name="[4fa]"></a>duk_is_string</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_is_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = duk_is_string &rArr; duk__tag_check &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tag_check
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_add
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
</UL>

<P><STRONG><a name="[227]"></a>duk_is_undefined</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_is_undefined))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = duk_is_undefined &rArr; duk__tag_check &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tag_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_slice
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_offset_opt_length
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decode_helper
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__clamp_startend_nonegidx_noshift
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__clamp_startend_negidx_shifted
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_compare
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textencoder_prototype_encode
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textdecoder_constructor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_substring
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_substr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_startswith_endswith
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_slice
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_constructor
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_lookupaccessor
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_create
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_string
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_precision
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_exponential
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_copy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_concat
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_to_string
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_prototype_to_string
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_constructor_shared
</UL>

<P><STRONG><a name="[33d]"></a>duk_join</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, duktape.o(i.duk_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = duk_join &rArr; duk__concat_and_join_helper &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__concat_and_join_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_print
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_constructor
</UL>

<P><STRONG><a name="[4e7]"></a>duk_new</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, duktape.o(i.duk_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 4048<LI>Call Chain = duk_new &rArr; duk_handle_call_unprotected &rArr; duk__handle_call_raw &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_get_idx_func
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_call_unprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_regexp_helper
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
</UL>

<P><STRONG><a name="[2ce]"></a>duk_next</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, duktape.o(i.duk_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 3296<LI>Call Chain = duk_next &rArr; duk_hobject_enumerator_next &rArr; duk_put_prop_stridx_short_raw &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_properties
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_assign
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>

<P><STRONG><a name="[5b4]"></a>duk_normalize_index</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, duktape.o(i.duk_normalize_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = duk_normalize_index
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_length
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_valid_index
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_string
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unpack_array_like
</UL>

<P><STRONG><a name="[330]"></a>duk_pcall_method</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, duktape.o(i.duk_pcall_method))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = duk_pcall_method &rArr; duk_pcall_method_flags &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pcall_method_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_eval_raw
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__err_augment_user
</UL>

<P><STRONG><a name="[190]"></a>duk_pop</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, duktape.o(i.duk_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = duk_pop &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__pop_unsafe_raw
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_global_string
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_eval_raw
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_slice_shared
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__update_default_instance_proto
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__twodigit_year_fixup
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval_tzoffset
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_decl
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_lhs
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_active_register_binding
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_promote_this
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_fixed_from_argvalue
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getconst
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__convert_to_func_template
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__const_needs_refcount
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_env_setup
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_compiler_error_line
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_prototype
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_has_prop
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_proxy_ownkeys_postprocess
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_pc2line_query
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_next
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_boolean
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_construct_postprocess
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_resume
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_match
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_shared_getter
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_lookupaccessor
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_concat
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_prototype_to_string
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_to_json
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor
</UL>

<P><STRONG><a name="[2a6]"></a>duk_pop_2</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, duktape.o(i.duk_pop_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = duk_pop_2 &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__pop_2_unsafe_raw
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__put_prop_shared
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmts
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_proxy_for_call
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_run_finalizer
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_keys_shared
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>

<P><STRONG><a name="[33c]"></a>duk_pop_3</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, duktape.o(i.duk_pop_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = duk_pop_3 &rArr; duk_pop_n &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_n
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
</UL>

<P><STRONG><a name="[286]"></a>duk_pop_n</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, duktape.o(i.duk_pop_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + In Cycle
<LI>Call Chain = duk_pop_n &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__pop_n_unsafe_raw
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__concat_and_join_helper
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_3
</UL>

<P><STRONG><a name="[2af]"></a>duk_push_array</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, duktape.o(i.duk_push_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = duk_push_array &rArr; duk_harray_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_harray_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_slice
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_concat
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_func_valstack_slots
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_array
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_harray
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_proxy_ownkeys_postprocess
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_match
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>

<P><STRONG><a name="[3fd]"></a>duk_push_bare_object</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, duktape.o(i.duk_push_bare_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = duk_push_bare_object &rArr; duk_push_object_helper &rArr; duk_hobject_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object_helper
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top_index_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__reset_func_for_pass2
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_func_valstack_slots
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_inspect_value
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_inspect_callstack_entry
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>

<P><STRONG><a name="[36a]"></a>duk_push_boolean</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, duktape.o(i.duk_push_boolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk_push_boolean &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_compare_shared
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_arraybuffer_isview
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_constructor_is_array
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__finalize_helper
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_ownprop_helper
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_get_own_property_descriptor
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textdecoder_prototype_shared_getter
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_startswith_endswith
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_includes
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_test
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_shared_getter
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_has
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_delete_property
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_is_prototype_of
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_is_sealed_frozen_shared
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_is_extensible
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_is
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_property
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_is_encoding
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_is_buffer
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_is_nan
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_is_finite
</UL>

<P><STRONG><a name="[52d]"></a>duk_push_buffer_object</STRONG> (Thumb, 494 bytes, Stack size 72 bytes, duktape.o(i.duk_push_buffer_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + In Cycle
<LI>Call Chain = duk_push_buffer_object &rArr;  duk_require_hbuffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hbuffer
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_bufobj_raw
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_push_uint8array_from_plain
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textencoder_prototype_encode
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_constructor
</UL>

<P><STRONG><a name="[3fc]"></a>duk_push_buffer_raw</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, duktape.o(i.duk_push_buffer_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + In Cycle
<LI>Call Chain = duk_push_buffer_raw &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_alloc
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_alloc_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_compile_raw
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_func_valstack_slots
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_buffer_raw
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_vsprintf
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_base64_decode
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_zero
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_nozero
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_pc2line_pack
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_init_pushbuf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textencoder_prototype_encode
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textdecoder_constructor
</UL>

<P><STRONG><a name="[189]"></a>duk_push_c_function</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, duktape.o(i.duk_push_c_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = duk_push_c_function &rArr; duk__push_c_function_raw &rArr; duk_hnatfunc_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_c_function_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
</UL>

<P><STRONG><a name="[554]"></a>duk_push_current_thread</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, duktape.o(i.duk_push_current_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = duk_push_current_thread &rArr; duk_push_hobject &rArr; duk_push_tval &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_current
</UL>

<P><STRONG><a name="[56c]"></a>duk_push_error_object_raw</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, duktape.o(i.duk_push_error_object_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_error_object_va_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_create_and_throw
</UL>

<P><STRONG><a name="[91]"></a>duk_push_error_object_stash</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, duktape.o(i.duk_push_error_object_stash))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = duk_push_error_object_stash &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_error_object_va_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk_call_setup_propcall_error)
</UL>
<P><STRONG><a name="[56f]"></a>duk_push_error_object_va_raw</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, duktape.o(i.duk_push_error_object_va_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_vsprintf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object_helper_proto
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top_index_unsafe
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_error_prototype_from_code
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_augment_error_create
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_error_object_stash
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_error_object_raw
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_error_raw
</UL>

<P><STRONG><a name="[2d3]"></a>duk_push_false</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, duktape.o(i.duk_push_false))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk_push_false &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_setprototype_shared
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_is_prototype_of
</UL>

<P><STRONG><a name="[571]"></a>duk_push_global_object</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, duktape.o(i.duk_push_global_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = duk_push_global_object &rArr; duk_push_hobject_bidx &rArr; duk_push_hobject &rArr; duk_push_tval &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject_bidx
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_eval_raw
</UL>

<P><STRONG><a name="[29e]"></a>duk_push_int</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, duktape.o(i.duk_push_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = duk_push_int &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_readfield
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_compare_shared
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_shift
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_pop
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_indexof_shared
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_func_from_lightfunc
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_decl
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__inspect_multiple_uint
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_part_helper
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_error_object_va_raw
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_create_instance
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_push_validated_read
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_search
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_match
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_locale_compare
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_indexof_shared
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_constructor
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_native_function_length
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_sign
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_imul
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_get_timezone_offset
</UL>

<P><STRONG><a name="[2bb]"></a>duk_push_lstring</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, duktape.o(i.duk_push_lstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + In Cycle
<LI>Call Chain = duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_intern_checked
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_string
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_hstring_readable_unicode
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__internbuffer
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_convert_and_push
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decode_helper
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_plain_string
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_number
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_trim
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_vsprintf
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_buffer_to_string
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_symbol_descriptive_string
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string_funcptr
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>

<P><STRONG><a name="[2d6]"></a>duk_push_nan</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, duktape.o(i.duk_push_nan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk_push_nan &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_readfield
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_part_helper
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_string
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_part_helper
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_char_code_at
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_parse_int
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_get_timezone_offset
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor_utc
</UL>

<P><STRONG><a name="[2d4]"></a>duk_push_null</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, duktape.o(i.duk_push_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk_push_null &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_initenum
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_match
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_getprototype_shared
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_tojson
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_to_json
</UL>

<P><STRONG><a name="[2d2]"></a>duk_push_number</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, duktape.o(i.duk_push_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = duk_push_number &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_readfield
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_add
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__twodigit_year_fixup
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_this_timeval_from_dparts
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_double
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prepost_incdec_var_helper
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prepost_incdec_reg_helper
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_string_iso8601_subset
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_raw
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__objlit_load_key
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__math_minmax
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_push_validated_read
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_performance_now
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_twoarg_shared
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_random
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_onearg_shared
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_hypot
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_value_of
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_set_time
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor_utc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor_now
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor
</UL>

<P><STRONG><a name="[2c0]"></a>duk_push_object</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, duktape.o(i.duk_push_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = duk_push_object &rArr; duk_push_object_helper &rArr; duk_hobject_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object_helper
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top_index_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_specialfuncs_for_call
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_object
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_new
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_create_instance
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_get_own_property_descriptor
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_tojson
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_parse_helper
</UL>

<P><STRONG><a name="[2c6]"></a>duk_push_pointer</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, duktape.o(i.duk_push_pointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk_push_pointer &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_pointer
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_pointer
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_inspect_value
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_pointer_constructor
</UL>

<P><STRONG><a name="[545]"></a>duk_push_proxy</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, duktape.o(i.duk_push_proxy))
<BR><BR>[Stack]<UL><LI>Max Depth = 3152<LI>Call Chain = duk_push_proxy &rArr; duk_require_hobject_promote_mask &rArr; duk__get_hobject_promote_mask_raw &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject_promote_mask
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hproxy_alloc
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_proxy_constructor
</UL>

<P><STRONG><a name="[1ef]"></a>duk_push_sprintf</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, duktape.o(i.duk_push_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = duk_push_sprintf &rArr;  duk_push_vsprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_string_tval_readable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_exit
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_entry
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_compiler_error_line
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lightfunc_name_raw
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_class_string_tval
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_to_string
</UL>

<P><STRONG><a name="[18d]"></a>duk_push_string</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, duktape.o(i.duk_push_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = duk_push_string &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_null
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_print
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_string_helper
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_string_tval_readable
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__inspect_multiple_uint
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_escaped_source
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_traceback
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_string
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_string
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_symbol_descriptive_string
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lightfunc_tostring
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textencoder_prototype_encoding_getter
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textdecoder_prototype_shared_getter
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_tostring
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_shared_getter
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_flags
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_tostring
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_constructor
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_prototype_to_string
</UL>

<P><STRONG><a name="[332]"></a>duk_push_this</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, duktape.o(i.duk_push_this))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = duk_push_this &rArr; duk__push_this_helper &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_boolean_prototype_tostring_shared
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_boolean_constructor
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_number_plain
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval_tzoffset
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_promote_this
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_this_regexp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_textdecoder_context
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_setter_helper
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_construct_postprocess
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_set
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textdecoder_constructor
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_to_string
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_substr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_tostring
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_shared_getter
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_flags
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_pointer_prototype_tostring_shared
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_lookupaccessor
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_defineaccessor
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_constructor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_fill
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_to_string
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_prototype_to_string
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_to_json
</UL>

<P><STRONG><a name="[553]"></a>duk_push_thread_raw</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, duktape.o(i.duk_push_thread_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 4400<LI>Call Chain = duk_push_thread_raw &rArr; duk_hthread_create_builtin_objects &rArr; duk_set_magic &rArr; duk_require_hnatfunc &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_init_stacks
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_copy_builtin_objects
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_alloc
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_alloc_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_constructor
</UL>

<P><STRONG><a name="[1f4]"></a>duk_push_true</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, duktape.o(i.duk_push_true))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk_push_true &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_entry
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_enum_key
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_setup_propcall_error
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_setprototype_shared
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_prevent_extensions
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_gc
</UL>

<P><STRONG><a name="[221]"></a>duk_push_uint</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, duktape.o(i.duk_push_uint))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = duk_push_uint &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_writefield
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_readfield
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_unshift
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_slice
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_shift
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reduce_shared
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_push
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_pop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_concat
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getprop_fastpath_bufobj_tval
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_push_fastpath
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_length
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_inspect_callstack_entry
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_has_prop_index
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop_index
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint_to_hstring
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_equals_helper
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_next
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_push_validated_read
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_byteoffset_getter
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_bytelength_getter
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_char_code_at
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_write
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_copy
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_byte_length
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_native_function_length
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_clz32
</UL>

<P><STRONG><a name="[2d5]"></a>duk_push_undefined</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, duktape.o(i.duk_push_undefined))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = duk_push_undefined &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmts
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_compile_raw
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_longjmp
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getvar_helper
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__err_augment_user
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_current_thread
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_inspect_callstack_entry
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prototype
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert_undefined
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_get_own_property_descriptor
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_uint8array_plainof
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
</UL>

<P><STRONG><a name="[5b0]"></a>duk_push_vsprintf</STRONG> (Thumb, 294 bytes, Stack size 312 bytes, duktape.o(i.duk_push_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616 + In Cycle
<LI>Call Chain = duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__try_push_vsprintf
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_resize_buffer
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_raw
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_empty
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_sprintf
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_error_object_va_raw
</UL>

<P><STRONG><a name="[18a]"></a>duk_put_global_string</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, duktape.o(i.duk_put_global_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 3240<LI>Call Chain = duk_put_global_string &rArr; duk_put_prop_string &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_string
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
</UL>

<P><STRONG><a name="[1f5]"></a>duk_put_prop</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_put_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 3224<LI>Call Chain = duk_put_prop &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__put_prop_shared
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__inspect_multiple_uint
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_entry
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_enum_key
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_assign
</UL>

<P><STRONG><a name="[1f9]"></a>duk_put_prop_index</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, duktape.o(i.duk_put_prop_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 3224<LI>Call Chain = duk_put_prop_index &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__put_prop_shared
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_unshift
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_shift
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reverse
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_push
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_decl
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_formals
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getconst
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_swap
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_label
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_proxy_ownkeys_postprocess
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_match
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>

<P><STRONG><a name="[551]"></a>duk_put_prop_string</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, duktape.o(i.duk_put_prop_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 3224<LI>Call Chain = duk_put_prop_string &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__put_prop_shared
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_normalize_index
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_global_string
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_inspect_value
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textdecoder_constructor
</UL>

<P><STRONG><a name="[3cf]"></a>duk_remove</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, duktape.o(i.duk_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = duk_remove &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_specialfuncs_for_call
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_proxy_for_call
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_unsafe
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_compile
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_next
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_lookupaccessor
</UL>

<P><STRONG><a name="[285]"></a>duk_replace</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, duktape.o(i.duk_replace))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = duk_replace &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reduce_shared
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_add
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__twodigit_year_fixup
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_regexp_helper
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__reset_func_for_pass2
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prepost_incdec_reg_helper
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_var_fromstack
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_plain_fromstack
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__internbuffer
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_proxy_for_call
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_nextenum
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_initenum
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_bound_chain_for_call
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__defaultvalue_coerce_attempt
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decode_helper
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__concat_and_join_helper
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_trim
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_primitive
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_pointer
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_buffer_raw
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_substring
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hex_encode
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hex_decode
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_buffer_to_string
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_base64_encode
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_base64_decode
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_resolve_nonbound_function
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_instanceof
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_get_own_property_descriptor
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat_2
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_setup_propcall_error
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_constructor
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_keys_shared
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_create
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_tostring
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor
</UL>

<P><STRONG><a name="[391]"></a>duk_require_buffer</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, duktape.o(i.duk_require_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4328<LI>Call Chain = duk_require_buffer &rArr; duk__get_buffer_helper &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_buffer_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_textdecoder_context
</UL>

<P><STRONG><a name="[2de]"></a>duk_require_buffer_data</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, duktape.o(i.duk_require_buffer_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = duk_require_buffer_data &rArr; duk_get_buffer_data_raw &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_buffer_data_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decode_helper
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_buffer_to_string
</UL>

<P><STRONG><a name="[50a]"></a>duk_require_function</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, duktape.o(i.duk_require_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 4264<LI>Call Chain = duk_require_function &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_function
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_require_type_index
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reduce_shared
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_constructor
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_defineaccessor
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
</UL>

<P><STRONG><a name="[5b6]"></a>duk_require_lstring</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, duktape.o(i.duk_require_lstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = duk_require_lstring &rArr; duk_require_hstring &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_lstring
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_string
</UL>

<P><STRONG><a name="[324]"></a>duk_require_normalize_index</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, duktape.o(i.duk_require_normalize_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = duk_require_normalize_index &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_index
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_object
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_trim
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_primitive
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_pointer
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_buffer_raw
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_boolean
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_substring
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hex_encode
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hex_decode
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_has_prop_index
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_string
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop_index
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_buffer_to_string
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_base64_encode
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_base64_decode
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_thrower
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_prepare_property_descriptor
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_has_prop_stridx
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx
</UL>

<P><STRONG><a name="[5ab]"></a>duk_require_number</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, duktape.o(i.duk_require_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + In Cycle
<LI>Call Chain = duk_require_number &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_require_type_index
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
</UL>

<P><STRONG><a name="[2be]"></a>duk_require_stack</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, duktape.o(i.duk_require_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = duk_require_stack &rArr; duk_valstack_grow_check_throw &rArr; duk__valstack_grow &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_valstack_grow_check_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__proxy_check_prop
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmts
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__match_regexp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_compile_raw
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_func_valstack_slots
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_bound_chain_for_call
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_entry
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_objarr_entry
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unpack_array_like
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_create_and_throw
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
</UL>

<P><STRONG><a name="[5b7]"></a>duk_require_string</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, duktape.o(i.duk_require_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = duk_require_string &rArr; duk_require_lstring &rArr; duk_require_hstring &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_lstring
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
</UL>

<P><STRONG><a name="[29c]"></a>duk_require_top_index</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, duktape.o(i.duk_require_top_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = duk_require_top_index &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_index
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
</UL>

<P><STRONG><a name="[591]"></a>duk_require_uint</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_require_uint))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = duk_require_uint &rArr; duk__api_coerce_d2ui &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__api_coerce_d2ui
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_next
</UL>

<P><STRONG><a name="[51e]"></a>duk_require_valid_index</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, duktape.o(i.duk_require_valid_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = duk_require_valid_index &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_normalize_index
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_index
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_def_prop
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_enc
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_dec
</UL>

<P><STRONG><a name="[502]"></a>duk_resize_buffer</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, duktape.o(i.duk_resize_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4304 + In Cycle
<LI>Call Chain = duk_resize_buffer &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hbuffer
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_resize
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_vsprintf
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_base64_decode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textencoder_prototype_encode
</UL>

<P><STRONG><a name="[18e]"></a>duk_safe_call</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, duktape.o(i.duk_safe_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 5248<LI>Call Chain = duk_safe_call &rArr; duk_handle_safe_call &rArr; duk__handle_safe_call_error &rArr; duk__safe_call_adjust_valstack &rArr; duk_set_top_unsafe &rArr; duk_refzero_check_fast &rArr; duk_heap_process_finalize_list &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_safe_call
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__compact_object_list
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_compile_raw
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pcall_method_flags
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_compile
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_run_finalizer
</UL>

<P><STRONG><a name="[53b]"></a>duk_samevalue</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, duktape.o(i.duk_samevalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 2976<LI>Call Chain = duk_samevalue &rArr; duk_js_equals_helper &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_equals_helper
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_is
</UL>

<P><STRONG><a name="[522]"></a>duk_set_finalizer</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, duktape.o(i.duk_set_finalizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 3248<LI>Call Chain = duk_set_finalizer &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_function
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_fin
</UL>

<P><STRONG><a name="[2b2]"></a>duk_set_length</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, duktape.o(i.duk_set_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 3240<LI>Call Chain = duk_set_length &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_normalize_index
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__reset_labels_to_length
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__reset_func_for_pass2
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_array
</UL>

<P><STRONG><a name="[59e]"></a>duk_set_magic</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, duktape.o(i.duk_set_magic))
<BR><BR>[Stack]<UL><LI>Max Depth = 4296<LI>Call Chain = duk_set_magic &rArr; duk_require_hnatfunc &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hnatfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
</UL>

<P><STRONG><a name="[52e]"></a>duk_set_prototype</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, duktape.o(i.duk_set_prototype))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = duk_set_prototype &rArr; duk_pop &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_check_type_mask
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_set_prototype_updref
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_constructor
</UL>

<P><STRONG><a name="[321]"></a>duk_set_top</STRONG> (Thumb, 342 bytes, Stack size 64 bytes, duktape.o(i.duk_set_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + In Cycle
<LI>Call Chain = duk_set_top &rArr;  duk_refzero_check_fast (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_refzero_check_fast
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero_norz
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_index
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_to_string
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reduce_shared
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_indexof_shared
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_exit
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_def_prop
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_terminate
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_setup_propcall_error
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_yield
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_resume
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_constructor
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_pointer_constructor
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_setprototype_shared
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_properties
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_assign
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_constructor
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_tostring
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_fin
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_enc
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_dec
</UL>

<P><STRONG><a name="[3da]"></a>duk_strict_equals</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, duktape.o(i.duk_strict_equals))
<BR><BR>[Stack]<UL><LI>Max Depth = 2976<LI>Call Chain = duk_strict_equals &rArr; duk_js_equals_helper &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_equals_helper
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_indexof_shared
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_specialfuncs_for_call
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_set
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_get
</UL>

<P><STRONG><a name="[386]"></a>duk_substring</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, duktape.o(i.duk_substring))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = duk_substring &rArr; duk_heap_strtable_intern_checked &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_intern_checked
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strcache_offset_char2byte
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_substring
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_substr
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_slice
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_char_at
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>

<P><STRONG><a name="[517]"></a>duk_swap</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, duktape.o(i.duk_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = duk_swap &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_writefield
</UL>

<P><STRONG><a name="[4c0]"></a>duk_throw_raw</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, duktape.o(i.duk_throw_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = duk_throw_raw &rArr; duk_err_augment_error_throw &rArr; duk__err_augment_user &rArr; duk_insert &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_sync_and_null_currpc
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_setup_ljstate1
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_longjmp
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_augment_error_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_target_func_and_this_binding
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_error_raw
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_compile
</UL>

<P><STRONG><a name="[2e1]"></a>duk_to_boolean</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, duktape.o(i.duk_to_boolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = duk_to_boolean &rArr; duk_require_normalize_index &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_toboolean
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_writefield
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_readfield
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_boolean_constructor
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decode_helper
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_prepare_property_descriptor
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_boolean
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_yield
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_resume
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textdecoder_constructor
</UL>

<P><STRONG><a name="[3e4]"></a>duk_to_buffer_raw</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, duktape.o(i.duk_to_buffer_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 4200<LI>Call Chain = duk_to_buffer_raw &rArr; duk_to_lstring &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_lstring
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_raw
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hbuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_fixed_from_argvalue
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_pc2line_pack
</UL>

<P><STRONG><a name="[272]"></a>duk_to_int</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, duktape.o(i.duk_to_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 4304<LI>Call Chain = duk_to_int &rArr; duk__api_coerce_d2i &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_int_uint_helper
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__api_coerce_d2i
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_writefield
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_readfield
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_arraybuffer_constructor
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__twodigit_year_fixup
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_offset_opt_length
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_active_register_binding
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__clamp_startend_negidx_shifted
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_char_at
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_precision
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_exponential
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_copy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_concat
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_act
</UL>

<P><STRONG><a name="[4fd]"></a>duk_to_int32</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, duktape.o(i.duk_to_int32))
<BR><BR>[Stack]<UL><LI>Max Depth = 2896<LI>Call Chain = duk_to_int32 &rArr; duk_js_toint32 &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_toint32
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_bitwise_not
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_bitwise_binary_op
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_validated_write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_parse_int
</UL>

<P><STRONG><a name="[484]"></a>duk_to_lstring</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, duktape.o(i.duk_to_lstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 4160<LI>Call Chain = duk_to_lstring &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_lstring
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prep_codec_arg
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_buffer_raw
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_byte_length
</UL>

<P><STRONG><a name="[28c]"></a>duk_to_number</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, duktape.o(i.duk_to_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 2872<LI>Call Chain = duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tonumber
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_writefield
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__twodigit_year_fixup
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_parts_from_args
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_part_helper
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prepost_incdec_reg_helper
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__math_minmax
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__construct_from_codepoints
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint8clamped
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m2
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m1
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_repeat
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_indexof_shared
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_constructor
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_twoarg_shared
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_sign
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_onearg_shared
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_hypot
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_is_nan
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_is_finite
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_set_time
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor
</UL>

<P><STRONG><a name="[279]"></a>duk_to_object</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, duktape.o(i.duk_to_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 3056 + In Cycle
<LI>Call Chain = duk_to_object &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_func_from_lightfunc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object_helper
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_push_uint8array_from_plain
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_initenum
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__coerce_nonstrict_this_binding
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hobject
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_promote_plain
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_lookupaccessor
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_defineaccessor
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_getprototype_shared
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_get_own_property_descriptor
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_properties
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_assign
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_to_json
</UL>

<P><STRONG><a name="[544]"></a>duk_to_pointer</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, duktape.o(i.duk_to_pointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = duk_to_pointer &rArr; duk_replace &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_pointer_constructor
</UL>

<P><STRONG><a name="[4f9]"></a>duk_to_primitive</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, duktape.o(i.duk_to_primitive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4112 + In Cycle
<LI>Call Chain = duk_to_primitive &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__defaultvalue_coerce_attempt
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_check_type_mask
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_internal_value_string
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_class_number
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_add
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_property_key_hstring
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tonumber
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_equals_helper
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_compare_helper
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_to_json
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor
</UL>

<P><STRONG><a name="[32b]"></a>duk_to_string</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, duktape.o(i.duk_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 4144 + In Cycle
<LI>Call Chain = duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_primitive
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_string
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_sprintf
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lightfunc_tostring
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tostring_raw
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_print
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_boolean_prototype_tostring_shared
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_string_tval_readable
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_raw
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_lstring
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textdecoder_constructor
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_constructor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_constructor
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_has
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_get
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_delete_property
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_pointer_prototype_tostring_shared
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_precision
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_fixed
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_exponential
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_is_encoding
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_parse_int
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_parse_float
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_to_string
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_constructor
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_prototype_to_string
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_constructor_shared
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor_parse
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor
</UL>

<P><STRONG><a name="[46b]"></a>duk_to_uint</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, duktape.o(i.duk_to_uint))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = duk_to_uint &rArr; duk__to_int_uint_helper &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_int_uint_helper
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__api_coerce_d2ui
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
</UL>

<P><STRONG><a name="[28e]"></a>duk_to_uint32</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, duktape.o(i.duk_to_uint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 2896<LI>Call Chain = duk_to_uint32 &rArr; duk_js_touint32 &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_touint32
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_writefield
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_constructor
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_fixed_from_argvalue
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__construct_from_codepoints
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unpack_array_like
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_validated_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_fill
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_imul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_clz32
</UL>

<P><STRONG><a name="[3c9]"></a>duk_to_undefined</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, duktape.o(i.duk_to_undefined))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = duk_to_undefined &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_trycatch
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
</UL>

<P><STRONG><a name="[550]"></a>duk_trim</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, duktape.o(i.duk_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = duk_trim &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_is_whitespace
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_is_line_terminator
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_decode_xutf8_checked
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_trim
</UL>

<P><STRONG><a name="[344]"></a>exp</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, exp.o(i.exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = exp &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exp
</UL>

<P><STRONG><a name="[336]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__trunc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__round_fixed
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__make_day
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__floor
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint8clamped
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_time_get_ecmascript_time_nofrac
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_trunc_towards_zero
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_to_parts
</UL>

<P><STRONG><a name="[335]"></a>fmod</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fmod.o(i.fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fmod &rArr; _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__toint32_touint32_helper
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__make_day
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_arith_mod
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_to_parts
</UL>

<P><STRONG><a name="[445]"></a>log</STRONG> (Thumb, 808 bytes, Stack size 96 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__log2
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__log10
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__log
</UL>

<P><STRONG><a name="[78]"></a>main</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, rmp_kernel.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = main &rArr; _RMP_Low_Level_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Start
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Ins
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Crt
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[263]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__cbrt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_arith_pow
</UL>

<P><STRONG><a name="[567]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_default_realloc_function
</UL>

<P><STRONG><a name="[4c8]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__sin
</UL>

<P><STRONG><a name="[1dc]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__sqrt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_hypot
</UL>

<P><STRONG><a name="[4dd]"></a>tan</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tan.o(i.tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tan
</UL>

<P><STRONG><a name="[51b]"></a>time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, test_duktape.o(i.time))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_now_time
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1b1]"></a>_RMP_Set_Rdy</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, rmp_kernel.o(i._RMP_Set_Rdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RMP_Set_Rdy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Ins
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Timer_Proc
</UL>

<P><STRONG><a name="[1be]"></a>_RMP_Timer_Proc</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, rmp_kernel.o(i._RMP_Timer_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _RMP_Timer_Proc &rArr; _RMP_Set_Rdy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Del
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Set_Rdy
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Tick_Handler
</UL>

<P><STRONG><a name="[1b9]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, rmp_platform_cmx.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[1b8]"></a>SCB_EnableICache</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, rmp_platform_cmx.o(i.SCB_EnableICache))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[1bb]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rmp_platform_cmx.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[195]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[196]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[80]"></a>eval_raw</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, test_duktape.o(i.eval_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 6584<LI>Call Chain = eval_raw &rArr; duk_eval_raw &rArr; duk_compile_raw &rArr; duk__do_compile &rArr; duk_js_compile &rArr; duk_safe_call &rArr; duk_handle_safe_call &rArr; duk__handle_safe_call_error &rArr; duk__safe_call_adjust_valstack &rArr; duk_set_top_unsafe &rArr; duk_refzero_check_fast &rArr; duk_heap_process_finalize_list &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_eval_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_duktape.o(i.Func_1)
</UL>
<P><STRONG><a name="[7f]"></a>native_print</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, test_duktape.o(i.native_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 4160<LI>Call Chain = native_print &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_join
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Print_String
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_duktape.o(i.Func_1)
</UL>
<P><STRONG><a name="[81]"></a>tostring_raw</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, test_duktape.o(i.tostring_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 4160<LI>Call Chain = tostring_raw &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_duktape.o(i.Func_1)
</UL>
<P><STRONG><a name="[1e3]"></a>duk__abandon_array_checked</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, duktape.o(i.duk__abandon_array_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = duk__abandon_array_checked &rArr; duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_min_grow_e
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_default_h_size
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__count_used_e_keys
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__compute_a_stats
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_realloc_props
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_seal_freeze_helper
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
</UL>

<P><STRONG><a name="[58f]"></a>duk__abandon_array_density_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, duktape.o(i.duk__abandon_array_density_check))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_compact_props
</UL>

<P><STRONG><a name="[596]"></a>duk__abandon_array_slow_check_required</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, duktape.o(i.duk__abandon_array_slow_check_required))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
</UL>

<P><STRONG><a name="[14d]"></a>duk__acos</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, duktape.o(i.duk__acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = duk__acos &rArr; acos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[1e9]"></a>duk__activation_unwind_nofree_norz</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, duktape.o(i.duk__activation_unwind_nofree_norz))
<BR><BR>[Stack]<UL><LI>Max Depth = 3000<LI>Call Chain = duk__activation_unwind_nofree_norz &rArr; duk_js_close_environment_record &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_close_environment_record
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_catcher_unwind_norz
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refzero_norz
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_activation_unwind_reuse_norz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_activation_unwind_norz
</UL>

<P><STRONG><a name="[1ed]"></a>duk__add_compiler_error_line</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, duktape.o(i.duk__add_compiler_error_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 3248<LI>Call Chain = duk__add_compiler_error_line &rArr; duk_put_prop_stridx_short_raw &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_sprintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__err_augment_builtin_create
</UL>

<P><STRONG><a name="[1f2]"></a>duk__add_enum_key</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, duktape.o(i.duk__add_enum_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 3240<LI>Call Chain = duk__add_enum_key &rArr; duk_put_prop &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_true
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_enum_key_stridx
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
</UL>

<P><STRONG><a name="[1f6]"></a>duk__add_enum_key_stridx</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, duktape.o(i.duk__add_enum_key_stridx))
<BR><BR>[Stack]<UL><LI>Max Depth = 3256<LI>Call Chain = duk__add_enum_key_stridx &rArr; duk__add_enum_key &rArr; duk_put_prop &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_enum_key
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
</UL>

<P><STRONG><a name="[1f7]"></a>duk__add_label</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, duktape.o(i.duk__add_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 4792<LI>Call Chain = duk__add_label &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_resize
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
</UL>

<P><STRONG><a name="[1fb]"></a>duk__add_traceback</STRONG> (Thumb, 554 bytes, Stack size 96 bytes, duktape.o(i.duk__add_traceback))
<BR><BR>[Stack]<UL><LI>Max Depth = 3080<LI>Call Chain = duk__add_traceback &rArr; duk_xdef_prop_stridx_short_raw &rArr; duk_xdef_prop_stridx &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_harray_with_size_outptr
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_get_act_prev_pc
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__err_augment_builtin_create
</UL>

<P><STRONG><a name="[200]"></a>duk__advance</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, duktape.o(i.duk__advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 5024<LI>Call Chain = duk__advance &rArr; duk__advance_helper &rArr; duk_lexer_parse_js_input_element &rArr; duk__lexer_parse_string_literal &rArr; duk__lexer_parse_escape &rArr; duk__advance_chars &rArr; duk__advance_bytes &rArr; duk__fill_lexer_buffer &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_with_stmt
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_while_stmt
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_stmt
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_decl
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_throw_stmt
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_switch_stmt
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmts
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_return_stmt
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_if_stmt
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_raw
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_formals
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_do_stmt
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_break_or_continue_stmt
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_object_literal
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_array_literal
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_compile_raw
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
</UL>

<P><STRONG><a name="[202]"></a>duk__advance_bytes</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, duktape.o(i.duk__advance_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = duk__advance_bytes &rArr; duk__fill_lexer_buffer &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__fill_lexer_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_chars
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_re_token
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
</UL>

<P><STRONG><a name="[205]"></a>duk__advance_chars</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, duktape.o(i.duk__advance_chars))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = duk__advance_chars &rArr; duk__advance_bytes &rArr; duk__fill_lexer_buffer &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_skip_to_endofline
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_parse_string_literal
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_parse_escape
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_re_token
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_re_ranges
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
</UL>

<P><STRONG><a name="[206]"></a>duk__advance_expect</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, duktape.o(i.duk__advance_expect))
<BR><BR>[Stack]<UL><LI>Max Depth = 5032<LI>Call Chain = duk__advance_expect &rArr; duk__advance_helper &rArr; duk_lexer_parse_js_input_element &rArr; duk__lexer_parse_string_literal &rArr; duk__lexer_parse_escape &rArr; duk__advance_chars &rArr; duk__advance_bytes &rArr; duk__fill_lexer_buffer &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_with_stmt
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_while_stmt
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_switch_stmt
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_if_stmt
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_raw
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_formals
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_do_stmt
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_arguments
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_object_literal
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_compile_raw
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[201]"></a>duk__advance_helper</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, duktape.o(i.duk__advance_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 5016<LI>Call Chain = duk__advance_helper &rArr; duk_lexer_parse_js_input_element &rArr; duk__lexer_parse_string_literal &rArr; duk__lexer_parse_escape &rArr; duk__advance_chars &rArr; duk__advance_bytes &rArr; duk__fill_lexer_buffer &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_copy
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_expect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
</UL>

<P><STRONG><a name="[20a]"></a>duk__alloctemp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk__alloctemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4792<LI>Call Chain = duk__alloctemp &rArr; duk__alloctemps &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemps
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_switch_stmt
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_arguments
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_object_literal
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_array_literal
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ispec_toregconst_raw
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[20b]"></a>duk__alloctemps</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, duktape.o(i.duk__alloctemps))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = duk__alloctemps &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_with_stmt
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_object_literal
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemp
</UL>

<P><STRONG><a name="[20d]"></a>duk__api_coerce_d2i</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, duktape.o(i.duk__api_coerce_d2i))
<BR><BR>[Stack]<UL><LI>Max Depth = 4288<LI>Call Chain = duk__api_coerce_d2i &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_require_type_index
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_int
</UL>

<P><STRONG><a name="[211]"></a>duk__api_coerce_d2ui</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, duktape.o(i.duk__api_coerce_d2ui))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + In Cycle
<LI>Call Chain = duk__api_coerce_d2ui &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_require_type_index
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_uint
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_uint
</UL>

<P><STRONG><a name="[212]"></a>duk__append_7bit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, duktape.o(i.duk__append_7bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = duk__append_7bit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_reop
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_range_atom_matcher
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_compile
</UL>

<P><STRONG><a name="[214]"></a>duk__append_jump_offset</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, duktape.o(i.duk__append_jump_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4928<LI>Call Chain = duk__append_jump_offset &rArr; duk__insert_jump_offset &rArr; duk__insert_i32 &rArr; duk__insert_u32 &rArr; duk_bw_insert_ensure_bytes &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__insert_jump_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_disjunction
</UL>

<P><STRONG><a name="[216]"></a>duk__append_range_atom_matcher</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, duktape.o(i.duk__append_range_atom_matcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = duk__append_range_atom_matcher &rArr; duk__append_u16_list &rArr; duk__append_u32 &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_u16_list
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_reop
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_7bit
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_disjunction
</UL>

<P><STRONG><a name="[217]"></a>duk__append_reop</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, duktape.o(i.duk__append_reop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = duk__append_reop &rArr; duk__append_7bit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_7bit
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_disjunction
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_range_atom_matcher
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_compile
</UL>

<P><STRONG><a name="[219]"></a>duk__append_slice</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, duktape.o(i.duk__append_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 4848<LI>Call Chain = duk__append_slice &rArr; duk_bw_write_ensure_slice &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_write_ensure_slice
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_disjunction
</UL>

<P><STRONG><a name="[218]"></a>duk__append_u16_list</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, duktape.o(i.duk__append_u16_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = duk__append_u16_list &rArr; duk__append_u32 &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_range_atom_matcher
</UL>

<P><STRONG><a name="[21b]"></a>duk__append_u32</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, duktape.o(i.duk__append_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = duk__append_u32 &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_encode_xutf8
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_emit_range
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_disjunction
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_u16_list
</UL>

<P><STRONG><a name="[21d]"></a>duk__appendbuffer</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, duktape.o(i.duk__appendbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = duk__appendbuffer &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_encode_cesu8
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_parse_string_literal
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
</UL>

<P><STRONG><a name="[21f]"></a>duk__appendbuffer_ascii</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, duktape.o(i.duk__appendbuffer_ascii))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = duk__appendbuffer_ascii &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_parse_string_literal
</UL>

<P><STRONG><a name="[50e]"></a>duk__array_pop_fastpath</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, duktape.o(i.duk__array_pop_fastpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = duk__array_pop_fastpath
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_pop
</UL>

<P><STRONG><a name="[220]"></a>duk__array_push_fastpath</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, duktape.o(i.duk__array_push_fastpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = duk__array_push_fastpath &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_push
</UL>

<P><STRONG><a name="[222]"></a>duk__array_qsort</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, duktape.o(i.duk__array_qsort))
<BR><BR>[Stack]<UL><LI>Max Depth = 4184 + In Cycle
<LI>Call Chain = duk__array_qsort &rArr;  duk__array_qsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_swap
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_compare
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_qsort
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_util_tinyrandom_get_double
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_sort
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_qsort
</UL>

<P><STRONG><a name="[225]"></a>duk__array_sort_compare</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, duktape.o(i.duk__array_sort_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 4128<LI>Call Chain = duk__array_sort_compare &rArr; duk_call &rArr; duk_handle_call_unprotected &rArr; duk__handle_call_raw &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m1
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring_m1
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_nodecref_unsafe
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2_unsafe
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_string_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_qsort
</UL>

<P><STRONG><a name="[224]"></a>duk__array_sort_swap</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, duktape.o(i.duk__array_sort_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 3256<LI>Call Chain = duk__array_sort_swap &rArr; duk_put_prop_index &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop_index
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_undefined
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_qsort
</UL>

<P><STRONG><a name="[233]"></a>duk__arraybuffer_plain_slice</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, duktape.o(i.duk__arraybuffer_plain_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 4392<LI>Call Chain = duk__arraybuffer_plain_slice &rArr; duk__clamp_startend_negidx_shifted &rArr; duk_to_int &rArr; duk__api_coerce_d2i &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__clamp_startend_negidx_shifted
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_nozero
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_slice_shared
</UL>

<P><STRONG><a name="[50d]"></a>duk__arraypart_fastpath_this</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, duktape.o(i.duk__arraypart_fastpath_this))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = duk__arraypart_fastpath_this
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_push
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_pop
</UL>

<P><STRONG><a name="[14e]"></a>duk__asin</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, duktape.o(i.duk__asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = duk__asin &rArr; asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>duk__atan</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, duktape.o(i.duk__atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = duk__atan &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>duk__atan2_fixed</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, duktape.o(i.duk__atan2_fixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = duk__atan2_fixed &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[237]"></a>duk__autospawn_arraybuffer</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, duktape.o(i.duk__autospawn_arraybuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = duk__autospawn_arraybuffer &rArr; duk_push_bufobj_raw &rArr; duk_hbufobj_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_bufobj_buffer
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_bufobj_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_buffer_getter
</UL>

<P><STRONG><a name="[501]"></a>duk__base64_decode_helper</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, duktape.o(i.duk__base64_decode_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = duk__base64_decode_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_base64_decode
</UL>

<P><STRONG><a name="[504]"></a>duk__base64_encode_helper</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, duktape.o(i.duk__base64_encode_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk__base64_encode_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_base64_encode
</UL>

<P><STRONG><a name="[23a]"></a>duk__bc_get_i32</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, duktape.o(i.duk__bc_get_i32))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = duk__bc_get_i32 &rArr; duk_unicode_decode_xutf8_checked &rArr; duk_unicode_decode_xutf8
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_decode_xutf8_checked
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__match_regexp
</UL>

<P><STRONG><a name="[23c]"></a>duk__bc_get_u32</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, duktape.o(i.duk__bc_get_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = duk__bc_get_u32 &rArr; duk_unicode_decode_xutf8_checked &rArr; duk_unicode_decode_xutf8
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_decode_xutf8_checked
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__match_regexp
</UL>

<P><STRONG><a name="[23f]"></a>duk__bi_add</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, duktape.o(i.duk__bi_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = duk__bi_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_scale
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_generate
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_add_small
</UL>

<P><STRONG><a name="[23d]"></a>duk__bi_add_small</STRONG> (Thumb, 40 bytes, Stack size 168 bytes, duktape.o(i.duk__bi_add_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = duk__bi_add_small &rArr; duk__bi_add
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_set_small
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
</UL>

<P><STRONG><a name="[2f7]"></a>duk__bi_compare</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, duktape.o(i.duk__bi_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = duk__bi_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_scale
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_generate
</UL>

<P><STRONG><a name="[240]"></a>duk__bi_copy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, duktape.o(i.duk__bi_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk__bi_copy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_scale
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_prepare
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_generate
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_sub_copy
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul_small_copy
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul_copy
</UL>

<P><STRONG><a name="[241]"></a>duk__bi_exp_small</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, duktape.o(i.duk__bi_exp_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = duk__bi_exp_small &rArr; duk__bi_mul_copy &rArr; duk__bi_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_twoexp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_set_small
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_prepare
</UL>

<P><STRONG><a name="[2fa]"></a>duk__bi_is_2to52</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, duktape.o(i.duk__bi_is_2to52))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_prepare
</UL>

<P><STRONG><a name="[2f9]"></a>duk__bi_is_even</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, duktape.o(i.duk__bi_is_even))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_prepare
</UL>

<P><STRONG><a name="[5aa]"></a>duk__bi_is_zero</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, duktape.o(i.duk__bi_is_zero))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
</UL>

<P><STRONG><a name="[244]"></a>duk__bi_mul</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, duktape.o(i.duk__bi_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk__bi_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_prepare
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul_small
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul_copy
</UL>

<P><STRONG><a name="[243]"></a>duk__bi_mul_copy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, duktape.o(i.duk__bi_mul_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = duk__bi_mul_copy &rArr; duk__bi_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_exp_small
</UL>

<P><STRONG><a name="[247]"></a>duk__bi_mul_small</STRONG> (Thumb, 40 bytes, Stack size 168 bytes, duktape.o(i.duk__bi_mul_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = duk__bi_mul_small &rArr; duk__bi_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_set_small
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_scale
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_prepare
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_generate
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul_small_copy
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
</UL>

<P><STRONG><a name="[248]"></a>duk__bi_mul_small_copy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, duktape.o(i.duk__bi_mul_small_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = duk__bi_mul_small_copy &rArr; duk__bi_mul_small &rArr; duk__bi_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul_small
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_scale
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_generate
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
</UL>

<P><STRONG><a name="[246]"></a>duk__bi_normalize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, duktape.o(i.duk__bi_normalize))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_double_to_ctx
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_sub
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul
</UL>

<P><STRONG><a name="[23e]"></a>duk__bi_set_small</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, duktape.o(i.duk__bi_set_small))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_prepare
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul_small
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_exp_small
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_add_small
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
</UL>

<P><STRONG><a name="[249]"></a>duk__bi_sub</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, duktape.o(i.duk__bi_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk__bi_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_sub_copy
</UL>

<P><STRONG><a name="[24a]"></a>duk__bi_sub_copy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, duktape.o(i.duk__bi_sub_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = duk__bi_sub_copy &rArr; duk__bi_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_sub
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_generate
</UL>

<P><STRONG><a name="[242]"></a>duk__bi_twoexp</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, duktape.o(i.duk__bi_twoexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk__bi_twoexp
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_exp_small
</UL>

<P><STRONG><a name="[558]"></a>duk__bw_update_ptrs</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, duktape.o(i.duk__bw_update_ptrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = duk__bw_update_ptrs
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_init_pushbuf
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_compact
</UL>

<P><STRONG><a name="[24b]"></a>duk__call_c_recursion_limit_check</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, duktape.o(i.duk__call_c_recursion_limit_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk__call_c_recursion_limit_check &rArr; duk__call_c_recursion_limit_check_slowpath &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_c_recursion_limit_check_slowpath
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_safe_call_inner
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
</UL>

<P><STRONG><a name="[24c]"></a>duk__call_c_recursion_limit_check_slowpath</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, duktape.o(i.duk__call_c_recursion_limit_check_slowpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = duk__call_c_recursion_limit_check_slowpath &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_c_recursion_limit_check
</UL>

<P><STRONG><a name="[24d]"></a>duk__call_callstack_limit_check</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, duktape.o(i.duk__call_callstack_limit_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk__call_callstack_limit_check &rArr; duk__call_callstack_limit_check_slowpath &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_callstack_limit_check_slowpath
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_setup_act_not_tailcall
</UL>

<P><STRONG><a name="[24e]"></a>duk__call_callstack_limit_check_slowpath</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, duktape.o(i.duk__call_callstack_limit_check_slowpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = duk__call_callstack_limit_check_slowpath &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_callstack_limit_check
</UL>

<P><STRONG><a name="[24f]"></a>duk__call_env_setup</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, duktape.o(i.duk__call_env_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 3680<LI>Call Chain = duk__call_env_setup &rArr; duk__handle_createargs_for_call &rArr; duk__create_arguments_object &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_oldenv_for_call
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_createargs_for_call
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_create_activation_environment_record
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
</UL>

<P><STRONG><a name="[253]"></a>duk__call_get_idx_func</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, duktape.o(i.duk__call_get_idx_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk__call_get_idx_func &rArr; duk_err_type_invalid_args &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_new
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_method
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call
</UL>

<P><STRONG><a name="[256]"></a>duk__call_get_idx_func_unvalidated</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, duktape.o(i.duk__call_get_idx_func_unvalidated))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk__call_get_idx_func_unvalidated
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__pcall_method_raw
</UL>

<P><STRONG><a name="[257]"></a>duk__call_setup_act_attempt_tailcall</STRONG> (Thumb, 568 bytes, Stack size 64 bytes, duktape.o(i.duk__call_setup_act_attempt_tailcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 3072<LI>Call Chain = duk__call_setup_act_attempt_tailcall &rArr; duk_hthread_activation_unwind_reuse_norz &rArr; duk__activation_unwind_nofree_norz &rArr; duk_js_close_environment_record &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_n
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_activation_unwind_reuse_norz
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
</UL>

<P><STRONG><a name="[25b]"></a>duk__call_setup_act_not_tailcall</STRONG> (Thumb, 450 bytes, Stack size 56 bytes, duktape.o(i.duk__call_setup_act_not_tailcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = duk__call_setup_act_not_tailcall &rArr; duk_hthread_activation_alloc &rArr; duk__hthread_activation_alloc_slow &rArr; duk_heap_mem_alloc_checked &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_callstack_limit_check
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_activation_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
</UL>

<P><STRONG><a name="[25d]"></a>duk__call_thread_state_update</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, duktape.o(i.duk__call_thread_state_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = duk__call_thread_state_update &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_safe_call_inner
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
</UL>

<P><STRONG><a name="[25f]"></a>duk__case_transform_helper</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, duktape.o(i.duk__case_transform_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = duk__case_transform_helper &rArr; duk__slow_case_conversion &rArr; duk_unicode_encode_xutf8
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__slow_case_conversion
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_is_letter
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_encode_xutf8
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_re_canonicalize_char
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_case_convert_string
</UL>

<P><STRONG><a name="[159]"></a>duk__cbrt</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, duktape.o(i.duk__cbrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = duk__cbrt &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_signbit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>duk__ceil</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, duktape.o(i.duk__ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = duk__ceil &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[264]"></a>duk__check_arguments_map_for_delete</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, duktape.o(i.duk__check_arguments_map_for_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + In Cycle
<LI>Call Chain = duk__check_arguments_map_for_delete &rArr;  duk_hobject_delprop_raw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_own_propdesc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop_raw
</UL>

<P><STRONG><a name="[269]"></a>duk__check_arguments_map_for_get</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, duktape.o(i.duk__check_arguments_map_for_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = duk__check_arguments_map_for_get &rArr; duk_js_getvar_envrec &rArr; duk__getvar_helper &rArr;  duk_hobject_getprop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_arguments_map
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_getvar_envrec
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
</UL>

<P><STRONG><a name="[26d]"></a>duk__check_arguments_map_for_put</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, duktape.o(i.duk__check_arguments_map_for_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + In Cycle
<LI>Call Chain = duk__check_arguments_map_for_put &rArr;  duk_js_putvar_envrec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_arguments_map
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_putvar_envrec
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
</UL>

<P><STRONG><a name="[270]"></a>duk__check_voluntary_gc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, duktape.o(i.duk__check_voluntary_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_realloc_indirect
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_realloc
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc
</UL>

<P><STRONG><a name="[234]"></a>duk__clamp_startend_negidx_shifted</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, duktape.o(i.duk__clamp_startend_negidx_shifted))
<BR><BR>[Stack]<UL><LI>Max Depth = 4344<LI>Call Chain = duk__clamp_startend_negidx_shifted &rArr; duk_to_int &rArr; duk__api_coerce_d2i &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_slice_shared
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__arraybuffer_plain_slice
</UL>

<P><STRONG><a name="[273]"></a>duk__clamp_startend_nonegidx_noshift</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, duktape.o(i.duk__clamp_startend_nonegidx_noshift))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920<LI>Call Chain = duk__clamp_startend_nonegidx_noshift &rArr; duk_to_int_clamped &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_tostring
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_fill
</UL>

<P><STRONG><a name="[275]"></a>duk__cleanup_varmap</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, duktape.o(i.duk__cleanup_varmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = duk__cleanup_varmap &rArr; duk_compact_m1 &rArr; duk_compact &rArr; duk_hobject_compact_props &rArr; duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_refzero
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_compact_m1
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__convert_to_func_template
</UL>

<P><STRONG><a name="[585]"></a>duk__clear_finalize_list_flags</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, duktape.o(i.duk__clear_finalize_list_flags))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
</UL>

<P><STRONG><a name="[278]"></a>duk__coerce_nonstrict_this_binding</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, duktape.o(i.duk__coerce_nonstrict_this_binding))
<BR><BR>[Stack]<UL><LI>Max Depth = 3080<LI>Call Chain = duk__coerce_nonstrict_this_binding &rArr; duk_to_object &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_target_func_and_this_binding
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_target_fastpath_check
</UL>

<P><STRONG><a name="[34a]"></a>duk__comp_recursion_decrease</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, duktape.o(i.duk__comp_recursion_decrease))
<BR><BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
</UL>

<P><STRONG><a name="[27a]"></a>duk__comp_recursion_increase</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, duktape.o(i.duk__comp_recursion_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = duk__comp_recursion_increase &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
</UL>

<P><STRONG><a name="[27b]"></a>duk__compact_object_list</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, duktape.o(i.duk__compact_object_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = duk__compact_object_list &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_safe_call
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__compact_objects
</UL>

<P><STRONG><a name="[27d]"></a>duk__compact_objects</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, duktape.o(i.duk__compact_objects))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = duk__compact_objects &rArr; duk__compact_object_list &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__compact_object_list
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
</UL>

<P><STRONG><a name="[27e]"></a>duk__compare_number</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, duktape.o(i.duk__compare_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk__compare_number &rArr; duk_double_is_nan
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_is_nan
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_compare_helper
</UL>

<P><STRONG><a name="[1e5]"></a>duk__compute_a_stats</STRONG> (Thumb, 102 bytes, Stack size 28 bytes, duktape.o(i.duk__compute_a_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = duk__compute_a_stats
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__abandon_array_checked
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_compact_props
</UL>

<P><STRONG><a name="[280]"></a>duk__compute_exp</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, duktape.o(i.duk__compute_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = duk__compute_exp &rArr; duk_js_arith_pow &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_arith_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_binary_op
</UL>

<P><STRONG><a name="[281]"></a>duk__compute_mod</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, duktape.o(i.duk__compute_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = duk__compute_mod &rArr; duk_js_arith_mod &rArr; fmod &rArr; _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_arith_mod
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_binary_op
</UL>

<P><STRONG><a name="[283]"></a>duk__concat_and_join_helper</STRONG> (Thumb, 426 bytes, Stack size 64 bytes, duktape.o(i.duk__concat_and_join_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + In Cycle
<LI>Call Chain = duk__concat_and_join_helper &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_n
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_buffer_to_string
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_empty
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_nozero
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_join
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat
</UL>

<P><STRONG><a name="[288]"></a>duk__const_needs_refcount</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, duktape.o(i.duk__const_needs_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 3128<LI>Call Chain = duk__const_needs_refcount &rArr; duk_get_prop_index &rArr; duk_get_prop &rArr; duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_number
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_return_stmt
</UL>

<P><STRONG><a name="[28a]"></a>duk__construct_from_codepoints</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, duktape.o(i.duk__construct_from_codepoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 4856<LI>Call Chain = duk__construct_from_codepoints &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint32
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_buffer_to_string
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_encode_xutf8
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_encode_cesu8
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_whole_get_int32
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_init_pushbuf
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_compact
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_constructor_from_code_point
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_constructor_from_char_code
</UL>

<P><STRONG><a name="[290]"></a>duk__convert_to_func_template</STRONG> (Thumb, 910 bytes, Stack size 88 bytes, duktape.o(i.duk__convert_to_func_template))
<BR><BR>[Stack]<UL><LI>Max Depth = 4376<LI>Call Chain = duk__convert_to_func_template &rArr; duk_hobject_pc2line_pack &rArr; duk_to_buffer_raw &rArr; duk_to_lstring &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__cleanup_varmap
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hcompfunc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_nozero
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hbuffer
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_set_prototype_updref
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_pc2line_pack
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_length
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_find_existing_array_entry_tval_ptr
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_compact_m1
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_raw
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_compile_raw
</UL>

<P><STRONG><a name="[298]"></a>duk__copy_ispec</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, duktape.o(i.duk__copy_ispec))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = duk__copy_ispec &rArr; duk_copy &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[299]"></a>duk__copy_ivalue</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, duktape.o(i.duk__copy_ivalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = duk__copy_ivalue &rArr; duk_copy &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
</UL>

<P><STRONG><a name="[151]"></a>duk__cos</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, duktape.o(i.duk__cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = duk__cos &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[1e4]"></a>duk__count_used_e_keys</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, duktape.o(i.duk__count_used_e_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk__count_used_e_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__grow_props_for_new_entry_item
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__abandon_array_checked
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_compact_props
</UL>

<P><STRONG><a name="[29a]"></a>duk__create_arguments_object</STRONG> (Thumb, 544 bytes, Stack size 72 bytes, duktape.o(i.duk__create_arguments_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 3632 + In Cycle
<LI>Call Chain = duk__create_arguments_object &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_top_index
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_has_prop
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_top
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_thrower
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_index
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint_to_hstring
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object_helper
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_createargs_for_call
</UL>

<P><STRONG><a name="[2a7]"></a>duk__create_escaped_source</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, duktape.o(i.duk__create_escaped_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = duk__create_escaped_source &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_buffer_to_string
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_init_pushbuf
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_compact
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_compile
</UL>

<P><STRONG><a name="[2a9]"></a>duk__date_get_indirect_magic</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, duktape.o(i.duk__date_get_indirect_magic))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk__date_get_indirect_magic &rArr; duk_get_current_magic
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_tostring_shared
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_set_shared
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_get_shared
</UL>

<P><STRONG><a name="[2ab]"></a>duk__day_from_year</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, duktape.o(i.duk__day_from_year))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk__day_from_year
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__div_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__year_from_day
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__make_day
</UL>

<P><STRONG><a name="[2ad]"></a>duk__dec_array</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, duktape.o(i.duk__dec_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808 + In Cycle
<LI>Call Chain = duk__dec_array &rArr;  duk__dec_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_syntax_error
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_objarr_exit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_objarr_entry
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_get_nonwhite
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_length
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_array
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_index
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
</UL>

<P><STRONG><a name="[2b5]"></a>duk__dec_buffer</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, duktape.o(i.duk__dec_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = duk__dec_buffer &rArr; duk_hex_decode &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_syntax_error
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hex_decode
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_nozero
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
</UL>

<P><STRONG><a name="[2b7]"></a>duk__dec_decode_hex_escape</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, duktape.o(i.duk__dec_decode_hex_escape))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = duk__dec_decode_hex_escape &rArr; duk__dec_syntax_error &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_syntax_error
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_string_escape
</UL>

<P><STRONG><a name="[2b9]"></a>duk__dec_eat_white</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, duktape.o(i.duk__dec_eat_white))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_get_nonwhite
</UL>

<P><STRONG><a name="[2b8]"></a>duk__dec_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, duktape.o(i.duk__dec_get))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_string_escape
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_req_stridx
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_get_nonwhite
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_decode_hex_escape
</UL>

<P><STRONG><a name="[2b0]"></a>duk__dec_get_nonwhite</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, duktape.o(i.duk__dec_get_nonwhite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = duk__dec_get_nonwhite
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_get
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_eat_white
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_object
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_array
</UL>

<P><STRONG><a name="[2ba]"></a>duk__dec_number</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, duktape.o(i.duk__dec_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 2800<LI>Call Chain = duk__dec_number &rArr; duk_numconv_parse &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_syntax_error
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_nan
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
</UL>

<P><STRONG><a name="[2ae]"></a>duk__dec_objarr_entry</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, duktape.o(i.duk__dec_objarr_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = duk__dec_objarr_entry &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_stack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_object
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_array
</UL>

<P><STRONG><a name="[2b3]"></a>duk__dec_objarr_exit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, duktape.o(i.duk__dec_objarr_exit))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_object
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_array
</UL>

<P><STRONG><a name="[2bf]"></a>duk__dec_object</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, duktape.o(i.duk__dec_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 4880 + In Cycle
<LI>Call Chain = duk__dec_object &rArr;  duk__dec_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_syntax_error
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_string
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_plain_string
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_objarr_exit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_objarr_entry
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_get_nonwhite
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_is_identifier_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
</UL>

<P><STRONG><a name="[2d1]"></a>duk__dec_peek</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, duktape.o(i.duk__dec_peek))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
</UL>

<P><STRONG><a name="[2c3]"></a>duk__dec_plain_string</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, duktape.o(i.duk__dec_plain_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = duk__dec_plain_string &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_is_identifier_part
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_object
</UL>

<P><STRONG><a name="[2c5]"></a>duk__dec_pointer</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, duktape.o(i.duk__dec_pointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = duk__dec_pointer &rArr; duk__dec_syntax_error &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_syntax_error
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
</UL>

<P><STRONG><a name="[2c7]"></a>duk__dec_req_stridx</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, duktape.o(i.duk__dec_req_stridx))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = duk__dec_req_stridx &rArr; duk__dec_syntax_error &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_syntax_error
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
</UL>

<P><STRONG><a name="[2c8]"></a>duk__dec_reviver_walk</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, duktape.o(i.duk__dec_reviver_walk))
<BR><BR>[Stack]<UL><LI>Max Depth = 4080 + In Cycle
<LI>Call Chain = duk__dec_reviver_walk &rArr;  duk__dec_reviver_walk (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_next
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_enum
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_top
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop_index
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_method
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint_to_hstring
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m3
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m2
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_parse_helper
</UL>

<P><STRONG><a name="[2c1]"></a>duk__dec_string</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, duktape.o(i.duk__dec_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 4856<LI>Call Chain = duk__dec_string &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_syntax_error
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_string_escape
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_buffer_to_string
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_init_pushbuf
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_compact
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_object
</UL>

<P><STRONG><a name="[2d0]"></a>duk__dec_string_escape</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, duktape.o(i.duk__dec_string_escape))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = duk__dec_string_escape &rArr; duk__dec_decode_hex_escape &rArr; duk__dec_syntax_error &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_get
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_decode_hex_escape
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_encode_xutf8
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_string
</UL>

<P><STRONG><a name="[2b4]"></a>duk__dec_syntax_error</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, duktape.o(i.duk__dec_syntax_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = duk__dec_syntax_error &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_string
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_req_stridx
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_pointer
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_object
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_number
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_decode_hex_escape
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_buffer
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_array
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_parse_helper
</UL>

<P><STRONG><a name="[2b1]"></a>duk__dec_value</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, duktape.o(i.duk__dec_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896<LI>Call Chain = duk__dec_value &rArr; duk__dec_object &rArr;  duk__dec_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_syntax_error
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_string
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_req_stridx
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_pointer
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_peek
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_object
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_number
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_get_nonwhite
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_eat_white
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_buffer
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_array
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_true
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_null
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_nan
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_false
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_object
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_array
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_parse_helper
</UL>

<P><STRONG><a name="[2d7]"></a>duk__declvar_helper</STRONG> (Thumb, 764 bytes, Stack size 104 bytes, duktape.o(i.duk__declvar_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 3064 + In Cycle
<LI>Call Chain = duk__declvar_helper &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_identifier_reference
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refzero
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_find_existing_entry
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_declvar_activation
</UL>

<P><STRONG><a name="[2dd]"></a>duk__decode_helper</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, duktape.o(i.duk__decode_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 4792<LI>Call Chain = duk__decode_helper &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__utf8_decode_next
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__utf8_decode_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_boolean
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_buffer_data
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_string
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_buffer_data
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_check_type_mask
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_encode_cesu8
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_nozero
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_textdecoder_decode_utf8_nodejs
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textdecoder_prototype_decode
</UL>

<P><STRONG><a name="[4ed]"></a>duk__decode_hex_escape</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, duktape.o(i.duk__decode_hex_escape))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = duk__decode_hex_escape
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_callback_unescape
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_callback_decode_uri
</UL>

<P><STRONG><a name="[2e5]"></a>duk__decref_tvals_norz</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, duktape.o(i.duk__decref_tvals_norz))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = duk__decref_tvals_norz &rArr; duk_heaphdr_refzero_norz &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero_norz
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refcount_finalize_norz
</UL>

<P><STRONG><a name="[2e7]"></a>duk__defaultvalue_coerce_attempt</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, duktape.o(i.duk__defaultvalue_coerce_attempt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4072<LI>Call Chain = duk__defaultvalue_coerce_attempt &rArr; duk_call_method &rArr; duk_handle_call_unprotected &rArr; duk__handle_call_raw &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_function
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_check_type_mask
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_method
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_primitive
</UL>

<P><STRONG><a name="[2ea]"></a>duk__delvar_helper</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, duktape.o(i.duk__delvar_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = duk__delvar_helper &rArr; duk_hobject_delprop_raw &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_identifier_reference
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_delvar_activation
</UL>

<P><STRONG><a name="[2ac]"></a>duk__div_floor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, duktape.o(i.duk__div_floor))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__day_from_year
</UL>

<P><STRONG><a name="[92]"></a>duk__do_compile</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, duktape.o(i.duk__do_compile))
<BR><BR>[Stack]<UL><LI>Max Depth = 6488<LI>Call Chain = duk__do_compile &rArr; duk_js_compile &rArr; duk_safe_call &rArr; duk_handle_safe_call &rArr; duk__handle_safe_call_error &rArr; duk__safe_call_adjust_valstack &rArr; duk_set_top_unsafe &rArr; duk_refzero_check_fast &rArr; duk_heap_process_finalize_list &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_compile
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hstring
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_compile_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk_compile_raw)
</UL>
<P><STRONG><a name="[2f0]"></a>duk__dragon4_convert_and_push</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, duktape.o(i.duk__dragon4_convert_and_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = duk__dragon4_convert_and_push &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_format_uint32
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
</UL>

<P><STRONG><a name="[2f2]"></a>duk__dragon4_ctx_to_double</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, duktape.o(i.duk__dragon4_ctx_to_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = duk__dragon4_ctx_to_double &rArr; duk__dragon4_fixed_format_round &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_fixed_format_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
</UL>

<P><STRONG><a name="[2f4]"></a>duk__dragon4_double_to_ctx</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, duktape.o(i.duk__dragon4_double_to_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = duk__dragon4_double_to_ctx
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
</UL>

<P><STRONG><a name="[2f3]"></a>duk__dragon4_fixed_format_round</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, duktape.o(i.duk__dragon4_fixed_format_round))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk__dragon4_fixed_format_round &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_ctx_to_double
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
</UL>

<P><STRONG><a name="[2f1]"></a>duk__dragon4_format_uint32</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, duktape.o(i.duk__dragon4_format_uint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk__dragon4_format_uint32 &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_convert_and_push
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
</UL>

<P><STRONG><a name="[2f6]"></a>duk__dragon4_generate</STRONG> (Thumb, 482 bytes, Stack size 24 bytes, duktape.o(i.duk__dragon4_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = duk__dragon4_generate &rArr; duk__bi_mul_small_copy &rArr; duk__bi_mul_small &rArr; duk__bi_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_sub_copy
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul_small_copy
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul_small
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_copy
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_compare
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_add
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
</UL>

<P><STRONG><a name="[2f8]"></a>duk__dragon4_prepare</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, duktape.o(i.duk__dragon4_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = duk__dragon4_prepare &rArr; duk__bi_mul_small &rArr; duk__bi_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_set_small
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul_small
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_is_even
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_is_2to52
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_exp_small
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
</UL>

<P><STRONG><a name="[2fb]"></a>duk__dragon4_scale</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, duktape.o(i.duk__dragon4_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = duk__dragon4_scale &rArr; duk__bi_mul_small_copy &rArr; duk__bi_mul_small &rArr; duk__bi_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul_small_copy
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul_small
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_copy
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_compare
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_add
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
</UL>

<P><STRONG><a name="[2fc]"></a>duk__emit</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, duktape.o(i.duk__emit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_op_only
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_abc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_bc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_b_c
</UL>

<P><STRONG><a name="[2fd]"></a>duk__emit_1</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, duktape.o(i.duk__emit_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = duk__emit_1 &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_quote_string
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_object
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_newline_indent
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_array
</UL>

<P><STRONG><a name="[2fe]"></a>duk__emit_2</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, duktape.o(i.duk__emit_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = duk__emit_2 &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_object
</UL>

<P><STRONG><a name="[2ff]"></a>duk__emit_a_b</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, duktape.o(i.duk__emit_a_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920<LI>Call Chain = duk__emit_a_b &rArr; duk__emit_a_b_c &rArr; duk__emit_abc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_b_c
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[300]"></a>duk__emit_a_b_c</STRONG> (Thumb, 726 bytes, Stack size 48 bytes, duktape.o(i.duk__emit_a_b_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896<LI>Call Chain = duk__emit_a_b_c &rArr; duk__emit_abc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_current_pc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_load_int32_noshuffle
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_abc
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_switch_stmt
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__objlit_flush_keys
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_array_literal
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_b_c
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_b
</UL>

<P><STRONG><a name="[304]"></a>duk__emit_a_bc</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, duktape.o(i.duk__emit_a_bc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4856<LI>Call Chain = duk__emit_a_bc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_load_int32_noshuffle
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_with_stmt
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_decl
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_object_literal
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_array_literal
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ispec_toregconst_raw
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_load_int32_raw
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_bc
</UL>

<P><STRONG><a name="[303]"></a>duk__emit_abc</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, duktape.o(i.duk__emit_abc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4848<LI>Call Chain = duk__emit_abc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_jump
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_b_c
</UL>

<P><STRONG><a name="[305]"></a>duk__emit_b_c</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, duktape.o(i.duk__emit_b_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920<LI>Call Chain = duk__emit_b_c &rArr; duk__emit_a_b_c &rArr; duk__emit_abc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_b_c
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
</UL>

<P><STRONG><a name="[306]"></a>duk__emit_bc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, duktape.o(i.duk__emit_bc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4872<LI>Call Chain = duk__emit_bc &rArr; duk__emit_a_bc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_bc
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__stmt_label_site
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_throw_stmt
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_return_stmt
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_break_or_continue_stmt
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_object_literal
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_array_literal
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ispec_toregconst_raw
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_if_true_skip
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_if_false_skip
</UL>

<P><STRONG><a name="[307]"></a>duk__emit_cstring</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, duktape.o(i.duk__emit_cstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = duk__emit_cstring &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_pointer
</UL>

<P><STRONG><a name="[327]"></a>duk__emit_esc_auto_fast</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, duktape.o(i.duk__emit_esc_auto_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = duk__emit_esc_auto_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_quote_string
</UL>

<P><STRONG><a name="[309]"></a>duk__emit_hstring</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, duktape.o(i.duk__emit_hstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = duk__emit_hstring &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_key_autoquote
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_double
</UL>

<P><STRONG><a name="[30a]"></a>duk__emit_if_false_skip</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, duktape.o(i.duk__emit_if_false_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = duk__emit_if_false_skip &rArr; duk__emit_bc &rArr; duk__emit_a_bc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_bc
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_do_stmt
</UL>

<P><STRONG><a name="[30b]"></a>duk__emit_if_true_skip</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, duktape.o(i.duk__emit_if_true_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = duk__emit_if_true_skip &rArr; duk__emit_bc &rArr; duk__emit_a_bc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_bc
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_while_stmt
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_switch_stmt
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_if_stmt
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[30c]"></a>duk__emit_invalid</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk__emit_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 4848<LI>Call Chain = duk__emit_invalid &rArr; duk__emit_op_only &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_op_only
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__stmt_label_site
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_with_stmt
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
</UL>

<P><STRONG><a name="[30e]"></a>duk__emit_jump</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, duktape.o(i.duk__emit_jump))
<BR><BR>[Stack]<UL><LI>Max Depth = 4872<LI>Call Chain = duk__emit_jump &rArr; duk__emit_abc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_abc
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_while_stmt
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_do_stmt
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_break_or_continue_stmt
</UL>

<P><STRONG><a name="[30f]"></a>duk__emit_jump_empty</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, duktape.o(i.duk__emit_jump_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4856<LI>Call Chain = duk__emit_jump_empty &rArr; duk__emit_op_only &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_current_pc
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_op_only
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_while_stmt
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_switch_stmt
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_if_stmt
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[310]"></a>duk__emit_load_int32</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, duktape.o(i.duk__emit_load_int32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk__emit_load_int32 &rArr; duk__emit_load_int32_raw &rArr;  duk__emit_a_bc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_load_int32_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_array_literal
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ispec_toregconst_raw
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_load_int32_noshuffle
</UL>

<P><STRONG><a name="[301]"></a>duk__emit_load_int32_noshuffle</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, duktape.o(i.duk__emit_load_int32_noshuffle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = duk__emit_load_int32_noshuffle &rArr; duk__emit_load_int32 &rArr; duk__emit_load_int32_raw &rArr;  duk__emit_a_bc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_load_int32
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_bc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_b_c
</UL>

<P><STRONG><a name="[311]"></a>duk__emit_load_int32_raw</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, duktape.o(i.duk__emit_load_int32_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = duk__emit_load_int32_raw &rArr;  duk__emit_a_bc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_bc
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_load_int32
</UL>

<P><STRONG><a name="[30d]"></a>duk__emit_op_only</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, duktape.o(i.duk__emit_op_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = duk__emit_op_only &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_with_stmt
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_return_stmt
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_jump_empty
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_invalid
</UL>

<P><STRONG><a name="[312]"></a>duk__emit_stridx</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, duktape.o(i.duk__emit_stridx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = duk__emit_stridx &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_double
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_bufobj
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_array
</UL>

<P><STRONG><a name="[5a9]"></a>duk__emit_u16_direct_ranges</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, duktape.o(i.duk__emit_u16_direct_ranges))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = duk__emit_u16_direct_ranges
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_re_ranges
</UL>

<P><STRONG><a name="[52b]"></a>duk__enc_allow_into_proplist</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, duktape.o(i.duk__enc_allow_into_proplist))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = duk__enc_allow_into_proplist
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>

<P><STRONG><a name="[313]"></a>duk__enc_array</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, duktape.o(i.duk__enc_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896 + In Cycle
<LI>Call Chain = duk__enc_array &rArr;  duk__enc_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__unemit_1
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_exit
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_entry
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_newline_indent
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_stridx
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_1
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint_to_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
</UL>

<P><STRONG><a name="[319]"></a>duk__enc_buffer_data</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, duktape.o(i.duk__enc_buffer_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = duk__enc_buffer_data &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_buffer_data_hex
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_bufobj
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_buffer_jx_jc
</UL>

<P><STRONG><a name="[31a]"></a>duk__enc_buffer_data_hex</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, duktape.o(i.duk__enc_buffer_data_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk__enc_buffer_data_hex &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_buffer_data
</UL>

<P><STRONG><a name="[31b]"></a>duk__enc_buffer_jx_jc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, duktape.o(i.duk__enc_buffer_jx_jc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4848<LI>Call Chain = duk__enc_buffer_jx_jc &rArr; duk__enc_buffer_data &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_buffer_data
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
</UL>

<P><STRONG><a name="[31c]"></a>duk__enc_bufobj</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, duktape.o(i.duk__enc_bufobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4848<LI>Call Chain = duk__enc_bufobj &rArr; duk__enc_buffer_data &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_buffer_data
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_stridx
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
</UL>

<P><STRONG><a name="[31d]"></a>duk__enc_double</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, duktape.o(i.duk__enc_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 4880<LI>Call Chain = duk__enc_double &rArr; duk__emit_stridx &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_stridx
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_hstring
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_signbit
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
</UL>

<P><STRONG><a name="[31f]"></a>duk__enc_key_autoquote</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, duktape.o(i.duk__enc_key_autoquote))
<BR><BR>[Stack]<UL><LI>Max Depth = 4928<LI>Call Chain = duk__enc_key_autoquote &rArr; duk__enc_quote_string &rArr; duk__emit_1 &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_quote_string
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_hstring
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_is_identifier_start
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_is_identifier_part
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_object
</UL>

<P><STRONG><a name="[315]"></a>duk__enc_newline_indent</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, duktape.o(i.duk__enc_newline_indent))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = duk__enc_newline_indent &rArr; duk__emit_1 &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_1
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_object
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_array
</UL>

<P><STRONG><a name="[314]"></a>duk__enc_objarr_entry</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, duktape.o(i.duk__enc_objarr_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = duk__enc_objarr_entry &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_stack
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_true
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_sprintf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_has_prop
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_top
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_object
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_array
</UL>

<P><STRONG><a name="[318]"></a>duk__enc_objarr_exit</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, duktape.o(i.duk__enc_objarr_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = duk__enc_objarr_exit &rArr; duk_del_prop &rArr; duk_hobject_delprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_sprintf
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_object
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_array
</UL>

<P><STRONG><a name="[322]"></a>duk__enc_object</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, duktape.o(i.duk__enc_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 4976 + In Cycle
<LI>Call Chain = duk__enc_object &rArr;  duk__enc_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__unemit_1
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_exit
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_entry
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_newline_indent
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_key_autoquote
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_2
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_1
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_enumerated_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
</UL>

<P><STRONG><a name="[325]"></a>duk__enc_pointer</STRONG> (Thumb, 78 bytes, Stack size 80 bytes, duktape.o(i.duk__enc_pointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = duk__enc_pointer &rArr; duk__emit_cstring &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_cstring
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
</UL>

<P><STRONG><a name="[320]"></a>duk__enc_quote_string</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, duktape.o(i.duk__enc_quote_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896<LI>Call Chain = duk__enc_quote_string &rArr; duk__emit_1 &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_esc_auto_fast
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_1
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_encode_xutf8
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_decode_xutf8
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_key_autoquote
</UL>

<P><STRONG><a name="[316]"></a>duk__enc_value</STRONG> (Thumb, 686 bytes, Stack size 40 bytes, duktape.o(i.duk__enc_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 5016<LI>Call Chain = duk__enc_value &rArr; duk__enc_object &rArr;  duk__enc_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_quote_string
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_pointer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_object
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_double
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_bufobj
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_buffer_jx_jc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_array
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_stridx
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_function
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_check_type_mask
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_method
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m1
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m4
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m2
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_object
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_array
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>

<P><STRONG><a name="[413]"></a>duk__encode_i32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, duktape.o(i.duk__encode_i32))
<BR><BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__insert_i32
</UL>

<P><STRONG><a name="[32c]"></a>duk__err_augment_builtin_create</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, duktape.o(i.duk__err_augment_builtin_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 3280<LI>Call Chain = duk__err_augment_builtin_create &rArr; duk__add_compiler_error_line &rArr; duk_put_prop_stridx_short_raw &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_traceback
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_compiler_error_line
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_augment_error_create
</UL>

<P><STRONG><a name="[32e]"></a>duk__err_augment_user</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, duktape.o(i.duk__err_augment_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = duk__err_augment_user &rArr; duk_insert &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pcall_method
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_find_existing_entry_tval_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_augment_error_throw
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_augment_error_create
</UL>

<P><STRONG><a name="[331]"></a>duk__error_getter_helper</STRONG> (Thumb, 810 bytes, Stack size 128 bytes, duktape.o(i.duk__error_getter_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = duk__error_getter_helper &rArr; duk_pop_2 &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_join
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_string
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_stack
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_sprintf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_3
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top_index
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_check_type
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m1
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_string_notsymbol
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_pc2line_query
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_string_notsymbol
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hstring_notsymbol
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_prototype_stack_getter
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_prototype_linenumber_getter
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_prototype_filename_getter
</UL>

<P><STRONG><a name="[33e]"></a>duk__error_setter_helper</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, duktape.o(i.duk__error_setter_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 3560<LI>Call Chain = duk__error_setter_helper &rArr; duk_def_prop &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_def_prop
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_prototype_stack_setter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_prototype_linenumber_setter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_prototype_filename_setter
</UL>

<P><STRONG><a name="[341]"></a>duk__executor_handle_call</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, duktape.o(i.duk__executor_handle_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = duk__executor_handle_call &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top_unsafe
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_call_unprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[152]"></a>duk__exp</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, duktape.o(i.duk__exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = duk__exp &rArr; exp &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[345]"></a>duk__expr</STRONG> (Thumb, 242 bytes, Stack size 72 bytes, duktape.o(i.duk__expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 6080<LI>Call Chain = duk__expr &rArr; duk__expr_nud &rArr;  duk__expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_plain_fromstack
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_lbp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__copy_ivalue
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__comp_recursion_increase
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__comp_recursion_decrease
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_stack
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_toregconst
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_toplain_ignore
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_toplain
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_toforcedreg
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[366]"></a>duk__expr_is_empty</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, duktape.o(i.duk__expr_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop
</UL>

<P><STRONG><a name="[349]"></a>duk__expr_lbp</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, duktape.o(i.duk__expr_lbp))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
</UL>

<P><STRONG><a name="[348]"></a>duk__expr_led</STRONG> (Thumb, 2294 bytes, Stack size 88 bytes, duktape.o(i.duk__expr_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 5192 + In Cycle
<LI>Call Chain = duk__expr_led &rArr;  duk__expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_jump_here
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_arguments
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_lhs
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_totempconst
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toreg
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_ignore
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toforcedreg
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_regconst
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ispec_toregconst_raw
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ispec_toforcedreg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hstring_is_eval_or_arguments_in_strict_mode
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_current_pc
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_toregconst
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_toplain
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_toforcedreg
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_op_only
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_jump_empty
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_if_true_skip
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_bc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_bc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_b_c
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_b
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__copy_ivalue
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__copy_ispec
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemps
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemp
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_expect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_copy
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
</UL>

<P><STRONG><a name="[347]"></a>duk__expr_nud</STRONG> (Thumb, 1884 bytes, Stack size 56 bytes, duktape.o(i.duk__expr_nud))
<BR><BR>[Stack]<UL><LI>Max Depth = 6008 + In Cycle
<LI>Call Chain = duk__expr_nud &rArr;  duk__expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_arguments
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_object_literal
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_array_literal
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_lhs
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_var_hstring
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toregconst_raw
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toforcedreg
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_regconst
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_plain_fromstack
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ispec_toregconst_raw
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hstring_is_eval_or_arguments_in_strict_mode
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getconst
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_toplain_ignore
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_toforcedreg
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_op_only
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_bc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_bc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_b_c
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemps
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemp
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_expect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_true
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_null
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_false
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_number
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_compile
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_equals_ascii_cstring
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
</UL>

<P><STRONG><a name="[354]"></a>duk__expr_toforcedreg</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, duktape.o(i.duk__expr_toforcedreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 5080 + In Cycle
<LI>Call Chain = duk__expr_toforcedreg &rArr;  duk__expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toforcedreg
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_arguments
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_object_literal
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_array_literal
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[34d]"></a>duk__expr_toplain</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, duktape.o(i.duk__expr_toplain))
<BR><BR>[Stack]<UL><LI>Max Depth = 5040 + In Cycle
<LI>Call Chain = duk__expr_toplain &rArr;  duk__expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[361]"></a>duk__expr_toplain_ignore</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, duktape.o(i.duk__expr_toplain_ignore))
<BR><BR>[Stack]<UL><LI>Max Depth = 5040 + In Cycle
<LI>Call Chain = duk__expr_toplain_ignore &rArr;  duk__expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_ignore
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
</UL>

<P><STRONG><a name="[358]"></a>duk__expr_toregconst</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, duktape.o(i.duk__expr_toregconst))
<BR><BR>[Stack]<UL><LI>Max Depth = 5072 + In Cycle
<LI>Call Chain = duk__expr_toregconst &rArr;  duk__expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toregconst
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[365]"></a>duk__exprtop</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, duktape.o(i.duk__exprtop))
<BR><BR>[Stack]<UL><LI>Max Depth = 6112<LI>Call Chain = duk__exprtop &rArr; duk__expr &rArr; duk__expr_nud &rArr;  duk__expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_is_empty
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_decl
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop_toregconst
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop_toreg
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop_toforcedreg
</UL>

<P><STRONG><a name="[367]"></a>duk__exprtop_toforcedreg</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, duktape.o(i.duk__exprtop_toforcedreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 6136<LI>Call Chain = duk__exprtop_toforcedreg &rArr; duk__exprtop &rArr; duk__expr &rArr; duk__expr_nud &rArr;  duk__expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toforcedreg
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_with_stmt
</UL>

<P><STRONG><a name="[368]"></a>duk__exprtop_toreg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, duktape.o(i.duk__exprtop_toreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 6128<LI>Call Chain = duk__exprtop_toreg &rArr; duk__exprtop &rArr; duk__expr &rArr; duk__expr_nud &rArr;  duk__expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toreg
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_throw_stmt
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
</UL>

<P><STRONG><a name="[369]"></a>duk__exprtop_toregconst</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, duktape.o(i.duk__exprtop_toregconst))
<BR><BR>[Stack]<UL><LI>Max Depth = 6128<LI>Call Chain = duk__exprtop_toregconst &rArr; duk__exprtop &rArr; duk__expr &rArr; duk__expr_nud &rArr;  duk__expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toregconst
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_while_stmt
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_switch_stmt
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_return_stmt
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_if_stmt
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_do_stmt
</UL>

<P><STRONG><a name="[14c]"></a>duk__fabs</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, duktape.o(i.duk__fabs))
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[204]"></a>duk__fill_lexer_buffer</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, duktape.o(i.duk__fill_lexer_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = duk__fill_lexer_buffer &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_lexer_window
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_bytes
</UL>

<P><STRONG><a name="[98]"></a>duk__finalize_helper</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, duktape.o(i.duk__finalize_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 4072<LI>Call Chain = duk__finalize_helper &rArr; duk_call &rArr; duk_handle_call_unprotected &rArr; duk__handle_call_raw &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk_heap_run_finalizer)
</UL>
<P><STRONG><a name="[36b]"></a>duk__finalize_refcounts</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, duktape.o(i.duk__finalize_refcounts))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = duk__finalize_refcounts &rArr; duk_heaphdr_refcount_finalize_norz &rArr; duk_hobject_refcount_finalize_norz &rArr; duk__decref_tvals_norz &rArr; duk_heaphdr_refzero_norz &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refcount_finalize_norz
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
</UL>

<P><STRONG><a name="[153]"></a>duk__floor</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, duktape.o(i.duk__floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = duk__floor &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>duk__fmax_fixed</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, duktape.o(i.duk__fmax_fixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk__fmax_fixed &rArr; duk_double_fmax
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_signbit
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_fmax
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk_bi_math_object_max)
</UL>
<P><STRONG><a name="[8f]"></a>duk__fmin_fixed</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, duktape.o(i.duk__fmin_fixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = duk__fmin_fixed &rArr; duk_double_fmin
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_fmin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk_bi_math_object_min)
</UL>
<P><STRONG><a name="[36f]"></a>duk__format_parts_iso8601</STRONG> (Thumb, 286 bytes, Stack size 88 bytes, duktape.o(i.duk__format_parts_iso8601))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = duk__format_parts_iso8601 &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_string_helper
</UL>

<P><STRONG><a name="[370]"></a>duk__free_allocated</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, duktape.o(i.duk__free_allocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = duk__free_allocated &rArr; duk_heap_free_heaphdr_raw &rArr; duk_free_hobject &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free_heaphdr_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free
</UL>

<P><STRONG><a name="[372]"></a>duk__free_finalize_list</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, duktape.o(i.duk__free_finalize_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = duk__free_finalize_list &rArr; duk_heap_free_heaphdr_raw &rArr; duk_free_hobject &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free_heaphdr_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free
</UL>

<P><STRONG><a name="[373]"></a>duk__free_run_finalizers</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, duktape.o(i.duk__free_run_finalizers))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = duk__free_run_finalizers &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_has_finalizer_fast_raw
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_run_finalizer
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free
</UL>

<P><STRONG><a name="[376]"></a>duk__free_stringtable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, duktape.o(i.duk__free_stringtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = duk__free_stringtable &rArr; duk_heap_strtable_free &rArr; duk_free_hstring &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_free
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free
</UL>

<P><STRONG><a name="[378]"></a>duk__get_buffer_helper</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, duktape.o(i.duk__get_buffer_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 4304<LI>Call Chain = duk__get_buffer_helper &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_require_type_index
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_buffer
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_buffer
</UL>

<P><STRONG><a name="[379]"></a>duk__get_bufobj_this</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk__get_bufobj_this))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = duk__get_bufobj_this &rArr; duk__getrequire_bufobj_this &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getrequire_bufobj_this
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_tostring
</UL>

<P><STRONG><a name="[302]"></a>duk__get_current_pc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, duktape.o(i.duk__get_current_pc))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_jump_here
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_with_stmt
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_while_stmt
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_switch_stmt
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_return_stmt
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_do_stmt
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_object_literal
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_array_literal
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_jump_empty
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_b_c
</UL>

<P><STRONG><a name="[1e7]"></a>duk__get_default_h_size</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, duktape.o(i.duk__get_default_h_size))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__grow_props_for_new_entry_item
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__abandon_array_checked
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_resize_entrypart
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_compact_props
</UL>

<P><STRONG><a name="[37b]"></a>duk__get_hobject_promote_mask_raw</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, duktape.o(i.duk__get_hobject_promote_mask_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 3104 + In Cycle
<LI>Call Chain = duk__get_hobject_promote_mask_raw &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type_mask
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hobject
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_require_type_index
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject_promote_mask
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject_accept_mask
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject_promote_mask
</UL>

<P><STRONG><a name="[2d8]"></a>duk__get_identifier_reference</STRONG> (Thumb, 436 bytes, Stack size 64 bytes, duktape.o(i.duk__get_identifier_reference))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + In Cycle
<LI>Call Chain = duk__get_identifier_reference &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getid_open_decl_env_regs
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getid_activation_regs
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop_raw
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_find_existing_entry_tval_ptr_and_attrs
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__putvar_helper
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getvar_helper
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__delvar_helper
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__declvar_helper
</UL>

<P><STRONG><a name="[458]"></a>duk__get_instr_ptr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, duktape.o(i.duk__get_instr_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_trycatch
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_jump
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_return_stmt
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_object_literal
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_array_literal
</UL>

<P><STRONG><a name="[39c]"></a>duk__get_min_grow_a</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, duktape.o(i.duk__get_min_grow_a))
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__grow_props_for_array_item
</UL>

<P><STRONG><a name="[1e6]"></a>duk__get_min_grow_e</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, duktape.o(i.duk__get_min_grow_e))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__grow_props_for_new_entry_item
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__abandon_array_checked
</UL>

<P><STRONG><a name="[382]"></a>duk__get_number_raw</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, duktape.o(i.duk__get_number_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = duk__get_number_raw &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_number
</UL>

<P><STRONG><a name="[383]"></a>duk__get_own_propdesc_raw</STRONG> (Thumb, 980 bytes, Stack size 64 bytes, duktape.o(i.duk__get_own_propdesc_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = duk__get_own_propdesc_raw &rArr; duk__check_arguments_map_for_get &rArr; duk_js_getvar_envrec &rArr; duk__getvar_helper &rArr;  duk_hobject_getprop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_arguments_map_for_get
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_substring
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_internal_value_string
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_find_existing_entry
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_push_validated_read
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_propdesc
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_own_propdesc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop_raw
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
</UL>

<P><STRONG><a name="[388]"></a>duk__get_part_helper</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, duktape.o(i.duk__get_part_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896<LI>Call Chain = duk__get_part_helper &rArr; duk__push_this_get_timeval &rArr; duk__push_this_get_timeval_tzoffset &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_nan
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_to_parts
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_get_shared
</UL>

<P><STRONG><a name="[38c]"></a>duk__get_propdesc</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, duktape.o(i.duk__get_propdesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = duk__get_propdesc &rArr;  duk__get_own_propdesc_raw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop_raw
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop
</UL>

<P><STRONG><a name="[38e]"></a>duk__get_symbol_type</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, duktape.o(i.duk__get_symbol_type))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_symbol_type_string
</UL>

<P><STRONG><a name="[38d]"></a>duk__get_symbol_type_string</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, duktape.o(i.duk__get_symbol_type_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk__get_symbol_type_string
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_symbol_type
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_string_tval_readable
</UL>

<P><STRONG><a name="[38f]"></a>duk__get_tagged_heaphdr_raw</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, duktape.o(i.duk__get_tagged_heaphdr_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = duk__get_tagged_heaphdr_raw &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hthread
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring_notsymbol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject_with_class
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hnatfunc
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hbuffer
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hstring_notsymbol
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hstring
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject_with_class
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hbuffer
</UL>

<P><STRONG><a name="[390]"></a>duk__get_textdecoder_context</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, duktape.o(i.duk__get_textdecoder_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 4344<LI>Call Chain = duk__get_textdecoder_context &rArr; duk_require_buffer &rArr; duk__get_buffer_helper &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_buffer
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_string
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textdecoder_prototype_shared_getter
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textdecoder_prototype_decode
</UL>

<P><STRONG><a name="[392]"></a>duk__get_this_regexp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, duktape.o(i.duk__get_this_regexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4296<LI>Call Chain = duk__get_this_regexp &rArr; duk_require_hobject_with_class &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject_with_class
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_test
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_exec
</UL>

<P><STRONG><a name="[35c]"></a>duk__getconst</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, duktape.o(i.duk__getconst))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = duk__getconst &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_equals_helper
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_lhs
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ispec_toregconst_raw
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
</UL>

<P><STRONG><a name="[37e]"></a>duk__getid_activation_regs</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, duktape.o(i.duk__getid_activation_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = duk__getid_activation_regs &rArr; duk_hobject_find_existing_entry_tval_ptr &rArr; duk_hobject_find_existing_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_find_existing_entry_tval_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_identifier_reference
</UL>

<P><STRONG><a name="[37f]"></a>duk__getid_open_decl_env_regs</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, duktape.o(i.duk__getid_open_decl_env_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = duk__getid_open_decl_env_regs &rArr; duk_hobject_find_existing_entry_tval_ptr &rArr; duk_hobject_find_existing_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_find_existing_entry_tval_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_identifier_reference
</UL>

<P><STRONG><a name="[395]"></a>duk__getprop_fastpath_bufobj_tval</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, duktape.o(i.duk__getprop_fastpath_bufobj_tval))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = duk__getprop_fastpath_bufobj_tval &rArr; duk_hbufobj_push_validated_read &rArr; duk_push_uint &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tval_number_to_arr_idx
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_push_validated_read
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
</UL>

<P><STRONG><a name="[397]"></a>duk__getprop_shallow_fastpath_array_tval</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, duktape.o(i.duk__getprop_shallow_fastpath_array_tval))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = duk__getprop_shallow_fastpath_array_tval &rArr; duk__tval_number_to_arr_idx &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tval_number_to_arr_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
</UL>

<P><STRONG><a name="[37a]"></a>duk__getrequire_bufobj_this</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, duktape.o(i.duk__getrequire_bufobj_this))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = duk__getrequire_bufobj_this &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_promote_this
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_borrowed_this_tval
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_this
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_bufobj_this
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_byteoffset_getter
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_bytelength_getter
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_buffer_getter
</UL>

<P><STRONG><a name="[39a]"></a>duk__getvar_helper</STRONG> (Thumb, 206 bytes, Stack size 80 bytes, duktape.o(i.duk__getvar_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + In Cycle
<LI>Call Chain = duk__getvar_helper &rArr;  duk_hobject_getprop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_identifier_reference
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_getvar_envrec
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_getvar_activation
</UL>

<P><STRONG><a name="[39b]"></a>duk__grow_props_for_array_item</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, duktape.o(i.duk__grow_props_for_array_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = duk__grow_props_for_array_item &rArr; duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_min_grow_a
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_realloc_props
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal_arridx
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal
</UL>

<P><STRONG><a name="[39d]"></a>duk__grow_props_for_new_entry_item</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, duktape.o(i.duk__grow_props_for_new_entry_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = duk__grow_props_for_new_entry_item &rArr; duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_min_grow_e
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_default_h_size
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__count_used_e_keys
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_realloc_props
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_alloc_entry_checked
</UL>

<P><STRONG><a name="[39e]"></a>duk__handle_bound_chain_for_call</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, duktape.o(i.duk__handle_bound_chain_for_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = duk__handle_bound_chain_for_call &rArr; duk_require_stack &rArr; duk_valstack_grow_check_throw &rArr; duk__valstack_grow &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_stack
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_reserve_gap
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_internal
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_copy_tvals_incref
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_target_func_and_this_binding
</UL>

<P><STRONG><a name="[3a2]"></a>duk__handle_break_or_continue</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, duktape.o(i.duk__handle_break_or_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = duk__handle_break_or_continue &rArr; duk__handle_finally &rArr; duk__set_catcher_regs_norz &rArr; duk_heaphdr_refzero_norz &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_label
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_finally
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_catcher_unwind_norz
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_endfin
</UL>

<P><STRONG><a name="[3a5]"></a>duk__handle_call_raw</STRONG> (Thumb, 1034 bytes, Stack size 112 bytes, duktape.o(i.duk__handle_call_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 4016 + In Cycle
<LI>Call Chain = duk__handle_call_raw &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_target_func_and_this_binding
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_target_fastpath_check
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_thread_state_update
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_setup_act_not_tailcall
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_setup_act_attempt_tailcall
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_env_setup
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_c_recursion_limit_check
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_valstack_grow_check_throw
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top_unsafe
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top_and_wipe
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_refzero_check_fast
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_execute_bytecode
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_sync_and_null_currpc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_activation_unwind_norz
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_error_throw_from_negative_rc
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_construct_postprocess
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_call_unprotected
</UL>

<P><STRONG><a name="[3b0]"></a>duk__handle_catch</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, duktape.o(i.duk__handle_catch))
<BR><BR>[Stack]<UL><LI>Max Depth = 2992<LI>Call Chain = duk__handle_catch &rArr; duk_xdef_prop &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_catcher_regs_norz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__reconfig_valstack_ecma_catcher
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_init_activation_environment_records_delayed
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hdecenv_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_longjmp
</UL>

<P><STRONG><a name="[251]"></a>duk__handle_createargs_for_call</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, duktape.o(i.duk__handle_createargs_for_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 3656<LI>Call Chain = duk__handle_createargs_for_call &rArr; duk__create_arguments_object &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_env_setup
</UL>

<P><STRONG><a name="[3b5]"></a>duk__handle_executor_error</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, duktape.o(i.duk__handle_executor_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 3104<LI>Call Chain = duk__handle_executor_error &rArr; duk__handle_longjmp &rArr; duk_hthread_terminate &rArr; duk_hthread_activation_unwind_norz &rArr; duk__activation_unwind_nofree_norz &rArr; duk_js_close_environment_record &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_longjmp
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_refzero_check_slow
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_execute_bytecode
</UL>

<P><STRONG><a name="[3a3]"></a>duk__handle_finally</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, duktape.o(i.duk__handle_finally))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = duk__handle_finally &rArr; duk__set_catcher_regs_norz &rArr; duk_heaphdr_refzero_norz &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_catcher_regs_norz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__reconfig_valstack_ecma_catcher
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_return
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_longjmp
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_break_or_continue
</UL>

<P><STRONG><a name="[3a4]"></a>duk__handle_label</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, duktape.o(i.duk__handle_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = duk__handle_label
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_break_or_continue
</UL>

<P><STRONG><a name="[3b6]"></a>duk__handle_longjmp</STRONG> (Thumb, 1258 bytes, Stack size 56 bytes, duktape.o(i.duk__handle_longjmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 3080<LI>Call Chain = duk__handle_longjmp &rArr; duk_hthread_terminate &rArr; duk_hthread_activation_unwind_norz &rArr; duk__activation_unwind_nofree_norz &rArr; duk_js_close_environment_record &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__reconfig_valstack_ecma_return
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_yield
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_finally
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_catch
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_terminate
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_catcher_unwind_norz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_activation_unwind_norz
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refzero_norz
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_call_unprotected_nargs
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_executor_error
</UL>

<P><STRONG><a name="[252]"></a>duk__handle_oldenv_for_call</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, duktape.o(i.duk__handle_oldenv_for_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = duk__handle_oldenv_for_call
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_env_setup
</UL>

<P><STRONG><a name="[3bd]"></a>duk__handle_op_endcatch</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, duktape.o(i.duk__handle_op_endcatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = duk__handle_op_endcatch &rArr; duk_hthread_catcher_unwind_norz &rArr; duk_hobject_refzero_norz &rArr; duk__hobject_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_catcher_unwind_norz
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refzero
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[3be]"></a>duk__handle_op_endfin</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, duktape.o(i.duk__handle_op_endfin))
<BR><BR>[Stack]<UL><LI>Max Depth = 3440<LI>Call Chain = duk__handle_op_endfin &rArr; duk__handle_return &rArr; duk_call_construct_postprocess &rArr; duk_err_augment_error_create &rArr; duk__err_augment_builtin_create &rArr; duk__add_compiler_error_line &rArr; duk_put_prop_stridx_short_raw &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_return
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_break_or_continue
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_catcher_unwind_norz
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_setup_ljstate1
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[3c1]"></a>duk__handle_op_endtry</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, duktape.o(i.duk__handle_op_endtry))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = duk__handle_op_endtry &rArr; duk_hthread_catcher_unwind_norz &rArr; duk_hobject_refzero_norz &rArr; duk__hobject_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_catcher_unwind_norz
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[3c2]"></a>duk__handle_op_initenum</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, duktape.o(i.duk__handle_op_initenum))
<BR><BR>[Stack]<UL><LI>Max Depth = 3384<LI>Call Chain = duk__handle_op_initenum &rArr; duk_hobject_enumerator_create &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_null
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type_mask
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[3c4]"></a>duk__handle_op_initset_initget</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, duktape.o(i.duk__handle_op_initset_initget))
<BR><BR>[Stack]<UL><LI>Max Depth = 3568<LI>Call Chain = duk__handle_op_initset_initget &rArr; duk_def_prop &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_def_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[3c5]"></a>duk__handle_op_nextenum</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, duktape.o(i.duk__handle_op_nextenum))
<BR><BR>[Stack]<UL><LI>Max Depth = 3304<LI>Call Chain = duk__handle_op_nextenum &rArr; duk_hobject_enumerator_next &rArr; duk_put_prop_stridx_short_raw &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_object
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_next
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[3c8]"></a>duk__handle_op_trycatch</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, duktape.o(i.duk__handle_op_trycatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 3128<LI>Call Chain = duk__handle_op_trycatch &rArr; duk_to_hobject &rArr; duk_to_object &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_undefined
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hobject
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_init_activation_environment_records_delayed
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_catcher_alloc
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobjenv_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[3cc]"></a>duk__handle_proxy_for_call</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, duktape.o(i.duk__handle_proxy_for_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 3176 + In Cycle
<LI>Call Chain = duk__handle_proxy_for_call &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__update_default_instance_proto
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pack
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_target_func_and_this_binding
</UL>

<P><STRONG><a name="[3d0]"></a>duk__handle_put_array_length</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, duktape.o(i.duk__handle_put_array_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 2896<LI>Call Chain = duk__handle_put_array_length &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_new_array_length_checked
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_put_array_length_smaller
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
</UL>

<P><STRONG><a name="[3d2]"></a>duk__handle_put_array_length_smaller</STRONG> (Thumb, 500 bytes, Stack size 80 bytes, duktape.o(i.duk__handle_put_array_length_smaller))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = duk__handle_put_array_length_smaller &rArr; duk_hobject_delprop_raw &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop_raw
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_put_array_length
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
</UL>

<P><STRONG><a name="[3bf]"></a>duk__handle_return</STRONG> (Thumb, 494 bytes, Stack size 56 bytes, duktape.o(i.duk__handle_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 3392<LI>Call Chain = duk__handle_return &rArr; duk_call_construct_postprocess &rArr; duk_err_augment_error_create &rArr; duk__err_augment_builtin_create &rArr; duk__add_compiler_error_line &rArr; duk_put_prop_stridx_short_raw &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__reconfig_valstack_ecma_return
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_yield
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_finally
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_terminate
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_catcher_unwind_norz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_activation_unwind_norz
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refzero
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_construct_postprocess
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_endfin
</UL>

<P><STRONG><a name="[3d3]"></a>duk__handle_safe_call_error</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, duktape.o(i.duk__handle_safe_call_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 4968<LI>Call Chain = duk__handle_safe_call_error &rArr; duk__safe_call_adjust_valstack &rArr; duk_set_top_unsafe &rArr; duk_refzero_check_fast &rArr; duk_heap_process_finalize_list &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__safe_call_adjust_valstack
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_activation_unwind_norz
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero_norz
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_safe_call
</UL>

<P><STRONG><a name="[3d5]"></a>duk__handle_safe_call_inner</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, duktape.o(i.duk__handle_safe_call_inner))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960<LI>Call Chain = duk__handle_safe_call_inner &rArr; duk__safe_call_adjust_valstack &rArr; duk_set_top_unsafe &rArr; duk_refzero_check_fast &rArr; duk_heap_process_finalize_list &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__safe_call_adjust_valstack
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_thread_state_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_c_recursion_limit_check
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_error_throw_from_negative_rc
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_safe_call
</UL>

<P><STRONG><a name="[577]"></a>duk__handle_safe_call_shared_unwind</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, duktape.o(i.duk__handle_safe_call_shared_unwind))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk__handle_safe_call_shared_unwind
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_safe_call
</UL>

<P><STRONG><a name="[3d6]"></a>duk__handle_specialfuncs_for_call</STRONG> (Thumb, 452 bytes, Stack size 40 bytes, duktape.o(i.duk__handle_specialfuncs_for_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 3192 + In Cycle
<LI>Call Chain = duk__handle_specialfuncs_for_call &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_strict_equals
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_function
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_constructable
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unpack_array_like
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top_unsafe
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_unsafe
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_n_unsafe
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_target_func_and_this_binding
</UL>

<P><STRONG><a name="[3dc]"></a>duk__handle_temproot</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, duktape.o(i.duk__handle_temproot))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = duk__handle_temproot &rArr; duk__mark_heaphdr_nonnull &rArr; duk__mark_heaphdr &rArr; duk__mark_hobject &rArr;  duk__mark_heaphdr_nonnull (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_heaphdr_nonnull
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_temproots_by_heap_scan
</UL>

<P><STRONG><a name="[3bb]"></a>duk__handle_yield</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, duktape.o(i.duk__handle_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = duk__handle_yield &rArr; duk_heaphdr_refzero &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__reconfig_valstack_ecma_return
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_return
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_longjmp
</UL>

<P><STRONG><a name="[3de]"></a>duk__hbuffer_refzero_helper</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, duktape.o(i.duk__hbuffer_refzero_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = duk__hbuffer_refzero_helper &rArr; duk__refcount_refzero_hbuffer &rArr; duk_free_hbuffer &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_refzero_hbuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_refzero
</UL>

<P><STRONG><a name="[3e0]"></a>duk__hbufobj_fixed_from_argvalue</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, duktape.o(i.duk__hbufobj_fixed_from_argvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = duk__hbufobj_fixed_from_argvalue &rArr; duk_to_int_clamped &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint32
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_buffer_raw
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring_notsymbol
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hbuffer
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_zero
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_nozero
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hbuffer
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_uint8array_allocplain
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_constructor
</UL>

<P><STRONG><a name="[399]"></a>duk__hbufobj_promote_this</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, duktape.o(i.duk__hbufobj_promote_this))
<BR><BR>[Stack]<UL><LI>Max Depth = 3112<LI>Call Chain = duk__hbufobj_promote_this &rArr; duk_to_hobject &rArr; duk_to_object &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hobject
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_borrowed_this_tval
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getrequire_bufobj_this
</UL>

<P><STRONG><a name="[3e5]"></a>duk__heap_free_activation_freelist</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, duktape.o(i.duk__heap_free_activation_freelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk__heap_free_activation_freelist &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free_freelists
</UL>

<P><STRONG><a name="[3e7]"></a>duk__heap_free_catcher_freelist</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, duktape.o(i.duk__heap_free_catcher_freelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk__heap_free_catcher_freelist &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free_freelists
</UL>

<P><STRONG><a name="[3e8]"></a>duk__heaphdr_refzero_helper</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, duktape.o(i.duk__heaphdr_refzero_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_refzero_hstring
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_refzero_hobject
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_refzero_hbuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero_norz
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>

<P><STRONG><a name="[3eb]"></a>duk__hexval</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, duktape.o(i.duk__hexval))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk__hexval
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hexval_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_re_token
</UL>

<P><STRONG><a name="[3ec]"></a>duk__hexval_validate</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, duktape.o(i.duk__hexval_validate))
<BR><BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_parse_escape
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hexval
</UL>

<P><STRONG><a name="[3ed]"></a>duk__hobject_alloc_entry_checked</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, duktape.o(i.duk__hobject_alloc_entry_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = duk__hobject_alloc_entry_checked &rArr; duk__grow_props_for_new_entry_item &rArr; duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__grow_props_for_new_entry_item
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
</UL>

<P><STRONG><a name="[3ee]"></a>duk__hobject_alloc_init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, duktape.o(i.duk__hobject_alloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_object_parts
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc_checked_zeroed
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hproxy_alloc
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobjenv_alloc
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_alloc
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hnatfunc_alloc
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hdecenv_alloc
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hcompfunc_alloc
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_alloc
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_harray_alloc
</UL>

<P><STRONG><a name="[3f1]"></a>duk__hobject_pc2line_query_raw</STRONG> (Thumb, 258 bytes, Stack size 72 bytes, duktape.o(i.duk__hobject_pc2line_query_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = duk__hobject_pc2line_query_raw &rArr; duk_bd_decode_flag &rArr; duk_bd_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode_flag
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_pc2line_query
</UL>

<P><STRONG><a name="[3f4]"></a>duk__hobject_refzero_helper</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, duktape.o(i.duk__hobject_refzero_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = duk__hobject_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_refzero_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refzero_norz
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refzero
</UL>

<P><STRONG><a name="[3f5]"></a>duk__hstring_get_charlen_slowpath</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, duktape.o(i.duk__hstring_get_charlen_slowpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk__hstring_get_charlen_slowpath &rArr; duk_unicode_unvalidated_utf8_length
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_unvalidated_utf8_length
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
</UL>

<P><STRONG><a name="[408]"></a>duk__hstring_is_eval_or_arguments</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, duktape.o(i.duk__hstring_is_eval_or_arguments))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
</UL>

<P><STRONG><a name="[357]"></a>duk__hstring_is_eval_or_arguments_in_strict_mode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, duktape.o(i.duk__hstring_is_eval_or_arguments_in_strict_mode))
<BR><BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_decl
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[3f7]"></a>duk__hstring_refzero_helper</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, duktape.o(i.duk__hstring_refzero_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = duk__hstring_refzero_helper &rArr; duk__refcount_refzero_hstring &rArr; duk_free_hstring &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_refzero_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_refzero
</UL>

<P><STRONG><a name="[4ca]"></a>duk__hstring_sort_key</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, duktape.o(i.duk__hstring_sort_key))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__sort_enum_keys_es6
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__sort_compare_es6
</UL>

<P><STRONG><a name="[3f8]"></a>duk__hthread_activation_alloc_slow</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, duktape.o(i.duk__hthread_activation_alloc_slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = duk__hthread_activation_alloc_slow &rArr; duk_heap_mem_alloc_checked &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc_checked
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_activation_alloc
</UL>

<P><STRONG><a name="[3fa]"></a>duk__hthread_catcher_alloc_slow</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, duktape.o(i.duk__hthread_catcher_alloc_slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = duk__hthread_catcher_alloc_slow &rArr; duk_heap_mem_alloc_checked &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc_checked
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_catcher_alloc
</UL>

<P><STRONG><a name="[5a1]"></a>duk__inc_data_inner_refcounts</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, duktape.o(i.duk__inc_data_inner_refcounts))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = duk__inc_data_inner_refcounts
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
</UL>

<P><STRONG><a name="[3fb]"></a>duk__init_func_valstack_slots</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, duktape.o(i.duk__init_func_valstack_slots))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = duk__init_func_valstack_slots &rArr; duk_require_stack &rArr; duk_valstack_grow_check_throw &rArr; duk__valstack_grow &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_stack
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_raw
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_bare_object
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_array
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hbuffer
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_init_pushbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_compile_raw
</UL>

<P><STRONG><a name="[3fe]"></a>duk__init_heap_strings</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, duktape.o(i.duk__init_heap_strings))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = duk__init_heap_strings &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode_bitpacked_string
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_intern
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_alloc
</UL>

<P><STRONG><a name="[401]"></a>duk__init_heap_thread</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, duktape.o(i.duk__init_heap_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 4392<LI>Call Chain = duk__init_heap_thread &rArr; duk_hthread_create_builtin_objects &rArr; duk_set_magic &rArr; duk_require_hnatfunc &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_init_stacks
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_alloc_unchecked
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_alloc
</UL>

<P><STRONG><a name="[405]"></a>duk__init_lexer_window</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, duktape.o(i.duk__init_lexer_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 4792<LI>Call Chain = duk__init_lexer_window &rArr; duk__fill_lexer_buffer &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__fill_lexer_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_setpoint
</UL>

<P><STRONG><a name="[3f0]"></a>duk__init_object_parts</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, duktape.o(i.duk__init_object_parts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk__init_object_parts
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_insert_into_heap_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_alloc_init
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_alloc_unchecked
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_alloc_unchecked
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hboundfunc_alloc
</UL>

<P><STRONG><a name="[407]"></a>duk__init_varmap_and_prologue_for_pass2</STRONG> (Thumb, 884 bytes, Stack size 64 bytes, duktape.o(i.duk__init_varmap_and_prologue_for_pass2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960<LI>Call Chain = duk__init_varmap_and_prologue_for_pass2 &rArr; duk__emit_a_b_c &rArr; duk__emit_abc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__settemp_checkmax
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hstring_is_eval_or_arguments
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getconst
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_bc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_b_c
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemps
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemp
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_null
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_has_prop
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_top
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_has_prop_stridx
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
</UL>

<P><STRONG><a name="[40b]"></a>duk__initbuffer</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, duktape.o(i.duk__initbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = duk__initbuffer &rArr; duk_hbuffer_resize &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_resize
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
</UL>

<P><STRONG><a name="[40d]"></a>duk__inp_backtrack</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, duktape.o(i.duk__inp_backtrack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = duk__inp_backtrack &rArr; duk__utf8_backtrack &rArr; duk_err_error_internal &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__utf8_backtrack
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__match_regexp
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__inp_get_prev_cp
</UL>

<P><STRONG><a name="[40f]"></a>duk__inp_get_cp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, duktape.o(i.duk__inp_get_cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = duk__inp_get_cp &rArr; duk_unicode_re_canonicalize_char &rArr; duk__case_transform_helper &rArr; duk__slow_case_conversion &rArr; duk_unicode_encode_xutf8
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_re_canonicalize_char
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_decode_xutf8_checked
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__match_regexp
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__inp_get_prev_cp
</UL>

<P><STRONG><a name="[411]"></a>duk__inp_get_prev_cp</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, duktape.o(i.duk__inp_get_prev_cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = duk__inp_get_prev_cp &rArr; duk__inp_get_cp &rArr; duk_unicode_re_canonicalize_char &rArr; duk__case_transform_helper &rArr; duk__slow_case_conversion &rArr; duk_unicode_encode_xutf8
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__inp_get_cp
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__inp_backtrack
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__match_regexp
</UL>

<P><STRONG><a name="[412]"></a>duk__insert_i32</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, duktape.o(i.duk__insert_i32))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896<LI>Call Chain = duk__insert_i32 &rArr; duk__insert_u32 &rArr; duk_bw_insert_ensure_bytes &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__insert_u32
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__encode_i32
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__insert_jump_offset
</UL>

<P><STRONG><a name="[415]"></a>duk__insert_jump_entry</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, duktape.o(i.duk__insert_jump_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 4856<LI>Call Chain = duk__insert_jump_entry &rArr; duk_bw_insert_ensure_area &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_insert_ensure_area
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
</UL>

<P><STRONG><a name="[215]"></a>duk__insert_jump_offset</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, duktape.o(i.duk__insert_jump_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = duk__insert_jump_offset &rArr; duk__insert_i32 &rArr; duk__insert_u32 &rArr; duk_bw_insert_ensure_bytes &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__insert_i32
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_disjunction
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_jump_offset
</UL>

<P><STRONG><a name="[417]"></a>duk__insert_slice</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, duktape.o(i.duk__insert_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = duk__insert_slice &rArr; duk_bw_insert_ensure_slice &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_insert_ensure_slice
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_disjunction
</UL>

<P><STRONG><a name="[414]"></a>duk__insert_u32</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, duktape.o(i.duk__insert_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 4872<LI>Call Chain = duk__insert_u32 &rArr; duk_bw_insert_ensure_bytes &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_encode_xutf8
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_insert_ensure_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_disjunction
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__insert_i32
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_compile
</UL>

<P><STRONG><a name="[41a]"></a>duk__inspect_multiple_uint</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, duktape.o(i.duk__inspect_multiple_uint))
<BR><BR>[Stack]<UL><LI>Max Depth = 3256<LI>Call Chain = duk__inspect_multiple_uint &rArr; duk_put_prop &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_inspect_value
</UL>

<P><STRONG><a name="[41b]"></a>duk__internbuffer</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, duktape.o(i.duk__internbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = duk__internbuffer &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
</UL>

<P><STRONG><a name="[5a7]"></a>duk__is_hex_digit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, duktape.o(i.duk__is_hex_digit))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
</UL>

<P><STRONG><a name="[34f]"></a>duk__ispec_toforcedreg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, duktape.o(i.duk__ispec_toforcedreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4936<LI>Call Chain = duk__ispec_toforcedreg &rArr; duk__ispec_toregconst_raw &rArr; duk__emit_bc &rArr; duk__emit_a_bc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ispec_toregconst_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[350]"></a>duk__ispec_toregconst_raw</STRONG> (Thumb, 562 bytes, Stack size 48 bytes, duktape.o(i.duk__ispec_toregconst_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920<LI>Call Chain = duk__ispec_toregconst_raw &rArr; duk__emit_bc &rArr; duk__emit_a_bc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getconst
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_load_int32
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_bc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_bc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemp
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_whole_get_int32_nonegzero
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toregconst_raw
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ispec_toforcedreg
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[346]"></a>duk__ivalue_plain_fromstack</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, duktape.o(i.duk__ivalue_plain_fromstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = duk__ivalue_plain_fromstack &rArr; duk_replace &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__objlit_load_key
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
</UL>

<P><STRONG><a name="[353]"></a>duk__ivalue_regconst</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, duktape.o(i.duk__ivalue_regconst))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_object_literal
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_array_literal
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toregconst_raw
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[351]"></a>duk__ivalue_toforcedreg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, duktape.o(i.duk__ivalue_toforcedreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 5056<LI>Call Chain = duk__ivalue_toforcedreg &rArr; duk__ivalue_toregconst_raw &rArr; duk__ivalue_toplain_raw &rArr; duk__ispec_toregconst_raw &rArr; duk__emit_bc &rArr; duk__emit_a_bc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toregconst_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_decl
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__objlit_load_key
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_object_literal
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop_toforcedreg
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_toforcedreg
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[34b]"></a>duk__ivalue_toplain</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, duktape.o(i.duk__ivalue_toplain))
<BR><BR>[Stack]<UL><LI>Max Depth = 5024<LI>Call Chain = duk__ivalue_toplain &rArr; duk__ivalue_toplain_raw &rArr; duk__ispec_toregconst_raw &rArr; duk__emit_bc &rArr; duk__emit_a_bc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_toplain
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[356]"></a>duk__ivalue_toplain_ignore</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, duktape.o(i.duk__ivalue_toplain_ignore))
<BR><BR>[Stack]<UL><LI>Max Depth = 5024<LI>Call Chain = duk__ivalue_toplain_ignore &rArr; duk__ivalue_toplain_raw &rArr; duk__ispec_toregconst_raw &rArr; duk__emit_bc &rArr; duk__emit_a_bc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_toplain_ignore
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[41d]"></a>duk__ivalue_toplain_raw</STRONG> (Thumb, 778 bytes, Stack size 88 bytes, duktape.o(i.duk__ivalue_toplain_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 5008<LI>Call Chain = duk__ivalue_toplain_raw &rArr; duk__ispec_toregconst_raw &rArr; duk__emit_bc &rArr; duk__emit_a_bc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_lhs
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_regconst
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ispec_toregconst_raw
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_bc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_b_c
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemp
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_arith_pow
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toregconst_raw
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_ignore
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain
</UL>

<P><STRONG><a name="[359]"></a>duk__ivalue_toreg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, duktape.o(i.duk__ivalue_toreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 5056<LI>Call Chain = duk__ivalue_toreg &rArr; duk__ivalue_toregconst_raw &rArr; duk__ivalue_toplain_raw &rArr; duk__ispec_toregconst_raw &rArr; duk__emit_bc &rArr; duk__emit_a_bc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toregconst_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_decl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop_toreg
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[364]"></a>duk__ivalue_toregconst</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, duktape.o(i.duk__ivalue_toregconst))
<BR><BR>[Stack]<UL><LI>Max Depth = 5056<LI>Call Chain = duk__ivalue_toregconst &rArr; duk__ivalue_toregconst_raw &rArr; duk__ivalue_toplain_raw &rArr; duk__ispec_toregconst_raw &rArr; duk__emit_bc &rArr; duk__emit_a_bc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toregconst_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop_toregconst
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_toregconst
</UL>

<P><STRONG><a name="[363]"></a>duk__ivalue_toregconst_raw</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, duktape.o(i.duk__ivalue_toregconst_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 5040<LI>Call Chain = duk__ivalue_toregconst_raw &rArr; duk__ivalue_toplain_raw &rArr; duk__ispec_toregconst_raw &rArr; duk__emit_bc &rArr; duk__emit_a_bc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_regconst
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ispec_toregconst_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_totempconst
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toregconst
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toreg
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toforcedreg
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
</UL>

<P><STRONG><a name="[34c]"></a>duk__ivalue_totempconst</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, duktape.o(i.duk__ivalue_totempconst))
<BR><BR>[Stack]<UL><LI>Max Depth = 5056<LI>Call Chain = duk__ivalue_totempconst &rArr; duk__ivalue_toregconst_raw &rArr; duk__ivalue_toplain_raw &rArr; duk__ispec_toregconst_raw &rArr; duk__emit_bc &rArr; duk__emit_a_bc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toregconst_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[41e]"></a>duk__ivalue_var_fromstack</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, duktape.o(i.duk__ivalue_var_fromstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = duk__ivalue_var_fromstack &rArr; duk_replace &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_var_hstring
</UL>

<P><STRONG><a name="[35a]"></a>duk__ivalue_var_hstring</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, duktape.o(i.duk__ivalue_var_hstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = duk__ivalue_var_hstring &rArr; duk__ivalue_var_fromstack &rArr; duk_replace &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_var_fromstack
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_object_literal
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
</UL>

<P><STRONG><a name="[9e]"></a>duk__js_compile_raw</STRONG> (Thumb, 422 bytes, Stack size 56 bytes, duktape.o(i.duk__js_compile_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 6504<LI>Call Chain = duk__js_compile_raw &rArr; duk__parse_func_like_raw &rArr; duk__parse_func_body &rArr; duk__parse_stmts &rArr; duk__parse_stmt &rArr;  duk__parse_stmts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_raw
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_func_valstack_slots
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__convert_to_func_template
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_expect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_stack
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_raw
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_setpoint
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hbuffer
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk_js_compile)
</UL>
<P><STRONG><a name="[422]"></a>duk__js_equals_number</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, duktape.o(i.duk__js_equals_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk__js_equals_number
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_equals_helper
</UL>

<P><STRONG><a name="[423]"></a>duk__js_execute_bytecode_inner</STRONG> (Thumb, 19938 bytes, Stack size 96 bytes, duktape.o(i.duk__js_execute_bytecode_inner))
<BR><BR>[Stack]<UL><LI>Max Depth = 3712 + In Cycle
<LI>Call Chain = duk__js_execute_bytecode_inner &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_logical_not
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_bitwise_not
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_bitwise_binary_op
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_unary_op
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_binary_op
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_add
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prepost_incdec_var_helper
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prepost_incdec_reg_helper
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_return
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_trycatch
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_nextenum
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_initset_initget
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_initenum
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_endtry
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_endfin
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_endcatch
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_break_or_continue
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__executor_handle_call
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_length
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_array
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_def_prop
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_index
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m1
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top_unsafe
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_create_instance
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2_unsafe
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_typeof_stridx
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_toboolean
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_putvar_activation
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_instanceof
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_init_activation_environment_records_delayed
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_in
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_getvar_activation
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_equals_helper
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_delvar_activation
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_declvar_activation
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_compare_helper
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_callable_tval
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_catcher_unwind_nolexenv_norz
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_catcher_alloc
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_resize_entrypart
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_realloc_props
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_setup_ljstate1
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_longjmp
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error_fmt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_augment_error_throw
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_setup_propcall_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_execute_bytecode
</UL>

<P><STRONG><a name="[43e]"></a>duk__js_samevalue_number</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, duktape.o(i.duk__js_samevalue_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = duk__js_samevalue_number &rArr; duk_double_same_sign
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_same_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_equals_helper
</UL>

<P><STRONG><a name="[594]"></a>duk__key_is_plain_buf_ownprop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, duktape.o(i.duk__key_is_plain_buf_ownprop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = duk__key_is_plain_buf_ownprop
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop
</UL>

<P><STRONG><a name="[5a6]"></a>duk__known_heaphdr</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, duktape.o(i.duk__known_heaphdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = duk__known_heaphdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hnatfunc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hbuffer
</UL>

<P><STRONG><a name="[440]"></a>duk__lexer_parse_escape</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, duktape.o(i.duk__lexer_parse_escape))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = duk__lexer_parse_escape &rArr; duk__advance_chars &rArr; duk__advance_bytes &rArr; duk__fill_lexer_buffer &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hexval_validate
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_chars
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_parse_string_literal
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_re_token
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_re_ranges
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
</UL>

<P><STRONG><a name="[443]"></a>duk__lexer_parse_legacy_octal</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, duktape.o(i.duk__lexer_parse_legacy_octal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = duk__lexer_parse_legacy_octal
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_parse_string_literal
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_re_ranges
</UL>

<P><STRONG><a name="[441]"></a>duk__lexer_parse_string_literal</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, duktape.o(i.duk__lexer_parse_string_literal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = duk__lexer_parse_string_literal &rArr; duk__lexer_parse_escape &rArr; duk__advance_chars &rArr; duk__advance_bytes &rArr; duk__fill_lexer_buffer &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_parse_legacy_octal
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_parse_escape
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__appendbuffer_ascii
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__appendbuffer
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_chars
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_is_line_terminator
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
</UL>

<P><STRONG><a name="[444]"></a>duk__lexer_skip_to_endofline</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, duktape.o(i.duk__lexer_skip_to_endofline))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = duk__lexer_skip_to_endofline &rArr; duk__advance_chars &rArr; duk__advance_bytes &rArr; duk__fill_lexer_buffer &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_chars
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_is_line_terminator
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
</UL>

<P><STRONG><a name="[154]"></a>duk__log</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, duktape.o(i.duk__log))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = duk__log &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>duk__log10</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, duktape.o(i.duk__log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = duk__log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>duk__log2</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, duktape.o(i.duk__log2))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = duk__log2 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[446]"></a>duk__lookup_active_label</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, duktape.o(i.duk__lookup_active_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 4792<LI>Call Chain = duk__lookup_active_label &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_break_or_continue_stmt
</UL>

<P><STRONG><a name="[447]"></a>duk__lookup_active_register_binding</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, duktape.o(i.duk__lookup_active_register_binding))
<BR><BR>[Stack]<UL><LI>Max Depth = 4328<LI>Call Chain = duk__lookup_active_register_binding &rArr; duk_to_int &rArr; duk__api_coerce_d2i &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_number
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_lhs
</UL>

<P><STRONG><a name="[26a]"></a>duk__lookup_arguments_map</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, duktape.o(i.duk__lookup_arguments_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = duk__lookup_arguments_map &rArr; duk_pop_unsafe &rArr; duk__pop_unsafe_raw &rArr; duk_heaphdr_refzero &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_own_propdesc
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_arguments_map_for_put
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_arguments_map_for_get
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
</UL>

<P><STRONG><a name="[34e]"></a>duk__lookup_lhs</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, duktape.o(i.duk__lookup_lhs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = duk__lookup_lhs &rArr; duk__getconst &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_active_register_binding
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getconst
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_top
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_decl
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[448]"></a>duk__make_day</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, duktape.o(i.duk__make_day))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = duk__make_day &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__day_from_year
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isfinite
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_year_in_valid_range
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_timeval_from_dparts
</UL>

<P><STRONG><a name="[44c]"></a>duk__mark_finalizable</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, duktape.o(i.duk__mark_finalizable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = duk__mark_finalizable &rArr; duk__mark_heaphdr_nonnull &rArr; duk__mark_heaphdr &rArr; duk__mark_hobject &rArr;  duk__mark_heaphdr_nonnull (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_heaphdr_nonnull
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_has_finalizer_fast_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
</UL>

<P><STRONG><a name="[44d]"></a>duk__mark_finalize_list</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, duktape.o(i.duk__mark_finalize_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = duk__mark_finalize_list &rArr; duk__mark_heaphdr_nonnull &rArr; duk__mark_heaphdr &rArr; duk__mark_hobject &rArr;  duk__mark_heaphdr_nonnull (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_heaphdr_nonnull
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
</UL>

<P><STRONG><a name="[44e]"></a>duk__mark_heaphdr</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, duktape.o(i.duk__mark_heaphdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = duk__mark_heaphdr &rArr; duk__mark_hobject &rArr;  duk__mark_heaphdr_nonnull (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_hstring
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_roots_heap
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_hobject
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_heaphdr_nonnull
</UL>

<P><STRONG><a name="[3dd]"></a>duk__mark_heaphdr_nonnull</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, duktape.o(i.duk__mark_heaphdr_nonnull))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = duk__mark_heaphdr_nonnull &rArr; duk__mark_heaphdr &rArr; duk__mark_hobject &rArr;  duk__mark_heaphdr_nonnull (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_heaphdr
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_tvals
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_tval
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_hobject
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_finalize_list
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_finalizable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_temproot
</UL>

<P><STRONG><a name="[450]"></a>duk__mark_hobject</STRONG> (Thumb, 718 bytes, Stack size 40 bytes, duktape.o(i.duk__mark_hobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = duk__mark_hobject &rArr;  duk__mark_heaphdr_nonnull (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_tvals
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_tval
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_heaphdr_nonnull
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_heaphdr
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_heaphdr
</UL>

<P><STRONG><a name="[44f]"></a>duk__mark_hstring</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, duktape.o(i.duk__mark_hstring))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_heaphdr
</UL>

<P><STRONG><a name="[453]"></a>duk__mark_roots_heap</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, duktape.o(i.duk__mark_roots_heap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = duk__mark_roots_heap &rArr; duk__mark_heaphdr &rArr; duk__mark_hobject &rArr;  duk__mark_heaphdr_nonnull (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_tval
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_heaphdr
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
</UL>

<P><STRONG><a name="[454]"></a>duk__mark_temproots_by_heap_scan</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, duktape.o(i.duk__mark_temproots_by_heap_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = duk__mark_temproots_by_heap_scan &rArr; duk__handle_temproot &rArr; duk__mark_heaphdr_nonnull &rArr; duk__mark_heaphdr &rArr; duk__mark_hobject &rArr;  duk__mark_heaphdr_nonnull (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_temproot
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
</UL>

<P><STRONG><a name="[451]"></a>duk__mark_tval</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, duktape.o(i.duk__mark_tval))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = duk__mark_tval &rArr;  duk__mark_heaphdr_nonnull (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_heaphdr_nonnull
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_roots_heap
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_hobject
</UL>

<P><STRONG><a name="[452]"></a>duk__mark_tvals</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, duktape.o(i.duk__mark_tvals))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = duk__mark_tvals &rArr;  duk__mark_heaphdr_nonnull (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_heaphdr_nonnull
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_hobject
</UL>

<P><STRONG><a name="[455]"></a>duk__match_regexp</STRONG> (Thumb, 1366 bytes, Stack size 56 bytes, duktape.o(i.duk__match_regexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824 + In Cycle
<LI>Call Chain = duk__match_regexp &rArr;  duk__match_regexp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__match_regexp
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__inp_get_prev_cp
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__inp_get_cp
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__inp_backtrack
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bc_get_u32
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bc_get_i32
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_stack
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_re_is_wordchar
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_is_line_terminator
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_nozero
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__match_regexp
</UL>

<P><STRONG><a name="[457]"></a>duk__math_minmax</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, duktape.o(i.duk__math_minmax))
<BR><BR>[Stack]<UL><LI>Max Depth = 2936<LI>Call Chain = duk__math_minmax &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_min
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_max
</UL>

<P><STRONG><a name="[35d]"></a>duk__nud_array_literal</STRONG> (Thumb, 402 bytes, Stack size 72 bytes, duktape.o(i.duk__nud_array_literal))
<BR><BR>[Stack]<UL><LI>Max Depth = 5152<LI>Call Chain = duk__nud_array_literal &rArr; duk__expr_toforcedreg &rArr;  duk__expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_regconst
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_instr_ptr
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_current_pc
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_toforcedreg
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_load_int32
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_bc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_bc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_b_c
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemp
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
</UL>

<P><STRONG><a name="[35e]"></a>duk__nud_object_literal</STRONG> (Thumb, 730 bytes, Stack size 72 bytes, duktape.o(i.duk__nud_object_literal))
<BR><BR>[Stack]<UL><LI>Max Depth = 5304<LI>Call Chain = duk__nud_object_literal &rArr; duk__parse_func_like_fnum &rArr;  duk__parse_func_like_raw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__objlit_load_key
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__objlit_flush_keys
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_var_hstring
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toforcedreg
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_regconst
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_instr_ptr
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_current_pc
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_toforcedreg
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_bc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_bc
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemps
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemp
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_expect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
</UL>

<P><STRONG><a name="[459]"></a>duk__objlit_flush_keys</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, duktape.o(i.duk__objlit_flush_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = duk__objlit_flush_keys &rArr; duk__emit_a_b_c &rArr; duk__emit_abc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_b_c
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_object_literal
</UL>

<P><STRONG><a name="[45a]"></a>duk__objlit_load_key</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, duktape.o(i.duk__objlit_load_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 5088<LI>Call Chain = duk__objlit_load_key &rArr; duk__ivalue_toforcedreg &rArr; duk__ivalue_toregconst_raw &rArr; duk__ivalue_toplain_raw &rArr; duk__ispec_toregconst_raw &rArr; duk__emit_bc &rArr; duk__emit_a_bc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toforcedreg
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_plain_fromstack
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_object_literal
</UL>

<P><STRONG><a name="[352]"></a>duk__parse_arguments</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, duktape.o(i.duk__parse_arguments))
<BR><BR>[Stack]<UL><LI>Max Depth = 5104<LI>Call Chain = duk__parse_arguments &rArr; duk__expr_toforcedreg &rArr;  duk__expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_toforcedreg
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemp
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_expect
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[45b]"></a>duk__parse_break_or_continue_stmt</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, duktape.o(i.duk__parse_break_or_continue_stmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 5080<LI>Call Chain = duk__parse_break_or_continue_stmt &rArr; duk__advance &rArr; duk__advance_helper &rArr; duk_lexer_parse_js_input_element &rArr; duk__lexer_parse_string_literal &rArr; duk__lexer_parse_escape &rArr; duk__advance_chars &rArr; duk__advance_bytes &rArr; duk__fill_lexer_buffer &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_active_label
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_jump
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_bc
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
</UL>

<P><STRONG><a name="[45c]"></a>duk__parse_disjunction</STRONG> (Thumb, 1958 bytes, Stack size 88 bytes, duktape.o(i.duk__parse_disjunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 5016 + In Cycle
<LI>Call Chain = duk__parse_disjunction &rArr;  duk__parse_disjunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__remove_slice
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_disjunction
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__insert_u32
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__insert_slice
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__insert_jump_offset
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_u32
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_slice
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_reop
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_range_atom_matcher
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_jump_offset
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_re_canonicalize_char
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_re_token
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_re_ranges
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_disjunction
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_compile
</UL>

<P><STRONG><a name="[460]"></a>duk__parse_do_stmt</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, duktape.o(i.duk__parse_do_stmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 6152 + In Cycle
<LI>Call Chain = duk__parse_do_stmt &rArr;  duk__parse_stmt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_jump_here
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_current_pc
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop_toregconst
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_jump
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_if_false_skip
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_expect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
</UL>

<P><STRONG><a name="[462]"></a>duk__parse_for_stmt</STRONG> (Thumb, 954 bytes, Stack size 72 bytes, duktape.o(i.duk__parse_for_stmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 6232 + In Cycle
<LI>Call Chain = duk__parse_for_stmt &rArr;  duk__parse_stmt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_jump
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_decl
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_lhs
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toregconst
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_ignore
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ispec_toregconst_raw
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__insert_jump_entry
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_current_pc
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop_toreg
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_is_empty
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_op_only
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_jump_empty
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_jump
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_if_false_skip
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_b_c
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_bc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_b_c
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemps
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_expect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
</UL>

<P><STRONG><a name="[421]"></a>duk__parse_func_body</STRONG> (Thumb, 548 bytes, Stack size 56 bytes, duktape.o(i.duk__parse_func_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 6416<LI>Call Chain = duk__parse_func_body &rArr; duk__parse_stmts &rArr; duk__parse_stmt &rArr;  duk__parse_stmts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__update_lineinfo_currtoken
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__reset_func_for_pass2
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__peephole_optimize_bytecode
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmts
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hstring_is_eval_or_arguments
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_op_only
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_bc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__comp_recursion_increase
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__comp_recursion_decrease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemp
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_expect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_stack
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_setpoint
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_getpoint
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_raw
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_compile_raw
</UL>

<P><STRONG><a name="[46a]"></a>duk__parse_func_formals</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, duktape.o(i.duk__parse_func_formals))
<BR><BR>[Stack]<UL><LI>Max Depth = 5064<LI>Call Chain = duk__parse_func_formals &rArr; duk__advance_expect &rArr; duk__advance_helper &rArr; duk_lexer_parse_js_input_element &rArr; duk__lexer_parse_string_literal &rArr; duk__lexer_parse_escape &rArr; duk__advance_chars &rArr; duk__advance_bytes &rArr; duk__fill_lexer_buffer &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_expect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_raw
</UL>

<P><STRONG><a name="[360]"></a>duk__parse_func_like_fnum</STRONG> (Thumb, 442 bytes, Stack size 200 bytes, duktape.o(i.duk__parse_func_like_fnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 5232 + In Cycle
<LI>Call Chain = duk__parse_func_like_fnum &rArr;  duk__parse_func_like_raw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_raw
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_func_valstack_slots
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_expect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_setpoint
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_object_literal
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
</UL>

<P><STRONG><a name="[420]"></a>duk__parse_func_like_raw</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, duktape.o(i.duk__parse_func_like_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 6448<LI>Call Chain = duk__parse_func_like_raw &rArr; duk__parse_func_body &rArr; duk__parse_stmts &rArr; duk__parse_stmt &rArr;  duk__parse_stmts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__update_lineinfo_currtoken
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_formals
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__convert_to_func_template
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_expect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_compile_raw
</UL>

<P><STRONG><a name="[46c]"></a>duk__parse_if_stmt</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, duktape.o(i.duk__parse_if_stmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 6160 + In Cycle
<LI>Call Chain = duk__parse_if_stmt &rArr;  duk__parse_stmt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_jump_here
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop_toregconst
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_jump_empty
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_if_true_skip
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_expect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
</UL>

<P><STRONG><a name="[46d]"></a>duk__parse_regexp_flags</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, duktape.o(i.duk__parse_regexp_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = duk__parse_regexp_flags &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_compile
</UL>

<P><STRONG><a name="[46e]"></a>duk__parse_return_stmt</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, duktape.o(i.duk__parse_return_stmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 6168<LI>Call Chain = duk__parse_return_stmt &rArr; duk__exprtop_toregconst &rArr; duk__exprtop &rArr; duk__expr &rArr; duk__expr_nud &rArr;  duk__expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_instr_ptr
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_current_pc
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop_toregconst
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_op_only
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_bc
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__const_needs_refcount
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
</UL>

<P><STRONG><a name="[461]"></a>duk__parse_stmt</STRONG> (Thumb, 1278 bytes, Stack size 72 bytes, duktape.o(i.duk__parse_stmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 6304 + In Cycle
<LI>Call Chain = duk__parse_stmt &rArr;  duk__parse_stmts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__update_label_flags
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__stmt_label_site
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__reset_labels_to_length
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_jump_here
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_with_stmt
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_while_stmt
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_stmt
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_throw_stmt
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_switch_stmt
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmts
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_return_stmt
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_if_stmt
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_do_stmt
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_break_or_continue_stmt
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_ignore
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toforcedreg
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_current_pc
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_bc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__comp_recursion_increase
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__comp_recursion_decrease
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_label
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_with_stmt
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_while_stmt
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_switch_stmt
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmts
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_if_stmt
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_do_stmt
</UL>

<P><STRONG><a name="[467]"></a>duk__parse_stmts</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, duktape.o(i.duk__parse_stmts))
<BR><BR>[Stack]<UL><LI>Max Depth = 6360<LI>Call Chain = duk__parse_stmts &rArr; duk__parse_stmt &rArr;  duk__parse_stmts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_stack
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
</UL>

<P><STRONG><a name="[479]"></a>duk__parse_string</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, duktape.o(i.duk__parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = duk__parse_string &rArr; duk__parse_string_iso8601_subset &rArr; duk_bi_date_get_timeval_from_dparts &rArr; duk_bi_date_get_local_tzoffset_gmtime &rArr;  duk_bi_date_get_timeval_from_dparts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_string_iso8601_subset
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_nan
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor_parse
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor
</UL>

<P><STRONG><a name="[47a]"></a>duk__parse_string_iso8601_subset</STRONG> (Thumb, 498 bytes, Stack size 160 bytes, duktape.o(i.duk__parse_string_iso8601_subset))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = duk__parse_string_iso8601_subset &rArr; duk_bi_date_get_timeval_from_dparts &rArr; duk_bi_date_get_local_tzoffset_gmtime &rArr;  duk_bi_date_get_timeval_from_dparts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_timeval_from_dparts
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_string
</UL>

<P><STRONG><a name="[474]"></a>duk__parse_switch_stmt</STRONG> (Thumb, 400 bytes, Stack size 72 bytes, duktape.o(i.duk__parse_switch_stmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 6200 + In Cycle
<LI>Call Chain = duk__parse_switch_stmt &rArr;  duk__parse_stmt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_jump_here
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_jump
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_current_pc
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop_toregconst
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_jump_empty
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_if_true_skip
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_b_c
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemp
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_expect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
</UL>

<P><STRONG><a name="[475]"></a>duk__parse_throw_stmt</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, duktape.o(i.duk__parse_throw_stmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 6152<LI>Call Chain = duk__parse_throw_stmt &rArr; duk__exprtop_toreg &rArr; duk__exprtop &rArr; duk__expr &rArr; duk__expr_nud &rArr;  duk__expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop_toreg
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_bc
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
</UL>

<P><STRONG><a name="[476]"></a>duk__parse_try_stmt</STRONG> (Thumb, 682 bytes, Stack size 56 bytes, duktape.o(i.duk__parse_try_stmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 5088 + In Cycle
<LI>Call Chain = duk__parse_try_stmt &rArr;  duk__parse_stmts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_trycatch
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_jump_here
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_jump
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmts
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getconst
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_current_pc
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_op_only
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_invalid
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_abc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_bc
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemps
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_expect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_null
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_null
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_int
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_top
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
</UL>

<P><STRONG><a name="[463]"></a>duk__parse_var_decl</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, duktape.o(i.duk__parse_var_decl))
<BR><BR>[Stack]<UL><LI>Max Depth = 6160<LI>Call Chain = duk__parse_var_decl &rArr; duk__exprtop &rArr; duk__expr &rArr; duk__expr_nud &rArr;  duk__expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_lhs
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toreg
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toforcedreg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hstring_is_eval_or_arguments_in_strict_mode
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_bc
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_top
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_stmt
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
</UL>

<P><STRONG><a name="[470]"></a>duk__parse_var_stmt</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, duktape.o(i.duk__parse_var_stmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 6192<LI>Call Chain = duk__parse_var_stmt &rArr; duk__parse_var_decl &rArr; duk__exprtop &rArr; duk__expr &rArr; duk__expr_nud &rArr;  duk__expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_decl
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
</UL>

<P><STRONG><a name="[472]"></a>duk__parse_while_stmt</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, duktape.o(i.duk__parse_while_stmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 6160 + In Cycle
<LI>Call Chain = duk__parse_while_stmt &rArr;  duk__parse_stmt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_jump_here
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_current_pc
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop_toregconst
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_jump_empty
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_jump
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_if_true_skip
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_expect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
</UL>

<P><STRONG><a name="[473]"></a>duk__parse_with_stmt</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, duktape.o(i.duk__parse_with_stmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 6176 + In Cycle
<LI>Call Chain = duk__parse_with_stmt &rArr;  duk__parse_stmt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_jump
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_current_pc
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop_toforcedreg
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_op_only
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_invalid
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_bc
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemps
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_expect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
</UL>

<P><STRONG><a name="[464]"></a>duk__patch_jump</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, duktape.o(i.duk__patch_jump))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk__patch_jump
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_instr_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_jump_here
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_with_stmt
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_switch_stmt
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
</UL>

<P><STRONG><a name="[355]"></a>duk__patch_jump_here</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, duktape.o(i.duk__patch_jump_here))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk__patch_jump_here &rArr; duk__patch_jump
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_jump
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_current_pc
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_while_stmt
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_switch_stmt
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_if_stmt
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_do_stmt
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
</UL>

<P><STRONG><a name="[47e]"></a>duk__patch_trycatch</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, duktape.o(i.duk__patch_trycatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 4800<LI>Call Chain = duk__patch_trycatch &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_instr_ptr
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
</UL>

<P><STRONG><a name="[9f]"></a>duk__pcall_method_raw</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, duktape.o(i.duk__pcall_method_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 4056<LI>Call Chain = duk__pcall_method_raw &rArr; duk_handle_call_unprotected &rArr; duk__handle_call_raw &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_get_idx_func_unvalidated
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_call_unprotected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk_pcall_method_flags)
</UL>
<P><STRONG><a name="[469]"></a>duk__peephole_optimize_bytecode</STRONG> (Thumb, 174 bytes, Stack size 28 bytes, duktape.o(i.duk__peephole_optimize_bytecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = duk__peephole_optimize_bytecode
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
</UL>

<P><STRONG><a name="[47f]"></a>duk__pop_2_unsafe_raw</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, duktape.o(i.duk__pop_2_unsafe_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = duk__pop_2_unsafe_raw &rArr; duk_heaphdr_refzero &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2_unsafe
</UL>

<P><STRONG><a name="[480]"></a>duk__pop_n_unsafe_raw</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, duktape.o(i.duk__pop_n_unsafe_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = duk__pop_n_unsafe_raw &rArr;  duk_refzero_check_fast (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_refzero_check_fast
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero_norz
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_n
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_n_unsafe
</UL>

<P><STRONG><a name="[481]"></a>duk__pop_unsafe_raw</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, duktape.o(i.duk__pop_unsafe_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = duk__pop_unsafe_raw &rArr; duk_heaphdr_refzero &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
</UL>

<P><STRONG><a name="[482]"></a>duk__prep_codec_arg</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, duktape.o(i.duk__prep_codec_arg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4200<LI>Call Chain = duk__prep_codec_arg &rArr; duk_to_lstring &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_lstring
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_buffer_data_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hex_encode
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hex_decode
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_base64_encode
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_base64_decode
</UL>

<P><STRONG><a name="[430]"></a>duk__prepost_incdec_reg_helper</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, duktape.o(i.duk__prepost_incdec_reg_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 2960<LI>Call Chain = duk__prepost_incdec_reg_helper &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[431]"></a>duk__prepost_incdec_var_helper</STRONG> (Thumb, 330 bytes, Stack size 80 bytes, duktape.o(i.duk__prepost_incdec_var_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 3384<LI>Call Chain = duk__prepost_incdec_var_helper &rArr; duk_js_putvar_activation &rArr; duk__putvar_helper &rArr; duk_hobject_putprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m2
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2_unsafe
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_putvar_activation
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_getvar_activation
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[87]"></a>duk__protected_compact_object</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, duktape.o(i.duk__protected_compact_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = duk__protected_compact_object &rArr; duk_hobject_compact_props &rArr; duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_compact_props
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk__compact_object_list)
</UL>
<P><STRONG><a name="[487]"></a>duk__proxy_check_prop</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, duktape.o(i.duk__proxy_check_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + In Cycle
<LI>Call Chain = duk__proxy_check_prop &rArr;  duk_get_prop_stridx_short_raw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_stack
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2_unsafe
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_proxy_check
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
</UL>

<P><STRONG><a name="[489]"></a>duk__push_c_function_raw</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, duktape.o(i.duk__push_c_function_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = duk__push_c_function_raw &rArr; duk_hnatfunc_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hnatfunc_alloc
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_c_function
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_func_from_lightfunc
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_c_function_builtin_noconstruct
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_c_function_builtin
</UL>

<P><STRONG><a name="[48c]"></a>duk__push_double</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, duktape.o(i.duk__push_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = duk__push_double &rArr; duk_push_number &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
</UL>

<P><STRONG><a name="[48d]"></a>duk__push_func_from_lightfunc</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, duktape.o(i.duk__push_func_from_lightfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 3024<LI>Call Chain = duk__push_func_from_lightfunc &rArr; duk_xdef_prop_stridx_short_raw &rArr; duk_xdef_prop_stridx &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_c_function_raw
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lightfunc_name_raw
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hnatfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
</UL>

<P><STRONG><a name="[490]"></a>duk__push_hstring_readable_unicode</STRONG> (Thumb, 300 bytes, Stack size 728 bytes, duktape.o(i.duk__push_hstring_readable_unicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = duk__push_hstring_readable_unicode &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_encode_xutf8
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_decode_xutf8
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_string_tval_readable
</UL>

<P><STRONG><a name="[491]"></a>duk__push_stridx</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, duktape.o(i.duk__push_stridx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = duk__push_stridx &rArr; duk_push_hstring_stridx &rArr; duk_push_hstring &rArr; duk_push_tval &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode_varuint
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
</UL>

<P><STRONG><a name="[493]"></a>duk__push_stridx_or_string</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, duktape.o(i.duk__push_stridx_or_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = duk__push_stridx_or_string &rArr; duk__push_string &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode_varuint
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_string
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
</UL>

<P><STRONG><a name="[494]"></a>duk__push_string</STRONG> (Thumb, 32 bytes, Stack size 272 bytes, duktape.o(i.duk__push_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = duk__push_string &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode_bitpacked_string
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_stridx_or_string
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
</UL>

<P><STRONG><a name="[495]"></a>duk__push_string_tval_readable</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, duktape.o(i.duk__push_string_tval_readable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4168<LI>Call Chain = duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_hstring_readable_unicode
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_symbol_type_string
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_sprintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_class_string_tval
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_prototype_chain_contains
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_find_existing_entry_tval_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string_tval_readable_error
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string_tval_readable
</UL>

<P><STRONG><a name="[389]"></a>duk__push_this_get_timeval</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, duktape.o(i.duk__push_this_get_timeval))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = duk__push_this_get_timeval &rArr; duk__push_this_get_timeval_tzoffset &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval_tzoffset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_part_helper
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_part_helper
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_value_of
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_set_time
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_get_timezone_offset
</UL>

<P><STRONG><a name="[498]"></a>duk__push_this_get_timeval_tzoffset</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, duktape.o(i.duk__push_this_get_timeval_tzoffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = duk__push_this_get_timeval_tzoffset &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m1
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_local_tzoffset_gmtime
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_string_helper
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval
</UL>

<P><STRONG><a name="[49a]"></a>duk__push_this_helper</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, duktape.o(i.duk__push_this_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = duk__push_this_helper &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_object
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_check_object_coercible
</UL>

<P><STRONG><a name="[49b]"></a>duk__push_this_number_plain</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, duktape.o(i.duk__push_this_number_plain))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = duk__push_this_number_plain &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_number
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_number
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_value_of
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_string
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_precision
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_fixed
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_exponential
</UL>

<P><STRONG><a name="[49d]"></a>duk__push_this_obj_len_u32</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, duktape.o(i.duk__push_this_obj_len_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 3136<LI>Call Chain = duk__push_this_obj_len_u32 &rArr; duk_get_prop_stridx_short_raw &rArr; duk_get_prop_stridx &rArr; duk_get_prop &rArr; duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint32
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_object
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_unshift
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_shift
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reverse
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reduce_shared
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_push
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_pop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32_limited
</UL>

<P><STRONG><a name="[49f]"></a>duk__push_this_obj_len_u32_limited</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, duktape.o(i.duk__push_this_obj_len_u32_limited))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = duk__push_this_obj_len_u32_limited &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_sort
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_slice
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_indexof_shared
</UL>

<P><STRONG><a name="[4a0]"></a>duk__push_tval_to_property_key</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, duktape.o(i.duk__push_tval_to_property_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = duk__push_tval_to_property_key &rArr; duk__to_property_key &rArr; duk_to_property_key_hstring &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_property_key
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
</UL>

<P><STRONG><a name="[4a2]"></a>duk__put_prop_shared</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, duktape.o(i.duk__put_prop_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 3208 + In Cycle
<LI>Call Chain = duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_strict_call
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_string
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx
</UL>

<P><STRONG><a name="[4a4]"></a>duk__putprop_fastpath_bufobj_tval</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, duktape.o(i.duk__putprop_fastpath_bufobj_tval))
<BR><BR>[Stack]<UL><LI>Max Depth = 3016<LI>Call Chain = duk__putprop_fastpath_bufobj_tval &rArr; duk_hbufobj_validated_write &rArr; duk_to_uint8clamped &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tval_number_to_arr_idx
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_validated_write
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
</UL>

<P><STRONG><a name="[4a6]"></a>duk__putprop_shallow_fastpath_array_tval</STRONG> (Thumb, 314 bytes, Stack size 64 bytes, duktape.o(i.duk__putprop_shallow_fastpath_array_tval))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = duk__putprop_shallow_fastpath_array_tval &rArr; duk_heaphdr_refzero &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tval_number_to_arr_idx
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
</UL>

<P><STRONG><a name="[4a7]"></a>duk__putvar_helper</STRONG> (Thumb, 392 bytes, Stack size 104 bytes, duktape.o(i.duk__putvar_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 3272<LI>Call Chain = duk__putvar_helper &rArr; duk_hobject_putprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_identifier_reference
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_putvar_envrec
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_putvar_activation
</UL>

<P><STRONG><a name="[4b3]"></a>duk__re_canon_next_discontinuity</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, duktape.o(i.duk__re_canon_next_discontinuity))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = duk__re_canon_next_discontinuity
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_generate_ranges
</UL>

<P><STRONG><a name="[3b2]"></a>duk__reconfig_valstack_ecma_catcher</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, duktape.o(i.duk__reconfig_valstack_ecma_catcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk__reconfig_valstack_ecma_catcher &rArr; duk_set_top_and_wipe &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top_and_wipe
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_finally
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_catch
</UL>

<P><STRONG><a name="[3b9]"></a>duk__reconfig_valstack_ecma_return</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, duktape.o(i.duk__reconfig_valstack_ecma_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk__reconfig_valstack_ecma_return &rArr; duk_set_top_and_wipe &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top_and_wipe
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_yield
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_return
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_longjmp
</UL>

<P><STRONG><a name="[4a8]"></a>duk__refcount_free_pending</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, duktape.o(i.duk__refcount_free_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = duk__refcount_free_pending &rArr;  duk_hobject_refcount_finalize_norz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refcount_finalize_norz
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_free_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_refzero_hobject
</UL>

<P><STRONG><a name="[3df]"></a>duk__refcount_refzero_hbuffer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, duktape.o(i.duk__refcount_refzero_hbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk__refcount_refzero_hbuffer &rArr; duk_free_hbuffer &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_remove_from_heap_allocated
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_free_hbuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__heaphdr_refzero_helper
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbuffer_refzero_helper
</UL>

<P><STRONG><a name="[3ea]"></a>duk__refcount_refzero_hobject</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, duktape.o(i.duk__refcount_refzero_hobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_free_pending
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_has_finalizer_fast_raw
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_remove_from_heap_allocated
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_process_finalize_list
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_insert_into_finalize_list
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_refzero_helper
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__heaphdr_refzero_helper
</UL>

<P><STRONG><a name="[3e9]"></a>duk__refcount_refzero_hstring</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, duktape.o(i.duk__refcount_refzero_hstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk__refcount_refzero_hstring &rArr; duk_free_hstring &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_unlink
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strcache_string_remove
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_free_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hstring_refzero_helper
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__heaphdr_refzero_helper
</UL>

<P><STRONG><a name="[4b2]"></a>duk__regexp_emit_range</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, duktape.o(i.duk__regexp_emit_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = duk__regexp_emit_range &rArr; duk__append_u32 &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_generate_ranges
</UL>

<P><STRONG><a name="[88]"></a>duk__regexp_generate_ranges</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, duktape.o(i.duk__regexp_generate_ranges))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896<LI>Call Chain = duk__regexp_generate_ranges &rArr; duk__regexp_emit_range &rArr; duk__append_u32 &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_emit_range
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__re_canon_next_discontinuity
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_re_canonicalize_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk__parse_disjunction)
</UL>
<P><STRONG><a name="[4b4]"></a>duk__regexp_match_helper</STRONG> (Thumb, 680 bytes, Stack size 128 bytes, duktape.o(i.duk__regexp_match_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 4952<LI>Call Chain = duk__regexp_match_helper &rArr; duk__match_regexp &rArr;  duk__match_regexp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__utf8_advance
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__match_regexp
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bc_get_u32
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_null
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_raw
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_array
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_number
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_buffer
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject_with_class
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_nodecref_unsafe
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_n_unsafe
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strcache_offset_char2byte
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m4
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_match_force_global
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_match
</UL>

<P><STRONG><a name="[45e]"></a>duk__remove_slice</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, duktape.o(i.duk__remove_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = duk__remove_slice &rArr; duk_bw_remove_raw_slice &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_remove_raw_slice
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_disjunction
</UL>

<P><STRONG><a name="[4ba]"></a>duk__require_bufobj_this</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk__require_bufobj_this))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = duk__require_bufobj_this &rArr; duk__getrequire_bufobj_this &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getrequire_bufobj_this
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_writefield
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_slice_shared
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_readfield
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_compare_shared
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_set
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_tojson
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_fill
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_copy
</UL>

<P><STRONG><a name="[4bb]"></a>duk__require_bufobj_value</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, duktape.o(i.duk__require_bufobj_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = duk__require_bufobj_value &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hobject
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_compare_shared
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_uint8array_plainof
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_copy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_concat
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_dataview_constructor
</UL>

<P><STRONG><a name="[468]"></a>duk__reset_func_for_pass2</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, duktape.o(i.duk__reset_func_for_pass2))
<BR><BR>[Stack]<UL><LI>Max Depth = 3256<LI>Call Chain = duk__reset_func_for_pass2 &rArr; duk_set_length &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_length
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_bare_object
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
</UL>

<P><STRONG><a name="[478]"></a>duk__reset_labels_to_length</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, duktape.o(i.duk__reset_labels_to_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 3256<LI>Call Chain = duk__reset_labels_to_length &rArr; duk_set_length &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_length
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
</UL>

<P><STRONG><a name="[4bd]"></a>duk__resize_valstack</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, duktape.o(i.duk__resize_valstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = duk__resize_valstack &rArr; duk_heap_mem_realloc_indirect &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_realloc_indirect
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__valstack_grow
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_valstack_shrink_check_nothrow
</UL>

<P><STRONG><a name="[4bf]"></a>duk__resolve_offset_opt_length</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, duktape.o(i.duk__resolve_offset_opt_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = duk__resolve_offset_opt_length &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_dataview_constructor
</UL>

<P><STRONG><a name="[3a7]"></a>duk__resolve_target_fastpath_check</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, duktape.o(i.duk__resolve_target_fastpath_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 3112<LI>Call Chain = duk__resolve_target_fastpath_check &rArr; duk__coerce_nonstrict_this_binding &rArr; duk_to_object &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__coerce_nonstrict_this_binding
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
</UL>

<P><STRONG><a name="[3a8]"></a>duk__resolve_target_func_and_this_binding</STRONG> (Thumb, 442 bytes, Stack size 48 bytes, duktape.o(i.duk__resolve_target_func_and_this_binding))
<BR><BR>[Stack]<UL><LI>Max Depth = 3240 + In Cycle
<LI>Call Chain = duk__resolve_target_func_and_this_binding &rArr;  duk_push_string_tval_readable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__update_default_instance_proto
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_specialfuncs_for_call
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_proxy_for_call
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_bound_chain_for_call
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__coerce_nonstrict_this_binding
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_throw_raw
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string_tval_readable
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_find_existing_entry_tval_ptr
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
</UL>

<P><STRONG><a name="[4c2]"></a>duk__rnd_rotl</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, duktape.o(i.duk__rnd_rotl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = duk__rnd_rotl
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__xoroshiro128plus
</UL>

<P><STRONG><a name="[5b9]"></a>duk__rnd_splitmix64</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, duktape.o(i.duk__rnd_splitmix64))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = duk__rnd_splitmix64
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_util_tinyrandom_prepare_seed
</UL>

<P><STRONG><a name="[155]"></a>duk__round_fixed</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, duktape.o(i.duk__round_fixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = duk__round_fixed &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[3d4]"></a>duk__safe_call_adjust_valstack</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, duktape.o(i.duk__safe_call_adjust_valstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920<LI>Call Chain = duk__safe_call_adjust_valstack &rArr; duk_set_top_unsafe &rArr; duk_refzero_check_fast &rArr; duk_heap_process_finalize_list &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top_unsafe
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_n
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert_undefined_n
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_safe_call_inner
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_safe_call_error
</UL>

<P><STRONG><a name="[589]"></a>duk__scan_backwards</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, duktape.o(i.duk__scan_backwards))
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strcache_offset_char2byte
</UL>

<P><STRONG><a name="[588]"></a>duk__scan_forwards</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, duktape.o(i.duk__scan_forwards))
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strcache_offset_char2byte
</UL>

<P><STRONG><a name="[239]"></a>duk__set_bufobj_buffer</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, duktape.o(i.duk__set_bufobj_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = duk__set_bufobj_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_arraybuffer_constructor
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__autospawn_arraybuffer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_concat
</UL>

<P><STRONG><a name="[3b1]"></a>duk__set_catcher_regs_norz</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, duktape.o(i.duk__set_catcher_regs_norz))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = duk__set_catcher_regs_norz &rArr; duk_heaphdr_refzero_norz &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero_norz
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_finally
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_catch
</UL>

<P><STRONG><a name="[4c4]"></a>duk__set_part_helper</STRONG> (Thumb, 232 bytes, Stack size 152 bytes, duktape.o(i.duk__set_part_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = duk__set_part_helper &rArr; duk__push_this_get_timeval &rArr; duk__push_this_get_timeval_tzoffset &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__twodigit_year_fixup
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_this_timeval_from_dparts
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_nan
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isfinite
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_to_parts
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_set_shared
</UL>

<P><STRONG><a name="[4c7]"></a>duk__set_parts_from_args</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, duktape.o(i.duk__set_parts_from_args))
<BR><BR>[Stack]<UL><LI>Max Depth = 4360<LI>Call Chain = duk__set_parts_from_args &rArr; duk__twodigit_year_fixup &rArr; duk_to_int &rArr; duk__api_coerce_d2i &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__twodigit_year_fixup
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor_utc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor
</UL>

<P><STRONG><a name="[4c6]"></a>duk__set_this_timeval_from_dparts</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, duktape.o(i.duk__set_this_timeval_from_dparts))
<BR><BR>[Stack]<UL><LI>Max Depth = 3264<LI>Call Chain = duk__set_this_timeval_from_dparts &rArr; duk_put_prop_stridx_short_raw &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_top
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_timeval_from_dparts
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_part_helper
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor
</UL>

<P><STRONG><a name="[409]"></a>duk__settemp_checkmax</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, duktape.o(i.duk__settemp_checkmax))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
</UL>

<P><STRONG><a name="[156]"></a>duk__sin</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, duktape.o(i.duk__sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = duk__sin &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[261]"></a>duk__slow_case_conversion</STRONG> (Thumb, 384 bytes, Stack size 64 bytes, duktape.o(i.duk__slow_case_conversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = duk__slow_case_conversion &rArr; duk_unicode_encode_xutf8
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_encode_xutf8
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__case_transform_helper
</UL>

<P><STRONG><a name="[4c9]"></a>duk__sort_compare_es6</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, duktape.o(i.duk__sort_compare_es6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk__sort_compare_es6
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hstring_sort_key
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__sort_enum_keys_es6
</UL>

<P><STRONG><a name="[4cb]"></a>duk__sort_enum_keys_es6</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, duktape.o(i.duk__sort_enum_keys_es6))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = duk__sort_enum_keys_es6 &rArr; duk__sort_compare_es6
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__sort_compare_es6
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hstring_sort_key
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
</UL>

<P><STRONG><a name="[157]"></a>duk__sqrt</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, duktape.o(i.duk__sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = duk__sqrt &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[46f]"></a>duk__stmt_label_site</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, duktape.o(i.duk__stmt_label_site))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = duk__stmt_label_site &rArr; duk__emit_bc &rArr; duk__emit_a_bc &rArr; duk__emit &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_invalid
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_bc
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
</UL>

<P><STRONG><a name="[4cc]"></a>duk__str_search_shared</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, duktape.o(i.duk__str_search_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = duk__str_search_shared &rArr; duk_heap_strcache_offset_char2byte &rArr; duk_hstring_get_charlen &rArr; duk__hstring_get_charlen_slowpath &rArr; duk_unicode_unvalidated_utf8_length
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strcache_offset_char2byte
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_indexof_shared
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_includes
</UL>

<P><STRONG><a name="[4ce]"></a>duk__str_tostring_notregexp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, duktape.o(i.duk__str_tostring_notregexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = duk__str_tostring_notregexp &rArr; duk_to_hstring &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_class_number
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_startswith_endswith
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_includes
</UL>

<P><STRONG><a name="[4d0]"></a>duk__strtable_alloc_hstring</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, duktape.o(i.duk__strtable_alloc_hstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_to_arrayindex_string
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__strtable_do_intern
</UL>

<P><STRONG><a name="[4d3]"></a>duk__strtable_do_intern</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, duktape.o(i.duk__strtable_do_intern))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__strtable_resize_check
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__strtable_alloc_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_intern
</UL>

<P><STRONG><a name="[4d5]"></a>duk__strtable_grow_inplace</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, duktape.o(i.duk__strtable_grow_inplace))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = duk__strtable_grow_inplace &rArr; duk_heap_mem_realloc &rArr;  duk__check_voluntary_gc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__strtable_resize_check
</UL>

<P><STRONG><a name="[4d4]"></a>duk__strtable_resize_check</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, duktape.o(i.duk__strtable_resize_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = duk__strtable_resize_check &rArr; duk__strtable_shrink_inplace &rArr; duk_heap_mem_realloc &rArr;  duk__check_voluntary_gc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__strtable_shrink_inplace
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__strtable_grow_inplace
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__strtable_do_intern
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_force_resize
</UL>

<P><STRONG><a name="[4d7]"></a>duk__strtable_shrink_inplace</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, duktape.o(i.duk__strtable_shrink_inplace))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = duk__strtable_shrink_inplace &rArr; duk_heap_mem_realloc &rArr;  duk__check_voluntary_gc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__strtable_resize_check
</UL>

<P><STRONG><a name="[4d8]"></a>duk__sweep_heap</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, duktape.o(i.duk__sweep_heap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = duk__sweep_heap &rArr; duk_heap_free_heaphdr_raw &rArr; duk_free_hobject &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_valstack_shrink_check_nothrow
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_insert_into_finalize_list
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free_heaphdr_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
</UL>

<P><STRONG><a name="[4da]"></a>duk__sweep_stringtable</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, duktape.o(i.duk__sweep_stringtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = duk__sweep_stringtable &rArr; duk_free_hstring &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_unlink_prev
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strcache_string_remove
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_free_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
</UL>

<P><STRONG><a name="[4dc]"></a>duk__tag_check</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, duktape.o(i.duk__tag_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = duk__tag_check &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_string
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_object
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_null
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_buffer
</UL>

<P><STRONG><a name="[158]"></a>duk__tan</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, duktape.o(i.duk__tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = duk__tan &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[4de]"></a>duk__timeclip</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, duktape.o(i.duk__timeclip))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = duk__timeclip &rArr; duk_js_tointeger_number &rArr; duk_double_trunc_towards_zero &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isfinite
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tointeger_number
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_in_valid_range
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_set_time
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_timeval_from_dparts
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor
</UL>

<P><STRONG><a name="[4e1]"></a>duk__to_int_uint_helper</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, duktape.o(i.duk__to_int_uint_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = duk__to_int_uint_helper &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
</UL>

<P><STRONG><a name="[3d1]"></a>duk__to_new_array_length_checked</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, duktape.o(i.duk__to_new_array_length_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 2856 + In Cycle
<LI>Call Chain = duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tonumber
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_put_array_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
</UL>

<P><STRONG><a name="[4a1]"></a>duk__to_property_key</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, duktape.o(i.duk__to_property_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = duk__to_property_key &rArr; duk_to_property_key_hstring &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_property_key_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_tval_to_property_key
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
</UL>

<P><STRONG><a name="[4e4]"></a>duk__to_regexp_helper</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, duktape.o(i.duk__to_regexp_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 4072<LI>Call Chain = duk__to_regexp_helper &rArr; duk_new &rArr; duk_handle_call_unprotected &rArr; duk__handle_call_raw &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_new
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject_bidx
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject_with_class
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_search
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_match
</UL>

<P><STRONG><a name="[4e8]"></a>duk__to_string_helper</STRONG> (Thumb, 102 bytes, Stack size 104 bytes, duktape.o(i.duk__to_string_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920<LI>Call Chain = duk__to_string_helper &rArr; duk__push_this_get_timeval_tzoffset &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval_tzoffset
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__format_parts_iso8601
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_to_parts
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_tostring_shared
</UL>

<P><STRONG><a name="[4e9]"></a>duk__toint32_touint32_helper</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, duktape.o(i.duk__toint32_touint32_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = duk__toint32_touint32_helper &rArr; duk_double_trunc_towards_zero &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_trunc_towards_zero
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_is_nan_zero_inf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_touint32
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_toint32
</UL>

<P><STRONG><a name="[4ec]"></a>duk__tonumber_string_raw</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, duktape.o(i.duk__tonumber_string_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 2792<LI>Call Chain = duk__tonumber_string_raw &rArr; duk_numconv_parse &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tonumber
</UL>

<P><STRONG><a name="[8a]"></a>duk__transform_callback_decode_uri</STRONG> (Thumb, 536 bytes, Stack size 64 bytes, duktape.o(i.duk__transform_callback_decode_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = duk__transform_callback_decode_uri &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decode_hex_escape
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_encode_xutf8
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Address Reference Count : 2]<UL><LI> duktape.o(i.duk_bi_global_object_decode_uri)
<LI> duktape.o(i.duk_bi_global_object_decode_uri_component)
</UL>
<P><STRONG><a name="[8b]"></a>duk__transform_callback_encode_uri</STRONG> (Thumb, 314 bytes, Stack size 64 bytes, duktape.o(i.duk__transform_callback_encode_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = duk__transform_callback_encode_uri &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_encode_xutf8
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_decode_xutf8
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Address Reference Count : 2]<UL><LI> duktape.o(i.duk_bi_global_object_encode_uri)
<LI> duktape.o(i.duk_bi_global_object_encode_uri_component)
</UL>
<P><STRONG><a name="[8c]"></a>duk__transform_callback_escape</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, duktape.o(i.duk__transform_callback_escape))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = duk__transform_callback_escape &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk_bi_global_object_escape)
</UL>
<P><STRONG><a name="[8d]"></a>duk__transform_callback_unescape</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, duktape.o(i.duk__transform_callback_unescape))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = duk__transform_callback_unescape &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decode_hex_escape
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_encode_xutf8
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk_bi_global_object_unescape)
</UL>
<P><STRONG><a name="[4ee]"></a>duk__transform_helper</STRONG> (Thumb, 134 bytes, Stack size 64 bytes, duktape.o(i.duk__transform_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = duk__transform_helper &rArr; duk_buffer_to_string &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_buffer_to_string
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_decode_xutf8_checked
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_init_pushbuf
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_compact
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_unescape
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_escape
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_encode_uri_component
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_encode_uri
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_decode_uri_component
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_decode_uri
</UL>

<P><STRONG><a name="[15c]"></a>duk__trunc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, duktape.o(i.duk__trunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = duk__trunc &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[4ef]"></a>duk__try_push_vsprintf</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, duktape.o(i.duk__try_push_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk__try_push_vsprintf &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_vsprintf
</UL>

<P><STRONG><a name="[396]"></a>duk__tval_number_to_arr_idx</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, duktape.o(i.duk__tval_number_to_arr_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = duk__tval_number_to_arr_idx &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__putprop_shallow_fastpath_array_tval
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__putprop_fastpath_bufobj_tval
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getprop_shallow_fastpath_array_tval
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getprop_fastpath_bufobj_tval
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
</UL>

<P><STRONG><a name="[4c5]"></a>duk__twodigit_year_fixup</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, duktape.o(i.duk__twodigit_year_fixup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4328<LI>Call Chain = duk__twodigit_year_fixup &rArr; duk_to_int &rArr; duk__api_coerce_d2i &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_nan
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_number
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_parts_from_args
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_part_helper
</UL>

<P><STRONG><a name="[4f1]"></a>duk__uncaught_error_aware</STRONG> (Thumb, 48 bytes, Stack size 128 bytes, duktape.o(i.duk__uncaught_error_aware))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = duk__uncaught_error_aware &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_fatal_raw
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string_tval_readable_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_longjmp
</UL>

<P><STRONG><a name="[317]"></a>duk__unemit_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, duktape.o(i.duk__unemit_1))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_object
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_array
</UL>

<P><STRONG><a name="[4f4]"></a>duk__uni_decode_value</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, duktape.o(i.duk__uni_decode_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = duk__uni_decode_value &rArr; duk_bd_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__uni_range_match
</UL>

<P><STRONG><a name="[4f5]"></a>duk__uni_range_match</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, duktape.o(i.duk__uni_range_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = duk__uni_range_match &rArr; duk__uni_decode_value &rArr; duk_bd_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__uni_decode_value
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_is_letter
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_is_identifier_start
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_is_identifier_part
</UL>

<P><STRONG><a name="[3cd]"></a>duk__update_default_instance_proto</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, duktape.o(i.duk__update_default_instance_proto))
<BR><BR>[Stack]<UL><LI>Max Depth = 3144<LI>Call Chain = duk__update_default_instance_proto &rArr; duk_get_prop_stridx_short_raw &rArr; duk_get_prop_stridx &rArr; duk_get_prop &rArr; duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_set_prototype_updref
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_target_func_and_this_binding
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_proxy_for_call
</UL>

<P><STRONG><a name="[471]"></a>duk__update_label_flags</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, duktape.o(i.duk__update_label_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk__update_label_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
</UL>

<P><STRONG><a name="[466]"></a>duk__update_lineinfo_currtoken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, duktape.o(i.duk__update_lineinfo_currtoken))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_raw
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
</UL>

<P><STRONG><a name="[4b7]"></a>duk__utf8_advance</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, duktape.o(i.duk__utf8_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = duk__utf8_advance &rArr; duk_err_error_internal &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
</UL>

<P><STRONG><a name="[40e]"></a>duk__utf8_backtrack</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, duktape.o(i.duk__utf8_backtrack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = duk__utf8_backtrack &rArr; duk_err_error_internal &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__inp_backtrack
</UL>

<P><STRONG><a name="[2e4]"></a>duk__utf8_decode_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, duktape.o(i.duk__utf8_decode_init))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decode_helper
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_textdecoder_decode_utf8_nodejs
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textdecoder_constructor
</UL>

<P><STRONG><a name="[2e3]"></a>duk__utf8_decode_next</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, duktape.o(i.duk__utf8_decode_next))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decode_helper
</UL>

<P><STRONG><a name="[4f6]"></a>duk__utf8_emit_repl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, duktape.o(i.duk__utf8_emit_repl))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__utf8_encode_char
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textencoder_prototype_encode
</UL>

<P><STRONG><a name="[90]"></a>duk__utf8_encode_char</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, duktape.o(i.duk__utf8_encode_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk__utf8_encode_char &rArr; duk_unicode_encode_xutf8
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__utf8_emit_repl
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_encode_xutf8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk_bi_textencoder_prototype_encode)
</UL>
<P><STRONG><a name="[4f7]"></a>duk__valstack_grow</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, duktape.o(i.duk__valstack_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + In Cycle
<LI>Call Chain = duk__valstack_grow &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resize_valstack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_alloc_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_valstack_grow_check_throw
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_valstack_grow_check_nothrow
</UL>

<P><STRONG><a name="[42b]"></a>duk__vm_arith_add</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, duktape.o(i.duk__vm_arith_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 2936 + In Cycle
<LI>Call Chain = duk__vm_arith_add &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_primitive
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_string
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m2
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m1
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2_unsafe
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat_2
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[42c]"></a>duk__vm_arith_binary_op</STRONG> (Thumb, 398 bytes, Stack size 88 bytes, duktape.o(i.duk__vm_arith_binary_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 2968<LI>Call Chain = duk__vm_arith_binary_op &rArr; duk_to_number_m2 &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__compute_mod
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__compute_exp
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m2
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m1
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2_unsafe
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[426]"></a>duk__vm_arith_unary_op</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, duktape.o(i.duk__vm_arith_unary_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 2976<LI>Call Chain = duk__vm_arith_unary_op &rArr; duk_to_number_tval &rArr; duk_to_number_m1 &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_tval
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[42d]"></a>duk__vm_bitwise_binary_op</STRONG> (Thumb, 316 bytes, Stack size 88 bytes, duktape.o(i.duk__vm_bitwise_binary_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 2984<LI>Call Chain = duk__vm_bitwise_binary_op &rArr; duk_to_int32 &rArr; duk_js_toint32 &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int32
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2_unsafe
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[424]"></a>duk__vm_bitwise_not</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, duktape.o(i.duk__vm_bitwise_not))
<BR><BR>[Stack]<UL><LI>Max Depth = 2944<LI>Call Chain = duk__vm_bitwise_not &rArr; duk_to_int32 &rArr; duk_js_toint32 &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int32
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[425]"></a>duk__vm_logical_not</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, duktape.o(i.duk__vm_logical_not))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = duk__vm_logical_not &rArr; duk_heaphdr_refzero &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_toboolean
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[4fe]"></a>duk__xoroshiro128plus</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, duktape.o(i.duk__xoroshiro128plus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = duk__xoroshiro128plus &rArr; duk__rnd_rotl
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__rnd_rotl
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_util_tinyrandom_get_double
</UL>

<P><STRONG><a name="[4ff]"></a>duk__year_from_day</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, duktape.o(i.duk__year_from_day))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk__year_from_day &rArr; duk__day_from_year
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__day_from_year
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_to_parts
</UL>

<P><STRONG><a name="[3f3]"></a>duk_bd_decode</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, duktape.o(i.duk_bd_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk_bd_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode_varuint
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode_flagged
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode_flag
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode_bitpacked_string
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__uni_decode_value
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__slow_case_conversion
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_double
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_pc2line_query_raw
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
</UL>

<P><STRONG><a name="[3ff]"></a>duk_bd_decode_bitpacked_string</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, duktape.o(i.duk_bd_decode_bitpacked_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk_bd_decode_bitpacked_string &rArr; duk_bd_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_string
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_heap_strings
</UL>

<P><STRONG><a name="[3f2]"></a>duk_bd_decode_flag</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_bd_decode_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk_bd_decode_flag &rArr; duk_bd_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode_flagged
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_pc2line_query_raw
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
</UL>

<P><STRONG><a name="[505]"></a>duk_bd_decode_flagged</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, duktape.o(i.duk_bd_decode_flagged))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk_bd_decode_flagged &rArr; duk_bd_decode_flag &rArr; duk_bd_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode_flag
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode_flagged_signed
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
</UL>

<P><STRONG><a name="[506]"></a>duk_bd_decode_flagged_signed</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, duktape.o(i.duk_bd_decode_flagged_signed))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = duk_bd_decode_flagged_signed &rArr; duk_bd_decode_flagged &rArr; duk_bd_decode_flag &rArr; duk_bd_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode_flagged
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
</UL>

<P><STRONG><a name="[492]"></a>duk_bd_decode_varuint</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, duktape.o(i.duk_bd_decode_varuint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = duk_bd_decode_varuint &rArr; duk_bd_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_stridx_or_string
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_stridx
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
</UL>

<P><STRONG><a name="[508]"></a>duk_be_encode</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, duktape.o(i.duk_be_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = duk_be_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_be_finish
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_pc2line_pack
</UL>

<P><STRONG><a name="[507]"></a>duk_be_finish</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, duktape.o(i.duk_be_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = duk_be_finish &rArr; duk_be_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_be_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_pc2line_pack
</UL>

<P><STRONG><a name="[a2]"></a>duk_bi_array_constructor</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, duktape.o(i.duk_bi_array_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = duk_bi_array_constructor &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint32
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_number
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_number
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_harray_with_size
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>duk_bi_array_constructor_is_array</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_array_constructor_is_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = duk_bi_array_constructor_is_array &rArr; duk_get_hobject_with_class &rArr; duk__get_tagged_heaphdr_raw &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject_with_class
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>duk_bi_array_prototype_concat</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, duktape.o(i.duk_bi_array_prototype_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 3176<LI>Call Chain = duk_bi_array_prototype_concat &rArr; duk_get_length &rArr; duk_get_prop_stridx &rArr; duk_get_prop &rArr; duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_array
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_index
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_object
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_undefined
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject_with_class
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>duk_bi_array_prototype_indexof_shared</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_array_prototype_indexof_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = duk_bi_array_prototype_indexof_shared &rArr; duk_to_int_clamped &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32_limited
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_strict_equals
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>duk_bi_array_prototype_iter_shared</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_array_prototype_iter_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 4296<LI>Call Chain = duk_bi_array_prototype_iter_shared &rArr; duk_require_function &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_boolean
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_function
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_true
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_false
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_array
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_top
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_method
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_index
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_undefined
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2_unsafe
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m3
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m2
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_2
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_1
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>duk_bi_array_prototype_join_shared</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_array_prototype_join_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 4176<LI>Call Chain = duk_bi_array_prototype_join_shared &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_join
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_stack
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type_mask
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_method
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_empty
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_undefined
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_nodecref_unsafe
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>duk_bi_array_prototype_pop</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_array_prototype_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 3264<LI>Call Chain = duk_bi_array_prototype_pop &rArr; duk_put_prop_stridx_short_raw &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__arraypart_fastpath_this
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_pop_fastpath
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop_index
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>duk_bi_array_prototype_push</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_array_prototype_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = duk_bi_array_prototype_push &rArr; duk__array_push_fastpath &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__arraypart_fastpath_this
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_push_fastpath
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_top
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>duk_bi_array_prototype_reduce_shared</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_array_prototype_reduce_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 4296<LI>Call Chain = duk_bi_array_prototype_reduce_shared &rArr; duk_require_function &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_function
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_has_prop_index
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_2
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_1
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>duk_bi_array_prototype_reverse</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_array_prototype_reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 3256<LI>Call Chain = duk_bi_array_prototype_reverse &rArr; duk_put_prop_index &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop_index
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_undefined
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>duk_bi_array_prototype_shift</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_array_prototype_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 3256<LI>Call Chain = duk_bi_array_prototype_shift &rArr; duk_put_prop_stridx_short_raw &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop_index
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_undefined
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>duk_bi_array_prototype_slice</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, duktape.o(i.duk_bi_array_prototype_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920<LI>Call Chain = duk_bi_array_prototype_slice &rArr; duk_to_int_clamped &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32_limited
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_array
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_index
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_undefined
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>duk_bi_array_prototype_sort</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_array_prototype_sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 4800<LI>Call Chain = duk_bi_array_prototype_sort &rArr; duk__push_this_obj_len_u32_limited &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32_limited
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_qsort
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_nodecref_unsafe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>duk_bi_array_prototype_splice</STRONG> (Thumb, 544 bytes, Stack size 88 bytes, duktape.o(i.duk_bi_array_prototype_splice))
<BR><BR>[Stack]<UL><LI>Max Depth = 4968<LI>Call Chain = duk_bi_array_prototype_splice &rArr; duk_to_int_clamped &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32_limited
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_array
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop_index
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_index
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_undefined
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>duk_bi_array_prototype_to_string</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_array_prototype_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 4064<LI>Call Chain = duk_bi_array_prototype_to_string &rArr; duk_call_method &rArr; duk_handle_call_unprotected &rArr; duk__handle_call_raw &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_function
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_method
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_object
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_to_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>duk_bi_array_prototype_unshift</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_array_prototype_unshift))
<BR><BR>[Stack]<UL><LI>Max Depth = 4792<LI>Call Chain = duk_bi_array_prototype_unshift &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_top
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop_index
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_undefined
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>duk_bi_arraybuffer_constructor</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_arraybuffer_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4792<LI>Call Chain = duk_bi_arraybuffer_constructor &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_bufobj_buffer
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_constructor_call
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_zero
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_bufobj_raw
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hbuffer
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>duk_bi_arraybuffer_isview</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_arraybuffer_isview))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = duk_bi_arraybuffer_isview &rArr; duk_is_buffer &rArr; duk__tag_check &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_buffer
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>duk_bi_boolean_constructor</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_boolean_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 3000<LI>Call Chain = duk_bi_boolean_constructor &rArr; duk_xdef_prop_stridx_short_raw &rArr; duk_xdef_prop_stridx &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_boolean
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_constructor_call
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>duk_bi_boolean_prototype_tostring_shared</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_boolean_prototype_tostring_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 4168<LI>Call Chain = duk_bi_boolean_prototype_tostring_shared &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>duk_bi_buffer_compare_shared</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_buffer_compare_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = duk_bi_buffer_compare_shared &rArr; duk__require_bufobj_this &rArr; duk__getrequire_bufobj_this &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_value
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_this
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_data_compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>duk_bi_buffer_readfield</STRONG> (Thumb, 792 bytes, Stack size 128 bytes, duktape.o(i.duk_bi_buffer_readfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = duk_bi_buffer_readfield &rArr; duk__require_bufobj_this &rArr; duk__getrequire_bufobj_this &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_this
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_boolean
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_nan
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_int
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_clamp_bytelength
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>duk_bi_buffer_slice_shared</STRONG> (Thumb, 492 bytes, Stack size 64 bytes, duktape.o(i.duk_bi_buffer_slice_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = duk_bi_buffer_slice_shared &rArr; duk__require_bufobj_this &rArr; duk__getrequire_bufobj_this &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_this
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__clamp_startend_negidx_shifted
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__arraybuffer_plain_slice
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_zero
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_bufobj_raw
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hbuffer
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_clamp_bytelength
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_borrowed_this_tval
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>duk_bi_buffer_writefield</STRONG> (Thumb, 792 bytes, Stack size 112 bytes, duktape.o(i.duk_bi_buffer_writefield))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = duk_bi_buffer_writefield &rArr; duk__require_bufobj_this &rArr; duk__getrequire_bufobj_this &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_this
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint32
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_boolean
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_swap
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_int
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_clamp_bytelength
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>duk_bi_dataview_constructor</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, duktape.o(i.duk_bi_dataview_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = duk_bi_dataview_constructor &rArr; duk__resolve_offset_opt_length &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_offset_opt_length
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_value
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_constructor_call
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_bufobj_raw
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>duk_bi_date_constructor</STRONG> (Thumb, 222 bytes, Stack size 104 bytes, duktape.o(i.duk_bi_date_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = duk_bi_date_constructor &rArr; duk__set_parts_from_args &rArr; duk__twodigit_year_fixup &rArr; duk_to_int &rArr; duk__api_coerce_d2i &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__timeclip
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_this_timeval_from_dparts
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_parts_from_args
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_string
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_primitive
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_constructor_call
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_time_get_ecmascript_time_nofrac
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object_helper
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_string_notsymbol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>duk_bi_date_constructor_now</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_date_constructor_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = duk_bi_date_constructor_now &rArr; duk_time_get_ecmascript_time_nofrac &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_time_get_ecmascript_time_nofrac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>duk_bi_date_constructor_parse</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_date_constructor_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4160<LI>Call Chain = duk_bi_date_constructor_parse &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>duk_bi_date_constructor_utc</STRONG> (Thumb, 64 bytes, Stack size 88 bytes, duktape.o(i.duk_bi_date_constructor_utc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4448<LI>Call Chain = duk_bi_date_constructor_utc &rArr; duk__set_parts_from_args &rArr; duk__twodigit_year_fixup &rArr; duk_to_int &rArr; duk__api_coerce_d2i &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_parts_from_args
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_nan
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_timeval_from_dparts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[499]"></a>duk_bi_date_get_local_tzoffset_gmtime</STRONG> (Thumb, 222 bytes, Stack size 232 bytes, duktape.o(i.duk_bi_date_get_local_tzoffset_gmtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + In Cycle
<LI>Call Chain = duk_bi_date_get_local_tzoffset_gmtime &rArr;  duk_bi_date_get_timeval_from_dparts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;difftime
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isfinite
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_to_parts
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_in_leeway_range
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_timeval_from_dparts
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval_tzoffset
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_get_timezone_offset
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_timeval_from_dparts
</UL>

<P><STRONG><a name="[51a]"></a>duk_bi_date_get_now_time</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_date_get_now_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = duk_bi_date_get_now_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_time_get_monotonic_time
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_time_get_ecmascript_time_nofrac
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_time_get_ecmascript_time
</UL>

<P><STRONG><a name="[47b]"></a>duk_bi_date_get_timeval_from_dparts</STRONG> (Thumb, 370 bytes, Stack size 80 bytes, duktape.o(i.duk_bi_date_get_timeval_from_dparts))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = duk_bi_date_get_timeval_from_dparts &rArr; duk_bi_date_get_local_tzoffset_gmtime &rArr;  duk_bi_date_get_timeval_from_dparts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__timeclip
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__make_day
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isfinite
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tointeger_number
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_local_tzoffset_gmtime
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_this_timeval_from_dparts
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_string_iso8601_subset
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_local_tzoffset_gmtime
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor_utc
</UL>

<P><STRONG><a name="[44b]"></a>duk_bi_date_is_leap_year</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, duktape.o(i.duk_bi_date_is_leap_year))
<BR><BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__make_day
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_timeval_to_parts
</UL>

<P><STRONG><a name="[bf]"></a>duk_bi_date_prototype_get_shared</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_date_prototype_get_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = duk_bi_date_prototype_get_shared &rArr; duk__get_part_helper &rArr; duk__push_this_get_timeval &rArr; duk__push_this_get_timeval_tzoffset &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_part_helper
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__date_get_indirect_magic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>duk_bi_date_prototype_get_timezone_offset</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_date_prototype_get_timezone_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4856<LI>Call Chain = duk_bi_date_prototype_get_timezone_offset &rArr; duk__push_this_get_timeval &rArr; duk__push_this_get_timeval_tzoffset &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_nan
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_local_tzoffset_gmtime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>duk_bi_date_prototype_set_shared</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_date_prototype_set_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 5000<LI>Call Chain = duk_bi_date_prototype_set_shared &rArr; duk__set_part_helper &rArr; duk__push_this_get_timeval &rArr; duk__push_this_get_timeval_tzoffset &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_part_helper
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__date_get_indirect_magic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>duk_bi_date_prototype_set_time</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_date_prototype_set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 4856<LI>Call Chain = duk_bi_date_prototype_set_time &rArr; duk__push_this_get_timeval &rArr; duk__push_this_get_timeval_tzoffset &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__timeclip
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_top
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>duk_bi_date_prototype_to_json</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_date_prototype_to_json))
<BR><BR>[Stack]<UL><LI>Max Depth = 4128<LI>Call Chain = duk_bi_date_prototype_to_json &rArr; duk_to_primitive &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_primitive
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_null
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_number
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_number
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_top
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_method
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isfinite
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>duk_bi_date_prototype_tostring_shared</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_date_prototype_tostring_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 4936<LI>Call Chain = duk_bi_date_prototype_tostring_shared &rArr; duk__to_string_helper &rArr; duk__push_this_get_timeval_tzoffset &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_string_helper
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__date_get_indirect_magic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>duk_bi_date_prototype_value_of</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_date_prototype_value_of))
<BR><BR>[Stack]<UL><LI>Max Depth = 4848<LI>Call Chain = duk_bi_date_prototype_value_of &rArr; duk__push_this_get_timeval &rArr; duk__push_this_get_timeval_tzoffset &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[519]"></a>duk_bi_date_timeval_in_leeway_range</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_date_timeval_in_leeway_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk_bi_date_timeval_in_leeway_range
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_local_tzoffset_gmtime
</UL>

<P><STRONG><a name="[4df]"></a>duk_bi_date_timeval_in_valid_range</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_date_timeval_in_valid_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk_bi_date_timeval_in_valid_range
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__timeclip
</UL>

<P><STRONG><a name="[38b]"></a>duk_bi_date_timeval_to_parts</STRONG> (Thumb, 510 bytes, Stack size 120 bytes, duktape.o(i.duk_bi_date_timeval_to_parts))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = duk_bi_date_timeval_to_parts &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__year_from_day
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_string_helper
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_part_helper
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_part_helper
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_local_tzoffset_gmtime
</UL>

<P><STRONG><a name="[44a]"></a>duk_bi_date_year_in_valid_range</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_date_year_in_valid_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk_bi_date_year_in_valid_range
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__make_day
</UL>

<P><STRONG><a name="[c6]"></a>duk_bi_duktape_object_act</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_duktape_object_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 4320<LI>Call Chain = duk_bi_duktape_object_act &rArr; duk_to_int &rArr; duk__api_coerce_d2i &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_inspect_callstack_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>duk_bi_duktape_object_compact</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_duktape_object_compact))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = duk_bi_duktape_object_compact &rArr; duk_compact &rArr; duk_hobject_compact_props &rArr; duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_compact
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>duk_bi_duktape_object_dec</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_duktape_object_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = duk_bi_duktape_object_dec &rArr; duk_bi_json_parse_helper &rArr; duk__dec_value &rArr; duk__dec_object &rArr;  duk__dec_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_valid_index
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hex_decode
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_base64_decode
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_parse_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>duk_bi_duktape_object_enc</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_duktape_object_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 5448<LI>Call Chain = duk_bi_duktape_object_enc &rArr; duk_bi_json_stringify_helper &rArr; duk__enc_value &rArr; duk__enc_object &rArr;  duk__enc_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_valid_index
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hex_encode
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_base64_encode
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>duk_bi_duktape_object_fin</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_duktape_object_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 3256<LI>Call Chain = duk_bi_duktape_object_fin &rArr; duk_set_finalizer &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_finalizer
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_finalizer
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>duk_bi_duktape_object_gc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_duktape_object_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = duk_bi_duktape_object_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_true
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_uint
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>duk_bi_duktape_object_info</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_duktape_object_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 3344<LI>Call Chain = duk_bi_duktape_object_info &rArr; duk_inspect_value &rArr; duk__inspect_multiple_uint &rArr; duk_put_prop &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_inspect_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>duk_bi_error_constructor_shared</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_error_constructor_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 4168<LI>Call Chain = duk_bi_error_constructor_shared &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_constructor_call
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object_helper
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_augment_error_create
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>duk_bi_error_prototype_filename_getter</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_error_prototype_filename_getter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = duk_bi_error_prototype_filename_getter &rArr; duk__error_getter_helper &rArr; duk_pop_2 &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>duk_bi_error_prototype_filename_setter</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_error_prototype_filename_setter))
<BR><BR>[Stack]<UL><LI>Max Depth = 3568<LI>Call Chain = duk_bi_error_prototype_filename_setter &rArr; duk__error_setter_helper &rArr; duk_def_prop &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_setter_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>duk_bi_error_prototype_linenumber_getter</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_error_prototype_linenumber_getter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = duk_bi_error_prototype_linenumber_getter &rArr; duk__error_getter_helper &rArr; duk_pop_2 &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>duk_bi_error_prototype_linenumber_setter</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_error_prototype_linenumber_setter))
<BR><BR>[Stack]<UL><LI>Max Depth = 3568<LI>Call Chain = duk_bi_error_prototype_linenumber_setter &rArr; duk__error_setter_helper &rArr; duk_def_prop &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_setter_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>duk_bi_error_prototype_stack_getter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_error_prototype_stack_getter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = duk_bi_error_prototype_stack_getter &rArr; duk__error_getter_helper &rArr; duk_pop_2 &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>duk_bi_error_prototype_stack_setter</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_error_prototype_stack_setter))
<BR><BR>[Stack]<UL><LI>Max Depth = 3568<LI>Call Chain = duk_bi_error_prototype_stack_setter &rArr; duk__error_setter_helper &rArr; duk_def_prop &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_setter_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>duk_bi_error_prototype_to_string</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_error_prototype_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 4152<LI>Call Chain = duk_bi_error_prototype_to_string &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject_promote_mask
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_empty
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>duk_bi_function_constructor</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, duktape.o(i.duk_bi_function_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 6488<LI>Call Chain = duk_bi_function_constructor &rArr; duk_js_compile &rArr; duk_safe_call &rArr; duk_handle_safe_call &rArr; duk__handle_safe_call_error &rArr; duk__safe_call_adjust_valstack &rArr; duk_set_top_unsafe &rArr; duk_refzero_check_fast &rArr; duk_heap_process_finalize_list &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_join
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_empty
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_compile
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_1
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>duk_bi_function_prototype</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, duktape.o(i.duk_bi_function_prototype))
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>duk_bi_function_prototype_apply</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, duktape.o(i.duk_bi_function_prototype_apply))
<BR>[Address Reference Count : 2]<UL><LI> duktape.o(i.duk_hthread_create_builtin_objects)
<LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>duk_bi_function_prototype_bind</STRONG> (Thumb, 790 bytes, Stack size 48 bytes, duktape.o(i.duk_bi_function_prototype_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = duk_bi_function_prototype_bind &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_function
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_int
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_thrower
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_empty
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hboundfunc
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_string_notsymbol
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc_checked
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_copy_tvals_incref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>duk_bi_function_prototype_call</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, duktape.o(i.duk_bi_function_prototype_call))
<BR>[Address Reference Count : 2]<UL><LI> duktape.o(i.duk_hthread_create_builtin_objects)
<LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>duk_bi_function_prototype_to_string</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_function_prototype_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 4168<LI>Call Chain = duk_bi_function_prototype_to_string &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_sprintf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lightfunc_tostring
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>duk_bi_global_object_decode_uri</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_global_object_decode_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = duk_bi_global_object_decode_uri &rArr; duk__transform_helper &rArr; duk_buffer_to_string &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>duk_bi_global_object_decode_uri_component</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_global_object_decode_uri_component))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = duk_bi_global_object_decode_uri_component &rArr; duk__transform_helper &rArr; duk_buffer_to_string &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>duk_bi_global_object_encode_uri</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_global_object_encode_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = duk_bi_global_object_encode_uri &rArr; duk__transform_helper &rArr; duk_buffer_to_string &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>duk_bi_global_object_encode_uri_component</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_global_object_encode_uri_component))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = duk_bi_global_object_encode_uri_component &rArr; duk__transform_helper &rArr; duk_buffer_to_string &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>duk_bi_global_object_escape</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_global_object_escape))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = duk_bi_global_object_escape &rArr; duk__transform_helper &rArr; duk_buffer_to_string &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>duk_bi_global_object_eval</STRONG> (Thumb, 446 bytes, Stack size 56 bytes, duktape.o(i.duk_bi_global_object_eval))
<BR><BR>[Stack]<UL><LI>Max Depth = 6504<LI>Call Chain = duk_bi_global_object_eval &rArr; duk_js_compile &rArr; duk_safe_call &rArr; duk_handle_safe_call &rArr; duk__handle_safe_call_error &rArr; duk__safe_call_adjust_valstack &rArr; duk_set_top_unsafe &rArr; duk_refzero_check_fast &rArr; duk_heap_process_finalize_list &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject_bidx
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_init_activation_environment_records_delayed
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_compile
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_get_activation_for_level
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hdecenv_alloc
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_call_unprotected_nargs
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hstring_notsymbol
</UL>
<BR>[Address Reference Count : 2]<UL><LI> duktape.o(i.duk_hthread_create_builtin_objects)
<LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>duk_bi_global_object_is_finite</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_global_object_is_finite))
<BR><BR>[Stack]<UL><LI>Max Depth = 2896<LI>Call Chain = duk_bi_global_object_is_finite &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isfinite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>duk_bi_global_object_is_nan</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_global_object_is_nan))
<BR><BR>[Stack]<UL><LI>Max Depth = 2896<LI>Call Chain = duk_bi_global_object_is_nan &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>duk_bi_global_object_parse_float</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_global_object_parse_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 4160<LI>Call Chain = duk_bi_global_object_parse_float &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>duk_bi_global_object_parse_int</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_global_object_parse_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 4160<LI>Call Chain = duk_bi_global_object_parse_int &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int32
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_nan
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>duk_bi_global_object_unescape</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_global_object_unescape))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = duk_bi_global_object_unescape &rArr; duk__transform_helper &rArr; duk_buffer_to_string &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>duk_bi_json_object_parse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_json_object_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4976<LI>Call Chain = duk_bi_json_object_parse &rArr; duk_bi_json_parse_helper &rArr; duk__dec_value &rArr; duk__dec_object &rArr;  duk__dec_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_parse_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>duk_bi_json_object_stringify</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_json_object_stringify))
<BR><BR>[Stack]<UL><LI>Max Depth = 5448<LI>Call Chain = duk_bi_json_object_stringify &rArr; duk_bi_json_stringify_helper &rArr; duk__enc_value &rArr; duk__enc_object &rArr;  duk__enc_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[51f]"></a>duk_bi_json_parse_helper</STRONG> (Thumb, 208 bytes, Stack size 72 bytes, duktape.o(i.duk_bi_json_parse_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 4968<LI>Call Chain = duk_bi_json_parse_helper &rArr; duk__dec_value &rArr; duk__dec_object &rArr;  duk__dec_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_value
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_syntax_error
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_function
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m2
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_object_parse
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_dec
</UL>

<P><STRONG><a name="[521]"></a>duk_bi_json_stringify_helper</STRONG> (Thumb, 642 bytes, Stack size 416 bytes, duktape.o(i.duk_bi_json_stringify_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 5432<LI>Call Chain = duk_bi_json_stringify_helper &rArr; duk__enc_value &rArr; duk__enc_object &rArr;  duk__enc_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_allow_into_proplist
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_substring
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_bare_object
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_array
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_next
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_number
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_enum
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_empty
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_string_notsymbol
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_init_pushbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_object_stringify
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_enc
</UL>

<P><STRONG><a name="[e5]"></a>duk_bi_math_object_clz32</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_math_object_clz32))
<BR><BR>[Stack]<UL><LI>Max Depth = 2912<LI>Call Chain = duk_bi_math_object_clz32 &rArr; duk_to_uint32 &rArr; duk_js_touint32 &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint32
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>duk_bi_math_object_hypot</STRONG> (Thumb, 328 bytes, Stack size 88 bytes, duktape.o(i.duk_bi_math_object_hypot))
<BR><BR>[Stack]<UL><LI>Max Depth = 2960<LI>Call Chain = duk_bi_math_object_hypot &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_number
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_fmax
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>duk_bi_math_object_imul</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_math_object_imul))
<BR><BR>[Stack]<UL><LI>Max Depth = 2920<LI>Call Chain = duk_bi_math_object_imul &rArr; duk_to_uint32 &rArr; duk_js_touint32 &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint32
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>duk_bi_math_object_max</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_math_object_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 2952<LI>Call Chain = duk_bi_math_object_max &rArr; duk__math_minmax &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__math_minmax
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>duk_bi_math_object_min</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_math_object_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 2952<LI>Call Chain = duk_bi_math_object_min &rArr; duk__math_minmax &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__math_minmax
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>duk_bi_math_object_onearg_shared</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_math_object_onearg_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 2904<LI>Call Chain = duk_bi_math_object_onearg_shared &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>duk_bi_math_object_random</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_math_object_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = duk_bi_math_object_random &rArr; duk_util_tinyrandom_get_double &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_util_tinyrandom_get_double
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>duk_bi_math_object_sign</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_math_object_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 2896<LI>Call Chain = duk_bi_math_object_sign &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_is_nan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>duk_bi_math_object_twoarg_shared</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, duktape.o(i.duk_bi_math_object_twoarg_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 2912<LI>Call Chain = duk_bi_math_object_twoarg_shared &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>duk_bi_native_function_length</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_native_function_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = duk_bi_native_function_length &rArr; duk_push_uint &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_borrowed_this_tval
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>duk_bi_native_function_name</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_native_function_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = duk_bi_native_function_name &rArr; duk_push_lightfunc_name &rArr; duk_push_lightfunc_name_raw &rArr; duk_concat &rArr; duk__concat_and_join_helper &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lightfunc_name
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_empty
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_borrowed_this_tval
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>duk_bi_nodejs_buffer_byte_length</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_nodejs_buffer_byte_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 4176<LI>Call Chain = duk_bi_nodejs_buffer_byte_length &rArr; duk_to_lstring &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_lstring
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>duk_bi_nodejs_buffer_concat</STRONG> (Thumb, 446 bytes, Stack size 56 bytes, duktape.o(i.duk_bi_nodejs_buffer_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = duk_bi_nodejs_buffer_concat &rArr; duk__require_bufobj_value &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_bufobj_buffer
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_value
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_zero
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_bufobj_raw
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hbuffer
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>duk_bi_nodejs_buffer_constructor</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_nodejs_buffer_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4928<LI>Call Chain = duk_bi_nodejs_buffer_constructor &rArr; duk__hbufobj_fixed_from_argvalue &rArr; duk_to_int_clamped &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_fixed_from_argvalue
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_prototype
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_object
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject_bidx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>duk_bi_nodejs_buffer_copy</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, duktape.o(i.duk_bi_nodejs_buffer_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = duk_bi_nodejs_buffer_copy &rArr; duk__require_bufobj_this &rArr; duk__getrequire_bufobj_this &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_value
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_this
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>duk_bi_nodejs_buffer_fill</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, duktape.o(i.duk_bi_nodejs_buffer_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 4968<LI>Call Chain = duk_bi_nodejs_buffer_fill &rArr; duk__clamp_startend_nonegidx_noshift &rArr; duk_to_int_clamped &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_this
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__clamp_startend_nonegidx_noshift
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint32
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_lstring
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_string_notsymbol
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>duk_bi_nodejs_buffer_is_buffer</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_nodejs_buffer_is_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = duk_bi_nodejs_buffer_is_buffer &rArr; duk_get_hobject &rArr; duk__get_tagged_heaphdr_raw &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_prototype_chain_contains
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>duk_bi_nodejs_buffer_is_encoding</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_nodejs_buffer_is_encoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 4160<LI>Call Chain = duk_bi_nodejs_buffer_is_encoding &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>duk_bi_nodejs_buffer_tojson</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, duktape.o(i.duk_bi_nodejs_buffer_tojson))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = duk_bi_nodejs_buffer_tojson &rArr; duk__require_bufobj_this &rArr; duk__getrequire_bufobj_this &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_this
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_null
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_harray_with_size_outptr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>duk_bi_nodejs_buffer_tostring</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, duktape.o(i.duk_bi_nodejs_buffer_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960<LI>Call Chain = duk_bi_nodejs_buffer_tostring &rArr; duk__clamp_startend_nonegidx_noshift &rArr; duk_to_int_clamped &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_bufobj_this
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__clamp_startend_nonegidx_noshift
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_textdecoder_decode_utf8_nodejs
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_nozero
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>duk_bi_nodejs_buffer_write</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, duktape.o(i.duk_bi_nodejs_buffer_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = duk_bi_nodejs_buffer_write &rArr; duk__resolve_offset_opt_length &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_offset_opt_length
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_this
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_lstring_notsymbol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>duk_bi_number_constructor</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_number_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 3000<LI>Call Chain = duk_bi_number_constructor &rArr; duk_xdef_prop_stridx_short_raw &rArr; duk_xdef_prop_stridx &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_constructor_call
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>duk_bi_number_prototype_to_exponential</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_number_prototype_to_exponential))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = duk_bi_number_prototype_to_exponential &rArr; duk_to_int_check_range &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_number_plain
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_check_range
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>duk_bi_number_prototype_to_fixed</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_number_prototype_to_fixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = duk_bi_number_prototype_to_fixed &rArr; duk_to_int_check_range &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_number_plain
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_check_range
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>duk_bi_number_prototype_to_locale_string</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_number_prototype_to_locale_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896<LI>Call Chain = duk_bi_number_prototype_to_locale_string &rArr; duk_bi_number_prototype_to_string &rArr; duk_to_int_check_range &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>duk_bi_number_prototype_to_precision</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_number_prototype_to_precision))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = duk_bi_number_prototype_to_precision &rArr; duk_to_int_check_range &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_number_plain
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_check_range
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>duk_bi_number_prototype_to_string</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_number_prototype_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = duk_bi_number_prototype_to_string &rArr; duk_to_int_check_range &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_number_plain
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_check_range
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_locale_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>duk_bi_number_prototype_value_of</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_number_prototype_value_of))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = duk_bi_number_prototype_value_of &rArr; duk__push_this_number_plain &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_number_plain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>duk_bi_object_constructor</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_object_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 3072<LI>Call Chain = duk_bi_object_constructor &rArr; duk_to_object &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_constructor_call
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type_mask
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>duk_bi_object_constructor_assign</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_object_constructor_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 3392<LI>Call Chain = duk_bi_object_constructor_assign &rArr; duk_enum &rArr; duk_hobject_enumerator_create &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_next
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type_mask
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_enum
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top_require_min
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>duk_bi_object_constructor_create</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_object_constructor_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4872<LI>Call Chain = duk_bi_object_constructor_create &rArr; duk_bi_object_constructor_define_properties &rArr; duk_hobject_prepare_property_descriptor &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject_accept_mask
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object_helper_proto
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_promote_plain
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_properties
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>duk_bi_object_constructor_define_properties</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, duktape.o(i.duk_bi_object_constructor_define_properties))
<BR><BR>[Stack]<UL><LI>Max Depth = 4856<LI>Call Chain = duk_bi_object_constructor_define_properties &rArr; duk_hobject_prepare_property_descriptor &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_next
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_enum
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject_promote_mask
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_prepare_property_descriptor
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>duk_bi_object_constructor_define_property</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, duktape.o(i.duk_bi_object_constructor_define_property))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = duk_bi_object_constructor_define_property &rArr; duk_hobject_prepare_property_descriptor &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_property_key_hstring
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject_promote_mask
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_prepare_property_descriptor
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>duk_bi_object_constructor_get_own_property_descriptor</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_object_constructor_get_own_property_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 3296<LI>Call Chain = duk_bi_object_constructor_get_own_property_descriptor &rArr; duk_hobject_object_get_own_property_descriptor &rArr; duk_put_prop_stridx_short_raw &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_get_own_property_descriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>duk_bi_object_constructor_is</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_object_constructor_is))
<BR><BR>[Stack]<UL><LI>Max Depth = 2992<LI>Call Chain = duk_bi_object_constructor_is &rArr; duk_samevalue &rArr; duk_js_equals_helper &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_samevalue
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>duk_bi_object_constructor_is_extensible</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_object_constructor_is_extensible))
<BR><BR>[Stack]<UL><LI>Max Depth = 3136<LI>Call Chain = duk_bi_object_constructor_is_extensible &rArr; duk_require_hobject_accept_mask &rArr; duk__get_hobject_promote_mask_raw &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject_accept_mask
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>duk_bi_object_constructor_is_sealed_frozen_shared</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_object_constructor_is_sealed_frozen_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = duk_bi_object_constructor_is_sealed_frozen_shared &rArr; duk_get_hobject &rArr; duk__get_tagged_heaphdr_raw &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type_mask
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_is_sealed_frozen_helper
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>duk_bi_object_constructor_keys_shared</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_object_constructor_keys_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = duk_bi_object_constructor_keys_shared &rArr; duk_pop_2 &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_method
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hobject
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject_promote_mask
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_proxy_ownkeys_postprocess
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_proxy_check
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_enumerated_keys
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>duk_bi_object_constructor_prevent_extensions</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_object_constructor_prevent_extensions))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = duk_bi_object_constructor_prevent_extensions &rArr; duk_hobject_compact_props &rArr; duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_true
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_check_type_mask
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_compact_props
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>duk_bi_object_constructor_seal_freeze_shared</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_object_constructor_seal_freeze_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = duk_bi_object_constructor_seal_freeze_shared &rArr; duk_seal_freeze_raw &rArr; duk_hobject_object_seal_freeze_helper &rArr; duk__abandon_array_checked &rArr; duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_seal_freeze_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>duk_bi_object_getprototype_shared</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_object_getprototype_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 3112<LI>Call Chain = duk_bi_object_getprototype_shared &rArr; duk_push_this_coercible_to_object &rArr; duk_to_hobject &rArr; duk_to_object &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_null
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_object
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>duk_bi_object_prototype_defineaccessor</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_object_prototype_defineaccessor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4280<LI>Call Chain = duk_bi_object_prototype_defineaccessor &rArr; duk_require_function &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_function
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_def_prop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>duk_bi_object_prototype_has_own_property</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_object_prototype_has_own_property))
<BR><BR>[Stack]<UL><LI>Max Depth = 3152<LI>Call Chain = duk_bi_object_prototype_has_own_property &rArr; duk_hobject_object_ownprop_helper &rArr; duk_push_this_coercible_to_object &rArr; duk_to_hobject &rArr; duk_to_object &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_ownprop_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>duk_bi_object_prototype_is_prototype_of</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_object_prototype_is_prototype_of))
<BR><BR>[Stack]<UL><LI>Max Depth = 3112<LI>Call Chain = duk_bi_object_prototype_is_prototype_of &rArr; duk_push_this_coercible_to_object &rArr; duk_to_hobject &rArr; duk_to_object &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_false
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_object
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_prototype_chain_contains
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>duk_bi_object_prototype_lookupaccessor</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_object_prototype_lookupaccessor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = duk_bi_object_prototype_lookupaccessor &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prototype
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_desc
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>duk_bi_object_prototype_property_is_enumerable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_object_prototype_property_is_enumerable))
<BR><BR>[Stack]<UL><LI>Max Depth = 3152<LI>Call Chain = duk_bi_object_prototype_property_is_enumerable &rArr; duk_hobject_object_ownprop_helper &rArr; duk_push_this_coercible_to_object &rArr; duk_to_hobject &rArr; duk_to_object &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_ownprop_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>duk_bi_object_prototype_to_locale_string</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_object_prototype_to_locale_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 4064<LI>Call Chain = duk_bi_object_prototype_to_locale_string &rArr; duk_call_method &rArr; duk_handle_call_unprotected &rArr; duk__handle_call_raw &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_method
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_object
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>duk_bi_object_prototype_to_string</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_object_prototype_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = duk_bi_object_prototype_to_string &rArr; duk_push_class_string_tval &rArr; duk_push_sprintf &rArr;  duk_push_vsprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_class_string_tval
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_to_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>duk_bi_object_prototype_value_of</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_object_prototype_value_of))
<BR><BR>[Stack]<UL><LI>Max Depth = 3096<LI>Call Chain = duk_bi_object_prototype_value_of &rArr; duk_push_this_coercible_to_object &rArr; duk_to_hobject &rArr; duk_to_object &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_object
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>duk_bi_object_setprototype_shared</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_object_setprototype_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 3152<LI>Call Chain = duk_bi_object_setprototype_shared &rArr; duk_require_hobject_accept_mask &rArr; duk__get_hobject_promote_mask_raw &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_true
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_false
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type_mask
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_check_type_mask
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject_accept_mask
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_check_object_coercible
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_set_prototype_updref
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>duk_bi_performance_now</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_performance_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = duk_bi_performance_now &rArr; duk_time_get_monotonic_time &rArr; duk_bi_date_get_now_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_time_get_monotonic_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>duk_bi_pointer_constructor</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_pointer_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 2992<LI>Call Chain = duk_bi_pointer_constructor &rArr; duk_xdef_prop_stridx_short_raw &rArr; duk_xdef_prop_stridx &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_pointer
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_pointer
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_constructor_call
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object_helper
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>duk_bi_pointer_prototype_tostring_shared</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_pointer_prototype_tostring_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 4168<LI>Call Chain = duk_bi_pointer_prototype_tostring_shared &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>duk_bi_proxy_constructor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_proxy_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = duk_bi_proxy_constructor &rArr; duk_require_constructor_call &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_proxy
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_constructor_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>duk_bi_reflect_apply</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, duktape.o(i.duk_bi_reflect_apply))
<BR>[Address Reference Count : 2]<UL><LI> duktape.o(i.duk_hthread_create_builtin_objects)
<LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>duk_bi_reflect_construct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, duktape.o(i.duk_bi_reflect_construct))
<BR>[Address Reference Count : 2]<UL><LI> duktape.o(i.duk_hthread_create_builtin_objects)
<LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>duk_bi_reflect_object_delete_property</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_reflect_object_delete_property))
<BR><BR>[Stack]<UL><LI>Max Depth = 4168<LI>Call Chain = duk_bi_reflect_object_delete_property &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>duk_bi_reflect_object_get</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_reflect_object_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = duk_bi_reflect_object_get &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_strict_equals
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top_require_min
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>duk_bi_reflect_object_has</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_reflect_object_has))
<BR><BR>[Stack]<UL><LI>Max Depth = 4168<LI>Call Chain = duk_bi_reflect_object_has &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>duk_bi_reflect_object_set</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, duktape.o(i.duk_bi_reflect_object_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = duk_bi_reflect_object_set &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_strict_equals
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top_require_min
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>duk_bi_regexp_constructor</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_regexp_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 5968<LI>Call Chain = duk_bi_regexp_constructor &rArr; duk_regexp_compile &rArr; duk__parse_disjunction &rArr;  duk__parse_disjunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_constructor_call
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_create_instance
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_compile
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_empty
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_1
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>duk_bi_regexp_prototype_exec</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_regexp_prototype_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 4968<LI>Call Chain = duk_bi_regexp_prototype_exec &rArr; duk_regexp_match &rArr; duk__regexp_match_helper &rArr; duk__match_regexp &rArr;  duk__match_regexp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_this_regexp
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_match
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>duk_bi_regexp_prototype_flags</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_regexp_prototype_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 3152<LI>Call Chain = duk_bi_regexp_prototype_flags &rArr; duk_get_prop_stridx_boolean &rArr; duk_get_prop_stridx &rArr; duk_get_prop &rArr; duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_boolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>duk_bi_regexp_prototype_shared_getter</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_regexp_prototype_shared_getter))
<BR><BR>[Stack]<UL><LI>Max Depth = 3144<LI>Call Chain = duk_bi_regexp_prototype_shared_getter &rArr; duk_get_prop_stridx_short_raw &rArr; duk_get_prop_stridx &rArr; duk_get_prop &rArr; duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>duk_bi_regexp_prototype_test</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_regexp_prototype_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 4976<LI>Call Chain = duk_bi_regexp_prototype_test &rArr; duk_regexp_match &rArr; duk__regexp_match_helper &rArr; duk__match_regexp &rArr;  duk__match_regexp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_this_regexp
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_null
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_match
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>duk_bi_regexp_prototype_tostring</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_regexp_prototype_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 3112<LI>Call Chain = duk_bi_regexp_prototype_tostring &rArr; duk_get_prop_stridx &rArr; duk_get_prop &rArr; duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>duk_bi_string_constructor</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_string_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4160<LI>Call Chain = duk_bi_string_constructor &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_constructor_call
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring_acceptsymbol
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_symbol_descriptive_string
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object_helper
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_empty
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>duk_bi_string_constructor_from_char_code</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_string_constructor_from_char_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = duk_bi_string_constructor_from_char_code &rArr; duk__construct_from_codepoints &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__construct_from_codepoints
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>duk_bi_string_constructor_from_code_point</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_string_constructor_from_code_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = duk_bi_string_constructor_from_code_point &rArr; duk__construct_from_codepoints &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__construct_from_codepoints
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>duk_bi_string_prototype_caseconv_shared</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_string_prototype_caseconv_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896<LI>Call Chain = duk_bi_string_prototype_caseconv_shared &rArr; duk_unicode_case_convert_string &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_case_convert_string
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>duk_bi_string_prototype_char_at</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_string_prototype_char_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 4320<LI>Call Chain = duk_bi_string_prototype_char_at &rArr; duk_to_int &rArr; duk__api_coerce_d2i &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_substring
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>duk_bi_string_prototype_char_code_at</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, duktape.o(i.duk_bi_string_prototype_char_code_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = duk_bi_string_prototype_char_code_at &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_nan
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped_raw
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_char_code_at_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>duk_bi_string_prototype_concat</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_string_prototype_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = duk_bi_string_prototype_concat &rArr; duk_concat &rArr; duk__concat_and_join_helper &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>duk_bi_string_prototype_includes</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_string_prototype_includes))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = duk_bi_string_prototype_includes &rArr; duk_to_int_clamped &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__str_tostring_notregexp
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__str_search_shared
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>duk_bi_string_prototype_indexof_shared</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_string_prototype_indexof_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = duk_bi_string_prototype_indexof_shared &rArr; duk_to_int_clamped &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__str_search_shared
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_nan
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>duk_bi_string_prototype_locale_compare</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, duktape.o(i.duk_bi_string_prototype_locale_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = duk_bi_string_prototype_locale_compare &rArr; duk_push_this_coercible_to_string &rArr; duk_to_hstring_m1 &rArr; duk_to_hstring &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>duk_bi_string_prototype_match</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_string_prototype_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = duk_bi_string_prototype_match &rArr; duk_regexp_match &rArr; duk__regexp_match_helper &rArr; duk__match_regexp &rArr;  duk__match_regexp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_regexp_helper
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_null
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_array
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_object
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_int
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_match
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_boolean
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_1
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>duk_bi_string_prototype_repeat</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, duktape.o(i.duk_bi_string_prototype_repeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = duk_bi_string_prototype_repeat &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_int
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_buffer_to_string
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_nozero
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_is_posinf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>duk_bi_string_prototype_replace</STRONG> (Thumb, 1498 bytes, Stack size 136 bytes, duktape.o(i.duk_bi_string_prototype_replace))
<BR><BR>[Stack]<UL><LI>Max Depth = 5096<LI>Call Chain = duk_bi_string_prototype_replace &rArr; duk_regexp_match &rArr; duk__regexp_match_helper &rArr; duk__match_regexp &rArr;  duk__match_regexp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_stack
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_string
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_object
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_function
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_uint
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_buffer_to_string
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring_m1
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_match
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strcache_offset_char2byte
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_boolean
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject_with_class
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_2
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_1
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_init_pushbuf
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_compact
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>duk_bi_string_prototype_search</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_string_prototype_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 4968<LI>Call Chain = duk_bi_string_prototype_search &rArr; duk_regexp_match &rArr; duk__regexp_match_helper &rArr; duk__match_regexp &rArr;  duk__match_regexp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_regexp_helper
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_object
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_match
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_1
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>duk_bi_string_prototype_slice</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_string_prototype_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = duk_bi_string_prototype_slice &rArr; duk_to_int_clamped &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_substring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>duk_bi_string_prototype_split</STRONG> (Thumb, 720 bytes, Stack size 80 bytes, duktape.o(i.duk_bi_string_prototype_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 5040<LI>Call Chain = duk_bi_string_prototype_split &rArr; duk_regexp_match_force_global &rArr; duk__regexp_match_helper &rArr; duk__match_regexp &rArr;  duk__match_regexp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint32
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_array
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_new
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_object
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_uint
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_match_force_global
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject_bidx
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strcache_offset_char2byte
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject_with_class
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>duk_bi_string_prototype_startswith_endswith</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, duktape.o(i.duk_bi_string_prototype_startswith_endswith))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920<LI>Call Chain = duk_bi_string_prototype_startswith_endswith &rArr; duk_to_int_clamped &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__str_tostring_notregexp
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strcache_offset_char2byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>duk_bi_string_prototype_substr</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_string_prototype_substr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = duk_bi_string_prototype_substr &rArr; duk_to_int_clamped &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_substring
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring_m1
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>duk_bi_string_prototype_substring</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_string_prototype_substring))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = duk_bi_string_prototype_substring &rArr; duk_to_int_clamped &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_substring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>duk_bi_string_prototype_to_string</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_string_prototype_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 4288<LI>Call Chain = duk_bi_string_prototype_to_string &rArr; duk_require_hstring_notsymbol &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring_notsymbol
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>duk_bi_string_prototype_trim</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_string_prototype_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = duk_bi_string_prototype_trim &rArr; duk_trim &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_trim
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>duk_bi_textdecoder_constructor</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, duktape.o(i.duk_bi_textdecoder_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = duk_bi_textdecoder_constructor &rArr; duk_require_constructor_call &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__utf8_decode_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_boolean
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_string
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_raw
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type_mask
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_string
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_constructor_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>duk_bi_textdecoder_prototype_decode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_textdecoder_prototype_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = duk_bi_textdecoder_prototype_decode &rArr; duk__decode_helper &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_textdecoder_context
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decode_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>duk_bi_textdecoder_prototype_shared_getter</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_textdecoder_prototype_shared_getter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4360<LI>Call Chain = duk_bi_textdecoder_prototype_shared_getter &rArr; duk__get_textdecoder_context &rArr; duk_require_buffer &rArr; duk__get_buffer_helper &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_textdecoder_context
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>duk_bi_textencoder_constructor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_textencoder_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = duk_bi_textencoder_constructor &rArr; duk_require_constructor_call &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_constructor_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>duk_bi_textencoder_prototype_encode</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, duktape.o(i.duk_bi_textencoder_prototype_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = duk_bi_textencoder_prototype_encode &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__utf8_emit_repl
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_resize_buffer
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_raw
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_object
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_decode_string
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>duk_bi_textencoder_prototype_encoding_getter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_textencoder_prototype_encoding_getter))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = duk_bi_textencoder_prototype_encoding_getter &rArr; duk_push_string &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>duk_bi_thread_constructor</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_thread_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4416<LI>Call Chain = duk_bi_thread_constructor &rArr; duk_push_thread_raw &rArr; duk_hthread_create_builtin_objects &rArr; duk_set_magic &rArr; duk_require_hnatfunc &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_function
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_thread_raw
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject_promote_mask
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>duk_bi_thread_current</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_thread_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = duk_bi_thread_current &rArr; duk_push_current_thread &rArr; duk_push_hobject &rArr; duk_push_tval &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_current_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>duk_bi_thread_resume</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, duktape.o(i.duk_bi_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 4800<LI>Call Chain = duk_bi_thread_resume &rArr; duk_err_type_invalid_state &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_boolean
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_resolve_nonbound_function
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hthread
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_state
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_longjmp
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_augment_error_throw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>duk_bi_thread_yield</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, duktape.o(i.duk_bi_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 4792<LI>Call Chain = duk_bi_thread_yield &rArr; duk_err_type_invalid_state &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_boolean
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_state
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_longjmp
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_augment_error_throw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>duk_bi_type_error_thrower</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_type_error_thrower))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = duk_bi_type_error_thrower &rArr; duk_err_type_invalid_args &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>duk_bi_typedarray_buffer_getter</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_typedarray_buffer_getter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = duk_bi_typedarray_buffer_getter &rArr; duk__getrequire_bufobj_this &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getrequire_bufobj_this
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__autospawn_arraybuffer
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>duk_bi_typedarray_bytelength_getter</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_typedarray_bytelength_getter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = duk_bi_typedarray_bytelength_getter &rArr; duk__getrequire_bufobj_this &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getrequire_bufobj_this
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>duk_bi_typedarray_byteoffset_getter</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_typedarray_byteoffset_getter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = duk_bi_typedarray_byteoffset_getter &rArr; duk__getrequire_bufobj_this &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getrequire_bufobj_this
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>duk_bi_typedarray_constructor</STRONG> (Thumb, 1244 bytes, Stack size 96 bytes, duktape.o(i.duk_bi_typedarray_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = duk_bi_typedarray_constructor &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_raw
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_undefined
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_current_magic
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_constructor_call
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_bufobj_raw
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hbuffer
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_validated_write
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_push_validated_read
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_promote_plain
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>duk_bi_typedarray_set</STRONG> (Thumb, 788 bytes, Stack size 96 bytes, duktape.o(i.duk_bi_typedarray_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4872<LI>Call Chain = duk_bi_typedarray_set &rArr; duk__require_bufobj_this &rArr; duk__getrequire_bufobj_this &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_this
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_nozero
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_validated_write
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_push_validated_read
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_promote_plain
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>duk_bi_uint8array_allocplain</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_bi_uint8array_allocplain))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920<LI>Call Chain = duk_bi_uint8array_allocplain &rArr; duk__hbufobj_fixed_from_argvalue &rArr; duk_to_int_clamped &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_fixed_from_argvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>duk_bi_uint8array_plainof</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, duktape.o(i.duk_bi_uint8array_plainof))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = duk_bi_uint8array_plainof &rArr; duk__require_bufobj_value &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_value
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_buffer
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hbuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[28f]"></a>duk_bw_compact</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, duktape.o(i.duk_bw_compact))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = duk_bw_compact &rArr; duk_hbuffer_resize &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bw_update_ptrs
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_helper
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_string
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_escaped_source
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__construct_from_codepoints
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_case_convert_string
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_compile
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
</UL>

<P><STRONG><a name="[40c]"></a>duk_bw_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, duktape.o(i.duk_bw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = duk_bw_init &rArr; duk__bw_update_ptrs
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bw_update_ptrs
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__initbuffer
</UL>

<P><STRONG><a name="[28b]"></a>duk_bw_init_pushbuf</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, duktape.o(i.duk_bw_init_pushbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = duk_bw_init_pushbuf &rArr; duk_push_buffer_raw &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bw_update_ptrs
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_raw
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hbuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_helper
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_func_valstack_slots
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_string
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_escaped_source
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__construct_from_codepoints
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_case_convert_string
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_compile
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>

<P><STRONG><a name="[416]"></a>duk_bw_insert_ensure_area</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, duktape.o(i.duk_bw_insert_ensure_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = duk_bw_insert_ensure_area &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_insert_raw_area
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__insert_jump_entry
</UL>

<P><STRONG><a name="[419]"></a>duk_bw_insert_ensure_bytes</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, duktape.o(i.duk_bw_insert_ensure_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = duk_bw_insert_ensure_bytes &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_insert_raw_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__insert_u32
</UL>

<P><STRONG><a name="[418]"></a>duk_bw_insert_ensure_slice</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, duktape.o(i.duk_bw_insert_ensure_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = duk_bw_insert_ensure_slice &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_insert_raw_slice
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__insert_slice
</UL>

<P><STRONG><a name="[559]"></a>duk_bw_insert_raw_area</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, duktape.o(i.duk_bw_insert_raw_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk_bw_insert_raw_area &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_insert_ensure_area
</UL>

<P><STRONG><a name="[55a]"></a>duk_bw_insert_raw_bytes</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, duktape.o(i.duk_bw_insert_raw_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk_bw_insert_raw_bytes &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_insert_ensure_bytes
</UL>

<P><STRONG><a name="[55b]"></a>duk_bw_insert_raw_slice</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, duktape.o(i.duk_bw_insert_raw_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk_bw_insert_raw_slice &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_insert_ensure_slice
</UL>

<P><STRONG><a name="[4b9]"></a>duk_bw_remove_raw_slice</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, duktape.o(i.duk_bw_remove_raw_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk_bw_remove_raw_slice &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__remove_slice
</UL>

<P><STRONG><a name="[213]"></a>duk_bw_resize</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, duktape.o(i.duk_bw_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4800<LI>Call Chain = duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bw_update_ptrs
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_resize
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_callback_unescape
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_callback_escape
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_callback_encode_uri
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_callback_decode_uri
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_quote_string
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_newline_indent
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_buffer_data
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_stridx
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_hstring
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_cstring
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_2
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_1
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_string
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_escaped_source
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__construct_from_codepoints
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__appendbuffer_ascii
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__appendbuffer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_u32
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_7bit
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_case_convert_string
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_write_ensure_slice
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_insert_ensure_slice
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_insert_ensure_bytes
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_insert_ensure_area
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
</UL>

<P><STRONG><a name="[21a]"></a>duk_bw_write_ensure_slice</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, duktape.o(i.duk_bw_write_ensure_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = duk_bw_write_ensure_slice &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_write_raw_slice
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_slice
</UL>

<P><STRONG><a name="[55c]"></a>duk_bw_write_raw_slice</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, duktape.o(i.duk_bw_write_raw_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = duk_bw_write_raw_slice &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_write_ensure_slice
</UL>

<P><STRONG><a name="[3ae]"></a>duk_call_construct_postprocess</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, duktape.o(i.duk_call_construct_postprocess))
<BR><BR>[Stack]<UL><LI>Max Depth = 3336<LI>Call Chain = duk_call_construct_postprocess &rArr; duk_err_augment_error_create &rArr; duk__err_augment_builtin_create &rArr; duk__add_compiler_error_line &rArr; duk_put_prop_stridx_short_raw &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_check_type_mask
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_trap_result
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_augment_error_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_return
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
</UL>

<P><STRONG><a name="[434]"></a>duk_call_setup_propcall_error</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, duktape.o(i.duk_call_setup_propcall_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 3272 + In Cycle
<LI>Call Chain = duk_call_setup_propcall_error &rArr;  duk_push_string_readable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_true
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[277]"></a>duk_compact_m1</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, duktape.o(i.duk_compact_m1))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = duk_compact_m1 &rArr; duk_compact &rArr; duk_hobject_compact_props &rArr; duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_compact
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__convert_to_func_template
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__cleanup_varmap
</UL>

<P><STRONG><a name="[4fb]"></a>duk_concat_2</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, duktape.o(i.duk_concat_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + In Cycle
<LI>Call Chain = duk_concat_2 &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_buffer_to_string
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_fixed_buffer_nozero
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_add
</UL>

<P><STRONG><a name="[3a0]"></a>duk_copy_tvals_incref</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, duktape.o(i.duk_copy_tvals_incref))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = duk_copy_tvals_incref &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_bound_chain_for_call
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
</UL>

<P><STRONG><a name="[250]"></a>duk_create_activation_environment_record</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, duktape.o(i.duk_create_activation_environment_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = duk_create_activation_environment_record &rArr; duk_hdecenv_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_find_existing_entry_tval_ptr
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hdecenv_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_env_setup
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_init_activation_environment_records_delayed
</UL>

<P><STRONG><a name="[93]"></a>duk_default_alloc_function</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, duktape.o(i.duk_default_alloc_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = duk_default_alloc_function &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk_create_heap)
</UL>
<P><STRONG><a name="[96]"></a>duk_default_fatal_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, duktape.o(i.duk_default_fatal_handler))
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk_create_heap)
</UL>
<P><STRONG><a name="[95]"></a>duk_default_free_function</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, duktape.o(i.duk_default_free_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = duk_default_free_function &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk_create_heap)
</UL>
<P><STRONG><a name="[94]"></a>duk_default_realloc_function</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, duktape.o(i.duk_default_realloc_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = duk_default_realloc_function &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk_create_heap)
</UL>
<P><STRONG><a name="[36d]"></a>duk_double_fmax</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, duktape.o(i.duk_double_fmax))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk_double_fmax
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__fmax_fixed
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_hypot
</UL>

<P><STRONG><a name="[36e]"></a>duk_double_fmin</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, duktape.o(i.duk_double_fmin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk_double_fmin
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__fmin_fixed
</UL>

<P><STRONG><a name="[27f]"></a>duk_double_is_nan</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, duktape.o(i.duk_double_is_nan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk_double_is_nan
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__compare_number
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tointeger_number
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_sign
</UL>

<P><STRONG><a name="[5a4]"></a>duk_double_is_nan_or_inf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, duktape.o(i.duk_double_is_nan_or_inf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk_double_is_nan_or_inf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tointeger_number
</UL>

<P><STRONG><a name="[5a2]"></a>duk_double_is_nan_or_zero</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, duktape.o(i.duk_double_is_nan_or_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk_double_is_nan_or_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_toboolean
</UL>

<P><STRONG><a name="[4ea]"></a>duk_double_is_nan_zero_inf</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, duktape.o(i.duk_double_is_nan_zero_inf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = duk_double_is_nan_zero_inf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__toint32_touint32_helper
</UL>

<P><STRONG><a name="[54e]"></a>duk_double_is_posinf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, duktape.o(i.duk_double_is_posinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk_double_is_posinf
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_repeat
</UL>

<P><STRONG><a name="[43f]"></a>duk_double_same_sign</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, duktape.o(i.duk_double_same_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = duk_double_same_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_samevalue_number
</UL>

<P><STRONG><a name="[569]"></a>duk_double_signbit</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, duktape.o(i.duk_double_signbit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk_double_signbit
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_trunc_towards_zero
</UL>

<P><STRONG><a name="[4eb]"></a>duk_double_trunc_towards_zero</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, duktape.o(i.duk_double_trunc_towards_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = duk_double_trunc_towards_zero &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_signbit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__toint32_touint32_helper
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tointeger_number
</UL>

<P><STRONG><a name="[33f]"></a>duk_dup_0</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, duktape.o(i.duk_dup_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = duk_dup_0 &rArr; duk_dup &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_boolean_constructor
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reduce_shared
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_fixed_from_argvalue
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_setter_helper
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_search
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_match
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_constructor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_constructor
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_pointer_constructor
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_to_locale_string
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_properties
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_constructor
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_parse_int
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_constructor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_constructor_shared
</UL>

<P><STRONG><a name="[50b]"></a>duk_dup_1</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, duktape.o(i.duk_dup_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = duk_dup_1 &rArr; duk_dup &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reduce_shared
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_search
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_match
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_constructor
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_constructor
</UL>

<P><STRONG><a name="[50c]"></a>duk_dup_2</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, duktape.o(i.duk_dup_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = duk_dup_2 &rArr; duk_dup &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reduce_shared
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
</UL>

<P><STRONG><a name="[2cc]"></a>duk_dup_m2</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, duktape.o(i.duk_dup_m2))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = duk_dup_m2 &rArr; duk_dup &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__finalize_helper
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_get_own_property_descriptor
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_next
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_tostring
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_parse_helper
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_to_json
</UL>

<P><STRONG><a name="[2cb]"></a>duk_dup_m3</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, duktape.o(i.duk_dup_m3))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = duk_dup_m3 &rArr; duk_dup &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
</UL>

<P><STRONG><a name="[32a]"></a>duk_dup_m4</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, duktape.o(i.duk_dup_m4))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = duk_dup_m4 &rArr; duk_dup &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
</UL>

<P><STRONG><a name="[526]"></a>duk_err_augment_error_create</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, duktape.o(i.duk_err_augment_error_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 3320<LI>Call Chain = duk_err_augment_error_create &rArr; duk__err_augment_builtin_create &rArr; duk__add_compiler_error_line &rArr; duk_put_prop_stridx_short_raw &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__err_augment_user
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__err_augment_builtin_create
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_prototype_chain_contains
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_error_object_va_raw
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_construct_postprocess
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_constructor_shared
</UL>

<P><STRONG><a name="[43b]"></a>duk_err_augment_error_throw</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_err_augment_error_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = duk_err_augment_error_throw &rArr; duk__err_augment_user &rArr; duk_insert &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__err_augment_user
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_throw_raw
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_create_and_throw
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_yield
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_resume
</UL>

<P><STRONG><a name="[56b]"></a>duk_err_create_and_throw</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, duktape.o(i.duk_err_create_and_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_stack
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_error_object_raw
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_sync_and_null_currpc
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_setup_ljstate1
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_longjmp
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_augment_error_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error_fmt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>

<P><STRONG><a name="[43d]"></a>duk_err_error</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, duktape.o(i.duk_err_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = duk_err_error &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[4f8]"></a>duk_err_error_alloc_failed</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, duktape.o(i.duk_err_error_alloc_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = duk_err_error_alloc_failed &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__valstack_grow
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_thread_raw
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_raw
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hcompfunc
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hboundfunc
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_alloc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_realloc_props
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_intern_u32_checked
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_intern_checked
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc_checked_zeroed
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc_checked
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_resize
</UL>

<P><STRONG><a name="[3a1]"></a>duk_err_error_internal</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, duktape.o(i.duk_err_error_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = duk_err_error_internal &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__utf8_backtrack
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__utf8_advance
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__match_regexp
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ispec_toregconst_raw
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_longjmp
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_break_or_continue
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_bound_chain_for_call
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_decode_xutf8_checked
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strcache_offset_char2byte
</UL>

<P><STRONG><a name="[1f8]"></a>duk_err_handle_error</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, duktape.o(i.duk_err_handle_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_create_and_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_callback_escape
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_callback_encode_uri
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_callback_decode_uri
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__safe_call_adjust_valstack
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_value
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_number_plain
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_helper
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval_tzoffset
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_with_stmt
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_decl
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_throw_stmt
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_switch_stmt
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_stmt
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_return_stmt
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_regexp_flags
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_raw
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_formals
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_for_stmt
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_disjunction
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_break_or_continue_stmt
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_object_literal
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__nud_array_literal
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_active_label
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_parse_string_literal
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_parse_escape
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_specialfuncs_for_call
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getrequire_bufobj_this
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__fill_lexer_buffer
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__exprtop
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_entry
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__do_compile
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decode_helper
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__declvar_helper
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_helper
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_label
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_primitive
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_resize_buffer
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_object
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hex_decode
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_def_prop
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_check_type_mask
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_base64_encode
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_base64_decode
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_constructor_call
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_compile
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_re_token
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_re_ranges
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tonumber
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_instanceof
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_prepare_property_descriptor
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop_raw
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_trap_result
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_state
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_internal
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_alloc_failed
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textencoder_prototype_encode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_set
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_get
</UL>

<P><STRONG><a name="[25e]"></a>duk_err_handle_error_fmt</STRONG> (Thumb, 54 bytes, Stack size 296 bytes, duktape.o(i.duk_err_handle_error_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + In Cycle
<LI>Call Chain = duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_create_and_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_target_func_and_this_binding
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__putvar_helper
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getvar_helper
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_syntax_error
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_thread_state_update
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_require_type_index
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_index
</UL>

<P><STRONG><a name="[3b8]"></a>duk_err_longjmp</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, duktape.o(i.duk_err_longjmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = duk_err_longjmp &rArr; duk__uncaught_error_aware &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__uncaught_error_aware
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_endfin
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_executor_error
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_throw_raw
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_create_and_throw
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_yield
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_resume
</UL>

<P><STRONG><a name="[20c]"></a>duk_err_range</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, duktape.o(i.duk_err_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_writefield
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_readfield
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_arraybuffer_constructor
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_unshift
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_push
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_constructor
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__valstack_grow
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_new_array_length_checked
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_offset_opt_length
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32_limited
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval_tzoffset
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__patch_trycatch
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_disjunction
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__match_regexp
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__insert_jump_entry
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getconst
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_propdesc
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_identifier_reference
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_entry
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_abc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_bc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_a_b_c
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_objarr_entry
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__construct_from_codepoints
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__concat_and_join_helper
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__comp_recursion_increase
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_callstack_limit_check_slowpath
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_c_recursion_limit_check_slowpath
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_push_fastpath
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__alloctemps
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_vsprintf
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_raw
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_object
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_n
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unpack_array_like
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped_raw
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pack
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_re_token
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_instanceof
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_prototype_chain_contains
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_resize
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat_2
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_repeat
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_lookupaccessor
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_copy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_concat
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
</UL>

<P><STRONG><a name="[56a]"></a>duk_err_range_index</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, duktape.o(i.duk_err_range_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_valid_index
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_top_index
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_top
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
</UL>

<P><STRONG><a name="[48a]"></a>duk_err_range_push_beyond</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, duktape.o(i.duk_err_range_push_beyond))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_helper
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_c_function_raw
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_true
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_thread_raw
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_pointer
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_null
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_nan
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_false
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_raw
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_top
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object_helper
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hcompfunc
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hboundfunc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_bufobj_raw
</UL>

<P><STRONG><a name="[210]"></a>duk_err_require_type_index</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, duktape.o(i.duk_err_require_type_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 4248<LI>Call Chain = duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string_readable
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_hobject_promote_mask_raw
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_buffer_helper
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__api_coerce_d2ui
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__api_coerce_d2i
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_number
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_function
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hthread
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring_notsymbol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject_with_class
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hnatfunc
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hbuffer
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_buffer_data_raw
</UL>

<P><STRONG><a name="[3c0]"></a>duk_err_setup_ljstate1</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, duktape.o(i.duk_err_setup_ljstate1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk_err_setup_ljstate1
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_endfin
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_throw_raw
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_create_and_throw
</UL>

<P><STRONG><a name="[255]"></a>duk_err_type_invalid_args</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, duktape.o(i.duk_err_type_invalid_args))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = duk_err_type_invalid_args &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_safe_call
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_slice_shared
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_boolean_prototype_tostring_shared
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reduce_shared
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__str_tostring_notregexp
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_c_function_raw
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_fixed_from_argvalue
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_specialfuncs_for_call
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_get_idx_func
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_throw_raw
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_proxy
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unpack_array_like
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_seal_freeze_raw
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pcall_method_flags
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top_require_min
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_type_error_thrower
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_to_string
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_shared_getter
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_pointer_prototype_tostring_shared
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_setprototype_shared
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_getprototype_shared
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_tostring
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_fill
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_concat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_native_function_name
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_native_function_length
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_to_string
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_enc
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_dec
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_dataview_constructor
</UL>

<P><STRONG><a name="[557]"></a>duk_err_type_invalid_state</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, duktape.o(i.duk_err_type_invalid_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = duk_err_type_invalid_state &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_yield
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_resume
</UL>

<P><STRONG><a name="[55e]"></a>duk_err_type_invalid_trap_result</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, duktape.o(i.duk_err_type_invalid_trap_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = duk_err_type_invalid_trap_result &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_proxy_ownkeys_postprocess
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_construct_postprocess
</UL>

<P><STRONG><a name="[5af]"></a>duk_error_prototype_from_code</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, duktape.o(i.duk_error_prototype_from_code))
<BR><BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_error_object_va_raw
</UL>

<P><STRONG><a name="[3ad]"></a>duk_error_throw_from_negative_rc</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, duktape.o(i.duk_error_throw_from_negative_rc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = duk_error_throw_from_negative_rc &rArr; duk_error_raw &rArr;  duk_push_error_object_va_raw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_error_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_safe_call_inner
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
</UL>

<P><STRONG><a name="[4ac]"></a>duk_free_hbuffer</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, duktape.o(i.duk_free_hbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = duk_free_hbuffer &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_refzero_hbuffer
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free_heaphdr_raw
</UL>

<P><STRONG><a name="[4aa]"></a>duk_free_hobject</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, duktape.o(i.duk_free_hobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk_free_hobject &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_free_pending
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_process_finalize_list
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free_heaphdr_raw
</UL>

<P><STRONG><a name="[4b1]"></a>duk_free_hstring</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, duktape.o(i.duk_free_hstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = duk_free_hstring &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__sweep_stringtable
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_refzero_hstring
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_free
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free_heaphdr_raw
</UL>

<P><STRONG><a name="[398]"></a>duk_get_borrowed_this_tval</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, duktape.o(i.duk_get_borrowed_this_tval))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_slice_shared
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_promote_this
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getrequire_bufobj_this
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_native_function_name
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_native_function_length
</UL>

<P><STRONG><a name="[483]"></a>duk_get_buffer_data_raw</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, duktape.o(i.duk_get_buffer_data_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + In Cycle
<LI>Call Chain = duk_get_buffer_data_raw &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_require_type_index
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prep_codec_arg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_buffer_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_buffer_data
</UL>

<P><STRONG><a name="[4cf]"></a>duk_get_class_number</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, duktape.o(i.duk_get_class_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = duk_get_class_number &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__str_tostring_notregexp
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_primitive
</UL>

<P><STRONG><a name="[572]"></a>duk_get_hbuffer</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_get_hbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = duk_get_hbuffer &rArr; duk__get_tagged_heaphdr_raw &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_tagged_heaphdr_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_buffer_raw
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_pc2line_query
</UL>

<P><STRONG><a name="[29b]"></a>duk_get_hobject</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_get_hobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = duk_get_hobject &rArr; duk__get_tagged_heaphdr_raw &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_tagged_heaphdr_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_arraybuffer_isview
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__update_default_instance_proto
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_number_plain
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval_tzoffset
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_hobject_promote_mask_raw
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_prototype
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_object
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_compact
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_instanceof
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_augment_error_create
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_constructor
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_setprototype_shared
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_is_prototype_of
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_is_sealed_frozen_shared
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_is_extensible
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_is_buffer
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>

<P><STRONG><a name="[565]"></a>duk_get_hobject_promote_mask</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, duktape.o(i.duk_get_hobject_promote_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 3120<LI>Call Chain = duk_get_hobject_promote_mask &rArr; duk__get_hobject_promote_mask_raw &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_hobject_promote_mask_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_def_prop
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_prepare_property_descriptor
</UL>

<P><STRONG><a name="[4e5]"></a>duk_get_hobject_with_class</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, duktape.o(i.duk_get_hobject_with_class))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = duk_get_hobject_with_class &rArr; duk__get_tagged_heaphdr_raw &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_tagged_heaphdr_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_concat
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_constructor_is_array
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_regexp_helper
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
</UL>

<P><STRONG><a name="[2ec]"></a>duk_get_hstring</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_get_hstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = duk_get_hstring &rArr; duk__get_tagged_heaphdr_raw &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_tagged_heaphdr_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_string
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_compile_raw
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__do_compile
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_lstring
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_property_key_hstring
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring_acceptsymbol
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_proxy_ownkeys_postprocess
</UL>

<P><STRONG><a name="[33a]"></a>duk_get_hstring_notsymbol</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, duktape.o(i.duk_get_hstring_notsymbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = duk_get_hstring_notsymbol &rArr; duk__get_tagged_heaphdr_raw &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_tagged_heaphdr_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_string_notsymbol
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_string_notsymbol
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_eval
</UL>

<P><STRONG><a name="[2e8]"></a>duk_get_prop_stridx</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, duktape.o(i.duk_get_prop_stridx))
<BR><BR>[Stack]<UL><LI>Max Depth = 3104<LI>Call Chain = duk_get_prop_stridx &rArr; duk_get_prop &rArr; duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__defaultvalue_coerce_attempt
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_finalizer
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unpack_array_like
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_prepare_property_descriptor
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_pc2line_query
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_boolean
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_tostring
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_constructor
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_lookupaccessor
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
</UL>

<P><STRONG><a name="[547]"></a>duk_get_prop_stridx_boolean</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, duktape.o(i.duk_get_prop_stridx_boolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 3128<LI>Call Chain = duk_get_prop_stridx_boolean &rArr; duk_get_prop_stridx &rArr; duk_get_prop &rArr; duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_boolean
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_match
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_flags
</UL>

<P><STRONG><a name="[1ee]"></a>duk_get_prop_stridx_short_raw</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, duktape.o(i.duk_get_prop_stridx_short_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 3120<LI>Call Chain = duk_get_prop_stridx_short_raw &rArr; duk_get_prop_stridx &rArr; duk_get_prop &rArr; duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_boolean_prototype_tostring_shared
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_to_string
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__update_default_instance_proto
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_number_plain
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval_tzoffset
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__proxy_check_prop
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_fixed_from_argvalue
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_proxy_for_call
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__finalize_helper
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_compiler_error_line
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_instanceof
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_next
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_to_string
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_search
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_match
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_shared_getter
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_constructor
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_pointer_prototype_tostring_shared
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_to_locale_string
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_keys_shared
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_to_string
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_prototype_to_string
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_to_json
</UL>

<P><STRONG><a name="[33b]"></a>duk_get_string_notsymbol</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, duktape.o(i.duk_get_string_notsymbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = duk_get_string_notsymbol &rArr; duk_get_hstring_notsymbol &rArr; duk__get_tagged_heaphdr_raw &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hstring_notsymbol
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor
</UL>

<P><STRONG><a name="[5ad]"></a>duk_get_top_index_unsafe</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, duktape.o(i.duk_get_top_index_unsafe))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_error_object_va_raw
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_bare_object
</UL>

<P><STRONG><a name="[534]"></a>duk_get_top_require_min</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, duktape.o(i.duk_get_top_require_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk_get_top_require_min &rArr; duk_err_type_invalid_args &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_set
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_get
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_assign
</UL>

<P><STRONG><a name="[513]"></a>duk_get_tval</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, duktape.o(i.duk_get_tval))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = duk_get_tval
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_boolean_prototype_tostring_shared
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_strict_equals
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_samevalue
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped_raw
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string_readable
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tonumber
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval_or_unused
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>

<P><STRONG><a name="[20e]"></a>duk_get_tval_or_unused</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, duktape.o(i.duk_get_tval_or_unused))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tag_check
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_tagged_heaphdr_raw
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_number_raw
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_buffer_helper
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__api_coerce_d2ui
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__api_coerce_d2i
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_number
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_number
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_nan
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_function
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_constructable
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_inspect_value
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type_mask
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_class_number
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_buffer_data_raw
</UL>

<P><STRONG><a name="[574]"></a>duk_get_type_mask_tval</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, duktape.o(i.duk_get_type_mask_tval))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type_mask
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_equals_helper
</UL>

<P><STRONG><a name="[573]"></a>duk_get_type_tval</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, duktape.o(i.duk_get_type_tval))
<BR><BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_inspect_value
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type
</UL>

<P><STRONG><a name="[343]"></a>duk_handle_call_unprotected</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, duktape.o(i.duk_handle_call_unprotected))
<BR><BR>[Stack]<UL><LI>Max Depth = 4032<LI>Call Chain = duk_handle_call_unprotected &rArr; duk__handle_call_raw &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__pcall_method_raw
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__executor_handle_call
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_new
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_method
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_call_unprotected_nargs
</UL>

<P><STRONG><a name="[3ba]"></a>duk_handle_call_unprotected_nargs</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, duktape.o(i.duk_handle_call_unprotected_nargs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = duk_handle_call_unprotected_nargs &rArr;  duk_handle_call_unprotected (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_call_unprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_longjmp
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_eval
</UL>

<P><STRONG><a name="[575]"></a>duk_handle_safe_call</STRONG> (Thumb, 330 bytes, Stack size 248 bytes, duktape.o(i.duk_handle_safe_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 5216<LI>Call Chain = duk_handle_safe_call &rArr; duk__handle_safe_call_error &rArr; duk__safe_call_adjust_valstack &rArr; duk_set_top_unsafe &rArr; duk_refzero_check_fast &rArr; duk_heap_process_finalize_list &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_safe_call_shared_unwind
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_safe_call_inner
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_safe_call_error
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_refzero_check_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_safe_call
</UL>

<P><STRONG><a name="[578]"></a>duk_harray_alloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, duktape.o(i.duk_harray_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = duk_harray_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_alloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_array
</UL>

<P><STRONG><a name="[40a]"></a>duk_has_prop_stridx</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, duktape.o(i.duk_has_prop_stridx))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = duk_has_prop_stridx &rArr; duk_has_prop &rArr; duk_hobject_hasprop &rArr;  duk__get_own_propdesc_raw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_has_prop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
</UL>

<P><STRONG><a name="[579]"></a>duk_hboundfunc_alloc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, duktape.o(i.duk_hboundfunc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = duk_hboundfunc_alloc &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_object_parts
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hboundfunc
</UL>

<P><STRONG><a name="[57a]"></a>duk_hbuffer_alloc</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, duktape.o(i.duk_hbuffer_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = duk_hbuffer_alloc &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_free
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc_zeroed
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_insert_into_heap_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_raw
</UL>

<P><STRONG><a name="[97]"></a>duk_hbuffer_get_dynalloc_ptr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, duktape.o(i.duk_hbuffer_get_dynalloc_ptr))
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk_hbuffer_resize)
</UL>
<P><STRONG><a name="[57c]"></a>duk_hbuffer_refzero</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, duktape.o(i.duk_hbuffer_refzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = duk_hbuffer_refzero &rArr; duk__hbuffer_refzero_helper &rArr; duk__refcount_refzero_hbuffer &rArr; duk_free_hbuffer &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbuffer_refzero_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refcount_finalize_norz
</UL>

<P><STRONG><a name="[4bc]"></a>duk_hbuffer_reset</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, duktape.o(i.duk_hbuffer_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = duk_hbuffer_reset &rArr; duk_hbuffer_resize &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__reset_func_for_pass2
</UL>

<P><STRONG><a name="[1fa]"></a>duk_hbuffer_resize</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, duktape.o(i.duk_hbuffer_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + In Cycle
<LI>Call Chain = duk_hbuffer_resize &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_realloc_indirect
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_alloc_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__reset_labels_to_length
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__initbuffer
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_label
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_resize_buffer
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_pc2line_pack
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_reset
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_compact
</UL>

<P><STRONG><a name="[57d]"></a>duk_hbufobj_alloc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, duktape.o(i.duk_hbufobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = duk_hbufobj_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_alloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_bufobj_raw
</UL>

<P><STRONG><a name="[515]"></a>duk_hbufobj_clamp_bytelength</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, duktape.o(i.duk_hbufobj_clamp_bytelength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = duk_hbufobj_clamp_bytelength
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_writefield
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_slice_shared
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_readfield
</UL>

<P><STRONG><a name="[535]"></a>duk_hbufobj_promote_plain</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, duktape.o(i.duk_hbufobj_promote_plain))
<BR><BR>[Stack]<UL><LI>Max Depth = 3072<LI>Call Chain = duk_hbufobj_promote_plain &rArr; duk_to_object &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_create
</UL>

<P><STRONG><a name="[57e]"></a>duk_hbufobj_push_uint8array_from_plain</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, duktape.o(i.duk_hbufobj_push_uint8array_from_plain))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = duk_hbufobj_push_uint8array_from_plain &rArr; duk_push_buffer_object &rArr;  duk_require_hbuffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_object
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hbuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
</UL>

<P><STRONG><a name="[387]"></a>duk_hbufobj_push_validated_read</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, duktape.o(i.duk_hbufobj_push_validated_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = duk_hbufobj_push_validated_read &rArr; duk_push_uint &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getprop_fastpath_bufobj_tval
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
</UL>

<P><STRONG><a name="[4a5]"></a>duk_hbufobj_validated_write</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, duktape.o(i.duk_hbufobj_validated_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 2960<LI>Call Chain = duk_hbufobj_validated_write &rArr; duk_to_uint8clamped &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint32
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int32
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint8clamped
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m1
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__putprop_fastpath_bufobj_tval
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
</UL>

<P><STRONG><a name="[580]"></a>duk_hcompfunc_alloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, duktape.o(i.duk_hcompfunc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = duk_hcompfunc_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_alloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hcompfunc
</UL>

<P><STRONG><a name="[3b4]"></a>duk_hdecenv_alloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, duktape.o(i.duk_hdecenv_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = duk_hdecenv_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_alloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_catch
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_create_activation_environment_record
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_eval
</UL>

<P><STRONG><a name="[564]"></a>duk_heap_alloc</STRONG> (Thumb, 462 bytes, Stack size 48 bytes, duktape.o(i.duk_heap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = duk_heap_alloc &rArr; duk_heap_free &rArr; duk__free_run_finalizers &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_heap_thread
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_heap_strings
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_util_tinyrandom_prepare_seed
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_util_tinyrandom_get_double
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_time_get_ecmascript_time
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_alloc_unchecked
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_create_heap
</UL>

<P><STRONG><a name="[568]"></a>duk_heap_free</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, duktape.o(i.duk_heap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = duk_heap_free &rArr; duk__free_run_finalizers &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__free_stringtable
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__free_run_finalizers
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__free_finalize_list
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__free_allocated
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free_freelists
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_destroy_heap
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_alloc
</UL>

<P><STRONG><a name="[584]"></a>duk_heap_free_freelists</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, duktape.o(i.duk_heap_free_freelists))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = duk_heap_free_freelists &rArr; duk__heap_free_catcher_freelist &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__heap_free_catcher_freelist
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__heap_free_activation_freelist
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free
</UL>

<P><STRONG><a name="[371]"></a>duk_heap_free_heaphdr_raw</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, duktape.o(i.duk_heap_free_heaphdr_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = duk_heap_free_heaphdr_raw &rArr; duk_free_hobject &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_free_hstring
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_free_hobject
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_free_hbuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__sweep_heap
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__free_finalize_list
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__free_allocated
</UL>

<P><STRONG><a name="[58a]"></a>duk_heap_hashstring</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, duktape.o(i.duk_heap_hashstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = duk_heap_hashstring
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_intern
</UL>

<P><STRONG><a name="[4ad]"></a>duk_heap_insert_into_finalize_list</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, duktape.o(i.duk_heap_insert_into_finalize_list))
<BR><BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__sweep_heap
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_refzero_hobject
</UL>

<P><STRONG><a name="[406]"></a>duk_heap_insert_into_heap_allocated</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, duktape.o(i.duk_heap_insert_into_heap_allocated))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_object_parts
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_process_finalize_list
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_alloc
</UL>

<P><STRONG><a name="[271]"></a>duk_heap_mark_and_sweep</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, duktape.o(i.duk_heap_mark_and_sweep))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + In Cycle
<LI>Call Chain = duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__sweep_stringtable
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__sweep_heap
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_temproots_by_heap_scan
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_roots_heap
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_finalize_list
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_finalizable
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__finalize_refcounts
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__compact_objects
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__clear_finalize_list_flags
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_force_resize
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_process_finalize_list
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free_freelists
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_voluntary_gc
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_realloc_indirect
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_realloc
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_free
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_gc
</UL>

<P><STRONG><a name="[4d1]"></a>duk_heap_mem_alloc</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, duktape.o(i.duk_heap_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_voluntary_gc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__strtable_alloc_hstring
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_init_stacks
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_alloc_unchecked
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_realloc_props
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc_zeroed
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc_checked
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_alloc
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hboundfunc_alloc
</UL>

<P><STRONG><a name="[3f9]"></a>duk_heap_mem_alloc_checked</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, duktape.o(i.duk_heap_mem_alloc_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = duk_heap_mem_alloc_checked &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_alloc_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hthread_catcher_alloc_slow
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hthread_activation_alloc_slow
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
</UL>

<P><STRONG><a name="[3ef]"></a>duk_heap_mem_alloc_checked_zeroed</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, duktape.o(i.duk_heap_mem_alloc_checked_zeroed))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc_zeroed
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_alloc_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_alloc_init
</UL>

<P><STRONG><a name="[57b]"></a>duk_heap_mem_alloc_zeroed</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, duktape.o(i.duk_heap_mem_alloc_zeroed))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_alloc_unchecked
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc_checked_zeroed
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_alloc
</UL>

<P><STRONG><a name="[3e6]"></a>duk_heap_mem_free</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, duktape.o(i.duk_heap_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk_heap_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__heap_free_catcher_freelist
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__heap_free_activation_freelist
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_init_stacks
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_realloc_props
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_free
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_alloc
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_free_hstring
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_free_hobject
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_free_hbuffer
</UL>

<P><STRONG><a name="[4d6]"></a>duk_heap_mem_realloc</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, duktape.o(i.duk_heap_mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = duk_heap_mem_realloc &rArr;  duk__check_voluntary_gc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_voluntary_gc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__strtable_shrink_inplace
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__strtable_grow_inplace
</UL>

<P><STRONG><a name="[4be]"></a>duk_heap_mem_realloc_indirect</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, duktape.o(i.duk_heap_mem_realloc_indirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = duk_heap_mem_realloc_indirect &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_voluntary_gc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resize_valstack
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_resize
</UL>

<P><STRONG><a name="[4ae]"></a>duk_heap_process_finalize_list</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, duktape.o(i.duk_heap_process_finalize_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = duk_heap_process_finalize_list &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refcount_finalize_norz
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_run_finalizer
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_remove_from_finalize_list
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_insert_into_heap_allocated
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_free_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_refzero_hobject
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_refzero_check_slow
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_refzero_check_fast
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
</UL>

<P><STRONG><a name="[587]"></a>duk_heap_remove_from_finalize_list</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, duktape.o(i.duk_heap_remove_from_finalize_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = duk_heap_remove_from_finalize_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_process_finalize_list
</UL>

<P><STRONG><a name="[4ab]"></a>duk_heap_remove_from_heap_allocated</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, duktape.o(i.duk_heap_remove_from_heap_allocated))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_refzero_hobject
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_refzero_hbuffer
</UL>

<P><STRONG><a name="[375]"></a>duk_heap_run_finalizer</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, duktape.o(i.duk_heap_run_finalizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4800 + In Cycle
<LI>Call Chain = duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_safe_call
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__free_run_finalizers
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_process_finalize_list
</UL>

<P><STRONG><a name="[4b6]"></a>duk_heap_strcache_offset_char2byte</STRONG> (Thumb, 396 bytes, Stack size 88 bytes, duktape.o(i.duk_heap_strcache_offset_char2byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = duk_heap_strcache_offset_char2byte &rArr; duk_hstring_get_charlen &rArr; duk__hstring_get_charlen_slowpath &rArr; duk_unicode_unvalidated_utf8_length
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__scan_forwards
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__scan_backwards
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__str_search_shared
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_substring
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_char_code_at_raw
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_startswith_endswith
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
</UL>

<P><STRONG><a name="[4af]"></a>duk_heap_strcache_string_remove</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, duktape.o(i.duk_heap_strcache_string_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = duk_heap_strcache_string_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__sweep_stringtable
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_refzero_hstring
</UL>

<P><STRONG><a name="[586]"></a>duk_heap_strtable_force_resize</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, duktape.o(i.duk_heap_strtable_force_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = duk_heap_strtable_force_resize &rArr; duk__strtable_resize_check &rArr; duk__strtable_shrink_inplace &rArr; duk_heap_mem_realloc &rArr;  duk__check_voluntary_gc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__strtable_resize_check
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mark_and_sweep
</UL>

<P><STRONG><a name="[377]"></a>duk_heap_strtable_free</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, duktape.o(i.duk_heap_strtable_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = duk_heap_strtable_free &rArr; duk_free_hstring &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_free
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_free_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__free_stringtable
</UL>

<P><STRONG><a name="[400]"></a>duk_heap_strtable_intern</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, duktape.o(i.duk_heap_strtable_intern))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__strtable_do_intern
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_hashstring
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_heap_strings
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_intern_u32
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_intern_checked
</UL>

<P><STRONG><a name="[58b]"></a>duk_heap_strtable_intern_checked</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, duktape.o(i.duk_heap_strtable_intern_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = duk_heap_strtable_intern_checked &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_intern
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_alloc_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_substring
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
</UL>

<P><STRONG><a name="[58c]"></a>duk_heap_strtable_intern_u32</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, duktape.o(i.duk_heap_strtable_intern_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_intern
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_realloc_props
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_intern_u32_checked
</UL>

<P><STRONG><a name="[58d]"></a>duk_heap_strtable_intern_u32_checked</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, duktape.o(i.duk_heap_strtable_intern_u32_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = duk_heap_strtable_intern_u32_checked &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_intern_u32
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_alloc_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
</UL>

<P><STRONG><a name="[4b0]"></a>duk_heap_strtable_unlink</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, duktape.o(i.duk_heap_strtable_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk_heap_strtable_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_refzero_hstring
</UL>

<P><STRONG><a name="[4db]"></a>duk_heap_strtable_unlink_prev</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, duktape.o(i.duk_heap_strtable_unlink_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = duk_heap_strtable_unlink_prev
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__sweep_stringtable
</UL>

<P><STRONG><a name="[36c]"></a>duk_heaphdr_refcount_finalize_norz</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, duktape.o(i.duk_heaphdr_refcount_finalize_norz))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = duk_heaphdr_refcount_finalize_norz &rArr; duk_hobject_refcount_finalize_norz &rArr; duk__decref_tvals_norz &rArr; duk_heaphdr_refzero_norz &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refcount_finalize_norz
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__finalize_refcounts
</UL>

<P><STRONG><a name="[259]"></a>duk_heaphdr_refzero</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, duktape.o(i.duk_heaphdr_refzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = duk_heaphdr_refzero &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__heaphdr_refzero_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_logical_not
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_bitwise_not
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_bitwise_binary_op
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_unary_op
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_binary_op
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_add
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_int_uint_helper
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__putvar_helper
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__putprop_shallow_fastpath_array_tval
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prepost_incdec_var_helper
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prepost_incdec_reg_helper
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__pop_unsafe_raw
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__pop_2_unsafe_raw
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_promote_this
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_yield
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_return
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_put_array_length_smaller
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_endtry
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_endcatch
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_longjmp
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__declvar_helper
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_setup_act_attempt_tailcall
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_undefined
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint32
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int32
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_boolean
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_copy
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped_raw
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refcount_finalize_norz
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop_raw
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal_arridx
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_yield
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_resume
</UL>

<P><STRONG><a name="[2e6]"></a>duk_heaphdr_refzero_norz</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, duktape.o(i.duk_heaphdr_refzero_norz))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = duk_heaphdr_refzero_norz &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__heaphdr_refzero_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_catcher_regs_norz
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__pop_n_unsafe_raw
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_safe_call_error
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decref_tvals_norz
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top_unsafe
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_n
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refcount_finalize_norz
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop_raw
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
</UL>

<P><STRONG><a name="[48b]"></a>duk_hnatfunc_alloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, duktape.o(i.duk_hnatfunc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = duk_hnatfunc_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_alloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_c_function_raw
</UL>

<P><STRONG><a name="[58e]"></a>duk_hobject_alloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, duktape.o(i.duk_hobject_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = duk_hobject_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_alloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object_helper
</UL>

<P><STRONG><a name="[581]"></a>duk_hobject_alloc_unchecked</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, duktape.o(i.duk_hobject_alloc_unchecked))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = duk_hobject_alloc_unchecked &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_object_parts
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc_zeroed
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_alloc
</UL>

<P><STRONG><a name="[486]"></a>duk_hobject_compact_props</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, duktape.o(i.duk_hobject_compact_props))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = duk_hobject_compact_props &rArr; duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_default_h_size
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__count_used_e_keys
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__compute_a_stats
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__abandon_array_density_check
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_realloc_props
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__protected_compact_object
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_compact
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_seal_freeze_raw
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_prevent_extensions
</UL>

<P><STRONG><a name="[539]"></a>duk_hobject_define_property_helper</STRONG> (Thumb, 3296 bytes, Stack size 168 bytes, duktape.o(i.duk_hobject_define_property_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 3472 + In Cycle
<LI>Call Chain = duk_hobject_define_property_helper &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_new_array_length_checked
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_arguments_map
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_alloc_entry_checked
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_put_array_length_smaller
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__abandon_array_checked
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_refzero_check_slow
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_putvar_envrec
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_equals_helper
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refzero_norz
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refzero
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop_raw
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero_norz
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_def_prop
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_property
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_properties
</UL>

<P><STRONG><a name="[2dc]"></a>duk_hobject_define_property_internal</STRONG> (Thumb, 618 bytes, Stack size 80 bytes, duktape.o(i.duk_hobject_define_property_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 2936<LI>Call Chain = duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_new_array_length_checked
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_alloc_entry_checked
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__grow_props_for_array_item
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__declvar_helper
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_close_environment_record
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal_arridx
</UL>

<P><STRONG><a name="[590]"></a>duk_hobject_define_property_internal_arridx</STRONG> (Thumb, 318 bytes, Stack size 64 bytes, duktape.o(i.duk_hobject_define_property_internal_arridx))
<BR><BR>[Stack]<UL><LI>Max Depth = 3000<LI>Call Chain = duk_hobject_define_property_internal_arridx &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__grow_props_for_array_item
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint_to_hstring
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_index
</UL>

<P><STRONG><a name="[435]"></a>duk_hobject_delprop</STRONG> (Thumb, 734 bytes, Stack size 88 bytes, duktape.o(i.duk_hobject_delprop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + In Cycle
<LI>Call Chain = duk_hobject_delprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_property_key
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_tval_to_property_key
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__proxy_check_prop
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_boolean
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_method
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top_unsafe
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string_tval_readable
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_nodecref_unsafe
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop_raw
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error_fmt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m4
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_delete_property
</UL>

<P><STRONG><a name="[268]"></a>duk_hobject_delprop_raw</STRONG> (Thumb, 750 bytes, Stack size 96 bytes, duktape.o(i.duk_hobject_delprop_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + In Cycle
<LI>Call Chain = duk_hobject_delprop_raw &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_arguments_map_for_delete
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_refzero_check_slow
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_refzero
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refzero_norz
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero_norz
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_put_array_length_smaller
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__delvar_helper
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_arguments_map_for_delete
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
</UL>

<P><STRONG><a name="[3c3]"></a>duk_hobject_enumerator_create</STRONG> (Thumb, 798 bytes, Stack size 72 bytes, duktape.o(i.duk_hobject_enumerator_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 3360 + In Cycle
<LI>Call Chain = duk_hobject_enumerator_create &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__sort_enum_keys_es6
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_enum_key_stridx
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_enum_key
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_true
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_bare_object
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_method
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_proxy_ownkeys_postprocess
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_proxy_check
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_internal_value_string
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_compact_props
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_intern_u32_checked
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_initenum
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_enum
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_enumerated_keys
</UL>

<P><STRONG><a name="[3c7]"></a>duk_hobject_enumerator_next</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, duktape.o(i.duk_hobject_enumerator_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 3280<LI>Call Chain = duk_hobject_enumerator_next &rArr; duk_put_prop_stridx_short_raw &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_uint
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop_raw
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m2
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_nextenum
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_next
</UL>

<P><STRONG><a name="[295]"></a>duk_hobject_find_existing_array_entry_tval_ptr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, duktape.o(i.duk_hobject_find_existing_array_entry_tval_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk_hobject_find_existing_array_entry_tval_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__convert_to_func_template
</UL>

<P><STRONG><a name="[2d9]"></a>duk_hobject_find_existing_entry</STRONG> (Thumb, 226 bytes, Stack size 36 bytes, duktape.o(i.duk_hobject_find_existing_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = duk_hobject_find_existing_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__declvar_helper
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_internal_value
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_find_existing_entry_tval_ptr_and_attrs
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_find_existing_entry_tval_ptr
</UL>

<P><STRONG><a name="[32f]"></a>duk_hobject_find_existing_entry_tval_ptr</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, duktape.o(i.duk_hobject_find_existing_entry_tval_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = duk_hobject_find_existing_entry_tval_ptr &rArr; duk_hobject_find_existing_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_find_existing_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_target_func_and_this_binding
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_string_tval_readable
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getid_open_decl_env_regs
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getid_activation_regs
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__err_augment_user
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_create_activation_environment_record
</UL>

<P><STRONG><a name="[380]"></a>duk_hobject_find_existing_entry_tval_ptr_and_attrs</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, duktape.o(i.duk_hobject_find_existing_entry_tval_ptr_and_attrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = duk_hobject_find_existing_entry_tval_ptr_and_attrs &rArr; duk_hobject_find_existing_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_find_existing_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_identifier_reference
</UL>

<P><STRONG><a name="[323]"></a>duk_hobject_get_enumerated_keys</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, duktape.o(i.duk_hobject_get_enumerated_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 3392<LI>Call Chain = duk_hobject_get_enumerated_keys &rArr; duk_hobject_enumerator_create &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_harray_with_size_outptr
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_object
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_keys_shared
</UL>

<P><STRONG><a name="[592]"></a>duk_hobject_get_internal_value</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, duktape.o(i.duk_hobject_get_internal_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = duk_hobject_get_internal_value &rArr; duk_hobject_find_existing_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_find_existing_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_internal_value_string
</UL>

<P><STRONG><a name="[384]"></a>duk_hobject_get_internal_value_string</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, duktape.o(i.duk_hobject_get_internal_value_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = duk_hobject_get_internal_value_string &rArr; duk_hobject_get_internal_value &rArr; duk_hobject_find_existing_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_internal_value
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_primitive
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
</UL>

<P><STRONG><a name="[293]"></a>duk_hobject_get_length</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, duktape.o(i.duk_hobject_get_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 3088<LI>Call Chain = duk_hobject_get_length &rArr; duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m1
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_3_unsafe
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__convert_to_func_template
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
</UL>

<P><STRONG><a name="[265]"></a>duk_hobject_get_own_propdesc</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, duktape.o(i.duk_hobject_get_own_propdesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = duk_hobject_get_own_propdesc &rArr;  duk__get_own_propdesc_raw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_arguments_map
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_arguments_map_for_delete
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_proxy_ownkeys_postprocess
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_ownprop_helper
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_get_own_property_descriptor
</UL>

<P><STRONG><a name="[329]"></a>duk_hobject_getprop</STRONG> (Thumb, 1496 bytes, Stack size 112 bytes, duktape.o(i.duk_hobject_getprop))
<BR><BR>[Stack]<UL><LI>Max Depth = 3064 + In Cycle
<LI>Call Chain = duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tval_number_to_arr_idx
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_tval_to_property_key
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__proxy_check_prop
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getprop_shallow_fastpath_array_tval
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getprop_fastpath_bufobj_tval
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_arguments_map_for_get
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_undefined
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_substring
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_method
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string_tval_readable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_n_unsafe
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2_unsafe
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_equals_helper
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error_fmt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m3
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getvar_helper
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_length
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_get
</UL>

<P><STRONG><a name="[374]"></a>duk_hobject_has_finalizer_fast_raw</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, duktape.o(i.duk_hobject_has_finalizer_fast_raw))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_refzero_hobject
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__mark_finalizable
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__free_run_finalizers
</UL>

<P><STRONG><a name="[381]"></a>duk_hobject_hasprop</STRONG> (Thumb, 416 bytes, Stack size 88 bytes, duktape.o(i.duk_hobject_hasprop))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + In Cycle
<LI>Call Chain = duk_hobject_hasprop &rArr;  duk__get_own_propdesc_raw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_tval_to_property_key
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__proxy_check_prop
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__key_is_plain_buf_ownprop
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_propdesc
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_boolean
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_method
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2_unsafe
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_identifier_reference
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_has_prop
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_in
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_has
</UL>

<P><STRONG><a name="[32d]"></a>duk_hobject_hasprop_raw</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, duktape.o(i.duk_hobject_hasprop_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = duk_hobject_hasprop_raw &rArr; duk__get_propdesc &rArr;  duk__get_own_propdesc_raw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_propdesc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_identifier_reference
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__err_augment_builtin_create
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_next
</UL>

<P><STRONG><a name="[53a]"></a>duk_hobject_object_get_own_property_descriptor</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, duktape.o(i.duk_hobject_object_get_own_property_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 3288<LI>Call Chain = duk_hobject_object_get_own_property_descriptor &rArr; duk_put_prop_stridx_short_raw &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_property_key_hstring
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject_promote_mask
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_own_propdesc
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m2
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_desc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_get_own_property_descriptor
</UL>

<P><STRONG><a name="[53c]"></a>duk_hobject_object_is_sealed_frozen_helper</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, duktape.o(i.duk_hobject_object_is_sealed_frozen_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = duk_hobject_object_is_sealed_frozen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_is_sealed_frozen_shared
</UL>

<P><STRONG><a name="[53f]"></a>duk_hobject_object_ownprop_helper</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, duktape.o(i.duk_hobject_object_ownprop_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 3144<LI>Call Chain = duk_hobject_object_ownprop_helper &rArr; duk_push_this_coercible_to_object &rArr; duk_to_hobject &rArr; duk_to_object &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_boolean
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring_acceptsymbol
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_object
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_own_propdesc
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_property_is_enumerable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_has_own_property
</UL>

<P><STRONG><a name="[595]"></a>duk_hobject_object_seal_freeze_helper</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, duktape.o(i.duk_hobject_object_seal_freeze_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = duk_hobject_object_seal_freeze_helper &rArr; duk__abandon_array_checked &rArr; duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__abandon_array_checked
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_seal_freeze_raw
</UL>

<P><STRONG><a name="[297]"></a>duk_hobject_pc2line_pack</STRONG> (Thumb, 354 bytes, Stack size 88 bytes, duktape.o(i.duk_hobject_pc2line_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 4288<LI>Call Chain = duk_hobject_pc2line_pack &rArr; duk_to_buffer_raw &rArr; duk_to_lstring &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_be_finish
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_be_encode
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_buffer_raw
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_raw
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hbuffer
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__convert_to_func_template
</UL>

<P><STRONG><a name="[338]"></a>duk_hobject_pc2line_query</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, duktape.o(i.duk_hobject_pc2line_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 3128<LI>Call Chain = duk_hobject_pc2line_query &rArr; duk_get_prop_stridx &rArr; duk_get_prop &rArr; duk_hobject_getprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_pc2line_query_raw
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hbuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_inspect_callstack_entry
</UL>

<P><STRONG><a name="[538]"></a>duk_hobject_prepare_property_descriptor</STRONG> (Thumb, 438 bytes, Stack size 64 bytes, duktape.o(i.duk_hobject_prepare_property_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4800<LI>Call Chain = duk_hobject_prepare_property_descriptor &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_boolean
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_top_index
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject_promote_mask
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_property
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_properties
</UL>

<P><STRONG><a name="[496]"></a>duk_hobject_prototype_chain_contains</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, duktape.o(i.duk_hobject_prototype_chain_contains))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = duk_hobject_prototype_chain_contains &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_string_tval_readable
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_augment_error_create
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_is_prototype_of
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_is_buffer
</UL>

<P><STRONG><a name="[488]"></a>duk_hobject_proxy_check</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, duktape.o(i.duk_hobject_proxy_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = duk_hobject_proxy_check
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__proxy_check_prop
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_keys_shared
</UL>

<P><STRONG><a name="[432]"></a>duk_hobject_putprop</STRONG> (Thumb, 2838 bytes, Stack size 152 bytes, duktape.o(i.duk_hobject_putprop))
<BR><BR>[Stack]<UL><LI>Max Depth = 3168 + In Cycle
<LI>Call Chain = duk_hobject_putprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tval_number_to_arr_idx
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__putprop_shallow_fastpath_array_tval
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__putprop_fastpath_bufobj_tval
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_tval_to_property_key
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__proxy_check_prop
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_alloc_entry_checked
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_put_array_length
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__grow_props_for_array_item
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__compute_a_stats
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_arguments_map_for_put
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__abandon_array_slow_check_required
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__abandon_array_density_check
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__abandon_array_checked
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint32
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_boolean
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_method
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m1
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string_tval_readable
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_nodecref_unsafe
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_n_unsafe
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2_unsafe
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_equals_helper
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_get_charlen
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_validated_write
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error_fmt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_internal
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__putvar_helper
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__put_prop_shared
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_set
</UL>

<P><STRONG><a name="[1e8]"></a>duk_hobject_realloc_props</STRONG> (Thumb, 862 bytes, Stack size 96 bytes, duktape.o(i.duk_hobject_realloc_props))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_check_stack
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_n_nodecref_unsafe
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strtable_intern_u32
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_free
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_alloc_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__grow_props_for_new_entry_item
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__grow_props_for_array_item
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__abandon_array_checked
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_harray_with_size
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_resize_entrypart
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_compact_props
</UL>

<P><STRONG><a name="[4a9]"></a>duk_hobject_refcount_finalize_norz</STRONG> (Thumb, 1814 bytes, Stack size 80 bytes, duktape.o(i.duk_hobject_refcount_finalize_norz))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = duk_hobject_refcount_finalize_norz &rArr; duk__decref_tvals_norz &rArr; duk_heaphdr_refzero_norz &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decref_tvals_norz
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_refzero
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refzero_norz
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero_norz
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbuffer_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__refcount_free_pending
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refcount_finalize_norz
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_process_finalize_list
</UL>

<P><STRONG><a name="[2da]"></a>duk_hobject_refzero</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, duktape.o(i.duk_hobject_refzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = duk_hobject_refzero &rArr; duk__hobject_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_refzero_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_return
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_endcatch
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__declvar_helper
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_set_prototype_updref
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
</UL>

<P><STRONG><a name="[1ec]"></a>duk_hobject_refzero_norz</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, duktape.o(i.duk_hobject_refzero_norz))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = duk_hobject_refzero_norz &rArr; duk__hobject_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_refzero_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_longjmp
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__activation_unwind_nofree_norz
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_close_environment_record
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_catcher_unwind_norz
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refcount_finalize_norz
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop_raw
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
</UL>

<P><STRONG><a name="[43c]"></a>duk_hobject_resize_entrypart</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, duktape.o(i.duk_hobject_resize_entrypart))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = duk_hobject_resize_entrypart &rArr; duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_default_h_size
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_realloc_props
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[5a0]"></a>duk_hobject_resolve_proxy_target</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, duktape.o(i.duk_hobject_resolve_proxy_target))
<BR><BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_instanceof
</UL>

<P><STRONG><a name="[292]"></a>duk_hobject_set_prototype_updref</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, duktape.o(i.duk_hobject_set_prototype_updref))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = duk_hobject_set_prototype_updref &rArr; duk_hobject_refzero &rArr; duk__hobject_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refzero
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__update_default_instance_proto
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__convert_to_func_template
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_prototype
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_create_instance
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_setprototype_shared
</UL>

<P><STRONG><a name="[3cb]"></a>duk_hobjenv_alloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, duktape.o(i.duk_hobjenv_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = duk_hobjenv_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_alloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_trycatch
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
</UL>

<P><STRONG><a name="[598]"></a>duk_hproxy_alloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, duktape.o(i.duk_hproxy_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = duk_hproxy_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hobject_alloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_proxy
</UL>

<P><STRONG><a name="[54d]"></a>duk_hstring_char_code_at_raw</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, duktape.o(i.duk_hstring_char_code_at_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = duk_hstring_char_code_at_raw &rArr; duk_heap_strcache_offset_char2byte &rArr; duk_hstring_get_charlen &rArr; duk__hstring_get_charlen_slowpath &rArr; duk_unicode_unvalidated_utf8_length
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_decode_xutf8
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strcache_offset_char2byte
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_char_code_at
</UL>

<P><STRONG><a name="[35f]"></a>duk_hstring_equals_ascii_cstring</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, duktape.o(i.duk_hstring_equals_ascii_cstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = duk_hstring_equals_ascii_cstring &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
</UL>

<P><STRONG><a name="[385]"></a>duk_hstring_get_charlen</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, duktape.o(i.duk_hstring_get_charlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = duk_hstring_get_charlen &rArr; duk__hstring_get_charlen_slowpath &rArr; duk_unicode_unvalidated_utf8_length
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hstring_get_charlen_slowpath
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_substring
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_strcache_offset_char2byte
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textencoder_prototype_encode
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_substring
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_substr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_startswith_endswith
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_slice
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_indexof_shared
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_includes
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_char_code_at
</UL>

<P><STRONG><a name="[276]"></a>duk_hstring_refzero</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, duktape.o(i.duk_hstring_refzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = duk_hstring_refzero &rArr; duk__hstring_refzero_helper &rArr; duk__refcount_refzero_hstring &rArr; duk_free_hstring &rArr; duk_heap_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hstring_refzero_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__cleanup_varmap
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refcount_finalize_norz
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop_raw
</UL>

<P><STRONG><a name="[25c]"></a>duk_hthread_activation_alloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, duktape.o(i.duk_hthread_activation_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = duk_hthread_activation_alloc &rArr; duk__hthread_activation_alloc_slow &rArr; duk_heap_mem_alloc_checked &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hthread_activation_alloc_slow
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_setup_act_not_tailcall
</UL>

<P><STRONG><a name="[599]"></a>duk_hthread_activation_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, duktape.o(i.duk_hthread_activation_free))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_activation_unwind_norz
</UL>

<P><STRONG><a name="[3af]"></a>duk_hthread_activation_unwind_norz</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, duktape.o(i.duk_hthread_activation_unwind_norz))
<BR><BR>[Stack]<UL><LI>Max Depth = 3016<LI>Call Chain = duk_hthread_activation_unwind_norz &rArr; duk__activation_unwind_nofree_norz &rArr; duk_js_close_environment_record &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__activation_unwind_nofree_norz
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_activation_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_safe_call_error
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_return
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_longjmp
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_terminate
</UL>

<P><STRONG><a name="[258]"></a>duk_hthread_activation_unwind_reuse_norz</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, duktape.o(i.duk_hthread_activation_unwind_reuse_norz))
<BR><BR>[Stack]<UL><LI>Max Depth = 3008<LI>Call Chain = duk_hthread_activation_unwind_reuse_norz &rArr; duk__activation_unwind_nofree_norz &rArr; duk_js_close_environment_record &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__activation_unwind_nofree_norz
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_setup_act_attempt_tailcall
</UL>

<P><STRONG><a name="[59a]"></a>duk_hthread_alloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, duktape.o(i.duk_hthread_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = duk_hthread_alloc &rArr; duk_hthread_alloc_unchecked &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_alloc_unchecked
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_alloc_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_thread_raw
</UL>

<P><STRONG><a name="[402]"></a>duk_hthread_alloc_unchecked</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, duktape.o(i.duk_hthread_alloc_unchecked))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = duk_hthread_alloc_unchecked &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_object_parts
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_heap_thread
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_alloc
</UL>

<P><STRONG><a name="[3ca]"></a>duk_hthread_catcher_alloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, duktape.o(i.duk_hthread_catcher_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = duk_hthread_catcher_alloc &rArr; duk__hthread_catcher_alloc_slow &rArr; duk_heap_mem_alloc_checked &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hthread_catcher_alloc_slow
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_trycatch
</UL>

<P><STRONG><a name="[59b]"></a>duk_hthread_catcher_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, duktape.o(i.duk_hthread_catcher_free))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_catcher_unwind_norz
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_catcher_unwind_nolexenv_norz
</UL>

<P><STRONG><a name="[43a]"></a>duk_hthread_catcher_unwind_nolexenv_norz</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, duktape.o(i.duk_hthread_catcher_unwind_nolexenv_norz))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duk_hthread_catcher_unwind_nolexenv_norz
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_catcher_free
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[1ea]"></a>duk_hthread_catcher_unwind_norz</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, duktape.o(i.duk_hthread_catcher_unwind_norz))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = duk_hthread_catcher_unwind_norz &rArr; duk_hobject_refzero_norz &rArr; duk__hobject_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_catcher_free
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refzero_norz
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_return
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_endtry
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_endfin
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_endcatch
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_longjmp
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_break_or_continue
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__activation_unwind_nofree_norz
</UL>

<P><STRONG><a name="[5b3]"></a>duk_hthread_copy_builtin_objects</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, duktape.o(i.duk_hthread_copy_builtin_objects))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = duk_hthread_copy_builtin_objects
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_thread_raw
</UL>

<P><STRONG><a name="[404]"></a>duk_hthread_create_builtin_objects</STRONG> (Thumb, 1398 bytes, Stack size 80 bytes, duktape.o(i.duk_hthread_create_builtin_objects))
<BR><BR>[Stack]<UL><LI>Max Depth = 4376<LI>Call Chain = duk_hthread_create_builtin_objects &rArr; duk_set_magic &rArr; duk_require_hnatfunc &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode_varuint
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode_flagged_signed
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode_flagged
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode_flag
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bd_decode
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_string
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_stridx_or_string
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_stridx
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_double
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_magic
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_stack
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_true
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_false
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_array
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_def_prop
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object_helper
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_c_function_builtin_noconstruct
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_c_function_builtin
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hnatfunc
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobjenv_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_set_prototype_updref
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_compact_props
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m2
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_heap_thread
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_thread_raw
</UL>

<P><STRONG><a name="[1fd]"></a>duk_hthread_get_act_prev_pc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, duktape.o(i.duk_hthread_get_act_prev_pc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = duk_hthread_get_act_prev_pc
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_traceback
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_inspect_callstack_entry
</UL>

<P><STRONG><a name="[52a]"></a>duk_hthread_get_activation_for_level</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, duktape.o(i.duk_hthread_get_activation_for_level))
<BR><BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_inspect_callstack_entry
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_eval
</UL>

<P><STRONG><a name="[89]"></a>duk_hthread_get_valstack_ptr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, duktape.o(i.duk_hthread_get_valstack_ptr))
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(i.duk__resize_valstack)
</UL>
<P><STRONG><a name="[403]"></a>duk_hthread_init_stacks</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, duktape.o(i.duk_hthread_init_stacks))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = duk_hthread_init_stacks &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_free
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_heap_thread
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_thread_raw
</UL>

<P><STRONG><a name="[3a6]"></a>duk_hthread_sync_and_null_currpc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, duktape.o(i.duk_hthread_sync_and_null_currpc))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_throw_raw
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_create_and_throw
</UL>

<P><STRONG><a name="[3bc]"></a>duk_hthread_terminate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, duktape.o(i.duk_hthread_terminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3024<LI>Call Chain = duk_hthread_terminate &rArr; duk_hthread_activation_unwind_norz &rArr; duk__activation_unwind_nofree_norz &rArr; duk_js_close_environment_record &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_refzero_check_slow
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_activation_unwind_norz
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_return
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_longjmp
</UL>

<P><STRONG><a name="[55d]"></a>duk_insert_undefined</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, duktape.o(i.duk_insert_undefined))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = duk_insert_undefined &rArr; duk_insert &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_undefined
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call
</UL>

<P><STRONG><a name="[4c3]"></a>duk_insert_undefined_n</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, duktape.o(i.duk_insert_undefined_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = duk_insert_undefined_n &rArr; duk_reserve_gap &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_reserve_gap
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__safe_call_adjust_valstack
</UL>

<P><STRONG><a name="[433]"></a>duk_is_callable_tval</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, duktape.o(i.duk_is_callable_tval))
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[339]"></a>duk_is_string_notsymbol</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, duktape.o(i.duk_is_string_notsymbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = duk_is_string_notsymbol &rArr; duk_get_hstring_notsymbol &rArr; duk__get_tagged_heaphdr_raw &rArr; duk_get_tval_or_unused &rArr; duk_get_tval
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hstring_notsymbol
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_fill
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
</UL>

<P><STRONG><a name="[28d]"></a>duk_is_whole_get_int32</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, duktape.o(i.duk_is_whole_get_int32))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = duk_is_whole_get_int32 &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__construct_from_codepoints
</UL>

<P><STRONG><a name="[41c]"></a>duk_is_whole_get_int32_nonegzero</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, duktape.o(i.duk_is_whole_get_int32_nonegzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = duk_is_whole_get_int32_nonegzero &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ispec_toregconst_raw
</UL>

<P><STRONG><a name="[282]"></a>duk_js_arith_mod</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, duktape.o(i.duk_js_arith_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = duk_js_arith_mod &rArr; fmod &rArr; _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__compute_mod
</UL>

<P><STRONG><a name="[15e]"></a>duk_js_arith_pow</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, duktape.o(i.duk_js_arith_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = duk_js_arith_pow &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_toplain_raw
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__compute_exp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> duktape.o(.constdata)
</UL>
<P><STRONG><a name="[1eb]"></a>duk_js_close_environment_record</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, duktape.o(i.duk_js_close_environment_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 2976<LI>Call Chain = duk_js_close_environment_record &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_refzero_norz
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__activation_unwind_nofree_norz
</UL>

<P><STRONG><a name="[429]"></a>duk_js_compare_helper</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, duktape.o(i.duk_js_compare_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 2944 + In Cycle
<LI>Call Chain = duk_js_compare_helper &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__compare_number
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_primitive
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m2
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m1
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2_unsafe
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_string_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[2ed]"></a>duk_js_compile</STRONG> (Thumb, 102 bytes, Stack size 1200 bytes, duktape.o(i.duk_js_compile))
<BR><BR>[Stack]<UL><LI>Max Depth = 6448<LI>Call Chain = duk_js_compile &rArr; duk_safe_call &rArr; duk_handle_safe_call &rArr; duk__handle_safe_call_error &rArr; duk__safe_call_adjust_valstack &rArr; duk_set_top_unsafe &rArr; duk_refzero_check_fast &rArr; duk_heap_process_finalize_list &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_safe_call
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_throw_raw
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_initctx
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__do_compile
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_eval
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_constructor
</UL>

<P><STRONG><a name="[514]"></a>duk_js_data_compare</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, duktape.o(i.duk_js_data_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = duk_js_data_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_compare_shared
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_string_compare
</UL>

<P><STRONG><a name="[436]"></a>duk_js_declvar_activation</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, duktape.o(i.duk_js_declvar_activation))
<BR><BR>[Stack]<UL><LI>Max Depth = 3112<LI>Call Chain = duk_js_declvar_activation &rArr; duk__declvar_helper &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__declvar_helper
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_init_activation_environment_records_delayed
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[439]"></a>duk_js_delvar_activation</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, duktape.o(i.duk_js_delvar_activation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = duk_js_delvar_activation &rArr; duk__delvar_helper &rArr; duk_hobject_delprop_raw &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__delvar_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[394]"></a>duk_js_equals_helper</STRONG> (Thumb, 574 bytes, Stack size 48 bytes, duktape.o(i.duk_js_equals_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 2952 + In Cycle
<LI>Call Chain = duk_js_equals_helper &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_samevalue_number
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_equals_number
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_primitive
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_tval
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2_unsafe
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_equals_helper
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_type_mask_tval
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getconst
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_strict_equals
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_samevalue
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_equals_helper
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
</UL>

<P><STRONG><a name="[3ac]"></a>duk_js_execute_bytecode</STRONG> (Thumb, 122 bytes, Stack size 192 bytes, duktape.o(i.duk_js_execute_bytecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 3904<LI>Call Chain = duk_js_execute_bytecode &rArr; duk__js_execute_bytecode_inner &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_executor_error
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
</UL>

<P><STRONG><a name="[428]"></a>duk_js_getvar_activation</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, duktape.o(i.duk_js_getvar_activation))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = duk_js_getvar_activation &rArr; duk__getvar_helper &rArr;  duk_hobject_getprop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getvar_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prepost_incdec_var_helper
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[26c]"></a>duk_js_getvar_envrec</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, duktape.o(i.duk_js_getvar_envrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = duk_js_getvar_envrec &rArr; duk__getvar_helper &rArr;  duk_hobject_getprop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getvar_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_arguments_map_for_get
</UL>

<P><STRONG><a name="[42f]"></a>duk_js_in</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, duktape.o(i.duk_js_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = duk_js_in &rArr; duk_hobject_hasprop &rArr;  duk__get_own_propdesc_raw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_check_type_mask
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_property_key_hstring
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2_unsafe
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[3b3]"></a>duk_js_init_activation_environment_records_delayed</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, duktape.o(i.duk_js_init_activation_environment_records_delayed))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = duk_js_init_activation_environment_records_delayed &rArr; duk_create_activation_environment_record &rArr; duk_hdecenv_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_create_activation_environment_record
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_trycatch
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_catch
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_declvar_activation
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_eval
</UL>

<P><STRONG><a name="[42e]"></a>duk_js_instanceof</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, duktape.o(i.duk_js_instanceof))
<BR><BR>[Stack]<UL><LI>Max Depth = 3176 + In Cycle
<LI>Call Chain = duk_js_instanceof &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_3_unsafe
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_2_unsafe
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_resolve_proxy_target
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hobject
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[2ef]"></a>duk_js_push_closure</STRONG> (Thumb, 860 bytes, Stack size 56 bytes, duktape.o(i.duk_js_push_closure))
<BR><BR>[Stack]<UL><LI>Max Depth = 3616<LI>Call Chain = duk_js_push_closure &rArr; duk_xdef_prop_stridx_thrower &rArr; duk_def_prop &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__inc_data_inner_refcounts
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_compact
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_thrower
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hcompfunc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hdecenv_alloc
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx_short_raw
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m4
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_m3
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__do_compile
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_eval
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_constructor
</UL>

<P><STRONG><a name="[437]"></a>duk_js_putvar_activation</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, duktape.o(i.duk_js_putvar_activation))
<BR><BR>[Stack]<UL><LI>Max Depth = 3304<LI>Call Chain = duk_js_putvar_activation &rArr; duk__putvar_helper &rArr; duk_hobject_putprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__putvar_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prepost_incdec_var_helper
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[26f]"></a>duk_js_putvar_envrec</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, duktape.o(i.duk_js_putvar_envrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 3304<LI>Call Chain = duk_js_putvar_envrec &rArr; duk__putvar_helper &rArr; duk_hobject_putprop &rArr;  duk_call_method (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__putvar_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_arguments_map_for_put
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
</UL>

<P><STRONG><a name="[22f]"></a>duk_js_string_compare</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, duktape.o(i.duk_js_string_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = duk_js_string_compare &rArr; duk_js_data_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_data_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_compare
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_compare_helper
</UL>

<P><STRONG><a name="[4d2]"></a>duk_js_to_arrayindex_string</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, duktape.o(i.duk_js_to_arrayindex_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = duk_js_to_arrayindex_string
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__strtable_alloc_hstring
</UL>

<P><STRONG><a name="[42a]"></a>duk_js_toboolean</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, duktape.o(i.duk_js_toboolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk_js_toboolean &rArr; duk_double_is_nan_or_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_is_nan_or_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_logical_not
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_boolean
</UL>

<P><STRONG><a name="[5a3]"></a>duk_js_toint32</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, duktape.o(i.duk_js_toint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 2848<LI>Call Chain = duk_js_toint32 &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__toint32_touint32_helper
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tonumber
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int32
</UL>

<P><STRONG><a name="[a0]"></a>duk_js_tointeger</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, duktape.o(i.duk_js_tointeger))
<BR><BR>[Stack]<UL><LI>Max Depth = 2848<LI>Call Chain = duk_js_tointeger &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tonumber
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tointeger_number
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped_raw
</UL>
<BR>[Address Reference Count : 2]<UL><LI> duktape.o(i.duk_to_int)
<LI> duktape.o(i.duk_to_uint)
</UL>
<P><STRONG><a name="[4e0]"></a>duk_js_tointeger_number</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, duktape.o(i.duk_js_tointeger_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = duk_js_tointeger_number &rArr; duk_double_trunc_towards_zero &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_trunc_towards_zero
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_is_nan_or_inf
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_double_is_nan
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__timeclip
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tointeger
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_timeval_from_dparts
</UL>

<P><STRONG><a name="[4e2]"></a>duk_js_tonumber</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, duktape.o(i.duk_js_tonumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 2824 + In Cycle
<LI>Call Chain = duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tonumber_string_raw
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_primitive
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tonumber
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_new_array_length_checked
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_touint32
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tonumber
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tointeger
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_toint32
</UL>

<P><STRONG><a name="[5a5]"></a>duk_js_touint32</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, duktape.o(i.duk_js_touint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 2848<LI>Call Chain = duk_js_touint32 &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__toint32_touint32_helper
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tonumber
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint32
</UL>

<P><STRONG><a name="[427]"></a>duk_js_typeof_stridx</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, duktape.o(i.duk_js_typeof_stridx))
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
</UL>

<P><STRONG><a name="[294]"></a>duk_known_hbuffer</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_known_hbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk_known_hbuffer &rArr; duk__known_heaphdr
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__known_heaphdr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_slice_shared
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_arraybuffer_constructor
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_compile_raw
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_func_valstack_slots
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_fixed_from_argvalue
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__convert_to_func_template
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_pc2line_pack
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_init_pushbuf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_concat
</UL>

<P><STRONG><a name="[48f]"></a>duk_known_hnatfunc</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_known_hnatfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk_known_hnatfunc &rArr; duk__known_heaphdr
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__known_heaphdr
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_func_from_lightfunc
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
</UL>

<P><STRONG><a name="[2ee]"></a>duk_known_hobject</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_known_hobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk_known_hobject &rArr; duk__known_heaphdr
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__known_heaphdr
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_boolean_constructor
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__update_default_instance_proto
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__protected_compact_object
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_fixed_from_argvalue
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_exit
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_objarr_entry
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__do_compile
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_primitive
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hobject
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_create_instance
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_enumerated_keys
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_constructor
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_constructor
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_eval
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_constructor
</UL>

<P><STRONG><a name="[2a8]"></a>duk_known_hstring</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_known_hstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk_known_hstring &rArr; duk__known_heaphdr
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__known_heaphdr
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_raw
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_active_register_binding
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__internbuffer
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_varmap_and_prologue_for_pass2
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_object
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_double
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_escaped_source
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_vsprintf
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_proxy_ownkeys_postprocess
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_properties
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>

<P><STRONG><a name="[465]"></a>duk_lexer_getpoint</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, duktape.o(i.duk_lexer_getpoint))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_re_token
</UL>

<P><STRONG><a name="[59f]"></a>duk_lexer_initctx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, duktape.o(i.duk_lexer_initctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = duk_lexer_initctx
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_compile
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_compile
</UL>

<P><STRONG><a name="[209]"></a>duk_lexer_parse_js_input_element</STRONG> (Thumb, 2438 bytes, Stack size 80 bytes, duktape.o(i.duk_lexer_parse_js_input_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = duk_lexer_parse_js_input_element &rArr; duk__lexer_parse_string_literal &rArr; duk__lexer_parse_escape &rArr; duk__advance_chars &rArr; duk__advance_bytes &rArr; duk__fill_lexer_buffer &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_skip_to_endofline
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_parse_string_literal
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_parse_escape
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__is_hex_digit
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__internbuffer
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__initbuffer
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__appendbuffer
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_chars
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_bytes
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_is_whitespace
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_is_line_terminator
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_is_identifier_start
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_is_identifier_part
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m1
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_helper
</UL>

<P><STRONG><a name="[45f]"></a>duk_lexer_parse_re_ranges</STRONG> (Thumb, 688 bytes, Stack size 48 bytes, duktape.o(i.duk_lexer_parse_re_ranges))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = duk_lexer_parse_re_ranges &rArr; duk__lexer_parse_escape &rArr; duk__advance_chars &rArr; duk__advance_bytes &rArr; duk__fill_lexer_buffer &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_parse_legacy_octal
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_parse_escape
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__emit_u16_direct_ranges
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_chars
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_disjunction
</UL>

<P><STRONG><a name="[45d]"></a>duk_lexer_parse_re_token</STRONG> (Thumb, 1032 bytes, Stack size 48 bytes, duktape.o(i.duk_lexer_parse_re_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = duk_lexer_parse_re_token &rArr; duk__lexer_parse_escape &rArr; duk__advance_chars &rArr; duk__advance_bytes &rArr; duk__fill_lexer_buffer &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_parse_escape
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hexval
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_chars
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__advance_bytes
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_setpoint
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_getpoint
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_disjunction
</UL>

<P><STRONG><a name="[41f]"></a>duk_lexer_setpoint</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, duktape.o(i.duk_lexer_setpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = duk_lexer_setpoint &rArr; duk__init_lexer_window &rArr; duk__fill_lexer_buffer &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__init_lexer_window
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_body
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_compile_raw
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_compile
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_re_token
</UL>

<P><STRONG><a name="[2bc]"></a>duk_numconv_parse</STRONG> (Thumb, 1098 bytes, Stack size 2248 bytes, duktape.o(i.duk_numconv_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 2768 + In Cycle
<LI>Call Chain = duk_numconv_parse &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_scale
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_prepare
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_generate
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_ctx_to_double
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_set_small
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul_small_copy
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_mul_small
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_is_zero
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bi_add_small
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_trim
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_number
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_nan
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__tonumber_string_raw
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_number
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_parse_int
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_parse_float
</UL>

<P><STRONG><a name="[31e]"></a>duk_numconv_stringify</STRONG> (Thumb, 490 bytes, Stack size 2216 bytes, duktape.o(i.duk_numconv_stringify))
<BR><BR>[Stack]<UL><LI>Max Depth = 2752<LI>Call Chain = duk_numconv_stringify &rArr; duk__dragon4_convert_and_push &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_scale
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_prepare
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_generate
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_format_uint32
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_fixed_format_round
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_double_to_ctx
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dragon4_convert_and_push
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_number
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_signbit
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_double
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_string
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_precision
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_fixed
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_exponential
</UL>

<P><STRONG><a name="[3ce]"></a>duk_pack</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, duktape.o(i.duk_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + In Cycle
<LI>Call Chain = duk_pack &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_harray_with_size_outptr
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_constructor
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_proxy_for_call
</UL>

<P><STRONG><a name="[5ac]"></a>duk_pcall_method_flags</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, duktape.o(i.duk_pcall_method_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = duk_pcall_method_flags &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_safe_call
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pcall_method
</UL>

<P><STRONG><a name="[230]"></a>duk_pop_2_unsafe</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, duktape.o(i.duk_pop_2_unsafe))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = duk_pop_2_unsafe &rArr; duk__pop_2_unsafe_raw &rArr; duk_heaphdr_refzero &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__pop_2_unsafe_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_bitwise_binary_op
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_binary_op
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_add
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__proxy_check_prop
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prepost_incdec_var_helper
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_compare
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_instanceof
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_in
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_equals_helper
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_compare_helper
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
</UL>

<P><STRONG><a name="[593]"></a>duk_pop_3_unsafe</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, duktape.o(i.duk_pop_3_unsafe))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = duk_pop_3_unsafe &rArr; duk_pop_n_unsafe &rArr; duk__pop_n_unsafe_raw &rArr;  duk_refzero_check_fast (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_n_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_instanceof
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_length
</UL>

<P><STRONG><a name="[597]"></a>duk_pop_n_nodecref_unsafe</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, duktape.o(i.duk_pop_n_nodecref_unsafe))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_realloc_props
</UL>

<P><STRONG><a name="[4b8]"></a>duk_pop_n_unsafe</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, duktape.o(i.duk_pop_n_unsafe))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = duk_pop_n_unsafe &rArr; duk__pop_n_unsafe_raw &rArr;  duk_refzero_check_fast (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__pop_n_unsafe_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_3_unsafe
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
</UL>

<P><STRONG><a name="[22c]"></a>duk_pop_nodecref_unsafe</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, duktape.o(i.duk_pop_nodecref_unsafe))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_sort
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_compare
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
</UL>

<P><STRONG><a name="[232]"></a>duk_pop_undefined</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, duktape.o(i.duk_pop_undefined))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_unshift
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_slice
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_shift
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reverse
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_concat
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_swap
</UL>

<P><STRONG><a name="[267]"></a>duk_pop_unsafe</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, duktape.o(i.duk_pop_unsafe))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = duk_pop_unsafe &rArr; duk__pop_unsafe_raw &rArr; duk_heaphdr_refzero &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__pop_unsafe_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_reverse
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_indexof_shared
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_concat
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_bitwise_not
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__putprop_fastpath_bufobj_tval
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__match_regexp
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_arguments_map
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_trycatch
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_catch
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__defaultvalue_coerce_attempt
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__declvar_helper
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_arguments_map_for_put
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_arguments_map_for_get
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_arguments_map_for_delete
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unpack_array_like
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tonumber
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_init_activation_environment_records_delayed
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_get_own_property_descriptor
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal_arridx
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat_2
</UL>

<P><STRONG><a name="[53d]"></a>duk_proxy_ownkeys_postprocess</STRONG> (Thumb, 304 bytes, Stack size 64 bytes, duktape.o(i.duk_proxy_ownkeys_postprocess))
<BR><BR>[Stack]<UL><LI>Max Depth = 3288<LI>Call Chain = duk_proxy_ownkeys_postprocess &rArr; duk_put_prop_index &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_index
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_array
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hstring
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_own_propdesc
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hstring
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_trap_result
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_keys_shared
</UL>

<P><STRONG><a name="[238]"></a>duk_push_bufobj_raw</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, duktape.o(i.duk_push_bufobj_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = duk_push_bufobj_raw &rArr; duk_hbufobj_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_alloc
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_slice_shared
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_arraybuffer_constructor
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__autospawn_arraybuffer
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_object
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_concat
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_dataview_constructor
</UL>

<P><STRONG><a name="[59c]"></a>duk_push_c_function_builtin</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, duktape.o(i.duk_push_c_function_builtin))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = duk_push_c_function_builtin &rArr; duk__push_c_function_raw &rArr; duk_hnatfunc_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_c_function_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
</UL>

<P><STRONG><a name="[59d]"></a>duk_push_c_function_builtin_noconstruct</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, duktape.o(i.duk_push_c_function_builtin_noconstruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = duk_push_c_function_builtin_noconstruct &rArr; duk__push_c_function_raw &rArr; duk_hnatfunc_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_c_function_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
</UL>

<P><STRONG><a name="[497]"></a>duk_push_class_string_tval</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, duktape.o(i.duk_push_class_string_tval))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = duk_push_class_string_tval &rArr; duk_push_sprintf &rArr;  duk_push_vsprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_string_tval_readable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_to_string
</UL>

<P><STRONG><a name="[235]"></a>duk_push_fixed_buffer_nozero</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, duktape.o(i.duk_push_fixed_buffer_nozero))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = duk_push_fixed_buffer_nozero &rArr; duk_push_buffer_raw &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__match_regexp
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_fixed_from_argvalue
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decode_helper
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_buffer
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__convert_to_func_template
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__concat_and_join_helper
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__arraybuffer_plain_slice
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hex_encode
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hex_decode
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_base64_encode
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat_2
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_set
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_repeat
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_tostring
</UL>

<P><STRONG><a name="[3e1]"></a>duk_push_fixed_buffer_zero</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, duktape.o(i.duk_push_fixed_buffer_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = duk_push_fixed_buffer_zero &rArr; duk_push_buffer_raw &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_buffer_slice_shared
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_arraybuffer_constructor
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_fixed_from_argvalue
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_concat
</UL>

<P><STRONG><a name="[5b1]"></a>duk_push_harray</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, duktape.o(i.duk_push_harray))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = duk_push_harray &rArr; duk_push_array &rArr; duk_harray_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_array
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_harray_with_size
</UL>

<P><STRONG><a name="[509]"></a>duk_push_harray_with_size</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, duktape.o(i.duk_push_harray_with_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = duk_push_harray_with_size &rArr; duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_harray
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_realloc_props
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_constructor
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_harray_with_size_outptr
</UL>

<P><STRONG><a name="[1fc]"></a>duk_push_harray_with_size_outptr</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, duktape.o(i.duk_push_harray_with_size_outptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = duk_push_harray_with_size_outptr &rArr; duk_push_harray_with_size &rArr; duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_harray_with_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_traceback
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pack
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_enumerated_keys
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_tojson
</UL>

<P><STRONG><a name="[528]"></a>duk_push_hboundfunc</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, duktape.o(i.duk_push_hboundfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = duk_push_hboundfunc &rArr; duk_hboundfunc_alloc &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hboundfunc_alloc
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_alloc_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
</UL>

<P><STRONG><a name="[3e2]"></a>duk_push_hbuffer</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, duktape.o(i.duk_push_hbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = duk_push_hbuffer &rArr; duk_push_tval &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_fixed_from_argvalue
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_push_uint8array_from_plain
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_uint8array_plainof
</UL>

<P><STRONG><a name="[291]"></a>duk_push_hcompfunc</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, duktape.o(i.duk_push_hcompfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = duk_push_hcompfunc &rArr; duk_hcompfunc_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hcompfunc_alloc
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_alloc_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__convert_to_func_template
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
</UL>

<P><STRONG><a name="[27c]"></a>duk_push_hobject</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, duktape.o(i.duk_push_hobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = duk_push_hobject &rArr; duk_push_tval &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_global_string
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__proxy_check_prop
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_proxy_for_call
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_catch
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getvar_helper
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__declvar_helper
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__compact_object_list
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_current_thread
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prototype
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject_bidx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_get_own_property_descriptor
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_length
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_next
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_run_finalizer
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_create_activation_environment_record
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_buffer_getter
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_constructor
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_getprototype_shared
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_keys_shared
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_property
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_eval
</UL>

<P><STRONG><a name="[4e6]"></a>duk_push_hobject_bidx</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, duktape.o(i.duk_push_hobject_bidx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = duk_push_hobject_bidx &rArr; duk_push_hobject &rArr; duk_push_tval &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_regexp_helper
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_global_object
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_thrower
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_constructor
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_eval
</UL>

<P><STRONG><a name="[1f3]"></a>duk_push_hstring</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, duktape.o(i.duk_push_hstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = duk_push_hstring &rArr; duk_push_tval &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_var_decl
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_try_stmt
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_raw
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_like_fnum
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_func_formals
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__objlit_load_key
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__ivalue_var_hstring
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_catch
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_led
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__declvar_helper
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__convert_to_func_template
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_label
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_enum_key
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_primitive
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_substring
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_empty
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tonumber
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_realloc_props
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_next
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_has_prop_stridx
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx
</UL>

<P><STRONG><a name="[284]"></a>duk_push_hstring_empty</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, duktape.o(i.duk_push_hstring_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = duk_push_hstring_empty &rArr; duk_push_hstring &rArr; duk_push_tval &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__concat_and_join_helper
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_vsprintf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_constructor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_constructor
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_native_function_name
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_constructor
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_prototype_to_string
</UL>

<P><STRONG><a name="[2eb]"></a>duk_push_hstring_stridx</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, duktape.o(i.duk_push_hstring_stridx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = duk_push_hstring_stridx &rArr; duk_push_hstring &rArr; duk_push_tval &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_join_shared
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_string_helper
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_stridx_or_string
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_stridx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_compile_raw
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_setter_helper
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_double
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__do_compile
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_thrower
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_stringify
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_length
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_tojson
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_parse_helper
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_eval
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_constructor
</UL>

<P><STRONG><a name="[52c]"></a>duk_push_lightfunc_name</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, duktape.o(i.duk_push_lightfunc_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = duk_push_lightfunc_name &rArr; duk_push_lightfunc_name_raw &rArr; duk_concat &rArr; duk__concat_and_join_helper &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lightfunc_name_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_native_function_name
</UL>

<P><STRONG><a name="[48e]"></a>duk_push_lightfunc_name_raw</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, duktape.o(i.duk_push_lightfunc_name_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = duk_push_lightfunc_name_raw &rArr; duk_concat &rArr; duk__concat_and_join_helper &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_sprintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string_funcptr
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_func_from_lightfunc
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lightfunc_tostring
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lightfunc_name
</UL>

<P><STRONG><a name="[529]"></a>duk_push_lightfunc_tostring</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, duktape.o(i.duk_push_lightfunc_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = duk_push_lightfunc_tostring &rArr; duk_push_lightfunc_name_raw &rArr; duk_concat &rArr; duk__concat_and_join_helper &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lightfunc_name_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_to_string
</UL>

<P><STRONG><a name="[29d]"></a>duk_push_object_helper</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, duktape.o(i.duk_push_object_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = duk_push_object_helper &rArr; duk_hobject_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_alloc
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_bare_object
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object_helper_proto
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_constructor
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_pointer_constructor
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_constructor_shared
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor
</UL>

<P><STRONG><a name="[537]"></a>duk_push_object_helper_proto</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, duktape.o(i.duk_push_object_helper_proto))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = duk_push_object_helper_proto &rArr; duk_push_object_helper &rArr; duk_hobject_alloc &rArr; duk__hobject_alloc_init &rArr; duk_heap_mem_alloc_checked_zeroed &rArr; duk_heap_mem_alloc_zeroed &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_error_object_va_raw
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_create
</UL>

<P><STRONG><a name="[5b2]"></a>duk_push_string_funcptr</STRONG> (Thumb, 168 bytes, Stack size 96 bytes, duktape.o(i.duk_push_string_funcptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = duk_push_string_funcptr &rArr; duk_push_lstring &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lightfunc_name_raw
</UL>

<P><STRONG><a name="[55f]"></a>duk_push_string_readable</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, duktape.o(i.duk_push_string_readable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4200<LI>Call Chain = duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string_tval_readable
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_require_type_index
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_setup_propcall_error
</UL>

<P><STRONG><a name="[4c1]"></a>duk_push_string_tval_readable</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, duktape.o(i.duk_push_string_tval_readable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4184<LI>Call Chain = duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_string_tval_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_target_func_and_this_binding
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string_readable
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
</UL>

<P><STRONG><a name="[4f2]"></a>duk_push_string_tval_readable_error</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, duktape.o(i.duk_push_string_tval_readable_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = duk_push_string_tval_readable_error &rArr;  duk__push_string_tval_readable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_string_tval_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__uncaught_error_aware
</UL>

<P><STRONG><a name="[549]"></a>duk_push_symbol_descriptive_string</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, duktape.o(i.duk_push_symbol_descriptive_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = duk_push_symbol_descriptive_string &rArr; duk_concat &rArr; duk__concat_and_join_helper &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_string
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_lstring
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_constructor
</UL>

<P><STRONG><a name="[542]"></a>duk_push_this_check_object_coercible</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, duktape.o(i.duk_push_this_check_object_coercible))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = duk_push_this_check_object_coercible &rArr; duk__push_this_helper &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_setprototype_shared
</UL>

<P><STRONG><a name="[49e]"></a>duk_push_this_coercible_to_object</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, duktape.o(i.duk_push_this_coercible_to_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 3088<LI>Call Chain = duk_push_this_coercible_to_object &rArr; duk_to_hobject &rArr; duk_to_object &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_helper
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_to_string
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_concat
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_obj_len_u32
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_ownprop_helper
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_value_of
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_to_locale_string
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_prototype_is_prototype_of
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_getprototype_shared
</UL>

<P><STRONG><a name="[54a]"></a>duk_push_this_coercible_to_string</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, duktape.o(i.duk_push_this_coercible_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = duk_push_this_coercible_to_string &rArr; duk_to_hstring_m1 &rArr; duk_to_hstring &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_helper
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring_m1
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_trim
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_substring
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_startswith_endswith
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_slice
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_search
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_repeat
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_match
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_locale_compare
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_indexof_shared
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_includes
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_concat
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_char_code_at
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_char_at
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_caseconv_shared
</UL>

<P><STRONG><a name="[2db]"></a>duk_push_tval</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, duktape.o(i.duk_push_tval))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk_push_tval &rArr; duk_err_range_push_beyond &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_push_beyond
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_bitwise_not
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_bitwise_binary_op
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_binary_op
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_add
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resolve_target_func_and_this_binding
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__putprop_fastpath_bufobj_tval
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_tval_to_property_key
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_string_tval_readable
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_safe_call_error
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_endfin
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_longjmp
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_catch
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_bound_chain_for_call
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__getvar_helper
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__err_augment_user
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__declvar_helper
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_inspect_callstack_entry
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_resolve_nonbound_function
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hbuffer
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tonumber
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_instanceof
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_in
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_equals_helper
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_compare_helper
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_close_environment_record
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_hasprop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_setup_propcall_error
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_resume
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_global_object_eval
</UL>

<P><STRONG><a name="[2a3]"></a>duk_push_uint_to_hstring</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, duktape.o(i.duk_push_uint_to_hstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = duk_push_uint_to_hstring &rArr; duk_to_hstring_m1 &rArr; duk_to_hstring &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring_m1
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_array
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_reviver_walk
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal_arridx
</UL>

<P><STRONG><a name="[560]"></a>duk_put_prop_stridx</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, duktape.o(i.duk_put_prop_stridx))
<BR><BR>[Stack]<UL><LI>Max Depth = 3224<LI>Call Chain = duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__put_prop_shared
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_length
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_finalizer
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx_short_raw
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_call_setup_propcall_error
</UL>

<P><STRONG><a name="[1f1]"></a>duk_put_prop_stridx_short_raw</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, duktape.o(i.duk_put_prop_stridx_short_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 3240<LI>Call Chain = duk_put_prop_stridx_short_raw &rArr; duk_put_prop_stridx &rArr; duk__put_prop_shared &rArr;  duk_pop_2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_put_prop_stridx
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_unshift
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_shift
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_push
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_pop
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__set_this_timeval_from_dparts
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_compiler_error_line
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_inspect_callstack_entry
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_get_own_property_descriptor
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_next
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_match
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_tojson
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_parse_helper
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_prototype_set_time
</UL>

<P><STRONG><a name="[3ab]"></a>duk_refzero_check_fast</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, duktape.o(i.duk_refzero_check_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = duk_refzero_check_fast &rArr; duk_heap_process_finalize_list &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_process_finalize_list
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__pop_n_unsafe_raw
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top_unsafe
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_handle_safe_call
</UL>

<P><STRONG><a name="[3b7]"></a>duk_refzero_check_slow</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, duktape.o(i.duk_refzero_check_slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = duk_refzero_check_slow &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_process_finalize_list
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_executor_error
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_terminate
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop_raw
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
</UL>

<P><STRONG><a name="[35b]"></a>duk_regexp_compile</STRONG> (Thumb, 308 bytes, Stack size 936 bytes, duktape.o(i.duk_regexp_compile))
<BR><BR>[Stack]<UL><LI>Max Depth = 5952<LI>Call Chain = duk_regexp_compile &rArr; duk__parse_disjunction &rArr;  duk__parse_disjunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_regexp_flags
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_disjunction
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__insert_u32
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_escaped_source
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_reop
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_7bit
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_buffer_to_string
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring_notsymbol
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_setpoint
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_initctx
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_init_pushbuf
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_compact
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__expr_nud
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_constructor
</UL>

<P><STRONG><a name="[438]"></a>duk_regexp_create_instance</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, duktape.o(i.duk_regexp_create_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 3000<LI>Call Chain = duk_regexp_create_instance &rArr; duk_xdef_prop_stridx_short_raw &rArr; duk_xdef_prop_stridx &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_object
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_int
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_set_prototype_updref
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_constructor
</UL>

<P><STRONG><a name="[546]"></a>duk_regexp_match</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_regexp_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960<LI>Call Chain = duk_regexp_match &rArr; duk__regexp_match_helper &rArr; duk__match_regexp &rArr;  duk__match_regexp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_search
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_match
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_test
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_exec
</UL>

<P><STRONG><a name="[54f]"></a>duk_regexp_match_force_global</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_regexp_match_force_global))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960<LI>Call Chain = duk_regexp_match_force_global &rArr; duk__regexp_match_helper &rArr; duk__match_regexp &rArr;  duk__match_regexp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_split
</UL>

<P><STRONG><a name="[1fe]"></a>duk_remove_m2</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, duktape.o(i.duk_remove_m2))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = duk_remove_m2 &rArr; duk_remove &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_number_plain
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_string_tval_readable
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_own_propdesc_raw
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__do_compile
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_traceback
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_vsprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_case_convert_string
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_get_own_property_descriptor
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_enumerated_keys
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_next
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_push_uint8array_from_plain
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_parse_helper
</UL>

<P><STRONG><a name="[25a]"></a>duk_remove_n</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, duktape.o(i.duk_remove_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = duk_remove_n &rArr; duk_heaphdr_refzero_norz &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero_norz
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__safe_call_adjust_valstack
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__call_setup_act_attempt_tailcall
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_n_unsafe
</UL>

<P><STRONG><a name="[3d8]"></a>duk_remove_n_unsafe</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, duktape.o(i.duk_remove_n_unsafe))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = duk_remove_n_unsafe &rArr; duk_remove_n &rArr; duk_heaphdr_refzero_norz &rArr; duk__heaphdr_refzero_helper &rArr; duk__refcount_refzero_hobject &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_n
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_specialfuncs_for_call
</UL>

<P><STRONG><a name="[3d7]"></a>duk_remove_unsafe</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, duktape.o(i.duk_remove_unsafe))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = duk_remove_unsafe &rArr; duk_remove &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_specialfuncs_for_call
</UL>

<P><STRONG><a name="[510]"></a>duk_require_constructor_call</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, duktape.o(i.duk_require_constructor_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = duk_require_constructor_call &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_is_constructor_call
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_arraybuffer_constructor
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_constructor
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textencoder_constructor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textdecoder_constructor
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_proxy_constructor
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_dataview_constructor
</UL>

<P><STRONG><a name="[5ae]"></a>duk_require_hbuffer</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, duktape.o(i.duk_require_hbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4272<LI>Call Chain = duk_require_hbuffer &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_tagged_heaphdr_raw
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_require_type_index
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_resize_buffer
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_buffer_object
</UL>

<P><STRONG><a name="[5b5]"></a>duk_require_hnatfunc</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, duktape.o(i.duk_require_hnatfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4272<LI>Call Chain = duk_require_hnatfunc &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_tagged_heaphdr_raw
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_require_type_index
</UL>
<BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_magic
</UL>

<P><STRONG><a name="[266]"></a>duk_require_hobject</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, duktape.o(i.duk_require_hobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = duk_require_hobject &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_tagged_heaphdr_raw
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_require_type_index
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lookup_arguments_map
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_arguments_map_for_delete
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_prototype
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_finalizer
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_next
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prototype
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_def_prop
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_index
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_instanceof
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_prepare_property_descriptor
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_next
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_enumerator_create
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_typedarray_set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_resume
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_shared_getter
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_flags
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_has
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_get
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_reflect_object_delete_property
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_prevent_extensions
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_keys_shared
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_property
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_concat
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_fin
</UL>

<P><STRONG><a name="[536]"></a>duk_require_hobject_accept_mask</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, duktape.o(i.duk_require_hobject_accept_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 3120<LI>Call Chain = duk_require_hobject_accept_mask &rArr; duk__get_hobject_promote_mask_raw &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_hobject_promote_mask_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_setprototype_shared
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_is_extensible
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_create
</UL>

<P><STRONG><a name="[527]"></a>duk_require_hobject_promote_mask</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, duktape.o(i.duk_require_hobject_promote_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 3120<LI>Call Chain = duk_require_hobject_promote_mask &rArr; duk__get_hobject_promote_mask_raw &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_hobject_promote_mask_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_proxy
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_enum
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_get_own_property_descriptor
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_constructor
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_keys_shared
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_property
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_properties
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_prototype_to_string
</UL>

<P><STRONG><a name="[393]"></a>duk_require_hobject_with_class</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, duktape.o(i.duk_require_hobject_with_class))
<BR><BR>[Stack]<UL><LI>Max Depth = 4280<LI>Call Chain = duk_require_hobject_with_class &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_tagged_heaphdr_raw
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_require_type_index
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_this_regexp
</UL>

<P><STRONG><a name="[26b]"></a>duk_require_hstring</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, duktape.o(i.duk_require_hstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = duk_require_hstring &rArr;  duk_err_require_type_index (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_tagged_heaphdr_raw
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_require_type_index
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__concat_and_join_helper
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_arguments_map_for_put
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_arguments_map_for_get
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_trim
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_substring
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_lstring
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_decode_string
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_case_convert_string
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_numconv_parse
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_regexp_prototype_shared_getter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_constructor
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_enc
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_duktape_object_dec
</UL>

<P><STRONG><a name="[3e3]"></a>duk_require_hstring_notsymbol</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, duktape.o(i.duk_require_hstring_notsymbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 4272<LI>Call Chain = duk_require_hstring_notsymbol &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_tagged_heaphdr_raw
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_require_type_index
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_fixed_from_argvalue
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_lstring_notsymbol
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_compile
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_to_string
</UL>

<P><STRONG><a name="[555]"></a>duk_require_hthread</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, duktape.o(i.duk_require_hthread))
<BR><BR>[Stack]<UL><LI>Max Depth = 4272<LI>Call Chain = duk_require_hthread &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_tagged_heaphdr_raw
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_require_type_index
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_resume
</UL>

<P><STRONG><a name="[532]"></a>duk_require_lstring_notsymbol</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, duktape.o(i.duk_require_lstring_notsymbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 4296<LI>Call Chain = duk_require_lstring_notsymbol &rArr; duk_require_hstring_notsymbol &rArr; duk_err_require_type_index &rArr; duk_push_string_readable &rArr; duk_push_string_tval_readable &rArr; duk__push_string_tval_readable &rArr; duk_to_string &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring_notsymbol
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_write
</UL>

<P><STRONG><a name="[26e]"></a>duk_require_tval</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, duktape.o(i.duk_require_tval))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range_index
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_int_uint_helper
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_value
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__put_prop_shared
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_bound_chain_for_call
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__check_arguments_map_for_put
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_undefined
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint32
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int32
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_swap
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_has_prop
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_del_prop
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_copy
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unpack_array_like
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped_raw
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_seal_freeze_raw
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_prepare_property_descriptor
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_getprop
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal_arridx
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_helper
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_to_string
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_pointer_prototype_tostring_shared
</UL>

<P><STRONG><a name="[39f]"></a>duk_reserve_gap</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, duktape.o(i.duk_reserve_gap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = duk_reserve_gap &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_bound_chain_for_call
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_insert_undefined_n
</UL>

<P><STRONG><a name="[556]"></a>duk_resolve_nonbound_function</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, duktape.o(i.duk_resolve_nonbound_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = duk_resolve_nonbound_function &rArr; duk_replace &rArr; duk_require_tval &rArr; duk_err_range_index &rArr; duk_err_handle_error_fmt &rArr;  duk_err_create_and_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_replace
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_tval
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_thread_resume
</UL>

<P><STRONG><a name="[53e]"></a>duk_seal_freeze_raw</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, duktape.o(i.duk_seal_freeze_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = duk_seal_freeze_raw &rArr; duk_hobject_object_seal_freeze_helper &rArr; duk__abandon_array_checked &rArr; duk_hobject_realloc_props &rArr; duk_heap_strtable_intern_u32 &rArr; duk_heap_strtable_intern &rArr; duk__strtable_do_intern &rArr; duk__strtable_alloc_hstring &rArr; duk_heap_mem_alloc &rArr; duk__check_voluntary_gc &rArr; duk_heap_mark_and_sweep &rArr;  duk_heap_process_finalize_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_seal_freeze_helper
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_compact_props
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_seal_freeze_shared
</UL>

<P><STRONG><a name="[3aa]"></a>duk_set_top_and_wipe</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, duktape.o(i.duk_set_top_and_wipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = duk_set_top_and_wipe &rArr;  duk_set_top_unsafe (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__reconfig_valstack_ecma_return
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__reconfig_valstack_ecma_catcher
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
</UL>

<P><STRONG><a name="[342]"></a>duk_set_top_unsafe</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, duktape.o(i.duk_set_top_unsafe))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = duk_set_top_unsafe &rArr; duk_refzero_check_fast &rArr; duk_heap_process_finalize_list &rArr; duk_heap_run_finalizer &rArr;  duk_safe_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_refzero_check_fast
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero_norz
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__safe_call_adjust_valstack
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_specialfuncs_for_call
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__executor_handle_call
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_set_top_and_wipe
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_delprop
</UL>

<P><STRONG><a name="[531]"></a>duk_textdecoder_decode_utf8_nodejs</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, duktape.o(i.duk_textdecoder_decode_utf8_nodejs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = duk_textdecoder_decode_utf8_nodejs &rArr; duk__decode_helper &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__utf8_decode_init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decode_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_nodejs_buffer_tostring
</UL>

<P><STRONG><a name="[582]"></a>duk_time_get_ecmascript_time</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_time_get_ecmascript_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = duk_time_get_ecmascript_time &rArr; duk_bi_date_get_now_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_now_time
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_alloc
</UL>

<P><STRONG><a name="[518]"></a>duk_time_get_ecmascript_time_nofrac</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, duktape.o(i.duk_time_get_ecmascript_time_nofrac))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = duk_time_get_ecmascript_time_nofrac &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_now_time
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor_now
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor
</UL>

<P><STRONG><a name="[543]"></a>duk_time_get_monotonic_time</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, duktape.o(i.duk_time_get_monotonic_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = duk_time_get_monotonic_time &rArr; duk_bi_date_get_now_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_get_now_time
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_performance_now
</UL>

<P><STRONG><a name="[37d]"></a>duk_to_hobject</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, duktape.o(i.duk_to_hobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 3072<LI>Call Chain = duk_to_hobject &rArr; duk_to_object &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_known_hobject
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__require_bufobj_value
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_promote_this
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_op_trycatch
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__get_hobject_promote_mask_raw
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_object
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_keys_shared
</UL>

<P><STRONG><a name="[22d]"></a>duk_to_hstring</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, duktape.o(i.duk_to_hstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + In Cycle
<LI>Call Chain = duk_to_hstring &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_string
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_helper
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__str_tostring_notregexp
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__concat_and_join_helper
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_compare
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_property_key_hstring
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring_m1
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring_acceptsymbol
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_concat_2
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_textencoder_prototype_encode
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_locale_compare
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_indexof_shared
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_parse_helper
</UL>

<P><STRONG><a name="[548]"></a>duk_to_hstring_acceptsymbol</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, duktape.o(i.duk_to_hstring_acceptsymbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = duk_to_hstring_acceptsymbol &rArr; duk_to_hstring &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_ownprop_helper
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_constructor
</UL>

<P><STRONG><a name="[22e]"></a>duk_to_hstring_m1</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, duktape.o(i.duk_to_hstring_m1))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = duk_to_hstring_m1 &rArr; duk_to_hstring &rArr;  duk_to_string (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_compare
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_uint_to_hstring
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_this_coercible_to_string
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_substr
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_replace
</UL>

<P><STRONG><a name="[533]"></a>duk_to_int_check_range</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, duktape.o(i.duk_to_int_check_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 4872<LI>Call Chain = duk_to_int_check_range &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_string
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_precision
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_fixed
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_prototype_to_exponential
</UL>

<P><STRONG><a name="[274]"></a>duk_to_int_clamped</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, duktape.o(i.duk_to_int_clamped))
<BR><BR>[Stack]<UL><LI>Max Depth = 4880<LI>Call Chain = duk_to_int_clamped &rArr; duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_slice
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_indexof_shared
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hbufobj_fixed_from_argvalue
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__clamp_startend_nonegidx_noshift
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_substring
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_substr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_startswith_endswith
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_slice
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_indexof_shared
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_includes
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_json_stringify_helper
</UL>

<P><STRONG><a name="[54c]"></a>duk_to_int_clamped_raw</STRONG> (Thumb, 362 bytes, Stack size 80 bytes, duktape.o(i.duk_to_int_clamped_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 4848<LI>Call Chain = duk_to_int_clamped_raw &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_tointeger
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heaphdr_refzero
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_tval
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_clamped
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_int_check_range
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_char_code_at
</UL>

<P><STRONG><a name="[22b]"></a>duk_to_number_m1</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, duktape.o(i.duk_to_number_m1))
<BR><BR>[Stack]<UL><LI>Max Depth = 2880<LI>Call Chain = duk_to_number_m1 &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_binary_op
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_add
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_this_get_timeval_tzoffset
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__error_getter_helper
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_value
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_sort_compare
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_length
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_tval
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_compare_helper
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_putprop
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_get_length
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_validated_write
</UL>

<P><STRONG><a name="[485]"></a>duk_to_number_m2</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, duktape.o(i.duk_to_number_m2))
<BR><BR>[Stack]<UL><LI>Max Depth = 2880<LI>Call Chain = duk_to_number_m2 &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_binary_op
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_add
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__prepost_incdec_var_helper
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_compare_helper
</UL>

<P><STRONG><a name="[4fc]"></a>duk_to_number_tval</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, duktape.o(i.duk_to_number_tval))
<BR><BR>[Stack]<UL><LI>Max Depth = 2904<LI>Call Chain = duk_to_number_tval &rArr; duk_to_number_m1 &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number_m1
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__vm_arith_unary_op
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_equals_helper
</UL>

<P><STRONG><a name="[4e3]"></a>duk_to_property_key_hstring</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, duktape.o(i.duk_to_property_key_hstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + In Cycle
<LI>Call Chain = duk_to_property_key_hstring &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_primitive
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_hstring
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_hstring
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__to_property_key
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_def_prop
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_in
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_object_get_own_property_descriptor
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_object_constructor_define_property
</UL>

<P><STRONG><a name="[57f]"></a>duk_to_uint8clamped</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, duktape.o(i.duk_to_uint8clamped))
<BR><BR>[Stack]<UL><LI>Max Depth = 2920<LI>Call Chain = duk_to_uint8clamped &rArr; duk_to_number &rArr; duk_js_tonumber &rArr;  duk_to_primitive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_number
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hbufobj_validated_write
</UL>

<P><STRONG><a name="[54b]"></a>duk_unicode_case_convert_string</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, duktape.o(i.duk_unicode_case_convert_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 4880<LI>Call Chain = duk_unicode_case_convert_string &rArr; duk_bw_resize &rArr; duk_err_range &rArr; duk_err_handle_error &rArr; duk_err_create_and_throw &rArr; duk_push_error_object_raw &rArr; duk_push_error_object_va_raw &rArr; duk_push_vsprintf &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__case_transform_helper
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_buffer_to_string
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_decode_xutf8_checked
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hstring
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_remove_m2
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_resize
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_init_pushbuf
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bw_compact
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_prototype_caseconv_shared
</UL>

<P><STRONG><a name="[328]"></a>duk_unicode_decode_xutf8</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, duktape.o(i.duk_unicode_decode_xutf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk_unicode_decode_xutf8
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_callback_encode_uri
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_hstring_readable_unicode
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_quote_string
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_decode_xutf8_checked
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hstring_char_code_at_raw
</UL>

<P><STRONG><a name="[23b]"></a>duk_unicode_decode_xutf8_checked</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, duktape.o(i.duk_unicode_decode_xutf8_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = duk_unicode_decode_xutf8_checked &rArr; duk_unicode_decode_xutf8
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_decode_xutf8
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_helper
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__inp_get_cp
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bc_get_u32
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__bc_get_i32
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_trim
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_decode_string
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_case_convert_string
</UL>

<P><STRONG><a name="[21e]"></a>duk_unicode_encode_cesu8</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, duktape.o(i.duk_unicode_encode_cesu8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = duk_unicode_encode_cesu8
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__decode_helper
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__construct_from_codepoints
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__appendbuffer
</UL>

<P><STRONG><a name="[21c]"></a>duk_unicode_encode_xutf8</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, duktape.o(i.duk_unicode_encode_xutf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = duk_unicode_encode_xutf8
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_get_xutf8_length
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__utf8_encode_char
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_callback_unescape
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_callback_encode_uri
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__transform_callback_decode_uri
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__slow_case_conversion
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_hstring_readable_unicode
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__insert_u32
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_quote_string
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_string_escape
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__construct_from_codepoints
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__case_transform_helper
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__append_u32
</UL>

<P><STRONG><a name="[5b8]"></a>duk_unicode_get_xutf8_length</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, duktape.o(i.duk_unicode_get_xutf8_length))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_unicode_encode_xutf8
</UL>

<P><STRONG><a name="[2c4]"></a>duk_unicode_is_identifier_part</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, duktape.o(i.duk_unicode_is_identifier_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = duk_unicode_is_identifier_part &rArr; duk__uni_range_match &rArr; duk__uni_decode_value &rArr; duk_bd_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__uni_range_match
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_key_autoquote
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_plain_string
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
</UL>

<P><STRONG><a name="[2c2]"></a>duk_unicode_is_identifier_start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, duktape.o(i.duk_unicode_is_identifier_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = duk_unicode_is_identifier_start &rArr; duk__uni_range_match &rArr; duk__uni_decode_value &rArr; duk_bd_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__uni_range_match
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__enc_key_autoquote
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_object
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
</UL>

<P><STRONG><a name="[260]"></a>duk_unicode_is_letter</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, duktape.o(i.duk_unicode_is_letter))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = duk_unicode_is_letter &rArr; duk__uni_range_match &rArr; duk__uni_decode_value &rArr; duk_bd_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__uni_range_match
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__case_transform_helper
</UL>

<P><STRONG><a name="[442]"></a>duk_unicode_is_line_terminator</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, duktape.o(i.duk_unicode_is_line_terminator))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__match_regexp
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_skip_to_endofline
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__lexer_parse_string_literal
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_trim
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
</UL>

<P><STRONG><a name="[5a8]"></a>duk_unicode_is_whitespace</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, duktape.o(i.duk_unicode_is_whitespace))
<BR><BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_trim
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_lexer_parse_js_input_element
</UL>

<P><STRONG><a name="[410]"></a>duk_unicode_re_canonicalize_char</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, duktape.o(i.duk_unicode_re_canonicalize_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = duk_unicode_re_canonicalize_char &rArr; duk__case_transform_helper &rArr; duk__slow_case_conversion &rArr; duk_unicode_encode_xutf8
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__case_transform_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_generate_ranges
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__parse_disjunction
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__inp_get_cp
</UL>

<P><STRONG><a name="[456]"></a>duk_unicode_re_is_wordchar</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, duktape.o(i.duk_unicode_re_is_wordchar))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__match_regexp
</UL>

<P><STRONG><a name="[3f6]"></a>duk_unicode_unvalidated_utf8_length</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, duktape.o(i.duk_unicode_unvalidated_utf8_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = duk_unicode_unvalidated_utf8_length
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__hstring_get_charlen_slowpath
</UL>

<P><STRONG><a name="[3db]"></a>duk_unpack_array_like</STRONG> (Thumb, 476 bytes, Stack size 48 bytes, duktape.o(i.duk_unpack_array_like))
<BR><BR>[Stack]<UL><LI>Max Depth = 3152 + In Cycle
<LI>Call Chain = duk_unpack_array_like &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_uint32
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_stack
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_normalize_index
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_index
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_tval
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop_unsafe
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_get_prop_stridx
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_type_invalid_args
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_err_range
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_specialfuncs_for_call
</UL>

<P><STRONG><a name="[223]"></a>duk_util_tinyrandom_get_double</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, duktape.o(i.duk_util_tinyrandom_get_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = duk_util_tinyrandom_get_double &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__xoroshiro128plus
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__array_qsort
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_alloc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_math_object_random
</UL>

<P><STRONG><a name="[583]"></a>duk_util_tinyrandom_prepare_seed</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, duktape.o(i.duk_util_tinyrandom_prepare_seed))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = duk_util_tinyrandom_prepare_seed &rArr; duk__rnd_splitmix64
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__rnd_splitmix64
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_heap_alloc
</UL>

<P><STRONG><a name="[562]"></a>duk_valstack_grow_check_nothrow</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, duktape.o(i.duk_valstack_grow_check_nothrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = duk_valstack_grow_check_nothrow &rArr; duk__valstack_grow &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__valstack_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_check_stack
</UL>

<P><STRONG><a name="[3a9]"></a>duk_valstack_grow_check_throw</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, duktape.o(i.duk_valstack_grow_check_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = duk_valstack_grow_check_throw &rArr; duk__valstack_grow &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__valstack_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_call_raw
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_stack
</UL>

<P><STRONG><a name="[4d9]"></a>duk_valstack_shrink_check_nothrow</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, duktape.o(i.duk_valstack_shrink_check_nothrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = duk_valstack_shrink_check_nothrow &rArr;  duk__resize_valstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__resize_valstack
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__sweep_heap
</UL>

<P><STRONG><a name="[2a4]"></a>duk_xdef_prop</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, duktape.o(i.duk_xdef_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 2960<LI>Call Chain = duk_xdef_prop &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_pop
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_property_key_hstring
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_catch
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__declvar_helper
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_object
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
</UL>

<P><STRONG><a name="[2a0]"></a>duk_xdef_prop_index</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, duktape.o(i.duk_xdef_prop_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 3024<LI>Call Chain = duk_xdef_prop_index &rArr; duk_hobject_define_property_internal_arridx &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal_arridx
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_slice
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_concat
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__js_execute_bytecode_inner
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__dec_array
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
</UL>

<P><STRONG><a name="[29f]"></a>duk_xdef_prop_stridx</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, duktape.o(i.duk_xdef_prop_stridx))
<BR><BR>[Stack]<UL><LI>Max Depth = 2968<LI>Call Chain = duk_xdef_prop_stridx &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_hobject
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hobject_define_property_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx_short_raw
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
</UL>

<P><STRONG><a name="[1ff]"></a>duk_xdef_prop_stridx_short_raw</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, duktape.o(i.duk_xdef_prop_stridx_short_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 2984<LI>Call Chain = duk_xdef_prop_stridx_short_raw &rArr; duk_xdef_prop_stridx &rArr; duk_hobject_define_property_internal &rArr; duk__to_new_array_length_checked &rArr;  duk_err_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_xdef_prop_stridx
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_boolean_constructor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_splice
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_slice
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_iter_shared
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_array_prototype_concat
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__regexp_match_helper
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__push_func_from_lightfunc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__handle_createargs_for_call
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__convert_to_func_template
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__add_traceback
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_to_object
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_error_object_va_raw
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_regexp_create_instance
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_hthread_create_builtin_objects
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_string_constructor
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_pointer_constructor
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_number_constructor
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_constructor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_error_constructor_shared
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_date_constructor
</UL>

<P><STRONG><a name="[2a5]"></a>duk_xdef_prop_stridx_thrower</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, duktape.o(i.duk_xdef_prop_stridx_thrower))
<BR><BR>[Stack]<UL><LI>Max Depth = 3560<LI>Call Chain = duk_xdef_prop_stridx_thrower &rArr; duk_def_prop &rArr;  duk_err_handle_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_require_normalize_index
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_dup_top
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_def_prop
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hstring_stridx
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_push_hobject_bidx
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk__create_arguments_object
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_js_push_closure
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duk_bi_function_prototype_bind
</UL>

<P><STRONG><a name="[1c0]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
</UL>

<P><STRONG><a name="[1d6]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d5]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[84]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL>
<P><STRONG><a name="[85]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[1d3]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c3]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[1d8]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d7]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[86]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[1cd]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[7d]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
