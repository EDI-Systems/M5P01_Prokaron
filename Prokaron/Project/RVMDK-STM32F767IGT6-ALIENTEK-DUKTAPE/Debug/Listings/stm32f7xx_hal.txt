; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f7xx_hal.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f7xx_hal.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(D)_Duktape\duktape\src -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-DUKTAPE\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DDUK_USE_BYTEORDER=1 --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f7xx_hal.crf ..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal.c]
                          THUMB

                          AREA ||i.HAL_DBGMCU_DisableDBGSleepMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGSleepMode PROC
;;;485      */
;;;486    void HAL_DBGMCU_DisableDBGSleepMode(void)
000000  4803              LDR      r0,|L1.16|
;;;487    {
;;;488      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
000002  6840              LDR      r0,[r0,#4]
000004  f0200001          BIC      r0,r0,#1
000008  4901              LDR      r1,|L1.16|
00000a  6048              STR      r0,[r1,#4]
;;;489    }
00000c  4770              BX       lr
;;;490    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_DisableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGStandbyMode PROC
;;;521      */
;;;522    void HAL_DBGMCU_DisableDBGStandbyMode(void)
000000  4803              LDR      r0,|L2.16|
;;;523    {
;;;524      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6840              LDR      r0,[r0,#4]
000004  f0200004          BIC      r0,r0,#4
000008  4901              LDR      r1,|L2.16|
00000a  6048              STR      r0,[r1,#4]
;;;525    }
00000c  4770              BX       lr
;;;526    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_DisableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGStopMode PROC
;;;503      */
;;;504    void HAL_DBGMCU_DisableDBGStopMode(void)
000000  4803              LDR      r0,|L3.16|
;;;505    {
;;;506      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6840              LDR      r0,[r0,#4]
000004  f0200002          BIC      r0,r0,#2
000008  4901              LDR      r1,|L3.16|
00000a  6048              STR      r0,[r1,#4]
;;;507    }
00000c  4770              BX       lr
;;;508    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGSleepMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGSleepMode PROC
;;;476      */
;;;477    void HAL_DBGMCU_EnableDBGSleepMode(void)
000000  4803              LDR      r0,|L4.16|
;;;478    {
;;;479      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
000002  6840              LDR      r0,[r0,#4]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L4.16|
00000a  6048              STR      r0,[r1,#4]
;;;480    }
00000c  4770              BX       lr
;;;481    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGStandbyMode PROC
;;;512      */
;;;513    void HAL_DBGMCU_EnableDBGStandbyMode(void)
000000  4803              LDR      r0,|L5.16|
;;;514    {
;;;515      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6840              LDR      r0,[r0,#4]
000004  f0400004          ORR      r0,r0,#4
000008  4901              LDR      r1,|L5.16|
00000a  6048              STR      r0,[r1,#4]
;;;516    }
00000c  4770              BX       lr
;;;517    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGStopMode PROC
;;;494      */
;;;495    void HAL_DBGMCU_EnableDBGStopMode(void)
000000  4803              LDR      r0,|L6.16|
;;;496    {
;;;497      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6840              LDR      r0,[r0,#4]
000004  f0400002          ORR      r0,r0,#2
000008  4901              LDR      r1,|L6.16|
00000a  6048              STR      r0,[r1,#4]
;;;498    }
00000c  4770              BX       lr
;;;499    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DeInit PROC
;;;183      */
;;;184    HAL_StatusTypeDef HAL_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;185    {
;;;186      /* Reset of all peripherals */
;;;187      __HAL_RCC_APB1_FORCE_RESET();
000002  f04f30ff          MOV      r0,#0xffffffff
000006  490e              LDR      r1,|L7.64|
000008  6008              STR      r0,[r1,#0]
;;;188      __HAL_RCC_APB1_RELEASE_RESET();
00000a  2000              MOVS     r0,#0
00000c  6008              STR      r0,[r1,#0]
;;;189    
;;;190      __HAL_RCC_APB2_FORCE_RESET();
00000e  1e40              SUBS     r0,r0,#1
000010  1d09              ADDS     r1,r1,#4
000012  6008              STR      r0,[r1,#0]
;;;191      __HAL_RCC_APB2_RELEASE_RESET();
000014  2000              MOVS     r0,#0
000016  6008              STR      r0,[r1,#0]
;;;192    
;;;193      __HAL_RCC_AHB1_FORCE_RESET();
000018  1e40              SUBS     r0,r0,#1
00001a  4909              LDR      r1,|L7.64|
00001c  3910              SUBS     r1,r1,#0x10
00001e  6008              STR      r0,[r1,#0]
;;;194      __HAL_RCC_AHB1_RELEASE_RESET();
000020  2000              MOVS     r0,#0
000022  6008              STR      r0,[r1,#0]
;;;195    
;;;196      __HAL_RCC_AHB2_FORCE_RESET();
000024  1e40              SUBS     r0,r0,#1
000026  1d09              ADDS     r1,r1,#4
000028  6008              STR      r0,[r1,#0]
;;;197      __HAL_RCC_AHB2_RELEASE_RESET();
00002a  2000              MOVS     r0,#0
00002c  6008              STR      r0,[r1,#0]
;;;198    
;;;199      __HAL_RCC_AHB3_FORCE_RESET();
00002e  1e40              SUBS     r0,r0,#1
000030  1d09              ADDS     r1,r1,#4
000032  6008              STR      r0,[r1,#0]
;;;200      __HAL_RCC_AHB3_RELEASE_RESET();
000034  2000              MOVS     r0,#0
000036  6008              STR      r0,[r1,#0]
;;;201    
;;;202      /* De-Init the low level hardware */
;;;203      HAL_MspDeInit();
000038  f7fffffe          BL       HAL_MspDeInit
;;;204        
;;;205      /* Return function status */
;;;206      return HAL_OK;
00003c  2000              MOVS     r0,#0
;;;207    }
00003e  bd10              POP      {r4,pc}
;;;208    
                          ENDP

                  |L7.64|
                          DCD      0x40023820

                          AREA ||i.HAL_Delay||, CODE, READONLY, ALIGN=2

                  HAL_Delay PROC
;;;370      */
;;;371    __weak void HAL_Delay(uint32_t Delay)
000000  b570              PUSH     {r4-r6,lr}
;;;372    {
000002  4604              MOV      r4,r0
;;;373      uint32_t tickstart = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
000008  4606              MOV      r6,r0
;;;374      uint32_t wait = Delay;
00000a  4625              MOV      r5,r4
;;;375    
;;;376      /* Add a freq to guarantee minimum wait */
;;;377      if (wait < HAL_MAX_DELAY)
00000c  1c68              ADDS     r0,r5,#1
00000e  b110              CBZ      r0,|L8.22|
;;;378      {
;;;379        wait += (uint32_t)(uwTickFreq);
000010  4804              LDR      r0,|L8.36|
000012  6800              LDR      r0,[r0,#0]  ; uwTickFreq
000014  4405              ADD      r5,r5,r0
                  |L8.22|
;;;380      }
;;;381    
;;;382      while ((HAL_GetTick() - tickstart) < wait)
000016  bf00              NOP      
                  |L8.24|
000018  f7fffffe          BL       HAL_GetTick
00001c  1b80              SUBS     r0,r0,r6
00001e  42a8              CMP      r0,r5
000020  d3fa              BCC      |L8.24|
;;;383      {
;;;384      }
;;;385    }
000022  bd70              POP      {r4-r6,pc}
;;;386    
                          ENDP

                  |L8.36|
                          DCD      uwTickFreq

                          AREA ||i.HAL_DisableCompensationCell||, CODE, READONLY, ALIGN=2

                  HAL_DisableCompensationCell PROC
;;;543      */
;;;544    void HAL_DisableCompensationCell(void)
000000  4803              LDR      r0,|L9.16|
;;;545    {
;;;546      SYSCFG->CMPCR &= (uint32_t)~((uint32_t)SYSCFG_CMPCR_CMP_PD);
000002  6800              LDR      r0,[r0,#0]
000004  f0200001          BIC      r0,r0,#1
000008  4901              LDR      r1,|L9.16|
00000a  6008              STR      r0,[r1,#0]
;;;547    }
00000c  4770              BX       lr
;;;548    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40013820

                          AREA ||i.HAL_DisableFMCMemorySwapping||, CODE, READONLY, ALIGN=2

                  HAL_DisableFMCMemorySwapping PROC
;;;569      */
;;;570    void HAL_DisableFMCMemorySwapping(void)
000000  4803              LDR      r0,|L10.16|
;;;571    {
;;;572    
;;;573      SYSCFG->MEMRMP &= (uint32_t)~((uint32_t)SYSCFG_MEMRMP_SWP_FMC);
000002  6800              LDR      r0,[r0,#0]
000004  f4206040          BIC      r0,r0,#0xc00
000008  4901              LDR      r1,|L10.16|
00000a  6008              STR      r0,[r1,#0]
;;;574    }
00000c  4770              BX       lr
;;;575    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      0x40013800

                          AREA ||i.HAL_DisableMemorySwappingBank||, CODE, READONLY, ALIGN=2

                  HAL_DisableMemorySwappingBank PROC
;;;601    */
;;;602    void HAL_DisableMemorySwappingBank(void)
000000  4803              LDR      r0,|L11.16|
;;;603    {
;;;604      CLEAR_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_SWP_FB);
000002  6800              LDR      r0,[r0,#0]
000004  f4207080          BIC      r0,r0,#0x100
000008  4901              LDR      r1,|L11.16|
00000a  6008              STR      r0,[r1,#0]
;;;605    }
00000c  4770              BX       lr
;;;606    #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      0x40013800

                          AREA ||i.HAL_EnableCompensationCell||, CODE, READONLY, ALIGN=2

                  HAL_EnableCompensationCell PROC
;;;532      */
;;;533    void HAL_EnableCompensationCell(void)
000000  4803              LDR      r0,|L12.16|
;;;534    {
;;;535      SYSCFG->CMPCR |= SYSCFG_CMPCR_CMP_PD;
000002  6800              LDR      r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L12.16|
00000a  6008              STR      r0,[r1,#0]
;;;536    }
00000c  4770              BX       lr
;;;537    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      0x40013820

                          AREA ||i.HAL_EnableFMCMemorySwapping||, CODE, READONLY, ALIGN=2

                  HAL_EnableFMCMemorySwapping PROC
;;;556      */
;;;557    void HAL_EnableFMCMemorySwapping(void)
000000  4803              LDR      r0,|L13.16|
;;;558    {
;;;559      SYSCFG->MEMRMP |= SYSCFG_MEMRMP_SWP_FMC_0;
000002  6800              LDR      r0,[r0,#0]
000004  f4406080          ORR      r0,r0,#0x400
000008  4901              LDR      r1,|L13.16|
00000a  6008              STR      r0,[r1,#0]
;;;560    }
00000c  4770              BX       lr
;;;561    
                          ENDP

00000e  0000              DCW      0x0000
                  |L13.16|
                          DCD      0x40013800

                          AREA ||i.HAL_EnableMemorySwappingBank||, CODE, READONLY, ALIGN=2

                  HAL_EnableMemorySwappingBank PROC
;;;586    */
;;;587    void HAL_EnableMemorySwappingBank(void)
000000  4803              LDR      r0,|L14.16|
;;;588    {
;;;589      SET_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_SWP_FB);
000002  6800              LDR      r0,[r0,#0]
000004  f4407080          ORR      r0,r0,#0x100
000008  4901              LDR      r1,|L14.16|
00000a  6008              STR      r0,[r1,#0]
;;;590    }
00000c  4770              BX       lr
;;;591    
                          ENDP

00000e  0000              DCW      0x0000
                  |L14.16|
                          DCD      0x40013800

                          AREA ||i.HAL_GetDEVID||, CODE, READONLY, ALIGN=2

                  HAL_GetDEVID PROC
;;;440      */
;;;441    uint32_t HAL_GetDEVID(void)
000000  4802              LDR      r0,|L15.12|
;;;442    {
;;;443       return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
000002  6800              LDR      r0,[r0,#0]
000004  f3c0000b          UBFX     r0,r0,#0,#12
;;;444    }
000008  4770              BX       lr
;;;445    
                          ENDP

00000a  0000              DCW      0x0000
                  |L15.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_GetHalVersion||, CODE, READONLY, ALIGN=2

                  HAL_GetHalVersion PROC
;;;422      */
;;;423    uint32_t HAL_GetHalVersion(void)
000000  4800              LDR      r0,|L16.4|
;;;424    {
;;;425     return __STM32F7xx_HAL_VERSION;
;;;426    }
000002  4770              BX       lr
;;;427    
                          ENDP

                  |L16.4|
                          DCD      0x01020500

                          AREA ||i.HAL_GetREVID||, CODE, READONLY, ALIGN=2

                  HAL_GetREVID PROC
;;;431      */
;;;432    uint32_t HAL_GetREVID(void)
000000  4801              LDR      r0,|L17.8|
;;;433    {
;;;434       return((DBGMCU->IDCODE) >> 16U);
000002  6800              LDR      r0,[r0,#0]
000004  0c00              LSRS     r0,r0,#16
;;;435    }
000006  4770              BX       lr
;;;436    
                          ENDP

                  |L17.8|
                          DCD      0xe0042000

                          AREA ||i.HAL_GetTick||, CODE, READONLY, ALIGN=2

                  HAL_GetTick PROC
;;;316      */
;;;317    __weak uint32_t HAL_GetTick(void)
000000  4801              LDR      r0,|L18.8|
;;;318    {
;;;319      return uwTick;
000002  6800              LDR      r0,[r0,#0]  ; uwTick
;;;320    }
000004  4770              BX       lr
;;;321    
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      uwTick

                          AREA ||i.HAL_GetTickFreq||, CODE, READONLY, ALIGN=2

                  HAL_GetTickFreq PROC
;;;354      */
;;;355    HAL_TickFreqTypeDef HAL_GetTickFreq(void)
000000  4801              LDR      r0,|L19.8|
;;;356    {
;;;357      return uwTickFreq;
000002  6800              LDR      r0,[r0,#0]  ; uwTickFreq
;;;358    }
000004  4770              BX       lr
;;;359    
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      uwTickFreq

                          AREA ||i.HAL_GetTickPrio||, CODE, READONLY, ALIGN=2

                  HAL_GetTickPrio PROC
;;;325      */
;;;326    uint32_t HAL_GetTickPrio(void)
000000  4801              LDR      r0,|L20.8|
;;;327    {
;;;328      return uwTickPrio;
000002  6800              LDR      r0,[r0,#0]  ; uwTickPrio
;;;329    }
000004  4770              BX       lr
;;;330    
                          ENDP

000006  0000              DCW      0x0000
                  |L20.8|
                          DCD      uwTickPrio

                          AREA ||i.HAL_GetUIDw0||, CODE, READONLY, ALIGN=2

                  HAL_GetUIDw0 PROC
;;;449      */
;;;450    uint32_t HAL_GetUIDw0(void)
000000  4801              LDR      r0,|L21.8|
;;;451    {
;;;452       return(READ_REG(*((uint32_t *)UID_BASE)));
000002  6800              LDR      r0,[r0,#0]
;;;453    }
000004  4770              BX       lr
;;;454    
                          ENDP

000006  0000              DCW      0x0000
                  |L21.8|
                          DCD      0x1ff0f420

                          AREA ||i.HAL_GetUIDw1||, CODE, READONLY, ALIGN=2

                  HAL_GetUIDw1 PROC
;;;458      */
;;;459    uint32_t HAL_GetUIDw1(void)
000000  4801              LDR      r0,|L22.8|
;;;460    {
;;;461       return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
000002  6800              LDR      r0,[r0,#0]
;;;462    }
000004  4770              BX       lr
;;;463    
                          ENDP

000006  0000              DCW      0x0000
                  |L22.8|
                          DCD      0x1ff0f424

                          AREA ||i.HAL_GetUIDw2||, CODE, READONLY, ALIGN=2

                  HAL_GetUIDw2 PROC
;;;467      */
;;;468    uint32_t HAL_GetUIDw2(void)
000000  4801              LDR      r0,|L23.8|
;;;469    {
;;;470       return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
000002  6800              LDR      r0,[r0,#0]
;;;471    }
000004  4770              BX       lr
;;;472    
                          ENDP

000006  0000              DCW      0x0000
                  |L23.8|
                          DCD      0x1ff0f428

                          AREA ||i.HAL_IncTick||, CODE, READONLY, ALIGN=2

                  HAL_IncTick PROC
;;;305      */
;;;306    __weak void HAL_IncTick(void)
000000  4803              LDR      r0,|L24.16|
;;;307    {
;;;308      uwTick += uwTickFreq;
000002  6800              LDR      r0,[r0,#0]  ; uwTick
000004  4903              LDR      r1,|L24.20|
000006  6809              LDR      r1,[r1,#0]  ; uwTickFreq
000008  4408              ADD      r0,r0,r1
00000a  4901              LDR      r1,|L24.16|
00000c  6008              STR      r0,[r1,#0]  ; uwTick
;;;309    }
00000e  4770              BX       lr
;;;310    
                          ENDP

                  |L24.16|
                          DCD      uwTick
                  |L24.20|
                          DCD      uwTickFreq

                          AREA ||i.HAL_Init||, CODE, READONLY, ALIGN=2

                  HAL_Init PROC
;;;153      */
;;;154    HAL_StatusTypeDef HAL_Init(void)
000000  b510              PUSH     {r4,lr}
;;;155    {
;;;156      /* Configure Instruction cache through ART accelerator */ 
;;;157    #if (ART_ACCLERATOR_ENABLE != 0)
;;;158       __HAL_FLASH_ART_ENABLE();
000002  480a              LDR      r0,|L25.44|
000004  6800              LDR      r0,[r0,#0]
000006  f4407000          ORR      r0,r0,#0x200
00000a  4908              LDR      r1,|L25.44|
00000c  6008              STR      r0,[r1,#0]
;;;159    #endif /* ART_ACCLERATOR_ENABLE */
;;;160    
;;;161      /* Configure Flash prefetch */
;;;162    #if (PREFETCH_ENABLE != 0U)
;;;163      __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
00000e  4608              MOV      r0,r1
000010  6800              LDR      r0,[r0,#0]
000012  f4407080          ORR      r0,r0,#0x100
000016  6008              STR      r0,[r1,#0]
;;;164    #endif /* PREFETCH_ENABLE */
;;;165    
;;;166      /* Set Interrupt Group Priority */
;;;167      HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
000018  2003              MOVS     r0,#3
00001a  f7fffffe          BL       HAL_NVIC_SetPriorityGrouping
;;;168    
;;;169      /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
;;;170      HAL_InitTick(TICK_INT_PRIORITY);
00001e  200f              MOVS     r0,#0xf
000020  f7fffffe          BL       HAL_InitTick
;;;171      
;;;172      /* Init the low level hardware */
;;;173      HAL_MspInit();
000024  f7fffffe          BL       HAL_MspInit
;;;174      
;;;175      /* Return function status */
;;;176      return HAL_OK;
000028  2000              MOVS     r0,#0
;;;177    }
00002a  bd10              POP      {r4,pc}
;;;178    
                          ENDP

                  |L25.44|
                          DCD      0x40023c00

                          AREA ||i.HAL_InitTick||, CODE, READONLY, ALIGN=2

                  HAL_InitTick PROC
;;;246      */
;;;247    __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
000000  b570              PUSH     {r4-r6,lr}
;;;248    {
000002  4604              MOV      r4,r0
;;;249      /* Configure the SysTick to have interrupt in 1ms time basis*/
;;;250      if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
000004  480e              LDR      r0,|L26.64|
000006  6800              LDR      r0,[r0,#0]  ; uwTickFreq
000008  f44f717a          MOV      r1,#0x3e8
00000c  fbb1f0f0          UDIV     r0,r1,r0
000010  490c              LDR      r1,|L26.68|
000012  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
000014  fbb1f5f0          UDIV     r5,r1,r0
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       HAL_SYSTICK_Config
00001e  b108              CBZ      r0,|L26.36|
;;;251      {
;;;252        return HAL_ERROR;
000020  2001              MOVS     r0,#1
                  |L26.34|
;;;253      }
;;;254    
;;;255      /* Configure the SysTick IRQ priority */
;;;256      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
;;;257      {
;;;258        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
;;;259        uwTickPrio = TickPriority;
;;;260      }
;;;261      else
;;;262      {
;;;263        return HAL_ERROR;
;;;264      }
;;;265    
;;;266      /* Return function status */
;;;267      return HAL_OK;
;;;268    }
000022  bd70              POP      {r4-r6,pc}
                  |L26.36|
000024  2c10              CMP      r4,#0x10              ;256
000026  d207              BCS      |L26.56|
000028  2200              MOVS     r2,#0                 ;258
00002a  4621              MOV      r1,r4                 ;258
00002c  1e50              SUBS     r0,r2,#1              ;258
00002e  f7fffffe          BL       HAL_NVIC_SetPriority
000032  4805              LDR      r0,|L26.72|
000034  6004              STR      r4,[r0,#0]            ;259  ; uwTickPrio
000036  e001              B        |L26.60|
                  |L26.56|
000038  2001              MOVS     r0,#1                 ;263
00003a  e7f2              B        |L26.34|
                  |L26.60|
00003c  2000              MOVS     r0,#0                 ;267
00003e  e7f0              B        |L26.34|
;;;269    
                          ENDP

                  |L26.64|
                          DCD      uwTickFreq
                  |L26.68|
                          DCD      SystemCoreClock
                  |L26.72|
                          DCD      uwTickPrio

                          AREA ||i.HAL_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_MspDeInit PROC
;;;223      */
;;;224    __weak void HAL_MspDeInit(void)
000000  4770              BX       lr
;;;225    {
;;;226      /* NOTE : This function should not be modified, when the callback is needed,
;;;227                the HAL_MspDeInit could be implemented in the user file
;;;228       */ 
;;;229    }
;;;230    
                          ENDP


                          AREA ||i.HAL_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_MspInit PROC
;;;212      */
;;;213    __weak void HAL_MspInit(void)
000000  4770              BX       lr
;;;214    {
;;;215      /* NOTE : This function should not be modified, when the callback is needed,
;;;216                the HAL_MspInit could be implemented in the user file
;;;217       */
;;;218    }
;;;219    
                          ENDP


                          AREA ||i.HAL_ResumeTick||, CODE, READONLY, ALIGN=1

                  HAL_ResumeTick PROC
;;;412      */
;;;413    __weak void HAL_ResumeTick(void)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;414    {
;;;415      /* Enable SysTick Interrupt */
;;;416      SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
000004  6900              LDR      r0,[r0,#0x10]
000006  f0400002          ORR      r0,r0,#2
00000a  f04f21e0          MOV      r1,#0xe000e000
00000e  6108              STR      r0,[r1,#0x10]
;;;417    }
000010  4770              BX       lr
;;;418    
                          ENDP


                          AREA ||i.HAL_SetTickFreq||, CODE, READONLY, ALIGN=2

                  HAL_SetTickFreq PROC
;;;334      */
;;;335    HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
000000  b570              PUSH     {r4-r6,lr}
;;;336    {
000002  4604              MOV      r4,r0
;;;337      HAL_StatusTypeDef status  = HAL_OK;
000004  2500              MOVS     r5,#0
;;;338      assert_param(IS_TICKFREQ(Freq));
;;;339    
;;;340      if (uwTickFreq != Freq)
000006  4806              LDR      r0,|L30.32|
000008  6800              LDR      r0,[r0,#0]  ; uwTickFreq
00000a  42a0              CMP      r0,r4
00000c  d006              BEQ      |L30.28|
;;;341      {
;;;342        uwTickFreq = Freq;
00000e  4804              LDR      r0,|L30.32|
000010  6004              STR      r4,[r0,#0]  ; uwTickFreq
;;;343    
;;;344        /* Apply the new tick Freq  */
;;;345        status = HAL_InitTick(uwTickPrio);
000012  4804              LDR      r0,|L30.36|
000014  6800              LDR      r0,[r0,#0]  ; uwTickPrio
000016  f7fffffe          BL       HAL_InitTick
00001a  4605              MOV      r5,r0
                  |L30.28|
;;;346      }
;;;347    
;;;348      return status;
00001c  4628              MOV      r0,r5
;;;349    }
00001e  bd70              POP      {r4-r6,pc}
;;;350    
                          ENDP

                  |L30.32|
                          DCD      uwTickFreq
                  |L30.36|
                          DCD      uwTickPrio

                          AREA ||i.HAL_SuspendTick||, CODE, READONLY, ALIGN=1

                  HAL_SuspendTick PROC
;;;396      */
;;;397    __weak void HAL_SuspendTick(void)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;398    {
;;;399      /* Disable SysTick Interrupt */
;;;400      SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
000004  6900              LDR      r0,[r0,#0x10]
000006  f0200002          BIC      r0,r0,#2
00000a  f04f21e0          MOV      r1,#0xe000e000
00000e  6108              STR      r0,[r1,#0x10]
;;;401    }
000010  4770              BX       lr
;;;402    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  uwTick
                          DCD      0x00000000
                  uwTickPrio
                          DCD      0x00000010
                  uwTickFreq
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F7_V1.11.0\\Drivers\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f7xx_hal_c_3da258af____REV16|
#line 464 "D:\\Program_Files_x86\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_stm32f7xx_hal_c_3da258af____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f7xx_hal_c_3da258af____REVSH|
#line 479
|__asm___15_stm32f7xx_hal_c_3da258af____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f7xx_hal_c_3da258af____RRX|
#line 666
|__asm___15_stm32f7xx_hal_c_3da258af____RRX| PROC
#line 667

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
