; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f7xx_hal_rcc_ex.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f7xx_hal_rcc_ex.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(D)_Duktape\duktape\src -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-DUKTAPE\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DDUK_USE_BYTEORDER=1 --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f7xx_hal_rcc_ex.crf ..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_rcc_ex.c]
                          THUMB

                          AREA ||i.HAL_RCCEx_DisablePLLI2S||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_DisablePLLI2S PROC
;;;1663     */
;;;1664   HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
000000  b510              PUSH     {r4,lr}
;;;1665   {
;;;1666     uint32_t tickstart;
;;;1667   
;;;1668     /* Disable the PLLI2S */
;;;1669     __HAL_RCC_PLLI2S_DISABLE();
000002  480c              LDR      r0,|L1.52|
000004  6800              LDR      r0,[r0,#0]
000006  f0206080          BIC      r0,r0,#0x4000000
00000a  490a              LDR      r1,|L1.52|
00000c  6008              STR      r0,[r1,#0]
;;;1670   
;;;1671     /* Wait till PLLI2S is disabled */
;;;1672     tickstart = HAL_GetTick();
00000e  f7fffffe          BL       HAL_GetTick
000012  4604              MOV      r4,r0
;;;1673     while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
000014  e006              B        |L1.36|
                  |L1.22|
;;;1674     {
;;;1675       if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
000016  f7fffffe          BL       HAL_GetTick
00001a  1b00              SUBS     r0,r0,r4
00001c  2864              CMP      r0,#0x64
00001e  d901              BLS      |L1.36|
;;;1676       {
;;;1677         /* return in case of Timeout detected */
;;;1678         return HAL_TIMEOUT;
000020  2003              MOVS     r0,#3
                  |L1.34|
;;;1679       }
;;;1680     }
;;;1681   
;;;1682     return HAL_OK;
;;;1683   }
000022  bd10              POP      {r4,pc}
                  |L1.36|
000024  4803              LDR      r0,|L1.52|
000026  6800              LDR      r0,[r0,#0]            ;1673
000028  f0006000          AND      r0,r0,#0x8000000      ;1673
00002c  2800              CMP      r0,#0                 ;1673
00002e  d1f2              BNE      |L1.22|
000030  bf00              NOP                            ;1682
000032  e7f6              B        |L1.34|
;;;1684   
                          ENDP

                  |L1.52|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_DisablePLLSAI||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_DisablePLLSAI PROC
;;;1752     */
;;;1753   HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI(void)
000000  b510              PUSH     {r4,lr}
;;;1754   {
;;;1755     uint32_t tickstart;
;;;1756   
;;;1757     /* Disable the PLLSAI */
;;;1758     __HAL_RCC_PLLSAI_DISABLE();
000002  480c              LDR      r0,|L2.52|
000004  6800              LDR      r0,[r0,#0]
000006  f0205080          BIC      r0,r0,#0x10000000
00000a  490a              LDR      r1,|L2.52|
00000c  6008              STR      r0,[r1,#0]
;;;1759   
;;;1760     /* Wait till PLLSAI is disabled */
;;;1761     tickstart = HAL_GetTick();
00000e  f7fffffe          BL       HAL_GetTick
000012  4604              MOV      r4,r0
;;;1762     while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
000014  e006              B        |L2.36|
                  |L2.22|
;;;1763     {
;;;1764       if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
000016  f7fffffe          BL       HAL_GetTick
00001a  1b00              SUBS     r0,r0,r4
00001c  2864              CMP      r0,#0x64
00001e  d901              BLS      |L2.36|
;;;1765       {
;;;1766         /* return in case of Timeout detected */
;;;1767         return HAL_TIMEOUT;
000020  2003              MOVS     r0,#3
                  |L2.34|
;;;1768       }
;;;1769     }
;;;1770   
;;;1771     return HAL_OK;
;;;1772   }
000022  bd10              POP      {r4,pc}
                  |L2.36|
000024  4803              LDR      r0,|L2.52|
000026  6800              LDR      r0,[r0,#0]            ;1762
000028  f3c07040          UBFX     r0,r0,#29,#1          ;1762
00002c  2800              CMP      r0,#0                 ;1762
00002e  d1f2              BNE      |L2.22|
000030  bf00              NOP                            ;1771
000032  e7f6              B        |L2.34|
;;;1773   
                          ENDP

                  |L2.52|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_EnablePLLI2S||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_EnablePLLI2S PROC
;;;1602     */
;;;1603   HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
000000  b570              PUSH     {r4-r6,lr}
;;;1604   {
000002  4604              MOV      r4,r0
;;;1605     uint32_t tickstart;
;;;1606   
;;;1607     /* Check for parameters */
;;;1608     assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SInit->PLLI2SN));
;;;1609     assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SInit->PLLI2SR));
;;;1610     assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
;;;1611   #if defined(RCC_PLLI2SCFGR_PLLI2SP)
;;;1612     assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SInit->PLLI2SP));
;;;1613   #endif /* RCC_PLLI2SCFGR_PLLI2SP */
;;;1614   
;;;1615     /* Disable the PLLI2S */
;;;1616     __HAL_RCC_PLLI2S_DISABLE();
000004  481e              LDR      r0,|L3.128|
000006  6800              LDR      r0,[r0,#0]
000008  f0206080          BIC      r0,r0,#0x4000000
00000c  491c              LDR      r1,|L3.128|
00000e  6008              STR      r0,[r1,#0]
;;;1617   
;;;1618     /* Wait till PLLI2S is disabled */
;;;1619     tickstart = HAL_GetTick();
000010  f7fffffe          BL       HAL_GetTick
000014  4605              MOV      r5,r0
;;;1620     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
000016  e006              B        |L3.38|
                  |L3.24|
;;;1621     {
;;;1622       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
000018  f7fffffe          BL       HAL_GetTick
00001c  1b40              SUBS     r0,r0,r5
00001e  2864              CMP      r0,#0x64
000020  d901              BLS      |L3.38|
;;;1623       {
;;;1624         /* return in case of Timeout detected */
;;;1625         return HAL_TIMEOUT;
000022  2003              MOVS     r0,#3
                  |L3.36|
;;;1626       }
;;;1627     }
;;;1628   
;;;1629     /* Configure the PLLI2S division factors */
;;;1630   #if defined (STM32F722xx) || defined (STM32F723xx) || defined (STM32F732xx) || defined (STM32F733xx)
;;;1631     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * PLLI2SN */
;;;1632     /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
;;;1633     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;1634     __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
;;;1635   #else
;;;1636     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * PLLI2SN */
;;;1637     /* I2SPCLK = PLLI2S_VCO / PLLI2SP */
;;;1638     /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
;;;1639     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;1640     __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SP, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
;;;1641   #endif /* STM32F722xx || STM32F723xx || STM32F732xx || STM32F733xx */
;;;1642   
;;;1643     /* Enable the PLLI2S */
;;;1644     __HAL_RCC_PLLI2S_ENABLE();
;;;1645   
;;;1646     /* Wait till PLLI2S is ready */
;;;1647     tickstart = HAL_GetTick();
;;;1648     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
;;;1649     {
;;;1650       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
;;;1651       {
;;;1652         /* return in case of Timeout detected */
;;;1653         return HAL_TIMEOUT;
;;;1654       }
;;;1655     }
;;;1656   
;;;1657    return HAL_OK;
;;;1658   }
000024  bd70              POP      {r4-r6,pc}
                  |L3.38|
000026  4816              LDR      r0,|L3.128|
000028  6800              LDR      r0,[r0,#0]            ;1620
00002a  f3c060c0          UBFX     r0,r0,#27,#1          ;1620
00002e  2800              CMP      r0,#0                 ;1620
000030  d1f2              BNE      |L3.24|
000032  6820              LDR      r0,[r4,#0]            ;1640
000034  0180              LSLS     r0,r0,#6              ;1640
000036  89a1              LDRH     r1,[r4,#0xc]          ;1640
000038  ea404001          ORR      r0,r0,r1,LSL #16      ;1640
00003c  7a21              LDRB     r1,[r4,#8]            ;1640
00003e  ea406001          ORR      r0,r0,r1,LSL #24      ;1640
000042  7921              LDRB     r1,[r4,#4]            ;1640
000044  ea407001          ORR      r0,r0,r1,LSL #28      ;1640
000048  490d              LDR      r1,|L3.128|
00004a  3184              ADDS     r1,r1,#0x84           ;1640
00004c  6008              STR      r0,[r1,#0]            ;1640
00004e  480c              LDR      r0,|L3.128|
000050  6800              LDR      r0,[r0,#0]            ;1644
000052  f0406080          ORR      r0,r0,#0x4000000      ;1644
000056  490a              LDR      r1,|L3.128|
000058  6008              STR      r0,[r1,#0]            ;1644
00005a  f7fffffe          BL       HAL_GetTick
00005e  4605              MOV      r5,r0                 ;1647
000060  e006              B        |L3.112|
                  |L3.98|
000062  f7fffffe          BL       HAL_GetTick
000066  1b40              SUBS     r0,r0,r5              ;1650
000068  2864              CMP      r0,#0x64              ;1650
00006a  d901              BLS      |L3.112|
00006c  2003              MOVS     r0,#3                 ;1653
00006e  e7d9              B        |L3.36|
                  |L3.112|
000070  4803              LDR      r0,|L3.128|
000072  6800              LDR      r0,[r0,#0]            ;1648
000074  f3c060c0          UBFX     r0,r0,#27,#1          ;1648
000078  2800              CMP      r0,#0                 ;1648
00007a  d0f2              BEQ      |L3.98|
00007c  2000              MOVS     r0,#0                 ;1657
00007e  e7d1              B        |L3.36|
;;;1659   
                          ENDP

                  |L3.128|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_EnablePLLSAI||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_EnablePLLSAI PROC
;;;1690     */
;;;1691   HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI(RCC_PLLSAIInitTypeDef  *PLLSAIInit)
000000  b570              PUSH     {r4-r6,lr}
;;;1692   {
000002  4604              MOV      r4,r0
;;;1693     uint32_t tickstart;
;;;1694   
;;;1695     /* Check for parameters */
;;;1696     assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIInit->PLLSAIN));
;;;1697     assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIInit->PLLSAIQ));
;;;1698     assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIInit->PLLSAIP));
;;;1699   #if defined(RCC_PLLSAICFGR_PLLSAIR)
;;;1700     assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIInit->PLLSAIR));
;;;1701   #endif /* RCC_PLLSAICFGR_PLLSAIR */
;;;1702   
;;;1703     /* Disable the PLLSAI */
;;;1704     __HAL_RCC_PLLSAI_DISABLE();
000004  481e              LDR      r0,|L4.128|
000006  6800              LDR      r0,[r0,#0]
000008  f0205080          BIC      r0,r0,#0x10000000
00000c  491c              LDR      r1,|L4.128|
00000e  6008              STR      r0,[r1,#0]
;;;1705   
;;;1706     /* Wait till PLLSAI is disabled */
;;;1707     tickstart = HAL_GetTick();
000010  f7fffffe          BL       HAL_GetTick
000014  4605              MOV      r5,r0
;;;1708     while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
000016  e006              B        |L4.38|
                  |L4.24|
;;;1709     {
;;;1710       if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
000018  f7fffffe          BL       HAL_GetTick
00001c  1b40              SUBS     r0,r0,r5
00001e  2864              CMP      r0,#0x64
000020  d901              BLS      |L4.38|
;;;1711       {
;;;1712         /* return in case of Timeout detected */
;;;1713         return HAL_TIMEOUT;
000022  2003              MOVS     r0,#3
                  |L4.36|
;;;1714       }
;;;1715     }
;;;1716   
;;;1717     /* Configure the PLLSAI division factors */
;;;1718   #if defined (STM32F722xx) || defined (STM32F723xx) || defined (STM32F732xx) || defined (STM32F733xx)
;;;1719     /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * PLLSAIN */
;;;1720     /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
;;;1721     /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
;;;1722     __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIP, PLLSAIInit->PLLSAIQ);
;;;1723   #else
;;;1724     /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * PLLSAIN */
;;;1725     /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
;;;1726     /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
;;;1727     /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
;;;1728     __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIP, \
;;;1729                             PLLSAIInit->PLLSAIQ, PLLSAIInit->PLLSAIR);
;;;1730   #endif /* STM32F722xx || STM32F723xx || STM32F732xx || STM32F733xx */
;;;1731   
;;;1732     /* Enable the PLLSAI */
;;;1733     __HAL_RCC_PLLSAI_ENABLE();
;;;1734   
;;;1735     /* Wait till PLLSAI is ready */
;;;1736     tickstart = HAL_GetTick();
;;;1737     while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
;;;1738     {
;;;1739       if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
;;;1740       {
;;;1741         /* return in case of Timeout detected */
;;;1742         return HAL_TIMEOUT;
;;;1743       }
;;;1744     }
;;;1745   
;;;1746    return HAL_OK;
;;;1747   }
000024  bd70              POP      {r4-r6,pc}
                  |L4.38|
000026  4816              LDR      r0,|L4.128|
000028  6800              LDR      r0,[r0,#0]            ;1708
00002a  f3c07040          UBFX     r0,r0,#29,#1          ;1708
00002e  2800              CMP      r0,#0                 ;1708
000030  d1f2              BNE      |L4.24|
000032  6820              LDR      r0,[r4,#0]            ;1728
000034  0180              LSLS     r0,r0,#6              ;1728
000036  89a1              LDRH     r1,[r4,#0xc]          ;1728
000038  ea404001          ORR      r0,r0,r1,LSL #16      ;1728
00003c  7921              LDRB     r1,[r4,#4]            ;1728
00003e  ea406001          ORR      r0,r0,r1,LSL #24      ;1728
000042  7a21              LDRB     r1,[r4,#8]            ;1728
000044  ea407001          ORR      r0,r0,r1,LSL #28      ;1728
000048  490d              LDR      r1,|L4.128|
00004a  3188              ADDS     r1,r1,#0x88           ;1728
00004c  6008              STR      r0,[r1,#0]            ;1728
00004e  480c              LDR      r0,|L4.128|
000050  6800              LDR      r0,[r0,#0]            ;1733
000052  f0405080          ORR      r0,r0,#0x10000000     ;1733
000056  490a              LDR      r1,|L4.128|
000058  6008              STR      r0,[r1,#0]            ;1733
00005a  f7fffffe          BL       HAL_GetTick
00005e  4605              MOV      r5,r0                 ;1736
000060  e006              B        |L4.112|
                  |L4.98|
000062  f7fffffe          BL       HAL_GetTick
000066  1b40              SUBS     r0,r0,r5              ;1739
000068  2864              CMP      r0,#0x64              ;1739
00006a  d901              BLS      |L4.112|
00006c  2003              MOVS     r0,#3                 ;1742
00006e  e7d9              B        |L4.36|
                  |L4.112|
000070  4803              LDR      r0,|L4.128|
000072  6800              LDR      r0,[r0,#0]            ;1737
000074  f3c07040          UBFX     r0,r0,#29,#1          ;1737
000078  2800              CMP      r0,#0                 ;1737
00007a  d0f2              BEQ      |L4.98|
00007c  2000              MOVS     r0,#0                 ;1746
00007e  e7d1              B        |L4.36|
;;;1748   
                          ENDP

                  |L4.128|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_GetPeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKConfig PROC
;;;681      */
;;;682    void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  2100              MOVS     r1,#0
;;;683    {
;;;684      uint32_t tempreg = 0;
;;;685      
;;;686      /* Set all possible values for the extended clock type parameter------------*/
;;;687    #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
;;;688      PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
000002  4a6f              LDR      r2,|L5.448|
000004  6002              STR      r2,[r0,#0]
;;;689                                            RCC_PERIPHCLK_SAI1     | RCC_PERIPHCLK_SAI2     |\
;;;690                                            RCC_PERIPHCLK_TIM      | RCC_PERIPHCLK_RTC      |\
;;;691                                            RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_I2C4     |\
;;;692                                            RCC_PERIPHCLK_I2C1     | RCC_PERIPHCLK_I2C2     |\
;;;693                                            RCC_PERIPHCLK_I2C3     | RCC_PERIPHCLK_USART1   |\
;;;694                                            RCC_PERIPHCLK_USART2   | RCC_PERIPHCLK_USART3   |\
;;;695                                            RCC_PERIPHCLK_UART4    | RCC_PERIPHCLK_UART5    |\
;;;696                                            RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
;;;697                                            RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
;;;698                                            RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
;;;699                                            RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
;;;700    #else  
;;;701      PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
;;;702                                            RCC_PERIPHCLK_SAI1     | RCC_PERIPHCLK_SAI2     |\
;;;703                                            RCC_PERIPHCLK_TIM      | RCC_PERIPHCLK_RTC      |\
;;;704                                            RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_I2C4     |\
;;;705                                            RCC_PERIPHCLK_I2C1     | RCC_PERIPHCLK_I2C2     |\
;;;706                                            RCC_PERIPHCLK_I2C3     | RCC_PERIPHCLK_USART1   |\
;;;707                                            RCC_PERIPHCLK_USART2   | RCC_PERIPHCLK_USART3   |\
;;;708                                            RCC_PERIPHCLK_UART4    | RCC_PERIPHCLK_UART5    |\
;;;709                                            RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
;;;710                                            RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
;;;711                                            RCC_PERIPHCLK_CLK48;
;;;712    #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
;;;713      
;;;714      /* Get the PLLI2S Clock configuration -----------------------------------------------*/
;;;715      PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
000006  4a6f              LDR      r2,|L5.452|
000008  6812              LDR      r2,[r2,#0]
00000a  f3c21288          UBFX     r2,r2,#6,#9
00000e  6042              STR      r2,[r0,#4]
;;;716      PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
000010  4a6c              LDR      r2,|L5.452|
000012  6812              LDR      r2,[r2,#0]
000014  f3c24301          UBFX     r3,r2,#16,#2
000018  6103              STR      r3,[r0,#0x10]
;;;717      PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
00001a  4a6a              LDR      r2,|L5.452|
00001c  6812              LDR      r2,[r2,#0]
00001e  f3c26303          UBFX     r3,r2,#24,#4
000022  60c3              STR      r3,[r0,#0xc]
;;;718      PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
000024  4a67              LDR      r2,|L5.452|
000026  6812              LDR      r2,[r2,#0]
000028  f3c27302          UBFX     r3,r2,#28,#3
00002c  6083              STR      r3,[r0,#8]
;;;719      
;;;720      /* Get the PLLSAI Clock configuration -----------------------------------------------*/
;;;721      PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
00002e  4a65              LDR      r2,|L5.452|
000030  1d12              ADDS     r2,r2,#4
000032  6812              LDR      r2,[r2,#0]
000034  f3c21288          UBFX     r2,r2,#6,#9
000038  6142              STR      r2,[r0,#0x14]
;;;722      PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
00003a  4a62              LDR      r2,|L5.452|
00003c  1d12              ADDS     r2,r2,#4
00003e  6812              LDR      r2,[r2,#0]
000040  f3c24301          UBFX     r3,r2,#16,#2
000044  6203              STR      r3,[r0,#0x20]
;;;723      PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos); 
000046  4a5f              LDR      r2,|L5.452|
000048  1d12              ADDS     r2,r2,#4
00004a  6812              LDR      r2,[r2,#0]
00004c  f3c26303          UBFX     r3,r2,#24,#4
000050  6183              STR      r3,[r0,#0x18]
;;;724      PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos); 
000052  4a5c              LDR      r2,|L5.452|
000054  1d12              ADDS     r2,r2,#4
000056  6812              LDR      r2,[r2,#0]
000058  f3c27302          UBFX     r3,r2,#28,#3
00005c  61c3              STR      r3,[r0,#0x1c]
;;;725      
;;;726      /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
;;;727      PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
00005e  4a59              LDR      r2,|L5.452|
000060  3208              ADDS     r2,r2,#8
000062  6812              LDR      r2,[r2,#0]
000064  f002021f          AND      r2,r2,#0x1f
000068  f8402f24          STR      r2,[r0,#0x24]!
;;;728      PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
00006c  4a55              LDR      r2,|L5.452|
00006e  3208              ADDS     r2,r2,#8
000070  6812              LDR      r2,[r2,#0]
000072  f3c22204          UBFX     r2,r2,#8,#5
000076  6042              STR      r2,[r0,#4]
;;;729      PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
000078  4a52              LDR      r2,|L5.452|
00007a  3208              ADDS     r2,r2,#8
00007c  6812              LDR      r2,[r2,#0]
00007e  f3c24201          UBFX     r2,r2,#16,#2
000082  6082              STR      r2,[r0,#8]
;;;730    
;;;731      /* Get the SAI1 clock configuration ----------------------------------------------*/
;;;732      PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
000084  4a4f              LDR      r2,|L5.452|
000086  3208              ADDS     r2,r2,#8
000088  6812              LDR      r2,[r2,#0]
00008a  f4021240          AND      r2,r2,#0x300000
00008e  6182              STR      r2,[r0,#0x18]
;;;733      
;;;734      /* Get the SAI2 clock configuration ----------------------------------------------*/
;;;735      PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
000090  4a4c              LDR      r2,|L5.452|
000092  3208              ADDS     r2,r2,#8
000094  6812              LDR      r2,[r2,#0]
000096  f4020240          AND      r2,r2,#0xc00000
00009a  61c2              STR      r2,[r0,#0x1c]
;;;736      
;;;737      /* Get the I2S clock configuration ------------------------------------------*/
;;;738      PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
00009c  4a49              LDR      r2,|L5.452|
00009e  3a7c              SUBS     r2,r2,#0x7c
0000a0  6812              LDR      r2,[r2,#0]
0000a2  f4020200          AND      r2,r2,#0x800000
0000a6  6102              STR      r2,[r0,#0x10]
;;;739      
;;;740      /* Get the I2C1 clock configuration ------------------------------------------*/
;;;741      PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
0000a8  4a46              LDR      r2,|L5.452|
0000aa  320c              ADDS     r2,r2,#0xc
0000ac  6812              LDR      r2,[r2,#0]
0000ae  f4023240          AND      r2,r2,#0x30000
0000b2  6402              STR      r2,[r0,#0x40]
;;;742      
;;;743      /* Get the I2C2 clock configuration ------------------------------------------*/
;;;744      PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
0000b4  4a43              LDR      r2,|L5.452|
0000b6  320c              ADDS     r2,r2,#0xc
0000b8  6812              LDR      r2,[r2,#0]
0000ba  f4022240          AND      r2,r2,#0xc0000
0000be  6442              STR      r2,[r0,#0x44]
;;;745      
;;;746      /* Get the I2C3 clock configuration ------------------------------------------*/
;;;747      PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
0000c0  4a40              LDR      r2,|L5.452|
0000c2  320c              ADDS     r2,r2,#0xc
0000c4  6812              LDR      r2,[r2,#0]
0000c6  f4021240          AND      r2,r2,#0x300000
0000ca  6482              STR      r2,[r0,#0x48]
;;;748      
;;;749      /* Get the I2C4 clock configuration ------------------------------------------*/
;;;750      PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
0000cc  4a3d              LDR      r2,|L5.452|
0000ce  320c              ADDS     r2,r2,#0xc
0000d0  6812              LDR      r2,[r2,#0]
0000d2  f4020240          AND      r2,r2,#0xc00000
0000d6  64c2              STR      r2,[r0,#0x4c]
;;;751      
;;;752      /* Get the USART1 clock configuration ------------------------------------------*/
;;;753      PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
0000d8  4a3a              LDR      r2,|L5.452|
0000da  320c              ADDS     r2,r2,#0xc
0000dc  6812              LDR      r2,[r2,#0]
0000de  f0020203          AND      r2,r2,#3
0000e2  6202              STR      r2,[r0,#0x20]
;;;754      
;;;755      /* Get the USART2 clock configuration ------------------------------------------*/
;;;756      PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
0000e4  4a37              LDR      r2,|L5.452|
0000e6  320c              ADDS     r2,r2,#0xc
0000e8  6812              LDR      r2,[r2,#0]
0000ea  f002020c          AND      r2,r2,#0xc
0000ee  6242              STR      r2,[r0,#0x24]
;;;757      
;;;758      /* Get the USART3 clock configuration ------------------------------------------*/
;;;759      PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
0000f0  4a34              LDR      r2,|L5.452|
0000f2  320c              ADDS     r2,r2,#0xc
0000f4  6812              LDR      r2,[r2,#0]
0000f6  f0020230          AND      r2,r2,#0x30
0000fa  6282              STR      r2,[r0,#0x28]
;;;760      
;;;761      /* Get the UART4 clock configuration ------------------------------------------*/
;;;762      PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
0000fc  4a31              LDR      r2,|L5.452|
0000fe  320c              ADDS     r2,r2,#0xc
000100  6812              LDR      r2,[r2,#0]
000102  f00202c0          AND      r2,r2,#0xc0
000106  62c2              STR      r2,[r0,#0x2c]
;;;763      
;;;764      /* Get the UART5 clock configuration ------------------------------------------*/
;;;765      PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
000108  4a2e              LDR      r2,|L5.452|
00010a  320c              ADDS     r2,r2,#0xc
00010c  6812              LDR      r2,[r2,#0]
00010e  f4027240          AND      r2,r2,#0x300
000112  6302              STR      r2,[r0,#0x30]
;;;766      
;;;767      /* Get the USART6 clock configuration ------------------------------------------*/
;;;768      PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
000114  4a2b              LDR      r2,|L5.452|
000116  320c              ADDS     r2,r2,#0xc
000118  6812              LDR      r2,[r2,#0]
00011a  f4026240          AND      r2,r2,#0xc00
00011e  6342              STR      r2,[r0,#0x34]
;;;769      
;;;770      /* Get the UART7 clock configuration ------------------------------------------*/
;;;771      PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
000120  4a28              LDR      r2,|L5.452|
000122  320c              ADDS     r2,r2,#0xc
000124  6812              LDR      r2,[r2,#0]
000126  f4025240          AND      r2,r2,#0x3000
00012a  6382              STR      r2,[r0,#0x38]
;;;772      
;;;773      /* Get the UART8 clock configuration ------------------------------------------*/
;;;774      PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
00012c  4a25              LDR      r2,|L5.452|
00012e  320c              ADDS     r2,r2,#0xc
000130  6812              LDR      r2,[r2,#0]
000132  f4024240          AND      r2,r2,#0xc000
000136  63c2              STR      r2,[r0,#0x3c]
;;;775      
;;;776      /* Get the LPTIM1 clock configuration ------------------------------------------*/
;;;777      PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
000138  4a22              LDR      r2,|L5.452|
00013a  320c              ADDS     r2,r2,#0xc
00013c  6812              LDR      r2,[r2,#0]
00013e  f0027240          AND      r2,r2,#0x3000000
000142  6502              STR      r2,[r0,#0x50]
;;;778      
;;;779      /* Get the CEC clock configuration -----------------------------------------------*/
;;;780      PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
000144  4a1f              LDR      r2,|L5.452|
000146  320c              ADDS     r2,r2,#0xc
000148  6812              LDR      r2,[r2,#0]
00014a  f0026280          AND      r2,r2,#0x4000000
00014e  6542              STR      r2,[r0,#0x54]
;;;781      
;;;782      /* Get the CK48 clock configuration -----------------------------------------------*/
;;;783      PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
000150  4a1c              LDR      r2,|L5.452|
000152  320c              ADDS     r2,r2,#0xc
000154  6812              LDR      r2,[r2,#0]
000156  f0026200          AND      r2,r2,#0x8000000
00015a  6582              STR      r2,[r0,#0x58]
;;;784    
;;;785      /* Get the SDMMC1 clock configuration -----------------------------------------------*/
;;;786      PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
00015c  4a19              LDR      r2,|L5.452|
00015e  320c              ADDS     r2,r2,#0xc
000160  6812              LDR      r2,[r2,#0]
000162  f0025280          AND      r2,r2,#0x10000000
000166  65c2              STR      r2,[r0,#0x5c]
;;;787      
;;;788    #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
;;;789      /* Get the SDMMC2 clock configuration -----------------------------------------------*/
;;;790      PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
000168  4a16              LDR      r2,|L5.452|
00016a  320c              ADDS     r2,r2,#0xc
00016c  6812              LDR      r2,[r2,#0]
00016e  f0025200          AND      r2,r2,#0x20000000
000172  6602              STR      r2,[r0,#0x60]
;;;791    	
;;;792      /* Get the DFSDM clock configuration -----------------------------------------------*/
;;;793      PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
000174  4a13              LDR      r2,|L5.452|
000176  3208              ADDS     r2,r2,#8
000178  6812              LDR      r2,[r2,#0]
00017a  f0027200          AND      r2,r2,#0x2000000
00017e  6642              STR      r2,[r0,#0x64]
;;;794      
;;;795      /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
;;;796      PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
000180  4a10              LDR      r2,|L5.452|
000182  3208              ADDS     r2,r2,#8
000184  6812              LDR      r2,[r2,#0]
000186  f0026280          AND      r2,r2,#0x4000000
00018a  6682              STR      r2,[r0,#0x68]
;;;797    #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
;;;798      
;;;799      /* Get the RTC Clock configuration -----------------------------------------------*/
;;;800      tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
00018c  4a0d              LDR      r2,|L5.452|
00018e  3a7c              SUBS     r2,r2,#0x7c
000190  6812              LDR      r2,[r2,#0]
000192  f40211f8          AND      r1,r2,#0x1f0000
;;;801      PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
000196  4a0b              LDR      r2,|L5.452|
000198  3a14              SUBS     r2,r2,#0x14
00019a  6812              LDR      r2,[r2,#0]
00019c  f4027240          AND      r2,r2,#0x300
0001a0  430a              ORRS     r2,r2,r1
0001a2  60c2              STR      r2,[r0,#0xc]
0001a4  3824              SUBS     r0,r0,#0x24
;;;802      
;;;803      /* Get the TIM Prescaler configuration --------------------------------------------*/
;;;804      if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
0001a6  4a07              LDR      r2,|L5.452|
0001a8  3208              ADDS     r2,r2,#8
0001aa  6812              LDR      r2,[r2,#0]
0001ac  f0027280          AND      r2,r2,#0x1000000
0001b0  b912              CBNZ     r2,|L5.440|
;;;805      {
;;;806        PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
0001b2  2200              MOVS     r2,#0
0001b4  6382              STR      r2,[r0,#0x38]
0001b6  e002              B        |L5.446|
                  |L5.440|
;;;807      }
;;;808      else
;;;809      {
;;;810        PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
0001b8  f04f7280          MOV      r2,#0x1000000
0001bc  6382              STR      r2,[r0,#0x38]
                  |L5.446|
;;;811      }
;;;812    }
0001be  4770              BX       lr
;;;813    #endif /* STM32F745xx || STM32F746xx || STM32F756xx || STM32F765xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
                          ENDP

                  |L5.448|
                          DCD      0x1cfffff1
                  |L5.452|
                          DCD      0x40023884

                          AREA ||i.HAL_RCCEx_GetPeriphCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKFreq PROC
;;;1399     */
;;;1400   uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
000000  b570              PUSH     {r4-r6,lr}
;;;1401   {
000002  4604              MOV      r4,r0
;;;1402     uint32_t tmpreg = 0;
000004  2100              MOVS     r1,#0
;;;1403     /* This variable is used to store the SAI clock frequency (value in Hz) */
;;;1404     uint32_t frequency = 0;
000006  2000              MOVS     r0,#0
;;;1405     /* This variable is used to store the VCO Input (value in Hz) */
;;;1406     uint32_t vcoinput = 0;
000008  2200              MOVS     r2,#0
;;;1407     /* This variable is used to store the SAI clock source */
;;;1408     uint32_t saiclocksource = 0;
00000a  2300              MOVS     r3,#0
;;;1409     
;;;1410     if (PeriphClk == RCC_PERIPHCLK_SAI1)
00000c  f5b42f00          CMP      r4,#0x80000
000010  d175              BNE      |L6.254|
;;;1411     {
;;;1412       saiclocksource = RCC->DCKCFGR1;   
000012  4d78              LDR      r5,|L6.500|
000014  682b              LDR      r3,[r5,#0]
;;;1413       saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
000016  f4031340          AND      r3,r3,#0x300000
;;;1414       switch (saiclocksource)
00001a  b14b              CBZ      r3,|L6.48|
00001c  f5b31f80          CMP      r3,#0x100000
000020  d032              BEQ      |L6.136|
000022  f5b31f00          CMP      r3,#0x200000
000026  d05b              BEQ      |L6.224|
000028  f5b31f40          CMP      r3,#0x300000
00002c  d165              BNE      |L6.250|
00002e  e059              B        |L6.228|
                  |L6.48|
;;;1415       {
;;;1416       case 0: /* PLLSAI is the clock source for SAI1 */ 
;;;1417         {
;;;1418           /* Configure the PLLSAI division factor */
;;;1419           /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */ 
;;;1420           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
000030  4d70              LDR      r5,|L6.500|
000032  3d88              SUBS     r5,r5,#0x88
000034  682d              LDR      r5,[r5,#0]
000036  f4050580          AND      r5,r5,#0x400000
00003a  b945              CBNZ     r5,|L6.78|
;;;1421           {
;;;1422             /* In Case the PLL Source is HSI (Internal Clock) */
;;;1423             vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
00003c  4d6d              LDR      r5,|L6.500|
00003e  3d88              SUBS     r5,r5,#0x88
000040  682d              LDR      r5,[r5,#0]
000042  f005053f          AND      r5,r5,#0x3f
000046  4e6c              LDR      r6,|L6.504|
000048  fbb6f2f5          UDIV     r2,r6,r5
00004c  e007              B        |L6.94|
                  |L6.78|
;;;1424           }
;;;1425           else
;;;1426           {
;;;1427             /* In Case the PLL Source is HSE (External Clock) */
;;;1428             vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
00004e  4d69              LDR      r5,|L6.500|
000050  3d88              SUBS     r5,r5,#0x88
000052  682d              LDR      r5,[r5,#0]
000054  f005053f          AND      r5,r5,#0x3f
000058  4e68              LDR      r6,|L6.508|
00005a  fbb6f2f5          UDIV     r2,r6,r5
                  |L6.94|
;;;1429           }   
;;;1430           /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
;;;1431           /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
;;;1432           tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
00005e  4d65              LDR      r5,|L6.500|
000060  1f2d              SUBS     r5,r5,#4
000062  682d              LDR      r5,[r5,#0]
000064  f3c56103          UBFX     r1,r5,#24,#4
;;;1433           frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
000068  4d62              LDR      r5,|L6.500|
00006a  1f2d              SUBS     r5,r5,#4
00006c  682d              LDR      r5,[r5,#0]
00006e  f3c51588          UBFX     r5,r5,#6,#9
000072  4355              MULS     r5,r2,r5
000074  fbb5f0f1          UDIV     r0,r5,r1
;;;1434           
;;;1435           /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
;;;1436           tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
000078  4d5e              LDR      r5,|L6.500|
00007a  682d              LDR      r5,[r5,#0]
00007c  f3c52504          UBFX     r5,r5,#8,#5
000080  1c69              ADDS     r1,r5,#1
;;;1437           frequency = frequency/(tmpreg); 
000082  fbb0f0f1          UDIV     r0,r0,r1
;;;1438           break;       
000086  e039              B        |L6.252|
                  |L6.136|
;;;1439         }
;;;1440       case RCC_DCKCFGR1_SAI1SEL_0: /* PLLI2S is the clock source for SAI1 */
;;;1441         {  
;;;1442           /* Configure the PLLI2S division factor */
;;;1443           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */ 
;;;1444           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
000088  4d5a              LDR      r5,|L6.500|
00008a  3d88              SUBS     r5,r5,#0x88
00008c  682d              LDR      r5,[r5,#0]
00008e  f4050580          AND      r5,r5,#0x400000
000092  b945              CBNZ     r5,|L6.166|
;;;1445           {
;;;1446             /* In Case the PLL Source is HSI (Internal Clock) */
;;;1447             vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
000094  4d57              LDR      r5,|L6.500|
000096  3d88              SUBS     r5,r5,#0x88
000098  682d              LDR      r5,[r5,#0]
00009a  f005053f          AND      r5,r5,#0x3f
00009e  4e56              LDR      r6,|L6.504|
0000a0  fbb6f2f5          UDIV     r2,r6,r5
0000a4  e007              B        |L6.182|
                  |L6.166|
;;;1448           }
;;;1449           else
;;;1450           {
;;;1451             /* In Case the PLL Source is HSE (External Clock) */
;;;1452             vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
0000a6  4d53              LDR      r5,|L6.500|
0000a8  3d88              SUBS     r5,r5,#0x88
0000aa  682d              LDR      r5,[r5,#0]
0000ac  f005053f          AND      r5,r5,#0x3f
0000b0  4e52              LDR      r6,|L6.508|
0000b2  fbb6f2f5          UDIV     r2,r6,r5
                  |L6.182|
;;;1453           }
;;;1454           
;;;1455           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
;;;1456           /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
;;;1457           tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
0000b6  4d4f              LDR      r5,|L6.500|
0000b8  3d08              SUBS     r5,r5,#8
0000ba  682d              LDR      r5,[r5,#0]
0000bc  f3c56103          UBFX     r1,r5,#24,#4
;;;1458           frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
0000c0  4d4c              LDR      r5,|L6.500|
0000c2  3d08              SUBS     r5,r5,#8
0000c4  682d              LDR      r5,[r5,#0]
0000c6  f3c51588          UBFX     r5,r5,#6,#9
0000ca  4355              MULS     r5,r2,r5
0000cc  fbb5f0f1          UDIV     r0,r5,r1
;;;1459           
;;;1460           /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
;;;1461           tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
0000d0  4d48              LDR      r5,|L6.500|
0000d2  682d              LDR      r5,[r5,#0]
0000d4  f005051f          AND      r5,r5,#0x1f
0000d8  1c69              ADDS     r1,r5,#1
;;;1462           frequency = frequency/(tmpreg);
0000da  fbb0f0f1          UDIV     r0,r0,r1
;;;1463           break;
0000de  e00d              B        |L6.252|
                  |L6.224|
;;;1464         }
;;;1465       case RCC_DCKCFGR1_SAI1SEL_1: /* External clock is the clock source for SAI1 */
;;;1466         {
;;;1467           frequency = EXTERNAL_CLOCK_VALUE;
0000e0  4847              LDR      r0,|L6.512|
;;;1468           break;       
0000e2  e00b              B        |L6.252|
                  |L6.228|
;;;1469         }
;;;1470   #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)      
;;;1471       case RCC_DCKCFGR1_SAI1SEL: /* HSI or HSE is the clock source for SAI*/
;;;1472         {
;;;1473           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
0000e4  4d43              LDR      r5,|L6.500|
0000e6  3d88              SUBS     r5,r5,#0x88
0000e8  682d              LDR      r5,[r5,#0]
0000ea  f4050580          AND      r5,r5,#0x400000
0000ee  b915              CBNZ     r5,|L6.246|
;;;1474           {
;;;1475             /* In Case the main PLL Source is HSI */
;;;1476             frequency = HSI_VALUE;
0000f0  4841              LDR      r0,|L6.504|
0000f2  e001              B        |L6.248|
0000f4  e003              B        |L6.254|
                  |L6.246|
;;;1477           }
;;;1478           else
;;;1479           {
;;;1480             /* In Case the main PLL Source is HSE */
;;;1481             frequency = HSE_VALUE;
0000f6  4841              LDR      r0,|L6.508|
                  |L6.248|
;;;1482           }
;;;1483           break;       
0000f8  e000              B        |L6.252|
                  |L6.250|
;;;1484         }
;;;1485   #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
;;;1486       default :
;;;1487         {
;;;1488           break;
0000fa  bf00              NOP      
                  |L6.252|
0000fc  bf00              NOP                            ;1438
                  |L6.254|
;;;1489         }
;;;1490       }
;;;1491     }
;;;1492     
;;;1493     if (PeriphClk == RCC_PERIPHCLK_SAI2)
0000fe  f5b41f80          CMP      r4,#0x100000
000102  d175              BNE      |L6.496|
;;;1494     {
;;;1495       saiclocksource = RCC->DCKCFGR1;   
000104  4d3b              LDR      r5,|L6.500|
000106  682b              LDR      r3,[r5,#0]
;;;1496       saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
000108  f4030340          AND      r3,r3,#0xc00000
;;;1497       switch (saiclocksource)
00010c  b14b              CBZ      r3,|L6.290|
00010e  f5b30f80          CMP      r3,#0x400000
000112  d032              BEQ      |L6.378|
000114  f5b30f00          CMP      r3,#0x800000
000118  d05b              BEQ      |L6.466|
00011a  f5b30f40          CMP      r3,#0xc00000
00011e  d165              BNE      |L6.492|
000120  e059              B        |L6.470|
                  |L6.290|
;;;1498       {
;;;1499       case 0: /* PLLSAI is the clock source for SAI*/ 
;;;1500         {
;;;1501           /* Configure the PLLSAI division factor */
;;;1502           /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */ 
;;;1503           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
000122  4d34              LDR      r5,|L6.500|
000124  3d88              SUBS     r5,r5,#0x88
000126  682d              LDR      r5,[r5,#0]
000128  f4050580          AND      r5,r5,#0x400000
00012c  b945              CBNZ     r5,|L6.320|
;;;1504           {
;;;1505             /* In Case the PLL Source is HSI (Internal Clock) */
;;;1506             vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
00012e  4d31              LDR      r5,|L6.500|
000130  3d88              SUBS     r5,r5,#0x88
000132  682d              LDR      r5,[r5,#0]
000134  f005053f          AND      r5,r5,#0x3f
000138  4e2f              LDR      r6,|L6.504|
00013a  fbb6f2f5          UDIV     r2,r6,r5
00013e  e007              B        |L6.336|
                  |L6.320|
;;;1507           }
;;;1508           else
;;;1509           {
;;;1510             /* In Case the PLL Source is HSE (External Clock) */
;;;1511             vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
000140  4d2c              LDR      r5,|L6.500|
000142  3d88              SUBS     r5,r5,#0x88
000144  682d              LDR      r5,[r5,#0]
000146  f005053f          AND      r5,r5,#0x3f
00014a  4e2c              LDR      r6,|L6.508|
00014c  fbb6f2f5          UDIV     r2,r6,r5
                  |L6.336|
;;;1512           }   
;;;1513           /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
;;;1514           /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
;;;1515           tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
000150  4d28              LDR      r5,|L6.500|
000152  1f2d              SUBS     r5,r5,#4
000154  682d              LDR      r5,[r5,#0]
000156  f3c56103          UBFX     r1,r5,#24,#4
;;;1516           frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
00015a  4d26              LDR      r5,|L6.500|
00015c  1f2d              SUBS     r5,r5,#4
00015e  682d              LDR      r5,[r5,#0]
000160  f3c51588          UBFX     r5,r5,#6,#9
000164  4355              MULS     r5,r2,r5
000166  fbb5f0f1          UDIV     r0,r5,r1
;;;1517           
;;;1518           /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
;;;1519           tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
00016a  4d22              LDR      r5,|L6.500|
00016c  682d              LDR      r5,[r5,#0]
00016e  f3c52504          UBFX     r5,r5,#8,#5
000172  1c69              ADDS     r1,r5,#1
;;;1520           frequency = frequency/(tmpreg); 
000174  fbb0f0f1          UDIV     r0,r0,r1
;;;1521           break;       
000178  e039              B        |L6.494|
                  |L6.378|
;;;1522         }
;;;1523       case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
;;;1524         {  
;;;1525           /* Configure the PLLI2S division factor */
;;;1526           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */ 
;;;1527           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
00017a  4d1e              LDR      r5,|L6.500|
00017c  3d88              SUBS     r5,r5,#0x88
00017e  682d              LDR      r5,[r5,#0]
000180  f4050580          AND      r5,r5,#0x400000
000184  b945              CBNZ     r5,|L6.408|
;;;1528           {
;;;1529             /* In Case the PLL Source is HSI (Internal Clock) */
;;;1530             vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
000186  4d1b              LDR      r5,|L6.500|
000188  3d88              SUBS     r5,r5,#0x88
00018a  682d              LDR      r5,[r5,#0]
00018c  f005053f          AND      r5,r5,#0x3f
000190  4e19              LDR      r6,|L6.504|
000192  fbb6f2f5          UDIV     r2,r6,r5
000196  e007              B        |L6.424|
                  |L6.408|
;;;1531           }
;;;1532           else
;;;1533           {
;;;1534             /* In Case the PLL Source is HSE (External Clock) */
;;;1535             vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
000198  4d16              LDR      r5,|L6.500|
00019a  3d88              SUBS     r5,r5,#0x88
00019c  682d              LDR      r5,[r5,#0]
00019e  f005053f          AND      r5,r5,#0x3f
0001a2  4e16              LDR      r6,|L6.508|
0001a4  fbb6f2f5          UDIV     r2,r6,r5
                  |L6.424|
;;;1536           }
;;;1537           
;;;1538           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
;;;1539           /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
;;;1540           tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
0001a8  4d12              LDR      r5,|L6.500|
0001aa  3d08              SUBS     r5,r5,#8
0001ac  682d              LDR      r5,[r5,#0]
0001ae  f3c56103          UBFX     r1,r5,#24,#4
;;;1541           frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
0001b2  4d10              LDR      r5,|L6.500|
0001b4  3d08              SUBS     r5,r5,#8
0001b6  682d              LDR      r5,[r5,#0]
0001b8  f3c51588          UBFX     r5,r5,#6,#9
0001bc  4355              MULS     r5,r2,r5
0001be  fbb5f0f1          UDIV     r0,r5,r1
;;;1542           
;;;1543           /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
;;;1544           tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
0001c2  4d0c              LDR      r5,|L6.500|
0001c4  682d              LDR      r5,[r5,#0]
0001c6  f005051f          AND      r5,r5,#0x1f
0001ca  1c69              ADDS     r1,r5,#1
;;;1545           frequency = frequency/(tmpreg);
0001cc  fbb0f0f1          UDIV     r0,r0,r1
;;;1546           break;
0001d0  e00d              B        |L6.494|
                  |L6.466|
;;;1547         }
;;;1548       case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
;;;1549         {
;;;1550           frequency = EXTERNAL_CLOCK_VALUE;
0001d2  480b              LDR      r0,|L6.512|
;;;1551           break;       
0001d4  e00b              B        |L6.494|
                  |L6.470|
;;;1552         }
;;;1553   #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
;;;1554       case RCC_DCKCFGR1_SAI2SEL: /* HSI or HSE is the clock source for SAI2 */
;;;1555         {
;;;1556           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
0001d6  4d07              LDR      r5,|L6.500|
0001d8  3d88              SUBS     r5,r5,#0x88
0001da  682d              LDR      r5,[r5,#0]
0001dc  f4050580          AND      r5,r5,#0x400000
0001e0  b915              CBNZ     r5,|L6.488|
;;;1557           {
;;;1558             /* In Case the main PLL Source is HSI */
;;;1559             frequency = HSI_VALUE;
0001e2  4805              LDR      r0,|L6.504|
0001e4  e001              B        |L6.490|
0001e6  e003              B        |L6.496|
                  |L6.488|
;;;1560           }
;;;1561           else
;;;1562           {
;;;1563             /* In Case the main PLL Source is HSE */
;;;1564             frequency = HSE_VALUE;
0001e8  4804              LDR      r0,|L6.508|
                  |L6.490|
;;;1565           }
;;;1566           break;       
0001ea  e000              B        |L6.494|
                  |L6.492|
;;;1567         }
;;;1568   #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
;;;1569       default :
;;;1570         {
;;;1571           break;
0001ec  bf00              NOP      
                  |L6.494|
0001ee  bf00              NOP                            ;1521
                  |L6.496|
;;;1572         }
;;;1573       }
;;;1574     }
;;;1575     
;;;1576     return frequency;
;;;1577   }
0001f0  bd70              POP      {r4-r6,pc}
;;;1578   
                          ENDP

0001f2  0000              DCW      0x0000
                  |L6.500|
                          DCD      0x4002388c
                  |L6.504|
                          DCD      0x00f42400
                  |L6.508|
                          DCD      0x017d7840
                  |L6.512|
                          DCD      0x00bb8000

                          AREA ||i.HAL_RCCEx_PeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_PeriphCLKConfig PROC
;;;121      */
;;;122    HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;123    {
000004  4604              MOV      r4,r0
;;;124      uint32_t tickstart = 0;
000006  2600              MOVS     r6,#0
;;;125      uint32_t tmpreg0 = 0;
000008  2500              MOVS     r5,#0
;;;126      uint32_t tmpreg1 = 0;
00000a  2700              MOVS     r7,#0
;;;127      uint32_t plli2sused = 0;
00000c  46a8              MOV      r8,r5
;;;128      uint32_t pllsaiused = 0;
00000e  46a9              MOV      r9,r5
;;;129        
;;;130      /* Check the parameters */
;;;131      assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
;;;132      
;;;133      /*----------------------------------- I2S configuration ----------------------------------*/
;;;134      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
000010  7820              LDRB     r0,[r4,#0]
000012  f0000001          AND      r0,r0,#1
000016  b188              CBZ      r0,|L7.60|
;;;135      {
;;;136        /* Check the parameters */
;;;137        assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
;;;138        
;;;139        /* Configure I2S Clock source */
;;;140        __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
000018  bf00              NOP      
00001a  48fe              LDR      r0,|L7.1044|
00001c  6800              LDR      r0,[r0,#0]
00001e  f4200000          BIC      r0,r0,#0x800000
000022  49fc              LDR      r1,|L7.1044|
000024  6008              STR      r0,[r1,#0]
000026  4608              MOV      r0,r1
000028  6800              LDR      r0,[r0,#0]
00002a  6b61              LDR      r1,[r4,#0x34]
00002c  4308              ORRS     r0,r0,r1
00002e  49f9              LDR      r1,|L7.1044|
000030  6008              STR      r0,[r1,#0]
000032  bf00              NOP      
;;;141        
;;;142        /* Enable the PLLI2S when it's used as clock source for I2S */
;;;143        if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
000034  6b60              LDR      r0,[r4,#0x34]
000036  b908              CBNZ     r0,|L7.60|
;;;144        {
;;;145          plli2sused = 1; 
000038  f04f0801          MOV      r8,#1
                  |L7.60|
;;;146        }
;;;147      }
;;;148      
;;;149      /*------------------------------------ SAI1 configuration --------------------------------------*/
;;;150      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
00003c  6820              LDR      r0,[r4,#0]
00003e  f4002000          AND      r0,r0,#0x80000
000042  f5b02f00          CMP      r0,#0x80000
000046  d113              BNE      |L7.112|
;;;151      {
;;;152        /* Check the parameters */
;;;153        assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
;;;154        
;;;155        /* Configure SAI1 Clock source */
;;;156        __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
000048  48f2              LDR      r0,|L7.1044|
00004a  3084              ADDS     r0,r0,#0x84
00004c  6800              LDR      r0,[r0,#0]
00004e  f4201040          BIC      r0,r0,#0x300000
000052  6be1              LDR      r1,[r4,#0x3c]
000054  4308              ORRS     r0,r0,r1
000056  49ef              LDR      r1,|L7.1044|
000058  3184              ADDS     r1,r1,#0x84
00005a  6008              STR      r0,[r1,#0]
;;;157        /* Enable the PLLI2S when it's used as clock source for SAI */
;;;158        if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
00005c  6be0              LDR      r0,[r4,#0x3c]
00005e  f5b01f80          CMP      r0,#0x100000
000062  d101              BNE      |L7.104|
;;;159        {
;;;160          plli2sused = 1; 
000064  f04f0801          MOV      r8,#1
                  |L7.104|
;;;161        }
;;;162        /* Enable the PLLSAI when it's used as clock source for SAI */
;;;163        if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
000068  6be0              LDR      r0,[r4,#0x3c]
00006a  b908              CBNZ     r0,|L7.112|
;;;164        {
;;;165          pllsaiused = 1; 
00006c  f04f0901          MOV      r9,#1
                  |L7.112|
;;;166        }
;;;167      }
;;;168      
;;;169      /*------------------------------------ SAI2 configuration --------------------------------------*/
;;;170      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
000070  6820              LDR      r0,[r4,#0]
000072  f4001080          AND      r0,r0,#0x100000
000076  f5b01f80          CMP      r0,#0x100000
00007a  d113              BNE      |L7.164|
;;;171      {
;;;172        /* Check the parameters */
;;;173        assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
;;;174        
;;;175        /* Configure SAI2 Clock source */
;;;176        __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
00007c  48e5              LDR      r0,|L7.1044|
00007e  3084              ADDS     r0,r0,#0x84
000080  6800              LDR      r0,[r0,#0]
000082  f4200040          BIC      r0,r0,#0xc00000
000086  6c21              LDR      r1,[r4,#0x40]
000088  4308              ORRS     r0,r0,r1
00008a  49e2              LDR      r1,|L7.1044|
00008c  3184              ADDS     r1,r1,#0x84
00008e  6008              STR      r0,[r1,#0]
;;;177        
;;;178        /* Enable the PLLI2S when it's used as clock source for SAI */
;;;179        if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
000090  6c20              LDR      r0,[r4,#0x40]
000092  f5b00f80          CMP      r0,#0x400000
000096  d101              BNE      |L7.156|
;;;180        {
;;;181          plli2sused = 1; 
000098  f04f0801          MOV      r8,#1
                  |L7.156|
;;;182        }
;;;183        /* Enable the PLLSAI when it's used as clock source for SAI */
;;;184        if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
00009c  6c20              LDR      r0,[r4,#0x40]
00009e  b908              CBNZ     r0,|L7.164|
;;;185        {
;;;186          pllsaiused = 1; 
0000a0  f04f0901          MOV      r9,#1
                  |L7.164|
;;;187        }
;;;188      }
;;;189      
;;;190      /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
;;;191      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
0000a4  6820              LDR      r0,[r4,#0]
0000a6  f0007080          AND      r0,r0,#0x1000000
0000aa  f1b07f80          CMP      r0,#0x1000000
0000ae  d101              BNE      |L7.180|
;;;192      {    
;;;193          plli2sused = 1; 
0000b0  f04f0801          MOV      r8,#1
                  |L7.180|
;;;194      }  
;;;195      
;;;196      /*------------------------------------ RTC configuration --------------------------------------*/
;;;197      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
0000b4  7820              LDRB     r0,[r4,#0]
0000b6  f0000020          AND      r0,r0,#0x20
0000ba  2820              CMP      r0,#0x20
0000bc  d170              BNE      |L7.416|
;;;198      {
;;;199        /* Check for RTC Parameters used to output RTCCLK */
;;;200        assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
;;;201        
;;;202        /* Enable Power Clock*/
;;;203        __HAL_RCC_PWR_CLK_ENABLE();
0000be  bf00              NOP      
0000c0  48d4              LDR      r0,|L7.1044|
0000c2  3038              ADDS     r0,r0,#0x38
0000c4  6800              LDR      r0,[r0,#0]
0000c6  f0405080          ORR      r0,r0,#0x10000000
0000ca  49d2              LDR      r1,|L7.1044|
0000cc  3138              ADDS     r1,r1,#0x38
0000ce  6008              STR      r0,[r1,#0]
0000d0  4608              MOV      r0,r1
0000d2  6800              LDR      r0,[r0,#0]
0000d4  f0005080          AND      r0,r0,#0x10000000
0000d8  9000              STR      r0,[sp,#0]
0000da  bf00              NOP      
0000dc  bf00              NOP      
;;;204        
;;;205        /* Enable write access to Backup domain */
;;;206        PWR->CR1 |= PWR_CR1_DBP;
0000de  48ce              LDR      r0,|L7.1048|
0000e0  6800              LDR      r0,[r0,#0]
0000e2  f4407080          ORR      r0,r0,#0x100
0000e6  49cc              LDR      r1,|L7.1048|
0000e8  6008              STR      r0,[r1,#0]
;;;207        
;;;208        /* Get Start Tick*/
;;;209        tickstart = HAL_GetTick();
0000ea  f7fffffe          BL       HAL_GetTick
0000ee  4606              MOV      r6,r0
;;;210        
;;;211        /* Wait for Backup domain Write protection disable */
;;;212        while((PWR->CR1 & PWR_CR1_DBP) == RESET)
0000f0  e007              B        |L7.258|
                  |L7.242|
;;;213        {
;;;214          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
0000f2  f7fffffe          BL       HAL_GetTick
0000f6  1b80              SUBS     r0,r0,r6
0000f8  2864              CMP      r0,#0x64
0000fa  d902              BLS      |L7.258|
;;;215          {
;;;216            return HAL_TIMEOUT;
0000fc  2003              MOVS     r0,#3
                  |L7.254|
;;;217          }
;;;218        }
;;;219    
;;;220        /* Reset the Backup domain only if the RTC Clock source selection is modified */
;;;221        tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
;;;222    
;;;223        if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
;;;224        {
;;;225          /* Store the content of BDCR register before the reset of Backup Domain */
;;;226          tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
;;;227    
;;;228          /* RTC Clock selection can be changed only if the Backup Domain is reset */
;;;229          __HAL_RCC_BACKUPRESET_FORCE();
;;;230          __HAL_RCC_BACKUPRESET_RELEASE();
;;;231    
;;;232          /* Restore the Content of BDCR register */
;;;233          RCC->BDCR = tmpreg0;
;;;234    
;;;235          /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
;;;236          if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
;;;237          {
;;;238            /* Get Start Tick*/
;;;239            tickstart = HAL_GetTick();
;;;240            
;;;241            /* Wait till LSE is ready */  
;;;242            while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;243            {
;;;244              if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;245              {
;;;246                return HAL_TIMEOUT;
;;;247              }
;;;248            }
;;;249          }
;;;250        }
;;;251        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
;;;252      }
;;;253    
;;;254      /*------------------------------------ TIM configuration --------------------------------------*/
;;;255      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
;;;256      {
;;;257        /* Check the parameters */
;;;258        assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
;;;259        
;;;260        /* Configure Timer Prescaler */
;;;261        __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
;;;262      }
;;;263      
;;;264      /*-------------------------------------- I2C1 Configuration -----------------------------------*/
;;;265      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
;;;266      {
;;;267        /* Check the parameters */
;;;268        assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
;;;269        
;;;270        /* Configure the I2C1 clock source */
;;;271        __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
;;;272      }
;;;273      
;;;274      /*-------------------------------------- I2C2 Configuration -----------------------------------*/
;;;275      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
;;;276      {
;;;277        /* Check the parameters */
;;;278        assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
;;;279        
;;;280        /* Configure the I2C2 clock source */
;;;281        __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
;;;282      }
;;;283      
;;;284      /*-------------------------------------- I2C3 Configuration -----------------------------------*/
;;;285      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
;;;286      {
;;;287        /* Check the parameters */
;;;288        assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
;;;289        
;;;290        /* Configure the I2C3 clock source */
;;;291        __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
;;;292      }
;;;293        
;;;294      /*-------------------------------------- I2C4 Configuration -----------------------------------*/
;;;295      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
;;;296      {
;;;297        /* Check the parameters */
;;;298        assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
;;;299        
;;;300        /* Configure the I2C4 clock source */
;;;301        __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
;;;302      }
;;;303    
;;;304      /*-------------------------------------- USART1 Configuration -----------------------------------*/
;;;305      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
;;;306      {
;;;307        /* Check the parameters */
;;;308        assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
;;;309        
;;;310        /* Configure the USART1 clock source */
;;;311        __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
;;;312      }
;;;313    
;;;314      /*-------------------------------------- USART2 Configuration -----------------------------------*/
;;;315      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
;;;316      {
;;;317        /* Check the parameters */
;;;318        assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
;;;319        
;;;320        /* Configure the USART2 clock source */
;;;321        __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
;;;322      }
;;;323    
;;;324      /*-------------------------------------- USART3 Configuration -----------------------------------*/
;;;325      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
;;;326      {
;;;327        /* Check the parameters */
;;;328        assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
;;;329        
;;;330        /* Configure the USART3 clock source */
;;;331        __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
;;;332      }
;;;333    
;;;334      /*-------------------------------------- UART4 Configuration -----------------------------------*/
;;;335      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
;;;336      {
;;;337        /* Check the parameters */
;;;338        assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
;;;339        
;;;340        /* Configure the UART4 clock source */
;;;341        __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
;;;342      }
;;;343    
;;;344      /*-------------------------------------- UART5 Configuration -----------------------------------*/
;;;345      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
;;;346      {
;;;347        /* Check the parameters */
;;;348        assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
;;;349        
;;;350        /* Configure the UART5 clock source */
;;;351        __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
;;;352      }
;;;353    
;;;354      /*-------------------------------------- USART6 Configuration -----------------------------------*/
;;;355      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
;;;356      {
;;;357        /* Check the parameters */
;;;358        assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
;;;359        
;;;360        /* Configure the USART6 clock source */
;;;361        __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
;;;362      }
;;;363    
;;;364      /*-------------------------------------- UART7 Configuration -----------------------------------*/
;;;365      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
;;;366      {
;;;367        /* Check the parameters */
;;;368        assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
;;;369        
;;;370        /* Configure the UART7 clock source */
;;;371        __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
;;;372      }
;;;373    
;;;374      /*-------------------------------------- UART8 Configuration -----------------------------------*/
;;;375      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
;;;376      {
;;;377        /* Check the parameters */
;;;378        assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
;;;379        
;;;380        /* Configure the UART8 clock source */
;;;381        __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
;;;382      }
;;;383      
;;;384      /*--------------------------------------- CEC Configuration -----------------------------------*/
;;;385      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
;;;386      {
;;;387        /* Check the parameters */
;;;388        assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
;;;389        
;;;390        /* Configure the CEC clock source */
;;;391        __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
;;;392      }
;;;393      
;;;394      /*-------------------------------------- CK48 Configuration -----------------------------------*/
;;;395      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
;;;396      {
;;;397        /* Check the parameters */
;;;398        assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
;;;399        
;;;400        /* Configure the CLK48 source */
;;;401        __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
;;;402    
;;;403        /* Enable the PLLSAI when it's used as clock source for CK48 */
;;;404        if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
;;;405        {
;;;406          pllsaiused = 1; 
;;;407        }
;;;408      }
;;;409    
;;;410      /*-------------------------------------- LTDC Configuration -----------------------------------*/
;;;411    #if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
;;;412      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
;;;413      {
;;;414        pllsaiused = 1; 
;;;415      }
;;;416    #endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
;;;417      
;;;418      /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
;;;419      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
;;;420      {
;;;421        /* Check the parameters */
;;;422        assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
;;;423        
;;;424        /* Configure the LTPIM1 clock source */
;;;425        __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
;;;426       }
;;;427      
;;;428      /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
;;;429      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
;;;430      {
;;;431        /* Check the parameters */
;;;432        assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
;;;433        
;;;434        /* Configure the SDMMC1 clock source */
;;;435        __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
;;;436      }
;;;437      
;;;438    #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
;;;439      /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
;;;440      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
;;;441      {
;;;442        /* Check the parameters */
;;;443        assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
;;;444        
;;;445        /* Configure the SDMMC2 clock source */
;;;446        __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
;;;447      }
;;;448    	
;;;449      /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
;;;450      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
;;;451      {
;;;452        /* Check the parameters */
;;;453        assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
;;;454    
;;;455        /* Configure the DFSDM1 interface clock source */
;;;456        __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
;;;457      }
;;;458      
;;;459      /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
;;;460      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
;;;461      {
;;;462        /* Check the parameters */
;;;463        assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
;;;464    
;;;465        /* Configure the DFSDM interface clock source */
;;;466        __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
;;;467      }  
;;;468    #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
;;;469      
;;;470      /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
;;;471      /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
;;;472      if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
;;;473      {
;;;474        /* Disable the PLLI2S */
;;;475        __HAL_RCC_PLLI2S_DISABLE();  
;;;476        
;;;477        /* Get Start Tick*/
;;;478        tickstart = HAL_GetTick();
;;;479        
;;;480        /* Wait till PLLI2S is disabled */
;;;481        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
;;;482        {
;;;483          if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
;;;484          {
;;;485            /* return in case of Timeout detected */         
;;;486            return HAL_TIMEOUT;
;;;487          }
;;;488        }
;;;489        
;;;490        /* check for common PLLI2S Parameters */
;;;491        assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
;;;492          
;;;493        /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
;;;494        if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
;;;495        {
;;;496          /* check for Parameters */
;;;497          assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
;;;498        
;;;499          /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
;;;500          tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
;;;501          tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
;;;502          /* Configure the PLLI2S division factors */
;;;503          /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
;;;504          /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
;;;505          __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
;;;506        }
;;;507            
;;;508        /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
;;;509        if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
;;;510           ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
;;;511        {
;;;512          /* Check for PLLI2S Parameters */
;;;513          assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
;;;514          /* Check for PLLI2S/DIVQ parameters */
;;;515          assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
;;;516                
;;;517          /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
;;;518          tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
;;;519          tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
;;;520          /* Configure the PLLI2S division factors */      
;;;521          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
;;;522          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
;;;523          /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
;;;524          __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
;;;525       
;;;526          /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
;;;527          __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
;;;528        }          
;;;529    
;;;530        /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
;;;531        if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
;;;532        {
;;;533          /* check for Parameters */
;;;534          assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
;;;535         
;;;536         /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
;;;537          tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
;;;538          tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
;;;539          /* Configure the PLLI2S division factors */
;;;540          /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
;;;541          /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
;;;542          __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
;;;543        }  
;;;544             
;;;545        /*----------------- In Case of PLLI2S is just selected  -----------------*/  
;;;546        if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
;;;547        {
;;;548          /* Check for Parameters */
;;;549          assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
;;;550          assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
;;;551          assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
;;;552    
;;;553          /* Configure the PLLI2S division factors */
;;;554          /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
;;;555          /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
;;;556          __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
;;;557        } 
;;;558        
;;;559        /* Enable the PLLI2S */
;;;560        __HAL_RCC_PLLI2S_ENABLE();
;;;561        
;;;562        /* Get Start Tick*/
;;;563        tickstart = HAL_GetTick();
;;;564    
;;;565        /* Wait till PLLI2S is ready */
;;;566        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
;;;567        {
;;;568          if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
;;;569          {
;;;570            /* return in case of Timeout detected */                
;;;571            return HAL_TIMEOUT;
;;;572          }
;;;573        }
;;;574      } 
;;;575      
;;;576      /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
;;;577      /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
;;;578      if(pllsaiused == 1)
;;;579      {
;;;580        /* Disable PLLSAI Clock */
;;;581        __HAL_RCC_PLLSAI_DISABLE(); 
;;;582        
;;;583        /* Get Start Tick*/
;;;584        tickstart = HAL_GetTick();
;;;585    
;;;586        /* Wait till PLLSAI is disabled */
;;;587        while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
;;;588        {
;;;589          if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
;;;590          { 
;;;591            /* return in case of Timeout detected */        
;;;592            return HAL_TIMEOUT;
;;;593          }
;;;594        } 
;;;595        
;;;596        /* Check the PLLSAI division factors */
;;;597        assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
;;;598        
;;;599        /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
;;;600        if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
;;;601           ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
;;;602        {
;;;603          /* check for PLLSAIQ Parameter */
;;;604          assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
;;;605          /* check for PLLSAI/DIVQ Parameter */
;;;606          assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
;;;607        
;;;608          /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
;;;609          tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
;;;610          tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
;;;611          /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
;;;612          /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
;;;613          /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
;;;614          __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
;;;615          
;;;616          /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
;;;617          __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
;;;618        }           
;;;619    
;;;620        /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
;;;621        /* In Case of PLLI2S is selected as source clock for CK48 */ 
;;;622        if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
;;;623        {
;;;624          /* check for Parameters */
;;;625          assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
;;;626          /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
;;;627          tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
;;;628          tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
;;;629          
;;;630          /* Configure the PLLSAI division factors */
;;;631          /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
;;;632          /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
;;;633          __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
;;;634        }        
;;;635    
;;;636    #if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
;;;637        /*---------------------------- LTDC configuration -------------------------------*/
;;;638        if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
;;;639        {
;;;640          assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
;;;641          assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
;;;642          
;;;643          /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
;;;644          tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
;;;645          tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
;;;646          
;;;647          /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
;;;648          /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
;;;649          /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
;;;650          __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
;;;651          
;;;652          /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
;;;653          __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
;;;654        }    
;;;655    #endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  
;;;656    
;;;657        /* Enable PLLSAI Clock */
;;;658        __HAL_RCC_PLLSAI_ENABLE();
;;;659        
;;;660        /* Get Start Tick*/
;;;661        tickstart = HAL_GetTick();
;;;662    
;;;663        /* Wait till PLLSAI is ready */
;;;664        while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
;;;665        {
;;;666          if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
;;;667          { 
;;;668            /* return in case of Timeout detected */        
;;;669            return HAL_TIMEOUT;
;;;670          }
;;;671        }
;;;672      }
;;;673      return HAL_OK;
;;;674    }
0000fe  e8bd83f8          POP      {r3-r9,pc}
                  |L7.258|
000102  48c5              LDR      r0,|L7.1048|
000104  6800              LDR      r0,[r0,#0]            ;212
000106  f4007080          AND      r0,r0,#0x100          ;212
00010a  2800              CMP      r0,#0                 ;212
00010c  d0f1              BEQ      |L7.242|
00010e  48c1              LDR      r0,|L7.1044|
000110  3068              ADDS     r0,r0,#0x68           ;221
000112  6800              LDR      r0,[r0,#0]            ;221
000114  f4007540          AND      r5,r0,#0x300          ;221
000118  b385              CBZ      r5,|L7.380|
00011a  8e20              LDRH     r0,[r4,#0x30]         ;223
00011c  f4007040          AND      r0,r0,#0x300          ;223
000120  42a8              CMP      r0,r5                 ;223
000122  d02b              BEQ      |L7.380|
000124  48bb              LDR      r0,|L7.1044|
000126  3068              ADDS     r0,r0,#0x68           ;226
000128  6800              LDR      r0,[r0,#0]            ;226
00012a  f4207540          BIC      r5,r0,#0x300          ;226
00012e  48b9              LDR      r0,|L7.1044|
000130  3068              ADDS     r0,r0,#0x68           ;229
000132  6800              LDR      r0,[r0,#0]            ;229
000134  f4403080          ORR      r0,r0,#0x10000        ;229
000138  49b6              LDR      r1,|L7.1044|
00013a  3168              ADDS     r1,r1,#0x68           ;229
00013c  6008              STR      r0,[r1,#0]            ;229
00013e  4608              MOV      r0,r1                 ;230
000140  6800              LDR      r0,[r0,#0]            ;230
000142  f4203080          BIC      r0,r0,#0x10000        ;230
000146  6008              STR      r0,[r1,#0]            ;230
000148  4608              MOV      r0,r1                 ;233
00014a  6005              STR      r5,[r0,#0]            ;233
00014c  6800              LDR      r0,[r0,#0]            ;236
00014e  f0000001          AND      r0,r0,#1              ;236
000152  b198              CBZ      r0,|L7.380|
000154  f7fffffe          BL       HAL_GetTick
000158  4606              MOV      r6,r0                 ;239
00015a  e008              B        |L7.366|
                  |L7.348|
00015c  f7fffffe          BL       HAL_GetTick
000160  1b80              SUBS     r0,r0,r6              ;244
000162  f2413188          MOV      r1,#0x1388            ;244
000166  4288              CMP      r0,r1                 ;244
000168  d901              BLS      |L7.366|
00016a  2003              MOVS     r0,#3                 ;246
00016c  e7c7              B        |L7.254|
                  |L7.366|
00016e  48a9              LDR      r0,|L7.1044|
000170  3068              ADDS     r0,r0,#0x68           ;242
000172  6800              LDR      r0,[r0,#0]            ;242
000174  f3c00040          UBFX     r0,r0,#1,#1           ;242
000178  2800              CMP      r0,#0                 ;242
00017a  d0ef              BEQ      |L7.348|
                  |L7.380|
00017c  bf00              NOP                            ;251
00017e  8e20              LDRH     r0,[r4,#0x30]         ;251
000180  f4007040          AND      r0,r0,#0x300          ;251
000184  f5b07f40          CMP      r0,#0x300             ;251
000188  d10b              BNE      |L7.418|
00018a  48a2              LDR      r0,|L7.1044|
00018c  6800              LDR      r0,[r0,#0]            ;251
00018e  f42010f8          BIC      r0,r0,#0x1f0000       ;251
000192  4aa2              LDR      r2,|L7.1052|
000194  6b21              LDR      r1,[r4,#0x30]         ;251
000196  4011              ANDS     r1,r1,r2              ;251
000198  4308              ORRS     r0,r0,r1              ;251
00019a  499e              LDR      r1,|L7.1044|
00019c  6008              STR      r0,[r1,#0]            ;251
00019e  e006              B        |L7.430|
                  |L7.416|
0001a0  e010              B        |L7.452|
                  |L7.418|
0001a2  489c              LDR      r0,|L7.1044|
0001a4  6800              LDR      r0,[r0,#0]            ;251
0001a6  f42010f8          BIC      r0,r0,#0x1f0000       ;251
0001aa  499a              LDR      r1,|L7.1044|
0001ac  6008              STR      r0,[r1,#0]            ;251
                  |L7.430|
0001ae  4899              LDR      r0,|L7.1044|
0001b0  3068              ADDS     r0,r0,#0x68           ;251
0001b2  6800              LDR      r0,[r0,#0]            ;251
0001b4  8e21              LDRH     r1,[r4,#0x30]         ;251
0001b6  f3c1010b          UBFX     r1,r1,#0,#12          ;251
0001ba  4308              ORRS     r0,r0,r1              ;251
0001bc  4995              LDR      r1,|L7.1044|
0001be  3168              ADDS     r1,r1,#0x68           ;251
0001c0  6008              STR      r0,[r1,#0]            ;251
0001c2  bf00              NOP                            ;251
                  |L7.452|
0001c4  7820              LDRB     r0,[r4,#0]            ;255
0001c6  f0000010          AND      r0,r0,#0x10           ;255
0001ca  2810              CMP      r0,#0x10              ;255
0001cc  d110              BNE      |L7.496|
0001ce  bf00              NOP                            ;261
0001d0  4890              LDR      r0,|L7.1044|
0001d2  3084              ADDS     r0,r0,#0x84           ;261
0001d4  6800              LDR      r0,[r0,#0]            ;261
0001d6  f0207080          BIC      r0,r0,#0x1000000      ;261
0001da  498e              LDR      r1,|L7.1044|
0001dc  3184              ADDS     r1,r1,#0x84           ;261
0001de  6008              STR      r0,[r1,#0]            ;261
0001e0  4608              MOV      r0,r1                 ;261
0001e2  6800              LDR      r0,[r0,#0]            ;261
0001e4  6ba1              LDR      r1,[r4,#0x38]         ;261
0001e6  4308              ORRS     r0,r0,r1              ;261
0001e8  498a              LDR      r1,|L7.1044|
0001ea  3184              ADDS     r1,r1,#0x84           ;261
0001ec  6008              STR      r0,[r1,#0]            ;261
0001ee  bf00              NOP                            ;261
                  |L7.496|
0001f0  8820              LDRH     r0,[r4,#0]            ;265
0001f2  f4004080          AND      r0,r0,#0x4000         ;265
0001f6  f5b04f80          CMP      r0,#0x4000            ;265
0001fa  d109              BNE      |L7.528|
0001fc  4885              LDR      r0,|L7.1044|
0001fe  3088              ADDS     r0,r0,#0x88           ;271
000200  6800              LDR      r0,[r0,#0]            ;271
000202  f4203040          BIC      r0,r0,#0x30000        ;271
000206  6e61              LDR      r1,[r4,#0x64]         ;271
000208  4308              ORRS     r0,r0,r1              ;271
00020a  4982              LDR      r1,|L7.1044|
00020c  3188              ADDS     r1,r1,#0x88           ;271
00020e  6008              STR      r0,[r1,#0]            ;271
                  |L7.528|
000210  8820              LDRH     r0,[r4,#0]            ;275
000212  f4004000          AND      r0,r0,#0x8000         ;275
000216  f5b04f00          CMP      r0,#0x8000            ;275
00021a  d109              BNE      |L7.560|
00021c  487d              LDR      r0,|L7.1044|
00021e  3088              ADDS     r0,r0,#0x88           ;281
000220  6800              LDR      r0,[r0,#0]            ;281
000222  f4202040          BIC      r0,r0,#0xc0000        ;281
000226  6ea1              LDR      r1,[r4,#0x68]         ;281
000228  4308              ORRS     r0,r0,r1              ;281
00022a  497a              LDR      r1,|L7.1044|
00022c  3188              ADDS     r1,r1,#0x88           ;281
00022e  6008              STR      r0,[r1,#0]            ;281
                  |L7.560|
000230  6820              LDR      r0,[r4,#0]            ;285
000232  f4003080          AND      r0,r0,#0x10000        ;285
000236  f5b03f80          CMP      r0,#0x10000           ;285
00023a  d109              BNE      |L7.592|
00023c  4875              LDR      r0,|L7.1044|
00023e  3088              ADDS     r0,r0,#0x88           ;291
000240  6800              LDR      r0,[r0,#0]            ;291
000242  f4201040          BIC      r0,r0,#0x300000       ;291
000246  6ee1              LDR      r1,[r4,#0x6c]         ;291
000248  4308              ORRS     r0,r0,r1              ;291
00024a  4972              LDR      r1,|L7.1044|
00024c  3188              ADDS     r1,r1,#0x88           ;291
00024e  6008              STR      r0,[r1,#0]            ;291
                  |L7.592|
000250  6820              LDR      r0,[r4,#0]            ;295
000252  f4003000          AND      r0,r0,#0x20000        ;295
000256  f5b03f00          CMP      r0,#0x20000           ;295
00025a  d109              BNE      |L7.624|
00025c  486d              LDR      r0,|L7.1044|
00025e  3088              ADDS     r0,r0,#0x88           ;301
000260  6800              LDR      r0,[r0,#0]            ;301
000262  f4200040          BIC      r0,r0,#0xc00000       ;301
000266  6f21              LDR      r1,[r4,#0x70]         ;301
000268  4308              ORRS     r0,r0,r1              ;301
00026a  496a              LDR      r1,|L7.1044|
00026c  3188              ADDS     r1,r1,#0x88           ;301
00026e  6008              STR      r0,[r1,#0]            ;301
                  |L7.624|
000270  7820              LDRB     r0,[r4,#0]            ;305
000272  f0000040          AND      r0,r0,#0x40           ;305
000276  2840              CMP      r0,#0x40              ;305
000278  d109              BNE      |L7.654|
00027a  4866              LDR      r0,|L7.1044|
00027c  3088              ADDS     r0,r0,#0x88           ;311
00027e  6800              LDR      r0,[r0,#0]            ;311
000280  f0200003          BIC      r0,r0,#3              ;311
000284  6c61              LDR      r1,[r4,#0x44]         ;311
000286  4308              ORRS     r0,r0,r1              ;311
000288  4962              LDR      r1,|L7.1044|
00028a  3188              ADDS     r1,r1,#0x88           ;311
00028c  6008              STR      r0,[r1,#0]            ;311
                  |L7.654|
00028e  7820              LDRB     r0,[r4,#0]            ;315
000290  f0000080          AND      r0,r0,#0x80           ;315
000294  2880              CMP      r0,#0x80              ;315
000296  d109              BNE      |L7.684|
000298  485e              LDR      r0,|L7.1044|
00029a  3088              ADDS     r0,r0,#0x88           ;321
00029c  6800              LDR      r0,[r0,#0]            ;321
00029e  f020000c          BIC      r0,r0,#0xc            ;321
0002a2  6ca1              LDR      r1,[r4,#0x48]         ;321
0002a4  4308              ORRS     r0,r0,r1              ;321
0002a6  495b              LDR      r1,|L7.1044|
0002a8  3188              ADDS     r1,r1,#0x88           ;321
0002aa  6008              STR      r0,[r1,#0]            ;321
                  |L7.684|
0002ac  8820              LDRH     r0,[r4,#0]            ;325
0002ae  f4007080          AND      r0,r0,#0x100          ;325
0002b2  f5b07f80          CMP      r0,#0x100             ;325
0002b6  d109              BNE      |L7.716|
0002b8  4856              LDR      r0,|L7.1044|
0002ba  3088              ADDS     r0,r0,#0x88           ;331
0002bc  6800              LDR      r0,[r0,#0]            ;331
0002be  f0200030          BIC      r0,r0,#0x30           ;331
0002c2  6ce1              LDR      r1,[r4,#0x4c]         ;331
0002c4  4308              ORRS     r0,r0,r1              ;331
0002c6  4953              LDR      r1,|L7.1044|
0002c8  3188              ADDS     r1,r1,#0x88           ;331
0002ca  6008              STR      r0,[r1,#0]            ;331
                  |L7.716|
0002cc  8820              LDRH     r0,[r4,#0]            ;335
0002ce  f4007000          AND      r0,r0,#0x200          ;335
0002d2  f5b07f00          CMP      r0,#0x200             ;335
0002d6  d109              BNE      |L7.748|
0002d8  484e              LDR      r0,|L7.1044|
0002da  3088              ADDS     r0,r0,#0x88           ;341
0002dc  6800              LDR      r0,[r0,#0]            ;341
0002de  f02000c0          BIC      r0,r0,#0xc0           ;341
0002e2  6d21              LDR      r1,[r4,#0x50]         ;341
0002e4  4308              ORRS     r0,r0,r1              ;341
0002e6  494b              LDR      r1,|L7.1044|
0002e8  3188              ADDS     r1,r1,#0x88           ;341
0002ea  6008              STR      r0,[r1,#0]            ;341
                  |L7.748|
0002ec  8820              LDRH     r0,[r4,#0]            ;345
0002ee  f4006080          AND      r0,r0,#0x400          ;345
0002f2  f5b06f80          CMP      r0,#0x400             ;345
0002f6  d109              BNE      |L7.780|
0002f8  4846              LDR      r0,|L7.1044|
0002fa  3088              ADDS     r0,r0,#0x88           ;351
0002fc  6800              LDR      r0,[r0,#0]            ;351
0002fe  f4207040          BIC      r0,r0,#0x300          ;351
000302  6d61              LDR      r1,[r4,#0x54]         ;351
000304  4308              ORRS     r0,r0,r1              ;351
000306  4943              LDR      r1,|L7.1044|
000308  3188              ADDS     r1,r1,#0x88           ;351
00030a  6008              STR      r0,[r1,#0]            ;351
                  |L7.780|
00030c  8820              LDRH     r0,[r4,#0]            ;355
00030e  f4006000          AND      r0,r0,#0x800          ;355
000312  f5b06f00          CMP      r0,#0x800             ;355
000316  d109              BNE      |L7.812|
000318  483e              LDR      r0,|L7.1044|
00031a  3088              ADDS     r0,r0,#0x88           ;361
00031c  6800              LDR      r0,[r0,#0]            ;361
00031e  f4206040          BIC      r0,r0,#0xc00          ;361
000322  6da1              LDR      r1,[r4,#0x58]         ;361
000324  4308              ORRS     r0,r0,r1              ;361
000326  493b              LDR      r1,|L7.1044|
000328  3188              ADDS     r1,r1,#0x88           ;361
00032a  6008              STR      r0,[r1,#0]            ;361
                  |L7.812|
00032c  8820              LDRH     r0,[r4,#0]            ;365
00032e  f4005080          AND      r0,r0,#0x1000         ;365
000332  f5b05f80          CMP      r0,#0x1000            ;365
000336  d109              BNE      |L7.844|
000338  4836              LDR      r0,|L7.1044|
00033a  3088              ADDS     r0,r0,#0x88           ;371
00033c  6800              LDR      r0,[r0,#0]            ;371
00033e  f4205040          BIC      r0,r0,#0x3000         ;371
000342  6de1              LDR      r1,[r4,#0x5c]         ;371
000344  4308              ORRS     r0,r0,r1              ;371
000346  4933              LDR      r1,|L7.1044|
000348  3188              ADDS     r1,r1,#0x88           ;371
00034a  6008              STR      r0,[r1,#0]            ;371
                  |L7.844|
00034c  8820              LDRH     r0,[r4,#0]            ;375
00034e  f4005000          AND      r0,r0,#0x2000         ;375
000352  f5b05f00          CMP      r0,#0x2000            ;375
000356  d109              BNE      |L7.876|
000358  482e              LDR      r0,|L7.1044|
00035a  3088              ADDS     r0,r0,#0x88           ;381
00035c  6800              LDR      r0,[r0,#0]            ;381
00035e  f4204040          BIC      r0,r0,#0xc000         ;381
000362  6e21              LDR      r1,[r4,#0x60]         ;381
000364  4308              ORRS     r0,r0,r1              ;381
000366  492b              LDR      r1,|L7.1044|
000368  3188              ADDS     r1,r1,#0x88           ;381
00036a  6008              STR      r0,[r1,#0]            ;381
                  |L7.876|
00036c  6820              LDR      r0,[r4,#0]            ;385
00036e  f4000080          AND      r0,r0,#0x400000       ;385
000372  f5b00f80          CMP      r0,#0x400000          ;385
000376  d109              BNE      |L7.908|
000378  4826              LDR      r0,|L7.1044|
00037a  3088              ADDS     r0,r0,#0x88           ;391
00037c  6800              LDR      r0,[r0,#0]            ;391
00037e  f0206080          BIC      r0,r0,#0x4000000      ;391
000382  6fa1              LDR      r1,[r4,#0x78]         ;391
000384  4308              ORRS     r0,r0,r1              ;391
000386  4923              LDR      r1,|L7.1044|
000388  3188              ADDS     r1,r1,#0x88           ;391
00038a  6008              STR      r0,[r1,#0]            ;391
                  |L7.908|
00038c  6820              LDR      r0,[r4,#0]            ;395
00038e  f4001000          AND      r0,r0,#0x200000       ;395
000392  f5b01f00          CMP      r0,#0x200000          ;395
000396  d10f              BNE      |L7.952|
000398  481e              LDR      r0,|L7.1044|
00039a  3088              ADDS     r0,r0,#0x88           ;401
00039c  6800              LDR      r0,[r0,#0]            ;401
00039e  f0206000          BIC      r0,r0,#0x8000000      ;401
0003a2  6fe1              LDR      r1,[r4,#0x7c]         ;401
0003a4  4308              ORRS     r0,r0,r1              ;401
0003a6  491b              LDR      r1,|L7.1044|
0003a8  3188              ADDS     r1,r1,#0x88           ;401
0003aa  6008              STR      r0,[r1,#0]            ;401
0003ac  6fe0              LDR      r0,[r4,#0x7c]         ;404
0003ae  f1b06f00          CMP      r0,#0x8000000         ;404
0003b2  d101              BNE      |L7.952|
0003b4  f04f0901          MOV      r9,#1                 ;406
                  |L7.952|
0003b8  7820              LDRB     r0,[r4,#0]            ;412
0003ba  f0000008          AND      r0,r0,#8              ;412
0003be  2808              CMP      r0,#8                 ;412
0003c0  d101              BNE      |L7.966|
0003c2  f04f0901          MOV      r9,#1                 ;414
                  |L7.966|
0003c6  6820              LDR      r0,[r4,#0]            ;419
0003c8  f4002080          AND      r0,r0,#0x40000        ;419
0003cc  f5b02f80          CMP      r0,#0x40000           ;419
0003d0  d109              BNE      |L7.998|
0003d2  4810              LDR      r0,|L7.1044|
0003d4  3088              ADDS     r0,r0,#0x88           ;425
0003d6  6800              LDR      r0,[r0,#0]            ;425
0003d8  f0207040          BIC      r0,r0,#0x3000000      ;425
0003dc  6f61              LDR      r1,[r4,#0x74]         ;425
0003de  4308              ORRS     r0,r0,r1              ;425
0003e0  490c              LDR      r1,|L7.1044|
0003e2  3188              ADDS     r1,r1,#0x88           ;425
0003e4  6008              STR      r0,[r1,#0]            ;425
                  |L7.998|
0003e6  6820              LDR      r0,[r4,#0]            ;429
0003e8  f4000000          AND      r0,r0,#0x800000       ;429
0003ec  f5b00f00          CMP      r0,#0x800000          ;429
0003f0  d10a              BNE      |L7.1032|
0003f2  4808              LDR      r0,|L7.1044|
0003f4  3088              ADDS     r0,r0,#0x88           ;435
0003f6  6800              LDR      r0,[r0,#0]            ;435
0003f8  f0205080          BIC      r0,r0,#0x10000000     ;435
0003fc  f8d41080          LDR      r1,[r4,#0x80]         ;435
000400  4308              ORRS     r0,r0,r1              ;435
000402  4904              LDR      r1,|L7.1044|
000404  3188              ADDS     r1,r1,#0x88           ;435
000406  6008              STR      r0,[r1,#0]            ;435
                  |L7.1032|
000408  6820              LDR      r0,[r4,#0]            ;440
00040a  f0006080          AND      r0,r0,#0x4000000      ;440
00040e  f1b06f80          CMP      r0,#0x4000000         ;440
000412  e005              B        |L7.1056|
                  |L7.1044|
                          DCD      0x40023808
                  |L7.1048|
                          DCD      0x40007000
                  |L7.1052|
                          DCD      0x0ffffcff
                  |L7.1056|
000420  d108              BNE      |L7.1076|
000422  48cc              LDR      r0,|L7.1876|
000424  6800              LDR      r0,[r0,#0]            ;446
000426  f0205000          BIC      r0,r0,#0x20000000     ;446
00042a  f8d41084          LDR      r1,[r4,#0x84]         ;446
00042e  4308              ORRS     r0,r0,r1              ;446
000430  49c8              LDR      r1,|L7.1876|
000432  6008              STR      r0,[r1,#0]            ;446
                  |L7.1076|
000434  6820              LDR      r0,[r4,#0]            ;450
000436  f0006000          AND      r0,r0,#0x8000000      ;450
00043a  f1b06f00          CMP      r0,#0x8000000         ;450
00043e  d10a              BNE      |L7.1110|
000440  48c4              LDR      r0,|L7.1876|
000442  1f00              SUBS     r0,r0,#4              ;456
000444  6800              LDR      r0,[r0,#0]            ;456
000446  f0207000          BIC      r0,r0,#0x2000000      ;456
00044a  f8d41088          LDR      r1,[r4,#0x88]         ;456
00044e  4308              ORRS     r0,r0,r1              ;456
000450  49c0              LDR      r1,|L7.1876|
000452  1f09              SUBS     r1,r1,#4              ;456
000454  6008              STR      r0,[r1,#0]            ;456
                  |L7.1110|
000456  6820              LDR      r0,[r4,#0]            ;460
000458  f0005080          AND      r0,r0,#0x10000000     ;460
00045c  f1b05f80          CMP      r0,#0x10000000        ;460
000460  d10a              BNE      |L7.1144|
000462  48bc              LDR      r0,|L7.1876|
000464  1f00              SUBS     r0,r0,#4              ;466
000466  6800              LDR      r0,[r0,#0]            ;466
000468  f0206080          BIC      r0,r0,#0x4000000      ;466
00046c  f8d4108c          LDR      r1,[r4,#0x8c]         ;466
000470  4308              ORRS     r0,r0,r1              ;466
000472  49b8              LDR      r1,|L7.1876|
000474  1f09              SUBS     r1,r1,#4              ;466
000476  6008              STR      r0,[r1,#0]            ;466
                  |L7.1144|
000478  f1b80f01          CMP      r8,#1                 ;472
00047c  d003              BEQ      |L7.1158|
00047e  6820              LDR      r0,[r4,#0]            ;472
000480  f1b07f00          CMP      r0,#0x2000000         ;472
000484  d17e              BNE      |L7.1412|
                  |L7.1158|
000486  48b3              LDR      r0,|L7.1876|
000488  3890              SUBS     r0,r0,#0x90           ;475
00048a  6800              LDR      r0,[r0,#0]            ;475
00048c  f0206080          BIC      r0,r0,#0x4000000      ;475
000490  49b0              LDR      r1,|L7.1876|
000492  3990              SUBS     r1,r1,#0x90           ;475
000494  6008              STR      r0,[r1,#0]            ;475
000496  f7fffffe          BL       HAL_GetTick
00049a  4606              MOV      r6,r0                 ;478
00049c  e006              B        |L7.1196|
                  |L7.1182|
00049e  f7fffffe          BL       HAL_GetTick
0004a2  1b80              SUBS     r0,r0,r6              ;483
0004a4  2864              CMP      r0,#0x64              ;483
0004a6  d901              BLS      |L7.1196|
0004a8  2003              MOVS     r0,#3                 ;486
0004aa  e628              B        |L7.254|
                  |L7.1196|
0004ac  48a9              LDR      r0,|L7.1876|
0004ae  3890              SUBS     r0,r0,#0x90           ;481
0004b0  6800              LDR      r0,[r0,#0]            ;481
0004b2  f3c060c0          UBFX     r0,r0,#27,#1          ;481
0004b6  2800              CMP      r0,#0                 ;481
0004b8  d1f1              BNE      |L7.1182|
0004ba  7820              LDRB     r0,[r4,#0]            ;494
0004bc  f0000001          AND      r0,r0,#1              ;494
0004c0  b1b8              CBZ      r0,|L7.1266|
0004c2  6b60              LDR      r0,[r4,#0x34]         ;494
0004c4  b9a8              CBNZ     r0,|L7.1266|
0004c6  48a3              LDR      r0,|L7.1876|
0004c8  380c              SUBS     r0,r0,#0xc            ;500
0004ca  6800              LDR      r0,[r0,#0]            ;500
0004cc  f3c04501          UBFX     r5,r0,#16,#2          ;500
0004d0  48a0              LDR      r0,|L7.1876|
0004d2  380c              SUBS     r0,r0,#0xc            ;501
0004d4  6800              LDR      r0,[r0,#0]            ;501
0004d6  f3c06703          UBFX     r7,r0,#24,#4          ;501
0004da  6860              LDR      r0,[r4,#4]            ;505
0004dc  0180              LSLS     r0,r0,#6              ;505
0004de  ea404005          ORR      r0,r0,r5,LSL #16      ;505
0004e2  ea406107          ORR      r1,r0,r7,LSL #24      ;505
0004e6  7a20              LDRB     r0,[r4,#8]            ;505
0004e8  ea417000          ORR      r0,r1,r0,LSL #28      ;505
0004ec  4999              LDR      r1,|L7.1876|
0004ee  390c              SUBS     r1,r1,#0xc            ;505
0004f0  6008              STR      r0,[r1,#0]            ;505
                  |L7.1266|
0004f2  6820              LDR      r0,[r4,#0]            ;509
0004f4  f4002000          AND      r0,r0,#0x80000        ;509
0004f8  f5b02f00          CMP      r0,#0x80000           ;509
0004fc  d103              BNE      |L7.1286|
0004fe  6be0              LDR      r0,[r4,#0x3c]         ;509
000500  f5b01f80          CMP      r0,#0x100000          ;509
000504  d009              BEQ      |L7.1306|
                  |L7.1286|
000506  6820              LDR      r0,[r4,#0]            ;510
000508  f4001080          AND      r0,r0,#0x100000       ;510
00050c  f5b01f80          CMP      r0,#0x100000          ;510
000510  d124              BNE      |L7.1372|
000512  6c20              LDR      r0,[r4,#0x40]         ;510
000514  f5b00f80          CMP      r0,#0x400000          ;510
000518  d120              BNE      |L7.1372|
                  |L7.1306|
00051a  488e              LDR      r0,|L7.1876|
00051c  380c              SUBS     r0,r0,#0xc            ;518
00051e  6800              LDR      r0,[r0,#0]            ;518
000520  f3c04501          UBFX     r5,r0,#16,#2          ;518
000524  488b              LDR      r0,|L7.1876|
000526  380c              SUBS     r0,r0,#0xc            ;519
000528  6800              LDR      r0,[r0,#0]            ;519
00052a  f3c07702          UBFX     r7,r0,#28,#3          ;519
00052e  6860              LDR      r0,[r4,#4]            ;524
000530  0180              LSLS     r0,r0,#6              ;524
000532  ea404105          ORR      r1,r0,r5,LSL #16      ;524
000536  7b20              LDRB     r0,[r4,#0xc]          ;524
000538  ea416000          ORR      r0,r1,r0,LSL #24      ;524
00053c  ea407007          ORR      r0,r0,r7,LSL #28      ;524
000540  4984              LDR      r1,|L7.1876|
000542  390c              SUBS     r1,r1,#0xc            ;524
000544  6008              STR      r0,[r1,#0]            ;524
000546  4883              LDR      r0,|L7.1876|
000548  1f00              SUBS     r0,r0,#4              ;527
00054a  6800              LDR      r0,[r0,#0]            ;527
00054c  f020001f          BIC      r0,r0,#0x1f           ;527
000550  6a61              LDR      r1,[r4,#0x24]         ;527
000552  1e49              SUBS     r1,r1,#1              ;527
000554  4308              ORRS     r0,r0,r1              ;527
000556  497f              LDR      r1,|L7.1876|
000558  1f09              SUBS     r1,r1,#4              ;527
00055a  6008              STR      r0,[r1,#0]            ;527
                  |L7.1372|
00055c  6820              LDR      r0,[r4,#0]            ;531
00055e  f0007080          AND      r0,r0,#0x1000000      ;531
000562  f1b07f80          CMP      r0,#0x1000000         ;531
000566  d117              BNE      |L7.1432|
000568  487a              LDR      r0,|L7.1876|
00056a  380c              SUBS     r0,r0,#0xc            ;537
00056c  6800              LDR      r0,[r0,#0]            ;537
00056e  f3c06503          UBFX     r5,r0,#24,#4          ;537
000572  4878              LDR      r0,|L7.1876|
000574  380c              SUBS     r0,r0,#0xc            ;538
000576  6800              LDR      r0,[r0,#0]            ;538
000578  f3c07702          UBFX     r7,r0,#28,#3          ;538
00057c  6860              LDR      r0,[r4,#4]            ;542
00057e  0181              LSLS     r1,r0,#6              ;542
000580  8a20              LDRH     r0,[r4,#0x10]         ;542
000582  e000              B        |L7.1414|
                  |L7.1412|
000584  e036              B        |L7.1524|
                  |L7.1414|
000586  ea414000          ORR      r0,r1,r0,LSL #16      ;542
00058a  ea406005          ORR      r0,r0,r5,LSL #24      ;542
00058e  ea407007          ORR      r0,r0,r7,LSL #28      ;542
000592  4970              LDR      r1,|L7.1876|
000594  390c              SUBS     r1,r1,#0xc            ;542
000596  6008              STR      r0,[r1,#0]            ;542
                  |L7.1432|
000598  6820              LDR      r0,[r4,#0]            ;546
00059a  f0007000          AND      r0,r0,#0x2000000      ;546
00059e  f1b07f00          CMP      r0,#0x2000000         ;546
0005a2  d10d              BNE      |L7.1472|
0005a4  6860              LDR      r0,[r4,#4]            ;556
0005a6  0181              LSLS     r1,r0,#6              ;556
0005a8  8a20              LDRH     r0,[r4,#0x10]         ;556
0005aa  ea414100          ORR      r1,r1,r0,LSL #16      ;556
0005ae  7b20              LDRB     r0,[r4,#0xc]          ;556
0005b0  ea416100          ORR      r1,r1,r0,LSL #24      ;556
0005b4  7a20              LDRB     r0,[r4,#8]            ;556
0005b6  ea417000          ORR      r0,r1,r0,LSL #28      ;556
0005ba  4966              LDR      r1,|L7.1876|
0005bc  390c              SUBS     r1,r1,#0xc            ;556
0005be  6008              STR      r0,[r1,#0]            ;556
                  |L7.1472|
0005c0  4864              LDR      r0,|L7.1876|
0005c2  3890              SUBS     r0,r0,#0x90           ;560
0005c4  6800              LDR      r0,[r0,#0]            ;560
0005c6  f0406080          ORR      r0,r0,#0x4000000      ;560
0005ca  4962              LDR      r1,|L7.1876|
0005cc  3990              SUBS     r1,r1,#0x90           ;560
0005ce  6008              STR      r0,[r1,#0]            ;560
0005d0  f7fffffe          BL       HAL_GetTick
0005d4  4606              MOV      r6,r0                 ;563
0005d6  e006              B        |L7.1510|
                  |L7.1496|
0005d8  f7fffffe          BL       HAL_GetTick
0005dc  1b80              SUBS     r0,r0,r6              ;568
0005de  2864              CMP      r0,#0x64              ;568
0005e0  d901              BLS      |L7.1510|
0005e2  2003              MOVS     r0,#3                 ;571
0005e4  e58b              B        |L7.254|
                  |L7.1510|
0005e6  485b              LDR      r0,|L7.1876|
0005e8  3890              SUBS     r0,r0,#0x90           ;566
0005ea  6800              LDR      r0,[r0,#0]            ;566
0005ec  f3c060c0          UBFX     r0,r0,#27,#1          ;566
0005f0  2800              CMP      r0,#0                 ;566
0005f2  d0f1              BEQ      |L7.1496|
                  |L7.1524|
0005f4  f1b90f01          CMP      r9,#1                 ;578
0005f8  d17e              BNE      |L7.1784|
0005fa  4856              LDR      r0,|L7.1876|
0005fc  3890              SUBS     r0,r0,#0x90           ;581
0005fe  6800              LDR      r0,[r0,#0]            ;581
000600  f0205080          BIC      r0,r0,#0x10000000     ;581
000604  4953              LDR      r1,|L7.1876|
000606  3990              SUBS     r1,r1,#0x90           ;581
000608  6008              STR      r0,[r1,#0]            ;581
00060a  f7fffffe          BL       HAL_GetTick
00060e  4606              MOV      r6,r0                 ;584
000610  e006              B        |L7.1568|
                  |L7.1554|
000612  f7fffffe          BL       HAL_GetTick
000616  1b80              SUBS     r0,r0,r6              ;589
000618  2864              CMP      r0,#0x64              ;589
00061a  d901              BLS      |L7.1568|
00061c  2003              MOVS     r0,#3                 ;592
00061e  e56e              B        |L7.254|
                  |L7.1568|
000620  484c              LDR      r0,|L7.1876|
000622  3890              SUBS     r0,r0,#0x90           ;587
000624  6800              LDR      r0,[r0,#0]            ;587
000626  f3c07040          UBFX     r0,r0,#29,#1          ;587
00062a  2800              CMP      r0,#0                 ;587
00062c  d1f1              BNE      |L7.1554|
00062e  6820              LDR      r0,[r4,#0]            ;600
000630  f4002000          AND      r0,r0,#0x80000        ;600
000634  f5b02f00          CMP      r0,#0x80000           ;600
000638  d101              BNE      |L7.1598|
00063a  6be0              LDR      r0,[r4,#0x3c]         ;600
00063c  b138              CBZ      r0,|L7.1614|
                  |L7.1598|
00063e  6820              LDR      r0,[r4,#0]            ;601
000640  f4001080          AND      r0,r0,#0x100000       ;601
000644  f5b01f80          CMP      r0,#0x100000          ;601
000648  d122              BNE      |L7.1680|
00064a  6c20              LDR      r0,[r4,#0x40]         ;601
00064c  bb00              CBNZ     r0,|L7.1680|
                  |L7.1614|
00064e  4841              LDR      r0,|L7.1876|
000650  3808              SUBS     r0,r0,#8              ;609
000652  6800              LDR      r0,[r0,#0]            ;609
000654  f3c04501          UBFX     r5,r0,#16,#2          ;609
000658  483e              LDR      r0,|L7.1876|
00065a  3808              SUBS     r0,r0,#8              ;610
00065c  6800              LDR      r0,[r0,#0]            ;610
00065e  f3c07702          UBFX     r7,r0,#28,#3          ;610
000662  6960              LDR      r0,[r4,#0x14]         ;614
000664  0180              LSLS     r0,r0,#6              ;614
000666  ea404105          ORR      r1,r0,r5,LSL #16      ;614
00066a  7e20              LDRB     r0,[r4,#0x18]         ;614
00066c  ea416000          ORR      r0,r1,r0,LSL #24      ;614
000670  ea407007          ORR      r0,r0,r7,LSL #28      ;614
000674  4937              LDR      r1,|L7.1876|
000676  3908              SUBS     r1,r1,#8              ;614
000678  6008              STR      r0,[r1,#0]            ;614
00067a  1d08              ADDS     r0,r1,#4              ;617
00067c  6800              LDR      r0,[r0,#0]            ;617
00067e  f42051f8          BIC      r1,r0,#0x1f00         ;617
000682  6aa0              LDR      r0,[r4,#0x28]         ;617
000684  1e40              SUBS     r0,r0,#1              ;617
000686  ea412000          ORR      r0,r1,r0,LSL #8       ;617
00068a  4932              LDR      r1,|L7.1876|
00068c  1f09              SUBS     r1,r1,#4              ;617
00068e  6008              STR      r0,[r1,#0]            ;617
                  |L7.1680|
000690  6820              LDR      r0,[r4,#0]            ;622
000692  f4001000          AND      r0,r0,#0x200000       ;622
000696  f5b01f00          CMP      r0,#0x200000          ;622
00069a  d119              BNE      |L7.1744|
00069c  6fe0              LDR      r0,[r4,#0x7c]         ;622
00069e  f1b06f00          CMP      r0,#0x8000000         ;622
0006a2  d115              BNE      |L7.1744|
0006a4  482b              LDR      r0,|L7.1876|
0006a6  3808              SUBS     r0,r0,#8              ;627
0006a8  6800              LDR      r0,[r0,#0]            ;627
0006aa  f3c06503          UBFX     r5,r0,#24,#4          ;627
0006ae  4829              LDR      r0,|L7.1876|
0006b0  3808              SUBS     r0,r0,#8              ;628
0006b2  6800              LDR      r0,[r0,#0]            ;628
0006b4  f3c07702          UBFX     r7,r0,#28,#3          ;628
0006b8  6960              LDR      r0,[r4,#0x14]         ;633
0006ba  0181              LSLS     r1,r0,#6              ;633
0006bc  8c20              LDRH     r0,[r4,#0x20]         ;633
0006be  ea414000          ORR      r0,r1,r0,LSL #16      ;633
0006c2  ea406005          ORR      r0,r0,r5,LSL #24      ;633
0006c6  ea407007          ORR      r0,r0,r7,LSL #28      ;633
0006ca  4922              LDR      r1,|L7.1876|
0006cc  3908              SUBS     r1,r1,#8              ;633
0006ce  6008              STR      r0,[r1,#0]            ;633
                  |L7.1744|
0006d0  7820              LDRB     r0,[r4,#0]            ;638
0006d2  f0000008          AND      r0,r0,#8              ;638
0006d6  2808              CMP      r0,#8                 ;638
0006d8  d120              BNE      |L7.1820|
0006da  481e              LDR      r0,|L7.1876|
0006dc  3808              SUBS     r0,r0,#8              ;644
0006de  6800              LDR      r0,[r0,#0]            ;644
0006e0  f3c06503          UBFX     r5,r0,#24,#4          ;644
0006e4  481b              LDR      r0,|L7.1876|
0006e6  3808              SUBS     r0,r0,#8              ;645
0006e8  6800              LDR      r0,[r0,#0]            ;645
0006ea  f3c04701          UBFX     r7,r0,#16,#2          ;645
0006ee  6960              LDR      r0,[r4,#0x14]         ;650
0006f0  0180              LSLS     r0,r0,#6              ;650
0006f2  ea404007          ORR      r0,r0,r7,LSL #16      ;650
0006f6  e000              B        |L7.1786|
                  |L7.1784|
0006f8  e02a              B        |L7.1872|
                  |L7.1786|
0006fa  ea406105          ORR      r1,r0,r5,LSL #24      ;650
0006fe  7f20              LDRB     r0,[r4,#0x1c]         ;650
000700  ea417000          ORR      r0,r1,r0,LSL #28      ;650
000704  4913              LDR      r1,|L7.1876|
000706  3908              SUBS     r1,r1,#8              ;650
000708  6008              STR      r0,[r1,#0]            ;650
00070a  1d08              ADDS     r0,r1,#4              ;653
00070c  6800              LDR      r0,[r0,#0]            ;653
00070e  f4203040          BIC      r0,r0,#0x30000        ;653
000712  6ae1              LDR      r1,[r4,#0x2c]         ;653
000714  4308              ORRS     r0,r0,r1              ;653
000716  490f              LDR      r1,|L7.1876|
000718  1f09              SUBS     r1,r1,#4              ;653
00071a  6008              STR      r0,[r1,#0]            ;653
                  |L7.1820|
00071c  480d              LDR      r0,|L7.1876|
00071e  3890              SUBS     r0,r0,#0x90           ;658
000720  6800              LDR      r0,[r0,#0]            ;658
000722  f0405080          ORR      r0,r0,#0x10000000     ;658
000726  490b              LDR      r1,|L7.1876|
000728  3990              SUBS     r1,r1,#0x90           ;658
00072a  6008              STR      r0,[r1,#0]            ;658
00072c  f7fffffe          BL       HAL_GetTick
000730  4606              MOV      r6,r0                 ;661
000732  e006              B        |L7.1858|
                  |L7.1844|
000734  f7fffffe          BL       HAL_GetTick
000738  1b80              SUBS     r0,r0,r6              ;666
00073a  2864              CMP      r0,#0x64              ;666
00073c  d901              BLS      |L7.1858|
00073e  2003              MOVS     r0,#3                 ;669
000740  e4dd              B        |L7.254|
                  |L7.1858|
000742  4804              LDR      r0,|L7.1876|
000744  3890              SUBS     r0,r0,#0x90           ;664
000746  6800              LDR      r0,[r0,#0]            ;664
000748  f3c07040          UBFX     r0,r0,#29,#1          ;664
00074c  2800              CMP      r0,#0                 ;664
00074e  d0f1              BEQ      |L7.1844|
                  |L7.1872|
000750  2000              MOVS     r0,#0                 ;673
000752  e4d4              B        |L7.254|
;;;675    
                          ENDP

                  |L7.1876|
                          DCD      0x40023890

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F7_V1.11.0\\Drivers\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_rcc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____REV16|
#line 464 "D:\\Program_Files_x86\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____REVSH|
#line 479
|__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____RRX|
#line 666
|__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____RRX| PROC
#line 667

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
