; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f7xx_hal_rcc.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f7xx_hal_rcc.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(D)_Duktape\duktape\src -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-DUKTAPE\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DDUK_USE_BYTEORDER=1 --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f7xx_hal_rcc.crf ..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_rcc.c]
                          THUMB

                          AREA ||i.HAL_RCC_CSSCallback||, CODE, READONLY, ALIGN=1

                  HAL_RCC_CSSCallback PROC
;;;1212     */
;;;1213   __weak void HAL_RCC_CSSCallback(void)
000000  4770              BX       lr
;;;1214   {
;;;1215     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1216               the HAL_RCC_CSSCallback could be implemented in the user file
;;;1217      */
;;;1218   }
;;;1219   
                          ENDP


                          AREA ||i.HAL_RCC_ClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_ClockConfig PROC
;;;718      */
;;;719    HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
000000  b570              PUSH     {r4-r6,lr}
;;;720    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;721      uint32_t tickstart = 0;
000006  2600              MOVS     r6,#0
;;;722    
;;;723      /* Check Null pointer */
;;;724      if(RCC_ClkInitStruct == NULL)
000008  b90c              CBNZ     r4,|L2.14|
;;;725      {
;;;726        return HAL_ERROR;
00000a  2001              MOVS     r0,#1
                  |L2.12|
;;;727      }
;;;728    
;;;729      /* Check the parameters */
;;;730      assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
;;;731      assert_param(IS_FLASH_LATENCY(FLatency));
;;;732    
;;;733      /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
;;;734         must be correctly programmed according to the frequency of the CPU clock
;;;735         (HCLK) and the supply voltage of the device. */
;;;736    
;;;737      /* Increasing the CPU frequency */
;;;738      if(FLatency > __HAL_FLASH_GET_LATENCY())
;;;739      {
;;;740        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;741        __HAL_FLASH_SET_LATENCY(FLatency);
;;;742    
;;;743        /* Check that the new number of wait states is taken into account to access the Flash
;;;744        memory by reading the FLASH_ACR register */
;;;745        if(__HAL_FLASH_GET_LATENCY() != FLatency)
;;;746        {
;;;747          return HAL_ERROR;
;;;748        }
;;;749      }
;;;750    
;;;751      /*-------------------------- HCLK Configuration --------------------------*/
;;;752      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;753      {
;;;754        /* Set the highest APBx dividers in order to ensure that we do not go through
;;;755           a non-spec phase whatever we decrease or increase HCLK. */
;;;756        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;757        {
;;;758          MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
;;;759        }
;;;760    
;;;761        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;762        {
;;;763          MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
;;;764        }
;;;765    
;;;766        /* Set the new HCLK clock divider */
;;;767        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;768        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
;;;769      }
;;;770    
;;;771      /*------------------------- SYSCLK Configuration ---------------------------*/
;;;772      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;773      {
;;;774        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;775    
;;;776        /* HSE is selected as System Clock Source */
;;;777        if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;778        {
;;;779          /* Check the HSE ready flag */
;;;780          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;781          {
;;;782            return HAL_ERROR;
;;;783          }
;;;784        }
;;;785        /* PLL is selected as System Clock Source */
;;;786        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;787        {
;;;788          /* Check the PLL ready flag */
;;;789          if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;790          {
;;;791            return HAL_ERROR;
;;;792          }
;;;793        }
;;;794        /* HSI is selected as System Clock Source */
;;;795        else
;;;796        {
;;;797          /* Check the HSI ready flag */
;;;798          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;799          {
;;;800            return HAL_ERROR;
;;;801          }
;;;802        }
;;;803    
;;;804        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;805    
;;;806        /* Get Start Tick*/
;;;807        tickstart = HAL_GetTick();
;;;808    
;;;809        while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
;;;810        {
;;;811          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;812          {
;;;813            return HAL_TIMEOUT;
;;;814          }
;;;815        }
;;;816      }
;;;817    
;;;818      /* Decreasing the number of wait states because of lower CPU frequency */
;;;819      if(FLatency < __HAL_FLASH_GET_LATENCY())
;;;820      {
;;;821        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;822        __HAL_FLASH_SET_LATENCY(FLatency);
;;;823    
;;;824        /* Check that the new number of wait states is taken into account to access the Flash
;;;825        memory by reading the FLASH_ACR register */
;;;826        if(__HAL_FLASH_GET_LATENCY() != FLatency)
;;;827        {
;;;828          return HAL_ERROR;
;;;829        }
;;;830      }
;;;831    
;;;832      /*-------------------------- PCLK1 Configuration ---------------------------*/
;;;833      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;834      {
;;;835        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
;;;836        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
;;;837      }
;;;838    
;;;839      /*-------------------------- PCLK2 Configuration ---------------------------*/
;;;840      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;841      {
;;;842        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
;;;843        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
;;;844      }
;;;845    
;;;846      /* Update the SystemCoreClock global variable */
;;;847      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
;;;848    
;;;849      /* Configure the source of time base considering new system clocks settings*/
;;;850      HAL_InitTick (TICK_INT_PRIORITY);
;;;851    
;;;852      return HAL_OK;
;;;853    }
00000c  bd70              POP      {r4-r6,pc}
                  |L2.14|
00000e  485c              LDR      r0,|L2.384|
000010  6800              LDR      r0,[r0,#0]            ;738
000012  f000000f          AND      r0,r0,#0xf            ;738
000016  42a8              CMP      r0,r5                 ;738
000018  d20e              BCS      |L2.56|
00001a  4859              LDR      r0,|L2.384|
00001c  6800              LDR      r0,[r0,#0]            ;741
00001e  f020000f          BIC      r0,r0,#0xf            ;741
000022  4328              ORRS     r0,r0,r5              ;741
000024  4956              LDR      r1,|L2.384|
000026  6008              STR      r0,[r1,#0]            ;741
000028  4608              MOV      r0,r1                 ;745
00002a  6800              LDR      r0,[r0,#0]            ;745
00002c  f000000f          AND      r0,r0,#0xf            ;745
000030  42a8              CMP      r0,r5                 ;745
000032  d001              BEQ      |L2.56|
000034  2001              MOVS     r0,#1                 ;747
000036  e7e9              B        |L2.12|
                  |L2.56|
000038  7820              LDRB     r0,[r4,#0]            ;752
00003a  f0000002          AND      r0,r0,#2              ;752
00003e  2802              CMP      r0,#2                 ;752
000040  d11d              BNE      |L2.126|
000042  7820              LDRB     r0,[r4,#0]            ;756
000044  f0000004          AND      r0,r0,#4              ;756
000048  2804              CMP      r0,#4                 ;756
00004a  d105              BNE      |L2.88|
00004c  484d              LDR      r0,|L2.388|
00004e  6800              LDR      r0,[r0,#0]            ;758
000050  f44050e0          ORR      r0,r0,#0x1c00         ;758
000054  494b              LDR      r1,|L2.388|
000056  6008              STR      r0,[r1,#0]            ;758
                  |L2.88|
000058  7820              LDRB     r0,[r4,#0]            ;761
00005a  f0000008          AND      r0,r0,#8              ;761
00005e  2808              CMP      r0,#8                 ;761
000060  d105              BNE      |L2.110|
000062  4848              LDR      r0,|L2.388|
000064  6800              LDR      r0,[r0,#0]            ;763
000066  f4404060          ORR      r0,r0,#0xe000         ;763
00006a  4946              LDR      r1,|L2.388|
00006c  6008              STR      r0,[r1,#0]            ;763
                  |L2.110|
00006e  4845              LDR      r0,|L2.388|
000070  6800              LDR      r0,[r0,#0]            ;768
000072  f02000f0          BIC      r0,r0,#0xf0           ;768
000076  68a1              LDR      r1,[r4,#8]            ;768
000078  4308              ORRS     r0,r0,r1              ;768
00007a  4942              LDR      r1,|L2.388|
00007c  6008              STR      r0,[r1,#0]            ;768
                  |L2.126|
00007e  7820              LDRB     r0,[r4,#0]            ;772
000080  f0000001          AND      r0,r0,#1              ;772
000084  b390              CBZ      r0,|L2.236|
000086  6860              LDR      r0,[r4,#4]            ;777
000088  2801              CMP      r0,#1                 ;777
00008a  d107              BNE      |L2.156|
00008c  483d              LDR      r0,|L2.388|
00008e  3808              SUBS     r0,r0,#8              ;780
000090  6800              LDR      r0,[r0,#0]            ;780
000092  f3c04040          UBFX     r0,r0,#17,#1          ;780
000096  b9a0              CBNZ     r0,|L2.194|
000098  2001              MOVS     r0,#1                 ;782
00009a  e7b7              B        |L2.12|
                  |L2.156|
00009c  6860              LDR      r0,[r4,#4]            ;786
00009e  2802              CMP      r0,#2                 ;786
0000a0  d107              BNE      |L2.178|
0000a2  4838              LDR      r0,|L2.388|
0000a4  3808              SUBS     r0,r0,#8              ;789
0000a6  6800              LDR      r0,[r0,#0]            ;789
0000a8  f3c06040          UBFX     r0,r0,#25,#1          ;789
0000ac  b948              CBNZ     r0,|L2.194|
0000ae  2001              MOVS     r0,#1                 ;791
0000b0  e7ac              B        |L2.12|
                  |L2.178|
0000b2  4834              LDR      r0,|L2.388|
0000b4  3808              SUBS     r0,r0,#8              ;798
0000b6  6800              LDR      r0,[r0,#0]            ;798
0000b8  f3c00040          UBFX     r0,r0,#1,#1           ;798
0000bc  b908              CBNZ     r0,|L2.194|
0000be  2001              MOVS     r0,#1                 ;800
0000c0  e7a4              B        |L2.12|
                  |L2.194|
0000c2  4830              LDR      r0,|L2.388|
0000c4  6800              LDR      r0,[r0,#0]            ;804
0000c6  f0200003          BIC      r0,r0,#3              ;804
0000ca  6861              LDR      r1,[r4,#4]            ;804
0000cc  4308              ORRS     r0,r0,r1              ;804
0000ce  492d              LDR      r1,|L2.388|
0000d0  6008              STR      r0,[r1,#0]            ;804
0000d2  f7fffffe          BL       HAL_GetTick
0000d6  4606              MOV      r6,r0                 ;807
0000d8  e009              B        |L2.238|
                  |L2.218|
0000da  f7fffffe          BL       HAL_GetTick
0000de  1b80              SUBS     r0,r0,r6              ;811
0000e0  f2413188          MOV      r1,#0x1388            ;811
0000e4  4288              CMP      r0,r1                 ;811
0000e6  d902              BLS      |L2.238|
0000e8  2003              MOVS     r0,#3                 ;813
0000ea  e78f              B        |L2.12|
                  |L2.236|
0000ec  e007              B        |L2.254|
                  |L2.238|
0000ee  4825              LDR      r0,|L2.388|
0000f0  6800              LDR      r0,[r0,#0]            ;809
0000f2  f000000c          AND      r0,r0,#0xc            ;809
0000f6  6861              LDR      r1,[r4,#4]            ;809
0000f8  ebb00f81          CMP      r0,r1,LSL #2          ;809
0000fc  d1ed              BNE      |L2.218|
                  |L2.254|
0000fe  4820              LDR      r0,|L2.384|
000100  6800              LDR      r0,[r0,#0]            ;819
000102  f000000f          AND      r0,r0,#0xf            ;819
000106  42a8              CMP      r0,r5                 ;819
000108  d90e              BLS      |L2.296|
00010a  481d              LDR      r0,|L2.384|
00010c  6800              LDR      r0,[r0,#0]            ;822
00010e  f020000f          BIC      r0,r0,#0xf            ;822
000112  4328              ORRS     r0,r0,r5              ;822
000114  491a              LDR      r1,|L2.384|
000116  6008              STR      r0,[r1,#0]            ;822
000118  4608              MOV      r0,r1                 ;826
00011a  6800              LDR      r0,[r0,#0]            ;826
00011c  f000000f          AND      r0,r0,#0xf            ;826
000120  42a8              CMP      r0,r5                 ;826
000122  d001              BEQ      |L2.296|
000124  2001              MOVS     r0,#1                 ;828
000126  e771              B        |L2.12|
                  |L2.296|
000128  7820              LDRB     r0,[r4,#0]            ;833
00012a  f0000004          AND      r0,r0,#4              ;833
00012e  2804              CMP      r0,#4                 ;833
000130  d107              BNE      |L2.322|
000132  4814              LDR      r0,|L2.388|
000134  6800              LDR      r0,[r0,#0]            ;836
000136  f42050e0          BIC      r0,r0,#0x1c00         ;836
00013a  68e1              LDR      r1,[r4,#0xc]          ;836
00013c  4308              ORRS     r0,r0,r1              ;836
00013e  4911              LDR      r1,|L2.388|
000140  6008              STR      r0,[r1,#0]            ;836
                  |L2.322|
000142  7820              LDRB     r0,[r4,#0]            ;840
000144  f0000008          AND      r0,r0,#8              ;840
000148  2808              CMP      r0,#8                 ;840
00014a  d108              BNE      |L2.350|
00014c  480d              LDR      r0,|L2.388|
00014e  6800              LDR      r0,[r0,#0]            ;843
000150  f4204060          BIC      r0,r0,#0xe000         ;843
000154  6921              LDR      r1,[r4,#0x10]         ;843
000156  ea4000c1          ORR      r0,r0,r1,LSL #3       ;843
00015a  490a              LDR      r1,|L2.388|
00015c  6008              STR      r0,[r1,#0]            ;843
                  |L2.350|
00015e  f7fffffe          BL       HAL_RCC_GetSysClockFreq
000162  4908              LDR      r1,|L2.388|
000164  6809              LDR      r1,[r1,#0]            ;847
000166  f3c11103          UBFX     r1,r1,#4,#4           ;847
00016a  4a07              LDR      r2,|L2.392|
00016c  5c51              LDRB     r1,[r2,r1]            ;847
00016e  40c8              LSRS     r0,r0,r1              ;847
000170  4906              LDR      r1,|L2.396|
000172  6008              STR      r0,[r1,#0]            ;847  ; SystemCoreClock
000174  200f              MOVS     r0,#0xf               ;850
000176  f7fffffe          BL       HAL_InitTick
00017a  2000              MOVS     r0,#0                 ;852
00017c  e746              B        |L2.12|
;;;854    
                          ENDP

00017e  0000              DCW      0x0000
                  |L2.384|
                          DCD      0x40023c00
                  |L2.388|
                          DCD      0x40023808
                  |L2.392|
                          DCD      AHBPrescTable
                  |L2.396|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DeInit PROC
;;;213      */
;;;214    HAL_StatusTypeDef HAL_RCC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;215    {
;;;216      uint32_t tickstart;
;;;217    
;;;218      /* Get Start Tick */
;;;219      tickstart = HAL_GetTick();
000002  f7fffffe          BL       HAL_GetTick
000006  4604              MOV      r4,r0
;;;220    
;;;221      /* Set HSION bit to the reset value */
;;;222      SET_BIT(RCC->CR, RCC_CR_HSION);
000008  485e              LDR      r0,|L3.388|
00000a  6800              LDR      r0,[r0,#0]
00000c  f0400001          ORR      r0,r0,#1
000010  495c              LDR      r1,|L3.388|
000012  6008              STR      r0,[r1,#0]
;;;223    
;;;224      /* Wait till HSI is ready */
;;;225      while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
000014  e006              B        |L3.36|
                  |L3.22|
;;;226      {
;;;227        if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
000016  f7fffffe          BL       HAL_GetTick
00001a  1b00              SUBS     r0,r0,r4
00001c  2802              CMP      r0,#2
00001e  d901              BLS      |L3.36|
;;;228        {
;;;229          return HAL_TIMEOUT;
000020  2003              MOVS     r0,#3
                  |L3.34|
;;;230        }
;;;231      }
;;;232    
;;;233      /* Set HSITRIM[4:0] bits to the reset value */
;;;234      SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
;;;235    
;;;236      /* Get Start Tick */
;;;237      tickstart = HAL_GetTick();
;;;238    
;;;239      /* Reset CFGR register */
;;;240      CLEAR_REG(RCC->CFGR);
;;;241    
;;;242      /* Wait till clock switch is ready */
;;;243      while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
;;;244      {
;;;245        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;246        {
;;;247          return HAL_TIMEOUT;
;;;248        }
;;;249      }
;;;250    
;;;251      /* Get Start Tick */
;;;252      tickstart = HAL_GetTick();
;;;253    
;;;254      /* Clear HSEON, HSEBYP and CSSON bits */
;;;255      CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
;;;256    
;;;257      /* Wait till HSE is disabled */
;;;258      while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
;;;259      {
;;;260        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
;;;261        {
;;;262          return HAL_TIMEOUT;
;;;263        }
;;;264      }
;;;265    
;;;266      /* Get Start Tick */
;;;267      tickstart = HAL_GetTick();
;;;268    
;;;269      /* Clear PLLON bit */
;;;270      CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
;;;271    
;;;272      /* Wait till PLL is disabled */
;;;273      while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
;;;274      {
;;;275        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;276        {
;;;277          return HAL_TIMEOUT;
;;;278        }
;;;279      }
;;;280    
;;;281      /* Get Start Tick */
;;;282      tickstart = HAL_GetTick();
;;;283    
;;;284      /* Reset PLLI2SON bit */
;;;285      CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
;;;286    
;;;287      /* Wait till PLLI2S is disabled */
;;;288      while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
;;;289      {
;;;290        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
;;;291        {
;;;292          return HAL_TIMEOUT;
;;;293        }
;;;294      }
;;;295    
;;;296      /* Get Start Tick */
;;;297      tickstart = HAL_GetTick();
;;;298    
;;;299      /* Reset PLLSAI bit */
;;;300      CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
;;;301    
;;;302      /* Wait till PLLSAI is disabled */
;;;303      while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
;;;304      {
;;;305        if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
;;;306        {
;;;307          return HAL_TIMEOUT;
;;;308        }
;;;309      }
;;;310    
;;;311      /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
;;;312      RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
;;;313    
;;;314      /* Reset PLLI2SCFGR register to default value */
;;;315      RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;316    
;;;317      /* Reset PLLSAICFGR register to default value */
;;;318      RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
;;;319    
;;;320      /* Disable all interrupts */
;;;321      CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
;;;322    
;;;323      /* Clear all interrupt flags */
;;;324      SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
;;;325    
;;;326      /* Clear LSION bit */
;;;327      CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
;;;328    
;;;329      /* Reset all CSR flags */
;;;330      SET_BIT(RCC->CSR, RCC_CSR_RMVF);
;;;331    
;;;332      /* Update the SystemCoreClock global variable */
;;;333      SystemCoreClock = HSI_VALUE;
;;;334    
;;;335      /* Adapt Systick interrupt period */
;;;336      if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
;;;337      {
;;;338        return HAL_ERROR;
;;;339      }
;;;340      else
;;;341      {
;;;342        return HAL_OK;
;;;343      }
;;;344    }
000022  bd10              POP      {r4,pc}
                  |L3.36|
000024  4857              LDR      r0,|L3.388|
000026  6800              LDR      r0,[r0,#0]            ;225
000028  f0000002          AND      r0,r0,#2              ;225
00002c  2800              CMP      r0,#0                 ;225
00002e  d0f2              BEQ      |L3.22|
000030  4854              LDR      r0,|L3.388|
000032  6800              LDR      r0,[r0,#0]            ;234
000034  f0400080          ORR      r0,r0,#0x80           ;234
000038  4952              LDR      r1,|L3.388|
00003a  6008              STR      r0,[r1,#0]            ;234
00003c  f7fffffe          BL       HAL_GetTick
000040  4604              MOV      r4,r0                 ;237
000042  2000              MOVS     r0,#0                 ;240
000044  494f              LDR      r1,|L3.388|
000046  3108              ADDS     r1,r1,#8              ;240
000048  6008              STR      r0,[r1,#0]            ;240
00004a  e008              B        |L3.94|
                  |L3.76|
00004c  f7fffffe          BL       HAL_GetTick
000050  1b00              SUBS     r0,r0,r4              ;245
000052  f2413188          MOV      r1,#0x1388            ;245
000056  4288              CMP      r0,r1                 ;245
000058  d901              BLS      |L3.94|
00005a  2003              MOVS     r0,#3                 ;247
00005c  e7e1              B        |L3.34|
                  |L3.94|
00005e  4849              LDR      r0,|L3.388|
000060  3008              ADDS     r0,r0,#8              ;243
000062  6800              LDR      r0,[r0,#0]            ;243
000064  f000000c          AND      r0,r0,#0xc            ;243
000068  2800              CMP      r0,#0                 ;243
00006a  d1ef              BNE      |L3.76|
00006c  f7fffffe          BL       HAL_GetTick
000070  4604              MOV      r4,r0                 ;252
000072  4844              LDR      r0,|L3.388|
000074  6800              LDR      r0,[r0,#0]            ;255
000076  f4202050          BIC      r0,r0,#0xd0000        ;255
00007a  4942              LDR      r1,|L3.388|
00007c  6008              STR      r0,[r1,#0]            ;255
00007e  e006              B        |L3.142|
                  |L3.128|
000080  f7fffffe          BL       HAL_GetTick
000084  1b00              SUBS     r0,r0,r4              ;260
000086  2864              CMP      r0,#0x64              ;260
000088  d901              BLS      |L3.142|
00008a  2003              MOVS     r0,#3                 ;262
00008c  e7c9              B        |L3.34|
                  |L3.142|
00008e  483d              LDR      r0,|L3.388|
000090  6800              LDR      r0,[r0,#0]            ;258
000092  f4003000          AND      r0,r0,#0x20000        ;258
000096  2800              CMP      r0,#0                 ;258
000098  d1f2              BNE      |L3.128|
00009a  f7fffffe          BL       HAL_GetTick
00009e  4604              MOV      r4,r0                 ;267
0000a0  4838              LDR      r0,|L3.388|
0000a2  6800              LDR      r0,[r0,#0]            ;270
0000a4  f0207080          BIC      r0,r0,#0x1000000      ;270
0000a8  4936              LDR      r1,|L3.388|
0000aa  6008              STR      r0,[r1,#0]            ;270
0000ac  e006              B        |L3.188|
                  |L3.174|
0000ae  f7fffffe          BL       HAL_GetTick
0000b2  1b00              SUBS     r0,r0,r4              ;275
0000b4  2802              CMP      r0,#2                 ;275
0000b6  d901              BLS      |L3.188|
0000b8  2003              MOVS     r0,#3                 ;277
0000ba  e7b2              B        |L3.34|
                  |L3.188|
0000bc  4831              LDR      r0,|L3.388|
0000be  6800              LDR      r0,[r0,#0]            ;273
0000c0  f0007000          AND      r0,r0,#0x2000000      ;273
0000c4  2800              CMP      r0,#0                 ;273
0000c6  d1f2              BNE      |L3.174|
0000c8  f7fffffe          BL       HAL_GetTick
0000cc  4604              MOV      r4,r0                 ;282
0000ce  482d              LDR      r0,|L3.388|
0000d0  6800              LDR      r0,[r0,#0]            ;285
0000d2  f0206080          BIC      r0,r0,#0x4000000      ;285
0000d6  492b              LDR      r1,|L3.388|
0000d8  6008              STR      r0,[r1,#0]            ;285
0000da  e006              B        |L3.234|
                  |L3.220|
0000dc  f7fffffe          BL       HAL_GetTick
0000e0  1b00              SUBS     r0,r0,r4              ;290
0000e2  2864              CMP      r0,#0x64              ;290
0000e4  d901              BLS      |L3.234|
0000e6  2003              MOVS     r0,#3                 ;292
0000e8  e79b              B        |L3.34|
                  |L3.234|
0000ea  4826              LDR      r0,|L3.388|
0000ec  6800              LDR      r0,[r0,#0]            ;288
0000ee  f0006000          AND      r0,r0,#0x8000000      ;288
0000f2  2800              CMP      r0,#0                 ;288
0000f4  d1f2              BNE      |L3.220|
0000f6  f7fffffe          BL       HAL_GetTick
0000fa  4604              MOV      r4,r0                 ;297
0000fc  4821              LDR      r0,|L3.388|
0000fe  6800              LDR      r0,[r0,#0]            ;300
000100  f0205080          BIC      r0,r0,#0x10000000     ;300
000104  491f              LDR      r1,|L3.388|
000106  6008              STR      r0,[r1,#0]            ;300
000108  e006              B        |L3.280|
                  |L3.266|
00010a  f7fffffe          BL       HAL_GetTick
00010e  1b00              SUBS     r0,r0,r4              ;305
000110  2864              CMP      r0,#0x64              ;305
000112  d901              BLS      |L3.280|
000114  2003              MOVS     r0,#3                 ;307
000116  e784              B        |L3.34|
                  |L3.280|
000118  481a              LDR      r0,|L3.388|
00011a  6800              LDR      r0,[r0,#0]            ;303
00011c  f0005000          AND      r0,r0,#0x20000000     ;303
000120  2800              CMP      r0,#0                 ;303
000122  d1f2              BNE      |L3.266|
000124  4818              LDR      r0,|L3.392|
000126  4917              LDR      r1,|L3.388|
000128  1d09              ADDS     r1,r1,#4              ;312
00012a  6008              STR      r0,[r1,#0]            ;312
00012c  4816              LDR      r0,|L3.392|
00012e  3810              SUBS     r0,r0,#0x10           ;315
000130  4914              LDR      r1,|L3.388|
000132  3184              ADDS     r1,r1,#0x84           ;315
000134  6008              STR      r0,[r1,#0]            ;315
000136  1d09              ADDS     r1,r1,#4              ;318
000138  6008              STR      r0,[r1,#0]            ;318
00013a  4812              LDR      r0,|L3.388|
00013c  300c              ADDS     r0,r0,#0xc            ;321
00013e  6800              LDR      r0,[r0,#0]            ;321
000140  f42040fe          BIC      r0,r0,#0x7f00         ;321
000144  490f              LDR      r1,|L3.388|
000146  310c              ADDS     r1,r1,#0xc            ;321
000148  6008              STR      r0,[r1,#0]            ;321
00014a  4608              MOV      r0,r1                 ;324
00014c  6800              LDR      r0,[r0,#0]            ;324
00014e  f440007f          ORR      r0,r0,#0xff0000       ;324
000152  6008              STR      r0,[r1,#0]            ;324
000154  480b              LDR      r0,|L3.388|
000156  3074              ADDS     r0,r0,#0x74           ;327
000158  6800              LDR      r0,[r0,#0]            ;327
00015a  f0200001          BIC      r0,r0,#1              ;327
00015e  4909              LDR      r1,|L3.388|
000160  3174              ADDS     r1,r1,#0x74           ;327
000162  6008              STR      r0,[r1,#0]            ;327
000164  4608              MOV      r0,r1                 ;330
000166  6800              LDR      r0,[r0,#0]            ;330
000168  f0407080          ORR      r0,r0,#0x1000000      ;330
00016c  6008              STR      r0,[r1,#0]            ;330
00016e  4807              LDR      r0,|L3.396|
000170  4907              LDR      r1,|L3.400|
000172  6008              STR      r0,[r1,#0]            ;333  ; SystemCoreClock
000174  200f              MOVS     r0,#0xf               ;336
000176  f7fffffe          BL       HAL_InitTick
00017a  b108              CBZ      r0,|L3.384|
00017c  2001              MOVS     r0,#1                 ;338
00017e  e750              B        |L3.34|
                  |L3.384|
000180  2000              MOVS     r0,#0                 ;342
000182  e74e              B        |L3.34|
;;;345    
                          ENDP

                  |L3.388|
                          DCD      0x40023800
                  |L3.392|
                          DCD      0x24003010
                  |L3.396|
                          DCD      0x00f42400
                  |L3.400|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_DisableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DisableCSS PROC
;;;962      */
;;;963    void HAL_RCC_DisableCSS(void)
000000  4803              LDR      r0,|L4.16|
;;;964    {
;;;965      CLEAR_BIT(RCC->CR, RCC_CR_CSSON);
000002  6800              LDR      r0,[r0,#0]
000004  f4202000          BIC      r0,r0,#0x80000
000008  4901              LDR      r1,|L4.16|
00000a  6008              STR      r0,[r1,#0]
;;;966    }
00000c  4770              BX       lr
;;;967    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0x40023800

                          AREA ||i.HAL_RCC_EnableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_EnableCSS PROC
;;;953      */
;;;954    void HAL_RCC_EnableCSS(void)
000000  4803              LDR      r0,|L5.16|
;;;955    {
;;;956      SET_BIT(RCC->CR, RCC_CR_CSSON);
000002  6800              LDR      r0,[r0,#0]
000004  f4402000          ORR      r0,r0,#0x80000
000008  4901              LDR      r1,|L5.16|
00000a  6008              STR      r0,[r1,#0]
;;;957    }
00000c  4770              BX       lr
;;;958    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0x40023800

                          AREA ||i.HAL_RCC_GetClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetClockConfig PROC
;;;1169     */
;;;1170   void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
000000  220f              MOVS     r2,#0xf
;;;1171   {
;;;1172     /* Set all possible values for the Clock type parameter --------------------*/
;;;1173     RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
000002  6002              STR      r2,[r0,#0]
;;;1174   
;;;1175     /* Get the SYSCLK configuration --------------------------------------------*/
;;;1176     RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
000004  4a0d              LDR      r2,|L6.60|
000006  6812              LDR      r2,[r2,#0]
000008  f0020203          AND      r2,r2,#3
00000c  6042              STR      r2,[r0,#4]
;;;1177   
;;;1178     /* Get the HCLK configuration ----------------------------------------------*/
;;;1179     RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
00000e  4a0b              LDR      r2,|L6.60|
000010  6812              LDR      r2,[r2,#0]
000012  f00202f0          AND      r2,r2,#0xf0
000016  6082              STR      r2,[r0,#8]
;;;1180   
;;;1181     /* Get the APB1 configuration ----------------------------------------------*/
;;;1182     RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
000018  4a08              LDR      r2,|L6.60|
00001a  6812              LDR      r2,[r2,#0]
00001c  f40252e0          AND      r2,r2,#0x1c00
000020  60c2              STR      r2,[r0,#0xc]
;;;1183   
;;;1184     /* Get the APB2 configuration ----------------------------------------------*/
;;;1185     RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
000022  4a06              LDR      r2,|L6.60|
000024  6812              LDR      r2,[r2,#0]
000026  f4024260          AND      r2,r2,#0xe000
00002a  08d2              LSRS     r2,r2,#3
00002c  6102              STR      r2,[r0,#0x10]
;;;1186   
;;;1187     /* Get the Flash Wait State (Latency) configuration ------------------------*/
;;;1188     *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
00002e  4a04              LDR      r2,|L6.64|
000030  6812              LDR      r2,[r2,#0]
000032  f002020f          AND      r2,r2,#0xf
000036  600a              STR      r2,[r1,#0]
;;;1189   }
000038  4770              BX       lr
;;;1190   
                          ENDP

00003a  0000              DCW      0x0000
                  |L6.60|
                          DCD      0x40023808
                  |L6.64|
                          DCD      0x40023c00

                          AREA ||i.HAL_RCC_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetHCLKFreq PROC
;;;1051     */
;;;1052   uint32_t HAL_RCC_GetHCLKFreq(void)
000000  4801              LDR      r0,|L7.8|
;;;1053   {
;;;1054     return SystemCoreClock;
000002  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;1055   }
000004  4770              BX       lr
;;;1056   
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_GetOscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetOscConfig PROC
;;;1087     */
;;;1088   void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  210f              MOVS     r1,#0xf
;;;1089   {
;;;1090     /* Set all possible values for the Oscillator type parameter ---------------*/
;;;1091     RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
000002  6001              STR      r1,[r0,#0]
;;;1092   
;;;1093     /* Get the HSE configuration -----------------------------------------------*/
;;;1094     if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
000004  4940              LDR      r1,|L8.264|
000006  6809              LDR      r1,[r1,#0]
000008  f4012180          AND      r1,r1,#0x40000
00000c  f5b12f80          CMP      r1,#0x40000
000010  d103              BNE      |L8.26|
;;;1095     {
;;;1096       RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
000012  f44f21a0          MOV      r1,#0x50000
000016  6041              STR      r1,[r0,#4]
000018  e00c              B        |L8.52|
                  |L8.26|
;;;1097     }
;;;1098     else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
00001a  493b              LDR      r1,|L8.264|
00001c  6809              LDR      r1,[r1,#0]
00001e  f4013180          AND      r1,r1,#0x10000
000022  f5b13f80          CMP      r1,#0x10000
000026  d103              BNE      |L8.48|
;;;1099     {
;;;1100       RCC_OscInitStruct->HSEState = RCC_HSE_ON;
000028  f44f3180          MOV      r1,#0x10000
00002c  6041              STR      r1,[r0,#4]
00002e  e001              B        |L8.52|
                  |L8.48|
;;;1101     }
;;;1102     else
;;;1103     {
;;;1104       RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
000030  2100              MOVS     r1,#0
000032  6041              STR      r1,[r0,#4]
                  |L8.52|
;;;1105     }
;;;1106   
;;;1107     /* Get the HSI configuration -----------------------------------------------*/
;;;1108     if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
000034  4934              LDR      r1,|L8.264|
000036  6809              LDR      r1,[r1,#0]
000038  f0010101          AND      r1,r1,#1
00003c  b111              CBZ      r1,|L8.68|
;;;1109     {
;;;1110       RCC_OscInitStruct->HSIState = RCC_HSI_ON;
00003e  2101              MOVS     r1,#1
000040  60c1              STR      r1,[r0,#0xc]
000042  e001              B        |L8.72|
                  |L8.68|
;;;1111     }
;;;1112     else
;;;1113     {
;;;1114       RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
000044  2100              MOVS     r1,#0
000046  60c1              STR      r1,[r0,#0xc]
                  |L8.72|
;;;1115     }
;;;1116   
;;;1117     RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
000048  492f              LDR      r1,|L8.264|
00004a  6809              LDR      r1,[r1,#0]
00004c  f3c101c4          UBFX     r1,r1,#3,#5
000050  6101              STR      r1,[r0,#0x10]
;;;1118   
;;;1119     /* Get the LSE configuration -----------------------------------------------*/
;;;1120     if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
000052  492d              LDR      r1,|L8.264|
000054  3170              ADDS     r1,r1,#0x70
000056  6809              LDR      r1,[r1,#0]
000058  f0010104          AND      r1,r1,#4
00005c  2904              CMP      r1,#4
00005e  d102              BNE      |L8.102|
;;;1121     {
;;;1122       RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
000060  2105              MOVS     r1,#5
000062  6081              STR      r1,[r0,#8]
000064  e00a              B        |L8.124|
                  |L8.102|
;;;1123     }
;;;1124     else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
000066  4928              LDR      r1,|L8.264|
000068  3170              ADDS     r1,r1,#0x70
00006a  6809              LDR      r1,[r1,#0]
00006c  f0010101          AND      r1,r1,#1
000070  b111              CBZ      r1,|L8.120|
;;;1125     {
;;;1126       RCC_OscInitStruct->LSEState = RCC_LSE_ON;
000072  2101              MOVS     r1,#1
000074  6081              STR      r1,[r0,#8]
000076  e001              B        |L8.124|
                  |L8.120|
;;;1127     }
;;;1128     else
;;;1129     {
;;;1130       RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
000078  2100              MOVS     r1,#0
00007a  6081              STR      r1,[r0,#8]
                  |L8.124|
;;;1131     }
;;;1132   
;;;1133     /* Get the LSI configuration -----------------------------------------------*/
;;;1134     if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
00007c  4922              LDR      r1,|L8.264|
00007e  3174              ADDS     r1,r1,#0x74
000080  6809              LDR      r1,[r1,#0]
000082  f0010101          AND      r1,r1,#1
000086  b111              CBZ      r1,|L8.142|
;;;1135     {
;;;1136       RCC_OscInitStruct->LSIState = RCC_LSI_ON;
000088  2101              MOVS     r1,#1
00008a  6141              STR      r1,[r0,#0x14]
00008c  e001              B        |L8.146|
                  |L8.142|
;;;1137     }
;;;1138     else
;;;1139     {
;;;1140       RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
00008e  2100              MOVS     r1,#0
000090  6141              STR      r1,[r0,#0x14]
                  |L8.146|
;;;1141     }
;;;1142   
;;;1143     /* Get the PLL configuration -----------------------------------------------*/
;;;1144     if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
000092  491d              LDR      r1,|L8.264|
000094  6809              LDR      r1,[r1,#0]
000096  f0017180          AND      r1,r1,#0x1000000
00009a  f1b17f80          CMP      r1,#0x1000000
00009e  d102              BNE      |L8.166|
;;;1145     {
;;;1146       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
0000a0  2102              MOVS     r1,#2
0000a2  6181              STR      r1,[r0,#0x18]
0000a4  e001              B        |L8.170|
                  |L8.166|
;;;1147     }
;;;1148     else
;;;1149     {
;;;1150       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
0000a6  2101              MOVS     r1,#1
0000a8  6181              STR      r1,[r0,#0x18]
                  |L8.170|
;;;1151     }
;;;1152     RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
0000aa  4917              LDR      r1,|L8.264|
0000ac  1d09              ADDS     r1,r1,#4
0000ae  6809              LDR      r1,[r1,#0]
0000b0  f4010280          AND      r2,r1,#0x400000
0000b4  61c2              STR      r2,[r0,#0x1c]
;;;1153     RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
0000b6  4914              LDR      r1,|L8.264|
0000b8  1d09              ADDS     r1,r1,#4
0000ba  6809              LDR      r1,[r1,#0]
0000bc  f001023f          AND      r2,r1,#0x3f
0000c0  6202              STR      r2,[r0,#0x20]
;;;1154     RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
0000c2  4911              LDR      r1,|L8.264|
0000c4  1d09              ADDS     r1,r1,#4
0000c6  6809              LDR      r1,[r1,#0]
0000c8  f3c11288          UBFX     r2,r1,#6,#9
0000cc  6242              STR      r2,[r0,#0x24]
;;;1155     RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1) >> RCC_PLLCFGR_PLLP_Pos);
0000ce  490e              LDR      r1,|L8.264|
0000d0  1d09              ADDS     r1,r1,#4
0000d2  6809              LDR      r1,[r1,#0]
0000d4  f4013140          AND      r1,r1,#0x30000
0000d8  f5013180          ADD      r1,r1,#0x10000
0000dc  0bca              LSRS     r2,r1,#15
0000de  6282              STR      r2,[r0,#0x28]
;;;1156     RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
0000e0  4909              LDR      r1,|L8.264|
0000e2  1d09              ADDS     r1,r1,#4
0000e4  6809              LDR      r1,[r1,#0]
0000e6  f3c16203          UBFX     r2,r1,#24,#4
0000ea  62c2              STR      r2,[r0,#0x2c]
;;;1157   #if defined (RCC_PLLCFGR_PLLR)
;;;1158     RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
0000ec  4906              LDR      r1,|L8.264|
0000ee  1d09              ADDS     r1,r1,#4
0000f0  6809              LDR      r1,[r1,#0]
0000f2  f00141e0          AND      r1,r1,#0x70000000
0000f6  f04f42e0          MOV      r2,#0x70000000
0000fa  fa92f2a2          RBIT     r2,r2
0000fe  fab2f282          CLZ      r2,r2
000102  40d1              LSRS     r1,r1,r2
000104  6301              STR      r1,[r0,#0x30]
;;;1159   #endif
;;;1160   }
000106  4770              BX       lr
;;;1161   
                          ENDP

                  |L8.264|
                          DCD      0x40023800

                          AREA ||i.HAL_RCC_GetPCLK1Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK1Freq PROC
;;;1062     */
;;;1063   uint32_t HAL_RCC_GetPCLK1Freq(void)
000000  b500              PUSH     {lr}
;;;1064   {
;;;1065     /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
;;;1066     return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4904              LDR      r1,|L9.24|
000008  6809              LDR      r1,[r1,#0]
00000a  f3c12182          UBFX     r1,r1,#10,#3
00000e  4a03              LDR      r2,|L9.28|
000010  5c51              LDRB     r1,[r2,r1]
000012  40c8              LSRS     r0,r0,r1
;;;1067   }
000014  bd00              POP      {pc}
;;;1068   
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0x40023808
                  |L9.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetPCLK2Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK2Freq PROC
;;;1074     */
;;;1075   uint32_t HAL_RCC_GetPCLK2Freq(void)
000000  b500              PUSH     {lr}
;;;1076   {
;;;1077     /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
;;;1078     return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4904              LDR      r1,|L10.24|
000008  6809              LDR      r1,[r1,#0]
00000a  f3c13142          UBFX     r1,r1,#13,#3
00000e  4a03              LDR      r2,|L10.28|
000010  5c51              LDRB     r1,[r2,r1]
000012  40c8              LSRS     r0,r0,r1
;;;1079   }
000014  bd00              POP      {pc}
;;;1080   
                          ENDP

000016  0000              DCW      0x0000
                  |L10.24|
                          DCD      0x40023808
                  |L10.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetSysClockFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetSysClockFreq PROC
;;;997      */
;;;998    uint32_t HAL_RCC_GetSysClockFreq(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;999    {
;;;1000     uint32_t pllm = 0, pllvco = 0, pllp = 0;
000004  2400              MOVS     r4,#0
000006  2500              MOVS     r5,#0
000008  2600              MOVS     r6,#0
;;;1001     uint32_t sysclockfreq = 0;
00000a  46a1              MOV      r9,r4
;;;1002   
;;;1003     /* Get SYSCLK source -------------------------------------------------------*/
;;;1004     switch (RCC->CFGR & RCC_CFGR_SWS)
00000c  4825              LDR      r0,|L11.164|
00000e  6800              LDR      r0,[r0,#0]
000010  f000000c          AND      r0,r0,#0xc
000014  b120              CBZ      r0,|L11.32|
000016  2804              CMP      r0,#4
000018  d005              BEQ      |L11.38|
00001a  2808              CMP      r0,#8
00001c  d13a              BNE      |L11.148|
00001e  e005              B        |L11.44|
                  |L11.32|
;;;1005     {
;;;1006       case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
;;;1007       {
;;;1008         sysclockfreq = HSI_VALUE;
000020  f8df9084          LDR      r9,|L11.168|
;;;1009          break;
000024  e039              B        |L11.154|
                  |L11.38|
;;;1010       }
;;;1011       case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
;;;1012       {
;;;1013         sysclockfreq = HSE_VALUE;
000026  f8df9084          LDR      r9,|L11.172|
;;;1014         break;
00002a  e036              B        |L11.154|
                  |L11.44|
;;;1015       }
;;;1016       case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
;;;1017       {
;;;1018         /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
;;;1019         SYSCLK = PLL_VCO / PLLP */
;;;1020         pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00002c  481d              LDR      r0,|L11.164|
00002e  1f00              SUBS     r0,r0,#4
000030  6800              LDR      r0,[r0,#0]
000032  f000043f          AND      r4,r0,#0x3f
;;;1021         if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
000036  481b              LDR      r0,|L11.164|
000038  1f00              SUBS     r0,r0,#4
00003a  6800              LDR      r0,[r0,#0]
00003c  f4000080          AND      r0,r0,#0x400000
000040  b178              CBZ      r0,|L11.98|
;;;1022         {
;;;1023           /* HSE used as PLL clock source */
;;;1024           pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
000042  481a              LDR      r0,|L11.172|
000044  4917              LDR      r1,|L11.164|
000046  1f09              SUBS     r1,r1,#4
000048  6809              LDR      r1,[r1,#0]
00004a  f3c11188          UBFX     r1,r1,#6,#9
00004e  fba07001          UMULL    r7,r0,r0,r1
000052  4601              MOV      r1,r0
000054  4622              MOV      r2,r4
000056  2300              MOVS     r3,#0
000058  4638              MOV      r0,r7
00005a  f7fffffe          BL       __aeabi_uldivmod
00005e  4605              MOV      r5,r0
000060  e00e              B        |L11.128|
                  |L11.98|
;;;1025         }
;;;1026         else
;;;1027         {
;;;1028           /* HSI used as PLL clock source */
;;;1029           pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
000062  4811              LDR      r0,|L11.168|
000064  490f              LDR      r1,|L11.164|
000066  1f09              SUBS     r1,r1,#4
000068  6809              LDR      r1,[r1,#0]
00006a  f3c11188          UBFX     r1,r1,#6,#9
00006e  fba07001          UMULL    r7,r0,r0,r1
000072  4601              MOV      r1,r0
000074  4622              MOV      r2,r4
000076  2300              MOVS     r3,#0
000078  4638              MOV      r0,r7
00007a  f7fffffe          BL       __aeabi_uldivmod
00007e  4605              MOV      r5,r0
                  |L11.128|
;;;1030         }
;;;1031         pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
000080  4808              LDR      r0,|L11.164|
000082  1f00              SUBS     r0,r0,#4
000084  6800              LDR      r0,[r0,#0]
000086  f3c04001          UBFX     r0,r0,#16,#2
00008a  1c40              ADDS     r0,r0,#1
00008c  0046              LSLS     r6,r0,#1
;;;1032   
;;;1033         sysclockfreq = pllvco/pllp;
00008e  fbb5f9f6          UDIV     r9,r5,r6
;;;1034         break;
000092  e002              B        |L11.154|
                  |L11.148|
;;;1035       }
;;;1036       default:
;;;1037       {
;;;1038         sysclockfreq = HSI_VALUE;
000094  f8df9010          LDR      r9,|L11.168|
;;;1039         break;
000098  bf00              NOP      
                  |L11.154|
00009a  bf00              NOP                            ;1009
;;;1040       }
;;;1041     }
;;;1042     return sysclockfreq;
00009c  4648              MOV      r0,r9
;;;1043   }
00009e  e8bd87f0          POP      {r4-r10,pc}
;;;1044   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L11.164|
                          DCD      0x40023808
                  |L11.168|
                          DCD      0x00f42400
                  |L11.172|
                          DCD      0x017d7840

                          AREA ||i.HAL_RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_MCOConfig PROC
;;;899      */
;;;900    void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
000000  b570              PUSH     {r4-r6,lr}
;;;901    {
000002  b086              SUB      sp,sp,#0x18
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;902      GPIO_InitTypeDef GPIO_InitStruct;
;;;903      /* Check the parameters */
;;;904      assert_param(IS_RCC_MCO(RCC_MCOx));
;;;905      assert_param(IS_RCC_MCODIV(RCC_MCODiv));
;;;906      /* RCC_MCO1 */
;;;907      if(RCC_MCOx == RCC_MCO1)
00000a  bb36              CBNZ     r6,|L12.90|
;;;908      {
;;;909        assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
;;;910    
;;;911        /* MCO1 Clock Enable */
;;;912        MCO1_CLK_ENABLE();
00000c  bf00              NOP      
00000e  4827              LDR      r0,|L12.172|
000010  6800              LDR      r0,[r0,#0]
000012  f0400001          ORR      r0,r0,#1
000016  4925              LDR      r1,|L12.172|
000018  6008              STR      r0,[r1,#0]
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]
00001e  f0000001          AND      r0,r0,#1
000022  9000              STR      r0,[sp,#0]
000024  bf00              NOP      
000026  bf00              NOP      
;;;913    
;;;914        /* Configure the MCO1 pin in alternate function mode */
;;;915        GPIO_InitStruct.Pin = MCO1_PIN;
000028  1588              ASRS     r0,r1,#22
00002a  9001              STR      r0,[sp,#4]
;;;916        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
00002c  2002              MOVS     r0,#2
00002e  9002              STR      r0,[sp,#8]
;;;917        GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
000030  2003              MOVS     r0,#3
000032  9004              STR      r0,[sp,#0x10]
;;;918        GPIO_InitStruct.Pull = GPIO_NOPULL;
000034  2000              MOVS     r0,#0
000036  9003              STR      r0,[sp,#0xc]
;;;919        GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
000038  9005              STR      r0,[sp,#0x14]
;;;920        HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
00003a  a901              ADD      r1,sp,#4
00003c  481c              LDR      r0,|L12.176|
00003e  f7fffffe          BL       HAL_GPIO_Init
;;;921    
;;;922        /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
;;;923        MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
000042  481a              LDR      r0,|L12.172|
000044  3828              SUBS     r0,r0,#0x28
000046  6800              LDR      r0,[r0,#0]
000048  f02060ec          BIC      r0,r0,#0x7600000
00004c  ea440105          ORR      r1,r4,r5
000050  4308              ORRS     r0,r0,r1
000052  4916              LDR      r1,|L12.172|
000054  3928              SUBS     r1,r1,#0x28
000056  6008              STR      r0,[r1,#0]
000058  e025              B        |L12.166|
                  |L12.90|
;;;924      }
;;;925      else
;;;926      {
;;;927        assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
;;;928    
;;;929        /* MCO2 Clock Enable */
;;;930        MCO2_CLK_ENABLE();
00005a  bf00              NOP      
00005c  4813              LDR      r0,|L12.172|
00005e  6800              LDR      r0,[r0,#0]
000060  f0400004          ORR      r0,r0,#4
000064  4911              LDR      r1,|L12.172|
000066  6008              STR      r0,[r1,#0]
000068  4608              MOV      r0,r1
00006a  6800              LDR      r0,[r0,#0]
00006c  f0000004          AND      r0,r0,#4
000070  9000              STR      r0,[sp,#0]
000072  bf00              NOP      
000074  bf00              NOP      
;;;931    
;;;932        /* Configure the MCO2 pin in alternate function mode */
;;;933        GPIO_InitStruct.Pin = MCO2_PIN;
000076  1548              ASRS     r0,r1,#21
000078  9001              STR      r0,[sp,#4]
;;;934        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
00007a  2002              MOVS     r0,#2
00007c  9002              STR      r0,[sp,#8]
;;;935        GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
00007e  2003              MOVS     r0,#3
000080  9004              STR      r0,[sp,#0x10]
;;;936        GPIO_InitStruct.Pull = GPIO_NOPULL;
000082  2000              MOVS     r0,#0
000084  9003              STR      r0,[sp,#0xc]
;;;937        GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
000086  9005              STR      r0,[sp,#0x14]
;;;938        HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
000088  a901              ADD      r1,sp,#4
00008a  480a              LDR      r0,|L12.180|
00008c  f7fffffe          BL       HAL_GPIO_Init
;;;939    
;;;940        /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
;;;941        MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
000090  4806              LDR      r0,|L12.172|
000092  3828              SUBS     r0,r0,#0x28
000094  6800              LDR      r0,[r0,#0]
000096  f0204078          BIC      r0,r0,#0xf8000000
00009a  ea4401c5          ORR      r1,r4,r5,LSL #3
00009e  4308              ORRS     r0,r0,r1
0000a0  4902              LDR      r1,|L12.172|
0000a2  3928              SUBS     r1,r1,#0x28
0000a4  6008              STR      r0,[r1,#0]
                  |L12.166|
;;;942      }
;;;943    }
0000a6  b006              ADD      sp,sp,#0x18
0000a8  bd70              POP      {r4-r6,pc}
;;;944    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L12.172|
                          DCD      0x40023830
                  |L12.176|
                          DCD      0x40020000
                  |L12.180|
                          DCD      0x40020800

                          AREA ||i.HAL_RCC_NMI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RCC_NMI_IRQHandler PROC
;;;1195     */
;;;1196   void HAL_RCC_NMI_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1197   {
;;;1198     /* Check RCC CSSF flag  */
;;;1199     if(__HAL_RCC_GET_IT(RCC_IT_CSS))
000002  4806              LDR      r0,|L13.28|
000004  6800              LDR      r0,[r0,#0]
000006  f0000080          AND      r0,r0,#0x80
00000a  2880              CMP      r0,#0x80
00000c  d105              BNE      |L13.26|
;;;1200     {
;;;1201       /* RCC Clock Security System interrupt user callback */
;;;1202       HAL_RCC_CSSCallback();
00000e  f7fffffe          BL       HAL_RCC_CSSCallback
;;;1203   
;;;1204       /* Clear RCC CSS pending bit */
;;;1205       __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
000012  2080              MOVS     r0,#0x80
000014  4901              LDR      r1,|L13.28|
000016  1c89              ADDS     r1,r1,#2
000018  7008              STRB     r0,[r1,#0]
                  |L13.26|
;;;1206     }
;;;1207   }
00001a  bd10              POP      {r4,pc}
;;;1208   
                          ENDP

                  |L13.28|
                          DCD      0x4002380c

                          AREA ||i.HAL_RCC_OscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_OscConfig PROC
;;;359      */
;;;360    HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b5f8              PUSH     {r3-r7,lr}
;;;361    {
000002  4604              MOV      r4,r0
;;;362      uint32_t tickstart;
;;;363      FlagStatus pwrclkchanged = RESET;
000004  2600              MOVS     r6,#0
;;;364    
;;;365      /* Check Null pointer */
;;;366      if(RCC_OscInitStruct == NULL)
000006  b90c              CBNZ     r4,|L14.12|
;;;367      {
;;;368        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L14.10|
;;;369      }
;;;370    
;;;371      /* Check the parameters */
;;;372      assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;373    
;;;374      /*------------------------------- HSE Configuration ------------------------*/
;;;375      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
;;;376      {
;;;377        /* Check the parameters */
;;;378        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;379        /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
;;;380        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
;;;381           || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
;;;382        {
;;;383          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
;;;384          {
;;;385            return HAL_ERROR;
;;;386          }
;;;387        }
;;;388        else
;;;389        {
;;;390          /* Set the new HSE configuration ---------------------------------------*/
;;;391          __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
;;;392    
;;;393          /* Check the HSE State */
;;;394          if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
;;;395          {
;;;396            /* Get Start Tick*/
;;;397            tickstart = HAL_GetTick();
;;;398    
;;;399            /* Wait till HSE is ready */
;;;400            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;401            {
;;;402              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;403              {
;;;404                return HAL_TIMEOUT;
;;;405              }
;;;406            }
;;;407          }
;;;408          else
;;;409          {
;;;410            /* Get Start Tick*/
;;;411            tickstart = HAL_GetTick();
;;;412    
;;;413            /* Wait till HSE is bypassed or disabled */
;;;414            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;415            {
;;;416               if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;417              {
;;;418                return HAL_TIMEOUT;
;;;419              }
;;;420            }
;;;421          }
;;;422        }
;;;423      }
;;;424      /*----------------------------- HSI Configuration --------------------------*/
;;;425      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
;;;426      {
;;;427        /* Check the parameters */
;;;428        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;429        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;430    
;;;431        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
;;;432        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
;;;433           || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
;;;434        {
;;;435          /* When HSI is used as system clock it will not disabled */
;;;436          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;437          {
;;;438            return HAL_ERROR;
;;;439          }
;;;440          /* Otherwise, just the calibration is allowed */
;;;441          else
;;;442          {
;;;443            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;444            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;445          }
;;;446        }
;;;447        else
;;;448        {
;;;449          /* Check the HSI State */
;;;450          if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
;;;451          {
;;;452            /* Enable the Internal High Speed oscillator (HSI). */
;;;453            __HAL_RCC_HSI_ENABLE();
;;;454    
;;;455            /* Get Start Tick*/
;;;456            tickstart = HAL_GetTick();
;;;457    
;;;458            /* Wait till HSI is ready */
;;;459            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;460            {
;;;461              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;462              {
;;;463                return HAL_TIMEOUT;
;;;464              }
;;;465            }
;;;466    
;;;467            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;468            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;469          }
;;;470          else
;;;471          {
;;;472            /* Disable the Internal High Speed oscillator (HSI). */
;;;473            __HAL_RCC_HSI_DISABLE();
;;;474    
;;;475            /* Get Start Tick*/
;;;476            tickstart = HAL_GetTick();
;;;477    
;;;478            /* Wait till HSI is ready */
;;;479            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
;;;480            {
;;;481              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;482              {
;;;483                return HAL_TIMEOUT;
;;;484              }
;;;485            }
;;;486          }
;;;487        }
;;;488      }
;;;489      /*------------------------------ LSI Configuration -------------------------*/
;;;490      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;491      {
;;;492        /* Check the parameters */
;;;493        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;494    
;;;495        /* Check the LSI State */
;;;496        if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
;;;497        {
;;;498          /* Enable the Internal Low Speed oscillator (LSI). */
;;;499          __HAL_RCC_LSI_ENABLE();
;;;500    
;;;501          /* Get Start Tick*/
;;;502          tickstart = HAL_GetTick();
;;;503    
;;;504          /* Wait till LSI is ready */
;;;505          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;506          {
;;;507            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;508            {
;;;509              return HAL_TIMEOUT;
;;;510            }
;;;511          }
;;;512        }
;;;513        else
;;;514        {
;;;515          /* Disable the Internal Low Speed oscillator (LSI). */
;;;516          __HAL_RCC_LSI_DISABLE();
;;;517    
;;;518          /* Get Start Tick*/
;;;519          tickstart = HAL_GetTick();
;;;520    
;;;521          /* Wait till LSI is ready */
;;;522          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;523          {
;;;524            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;525            {
;;;526              return HAL_TIMEOUT;
;;;527            }
;;;528          }
;;;529        }
;;;530      }
;;;531      /*------------------------------ LSE Configuration -------------------------*/
;;;532      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;533      {
;;;534        /* Check the parameters */
;;;535        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;536    
;;;537        /* Update LSE configuration in Backup Domain control register    */
;;;538        /* Requires to enable write access to Backup Domain of necessary */
;;;539        if(__HAL_RCC_PWR_IS_CLK_DISABLED())
;;;540        {
;;;541          /* Enable Power Clock*/
;;;542          __HAL_RCC_PWR_CLK_ENABLE();
;;;543          pwrclkchanged = SET;
;;;544        }
;;;545    
;;;546        if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
;;;547        {
;;;548          /* Enable write access to Backup domain */
;;;549          PWR->CR1 |= PWR_CR1_DBP;
;;;550    
;;;551          /* Wait for Backup domain Write protection disable */
;;;552          tickstart = HAL_GetTick();
;;;553    
;;;554          while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
;;;555          {
;;;556            if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
;;;557            {
;;;558              return HAL_TIMEOUT;
;;;559            }
;;;560          }
;;;561        }
;;;562    
;;;563        /* Set the new LSE configuration -----------------------------------------*/
;;;564        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;565        /* Check the LSE State */
;;;566        if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
;;;567        {
;;;568          /* Get Start Tick*/
;;;569          tickstart = HAL_GetTick();
;;;570    
;;;571          /* Wait till LSE is ready */
;;;572          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;573          {
;;;574            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;575            {
;;;576              return HAL_TIMEOUT;
;;;577            }
;;;578          }
;;;579        }
;;;580        else
;;;581        {
;;;582          /* Get Start Tick*/
;;;583          tickstart = HAL_GetTick();
;;;584    
;;;585          /* Wait till LSE is ready */
;;;586          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;587          {
;;;588            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;589            {
;;;590              return HAL_TIMEOUT;
;;;591            }
;;;592          }
;;;593        }
;;;594    
;;;595        /* Restore clock configuration if changed */
;;;596        if(pwrclkchanged == SET)
;;;597        {
;;;598          __HAL_RCC_PWR_CLK_DISABLE();
;;;599        }
;;;600      }
;;;601      /*-------------------------------- PLL Configuration -----------------------*/
;;;602      /* Check the parameters */
;;;603      assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;604      if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;605      {
;;;606        /* Check if the PLL is used as system clock or not */
;;;607        if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;608        {
;;;609          if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;610          {
;;;611            /* Check the parameters */
;;;612            assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;613            assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
;;;614            assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
;;;615            assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
;;;616            assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
;;;617    #if defined (RCC_PLLCFGR_PLLR)
;;;618            assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
;;;619    #endif
;;;620    
;;;621            /* Disable the main PLL. */
;;;622            __HAL_RCC_PLL_DISABLE();
;;;623    
;;;624            /* Get Start Tick*/
;;;625            tickstart = HAL_GetTick();
;;;626    
;;;627            /* Wait till PLL is ready */
;;;628            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;629            {
;;;630              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;631              {
;;;632                return HAL_TIMEOUT;
;;;633              }
;;;634            }
;;;635    
;;;636            /* Configure the main PLL clock source, multiplication and division factors. */
;;;637    #if defined (RCC_PLLCFGR_PLLR)
;;;638            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
;;;639                                 RCC_OscInitStruct->PLL.PLLM,
;;;640                                 RCC_OscInitStruct->PLL.PLLN,
;;;641                                 RCC_OscInitStruct->PLL.PLLP,
;;;642                                 RCC_OscInitStruct->PLL.PLLQ,
;;;643                                 RCC_OscInitStruct->PLL.PLLR);
;;;644    #else
;;;645            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
;;;646                                 RCC_OscInitStruct->PLL.PLLM,
;;;647                                 RCC_OscInitStruct->PLL.PLLN,
;;;648                                 RCC_OscInitStruct->PLL.PLLP,
;;;649                                 RCC_OscInitStruct->PLL.PLLQ);
;;;650    #endif
;;;651    
;;;652            /* Enable the main PLL. */
;;;653            __HAL_RCC_PLL_ENABLE();
;;;654    
;;;655            /* Get Start Tick*/
;;;656            tickstart = HAL_GetTick();
;;;657    
;;;658            /* Wait till PLL is ready */
;;;659            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;660            {
;;;661              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;662              {
;;;663                return HAL_TIMEOUT;
;;;664              }
;;;665            }
;;;666          }
;;;667          else
;;;668          {
;;;669            /* Disable the main PLL. */
;;;670            __HAL_RCC_PLL_DISABLE();
;;;671    
;;;672            /* Get Start Tick*/
;;;673            tickstart = HAL_GetTick();
;;;674    
;;;675            /* Wait till PLL is ready */
;;;676            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;677            {
;;;678              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;679              {
;;;680                return HAL_TIMEOUT;
;;;681              }
;;;682            }
;;;683          }
;;;684        }
;;;685        else
;;;686        {
;;;687          return HAL_ERROR;
;;;688        }
;;;689      }
;;;690      return HAL_OK;
;;;691    }
00000a  bdf8              POP      {r3-r7,pc}
                  |L14.12|
00000c  7820              LDRB     r0,[r4,#0]            ;375
00000e  f0000001          AND      r0,r0,#1              ;375
000012  2800              CMP      r0,#0                 ;375
000014  d071              BEQ      |L14.250|
000016  48f8              LDR      r0,|L14.1016|
000018  6800              LDR      r0,[r0,#0]            ;380
00001a  f000000c          AND      r0,r0,#0xc            ;380
00001e  2804              CMP      r0,#4                 ;380
000020  d00d              BEQ      |L14.62|
000022  48f5              LDR      r0,|L14.1016|
000024  6800              LDR      r0,[r0,#0]            ;381
000026  f000000c          AND      r0,r0,#0xc            ;381
00002a  2808              CMP      r0,#8                 ;381
00002c  d113              BNE      |L14.86|
00002e  48f2              LDR      r0,|L14.1016|
000030  1f00              SUBS     r0,r0,#4              ;381
000032  6800              LDR      r0,[r0,#0]            ;381
000034  f4000080          AND      r0,r0,#0x400000       ;381
000038  f5b00f80          CMP      r0,#0x400000          ;381
00003c  d10b              BNE      |L14.86|
                  |L14.62|
00003e  48ee              LDR      r0,|L14.1016|
000040  3808              SUBS     r0,r0,#8              ;383
000042  6800              LDR      r0,[r0,#0]            ;383
000044  f3c04040          UBFX     r0,r0,#17,#1          ;383
000048  2800              CMP      r0,#0                 ;383
00004a  d069              BEQ      |L14.288|
00004c  6860              LDR      r0,[r4,#4]            ;383
00004e  2800              CMP      r0,#0                 ;383
000050  d166              BNE      |L14.288|
000052  2001              MOVS     r0,#1                 ;385
000054  e7d9              B        |L14.10|
                  |L14.86|
000056  bf00              NOP                            ;391
000058  6860              LDR      r0,[r4,#4]            ;391
00005a  f5b03f80          CMP      r0,#0x10000           ;391
00005e  d108              BNE      |L14.114|
000060  48e5              LDR      r0,|L14.1016|
000062  3808              SUBS     r0,r0,#8              ;391
000064  6800              LDR      r0,[r0,#0]            ;391
000066  f4403080          ORR      r0,r0,#0x10000        ;391
00006a  49e3              LDR      r1,|L14.1016|
00006c  3908              SUBS     r1,r1,#8              ;391
00006e  6008              STR      r0,[r1,#0]            ;391
000070  e02e              B        |L14.208|
                  |L14.114|
000072  6860              LDR      r0,[r4,#4]            ;391
000074  b968              CBNZ     r0,|L14.146|
000076  48e0              LDR      r0,|L14.1016|
000078  3808              SUBS     r0,r0,#8              ;391
00007a  6800              LDR      r0,[r0,#0]            ;391
00007c  f4203080          BIC      r0,r0,#0x10000        ;391
000080  49dd              LDR      r1,|L14.1016|
000082  3908              SUBS     r1,r1,#8              ;391
000084  6008              STR      r0,[r1,#0]            ;391
000086  4608              MOV      r0,r1                 ;391
000088  6800              LDR      r0,[r0,#0]            ;391
00008a  f4202080          BIC      r0,r0,#0x40000        ;391
00008e  6008              STR      r0,[r1,#0]            ;391
000090  e01e              B        |L14.208|
                  |L14.146|
000092  6860              LDR      r0,[r4,#4]            ;391
000094  f5b02fa0          CMP      r0,#0x50000           ;391
000098  d10d              BNE      |L14.182|
00009a  48d7              LDR      r0,|L14.1016|
00009c  3808              SUBS     r0,r0,#8              ;391
00009e  6800              LDR      r0,[r0,#0]            ;391
0000a0  f4402080          ORR      r0,r0,#0x40000        ;391
0000a4  49d4              LDR      r1,|L14.1016|
0000a6  3908              SUBS     r1,r1,#8              ;391
0000a8  6008              STR      r0,[r1,#0]            ;391
0000aa  4608              MOV      r0,r1                 ;391
0000ac  6800              LDR      r0,[r0,#0]            ;391
0000ae  f4403080          ORR      r0,r0,#0x10000        ;391
0000b2  6008              STR      r0,[r1,#0]            ;391
0000b4  e00c              B        |L14.208|
                  |L14.182|
0000b6  48d0              LDR      r0,|L14.1016|
0000b8  3808              SUBS     r0,r0,#8              ;391
0000ba  6800              LDR      r0,[r0,#0]            ;391
0000bc  f4203080          BIC      r0,r0,#0x10000        ;391
0000c0  49cd              LDR      r1,|L14.1016|
0000c2  3908              SUBS     r1,r1,#8              ;391
0000c4  6008              STR      r0,[r1,#0]            ;391
0000c6  4608              MOV      r0,r1                 ;391
0000c8  6800              LDR      r0,[r0,#0]            ;391
0000ca  f4202080          BIC      r0,r0,#0x40000        ;391
0000ce  6008              STR      r0,[r1,#0]            ;391
                  |L14.208|
0000d0  bf00              NOP                            ;391
0000d2  6860              LDR      r0,[r4,#4]            ;394
0000d4  b190              CBZ      r0,|L14.252|
0000d6  f7fffffe          BL       HAL_GetTick
0000da  4605              MOV      r5,r0                 ;397
0000dc  e006              B        |L14.236|
                  |L14.222|
0000de  f7fffffe          BL       HAL_GetTick
0000e2  1b40              SUBS     r0,r0,r5              ;402
0000e4  2864              CMP      r0,#0x64              ;402
0000e6  d901              BLS      |L14.236|
0000e8  2003              MOVS     r0,#3                 ;404
0000ea  e78e              B        |L14.10|
                  |L14.236|
0000ec  48c2              LDR      r0,|L14.1016|
0000ee  3808              SUBS     r0,r0,#8              ;400
0000f0  6800              LDR      r0,[r0,#0]            ;400
0000f2  f3c04040          UBFX     r0,r0,#17,#1          ;400
0000f6  2800              CMP      r0,#0                 ;400
0000f8  d0f1              BEQ      |L14.222|
                  |L14.250|
0000fa  e011              B        |L14.288|
                  |L14.252|
0000fc  f7fffffe          BL       HAL_GetTick
000100  4605              MOV      r5,r0                 ;411
000102  e006              B        |L14.274|
                  |L14.260|
000104  f7fffffe          BL       HAL_GetTick
000108  1b40              SUBS     r0,r0,r5              ;416
00010a  2864              CMP      r0,#0x64              ;416
00010c  d901              BLS      |L14.274|
00010e  2003              MOVS     r0,#3                 ;418
000110  e77b              B        |L14.10|
                  |L14.274|
000112  48b9              LDR      r0,|L14.1016|
000114  3808              SUBS     r0,r0,#8              ;414
000116  6800              LDR      r0,[r0,#0]            ;414
000118  f3c04040          UBFX     r0,r0,#17,#1          ;414
00011c  2800              CMP      r0,#0                 ;414
00011e  d1f1              BNE      |L14.260|
                  |L14.288|
000120  7820              LDRB     r0,[r4,#0]            ;425
000122  f0000002          AND      r0,r0,#2              ;425
000126  2802              CMP      r0,#2                 ;425
000128  d169              BNE      |L14.510|
00012a  48b3              LDR      r0,|L14.1016|
00012c  6800              LDR      r0,[r0,#0]            ;432
00012e  f000000c          AND      r0,r0,#0xc            ;432
000132  b158              CBZ      r0,|L14.332|
000134  48b0              LDR      r0,|L14.1016|
000136  6800              LDR      r0,[r0,#0]            ;433
000138  f000000c          AND      r0,r0,#0xc            ;433
00013c  2808              CMP      r0,#8                 ;433
00013e  d11c              BNE      |L14.378|
000140  48ad              LDR      r0,|L14.1016|
000142  1f00              SUBS     r0,r0,#4              ;433
000144  6800              LDR      r0,[r0,#0]            ;433
000146  f4000080          AND      r0,r0,#0x400000       ;433
00014a  b9b0              CBNZ     r0,|L14.378|
                  |L14.332|
00014c  48aa              LDR      r0,|L14.1016|
00014e  3808              SUBS     r0,r0,#8              ;436
000150  6800              LDR      r0,[r0,#0]            ;436
000152  f3c00040          UBFX     r0,r0,#1,#1           ;436
000156  b120              CBZ      r0,|L14.354|
000158  68e0              LDR      r0,[r4,#0xc]          ;436
00015a  2801              CMP      r0,#1                 ;436
00015c  d001              BEQ      |L14.354|
00015e  2001              MOVS     r0,#1                 ;438
000160  e753              B        |L14.10|
                  |L14.354|
000162  48a5              LDR      r0,|L14.1016|
000164  3808              SUBS     r0,r0,#8              ;444
000166  6800              LDR      r0,[r0,#0]            ;444
000168  f02000f8          BIC      r0,r0,#0xf8           ;444
00016c  6921              LDR      r1,[r4,#0x10]         ;444
00016e  ea4000c1          ORR      r0,r0,r1,LSL #3       ;444
000172  49a1              LDR      r1,|L14.1016|
000174  3908              SUBS     r1,r1,#8              ;444
000176  6008              STR      r0,[r1,#0]            ;444
000178  e041              B        |L14.510|
                  |L14.378|
00017a  68e0              LDR      r0,[r4,#0xc]          ;450
00017c  b328              CBZ      r0,|L14.458|
00017e  489e              LDR      r0,|L14.1016|
000180  3808              SUBS     r0,r0,#8              ;453
000182  6800              LDR      r0,[r0,#0]            ;453
000184  f0400001          ORR      r0,r0,#1              ;453
000188  499b              LDR      r1,|L14.1016|
00018a  3908              SUBS     r1,r1,#8              ;453
00018c  6008              STR      r0,[r1,#0]            ;453
00018e  f7fffffe          BL       HAL_GetTick
000192  4605              MOV      r5,r0                 ;456
000194  e006              B        |L14.420|
                  |L14.406|
000196  f7fffffe          BL       HAL_GetTick
00019a  1b40              SUBS     r0,r0,r5              ;461
00019c  2802              CMP      r0,#2                 ;461
00019e  d901              BLS      |L14.420|
0001a0  2003              MOVS     r0,#3                 ;463
0001a2  e732              B        |L14.10|
                  |L14.420|
0001a4  4894              LDR      r0,|L14.1016|
0001a6  3808              SUBS     r0,r0,#8              ;459
0001a8  6800              LDR      r0,[r0,#0]            ;459
0001aa  f3c00040          UBFX     r0,r0,#1,#1           ;459
0001ae  2800              CMP      r0,#0                 ;459
0001b0  d0f1              BEQ      |L14.406|
0001b2  4891              LDR      r0,|L14.1016|
0001b4  3808              SUBS     r0,r0,#8              ;468
0001b6  6800              LDR      r0,[r0,#0]            ;468
0001b8  f02000f8          BIC      r0,r0,#0xf8           ;468
0001bc  6921              LDR      r1,[r4,#0x10]         ;468
0001be  ea4000c1          ORR      r0,r0,r1,LSL #3       ;468
0001c2  498d              LDR      r1,|L14.1016|
0001c4  3908              SUBS     r1,r1,#8              ;468
0001c6  6008              STR      r0,[r1,#0]            ;468
0001c8  e019              B        |L14.510|
                  |L14.458|
0001ca  488b              LDR      r0,|L14.1016|
0001cc  3808              SUBS     r0,r0,#8              ;473
0001ce  6800              LDR      r0,[r0,#0]            ;473
0001d0  f0200001          BIC      r0,r0,#1              ;473
0001d4  4988              LDR      r1,|L14.1016|
0001d6  3908              SUBS     r1,r1,#8              ;473
0001d8  6008              STR      r0,[r1,#0]            ;473
0001da  f7fffffe          BL       HAL_GetTick
0001de  4605              MOV      r5,r0                 ;476
0001e0  e006              B        |L14.496|
                  |L14.482|
0001e2  f7fffffe          BL       HAL_GetTick
0001e6  1b40              SUBS     r0,r0,r5              ;481
0001e8  2802              CMP      r0,#2                 ;481
0001ea  d901              BLS      |L14.496|
0001ec  2003              MOVS     r0,#3                 ;483
0001ee  e70c              B        |L14.10|
                  |L14.496|
0001f0  4881              LDR      r0,|L14.1016|
0001f2  3808              SUBS     r0,r0,#8              ;479
0001f4  6800              LDR      r0,[r0,#0]            ;479
0001f6  f3c00040          UBFX     r0,r0,#1,#1           ;479
0001fa  2800              CMP      r0,#0                 ;479
0001fc  d1f1              BNE      |L14.482|
                  |L14.510|
0001fe  7820              LDRB     r0,[r4,#0]            ;490
000200  f0000008          AND      r0,r0,#8              ;490
000204  2808              CMP      r0,#8                 ;490
000206  d136              BNE      |L14.630|
000208  6960              LDR      r0,[r4,#0x14]         ;496
00020a  b1d0              CBZ      r0,|L14.578|
00020c  487a              LDR      r0,|L14.1016|
00020e  306c              ADDS     r0,r0,#0x6c           ;499
000210  6800              LDR      r0,[r0,#0]            ;499
000212  f0400001          ORR      r0,r0,#1              ;499
000216  4978              LDR      r1,|L14.1016|
000218  316c              ADDS     r1,r1,#0x6c           ;499
00021a  6008              STR      r0,[r1,#0]            ;499
00021c  f7fffffe          BL       HAL_GetTick
000220  4605              MOV      r5,r0                 ;502
000222  e006              B        |L14.562|
                  |L14.548|
000224  f7fffffe          BL       HAL_GetTick
000228  1b40              SUBS     r0,r0,r5              ;507
00022a  2802              CMP      r0,#2                 ;507
00022c  d901              BLS      |L14.562|
00022e  2003              MOVS     r0,#3                 ;509
000230  e6eb              B        |L14.10|
                  |L14.562|
000232  4871              LDR      r0,|L14.1016|
000234  306c              ADDS     r0,r0,#0x6c           ;505
000236  6800              LDR      r0,[r0,#0]            ;505
000238  f3c00040          UBFX     r0,r0,#1,#1           ;505
00023c  2800              CMP      r0,#0                 ;505
00023e  d0f1              BEQ      |L14.548|
000240  e019              B        |L14.630|
                  |L14.578|
000242  486d              LDR      r0,|L14.1016|
000244  306c              ADDS     r0,r0,#0x6c           ;516
000246  6800              LDR      r0,[r0,#0]            ;516
000248  f0200001          BIC      r0,r0,#1              ;516
00024c  496a              LDR      r1,|L14.1016|
00024e  316c              ADDS     r1,r1,#0x6c           ;516
000250  6008              STR      r0,[r1,#0]            ;516
000252  f7fffffe          BL       HAL_GetTick
000256  4605              MOV      r5,r0                 ;519
000258  e006              B        |L14.616|
                  |L14.602|
00025a  f7fffffe          BL       HAL_GetTick
00025e  1b40              SUBS     r0,r0,r5              ;524
000260  2802              CMP      r0,#2                 ;524
000262  d901              BLS      |L14.616|
000264  2003              MOVS     r0,#3                 ;526
000266  e6d0              B        |L14.10|
                  |L14.616|
000268  4863              LDR      r0,|L14.1016|
00026a  306c              ADDS     r0,r0,#0x6c           ;522
00026c  6800              LDR      r0,[r0,#0]            ;522
00026e  f3c00040          UBFX     r0,r0,#1,#1           ;522
000272  2800              CMP      r0,#0                 ;522
000274  d1f1              BNE      |L14.602|
                  |L14.630|
000276  7820              LDRB     r0,[r4,#0]            ;532
000278  f0000004          AND      r0,r0,#4              ;532
00027c  2804              CMP      r0,#4                 ;532
00027e  d174              BNE      |L14.874|
000280  485d              LDR      r0,|L14.1016|
000282  3038              ADDS     r0,r0,#0x38           ;539
000284  6800              LDR      r0,[r0,#0]            ;539
000286  f0005080          AND      r0,r0,#0x10000000     ;539
00028a  b980              CBNZ     r0,|L14.686|
00028c  bf00              NOP                            ;542
00028e  485a              LDR      r0,|L14.1016|
000290  3038              ADDS     r0,r0,#0x38           ;542
000292  6800              LDR      r0,[r0,#0]            ;542
000294  f0405080          ORR      r0,r0,#0x10000000     ;542
000298  4957              LDR      r1,|L14.1016|
00029a  3138              ADDS     r1,r1,#0x38           ;542
00029c  6008              STR      r0,[r1,#0]            ;542
00029e  4608              MOV      r0,r1                 ;542
0002a0  6800              LDR      r0,[r0,#0]            ;542
0002a2  f0005080          AND      r0,r0,#0x10000000     ;542
0002a6  9000              STR      r0,[sp,#0]            ;542
0002a8  bf00              NOP                            ;542
0002aa  bf00              NOP                            ;542
0002ac  2601              MOVS     r6,#1                 ;543
                  |L14.686|
0002ae  4853              LDR      r0,|L14.1020|
0002b0  6800              LDR      r0,[r0,#0]            ;546
0002b2  f4007080          AND      r0,r0,#0x100          ;546
0002b6  b9b0              CBNZ     r0,|L14.742|
0002b8  4850              LDR      r0,|L14.1020|
0002ba  6800              LDR      r0,[r0,#0]            ;549
0002bc  f4407080          ORR      r0,r0,#0x100          ;549
0002c0  494e              LDR      r1,|L14.1020|
0002c2  6008              STR      r0,[r1,#0]            ;549
0002c4  f7fffffe          BL       HAL_GetTick
0002c8  4605              MOV      r5,r0                 ;552
0002ca  e006              B        |L14.730|
                  |L14.716|
0002cc  f7fffffe          BL       HAL_GetTick
0002d0  1b40              SUBS     r0,r0,r5              ;556
0002d2  2864              CMP      r0,#0x64              ;556
0002d4  d901              BLS      |L14.730|
0002d6  2003              MOVS     r0,#3                 ;558
0002d8  e697              B        |L14.10|
                  |L14.730|
0002da  4848              LDR      r0,|L14.1020|
0002dc  6800              LDR      r0,[r0,#0]            ;554
0002de  f4007080          AND      r0,r0,#0x100          ;554
0002e2  2800              CMP      r0,#0                 ;554
0002e4  d0f2              BEQ      |L14.716|
                  |L14.742|
0002e6  bf00              NOP                            ;564
0002e8  68a0              LDR      r0,[r4,#8]            ;564
0002ea  2801              CMP      r0,#1                 ;564
0002ec  d108              BNE      |L14.768|
0002ee  4842              LDR      r0,|L14.1016|
0002f0  3068              ADDS     r0,r0,#0x68           ;564
0002f2  6800              LDR      r0,[r0,#0]            ;564
0002f4  f0400001          ORR      r0,r0,#1              ;564
0002f8  493f              LDR      r1,|L14.1016|
0002fa  3168              ADDS     r1,r1,#0x68           ;564
0002fc  6008              STR      r0,[r1,#0]            ;564
0002fe  e02d              B        |L14.860|
                  |L14.768|
000300  68a0              LDR      r0,[r4,#8]            ;564
000302  b968              CBNZ     r0,|L14.800|
000304  483c              LDR      r0,|L14.1016|
000306  3068              ADDS     r0,r0,#0x68           ;564
000308  6800              LDR      r0,[r0,#0]            ;564
00030a  f0200001          BIC      r0,r0,#1              ;564
00030e  493a              LDR      r1,|L14.1016|
000310  3168              ADDS     r1,r1,#0x68           ;564
000312  6008              STR      r0,[r1,#0]            ;564
000314  4608              MOV      r0,r1                 ;564
000316  6800              LDR      r0,[r0,#0]            ;564
000318  f0200004          BIC      r0,r0,#4              ;564
00031c  6008              STR      r0,[r1,#0]            ;564
00031e  e01d              B        |L14.860|
                  |L14.800|
000320  68a0              LDR      r0,[r4,#8]            ;564
000322  2805              CMP      r0,#5                 ;564
000324  d10d              BNE      |L14.834|
000326  4834              LDR      r0,|L14.1016|
000328  3068              ADDS     r0,r0,#0x68           ;564
00032a  6800              LDR      r0,[r0,#0]            ;564
00032c  f0400004          ORR      r0,r0,#4              ;564
000330  4931              LDR      r1,|L14.1016|
000332  3168              ADDS     r1,r1,#0x68           ;564
000334  6008              STR      r0,[r1,#0]            ;564
000336  4608              MOV      r0,r1                 ;564
000338  6800              LDR      r0,[r0,#0]            ;564
00033a  f0400001          ORR      r0,r0,#1              ;564
00033e  6008              STR      r0,[r1,#0]            ;564
000340  e00c              B        |L14.860|
                  |L14.834|
000342  482d              LDR      r0,|L14.1016|
000344  3068              ADDS     r0,r0,#0x68           ;564
000346  6800              LDR      r0,[r0,#0]            ;564
000348  f0200001          BIC      r0,r0,#1              ;564
00034c  492a              LDR      r1,|L14.1016|
00034e  3168              ADDS     r1,r1,#0x68           ;564
000350  6008              STR      r0,[r1,#0]            ;564
000352  4608              MOV      r0,r1                 ;564
000354  6800              LDR      r0,[r0,#0]            ;564
000356  f0200004          BIC      r0,r0,#4              ;564
00035a  6008              STR      r0,[r1,#0]            ;564
                  |L14.860|
00035c  bf00              NOP                            ;564
00035e  68a0              LDR      r0,[r4,#8]            ;566
000360  b1a8              CBZ      r0,|L14.910|
000362  f7fffffe          BL       HAL_GetTick
000366  4605              MOV      r5,r0                 ;569
000368  e009              B        |L14.894|
                  |L14.874|
00036a  e02e              B        |L14.970|
                  |L14.876|
00036c  f7fffffe          BL       HAL_GetTick
000370  1b40              SUBS     r0,r0,r5              ;574
000372  f2413188          MOV      r1,#0x1388            ;574
000376  4288              CMP      r0,r1                 ;574
000378  d901              BLS      |L14.894|
00037a  2003              MOVS     r0,#3                 ;576
00037c  e645              B        |L14.10|
                  |L14.894|
00037e  481e              LDR      r0,|L14.1016|
000380  3068              ADDS     r0,r0,#0x68           ;572
000382  6800              LDR      r0,[r0,#0]            ;572
000384  f3c00040          UBFX     r0,r0,#1,#1           ;572
000388  2800              CMP      r0,#0                 ;572
00038a  d0ef              BEQ      |L14.876|
00038c  e013              B        |L14.950|
                  |L14.910|
00038e  f7fffffe          BL       HAL_GetTick
000392  4605              MOV      r5,r0                 ;583
000394  e008              B        |L14.936|
                  |L14.918|
000396  f7fffffe          BL       HAL_GetTick
00039a  1b40              SUBS     r0,r0,r5              ;588
00039c  f2413188          MOV      r1,#0x1388            ;588
0003a0  4288              CMP      r0,r1                 ;588
0003a2  d901              BLS      |L14.936|
0003a4  2003              MOVS     r0,#3                 ;590
0003a6  e630              B        |L14.10|
                  |L14.936|
0003a8  4813              LDR      r0,|L14.1016|
0003aa  3068              ADDS     r0,r0,#0x68           ;586
0003ac  6800              LDR      r0,[r0,#0]            ;586
0003ae  f3c00040          UBFX     r0,r0,#1,#1           ;586
0003b2  2800              CMP      r0,#0                 ;586
0003b4  d1ef              BNE      |L14.918|
                  |L14.950|
0003b6  2e01              CMP      r6,#1                 ;596
0003b8  d107              BNE      |L14.970|
0003ba  480f              LDR      r0,|L14.1016|
0003bc  3038              ADDS     r0,r0,#0x38           ;598
0003be  6800              LDR      r0,[r0,#0]            ;598
0003c0  f0205080          BIC      r0,r0,#0x10000000     ;598
0003c4  490c              LDR      r1,|L14.1016|
0003c6  3138              ADDS     r1,r1,#0x38           ;598
0003c8  6008              STR      r0,[r1,#0]            ;598
                  |L14.970|
0003ca  69a0              LDR      r0,[r4,#0x18]         ;604
0003cc  b3f0              CBZ      r0,|L14.1100|
0003ce  480a              LDR      r0,|L14.1016|
0003d0  6800              LDR      r0,[r0,#0]            ;607
0003d2  f000000c          AND      r0,r0,#0xc            ;607
0003d6  2808              CMP      r0,#8                 ;607
0003d8  d068              BEQ      |L14.1196|
0003da  69a0              LDR      r0,[r4,#0x18]         ;609
0003dc  2802              CMP      r0,#2                 ;609
0003de  d14d              BNE      |L14.1148|
0003e0  4805              LDR      r0,|L14.1016|
0003e2  3808              SUBS     r0,r0,#8              ;622
0003e4  6800              LDR      r0,[r0,#0]            ;622
0003e6  f0207080          BIC      r0,r0,#0x1000000      ;622
0003ea  4903              LDR      r1,|L14.1016|
0003ec  3908              SUBS     r1,r1,#8              ;622
0003ee  6008              STR      r0,[r1,#0]            ;622
0003f0  f7fffffe          BL       HAL_GetTick
0003f4  4605              MOV      r5,r0                 ;625
0003f6  e00a              B        |L14.1038|
                  |L14.1016|
                          DCD      0x40023808
                  |L14.1020|
                          DCD      0x40007000
                  |L14.1024|
000400  f7fffffe          BL       HAL_GetTick
000404  1b40              SUBS     r0,r0,r5              ;630
000406  2802              CMP      r0,#2                 ;630
000408  d901              BLS      |L14.1038|
00040a  2003              MOVS     r0,#3                 ;632
00040c  e5fd              B        |L14.10|
                  |L14.1038|
00040e  4829              LDR      r0,|L14.1204|
000410  6800              LDR      r0,[r0,#0]            ;628
000412  f3c06040          UBFX     r0,r0,#25,#1          ;628
000416  2800              CMP      r0,#0                 ;628
000418  d1f2              BNE      |L14.1024|
00041a  e9d40107          LDRD     r0,r1,[r4,#0x1c]      ;638
00041e  4308              ORRS     r0,r0,r1              ;638
000420  6a61              LDR      r1,[r4,#0x24]         ;638
000422  ea401181          ORR      r1,r0,r1,LSL #6       ;638
000426  2201              MOVS     r2,#1                 ;638
000428  6aa0              LDR      r0,[r4,#0x28]         ;638
00042a  ebc20050          RSB      r0,r2,r0,LSR #1       ;638
00042e  ea414100          ORR      r1,r1,r0,LSL #16      ;638
000432  202c              MOVS     r0,#0x2c              ;638
000434  5d00              LDRB     r0,[r0,r4]            ;638
000436  ea416100          ORR      r1,r1,r0,LSL #24      ;638
00043a  2030              MOVS     r0,#0x30              ;638
00043c  5d00              LDRB     r0,[r0,r4]            ;638
00043e  ea417000          ORR      r0,r1,r0,LSL #28      ;638
000442  491c              LDR      r1,|L14.1204|
000444  1d09              ADDS     r1,r1,#4              ;638
000446  6008              STR      r0,[r1,#0]            ;638
000448  1f08              SUBS     r0,r1,#4              ;653
00044a  e000              B        |L14.1102|
                  |L14.1100|
00044c  e030              B        |L14.1200|
                  |L14.1102|
00044e  6800              LDR      r0,[r0,#0]            ;653
000450  f0407080          ORR      r0,r0,#0x1000000      ;653
000454  1f09              SUBS     r1,r1,#4              ;653
000456  6008              STR      r0,[r1,#0]            ;653
000458  f7fffffe          BL       HAL_GetTick
00045c  4605              MOV      r5,r0                 ;656
00045e  e006              B        |L14.1134|
                  |L14.1120|
000460  f7fffffe          BL       HAL_GetTick
000464  1b40              SUBS     r0,r0,r5              ;661
000466  2802              CMP      r0,#2                 ;661
000468  d901              BLS      |L14.1134|
00046a  2003              MOVS     r0,#3                 ;663
00046c  e5cd              B        |L14.10|
                  |L14.1134|
00046e  4811              LDR      r0,|L14.1204|
000470  6800              LDR      r0,[r0,#0]            ;659
000472  f3c06040          UBFX     r0,r0,#25,#1          ;659
000476  2800              CMP      r0,#0                 ;659
000478  d0f2              BEQ      |L14.1120|
00047a  e019              B        |L14.1200|
                  |L14.1148|
00047c  480d              LDR      r0,|L14.1204|
00047e  6800              LDR      r0,[r0,#0]            ;670
000480  f0207080          BIC      r0,r0,#0x1000000      ;670
000484  490b              LDR      r1,|L14.1204|
000486  6008              STR      r0,[r1,#0]            ;670
000488  f7fffffe          BL       HAL_GetTick
00048c  4605              MOV      r5,r0                 ;673
00048e  e006              B        |L14.1182|
                  |L14.1168|
000490  f7fffffe          BL       HAL_GetTick
000494  1b40              SUBS     r0,r0,r5              ;678
000496  2802              CMP      r0,#2                 ;678
000498  d901              BLS      |L14.1182|
00049a  2003              MOVS     r0,#3                 ;680
00049c  e5b5              B        |L14.10|
                  |L14.1182|
00049e  4805              LDR      r0,|L14.1204|
0004a0  6800              LDR      r0,[r0,#0]            ;676
0004a2  f3c06040          UBFX     r0,r0,#25,#1          ;676
0004a6  2800              CMP      r0,#0                 ;676
0004a8  d1f2              BNE      |L14.1168|
0004aa  e001              B        |L14.1200|
                  |L14.1196|
0004ac  2001              MOVS     r0,#1                 ;687
0004ae  e5ac              B        |L14.10|
                  |L14.1200|
0004b0  2000              MOVS     r0,#0                 ;690
0004b2  e5aa              B        |L14.10|
;;;692    
                          ENDP

                  |L14.1204|
                          DCD      0x40023800

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F7_V1.11.0\\Drivers\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_rcc_c_b7071a4b____REV16|
#line 464 "D:\\Program_Files_x86\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f7xx_hal_rcc_c_b7071a4b____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_rcc_c_b7071a4b____REVSH|
#line 479
|__asm___19_stm32f7xx_hal_rcc_c_b7071a4b____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_rcc_c_b7071a4b____RRX|
#line 666
|__asm___19_stm32f7xx_hal_rcc_c_b7071a4b____RRX| PROC
#line 667

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
