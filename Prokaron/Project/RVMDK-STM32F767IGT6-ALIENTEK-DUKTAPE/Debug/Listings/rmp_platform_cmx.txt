; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\rmp_platform_cmx.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\rmp_platform_cmx.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(D)_Duktape\duktape\src -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-DUKTAPE\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DDUK_USE_BYTEORDER=1 --enum_is_int --signed_chars --omf_browse=.\debug\output\rmp_platform_cmx.crf ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx.c]
                          THUMB

                          AREA ||i.RMP_Putchar||, CODE, READONLY, ALIGN=2

                  RMP_Putchar PROC
;;;91     ******************************************************************************/
;;;92     void RMP_Putchar(char Char)
000000  bf00              NOP      
;;;93     {
;;;94         RMP_CMX_PUTCHAR(Char);
000002  4905              LDR      r1,|L1.24|
000004  6288              STR      r0,[r1,#0x28]
000006  bf00              NOP      
                  |L1.8|
000008  4903              LDR      r1,|L1.24|
00000a  69c9              LDR      r1,[r1,#0x1c]
00000c  f0010140          AND      r1,r1,#0x40
000010  2900              CMP      r1,#0
000012  d0f9              BEQ      |L1.8|
000014  bf00              NOP      
;;;95     }
000016  4770              BX       lr
;;;96     /* End Function:RMP_Putchar **************************************************/
                          ENDP

                  |L1.24|
                          DCD      0x40011000

                          AREA ||i.SCB_EnableDCache||, CODE, READONLY, ALIGN=2

                  SCB_EnableDCache PROC
;;;2264     */
;;;2265   __STATIC_INLINE void SCB_EnableDCache (void)
000000  b510              PUSH     {r4,lr}
;;;2266   {
;;;2267     #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
;;;2268       uint32_t ccsidr;
;;;2269       uint32_t sets;
;;;2270       uint32_t ways;
;;;2271   
;;;2272       SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
000002  2300              MOVS     r3,#0
000004  4c23              LDR      r4,|L2.148|
000006  6023              STR      r3,[r4,#0]
;;;2273       __DSB();
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  bf00              NOP      
00000e  f3bf8f4f          DSB      
000012  bf00              NOP      
000014  bf00              NOP      
000016  bf00              NOP      
;;;2274   
;;;2275       ccsidr = SCB->CCSIDR;
000018  1f23              SUBS     r3,r4,#4
00001a  6818              LDR      r0,[r3,#0]
;;;2276   
;;;2277                                               /* invalidate D-Cache */
;;;2278       sets = (uint32_t)(CCSIDR_SETS(ccsidr));
00001c  f3c0314e          UBFX     r1,r0,#13,#15
;;;2279       do {
000020  bf00              NOP      
                  |L2.34|
;;;2280         ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
000022  f3c002c9          UBFX     r2,r0,#3,#10
;;;2281         do {
000026  bf00              NOP      
                  |L2.40|
;;;2282           SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
000028  f64373e0          MOV      r3,#0x3fe0
00002c  ea031341          AND      r3,r3,r1,LSL #5
000030  f04f4440          MOV      r4,#0xc0000000
000034  ea047482          AND      r4,r4,r2,LSL #30
000038  4323              ORRS     r3,r3,r4
00003a  4c17              LDR      r4,|L2.152|
00003c  6023              STR      r3,[r4,#0]
;;;2283                         ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
;;;2284           #if defined ( __CC_ARM )
;;;2285             __schedule_barrier();
00003e  bf00              NOP      
000040  bf00              NOP      
;;;2286           #endif
;;;2287         } while (ways-- != 0U);
000042  1e13              SUBS     r3,r2,#0
000044  f1a20201          SUB      r2,r2,#1
000048  d1ee              BNE      |L2.40|
;;;2288       } while(sets-- != 0U);
00004a  1e0b              SUBS     r3,r1,#0
00004c  f1a10101          SUB      r1,r1,#1
000050  d1e7              BNE      |L2.34|
;;;2289       __DSB();
000052  bf00              NOP      
000054  bf00              NOP      
000056  bf00              NOP      
000058  f3bf8f4f          DSB      
00005c  bf00              NOP      
00005e  bf00              NOP      
000060  bf00              NOP      
;;;2290   
;;;2291       SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
000062  4b0c              LDR      r3,|L2.148|
000064  3b70              SUBS     r3,r3,#0x70
000066  681b              LDR      r3,[r3,#0]
000068  f4433380          ORR      r3,r3,#0x10000
00006c  4c09              LDR      r4,|L2.148|
00006e  3c70              SUBS     r4,r4,#0x70
000070  6023              STR      r3,[r4,#0]
;;;2292   
;;;2293       __DSB();
000072  bf00              NOP      
000074  bf00              NOP      
000076  bf00              NOP      
000078  f3bf8f4f          DSB      
00007c  bf00              NOP      
00007e  bf00              NOP      
000080  bf00              NOP      
;;;2294       __ISB();
000082  bf00              NOP      
000084  bf00              NOP      
000086  bf00              NOP      
000088  f3bf8f6f          ISB      
00008c  bf00              NOP      
00008e  bf00              NOP      
000090  bf00              NOP      
;;;2295     #endif
;;;2296   }
000092  bd10              POP      {r4,pc}
;;;2297   
                          ENDP

                  |L2.148|
                          DCD      0xe000ed84
                  |L2.152|
                          DCD      0xe000ef60

                          AREA ||i.SCB_EnableICache||, CODE, READONLY, ALIGN=2

                  SCB_EnableICache PROC
;;;2212     */
;;;2213   __STATIC_INLINE void SCB_EnableICache (void)
000000  bf00              NOP      
;;;2214   {
;;;2215     #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
;;;2216       __DSB();
000002  bf00              NOP      
000004  bf00              NOP      
000006  f3bf8f4f          DSB      
00000a  bf00              NOP      
00000c  bf00              NOP      
00000e  bf00              NOP      
;;;2217       __ISB();
000010  bf00              NOP      
000012  bf00              NOP      
000014  bf00              NOP      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  bf00              NOP      
00001e  bf00              NOP      
;;;2218       SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
000020  2000              MOVS     r0,#0
000022  4914              LDR      r1,|L3.116|
000024  6008              STR      r0,[r1,#0]
;;;2219       __DSB();
000026  bf00              NOP      
000028  bf00              NOP      
00002a  bf00              NOP      
00002c  f3bf8f4f          DSB      
000030  bf00              NOP      
000032  bf00              NOP      
000034  bf00              NOP      
;;;2220       __ISB();
000036  bf00              NOP      
000038  bf00              NOP      
00003a  bf00              NOP      
00003c  f3bf8f6f          ISB      
000040  bf00              NOP      
000042  bf00              NOP      
000044  bf00              NOP      
;;;2221       SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
000046  480c              LDR      r0,|L3.120|
000048  6800              LDR      r0,[r0,#0]
00004a  f4403000          ORR      r0,r0,#0x20000
00004e  490a              LDR      r1,|L3.120|
000050  6008              STR      r0,[r1,#0]
;;;2222       __DSB();
000052  bf00              NOP      
000054  bf00              NOP      
000056  bf00              NOP      
000058  f3bf8f4f          DSB      
00005c  bf00              NOP      
00005e  bf00              NOP      
000060  bf00              NOP      
;;;2223       __ISB();
000062  bf00              NOP      
000064  bf00              NOP      
000066  bf00              NOP      
000068  f3bf8f6f          ISB      
00006c  bf00              NOP      
00006e  bf00              NOP      
000070  bf00              NOP      
;;;2224     #endif
;;;2225   }
000072  4770              BX       lr
;;;2226   
                          ENDP

                  |L3.116|
                          DCD      0xe000ef50
                  |L3.120|
                          DCD      0xe000ed14

                          AREA ||i._RMP_Low_Level_Init||, CODE, READONLY, ALIGN=2

                  _RMP_Low_Level_Init PROC
;;;65     ******************************************************************************/
;;;66     void _RMP_Low_Level_Init(void)
000000  b510              PUSH     {r4,lr}
;;;67     {    
000002  b0b6              SUB      sp,sp,#0xd8
;;;68         RMP_CMX_LOW_LEVEL_INIT();
000004  bf00              NOP      
000006  2134              MOVS     r1,#0x34
000008  a829              ADD      r0,sp,#0xa4
00000a  f7fffffe          BL       RMP_Clear
00000e  2114              MOVS     r1,#0x14
000010  a824              ADD      r0,sp,#0x90
000012  f7fffffe          BL       RMP_Clear
000016  2114              MOVS     r1,#0x14
000018  a81f              ADD      r0,sp,#0x7c
00001a  f7fffffe          BL       RMP_Clear
00001e  2178              MOVS     r1,#0x78
000020  a801              ADD      r0,sp,#4
000022  f7fffffe          BL       RMP_Clear
000026  bf00              NOP      
000028  48a2              LDR      r0,|L4.692|
00002a  6800              LDR      r0,[r0,#0]
00002c  f0405080          ORR      r0,r0,#0x10000000
000030  49a0              LDR      r1,|L4.692|
000032  6008              STR      r0,[r1,#0]
000034  4608              MOV      r0,r1
000036  6800              LDR      r0,[r0,#0]
000038  f0005080          AND      r0,r0,#0x10000000
00003c  9000              STR      r0,[sp,#0]
00003e  bf00              NOP      
000040  bf00              NOP      
000042  bf00              NOP      
000044  489c              LDR      r0,|L4.696|
000046  6800              LDR      r0,[r0,#0]
000048  f4404040          ORR      r0,r0,#0xc000
00004c  499a              LDR      r1,|L4.696|
00004e  6008              STR      r0,[r1,#0]
000050  4608              MOV      r0,r1
000052  6800              LDR      r0,[r0,#0]
000054  f4004040          AND      r0,r0,#0xc000
000058  9000              STR      r0,[sp,#0]
00005a  bf00              NOP      
00005c  bf00              NOP      
00005e  2001              MOVS     r0,#1
000060  9029              STR      r0,[sp,#0xa4]
000062  0400              LSLS     r0,r0,#16
000064  902a              STR      r0,[sp,#0xa8]
000066  2002              MOVS     r0,#2
000068  902f              STR      r0,[sp,#0xbc]
00006a  0541              LSLS     r1,r0,#21
00006c  a829              ADD      r0,sp,#0xa4
00006e  61c1              STR      r1,[r0,#0x1c]
000070  2119              MOVS     r1,#0x19
000072  6201              STR      r1,[r0,#0x20]
000074  f44f71d8          MOV      r1,#0x1b0
000078  6241              STR      r1,[r0,#0x24]
00007a  2102              MOVS     r1,#2
00007c  6281              STR      r1,[r0,#0x28]
00007e  2109              MOVS     r1,#9
000080  62c1              STR      r1,[r0,#0x2c]
000082  bf00              NOP      
000084  f7fffffe          BL       HAL_RCC_OscConfig
000088  b908              CBNZ     r0,|L4.142|
00008a  2001              MOVS     r0,#1
00008c  e000              B        |L4.144|
                  |L4.142|
00008e  2000              MOVS     r0,#0
                  |L4.144|
000090  2800              CMP      r0,#0
000092  d11c              BNE      |L4.206|
000094  a089              ADR      r0,|L4.700|
000096  f7fffffe          BL       RMP_Print_String
00009a  a092              ADR      r0,|L4.740|
00009c  f7fffffe          BL       RMP_Print_String
0000a0  a09d              ADR      r0,|L4.792|
0000a2  f7fffffe          BL       RMP_Print_String
0000a6  2044              MOVS     r0,#0x44
0000a8  f7fffffe          BL       RMP_Print_Int
0000ac  a09d              ADR      r0,|L4.804|
0000ae  f7fffffe          BL       RMP_Print_String
0000b2  a09d              ADR      r0,|L4.808|
0000b4  f7fffffe          BL       RMP_Print_String
0000b8  a09e              ADR      r0,|L4.820|
0000ba  f7fffffe          BL       RMP_Print_String
0000be  a09e              ADR      r0,|L4.824|
0000c0  f7fffffe          BL       RMP_Print_String
0000c4  a097              ADR      r0,|L4.804|
0000c6  f7fffffe          BL       RMP_Print_String
0000ca  bf00              NOP      
                  |L4.204|
0000cc  e7fe              B        |L4.204|
                  |L4.206|
0000ce  bf00              NOP      
0000d0  bf00              NOP      
0000d2  f7fffffe          BL       HAL_PWREx_EnableOverDrive
0000d6  b908              CBNZ     r0,|L4.220|
0000d8  2001              MOVS     r0,#1
0000da  e000              B        |L4.222|
                  |L4.220|
0000dc  2000              MOVS     r0,#0
                  |L4.222|
0000de  2800              CMP      r0,#0
0000e0  d11c              BNE      |L4.284|
0000e2  a076              ADR      r0,|L4.700|
0000e4  f7fffffe          BL       RMP_Print_String
0000e8  a07e              ADR      r0,|L4.740|
0000ea  f7fffffe          BL       RMP_Print_String
0000ee  a08a              ADR      r0,|L4.792|
0000f0  f7fffffe          BL       RMP_Print_String
0000f4  2044              MOVS     r0,#0x44
0000f6  f7fffffe          BL       RMP_Print_Int
0000fa  a08a              ADR      r0,|L4.804|
0000fc  f7fffffe          BL       RMP_Print_String
000100  a089              ADR      r0,|L4.808|
000102  f7fffffe          BL       RMP_Print_String
000106  a08b              ADR      r0,|L4.820|
000108  f7fffffe          BL       RMP_Print_String
00010c  a08a              ADR      r0,|L4.824|
00010e  f7fffffe          BL       RMP_Print_String
000112  a084              ADR      r0,|L4.804|
000114  f7fffffe          BL       RMP_Print_String
000118  bf00              NOP      
                  |L4.282|
00011a  e7fe              B        |L4.282|
                  |L4.284|
00011c  bf00              NOP      
00011e  200f              MOVS     r0,#0xf
000120  9024              STR      r0,[sp,#0x90]
000122  2002              MOVS     r0,#2
000124  9025              STR      r0,[sp,#0x94]
000126  2000              MOVS     r0,#0
000128  9026              STR      r0,[sp,#0x98]
00012a  f44f50a0          MOV      r0,#0x1400
00012e  9027              STR      r0,[sp,#0x9c]
000130  f44f5080          MOV      r0,#0x1000
000134  9028              STR      r0,[sp,#0xa0]
000136  bf00              NOP      
000138  2107              MOVS     r1,#7
00013a  a824              ADD      r0,sp,#0x90
00013c  f7fffffe          BL       HAL_RCC_ClockConfig
000140  b908              CBNZ     r0,|L4.326|
000142  2001              MOVS     r0,#1
000144  e000              B        |L4.328|
                  |L4.326|
000146  2000              MOVS     r0,#0
                  |L4.328|
000148  2800              CMP      r0,#0
00014a  d11c              BNE      |L4.390|
00014c  a05b              ADR      r0,|L4.700|
00014e  f7fffffe          BL       RMP_Print_String
000152  a064              ADR      r0,|L4.740|
000154  f7fffffe          BL       RMP_Print_String
000158  a06f              ADR      r0,|L4.792|
00015a  f7fffffe          BL       RMP_Print_String
00015e  2044              MOVS     r0,#0x44
000160  f7fffffe          BL       RMP_Print_Int
000164  a06f              ADR      r0,|L4.804|
000166  f7fffffe          BL       RMP_Print_String
00016a  a06f              ADR      r0,|L4.808|
00016c  f7fffffe          BL       RMP_Print_String
000170  a070              ADR      r0,|L4.820|
000172  f7fffffe          BL       RMP_Print_String
000176  a070              ADR      r0,|L4.824|
000178  f7fffffe          BL       RMP_Print_String
00017c  a069              ADR      r0,|L4.804|
00017e  f7fffffe          BL       RMP_Print_String
000182  bf00              NOP      
                  |L4.388|
000184  e7fe              B        |L4.388|
                  |L4.390|
000186  bf00              NOP      
000188  f7fffffe          BL       SCB_EnableICache
00018c  f7fffffe          BL       SCB_EnableDCache
000190  486c              LDR      r0,|L4.836|
000192  6800              LDR      r0,[r0,#0]
000194  f4407000          ORR      r0,r0,#0x200
000198  496a              LDR      r1,|L4.836|
00019a  6008              STR      r0,[r1,#0]
00019c  bf00              NOP      
00019e  4845              LDR      r0,|L4.692|
0001a0  3810              SUBS     r0,r0,#0x10
0001a2  6800              LDR      r0,[r0,#0]
0001a4  f0400001          ORR      r0,r0,#1
0001a8  4942              LDR      r1,|L4.692|
0001aa  3910              SUBS     r1,r1,#0x10
0001ac  6008              STR      r0,[r1,#0]
0001ae  4608              MOV      r0,r1
0001b0  6800              LDR      r0,[r0,#0]
0001b2  f0000001          AND      r0,r0,#1
0001b6  9000              STR      r0,[sp,#0]
0001b8  bf00              NOP      
0001ba  bf00              NOP      
0001bc  bf00              NOP      
0001be  483d              LDR      r0,|L4.692|
0001c0  1d00              ADDS     r0,r0,#4
0001c2  6800              LDR      r0,[r0,#0]
0001c4  f0400010          ORR      r0,r0,#0x10
0001c8  493a              LDR      r1,|L4.692|
0001ca  1d09              ADDS     r1,r1,#4
0001cc  6008              STR      r0,[r1,#0]
0001ce  4608              MOV      r0,r1
0001d0  6800              LDR      r0,[r0,#0]
0001d2  f0000010          AND      r0,r0,#0x10
0001d6  9000              STR      r0,[sp,#0]
0001d8  bf00              NOP      
0001da  bf00              NOP      
0001dc  1548              ASRS     r0,r1,#21
0001de  901f              STR      r0,[sp,#0x7c]
0001e0  2002              MOVS     r0,#2
0001e2  9020              STR      r0,[sp,#0x80]
0001e4  2001              MOVS     r0,#1
0001e6  9021              STR      r0,[sp,#0x84]
0001e8  2003              MOVS     r0,#3
0001ea  9022              STR      r0,[sp,#0x88]
0001ec  2007              MOVS     r0,#7
0001ee  9023              STR      r0,[sp,#0x8c]
0001f0  a91f              ADD      r1,sp,#0x7c
0001f2  4855              LDR      r0,|L4.840|
0001f4  f7fffffe          BL       HAL_GPIO_Init
0001f8  4854              LDR      r0,|L4.844|
0001fa  9001              STR      r0,[sp,#4]
0001fc  f44f30e1          MOV      r0,#0x1c200
000200  9002              STR      r0,[sp,#8]
000202  2100              MOVS     r1,#0
000204  9103              STR      r1,[sp,#0xc]
000206  9104              STR      r1,[sp,#0x10]
000208  9105              STR      r1,[sp,#0x14]
00020a  9107              STR      r1,[sp,#0x1c]
00020c  2108              MOVS     r1,#8
00020e  9106              STR      r1,[sp,#0x18]
000210  a801              ADD      r0,sp,#4
000212  f7fffffe          BL       HAL_UART_Init
000216  484e              LDR      r0,|L4.848|
000218  6800              LDR      r0,[r0,#0]
00021a  f44020e0          ORR      r0,r0,#0x70000
00021e  494c              LDR      r1,|L4.848|
000220  6008              STR      r0,[r1,#0]
000222  2005              MOVS     r0,#5
000224  4602              MOV      r2,r0
000226  4b4a              LDR      r3,|L4.848|
000228  3b18              SUBS     r3,r3,#0x18
00022a  6819              LDR      r1,[r3,#0]
00022c  f64f03ff          MOV      r3,#0xf8ff
000230  4019              ANDS     r1,r1,r3
000232  4b48              LDR      r3,|L4.852|
000234  430b              ORRS     r3,r3,r1
000236  ea432102          ORR      r1,r3,r2,LSL #8
00023a  4b45              LDR      r3,|L4.848|
00023c  3b18              SUBS     r3,r3,#0x18
00023e  6019              STR      r1,[r3,#0]
000240  bf00              NOP      
000242  21ff              MOVS     r1,#0xff
000244  4240              RSBS     r0,r0,#0
000246  f7fffffe          BL       __NVIC_SetPriority
00024a  21ff              MOVS     r1,#0xff
00024c  f06f0001          MVN      r0,#1
000250  f7fffffe          BL       __NVIC_SetPriority
000254  21ff              MOVS     r1,#0xff
000256  f04f30ff          MOV      r0,#0xffffffff
00025a  f7fffffe          BL       __NVIC_SetPriority
00025e  21ff              MOVS     r1,#0xff
000260  f06f000a          MVN      r0,#0xa
000264  f7fffffe          BL       __NVIC_SetPriority
000268  21ff              MOVS     r1,#0xff
00026a  f06f0009          MVN      r0,#9
00026e  f7fffffe          BL       __NVIC_SetPriority
000272  21ff              MOVS     r1,#0xff
000274  f06f0003          MVN      r0,#3
000278  f7fffffe          BL       __NVIC_SetPriority
00027c  f2454460          MOV      r4,#0x5460
000280  1e60              SUBS     r0,r4,#1
000282  f1b07f80          CMP      r0,#0x1000000
000286  d300              BCC      |L4.650|
000288  e00f              B        |L4.682|
                  |L4.650|
00028a  1e60              SUBS     r0,r4,#1
00028c  f04f21e0          MOV      r1,#0xe000e000
000290  6148              STR      r0,[r1,#0x14]
000292  210f              MOVS     r1,#0xf
000294  f04f30ff          MOV      r0,#0xffffffff
000298  f7fffffe          BL       __NVIC_SetPriority
00029c  2000              MOVS     r0,#0
00029e  f04f21e0          MOV      r1,#0xe000e000
0002a2  6188              STR      r0,[r1,#0x18]
0002a4  2007              MOVS     r0,#7
0002a6  6108              STR      r0,[r1,#0x10]
0002a8  bf00              NOP      
                  |L4.682|
0002aa  bf00              NOP      
;;;69       
;;;70         RMP_Disable_Int();
0002ac  f7fffffe          BL       RMP_Disable_Int
;;;71     }
0002b0  b036              ADD      sp,sp,#0xd8
0002b2  bd10              POP      {r4,pc}
;;;72     /* End Function:_RMP_Low_Level_Init ******************************************/
                          ENDP

                  |L4.692|
                          DCD      0x40023840
                  |L4.696|
                          DCD      0x40007000
                  |L4.700|
0002bc  0d0a2a2a          DCB      "\r\n***\r\nKernel panic - not syncing:\r\n",0
0002c0  2a0d0a4b
0002c4  65726e65
0002c8  6c207061
0002cc  6e696320
0002d0  2d206e6f
0002d4  74207379
0002d8  6e63696e
0002dc  673a0d0a
0002e0  00      
0002e1  00                DCB      0
0002e2  00                DCB      0
0002e3  00                DCB      0
                  |L4.740|
0002e4  2e2e5c2e          DCB      "..\\..\\MProkaron\\Platform\\CortexM\\rmp_platform_cmx."
0002e8  2e5c4d50
0002ec  726f6b61
0002f0  726f6e5c
0002f4  506c6174
0002f8  666f726d
0002fc  5c436f72
000300  7465784d
000304  5c726d70
000308  5f706c61
00030c  74666f72
000310  6d5f636d
000314  782e    
000316  6300              DCB      "c",0
                  |L4.792|
000318  202c204c          DCB      " , Line ",0
00031c  696e6520
000320  00      
000321  00                DCB      0
000322  00                DCB      0
000323  00                DCB      0
                  |L4.804|
000324  0d0a00            DCB      "\r\n",0
000327  00                DCB      0
                  |L4.808|
000328  4a756c20          DCB      "Jul 19 2018",0
00032c  31392032
000330  30313800
                  |L4.820|
000334  202c2000          DCB      " , ",0
                  |L4.824|
000338  31353a35          DCB      "15:52:31",0
00033c  323a3331
000340  00      
000341  00                DCB      0
000342  00                DCB      0
000343  00                DCB      0
                  |L4.836|
                          DCD      0x40023c00
                  |L4.840|
                          DCD      0x40020000
                  |L4.844|
                          DCD      0x40011000
                  |L4.848|
                          DCD      0xe000ed24
                  |L4.852|
                          DCD      0x05fa0000

                          AREA ||i._RMP_Plat_Hook||, CODE, READONLY, ALIGN=1

                  _RMP_Plat_Hook PROC
;;;79     ******************************************************************************/
;;;80     void _RMP_Plat_Hook(void)
000000  b510              PUSH     {r4,lr}
;;;81     {
;;;82         RMP_Enable_Int();
000002  f7fffffe          BL       RMP_Enable_Int
;;;83     }
000006  bd10              POP      {r4,pc}
;;;84     /* End Function:_RMP_Plat_Hook ***********************************************/
                          ENDP


                          AREA ||i._RMP_Stack_Init||, CODE, READONLY, ALIGN=2

                  _RMP_Stack_Init PROC
;;;45     ******************************************************************************/
;;;46     void _RMP_Stack_Init(rmp_ptr_t Entry, rmp_ptr_t Stack, rmp_ptr_t Arg)
000000  f06f0302          MVN      r3,#2
;;;47     {
;;;48         /* The "9" here is because we also pushed other registers to PSP */
;;;49         /* This is the LR value indicating that we never used the FPU */
;;;50         ((rmp_ptr_t*)Stack)[0+8]=0xFFFFFFFD;    
000004  620b              STR      r3,[r1,#0x20]
;;;51         /* CM3:Pass the parameter */                            
;;;52         ((rmp_ptr_t*)Stack)[0+9]=Arg;       
000006  624a              STR      r2,[r1,#0x24]
;;;53         /* CM3:for xPSR. fill the T bit,or an INVSTATE will happen */
;;;54         ((rmp_ptr_t*)Stack)[6+9]=Entry;
000008  63c8              STR      r0,[r1,#0x3c]
;;;55         /* CM3:Set the process entrance */                            
;;;56         ((rmp_ptr_t*)Stack)[7+9]=0x01000200;      
00000a  4b01              LDR      r3,|L6.16|
00000c  640b              STR      r3,[r1,#0x40]
;;;57     }
00000e  4770              BX       lr
;;;58     /* End Function:_RMP_Stack_Init **********************************************/
                          ENDP

                  |L6.16|
                          DCD      0x01000200

                          AREA ||i.__NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  __NVIC_SetPriority PROC
;;;2007    */
;;;2008   __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;2009   {
;;;2010     if ((int32_t)(IRQn) >= 0)
000002  2800              CMP      r0,#0
000004  db04              BLT      |L7.16|
;;;2011     {
;;;2012       NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000006  070a              LSLS     r2,r1,#28
000008  0e13              LSRS     r3,r2,#24
00000a  4a05              LDR      r2,|L7.32|
00000c  5413              STRB     r3,[r2,r0]
00000e  e006              B        |L7.30|
                  |L7.16|
;;;2013     }
;;;2014     else
;;;2015     {
;;;2016       SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000010  070a              LSLS     r2,r1,#28
000012  0e14              LSRS     r4,r2,#24
000014  4a03              LDR      r2,|L7.36|
000016  f000030f          AND      r3,r0,#0xf
00001a  1f1b              SUBS     r3,r3,#4
00001c  54d4              STRB     r4,[r2,r3]
                  |L7.30|
;;;2017     }
;;;2018   }
00001e  bd10              POP      {r4,pc}
;;;2019   
                          ENDP

                  |L7.32|
                          DCD      0xe000e400
                  |L7.36|
                          DCD      0xe000ed18

;*** Start embedded assembler ***

#line 1 "..\\..\\MProkaron\\Platform\\CortexM\\rmp_platform_cmx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_rmp_platform_cmx_c_203ac359____REV16|
#line 464 "D:\\Program_Files_x86\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___18_rmp_platform_cmx_c_203ac359____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_rmp_platform_cmx_c_203ac359____REVSH|
#line 479
|__asm___18_rmp_platform_cmx_c_203ac359____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_rmp_platform_cmx_c_203ac359____RRX|
#line 666
|__asm___18_rmp_platform_cmx_c_203ac359____RRX| PROC
#line 667

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
