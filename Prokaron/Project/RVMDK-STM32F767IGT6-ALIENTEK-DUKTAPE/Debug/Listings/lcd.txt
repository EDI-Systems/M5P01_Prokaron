; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\lcd.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\lcd.d --cpu=Cortex-M7 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I.\Source -I.\Drivers -I..\..\..\M6P1(D)_Duktape\duktape\src -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-ALIENTEK-DUKTAPE\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DDUK_USE_BYTEORDER=1 --enum_is_int --signed_chars --omf_browse=.\debug\output\lcd.crf Drivers\lcd.c]
                          THUMB

                          AREA ||i.HAL_SRAM_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_SRAM_MspInit PROC
;;;82     
;;;83     void HAL_SRAM_MspInit(SRAM_HandleTypeDef *hsram)
000000  b510              PUSH     {r4,lr}
;;;84     {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;85         GPIO_InitTypeDef GPIO_Initure;
;;;86         
;;;87         __HAL_RCC_FMC_CLK_ENABLE();
000006  bf00              NOP      
000008  4820              LDR      r0,|L1.140|
00000a  6800              LDR      r0,[r0,#0]
00000c  f0400001          ORR      r0,r0,#1
000010  491e              LDR      r1,|L1.140|
000012  6008              STR      r0,[r1,#0]
000014  4608              MOV      r0,r1
000016  6800              LDR      r0,[r0,#0]
000018  f0000001          AND      r0,r0,#1
00001c  9000              STR      r0,[sp,#0]
00001e  bf00              NOP      
000020  bf00              NOP      
;;;88         __HAL_RCC_GPIOD_CLK_ENABLE();
000022  bf00              NOP      
000024  4819              LDR      r0,|L1.140|
000026  3808              SUBS     r0,r0,#8
000028  6800              LDR      r0,[r0,#0]
00002a  f0400008          ORR      r0,r0,#8
00002e  4917              LDR      r1,|L1.140|
000030  3908              SUBS     r1,r1,#8
000032  6008              STR      r0,[r1,#0]
000034  4608              MOV      r0,r1
000036  6800              LDR      r0,[r0,#0]
000038  f0000008          AND      r0,r0,#8
00003c  9000              STR      r0,[sp,#0]
00003e  bf00              NOP      
000040  bf00              NOP      
;;;89         __HAL_RCC_GPIOE_CLK_ENABLE();
000042  bf00              NOP      
000044  4608              MOV      r0,r1
000046  6800              LDR      r0,[r0,#0]
000048  f0400010          ORR      r0,r0,#0x10
00004c  6008              STR      r0,[r1,#0]
00004e  4608              MOV      r0,r1
000050  6800              LDR      r0,[r0,#0]
000052  f0000010          AND      r0,r0,#0x10
000056  9000              STR      r0,[sp,#0]
000058  bf00              NOP      
00005a  bf00              NOP      
;;;90         
;;;91         GPIO_Initure.Pin=GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8|\
00005c  f24e70b3          MOV      r0,#0xe7b3
000060  9001              STR      r0,[sp,#4]
;;;92                          GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
;;;93         GPIO_Initure.Mode=GPIO_MODE_AF_PP;
000062  2002              MOVS     r0,#2
000064  9002              STR      r0,[sp,#8]
;;;94         GPIO_Initure.Pull=GPIO_PULLUP;
000066  2001              MOVS     r0,#1
000068  9003              STR      r0,[sp,#0xc]
;;;95         GPIO_Initure.Speed=GPIO_SPEED_HIGH;
00006a  2003              MOVS     r0,#3
00006c  9004              STR      r0,[sp,#0x10]
;;;96         GPIO_Initure.Alternate=GPIO_AF12_FMC;
00006e  200c              MOVS     r0,#0xc
000070  9005              STR      r0,[sp,#0x14]
;;;97         HAL_GPIO_Init(GPIOD,&GPIO_Initure);
000072  a901              ADD      r1,sp,#4
000074  4806              LDR      r0,|L1.144|
000076  f7fffffe          BL       HAL_GPIO_Init
;;;98         
;;;99         GPIO_Initure.Pin=GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|\
00007a  f64f7080          MOV      r0,#0xff80
00007e  9001              STR      r0,[sp,#4]
;;;100                         GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
;;;101        HAL_GPIO_Init(GPIOE,&GPIO_Initure);
000080  a901              ADD      r1,sp,#4
000082  4804              LDR      r0,|L1.148|
000084  f7fffffe          BL       HAL_GPIO_Init
;;;102    }
000088  b006              ADD      sp,sp,#0x18
00008a  bd10              POP      {r4,pc}
;;;103    
                          ENDP

                  |L1.140|
                          DCD      0x40023838
                  |L1.144|
                          DCD      0x40020c00
                  |L1.148|
                          DCD      0x40021000

                          AREA ||i.LCD_BGR2RGB||, CODE, READONLY, ALIGN=1

                  LCD_BGR2RGB PROC
;;;10     
;;;11     u16 LCD_BGR2RGB(u16 c)
000000  b530              PUSH     {r4,r5,lr}
;;;12     {
000002  4601              MOV      r1,r0
;;;13         u16  r,g,b,rgb;   
;;;14         b=(c>>0)&0x1f;
000004  f001041f          AND      r4,r1,#0x1f
;;;15         g=(c>>5)&0x3f;
000008  f3c11345          UBFX     r3,r1,#5,#6
;;;16         r=(c>>11)&0x1f;     
00000c  0aca              LSRS     r2,r1,#11
;;;17         rgb=(b<<11)+(g<<5)+(r<<0);         
00000e  02e5              LSLS     r5,r4,#11
000010  eb051543          ADD      r5,r5,r3,LSL #5
000014  4415              ADD      r5,r5,r2
000016  b2a8              UXTH     r0,r5
;;;18         return(rgb);
;;;19     } 
000018  bd30              POP      {r4,r5,pc}
;;;20     
                          ENDP


                          AREA ||i.LCD_Clear||, CODE, READONLY, ALIGN=1

                  LCD_Clear PROC
;;;116    
;;;117    void LCD_Clear(u32 color)
000000  b510              PUSH     {r4,lr}
;;;118    {   
000002  4604              MOV      r4,r0
;;;119        LTDC_Clear(color);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       LTDC_Clear
;;;120    }
00000a  bd10              POP      {r4,pc}
;;;121    
                          ENDP


                          AREA ||i.LCD_DisplayOff||, CODE, READONLY, ALIGN=1

                  LCD_DisplayOff PROC
;;;36     
;;;37     void LCD_DisplayOff(void)
000000  b510              PUSH     {r4,lr}
;;;38     {       
;;;39         LTDC_Switch(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       LTDC_Switch
;;;40     }
000008  bd10              POP      {r4,pc}
;;;41     
                          ENDP


                          AREA ||i.LCD_DisplayOn||, CODE, READONLY, ALIGN=1

                  LCD_DisplayOn PROC
;;;31     
;;;32     void LCD_DisplayOn(void)
000000  b510              PUSH     {r4,lr}
;;;33     {                       
;;;34         LTDC_Switch(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       LTDC_Switch
;;;35     }
000008  bd10              POP      {r4,pc}
;;;36     
                          ENDP


                          AREA ||i.LCD_Display_Dir||, CODE, READONLY, ALIGN=2

                  LCD_Display_Dir PROC
;;;54     
;;;55     void LCD_Display_Dir(u8 dir)
000000  b510              PUSH     {r4,lr}
;;;56     {
000002  4604              MOV      r4,r0
;;;57         lcddev.dir=dir;
000004  4806              LDR      r0,|L6.32|
000006  7184              STRB     r4,[r0,#6]
;;;58         LTDC_Display_Dir(dir);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       LTDC_Display_Dir
;;;59         lcddev.width=lcdltdc.width;
00000e  4805              LDR      r0,|L6.36|
000010  8ac0              LDRH     r0,[r0,#0x16]  ; lcdltdc
000012  4903              LDR      r1,|L6.32|
000014  8008              STRH     r0,[r1,#0]
;;;60         lcddev.height=lcdltdc.height;
000016  4803              LDR      r0,|L6.36|
000018  8b00              LDRH     r0,[r0,#0x18]  ; lcdltdc
00001a  8048              STRH     r0,[r1,#2]
;;;61     }
00001c  bd10              POP      {r4,pc}
;;;62     
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      lcddev
                  |L6.36|
                          DCD      lcdltdc

                          AREA ||i.LCD_DrawPoint||, CODE, READONLY, ALIGN=2

                  LCD_DrawPoint PROC
;;;41     
;;;42     void LCD_DrawPoint(u16 x,u16 y)
000000  b570              PUSH     {r4-r6,lr}
;;;43     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;44         if(lcdltdc.pwidth!=0)
000006  4805              LDR      r0,|L7.28|
000008  6800              LDR      r0,[r0,#0]  ; lcdltdc
00000a  b128              CBZ      r0,|L7.24|
;;;45         {
;;;46             LTDC_Draw_Point(x,y,POINT_COLOR);
00000c  4804              LDR      r0,|L7.32|
00000e  4629              MOV      r1,r5
000010  6802              LDR      r2,[r0,#0]  ; POINT_COLOR
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       LTDC_Draw_Point
                  |L7.24|
;;;47         }
;;;48     }
000018  bd70              POP      {r4-r6,pc}
;;;49     
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      lcdltdc
                  |L7.32|
                          DCD      POINT_COLOR

                          AREA ||i.LCD_Fast_DrawPoint||, CODE, READONLY, ALIGN=1

                  LCD_Fast_DrawPoint PROC
;;;49     
;;;50     void LCD_Fast_DrawPoint(u16 x,u16 y,u32 color)
000000  b570              PUSH     {r4-r6,lr}
;;;51     {       
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;52         LTDC_Draw_Point(x,y,color);
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       LTDC_Draw_Point
;;;53     }
000012  bd70              POP      {r4-r6,pc}
;;;54     
                          ENDP


                          AREA ||i.LCD_Init||, CODE, READONLY, ALIGN=2

                  LCD_Init PROC
;;;103    
;;;104    void LCD_Init(void)
000000  b510              PUSH     {r4,lr}
;;;105    {
;;;106        lcddev.id=LTDC_PanelID_Read();
000002  f7fffffe          BL       LTDC_PanelID_Read
000006  490a              LDR      r1,|L9.48|
000008  8088              STRH     r0,[r1,#4]
;;;107        if(lcddev.id!=0)
00000a  4608              MOV      r0,r1
00000c  8880              LDRH     r0,[r0,#4]  ; lcddev
00000e  b108              CBZ      r0,|L9.20|
;;;108        {
;;;109            LTDC_Init();
000010  f7fffffe          BL       LTDC_Init
                  |L9.20|
;;;110        }
;;;111    
;;;112        LCD_Display_Dir(0);
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       LCD_Display_Dir
;;;113        LCD_LED(1);
00001a  2201              MOVS     r2,#1
00001c  2120              MOVS     r1,#0x20
00001e  4805              LDR      r0,|L9.52|
000020  f7fffffe          BL       HAL_GPIO_WritePin
;;;114        LCD_Clear(WHITE);
000024  f64f70ff          MOV      r0,#0xffff
000028  f7fffffe          BL       LCD_Clear
;;;115    }
00002c  bd10              POP      {r4,pc}
;;;116    
                          ENDP

00002e  0000              DCW      0x0000
                  |L9.48|
                          DCD      lcddev
                  |L9.52|
                          DCD      0x40020400

                          AREA ||i.LCD_MPU_Config||, CODE, READONLY, ALIGN=1

                  LCD_MPU_Config PROC
;;;62     
;;;63     void LCD_MPU_Config(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;64     {    
;;;65         MPU_Region_InitTypeDef MPU_Initure;
;;;66     
;;;67         HAL_MPU_Disable();
000002  f7fffffe          BL       HAL_MPU_Disable
;;;68         MPU_Initure.Enable=MPU_REGION_ENABLE;
000006  2001              MOVS     r0,#1
000008  f88d0000          STRB     r0,[sp,#0]
;;;69         MPU_Initure.Number=LCD_REGION_NUMBER;
00000c  2004              MOVS     r0,#4
00000e  f88d0001          STRB     r0,[sp,#1]
;;;70         MPU_Initure.BaseAddress=LCD_ADDRESS_START;
000012  f04f40c0          MOV      r0,#0x60000000
000016  9001              STR      r0,[sp,#4]
;;;71         MPU_Initure.Size=LCD_REGION_SIZE;
000018  201b              MOVS     r0,#0x1b
00001a  f88d0008          STRB     r0,[sp,#8]
;;;72         MPU_Initure.SubRegionDisable=0X00;
00001e  2000              MOVS     r0,#0
000020  f88d0009          STRB     r0,[sp,#9]
;;;73         MPU_Initure.TypeExtField=MPU_TEX_LEVEL0;
000024  f88d000a          STRB     r0,[sp,#0xa]
;;;74         MPU_Initure.AccessPermission=MPU_REGION_FULL_ACCESS;
000028  2003              MOVS     r0,#3
00002a  f88d000b          STRB     r0,[sp,#0xb]
;;;75         MPU_Initure.DisableExec=MPU_INSTRUCTION_ACCESS_ENABLE;
00002e  2000              MOVS     r0,#0
000030  f88d000c          STRB     r0,[sp,#0xc]
;;;76         MPU_Initure.IsShareable=MPU_ACCESS_NOT_SHAREABLE;
000034  f88d000d          STRB     r0,[sp,#0xd]
;;;77         MPU_Initure.IsCacheable=MPU_ACCESS_NOT_CACHEABLE;
000038  f88d000e          STRB     r0,[sp,#0xe]
;;;78         MPU_Initure.IsBufferable=MPU_ACCESS_BUFFERABLE;
00003c  2001              MOVS     r0,#1
00003e  f88d000f          STRB     r0,[sp,#0xf]
;;;79         HAL_MPU_ConfigRegion(&MPU_Initure);
000042  4668              MOV      r0,sp
000044  f7fffffe          BL       HAL_MPU_ConfigRegion
;;;80         HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
000048  2004              MOVS     r0,#4
00004a  f7fffffe          BL       HAL_MPU_Enable
;;;81     }
00004e  bd1f              POP      {r0-r4,pc}
;;;82     
                          ENDP


                          AREA ||i.LCD_ReadPoint||, CODE, READONLY, ALIGN=2

                  LCD_ReadPoint PROC
;;;25     
;;;26     u32 LCD_ReadPoint(u16 x,u16 y)
000000  b570              PUSH     {r4-r6,lr}
;;;27     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;28         if(x>=lcddev.width||y>=lcddev.height)return 0;
000006  4807              LDR      r0,|L11.36|
000008  8800              LDRH     r0,[r0,#0]  ; lcddev
00000a  42a0              CMP      r0,r4
00000c  dd03              BLE      |L11.22|
00000e  4805              LDR      r0,|L11.36|
000010  8840              LDRH     r0,[r0,#2]  ; lcddev
000012  42a8              CMP      r0,r5
000014  dc01              BGT      |L11.26|
                  |L11.22|
000016  2000              MOVS     r0,#0
                  |L11.24|
;;;29         return LTDC_Read_Point(x,y);
;;;30     }
000018  bd70              POP      {r4-r6,pc}
                  |L11.26|
00001a  4629              MOV      r1,r5                 ;29
00001c  4620              MOV      r0,r4                 ;29
00001e  f7fffffe          BL       LTDC_Read_Point
000022  e7f9              B        |L11.24|
;;;31     
                          ENDP

                  |L11.36|
                          DCD      lcddev

                          AREA ||i.opt_delay||, CODE, READONLY, ALIGN=1

                  opt_delay PROC
;;;20     
;;;21     void opt_delay(u8 i)
000000  bf00              NOP      
                  |L12.2|
;;;22     {
;;;23         while(i--);
000002  1e01              SUBS     r1,r0,#0
000004  f1a00201          SUB      r2,r0,#1
000008  b2d0              UXTB     r0,r2
00000a  d1fa              BNE      |L12.2|
;;;24     }
00000c  4770              BX       lr
;;;25     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  SRAM_Handler
                          %        80
                  lcddev
                          %        14

                          AREA ||.data||, DATA, ALIGN=2

                  POINT_COLOR
                          DCD      0xff000000
                  BACK_COLOR
                          DCD      0xffffffff

;*** Start embedded assembler ***

#line 1 "Drivers\\lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_4fcc5fa4____REV16|
#line 464 "D:\\Program_Files_x86\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_lcd_c_4fcc5fa4____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_4fcc5fa4____REVSH|
#line 479
|__asm___5_lcd_c_4fcc5fa4____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_4fcc5fa4____RRX|
#line 666
|__asm___5_lcd_c_4fcc5fa4____RRX| PROC
#line 667

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
