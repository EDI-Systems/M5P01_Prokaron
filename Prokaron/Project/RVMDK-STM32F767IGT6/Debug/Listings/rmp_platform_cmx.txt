; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\rmp_platform_cmx.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\rmp_platform_cmx.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc\Conf -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\rmp_platform_cmx.crf ..\..\MProkaron\Platform\CortexM\rmp_platform_cmx.c]
                          THUMB

                          AREA ||i.RMP_Putchar||, CODE, READONLY, ALIGN=2

                  RMP_Putchar PROC
;;;103    ******************************************************************************/
;;;104    void RMP_Putchar(char Char)
000000  4903              LDR      r1,|L1.16|
;;;105    {
;;;106        RMP_CMX_PUTCHAR(Char);
000002  6288              STR      r0,[r1,#0x28]
                  |L1.4|
000004  69c8              LDR      r0,[r1,#0x1c]
000006  f0100f40          TST      r0,#0x40
00000a  d0fb              BEQ      |L1.4|
;;;107    }
00000c  4770              BX       lr
;;;108    /* End Function:RMP_Putchar **************************************************/
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40011000

                          AREA ||i._RMP_Low_Level_Init||, CODE, READONLY, ALIGN=2

                  _RMP_Low_Level_Init PROC
;;;77     ******************************************************************************/
;;;78     void _RMP_Low_Level_Init(void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;79     {    
000004  b0b9              SUB      sp,sp,#0xe4
;;;80         RMP_CMX_LOW_LEVEL_INIT();
000006  2134              MOVS     r1,#0x34
000008  a81f              ADD      r0,sp,#0x7c
00000a  f7fffffe          BL       RMP_Clear
00000e  2114              MOVS     r1,#0x14
000010  a82c              ADD      r0,sp,#0xb0
000012  f7fffffe          BL       RMP_Clear
000016  2114              MOVS     r1,#0x14
000018  a831              ADD      r0,sp,#0xc4
00001a  f7fffffe          BL       RMP_Clear
00001e  2178              MOVS     r1,#0x78
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       RMP_Clear
000026  4894              LDR      r0,|L2.632|
000028  6801              LDR      r1,[r0,#0]
00002a  f0415180          ORR      r1,r1,#0x10000000
00002e  6001              STR      r1,[r0,#0]
000030  6800              LDR      r0,[r0,#0]
000032  f0005080          AND      r0,r0,#0x10000000
000036  901e              STR      r0,[sp,#0x78]
000038  4890              LDR      r0,|L2.636|
00003a  6801              LDR      r1,[r0,#0]
00003c  f4414140          ORR      r1,r1,#0xc000
000040  6001              STR      r1,[r0,#0]
000042  6800              LDR      r0,[r0,#0]
000044  2502              MOVS     r5,#2
000046  2601              MOVS     r6,#1
000048  f04f0c09          MOV      r12,#9
00004c  f4004040          AND      r0,r0,#0xc000
000050  901e              STR      r0,[sp,#0x78]
000052  03e8              LSLS     r0,r5,#15
000054  2219              MOVS     r2,#0x19
000056  0181              LSLS     r1,r0,#6
000058  f44f73d8          MOV      r3,#0x1b0
00005c  e9cd5125          STRD     r5,r1,[sp,#0x94]
000060  a927              ADD      r1,sp,#0x9c
000062  e9cd601f          STRD     r6,r0,[sp,#0x7c]
000066  a81f              ADD      r0,sp,#0x7c
000068  e881102c          STM      r1,{r2,r3,r5,r12}
00006c  f7fffffe          BL       HAL_RCC_OscConfig
000070  2800              CMP      r0,#0
000072  d01b              BEQ      |L2.172|
000074  a082              ADR      r0,|L2.640|
000076  f7fffffe          BL       RMP_Print_String
00007a  a08b              ADR      r0,|L2.680|
00007c  f7fffffe          BL       RMP_Print_String
000080  a096              ADR      r0,|L2.732|
000082  f7fffffe          BL       RMP_Print_String
000086  2050              MOVS     r0,#0x50
000088  f7fffffe          BL       RMP_Print_Int
00008c  a096              ADR      r0,|L2.744|
00008e  f7fffffe          BL       RMP_Print_String
000092  a096              ADR      r0,|L2.748|
000094  f7fffffe          BL       RMP_Print_String
000098  a097              ADR      r0,|L2.760|
00009a  f7fffffe          BL       RMP_Print_String
00009e  a097              ADR      r0,|L2.764|
0000a0  f7fffffe          BL       RMP_Print_String
0000a4  a090              ADR      r0,|L2.744|
0000a6  f7fffffe          BL       RMP_Print_String
                  |L2.170|
0000aa  e7fe              B        |L2.170|
                  |L2.172|
0000ac  f7fffffe          BL       HAL_PWREx_EnableOverDrive
0000b0  2800              CMP      r0,#0
0000b2  d01b              BEQ      |L2.236|
0000b4  a072              ADR      r0,|L2.640|
0000b6  f7fffffe          BL       RMP_Print_String
0000ba  a07b              ADR      r0,|L2.680|
0000bc  f7fffffe          BL       RMP_Print_String
0000c0  a086              ADR      r0,|L2.732|
0000c2  f7fffffe          BL       RMP_Print_String
0000c6  2050              MOVS     r0,#0x50
0000c8  f7fffffe          BL       RMP_Print_Int
0000cc  a086              ADR      r0,|L2.744|
0000ce  f7fffffe          BL       RMP_Print_String
0000d2  a086              ADR      r0,|L2.748|
0000d4  f7fffffe          BL       RMP_Print_String
0000d8  a087              ADR      r0,|L2.760|
0000da  f7fffffe          BL       RMP_Print_String
0000de  a087              ADR      r0,|L2.764|
0000e0  f7fffffe          BL       RMP_Print_String
0000e4  a080              ADR      r0,|L2.744|
0000e6  f7fffffe          BL       RMP_Print_String
                  |L2.234|
0000ea  e7fe              B        |L2.234|
                  |L2.236|
0000ec  f44f5280          MOV      r2,#0x1000
0000f0  2400              MOVS     r4,#0
0000f2  942e              STR      r4,[sp,#0xb8]
0000f4  f44f51a0          MOV      r1,#0x1400
0000f8  e9cd122f          STRD     r1,r2,[sp,#0xbc]
0000fc  200f              MOVS     r0,#0xf
0000fe  e9cd052c          STRD     r0,r5,[sp,#0xb0]
000102  2107              MOVS     r1,#7
000104  a82c              ADD      r0,sp,#0xb0
000106  f7fffffe          BL       HAL_RCC_ClockConfig
00010a  2800              CMP      r0,#0
00010c  d01b              BEQ      |L2.326|
00010e  a05c              ADR      r0,|L2.640|
000110  f7fffffe          BL       RMP_Print_String
000114  a064              ADR      r0,|L2.680|
000116  f7fffffe          BL       RMP_Print_String
00011a  a070              ADR      r0,|L2.732|
00011c  f7fffffe          BL       RMP_Print_String
000120  2050              MOVS     r0,#0x50
000122  f7fffffe          BL       RMP_Print_Int
000126  a070              ADR      r0,|L2.744|
000128  f7fffffe          BL       RMP_Print_String
00012c  a06f              ADR      r0,|L2.748|
00012e  f7fffffe          BL       RMP_Print_String
000132  a071              ADR      r0,|L2.760|
000134  f7fffffe          BL       RMP_Print_String
000138  a070              ADR      r0,|L2.764|
00013a  f7fffffe          BL       RMP_Print_String
00013e  a06a              ADR      r0,|L2.744|
000140  f7fffffe          BL       RMP_Print_String
                  |L2.324|
000144  e7fe              B        |L2.324|
                  |L2.326|
000146  f3bf8f4f          DSB      
00014a  f3bf8f6f          ISB      
00014e  486f              LDR      r0,|L2.780|
000150  4f6d              LDR      r7,|L2.776|
000152  6004              STR      r4,[r0,#0]
000154  6838              LDR      r0,[r7,#0]
000156  f4403000          ORR      r0,r0,#0x20000
00015a  6038              STR      r0,[r7,#0]
00015c  f3bf8f4f          DSB      
000160  f3bf8f6f          ISB      
000164  486a              LDR      r0,|L2.784|
000166  6004              STR      r4,[r0,#0]
000168  f3bf8f4f          DSB      
00016c  1f00              SUBS     r0,r0,#4
00016e  4969              LDR      r1,|L2.788|
000170  f64378ff          MOV      r8,#0x3fff
000174  6800              LDR      r0,[r0,#0]
000176  f3c0334e          UBFX     r3,r0,#13,#15
00017a  f3c00cc9          UBFX     r12,r0,#3,#10
                  |L2.382|
00017e  ea081243          AND      r2,r8,r3,LSL #5
000182  4660              MOV      r0,r12
                  |L2.388|
000184  ea427980          ORR      r9,r2,r0,LSL #30
000188  f8c19000          STR      r9,[r1,#0]
00018c  1e40              SUBS     r0,r0,#1
00018e  d2f9              BCS      |L2.388|
000190  1e5b              SUBS     r3,r3,#1
000192  d2f4              BCS      |L2.382|
000194  f3bf8f4f          DSB      
000198  6838              LDR      r0,[r7,#0]
00019a  f4403080          ORR      r0,r0,#0x10000
00019e  6038              STR      r0,[r7,#0]
0001a0  f3bf8f4f          DSB      
0001a4  f3bf8f6f          ISB      
0001a8  485b              LDR      r0,|L2.792|
0001aa  6801              LDR      r1,[r0,#0]
0001ac  f4417100          ORR      r1,r1,#0x200
0001b0  6001              STR      r1,[r0,#0]
0001b2  6801              LDR      r1,[r0,#0]
0001b4  f4417180          ORR      r1,r1,#0x100
0001b8  6001              STR      r1,[r0,#0]
0001ba  4858              LDR      r0,|L2.796|
0001bc  6801              LDR      r1,[r0,#0]
0001be  f0410101          ORR      r1,r1,#1
0001c2  6001              STR      r1,[r0,#0]
0001c4  6800              LDR      r0,[r0,#0]
0001c6  f0000001          AND      r0,r0,#1
0001ca  901e              STR      r0,[sp,#0x78]
0001cc  4854              LDR      r0,|L2.800|
0001ce  6801              LDR      r1,[r0,#0]
0001d0  f0410110          ORR      r1,r1,#0x10
0001d4  6001              STR      r1,[r0,#0]
0001d6  6800              LDR      r0,[r0,#0]
0001d8  2103              MOVS     r1,#3
0001da  2707              MOVS     r7,#7
0001dc  9735              STR      r7,[sp,#0xd4]
0001de  f0000010          AND      r0,r0,#0x10
0001e2  901e              STR      r0,[sp,#0x78]
0001e4  e9cd6133          STRD     r6,r1,[sp,#0xcc]
0001e8  f44f7000          MOV      r0,#0x200
0001ec  e9cd0531          STRD     r0,r5,[sp,#0xc4]
0001f0  484c              LDR      r0,|L2.804|
0001f2  a931              ADD      r1,sp,#0xc4
0001f4  f7fffffe          BL       HAL_GPIO_Init
0001f8  484b              LDR      r0,|L2.808|
0001fa  f44f31e1          MOV      r1,#0x1c200
0001fe  9000              STR      r0,[sp,#0]
000200  2208              MOVS     r2,#8
000202  e9cd1401          STRD     r1,r4,[sp,#4]
000206  9403              STR      r4,[sp,#0xc]
000208  4668              MOV      r0,sp
00020a  9404              STR      r4,[sp,#0x10]
00020c  e9cd2405          STRD     r2,r4,[sp,#0x14]
000210  f7fffffe          BL       HAL_UART_Init
000214  4b45              LDR      r3,|L2.812|
000216  f8dfc118          LDR      r12,|L2.816|
00021a  6819              LDR      r1,[r3,#0]
00021c  20f0              MOVS     r0,#0xf0
00021e  1e5a              SUBS     r2,r3,#1
000220  f64f05ff          MOV      r5,#0xf8ff
000224  f44126e0          ORR      r6,r1,#0x70000
000228  f04f21e0          MOV      r1,#0xe000e000
00022c  601e              STR      r6,[r3,#0]
00022e  f8dc3000          LDR      r3,[r12,#0]
000232  402b              ANDS     r3,r3,r5
000234  f44363a0          ORR      r3,r3,#0x500
000238  f04373fd          ORR      r3,r3,#0x1fa0000
00023c  1f15              SUBS     r5,r2,#4
00023e  f0436380          ORR      r3,r3,#0x4000000
000242  f8cc3000          STR      r3,[r12,#0]
000246  1e53              SUBS     r3,r2,#1
000248  7028              STRB     r0,[r5,#0]
00024a  7018              STRB     r0,[r3,#0]
00024c  f1a50c06          SUB      r12,r5,#6
000250  7010              STRB     r0,[r2,#0]
000252  1f6b              SUBS     r3,r5,#5
000254  f88c0000          STRB     r0,[r12,#0]
000258  1ed5              SUBS     r5,r2,#3
00025a  f2454c5f          MOV      r12,#0x545f
00025e  7018              STRB     r0,[r3,#0]
000260  7028              STRB     r0,[r5,#0]
000262  f8c1c014          STR      r12,[r1,#0x14]
000266  7010              STRB     r0,[r2,#0]
000268  618c              STR      r4,[r1,#0x18]
00026a  610f              STR      r7,[r1,#0x10]
;;;81       
;;;82         RMP_Disable_Int();
00026c  b039              ADD      sp,sp,#0xe4
00026e  e8bd43f0          POP      {r4-r9,lr}
000272  f7ffbffe          B.W      RMP_Disable_Int
;;;83     }
;;;84     /* End Function:_RMP_Low_Level_Init ******************************************/
                          ENDP

000276  0000              DCW      0x0000
                  |L2.632|
                          DCD      0x40023840
                  |L2.636|
                          DCD      0x40007000
                  |L2.640|
000280  0d0a2a2a          DCB      "\r\n***\r\nKernel panic - not syncing:\r\n",0
000284  2a0d0a4b
000288  65726e65
00028c  6c207061
000290  6e696320
000294  2d206e6f
000298  74207379
00029c  6e63696e
0002a0  673a0d0a
0002a4  00      
0002a5  00                DCB      0
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L2.680|
0002a8  2e2e5c2e          DCB      "..\\..\\MProkaron\\Platform\\CortexM\\rmp_platform_cmx."
0002ac  2e5c4d50
0002b0  726f6b61
0002b4  726f6e5c
0002b8  506c6174
0002bc  666f726d
0002c0  5c436f72
0002c4  7465784d
0002c8  5c726d70
0002cc  5f706c61
0002d0  74666f72
0002d4  6d5f636d
0002d8  782e    
0002da  6300              DCB      "c",0
                  |L2.732|
0002dc  202c204c          DCB      " , Line ",0
0002e0  696e6520
0002e4  00      
0002e5  00                DCB      0
0002e6  00                DCB      0
0002e7  00                DCB      0
                  |L2.744|
0002e8  0d0a00            DCB      "\r\n",0
0002eb  00                DCB      0
                  |L2.748|
0002ec  44656320          DCB      "Dec 11 2018",0
0002f0  31312032
0002f4  30313800
                  |L2.760|
0002f8  202c2000          DCB      " , ",0
                  |L2.764|
0002fc  32313a30          DCB      "21:07:08",0
000300  373a3038
000304  00      
000305  00                DCB      0
000306  00                DCB      0
000307  00                DCB      0
                  |L2.776|
                          DCD      0xe000ed14
                  |L2.780|
                          DCD      0xe000ef50
                  |L2.784|
                          DCD      0xe000ed84
                  |L2.788|
                          DCD      0xe000ef60
                  |L2.792|
                          DCD      0x40023c00
                  |L2.796|
                          DCD      0x40023830
                  |L2.800|
                          DCD      0x40023844
                  |L2.804|
                          DCD      0x40020000
                  |L2.808|
                          DCD      0x40011000
                  |L2.812|
                          DCD      0xe000ed24
                  |L2.816|
                          DCD      0xe000ed0c

                          AREA ||i._RMP_Plat_Hook||, CODE, READONLY, ALIGN=1

                  _RMP_Plat_Hook PROC
;;;91     ******************************************************************************/
;;;92     void _RMP_Plat_Hook(void)
000000  f7ffbffe          B.W      RMP_Enable_Int
;;;93     {
;;;94         RMP_Enable_Int();
;;;95     }
;;;96     /* End Function:_RMP_Plat_Hook ***********************************************/
                          ENDP


                          AREA ||i._RMP_Stack_Init||, CODE, READONLY, ALIGN=1

                  _RMP_Stack_Init PROC
;;;52     ******************************************************************************/
;;;53     void _RMP_Stack_Init(rmp_ptr_t Entry, rmp_ptr_t Stack, rmp_ptr_t Arg)
000000  63c8              STR      r0,[r1,#0x3c]
;;;54     {
;;;55         /* This is the LR value indicating that we never used the FPU */
;;;56         ((rmp_ptr_t*)Stack)[0+8]=0xFFFFFFFD;    
000002  f06f0302          MVN      r3,#2
;;;57         /* Cortex-M:Pass the parameter */                            
;;;58         ((rmp_ptr_t*)Stack)[0+9]=Arg;       
;;;59         /* Cortex-M:Set the process entry */
;;;60         ((rmp_ptr_t*)Stack)[6+9]=Entry;
;;;61         /* Cortex-M:Set the T bit or an INVSTATE will happen; don't set STKALIGN, 
;;;62          * and there is no stack padding. The effect of STKALIGN is, if it is set
;;;63          * and the (hardware-pushed) interrupt stack is 8n byte aligned, it will
;;;64          * pop an extra word (to restore the stack to an previous unaligned state);
;;;65          * if the interrupt stack is 8n+4 byte aligned, even if STKALIGN is set, it
;;;66          * will not pop this extra word. The result is, if STKALIGN is set, we will
;;;67          * never be able to get a 8n byte aligned stack, so we do not set it. */                            
;;;68         ((rmp_ptr_t*)Stack)[7+9]=0x01000000;
000006  f04f7080          MOV      r0,#0x1000000
00000a  6408              STR      r0,[r1,#0x40]
00000c  e9c13208          STRD     r3,r2,[r1,#0x20]
;;;69     }
000010  4770              BX       lr
;;;70     /* End Function:_RMP_Stack_Init **********************************************/
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\MProkaron\\Platform\\CortexM\\rmp_platform_cmx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_rmp_platform_cmx_c_203ac359____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F7_V1.11.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___18_rmp_platform_cmx_c_203ac359____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_rmp_platform_cmx_c_203ac359____REVSH|
#line 402
|__asm___18_rmp_platform_cmx_c_203ac359____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_rmp_platform_cmx_c_203ac359____RRX|
#line 587
|__asm___18_rmp_platform_cmx_c_203ac359____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
