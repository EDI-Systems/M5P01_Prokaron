; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f7xx_hal_gpio.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f7xx_hal_gpio.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc\Conf -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f7xx_hal_gpio.crf ..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_gpio.c]
                          THUMB

                          AREA ||i.HAL_GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_DeInit PROC
;;;309      */
;;;310    void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;311    {
;;;312      uint32_t position;
;;;313      uint32_t ioposition = 0x00;
;;;314      uint32_t iocurrent = 0x00;
;;;315      uint32_t tmp = 0x00;
;;;316    
;;;317      /* Check the parameters */
;;;318      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;319      
;;;320      /* Configure the port pins */
;;;321      for(position = 0; position < GPIO_NUMBER; position++)
;;;322      {
;;;323        /* Get the IO position */
;;;324        ioposition = ((uint32_t)0x01) << position;
;;;325        /* Get the current IO position */
;;;326        iocurrent = (GPIO_Pin) & ioposition;
;;;327    
;;;328        if(iocurrent == ioposition)
;;;329        {
;;;330          /*------------------------- GPIO Mode Configuration --------------------*/
;;;331          /* Configure IO Direction in Input Floating Mode */
;;;332          GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
;;;333    
;;;334          /* Configure the default Alternate Function in current IO */
;;;335          GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
;;;336    
;;;337          /* Configure the default value for IO Speed */
;;;338          GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
;;;339    
;;;340          /* Configure the default value IO Output Type */
;;;341          GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
;;;342    
;;;343          /* Deactivate the Pull-up and Pull-down resistor for the current IO */
;;;344          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
;;;345    
;;;346          /*------------------------- EXTI Mode Configuration --------------------*/
;;;347          tmp = SYSCFG->EXTICR[position >> 2];
;;;348          tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
;;;349          if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
000004  f8dfa164          LDR      r10,|L1.364|
000008  2200              MOVS     r2,#0                 ;321
00000a  250f              MOVS     r5,#0xf               ;335
00000c  f04f0801          MOV      r8,#1                 ;324
                  |L1.16|
000010  fa08fc02          LSL      r12,r8,r2             ;324
000014  ea01030c          AND      r3,r1,r12             ;326
000018  4563              CMP      r3,r12                ;328
00001a  d17d              BNE      |L1.280|
00001c  6806              LDR      r6,[r0,#0]            ;332
00001e  2403              MOVS     r4,#3                 ;332
000020  0057              LSLS     r7,r2,#1              ;332
000022  ea4f09d2          LSR      r9,r2,#3              ;335
000026  fa04f707          LSL      r7,r4,r7              ;332
00002a  43be              BICS     r6,r6,r7              ;332
00002c  6006              STR      r6,[r0,#0]            ;332
00002e  0754              LSLS     r4,r2,#29             ;335
000030  eb000989          ADD      r9,r0,r9,LSL #2       ;335
000034  f8d9b020          LDR      r11,[r9,#0x20]        ;335
000038  0ee6              LSRS     r6,r4,#27             ;335
00003a  f0220403          BIC      r4,r2,#3              ;347
00003e  fa05fe06          LSL      lr,r5,r6              ;335
000042  f1044680          ADD      r6,r4,#0x40000000     ;347
000046  0794              LSLS     r4,r2,#30             ;348
000048  f5063698          ADD      r6,r6,#0x13000        ;347
00004c  ea2b0b0e          BIC      r11,r11,lr            ;335
000050  f8c9b020          STR      r11,[r9,#0x20]        ;335
000054  f8d0b008          LDR      r11,[r0,#8]           ;338
000058  ea4f7914          LSR      r9,r4,#28             ;338
00005c  fa05f409          LSL      r4,r5,r9              ;348
000060  4550              CMP      r0,r10
000062  ea2b0b07          BIC      r11,r11,r7            ;338
000066  f8c0b008          STR      r11,[r0,#8]           ;338
00006a  f8d0b004          LDR      r11,[r0,#4]           ;341
00006e  ea2b0c0c          BIC      r12,r11,r12           ;341
000072  f8c0c004          STR      r12,[r0,#4]           ;341
000076  f8d0c00c          LDR      r12,[r0,#0xc]         ;344
00007a  ea2c0c07          BIC      r12,r12,r7            ;344
00007e  f8c0c00c          STR      r12,[r0,#0xc]         ;344
000082  f8d6c808          LDR      r12,[r6,#0x808]       ;347
000086  ea040c0c          AND      r12,r4,r12            ;348
00008a  bf08              IT       EQ
00008c  2700              MOVEQ    r7,#0
00008e  d03e              BEQ      |L1.270|
000090  f1a04780          SUB      r7,r0,#0x40000000
000094  f5b73701          SUBS     r7,r7,#0x20400
000098  bf08              IT       EQ
00009a  2701              MOVEQ    r7,#1
00009c  d037              BEQ      |L1.270|
00009e  f1a04780          SUB      r7,r0,#0x40000000
0000a2  f5b73702          SUBS     r7,r7,#0x20800
0000a6  bf08              IT       EQ
0000a8  2702              MOVEQ    r7,#2
0000aa  d030              BEQ      |L1.270|
0000ac  f1a04780          SUB      r7,r0,#0x40000000
0000b0  f5b73703          SUBS     r7,r7,#0x20c00
0000b4  bf08              IT       EQ
0000b6  2703              MOVEQ    r7,#3
0000b8  d029              BEQ      |L1.270|
0000ba  f1a04780          SUB      r7,r0,#0x40000000
0000be  f5b73704          SUBS     r7,r7,#0x21000
0000c2  bf08              IT       EQ
0000c4  2704              MOVEQ    r7,#4
0000c6  d022              BEQ      |L1.270|
0000c8  f1a04780          SUB      r7,r0,#0x40000000
0000cc  f5b73705          SUBS     r7,r7,#0x21400
0000d0  bf08              IT       EQ
0000d2  2705              MOVEQ    r7,#5
0000d4  d01b              BEQ      |L1.270|
0000d6  f1a04780          SUB      r7,r0,#0x40000000
0000da  f5b73706          SUBS     r7,r7,#0x21800
0000de  bf08              IT       EQ
0000e0  2706              MOVEQ    r7,#6
0000e2  d014              BEQ      |L1.270|
0000e4  f1a04780          SUB      r7,r0,#0x40000000
0000e8  f5b73707          SUBS     r7,r7,#0x21c00
0000ec  bf08              IT       EQ
0000ee  2707              MOVEQ    r7,#7
0000f0  d00d              BEQ      |L1.270|
0000f2  f1a04780          SUB      r7,r0,#0x40000000
0000f6  f5b73708          SUBS     r7,r7,#0x22000
0000fa  bf08              IT       EQ
0000fc  2708              MOVEQ    r7,#8
0000fe  d006              BEQ      |L1.270|
000100  f1a04780          SUB      r7,r0,#0x40000000
000104  f5b73709          SUBS     r7,r7,#0x22400
000108  bf0c              ITE      EQ
00010a  2709              MOVEQ    r7,#9
00010c  270a              MOVNE    r7,#0xa
                  |L1.270|
00010e  fa07f709          LSL      r7,r7,r9
000112  4567              CMP      r7,r12
000114  d123              BNE      |L1.350|
;;;350          {
;;;351            /* Configure the External Interrupt or event for the current IO */
;;;352            tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
;;;353            SYSCFG->EXTICR[position >> 2] &= ~tmp;
000116  e000              B        |L1.282|
                  |L1.280|
000118  e021              B        |L1.350|
                  |L1.282|
00011a  f8d69808          LDR      r9,[r6,#0x808]
;;;354    
;;;355            /* Clear EXTI line configuration */
;;;356            EXTI->IMR &= ~((uint32_t)iocurrent);
00011e  4f14              LDR      r7,|L1.368|
000120  ea290404          BIC      r4,r9,r4              ;353
000124  f8c64808          STR      r4,[r6,#0x808]        ;353
;;;357            EXTI->EMR &= ~((uint32_t)iocurrent);
000128  f1070c04          ADD      r12,r7,#4
00012c  f8d79000          LDR      r9,[r7,#0]            ;356
;;;358    
;;;359            /* Clear Rising Falling edge configuration */
;;;360            EXTI->RTSR &= ~((uint32_t)iocurrent);
000130  f10c0404          ADD      r4,r12,#4
;;;361            EXTI->FTSR &= ~((uint32_t)iocurrent);
000134  1d26              ADDS     r6,r4,#4
000136  ea290903          BIC      r9,r9,r3              ;356
00013a  f8c79000          STR      r9,[r7,#0]            ;356
00013e  f8dc7000          LDR      r7,[r12,#0]           ;357
000142  439f              BICS     r7,r7,r3              ;357
000144  f8cc7000          STR      r7,[r12,#0]           ;357
000148  f8d4c000          LDR      r12,[r4,#0]           ;360
00014c  ea2c0c03          BIC      r12,r12,r3            ;360
000150  f8c4c000          STR      r12,[r4,#0]           ;360
000154  f8d6c000          LDR      r12,[r6,#0]
000158  ea2c0303          BIC      r3,r12,r3
00015c  6033              STR      r3,[r6,#0]
                  |L1.350|
00015e  1c52              ADDS     r2,r2,#1
000160  2a10              CMP      r2,#0x10              ;321
000162  f4ffaf55          BCC      |L1.16|
;;;362    	  }
;;;363        }
;;;364      }
;;;365    }
000166  e8bd8ff0          POP      {r4-r11,pc}
;;;366    
                          ENDP

00016a  0000              DCW      0x0000
                  |L1.364|
                          DCD      0x40020000
                  |L1.368|
                          DCD      0x40013c00

                          AREA ||i.HAL_GPIO_EXTI_Callback||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_EXTI_Callback PROC
;;;512      */
;;;513    __weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
000000  4770              BX       lr
;;;514    {
;;;515      /* Prevent unused argument(s) compilation warning */
;;;516      UNUSED(GPIO_Pin);
;;;517      
;;;518      /* NOTE: This function Should not be modified, when the callback is needed,
;;;519               the HAL_GPIO_EXTI_Callback could be implemented in the user file
;;;520       */
;;;521    }
;;;522    
                          ENDP


                          AREA ||i.HAL_GPIO_EXTI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_EXTI_IRQHandler PROC
;;;497      */
;;;498    void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
000000  4904              LDR      r1,|L3.20|
;;;499    {
;;;500      /* EXTI line interrupt detected */
;;;501      if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
000002  680a              LDR      r2,[r1,#0]
000004  4202              TST      r2,r0
;;;502      {
;;;503        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
;;;504        HAL_GPIO_EXTI_Callback(GPIO_Pin);
;;;505      }
;;;506    }
000006  bf08              IT       EQ
000008  4770              BXEQ     lr
00000a  b510              PUSH     {r4,lr}               ;499
00000c  6008              STR      r0,[r1,#0]            ;503
00000e  f7fffffe          BL       HAL_GPIO_EXTI_Callback
000012  bd10              POP      {r4,pc}
;;;507    
                          ENDP

                  |L3.20|
                          DCD      0x40013c14

                          AREA ||i.HAL_GPIO_Init||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_Init PROC
;;;184      */
;;;185    void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;186    {
;;;187      uint32_t position = 0x00;
;;;188      uint32_t ioposition = 0x00;
;;;189      uint32_t iocurrent = 0x00;
;;;190      uint32_t temp = 0x00;
;;;191    
;;;192      /* Check the parameters */
;;;193      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;194      assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
;;;195      assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
;;;196      assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
;;;197    
;;;198      /* Configure the port pins */
;;;199      for(position = 0; position < GPIO_NUMBER; position++)
;;;200      {
;;;201        /* Get the IO position */
;;;202        ioposition = ((uint32_t)0x01) << position;
;;;203        /* Get the current IO position */
;;;204        iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
;;;205    
;;;206        if(iocurrent == ioposition)
;;;207        {
;;;208          /*--------------------- GPIO Mode Configuration ------------------------*/
;;;209          /* In case of Alternate function mode selection */
;;;210          if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
;;;211          {
;;;212            /* Check the Alternate function parameter */
;;;213            assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
;;;214            
;;;215            /* Configure Alternate function mapped with the current IO */
;;;216            temp = GPIOx->AFR[position >> 3];
;;;217            temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
;;;218            temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
;;;219            GPIOx->AFR[position >> 3] = temp;
;;;220          }
;;;221    
;;;222          /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
;;;223          temp = GPIOx->MODER;
;;;224          temp &= ~(GPIO_MODER_MODER0 << (position * 2));
;;;225          temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
;;;226          GPIOx->MODER = temp;
;;;227    
;;;228          /* In case of Output or Alternate function mode selection */
;;;229          if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
;;;230             (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
;;;231          {
;;;232            /* Check the Speed parameter */
;;;233            assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
;;;234            /* Configure the IO Speed */
;;;235            temp = GPIOx->OSPEEDR; 
;;;236            temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
;;;237            temp |= (GPIO_Init->Speed << (position * 2));
;;;238            GPIOx->OSPEEDR = temp;
;;;239    
;;;240            /* Configure the IO Output Type */
;;;241            temp = GPIOx->OTYPER;
;;;242            temp &= ~(GPIO_OTYPER_OT_0 << position) ;
;;;243            temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
;;;244            GPIOx->OTYPER = temp;
;;;245          }
;;;246    
;;;247          /* Activate the Pull-up or Pull down resistor for the current IO */
;;;248          temp = GPIOx->PUPDR;
;;;249          temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
;;;250          temp |= ((GPIO_Init->Pull) << (position * 2));
;;;251          GPIOx->PUPDR = temp;
;;;252    
;;;253          /*--------------------- EXTI Mode Configuration ------------------------*/
;;;254          /* Configure the External Interrupt or event for the current IO */
;;;255          if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
;;;256          {
;;;257            /* Enable SYSCFG Clock */
;;;258            __HAL_RCC_SYSCFG_CLK_ENABLE();
000004  4e8d              LDR      r6,|L4.572|
000006  2200              MOVS     r2,#0                 ;187
000008  2701              MOVS     r7,#1                 ;202
00000a  f04f0903          MOV      r9,#3                 ;224
00000e  f04f080f          MOV      r8,#0xf               ;217
000012  bf00              NOP                            ;202
                  |L4.20|
000014  680b              LDR      r3,[r1,#0]            ;204
000016  fa07fc02          LSL      r12,r7,r2             ;202
00001a  ea03030c          AND      r3,r3,r12             ;204
00001e  4563              CMP      r3,r12                ;206
000020  f0408106          BNE.W    |L4.560|
000024  684c              LDR      r4,[r1,#4]            ;210
000026  2c02              CMP      r4,#2                 ;210
000028  bf18              IT       NE                    ;210
00002a  2c12              CMPNE    r4,#0x12              ;210
00002c  d112              BNE      |L4.84|
00002e  08d4              LSRS     r4,r2,#3              ;216
000030  f8d1b010          LDR      r11,[r1,#0x10]        ;216
000034  ea4f7a42          LSL      r10,r2,#29            ;217
000038  eb000484          ADD      r4,r0,r4,LSL #2       ;216
00003c  6a25              LDR      r5,[r4,#0x20]         ;216
00003e  ea4f6ada          LSR      r10,r10,#27           ;217
000042  fa08fe0a          LSL      lr,r8,r10             ;217
000046  fa0bfa0a          LSL      r10,r11,r10           ;218
00004a  ea25050e          BIC      r5,r5,lr              ;217
00004e  ea4a0505          ORR      r5,r10,r5             ;218
000052  6225              STR      r5,[r4,#0x20]         ;219
                  |L4.84|
000054  f891b004          LDRB     r11,[r1,#4]           ;225
000058  0054              LSLS     r4,r2,#1              ;224
00005a  f8d0a000          LDR      r10,[r0,#0]           ;223
00005e  f00b0b03          AND      r11,r11,#3            ;225
000062  fa09f504          LSL      r5,r9,r4              ;224
000066  fa0bfb04          LSL      r11,r11,r4            ;225
00006a  ea2a0a05          BIC      r10,r10,r5            ;224
00006e  ea4b0a0a          ORR      r10,r11,r10           ;225
000072  f8c0a000          STR      r10,[r0,#0]           ;226
000076  f8d1a004          LDR      r10,[r1,#4]           ;229
00007a  f1ba0f01          CMP      r10,#1                ;229
00007e  bf18              IT       NE                    ;229
000080  f1ba0f02          CMPNE    r10,#2                ;229
000084  d005              BEQ      |L4.146|
000086  f1ba0f11          CMP      r10,#0x11             ;229
00008a  bf18              IT       NE                    ;229
00008c  f1ba0f12          CMPNE    r10,#0x12             ;229
000090  d119              BNE      |L4.198|
                  |L4.146|
000092  f8d0a008          LDR      r10,[r0,#8]           ;235
000096  f8d1b00c          LDR      r11,[r1,#0xc]         ;237
00009a  ea2a0a05          BIC      r10,r10,r5            ;236
00009e  fa0bfb04          LSL      r11,r11,r4            ;237
0000a2  ea4b0a0a          ORR      r10,r11,r10           ;237
0000a6  f8c0a008          STR      r10,[r0,#8]           ;238
0000aa  f8d0a004          LDR      r10,[r0,#4]           ;241
0000ae  f891b004          LDRB     r11,[r1,#4]           ;243
0000b2  ea2a0c0c          BIC      r12,r10,r12           ;242
0000b6  f3cb1b00          UBFX     r11,r11,#4,#1         ;243
0000ba  fa0bfa02          LSL      r10,r11,r2            ;243
0000be  ea4a0c0c          ORR      r12,r10,r12           ;243
0000c2  f8c0c004          STR      r12,[r0,#4]           ;244
                  |L4.198|
0000c6  f8d0c00c          LDR      r12,[r0,#0xc]         ;248
0000ca  f8d1a008          LDR      r10,[r1,#8]           ;250
0000ce  ea2c0c05          BIC      r12,r12,r5            ;249
0000d2  fa0af404          LSL      r4,r10,r4             ;250
0000d6  ea440c0c          ORR      r12,r4,r12            ;250
0000da  f8c0c00c          STR      r12,[r0,#0xc]         ;251
0000de  f8d1c004          LDR      r12,[r1,#4]           ;255
0000e2  f01c5f80          TST      r12,#0x10000000       ;255
0000e6  d07c              BEQ      |L4.482|
0000e8  6835              LDR      r5,[r6,#0]
;;;259    
;;;260            temp = SYSCFG->EXTICR[position >> 2];
0000ea  f0220c03          BIC      r12,r2,#3
;;;261            temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
0000ee  0794              LSLS     r4,r2,#30
0000f0  f4454580          ORR      r5,r5,#0x4000         ;258
0000f4  6035              STR      r5,[r6,#0]            ;258
0000f6  0f24              LSRS     r4,r4,#28
0000f8  6835              LDR      r5,[r6,#0]            ;258
0000fa  f10c4c80          ADD      r12,r12,#0x40000000   ;258
0000fe  f50c3c98          ADD      r12,r12,#0x13000      ;258
000102  f4054580          AND      r5,r5,#0x4000         ;258
;;;262            temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
000106  9500              STR      r5,[sp,#0]
000108  fa08fa04          LSL      r10,r8,r4             ;261
00010c  f8dc5808          LDR      r5,[r12,#0x808]       ;260
000110  f1a04b80          SUB      r11,r0,#0x40000000
000114  f5bb3b00          SUBS     r11,r11,#0x20000
000118  ea25050a          BIC      r5,r5,r10             ;261
00011c  bf08              IT       EQ
00011e  f04f0a00          MOVEQ    r10,#0
000122  d048              BEQ      |L4.438|
000124  f1a04a80          SUB      r10,r0,#0x40000000
000128  f5ba3a01          SUBS     r10,r10,#0x20400
00012c  bf08              IT       EQ
00012e  f04f0a01          MOVEQ    r10,#1
000132  d040              BEQ      |L4.438|
000134  f1a04a80          SUB      r10,r0,#0x40000000
000138  f5ba3a02          SUBS     r10,r10,#0x20800
00013c  bf08              IT       EQ
00013e  f04f0a02          MOVEQ    r10,#2
000142  d038              BEQ      |L4.438|
000144  f1a04a80          SUB      r10,r0,#0x40000000
000148  f5ba3a03          SUBS     r10,r10,#0x20c00
00014c  bf08              IT       EQ
00014e  f04f0a03          MOVEQ    r10,#3
000152  d030              BEQ      |L4.438|
000154  f1a04a80          SUB      r10,r0,#0x40000000
000158  f5ba3a04          SUBS     r10,r10,#0x21000
00015c  bf08              IT       EQ
00015e  f04f0a04          MOVEQ    r10,#4
000162  d028              BEQ      |L4.438|
000164  f1a04a80          SUB      r10,r0,#0x40000000
000168  f5ba3a05          SUBS     r10,r10,#0x21400
00016c  bf08              IT       EQ
00016e  f04f0a05          MOVEQ    r10,#5
000172  d020              BEQ      |L4.438|
000174  f1a04a80          SUB      r10,r0,#0x40000000
000178  f5ba3a06          SUBS     r10,r10,#0x21800
00017c  bf08              IT       EQ
00017e  f04f0a06          MOVEQ    r10,#6
000182  d018              BEQ      |L4.438|
000184  f1a04a80          SUB      r10,r0,#0x40000000
000188  f5ba3a07          SUBS     r10,r10,#0x21c00
00018c  bf08              IT       EQ
00018e  f04f0a07          MOVEQ    r10,#7
000192  d010              BEQ      |L4.438|
000194  f1a04a80          SUB      r10,r0,#0x40000000
000198  f5ba3a08          SUBS     r10,r10,#0x22000
00019c  bf08              IT       EQ
00019e  f04f0a08          MOVEQ    r10,#8
0001a2  d008              BEQ      |L4.438|
0001a4  f1a04a80          SUB      r10,r0,#0x40000000
0001a8  f5ba3a09          SUBS     r10,r10,#0x22400
0001ac  bf0c              ITE      EQ
0001ae  f04f0a09          MOVEQ    r10,#9
0001b2  f04f0a0a          MOVNE    r10,#0xa
                  |L4.438|
0001b6  fa0afa04          LSL      r10,r10,r4
;;;263            SYSCFG->EXTICR[position >> 2] = temp;
;;;264    
;;;265            /* Clear EXTI line configuration */
;;;266            temp = EXTI->IMR;
0001ba  4c21              LDR      r4,|L4.576|
0001bc  ea4a0505          ORR      r5,r10,r5             ;262
0001c0  f8cc5808          STR      r5,[r12,#0x808]       ;263
0001c4  684d              LDR      r5,[r1,#4]
0001c6  f8d4c000          LDR      r12,[r4,#0]
;;;267            temp &= ~((uint32_t)iocurrent);
;;;268            if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
0001ca  f4153f80          TST      r5,#0x10000
0001ce  ea2c0c03          BIC      r12,r12,r3            ;267
;;;269            {
;;;270              temp |= iocurrent;
0001d2  bf18              IT       NE
0001d4  ea4c0c03          ORRNE    r12,r12,r3
;;;271            }
;;;272            EXTI->IMR = temp;
;;;273    
;;;274            temp = EXTI->EMR;
0001d8  4d1a              LDR      r5,|L4.580|
0001da  f8c4c000          STR      r12,[r4,#0]           ;272
0001de  684c              LDR      r4,[r1,#4]
0001e0  e000              B        |L4.484|
                  |L4.482|
0001e2  e025              B        |L4.560|
                  |L4.484|
0001e4  f8d5c000          LDR      r12,[r5,#0]
;;;275            temp &= ~((uint32_t)iocurrent);
;;;276            if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
0001e8  f4143f00          TST      r4,#0x20000
0001ec  ea2c0c03          BIC      r12,r12,r3            ;275
;;;277            {
;;;278              temp |= iocurrent;
0001f0  bf18              IT       NE
0001f2  ea4c0c03          ORRNE    r12,r12,r3
;;;279            }
;;;280            EXTI->EMR = temp;
;;;281    
;;;282            /* Clear Rising Falling edge configuration */
;;;283            temp = EXTI->RTSR;
0001f6  f8dfa050          LDR      r10,|L4.584|
0001fa  f8c5c000          STR      r12,[r5,#0]           ;280
0001fe  684c              LDR      r4,[r1,#4]
000200  f8dac000          LDR      r12,[r10,#0]
;;;284            temp &= ~((uint32_t)iocurrent);
;;;285            if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
000204  f4141f80          TST      r4,#0x100000
000208  ea2c0c03          BIC      r12,r12,r3            ;284
;;;286            {
;;;287              temp |= iocurrent;
00020c  bf18              IT       NE
00020e  ea4c0c03          ORRNE    r12,r12,r3
;;;288            }
;;;289            EXTI->RTSR = temp;
;;;290    
;;;291            temp = EXTI->FTSR;
000212  4c0e              LDR      r4,|L4.588|
000214  f8cac000          STR      r12,[r10,#0]          ;289
000218  684d              LDR      r5,[r1,#4]
00021a  f8d4c000          LDR      r12,[r4,#0]
;;;292            temp &= ~((uint32_t)iocurrent);
;;;293            if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
00021e  f4151f00          TST      r5,#0x200000
000222  ea2c0c03          BIC      r12,r12,r3            ;292
;;;294            {
;;;295              temp |= iocurrent;
000226  bf18              IT       NE
000228  ea4c0c03          ORRNE    r12,r12,r3
;;;296            }
;;;297            EXTI->FTSR = temp;
00022c  f8c4c000          STR      r12,[r4,#0]
                  |L4.560|
000230  1c52              ADDS     r2,r2,#1
000232  2a10              CMP      r2,#0x10
000234  f4ffaeee          BCC      |L4.20|
;;;298          }
;;;299        }
;;;300      }
;;;301    }
000238  e8bd8ff8          POP      {r3-r11,pc}
;;;302    
                          ENDP

                  |L4.572|
                          DCD      0x40023844
                  |L4.576|
                          DCD      0x40013c00
                  |L4.580|
                          DCD      0x40013c04
                  |L4.584|
                          DCD      0x40013c08
                  |L4.588|
                          DCD      0x40013c0c

                          AREA ||i.HAL_GPIO_LockPin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_LockPin PROC
;;;464      */
;;;465    HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b081              SUB      sp,sp,#4
;;;466    {
;;;467      __IO uint32_t tmp = GPIO_LCKR_LCKK;
;;;468    
;;;469      /* Check the parameters */
;;;470      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;471    
;;;472      /* Apply lock key write sequence */
;;;473      tmp |= GPIO_Pin;
000002  f4413280          ORR      r2,r1,#0x10000
;;;474      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;475      GPIOx->LCKR = tmp;
000006  9200              STR      r2,[sp,#0]
000008  61c2              STR      r2,[r0,#0x1c]
;;;476      /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
;;;477      GPIOx->LCKR = GPIO_Pin;
00000a  61c1              STR      r1,[r0,#0x1c]
;;;478      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;479      GPIOx->LCKR = tmp;
00000c  9900              LDR      r1,[sp,#0]
00000e  61c1              STR      r1,[r0,#0x1c]
;;;480      /* Read LCKK bit*/
;;;481      tmp = GPIOx->LCKR;
000010  69c1              LDR      r1,[r0,#0x1c]
;;;482    
;;;483     if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
000012  9100              STR      r1,[sp,#0]
000014  69c0              LDR      r0,[r0,#0x1c]
000016  f4103f80          TST      r0,#0x10000
;;;484      {
;;;485        return HAL_OK;
00001a  bf14              ITE      NE
00001c  2000              MOVNE    r0,#0
;;;486      }
;;;487      else
;;;488      {
;;;489        return HAL_ERROR;
00001e  2001              MOVEQ    r0,#1
;;;490      }
;;;491    }
000020  b001              ADD      sp,sp,#4
000022  4770              BX       lr
;;;492    
                          ENDP


                          AREA ||i.HAL_GPIO_ReadPin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_ReadPin PROC
;;;389      */
;;;390    GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6900              LDR      r0,[r0,#0x10]
;;;391    {
;;;392      GPIO_PinState bitstatus;
;;;393    
;;;394      /* Check the parameters */
;;;395      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;396    
;;;397      if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
000002  4008              ANDS     r0,r0,r1
;;;398      {
;;;399        bitstatus = GPIO_PIN_SET;
000004  bf18              IT       NE
000006  2001              MOVNE    r0,#1
;;;400      }
;;;401      else
;;;402      {
;;;403        bitstatus = GPIO_PIN_RESET;
;;;404      }
;;;405      return bitstatus;
;;;406    }
000008  4770              BX       lr
;;;407    
                          ENDP


                          AREA ||i.HAL_GPIO_TogglePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_TogglePin PROC
;;;445      */
;;;446    void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6942              LDR      r2,[r0,#0x14]
;;;447    {
;;;448      /* Check the parameters */
;;;449      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;450    
;;;451      GPIOx->ODR ^= GPIO_Pin;
000002  4051              EORS     r1,r1,r2
000004  6141              STR      r1,[r0,#0x14]
;;;452    }
000006  4770              BX       lr
;;;453    
                          ENDP


                          AREA ||i.HAL_GPIO_WritePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_WritePin PROC
;;;423      */
;;;424    void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
000000  2a00              CMP      r2,#0
;;;425    {
;;;426      /* Check the parameters */
;;;427      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;428      assert_param(IS_GPIO_PIN_ACTION(PinState));
;;;429    
;;;430      if(PinState != GPIO_PIN_RESET)
;;;431      {
;;;432        GPIOx->BSRR = GPIO_Pin;
;;;433      }
;;;434      else
;;;435      {
;;;436        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
000002  bf08              IT       EQ
000004  0409              LSLEQ    r1,r1,#16
000006  6181              STR      r1,[r0,#0x18]
;;;437      }
;;;438    }
000008  4770              BX       lr
;;;439    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F7_V1.11.0\\Drivers\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f7xx_hal_gpio_c_ea787061____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F7_V1.11.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_stm32f7xx_hal_gpio_c_ea787061____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f7xx_hal_gpio_c_ea787061____REVSH|
#line 402
|__asm___20_stm32f7xx_hal_gpio_c_ea787061____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f7xx_hal_gpio_c_ea787061____RRX|
#line 587
|__asm___20_stm32f7xx_hal_gpio_c_ea787061____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
