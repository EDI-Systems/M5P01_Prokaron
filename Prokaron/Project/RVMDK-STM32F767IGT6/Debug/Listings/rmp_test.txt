; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\rmp_test.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\rmp_test.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc\Conf -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\rmp_test.crf ..\..\MProkaron\Benchmark\rmp_test.c]
                          THUMB

                          AREA ||i.Func_1||, CODE, READONLY, ALIGN=2

                  Func_1 PROC
;;;84     
;;;85     void Func_1(void)
000000  4c17              LDR      r4,|L1.96|
000002  2700              MOVS     r7,#0
000004  f04f4580          MOV      r5,#0x40000000
000008  f2427610          MOV      r6,#0x2710
                  |L1.12|
00000c  6a68              LDR      r0,[r5,#0x24]
00000e  0040              LSLS     r0,r0,#1
000010  6020              STR      r0,[r4,#0]  ; Start
000012  f7fffffe          BL       RMP_Yield
000016  1c7f              ADDS     r7,r7,#1
000018  42b7              CMP      r7,r6
00001a  dbf7              BLT      |L1.12|
;;;86     {
;;;87         Test_Yield_1();
;;;88         /* Change priority of thread 2 */
;;;89         RMP_Thd_Set(&Thd_2,2,RMP_MAX_SLICES);
00001c  4f11              LDR      r7,|L1.100|
00001e  2102              MOVS     r1,#2
000020  4811              LDR      r0,|L1.104|
000022  463a              MOV      r2,r7
000024  f7fffffe          BL       RMP_Thd_Set
000028  2000              MOVS     r0,#0
00002a  62a0              STR      r0,[r4,#0x28]  ; Count
                  |L1.44|
00002c  6a68              LDR      r0,[r5,#0x24]
00002e  0040              LSLS     r0,r0,#1
000030  6020              STR      r0,[r4,#0]  ; Start
000032  480d              LDR      r0,|L1.104|
000034  2101              MOVS     r1,#1
000036  463a              MOV      r2,r7
000038  f7fffffe          BL       RMP_Thd_Snd
00003c  6aa0              LDR      r0,[r4,#0x28]  ; Count
00003e  1c40              ADDS     r0,r0,#1
000040  62a0              STR      r0,[r4,#0x28]  ; Count
000042  42b0              CMP      r0,r6
000044  dbf2              BLT      |L1.44|
000046  2700              MOVS     r7,#0
                  |L1.72|
000048  6a68              LDR      r0,[r5,#0x24]
00004a  0040              LSLS     r0,r0,#1
00004c  6020              STR      r0,[r4,#0]  ; Start
00004e  4807              LDR      r0,|L1.108|
000050  2101              MOVS     r1,#1
000052  f7fffffe          BL       RMP_Sem_Post
000056  1c7f              ADDS     r7,r7,#1
000058  42b7              CMP      r7,r6
00005a  dbf5              BLT      |L1.72|
                  |L1.92|
;;;90         Test_Mail_1();
;;;91         Test_Sem_1();
;;;92         while(1);
00005c  e7fe              B        |L1.92|
;;;93     }
;;;94     /* End Function:Test_Yield ***************************************************/
                          ENDP

00005e  0000              DCW      0x0000
                  |L1.96|
                          DCD      ||.data||
                  |L1.100|
                          DCD      0x000186a0
                  |L1.104|
                          DCD      ||.bss||+0x8904
                  |L1.108|
                          DCD      ||.bss||+0x8940

                          AREA ||i.Func_2||, CODE, READONLY, ALIGN=2

                  Func_2 PROC
;;;769    
;;;770    void Func_2(void)
000000  4c70              LDR      r4,|L2.452|
;;;771    {
;;;772        /* Yield tests */
;;;773        Total=0;
000002  2600              MOVS     r6,#0
000004  b082              SUB      sp,sp,#8              ;771
000006  60a6              STR      r6,[r4,#8]  ; Total
000008  f04f4780          MOV      r7,#0x40000000
00000c  f2427510          MOV      r5,#0x2710
000010  ea4f0806          MOV.W    r8,r6
                  |L2.20|
000014  f7fffffe          BL       RMP_Yield
000018  6a78              LDR      r0,[r7,#0x24]
00001a  f1080801          ADD      r8,r8,#1
00001e  0040              LSLS     r0,r0,#1
000020  6060              STR      r0,[r4,#4]  ; End
000022  45a8              CMP      r8,r5
000024  6860              LDR      r0,[r4,#4]  ; End
000026  6821              LDR      r1,[r4,#0]  ; Start
000028  68a2              LDR      r2,[r4,#8]  ; Total
00002a  eba00001          SUB      r0,r0,r1
00002e  4410              ADD      r0,r0,r2
000030  60a0              STR      r0,[r4,#8]  ; Total
000032  dbef              BLT      |L2.20|
;;;774        Test_Yield_2();
;;;775        RMP_PRINTK_S("Yield: ");
000034  a064              ADR      r0,|L2.456|
000036  f7fffffe          BL       RMP_Print_String
;;;776    
;;;777        Yield_Time=Total/10000;
00003a  68a0              LDR      r0,[r4,#8]  ; Total
00003c  fbb0f0f5          UDIV     r0,r0,r5
000040  6120              STR      r0,[r4,#0x10]  ; Yield_Time
;;;778        RMP_PRINTK_I(Yield_Time);
000042  6920              LDR      r0,[r4,#0x10]  ; Yield_Time
000044  f7fffffe          BL       RMP_Print_Int
;;;779        RMP_PRINTK_S(" cycles.\r\n");
000048  a061              ADR      r0,|L2.464|
00004a  f7fffffe          BL       RMP_Print_String
;;;780        /* Change priority of thread 2, just in case */
;;;781        RMP_Thd_Set(&Thd_2,2,RMP_MAX_SLICES);
00004e  f8df818c          LDR      r8,|L2.476|
000052  2102              MOVS     r1,#2
000054  4862              LDR      r0,|L2.480|
000056  4642              MOV      r2,r8
000058  f7fffffe          BL       RMP_Thd_Set
;;;782        
;;;783        /* Mailbox tests */
;;;784        Total=0;
00005c  60a6              STR      r6,[r4,#8]  ; Total
00005e  f04f0900          MOV      r9,#0
                  |L2.98|
000062  4641              MOV      r1,r8
000064  4668              MOV      r0,sp
000066  f7fffffe          BL       RMP_Thd_Rcv
00006a  6a78              LDR      r0,[r7,#0x24]
00006c  f1090901          ADD      r9,r9,#1
000070  0040              LSLS     r0,r0,#1
000072  6060              STR      r0,[r4,#4]  ; End
000074  45a9              CMP      r9,r5
000076  6860              LDR      r0,[r4,#4]  ; End
000078  6821              LDR      r1,[r4,#0]  ; Start
00007a  68a2              LDR      r2,[r4,#8]  ; Total
00007c  eba00001          SUB      r0,r0,r1
000080  4410              ADD      r0,r0,r2
000082  60a0              STR      r0,[r4,#8]  ; Total
000084  dbed              BLT      |L2.98|
;;;785        Test_Mail_2();
;;;786        RMP_PRINTK_S("Mailbox: ");
000086  a057              ADR      r0,|L2.484|
000088  f7fffffe          BL       RMP_Print_String
;;;787        Mailbox_Time=Total/10000;
00008c  68a0              LDR      r0,[r4,#8]  ; Total
00008e  fbb0f0f5          UDIV     r0,r0,r5
000092  6160              STR      r0,[r4,#0x14]  ; Mailbox_Time
;;;788        RMP_PRINTK_I(Mailbox_Time);
000094  6960              LDR      r0,[r4,#0x14]  ; Mailbox_Time
000096  f7fffffe          BL       RMP_Print_Int
;;;789        RMP_PRINTK_S(" cycles.\r\n");
00009a  a04d              ADR      r0,|L2.464|
00009c  f7fffffe          BL       RMP_Print_String
;;;790        
;;;791        /* Semaphore tests */
;;;792        Total=0;
0000a0  60a6              STR      r6,[r4,#8]  ; Total
0000a2  f04f0900          MOV      r9,#0
                  |L2.166|
0000a6  4852              LDR      r0,|L2.496|
0000a8  4641              MOV      r1,r8
0000aa  f7fffffe          BL       RMP_Sem_Pend
0000ae  6a78              LDR      r0,[r7,#0x24]
0000b0  f1090901          ADD      r9,r9,#1
0000b4  0040              LSLS     r0,r0,#1
0000b6  6060              STR      r0,[r4,#4]  ; End
0000b8  45a9              CMP      r9,r5
0000ba  6860              LDR      r0,[r4,#4]  ; End
0000bc  6821              LDR      r1,[r4,#0]  ; Start
0000be  68a2              LDR      r2,[r4,#8]  ; Total
0000c0  eba00001          SUB      r0,r0,r1
0000c4  4410              ADD      r0,r0,r2
0000c6  60a0              STR      r0,[r4,#8]  ; Total
0000c8  dbed              BLT      |L2.166|
;;;793        Test_Sem_2();
;;;794        RMP_PRINTK_S("Semaphore: ");
0000ca  a04a              ADR      r0,|L2.500|
0000cc  f7fffffe          BL       RMP_Print_String
;;;795        Semaphore_Time=Total/10000;
0000d0  68a0              LDR      r0,[r4,#8]  ; Total
0000d2  fbb0f0f5          UDIV     r0,r0,r5
0000d6  61a0              STR      r0,[r4,#0x18]  ; Semaphore_Time
;;;796        RMP_PRINTK_I(Semaphore_Time);
0000d8  69a0              LDR      r0,[r4,#0x18]  ; Semaphore_Time
0000da  f7fffffe          BL       RMP_Print_Int
;;;797        RMP_PRINTK_S(" cycles.\r\n");
0000de  a03c              ADR      r0,|L2.464|
0000e0  f7fffffe          BL       RMP_Print_String
;;;798        
;;;799        /* Memory pool tests */
;;;800    #ifdef TEST_MEM_POOL
;;;801        Test_Mem_Pool();
0000e4  f7fffffe          BL       Test_Mem_Pool
0000e8  4a45              LDR      r2,|L2.512|
0000ea  2010              MOVS     r0,#0x10
0000ec  f8df9114          LDR      r9,|L2.516|
0000f0  f2454160          MOV      r1,#0x5460
;;;802    #endif
;;;803    
;;;804        /* Mailbox from interrupt tests */
;;;805        Total=0;
0000f4  60a6              STR      r6,[r4,#8]  ; Total
0000f6  f8c92000          STR      r2,[r9,#0]  ; TIM4_Handle
0000fa  e9c96001          STRD     r6,r0,[r9,#4]
0000fe  e9c91603          STRD     r1,r6,[r9,#0xc]
000102  4648              MOV      r0,r9
000104  f8c96014          STR      r6,[r9,#0x14]  ; TIM4_Handle
000108  f7fffffe          BL       HAL_TIM_Base_Init
00010c  483e              LDR      r0,|L2.520|
00010e  6801              LDR      r1,[r0,#0]
000110  f0410104          ORR      r1,r1,#4
000114  6001              STR      r1,[r0,#0]
000116  6800              LDR      r0,[r0,#0]
000118  f06f0101          MVN      r1,#1
00011c  f0000004          AND      r0,r0,#4
000120  9000              STR      r0,[sp,#0]
000122  f8d90000          LDR      r0,[r9,#0]  ; TIM4_Handle
000126  6802              LDR      r2,[r0,#0]
000128  f0420201          ORR      r2,r2,#1
00012c  6002              STR      r2,[r0,#0]
00012e  f8d90000          LDR      r0,[r9,#0]  ; TIM4_Handle
000132  6101              STR      r1,[r0,#0x10]
000134  4648              MOV      r0,r9
000136  f7fffffe          BL       HAL_TIM_Base_Start_IT
00013a  62e6              STR      r6,[r4,#0x2c]  ; Count
                  |L2.316|
00013c  4641              MOV      r1,r8
00013e  4668              MOV      r0,sp
000140  f7fffffe          BL       RMP_Thd_Rcv
000144  6a78              LDR      r0,[r7,#0x24]
000146  0040              LSLS     r0,r0,#1
000148  6060              STR      r0,[r4,#4]  ; End
00014a  6860              LDR      r0,[r4,#4]  ; End
00014c  6821              LDR      r1,[r4,#0]  ; Start
00014e  68a2              LDR      r2,[r4,#8]  ; Total
000150  1a40              SUBS     r0,r0,r1
000152  4410              ADD      r0,r0,r2
000154  60a0              STR      r0,[r4,#8]  ; Total
000156  6ae0              LDR      r0,[r4,#0x2c]  ; Count
000158  1c40              ADDS     r0,r0,#1
00015a  62e0              STR      r0,[r4,#0x2c]  ; Count
00015c  42a8              CMP      r0,r5
00015e  dbed              BLT      |L2.316|
;;;806        Int_Init();
;;;807        Test_Mail_ISR();
;;;808        
;;;809        /* Semaphore from interrupt tests */
;;;810        Temp=Total;
000160  68a0              LDR      r0,[r4,#8]  ; Total
000162  60e0              STR      r0,[r4,#0xc]  ; Temp
;;;811        Total=0;
000164  60a6              STR      r6,[r4,#8]  ; Total
000166  6326              STR      r6,[r4,#0x30]  ; Count
                  |L2.360|
000168  4641              MOV      r1,r8
00016a  4821              LDR      r0,|L2.496|
00016c  f7fffffe          BL       RMP_Sem_Pend
000170  6a78              LDR      r0,[r7,#0x24]
000172  0040              LSLS     r0,r0,#1
000174  6060              STR      r0,[r4,#4]  ; End
000176  6860              LDR      r0,[r4,#4]  ; End
000178  6821              LDR      r1,[r4,#0]  ; Start
00017a  68a2              LDR      r2,[r4,#8]  ; Total
00017c  1a40              SUBS     r0,r0,r1
00017e  4410              ADD      r0,r0,r2
000180  60a0              STR      r0,[r4,#8]  ; Total
000182  6b20              LDR      r0,[r4,#0x30]  ; Count
000184  1c40              ADDS     r0,r0,#1
000186  6320              STR      r0,[r4,#0x30]  ; Count
000188  42a8              CMP      r0,r5
00018a  dbed              BLT      |L2.360|
;;;812        Test_Sem_ISR();
;;;813        
;;;814        RMP_PRINTK_S("Mailbox-ISR: ");
00018c  a01f              ADR      r0,|L2.524|
00018e  f7fffffe          BL       RMP_Print_String
;;;815        Mailbox_ISR_Time=Temp/10000;
000192  68e0              LDR      r0,[r4,#0xc]  ; Temp
000194  fbb0f0f5          UDIV     r0,r0,r5
000198  61e0              STR      r0,[r4,#0x1c]  ; Mailbox_ISR_Time
;;;816        RMP_PRINTK_I(Mailbox_ISR_Time);
00019a  69e0              LDR      r0,[r4,#0x1c]  ; Mailbox_ISR_Time
00019c  f7fffffe          BL       RMP_Print_Int
;;;817        RMP_PRINTK_S(" cycles.\r\n");
0001a0  a00b              ADR      r0,|L2.464|
0001a2  f7fffffe          BL       RMP_Print_String
;;;818        RMP_PRINTK_S("Semaphore-ISR: ");
0001a6  a01d              ADR      r0,|L2.540|
0001a8  f7fffffe          BL       RMP_Print_String
;;;819        Semaphore_ISR_Time=Total/10000;
0001ac  68a0              LDR      r0,[r4,#8]  ; Total
0001ae  fbb0f0f5          UDIV     r0,r0,r5
0001b2  6220              STR      r0,[r4,#0x20]  ; Semaphore_ISR_Time
;;;820        RMP_PRINTK_I(Semaphore_ISR_Time);
0001b4  6a20              LDR      r0,[r4,#0x20]  ; Semaphore_ISR_Time
0001b6  f7fffffe          BL       RMP_Print_Int
;;;821        RMP_PRINTK_S(" cycles.\r\n");
0001ba  a005              ADR      r0,|L2.464|
0001bc  f7fffffe          BL       RMP_Print_String
                  |L2.448|
;;;822    
;;;823    #ifdef RMP_COVERAGE
;;;824        Test_Coverage_2();
;;;825        RMP_Print_Coverage();
;;;826    #endif
;;;827        
;;;828        while(1);
0001c0  e7fe              B        |L2.448|
;;;829    }
;;;830    /* End Function:Func_2 *******************************************************/
                          ENDP

0001c2  0000              DCW      0x0000
                  |L2.452|
                          DCD      ||.data||
                  |L2.456|
0001c8  5969656c          DCB      "Yield: ",0
0001cc  643a2000
                  |L2.464|
0001d0  20637963          DCB      " cycles.\r\n",0
0001d4  6c65732e
0001d8  0d0a00  
0001db  00                DCB      0
                  |L2.476|
                          DCD      0x000186a0
                  |L2.480|
                          DCD      ||.bss||+0x8904
                  |L2.484|
0001e4  4d61696c          DCB      "Mailbox: ",0
0001e8  626f783a
0001ec  2000    
0001ee  00                DCB      0
0001ef  00                DCB      0
                  |L2.496|
                          DCD      ||.bss||+0x8940
                  |L2.500|
0001f4  53656d61          DCB      "Semaphore: ",0
0001f8  70686f72
0001fc  653a2000
                  |L2.512|
                          DCD      0x40000800
                  |L2.516|
                          DCD      ||.bss||+0x44
                  |L2.520|
                          DCD      0x40023840
                  |L2.524|
00020c  4d61696c          DCB      "Mailbox-ISR: ",0
000210  626f782d
000214  4953523a
000218  2000    
00021a  00                DCB      0
00021b  00                DCB      0
                  |L2.540|
00021c  53656d61          DCB      "Semaphore-ISR: ",0
000220  70686f72
000224  652d4953
000228  523a2000

                          AREA ||i.HAL_TIM_Base_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_MspInit PROC
;;;80     
;;;81     void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
000000  6800              LDR      r0,[r0,#0]
;;;82     {
000002  b081              SUB      sp,sp,#4
;;;83         if(htim->Instance==TIM4) 
000004  f1a04180          SUB      r1,r0,#0x40000000
000008  f5b16100          SUBS     r1,r1,#0x800
;;;84         {
;;;85             /* Set the interrupt priority */
;;;86             NVIC_SetPriority(TIM4_IRQn,0xFF);
;;;87             /* Enable timer 4 interrupt */
;;;88             NVIC_EnableIRQ(TIM4_IRQn);
;;;89             /* Enable timer 4 clock */
;;;90             __HAL_RCC_TIM4_CLK_ENABLE();
;;;91         }
;;;92     }
00000c  bf1c              ITT      NE
00000e  b001              ADDNE    sp,sp,#4
000010  4770              BXNE     lr
000012  20f0              MOVS     r0,#0xf0
000014  4909              LDR      r1,|L3.60|
000016  f8810400          STRB     r0,[r1,#0x400]
00001a  f04f21e0          MOV      r1,#0xe000e000
00001e  f04f4080          MOV      r0,#0x40000000
000022  f8c10100          STR      r0,[r1,#0x100]
000026  4806              LDR      r0,|L3.64|
000028  6801              LDR      r1,[r0,#0]            ;90
00002a  f0410104          ORR      r1,r1,#4              ;90
00002e  6001              STR      r1,[r0,#0]            ;90
000030  6800              LDR      r0,[r0,#0]            ;90
000032  f0000004          AND      r0,r0,#4              ;90
000036  9000              STR      r0,[sp,#0]            ;90
000038  b001              ADD      sp,sp,#4
00003a  4770              BX       lr
;;;93     
                          ENDP

                  |L3.60|
                          DCD      0xe000e01e
                  |L3.64|
                          DCD      0x40023840

                          AREA ||i.Int_Disable||, CODE, READONLY, ALIGN=1

                  Int_Disable PROC
;;;108    ******************************************************************************/
;;;109    void Int_Disable(void)
000000  f04f21e0          MOV      r1,#0xe000e000
000004  f04f4080          MOV      r0,#0x40000000
000008  f8c10180          STR      r0,[r1,#0x180]
;;;110    {
;;;111        /* Disable timer 4 interrupt */
;;;112        NVIC_DisableIRQ(TIM4_IRQn);
;;;113    }
00000c  4770              BX       lr
;;;114    #endif
                          ENDP


                          AREA ||i.Int_Handler||, CODE, READONLY, ALIGN=2

                  Int_Handler PROC
;;;837    ******************************************************************************/
;;;838    void Int_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;839    {
;;;840        static rmp_cnt_t Count=0;
;;;841        
;;;842        if(Count<10000)
000002  4c1e              LDR      r4,|L5.124|
000004  f2427010          MOV      r0,#0x2710
;;;843        {
;;;844            Count++;
;;;845            Start=COUNTER_READ();
000008  0681              LSLS     r1,r0,#26
00000a  6ba2              LDR      r2,[r4,#0x38]         ;842  ; Count
00000c  4282              CMP      r2,r0                 ;842
00000e  f1020001          ADD      r0,r2,#1              ;844
000012  da14              BGE      |L5.62|
000014  63a0              STR      r0,[r4,#0x38]  ; Count
000016  6a48              LDR      r0,[r1,#0x24]
000018  0040              LSLS     r0,r0,#1
00001a  6020              STR      r0,[r4,#0]  ; Start
;;;846            if(RMP_Thd_Snd_ISR(&Thd_2, 1)<0)
00001c  4818              LDR      r0,|L5.128|
00001e  2101              MOVS     r1,#1
000020  f7fffffe          BL       RMP_Thd_Snd_ISR
000024  2800              CMP      r0,#0
;;;847            {
;;;848                RMP_PRINTK_S("ISR Mailbox send failure: ");
;;;849                RMP_PRINTK_I(Count);
;;;850                RMP_PRINTK_S(" sends.\r\n");
;;;851                while(1);
;;;852            }
;;;853        }
;;;854        else if(Count<20000)
;;;855        {
;;;856            Count++;
;;;857            Start=COUNTER_READ();
;;;858            if(RMP_Sem_Post_ISR(&Sem_1, 1)<0)
;;;859            {
;;;860                RMP_PRINTK_S("ISR semaphore post failure: ");
;;;861                RMP_PRINTK_I(Count);
;;;862                RMP_PRINTK_S(" posts.\r\n");
;;;863                while(1);
;;;864            }
;;;865        }
;;;866        else
;;;867            Int_Disable();
;;;868    }
000026  bfa8              IT       GE
000028  bd10              POPGE    {r4,pc}
00002a  a016              ADR      r0,|L5.132|
00002c  f7fffffe          BL       RMP_Print_String
000030  6ba0              LDR      r0,[r4,#0x38]         ;849  ; Count
000032  f7fffffe          BL       RMP_Print_Int
000036  a01a              ADR      r0,|L5.160|
000038  f7fffffe          BL       RMP_Print_String
                  |L5.60|
00003c  e7fe              B        |L5.60|
                  |L5.62|
00003e  f6446320          MOV      r3,#0x4e20            ;854
000042  429a              CMP      r2,r3                 ;854
000044  bfa2              ITTT     GE                    ;854
000046  f04f20e0          MOVGE    r0,#0xe000e000        ;854
00004a  f8c01180          STRGE    r1,[r0,#0x180]        ;854
00004e  bd10              POPGE    {r4,pc}
000050  63a0              STR      r0,[r4,#0x38]         ;857  ; Count
000052  6a48              LDR      r0,[r1,#0x24]         ;857
000054  0040              LSLS     r0,r0,#1              ;857
000056  6020              STR      r0,[r4,#0]            ;857  ; Start
000058  4814              LDR      r0,|L5.172|
00005a  2101              MOVS     r1,#1                 ;858
00005c  f7fffffe          BL       RMP_Sem_Post_ISR
000060  2800              CMP      r0,#0                 ;858
000062  bfa8              IT       GE
000064  bd10              POPGE    {r4,pc}
000066  a012              ADR      r0,|L5.176|
000068  f7fffffe          BL       RMP_Print_String
00006c  6ba0              LDR      r0,[r4,#0x38]         ;861  ; Count
00006e  f7fffffe          BL       RMP_Print_Int
000072  a017              ADR      r0,|L5.208|
000074  f7fffffe          BL       RMP_Print_String
                  |L5.120|
000078  e7fe              B        |L5.120|
;;;869    #endif
                          ENDP

00007a  0000              DCW      0x0000
                  |L5.124|
                          DCD      ||.data||
                  |L5.128|
                          DCD      ||.bss||+0x8904
                  |L5.132|
000084  49535220          DCB      "ISR Mailbox send failure: ",0
000088  4d61696c
00008c  626f7820
000090  73656e64
000094  20666169
000098  6c757265
00009c  3a2000  
00009f  00                DCB      0
                  |L5.160|
0000a0  2073656e          DCB      " sends.\r\n",0
0000a4  64732e0d
0000a8  0a00    
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L5.172|
                          DCD      ||.bss||+0x8940
                  |L5.176|
0000b0  49535220          DCB      "ISR semaphore post failure: ",0
0000b4  73656d61
0000b8  70686f72
0000bc  6520706f
0000c0  73742066
0000c4  61696c75
0000c8  72653a20
0000cc  00      
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L5.208|
0000d0  20706f73          DCB      " posts.\r\n",0
0000d4  74732e0d
0000d8  0a00    
0000da  00                DCB      0
0000db  00                DCB      0

                          AREA ||i.Int_Init||, CODE, READONLY, ALIGN=2

                  Int_Init PROC
;;;63     ******************************************************************************/
;;;64     void Int_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;65     {
;;;66         /* TIM4 clock = 1/2 CPU clock */
;;;67         TIM4_Handle.Instance=TIM4;
000002  4c14              LDR      r4,|L6.84|
;;;68         TIM4_Handle.Init.Prescaler=0;
;;;69         TIM4_Handle.Init.CounterMode=TIM_COUNTERMODE_DOWN;
000004  2210              MOVS     r2,#0x10
000006  4b12              LDR      r3,|L6.80|
000008  2000              MOVS     r0,#0                 ;68
;;;70         TIM4_Handle.Init.Period=21600;
00000a  f2454160          MOV      r1,#0x5460
00000e  6023              STR      r3,[r4,#0]            ;67  ; TIM4_Handle
000010  e9c40201          STRD     r0,r2,[r4,#4]         ;67
000014  e9c41003          STRD     r1,r0,[r4,#0xc]       ;67
;;;71         TIM4_Handle.Init.ClockDivision=TIM_CLOCKDIVISION_DIV1;
;;;72         TIM4_Handle.Init.RepetitionCounter=0;
;;;73         HAL_TIM_Base_Init(&TIM4_Handle);
000018  6160              STR      r0,[r4,#0x14]  ; TIM4_Handle
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       HAL_TIM_Base_Init
;;;74         __HAL_RCC_TIM4_CLK_ENABLE();
000020  480d              LDR      r0,|L6.88|
000022  6801              LDR      r1,[r0,#0]
000024  f0410104          ORR      r1,r1,#4
000028  6001              STR      r1,[r0,#0]
00002a  6800              LDR      r0,[r0,#0]
;;;75         __HAL_TIM_ENABLE(&TIM4_Handle);
;;;76         /* Clear interrupt pending bit, because we used EGR to update the registers */
;;;77         __HAL_TIM_CLEAR_IT(&TIM4_Handle, TIM_IT_UPDATE);
00002c  f06f0101          MVN      r1,#1
000030  f0000004          AND      r0,r0,#4              ;74
000034  9000              STR      r0,[sp,#0]            ;75
000036  6820              LDR      r0,[r4,#0]            ;75  ; TIM4_Handle
000038  6802              LDR      r2,[r0,#0]            ;75
00003a  f0420201          ORR      r2,r2,#1              ;75
00003e  6002              STR      r2,[r0,#0]            ;75
000040  6820              LDR      r0,[r4,#0]  ; TIM4_Handle
000042  6101              STR      r1,[r0,#0x10]
;;;78         HAL_TIM_Base_Start_IT(&TIM4_Handle);
000044  4620              MOV      r0,r4
000046  e8bd4038          POP      {r3-r5,lr}
00004a  f7ffbffe          B.W      HAL_TIM_Base_Start_IT
;;;79     }
;;;80     
                          ENDP

00004e  0000              DCW      0x0000
                  |L6.80|
                          DCD      0x40000800
                  |L6.84|
                          DCD      ||.bss||+0x44
                  |L6.88|
                          DCD      0x40023840

                          AREA ||i.RMP_Init_Hook||, CODE, READONLY, ALIGN=2

                  RMP_Init_Hook PROC
;;;877    ******************************************************************************/
;;;878    void RMP_Init_Hook(void)
000000  b510              PUSH     {r4,lr}
000002  4c23              LDR      r4,|L7.144|
000004  2000              MOVS     r0,#0
000006  1e41              SUBS     r1,r0,#1
;;;879    {
000008  b082              SUB      sp,sp,#8
00000a  f04f4280          MOV      r2,#0x40000000
00000e  e9c42000          STRD     r2,r0,[r4,#0]
000012  e9c40102          STRD     r0,r1,[r4,#8]
000016  6120              STR      r0,[r4,#0x10]  ; TIM2_Handle
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       HAL_TIM_Base_Init
00001e  481d              LDR      r0,|L7.148|
000020  6801              LDR      r1,[r0,#0]
000022  f0410101          ORR      r1,r1,#1
000026  6001              STR      r1,[r0,#0]
000028  6800              LDR      r0,[r0,#0]
00002a  f0000001          AND      r0,r0,#1
00002e  9000              STR      r0,[sp,#0]
000030  6820              LDR      r0,[r4,#0]  ; TIM2_Handle
000032  6801              LDR      r1,[r0,#0]
000034  f0410101          ORR      r1,r1,#1
000038  6001              STR      r1,[r0,#0]
;;;880    #ifndef MINIMAL_SIZE
;;;881        /* Init the timer */
;;;882        Timer_Init();
;;;883        /* Clean up the structures */
;;;884        RMP_Clear(&Thd_1,sizeof(struct RMP_Thd));
00003a  4817              LDR      r0,|L7.152|
00003c  213c              MOVS     r1,#0x3c
00003e  f7fffffe          BL       RMP_Clear
;;;885        RMP_Clear(&Thd_2,sizeof(struct RMP_Thd));
000042  4816              LDR      r0,|L7.156|
000044  213c              MOVS     r1,#0x3c
000046  f7fffffe          BL       RMP_Clear
;;;886        RMP_Clear(&Sem_1,sizeof(struct RMP_Sem));
00004a  4815              LDR      r0,|L7.160|
00004c  2110              MOVS     r1,#0x10
00004e  f7fffffe          BL       RMP_Clear
;;;887        /* Create counting semaphore */
;;;888        RMP_Sem_Crt(&Sem_1,0);
000052  4813              LDR      r0,|L7.160|
000054  2100              MOVS     r1,#0
000056  f7fffffe          BL       RMP_Sem_Crt
;;;889        /* Start threads */
;;;890        RMP_Thd_Crt(&Thd_1, Func_1, THD1_STACK, (void*)0x1234, 1, 5);
00005a  2005              MOVS     r0,#5
00005c  4a11              LDR      r2,|L7.164|
00005e  2401              MOVS     r4,#1
000060  4911              LDR      r1,|L7.168|
000062  f2412334          MOV      r3,#0x1234
000066  e9cd4000          STRD     r4,r0,[sp,#0]
00006a  f502608d          ADD      r0,r2,#0x468
00006e  f7fffffe          BL       RMP_Thd_Crt
;;;891        RMP_Thd_Crt(&Thd_2, Func_2, THD2_STACK, (void*)0x4321, 1, 1000);
000072  f44f707a          MOV      r0,#0x3e8
000076  4a0d              LDR      r2,|L7.172|
000078  490d              LDR      r1,|L7.176|
00007a  f2443321          MOV      r3,#0x4321
00007e  e9cd4000          STRD     r4,r0,[sp,#0]
000082  f10200a4          ADD      r0,r2,#0xa4
000086  f7fffffe          BL       RMP_Thd_Crt
;;;892    #endif
;;;893    }
00008a  b002              ADD      sp,sp,#8
00008c  bd10              POP      {r4,pc}
;;;894    
                          ENDP

00008e  0000              DCW      0x0000
                  |L7.144|
                          DCD      ||.bss||
                  |L7.148|
                          DCD      0x40023840
                  |L7.152|
                          DCD      ||.bss||+0x88c8
                  |L7.156|
                          DCD      ||.bss||+0x8904
                  |L7.160|
                          DCD      ||.bss||+0x8940
                  |L7.164|
                          DCD      ||.bss||+0x8460
                  |L7.168|
                          DCD      Func_1
                  |L7.172|
                          DCD      ||.bss||+0x8860
                  |L7.176|
                          DCD      Func_2

                          AREA ||i.RMP_Init_Idle||, CODE, READONLY, ALIGN=1

                  RMP_Init_Idle PROC
;;;894    
;;;895    void RMP_Init_Idle(void)
000000  4770              BX       lr
;;;896    {
;;;897        return;
;;;898    }
;;;899    /* End Function:RMP_Init *****************************************************/
                          ENDP


                          AREA ||i.Rand||, CODE, READONLY, ALIGN=2

                  Rand PROC
;;;163    #ifdef TEST_MEM_POOL
;;;164    rmp_ptr_t Rand(void)
000000  4805              LDR      r0,|L9.24|
;;;165    {
;;;166        static rmp_ptr_t LFSR=0xACE1;
;;;167        
;;;168        if((LFSR&0x01)!=0)
000002  6b41              LDR      r1,[r0,#0x34]  ; LFSR
000004  f0110f01          TST      r1,#1
;;;169        {
;;;170            LFSR>>=1;
000008  ea4f0151          LSR      r1,r1,#1
;;;171            LFSR^=0xB400;
00000c  bf18              IT       NE
00000e  f4814134          EORNE    r1,r1,#0xb400
;;;172        }
;;;173        else
;;;174            LFSR>>=1;
;;;175        
;;;176        return LFSR;
000012  6341              STR      r1,[r0,#0x34]  ; LFSR
000014  4608              MOV      r0,r1
;;;177    }
000016  4770              BX       lr
;;;178    
                          ENDP

                  |L9.24|
                          DCD      ||.data||

                          AREA ||i.Swap||, CODE, READONLY, ALIGN=1

                  Swap PROC
;;;178    
;;;179    void Swap(rmp_u8_t* Arg1, rmp_u8_t* Arg2)
000000  780b              LDRB     r3,[r1,#0]
;;;180    {
;;;181        rmp_u8_t Temp;
;;;182        Temp=*Arg1;
000002  7802              LDRB     r2,[r0,#0]
;;;183        *Arg1=*Arg2;
000004  7003              STRB     r3,[r0,#0]
;;;184        *Arg2=Temp;
000006  700a              STRB     r2,[r1,#0]
;;;185    }
000008  4770              BX       lr
;;;186    
                          ENDP


                          AREA ||i.TIM4_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM4_IRQHandler PROC
;;;94     /* The interrupt handler */
;;;95     void TIM4_IRQHandler(void)
000000  4b20              LDR      r3,|L11.132|
000002  f2427010          MOV      r0,#0x2710
;;;96     {
000006  b510              PUSH     {r4,lr}
000008  4c1f              LDR      r4,|L11.136|
00000a  0681              LSLS     r1,r0,#26
;;;97         TIM4->SR=~TIM_FLAG_UPDATE;
00000c  f06f0201          MVN      r2,#1
000010  601a              STR      r2,[r3,#0]
000012  6ba2              LDR      r2,[r4,#0x38]  ; Count
000014  4282              CMP      r2,r0
000016  f1020001          ADD      r0,r2,#1
00001a  da14              BGE      |L11.70|
00001c  63a0              STR      r0,[r4,#0x38]         ;96  ; Count
00001e  6a48              LDR      r0,[r1,#0x24]         ;96
000020  0040              LSLS     r0,r0,#1              ;96
000022  6020              STR      r0,[r4,#0]            ;96  ; Start
000024  4819              LDR      r0,|L11.140|
000026  2101              MOVS     r1,#1                 ;96
000028  f7fffffe          BL       RMP_Thd_Snd_ISR
00002c  2800              CMP      r0,#0                 ;96
;;;98         Int_Handler();
;;;99     }
00002e  bfa8              IT       GE
000030  bd10              POPGE    {r4,pc}
000032  4817              LDR      r0,|L11.144|
000034  f7fffffe          BL       RMP_Print_String
000038  6ba0              LDR      r0,[r4,#0x38]  ; Count
00003a  f7fffffe          BL       RMP_Print_Int
00003e  4815              LDR      r0,|L11.148|
000040  f7fffffe          BL       RMP_Print_String
                  |L11.68|
000044  e7fe              B        |L11.68|
                  |L11.70|
000046  f6446320          MOV      r3,#0x4e20
00004a  429a              CMP      r2,r3
00004c  bfa2              ITTT     GE
00004e  f04f20e0          MOVGE    r0,#0xe000e000
000052  f8c01180          STRGE    r1,[r0,#0x180]
000056  bd10              POPGE    {r4,pc}
000058  63a0              STR      r0,[r4,#0x38]  ; Count
00005a  6a48              LDR      r0,[r1,#0x24]
00005c  0040              LSLS     r0,r0,#1
00005e  6020              STR      r0,[r4,#0]  ; Start
000060  480d              LDR      r0,|L11.152|
000062  2101              MOVS     r1,#1
000064  f7fffffe          BL       RMP_Sem_Post_ISR
000068  2800              CMP      r0,#0
00006a  bfa8              IT       GE
00006c  bd10              POPGE    {r4,pc}
00006e  480b              LDR      r0,|L11.156|
000070  f7fffffe          BL       RMP_Print_String
000074  6ba0              LDR      r0,[r4,#0x38]  ; Count
000076  f7fffffe          BL       RMP_Print_Int
00007a  4809              LDR      r0,|L11.160|
00007c  f7fffffe          BL       RMP_Print_String
                  |L11.128|
000080  e7fe              B        |L11.128|
;;;100    /* End Function:Int_Init *****************************************************/
                          ENDP

000082  0000              DCW      0x0000
                  |L11.132|
                          DCD      0x40000810
                  |L11.136|
                          DCD      ||.data||
                  |L11.140|
                          DCD      ||.bss||+0x8904
                  |L11.144|
                          DCD      ||i.Int_Handler||+0x84
                  |L11.148|
                          DCD      ||i.Int_Handler||+0xa0
                  |L11.152|
                          DCD      ||.bss||+0x8940
                  |L11.156|
                          DCD      ||i.Int_Handler||+0xb0
                  |L11.160|
                          DCD      ||i.Int_Handler||+0xd0

                          AREA ||i.Test_Mail_1||, CODE, READONLY, ALIGN=2

                  Test_Mail_1 PROC
;;;62     
;;;63     void Test_Mail_1(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;64     {
;;;65         static rmp_cnt_t Count;
;;;66         for(Count=0;Count<10000;Count++)
000004  4c0b              LDR      r4,|L12.52|
000006  2000              MOVS     r0,#0
;;;67         {
;;;68             /* Read counter here */
;;;69             Start=COUNTER_READ();
;;;70             RMP_Thd_Snd(&Thd_2, 1, RMP_MAX_SLICES);
000008  4f0b              LDR      r7,|L12.56|
00000a  f04f4680          MOV      r6,#0x40000000        ;69
00000e  f2427510          MOV      r5,#0x2710            ;66
000012  62a0              STR      r0,[r4,#0x28]         ;66  ; Count
                  |L12.20|
000014  6a70              LDR      r0,[r6,#0x24]         ;69
000016  0040              LSLS     r0,r0,#1              ;69
000018  6020              STR      r0,[r4,#0]            ;69  ; Start
00001a  4808              LDR      r0,|L12.60|
00001c  2101              MOVS     r1,#1
00001e  463a              MOV      r2,r7
000020  f7fffffe          BL       RMP_Thd_Snd
000024  6aa0              LDR      r0,[r4,#0x28]         ;66  ; Count
000026  1c40              ADDS     r0,r0,#1              ;66
000028  62a0              STR      r0,[r4,#0x28]         ;66  ; Count
00002a  42a8              CMP      r0,r5                 ;66
00002c  dbf2              BLT      |L12.20|
;;;71         }
;;;72     }
00002e  e8bd81f0          POP      {r4-r8,pc}
;;;73     
                          ENDP

000032  0000              DCW      0x0000
                  |L12.52|
                          DCD      ||.data||
                  |L12.56|
                          DCD      0x000186a0
                  |L12.60|
                          DCD      ||.bss||+0x8904

                          AREA ||i.Test_Mail_2||, CODE, READONLY, ALIGN=2

                  Test_Mail_2 PROC
;;;112    }
;;;113    void Test_Mail_2(void)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;114    {
;;;115        rmp_ptr_t Data;
;;;116        rmp_cnt_t Count;
;;;117        for(Count=0;Count<10000;Count++)
;;;118        {
;;;119            RMP_Thd_Rcv(&Data, RMP_MAX_SLICES);
000004  f8df8034          LDR      r8,|L13.60|
000008  2500              MOVS     r5,#0                 ;117
;;;120            /* Read counter here */
;;;121            End=COUNTER_READ();
00000a  4c0d              LDR      r4,|L13.64|
00000c  f04f4680          MOV      r6,#0x40000000
000010  f2427710          MOV      r7,#0x2710            ;117
                  |L13.20|
000014  4641              MOV      r1,r8                 ;119
000016  4668              MOV      r0,sp                 ;119
000018  f7fffffe          BL       RMP_Thd_Rcv
00001c  6a70              LDR      r0,[r6,#0x24]
00001e  1c6d              ADDS     r5,r5,#1
000020  0040              LSLS     r0,r0,#1
000022  6060              STR      r0,[r4,#4]  ; End
000024  42bd              CMP      r5,r7                 ;117
;;;122            Total+=(rmp_tim_t)(End-Start);
000026  6860              LDR      r0,[r4,#4]  ; End
000028  6821              LDR      r1,[r4,#0]  ; Start
00002a  68a2              LDR      r2,[r4,#8]  ; Total
00002c  eba00001          SUB      r0,r0,r1
000030  4410              ADD      r0,r0,r2
000032  60a0              STR      r0,[r4,#8]  ; Total
000034  dbee              BLT      |L13.20|
;;;123        }
;;;124    }
000036  e8bd83f8          POP      {r3-r9,pc}
;;;125    
                          ENDP

00003a  0000              DCW      0x0000
                  |L13.60|
                          DCD      0x000186a0
                  |L13.64|
                          DCD      ||.data||

                          AREA ||i.Test_Mail_ISR||, CODE, READONLY, ALIGN=2

                  Test_Mail_ISR PROC
;;;137    
;;;138    void Test_Mail_ISR(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;139    {
;;;140        rmp_ptr_t Data;
;;;141        static rmp_cnt_t Count;
;;;142        for(Count=0;Count<10000;Count++)
000002  4c0d              LDR      r4,|L14.56|
000004  2000              MOVS     r0,#0
;;;143        {
;;;144            RMP_Thd_Rcv(&Data, RMP_MAX_SLICES);
000006  4f0d              LDR      r7,|L14.60|
000008  f2427510          MOV      r5,#0x2710            ;142
;;;145            /* Read counter here */
;;;146            End=COUNTER_READ();
00000c  067e              LSLS     r6,r7,#25
00000e  62e0              STR      r0,[r4,#0x2c]         ;142  ; Count
                  |L14.16|
000010  4639              MOV      r1,r7                 ;144
000012  4668              MOV      r0,sp                 ;144
000014  f7fffffe          BL       RMP_Thd_Rcv
000018  6a70              LDR      r0,[r6,#0x24]
00001a  0040              LSLS     r0,r0,#1
00001c  6060              STR      r0,[r4,#4]  ; End
;;;147            Total+=(rmp_tim_t)(End-Start);
00001e  6860              LDR      r0,[r4,#4]  ; End
000020  6821              LDR      r1,[r4,#0]  ; Start
000022  68a2              LDR      r2,[r4,#8]  ; Total
000024  1a40              SUBS     r0,r0,r1
000026  4410              ADD      r0,r0,r2
000028  60a0              STR      r0,[r4,#8]  ; Total
00002a  6ae0              LDR      r0,[r4,#0x2c]         ;142  ; Count
00002c  1c40              ADDS     r0,r0,#1              ;142
00002e  62e0              STR      r0,[r4,#0x2c]         ;142  ; Count
000030  42a8              CMP      r0,r5                 ;142
000032  dbed              BLT      |L14.16|
;;;148        }
;;;149    }
000034  bdf8              POP      {r3-r7,pc}
;;;150    
                          ENDP

000036  0000              DCW      0x0000
                  |L14.56|
                          DCD      ||.data||
                  |L14.60|
                          DCD      0x000186a0

                          AREA ||i.Test_Mem_Pool||, CODE, READONLY, ALIGN=2

                  Test_Mem_Pool PROC
;;;186    
;;;187    void Test_Mem_Pool(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;188    {
;;;189        static void* Mem[8];
;;;190        static rmp_u8_t Alloc[8];
;;;191        static rmp_u8_t Free[8];
;;;192        static rmp_u8_t Size[8];
;;;193        static rmp_ptr_t Amount[8];
;;;194        rmp_cnt_t Count;
;;;195        rmp_cnt_t Test_Count;
;;;196        
;;;197        Amount[0]=TEST_MEM_POOL/32;
000004  4da7              LDR      r5,|L15.676|
000006  f44f7180          MOV      r1,#0x100
;;;198        Amount[1]=TEST_MEM_POOL/64+16;
00000a  2690              MOVS     r6,#0x90
;;;199        Amount[2]=TEST_MEM_POOL/4;
00000c  00c8              LSLS     r0,r1,#3
;;;200        Amount[3]=TEST_MEM_POOL/128+32;
;;;201        Amount[4]=TEST_MEM_POOL/16;
;;;202        Amount[5]=TEST_MEM_POOL/8+16;
;;;203        Amount[6]=TEST_MEM_POOL/128+64;
;;;204        Amount[7]=TEST_MEM_POOL/2-64;
;;;205        
;;;206        /* Initialize the pool */
;;;207        Total=0;
00000e  f1050808          ADD      r8,r5,#8
000012  6029              STR      r1,[r5,#0]  ; Amount
000014  2260              MOVS     r2,#0x60              ;200
000016  606e              STR      r6,[r5,#4]  ; Amount
000018  1083              ASRS     r3,r0,#2              ;201
00001a  2780              MOVS     r7,#0x80              ;203
00001c  4ea2              LDR      r6,|L15.680|
00001e  f44f6482          MOV      r4,#0x410             ;202
000022  f44f6c7c          MOV      r12,#0xfc0            ;204
000026  e888109d          STM      r8,{r0,r2-r4,r7,r12}
00002a  2100              MOVS     r1,#0
00002c  60b1              STR      r1,[r6,#8]  ; Total
;;;208        RMP_Mem_Init(Pool, TEST_MEM_POOL*sizeof(rmp_ptr_t));
00002e  0101              LSLS     r1,r0,#4
000030  489e              LDR      r0,|L15.684|
000032  f7fffffe          BL       RMP_Mem_Init
;;;209        for(Test_Count=0;Test_Count<10000;Test_Count++)
;;;210        {
;;;211            /* Random sequence and number generation */
;;;212            for(Count=0;Count<8;Count++)
000036  f106093c          ADD      r9,r6,#0x3c
00003a  f04f0a00          MOV      r10,#0                ;209
00003e  f1060744          ADD      r7,r6,#0x44
000042  f106084c          ADD      r8,r6,#0x4c
;;;213            {
;;;214                Alloc[Count]=Count;
;;;215                Free[Count]=Count;
;;;216                Size[Count]=Count;
;;;217            }
;;;218            
;;;219            for(Count=7;Count>0;Count--)
;;;220            {
;;;221                Swap(&Alloc[Count], &Alloc[Rand()%(Count+1)]);
;;;222                Swap(&Free[Count], &Free[Rand()%(Count+1)]);
;;;223                Swap(&Size[Count], &Size[Rand()%(Count+1)]);
;;;224            }
;;;225            
;;;226            Start=COUNTER_READ();
000046  f04f4b80          MOV      r11,#0x40000000
                  |L15.74|
00004a  4b99              LDR      r3,|L15.688|
00004c  2400              MOVS     r4,#0                 ;212
00004e  f04f0c08          MOV      r12,#8                ;212
000052  f1030208          ADD      r2,r3,#8              ;212
000056  f1020108          ADD      r1,r2,#8              ;212
                  |L15.90|
00005a  4620              MOV      r0,r4                 ;214
00005c  f8030b01          STRB     r0,[r3],#1            ;214
000060  1c64              ADDS     r4,r4,#1              ;217
000062  f8020b01          STRB     r0,[r2],#1            ;215
000066  f1bc0c01          SUBS     r12,r12,#1            ;216
00006a  f8010b01          STRB     r0,[r1],#1            ;216
00006e  d1f4              BNE      |L15.90|
000070  6b71              LDR      r1,[r6,#0x34]         ;217  ; LFSR
000072  2007              MOVS     r0,#7                 ;219
                  |L15.116|
000074  eb090c00          ADD      r12,r9,r0             ;221
000078  f0110f01          TST      r1,#1                 ;221
00007c  ea4f0151          LSR      r1,r1,#1              ;221
000080  bf18              IT       NE                    ;221
000082  f4814134          EORNE    r1,r1,#0xb400         ;221
000086  1c43              ADDS     r3,r0,#1              ;221
000088  f89c4000          LDRB     r4,[r12,#0]           ;221
00008c  fbb1f2f3          UDIV     r2,r1,r3              ;221
000090  f0110f01          TST      r1,#1                 ;221
000094  fb031212          MLS      r2,r3,r2,r1           ;221
000098  ea4f0151          LSR      r1,r1,#1              ;221
00009c  444a              ADD      r2,r2,r9              ;221
00009e  f892e000          LDRB     lr,[r2,#0]            ;221
0000a2  f88ce000          STRB     lr,[r12,#0]           ;221
0000a6  7014              STRB     r4,[r2,#0]            ;221
0000a8  eb070200          ADD      r2,r7,r0              ;222
0000ac  bf18              IT       NE                    ;222
0000ae  f4814134          EORNE    r1,r1,#0xb400         ;222
0000b2  fbb1fcf3          UDIV     r12,r1,r3             ;222
0000b6  7814              LDRB     r4,[r2,#0]            ;222
0000b8  f0110f01          TST      r1,#1                 ;222
0000bc  fb031c1c          MLS      r12,r3,r12,r1         ;222
0000c0  ea4f0151          LSR      r1,r1,#1              ;222
0000c4  44bc              ADD      r12,r12,r7            ;222
0000c6  f89ce000          LDRB     lr,[r12,#0]           ;222
0000ca  f882e000          STRB     lr,[r2,#0]            ;222
0000ce  eb080200          ADD      r2,r8,r0              ;223
0000d2  f88c4000          STRB     r4,[r12,#0]           ;223
0000d6  bf18              IT       NE                    ;223
0000d8  f4814134          EORNE    r1,r1,#0xb400         ;223
0000dc  fbb1fcf3          UDIV     r12,r1,r3             ;223
0000e0  1e40              SUBS     r0,r0,#1              ;223
0000e2  2800              CMP      r0,#0                 ;223
0000e4  fb03131c          MLS      r3,r3,r12,r1          ;223
0000e8  f892c000          LDRB     r12,[r2,#0]           ;223
0000ec  4443              ADD      r3,r3,r8              ;223
0000ee  781c              LDRB     r4,[r3,#0]            ;223
0000f0  7014              STRB     r4,[r2,#0]            ;223
0000f2  f883c000          STRB     r12,[r3,#0]           ;223
0000f6  dcbd              BGT      |L15.116|
0000f8  6371              STR      r1,[r6,#0x34]  ; LFSR
0000fa  f8db0024          LDR      r0,[r11,#0x24]
0000fe  0040              LSLS     r0,r0,#1
000100  6030              STR      r0,[r6,#0]  ; Start
;;;227            /* Allocation tests */
;;;228            Mem[Alloc[0]]=RMP_Malloc(Pool, Amount[Size[0]]);
000102  f8980000          LDRB     r0,[r8,#0]  ; Size
000106  f8551020          LDR      r1,[r5,r0,LSL #2]
00010a  4868              LDR      r0,|L15.684|
00010c  f7fffffe          BL       RMP_Malloc
000110  4c68              LDR      r4,|L15.692|
000112  f8991000          LDRB     r1,[r9,#0]  ; Alloc
000116  f8440021          STR      r0,[r4,r1,LSL #2]
;;;229            Mem[Alloc[1]]=RMP_Malloc(Pool, Amount[Size[1]]);
00011a  f8980001          LDRB     r0,[r8,#1]  ; Size
00011e  f8551020          LDR      r1,[r5,r0,LSL #2]
000122  f5a44000          SUB      r0,r4,#0x8000
000126  f7fffffe          BL       RMP_Malloc
00012a  f8991001          LDRB     r1,[r9,#1]  ; Alloc
00012e  f8440021          STR      r0,[r4,r1,LSL #2]
;;;230            Mem[Alloc[2]]=RMP_Malloc(Pool, Amount[Size[2]]);
000132  f8980002          LDRB     r0,[r8,#2]  ; Size
000136  f8551020          LDR      r1,[r5,r0,LSL #2]
00013a  f5a44000          SUB      r0,r4,#0x8000
00013e  f7fffffe          BL       RMP_Malloc
000142  f8991002          LDRB     r1,[r9,#2]  ; Alloc
000146  f8440021          STR      r0,[r4,r1,LSL #2]
;;;231            Mem[Alloc[3]]=RMP_Malloc(Pool, Amount[Size[3]]);
00014a  f8980003          LDRB     r0,[r8,#3]  ; Size
00014e  f8551020          LDR      r1,[r5,r0,LSL #2]
000152  f5a44000          SUB      r0,r4,#0x8000
000156  f7fffffe          BL       RMP_Malloc
00015a  f8991003          LDRB     r1,[r9,#3]  ; Alloc
00015e  f8440021          STR      r0,[r4,r1,LSL #2]
;;;232            Mem[Alloc[4]]=RMP_Malloc(Pool, Amount[Size[4]]);
000162  f8980004          LDRB     r0,[r8,#4]  ; Size
000166  f8551020          LDR      r1,[r5,r0,LSL #2]
00016a  f5a44000          SUB      r0,r4,#0x8000
00016e  f7fffffe          BL       RMP_Malloc
000172  f8991004          LDRB     r1,[r9,#4]  ; Alloc
000176  f8440021          STR      r0,[r4,r1,LSL #2]
;;;233            Mem[Alloc[5]]=RMP_Malloc(Pool, Amount[Size[5]]);
00017a  f8980005          LDRB     r0,[r8,#5]  ; Size
00017e  f8551020          LDR      r1,[r5,r0,LSL #2]
000182  f5a44000          SUB      r0,r4,#0x8000
000186  f7fffffe          BL       RMP_Malloc
00018a  f8991005          LDRB     r1,[r9,#5]  ; Alloc
00018e  f8440021          STR      r0,[r4,r1,LSL #2]
;;;234            Mem[Alloc[6]]=RMP_Malloc(Pool, Amount[Size[6]]);
000192  f8980006          LDRB     r0,[r8,#6]  ; Size
000196  f8551020          LDR      r1,[r5,r0,LSL #2]
00019a  f5a44000          SUB      r0,r4,#0x8000
00019e  f7fffffe          BL       RMP_Malloc
0001a2  f8991006          LDRB     r1,[r9,#6]  ; Alloc
0001a6  f8440021          STR      r0,[r4,r1,LSL #2]
;;;235            Mem[Alloc[7]]=RMP_Malloc(Pool, Amount[Size[7]]);
0001aa  f8980007          LDRB     r0,[r8,#7]  ; Size
0001ae  f8551020          LDR      r1,[r5,r0,LSL #2]
0001b2  f5a44000          SUB      r0,r4,#0x8000
0001b6  f7fffffe          BL       RMP_Malloc
0001ba  f8991007          LDRB     r1,[r9,#7]  ; Alloc
0001be  f8440021          STR      r0,[r4,r1,LSL #2]
;;;236    
;;;237            /* Deallocation tests */
;;;238            RMP_Free(Pool,Mem[Free[0]]);
0001c2  7838              LDRB     r0,[r7,#0]  ; Free
0001c4  f8541020          LDR      r1,[r4,r0,LSL #2]
0001c8  f5a44000          SUB      r0,r4,#0x8000
0001cc  f7fffffe          BL       RMP_Free
;;;239            RMP_Free(Pool,Mem[Free[1]]);
0001d0  7878              LDRB     r0,[r7,#1]  ; Free
0001d2  f8541020          LDR      r1,[r4,r0,LSL #2]
0001d6  f5a44000          SUB      r0,r4,#0x8000
0001da  f7fffffe          BL       RMP_Free
;;;240            RMP_Free(Pool,Mem[Free[2]]);
0001de  78b8              LDRB     r0,[r7,#2]  ; Free
0001e0  f8541020          LDR      r1,[r4,r0,LSL #2]
0001e4  f5a44000          SUB      r0,r4,#0x8000
0001e8  f7fffffe          BL       RMP_Free
;;;241            RMP_Free(Pool,Mem[Free[3]]);
0001ec  78f8              LDRB     r0,[r7,#3]  ; Free
0001ee  f8541020          LDR      r1,[r4,r0,LSL #2]
0001f2  f5a44000          SUB      r0,r4,#0x8000
0001f6  f7fffffe          BL       RMP_Free
;;;242            RMP_Free(Pool,Mem[Free[4]]);
0001fa  7938              LDRB     r0,[r7,#4]  ; Free
0001fc  f8541020          LDR      r1,[r4,r0,LSL #2]
000200  f5a44000          SUB      r0,r4,#0x8000
000204  f7fffffe          BL       RMP_Free
;;;243            RMP_Free(Pool,Mem[Free[5]]);
000208  7978              LDRB     r0,[r7,#5]  ; Free
00020a  f8541020          LDR      r1,[r4,r0,LSL #2]
00020e  f5a44000          SUB      r0,r4,#0x8000
000212  f7fffffe          BL       RMP_Free
;;;244            RMP_Free(Pool,Mem[Free[6]]);
000216  79b8              LDRB     r0,[r7,#6]  ; Free
000218  f8541020          LDR      r1,[r4,r0,LSL #2]
00021c  f5a44000          SUB      r0,r4,#0x8000
000220  f7fffffe          BL       RMP_Free
;;;245            RMP_Free(Pool,Mem[Free[7]]);
000224  79f8              LDRB     r0,[r7,#7]  ; Free
000226  f8541020          LDR      r1,[r4,r0,LSL #2]
00022a  f5a44000          SUB      r0,r4,#0x8000
00022e  f7fffffe          BL       RMP_Free
;;;246            End=COUNTER_READ();
000232  f8db0024          LDR      r0,[r11,#0x24]
000236  0040              LSLS     r0,r0,#1
000238  6070              STR      r0,[r6,#4]  ; End
;;;247            Total+=(rmp_tim_t)(End-Start);
00023a  6870              LDR      r0,[r6,#4]  ; End
00023c  6831              LDR      r1,[r6,#0]  ; Start
00023e  68b2              LDR      r2,[r6,#8]  ; Total
000240  1a40              SUBS     r0,r0,r1
000242  4410              ADD      r0,r0,r2
000244  60b0              STR      r0,[r6,#8]  ; Total
;;;248            
;;;249            /* This should always be successful because we deallocated everything else */
;;;250            Mem[0]=RMP_Malloc(Pool, (TEST_MEM_POOL>>7)*127);
000246  f44f51fe          MOV      r1,#0x1fc0
00024a  f5a44000          SUB      r0,r4,#0x8000
00024e  f7fffffe          BL       RMP_Malloc
000252  6020              STR      r0,[r4,#0]            ;223  ; Mem
000254  b1d8              CBZ      r0,|L15.654|
000256  4601              MOV      r1,r0                 ;223
;;;251            if(Mem[0]==0)
;;;252            {
;;;253                RMP_PRINTK_S("Memory test failure: ");
;;;254                RMP_PRINTK_I(Test_Count);
;;;255                RMP_PRINTK_S(" runs.\r\n");
;;;256                while(1);
;;;257            }
;;;258            RMP_Free(Pool, Mem[0]); 
000258  f5a44000          SUB      r0,r4,#0x8000
00025c  f7fffffe          BL       RMP_Free
000260  f10a0a01          ADD      r10,r10,#1
000264  f2427010          MOV      r0,#0x2710
000268  4582              CMP      r10,r0
00026a  f6ffaeee          BLT      |L15.74|
;;;259        }
;;;260        
;;;261        RMP_PRINTK_S("Memory: ");
00026e  a012              ADR      r0,|L15.696|
000270  f7fffffe          BL       RMP_Print_String
;;;262        Memory_Time=Total/160000;
000274  4813              LDR      r0,|L15.708|
000276  68b1              LDR      r1,[r6,#8]  ; Total
000278  fbb1f0f0          UDIV     r0,r1,r0
00027c  6270              STR      r0,[r6,#0x24]  ; Memory_Time
;;;263        RMP_PRINTK_I(Memory_Time);
00027e  6a70              LDR      r0,[r6,#0x24]  ; Memory_Time
000280  f7fffffe          BL       RMP_Print_Int
;;;264        RMP_PRINTK_S(" cycles.\r\n");
000284  e8bd5ff0          POP      {r4-r12,lr}
000288  a00f              ADR      r0,|L15.712|
00028a  f7ffbffe          B.W      RMP_Print_String
                  |L15.654|
00028e  a011              ADR      r0,|L15.724|
000290  f7fffffe          BL       RMP_Print_String
000294  4650              MOV      r0,r10                ;254
000296  f7fffffe          BL       RMP_Print_Int
00029a  a014              ADR      r0,|L15.748|
00029c  f7fffffe          BL       RMP_Print_String
                  |L15.672|
0002a0  e7fe              B        |L15.672|
;;;265    }
;;;266    #endif
                          ENDP

0002a2  0000              DCW      0x0000
                  |L15.676|
                          DCD      ||.bss||+0x80a8
                  |L15.680|
                          DCD      ||.data||
                  |L15.684|
                          DCD      ||.bss||+0x88
                  |L15.688|
                          DCD      ||.data||+0x3c
                  |L15.692|
                          DCD      ||.bss||+0x8088
                  |L15.696|
0002b8  4d656d6f          DCB      "Memory: ",0
0002bc  72793a20
0002c0  00      
0002c1  00                DCB      0
0002c2  00                DCB      0
0002c3  00                DCB      0
                  |L15.708|
                          DCD      0x00027100
                  |L15.712|
0002c8  20637963          DCB      " cycles.\r\n",0
0002cc  6c65732e
0002d0  0d0a00  
0002d3  00                DCB      0
                  |L15.724|
0002d4  4d656d6f          DCB      "Memory test failure: ",0
0002d8  72792074
0002dc  65737420
0002e0  6661696c
0002e4  7572653a
0002e8  2000    
0002ea  00                DCB      0
0002eb  00                DCB      0
                  |L15.748|
0002ec  2072756e          DCB      " runs.\r\n",0
0002f0  732e0d0a
0002f4  00      
0002f5  00                DCB      0
0002f6  00                DCB      0
0002f7  00                DCB      0

                          AREA ||i.Test_Sem_1||, CODE, READONLY, ALIGN=2

                  Test_Sem_1 PROC
;;;73     
;;;74     void Test_Sem_1(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;75     {
;;;76         rmp_cnt_t Count;
;;;77         for(Count=0;Count<10000;Count++)
;;;78         {
;;;79             /* Read counter here */
;;;80             Start=COUNTER_READ();
000004  4f08              LDR      r7,|L16.40|
000006  2400              MOVS     r4,#0                 ;77
000008  f04f4680          MOV      r6,#0x40000000
00000c  f2427510          MOV      r5,#0x2710            ;77
                  |L16.16|
000010  6a70              LDR      r0,[r6,#0x24]
000012  0040              LSLS     r0,r0,#1
000014  6038              STR      r0,[r7,#0]  ; Start
;;;81             RMP_Sem_Post(&Sem_1, 1);
000016  4805              LDR      r0,|L16.44|
000018  2101              MOVS     r1,#1
00001a  f7fffffe          BL       RMP_Sem_Post
00001e  1c64              ADDS     r4,r4,#1
000020  42ac              CMP      r4,r5                 ;77
000022  dbf5              BLT      |L16.16|
;;;82         }
;;;83     }
000024  e8bd81f0          POP      {r4-r8,pc}
;;;84     
                          ENDP

                  |L16.40|
                          DCD      ||.data||
                  |L16.44|
                          DCD      ||.bss||+0x8940

                          AREA ||i.Test_Sem_2||, CODE, READONLY, ALIGN=2

                  Test_Sem_2 PROC
;;;125    
;;;126    void Test_Sem_2(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;127    {
;;;128        rmp_cnt_t Count;
;;;129        for(Count=0;Count<10000;Count++)
;;;130        {
;;;131            RMP_Sem_Pend(&Sem_1, RMP_MAX_SLICES);
000004  f8df8034          LDR      r8,|L17.60|
000008  2500              MOVS     r5,#0                 ;129
;;;132            /* Read counter here */
;;;133            End=COUNTER_READ();
00000a  4c0d              LDR      r4,|L17.64|
00000c  f04f4680          MOV      r6,#0x40000000
000010  f2427710          MOV      r7,#0x2710            ;129
                  |L17.20|
000014  480b              LDR      r0,|L17.68|
000016  4641              MOV      r1,r8                 ;131
000018  f7fffffe          BL       RMP_Sem_Pend
00001c  6a70              LDR      r0,[r6,#0x24]
00001e  1c6d              ADDS     r5,r5,#1
000020  0040              LSLS     r0,r0,#1
000022  6060              STR      r0,[r4,#4]  ; End
000024  42bd              CMP      r5,r7                 ;129
;;;134            Total+=(rmp_tim_t)(End-Start);
000026  6860              LDR      r0,[r4,#4]  ; End
000028  6821              LDR      r1,[r4,#0]  ; Start
00002a  68a2              LDR      r2,[r4,#8]  ; Total
00002c  eba00001          SUB      r0,r0,r1
000030  4410              ADD      r0,r0,r2
000032  60a0              STR      r0,[r4,#8]  ; Total
000034  dbee              BLT      |L17.20|
;;;135        }
;;;136    }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;137    
                          ENDP

00003a  0000              DCW      0x0000
                  |L17.60|
                          DCD      0x000186a0
                  |L17.64|
                          DCD      ||.data||
                  |L17.68|
                          DCD      ||.bss||+0x8940

                          AREA ||i.Test_Sem_ISR||, CODE, READONLY, ALIGN=2

                  Test_Sem_ISR PROC
;;;150    
;;;151    void Test_Sem_ISR(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;152    {
;;;153        static rmp_cnt_t Count;
;;;154        for(Count=0;Count<10000;Count++)
000004  4c0d              LDR      r4,|L18.60|
000006  2000              MOVS     r0,#0
;;;155        {
;;;156            RMP_Sem_Pend(&Sem_1, RMP_MAX_SLICES);
000008  4f0d              LDR      r7,|L18.64|
00000a  f2427510          MOV      r5,#0x2710            ;154
;;;157            /* Read counter here */
;;;158            End=COUNTER_READ();
00000e  067e              LSLS     r6,r7,#25
000010  6320              STR      r0,[r4,#0x30]         ;154  ; Count
                  |L18.18|
000012  480c              LDR      r0,|L18.68|
000014  4639              MOV      r1,r7                 ;156
000016  f7fffffe          BL       RMP_Sem_Pend
00001a  6a70              LDR      r0,[r6,#0x24]
00001c  0040              LSLS     r0,r0,#1
00001e  6060              STR      r0,[r4,#4]  ; End
;;;159            Total+=(rmp_tim_t)(End-Start);
000020  6860              LDR      r0,[r4,#4]  ; End
000022  6821              LDR      r1,[r4,#0]  ; Start
000024  68a2              LDR      r2,[r4,#8]  ; Total
000026  1a40              SUBS     r0,r0,r1
000028  4410              ADD      r0,r0,r2
00002a  60a0              STR      r0,[r4,#8]  ; Total
00002c  6b20              LDR      r0,[r4,#0x30]         ;154  ; Count
00002e  1c40              ADDS     r0,r0,#1              ;154
000030  6320              STR      r0,[r4,#0x30]         ;154  ; Count
000032  42a8              CMP      r0,r5                 ;154
000034  dbed              BLT      |L18.18|
;;;160        }
;;;161    }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;162    
                          ENDP

00003a  0000              DCW      0x0000
                  |L18.60|
                          DCD      ||.data||
                  |L18.64|
                          DCD      0x000186a0
                  |L18.68|
                          DCD      ||.bss||+0x8940

                          AREA ||i.Test_Yield_1||, CODE, READONLY, ALIGN=2

                  Test_Yield_1 PROC
;;;51     ******************************************************************************/
;;;52     void Test_Yield_1(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;53     {
;;;54         rmp_cnt_t Count;
;;;55         for(Count=0;Count<10000;Count++)
;;;56         {
;;;57             /* Read counter here */
;;;58             Start=COUNTER_READ();
000004  4f07              LDR      r7,|L19.36|
000006  2400              MOVS     r4,#0                 ;55
000008  f04f4680          MOV      r6,#0x40000000
00000c  f2427510          MOV      r5,#0x2710            ;55
                  |L19.16|
000010  6a70              LDR      r0,[r6,#0x24]
000012  0040              LSLS     r0,r0,#1
000014  6038              STR      r0,[r7,#0]  ; Start
;;;59             RMP_Yield();
000016  f7fffffe          BL       RMP_Yield
00001a  1c64              ADDS     r4,r4,#1
00001c  42ac              CMP      r4,r5                 ;55
00001e  dbf7              BLT      |L19.16|
;;;60         }
;;;61     }
000020  e8bd81f0          POP      {r4-r8,pc}
;;;62     
                          ENDP

                  |L19.36|
                          DCD      ||.data||

                          AREA ||i.Test_Yield_2||, CODE, READONLY, ALIGN=2

                  Test_Yield_2 PROC
;;;101    ******************************************************************************/
;;;102    void Test_Yield_2(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;103    {
;;;104        rmp_cnt_t Count;
;;;105        for(Count=0;Count<10000;Count++)
;;;106        {
;;;107            RMP_Yield();
;;;108            /* Read counter here */
;;;109            End=COUNTER_READ();
000004  4c0b              LDR      r4,|L20.52|
000006  2500              MOVS     r5,#0                 ;105
000008  f04f4680          MOV      r6,#0x40000000
00000c  f2427710          MOV      r7,#0x2710            ;105
                  |L20.16|
000010  f7fffffe          BL       RMP_Yield
000014  6a70              LDR      r0,[r6,#0x24]
000016  1c6d              ADDS     r5,r5,#1
000018  0040              LSLS     r0,r0,#1
00001a  6060              STR      r0,[r4,#4]  ; End
00001c  42bd              CMP      r5,r7                 ;105
;;;110            Total+=(rmp_tim_t)(End-Start);
00001e  6860              LDR      r0,[r4,#4]  ; End
000020  6821              LDR      r1,[r4,#0]  ; Start
000022  68a2              LDR      r2,[r4,#8]  ; Total
000024  eba00001          SUB      r0,r0,r1
000028  4410              ADD      r0,r0,r2
00002a  60a0              STR      r0,[r4,#8]  ; Total
00002c  dbf0              BLT      |L20.16|
;;;111        };
;;;112    }
00002e  e8bd81f0          POP      {r4-r8,pc}
;;;113    void Test_Mail_2(void)
                          ENDP

000032  0000              DCW      0x0000
                  |L20.52|
                          DCD      ||.data||

                          AREA ||i.Timer_Init||, CODE, READONLY, ALIGN=2

                  Timer_Init PROC
;;;42     ******************************************************************************/
;;;43     void Timer_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;44     {
;;;45         /* TIM2 clock = 1/2 CPU clock */
;;;46         TIM2_Handle.Instance=TIM2;
000002  4c0e              LDR      r4,|L21.60|
;;;47         TIM2_Handle.Init.Prescaler=0;
000004  2000              MOVS     r0,#0
;;;48         TIM2_Handle.Init.CounterMode=TIM_COUNTERMODE_UP;
;;;49         TIM2_Handle.Init.Period=(unsigned int)(-1);
000006  1e41              SUBS     r1,r0,#1
000008  f04f4280          MOV      r2,#0x40000000        ;46
00000c  e9c42000          STRD     r2,r0,[r4,#0]
000010  e9c40102          STRD     r0,r1,[r4,#8]
;;;50         TIM2_Handle.Init.ClockDivision=TIM_CLOCKDIVISION_DIV1;
;;;51         HAL_TIM_Base_Init(&TIM2_Handle);
000014  6120              STR      r0,[r4,#0x10]  ; TIM2_Handle
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       HAL_TIM_Base_Init
;;;52         __HAL_RCC_TIM2_CLK_ENABLE();
00001c  4808              LDR      r0,|L21.64|
00001e  6801              LDR      r1,[r0,#0]
000020  f0410101          ORR      r1,r1,#1
000024  6001              STR      r1,[r0,#0]
000026  6800              LDR      r0,[r0,#0]
000028  f0000001          AND      r0,r0,#1
;;;53         __HAL_TIM_ENABLE(&TIM2_Handle);
00002c  9000              STR      r0,[sp,#0]
00002e  6820              LDR      r0,[r4,#0]  ; TIM2_Handle
000030  6801              LDR      r1,[r0,#0]
000032  f0410101          ORR      r1,r1,#1
000036  6001              STR      r1,[r0,#0]
;;;54     }
000038  bd38              POP      {r3-r5,pc}
;;;55     /* End Function:Timer_Init ***************************************************/
                          ENDP

00003a  0000              DCW      0x0000
                  |L21.60|
                          DCD      ||.bss||
                  |L21.64|
                          DCD      0x40023840

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  TIM2_Handle
                          %        68
                  TIM4_Handle
                          %        68
                  Pool
                          %        32768
                  Mem
                          %        32
                  Amount
                          %        32
                  Stack_1
                          %        1024
                  Stack_2
                          %        1024
                  Thd_1
                          %        60
                  Thd_2
                          %        60
                  Sem_1
                          %        16

                          AREA ||area_number.24||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.bss||
                  Thd_Test
                          %        60

                          AREA ||.data||, DATA, ALIGN=2

                  Start
                          DCD      0x00000000
                  End
                          DCD      0x00000000
                  Total
                          DCD      0x00000000
                  Temp
                          DCD      0x00000000
                  Yield_Time
                          DCD      0x00000000
                  Mailbox_Time
                          DCD      0x00000000
                  Semaphore_Time
                          DCD      0x00000000
                  Mailbox_ISR_Time
                          DCD      0x00000000
                  Semaphore_ISR_Time
                          DCD      0x00000000
                  Memory_Time
                          DCD      0x00000000
                  Count
                          DCD      0x00000000
                  |symbol_number.69|
                          DCD      0x00000000
                  |symbol_number.70|
                          DCD      0x00000000
                  LFSR
                          DCD      0x0000ace1
                  |symbol_number.72|
                          DCD      0x00000000
                  Alloc
                          %        8
                  Free
                          %        8
                  Size
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\MProkaron\\Benchmark\\rmp_test.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_rmp_test_c_db099e62____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F7_V1.11.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_rmp_test_c_db099e62____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_rmp_test_c_db099e62____REVSH|
#line 402
|__asm___10_rmp_test_c_db099e62____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_rmp_test_c_db099e62____RRX|
#line 587
|__asm___10_rmp_test_c_db099e62____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
