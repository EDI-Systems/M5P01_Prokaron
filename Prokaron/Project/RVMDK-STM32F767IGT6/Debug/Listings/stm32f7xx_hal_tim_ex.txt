; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f7xx_hal_tim_ex.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f7xx_hal_tim_ex.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Inc\Conf -I..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f7xx_hal_tim_ex.crf ..\..\..\M0P0_Library\STM32Cube_FW_F7_V1.11.0\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_tim_ex.c]
                          THUMB

                          AREA ||i.HAL_TIMEx_BreakCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_BreakCallback PROC
;;;1990     */
;;;1991   __weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1992   {
;;;1993     /* Prevent unused argument(s) compilation warning */
;;;1994     UNUSED(htim);
;;;1995    
;;;1996     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1997               the HAL_TIMEx_BreakCallback could be implemented in the user file
;;;1998      */
;;;1999   }
;;;2000   
                          ENDP


                          AREA ||i.HAL_TIMEx_CommutationCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_CommutationCallback PROC
;;;1974     */
;;;1975   __weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1976   {
;;;1977     /* Prevent unused argument(s) compilation warning */
;;;1978     UNUSED(htim);
;;;1979    
;;;1980     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1981               the HAL_TIMEx_CommutationCallback could be implemented in the user file
;;;1982      */
;;;1983   }
;;;1984   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigBreakDeadTime||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigBreakDeadTime PROC
;;;1713     */ 
;;;1714   HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
000000  6bc2              LDR      r2,[r0,#0x3c]
;;;1715                                                 TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
;;;1716   {
;;;1717     uint32_t tmpbdtr = 0;
;;;1718     
;;;1719     /* Check the parameters */
;;;1720     assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
;;;1721     assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
;;;1722     assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
;;;1723     assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
;;;1724     assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
;;;1725     assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
;;;1726     assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
;;;1727     assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
;;;1728     assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
;;;1729     assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
;;;1730     assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
;;;1731     assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
;;;1732     
;;;1733     /* Check input state */
;;;1734     __HAL_LOCK(htim);
000002  2a01              CMP      r2,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;1735   
;;;1736     /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
;;;1737        the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;1738     /* Set the BDTR bits */
;;;1739     MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
;;;1740     MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
;;;1741     MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
;;;1742     MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
;;;1743     MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
;;;1744     MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
;;;1745     MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
;;;1746     MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
;;;1747     MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
;;;1748     
;;;1749     if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
;;;1750     {
;;;1751       assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
;;;1752       assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
;;;1753       assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
;;;1754       
;;;1755       /* Set the BREAK2 input related BDTR bits */
;;;1756       MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
;;;1757       MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
;;;1758       MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
;;;1759     }
;;;1760     
;;;1761   
;;;1762     
;;;1763     /* Set TIMx_BDTR */
;;;1764     htim->Instance->BDTR = tmpbdtr;
;;;1765     
;;;1766     __HAL_UNLOCK(htim);
;;;1767     
;;;1768     return HAL_OK;
;;;1769   }
000008  4770              BXEQ     lr
00000a  b430              PUSH     {r4,r5}               ;1716
00000c  2201              MOVS     r2,#1                 ;1734
00000e  63c2              STR      r2,[r0,#0x3c]         ;1734
000010  e9d1c202          LDRD     r12,r2,[r1,#8]        ;1734
000014  f4227240          BIC      r2,r2,#0x300          ;1740
000018  ea42020c          ORR      r2,r2,r12             ;1740
00001c  e9d1c300          LDRD     r12,r3,[r1,#0]        ;1741
000020  f4226280          BIC      r2,r2,#0x400          ;1741
000024  431a              ORRS     r2,r2,r3              ;1741
000026  f4226200          BIC      r2,r2,#0x800          ;1742
00002a  e9d14304          LDRD     r4,r3,[r1,#0x10]      ;1743
00002e  ea42020c          ORR      r2,r2,r12             ;1742
000032  f4225280          BIC      r2,r2,#0x1000         ;1743
000036  4322              ORRS     r2,r2,r4              ;1743
000038  8b0c              LDRH     r4,[r1,#0x18]         ;1747
00003a  f4225c00          BIC      r12,r2,#0x2000        ;1744
00003e  6a8a              LDR      r2,[r1,#0x28]         ;1745
000040  ea4c0303          ORR      r3,r12,r3             ;1744
000044  f4234380          BIC      r3,r3,#0x4000         ;1745
000048  ea430c02          ORR      r12,r3,r2             ;1745
00004c  6803              LDR      r3,[r0,#0]            ;1749
00004e  f42c4500          BIC      r5,r12,#0x8000        ;1746
000052  432a              ORRS     r2,r2,r5              ;1746
000054  f4222270          BIC      r2,r2,#0xf0000        ;1747
000058  f1a34c80          SUB      r12,r3,#0x40000000    ;1749
00005c  f5bc3c80          SUBS     r12,r12,#0x10000      ;1749
000060  ea424204          ORR      r2,r2,r4,LSL #16      ;1747
000064  bf1c              ITT      NE                    ;1749
000066  f1a34c80          SUBNE    r12,r3,#0x40000000    ;1749
00006a  f5bc3c82          SUBSNE   r12,r12,#0x10400      ;1749
00006e  d10d              BNE      |L3.140|
000070  f8b1c024          LDRH     r12,[r1,#0x24]        ;1756
000074  f4220570          BIC      r5,r2,#0xf00000       ;1756
000078  e9d14207          LDRD     r4,r2,[r1,#0x1c]      ;1756
00007c  ea45510c          ORR      r1,r5,r12,LSL #20     ;1756
000080  f0217180          BIC      r1,r1,#0x1000000      ;1757
000084  4321              ORRS     r1,r1,r4              ;1757
000086  f0217100          BIC      r1,r1,#0x2000000      ;1758
00008a  430a              ORRS     r2,r2,r1              ;1758
                  |L3.140|
00008c  645a              STR      r2,[r3,#0x44]         ;1764
00008e  2100              MOVS     r1,#0                 ;1766
000090  63c1              STR      r1,[r0,#0x3c]         ;1768
000092  bc30              POP      {r4,r5}
000094  4608              MOV      r0,r1                 ;1768
000096  4770              BX       lr
;;;1770   #if defined (STM32F765xx) || defined(STM32F767xx) || defined(STM32F769xx) || defined(STM32F777xx) || defined(STM32F779xx)
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigBreakInput||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigBreakInput PROC
;;;1780     */
;;;1781   HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
000000  e92d01f0          PUSH     {r4-r8}
;;;1782                                                uint32_t BreakInput,
;;;1783                                                TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
;;;1784   
;;;1785   {
;;;1786     uint32_t tmporx = 0;
;;;1787     uint32_t bkin_enable_mask = 0;
000004  2300              MOVS     r3,#0
;;;1788     uint32_t bkin_polarity_mask = 0;
;;;1789     uint32_t bkin_enable_bitpos = 0;
;;;1790     uint32_t bkin_polarity_bitpos = 0;
;;;1791   
;;;1792     /* Check the parameters */
;;;1793     assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
;;;1794     assert_param(IS_TIM_BREAKINPUT(BreakInput));
;;;1795     assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
;;;1796     assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
;;;1797     if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
;;;1798     {
;;;1799       assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
;;;1800     }
;;;1801   
;;;1802     /* Check input state */
;;;1803     __HAL_LOCK(htim);
000006  6bc6              LDR      r6,[r0,#0x3c]
000008  469c              MOV      r12,r3                ;1788
00000a  461d              MOV      r5,r3                 ;1789
00000c  2e01              CMP      r6,#1
00000e  461c              MOV      r4,r3                 ;1790
000010  bf02              ITTT     EQ
000012  2002              MOVEQ    r0,#2
;;;1804     
;;;1805     switch(sBreakInputConfig->Source)
;;;1806     {
;;;1807     case TIM_BREAKINPUTSOURCE_BKIN:
;;;1808       {
;;;1809         bkin_enable_mask = TIM1_AF1_BKINE;
;;;1810         bkin_enable_bitpos = 0;
;;;1811         bkin_polarity_mask = TIM1_AF1_BKINP;
;;;1812         bkin_polarity_bitpos = 9;
;;;1813       }
;;;1814       break;
;;;1815     
;;;1816     case TIM_BREAKINPUTSOURCE_DFSDM1:
;;;1817       {
;;;1818         bkin_enable_mask = TIM1_AF1_BKDF1BKE;
;;;1819         bkin_enable_bitpos = 8;
;;;1820       }
;;;1821       break;    
;;;1822   
;;;1823     default:
;;;1824       break;
;;;1825     }
;;;1826     
;;;1827     switch(BreakInput)
;;;1828     {
;;;1829       case TIM_BREAKINPUT_BRK:
;;;1830         {
;;;1831           /* Get the TIMx_AF1 register value */
;;;1832           tmporx = htim->Instance->AF1;
;;;1833           
;;;1834           /* Enable the break input */
;;;1835           tmporx &= ~bkin_enable_mask;
;;;1836           tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
;;;1837           
;;;1838           if(sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
;;;1839           {
;;;1840             tmporx &= ~bkin_polarity_mask;
;;;1841             tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
;;;1842           }
;;;1843           /* Set TIMx_AF1 */
;;;1844           htim->Instance->AF1 = tmporx;        
;;;1845         }
;;;1846           break;
;;;1847       case TIM_BREAKINPUT_BRK2:
;;;1848         {
;;;1849           /* Get the TIMx_AF2 register value */
;;;1850           tmporx = htim->Instance->AF2;
;;;1851   
;;;1852           /* Enable the break input */
;;;1853           tmporx &= ~bkin_enable_mask;
;;;1854           tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
;;;1855   
;;;1856           if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
;;;1857           {
;;;1858             tmporx &= ~bkin_polarity_mask;
;;;1859             tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
;;;1860           }
;;;1861   
;;;1862           /* Set TIMx_AF2 */
;;;1863           htim->Instance->AF2 = tmporx;        
;;;1864         }
;;;1865         break;    
;;;1866     default:
;;;1867       break;
;;;1868     }
;;;1869     
;;;1870     __HAL_UNLOCK(htim);
;;;1871   
;;;1872     return HAL_OK;
;;;1873   }
000014  e8bd01f0          POPEQ    {r4-r8}
000018  4770              BXEQ     lr
00001a  2601              MOVS     r6,#1                 ;1803
00001c  63c6              STR      r6,[r0,#0x3c]         ;1805
00001e  6816              LDR      r6,[r2,#0]            ;1805
000020  2e01              CMP      r6,#1                 ;1805
000022  d005              BEQ      |L4.48|
000024  2e08              CMP      r6,#8                 ;1805
000026  bf04              ITT      EQ                    ;1818
000028  f44f7380          MOVEQ    r3,#0x100             ;1818
00002c  2508              MOVEQ    r5,#8                 ;1819
00002e  e003              B        |L4.56|
                  |L4.48|
000030  2301              MOVS     r3,#1                 ;1809
000032  2409              MOVS     r4,#9                 ;1812
000034  f44f7c00          MOV      r12,#0x200            ;1811
                  |L4.56|
000038  2901              CMP      r1,#1                 ;1827
00003a  d002              BEQ      |L4.66|
00003c  2902              CMP      r1,#2                 ;1827
00003e  d015              BEQ      |L4.108|
000040  e028              B        |L4.148|
                  |L4.66|
000042  6807              LDR      r7,[r0,#0]            ;1836
000044  f8d28004          LDR      r8,[r2,#4]            ;1832
000048  6e39              LDR      r1,[r7,#0x60]         ;1832
00004a  fa08f505          LSL      r5,r8,r5              ;1836
00004e  401d              ANDS     r5,r5,r3              ;1836
000050  4399              BICS     r1,r1,r3              ;1835
000052  2e08              CMP      r6,#8                 ;1838
000054  ea450101          ORR      r1,r5,r1              ;1836
000058  d006              BEQ      |L4.104|
00005a  6892              LDR      r2,[r2,#8]            ;1841
00005c  ea21010c          BIC      r1,r1,r12             ;1840
000060  40a2              LSLS     r2,r2,r4              ;1841
000062  ea02020c          AND      r2,r2,r12             ;1841
000066  4311              ORRS     r1,r1,r2              ;1841
                  |L4.104|
000068  6639              STR      r1,[r7,#0x60]         ;1844
00006a  e013              B        |L4.148|
                  |L4.108|
00006c  6807              LDR      r7,[r0,#0]            ;1854
00006e  f8d28004          LDR      r8,[r2,#4]            ;1850
000072  6e79              LDR      r1,[r7,#0x64]         ;1850
000074  fa08f505          LSL      r5,r8,r5              ;1854
000078  401d              ANDS     r5,r5,r3              ;1854
00007a  4399              BICS     r1,r1,r3              ;1853
00007c  2e08              CMP      r6,#8                 ;1856
00007e  ea450101          ORR      r1,r5,r1              ;1854
000082  d006              BEQ      |L4.146|
000084  6892              LDR      r2,[r2,#8]            ;1859
000086  ea21010c          BIC      r1,r1,r12             ;1858
00008a  40a2              LSLS     r2,r2,r4              ;1859
00008c  ea02020c          AND      r2,r2,r12             ;1859
000090  4311              ORRS     r1,r1,r2              ;1859
                  |L4.146|
000092  6679              STR      r1,[r7,#0x64]         ;1863
                  |L4.148|
000094  2100              MOVS     r1,#0                 ;1870
000096  63c1              STR      r1,[r0,#0x3c]         ;1872
000098  e8bd01f0          POP      {r4-r8}
00009c  4608              MOV      r0,r1                 ;1872
00009e  4770              BX       lr
;;;1874   #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutationEvent PROC
;;;1503     */
;;;1504   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  6bc3              LDR      r3,[r0,#0x3c]
;;;1505   {
;;;1506     /* Check the parameters */
;;;1507     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1508     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1509     
;;;1510     __HAL_LOCK(htim);
000002  2b01              CMP      r3,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;1511     
;;;1512     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1513         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1514     {    
;;;1515       /* Select the Input trigger */
;;;1516       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1517       htim->Instance->SMCR |= InputTrigger;
;;;1518     }
;;;1519       
;;;1520     /* Select the Capture Compare preload feature */
;;;1521     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1522     /* Select the Commutation event source */
;;;1523     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1524     htim->Instance->CR2 |= CommutationSource;
;;;1525       
;;;1526     __HAL_UNLOCK(htim);
;;;1527     
;;;1528     return HAL_OK;
;;;1529   }
000008  4770              BXEQ     lr
00000a  2301              MOVS     r3,#1                 ;1510
00000c  2900              CMP      r1,#0                 ;1512
00000e  63c3              STR      r3,[r0,#0x3c]         ;1510
000010  bf18              IT       NE                    ;1512
000012  2910              CMPNE    r1,#0x10              ;1512
000014  d003              BEQ      |L5.30|
000016  2920              CMP      r1,#0x20              ;1512
000018  bf18              IT       NE                    ;1512
00001a  2930              CMPNE    r1,#0x30              ;1512
00001c  d10c              BNE      |L5.56|
                  |L5.30|
00001e  6803              LDR      r3,[r0,#0]            ;1516
000020  f8d3c008          LDR      r12,[r3,#8]           ;1516
000024  f02c0c70          BIC      r12,r12,#0x70         ;1516
000028  f8c3c008          STR      r12,[r3,#8]           ;1516
00002c  6803              LDR      r3,[r0,#0]            ;1517
00002e  f8d3c008          LDR      r12,[r3,#8]           ;1517
000032  ea4c0101          ORR      r1,r12,r1             ;1517
000036  6099              STR      r1,[r3,#8]            ;1517
                  |L5.56|
000038  6801              LDR      r1,[r0,#0]            ;1521
00003a  2300              MOVS     r3,#0                 ;1526
00003c  f8d1c004          LDR      r12,[r1,#4]           ;1521
000040  f04c0c01          ORR      r12,r12,#1            ;1521
000044  f8c1c004          STR      r12,[r1,#4]           ;1521
000048  6801              LDR      r1,[r0,#0]            ;1523
00004a  f8d1c004          LDR      r12,[r1,#4]           ;1523
00004e  f02c0c04          BIC      r12,r12,#4            ;1523
000052  f8c1c004          STR      r12,[r1,#4]           ;1523
000056  6801              LDR      r1,[r0,#0]            ;1524
000058  f8d1c004          LDR      r12,[r1,#4]           ;1524
00005c  ea4c0202          ORR      r2,r12,r2             ;1524
000060  604a              STR      r2,[r1,#4]            ;1524
000062  63c3              STR      r3,[r0,#0x3c]         ;1528
000064  4618              MOV      r0,r3                 ;1528
000066  4770              BX       lr
;;;1530   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_ConfigCommutationEvent_DMA PROC
;;;1607     */
;;;1608   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  6bc3              LDR      r3,[r0,#0x3c]
;;;1609   {
;;;1610     /* Check the parameters */
;;;1611     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1612     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1613     
;;;1614     __HAL_LOCK(htim);
000002  2b01              CMP      r3,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;1615     
;;;1616     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1617         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1618     {    
;;;1619       /* Select the Input trigger */
;;;1620       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1621       htim->Instance->SMCR |= InputTrigger;
;;;1622     }
;;;1623     
;;;1624     /* Select the Capture Compare preload feature */
;;;1625     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1626     /* Select the Commutation event source */
;;;1627     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1628     htim->Instance->CR2 |= CommutationSource;
;;;1629     
;;;1630     /* Enable the Commutation DMA Request */
;;;1631     /* Set the DMA Commutation Callback */
;;;1632     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = HAL_TIMEx_DMACommutationCplt;     
;;;1633     /* Set the DMA error callback */
;;;1634     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = HAL_TIM_DMAError;
;;;1635     
;;;1636     /* Enable the Commutation DMA Request */
;;;1637     __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
;;;1638   
;;;1639     __HAL_UNLOCK(htim);
;;;1640     
;;;1641     return HAL_OK;
;;;1642   }  
000008  4770              BXEQ     lr
00000a  2301              MOVS     r3,#1                 ;1614
00000c  2900              CMP      r1,#0                 ;1616
00000e  63c3              STR      r3,[r0,#0x3c]         ;1614
000010  bf18              IT       NE                    ;1616
000012  2910              CMPNE    r1,#0x10              ;1616
000014  d003              BEQ      |L6.30|
000016  2920              CMP      r1,#0x20              ;1616
000018  bf18              IT       NE                    ;1616
00001a  2930              CMPNE    r1,#0x30              ;1616
00001c  d10c              BNE      |L6.56|
                  |L6.30|
00001e  6803              LDR      r3,[r0,#0]            ;1620
000020  f8d3c008          LDR      r12,[r3,#8]           ;1620
000024  f02c0c70          BIC      r12,r12,#0x70         ;1620
000028  f8c3c008          STR      r12,[r3,#8]           ;1620
00002c  6803              LDR      r3,[r0,#0]            ;1621
00002e  f8d3c008          LDR      r12,[r3,#8]           ;1621
000032  ea4c0101          ORR      r1,r12,r1             ;1621
000036  6099              STR      r1,[r3,#8]            ;1621
                  |L6.56|
000038  6801              LDR      r1,[r0,#0]            ;1625
00003a  2300              MOVS     r3,#0                 ;1639
00003c  f8d1c004          LDR      r12,[r1,#4]           ;1625
000040  f04c0c01          ORR      r12,r12,#1            ;1625
000044  f8c1c004          STR      r12,[r1,#4]           ;1625
000048  6801              LDR      r1,[r0,#0]            ;1627
00004a  f8d1c004          LDR      r12,[r1,#4]           ;1627
00004e  f02c0c04          BIC      r12,r12,#4            ;1627
000052  f8c1c004          STR      r12,[r1,#4]           ;1627
000056  6801              LDR      r1,[r0,#0]            ;1628
000058  f8d1c004          LDR      r12,[r1,#4]           ;1628
00005c  ea4c0202          ORR      r2,r12,r2             ;1628
000060  604a              STR      r2,[r1,#4]            ;1628
000062  6b42              LDR      r2,[r0,#0x34]         ;1632
000064  4906              LDR      r1,|L6.128|
000066  6411              STR      r1,[r2,#0x40]         ;1634
000068  6b42              LDR      r2,[r0,#0x34]         ;1634
00006a  4906              LDR      r1,|L6.132|
00006c  6511              STR      r1,[r2,#0x50]         ;1637
00006e  6801              LDR      r1,[r0,#0]            ;1637
000070  68ca              LDR      r2,[r1,#0xc]          ;1637
000072  f4425200          ORR      r2,r2,#0x2000         ;1637
000076  60ca              STR      r2,[r1,#0xc]          ;1637
000078  63c3              STR      r3,[r0,#0x3c]         ;1641
00007a  2000              MOVS     r0,#0                 ;1641
00007c  4770              BX       lr
;;;1643   
                          ENDP

00007e  0000              DCW      0x0000
                  |L6.128|
                          DCD      TIMEx_DMACommutationCplt
                  |L6.132|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutationEvent_IT PROC
;;;1553     */
;;;1554   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  6bc3              LDR      r3,[r0,#0x3c]
;;;1555   {
;;;1556     /* Check the parameters */
;;;1557     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1558     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1559     
;;;1560     __HAL_LOCK(htim);
000002  2b01              CMP      r3,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;1561     
;;;1562     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1563         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1564     {    
;;;1565       /* Select the Input trigger */
;;;1566       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1567       htim->Instance->SMCR |= InputTrigger;
;;;1568     }
;;;1569     
;;;1570     /* Select the Capture Compare preload feature */
;;;1571     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1572     /* Select the Commutation event source */
;;;1573     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1574     htim->Instance->CR2 |= CommutationSource;
;;;1575       
;;;1576     /* Enable the Commutation Interrupt Request */
;;;1577     __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
;;;1578   
;;;1579     __HAL_UNLOCK(htim);
;;;1580     
;;;1581     return HAL_OK;
;;;1582   }
000008  4770              BXEQ     lr
00000a  2301              MOVS     r3,#1                 ;1560
00000c  2900              CMP      r1,#0                 ;1562
00000e  63c3              STR      r3,[r0,#0x3c]         ;1560
000010  bf18              IT       NE                    ;1562
000012  2910              CMPNE    r1,#0x10              ;1562
000014  d003              BEQ      |L7.30|
000016  2920              CMP      r1,#0x20              ;1562
000018  bf18              IT       NE                    ;1562
00001a  2930              CMPNE    r1,#0x30              ;1562
00001c  d10c              BNE      |L7.56|
                  |L7.30|
00001e  6803              LDR      r3,[r0,#0]            ;1566
000020  f8d3c008          LDR      r12,[r3,#8]           ;1566
000024  f02c0c70          BIC      r12,r12,#0x70         ;1566
000028  f8c3c008          STR      r12,[r3,#8]           ;1566
00002c  6803              LDR      r3,[r0,#0]            ;1567
00002e  f8d3c008          LDR      r12,[r3,#8]           ;1567
000032  ea4c0101          ORR      r1,r12,r1             ;1567
000036  6099              STR      r1,[r3,#8]            ;1567
                  |L7.56|
000038  6801              LDR      r1,[r0,#0]            ;1571
00003a  2300              MOVS     r3,#0                 ;1579
00003c  f8d1c004          LDR      r12,[r1,#4]           ;1571
000040  f04c0c01          ORR      r12,r12,#1            ;1571
000044  f8c1c004          STR      r12,[r1,#4]           ;1571
000048  6801              LDR      r1,[r0,#0]            ;1573
00004a  f8d1c004          LDR      r12,[r1,#4]           ;1573
00004e  f02c0c04          BIC      r12,r12,#4            ;1573
000052  f8c1c004          STR      r12,[r1,#4]           ;1573
000056  6801              LDR      r1,[r0,#0]            ;1574
000058  f8d1c004          LDR      r12,[r1,#4]           ;1574
00005c  ea4c0202          ORR      r2,r12,r2             ;1574
000060  604a              STR      r2,[r1,#4]            ;1574
000062  6801              LDR      r1,[r0,#0]            ;1577
000064  68ca              LDR      r2,[r1,#0xc]          ;1577
000066  f0420220          ORR      r2,r2,#0x20           ;1577
00006a  60ca              STR      r2,[r1,#0xc]          ;1577
00006c  63c3              STR      r3,[r0,#0x3c]         ;1581
00006e  2000              MOVS     r0,#0                 ;1581
000070  4770              BX       lr
;;;1583   
                          ENDP


                          AREA ||i.HAL_TIMEx_GroupChannel5||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_GroupChannel5 PROC
;;;1925     */
;;;1926   HAL_StatusTypeDef HAL_TIMEx_GroupChannel5(TIM_HandleTypeDef *htim, uint32_t OCRef)
000000  6bc2              LDR      r2,[r0,#0x3c]
;;;1927   {
;;;1928     /* Check parameters */
;;;1929     assert_param(IS_TIM_COMBINED3PHASEPWM_INSTANCE(htim->Instance));
;;;1930     assert_param(IS_TIM_GROUPCH5(OCRef));
;;;1931   
;;;1932     /* Process Locked */
;;;1933     __HAL_LOCK(htim);
000002  2a01              CMP      r2,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;1934     
;;;1935     htim->State = HAL_TIM_STATE_BUSY;
;;;1936     
;;;1937     /* Clear GC5Cx bit fields */
;;;1938     htim->Instance->CCR5 &= ~(TIM_CCR5_GC5C3|TIM_CCR5_GC5C2|TIM_CCR5_GC5C1);
;;;1939     
;;;1940     /* Set GC5Cx bit fields */
;;;1941     htim->Instance->CCR5 |= OCRef;
;;;1942                                      
;;;1943     htim->State = HAL_TIM_STATE_READY;                                 
;;;1944     
;;;1945     __HAL_UNLOCK(htim);
;;;1946     
;;;1947     return HAL_OK;
;;;1948   }
000008  4770              BXEQ     lr
00000a  2201              MOVS     r2,#1                 ;1933
00000c  2302              MOVS     r3,#2                 ;1935
00000e  6403              STR      r3,[r0,#0x40]         ;1935
000010  63c2              STR      r2,[r0,#0x3c]         ;1935
000012  6803              LDR      r3,[r0,#0]            ;1938
000014  f8d3c058          LDR      r12,[r3,#0x58]        ;1938
000018  f02c4c60          BIC      r12,r12,#0xe0000000   ;1938
00001c  f8c3c058          STR      r12,[r3,#0x58]        ;1938
000020  6803              LDR      r3,[r0,#0]            ;1941
000022  f8d3c058          LDR      r12,[r3,#0x58]        ;1941
000026  ea4c0c01          ORR      r12,r12,r1            ;1941
00002a  f8c3c058          STR      r12,[r3,#0x58]        ;1941
00002e  2100              MOVS     r1,#0                 ;1945
000030  6402              STR      r2,[r0,#0x40]         ;1943
000032  63c1              STR      r1,[r0,#0x3c]         ;1947
000034  4608              MOV      r0,r1                 ;1947
000036  4770              BX       lr
;;;1949   /**
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_DeInit PROC
;;;255      */
;;;256    HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;257    {
000002  4604              MOV      r4,r0
;;;258      /* Check the parameters */
;;;259      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;260    
;;;261      htim->State = HAL_TIM_STATE_BUSY;
;;;262      
;;;263      /* Disable the TIM Peripheral Clock */
;;;264      __HAL_TIM_DISABLE(htim);
000004  f2411111          MOV      r1,#0x1111
000008  2002              MOVS     r0,#2                 ;261
00000a  6420              STR      r0,[r4,#0x40]         ;261
00000c  6820              LDR      r0,[r4,#0]
00000e  6a02              LDR      r2,[r0,#0x20]
000010  420a              TST      r2,r1
000012  d108              BNE      |L9.38|
000014  6a01              LDR      r1,[r0,#0x20]
000016  f2404244          MOV      r2,#0x444
00001a  4211              TST      r1,r2
00001c  d103              BNE      |L9.38|
00001e  6801              LDR      r1,[r0,#0]
000020  f0210101          BIC      r1,r1,#1
000024  6001              STR      r1,[r0,#0]
                  |L9.38|
;;;265    
;;;266    #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;267      if(htim->HallSensor_MspDeInitCallback == NULL)
;;;268      {
;;;269        htim->HallSensor_MspDeInitCallback = HAL_TIMEx_HallSensor_MspDeInit;
;;;270      }
;;;271      /* DeInit the low level hardware */
;;;272      htim->HallSensor_MspDeInitCallback(htim);
;;;273    #else
;;;274      /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;275      HAL_TIMEx_HallSensor_MspDeInit(htim);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       HAL_TIMEx_HallSensor_MspDeInit
;;;276    #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;277    
;;;278      /* Change TIM state */  
;;;279      htim->State = HAL_TIM_STATE_RESET; 
00002c  2000              MOVS     r0,#0
00002e  6420              STR      r0,[r4,#0x40]
;;;280    
;;;281      /* Release Lock */
;;;282      __HAL_UNLOCK(htim);
000030  63e0              STR      r0,[r4,#0x3c]
;;;283    
;;;284      return HAL_OK;
;;;285    }
000032  bd10              POP      {r4,pc}
;;;286    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_GetState PROC
;;;2025     */
;;;2026   HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
000000  6c00              LDR      r0,[r0,#0x40]
;;;2027   {
;;;2028     return htim->State;
;;;2029   }
000002  4770              BX       lr
;;;2030   
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Init PROC
;;;163      */
;;;164    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
000000  2800              CMP      r0,#0
;;;165    {
;;;166      TIM_OC_InitTypeDef OC_Config;
;;;167        
;;;168      /* Check the TIM handle allocation */
;;;169      if(htim == NULL)
;;;170      {
;;;171        return HAL_ERROR;
000002  bf04              ITT      EQ
000004  2001              MOVEQ    r0,#1
;;;172      }
;;;173      
;;;174      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;175      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;176      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;177      assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
;;;178      assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
;;;179      assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
;;;180      assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
;;;181    
;;;182      if(htim->State == HAL_TIM_STATE_RESET)
;;;183      {
;;;184        /* Allocate lock resource and initialize it */
;;;185        htim->Lock = HAL_UNLOCKED;
;;;186    
;;;187    #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;188        /* Reset interrupt callbacks to legacy week callbacks */
;;;189        TIM_ResetCallback(htim);
;;;190    
;;;191        if(htim->HallSensor_MspInitCallback == NULL)
;;;192        {
;;;193          htim->HallSensor_MspInitCallback = HAL_TIMEx_HallSensor_MspInit;
;;;194        }
;;;195        /* Init the low level hardware : GPIO, CLOCK, NVIC */
;;;196        htim->HallSensor_MspInitCallback(htim);
;;;197    #else
;;;198        /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;199        HAL_TIMEx_HallSensor_MspInit(htim);
;;;200    #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;201      }
;;;202    
;;;203      /* Set the TIM state */
;;;204      htim->State= HAL_TIM_STATE_BUSY;
;;;205    
;;;206      /* Configure the Time base in the Encoder Mode */
;;;207      TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;208      
;;;209      /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
;;;210      TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
;;;211      
;;;212      /* Reset the IC1PSC Bits */
;;;213      htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
;;;214      /* Set the IC1PSC value */
;;;215      htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
;;;216      
;;;217      /* Enable the Hall sensor interface (XOR function of the three inputs) */
;;;218      htim->Instance->CR2 |= TIM_CR2_TI1S;
;;;219      
;;;220      /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
;;;221      htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;222      htim->Instance->SMCR |= TIM_TS_TI1F_ED;
;;;223      
;;;224      /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */  
;;;225      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;226      htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
;;;227      
;;;228      /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
;;;229      OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
;;;230      OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
;;;231      OC_Config.OCMode = TIM_OCMODE_PWM2;
;;;232      OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
;;;233      OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
;;;234      OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
;;;235      OC_Config.Pulse = sConfig->Commutation_Delay; 
;;;236        
;;;237      TIM_OC2_SetConfig(htim->Instance, &OC_Config);
;;;238      
;;;239      /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
;;;240        register to 101 */
;;;241      htim->Instance->CR2 &= ~TIM_CR2_MMS;
;;;242      htim->Instance->CR2 |= TIM_TRGO_OC2REF; 
;;;243      
;;;244      /* Initialize the TIM state*/
;;;245      htim->State= HAL_TIM_STATE_READY;
;;;246    
;;;247      return HAL_OK;
;;;248    }
000006  4770              BXEQ     lr
000008  b570              PUSH     {r4-r6,lr}            ;165
00000a  4604              MOV      r4,r0                 ;165
00000c  6c00              LDR      r0,[r0,#0x40]         ;182
00000e  b088              SUB      sp,sp,#0x20           ;165
000010  460e              MOV      r6,r1                 ;165
000012  2500              MOVS     r5,#0                 ;182
000014  b918              CBNZ     r0,|L11.30|
000016  4620              MOV      r0,r4                 ;199
000018  63e5              STR      r5,[r4,#0x3c]         ;199
00001a  f7fffffe          BL       HAL_TIMEx_HallSensor_MspInit
                  |L11.30|
00001e  2002              MOVS     r0,#2                 ;204
000020  6420              STR      r0,[r4,#0x40]         ;204
000022  6820              LDR      r0,[r4,#0]            ;207
000024  1d21              ADDS     r1,r4,#4              ;207
000026  f7fffffe          BL       TIM_Base_SetConfig
00002a  68b3              LDR      r3,[r6,#8]            ;210
00002c  2203              MOVS     r2,#3                 ;210
00002e  6831              LDR      r1,[r6,#0]            ;210
000030  6820              LDR      r0,[r4,#0]            ;210
000032  f7fffffe          BL       TIM_TI1_SetConfig
000036  6820              LDR      r0,[r4,#0]            ;213
000038  2170              MOVS     r1,#0x70              ;231
00003a  6982              LDR      r2,[r0,#0x18]         ;213
00003c  f022020c          BIC      r2,r2,#0xc            ;213
000040  6182              STR      r2,[r0,#0x18]         ;213
000042  6820              LDR      r0,[r4,#0]            ;215
000044  6982              LDR      r2,[r0,#0x18]         ;215
000046  6873              LDR      r3,[r6,#4]            ;215
000048  431a              ORRS     r2,r2,r3              ;215
00004a  6182              STR      r2,[r0,#0x18]         ;215
00004c  6820              LDR      r0,[r4,#0]            ;218
00004e  6842              LDR      r2,[r0,#4]            ;218
000050  f0420280          ORR      r2,r2,#0x80           ;218
000054  6042              STR      r2,[r0,#4]            ;218
000056  6820              LDR      r0,[r4,#0]            ;221
000058  6882              LDR      r2,[r0,#8]            ;221
00005a  f0220270          BIC      r2,r2,#0x70           ;221
00005e  6082              STR      r2,[r0,#8]            ;221
000060  6820              LDR      r0,[r4,#0]            ;222
000062  6882              LDR      r2,[r0,#8]            ;222
000064  f0420240          ORR      r2,r2,#0x40           ;222
000068  6082              STR      r2,[r0,#8]            ;222
00006a  6820              LDR      r0,[r4,#0]            ;225
00006c  6882              LDR      r2,[r0,#8]            ;225
00006e  f0220207          BIC      r2,r2,#7              ;225
000072  f4223280          BIC      r2,r2,#0x10000        ;225
000076  6082              STR      r2,[r0,#8]            ;225
000078  6820              LDR      r0,[r4,#0]            ;226
00007a  6882              LDR      r2,[r0,#8]            ;226
00007c  f0420204          ORR      r2,r2,#4              ;226
000080  6082              STR      r2,[r0,#8]            ;226
000082  9505              STR      r5,[sp,#0x14]         ;232
000084  9504              STR      r5,[sp,#0x10]         ;230
000086  9506              STR      r5,[sp,#0x18]         ;233
000088  9503              STR      r5,[sp,#0xc]          ;234
00008a  9502              STR      r5,[sp,#8]            ;235
00008c  9100              STR      r1,[sp,#0]            ;235
00008e  4669              MOV      r1,sp                 ;237
000090  68f0              LDR      r0,[r6,#0xc]          ;235
000092  9001              STR      r0,[sp,#4]            ;237
000094  6820              LDR      r0,[r4,#0]            ;237
000096  f7fffffe          BL       TIM_OC2_SetConfig
00009a  6820              LDR      r0,[r4,#0]            ;241
00009c  2101              MOVS     r1,#1                 ;245
00009e  6842              LDR      r2,[r0,#4]            ;241
0000a0  f0220270          BIC      r2,r2,#0x70           ;241
0000a4  6042              STR      r2,[r0,#4]            ;241
0000a6  6820              LDR      r0,[r4,#0]            ;242
0000a8  6842              LDR      r2,[r0,#4]            ;242
0000aa  f0420250          ORR      r2,r2,#0x50           ;242
0000ae  6042              STR      r2,[r0,#4]            ;242
0000b0  6421              STR      r1,[r4,#0x40]         ;245
0000b2  b008              ADD      sp,sp,#0x20
0000b4  2000              MOVS     r0,#0                 ;247
0000b6  bd70              POP      {r4-r6,pc}
;;;249    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspDeInit PROC
;;;308      */
;;;309    __weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;310    {
;;;311      /* Prevent unused argument(s) compilation warning */
;;;312      UNUSED(htim);
;;;313     
;;;314      /* NOTE : This function Should not be modified, when the callback is needed,
;;;315                the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
;;;316       */
;;;317    }
;;;318    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspInit PROC
;;;292      */
;;;293    __weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;294    {
;;;295      /* Prevent unused argument(s) compilation warning */
;;;296      UNUSED(htim);
;;;297     
;;;298      /* NOTE : This function Should not be modified, when the callback is needed,
;;;299                the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
;;;300       */
;;;301    }
;;;302    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Start PROC
;;;324      */
;;;325    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;326    {
;;;327      /* Check the parameters */
;;;328      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;329      
;;;330      /* Enable the Input Capture channels 1
;;;331        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;332      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
000002  2201              MOVS     r2,#1
000004  4604              MOV      r4,r0                 ;326
000006  6800              LDR      r0,[r0,#0]
000008  2100              MOVS     r1,#0
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;333      
;;;334      /* Enable the Peripheral */
;;;335      __HAL_TIM_ENABLE(htim);
00000e  6820              LDR      r0,[r4,#0]
000010  6801              LDR      r1,[r0,#0]
000012  f0410101          ORR      r1,r1,#1
000016  6001              STR      r1,[r0,#0]
;;;336      
;;;337      /* Return function status */
;;;338      return HAL_OK;
000018  2000              MOVS     r0,#0
;;;339    }
00001a  bd10              POP      {r4,pc}
;;;340    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Start_DMA PROC
;;;420      */
;;;421    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;422    {
000002  4604              MOV      r4,r0
;;;423      /* Check the parameters */
;;;424      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;425      
;;;426       if((htim->State == HAL_TIM_STATE_BUSY))
000004  6c00              LDR      r0,[r0,#0x40]
000006  4615              MOV      r5,r2                 ;422
000008  460e              MOV      r6,r1                 ;422
00000a  2802              CMP      r0,#2
;;;427      {
;;;428         return HAL_BUSY;
;;;429      }
;;;430      else if((htim->State == HAL_TIM_STATE_READY))
;;;431      {
;;;432        if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;433        {
;;;434          return HAL_ERROR;                                    
;;;435        }
;;;436        else
;;;437        {
;;;438          htim->State = HAL_TIM_STATE_BUSY;
;;;439        }
;;;440      }
;;;441      /* Enable the Input Capture channels 1
;;;442        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;443      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
;;;444      
;;;445      /* Set the DMA Input Capture 1 Callback */
;;;446      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMACaptureCplt;     
;;;447      /* Set the DMA error callback */
;;;448      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;449      
;;;450      /* Enable the DMA Stream for Capture 1*/
;;;451      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);    
;;;452      
;;;453      /* Enable the capture compare 1 Interrupt */
;;;454      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;455     
;;;456      /* Enable the Peripheral */
;;;457      __HAL_TIM_ENABLE(htim);
;;;458      
;;;459      /* Return function status */
;;;460      return HAL_OK;
;;;461    }
00000c  bf08              IT       EQ
00000e  bd70              POPEQ    {r4-r6,pc}
000010  6c20              LDR      r0,[r4,#0x40]         ;430
000012  2801              CMP      r0,#1                 ;430
000014  d106              BNE      |L15.36|
000016  b91e              CBNZ     r6,|L15.32|
000018  2d00              CMP      r5,#0                 ;432
00001a  bf1c              ITT      NE                    ;434
00001c  2001              MOVNE    r0,#1                 ;434
00001e  bd70              POPNE    {r4-r6,pc}
                  |L15.32|
000020  2002              MOVS     r0,#2                 ;438
000022  6420              STR      r0,[r4,#0x40]         ;438
                  |L15.36|
000024  2201              MOVS     r2,#1                 ;443
000026  6820              LDR      r0,[r4,#0]            ;443
000028  2100              MOVS     r1,#0                 ;443
00002a  f7fffffe          BL       TIM_CCxChannelCmd
00002e  6a61              LDR      r1,[r4,#0x24]         ;446
000030  462b              MOV      r3,r5                 ;451
000032  480b              LDR      r0,|L15.96|
000034  4632              MOV      r2,r6                 ;451
000036  6408              STR      r0,[r1,#0x40]         ;448
000038  6a61              LDR      r1,[r4,#0x24]         ;448
00003a  480a              LDR      r0,|L15.100|
00003c  6508              STR      r0,[r1,#0x50]         ;451
00003e  6821              LDR      r1,[r4,#0]            ;451
000040  6a60              LDR      r0,[r4,#0x24]         ;451
000042  3134              ADDS     r1,r1,#0x34           ;451
000044  f7fffffe          BL       HAL_DMA_Start_IT
000048  6820              LDR      r0,[r4,#0]            ;454
00004a  68c1              LDR      r1,[r0,#0xc]          ;454
00004c  f4417100          ORR      r1,r1,#0x200          ;454
000050  60c1              STR      r1,[r0,#0xc]          ;454
000052  6820              LDR      r0,[r4,#0]            ;457
000054  6801              LDR      r1,[r0,#0]            ;457
000056  f0410101          ORR      r1,r1,#1              ;457
00005a  6001              STR      r1,[r0,#0]            ;457
00005c  2000              MOVS     r0,#0                 ;460
00005e  bd70              POP      {r4-r6,pc}
;;;462    
                          ENDP

                  |L15.96|
                          DCD      TIM_DMACaptureCplt
                  |L15.100|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_HallSensor_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Start_IT PROC
;;;368      */
;;;369    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;370    { 
000002  4604              MOV      r4,r0
;;;371      /* Check the parameters */
;;;372      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;373      
;;;374      /* Enable the capture compare Interrupts 1 event */
;;;375      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000004  6800              LDR      r0,[r0,#0]
000006  68c1              LDR      r1,[r0,#0xc]
000008  f0410102          ORR      r1,r1,#2
00000c  60c1              STR      r1,[r0,#0xc]
;;;376      
;;;377      /* Enable the Input Capture channels 1
;;;378        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;379      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);  
00000e  6820              LDR      r0,[r4,#0]
000010  2201              MOVS     r2,#1
000012  2100              MOVS     r1,#0
000014  f7fffffe          BL       TIM_CCxChannelCmd
;;;380      
;;;381      /* Enable the Peripheral */
;;;382      __HAL_TIM_ENABLE(htim);
000018  6820              LDR      r0,[r4,#0]
00001a  6801              LDR      r1,[r0,#0]
00001c  f0410101          ORR      r1,r1,#1
000020  6001              STR      r1,[r0,#0]
;;;383      
;;;384      /* Return function status */
;;;385      return HAL_OK;
000022  2000              MOVS     r0,#0
;;;386    }
000024  bd10              POP      {r4,pc}
;;;387    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop PROC
;;;346      */
;;;347    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
000000  2200              MOVS     r2,#0
;;;348    {
000002  b510              PUSH     {r4,lr}
000004  4604              MOV      r4,r0
;;;349      /* Check the parameters */
;;;350      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;351      
;;;352      /* Disable the Input Capture channels 1, 2 and 3
;;;353        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;354      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000006  6800              LDR      r0,[r0,#0]
000008  4611              MOV      r1,r2
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;355    
;;;356      /* Disable the Peripheral */
;;;357      __HAL_TIM_DISABLE(htim);
00000e  6820              LDR      r0,[r4,#0]
000010  f2411111          MOV      r1,#0x1111
000014  6a02              LDR      r2,[r0,#0x20]
000016  420a              TST      r2,r1
000018  d108              BNE      |L17.44|
00001a  6a01              LDR      r1,[r0,#0x20]
00001c  f2404244          MOV      r2,#0x444
000020  4211              TST      r1,r2
000022  d103              BNE      |L17.44|
000024  6801              LDR      r1,[r0,#0]
000026  f0210101          BIC      r1,r1,#1
00002a  6001              STR      r1,[r0,#0]
                  |L17.44|
;;;358      
;;;359      /* Return function status */
;;;360      return HAL_OK;
00002c  2000              MOVS     r0,#0
;;;361    }
00002e  bd10              POP      {r4,pc}
;;;362    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop_DMA PROC
;;;468      */
;;;469    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
000000  2200              MOVS     r2,#0
;;;470    {
000002  b510              PUSH     {r4,lr}
000004  4604              MOV      r4,r0
;;;471      /* Check the parameters */
;;;472      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;473      
;;;474      /* Disable the Input Capture channels 1
;;;475        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;476      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000006  6800              LDR      r0,[r0,#0]
000008  4611              MOV      r1,r2
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;477     
;;;478      
;;;479      /* Disable the capture compare Interrupts 1 event */
;;;480      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
00000e  6820              LDR      r0,[r4,#0]
;;;481     
;;;482      /* Disable the Peripheral */
;;;483      __HAL_TIM_DISABLE(htim);
000010  f2411111          MOV      r1,#0x1111
000014  68c2              LDR      r2,[r0,#0xc]          ;480
000016  f4227200          BIC      r2,r2,#0x200          ;480
00001a  60c2              STR      r2,[r0,#0xc]          ;480
00001c  6820              LDR      r0,[r4,#0]
00001e  6a02              LDR      r2,[r0,#0x20]
000020  420a              TST      r2,r1
000022  d108              BNE      |L18.54|
000024  6a01              LDR      r1,[r0,#0x20]
000026  f2404244          MOV      r2,#0x444
00002a  4211              TST      r1,r2
00002c  d103              BNE      |L18.54|
00002e  6801              LDR      r1,[r0,#0]
000030  f0210101          BIC      r1,r1,#1
000034  6001              STR      r1,[r0,#0]
                  |L18.54|
;;;484      
;;;485      /* Return function status */
;;;486      return HAL_OK;
000036  2000              MOVS     r0,#0
;;;487    }
000038  bd10              POP      {r4,pc}
;;;488    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop_IT PROC
;;;393      */
;;;394    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
000000  2200              MOVS     r2,#0
;;;395    {
000002  b510              PUSH     {r4,lr}
000004  4604              MOV      r4,r0
;;;396      /* Check the parameters */
;;;397      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;398      
;;;399      /* Disable the Input Capture channels 1
;;;400        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;401      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000006  6800              LDR      r0,[r0,#0]
000008  4611              MOV      r1,r2
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;402      
;;;403      /* Disable the capture compare Interrupts event */
;;;404      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
00000e  6820              LDR      r0,[r4,#0]
;;;405      
;;;406      /* Disable the Peripheral */
;;;407      __HAL_TIM_DISABLE(htim);
000010  f2411111          MOV      r1,#0x1111
000014  68c2              LDR      r2,[r0,#0xc]          ;404
000016  f0220202          BIC      r2,r2,#2              ;404
00001a  60c2              STR      r2,[r0,#0xc]          ;404
00001c  6820              LDR      r0,[r4,#0]
00001e  6a02              LDR      r2,[r0,#0x20]
000020  420a              TST      r2,r1
000022  d108              BNE      |L19.54|
000024  6a01              LDR      r1,[r0,#0x20]
000026  f2404244          MOV      r2,#0x444
00002a  4211              TST      r1,r2
00002c  d103              BNE      |L19.54|
00002e  6801              LDR      r1,[r0,#0]
000030  f0210101          BIC      r1,r1,#1
000034  6001              STR      r1,[r0,#0]
                  |L19.54|
;;;408      
;;;409      /* Return function status */
;;;410      return HAL_OK;
000036  2000              MOVS     r0,#0
;;;411    }
000038  bd10              POP      {r4,pc}
;;;412    
                          ENDP


                          AREA ||i.HAL_TIMEx_MasterConfigSynchronization||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_MasterConfigSynchronization PROC
;;;1652     */
;;;1653   HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
000000  b430              PUSH     {r4,r5}
;;;1654   {
;;;1655     uint32_t tmpcr2;  
;;;1656     uint32_t tmpsmcr;  
;;;1657   
;;;1658     /* Check the parameters */
;;;1659     assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
;;;1660     assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
;;;1661     assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
;;;1662     
;;;1663     /* Check input state */
;;;1664     __HAL_LOCK(htim);
000002  6bc2              LDR      r2,[r0,#0x3c]
000004  2a01              CMP      r2,#1
000006  bf02              ITTT     EQ
000008  2002              MOVEQ    r0,#2
;;;1665   
;;;1666    /* Get the TIMx CR2 register value */
;;;1667     tmpcr2 = htim->Instance->CR2;
;;;1668   
;;;1669     /* Get the TIMx SMCR register value */
;;;1670     tmpsmcr = htim->Instance->SMCR;
;;;1671   
;;;1672     /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
;;;1673     if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
;;;1674     {
;;;1675       /* Check the parameters */
;;;1676       assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
;;;1677       
;;;1678       /* Clear the MMS2 bits */
;;;1679       tmpcr2 &= ~TIM_CR2_MMS2;
;;;1680       /* Select the TRGO2 source*/
;;;1681       tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
;;;1682     }
;;;1683     
;;;1684     /* Reset the MMS Bits */
;;;1685     tmpcr2 &= ~TIM_CR2_MMS;
;;;1686     /* Select the TRGO source */
;;;1687     tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
;;;1688   
;;;1689     /* Reset the MSM Bit */
;;;1690     tmpsmcr &= ~TIM_SMCR_MSM;
;;;1691     /* Set master mode */
;;;1692     tmpsmcr |= sMasterConfig->MasterSlaveMode;
;;;1693     
;;;1694     /* Update TIMx CR2 */
;;;1695     htim->Instance->CR2 = tmpcr2;
;;;1696     
;;;1697     /* Update TIMx SMCR */
;;;1698     htim->Instance->SMCR = tmpsmcr;
;;;1699   
;;;1700     __HAL_UNLOCK(htim);
;;;1701     
;;;1702     return HAL_OK;
;;;1703   } 
00000a  bc30              POPEQ    {r4,r5}
00000c  4770              BXEQ     lr
00000e  2201              MOVS     r2,#1                 ;1664
000010  63c2              STR      r2,[r0,#0x3c]         ;1667
000012  6802              LDR      r2,[r0,#0]            ;1667
000014  6853              LDR      r3,[r2,#4]            ;1667
000016  f1a24c80          SUB      r12,r2,#0x40000000    ;1673
00001a  f5bc3c80          SUBS     r12,r12,#0x10000      ;1673
00001e  f8d2c008          LDR      r12,[r2,#8]           ;1670
000022  bf1c              ITT      NE                    ;1673
000024  f1a24480          SUBNE    r4,r2,#0x40000000     ;1673
000028  f5b43482          SUBSNE   r4,r4,#0x10400        ;1673
00002c  d103              BNE      |L20.54|
00002e  684c              LDR      r4,[r1,#4]            ;1681
000030  f4230370          BIC      r3,r3,#0xf00000       ;1679
000034  4323              ORRS     r3,r3,r4              ;1681
                  |L20.54|
000036  680c              LDR      r4,[r1,#0]            ;1690
000038  688d              LDR      r5,[r1,#8]            ;1690
00003a  f0230370          BIC      r3,r3,#0x70           ;1685
00003e  f02c0180          BIC      r1,r12,#0x80          ;1690
000042  f04f0c00          MOV      r12,#0                ;1700
000046  4323              ORRS     r3,r3,r4              ;1687
000048  6053              STR      r3,[r2,#4]            ;1695
00004a  6802              LDR      r2,[r0,#0]            ;1698
00004c  4329              ORRS     r1,r1,r5              ;1692
00004e  6091              STR      r1,[r2,#8]            ;1698
000050  f8c0c03c          STR      r12,[r0,#0x3c]        ;1702
000054  4660              MOV      r0,r12                ;1702
000056  bc30              POP      {r4,r5}
000058  4770              BX       lr
;;;1704                                                        
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Start PROC
;;;524      */
;;;525    HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
000002  2304              MOVS     r3,#4
000004  f8d2c020          LDR      r12,[r2,#0x20]
000008  fa03f101          LSL      r1,r3,r1
00000c  ea2c0301          BIC      r3,r12,r1
000010  6213              STR      r3,[r2,#0x20]
000012  6a13              LDR      r3,[r2,#0x20]
000014  4319              ORRS     r1,r1,r3
000016  6211              STR      r1,[r2,#0x20]
;;;526    {
;;;527      /* Check the parameters */
;;;528      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;529      
;;;530         /* Enable the Capture compare channel N */
;;;531         TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;532        
;;;533      /* Enable the Main Output */
;;;534        __HAL_TIM_MOE_ENABLE(htim);
000018  6801              LDR      r1,[r0,#0]
00001a  6c4a              LDR      r2,[r1,#0x44]
00001c  f4424200          ORR      r2,r2,#0x8000
000020  644a              STR      r2,[r1,#0x44]
;;;535    
;;;536      /* Enable the Peripheral */
;;;537      __HAL_TIM_ENABLE(htim);
000022  6800              LDR      r0,[r0,#0]
000024  6801              LDR      r1,[r0,#0]
000026  f0410101          ORR      r1,r1,#1
00002a  6001              STR      r1,[r0,#0]
;;;538      
;;;539      /* Return function status */
;;;540      return HAL_OK;
00002c  2000              MOVS     r0,#0
;;;541    } 
00002e  4770              BX       lr
;;;542    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OCN_Start_DMA PROC
;;;726      */
;;;727    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;728    {
000002  4604              MOV      r4,r0
;;;729      /* Check the parameters */
;;;730      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;731      
;;;732      if((htim->State == HAL_TIM_STATE_BUSY))
000004  6c00              LDR      r0,[r0,#0x40]
000006  4694              MOV      r12,r2                ;728
000008  460d              MOV      r5,r1                 ;728
00000a  2802              CMP      r0,#2
;;;733      {
;;;734         return HAL_BUSY;
;;;735      }
;;;736      else if((htim->State == HAL_TIM_STATE_READY))
;;;737      {
;;;738        if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;739        {
;;;740          return HAL_ERROR;                                    
;;;741        }
;;;742        else
;;;743        {
;;;744          htim->State = HAL_TIM_STATE_BUSY;
;;;745        }
;;;746      }    
;;;747      switch (Channel)
;;;748      {
;;;749        case TIM_CHANNEL_1:
;;;750        {      
;;;751          /* Set the DMA Period elapsed callback */
;;;752          htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;753         
;;;754          /* Set the DMA error callback */
;;;755          htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;756          
;;;757          /* Enable the DMA Stream */
;;;758          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;759          
;;;760          /* Enable the TIM Output Compare DMA request */
;;;761          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;762        }
;;;763        break;
;;;764        
;;;765        case TIM_CHANNEL_2:
;;;766        {
;;;767          /* Set the DMA Period elapsed callback */
;;;768          htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;769         
;;;770          /* Set the DMA error callback */
;;;771          htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
;;;772          
;;;773          /* Enable the DMA Stream */
;;;774          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;775          
;;;776          /* Enable the TIM Output Compare DMA request */
;;;777          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;778        }
;;;779        break;
;;;780        
;;;781        case TIM_CHANNEL_3:
;;;782    {
;;;783          /* Set the DMA Period elapsed callback */
;;;784          htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;785         
;;;786          /* Set the DMA error callback */
;;;787          htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
;;;788          
;;;789          /* Enable the DMA Stream */
;;;790          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;791          
;;;792          /* Enable the TIM Output Compare DMA request */
;;;793          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;794        }
;;;795        break;
;;;796        
;;;797        case TIM_CHANNEL_4:
;;;798        {
;;;799         /* Set the DMA Period elapsed callback */
;;;800          htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;801         
;;;802          /* Set the DMA error callback */
;;;803          htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
;;;804          
;;;805          /* Enable the DMA Stream */
;;;806          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;807          
;;;808          /* Enable the TIM Output Compare DMA request */
;;;809          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;810        }
;;;811        break;
;;;812        
;;;813        default:
;;;814        break;
;;;815      }
;;;816    
;;;817      /* Enable the Capture compare channel N */
;;;818      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;819      
;;;820      /* Enable the Main Output */
;;;821      __HAL_TIM_MOE_ENABLE(htim);
;;;822      
;;;823      /* Enable the Peripheral */
;;;824      __HAL_TIM_ENABLE(htim); 
;;;825      
;;;826      /* Return function status */
;;;827      return HAL_OK;
;;;828    }
00000c  bf08              IT       EQ
00000e  bd70              POPEQ    {r4-r6,pc}
000010  6c20              LDR      r0,[r4,#0x40]         ;736
000012  2801              CMP      r0,#1                 ;736
000014  d108              BNE      |L22.40|
000016  f1bc0f00          CMP      r12,#0                ;738
00001a  d103              BNE      |L22.36|
00001c  2b00              CMP      r3,#0                 ;738
00001e  bf1c              ITT      NE                    ;740
000020  2001              MOVNE    r0,#1                 ;740
000022  bd70              POPNE    {r4-r6,pc}
                  |L22.36|
000024  2002              MOVS     r0,#2                 ;744
000026  6420              STR      r0,[r4,#0x40]         ;744
                  |L22.40|
000028  482f              LDR      r0,|L22.232|
00002a  4930              LDR      r1,|L22.236|
00002c  b135              CBZ      r5,|L22.60|
00002e  2d04              CMP      r5,#4                 ;747
000030  d014              BEQ      |L22.92|
000032  2d08              CMP      r5,#8                 ;747
000034  d022              BEQ      |L22.124|
000036  2d0c              CMP      r5,#0xc               ;747
000038  d030              BEQ      |L22.156|
00003a  e03f              B        |L22.188|
                  |L22.60|
00003c  6a62              LDR      r2,[r4,#0x24]         ;752
00003e  6410              STR      r0,[r2,#0x40]         ;755
000040  6a60              LDR      r0,[r4,#0x24]         ;755
000042  6501              STR      r1,[r0,#0x50]         ;758
000044  6821              LDR      r1,[r4,#0]            ;758
000046  6a60              LDR      r0,[r4,#0x24]         ;758
000048  f1010234          ADD      r2,r1,#0x34           ;758
00004c  4661              MOV      r1,r12                ;758
00004e  f7fffffe          BL       HAL_DMA_Start_IT
000052  6820              LDR      r0,[r4,#0]            ;761
000054  68c1              LDR      r1,[r0,#0xc]          ;761
000056  f4417100          ORR      r1,r1,#0x200          ;761
00005a  e02e              B        |L22.186|
                  |L22.92|
00005c  6aa2              LDR      r2,[r4,#0x28]         ;768
00005e  6410              STR      r0,[r2,#0x40]         ;771
000060  6aa0              LDR      r0,[r4,#0x28]         ;771
000062  6501              STR      r1,[r0,#0x50]         ;774
000064  6821              LDR      r1,[r4,#0]            ;774
000066  6aa0              LDR      r0,[r4,#0x28]         ;774
000068  f1010238          ADD      r2,r1,#0x38           ;774
00006c  4661              MOV      r1,r12                ;774
00006e  f7fffffe          BL       HAL_DMA_Start_IT
000072  6820              LDR      r0,[r4,#0]            ;777
000074  68c1              LDR      r1,[r0,#0xc]          ;777
000076  f4416180          ORR      r1,r1,#0x400          ;777
00007a  e01e              B        |L22.186|
                  |L22.124|
00007c  6ae2              LDR      r2,[r4,#0x2c]         ;784
00007e  6410              STR      r0,[r2,#0x40]         ;787
000080  6ae0              LDR      r0,[r4,#0x2c]         ;787
000082  6501              STR      r1,[r0,#0x50]         ;790
000084  6821              LDR      r1,[r4,#0]            ;790
000086  6ae0              LDR      r0,[r4,#0x2c]         ;790
000088  f101023c          ADD      r2,r1,#0x3c           ;790
00008c  4661              MOV      r1,r12                ;790
00008e  f7fffffe          BL       HAL_DMA_Start_IT
000092  6820              LDR      r0,[r4,#0]            ;793
000094  68c1              LDR      r1,[r0,#0xc]          ;793
000096  f4416100          ORR      r1,r1,#0x800          ;793
00009a  e00e              B        |L22.186|
                  |L22.156|
00009c  6b22              LDR      r2,[r4,#0x30]         ;800
00009e  6410              STR      r0,[r2,#0x40]         ;803
0000a0  6b20              LDR      r0,[r4,#0x30]         ;803
0000a2  6501              STR      r1,[r0,#0x50]         ;806
0000a4  6821              LDR      r1,[r4,#0]            ;806
0000a6  6b20              LDR      r0,[r4,#0x30]         ;806
0000a8  f1010240          ADD      r2,r1,#0x40           ;806
0000ac  4661              MOV      r1,r12                ;806
0000ae  f7fffffe          BL       HAL_DMA_Start_IT
0000b2  6820              LDR      r0,[r4,#0]            ;809
0000b4  68c1              LDR      r1,[r0,#0xc]          ;809
0000b6  f4415180          ORR      r1,r1,#0x1000         ;809
                  |L22.186|
0000ba  60c1              STR      r1,[r0,#0xc]          ;793
                  |L22.188|
0000bc  6820              LDR      r0,[r4,#0]            ;793
0000be  2104              MOVS     r1,#4                 ;793
0000c0  6a02              LDR      r2,[r0,#0x20]         ;793
0000c2  40a9              LSLS     r1,r1,r5              ;793
0000c4  438a              BICS     r2,r2,r1              ;793
0000c6  6202              STR      r2,[r0,#0x20]         ;793
0000c8  6a02              LDR      r2,[r0,#0x20]         ;793
0000ca  4311              ORRS     r1,r1,r2              ;793
0000cc  6201              STR      r1,[r0,#0x20]         ;793
0000ce  6820              LDR      r0,[r4,#0]            ;821
0000d0  6c41              LDR      r1,[r0,#0x44]         ;821
0000d2  f4414100          ORR      r1,r1,#0x8000         ;821
0000d6  6441              STR      r1,[r0,#0x44]         ;821
0000d8  6820              LDR      r0,[r4,#0]            ;824
0000da  6801              LDR      r1,[r0,#0]            ;824
0000dc  f0410101          ORR      r1,r1,#1              ;824
0000e0  6001              STR      r1,[r0,#0]            ;824
0000e2  2000              MOVS     r0,#0                 ;827
0000e4  bd70              POP      {r4-r6,pc}
;;;829    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L22.232|
                          DCD      TIM_DMADelayPulseCplt
                  |L22.236|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_OCN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Start_IT PROC
;;;584      */
;;;585    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
;;;586    {
;;;587      /* Check the parameters */
;;;588      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;589      
;;;590      switch (Channel)
000002  2900              CMP      r1,#0
;;;591      {
;;;592        case TIM_CHANNEL_1:
;;;593        {       
;;;594          /* Enable the TIM Output Compare interrupt */
;;;595          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000004  bf04              ITT      EQ
000006  68d3              LDREQ    r3,[r2,#0xc]
000008  f0430302          ORREQ    r3,r3,#2
00000c  d011              BEQ      |L23.50|
00000e  2904              CMP      r1,#4                 ;590
;;;596        }
;;;597        break;
;;;598        
;;;599        case TIM_CHANNEL_2:
;;;600        {
;;;601          /* Enable the TIM Output Compare interrupt */
;;;602          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000010  bf04              ITT      EQ
000012  68d3              LDREQ    r3,[r2,#0xc]
000014  f0430304          ORREQ    r3,r3,#4
000018  d00b              BEQ      |L23.50|
00001a  2908              CMP      r1,#8                 ;590
;;;603        }
;;;604        break;
;;;605        
;;;606        case TIM_CHANNEL_3:
;;;607        {
;;;608          /* Enable the TIM Output Compare interrupt */
;;;609          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
00001c  bf04              ITT      EQ
00001e  68d3              LDREQ    r3,[r2,#0xc]
000020  f0430308          ORREQ    r3,r3,#8
000024  d005              BEQ      |L23.50|
000026  290c              CMP      r1,#0xc               ;590
;;;610        }
;;;611        break;
;;;612        
;;;613        case TIM_CHANNEL_4:
;;;614        {
;;;615          /* Enable the TIM Output Compare interrupt */
;;;616          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000028  bf04              ITT      EQ
00002a  68d3              LDREQ    r3,[r2,#0xc]
00002c  f0430310          ORREQ    r3,r3,#0x10
000030  d100              BNE      |L23.52|
                  |L23.50|
000032  60d3              STR      r3,[r2,#0xc]          ;609
                  |L23.52|
;;;617        }
;;;618        break;
;;;619        
;;;620        default:
;;;621        break;
;;;622      } 
;;;623      
;;;624      /* Enable the TIM Break interrupt */
;;;625      __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
000034  6802              LDR      r2,[r0,#0]
000036  68d3              LDR      r3,[r2,#0xc]
000038  f0430380          ORR      r3,r3,#0x80
00003c  60d3              STR      r3,[r2,#0xc]
00003e  6802              LDR      r2,[r0,#0]
000040  2304              MOVS     r3,#4
000042  f8d2c020          LDR      r12,[r2,#0x20]
000046  fa03f101          LSL      r1,r3,r1
00004a  ea2c0301          BIC      r3,r12,r1
00004e  6213              STR      r3,[r2,#0x20]
000050  6a13              LDR      r3,[r2,#0x20]
000052  4319              ORRS     r1,r1,r3
000054  6211              STR      r1,[r2,#0x20]
;;;626      
;;;627      /* Enable the Capture compare channel N */
;;;628      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;629    
;;;630      /* Enable the Main Output */
;;;631     __HAL_TIM_MOE_ENABLE(htim);
000056  6801              LDR      r1,[r0,#0]
000058  6c4a              LDR      r2,[r1,#0x44]
00005a  f4424200          ORR      r2,r2,#0x8000
00005e  644a              STR      r2,[r1,#0x44]
;;;632    
;;;633      /* Enable the Peripheral */
;;;634      __HAL_TIM_ENABLE(htim);
000060  6800              LDR      r0,[r0,#0]
000062  6801              LDR      r1,[r0,#0]
000064  f0410101          ORR      r1,r1,#1
000068  6001              STR      r1,[r0,#0]
;;;635      
;;;636      /* Return function status */
;;;637      return HAL_OK;
00006a  2000              MOVS     r0,#0
;;;638    } 
00006c  4770              BX       lr
;;;639    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop PROC
;;;554      */
;;;555    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;556    { 
000004  6802              LDR      r2,[r0,#0]
;;;557      /* Check the parameters */
;;;558      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;559      
;;;560        /* Disable the Capture compare channel N */
;;;561      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000006  2300              MOVS     r3,#0
000008  f04f0c04          MOV      r12,#4
00000c  408b              LSLS     r3,r3,r1
00000e  6a14              LDR      r4,[r2,#0x20]
000010  fa0cf101          LSL      r1,r12,r1
000014  ea240101          BIC      r1,r4,r1
000018  6211              STR      r1,[r2,#0x20]
00001a  6a11              LDR      r1,[r2,#0x20]
00001c  4319              ORRS     r1,r1,r3
00001e  6211              STR      r1,[r2,#0x20]
;;;562        
;;;563      /* Disable the Main Output */
;;;564        __HAL_TIM_MOE_DISABLE(htim);
000020  6801              LDR      r1,[r0,#0]
000022  f2411211          MOV      r2,#0x1111
000026  1093              ASRS     r3,r2,#2
000028  f8d1c020          LDR      r12,[r1,#0x20]
00002c  ea1c0f02          TST      r12,r2
000030  bf04              ITT      EQ
000032  f8d1c020          LDREQ    r12,[r1,#0x20]
000036  ea1c0f03          TSTEQ    r12,r3
00003a  d105              BNE      |L24.72|
00003c  f8d1c044          LDR      r12,[r1,#0x44]
000040  f42c4c00          BIC      r12,r12,#0x8000
000044  f8c1c044          STR      r12,[r1,#0x44]
                  |L24.72|
;;;565    
;;;566      /* Disable the Peripheral */
;;;567      __HAL_TIM_DISABLE(htim);
000048  6800              LDR      r0,[r0,#0]
00004a  6a01              LDR      r1,[r0,#0x20]
00004c  4211              TST      r1,r2
00004e  bf04              ITT      EQ
000050  6a01              LDREQ    r1,[r0,#0x20]
000052  4219              TSTEQ    r1,r3
000054  d103              BNE      |L24.94|
000056  6801              LDR      r1,[r0,#0]
000058  f0210101          BIC      r1,r1,#1
00005c  6001              STR      r1,[r0,#0]
                  |L24.94|
;;;568      
;;;569      /* Return function status */
;;;570      return HAL_OK;
;;;571    } 
00005e  f85d4b04          POP.W    {r4}
000062  2000              MOVS     r0,#0                 ;570
000064  4770              BX       lr
;;;572    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop_DMA PROC
;;;841      */
;;;842    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;843    {
;;;844      /* Check the parameters */
;;;845      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;846      
;;;847      switch (Channel)
000004  6802              LDR      r2,[r0,#0]
000006  2900              CMP      r1,#0
;;;848      {
;;;849        case TIM_CHANNEL_1:
;;;850        {       
;;;851          /* Disable the TIM Output Compare DMA request */
;;;852          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000008  bf04              ITT      EQ
00000a  68d3              LDREQ    r3,[r2,#0xc]
00000c  f4237300          BICEQ    r3,r3,#0x200
000010  d011              BEQ      |L25.54|
000012  2904              CMP      r1,#4                 ;847
;;;853        }
;;;854        break;
;;;855        
;;;856        case TIM_CHANNEL_2:
;;;857        {
;;;858          /* Disable the TIM Output Compare DMA request */
;;;859          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000014  bf04              ITT      EQ
000016  68d3              LDREQ    r3,[r2,#0xc]
000018  f4236380          BICEQ    r3,r3,#0x400
00001c  d00b              BEQ      |L25.54|
00001e  2908              CMP      r1,#8                 ;847
;;;860        }
;;;861        break;
;;;862        
;;;863        case TIM_CHANNEL_3:
;;;864        {
;;;865          /* Disable the TIM Output Compare DMA request */
;;;866          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
000020  bf04              ITT      EQ
000022  68d3              LDREQ    r3,[r2,#0xc]
000024  f4236300          BICEQ    r3,r3,#0x800
000028  d005              BEQ      |L25.54|
00002a  290c              CMP      r1,#0xc               ;847
;;;867        }
;;;868        break;
;;;869        
;;;870        case TIM_CHANNEL_4:
;;;871        {
;;;872          /* Disable the TIM Output Compare interrupt */
;;;873          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
00002c  bf04              ITT      EQ
00002e  68d3              LDREQ    r3,[r2,#0xc]
000030  f4235380          BICEQ    r3,r3,#0x1000
000034  d100              BNE      |L25.56|
                  |L25.54|
000036  60d3              STR      r3,[r2,#0xc]          ;866
                  |L25.56|
;;;874        }
;;;875        break;
;;;876        
;;;877        default:
;;;878        break;
;;;879      } 
;;;880      
;;;881      /* Disable the Capture compare channel N */
;;;882      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000038  2300              MOVS     r3,#0
00003a  6802              LDR      r2,[r0,#0]
00003c  f04f0c04          MOV      r12,#4
000040  408b              LSLS     r3,r3,r1
000042  6a14              LDR      r4,[r2,#0x20]
000044  fa0cf101          LSL      r1,r12,r1
000048  ea240101          BIC      r1,r4,r1
00004c  6211              STR      r1,[r2,#0x20]
00004e  6a11              LDR      r1,[r2,#0x20]
000050  4319              ORRS     r1,r1,r3
000052  6211              STR      r1,[r2,#0x20]
;;;883      
;;;884      /* Disable the Main Output */
;;;885      __HAL_TIM_MOE_DISABLE(htim);
000054  6801              LDR      r1,[r0,#0]
000056  f2411211          MOV      r2,#0x1111
00005a  1093              ASRS     r3,r2,#2
00005c  f8d1c020          LDR      r12,[r1,#0x20]
000060  ea1c0f02          TST      r12,r2
000064  bf04              ITT      EQ
000066  f8d1c020          LDREQ    r12,[r1,#0x20]
00006a  ea1c0f03          TSTEQ    r12,r3
00006e  d105              BNE      |L25.124|
000070  f8d1c044          LDR      r12,[r1,#0x44]
000074  f42c4c00          BIC      r12,r12,#0x8000
000078  f8c1c044          STR      r12,[r1,#0x44]
                  |L25.124|
;;;886      
;;;887      /* Disable the Peripheral */
;;;888      __HAL_TIM_DISABLE(htim);
00007c  6801              LDR      r1,[r0,#0]
00007e  f8d1c020          LDR      r12,[r1,#0x20]
000082  ea1c0f02          TST      r12,r2
000086  bf04              ITT      EQ
000088  6a0a              LDREQ    r2,[r1,#0x20]
00008a  421a              TSTEQ    r2,r3
00008c  d103              BNE      |L25.150|
00008e  680a              LDR      r2,[r1,#0]
000090  f0220201          BIC      r2,r2,#1
000094  600a              STR      r2,[r1,#0]
                  |L25.150|
;;;889      
;;;890      /* Change the htim state */
;;;891      htim->State = HAL_TIM_STATE_READY;
000096  2101              MOVS     r1,#1
000098  6401              STR      r1,[r0,#0x40]
;;;892      
;;;893      /* Return function status */
;;;894      return HAL_OK;
;;;895    }
00009a  f85d4b04          POP.W    {r4}
00009e  2000              MOVS     r0,#0                 ;894
0000a0  4770              BX       lr
;;;896    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop_IT PROC
;;;651      */
;;;652    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;653    {
;;;654      uint32_t tmpccer = 0; 
;;;655    
;;;656      /* Check the parameters */
;;;657      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;658      
;;;659      switch (Channel)
;;;660      {
;;;661        case TIM_CHANNEL_1:
;;;662        {       
;;;663          /* Disable the TIM Output Compare interrupt */
;;;664          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000004  6802              LDR      r2,[r0,#0]
000006  2900              CMP      r1,#0                 ;659
000008  bf04              ITT      EQ
00000a  68d3              LDREQ    r3,[r2,#0xc]
00000c  f0230302          BICEQ    r3,r3,#2
000010  d011              BEQ      |L26.54|
000012  2904              CMP      r1,#4                 ;659
;;;665        }
;;;666        break;
;;;667        
;;;668        case TIM_CHANNEL_2:
;;;669        {
;;;670          /* Disable the TIM Output Compare interrupt */
;;;671          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000014  bf04              ITT      EQ
000016  68d3              LDREQ    r3,[r2,#0xc]
000018  f0230304          BICEQ    r3,r3,#4
00001c  d00b              BEQ      |L26.54|
00001e  2908              CMP      r1,#8                 ;659
;;;672        }
;;;673        break;
;;;674        
;;;675        case TIM_CHANNEL_3:
;;;676        {
;;;677          /* Disable the TIM Output Compare interrupt */
;;;678          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000020  bf04              ITT      EQ
000022  68d3              LDREQ    r3,[r2,#0xc]
000024  f0230308          BICEQ    r3,r3,#8
000028  d005              BEQ      |L26.54|
00002a  290c              CMP      r1,#0xc               ;659
;;;679        }
;;;680        break;
;;;681        
;;;682        case TIM_CHANNEL_4:
;;;683        {
;;;684          /* Disable the TIM Output Compare interrupt */
;;;685          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
00002c  bf04              ITT      EQ
00002e  68d3              LDREQ    r3,[r2,#0xc]
000030  f0230310          BICEQ    r3,r3,#0x10
000034  d100              BNE      |L26.56|
                  |L26.54|
000036  60d3              STR      r3,[r2,#0xc]          ;678
                  |L26.56|
;;;686        }
;;;687        break;
;;;688        
;;;689        default:
;;;690        break; 
;;;691      }
;;;692    
;;;693      /* Disable the Capture compare channel N */
;;;694      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000038  2300              MOVS     r3,#0
00003a  6802              LDR      r2,[r0,#0]
00003c  f04f0c04          MOV      r12,#4
000040  408b              LSLS     r3,r3,r1
000042  6a14              LDR      r4,[r2,#0x20]
000044  fa0cf101          LSL      r1,r12,r1
000048  ea240101          BIC      r1,r4,r1
00004c  6211              STR      r1,[r2,#0x20]
00004e  6a11              LDR      r1,[r2,#0x20]
000050  4319              ORRS     r1,r1,r3
000052  6211              STR      r1,[r2,#0x20]
;;;695    
;;;696      /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;697      tmpccer = htim->Instance->CCER;
000054  6801              LDR      r1,[r0,#0]
;;;698      if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
000056  f2404244          MOV      r2,#0x444
00005a  6a0b              LDR      r3,[r1,#0x20]         ;697
00005c  4213              TST      r3,r2
00005e  d103              BNE      |L26.104|
;;;699      {
;;;700        __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
000060  68cb              LDR      r3,[r1,#0xc]
000062  f0230380          BIC      r3,r3,#0x80
000066  60cb              STR      r3,[r1,#0xc]
                  |L26.104|
;;;701      }
;;;702    
;;;703      /* Disable the Main Output */
;;;704      __HAL_TIM_MOE_DISABLE(htim);
000068  6801              LDR      r1,[r0,#0]
00006a  f2411311          MOV      r3,#0x1111
00006e  f8d1c020          LDR      r12,[r1,#0x20]
000072  ea1c0f03          TST      r12,r3
000076  bf04              ITT      EQ
000078  f8d1c020          LDREQ    r12,[r1,#0x20]
00007c  ea1c0f02          TSTEQ    r12,r2
000080  d105              BNE      |L26.142|
000082  f8d1c044          LDR      r12,[r1,#0x44]
000086  f42c4c00          BIC      r12,r12,#0x8000
00008a  f8c1c044          STR      r12,[r1,#0x44]
                  |L26.142|
;;;705    
;;;706      /* Disable the Peripheral */
;;;707      __HAL_TIM_DISABLE(htim);
00008e  6800              LDR      r0,[r0,#0]
000090  6a01              LDR      r1,[r0,#0x20]
000092  4219              TST      r1,r3
000094  bf04              ITT      EQ
000096  6a01              LDREQ    r1,[r0,#0x20]
000098  4211              TSTEQ    r1,r2
00009a  d103              BNE      |L26.164|
00009c  6801              LDR      r1,[r0,#0]
00009e  f0210101          BIC      r1,r1,#1
0000a2  6001              STR      r1,[r0,#0]
                  |L26.164|
;;;708      
;;;709      /* Return function status */
;;;710      return HAL_OK;
;;;711    } 
0000a4  f85d4b04          POP.W    {r4}
0000a8  2000              MOVS     r0,#0                 ;710
0000aa  4770              BX       lr
;;;712    
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start PROC
;;;1345     */
;;;1346   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  6802              LDR      r2,[r0,#0]
000002  2304              MOVS     r3,#4
000004  fa03f101          LSL      r1,r3,r1
000008  6a13              LDR      r3,[r2,#0x20]
00000a  438b              BICS     r3,r3,r1
00000c  6213              STR      r3,[r2,#0x20]
00000e  6a13              LDR      r3,[r2,#0x20]
000010  4319              ORRS     r1,r1,r3
000012  6211              STR      r1,[r2,#0x20]
;;;1347     {
;;;1348     /* Check the parameters */
;;;1349     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1350     
;;;1351     /* Enable the complementary One Pulse output */
;;;1352     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
;;;1353     
;;;1354     /* Enable the Main Output */
;;;1355     __HAL_TIM_MOE_ENABLE(htim);
000014  6800              LDR      r0,[r0,#0]
000016  6c41              LDR      r1,[r0,#0x44]
000018  f4414100          ORR      r1,r1,#0x8000
00001c  6441              STR      r1,[r0,#0x44]
;;;1356     
;;;1357     /* Return function status */
;;;1358     return HAL_OK;
00001e  2000              MOVS     r0,#0
;;;1359   }
000020  4770              BX       lr
;;;1360   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start_IT PROC
;;;1401     */
;;;1402   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  6802              LDR      r2,[r0,#0]
;;;1403   {
;;;1404     /* Check the parameters */
;;;1405     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1406   
;;;1407     /* Enable the TIM Capture/Compare 1 interrupt */
;;;1408     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000002  68d3              LDR      r3,[r2,#0xc]
000004  f0430302          ORR      r3,r3,#2
000008  60d3              STR      r3,[r2,#0xc]
;;;1409     
;;;1410     /* Enable the TIM Capture/Compare 2 interrupt */
;;;1411     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
00000a  6802              LDR      r2,[r0,#0]
00000c  68d3              LDR      r3,[r2,#0xc]
00000e  f0430304          ORR      r3,r3,#4
000012  60d3              STR      r3,[r2,#0xc]
000014  6802              LDR      r2,[r0,#0]
000016  2304              MOVS     r3,#4
000018  f8d2c020          LDR      r12,[r2,#0x20]
00001c  fa03f101          LSL      r1,r3,r1
000020  ea2c0301          BIC      r3,r12,r1
000024  6213              STR      r3,[r2,#0x20]
000026  6a13              LDR      r3,[r2,#0x20]
000028  4319              ORRS     r1,r1,r3
00002a  6211              STR      r1,[r2,#0x20]
;;;1412     
;;;1413     /* Enable the complementary One Pulse output */
;;;1414     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
;;;1415     
;;;1416     /* Enable the Main Output */
;;;1417     __HAL_TIM_MOE_ENABLE(htim);
00002c  6800              LDR      r0,[r0,#0]
00002e  6c41              LDR      r1,[r0,#0x44]
000030  f4414100          ORR      r1,r1,#0x8000
000034  6441              STR      r1,[r0,#0x44]
;;;1418     
;;;1419     /* Return function status */
;;;1420     return HAL_OK;
000036  2000              MOVS     r0,#0
;;;1421     } 
000038  4770              BX       lr
;;;1422     
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Stop PROC
;;;1371     */
;;;1372   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  f84d4d04          PUSH.W   {r4}
;;;1373   {
000004  6802              LDR      r2,[r0,#0]
;;;1374   
;;;1375     /* Check the parameters */
;;;1376     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1377   
;;;1378     /* Disable the complementary One Pulse output */
;;;1379       TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
000006  2300              MOVS     r3,#0
000008  f04f0c04          MOV      r12,#4
00000c  408b              LSLS     r3,r3,r1
00000e  6a14              LDR      r4,[r2,#0x20]
000010  fa0cf101          LSL      r1,r12,r1
000014  ea240101          BIC      r1,r4,r1
000018  6211              STR      r1,[r2,#0x20]
00001a  6a11              LDR      r1,[r2,#0x20]
00001c  4319              ORRS     r1,r1,r3
00001e  6211              STR      r1,[r2,#0x20]
;;;1380     
;;;1381     /* Disable the Main Output */
;;;1382       __HAL_TIM_MOE_DISABLE(htim);
000020  6801              LDR      r1,[r0,#0]
000022  f2411211          MOV      r2,#0x1111
000026  1093              ASRS     r3,r2,#2
000028  f8d1c020          LDR      r12,[r1,#0x20]
00002c  ea1c0f02          TST      r12,r2
000030  bf04              ITT      EQ
000032  f8d1c020          LDREQ    r12,[r1,#0x20]
000036  ea1c0f03          TSTEQ    r12,r3
00003a  d105              BNE      |L29.72|
00003c  f8d1c044          LDR      r12,[r1,#0x44]
000040  f42c4c00          BIC      r12,r12,#0x8000
000044  f8c1c044          STR      r12,[r1,#0x44]
                  |L29.72|
;;;1383     
;;;1384     /* Disable the Peripheral */
;;;1385     __HAL_TIM_DISABLE(htim); 
000048  6800              LDR      r0,[r0,#0]
00004a  6a01              LDR      r1,[r0,#0x20]
00004c  4211              TST      r1,r2
00004e  bf04              ITT      EQ
000050  6a01              LDREQ    r1,[r0,#0x20]
000052  4219              TSTEQ    r1,r3
000054  d103              BNE      |L29.94|
000056  6801              LDR      r1,[r0,#0]
000058  f0210101          BIC      r1,r1,#1
00005c  6001              STR      r1,[r0,#0]
                  |L29.94|
;;;1386      
;;;1387     /* Return function status */
;;;1388     return HAL_OK;
;;;1389   }
00005e  f85d4b04          POP.W    {r4}
000062  2000              MOVS     r0,#0                 ;1388
000064  4770              BX       lr
;;;1390   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Stop_IT PROC
;;;1433     */
;;;1434   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  f84d4d04          PUSH.W   {r4}
;;;1435   {
;;;1436     /* Check the parameters */
;;;1437     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1438   
;;;1439     /* Disable the TIM Capture/Compare 1 interrupt */
;;;1440     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000004  6802              LDR      r2,[r0,#0]
000006  68d3              LDR      r3,[r2,#0xc]
000008  f0230302          BIC      r3,r3,#2
00000c  60d3              STR      r3,[r2,#0xc]
;;;1441     
;;;1442     /* Disable the TIM Capture/Compare 2 interrupt */
;;;1443     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
00000e  6802              LDR      r2,[r0,#0]
000010  68d3              LDR      r3,[r2,#0xc]
000012  f0230304          BIC      r3,r3,#4
000016  60d3              STR      r3,[r2,#0xc]
000018  6802              LDR      r2,[r0,#0]
;;;1444     
;;;1445     /* Disable the complementary One Pulse output */
;;;1446     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
00001a  2300              MOVS     r3,#0
00001c  f04f0c04          MOV      r12,#4
000020  408b              LSLS     r3,r3,r1
000022  6a14              LDR      r4,[r2,#0x20]
000024  fa0cf101          LSL      r1,r12,r1
000028  ea240101          BIC      r1,r4,r1
00002c  6211              STR      r1,[r2,#0x20]
00002e  6a11              LDR      r1,[r2,#0x20]
000030  4319              ORRS     r1,r1,r3
000032  6211              STR      r1,[r2,#0x20]
;;;1447     
;;;1448     /* Disable the Main Output */
;;;1449     __HAL_TIM_MOE_DISABLE(htim);
000034  6801              LDR      r1,[r0,#0]
000036  f2411211          MOV      r2,#0x1111
00003a  1093              ASRS     r3,r2,#2
00003c  f8d1c020          LDR      r12,[r1,#0x20]
000040  ea1c0f02          TST      r12,r2
000044  bf04              ITT      EQ
000046  f8d1c020          LDREQ    r12,[r1,#0x20]
00004a  ea1c0f03          TSTEQ    r12,r3
00004e  d105              BNE      |L30.92|
000050  f8d1c044          LDR      r12,[r1,#0x44]
000054  f42c4c00          BIC      r12,r12,#0x8000
000058  f8c1c044          STR      r12,[r1,#0x44]
                  |L30.92|
;;;1450     
;;;1451     /* Disable the Peripheral */
;;;1452      __HAL_TIM_DISABLE(htim);  
00005c  6800              LDR      r0,[r0,#0]
00005e  6a01              LDR      r1,[r0,#0x20]
000060  4211              TST      r1,r2
000062  bf04              ITT      EQ
000064  6a01              LDREQ    r1,[r0,#0x20]
000066  4219              TSTEQ    r1,r3
000068  d103              BNE      |L30.114|
00006a  6801              LDR      r1,[r0,#0]
00006c  f0210101          BIC      r1,r1,#1
000070  6001              STR      r1,[r0,#0]
                  |L30.114|
;;;1453     
;;;1454     /* Return function status */
;;;1455     return HAL_OK;
;;;1456   }
000072  f85d4b04          POP.W    {r4}
000076  2000              MOVS     r0,#0                 ;1455
000078  4770              BX       lr
;;;1457   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Start PROC
;;;941      */
;;;942    HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
000002  2304              MOVS     r3,#4
000004  f8d2c020          LDR      r12,[r2,#0x20]
000008  fa03f101          LSL      r1,r3,r1
00000c  ea2c0301          BIC      r3,r12,r1
000010  6213              STR      r3,[r2,#0x20]
000012  6a13              LDR      r3,[r2,#0x20]
000014  4319              ORRS     r1,r1,r3
000016  6211              STR      r1,[r2,#0x20]
;;;943    {
;;;944      /* Check the parameters */
;;;945      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;946      
;;;947      /* Enable the complementary PWM output  */
;;;948      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;949      
;;;950      /* Enable the Main Output */
;;;951      __HAL_TIM_MOE_ENABLE(htim);
000018  6801              LDR      r1,[r0,#0]
00001a  6c4a              LDR      r2,[r1,#0x44]
00001c  f4424200          ORR      r2,r2,#0x8000
000020  644a              STR      r2,[r1,#0x44]
;;;952      
;;;953      /* Enable the Peripheral */
;;;954      __HAL_TIM_ENABLE(htim);
000022  6800              LDR      r0,[r0,#0]
000024  6801              LDR      r1,[r0,#0]
000026  f0410101          ORR      r1,r1,#1
00002a  6001              STR      r1,[r0,#0]
;;;955      
;;;956      /* Return function status */
;;;957      return HAL_OK;
00002c  2000              MOVS     r0,#0
;;;958    } 
00002e  4770              BX       lr
;;;959    
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_PWMN_Start_DMA PROC
;;;1142     */
;;;1143   HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;1144   {
000002  4604              MOV      r4,r0
;;;1145     /* Check the parameters */
;;;1146     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1147     
;;;1148     if((htim->State == HAL_TIM_STATE_BUSY))
000004  6c00              LDR      r0,[r0,#0x40]
000006  4694              MOV      r12,r2                ;1144
000008  460d              MOV      r5,r1                 ;1144
00000a  2802              CMP      r0,#2
;;;1149     {
;;;1150        return HAL_BUSY;
;;;1151     }
;;;1152     else if((htim->State == HAL_TIM_STATE_READY))
;;;1153     {
;;;1154       if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;1155       {
;;;1156         return HAL_ERROR;                                    
;;;1157       }
;;;1158       else
;;;1159       {
;;;1160         htim->State = HAL_TIM_STATE_BUSY;
;;;1161       }
;;;1162     }    
;;;1163     switch (Channel)
;;;1164     {
;;;1165       case TIM_CHANNEL_1:
;;;1166       {      
;;;1167         /* Set the DMA Period elapsed callback */
;;;1168         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1169        
;;;1170         /* Set the DMA error callback */
;;;1171         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1172         
;;;1173         /* Enable the DMA Stream */
;;;1174         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;1175         
;;;1176         /* Enable the TIM Capture/Compare 1 DMA request */
;;;1177         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;1178       }
;;;1179       break;
;;;1180       
;;;1181       case TIM_CHANNEL_2:
;;;1182       {
;;;1183         /* Set the DMA Period elapsed callback */
;;;1184         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1185        
;;;1186         /* Set the DMA error callback */
;;;1187         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1188         
;;;1189         /* Enable the DMA Stream */
;;;1190         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;1191         
;;;1192         /* Enable the TIM Capture/Compare 2 DMA request */
;;;1193         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;1194       }
;;;1195       break;
;;;1196       
;;;1197       case TIM_CHANNEL_3:
;;;1198       {
;;;1199         /* Set the DMA Period elapsed callback */
;;;1200         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1201        
;;;1202         /* Set the DMA error callback */
;;;1203         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1204         
;;;1205         /* Enable the DMA Stream */
;;;1206         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;1207         
;;;1208         /* Enable the TIM Capture/Compare 3 DMA request */
;;;1209         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;1210       }
;;;1211       break;
;;;1212       
;;;1213       case TIM_CHANNEL_4:
;;;1214       {
;;;1215        /* Set the DMA Period elapsed callback */
;;;1216         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1217        
;;;1218         /* Set the DMA error callback */
;;;1219         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1220         
;;;1221         /* Enable the DMA Stream */
;;;1222         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;1223         
;;;1224         /* Enable the TIM Capture/Compare 4 DMA request */
;;;1225         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;1226       }
;;;1227       break;
;;;1228       
;;;1229       default:
;;;1230       break;
;;;1231     }
;;;1232   
;;;1233     /* Enable the complementary PWM output  */
;;;1234        TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;1235       
;;;1236     /* Enable the Main Output */
;;;1237       __HAL_TIM_MOE_ENABLE(htim);
;;;1238     
;;;1239     /* Enable the Peripheral */
;;;1240     __HAL_TIM_ENABLE(htim); 
;;;1241     
;;;1242     /* Return function status */
;;;1243     return HAL_OK;
;;;1244   }
00000c  bf08              IT       EQ
00000e  bd70              POPEQ    {r4-r6,pc}
000010  6c20              LDR      r0,[r4,#0x40]         ;1152
000012  2801              CMP      r0,#1                 ;1152
000014  d108              BNE      |L32.40|
000016  f1bc0f00          CMP      r12,#0                ;1154
00001a  d103              BNE      |L32.36|
00001c  2b00              CMP      r3,#0                 ;1154
00001e  bf1c              ITT      NE                    ;1156
000020  2001              MOVNE    r0,#1                 ;1156
000022  bd70              POPNE    {r4-r6,pc}
                  |L32.36|
000024  2002              MOVS     r0,#2                 ;1160
000026  6420              STR      r0,[r4,#0x40]         ;1160
                  |L32.40|
000028  482f              LDR      r0,|L32.232|
00002a  4930              LDR      r1,|L32.236|
00002c  b135              CBZ      r5,|L32.60|
00002e  2d04              CMP      r5,#4                 ;1163
000030  d014              BEQ      |L32.92|
000032  2d08              CMP      r5,#8                 ;1163
000034  d022              BEQ      |L32.124|
000036  2d0c              CMP      r5,#0xc               ;1163
000038  d030              BEQ      |L32.156|
00003a  e03f              B        |L32.188|
                  |L32.60|
00003c  6a62              LDR      r2,[r4,#0x24]         ;1168
00003e  6410              STR      r0,[r2,#0x40]         ;1171
000040  6a60              LDR      r0,[r4,#0x24]         ;1171
000042  6501              STR      r1,[r0,#0x50]         ;1174
000044  6821              LDR      r1,[r4,#0]            ;1174
000046  6a60              LDR      r0,[r4,#0x24]         ;1174
000048  f1010234          ADD      r2,r1,#0x34           ;1174
00004c  4661              MOV      r1,r12                ;1174
00004e  f7fffffe          BL       HAL_DMA_Start_IT
000052  6820              LDR      r0,[r4,#0]            ;1177
000054  68c1              LDR      r1,[r0,#0xc]          ;1177
000056  f4417100          ORR      r1,r1,#0x200          ;1177
00005a  e02e              B        |L32.186|
                  |L32.92|
00005c  6aa2              LDR      r2,[r4,#0x28]         ;1184
00005e  6410              STR      r0,[r2,#0x40]         ;1187
000060  6aa0              LDR      r0,[r4,#0x28]         ;1187
000062  6501              STR      r1,[r0,#0x50]         ;1190
000064  6821              LDR      r1,[r4,#0]            ;1190
000066  6aa0              LDR      r0,[r4,#0x28]         ;1190
000068  f1010238          ADD      r2,r1,#0x38           ;1190
00006c  4661              MOV      r1,r12                ;1190
00006e  f7fffffe          BL       HAL_DMA_Start_IT
000072  6820              LDR      r0,[r4,#0]            ;1193
000074  68c1              LDR      r1,[r0,#0xc]          ;1193
000076  f4416180          ORR      r1,r1,#0x400          ;1193
00007a  e01e              B        |L32.186|
                  |L32.124|
00007c  6ae2              LDR      r2,[r4,#0x2c]         ;1200
00007e  6410              STR      r0,[r2,#0x40]         ;1203
000080  6ae0              LDR      r0,[r4,#0x2c]         ;1203
000082  6501              STR      r1,[r0,#0x50]         ;1206
000084  6821              LDR      r1,[r4,#0]            ;1206
000086  6ae0              LDR      r0,[r4,#0x2c]         ;1206
000088  f101023c          ADD      r2,r1,#0x3c           ;1206
00008c  4661              MOV      r1,r12                ;1206
00008e  f7fffffe          BL       HAL_DMA_Start_IT
000092  6820              LDR      r0,[r4,#0]            ;1209
000094  68c1              LDR      r1,[r0,#0xc]          ;1209
000096  f4416100          ORR      r1,r1,#0x800          ;1209
00009a  e00e              B        |L32.186|
                  |L32.156|
00009c  6b22              LDR      r2,[r4,#0x30]         ;1216
00009e  6410              STR      r0,[r2,#0x40]         ;1219
0000a0  6b20              LDR      r0,[r4,#0x30]         ;1219
0000a2  6501              STR      r1,[r0,#0x50]         ;1222
0000a4  6821              LDR      r1,[r4,#0]            ;1222
0000a6  6b20              LDR      r0,[r4,#0x30]         ;1222
0000a8  f1010240          ADD      r2,r1,#0x40           ;1222
0000ac  4661              MOV      r1,r12                ;1222
0000ae  f7fffffe          BL       HAL_DMA_Start_IT
0000b2  6820              LDR      r0,[r4,#0]            ;1225
0000b4  68c1              LDR      r1,[r0,#0xc]          ;1225
0000b6  f4415180          ORR      r1,r1,#0x1000         ;1225
                  |L32.186|
0000ba  60c1              STR      r1,[r0,#0xc]          ;1209
                  |L32.188|
0000bc  6820              LDR      r0,[r4,#0]            ;1209
0000be  2104              MOVS     r1,#4                 ;1209
0000c0  6a02              LDR      r2,[r0,#0x20]         ;1209
0000c2  40a9              LSLS     r1,r1,r5              ;1209
0000c4  438a              BICS     r2,r2,r1              ;1209
0000c6  6202              STR      r2,[r0,#0x20]         ;1209
0000c8  6a02              LDR      r2,[r0,#0x20]         ;1209
0000ca  4311              ORRS     r1,r1,r2              ;1209
0000cc  6201              STR      r1,[r0,#0x20]         ;1209
0000ce  6820              LDR      r0,[r4,#0]            ;1237
0000d0  6c41              LDR      r1,[r0,#0x44]         ;1237
0000d2  f4414100          ORR      r1,r1,#0x8000         ;1237
0000d6  6441              STR      r1,[r0,#0x44]         ;1237
0000d8  6820              LDR      r0,[r4,#0]            ;1240
0000da  6801              LDR      r1,[r0,#0]            ;1240
0000dc  f0410101          ORR      r1,r1,#1              ;1240
0000e0  6001              STR      r1,[r0,#0]            ;1240
0000e2  2000              MOVS     r0,#0                 ;1243
0000e4  bd70              POP      {r4-r6,pc}
;;;1245   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L32.232|
                          DCD      TIM_DMADelayPulseCplt
                  |L32.236|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_PWMN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Start_IT PROC
;;;1000     */
;;;1001   HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
;;;1002   {
;;;1003     /* Check the parameters */
;;;1004     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1005     
;;;1006     switch (Channel)
000002  2900              CMP      r1,#0
;;;1007     {
;;;1008       case TIM_CHANNEL_1:
;;;1009       {       
;;;1010         /* Enable the TIM Capture/Compare 1 interrupt */
;;;1011         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000004  bf04              ITT      EQ
000006  68d3              LDREQ    r3,[r2,#0xc]
000008  f0430302          ORREQ    r3,r3,#2
00000c  d011              BEQ      |L33.50|
00000e  2904              CMP      r1,#4                 ;1006
;;;1012       }
;;;1013       break;
;;;1014       
;;;1015       case TIM_CHANNEL_2:
;;;1016       {
;;;1017         /* Enable the TIM Capture/Compare 2 interrupt */
;;;1018         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000010  bf04              ITT      EQ
000012  68d3              LDREQ    r3,[r2,#0xc]
000014  f0430304          ORREQ    r3,r3,#4
000018  d00b              BEQ      |L33.50|
00001a  2908              CMP      r1,#8                 ;1006
;;;1019       }
;;;1020       break;
;;;1021       
;;;1022       case TIM_CHANNEL_3:
;;;1023       {
;;;1024         /* Enable the TIM Capture/Compare 3 interrupt */
;;;1025         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
00001c  bf04              ITT      EQ
00001e  68d3              LDREQ    r3,[r2,#0xc]
000020  f0430308          ORREQ    r3,r3,#8
000024  d005              BEQ      |L33.50|
000026  290c              CMP      r1,#0xc               ;1006
;;;1026       }
;;;1027       break;
;;;1028       
;;;1029       case TIM_CHANNEL_4:
;;;1030       {
;;;1031         /* Enable the TIM Capture/Compare 4 interrupt */
;;;1032         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000028  bf04              ITT      EQ
00002a  68d3              LDREQ    r3,[r2,#0xc]
00002c  f0430310          ORREQ    r3,r3,#0x10
000030  d100              BNE      |L33.52|
                  |L33.50|
000032  60d3              STR      r3,[r2,#0xc]          ;1025
                  |L33.52|
;;;1033       }
;;;1034       break;
;;;1035       
;;;1036       default:
;;;1037       break;
;;;1038     } 
;;;1039     
;;;1040     /* Enable the TIM Break interrupt */
;;;1041     __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
000034  6802              LDR      r2,[r0,#0]
000036  68d3              LDR      r3,[r2,#0xc]
000038  f0430380          ORR      r3,r3,#0x80
00003c  60d3              STR      r3,[r2,#0xc]
00003e  6802              LDR      r2,[r0,#0]
000040  2304              MOVS     r3,#4
000042  f8d2c020          LDR      r12,[r2,#0x20]
000046  fa03f101          LSL      r1,r3,r1
00004a  ea2c0301          BIC      r3,r12,r1
00004e  6213              STR      r3,[r2,#0x20]
000050  6a13              LDR      r3,[r2,#0x20]
000052  4319              ORRS     r1,r1,r3
000054  6211              STR      r1,[r2,#0x20]
;;;1042     
;;;1043     /* Enable the complementary PWM output  */
;;;1044     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;1045     
;;;1046     /* Enable the Main Output */
;;;1047     __HAL_TIM_MOE_ENABLE(htim);
000056  6801              LDR      r1,[r0,#0]
000058  6c4a              LDR      r2,[r1,#0x44]
00005a  f4424200          ORR      r2,r2,#0x8000
00005e  644a              STR      r2,[r1,#0x44]
;;;1048     
;;;1049     /* Enable the Peripheral */
;;;1050     __HAL_TIM_ENABLE(htim);
000060  6800              LDR      r0,[r0,#0]
000062  6801              LDR      r1,[r0,#0]
000064  f0410101          ORR      r1,r1,#1
000068  6001              STR      r1,[r0,#0]
;;;1051     
;;;1052     /* Return function status */
;;;1053     return HAL_OK;
00006a  2000              MOVS     r0,#0
;;;1054   } 
00006c  4770              BX       lr
;;;1055   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop PROC
;;;970      */
;;;971    HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;972    { 
000004  6802              LDR      r2,[r0,#0]
;;;973      /* Check the parameters */
;;;974      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;975      
;;;976      /* Disable the complementary PWM output  */
;;;977      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);  
000006  2300              MOVS     r3,#0
000008  f04f0c04          MOV      r12,#4
00000c  408b              LSLS     r3,r3,r1
00000e  6a14              LDR      r4,[r2,#0x20]
000010  fa0cf101          LSL      r1,r12,r1
000014  ea240101          BIC      r1,r4,r1
000018  6211              STR      r1,[r2,#0x20]
00001a  6a11              LDR      r1,[r2,#0x20]
00001c  4319              ORRS     r1,r1,r3
00001e  6211              STR      r1,[r2,#0x20]
;;;978      
;;;979      /* Disable the Main Output */
;;;980      __HAL_TIM_MOE_DISABLE(htim);
000020  6801              LDR      r1,[r0,#0]
000022  f2411211          MOV      r2,#0x1111
000026  1093              ASRS     r3,r2,#2
000028  f8d1c020          LDR      r12,[r1,#0x20]
00002c  ea1c0f02          TST      r12,r2
000030  bf04              ITT      EQ
000032  f8d1c020          LDREQ    r12,[r1,#0x20]
000036  ea1c0f03          TSTEQ    r12,r3
00003a  d105              BNE      |L34.72|
00003c  f8d1c044          LDR      r12,[r1,#0x44]
000040  f42c4c00          BIC      r12,r12,#0x8000
000044  f8c1c044          STR      r12,[r1,#0x44]
                  |L34.72|
;;;981      
;;;982      /* Disable the Peripheral */
;;;983      __HAL_TIM_DISABLE(htim);
000048  6800              LDR      r0,[r0,#0]
00004a  6a01              LDR      r1,[r0,#0x20]
00004c  4211              TST      r1,r2
00004e  bf04              ITT      EQ
000050  6a01              LDREQ    r1,[r0,#0x20]
000052  4219              TSTEQ    r1,r3
000054  d103              BNE      |L34.94|
000056  6801              LDR      r1,[r0,#0]
000058  f0210101          BIC      r1,r1,#1
00005c  6001              STR      r1,[r0,#0]
                  |L34.94|
;;;984      
;;;985      /* Return function status */
;;;986      return HAL_OK;
;;;987    } 
00005e  f85d4b04          POP.W    {r4}
000062  2000              MOVS     r0,#0                 ;986
000064  4770              BX       lr
;;;988    
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop_DMA PROC
;;;1257     */
;;;1258   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;1259   {
;;;1260     /* Check the parameters */
;;;1261     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1262     
;;;1263     switch (Channel)
000004  6802              LDR      r2,[r0,#0]
000006  2900              CMP      r1,#0
;;;1264     {
;;;1265       case TIM_CHANNEL_1:
;;;1266       {       
;;;1267         /* Disable the TIM Capture/Compare 1 DMA request */
;;;1268         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000008  bf04              ITT      EQ
00000a  68d3              LDREQ    r3,[r2,#0xc]
00000c  f4237300          BICEQ    r3,r3,#0x200
000010  d011              BEQ      |L35.54|
000012  2904              CMP      r1,#4                 ;1263
;;;1269       }
;;;1270       break;
;;;1271       
;;;1272       case TIM_CHANNEL_2:
;;;1273       {
;;;1274         /* Disable the TIM Capture/Compare 2 DMA request */
;;;1275         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000014  bf04              ITT      EQ
000016  68d3              LDREQ    r3,[r2,#0xc]
000018  f4236380          BICEQ    r3,r3,#0x400
00001c  d00b              BEQ      |L35.54|
00001e  2908              CMP      r1,#8                 ;1263
;;;1276       }
;;;1277       break;
;;;1278       
;;;1279       case TIM_CHANNEL_3:
;;;1280       {
;;;1281         /* Disable the TIM Capture/Compare 3 DMA request */
;;;1282         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
000020  bf04              ITT      EQ
000022  68d3              LDREQ    r3,[r2,#0xc]
000024  f4236300          BICEQ    r3,r3,#0x800
000028  d005              BEQ      |L35.54|
00002a  290c              CMP      r1,#0xc               ;1263
;;;1283       }
;;;1284       break;
;;;1285       
;;;1286       case TIM_CHANNEL_4:
;;;1287       {
;;;1288         /* Disable the TIM Capture/Compare 4 DMA request */
;;;1289         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
00002c  bf04              ITT      EQ
00002e  68d3              LDREQ    r3,[r2,#0xc]
000030  f4235380          BICEQ    r3,r3,#0x1000
000034  d100              BNE      |L35.56|
                  |L35.54|
000036  60d3              STR      r3,[r2,#0xc]          ;1282
                  |L35.56|
;;;1290       }
;;;1291       break;
;;;1292       
;;;1293       default:
;;;1294       break;
;;;1295     } 
;;;1296     
;;;1297     /* Disable the complementary PWM output */
;;;1298       TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000038  2300              MOVS     r3,#0
00003a  6802              LDR      r2,[r0,#0]
00003c  f04f0c04          MOV      r12,#4
000040  408b              LSLS     r3,r3,r1
000042  6a14              LDR      r4,[r2,#0x20]
000044  fa0cf101          LSL      r1,r12,r1
000048  ea240101          BIC      r1,r4,r1
00004c  6211              STR      r1,[r2,#0x20]
00004e  6a11              LDR      r1,[r2,#0x20]
000050  4319              ORRS     r1,r1,r3
000052  6211              STR      r1,[r2,#0x20]
;;;1299        
;;;1300     /* Disable the Main Output */
;;;1301       __HAL_TIM_MOE_DISABLE(htim);
000054  6801              LDR      r1,[r0,#0]
000056  f2411211          MOV      r2,#0x1111
00005a  1093              ASRS     r3,r2,#2
00005c  f8d1c020          LDR      r12,[r1,#0x20]
000060  ea1c0f02          TST      r12,r2
000064  bf04              ITT      EQ
000066  f8d1c020          LDREQ    r12,[r1,#0x20]
00006a  ea1c0f03          TSTEQ    r12,r3
00006e  d105              BNE      |L35.124|
000070  f8d1c044          LDR      r12,[r1,#0x44]
000074  f42c4c00          BIC      r12,r12,#0x8000
000078  f8c1c044          STR      r12,[r1,#0x44]
                  |L35.124|
;;;1302   
;;;1303     /* Disable the Peripheral */
;;;1304     __HAL_TIM_DISABLE(htim);
00007c  6801              LDR      r1,[r0,#0]
00007e  f8d1c020          LDR      r12,[r1,#0x20]
000082  ea1c0f02          TST      r12,r2
000086  bf04              ITT      EQ
000088  6a0a              LDREQ    r2,[r1,#0x20]
00008a  421a              TSTEQ    r2,r3
00008c  d103              BNE      |L35.150|
00008e  680a              LDR      r2,[r1,#0]
000090  f0220201          BIC      r2,r2,#1
000094  600a              STR      r2,[r1,#0]
                  |L35.150|
;;;1305     
;;;1306     /* Change the htim state */
;;;1307     htim->State = HAL_TIM_STATE_READY;
000096  2101              MOVS     r1,#1
000098  6401              STR      r1,[r0,#0x40]
;;;1308     
;;;1309     /* Return function status */
;;;1310     return HAL_OK;
;;;1311   }
00009a  f85d4b04          POP.W    {r4}
00009e  2000              MOVS     r0,#0                 ;1310
0000a0  4770              BX       lr
;;;1312   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop_IT PROC
;;;1067     */
;;;1068   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;1069   {
;;;1070     uint32_t tmpccer = 0;
;;;1071     
;;;1072     /* Check the parameters */
;;;1073     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1074   
;;;1075     switch (Channel)
;;;1076     {
;;;1077       case TIM_CHANNEL_1:
;;;1078       {       
;;;1079         /* Disable the TIM Capture/Compare 1 interrupt */
;;;1080         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000004  6802              LDR      r2,[r0,#0]
000006  2900              CMP      r1,#0                 ;1075
000008  bf04              ITT      EQ
00000a  68d3              LDREQ    r3,[r2,#0xc]
00000c  f0230302          BICEQ    r3,r3,#2
000010  d011              BEQ      |L36.54|
000012  2904              CMP      r1,#4                 ;1075
;;;1081       }
;;;1082       break;
;;;1083       
;;;1084       case TIM_CHANNEL_2:
;;;1085       {
;;;1086         /* Disable the TIM Capture/Compare 2 interrupt */
;;;1087         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000014  bf04              ITT      EQ
000016  68d3              LDREQ    r3,[r2,#0xc]
000018  f0230304          BICEQ    r3,r3,#4
00001c  d00b              BEQ      |L36.54|
00001e  2908              CMP      r1,#8                 ;1075
;;;1088       }
;;;1089       break;
;;;1090       
;;;1091       case TIM_CHANNEL_3:
;;;1092       {
;;;1093         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1094         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000020  bf04              ITT      EQ
000022  68d3              LDREQ    r3,[r2,#0xc]
000024  f0230308          BICEQ    r3,r3,#8
000028  d005              BEQ      |L36.54|
00002a  290c              CMP      r1,#0xc               ;1075
;;;1095       }
;;;1096       break;
;;;1097       
;;;1098       case TIM_CHANNEL_4:
;;;1099       {
;;;1100         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1101         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
00002c  bf04              ITT      EQ
00002e  68d3              LDREQ    r3,[r2,#0xc]
000030  f0230310          BICEQ    r3,r3,#0x10
000034  d100              BNE      |L36.56|
                  |L36.54|
000036  60d3              STR      r3,[r2,#0xc]          ;1094
                  |L36.56|
;;;1102       }
;;;1103       break;
;;;1104       
;;;1105       default:
;;;1106       break; 
;;;1107     }
;;;1108     
;;;1109     /* Disable the complementary PWM output  */
;;;1110     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000038  2300              MOVS     r3,#0
00003a  6802              LDR      r2,[r0,#0]
00003c  f04f0c04          MOV      r12,#4
000040  408b              LSLS     r3,r3,r1
000042  6a14              LDR      r4,[r2,#0x20]
000044  fa0cf101          LSL      r1,r12,r1
000048  ea240101          BIC      r1,r4,r1
00004c  6211              STR      r1,[r2,#0x20]
00004e  6a11              LDR      r1,[r2,#0x20]
000050  4319              ORRS     r1,r1,r3
000052  6211              STR      r1,[r2,#0x20]
;;;1111     
;;;1112     /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;1113     tmpccer = htim->Instance->CCER;
000054  6801              LDR      r1,[r0,#0]
;;;1114     if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
000056  f2404244          MOV      r2,#0x444
00005a  6a0b              LDR      r3,[r1,#0x20]         ;1113
00005c  4213              TST      r3,r2
00005e  d103              BNE      |L36.104|
;;;1115     {
;;;1116       __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
000060  68cb              LDR      r3,[r1,#0xc]
000062  f0230380          BIC      r3,r3,#0x80
000066  60cb              STR      r3,[r1,#0xc]
                  |L36.104|
;;;1117     }
;;;1118     
;;;1119     /* Disable the Main Output */
;;;1120     __HAL_TIM_MOE_DISABLE(htim);
000068  6801              LDR      r1,[r0,#0]
00006a  f2411311          MOV      r3,#0x1111
00006e  f8d1c020          LDR      r12,[r1,#0x20]
000072  ea1c0f03          TST      r12,r3
000076  bf04              ITT      EQ
000078  f8d1c020          LDREQ    r12,[r1,#0x20]
00007c  ea1c0f02          TSTEQ    r12,r2
000080  d105              BNE      |L36.142|
000082  f8d1c044          LDR      r12,[r1,#0x44]
000086  f42c4c00          BIC      r12,r12,#0x8000
00008a  f8c1c044          STR      r12,[r1,#0x44]
                  |L36.142|
;;;1121     
;;;1122     /* Disable the Peripheral */
;;;1123     __HAL_TIM_DISABLE(htim);
00008e  6800              LDR      r0,[r0,#0]
000090  6a01              LDR      r1,[r0,#0x20]
000092  4219              TST      r1,r3
000094  bf04              ITT      EQ
000096  6a01              LDREQ    r1,[r0,#0x20]
000098  4211              TSTEQ    r1,r2
00009a  d103              BNE      |L36.164|
00009c  6801              LDR      r1,[r0,#0]
00009e  f0210101          BIC      r1,r1,#1
0000a2  6001              STR      r1,[r0,#0]
                  |L36.164|
;;;1124     
;;;1125     /* Return function status */
;;;1126     return HAL_OK;
;;;1127   } 
0000a4  f85d4b04          POP.W    {r4}
0000a8  2000              MOVS     r0,#0                 ;1126
0000aa  4770              BX       lr
;;;1128   
                          ENDP


                          AREA ||i.HAL_TIMEx_RemapConfig||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_RemapConfig PROC
;;;1896     */
;;;1897   HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
000000  6bc2              LDR      r2,[r0,#0x3c]
;;;1898   {
;;;1899     __HAL_LOCK(htim);
000002  2a01              CMP      r2,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;1900       
;;;1901     /* Check parameters */
;;;1902     assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
;;;1903     assert_param(IS_TIM_REMAP(Remap));
;;;1904     
;;;1905     /* Set the Timer remapping configuration */
;;;1906     htim->Instance->OR = Remap;
;;;1907     
;;;1908     htim->State = HAL_TIM_STATE_READY;
;;;1909     
;;;1910     __HAL_UNLOCK(htim);  
;;;1911     
;;;1912     return HAL_OK;
;;;1913   }
000008  4770              BXEQ     lr
00000a  2201              MOVS     r2,#1                 ;1899
00000c  f8d0c000          LDR      r12,[r0,#0]           ;1906
000010  2300              MOVS     r3,#0                 ;1910
000012  f8cc1050          STR      r1,[r12,#0x50]        ;1906
000016  6402              STR      r2,[r0,#0x40]         ;1908
000018  63c3              STR      r3,[r0,#0x3c]         ;1912
00001a  4618              MOV      r0,r3                 ;1912
00001c  4770              BX       lr
;;;1914   
                          ENDP


                          AREA ||i.HAL_TIM_ConfigOCrefClear||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ConfigOCrefClear PROC
;;;2071     */ 
;;;2072   HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
000000  b570              PUSH     {r4-r6,lr}
;;;2073                                              TIM_ClearInputConfigTypeDef *sClearInputConfig,
;;;2074                                              uint32_t Channel)
;;;2075   { 
000002  4604              MOV      r4,r0
;;;2076     uint32_t tmpsmcr = 0;
;;;2077   
;;;2078     /* Check the parameters */ 
;;;2079     assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
;;;2080     assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));
;;;2081                                           
;;;2082     /* Check input state */
;;;2083     __HAL_LOCK(htim);
000004  6bc0              LDR      r0,[r0,#0x3c]
000006  4616              MOV      r6,r2                 ;2075
000008  460d              MOV      r5,r1                 ;2075
00000a  2801              CMP      r0,#1
00000c  bf04              ITT      EQ
00000e  2002              MOVEQ    r0,#2
;;;2084     
;;;2085     switch (sClearInputConfig->ClearInputSource)
;;;2086     {
;;;2087       case TIM_CLEARINPUTSOURCE_NONE:
;;;2088       {
;;;2089         /* Get the TIMx SMCR register value */
;;;2090         tmpsmcr = htim->Instance->SMCR;
;;;2091         
;;;2092         /* Clear the ETR Bits */
;;;2093         tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
;;;2094         
;;;2095         /* Set TIMx_SMCR */
;;;2096         htim->Instance->SMCR = tmpsmcr;
;;;2097      }
;;;2098       break;
;;;2099   
;;;2100       case TIM_CLEARINPUTSOURCE_ETR:
;;;2101       {
;;;2102         /* Check the parameters */ 
;;;2103         assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
;;;2104         assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
;;;2105         assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));
;;;2106         
;;;2107         TIM_ETR_SetConfig(htim->Instance,
;;;2108                           sClearInputConfig->ClearInputPrescaler,
;;;2109                           sClearInputConfig->ClearInputPolarity,
;;;2110                           sClearInputConfig->ClearInputFilter);
;;;2111       }
;;;2112       break;
;;;2113       default:  
;;;2114       break;
;;;2115     }
;;;2116     
;;;2117     switch (Channel)
;;;2118     { 
;;;2119       case TIM_CHANNEL_1:
;;;2120         {
;;;2121           if(sClearInputConfig->ClearInputState != RESET)
;;;2122           {
;;;2123             /* Enable the Ocref clear feature for Channel 1 */
;;;2124             htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
;;;2125           }
;;;2126           else
;;;2127           {
;;;2128             /* Disable the Ocref clear feature for Channel 1 */
;;;2129             htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;      
;;;2130           }
;;;2131         }    
;;;2132         break;
;;;2133       case TIM_CHANNEL_2:    
;;;2134         {
;;;2135           if(sClearInputConfig->ClearInputState != RESET)
;;;2136           {
;;;2137             /* Enable the Ocref clear feature for Channel 2 */
;;;2138             htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
;;;2139           }
;;;2140           else
;;;2141           {
;;;2142             /* Disable the Ocref clear feature for Channel 2 */
;;;2143             htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;      
;;;2144           }
;;;2145         }    
;;;2146       break;
;;;2147       case TIM_CHANNEL_3:    
;;;2148         {
;;;2149           if(sClearInputConfig->ClearInputState != RESET)
;;;2150           {
;;;2151             /* Enable the Ocref clear feature for Channel 3 */
;;;2152             htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
;;;2153           }
;;;2154           else
;;;2155           {
;;;2156             /* Disable the Ocref clear feature for Channel 3 */
;;;2157             htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;      
;;;2158           }
;;;2159         }    
;;;2160       break;
;;;2161       case TIM_CHANNEL_4:    
;;;2162         {
;;;2163           if(sClearInputConfig->ClearInputState != RESET)
;;;2164           {
;;;2165             /* Enable the Ocref clear feature for Channel 4 */
;;;2166             htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
;;;2167           }
;;;2168           else
;;;2169           {
;;;2170             /* Disable the Ocref clear feature for Channel 4 */
;;;2171             htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;      
;;;2172           }
;;;2173         }    
;;;2174       break;
;;;2175       case TIM_CHANNEL_5:    
;;;2176         {
;;;2177           if(sClearInputConfig->ClearInputState != RESET)
;;;2178           {
;;;2179             /* Enable the Ocref clear feature for Channel 1 */
;;;2180             htim->Instance->CCMR3 |= TIM_CCMR3_OC5CE;
;;;2181           }
;;;2182           else
;;;2183           {
;;;2184             /* Disable the Ocref clear feature for Channel 1 */
;;;2185             htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5CE;      
;;;2186           }
;;;2187         }    
;;;2188       break;
;;;2189       case TIM_CHANNEL_6:    
;;;2190         {
;;;2191           if(sClearInputConfig->ClearInputState != RESET)
;;;2192           {
;;;2193             /* Enable the Ocref clear feature for Channel 1 */
;;;2194             htim->Instance->CCMR3 |= TIM_CCMR3_OC6CE;
;;;2195           }
;;;2196           else
;;;2197           {
;;;2198             /* Disable the Ocref clear feature for Channel 1 */
;;;2199             htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6CE;      
;;;2200           }
;;;2201         }    
;;;2202       break;
;;;2203       default:  
;;;2204       break;
;;;2205     } 
;;;2206     
;;;2207     __HAL_UNLOCK(htim);
;;;2208   
;;;2209     return HAL_OK;  
;;;2210   }
000010  bd70              POPEQ    {r4-r6,pc}
000012  2001              MOVS     r0,#1                 ;2083
000014  63e0              STR      r0,[r4,#0x3c]         ;2085
000016  6868              LDR      r0,[r5,#4]            ;2083
000018  b110              CBZ      r0,|L38.32|
00001a  2801              CMP      r0,#1                 ;2085
00001c  d006              BEQ      |L38.44|
00001e  e00b              B        |L38.56|
                  |L38.32|
000020  6820              LDR      r0,[r4,#0]            ;2090
000022  6881              LDR      r1,[r0,#8]            ;2090
000024  f421417f          BIC      r1,r1,#0xff00         ;2093
000028  6081              STR      r1,[r0,#8]            ;2096
00002a  e005              B        |L38.56|
                  |L38.44|
00002c  6820              LDR      r0,[r4,#0]            ;2107
00002e  692b              LDR      r3,[r5,#0x10]         ;2107
000030  e9d52102          LDRD     r2,r1,[r5,#8]         ;2107
000034  f7fffffe          BL       TIM_ETR_SetConfig
                  |L38.56|
000038  2e0c              CMP      r6,#0xc               ;2117
00003a  d02b              BEQ      |L38.148|
00003c  dc05              BGT      |L38.74|
00003e  b14e              CBZ      r6,|L38.84|
000040  2e04              CMP      r6,#4                 ;2117
000042  d012              BEQ      |L38.106|
000044  2e08              CMP      r6,#8                 ;2117
000046  d01a              BEQ      |L38.126|
000048  e038              B        |L38.188|
                  |L38.74|
00004a  2e10              CMP      r6,#0x10              ;2117
00004c  d02c              BEQ      |L38.168|
00004e  2e14              CMP      r6,#0x14              ;2117
000050  d037              BEQ      |L38.194|
000052  e033              B        |L38.188|
                  |L38.84|
000054  6828              LDR      r0,[r5,#0]            ;2121
000056  2800              CMP      r0,#0                 ;2121
000058  6820              LDR      r0,[r4,#0]            ;2129
00005a  6981              LDR      r1,[r0,#0x18]         ;2129
00005c  bf14              ITE      NE                    ;2124
00005e  f0410180          ORRNE    r1,r1,#0x80           ;2124
000062  f0210180          BICEQ    r1,r1,#0x80           ;2129
                  |L38.102|
000066  6181              STR      r1,[r0,#0x18]         ;2124
000068  e028              B        |L38.188|
                  |L38.106|
00006a  6828              LDR      r0,[r5,#0]            ;2135
00006c  2800              CMP      r0,#0                 ;2135
00006e  6820              LDR      r0,[r4,#0]            ;2143
000070  6981              LDR      r1,[r0,#0x18]         ;2143
000072  bf14              ITE      NE                    ;2138
000074  f4414100          ORRNE    r1,r1,#0x8000         ;2138
000078  f4214100          BICEQ    r1,r1,#0x8000         ;2143
00007c  e7f3              B        |L38.102|
                  |L38.126|
00007e  6828              LDR      r0,[r5,#0]            ;2149
000080  2800              CMP      r0,#0                 ;2149
000082  6820              LDR      r0,[r4,#0]            ;2157
000084  69c1              LDR      r1,[r0,#0x1c]         ;2157
000086  bf14              ITE      NE                    ;2152
000088  f0410180          ORRNE    r1,r1,#0x80           ;2152
00008c  f0210180          BICEQ    r1,r1,#0x80           ;2157
                  |L38.144|
000090  61c1              STR      r1,[r0,#0x1c]         ;2152
000092  e013              B        |L38.188|
                  |L38.148|
000094  6828              LDR      r0,[r5,#0]            ;2163
000096  2800              CMP      r0,#0                 ;2163
000098  6820              LDR      r0,[r4,#0]            ;2171
00009a  69c1              LDR      r1,[r0,#0x1c]         ;2171
00009c  bf14              ITE      NE                    ;2166
00009e  f4414100          ORRNE    r1,r1,#0x8000         ;2166
0000a2  f4214100          BICEQ    r1,r1,#0x8000         ;2171
0000a6  e7f3              B        |L38.144|
                  |L38.168|
0000a8  6828              LDR      r0,[r5,#0]            ;2177
0000aa  2800              CMP      r0,#0                 ;2177
0000ac  6820              LDR      r0,[r4,#0]            ;2185
0000ae  6d41              LDR      r1,[r0,#0x54]         ;2185
0000b0  bf14              ITE      NE                    ;2180
0000b2  f0410180          ORRNE    r1,r1,#0x80           ;2180
0000b6  f0210180          BICEQ    r1,r1,#0x80           ;2185
                  |L38.186|
0000ba  6541              STR      r1,[r0,#0x54]         ;2180
                  |L38.188|
0000bc  2000              MOVS     r0,#0                 ;2207
0000be  63e0              STR      r0,[r4,#0x3c]         ;2209
0000c0  bd70              POP      {r4-r6,pc}
                  |L38.194|
0000c2  6828              LDR      r0,[r5,#0]            ;2191
0000c4  2800              CMP      r0,#0                 ;2191
0000c6  6820              LDR      r0,[r4,#0]            ;2199
0000c8  6d41              LDR      r1,[r0,#0x54]         ;2199
0000ca  bf14              ITE      NE                    ;2194
0000cc  f4414100          ORRNE    r1,r1,#0x8000         ;2194
0000d0  f4214100          BICEQ    r1,r1,#0x8000         ;2199
0000d4  e7f1              B        |L38.186|
;;;2211   
                          ENDP


                          AREA ||i.HAL_TIM_OC_ConfigChannel||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OC_ConfigChannel PROC
;;;2226     */
;;;2227   HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2228   {  
000004  4604              MOV      r4,r0
;;;2229     /* Check the parameters */
;;;2230     assert_param(IS_TIM_CHANNELS(Channel)); 
;;;2231     assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
;;;2232     assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
;;;2233     
;;;2234     /* Check input state */
;;;2235     __HAL_LOCK(htim); 
000006  6bc0              LDR      r0,[r0,#0x3c]
000008  2801              CMP      r0,#1
00000a  bf0d              ITEET    EQ
00000c  2002              MOVEQ    r0,#2
00000e  2501              MOVNE    r5,#1
000010  63e5              STRNE    r5,[r4,#0x3c]
;;;2236     
;;;2237     htim->State = HAL_TIM_STATE_BUSY;
;;;2238     
;;;2239     switch (Channel)
;;;2240     {
;;;2241       case TIM_CHANNEL_1:
;;;2242       {
;;;2243         /* Check the parameters */
;;;2244         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
;;;2245         
;;;2246        /* Configure the TIM Channel 1 in Output Compare */
;;;2247         TIM_OC1_SetConfig(htim->Instance, sConfig);
;;;2248       }
;;;2249       break;
;;;2250       
;;;2251       case TIM_CHANNEL_2:
;;;2252       {
;;;2253         /* Check the parameters */
;;;2254         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
;;;2255         
;;;2256         /* Configure the TIM Channel 2 in Output Compare */
;;;2257         TIM_OC2_SetConfig(htim->Instance, sConfig);
;;;2258       }
;;;2259       break;
;;;2260       
;;;2261       case TIM_CHANNEL_3:
;;;2262       {
;;;2263         /* Check the parameters */
;;;2264         assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
;;;2265         
;;;2266         /* Configure the TIM Channel 3 in Output Compare */
;;;2267         TIM_OC3_SetConfig(htim->Instance, sConfig);
;;;2268       }
;;;2269       break;
;;;2270       
;;;2271       case TIM_CHANNEL_4:
;;;2272       {
;;;2273         /* Check the parameters */
;;;2274         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
;;;2275         
;;;2276          /* Configure the TIM Channel 4 in Output Compare */
;;;2277          TIM_OC4_SetConfig(htim->Instance, sConfig);
;;;2278       }
;;;2279       break;
;;;2280       
;;;2281       case TIM_CHANNEL_5:
;;;2282       {
;;;2283         /* Check the parameters */
;;;2284         assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
;;;2285         
;;;2286          /* Configure the TIM Channel 5 in Output Compare */
;;;2287          TIM_OC5_SetConfig(htim->Instance, sConfig);
;;;2288       }
;;;2289       break;
;;;2290       
;;;2291       case TIM_CHANNEL_6:
;;;2292       {
;;;2293         /* Check the parameters */
;;;2294         assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
;;;2295         
;;;2296          /* Configure the TIM Channel 6 in Output Compare */
;;;2297          TIM_OC6_SetConfig(htim->Instance, sConfig);
;;;2298       }
;;;2299       break;
;;;2300           
;;;2301       default:
;;;2302       break;    
;;;2303     }
;;;2304     
;;;2305     htim->State = HAL_TIM_STATE_READY;
;;;2306     
;;;2307     __HAL_UNLOCK(htim); 
;;;2308     
;;;2309     return HAL_OK;
;;;2310   }
000012  e8bd87f0          POPEQ    {r4-r10,pc}
000016  2002              MOVS     r0,#2                 ;2237
000018  2a0c              CMP      r2,#0xc               ;2239
00001a  6420              STR      r0,[r4,#0x40]         ;2237
00001c  d019              BEQ      |L39.82|
00001e  dc08              BGT      |L39.50|
000020  b17a              CBZ      r2,|L39.66|
000022  2a04              CMP      r2,#4                 ;2239
000024  d011              BEQ      |L39.74|
000026  2a08              CMP      r2,#8                 ;2239
000028  bf04              ITT      EQ                    ;2267
00002a  6820              LDREQ    r0,[r4,#0]            ;2267
00002c  f7fffffe          BLEQ     TIM_OC3_SetConfig
000030  e05d              B        |L39.238|
                  |L39.50|
000032  f8dfc0c4          LDR      r12,|L39.248|
000036  2a10              CMP      r2,#0x10              ;2239
000038  4b30              LDR      r3,|L39.252|
00003a  d00e              BEQ      |L39.90|
00003c  2a14              CMP      r2,#0x14              ;2239
00003e  d031              BEQ      |L39.164|
000040  e055              B        |L39.238|
                  |L39.66|
000042  6820              LDR      r0,[r4,#0]            ;2247
000044  f7fffffe          BL       TIM_OC1_SetConfig
000048  e051              B        |L39.238|
                  |L39.74|
00004a  6820              LDR      r0,[r4,#0]            ;2257
00004c  f7fffffe          BL       TIM_OC2_SetConfig
000050  e04d              B        |L39.238|
                  |L39.82|
000052  6820              LDR      r0,[r4,#0]            ;2277
000054  f7fffffe          BL       TIM_OC4_SetConfig
000058  e049              B        |L39.238|
                  |L39.90|
00005a  6820              LDR      r0,[r4,#0]            ;2279
00005c  6a02              LDR      r2,[r0,#0x20]         ;2279
00005e  f4223280          BIC      r2,r2,#0x10000        ;2279
000062  6202              STR      r2,[r0,#0x20]         ;2279
000064  6a06              LDR      r6,[r0,#0x20]         ;2279
000066  6842              LDR      r2,[r0,#4]            ;2279
000068  6d47              LDR      r7,[r0,#0x54]         ;2279
00006a  4560              CMP      r0,r12                ;2279
00006c  f8b19008          LDRH     r9,[r1,#8]            ;2279
000070  f4263600          BIC      r6,r6,#0x20000        ;2279
000074  f8d18000          LDR      r8,[r1,#0]            ;2279
000078  f0270c70          BIC      r12,r7,#0x70          ;2279
00007c  f42c3c80          BIC      r12,r12,#0x10000      ;2279
000080  ea464609          ORR      r6,r6,r9,LSL #16      ;2279
000084  ea480c0c          ORR      r12,r8,r12            ;2279
000088  bf18              IT       NE                    ;2279
00008a  4298              CMPNE    r0,r3                 ;2279
00008c  d104              BNE      |L39.152|
00008e  694b              LDR      r3,[r1,#0x14]         ;2287
000090  f4223280          BIC      r2,r2,#0x10000        ;2287
000094  ea422203          ORR      r2,r2,r3,LSL #8       ;2287
                  |L39.152|
000098  6042              STR      r2,[r0,#4]            ;2287
00009a  f8c0c054          STR      r12,[r0,#0x54]        ;2287
00009e  6849              LDR      r1,[r1,#4]            ;2287
0000a0  6581              STR      r1,[r0,#0x58]         ;2287
0000a2  e023              B        |L39.236|
                  |L39.164|
0000a4  6820              LDR      r0,[r4,#0]            ;2289
0000a6  6a02              LDR      r2,[r0,#0x20]         ;2289
0000a8  f4221280          BIC      r2,r2,#0x100000       ;2289
0000ac  6202              STR      r2,[r0,#0x20]         ;2289
0000ae  6a07              LDR      r7,[r0,#0x20]         ;2289
0000b0  6842              LDR      r2,[r0,#4]            ;2289
0000b2  6d46              LDR      r6,[r0,#0x54]         ;2289
0000b4  4560              CMP      r0,r12                ;2289
0000b6  f8b19008          LDRH     r9,[r1,#8]            ;2289
0000ba  f4271700          BIC      r7,r7,#0x200000       ;2289
0000be  f8d18000          LDR      r8,[r1,#0]            ;2289
0000c2  f4264ce0          BIC      r12,r6,#0x7000        ;2289
0000c6  f02c7c80          BIC      r12,r12,#0x1000000    ;2289
0000ca  ea475609          ORR      r6,r7,r9,LSL #20      ;2289
0000ce  ea4c2c08          ORR      r12,r12,r8,LSL #8     ;2289
0000d2  bf18              IT       NE                    ;2289
0000d4  4298              CMPNE    r0,r3                 ;2289
0000d6  d104              BNE      |L39.226|
0000d8  694b              LDR      r3,[r1,#0x14]         ;2297
0000da  f4222280          BIC      r2,r2,#0x40000        ;2297
0000de  ea422283          ORR      r2,r2,r3,LSL #10      ;2297
                  |L39.226|
0000e2  6042              STR      r2,[r0,#4]            ;2297
0000e4  f8c0c054          STR      r12,[r0,#0x54]        ;2297
0000e8  6849              LDR      r1,[r1,#4]            ;2297
0000ea  65c1              STR      r1,[r0,#0x5c]         ;2297
                  |L39.236|
0000ec  6206              STR      r6,[r0,#0x20]         ;2297
                  |L39.238|
0000ee  2000              MOVS     r0,#0                 ;2307
0000f0  6425              STR      r5,[r4,#0x40]         ;2305
0000f2  63e0              STR      r0,[r4,#0x3c]         ;2307
0000f4  e8bd87f0          POP      {r4-r10,pc}
;;;2311   
                          ENDP

                  |L39.248|
                          DCD      0x40010000
                  |L39.252|
                          DCD      0x40010400

                          AREA ||i.HAL_TIM_PWM_ConfigChannel||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PWM_ConfigChannel PROC
;;;2326     */
;;;2327   HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2328                                               TIM_OC_InitTypeDef* sConfig, 
;;;2329                                               uint32_t Channel)
;;;2330   {
000004  4604              MOV      r4,r0
;;;2331     /* Check the parameters */
;;;2332     assert_param(IS_TIM_CHANNELS(Channel)); 
;;;2333     assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
;;;2334     assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
;;;2335     assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
;;;2336     
;;;2337     /* Check input state */
;;;2338     __HAL_LOCK(htim);
000006  6bc0              LDR      r0,[r0,#0x3c]
000008  460d              MOV      r5,r1                 ;2330
00000a  2801              CMP      r0,#1
00000c  bf0d              ITEET    EQ
00000e  2002              MOVEQ    r0,#2
000010  2601              MOVNE    r6,#1
000012  63e6              STRNE    r6,[r4,#0x3c]
;;;2339     
;;;2340     htim->State = HAL_TIM_STATE_BUSY;
;;;2341       
;;;2342     switch (Channel)
;;;2343     {
;;;2344       case TIM_CHANNEL_1:
;;;2345       {
;;;2346         /* Check the parameters */
;;;2347         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
;;;2348         
;;;2349         /* Configure the Channel 1 in PWM mode */
;;;2350         TIM_OC1_SetConfig(htim->Instance, sConfig);
;;;2351         
;;;2352         /* Set the Preload enable bit for channel1 */
;;;2353         htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
;;;2354         
;;;2355         /* Configure the Output Fast mode */
;;;2356         htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
;;;2357         htim->Instance->CCMR1 |= sConfig->OCFastMode;
;;;2358       }
;;;2359       break;
;;;2360       
;;;2361       case TIM_CHANNEL_2:
;;;2362       {
;;;2363         /* Check the parameters */
;;;2364         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
;;;2365         
;;;2366         /* Configure the Channel 2 in PWM mode */
;;;2367         TIM_OC2_SetConfig(htim->Instance, sConfig);
;;;2368         
;;;2369         /* Set the Preload enable bit for channel2 */
;;;2370         htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
;;;2371         
;;;2372         /* Configure the Output Fast mode */
;;;2373         htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
;;;2374         htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
;;;2375       }
;;;2376       break;
;;;2377       
;;;2378       case TIM_CHANNEL_3:
;;;2379       {
;;;2380         /* Check the parameters */
;;;2381         assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
;;;2382         
;;;2383         /* Configure the Channel 3 in PWM mode */
;;;2384         TIM_OC3_SetConfig(htim->Instance, sConfig);
;;;2385         
;;;2386         /* Set the Preload enable bit for channel3 */
;;;2387         htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
;;;2388         
;;;2389        /* Configure the Output Fast mode */
;;;2390         htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
;;;2391         htim->Instance->CCMR2 |= sConfig->OCFastMode;  
;;;2392       }
;;;2393       break;
;;;2394       
;;;2395       case TIM_CHANNEL_4:
;;;2396       {
;;;2397         /* Check the parameters */
;;;2398         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
;;;2399         
;;;2400         /* Configure the Channel 4 in PWM mode */
;;;2401         TIM_OC4_SetConfig(htim->Instance, sConfig);
;;;2402         
;;;2403         /* Set the Preload enable bit for channel4 */
;;;2404         htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
;;;2405         
;;;2406        /* Configure the Output Fast mode */
;;;2407         htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
;;;2408         htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
;;;2409       }
;;;2410       break;
;;;2411       
;;;2412       case TIM_CHANNEL_5:
;;;2413       {
;;;2414          /* Check the parameters */
;;;2415         assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
;;;2416         
;;;2417        /* Configure the Channel 5 in PWM mode */
;;;2418         TIM_OC5_SetConfig(htim->Instance, sConfig);
;;;2419         
;;;2420         /* Set the Preload enable bit for channel5*/
;;;2421         htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
;;;2422         
;;;2423        /* Configure the Output Fast mode */
;;;2424         htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
;;;2425         htim->Instance->CCMR3 |= sConfig->OCFastMode;  
;;;2426       }
;;;2427       break;
;;;2428       
;;;2429       case TIM_CHANNEL_6:
;;;2430       {
;;;2431          /* Check the parameters */
;;;2432         assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
;;;2433         
;;;2434        /* Configure the Channel 5 in PWM mode */
;;;2435         TIM_OC6_SetConfig(htim->Instance, sConfig);
;;;2436         
;;;2437         /* Set the Preload enable bit for channel6 */
;;;2438         htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
;;;2439         
;;;2440        /* Configure the Output Fast mode */
;;;2441         htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
;;;2442         htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
;;;2443       }
;;;2444       break;
;;;2445       
;;;2446       default:
;;;2447       break;    
;;;2448     }
;;;2449     
;;;2450     htim->State = HAL_TIM_STATE_READY;
;;;2451       
;;;2452     __HAL_UNLOCK(htim);
;;;2453     
;;;2454     return HAL_OK;
;;;2455   }
000014  e8bd87f0          POPEQ    {r4-r10,pc}
000018  2002              MOVS     r0,#2                 ;2340
00001a  2a0c              CMP      r2,#0xc               ;2342
00001c  6420              STR      r0,[r4,#0x40]         ;2340
00001e  d047              BEQ      |L40.176|
000020  dc06              BGT      |L40.48|
000022  b16a              CBZ      r2,|L40.64|
000024  2a04              CMP      r2,#4                 ;2342
000026  d01d              BEQ      |L40.100|
000028  2a08              CMP      r2,#8                 ;2342
00002a  d02f              BEQ      |L40.140|
00002c  f000b8bf          B.W      |L40.430|
                  |L40.48|
000030  f8dfc184          LDR      r12,|L40.440|
000034  2a10              CMP      r2,#0x10              ;2342
000036  4b61              LDR      r3,|L40.444|
000038  d04e              BEQ      |L40.216|
00003a  2a14              CMP      r2,#0x14              ;2342
00003c  d07e              BEQ      |L40.316|
00003e  e0b6              B        |L40.430|
                  |L40.64|
000040  6820              LDR      r0,[r4,#0]            ;2350
000042  f7fffffe          BL       TIM_OC1_SetConfig
000046  6820              LDR      r0,[r4,#0]            ;2353
000048  6981              LDR      r1,[r0,#0x18]         ;2353
00004a  f0410108          ORR      r1,r1,#8              ;2353
00004e  6181              STR      r1,[r0,#0x18]         ;2353
000050  6820              LDR      r0,[r4,#0]            ;2356
000052  6981              LDR      r1,[r0,#0x18]         ;2356
000054  f0210104          BIC      r1,r1,#4              ;2356
000058  6181              STR      r1,[r0,#0x18]         ;2356
00005a  6820              LDR      r0,[r4,#0]            ;2357
00005c  6929              LDR      r1,[r5,#0x10]         ;2357
00005e  6982              LDR      r2,[r0,#0x18]         ;2357
000060  4311              ORRS     r1,r1,r2              ;2357
000062  e011              B        |L40.136|
                  |L40.100|
000064  6820              LDR      r0,[r4,#0]            ;2367
000066  f7fffffe          BL       TIM_OC2_SetConfig
00006a  6820              LDR      r0,[r4,#0]            ;2370
00006c  6981              LDR      r1,[r0,#0x18]         ;2370
00006e  f4416100          ORR      r1,r1,#0x800          ;2370
000072  6181              STR      r1,[r0,#0x18]         ;2370
000074  6820              LDR      r0,[r4,#0]            ;2373
000076  6981              LDR      r1,[r0,#0x18]         ;2373
000078  f4216180          BIC      r1,r1,#0x400          ;2373
00007c  6181              STR      r1,[r0,#0x18]         ;2373
00007e  6820              LDR      r0,[r4,#0]            ;2374
000080  6929              LDR      r1,[r5,#0x10]         ;2374
000082  6982              LDR      r2,[r0,#0x18]         ;2374
000084  ea422101          ORR      r1,r2,r1,LSL #8       ;2374
                  |L40.136|
000088  6181              STR      r1,[r0,#0x18]         ;2357
00008a  e090              B        |L40.430|
                  |L40.140|
00008c  6820              LDR      r0,[r4,#0]            ;2384
00008e  f7fffffe          BL       TIM_OC3_SetConfig
000092  6820              LDR      r0,[r4,#0]            ;2387
000094  69c1              LDR      r1,[r0,#0x1c]         ;2387
000096  f0410108          ORR      r1,r1,#8              ;2387
00009a  61c1              STR      r1,[r0,#0x1c]         ;2387
00009c  6820              LDR      r0,[r4,#0]            ;2390
00009e  69c1              LDR      r1,[r0,#0x1c]         ;2390
0000a0  f0210104          BIC      r1,r1,#4              ;2390
0000a4  61c1              STR      r1,[r0,#0x1c]         ;2390
0000a6  6820              LDR      r0,[r4,#0]            ;2391
0000a8  6929              LDR      r1,[r5,#0x10]         ;2391
0000aa  69c2              LDR      r2,[r0,#0x1c]         ;2391
0000ac  4311              ORRS     r1,r1,r2              ;2391
0000ae  e011              B        |L40.212|
                  |L40.176|
0000b0  6820              LDR      r0,[r4,#0]            ;2401
0000b2  f7fffffe          BL       TIM_OC4_SetConfig
0000b6  6820              LDR      r0,[r4,#0]            ;2404
0000b8  69c1              LDR      r1,[r0,#0x1c]         ;2404
0000ba  f4416100          ORR      r1,r1,#0x800          ;2404
0000be  61c1              STR      r1,[r0,#0x1c]         ;2404
0000c0  6820              LDR      r0,[r4,#0]            ;2407
0000c2  69c1              LDR      r1,[r0,#0x1c]         ;2407
0000c4  f4216180          BIC      r1,r1,#0x400          ;2407
0000c8  61c1              STR      r1,[r0,#0x1c]         ;2407
0000ca  6820              LDR      r0,[r4,#0]            ;2408
0000cc  6929              LDR      r1,[r5,#0x10]         ;2408
0000ce  69c2              LDR      r2,[r0,#0x1c]         ;2408
0000d0  ea422101          ORR      r1,r2,r1,LSL #8       ;2408
                  |L40.212|
0000d4  61c1              STR      r1,[r0,#0x1c]         ;2391
0000d6  e06a              B        |L40.430|
                  |L40.216|
0000d8  6820              LDR      r0,[r4,#0]            ;2391
0000da  6a01              LDR      r1,[r0,#0x20]         ;2391
0000dc  f4213180          BIC      r1,r1,#0x10000        ;2391
0000e0  6201              STR      r1,[r0,#0x20]         ;2391
0000e2  6a07              LDR      r7,[r0,#0x20]         ;2391
0000e4  6841              LDR      r1,[r0,#4]            ;2391
0000e6  6d42              LDR      r2,[r0,#0x54]         ;2391
0000e8  4560              CMP      r0,r12                ;2391
0000ea  f8b59008          LDRH     r9,[r5,#8]            ;2391
0000ee  f4273700          BIC      r7,r7,#0x20000        ;2391
0000f2  f8d58000          LDR      r8,[r5,#0]            ;2391
0000f6  f0220270          BIC      r2,r2,#0x70           ;2391
0000fa  f4223280          BIC      r2,r2,#0x10000        ;2391
0000fe  ea474c09          ORR      r12,r7,r9,LSL #16     ;2391
000102  ea480202          ORR      r2,r8,r2              ;2391
000106  bf18              IT       NE                    ;2391
000108  4298              CMPNE    r0,r3                 ;2391
00010a  d104              BNE      |L40.278|
00010c  696b              LDR      r3,[r5,#0x14]         ;2418
00010e  f4213180          BIC      r1,r1,#0x10000        ;2418
000112  ea412103          ORR      r1,r1,r3,LSL #8       ;2418
                  |L40.278|
000116  6041              STR      r1,[r0,#4]            ;2418
000118  6542              STR      r2,[r0,#0x54]         ;2418
00011a  6869              LDR      r1,[r5,#4]            ;2418
00011c  6581              STR      r1,[r0,#0x58]         ;2418
00011e  f8c0c020          STR      r12,[r0,#0x20]        ;2418
000122  6820              LDR      r0,[r4,#0]            ;2421
000124  6d41              LDR      r1,[r0,#0x54]         ;2421
000126  f0410108          ORR      r1,r1,#8              ;2421
00012a  6541              STR      r1,[r0,#0x54]         ;2421
00012c  6820              LDR      r0,[r4,#0]            ;2424
00012e  6d41              LDR      r1,[r0,#0x54]         ;2424
000130  f0210104          BIC      r1,r1,#4              ;2424
000134  6541              STR      r1,[r0,#0x54]         ;2424
000136  6820              LDR      r0,[r4,#0]            ;2425
000138  6929              LDR      r1,[r5,#0x10]         ;2425
00013a  e000              B        |L40.318|
                  |L40.316|
00013c  e002              B        |L40.324|
                  |L40.318|
00013e  6d42              LDR      r2,[r0,#0x54]         ;2425
000140  4311              ORRS     r1,r1,r2              ;2425
000142  e033              B        |L40.428|
                  |L40.324|
000144  6820              LDR      r0,[r4,#0]            ;2427
000146  6a01              LDR      r1,[r0,#0x20]         ;2427
000148  f4211180          BIC      r1,r1,#0x100000       ;2427
00014c  6201              STR      r1,[r0,#0x20]         ;2427
00014e  6a02              LDR      r2,[r0,#0x20]         ;2427
000150  6841              LDR      r1,[r0,#4]            ;2427
000152  6d47              LDR      r7,[r0,#0x54]         ;2427
000154  4560              CMP      r0,r12                ;2427
000156  f8b59008          LDRH     r9,[r5,#8]            ;2427
00015a  f4221200          BIC      r2,r2,#0x200000       ;2427
00015e  f8d58000          LDR      r8,[r5,#0]            ;2427
000162  f4274ce0          BIC      r12,r7,#0x7000        ;2427
000166  f02c7c80          BIC      r12,r12,#0x1000000    ;2427
00016a  ea425209          ORR      r2,r2,r9,LSL #20      ;2427
00016e  ea4c2c08          ORR      r12,r12,r8,LSL #8     ;2427
000172  bf18              IT       NE                    ;2427
000174  4298              CMPNE    r0,r3                 ;2427
000176  d104              BNE      |L40.386|
000178  696b              LDR      r3,[r5,#0x14]         ;2435
00017a  f4212180          BIC      r1,r1,#0x40000        ;2435
00017e  ea412183          ORR      r1,r1,r3,LSL #10      ;2435
                  |L40.386|
000182  6041              STR      r1,[r0,#4]            ;2435
000184  f8c0c054          STR      r12,[r0,#0x54]        ;2435
000188  6869              LDR      r1,[r5,#4]            ;2435
00018a  65c1              STR      r1,[r0,#0x5c]         ;2435
00018c  6202              STR      r2,[r0,#0x20]         ;2435
00018e  6820              LDR      r0,[r4,#0]            ;2438
000190  6d41              LDR      r1,[r0,#0x54]         ;2438
000192  f4416100          ORR      r1,r1,#0x800          ;2438
000196  6541              STR      r1,[r0,#0x54]         ;2438
000198  6820              LDR      r0,[r4,#0]            ;2441
00019a  6d41              LDR      r1,[r0,#0x54]         ;2441
00019c  f4216180          BIC      r1,r1,#0x400          ;2441
0001a0  6541              STR      r1,[r0,#0x54]         ;2441
0001a2  6820              LDR      r0,[r4,#0]            ;2442
0001a4  6929              LDR      r1,[r5,#0x10]         ;2442
0001a6  6d42              LDR      r2,[r0,#0x54]         ;2442
0001a8  ea422101          ORR      r1,r2,r1,LSL #8       ;2442
                  |L40.428|
0001ac  6541              STR      r1,[r0,#0x54]         ;2425
                  |L40.430|
0001ae  2000              MOVS     r0,#0                 ;2452
0001b0  6426              STR      r6,[r4,#0x40]         ;2450
0001b2  63e0              STR      r0,[r4,#0x3c]         ;2452
0001b4  e8bd87f0          POP      {r4-r10,pc}
;;;2456   
                          ENDP

                  |L40.440|
                          DCD      0x40010000
                  |L40.444|
                          DCD      0x40010400

                          AREA ||i.TIMEx_DMACommutationCplt||, CODE, READONLY, ALIGN=1

                  TIMEx_DMACommutationCplt PROC
;;;2040     */
;;;2041   void HAL_TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;2042   {
;;;2043     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6bc0              LDR      r0,[r0,#0x3c]
;;;2044     
;;;2045     htim->State= HAL_TIM_STATE_READY;
000004  2101              MOVS     r1,#1
000006  6401              STR      r1,[r0,#0x40]
;;;2046   
;;;2047   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;2048     htim->CommutationCallback(htim);
;;;2049   #else
;;;2050     HAL_TIMEx_CommutationCallback(htim); 
000008  f7fffffe          BL       HAL_TIMEx_CommutationCallback
;;;2051   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;2052   }
00000c  bd10              POP      {r4,pc}
;;;2053   /**
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F7_V1.11.0\\Drivers\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_tim_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F7_V1.11.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____REVSH|
#line 402
|__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____RRX|
#line 587
|__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
