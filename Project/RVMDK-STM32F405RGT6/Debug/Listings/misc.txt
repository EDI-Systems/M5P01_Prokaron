; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\misc.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\misc.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\M0P0_Library\STM32F4xx_StdPeriph_Driver\CMSIS\ST\STM32F4xx\Include -I..\..\..\M0P0_Library\STM32F4xx_StdPeriph_Driver\CMSIS\Include -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F405RGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F405xx -DSTM32F4XX -DUSE_STDPERIPH_DRIVER -DHSE_VALUE=8000000 -DPLL_M=8 --enum_is_int --signed_chars --omf_browse=.\debug\output\misc.crf ..\..\..\M0P0_Library\STM32F4xx_StdPeriph_Driver\src\misc.c]
                          THUMB

                          AREA ||i.NVIC_Init||, CODE, READONLY, ALIGN=2

                  NVIC_Init PROC
;;;129      */
;;;130    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000000  b410              PUSH     {r4}
;;;131    {
;;;132      uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
;;;133      
;;;134      /* Check the parameters */
;;;135      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;136      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;137      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;138        
;;;139      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
;;;140      {
;;;141        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;142        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
;;;143        tmppre = (0x4 - tmppriority);
;;;144        tmpsub = tmpsub >> tmppriority;
;;;145    
;;;146        tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
;;;147        tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
;;;148            
;;;149        tmppriority = tmppriority << 0x04;
;;;150            
;;;151        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
000002  7801              LDRB     r1,[r0,#0]
000004  6842              LDR      r2,[r0,#4]            ;131
000006  240f              MOVS     r4,#0xf               ;132
;;;152        
;;;153        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;154        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
000008  f04f0c01          MOV      r12,#1
00000c  b30a              CBZ      r2,|L1.82|
00000e  4a17              LDR      r2,|L1.108|
000010  6812              LDR      r2,[r2,#0]            ;142
000012  f10121e0          ADD      r1,r1,#0xe000e000     ;149
000016  f40262e0          AND      r2,r2,#0x700          ;142
00001a  f5c262e0          RSB      r2,r2,#0x700          ;142
00001e  f3c22207          UBFX     r2,r2,#8,#8           ;142
000022  f1c20304          RSB      r3,r2,#4              ;143
000026  40d4              LSRS     r4,r4,r2              ;144
000028  7842              LDRB     r2,[r0,#1]            ;146
00002a  409a              LSLS     r2,r2,r3              ;146
00002c  7883              LDRB     r3,[r0,#2]            ;147
00002e  4023              ANDS     r3,r3,r4              ;147
000030  431a              ORRS     r2,r2,r3              ;147
000032  0112              LSLS     r2,r2,#4              ;149
000034  f8812400          STRB     r2,[r1,#0x400]        ;151
000038  7800              LDRB     r0,[r0,#0]
00003a  f000011f          AND      r1,r0,#0x1f
00003e  fa0cf101          LSL      r1,r12,r1
000042  0940              LSRS     r0,r0,#5
000044  0080              LSLS     r0,r0,#2
000046  f10020e0          ADD      r0,r0,#0xe000e000
00004a  f8c01100          STR      r1,[r0,#0x100]
;;;155          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;156      }
;;;157      else
;;;158      {
;;;159        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;160        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
;;;161          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;162      }
;;;163    }
00004e  bc10              POP      {r4}
000050  4770              BX       lr
                  |L1.82|
000052  f001001f          AND      r0,r1,#0x1f           ;160
000056  fa0cf000          LSL      r0,r12,r0             ;160
00005a  0949              LSRS     r1,r1,#5              ;160
00005c  0089              LSLS     r1,r1,#2              ;160
00005e  f10121e0          ADD      r1,r1,#0xe000e000     ;160
000062  f8c10180          STR      r0,[r1,#0x180]        ;160
000066  bc10              POP      {r4}
000068  4770              BX       lr
;;;164    
                          ENDP

00006a  0000              DCW      0x0000
                  |L1.108|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_PriorityGroupConfig||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;111      */
;;;112    void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  4903              LDR      r1,|L2.16|
;;;113    {
;;;114      /* Check the parameters */
;;;115      assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;116      
;;;117      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;118      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000002  f04070fd          ORR      r0,r0,#0x1fa0000
000006  f0406080          ORR      r0,r0,#0x4000000
00000a  6008              STR      r0,[r1,#0]
;;;119    }
00000c  4770              BX       lr
;;;120    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_SetVectorTable||, CODE, READONLY, ALIGN=2

                  NVIC_SetVectorTable PROC
;;;173      */
;;;174    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
000000  f021017f          BIC      r1,r1,#0x7f
;;;175    { 
;;;176      /* Check the parameters */
;;;177      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;178      assert_param(IS_NVIC_OFFSET(Offset));  
;;;179       
;;;180      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
000004  f0214160          BIC      r1,r1,#0xe0000000
000008  4308              ORRS     r0,r0,r1
00000a  4901              LDR      r1,|L3.16|
00000c  6008              STR      r0,[r1,#0]
;;;181    }
00000e  4770              BX       lr
;;;182    
                          ENDP

                  |L3.16|
                          DCD      0xe000ed08

                          AREA ||i.NVIC_SystemLPConfig||, CODE, READONLY, ALIGN=2

                  NVIC_SystemLPConfig PROC
;;;192      */
;;;193    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
000000  4a04              LDR      r2,|L4.20|
;;;194    {
;;;195      /* Check the parameters */
;;;196      assert_param(IS_NVIC_LP(LowPowerMode));
;;;197      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;198      
;;;199      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;200      {
;;;201        SCB->SCR |= LowPowerMode;
;;;202      }
;;;203      else
;;;204      {
;;;205        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;201
000008  4308              ORRNE    r0,r0,r1              ;201
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;201
;;;206      }
;;;207    }
000010  4770              BX       lr
;;;208    
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0xe000ed10

                          AREA ||i.SysTick_CLKSourceConfig||, CODE, READONLY, ALIGN=1

                  SysTick_CLKSourceConfig PROC
;;;216      */
;;;217    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;218    {
;;;219      /* Check the parameters */
;;;220      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;221      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
000004  2804              CMP      r0,#4
;;;222      {
;;;223        SysTick->CTRL |= SysTick_CLKSource_HCLK;
;;;224      }
;;;225      else
;;;226      {
;;;227        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
000006  6908              LDR      r0,[r1,#0x10]
000008  bf0c              ITE      EQ                    ;223
00000a  f0400004          ORREQ    r0,r0,#4              ;223
00000e  f0200004          BICNE    r0,r0,#4
000012  6108              STR      r0,[r1,#0x10]         ;223
;;;228      }
;;;229    }
000014  4770              BX       lr
;;;230    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32F4xx_StdPeriph_Driver\\src\\misc.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_misc_c_d0fc1254____REV16|
#line 114 "..\\..\\..\\M0P0_Library\\STM32F4xx_StdPeriph_Driver\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_misc_c_d0fc1254____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_misc_c_d0fc1254____REVSH|
#line 128
|__asm___6_misc_c_d0fc1254____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
