; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f4xx_gpio.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f4xx_gpio.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\M0P0_Library\STM32F4xx_StdPeriph_Driver\CMSIS\ST\STM32F4xx\Include -I..\..\..\M0P0_Library\STM32F4xx_StdPeriph_Driver\CMSIS\Include -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F405RGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F405xx -DSTM32F4XX -DUSE_STDPERIPH_DRIVER -DHSE_VALUE=8000000 -DPLL_M=8 --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f4xx_gpio.crf ..\..\..\M0P0_Library\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_gpio.c]
                          THUMB

                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=1

                  GPIO_DeInit PROC
;;;119      */
;;;120    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  b510              PUSH     {r4,lr}
;;;121    {
;;;122      /* Check the parameters */
;;;123      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;124    
;;;125      if (GPIOx == GPIOA)
000002  f1a04180          SUB      r1,r0,#0x40000000
000006  f5b13100          SUBS     r1,r1,#0x20000
00000a  d023              BEQ      |L1.84|
;;;126      {
;;;127        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
;;;128        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
;;;129      }
;;;130      else if (GPIOx == GPIOB)
00000c  f5b16180          SUBS     r1,r1,#0x400
000010  d02a              BEQ      |L1.104|
;;;131      {
;;;132        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
;;;133        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
;;;134      }
;;;135      else if (GPIOx == GPIOC)
000012  f5b16180          SUBS     r1,r1,#0x400
000016  d031              BEQ      |L1.124|
;;;136      {
;;;137        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
;;;138        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
;;;139      }
;;;140      else if (GPIOx == GPIOD)
000018  f5b16180          SUBS     r1,r1,#0x400
00001c  d038              BEQ      |L1.144|
;;;141      {
;;;142        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
;;;143        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
;;;144      }
;;;145      else if (GPIOx == GPIOE)
00001e  f5b16180          SUBS     r1,r1,#0x400
000022  d03f              BEQ      |L1.164|
;;;146      {
;;;147        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
;;;148        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
;;;149      }
;;;150      else if (GPIOx == GPIOF)
000024  f5b16180          SUBS     r1,r1,#0x400
000028  d046              BEQ      |L1.184|
;;;151      {
;;;152        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
;;;153        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
;;;154      }
;;;155      else if (GPIOx == GPIOG)
00002a  f5b16180          SUBS     r1,r1,#0x400
00002e  d04d              BEQ      |L1.204|
;;;156      {
;;;157        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
;;;158        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
;;;159      }
;;;160      else if (GPIOx == GPIOH)
000030  f5b16180          SUBS     r1,r1,#0x400
000034  d054              BEQ      |L1.224|
;;;161      {
;;;162        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
;;;163        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
;;;164      }
;;;165      else
;;;166      {
;;;167        if (GPIOx == GPIOI)
000036  f5b16180          SUBS     r1,r1,#0x400
;;;168        {
;;;169          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
;;;170          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
;;;171        }
;;;172      }
;;;173    }
00003a  bf18              IT       NE
00003c  bd10              POPNE    {r4,pc}
00003e  2101              MOVS     r1,#1                 ;169
000040  0208              LSLS     r0,r1,#8              ;169
000042  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000046  e8bd4010          POP      {r4,lr}               ;170
00004a  2100              MOVS     r1,#0                 ;170
00004c  f44f7080          MOV      r0,#0x100             ;170
000050  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.84|
000054  2101              MOVS     r1,#1                 ;127
000056  4608              MOV      r0,r1                 ;127
000058  f7fffffe          BL       RCC_AHB1PeriphResetCmd
00005c  2100              MOVS     r1,#0                 ;128
00005e  e8bd4010          POP      {r4,lr}               ;128
000062  2001              MOVS     r0,#1                 ;128
000064  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.104|
000068  2101              MOVS     r1,#1                 ;132
00006a  2002              MOVS     r0,#2                 ;132
00006c  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000070  2100              MOVS     r1,#0                 ;133
000072  e8bd4010          POP      {r4,lr}               ;133
000076  2002              MOVS     r0,#2                 ;133
000078  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.124|
00007c  2101              MOVS     r1,#1                 ;137
00007e  2004              MOVS     r0,#4                 ;137
000080  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000084  2100              MOVS     r1,#0                 ;138
000086  e8bd4010          POP      {r4,lr}               ;138
00008a  2004              MOVS     r0,#4                 ;138
00008c  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.144|
000090  2101              MOVS     r1,#1                 ;142
000092  2008              MOVS     r0,#8                 ;142
000094  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000098  2100              MOVS     r1,#0                 ;143
00009a  e8bd4010          POP      {r4,lr}               ;143
00009e  2008              MOVS     r0,#8                 ;143
0000a0  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.164|
0000a4  2101              MOVS     r1,#1                 ;147
0000a6  2010              MOVS     r0,#0x10              ;147
0000a8  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000ac  2100              MOVS     r1,#0                 ;148
0000ae  e8bd4010          POP      {r4,lr}               ;148
0000b2  2010              MOVS     r0,#0x10              ;148
0000b4  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.184|
0000b8  2101              MOVS     r1,#1                 ;152
0000ba  2020              MOVS     r0,#0x20              ;152
0000bc  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000c0  2100              MOVS     r1,#0                 ;153
0000c2  e8bd4010          POP      {r4,lr}               ;153
0000c6  2020              MOVS     r0,#0x20              ;153
0000c8  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.204|
0000cc  2101              MOVS     r1,#1                 ;157
0000ce  2040              MOVS     r0,#0x40              ;157
0000d0  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000d4  2100              MOVS     r1,#0                 ;158
0000d6  e8bd4010          POP      {r4,lr}               ;158
0000da  2040              MOVS     r0,#0x40              ;158
0000dc  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.224|
0000e0  2101              MOVS     r1,#1                 ;162
0000e2  2080              MOVS     r0,#0x80              ;162
0000e4  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000e8  2100              MOVS     r1,#0                 ;163
0000ea  e8bd4010          POP      {r4,lr}               ;163
0000ee  2080              MOVS     r0,#0x80              ;163
0000f0  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
;;;174    
                          ENDP


                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=2

                  GPIO_Init PROC
;;;181      */
;;;182    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  e92d01f0          PUSH     {r4-r8}
;;;183    {
;;;184      uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
000004  2200              MOVS     r2,#0
;;;185    
;;;186      /* Check the parameters */
;;;187      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;188      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;189      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;190      assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
;;;191    
;;;192      /* -------------------------Configure the port pins---------------- */
;;;193      /*-- GPIO Mode Configuration --*/
;;;194      for (pinpos = 0x00; pinpos < 0x10; pinpos++)
;;;195      {
;;;196        pos = ((uint32_t)0x01) << pinpos;
000006  2501              MOVS     r5,#1
;;;197        /* Get the port pins position */
;;;198        currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;199    
;;;200        if (currentpin == pos)
;;;201        {
;;;202          GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
000008  f05f0603          MOVS.W   r6,#3
                  |L2.12|
00000c  f8d1c000          LDR      r12,[r1,#0]           ;198
000010  fa05f302          LSL      r3,r5,r2              ;196
000014  ea0c0c03          AND      r12,r12,r3            ;198
000018  459c              CMP      r12,r3                ;200
00001a  d133              BNE      |L2.132|
00001c  6807              LDR      r7,[r0,#0]
00001e  ea4f0c42          LSL      r12,r2,#1
000022  fa06f40c          LSL      r4,r6,r12
000026  43a7              BICS     r7,r7,r4
000028  6007              STR      r7,[r0,#0]
;;;203          GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
00002a  684f              LDR      r7,[r1,#4]
00002c  f8d08000          LDR      r8,[r0,#0]
000030  fa07f70c          LSL      r7,r7,r12
000034  ea470708          ORR      r7,r7,r8
000038  6007              STR      r7,[r0,#0]
;;;204    
;;;205          if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
00003a  684f              LDR      r7,[r1,#4]
00003c  2f01              CMP      r7,#1
00003e  bf18              IT       NE
000040  2f02              CMPNE    r7,#2
000042  d114              BNE      |L2.110|
;;;206          {
;;;207            /* Check Speed mode parameters */
;;;208            assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;209    
;;;210            /* Speed mode configuration */
;;;211            GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
000044  6887              LDR      r7,[r0,#8]
000046  43a7              BICS     r7,r7,r4
000048  6087              STR      r7,[r0,#8]
;;;212            GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
00004a  688f              LDR      r7,[r1,#8]
00004c  f8d08008          LDR      r8,[r0,#8]
000050  fa07f70c          LSL      r7,r7,r12
000054  ea470708          ORR      r7,r7,r8
000058  6087              STR      r7,[r0,#8]
;;;213    
;;;214            /* Check Output mode parameters */
;;;215            assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
;;;216    
;;;217            /* Output mode configuration*/
;;;218            GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
00005a  6847              LDR      r7,[r0,#4]
00005c  ea270303          BIC      r3,r7,r3
000060  6043              STR      r3,[r0,#4]
;;;219            GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
000062  6843              LDR      r3,[r0,#4]
000064  898f              LDRH     r7,[r1,#0xc]
000066  4097              LSLS     r7,r7,r2
000068  b2bf              UXTH     r7,r7
00006a  433b              ORRS     r3,r3,r7
00006c  6043              STR      r3,[r0,#4]
                  |L2.110|
;;;220          }
;;;221    
;;;222          /* Pull-up Pull down resistor configuration*/
;;;223          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
00006e  68c3              LDR      r3,[r0,#0xc]
000070  43a3              BICS     r3,r3,r4
000072  60c3              STR      r3,[r0,#0xc]
;;;224          GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
000074  690b              LDR      r3,[r1,#0x10]
000076  fa03f30c          LSL      r3,r3,r12
00007a  f8d0c00c          LDR      r12,[r0,#0xc]
00007e  ea43030c          ORR      r3,r3,r12
000082  60c3              STR      r3,[r0,#0xc]
                  |L2.132|
000084  1c52              ADDS     r2,r2,#1
000086  2a10              CMP      r2,#0x10              ;194
000088  d3c0              BCC      |L2.12|
;;;225        }
;;;226      }
;;;227    }
00008a  e8bd01f0          POP      {r4-r8}
00008e  4770              BX       lr
;;;228    
                          ENDP


                          AREA ||i.GPIO_PinAFConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinAFConfig PROC
;;;528      */
;;;529    void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
000000  074b              LSLS     r3,r1,#29
;;;530    {
;;;531      uint32_t temp = 0x00;
;;;532      uint32_t temp_2 = 0x00;
;;;533      
;;;534      /* Check the parameters */
;;;535      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;536      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;537      assert_param(IS_GPIO_AF(GPIO_AF));
;;;538      
;;;539      temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
000002  0edb              LSRS     r3,r3,#27
000004  409a              LSLS     r2,r2,r3
;;;540      GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
000006  08c9              LSRS     r1,r1,#3
000008  eb000081          ADD      r0,r0,r1,LSL #2
00000c  6a01              LDR      r1,[r0,#0x20]
00000e  f04f0c0f          MOV      r12,#0xf
000012  fa0cf303          LSL      r3,r12,r3
000016  4399              BICS     r1,r1,r3
000018  6201              STR      r1,[r0,#0x20]
;;;541      temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
00001a  6a01              LDR      r1,[r0,#0x20]
00001c  4311              ORRS     r1,r1,r2
;;;542      GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
00001e  6201              STR      r1,[r0,#0x20]
;;;543    }
000020  4770              BX       lr
;;;544    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;254      */
;;;255    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b081              SUB      sp,sp,#4
;;;256    {
;;;257      __IO uint32_t tmp = 0x00010000;
;;;258    
;;;259      /* Check the parameters */
;;;260      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;261      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;262    
;;;263      tmp |= GPIO_Pin;
000002  f4413280          ORR      r2,r1,#0x10000
;;;264      /* Set LCKK bit */
;;;265      GPIOx->LCKR = tmp;
000006  9200              STR      r2,[sp,#0]
000008  61c2              STR      r2,[r0,#0x1c]
;;;266      /* Reset LCKK bit */
;;;267      GPIOx->LCKR =  GPIO_Pin;
00000a  61c1              STR      r1,[r0,#0x1c]
;;;268      /* Set LCKK bit */
;;;269      GPIOx->LCKR = tmp;
00000c  9900              LDR      r1,[sp,#0]
00000e  61c1              STR      r1,[r0,#0x1c]
;;;270      /* Read LCKK bit*/
;;;271      tmp = GPIOx->LCKR;
000010  69c1              LDR      r1,[r0,#0x1c]
;;;272      /* Read LCKK bit*/
;;;273      tmp = GPIOx->LCKR;
000012  69c0              LDR      r0,[r0,#0x1c]
000014  9000              STR      r0,[sp,#0]
;;;274    }
000016  b001              ADD      sp,sp,#4
000018  4770              BX       lr
;;;275    
                          ENDP


                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;322      */
;;;323    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  6900              LDR      r0,[r0,#0x10]
;;;324    {
;;;325      /* Check the parameters */
;;;326      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;327    
;;;328      return ((uint16_t)GPIOx->IDR);
000002  b280              UXTH     r0,r0
;;;329    }
000004  4770              BX       lr
;;;330    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;298      */
;;;299    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;300    {
;;;301      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;302    
;;;303      /* Check the parameters */
;;;304      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;305      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;306    
;;;307      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6912              LDR      r2,[r2,#0x10]
000006  420a              TST      r2,r1
;;;308      {
;;;309        bitstatus = (uint8_t)Bit_SET;
000008  bf18              IT       NE
00000a  2001              MOVNE    r0,#1
;;;310      }
;;;311      else
;;;312      {
;;;313        bitstatus = (uint8_t)Bit_RESET;
;;;314      }
;;;315      return bitstatus;
;;;316    }
00000c  4770              BX       lr
;;;317    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;361      */
;;;362    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  6940              LDR      r0,[r0,#0x14]
;;;363    {
;;;364      /* Check the parameters */
;;;365      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;366    
;;;367      return ((uint16_t)GPIOx->ODR);
000002  b280              UXTH     r0,r0
;;;368    }
000004  4770              BX       lr
;;;369    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;337      */
;;;338    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;339    {
;;;340      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;341    
;;;342      /* Check the parameters */
;;;343      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;344      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;345    
;;;346      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6952              LDR      r2,[r2,#0x14]
000006  420a              TST      r2,r1
;;;347      {
;;;348        bitstatus = (uint8_t)Bit_SET;
000008  bf18              IT       NE
00000a  2001              MOVNE    r0,#1
;;;349      }
;;;350      else
;;;351      {
;;;352        bitstatus = (uint8_t)Bit_RESET;
;;;353      }
;;;354      return bitstatus;
;;;355    }
00000c  4770              BX       lr
;;;356    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;398      */
;;;399    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  8341              STRH     r1,[r0,#0x1a]
;;;400    {
;;;401      /* Check the parameters */
;;;402      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;403      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;404    
;;;405      GPIOx->BSRRH = GPIO_Pin;
;;;406    }
000002  4770              BX       lr
;;;407    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;379      */
;;;380    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  8301              STRH     r1,[r0,#0x18]
;;;381    {
;;;382      /* Check the parameters */
;;;383      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;384      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;385    
;;;386      GPIOx->BSRRL = GPIO_Pin;
;;;387    }
000002  4770              BX       lr
;;;388    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;233      */
;;;234    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;235    {
;;;236      /* Reset GPIO init structure parameters values */
;;;237      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
;;;238      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
000004  6001              STR      r1,[r0,#0]
000006  2100              MOVS     r1,#0
;;;239      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000008  6041              STR      r1,[r0,#4]
;;;240      GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
00000a  6081              STR      r1,[r0,#8]
;;;241      GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
00000c  60c1              STR      r1,[r0,#0xc]
00000e  6101              STR      r1,[r0,#0x10]
;;;242    }
000010  4770              BX       lr
;;;243    
                          ENDP


                          AREA ||i.GPIO_ToggleBits||, CODE, READONLY, ALIGN=1

                  GPIO_ToggleBits PROC
;;;455      */
;;;456    void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6942              LDR      r2,[r0,#0x14]
;;;457    {
;;;458      /* Check the parameters */
;;;459      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;460    
;;;461      GPIOx->ODR ^= GPIO_Pin;
000002  4051              EORS     r1,r1,r2
000004  6141              STR      r1,[r0,#0x14]
;;;462    }
000006  4770              BX       lr
;;;463    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;441      */
;;;442    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000000  6141              STR      r1,[r0,#0x14]
;;;443    {
;;;444      /* Check the parameters */
;;;445      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;446    
;;;447      GPIOx->ODR = PortVal;
;;;448    }
000002  4770              BX       lr
;;;449    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;418      */
;;;419    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  2a00              CMP      r2,#0
;;;420    {
;;;421      /* Check the parameters */
;;;422      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;423      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;424      assert_param(IS_GPIO_BIT_ACTION(BitVal));
;;;425    
;;;426      if (BitVal != Bit_RESET)
;;;427      {
;;;428        GPIOx->BSRRL = GPIO_Pin;
000002  bf14              ITE      NE
000004  8301              STRHNE   r1,[r0,#0x18]
;;;429      }
;;;430      else
;;;431      {
;;;432        GPIOx->BSRRH = GPIO_Pin ;
000006  8341              STRHEQ   r1,[r0,#0x1a]
;;;433      }
;;;434    }
000008  4770              BX       lr
;;;435    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_gpio.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_gpio_c_f8e8e39a____REV16|
#line 114 "..\\..\\..\\M0P0_Library\\STM32F4xx_StdPeriph_Driver\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f4xx_gpio_c_f8e8e39a____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_gpio_c_f8e8e39a____REVSH|
#line 128
|__asm___16_stm32f4xx_gpio_c_f8e8e39a____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
