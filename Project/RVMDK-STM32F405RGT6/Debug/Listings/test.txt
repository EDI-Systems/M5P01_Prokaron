; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\test.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\test.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\M0P0_Library\STM32F4xx_StdPeriph_Driver\CMSIS\ST\STM32F4xx\Include -I..\..\..\M0P0_Library\STM32F4xx_StdPeriph_Driver\CMSIS\Include -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F405RGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F405xx -DSTM32F4XX -DUSE_STDPERIPH_DRIVER -DHSE_VALUE=8000000 -DPLL_M=8 --enum_is_int --signed_chars --omf_browse=.\debug\output\test.crf ..\..\MProkaron\Benchmark\test.c]
                          THUMB

                          AREA ||i.Func_1||, CODE, READONLY, ALIGN=2

                  Func_1 PROC
;;;71     
;;;72     void Func_1(void)
000000  4c1c              LDR      r4,|L1.116|
000002  f04f0800          MOV      r8,#0
000006  f04f4680          MOV      r6,#0x40000000
00000a  f64f77ff          MOV      r7,#0xffff
00000e  f2427510          MOV      r5,#0x2710
                  |L1.18|
000012  6a70              LDR      r0,[r6,#0x24]
000014  ea070040          AND      r0,r7,r0,LSL #1
000018  8020              STRH     r0,[r4,#0]
00001a  f7fffffe          BL       RMP_Yield
00001e  f1080801          ADD      r8,r8,#1
000022  45a8              CMP      r8,r5
000024  dbf5              BLT      |L1.18|
;;;73     {
;;;74         Test_Yield_1();
;;;75         /* Change priority of thread 2 */
;;;76         RMP_Thd_Set(&Thd_2,2,RMP_MAX_SLICES);
000026  f8df8050          LDR      r8,|L1.120|
00002a  2102              MOVS     r1,#2
00002c  4642              MOV      r2,r8
00002e  4813              LDR      r0,|L1.124|
000030  f7fffffe          BL       RMP_Thd_Set
000034  2000              MOVS     r0,#0
000036  6220              STR      r0,[r4,#0x20]  ; Count
                  |L1.56|
000038  6a70              LDR      r0,[r6,#0x24]
00003a  ea070040          AND      r0,r7,r0,LSL #1
00003e  8020              STRH     r0,[r4,#0]
000040  4642              MOV      r2,r8
000042  2101              MOVS     r1,#1
000044  480d              LDR      r0,|L1.124|
000046  f7fffffe          BL       RMP_Thd_Snd
00004a  6a20              LDR      r0,[r4,#0x20]  ; Count
00004c  1c40              ADDS     r0,r0,#1
00004e  6220              STR      r0,[r4,#0x20]  ; Count
000050  42a8              CMP      r0,r5
000052  dbf1              BLT      |L1.56|
000054  f04f0800          MOV      r8,#0
                  |L1.88|
000058  6a70              LDR      r0,[r6,#0x24]
00005a  ea070040          AND      r0,r7,r0,LSL #1
00005e  8020              STRH     r0,[r4,#0]
000060  2101              MOVS     r1,#1
000062  4807              LDR      r0,|L1.128|
000064  f7fffffe          BL       RMP_Sem_Post
000068  f1080801          ADD      r8,r8,#1
00006c  45a8              CMP      r8,r5
00006e  dbf3              BLT      |L1.88|
                  |L1.112|
;;;77         Test_Mail_1();
;;;78         Test_Sem_1();
;;;79         while(1);
000070  e7fe              B        |L1.112|
;;;80     }
;;;81     /* End Function:Test_Yield ***************************************************/
                          ENDP

000072  0000              DCW      0x0000
                  |L1.116|
                          DCD      ||.data||
                  |L1.120|
                          DCD      0x000186a0
                  |L1.124|
                          DCD      ||.bss||+0x854
                  |L1.128|
                          DCD      ||.bss||+0x890

                          AREA ||i.Func_2||, CODE, READONLY, ALIGN=2

                  Func_2 PROC
;;;150    
;;;151    void Func_2(void)
000000  4c79              LDR      r4,|L2.488|
;;;152    {
000002  b082              SUB      sp,sp,#8
;;;153        /* Yield tests */
;;;154        Total=0;
000004  f04f0a00          MOV      r10,#0
000008  f8c4a004          STR      r10,[r4,#4]  ; Total
00000c  46d0              MOV      r8,r10
00000e  f04f4680          MOV      r6,#0x40000000
000012  f64f77ff          MOV      r7,#0xffff
000016  f2427510          MOV      r5,#0x2710
00001a  bf00              NOP      
                  |L2.28|
00001c  f7fffffe          BL       RMP_Yield
000020  6a70              LDR      r0,[r6,#0x24]
000022  ea070040          AND      r0,r7,r0,LSL #1
000026  8060              STRH     r0,[r4,#2]
000028  8860              LDRH     r0,[r4,#2]  ; End
00002a  8821              LDRH     r1,[r4,#0]  ; Start
00002c  1a40              SUBS     r0,r0,r1
00002e  6861              LDR      r1,[r4,#4]  ; Total
000030  b280              UXTH     r0,r0
000032  4408              ADD      r0,r0,r1
000034  6060              STR      r0,[r4,#4]  ; Total
000036  f1080801          ADD      r8,r8,#1
00003a  45a8              CMP      r8,r5
00003c  dbee              BLT      |L2.28|
;;;155        Test_Yield_2();
;;;156        RMP_PRINTK_S("Yield: ");
00003e  a06b              ADR      r0,|L2.492|
000040  f7fffffe          BL       RMP_Print_String
;;;157        
;;;158        Yield_Time=Total/10000;
000044  6860              LDR      r0,[r4,#4]  ; Total
000046  fbb0f0f5          UDIV     r0,r0,r5
00004a  60e0              STR      r0,[r4,#0xc]  ; Yield_Time
;;;159        RMP_PRINTK_I(Yield_Time);
00004c  68e0              LDR      r0,[r4,#0xc]  ; Yield_Time
00004e  f7fffffe          BL       RMP_Print_Int
;;;160        RMP_PRINTK_S(" cycles.\r\n");
000052  a068              ADR      r0,|L2.500|
000054  f7fffffe          BL       RMP_Print_String
;;;161        /* Change priority of thread 2, just in case */
;;;162        RMP_Thd_Set(&Thd_2,2,RMP_MAX_SLICES);
000058  f8df91a4          LDR      r9,|L2.512|
00005c  2102              MOVS     r1,#2
00005e  464a              MOV      r2,r9
000060  4868              LDR      r0,|L2.516|
000062  f7fffffe          BL       RMP_Thd_Set
;;;163        
;;;164        /* Mailbox tests */
;;;165        Total=0;
000066  f8c4a004          STR      r10,[r4,#4]  ; Total
00006a  f04f0800          MOV      r8,#0
                  |L2.110|
00006e  4649              MOV      r1,r9
000070  4668              MOV      r0,sp
000072  f7fffffe          BL       RMP_Thd_Rcv
000076  6a70              LDR      r0,[r6,#0x24]
000078  ea070040          AND      r0,r7,r0,LSL #1
00007c  8060              STRH     r0,[r4,#2]
00007e  8860              LDRH     r0,[r4,#2]  ; End
000080  8821              LDRH     r1,[r4,#0]  ; Start
000082  1a40              SUBS     r0,r0,r1
000084  6861              LDR      r1,[r4,#4]  ; Total
000086  b280              UXTH     r0,r0
000088  4408              ADD      r0,r0,r1
00008a  6060              STR      r0,[r4,#4]  ; Total
00008c  f1080801          ADD      r8,r8,#1
000090  45a8              CMP      r8,r5
000092  dbec              BLT      |L2.110|
;;;166        Test_Mail_2();
;;;167        RMP_PRINTK_S("Mailbox: ");
000094  a05c              ADR      r0,|L2.520|
000096  f7fffffe          BL       RMP_Print_String
;;;168        Mailbox_Time=Total/10000;
00009a  6860              LDR      r0,[r4,#4]  ; Total
00009c  fbb0f0f5          UDIV     r0,r0,r5
0000a0  6120              STR      r0,[r4,#0x10]  ; Mailbox_Time
;;;169        RMP_PRINTK_I(Mailbox_Time);
0000a2  6920              LDR      r0,[r4,#0x10]  ; Mailbox_Time
0000a4  f7fffffe          BL       RMP_Print_Int
;;;170        RMP_PRINTK_S(" cycles.\r\n");
0000a8  a052              ADR      r0,|L2.500|
0000aa  f7fffffe          BL       RMP_Print_String
;;;171        
;;;172        /* Semaphore tests */
;;;173        Total=0;
0000ae  f8c4a004          STR      r10,[r4,#4]  ; Total
0000b2  f04f0800          MOV      r8,#0
                  |L2.182|
0000b6  4649              MOV      r1,r9
0000b8  4856              LDR      r0,|L2.532|
0000ba  f7fffffe          BL       RMP_Sem_Pend
0000be  6a70              LDR      r0,[r6,#0x24]
0000c0  ea070040          AND      r0,r7,r0,LSL #1
0000c4  8060              STRH     r0,[r4,#2]
0000c6  8860              LDRH     r0,[r4,#2]  ; End
0000c8  8821              LDRH     r1,[r4,#0]  ; Start
0000ca  1a40              SUBS     r0,r0,r1
0000cc  6861              LDR      r1,[r4,#4]  ; Total
0000ce  b280              UXTH     r0,r0
0000d0  4408              ADD      r0,r0,r1
0000d2  6060              STR      r0,[r4,#4]  ; Total
0000d4  f1080801          ADD      r8,r8,#1
0000d8  45a8              CMP      r8,r5
0000da  dbec              BLT      |L2.182|
;;;174        Test_Sem_2();
;;;175        RMP_PRINTK_S("Semaphore: ");
0000dc  a04e              ADR      r0,|L2.536|
0000de  f7fffffe          BL       RMP_Print_String
;;;176        Semaphore_Time=Total/10000;
0000e2  6860              LDR      r0,[r4,#4]  ; Total
0000e4  fbb0f0f5          UDIV     r0,r0,r5
0000e8  6160              STR      r0,[r4,#0x14]  ; Semaphore_Time
;;;177        RMP_PRINTK_I(Semaphore_Time);
0000ea  6960              LDR      r0,[r4,#0x14]  ; Semaphore_Time
0000ec  f7fffffe          BL       RMP_Print_Int
;;;178        RMP_PRINTK_S(" cycles.\r\n");
0000f0  a040              ADR      r0,|L2.500|
0000f2  f7fffffe          BL       RMP_Print_String
;;;179        
;;;180        /* Mailbox from interrupt tests */
;;;181        Total=0;
0000f6  f8c4a004          STR      r10,[r4,#4]  ; Total
0000fa  2101              MOVS     r1,#1
0000fc  2004              MOVS     r0,#4
0000fe  f7fffffe          BL       RCC_APB1PeriphClockCmd
000102  f8df8120          LDR      r8,|L2.548|
000106  4640              MOV      r0,r8
000108  f7fffffe          BL       TIM_DeInit
00010c  4846              LDR      r0,|L2.552|
00010e  f24411a0          MOV      r1,#0x41a0
000112  6041              STR      r1,[r0,#4]  ; TIM4_Handle
000114  f8a0a000          STRH     r10,[r0,#0]
000118  f8a0a008          STRH     r10,[r0,#8]
00011c  2110              MOVS     r1,#0x10
00011e  8041              STRH     r1,[r0,#2]
000120  4601              MOV      r1,r0
000122  4640              MOV      r0,r8
000124  f7fffffe          BL       TIM_TimeBaseInit
000128  2101              MOVS     r1,#1
00012a  4640              MOV      r0,r8
00012c  f7fffffe          BL       TIM_ClearFlag
000130  2201              MOVS     r2,#1
000132  4611              MOV      r1,r2
000134  4640              MOV      r0,r8
000136  f7fffffe          BL       TIM_ITConfig
00013a  2101              MOVS     r1,#1
00013c  4640              MOV      r0,r8
00013e  f7fffffe          BL       TIM_Cmd
000142  493a              LDR      r1,|L2.556|
000144  20f0              MOVS     r0,#0xf0
000146  f8810400          STRB     r0,[r1,#0x400]
00014a  f04f20e0          MOV      r0,#0xe000e000
00014e  f8c06100          STR      r6,[r0,#0x100]
000152  f8c4a024          STR      r10,[r4,#0x24]  ; Count
                  |L2.342|
000156  4649              MOV      r1,r9
000158  4668              MOV      r0,sp
00015a  f7fffffe          BL       RMP_Thd_Rcv
00015e  6a70              LDR      r0,[r6,#0x24]
000160  ea070040          AND      r0,r7,r0,LSL #1
000164  8060              STRH     r0,[r4,#2]
000166  8860              LDRH     r0,[r4,#2]  ; End
000168  8821              LDRH     r1,[r4,#0]  ; Start
00016a  1a40              SUBS     r0,r0,r1
00016c  6861              LDR      r1,[r4,#4]  ; Total
00016e  b280              UXTH     r0,r0
000170  4408              ADD      r0,r0,r1
000172  6060              STR      r0,[r4,#4]  ; Total
000174  6a60              LDR      r0,[r4,#0x24]  ; Count
000176  1c40              ADDS     r0,r0,#1
000178  6260              STR      r0,[r4,#0x24]  ; Count
00017a  42a8              CMP      r0,r5
00017c  dbeb              BLT      |L2.342|
;;;182        Int_Init();
;;;183        Test_Mail_ISR();
;;;184        
;;;185        /* Semaphore from interrupt tests */
;;;186        Temp=Total;
00017e  6860              LDR      r0,[r4,#4]  ; Total
000180  60a0              STR      r0,[r4,#8]  ; Temp
;;;187        Total=0;
000182  f8c4a004          STR      r10,[r4,#4]  ; Total
000186  f8c4a028          STR      r10,[r4,#0x28]  ; Count
                  |L2.394|
00018a  4649              MOV      r1,r9
00018c  4821              LDR      r0,|L2.532|
00018e  f7fffffe          BL       RMP_Sem_Pend
000192  6a70              LDR      r0,[r6,#0x24]
000194  ea070040          AND      r0,r7,r0,LSL #1
000198  8060              STRH     r0,[r4,#2]
00019a  8860              LDRH     r0,[r4,#2]  ; End
00019c  8821              LDRH     r1,[r4,#0]  ; Start
00019e  1a40              SUBS     r0,r0,r1
0001a0  6861              LDR      r1,[r4,#4]  ; Total
0001a2  b280              UXTH     r0,r0
0001a4  4408              ADD      r0,r0,r1
0001a6  6060              STR      r0,[r4,#4]  ; Total
0001a8  6aa0              LDR      r0,[r4,#0x28]  ; Count
0001aa  1c40              ADDS     r0,r0,#1
0001ac  62a0              STR      r0,[r4,#0x28]  ; Count
0001ae  42a8              CMP      r0,r5
0001b0  dbeb              BLT      |L2.394|
;;;188        Test_Sem_ISR();
;;;189        
;;;190        RMP_PRINTK_S("Mailbox-ISR: ");
0001b2  a01f              ADR      r0,|L2.560|
0001b4  f7fffffe          BL       RMP_Print_String
;;;191        Mailbox_ISR_Time=Temp/10000;
0001b8  68a0              LDR      r0,[r4,#8]  ; Temp
0001ba  fbb0f0f5          UDIV     r0,r0,r5
0001be  61a0              STR      r0,[r4,#0x18]  ; Mailbox_ISR_Time
;;;192        RMP_PRINTK_I(Mailbox_ISR_Time);
0001c0  69a0              LDR      r0,[r4,#0x18]  ; Mailbox_ISR_Time
0001c2  f7fffffe          BL       RMP_Print_Int
;;;193        RMP_PRINTK_S(" cycles.\r\n");
0001c6  a00b              ADR      r0,|L2.500|
0001c8  f7fffffe          BL       RMP_Print_String
;;;194        RMP_PRINTK_S("Semaphore-ISR: ");
0001cc  a01c              ADR      r0,|L2.576|
0001ce  f7fffffe          BL       RMP_Print_String
;;;195        Semaphore_ISR_Time=Total/10000;
0001d2  6860              LDR      r0,[r4,#4]  ; Total
0001d4  fbb0f0f5          UDIV     r0,r0,r5
0001d8  61e0              STR      r0,[r4,#0x1c]  ; Semaphore_ISR_Time
;;;196        RMP_PRINTK_I(Semaphore_ISR_Time);
0001da  69e0              LDR      r0,[r4,#0x1c]  ; Semaphore_ISR_Time
0001dc  f7fffffe          BL       RMP_Print_Int
;;;197        RMP_PRINTK_S(" cycles.\r\n");
0001e0  a004              ADR      r0,|L2.500|
0001e2  f7fffffe          BL       RMP_Print_String
                  |L2.486|
;;;198        
;;;199        while(1);
0001e6  e7fe              B        |L2.486|
;;;200    }
;;;201    /* End Function:Func_2 *******************************************************/
                          ENDP

                  |L2.488|
                          DCD      ||.data||
                  |L2.492|
0001ec  5969656c          DCB      "Yield: ",0
0001f0  643a2000
                  |L2.500|
0001f4  20637963          DCB      " cycles.\r\n",0
0001f8  6c65732e
0001fc  0d0a00  
0001ff  00                DCB      0
                  |L2.512|
                          DCD      0x000186a0
                  |L2.516|
                          DCD      ||.bss||+0x854
                  |L2.520|
000208  4d61696c          DCB      "Mailbox: ",0
00020c  626f783a
000210  2000    
000212  00                DCB      0
000213  00                DCB      0
                  |L2.532|
                          DCD      ||.bss||+0x890
                  |L2.536|
000218  53656d61          DCB      "Semaphore: ",0
00021c  70686f72
000220  653a2000
                  |L2.548|
                          DCD      0x40000800
                  |L2.552|
                          DCD      ||.bss||+0xc
                  |L2.556|
                          DCD      0xe000e01e
                  |L2.560|
000230  4d61696c          DCB      "Mailbox-ISR: ",0
000234  626f782d
000238  4953523a
00023c  2000    
00023e  00                DCB      0
00023f  00                DCB      0
                  |L2.576|
000240  53656d61          DCB      "Semaphore-ISR: ",0
000244  70686f72
000248  652d4953
00024c  523a2000

                          AREA ||i.Int_Disable||, CODE, READONLY, ALIGN=1

                  Int_Disable PROC
;;;95     ******************************************************************************/
;;;96     void Int_Disable(void)
000000  f04f21e0          MOV      r1,#0xe000e000
000004  f04f4080          MOV      r0,#0x40000000
000008  f8c10180          STR      r0,[r1,#0x180]
;;;97     {
;;;98         /* Disable timer 4 interrupt */
;;;99         NVIC_DisableIRQ(TIM4_IRQn);
;;;100    }
00000c  4770              BX       lr
;;;101    #endif
                          ENDP


                          AREA ||i.Int_Handler||, CODE, READONLY, ALIGN=2

                  Int_Handler PROC
;;;208    ******************************************************************************/
;;;209    void Int_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;210    {
;;;211        static cnt_t Count=0;
;;;212        
;;;213        if(Count<10000)
000002  4c20              LDR      r4,|L4.132|
000004  f2427c10          MOV      r12,#0x2710
;;;214        {
;;;215            Count++;
;;;216            Start=COUNTER_READ();
000008  f64f73ff          MOV      r3,#0xffff
00000c  6ae2              LDR      r2,[r4,#0x2c]         ;215  ; Count
00000e  f04f4180          MOV      r1,#0x40000000
000012  1c50              ADDS     r0,r2,#1              ;215
000014  4562              CMP      r2,r12                ;213
000016  da15              BGE      |L4.68|
000018  62e0              STR      r0,[r4,#0x2c]  ; Count
00001a  6a48              LDR      r0,[r1,#0x24]
00001c  ea030040          AND      r0,r3,r0,LSL #1
000020  8020              STRH     r0,[r4,#0]
;;;217            if(RMP_Thd_Snd_ISR(&Thd_2, 1)<0)
000022  2101              MOVS     r1,#1
000024  4818              LDR      r0,|L4.136|
000026  f7fffffe          BL       RMP_Thd_Snd_ISR
00002a  2800              CMP      r0,#0
;;;218            {
;;;219                RMP_PRINTK_S("ISR Mailbox send failure: ");
;;;220                RMP_PRINTK_I(Count);
;;;221                RMP_PRINTK_S(" sends.\r\n");
;;;222                while(1);
;;;223            }
;;;224        }
;;;225        else if(Count<20000)
;;;226        {
;;;227            Count++;
;;;228            Start=COUNTER_READ();
;;;229            if(RMP_Sem_Post_ISR(&Sem_1, 1)<0)
;;;230            {
;;;231                RMP_PRINTK_S("ISR semaphore post failure: ");
;;;232                RMP_PRINTK_I(Count);
;;;233                RMP_PRINTK_S(" posts.\r\n");
;;;234                while(1);
;;;235            }
;;;236        }
;;;237        else
;;;238            Int_Disable();
;;;239    }
00002c  bfa8              IT       GE
00002e  bd10              POPGE    {r4,pc}
000030  a016              ADR      r0,|L4.140|
000032  f7fffffe          BL       RMP_Print_String
000036  6ae0              LDR      r0,[r4,#0x2c]         ;220  ; Count
000038  f7fffffe          BL       RMP_Print_Int
00003c  a01a              ADR      r0,|L4.168|
00003e  f7fffffe          BL       RMP_Print_String
                  |L4.66|
000042  e7fe              B        |L4.66|
                  |L4.68|
000044  f6446c20          MOV      r12,#0x4e20           ;225
000048  4562              CMP      r2,r12                ;225
00004a  bfa2              ITTT     GE                    ;225
00004c  f04f20e0          MOVGE    r0,#0xe000e000        ;225
000050  f8c01180          STRGE    r1,[r0,#0x180]        ;225
000054  bd10              POPGE    {r4,pc}
000056  62e0              STR      r0,[r4,#0x2c]         ;228  ; Count
000058  6a48              LDR      r0,[r1,#0x24]         ;228
00005a  ea030040          AND      r0,r3,r0,LSL #1       ;228
00005e  8020              STRH     r0,[r4,#0]            ;228
000060  2101              MOVS     r1,#1                 ;229
000062  4814              LDR      r0,|L4.180|
000064  f7fffffe          BL       RMP_Sem_Post_ISR
000068  2800              CMP      r0,#0                 ;229
00006a  bfa8              IT       GE
00006c  bd10              POPGE    {r4,pc}
00006e  a012              ADR      r0,|L4.184|
000070  f7fffffe          BL       RMP_Print_String
000074  6ae0              LDR      r0,[r4,#0x2c]         ;232  ; Count
000076  f7fffffe          BL       RMP_Print_Int
00007a  a017              ADR      r0,|L4.216|
00007c  f7fffffe          BL       RMP_Print_String
                  |L4.128|
000080  e7fe              B        |L4.128|
;;;240    #endif
                          ENDP

000082  0000              DCW      0x0000
                  |L4.132|
                          DCD      ||.data||
                  |L4.136|
                          DCD      ||.bss||+0x854
                  |L4.140|
00008c  49535220          DCB      "ISR Mailbox send failure: ",0
000090  4d61696c
000094  626f7820
000098  73656e64
00009c  20666169
0000a0  6c757265
0000a4  3a2000  
0000a7  00                DCB      0
                  |L4.168|
0000a8  2073656e          DCB      " sends.\r\n",0
0000ac  64732e0d
0000b0  0a00    
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L4.180|
                          DCD      ||.bss||+0x890
                  |L4.184|
0000b8  49535220          DCB      "ISR semaphore post failure: ",0
0000bc  73656d61
0000c0  70686f72
0000c4  6520706f
0000c8  73742066
0000cc  61696c75
0000d0  72653a20
0000d4  00      
0000d5  00                DCB      0
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L4.216|
0000d8  20706f73          DCB      " posts.\r\n",0
0000dc  74732e0d
0000e0  0a00    
0000e2  00                DCB      0
0000e3  00                DCB      0

                          AREA ||i.Int_Init||, CODE, READONLY, ALIGN=2

                  Int_Init PROC
;;;62     ******************************************************************************/
;;;63     void Int_Init(void)
000000  b510              PUSH     {r4,lr}
;;;64     {
;;;65         /* TIM4 clock = 1/2 CPU clock */
;;;66         RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;67         TIM_DeInit(TIM4);
00000a  4c13              LDR      r4,|L5.88|
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIM_DeInit
;;;68         TIM4_Handle.TIM_Period=16800; 
000012  4912              LDR      r1,|L5.92|
000014  f24410a0          MOV      r0,#0x41a0
;;;69         TIM4_Handle.TIM_Prescaler=0;
000018  2200              MOVS     r2,#0
00001a  6048              STR      r0,[r1,#4]  ; TIM4_Handle
00001c  800a              STRH     r2,[r1,#0]
;;;70         TIM4_Handle.TIM_ClockDivision=TIM_CKD_DIV1;
00001e  810a              STRH     r2,[r1,#8]
;;;71         TIM4_Handle.TIM_CounterMode=TIM_CounterMode_Down;
000020  2010              MOVS     r0,#0x10
000022  8048              STRH     r0,[r1,#2]
;;;72         TIM_TimeBaseInit(TIM4, &TIM4_Handle);     
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       TIM_TimeBaseInit
;;;73         TIM_ClearFlag(TIM4, TIM_FLAG_Update); 
00002a  2101              MOVS     r1,#1
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       TIM_ClearFlag
;;;74         TIM_ITConfig(TIM4,TIM_IT_Update,ENABLE);
000032  2201              MOVS     r2,#1
000034  4611              MOV      r1,r2
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       TIM_ITConfig
;;;75         TIM_Cmd(TIM4, ENABLE);
00003c  2101              MOVS     r1,#1
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       TIM_Cmd
000044  4906              LDR      r1,|L5.96|
000046  20f0              MOVS     r0,#0xf0
000048  f8810400          STRB     r0,[r1,#0x400]
00004c  f04f21e0          MOV      r1,#0xe000e000
000050  04e0              LSLS     r0,r4,#19
000052  f8c10100          STR      r0,[r1,#0x100]
;;;76         
;;;77         /* Enable Timer 4 IRQ */
;;;78         NVIC_SetPriority(TIM4_IRQn, 0xFF);
;;;79         NVIC_EnableIRQ(TIM4_IRQn);
;;;80     }
000056  bd10              POP      {r4,pc}
;;;81     /* The interrupt handler */
                          ENDP

                  |L5.88|
                          DCD      0x40000800
                  |L5.92|
                          DCD      ||.bss||+0xc
                  |L5.96|
                          DCD      0xe000e01e

                          AREA ||i.RMP_Init_Hook||, CODE, READONLY, ALIGN=2

                  RMP_Init_Hook PROC
;;;248    ******************************************************************************/
;;;249    void RMP_Init_Hook(void)
000000  b530              PUSH     {r4,r5,lr}
000002  2101              MOVS     r1,#1
;;;250    {
000004  b083              SUB      sp,sp,#0xc
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
00000c  f04f4080          MOV      r0,#0x40000000
000010  f7fffffe          BL       TIM_DeInit
000014  481e              LDR      r0,|L6.144|
000016  f04f31ff          MOV      r1,#0xffffffff
00001a  6041              STR      r1,[r0,#4]  ; TIM2_Handle
00001c  2100              MOVS     r1,#0
00001e  8001              STRH     r1,[r0,#0]
000020  8101              STRH     r1,[r0,#8]
000022  8041              STRH     r1,[r0,#2]
000024  4601              MOV      r1,r0
000026  f04f4080          MOV      r0,#0x40000000
00002a  f7fffffe          BL       TIM_TimeBaseInit
00002e  2101              MOVS     r1,#1
000030  0788              LSLS     r0,r1,#30
000032  f7fffffe          BL       TIM_ClearFlag
000036  2101              MOVS     r1,#1
000038  0788              LSLS     r0,r1,#30
00003a  f7fffffe          BL       TIM_Cmd
;;;251    #ifndef MINIMAL_SIZE
;;;252        /* Init the timer */
;;;253        Timer_Init();
;;;254        /* Clean up the structures */
;;;255        RMP_Clear(&Thd_1,sizeof(struct RMP_Thd));
00003e  213c              MOVS     r1,#0x3c
000040  4814              LDR      r0,|L6.148|
000042  f7fffffe          BL       RMP_Clear
;;;256        RMP_Clear(&Thd_2,sizeof(struct RMP_Thd));
000046  213c              MOVS     r1,#0x3c
000048  4813              LDR      r0,|L6.152|
00004a  f7fffffe          BL       RMP_Clear
;;;257        RMP_Clear(&Sem_1,sizeof(struct RMP_Sem));
00004e  2110              MOVS     r1,#0x10
000050  4812              LDR      r0,|L6.156|
000052  f7fffffe          BL       RMP_Clear
;;;258        /* Create counting semaphore */
;;;259        RMP_Sem_Crt(&Sem_1,0);
000056  2100              MOVS     r1,#0
000058  4810              LDR      r0,|L6.156|
00005a  f7fffffe          BL       RMP_Sem_Crt
;;;260        /* Start threads */
;;;261        RMP_Thd_Crt(&Thd_1, Func_1, THD1_STACK, (void*)0x1234, 1, 5);
00005e  2405              MOVS     r4,#5
000060  2501              MOVS     r5,#1
000062  4a0f              LDR      r2,|L6.160|
000064  e9cd5400          STRD     r5,r4,[sp,#0]
000068  f2412334          MOV      r3,#0x1234
00006c  490d              LDR      r1,|L6.164|
00006e  f502608d          ADD      r0,r2,#0x468
000072  f7fffffe          BL       RMP_Thd_Crt
;;;262        RMP_Thd_Crt(&Thd_2, Func_2, THD2_STACK, (void*)0x4321, 1, 5);
000076  4a0c              LDR      r2,|L6.168|
000078  e9cd5400          STRD     r5,r4,[sp,#0]
00007c  f2443321          MOV      r3,#0x4321
000080  490a              LDR      r1,|L6.172|
000082  f10200a4          ADD      r0,r2,#0xa4
000086  f7fffffe          BL       RMP_Thd_Crt
;;;263    #endif
;;;264    }
00008a  b003              ADD      sp,sp,#0xc
00008c  bd30              POP      {r4,r5,pc}
;;;265    
                          ENDP

00008e  0000              DCW      0x0000
                  |L6.144|
                          DCD      ||.bss||
                  |L6.148|
                          DCD      ||.bss||+0x818
                  |L6.152|
                          DCD      ||.bss||+0x854
                  |L6.156|
                          DCD      ||.bss||+0x890
                  |L6.160|
                          DCD      ||.bss||+0x3b0
                  |L6.164|
                          DCD      Func_1
                  |L6.168|
                          DCD      ||.bss||+0x7b0
                  |L6.172|
                          DCD      Func_2

                          AREA ||i.RMP_Init_Idle||, CODE, READONLY, ALIGN=1

                  RMP_Init_Idle PROC
;;;265    
;;;266    void RMP_Init_Idle(void)
000000  4770              BX       lr
;;;267    {
;;;268        return;
;;;269    }
;;;270    /* End Function:RMP_Init *****************************************************/
                          ENDP


                          AREA ||i.TIM4_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM4_IRQHandler PROC
;;;81     /* The interrupt handler */
;;;82     void TIM4_IRQHandler(void)
000000  4921              LDR      r1,|L8.136|
;;;83     {
000002  b510              PUSH     {r4,lr}
;;;84         TIM4->SR=~TIM_FLAG_Update;
000004  f64f70fe          MOV      r0,#0xfffe
000008  8008              STRH     r0,[r1,#0]
00000a  4c20              LDR      r4,|L8.140|
00000c  1c43              ADDS     r3,r0,#1
00000e  f2427c10          MOV      r12,#0x2710
000012  6ae2              LDR      r2,[r4,#0x2c]  ; Count
000014  0689              LSLS     r1,r1,#26
000016  1c50              ADDS     r0,r2,#1
000018  4562              CMP      r2,r12
00001a  da15              BGE      |L8.72|
00001c  62e0              STR      r0,[r4,#0x2c]         ;83  ; Count
00001e  6a48              LDR      r0,[r1,#0x24]         ;83
000020  ea030040          AND      r0,r3,r0,LSL #1       ;83
000024  8020              STRH     r0,[r4,#0]            ;83
000026  2101              MOVS     r1,#1                 ;83
000028  4819              LDR      r0,|L8.144|
00002a  f7fffffe          BL       RMP_Thd_Snd_ISR
00002e  2800              CMP      r0,#0                 ;83
;;;85         Int_Handler();
;;;86     }
000030  bfa8              IT       GE
000032  bd10              POPGE    {r4,pc}
000034  4817              LDR      r0,|L8.148|
000036  f7fffffe          BL       RMP_Print_String
00003a  6ae0              LDR      r0,[r4,#0x2c]  ; Count
00003c  f7fffffe          BL       RMP_Print_Int
000040  4815              LDR      r0,|L8.152|
000042  f7fffffe          BL       RMP_Print_String
                  |L8.70|
000046  e7fe              B        |L8.70|
                  |L8.72|
000048  f6446c20          MOV      r12,#0x4e20
00004c  4562              CMP      r2,r12
00004e  bfa2              ITTT     GE
000050  f04f20e0          MOVGE    r0,#0xe000e000
000054  f8c01180          STRGE    r1,[r0,#0x180]
000058  bd10              POPGE    {r4,pc}
00005a  62e0              STR      r0,[r4,#0x2c]  ; Count
00005c  6a48              LDR      r0,[r1,#0x24]
00005e  ea030040          AND      r0,r3,r0,LSL #1
000062  8020              STRH     r0,[r4,#0]
000064  2101              MOVS     r1,#1
000066  480d              LDR      r0,|L8.156|
000068  f7fffffe          BL       RMP_Sem_Post_ISR
00006c  2800              CMP      r0,#0
00006e  bfa8              IT       GE
000070  bd10              POPGE    {r4,pc}
000072  480b              LDR      r0,|L8.160|
000074  f7fffffe          BL       RMP_Print_String
000078  6ae0              LDR      r0,[r4,#0x2c]  ; Count
00007a  f7fffffe          BL       RMP_Print_Int
00007e  4809              LDR      r0,|L8.164|
000080  f7fffffe          BL       RMP_Print_String
                  |L8.132|
000084  e7fe              B        |L8.132|
;;;87     /* End Function:Int_Init *****************************************************/
                          ENDP

000086  0000              DCW      0x0000
                  |L8.136|
                          DCD      0x40000810
                  |L8.140|
                          DCD      ||.data||
                  |L8.144|
                          DCD      ||.bss||+0x854
                  |L8.148|
                          DCD      ||i.Int_Handler||+0x8c
                  |L8.152|
                          DCD      ||i.Int_Handler||+0xa8
                  |L8.156|
                          DCD      ||.bss||+0x890
                  |L8.160|
                          DCD      ||i.Int_Handler||+0xb8
                  |L8.164|
                          DCD      ||i.Int_Handler||+0xd8

                          AREA ||i.Test_Mail_1||, CODE, READONLY, ALIGN=2

                  Test_Mail_1 PROC
;;;49     
;;;50     void Test_Mail_1(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;51     {
;;;52         static cnt_t Count;
;;;53         for(Count=0;Count<10000;Count++)
000004  4c0d              LDR      r4,|L9.60|
000006  2000              MOVS     r0,#0
;;;54         {
;;;55             /* Read counter here */
;;;56             Start=COUNTER_READ();
;;;57             RMP_Thd_Snd(&Thd_2, 1, RMP_MAX_SLICES);
000008  f8df8034          LDR      r8,|L9.64|
00000c  f04f4580          MOV      r5,#0x40000000        ;56
000010  f64f76ff          MOV      r6,#0xffff            ;56
000014  f2427710          MOV      r7,#0x2710            ;53
000018  6220              STR      r0,[r4,#0x20]         ;53  ; Count
                  |L9.26|
00001a  6a68              LDR      r0,[r5,#0x24]         ;56
00001c  ea060040          AND      r0,r6,r0,LSL #1       ;56
000020  8020              STRH     r0,[r4,#0]            ;56
000022  4642              MOV      r2,r8
000024  2101              MOVS     r1,#1
000026  4807              LDR      r0,|L9.68|
000028  f7fffffe          BL       RMP_Thd_Snd
00002c  6a20              LDR      r0,[r4,#0x20]         ;53  ; Count
00002e  1c40              ADDS     r0,r0,#1              ;53
000030  6220              STR      r0,[r4,#0x20]         ;53  ; Count
000032  42b8              CMP      r0,r7                 ;53
000034  dbf1              BLT      |L9.26|
;;;58         }
;;;59     }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;60     
                          ENDP

00003a  0000              DCW      0x0000
                  |L9.60|
                          DCD      ||.data||
                  |L9.64|
                          DCD      0x000186a0
                  |L9.68|
                          DCD      ||.bss||+0x854

                          AREA ||i.Test_Mail_2||, CODE, READONLY, ALIGN=2

                  Test_Mail_2 PROC
;;;100    
;;;101    void Test_Mail_2(void)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;102    {
;;;103        ptr_t Data;
;;;104        cnt_t Count;
;;;105        for(Count=0;Count<10000;Count++)
;;;106        {
;;;107            RMP_Thd_Rcv(&Data, RMP_MAX_SLICES);
000004  f8df9038          LDR      r9,|L10.64|
;;;108            /* Read counter here */
;;;109            End=COUNTER_READ();
000008  4c0e              LDR      r4,|L10.68|
00000a  2500              MOVS     r5,#0                 ;105
00000c  f04f4780          MOV      r7,#0x40000000
000010  f64f78ff          MOV      r8,#0xffff
000014  f2427610          MOV      r6,#0x2710            ;105
                  |L10.24|
000018  4649              MOV      r1,r9                 ;107
00001a  4668              MOV      r0,sp                 ;107
00001c  f7fffffe          BL       RMP_Thd_Rcv
000020  6a78              LDR      r0,[r7,#0x24]
000022  ea080040          AND      r0,r8,r0,LSL #1
000026  8060              STRH     r0,[r4,#2]
;;;110            Total+=(tim_t)(End-Start);
000028  8860              LDRH     r0,[r4,#2]  ; End
00002a  8821              LDRH     r1,[r4,#0]  ; Start
00002c  1a40              SUBS     r0,r0,r1
00002e  6861              LDR      r1,[r4,#4]  ; Total
000030  b280              UXTH     r0,r0
000032  4408              ADD      r0,r0,r1
000034  6060              STR      r0,[r4,#4]  ; Total
000036  1c6d              ADDS     r5,r5,#1
000038  42b5              CMP      r5,r6                 ;105
00003a  dbed              BLT      |L10.24|
;;;111        };
;;;112    }
00003c  e8bd83f8          POP      {r3-r9,pc}
;;;113    
                          ENDP

                  |L10.64|
                          DCD      0x000186a0
                  |L10.68|
                          DCD      ||.data||

                          AREA ||i.Test_Mail_ISR||, CODE, READONLY, ALIGN=2

                  Test_Mail_ISR PROC
;;;125    
;;;126    void Test_Mail_ISR(void)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;127    {
;;;128        ptr_t Data;
;;;129        static cnt_t Count;
;;;130        for(Count=0;Count<10000;Count++)
000004  4c10              LDR      r4,|L11.72|
000006  2000              MOVS     r0,#0
;;;131        {
;;;132            RMP_Thd_Rcv(&Data, RMP_MAX_SLICES);
000008  f8df8040          LDR      r8,|L11.76|
;;;133            /* Read counter here */
;;;134            End=COUNTER_READ();
00000c  f04f4580          MOV      r5,#0x40000000
000010  f64f76ff          MOV      r6,#0xffff
000014  f2427710          MOV      r7,#0x2710            ;130
000018  6260              STR      r0,[r4,#0x24]         ;130  ; Count
                  |L11.26|
00001a  4641              MOV      r1,r8                 ;132
00001c  4668              MOV      r0,sp                 ;132
00001e  f7fffffe          BL       RMP_Thd_Rcv
000022  6a68              LDR      r0,[r5,#0x24]
000024  ea060040          AND      r0,r6,r0,LSL #1
000028  8060              STRH     r0,[r4,#2]
;;;135            Total+=(tim_t)(End-Start);
00002a  8860              LDRH     r0,[r4,#2]  ; End
00002c  8821              LDRH     r1,[r4,#0]  ; Start
00002e  1a40              SUBS     r0,r0,r1
000030  6861              LDR      r1,[r4,#4]  ; Total
000032  b280              UXTH     r0,r0
000034  4408              ADD      r0,r0,r1
000036  6060              STR      r0,[r4,#4]  ; Total
000038  6a60              LDR      r0,[r4,#0x24]         ;130  ; Count
00003a  1c40              ADDS     r0,r0,#1              ;130
00003c  6260              STR      r0,[r4,#0x24]         ;130  ; Count
00003e  42b8              CMP      r0,r7                 ;130
000040  dbeb              BLT      |L11.26|
;;;136        };
;;;137    }
000042  e8bd83f8          POP      {r3-r9,pc}
;;;138    
                          ENDP

000046  0000              DCW      0x0000
                  |L11.72|
                          DCD      ||.data||
                  |L11.76|
                          DCD      0x000186a0

                          AREA ||i.Test_Sem_1||, CODE, READONLY, ALIGN=2

                  Test_Sem_1 PROC
;;;60     
;;;61     void Test_Sem_1(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;62     {
;;;63         cnt_t Count;
;;;64         for(Count=0;Count<10000;Count++)
;;;65         {
;;;66             /* Read counter here */
;;;67             Start=COUNTER_READ();
000004  f8df802c          LDR      r8,|L12.52|
000008  2400              MOVS     r4,#0                 ;64
00000a  f04f4580          MOV      r5,#0x40000000
00000e  f64f77ff          MOV      r7,#0xffff
000012  f2427610          MOV      r6,#0x2710            ;64
                  |L12.22|
000016  6a68              LDR      r0,[r5,#0x24]
000018  ea070040          AND      r0,r7,r0,LSL #1
00001c  f8a80000          STRH     r0,[r8,#0]
;;;68             RMP_Sem_Post(&Sem_1, 1);
000020  2101              MOVS     r1,#1
000022  4805              LDR      r0,|L12.56|
000024  f7fffffe          BL       RMP_Sem_Post
000028  1c64              ADDS     r4,r4,#1
00002a  42b4              CMP      r4,r6                 ;64
00002c  dbf3              BLT      |L12.22|
;;;69         }
;;;70     }
00002e  e8bd81f0          POP      {r4-r8,pc}
;;;71     
                          ENDP

000032  0000              DCW      0x0000
                  |L12.52|
                          DCD      ||.data||
                  |L12.56|
                          DCD      ||.bss||+0x890

                          AREA ||i.Test_Sem_2||, CODE, READONLY, ALIGN=2

                  Test_Sem_2 PROC
;;;113    
;;;114    void Test_Sem_2(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;115    {
;;;116        cnt_t Count;
;;;117        for(Count=0;Count<10000;Count++)
;;;118        {
;;;119            RMP_Sem_Pend(&Sem_1, RMP_MAX_SLICES);
000004  f8df9038          LDR      r9,|L13.64|
;;;120            /* Read counter here */
;;;121            End=COUNTER_READ();
000008  4c0e              LDR      r4,|L13.68|
00000a  2500              MOVS     r5,#0                 ;117
00000c  f04f4780          MOV      r7,#0x40000000
000010  f64f78ff          MOV      r8,#0xffff
000014  f2427610          MOV      r6,#0x2710            ;117
                  |L13.24|
000018  4649              MOV      r1,r9                 ;119
00001a  480b              LDR      r0,|L13.72|
00001c  f7fffffe          BL       RMP_Sem_Pend
000020  6a78              LDR      r0,[r7,#0x24]
000022  ea080040          AND      r0,r8,r0,LSL #1
000026  8060              STRH     r0,[r4,#2]
;;;122            Total+=(tim_t)(End-Start);
000028  8860              LDRH     r0,[r4,#2]  ; End
00002a  8821              LDRH     r1,[r4,#0]  ; Start
00002c  1a40              SUBS     r0,r0,r1
00002e  6861              LDR      r1,[r4,#4]  ; Total
000030  b280              UXTH     r0,r0
000032  4408              ADD      r0,r0,r1
000034  6060              STR      r0,[r4,#4]  ; Total
000036  1c6d              ADDS     r5,r5,#1
000038  42b5              CMP      r5,r6                 ;117
00003a  dbed              BLT      |L13.24|
;;;123        };
;;;124    }
00003c  e8bd87f0          POP      {r4-r10,pc}
;;;125    
                          ENDP

                  |L13.64|
                          DCD      0x000186a0
                  |L13.68|
                          DCD      ||.data||
                  |L13.72|
                          DCD      ||.bss||+0x890

                          AREA ||i.Test_Sem_ISR||, CODE, READONLY, ALIGN=2

                  Test_Sem_ISR PROC
;;;138    
;;;139    void Test_Sem_ISR(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;140    {
;;;141        static cnt_t Count;
;;;142        for(Count=0;Count<10000;Count++)
000004  4c10              LDR      r4,|L14.72|
000006  2000              MOVS     r0,#0
;;;143        {
;;;144            RMP_Sem_Pend(&Sem_1, RMP_MAX_SLICES);
000008  f8df8040          LDR      r8,|L14.76|
;;;145            /* Read counter here */
;;;146            End=COUNTER_READ();
00000c  f04f4580          MOV      r5,#0x40000000
000010  f64f76ff          MOV      r6,#0xffff
000014  f2427710          MOV      r7,#0x2710            ;142
000018  62a0              STR      r0,[r4,#0x28]         ;142  ; Count
                  |L14.26|
00001a  4641              MOV      r1,r8                 ;144
00001c  480c              LDR      r0,|L14.80|
00001e  f7fffffe          BL       RMP_Sem_Pend
000022  6a68              LDR      r0,[r5,#0x24]
000024  ea060040          AND      r0,r6,r0,LSL #1
000028  8060              STRH     r0,[r4,#2]
;;;147            Total+=(tim_t)(End-Start);
00002a  8860              LDRH     r0,[r4,#2]  ; End
00002c  8821              LDRH     r1,[r4,#0]  ; Start
00002e  1a40              SUBS     r0,r0,r1
000030  6861              LDR      r1,[r4,#4]  ; Total
000032  b280              UXTH     r0,r0
000034  4408              ADD      r0,r0,r1
000036  6060              STR      r0,[r4,#4]  ; Total
000038  6aa0              LDR      r0,[r4,#0x28]         ;142  ; Count
00003a  1c40              ADDS     r0,r0,#1              ;142
00003c  62a0              STR      r0,[r4,#0x28]         ;142  ; Count
00003e  42b8              CMP      r0,r7                 ;142
000040  dbeb              BLT      |L14.26|
;;;148        };
;;;149    }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;150    
                          ENDP

000046  0000              DCW      0x0000
                  |L14.72|
                          DCD      ||.data||
                  |L14.76|
                          DCD      0x000186a0
                  |L14.80|
                          DCD      ||.bss||+0x890

                          AREA ||i.Test_Yield_1||, CODE, READONLY, ALIGN=2

                  Test_Yield_1 PROC
;;;38     ******************************************************************************/
;;;39     void Test_Yield_1(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;40     {
;;;41         cnt_t Count;
;;;42         for(Count=0;Count<10000;Count++)
;;;43         {
;;;44             /* Read counter here */
;;;45             Start=COUNTER_READ();
000004  f8df8028          LDR      r8,|L15.48|
000008  2400              MOVS     r4,#0                 ;42
00000a  f04f4580          MOV      r5,#0x40000000
00000e  f64f77ff          MOV      r7,#0xffff
000012  f2427610          MOV      r6,#0x2710            ;42
                  |L15.22|
000016  6a68              LDR      r0,[r5,#0x24]
000018  ea070040          AND      r0,r7,r0,LSL #1
00001c  f8a80000          STRH     r0,[r8,#0]
;;;46             RMP_Yield();
000020  f7fffffe          BL       RMP_Yield
000024  1c64              ADDS     r4,r4,#1
000026  42b4              CMP      r4,r6                 ;42
000028  dbf5              BLT      |L15.22|
;;;47         }
;;;48     }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;49     
                          ENDP

00002e  0000              DCW      0x0000
                  |L15.48|
                          DCD      ||.data||

                          AREA ||i.Test_Yield_2||, CODE, READONLY, ALIGN=2

                  Test_Yield_2 PROC
;;;88     ******************************************************************************/
;;;89     void Test_Yield_2(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;90     {
;;;91         cnt_t Count;
;;;92         for(Count=0;Count<10000;Count++)
000004  2500              MOVS     r5,#0
;;;93         {
;;;94             RMP_Yield();
;;;95             /* Read counter here */
;;;96             End=COUNTER_READ();
000006  f04f4780          MOV      r7,#0x40000000
00000a  f64f78ff          MOV      r8,#0xffff
00000e  4c0a              LDR      r4,|L16.56|
000010  f2427610          MOV      r6,#0x2710            ;92
                  |L16.20|
000014  f7fffffe          BL       RMP_Yield
000018  6a78              LDR      r0,[r7,#0x24]
00001a  ea080040          AND      r0,r8,r0,LSL #1
00001e  8060              STRH     r0,[r4,#2]
;;;97             Total+=(tim_t)(End-Start);
000020  8860              LDRH     r0,[r4,#2]  ; End
000022  8821              LDRH     r1,[r4,#0]  ; Start
000024  1a40              SUBS     r0,r0,r1
000026  6861              LDR      r1,[r4,#4]  ; Total
000028  b280              UXTH     r0,r0
00002a  4408              ADD      r0,r0,r1
00002c  6060              STR      r0,[r4,#4]  ; Total
00002e  1c6d              ADDS     r5,r5,#1
000030  42b5              CMP      r5,r6                 ;92
000032  dbef              BLT      |L16.20|
;;;98         };
;;;99     }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;100    
                          ENDP

                  |L16.56|
                          DCD      ||.data||

                          AREA ||i.Timer_Init||, CODE, READONLY, ALIGN=2

                  Timer_Init PROC
;;;40     ******************************************************************************/
;;;41     void Timer_Init(void)
000000  b510              PUSH     {r4,lr}
;;;42     {
;;;43         /* TIM2 clock = 1/2 CPU clock */
;;;44         RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;45         TIM_DeInit(TIM2);
00000a  f04f4080          MOV      r0,#0x40000000
00000e  f7fffffe          BL       TIM_DeInit
;;;46         TIM2_Handle.TIM_Period=(ptr_t)(-1); 
000012  480b              LDR      r0,|L17.64|
000014  f04f31ff          MOV      r1,#0xffffffff
;;;47         TIM2_Handle.TIM_Prescaler=0;
000018  6041              STR      r1,[r0,#4]  ; TIM2_Handle
00001a  2100              MOVS     r1,#0
00001c  8001              STRH     r1,[r0,#0]
;;;48         TIM2_Handle.TIM_ClockDivision=TIM_CKD_DIV1;
00001e  8101              STRH     r1,[r0,#8]
;;;49         TIM2_Handle.TIM_CounterMode=TIM_CounterMode_Up;
000020  8041              STRH     r1,[r0,#2]
;;;50         TIM_TimeBaseInit(TIM2, &TIM2_Handle);     
000022  4601              MOV      r1,r0
000024  f04f4080          MOV      r0,#0x40000000
000028  f7fffffe          BL       TIM_TimeBaseInit
;;;51         TIM_ClearFlag(TIM2, TIM_FLAG_Update); 
00002c  2101              MOVS     r1,#1
00002e  0788              LSLS     r0,r1,#30
000030  f7fffffe          BL       TIM_ClearFlag
;;;52         TIM_Cmd(TIM2, ENABLE);
000034  2101              MOVS     r1,#1
000036  e8bd4010          POP      {r4,lr}
00003a  0788              LSLS     r0,r1,#30
00003c  f7ffbffe          B.W      TIM_Cmd
;;;53     }
;;;54     /* End Function:Timer_Init ***************************************************/
                          ENDP

                  |L17.64|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  TIM2_Handle
                          %        12
                  TIM4_Handle
                          %        12
                  Stack_1
                          %        1024
                  Stack_2
                          %        1024
                  Thd_1
                          %        60
                  Thd_2
                          %        60
                  Sem_1
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  Start
000000  0000              DCW      0x0000
                  End
000002  0000              DCW      0x0000
                  Total
                          DCD      0x00000000
                  Temp
                          DCD      0x00000000
                  Yield_Time
                          DCD      0x00000000
                  Mailbox_Time
                          DCD      0x00000000
                  Semaphore_Time
                          DCD      0x00000000
                  Mailbox_ISR_Time
                          DCD      0x00000000
                  Semaphore_ISR_Time
                          DCD      0x00000000
                  Count
                          DCD      0x00000000
                  |symbol_number.55|
                          DCD      0x00000000
                  |symbol_number.56|
                          DCD      0x00000000
                  |symbol_number.57|
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\MProkaron\\Benchmark\\test.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_test_c_db099e62____REV16|
#line 114 "..\\..\\..\\M0P0_Library\\STM32F4xx_StdPeriph_Driver\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_test_c_db099e62____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_test_c_db099e62____REVSH|
#line 128
|__asm___6_test_c_db099e62____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
