


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************
    2 00000000         ;Filename    : platform_cmx_asm.s
    3 00000000         ;Author      : pry
    4 00000000         ;Date        : 10/04/2012
    5 00000000         ;Description : The assembly part of the RMP RTOS. This i
                       s for Cortex-M3/4/7.
    6 00000000         ;*******************************************************
                       **********************/
    7 00000000         
    8 00000000         ;/* The ARM Cortex-M Structure *************************
                       ***********************
    9 00000000         ;R0-R7:General purpose registers that are accessible. 
   10 00000000         ;R8-R12:general purpose registers that can only be reach
                       ed by 32-bit instructions.
   11 00000000         ;R13:SP/SP_process/SP_main    Stack pointer
   12 00000000         ;R14:LR                       Link Register(used for ret
                       urning from a subfunction)
   13 00000000         ;R15:PC                       Program counter.
   14 00000000         ;IPSR                         Interrupt Program Status R
                       egister.
   15 00000000         ;APSR                         Application Program Status
                        Register.
   16 00000000         ;EPSR                         Execute Program Status Reg
                       ister.
   17 00000000         ;The above 3 registers are saved into the stack in combi
                       nation(xPSR).
   18 00000000         ;
   19 00000000         ;The ARM Cortex-M4/7 also include a single-accuracy FPU.
                       
   20 00000000         ;*******************************************************
                       **********************/
   21 00000000         
   22 00000000         ;/* Begin Header ***************************************
                       **********************/
   23 00000000         ;The align is "(2^3)/8=1(Byte)." In fact it does not tak
                       e effect.            
   24 00000000                 AREA             ARCH,CODE,READONLY,ALIGN=3
   25 00000000         
   26 00000000                 THUMB
   27 00000000                 REQUIRE8
   28 00000000                 PRESERVE8
   29 00000000         ;/* End Header *****************************************
                       **********************/
   30 00000000         
   31 00000000         ;/* Begin Exports **************************************
                       **********************/
   32 00000000         ;Disable all interrupts
   33 00000000                 EXPORT           RMP_Disable_Int
   34 00000000         ;Enable all interrupts            
   35 00000000                 EXPORT           RMP_Enable_Int
   36 00000000         ;Get the MSB                              
   37 00000000                 EXPORT           RMP_MSB_Get
   38 00000000         ;Start the first thread
   39 00000000                 EXPORT           _RMP_Start
   40 00000000         ;The PendSV trigger
   41 00000000                 EXPORT           _RMP_Yield
   42 00000000         ;The system pending service routine              
   43 00000000                 EXPORT           PendSV_Handler



ARM Macro Assembler    Page 2 


   44 00000000         ;The systick timer routine              
   45 00000000                 EXPORT           SysTick_Handler
   46 00000000         ;/* End Exports ****************************************
                       **********************/
   47 00000000         
   48 00000000         ;/* Begin Imports **************************************
                       **********************/
   49 00000000         ;The real task switch handling function
   50 00000000                 IMPORT           _RMP_Get_High_Rdy
   51 00000000         ;The real systick handler function
   52 00000000                 IMPORT           _RMP_Tick_Handler
   53 00000000         ;The PID of the current thread                     
   54 00000000                 IMPORT           RMP_Cur_Thd
   55 00000000         ;The stack address of current thread
   56 00000000                 IMPORT           RMP_Cur_SP
   57 00000000         ;Save and load extra contexts, such as FPU, peripherals 
                       and MPU
   58 00000000                 IMPORT           RMP_Save_Ctx
   59 00000000                 IMPORT           RMP_Load_Ctx
   60 00000000         ;/* End Imports ****************************************
                       **********************/
   61 00000000         
   62 00000000         ;/* Begin Function:RMP_Disable_Int *********************
                       ***********************
   63 00000000         ;Description    : The function for disabling all interru
                       pts. Does not allow nesting.
   64 00000000         ;Input          : None.
   65 00000000         ;Output         : None.    
   66 00000000         ;Register Usage : None.                                 
                        
   67 00000000         ;*******************************************************
                       **********************/    
   68 00000000         RMP_Disable_Int
   69 00000000         ;Disable all interrupts (I is primask,F is Faultmask.)
   70 00000000 B672            CPSID            I
   71 00000002 4770            BX               LR
   72 00000004         ;/* End Function:RMP_Disable_Int ***********************
                       **********************/
   73 00000004         
   74 00000004         ;/* Begin Function:RMP_Enable_Int **********************
                       ***********************
   75 00000004         ;Description    : The function for enabling all interrup
                       ts. Does not allow nesting.
   76 00000004         ;Input          : None.
   77 00000004         ;Output         : None.    
   78 00000004         ;Register Usage : None.                                 
                        
   79 00000004         ;*******************************************************
                       **********************/
   80 00000004         RMP_Enable_Int
   81 00000004         ;Enable all interrupts.
   82 00000004 B662            CPSIE            I
   83 00000006 4770            BX               LR
   84 00000008         ;/* End Function:RMP_Enable_Int ************************
                       **********************/
   85 00000008         
   86 00000008         ;/* Begin Function:RMP_MSB_Get *************************
                       ***********************
   87 00000008         ;Description    : Get the MSB of the word.



ARM Macro Assembler    Page 3 


   88 00000008         ;Input          : ptr_t Val - The value.
   89 00000008         ;Output         : None.
   90 00000008         ;Return         : ptr_t - The MSB position.   
   91 00000008         ;Register Usage : None. 
   92 00000008         ;*******************************************************
                       **********************/
   93 00000008         RMP_MSB_Get
   94 00000008 FAB0 F180       CLZ              R1,R0
   95 0000000C 201F            MOVS             R0,#31
   96 0000000E 1A40            SUBS             R0,R1
   97 00000010 4770            BX               LR
   98 00000012         ;/* End Function:RMP_MSB_Get ***************************
                       **********************/
   99 00000012         
  100 00000012         ;/* Begin Function:_RMP_Yield **************************
                       ***********************
  101 00000012         ;Description : Trigger a yield to another thread.
  102 00000012         ;Input       : None.
  103 00000012         ;Output      : None.                                    
                         
  104 00000012         ;*******************************************************
                       **********************/
  105 00000012         _RMP_Yield
  106 00000012 B403            PUSH             {R0-R1}
  107 00000014         
  108 00000014 4816            LDR              R0,=0xE000ED04 ;The NVIC_INT_CT
                                                            RL register
  109 00000016 F04F 5180       LDR              R1,=0x10000000 ;Trigger the Pen
                                                            dSV          
  110 0000001A 6001            STR              R1,[R0]
  111 0000001C         
  112 0000001C F3BF 8F4F       DSB                          ;Data and instructi
                                                            on barrier
  113 00000020 F3BF 8F6F       ISB
  114 00000024         
  115 00000024 BC03            POP              {R0-R1}
  116 00000026 4770            BX               LR
  117 00000028         ;/* End Function:_RMP_Yield ****************************
                       **********************/
  118 00000028         
  119 00000028         ;/* Begin Function:_RMP_Start **************************
                       ***********************
  120 00000028         ;Description : Jump to the user function and will never 
                       return from it.
  121 00000028         ;Input       : None.
  122 00000028         ;Output      : None.                                    
                         
  123 00000028         ;*******************************************************
                       **********************/
  124 00000028         _RMP_Start
  125 00000028         ;Should never reach here
  126 00000028 3940            SUBS             R1,#64      ;This is how we pus
                                                            h our registers so 
                                                            move forward
  127 0000002A F381 8809       MSR              PSP,R1      ;Set the stack poin
                                                            ter
  128 0000002E 2402            MOVS             R4,#0x02    ;Previleged thread 
                                                            mode
  129 00000030 F384 8814       MSR              CONTROL,R4



ARM Macro Assembler    Page 4 


  130 00000034         
  131 00000034 F3BF 8F4F       DSB                          ;Data and instructi
                                                            on barrier
  132 00000038 F3BF 8F6F       ISB
  133 0000003C         
  134 0000003C 4780            BLX              R0          ;Branch to our targ
                                                            et
  135 0000003E E7FE            B                .           ;Capture faults    
                                                              
  136 00000040         ;/* End Function:_RMP_Start ****************************
                       **********************/
  137 00000040         
  138 00000040         ;/* Begin Function:PendSV_Handler **********************
                       ***********************
  139 00000040         ;Description : The PendSV interrupt routine. In fact, it
                        will call a C function
  140 00000040         ;              directly. The reason why the interrupt ro
                       utine must be an assembly
  141 00000040         ;              function is that the compiler may deal wi
                       th the stack in a different 
  142 00000040         ;              way when different optimization level is 
                       chosen. An assembly function
  143 00000040         ;              can make way around this problem.
  144 00000040         ;              However, if your compiler support inline 
                       assembly functions, this
  145 00000040         ;              can also be written in C.
  146 00000040         ;Input       : None.
  147 00000040         ;Output      : None.                                    
                         
  148 00000040         ;*******************************************************
                       **********************/
  149 00000040         PendSV_Handler
  150 00000040 F3EF 8009       MRS              R0,PSP      ;Spill all the regi
                                                            sters onto the user
                                                             stack
  151 00000044 E920 4FF0       STMDB            R0!,{R4-R11,LR}
  152 00000048         
  153 00000048 F7FF FFFE       BL               RMP_Save_Ctx 
                                                            ;Save extra context
                                                            
  154 0000004C         
  155 0000004C 4909            LDR              R1,=RMP_Cur_SP ;Save The SP to 
                                                            control block.
  156 0000004E 6008            STR              R0,[R1]
  157 00000050         
  158 00000050 F7FF FFFE       BL               _RMP_Get_High_Rdy ;Get the high
                                                            est ready task.
  159 00000054         
  160 00000054 4907            LDR              R1,=RMP_Cur_SP ;Load the SP.
  161 00000056 6808            LDR              R0,[R1]
  162 00000058         
  163 00000058 F7FF FFFE       BL               RMP_Load_Ctx 
                                                            ;Load extra context
                                                            
  164 0000005C         
  165 0000005C E8B0 4FF0       LDMIA            R0!,{R4-R11,LR}
  166 00000060 F380 8809       MSR              PSP,R0
  167 00000064         
  168 00000064 4770            BX               LR          ;The LR will indica



ARM Macro Assembler    Page 5 


                                                            te whether we are u
                                                            sing FPU.     
  169 00000066         ;/* End Function:PendSV_Handler ************************
                       **********************/
  170 00000066         
  171 00000066         ;/* Begin Function:SysTick_Handler *********************
                       ***********************
  172 00000066         ;Description : The SysTick interrupt routine. In fact, i
                       t will call a C function
  173 00000066         ;              directly. The reason why the interrupt ro
                       utine must be an assembly
  174 00000066         ;              function is that the compiler may deal wi
                       th the stack in a different 
  175 00000066         ;              way when different optimization level is 
                       chosen. An assembly function
  176 00000066         ;              can make way around this problem.
  177 00000066         ;              However, if your compiler support inline 
                       assembly functions, this
  178 00000066         ;              can also be written in C.
  179 00000066         ;Input       : None.
  180 00000066         ;Output      : None.                                    
                         
  181 00000066         ;*******************************************************
                       **********************/
  182 00000066         SysTick_Handler
  183 00000066 B500            PUSH             {LR}
  184 00000068         
  185 00000068 2001            MOVS             R0,#0x01    ;We are not using t
                                                            ickless.
  186 0000006A F7FF FFFE       BL               _RMP_Tick_Handler
  187 0000006E         
  188 0000006E BD00            POP              {PC}
  189 00000070         ;/* End Function:SysTick_Handler ***********************
                       **********************/
  190 00000070         
  191 00000070                 END
              E000ED04 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\debug\output\platform_cmx_asm.d -o.\debug\output\platform_cmx
_asm.o -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F405RGT
6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID
:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\De
vice\ST\STM32F4xx\Include --predefine="__MICROLIB SETA 1" --predefine="__UVISIO
N_VERSION SETA 520" --predefine="_RTE_ SETA 1" --predefine="STM32F405xx SETA 1"
 --list=.\debug\listings\platform_cmx_asm.lst ..\..\MProkaron\Platform\CortexM\
platform_cmx_asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARCH 00000000

Symbol: ARCH
   Definitions
      At line 24 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      None
Comment: ARCH unused
PendSV_Handler 00000040

Symbol: PendSV_Handler
   Definitions
      At line 149 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 43 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: PendSV_Handler used once
RMP_Disable_Int 00000000

Symbol: RMP_Disable_Int
   Definitions
      At line 68 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 33 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: RMP_Disable_Int used once
RMP_Enable_Int 00000004

Symbol: RMP_Enable_Int
   Definitions
      At line 80 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 35 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: RMP_Enable_Int used once
RMP_MSB_Get 00000008

Symbol: RMP_MSB_Get
   Definitions
      At line 93 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 37 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: RMP_MSB_Get used once
SysTick_Handler 00000066

Symbol: SysTick_Handler
   Definitions
      At line 182 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 45 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: SysTick_Handler used once
_RMP_Start 00000028

Symbol: _RMP_Start
   Definitions
      At line 124 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 39 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: _RMP_Start used once
_RMP_Yield 00000012

Symbol: _RMP_Yield



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 105 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 41 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: _RMP_Yield used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

RMP_Cur_SP 00000000

Symbol: RMP_Cur_SP
   Definitions
      At line 56 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 155 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
      At line 160 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s

RMP_Cur_Thd 00000000

Symbol: RMP_Cur_Thd
   Definitions
      At line 54 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      None
Comment: RMP_Cur_Thd unused
RMP_Load_Ctx 00000000

Symbol: RMP_Load_Ctx
   Definitions
      At line 59 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 163 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: RMP_Load_Ctx used once
RMP_Save_Ctx 00000000

Symbol: RMP_Save_Ctx
   Definitions
      At line 58 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 153 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: RMP_Save_Ctx used once
_RMP_Get_High_Rdy 00000000

Symbol: _RMP_Get_High_Rdy
   Definitions
      At line 50 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 158 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: _RMP_Get_High_Rdy used once
_RMP_Tick_Handler 00000000

Symbol: _RMP_Tick_Handler
   Definitions
      At line 52 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 186 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: _RMP_Tick_Handler used once
6 symbols
351 symbols in table
