; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\test.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\test.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Core -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\test.crf ..\..\MProkaron\Benchmark\test.c]
                          THUMB

                          AREA ||i.Func_1||, CODE, READONLY, ALIGN=2

                  Func_1 PROC
;;;71     
;;;72     void Func_1(void)
000000  4c17              LDR      r4,|L1.96|
000002  2700              MOVS     r7,#0
000004  f04f4580          MOV      r5,#0x40000000
000008  f2427610          MOV      r6,#0x2710
                  |L1.12|
00000c  6a68              LDR      r0,[r5,#0x24]
00000e  0040              LSLS     r0,r0,#1
000010  6020              STR      r0,[r4,#0]  ; Start
000012  f7fffffe          BL       RMP_Yield
000016  1c7f              ADDS     r7,r7,#1
000018  42b7              CMP      r7,r6
00001a  dbf7              BLT      |L1.12|
;;;73     {
;;;74         Test_Yield_1();
;;;75         /* Change priority of thread 2 */
;;;76         RMP_Thd_Set(&Thd_2,2,RMP_MAX_SLICES);
00001c  4f11              LDR      r7,|L1.100|
00001e  2102              MOVS     r1,#2
000020  4811              LDR      r0,|L1.104|
000022  463a              MOV      r2,r7
000024  f7fffffe          BL       RMP_Thd_Set
000028  2000              MOVS     r0,#0
00002a  6260              STR      r0,[r4,#0x24]  ; Count
                  |L1.44|
00002c  6a68              LDR      r0,[r5,#0x24]
00002e  0040              LSLS     r0,r0,#1
000030  6020              STR      r0,[r4,#0]  ; Start
000032  480d              LDR      r0,|L1.104|
000034  2101              MOVS     r1,#1
000036  463a              MOV      r2,r7
000038  f7fffffe          BL       RMP_Thd_Snd
00003c  6a60              LDR      r0,[r4,#0x24]  ; Count
00003e  1c40              ADDS     r0,r0,#1
000040  6260              STR      r0,[r4,#0x24]  ; Count
000042  42b0              CMP      r0,r6
000044  dbf2              BLT      |L1.44|
000046  2700              MOVS     r7,#0
                  |L1.72|
000048  6a68              LDR      r0,[r5,#0x24]
00004a  0040              LSLS     r0,r0,#1
00004c  6020              STR      r0,[r4,#0]  ; Start
00004e  4807              LDR      r0,|L1.108|
000050  2101              MOVS     r1,#1
000052  f7fffffe          BL       RMP_Sem_Post
000056  1c7f              ADDS     r7,r7,#1
000058  42b7              CMP      r7,r6
00005a  dbf5              BLT      |L1.72|
                  |L1.92|
;;;77         Test_Mail_1();
;;;78         Test_Sem_1();
;;;79         while(1);
00005c  e7fe              B        |L1.92|
;;;80     }
;;;81     /* End Function:Test_Yield ***************************************************/
                          ENDP

00005e  0000              DCW      0x0000
                  |L1.96|
                          DCD      ||.data||
                  |L1.100|
                          DCD      0x000186a0
                  |L1.104|
                          DCD      ||.bss||+0x8bc
                  |L1.108|
                          DCD      ||.bss||+0x8f8

                          AREA ||i.Func_2||, CODE, READONLY, ALIGN=2

                  Func_2 PROC
;;;150    
;;;151    void Func_2(void)
000000  4c6f              LDR      r4,|L2.448|
;;;152    {
;;;153        /* Yield tests */
;;;154        Total=0;
000002  2600              MOVS     r6,#0
000004  b082              SUB      sp,sp,#8              ;152
000006  60a6              STR      r6,[r4,#8]  ; Total
000008  f04f4780          MOV      r7,#0x40000000
00000c  f2427510          MOV      r5,#0x2710
000010  ea4f0806          MOV.W    r8,r6
                  |L2.20|
000014  f7fffffe          BL       RMP_Yield
000018  6a78              LDR      r0,[r7,#0x24]
00001a  f1080801          ADD      r8,r8,#1
00001e  0040              LSLS     r0,r0,#1
000020  6060              STR      r0,[r4,#4]  ; End
000022  45a8              CMP      r8,r5
000024  6860              LDR      r0,[r4,#4]  ; End
000026  6821              LDR      r1,[r4,#0]  ; Start
000028  68a2              LDR      r2,[r4,#8]  ; Total
00002a  eba00001          SUB      r0,r0,r1
00002e  4410              ADD      r0,r0,r2
000030  60a0              STR      r0,[r4,#8]  ; Total
000032  dbef              BLT      |L2.20|
;;;155        Test_Yield_2();
;;;156        RMP_PRINTK_S("Yield: ");
000034  a063              ADR      r0,|L2.452|
000036  f7fffffe          BL       RMP_Print_String
;;;157        
;;;158        Yield_Time=Total/10000;
00003a  68a0              LDR      r0,[r4,#8]  ; Total
00003c  fbb0f0f5          UDIV     r0,r0,r5
000040  6120              STR      r0,[r4,#0x10]  ; Yield_Time
;;;159        RMP_PRINTK_I(Yield_Time);
000042  6920              LDR      r0,[r4,#0x10]  ; Yield_Time
000044  f7fffffe          BL       RMP_Print_Int
;;;160        RMP_PRINTK_S(" cycles.\r\n");
000048  a060              ADR      r0,|L2.460|
00004a  f7fffffe          BL       RMP_Print_String
;;;161        /* Change priority of thread 2, just in case */
;;;162        RMP_Thd_Set(&Thd_2,2,RMP_MAX_SLICES);
00004e  f8df8188          LDR      r8,|L2.472|
000052  2102              MOVS     r1,#2
000054  4861              LDR      r0,|L2.476|
000056  4642              MOV      r2,r8
000058  f7fffffe          BL       RMP_Thd_Set
;;;163        
;;;164        /* Mailbox tests */
;;;165        Total=0;
00005c  60a6              STR      r6,[r4,#8]  ; Total
00005e  f04f0900          MOV      r9,#0
                  |L2.98|
000062  4641              MOV      r1,r8
000064  4668              MOV      r0,sp
000066  f7fffffe          BL       RMP_Thd_Rcv
00006a  6a78              LDR      r0,[r7,#0x24]
00006c  f1090901          ADD      r9,r9,#1
000070  0040              LSLS     r0,r0,#1
000072  6060              STR      r0,[r4,#4]  ; End
000074  45a9              CMP      r9,r5
000076  6860              LDR      r0,[r4,#4]  ; End
000078  6821              LDR      r1,[r4,#0]  ; Start
00007a  68a2              LDR      r2,[r4,#8]  ; Total
00007c  eba00001          SUB      r0,r0,r1
000080  4410              ADD      r0,r0,r2
000082  60a0              STR      r0,[r4,#8]  ; Total
000084  dbed              BLT      |L2.98|
;;;166        Test_Mail_2();
;;;167        RMP_PRINTK_S("Mailbox: ");
000086  a056              ADR      r0,|L2.480|
000088  f7fffffe          BL       RMP_Print_String
;;;168        Mailbox_Time=Total/10000;
00008c  68a0              LDR      r0,[r4,#8]  ; Total
00008e  fbb0f0f5          UDIV     r0,r0,r5
000092  6160              STR      r0,[r4,#0x14]  ; Mailbox_Time
;;;169        RMP_PRINTK_I(Mailbox_Time);
000094  6960              LDR      r0,[r4,#0x14]  ; Mailbox_Time
000096  f7fffffe          BL       RMP_Print_Int
;;;170        RMP_PRINTK_S(" cycles.\r\n");
00009a  a04c              ADR      r0,|L2.460|
00009c  f7fffffe          BL       RMP_Print_String
;;;171        
;;;172        /* Semaphore tests */
;;;173        Total=0;
0000a0  60a6              STR      r6,[r4,#8]  ; Total
0000a2  f04f0900          MOV      r9,#0
                  |L2.166|
0000a6  4851              LDR      r0,|L2.492|
0000a8  4641              MOV      r1,r8
0000aa  f7fffffe          BL       RMP_Sem_Pend
0000ae  6a78              LDR      r0,[r7,#0x24]
0000b0  f1090901          ADD      r9,r9,#1
0000b4  0040              LSLS     r0,r0,#1
0000b6  6060              STR      r0,[r4,#4]  ; End
0000b8  45a9              CMP      r9,r5
0000ba  6860              LDR      r0,[r4,#4]  ; End
0000bc  6821              LDR      r1,[r4,#0]  ; Start
0000be  68a2              LDR      r2,[r4,#8]  ; Total
0000c0  eba00001          SUB      r0,r0,r1
0000c4  4410              ADD      r0,r0,r2
0000c6  60a0              STR      r0,[r4,#8]  ; Total
0000c8  dbed              BLT      |L2.166|
;;;174        Test_Sem_2();
;;;175        RMP_PRINTK_S("Semaphore: ");
0000ca  a049              ADR      r0,|L2.496|
0000cc  f7fffffe          BL       RMP_Print_String
;;;176        Semaphore_Time=Total/10000;
0000d0  68a0              LDR      r0,[r4,#8]  ; Total
0000d2  fbb0f0f5          UDIV     r0,r0,r5
0000d6  61a0              STR      r0,[r4,#0x18]  ; Semaphore_Time
;;;177        RMP_PRINTK_I(Semaphore_Time);
0000d8  69a0              LDR      r0,[r4,#0x18]  ; Semaphore_Time
0000da  f7fffffe          BL       RMP_Print_Int
;;;178        RMP_PRINTK_S(" cycles.\r\n");
0000de  a03b              ADR      r0,|L2.460|
0000e0  f7fffffe          BL       RMP_Print_String
0000e4  4a45              LDR      r2,|L2.508|
0000e6  2010              MOVS     r0,#0x10
0000e8  f8df9114          LDR      r9,|L2.512|
0000ec  f2454160          MOV      r1,#0x5460
;;;179        
;;;180        /* Mailbox from interrupt tests */
;;;181        Total=0;
0000f0  60a6              STR      r6,[r4,#8]  ; Total
0000f2  f8c92000          STR      r2,[r9,#0]  ; TIM4_Handle
0000f6  e9c96001          STRD     r6,r0,[r9,#4]
0000fa  e9c91603          STRD     r1,r6,[r9,#0xc]
0000fe  4648              MOV      r0,r9
000100  f8c96014          STR      r6,[r9,#0x14]  ; TIM4_Handle
000104  f7fffffe          BL       HAL_TIM_Base_Init
000108  483e              LDR      r0,|L2.516|
00010a  6801              LDR      r1,[r0,#0]
00010c  f0410104          ORR      r1,r1,#4
000110  6001              STR      r1,[r0,#0]
000112  6800              LDR      r0,[r0,#0]
000114  f06f0101          MVN      r1,#1
000118  f0000004          AND      r0,r0,#4
00011c  9000              STR      r0,[sp,#0]
00011e  f8d90000          LDR      r0,[r9,#0]  ; TIM4_Handle
000122  6802              LDR      r2,[r0,#0]
000124  f0420201          ORR      r2,r2,#1
000128  6002              STR      r2,[r0,#0]
00012a  f8d90000          LDR      r0,[r9,#0]  ; TIM4_Handle
00012e  6101              STR      r1,[r0,#0x10]
000130  4648              MOV      r0,r9
000132  f7fffffe          BL       HAL_TIM_Base_Start_IT
000136  62a6              STR      r6,[r4,#0x28]  ; Count
                  |L2.312|
000138  4641              MOV      r1,r8
00013a  4668              MOV      r0,sp
00013c  f7fffffe          BL       RMP_Thd_Rcv
000140  6a78              LDR      r0,[r7,#0x24]
000142  0040              LSLS     r0,r0,#1
000144  6060              STR      r0,[r4,#4]  ; End
000146  6860              LDR      r0,[r4,#4]  ; End
000148  6821              LDR      r1,[r4,#0]  ; Start
00014a  68a2              LDR      r2,[r4,#8]  ; Total
00014c  1a40              SUBS     r0,r0,r1
00014e  4410              ADD      r0,r0,r2
000150  60a0              STR      r0,[r4,#8]  ; Total
000152  6aa0              LDR      r0,[r4,#0x28]  ; Count
000154  1c40              ADDS     r0,r0,#1
000156  62a0              STR      r0,[r4,#0x28]  ; Count
000158  42a8              CMP      r0,r5
00015a  dbed              BLT      |L2.312|
;;;182        Int_Init();
;;;183        Test_Mail_ISR();
;;;184        
;;;185        /* Semaphore from interrupt tests */
;;;186        Temp=Total;
00015c  68a0              LDR      r0,[r4,#8]  ; Total
00015e  60e0              STR      r0,[r4,#0xc]  ; Temp
;;;187        Total=0;
000160  60a6              STR      r6,[r4,#8]  ; Total
000162  62e6              STR      r6,[r4,#0x2c]  ; Count
                  |L2.356|
000164  4641              MOV      r1,r8
000166  4821              LDR      r0,|L2.492|
000168  f7fffffe          BL       RMP_Sem_Pend
00016c  6a78              LDR      r0,[r7,#0x24]
00016e  0040              LSLS     r0,r0,#1
000170  6060              STR      r0,[r4,#4]  ; End
000172  6860              LDR      r0,[r4,#4]  ; End
000174  6821              LDR      r1,[r4,#0]  ; Start
000176  68a2              LDR      r2,[r4,#8]  ; Total
000178  1a40              SUBS     r0,r0,r1
00017a  4410              ADD      r0,r0,r2
00017c  60a0              STR      r0,[r4,#8]  ; Total
00017e  6ae0              LDR      r0,[r4,#0x2c]  ; Count
000180  1c40              ADDS     r0,r0,#1
000182  62e0              STR      r0,[r4,#0x2c]  ; Count
000184  42a8              CMP      r0,r5
000186  dbed              BLT      |L2.356|
;;;188        Test_Sem_ISR();
;;;189        
;;;190        RMP_PRINTK_S("Mailbox-ISR: ");
000188  a01f              ADR      r0,|L2.520|
00018a  f7fffffe          BL       RMP_Print_String
;;;191        Mailbox_ISR_Time=Temp/10000;
00018e  68e0              LDR      r0,[r4,#0xc]  ; Temp
000190  fbb0f0f5          UDIV     r0,r0,r5
000194  61e0              STR      r0,[r4,#0x1c]  ; Mailbox_ISR_Time
;;;192        RMP_PRINTK_I(Mailbox_ISR_Time);
000196  69e0              LDR      r0,[r4,#0x1c]  ; Mailbox_ISR_Time
000198  f7fffffe          BL       RMP_Print_Int
;;;193        RMP_PRINTK_S(" cycles.\r\n");
00019c  a00b              ADR      r0,|L2.460|
00019e  f7fffffe          BL       RMP_Print_String
;;;194        RMP_PRINTK_S("Semaphore-ISR: ");
0001a2  a01d              ADR      r0,|L2.536|
0001a4  f7fffffe          BL       RMP_Print_String
;;;195        Semaphore_ISR_Time=Total/10000;
0001a8  68a0              LDR      r0,[r4,#8]  ; Total
0001aa  fbb0f0f5          UDIV     r0,r0,r5
0001ae  6220              STR      r0,[r4,#0x20]  ; Semaphore_ISR_Time
;;;196        RMP_PRINTK_I(Semaphore_ISR_Time);
0001b0  6a20              LDR      r0,[r4,#0x20]  ; Semaphore_ISR_Time
0001b2  f7fffffe          BL       RMP_Print_Int
;;;197        RMP_PRINTK_S(" cycles.\r\n");
0001b6  a005              ADR      r0,|L2.460|
0001b8  f7fffffe          BL       RMP_Print_String
                  |L2.444|
;;;198        
;;;199        while(1);
0001bc  e7fe              B        |L2.444|
;;;200    }
;;;201    /* End Function:Func_2 *******************************************************/
                          ENDP

0001be  0000              DCW      0x0000
                  |L2.448|
                          DCD      ||.data||
                  |L2.452|
0001c4  5969656c          DCB      "Yield: ",0
0001c8  643a2000
                  |L2.460|
0001cc  20637963          DCB      " cycles.\r\n",0
0001d0  6c65732e
0001d4  0d0a00  
0001d7  00                DCB      0
                  |L2.472|
                          DCD      0x000186a0
                  |L2.476|
                          DCD      ||.bss||+0x8bc
                  |L2.480|
0001e0  4d61696c          DCB      "Mailbox: ",0
0001e4  626f783a
0001e8  2000    
0001ea  00                DCB      0
0001eb  00                DCB      0
                  |L2.492|
                          DCD      ||.bss||+0x8f8
                  |L2.496|
0001f0  53656d61          DCB      "Semaphore: ",0
0001f4  70686f72
0001f8  653a2000
                  |L2.508|
                          DCD      0x40000800
                  |L2.512|
                          DCD      ||.bss||+0x40
                  |L2.516|
                          DCD      0x40023840
                  |L2.520|
000208  4d61696c          DCB      "Mailbox-ISR: ",0
00020c  626f782d
000210  4953523a
000214  2000    
000216  00                DCB      0
000217  00                DCB      0
                  |L2.536|
000218  53656d61          DCB      "Semaphore-ISR: ",0
00021c  70686f72
000220  652d4953
000224  523a2000

                          AREA ||i.HAL_TIM_Base_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_MspInit PROC
;;;78     
;;;79     void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
000000  6800              LDR      r0,[r0,#0]
;;;80     {
000002  b081              SUB      sp,sp,#4
;;;81     	if(htim->Instance==TIM4) 
000004  f1a04180          SUB      r1,r0,#0x40000000
000008  f5b16100          SUBS     r1,r1,#0x800
;;;82         {
;;;83     		/* Set the interrupt priority */
;;;84     		NVIC_SetPriority(TIM4_IRQn,0xFF);
;;;85     		/* Enable timer 4 interrupt */
;;;86     		NVIC_EnableIRQ(TIM4_IRQn);
;;;87     		/* Enable timer 4 clock */
;;;88     		__HAL_RCC_TIM4_CLK_ENABLE();
;;;89     	}
;;;90     }
00000c  bf1c              ITT      NE
00000e  b001              ADDNE    sp,sp,#4
000010  4770              BXNE     lr
000012  20f0              MOVS     r0,#0xf0
000014  4909              LDR      r1,|L3.60|
000016  f8810400          STRB     r0,[r1,#0x400]
00001a  f04f21e0          MOV      r1,#0xe000e000
00001e  f04f4080          MOV      r0,#0x40000000
000022  f8c10100          STR      r0,[r1,#0x100]
000026  4806              LDR      r0,|L3.64|
000028  6801              LDR      r1,[r0,#0]            ;88
00002a  f0410104          ORR      r1,r1,#4              ;88
00002e  6001              STR      r1,[r0,#0]            ;88
000030  6800              LDR      r0,[r0,#0]            ;88
000032  f0000004          AND      r0,r0,#4              ;88
000036  9000              STR      r0,[sp,#0]            ;88
000038  b001              ADD      sp,sp,#4
00003a  4770              BX       lr
;;;91     
                          ENDP

                  |L3.60|
                          DCD      0xe000e01e
                  |L3.64|
                          DCD      0x40023840

                          AREA ||i.Int_Disable||, CODE, READONLY, ALIGN=1

                  Int_Disable PROC
;;;106    ******************************************************************************/
;;;107    void Int_Disable(void)
000000  f04f21e0          MOV      r1,#0xe000e000
000004  f04f4080          MOV      r0,#0x40000000
000008  f8c10180          STR      r0,[r1,#0x180]
;;;108    {
;;;109        /* Disable timer 4 interrupt */
;;;110        NVIC_DisableIRQ(TIM4_IRQn);
;;;111    }
00000c  4770              BX       lr
;;;112    #endif
                          ENDP


                          AREA ||i.Int_Handler||, CODE, READONLY, ALIGN=2

                  Int_Handler PROC
;;;208    ******************************************************************************/
;;;209    void Int_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;210    {
;;;211        static cnt_t Count=0;
;;;212        
;;;213        if(Count<10000)
000002  4c1e              LDR      r4,|L5.124|
000004  f2427010          MOV      r0,#0x2710
;;;214        {
;;;215            Count++;
;;;216            Start=COUNTER_READ();
000008  0681              LSLS     r1,r0,#26
00000a  6b22              LDR      r2,[r4,#0x30]         ;213  ; Count
00000c  4282              CMP      r2,r0                 ;213
00000e  f1020001          ADD      r0,r2,#1              ;215
000012  da14              BGE      |L5.62|
000014  6320              STR      r0,[r4,#0x30]  ; Count
000016  6a48              LDR      r0,[r1,#0x24]
000018  0040              LSLS     r0,r0,#1
00001a  6020              STR      r0,[r4,#0]  ; Start
;;;217            if(RMP_Thd_Snd_ISR(&Thd_2, 1)<0)
00001c  4818              LDR      r0,|L5.128|
00001e  2101              MOVS     r1,#1
000020  f7fffffe          BL       RMP_Thd_Snd_ISR
000024  2800              CMP      r0,#0
;;;218            {
;;;219                RMP_PRINTK_S("ISR Mailbox send failure: ");
;;;220                RMP_PRINTK_I(Count);
;;;221                RMP_PRINTK_S(" sends.\r\n");
;;;222                while(1);
;;;223            }
;;;224        }
;;;225        else if(Count<20000)
;;;226        {
;;;227            Count++;
;;;228            Start=COUNTER_READ();
;;;229            if(RMP_Sem_Post_ISR(&Sem_1, 1)<0)
;;;230            {
;;;231                RMP_PRINTK_S("ISR semaphore post failure: ");
;;;232                RMP_PRINTK_I(Count);
;;;233                RMP_PRINTK_S(" posts.\r\n");
;;;234                while(1);
;;;235            }
;;;236        }
;;;237        else
;;;238            Int_Disable();
;;;239    }
000026  bfa8              IT       GE
000028  bd10              POPGE    {r4,pc}
00002a  a016              ADR      r0,|L5.132|
00002c  f7fffffe          BL       RMP_Print_String
000030  6b20              LDR      r0,[r4,#0x30]         ;220  ; Count
000032  f7fffffe          BL       RMP_Print_Int
000036  a01a              ADR      r0,|L5.160|
000038  f7fffffe          BL       RMP_Print_String
                  |L5.60|
00003c  e7fe              B        |L5.60|
                  |L5.62|
00003e  f6446320          MOV      r3,#0x4e20            ;225
000042  429a              CMP      r2,r3                 ;225
000044  bfa2              ITTT     GE                    ;225
000046  f04f20e0          MOVGE    r0,#0xe000e000        ;225
00004a  f8c01180          STRGE    r1,[r0,#0x180]        ;225
00004e  bd10              POPGE    {r4,pc}
000050  6320              STR      r0,[r4,#0x30]         ;228  ; Count
000052  6a48              LDR      r0,[r1,#0x24]         ;228
000054  0040              LSLS     r0,r0,#1              ;228
000056  6020              STR      r0,[r4,#0]            ;228  ; Start
000058  4814              LDR      r0,|L5.172|
00005a  2101              MOVS     r1,#1                 ;229
00005c  f7fffffe          BL       RMP_Sem_Post_ISR
000060  2800              CMP      r0,#0                 ;229
000062  bfa8              IT       GE
000064  bd10              POPGE    {r4,pc}
000066  a012              ADR      r0,|L5.176|
000068  f7fffffe          BL       RMP_Print_String
00006c  6b20              LDR      r0,[r4,#0x30]         ;232  ; Count
00006e  f7fffffe          BL       RMP_Print_Int
000072  a017              ADR      r0,|L5.208|
000074  f7fffffe          BL       RMP_Print_String
                  |L5.120|
000078  e7fe              B        |L5.120|
;;;240    #endif
                          ENDP

00007a  0000              DCW      0x0000
                  |L5.124|
                          DCD      ||.data||
                  |L5.128|
                          DCD      ||.bss||+0x8bc
                  |L5.132|
000084  49535220          DCB      "ISR Mailbox send failure: ",0
000088  4d61696c
00008c  626f7820
000090  73656e64
000094  20666169
000098  6c757265
00009c  3a2000  
00009f  00                DCB      0
                  |L5.160|
0000a0  2073656e          DCB      " sends.\r\n",0
0000a4  64732e0d
0000a8  0a00    
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L5.172|
                          DCD      ||.bss||+0x8f8
                  |L5.176|
0000b0  49535220          DCB      "ISR semaphore post failure: ",0
0000b4  73656d61
0000b8  70686f72
0000bc  6520706f
0000c0  73742066
0000c4  61696c75
0000c8  72653a20
0000cc  00      
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L5.208|
0000d0  20706f73          DCB      " posts.\r\n",0
0000d4  74732e0d
0000d8  0a00    
0000da  00                DCB      0
0000db  00                DCB      0

                          AREA ||i.Int_Init||, CODE, READONLY, ALIGN=2

                  Int_Init PROC
;;;61     ******************************************************************************/
;;;62     void Int_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;63     {
;;;64         /* TIM4 clock = 1/2 CPU clock */
;;;65         TIM4_Handle.Instance=TIM4;
000002  4c14              LDR      r4,|L6.84|
;;;66         TIM4_Handle.Init.Prescaler=0;
;;;67         TIM4_Handle.Init.CounterMode=TIM_COUNTERMODE_DOWN;
000004  2210              MOVS     r2,#0x10
000006  4b12              LDR      r3,|L6.80|
000008  2000              MOVS     r0,#0                 ;66
;;;68         TIM4_Handle.Init.Period=21600;
00000a  f2454160          MOV      r1,#0x5460
00000e  6023              STR      r3,[r4,#0]            ;65  ; TIM4_Handle
000010  e9c40201          STRD     r0,r2,[r4,#4]         ;65
000014  e9c41003          STRD     r1,r0,[r4,#0xc]       ;65
;;;69         TIM4_Handle.Init.ClockDivision=TIM_CLOCKDIVISION_DIV1;
;;;70     	TIM4_Handle.Init.RepetitionCounter=0;
;;;71         HAL_TIM_Base_Init(&TIM4_Handle);
000018  6160              STR      r0,[r4,#0x14]  ; TIM4_Handle
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       HAL_TIM_Base_Init
;;;72         __HAL_RCC_TIM4_CLK_ENABLE();
000020  480d              LDR      r0,|L6.88|
000022  6801              LDR      r1,[r0,#0]
000024  f0410104          ORR      r1,r1,#4
000028  6001              STR      r1,[r0,#0]
00002a  6800              LDR      r0,[r0,#0]
;;;73         __HAL_TIM_ENABLE(&TIM4_Handle);
;;;74     	/* Clear interrupt pending bit, because we used EGR to update the registers */
;;;75     	__HAL_TIM_CLEAR_IT(&TIM4_Handle, TIM_IT_UPDATE);
00002c  f06f0101          MVN      r1,#1
000030  f0000004          AND      r0,r0,#4              ;72
000034  9000              STR      r0,[sp,#0]            ;73
000036  6820              LDR      r0,[r4,#0]            ;73  ; TIM4_Handle
000038  6802              LDR      r2,[r0,#0]            ;73
00003a  f0420201          ORR      r2,r2,#1              ;73
00003e  6002              STR      r2,[r0,#0]            ;73
000040  6820              LDR      r0,[r4,#0]  ; TIM4_Handle
000042  6101              STR      r1,[r0,#0x10]
;;;76     	HAL_TIM_Base_Start_IT(&TIM4_Handle);
000044  4620              MOV      r0,r4
000046  e8bd4038          POP      {r3-r5,lr}
00004a  f7ffbffe          B.W      HAL_TIM_Base_Start_IT
;;;77     }
;;;78     
                          ENDP

00004e  0000              DCW      0x0000
                  |L6.80|
                          DCD      0x40000800
                  |L6.84|
                          DCD      ||.bss||+0x40
                  |L6.88|
                          DCD      0x40023840

                          AREA ||i.RMP_Init_Hook||, CODE, READONLY, ALIGN=2

                  RMP_Init_Hook PROC
;;;248    ******************************************************************************/
;;;249    void RMP_Init_Hook(void)
000000  b530              PUSH     {r4,r5,lr}
000002  4c24              LDR      r4,|L7.148|
000004  2000              MOVS     r0,#0
000006  1e41              SUBS     r1,r0,#1
;;;250    {
000008  b083              SUB      sp,sp,#0xc
00000a  f04f4280          MOV      r2,#0x40000000
00000e  e9c42000          STRD     r2,r0,[r4,#0]
000012  e9c40102          STRD     r0,r1,[r4,#8]
000016  6120              STR      r0,[r4,#0x10]  ; TIM2_Handle
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       HAL_TIM_Base_Init
00001e  481e              LDR      r0,|L7.152|
000020  6801              LDR      r1,[r0,#0]
000022  f0410101          ORR      r1,r1,#1
000026  6001              STR      r1,[r0,#0]
000028  6800              LDR      r0,[r0,#0]
00002a  f0000001          AND      r0,r0,#1
00002e  9000              STR      r0,[sp,#0]
000030  6820              LDR      r0,[r4,#0]  ; TIM2_Handle
000032  6801              LDR      r1,[r0,#0]
000034  f0410101          ORR      r1,r1,#1
000038  6001              STR      r1,[r0,#0]
;;;251    #ifndef MINIMAL_SIZE
;;;252        /* Init the timer */
;;;253        Timer_Init();
;;;254        /* Clean up the structures */
;;;255        RMP_Clear(&Thd_1,sizeof(struct RMP_Thd));
00003a  213c              MOVS     r1,#0x3c
00003c  f5046008          ADD      r0,r4,#0x880
000040  f7fffffe          BL       RMP_Clear
;;;256        RMP_Clear(&Thd_2,sizeof(struct RMP_Thd));
000044  213c              MOVS     r1,#0x3c
000046  f60400bc          ADD      r0,r4,#0x8bc
00004a  f7fffffe          BL       RMP_Clear
;;;257        RMP_Clear(&Sem_1,sizeof(struct RMP_Sem));
00004e  2110              MOVS     r1,#0x10
000050  f60400f8          ADD      r0,r4,#0x8f8
000054  f7fffffe          BL       RMP_Clear
;;;258        /* Create counting semaphore */
;;;259        RMP_Sem_Crt(&Sem_1,0);
000058  2100              MOVS     r1,#0
00005a  f60400f8          ADD      r0,r4,#0x8f8
00005e  f7fffffe          BL       RMP_Sem_Crt
;;;260        /* Start threads */
;;;261        RMP_Thd_Crt(&Thd_1, Func_1, THD1_STACK, (void*)0x1234, 1, 5);
000062  2405              MOVS     r4,#5
000064  4a0d              LDR      r2,|L7.156|
000066  2501              MOVS     r5,#1
000068  490d              LDR      r1,|L7.160|
00006a  f502608d          ADD      r0,r2,#0x468
00006e  f2412334          MOV      r3,#0x1234
000072  e9cd5400          STRD     r5,r4,[sp,#0]
000076  f7fffffe          BL       RMP_Thd_Crt
;;;262        RMP_Thd_Crt(&Thd_2, Func_2, THD2_STACK, (void*)0x4321, 1, 5);
00007a  4a0a              LDR      r2,|L7.164|
00007c  f2443321          MOV      r3,#0x4321
000080  4909              LDR      r1,|L7.168|
000082  e9cd5400          STRD     r5,r4,[sp,#0]
000086  f10200a4          ADD      r0,r2,#0xa4
00008a  f7fffffe          BL       RMP_Thd_Crt
;;;263    #endif
;;;264    }
00008e  b003              ADD      sp,sp,#0xc
000090  bd30              POP      {r4,r5,pc}
;;;265    
                          ENDP

000092  0000              DCW      0x0000
                  |L7.148|
                          DCD      ||.bss||
                  |L7.152|
                          DCD      0x40023840
                  |L7.156|
                          DCD      ||.bss||+0x418
                  |L7.160|
                          DCD      Func_1
                  |L7.164|
                          DCD      ||.bss||+0x818
                  |L7.168|
                          DCD      Func_2

                          AREA ||i.RMP_Init_Idle||, CODE, READONLY, ALIGN=1

                  RMP_Init_Idle PROC
;;;265    
;;;266    void RMP_Init_Idle(void)
000000  4770              BX       lr
;;;267    {
;;;268        return;
;;;269    }
;;;270    /* End Function:RMP_Init *****************************************************/
                          ENDP


                          AREA ||i.TIM4_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM4_IRQHandler PROC
;;;92     /* The interrupt handler */
;;;93     void TIM4_IRQHandler(void)
000000  4b20              LDR      r3,|L9.132|
000002  f2427010          MOV      r0,#0x2710
;;;94     {
000006  b510              PUSH     {r4,lr}
000008  4c1f              LDR      r4,|L9.136|
00000a  0681              LSLS     r1,r0,#26
;;;95         TIM4->SR=~TIM_FLAG_UPDATE;
00000c  f06f0201          MVN      r2,#1
000010  601a              STR      r2,[r3,#0]
000012  6b22              LDR      r2,[r4,#0x30]  ; Count
000014  4282              CMP      r2,r0
000016  f1020001          ADD      r0,r2,#1
00001a  da14              BGE      |L9.70|
00001c  6320              STR      r0,[r4,#0x30]         ;94  ; Count
00001e  6a48              LDR      r0,[r1,#0x24]         ;94
000020  0040              LSLS     r0,r0,#1              ;94
000022  6020              STR      r0,[r4,#0]            ;94  ; Start
000024  4819              LDR      r0,|L9.140|
000026  2101              MOVS     r1,#1                 ;94
000028  f7fffffe          BL       RMP_Thd_Snd_ISR
00002c  2800              CMP      r0,#0                 ;94
;;;96         Int_Handler();
;;;97     }
00002e  bfa8              IT       GE
000030  bd10              POPGE    {r4,pc}
000032  4817              LDR      r0,|L9.144|
000034  f7fffffe          BL       RMP_Print_String
000038  6b20              LDR      r0,[r4,#0x30]  ; Count
00003a  f7fffffe          BL       RMP_Print_Int
00003e  4815              LDR      r0,|L9.148|
000040  f7fffffe          BL       RMP_Print_String
                  |L9.68|
000044  e7fe              B        |L9.68|
                  |L9.70|
000046  f6446320          MOV      r3,#0x4e20
00004a  429a              CMP      r2,r3
00004c  bfa2              ITTT     GE
00004e  f04f20e0          MOVGE    r0,#0xe000e000
000052  f8c01180          STRGE    r1,[r0,#0x180]
000056  bd10              POPGE    {r4,pc}
000058  6320              STR      r0,[r4,#0x30]  ; Count
00005a  6a48              LDR      r0,[r1,#0x24]
00005c  0040              LSLS     r0,r0,#1
00005e  6020              STR      r0,[r4,#0]  ; Start
000060  480d              LDR      r0,|L9.152|
000062  2101              MOVS     r1,#1
000064  f7fffffe          BL       RMP_Sem_Post_ISR
000068  2800              CMP      r0,#0
00006a  bfa8              IT       GE
00006c  bd10              POPGE    {r4,pc}
00006e  480b              LDR      r0,|L9.156|
000070  f7fffffe          BL       RMP_Print_String
000074  6b20              LDR      r0,[r4,#0x30]  ; Count
000076  f7fffffe          BL       RMP_Print_Int
00007a  4809              LDR      r0,|L9.160|
00007c  f7fffffe          BL       RMP_Print_String
                  |L9.128|
000080  e7fe              B        |L9.128|
;;;98     /* End Function:Int_Init *****************************************************/
                          ENDP

000082  0000              DCW      0x0000
                  |L9.132|
                          DCD      0x40000810
                  |L9.136|
                          DCD      ||.data||
                  |L9.140|
                          DCD      ||.bss||+0x8bc
                  |L9.144|
                          DCD      ||i.Int_Handler||+0x84
                  |L9.148|
                          DCD      ||i.Int_Handler||+0xa0
                  |L9.152|
                          DCD      ||.bss||+0x8f8
                  |L9.156|
                          DCD      ||i.Int_Handler||+0xb0
                  |L9.160|
                          DCD      ||i.Int_Handler||+0xd0

                          AREA ||i.Test_Mail_1||, CODE, READONLY, ALIGN=2

                  Test_Mail_1 PROC
;;;49     
;;;50     void Test_Mail_1(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;51     {
;;;52         static cnt_t Count;
;;;53         for(Count=0;Count<10000;Count++)
000004  4c0b              LDR      r4,|L10.52|
000006  2000              MOVS     r0,#0
;;;54         {
;;;55             /* Read counter here */
;;;56             Start=COUNTER_READ();
;;;57             RMP_Thd_Snd(&Thd_2, 1, RMP_MAX_SLICES);
000008  4f0b              LDR      r7,|L10.56|
00000a  f04f4680          MOV      r6,#0x40000000        ;56
00000e  f2427510          MOV      r5,#0x2710            ;53
000012  6260              STR      r0,[r4,#0x24]         ;53  ; Count
                  |L10.20|
000014  6a70              LDR      r0,[r6,#0x24]         ;56
000016  0040              LSLS     r0,r0,#1              ;56
000018  6020              STR      r0,[r4,#0]            ;56  ; Start
00001a  4808              LDR      r0,|L10.60|
00001c  2101              MOVS     r1,#1
00001e  463a              MOV      r2,r7
000020  f7fffffe          BL       RMP_Thd_Snd
000024  6a60              LDR      r0,[r4,#0x24]         ;53  ; Count
000026  1c40              ADDS     r0,r0,#1              ;53
000028  6260              STR      r0,[r4,#0x24]         ;53  ; Count
00002a  42a8              CMP      r0,r5                 ;53
00002c  dbf2              BLT      |L10.20|
;;;58         }
;;;59     }
00002e  e8bd81f0          POP      {r4-r8,pc}
;;;60     
                          ENDP

000032  0000              DCW      0x0000
                  |L10.52|
                          DCD      ||.data||
                  |L10.56|
                          DCD      0x000186a0
                  |L10.60|
                          DCD      ||.bss||+0x8bc

                          AREA ||i.Test_Mail_2||, CODE, READONLY, ALIGN=2

                  Test_Mail_2 PROC
;;;100    
;;;101    void Test_Mail_2(void)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;102    {
;;;103        ptr_t Data;
;;;104        cnt_t Count;
;;;105        for(Count=0;Count<10000;Count++)
;;;106        {
;;;107            RMP_Thd_Rcv(&Data, RMP_MAX_SLICES);
000004  f8df8034          LDR      r8,|L11.60|
000008  2500              MOVS     r5,#0                 ;105
;;;108            /* Read counter here */
;;;109            End=COUNTER_READ();
00000a  4c0d              LDR      r4,|L11.64|
00000c  f04f4680          MOV      r6,#0x40000000
000010  f2427710          MOV      r7,#0x2710            ;105
                  |L11.20|
000014  4641              MOV      r1,r8                 ;107
000016  4668              MOV      r0,sp                 ;107
000018  f7fffffe          BL       RMP_Thd_Rcv
00001c  6a70              LDR      r0,[r6,#0x24]
00001e  1c6d              ADDS     r5,r5,#1
000020  0040              LSLS     r0,r0,#1
000022  6060              STR      r0,[r4,#4]  ; End
000024  42bd              CMP      r5,r7                 ;105
;;;110            Total+=(tim_t)(End-Start);
000026  6860              LDR      r0,[r4,#4]  ; End
000028  6821              LDR      r1,[r4,#0]  ; Start
00002a  68a2              LDR      r2,[r4,#8]  ; Total
00002c  eba00001          SUB      r0,r0,r1
000030  4410              ADD      r0,r0,r2
000032  60a0              STR      r0,[r4,#8]  ; Total
000034  dbee              BLT      |L11.20|
;;;111        };
;;;112    }
000036  e8bd83f8          POP      {r3-r9,pc}
;;;113    
                          ENDP

00003a  0000              DCW      0x0000
                  |L11.60|
                          DCD      0x000186a0
                  |L11.64|
                          DCD      ||.data||

                          AREA ||i.Test_Mail_ISR||, CODE, READONLY, ALIGN=2

                  Test_Mail_ISR PROC
;;;125    
;;;126    void Test_Mail_ISR(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;127    {
;;;128        ptr_t Data;
;;;129        static cnt_t Count;
;;;130        for(Count=0;Count<10000;Count++)
000002  4c0d              LDR      r4,|L12.56|
000004  2000              MOVS     r0,#0
;;;131        {
;;;132            RMP_Thd_Rcv(&Data, RMP_MAX_SLICES);
000006  4f0d              LDR      r7,|L12.60|
000008  f2427510          MOV      r5,#0x2710            ;130
;;;133            /* Read counter here */
;;;134            End=COUNTER_READ();
00000c  067e              LSLS     r6,r7,#25
00000e  62a0              STR      r0,[r4,#0x28]         ;130  ; Count
                  |L12.16|
000010  4639              MOV      r1,r7                 ;132
000012  4668              MOV      r0,sp                 ;132
000014  f7fffffe          BL       RMP_Thd_Rcv
000018  6a70              LDR      r0,[r6,#0x24]
00001a  0040              LSLS     r0,r0,#1
00001c  6060              STR      r0,[r4,#4]  ; End
;;;135            Total+=(tim_t)(End-Start);
00001e  6860              LDR      r0,[r4,#4]  ; End
000020  6821              LDR      r1,[r4,#0]  ; Start
000022  68a2              LDR      r2,[r4,#8]  ; Total
000024  1a40              SUBS     r0,r0,r1
000026  4410              ADD      r0,r0,r2
000028  60a0              STR      r0,[r4,#8]  ; Total
00002a  6aa0              LDR      r0,[r4,#0x28]         ;130  ; Count
00002c  1c40              ADDS     r0,r0,#1              ;130
00002e  62a0              STR      r0,[r4,#0x28]         ;130  ; Count
000030  42a8              CMP      r0,r5                 ;130
000032  dbed              BLT      |L12.16|
;;;136        };
;;;137    }
000034  bdf8              POP      {r3-r7,pc}
;;;138    
                          ENDP

000036  0000              DCW      0x0000
                  |L12.56|
                          DCD      ||.data||
                  |L12.60|
                          DCD      0x000186a0

                          AREA ||i.Test_Sem_1||, CODE, READONLY, ALIGN=2

                  Test_Sem_1 PROC
;;;60     
;;;61     void Test_Sem_1(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;62     {
;;;63         cnt_t Count;
;;;64         for(Count=0;Count<10000;Count++)
;;;65         {
;;;66             /* Read counter here */
;;;67             Start=COUNTER_READ();
000004  4f08              LDR      r7,|L13.40|
000006  2400              MOVS     r4,#0                 ;64
000008  f04f4680          MOV      r6,#0x40000000
00000c  f2427510          MOV      r5,#0x2710            ;64
                  |L13.16|
000010  6a70              LDR      r0,[r6,#0x24]
000012  0040              LSLS     r0,r0,#1
000014  6038              STR      r0,[r7,#0]  ; Start
;;;68             RMP_Sem_Post(&Sem_1, 1);
000016  4805              LDR      r0,|L13.44|
000018  2101              MOVS     r1,#1
00001a  f7fffffe          BL       RMP_Sem_Post
00001e  1c64              ADDS     r4,r4,#1
000020  42ac              CMP      r4,r5                 ;64
000022  dbf5              BLT      |L13.16|
;;;69         }
;;;70     }
000024  e8bd81f0          POP      {r4-r8,pc}
;;;71     
                          ENDP

                  |L13.40|
                          DCD      ||.data||
                  |L13.44|
                          DCD      ||.bss||+0x8f8

                          AREA ||i.Test_Sem_2||, CODE, READONLY, ALIGN=2

                  Test_Sem_2 PROC
;;;113    
;;;114    void Test_Sem_2(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;115    {
;;;116        cnt_t Count;
;;;117        for(Count=0;Count<10000;Count++)
;;;118        {
;;;119            RMP_Sem_Pend(&Sem_1, RMP_MAX_SLICES);
000004  f8df8034          LDR      r8,|L14.60|
000008  2500              MOVS     r5,#0                 ;117
;;;120            /* Read counter here */
;;;121            End=COUNTER_READ();
00000a  4c0d              LDR      r4,|L14.64|
00000c  f04f4680          MOV      r6,#0x40000000
000010  f2427710          MOV      r7,#0x2710            ;117
                  |L14.20|
000014  480b              LDR      r0,|L14.68|
000016  4641              MOV      r1,r8                 ;119
000018  f7fffffe          BL       RMP_Sem_Pend
00001c  6a70              LDR      r0,[r6,#0x24]
00001e  1c6d              ADDS     r5,r5,#1
000020  0040              LSLS     r0,r0,#1
000022  6060              STR      r0,[r4,#4]  ; End
000024  42bd              CMP      r5,r7                 ;117
;;;122            Total+=(tim_t)(End-Start);
000026  6860              LDR      r0,[r4,#4]  ; End
000028  6821              LDR      r1,[r4,#0]  ; Start
00002a  68a2              LDR      r2,[r4,#8]  ; Total
00002c  eba00001          SUB      r0,r0,r1
000030  4410              ADD      r0,r0,r2
000032  60a0              STR      r0,[r4,#8]  ; Total
000034  dbee              BLT      |L14.20|
;;;123        };
;;;124    }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;125    
                          ENDP

00003a  0000              DCW      0x0000
                  |L14.60|
                          DCD      0x000186a0
                  |L14.64|
                          DCD      ||.data||
                  |L14.68|
                          DCD      ||.bss||+0x8f8

                          AREA ||i.Test_Sem_ISR||, CODE, READONLY, ALIGN=2

                  Test_Sem_ISR PROC
;;;138    
;;;139    void Test_Sem_ISR(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;140    {
;;;141        static cnt_t Count;
;;;142        for(Count=0;Count<10000;Count++)
000004  4c0d              LDR      r4,|L15.60|
000006  2000              MOVS     r0,#0
;;;143        {
;;;144            RMP_Sem_Pend(&Sem_1, RMP_MAX_SLICES);
000008  4f0d              LDR      r7,|L15.64|
00000a  f2427510          MOV      r5,#0x2710            ;142
;;;145            /* Read counter here */
;;;146            End=COUNTER_READ();
00000e  067e              LSLS     r6,r7,#25
000010  62e0              STR      r0,[r4,#0x2c]         ;142  ; Count
                  |L15.18|
000012  480c              LDR      r0,|L15.68|
000014  4639              MOV      r1,r7                 ;144
000016  f7fffffe          BL       RMP_Sem_Pend
00001a  6a70              LDR      r0,[r6,#0x24]
00001c  0040              LSLS     r0,r0,#1
00001e  6060              STR      r0,[r4,#4]  ; End
;;;147            Total+=(tim_t)(End-Start);
000020  6860              LDR      r0,[r4,#4]  ; End
000022  6821              LDR      r1,[r4,#0]  ; Start
000024  68a2              LDR      r2,[r4,#8]  ; Total
000026  1a40              SUBS     r0,r0,r1
000028  4410              ADD      r0,r0,r2
00002a  60a0              STR      r0,[r4,#8]  ; Total
00002c  6ae0              LDR      r0,[r4,#0x2c]         ;142  ; Count
00002e  1c40              ADDS     r0,r0,#1              ;142
000030  62e0              STR      r0,[r4,#0x2c]         ;142  ; Count
000032  42a8              CMP      r0,r5                 ;142
000034  dbed              BLT      |L15.18|
;;;148        };
;;;149    }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;150    
                          ENDP

00003a  0000              DCW      0x0000
                  |L15.60|
                          DCD      ||.data||
                  |L15.64|
                          DCD      0x000186a0
                  |L15.68|
                          DCD      ||.bss||+0x8f8

                          AREA ||i.Test_Yield_1||, CODE, READONLY, ALIGN=2

                  Test_Yield_1 PROC
;;;38     ******************************************************************************/
;;;39     void Test_Yield_1(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;40     {
;;;41         cnt_t Count;
;;;42         for(Count=0;Count<10000;Count++)
;;;43         {
;;;44             /* Read counter here */
;;;45             Start=COUNTER_READ();
000004  4f07              LDR      r7,|L16.36|
000006  2400              MOVS     r4,#0                 ;42
000008  f04f4680          MOV      r6,#0x40000000
00000c  f2427510          MOV      r5,#0x2710            ;42
                  |L16.16|
000010  6a70              LDR      r0,[r6,#0x24]
000012  0040              LSLS     r0,r0,#1
000014  6038              STR      r0,[r7,#0]  ; Start
;;;46             RMP_Yield();
000016  f7fffffe          BL       RMP_Yield
00001a  1c64              ADDS     r4,r4,#1
00001c  42ac              CMP      r4,r5                 ;42
00001e  dbf7              BLT      |L16.16|
;;;47         }
;;;48     }
000020  e8bd81f0          POP      {r4-r8,pc}
;;;49     
                          ENDP

                  |L16.36|
                          DCD      ||.data||

                          AREA ||i.Test_Yield_2||, CODE, READONLY, ALIGN=2

                  Test_Yield_2 PROC
;;;88     ******************************************************************************/
;;;89     void Test_Yield_2(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;90     {
;;;91         cnt_t Count;
;;;92         for(Count=0;Count<10000;Count++)
;;;93         {
;;;94             RMP_Yield();
;;;95             /* Read counter here */
;;;96             End=COUNTER_READ();
000004  4c0b              LDR      r4,|L17.52|
000006  2500              MOVS     r5,#0                 ;92
000008  f04f4680          MOV      r6,#0x40000000
00000c  f2427710          MOV      r7,#0x2710            ;92
                  |L17.16|
000010  f7fffffe          BL       RMP_Yield
000014  6a70              LDR      r0,[r6,#0x24]
000016  1c6d              ADDS     r5,r5,#1
000018  0040              LSLS     r0,r0,#1
00001a  6060              STR      r0,[r4,#4]  ; End
00001c  42bd              CMP      r5,r7                 ;92
;;;97             Total+=(tim_t)(End-Start);
00001e  6860              LDR      r0,[r4,#4]  ; End
000020  6821              LDR      r1,[r4,#0]  ; Start
000022  68a2              LDR      r2,[r4,#8]  ; Total
000024  eba00001          SUB      r0,r0,r1
000028  4410              ADD      r0,r0,r2
00002a  60a0              STR      r0,[r4,#8]  ; Total
00002c  dbf0              BLT      |L17.16|
;;;98         };
;;;99     }
00002e  e8bd81f0          POP      {r4-r8,pc}
;;;100    
                          ENDP

000032  0000              DCW      0x0000
                  |L17.52|
                          DCD      ||.data||

                          AREA ||i.Timer_Init||, CODE, READONLY, ALIGN=2

                  Timer_Init PROC
;;;40     ******************************************************************************/
;;;41     void Timer_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;42     {
;;;43         /* TIM2 clock = 1/2 CPU clock */
;;;44         TIM2_Handle.Instance=TIM2;
000002  4c0e              LDR      r4,|L18.60|
;;;45         TIM2_Handle.Init.Prescaler=0;
000004  2000              MOVS     r0,#0
;;;46         TIM2_Handle.Init.CounterMode=TIM_COUNTERMODE_UP;
;;;47         TIM2_Handle.Init.Period=(unsigned int)(-1);
000006  1e41              SUBS     r1,r0,#1
000008  f04f4280          MOV      r2,#0x40000000        ;44
00000c  e9c42000          STRD     r2,r0,[r4,#0]
000010  e9c40102          STRD     r0,r1,[r4,#8]
;;;48         TIM2_Handle.Init.ClockDivision=TIM_CLOCKDIVISION_DIV1;
;;;49         HAL_TIM_Base_Init(&TIM2_Handle);
000014  6120              STR      r0,[r4,#0x10]  ; TIM2_Handle
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       HAL_TIM_Base_Init
;;;50         __HAL_RCC_TIM2_CLK_ENABLE();
00001c  4808              LDR      r0,|L18.64|
00001e  6801              LDR      r1,[r0,#0]
000020  f0410101          ORR      r1,r1,#1
000024  6001              STR      r1,[r0,#0]
000026  6800              LDR      r0,[r0,#0]
000028  f0000001          AND      r0,r0,#1
;;;51         __HAL_TIM_ENABLE(&TIM2_Handle);
00002c  9000              STR      r0,[sp,#0]
00002e  6820              LDR      r0,[r4,#0]  ; TIM2_Handle
000030  6801              LDR      r1,[r0,#0]
000032  f0410101          ORR      r1,r1,#1
000036  6001              STR      r1,[r0,#0]
;;;52     }
000038  bd38              POP      {r3-r5,pc}
;;;53     /* End Function:Timer_Init ***************************************************/
                          ENDP

00003a  0000              DCW      0x0000
                  |L18.60|
                          DCD      ||.bss||
                  |L18.64|
                          DCD      0x40023840

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  TIM2_Handle
                          %        64
                  TIM4_Handle
                          %        64
                  Stack_1
                          %        1024
                  Stack_2
                          %        1024
                  Thd_1
                          %        60
                  Thd_2
                          %        60
                  Sem_1
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  Start
                          DCD      0x00000000
                  End
                          DCD      0x00000000
                  Total
                          DCD      0x00000000
                  Temp
                          DCD      0x00000000
                  Yield_Time
                          DCD      0x00000000
                  Mailbox_Time
                          DCD      0x00000000
                  Semaphore_Time
                          DCD      0x00000000
                  Mailbox_ISR_Time
                          DCD      0x00000000
                  Semaphore_ISR_Time
                          DCD      0x00000000
                  Count
                          DCD      0x00000000
                  |symbol_number.58|
                          DCD      0x00000000
                  |symbol_number.59|
                          DCD      0x00000000
                  |symbol_number.60|
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\MProkaron\\Benchmark\\test.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_test_c_db099e62____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32F7xx_HAL_Driver\\Core\\cmsis_armcc.h"
|__asm___6_test_c_db099e62____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_test_c_db099e62____REVSH|
#line 402
|__asm___6_test_c_db099e62____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_test_c_db099e62____RRX|
#line 587
|__asm___6_test_c_db099e62____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
