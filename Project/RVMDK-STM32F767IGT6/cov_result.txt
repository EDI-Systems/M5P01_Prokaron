391 : 330008
399 : 60096
405 : 269912
411 : 3
430 : 20001
437 : 1
461 : 5
465 : 13
471 : 1
474 : 1
482 : 1
487 : 11
520 : 100203
524 : 100203
531 : 20094
538 : 80109
570 : 92
575 : 46018
582 : 1200
588 : 13
594 : 1187
597 : 44944
601 : 102
606 : 46059
635 : 21850
642 : 21849
646 : 1
649 : 227950
670 : 40070
679 : 40052
683 : 18
686 : 1
703 : 40069
707 : 40056
711 : 13
719 : 40058
723 : 11
726 : 6
750 : 2
754 : 3
783 : 1
787 : 39
791 : 2
795 : 37
800 : 1
804 : 36
810 : 2
815 : 34
850 : 1
854 : 38
860 : 5
865 : 33
874 : 1
878 : 1
891 : 21
900 : 1
904 : 3
907 : 4
912 : 1
915 : 2
919 : 3
922 : 7
935 : 9
939 : 24
952 : 24
973 : 1
977 : 13
982 : 1
986 : 12
992 : 1
997 : 11
1002 : 6
1007 : 5
1010 : 3
1018 : 2
1021 : 1
1025 : 3
1029 : 3
1033 : 5
1037 : 3
1041 : 2
1045 : 3
1049 : 2
1069 : 1
1073 : 11
1079 : 1
1084 : 10
1089 : 1
1094 : 9
1100 : 7
1104 : 2
1112 : 5
1116 : 4
1136 : 1
1140 : 5
1146 : 1
1151 : 4
1156 : 3
1164 : 2
1168 : 1
1174 : 1
1198 : 1
1202 : 10023
1208 : 1
1213 : 10022
1218 : 1
1223 : 10021
1230 : 12
1235 : 3
1240 : 9
1248 : 4
1254 : 5
1262 : 10009
1268 : 10003
1273 : 1
1277 : 10002
1284 : 6
1313 : 1
1317 : 10006
1321 : 1
1325 : 10005
1330 : 1
1335 : 10004
1341 : 10003
1346 : 1
1350 : 10002
1358 : 10002
1363 : 1
1366 : 1
1389 : 1
1393 : 20016
1401 : 2
1409 : 1
1413 : 1
1423 : 5
1438 : 20011
1443 : 1
1451 : 20010
1455 : 1
1460 : 20009
1467 : 4
1473 : 20005
1504 : 2
1508 : 16
1535 : 1
1539 : 2
1546 : 1
1551 : 1
1577 : 1
1581 : 9
1587 : 1
1592 : 8
1597 : 1
1602 : 7
1628 : 1
1632 : 7
1638 : 1
1643 : 6
1653 : 1
1657 : 1
1684 : 1
1688 : 20013
1694 : 1
1699 : 20012
1704 : 1
1711 : 20011
1715 : 1
1720 : 20010
1728 : 5
1734 : 20005
1758 : 1
1762 : 4
1768 : 1
1773 : 3
1779 : 1
1784 : 2
1790 : 1
1794 : 1
1820 : 2
1824 : 10006
1830 : 1
1835 : 10005
1840 : 2
1845 : 10003
1856 : 1
1860 : 10000
1891 : 1
1895 : 10006
1899 : 1
1903 : 10005
1908 : 1
1912 : 10004
1922 : 1
1926 : 10002
1935 : 10002
1940 : 1
2184 : 3
2188 : 2
2193 : 1
2197 : 1
2290 : 179905
2295 : 168
2337 : 179904
2342 : 168
2372 : 30001
2378 : 20000
2383 : 10001
2386 : 60072
2392 : 1
2396 : 90072
2404 : 12
2413 : 90060
2420 : 90059
2428 : 50006
2457 : 1
2461 : 90073
2471 : 2
2475 : 90071
2488 : 90070
2499 : 1
2529 : 2
2533 : 90004
2539 : 1
2543 : 90003
2549 : 1
2553 : 90002
2563 : 90001
2567 : 54886
2574 : 35115
2577 : 1
2583 : 70002
2589 : 35115
2600 : 34887
2603 : 20000
2609 : 54887
2614 : 35115

//426:
RMP_Lock_Sched();
RMP_Yield();
RMP_Unlock_Sched();

//450,454,471:
Call Delay() on one thread

//460: Cause a send delay timeout on this

//463: Cause a semaphore delay timeout on this

//469: Cause a receive delay timeout on this

//476: Cause a receive delay timeout on this

//485: Delay finish with/without suspend, and with higher priority or not.

//522: Lock scheduler for a while. Consider combining that with Delay();
// 530

加一章已知的影响实时性的因素。里面包括了频繁的Timer Setup。放在附录里面。
// 543: Configure with 64 priorities

Thd_Snd_ISR 和 Sem_Post_ISR的scheduler locked条件检测应该被删除。
因为无论如何，Scheduler一旦Lock，这两个中断应该是进不去才对。因此这两个也被删除。


Thread Delete需要一整个section来测试。目前的测试是不行的，覆盖率太低了。
做完了，还需要另一个线程在它上面block一下。我们重新利用下那个Test_Thd和线程1的栈吧。
Thread Set 也是，需要一系列成功的测试才可以。条件太多太难覆盖了。

有BUG。在Clr ready这个地方

// Thread receive现在有可以对付NULL pointer exception的办法了。加在手册里面去。

// 需要一个Suspended Clear Ready的例子

// 需要一个Send with Non blocking的例子

// 需要一个 receiver wakeup in delay 的例子

// 需要一个 sender wakeup in delay的例子
// 需要一个 send block fail的例子

// Semaphore delete 有大量的case要测试

// LSB_Get在不正确时返回一个与处理器字长相等的值，不是负数！

// Tick_Hook被向后移动了。注意下

// 增加了 Scheduler hook

// Why line 2602 is not covered

//656-679: Leave out

//707: Make some thread ready without being the highest priority one

//726: Place multiple threads on the priority level

//733: Clear ready of ourself and others. This can be done with suspend.

//762-766: insert multiple delays into the queue.

// All error conditions: pass in something not allowed to hack them.

// These are to be implemented first
