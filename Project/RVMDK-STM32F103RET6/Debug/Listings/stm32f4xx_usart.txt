; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f4xx_usart.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f4xx_usart.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\M0P0_Library\STM32F4xx_StdPeriph_Driver\CMSIS\ST\STM32F4xx\Include -I..\..\..\M0P0_Library\STM32F4xx_StdPeriph_Driver\CMSIS\Include -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F405RGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F405xx -DSTM32F4XX -DUSE_STDPERIPH_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f4xx_usart.crf ..\..\..\M0P0_Library\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_usart.c]
                          THUMB

                          AREA ||i.USART_ClearFlag||, CODE, READONLY, ALIGN=1

                  USART_ClearFlag PROC
;;;1320     */
;;;1321   void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
000000  43c9              MVNS     r1,r1
;;;1322   {
;;;1323     /* Check the parameters */
;;;1324     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1325     assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
;;;1326   
;;;1327     /* The CTS flag is not available for UART4 and UART5 */
;;;1328     if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
;;;1329     {
;;;1330       assert_param(IS_USART_1236_PERIPH(USARTx));
;;;1331     } 
;;;1332          
;;;1333     USARTx->SR = (uint16_t)~USART_FLAG;
000002  8001              STRH     r1,[r0,#0]
;;;1334   }
000004  4770              BX       lr
;;;1335   
                          ENDP


                          AREA ||i.USART_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  USART_ClearITPendingBit PROC
;;;1428     */
;;;1429   void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
000000  0a09              LSRS     r1,r1,#8
;;;1430   {
;;;1431     uint16_t bitpos = 0x00, itmask = 0x00;
;;;1432     /* Check the parameters */
;;;1433     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1434     assert_param(IS_USART_CLEAR_IT(USART_IT)); 
;;;1435   
;;;1436     /* The CTS interrupt is not available for UART4 and UART5 */
;;;1437     if (USART_IT == USART_IT_CTS)
;;;1438     {
;;;1439       assert_param(IS_USART_1236_PERIPH(USARTx));
;;;1440     } 
;;;1441       
;;;1442     bitpos = USART_IT >> 0x08;
;;;1443     itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
000002  2201              MOVS     r2,#1
000004  fa02f101          LSL      r1,r2,r1
;;;1444     USARTx->SR = (uint16_t)~itmask;
000008  43c9              MVNS     r1,r1
00000a  8001              STRH     r1,[r0,#0]
;;;1445   }
00000c  4770              BX       lr
;;;1446   
                          ENDP


                          AREA ||i.USART_ClockInit||, CODE, READONLY, ALIGN=1

                  USART_ClockInit PROC
;;;359      */
;;;360    void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
000000  8a02              LDRH     r2,[r0,#0x10]
;;;361    {
;;;362      uint32_t tmpreg = 0x00;
;;;363      /* Check the parameters */
;;;364      assert_param(IS_USART_1236_PERIPH(USARTx));
;;;365      assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
;;;366      assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
;;;367      assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
;;;368      assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
;;;369      
;;;370    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;371      tmpreg = USARTx->CR2;
;;;372      /* Clear CLKEN, CPOL, CPHA and LBCL bits */
;;;373      tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
;;;374      /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
;;;375      /* Set CLKEN bit according to USART_Clock value */
;;;376      /* Set CPOL bit according to USART_CPOL value */
;;;377      /* Set CPHA bit according to USART_CPHA value */
;;;378      /* Set LBCL bit according to USART_LastBit value */
;;;379      tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
000002  880b              LDRH     r3,[r1,#0]
000004  f8b1c002          LDRH     r12,[r1,#2]
000008  f4226270          BIC      r2,r2,#0xf00          ;373
00000c  ea43030c          ORR      r3,r3,r12
000010  f8b1c004          LDRH     r12,[r1,#4]
000014  88c9              LDRH     r1,[r1,#6]
000016  ea4c0101          ORR      r1,r12,r1
00001a  4319              ORRS     r1,r1,r3
00001c  4311              ORRS     r1,r1,r2
;;;380                     USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
;;;381      /* Write to USART CR2 */
;;;382      USARTx->CR2 = (uint16_t)tmpreg;
00001e  8201              STRH     r1,[r0,#0x10]
;;;383    }
000020  4770              BX       lr
;;;384    
                          ENDP


                          AREA ||i.USART_ClockStructInit||, CODE, READONLY, ALIGN=1

                  USART_ClockStructInit PROC
;;;390      */
;;;391    void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
000000  2100              MOVS     r1,#0
;;;392    {
;;;393      /* USART_ClockInitStruct members default value */
;;;394      USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
000002  8001              STRH     r1,[r0,#0]
;;;395      USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
000004  8041              STRH     r1,[r0,#2]
;;;396      USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
000006  8081              STRH     r1,[r0,#4]
;;;397      USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;398    }
00000a  4770              BX       lr
;;;399    
                          ENDP


                          AREA ||i.USART_Cmd||, CODE, READONLY, ALIGN=1

                  USART_Cmd PROC
;;;407      */
;;;408    void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;409    {
;;;410      /* Check the parameters */
;;;411      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;412      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;413      
;;;414      if (NewState != DISABLE)
;;;415      {
;;;416        /* Enable the selected USART by setting the UE bit in the CR1 register */
;;;417        USARTx->CR1 |= USART_CR1_UE;
;;;418      }
;;;419      else
;;;420      {
;;;421        /* Disable the selected USART by clearing the UE bit in the CR1 register */
;;;422        USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
000002  8981              LDRH     r1,[r0,#0xc]
000004  bf14              ITE      NE                    ;417
000006  f4415100          ORRNE    r1,r1,#0x2000         ;417
00000a  f4215100          BICEQ    r1,r1,#0x2000
00000e  8181              STRH     r1,[r0,#0xc]          ;417
;;;423      }
;;;424    }
000010  4770              BX       lr
;;;425    
                          ENDP


                          AREA ||i.USART_DMACmd||, CODE, READONLY, ALIGN=1

                  USART_DMACmd PROC
;;;1079     */
;;;1080   void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;1081   {
;;;1082     /* Check the parameters */
;;;1083     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1084     assert_param(IS_USART_DMAREQ(USART_DMAReq));  
;;;1085     assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;1086   
;;;1087     if (NewState != DISABLE)
;;;1088     {
;;;1089       /* Enable the DMA transfer for selected requests by setting the DMAT and/or
;;;1090          DMAR bits in the USART CR3 register */
;;;1091       USARTx->CR3 |= USART_DMAReq;
;;;1092     }
;;;1093     else
;;;1094     {
;;;1095       /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
;;;1096          DMAR bits in the USART CR3 register */
;;;1097       USARTx->CR3 &= (uint16_t)~USART_DMAReq;
000002  8a82              LDRH     r2,[r0,#0x14]
000004  bf14              ITE      NE                    ;1091
000006  4311              ORRNE    r1,r1,r2              ;1091
000008  ea220101          BICEQ    r1,r2,r1
00000c  8281              STRH     r1,[r0,#0x14]         ;1091
;;;1098     }
;;;1099   }
00000e  4770              BX       lr
;;;1100   
                          ENDP


                          AREA ||i.USART_DeInit||, CODE, READONLY, ALIGN=1

                  USART_DeInit PROC
;;;177      */
;;;178    void USART_DeInit(USART_TypeDef* USARTx)
000000  b510              PUSH     {r4,lr}
;;;179    {
;;;180      /* Check the parameters */
;;;181      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;182    
;;;183      if (USARTx == USART1)
000002  f1a04180          SUB      r1,r0,#0x40000000
000006  f5b13188          SUBS     r1,r1,#0x11000
00000a  d019              BEQ      |L7.64|
;;;184      {
;;;185        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
;;;186        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
;;;187      }
;;;188      else if (USARTx == USART2)
00000c  f511414c          ADDS     r1,r1,#0xcc00
000010  d020              BEQ      |L7.84|
;;;189      {
;;;190        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
;;;191        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
;;;192      }
;;;193      else if (USARTx == USART3)
000012  f5b16180          SUBS     r1,r1,#0x400
000016  d028              BEQ      |L7.106|
;;;194      {
;;;195        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
;;;196        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
;;;197      }    
;;;198      else if (USARTx == UART4)
000018  f5b16180          SUBS     r1,r1,#0x400
00001c  d030              BEQ      |L7.128|
;;;199      {
;;;200        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
;;;201        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
;;;202      }
;;;203      else if (USARTx == UART5)
00001e  f5b16180          SUBS     r1,r1,#0x400
000022  d038              BEQ      |L7.150|
;;;204      {
;;;205        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
;;;206        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
;;;207      }     
;;;208      else
;;;209      {
;;;210        if (USARTx == USART6)
000024  f5b14144          SUBS     r1,r1,#0xc400
;;;211        { 
;;;212          RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
;;;213          RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
;;;214        }
;;;215      }
;;;216    }
000028  bf18              IT       NE
00002a  bd10              POPNE    {r4,pc}
00002c  2101              MOVS     r1,#1                 ;212
00002e  2020              MOVS     r0,#0x20              ;212
000030  f7fffffe          BL       RCC_APB2PeriphResetCmd
000034  2100              MOVS     r1,#0                 ;213
000036  e8bd4010          POP      {r4,lr}               ;213
00003a  2020              MOVS     r0,#0x20              ;213
00003c  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L7.64|
000040  2101              MOVS     r1,#1                 ;185
000042  2010              MOVS     r0,#0x10              ;185
000044  f7fffffe          BL       RCC_APB2PeriphResetCmd
000048  2100              MOVS     r1,#0                 ;186
00004a  e8bd4010          POP      {r4,lr}               ;186
00004e  2010              MOVS     r0,#0x10              ;186
000050  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L7.84|
000054  2101              MOVS     r1,#1                 ;190
000056  0448              LSLS     r0,r1,#17             ;190
000058  f7fffffe          BL       RCC_APB1PeriphResetCmd
00005c  e8bd4010          POP      {r4,lr}               ;191
000060  2100              MOVS     r1,#0                 ;191
000062  f44f3000          MOV      r0,#0x20000           ;191
000066  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L7.106|
00006a  2101              MOVS     r1,#1                 ;195
00006c  0488              LSLS     r0,r1,#18             ;195
00006e  f7fffffe          BL       RCC_APB1PeriphResetCmd
000072  e8bd4010          POP      {r4,lr}               ;196
000076  2100              MOVS     r1,#0                 ;196
000078  f44f2080          MOV      r0,#0x40000           ;196
00007c  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L7.128|
000080  2101              MOVS     r1,#1                 ;200
000082  04c8              LSLS     r0,r1,#19             ;200
000084  f7fffffe          BL       RCC_APB1PeriphResetCmd
000088  e8bd4010          POP      {r4,lr}               ;201
00008c  2100              MOVS     r1,#0                 ;201
00008e  f44f2000          MOV      r0,#0x80000           ;201
000092  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L7.150|
000096  2101              MOVS     r1,#1                 ;205
000098  0508              LSLS     r0,r1,#20             ;205
00009a  f7fffffe          BL       RCC_APB1PeriphResetCmd
00009e  e8bd4010          POP      {r4,lr}               ;206
0000a2  2100              MOVS     r1,#0                 ;206
0000a4  f44f1080          MOV      r0,#0x100000          ;206
0000a8  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;217    
                          ENDP


                          AREA ||i.USART_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  USART_GetFlagStatus PROC
;;;1271     */
;;;1272   FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
000000  4602              MOV      r2,r0
;;;1273   {
;;;1274     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1275     /* Check the parameters */
;;;1276     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1277     assert_param(IS_USART_FLAG(USART_FLAG));
;;;1278   
;;;1279     /* The CTS flag is not available for UART4 and UART5 */
;;;1280     if (USART_FLAG == USART_FLAG_CTS)
;;;1281     {
;;;1282       assert_param(IS_USART_1236_PERIPH(USARTx));
;;;1283     } 
;;;1284       
;;;1285     if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
000004  8812              LDRH     r2,[r2,#0]
000006  420a              TST      r2,r1
;;;1286     {
;;;1287       bitstatus = SET;
000008  bf18              IT       NE
00000a  2001              MOVNE    r0,#1
;;;1288     }
;;;1289     else
;;;1290     {
;;;1291       bitstatus = RESET;
;;;1292     }
;;;1293     return bitstatus;
;;;1294   }
00000c  4770              BX       lr
;;;1295   
                          ENDP


                          AREA ||i.USART_GetITStatus||, CODE, READONLY, ALIGN=1

                  USART_GetITStatus PROC
;;;1354     */
;;;1355   ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
000000  b410              PUSH     {r4}
;;;1356   {
;;;1357     uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
;;;1358     ITStatus bitstatus = RESET;
;;;1359     /* Check the parameters */
;;;1360     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1361     assert_param(IS_USART_GET_IT(USART_IT)); 
;;;1362   
;;;1363     /* The CTS interrupt is not available for UART4 and UART5 */ 
;;;1364     if (USART_IT == USART_IT_CTS)
;;;1365     {
;;;1366       assert_param(IS_USART_1236_PERIPH(USARTx));
;;;1367     } 
;;;1368       
;;;1369     /* Get the USART register index */
;;;1370     usartreg = (((uint8_t)USART_IT) >> 0x05);
;;;1371     /* Get the interrupt position */
;;;1372     itmask = USART_IT & IT_MASK;
000002  f001021f          AND      r2,r1,#0x1f
;;;1373     itmask = (uint32_t)0x01 << itmask;
000006  2401              MOVS     r4,#1
000008  2300              MOVS     r3,#0                 ;1358
00000a  f3c11c42          UBFX     r12,r1,#5,#3          ;1370
00000e  fa04f202          LSL      r2,r4,r2
;;;1374     
;;;1375     if (usartreg == 0x01) /* The IT  is in CR1 register */
000012  f1bc0f01          CMP      r12,#1
;;;1376     {
;;;1377       itmask &= USARTx->CR1;
000016  bf04              ITT      EQ
000018  f8b0c00c          LDRHEQ   r12,[r0,#0xc]
00001c  ea0c0202          ANDEQ    r2,r12,r2
000020  d008              BEQ      |L9.52|
;;;1378     }
;;;1379     else if (usartreg == 0x02) /* The IT  is in CR2 register */
000022  f1bc0f02          CMP      r12,#2
;;;1380     {
;;;1381       itmask &= USARTx->CR2;
000026  bf0c              ITE      EQ
000028  f8b0c010          LDRHEQ   r12,[r0,#0x10]
;;;1382     }
;;;1383     else /* The IT  is in CR3 register */
;;;1384     {
;;;1385       itmask &= USARTx->CR3;
00002c  f8b0c014          LDRHNE   r12,[r0,#0x14]
000030  ea0c0202          AND      r2,r12,r2             ;1381
                  |L9.52|
;;;1386     }
;;;1387     
;;;1388     bitpos = USART_IT >> 0x08;
000034  0a09              LSRS     r1,r1,#8
;;;1389     bitpos = (uint32_t)0x01 << bitpos;
;;;1390     bitpos &= USARTx->SR;
000036  8800              LDRH     r0,[r0,#0]
000038  fa04f101          LSL      r1,r4,r1              ;1389
00003c  4008              ANDS     r0,r0,r1
;;;1391     if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
00003e  2a00              CMP      r2,#0
000040  bf1c              ITT      NE
000042  2800              CMPNE    r0,#0
;;;1392     {
;;;1393       bitstatus = SET;
000044  2301              MOVNE    r3,#1
;;;1394     }
;;;1395     else
;;;1396     {
;;;1397       bitstatus = RESET;
;;;1398     }
;;;1399     
;;;1400     return bitstatus;  
000046  4618              MOV      r0,r3
;;;1401   }
000048  bc10              POP      {r4}
00004a  4770              BX       lr
;;;1402   
                          ENDP


                          AREA ||i.USART_HalfDuplexCmd||, CODE, READONLY, ALIGN=1

                  USART_HalfDuplexCmd PROC
;;;815      */
;;;816    void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;817    {
;;;818      /* Check the parameters */
;;;819      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;820      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;821      
;;;822      if (NewState != DISABLE)
;;;823      {
;;;824        /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
;;;825        USARTx->CR3 |= USART_CR3_HDSEL;
;;;826      }
;;;827      else
;;;828      {
;;;829        /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
;;;830        USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
000002  8a81              LDRH     r1,[r0,#0x14]
000004  bf14              ITE      NE                    ;825
000006  f0410108          ORRNE    r1,r1,#8              ;825
00000a  f0210108          BICEQ    r1,r1,#8
00000e  8281              STRH     r1,[r0,#0x14]         ;825
;;;831      }
;;;832    }
000010  4770              BX       lr
;;;833    
                          ENDP


                          AREA ||i.USART_ITConfig||, CODE, READONLY, ALIGN=1

                  USART_ITConfig PROC
;;;1207     */
;;;1208   void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
000000  f3c11342          UBFX     r3,r1,#5,#3
;;;1209   {
;;;1210     uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
;;;1211     uint32_t usartxbase = 0x00;
;;;1212     /* Check the parameters */
;;;1213     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1214     assert_param(IS_USART_CONFIG_IT(USART_IT));
;;;1215     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1216   
;;;1217     /* The CTS interrupt is not available for UART4 and UART5 */
;;;1218     if (USART_IT == USART_IT_CTS)
;;;1219     {
;;;1220       assert_param(IS_USART_1236_PERIPH(USARTx));
;;;1221     } 
;;;1222       
;;;1223     usartxbase = (uint32_t)USARTx;
;;;1224   
;;;1225     /* Get the USART register index */
;;;1226     usartreg = (((uint8_t)USART_IT) >> 0x05);
;;;1227   
;;;1228     /* Get the interrupt position */
;;;1229     itpos = USART_IT & IT_MASK;
000004  f001011f          AND      r1,r1,#0x1f
;;;1230     itmask = (((uint32_t)0x01) << itpos);
000008  f04f0c01          MOV      r12,#1
00000c  fa0cf101          LSL      r1,r12,r1
;;;1231       
;;;1232     if (usartreg == 0x01) /* The IT is in CR1 register */
000010  2b01              CMP      r3,#1
000012  bf08              IT       EQ
000014  300c              ADDEQ    r0,r0,#0xc
000016  d003              BEQ      |L11.32|
;;;1233     {
;;;1234       usartxbase += 0x0C;
;;;1235     }
;;;1236     else if (usartreg == 0x02) /* The IT is in CR2 register */
000018  2b02              CMP      r3,#2
00001a  bf0c              ITE      EQ
00001c  3010              ADDEQ    r0,r0,#0x10
00001e  3014              ADDNE    r0,r0,#0x14
                  |L11.32|
;;;1237     {
;;;1238       usartxbase += 0x10;
;;;1239     }
;;;1240     else /* The IT is in CR3 register */
;;;1241     {
;;;1242       usartxbase += 0x14; 
;;;1243     }
;;;1244     if (NewState != DISABLE)
000020  2a00              CMP      r2,#0
;;;1245     {
;;;1246       *(__IO uint32_t*)usartxbase  |= itmask;
;;;1247     }
;;;1248     else
;;;1249     {
;;;1250       *(__IO uint32_t*)usartxbase &= ~itmask;
000022  6802              LDR      r2,[r0,#0]
000024  bf14              ITE      NE                    ;1246
000026  4311              ORRNE    r1,r1,r2              ;1246
000028  ea220101          BICEQ    r1,r2,r1
00002c  6001              STR      r1,[r0,#0]            ;1246
;;;1251     }
;;;1252   }
00002e  4770              BX       lr
;;;1253   
                          ENDP


                          AREA ||i.USART_Init||, CODE, READONLY, ALIGN=2

                  USART_Init PROC
;;;226      */
;;;227    void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;228    {
000002  4604              MOV      r4,r0
;;;229      uint32_t tmpreg = 0x00, apbclock = 0x00;
;;;230      uint32_t integerdivider = 0x00;
;;;231      uint32_t fractionaldivider = 0x00;
;;;232      RCC_ClocksTypeDef RCC_ClocksStatus;
;;;233    
;;;234      /* Check the parameters */
;;;235      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;236      assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
;;;237      assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
;;;238      assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
;;;239      assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
;;;240      assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
;;;241      assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
;;;242    
;;;243      /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
;;;244      if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
;;;245      {
;;;246        assert_param(IS_USART_1236_PERIPH(USARTx));
;;;247      }
;;;248    
;;;249    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;250      tmpreg = USARTx->CR2;
000004  8a00              LDRH     r0,[r0,#0x10]
000006  b085              SUB      sp,sp,#0x14           ;228
000008  460d              MOV      r5,r1                 ;228
;;;251    
;;;252      /* Clear STOP[13:12] bits */
;;;253      tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
;;;254    
;;;255      /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
;;;256          Set STOP[13:12] bits according to USART_StopBits value */
;;;257      tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
00000a  88c9              LDRH     r1,[r1,#6]
00000c  f4205040          BIC      r0,r0,#0x3000         ;253
000010  4308              ORRS     r0,r0,r1
;;;258      
;;;259      /* Write to USART CR2 */
;;;260      USARTx->CR2 = (uint16_t)tmpreg;
000012  8220              STRH     r0,[r4,#0x10]
;;;261    
;;;262    /*---------------------------- USART CR1 Configuration -----------------------*/
;;;263      tmpreg = USARTx->CR1;
000014  89a0              LDRH     r0,[r4,#0xc]
;;;264    
;;;265      /* Clear M, PCE, PS, TE and RE bits */
;;;266      tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
;;;267    
;;;268      /* Configure the USART Word Length, Parity and mode: 
;;;269         Set the M bits according to USART_WordLength value 
;;;270         Set PCE and PS bits according to USART_Parity value
;;;271         Set TE and RE bits according to USART_Mode value */
;;;272      tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
000016  88a9              LDRH     r1,[r5,#4]
000018  892a              LDRH     r2,[r5,#8]
00001a  f4207003          BIC      r0,r0,#0x20c          ;266
00001e  4311              ORRS     r1,r1,r2
000020  896a              LDRH     r2,[r5,#0xa]
000022  f42050a0          BIC      r0,r0,#0x1400         ;266
000026  4310              ORRS     r0,r0,r2
000028  4308              ORRS     r0,r0,r1
;;;273                USART_InitStruct->USART_Mode;
;;;274    
;;;275      /* Write to USART CR1 */
;;;276      USARTx->CR1 = (uint16_t)tmpreg;
00002a  81a0              STRH     r0,[r4,#0xc]
;;;277    
;;;278    /*---------------------------- USART CR3 Configuration -----------------------*/  
;;;279      tmpreg = USARTx->CR3;
00002c  8aa0              LDRH     r0,[r4,#0x14]
;;;280    
;;;281      /* Clear CTSE and RTSE bits */
;;;282      tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
;;;283    
;;;284      /* Configure the USART HFC : 
;;;285          Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
;;;286      tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
00002e  89a9              LDRH     r1,[r5,#0xc]
000030  f4207040          BIC      r0,r0,#0x300          ;282
000034  4308              ORRS     r0,r0,r1
;;;287    
;;;288      /* Write to USART CR3 */
;;;289      USARTx->CR3 = (uint16_t)tmpreg;
000036  82a0              STRH     r0,[r4,#0x14]
;;;290    
;;;291    /*---------------------------- USART BRR Configuration -----------------------*/
;;;292      /* Configure the USART Baud Rate */
;;;293      RCC_GetClocksFreq(&RCC_ClocksStatus);
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       RCC_GetClocksFreq
;;;294    
;;;295      if ((USARTx == USART1) || (USARTx == USART6))
00003e  f1a44080          SUB      r0,r4,#0x40000000
000042  f5b03088          SUBS     r0,r0,#0x11000
000046  bf1b              ITTET    NE
000048  f1a44080          SUBNE    r0,r4,#0x40000000
00004c  f5b0308a          SUBSNE   r0,r0,#0x11400
;;;296      {
;;;297        apbclock = RCC_ClocksStatus.PCLK2_Frequency;
000050  9803              LDREQ    r0,[sp,#0xc]
;;;298      }
;;;299      else
;;;300      {
;;;301        apbclock = RCC_ClocksStatus.PCLK1_Frequency;
000052  9802              LDRNE    r0,[sp,#8]
;;;302      }
;;;303      
;;;304      /* Determine the integer part */
;;;305      if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
000054  89a1              LDRH     r1,[r4,#0xc]
000056  f4114f00          TST      r1,#0x8000
;;;306      {
;;;307        /* Integer part computing in case Oversampling mode is 8 Samples */
;;;308        integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
;;;309      }
;;;310      else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
;;;311      {
;;;312        /* Integer part computing in case Oversampling mode is 16 Samples */
;;;313        integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
00005a  eb0001c0          ADD      r1,r0,r0,LSL #3
00005e  eb011000          ADD      r0,r1,r0,LSL #4
000062  6829              LDR      r1,[r5,#0]
000064  bf14              ITE      NE                    ;308
000066  0049              LSLNE    r1,r1,#1              ;308
000068  0089              LSLEQ    r1,r1,#2
00006a  fbb0f0f1          UDIV     r0,r0,r1
;;;314      }
;;;315      tmpreg = (integerdivider / 100) << 4;
00006e  4a11              LDR      r2,|L12.180|
;;;316    
;;;317      /* Determine the fractional part */
;;;318      fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
000070  f06f0c18          MVN      r12,#0x18
000074  fba23100          UMULL    r3,r1,r2,r0           ;315
000078  0949              LSRS     r1,r1,#5              ;315
00007a  0109              LSLS     r1,r1,#4              ;315
00007c  090b              LSRS     r3,r1,#4
00007e  fb03f30c          MUL      r3,r3,r12
000082  eb000083          ADD      r0,r0,r3,LSL #2
;;;319    
;;;320      /* Implement the fractional part in the register */
;;;321      if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
000086  89a3              LDRH     r3,[r4,#0xc]
000088  f4134f00          TST      r3,#0x8000
;;;322      {
;;;323        tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
00008c  f04f0332          MOV      r3,#0x32
000090  bf14              ITE      NE
000092  eb0300c0          ADDNE    r0,r3,r0,LSL #3
;;;324      }
;;;325      else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
;;;326      {
;;;327        tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
000096  eb031000          ADDEQ    r0,r3,r0,LSL #4
00009a  fba22000          UMULL    r2,r0,r2,r0
00009e  ea4f1050          LSR      r0,r0,#5
0000a2  bf14              ITE      NE                    ;323
0000a4  f0000007          ANDNE    r0,r0,#7              ;323
0000a8  f000000f          ANDEQ    r0,r0,#0xf
0000ac  4308              ORRS     r0,r0,r1
;;;328      }
;;;329      
;;;330      /* Write to USART BRR register */
;;;331      USARTx->BRR = (uint16_t)tmpreg;
0000ae  8120              STRH     r0,[r4,#8]
;;;332    }
0000b0  b005              ADD      sp,sp,#0x14
0000b2  bd30              POP      {r4,r5,pc}
;;;333    
                          ENDP

                  |L12.180|
                          DCD      0x51eb851f

                          AREA ||i.USART_IrDACmd||, CODE, READONLY, ALIGN=1

                  USART_IrDACmd PROC
;;;1033     */
;;;1034   void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;1035   {
;;;1036     /* Check the parameters */
;;;1037     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1038     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1039       
;;;1040     if (NewState != DISABLE)
;;;1041     {
;;;1042       /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
;;;1043       USARTx->CR3 |= USART_CR3_IREN;
;;;1044     }
;;;1045     else
;;;1046     {
;;;1047       /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
;;;1048       USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
000002  8a81              LDRH     r1,[r0,#0x14]
000004  bf14              ITE      NE                    ;1043
000006  f0410102          ORRNE    r1,r1,#2              ;1043
00000a  f0210102          BICEQ    r1,r1,#2
00000e  8281              STRH     r1,[r0,#0x14]         ;1043
;;;1049     }
;;;1050   }
000010  4770              BX       lr
;;;1051   
                          ENDP


                          AREA ||i.USART_IrDAConfig||, CODE, READONLY, ALIGN=1

                  USART_IrDAConfig PROC
;;;1015     */
;;;1016   void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
000000  8a82              LDRH     r2,[r0,#0x14]
;;;1017   {
;;;1018     /* Check the parameters */
;;;1019     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1020     assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
;;;1021       
;;;1022     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
000002  f0220204          BIC      r2,r2,#4
000006  8282              STRH     r2,[r0,#0x14]
;;;1023     USARTx->CR3 |= USART_IrDAMode;
000008  8a82              LDRH     r2,[r0,#0x14]
00000a  4311              ORRS     r1,r1,r2
00000c  8281              STRH     r1,[r0,#0x14]
;;;1024   }
00000e  4770              BX       lr
;;;1025   
                          ENDP


                          AREA ||i.USART_LINBreakDetectLengthConfig||, CODE, READONLY, ALIGN=1

                  USART_LINBreakDetectLengthConfig PROC
;;;720      */
;;;721    void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
000000  8a02              LDRH     r2,[r0,#0x10]
;;;722    {
;;;723      /* Check the parameters */
;;;724      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;725      assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
;;;726      
;;;727      USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
000002  f0220220          BIC      r2,r2,#0x20
000006  8202              STRH     r2,[r0,#0x10]
;;;728      USARTx->CR2 |= USART_LINBreakDetectLength;  
000008  8a02              LDRH     r2,[r0,#0x10]
00000a  4311              ORRS     r1,r1,r2
00000c  8201              STRH     r1,[r0,#0x10]
;;;729    }
00000e  4770              BX       lr
;;;730    
                          ENDP


                          AREA ||i.USART_LINCmd||, CODE, READONLY, ALIGN=1

                  USART_LINCmd PROC
;;;738      */
;;;739    void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;740    {
;;;741      /* Check the parameters */
;;;742      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;743      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;744      
;;;745      if (NewState != DISABLE)
;;;746      {
;;;747        /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
;;;748        USARTx->CR2 |= USART_CR2_LINEN;
;;;749      }
;;;750      else
;;;751      {
;;;752        /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
;;;753        USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
000002  8a01              LDRH     r1,[r0,#0x10]
000004  bf14              ITE      NE                    ;748
000006  f4414180          ORRNE    r1,r1,#0x4000         ;748
00000a  f4214180          BICEQ    r1,r1,#0x4000
00000e  8201              STRH     r1,[r0,#0x10]         ;748
;;;754      }
;;;755    }
000010  4770              BX       lr
;;;756    
                          ENDP


                          AREA ||i.USART_OneBitMethodCmd||, CODE, READONLY, ALIGN=1

                  USART_OneBitMethodCmd PROC
;;;480      */
;;;481    void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;482    {
;;;483      /* Check the parameters */
;;;484      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;485      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;486      
;;;487      if (NewState != DISABLE)
;;;488      {
;;;489        /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
;;;490        USARTx->CR3 |= USART_CR3_ONEBIT;
;;;491      }
;;;492      else
;;;493      {
;;;494        /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
;;;495        USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
000002  8a81              LDRH     r1,[r0,#0x14]
000004  bf14              ITE      NE                    ;490
000006  f4416100          ORRNE    r1,r1,#0x800          ;490
00000a  f4216100          BICEQ    r1,r1,#0x800
00000e  8281              STRH     r1,[r0,#0x14]         ;490
;;;496      }
;;;497    }
000010  4770              BX       lr
;;;498    
                          ENDP


                          AREA ||i.USART_OverSampling8Cmd||, CODE, READONLY, ALIGN=1

                  USART_OverSampling8Cmd PROC
;;;454      */
;;;455    void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;456    {
;;;457      /* Check the parameters */
;;;458      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;459      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;460      
;;;461      if (NewState != DISABLE)
;;;462      {
;;;463        /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
;;;464        USARTx->CR1 |= USART_CR1_OVER8;
;;;465      }
;;;466      else
;;;467      {
;;;468        /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
;;;469        USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
000002  8981              LDRH     r1,[r0,#0xc]
000004  bf14              ITE      NE                    ;464
000006  f4414100          ORRNE    r1,r1,#0x8000         ;464
00000a  f3c1010e          UBFXEQ   r1,r1,#0,#15
00000e  8181              STRH     r1,[r0,#0xc]          ;464
;;;470      }
;;;471    }  
000010  4770              BX       lr
;;;472    
                          ENDP


                          AREA ||i.USART_ReceiveData||, CODE, READONLY, ALIGN=1

                  USART_ReceiveData PROC
;;;553      */
;;;554    uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
000000  8880              LDRH     r0,[r0,#4]
;;;555    {
;;;556      /* Check the parameters */
;;;557      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;558      
;;;559      /* Receive Data */
;;;560      return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
000002  f3c00008          UBFX     r0,r0,#0,#9
;;;561    }
000006  4770              BX       lr
;;;562    
                          ENDP


                          AREA ||i.USART_ReceiverWakeUpCmd||, CODE, READONLY, ALIGN=1

                  USART_ReceiverWakeUpCmd PROC
;;;624      */
;;;625    void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;626    {
;;;627      /* Check the parameters */
;;;628      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;629      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;630      
;;;631      if (NewState != DISABLE)
;;;632      {
;;;633        /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
;;;634        USARTx->CR1 |= USART_CR1_RWU;
;;;635      }
;;;636      else
;;;637      {
;;;638        /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
;;;639        USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
000002  8981              LDRH     r1,[r0,#0xc]
000004  bf14              ITE      NE                    ;634
000006  f0410102          ORRNE    r1,r1,#2              ;634
00000a  f0210102          BICEQ    r1,r1,#2
00000e  8181              STRH     r1,[r0,#0xc]          ;634
;;;640      }
;;;641    }
000010  4770              BX       lr
;;;642    /**
                          ENDP


                          AREA ||i.USART_SendBreak||, CODE, READONLY, ALIGN=1

                  USART_SendBreak PROC
;;;762      */
;;;763    void USART_SendBreak(USART_TypeDef* USARTx)
000000  8981              LDRH     r1,[r0,#0xc]
;;;764    {
;;;765      /* Check the parameters */
;;;766      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;767      
;;;768      /* Send break characters */
;;;769      USARTx->CR1 |= USART_CR1_SBK;
000002  f0410101          ORR      r1,r1,#1
000006  8181              STRH     r1,[r0,#0xc]
;;;770    }
000008  4770              BX       lr
;;;771    
                          ENDP


                          AREA ||i.USART_SendData||, CODE, READONLY, ALIGN=1

                  USART_SendData PROC
;;;537      */
;;;538    void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
000000  f3c10108          UBFX     r1,r1,#0,#9
;;;539    {
;;;540      /* Check the parameters */
;;;541      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;542      assert_param(IS_USART_DATA(Data)); 
;;;543        
;;;544      /* Transmit Data */
;;;545      USARTx->DR = (Data & (uint16_t)0x01FF);
000004  8081              STRH     r1,[r0,#4]
;;;546    }
000006  4770              BX       lr
;;;547    
                          ENDP


                          AREA ||i.USART_SetAddress||, CODE, READONLY, ALIGN=1

                  USART_SetAddress PROC
;;;604      */
;;;605    void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
000000  8a02              LDRH     r2,[r0,#0x10]
;;;606    {
;;;607      /* Check the parameters */
;;;608      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;609      assert_param(IS_USART_ADDRESS(USART_Address)); 
;;;610        
;;;611      /* Clear the USART address */
;;;612      USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
000002  f022020f          BIC      r2,r2,#0xf
000006  8202              STRH     r2,[r0,#0x10]
;;;613      /* Set the USART address node */
;;;614      USARTx->CR2 |= USART_Address;
000008  8a02              LDRH     r2,[r0,#0x10]
00000a  4311              ORRS     r1,r1,r2
00000c  8201              STRH     r1,[r0,#0x10]
;;;615    }
00000e  4770              BX       lr
;;;616    
                          ENDP


                          AREA ||i.USART_SetGuardTime||, CODE, READONLY, ALIGN=1

                  USART_SetGuardTime PROC
;;;900      */
;;;901    void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;902    {    
;;;903      /* Check the parameters */
;;;904      assert_param(IS_USART_1236_PERIPH(USARTx));
;;;905      
;;;906      /* Clear the USART Guard time */
;;;907      USARTx->GTPR &= USART_GTPR_PSC;
000002  b2d2              UXTB     r2,r2
000004  8302              STRH     r2,[r0,#0x18]
;;;908      /* Set the USART guard time */
;;;909      USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
000006  8b02              LDRH     r2,[r0,#0x18]
000008  ea422101          ORR      r1,r2,r1,LSL #8
00000c  8301              STRH     r1,[r0,#0x18]
;;;910    }
00000e  4770              BX       lr
;;;911    
                          ENDP


                          AREA ||i.USART_SetPrescaler||, CODE, READONLY, ALIGN=1

                  USART_SetPrescaler PROC
;;;433      */
;;;434    void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;435    { 
;;;436      /* Check the parameters */
;;;437      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;438      
;;;439      /* Clear the USART prescaler */
;;;440      USARTx->GTPR &= USART_GTPR_GT;
000002  f402427f          AND      r2,r2,#0xff00
000006  8302              STRH     r2,[r0,#0x18]
;;;441      /* Set the USART prescaler */
;;;442      USARTx->GTPR |= USART_Prescaler;
000008  8b02              LDRH     r2,[r0,#0x18]
00000a  4311              ORRS     r1,r1,r2
00000c  8301              STRH     r1,[r0,#0x18]
;;;443    }
00000e  4770              BX       lr
;;;444    
                          ENDP


                          AREA ||i.USART_SmartCardCmd||, CODE, READONLY, ALIGN=1

                  USART_SmartCardCmd PROC
;;;919      */
;;;920    void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;921    {
;;;922      /* Check the parameters */
;;;923      assert_param(IS_USART_1236_PERIPH(USARTx));
;;;924      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;925      if (NewState != DISABLE)
;;;926      {
;;;927        /* Enable the SC mode by setting the SCEN bit in the CR3 register */
;;;928        USARTx->CR3 |= USART_CR3_SCEN;
;;;929      }
;;;930      else
;;;931      {
;;;932        /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
;;;933        USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
000002  8a81              LDRH     r1,[r0,#0x14]
000004  bf14              ITE      NE                    ;928
000006  f0410120          ORRNE    r1,r1,#0x20           ;928
00000a  f0210120          BICEQ    r1,r1,#0x20
00000e  8281              STRH     r1,[r0,#0x14]         ;928
;;;934      }
;;;935    }
000010  4770              BX       lr
;;;936    
                          ENDP


                          AREA ||i.USART_SmartCardNACKCmd||, CODE, READONLY, ALIGN=1

                  USART_SmartCardNACKCmd PROC
;;;944      */
;;;945    void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;946    {
;;;947      /* Check the parameters */
;;;948      assert_param(IS_USART_1236_PERIPH(USARTx)); 
;;;949      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;950      if (NewState != DISABLE)
;;;951      {
;;;952        /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
;;;953        USARTx->CR3 |= USART_CR3_NACK;
;;;954      }
;;;955      else
;;;956      {
;;;957        /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
;;;958        USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
000002  8a81              LDRH     r1,[r0,#0x14]
000004  bf14              ITE      NE                    ;953
000006  f0410110          ORRNE    r1,r1,#0x10           ;953
00000a  f0210110          BICEQ    r1,r1,#0x10
00000e  8281              STRH     r1,[r0,#0x14]         ;953
;;;959      }
;;;960    }
000010  4770              BX       lr
;;;961    
                          ENDP


                          AREA ||i.USART_StructInit||, CODE, READONLY, ALIGN=1

                  USART_StructInit PROC
;;;339      */
;;;340    void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
000000  f44f5116          MOV      r1,#0x2580
;;;341    {
;;;342      /* USART_InitStruct members default value */
;;;343      USART_InitStruct->USART_BaudRate = 9600;
;;;344      USART_InitStruct->USART_WordLength = USART_WordLength_8b;
000004  6001              STR      r1,[r0,#0]
000006  2100              MOVS     r1,#0
000008  8081              STRH     r1,[r0,#4]
;;;345      USART_InitStruct->USART_StopBits = USART_StopBits_1;
00000a  80c1              STRH     r1,[r0,#6]
;;;346      USART_InitStruct->USART_Parity = USART_Parity_No ;
00000c  8101              STRH     r1,[r0,#8]
;;;347      USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00000e  220c              MOVS     r2,#0xc
000010  8142              STRH     r2,[r0,#0xa]
;;;348      USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
000012  8181              STRH     r1,[r0,#0xc]
;;;349    }
000014  4770              BX       lr
;;;350    
                          ENDP


                          AREA ||i.USART_WakeUpConfig||, CODE, READONLY, ALIGN=1

                  USART_WakeUpConfig PROC
;;;651      */
;;;652    void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
000000  8982              LDRH     r2,[r0,#0xc]
;;;653    {
;;;654      /* Check the parameters */
;;;655      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;656      assert_param(IS_USART_WAKEUP(USART_WakeUp));
;;;657      
;;;658      USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
000002  f4226200          BIC      r2,r2,#0x800
000006  8182              STRH     r2,[r0,#0xc]
;;;659      USARTx->CR1 |= USART_WakeUp;
000008  8982              LDRH     r2,[r0,#0xc]
00000a  4311              ORRS     r1,r1,r2
00000c  8181              STRH     r1,[r0,#0xc]
;;;660    }
00000e  4770              BX       lr
;;;661    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_usart.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f4xx_usart_c_9565154b____REV16|
#line 114 "..\\..\\..\\M0P0_Library\\STM32F4xx_StdPeriph_Driver\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_stm32f4xx_usart_c_9565154b____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f4xx_usart_c_9565154b____REVSH|
#line 128
|__asm___17_stm32f4xx_usart_c_9565154b____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
