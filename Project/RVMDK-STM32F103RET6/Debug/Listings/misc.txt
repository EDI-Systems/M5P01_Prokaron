; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\misc.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\misc.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32F10x_StdPeriph_Lib_V3.3.0\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\M0P0_Library\STM32F10x_StdPeriph_Lib_V3.3.0\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\..\M0P0_Library\STM32F10x_StdPeriph_Lib_V3.3.0\Libraries\CMSIS -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F103RET6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --enum_is_int --signed_chars --omf_browse=.\debug\output\misc.crf ..\..\..\M0P0_Library\STM32F10x_StdPeriph_Lib_V3.3.0\Libraries\STM32F10x_StdPeriph_Driver\src\misc.c]
                          THUMB

                          AREA ||i.NVIC_Init||, CODE, READONLY, ALIGN=2

                  NVIC_Init PROC
;;;110      */
;;;111    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000000  b410              PUSH     {r4}
;;;112    {
;;;113      uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
;;;114      
;;;115      /* Check the parameters */
;;;116      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;117      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;118      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;119        
;;;120      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
;;;121      {
;;;122        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;123        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
;;;124        tmppre = (0x4 - tmppriority);
;;;125        tmpsub = tmpsub >> tmppriority;
;;;126    
;;;127        tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
;;;128        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
;;;129        tmppriority = tmppriority << 0x04;
;;;130            
;;;131        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
000002  7801              LDRB     r1,[r0,#0]
000004  6842              LDR      r2,[r0,#4]            ;112
000006  f04f0c0f          MOV      r12,#0xf              ;113
;;;132        
;;;133        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;134        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
00000a  2301              MOVS     r3,#1
00000c  b322              CBZ      r2,|L1.88|
00000e  4a18              LDR      r2,|L1.112|
000010  6812              LDR      r2,[r2,#0]            ;123
000012  f10121e0          ADD      r1,r1,#0xe000e000     ;129
000016  f40262e0          AND      r2,r2,#0x700          ;123
00001a  f5c262e0          RSB      r2,r2,#0x700          ;123
00001e  0a12              LSRS     r2,r2,#8              ;123
000020  f1c20404          RSB      r4,r2,#4              ;124
000024  fa2cf202          LSR      r2,r12,r2             ;125
000028  f890c001          LDRB     r12,[r0,#1]           ;127
00002c  fa0cfc04          LSL      r12,r12,r4            ;127
000030  7884              LDRB     r4,[r0,#2]            ;128
000032  4022              ANDS     r2,r2,r4              ;128
000034  ea42020c          ORR      r2,r2,r12             ;128
000038  0112              LSLS     r2,r2,#4              ;129
00003a  f8812400          STRB     r2,[r1,#0x400]        ;131
00003e  7800              LDRB     r0,[r0,#0]
000040  f000011f          AND      r1,r0,#0x1f
000044  fa03f101          LSL      r1,r3,r1
000048  0940              LSRS     r0,r0,#5
00004a  0080              LSLS     r0,r0,#2
00004c  f10020e0          ADD      r0,r0,#0xe000e000
000050  f8c01100          STR      r1,[r0,#0x100]
;;;135          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;136      }
;;;137      else
;;;138      {
;;;139        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;140        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
;;;141          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;142      }
;;;143    }
000054  bc10              POP      {r4}
000056  4770              BX       lr
                  |L1.88|
000058  f001001f          AND      r0,r1,#0x1f           ;140
00005c  fa03f000          LSL      r0,r3,r0              ;140
000060  0949              LSRS     r1,r1,#5              ;140
000062  0089              LSLS     r1,r1,#2              ;140
000064  f10121e0          ADD      r1,r1,#0xe000e000     ;140
000068  f8c10180          STR      r0,[r1,#0x180]        ;140
00006c  bc10              POP      {r4}
00006e  4770              BX       lr
;;;144    
                          ENDP

                  |L1.112|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_PriorityGroupConfig||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;94       */
;;;95     void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  4903              LDR      r1,|L2.16|
;;;96     {
;;;97       /* Check the parameters */
;;;98       assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;99       
;;;100      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;101      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000002  f04070fd          ORR      r0,r0,#0x1fa0000
000006  f0406080          ORR      r0,r0,#0x4000000
00000a  6008              STR      r0,[r1,#0]
;;;102    }
00000c  4770              BX       lr
;;;103    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_SetVectorTable||, CODE, READONLY, ALIGN=2

                  NVIC_SetVectorTable PROC
;;;153      */
;;;154    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
000000  f021017f          BIC      r1,r1,#0x7f
;;;155    { 
;;;156      /* Check the parameters */
;;;157      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;158      assert_param(IS_NVIC_OFFSET(Offset));  
;;;159       
;;;160      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
000004  f0214160          BIC      r1,r1,#0xe0000000
000008  4308              ORRS     r0,r0,r1
00000a  4901              LDR      r1,|L3.16|
00000c  6008              STR      r0,[r1,#0]
;;;161    }
00000e  4770              BX       lr
;;;162    
                          ENDP

                  |L3.16|
                          DCD      0xe000ed08

                          AREA ||i.NVIC_SystemLPConfig||, CODE, READONLY, ALIGN=2

                  NVIC_SystemLPConfig PROC
;;;172      */
;;;173    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
000000  4a04              LDR      r2,|L4.20|
;;;174    {
;;;175      /* Check the parameters */
;;;176      assert_param(IS_NVIC_LP(LowPowerMode));
;;;177      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;178      
;;;179      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;180      {
;;;181        SCB->SCR |= LowPowerMode;
;;;182      }
;;;183      else
;;;184      {
;;;185        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;181
000008  4308              ORRNE    r0,r0,r1              ;181
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;181
;;;186      }
;;;187    }
000010  4770              BX       lr
;;;188    
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0xe000ed10

                          AREA ||i.SysTick_CLKSourceConfig||, CODE, READONLY, ALIGN=1

                  SysTick_CLKSourceConfig PROC
;;;196      */
;;;197    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;198    {
;;;199      /* Check the parameters */
;;;200      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;201      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
000004  2804              CMP      r0,#4
;;;202      {
;;;203        SysTick->CTRL |= SysTick_CLKSource_HCLK;
;;;204      }
;;;205      else
;;;206      {
;;;207        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
000006  6908              LDR      r0,[r1,#0x10]
000008  bf0c              ITE      EQ                    ;203
00000a  f0400004          ORREQ    r0,r0,#4              ;203
00000e  f0200004          BICNE    r0,r0,#4
000012  6108              STR      r0,[r1,#0x10]         ;203
;;;208      }
;;;209    }
000014  4770              BX       lr
;;;210    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32F10x_StdPeriph_Lib_V3.3.0\\Libraries\\STM32F10x_StdPeriph_Driver\\src\\misc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_misc_c_d0fc1254____REV16|
#line 464 "D:\\Program_Files_x86\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_misc_c_d0fc1254____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_misc_c_d0fc1254____REVSH|
#line 479
|__asm___6_misc_c_d0fc1254____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_misc_c_d0fc1254____RRX|
#line 666
|__asm___6_misc_c_d0fc1254____RRX| PROC
#line 667

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
