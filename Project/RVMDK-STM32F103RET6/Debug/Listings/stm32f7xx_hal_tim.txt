; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f7xx_hal_tim.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f7xx_hal_tim.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Core -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f7xx_hal_tim.crf ..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_tim.c]
                          THUMB

                          AREA ||i.HAL_TIM_Base_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_DeInit PROC
;;;237      */
;;;238    HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;239    {  
000002  4604              MOV      r4,r0
;;;240      /* Check the parameters */
;;;241      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;242    
;;;243      htim->State = HAL_TIM_STATE_BUSY;
;;;244       
;;;245      /* Disable the TIM Peripheral Clock */
;;;246      __HAL_TIM_DISABLE(htim);
000004  f2411111          MOV      r1,#0x1111
000008  2002              MOVS     r0,#2                 ;243
00000a  63e0              STR      r0,[r4,#0x3c]         ;243
00000c  6820              LDR      r0,[r4,#0]
00000e  6a02              LDR      r2,[r0,#0x20]
000010  420a              TST      r2,r1
000012  d108              BNE      |L1.38|
000014  6a01              LDR      r1,[r0,#0x20]
000016  f2404244          MOV      r2,#0x444
00001a  4211              TST      r1,r2
00001c  d103              BNE      |L1.38|
00001e  6801              LDR      r1,[r0,#0]
000020  f0210101          BIC      r1,r1,#1
000024  6001              STR      r1,[r0,#0]
                  |L1.38|
;;;247        
;;;248      /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;249      HAL_TIM_Base_MspDeInit(htim);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       HAL_TIM_Base_MspDeInit
;;;250      
;;;251      /* Change TIM state */  
;;;252      htim->State = HAL_TIM_STATE_RESET; 
00002c  2000              MOVS     r0,#0
00002e  63e0              STR      r0,[r4,#0x3c]
;;;253      
;;;254      /* Release Lock */
;;;255      __HAL_UNLOCK(htim);
000030  63a0              STR      r0,[r4,#0x38]
;;;256    
;;;257      return HAL_OK;
;;;258    }
000032  bd10              POP      {r4,pc}
;;;259    
                          ENDP


                          AREA ||i.HAL_TIM_Base_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_GetState PROC
;;;4536     */
;;;4537   HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
000000  6bc0              LDR      r0,[r0,#0x3c]
;;;4538   {
;;;4539     return htim->State;
;;;4540   }
000002  4770              BX       lr
;;;4541   
                          ENDP


                          AREA ||i.HAL_TIM_Base_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_Init PROC
;;;200      */
;;;201    HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
000000  2800              CMP      r0,#0
;;;202    { 
;;;203      /* Check the TIM handle allocation */
;;;204      if(htim == NULL)
;;;205      {
;;;206        return HAL_ERROR;
000002  bf04              ITT      EQ
000004  2001              MOVEQ    r0,#1
;;;207      }
;;;208      
;;;209      /* Check the parameters */
;;;210      assert_param(IS_TIM_INSTANCE(htim->Instance)); 
;;;211      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;212      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;213      
;;;214      if(htim->State == HAL_TIM_STATE_RESET)
;;;215      {  
;;;216        /* Init the low level hardware : GPIO, CLOCK, NVIC */
;;;217        HAL_TIM_Base_MspInit(htim);
;;;218      }
;;;219      
;;;220      /* Set the TIM state */
;;;221      htim->State= HAL_TIM_STATE_BUSY;
;;;222      
;;;223      /* Set the Time Base configuration */
;;;224      TIM_Base_SetConfig(htim->Instance, &htim->Init); 
;;;225      
;;;226      /* Initialize the TIM state*/
;;;227      htim->State= HAL_TIM_STATE_READY;
;;;228      
;;;229      return HAL_OK;
;;;230    }
000006  4770              BXEQ     lr
000008  b510              PUSH     {r4,lr}               ;202
00000a  4604              MOV      r4,r0                 ;202
00000c  6bc0              LDR      r0,[r0,#0x3c]         ;214
00000e  2800              CMP      r0,#0                 ;214
000010  bf04              ITT      EQ                    ;217
000012  4620              MOVEQ    r0,r4                 ;217
000014  f7fffffe          BLEQ     HAL_TIM_Base_MspInit
000018  2002              MOVS     r0,#2                 ;221
00001a  63e0              STR      r0,[r4,#0x3c]         ;221
00001c  6820              LDR      r0,[r4,#0]            ;224
00001e  1d21              ADDS     r1,r4,#4              ;224
000020  f7fffffe          BL       TIM_Base_SetConfig
000024  2001              MOVS     r0,#1                 ;227
000026  63e0              STR      r0,[r4,#0x3c]         ;227
000028  2000              MOVS     r0,#0                 ;229
00002a  bd10              POP      {r4,pc}
;;;231    
                          ENDP


                          AREA ||i.HAL_TIM_Base_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_MspDeInit PROC
;;;281      */
;;;282    __weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;283    {
;;;284      /* Prevent unused argument(s) compilation warning */
;;;285      UNUSED(htim);
;;;286     
;;;287      /* NOTE : This function Should not be modified, when the callback is needed,
;;;288                the HAL_TIM_Base_MspDeInit could be implemented in the user file
;;;289       */
;;;290    }
;;;291    
                          ENDP


                          AREA ||i.HAL_TIM_Base_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_MspInit PROC
;;;265      */
;;;266    __weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;267    {
;;;268      /* Prevent unused argument(s) compilation warning */
;;;269      UNUSED(htim);
;;;270     
;;;271      /* NOTE : This function Should not be modified, when the callback is needed,
;;;272                the HAL_TIM_Base_MspInit could be implemented in the user file
;;;273       */
;;;274    }
;;;275    
                          ENDP


                          AREA ||i.HAL_TIM_Base_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_Start PROC
;;;297      */
;;;298    HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
000000  2102              MOVS     r1,#2
;;;299    {
;;;300      /* Check the parameters */
;;;301      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;302      
;;;303      /* Set the TIM state */
;;;304      htim->State= HAL_TIM_STATE_BUSY;
000002  63c1              STR      r1,[r0,#0x3c]
;;;305      
;;;306      /* Enable the Peripheral */
;;;307      __HAL_TIM_ENABLE(htim);
;;;308      
;;;309      /* Change the TIM state*/
;;;310      htim->State= HAL_TIM_STATE_READY;
000004  2201              MOVS     r2,#1
000006  6801              LDR      r1,[r0,#0]            ;307
000008  680b              LDR      r3,[r1,#0]            ;307
00000a  f0430301          ORR      r3,r3,#1              ;307
00000e  600b              STR      r3,[r1,#0]            ;307
000010  63c2              STR      r2,[r0,#0x3c]
;;;311      
;;;312      /* Return function status */
;;;313      return HAL_OK;
000012  2000              MOVS     r0,#0
;;;314    }
000014  4770              BX       lr
;;;315    
                          ENDP


                          AREA ||i.HAL_TIM_Base_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_Start_DMA PROC
;;;388      */
;;;389    HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
000000  b510              PUSH     {r4,lr}
;;;390    {
000002  4604              MOV      r4,r0
;;;391      /* Check the parameters */
;;;392      assert_param(IS_TIM_DMA_INSTANCE(htim->Instance)); 
;;;393      
;;;394      if((htim->State == HAL_TIM_STATE_BUSY))
000004  6bc0              LDR      r0,[r0,#0x3c]
000006  2802              CMP      r0,#2
;;;395      {
;;;396         return HAL_BUSY;
;;;397      }
;;;398      else if((htim->State == HAL_TIM_STATE_READY))
;;;399      {
;;;400        if((pData == 0 ) && (Length > 0)) 
;;;401        {
;;;402          return HAL_ERROR;                                    
;;;403        }
;;;404        else
;;;405        {
;;;406          htim->State = HAL_TIM_STATE_BUSY;
;;;407        }
;;;408      }  
;;;409      /* Set the DMA Period elapsed callback */
;;;410      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
;;;411         
;;;412      /* Set the DMA error callback */
;;;413      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = HAL_TIM_DMAError ;
;;;414      
;;;415      /* Enable the DMA Stream */
;;;416      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length);
;;;417      
;;;418      /* Enable the TIM Update DMA request */
;;;419      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
;;;420    
;;;421      /* Enable the Peripheral */
;;;422      __HAL_TIM_ENABLE(htim);  
;;;423      
;;;424      /* Return function status */
;;;425      return HAL_OK;
;;;426    }
000008  bf08              IT       EQ
00000a  bd10              POPEQ    {r4,pc}
00000c  6be0              LDR      r0,[r4,#0x3c]         ;398
00000e  2801              CMP      r0,#1                 ;398
000010  d106              BNE      |L7.32|
000012  b919              CBNZ     r1,|L7.28|
000014  2a00              CMP      r2,#0                 ;400
000016  bf1c              ITT      NE                    ;402
000018  2001              MOVNE    r0,#1                 ;402
00001a  bd10              POPNE    {r4,pc}
                  |L7.28|
00001c  2002              MOVS     r0,#2                 ;406
00001e  63e0              STR      r0,[r4,#0x3c]         ;406
                  |L7.32|
000020  69e3              LDR      r3,[r4,#0x1c]         ;410
000022  480c              LDR      r0,|L7.84|
000024  6418              STR      r0,[r3,#0x40]         ;413
000026  69e3              LDR      r3,[r4,#0x1c]         ;413
000028  480b              LDR      r0,|L7.88|
00002a  6518              STR      r0,[r3,#0x50]         ;416
00002c  6823              LDR      r3,[r4,#0]            ;416
00002e  69e0              LDR      r0,[r4,#0x1c]         ;416
000030  f1030c2c          ADD      r12,r3,#0x2c          ;416
000034  4613              MOV      r3,r2                 ;416
000036  4662              MOV      r2,r12                ;416
000038  f7fffffe          BL       HAL_DMA_Start_IT
00003c  6820              LDR      r0,[r4,#0]            ;419
00003e  68c1              LDR      r1,[r0,#0xc]          ;419
000040  f4417180          ORR      r1,r1,#0x100          ;419
000044  60c1              STR      r1,[r0,#0xc]          ;419
000046  6820              LDR      r0,[r4,#0]            ;422
000048  6801              LDR      r1,[r0,#0]            ;422
00004a  f0410101          ORR      r1,r1,#1              ;422
00004e  6001              STR      r1,[r0,#0]            ;422
000050  2000              MOVS     r0,#0                 ;425
000052  bd10              POP      {r4,pc}
;;;427    
                          ENDP

                  |L7.84|
                          DCD      TIM_DMAPeriodElapsedCplt
                  |L7.88|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIM_Base_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_Start_IT PROC
;;;345      */
;;;346    HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
000000  6801              LDR      r1,[r0,#0]
;;;347    {
;;;348      /* Check the parameters */
;;;349      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;350      
;;;351      /* Enable the TIM Update interrupt */
;;;352      __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
000002  68ca              LDR      r2,[r1,#0xc]
000004  f0420201          ORR      r2,r2,#1
000008  60ca              STR      r2,[r1,#0xc]
;;;353          
;;;354      /* Enable the Peripheral */
;;;355      __HAL_TIM_ENABLE(htim);
00000a  6800              LDR      r0,[r0,#0]
00000c  6801              LDR      r1,[r0,#0]
00000e  f0410101          ORR      r1,r1,#1
000012  6001              STR      r1,[r0,#0]
;;;356          
;;;357      /* Return function status */
;;;358      return HAL_OK;
000014  2000              MOVS     r0,#0
;;;359    }
000016  4770              BX       lr
;;;360    
                          ENDP


                          AREA ||i.HAL_TIM_Base_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_Stop PROC
;;;321      */
;;;322    HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
000000  2102              MOVS     r1,#2
;;;323    {
;;;324      /* Check the parameters */
;;;325      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;326      
;;;327      /* Set the TIM state */
;;;328      htim->State= HAL_TIM_STATE_BUSY;
;;;329      
;;;330      /* Disable the Peripheral */
;;;331      __HAL_TIM_DISABLE(htim);
000002  f2411211          MOV      r2,#0x1111
000006  63c1              STR      r1,[r0,#0x3c]         ;328
000008  6801              LDR      r1,[r0,#0]
00000a  6a0b              LDR      r3,[r1,#0x20]
00000c  4213              TST      r3,r2
00000e  d108              BNE      |L9.34|
000010  6a0a              LDR      r2,[r1,#0x20]
000012  f2404344          MOV      r3,#0x444
000016  421a              TST      r2,r3
000018  d103              BNE      |L9.34|
00001a  680a              LDR      r2,[r1,#0]
00001c  f0220201          BIC      r2,r2,#1
000020  600a              STR      r2,[r1,#0]
                  |L9.34|
;;;332      
;;;333      /* Change the TIM state*/
;;;334      htim->State= HAL_TIM_STATE_READY;
000022  2101              MOVS     r1,#1
000024  63c1              STR      r1,[r0,#0x3c]
;;;335      
;;;336      /* Return function status */
;;;337      return HAL_OK;
000026  2000              MOVS     r0,#0
;;;338    }
000028  4770              BX       lr
;;;339    
                          ENDP


                          AREA ||i.HAL_TIM_Base_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_Stop_DMA PROC
;;;433      */
;;;434    HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
000000  6801              LDR      r1,[r0,#0]
;;;435    {
;;;436      /* Check the parameters */
;;;437      assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));
;;;438      
;;;439      /* Disable the TIM Update DMA request */
;;;440      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
;;;441          
;;;442      /* Disable the Peripheral */
;;;443      __HAL_TIM_DISABLE(htim);
000002  f2411211          MOV      r2,#0x1111
000006  68cb              LDR      r3,[r1,#0xc]          ;440
000008  f4237380          BIC      r3,r3,#0x100          ;440
00000c  60cb              STR      r3,[r1,#0xc]          ;440
00000e  6801              LDR      r1,[r0,#0]
000010  6a0b              LDR      r3,[r1,#0x20]
000012  4213              TST      r3,r2
000014  d108              BNE      |L10.40|
000016  6a0a              LDR      r2,[r1,#0x20]
000018  f2404344          MOV      r3,#0x444
00001c  421a              TST      r2,r3
00001e  d103              BNE      |L10.40|
000020  680a              LDR      r2,[r1,#0]
000022  f0220201          BIC      r2,r2,#1
000026  600a              STR      r2,[r1,#0]
                  |L10.40|
;;;444        
;;;445      /* Change the htim state */
;;;446      htim->State = HAL_TIM_STATE_READY;
000028  2101              MOVS     r1,#1
00002a  63c1              STR      r1,[r0,#0x3c]
;;;447          
;;;448      /* Return function status */
;;;449      return HAL_OK;
00002c  2000              MOVS     r0,#0
;;;450    }
00002e  4770              BX       lr
;;;451    
                          ENDP


                          AREA ||i.HAL_TIM_Base_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_Stop_IT PROC
;;;366      */
;;;367    HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
000000  6801              LDR      r1,[r0,#0]
;;;368    {
;;;369      /* Check the parameters */
;;;370      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;371      /* Disable the TIM Update interrupt */
;;;372      __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
;;;373          
;;;374      /* Disable the Peripheral */
;;;375      __HAL_TIM_DISABLE(htim);
000002  f2411211          MOV      r2,#0x1111
000006  68cb              LDR      r3,[r1,#0xc]          ;372
000008  f0230301          BIC      r3,r3,#1              ;372
00000c  60cb              STR      r3,[r1,#0xc]          ;372
00000e  6800              LDR      r0,[r0,#0]
000010  6a01              LDR      r1,[r0,#0x20]
000012  4211              TST      r1,r2
000014  d107              BNE      |L11.38|
000016  6a01              LDR      r1,[r0,#0x20]
000018  1092              ASRS     r2,r2,#2
00001a  4211              TST      r1,r2
00001c  d103              BNE      |L11.38|
00001e  6801              LDR      r1,[r0,#0]
000020  f0210101          BIC      r1,r1,#1
000024  6001              STR      r1,[r0,#0]
                  |L11.38|
;;;376        
;;;377      /* Return function status */
;;;378      return HAL_OK;
000026  2000              MOVS     r0,#0
;;;379    }
000028  4770              BX       lr
;;;380    
                          ENDP


                          AREA ||i.HAL_TIM_ConfigClockSource||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ConfigClockSource PROC
;;;3959     */ 
;;;3960   HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
000000  6b82              LDR      r2,[r0,#0x38]
;;;3961   {
;;;3962     uint32_t tmpsmcr = 0;
;;;3963       
;;;3964     /* Process Locked */
;;;3965     __HAL_LOCK(htim);
000002  2a01              CMP      r2,#1
000004  bf0d              ITEET    EQ
000006  2002              MOVEQ    r0,#2
000008  2301              MOVNE    r3,#1
00000a  6383              STRNE    r3,[r0,#0x38]
;;;3966     
;;;3967     htim->State = HAL_TIM_STATE_BUSY;
;;;3968     
;;;3969     /* Check the parameters */
;;;3970     assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
;;;3971     
;;;3972     /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
;;;3973     tmpsmcr = htim->Instance->SMCR;
;;;3974     tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
;;;3975     tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
;;;3976     htim->Instance->SMCR = tmpsmcr;
;;;3977     
;;;3978     switch (sClockSourceConfig->ClockSource)
;;;3979     {
;;;3980       case TIM_CLOCKSOURCE_INTERNAL:
;;;3981       { 
;;;3982         assert_param(IS_TIM_INSTANCE(htim->Instance));      
;;;3983         /* Disable slave mode to clock the prescaler directly with the internal clock */
;;;3984         htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;3985       }
;;;3986       break;
;;;3987       
;;;3988       case TIM_CLOCKSOURCE_ETRMODE1:
;;;3989       {
;;;3990         assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
;;;3991         assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
;;;3992         assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
;;;3993         assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
;;;3994         /* Configure the ETR Clock source */
;;;3995         TIM_ETR_SetConfig(htim->Instance, 
;;;3996                           sClockSourceConfig->ClockPrescaler, 
;;;3997                           sClockSourceConfig->ClockPolarity, 
;;;3998                           sClockSourceConfig->ClockFilter);
;;;3999         /* Get the TIMx SMCR register value */
;;;4000         tmpsmcr = htim->Instance->SMCR;
;;;4001         /* Reset the SMS and TS Bits */
;;;4002         tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
;;;4003         /* Select the External clock mode1 and the ETRF trigger */
;;;4004         tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
;;;4005         /* Write to TIMx SMCR */
;;;4006         htim->Instance->SMCR = tmpsmcr;
;;;4007       }
;;;4008       break;
;;;4009       
;;;4010       case TIM_CLOCKSOURCE_ETRMODE2:
;;;4011       {
;;;4012         assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
;;;4013         assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
;;;4014         assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
;;;4015         assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
;;;4016         
;;;4017         /* Configure the ETR Clock source */
;;;4018         TIM_ETR_SetConfig(htim->Instance, 
;;;4019                           sClockSourceConfig->ClockPrescaler, 
;;;4020                           sClockSourceConfig->ClockPolarity,
;;;4021                           sClockSourceConfig->ClockFilter);
;;;4022         /* Enable the External clock mode2 */
;;;4023         htim->Instance->SMCR |= TIM_SMCR_ECE;
;;;4024       }
;;;4025       break;
;;;4026       
;;;4027       case TIM_CLOCKSOURCE_TI1:
;;;4028       {
;;;4029         assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
;;;4030     
;;;4031         /* Check TI1 input conditioning related parameters */
;;;4032         assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
;;;4033         assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
;;;4034   
;;;4035         TIM_TI1_ConfigInputStage(htim->Instance, 
;;;4036                           sClockSourceConfig->ClockPolarity, 
;;;4037                           sClockSourceConfig->ClockFilter);
;;;4038         TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
;;;4039       }
;;;4040       break;
;;;4041       case TIM_CLOCKSOURCE_TI2:
;;;4042       {
;;;4043         assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
;;;4044         
;;;4045         /* Check TI1 input conditioning related parameters */
;;;4046         assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
;;;4047         assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
;;;4048   
;;;4049         TIM_TI2_ConfigInputStage(htim->Instance, 
;;;4050                           sClockSourceConfig->ClockPolarity, 
;;;4051                           sClockSourceConfig->ClockFilter);
;;;4052         TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
;;;4053       }
;;;4054       break;
;;;4055       case TIM_CLOCKSOURCE_TI1ED:
;;;4056       {
;;;4057         assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
;;;4058         /* Check TI1 input conditioning related parameters */
;;;4059         assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
;;;4060         assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
;;;4061     
;;;4062         TIM_TI1_ConfigInputStage(htim->Instance, 
;;;4063                           sClockSourceConfig->ClockPolarity,
;;;4064                           sClockSourceConfig->ClockFilter);
;;;4065         TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
;;;4066       }
;;;4067       break;
;;;4068       case TIM_CLOCKSOURCE_ITR0:
;;;4069       {
;;;4070         assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
;;;4071         TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
;;;4072       }
;;;4073       break;
;;;4074       case TIM_CLOCKSOURCE_ITR1:
;;;4075       {
;;;4076         assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
;;;4077         TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
;;;4078       }
;;;4079       break;
;;;4080       case TIM_CLOCKSOURCE_ITR2:
;;;4081       {
;;;4082         assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
;;;4083         TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
;;;4084       }
;;;4085       break;
;;;4086       case TIM_CLOCKSOURCE_ITR3:
;;;4087       {
;;;4088         assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
;;;4089         TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
;;;4090       }
;;;4091       break;
;;;4092       
;;;4093       default:
;;;4094       break;    
;;;4095     }
;;;4096     htim->State = HAL_TIM_STATE_READY;
;;;4097     
;;;4098     __HAL_UNLOCK(htim);
;;;4099     
;;;4100     return HAL_OK;
;;;4101   }
00000c  4770              BXEQ     lr
00000e  b470              PUSH     {r4-r6}               ;3961
000010  2202              MOVS     r2,#2                 ;3967
000012  63c2              STR      r2,[r0,#0x3c]         ;3967
000014  f8d0c000          LDR      r12,[r0,#0]           ;3973
000018  f8dc2008          LDR      r2,[r12,#8]           ;3973
00001c  f0220277          BIC      r2,r2,#0x77           ;3974
000020  f4223280          BIC      r2,r2,#0x10000        ;3974
000024  f422427f          BIC      r2,r2,#0xff00         ;3975
000028  f8cc2008          STR      r2,[r12,#8]           ;3976
00002c  680a              LDR      r2,[r1,#0]            ;3978
00002e  2a50              CMP      r2,#0x50              ;3978
000030  d049              BEQ      |L12.198|
000032  dc0c              BGT      |L12.78|
000034  2a20              CMP      r2,#0x20              ;3978
000036  d07d              BEQ      |L12.308|
000038  dc04              BGT      |L12.68|
00003a  2a00              CMP      r2,#0                 ;3978
00003c  d07b              BEQ      |L12.310|
00003e  2a10              CMP      r2,#0x10              ;3978
000040  d07a              BEQ      |L12.312|
000042  e0bc              B        |L12.446|
                  |L12.68|
000044  2a30              CMP      r2,#0x30              ;3978
000046  d078              BEQ      |L12.314|
000048  2a40              CMP      r2,#0x40              ;3978
00004a  d07c              BEQ      |L12.326|
00004c  e0b7              B        |L12.446|
                  |L12.78|
00004e  2a60              CMP      r2,#0x60              ;3978
000050  d056              BEQ      |L12.256|
000052  2a70              CMP      r2,#0x70              ;3978
000054  d00d              BEQ      |L12.114|
000056  f5b25f80          CMP      r2,#0x1000            ;3978
00005a  d003              BEQ      |L12.100|
00005c  f5b25f00          CMP      r2,#0x2000            ;3978
000060  d01e              BEQ      |L12.160|
000062  e0ac              B        |L12.446|
                  |L12.100|
000064  6801              LDR      r1,[r0,#0]            ;3984
000066  688a              LDR      r2,[r1,#8]            ;3984
000068  f0220207          BIC      r2,r2,#7              ;3984
00006c  f4223280          BIC      r2,r2,#0x10000        ;3984
000070  e044              B        |L12.252|
                  |L12.114|
000072  6802              LDR      r2,[r0,#0]            ;3995
000074  e9d14c01          LDRD     r4,r12,[r1,#4]        ;3995
000078  68c9              LDR      r1,[r1,#0xc]          ;3995
00007a  6895              LDR      r5,[r2,#8]            ;3995
00007c  ea442101          ORR      r1,r4,r1,LSL #8       ;3995
000080  ea410c0c          ORR      r12,r1,r12            ;3995
000084  f425417f          BIC      r1,r5,#0xff00         ;3995
000088  ea4c0101          ORR      r1,r12,r1             ;3995
00008c  6091              STR      r1,[r2,#8]            ;3995
00008e  6801              LDR      r1,[r0,#0]            ;4000
000090  688a              LDR      r2,[r1,#8]            ;4000
000092  f0220277          BIC      r2,r2,#0x77           ;4002
000096  f4223280          BIC      r2,r2,#0x10000        ;4002
00009a  f0420277          ORR      r2,r2,#0x77           ;4004
00009e  e02d              B        |L12.252|
                  |L12.160|
0000a0  6802              LDR      r2,[r0,#0]            ;4018
0000a2  e9d14c01          LDRD     r4,r12,[r1,#4]        ;4018
0000a6  68c9              LDR      r1,[r1,#0xc]          ;4018
0000a8  6895              LDR      r5,[r2,#8]            ;4018
0000aa  ea442101          ORR      r1,r4,r1,LSL #8       ;4018
0000ae  ea410c0c          ORR      r12,r1,r12            ;4018
0000b2  f425417f          BIC      r1,r5,#0xff00         ;4018
0000b6  ea4c0101          ORR      r1,r12,r1             ;4018
0000ba  6091              STR      r1,[r2,#8]            ;4018
0000bc  6801              LDR      r1,[r0,#0]            ;4023
0000be  688a              LDR      r2,[r1,#8]            ;4023
0000c0  f4424280          ORR      r2,r2,#0x4000         ;4023
0000c4  e01a              B        |L12.252|
                  |L12.198|
0000c6  6802              LDR      r2,[r0,#0]            ;4035
0000c8  f8d1c004          LDR      r12,[r1,#4]           ;4035
0000cc  68c9              LDR      r1,[r1,#0xc]          ;4035
0000ce  6a14              LDR      r4,[r2,#0x20]         ;4035
0000d0  6a15              LDR      r5,[r2,#0x20]         ;4035
0000d2  f0250601          BIC      r6,r5,#1              ;4035
0000d6  6216              STR      r6,[r2,#0x20]         ;4035
0000d8  f024050a          BIC      r5,r4,#0xa            ;4035
0000dc  6994              LDR      r4,[r2,#0x18]         ;4035
0000de  ea450c0c          ORR      r12,r5,r12            ;4035
0000e2  f02404f0          BIC      r4,r4,#0xf0           ;4035
0000e6  ea441101          ORR      r1,r4,r1,LSL #4       ;4035
0000ea  6191              STR      r1,[r2,#0x18]         ;4035
0000ec  f8c2c020          STR      r12,[r2,#0x20]        ;4035
0000f0  6801              LDR      r1,[r0,#0]            ;4035
0000f2  688a              LDR      r2,[r1,#8]            ;4035
0000f4  f0220270          BIC      r2,r2,#0x70           ;4035
0000f8  f0420257          ORR      r2,r2,#0x57           ;4035
                  |L12.252|
0000fc  608a              STR      r2,[r1,#8]            ;4023
0000fe  e05e              B        |L12.446|
                  |L12.256|
000100  6802              LDR      r2,[r0,#0]            ;4049
000102  f8d1c004          LDR      r12,[r1,#4]           ;4049
000106  68c9              LDR      r1,[r1,#0xc]          ;4049
000108  6a14              LDR      r4,[r2,#0x20]         ;4049
00010a  f0240410          BIC      r4,r4,#0x10           ;4049
00010e  6214              STR      r4,[r2,#0x20]         ;4049
000110  6994              LDR      r4,[r2,#0x18]         ;4049
000112  6a16              LDR      r6,[r2,#0x20]         ;4049
000114  f4244570          BIC      r5,r4,#0xf000         ;4049
000118  f02604a0          BIC      r4,r6,#0xa0           ;4049
00011c  ea453101          ORR      r1,r5,r1,LSL #12      ;4049
000120  6191              STR      r1,[r2,#0x18]         ;4049
000122  ea441c0c          ORR      r12,r4,r12,LSL #4     ;4049
000126  f8c2c020          STR      r12,[r2,#0x20]        ;4049
00012a  6801              LDR      r1,[r0,#0]            ;4049
00012c  688a              LDR      r2,[r1,#8]            ;4049
00012e  f0220270          BIC      r2,r2,#0x70           ;4049
000132  e004              B        |L12.318|
                  |L12.308|
000134  e034              B        |L12.416|
                  |L12.310|
000136  e023              B        |L12.384|
                  |L12.312|
000138  e02a              B        |L12.400|
                  |L12.314|
00013a  e039              B        |L12.432|
00013c  e003              B        |L12.326|
                  |L12.318|
00013e  f0420267          ORR      r2,r2,#0x67           ;4049
000142  608a              STR      r2,[r1,#8]            ;4049
000144  e03b              B        |L12.446|
                  |L12.326|
000146  6802              LDR      r2,[r0,#0]            ;4062
000148  f8d1c004          LDR      r12,[r1,#4]           ;4062
00014c  68c9              LDR      r1,[r1,#0xc]          ;4062
00014e  6a14              LDR      r4,[r2,#0x20]         ;4062
000150  6a15              LDR      r5,[r2,#0x20]         ;4062
000152  f0250601          BIC      r6,r5,#1              ;4062
000156  6216              STR      r6,[r2,#0x20]         ;4062
000158  f024050a          BIC      r5,r4,#0xa            ;4062
00015c  6994              LDR      r4,[r2,#0x18]         ;4062
00015e  ea450c0c          ORR      r12,r5,r12            ;4062
000162  f02404f0          BIC      r4,r4,#0xf0           ;4062
000166  ea441101          ORR      r1,r4,r1,LSL #4       ;4062
00016a  6191              STR      r1,[r2,#0x18]         ;4062
00016c  f8c2c020          STR      r12,[r2,#0x20]        ;4062
000170  6801              LDR      r1,[r0,#0]            ;4062
000172  688a              LDR      r2,[r1,#8]            ;4062
000174  f0220270          BIC      r2,r2,#0x70           ;4062
000178  f0420247          ORR      r2,r2,#0x47           ;4062
00017c  608a              STR      r2,[r1,#8]            ;4062
00017e  e01e              B        |L12.446|
                  |L12.384|
000180  6801              LDR      r1,[r0,#0]            ;4067
000182  688a              LDR      r2,[r1,#8]            ;4067
000184  f0220270          BIC      r2,r2,#0x70           ;4067
000188  f0420207          ORR      r2,r2,#7              ;4067
00018c  608a              STR      r2,[r1,#8]            ;4067
00018e  e016              B        |L12.446|
                  |L12.400|
000190  6801              LDR      r1,[r0,#0]            ;4073
000192  688a              LDR      r2,[r1,#8]            ;4073
000194  f0220270          BIC      r2,r2,#0x70           ;4073
000198  f0420217          ORR      r2,r2,#0x17           ;4073
00019c  608a              STR      r2,[r1,#8]            ;4073
00019e  e00e              B        |L12.446|
                  |L12.416|
0001a0  6801              LDR      r1,[r0,#0]            ;4079
0001a2  688a              LDR      r2,[r1,#8]            ;4079
0001a4  f0220270          BIC      r2,r2,#0x70           ;4079
0001a8  f0420227          ORR      r2,r2,#0x27           ;4079
0001ac  608a              STR      r2,[r1,#8]            ;4079
0001ae  e006              B        |L12.446|
                  |L12.432|
0001b0  6801              LDR      r1,[r0,#0]            ;4085
0001b2  688a              LDR      r2,[r1,#8]            ;4085
0001b4  f0220270          BIC      r2,r2,#0x70           ;4085
0001b8  f0420237          ORR      r2,r2,#0x37           ;4085
0001bc  608a              STR      r2,[r1,#8]            ;4085
                  |L12.446|
0001be  2100              MOVS     r1,#0                 ;4098
0001c0  63c3              STR      r3,[r0,#0x3c]         ;4096
0001c2  6381              STR      r1,[r0,#0x38]         ;4100
0001c4  4608              MOV      r0,r1                 ;4100
0001c6  bc70              POP      {r4-r6}
0001c8  4770              BX       lr
;;;4102   
                          ENDP


                          AREA ||i.HAL_TIM_ConfigOCrefClear||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ConfigOCrefClear PROC
;;;3855     */ 
;;;3856   __weak HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim, TIM_ClearInputConfigTypeDef * sClearInputConfig, uint32_t Channel)
000000  b4f0              PUSH     {r4-r7}
;;;3857   { 
;;;3858     /* Check the parameters */
;;;3859     assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;3860     assert_param(IS_TIM_CHANNELS(Channel));
;;;3861     assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));
;;;3862      
;;;3863     /* Process Locked */
;;;3864     __HAL_LOCK(htim);
000002  6b83              LDR      r3,[r0,#0x38]
000004  2b01              CMP      r3,#1
000006  bf02              ITTT     EQ
000008  2002              MOVEQ    r0,#2
;;;3865     
;;;3866     htim->State = HAL_TIM_STATE_BUSY;
;;;3867     
;;;3868     if(sClearInputConfig->ClearInputSource == TIM_CLEARINPUTSOURCE_ETR)
;;;3869     {
;;;3870       assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
;;;3871       assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
;;;3872       assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));
;;;3873     
;;;3874       TIM_ETR_SetConfig(htim->Instance, 
;;;3875                         sClearInputConfig->ClearInputPrescaler,
;;;3876                         sClearInputConfig->ClearInputPolarity,
;;;3877                         sClearInputConfig->ClearInputFilter);
;;;3878     }
;;;3879     
;;;3880     switch (Channel)
;;;3881     {
;;;3882       case TIM_CHANNEL_1:
;;;3883       {        
;;;3884         if(sClearInputConfig->ClearInputState != RESET)  
;;;3885         {
;;;3886           /* Enable the Ocref clear feature for Channel 1 */
;;;3887           htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
;;;3888         }
;;;3889         else
;;;3890         {
;;;3891           /* Disable the Ocref clear feature for Channel 1 */
;;;3892           htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;      
;;;3893         }
;;;3894       }    
;;;3895       break;
;;;3896       case TIM_CHANNEL_2:    
;;;3897       { 
;;;3898         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
;;;3899         if(sClearInputConfig->ClearInputState != RESET)  
;;;3900         {
;;;3901           /* Enable the Ocref clear feature for Channel 2 */
;;;3902           htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
;;;3903         }
;;;3904         else
;;;3905         {
;;;3906           /* Disable the Ocref clear feature for Channel 2 */
;;;3907           htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;      
;;;3908         }
;;;3909       } 
;;;3910       break;
;;;3911       case TIM_CHANNEL_3:   
;;;3912       {  
;;;3913         assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
;;;3914         if(sClearInputConfig->ClearInputState != RESET)  
;;;3915         {
;;;3916           /* Enable the Ocref clear feature for Channel 3 */
;;;3917           htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
;;;3918         }
;;;3919         else
;;;3920         {
;;;3921           /* Disable the Ocref clear feature for Channel 3 */
;;;3922           htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;      
;;;3923         }
;;;3924       } 
;;;3925       break;
;;;3926       case TIM_CHANNEL_4:    
;;;3927       {  
;;;3928         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
;;;3929         if(sClearInputConfig->ClearInputState != RESET)  
;;;3930         {
;;;3931           /* Enable the Ocref clear feature for Channel 4 */
;;;3932           htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
;;;3933         }
;;;3934         else
;;;3935         {
;;;3936           /* Disable the Ocref clear feature for Channel 4 */
;;;3937           htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;      
;;;3938         }
;;;3939       } 
;;;3940       break;
;;;3941       default:  
;;;3942       break;
;;;3943     } 
;;;3944   
;;;3945     htim->State = HAL_TIM_STATE_READY;
;;;3946     
;;;3947     __HAL_UNLOCK(htim);
;;;3948     
;;;3949     return HAL_OK;  
;;;3950   }  
00000a  bcf0              POPEQ    {r4-r7}
00000c  4770              BXEQ     lr
00000e  f04f0c01          MOV      r12,#1                ;3864
000012  f8c0c038          STR      r12,[r0,#0x38]        ;3866
000016  2302              MOVS     r3,#2                 ;3866
000018  63c3              STR      r3,[r0,#0x3c]         ;3866
00001a  684b              LDR      r3,[r1,#4]            ;3868
00001c  2b01              CMP      r3,#1                 ;3868
00001e  d10c              BNE      |L13.58|
000020  6803              LDR      r3,[r0,#0]            ;3874
000022  e9d14702          LDRD     r4,r7,[r1,#8]         ;3874
000026  690e              LDR      r6,[r1,#0x10]         ;3874
000028  689d              LDR      r5,[r3,#8]            ;3874
00002a  ea442406          ORR      r4,r4,r6,LSL #8       ;3874
00002e  ea440607          ORR      r6,r4,r7              ;3874
000032  f425447f          BIC      r4,r5,#0xff00         ;3874
000036  4334              ORRS     r4,r4,r6              ;3874
000038  609c              STR      r4,[r3,#8]            ;3874
                  |L13.58|
00003a  b132              CBZ      r2,|L13.74|
00003c  2a04              CMP      r2,#4                 ;3880
00003e  d00f              BEQ      |L13.96|
000040  2a08              CMP      r2,#8                 ;3880
000042  d017              BEQ      |L13.116|
000044  2a0c              CMP      r2,#0xc               ;3880
000046  d026              BEQ      |L13.150|
000048  e01e              B        |L13.136|
                  |L13.74|
00004a  6809              LDR      r1,[r1,#0]            ;3884
00004c  2900              CMP      r1,#0                 ;3884
00004e  6801              LDR      r1,[r0,#0]            ;3892
000050  698a              LDR      r2,[r1,#0x18]         ;3892
000052  bf14              ITE      NE                    ;3887
000054  f0420280          ORRNE    r2,r2,#0x80           ;3887
000058  f0220280          BICEQ    r2,r2,#0x80           ;3892
                  |L13.92|
00005c  618a              STR      r2,[r1,#0x18]         ;3887
00005e  e013              B        |L13.136|
                  |L13.96|
000060  6809              LDR      r1,[r1,#0]            ;3899
000062  2900              CMP      r1,#0                 ;3899
000064  6801              LDR      r1,[r0,#0]            ;3907
000066  698a              LDR      r2,[r1,#0x18]         ;3907
000068  bf14              ITE      NE                    ;3902
00006a  f4424200          ORRNE    r2,r2,#0x8000         ;3902
00006e  f4224200          BICEQ    r2,r2,#0x8000         ;3907
000072  e7f3              B        |L13.92|
                  |L13.116|
000074  6809              LDR      r1,[r1,#0]            ;3914
000076  2900              CMP      r1,#0                 ;3914
000078  6801              LDR      r1,[r0,#0]            ;3922
00007a  69ca              LDR      r2,[r1,#0x1c]         ;3922
00007c  bf14              ITE      NE                    ;3917
00007e  f0420280          ORRNE    r2,r2,#0x80           ;3917
000082  f0220280          BICEQ    r2,r2,#0x80           ;3922
                  |L13.134|
000086  61ca              STR      r2,[r1,#0x1c]         ;3917
                  |L13.136|
000088  2100              MOVS     r1,#0                 ;3947
00008a  f8c0c03c          STR      r12,[r0,#0x3c]        ;3945
00008e  6381              STR      r1,[r0,#0x38]         ;3949
000090  4608              MOV      r0,r1                 ;3949
000092  bcf0              POP      {r4-r7}
000094  4770              BX       lr
                  |L13.150|
000096  6809              LDR      r1,[r1,#0]            ;3929
000098  2900              CMP      r1,#0                 ;3929
00009a  6801              LDR      r1,[r0,#0]            ;3937
00009c  69ca              LDR      r2,[r1,#0x1c]         ;3937
00009e  bf14              ITE      NE                    ;3932
0000a0  f4424200          ORRNE    r2,r2,#0x8000         ;3932
0000a4  f4224200          BICEQ    r2,r2,#0x8000         ;3937
0000a8  e7ed              B        |L13.134|
;;;3951   
                          ENDP


                          AREA ||i.HAL_TIM_ConfigTI1Input||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ConfigTI1Input PROC
;;;4115     */
;;;4116   HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
000000  6800              LDR      r0,[r0,#0]
;;;4117   {
;;;4118     uint32_t tmpcr2 = 0;
;;;4119     
;;;4120     /* Check the parameters */
;;;4121     assert_param(IS_TIM_XOR_INSTANCE(htim->Instance)); 
;;;4122     assert_param(IS_TIM_TI1SELECTION(TI1_Selection));
;;;4123   
;;;4124     /* Get the TIMx CR2 register value */
;;;4125     tmpcr2 = htim->Instance->CR2;
000002  6842              LDR      r2,[r0,#4]
;;;4126   
;;;4127     /* Reset the TI1 selection */
;;;4128     tmpcr2 &= ~TIM_CR2_TI1S;
000004  f0220280          BIC      r2,r2,#0x80
;;;4129   
;;;4130     /* Set the TI1 selection */
;;;4131     tmpcr2 |= TI1_Selection;
000008  4311              ORRS     r1,r1,r2
;;;4132     
;;;4133     /* Write to TIMxCR2 */
;;;4134     htim->Instance->CR2 = tmpcr2;
00000a  6041              STR      r1,[r0,#4]
;;;4135   
;;;4136     return HAL_OK;
00000c  2000              MOVS     r0,#0
;;;4137   }
00000e  4770              BX       lr
;;;4138   
                          ENDP


                          AREA ||i.HAL_TIM_DMABurst_ReadStart||, CODE, READONLY, ALIGN=2

                  HAL_TIM_DMABurst_ReadStart PROC
;;;3610     */
;;;3611   HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3612                                                uint32_t  *BurstBuffer, uint32_t  BurstLength)
;;;3613   {
000004  4604              MOV      r4,r0
;;;3614     /* Check the parameters */
;;;3615     assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
;;;3616     assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
;;;3617     assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
;;;3618     assert_param(IS_TIM_DMA_LENGTH(BurstLength));
;;;3619     
;;;3620     if((htim->State == HAL_TIM_STATE_BUSY))
000006  6bc0              LDR      r0,[r0,#0x3c]
000008  469c              MOV      r12,r3                ;3613
00000a  4616              MOV      r6,r2                 ;3613
00000c  9d06              LDR      r5,[sp,#0x18]
00000e  4688              MOV      r8,r1                 ;3613
000010  2802              CMP      r0,#2
;;;3621     {
;;;3622        return HAL_BUSY;
;;;3623     }
;;;3624     else if((htim->State == HAL_TIM_STATE_READY))
;;;3625     {
;;;3626       if((BurstBuffer == 0 ) && (BurstLength > 0)) 
;;;3627       {
;;;3628         return HAL_ERROR;                                    
;;;3629       }
;;;3630       else
;;;3631       {
;;;3632         htim->State = HAL_TIM_STATE_BUSY;
;;;3633       }
;;;3634     }  
;;;3635     switch(BurstRequestSrc)
;;;3636     {
;;;3637       case TIM_DMA_UPDATE:
;;;3638       {  
;;;3639         /* Set the DMA Period elapsed callback */
;;;3640         htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
;;;3641        
;;;3642         /* Set the DMA error callback */
;;;3643         htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = HAL_TIM_DMAError ;
;;;3644     
;;;3645         /* Enable the DMA Stream */
;;;3646          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8) + 1);     
;;;3647       }
;;;3648       break;
;;;3649       case TIM_DMA_CC1:
;;;3650       {  
;;;3651         /* Set the DMA Period elapsed callback */
;;;3652         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
;;;3653        
;;;3654         /* Set the DMA error callback */
;;;3655         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;3656     
;;;3657         /* Enable the DMA Stream */
;;;3658         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8) + 1);      
;;;3659       }
;;;3660       break;
;;;3661       case TIM_DMA_CC2:
;;;3662       {  
;;;3663         /* Set the DMA Period elapsed callback */
;;;3664         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
;;;3665        
;;;3666         /* Set the DMA error callback */
;;;3667         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
;;;3668     
;;;3669         /* Enable the DMA Stream */
;;;3670         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8) + 1);     
;;;3671       }
;;;3672       break;
;;;3673       case TIM_DMA_CC3:
;;;3674       {  
;;;3675         /* Set the DMA Period elapsed callback */
;;;3676         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
;;;3677        
;;;3678         /* Set the DMA error callback */
;;;3679         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
;;;3680     
;;;3681         /* Enable the DMA Stream */
;;;3682         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8) + 1);      
;;;3683       }
;;;3684       break;
;;;3685       case TIM_DMA_CC4:
;;;3686       {  
;;;3687         /* Set the DMA Period elapsed callback */
;;;3688         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
;;;3689        
;;;3690         /* Set the DMA error callback */
;;;3691         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
;;;3692     
;;;3693         /* Enable the DMA Stream */
;;;3694         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8) + 1);      
;;;3695       }
;;;3696       break;
;;;3697       case TIM_DMA_COM:
;;;3698       {  
;;;3699         /* Set the DMA Period elapsed callback */
;;;3700         htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = HAL_TIMEx_DMACommutationCplt;
;;;3701        
;;;3702         /* Set the DMA error callback */
;;;3703         htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = HAL_TIM_DMAError ;
;;;3704     
;;;3705         /* Enable the DMA Stream */
;;;3706         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8) + 1);      
;;;3707       }
;;;3708       break;
;;;3709       case TIM_DMA_TRIGGER:
;;;3710       {  
;;;3711         /* Set the DMA Period elapsed callback */
;;;3712         htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
;;;3713        
;;;3714         /* Set the DMA error callback */
;;;3715         htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = HAL_TIM_DMAError ;
;;;3716     
;;;3717         /* Enable the DMA Stream */
;;;3718         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8) + 1);      
;;;3719       }
;;;3720       break;
;;;3721       default:
;;;3722       break;  
;;;3723     }
;;;3724   
;;;3725     /* configure the DMA Burst Mode */
;;;3726     htim->Instance->DCR = BurstBaseAddress | BurstLength;  
;;;3727     
;;;3728     /* Enable the TIM DMA Request */
;;;3729     __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
;;;3730     
;;;3731     htim->State = HAL_TIM_STATE_READY;
;;;3732     
;;;3733     /* Return function status */
;;;3734     return HAL_OK;
;;;3735   }
000012  bf08              IT       EQ
000014  e8bd81f0          POPEQ    {r4-r8,pc}
000018  6be0              LDR      r0,[r4,#0x3c]         ;3624
00001a  2801              CMP      r0,#1                 ;3624
00001c  d109              BNE      |L15.50|
00001e  f1bc0f00          CMP      r12,#0                ;3626
000022  d104              BNE      |L15.46|
000024  2d00              CMP      r5,#0                 ;3626
000026  bf1c              ITT      NE                    ;3628
000028  2001              MOVNE    r0,#1                 ;3628
00002a  e8bd81f0          POPNE    {r4-r8,pc}
                  |L15.46|
00002e  2002              MOVS     r0,#2                 ;3632
000030  63e0              STR      r0,[r4,#0x3c]         ;3632
                  |L15.50|
000032  2701              MOVS     r7,#1                 ;3628
000034  483b              LDR      r0,|L15.292|
000036  f5b66f00          CMP      r6,#0x800             ;3635
00003a  4a3b              LDR      r2,|L15.296|
00003c  eb072315          ADD      r3,r7,r5,LSR #8       ;3646
000040  d036              BEQ      |L15.176|
000042  dc09              BGT      |L15.88|
000044  f5b67f80          CMP      r6,#0x100             ;3635
000048  d010              BEQ      |L15.108|
00004a  f5b67f00          CMP      r6,#0x200             ;3635
00004e  d019              BEQ      |L15.132|
000050  f5b66f80          CMP      r6,#0x400             ;3635
000054  d021              BEQ      |L15.154|
000056  e058              B        |L15.266|
                  |L15.88|
000058  f5b65f80          CMP      r6,#0x1000            ;3635
00005c  d033              BEQ      |L15.198|
00005e  f5b65f00          CMP      r6,#0x2000            ;3635
000062  d03b              BEQ      |L15.220|
000064  f5b64f80          CMP      r6,#0x4000            ;3635
000068  d044              BEQ      |L15.244|
00006a  e04e              B        |L15.266|
                  |L15.108|
00006c  69e2              LDR      r2,[r4,#0x1c]         ;3640
00006e  492f              LDR      r1,|L15.300|
000070  6411              STR      r1,[r2,#0x40]         ;3643
000072  4662              MOV      r2,r12                ;3646
000074  69e1              LDR      r1,[r4,#0x1c]         ;3643
000076  6508              STR      r0,[r1,#0x50]         ;3646
000078  6821              LDR      r1,[r4,#0]            ;3646
00007a  69e0              LDR      r0,[r4,#0x1c]         ;3646
00007c  314c              ADDS     r1,r1,#0x4c           ;3646
00007e  f7fffffe          BL       HAL_DMA_Start_IT
000082  e042              B        |L15.266|
                  |L15.132|
000084  6a21              LDR      r1,[r4,#0x20]         ;3652
000086  640a              STR      r2,[r1,#0x40]         ;3655
000088  4662              MOV      r2,r12                ;3658
00008a  6a21              LDR      r1,[r4,#0x20]         ;3655
00008c  6508              STR      r0,[r1,#0x50]         ;3658
00008e  6821              LDR      r1,[r4,#0]            ;3658
000090  6a20              LDR      r0,[r4,#0x20]         ;3658
000092  314c              ADDS     r1,r1,#0x4c           ;3658
000094  f7fffffe          BL       HAL_DMA_Start_IT
000098  e037              B        |L15.266|
                  |L15.154|
00009a  6a61              LDR      r1,[r4,#0x24]         ;3664
00009c  640a              STR      r2,[r1,#0x40]         ;3667
00009e  4662              MOV      r2,r12                ;3670
0000a0  6a61              LDR      r1,[r4,#0x24]         ;3667
0000a2  6508              STR      r0,[r1,#0x50]         ;3670
0000a4  6821              LDR      r1,[r4,#0]            ;3670
0000a6  6a60              LDR      r0,[r4,#0x24]         ;3670
0000a8  314c              ADDS     r1,r1,#0x4c           ;3670
0000aa  f7fffffe          BL       HAL_DMA_Start_IT
0000ae  e02c              B        |L15.266|
                  |L15.176|
0000b0  6aa1              LDR      r1,[r4,#0x28]         ;3676
0000b2  640a              STR      r2,[r1,#0x40]         ;3679
0000b4  4662              MOV      r2,r12                ;3682
0000b6  6aa1              LDR      r1,[r4,#0x28]         ;3679
0000b8  6508              STR      r0,[r1,#0x50]         ;3682
0000ba  6821              LDR      r1,[r4,#0]            ;3682
0000bc  6aa0              LDR      r0,[r4,#0x28]         ;3682
0000be  314c              ADDS     r1,r1,#0x4c           ;3682
0000c0  f7fffffe          BL       HAL_DMA_Start_IT
0000c4  e021              B        |L15.266|
                  |L15.198|
0000c6  6ae1              LDR      r1,[r4,#0x2c]         ;3688
0000c8  640a              STR      r2,[r1,#0x40]         ;3691
0000ca  4662              MOV      r2,r12                ;3694
0000cc  6ae1              LDR      r1,[r4,#0x2c]         ;3691
0000ce  6508              STR      r0,[r1,#0x50]         ;3694
0000d0  6821              LDR      r1,[r4,#0]            ;3694
0000d2  6ae0              LDR      r0,[r4,#0x2c]         ;3694
0000d4  314c              ADDS     r1,r1,#0x4c           ;3694
0000d6  f7fffffe          BL       HAL_DMA_Start_IT
0000da  e016              B        |L15.266|
                  |L15.220|
0000dc  6b22              LDR      r2,[r4,#0x30]         ;3700
0000de  4914              LDR      r1,|L15.304|
0000e0  6411              STR      r1,[r2,#0x40]         ;3703
0000e2  4662              MOV      r2,r12                ;3706
0000e4  6b21              LDR      r1,[r4,#0x30]         ;3703
0000e6  6508              STR      r0,[r1,#0x50]         ;3706
0000e8  6821              LDR      r1,[r4,#0]            ;3706
0000ea  6b20              LDR      r0,[r4,#0x30]         ;3706
0000ec  314c              ADDS     r1,r1,#0x4c           ;3706
0000ee  f7fffffe          BL       HAL_DMA_Start_IT
0000f2  e00a              B        |L15.266|
                  |L15.244|
0000f4  6b62              LDR      r2,[r4,#0x34]         ;3712
0000f6  490f              LDR      r1,|L15.308|
0000f8  6411              STR      r1,[r2,#0x40]         ;3715
0000fa  4662              MOV      r2,r12                ;3718
0000fc  6b61              LDR      r1,[r4,#0x34]         ;3715
0000fe  6508              STR      r0,[r1,#0x50]         ;3718
000100  6821              LDR      r1,[r4,#0]            ;3718
000102  6b60              LDR      r0,[r4,#0x34]         ;3718
000104  314c              ADDS     r1,r1,#0x4c           ;3718
000106  f7fffffe          BL       HAL_DMA_Start_IT
                  |L15.266|
00010a  6820              LDR      r0,[r4,#0]            ;3726
00010c  ea480105          ORR      r1,r8,r5              ;3726
000110  6481              STR      r1,[r0,#0x48]         ;3726
000112  6820              LDR      r0,[r4,#0]            ;3729
000114  68c1              LDR      r1,[r0,#0xc]          ;3729
000116  4331              ORRS     r1,r1,r6              ;3729
000118  60c1              STR      r1,[r0,#0xc]          ;3729
00011a  63e7              STR      r7,[r4,#0x3c]         ;3731
00011c  2000              MOVS     r0,#0                 ;3734
00011e  e8bd81f0          POP      {r4-r8,pc}
;;;3736   
                          ENDP

000122  0000              DCW      0x0000
                  |L15.292|
                          DCD      TIM_DMAError
                  |L15.296|
                          DCD      TIM_DMACaptureCplt
                  |L15.300|
                          DCD      TIM_DMAPeriodElapsedCplt
                  |L15.304|
                          DCD      TIMEx_DMACommutationCplt
                  |L15.308|
                          DCD      TIM_DMATriggerCplt

                          AREA ||i.HAL_TIM_DMABurst_ReadStop||, CODE, READONLY, ALIGN=1

                  HAL_TIM_DMABurst_ReadStop PROC
;;;3743     */
;;;3744   HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
000000  b570              PUSH     {r4-r6,lr}
;;;3745   {
;;;3746     /* Check the parameters */
;;;3747     assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
;;;3748     
;;;3749     /* Abort the DMA transfer (at least disable the DMA channel) */
;;;3750     switch(BurstRequestSrc)
000002  f5b16f00          CMP      r1,#0x800
000006  460d              MOV      r5,r1                 ;3745
000008  4604              MOV      r4,r0                 ;3745
;;;3751     {
;;;3752       case TIM_DMA_UPDATE:
;;;3753       {  
;;;3754         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
;;;3755       }
;;;3756       break;
;;;3757       case TIM_DMA_CC1:
;;;3758       {  
;;;3759         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
;;;3760       }
;;;3761       break;
;;;3762       case TIM_DMA_CC2:
;;;3763       {  
;;;3764         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
;;;3765       }
;;;3766       break;
;;;3767       case TIM_DMA_CC3:
;;;3768       {  
;;;3769         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
00000a  bf08              IT       EQ
00000c  6aa0              LDREQ    r0,[r4,#0x28]
00000e  d021              BEQ      |L16.84|
000010  dc0f              BGT      |L16.50|
000012  f5b57f80          CMP      r5,#0x100             ;3750
000016  bf08              IT       EQ                    ;3754
000018  69e0              LDREQ    r0,[r4,#0x1c]         ;3754
00001a  d01b              BEQ      |L16.84|
00001c  f5b57f00          CMP      r5,#0x200             ;3750
000020  bf08              IT       EQ                    ;3759
000022  6a20              LDREQ    r0,[r4,#0x20]         ;3759
000024  d016              BEQ      |L16.84|
000026  f5b56f80          CMP      r5,#0x400             ;3750
00002a  bf08              IT       EQ                    ;3764
00002c  6a60              LDREQ    r0,[r4,#0x24]         ;3764
00002e  d011              BEQ      |L16.84|
000030  e012              B        |L16.88|
                  |L16.50|
000032  f5b55f80          CMP      r5,#0x1000            ;3750
;;;3770       }
;;;3771       break;
;;;3772       case TIM_DMA_CC4:
;;;3773       {  
;;;3774         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
000036  bf08              IT       EQ
000038  6ae0              LDREQ    r0,[r4,#0x2c]
00003a  d00b              BEQ      |L16.84|
00003c  f5b55f00          CMP      r5,#0x2000            ;3750
;;;3775       }
;;;3776       break;
;;;3777       case TIM_DMA_COM:
;;;3778       {  
;;;3779         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
000040  bf08              IT       EQ
000042  6b20              LDREQ    r0,[r4,#0x30]
000044  d006              BEQ      |L16.84|
000046  f5b54f80          CMP      r5,#0x4000            ;3750
;;;3780       }
;;;3781       break;
;;;3782       case TIM_DMA_TRIGGER:
;;;3783       {  
;;;3784         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
00004a  bf04              ITT      EQ
00004c  6b60              LDREQ    r0,[r4,#0x34]
00004e  f7fffffe          BLEQ     HAL_DMA_Abort
000052  e001              B        |L16.88|
                  |L16.84|
000054  f7fffffe          BL       HAL_DMA_Abort
                  |L16.88|
;;;3785       }
;;;3786       break;
;;;3787       default:
;;;3788       break;  
;;;3789     }
;;;3790     
;;;3791     /* Disable the TIM Update DMA request */
;;;3792     __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
000058  6820              LDR      r0,[r4,#0]
00005a  68c1              LDR      r1,[r0,#0xc]
00005c  43a9              BICS     r1,r1,r5
00005e  60c1              STR      r1,[r0,#0xc]
;;;3793         
;;;3794     /* Return function status */
;;;3795     return HAL_OK;  
000060  2000              MOVS     r0,#0
;;;3796   }
000062  bd70              POP      {r4-r6,pc}
;;;3797   
                          ENDP


                          AREA ||i.HAL_TIM_DMABurst_WriteStart||, CODE, READONLY, ALIGN=2

                  HAL_TIM_DMABurst_WriteStart PROC
;;;3385     */
;;;3386   HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3387                                                 uint32_t* BurstBuffer, uint32_t  BurstLength)
;;;3388   {
000004  4604              MOV      r4,r0
;;;3389     /* Check the parameters */
;;;3390     assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
;;;3391     assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
;;;3392     assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
;;;3393     assert_param(IS_TIM_DMA_LENGTH(BurstLength));
;;;3394     
;;;3395     if((htim->State == HAL_TIM_STATE_BUSY))
000006  6bc0              LDR      r0,[r0,#0x3c]
000008  469c              MOV      r12,r3                ;3388
00000a  4616              MOV      r6,r2                 ;3388
00000c  9d06              LDR      r5,[sp,#0x18]
00000e  4688              MOV      r8,r1                 ;3388
000010  2802              CMP      r0,#2
;;;3396     {
;;;3397        return HAL_BUSY;
;;;3398     }
;;;3399     else if((htim->State == HAL_TIM_STATE_READY))
;;;3400     {
;;;3401       if((BurstBuffer == 0 ) && (BurstLength > 0)) 
;;;3402       {
;;;3403         return HAL_ERROR;                                    
;;;3404       }
;;;3405       else
;;;3406       {
;;;3407         htim->State = HAL_TIM_STATE_BUSY;
;;;3408       }
;;;3409     }
;;;3410     switch(BurstRequestSrc)
;;;3411     {
;;;3412       case TIM_DMA_UPDATE:
;;;3413       {  
;;;3414         /* Set the DMA Period elapsed callback */
;;;3415         htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
;;;3416        
;;;3417         /* Set the DMA error callback */
;;;3418         htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = HAL_TIM_DMAError ;
;;;3419     
;;;3420         /* Enable the DMA Stream */
;;;3421         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8) + 1); 
;;;3422       }
;;;3423       break;
;;;3424       case TIM_DMA_CC1:
;;;3425       {  
;;;3426         /* Set the DMA Period elapsed callback */
;;;3427         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;3428        
;;;3429         /* Set the DMA error callback */
;;;3430         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;3431     
;;;3432         /* Enable the DMA Stream */
;;;3433         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8) + 1);     
;;;3434       }
;;;3435       break;
;;;3436       case TIM_DMA_CC2:
;;;3437       {  
;;;3438         /* Set the DMA Period elapsed callback */
;;;3439         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;3440        
;;;3441         /* Set the DMA error callback */
;;;3442         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
;;;3443     
;;;3444         /* Enable the DMA Stream */
;;;3445         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8) + 1);     
;;;3446       }
;;;3447       break;
;;;3448       case TIM_DMA_CC3:
;;;3449       {  
;;;3450         /* Set the DMA Period elapsed callback */
;;;3451         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;3452        
;;;3453         /* Set the DMA error callback */
;;;3454         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
;;;3455     
;;;3456         /* Enable the DMA Stream */
;;;3457         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8) + 1);     
;;;3458       }
;;;3459       break;
;;;3460       case TIM_DMA_CC4:
;;;3461       {  
;;;3462         /* Set the DMA Period elapsed callback */
;;;3463         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;3464        
;;;3465         /* Set the DMA error callback */
;;;3466         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
;;;3467     
;;;3468         /* Enable the DMA Stream */
;;;3469         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8) + 1);     
;;;3470       }
;;;3471       break;
;;;3472       case TIM_DMA_COM:
;;;3473       {  
;;;3474         /* Set the DMA Period elapsed callback */
;;;3475         htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = HAL_TIMEx_DMACommutationCplt;
;;;3476        
;;;3477         /* Set the DMA error callback */
;;;3478         htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = HAL_TIM_DMAError ;
;;;3479     
;;;3480         /* Enable the DMA Stream */
;;;3481         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8) + 1);     
;;;3482       }
;;;3483       break;
;;;3484       case TIM_DMA_TRIGGER:
;;;3485       {  
;;;3486         /* Set the DMA Period elapsed callback */
;;;3487         htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
;;;3488        
;;;3489         /* Set the DMA error callback */
;;;3490         htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = HAL_TIM_DMAError ;
;;;3491     
;;;3492         /* Enable the DMA Stream */
;;;3493         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8) + 1);     
;;;3494       }
;;;3495       break;
;;;3496       default:
;;;3497       break;  
;;;3498     }
;;;3499      /* configure the DMA Burst Mode */
;;;3500      htim->Instance->DCR = BurstBaseAddress | BurstLength;  
;;;3501      
;;;3502      /* Enable the TIM DMA Request */
;;;3503      __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);  
;;;3504      
;;;3505      htim->State = HAL_TIM_STATE_READY;
;;;3506     
;;;3507     /* Return function status */
;;;3508     return HAL_OK;
;;;3509   }
000012  bf08              IT       EQ
000014  e8bd81f0          POPEQ    {r4-r8,pc}
000018  6be0              LDR      r0,[r4,#0x3c]         ;3399
00001a  2801              CMP      r0,#1                 ;3399
00001c  d109              BNE      |L17.50|
00001e  f1bc0f00          CMP      r12,#0                ;3401
000022  d104              BNE      |L17.46|
000024  2d00              CMP      r5,#0                 ;3401
000026  bf1c              ITT      NE                    ;3403
000028  2001              MOVNE    r0,#1                 ;3403
00002a  e8bd81f0          POPNE    {r4-r8,pc}
                  |L17.46|
00002e  2002              MOVS     r0,#2                 ;3407
000030  63e0              STR      r0,[r4,#0x3c]         ;3407
                  |L17.50|
000032  2701              MOVS     r7,#1                 ;3403
000034  483e              LDR      r0,|L17.304|
000036  f5b66f00          CMP      r6,#0x800             ;3410
00003a  493e              LDR      r1,|L17.308|
00003c  eb072315          ADD      r3,r7,r5,LSR #8       ;3421
000040  d039              BEQ      |L17.182|
000042  dc09              BGT      |L17.88|
000044  f5b67f80          CMP      r6,#0x100             ;3410
000048  d010              BEQ      |L17.108|
00004a  f5b67f00          CMP      r6,#0x200             ;3410
00004e  d01a              BEQ      |L17.134|
000050  f5b66f80          CMP      r6,#0x400             ;3410
000054  d023              BEQ      |L17.158|
000056  e05f              B        |L17.280|
                  |L17.88|
000058  f5b65f80          CMP      r6,#0x1000            ;3410
00005c  d037              BEQ      |L17.206|
00005e  f5b65f00          CMP      r6,#0x2000            ;3410
000062  d040              BEQ      |L17.230|
000064  f5b64f80          CMP      r6,#0x4000            ;3410
000068  d04a              BEQ      |L17.256|
00006a  e055              B        |L17.280|
                  |L17.108|
00006c  69e2              LDR      r2,[r4,#0x1c]         ;3415
00006e  4932              LDR      r1,|L17.312|
000070  6411              STR      r1,[r2,#0x40]         ;3418
000072  69e1              LDR      r1,[r4,#0x1c]         ;3418
000074  6508              STR      r0,[r1,#0x50]         ;3421
000076  6821              LDR      r1,[r4,#0]            ;3421
000078  69e0              LDR      r0,[r4,#0x1c]         ;3421
00007a  f101024c          ADD      r2,r1,#0x4c           ;3421
00007e  4661              MOV      r1,r12                ;3421
000080  f7fffffe          BL       HAL_DMA_Start_IT
000084  e048              B        |L17.280|
                  |L17.134|
000086  6a22              LDR      r2,[r4,#0x20]         ;3427
000088  6411              STR      r1,[r2,#0x40]         ;3430
00008a  6a21              LDR      r1,[r4,#0x20]         ;3430
00008c  6508              STR      r0,[r1,#0x50]         ;3433
00008e  6821              LDR      r1,[r4,#0]            ;3433
000090  6a20              LDR      r0,[r4,#0x20]         ;3433
000092  f101024c          ADD      r2,r1,#0x4c           ;3433
000096  4661              MOV      r1,r12                ;3433
000098  f7fffffe          BL       HAL_DMA_Start_IT
00009c  e03c              B        |L17.280|
                  |L17.158|
00009e  6a62              LDR      r2,[r4,#0x24]         ;3439
0000a0  6411              STR      r1,[r2,#0x40]         ;3442
0000a2  6a61              LDR      r1,[r4,#0x24]         ;3442
0000a4  6508              STR      r0,[r1,#0x50]         ;3445
0000a6  6821              LDR      r1,[r4,#0]            ;3445
0000a8  6a60              LDR      r0,[r4,#0x24]         ;3445
0000aa  f101024c          ADD      r2,r1,#0x4c           ;3445
0000ae  4661              MOV      r1,r12                ;3445
0000b0  f7fffffe          BL       HAL_DMA_Start_IT
0000b4  e030              B        |L17.280|
                  |L17.182|
0000b6  6aa2              LDR      r2,[r4,#0x28]         ;3451
0000b8  6411              STR      r1,[r2,#0x40]         ;3454
0000ba  6aa1              LDR      r1,[r4,#0x28]         ;3454
0000bc  6508              STR      r0,[r1,#0x50]         ;3457
0000be  6821              LDR      r1,[r4,#0]            ;3457
0000c0  6aa0              LDR      r0,[r4,#0x28]         ;3457
0000c2  f101024c          ADD      r2,r1,#0x4c           ;3457
0000c6  4661              MOV      r1,r12                ;3457
0000c8  f7fffffe          BL       HAL_DMA_Start_IT
0000cc  e024              B        |L17.280|
                  |L17.206|
0000ce  6ae2              LDR      r2,[r4,#0x2c]         ;3463
0000d0  6411              STR      r1,[r2,#0x40]         ;3466
0000d2  6ae1              LDR      r1,[r4,#0x2c]         ;3466
0000d4  6508              STR      r0,[r1,#0x50]         ;3469
0000d6  6821              LDR      r1,[r4,#0]            ;3469
0000d8  6ae0              LDR      r0,[r4,#0x2c]         ;3469
0000da  f101024c          ADD      r2,r1,#0x4c           ;3469
0000de  4661              MOV      r1,r12                ;3469
0000e0  f7fffffe          BL       HAL_DMA_Start_IT
0000e4  e018              B        |L17.280|
                  |L17.230|
0000e6  6b22              LDR      r2,[r4,#0x30]         ;3475
0000e8  4914              LDR      r1,|L17.316|
0000ea  6411              STR      r1,[r2,#0x40]         ;3478
0000ec  6b21              LDR      r1,[r4,#0x30]         ;3478
0000ee  6508              STR      r0,[r1,#0x50]         ;3481
0000f0  6821              LDR      r1,[r4,#0]            ;3481
0000f2  6b20              LDR      r0,[r4,#0x30]         ;3481
0000f4  f101024c          ADD      r2,r1,#0x4c           ;3481
0000f8  4661              MOV      r1,r12                ;3481
0000fa  f7fffffe          BL       HAL_DMA_Start_IT
0000fe  e00b              B        |L17.280|
                  |L17.256|
000100  6b62              LDR      r2,[r4,#0x34]         ;3487
000102  490f              LDR      r1,|L17.320|
000104  6411              STR      r1,[r2,#0x40]         ;3490
000106  6b61              LDR      r1,[r4,#0x34]         ;3490
000108  6508              STR      r0,[r1,#0x50]         ;3493
00010a  6821              LDR      r1,[r4,#0]            ;3493
00010c  6b60              LDR      r0,[r4,#0x34]         ;3493
00010e  f101024c          ADD      r2,r1,#0x4c           ;3493
000112  4661              MOV      r1,r12                ;3493
000114  f7fffffe          BL       HAL_DMA_Start_IT
                  |L17.280|
000118  6820              LDR      r0,[r4,#0]            ;3500
00011a  ea480105          ORR      r1,r8,r5              ;3500
00011e  6481              STR      r1,[r0,#0x48]         ;3500
000120  6820              LDR      r0,[r4,#0]            ;3503
000122  68c1              LDR      r1,[r0,#0xc]          ;3503
000124  4331              ORRS     r1,r1,r6              ;3503
000126  60c1              STR      r1,[r0,#0xc]          ;3503
000128  63e7              STR      r7,[r4,#0x3c]         ;3505
00012a  2000              MOVS     r0,#0                 ;3508
00012c  e8bd81f0          POP      {r4-r8,pc}
;;;3510   
                          ENDP

                  |L17.304|
                          DCD      TIM_DMAError
                  |L17.308|
                          DCD      TIM_DMADelayPulseCplt
                  |L17.312|
                          DCD      TIM_DMAPeriodElapsedCplt
                  |L17.316|
                          DCD      TIMEx_DMACommutationCplt
                  |L17.320|
                          DCD      TIM_DMATriggerCplt

                          AREA ||i.HAL_TIM_DMABurst_WriteStop||, CODE, READONLY, ALIGN=1

                  HAL_TIM_DMABurst_WriteStop PROC
;;;3517     */
;;;3518   HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
000000  b570              PUSH     {r4-r6,lr}
;;;3519   {
;;;3520     /* Check the parameters */
;;;3521     assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
;;;3522     
;;;3523     /* Abort the DMA transfer (at least disable the DMA channel) */
;;;3524     switch(BurstRequestSrc)
000002  f5b16f00          CMP      r1,#0x800
000006  460d              MOV      r5,r1                 ;3519
000008  4604              MOV      r4,r0                 ;3519
;;;3525     {
;;;3526       case TIM_DMA_UPDATE:
;;;3527       {  
;;;3528         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
;;;3529       }
;;;3530       break;
;;;3531       case TIM_DMA_CC1:
;;;3532       {  
;;;3533         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
;;;3534       }
;;;3535       break;
;;;3536       case TIM_DMA_CC2:
;;;3537       {  
;;;3538         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
;;;3539       }
;;;3540       break;
;;;3541       case TIM_DMA_CC3:
;;;3542       {  
;;;3543         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
00000a  bf08              IT       EQ
00000c  6aa0              LDREQ    r0,[r4,#0x28]
00000e  d021              BEQ      |L18.84|
000010  dc0f              BGT      |L18.50|
000012  f5b57f80          CMP      r5,#0x100             ;3524
000016  bf08              IT       EQ                    ;3528
000018  69e0              LDREQ    r0,[r4,#0x1c]         ;3528
00001a  d01b              BEQ      |L18.84|
00001c  f5b57f00          CMP      r5,#0x200             ;3524
000020  bf08              IT       EQ                    ;3533
000022  6a20              LDREQ    r0,[r4,#0x20]         ;3533
000024  d016              BEQ      |L18.84|
000026  f5b56f80          CMP      r5,#0x400             ;3524
00002a  bf08              IT       EQ                    ;3538
00002c  6a60              LDREQ    r0,[r4,#0x24]         ;3538
00002e  d011              BEQ      |L18.84|
000030  e012              B        |L18.88|
                  |L18.50|
000032  f5b55f80          CMP      r5,#0x1000            ;3524
;;;3544       }
;;;3545       break;
;;;3546       case TIM_DMA_CC4:
;;;3547       {  
;;;3548         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
000036  bf08              IT       EQ
000038  6ae0              LDREQ    r0,[r4,#0x2c]
00003a  d00b              BEQ      |L18.84|
00003c  f5b55f00          CMP      r5,#0x2000            ;3524
;;;3549       }
;;;3550       break;
;;;3551       case TIM_DMA_COM:
;;;3552       {  
;;;3553         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
000040  bf08              IT       EQ
000042  6b20              LDREQ    r0,[r4,#0x30]
000044  d006              BEQ      |L18.84|
000046  f5b54f80          CMP      r5,#0x4000            ;3524
;;;3554       }
;;;3555       break;
;;;3556       case TIM_DMA_TRIGGER:
;;;3557       {  
;;;3558         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
00004a  bf04              ITT      EQ
00004c  6b60              LDREQ    r0,[r4,#0x34]
00004e  f7fffffe          BLEQ     HAL_DMA_Abort
000052  e001              B        |L18.88|
                  |L18.84|
000054  f7fffffe          BL       HAL_DMA_Abort
                  |L18.88|
;;;3559       }
;;;3560       break;
;;;3561       default:
;;;3562       break;
;;;3563     }
;;;3564   
;;;3565     /* Disable the TIM Update DMA request */
;;;3566     __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
000058  6820              LDR      r0,[r4,#0]
00005a  68c1              LDR      r1,[r0,#0xc]
00005c  43a9              BICS     r1,r1,r5
00005e  60c1              STR      r1,[r0,#0xc]
;;;3567         
;;;3568     /* Return function status */
;;;3569     return HAL_OK;  
000060  2000              MOVS     r0,#0
;;;3570   }
000062  bd70              POP      {r4-r6,pc}
;;;3571   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_DeInit PROC
;;;2368     */
;;;2369   HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;2370   {
000002  4604              MOV      r4,r0
;;;2371     /* Check the parameters */
;;;2372     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;2373     
;;;2374     htim->State = HAL_TIM_STATE_BUSY;
;;;2375     
;;;2376     /* Disable the TIM Peripheral Clock */
;;;2377     __HAL_TIM_DISABLE(htim);
000004  f2411111          MOV      r1,#0x1111
000008  2002              MOVS     r0,#2                 ;2374
00000a  63e0              STR      r0,[r4,#0x3c]         ;2374
00000c  6820              LDR      r0,[r4,#0]
00000e  6a02              LDR      r2,[r0,#0x20]
000010  420a              TST      r2,r1
000012  d108              BNE      |L19.38|
000014  6a01              LDR      r1,[r0,#0x20]
000016  f2404244          MOV      r2,#0x444
00001a  4211              TST      r1,r2
00001c  d103              BNE      |L19.38|
00001e  6801              LDR      r1,[r0,#0]
000020  f0210101          BIC      r1,r1,#1
000024  6001              STR      r1,[r0,#0]
                  |L19.38|
;;;2378     
;;;2379     /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;2380     HAL_TIM_Encoder_MspDeInit(htim);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       HAL_TIM_Encoder_MspDeInit
;;;2381       
;;;2382     /* Change TIM state */  
;;;2383     htim->State = HAL_TIM_STATE_RESET;
00002c  2000              MOVS     r0,#0
00002e  63e0              STR      r0,[r4,#0x3c]
;;;2384    
;;;2385     /* Release Lock */
;;;2386     __HAL_UNLOCK(htim);
000030  63a0              STR      r0,[r4,#0x38]
;;;2387   
;;;2388     return HAL_OK;
;;;2389   }
000032  bd10              POP      {r4,pc}
;;;2390   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_GetState PROC
;;;4591     */
;;;4592   HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
000000  6bc0              LDR      r0,[r0,#0x3c]
;;;4593   {
;;;4594     return htim->State;
;;;4595   }
000002  4770              BX       lr
;;;4596   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_Init PROC
;;;2279     */
;;;2280   HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
000000  2800              CMP      r0,#0
;;;2281   {
;;;2282     uint32_t tmpsmcr = 0;
;;;2283     uint32_t tmpccmr1 = 0;
;;;2284     uint32_t tmpccer = 0;
;;;2285     
;;;2286     /* Check the TIM handle allocation */
;;;2287     if(htim == NULL)
;;;2288     {
;;;2289       return HAL_ERROR;
000002  bf04              ITT      EQ
000004  2001              MOVEQ    r0,#1
;;;2290     }
;;;2291      
;;;2292     /* Check the parameters */
;;;2293     assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;2294     assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
;;;2295     assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
;;;2296     assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
;;;2297     assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
;;;2298     assert_param(IS_TIM_IC_POLARITY(sConfig->IC2Polarity));
;;;2299     assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
;;;2300     assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
;;;2301     assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
;;;2302     assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
;;;2303   
;;;2304     if(htim->State == HAL_TIM_STATE_RESET)
;;;2305     { 
;;;2306       /* Allocate lock resource and initialize it */
;;;2307       htim->Lock = HAL_UNLOCKED;  
;;;2308       /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;2309       HAL_TIM_Encoder_MspInit(htim);
;;;2310     }
;;;2311     
;;;2312     /* Set the TIM state */
;;;2313     htim->State= HAL_TIM_STATE_BUSY;   
;;;2314       
;;;2315     /* Reset the SMS bits */
;;;2316     htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;2317     
;;;2318     /* Configure the Time base in the Encoder Mode */
;;;2319     TIM_Base_SetConfig(htim->Instance, &htim->Init);  
;;;2320     
;;;2321     /* Get the TIMx SMCR register value */
;;;2322     tmpsmcr = htim->Instance->SMCR;
;;;2323   
;;;2324     /* Get the TIMx CCMR1 register value */
;;;2325     tmpccmr1 = htim->Instance->CCMR1;
;;;2326   
;;;2327     /* Get the TIMx CCER register value */
;;;2328     tmpccer = htim->Instance->CCER;
;;;2329   
;;;2330     /* Set the encoder Mode */
;;;2331     tmpsmcr |= sConfig->EncoderMode;
;;;2332   
;;;2333     /* Select the Capture Compare 1 and the Capture Compare 2 as input */
;;;2334     tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
;;;2335     tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
;;;2336     
;;;2337     /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
;;;2338     tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
;;;2339     tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
;;;2340     tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
;;;2341     tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
;;;2342   
;;;2343     /* Set the TI1 and the TI2 Polarities */
;;;2344     tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
;;;2345     tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
;;;2346     tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
;;;2347     
;;;2348     /* Write to TIMx SMCR */
;;;2349     htim->Instance->SMCR = tmpsmcr;
;;;2350   
;;;2351     /* Write to TIMx CCMR1 */
;;;2352     htim->Instance->CCMR1 = tmpccmr1;
;;;2353   
;;;2354     /* Write to TIMx CCER */
;;;2355     htim->Instance->CCER = tmpccer;
;;;2356     
;;;2357     /* Initialize the TIM state*/
;;;2358     htim->State= HAL_TIM_STATE_READY;
;;;2359     
;;;2360     return HAL_OK;
;;;2361   }
000006  4770              BXEQ     lr
000008  e92d41f0          PUSH     {r4-r8,lr}            ;2281
00000c  4604              MOV      r4,r0                 ;2281
00000e  6bc0              LDR      r0,[r0,#0x3c]         ;2304
000010  460d              MOV      r5,r1                 ;2281
000012  b920              CBNZ     r0,|L21.30|
000014  2000              MOVS     r0,#0                 ;2307
000016  63a0              STR      r0,[r4,#0x38]         ;2309
000018  4620              MOV      r0,r4                 ;2309
00001a  f7fffffe          BL       HAL_TIM_Encoder_MspInit
                  |L21.30|
00001e  2002              MOVS     r0,#2                 ;2313
000020  63e0              STR      r0,[r4,#0x3c]         ;2313
000022  6820              LDR      r0,[r4,#0]            ;2316
000024  6881              LDR      r1,[r0,#8]            ;2316
000026  f0210107          BIC      r1,r1,#7              ;2316
00002a  f4213180          BIC      r1,r1,#0x10000        ;2316
00002e  6081              STR      r1,[r0,#8]            ;2316
000030  6820              LDR      r0,[r4,#0]            ;2319
000032  1d21              ADDS     r1,r4,#4              ;2319
000034  f7fffffe          BL       TIM_Base_SetConfig
000038  6820              LDR      r0,[r4,#0]            ;2335
00003a  e9d57c06          LDRD     r7,r12,[r5,#0x18]     ;2331
00003e  682e              LDR      r6,[r5,#0]            ;2322
000040  68ab              LDR      r3,[r5,#8]            ;2322
000042  6881              LDR      r1,[r0,#8]            ;2322
000044  6982              LDR      r2,[r0,#0x18]         ;2325
000046  4331              ORRS     r1,r1,r6              ;2331
000048  f0220203          BIC      r2,r2,#3              ;2334
00004c  e9d56803          LDRD     r6,r8,[r5,#0xc]       ;2341
000050  f4227240          BIC      r2,r2,#0x300          ;2334
000054  ea422207          ORR      r2,r2,r7,LSL #8       ;2335
000058  6a2f              LDR      r7,[r5,#0x20]         ;2328
00005a  431a              ORRS     r2,r2,r3              ;2335
00005c  f022030c          BIC      r3,r2,#0xc            ;2338
000060  6a02              LDR      r2,[r0,#0x20]         ;2328
000062  ea4f1808          LSL      r8,r8,#4              ;2341
000066  f4236340          BIC      r3,r3,#0xc00          ;2338
00006a  f02303f0          BIC      r3,r3,#0xf0           ;2339
00006e  f4234370          BIC      r3,r3,#0xf000         ;2339
000072  ea483707          ORR      r7,r8,r7,LSL #12      ;2341
000076  f8d58004          LDR      r8,[r5,#4]            ;2349
00007a  ea43230c          ORR      r3,r3,r12,LSL #8      ;2340
00007e  f8d5c014          LDR      r12,[r5,#0x14]        ;2349
000082  4333              ORRS     r3,r3,r6              ;2340
000084  6081              STR      r1,[r0,#8]            ;2349
000086  ea470003          ORR      r0,r7,r3              ;2341
00008a  6823              LDR      r3,[r4,#0]            ;2352
00008c  f0220122          BIC      r1,r2,#0x22           ;2344
000090  2201              MOVS     r2,#1                 ;2358
000092  6198              STR      r0,[r3,#0x18]         ;2352
000094  f0210088          BIC      r0,r1,#0x88           ;2345
000098  6821              LDR      r1,[r4,#0]            ;2355
00009a  ea40100c          ORR      r0,r0,r12,LSL #4      ;2346
00009e  ea480000          ORR      r0,r8,r0              ;2346
0000a2  6208              STR      r0,[r1,#0x20]         ;2355
0000a4  63e2              STR      r2,[r4,#0x3c]         ;2358
0000a6  2000              MOVS     r0,#0                 ;2360
0000a8  e8bd81f0          POP      {r4-r8,pc}
;;;2362   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_MspDeInit PROC
;;;2412     */
;;;2413   __weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2414   {
;;;2415     /* Prevent unused argument(s) compilation warning */
;;;2416     UNUSED(htim);
;;;2417    
;;;2418     /* NOTE : This function Should not be modified, when the callback is needed,
;;;2419               the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
;;;2420      */
;;;2421   }
;;;2422   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_MspInit PROC
;;;2396     */
;;;2397   __weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2398   {
;;;2399     /* Prevent unused argument(s) compilation warning */
;;;2400     UNUSED(htim);
;;;2401    
;;;2402     /* NOTE : This function Should not be modified, when the callback is needed,
;;;2403               the HAL_TIM_Encoder_MspInit could be implemented in the user file
;;;2404      */
;;;2405   }
;;;2406   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_Start PROC
;;;2433     */
;;;2434   HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
;;;2435   {
000002  b1c9              CBZ      r1,|L24.56|
;;;2436     /* Check the parameters */
;;;2437     assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;2438     
;;;2439     /* Enable the encoder interface channels */
;;;2440     switch (Channel)
000004  2904              CMP      r1,#4
000006  6a11              LDR      r1,[r2,#0x20]
000008  d01e              BEQ      |L24.72|
00000a  f0210101          BIC      r1,r1,#1
00000e  6211              STR      r1,[r2,#0x20]
000010  6a11              LDR      r1,[r2,#0x20]
000012  f0410101          ORR      r1,r1,#1
000016  6211              STR      r1,[r2,#0x20]
000018  6801              LDR      r1,[r0,#0]
00001a  6a0a              LDR      r2,[r1,#0x20]
00001c  f0220210          BIC      r2,r2,#0x10
000020  620a              STR      r2,[r1,#0x20]
000022  6a0a              LDR      r2,[r1,#0x20]
000024  f0420210          ORR      r2,r2,#0x10
000028  620a              STR      r2,[r1,#0x20]
                  |L24.42|
;;;2441     {
;;;2442       case TIM_CHANNEL_1:
;;;2443       {
;;;2444         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;2445         break; 
;;;2446       }
;;;2447       case TIM_CHANNEL_2:
;;;2448       { 
;;;2449         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
;;;2450         break;
;;;2451       }  
;;;2452       default :
;;;2453       {
;;;2454        TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;2455        TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;2456        break; 
;;;2457       }
;;;2458     }  
;;;2459     /* Enable the Peripheral */
;;;2460     __HAL_TIM_ENABLE(htim);
00002a  6800              LDR      r0,[r0,#0]
00002c  6801              LDR      r1,[r0,#0]
00002e  f0410101          ORR      r1,r1,#1
000032  6001              STR      r1,[r0,#0]
;;;2461     
;;;2462     /* Return function status */
;;;2463     return HAL_OK;
000034  2000              MOVS     r0,#0
;;;2464   }
000036  4770              BX       lr
                  |L24.56|
000038  6a11              LDR      r1,[r2,#0x20]
00003a  f0210101          BIC      r1,r1,#1
00003e  6211              STR      r1,[r2,#0x20]
000040  6a11              LDR      r1,[r2,#0x20]
000042  f0410101          ORR      r1,r1,#1
000046  e005              B        |L24.84|
                  |L24.72|
000048  f0210110          BIC      r1,r1,#0x10           ;2445
00004c  6211              STR      r1,[r2,#0x20]         ;2445
00004e  6a11              LDR      r1,[r2,#0x20]         ;2445
000050  f0410110          ORR      r1,r1,#0x10           ;2445
                  |L24.84|
000054  6211              STR      r1,[r2,#0x20]         ;2445
000056  e7e8              B        |L24.42|
;;;2465   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Encoder_Start_DMA PROC
;;;2624     */
;;;2625   HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2626   {
000004  4604              MOV      r4,r0
;;;2627     /* Check the parameters */
;;;2628     assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
;;;2629     
;;;2630     if((htim->State == HAL_TIM_STATE_BUSY))
000006  6bc0              LDR      r0,[r0,#0x3c]
000008  461e              MOV      r6,r3                 ;2626
00000a  f8dd8018          LDR      r8,[sp,#0x18]
00000e  2802              CMP      r0,#2
;;;2631     {
;;;2632        return HAL_BUSY;
;;;2633     }
;;;2634     else if((htim->State == HAL_TIM_STATE_READY))
;;;2635     {
;;;2636       if((((pData1 == 0) || (pData2 == 0) )) && (Length > 0)) 
;;;2637       {
;;;2638         return HAL_ERROR;                                    
;;;2639       }
;;;2640       else
;;;2641       {
;;;2642         htim->State = HAL_TIM_STATE_BUSY;
;;;2643       }
;;;2644     }  
;;;2645      
;;;2646     switch (Channel)
;;;2647     {
;;;2648       case TIM_CHANNEL_1:
;;;2649       {
;;;2650         /* Set the DMA Period elapsed callback */
;;;2651         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
;;;2652        
;;;2653         /* Set the DMA error callback */
;;;2654         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;2655         
;;;2656         /* Enable the DMA Stream */
;;;2657         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t )pData1, Length); 
;;;2658         
;;;2659         /* Enable the TIM Input Capture DMA request */      
;;;2660         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;2661               
;;;2662         /* Enable the Peripheral */
;;;2663         __HAL_TIM_ENABLE(htim);
;;;2664         
;;;2665         /* Enable the Capture compare channel */
;;;2666         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;2667       }
;;;2668       break;
;;;2669       
;;;2670       case TIM_CHANNEL_2:
;;;2671       {
;;;2672         /* Set the DMA Period elapsed callback */
;;;2673         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
;;;2674        
;;;2675         /* Set the DMA error callback */
;;;2676         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError;
;;;2677         /* Enable the DMA Stream */
;;;2678         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
;;;2679         
;;;2680         /* Enable the TIM Input Capture  DMA request */
;;;2681         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;2682        
;;;2683         /* Enable the Peripheral */
;;;2684         __HAL_TIM_ENABLE(htim);
;;;2685         
;;;2686         /* Enable the Capture compare channel */
;;;2687         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;2688       }
;;;2689       break;
;;;2690       
;;;2691       case TIM_CHANNEL_ALL:
;;;2692       {
;;;2693         /* Set the DMA Period elapsed callback */
;;;2694         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
;;;2695        
;;;2696         /* Set the DMA error callback */
;;;2697         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;2698         
;;;2699         /* Enable the DMA Stream */
;;;2700         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length);
;;;2701         
;;;2702         /* Set the DMA Period elapsed callback */
;;;2703         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
;;;2704        
;;;2705         /* Set the DMA error callback */
;;;2706         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
;;;2707         
;;;2708         /* Enable the DMA Stream */
;;;2709         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
;;;2710             
;;;2711        /* Enable the Peripheral */
;;;2712         __HAL_TIM_ENABLE(htim);
;;;2713         
;;;2714         /* Enable the Capture compare channel */
;;;2715         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;2716         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;2717         
;;;2718         /* Enable the TIM Input Capture  DMA request */
;;;2719         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;2720         /* Enable the TIM Input Capture  DMA request */
;;;2721         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;2722       }
;;;2723       break;
;;;2724       
;;;2725       default:
;;;2726       break;
;;;2727     }  
;;;2728     /* Return function status */
;;;2729     return HAL_OK;
;;;2730   }
000010  bf08              IT       EQ
000012  e8bd81f0          POPEQ    {r4-r8,pc}
000016  6be0              LDR      r0,[r4,#0x3c]         ;2634
000018  2801              CMP      r0,#1                 ;2634
00001a  d10b              BNE      |L25.52|
00001c  2a00              CMP      r2,#0                 ;2636
00001e  bf18              IT       NE                    ;2636
000020  2e00              CMPNE    r6,#0                 ;2636
000022  d105              BNE      |L25.48|
000024  f1b80f00          CMP      r8,#0                 ;2636
000028  bf1c              ITT      NE                    ;2638
00002a  2001              MOVNE    r0,#1                 ;2638
00002c  e8bd81f0          POPNE    {r4-r8,pc}
                  |L25.48|
000030  2002              MOVS     r0,#2                 ;2642
000032  63e0              STR      r0,[r4,#0x3c]         ;2642
                  |L25.52|
000034  4d3e              LDR      r5,|L25.304|
000036  4f3f              LDR      r7,|L25.308|
000038  b121              CBZ      r1,|L25.68|
00003a  2904              CMP      r1,#4                 ;2646
00003c  d01f              BEQ      |L25.126|
00003e  293c              CMP      r1,#0x3c              ;2646
000040  d03c              BEQ      |L25.188|
000042  e071              B        |L25.296|
                  |L25.68|
000044  6a20              LDR      r0,[r4,#0x20]         ;2651
000046  4643              MOV      r3,r8                 ;2657
000048  6405              STR      r5,[r0,#0x40]         ;2654
00004a  6a20              LDR      r0,[r4,#0x20]         ;2654
00004c  6507              STR      r7,[r0,#0x50]         ;2657
00004e  6821              LDR      r1,[r4,#0]            ;2657
000050  6a20              LDR      r0,[r4,#0x20]         ;2657
000052  3134              ADDS     r1,r1,#0x34           ;2657
000054  f7fffffe          BL       HAL_DMA_Start_IT
000058  6820              LDR      r0,[r4,#0]            ;2660
00005a  68c1              LDR      r1,[r0,#0xc]          ;2660
00005c  f4417100          ORR      r1,r1,#0x200          ;2660
000060  60c1              STR      r1,[r0,#0xc]          ;2660
000062  6820              LDR      r0,[r4,#0]            ;2663
000064  6801              LDR      r1,[r0,#0]            ;2663
000066  f0410101          ORR      r1,r1,#1              ;2663
00006a  6001              STR      r1,[r0,#0]            ;2663
00006c  6820              LDR      r0,[r4,#0]            ;2663
00006e  6a01              LDR      r1,[r0,#0x20]         ;2663
000070  f0210101          BIC      r1,r1,#1              ;2663
000074  6201              STR      r1,[r0,#0x20]         ;2663
000076  6a01              LDR      r1,[r0,#0x20]         ;2663
000078  f0410101          ORR      r1,r1,#1              ;2663
00007c  e01c              B        |L25.184|
                  |L25.126|
00007e  6a60              LDR      r0,[r4,#0x24]         ;2673
000080  4643              MOV      r3,r8                 ;2678
000082  4632              MOV      r2,r6                 ;2678
000084  6405              STR      r5,[r0,#0x40]         ;2676
000086  6a60              LDR      r0,[r4,#0x24]         ;2676
000088  6507              STR      r7,[r0,#0x50]         ;2678
00008a  6821              LDR      r1,[r4,#0]            ;2678
00008c  6a60              LDR      r0,[r4,#0x24]         ;2678
00008e  3138              ADDS     r1,r1,#0x38           ;2678
000090  f7fffffe          BL       HAL_DMA_Start_IT
000094  6820              LDR      r0,[r4,#0]            ;2681
000096  68c1              LDR      r1,[r0,#0xc]          ;2681
000098  f4416180          ORR      r1,r1,#0x400          ;2681
00009c  60c1              STR      r1,[r0,#0xc]          ;2681
00009e  6820              LDR      r0,[r4,#0]            ;2684
0000a0  6801              LDR      r1,[r0,#0]            ;2684
0000a2  f0410101          ORR      r1,r1,#1              ;2684
0000a6  6001              STR      r1,[r0,#0]            ;2684
0000a8  6820              LDR      r0,[r4,#0]            ;2684
0000aa  6a01              LDR      r1,[r0,#0x20]         ;2684
0000ac  f0210110          BIC      r1,r1,#0x10           ;2684
0000b0  6201              STR      r1,[r0,#0x20]         ;2684
0000b2  6a01              LDR      r1,[r0,#0x20]         ;2684
0000b4  f0410110          ORR      r1,r1,#0x10           ;2684
                  |L25.184|
0000b8  6201              STR      r1,[r0,#0x20]         ;2684
0000ba  e035              B        |L25.296|
                  |L25.188|
0000bc  6a20              LDR      r0,[r4,#0x20]         ;2694
0000be  4643              MOV      r3,r8                 ;2700
0000c0  6405              STR      r5,[r0,#0x40]         ;2697
0000c2  6a20              LDR      r0,[r4,#0x20]         ;2697
0000c4  6507              STR      r7,[r0,#0x50]         ;2700
0000c6  6821              LDR      r1,[r4,#0]            ;2700
0000c8  6a20              LDR      r0,[r4,#0x20]         ;2700
0000ca  3134              ADDS     r1,r1,#0x34           ;2700
0000cc  f7fffffe          BL       HAL_DMA_Start_IT
0000d0  6a60              LDR      r0,[r4,#0x24]         ;2703
0000d2  4643              MOV      r3,r8                 ;2709
0000d4  4632              MOV      r2,r6                 ;2709
0000d6  6405              STR      r5,[r0,#0x40]         ;2706
0000d8  6a60              LDR      r0,[r4,#0x24]         ;2706
0000da  6507              STR      r7,[r0,#0x50]         ;2709
0000dc  6821              LDR      r1,[r4,#0]            ;2709
0000de  6a60              LDR      r0,[r4,#0x24]         ;2709
0000e0  3138              ADDS     r1,r1,#0x38           ;2709
0000e2  f7fffffe          BL       HAL_DMA_Start_IT
0000e6  6820              LDR      r0,[r4,#0]            ;2712
0000e8  6801              LDR      r1,[r0,#0]            ;2712
0000ea  f0410101          ORR      r1,r1,#1              ;2712
0000ee  6001              STR      r1,[r0,#0]            ;2712
0000f0  6820              LDR      r0,[r4,#0]            ;2712
0000f2  6a01              LDR      r1,[r0,#0x20]         ;2712
0000f4  f0210101          BIC      r1,r1,#1              ;2712
0000f8  6201              STR      r1,[r0,#0x20]         ;2712
0000fa  6a01              LDR      r1,[r0,#0x20]         ;2712
0000fc  f0410101          ORR      r1,r1,#1              ;2712
000100  6201              STR      r1,[r0,#0x20]         ;2712
000102  6820              LDR      r0,[r4,#0]            ;2712
000104  6a01              LDR      r1,[r0,#0x20]         ;2712
000106  f0210110          BIC      r1,r1,#0x10           ;2712
00010a  6201              STR      r1,[r0,#0x20]         ;2712
00010c  6a01              LDR      r1,[r0,#0x20]         ;2712
00010e  f0410110          ORR      r1,r1,#0x10           ;2712
000112  6201              STR      r1,[r0,#0x20]         ;2712
000114  6820              LDR      r0,[r4,#0]            ;2719
000116  68c1              LDR      r1,[r0,#0xc]          ;2719
000118  f4417100          ORR      r1,r1,#0x200          ;2719
00011c  60c1              STR      r1,[r0,#0xc]          ;2719
00011e  6820              LDR      r0,[r4,#0]            ;2721
000120  68c1              LDR      r1,[r0,#0xc]          ;2721
000122  f4416180          ORR      r1,r1,#0x400          ;2721
000126  60c1              STR      r1,[r0,#0xc]          ;2721
                  |L25.296|
000128  2000              MOVS     r0,#0                 ;2729
00012a  e8bd81f0          POP      {r4-r8,pc}
;;;2731   
                          ENDP

00012e  0000              DCW      0x0000
                  |L25.304|
                          DCD      TIM_DMACaptureCplt
                  |L25.308|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIM_Encoder_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_Start_IT PROC
;;;2520     */
;;;2521   HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
;;;2522   {
000002  b319              CBZ      r1,|L26.76|
;;;2523     /* Check the parameters */
;;;2524     assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;2525     
;;;2526     /* Enable the encoder interface channels */
;;;2527     /* Enable the capture compare Interrupts 1 and/or 2 */
;;;2528     switch (Channel)
000004  2904              CMP      r1,#4
000006  6a11              LDR      r1,[r2,#0x20]
000008  d02d              BEQ      |L26.102|
00000a  f0210101          BIC      r1,r1,#1
00000e  6211              STR      r1,[r2,#0x20]
000010  6a11              LDR      r1,[r2,#0x20]
000012  f0410101          ORR      r1,r1,#1
000016  6211              STR      r1,[r2,#0x20]
000018  6801              LDR      r1,[r0,#0]
00001a  6a0a              LDR      r2,[r1,#0x20]
00001c  f0220210          BIC      r2,r2,#0x10
000020  620a              STR      r2,[r1,#0x20]
000022  6a0a              LDR      r2,[r1,#0x20]
000024  f0420210          ORR      r2,r2,#0x10
000028  620a              STR      r2,[r1,#0x20]
;;;2529     {
;;;2530       case TIM_CHANNEL_1:
;;;2531       {
;;;2532         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;2533         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
;;;2534         break; 
;;;2535       }
;;;2536       case TIM_CHANNEL_2:
;;;2537       { 
;;;2538         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;2539         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2); 
;;;2540         break;
;;;2541       }  
;;;2542       default :
;;;2543       {
;;;2544        TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;2545        TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;2546        __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
00002a  6801              LDR      r1,[r0,#0]
00002c  68ca              LDR      r2,[r1,#0xc]
00002e  f0420202          ORR      r2,r2,#2
000032  60ca              STR      r2,[r1,#0xc]
;;;2547        __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000034  6801              LDR      r1,[r0,#0]
000036  68ca              LDR      r2,[r1,#0xc]
000038  f0420204          ORR      r2,r2,#4
00003c  60ca              STR      r2,[r1,#0xc]
                  |L26.62|
;;;2548        break; 
;;;2549       }
;;;2550     }
;;;2551     
;;;2552     /* Enable the Peripheral */
;;;2553     __HAL_TIM_ENABLE(htim);
00003e  6800              LDR      r0,[r0,#0]
000040  6801              LDR      r1,[r0,#0]
000042  f0410101          ORR      r1,r1,#1
000046  6001              STR      r1,[r0,#0]
;;;2554     
;;;2555     /* Return function status */
;;;2556     return HAL_OK;
000048  2000              MOVS     r0,#0
;;;2557   }
00004a  4770              BX       lr
                  |L26.76|
00004c  6a11              LDR      r1,[r2,#0x20]
00004e  f0210101          BIC      r1,r1,#1
000052  6211              STR      r1,[r2,#0x20]
000054  6a11              LDR      r1,[r2,#0x20]
000056  f0410101          ORR      r1,r1,#1
00005a  6211              STR      r1,[r2,#0x20]
00005c  6801              LDR      r1,[r0,#0]            ;2533
00005e  68ca              LDR      r2,[r1,#0xc]          ;2533
000060  f0420202          ORR      r2,r2,#2              ;2533
000064  e00a              B        |L26.124|
                  |L26.102|
000066  f0210110          BIC      r1,r1,#0x10           ;2534
00006a  6211              STR      r1,[r2,#0x20]         ;2534
00006c  6a11              LDR      r1,[r2,#0x20]         ;2534
00006e  f0410110          ORR      r1,r1,#0x10           ;2534
000072  6211              STR      r1,[r2,#0x20]         ;2534
000074  6801              LDR      r1,[r0,#0]            ;2539
000076  68ca              LDR      r2,[r1,#0xc]          ;2539
000078  f0420204          ORR      r2,r2,#4              ;2539
                  |L26.124|
00007c  60ca              STR      r2,[r1,#0xc]          ;2533
00007e  e7de              B        |L26.62|
;;;2558   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_Stop PROC
;;;2476     */
;;;2477   HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
;;;2478   {
000002  b1f9              CBZ      r1,|L27.68|
;;;2479     /* Check the parameters */
;;;2480       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;2481       
;;;2482      /* Disable the Input Capture channels 1 and 2
;;;2483       (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
;;;2484     switch (Channel)
000004  2904              CMP      r1,#4
000006  6a11              LDR      r1,[r2,#0x20]
000008  d023              BEQ      |L27.82|
00000a  f0210101          BIC      r1,r1,#1
00000e  6211              STR      r1,[r2,#0x20]
000010  6a11              LDR      r1,[r2,#0x20]
000012  6211              STR      r1,[r2,#0x20]
000014  6801              LDR      r1,[r0,#0]
000016  6a0a              LDR      r2,[r1,#0x20]
000018  f0220210          BIC      r2,r2,#0x10
00001c  620a              STR      r2,[r1,#0x20]
00001e  6a0a              LDR      r2,[r1,#0x20]
000020  620a              STR      r2,[r1,#0x20]
                  |L27.34|
;;;2485     {
;;;2486       case TIM_CHANNEL_1:
;;;2487       {
;;;2488         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
;;;2489         break; 
;;;2490       }
;;;2491       case TIM_CHANNEL_2:
;;;2492       { 
;;;2493         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
;;;2494         break;
;;;2495       }  
;;;2496       default :
;;;2497       {
;;;2498        TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
;;;2499        TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
;;;2500        break; 
;;;2501       }
;;;2502     }  
;;;2503     /* Disable the Peripheral */
;;;2504     __HAL_TIM_DISABLE(htim);
000022  f2411111          MOV      r1,#0x1111
000026  6800              LDR      r0,[r0,#0]
000028  6a02              LDR      r2,[r0,#0x20]
00002a  420a              TST      r2,r1
00002c  d108              BNE      |L27.64|
00002e  6a01              LDR      r1,[r0,#0x20]
000030  f2404244          MOV      r2,#0x444
000034  4211              TST      r1,r2
000036  d103              BNE      |L27.64|
000038  6801              LDR      r1,[r0,#0]
00003a  f0210101          BIC      r1,r1,#1
00003e  6001              STR      r1,[r0,#0]
                  |L27.64|
;;;2505     
;;;2506     /* Return function status */
;;;2507     return HAL_OK;
000040  2000              MOVS     r0,#0
;;;2508   }
000042  4770              BX       lr
                  |L27.68|
000044  6a11              LDR      r1,[r2,#0x20]
000046  f0210101          BIC      r1,r1,#1
00004a  6211              STR      r1,[r2,#0x20]
00004c  6a11              LDR      r1,[r2,#0x20]
00004e  6211              STR      r1,[r2,#0x20]
000050  e7e7              B        |L27.34|
                  |L27.82|
000052  f0210110          BIC      r1,r1,#0x10           ;2489
000056  6211              STR      r1,[r2,#0x20]         ;2489
000058  6a11              LDR      r1,[r2,#0x20]         ;2489
00005a  6211              STR      r1,[r2,#0x20]         ;2489
00005c  e7e1              B        |L27.34|
;;;2509   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_Stop_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Encoder_Stop_DMA PROC
;;;2742     */
;;;2743   HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
000002  f04f0301          MOV      r3,#1
;;;2744   {
000006  b371              CBZ      r1,|L28.102|
;;;2745     /* Check the parameters */
;;;2746     assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
;;;2747     
;;;2748     /* Disable the Input Capture channels 1 and 2
;;;2749       (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
;;;2750     if(Channel == TIM_CHANNEL_1)
;;;2751     {
;;;2752       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
;;;2753       
;;;2754       /* Disable the capture compare DMA Request 1 */
;;;2755       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
;;;2756     }  
;;;2757     else if(Channel == TIM_CHANNEL_2)
000008  2904              CMP      r1,#4
00000a  6a11              LDR      r1,[r2,#0x20]
00000c  d037              BEQ      |L28.126|
00000e  f0210101          BIC      r1,r1,#1
000012  6211              STR      r1,[r2,#0x20]
000014  6a11              LDR      r1,[r2,#0x20]
000016  6211              STR      r1,[r2,#0x20]
000018  6801              LDR      r1,[r0,#0]
00001a  6a0a              LDR      r2,[r1,#0x20]
00001c  f0220210          BIC      r2,r2,#0x10
000020  620a              STR      r2,[r1,#0x20]
000022  6a0a              LDR      r2,[r1,#0x20]
000024  620a              STR      r2,[r1,#0x20]
;;;2758     {  
;;;2759       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
;;;2760       
;;;2761       /* Disable the capture compare DMA Request 2 */
;;;2762       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
;;;2763     }  
;;;2764     else
;;;2765     {
;;;2766       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
;;;2767       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
;;;2768       
;;;2769       /* Disable the capture compare DMA Request 1 and 2 */
;;;2770       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000026  6801              LDR      r1,[r0,#0]
000028  68ca              LDR      r2,[r1,#0xc]
00002a  f4227200          BIC      r2,r2,#0x200
00002e  60ca              STR      r2,[r1,#0xc]
;;;2771       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000030  6801              LDR      r1,[r0,#0]
000032  68ca              LDR      r2,[r1,#0xc]
000034  f4226280          BIC      r2,r2,#0x400
000038  f8c1200c          STR.W    r2,[r1,#0xc]
                  |L28.60|
;;;2772     }
;;;2773     
;;;2774     /* Disable the Peripheral */
;;;2775     __HAL_TIM_DISABLE(htim);
00003c  6801              LDR      r1,[r0,#0]
00003e  f2411211          MOV      r2,#0x1111
000042  f8d1c020          LDR      r12,[r1,#0x20]
000046  ea1c0f02          TST      r12,r2
00004a  d109              BNE      |L28.96|
00004c  6a0a              LDR      r2,[r1,#0x20]
00004e  f2404c44          MOV      r12,#0x444
000052  ea120f0c          TST      r2,r12
000056  d103              BNE      |L28.96|
000058  680a              LDR      r2,[r1,#0]
00005a  f0220201          BIC      r2,r2,#1
00005e  600a              STR      r2,[r1,#0]
                  |L28.96|
;;;2776     
;;;2777     /* Change the htim state */
;;;2778     htim->State = HAL_TIM_STATE_READY;
000060  63c3              STR      r3,[r0,#0x3c]
;;;2779     
;;;2780     /* Return function status */
;;;2781     return HAL_OK;
000062  2000              MOVS     r0,#0
;;;2782   }
000064  4770              BX       lr
                  |L28.102|
000066  e7ff              B        |L28.104|
                  |L28.104|
000068  6a11              LDR      r1,[r2,#0x20]
00006a  f0210101          BIC      r1,r1,#1
00006e  6211              STR      r1,[r2,#0x20]
000070  6a11              LDR      r1,[r2,#0x20]
000072  6211              STR      r1,[r2,#0x20]
000074  6801              LDR      r1,[r0,#0]            ;2755
000076  68ca              LDR      r2,[r1,#0xc]          ;2755
000078  f4227200          BIC      r2,r2,#0x200          ;2755
00007c  e008              B        |L28.144|
                  |L28.126|
00007e  f0210110          BIC      r1,r1,#0x10           ;2755
000082  6211              STR      r1,[r2,#0x20]         ;2755
000084  6a11              LDR      r1,[r2,#0x20]         ;2755
000086  6211              STR      r1,[r2,#0x20]         ;2755
000088  6801              LDR      r1,[r0,#0]            ;2762
00008a  68ca              LDR      r2,[r1,#0xc]          ;2762
00008c  f4226280          BIC      r2,r2,#0x400          ;2762
                  |L28.144|
000090  60ca              STR      r2,[r1,#0xc]          ;2762
000092  e7d3              B        |L28.60|
;;;2783   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Encoder_Stop_IT PROC
;;;2569     */
;;;2570   HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
000002  f04f0301          MOV      r3,#1
;;;2571   {
000006  b371              CBZ      r1,|L29.102|
;;;2572     /* Check the parameters */
;;;2573     assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;2574       
;;;2575     /* Disable the Input Capture channels 1 and 2
;;;2576       (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
;;;2577     if(Channel == TIM_CHANNEL_1)
;;;2578     {
;;;2579       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
;;;2580       
;;;2581       /* Disable the capture compare Interrupts 1 */
;;;2582     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
;;;2583     }  
;;;2584     else if(Channel == TIM_CHANNEL_2)
000008  2904              CMP      r1,#4
00000a  6a11              LDR      r1,[r2,#0x20]
00000c  d037              BEQ      |L29.126|
00000e  f0210101          BIC      r1,r1,#1
000012  6211              STR      r1,[r2,#0x20]
000014  6a11              LDR      r1,[r2,#0x20]
000016  6211              STR      r1,[r2,#0x20]
000018  6801              LDR      r1,[r0,#0]
00001a  6a0a              LDR      r2,[r1,#0x20]
00001c  f0220210          BIC      r2,r2,#0x10
000020  620a              STR      r2,[r1,#0x20]
000022  6a0a              LDR      r2,[r1,#0x20]
000024  620a              STR      r2,[r1,#0x20]
;;;2585     {  
;;;2586       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
;;;2587       
;;;2588       /* Disable the capture compare Interrupts 2 */
;;;2589     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
;;;2590     }  
;;;2591     else
;;;2592     {
;;;2593       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
;;;2594       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
;;;2595       
;;;2596       /* Disable the capture compare Interrupts 1 and 2 */
;;;2597       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000026  6801              LDR      r1,[r0,#0]
000028  68ca              LDR      r2,[r1,#0xc]
00002a  f0220202          BIC      r2,r2,#2
00002e  60ca              STR      r2,[r1,#0xc]
;;;2598       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000030  6801              LDR      r1,[r0,#0]
000032  68ca              LDR      r2,[r1,#0xc]
000034  f0220204          BIC      r2,r2,#4
000038  f8c1200c          STR.W    r2,[r1,#0xc]
                  |L29.60|
;;;2599     }
;;;2600       
;;;2601     /* Disable the Peripheral */
;;;2602     __HAL_TIM_DISABLE(htim);
00003c  6801              LDR      r1,[r0,#0]
00003e  f2411211          MOV      r2,#0x1111
000042  f8d1c020          LDR      r12,[r1,#0x20]
000046  ea1c0f02          TST      r12,r2
00004a  d109              BNE      |L29.96|
00004c  6a0a              LDR      r2,[r1,#0x20]
00004e  f2404c44          MOV      r12,#0x444
000052  ea120f0c          TST      r2,r12
000056  d103              BNE      |L29.96|
000058  680a              LDR      r2,[r1,#0]
00005a  f0220201          BIC      r2,r2,#1
00005e  600a              STR      r2,[r1,#0]
                  |L29.96|
;;;2603     
;;;2604     /* Change the htim state */
;;;2605     htim->State = HAL_TIM_STATE_READY;
000060  63c3              STR      r3,[r0,#0x3c]
;;;2606     
;;;2607     /* Return function status */
;;;2608     return HAL_OK;
000062  2000              MOVS     r0,#0
;;;2609   }
000064  4770              BX       lr
                  |L29.102|
000066  e7ff              B        |L29.104|
                  |L29.104|
000068  6a11              LDR      r1,[r2,#0x20]
00006a  f0210101          BIC      r1,r1,#1
00006e  6211              STR      r1,[r2,#0x20]
000070  6a11              LDR      r1,[r2,#0x20]
000072  6211              STR      r1,[r2,#0x20]
000074  6801              LDR      r1,[r0,#0]            ;2582
000076  68ca              LDR      r2,[r1,#0xc]          ;2582
000078  f0220202          BIC      r2,r2,#2              ;2582
00007c  e008              B        |L29.144|
                  |L29.126|
00007e  f0210110          BIC      r1,r1,#0x10           ;2582
000082  6211              STR      r1,[r2,#0x20]         ;2582
000084  6a11              LDR      r1,[r2,#0x20]         ;2582
000086  6211              STR      r1,[r2,#0x20]         ;2582
000088  6801              LDR      r1,[r0,#0]            ;2589
00008a  68ca              LDR      r2,[r1,#0xc]          ;2589
00008c  f0220204          BIC      r2,r2,#4              ;2589
                  |L29.144|
000090  60ca              STR      r2,[r1,#0xc]          ;2589
000092  e7d3              B        |L29.60|
;;;2610   
                          ENDP


                          AREA ||i.HAL_TIM_ErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ErrorCallback PROC
;;;4501     */
;;;4502   __weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;4503   {
;;;4504     /* Prevent unused argument(s) compilation warning */
;;;4505     UNUSED(htim);
;;;4506    
;;;4507     /* NOTE : This function Should not be modified, when the callback is needed,
;;;4508               the HAL_TIM_ErrorCallback could be implemented in the user file
;;;4509      */
;;;4510   }
;;;4511   
                          ENDP


                          AREA ||i.HAL_TIM_GenerateEvent||, CODE, READONLY, ALIGN=1

                  HAL_TIM_GenerateEvent PROC
;;;3817   
;;;3818   HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
000000  6b82              LDR      r2,[r0,#0x38]
;;;3819   {
;;;3820     /* Check the parameters */
;;;3821     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;3822     assert_param(IS_TIM_EVENT_SOURCE(EventSource));
;;;3823     
;;;3824     /* Process Locked */
;;;3825     __HAL_LOCK(htim);
000002  2a01              CMP      r2,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;3826     
;;;3827     /* Change the TIM state */
;;;3828     htim->State = HAL_TIM_STATE_BUSY;
;;;3829     
;;;3830     /* Set the event sources */
;;;3831     htim->Instance->EGR = EventSource;
;;;3832     
;;;3833     /* Change the TIM state */
;;;3834     htim->State = HAL_TIM_STATE_READY;
;;;3835     
;;;3836     __HAL_UNLOCK(htim);
;;;3837     
;;;3838     /* Return function status */
;;;3839     return HAL_OK;  
;;;3840   }
000008  4770              BXEQ     lr
00000a  2201              MOVS     r2,#1                 ;3825
00000c  2302              MOVS     r3,#2                 ;3828
00000e  63c3              STR      r3,[r0,#0x3c]         ;3828
000010  f8d0c000          LDR      r12,[r0,#0]           ;3831
000014  2300              MOVS     r3,#0                 ;3836
000016  f8cc1014          STR      r1,[r12,#0x14]        ;3831
00001a  63c2              STR      r2,[r0,#0x3c]         ;3834
00001c  6383              STR      r3,[r0,#0x38]         ;3839
00001e  4618              MOV      r0,r3                 ;3839
000020  4770              BX       lr
;;;3841   
                          ENDP


                          AREA ||i.HAL_TIM_IC_CaptureCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_CaptureCallback PROC
;;;4453     */
;;;4454   __weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;4455   {
;;;4456     /* Prevent unused argument(s) compilation warning */
;;;4457     UNUSED(htim);
;;;4458    
;;;4459     /* NOTE : This function Should not be modified, when the callback is needed,
;;;4460               the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
;;;4461      */
;;;4462   }
;;;4463   
                          ENDP


                          AREA ||i.HAL_TIM_IC_ConfigChannel||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_ConfigChannel PROC
;;;3050     */
;;;3051   HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
000000  6b83              LDR      r3,[r0,#0x38]
;;;3052   {
;;;3053     /* Check the parameters */
;;;3054     assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;3055     assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
;;;3056     assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
;;;3057     assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
;;;3058     assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
;;;3059     
;;;3060     __HAL_LOCK(htim);
000002  2b01              CMP      r3,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;3061     
;;;3062     htim->State = HAL_TIM_STATE_BUSY;
;;;3063     
;;;3064     if (Channel == TIM_CHANNEL_1)
;;;3065     {
;;;3066       /* TI1 Configuration */
;;;3067       TIM_TI1_SetConfig(htim->Instance,
;;;3068                  sConfig->ICPolarity,
;;;3069                  sConfig->ICSelection,
;;;3070                  sConfig->ICFilter);
;;;3071                  
;;;3072       /* Reset the IC1PSC Bits */
;;;3073       htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
;;;3074   
;;;3075       /* Set the IC1PSC value */
;;;3076       htim->Instance->CCMR1 |= sConfig->ICPrescaler;
;;;3077     }
;;;3078     else if (Channel == TIM_CHANNEL_2)
;;;3079     {
;;;3080       /* TI2 Configuration */
;;;3081       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;3082       
;;;3083       TIM_TI2_SetConfig(htim->Instance, 
;;;3084                         sConfig->ICPolarity,
;;;3085                         sConfig->ICSelection,
;;;3086                         sConfig->ICFilter);
;;;3087                  
;;;3088       /* Reset the IC2PSC Bits */
;;;3089       htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
;;;3090   
;;;3091       /* Set the IC2PSC value */
;;;3092       htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8);
;;;3093     }
;;;3094     else if (Channel == TIM_CHANNEL_3)
;;;3095     {
;;;3096       /* TI3 Configuration */
;;;3097       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
;;;3098       
;;;3099       TIM_TI3_SetConfig(htim->Instance,  
;;;3100                  sConfig->ICPolarity,
;;;3101                  sConfig->ICSelection,
;;;3102                  sConfig->ICFilter);
;;;3103                  
;;;3104       /* Reset the IC3PSC Bits */
;;;3105       htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
;;;3106   
;;;3107       /* Set the IC3PSC value */
;;;3108       htim->Instance->CCMR2 |= sConfig->ICPrescaler;
;;;3109     }
;;;3110     else
;;;3111     {
;;;3112       /* TI4 Configuration */
;;;3113       assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
;;;3114       
;;;3115       TIM_TI4_SetConfig(htim->Instance, 
;;;3116                  sConfig->ICPolarity,
;;;3117                  sConfig->ICSelection,
;;;3118                  sConfig->ICFilter);
;;;3119                  
;;;3120       /* Reset the IC4PSC Bits */
;;;3121       htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
;;;3122   
;;;3123       /* Set the IC4PSC value */
;;;3124       htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
;;;3125     }
;;;3126     
;;;3127     htim->State = HAL_TIM_STATE_READY;
;;;3128       
;;;3129     __HAL_UNLOCK(htim);
;;;3130     
;;;3131     return HAL_OK; 
;;;3132   }
000008  4770              BXEQ     lr
00000a  e92d03f0          PUSH     {r4-r9}               ;3052
00000e  2302              MOVS     r3,#2                 ;3062
000010  f04f0c01          MOV      r12,#1                ;3060
000014  f8c0c038          STR      r12,[r0,#0x38]        ;3062
000018  2a00              CMP      r2,#0                 ;3064
00001a  63c3              STR      r3,[r0,#0x3c]         ;3062
00001c  f04f04f0          MOV      r4,#0xf0              ;3062
000020  d036              BEQ      |L33.144|
000022  2a04              CMP      r2,#4                 ;3078
000024  f44f4370          MOV      r3,#0xf000            ;3078
000028  d07e              BEQ      |L33.296|
00002a  68ce              LDR      r6,[r1,#0xc]          ;3094
00002c  2a08              CMP      r2,#8                 ;3094
00002e  6802              LDR      r2,[r0,#0]            ;3115
000030  d07b              BEQ      |L33.298|
000032  e9d15400          LDRD     r5,r4,[r1,#0]         ;3094
000036  6a17              LDR      r7,[r2,#0x20]         ;3094
000038  f44f4820          MOV      r8,#0xa000            ;3094
00003c  f4275980          BIC      r9,r7,#0x1000         ;3094
000040  f8c29020          STR      r9,[r2,#0x20]         ;3094
000044  ea033706          AND      r7,r3,r6,LSL #12      ;3094
000048  69d6              LDR      r6,[r2,#0x1c]         ;3094
00004a  6a13              LDR      r3,[r2,#0x20]         ;3094
00004c  ea083805          AND      r8,r8,r5,LSL #12      ;3094
000050  f4267540          BIC      r5,r6,#0x300          ;3094
000054  ea452404          ORR      r4,r5,r4,LSL #8       ;3094
000058  f4234320          BIC      r3,r3,#0xa000         ;3094
00005c  f4244470          BIC      r4,r4,#0xf000         ;3094
000060  433c              ORRS     r4,r4,r7              ;3094
000062  61d4              STR      r4,[r2,#0x1c]         ;3094
000064  ea480303          ORR      r3,r8,r3              ;3094
000068  6213              STR      r3,[r2,#0x20]         ;3094
00006a  6802              LDR      r2,[r0,#0]            ;3121
00006c  69d3              LDR      r3,[r2,#0x1c]         ;3121
00006e  f4236340          BIC      r3,r3,#0xc00          ;3121
000072  61d3              STR      r3,[r2,#0x1c]         ;3121
000074  6802              LDR      r2,[r0,#0]            ;3124
000076  6889              LDR      r1,[r1,#8]            ;3124
000078  69d3              LDR      r3,[r2,#0x1c]         ;3124
00007a  ea432101          ORR      r1,r3,r1,LSL #8       ;3124
                  |L33.126|
00007e  61d1              STR      r1,[r2,#0x1c]         ;3108
                  |L33.128|
000080  2100              MOVS     r1,#0                 ;3129
000082  f8c0c03c          STR      r12,[r0,#0x3c]        ;3127
000086  6381              STR      r1,[r0,#0x38]         ;3131
000088  4608              MOV      r0,r1                 ;3131
00008a  e8bd03f0          POP      {r4-r9}
00008e  4770              BX       lr
                  |L33.144|
000090  6802              LDR      r2,[r0,#0]            ;3067
000092  e9d16800          LDRD     r6,r8,[r1,#0]         ;3067
000096  68cd              LDR      r5,[r1,#0xc]          ;3067
000098  6a13              LDR      r3,[r2,#0x20]         ;3067
00009a  f1a24780          SUB      r7,r2,#0x40000000     ;3067
00009e  f5b73780          SUBS     r7,r7,#0x10000        ;3067
0000a2  f0230301          BIC      r3,r3,#1              ;3067
0000a6  6213              STR      r3,[r2,#0x20]         ;3067
0000a8  6993              LDR      r3,[r2,#0x18]         ;3067
0000aa  6a17              LDR      r7,[r2,#0x20]         ;3067
0000ac  bf18              IT       NE                    ;3067
0000ae  f1b24f80          CMPNE    r2,#0x40000000        ;3067
0000b2  d01f              BEQ      |L33.244|
0000b4  f1a24980          SUB      r9,r2,#0x40000000     ;3067
0000b8  f5b96980          SUBS     r9,r9,#0x400          ;3067
0000bc  bf1c              ITT      NE                    ;3067
0000be  f1a24980          SUBNE    r9,r2,#0x40000000     ;3067
0000c2  f5b96900          SUBSNE   r9,r9,#0x800          ;3067
0000c6  d015              BEQ      |L33.244|
0000c8  f1a24980          SUB      r9,r2,#0x40000000     ;3067
0000cc  f5b96940          SUBS     r9,r9,#0xc00          ;3067
0000d0  bf1c              ITT      NE                    ;3067
0000d2  f1a24980          SUBNE    r9,r2,#0x40000000     ;3067
0000d6  f5b93982          SUBSNE   r9,r9,#0x10400        ;3067
0000da  d00b              BEQ      |L33.244|
0000dc  f1a24980          SUB      r9,r2,#0x40000000     ;3067
0000e0  f5b939a0          SUBS     r9,r9,#0x14000        ;3067
0000e4  bf1e              ITTT     NE                    ;3067
0000e6  f1a24980          SUBNE    r9,r2,#0x40000000     ;3067
0000ea  f5b959c0          SUBSNE   r9,r9,#0x1800         ;3067
0000ee  f0430301          ORRNE    r3,r3,#1              ;3067
0000f2  d103              BNE      |L33.252|
                  |L33.244|
0000f4  f0230303          BIC      r3,r3,#3              ;3067
0000f8  ea430308          ORR      r3,r3,r8              ;3067
                  |L33.252|
0000fc  ea041505          AND      r5,r4,r5,LSL #4       ;3067
000100  f02303f0          BIC      r3,r3,#0xf0           ;3067
000104  432b              ORRS     r3,r3,r5              ;3067
000106  6193              STR      r3,[r2,#0x18]         ;3067
000108  f027040a          BIC      r4,r7,#0xa            ;3067
00010c  f006060a          AND      r6,r6,#0xa            ;3067
000110  4334              ORRS     r4,r4,r6              ;3067
000112  6214              STR      r4,[r2,#0x20]         ;3067
000114  6802              LDR      r2,[r0,#0]            ;3073
000116  6993              LDR      r3,[r2,#0x18]         ;3073
000118  f023030c          BIC      r3,r3,#0xc            ;3073
00011c  6193              STR      r3,[r2,#0x18]         ;3073
00011e  6802              LDR      r2,[r0,#0]            ;3076
000120  6889              LDR      r1,[r1,#8]            ;3076
000122  6993              LDR      r3,[r2,#0x18]         ;3076
000124  4319              ORRS     r1,r1,r3              ;3076
000126  e029              B        |L33.380|
                  |L33.296|
000128  e000              B        |L33.300|
                  |L33.298|
00012a  e029              B        |L33.384|
                  |L33.300|
00012c  6802              LDR      r2,[r0,#0]            ;3083
00012e  e9d15400          LDRD     r5,r4,[r1,#0]         ;3083
000132  68ce              LDR      r6,[r1,#0xc]          ;3083
000134  6a17              LDR      r7,[r2,#0x20]         ;3083
000136  f04f08a0          MOV      r8,#0xa0              ;3083
00013a  f0270910          BIC      r9,r7,#0x10           ;3083
00013e  f8c29020          STR      r9,[r2,#0x20]         ;3083
000142  ea033706          AND      r7,r3,r6,LSL #12      ;3083
000146  6993              LDR      r3,[r2,#0x18]         ;3083
000148  6a16              LDR      r6,[r2,#0x20]         ;3083
00014a  ea081805          AND      r8,r8,r5,LSL #4       ;3083
00014e  f4237540          BIC      r5,r3,#0x300          ;3083
000152  ea452404          ORR      r4,r5,r4,LSL #8       ;3083
000156  f02603a0          BIC      r3,r6,#0xa0           ;3083
00015a  f4244470          BIC      r4,r4,#0xf000         ;3083
00015e  433c              ORRS     r4,r4,r7              ;3083
000160  6194              STR      r4,[r2,#0x18]         ;3083
000162  ea480303          ORR      r3,r8,r3              ;3083
000166  6213              STR      r3,[r2,#0x20]         ;3083
000168  6802              LDR      r2,[r0,#0]            ;3089
00016a  6993              LDR      r3,[r2,#0x18]         ;3089
00016c  f4236340          BIC      r3,r3,#0xc00          ;3089
000170  6193              STR      r3,[r2,#0x18]         ;3089
000172  6802              LDR      r2,[r0,#0]            ;3092
000174  6889              LDR      r1,[r1,#8]            ;3092
000176  6993              LDR      r3,[r2,#0x18]         ;3092
000178  ea432101          ORR      r1,r3,r1,LSL #8       ;3092
                  |L33.380|
00017c  6191              STR      r1,[r2,#0x18]         ;3092
00017e  e77f              B        |L33.128|
                  |L33.384|
000180  e9d15300          LDRD     r5,r3,[r1,#0]         ;3092
000184  6a17              LDR      r7,[r2,#0x20]         ;3092
000186  f44f6820          MOV      r8,#0xa00             ;3092
00018a  f4277980          BIC      r9,r7,#0x100          ;3092
00018e  f8c29020          STR      r9,[r2,#0x20]         ;3092
000192  ea041706          AND      r7,r4,r6,LSL #4       ;3092
000196  69d4              LDR      r4,[r2,#0x1c]         ;3092
000198  6a16              LDR      r6,[r2,#0x20]         ;3092
00019a  ea082805          AND      r8,r8,r5,LSL #8       ;3092
00019e  f0240403          BIC      r4,r4,#3              ;3092
0001a2  4323              ORRS     r3,r3,r4              ;3092
0001a4  f4266520          BIC      r5,r6,#0xa00          ;3092
0001a8  f02303f0          BIC      r3,r3,#0xf0           ;3092
0001ac  433b              ORRS     r3,r3,r7              ;3092
0001ae  61d3              STR      r3,[r2,#0x1c]         ;3092
0001b0  ea480405          ORR      r4,r8,r5              ;3092
0001b4  6214              STR      r4,[r2,#0x20]         ;3092
0001b6  6802              LDR      r2,[r0,#0]            ;3105
0001b8  69d3              LDR      r3,[r2,#0x1c]         ;3105
0001ba  f023030c          BIC      r3,r3,#0xc            ;3105
0001be  61d3              STR      r3,[r2,#0x1c]         ;3105
0001c0  6802              LDR      r2,[r0,#0]            ;3108
0001c2  6889              LDR      r1,[r1,#8]            ;3108
0001c4  69d3              LDR      r3,[r2,#0x1c]         ;3108
0001c6  4319              ORRS     r1,r1,r3              ;3108
0001c8  e759              B        |L33.126|
;;;3133   
                          ENDP


                          AREA ||i.HAL_TIM_IC_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_DeInit PROC
;;;1555     */
;;;1556   HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;1557   {
000002  4604              MOV      r4,r0
;;;1558     /* Check the parameters */
;;;1559     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;1560   
;;;1561     htim->State = HAL_TIM_STATE_BUSY;
;;;1562     
;;;1563     /* Disable the TIM Peripheral Clock */
;;;1564     __HAL_TIM_DISABLE(htim);
000004  f2411111          MOV      r1,#0x1111
000008  2002              MOVS     r0,#2                 ;1561
00000a  63e0              STR      r0,[r4,#0x3c]         ;1561
00000c  6820              LDR      r0,[r4,#0]
00000e  6a02              LDR      r2,[r0,#0x20]
000010  420a              TST      r2,r1
000012  d108              BNE      |L34.38|
000014  6a01              LDR      r1,[r0,#0x20]
000016  f2404244          MOV      r2,#0x444
00001a  4211              TST      r1,r2
00001c  d103              BNE      |L34.38|
00001e  6801              LDR      r1,[r0,#0]
000020  f0210101          BIC      r1,r1,#1
000024  6001              STR      r1,[r0,#0]
                  |L34.38|
;;;1565       
;;;1566     /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
;;;1567     HAL_TIM_IC_MspDeInit(htim);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       HAL_TIM_IC_MspDeInit
;;;1568       
;;;1569     /* Change TIM state */  
;;;1570     htim->State = HAL_TIM_STATE_RESET;
00002c  2000              MOVS     r0,#0
00002e  63e0              STR      r0,[r4,#0x3c]
;;;1571   
;;;1572     /* Release Lock */
;;;1573     __HAL_UNLOCK(htim);
000030  63a0              STR      r0,[r4,#0x38]
;;;1574   
;;;1575     return HAL_OK;
;;;1576   }
000032  bd10              POP      {r4,pc}
;;;1577   
                          ENDP


                          AREA ||i.HAL_TIM_IC_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_GetState PROC
;;;4569     */
;;;4570   HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim)
000000  6bc0              LDR      r0,[r0,#0x3c]
;;;4571   {
;;;4572     return htim->State;
;;;4573   }
000002  4770              BX       lr
;;;4574   
                          ENDP


                          AREA ||i.HAL_TIM_IC_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_Init PROC
;;;1516     */
;;;1517   HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
000000  2800              CMP      r0,#0
;;;1518   {
;;;1519     /* Check the TIM handle allocation */
;;;1520     if(htim == NULL)
;;;1521     {
;;;1522       return HAL_ERROR;
000002  bf04              ITT      EQ
000004  2001              MOVEQ    r0,#1
;;;1523     }
;;;1524   
;;;1525     /* Check the parameters */
;;;1526     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;1527     assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;1528     assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 
;;;1529   
;;;1530     if(htim->State == HAL_TIM_STATE_RESET)
;;;1531     { 
;;;1532       /* Allocate lock resource and initialize it */
;;;1533       htim->Lock = HAL_UNLOCKED;   
;;;1534       /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;1535       HAL_TIM_IC_MspInit(htim);
;;;1536     }
;;;1537     
;;;1538     /* Set the TIM state */
;;;1539     htim->State= HAL_TIM_STATE_BUSY;   
;;;1540     
;;;1541     /* Init the base time for the input capture */  
;;;1542     TIM_Base_SetConfig(htim->Instance, &htim->Init); 
;;;1543      
;;;1544     /* Initialize the TIM state*/
;;;1545     htim->State= HAL_TIM_STATE_READY;
;;;1546     
;;;1547     return HAL_OK;
;;;1548   }
000006  4770              BXEQ     lr
000008  b510              PUSH     {r4,lr}               ;1518
00000a  4604              MOV      r4,r0                 ;1518
00000c  6bc0              LDR      r0,[r0,#0x3c]         ;1530
00000e  b920              CBNZ     r0,|L36.26|
000010  2000              MOVS     r0,#0                 ;1533
000012  63a0              STR      r0,[r4,#0x38]         ;1535
000014  4620              MOV      r0,r4                 ;1535
000016  f7fffffe          BL       HAL_TIM_IC_MspInit
                  |L36.26|
00001a  2002              MOVS     r0,#2                 ;1539
00001c  63e0              STR      r0,[r4,#0x3c]         ;1539
00001e  6820              LDR      r0,[r4,#0]            ;1542
000020  1d21              ADDS     r1,r4,#4              ;1542
000022  f7fffffe          BL       TIM_Base_SetConfig
000026  2001              MOVS     r0,#1                 ;1545
000028  63e0              STR      r0,[r4,#0x3c]         ;1545
00002a  2000              MOVS     r0,#0                 ;1547
00002c  bd10              POP      {r4,pc}
;;;1549   
                          ENDP


                          AREA ||i.HAL_TIM_IC_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_MspDeInit PROC
;;;1599     */
;;;1600   __weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1601   {
;;;1602     /* Prevent unused argument(s) compilation warning */
;;;1603     UNUSED(htim);
;;;1604      
;;;1605     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1606               the HAL_TIM_IC_MspDeInit could be implemented in the user file
;;;1607      */
;;;1608   }
;;;1609   
                          ENDP


                          AREA ||i.HAL_TIM_IC_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_MspInit PROC
;;;1583     */
;;;1584   __weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1585   {
;;;1586     /* Prevent unused argument(s) compilation warning */
;;;1587     UNUSED(htim);
;;;1588    
;;;1589     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1590               the HAL_TIM_IC_MspInit could be implemented in the user file
;;;1591      */
;;;1592   }
;;;1593   
                          ENDP


                          AREA ||i.HAL_TIM_IC_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_Start PROC
;;;1621     */
;;;1622   HAL_StatusTypeDef HAL_TIM_IC_Start (TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
000002  2301              MOVS     r3,#1
000004  fa03f101          LSL      r1,r3,r1
000008  6a13              LDR      r3,[r2,#0x20]
00000a  438b              BICS     r3,r3,r1
00000c  6213              STR      r3,[r2,#0x20]
00000e  6a13              LDR      r3,[r2,#0x20]
000010  4319              ORRS     r1,r1,r3
000012  6211              STR      r1,[r2,#0x20]
;;;1623   {
;;;1624     /* Check the parameters */
;;;1625     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1626     
;;;1627     /* Enable the Input Capture channel */
;;;1628     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;1629       
;;;1630     /* Enable the Peripheral */
;;;1631     __HAL_TIM_ENABLE(htim);  
000014  6800              LDR      r0,[r0,#0]
000016  6801              LDR      r1,[r0,#0]
000018  f0410101          ORR      r1,r1,#1
00001c  6001              STR      r1,[r0,#0]
;;;1632   
;;;1633     /* Return function status */
;;;1634     return HAL_OK;  
00001e  2000              MOVS     r0,#0
;;;1635   } 
000020  4770              BX       lr
;;;1636   
                          ENDP


                          AREA ||i.HAL_TIM_IC_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_IC_Start_DMA PROC
;;;1798     */
;;;1799   HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;1800   {
000002  4604              MOV      r4,r0
;;;1801     /* Check the parameters */
;;;1802     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1803     assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
;;;1804     
;;;1805     if((htim->State == HAL_TIM_STATE_BUSY))
000004  6bc0              LDR      r0,[r0,#0x3c]
000006  460d              MOV      r5,r1                 ;1800
000008  2802              CMP      r0,#2
;;;1806     {
;;;1807        return HAL_BUSY;
;;;1808     }
;;;1809     else if((htim->State == HAL_TIM_STATE_READY))
;;;1810     {
;;;1811       if((pData == 0 ) && (Length > 0)) 
;;;1812       {
;;;1813         return HAL_ERROR;                                    
;;;1814       }
;;;1815       else
;;;1816       {
;;;1817         htim->State = HAL_TIM_STATE_BUSY;
;;;1818       }
;;;1819     }  
;;;1820      
;;;1821     switch (Channel)
;;;1822     {
;;;1823       case TIM_CHANNEL_1:
;;;1824       {
;;;1825         /* Set the DMA Period elapsed callback */
;;;1826         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
;;;1827        
;;;1828         /* Set the DMA error callback */
;;;1829         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1830         
;;;1831         /* Enable the DMA Stream */
;;;1832         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length); 
;;;1833         
;;;1834         /* Enable the TIM Capture/Compare 1 DMA request */      
;;;1835         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;1836       }
;;;1837       break;
;;;1838       
;;;1839       case TIM_CHANNEL_2:
;;;1840       {
;;;1841         /* Set the DMA Period elapsed callback */
;;;1842         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
;;;1843        
;;;1844         /* Set the DMA error callback */
;;;1845         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1846         
;;;1847         /* Enable the DMA Stream */
;;;1848         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
;;;1849         
;;;1850         /* Enable the TIM Capture/Compare 2  DMA request */
;;;1851         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;1852       }
;;;1853       break;
;;;1854       
;;;1855       case TIM_CHANNEL_3:
;;;1856       {
;;;1857         /* Set the DMA Period elapsed callback */
;;;1858         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
;;;1859        
;;;1860         /* Set the DMA error callback */
;;;1861         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1862         
;;;1863         /* Enable the DMA Stream */
;;;1864         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
;;;1865         
;;;1866         /* Enable the TIM Capture/Compare 3  DMA request */
;;;1867         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;1868       }
;;;1869       break;
;;;1870       
;;;1871       case TIM_CHANNEL_4:
;;;1872       {
;;;1873         /* Set the DMA Period elapsed callback */
;;;1874         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
;;;1875        
;;;1876         /* Set the DMA error callback */
;;;1877         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1878         
;;;1879         /* Enable the DMA Stream */
;;;1880         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
;;;1881         
;;;1882         /* Enable the TIM Capture/Compare 4  DMA request */
;;;1883         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;1884       }
;;;1885       break;
;;;1886       
;;;1887       default:
;;;1888       break;
;;;1889     }
;;;1890   
;;;1891     /* Enable the Input Capture channel */
;;;1892     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;1893      
;;;1894     /* Enable the Peripheral */
;;;1895     __HAL_TIM_ENABLE(htim); 
;;;1896     
;;;1897     /* Return function status */
;;;1898     return HAL_OK;
;;;1899   }
00000a  bf08              IT       EQ
00000c  bd70              POPEQ    {r4-r6,pc}
00000e  6be0              LDR      r0,[r4,#0x3c]         ;1809
000010  2801              CMP      r0,#1                 ;1809
000012  d106              BNE      |L40.34|
000014  b91a              CBNZ     r2,|L40.30|
000016  2b00              CMP      r3,#0                 ;1811
000018  bf1c              ITT      NE                    ;1813
00001a  2001              MOVNE    r0,#1                 ;1813
00001c  bd70              POPNE    {r4-r6,pc}
                  |L40.30|
00001e  2002              MOVS     r0,#2                 ;1817
000020  63e0              STR      r0,[r4,#0x3c]         ;1817
                  |L40.34|
000022  482d              LDR      r0,|L40.216|
000024  492d              LDR      r1,|L40.220|
000026  b135              CBZ      r5,|L40.54|
000028  2d04              CMP      r5,#4                 ;1821
00002a  d014              BEQ      |L40.86|
00002c  2d08              CMP      r5,#8                 ;1821
00002e  d022              BEQ      |L40.118|
000030  2d0c              CMP      r5,#0xc               ;1821
000032  d030              BEQ      |L40.150|
000034  e03f              B        |L40.182|
                  |L40.54|
000036  f8d4c020          LDR      r12,[r4,#0x20]        ;1826
00003a  f8cc0040          STR      r0,[r12,#0x40]        ;1829
00003e  6a20              LDR      r0,[r4,#0x20]         ;1829
000040  6501              STR      r1,[r0,#0x50]         ;1832
000042  6821              LDR      r1,[r4,#0]            ;1832
000044  6a20              LDR      r0,[r4,#0x20]         ;1832
000046  3134              ADDS     r1,r1,#0x34           ;1832
000048  f7fffffe          BL       HAL_DMA_Start_IT
00004c  6820              LDR      r0,[r4,#0]            ;1835
00004e  68c1              LDR      r1,[r0,#0xc]          ;1835
000050  f4417100          ORR      r1,r1,#0x200          ;1835
000054  e02e              B        |L40.180|
                  |L40.86|
000056  f8d4c024          LDR      r12,[r4,#0x24]        ;1842
00005a  f8cc0040          STR      r0,[r12,#0x40]        ;1845
00005e  6a60              LDR      r0,[r4,#0x24]         ;1845
000060  6501              STR      r1,[r0,#0x50]         ;1848
000062  6821              LDR      r1,[r4,#0]            ;1848
000064  6a60              LDR      r0,[r4,#0x24]         ;1848
000066  3138              ADDS     r1,r1,#0x38           ;1848
000068  f7fffffe          BL       HAL_DMA_Start_IT
00006c  6820              LDR      r0,[r4,#0]            ;1851
00006e  68c1              LDR      r1,[r0,#0xc]          ;1851
000070  f4416180          ORR      r1,r1,#0x400          ;1851
000074  e01e              B        |L40.180|
                  |L40.118|
000076  f8d4c028          LDR      r12,[r4,#0x28]        ;1858
00007a  f8cc0040          STR      r0,[r12,#0x40]        ;1861
00007e  6aa0              LDR      r0,[r4,#0x28]         ;1861
000080  6501              STR      r1,[r0,#0x50]         ;1864
000082  6821              LDR      r1,[r4,#0]            ;1864
000084  6aa0              LDR      r0,[r4,#0x28]         ;1864
000086  313c              ADDS     r1,r1,#0x3c           ;1864
000088  f7fffffe          BL       HAL_DMA_Start_IT
00008c  6820              LDR      r0,[r4,#0]            ;1867
00008e  68c1              LDR      r1,[r0,#0xc]          ;1867
000090  f4416100          ORR      r1,r1,#0x800          ;1867
000094  e00e              B        |L40.180|
                  |L40.150|
000096  f8d4c02c          LDR      r12,[r4,#0x2c]        ;1874
00009a  f8cc0040          STR      r0,[r12,#0x40]        ;1877
00009e  6ae0              LDR      r0,[r4,#0x2c]         ;1877
0000a0  6501              STR      r1,[r0,#0x50]         ;1880
0000a2  6821              LDR      r1,[r4,#0]            ;1880
0000a4  6ae0              LDR      r0,[r4,#0x2c]         ;1880
0000a6  3140              ADDS     r1,r1,#0x40           ;1880
0000a8  f7fffffe          BL       HAL_DMA_Start_IT
0000ac  6820              LDR      r0,[r4,#0]            ;1883
0000ae  68c1              LDR      r1,[r0,#0xc]          ;1883
0000b0  f4415180          ORR      r1,r1,#0x1000         ;1883
                  |L40.180|
0000b4  60c1              STR      r1,[r0,#0xc]          ;1867
                  |L40.182|
0000b6  6820              LDR      r0,[r4,#0]            ;1867
0000b8  2101              MOVS     r1,#1                 ;1867
0000ba  40a9              LSLS     r1,r1,r5              ;1867
0000bc  6a02              LDR      r2,[r0,#0x20]         ;1867
0000be  438a              BICS     r2,r2,r1              ;1867
0000c0  6202              STR      r2,[r0,#0x20]         ;1867
0000c2  6a02              LDR      r2,[r0,#0x20]         ;1867
0000c4  4311              ORRS     r1,r1,r2              ;1867
0000c6  6201              STR      r1,[r0,#0x20]         ;1867
0000c8  6820              LDR      r0,[r4,#0]            ;1895
0000ca  6801              LDR      r1,[r0,#0]            ;1895
0000cc  f0410101          ORR      r1,r1,#1              ;1895
0000d0  6001              STR      r1,[r0,#0]            ;1895
0000d2  2000              MOVS     r0,#0                 ;1898
0000d4  bd70              POP      {r4-r6,pc}
;;;1900   
                          ENDP

0000d6  0000              DCW      0x0000
                  |L40.216|
                          DCD      TIM_DMACaptureCplt
                  |L40.220|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIM_IC_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_Start_IT PROC
;;;1675     */
;;;1676   HAL_StatusTypeDef HAL_TIM_IC_Start_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
;;;1677   {
;;;1678     /* Check the parameters */
;;;1679     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1680     
;;;1681     switch (Channel)
000002  2900              CMP      r1,#0
;;;1682     {
;;;1683       case TIM_CHANNEL_1:
;;;1684       {       
;;;1685         /* Enable the TIM Capture/Compare 1 interrupt */
;;;1686         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000004  bf04              ITT      EQ
000006  68d3              LDREQ    r3,[r2,#0xc]
000008  f0430302          ORREQ    r3,r3,#2
00000c  d011              BEQ      |L41.50|
00000e  2904              CMP      r1,#4                 ;1681
;;;1687       }
;;;1688       break;
;;;1689       
;;;1690       case TIM_CHANNEL_2:
;;;1691       {
;;;1692         /* Enable the TIM Capture/Compare 2 interrupt */
;;;1693         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000010  bf04              ITT      EQ
000012  68d3              LDREQ    r3,[r2,#0xc]
000014  f0430304          ORREQ    r3,r3,#4
000018  d00b              BEQ      |L41.50|
00001a  2908              CMP      r1,#8                 ;1681
;;;1694       }
;;;1695       break;
;;;1696       
;;;1697       case TIM_CHANNEL_3:
;;;1698       {
;;;1699         /* Enable the TIM Capture/Compare 3 interrupt */
;;;1700         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
00001c  bf04              ITT      EQ
00001e  68d3              LDREQ    r3,[r2,#0xc]
000020  f0430308          ORREQ    r3,r3,#8
000024  d005              BEQ      |L41.50|
000026  290c              CMP      r1,#0xc               ;1681
;;;1701       }
;;;1702       break;
;;;1703       
;;;1704       case TIM_CHANNEL_4:
;;;1705       {
;;;1706         /* Enable the TIM Capture/Compare 4 interrupt */
;;;1707         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000028  bf04              ITT      EQ
00002a  68d3              LDREQ    r3,[r2,#0xc]
00002c  f0430310          ORREQ    r3,r3,#0x10
000030  d100              BNE      |L41.52|
                  |L41.50|
000032  60d3              STR      r3,[r2,#0xc]          ;1700
                  |L41.52|
000034  2301              MOVS     r3,#1                 ;1700
000036  6802              LDR      r2,[r0,#0]            ;1700
000038  fa03f101          LSL      r1,r3,r1              ;1700
00003c  6a13              LDR      r3,[r2,#0x20]         ;1700
00003e  438b              BICS     r3,r3,r1              ;1700
000040  6213              STR      r3,[r2,#0x20]         ;1700
000042  6a13              LDR      r3,[r2,#0x20]         ;1700
000044  4319              ORRS     r1,r1,r3              ;1700
000046  6211              STR      r1,[r2,#0x20]         ;1700
;;;1708       }
;;;1709       break;
;;;1710       
;;;1711       default:
;;;1712       break;
;;;1713     }  
;;;1714     /* Enable the Input Capture channel */
;;;1715     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;1716       
;;;1717     /* Enable the Peripheral */
;;;1718     __HAL_TIM_ENABLE(htim);  
000048  6800              LDR      r0,[r0,#0]
00004a  6801              LDR      r1,[r0,#0]
00004c  f0410101          ORR      r1,r1,#1
000050  6001              STR      r1,[r0,#0]
;;;1719   
;;;1720     /* Return function status */
;;;1721     return HAL_OK;  
000052  2000              MOVS     r0,#0
;;;1722   } 
000054  4770              BX       lr
;;;1723   
                          ENDP


                          AREA ||i.HAL_TIM_IC_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_Stop PROC
;;;1648     */
;;;1649   HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;1650   { 
000004  6802              LDR      r2,[r0,#0]
000006  f04f0c01          MOV      r12,#1
;;;1651     /* Check the parameters */
;;;1652     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1653     
;;;1654     /* Disable the Input Capture channel */
;;;1655     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
00000a  2300              MOVS     r3,#0
00000c  fa0cfc01          LSL      r12,r12,r1
000010  6a14              LDR      r4,[r2,#0x20]
000012  fa03f101          LSL      r1,r3,r1
000016  ea240c0c          BIC      r12,r4,r12
00001a  f8c2c020          STR      r12,[r2,#0x20]
00001e  6a13              LDR      r3,[r2,#0x20]
000020  4319              ORRS     r1,r1,r3
000022  6211              STR      r1,[r2,#0x20]
;;;1656     
;;;1657     /* Disable the Peripheral */
;;;1658     __HAL_TIM_DISABLE(htim); 
000024  6800              LDR      r0,[r0,#0]
000026  f2411111          MOV      r1,#0x1111
00002a  6a02              LDR      r2,[r0,#0x20]
00002c  420a              TST      r2,r1
00002e  d108              BNE      |L42.66|
000030  6a01              LDR      r1,[r0,#0x20]
000032  f2404244          MOV      r2,#0x444
000036  4211              TST      r1,r2
000038  d103              BNE      |L42.66|
00003a  6801              LDR      r1,[r0,#0]
00003c  f0210101          BIC      r1,r1,#1
000040  6001              STR      r1,[r0,#0]
                  |L42.66|
;;;1659     
;;;1660     /* Return function status */
;;;1661     return HAL_OK;
;;;1662   }
000042  f85d4b04          POP.W    {r4}
000046  2000              MOVS     r0,#0                 ;1661
000048  4770              BX       lr
;;;1663   
                          ENDP


                          AREA ||i.HAL_TIM_IC_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_Stop_DMA PROC
;;;1912     */
;;;1913   HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b430              PUSH     {r4,r5}
;;;1914   {
;;;1915     /* Check the parameters */
;;;1916     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1917     assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
;;;1918     
;;;1919     switch (Channel)
000002  6802              LDR      r2,[r0,#0]
000004  2900              CMP      r1,#0
;;;1920     {
;;;1921       case TIM_CHANNEL_1:
;;;1922       {       
;;;1923         /* Disable the TIM Capture/Compare 1 DMA request */
;;;1924         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000006  bf04              ITT      EQ
000008  68d3              LDREQ    r3,[r2,#0xc]
00000a  f4237300          BICEQ    r3,r3,#0x200
00000e  d011              BEQ      |L43.52|
000010  2904              CMP      r1,#4                 ;1919
;;;1925       }
;;;1926       break;
;;;1927       
;;;1928       case TIM_CHANNEL_2:
;;;1929       {
;;;1930         /* Disable the TIM Capture/Compare 2 DMA request */
;;;1931         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000012  bf04              ITT      EQ
000014  68d3              LDREQ    r3,[r2,#0xc]
000016  f4236380          BICEQ    r3,r3,#0x400
00001a  d00b              BEQ      |L43.52|
00001c  2908              CMP      r1,#8                 ;1919
;;;1932       }
;;;1933       break;
;;;1934       
;;;1935       case TIM_CHANNEL_3:
;;;1936       {
;;;1937         /* Disable the TIM Capture/Compare 3  DMA request */
;;;1938         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
00001e  bf04              ITT      EQ
000020  68d3              LDREQ    r3,[r2,#0xc]
000022  f4236300          BICEQ    r3,r3,#0x800
000026  d005              BEQ      |L43.52|
000028  290c              CMP      r1,#0xc               ;1919
;;;1939       }
;;;1940       break;
;;;1941       
;;;1942       case TIM_CHANNEL_4:
;;;1943       {
;;;1944         /* Disable the TIM Capture/Compare 4  DMA request */
;;;1945         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
00002a  bf04              ITT      EQ
00002c  68d3              LDREQ    r3,[r2,#0xc]
00002e  f4235380          BICEQ    r3,r3,#0x1000
000032  d100              BNE      |L43.54|
                  |L43.52|
000034  60d3              STR      r3,[r2,#0xc]          ;1938
                  |L43.54|
000036  2301              MOVS     r3,#1                 ;1938
000038  6802              LDR      r2,[r0,#0]            ;1938
;;;1946       }
;;;1947       break;
;;;1948       
;;;1949       default:
;;;1950       break;
;;;1951     }
;;;1952   
;;;1953     /* Disable the Input Capture channel */
;;;1954     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
00003a  f04f0c00          MOV      r12,#0
00003e  fa03f401          LSL      r4,r3,r1
000042  6a15              LDR      r5,[r2,#0x20]
000044  fa0cf101          LSL      r1,r12,r1
000048  ea250404          BIC      r4,r5,r4
00004c  6214              STR      r4,[r2,#0x20]
00004e  f8d2c020          LDR      r12,[r2,#0x20]
000052  ea4c0101          ORR      r1,r12,r1
000056  6211              STR      r1,[r2,#0x20]
;;;1955     
;;;1956     /* Disable the Peripheral */
;;;1957     __HAL_TIM_DISABLE(htim); 
000058  6801              LDR      r1,[r0,#0]
00005a  f2411211          MOV      r2,#0x1111
00005e  f8d1c020          LDR      r12,[r1,#0x20]
000062  ea1c0f02          TST      r12,r2
000066  d109              BNE      |L43.124|
000068  6a0a              LDR      r2,[r1,#0x20]
00006a  f2404c44          MOV      r12,#0x444
00006e  ea120f0c          TST      r2,r12
000072  d103              BNE      |L43.124|
000074  680a              LDR      r2,[r1,#0]
000076  f0220201          BIC      r2,r2,#1
00007a  600a              STR      r2,[r1,#0]
                  |L43.124|
;;;1958     
;;;1959     /* Change the htim state */
;;;1960     htim->State = HAL_TIM_STATE_READY;
00007c  63c3              STR      r3,[r0,#0x3c]
;;;1961     
;;;1962     /* Return function status */
;;;1963     return HAL_OK;
00007e  2000              MOVS     r0,#0
;;;1964   }  
000080  bc30              POP      {r4,r5}
000082  4770              BX       lr
;;;1965   /**
                          ENDP


                          AREA ||i.HAL_TIM_IC_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_Stop_IT PROC
;;;1735     */
;;;1736   HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;1737   {
;;;1738     /* Check the parameters */
;;;1739     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1740     
;;;1741     switch (Channel)
000004  6802              LDR      r2,[r0,#0]
000006  2900              CMP      r1,#0
;;;1742     {
;;;1743       case TIM_CHANNEL_1:
;;;1744       {       
;;;1745         /* Disable the TIM Capture/Compare 1 interrupt */
;;;1746         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000008  bf04              ITT      EQ
00000a  68d3              LDREQ    r3,[r2,#0xc]
00000c  f0230302          BICEQ    r3,r3,#2
000010  d011              BEQ      |L44.54|
000012  2904              CMP      r1,#4                 ;1741
;;;1747       }
;;;1748       break;
;;;1749       
;;;1750       case TIM_CHANNEL_2:
;;;1751       {
;;;1752         /* Disable the TIM Capture/Compare 2 interrupt */
;;;1753         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000014  bf04              ITT      EQ
000016  68d3              LDREQ    r3,[r2,#0xc]
000018  f0230304          BICEQ    r3,r3,#4
00001c  d00b              BEQ      |L44.54|
00001e  2908              CMP      r1,#8                 ;1741
;;;1754       }
;;;1755       break;
;;;1756       
;;;1757       case TIM_CHANNEL_3:
;;;1758       {
;;;1759         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1760         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000020  bf04              ITT      EQ
000022  68d3              LDREQ    r3,[r2,#0xc]
000024  f0230308          BICEQ    r3,r3,#8
000028  d005              BEQ      |L44.54|
00002a  290c              CMP      r1,#0xc               ;1741
;;;1761       }
;;;1762       break;
;;;1763       
;;;1764       case TIM_CHANNEL_4:
;;;1765       {
;;;1766         /* Disable the TIM Capture/Compare 4 interrupt */
;;;1767         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
00002c  bf04              ITT      EQ
00002e  68d3              LDREQ    r3,[r2,#0xc]
000030  f0230310          BICEQ    r3,r3,#0x10
000034  d100              BNE      |L44.56|
                  |L44.54|
000036  60d3              STR      r3,[r2,#0xc]          ;1760
                  |L44.56|
000038  f04f0c01          MOV      r12,#1                ;1760
00003c  6802              LDR      r2,[r0,#0]            ;1760
;;;1768       }
;;;1769       break;
;;;1770       
;;;1771       default:
;;;1772       break; 
;;;1773     } 
;;;1774     
;;;1775     /* Disable the Input Capture channel */
;;;1776     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE); 
00003e  2300              MOVS     r3,#0
000040  fa0cfc01          LSL      r12,r12,r1
000044  6a14              LDR      r4,[r2,#0x20]
000046  fa03f101          LSL      r1,r3,r1
00004a  ea240c0c          BIC      r12,r4,r12
00004e  f8c2c020          STR      r12,[r2,#0x20]
000052  6a13              LDR      r3,[r2,#0x20]
000054  4319              ORRS     r1,r1,r3
000056  6211              STR      r1,[r2,#0x20]
;;;1777     
;;;1778     /* Disable the Peripheral */
;;;1779     __HAL_TIM_DISABLE(htim); 
000058  6800              LDR      r0,[r0,#0]
00005a  f2411111          MOV      r1,#0x1111
00005e  6a02              LDR      r2,[r0,#0x20]
000060  420a              TST      r2,r1
000062  d108              BNE      |L44.118|
000064  6a01              LDR      r1,[r0,#0x20]
000066  f2404244          MOV      r2,#0x444
00006a  4211              TST      r1,r2
00006c  d103              BNE      |L44.118|
00006e  6801              LDR      r1,[r0,#0]
000070  f0210101          BIC      r1,r1,#1
000074  6001              STR      r1,[r0,#0]
                  |L44.118|
;;;1780     
;;;1781     /* Return function status */
;;;1782     return HAL_OK;
;;;1783   }
000076  f85d4b04          POP.W    {r4}
00007a  2000              MOVS     r0,#0                 ;1782
00007c  4770              BX       lr
;;;1784   
                          ENDP


                          AREA ||i.HAL_TIM_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IRQHandler PROC
;;;2805     */
;;;2806   void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
000000  b570              PUSH     {r4-r6,lr}
;;;2807   {
000002  4604              MOV      r4,r0
;;;2808     /* Capture compare 1 event */
;;;2809     if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
000004  6800              LDR      r0,[r0,#0]
000006  2500              MOVS     r5,#0
000008  6901              LDR      r1,[r0,#0x10]
00000a  f0110f02          TST      r1,#2
;;;2810     {
;;;2811       if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
00000e  bf1c              ITT      NE
000010  68c1              LDRNE    r1,[r0,#0xc]
000012  f0110f02          TSTNE    r1,#2
000016  d013              BEQ      |L45.64|
;;;2812       {
;;;2813         {
;;;2814           __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
;;;2815           htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
000018  2101              MOVS     r1,#1
00001a  f06f0202          MVN      r2,#2                 ;2814
00001e  6102              STR      r2,[r0,#0x10]         ;2814
;;;2816           
;;;2817           /* Input capture event */
;;;2818           if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
000020  61a1              STR      r1,[r4,#0x18]
000022  6820              LDR      r0,[r4,#0]
000024  6980              LDR      r0,[r0,#0x18]
000026  f0100f03          TST      r0,#3
;;;2819           {
;;;2820             HAL_TIM_IC_CaptureCallback(htim);
;;;2821           }
;;;2822           /* Output compare event */
;;;2823           else
;;;2824           {
;;;2825             HAL_TIM_OC_DelayElapsedCallback(htim);
00002a  4620              MOV      r0,r4
00002c  d002              BEQ      |L45.52|
00002e  f7fffffe          BL       HAL_TIM_IC_CaptureCallback
000032  e004              B        |L45.62|
                  |L45.52|
000034  f7fffffe          BL       HAL_TIM_OC_DelayElapsedCallback
;;;2826             HAL_TIM_PWM_PulseFinishedCallback(htim);
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       HAL_TIM_PWM_PulseFinishedCallback
                  |L45.62|
;;;2827           }
;;;2828           htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
00003e  61a5              STR      r5,[r4,#0x18]
                  |L45.64|
;;;2829         }
;;;2830       }
;;;2831     }
;;;2832     /* Capture compare 2 event */
;;;2833     if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
000040  6820              LDR      r0,[r4,#0]
000042  6901              LDR      r1,[r0,#0x10]
000044  f0110f04          TST      r1,#4
;;;2834     {
;;;2835       if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
000048  bf1c              ITT      NE
00004a  68c1              LDRNE    r1,[r0,#0xc]
00004c  f0110f04          TSTNE    r1,#4
000050  d013              BEQ      |L45.122|
;;;2836       {
;;;2837         __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
;;;2838         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
000052  2102              MOVS     r1,#2
000054  f06f0204          MVN      r2,#4                 ;2837
000058  6102              STR      r2,[r0,#0x10]         ;2837
;;;2839         /* Input capture event */
;;;2840         if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
00005a  61a1              STR      r1,[r4,#0x18]
00005c  6820              LDR      r0,[r4,#0]
00005e  6980              LDR      r0,[r0,#0x18]
000060  f4107f40          TST      r0,#0x300
;;;2841         {          
;;;2842           HAL_TIM_IC_CaptureCallback(htim);
;;;2843         }
;;;2844         /* Output compare event */
;;;2845         else
;;;2846         {
;;;2847           HAL_TIM_OC_DelayElapsedCallback(htim);
000064  4620              MOV      r0,r4
000066  d002              BEQ      |L45.110|
000068  f7fffffe          BL       HAL_TIM_IC_CaptureCallback
00006c  e004              B        |L45.120|
                  |L45.110|
00006e  f7fffffe          BL       HAL_TIM_OC_DelayElapsedCallback
;;;2848           HAL_TIM_PWM_PulseFinishedCallback(htim);
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       HAL_TIM_PWM_PulseFinishedCallback
                  |L45.120|
;;;2849         }
;;;2850         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
000078  61a5              STR      r5,[r4,#0x18]
                  |L45.122|
;;;2851       }
;;;2852     }
;;;2853     /* Capture compare 3 event */
;;;2854     if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
00007a  6820              LDR      r0,[r4,#0]
00007c  6901              LDR      r1,[r0,#0x10]
00007e  f0110f08          TST      r1,#8
;;;2855     {
;;;2856       if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
000082  bf1c              ITT      NE
000084  68c1              LDRNE    r1,[r0,#0xc]
000086  f0110f08          TSTNE    r1,#8
00008a  d013              BEQ      |L45.180|
;;;2857       {
;;;2858         __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
;;;2859         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
00008c  2104              MOVS     r1,#4
00008e  f06f0208          MVN      r2,#8                 ;2858
000092  6102              STR      r2,[r0,#0x10]         ;2858
;;;2860         /* Input capture event */
;;;2861         if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
000094  61a1              STR      r1,[r4,#0x18]
000096  6820              LDR      r0,[r4,#0]
000098  69c0              LDR      r0,[r0,#0x1c]
00009a  f0100f03          TST      r0,#3
;;;2862         {          
;;;2863           HAL_TIM_IC_CaptureCallback(htim);
;;;2864         }
;;;2865         /* Output compare event */
;;;2866         else
;;;2867         {
;;;2868           HAL_TIM_OC_DelayElapsedCallback(htim);
00009e  4620              MOV      r0,r4
0000a0  d002              BEQ      |L45.168|
0000a2  f7fffffe          BL       HAL_TIM_IC_CaptureCallback
0000a6  e004              B        |L45.178|
                  |L45.168|
0000a8  f7fffffe          BL       HAL_TIM_OC_DelayElapsedCallback
;;;2869           HAL_TIM_PWM_PulseFinishedCallback(htim); 
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       HAL_TIM_PWM_PulseFinishedCallback
                  |L45.178|
;;;2870         }
;;;2871         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
0000b2  61a5              STR      r5,[r4,#0x18]
                  |L45.180|
;;;2872       }
;;;2873     }
;;;2874     /* Capture compare 4 event */
;;;2875     if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
0000b4  6820              LDR      r0,[r4,#0]
0000b6  6901              LDR      r1,[r0,#0x10]
0000b8  f0110f10          TST      r1,#0x10
;;;2876     {
;;;2877       if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
0000bc  bf1c              ITT      NE
0000be  68c1              LDRNE    r1,[r0,#0xc]
0000c0  f0110f10          TSTNE    r1,#0x10
0000c4  d013              BEQ      |L45.238|
;;;2878       {
;;;2879         __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
;;;2880         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
0000c6  2108              MOVS     r1,#8
0000c8  f06f0210          MVN      r2,#0x10              ;2879
0000cc  6102              STR      r2,[r0,#0x10]         ;2879
;;;2881         /* Input capture event */
;;;2882         if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
0000ce  61a1              STR      r1,[r4,#0x18]
0000d0  6820              LDR      r0,[r4,#0]
0000d2  69c0              LDR      r0,[r0,#0x1c]
0000d4  f4107f40          TST      r0,#0x300
;;;2883         {          
;;;2884           HAL_TIM_IC_CaptureCallback(htim);
;;;2885         }
;;;2886         /* Output compare event */
;;;2887         else
;;;2888         {
;;;2889           HAL_TIM_OC_DelayElapsedCallback(htim);
0000d8  4620              MOV      r0,r4
0000da  d002              BEQ      |L45.226|
0000dc  f7fffffe          BL       HAL_TIM_IC_CaptureCallback
0000e0  e004              B        |L45.236|
                  |L45.226|
0000e2  f7fffffe          BL       HAL_TIM_OC_DelayElapsedCallback
;;;2890           HAL_TIM_PWM_PulseFinishedCallback(htim);
0000e6  4620              MOV      r0,r4
0000e8  f7fffffe          BL       HAL_TIM_PWM_PulseFinishedCallback
                  |L45.236|
;;;2891         }
;;;2892         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
0000ec  61a5              STR      r5,[r4,#0x18]
                  |L45.238|
;;;2893       }
;;;2894     }
;;;2895     /* TIM Update event */
;;;2896     if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
0000ee  6820              LDR      r0,[r4,#0]
0000f0  6901              LDR      r1,[r0,#0x10]
0000f2  f0110f01          TST      r1,#1
;;;2897     {
;;;2898       if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
0000f6  bf1c              ITT      NE
0000f8  68c1              LDRNE    r1,[r0,#0xc]
0000fa  f0110f01          TSTNE    r1,#1
0000fe  d005              BEQ      |L45.268|
;;;2899       {
;;;2900         __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
000100  f06f0101          MVN      r1,#1
000104  6101              STR      r1,[r0,#0x10]
;;;2901         HAL_TIM_PeriodElapsedCallback(htim);
000106  4620              MOV      r0,r4
000108  f7fffffe          BL       HAL_TIM_PeriodElapsedCallback
                  |L45.268|
;;;2902       }
;;;2903     }
;;;2904     /* TIM Break input event */
;;;2905     if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
00010c  6820              LDR      r0,[r4,#0]
;;;2906     {
;;;2907       if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
;;;2908       {
;;;2909         __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
00010e  f06f0580          MVN      r5,#0x80
000112  6901              LDR      r1,[r0,#0x10]         ;2905
000114  f0110f80          TST      r1,#0x80              ;2905
000118  bf1c              ITT      NE                    ;2907
00011a  68c1              LDRNE    r1,[r0,#0xc]          ;2907
00011c  f0110f80          TSTNE    r1,#0x80              ;2907
000120  d003              BEQ      |L45.298|
000122  6105              STR      r5,[r0,#0x10]
;;;2910         HAL_TIMEx_BreakCallback(htim);
000124  4620              MOV      r0,r4
000126  f7fffffe          BL       HAL_TIMEx_BreakCallback
                  |L45.298|
;;;2911       }
;;;2912     }
;;;2913     
;;;2914       /* TIM Break input event */
;;;2915     if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
00012a  6820              LDR      r0,[r4,#0]
00012c  6901              LDR      r1,[r0,#0x10]
00012e  f4117f80          TST      r1,#0x100
;;;2916     {
;;;2917       if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
000132  bf1c              ITT      NE
000134  68c1              LDRNE    r1,[r0,#0xc]
000136  f0110f80          TSTNE    r1,#0x80
00013a  d003              BEQ      |L45.324|
;;;2918       {
;;;2919         __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
00013c  6105              STR      r5,[r0,#0x10]
;;;2920         HAL_TIMEx_BreakCallback(htim);
00013e  4620              MOV      r0,r4
000140  f7fffffe          BL       HAL_TIMEx_BreakCallback
                  |L45.324|
;;;2921       }
;;;2922     }
;;;2923   
;;;2924     /* TIM Trigger detection event */
;;;2925     if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
000144  6820              LDR      r0,[r4,#0]
000146  6901              LDR      r1,[r0,#0x10]
000148  f0110f40          TST      r1,#0x40
;;;2926     {
;;;2927       if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
00014c  bf1c              ITT      NE
00014e  68c1              LDRNE    r1,[r0,#0xc]
000150  f0110f40          TSTNE    r1,#0x40
000154  d005              BEQ      |L45.354|
;;;2928       {
;;;2929         __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
000156  f06f0140          MVN      r1,#0x40
00015a  6101              STR      r1,[r0,#0x10]
;;;2930         HAL_TIM_TriggerCallback(htim);
00015c  4620              MOV      r0,r4
00015e  f7fffffe          BL       HAL_TIM_TriggerCallback
                  |L45.354|
;;;2931       }
;;;2932     }
;;;2933     /* TIM commutation event */
;;;2934     if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
000162  6820              LDR      r0,[r4,#0]
000164  6901              LDR      r1,[r0,#0x10]
000166  f0110f20          TST      r1,#0x20
;;;2935     {
;;;2936       if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
00016a  bf1a              ITTE     NE
00016c  68c1              LDRNE    r1,[r0,#0xc]
00016e  f0110f20          TSTNE    r1,#0x20
;;;2937       {
;;;2938         __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
;;;2939         HAL_TIMEx_CommutationCallback(htim);
;;;2940       }
;;;2941     }
;;;2942   }
000172  bd70              POPEQ    {r4-r6,pc}
000174  f06f0120          MVN      r1,#0x20              ;2938
000178  6101              STR      r1,[r0,#0x10]         ;2938
00017a  4620              MOV      r0,r4                 ;2939
00017c  e8bd4070          POP      {r4-r6,lr}            ;2939
000180  f7ffbffe          B.W      HAL_TIMEx_CommutationCallback
;;;2943   
                          ENDP


                          AREA ||i.HAL_TIM_OC_ConfigChannel||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OC_ConfigChannel PROC
;;;2980     */
;;;2981   __weak HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
000000  6b83              LDR      r3,[r0,#0x38]
;;;2982   {
;;;2983     /* Check the parameters */ 
;;;2984     assert_param(IS_TIM_CHANNELS(Channel)); 
;;;2985     assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
;;;2986     assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
;;;2987     
;;;2988     /* Check input state */
;;;2989     __HAL_LOCK(htim); 
000002  2b01              CMP      r3,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;2990     
;;;2991     htim->State = HAL_TIM_STATE_BUSY;
;;;2992     
;;;2993     switch (Channel)
;;;2994     {
;;;2995       case TIM_CHANNEL_1:
;;;2996       {
;;;2997         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;2998         /* Configure the TIM Channel 1 in Output Compare */
;;;2999         TIM_OC1_SetConfig(htim->Instance, sConfig);
;;;3000       }
;;;3001       break;
;;;3002       
;;;3003       case TIM_CHANNEL_2:
;;;3004       {
;;;3005         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;3006         /* Configure the TIM Channel 2 in Output Compare */
;;;3007         TIM_OC2_SetConfig(htim->Instance, sConfig);
;;;3008       }
;;;3009       break;
;;;3010       
;;;3011       case TIM_CHANNEL_3:
;;;3012       {
;;;3013          assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
;;;3014         /* Configure the TIM Channel 3 in Output Compare */
;;;3015         TIM_OC3_SetConfig(htim->Instance, sConfig);
;;;3016       }
;;;3017       break;
;;;3018       
;;;3019       case TIM_CHANNEL_4:
;;;3020       {
;;;3021         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
;;;3022         /* Configure the TIM Channel 4 in Output Compare */
;;;3023         TIM_OC4_SetConfig(htim->Instance, sConfig);
;;;3024       }
;;;3025       break;
;;;3026       
;;;3027       default:
;;;3028       break;    
;;;3029     }
;;;3030     htim->State = HAL_TIM_STATE_READY;
;;;3031     
;;;3032     __HAL_UNLOCK(htim); 
;;;3033     
;;;3034     return HAL_OK;
;;;3035   }
000008  4770              BXEQ     lr
00000a  e92d03f0          PUSH     {r4-r9}               ;2982
00000e  2401              MOVS     r4,#1                 ;2989
000010  6384              STR      r4,[r0,#0x38]         ;2991
000012  2302              MOVS     r3,#2                 ;2991
000014  63c3              STR      r3,[r0,#0x3c]         ;2991
000016  4b61              LDR      r3,|L46.412|
000018  f8dfc184          LDR      r12,|L46.416|
00001c  b132              CBZ      r2,|L46.44|
00001e  2a04              CMP      r2,#4                 ;2993
000020  d031              BEQ      |L46.134|
000022  2a08              CMP      r2,#8                 ;2993
000024  d05f              BEQ      |L46.230|
000026  2a0c              CMP      r2,#0xc               ;2993
000028  d07d              BEQ      |L46.294|
00002a  e0b0              B        |L46.398|
                  |L46.44|
00002c  6802              LDR      r2,[r0,#0]            ;2993
00002e  6a15              LDR      r5,[r2,#0x20]         ;2993
000030  429a              CMP      r2,r3                 ;2993
000032  f0250301          BIC      r3,r5,#1              ;2993
000036  6213              STR      r3,[r2,#0x20]         ;2993
000038  6a15              LDR      r5,[r2,#0x20]         ;2993
00003a  6853              LDR      r3,[r2,#4]            ;2993
00003c  6996              LDR      r6,[r2,#0x18]         ;2993
00003e  f0250502          BIC      r5,r5,#2              ;2993
000042  f8d18008          LDR      r8,[r1,#8]            ;2993
000046  680f              LDR      r7,[r1,#0]            ;2993
000048  f0260673          BIC      r6,r6,#0x73           ;2993
00004c  f4263680          BIC      r6,r6,#0x10000        ;2993
000050  ea480505          ORR      r5,r8,r5              ;2993
000054  ea470606          ORR      r6,r7,r6              ;2993
000058  bf18              IT       NE                    ;2993
00005a  4562              CMPNE    r2,r12                ;2993
00005c  d10e              BNE      |L46.124|
00005e  f8d1900c          LDR      r9,[r1,#0xc]          ;2999
000062  f0250c08          BIC      r12,r5,#8             ;2999
000066  e9d17805          LDRD     r7,r8,[r1,#0x14]      ;2999
00006a  f4237340          BIC      r3,r3,#0x300          ;2999
00006e  433b              ORRS     r3,r3,r7              ;2999
000070  ea490c0c          ORR      r12,r9,r12            ;2999
000074  f02c0504          BIC      r5,r12,#4             ;2999
000078  ea480303          ORR      r3,r8,r3              ;2999
                  |L46.124|
00007c  6053              STR      r3,[r2,#4]            ;2999
00007e  6196              STR      r6,[r2,#0x18]         ;2999
000080  6849              LDR      r1,[r1,#4]            ;2999
000082  6351              STR      r1,[r2,#0x34]         ;2999
000084  e082              B        |L46.396|
                  |L46.134|
000086  6802              LDR      r2,[r0,#0]            ;3001
000088  6a15              LDR      r5,[r2,#0x20]         ;3001
00008a  429a              CMP      r2,r3                 ;3001
00008c  f0250310          BIC      r3,r5,#0x10           ;3001
000090  6213              STR      r3,[r2,#0x20]         ;3001
000092  6a15              LDR      r5,[r2,#0x20]         ;3001
000094  6853              LDR      r3,[r2,#4]            ;3001
000096  6996              LDR      r6,[r2,#0x18]         ;3001
000098  f0250520          BIC      r5,r5,#0x20           ;3001
00009c  f8d18008          LDR      r8,[r1,#8]            ;3001
0000a0  680f              LDR      r7,[r1,#0]            ;3001
0000a2  f42646e6          BIC      r6,r6,#0x7300         ;3001
0000a6  f0267680          BIC      r6,r6,#0x1000000      ;3001
0000aa  ea451508          ORR      r5,r5,r8,LSL #4       ;3001
0000ae  ea462607          ORR      r6,r6,r7,LSL #8       ;3001
0000b2  bf18              IT       NE                    ;3001
0000b4  4562              CMPNE    r2,r12                ;3001
0000b6  d111              BNE      |L46.220|
0000b8  f4236c80          BIC      r12,r3,#0x400         ;3007
0000bc  f8d1800c          LDR      r8,[r1,#0xc]          ;3007
0000c0  e9d17905          LDRD     r7,r9,[r1,#0x14]      ;3007
0000c4  f0250380          BIC      r3,r5,#0x80           ;3007
0000c8  f42c6c00          BIC      r12,r12,#0x800        ;3007
0000cc  ea431308          ORR      r3,r3,r8,LSL #4       ;3007
0000d0  ea4c0c87          ORR      r12,r12,r7,LSL #2     ;3007
0000d4  f0230540          BIC      r5,r3,#0x40           ;3007
0000d8  ea4c0389          ORR      r3,r12,r9,LSL #2      ;3007
                  |L46.220|
0000dc  6053              STR      r3,[r2,#4]            ;3007
0000de  6196              STR      r6,[r2,#0x18]         ;3007
0000e0  6849              LDR      r1,[r1,#4]            ;3007
0000e2  6391              STR      r1,[r2,#0x38]         ;3007
0000e4  e052              B        |L46.396|
                  |L46.230|
0000e6  6802              LDR      r2,[r0,#0]            ;3009
0000e8  6a15              LDR      r5,[r2,#0x20]         ;3009
0000ea  429a              CMP      r2,r3                 ;3009
0000ec  f4257380          BIC      r3,r5,#0x100          ;3009
0000f0  6213              STR      r3,[r2,#0x20]         ;3009
0000f2  6a15              LDR      r5,[r2,#0x20]         ;3009
0000f4  6853              LDR      r3,[r2,#4]            ;3009
0000f6  69d6              LDR      r6,[r2,#0x1c]         ;3009
0000f8  f4257500          BIC      r5,r5,#0x200          ;3009
0000fc  f8d18008          LDR      r8,[r1,#8]            ;3009
000100  680f              LDR      r7,[r1,#0]            ;3009
000102  f0260673          BIC      r6,r6,#0x73           ;3009
000106  f4263680          BIC      r6,r6,#0x10000        ;3009
00010a  ea452508          ORR      r5,r5,r8,LSL #8       ;3009
00010e  ea470606          ORR      r6,r7,r6              ;3009
000112  bf18              IT       NE                    ;3009
000114  4562              CMPNE    r2,r12                ;3009
000116  d111              BNE      |L46.316|
000118  f8d1900c          LDR      r9,[r1,#0xc]          ;3015
00011c  f4256c00          BIC      r12,r5,#0x800         ;3015
000120  f4235340          BIC      r3,r3,#0x3000         ;3015
000124  e000              B        |L46.296|
                  |L46.294|
000126  e00e              B        |L46.326|
                  |L46.296|
000128  e9d17805          LDRD     r7,r8,[r1,#0x14]      ;3015
00012c  ea4c2c09          ORR      r12,r12,r9,LSL #8     ;3015
000130  f42c6580          BIC      r5,r12,#0x400         ;3015
000134  ea431307          ORR      r3,r3,r7,LSL #4       ;3015
000138  ea431308          ORR      r3,r3,r8,LSL #4       ;3015
                  |L46.316|
00013c  6053              STR      r3,[r2,#4]            ;3015
00013e  61d6              STR      r6,[r2,#0x1c]         ;3015
000140  6849              LDR      r1,[r1,#4]            ;3015
000142  63d1              STR      r1,[r2,#0x3c]         ;3015
000144  e022              B        |L46.396|
                  |L46.326|
000146  6802              LDR      r2,[r0,#0]            ;3017
000148  6a15              LDR      r5,[r2,#0x20]         ;3017
00014a  429a              CMP      r2,r3                 ;3017
00014c  f4255380          BIC      r3,r5,#0x1000         ;3017
000150  6213              STR      r3,[r2,#0x20]         ;3017
000152  6a15              LDR      r5,[r2,#0x20]         ;3017
000154  6853              LDR      r3,[r2,#4]            ;3017
000156  69d6              LDR      r6,[r2,#0x1c]         ;3017
000158  f4255500          BIC      r5,r5,#0x2000         ;3017
00015c  f8d18008          LDR      r8,[r1,#8]            ;3017
000160  680f              LDR      r7,[r1,#0]            ;3017
000162  f42646e6          BIC      r6,r6,#0x7300         ;3017
000166  f0267680          BIC      r6,r6,#0x1000000      ;3017
00016a  ea453508          ORR      r5,r5,r8,LSL #12      ;3017
00016e  ea462607          ORR      r6,r6,r7,LSL #8       ;3017
000172  bf18              IT       NE                    ;3017
000174  4562              CMPNE    r2,r12                ;3017
000176  d105              BNE      |L46.388|
000178  f8d1c014          LDR      r12,[r1,#0x14]        ;3023
00017c  f4234380          BIC      r3,r3,#0x4000         ;3023
000180  ea43138c          ORR      r3,r3,r12,LSL #6      ;3023
                  |L46.388|
000184  6053              STR      r3,[r2,#4]            ;3023
000186  61d6              STR      r6,[r2,#0x1c]         ;3023
000188  6849              LDR      r1,[r1,#4]            ;3023
00018a  6411              STR      r1,[r2,#0x40]         ;3023
                  |L46.396|
00018c  6215              STR      r5,[r2,#0x20]         ;3023
                  |L46.398|
00018e  2100              MOVS     r1,#0                 ;3032
000190  63c4              STR      r4,[r0,#0x3c]         ;3030
000192  6381              STR      r1,[r0,#0x38]         ;3034
000194  4608              MOV      r0,r1                 ;3034
000196  e8bd03f0          POP      {r4-r9}
00019a  4770              BX       lr
;;;3036   
                          ENDP

                  |L46.412|
                          DCD      0x40010000
                  |L46.416|
                          DCD      0x40010400

                          AREA ||i.HAL_TIM_OC_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_DeInit PROC
;;;522      */
;;;523    HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;524    {
000002  4604              MOV      r4,r0
;;;525      /* Check the parameters */
;;;526      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;527      
;;;528       htim->State = HAL_TIM_STATE_BUSY;
;;;529       
;;;530      /* Disable the TIM Peripheral Clock */
;;;531      __HAL_TIM_DISABLE(htim);
000004  f2411111          MOV      r1,#0x1111
000008  2002              MOVS     r0,#2                 ;528
00000a  63e0              STR      r0,[r4,#0x3c]         ;528
00000c  6820              LDR      r0,[r4,#0]
00000e  6a02              LDR      r2,[r0,#0x20]
000010  420a              TST      r2,r1
000012  d108              BNE      |L47.38|
000014  6a01              LDR      r1,[r0,#0x20]
000016  f2404244          MOV      r2,#0x444
00001a  4211              TST      r1,r2
00001c  d103              BNE      |L47.38|
00001e  6801              LDR      r1,[r0,#0]
000020  f0210101          BIC      r1,r1,#1
000024  6001              STR      r1,[r0,#0]
                  |L47.38|
;;;532      
;;;533      /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
;;;534      HAL_TIM_OC_MspDeInit(htim);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       HAL_TIM_OC_MspDeInit
;;;535        
;;;536      /* Change TIM state */  
;;;537      htim->State = HAL_TIM_STATE_RESET; 
00002c  2000              MOVS     r0,#0
00002e  63e0              STR      r0,[r4,#0x3c]
;;;538    
;;;539      /* Release Lock */
;;;540      __HAL_UNLOCK(htim);
000030  63a0              STR      r0,[r4,#0x38]
;;;541    
;;;542      return HAL_OK;
;;;543    }
000032  bd10              POP      {r4,pc}
;;;544    
                          ENDP


                          AREA ||i.HAL_TIM_OC_DelayElapsedCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_DelayElapsedCallback PROC
;;;4438     */
;;;4439   __weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;4440   {
;;;4441     /* Prevent unused argument(s) compilation warning */
;;;4442     UNUSED(htim);
;;;4443    
;;;4444     /* NOTE : This function Should not be modified, when the callback is needed,
;;;4445               the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
;;;4446      */
;;;4447   }
;;;4448   /**
                          ENDP


                          AREA ||i.HAL_TIM_OC_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_GetState PROC
;;;4547     */
;;;4548   HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)
000000  6bc0              LDR      r0,[r0,#0x3c]
;;;4549   {
;;;4550     return htim->State;
;;;4551   }
000002  4770              BX       lr
;;;4552   
                          ENDP


                          AREA ||i.HAL_TIM_OC_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_Init PROC
;;;483      */
;;;484    HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
000000  2800              CMP      r0,#0
;;;485    {
;;;486      /* Check the TIM handle allocation */
;;;487      if(htim == NULL)
;;;488      {
;;;489        return HAL_ERROR;
000002  bf04              ITT      EQ
000004  2001              MOVEQ    r0,#1
;;;490      }
;;;491    
;;;492      /* Check the parameters */
;;;493      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;494      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;495      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;496     
;;;497      if(htim->State == HAL_TIM_STATE_RESET)
;;;498      { 
;;;499        /* Allocate lock resource and initialize it */
;;;500        htim->Lock = HAL_UNLOCKED;  
;;;501        /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;502        HAL_TIM_OC_MspInit(htim);
;;;503      }
;;;504      
;;;505      /* Set the TIM state */
;;;506      htim->State= HAL_TIM_STATE_BUSY;
;;;507      
;;;508      /* Init the base time for the Output Compare */  
;;;509      TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
;;;510      
;;;511      /* Initialize the TIM state*/
;;;512      htim->State= HAL_TIM_STATE_READY;
;;;513      
;;;514      return HAL_OK;
;;;515    }
000006  4770              BXEQ     lr
000008  b510              PUSH     {r4,lr}               ;485
00000a  4604              MOV      r4,r0                 ;485
00000c  6bc0              LDR      r0,[r0,#0x3c]         ;497
00000e  b920              CBNZ     r0,|L50.26|
000010  2000              MOVS     r0,#0                 ;500
000012  63a0              STR      r0,[r4,#0x38]         ;502
000014  4620              MOV      r0,r4                 ;502
000016  f7fffffe          BL       HAL_TIM_OC_MspInit
                  |L50.26|
00001a  2002              MOVS     r0,#2                 ;506
00001c  63e0              STR      r0,[r4,#0x3c]         ;506
00001e  6820              LDR      r0,[r4,#0]            ;509
000020  1d21              ADDS     r1,r4,#4              ;509
000022  f7fffffe          BL       TIM_Base_SetConfig
000026  2001              MOVS     r0,#1                 ;512
000028  63e0              STR      r0,[r4,#0x3c]         ;512
00002a  2000              MOVS     r0,#0                 ;514
00002c  bd10              POP      {r4,pc}
;;;516    
                          ENDP


                          AREA ||i.HAL_TIM_OC_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_MspDeInit PROC
;;;566      */
;;;567    __weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;568    {
;;;569      /* Prevent unused argument(s) compilation warning */
;;;570      UNUSED(htim);
;;;571     
;;;572      /* NOTE : This function Should not be modified, when the callback is needed,
;;;573                the HAL_TIM_OC_MspDeInit could be implemented in the user file
;;;574       */
;;;575    }
;;;576    
                          ENDP


                          AREA ||i.HAL_TIM_OC_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_MspInit PROC
;;;550      */
;;;551    __weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;552    {
;;;553      /* Prevent unused argument(s) compilation warning */
;;;554      UNUSED(htim);
;;;555     
;;;556      /* NOTE : This function Should not be modified, when the callback is needed,
;;;557                the HAL_TIM_OC_MspInit could be implemented in the user file
;;;558       */
;;;559    }
;;;560    
                          ENDP


                          AREA ||i.HAL_TIM_OC_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_Start PROC
;;;588      */
;;;589    HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
000002  2301              MOVS     r3,#1
000004  fa03f101          LSL      r1,r3,r1
000008  6a13              LDR      r3,[r2,#0x20]
00000a  438b              BICS     r3,r3,r1
00000c  6213              STR      r3,[r2,#0x20]
00000e  6a13              LDR      r3,[r2,#0x20]
000010  4319              ORRS     r1,r1,r3
000012  6211              STR      r1,[r2,#0x20]
;;;590    {
;;;591      /* Check the parameters */
;;;592      assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;593      
;;;594      /* Enable the Output compare channel */
;;;595      TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;596      
;;;597      if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
000014  6801              LDR      r1,[r0,#0]
000016  f1a14280          SUB      r2,r1,#0x40000000
00001a  f5b23280          SUBS     r2,r2,#0x10000
00001e  bf1c              ITT      NE
000020  f1a14280          SUBNE    r2,r1,#0x40000000
000024  f5b23282          SUBSNE   r2,r2,#0x10400
000028  d103              BNE      |L53.50|
;;;598      {
;;;599        /* Enable the main output */
;;;600        __HAL_TIM_MOE_ENABLE(htim);
00002a  6c4a              LDR      r2,[r1,#0x44]
00002c  f4424200          ORR      r2,r2,#0x8000
000030  644a              STR      r2,[r1,#0x44]
                  |L53.50|
;;;601      }
;;;602      
;;;603      /* Enable the Peripheral */
;;;604      __HAL_TIM_ENABLE(htim); 
000032  6800              LDR      r0,[r0,#0]
000034  6801              LDR      r1,[r0,#0]
000036  f0410101          ORR      r1,r1,#1
00003a  6001              STR      r1,[r0,#0]
;;;605      
;;;606      /* Return function status */
;;;607      return HAL_OK;
00003c  2000              MOVS     r0,#0
;;;608    }
00003e  4770              BX       lr
;;;609    
                          ENDP


                          AREA ||i.HAL_TIM_OC_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OC_Start_DMA PROC
;;;790      */
;;;791    HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;792    {
000002  4604              MOV      r4,r0
;;;793      /* Check the parameters */
;;;794      assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;795      
;;;796      if((htim->State == HAL_TIM_STATE_BUSY))
000004  6bc0              LDR      r0,[r0,#0x3c]
000006  4694              MOV      r12,r2                ;792
000008  460d              MOV      r5,r1                 ;792
00000a  2802              CMP      r0,#2
;;;797      {
;;;798         return HAL_BUSY;
;;;799      }
;;;800      else if((htim->State == HAL_TIM_STATE_READY))
;;;801      {
;;;802        if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;803        {
;;;804          return HAL_ERROR;                                    
;;;805        }
;;;806        else
;;;807        {
;;;808          htim->State = HAL_TIM_STATE_BUSY;
;;;809        }
;;;810      }    
;;;811      switch (Channel)
;;;812      {
;;;813        case TIM_CHANNEL_1:
;;;814        {      
;;;815          /* Set the DMA Period elapsed callback */
;;;816          htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;817         
;;;818          /* Set the DMA error callback */
;;;819          htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;820          
;;;821          /* Enable the DMA Stream */
;;;822          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;823          
;;;824          /* Enable the TIM Capture/Compare 1 DMA request */
;;;825          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;826        }
;;;827        break;
;;;828        
;;;829        case TIM_CHANNEL_2:
;;;830        {
;;;831          /* Set the DMA Period elapsed callback */
;;;832          htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;833         
;;;834          /* Set the DMA error callback */
;;;835          htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
;;;836          
;;;837          /* Enable the DMA Stream */
;;;838          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;839          
;;;840          /* Enable the TIM Capture/Compare 2 DMA request */
;;;841          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;842        }
;;;843        break;
;;;844        
;;;845        case TIM_CHANNEL_3:
;;;846        {
;;;847          /* Set the DMA Period elapsed callback */
;;;848          htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;849         
;;;850          /* Set the DMA error callback */
;;;851          htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
;;;852          
;;;853          /* Enable the DMA Stream */
;;;854          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;855          
;;;856          /* Enable the TIM Capture/Compare 3 DMA request */
;;;857          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;858        }
;;;859        break;
;;;860        
;;;861        case TIM_CHANNEL_4:
;;;862        {
;;;863         /* Set the DMA Period elapsed callback */
;;;864          htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;865         
;;;866          /* Set the DMA error callback */
;;;867          htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
;;;868          
;;;869          /* Enable the DMA Stream */
;;;870          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;871          
;;;872          /* Enable the TIM Capture/Compare 4 DMA request */
;;;873          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;874        }
;;;875        break;
;;;876        
;;;877        default:
;;;878        break;
;;;879      }
;;;880    
;;;881      /* Enable the Output compare channel */
;;;882      TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;883      
;;;884      if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
;;;885      {
;;;886        /* Enable the main output */
;;;887        __HAL_TIM_MOE_ENABLE(htim);
;;;888      }  
;;;889      
;;;890      /* Enable the Peripheral */
;;;891      __HAL_TIM_ENABLE(htim); 
;;;892      
;;;893      /* Return function status */
;;;894      return HAL_OK;
;;;895    }
00000c  bf08              IT       EQ
00000e  bd70              POPEQ    {r4-r6,pc}
000010  6be0              LDR      r0,[r4,#0x3c]         ;800
000012  2801              CMP      r0,#1                 ;800
000014  d108              BNE      |L54.40|
000016  f1bc0f00          CMP      r12,#0                ;802
00001a  d103              BNE      |L54.36|
00001c  2b00              CMP      r3,#0                 ;802
00001e  bf1c              ITT      NE                    ;804
000020  2001              MOVNE    r0,#1                 ;804
000022  bd70              POPNE    {r4-r6,pc}
                  |L54.36|
000024  2002              MOVS     r0,#2                 ;808
000026  63e0              STR      r0,[r4,#0x3c]         ;808
                  |L54.40|
000028  4834              LDR      r0,|L54.252|
00002a  4935              LDR      r1,|L54.256|
00002c  b135              CBZ      r5,|L54.60|
00002e  2d04              CMP      r5,#4                 ;811
000030  d014              BEQ      |L54.92|
000032  2d08              CMP      r5,#8                 ;811
000034  d022              BEQ      |L54.124|
000036  2d0c              CMP      r5,#0xc               ;811
000038  d030              BEQ      |L54.156|
00003a  e03f              B        |L54.188|
                  |L54.60|
00003c  6a22              LDR      r2,[r4,#0x20]         ;816
00003e  6410              STR      r0,[r2,#0x40]         ;819
000040  6a20              LDR      r0,[r4,#0x20]         ;819
000042  6501              STR      r1,[r0,#0x50]         ;822
000044  6821              LDR      r1,[r4,#0]            ;822
000046  6a20              LDR      r0,[r4,#0x20]         ;822
000048  f1010234          ADD      r2,r1,#0x34           ;822
00004c  4661              MOV      r1,r12                ;822
00004e  f7fffffe          BL       HAL_DMA_Start_IT
000052  6820              LDR      r0,[r4,#0]            ;825
000054  68c1              LDR      r1,[r0,#0xc]          ;825
000056  f4417100          ORR      r1,r1,#0x200          ;825
00005a  e02e              B        |L54.186|
                  |L54.92|
00005c  6a62              LDR      r2,[r4,#0x24]         ;832
00005e  6410              STR      r0,[r2,#0x40]         ;835
000060  6a60              LDR      r0,[r4,#0x24]         ;835
000062  6501              STR      r1,[r0,#0x50]         ;838
000064  6821              LDR      r1,[r4,#0]            ;838
000066  6a60              LDR      r0,[r4,#0x24]         ;838
000068  f1010238          ADD      r2,r1,#0x38           ;838
00006c  4661              MOV      r1,r12                ;838
00006e  f7fffffe          BL       HAL_DMA_Start_IT
000072  6820              LDR      r0,[r4,#0]            ;841
000074  68c1              LDR      r1,[r0,#0xc]          ;841
000076  f4416180          ORR      r1,r1,#0x400          ;841
00007a  e01e              B        |L54.186|
                  |L54.124|
00007c  6aa2              LDR      r2,[r4,#0x28]         ;848
00007e  6410              STR      r0,[r2,#0x40]         ;851
000080  6aa0              LDR      r0,[r4,#0x28]         ;851
000082  6501              STR      r1,[r0,#0x50]         ;854
000084  6821              LDR      r1,[r4,#0]            ;854
000086  6aa0              LDR      r0,[r4,#0x28]         ;854
000088  f101023c          ADD      r2,r1,#0x3c           ;854
00008c  4661              MOV      r1,r12                ;854
00008e  f7fffffe          BL       HAL_DMA_Start_IT
000092  6820              LDR      r0,[r4,#0]            ;857
000094  68c1              LDR      r1,[r0,#0xc]          ;857
000096  f4416100          ORR      r1,r1,#0x800          ;857
00009a  e00e              B        |L54.186|
                  |L54.156|
00009c  6ae2              LDR      r2,[r4,#0x2c]         ;864
00009e  6410              STR      r0,[r2,#0x40]         ;867
0000a0  6ae0              LDR      r0,[r4,#0x2c]         ;867
0000a2  6501              STR      r1,[r0,#0x50]         ;870
0000a4  6821              LDR      r1,[r4,#0]            ;870
0000a6  6ae0              LDR      r0,[r4,#0x2c]         ;870
0000a8  f1010240          ADD      r2,r1,#0x40           ;870
0000ac  4661              MOV      r1,r12                ;870
0000ae  f7fffffe          BL       HAL_DMA_Start_IT
0000b2  6820              LDR      r0,[r4,#0]            ;873
0000b4  68c1              LDR      r1,[r0,#0xc]          ;873
0000b6  f4415180          ORR      r1,r1,#0x1000         ;873
                  |L54.186|
0000ba  60c1              STR      r1,[r0,#0xc]          ;857
                  |L54.188|
0000bc  6820              LDR      r0,[r4,#0]            ;857
0000be  2101              MOVS     r1,#1                 ;857
0000c0  40a9              LSLS     r1,r1,r5              ;857
0000c2  6a02              LDR      r2,[r0,#0x20]         ;857
0000c4  438a              BICS     r2,r2,r1              ;857
0000c6  6202              STR      r2,[r0,#0x20]         ;857
0000c8  6a02              LDR      r2,[r0,#0x20]         ;857
0000ca  4311              ORRS     r1,r1,r2              ;857
0000cc  6201              STR      r1,[r0,#0x20]         ;857
0000ce  6820              LDR      r0,[r4,#0]            ;884
0000d0  f1a04180          SUB      r1,r0,#0x40000000     ;884
0000d4  f5b13180          SUBS     r1,r1,#0x10000        ;884
0000d8  bf1c              ITT      NE                    ;884
0000da  f1a04180          SUBNE    r1,r0,#0x40000000     ;884
0000de  f5b13182          SUBSNE   r1,r1,#0x10400        ;884
0000e2  d103              BNE      |L54.236|
0000e4  6c41              LDR      r1,[r0,#0x44]         ;887
0000e6  f4414100          ORR      r1,r1,#0x8000         ;887
0000ea  6441              STR      r1,[r0,#0x44]         ;887
                  |L54.236|
0000ec  6820              LDR      r0,[r4,#0]            ;891
0000ee  6801              LDR      r1,[r0,#0]            ;891
0000f0  f0410101          ORR      r1,r1,#1              ;891
0000f4  6001              STR      r1,[r0,#0]            ;891
0000f6  2000              MOVS     r0,#0                 ;894
0000f8  bd70              POP      {r4-r6,pc}
;;;896    
                          ENDP

0000fa  0000              DCW      0x0000
                  |L54.252|
                          DCD      TIM_DMADelayPulseCplt
                  |L54.256|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIM_OC_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_Start_IT PROC
;;;654      */
;;;655    HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
;;;656    {
;;;657      /* Check the parameters */
;;;658      assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;659      
;;;660      switch (Channel)
000002  2900              CMP      r1,#0
;;;661      {
;;;662        case TIM_CHANNEL_1:
;;;663        {       
;;;664          /* Enable the TIM Capture/Compare 1 interrupt */
;;;665          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000004  bf04              ITT      EQ
000006  68d3              LDREQ    r3,[r2,#0xc]
000008  f0430302          ORREQ    r3,r3,#2
00000c  d011              BEQ      |L55.50|
00000e  2904              CMP      r1,#4                 ;660
;;;666        }
;;;667        break;
;;;668        
;;;669        case TIM_CHANNEL_2:
;;;670        {
;;;671          /* Enable the TIM Capture/Compare 2 interrupt */
;;;672          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000010  bf04              ITT      EQ
000012  68d3              LDREQ    r3,[r2,#0xc]
000014  f0430304          ORREQ    r3,r3,#4
000018  d00b              BEQ      |L55.50|
00001a  2908              CMP      r1,#8                 ;660
;;;673        }
;;;674        break;
;;;675        
;;;676        case TIM_CHANNEL_3:
;;;677        {
;;;678          /* Enable the TIM Capture/Compare 3 interrupt */
;;;679          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
00001c  bf04              ITT      EQ
00001e  68d3              LDREQ    r3,[r2,#0xc]
000020  f0430308          ORREQ    r3,r3,#8
000024  d005              BEQ      |L55.50|
000026  290c              CMP      r1,#0xc               ;660
;;;680        }
;;;681        break;
;;;682        
;;;683        case TIM_CHANNEL_4:
;;;684        {
;;;685          /* Enable the TIM Capture/Compare 4 interrupt */
;;;686          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000028  bf04              ITT      EQ
00002a  68d3              LDREQ    r3,[r2,#0xc]
00002c  f0430310          ORREQ    r3,r3,#0x10
000030  d100              BNE      |L55.52|
                  |L55.50|
000032  60d3              STR      r3,[r2,#0xc]          ;679
                  |L55.52|
000034  2301              MOVS     r3,#1                 ;679
000036  6802              LDR      r2,[r0,#0]            ;679
000038  fa03f101          LSL      r1,r3,r1              ;679
00003c  6a13              LDR      r3,[r2,#0x20]         ;679
00003e  438b              BICS     r3,r3,r1              ;679
000040  6213              STR      r3,[r2,#0x20]         ;679
000042  6a13              LDR      r3,[r2,#0x20]         ;679
000044  4319              ORRS     r1,r1,r3              ;679
000046  6211              STR      r1,[r2,#0x20]         ;679
;;;687        }
;;;688        break;
;;;689        
;;;690        default:
;;;691        break;
;;;692      } 
;;;693    
;;;694      /* Enable the Output compare channel */
;;;695      TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;696      
;;;697      if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
000048  6801              LDR      r1,[r0,#0]
00004a  f1a14280          SUB      r2,r1,#0x40000000
00004e  f5b23280          SUBS     r2,r2,#0x10000
000052  bf1c              ITT      NE
000054  f1a14280          SUBNE    r2,r1,#0x40000000
000058  f5b23282          SUBSNE   r2,r2,#0x10400
00005c  d103              BNE      |L55.102|
;;;698      {
;;;699        /* Enable the main output */
;;;700        __HAL_TIM_MOE_ENABLE(htim);
00005e  6c4a              LDR      r2,[r1,#0x44]
000060  f4424200          ORR      r2,r2,#0x8000
000064  644a              STR      r2,[r1,#0x44]
                  |L55.102|
;;;701      }
;;;702    
;;;703      /* Enable the Peripheral */
;;;704      __HAL_TIM_ENABLE(htim);
000066  6800              LDR      r0,[r0,#0]
000068  6801              LDR      r1,[r0,#0]
00006a  f0410101          ORR      r1,r1,#1
00006e  6001              STR      r1,[r0,#0]
;;;705      
;;;706      /* Return function status */
;;;707      return HAL_OK;
000070  2000              MOVS     r0,#0
;;;708    }
000072  4770              BX       lr
;;;709    
                          ENDP


                          AREA ||i.HAL_TIM_OC_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_Stop PROC
;;;621      */
;;;622    HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;623    {
000004  6802              LDR      r2,[r0,#0]
;;;624      /* Check the parameters */
;;;625      assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;626      
;;;627      /* Disable the Output compare channel */
;;;628      TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
000006  2300              MOVS     r3,#0
000008  f04f0c01          MOV      r12,#1
00000c  408b              LSLS     r3,r3,r1
00000e  6a14              LDR      r4,[r2,#0x20]
000010  fa0cf101          LSL      r1,r12,r1
000014  ea240101          BIC      r1,r4,r1
000018  6211              STR      r1,[r2,#0x20]
00001a  6a11              LDR      r1,[r2,#0x20]
00001c  4319              ORRS     r1,r1,r3
00001e  6211              STR      r1,[r2,#0x20]
;;;629      
;;;630      if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
000020  6801              LDR      r1,[r0,#0]
;;;631      {
;;;632        /* Disable the Main Output */
;;;633        __HAL_TIM_MOE_DISABLE(htim);
000022  f2411211          MOV      r2,#0x1111
000026  1093              ASRS     r3,r2,#2
000028  f1a14c80          SUB      r12,r1,#0x40000000    ;630
00002c  f5bc3c80          SUBS     r12,r12,#0x10000      ;630
000030  bf1c              ITT      NE                    ;630
000032  f1a14c80          SUBNE    r12,r1,#0x40000000    ;630
000036  f5bc3c82          SUBSNE   r12,r12,#0x10400      ;630
00003a  d10f              BNE      |L56.92|
00003c  f8d1c020          LDR      r12,[r1,#0x20]
000040  ea1c0f02          TST      r12,r2
000044  bf04              ITT      EQ
000046  f8d1c020          LDREQ    r12,[r1,#0x20]
00004a  ea1c0f03          TSTEQ    r12,r3
00004e  d105              BNE      |L56.92|
000050  f8d1c044          LDR      r12,[r1,#0x44]
000054  f42c4c00          BIC      r12,r12,#0x8000
000058  f8c1c044          STR      r12,[r1,#0x44]
                  |L56.92|
;;;634      }  
;;;635      
;;;636      /* Disable the Peripheral */
;;;637      __HAL_TIM_DISABLE(htim);  
00005c  6800              LDR      r0,[r0,#0]
00005e  6a01              LDR      r1,[r0,#0x20]
000060  4211              TST      r1,r2
000062  bf04              ITT      EQ
000064  6a01              LDREQ    r1,[r0,#0x20]
000066  4219              TSTEQ    r1,r3
000068  d103              BNE      |L56.114|
00006a  6801              LDR      r1,[r0,#0]
00006c  f0210101          BIC      r1,r1,#1
000070  6001              STR      r1,[r0,#0]
                  |L56.114|
;;;638      
;;;639      /* Return function status */
;;;640      return HAL_OK;
;;;641    }  
000072  f85d4b04          POP.W    {r4}
000076  2000              MOVS     r0,#0                 ;640
000078  4770              BX       lr
;;;642    
                          ENDP


                          AREA ||i.HAL_TIM_OC_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_Stop_DMA PROC
;;;908      */
;;;909    HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;910    {
;;;911      /* Check the parameters */
;;;912      assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;913      
;;;914      switch (Channel)
000004  6802              LDR      r2,[r0,#0]
000006  2900              CMP      r1,#0
;;;915      {
;;;916        case TIM_CHANNEL_1:
;;;917        {       
;;;918          /* Disable the TIM Capture/Compare 1 DMA request */
;;;919          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000008  bf04              ITT      EQ
00000a  68d3              LDREQ    r3,[r2,#0xc]
00000c  f4237300          BICEQ    r3,r3,#0x200
000010  d011              BEQ      |L57.54|
000012  2904              CMP      r1,#4                 ;914
;;;920        }
;;;921        break;
;;;922        
;;;923        case TIM_CHANNEL_2:
;;;924        {
;;;925          /* Disable the TIM Capture/Compare 2 DMA request */
;;;926          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000014  bf04              ITT      EQ
000016  68d3              LDREQ    r3,[r2,#0xc]
000018  f4236380          BICEQ    r3,r3,#0x400
00001c  d00b              BEQ      |L57.54|
00001e  2908              CMP      r1,#8                 ;914
;;;927        }
;;;928        break;
;;;929        
;;;930        case TIM_CHANNEL_3:
;;;931        {
;;;932          /* Disable the TIM Capture/Compare 3 DMA request */
;;;933          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
000020  bf04              ITT      EQ
000022  68d3              LDREQ    r3,[r2,#0xc]
000024  f4236300          BICEQ    r3,r3,#0x800
000028  d005              BEQ      |L57.54|
00002a  290c              CMP      r1,#0xc               ;914
;;;934        }
;;;935        break;
;;;936        
;;;937        case TIM_CHANNEL_4:
;;;938        {
;;;939          /* Disable the TIM Capture/Compare 4 interrupt */
;;;940          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
00002c  bf04              ITT      EQ
00002e  68d3              LDREQ    r3,[r2,#0xc]
000030  f4235380          BICEQ    r3,r3,#0x1000
000034  d100              BNE      |L57.56|
                  |L57.54|
000036  60d3              STR      r3,[r2,#0xc]          ;933
                  |L57.56|
;;;941        }
;;;942        break;
;;;943        
;;;944        default:
;;;945        break;
;;;946      } 
;;;947      
;;;948      /* Disable the Output compare channel */
;;;949      TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
000038  f04f0c00          MOV      r12,#0
00003c  6802              LDR      r2,[r0,#0]
00003e  2301              MOVS     r3,#1
000040  fa0cfc01          LSL      r12,r12,r1
000044  6a14              LDR      r4,[r2,#0x20]
000046  fa03f101          LSL      r1,r3,r1
00004a  ea240101          BIC      r1,r4,r1
00004e  6211              STR      r1,[r2,#0x20]
000050  6a11              LDR      r1,[r2,#0x20]
000052  ea41010c          ORR      r1,r1,r12
000056  6211              STR      r1,[r2,#0x20]
;;;950      
;;;951      if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
000058  6801              LDR      r1,[r0,#0]
;;;952      {
;;;953        /* Disable the Main Output */
;;;954        __HAL_TIM_MOE_DISABLE(htim);
00005a  f2411211          MOV      r2,#0x1111
00005e  f2404c44          MOV      r12,#0x444
000062  f1a14480          SUB      r4,r1,#0x40000000     ;951
000066  f5b43480          SUBS     r4,r4,#0x10000        ;951
00006a  bf1c              ITT      NE                    ;951
00006c  f1a14480          SUBNE    r4,r1,#0x40000000     ;951
000070  f5b43482          SUBSNE   r4,r4,#0x10400        ;951
000074  d10a              BNE      |L57.140|
000076  6a0c              LDR      r4,[r1,#0x20]
000078  4214              TST      r4,r2
00007a  bf04              ITT      EQ
00007c  6a0c              LDREQ    r4,[r1,#0x20]
00007e  ea140f0c          TSTEQ    r4,r12
000082  d103              BNE      |L57.140|
000084  6c4c              LDR      r4,[r1,#0x44]
000086  f4244400          BIC      r4,r4,#0x8000
00008a  644c              STR      r4,[r1,#0x44]
                  |L57.140|
;;;955      }
;;;956      
;;;957      /* Disable the Peripheral */
;;;958      __HAL_TIM_DISABLE(htim);
00008c  6801              LDR      r1,[r0,#0]
00008e  6a0c              LDR      r4,[r1,#0x20]
000090  4214              TST      r4,r2
000092  bf04              ITT      EQ
000094  6a0a              LDREQ    r2,[r1,#0x20]
000096  ea120f0c          TSTEQ    r2,r12
00009a  d103              BNE      |L57.164|
00009c  680a              LDR      r2,[r1,#0]
00009e  f0220201          BIC      r2,r2,#1
0000a2  600a              STR      r2,[r1,#0]
                  |L57.164|
;;;959      
;;;960      /* Change the htim state */
;;;961      htim->State = HAL_TIM_STATE_READY;
0000a4  63c3              STR      r3,[r0,#0x3c]
;;;962      
;;;963      /* Return function status */
;;;964      return HAL_OK;
0000a6  2000              MOVS     r0,#0
;;;965    }
0000a8  f85d4b04          POP.W    {r4}
0000ac  4770              BX       lr
;;;966    
                          ENDP


                          AREA ||i.HAL_TIM_OC_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_Stop_IT PROC
;;;721      */
;;;722    HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;723    {
;;;724      /* Check the parameters */
;;;725      assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;726      
;;;727      switch (Channel)
000004  6802              LDR      r2,[r0,#0]
000006  2900              CMP      r1,#0
;;;728      {
;;;729        case TIM_CHANNEL_1:
;;;730        {       
;;;731          /* Disable the TIM Capture/Compare 1 interrupt */
;;;732          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000008  bf04              ITT      EQ
00000a  68d3              LDREQ    r3,[r2,#0xc]
00000c  f0230302          BICEQ    r3,r3,#2
000010  d011              BEQ      |L58.54|
000012  2904              CMP      r1,#4                 ;727
;;;733        }
;;;734        break;
;;;735        
;;;736        case TIM_CHANNEL_2:
;;;737        {
;;;738          /* Disable the TIM Capture/Compare 2 interrupt */
;;;739          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000014  bf04              ITT      EQ
000016  68d3              LDREQ    r3,[r2,#0xc]
000018  f0230304          BICEQ    r3,r3,#4
00001c  d00b              BEQ      |L58.54|
00001e  2908              CMP      r1,#8                 ;727
;;;740        }
;;;741        break;
;;;742        
;;;743        case TIM_CHANNEL_3:
;;;744        {
;;;745          /* Disable the TIM Capture/Compare 3 interrupt */
;;;746          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000020  bf04              ITT      EQ
000022  68d3              LDREQ    r3,[r2,#0xc]
000024  f0230308          BICEQ    r3,r3,#8
000028  d005              BEQ      |L58.54|
00002a  290c              CMP      r1,#0xc               ;727
;;;747        }
;;;748        break;
;;;749        
;;;750        case TIM_CHANNEL_4:
;;;751        {
;;;752          /* Disable the TIM Capture/Compare 4 interrupt */
;;;753          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
00002c  bf04              ITT      EQ
00002e  68d3              LDREQ    r3,[r2,#0xc]
000030  f0230310          BICEQ    r3,r3,#0x10
000034  d100              BNE      |L58.56|
                  |L58.54|
000036  60d3              STR      r3,[r2,#0xc]          ;746
                  |L58.56|
;;;754        }
;;;755        break;
;;;756        
;;;757        default:
;;;758        break; 
;;;759      } 
;;;760      
;;;761      /* Disable the Output compare channel */
;;;762      TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE); 
000038  2300              MOVS     r3,#0
00003a  6802              LDR      r2,[r0,#0]
00003c  f04f0c01          MOV      r12,#1
000040  408b              LSLS     r3,r3,r1
000042  6a14              LDR      r4,[r2,#0x20]
000044  fa0cf101          LSL      r1,r12,r1
000048  ea240101          BIC      r1,r4,r1
00004c  6211              STR      r1,[r2,#0x20]
00004e  6a11              LDR      r1,[r2,#0x20]
000050  4319              ORRS     r1,r1,r3
000052  6211              STR      r1,[r2,#0x20]
;;;763      
;;;764      if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
000054  6801              LDR      r1,[r0,#0]
;;;765      {
;;;766        /* Disable the Main Output */
;;;767        __HAL_TIM_MOE_DISABLE(htim);
000056  f2411211          MOV      r2,#0x1111
00005a  1093              ASRS     r3,r2,#2
00005c  f1a14c80          SUB      r12,r1,#0x40000000    ;764
000060  f5bc3c80          SUBS     r12,r12,#0x10000      ;764
000064  bf1c              ITT      NE                    ;764
000066  f1a14c80          SUBNE    r12,r1,#0x40000000    ;764
00006a  f5bc3c82          SUBSNE   r12,r12,#0x10400      ;764
00006e  d10f              BNE      |L58.144|
000070  f8d1c020          LDR      r12,[r1,#0x20]
000074  ea1c0f02          TST      r12,r2
000078  bf04              ITT      EQ
00007a  f8d1c020          LDREQ    r12,[r1,#0x20]
00007e  ea1c0f03          TSTEQ    r12,r3
000082  d105              BNE      |L58.144|
000084  f8d1c044          LDR      r12,[r1,#0x44]
000088  f42c4c00          BIC      r12,r12,#0x8000
00008c  f8c1c044          STR      r12,[r1,#0x44]
                  |L58.144|
;;;768      }
;;;769      
;;;770      /* Disable the Peripheral */
;;;771      __HAL_TIM_DISABLE(htim);  
000090  6800              LDR      r0,[r0,#0]
000092  6a01              LDR      r1,[r0,#0x20]
000094  4211              TST      r1,r2
000096  bf04              ITT      EQ
000098  6a01              LDREQ    r1,[r0,#0x20]
00009a  4219              TSTEQ    r1,r3
00009c  d103              BNE      |L58.166|
00009e  6801              LDR      r1,[r0,#0]
0000a0  f0210101          BIC      r1,r1,#1
0000a4  6001              STR      r1,[r0,#0]
                  |L58.166|
;;;772      
;;;773      /* Return function status */
;;;774      return HAL_OK;
;;;775    }
0000a6  f85d4b04          POP.W    {r4}
0000aa  2000              MOVS     r0,#0                 ;774
0000ac  4770              BX       lr
;;;776    
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_ConfigChannel||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OnePulse_ConfigChannel PROC
;;;3248     */
;;;3249   HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef* sConfig, uint32_t OutputChannel,  uint32_t InputChannel)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;3250   {
;;;3251     TIM_OC_InitTypeDef temp1;
;;;3252     
;;;3253     /* Check the parameters */
;;;3254     assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
;;;3255     assert_param(IS_TIM_OPM_CHANNELS(InputChannel));
;;;3256   
;;;3257     if(OutputChannel != InputChannel)  
000004  429a              CMP      r2,r3
;;;3258     {
;;;3259       __HAL_LOCK(htim);
;;;3260     
;;;3261       htim->State = HAL_TIM_STATE_BUSY;
;;;3262   
;;;3263       /* Extract the Output compare configuration from sConfig structure */  
;;;3264       temp1.OCMode = sConfig->OCMode;
;;;3265       temp1.Pulse = sConfig->Pulse;
;;;3266       temp1.OCPolarity = sConfig->OCPolarity;
;;;3267       temp1.OCNPolarity = sConfig->OCNPolarity;
;;;3268       temp1.OCIdleState = sConfig->OCIdleState;
;;;3269       temp1.OCNIdleState = sConfig->OCNIdleState; 
;;;3270       
;;;3271       switch (OutputChannel)
;;;3272       {
;;;3273         case TIM_CHANNEL_1:
;;;3274         {
;;;3275           assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;3276         
;;;3277           TIM_OC1_SetConfig(htim->Instance, &temp1); 
;;;3278         }
;;;3279         break;
;;;3280         case TIM_CHANNEL_2:
;;;3281         {
;;;3282           assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;3283         
;;;3284           TIM_OC2_SetConfig(htim->Instance, &temp1);
;;;3285         }
;;;3286         break;
;;;3287         default:
;;;3288         break;  
;;;3289       } 
;;;3290       switch (InputChannel)
;;;3291       {
;;;3292         case TIM_CHANNEL_1:
;;;3293         {
;;;3294           assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;3295         
;;;3296           TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
;;;3297                           sConfig->ICSelection, sConfig->ICFilter);
;;;3298                  
;;;3299           /* Reset the IC1PSC Bits */
;;;3300           htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
;;;3301   
;;;3302           /* Select the Trigger source */
;;;3303           htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;3304           htim->Instance->SMCR |= TIM_TS_TI1FP1;
;;;3305         
;;;3306           /* Select the Slave Mode */      
;;;3307           htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;3308           htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
;;;3309         }
;;;3310         break;
;;;3311         case TIM_CHANNEL_2:
;;;3312         {
;;;3313           assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;3314         
;;;3315           TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
;;;3316                    sConfig->ICSelection, sConfig->ICFilter);
;;;3317                  
;;;3318           /* Reset the IC2PSC Bits */
;;;3319           htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
;;;3320   
;;;3321           /* Select the Trigger source */
;;;3322           htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;3323           htim->Instance->SMCR |= TIM_TS_TI2FP2;
;;;3324         
;;;3325           /* Select the Slave Mode */      
;;;3326           htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;3327           htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
;;;3328         }
;;;3329         break;
;;;3330       
;;;3331         default:
;;;3332         break;  
;;;3333       }
;;;3334     
;;;3335       htim->State = HAL_TIM_STATE_READY;
;;;3336       
;;;3337       __HAL_UNLOCK(htim);
;;;3338     
;;;3339       return HAL_OK;
;;;3340     }
;;;3341     else
;;;3342     {
;;;3343       return HAL_ERROR;
000006  bf04              ITT      EQ
000008  2001              MOVEQ    r0,#1
;;;3344     }
;;;3345   } 
00000a  e8bd8ff0          POPEQ    {r4-r11,pc}
00000e  f8d0c038          LDR      r12,[r0,#0x38]        ;3259
000012  f1bc0f01          CMP      r12,#1                ;3259
000016  bf04              ITT      EQ                    ;3259
000018  2002              MOVEQ    r0,#2                 ;3259
00001a  e8bd8ff0          POPEQ    {r4-r11,pc}
00001e  2402              MOVS     r4,#2                 ;3261
000020  f04f0c01          MOV      r12,#1                ;3259
000024  f8c0c038          STR      r12,[r0,#0x38]        ;3261
000028  63c4              STR      r4,[r0,#0x3c]         ;3261
00002a  e9d14500          LDRD     r4,r5,[r1,#0]         ;3261
00002e  e9d16702          LDRD     r6,r7,[r1,#8]         ;3261
000032  e9d18904          LDRD     r8,r9,[r1,#0x10]      ;3261
000036  f8dfa204          LDR      r10,|L59.572|
00003a  b112              CBZ      r2,|L59.66|
00003c  2a04              CMP      r2,#4                 ;3271
00003e  d02e              BEQ      |L59.158|
000040  e05c              B        |L59.252|
                  |L59.66|
000042  6802              LDR      r2,[r0,#0]            ;3271
000044  f8d2c020          LDR      r12,[r2,#0x20]        ;3271
000048  4552              CMP      r2,r10                ;3271
00004a  f02c0c01          BIC      r12,r12,#1            ;3271
00004e  f8c2c020          STR      r12,[r2,#0x20]        ;3271
000052  f8d2b020          LDR      r11,[r2,#0x20]        ;3271
000056  f8d2c004          LDR      r12,[r2,#4]           ;3271
00005a  f8d2e018          LDR      lr,[r2,#0x18]         ;3271
00005e  f02b0b02          BIC      r11,r11,#2            ;3271
000062  ea46060b          ORR      r6,r6,r11             ;3271
000066  f02e0e73          BIC      lr,lr,#0x73           ;3271
00006a  f42e3e80          BIC      lr,lr,#0x10000        ;3271
00006e  ea44040e          ORR      r4,r4,lr              ;3271
000072  bf1c              ITT      NE                    ;3271
000074  f1a24b80          SUBNE    r11,r2,#0x40000000    ;3271
000078  f5bb3b82          SUBSNE   r11,r11,#0x10400      ;3271
00007c  d10a              BNE      |L59.148|
00007e  f0260608          BIC      r6,r6,#8              ;3277
000082  f42c7c40          BIC      r12,r12,#0x300        ;3277
000086  433e              ORRS     r6,r6,r7              ;3277
000088  ea480c0c          ORR      r12,r8,r12            ;3277
00008c  ea490c0c          ORR      r12,r9,r12            ;3277
000090  f0260604          BIC      r6,r6,#4              ;3277
                  |L59.148|
000094  f8c2c004          STR      r12,[r2,#4]           ;3277
000098  6194              STR      r4,[r2,#0x18]         ;3277
00009a  6355              STR      r5,[r2,#0x34]         ;3277
00009c  e02d              B        |L59.250|
                  |L59.158|
00009e  6802              LDR      r2,[r0,#0]            ;3279
0000a0  f8d2c020          LDR      r12,[r2,#0x20]        ;3279
0000a4  4552              CMP      r2,r10                ;3279
0000a6  f02c0c10          BIC      r12,r12,#0x10         ;3279
0000aa  f8c2c020          STR      r12,[r2,#0x20]        ;3279
0000ae  f8d2b020          LDR      r11,[r2,#0x20]        ;3279
0000b2  f8d2c004          LDR      r12,[r2,#4]           ;3279
0000b6  f8d2e018          LDR      lr,[r2,#0x18]         ;3279
0000ba  f02b0b20          BIC      r11,r11,#0x20         ;3279
0000be  ea4b1606          ORR      r6,r11,r6,LSL #4      ;3279
0000c2  f42e4ee6          BIC      lr,lr,#0x7300         ;3279
0000c6  f02e7e80          BIC      lr,lr,#0x1000000      ;3279
0000ca  ea4e2404          ORR      r4,lr,r4,LSL #8       ;3279
0000ce  bf1c              ITT      NE                    ;3279
0000d0  f1a24b80          SUBNE    r11,r2,#0x40000000    ;3279
0000d4  f5bb3b82          SUBSNE   r11,r11,#0x10400      ;3279
0000d8  d10b              BNE      |L59.242|
0000da  f0260680          BIC      r6,r6,#0x80           ;3284
0000de  f42c6c40          BIC      r12,r12,#0xc00        ;3284
0000e2  ea461607          ORR      r6,r6,r7,LSL #4       ;3284
0000e6  ea4c0c88          ORR      r12,r12,r8,LSL #2     ;3284
0000ea  ea4c0c89          ORR      r12,r12,r9,LSL #2     ;3284
0000ee  f0260640          BIC      r6,r6,#0x40           ;3284
                  |L59.242|
0000f2  f8c2c004          STR      r12,[r2,#4]           ;3284
0000f6  6194              STR      r4,[r2,#0x18]         ;3284
0000f8  6395              STR      r5,[r2,#0x38]         ;3284
                  |L59.250|
0000fa  6216              STR      r6,[r2,#0x20]         ;3284
                  |L59.252|
0000fc  b113              CBZ      r3,|L59.260|
0000fe  2b04              CMP      r3,#4                 ;3290
000100  d05d              BEQ      |L59.446|
000102  e094              B        |L59.558|
                  |L59.260|
000104  6802              LDR      r2,[r0,#0]            ;3296
000106  698c              LDR      r4,[r1,#0x18]         ;3296
000108  e9d15307          LDRD     r5,r3,[r1,#0x1c]      ;3296
00010c  6a11              LDR      r1,[r2,#0x20]         ;3296
00010e  4552              CMP      r2,r10                ;3296
000110  f0210101          BIC      r1,r1,#1              ;3296
000114  6211              STR      r1,[r2,#0x20]         ;3296
000116  6991              LDR      r1,[r2,#0x18]         ;3296
000118  f8d2c020          LDR      r12,[r2,#0x20]        ;3296
00011c  bf18              IT       NE                    ;3296
00011e  f1b24f80          CMPNE    r2,#0x40000000        ;3296
000122  d01f              BEQ      |L59.356|
000124  f1a24680          SUB      r6,r2,#0x40000000     ;3296
000128  f5b66680          SUBS     r6,r6,#0x400          ;3296
00012c  bf1c              ITT      NE                    ;3296
00012e  f1a24680          SUBNE    r6,r2,#0x40000000     ;3296
000132  f5b66600          SUBSNE   r6,r6,#0x800          ;3296
000136  d015              BEQ      |L59.356|
000138  f1a24680          SUB      r6,r2,#0x40000000     ;3296
00013c  f5b66640          SUBS     r6,r6,#0xc00          ;3296
000140  bf1c              ITT      NE                    ;3296
000142  f1a24680          SUBNE    r6,r2,#0x40000000     ;3296
000146  f5b63682          SUBSNE   r6,r6,#0x10400        ;3296
00014a  d00b              BEQ      |L59.356|
00014c  f1a24680          SUB      r6,r2,#0x40000000     ;3296
000150  f5b636a0          SUBS     r6,r6,#0x14000        ;3296
000154  bf1e              ITTT     NE                    ;3296
000156  f1a24680          SUBNE    r6,r2,#0x40000000     ;3296
00015a  f5b656c0          SUBSNE   r6,r6,#0x1800         ;3296
00015e  f0410101          ORRNE    r1,r1,#1              ;3296
000162  d102              BNE      |L59.362|
                  |L59.356|
000164  f0210103          BIC      r1,r1,#3              ;3296
000168  4329              ORRS     r1,r1,r5              ;3296
                  |L59.362|
00016a  25f0              MOVS     r5,#0xf0              ;3296
00016c  ea051503          AND      r5,r5,r3,LSL #4       ;3296
000170  f02c030a          BIC      r3,r12,#0xa           ;3296
000174  f02101f0          BIC      r1,r1,#0xf0           ;3296
000178  f0040c0a          AND      r12,r4,#0xa           ;3296
00017c  4329              ORRS     r1,r1,r5              ;3296
00017e  6191              STR      r1,[r2,#0x18]         ;3296
000180  ea4c0303          ORR      r3,r12,r3             ;3296
000184  6213              STR      r3,[r2,#0x20]         ;3296
000186  6801              LDR      r1,[r0,#0]            ;3300
000188  698a              LDR      r2,[r1,#0x18]         ;3300
00018a  f022020c          BIC      r2,r2,#0xc            ;3300
00018e  618a              STR      r2,[r1,#0x18]         ;3300
000190  6801              LDR      r1,[r0,#0]            ;3303
000192  688a              LDR      r2,[r1,#8]            ;3303
000194  f0220270          BIC      r2,r2,#0x70           ;3303
000198  608a              STR      r2,[r1,#8]            ;3303
00019a  6801              LDR      r1,[r0,#0]            ;3304
00019c  688a              LDR      r2,[r1,#8]            ;3304
00019e  f0420250          ORR      r2,r2,#0x50           ;3304
0001a2  608a              STR      r2,[r1,#8]            ;3304
0001a4  6801              LDR      r1,[r0,#0]            ;3307
0001a6  688a              LDR      r2,[r1,#8]            ;3307
0001a8  f0220207          BIC      r2,r2,#7              ;3307
0001ac  f4223280          BIC      r2,r2,#0x10000        ;3307
0001b0  608a              STR      r2,[r1,#8]            ;3307
0001b2  6801              LDR      r1,[r0,#0]            ;3308
0001b4  688a              LDR      r2,[r1,#8]            ;3308
0001b6  f0420206          ORR      r2,r2,#6              ;3308
0001ba  608a              STR      r2,[r1,#8]            ;3308
0001bc  e037              B        |L59.558|
                  |L59.446|
0001be  6802              LDR      r2,[r0,#0]            ;3315
0001c0  e9d13c06          LDRD     r3,r12,[r1,#0x18]     ;3315
0001c4  6a09              LDR      r1,[r1,#0x20]         ;3315
0001c6  6a14              LDR      r4,[r2,#0x20]         ;3315
0001c8  f44f4570          MOV      r5,#0xf000            ;3315
0001cc  26a0              MOVS     r6,#0xa0              ;3315
0001ce  f0240410          BIC      r4,r4,#0x10           ;3315
0001d2  6214              STR      r4,[r2,#0x20]         ;3315
0001d4  ea053501          AND      r5,r5,r1,LSL #12      ;3315
0001d8  6991              LDR      r1,[r2,#0x18]         ;3315
0001da  6a14              LDR      r4,[r2,#0x20]         ;3315
0001dc  ea061603          AND      r6,r6,r3,LSL #4       ;3315
0001e0  f4217340          BIC      r3,r1,#0x300          ;3315
0001e4  f02401a0          BIC      r1,r4,#0xa0           ;3315
0001e8  ea43230c          ORR      r3,r3,r12,LSL #8      ;3315
0001ec  4331              ORRS     r1,r1,r6              ;3315
0001ee  f4234370          BIC      r3,r3,#0xf000         ;3315
0001f2  432b              ORRS     r3,r3,r5              ;3315
0001f4  6193              STR      r3,[r2,#0x18]         ;3315
0001f6  6211              STR      r1,[r2,#0x20]         ;3315
0001f8  6801              LDR      r1,[r0,#0]            ;3319
0001fa  698a              LDR      r2,[r1,#0x18]         ;3319
0001fc  f4226240          BIC      r2,r2,#0xc00          ;3319
000200  618a              STR      r2,[r1,#0x18]         ;3319
000202  6801              LDR      r1,[r0,#0]            ;3322
000204  688a              LDR      r2,[r1,#8]            ;3322
000206  f0220270          BIC      r2,r2,#0x70           ;3322
00020a  608a              STR      r2,[r1,#8]            ;3322
00020c  6801              LDR      r1,[r0,#0]            ;3323
00020e  688a              LDR      r2,[r1,#8]            ;3323
000210  f0420260          ORR      r2,r2,#0x60           ;3323
000214  608a              STR      r2,[r1,#8]            ;3323
000216  6801              LDR      r1,[r0,#0]            ;3326
000218  688a              LDR      r2,[r1,#8]            ;3326
00021a  f0220207          BIC      r2,r2,#7              ;3326
00021e  f4223280          BIC      r2,r2,#0x10000        ;3326
000222  608a              STR      r2,[r1,#8]            ;3326
000224  6801              LDR      r1,[r0,#0]            ;3327
000226  688a              LDR      r2,[r1,#8]            ;3327
000228  f0420206          ORR      r2,r2,#6              ;3327
00022c  608a              STR      r2,[r1,#8]            ;3327
                  |L59.558|
00022e  2101              MOVS     r1,#1                 ;3335
000230  63c1              STR      r1,[r0,#0x3c]         ;3335
000232  2200              MOVS     r2,#0                 ;3337
000234  6382              STR      r2,[r0,#0x38]         ;3339
000236  4610              MOV      r0,r2                 ;3339
000238  e8bd8ff0          POP      {r4-r11,pc}
;;;3346   
                          ENDP

                  |L59.572|
                          DCD      0x40010000

                          AREA ||i.HAL_TIM_OnePulse_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_DeInit PROC
;;;2046     */
;;;2047   HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;2048   {
000002  4604              MOV      r4,r0
;;;2049     /* Check the parameters */
;;;2050     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;2051     
;;;2052     htim->State = HAL_TIM_STATE_BUSY;
;;;2053     
;;;2054     /* Disable the TIM Peripheral Clock */
;;;2055     __HAL_TIM_DISABLE(htim);
000004  f2411111          MOV      r1,#0x1111
000008  2002              MOVS     r0,#2                 ;2052
00000a  63e0              STR      r0,[r4,#0x3c]         ;2052
00000c  6820              LDR      r0,[r4,#0]
00000e  6a02              LDR      r2,[r0,#0x20]
000010  420a              TST      r2,r1
000012  d108              BNE      |L60.38|
000014  6a01              LDR      r1,[r0,#0x20]
000016  f2404244          MOV      r2,#0x444
00001a  4211              TST      r1,r2
00001c  d103              BNE      |L60.38|
00001e  6801              LDR      r1,[r0,#0]
000020  f0210101          BIC      r1,r1,#1
000024  6001              STR      r1,[r0,#0]
                  |L60.38|
;;;2056     
;;;2057     /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;2058     HAL_TIM_OnePulse_MspDeInit(htim);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       HAL_TIM_OnePulse_MspDeInit
;;;2059       
;;;2060     /* Change TIM state */  
;;;2061     htim->State = HAL_TIM_STATE_RESET;
00002c  2000              MOVS     r0,#0
00002e  63e0              STR      r0,[r4,#0x3c]
;;;2062   
;;;2063     /* Release Lock */
;;;2064     __HAL_UNLOCK(htim);
000030  63a0              STR      r0,[r4,#0x38]
;;;2065   
;;;2066     return HAL_OK;
;;;2067   }
000032  bd10              POP      {r4,pc}
;;;2068   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_GetState PROC
;;;4580     */
;;;4581   HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim)
000000  6bc0              LDR      r0,[r0,#0x3c]
;;;4582   {
;;;4583     return htim->State;
;;;4584   }
000002  4770              BX       lr
;;;4585   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_Init PROC
;;;2000     */
;;;2001   HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
000000  2800              CMP      r0,#0
;;;2002   {
;;;2003     /* Check the TIM handle allocation */
;;;2004     if(htim == NULL)
;;;2005     {
;;;2006       return HAL_ERROR;
000002  bf04              ITT      EQ
000004  2001              MOVEQ    r0,#1
;;;2007     }
;;;2008   
;;;2009     /* Check the parameters */
;;;2010     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;2011     assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;2012     assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;2013     assert_param(IS_TIM_OPM_MODE(OnePulseMode));
;;;2014     
;;;2015     if(htim->State == HAL_TIM_STATE_RESET)
;;;2016     { 
;;;2017       /* Allocate lock resource and initialize it */
;;;2018       htim->Lock = HAL_UNLOCKED;    
;;;2019       /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;2020       HAL_TIM_OnePulse_MspInit(htim);
;;;2021     }
;;;2022     
;;;2023     /* Set the TIM state */
;;;2024     htim->State= HAL_TIM_STATE_BUSY;  
;;;2025     
;;;2026     /* Configure the Time base in the One Pulse Mode */
;;;2027     TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;2028     
;;;2029     /* Reset the OPM Bit */
;;;2030     htim->Instance->CR1 &= ~TIM_CR1_OPM;
;;;2031   
;;;2032     /* Configure the OPM Mode */
;;;2033     htim->Instance->CR1 |= OnePulseMode;
;;;2034      
;;;2035     /* Initialize the TIM state*/
;;;2036     htim->State= HAL_TIM_STATE_READY;
;;;2037     
;;;2038     return HAL_OK;
;;;2039   }
000006  4770              BXEQ     lr
000008  b570              PUSH     {r4-r6,lr}            ;2002
00000a  4604              MOV      r4,r0                 ;2002
00000c  6bc0              LDR      r0,[r0,#0x3c]         ;2015
00000e  460d              MOV      r5,r1                 ;2002
000010  b920              CBNZ     r0,|L62.28|
000012  2000              MOVS     r0,#0                 ;2018
000014  63a0              STR      r0,[r4,#0x38]         ;2020
000016  4620              MOV      r0,r4                 ;2020
000018  f7fffffe          BL       HAL_TIM_OnePulse_MspInit
                  |L62.28|
00001c  2002              MOVS     r0,#2                 ;2024
00001e  63e0              STR      r0,[r4,#0x3c]         ;2024
000020  6820              LDR      r0,[r4,#0]            ;2027
000022  1d21              ADDS     r1,r4,#4              ;2027
000024  f7fffffe          BL       TIM_Base_SetConfig
000028  6820              LDR      r0,[r4,#0]            ;2030
00002a  2101              MOVS     r1,#1                 ;2036
00002c  6802              LDR      r2,[r0,#0]            ;2030
00002e  f0220208          BIC      r2,r2,#8              ;2030
000032  6002              STR      r2,[r0,#0]            ;2030
000034  6820              LDR      r0,[r4,#0]            ;2033
000036  6802              LDR      r2,[r0,#0]            ;2033
000038  432a              ORRS     r2,r2,r5              ;2033
00003a  6002              STR      r2,[r0,#0]            ;2033
00003c  63e1              STR      r1,[r4,#0x3c]         ;2036
00003e  2000              MOVS     r0,#0                 ;2038
000040  bd70              POP      {r4-r6,pc}
;;;2040   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_MspDeInit PROC
;;;2090     */
;;;2091   __weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2092   {
;;;2093     /* Prevent unused argument(s) compilation warning */
;;;2094     UNUSED(htim);
;;;2095    
;;;2096     /* NOTE : This function Should not be modified, when the callback is needed,
;;;2097               the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
;;;2098      */
;;;2099   }
;;;2100   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_MspInit PROC
;;;2074     */
;;;2075   __weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2076   {
;;;2077     /* Prevent unused argument(s) compilation warning */
;;;2078     UNUSED(htim);
;;;2079    
;;;2080     /* NOTE : This function Should not be modified, when the callback is needed,
;;;2081               the HAL_TIM_OnePulse_MspInit could be implemented in the user file
;;;2082      */
;;;2083   }
;;;2084   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_Start PROC
;;;2110     */
;;;2111   HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  6801              LDR      r1,[r0,#0]
000002  6a0a              LDR      r2,[r1,#0x20]
000004  f0220201          BIC      r2,r2,#1
000008  620a              STR      r2,[r1,#0x20]
00000a  6a0a              LDR      r2,[r1,#0x20]
00000c  f0420201          ORR      r2,r2,#1
000010  620a              STR      r2,[r1,#0x20]
000012  6801              LDR      r1,[r0,#0]
000014  6a0a              LDR      r2,[r1,#0x20]
000016  f0220210          BIC      r2,r2,#0x10
00001a  620a              STR      r2,[r1,#0x20]
00001c  6a0a              LDR      r2,[r1,#0x20]
00001e  f0420210          ORR      r2,r2,#0x10
000022  620a              STR      r2,[r1,#0x20]
;;;2112   {
;;;2113     /* Enable the Capture compare and the Input Capture channels 
;;;2114       (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
;;;2115       if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
;;;2116       if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
;;;2117       in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together 
;;;2118       
;;;2119       No need to enable the counter, it's enabled automatically by hardware 
;;;2120       (the counter starts in response to a stimulus and generate a pulse */
;;;2121     
;;;2122     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
;;;2123     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
;;;2124     
;;;2125     if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
000024  6800              LDR      r0,[r0,#0]
000026  f1a04180          SUB      r1,r0,#0x40000000
00002a  f5b13180          SUBS     r1,r1,#0x10000
00002e  bf1c              ITT      NE
000030  f1a04180          SUBNE    r1,r0,#0x40000000
000034  f5b13182          SUBSNE   r1,r1,#0x10400
000038  d103              BNE      |L65.66|
;;;2126     {
;;;2127       /* Enable the main output */
;;;2128       __HAL_TIM_MOE_ENABLE(htim);
00003a  6c41              LDR      r1,[r0,#0x44]
00003c  f4414100          ORR      r1,r1,#0x8000
000040  6441              STR      r1,[r0,#0x44]
                  |L65.66|
;;;2129     }
;;;2130     
;;;2131     /* Return function status */
;;;2132     return HAL_OK;
000042  2000              MOVS     r0,#0
;;;2133   }
000044  4770              BX       lr
;;;2134   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_Start_IT PROC
;;;2178     */
;;;2179   HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  6801              LDR      r1,[r0,#0]
;;;2180   {
;;;2181     /* Enable the Capture compare and the Input Capture channels 
;;;2182       (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
;;;2183       if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
;;;2184       if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
;;;2185       in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together 
;;;2186       
;;;2187       No need to enable the counter, it's enabled automatically by hardware 
;;;2188       (the counter starts in response to a stimulus and generate a pulse */
;;;2189    
;;;2190     /* Enable the TIM Capture/Compare 1 interrupt */
;;;2191     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000002  68ca              LDR      r2,[r1,#0xc]
000004  f0420202          ORR      r2,r2,#2
000008  60ca              STR      r2,[r1,#0xc]
;;;2192     
;;;2193     /* Enable the TIM Capture/Compare 2 interrupt */
;;;2194     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
00000a  6801              LDR      r1,[r0,#0]
00000c  68ca              LDR      r2,[r1,#0xc]
00000e  f0420204          ORR      r2,r2,#4
000012  60ca              STR      r2,[r1,#0xc]
000014  6801              LDR      r1,[r0,#0]
000016  6a0a              LDR      r2,[r1,#0x20]
000018  f0220201          BIC      r2,r2,#1
00001c  620a              STR      r2,[r1,#0x20]
00001e  6a0a              LDR      r2,[r1,#0x20]
000020  f0420201          ORR      r2,r2,#1
000024  620a              STR      r2,[r1,#0x20]
000026  6801              LDR      r1,[r0,#0]
000028  6a0a              LDR      r2,[r1,#0x20]
00002a  f0220210          BIC      r2,r2,#0x10
00002e  620a              STR      r2,[r1,#0x20]
000030  6a0a              LDR      r2,[r1,#0x20]
000032  f0420210          ORR      r2,r2,#0x10
000036  620a              STR      r2,[r1,#0x20]
;;;2195     
;;;2196     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
;;;2197     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
;;;2198     
;;;2199     if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
000038  6800              LDR      r0,[r0,#0]
00003a  f1a04180          SUB      r1,r0,#0x40000000
00003e  f5b13180          SUBS     r1,r1,#0x10000
000042  bf1c              ITT      NE
000044  f1a04180          SUBNE    r1,r0,#0x40000000
000048  f5b13182          SUBSNE   r1,r1,#0x10400
00004c  d103              BNE      |L66.86|
;;;2200     {
;;;2201       /* Enable the main output */
;;;2202       __HAL_TIM_MOE_ENABLE(htim);
00004e  6c41              LDR      r1,[r0,#0x44]
000050  f4414100          ORR      r1,r1,#0x8000
000054  6441              STR      r1,[r0,#0x44]
                  |L66.86|
;;;2203     }
;;;2204     
;;;2205     /* Return function status */
;;;2206     return HAL_OK;
000056  2000              MOVS     r0,#0
;;;2207   }
000058  4770              BX       lr
;;;2208   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_Stop PROC
;;;2144     */
;;;2145   HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  6801              LDR      r1,[r0,#0]
000002  6a0a              LDR      r2,[r1,#0x20]
000004  f0220201          BIC      r2,r2,#1
000008  620a              STR      r2,[r1,#0x20]
00000a  6a0a              LDR      r2,[r1,#0x20]
00000c  620a              STR      r2,[r1,#0x20]
00000e  6801              LDR      r1,[r0,#0]
000010  6a0a              LDR      r2,[r1,#0x20]
000012  f0220210          BIC      r2,r2,#0x10
000016  620a              STR      r2,[r1,#0x20]
000018  6a0a              LDR      r2,[r1,#0x20]
00001a  620a              STR      r2,[r1,#0x20]
;;;2146   {
;;;2147     /* Disable the Capture compare and the Input Capture channels 
;;;2148     (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
;;;2149     if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
;;;2150     if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
;;;2151     in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
;;;2152     
;;;2153     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
;;;2154     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
;;;2155       
;;;2156     if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
;;;2157     {
;;;2158       /* Disable the Main Output */
;;;2159       __HAL_TIM_MOE_DISABLE(htim);
00001c  f2411211          MOV      r2,#0x1111
000020  6801              LDR      r1,[r0,#0]            ;2156
000022  1093              ASRS     r3,r2,#2
000024  f1a14c80          SUB      r12,r1,#0x40000000    ;2156
000028  f5bc3c80          SUBS     r12,r12,#0x10000      ;2156
00002c  bf1c              ITT      NE                    ;2156
00002e  f1a14c80          SUBNE    r12,r1,#0x40000000    ;2156
000032  f5bc3c82          SUBSNE   r12,r12,#0x10400      ;2156
000036  d10f              BNE      |L67.88|
000038  f8d1c020          LDR      r12,[r1,#0x20]
00003c  ea1c0f02          TST      r12,r2
000040  bf04              ITT      EQ
000042  f8d1c020          LDREQ    r12,[r1,#0x20]
000046  ea1c0f03          TSTEQ    r12,r3
00004a  d105              BNE      |L67.88|
00004c  f8d1c044          LDR      r12,[r1,#0x44]
000050  f42c4c00          BIC      r12,r12,#0x8000
000054  f8c1c044          STR      r12,[r1,#0x44]
                  |L67.88|
;;;2160     }
;;;2161       
;;;2162     /* Disable the Peripheral */
;;;2163     __HAL_TIM_DISABLE(htim); 
000058  6800              LDR      r0,[r0,#0]
00005a  6a01              LDR      r1,[r0,#0x20]
00005c  4211              TST      r1,r2
00005e  bf04              ITT      EQ
000060  6a01              LDREQ    r1,[r0,#0x20]
000062  4219              TSTEQ    r1,r3
000064  d103              BNE      |L67.110|
000066  6801              LDR      r1,[r0,#0]
000068  f0210101          BIC      r1,r1,#1
00006c  6001              STR      r1,[r0,#0]
                  |L67.110|
;;;2164     
;;;2165     /* Return function status */
;;;2166     return HAL_OK;
00006e  2000              MOVS     r0,#0
;;;2167   }
000070  4770              BX       lr
;;;2168   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_Stop_IT PROC
;;;2218     */
;;;2219   HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  6801              LDR      r1,[r0,#0]
;;;2220   {
;;;2221     /* Disable the TIM Capture/Compare 1 interrupt */
;;;2222     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);  
000002  68ca              LDR      r2,[r1,#0xc]
000004  f0220202          BIC      r2,r2,#2
000008  60ca              STR      r2,[r1,#0xc]
;;;2223     
;;;2224     /* Disable the TIM Capture/Compare 2 interrupt */
;;;2225     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
00000a  6801              LDR      r1,[r0,#0]
00000c  68ca              LDR      r2,[r1,#0xc]
00000e  f0220204          BIC      r2,r2,#4
000012  60ca              STR      r2,[r1,#0xc]
000014  6801              LDR      r1,[r0,#0]
000016  6a0a              LDR      r2,[r1,#0x20]
000018  f0220201          BIC      r2,r2,#1
00001c  620a              STR      r2,[r1,#0x20]
00001e  6a0a              LDR      r2,[r1,#0x20]
000020  620a              STR      r2,[r1,#0x20]
000022  6801              LDR      r1,[r0,#0]
000024  6a0a              LDR      r2,[r1,#0x20]
000026  f0220210          BIC      r2,r2,#0x10
00002a  620a              STR      r2,[r1,#0x20]
00002c  6a0a              LDR      r2,[r1,#0x20]
00002e  620a              STR      r2,[r1,#0x20]
;;;2226     
;;;2227     /* Disable the Capture compare and the Input Capture channels 
;;;2228     (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
;;;2229     if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
;;;2230     if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
;;;2231     in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */  
;;;2232     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
;;;2233     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
;;;2234       
;;;2235     if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
;;;2236     {
;;;2237       /* Disable the Main Output */
;;;2238       __HAL_TIM_MOE_DISABLE(htim);
000030  f2411211          MOV      r2,#0x1111
000034  6801              LDR      r1,[r0,#0]            ;2235
000036  1093              ASRS     r3,r2,#2
000038  f1a14c80          SUB      r12,r1,#0x40000000    ;2235
00003c  f5bc3c80          SUBS     r12,r12,#0x10000      ;2235
000040  bf1c              ITT      NE                    ;2235
000042  f1a14c80          SUBNE    r12,r1,#0x40000000    ;2235
000046  f5bc3c82          SUBSNE   r12,r12,#0x10400      ;2235
00004a  d10f              BNE      |L68.108|
00004c  f8d1c020          LDR      r12,[r1,#0x20]
000050  ea1c0f02          TST      r12,r2
000054  bf04              ITT      EQ
000056  f8d1c020          LDREQ    r12,[r1,#0x20]
00005a  ea1c0f03          TSTEQ    r12,r3
00005e  d105              BNE      |L68.108|
000060  f8d1c044          LDR      r12,[r1,#0x44]
000064  f42c4c00          BIC      r12,r12,#0x8000
000068  f8c1c044          STR      r12,[r1,#0x44]
                  |L68.108|
;;;2239     }
;;;2240       
;;;2241     /* Disable the Peripheral */
;;;2242      __HAL_TIM_DISABLE(htim);  
00006c  6800              LDR      r0,[r0,#0]
00006e  6a01              LDR      r1,[r0,#0x20]
000070  4211              TST      r1,r2
000072  bf04              ITT      EQ
000074  6a01              LDREQ    r1,[r0,#0x20]
000076  4219              TSTEQ    r1,r3
000078  d103              BNE      |L68.130|
00007a  6801              LDR      r1,[r0,#0]
00007c  f0210101          BIC      r1,r1,#1
000080  6001              STR      r1,[r0,#0]
                  |L68.130|
;;;2243     
;;;2244     /* Return function status */
;;;2245     return HAL_OK;
000082  2000              MOVS     r0,#0
;;;2246   }
000084  4770              BX       lr
;;;2247   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_ConfigChannel||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PWM_ConfigChannel PROC
;;;3147     */
;;;3148   __weak HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
000000  6b83              LDR      r3,[r0,#0x38]
;;;3149   {
;;;3150     __HAL_LOCK(htim);
000002  2b01              CMP      r3,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;3151     
;;;3152     /* Check the parameters */ 
;;;3153     assert_param(IS_TIM_CHANNELS(Channel)); 
;;;3154     assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
;;;3155     assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
;;;3156     assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode)); 
;;;3157     
;;;3158     htim->State = HAL_TIM_STATE_BUSY;
;;;3159       
;;;3160     switch (Channel)
;;;3161     {
;;;3162       case TIM_CHANNEL_1:
;;;3163       {
;;;3164         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;3165         /* Configure the Channel 1 in PWM mode */
;;;3166         TIM_OC1_SetConfig(htim->Instance, sConfig);
;;;3167         
;;;3168         /* Set the Preload enable bit for channel1 */
;;;3169         htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
;;;3170         
;;;3171         /* Configure the Output Fast mode */
;;;3172         htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
;;;3173         htim->Instance->CCMR1 |= sConfig->OCFastMode;
;;;3174       }
;;;3175       break;
;;;3176       
;;;3177       case TIM_CHANNEL_2:
;;;3178       {
;;;3179         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;3180         /* Configure the Channel 2 in PWM mode */
;;;3181         TIM_OC2_SetConfig(htim->Instance, sConfig);
;;;3182         
;;;3183         /* Set the Preload enable bit for channel2 */
;;;3184         htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
;;;3185         
;;;3186         /* Configure the Output Fast mode */
;;;3187         htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
;;;3188         htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
;;;3189       }
;;;3190       break;
;;;3191       
;;;3192       case TIM_CHANNEL_3:
;;;3193       {
;;;3194         assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
;;;3195         /* Configure the Channel 3 in PWM mode */
;;;3196         TIM_OC3_SetConfig(htim->Instance, sConfig);
;;;3197         
;;;3198         /* Set the Preload enable bit for channel3 */
;;;3199         htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
;;;3200         
;;;3201        /* Configure the Output Fast mode */
;;;3202         htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
;;;3203         htim->Instance->CCMR2 |= sConfig->OCFastMode;  
;;;3204       }
;;;3205       break;
;;;3206       
;;;3207       case TIM_CHANNEL_4:
;;;3208       {
;;;3209         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
;;;3210         /* Configure the Channel 4 in PWM mode */
;;;3211         TIM_OC4_SetConfig(htim->Instance, sConfig);
;;;3212         
;;;3213         /* Set the Preload enable bit for channel4 */
;;;3214         htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
;;;3215         
;;;3216        /* Configure the Output Fast mode */
;;;3217         htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
;;;3218         htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
;;;3219       }
;;;3220       break;
;;;3221       
;;;3222       default:
;;;3223       break;    
;;;3224     }
;;;3225     
;;;3226     htim->State = HAL_TIM_STATE_READY;
;;;3227       
;;;3228     __HAL_UNLOCK(htim);
;;;3229     
;;;3230     return HAL_OK;
;;;3231   }
000008  4770              BXEQ     lr
00000a  e92d03f0          PUSH     {r4-r9}               ;3149
00000e  2401              MOVS     r4,#1                 ;3150
000010  6384              STR      r4,[r0,#0x38]         ;3158
000012  2302              MOVS     r3,#2                 ;3158
000014  63c3              STR      r3,[r0,#0x3c]         ;3158
000016  4b82              LDR      r3,|L69.544|
000018  f8dfc208          LDR      r12,|L69.548|
00001c  b13a              CBZ      r2,|L69.46|
00001e  2a04              CMP      r2,#4                 ;3160
000020  d044              BEQ      |L69.172|
000022  2a08              CMP      r2,#8                 ;3160
000024  d07e              BEQ      |L69.292|
000026  2a0c              CMP      r2,#0xc               ;3160
000028  d07d              BEQ      |L69.294|
00002a  f000b8f2          B.W      |L69.530|
                  |L69.46|
00002e  6802              LDR      r2,[r0,#0]            ;3160
000030  6a15              LDR      r5,[r2,#0x20]         ;3160
000032  429a              CMP      r2,r3                 ;3160
000034  f0250301          BIC      r3,r5,#1              ;3160
000038  6213              STR      r3,[r2,#0x20]         ;3160
00003a  6a15              LDR      r5,[r2,#0x20]         ;3160
00003c  6853              LDR      r3,[r2,#4]            ;3160
00003e  6996              LDR      r6,[r2,#0x18]         ;3160
000040  f0250502          BIC      r5,r5,#2              ;3160
000044  f8d18008          LDR      r8,[r1,#8]            ;3160
000048  680f              LDR      r7,[r1,#0]            ;3160
00004a  f0260673          BIC      r6,r6,#0x73           ;3160
00004e  f4263680          BIC      r6,r6,#0x10000        ;3160
000052  ea480505          ORR      r5,r8,r5              ;3160
000056  ea470606          ORR      r6,r7,r6              ;3160
00005a  bf18              IT       NE                    ;3160
00005c  4562              CMPNE    r2,r12                ;3160
00005e  d111              BNE      |L69.132|
000060  f4237c80          BIC      r12,r3,#0x100         ;3166
000064  f8d1900c          LDR      r9,[r1,#0xc]          ;3166
000068  f0250308          BIC      r3,r5,#8              ;3166
00006c  e9d17805          LDRD     r7,r8,[r1,#0x14]      ;3166
000070  f42c7500          BIC      r5,r12,#0x200         ;3166
000074  ea490c03          ORR      r12,r9,r3             ;3166
000078  ea470305          ORR      r3,r7,r5              ;3166
00007c  f02c0504          BIC      r5,r12,#4             ;3166
000080  ea480303          ORR      r3,r8,r3              ;3166
                  |L69.132|
000084  6053              STR      r3,[r2,#4]            ;3166
000086  6196              STR      r6,[r2,#0x18]         ;3166
000088  684b              LDR      r3,[r1,#4]            ;3166
00008a  6353              STR      r3,[r2,#0x34]         ;3166
00008c  6215              STR      r5,[r2,#0x20]         ;3166
00008e  6802              LDR      r2,[r0,#0]            ;3169
000090  6993              LDR      r3,[r2,#0x18]         ;3169
000092  f0430308          ORR      r3,r3,#8              ;3169
000096  6193              STR      r3,[r2,#0x18]         ;3169
000098  6802              LDR      r2,[r0,#0]            ;3172
00009a  6993              LDR      r3,[r2,#0x18]         ;3172
00009c  f0230304          BIC      r3,r3,#4              ;3172
0000a0  6193              STR      r3,[r2,#0x18]         ;3172
0000a2  6802              LDR      r2,[r0,#0]            ;3173
0000a4  6909              LDR      r1,[r1,#0x10]         ;3173
0000a6  6993              LDR      r3,[r2,#0x18]         ;3173
0000a8  4319              ORRS     r1,r1,r3              ;3173
0000aa  e03f              B        |L69.300|
                  |L69.172|
0000ac  6802              LDR      r2,[r0,#0]            ;3175
0000ae  6a15              LDR      r5,[r2,#0x20]         ;3175
0000b0  429a              CMP      r2,r3                 ;3175
0000b2  f0250310          BIC      r3,r5,#0x10           ;3175
0000b6  6213              STR      r3,[r2,#0x20]         ;3175
0000b8  6a15              LDR      r5,[r2,#0x20]         ;3175
0000ba  6853              LDR      r3,[r2,#4]            ;3175
0000bc  6996              LDR      r6,[r2,#0x18]         ;3175
0000be  f0250520          BIC      r5,r5,#0x20           ;3175
0000c2  f8d18008          LDR      r8,[r1,#8]            ;3175
0000c6  680f              LDR      r7,[r1,#0]            ;3175
0000c8  f42646e6          BIC      r6,r6,#0x7300         ;3175
0000cc  f0267680          BIC      r6,r6,#0x1000000      ;3175
0000d0  ea451508          ORR      r5,r5,r8,LSL #4       ;3175
0000d4  ea462607          ORR      r6,r6,r7,LSL #8       ;3175
0000d8  bf18              IT       NE                    ;3175
0000da  4562              CMPNE    r2,r12                ;3175
0000dc  d10f              BNE      |L69.254|
0000de  f8d1900c          LDR      r9,[r1,#0xc]          ;3181
0000e2  f0250c80          BIC      r12,r5,#0x80          ;3181
0000e6  e9d17805          LDRD     r7,r8,[r1,#0x14]      ;3181
0000ea  f4236540          BIC      r5,r3,#0xc00          ;3181
0000ee  ea4c1309          ORR      r3,r12,r9,LSL #4      ;3181
0000f2  ea450c87          ORR      r12,r5,r7,LSL #2      ;3181
0000f6  f0230540          BIC      r5,r3,#0x40           ;3181
0000fa  ea4c0388          ORR      r3,r12,r8,LSL #2      ;3181
                  |L69.254|
0000fe  6053              STR      r3,[r2,#4]            ;3181
000100  6196              STR      r6,[r2,#0x18]         ;3181
000102  684b              LDR      r3,[r1,#4]            ;3181
000104  6393              STR      r3,[r2,#0x38]         ;3181
000106  6215              STR      r5,[r2,#0x20]         ;3181
000108  6802              LDR      r2,[r0,#0]            ;3184
00010a  6993              LDR      r3,[r2,#0x18]         ;3184
00010c  f4436300          ORR      r3,r3,#0x800          ;3184
000110  6193              STR      r3,[r2,#0x18]         ;3184
000112  6802              LDR      r2,[r0,#0]            ;3187
000114  6993              LDR      r3,[r2,#0x18]         ;3187
000116  f4236380          BIC      r3,r3,#0x400          ;3187
00011a  6193              STR      r3,[r2,#0x18]         ;3187
00011c  6802              LDR      r2,[r0,#0]            ;3188
00011e  6909              LDR      r1,[r1,#0x10]         ;3188
000120  6993              LDR      r3,[r2,#0x18]         ;3188
000122  e001              B        |L69.296|
                  |L69.292|
000124  e004              B        |L69.304|
                  |L69.294|
000126  e040              B        |L69.426|
                  |L69.296|
000128  ea432101          ORR      r1,r3,r1,LSL #8       ;3188
                  |L69.300|
00012c  6191              STR      r1,[r2,#0x18]         ;3173
00012e  e070              B        |L69.530|
                  |L69.304|
000130  6802              LDR      r2,[r0,#0]            ;3173
000132  6a15              LDR      r5,[r2,#0x20]         ;3173
000134  429a              CMP      r2,r3                 ;3173
000136  f4257380          BIC      r3,r5,#0x100          ;3173
00013a  6213              STR      r3,[r2,#0x20]         ;3173
00013c  6a15              LDR      r5,[r2,#0x20]         ;3173
00013e  6853              LDR      r3,[r2,#4]            ;3173
000140  69d6              LDR      r6,[r2,#0x1c]         ;3173
000142  f4257500          BIC      r5,r5,#0x200          ;3173
000146  f8d18008          LDR      r8,[r1,#8]            ;3173
00014a  680f              LDR      r7,[r1,#0]            ;3173
00014c  f0260673          BIC      r6,r6,#0x73           ;3173
000150  f4263680          BIC      r6,r6,#0x10000        ;3173
000154  ea452508          ORR      r5,r5,r8,LSL #8       ;3173
000158  ea470606          ORR      r6,r7,r6              ;3173
00015c  bf18              IT       NE                    ;3173
00015e  4562              CMPNE    r2,r12                ;3173
000160  d10f              BNE      |L69.386|
000162  f8d1900c          LDR      r9,[r1,#0xc]          ;3196
000166  f4256c00          BIC      r12,r5,#0x800         ;3196
00016a  e9d17805          LDRD     r7,r8,[r1,#0x14]      ;3196
00016e  f4235340          BIC      r3,r3,#0x3000         ;3196
000172  ea4c2c09          ORR      r12,r12,r9,LSL #8     ;3196
000176  ea431307          ORR      r3,r3,r7,LSL #4       ;3196
00017a  f42c6580          BIC      r5,r12,#0x400         ;3196
00017e  ea431308          ORR      r3,r3,r8,LSL #4       ;3196
                  |L69.386|
000182  6053              STR      r3,[r2,#4]            ;3196
000184  61d6              STR      r6,[r2,#0x1c]         ;3196
000186  684b              LDR      r3,[r1,#4]            ;3196
000188  63d3              STR      r3,[r2,#0x3c]         ;3196
00018a  6215              STR      r5,[r2,#0x20]         ;3196
00018c  6802              LDR      r2,[r0,#0]            ;3199
00018e  69d3              LDR      r3,[r2,#0x1c]         ;3199
000190  f0430308          ORR      r3,r3,#8              ;3199
000194  61d3              STR      r3,[r2,#0x1c]         ;3199
000196  6802              LDR      r2,[r0,#0]            ;3202
000198  69d3              LDR      r3,[r2,#0x1c]         ;3202
00019a  f0230304          BIC      r3,r3,#4              ;3202
00019e  61d3              STR      r3,[r2,#0x1c]         ;3202
0001a0  6802              LDR      r2,[r0,#0]            ;3203
0001a2  6909              LDR      r1,[r1,#0x10]         ;3203
0001a4  69d3              LDR      r3,[r2,#0x1c]         ;3203
0001a6  4319              ORRS     r1,r1,r3              ;3203
0001a8  e032              B        |L69.528|
                  |L69.426|
0001aa  6802              LDR      r2,[r0,#0]            ;3205
0001ac  6a15              LDR      r5,[r2,#0x20]         ;3205
0001ae  429a              CMP      r2,r3                 ;3205
0001b0  f4255380          BIC      r3,r5,#0x1000         ;3205
0001b4  6213              STR      r3,[r2,#0x20]         ;3205
0001b6  6a15              LDR      r5,[r2,#0x20]         ;3205
0001b8  6853              LDR      r3,[r2,#4]            ;3205
0001ba  69d6              LDR      r6,[r2,#0x1c]         ;3205
0001bc  f4255500          BIC      r5,r5,#0x2000         ;3205
0001c0  f8d18008          LDR      r8,[r1,#8]            ;3205
0001c4  680f              LDR      r7,[r1,#0]            ;3205
0001c6  f42646e6          BIC      r6,r6,#0x7300         ;3205
0001ca  f0267680          BIC      r6,r6,#0x1000000      ;3205
0001ce  ea453508          ORR      r5,r5,r8,LSL #12      ;3205
0001d2  ea462607          ORR      r6,r6,r7,LSL #8       ;3205
0001d6  bf18              IT       NE                    ;3205
0001d8  4562              CMPNE    r2,r12                ;3205
0001da  d105              BNE      |L69.488|
0001dc  f8d1c014          LDR      r12,[r1,#0x14]        ;3211
0001e0  f4234380          BIC      r3,r3,#0x4000         ;3211
0001e4  ea43138c          ORR      r3,r3,r12,LSL #6      ;3211
                  |L69.488|
0001e8  6053              STR      r3,[r2,#4]            ;3211
0001ea  61d6              STR      r6,[r2,#0x1c]         ;3211
0001ec  684b              LDR      r3,[r1,#4]            ;3211
0001ee  6413              STR      r3,[r2,#0x40]         ;3211
0001f0  6215              STR      r5,[r2,#0x20]         ;3211
0001f2  6802              LDR      r2,[r0,#0]            ;3214
0001f4  69d3              LDR      r3,[r2,#0x1c]         ;3214
0001f6  f4436300          ORR      r3,r3,#0x800          ;3214
0001fa  61d3              STR      r3,[r2,#0x1c]         ;3214
0001fc  6802              LDR      r2,[r0,#0]            ;3217
0001fe  69d3              LDR      r3,[r2,#0x1c]         ;3217
000200  f4236380          BIC      r3,r3,#0x400          ;3217
000204  61d3              STR      r3,[r2,#0x1c]         ;3217
000206  6802              LDR      r2,[r0,#0]            ;3218
000208  6909              LDR      r1,[r1,#0x10]         ;3218
00020a  69d3              LDR      r3,[r2,#0x1c]         ;3218
00020c  ea432101          ORR      r1,r3,r1,LSL #8       ;3218
                  |L69.528|
000210  61d1              STR      r1,[r2,#0x1c]         ;3203
                  |L69.530|
000212  2100              MOVS     r1,#0                 ;3228
000214  63c4              STR      r4,[r0,#0x3c]         ;3226
000216  6381              STR      r1,[r0,#0x38]         ;3230
000218  4608              MOV      r0,r1                 ;3230
00021a  e8bd03f0          POP      {r4-r9}
00021e  4770              BX       lr
;;;3232   
                          ENDP

                  |L69.544|
                          DCD      0x40010000
                  |L69.548|
                          DCD      0x40010400

                          AREA ||i.HAL_TIM_PWM_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_DeInit PROC
;;;1037     */
;;;1038   HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;1039   {
000002  4604              MOV      r4,r0
;;;1040     /* Check the parameters */
;;;1041     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;1042     
;;;1043     htim->State = HAL_TIM_STATE_BUSY;
;;;1044     
;;;1045     /* Disable the TIM Peripheral Clock */
;;;1046     __HAL_TIM_DISABLE(htim);
000004  f2411111          MOV      r1,#0x1111
000008  2002              MOVS     r0,#2                 ;1043
00000a  63e0              STR      r0,[r4,#0x3c]         ;1043
00000c  6820              LDR      r0,[r4,#0]
00000e  6a02              LDR      r2,[r0,#0x20]
000010  420a              TST      r2,r1
000012  d108              BNE      |L70.38|
000014  6a01              LDR      r1,[r0,#0x20]
000016  f2404244          MOV      r2,#0x444
00001a  4211              TST      r1,r2
00001c  d103              BNE      |L70.38|
00001e  6801              LDR      r1,[r0,#0]
000020  f0210101          BIC      r1,r1,#1
000024  6001              STR      r1,[r0,#0]
                  |L70.38|
;;;1047       
;;;1048     /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
;;;1049     HAL_TIM_PWM_MspDeInit(htim);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       HAL_TIM_PWM_MspDeInit
;;;1050       
;;;1051     /* Change TIM state */  
;;;1052     htim->State = HAL_TIM_STATE_RESET; 
00002c  2000              MOVS     r0,#0
00002e  63e0              STR      r0,[r4,#0x3c]
;;;1053   
;;;1054     /* Release Lock */
;;;1055     __HAL_UNLOCK(htim);
000030  63a0              STR      r0,[r4,#0x38]
;;;1056   
;;;1057     return HAL_OK;
;;;1058   }
000032  bd10              POP      {r4,pc}
;;;1059   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_GetState PROC
;;;4558     */
;;;4559   HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)
000000  6bc0              LDR      r0,[r0,#0x3c]
;;;4560   {
;;;4561     return htim->State;
;;;4562   }
000002  4770              BX       lr
;;;4563   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_Init PROC
;;;998      */
;;;999    HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
000000  2800              CMP      r0,#0
;;;1000   {
;;;1001     /* Check the TIM handle allocation */
;;;1002     if(htim == NULL)
;;;1003     {
;;;1004       return HAL_ERROR;
000002  bf04              ITT      EQ
000004  2001              MOVEQ    r0,#1
;;;1005     }
;;;1006   
;;;1007     /* Check the parameters */
;;;1008     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;1009     assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;1010     assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;1011   
;;;1012     if(htim->State == HAL_TIM_STATE_RESET)
;;;1013     {
;;;1014       /* Allocate lock resource and initialize it */
;;;1015       htim->Lock = HAL_UNLOCKED;  
;;;1016       /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;1017       HAL_TIM_PWM_MspInit(htim);
;;;1018     }
;;;1019   
;;;1020     /* Set the TIM state */
;;;1021     htim->State= HAL_TIM_STATE_BUSY;  
;;;1022     
;;;1023     /* Init the base time for the PWM */  
;;;1024     TIM_Base_SetConfig(htim->Instance, &htim->Init); 
;;;1025      
;;;1026     /* Initialize the TIM state*/
;;;1027     htim->State= HAL_TIM_STATE_READY;
;;;1028     
;;;1029     return HAL_OK;
;;;1030   }  
000006  4770              BXEQ     lr
000008  b510              PUSH     {r4,lr}               ;1000
00000a  4604              MOV      r4,r0                 ;1000
00000c  6bc0              LDR      r0,[r0,#0x3c]         ;1012
00000e  b920              CBNZ     r0,|L72.26|
000010  2000              MOVS     r0,#0                 ;1015
000012  63a0              STR      r0,[r4,#0x38]         ;1017
000014  4620              MOV      r0,r4                 ;1017
000016  f7fffffe          BL       HAL_TIM_PWM_MspInit
                  |L72.26|
00001a  2002              MOVS     r0,#2                 ;1021
00001c  63e0              STR      r0,[r4,#0x3c]         ;1021
00001e  6820              LDR      r0,[r4,#0]            ;1024
000020  1d21              ADDS     r1,r4,#4              ;1024
000022  f7fffffe          BL       TIM_Base_SetConfig
000026  2001              MOVS     r0,#1                 ;1027
000028  63e0              STR      r0,[r4,#0x3c]         ;1027
00002a  2000              MOVS     r0,#0                 ;1029
00002c  bd10              POP      {r4,pc}
;;;1031   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_MspDeInit PROC
;;;1081     */
;;;1082   __weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1083   {
;;;1084     /* Prevent unused argument(s) compilation warning */
;;;1085     UNUSED(htim);
;;;1086    
;;;1087     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1088               the HAL_TIM_PWM_MspDeInit could be implemented in the user file
;;;1089      */
;;;1090   }
;;;1091   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_MspInit PROC
;;;1065     */
;;;1066   __weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1067   {
;;;1068     /* Prevent unused argument(s) compilation warning */
;;;1069     UNUSED(htim);
;;;1070    
;;;1071     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1072               the HAL_TIM_PWM_MspInit could be implemented in the user file
;;;1073      */
;;;1074   }
;;;1075   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_PulseFinishedCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_PulseFinishedCallback PROC
;;;4469     */
;;;4470   __weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;4471   {
;;;4472     /* Prevent unused argument(s) compilation warning */
;;;4473     UNUSED(htim);
;;;4474    
;;;4475     /* NOTE : This function Should not be modified, when the callback is needed,
;;;4476               the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
;;;4477      */
;;;4478   }
;;;4479   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_Start PROC
;;;1103     */
;;;1104   HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
000002  2301              MOVS     r3,#1
000004  fa03f101          LSL      r1,r3,r1
000008  6a13              LDR      r3,[r2,#0x20]
00000a  438b              BICS     r3,r3,r1
00000c  6213              STR      r3,[r2,#0x20]
00000e  6a13              LDR      r3,[r2,#0x20]
000010  4319              ORRS     r1,r1,r3
000012  6211              STR      r1,[r2,#0x20]
;;;1105   {
;;;1106     /* Check the parameters */
;;;1107     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1108   
;;;1109     /* Enable the Capture compare channel */
;;;1110     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;1111     
;;;1112     if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
000014  6801              LDR      r1,[r0,#0]
000016  f1a14280          SUB      r2,r1,#0x40000000
00001a  f5b23280          SUBS     r2,r2,#0x10000
00001e  bf1c              ITT      NE
000020  f1a14280          SUBNE    r2,r1,#0x40000000
000024  f5b23282          SUBSNE   r2,r2,#0x10400
000028  d103              BNE      |L76.50|
;;;1113     {
;;;1114       /* Enable the main output */
;;;1115       __HAL_TIM_MOE_ENABLE(htim);
00002a  6c4a              LDR      r2,[r1,#0x44]
00002c  f4424200          ORR      r2,r2,#0x8000
000030  644a              STR      r2,[r1,#0x44]
                  |L76.50|
;;;1116     }
;;;1117       
;;;1118     /* Enable the Peripheral */
;;;1119     __HAL_TIM_ENABLE(htim);
000032  6800              LDR      r0,[r0,#0]
000034  6801              LDR      r1,[r0,#0]
000036  f0410101          ORR      r1,r1,#1
00003a  6001              STR      r1,[r0,#0]
;;;1120     
;;;1121     /* Return function status */
;;;1122     return HAL_OK;
00003c  2000              MOVS     r0,#0
;;;1123   } 
00003e  4770              BX       lr
;;;1124   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PWM_Start_DMA PROC
;;;1308     */
;;;1309   HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;1310   {
000002  4604              MOV      r4,r0
;;;1311     /* Check the parameters */
;;;1312     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1313     
;;;1314     if((htim->State == HAL_TIM_STATE_BUSY))
000004  6bc0              LDR      r0,[r0,#0x3c]
000006  4694              MOV      r12,r2                ;1310
000008  460d              MOV      r5,r1                 ;1310
00000a  2802              CMP      r0,#2
;;;1315     {
;;;1316        return HAL_BUSY;
;;;1317     }
;;;1318     else if((htim->State == HAL_TIM_STATE_READY))
;;;1319     {
;;;1320       if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;1321       {
;;;1322         return HAL_ERROR;                                    
;;;1323       }
;;;1324       else
;;;1325       {
;;;1326         htim->State = HAL_TIM_STATE_BUSY;
;;;1327       }
;;;1328     }    
;;;1329     switch (Channel)
;;;1330     {
;;;1331       case TIM_CHANNEL_1:
;;;1332       {      
;;;1333         /* Set the DMA Period elapsed callback */
;;;1334         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1335        
;;;1336         /* Set the DMA error callback */
;;;1337         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1338         
;;;1339         /* Enable the DMA Stream */
;;;1340         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;1341         
;;;1342         /* Enable the TIM Capture/Compare 1 DMA request */
;;;1343         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;1344       }
;;;1345       break;
;;;1346       
;;;1347       case TIM_CHANNEL_2:
;;;1348       {
;;;1349         /* Set the DMA Period elapsed callback */
;;;1350         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1351        
;;;1352         /* Set the DMA error callback */
;;;1353         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1354         
;;;1355         /* Enable the DMA Stream */
;;;1356         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;1357         
;;;1358         /* Enable the TIM Capture/Compare 2 DMA request */
;;;1359         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;1360       }
;;;1361       break;
;;;1362       
;;;1363       case TIM_CHANNEL_3:
;;;1364       {
;;;1365         /* Set the DMA Period elapsed callback */
;;;1366         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1367        
;;;1368         /* Set the DMA error callback */
;;;1369         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1370         
;;;1371         /* Enable the DMA Stream */
;;;1372         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;1373         
;;;1374         /* Enable the TIM Output Capture/Compare 3 request */
;;;1375         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;1376       }
;;;1377       break;
;;;1378       
;;;1379       case TIM_CHANNEL_4:
;;;1380       {
;;;1381        /* Set the DMA Period elapsed callback */
;;;1382         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1383        
;;;1384         /* Set the DMA error callback */
;;;1385         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1386         
;;;1387         /* Enable the DMA Stream */
;;;1388         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;1389         
;;;1390         /* Enable the TIM Capture/Compare 4 DMA request */
;;;1391         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;1392       }
;;;1393       break;
;;;1394       
;;;1395       default:
;;;1396       break;
;;;1397     }
;;;1398   
;;;1399     /* Enable the Capture compare channel */
;;;1400     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;1401       
;;;1402     if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
;;;1403     {
;;;1404       /* Enable the main output */
;;;1405       __HAL_TIM_MOE_ENABLE(htim);
;;;1406     }
;;;1407     
;;;1408     /* Enable the Peripheral */
;;;1409     __HAL_TIM_ENABLE(htim); 
;;;1410     
;;;1411     /* Return function status */
;;;1412     return HAL_OK;
;;;1413   }
00000c  bf08              IT       EQ
00000e  bd70              POPEQ    {r4-r6,pc}
000010  6be0              LDR      r0,[r4,#0x3c]         ;1318
000012  2801              CMP      r0,#1                 ;1318
000014  d108              BNE      |L77.40|
000016  f1bc0f00          CMP      r12,#0                ;1320
00001a  d103              BNE      |L77.36|
00001c  2b00              CMP      r3,#0                 ;1320
00001e  bf1c              ITT      NE                    ;1322
000020  2001              MOVNE    r0,#1                 ;1322
000022  bd70              POPNE    {r4-r6,pc}
                  |L77.36|
000024  2002              MOVS     r0,#2                 ;1326
000026  63e0              STR      r0,[r4,#0x3c]         ;1326
                  |L77.40|
000028  4834              LDR      r0,|L77.252|
00002a  4935              LDR      r1,|L77.256|
00002c  b135              CBZ      r5,|L77.60|
00002e  2d04              CMP      r5,#4                 ;1329
000030  d014              BEQ      |L77.92|
000032  2d08              CMP      r5,#8                 ;1329
000034  d022              BEQ      |L77.124|
000036  2d0c              CMP      r5,#0xc               ;1329
000038  d030              BEQ      |L77.156|
00003a  e03f              B        |L77.188|
                  |L77.60|
00003c  6a22              LDR      r2,[r4,#0x20]         ;1334
00003e  6410              STR      r0,[r2,#0x40]         ;1337
000040  6a20              LDR      r0,[r4,#0x20]         ;1337
000042  6501              STR      r1,[r0,#0x50]         ;1340
000044  6821              LDR      r1,[r4,#0]            ;1340
000046  6a20              LDR      r0,[r4,#0x20]         ;1340
000048  f1010234          ADD      r2,r1,#0x34           ;1340
00004c  4661              MOV      r1,r12                ;1340
00004e  f7fffffe          BL       HAL_DMA_Start_IT
000052  6820              LDR      r0,[r4,#0]            ;1343
000054  68c1              LDR      r1,[r0,#0xc]          ;1343
000056  f4417100          ORR      r1,r1,#0x200          ;1343
00005a  e02e              B        |L77.186|
                  |L77.92|
00005c  6a62              LDR      r2,[r4,#0x24]         ;1350
00005e  6410              STR      r0,[r2,#0x40]         ;1353
000060  6a60              LDR      r0,[r4,#0x24]         ;1353
000062  6501              STR      r1,[r0,#0x50]         ;1356
000064  6821              LDR      r1,[r4,#0]            ;1356
000066  6a60              LDR      r0,[r4,#0x24]         ;1356
000068  f1010238          ADD      r2,r1,#0x38           ;1356
00006c  4661              MOV      r1,r12                ;1356
00006e  f7fffffe          BL       HAL_DMA_Start_IT
000072  6820              LDR      r0,[r4,#0]            ;1359
000074  68c1              LDR      r1,[r0,#0xc]          ;1359
000076  f4416180          ORR      r1,r1,#0x400          ;1359
00007a  e01e              B        |L77.186|
                  |L77.124|
00007c  6aa2              LDR      r2,[r4,#0x28]         ;1366
00007e  6410              STR      r0,[r2,#0x40]         ;1369
000080  6aa0              LDR      r0,[r4,#0x28]         ;1369
000082  6501              STR      r1,[r0,#0x50]         ;1372
000084  6821              LDR      r1,[r4,#0]            ;1372
000086  6aa0              LDR      r0,[r4,#0x28]         ;1372
000088  f101023c          ADD      r2,r1,#0x3c           ;1372
00008c  4661              MOV      r1,r12                ;1372
00008e  f7fffffe          BL       HAL_DMA_Start_IT
000092  6820              LDR      r0,[r4,#0]            ;1375
000094  68c1              LDR      r1,[r0,#0xc]          ;1375
000096  f4416100          ORR      r1,r1,#0x800          ;1375
00009a  e00e              B        |L77.186|
                  |L77.156|
00009c  6ae2              LDR      r2,[r4,#0x2c]         ;1382
00009e  6410              STR      r0,[r2,#0x40]         ;1385
0000a0  6ae0              LDR      r0,[r4,#0x2c]         ;1385
0000a2  6501              STR      r1,[r0,#0x50]         ;1388
0000a4  6821              LDR      r1,[r4,#0]            ;1388
0000a6  6ae0              LDR      r0,[r4,#0x2c]         ;1388
0000a8  f1010240          ADD      r2,r1,#0x40           ;1388
0000ac  4661              MOV      r1,r12                ;1388
0000ae  f7fffffe          BL       HAL_DMA_Start_IT
0000b2  6820              LDR      r0,[r4,#0]            ;1391
0000b4  68c1              LDR      r1,[r0,#0xc]          ;1391
0000b6  f4415180          ORR      r1,r1,#0x1000         ;1391
                  |L77.186|
0000ba  60c1              STR      r1,[r0,#0xc]          ;1375
                  |L77.188|
0000bc  6820              LDR      r0,[r4,#0]            ;1375
0000be  2101              MOVS     r1,#1                 ;1375
0000c0  40a9              LSLS     r1,r1,r5              ;1375
0000c2  6a02              LDR      r2,[r0,#0x20]         ;1375
0000c4  438a              BICS     r2,r2,r1              ;1375
0000c6  6202              STR      r2,[r0,#0x20]         ;1375
0000c8  6a02              LDR      r2,[r0,#0x20]         ;1375
0000ca  4311              ORRS     r1,r1,r2              ;1375
0000cc  6201              STR      r1,[r0,#0x20]         ;1375
0000ce  6820              LDR      r0,[r4,#0]            ;1402
0000d0  f1a04180          SUB      r1,r0,#0x40000000     ;1402
0000d4  f5b13180          SUBS     r1,r1,#0x10000        ;1402
0000d8  bf1c              ITT      NE                    ;1402
0000da  f1a04180          SUBNE    r1,r0,#0x40000000     ;1402
0000de  f5b13182          SUBSNE   r1,r1,#0x10400        ;1402
0000e2  d103              BNE      |L77.236|
0000e4  6c41              LDR      r1,[r0,#0x44]         ;1405
0000e6  f4414100          ORR      r1,r1,#0x8000         ;1405
0000ea  6441              STR      r1,[r0,#0x44]         ;1405
                  |L77.236|
0000ec  6820              LDR      r0,[r4,#0]            ;1409
0000ee  6801              LDR      r1,[r0,#0]            ;1409
0000f0  f0410101          ORR      r1,r1,#1              ;1409
0000f4  6001              STR      r1,[r0,#0]            ;1409
0000f6  2000              MOVS     r0,#0                 ;1412
0000f8  bd70              POP      {r4-r6,pc}
;;;1414   
                          ENDP

0000fa  0000              DCW      0x0000
                  |L77.252|
                          DCD      TIM_DMADelayPulseCplt
                  |L77.256|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIM_PWM_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_Start_IT PROC
;;;1172     */
;;;1173   HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
;;;1174   {
;;;1175     /* Check the parameters */
;;;1176     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1177     
;;;1178     switch (Channel)
000002  2900              CMP      r1,#0
;;;1179     {
;;;1180       case TIM_CHANNEL_1:
;;;1181       {       
;;;1182         /* Enable the TIM Capture/Compare 1 interrupt */
;;;1183         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000004  bf04              ITT      EQ
000006  68d3              LDREQ    r3,[r2,#0xc]
000008  f0430302          ORREQ    r3,r3,#2
00000c  d011              BEQ      |L78.50|
00000e  2904              CMP      r1,#4                 ;1178
;;;1184       }
;;;1185       break;
;;;1186       
;;;1187       case TIM_CHANNEL_2:
;;;1188       {
;;;1189         /* Enable the TIM Capture/Compare 2 interrupt */
;;;1190         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000010  bf04              ITT      EQ
000012  68d3              LDREQ    r3,[r2,#0xc]
000014  f0430304          ORREQ    r3,r3,#4
000018  d00b              BEQ      |L78.50|
00001a  2908              CMP      r1,#8                 ;1178
;;;1191       }
;;;1192       break;
;;;1193       
;;;1194       case TIM_CHANNEL_3:
;;;1195       {
;;;1196         /* Enable the TIM Capture/Compare 3 interrupt */
;;;1197         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
00001c  bf04              ITT      EQ
00001e  68d3              LDREQ    r3,[r2,#0xc]
000020  f0430308          ORREQ    r3,r3,#8
000024  d005              BEQ      |L78.50|
000026  290c              CMP      r1,#0xc               ;1178
;;;1198       }
;;;1199       break;
;;;1200       
;;;1201       case TIM_CHANNEL_4:
;;;1202       {
;;;1203         /* Enable the TIM Capture/Compare 4 interrupt */
;;;1204         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000028  bf04              ITT      EQ
00002a  68d3              LDREQ    r3,[r2,#0xc]
00002c  f0430310          ORREQ    r3,r3,#0x10
000030  d100              BNE      |L78.52|
                  |L78.50|
000032  60d3              STR      r3,[r2,#0xc]          ;1197
                  |L78.52|
000034  2301              MOVS     r3,#1                 ;1197
000036  6802              LDR      r2,[r0,#0]            ;1197
000038  fa03f101          LSL      r1,r3,r1              ;1197
00003c  6a13              LDR      r3,[r2,#0x20]         ;1197
00003e  438b              BICS     r3,r3,r1              ;1197
000040  6213              STR      r3,[r2,#0x20]         ;1197
000042  6a13              LDR      r3,[r2,#0x20]         ;1197
000044  4319              ORRS     r1,r1,r3              ;1197
000046  6211              STR      r1,[r2,#0x20]         ;1197
;;;1205       }
;;;1206       break;
;;;1207       
;;;1208       default:
;;;1209       break;
;;;1210     } 
;;;1211     
;;;1212     /* Enable the Capture compare channel */
;;;1213     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;1214     
;;;1215     if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
000048  6801              LDR      r1,[r0,#0]
00004a  f1a14280          SUB      r2,r1,#0x40000000
00004e  f5b23280          SUBS     r2,r2,#0x10000
000052  bf1c              ITT      NE
000054  f1a14280          SUBNE    r2,r1,#0x40000000
000058  f5b23282          SUBSNE   r2,r2,#0x10400
00005c  d103              BNE      |L78.102|
;;;1216     {
;;;1217       /* Enable the main output */
;;;1218       __HAL_TIM_MOE_ENABLE(htim);
00005e  6c4a              LDR      r2,[r1,#0x44]
000060  f4424200          ORR      r2,r2,#0x8000
000064  644a              STR      r2,[r1,#0x44]
                  |L78.102|
;;;1219     }
;;;1220   
;;;1221     /* Enable the Peripheral */
;;;1222     __HAL_TIM_ENABLE(htim);
000066  6800              LDR      r0,[r0,#0]
000068  6801              LDR      r1,[r0,#0]
00006a  f0410101          ORR      r1,r1,#1
00006e  6001              STR      r1,[r0,#0]
;;;1223     
;;;1224     /* Return function status */
;;;1225     return HAL_OK;
000070  2000              MOVS     r0,#0
;;;1226   } 
000072  4770              BX       lr
;;;1227   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_Stop PROC
;;;1136     */
;;;1137   HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;1138   { 
000004  6802              LDR      r2,[r0,#0]
;;;1139     /* Check the parameters */
;;;1140     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1141       
;;;1142     /* Disable the Capture compare channel */
;;;1143     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
000006  f04f0c00          MOV      r12,#0
00000a  2301              MOVS     r3,#1
00000c  fa0cfc01          LSL      r12,r12,r1
000010  6a14              LDR      r4,[r2,#0x20]
000012  fa03f101          LSL      r1,r3,r1
000016  ea240101          BIC      r1,r4,r1
00001a  6211              STR      r1,[r2,#0x20]
00001c  6a11              LDR      r1,[r2,#0x20]
00001e  ea41010c          ORR      r1,r1,r12
000022  6211              STR      r1,[r2,#0x20]
;;;1144     
;;;1145     if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
000024  6801              LDR      r1,[r0,#0]
;;;1146     {
;;;1147       /* Disable the Main Output */
;;;1148       __HAL_TIM_MOE_DISABLE(htim);
000026  f2411211          MOV      r2,#0x1111
00002a  f2404c44          MOV      r12,#0x444
00002e  f1a14480          SUB      r4,r1,#0x40000000     ;1145
000032  f5b43480          SUBS     r4,r4,#0x10000        ;1145
000036  bf1c              ITT      NE                    ;1145
000038  f1a14480          SUBNE    r4,r1,#0x40000000     ;1145
00003c  f5b43482          SUBSNE   r4,r4,#0x10400        ;1145
000040  d10a              BNE      |L79.88|
000042  6a0c              LDR      r4,[r1,#0x20]
000044  4214              TST      r4,r2
000046  bf04              ITT      EQ
000048  6a0c              LDREQ    r4,[r1,#0x20]
00004a  ea140f0c          TSTEQ    r4,r12
00004e  d103              BNE      |L79.88|
000050  6c4c              LDR      r4,[r1,#0x44]
000052  f4244400          BIC      r4,r4,#0x8000
000056  644c              STR      r4,[r1,#0x44]
                  |L79.88|
;;;1149     }
;;;1150     
;;;1151     /* Disable the Peripheral */
;;;1152     __HAL_TIM_DISABLE(htim);
000058  6801              LDR      r1,[r0,#0]
00005a  6a0c              LDR      r4,[r1,#0x20]
00005c  4214              TST      r4,r2
00005e  bf04              ITT      EQ
000060  6a0a              LDREQ    r2,[r1,#0x20]
000062  ea120f0c          TSTEQ    r2,r12
000066  d103              BNE      |L79.112|
000068  680a              LDR      r2,[r1,#0]
00006a  f0220201          BIC      r2,r2,#1
00006e  600a              STR      r2,[r1,#0]
                  |L79.112|
;;;1153     
;;;1154     /* Change the htim state */
;;;1155     htim->State = HAL_TIM_STATE_READY;
000070  63c3              STR      r3,[r0,#0x3c]
;;;1156     
;;;1157     /* Return function status */
;;;1158     return HAL_OK;
000072  2000              MOVS     r0,#0
;;;1159   } 
000074  f85d4b04          POP.W    {r4}
000078  4770              BX       lr
;;;1160   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_Stop_DMA PROC
;;;1426     */
;;;1427   HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;1428   {
;;;1429     /* Check the parameters */
;;;1430     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1431     
;;;1432     switch (Channel)
000004  6802              LDR      r2,[r0,#0]
000006  2900              CMP      r1,#0
;;;1433     {
;;;1434       case TIM_CHANNEL_1:
;;;1435       {       
;;;1436         /* Disable the TIM Capture/Compare 1 DMA request */
;;;1437         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000008  bf04              ITT      EQ
00000a  68d3              LDREQ    r3,[r2,#0xc]
00000c  f4237300          BICEQ    r3,r3,#0x200
000010  d011              BEQ      |L80.54|
000012  2904              CMP      r1,#4                 ;1432
;;;1438       }
;;;1439       break;
;;;1440       
;;;1441       case TIM_CHANNEL_2:
;;;1442       {
;;;1443         /* Disable the TIM Capture/Compare 2 DMA request */
;;;1444         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000014  bf04              ITT      EQ
000016  68d3              LDREQ    r3,[r2,#0xc]
000018  f4236380          BICEQ    r3,r3,#0x400
00001c  d00b              BEQ      |L80.54|
00001e  2908              CMP      r1,#8                 ;1432
;;;1445       }
;;;1446       break;
;;;1447       
;;;1448       case TIM_CHANNEL_3:
;;;1449       {
;;;1450         /* Disable the TIM Capture/Compare 3 DMA request */
;;;1451         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
000020  bf04              ITT      EQ
000022  68d3              LDREQ    r3,[r2,#0xc]
000024  f4236300          BICEQ    r3,r3,#0x800
000028  d005              BEQ      |L80.54|
00002a  290c              CMP      r1,#0xc               ;1432
;;;1452       }
;;;1453       break;
;;;1454       
;;;1455       case TIM_CHANNEL_4:
;;;1456       {
;;;1457         /* Disable the TIM Capture/Compare 4 interrupt */
;;;1458         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
00002c  bf04              ITT      EQ
00002e  68d3              LDREQ    r3,[r2,#0xc]
000030  f4235380          BICEQ    r3,r3,#0x1000
000034  d100              BNE      |L80.56|
                  |L80.54|
000036  60d3              STR      r3,[r2,#0xc]          ;1451
                  |L80.56|
;;;1459       }
;;;1460       break;
;;;1461       
;;;1462       default:
;;;1463       break;
;;;1464     } 
;;;1465     
;;;1466     /* Disable the Capture compare channel */
;;;1467     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
000038  f04f0c00          MOV      r12,#0
00003c  6802              LDR      r2,[r0,#0]
00003e  2301              MOVS     r3,#1
000040  fa0cfc01          LSL      r12,r12,r1
000044  6a14              LDR      r4,[r2,#0x20]
000046  fa03f101          LSL      r1,r3,r1
00004a  ea240101          BIC      r1,r4,r1
00004e  6211              STR      r1,[r2,#0x20]
000050  6a11              LDR      r1,[r2,#0x20]
000052  ea41010c          ORR      r1,r1,r12
000056  6211              STR      r1,[r2,#0x20]
;;;1468     
;;;1469     if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
000058  6801              LDR      r1,[r0,#0]
;;;1470     {
;;;1471       /* Disable the Main Output */
;;;1472       __HAL_TIM_MOE_DISABLE(htim);
00005a  f2411211          MOV      r2,#0x1111
00005e  f2404c44          MOV      r12,#0x444
000062  f1a14480          SUB      r4,r1,#0x40000000     ;1469
000066  f5b43480          SUBS     r4,r4,#0x10000        ;1469
00006a  bf1c              ITT      NE                    ;1469
00006c  f1a14480          SUBNE    r4,r1,#0x40000000     ;1469
000070  f5b43482          SUBSNE   r4,r4,#0x10400        ;1469
000074  d10a              BNE      |L80.140|
000076  6a0c              LDR      r4,[r1,#0x20]
000078  4214              TST      r4,r2
00007a  bf04              ITT      EQ
00007c  6a0c              LDREQ    r4,[r1,#0x20]
00007e  ea140f0c          TSTEQ    r4,r12
000082  d103              BNE      |L80.140|
000084  6c4c              LDR      r4,[r1,#0x44]
000086  f4244400          BIC      r4,r4,#0x8000
00008a  644c              STR      r4,[r1,#0x44]
                  |L80.140|
;;;1473     }
;;;1474     
;;;1475     /* Disable the Peripheral */
;;;1476     __HAL_TIM_DISABLE(htim);
00008c  6801              LDR      r1,[r0,#0]
00008e  6a0c              LDR      r4,[r1,#0x20]
000090  4214              TST      r4,r2
000092  bf04              ITT      EQ
000094  6a0a              LDREQ    r2,[r1,#0x20]
000096  ea120f0c          TSTEQ    r2,r12
00009a  d103              BNE      |L80.164|
00009c  680a              LDR      r2,[r1,#0]
00009e  f0220201          BIC      r2,r2,#1
0000a2  600a              STR      r2,[r1,#0]
                  |L80.164|
;;;1477     
;;;1478     /* Change the htim state */
;;;1479     htim->State = HAL_TIM_STATE_READY;
0000a4  63c3              STR      r3,[r0,#0x3c]
;;;1480     
;;;1481     /* Return function status */
;;;1482     return HAL_OK;
0000a6  2000              MOVS     r0,#0
;;;1483   }
0000a8  f85d4b04          POP.W    {r4}
0000ac  4770              BX       lr
;;;1484   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_Stop_IT PROC
;;;1239     */
;;;1240   HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;1241   {
;;;1242     /* Check the parameters */
;;;1243     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1244     
;;;1245     switch (Channel)
000004  6802              LDR      r2,[r0,#0]
000006  2900              CMP      r1,#0
;;;1246     {
;;;1247       case TIM_CHANNEL_1:
;;;1248       {       
;;;1249         /* Disable the TIM Capture/Compare 1 interrupt */
;;;1250         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000008  bf04              ITT      EQ
00000a  68d3              LDREQ    r3,[r2,#0xc]
00000c  f0230302          BICEQ    r3,r3,#2
000010  d011              BEQ      |L81.54|
000012  2904              CMP      r1,#4                 ;1245
;;;1251       }
;;;1252       break;
;;;1253       
;;;1254       case TIM_CHANNEL_2:
;;;1255       {
;;;1256         /* Disable the TIM Capture/Compare 2 interrupt */
;;;1257         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000014  bf04              ITT      EQ
000016  68d3              LDREQ    r3,[r2,#0xc]
000018  f0230304          BICEQ    r3,r3,#4
00001c  d00b              BEQ      |L81.54|
00001e  2908              CMP      r1,#8                 ;1245
;;;1258       }
;;;1259       break;
;;;1260       
;;;1261       case TIM_CHANNEL_3:
;;;1262       {
;;;1263         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1264         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000020  bf04              ITT      EQ
000022  68d3              LDREQ    r3,[r2,#0xc]
000024  f0230308          BICEQ    r3,r3,#8
000028  d005              BEQ      |L81.54|
00002a  290c              CMP      r1,#0xc               ;1245
;;;1265       }
;;;1266       break;
;;;1267       
;;;1268       case TIM_CHANNEL_4:
;;;1269       {
;;;1270         /* Disable the TIM Capture/Compare 4 interrupt */
;;;1271         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
00002c  bf04              ITT      EQ
00002e  68d3              LDREQ    r3,[r2,#0xc]
000030  f0230310          BICEQ    r3,r3,#0x10
000034  d100              BNE      |L81.56|
                  |L81.54|
000036  60d3              STR      r3,[r2,#0xc]          ;1264
                  |L81.56|
;;;1272       }
;;;1273       break;
;;;1274       
;;;1275       default:
;;;1276       break; 
;;;1277     }
;;;1278     
;;;1279     /* Disable the Capture compare channel */
;;;1280     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
000038  2300              MOVS     r3,#0
00003a  6802              LDR      r2,[r0,#0]
00003c  f04f0c01          MOV      r12,#1
000040  408b              LSLS     r3,r3,r1
000042  6a14              LDR      r4,[r2,#0x20]
000044  fa0cf101          LSL      r1,r12,r1
000048  ea240101          BIC      r1,r4,r1
00004c  6211              STR      r1,[r2,#0x20]
00004e  6a11              LDR      r1,[r2,#0x20]
000050  4319              ORRS     r1,r1,r3
000052  6211              STR      r1,[r2,#0x20]
;;;1281     
;;;1282     if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
000054  6801              LDR      r1,[r0,#0]
;;;1283     {
;;;1284       /* Disable the Main Output */
;;;1285       __HAL_TIM_MOE_DISABLE(htim);
000056  f2411211          MOV      r2,#0x1111
00005a  1093              ASRS     r3,r2,#2
00005c  f1a14c80          SUB      r12,r1,#0x40000000    ;1282
000060  f5bc3c80          SUBS     r12,r12,#0x10000      ;1282
000064  bf1c              ITT      NE                    ;1282
000066  f1a14c80          SUBNE    r12,r1,#0x40000000    ;1282
00006a  f5bc3c82          SUBSNE   r12,r12,#0x10400      ;1282
00006e  d10f              BNE      |L81.144|
000070  f8d1c020          LDR      r12,[r1,#0x20]
000074  ea1c0f02          TST      r12,r2
000078  bf04              ITT      EQ
00007a  f8d1c020          LDREQ    r12,[r1,#0x20]
00007e  ea1c0f03          TSTEQ    r12,r3
000082  d105              BNE      |L81.144|
000084  f8d1c044          LDR      r12,[r1,#0x44]
000088  f42c4c00          BIC      r12,r12,#0x8000
00008c  f8c1c044          STR      r12,[r1,#0x44]
                  |L81.144|
;;;1286     }
;;;1287     
;;;1288     /* Disable the Peripheral */
;;;1289     __HAL_TIM_DISABLE(htim);
000090  6800              LDR      r0,[r0,#0]
000092  6a01              LDR      r1,[r0,#0x20]
000094  4211              TST      r1,r2
000096  bf04              ITT      EQ
000098  6a01              LDREQ    r1,[r0,#0x20]
00009a  4219              TSTEQ    r1,r3
00009c  d103              BNE      |L81.166|
00009e  6801              LDR      r1,[r0,#0]
0000a0  f0210101          BIC      r1,r1,#1
0000a4  6001              STR      r1,[r0,#0]
                  |L81.166|
;;;1290     
;;;1291     /* Return function status */
;;;1292     return HAL_OK;
;;;1293   } 
0000a6  f85d4b04          POP.W    {r4}
0000aa  2000              MOVS     r0,#0                 ;1292
0000ac  4770              BX       lr
;;;1294   
                          ENDP


                          AREA ||i.HAL_TIM_PeriodElapsedCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PeriodElapsedCallback PROC
;;;4422     */
;;;4423   __weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;4424   {
;;;4425     /* Prevent unused argument(s) compilation warning */
;;;4426     UNUSED(htim);
;;;4427    
;;;4428     /* NOTE : This function Should not be modified, when the callback is needed,
;;;4429               the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
;;;4430      */
;;;4431     
;;;4432   }
;;;4433   /**
                          ENDP


                          AREA ||i.HAL_TIM_ReadCapturedValue||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ReadCapturedValue PROC
;;;4334     */
;;;4335   uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6b83              LDR      r3,[r0,#0x38]
;;;4336   {
;;;4337     uint32_t tmpreg = 0;
000002  2200              MOVS     r2,#0
;;;4338     
;;;4339     __HAL_LOCK(htim);
000004  2b01              CMP      r3,#1
000006  bf04              ITT      EQ
000008  2002              MOVEQ    r0,#2
;;;4340     
;;;4341     switch (Channel)
;;;4342     {
;;;4343       case TIM_CHANNEL_1:
;;;4344       {
;;;4345         /* Check the parameters */
;;;4346         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;4347         
;;;4348         /* Return the capture 1 value */
;;;4349         tmpreg = htim->Instance->CCR1;
;;;4350         
;;;4351         break;
;;;4352       }
;;;4353       case TIM_CHANNEL_2:
;;;4354       {
;;;4355         /* Check the parameters */
;;;4356         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;4357         
;;;4358         /* Return the capture 2 value */
;;;4359         tmpreg = htim->Instance->CCR2;
;;;4360         
;;;4361         break;
;;;4362       }
;;;4363       
;;;4364       case TIM_CHANNEL_3:
;;;4365       {
;;;4366         /* Check the parameters */
;;;4367         assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
;;;4368         
;;;4369         /* Return the capture 3 value */
;;;4370         tmpreg = htim->Instance->CCR3;
;;;4371         
;;;4372         break;
;;;4373       }
;;;4374       
;;;4375       case TIM_CHANNEL_4:
;;;4376       {
;;;4377         /* Check the parameters */
;;;4378         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
;;;4379         
;;;4380         /* Return the capture 4 value */
;;;4381         tmpreg = htim->Instance->CCR4;
;;;4382         
;;;4383         break;
;;;4384       }
;;;4385       
;;;4386       default:
;;;4387       break;  
;;;4388     }
;;;4389        
;;;4390     __HAL_UNLOCK(htim);  
;;;4391     return tmpreg;
;;;4392   }
00000a  4770              BXEQ     lr
00000c  2301              MOVS     r3,#1                 ;4339
00000e  2900              CMP      r1,#0                 ;4341
000010  6383              STR      r3,[r0,#0x38]         ;4339
000012  bf04              ITT      EQ                    ;4349
000014  6801              LDREQ    r1,[r0,#0]            ;4349
000016  6b4a              LDREQ    r2,[r1,#0x34]         ;4349
000018  d00d              BEQ      |L83.54|
00001a  2904              CMP      r1,#4                 ;4341
00001c  bf04              ITT      EQ                    ;4359
00001e  6801              LDREQ    r1,[r0,#0]            ;4359
000020  6b8a              LDREQ    r2,[r1,#0x38]         ;4359
000022  d008              BEQ      |L83.54|
000024  2908              CMP      r1,#8                 ;4341
000026  bf04              ITT      EQ                    ;4370
000028  6801              LDREQ    r1,[r0,#0]            ;4370
00002a  6bca              LDREQ    r2,[r1,#0x3c]         ;4370
00002c  d003              BEQ      |L83.54|
00002e  290c              CMP      r1,#0xc               ;4341
000030  bf04              ITT      EQ                    ;4381
000032  6801              LDREQ    r1,[r0,#0]            ;4381
000034  6c0a              LDREQ    r2,[r1,#0x40]         ;4381
                  |L83.54|
000036  2100              MOVS     r1,#0                 ;4390
000038  6381              STR      r1,[r0,#0x38]         ;4391
00003a  4610              MOV      r0,r2                 ;4391
00003c  4770              BX       lr
;;;4393   
                          ENDP


                          AREA ||i.HAL_TIM_SlaveConfigSynchronization||, CODE, READONLY, ALIGN=1

                  HAL_TIM_SlaveConfigSynchronization PROC
;;;4148     */
;;;4149   HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig)
000000  6b82              LDR      r2,[r0,#0x38]
;;;4150   {
;;;4151     uint32_t tmpsmcr  = 0;
;;;4152     uint32_t tmpccmr1 = 0;
;;;4153     uint32_t tmpccer = 0;
;;;4154   
;;;4155     /* Check the parameters */
;;;4156     assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
;;;4157     assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
;;;4158     assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
;;;4159      
;;;4160     __HAL_LOCK(htim);
000002  2a01              CMP      r2,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;4161     
;;;4162     htim->State = HAL_TIM_STATE_BUSY;
;;;4163   
;;;4164     /* Get the TIMx SMCR register value */
;;;4165     tmpsmcr = htim->Instance->SMCR;
;;;4166   
;;;4167     /* Reset the Trigger Selection Bits */
;;;4168     tmpsmcr &= ~TIM_SMCR_TS;
;;;4169     /* Set the Input Trigger source */
;;;4170     tmpsmcr |= sSlaveConfig->InputTrigger;
;;;4171   
;;;4172     /* Reset the slave mode Bits */
;;;4173     tmpsmcr &= ~TIM_SMCR_SMS;
;;;4174     /* Set the slave mode */
;;;4175     tmpsmcr |= sSlaveConfig->SlaveMode;
;;;4176   
;;;4177     /* Write to TIMx SMCR */
;;;4178     htim->Instance->SMCR = tmpsmcr;
;;;4179     
;;;4180     /* Configure the trigger prescaler, filter, and polarity */
;;;4181     switch (sSlaveConfig->InputTrigger)
;;;4182     {
;;;4183     case TIM_TS_ETRF:
;;;4184       {
;;;4185         /* Check the parameters */
;;;4186         assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
;;;4187         assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
;;;4188         assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
;;;4189         assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
;;;4190         /* Configure the ETR Trigger source */
;;;4191         TIM_ETR_SetConfig(htim->Instance, 
;;;4192                           sSlaveConfig->TriggerPrescaler, 
;;;4193                           sSlaveConfig->TriggerPolarity, 
;;;4194                           sSlaveConfig->TriggerFilter);
;;;4195       }
;;;4196       break;
;;;4197       
;;;4198     case TIM_TS_TI1F_ED:
;;;4199       {
;;;4200         /* Check the parameters */
;;;4201         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;4202         assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
;;;4203         
;;;4204         /* Disable the Channel 1: Reset the CC1E Bit */
;;;4205         tmpccer = htim->Instance->CCER;
;;;4206         htim->Instance->CCER &= ~TIM_CCER_CC1E;
;;;4207         tmpccmr1 = htim->Instance->CCMR1;    
;;;4208         
;;;4209         /* Set the filter */
;;;4210         tmpccmr1 &= ~TIM_CCMR1_IC1F;
;;;4211         tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4);
;;;4212         
;;;4213         /* Write to TIMx CCMR1 and CCER registers */
;;;4214         htim->Instance->CCMR1 = tmpccmr1;
;;;4215         htim->Instance->CCER = tmpccer;                               
;;;4216                                  
;;;4217       }
;;;4218       break;
;;;4219       
;;;4220     case TIM_TS_TI1FP1:
;;;4221       {
;;;4222         /* Check the parameters */
;;;4223         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;4224         assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
;;;4225         assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
;;;4226   
;;;4227         /* Configure TI1 Filter and Polarity */
;;;4228         TIM_TI1_ConfigInputStage(htim->Instance,
;;;4229                                  sSlaveConfig->TriggerPolarity,
;;;4230                                  sSlaveConfig->TriggerFilter);
;;;4231       }
;;;4232       break;
;;;4233       
;;;4234     case TIM_TS_TI2FP2:
;;;4235       {
;;;4236         /* Check the parameters */
;;;4237         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;4238         assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
;;;4239         assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
;;;4240         
;;;4241         /* Configure TI2 Filter and Polarity */
;;;4242         TIM_TI2_ConfigInputStage(htim->Instance,
;;;4243                                   sSlaveConfig->TriggerPolarity,
;;;4244                                   sSlaveConfig->TriggerFilter);
;;;4245       }
;;;4246       break;
;;;4247       
;;;4248     case TIM_TS_ITR0:
;;;4249       {
;;;4250         /* Check the parameter */
;;;4251         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;4252       }
;;;4253       break;
;;;4254       
;;;4255     case TIM_TS_ITR1:
;;;4256       {
;;;4257         /* Check the parameter */
;;;4258         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;4259       }
;;;4260       break;
;;;4261       
;;;4262     case TIM_TS_ITR2:
;;;4263       {
;;;4264         /* Check the parameter */
;;;4265         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;4266       }
;;;4267       break;
;;;4268       
;;;4269     case TIM_TS_ITR3:
;;;4270       {
;;;4271         /* Check the parameter */
;;;4272         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;4273       }
;;;4274       break;
;;;4275          
;;;4276     default:
;;;4277       break;
;;;4278     }
;;;4279     
;;;4280     htim->State = HAL_TIM_STATE_READY;
;;;4281        
;;;4282     __HAL_UNLOCK(htim);  
;;;4283     
;;;4284     return HAL_OK;
;;;4285   } 
000008  4770              BXEQ     lr
00000a  b430              PUSH     {r4,r5}               ;4150
00000c  2301              MOVS     r3,#1                 ;4160
00000e  6383              STR      r3,[r0,#0x38]         ;4162
000010  2202              MOVS     r2,#2                 ;4162
000012  63c2              STR      r2,[r0,#0x3c]         ;4162
000014  6802              LDR      r2,[r0,#0]            ;4170
000016  684c              LDR      r4,[r1,#4]            ;4165
000018  f8d2c008          LDR      r12,[r2,#8]           ;4165
00001c  680d              LDR      r5,[r1,#0]            ;4175
00001e  f02c0c70          BIC      r12,r12,#0x70         ;4168
000022  ea440c0c          ORR      r12,r4,r12            ;4170
000026  f02c0c07          BIC      r12,r12,#7            ;4173
00002a  f42c3c80          BIC      r12,r12,#0x10000      ;4173
00002e  ea450c0c          ORR      r12,r5,r12            ;4175
000032  f8c2c008          STR      r12,[r2,#8]           ;4178
000036  684a              LDR      r2,[r1,#4]            ;4181
000038  f0120f0f          TST      r2,#0xf               ;4181
00003c  d156              BNE      |L84.236|
00003e  1112              ASRS     r2,r2,#4              ;4181
000040  2a08              CMP      r2,#8                 ;4181
000042  d253              BCS      |L84.236|
000044  e8dff002          TBB      [pc,r2]               ;4181
000048  52525252          DCB      0x52,0x52,0x52,0x52
00004c  14273d04          DCB      0x14,0x27,0x3d,0x04
000050  6802              LDR      r2,[r0,#0]            ;4191
000052  e9d14503          LDRD     r4,r5,[r1,#0xc]       ;4191
000056  f8d1c008          LDR      r12,[r1,#8]           ;4191
00005a  6891              LDR      r1,[r2,#8]            ;4191
00005c  ea4c2c05          ORR      r12,r12,r5,LSL #8     ;4191
000060  ea4c0c04          ORR      r12,r12,r4            ;4191
000064  f421417f          BIC      r1,r1,#0xff00         ;4191
000068  ea4c0101          ORR      r1,r12,r1             ;4191
00006c  6091              STR      r1,[r2,#8]            ;4191
00006e  e03d              B        |L84.236|
000070  6802              LDR      r2,[r0,#0]            ;4205
000072  f8d2c020          LDR      r12,[r2,#0x20]        ;4205
000076  6a14              LDR      r4,[r2,#0x20]         ;4206
000078  f0240401          BIC      r4,r4,#1              ;4206
00007c  6214              STR      r4,[r2,#0x20]         ;4206
00007e  6802              LDR      r2,[r0,#0]            ;4211
000080  690c              LDR      r4,[r1,#0x10]         ;4207
000082  6991              LDR      r1,[r2,#0x18]         ;4207
000084  f02101f0          BIC      r1,r1,#0xf0           ;4210
000088  ea411104          ORR      r1,r1,r4,LSL #4       ;4211
00008c  6191              STR      r1,[r2,#0x18]         ;4214
00008e  6801              LDR      r1,[r0,#0]            ;4215
000090  f8c1c020          STR      r12,[r1,#0x20]        ;4215
000094  e02a              B        |L84.236|
000096  6802              LDR      r2,[r0,#0]            ;4228
000098  f8d1c008          LDR      r12,[r1,#8]           ;4228
00009c  6909              LDR      r1,[r1,#0x10]         ;4228
00009e  6a14              LDR      r4,[r2,#0x20]         ;4228
0000a0  6a15              LDR      r5,[r2,#0x20]         ;4228
0000a2  f024040a          BIC      r4,r4,#0xa            ;4228
0000a6  f0250501          BIC      r5,r5,#1              ;4228
0000aa  6215              STR      r5,[r2,#0x20]         ;4228
0000ac  6995              LDR      r5,[r2,#0x18]         ;4228
0000ae  ea440c0c          ORR      r12,r4,r12            ;4228
0000b2  f02504f0          BIC      r4,r5,#0xf0           ;4228
0000b6  ea441101          ORR      r1,r4,r1,LSL #4       ;4228
0000ba  6191              STR      r1,[r2,#0x18]         ;4228
0000bc  f8c2c020          STR      r12,[r2,#0x20]        ;4228
0000c0  e014              B        |L84.236|
0000c2  6802              LDR      r2,[r0,#0]            ;4242
0000c4  f8d1c008          LDR      r12,[r1,#8]           ;4242
0000c8  6909              LDR      r1,[r1,#0x10]         ;4242
0000ca  6a14              LDR      r4,[r2,#0x20]         ;4242
0000cc  f0240410          BIC      r4,r4,#0x10           ;4242
0000d0  6214              STR      r4,[r2,#0x20]         ;4242
0000d2  6994              LDR      r4,[r2,#0x18]         ;4242
0000d4  6a15              LDR      r5,[r2,#0x20]         ;4242
0000d6  f4244470          BIC      r4,r4,#0xf000         ;4242
0000da  ea443101          ORR      r1,r4,r1,LSL #12      ;4242
0000de  6191              STR      r1,[r2,#0x18]         ;4242
0000e0  f02504a0          BIC      r4,r5,#0xa0           ;4242
0000e4  ea441c0c          ORR      r12,r4,r12,LSL #4     ;4242
0000e8  f8c2c020          STR      r12,[r2,#0x20]        ;4242
                  |L84.236|
0000ec  2100              MOVS     r1,#0                 ;4282
0000ee  63c3              STR      r3,[r0,#0x3c]         ;4280
0000f0  6381              STR      r1,[r0,#0x38]         ;4284
0000f2  4608              MOV      r0,r1                 ;4284
0000f4  bc30              POP      {r4,r5}
0000f6  4770              BX       lr
;;;4286   
                          ENDP


                          AREA ||i.HAL_TIM_SlaveConfigSynchronization_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_SlaveConfigSynchronization_IT PROC
;;;4295     */
;;;4296   HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization_IT(TIM_HandleTypeDef *htim, 
000000  6b82              LDR      r2,[r0,#0x38]
;;;4297                                                           TIM_SlaveConfigTypeDef * sSlaveConfig)
;;;4298   {
;;;4299     /* Check the parameters */
;;;4300     assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
;;;4301     assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
;;;4302     assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
;;;4303     
;;;4304     __HAL_LOCK(htim);
000002  2a01              CMP      r2,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;4305   
;;;4306     htim->State = HAL_TIM_STATE_BUSY;
;;;4307     
;;;4308     TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
;;;4309     
;;;4310     /* Enable Trigger Interrupt */
;;;4311     __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
;;;4312     
;;;4313     /* Disable Trigger DMA request */
;;;4314     __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
;;;4315     
;;;4316     htim->State = HAL_TIM_STATE_READY;
;;;4317        
;;;4318     __HAL_UNLOCK(htim);  
;;;4319     
;;;4320     return HAL_OK;
;;;4321   }
000008  4770              BXEQ     lr
00000a  b470              PUSH     {r4-r6}               ;4298
00000c  2301              MOVS     r3,#1                 ;4304
00000e  6383              STR      r3,[r0,#0x38]         ;4306
000010  2202              MOVS     r2,#2                 ;4306
000012  63c2              STR      r2,[r0,#0x3c]         ;4306
000014  e9d14500          LDRD     r4,r5,[r1,#0]         ;4306
000018  f8d0c000          LDR      r12,[r0,#0]           ;4306
00001c  f8dc2008          LDR      r2,[r12,#8]           ;4306
000020  f0220270          BIC      r2,r2,#0x70           ;4306
000024  432a              ORRS     r2,r2,r5              ;4306
000026  f0220207          BIC      r2,r2,#7              ;4306
00002a  f4223280          BIC      r2,r2,#0x10000        ;4306
00002e  4322              ORRS     r2,r2,r4              ;4306
000030  f8cc2008          STR      r2,[r12,#8]           ;4306
000034  684a              LDR      r2,[r1,#4]            ;4306
000036  f0120f0f          TST      r2,#0xf               ;4306
00003a  d155              BNE      |L85.232|
00003c  1112              ASRS     r2,r2,#4              ;4304
00003e  2a08              CMP      r2,#8                 ;4304
000040  d252              BCS      |L85.232|
000042  e8dff002          TBB      [pc,r2]               ;4304
000046  5151              DCB      0x51,0x51
000048  51511427          DCB      0x51,0x51,0x14,0x27
00004c  3d04              DCB      0x3d,0x04
00004e  6802              LDR      r2,[r0,#0]            ;4304
000050  e9d14503          LDRD     r4,r5,[r1,#0xc]       ;4304
000054  f8d1c008          LDR      r12,[r1,#8]           ;4304
000058  6891              LDR      r1,[r2,#8]            ;4304
00005a  ea4c2c05          ORR      r12,r12,r5,LSL #8     ;4304
00005e  ea4c0c04          ORR      r12,r12,r4            ;4304
000062  f421417f          BIC      r1,r1,#0xff00         ;4304
000066  ea4c0101          ORR      r1,r12,r1             ;4304
00006a  6091              STR      r1,[r2,#8]            ;4304
00006c  e03c              B        |L85.232|
00006e  6802              LDR      r2,[r0,#0]            ;4304
000070  f8d2c020          LDR      r12,[r2,#0x20]        ;4304
000074  6a14              LDR      r4,[r2,#0x20]         ;4304
000076  f0240401          BIC      r4,r4,#1              ;4304
00007a  6214              STR      r4,[r2,#0x20]         ;4304
00007c  6802              LDR      r2,[r0,#0]            ;4304
00007e  690c              LDR      r4,[r1,#0x10]         ;4304
000080  6991              LDR      r1,[r2,#0x18]         ;4304
000082  f02101f0          BIC      r1,r1,#0xf0           ;4304
000086  ea411104          ORR      r1,r1,r4,LSL #4       ;4304
00008a  6191              STR      r1,[r2,#0x18]         ;4304
00008c  6801              LDR      r1,[r0,#0]            ;4304
00008e  f8c1c020          STR      r12,[r1,#0x20]        ;4304
000092  e029              B        |L85.232|
000094  6802              LDR      r2,[r0,#0]            ;4304
000096  f8d1c008          LDR      r12,[r1,#8]           ;4304
00009a  6909              LDR      r1,[r1,#0x10]         ;4304
00009c  6a14              LDR      r4,[r2,#0x20]         ;4304
00009e  6a15              LDR      r5,[r2,#0x20]         ;4304
0000a0  f0250601          BIC      r6,r5,#1              ;4304
0000a4  6216              STR      r6,[r2,#0x20]         ;4304
0000a6  f024050a          BIC      r5,r4,#0xa            ;4304
0000aa  6994              LDR      r4,[r2,#0x18]         ;4304
0000ac  ea450c0c          ORR      r12,r5,r12            ;4304
0000b0  f02404f0          BIC      r4,r4,#0xf0           ;4304
0000b4  ea441101          ORR      r1,r4,r1,LSL #4       ;4304
0000b8  6191              STR      r1,[r2,#0x18]         ;4304
0000ba  f8c2c020          STR      r12,[r2,#0x20]        ;4304
0000be  e013              B        |L85.232|
0000c0  6802              LDR      r2,[r0,#0]            ;4304
0000c2  f8d1c008          LDR      r12,[r1,#8]           ;4304
0000c6  690c              LDR      r4,[r1,#0x10]         ;4304
0000c8  6a11              LDR      r1,[r2,#0x20]         ;4304
0000ca  f0210110          BIC      r1,r1,#0x10           ;4304
0000ce  6211              STR      r1,[r2,#0x20]         ;4304
0000d0  6995              LDR      r5,[r2,#0x18]         ;4304
0000d2  6a11              LDR      r1,[r2,#0x20]         ;4304
0000d4  f4254570          BIC      r5,r5,#0xf000         ;4304
0000d8  f02101a0          BIC      r1,r1,#0xa0           ;4304
0000dc  ea453404          ORR      r4,r5,r4,LSL #12      ;4304
0000e0  6194              STR      r4,[r2,#0x18]         ;4304
0000e2  ea41110c          ORR      r1,r1,r12,LSL #4      ;4304
0000e6  6211              STR      r1,[r2,#0x20]         ;4304
                  |L85.232|
0000e8  6801              LDR      r1,[r0,#0]            ;4311
0000ea  2200              MOVS     r2,#0                 ;4318
0000ec  f8d1c00c          LDR      r12,[r1,#0xc]         ;4311
0000f0  f04c0c40          ORR      r12,r12,#0x40         ;4311
0000f4  f8c1c00c          STR      r12,[r1,#0xc]         ;4311
0000f8  6801              LDR      r1,[r0,#0]            ;4314
0000fa  f8d1c00c          LDR      r12,[r1,#0xc]         ;4314
0000fe  f42c4c80          BIC      r12,r12,#0x4000       ;4314
000102  f8c1c00c          STR      r12,[r1,#0xc]         ;4314
000106  63c3              STR      r3,[r0,#0x3c]         ;4316
000108  6382              STR      r2,[r0,#0x38]         ;4320
00010a  4610              MOV      r0,r2                 ;4320
00010c  bc70              POP      {r4-r6}
00010e  4770              BX       lr
;;;4322   
                          ENDP


                          AREA ||i.HAL_TIM_TriggerCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_TriggerCallback PROC
;;;4485     */
;;;4486   __weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;4487   {
;;;4488     /* Prevent unused argument(s) compilation warning */
;;;4489     UNUSED(htim);
;;;4490    
;;;4491     /* NOTE : This function Should not be modified, when the callback is needed,
;;;4492               the HAL_TIM_TriggerCallback could be implemented in the user file
;;;4493      */
;;;4494   }
;;;4495   
                          ENDP


                          AREA ||i.TIM_Base_SetConfig||, CODE, READONLY, ALIGN=2

                  TIM_Base_SetConfig PROC
;;;4719     */
;;;4720   void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
000000  b4f0              PUSH     {r4-r7}
;;;4721   {
;;;4722     uint32_t tmpcr1 = 0;
;;;4723     tmpcr1 = TIMx->CR1;
;;;4724     
;;;4725     /* Set TIM Time Base Unit parameters ---------------------------------------*/
;;;4726     if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
000002  f8dfc0a8          LDR      r12,|L87.172|
000006  4c2a              LDR      r4,|L87.176|
000008  4d2a              LDR      r5,|L87.180|
00000a  4560              CMP      r0,r12
00000c  6802              LDR      r2,[r0,#0]            ;4723
00000e  4e2a              LDR      r6,|L87.184|
000010  4b2a              LDR      r3,|L87.188|
000012  bf18              IT       NE
000014  f1b04f80          CMPNE    r0,#0x40000000
000018  d007              BEQ      |L87.42|
00001a  42a0              CMP      r0,r4
00001c  bf18              IT       NE
00001e  42a8              CMPNE    r0,r5
000020  d003              BEQ      |L87.42|
000022  42b0              CMP      r0,r6
000024  bf18              IT       NE
000026  4298              CMPNE    r0,r3
000028  d103              BNE      |L87.50|
                  |L87.42|
;;;4727     {
;;;4728       /* Select the Counter Mode */
;;;4729       tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
;;;4730       tmpcr1 |= Structure->CounterMode;
00002a  684f              LDR      r7,[r1,#4]
00002c  f0220270          BIC      r2,r2,#0x70           ;4729
000030  433a              ORRS     r2,r2,r7
                  |L87.50|
;;;4731     }
;;;4732    
;;;4733     if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
000032  4560              CMP      r0,r12
000034  bf18              IT       NE
000036  f1b04f80          CMPNE    r0,#0x40000000
00003a  d025              BEQ      |L87.136|
00003c  42a0              CMP      r0,r4
00003e  bf18              IT       NE
000040  42a8              CMPNE    r0,r5
000042  d021              BEQ      |L87.136|
000044  42b0              CMP      r0,r6
000046  bf18              IT       NE
000048  4298              CMPNE    r0,r3
00004a  d01d              BEQ      |L87.136|
00004c  f1a04480          SUB      r4,r0,#0x40000000
000050  f5b434a0          SUBS     r4,r4,#0x14000
000054  bf1c              ITT      NE
000056  f1a04480          SUBNE    r4,r0,#0x40000000
00005a  f5b434a2          SUBSNE   r4,r4,#0x14400
00005e  d013              BEQ      |L87.136|
000060  f1a04480          SUB      r4,r0,#0x40000000
000064  f5b434a4          SUBS     r4,r4,#0x14800
000068  bf1c              ITT      NE
00006a  f1a04480          SUBNE    r4,r0,#0x40000000
00006e  f5b454c0          SUBSNE   r4,r4,#0x1800
000072  d009              BEQ      |L87.136|
000074  f1a04480          SUB      r4,r0,#0x40000000
000078  f5b454e0          SUBS     r4,r4,#0x1c00
00007c  bf1c              ITT      NE
00007e  f1a04480          SUBNE    r4,r0,#0x40000000
000082  f5b45400          SUBSNE   r4,r4,#0x2000
000086  d103              BNE      |L87.144|
                  |L87.136|
;;;4734     {
;;;4735       /* Set the clock division */
;;;4736       tmpcr1 &= ~TIM_CR1_CKD;
;;;4737       tmpcr1 |= (uint32_t)Structure->ClockDivision;
000088  68cc              LDR      r4,[r1,#0xc]
00008a  f4227240          BIC      r2,r2,#0x300          ;4736
00008e  4322              ORRS     r2,r2,r4
                  |L87.144|
;;;4738     }
;;;4739   
;;;4740     TIMx->CR1 = tmpcr1;
000090  6002              STR      r2,[r0,#0]
;;;4741   
;;;4742     /* Set the Auto-reload value */
;;;4743     TIMx->ARR = (uint32_t)Structure->Period ;
;;;4744    
;;;4745     /* Set the Prescaler value */
;;;4746     TIMx->PSC = (uint32_t)Structure->Prescaler;
;;;4747       
;;;4748     if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
000092  688a              LDR      r2,[r1,#8]
000094  4560              CMP      r0,r12
000096  62c2              STR      r2,[r0,#0x2c]         ;4743
000098  680a              LDR      r2,[r1,#0]            ;4746
00009a  6282              STR      r2,[r0,#0x28]         ;4746
00009c  bf12              ITEE     NE
00009e  4298              CMPNE    r0,r3
;;;4749     {
;;;4750       /* Set the Repetition Counter value */
;;;4751       TIMx->RCR = Structure->RepetitionCounter;
0000a0  6909              LDREQ    r1,[r1,#0x10]
0000a2  6301              STREQ    r1,[r0,#0x30]
;;;4752     }
;;;4753   
;;;4754     /* Generate an update event to reload the Prescaler 
;;;4755        and the repetition counter(only for TIM1 and TIM8) value immediately */
;;;4756     TIMx->EGR = TIM_EGR_UG;
0000a4  2101              MOVS     r1,#1
0000a6  6141              STR      r1,[r0,#0x14]
;;;4757   }
0000a8  bcf0              POP      {r4-r7}
0000aa  4770              BX       lr
;;;4758   
                          ENDP

                  |L87.172|
                          DCD      0x40010000
                  |L87.176|
                          DCD      0x40000400
                  |L87.180|
                          DCD      0x40000800
                  |L87.184|
                          DCD      0x40000c00
                  |L87.188|
                          DCD      0x40010400

                          AREA ||i.TIM_CCxChannelCmd||, CODE, READONLY, ALIGN=1

                  TIM_CCxChannelCmd PROC
;;;5490     */
;;;5491   void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
000000  6a03              LDR      r3,[r0,#0x20]
;;;5492   {
;;;5493     uint32_t tmp = 0;
;;;5494   
;;;5495     /* Check the parameters */
;;;5496     assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
;;;5497     assert_param(IS_TIM_CHANNELS(Channel));
;;;5498   
;;;5499     tmp = TIM_CCER_CC1E << Channel;
000002  f04f0c01          MOV      r12,#1
;;;5500   
;;;5501     /* Reset the CCxE Bit */
;;;5502     TIMx->CCER &= ~tmp;
;;;5503   
;;;5504     /* Set or reset the CCxE Bit */ 
;;;5505     TIMx->CCER |= (uint32_t)(ChannelState << Channel);
000006  408a              LSLS     r2,r2,r1
000008  fa0cf101          LSL      r1,r12,r1             ;5499
00000c  ea230101          BIC      r1,r3,r1              ;5502
000010  6201              STR      r1,[r0,#0x20]         ;5502
000012  6a01              LDR      r1,[r0,#0x20]
000014  4311              ORRS     r1,r1,r2
000016  6201              STR      r1,[r0,#0x20]
;;;5506   }
000018  4770              BX       lr
;;;5507   
                          ENDP


                          AREA ||i.TIM_DMACaptureCplt||, CODE, READONLY, ALIGN=1

                  TIM_DMACaptureCplt PROC
;;;4654     */
;;;4655   void HAL_TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;4656   {
;;;4657     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
;;;4658       
;;;4659      htim->State= HAL_TIM_STATE_READY; 
000002  6bc4              LDR      r4,[r0,#0x3c]
000004  2101              MOVS     r1,#1
000006  63e1              STR      r1,[r4,#0x3c]
;;;4660       
;;;4661     if (hdma == htim->hdma[TIM_DMA_ID_CC1])
000008  6a22              LDR      r2,[r4,#0x20]
00000a  4282              CMP      r2,r0
;;;4662     {
;;;4663       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
00000c  bf08              IT       EQ
00000e  61a1              STREQ    r1,[r4,#0x18]
000010  d010              BEQ      |L89.52|
;;;4664     }
;;;4665     else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
000012  6a61              LDR      r1,[r4,#0x24]
000014  4281              CMP      r1,r0
;;;4666     {
;;;4667       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
000016  bf04              ITT      EQ
000018  2002              MOVEQ    r0,#2
00001a  61a0              STREQ    r0,[r4,#0x18]
00001c  d00a              BEQ      |L89.52|
;;;4668     }
;;;4669     else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
00001e  6aa1              LDR      r1,[r4,#0x28]
000020  4281              CMP      r1,r0
;;;4670     {
;;;4671       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
000022  bf08              IT       EQ
000024  2004              MOVEQ    r0,#4
000026  d004              BEQ      |L89.50|
;;;4672     }
;;;4673     else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
000028  6ae1              LDR      r1,[r4,#0x2c]
00002a  4281              CMP      r1,r0
;;;4674     {
;;;4675       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
00002c  bf08              IT       EQ
00002e  2008              MOVEQ    r0,#8
000030  d100              BNE      |L89.52|
                  |L89.50|
000032  61a0              STR      r0,[r4,#0x18]
                  |L89.52|
;;;4676     }
;;;4677     
;;;4678     HAL_TIM_IC_CaptureCallback(htim); 
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       HAL_TIM_IC_CaptureCallback
;;;4679     
;;;4680     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
00003a  2000              MOVS     r0,#0
00003c  61a0              STR      r0,[r4,#0x18]
;;;4681   
;;;4682   }
00003e  bd10              POP      {r4,pc}
;;;4683   
                          ENDP


                          AREA ||i.TIM_DMADelayPulseCplt||, CODE, READONLY, ALIGN=1

                  TIM_DMADelayPulseCplt PROC
;;;4621     */
;;;4622   void HAL_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;4623   {
;;;4624     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
;;;4625     
;;;4626     htim->State= HAL_TIM_STATE_READY; 
000002  6bc4              LDR      r4,[r0,#0x3c]
000004  2101              MOVS     r1,#1
000006  63e1              STR      r1,[r4,#0x3c]
;;;4627     
;;;4628     if (hdma == htim->hdma[TIM_DMA_ID_CC1])
000008  6a22              LDR      r2,[r4,#0x20]
00000a  4282              CMP      r2,r0
;;;4629     {
;;;4630       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
00000c  bf08              IT       EQ
00000e  61a1              STREQ    r1,[r4,#0x18]
000010  d010              BEQ      |L90.52|
;;;4631     }
;;;4632     else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
000012  6a61              LDR      r1,[r4,#0x24]
000014  4281              CMP      r1,r0
;;;4633     {
;;;4634       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
000016  bf04              ITT      EQ
000018  2002              MOVEQ    r0,#2
00001a  61a0              STREQ    r0,[r4,#0x18]
00001c  d00a              BEQ      |L90.52|
;;;4635     }
;;;4636     else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
00001e  6aa1              LDR      r1,[r4,#0x28]
000020  4281              CMP      r1,r0
;;;4637     {
;;;4638       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
000022  bf08              IT       EQ
000024  2004              MOVEQ    r0,#4
000026  d004              BEQ      |L90.50|
;;;4639     }
;;;4640     else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
000028  6ae1              LDR      r1,[r4,#0x2c]
00002a  4281              CMP      r1,r0
;;;4641     {
;;;4642       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
00002c  bf08              IT       EQ
00002e  2008              MOVEQ    r0,#8
000030  d100              BNE      |L90.52|
                  |L90.50|
000032  61a0              STR      r0,[r4,#0x18]
                  |L90.52|
;;;4643     }
;;;4644   
;;;4645     HAL_TIM_PWM_PulseFinishedCallback(htim);
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       HAL_TIM_PWM_PulseFinishedCallback
;;;4646   
;;;4647     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
00003a  2000              MOVS     r0,#0
00003c  61a0              STR      r0,[r4,#0x18]
;;;4648   }
00003e  bd10              POP      {r4,pc}
;;;4649   /**
                          ENDP


                          AREA ||i.TIM_DMAError||, CODE, READONLY, ALIGN=1

                  TIM_DMAError PROC
;;;4606     */
;;;4607   void HAL_TIM_DMAError(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;4608   {
;;;4609     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6bc0              LDR      r0,[r0,#0x3c]
;;;4610     
;;;4611     htim->State= HAL_TIM_STATE_READY;
000004  2101              MOVS     r1,#1
000006  63c1              STR      r1,[r0,#0x3c]
;;;4612      
;;;4613     HAL_TIM_ErrorCallback(htim);
000008  f7fffffe          BL       HAL_TIM_ErrorCallback
;;;4614   }
00000c  bd10              POP      {r4,pc}
;;;4615   
                          ENDP


                          AREA ||i.TIM_DMAPeriodElapsedCplt||, CODE, READONLY, ALIGN=1

                  TIM_DMAPeriodElapsedCplt PROC
;;;4689     */
;;;4690   static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;4691   {
;;;4692     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6bc0              LDR      r0,[r0,#0x3c]
;;;4693     
;;;4694     htim->State= HAL_TIM_STATE_READY;
000004  2101              MOVS     r1,#1
000006  63c1              STR      r1,[r0,#0x3c]
;;;4695     
;;;4696     HAL_TIM_PeriodElapsedCallback(htim);
000008  f7fffffe          BL       HAL_TIM_PeriodElapsedCallback
;;;4697   }
00000c  bd10              POP      {r4,pc}
;;;4698   
                          ENDP


                          AREA ||i.TIM_DMATriggerCplt||, CODE, READONLY, ALIGN=1

                  TIM_DMATriggerCplt PROC
;;;4704     */
;;;4705   static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;4706   {
;;;4707     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;  
000002  6bc0              LDR      r0,[r0,#0x3c]
;;;4708     
;;;4709     htim->State= HAL_TIM_STATE_READY; 
000004  2101              MOVS     r1,#1
000006  63c1              STR      r1,[r0,#0x3c]
;;;4710     
;;;4711     HAL_TIM_TriggerCallback(htim);
000008  f7fffffe          BL       HAL_TIM_TriggerCallback
;;;4712   }
00000c  bd10              POP      {r4,pc}
;;;4713   
                          ENDP


                          AREA ||i.TIM_ETR_SetConfig||, CODE, READONLY, ALIGN=1

                  TIM_ETR_SetConfig PROC
;;;5460     */
;;;5461   void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
000000  ea422303          ORR      r3,r2,r3,LSL #8
;;;5462                          uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
;;;5463   {
;;;5464     uint32_t tmpsmcr = 0;
;;;5465   
;;;5466     tmpsmcr = TIMx->SMCR;
000004  6882              LDR      r2,[r0,#8]
;;;5467   
;;;5468     /* Reset the ETR Bits */
;;;5469     tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
;;;5470   
;;;5471     /* Set the Prescaler, the Filter value and the Polarity */
;;;5472     tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
000006  430b              ORRS     r3,r3,r1
000008  f422417f          BIC      r1,r2,#0xff00         ;5469
00000c  4319              ORRS     r1,r1,r3
;;;5473   
;;;5474     /* Write to TIMx SMCR */
;;;5475     TIMx->SMCR = tmpsmcr;
00000e  6081              STR      r1,[r0,#8]
;;;5476   } 
000010  4770              BX       lr
;;;5477   
                          ENDP


                          AREA ||i.TIM_OC1_SetConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC1_SetConfig PROC
;;;4764     */
;;;4765   void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
000000  b470              PUSH     {r4-r6}
;;;4766   {
;;;4767     uint32_t tmpccmrx = 0;
;;;4768     uint32_t tmpccer = 0;
;;;4769     uint32_t tmpcr2 = 0;  
;;;4770   
;;;4771     /* Disable the Channel 1: Reset the CC1E Bit */
;;;4772     TIMx->CCER &= ~TIM_CCER_CC1E;
000002  6a02              LDR      r2,[r0,#0x20]
;;;4773     
;;;4774     /* Get the TIMx CCER register value */
;;;4775     tmpccer = TIMx->CCER;
;;;4776     /* Get the TIMx CR2 register value */
;;;4777     tmpcr2 = TIMx->CR2;
;;;4778     
;;;4779     /* Get the TIMx CCMR1 register value */
;;;4780     tmpccmrx = TIMx->CCMR1;
;;;4781       
;;;4782     /* Reset the Output Compare Mode Bits */
;;;4783     tmpccmrx &= ~TIM_CCMR1_OC1M;
;;;4784     tmpccmrx &= ~TIM_CCMR1_CC1S;
;;;4785     /* Select the Output Compare Mode */
;;;4786     tmpccmrx |= OC_Config->OCMode;
;;;4787     
;;;4788     /* Reset the Output Polarity level */
;;;4789     tmpccer &= ~TIM_CCER_CC1P;
;;;4790     /* Set the Output Compare Polarity */
;;;4791     tmpccer |= OC_Config->OCPolarity;
;;;4792   
;;;4793       
;;;4794     if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
000004  f1a04380          SUB      r3,r0,#0x40000000
000008  f5b33380          SUBS     r3,r3,#0x10000
00000c  f0220201          BIC      r2,r2,#1              ;4772
000010  6202              STR      r2,[r0,#0x20]         ;4772
000012  6a03              LDR      r3,[r0,#0x20]         ;4775
000014  6842              LDR      r2,[r0,#4]            ;4777
000016  f8d0c018          LDR      r12,[r0,#0x18]        ;4780
00001a  f0230302          BIC      r3,r3,#2              ;4789
00001e  688d              LDR      r5,[r1,#8]            ;4791
000020  680c              LDR      r4,[r1,#0]            ;4786
000022  f02c0c73          BIC      r12,r12,#0x73         ;4784
000026  f42c3c80          BIC      r12,r12,#0x10000      ;4784
00002a  ea450303          ORR      r3,r5,r3              ;4791
00002e  ea440c0c          ORR      r12,r4,r12            ;4786
000032  bf1c              ITT      NE
000034  f1a04480          SUBNE    r4,r0,#0x40000000
000038  f5b43482          SUBSNE   r4,r4,#0x10400
00003c  d10b              BNE      |L95.86|
;;;4795     {   
;;;4796       /* Reset the Output N Polarity level */
;;;4797       tmpccer &= ~TIM_CCER_CC1NP;
;;;4798       /* Set the Output N Polarity */
;;;4799       tmpccer |= OC_Config->OCNPolarity;
00003e  68ce              LDR      r6,[r1,#0xc]
000040  f0230308          BIC      r3,r3,#8              ;4797
000044  e9d14505          LDRD     r4,r5,[r1,#0x14]
000048  4333              ORRS     r3,r3,r6
;;;4800       /* Reset the Output N State */
;;;4801       tmpccer &= ~TIM_CCER_CC1NE;
;;;4802       
;;;4803       /* Reset the Output Compare and Output Compare N IDLE State */
;;;4804       tmpcr2 &= ~TIM_CR2_OIS1;
;;;4805       tmpcr2 &= ~TIM_CR2_OIS1N;
00004a  f4227240          BIC      r2,r2,#0x300
;;;4806       /* Set the Output Idle state */
;;;4807       tmpcr2 |= OC_Config->OCIdleState;
00004e  4322              ORRS     r2,r2,r4
;;;4808       /* Set the Output N Idle state */
;;;4809       tmpcr2 |= OC_Config->OCNIdleState;
000050  432a              ORRS     r2,r2,r5
000052  f0230304          BIC      r3,r3,#4              ;4801
                  |L95.86|
;;;4810     }
;;;4811     /* Write to TIMx CR2 */
;;;4812     TIMx->CR2 = tmpcr2;
000056  6042              STR      r2,[r0,#4]
;;;4813     
;;;4814     /* Write to TIMx CCMR1 */
;;;4815     TIMx->CCMR1 = tmpccmrx;
000058  f8c0c018          STR      r12,[r0,#0x18]
;;;4816     
;;;4817     /* Set the Capture Compare Register value */
;;;4818     TIMx->CCR1 = OC_Config->Pulse;
00005c  6849              LDR      r1,[r1,#4]
00005e  6341              STR      r1,[r0,#0x34]
;;;4819     
;;;4820     /* Write to TIMx CCER */
;;;4821     TIMx->CCER = tmpccer;  
000060  6203              STR      r3,[r0,#0x20]
;;;4822   } 
000062  bc70              POP      {r4-r6}
000064  4770              BX       lr
;;;4823   
                          ENDP


                          AREA ||i.TIM_OC2_SetConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC2_SetConfig PROC
;;;4829     */
;;;4830   void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
000000  b470              PUSH     {r4-r6}
;;;4831   {
;;;4832     uint32_t tmpccmrx = 0;
;;;4833     uint32_t tmpccer = 0;
;;;4834     uint32_t tmpcr2 = 0;
;;;4835      
;;;4836     /* Disable the Channel 2: Reset the CC2E Bit */
;;;4837     TIMx->CCER &= ~TIM_CCER_CC2E;
000002  6a02              LDR      r2,[r0,#0x20]
;;;4838     
;;;4839     /* Get the TIMx CCER register value */  
;;;4840     tmpccer = TIMx->CCER;
;;;4841     /* Get the TIMx CR2 register value */
;;;4842     tmpcr2 = TIMx->CR2;
;;;4843     
;;;4844     /* Get the TIMx CCMR1 register value */
;;;4845     tmpccmrx = TIMx->CCMR1;
;;;4846       
;;;4847     /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;4848     tmpccmrx &= ~TIM_CCMR1_OC2M;
;;;4849     tmpccmrx &= ~TIM_CCMR1_CC2S;
;;;4850     
;;;4851     /* Select the Output Compare Mode */
;;;4852     tmpccmrx |= (OC_Config->OCMode << 8);
;;;4853     
;;;4854     /* Reset the Output Polarity level */
;;;4855     tmpccer &= ~TIM_CCER_CC2P;
;;;4856     /* Set the Output Compare Polarity */
;;;4857     tmpccer |= (OC_Config->OCPolarity << 4);
;;;4858       
;;;4859     if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
000004  f1a04380          SUB      r3,r0,#0x40000000
000008  f5b33380          SUBS     r3,r3,#0x10000
00000c  f0220210          BIC      r2,r2,#0x10           ;4837
000010  6202              STR      r2,[r0,#0x20]         ;4837
000012  6a03              LDR      r3,[r0,#0x20]         ;4840
000014  6842              LDR      r2,[r0,#4]            ;4842
000016  f8d0c018          LDR      r12,[r0,#0x18]        ;4845
00001a  f0230320          BIC      r3,r3,#0x20           ;4855
00001e  688d              LDR      r5,[r1,#8]            ;4857
000020  680c              LDR      r4,[r1,#0]            ;4852
000022  f42c4ce6          BIC      r12,r12,#0x7300       ;4849
000026  f02c7c80          BIC      r12,r12,#0x1000000    ;4849
00002a  ea431305          ORR      r3,r3,r5,LSL #4       ;4857
00002e  ea4c2c04          ORR      r12,r12,r4,LSL #8     ;4852
000032  bf1c              ITT      NE
000034  f1a04480          SUBNE    r4,r0,#0x40000000
000038  f5b43482          SUBSNE   r4,r4,#0x10400
00003c  d10e              BNE      |L96.92|
;;;4860     {
;;;4861       assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
;;;4862       
;;;4863       /* Reset the Output N Polarity level */
;;;4864       tmpccer &= ~TIM_CCER_CC2NP;
;;;4865       /* Set the Output N Polarity */
;;;4866       tmpccer |= (OC_Config->OCNPolarity << 4);
00003e  68ce              LDR      r6,[r1,#0xc]
000040  f0230380          BIC      r3,r3,#0x80           ;4864
000044  e9d14505          LDRD     r4,r5,[r1,#0x14]
;;;4867       /* Reset the Output N State */
;;;4868       tmpccer &= ~TIM_CCER_CC2NE;
;;;4869       
;;;4870       /* Reset the Output Compare and Output Compare N IDLE State */
;;;4871       tmpcr2 &= ~TIM_CR2_OIS2;
;;;4872       tmpcr2 &= ~TIM_CR2_OIS2N;
000048  f4226240          BIC      r2,r2,#0xc00
00004c  ea431306          ORR      r3,r3,r6,LSL #4       ;4866
;;;4873       /* Set the Output Idle state */
;;;4874       tmpcr2 |= (OC_Config->OCIdleState << 2);
000050  ea420284          ORR      r2,r2,r4,LSL #2
000054  f0230340          BIC      r3,r3,#0x40           ;4868
;;;4875       /* Set the Output N Idle state */
;;;4876       tmpcr2 |= (OC_Config->OCNIdleState << 2);
000058  ea420285          ORR      r2,r2,r5,LSL #2
                  |L96.92|
;;;4877     }
;;;4878     /* Write to TIMx CR2 */
;;;4879     TIMx->CR2 = tmpcr2;
00005c  6042              STR      r2,[r0,#4]
;;;4880     
;;;4881     /* Write to TIMx CCMR1 */
;;;4882     TIMx->CCMR1 = tmpccmrx;
00005e  f8c0c018          STR      r12,[r0,#0x18]
;;;4883     
;;;4884     /* Set the Capture Compare Register value */
;;;4885     TIMx->CCR2 = OC_Config->Pulse;
000062  6849              LDR      r1,[r1,#4]
000064  6381              STR      r1,[r0,#0x38]
;;;4886     
;;;4887     /* Write to TIMx CCER */
;;;4888     TIMx->CCER = tmpccer;
000066  6203              STR      r3,[r0,#0x20]
;;;4889   }
000068  bc70              POP      {r4-r6}
00006a  4770              BX       lr
;;;4890   
                          ENDP


                          AREA ||i.TIM_OC3_SetConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC3_SetConfig PROC
;;;4896     */
;;;4897   void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
000000  b470              PUSH     {r4-r6}
;;;4898   {
;;;4899     uint32_t tmpccmrx = 0;
;;;4900     uint32_t tmpccer = 0;
;;;4901     uint32_t tmpcr2 = 0;   
;;;4902   
;;;4903     /* Disable the Channel 3: Reset the CC2E Bit */
;;;4904     TIMx->CCER &= ~TIM_CCER_CC3E;
000002  6a02              LDR      r2,[r0,#0x20]
;;;4905     
;;;4906     /* Get the TIMx CCER register value */
;;;4907     tmpccer = TIMx->CCER;
;;;4908     /* Get the TIMx CR2 register value */
;;;4909     tmpcr2 = TIMx->CR2;
;;;4910     
;;;4911     /* Get the TIMx CCMR2 register value */
;;;4912     tmpccmrx = TIMx->CCMR2;
;;;4913       
;;;4914     /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;4915     tmpccmrx &= ~TIM_CCMR2_OC3M;
;;;4916     tmpccmrx &= ~TIM_CCMR2_CC3S;  
;;;4917     /* Select the Output Compare Mode */
;;;4918     tmpccmrx |= OC_Config->OCMode;
;;;4919     
;;;4920     /* Reset the Output Polarity level */
;;;4921     tmpccer &= ~TIM_CCER_CC3P;
;;;4922     /* Set the Output Compare Polarity */
;;;4923     tmpccer |= (OC_Config->OCPolarity << 8);
;;;4924       
;;;4925     if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
000004  f1a04380          SUB      r3,r0,#0x40000000
000008  f5b33380          SUBS     r3,r3,#0x10000
00000c  f4227280          BIC      r2,r2,#0x100          ;4904
000010  6202              STR      r2,[r0,#0x20]         ;4904
000012  6a03              LDR      r3,[r0,#0x20]         ;4907
000014  6842              LDR      r2,[r0,#4]            ;4909
000016  f8d0c01c          LDR      r12,[r0,#0x1c]        ;4912
00001a  f4237300          BIC      r3,r3,#0x200          ;4921
00001e  688d              LDR      r5,[r1,#8]            ;4923
000020  680c              LDR      r4,[r1,#0]            ;4918
000022  f02c0c73          BIC      r12,r12,#0x73         ;4916
000026  f42c3c80          BIC      r12,r12,#0x10000      ;4916
00002a  ea432305          ORR      r3,r3,r5,LSL #8       ;4923
00002e  ea440c0c          ORR      r12,r4,r12            ;4918
000032  bf1c              ITT      NE
000034  f1a04480          SUBNE    r4,r0,#0x40000000
000038  f5b43482          SUBSNE   r4,r4,#0x10400
00003c  d10e              BNE      |L97.92|
;;;4926     {
;;;4927       assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
;;;4928       
;;;4929       /* Reset the Output N Polarity level */
;;;4930       tmpccer &= ~TIM_CCER_CC3NP;
;;;4931       /* Set the Output N Polarity */
;;;4932       tmpccer |= (OC_Config->OCNPolarity << 8);
00003e  68ce              LDR      r6,[r1,#0xc]
000040  f4236300          BIC      r3,r3,#0x800          ;4930
000044  e9d14505          LDRD     r4,r5,[r1,#0x14]
;;;4933       /* Reset the Output N State */
;;;4934       tmpccer &= ~TIM_CCER_CC3NE;
;;;4935       
;;;4936       /* Reset the Output Compare and Output Compare N IDLE State */
;;;4937       tmpcr2 &= ~TIM_CR2_OIS3;
;;;4938       tmpcr2 &= ~TIM_CR2_OIS3N;
000048  f4225240          BIC      r2,r2,#0x3000
00004c  ea432306          ORR      r3,r3,r6,LSL #8       ;4932
;;;4939       /* Set the Output Idle state */
;;;4940       tmpcr2 |= (OC_Config->OCIdleState << 4);
000050  ea421204          ORR      r2,r2,r4,LSL #4
000054  f4236380          BIC      r3,r3,#0x400          ;4934
;;;4941       /* Set the Output N Idle state */
;;;4942       tmpcr2 |= (OC_Config->OCNIdleState << 4);
000058  ea421205          ORR      r2,r2,r5,LSL #4
                  |L97.92|
;;;4943     }
;;;4944     /* Write to TIMx CR2 */
;;;4945     TIMx->CR2 = tmpcr2;
00005c  6042              STR      r2,[r0,#4]
;;;4946     
;;;4947     /* Write to TIMx CCMR2 */
;;;4948     TIMx->CCMR2 = tmpccmrx;
00005e  f8c0c01c          STR      r12,[r0,#0x1c]
;;;4949     
;;;4950     /* Set the Capture Compare Register value */
;;;4951     TIMx->CCR3 = OC_Config->Pulse;
000062  6849              LDR      r1,[r1,#4]
000064  63c1              STR      r1,[r0,#0x3c]
;;;4952     
;;;4953     /* Write to TIMx CCER */
;;;4954     TIMx->CCER = tmpccer;
000066  6203              STR      r3,[r0,#0x20]
;;;4955   }
000068  bc70              POP      {r4-r6}
00006a  4770              BX       lr
;;;4956   
                          ENDP


                          AREA ||i.TIM_OC4_SetConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC4_SetConfig PROC
;;;4962     */
;;;4963   void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
000000  b430              PUSH     {r4,r5}
;;;4964   {
;;;4965     uint32_t tmpccmrx = 0;
;;;4966     uint32_t tmpccer = 0;
;;;4967     uint32_t tmpcr2 = 0;
;;;4968   
;;;4969     /* Disable the Channel 4: Reset the CC4E Bit */
;;;4970     TIMx->CCER &= ~TIM_CCER_CC4E;
000002  6a02              LDR      r2,[r0,#0x20]
;;;4971     
;;;4972     /* Get the TIMx CCER register value */
;;;4973     tmpccer = TIMx->CCER;
;;;4974     /* Get the TIMx CR2 register value */
;;;4975     tmpcr2 = TIMx->CR2;
;;;4976     
;;;4977     /* Get the TIMx CCMR2 register value */
;;;4978     tmpccmrx = TIMx->CCMR2;
;;;4979       
;;;4980     /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;4981     tmpccmrx &= ~TIM_CCMR2_OC4M;
;;;4982     tmpccmrx &= ~TIM_CCMR2_CC4S;
;;;4983     
;;;4984     /* Select the Output Compare Mode */
;;;4985     tmpccmrx |= (OC_Config->OCMode << 8);
;;;4986     
;;;4987     /* Reset the Output Polarity level */
;;;4988     tmpccer &= ~TIM_CCER_CC4P;
;;;4989     /* Set the Output Compare Polarity */
;;;4990     tmpccer |= (OC_Config->OCPolarity << 12);
;;;4991      
;;;4992     /*if((TIMx == TIM1) || (TIMx == TIM8))*/
;;;4993     if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
000004  f1a04380          SUB      r3,r0,#0x40000000
000008  f5b33380          SUBS     r3,r3,#0x10000
00000c  f4225280          BIC      r2,r2,#0x1000         ;4970
000010  6202              STR      r2,[r0,#0x20]         ;4970
000012  6a03              LDR      r3,[r0,#0x20]         ;4973
000014  6842              LDR      r2,[r0,#4]            ;4975
000016  f8d0c01c          LDR      r12,[r0,#0x1c]        ;4978
00001a  f4235300          BIC      r3,r3,#0x2000         ;4988
00001e  688d              LDR      r5,[r1,#8]            ;4990
000020  680c              LDR      r4,[r1,#0]            ;4985
000022  f42c4ce6          BIC      r12,r12,#0x7300       ;4982
000026  f02c7c80          BIC      r12,r12,#0x1000000    ;4982
00002a  ea433305          ORR      r3,r3,r5,LSL #12      ;4990
00002e  ea4c2c04          ORR      r12,r12,r4,LSL #8     ;4985
000032  bf1c              ITT      NE
000034  f1a04480          SUBNE    r4,r0,#0x40000000
000038  f5b43482          SUBSNE   r4,r4,#0x10400
00003c  d104              BNE      |L98.72|
;;;4994     {
;;;4995       assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
;;;4996       /* Reset the Output Compare IDLE State */
;;;4997       tmpcr2 &= ~TIM_CR2_OIS4;
;;;4998       /* Set the Output Idle state */
;;;4999       tmpcr2 |= (OC_Config->OCIdleState << 6);
00003e  694c              LDR      r4,[r1,#0x14]
000040  f4224280          BIC      r2,r2,#0x4000         ;4997
000044  ea421284          ORR      r2,r2,r4,LSL #6
                  |L98.72|
;;;5000     }
;;;5001     /* Write to TIMx CR2 */
;;;5002     TIMx->CR2 = tmpcr2;
000048  6042              STR      r2,[r0,#4]
;;;5003     
;;;5004     /* Write to TIMx CCMR2 */  
;;;5005     TIMx->CCMR2 = tmpccmrx;
00004a  f8c0c01c          STR      r12,[r0,#0x1c]
;;;5006       
;;;5007     /* Set the Capture Compare Register value */
;;;5008     TIMx->CCR4 = OC_Config->Pulse;
00004e  6849              LDR      r1,[r1,#4]
000050  6401              STR      r1,[r0,#0x40]
;;;5009     
;;;5010     /* Write to TIMx CCER */
;;;5011     TIMx->CCER = tmpccer;
000052  6203              STR      r3,[r0,#0x20]
;;;5012   }
000054  bc30              POP      {r4,r5}
000056  4770              BX       lr
;;;5013   
                          ENDP


                          AREA ||i.TIM_TI1_SetConfig||, CODE, READONLY, ALIGN=1

                  TIM_TI1_SetConfig PROC
;;;5165     */
;;;5166   void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
000000  b430              PUSH     {r4,r5}
;;;5167                          uint32_t TIM_ICFilter)
;;;5168   {
;;;5169     uint32_t tmpccmr1 = 0;
;;;5170     uint32_t tmpccer = 0;
;;;5171   
;;;5172     /* Disable the Channel 1: Reset the CC1E Bit */
;;;5173     TIMx->CCER &= ~TIM_CCER_CC1E;
000002  f8d0c020          LDR      r12,[r0,#0x20]
;;;5174     tmpccmr1 = TIMx->CCMR1;
;;;5175     tmpccer = TIMx->CCER;
;;;5176   
;;;5177     /* Select the Input */
;;;5178     if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
000006  f1a04480          SUB      r4,r0,#0x40000000
00000a  f5b43480          SUBS     r4,r4,#0x10000
00000e  f02c0c01          BIC      r12,r12,#1            ;5173
000012  f8c0c020          STR      r12,[r0,#0x20]        ;5173
000016  f8d0c018          LDR      r12,[r0,#0x18]        ;5174
00001a  6a04              LDR      r4,[r0,#0x20]         ;5175
00001c  bf18              IT       NE
00001e  f1b04f80          CMPNE    r0,#0x40000000
000022  d01f              BEQ      |L99.100|
000024  f1a04580          SUB      r5,r0,#0x40000000
000028  f5b56580          SUBS     r5,r5,#0x400
00002c  bf1c              ITT      NE
00002e  f1a04580          SUBNE    r5,r0,#0x40000000
000032  f5b56500          SUBSNE   r5,r5,#0x800
000036  d015              BEQ      |L99.100|
000038  f1a04580          SUB      r5,r0,#0x40000000
00003c  f5b56540          SUBS     r5,r5,#0xc00
000040  bf1c              ITT      NE
000042  f1a04580          SUBNE    r5,r0,#0x40000000
000046  f5b53582          SUBSNE   r5,r5,#0x10400
00004a  d00b              BEQ      |L99.100|
00004c  f1a04580          SUB      r5,r0,#0x40000000
000050  f5b535a0          SUBS     r5,r5,#0x14000
000054  bf1e              ITTT     NE
000056  f1a04580          SUBNE    r5,r0,#0x40000000
00005a  f5b555c0          SUBSNE   r5,r5,#0x1800
;;;5179     {
;;;5180       tmpccmr1 &= ~TIM_CCMR1_CC1S;
;;;5181       tmpccmr1 |= TIM_ICSelection;
;;;5182     } 
;;;5183     else
;;;5184     {
;;;5185       tmpccmr1 |= TIM_CCMR1_CC1S_0;
00005e  f04c0201          ORRNE    r2,r12,#1
000062  d103              BNE      |L99.108|
                  |L99.100|
000064  f02c0c03          BIC      r12,r12,#3            ;5180
000068  ea4c0202          ORR      r2,r12,r2             ;5181
                  |L99.108|
;;;5186     }
;;;5187     
;;;5188     /* Set the filter */
;;;5189     tmpccmr1 &= ~TIM_CCMR1_IC1F;
;;;5190     tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
00006c  f04f0cf0          MOV      r12,#0xf0
000070  ea0c1c03          AND      r12,r12,r3,LSL #4
;;;5191   
;;;5192     /* Select the Polarity and set the CC1E Bit */
;;;5193     tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
000074  f024030a          BIC      r3,r4,#0xa
000078  f02202f0          BIC      r2,r2,#0xf0           ;5189
;;;5194     tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
00007c  f001040a          AND      r4,r1,#0xa
000080  ea4c0102          ORR      r1,r12,r2             ;5190
;;;5195   
;;;5196     /* Write to TIMx CCMR1 and CCER registers */
;;;5197     TIMx->CCMR1 = tmpccmr1;
000084  6181              STR      r1,[r0,#0x18]
000086  ea440203          ORR      r2,r4,r3              ;5194
;;;5198     TIMx->CCER = tmpccer;
00008a  6202              STR      r2,[r0,#0x20]
;;;5199   }
00008c  bc30              POP      {r4,r5}
00008e  4770              BX       lr
;;;5200   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_tim.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_tim_c_a9d95b52____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32F7xx_HAL_Driver\\Core\\cmsis_armcc.h"
|__asm___19_stm32f7xx_hal_tim_c_a9d95b52____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_tim_c_a9d95b52____REVSH|
#line 402
|__asm___19_stm32f7xx_hal_tim_c_a9d95b52____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_tim_c_a9d95b52____RRX|
#line 587
|__asm___19_stm32f7xx_hal_tim_c_a9d95b52____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
