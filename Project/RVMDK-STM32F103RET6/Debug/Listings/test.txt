; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\test.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\test.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32F10x_StdPeriph_Lib_V3.3.0\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\M0P0_Library\STM32F10x_StdPeriph_Lib_V3.3.0\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\..\M0P0_Library\STM32F10x_StdPeriph_Lib_V3.3.0\Libraries\CMSIS -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F103RET6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --enum_is_int --signed_chars --omf_browse=.\debug\output\test.crf ..\..\MProkaron\Benchmark\test.c]
                          THUMB

                          AREA ||i.Func_1||, CODE, READONLY, ALIGN=2

                  Func_1 PROC
;;;71     
;;;72     void Func_1(void)
000000  4c15              LDR      r4,|L1.88|
000002  2700              MOVS     r7,#0
000004  f04f4580          MOV      r5,#0x40000000
000008  f2427610          MOV      r6,#0x2710
                  |L1.12|
00000c  8ca8              LDRH     r0,[r5,#0x24]
00000e  8020              STRH     r0,[r4,#0]
000010  f7fffffe          BL       RMP_Yield
000014  1c7f              ADDS     r7,r7,#1
000016  42b7              CMP      r7,r6
000018  dbf8              BLT      |L1.12|
;;;73     {
;;;74         Test_Yield_1();
;;;75         /* Change priority of thread 2 */
;;;76         RMP_Thd_Set(&Thd_2,2,RMP_MAX_SLICES);
00001a  4f10              LDR      r7,|L1.92|
00001c  2102              MOVS     r1,#2
00001e  463a              MOV      r2,r7
000020  480f              LDR      r0,|L1.96|
000022  f7fffffe          BL       RMP_Thd_Set
000026  2000              MOVS     r0,#0
000028  6220              STR      r0,[r4,#0x20]  ; Count
                  |L1.42|
00002a  8ca8              LDRH     r0,[r5,#0x24]
00002c  8020              STRH     r0,[r4,#0]
00002e  463a              MOV      r2,r7
000030  2101              MOVS     r1,#1
000032  480b              LDR      r0,|L1.96|
000034  f7fffffe          BL       RMP_Thd_Snd
000038  6a20              LDR      r0,[r4,#0x20]  ; Count
00003a  1c40              ADDS     r0,r0,#1
00003c  6220              STR      r0,[r4,#0x20]  ; Count
00003e  42b0              CMP      r0,r6
000040  dbf3              BLT      |L1.42|
000042  2700              MOVS     r7,#0
                  |L1.68|
000044  8ca8              LDRH     r0,[r5,#0x24]
000046  8020              STRH     r0,[r4,#0]
000048  2101              MOVS     r1,#1
00004a  4806              LDR      r0,|L1.100|
00004c  f7fffffe          BL       RMP_Sem_Post
000050  1c7f              ADDS     r7,r7,#1
000052  42b7              CMP      r7,r6
000054  dbf6              BLT      |L1.68|
                  |L1.86|
;;;77         Test_Mail_1();
;;;78         Test_Sem_1();
;;;79         while(1);
000056  e7fe              B        |L1.86|
;;;80     }
;;;81     /* End Function:Test_Yield ***************************************************/
                          ENDP

                  |L1.88|
                          DCD      ||.data||
                  |L1.92|
                          DCD      0x000186a0
                  |L1.96|
                          DCD      ||.bss||+0x850
                  |L1.100|
                          DCD      ||.bss||+0x88c

                          AREA ||i.Func_2||, CODE, READONLY, ALIGN=2

                  Func_2 PROC
;;;150    
;;;151    void Func_2(void)
000000  4c6e              LDR      r4,|L2.444|
;;;152    {
000002  b082              SUB      sp,sp,#8
;;;153        /* Yield tests */
;;;154        Total=0;
000004  2700              MOVS     r7,#0
000006  6067              STR      r7,[r4,#4]  ; Total
000008  46b8              MOV      r8,r7
00000a  f04f4680          MOV      r6,#0x40000000
00000e  f2427510          MOV      r5,#0x2710
000012  bf00              NOP      
                  |L2.20|
000014  f7fffffe          BL       RMP_Yield
000018  8cb0              LDRH     r0,[r6,#0x24]
00001a  8060              STRH     r0,[r4,#2]
00001c  8860              LDRH     r0,[r4,#2]  ; End
00001e  8821              LDRH     r1,[r4,#0]  ; Start
000020  1a40              SUBS     r0,r0,r1
000022  6861              LDR      r1,[r4,#4]  ; Total
000024  b280              UXTH     r0,r0
000026  4408              ADD      r0,r0,r1
000028  6060              STR      r0,[r4,#4]  ; Total
00002a  f1080801          ADD      r8,r8,#1
00002e  45a8              CMP      r8,r5
000030  dbf0              BLT      |L2.20|
;;;155        Test_Yield_2();
;;;156        RMP_PRINTK_S("Yield: ");
000032  a063              ADR      r0,|L2.448|
000034  f7fffffe          BL       RMP_Print_String
;;;157        
;;;158        Yield_Time=Total/10000;
000038  6860              LDR      r0,[r4,#4]  ; Total
00003a  fbb0f0f5          UDIV     r0,r0,r5
00003e  60e0              STR      r0,[r4,#0xc]  ; Yield_Time
;;;159        RMP_PRINTK_I(Yield_Time);
000040  68e0              LDR      r0,[r4,#0xc]  ; Yield_Time
000042  f7fffffe          BL       RMP_Print_Int
;;;160        RMP_PRINTK_S(" cycles.\r\n");
000046  a060              ADR      r0,|L2.456|
000048  f7fffffe          BL       RMP_Print_String
;;;161        /* Change priority of thread 2, just in case */
;;;162        RMP_Thd_Set(&Thd_2,2,RMP_MAX_SLICES);
00004c  f8df8184          LDR      r8,|L2.468|
000050  2102              MOVS     r1,#2
000052  4642              MOV      r2,r8
000054  4860              LDR      r0,|L2.472|
000056  f7fffffe          BL       RMP_Thd_Set
;;;163        
;;;164        /* Mailbox tests */
;;;165        Total=0;
00005a  6067              STR      r7,[r4,#4]  ; Total
00005c  f04f0900          MOV      r9,#0
                  |L2.96|
000060  4641              MOV      r1,r8
000062  4668              MOV      r0,sp
000064  f7fffffe          BL       RMP_Thd_Rcv
000068  8cb0              LDRH     r0,[r6,#0x24]
00006a  8060              STRH     r0,[r4,#2]
00006c  8860              LDRH     r0,[r4,#2]  ; End
00006e  8821              LDRH     r1,[r4,#0]  ; Start
000070  1a40              SUBS     r0,r0,r1
000072  6861              LDR      r1,[r4,#4]  ; Total
000074  b280              UXTH     r0,r0
000076  4408              ADD      r0,r0,r1
000078  6060              STR      r0,[r4,#4]  ; Total
00007a  f1090901          ADD      r9,r9,#1
00007e  45a9              CMP      r9,r5
000080  dbee              BLT      |L2.96|
;;;166        Test_Mail_2();
;;;167        RMP_PRINTK_S("Mailbox: ");
000082  a056              ADR      r0,|L2.476|
000084  f7fffffe          BL       RMP_Print_String
;;;168        Mailbox_Time=Total/10000;
000088  6860              LDR      r0,[r4,#4]  ; Total
00008a  fbb0f0f5          UDIV     r0,r0,r5
00008e  6120              STR      r0,[r4,#0x10]  ; Mailbox_Time
;;;169        RMP_PRINTK_I(Mailbox_Time);
000090  6920              LDR      r0,[r4,#0x10]  ; Mailbox_Time
000092  f7fffffe          BL       RMP_Print_Int
;;;170        RMP_PRINTK_S(" cycles.\r\n");
000096  a04c              ADR      r0,|L2.456|
000098  f7fffffe          BL       RMP_Print_String
;;;171        
;;;172        /* Semaphore tests */
;;;173        Total=0;
00009c  6067              STR      r7,[r4,#4]  ; Total
00009e  f04f0900          MOV      r9,#0
                  |L2.162|
0000a2  4641              MOV      r1,r8
0000a4  4850              LDR      r0,|L2.488|
0000a6  f7fffffe          BL       RMP_Sem_Pend
0000aa  8cb0              LDRH     r0,[r6,#0x24]
0000ac  8060              STRH     r0,[r4,#2]
0000ae  8860              LDRH     r0,[r4,#2]  ; End
0000b0  8821              LDRH     r1,[r4,#0]  ; Start
0000b2  1a40              SUBS     r0,r0,r1
0000b4  6861              LDR      r1,[r4,#4]  ; Total
0000b6  b280              UXTH     r0,r0
0000b8  4408              ADD      r0,r0,r1
0000ba  6060              STR      r0,[r4,#4]  ; Total
0000bc  f1090901          ADD      r9,r9,#1
0000c0  45a9              CMP      r9,r5
0000c2  dbee              BLT      |L2.162|
;;;174        Test_Sem_2();
;;;175        RMP_PRINTK_S("Semaphore: ");
0000c4  a049              ADR      r0,|L2.492|
0000c6  f7fffffe          BL       RMP_Print_String
;;;176        Semaphore_Time=Total/10000;
0000ca  6860              LDR      r0,[r4,#4]  ; Total
0000cc  fbb0f0f5          UDIV     r0,r0,r5
0000d0  6160              STR      r0,[r4,#0x14]  ; Semaphore_Time
;;;177        RMP_PRINTK_I(Semaphore_Time);
0000d2  6960              LDR      r0,[r4,#0x14]  ; Semaphore_Time
0000d4  f7fffffe          BL       RMP_Print_Int
;;;178        RMP_PRINTK_S(" cycles.\r\n");
0000d8  a03b              ADR      r0,|L2.456|
0000da  f7fffffe          BL       RMP_Print_String
;;;179        
;;;180        /* Mailbox from interrupt tests */
;;;181        Total=0;
0000de  6067              STR      r7,[r4,#4]  ; Total
0000e0  2101              MOVS     r1,#1
0000e2  2004              MOVS     r0,#4
0000e4  f7fffffe          BL       RCC_APB1PeriphClockCmd
0000e8  f8df910c          LDR      r9,|L2.504|
0000ec  4648              MOV      r0,r9
0000ee  f7fffffe          BL       TIM_DeInit
0000f2  4842              LDR      r0,|L2.508|
0000f4  f44f51e1          MOV      r1,#0x1c20
0000f8  8081              STRH     r1,[r0,#4]
0000fa  8007              STRH     r7,[r0,#0]
0000fc  80c7              STRH     r7,[r0,#6]
0000fe  2110              MOVS     r1,#0x10
000100  8041              STRH     r1,[r0,#2]
000102  4601              MOV      r1,r0
000104  4648              MOV      r0,r9
000106  f7fffffe          BL       TIM_TimeBaseInit
00010a  2101              MOVS     r1,#1
00010c  4648              MOV      r0,r9
00010e  f7fffffe          BL       TIM_ClearFlag
000112  2201              MOVS     r2,#1
000114  4611              MOV      r1,r2
000116  4648              MOV      r0,r9
000118  f7fffffe          BL       TIM_ITConfig
00011c  2101              MOVS     r1,#1
00011e  4648              MOV      r0,r9
000120  f7fffffe          BL       TIM_Cmd
000124  4936              LDR      r1,|L2.512|
000126  20f0              MOVS     r0,#0xf0
000128  f8810400          STRB     r0,[r1,#0x400]
00012c  f04f20e0          MOV      r0,#0xe000e000
000130  f8c06100          STR      r6,[r0,#0x100]
000134  6267              STR      r7,[r4,#0x24]  ; Count
                  |L2.310|
000136  4641              MOV      r1,r8
000138  4668              MOV      r0,sp
00013a  f7fffffe          BL       RMP_Thd_Rcv
00013e  8cb0              LDRH     r0,[r6,#0x24]
000140  8060              STRH     r0,[r4,#2]
000142  8860              LDRH     r0,[r4,#2]  ; End
000144  8821              LDRH     r1,[r4,#0]  ; Start
000146  1a40              SUBS     r0,r0,r1
000148  6861              LDR      r1,[r4,#4]  ; Total
00014a  b280              UXTH     r0,r0
00014c  4408              ADD      r0,r0,r1
00014e  6060              STR      r0,[r4,#4]  ; Total
000150  6a60              LDR      r0,[r4,#0x24]  ; Count
000152  1c40              ADDS     r0,r0,#1
000154  6260              STR      r0,[r4,#0x24]  ; Count
000156  42a8              CMP      r0,r5
000158  dbed              BLT      |L2.310|
;;;182        Int_Init();
;;;183        Test_Mail_ISR();
;;;184        
;;;185        /* Semaphore from interrupt tests */
;;;186        Temp=Total;
00015a  6860              LDR      r0,[r4,#4]  ; Total
00015c  60a0              STR      r0,[r4,#8]  ; Temp
;;;187        Total=0;
00015e  6067              STR      r7,[r4,#4]  ; Total
000160  62a7              STR      r7,[r4,#0x28]  ; Count
                  |L2.354|
000162  4641              MOV      r1,r8
000164  4820              LDR      r0,|L2.488|
000166  f7fffffe          BL       RMP_Sem_Pend
00016a  8cb0              LDRH     r0,[r6,#0x24]
00016c  8060              STRH     r0,[r4,#2]
00016e  8860              LDRH     r0,[r4,#2]  ; End
000170  8821              LDRH     r1,[r4,#0]  ; Start
000172  1a40              SUBS     r0,r0,r1
000174  6861              LDR      r1,[r4,#4]  ; Total
000176  b280              UXTH     r0,r0
000178  4408              ADD      r0,r0,r1
00017a  6060              STR      r0,[r4,#4]  ; Total
00017c  6aa0              LDR      r0,[r4,#0x28]  ; Count
00017e  1c40              ADDS     r0,r0,#1
000180  62a0              STR      r0,[r4,#0x28]  ; Count
000182  42a8              CMP      r0,r5
000184  dbed              BLT      |L2.354|
;;;188        Test_Sem_ISR();
;;;189        
;;;190        RMP_PRINTK_S("Mailbox-ISR: ");
000186  a01f              ADR      r0,|L2.516|
000188  f7fffffe          BL       RMP_Print_String
;;;191        Mailbox_ISR_Time=Temp/10000;
00018c  68a0              LDR      r0,[r4,#8]  ; Temp
00018e  fbb0f0f5          UDIV     r0,r0,r5
000192  61a0              STR      r0,[r4,#0x18]  ; Mailbox_ISR_Time
;;;192        RMP_PRINTK_I(Mailbox_ISR_Time);
000194  69a0              LDR      r0,[r4,#0x18]  ; Mailbox_ISR_Time
000196  f7fffffe          BL       RMP_Print_Int
;;;193        RMP_PRINTK_S(" cycles.\r\n");
00019a  a00b              ADR      r0,|L2.456|
00019c  f7fffffe          BL       RMP_Print_String
;;;194        RMP_PRINTK_S("Semaphore-ISR: ");
0001a0  a01c              ADR      r0,|L2.532|
0001a2  f7fffffe          BL       RMP_Print_String
;;;195        Semaphore_ISR_Time=Total/10000;
0001a6  6860              LDR      r0,[r4,#4]  ; Total
0001a8  fbb0f0f5          UDIV     r0,r0,r5
0001ac  61e0              STR      r0,[r4,#0x1c]  ; Semaphore_ISR_Time
;;;196        RMP_PRINTK_I(Semaphore_ISR_Time);
0001ae  69e0              LDR      r0,[r4,#0x1c]  ; Semaphore_ISR_Time
0001b0  f7fffffe          BL       RMP_Print_Int
;;;197        RMP_PRINTK_S(" cycles.\r\n");
0001b4  a004              ADR      r0,|L2.456|
0001b6  f7fffffe          BL       RMP_Print_String
                  |L2.442|
;;;198        
;;;199        while(1);
0001ba  e7fe              B        |L2.442|
;;;200    }
;;;201    /* End Function:Func_2 *******************************************************/
                          ENDP

                  |L2.444|
                          DCD      ||.data||
                  |L2.448|
0001c0  5969656c          DCB      "Yield: ",0
0001c4  643a2000
                  |L2.456|
0001c8  20637963          DCB      " cycles.\r\n",0
0001cc  6c65732e
0001d0  0d0a00  
0001d3  00                DCB      0
                  |L2.468|
                          DCD      0x000186a0
                  |L2.472|
                          DCD      ||.bss||+0x850
                  |L2.476|
0001dc  4d61696c          DCB      "Mailbox: ",0
0001e0  626f783a
0001e4  2000    
0001e6  00                DCB      0
0001e7  00                DCB      0
                  |L2.488|
                          DCD      ||.bss||+0x88c
                  |L2.492|
0001ec  53656d61          DCB      "Semaphore: ",0
0001f0  70686f72
0001f4  653a2000
                  |L2.504|
                          DCD      0x40000800
                  |L2.508|
                          DCD      ||.bss||+0xa
                  |L2.512|
                          DCD      0xe000e01e
                  |L2.516|
000204  4d61696c          DCB      "Mailbox-ISR: ",0
000208  626f782d
00020c  4953523a
000210  2000    
000212  00                DCB      0
000213  00                DCB      0
                  |L2.532|
000214  53656d61          DCB      "Semaphore-ISR: ",0
000218  70686f72
00021c  652d4953
000220  523a2000

                          AREA ||i.Int_Disable||, CODE, READONLY, ALIGN=1

                  Int_Disable PROC
;;;96     ******************************************************************************/
;;;97     void Int_Disable(void)
000000  f04f21e0          MOV      r1,#0xe000e000
000004  f04f4080          MOV      r0,#0x40000000
000008  f8c10180          STR      r0,[r1,#0x180]
00000c  f3bf8f4f          DSB      
000010  f3bf8f6f          ISB      
;;;98     {
;;;99         /* Disable timer 4 interrupt */
;;;100        NVIC_DisableIRQ(TIM4_IRQn);
;;;101    }
000014  4770              BX       lr
;;;102    #endif
                          ENDP


                          AREA ||i.Int_Handler||, CODE, READONLY, ALIGN=2

                  Int_Handler PROC
;;;208    ******************************************************************************/
;;;209    void Int_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;210    {
;;;211        static cnt_t Count=0;
;;;212        
;;;213        if(Count<10000)
000002  4c1e              LDR      r4,|L4.124|
000004  f2427310          MOV      r3,#0x2710
;;;214        {
;;;215            Count++;
;;;216            Start=COUNTER_READ();
000008  0699              LSLS     r1,r3,#26
00000a  6ae2              LDR      r2,[r4,#0x2c]         ;215  ; Count
00000c  1c50              ADDS     r0,r2,#1              ;215
00000e  429a              CMP      r2,r3                 ;213
000010  da13              BGE      |L4.58|
000012  62e0              STR      r0,[r4,#0x2c]  ; Count
000014  8c88              LDRH     r0,[r1,#0x24]
000016  8020              STRH     r0,[r4,#0]
;;;217            if(RMP_Thd_Snd_ISR(&Thd_2, 1)<0)
000018  2101              MOVS     r1,#1
00001a  4819              LDR      r0,|L4.128|
00001c  f7fffffe          BL       RMP_Thd_Snd_ISR
000020  2800              CMP      r0,#0
;;;218            {
;;;219                RMP_PRINTK_S("ISR Mailbox send failure: ");
;;;220                RMP_PRINTK_I(Count);
;;;221                RMP_PRINTK_S(" sends.\r\n");
;;;222                while(1);
;;;223            }
;;;224        }
;;;225        else if(Count<20000)
;;;226        {
;;;227            Count++;
;;;228            Start=COUNTER_READ();
;;;229            if(RMP_Sem_Post_ISR(&Sem_1, 1)<0)
;;;230            {
;;;231                RMP_PRINTK_S("ISR semaphore post failure: ");
;;;232                RMP_PRINTK_I(Count);
;;;233                RMP_PRINTK_S(" posts.\r\n");
;;;234                while(1);
;;;235            }
;;;236        }
;;;237        else
;;;238            Int_Disable();
;;;239    }
000022  bfa8              IT       GE
000024  bd10              POPGE    {r4,pc}
000026  a017              ADR      r0,|L4.132|
000028  f7fffffe          BL       RMP_Print_String
00002c  6ae0              LDR      r0,[r4,#0x2c]         ;220  ; Count
00002e  f7fffffe          BL       RMP_Print_Int
000032  a01b              ADR      r0,|L4.160|
000034  f7fffffe          BL       RMP_Print_String
                  |L4.56|
000038  e7fe              B        |L4.56|
                  |L4.58|
00003a  f6446320          MOV      r3,#0x4e20            ;225
00003e  429a              CMP      r2,r3                 ;225
000040  da13              BGE      |L4.106|
000042  62e0              STR      r0,[r4,#0x2c]         ;228  ; Count
000044  8c88              LDRH     r0,[r1,#0x24]         ;228
000046  8020              STRH     r0,[r4,#0]            ;228
000048  2101              MOVS     r1,#1                 ;229
00004a  4818              LDR      r0,|L4.172|
00004c  f7fffffe          BL       RMP_Sem_Post_ISR
000050  2800              CMP      r0,#0                 ;229
000052  bfa8              IT       GE
000054  bd10              POPGE    {r4,pc}
000056  a016              ADR      r0,|L4.176|
000058  f7fffffe          BL       RMP_Print_String
00005c  6ae0              LDR      r0,[r4,#0x2c]         ;232  ; Count
00005e  f7fffffe          BL       RMP_Print_Int
000062  a01b              ADR      r0,|L4.208|
000064  f7fffffe          BL       RMP_Print_String
                  |L4.104|
000068  e7fe              B        |L4.104|
                  |L4.106|
00006a  f04f20e0          MOV      r0,#0xe000e000        ;234
00006e  f8c01180          STR      r1,[r0,#0x180]        ;234
000072  f3bf8f4f          DSB                            ;234
000076  f3bf8f6f          ISB                            ;234
00007a  bd10              POP      {r4,pc}
;;;240    #endif
                          ENDP

                  |L4.124|
                          DCD      ||.data||
                  |L4.128|
                          DCD      ||.bss||+0x850
                  |L4.132|
000084  49535220          DCB      "ISR Mailbox send failure: ",0
000088  4d61696c
00008c  626f7820
000090  73656e64
000094  20666169
000098  6c757265
00009c  3a2000  
00009f  00                DCB      0
                  |L4.160|
0000a0  2073656e          DCB      " sends.\r\n",0
0000a4  64732e0d
0000a8  0a00    
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L4.172|
                          DCD      ||.bss||+0x88c
                  |L4.176|
0000b0  49535220          DCB      "ISR semaphore post failure: ",0
0000b4  73656d61
0000b8  70686f72
0000bc  6520706f
0000c0  73742066
0000c4  61696c75
0000c8  72653a20
0000cc  00      
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L4.208|
0000d0  20706f73          DCB      " posts.\r\n",0
0000d4  74732e0d
0000d8  0a00    
0000da  00                DCB      0
0000db  00                DCB      0

                          AREA ||i.Int_Init||, CODE, READONLY, ALIGN=2

                  Int_Init PROC
;;;62     ******************************************************************************/
;;;63     void Int_Init(void)
000000  b510              PUSH     {r4,lr}
;;;64     {
;;;65         /* TIM4 clock = CPU clock */
;;;66         RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;67         TIM_DeInit(TIM4);
00000a  4c13              LDR      r4,|L5.88|
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIM_DeInit
;;;68         TIM4_Handle.TIM_Period=7200; 
000012  4912              LDR      r1,|L5.92|
000014  f44f50e1          MOV      r0,#0x1c20
;;;69         TIM4_Handle.TIM_Prescaler=0;
000018  2200              MOVS     r2,#0
00001a  8088              STRH     r0,[r1,#4]            ;68
00001c  800a              STRH     r2,[r1,#0]
;;;70         TIM4_Handle.TIM_ClockDivision=TIM_CKD_DIV1;
00001e  80ca              STRH     r2,[r1,#6]
;;;71         TIM4_Handle.TIM_CounterMode=TIM_CounterMode_Down;
000020  2010              MOVS     r0,#0x10
000022  8048              STRH     r0,[r1,#2]
;;;72         TIM_TimeBaseInit(TIM4, &TIM4_Handle);     
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       TIM_TimeBaseInit
;;;73         TIM_ClearFlag(TIM4, TIM_FLAG_Update); 
00002a  2101              MOVS     r1,#1
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       TIM_ClearFlag
;;;74         TIM_ITConfig(TIM4,TIM_IT_Update,ENABLE);
000032  2201              MOVS     r2,#1
000034  4611              MOV      r1,r2
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       TIM_ITConfig
;;;75         TIM_Cmd(TIM4, ENABLE);
00003c  2101              MOVS     r1,#1
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       TIM_Cmd
000044  4906              LDR      r1,|L5.96|
000046  20f0              MOVS     r0,#0xf0
000048  f8810400          STRB     r0,[r1,#0x400]
00004c  f04f21e0          MOV      r1,#0xe000e000
000050  04e0              LSLS     r0,r4,#19
000052  f8c10100          STR      r0,[r1,#0x100]
;;;76         
;;;77         /* Enable Timer 4 IRQ */
;;;78         NVIC_SetPriority(TIM4_IRQn, 0xFF);
;;;79         NVIC_EnableIRQ(TIM4_IRQn);
;;;80     }
000056  bd10              POP      {r4,pc}
;;;81     
                          ENDP

                  |L5.88|
                          DCD      0x40000800
                  |L5.92|
                          DCD      ||.bss||+0xa
                  |L5.96|
                          DCD      0xe000e01e

                          AREA ||i.RMP_Init_Hook||, CODE, READONLY, ALIGN=2

                  RMP_Init_Hook PROC
;;;248    ******************************************************************************/
;;;249    void RMP_Init_Hook(void)
000000  b530              PUSH     {r4,r5,lr}
000002  2101              MOVS     r1,#1
;;;250    {
000004  b083              SUB      sp,sp,#0xc
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
00000c  f04f4080          MOV      r0,#0x40000000
000010  f7fffffe          BL       TIM_DeInit
000014  481e              LDR      r0,|L6.144|
000016  f64f71ff          MOV      r1,#0xffff
00001a  8081              STRH     r1,[r0,#4]
00001c  2100              MOVS     r1,#0
00001e  8001              STRH     r1,[r0,#0]
000020  80c1              STRH     r1,[r0,#6]
000022  8041              STRH     r1,[r0,#2]
000024  4601              MOV      r1,r0
000026  f04f4080          MOV      r0,#0x40000000
00002a  f7fffffe          BL       TIM_TimeBaseInit
00002e  2101              MOVS     r1,#1
000030  0788              LSLS     r0,r1,#30
000032  f7fffffe          BL       TIM_ClearFlag
000036  2101              MOVS     r1,#1
000038  0788              LSLS     r0,r1,#30
00003a  f7fffffe          BL       TIM_Cmd
;;;251    #ifndef MINIMAL_SIZE
;;;252        /* Init the timer */
;;;253        Timer_Init();
;;;254        /* Clean up the structures */
;;;255        RMP_Clear(&Thd_1,sizeof(struct RMP_Thd));
00003e  213c              MOVS     r1,#0x3c
000040  4814              LDR      r0,|L6.148|
000042  f7fffffe          BL       RMP_Clear
;;;256        RMP_Clear(&Thd_2,sizeof(struct RMP_Thd));
000046  213c              MOVS     r1,#0x3c
000048  4813              LDR      r0,|L6.152|
00004a  f7fffffe          BL       RMP_Clear
;;;257        RMP_Clear(&Sem_1,sizeof(struct RMP_Sem));
00004e  2110              MOVS     r1,#0x10
000050  4812              LDR      r0,|L6.156|
000052  f7fffffe          BL       RMP_Clear
;;;258        /* Create counting semaphore */
;;;259        RMP_Sem_Crt(&Sem_1,0);
000056  2100              MOVS     r1,#0
000058  4810              LDR      r0,|L6.156|
00005a  f7fffffe          BL       RMP_Sem_Crt
;;;260        /* Start threads */
;;;261        RMP_Thd_Crt(&Thd_1, Func_1, THD1_STACK, (void*)0x1234, 1, 5);
00005e  2405              MOVS     r4,#5
000060  2501              MOVS     r5,#1
000062  4a0f              LDR      r2,|L6.160|
000064  e9cd5400          STRD     r5,r4,[sp,#0]
000068  f2412334          MOV      r3,#0x1234
00006c  490d              LDR      r1,|L6.164|
00006e  f502608d          ADD      r0,r2,#0x468
000072  f7fffffe          BL       RMP_Thd_Crt
;;;262        RMP_Thd_Crt(&Thd_2, Func_2, THD2_STACK, (void*)0x4321, 1, 5);
000076  4a0c              LDR      r2,|L6.168|
000078  e9cd5400          STRD     r5,r4,[sp,#0]
00007c  f2443321          MOV      r3,#0x4321
000080  490a              LDR      r1,|L6.172|
000082  f10200a4          ADD      r0,r2,#0xa4
000086  f7fffffe          BL       RMP_Thd_Crt
;;;263    #endif
;;;264    }
00008a  b003              ADD      sp,sp,#0xc
00008c  bd30              POP      {r4,r5,pc}
;;;265    
                          ENDP

00008e  0000              DCW      0x0000
                  |L6.144|
                          DCD      ||.bss||
                  |L6.148|
                          DCD      ||.bss||+0x814
                  |L6.152|
                          DCD      ||.bss||+0x850
                  |L6.156|
                          DCD      ||.bss||+0x88c
                  |L6.160|
                          DCD      ||.bss||+0x3ac
                  |L6.164|
                          DCD      Func_1
                  |L6.168|
                          DCD      ||.bss||+0x7ac
                  |L6.172|
                          DCD      Func_2

                          AREA ||i.RMP_Init_Idle||, CODE, READONLY, ALIGN=1

                  RMP_Init_Idle PROC
;;;265    
;;;266    void RMP_Init_Idle(void)
000000  4770              BX       lr
;;;267    {
;;;268        return;
;;;269    }
;;;270    /* End Function:RMP_Init *****************************************************/
                          ENDP


                          AREA ||i.TIM4_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM4_IRQHandler PROC
;;;82     /* The interrupt handler */
;;;83     void TIM4_IRQHandler(void)
000000  4902              LDR      r1,|L8.12|
;;;84     {
;;;85         TIM4->SR=~TIM_FLAG_Update;
000002  f64f70fe          MOV      r0,#0xfffe
000006  8008              STRH     r0,[r1,#0]
;;;86         Int_Handler();
000008  f7ffbffe          B.W      Int_Handler
;;;87     }
;;;88     /* End Function:Int_Init *****************************************************/
                          ENDP

                  |L8.12|
                          DCD      0x40000810

                          AREA ||i.Test_Mail_1||, CODE, READONLY, ALIGN=2

                  Test_Mail_1 PROC
;;;49     
;;;50     void Test_Mail_1(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;51     {
;;;52         static cnt_t Count;
;;;53         for(Count=0;Count<10000;Count++)
000004  4c0a              LDR      r4,|L9.48|
000006  2000              MOVS     r0,#0
;;;54         {
;;;55             /* Read counter here */
;;;56             Start=COUNTER_READ();
;;;57             RMP_Thd_Snd(&Thd_2, 1, RMP_MAX_SLICES);
000008  4f0a              LDR      r7,|L9.52|
00000a  f04f4580          MOV      r5,#0x40000000        ;56
00000e  f2427610          MOV      r6,#0x2710            ;53
000012  6220              STR      r0,[r4,#0x20]         ;53  ; Count
                  |L9.20|
000014  8ca8              LDRH     r0,[r5,#0x24]         ;56
000016  8020              STRH     r0,[r4,#0]            ;56
000018  463a              MOV      r2,r7
00001a  2101              MOVS     r1,#1
00001c  4806              LDR      r0,|L9.56|
00001e  f7fffffe          BL       RMP_Thd_Snd
000022  6a20              LDR      r0,[r4,#0x20]         ;53  ; Count
000024  1c40              ADDS     r0,r0,#1              ;53
000026  6220              STR      r0,[r4,#0x20]         ;53  ; Count
000028  42b0              CMP      r0,r6                 ;53
00002a  dbf3              BLT      |L9.20|
;;;58         }
;;;59     }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;60     
                          ENDP

                  |L9.48|
                          DCD      ||.data||
                  |L9.52|
                          DCD      0x000186a0
                  |L9.56|
                          DCD      ||.bss||+0x850

                          AREA ||i.Test_Mail_2||, CODE, READONLY, ALIGN=2

                  Test_Mail_2 PROC
;;;100    
;;;101    void Test_Mail_2(void)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;102    {
;;;103        ptr_t Data;
;;;104        cnt_t Count;
;;;105        for(Count=0;Count<10000;Count++)
;;;106        {
;;;107            RMP_Thd_Rcv(&Data, RMP_MAX_SLICES);
000004  f8df8030          LDR      r8,|L10.56|
;;;108            /* Read counter here */
;;;109            End=COUNTER_READ();
000008  4c0c              LDR      r4,|L10.60|
00000a  2500              MOVS     r5,#0                 ;105
00000c  f04f4680          MOV      r6,#0x40000000
000010  f2427710          MOV      r7,#0x2710            ;105
                  |L10.20|
000014  4641              MOV      r1,r8                 ;107
000016  4668              MOV      r0,sp                 ;107
000018  f7fffffe          BL       RMP_Thd_Rcv
00001c  8cb0              LDRH     r0,[r6,#0x24]
00001e  8060              STRH     r0,[r4,#2]
;;;110            Total+=(tim_t)(End-Start);
000020  8860              LDRH     r0,[r4,#2]  ; End
000022  8821              LDRH     r1,[r4,#0]  ; Start
000024  1a40              SUBS     r0,r0,r1
000026  6861              LDR      r1,[r4,#4]  ; Total
000028  b280              UXTH     r0,r0
00002a  4408              ADD      r0,r0,r1
00002c  6060              STR      r0,[r4,#4]  ; Total
00002e  1c6d              ADDS     r5,r5,#1
000030  42bd              CMP      r5,r7                 ;105
000032  dbef              BLT      |L10.20|
;;;111        };
;;;112    }
000034  e8bd83f8          POP      {r3-r9,pc}
;;;113    
                          ENDP

                  |L10.56|
                          DCD      0x000186a0
                  |L10.60|
                          DCD      ||.data||

                          AREA ||i.Test_Mail_ISR||, CODE, READONLY, ALIGN=2

                  Test_Mail_ISR PROC
;;;125    
;;;126    void Test_Mail_ISR(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;127    {
;;;128        ptr_t Data;
;;;129        static cnt_t Count;
;;;130        for(Count=0;Count<10000;Count++)
000002  4c0d              LDR      r4,|L11.56|
000004  2000              MOVS     r0,#0
;;;131        {
;;;132            RMP_Thd_Rcv(&Data, RMP_MAX_SLICES);
000006  4f0d              LDR      r7,|L11.60|
000008  f2427510          MOV      r5,#0x2710            ;130
;;;133            /* Read counter here */
;;;134            End=COUNTER_READ();
00000c  067e              LSLS     r6,r7,#25
00000e  6260              STR      r0,[r4,#0x24]         ;130  ; Count
                  |L11.16|
000010  4639              MOV      r1,r7                 ;132
000012  4668              MOV      r0,sp                 ;132
000014  f7fffffe          BL       RMP_Thd_Rcv
000018  8cb0              LDRH     r0,[r6,#0x24]
00001a  8060              STRH     r0,[r4,#2]
;;;135            Total+=(tim_t)(End-Start);
00001c  8860              LDRH     r0,[r4,#2]  ; End
00001e  8821              LDRH     r1,[r4,#0]  ; Start
000020  1a40              SUBS     r0,r0,r1
000022  6861              LDR      r1,[r4,#4]  ; Total
000024  b280              UXTH     r0,r0
000026  4408              ADD      r0,r0,r1
000028  6060              STR      r0,[r4,#4]  ; Total
00002a  6a60              LDR      r0,[r4,#0x24]         ;130  ; Count
00002c  1c40              ADDS     r0,r0,#1              ;130
00002e  6260              STR      r0,[r4,#0x24]         ;130  ; Count
000030  42a8              CMP      r0,r5                 ;130
000032  dbed              BLT      |L11.16|
;;;136        };
;;;137    }
000034  bdf8              POP      {r3-r7,pc}
;;;138    
                          ENDP

000036  0000              DCW      0x0000
                  |L11.56|
                          DCD      ||.data||
                  |L11.60|
                          DCD      0x000186a0

                          AREA ||i.Test_Sem_1||, CODE, READONLY, ALIGN=2

                  Test_Sem_1 PROC
;;;60     
;;;61     void Test_Sem_1(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;62     {
;;;63         cnt_t Count;
;;;64         for(Count=0;Count<10000;Count++)
;;;65         {
;;;66             /* Read counter here */
;;;67             Start=COUNTER_READ();
000004  4f08              LDR      r7,|L12.40|
000006  2400              MOVS     r4,#0                 ;64
000008  f04f4580          MOV      r5,#0x40000000
00000c  f2427610          MOV      r6,#0x2710            ;64
                  |L12.16|
000010  8ca8              LDRH     r0,[r5,#0x24]
000012  8038              STRH     r0,[r7,#0]
;;;68             RMP_Sem_Post(&Sem_1, 1);
000014  2101              MOVS     r1,#1
000016  4805              LDR      r0,|L12.44|
000018  f7fffffe          BL       RMP_Sem_Post
00001c  1c64              ADDS     r4,r4,#1
00001e  42b4              CMP      r4,r6                 ;64
000020  dbf6              BLT      |L12.16|
;;;69         }
;;;70     }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;71     
                          ENDP

000026  0000              DCW      0x0000
                  |L12.40|
                          DCD      ||.data||
                  |L12.44|
                          DCD      ||.bss||+0x88c

                          AREA ||i.Test_Sem_2||, CODE, READONLY, ALIGN=2

                  Test_Sem_2 PROC
;;;113    
;;;114    void Test_Sem_2(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;115    {
;;;116        cnt_t Count;
;;;117        for(Count=0;Count<10000;Count++)
;;;118        {
;;;119            RMP_Sem_Pend(&Sem_1, RMP_MAX_SLICES);
000004  f8df8030          LDR      r8,|L13.56|
;;;120            /* Read counter here */
;;;121            End=COUNTER_READ();
000008  4c0c              LDR      r4,|L13.60|
00000a  2500              MOVS     r5,#0                 ;117
00000c  f04f4680          MOV      r6,#0x40000000
000010  f2427710          MOV      r7,#0x2710            ;117
                  |L13.20|
000014  4641              MOV      r1,r8                 ;119
000016  480a              LDR      r0,|L13.64|
000018  f7fffffe          BL       RMP_Sem_Pend
00001c  8cb0              LDRH     r0,[r6,#0x24]
00001e  8060              STRH     r0,[r4,#2]
;;;122            Total+=(tim_t)(End-Start);
000020  8860              LDRH     r0,[r4,#2]  ; End
000022  8821              LDRH     r1,[r4,#0]  ; Start
000024  1a40              SUBS     r0,r0,r1
000026  6861              LDR      r1,[r4,#4]  ; Total
000028  b280              UXTH     r0,r0
00002a  4408              ADD      r0,r0,r1
00002c  6060              STR      r0,[r4,#4]  ; Total
00002e  1c6d              ADDS     r5,r5,#1
000030  42bd              CMP      r5,r7                 ;117
000032  dbef              BLT      |L13.20|
;;;123        };
;;;124    }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;125    
                          ENDP

                  |L13.56|
                          DCD      0x000186a0
                  |L13.60|
                          DCD      ||.data||
                  |L13.64|
                          DCD      ||.bss||+0x88c

                          AREA ||i.Test_Sem_ISR||, CODE, READONLY, ALIGN=2

                  Test_Sem_ISR PROC
;;;138    
;;;139    void Test_Sem_ISR(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;140    {
;;;141        static cnt_t Count;
;;;142        for(Count=0;Count<10000;Count++)
000004  4c0d              LDR      r4,|L14.60|
000006  2000              MOVS     r0,#0
;;;143        {
;;;144            RMP_Sem_Pend(&Sem_1, RMP_MAX_SLICES);
000008  4f0d              LDR      r7,|L14.64|
00000a  f2427510          MOV      r5,#0x2710            ;142
;;;145            /* Read counter here */
;;;146            End=COUNTER_READ();
00000e  067e              LSLS     r6,r7,#25
000010  62a0              STR      r0,[r4,#0x28]         ;142  ; Count
                  |L14.18|
000012  4639              MOV      r1,r7                 ;144
000014  480b              LDR      r0,|L14.68|
000016  f7fffffe          BL       RMP_Sem_Pend
00001a  8cb0              LDRH     r0,[r6,#0x24]
00001c  8060              STRH     r0,[r4,#2]
;;;147            Total+=(tim_t)(End-Start);
00001e  8860              LDRH     r0,[r4,#2]  ; End
000020  8821              LDRH     r1,[r4,#0]  ; Start
000022  1a40              SUBS     r0,r0,r1
000024  6861              LDR      r1,[r4,#4]  ; Total
000026  b280              UXTH     r0,r0
000028  4408              ADD      r0,r0,r1
00002a  6060              STR      r0,[r4,#4]  ; Total
00002c  6aa0              LDR      r0,[r4,#0x28]         ;142  ; Count
00002e  1c40              ADDS     r0,r0,#1              ;142
000030  62a0              STR      r0,[r4,#0x28]         ;142  ; Count
000032  42a8              CMP      r0,r5                 ;142
000034  dbed              BLT      |L14.18|
;;;148        };
;;;149    }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;150    
                          ENDP

00003a  0000              DCW      0x0000
                  |L14.60|
                          DCD      ||.data||
                  |L14.64|
                          DCD      0x000186a0
                  |L14.68|
                          DCD      ||.bss||+0x88c

                          AREA ||i.Test_Yield_1||, CODE, READONLY, ALIGN=2

                  Test_Yield_1 PROC
;;;38     ******************************************************************************/
;;;39     void Test_Yield_1(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;40     {
;;;41         cnt_t Count;
;;;42         for(Count=0;Count<10000;Count++)
;;;43         {
;;;44             /* Read counter here */
;;;45             Start=COUNTER_READ();
000004  4f07              LDR      r7,|L15.36|
000006  2400              MOVS     r4,#0                 ;42
000008  f04f4580          MOV      r5,#0x40000000
00000c  f2427610          MOV      r6,#0x2710            ;42
                  |L15.16|
000010  8ca8              LDRH     r0,[r5,#0x24]
000012  8038              STRH     r0,[r7,#0]
;;;46             RMP_Yield();
000014  f7fffffe          BL       RMP_Yield
000018  1c64              ADDS     r4,r4,#1
00001a  42b4              CMP      r4,r6                 ;42
00001c  dbf8              BLT      |L15.16|
;;;47         }
;;;48     }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;49     
                          ENDP

000022  0000              DCW      0x0000
                  |L15.36|
                          DCD      ||.data||

                          AREA ||i.Test_Yield_2||, CODE, READONLY, ALIGN=2

                  Test_Yield_2 PROC
;;;88     ******************************************************************************/
;;;89     void Test_Yield_2(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;90     {
;;;91         cnt_t Count;
;;;92         for(Count=0;Count<10000;Count++)
000004  2500              MOVS     r5,#0
;;;93         {
;;;94             RMP_Yield();
;;;95             /* Read counter here */
;;;96             End=COUNTER_READ();
000006  f04f4780          MOV      r7,#0x40000000
00000a  4c09              LDR      r4,|L16.48|
00000c  f2427610          MOV      r6,#0x2710            ;92
                  |L16.16|
000010  f7fffffe          BL       RMP_Yield
000014  8cb8              LDRH     r0,[r7,#0x24]
000016  8060              STRH     r0,[r4,#2]
;;;97             Total+=(tim_t)(End-Start);
000018  8860              LDRH     r0,[r4,#2]  ; End
00001a  8821              LDRH     r1,[r4,#0]  ; Start
00001c  1a40              SUBS     r0,r0,r1
00001e  6861              LDR      r1,[r4,#4]  ; Total
000020  b280              UXTH     r0,r0
000022  4408              ADD      r0,r0,r1
000024  6060              STR      r0,[r4,#4]  ; Total
000026  1c6d              ADDS     r5,r5,#1
000028  42b5              CMP      r5,r6                 ;92
00002a  dbf1              BLT      |L16.16|
;;;98         };
;;;99     }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;100    
                          ENDP

                  |L16.48|
                          DCD      ||.data||

                          AREA ||i.Timer_Init||, CODE, READONLY, ALIGN=2

                  Timer_Init PROC
;;;40     ******************************************************************************/
;;;41     void Timer_Init(void)
000000  b510              PUSH     {r4,lr}
;;;42     {
;;;43         /* TIM2 clock = CPU clock */
;;;44         RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;45         TIM_DeInit(TIM2);
00000a  f04f4080          MOV      r0,#0x40000000
00000e  f7fffffe          BL       TIM_DeInit
;;;46         TIM2_Handle.TIM_Period=65535; 
000012  480b              LDR      r0,|L17.64|
000014  f64f71ff          MOV      r1,#0xffff
000018  8081              STRH     r1,[r0,#4]
;;;47         TIM2_Handle.TIM_Prescaler=0;
00001a  2100              MOVS     r1,#0
00001c  8001              STRH     r1,[r0,#0]
;;;48         TIM2_Handle.TIM_ClockDivision=TIM_CKD_DIV1;
00001e  80c1              STRH     r1,[r0,#6]
;;;49         TIM2_Handle.TIM_CounterMode=TIM_CounterMode_Up;
000020  8041              STRH     r1,[r0,#2]
;;;50         TIM_TimeBaseInit(TIM2, &TIM2_Handle);     
000022  4601              MOV      r1,r0
000024  f04f4080          MOV      r0,#0x40000000
000028  f7fffffe          BL       TIM_TimeBaseInit
;;;51         TIM_ClearFlag(TIM2, TIM_FLAG_Update); 
00002c  2101              MOVS     r1,#1
00002e  0788              LSLS     r0,r1,#30
000030  f7fffffe          BL       TIM_ClearFlag
;;;52         TIM_Cmd(TIM2, ENABLE);
000034  2101              MOVS     r1,#1
000036  e8bd4010          POP      {r4,lr}
00003a  0788              LSLS     r0,r1,#30
00003c  f7ffbffe          B.W      TIM_Cmd
;;;53     }
;;;54     /* End Function:Timer_Init ***************************************************/
                          ENDP

                  |L17.64|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  TIM2_Handle
                          %        10
                  TIM4_Handle
                          %        10
                  Stack_1
                          %        1024
                  Stack_2
                          %        1024
                  Thd_1
                          %        60
                  Thd_2
                          %        60
                  Sem_1
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  Start
000000  0000              DCW      0x0000
                  End
000002  0000              DCW      0x0000
                  Total
                          DCD      0x00000000
                  Temp
                          DCD      0x00000000
                  Yield_Time
                          DCD      0x00000000
                  Mailbox_Time
                          DCD      0x00000000
                  Semaphore_Time
                          DCD      0x00000000
                  Mailbox_ISR_Time
                          DCD      0x00000000
                  Semaphore_ISR_Time
                          DCD      0x00000000
                  Count
                          DCD      0x00000000
                  |symbol_number.55|
                          DCD      0x00000000
                  |symbol_number.56|
                          DCD      0x00000000
                  |symbol_number.57|
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\MProkaron\\Benchmark\\test.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_test_c_db099e62____REV16|
#line 464 "D:\\Program_Files_x86\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_test_c_db099e62____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_test_c_db099e62____REVSH|
#line 479
|__asm___6_test_c_db099e62____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_test_c_db099e62____RRX|
#line 666
|__asm___6_test_c_db099e62____RRX| PROC
#line 667

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
