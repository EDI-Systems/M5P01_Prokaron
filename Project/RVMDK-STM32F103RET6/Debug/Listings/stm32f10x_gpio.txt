; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f10x_gpio.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f10x_gpio.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32F10x_StdPeriph_Lib_V3.3.0\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\M0P0_Library\STM32F10x_StdPeriph_Lib_V3.3.0\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\..\M0P0_Library\STM32F10x_StdPeriph_Lib_V3.3.0\Libraries\CMSIS -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F103RET6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f10x_gpio.crf ..\..\..\M0P0_Library\STM32F10x_StdPeriph_Lib_V3.3.0\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_gpio.c]
                          THUMB

                          AREA ||i.GPIO_AFIODeInit||, CODE, READONLY, ALIGN=1

                  GPIO_AFIODeInit PROC
;;;157      */
;;;158    void GPIO_AFIODeInit(void)
000000  b510              PUSH     {r4,lr}
;;;159    {
;;;160      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;161      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  e8bd4010          POP      {r4,lr}
000010  2001              MOVS     r0,#1
000012  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
;;;162    }
;;;163    
                          ENDP


                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=1

                  GPIO_DeInit PROC
;;;106      */
;;;107    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  b510              PUSH     {r4,lr}
;;;108    {
;;;109      /* Check the parameters */
;;;110      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;111      
;;;112      if (GPIOx == GPIOA)
000002  f1a04180          SUB      r1,r0,#0x40000000
000006  f5b13184          SUBS     r1,r1,#0x10800
00000a  d01d              BEQ      |L2.72|
;;;113      {
;;;114        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
;;;115        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
;;;116      }
;;;117      else if (GPIOx == GPIOB)
00000c  f5b16180          SUBS     r1,r1,#0x400
000010  d024              BEQ      |L2.92|
;;;118      {
;;;119        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
;;;120        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
;;;121      }
;;;122      else if (GPIOx == GPIOC)
000012  f5b16180          SUBS     r1,r1,#0x400
000016  d02b              BEQ      |L2.112|
;;;123      {
;;;124        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
;;;125        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
;;;126      }
;;;127      else if (GPIOx == GPIOD)
000018  f5b16180          SUBS     r1,r1,#0x400
00001c  d032              BEQ      |L2.132|
;;;128      {
;;;129        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
;;;130        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
;;;131      }    
;;;132      else if (GPIOx == GPIOE)
00001e  f5b16180          SUBS     r1,r1,#0x400
000022  d039              BEQ      |L2.152|
;;;133      {
;;;134        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
;;;135        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
;;;136      } 
;;;137      else if (GPIOx == GPIOF)
000024  f5b16180          SUBS     r1,r1,#0x400
000028  d040              BEQ      |L2.172|
;;;138      {
;;;139        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
;;;140        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
;;;141      }
;;;142      else
;;;143      {
;;;144        if (GPIOx == GPIOG)
00002a  f5b16180          SUBS     r1,r1,#0x400
;;;145        {
;;;146          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
;;;147          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
;;;148        }
;;;149      }
;;;150    }
00002e  bf18              IT       NE
000030  bd10              POPNE    {r4,pc}
000032  2101              MOVS     r1,#1                 ;146
000034  0208              LSLS     r0,r1,#8              ;146
000036  f7fffffe          BL       RCC_APB2PeriphResetCmd
00003a  e8bd4010          POP      {r4,lr}               ;147
00003e  2100              MOVS     r1,#0                 ;147
000040  f44f7080          MOV      r0,#0x100             ;147
000044  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L2.72|
000048  2101              MOVS     r1,#1                 ;114
00004a  2004              MOVS     r0,#4                 ;114
00004c  f7fffffe          BL       RCC_APB2PeriphResetCmd
000050  2100              MOVS     r1,#0                 ;115
000052  e8bd4010          POP      {r4,lr}               ;115
000056  2004              MOVS     r0,#4                 ;115
000058  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L2.92|
00005c  2101              MOVS     r1,#1                 ;119
00005e  2008              MOVS     r0,#8                 ;119
000060  f7fffffe          BL       RCC_APB2PeriphResetCmd
000064  2100              MOVS     r1,#0                 ;120
000066  e8bd4010          POP      {r4,lr}               ;120
00006a  2008              MOVS     r0,#8                 ;120
00006c  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L2.112|
000070  2101              MOVS     r1,#1                 ;124
000072  2010              MOVS     r0,#0x10              ;124
000074  f7fffffe          BL       RCC_APB2PeriphResetCmd
000078  2100              MOVS     r1,#0                 ;125
00007a  e8bd4010          POP      {r4,lr}               ;125
00007e  2010              MOVS     r0,#0x10              ;125
000080  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L2.132|
000084  2101              MOVS     r1,#1                 ;129
000086  2020              MOVS     r0,#0x20              ;129
000088  f7fffffe          BL       RCC_APB2PeriphResetCmd
00008c  2100              MOVS     r1,#0                 ;130
00008e  e8bd4010          POP      {r4,lr}               ;130
000092  2020              MOVS     r0,#0x20              ;130
000094  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L2.152|
000098  2101              MOVS     r1,#1                 ;134
00009a  2040              MOVS     r0,#0x40              ;134
00009c  f7fffffe          BL       RCC_APB2PeriphResetCmd
0000a0  2100              MOVS     r1,#0                 ;135
0000a2  e8bd4010          POP      {r4,lr}               ;135
0000a6  2040              MOVS     r0,#0x40              ;135
0000a8  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L2.172|
0000ac  2101              MOVS     r1,#1                 ;139
0000ae  2080              MOVS     r0,#0x80              ;139
0000b0  f7fffffe          BL       RCC_APB2PeriphResetCmd
0000b4  2100              MOVS     r1,#0                 ;140
0000b6  e8bd4010          POP      {r4,lr}               ;140
0000ba  2080              MOVS     r0,#0x80              ;140
0000bc  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
;;;151    
                          ENDP


                          AREA ||i.GPIO_ETH_MediaInterfaceConfig||, CODE, READONLY, ALIGN=2

                  GPIO_ETH_MediaInterfaceConfig PROC
;;;621      */
;;;622    void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
000000  4901              LDR      r1,|L3.8|
;;;623    { 
;;;624      assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 
;;;625    
;;;626      /* Configure MII_RMII selection bit */ 
;;;627      *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
000002  f8c100dc          STR      r0,[r1,#0xdc]
;;;628    }
000006  4770              BX       lr
;;;629      
                          ENDP

                  |L3.8|
                          DCD      0x42200000

                          AREA ||i.GPIO_EXTILineConfig||, CODE, READONLY, ALIGN=1

                  GPIO_EXTILineConfig PROC
;;;600      */
;;;601    void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  078a              LSLS     r2,r1,#30
;;;602    {
;;;603      uint32_t tmp = 0x00;
;;;604      /* Check the parameters */
;;;605      assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
;;;606      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;607      
;;;608      tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
;;;609      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
000002  f0210103          BIC      r1,r1,#3
000006  f1014180          ADD      r1,r1,#0x40000000
00000a  f5013180          ADD      r1,r1,#0x10000
00000e  0f12              LSRS     r2,r2,#28             ;608
000010  230f              MOVS     r3,#0xf               ;608
000012  f8d1c008          LDR      r12,[r1,#8]
000016  4093              LSLS     r3,r3,r2              ;608
000018  ea2c0303          BIC      r3,r12,r3
00001c  608b              STR      r3,[r1,#8]
;;;610      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
00001e  688b              LDR      r3,[r1,#8]
000020  4090              LSLS     r0,r0,r2
000022  4318              ORRS     r0,r0,r3
000024  6088              STR      r0,[r1,#8]
;;;611    }
000026  4770              BX       lr
;;;612    
                          ENDP


                          AREA ||i.GPIO_EventOutputCmd||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputCmd PROC
;;;481      */
;;;482    void GPIO_EventOutputCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L5.8|
;;;483    {
;;;484      /* Check the parameters */
;;;485      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;486      
;;;487      *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
000002  61c8              STR      r0,[r1,#0x1c]
;;;488    }
000004  4770              BX       lr
;;;489    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      0x42200000

                          AREA ||i.GPIO_EventOutputConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputConfig PROC
;;;460      */
;;;461    void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  4a05              LDR      r2,|L6.24|
;;;462    {
;;;463      uint32_t tmpreg = 0x00;
;;;464      /* Check the parameters */
;;;465      assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
;;;466      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;467        
;;;468      tmpreg = AFIO->EVCR;
000002  6813              LDR      r3,[r2,#0]
;;;469      /* Clear the PORT[6:4] and PIN[3:0] bits */
;;;470      tmpreg &= EVCR_PORTPINCONFIG_MASK;
000004  f64f7c80          MOV      r12,#0xff80
000008  ea03030c          AND      r3,r3,r12
;;;471      tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
00000c  ea431000          ORR      r0,r3,r0,LSL #4
;;;472      tmpreg |= GPIO_PinSource;
000010  4308              ORRS     r0,r0,r1
;;;473      AFIO->EVCR = tmpreg;
000012  6010              STR      r0,[r2,#0]
;;;474    }
000014  4770              BX       lr
;;;475    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0x40010000

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=2

                  GPIO_Init PROC
;;;171      */
;;;172    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  e92d03f0          PUSH     {r4-r9}
;;;173    {
;;;174      uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
;;;175      uint32_t tmpreg = 0x00, pinmask = 0x00;
;;;176      /* Check the parameters */
;;;177      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;178      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;179      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
;;;180      
;;;181    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;182      currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
000004  7a0b              LDRB     r3,[r1,#8]
000006  f003020f          AND      r2,r3,#0xf
;;;183      if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
00000a  f0130f10          TST      r3,#0x10
;;;184      { 
;;;185        /* Check the parameters */
;;;186        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;187        /* Output mode */
;;;188        currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
00000e  bf1c              ITT      NE
000010  684b              LDRNE    r3,[r1,#4]
000012  431a              ORRNE    r2,r2,r3
;;;189      }
;;;190    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;191      /* Configure the eight low port pins */
;;;192      if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
000014  780b              LDRB     r3,[r1,#0]
;;;193      {
;;;194        tmpreg = GPIOx->CRL;
;;;195        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
;;;196        {
;;;197          pos = ((uint32_t)0x01) << pinpos;
;;;198          /* Get the port pins position */
;;;199          currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;200          if (currentpin == pos)
;;;201          {
;;;202            pos = pinpos << 2;
;;;203            /* Clear the corresponding low control register bits */
;;;204            pinmask = ((uint32_t)0x0F) << pos;
;;;205            tmpreg &= ~pinmask;
000016  f04f070f          MOV      r7,#0xf
00001a  f0130fff          TST      r3,#0xff              ;192
00001e  f04f0801          MOV      r8,#1                 ;197
000022  d01f              BEQ      |L7.100|
000024  6804              LDR      r4,[r0,#0]            ;194
000026  2300              MOVS     r3,#0                 ;195
000028  f05f0508          MOVS.W   r5,#8                 ;195
                  |L7.44|
00002c  880e              LDRH     r6,[r1,#0]            ;200
00002e  fa08fc03          LSL      r12,r8,r3             ;197
000032  ea3c0606          BICS     r6,r12,r6             ;200
000036  d111              BNE      |L7.92|
000038  009e              LSLS     r6,r3,#2              ;200
00003a  fa07f906          LSL      r9,r7,r6
00003e  ea240409          BIC      r4,r4,r9
;;;206            /* Write the mode configuration in the corresponding bits */
;;;207            tmpreg |= (currentmode << pos);
000042  fa02f606          LSL      r6,r2,r6
000046  4334              ORRS     r4,r4,r6
;;;208            /* Reset the corresponding ODR bit */
;;;209            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
000048  688e              LDR      r6,[r1,#8]
00004a  2e28              CMP      r6,#0x28
;;;210            {
;;;211              GPIOx->BRR = (((uint32_t)0x01) << pinpos);
00004c  bf08              IT       EQ
00004e  f8c0c014          STREQ    r12,[r0,#0x14]
000052  d003              BEQ      |L7.92|
;;;212            }
;;;213            else
;;;214            {
;;;215              /* Set the corresponding ODR bit */
;;;216              if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
000054  2e48              CMP      r6,#0x48
;;;217              {
;;;218                GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
000056  bf08              IT       EQ
000058  f8c0c010          STREQ    r12,[r0,#0x10]
                  |L7.92|
00005c  1c5b              ADDS     r3,r3,#1
00005e  1e6d              SUBS     r5,r5,#1
;;;219              }
;;;220            }
;;;221          }
;;;222        }
000060  d1e4              BNE      |L7.44|
;;;223        GPIOx->CRL = tmpreg;
000062  6004              STR      r4,[r0,#0]
                  |L7.100|
;;;224      }
;;;225    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;226      /* Configure the eight high port pins */
;;;227      if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
000064  880b              LDRH     r3,[r1,#0]
000066  2bff              CMP      r3,#0xff
;;;228      {
;;;229        tmpreg = GPIOx->CRH;
;;;230        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
;;;231        {
;;;232          pos = (((uint32_t)0x01) << (pinpos + 0x08));
;;;233          /* Get the port pins position */
;;;234          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
;;;235          if (currentpin == pos)
;;;236          {
;;;237            pos = pinpos << 2;
;;;238            /* Clear the corresponding high control register bits */
;;;239            pinmask = ((uint32_t)0x0F) << pos;
;;;240            tmpreg &= ~pinmask;
;;;241            /* Write the mode configuration in the corresponding bits */
;;;242            tmpreg |= (currentmode << pos);
;;;243            /* Reset the corresponding ODR bit */
;;;244            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
;;;245            {
;;;246              GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
;;;247            }
;;;248            /* Set the corresponding ODR bit */
;;;249            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
;;;250            {
;;;251              GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
;;;252            }
;;;253          }
;;;254        }
;;;255        GPIOx->CRH = tmpreg;
;;;256      }
;;;257    }
000068  bf9c              ITT      LS
00006a  e8bd03f0          POPLS    {r4-r9}
00006e  4770              BXLS     lr
000070  6844              LDR      r4,[r0,#4]            ;229
000072  f04f0c00          MOV      r12,#0                ;230
000076  2508              MOVS     r5,#8                 ;230
                  |L7.120|
000078  f10c0308          ADD      r3,r12,#8             ;232
00007c  880e              LDRH     r6,[r1,#0]            ;235
00007e  fa08f303          LSL      r3,r8,r3              ;232
000082  ea330606          BICS     r6,r3,r6              ;235
000086  d007              BEQ      |L7.152|
                  |L7.136|
000088  1e6d              SUBS     r5,r5,#1              ;235
00008a  f10c0c01          ADD      r12,r12,#1            ;235
00008e  d1f3              BNE      |L7.120|
000090  6044              STR      r4,[r0,#4]            ;255
000092  e8bd03f0          POP      {r4-r9}
000096  4770              BX       lr
                  |L7.152|
000098  ea4f068c          LSL      r6,r12,#2
00009c  fa07f906          LSL      r9,r7,r6              ;240
0000a0  ea240409          BIC      r4,r4,r9              ;240
0000a4  fa02f606          LSL      r6,r2,r6              ;242
0000a8  4334              ORRS     r4,r4,r6              ;242
0000aa  688e              LDR      r6,[r1,#8]            ;244
0000ac  2e28              CMP      r6,#0x28              ;244
0000ae  bf08              IT       EQ                    ;246
0000b0  6143              STREQ    r3,[r0,#0x14]         ;246
0000b2  688e              LDR      r6,[r1,#8]            ;249
0000b4  2e48              CMP      r6,#0x48              ;249
0000b6  bf08              IT       EQ                    ;251
0000b8  6103              STREQ    r3,[r0,#0x10]         ;251
0000ba  e7e5              B        |L7.136|
;;;258    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;430      */
;;;431    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  f4413280          ORR      r2,r1,#0x10000
;;;432    {
;;;433      uint32_t tmp = 0x00010000;
;;;434      
;;;435      /* Check the parameters */
;;;436      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;437      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;438      
;;;439      tmp |= GPIO_Pin;
;;;440      /* Set LCKK bit */
;;;441      GPIOx->LCKR = tmp;
000004  6182              STR      r2,[r0,#0x18]
;;;442      /* Reset LCKK bit */
;;;443      GPIOx->LCKR =  GPIO_Pin;
000006  6181              STR      r1,[r0,#0x18]
;;;444      /* Set LCKK bit */
;;;445      GPIOx->LCKR = tmp;
000008  6182              STR      r2,[r0,#0x18]
;;;446      /* Read LCKK bit*/
;;;447      tmp = GPIOx->LCKR;
00000a  6981              LDR      r1,[r0,#0x18]
;;;448      /* Read LCKK bit*/
;;;449      tmp = GPIOx->LCKR;
00000c  6980              LDR      r0,[r0,#0x18]
;;;450    }
00000e  4770              BX       lr
;;;451    
                          ENDP


                          AREA ||i.GPIO_PinRemapConfig||, CODE, READONLY, ALIGN=2

                  GPIO_PinRemapConfig PROC
;;;540      */
;;;541    void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
000000  b470              PUSH     {r4-r6}
;;;542    {
;;;543      uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
;;;544    
;;;545      /* Check the parameters */
;;;546      assert_param(IS_GPIO_REMAP(GPIO_Remap));
;;;547      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;548      
;;;549      if((GPIO_Remap & 0x80000000) == 0x80000000)
;;;550      {
;;;551        tmpreg = AFIO->MAPR2;
000002  4a19              LDR      r2,|L9.104|
000004  f0104f00          TST      r0,#0x80000000        ;549
000008  bf14              ITE      NE
00000a  69d3              LDRNE    r3,[r2,#0x1c]
;;;552      }
;;;553      else
;;;554      {
;;;555        tmpreg = AFIO->MAPR;
00000c  6853              LDREQ    r3,[r2,#4]
;;;556      }
;;;557    
;;;558      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
00000e  f3c04403          UBFX     r4,r0,#16,#4
;;;559      tmp = GPIO_Remap & LSB_MASK;
;;;560    
;;;561      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
000012  f44f1c40          MOV      r12,#0x300000
000016  ea3c0500          BICS     r5,r12,r0
;;;562      {
;;;563        tmpreg &= DBGAFR_SWJCFG_MASK;
;;;564        AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
;;;565      }
;;;566      else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
;;;567      {
;;;568        tmp1 = ((uint32_t)0x03) << tmpmask;
;;;569        tmpreg &= ~tmp1;
;;;570        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;571      }
;;;572      else
;;;573      {
;;;574        tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
00001a  ea4f5c50          LSR      r12,r0,#21
00001e  ea4f1c0c          LSL      r12,r12,#4
000022  b286              UXTH     r6,r0                 ;559
000024  fa06fc0c          LSL      r12,r6,r12
000028  d016              BEQ      |L9.88|
00002a  f4101f80          TST      r0,#0x100000          ;566
00002e  bf08              IT       EQ
000030  ea23030c          BICEQ    r3,r3,r12
000034  d003              BEQ      |L9.62|
000036  2503              MOVS     r5,#3                 ;568
000038  fa05f404          LSL      r4,r5,r4              ;568
00003c  43a3              BICS     r3,r3,r4              ;569
                  |L9.62|
00003e  f0436370          ORR      r3,r3,#0xf000000      ;570
                  |L9.66|
;;;575        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;576      }
;;;577    
;;;578      if (NewState != DISABLE)
000042  2900              CMP      r1,#0
;;;579      {
;;;580        tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
000044  bf18              IT       NE
000046  ea4c0303          ORRNE    r3,r12,r3
;;;581      }
;;;582    
;;;583      if((GPIO_Remap & 0x80000000) == 0x80000000)
00004a  f0104f00          TST      r0,#0x80000000
;;;584      {
;;;585        AFIO->MAPR2 = tmpreg;
00004e  bf14              ITE      NE
000050  61d3              STRNE    r3,[r2,#0x1c]
;;;586      }
;;;587      else
;;;588      {
;;;589        AFIO->MAPR = tmpreg;
000052  6053              STREQ    r3,[r2,#4]
;;;590      }  
;;;591    }
000054  bc70              POP      {r4-r6}
000056  4770              BX       lr
                  |L9.88|
000058  6854              LDR      r4,[r2,#4]            ;564
00005a  f0236370          BIC      r3,r3,#0xf000000      ;563
00005e  f0246470          BIC      r4,r4,#0xf000000      ;564
000062  6054              STR      r4,[r2,#4]            ;564
000064  e7ed              B        |L9.66|
;;;592    
                          ENDP

000066  0000              DCW      0x0000
                  |L9.104|
                          DCD      0x40010000

                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;303      */
;;;304    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  6880              LDR      r0,[r0,#8]
;;;305    {
;;;306      /* Check the parameters */
;;;307      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;308      
;;;309      return ((uint16_t)GPIOx->IDR);
000002  b280              UXTH     r0,r0
;;;310    }
000004  4770              BX       lr
;;;311    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;279      */
;;;280    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;281    {
;;;282      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;283      
;;;284      /* Check the parameters */
;;;285      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;286      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;287      
;;;288      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6892              LDR      r2,[r2,#8]
000006  420a              TST      r2,r1
;;;289      {
;;;290        bitstatus = (uint8_t)Bit_SET;
000008  bf18              IT       NE
00000a  2001              MOVNE    r0,#1
;;;291      }
;;;292      else
;;;293      {
;;;294        bitstatus = (uint8_t)Bit_RESET;
;;;295      }
;;;296      return bitstatus;
;;;297    }
00000c  4770              BX       lr
;;;298    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;341      */
;;;342    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  68c0              LDR      r0,[r0,#0xc]
;;;343    {
;;;344      /* Check the parameters */
;;;345      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;346        
;;;347      return ((uint16_t)GPIOx->ODR);
000002  b280              UXTH     r0,r0
;;;348    }
000004  4770              BX       lr
;;;349    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;318      */
;;;319    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;320    {
;;;321      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;322      /* Check the parameters */
;;;323      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;324      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;325      
;;;326      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  68d2              LDR      r2,[r2,#0xc]
000006  420a              TST      r2,r1
;;;327      {
;;;328        bitstatus = (uint8_t)Bit_SET;
000008  bf18              IT       NE
00000a  2001              MOVNE    r0,#1
;;;329      }
;;;330      else
;;;331      {
;;;332        bitstatus = (uint8_t)Bit_RESET;
;;;333      }
;;;334      return bitstatus;
;;;335    }
00000c  4770              BX       lr
;;;336    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;372      */
;;;373    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6141              STR      r1,[r0,#0x14]
;;;374    {
;;;375      /* Check the parameters */
;;;376      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;377      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;378      
;;;379      GPIOx->BRR = GPIO_Pin;
;;;380    }
000002  4770              BX       lr
;;;381    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;356      */
;;;357    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6101              STR      r1,[r0,#0x10]
;;;358    {
;;;359      /* Check the parameters */
;;;360      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;361      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;362      
;;;363      GPIOx->BSRR = GPIO_Pin;
;;;364    }
000002  4770              BX       lr
;;;365    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;264      */
;;;265    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;266    {
;;;267      /* Reset GPIO init structure parameters values */
;;;268      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000004  8001              STRH     r1,[r0,#0]
;;;269      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000006  2102              MOVS     r1,#2
;;;270      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
000008  6041              STR      r1,[r0,#4]
00000a  2104              MOVS     r1,#4
00000c  6081              STR      r1,[r0,#8]
;;;271    }
00000e  4770              BX       lr
;;;272    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;415      */
;;;416    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000000  60c1              STR      r1,[r0,#0xc]
;;;417    {
;;;418      /* Check the parameters */
;;;419      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;420      
;;;421      GPIOx->ODR = PortVal;
;;;422    }
000002  4770              BX       lr
;;;423    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;392      */
;;;393    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  2a00              CMP      r2,#0
;;;394    {
;;;395      /* Check the parameters */
;;;396      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;397      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;398      assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
;;;399      
;;;400      if (BitVal != Bit_RESET)
;;;401      {
;;;402        GPIOx->BSRR = GPIO_Pin;
000002  bf14              ITE      NE
000004  6101              STRNE    r1,[r0,#0x10]
;;;403      }
;;;404      else
;;;405      {
;;;406        GPIOx->BRR = GPIO_Pin;
000006  6141              STREQ    r1,[r0,#0x14]
;;;407      }
;;;408    }
000008  4770              BX       lr
;;;409    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32F10x_StdPeriph_Lib_V3.3.0\\Libraries\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f10x_gpio_c_f8e8e39a____REV16|
#line 464 "D:\\Program_Files_x86\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___16_stm32f10x_gpio_c_f8e8e39a____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f10x_gpio_c_f8e8e39a____REVSH|
#line 479
|__asm___16_stm32f10x_gpio_c_f8e8e39a____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f10x_gpio_c_f8e8e39a____RRX|
#line 666
|__asm___16_stm32f10x_gpio_c_f8e8e39a____RRX| PROC
#line 667

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
