; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f7xx_hal_dma.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f7xx_hal_dma.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Core -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f7xx_hal_dma.crf ..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_dma.c]
                          THUMB

                          AREA ||i.HAL_DMA_Abort||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Abort PROC
;;;519      */
;;;520    HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;521    {
;;;522      /* calculate DMA base and stream number */
;;;523      DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
;;;524      
;;;525      uint32_t tickstart = HAL_GetTick();
000004  6dc7              LDR      r7,[r0,#0x5c]
000006  4604              MOV      r4,r0                 ;521
000008  f7fffffe          BL       HAL_GetTick
00000c  4605              MOV      r5,r0
;;;526      
;;;527      if(hdma->State != HAL_DMA_STATE_BUSY)
00000e  6ba0              LDR      r0,[r4,#0x38]
000010  2600              MOVS     r6,#0
000012  2802              CMP      r0,#2
000014  d005              BEQ      |L1.34|
;;;528      {
;;;529        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
000016  2080              MOVS     r0,#0x80
000018  65a0              STR      r0,[r4,#0x58]
;;;530        
;;;531        /* Process Unlocked */
;;;532        __HAL_UNLOCK(hdma);
;;;533        
;;;534        return HAL_ERROR;
00001a  2001              MOVS     r0,#1
00001c  6366              STR      r6,[r4,#0x34]
;;;535      }
;;;536      else
;;;537      {
;;;538        /* Disable all the transfer interrupts */
;;;539        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
;;;540        hdma->Instance->FCR &= ~(DMA_IT_FE);
;;;541        
;;;542        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
;;;543        {
;;;544          hdma->Instance->CR  &= ~(DMA_IT_HT);
;;;545        }
;;;546        
;;;547        /* Disable the stream */
;;;548        __HAL_DMA_DISABLE(hdma);
;;;549        
;;;550        /* Check if the DMA Stream is effectively disabled */
;;;551        while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
;;;552        {
;;;553          /* Check for the Timeout */
;;;554          if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
;;;555          {
;;;556            /* Update error code */
;;;557            hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
;;;558            
;;;559            /* Process Unlocked */
;;;560            __HAL_UNLOCK(hdma);
;;;561            
;;;562            /* Change the DMA state */
;;;563            hdma->State = HAL_DMA_STATE_TIMEOUT;
;;;564            
;;;565            return HAL_TIMEOUT;
;;;566          }
;;;567        }
;;;568        
;;;569        /* Clear all interrupt flags at correct offset within the register */
;;;570        regs->IFCR = 0x3FU << hdma->StreamIndex;
;;;571        
;;;572        /* Process Unlocked */
;;;573        __HAL_UNLOCK(hdma);
;;;574        
;;;575        /* Change the DMA state*/
;;;576        hdma->State = HAL_DMA_STATE_READY;
;;;577      }
;;;578      return HAL_OK;
;;;579    }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.34|
000022  6820              LDR      r0,[r4,#0]            ;539
000024  6801              LDR      r1,[r0,#0]            ;539
000026  f0210116          BIC      r1,r1,#0x16           ;539
00002a  6001              STR      r1,[r0,#0]            ;539
00002c  6820              LDR      r0,[r4,#0]            ;540
00002e  6941              LDR      r1,[r0,#0x14]         ;540
000030  f0210180          BIC      r1,r1,#0x80           ;540
000034  6141              STR      r1,[r0,#0x14]         ;540
000036  6c60              LDR      r0,[r4,#0x44]         ;542
000038  2800              CMP      r0,#0                 ;542
00003a  bf04              ITT      EQ                    ;542
00003c  6ce0              LDREQ    r0,[r4,#0x4c]         ;542
00003e  2800              CMPEQ    r0,#0                 ;542
000040  d004              BEQ      |L1.76|
000042  6820              LDR      r0,[r4,#0]            ;544
000044  6801              LDR      r1,[r0,#0]            ;544
000046  f0210108          BIC      r1,r1,#8              ;544
00004a  6001              STR      r1,[r0,#0]            ;544
                  |L1.76|
00004c  6820              LDR      r0,[r4,#0]            ;548
00004e  6801              LDR      r1,[r0,#0]            ;548
000050  f0210101          BIC      r1,r1,#1              ;548
000054  6001              STR      r1,[r0,#0]            ;548
000056  6820              LDR      r0,[r4,#0]            ;551
000058  6800              LDR      r0,[r0,#0]            ;551
00005a  f0100f01          TST      r0,#1                 ;551
00005e  d010              BEQ      |L1.130|
                  |L1.96|
000060  f7fffffe          BL       HAL_GetTick
000064  1b40              SUBS     r0,r0,r5              ;554
000066  2805              CMP      r0,#5                 ;554
000068  d906              BLS      |L1.120|
00006a  2120              MOVS     r1,#0x20              ;557
00006c  65a1              STR      r1,[r4,#0x58]         ;557
00006e  2003              MOVS     r0,#3                 ;563
000070  6366              STR      r6,[r4,#0x34]         ;563
000072  63a0              STR      r0,[r4,#0x38]         ;563
000074  e8bd81f0          POP      {r4-r8,pc}
                  |L1.120|
000078  6820              LDR      r0,[r4,#0]            ;565
00007a  6800              LDR      r0,[r0,#0]            ;565
00007c  f0100f01          TST      r0,#1                 ;565
000080  d1ee              BNE      |L1.96|
                  |L1.130|
000082  f8941060          LDRB     r1,[r4,#0x60]         ;570
000086  223f              MOVS     r2,#0x3f              ;570
000088  2001              MOVS     r0,#1                 ;576
00008a  fa02f101          LSL      r1,r2,r1              ;570
00008e  60b9              STR      r1,[r7,#8]            ;570
000090  6366              STR      r6,[r4,#0x34]         ;576
000092  63a0              STR      r0,[r4,#0x38]         ;576
000094  2000              MOVS     r0,#0                 ;578
000096  e8bd81f0          POP      {r4-r8,pc}
;;;580    
                          ENDP


                          AREA ||i.HAL_DMA_Abort_IT||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Abort_IT PROC
;;;586      */
;;;587    HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
000000  6b81              LDR      r1,[r0,#0x38]
;;;588    {
;;;589      if(hdma->State != HAL_DMA_STATE_BUSY)
000002  2902              CMP      r1,#2
000004  d003              BEQ      |L2.14|
;;;590      {
;;;591        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
000006  2180              MOVS     r1,#0x80
000008  6581              STR      r1,[r0,#0x58]
;;;592        return HAL_ERROR;
00000a  2001              MOVS     r0,#1
;;;593      }
;;;594      else
;;;595      {
;;;596        /* Set Abort State  */
;;;597        hdma->State = HAL_DMA_STATE_ABORT;
;;;598        
;;;599        /* Disable the stream */
;;;600        __HAL_DMA_DISABLE(hdma);
;;;601      }
;;;602    
;;;603      return HAL_OK;
;;;604    }
00000c  4770              BX       lr
                  |L2.14|
00000e  2105              MOVS     r1,#5                 ;597
000010  6381              STR      r1,[r0,#0x38]         ;597
000012  6800              LDR      r0,[r0,#0]            ;600
000014  6801              LDR      r1,[r0,#0]            ;600
000016  f0210101          BIC      r1,r1,#1              ;600
00001a  6001              STR      r1,[r0,#0]            ;600
00001c  2000              MOVS     r0,#0                 ;603
00001e  4770              BX       lr
;;;605    
                          ENDP


                          AREA ||i.HAL_DMA_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DMA_DeInit PROC
;;;325      */
;;;326    HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
000000  2800              CMP      r0,#0
;;;327    {
;;;328      DMA_Base_Registers *regs;
;;;329    
;;;330      /* Check the DMA peripheral state */
;;;331      if(hdma == NULL)
;;;332      {
;;;333        return HAL_ERROR;
000002  bf04              ITT      EQ
000004  2001              MOVEQ    r0,#1
;;;334      }
;;;335      
;;;336      /* Check the DMA peripheral state */
;;;337      if(hdma->State == HAL_DMA_STATE_BUSY)
;;;338      {
;;;339        /* Return error status */
;;;340        return HAL_BUSY;
;;;341      }
;;;342    
;;;343      /* Disable the selected DMA Streamx */
;;;344      __HAL_DMA_DISABLE(hdma);
;;;345    
;;;346      /* Reset DMA Streamx control register */
;;;347      hdma->Instance->CR   = 0U;
;;;348    
;;;349      /* Reset DMA Streamx number of data to transfer register */
;;;350      hdma->Instance->NDTR = 0U;
;;;351    
;;;352      /* Reset DMA Streamx peripheral address register */
;;;353      hdma->Instance->PAR  = 0U;
;;;354    
;;;355      /* Reset DMA Streamx memory 0 address register */
;;;356      hdma->Instance->M0AR = 0U;
;;;357      
;;;358      /* Reset DMA Streamx memory 1 address register */
;;;359      hdma->Instance->M1AR = 0U;
;;;360      
;;;361      /* Reset DMA Streamx FIFO control register */
;;;362      hdma->Instance->FCR  = (uint32_t)0x00000021U;
;;;363      
;;;364      /* Get DMA steam Base Address */  
;;;365      regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
;;;366      
;;;367      /* Clear all interrupt flags at correct offset within the register */
;;;368      regs->IFCR = 0x3FU << hdma->StreamIndex;
;;;369    
;;;370      /* Initialize the error code */
;;;371      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;372    
;;;373      /* Initialize the DMA state */
;;;374      hdma->State = HAL_DMA_STATE_RESET;
;;;375    
;;;376      /* Release Lock */
;;;377      __HAL_UNLOCK(hdma);
;;;378    
;;;379      return HAL_OK;
;;;380    }
000006  4770              BXEQ     lr
000008  6b81              LDR      r1,[r0,#0x38]         ;337
00000a  2902              CMP      r1,#2                 ;337
00000c  bf04              ITT      EQ                    ;340
00000e  2002              MOVEQ    r0,#2                 ;340
000010  4770              BXEQ     lr
000012  2100              MOVS     r1,#0                 ;347
000014  6802              LDR      r2,[r0,#0]            ;344
000016  2321              MOVS     r3,#0x21              ;362
000018  f8d2c000          LDR      r12,[r2,#0]           ;344
00001c  f02c0c01          BIC      r12,r12,#1            ;344
000020  f8c2c000          STR      r12,[r2,#0]           ;344
000024  6802              LDR      r2,[r0,#0]            ;347
000026  6011              STR      r1,[r2,#0]            ;347
000028  6802              LDR      r2,[r0,#0]            ;350
00002a  6051              STR      r1,[r2,#4]            ;350
00002c  6802              LDR      r2,[r0,#0]            ;353
00002e  6091              STR      r1,[r2,#8]            ;353
000030  6802              LDR      r2,[r0,#0]            ;356
000032  60d1              STR      r1,[r2,#0xc]          ;356
000034  6802              LDR      r2,[r0,#0]            ;359
000036  6111              STR      r1,[r2,#0x10]         ;359
000038  6802              LDR      r2,[r0,#0]            ;362
00003a  6153              STR      r3,[r2,#0x14]         ;362
00003c  6802              LDR      r2,[r0,#0]            ;362
00003e  4b0e              LDR      r3,|L3.120|
000040  f0020cff          AND      r12,r2,#0xff          ;362
000044  f1ac0c10          SUB      r12,r12,#0x10         ;362
000048  f36f0209          BFC      r2,#0,#10             ;362
00004c  fba3c30c          UMULL    r12,r3,r3,r12         ;362
000050  f8dfc028          LDR      r12,|L3.124|
000054  091b              LSRS     r3,r3,#4              ;362
000056  2b03              CMP      r3,#3                 ;362
000058  f81cc003          LDRB     r12,[r12,r3]          ;362
00005c  f8c0c060          STR      r12,[r0,#0x60]        ;362
000060  bf88              IT       HI                    ;362
000062  1d12              ADDHI    r2,r2,#4              ;362
000064  233f              MOVS     r3,#0x3f              ;368
000066  65c2              STR      r2,[r0,#0x5c]         ;368
000068  fa03f30c          LSL      r3,r3,r12             ;368
00006c  6093              STR      r3,[r2,#8]            ;368
00006e  6581              STR      r1,[r0,#0x58]         ;371
000070  6381              STR      r1,[r0,#0x38]         ;374
000072  6341              STR      r1,[r0,#0x34]         ;379
000074  2000              MOVS     r0,#0                 ;379
000076  4770              BX       lr
;;;381    
                          ENDP

                  |L3.120|
                          DCD      0xaaaaaaab
                  |L3.124|
                          DCD      ||.constdata||

                          AREA ||i.HAL_DMA_GetError||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetError PROC
;;;1129     */
;;;1130   uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
000000  6d80              LDR      r0,[r0,#0x58]
;;;1131   {
;;;1132     return hdma->ErrorCode;
;;;1133   }
000002  4770              BX       lr
;;;1134   
                          ENDP


                          AREA ||i.HAL_DMA_GetState||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetState PROC
;;;1118     */
;;;1119   HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
000000  6b80              LDR      r0,[r0,#0x38]
;;;1120   {
;;;1121     return hdma->State;
;;;1122   }
000002  4770              BX       lr
;;;1123   
                          ENDP


                          AREA ||i.HAL_DMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_DMA_IRQHandler PROC
;;;752      */
;;;753    void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;754    {
000004  4604              MOV      r4,r0
;;;755      uint32_t tmpisr;
;;;756      __IO uint32_t count = 0;
;;;757      uint32_t timeout = SystemCoreClock / 9600;
000006  4a70              LDR      r2,|L6.456|
000008  2700              MOVS     r7,#0                 ;756
;;;758    
;;;759      /* calculate DMA base and stream number */
;;;760      DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
00000a  9700              STR      r7,[sp,#0]
;;;761    
;;;762      tmpisr = regs->ISR;
;;;763    
;;;764      /* Transfer Error Interrupt management ***************************************/
;;;765      if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
00000c  2108              MOVS     r1,#8
00000e  6de5              LDR      r5,[r4,#0x5c]         ;757
000010  f44f5016          MOV      r0,#0x2580            ;757
000014  f8943060          LDRB     r3,[r4,#0x60]
000018  6812              LDR      r2,[r2,#0]            ;757  ; SystemCoreClock
00001a  682e              LDR      r6,[r5,#0]            ;762
00001c  fbb2f8f0          UDIV     r8,r2,r0              ;757
000020  fa01f303          LSL      r3,r1,r3
000024  4233              TST      r3,r6
000026  d011              BEQ      |L6.76|
;;;766      {
;;;767        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
000028  6820              LDR      r0,[r4,#0]
00002a  6802              LDR      r2,[r0,#0]
00002c  f0120f04          TST      r2,#4
000030  d00c              BEQ      |L6.76|
;;;768        {
;;;769          /* Disable the transfer error interrupt */
;;;770          hdma->Instance->CR  &= ~(DMA_IT_TE);
000032  6802              LDR      r2,[r0,#0]
000034  f0220204          BIC      r2,r2,#4
000038  6002              STR      r2,[r0,#0]
;;;771          
;;;772          /* Clear the transfer error flag */
;;;773          regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
00003a  f8940060          LDRB     r0,[r4,#0x60]
00003e  fa01f000          LSL      r0,r1,r0
000042  60a8              STR      r0,[r5,#8]
;;;774          
;;;775          /* Update error code */
;;;776          hdma->ErrorCode |= HAL_DMA_ERROR_TE;
000044  6da0              LDR      r0,[r4,#0x58]
000046  f0400001          ORR      r0,r0,#1
00004a  65a0              STR      r0,[r4,#0x58]
                  |L6.76|
;;;777        }
;;;778      }
;;;779      /* FIFO Error Interrupt management ******************************************/
;;;780      if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
00004c  f8941060          LDRB     r1,[r4,#0x60]
000050  485e              LDR      r0,|L6.460|
000052  4088              LSLS     r0,r0,r1
000054  4230              TST      r0,r6
000056  d009              BEQ      |L6.108|
;;;781      {
;;;782        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
000058  6821              LDR      r1,[r4,#0]
00005a  6949              LDR      r1,[r1,#0x14]
00005c  f0110f80          TST      r1,#0x80
000060  d004              BEQ      |L6.108|
;;;783        {
;;;784          /* Clear the FIFO error flag */
;;;785          regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
000062  60a8              STR      r0,[r5,#8]
;;;786    
;;;787          /* Update error code */
;;;788          hdma->ErrorCode |= HAL_DMA_ERROR_FE;
000064  6da0              LDR      r0,[r4,#0x58]
000066  f0400002          ORR      r0,r0,#2
00006a  65a0              STR      r0,[r4,#0x58]
                  |L6.108|
;;;789        }
;;;790      }
;;;791      /* Direct Mode Error Interrupt management ***********************************/
;;;792      if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
00006c  f8941060          LDRB     r1,[r4,#0x60]
000070  4857              LDR      r0,|L6.464|
000072  4088              LSLS     r0,r0,r1
000074  4230              TST      r0,r6
000076  d009              BEQ      |L6.140|
;;;793      {
;;;794        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
000078  6821              LDR      r1,[r4,#0]
00007a  6809              LDR      r1,[r1,#0]
00007c  f0110f02          TST      r1,#2
000080  d004              BEQ      |L6.140|
;;;795        {
;;;796          /* Clear the direct mode error flag */
;;;797          regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
000082  60a8              STR      r0,[r5,#8]
;;;798    
;;;799          /* Update error code */
;;;800          hdma->ErrorCode |= HAL_DMA_ERROR_DME;
000084  6da0              LDR      r0,[r4,#0x58]
000086  f0400004          ORR      r0,r0,#4
00008a  65a0              STR      r0,[r4,#0x58]
                  |L6.140|
;;;801        }
;;;802      }
;;;803      /* Half Transfer Complete Interrupt management ******************************/
;;;804      if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
00008c  f8941060          LDRB     r1,[r4,#0x60]
000090  2010              MOVS     r0,#0x10
000092  4088              LSLS     r0,r0,r1
000094  4230              TST      r0,r6
000096  d020              BEQ      |L6.218|
;;;805      {
;;;806        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
000098  6821              LDR      r1,[r4,#0]
00009a  6809              LDR      r1,[r1,#0]
00009c  f0110f08          TST      r1,#8
0000a0  d01b              BEQ      |L6.218|
;;;807        {
;;;808          /* Clear the half transfer complete flag */
;;;809          regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
0000a2  60a8              STR      r0,[r5,#8]
;;;810          
;;;811          /* Multi_Buffering mode enabled */
;;;812          if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
0000a4  6820              LDR      r0,[r4,#0]
0000a6  6801              LDR      r1,[r0,#0]
0000a8  f4112f80          TST      r1,#0x40000
0000ac  d009              BEQ      |L6.194|
;;;813          {
;;;814            /* Current memory buffer used is Memory 0 */
;;;815            if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
0000ae  6800              LDR      r0,[r0,#0]
0000b0  f4102f00          TST      r0,#0x80000
0000b4  d002              BEQ      |L6.188|
;;;816            {
;;;817              if(hdma->XferHalfCpltCallback != NULL)
;;;818              {
;;;819                /* Half transfer callback */
;;;820                hdma->XferHalfCpltCallback(hdma);
;;;821              }
;;;822            }
;;;823            /* Current memory buffer used is Memory 1 */
;;;824            else
;;;825            {
;;;826              if(hdma->XferM1HalfCpltCallback != NULL)
0000b6  6ce1              LDR      r1,[r4,#0x4c]
0000b8  b179              CBZ      r1,|L6.218|
0000ba  e00c              B        |L6.214|
                  |L6.188|
0000bc  6c61              LDR      r1,[r4,#0x44]         ;817
0000be  b951              CBNZ     r1,|L6.214|
0000c0  e00b              B        |L6.218|
                  |L6.194|
;;;827              {
;;;828                /* Half transfer callback */
;;;829                hdma->XferM1HalfCpltCallback(hdma);
;;;830              }
;;;831            }
;;;832          }
;;;833          else
;;;834          {
;;;835            /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
;;;836            if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
0000c2  6801              LDR      r1,[r0,#0]
0000c4  f4117f80          TST      r1,#0x100
0000c8  d103              BNE      |L6.210|
;;;837            {
;;;838              /* Disable the half transfer interrupt */
;;;839              hdma->Instance->CR  &= ~(DMA_IT_HT);
0000ca  6801              LDR      r1,[r0,#0]
0000cc  f0210108          BIC      r1,r1,#8
0000d0  6001              STR      r1,[r0,#0]
                  |L6.210|
;;;840            }
;;;841            
;;;842            if(hdma->XferHalfCpltCallback != NULL)
0000d2  6c61              LDR      r1,[r4,#0x44]
0000d4  b109              CBZ      r1,|L6.218|
                  |L6.214|
;;;843            {
;;;844              /* Half transfer callback */
;;;845              hdma->XferHalfCpltCallback(hdma);
0000d6  4620              MOV      r0,r4
0000d8  4788              BLX      r1
                  |L6.218|
;;;846            }
;;;847          }
;;;848        }
;;;849      }
;;;850      /* Transfer Complete Interrupt management ***********************************/
;;;851      if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
0000da  f8941060          LDRB     r1,[r4,#0x60]
0000de  2020              MOVS     r0,#0x20
;;;852      {
;;;853        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
;;;854        {
;;;855          /* Clear the transfer complete flag */
;;;856          regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
;;;857          
;;;858          if(HAL_DMA_STATE_ABORT == hdma->State)
;;;859          {
;;;860            /* Disable all the transfer interrupts */
;;;861            hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
;;;862            hdma->Instance->FCR &= ~(DMA_IT_FE);
;;;863            
;;;864            if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
;;;865            {
;;;866              hdma->Instance->CR  &= ~(DMA_IT_HT);
;;;867            }
;;;868    
;;;869            /* Clear all interrupt flags at correct offset within the register */
;;;870            regs->IFCR = 0x3FU << hdma->StreamIndex;
;;;871    
;;;872            /* Process Unlocked */
;;;873            __HAL_UNLOCK(hdma);
;;;874             
;;;875            /* Change the DMA state */
;;;876            hdma->State = HAL_DMA_STATE_READY;
0000e0  f04f0901          MOV      r9,#1
0000e4  4088              LSLS     r0,r0,r1              ;851
0000e6  4230              TST      r0,r6                 ;851
0000e8  d046              BEQ      |L6.376|
0000ea  6821              LDR      r1,[r4,#0]            ;853
0000ec  6809              LDR      r1,[r1,#0]            ;853
0000ee  f0110f10          TST      r1,#0x10              ;853
0000f2  d041              BEQ      |L6.376|
0000f4  60a8              STR      r0,[r5,#8]            ;856
0000f6  6ba0              LDR      r0,[r4,#0x38]         ;858
0000f8  2805              CMP      r0,#5                 ;858
;;;877    	
;;;878            if(hdma->XferAbortCallback != NULL)
;;;879            {
;;;880              hdma->XferAbortCallback(hdma);
;;;881            }
;;;882            return;
;;;883          }
;;;884          
;;;885          if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
0000fa  6820              LDR      r0,[r4,#0]
0000fc  6801              LDR      r1,[r0,#0]
0000fe  d009              BEQ      |L6.276|
000100  f4112f80          TST      r1,#0x40000
000104  d029              BEQ      |L6.346|
;;;886          {
;;;887            /* Current memory buffer used is Memory 0 */
;;;888            if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
000106  6800              LDR      r0,[r0,#0]
000108  f4102f00          TST      r0,#0x80000
00010c  d022              BEQ      |L6.340|
;;;889            {
;;;890              if(hdma->XferM1CpltCallback != NULL)
;;;891              {
;;;892                /* Transfer complete Callback for memory1 */
;;;893                hdma->XferM1CpltCallback(hdma);
;;;894              }
;;;895            }
;;;896            /* Current memory buffer used is Memory 1 */
;;;897            else
;;;898            {
;;;899              if(hdma->XferCpltCallback != NULL)
00010e  6c21              LDR      r1,[r4,#0x40]
000110  b311              CBZ      r1,|L6.344|
000112  e02f              B        |L6.372|
                  |L6.276|
000114  f0210116          BIC      r1,r1,#0x16           ;861
000118  6001              STR      r1,[r0,#0]            ;861
00011a  6820              LDR      r0,[r4,#0]            ;862
00011c  6941              LDR      r1,[r0,#0x14]         ;862
00011e  f0210180          BIC      r1,r1,#0x80           ;862
000122  6141              STR      r1,[r0,#0x14]         ;862
000124  6c60              LDR      r0,[r4,#0x44]         ;864
000126  2800              CMP      r0,#0                 ;864
000128  bf04              ITT      EQ                    ;864
00012a  6ce0              LDREQ    r0,[r4,#0x4c]         ;864
00012c  2800              CMPEQ    r0,#0                 ;864
00012e  d004              BEQ      |L6.314|
000130  6820              LDR      r0,[r4,#0]            ;866
000132  6801              LDR      r1,[r0,#0]            ;866
000134  f0210108          BIC      r1,r1,#8              ;866
000138  6001              STR      r1,[r0,#0]            ;866
                  |L6.314|
00013a  f8940060          LDRB     r0,[r4,#0x60]         ;870
00013e  213f              MOVS     r1,#0x3f              ;870
000140  fa01f000          LSL      r0,r1,r0              ;870
000144  60a8              STR      r0,[r5,#8]            ;870
000146  f8c49038          STR      r9,[r4,#0x38]         ;876
00014a  6367              STR      r7,[r4,#0x34]         ;876
00014c  6d61              LDR      r1,[r4,#0x54]         ;878
00014e  bba9              CBNZ     r1,|L6.444|
;;;900              {
;;;901                /* Transfer complete Callback for memory0 */
;;;902                hdma->XferCpltCallback(hdma);
;;;903              }
;;;904            }
;;;905          }
;;;906          /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
;;;907          else
;;;908          {
;;;909            if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
;;;910            {
;;;911              /* Disable the transfer complete interrupt */
;;;912              hdma->Instance->CR  &= ~(DMA_IT_TC);
;;;913    
;;;914              /* Process Unlocked */
;;;915              __HAL_UNLOCK(hdma);
;;;916              
;;;917              /* Change the DMA state */
;;;918              hdma->State = HAL_DMA_STATE_READY;
;;;919            }
;;;920            
;;;921            if(hdma->XferCpltCallback != NULL)
;;;922            {
;;;923              /* Transfer complete callback */
;;;924              hdma->XferCpltCallback(hdma);
;;;925            }
;;;926          }
;;;927        }
;;;928      }
;;;929      
;;;930      /* manage error case */
;;;931      if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
;;;932      {
;;;933        if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
;;;934        {
;;;935          hdma->State = HAL_DMA_STATE_ABORT;
;;;936          
;;;937          /* Disable the stream */
;;;938          __HAL_DMA_DISABLE(hdma);
;;;939          
;;;940          do
;;;941          {
;;;942            if (++count > timeout)
;;;943            {
;;;944              break;
;;;945            }
;;;946          }
;;;947          while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
;;;948    
;;;949          /* Process Unlocked */
;;;950          __HAL_UNLOCK(hdma);
;;;951    
;;;952          /* Change the DMA state */
;;;953          hdma->State = HAL_DMA_STATE_READY;
;;;954        }
;;;955        
;;;956        if(hdma->XferErrorCallback != NULL)
;;;957        {
;;;958          /* Transfer error callback */
;;;959          hdma->XferErrorCallback(hdma);
;;;960        }
;;;961      }
;;;962    }
000150  e8bd83f8          POP      {r3-r9,pc}
                  |L6.340|
000154  6ca1              LDR      r1,[r4,#0x48]         ;890
000156  b969              CBNZ     r1,|L6.372|
                  |L6.344|
000158  e00e              B        |L6.376|
                  |L6.346|
00015a  6801              LDR      r1,[r0,#0]            ;909
00015c  f4117f80          TST      r1,#0x100             ;909
000160  d106              BNE      |L6.368|
000162  6801              LDR      r1,[r0,#0]            ;912
000164  f0210110          BIC      r1,r1,#0x10           ;912
000168  6001              STR      r1,[r0,#0]            ;912
00016a  f8c49038          STR      r9,[r4,#0x38]         ;918
00016e  6367              STR      r7,[r4,#0x34]         ;918
                  |L6.368|
000170  6c21              LDR      r1,[r4,#0x40]         ;921
000172  b109              CBZ      r1,|L6.376|
                  |L6.372|
000174  4620              MOV      r0,r4                 ;924
000176  4788              BLX      r1                    ;924
                  |L6.376|
000178  6da0              LDR      r0,[r4,#0x58]         ;931
00017a  2800              CMP      r0,#0                 ;931
00017c  bf08              IT       EQ
00017e  e8bd83f8          POPEQ    {r3-r9,pc}
000182  6da0              LDR      r0,[r4,#0x58]         ;933
000184  f0100f01          TST      r0,#1                 ;933
000188  d013              BEQ      |L6.434|
00018a  2005              MOVS     r0,#5                 ;935
00018c  63a0              STR      r0,[r4,#0x38]         ;935
00018e  6820              LDR      r0,[r4,#0]            ;938
000190  6801              LDR      r1,[r0,#0]            ;938
000192  f0210101          BIC      r1,r1,#1              ;938
000196  6001              STR      r1,[r0,#0]            ;938
                  |L6.408|
000198  9800              LDR      r0,[sp,#0]            ;942
00019a  1c40              ADDS     r0,r0,#1              ;942
00019c  9000              STR      r0,[sp,#0]            ;942
00019e  4540              CMP      r0,r8                 ;942
0001a0  d804              BHI      |L6.428|
0001a2  6820              LDR      r0,[r4,#0]            ;944
0001a4  6800              LDR      r0,[r0,#0]            ;944
0001a6  f0100f01          TST      r0,#1                 ;944
0001aa  d1f5              BNE      |L6.408|
                  |L6.428|
0001ac  f8c49038          STR      r9,[r4,#0x38]         ;953
0001b0  6367              STR      r7,[r4,#0x34]         ;953
                  |L6.434|
0001b2  6d21              LDR      r1,[r4,#0x50]         ;956
0001b4  2900              CMP      r1,#0                 ;956
0001b6  bf08              IT       EQ
0001b8  e8bd83f8          POPEQ    {r3-r9,pc}
                  |L6.444|
0001bc  4620              MOV      r0,r4                 ;959
0001be  b001              ADD      sp,sp,#4              ;959
0001c0  e8bd43f0          POP      {r4-r9,lr}            ;959
0001c4  4708              BX       r1                    ;959
;;;963    
                          ENDP

0001c6  0000              DCW      0x0000
                  |L6.456|
                          DCD      SystemCoreClock
                  |L6.460|
                          DCD      0x00800001
                  |L6.464|
                          DCD      0x00800004

                          AREA ||i.HAL_DMA_Init||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Init PROC
;;;191      */
;;;192    HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;193    {
000004  4604              MOV      r4,r0
;;;194      uint32_t tmp = 0U;
;;;195      uint32_t tickstart = HAL_GetTick();
000006  f7fffffe          BL       HAL_GetTick
;;;196      DMA_Base_Registers *regs;
;;;197    
;;;198      /* Check the DMA peripheral state */
;;;199      if(hdma == NULL)
00000a  2c00              CMP      r4,#0
00000c  4605              MOV      r5,r0                 ;195
;;;200      {
;;;201        return HAL_ERROR;
00000e  bf04              ITT      EQ
000010  2001              MOVEQ    r0,#1
;;;202      }
;;;203    
;;;204      /* Check the parameters */
;;;205      assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
;;;206      assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
;;;207      assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
;;;208      assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
;;;209      assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
;;;210      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
;;;211      assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
;;;212      assert_param(IS_DMA_MODE(hdma->Init.Mode));
;;;213      assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
;;;214      assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
;;;215      /* Check the memory burst, peripheral burst and FIFO threshold parameters only
;;;216         when FIFO mode is enabled */
;;;217      if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
;;;218      {
;;;219        assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
;;;220        assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
;;;221        assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
;;;222      }
;;;223      
;;;224      /* Allocate lock resource */
;;;225      __HAL_UNLOCK(hdma);
;;;226    
;;;227      /* Change DMA peripheral state */
;;;228      hdma->State = HAL_DMA_STATE_BUSY;
;;;229      
;;;230      /* Disable the peripheral */
;;;231      __HAL_DMA_DISABLE(hdma);
;;;232      
;;;233      /* Check if the DMA Stream is effectively disabled */
;;;234      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
;;;235      {
;;;236        /* Check for the Timeout */
;;;237        if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
;;;238        {
;;;239          /* Update error code */
;;;240          hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
;;;241          
;;;242          /* Change the DMA state */
;;;243          hdma->State = HAL_DMA_STATE_TIMEOUT;
;;;244          
;;;245          return HAL_TIMEOUT;
;;;246        }
;;;247      }
;;;248      
;;;249      /* Get the CR register value */
;;;250      tmp = hdma->Instance->CR;
;;;251    
;;;252      /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
;;;253      tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
;;;254                          DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
;;;255                          DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
;;;256                          DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));
;;;257    
;;;258      /* Prepare the DMA Stream configuration */
;;;259      tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
;;;260              hdma->Init.PeriphInc           | hdma->Init.MemInc           |
;;;261              hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
;;;262              hdma->Init.Mode                | hdma->Init.Priority;
;;;263    
;;;264      /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
;;;265      if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
;;;266      {
;;;267        /* Get memory burst and peripheral burst */
;;;268        tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
;;;269      }
;;;270      
;;;271      /* Write to DMA Stream CR register */
;;;272      hdma->Instance->CR = tmp;  
;;;273    
;;;274      /* Get the FCR register value */
;;;275      tmp = hdma->Instance->FCR;
;;;276    
;;;277      /* Clear Direct mode and FIFO threshold bits */
;;;278      tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
;;;279    
;;;280      /* Prepare the DMA Stream FIFO configuration */
;;;281      tmp |= hdma->Init.FIFOMode;
;;;282    
;;;283      /* the FIFO threshold is not used when the FIFO mode is disabled */
;;;284      if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
;;;285      {
;;;286        /* Get the FIFO threshold */
;;;287        tmp |= hdma->Init.FIFOThreshold;
;;;288        
;;;289        if (DMA_CheckFifoParam(hdma) != HAL_OK)
;;;290        {
;;;291          /* Update error code */
;;;292          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
;;;293          
;;;294          /* Change the DMA state */
;;;295          hdma->State = HAL_DMA_STATE_READY;
;;;296          
;;;297          return HAL_ERROR; 
;;;298        }
;;;299      }
;;;300      
;;;301      /* Write to DMA Stream FCR */
;;;302      hdma->Instance->FCR = tmp;
;;;303    
;;;304      /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
;;;305         DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
;;;306      regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
;;;307      
;;;308      /* Clear all interrupt flags */
;;;309      regs->IFCR = 0x3FU << hdma->StreamIndex;
;;;310    
;;;311      /* Initialize the error code */
;;;312      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;313                                                                                         
;;;314      /* Initialize the DMA state */
;;;315      hdma->State = HAL_DMA_STATE_READY;
;;;316    
;;;317      return HAL_OK;
;;;318    }
000012  e8bd87f0          POPEQ    {r4-r10,pc}
000016  2600              MOVS     r6,#0                 ;225
000018  2002              MOVS     r0,#2                 ;228
00001a  6366              STR      r6,[r4,#0x34]         ;228
00001c  63a0              STR      r0,[r4,#0x38]         ;228
00001e  6820              LDR      r0,[r4,#0]            ;231
000020  6801              LDR      r1,[r0,#0]            ;231
000022  f0210101          BIC      r1,r1,#1              ;231
000026  6001              STR      r1,[r0,#0]            ;231
000028  6820              LDR      r0,[r4,#0]            ;234
00002a  6800              LDR      r0,[r0,#0]            ;234
00002c  f0100f01          TST      r0,#1                 ;234
000030  d010              BEQ      |L7.84|
000032  bf00              NOP                            ;237
                  |L7.52|
000034  f7fffffe          BL       HAL_GetTick
000038  1b40              SUBS     r0,r0,r5              ;237
00003a  2805              CMP      r0,#5                 ;237
00003c  d905              BLS      |L7.74|
00003e  2120              MOVS     r1,#0x20              ;240
000040  65a1              STR      r1,[r4,#0x58]         ;240
000042  2003              MOVS     r0,#3                 ;243
000044  63a0              STR      r0,[r4,#0x38]         ;243
000046  e8bd87f0          POP      {r4-r10,pc}
                  |L7.74|
00004a  6820              LDR      r0,[r4,#0]            ;245
00004c  6800              LDR      r0,[r0,#0]            ;245
00004e  f0100f01          TST      r0,#1                 ;245
000052  d1ef              BNE      |L7.52|
                  |L7.84|
000054  e9d43c02          LDRD     r3,r12,[r4,#8]        ;245
000058  e9d41000          LDRD     r1,r0,[r4,#0]         ;245
00005c  e9d47204          LDRD     r7,r2,[r4,#0x10]      ;259
000060  4318              ORRS     r0,r0,r3              ;259
000062  ea4c0807          ORR      r8,r12,r7             ;259
000066  e9d45306          LDRD     r5,r3,[r4,#0x18]      ;259
00006a  e9d4c708          LDRD     r12,r7,[r4,#0x20]     ;259
00006e  ea400908          ORR      r9,r0,r8              ;259
000072  6808              LDR      r0,[r1,#0]            ;250
000074  ea490202          ORR      r2,r9,r2              ;259
000078  f8df80ec          LDR      r8,|L7.360|
00007c  432a              ORRS     r2,r2,r5              ;259
00007e  ea420203          ORR      r2,r2,r3              ;259
000082  ea000008          AND      r0,r0,r8              ;253
000086  ea42020c          ORR      r2,r2,r12             ;259
00008a  2f04              CMP      r7,#4                 ;265
00008c  ea420000          ORR      r0,r2,r0              ;259
000090  d103              BNE      |L7.154|
000092  e9d4230b          LDRD     r2,r3,[r4,#0x2c]      ;265
000096  431a              ORRS     r2,r2,r3              ;268
000098  4310              ORRS     r0,r0,r2              ;268
                  |L7.154|
00009a  6008              STR      r0,[r1,#0]            ;272
00009c  6823              LDR      r3,[r4,#0]            ;281
00009e  2201              MOVS     r2,#1                 ;201
0000a0  6a60              LDR      r0,[r4,#0x24]         ;275
0000a2  6959              LDR      r1,[r3,#0x14]         ;275
0000a4  2804              CMP      r0,#4                 ;284
0000a6  f0210107          BIC      r1,r1,#7              ;278
0000aa  ea400101          ORR      r1,r0,r1              ;281
0000ae  d141              BNE      |L7.308|
0000b0  6aa0              LDR      r0,[r4,#0x28]         ;287
0000b2  f8d4c018          LDR      r12,[r4,#0x18]        ;287
0000b6  4301              ORRS     r1,r1,r0              ;287
0000b8  f1bc0f00          CMP      r12,#0                ;287
0000bc  d00a              BEQ      |L7.212|
0000be  f5bc5f00          CMP      r12,#0x2000           ;287
0000c2  d01c              BEQ      |L7.254|
0000c4  2800              CMP      r0,#0                 ;287
0000c6  bf1c              ITT      NE                    ;287
0000c8  2801              CMPNE    r0,#1                 ;287
0000ca  2802              CMPNE    r0,#2                 ;287
0000cc  d02c              BEQ      |L7.296|
0000ce  2803              CMP      r0,#3                 ;287
0000d0  d026              BEQ      |L7.288|
0000d2  e02f              B        |L7.308|
                  |L7.212|
0000d4  b120              CBZ      r0,|L7.224|
0000d6  2801              CMP      r0,#1                 ;287
0000d8  d007              BEQ      |L7.234|
0000da  2802              CMP      r0,#2                 ;287
0000dc  d00a              BEQ      |L7.244|
0000de  e029              B        |L7.308|
                  |L7.224|
0000e0  6ae0              LDR      r0,[r4,#0x2c]         ;287
0000e2  f0107f80          TST      r0,#0x1000000         ;287
0000e6  d11f              BNE      |L7.296|
0000e8  e024              B        |L7.308|
                  |L7.234|
0000ea  6ae0              LDR      r0,[r4,#0x2c]         ;287
0000ec  f1b07fc0          CMP      r0,#0x1800000         ;287
0000f0  d120              BNE      |L7.308|
0000f2  e019              B        |L7.296|
                  |L7.244|
0000f4  6ae0              LDR      r0,[r4,#0x2c]         ;287
0000f6  f0107f80          TST      r0,#0x1000000         ;287
0000fa  d115              BNE      |L7.296|
0000fc  e01a              B        |L7.308|
                  |L7.254|
0000fe  b198              CBZ      r0,|L7.296|
000100  2801              CMP      r0,#1                 ;287
000102  d008              BEQ      |L7.278|
000104  2802              CMP      r0,#2                 ;287
000106  d00f              BEQ      |L7.296|
000108  2803              CMP      r0,#3                 ;287
00010a  bf04              ITT      EQ                    ;287
00010c  6ae0              LDREQ    r0,[r4,#0x2c]         ;287
00010e  f1b07fc0          CMPEQ    r0,#0x1800000         ;287
000112  d009              BEQ      |L7.296|
000114  e00e              B        |L7.308|
                  |L7.278|
000116  6ae0              LDR      r0,[r4,#0x2c]         ;287
000118  f0107f80          TST      r0,#0x1000000         ;287
00011c  d104              BNE      |L7.296|
00011e  e009              B        |L7.308|
                  |L7.288|
000120  6ae0              LDR      r0,[r4,#0x2c]         ;287
000122  f0107f80          TST      r0,#0x1000000         ;287
000126  d005              BEQ      |L7.308|
                  |L7.296|
000128  2040              MOVS     r0,#0x40              ;292
00012a  65a0              STR      r0,[r4,#0x58]         ;292
00012c  63a2              STR      r2,[r4,#0x38]         ;295
00012e  2001              MOVS     r0,#1                 ;297
000130  e8bd87f0          POP      {r4-r10,pc}
                  |L7.308|
000134  6159              STR      r1,[r3,#0x14]         ;302
000136  6820              LDR      r0,[r4,#0]            ;302
000138  490c              LDR      r1,|L7.364|
00013a  b2c3              UXTB     r3,r0                 ;302
00013c  3b10              SUBS     r3,r3,#0x10           ;302
00013e  f36f0009          BFC      r0,#0,#10             ;302
000142  fba13103          UMULL    r3,r1,r1,r3           ;302
000146  4b0a              LDR      r3,|L7.368|
000148  0909              LSRS     r1,r1,#4              ;302
00014a  2903              CMP      r1,#3                 ;302
00014c  5c5b              LDRB     r3,[r3,r1]            ;302
00014e  6623              STR      r3,[r4,#0x60]         ;302
000150  bf88              IT       HI                    ;302
000152  1d00              ADDHI    r0,r0,#4              ;302
000154  213f              MOVS     r1,#0x3f              ;309
000156  65e0              STR      r0,[r4,#0x5c]         ;309
000158  4099              LSLS     r1,r1,r3              ;309
00015a  6081              STR      r1,[r0,#8]            ;309
00015c  65a6              STR      r6,[r4,#0x58]         ;312
00015e  63a2              STR      r2,[r4,#0x38]         ;315
000160  2000              MOVS     r0,#0                 ;317
000162  e8bd87f0          POP      {r4-r10,pc}
;;;319    
                          ENDP

000166  0000              DCW      0x0000
                  |L7.360|
                          DCD      0xe010803f
                  |L7.364|
                          DCD      0xaaaaaaab
                  |L7.368|
                          DCD      ||.constdata||

                          AREA ||i.HAL_DMA_PollForTransfer||, CODE, READONLY, ALIGN=2

                  HAL_DMA_PollForTransfer PROC
;;;616      */
;;;617    HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;618    {
000004  b083              SUB      sp,sp,#0xc
000006  4604              MOV      r4,r0
;;;619      HAL_StatusTypeDef status = HAL_OK; 
000008  2000              MOVS     r0,#0
00000a  4617              MOV      r7,r2                 ;618
00000c  468a              MOV      r10,r1                ;618
;;;620      uint32_t mask_cpltlevel;
;;;621      uint32_t tickstart = HAL_GetTick(); 
00000e  9001              STR      r0,[sp,#4]
000010  f7fffffe          BL       HAL_GetTick
;;;622      uint32_t tmpisr;
;;;623      
;;;624      /* calculate DMA base and stream number */
;;;625      DMA_Base_Registers *regs;
;;;626      
;;;627      if(HAL_DMA_STATE_BUSY != hdma->State)
000014  9000              STR      r0,[sp,#0]
000016  6ba0              LDR      r0,[r4,#0x38]
000018  2600              MOVS     r6,#0
00001a  2802              CMP      r0,#2
00001c  d006              BEQ      |L8.44|
;;;628      {
;;;629        /* No transfer ongoing */
;;;630        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
00001e  2080              MOVS     r0,#0x80
000020  65a0              STR      r0,[r4,#0x58]
;;;631        __HAL_UNLOCK(hdma);
;;;632        return HAL_ERROR;
000022  6366              STR      r6,[r4,#0x34]
;;;633      }
;;;634      
;;;635      /* Polling mode not supported in circular mode and double buffering mode */
;;;636      if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
;;;637      {
;;;638        hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
;;;639        return HAL_ERROR;
;;;640      }
;;;641      
;;;642      /* Get the level transfer complete flag */
;;;643      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;644      {
;;;645        /* Transfer Complete flag */
;;;646        mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
;;;647      }
;;;648      else
;;;649      {
;;;650        /* Half Transfer Complete flag */
;;;651        mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
;;;652      }
;;;653      
;;;654      regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
;;;655      tmpisr = regs->ISR;
;;;656      
;;;657      while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
;;;658      {
;;;659        /* Check for the Timeout (Not applicable in circular mode)*/
;;;660        if(Timeout != HAL_MAX_DELAY)
;;;661        {
;;;662          if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
;;;663          {
;;;664            /* Update error code */
;;;665            hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
;;;666    
;;;667            /* Process Unlocked */
;;;668            __HAL_UNLOCK(hdma);
;;;669            
;;;670            /* Change the DMA state */
;;;671            hdma->State = HAL_DMA_STATE_READY;
;;;672            
;;;673            return HAL_TIMEOUT;
;;;674          }
;;;675        }
;;;676        
;;;677        /* Get the ISR register value */
;;;678        tmpisr = regs->ISR;
;;;679        
;;;680        if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
;;;681        {
;;;682          /* Update error code */
;;;683          hdma->ErrorCode |= HAL_DMA_ERROR_TE;
;;;684          
;;;685          /* Clear the transfer error flag */
;;;686          regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
;;;687        }
;;;688        
;;;689        if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
;;;690        {
;;;691          /* Update error code */
;;;692          hdma->ErrorCode |= HAL_DMA_ERROR_FE;
;;;693          
;;;694          /* Clear the FIFO error flag */
;;;695          regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
;;;696        }
;;;697        
;;;698        if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
;;;699        {
;;;700          /* Update error code */
;;;701          hdma->ErrorCode |= HAL_DMA_ERROR_DME;
;;;702          
;;;703          /* Clear the Direct Mode error flag */
;;;704          regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
;;;705        }
;;;706      }
;;;707      
;;;708      if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
;;;709      {
;;;710        if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
;;;711        {
;;;712          HAL_DMA_Abort(hdma);
;;;713        
;;;714          /* Clear the half transfer and transfer complete flags */
;;;715          regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
;;;716        
;;;717          /* Process Unlocked */
;;;718          __HAL_UNLOCK(hdma);
;;;719    
;;;720          /* Change the DMA state */
;;;721          hdma->State= HAL_DMA_STATE_READY;
;;;722    
;;;723          return HAL_ERROR;
;;;724       }
;;;725      }
;;;726      
;;;727      /* Get the level transfer complete flag */
;;;728      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;729      {
;;;730        /* Clear the half transfer and transfer complete flags */
;;;731        regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
;;;732        
;;;733        /* Process Unlocked */
;;;734        __HAL_UNLOCK(hdma);
;;;735    
;;;736        hdma->State = HAL_DMA_STATE_READY;
;;;737      }
;;;738      else
;;;739      {
;;;740        /* Clear the half transfer and transfer complete flags */
;;;741        regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
;;;742      }
;;;743      
;;;744      return status;
;;;745    }
000024  b003              ADD      sp,sp,#0xc
000026  2001              MOVS     r0,#1                 ;632
000028  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.44|
00002c  6820              LDR      r0,[r4,#0]            ;636
00002e  6800              LDR      r0,[r0,#0]            ;636
000030  f4107f80          TST      r0,#0x100             ;636
000034  bf1c              ITT      NE                    ;638
000036  f44f7080          MOVNE    r0,#0x100             ;638
00003a  65a0              STRNE    r0,[r4,#0x58]         ;638
00003c  d17e              BNE      |L8.316|
00003e  f8940060          LDRB     r0,[r4,#0x60]         ;651
000042  f1ba0f00          CMP      r10,#0                ;643
000046  f04f0b20          MOV      r11,#0x20             ;646
00004a  bf0e              ITEE     EQ                    ;646
00004c  fa0bf800          LSLEQ    r8,r11,r0             ;646
000050  2110              MOVNE    r1,#0x10              ;651
000052  fa01f800          LSLNE    r8,r1,r0              ;651
000056  6de5              LDR      r5,[r4,#0x5c]         ;655
000058  6828              LDR      r0,[r5,#0]            ;655
00005a  f04f0901          MOV      r9,#1                 ;632
00005e  e035              B        |L8.204|
                  |L8.96|
000060  f1b73fff          CMP      r7,#0xffffffff        ;660
000064  d00f              BEQ      |L8.134|
000066  b12f              CBZ      r7,|L8.116|
000068  f7fffffe          BL       HAL_GetTick
00006c  9900              LDR      r1,[sp,#0]            ;662
00006e  1a40              SUBS     r0,r0,r1              ;662
000070  42b8              CMP      r0,r7                 ;662
000072  d908              BLS      |L8.134|
                  |L8.116|
000074  f8c4b058          STR      r11,[r4,#0x58]        ;665
000078  f8c49038          STR      r9,[r4,#0x38]         ;671
00007c  6366              STR      r6,[r4,#0x34]         ;671
00007e  b003              ADD      sp,sp,#0xc
000080  2003              MOVS     r0,#3                 ;673
000082  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.134|
000086  f8942060          LDRB     r2,[r4,#0x60]         ;680
00008a  2108              MOVS     r1,#8                 ;680
00008c  6828              LDR      r0,[r5,#0]            ;678
00008e  fa01f202          LSL      r2,r1,r2              ;680
000092  4202              TST      r2,r0                 ;680
000094  d004              BEQ      |L8.160|
000096  6da1              LDR      r1,[r4,#0x58]         ;683
000098  f0410101          ORR      r1,r1,#1              ;683
00009c  65a1              STR      r1,[r4,#0x58]         ;683
00009e  60aa              STR      r2,[r5,#8]            ;686
                  |L8.160|
0000a0  f8942060          LDRB     r2,[r4,#0x60]         ;689
0000a4  4946              LDR      r1,|L8.448|
0000a6  4091              LSLS     r1,r1,r2              ;689
0000a8  4201              TST      r1,r0                 ;689
0000aa  d004              BEQ      |L8.182|
0000ac  6da2              LDR      r2,[r4,#0x58]         ;692
0000ae  f0420202          ORR      r2,r2,#2              ;692
0000b2  65a2              STR      r2,[r4,#0x58]         ;692
0000b4  60a9              STR      r1,[r5,#8]            ;695
                  |L8.182|
0000b6  f8942060          LDRB     r2,[r4,#0x60]         ;698
0000ba  4942              LDR      r1,|L8.452|
0000bc  4091              LSLS     r1,r1,r2              ;698
0000be  4201              TST      r1,r0                 ;698
0000c0  d004              BEQ      |L8.204|
0000c2  6da2              LDR      r2,[r4,#0x58]         ;701
0000c4  f0420204          ORR      r2,r2,#4              ;701
0000c8  65a2              STR      r2,[r4,#0x58]         ;701
0000ca  60a9              STR      r1,[r5,#8]            ;704
                  |L8.204|
0000cc  ea100f08          TST      r0,r8                 ;704
0000d0  bf04              ITT      EQ                    ;704
0000d2  6da0              LDREQ    r0,[r4,#0x58]         ;704
0000d4  f0100f01          TSTEQ    r0,#1                 ;704
0000d8  d0c2              BEQ      |L8.96|
0000da  6da0              LDR      r0,[r4,#0x58]         ;708
0000dc  f04f0830          MOV      r8,#0x30              ;715
0000e0  2800              CMP      r0,#0                 ;708
0000e2  bf1c              ITT      NE                    ;710
0000e4  6da0              LDRNE    r0,[r4,#0x58]         ;710
0000e6  f0100f01          TSTNE    r0,#1                 ;710
0000ea  d053              BEQ      |L8.404|
0000ec  f8d4a05c          LDR      r10,[r4,#0x5c]        ;708
0000f0  f7fffffe          BL       HAL_GetTick
0000f4  4607              MOV      r7,r0                 ;708
0000f6  6ba0              LDR      r0,[r4,#0x38]         ;708
0000f8  2802              CMP      r0,#2                 ;708
0000fa  d003              BEQ      |L8.260|
0000fc  2080              MOVS     r0,#0x80              ;708
0000fe  65a0              STR      r0,[r4,#0x58]         ;708
000100  6366              STR      r6,[r4,#0x34]         ;708
000102  e03b              B        |L8.380|
                  |L8.260|
000104  6820              LDR      r0,[r4,#0]            ;708
000106  6801              LDR      r1,[r0,#0]            ;708
000108  f0210116          BIC      r1,r1,#0x16           ;708
00010c  6001              STR      r1,[r0,#0]            ;708
00010e  6820              LDR      r0,[r4,#0]            ;708
000110  6941              LDR      r1,[r0,#0x14]         ;708
000112  f0210180          BIC      r1,r1,#0x80           ;708
000116  6141              STR      r1,[r0,#0x14]         ;708
000118  6c60              LDR      r0,[r4,#0x44]         ;708
00011a  2800              CMP      r0,#0                 ;708
00011c  bf04              ITT      EQ                    ;708
00011e  6ce0              LDREQ    r0,[r4,#0x4c]         ;708
000120  2800              CMPEQ    r0,#0                 ;708
000122  d004              BEQ      |L8.302|
000124  6820              LDR      r0,[r4,#0]            ;708
000126  6801              LDR      r1,[r0,#0]            ;708
000128  f0210108          BIC      r1,r1,#8              ;708
00012c  6001              STR      r1,[r0,#0]            ;708
                  |L8.302|
00012e  6820              LDR      r0,[r4,#0]            ;708
000130  6801              LDR      r1,[r0,#0]            ;708
000132  f0210101          BIC      r1,r1,#1              ;708
000136  6001              STR      r1,[r0,#0]            ;708
000138  6820              LDR      r0,[r4,#0]            ;708
00013a  e000              B        |L8.318|
                  |L8.316|
00013c  e026              B        |L8.396|
                  |L8.318|
00013e  6800              LDR      r0,[r0,#0]            ;708
000140  f0100f01          TST      r0,#1                 ;708
000144  d010              BEQ      |L8.360|
000146  bf00              NOP                            ;708
                  |L8.328|
000148  f7fffffe          BL       HAL_GetTick
00014c  1bc0              SUBS     r0,r0,r7              ;708
00014e  2805              CMP      r0,#5                 ;708
000150  d905              BLS      |L8.350|
000152  2003              MOVS     r0,#3                 ;708
000154  f8c4b058          STR      r11,[r4,#0x58]        ;708
000158  6366              STR      r6,[r4,#0x34]         ;708
00015a  63a0              STR      r0,[r4,#0x38]         ;708
00015c  e00e              B        |L8.380|
                  |L8.350|
00015e  6820              LDR      r0,[r4,#0]            ;708
000160  6800              LDR      r0,[r0,#0]            ;708
000162  f0100f01          TST      r0,#1                 ;708
000166  d1ef              BNE      |L8.328|
                  |L8.360|
000168  f8940060          LDRB     r0,[r4,#0x60]         ;708
00016c  213f              MOVS     r1,#0x3f              ;708
00016e  fa01f000          LSL      r0,r1,r0              ;708
000172  f8ca0008          STR      r0,[r10,#8]           ;708
000176  f8c49038          STR      r9,[r4,#0x38]         ;708
00017a  6366              STR      r6,[r4,#0x34]         ;708
                  |L8.380|
00017c  f8940060          LDRB     r0,[r4,#0x60]         ;715
000180  fa08f000          LSL      r0,r8,r0              ;715
000184  60a8              STR      r0,[r5,#8]            ;715
000186  f8c49038          STR      r9,[r4,#0x38]         ;721
00018a  6366              STR      r6,[r4,#0x34]         ;721
                  |L8.396|
00018c  b003              ADD      sp,sp,#0xc
00018e  2001              MOVS     r0,#1                 ;723
000190  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.404|
000194  f1ba0f00          CMP      r10,#0                ;728
000198  d008              BEQ      |L8.428|
00019a  f8941060          LDRB     r1,[r4,#0x60]         ;741
00019e  2010              MOVS     r0,#0x10              ;741
0001a0  4088              LSLS     r0,r0,r1              ;741
0001a2  60a8              STR      r0,[r5,#8]            ;741
                  |L8.420|
0001a4  9801              LDR      r0,[sp,#4]            ;744
0001a6  b003              ADD      sp,sp,#0xc
0001a8  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.428|
0001ac  f8940060          LDRB     r0,[r4,#0x60]         ;731
0001b0  fa08f000          LSL      r0,r8,r0              ;731
0001b4  60a8              STR      r0,[r5,#8]            ;731
0001b6  f8c49038          STR      r9,[r4,#0x38]         ;736
0001ba  6366              STR      r6,[r4,#0x34]         ;736
0001bc  e7f2              B        |L8.420|
;;;746    
                          ENDP

0001be  0000              DCW      0x0000
                  |L8.448|
                          DCD      0x00800001
                  |L8.452|
                          DCD      0x00800004

                          AREA ||i.HAL_DMA_RegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_RegisterCallback PROC
;;;973      */                      
;;;974    HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
000000  f8d0c034          LDR      r12,[r0,#0x34]
;;;975    {
;;;976    
;;;977      HAL_StatusTypeDef status = HAL_OK;
000004  2300              MOVS     r3,#0
;;;978    
;;;979      /* Process locked */
;;;980      __HAL_LOCK(hdma);
000006  f1bc0f01          CMP      r12,#1
00000a  bf04              ITT      EQ
00000c  2002              MOVEQ    r0,#2
;;;981    
;;;982      if(HAL_DMA_STATE_READY == hdma->State)
;;;983      {
;;;984        switch (CallbackID)
;;;985        {
;;;986        case  HAL_DMA_XFER_CPLT_CB_ID:
;;;987          hdma->XferCpltCallback = pCallback;
;;;988          break;
;;;989          
;;;990        case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;991          hdma->XferHalfCpltCallback = pCallback;
;;;992          break;
;;;993          
;;;994        case  HAL_DMA_XFER_M1CPLT_CB_ID:
;;;995          hdma->XferM1CpltCallback = pCallback;
;;;996          break;
;;;997          
;;;998        case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
;;;999          hdma->XferM1HalfCpltCallback = pCallback;
;;;1000         break;
;;;1001         
;;;1002       case  HAL_DMA_XFER_ERROR_CB_ID:
;;;1003         hdma->XferErrorCallback = pCallback;
;;;1004         break;
;;;1005         
;;;1006       case  HAL_DMA_XFER_ABORT_CB_ID:
;;;1007         hdma->XferAbortCallback = pCallback;
;;;1008         break;
;;;1009         
;;;1010       default:
;;;1011         break;
;;;1012       }
;;;1013     }
;;;1014     else
;;;1015     {
;;;1016       /* Return error status */
;;;1017       status =  HAL_ERROR;
;;;1018     }
;;;1019   
;;;1020     /* Release Lock */
;;;1021     __HAL_UNLOCK(hdma);
;;;1022     
;;;1023     return status;
;;;1024   }
00000e  4770              BXEQ     lr
000010  f84d4d04          PUSH.W   {r4}                  ;975
000014  6b84              LDR      r4,[r0,#0x38]         ;982
000016  f04f0c01          MOV      r12,#1                ;980
00001a  f8c0c034          STR      r12,[r0,#0x34]        ;982
00001e  2c01              CMP      r4,#1                 ;982
000020  bf18              IT       NE                    ;1017
000022  2301              MOVNE    r3,#1                 ;1017
000024  d005              BEQ      |L9.50|
                  |L9.38|
000026  2100              MOVS     r1,#0                 ;1021
000028  6341              STR      r1,[r0,#0x34]         ;1023
00002a  f85d4b04          POP.W    {r4}
00002e  4618              MOV      r0,r3                 ;1023
000030  4770              BX       lr
                  |L9.50|
000032  2906              CMP      r1,#6                 ;984
000034  d2f7              BCS      |L9.38|
000036  e8dff001          TBB      [pc,r1]               ;984
00003a  0305              DCB      0x03,0x05
00003c  07090b0d          DCB      0x07,0x09,0x0b,0x0d
000040  6402              STR      r2,[r0,#0x40]         ;988
000042  e7f0              B        |L9.38|
000044  6442              STR      r2,[r0,#0x44]         ;992
000046  e7ee              B        |L9.38|
000048  6482              STR      r2,[r0,#0x48]         ;996
00004a  e7ec              B        |L9.38|
00004c  64c2              STR      r2,[r0,#0x4c]         ;1000
00004e  e7ea              B        |L9.38|
000050  6502              STR      r2,[r0,#0x50]         ;1004
000052  e7e8              B        |L9.38|
000054  6542              STR      r2,[r0,#0x54]         ;1008
000056  e7e6              B        |L9.38|
;;;1025   
                          ENDP


                          AREA ||i.HAL_DMA_Start||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start PROC
;;;412      */
;;;413    HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b470              PUSH     {r4-r6}
;;;414    {
;;;415      HAL_StatusTypeDef status = HAL_OK;
;;;416      
;;;417      /* Check the parameters */
;;;418      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;419    
;;;420      /* Process locked */
;;;421      __HAL_LOCK(hdma);
000002  6b44              LDR      r4,[r0,#0x34]
000004  f04f0c00          MOV      r12,#0                ;415
000008  2c01              CMP      r4,#1
00000a  bf02              ITTT     EQ
00000c  2002              MOVEQ    r0,#2
;;;422    
;;;423      if(HAL_DMA_STATE_READY == hdma->State)
;;;424      {
;;;425        /* Change DMA peripheral state */
;;;426        hdma->State = HAL_DMA_STATE_BUSY;
;;;427        
;;;428        /* Initialize the error code */
;;;429        hdma->ErrorCode = HAL_DMA_ERROR_NONE;    
;;;430        
;;;431        /* Configure the source, destination address and the data length */
;;;432        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;433    
;;;434        /* Enable the Peripheral */
;;;435        __HAL_DMA_ENABLE(hdma);
;;;436      }
;;;437      else
;;;438      {
;;;439        /* Process unlocked */
;;;440        __HAL_UNLOCK(hdma);
;;;441        
;;;442        /* Return error status */
;;;443        status = HAL_BUSY;
;;;444      } 
;;;445      return status; 
;;;446    }
00000e  bc70              POPEQ    {r4-r6}
000010  4770              BXEQ     lr
000012  6b86              LDR      r6,[r0,#0x38]         ;423
000014  2501              MOVS     r5,#1                 ;421
000016  6345              STR      r5,[r0,#0x34]         ;423
000018  2400              MOVS     r4,#0                 ;421
00001a  2e01              CMP      r6,#1                 ;423
00001c  bf1c              ITT      NE                    ;443
00001e  f04f0c02          MOVNE    r12,#2                ;443
000022  6344              STRNE    r4,[r0,#0x34]         ;440
000024  d002              BEQ      |L10.44|
                  |L10.38|
000026  bc70              POP      {r4-r6}
000028  4660              MOV      r0,r12                ;445
00002a  4770              BX       lr
                  |L10.44|
00002c  2502              MOVS     r5,#2                 ;426
00002e  6385              STR      r5,[r0,#0x38]         ;426
000030  6584              STR      r4,[r0,#0x58]         ;429
000032  6804              LDR      r4,[r0,#0]            ;429
000034  6825              LDR      r5,[r4,#0]            ;429
000036  f4252580          BIC      r5,r5,#0x40000        ;429
00003a  6025              STR      r5,[r4,#0]            ;429
00003c  6804              LDR      r4,[r0,#0]            ;429
00003e  6063              STR      r3,[r4,#4]            ;429
000040  6883              LDR      r3,[r0,#8]            ;429
000042  2b40              CMP      r3,#0x40              ;429
000044  6803              LDR      r3,[r0,#0]            ;429
000046  bf03              ITTTE    EQ                    ;429
000048  609a              STREQ    r2,[r3,#8]            ;429
00004a  6802              LDREQ    r2,[r0,#0]            ;429
00004c  60d1              STREQ    r1,[r2,#0xc]          ;429
00004e  6099              STRNE    r1,[r3,#8]            ;429
000050  bf1c              ITT      NE                    ;429
000052  6801              LDRNE    r1,[r0,#0]            ;429
000054  60ca              STRNE    r2,[r1,#0xc]          ;429
000056  6800              LDR      r0,[r0,#0]            ;435
000058  6801              LDR      r1,[r0,#0]            ;435
00005a  f0410101          ORR      r1,r1,#1              ;435
00005e  6001              STR      r1,[r0,#0]            ;435
000060  e7e1              B        |L10.38|
;;;447    
                          ENDP


                          AREA ||i.HAL_DMA_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start_IT PROC
;;;456      */
;;;457    HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b4f0              PUSH     {r4-r7}
;;;458    {
;;;459      HAL_StatusTypeDef status = HAL_OK;
;;;460    
;;;461      /* calculate DMA base and stream number */
;;;462      DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
;;;463      
;;;464      /* Check the parameters */
;;;465      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;466     
;;;467      /* Process locked */
;;;468      __HAL_LOCK(hdma);
000002  6b44              LDR      r4,[r0,#0x34]
000004  f04f0c00          MOV      r12,#0                ;459
000008  2c01              CMP      r4,#1
00000a  6dc4              LDR      r4,[r0,#0x5c]         ;462
00000c  bf02              ITTT     EQ
00000e  2002              MOVEQ    r0,#2
;;;469      
;;;470      if(HAL_DMA_STATE_READY == hdma->State)
;;;471      {
;;;472        /* Change DMA peripheral state */
;;;473        hdma->State = HAL_DMA_STATE_BUSY;
;;;474        
;;;475        /* Initialize the error code */
;;;476        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;477        
;;;478        /* Configure the source, destination address and the data length */
;;;479        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;480        
;;;481        /* Clear all interrupt flags at correct offset within the register */
;;;482        regs->IFCR = 0x3FU << hdma->StreamIndex;
;;;483        
;;;484        /* Enable Common interrupts*/
;;;485        hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
;;;486        hdma->Instance->FCR |= DMA_IT_FE;
;;;487        
;;;488        if(hdma->XferHalfCpltCallback != NULL)
;;;489        {
;;;490          hdma->Instance->CR  |= DMA_IT_HT;
;;;491        }
;;;492        
;;;493        /* Enable the Peripheral */
;;;494        __HAL_DMA_ENABLE(hdma);
;;;495      }
;;;496      else
;;;497      {
;;;498        /* Process unlocked */
;;;499        __HAL_UNLOCK(hdma);	  
;;;500        
;;;501        /* Return error status */
;;;502        status = HAL_BUSY;
;;;503      }
;;;504      
;;;505      return status;
;;;506    }
000010  bcf0              POPEQ    {r4-r7}
000012  4770              BXEQ     lr
000014  6b87              LDR      r7,[r0,#0x38]         ;470
000016  2601              MOVS     r6,#1                 ;468
000018  6346              STR      r6,[r0,#0x34]         ;470
00001a  2500              MOVS     r5,#0                 ;468
00001c  2f01              CMP      r7,#1                 ;470
00001e  bf1c              ITT      NE                    ;502
000020  f04f0c02          MOVNE    r12,#2                ;502
000024  6345              STRNE    r5,[r0,#0x34]         ;499
000026  d002              BEQ      |L11.46|
                  |L11.40|
000028  bcf0              POP      {r4-r7}
00002a  4660              MOV      r0,r12                ;505
00002c  4770              BX       lr
                  |L11.46|
00002e  2602              MOVS     r6,#2                 ;473
000030  6386              STR      r6,[r0,#0x38]         ;473
000032  6585              STR      r5,[r0,#0x58]         ;476
000034  6805              LDR      r5,[r0,#0]            ;476
000036  682e              LDR      r6,[r5,#0]            ;476
000038  f4262680          BIC      r6,r6,#0x40000        ;476
00003c  602e              STR      r6,[r5,#0]            ;476
00003e  6805              LDR      r5,[r0,#0]            ;476
000040  606b              STR      r3,[r5,#4]            ;476
000042  6883              LDR      r3,[r0,#8]            ;476
000044  2b40              CMP      r3,#0x40              ;476
000046  6803              LDR      r3,[r0,#0]            ;476
000048  bf03              ITTTE    EQ                    ;476
00004a  609a              STREQ    r2,[r3,#8]            ;476
00004c  6802              LDREQ    r2,[r0,#0]            ;476
00004e  60d1              STREQ    r1,[r2,#0xc]          ;476
000050  6099              STRNE    r1,[r3,#8]            ;476
000052  bf1c              ITT      NE                    ;476
000054  6801              LDRNE    r1,[r0,#0]            ;476
000056  60ca              STRNE    r2,[r1,#0xc]          ;476
000058  f8901060          LDRB     r1,[r0,#0x60]         ;482
00005c  223f              MOVS     r2,#0x3f              ;482
00005e  fa02f101          LSL      r1,r2,r1              ;482
000062  60a1              STR      r1,[r4,#8]            ;482
000064  6801              LDR      r1,[r0,#0]            ;485
000066  680a              LDR      r2,[r1,#0]            ;485
000068  f0420216          ORR      r2,r2,#0x16           ;485
00006c  600a              STR      r2,[r1,#0]            ;485
00006e  6801              LDR      r1,[r0,#0]            ;486
000070  694a              LDR      r2,[r1,#0x14]         ;486
000072  f0420280          ORR      r2,r2,#0x80           ;486
000076  614a              STR      r2,[r1,#0x14]         ;486
000078  6c41              LDR      r1,[r0,#0x44]         ;486
00007a  b121              CBZ      r1,|L11.134|
00007c  6801              LDR      r1,[r0,#0]            ;490
00007e  680a              LDR      r2,[r1,#0]            ;490
000080  f0420208          ORR      r2,r2,#8              ;490
000084  600a              STR      r2,[r1,#0]            ;490
                  |L11.134|
000086  6800              LDR      r0,[r0,#0]            ;494
000088  6801              LDR      r1,[r0,#0]            ;494
00008a  f0410101          ORR      r1,r1,#1              ;494
00008e  6001              STR      r1,[r0,#0]            ;494
000090  e7ca              B        |L11.40|
;;;507    
                          ENDP


                          AREA ||i.HAL_DMA_UnRegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_UnRegisterCallback PROC
;;;1033     */              
;;;1034   HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
000000  6b42              LDR      r2,[r0,#0x34]
;;;1035   {
;;;1036     HAL_StatusTypeDef status = HAL_OK;
000002  2300              MOVS     r3,#0
;;;1037     
;;;1038     /* Process locked */
;;;1039     __HAL_LOCK(hdma);
000004  2a01              CMP      r2,#1
000006  bf04              ITT      EQ
000008  2002              MOVEQ    r0,#2
;;;1040     
;;;1041     if(HAL_DMA_STATE_READY == hdma->State)
;;;1042     {
;;;1043       switch (CallbackID)
;;;1044       {
;;;1045       case  HAL_DMA_XFER_CPLT_CB_ID:
;;;1046         hdma->XferCpltCallback = NULL;
;;;1047         break;
;;;1048         
;;;1049       case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;1050         hdma->XferHalfCpltCallback = NULL;
;;;1051         break;
;;;1052         
;;;1053       case  HAL_DMA_XFER_M1CPLT_CB_ID:
;;;1054         hdma->XferM1CpltCallback = NULL;
;;;1055         break;
;;;1056         
;;;1057       case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
;;;1058         hdma->XferM1HalfCpltCallback = NULL;
;;;1059         break;
;;;1060         
;;;1061       case  HAL_DMA_XFER_ERROR_CB_ID:
;;;1062         hdma->XferErrorCallback = NULL;
;;;1063         break;
;;;1064         
;;;1065       case  HAL_DMA_XFER_ABORT_CB_ID:
;;;1066         hdma->XferAbortCallback = NULL;
;;;1067         break; 
;;;1068         
;;;1069       case   HAL_DMA_XFER_ALL_CB_ID:
;;;1070         hdma->XferCpltCallback = NULL;
;;;1071         hdma->XferHalfCpltCallback = NULL;
;;;1072         hdma->XferM1CpltCallback = NULL;
;;;1073         hdma->XferM1HalfCpltCallback = NULL;
;;;1074         hdma->XferErrorCallback = NULL;
;;;1075         hdma->XferAbortCallback = NULL;
;;;1076         break; 
;;;1077         
;;;1078       default:
;;;1079         status = HAL_ERROR;
;;;1080         break;
;;;1081       }
;;;1082     }
;;;1083     else
;;;1084     {
;;;1085       status = HAL_ERROR;
;;;1086     }
;;;1087     
;;;1088     /* Release Lock */
;;;1089     __HAL_UNLOCK(hdma);
;;;1090     
;;;1091     return status;
;;;1092   }
00000a  4770              BXEQ     lr
00000c  f84d4d04          PUSH.W   {r4}                  ;1035
000010  6b84              LDR      r4,[r0,#0x38]         ;1041
000012  2200              MOVS     r2,#0                 ;1039
000014  f04f0c01          MOV      r12,#1                ;1039
000018  f8c0c034          STR      r12,[r0,#0x34]        ;1041
00001c  2c01              CMP      r4,#1                 ;1041
00001e  d11a              BNE      |L12.86|
000020  2907              CMP      r1,#7                 ;1043
000022  d218              BCS      |L12.86|
000024  e8dff001          TBB      [pc,r1]               ;1043
000028  0406080a          DCB      0x04,0x06,0x08,0x0a
00002c  0c0e1000          DCB      0x0c,0x0e,0x10,0x00
000030  6402              STR      r2,[r0,#0x40]         ;1047
000032  e011              B        |L12.88|
000034  6442              STR      r2,[r0,#0x44]         ;1051
000036  e00f              B        |L12.88|
000038  6482              STR      r2,[r0,#0x48]         ;1055
00003a  e00d              B        |L12.88|
00003c  64c2              STR      r2,[r0,#0x4c]         ;1059
00003e  e00b              B        |L12.88|
000040  6502              STR      r2,[r0,#0x50]         ;1063
000042  e009              B        |L12.88|
000044  6542              STR      r2,[r0,#0x54]         ;1067
000046  e007              B        |L12.88|
000048  6402              STR      r2,[r0,#0x40]         ;1071
00004a  6442              STR      r2,[r0,#0x44]         ;1072
00004c  6482              STR      r2,[r0,#0x48]         ;1073
00004e  64c2              STR      r2,[r0,#0x4c]         ;1074
000050  6502              STR      r2,[r0,#0x50]         ;1075
000052  6542              STR      r2,[r0,#0x54]         ;1076
000054  e000              B        |L12.88|
                  |L12.86|
000056  2301              MOVS     r3,#1                 ;1079
                  |L12.88|
000058  6342              STR      r2,[r0,#0x34]         ;1091
00005a  f85d4b04          POP.W    {r4}
00005e  4618              MOV      r0,r3                 ;1091
000060  4770              BX       lr
;;;1093   
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  flagBitshiftOffset
000000  00061016          DCB      0x00,0x06,0x10,0x16
000004  00061016          DCB      0x00,0x06,0x10,0x16

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_dma_c_c25f65ec____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32F7xx_HAL_Driver\\Core\\cmsis_armcc.h"
|__asm___19_stm32f7xx_hal_dma_c_c25f65ec____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_dma_c_c25f65ec____REVSH|
#line 402
|__asm___19_stm32f7xx_hal_dma_c_c25f65ec____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_dma_c_c25f65ec____RRX|
#line 587
|__asm___19_stm32f7xx_hal_dma_c_c25f65ec____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
