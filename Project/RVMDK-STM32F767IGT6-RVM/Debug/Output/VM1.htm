<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Debug\Output\VM1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Debug\Output\VM1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Thu Feb 22 18:21:41 2018
<BR><P>
<H3>Maximum Stack Usage =         88 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
RMP_Init &rArr; _RMP_Plat_Hook &rArr; RMP_Enable_Int &rArr; RMP_Print_Int &rArr; RMP_Putchar &rArr; RVM_Hyp_Print &rArr; RMP_Hypercall
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[7]">_RMP_Entry</a>
 <LI><a href="#[9]">_RMP_Fetch_And</a>
 <LI><a href="#[a]">RMP_MSB_Get</a>
 <LI><a href="#[b]">_RMP_Hypercall</a>
 <LI><a href="#[c]">_RMP_Yield</a>
 <LI><a href="#[d]">_RMP_Int_Rcv</a>
 <LI><a href="#[e]">_RMP_Start</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">Func_1</a> from test.o(i.Func_1) referenced from test.o(i.RMP_Init_Hook)
 <LI><a href="#[3]">Func_2</a> from test.o(i.Func_2) referenced from test.o(i.RMP_Init_Hook)
 <LI><a href="#[6]">RMP_Init</a> from kernel.o(i.RMP_Init) referenced from kernel.o(i.main)
 <LI><a href="#[5]">RMP_PendSV_Handler</a> from platform_cmx_rvm.o(i.RMP_PendSV_Handler) referenced from platform_cmx_rvm.o(i._RMP_Low_Level_Init)
 <LI><a href="#[4]">RMP_SysTick_Handler</a> from platform_cmx_rvm.o(i.RMP_SysTick_Handler) referenced from platform_cmx_rvm.o(i._RMP_Low_Level_Init)
 <LI><a href="#[7]">_RMP_Entry</a> from platform_cmx_rvm_asm.o(RESET) referenced from test.o(.constdata)
 <LI><a href="#[8]">_RMP_Int</a> from platform_cmx_rvm.o(i._RMP_Int) referenced from test.o(.constdata)
 <LI><a href="#[0]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from platform_cmx_rvm_asm.o(RESET)
 <LI><a href="#[1]">main</a> from kernel.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7]"></a>_RMP_Entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, platform_cmx_rvm_asm.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> test.o(.constdata)
</UL>
<P><STRONG><a name="[9]"></a>_RMP_Fetch_And</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, platform_cmx_rvm_asm.o(RESET))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_Int
</UL>

<P><STRONG><a name="[a]"></a>RMP_MSB_Get</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, platform_cmx_rvm_asm.o(RESET))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_Int
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_High_Rdy
</UL>

<P><STRONG><a name="[b]"></a>_RMP_Hypercall</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, platform_cmx_rvm_asm.o(RESET))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Hypercall
</UL>

<P><STRONG><a name="[c]"></a>_RMP_Yield</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, platform_cmx_rvm_asm.o(RESET))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Tick_Handler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Yield
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
</UL>

<P><STRONG><a name="[d]"></a>_RMP_Int_Rcv</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, platform_cmx_rvm_asm.o(RESET))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Int
</UL>

<P><STRONG><a name="[e]"></a>_RMP_Start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, platform_cmx_rvm_asm.o(RESET))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[0]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> platform_cmx_rvm_asm.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[40]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[41]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[42]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[43]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[10]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[44]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>Func_1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, test.o(i.Func_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Func_1 &rArr; Test_Mail_1 &rArr; RMP_Thd_Snd &rArr; _RMP_Dly_Ins
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Set
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Yield_1
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Sem_1
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mail_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(i.RMP_Init_Hook)
</UL>
<P><STRONG><a name="[3]"></a>Func_2</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, test.o(i.Func_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Func_2 &rArr; RMP_Print_Int &rArr; RMP_Putchar &rArr; RVM_Hyp_Print &rArr; RMP_Hypercall
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Set
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Print_String
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Print_Int
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Yield_2
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Sem_ISR
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Sem_2
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mail_ISR
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mail_2
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(i.RMP_Init_Hook)
</UL>
<P><STRONG><a name="[1b]"></a>Int_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test.o(i.Int_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2
</UL>

<P><STRONG><a name="[3d]"></a>RMP_Clear</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, kernel.o(i.RMP_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RMP_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>RMP_Enable_Int</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, platform_cmx_rvm.o(i.RMP_Enable_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = RMP_Enable_Int &rArr; RMP_Print_Int &rArr; RMP_Putchar &rArr; RVM_Hyp_Print &rArr; RMP_Hypercall
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Hypercall
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Print_String
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Print_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Plat_Hook
</UL>

<P><STRONG><a name="[6]"></a>RMP_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kernel.o(i.RMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = RMP_Init &rArr; _RMP_Plat_Hook &rArr; RMP_Enable_Int &rArr; RMP_Print_Int &rArr; RMP_Putchar &rArr; RVM_Hyp_Print &rArr; RMP_Hypercall
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Plat_Hook
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Idle
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Lock_Sched
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kernel.o(i.main)
</UL>
<P><STRONG><a name="[22]"></a>RMP_Init_Hook</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, test.o(i.RMP_Init_Hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = RMP_Init_Hook &rArr; RMP_Thd_Crt &rArr; RMP_Unlock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Crt
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[24]"></a>RMP_Init_Idle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test.o(i.RMP_Init_Idle))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[2d]"></a>RMP_List_Crt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kernel.o(i.RMP_List_Crt))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Crt
</UL>

<P><STRONG><a name="[33]"></a>RMP_List_Del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kernel.o(i.RMP_List_Del))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_High_Rdy
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Snd
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Rcv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Post
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Timer_Proc
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Clr_Rdy
</UL>

<P><STRONG><a name="[30]"></a>RMP_List_Ins</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kernel.o(i.RMP_List_Ins))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_High_Rdy
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Snd
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Pend
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Timer_Proc
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Set_Rdy
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Dly_Ins
</UL>

<P><STRONG><a name="[2a]"></a>RMP_Load_Ctx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kernel.o(i.RMP_Load_Ctx))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_PendSV_Handler
</UL>

<P><STRONG><a name="[20]"></a>RMP_Lock_Sched</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kernel.o(i.RMP_Lock_Sched))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Putchar
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Snd
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Set
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Rcv
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Post
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Pend
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Crt
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[18]"></a>RMP_Print_Int</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, kernel.o(i.RMP_Print_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = RMP_Print_Int &rArr; RMP_Putchar &rArr; RVM_Hyp_Print &rArr; RMP_Hypercall
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Enable_Int
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2
</UL>

<P><STRONG><a name="[17]"></a>RMP_Print_String</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, kernel.o(i.RMP_Print_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = RMP_Print_String &rArr; RMP_Putchar &rArr; RVM_Hyp_Print &rArr; RMP_Hypercall
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Enable_Int
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2
</UL>

<P><STRONG><a name="[2b]"></a>RMP_Putchar</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, platform_cmx_rvm.o(i.RMP_Putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = RMP_Putchar &rArr; RVM_Hyp_Print &rArr; RMP_Hypercall
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Print
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Lock_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Print_String
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Print_Int
</UL>

<P><STRONG><a name="[28]"></a>RMP_Save_Ctx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kernel.o(i.RMP_Save_Ctx))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_PendSV_Handler
</UL>

<P><STRONG><a name="[26]"></a>RMP_Sem_Crt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, kernel.o(i.RMP_Sem_Crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = RMP_Sem_Crt &rArr; RMP_Unlock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Lock_Sched
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Crt
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
</UL>

<P><STRONG><a name="[2e]"></a>RMP_Sem_Pend</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, kernel.o(i.RMP_Sem_Pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = RMP_Sem_Pend &rArr; _RMP_Dly_Ins
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Lock_Sched
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Ins
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Dly_Ins
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Clr_Rdy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Sem_ISR
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Sem_2
</UL>

<P><STRONG><a name="[32]"></a>RMP_Sem_Post</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, kernel.o(i.RMP_Sem_Post))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = RMP_Sem_Post &rArr; RMP_Unlock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Lock_Sched
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Del
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Set_Rdy
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Sem_1
</UL>

<P><STRONG><a name="[27]"></a>RMP_Thd_Crt</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, kernel.o(i.RMP_Thd_Crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = RMP_Thd_Crt &rArr; RMP_Unlock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Stack_Init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Lock_Sched
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Crt
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Set_Rdy
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
</UL>

<P><STRONG><a name="[37]"></a>RMP_Thd_Rcv</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, kernel.o(i.RMP_Thd_Rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = RMP_Thd_Rcv &rArr; _RMP_Dly_Ins
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Lock_Sched
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Del
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Set_Rdy
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Dly_Ins
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Clr_Rdy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mail_ISR
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mail_2
</UL>

<P><STRONG><a name="[13]"></a>RMP_Thd_Set</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, kernel.o(i.RMP_Thd_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = RMP_Thd_Set &rArr; RMP_Unlock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Lock_Sched
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Set_Rdy
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Clr_Rdy
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
</UL>

<P><STRONG><a name="[38]"></a>RMP_Thd_Snd</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, kernel.o(i.RMP_Thd_Snd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = RMP_Thd_Snd &rArr; _RMP_Dly_Ins
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unlock_Sched
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Lock_Sched
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Ins
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Del
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Set_Rdy
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Dly_Ins
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Clr_Rdy
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mail_1
</UL>

<P><STRONG><a name="[23]"></a>RMP_Unlock_Sched</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, kernel.o(i.RMP_Unlock_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = RMP_Unlock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Yield
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Putchar
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Snd
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Set
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Rcv
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Post
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Pend
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Crt
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[39]"></a>RMP_Yield</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, kernel.o(i.RMP_Yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = RMP_Yield
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Yield
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Yield_2
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Yield_1
</UL>

<P><STRONG><a name="[2c]"></a>RVM_Hyp_Print</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, platform_cmx_rvm.o(i.RVM_Hyp_Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = RVM_Hyp_Print &rArr; RMP_Hypercall
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Hypercall
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Putchar
</UL>

<P><STRONG><a name="[14]"></a>Test_Mail_1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, test.o(i.Test_Mail_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Test_Mail_1 &rArr; RMP_Thd_Snd &rArr; _RMP_Dly_Ins
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Snd
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
</UL>

<P><STRONG><a name="[19]"></a>Test_Mail_2</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, test.o(i.Test_Mail_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Test_Mail_2 &rArr; RMP_Thd_Rcv &rArr; _RMP_Dly_Ins
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Rcv
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2
</UL>

<P><STRONG><a name="[1c]"></a>Test_Mail_ISR</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, test.o(i.Test_Mail_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Test_Mail_ISR &rArr; RMP_Thd_Rcv &rArr; _RMP_Dly_Ins
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Rcv
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2
</UL>

<P><STRONG><a name="[15]"></a>Test_Sem_1</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, test.o(i.Test_Sem_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Test_Sem_1 &rArr; RMP_Sem_Post &rArr; RMP_Unlock_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Post
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
</UL>

<P><STRONG><a name="[1a]"></a>Test_Sem_2</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, test.o(i.Test_Sem_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Test_Sem_2 &rArr; RMP_Sem_Pend &rArr; _RMP_Dly_Ins
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Pend
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2
</UL>

<P><STRONG><a name="[1d]"></a>Test_Sem_ISR</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, test.o(i.Test_Sem_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Test_Sem_ISR &rArr; RMP_Sem_Pend &rArr; _RMP_Dly_Ins
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Pend
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2
</UL>

<P><STRONG><a name="[12]"></a>Test_Yield_1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, test.o(i.Test_Yield_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Test_Yield_1 &rArr; RMP_Yield
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Yield
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
</UL>

<P><STRONG><a name="[16]"></a>Test_Yield_2</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, test.o(i.Test_Yield_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Test_Yield_2 &rArr; RMP_Yield
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Yield
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2
</UL>

<P><STRONG><a name="[25]"></a>Timer_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test.o(i.Timer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
</UL>

<P><STRONG><a name="[29]"></a>_RMP_Get_High_Rdy</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, kernel.o(i._RMP_Get_High_Rdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _RMP_Get_High_Rdy &rArr; _RMP_Timer_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_MSB_Get
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Ins
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Del
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Timer_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_PendSV_Handler
</UL>

<P><STRONG><a name="[8]"></a>_RMP_Int</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, platform_cmx_rvm.o(i._RMP_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _RMP_Int &rArr; _RMP_Get_Int
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Int_Rcv
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_Int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>_RMP_Low_Level_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, platform_cmx_rvm.o(i._RMP_Low_Level_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>_RMP_Plat_Hook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, platform_cmx_rvm.o(i._RMP_Plat_Hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _RMP_Plat_Hook &rArr; RMP_Enable_Int &rArr; RMP_Print_Int &rArr; RMP_Putchar &rArr; RVM_Hyp_Print &rArr; RMP_Hypercall
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Enable_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[36]"></a>_RMP_Stack_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, platform_cmx_rvm.o(i._RMP_Stack_Init))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
</UL>

<P><STRONG><a name="[35]"></a>_RMP_Tick_Handler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, kernel.o(i._RMP_Tick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _RMP_Tick_Handler &rArr; _RMP_Timer_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Yield
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Timer_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_SysTick_Handler
</UL>

<P><STRONG><a name="[45]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[46]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[47]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1]"></a>main</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, kernel.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = main &rArr; RMP_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Start
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Ins
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Crt
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2f]"></a>_RMP_Clr_Rdy</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, kernel.o(i._RMP_Clr_Rdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _RMP_Clr_Rdy
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Del
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Snd
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Set
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Rcv
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Pend
</UL>

<P><STRONG><a name="[31]"></a>_RMP_Dly_Ins</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, kernel.o(i._RMP_Dly_Ins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _RMP_Dly_Ins
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Ins
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Snd
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Rcv
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Pend
</UL>

<P><STRONG><a name="[34]"></a>_RMP_Set_Rdy</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, kernel.o(i._RMP_Set_Rdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RMP_Set_Rdy
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Ins
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Snd
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Set
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Rcv
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Sem_Post
</UL>

<P><STRONG><a name="[3a]"></a>_RMP_Timer_Proc</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, kernel.o(i._RMP_Timer_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RMP_Timer_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Ins
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_List_Del
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Tick_Handler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_High_Rdy
</UL>

<P><STRONG><a name="[1f]"></a>RMP_Hypercall</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, platform_cmx_rvm.o(i.RMP_Hypercall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = RMP_Hypercall
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Hypercall
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Print
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Enable_Int
</UL>

<P><STRONG><a name="[5]"></a>RMP_PendSV_Handler</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, platform_cmx_rvm.o(i.RMP_PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = RMP_PendSV_Handler &rArr; _RMP_Get_High_Rdy &rArr; _RMP_Timer_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_High_Rdy
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Save_Ctx
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Load_Ctx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_cmx_rvm.o(i._RMP_Low_Level_Init)
</UL>
<P><STRONG><a name="[4]"></a>RMP_SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, platform_cmx_rvm.o(i.RMP_SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = RMP_SysTick_Handler &rArr; _RMP_Tick_Handler &rArr; _RMP_Timer_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Tick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_cmx_rvm.o(i._RMP_Low_Level_Init)
</UL>
<P><STRONG><a name="[3b]"></a>_RMP_Get_Int</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, platform_cmx_rvm.o(i._RMP_Get_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _RMP_Get_Int
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Fetch_And
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_MSB_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Int
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
