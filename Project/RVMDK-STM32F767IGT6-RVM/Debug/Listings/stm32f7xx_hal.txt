; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f7xx_hal.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f7xx_hal.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\..\Library\STM32F7xx_HAL_Driver\Core -I..\..\..\..\Library\STM32F7xx_HAL_Driver\Inc -I..\..\..\..\Library\STM32F7xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\32-Bit_MCU\STM32\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f7xx_hal.crf ..\..\..\..\Library\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal.c]
                          THUMB

                          AREA ||i.HAL_DBGMCU_DisableDBGSleepMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGSleepMode PROC
;;;397      */
;;;398    void HAL_DBGMCU_DisableDBGSleepMode(void)
000000  4803              LDR      r0,|L1.16|
;;;399    {
;;;400      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
000002  6840              LDR      r0,[r0,#4]
000004  f0200001          BIC      r0,r0,#1
000008  4901              LDR      r1,|L1.16|
00000a  6048              STR      r0,[r1,#4]
;;;401    }
00000c  4770              BX       lr
;;;402    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_DisableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGStandbyMode PROC
;;;433      */
;;;434    void HAL_DBGMCU_DisableDBGStandbyMode(void)
000000  4803              LDR      r0,|L2.16|
;;;435    {
;;;436      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6840              LDR      r0,[r0,#4]
000004  f0200004          BIC      r0,r0,#4
000008  4901              LDR      r1,|L2.16|
00000a  6048              STR      r0,[r1,#4]
;;;437    }
00000c  4770              BX       lr
;;;438    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_DisableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGStopMode PROC
;;;415      */
;;;416    void HAL_DBGMCU_DisableDBGStopMode(void)
000000  4803              LDR      r0,|L3.16|
;;;417    {
;;;418      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6840              LDR      r0,[r0,#4]
000004  f0200002          BIC      r0,r0,#2
000008  4901              LDR      r1,|L3.16|
00000a  6048              STR      r0,[r1,#4]
;;;419    }
00000c  4770              BX       lr
;;;420    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGSleepMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGSleepMode PROC
;;;388      */
;;;389    void HAL_DBGMCU_EnableDBGSleepMode(void)
000000  4803              LDR      r0,|L4.16|
;;;390    {
;;;391      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
000002  6840              LDR      r0,[r0,#4]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L4.16|
00000a  6048              STR      r0,[r1,#4]
;;;392    }
00000c  4770              BX       lr
;;;393    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGStandbyMode PROC
;;;424      */
;;;425    void HAL_DBGMCU_EnableDBGStandbyMode(void)
000000  4803              LDR      r0,|L5.16|
;;;426    {
;;;427      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6840              LDR      r0,[r0,#4]
000004  f0400004          ORR      r0,r0,#4
000008  4901              LDR      r1,|L5.16|
00000a  6048              STR      r0,[r1,#4]
;;;428    }
00000c  4770              BX       lr
;;;429    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGStopMode PROC
;;;406      */
;;;407    void HAL_DBGMCU_EnableDBGStopMode(void)
000000  4803              LDR      r0,|L6.16|
;;;408    {
;;;409      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6840              LDR      r0,[r0,#4]
000004  f0400002          ORR      r0,r0,#2
000008  4901              LDR      r1,|L6.16|
00000a  6048              STR      r0,[r1,#4]
;;;410    }
00000c  4770              BX       lr
;;;411    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DeInit PROC
;;;178      */
;;;179    HAL_StatusTypeDef HAL_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;180    {
;;;181      /* Reset of all peripherals */
;;;182      __HAL_RCC_APB1_FORCE_RESET();
000002  f04f30ff          MOV      r0,#0xffffffff
000006  490e              LDR      r1,|L7.64|
000008  6008              STR      r0,[r1,#0]
;;;183      __HAL_RCC_APB1_RELEASE_RESET();
00000a  2000              MOVS     r0,#0
00000c  6008              STR      r0,[r1,#0]
;;;184    
;;;185      __HAL_RCC_APB2_FORCE_RESET();
00000e  1e40              SUBS     r0,r0,#1
000010  1d09              ADDS     r1,r1,#4
000012  6008              STR      r0,[r1,#0]
;;;186      __HAL_RCC_APB2_RELEASE_RESET();
000014  2000              MOVS     r0,#0
000016  6008              STR      r0,[r1,#0]
;;;187    
;;;188      __HAL_RCC_AHB1_FORCE_RESET();
000018  1e40              SUBS     r0,r0,#1
00001a  4909              LDR      r1,|L7.64|
00001c  3910              SUBS     r1,r1,#0x10
00001e  6008              STR      r0,[r1,#0]
;;;189      __HAL_RCC_AHB1_RELEASE_RESET();
000020  2000              MOVS     r0,#0
000022  6008              STR      r0,[r1,#0]
;;;190    
;;;191      __HAL_RCC_AHB2_FORCE_RESET();
000024  1e40              SUBS     r0,r0,#1
000026  1d09              ADDS     r1,r1,#4
000028  6008              STR      r0,[r1,#0]
;;;192      __HAL_RCC_AHB2_RELEASE_RESET();
00002a  2000              MOVS     r0,#0
00002c  6008              STR      r0,[r1,#0]
;;;193    
;;;194      __HAL_RCC_AHB3_FORCE_RESET();
00002e  1e40              SUBS     r0,r0,#1
000030  1d09              ADDS     r1,r1,#4
000032  6008              STR      r0,[r1,#0]
;;;195      __HAL_RCC_AHB3_RELEASE_RESET();
000034  2000              MOVS     r0,#0
000036  6008              STR      r0,[r1,#0]
;;;196    
;;;197      /* De-Init the low level hardware */
;;;198      HAL_MspDeInit();
000038  f7fffffe          BL       HAL_MspDeInit
;;;199        
;;;200      /* Return function status */
;;;201      return HAL_OK;
00003c  2000              MOVS     r0,#0
;;;202    }
00003e  bd10              POP      {r4,pc}
;;;203    
                          ENDP

                  |L7.64|
                          DCD      0x40023820

                          AREA ||i.HAL_Delay||, CODE, READONLY, ALIGN=1

                  HAL_Delay PROC
;;;316      */
;;;317    __weak void HAL_Delay(__IO uint32_t Delay)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;318    {
;;;319      uint32_t tickstart = 0;
000002  2400              MOVS     r4,#0
;;;320      tickstart = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
000008  4604              MOV      r4,r0
;;;321      while((HAL_GetTick() - tickstart) < Delay)
00000a  bf00              NOP      
                  |L8.12|
00000c  f7fffffe          BL       HAL_GetTick
000010  1b00              SUBS     r0,r0,r4
000012  9900              LDR      r1,[sp,#0]
000014  4288              CMP      r0,r1
000016  d3f9              BCC      |L8.12|
;;;322      {
;;;323      }
;;;324    }
000018  bd38              POP      {r3-r5,pc}
;;;325    
                          ENDP


                          AREA ||i.HAL_DisableCompensationCell||, CODE, READONLY, ALIGN=2

                  HAL_DisableCompensationCell PROC
;;;455      */
;;;456    void HAL_DisableCompensationCell(void)
000000  4803              LDR      r0,|L9.16|
;;;457    {
;;;458      SYSCFG->CMPCR &= (uint32_t)~((uint32_t)SYSCFG_CMPCR_CMP_PD);
000002  6800              LDR      r0,[r0,#0]
000004  f0200001          BIC      r0,r0,#1
000008  4901              LDR      r1,|L9.16|
00000a  6008              STR      r0,[r1,#0]
;;;459    }
00000c  4770              BX       lr
;;;460    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40013820

                          AREA ||i.HAL_DisableFMCMemorySwapping||, CODE, READONLY, ALIGN=2

                  HAL_DisableFMCMemorySwapping PROC
;;;481      */
;;;482    void HAL_DisableFMCMemorySwapping(void)
000000  4803              LDR      r0,|L10.16|
;;;483    {
;;;484    
;;;485      SYSCFG->MEMRMP &= (uint32_t)~((uint32_t)SYSCFG_MEMRMP_SWP_FMC);
000002  6800              LDR      r0,[r0,#0]
000004  f4206040          BIC      r0,r0,#0xc00
000008  4901              LDR      r1,|L10.16|
00000a  6008              STR      r0,[r1,#0]
;;;486    }
00000c  4770              BX       lr
;;;487    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      0x40013800

                          AREA ||i.HAL_DisableMemorySwappingBank||, CODE, READONLY, ALIGN=2

                  HAL_DisableMemorySwappingBank PROC
;;;513    */
;;;514    void HAL_DisableMemorySwappingBank(void)
000000  4803              LDR      r0,|L11.16|
;;;515    {
;;;516      CLEAR_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_SWP_FB);
000002  6800              LDR      r0,[r0,#0]
000004  f4207080          BIC      r0,r0,#0x100
000008  4901              LDR      r1,|L11.16|
00000a  6008              STR      r0,[r1,#0]
;;;517    }
00000c  4770              BX       lr
;;;518    #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      0x40013800

                          AREA ||i.HAL_EnableCompensationCell||, CODE, READONLY, ALIGN=2

                  HAL_EnableCompensationCell PROC
;;;444      */
;;;445    void HAL_EnableCompensationCell(void)
000000  4803              LDR      r0,|L12.16|
;;;446    {
;;;447      SYSCFG->CMPCR |= SYSCFG_CMPCR_CMP_PD;
000002  6800              LDR      r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L12.16|
00000a  6008              STR      r0,[r1,#0]
;;;448    }
00000c  4770              BX       lr
;;;449    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      0x40013820

                          AREA ||i.HAL_EnableFMCMemorySwapping||, CODE, READONLY, ALIGN=2

                  HAL_EnableFMCMemorySwapping PROC
;;;468      */
;;;469    void HAL_EnableFMCMemorySwapping(void)
000000  4803              LDR      r0,|L13.16|
;;;470    {
;;;471      SYSCFG->MEMRMP |= SYSCFG_MEMRMP_SWP_FMC_0;
000002  6800              LDR      r0,[r0,#0]
000004  f4406080          ORR      r0,r0,#0x400
000008  4901              LDR      r1,|L13.16|
00000a  6008              STR      r0,[r1,#0]
;;;472    }
00000c  4770              BX       lr
;;;473    
                          ENDP

00000e  0000              DCW      0x0000
                  |L13.16|
                          DCD      0x40013800

                          AREA ||i.HAL_EnableMemorySwappingBank||, CODE, READONLY, ALIGN=2

                  HAL_EnableMemorySwappingBank PROC
;;;498    */
;;;499    void HAL_EnableMemorySwappingBank(void)
000000  4803              LDR      r0,|L14.16|
;;;500    {
;;;501      SET_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_SWP_FB);
000002  6800              LDR      r0,[r0,#0]
000004  f4407080          ORR      r0,r0,#0x100
000008  4901              LDR      r1,|L14.16|
00000a  6008              STR      r0,[r1,#0]
;;;502    }
00000c  4770              BX       lr
;;;503    
                          ENDP

00000e  0000              DCW      0x0000
                  |L14.16|
                          DCD      0x40013800

                          AREA ||i.HAL_GetDEVID||, CODE, READONLY, ALIGN=2

                  HAL_GetDEVID PROC
;;;379      */
;;;380    uint32_t HAL_GetDEVID(void)
000000  4802              LDR      r0,|L15.12|
;;;381    {
;;;382       return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
000002  6800              LDR      r0,[r0,#0]
000004  f3c0000b          UBFX     r0,r0,#0,#12
;;;383    }
000008  4770              BX       lr
;;;384    
                          ENDP

00000a  0000              DCW      0x0000
                  |L15.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_GetHalVersion||, CODE, READONLY, ALIGN=2

                  HAL_GetHalVersion PROC
;;;361      */
;;;362    uint32_t HAL_GetHalVersion(void)
000000  4800              LDR      r0,|L16.4|
;;;363    {
;;;364     return __STM32F7xx_HAL_VERSION;
;;;365    }
000002  4770              BX       lr
;;;366    
                          ENDP

                  |L16.4|
                          DCD      0x01010100

                          AREA ||i.HAL_GetREVID||, CODE, READONLY, ALIGN=2

                  HAL_GetREVID PROC
;;;370      */
;;;371    uint32_t HAL_GetREVID(void)
000000  4801              LDR      r0,|L17.8|
;;;372    {
;;;373       return((DBGMCU->IDCODE) >> 16U);
000002  6800              LDR      r0,[r0,#0]
000004  0c00              LSRS     r0,r0,#16
;;;374    }
000006  4770              BX       lr
;;;375    
                          ENDP

                  |L17.8|
                          DCD      0xe0042000

                          AREA ||i.HAL_GetTick||, CODE, READONLY, ALIGN=2

                  HAL_GetTick PROC
;;;300      */
;;;301    __weak uint32_t HAL_GetTick(void)
000000  4801              LDR      r0,|L18.8|
;;;302    {
;;;303      return uwTick;
000002  6800              LDR      r0,[r0,#0]  ; uwTick
;;;304    }
000004  4770              BX       lr
;;;305    
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      uwTick

                          AREA ||i.HAL_IncTick||, CODE, READONLY, ALIGN=2

                  HAL_IncTick PROC
;;;289      */
;;;290    __weak void HAL_IncTick(void)
000000  4802              LDR      r0,|L19.12|
;;;291    {
;;;292      uwTick++;
000002  6800              LDR      r0,[r0,#0]  ; uwTick
000004  1c40              ADDS     r0,r0,#1
000006  4901              LDR      r1,|L19.12|
000008  6008              STR      r0,[r1,#0]  ; uwTick
;;;293    }
00000a  4770              BX       lr
;;;294    
                          ENDP

                  |L19.12|
                          DCD      uwTick

                          AREA ||i.HAL_Init||, CODE, READONLY, ALIGN=2

                  HAL_Init PROC
;;;153      */
;;;154    HAL_StatusTypeDef HAL_Init(void)
000000  b510              PUSH     {r4,lr}
;;;155    {
;;;156      /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
;;;157    #if (ART_ACCLERATOR_ENABLE != 0)
;;;158       __HAL_FLASH_ART_ENABLE();
000002  4808              LDR      r0,|L20.36|
000004  6800              LDR      r0,[r0,#0]
000006  f4407000          ORR      r0,r0,#0x200
00000a  4906              LDR      r1,|L20.36|
00000c  6008              STR      r0,[r1,#0]
;;;159    #endif /* ART_ACCLERATOR_ENABLE */
;;;160    
;;;161      /* Set Interrupt Group Priority */
;;;162      HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
00000e  2005              MOVS     r0,#5
000010  f7fffffe          BL       HAL_NVIC_SetPriorityGrouping
;;;163    
;;;164      /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
;;;165      HAL_InitTick(TICK_INT_PRIORITY);
000014  200f              MOVS     r0,#0xf
000016  f7fffffe          BL       HAL_InitTick
;;;166      
;;;167      /* Init the low level hardware */
;;;168      HAL_MspInit();
00001a  f7fffffe          BL       HAL_MspInit
;;;169      
;;;170      /* Return function status */
;;;171      return HAL_OK;
00001e  2000              MOVS     r0,#0
;;;172    }
000020  bd10              POP      {r4,pc}
;;;173    
                          ENDP

000022  0000              DCW      0x0000
                  |L20.36|
                          DCD      0x40023c00

                          AREA ||i.HAL_InitTick||, CODE, READONLY, ALIGN=2

                  HAL_InitTick PROC
;;;241      */
;;;242    __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
000000  b570              PUSH     {r4-r6,lr}
;;;243    {
000002  4604              MOV      r4,r0
;;;244      /*Configure the SysTick to have interrupt in 1ms time basis*/
;;;245      HAL_SYSTICK_Config(SystemCoreClock/1000);
000004  4807              LDR      r0,|L21.36|
000006  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000008  f44f717a          MOV      r1,#0x3e8
00000c  fbb0f5f1          UDIV     r5,r0,r1
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       HAL_SYSTICK_Config
;;;246    
;;;247      /*Configure the SysTick IRQ priority */
;;;248      HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
000016  2200              MOVS     r2,#0
000018  4621              MOV      r1,r4
00001a  1e50              SUBS     r0,r2,#1
00001c  f7fffffe          BL       HAL_NVIC_SetPriority
;;;249    
;;;250      /* Return function status */
;;;251      return HAL_OK;
000020  2000              MOVS     r0,#0
;;;252    }
000022  bd70              POP      {r4-r6,pc}
;;;253    
                          ENDP

                  |L21.36|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_MspDeInit PROC
;;;218      */
;;;219    __weak void HAL_MspDeInit(void)
000000  4770              BX       lr
;;;220    {
;;;221      /* NOTE : This function Should not be modified, when the callback is needed,
;;;222                the HAL_MspDeInit could be implemented in the user file
;;;223       */ 
;;;224    }
;;;225    
                          ENDP


                          AREA ||i.HAL_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_MspInit PROC
;;;207      */
;;;208    __weak void HAL_MspInit(void)
000000  4770              BX       lr
;;;209    {
;;;210      /* NOTE : This function Should not be modified, when the callback is needed,
;;;211                the HAL_MspInit could be implemented in the user file
;;;212       */
;;;213    }
;;;214    
                          ENDP


                          AREA ||i.HAL_ResumeTick||, CODE, READONLY, ALIGN=1

                  HAL_ResumeTick PROC
;;;351      */
;;;352    __weak void HAL_ResumeTick(void)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;353    {
;;;354      /* Enable SysTick Interrupt */
;;;355      SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
000004  6900              LDR      r0,[r0,#0x10]
000006  f0400002          ORR      r0,r0,#2
00000a  f04f21e0          MOV      r1,#0xe000e000
00000e  6108              STR      r0,[r1,#0x10]
;;;356    }
000010  4770              BX       lr
;;;357    
                          ENDP


                          AREA ||i.HAL_SuspendTick||, CODE, READONLY, ALIGN=1

                  HAL_SuspendTick PROC
;;;335      */
;;;336    __weak void HAL_SuspendTick(void)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;337    {
;;;338      /* Disable SysTick Interrupt */
;;;339      SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
000004  6900              LDR      r0,[r0,#0x10]
000006  f0200002          BIC      r0,r0,#2
00000a  f04f21e0          MOV      r1,#0xe000e000
00000e  6108              STR      r0,[r1,#0x10]
;;;340    }
000010  4770              BX       lr
;;;341    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  uwTick
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f7xx_hal_c_HAL_Init____REV16|
#line 388 "..\\..\\..\\..\\Library\\STM32F7xx_HAL_Driver\\Core\\cmsis_armcc.h"
|__asm___15_stm32f7xx_hal_c_HAL_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f7xx_hal_c_HAL_Init____REVSH|
#line 402
|__asm___15_stm32f7xx_hal_c_HAL_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f7xx_hal_c_HAL_Init____RRX|
#line 587
|__asm___15_stm32f7xx_hal_c_HAL_Init____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
