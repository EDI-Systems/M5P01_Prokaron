; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\test.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\test.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Core -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-RVM\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\test.crf ..\..\MProkaron\Benchmark\test.c]
                          THUMB

                          AREA ||i.Func_1||, CODE, READONLY, ALIGN=2

                  Func_1 PROC
;;;67     
;;;68     void Func_1(void* Param)
000000  f7fffffe          BL       Test_Yield_1
;;;69     {
;;;70         Test_Yield_1();
;;;71         /* Change priority of thread 2 */
;;;72         RMP_Thd_Set(&Thd_2,2,RMP_MAX_SLICES);
000004  4a05              LDR      r2,|L1.28|
000006  2102              MOVS     r1,#2
000008  4805              LDR      r0,|L1.32|
00000a  f7fffffe          BL       RMP_Thd_Set
;;;73         Test_Mail_1();
00000e  f7fffffe          BL       Test_Mail_1
;;;74         Test_Sem_1();
000012  f7fffffe          BL       Test_Sem_1
;;;75         while(1);
000016  bf00              NOP      
                  |L1.24|
000018  e7fe              B        |L1.24|
;;;76     }
;;;77     /* End Function:Test_Yield ***************************************************/
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      0x000186a0
                  |L1.32|
                          DCD      Thd_2

                          AREA ||i.Func_2||, CODE, READONLY, ALIGN=2

                  Func_2 PROC
;;;146    
;;;147    void Func_2(void* Param)
000000  2000              MOVS     r0,#0
;;;148    {
;;;149        /* Yield tests */
;;;150        Total=0;
000002  493f              LDR      r1,|L2.256|
000004  6008              STR      r0,[r1,#0]  ; Total
;;;151        Test_Yield_2();
000006  f7fffffe          BL       Test_Yield_2
;;;152        RMP_PRINTK_S("Yield: ");
00000a  a03e              ADR      r0,|L2.260|
00000c  f7fffffe          BL       RMP_Print_String
;;;153        
;;;154        Yield_Time=Total/10000;
000010  483b              LDR      r0,|L2.256|
000012  6800              LDR      r0,[r0,#0]  ; Total
000014  f2427110          MOV      r1,#0x2710
000018  fbb0f0f1          UDIV     r0,r0,r1
00001c  493b              LDR      r1,|L2.268|
00001e  6008              STR      r0,[r1,#0]  ; Yield_Time
;;;155        RMP_PRINTK_I(Yield_Time);
000020  4608              MOV      r0,r1
000022  6800              LDR      r0,[r0,#0]  ; Yield_Time
000024  f7fffffe          BL       RMP_Print_Int
;;;156        RMP_PRINTK_S(" cycles.\r\n");
000028  a039              ADR      r0,|L2.272|
00002a  f7fffffe          BL       RMP_Print_String
;;;157        /* Change priority of thread 2, just in case */
;;;158        RMP_Thd_Set(&Thd_2,2,RMP_MAX_SLICES);
00002e  4a3b              LDR      r2,|L2.284|
000030  2102              MOVS     r1,#2
000032  483b              LDR      r0,|L2.288|
000034  f7fffffe          BL       RMP_Thd_Set
;;;159        
;;;160        /* Mailbox tests */
;;;161        Total=0;
000038  2000              MOVS     r0,#0
00003a  4931              LDR      r1,|L2.256|
00003c  6008              STR      r0,[r1,#0]  ; Total
;;;162        Test_Mail_2();
00003e  f7fffffe          BL       Test_Mail_2
;;;163        RMP_PRINTK_S("Mailbox: ");
000042  a038              ADR      r0,|L2.292|
000044  f7fffffe          BL       RMP_Print_String
;;;164        Mailbox_Time=Total/10000;
000048  482d              LDR      r0,|L2.256|
00004a  6800              LDR      r0,[r0,#0]  ; Total
00004c  f2427110          MOV      r1,#0x2710
000050  fbb0f0f1          UDIV     r0,r0,r1
000054  4936              LDR      r1,|L2.304|
000056  6008              STR      r0,[r1,#0]  ; Mailbox_Time
;;;165        RMP_PRINTK_I(Mailbox_Time);
000058  4608              MOV      r0,r1
00005a  6800              LDR      r0,[r0,#0]  ; Mailbox_Time
00005c  f7fffffe          BL       RMP_Print_Int
;;;166        RMP_PRINTK_S(" cycles.\r\n");
000060  a02b              ADR      r0,|L2.272|
000062  f7fffffe          BL       RMP_Print_String
;;;167        
;;;168        /* Semaphore tests */
;;;169        Total=0;
000066  2000              MOVS     r0,#0
000068  4925              LDR      r1,|L2.256|
00006a  6008              STR      r0,[r1,#0]  ; Total
;;;170        Test_Sem_2();
00006c  f7fffffe          BL       Test_Sem_2
;;;171        RMP_PRINTK_S("Semaphore: ");
000070  a030              ADR      r0,|L2.308|
000072  f7fffffe          BL       RMP_Print_String
;;;172        Semaphore_Time=Total/10000;
000076  4822              LDR      r0,|L2.256|
000078  6800              LDR      r0,[r0,#0]  ; Total
00007a  f2427110          MOV      r1,#0x2710
00007e  fbb0f0f1          UDIV     r0,r0,r1
000082  492f              LDR      r1,|L2.320|
000084  6008              STR      r0,[r1,#0]  ; Semaphore_Time
;;;173        RMP_PRINTK_I(Semaphore_Time);
000086  4608              MOV      r0,r1
000088  6800              LDR      r0,[r0,#0]  ; Semaphore_Time
00008a  f7fffffe          BL       RMP_Print_Int
;;;174        RMP_PRINTK_S(" cycles.\r\n");
00008e  a020              ADR      r0,|L2.272|
000090  f7fffffe          BL       RMP_Print_String
;;;175        
;;;176        /* Mailbox from interrupt tests */
;;;177        Total=0;
000094  2000              MOVS     r0,#0
000096  491a              LDR      r1,|L2.256|
000098  6008              STR      r0,[r1,#0]  ; Total
;;;178        Int_Init();
00009a  f7fffffe          BL       Int_Init
;;;179        Test_Mail_ISR();
00009e  f7fffffe          BL       Test_Mail_ISR
;;;180        
;;;181        /* Semaphore from interrupt tests */
;;;182        Temp=Total;
0000a2  4817              LDR      r0,|L2.256|
0000a4  6800              LDR      r0,[r0,#0]  ; Total
0000a6  4927              LDR      r1,|L2.324|
0000a8  6008              STR      r0,[r1,#0]  ; Temp
;;;183        Total=0;
0000aa  2000              MOVS     r0,#0
0000ac  4914              LDR      r1,|L2.256|
0000ae  6008              STR      r0,[r1,#0]  ; Total
;;;184        Test_Sem_ISR();
0000b0  f7fffffe          BL       Test_Sem_ISR
;;;185        
;;;186        RMP_PRINTK_S("Mailbox-ISR: ");
0000b4  a024              ADR      r0,|L2.328|
0000b6  f7fffffe          BL       RMP_Print_String
;;;187        Mailbox_ISR_Time=Temp/10000;
0000ba  4822              LDR      r0,|L2.324|
0000bc  6800              LDR      r0,[r0,#0]  ; Temp
0000be  f2427110          MOV      r1,#0x2710
0000c2  fbb0f0f1          UDIV     r0,r0,r1
0000c6  4924              LDR      r1,|L2.344|
0000c8  6008              STR      r0,[r1,#0]  ; Mailbox_ISR_Time
;;;188        RMP_PRINTK_I(Mailbox_ISR_Time);
0000ca  4608              MOV      r0,r1
0000cc  6800              LDR      r0,[r0,#0]  ; Mailbox_ISR_Time
0000ce  f7fffffe          BL       RMP_Print_Int
;;;189        RMP_PRINTK_S(" cycles.\r\n");
0000d2  a00f              ADR      r0,|L2.272|
0000d4  f7fffffe          BL       RMP_Print_String
;;;190        RMP_PRINTK_S("Semaphore-ISR: ");
0000d8  a020              ADR      r0,|L2.348|
0000da  f7fffffe          BL       RMP_Print_String
;;;191        Semaphore_ISR_Time=Total/10000;
0000de  4808              LDR      r0,|L2.256|
0000e0  6800              LDR      r0,[r0,#0]  ; Total
0000e2  f2427110          MOV      r1,#0x2710
0000e6  fbb0f0f1          UDIV     r0,r0,r1
0000ea  4920              LDR      r1,|L2.364|
0000ec  6008              STR      r0,[r1,#0]  ; Semaphore_ISR_Time
;;;192        RMP_PRINTK_I(Semaphore_ISR_Time);
0000ee  4608              MOV      r0,r1
0000f0  6800              LDR      r0,[r0,#0]  ; Semaphore_ISR_Time
0000f2  f7fffffe          BL       RMP_Print_Int
;;;193        RMP_PRINTK_S(" cycles.\r\n");
0000f6  a006              ADR      r0,|L2.272|
0000f8  f7fffffe          BL       RMP_Print_String
;;;194        
;;;195        while(1);
0000fc  bf00              NOP      
                  |L2.254|
0000fe  e7fe              B        |L2.254|
;;;196    }
;;;197    /* End Function:Func_2 *******************************************************/
                          ENDP

                  |L2.256|
                          DCD      Total
                  |L2.260|
000104  5969656c          DCB      "Yield: ",0
000108  643a2000
                  |L2.268|
                          DCD      Yield_Time
                  |L2.272|
000110  20637963          DCB      " cycles.\r\n",0
000114  6c65732e
000118  0d0a00  
00011b  00                DCB      0
                  |L2.284|
                          DCD      0x000186a0
                  |L2.288|
                          DCD      Thd_2
                  |L2.292|
000124  4d61696c          DCB      "Mailbox: ",0
000128  626f783a
00012c  2000    
00012e  00                DCB      0
00012f  00                DCB      0
                  |L2.304|
                          DCD      Mailbox_Time
                  |L2.308|
000134  53656d61          DCB      "Semaphore: ",0
000138  70686f72
00013c  653a2000
                  |L2.320|
                          DCD      Semaphore_Time
                  |L2.324|
                          DCD      Temp
                  |L2.328|
000148  4d61696c          DCB      "Mailbox-ISR: ",0
00014c  626f782d
000150  4953523a
000154  2000    
000156  00                DCB      0
000157  00                DCB      0
                  |L2.344|
                          DCD      Mailbox_ISR_Time
                  |L2.348|
00015c  53656d61          DCB      "Semaphore-ISR: ",0
000160  70686f72
000164  652d4953
000168  523a2000
                  |L2.364|
                          DCD      Semaphore_ISR_Time

                          AREA ||i.Int_Disable||, CODE, READONLY, ALIGN=1

                  Int_Disable PROC
;;;107    ******************************************************************************/
;;;108    void Int_Disable(void)
000000  4770              BX       lr
;;;109    {
;;;110        /* Reverse registration */
;;;111    
;;;112    }
;;;113    #endif
                          ENDP


                          AREA ||i.Int_Handler||, CODE, READONLY, ALIGN=2

                  Int_Handler PROC
;;;204    ******************************************************************************/
;;;205    void Int_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;206    {
;;;207        static cnt_t Count=0;
;;;208        
;;;209        if(Count<10000)
000002  481a              LDR      r0,|L4.108|
000004  6800              LDR      r0,[r0,#0]  ; Count
000006  f2427110          MOV      r1,#0x2710
00000a  4288              CMP      r0,r1
00000c  da12              BGE      |L4.52|
;;;210        {
;;;211            Count++;
00000e  4817              LDR      r0,|L4.108|
000010  6800              LDR      r0,[r0,#0]  ; Count
000012  1c40              ADDS     r0,r0,#1
000014  4915              LDR      r1,|L4.108|
000016  6008              STR      r0,[r1,#0]  ; Count
;;;212            Start=COUNTER_READ();
000018  f04f4080          MOV      r0,#0x40000000
00001c  6a40              LDR      r0,[r0,#0x24]
00001e  0040              LSLS     r0,r0,#1
000020  4913              LDR      r1,|L4.112|
000022  6008              STR      r0,[r1,#0]  ; Start
;;;213            if(RMP_Thd_Snd_ISR(&Thd_2, 1)<0)
000024  2101              MOVS     r1,#1
000026  4813              LDR      r0,|L4.116|
000028  f7fffffe          BL       RMP_Thd_Snd_ISR
00002c  2800              CMP      r0,#0
00002e  da1c              BGE      |L4.106|
;;;214                while(1);
000030  bf00              NOP      
                  |L4.50|
000032  e7fe              B        |L4.50|
                  |L4.52|
;;;215        }
;;;216        else if(Count<20000)
000034  480d              LDR      r0,|L4.108|
000036  6800              LDR      r0,[r0,#0]  ; Count
000038  f6446120          MOV      r1,#0x4e20
00003c  4288              CMP      r0,r1
00003e  da12              BGE      |L4.102|
;;;217        {
;;;218            Count++;
000040  480a              LDR      r0,|L4.108|
000042  6800              LDR      r0,[r0,#0]  ; Count
000044  1c40              ADDS     r0,r0,#1
000046  4909              LDR      r1,|L4.108|
000048  6008              STR      r0,[r1,#0]  ; Count
;;;219            Start=COUNTER_READ();
00004a  f04f4080          MOV      r0,#0x40000000
00004e  6a40              LDR      r0,[r0,#0x24]
000050  0040              LSLS     r0,r0,#1
000052  4907              LDR      r1,|L4.112|
000054  6008              STR      r0,[r1,#0]  ; Start
;;;220            if(RMP_Sem_Post_ISR(&Sem_1, 1)<0)
000056  2101              MOVS     r1,#1
000058  4807              LDR      r0,|L4.120|
00005a  f7fffffe          BL       RMP_Sem_Post_ISR
00005e  2800              CMP      r0,#0
000060  da03              BGE      |L4.106|
;;;221                while(1);
000062  bf00              NOP      
                  |L4.100|
000064  e7fe              B        |L4.100|
                  |L4.102|
;;;222        }
;;;223        else
;;;224            Int_Disable();
000066  f7fffffe          BL       Int_Disable
                  |L4.106|
;;;225    }
00006a  bd10              POP      {r4,pc}
;;;226    #endif
                          ENDP

                  |L4.108|
                          DCD      |symbol_number.52|
                  |L4.112|
                          DCD      Start
                  |L4.116|
                          DCD      Thd_2
                  |L4.120|
                          DCD      Sem_1

                          AREA ||i.Int_Init||, CODE, READONLY, ALIGN=1

                  Int_Init PROC
;;;94     ******************************************************************************/
;;;95     void Int_Init(void)
000000  4770              BX       lr
;;;96     {
;;;97         /* Interrupt generation is initialized too, here we only register our handler */
;;;98     }
;;;99     /* End Function:Int_Init *****************************************************/
                          ENDP


                          AREA ||i.RMP_Init_Hook||, CODE, READONLY, ALIGN=2

                  RMP_Init_Hook PROC
;;;234    ******************************************************************************/
;;;235    void RMP_Init_Hook(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;236    {
;;;237    #ifndef MINIMAL_SIZE
;;;238        /* Init the timer */
;;;239        Timer_Init();
000002  f7fffffe          BL       Timer_Init
;;;240        /* Create counting semaphore */
;;;241        RMP_Sem_Crt(&Sem_1,0);
000006  2100              MOVS     r1,#0
000008  480b              LDR      r0,|L6.56|
00000a  f7fffffe          BL       RMP_Sem_Crt
;;;242        /* Start threads */
;;;243        RMP_Thd_Crt(&Thd_1, Func_1, &Stack_1[238], (void*)0x12345678, 1, 5);
00000e  2005              MOVS     r0,#5
000010  2101              MOVS     r1,#1
000012  4b0a              LDR      r3,|L6.60|
000014  4a0a              LDR      r2,|L6.64|
000016  e9cd1000          STRD     r1,r0,[sp,#0]
00001a  490a              LDR      r1,|L6.68|
00001c  480a              LDR      r0,|L6.72|
00001e  f7fffffe          BL       RMP_Thd_Crt
;;;244        RMP_Thd_Crt(&Thd_2, Func_2, &Stack_2[238], (void*)0x87654321, 1, 5);
000022  2005              MOVS     r0,#5
000024  2101              MOVS     r1,#1
000026  4b09              LDR      r3,|L6.76|
000028  4a09              LDR      r2,|L6.80|
00002a  e9cd1000          STRD     r1,r0,[sp,#0]
00002e  4909              LDR      r1,|L6.84|
000030  4809              LDR      r0,|L6.88|
000032  f7fffffe          BL       RMP_Thd_Crt
;;;245    #endif
;;;246    }
000036  bd1c              POP      {r2-r4,pc}
;;;247    
                          ENDP

                  |L6.56|
                          DCD      Sem_1
                  |L6.60|
                          DCD      0x12345678
                  |L6.64|
                          DCD      Stack_1+0x3b8
                  |L6.68|
                          DCD      Func_1
                  |L6.72|
                          DCD      Thd_1
                  |L6.76|
                          DCD      0x87654321
                  |L6.80|
                          DCD      Stack_2+0x3b8
                  |L6.84|
                          DCD      Func_2
                  |L6.88|
                          DCD      Thd_2

                          AREA ||i.RMP_Init_Idle||, CODE, READONLY, ALIGN=1

                  RMP_Init_Idle PROC
;;;247    
;;;248    void RMP_Init_Idle(void)
000000  4770              BX       lr
;;;249    {
;;;250        return;
;;;251    }
;;;252    /* End Function:RMP_Init *****************************************************/
                          ENDP


                          AREA ||i.Test_Mail_1||, CODE, READONLY, ALIGN=2

                  Test_Mail_1 PROC
;;;45     
;;;46     void Test_Mail_1(void)
000000  b510              PUSH     {r4,lr}
;;;47     {
;;;48         cnt_t Count;
;;;49         for(Count=0;Count<10000;Count++)
000002  2400              MOVS     r4,#0
000004  e00b              B        |L8.30|
                  |L8.6|
;;;50         {
;;;51             /* Read counter here */
;;;52             Start=COUNTER_READ();
000006  f04f4080          MOV      r0,#0x40000000
00000a  6a40              LDR      r0,[r0,#0x24]
00000c  0040              LSLS     r0,r0,#1
00000e  4906              LDR      r1,|L8.40|
000010  6008              STR      r0,[r1,#0]  ; Start
;;;53             RMP_Thd_Snd(&Thd_2, 1, RMP_MAX_SLICES);
000012  4a06              LDR      r2,|L8.44|
000014  2101              MOVS     r1,#1
000016  4806              LDR      r0,|L8.48|
000018  f7fffffe          BL       RMP_Thd_Snd
00001c  1c64              ADDS     r4,r4,#1              ;49
                  |L8.30|
00001e  f2427010          MOV      r0,#0x2710            ;49
000022  4284              CMP      r4,r0                 ;49
000024  dbef              BLT      |L8.6|
;;;54         }
;;;55     }
000026  bd10              POP      {r4,pc}
;;;56     
                          ENDP

                  |L8.40|
                          DCD      Start
                  |L8.44|
                          DCD      0x000186a0
                  |L8.48|
                          DCD      Thd_2

                          AREA ||i.Test_Mail_2||, CODE, READONLY, ALIGN=2

                  Test_Mail_2 PROC
;;;96     
;;;97     void Test_Mail_2(void)
000000  b538              PUSH     {r3-r5,lr}
;;;98     {
;;;99         ptr_t Data;
;;;100        cnt_t Count;
;;;101        for(Count=0;Count<10000;Count++)
000002  2400              MOVS     r4,#0
000004  e014              B        |L9.48|
                  |L9.6|
;;;102        {
;;;103            RMP_Thd_Rcv(&Data, RMP_MAX_SLICES);
000006  490d              LDR      r1,|L9.60|
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       RMP_Thd_Rcv
;;;104            /* Read counter here */
;;;105            End=COUNTER_READ();
00000e  f04f4080          MOV      r0,#0x40000000
000012  6a40              LDR      r0,[r0,#0x24]
000014  0040              LSLS     r0,r0,#1
000016  490a              LDR      r1,|L9.64|
000018  6008              STR      r0,[r1,#0]  ; End
;;;106            Total+=(tim_t)(End-Start);
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]  ; End
00001e  4909              LDR      r1,|L9.68|
000020  6809              LDR      r1,[r1,#0]  ; Start
000022  1a40              SUBS     r0,r0,r1
000024  4908              LDR      r1,|L9.72|
000026  6809              LDR      r1,[r1,#0]  ; Total
000028  4408              ADD      r0,r0,r1
00002a  4907              LDR      r1,|L9.72|
00002c  6008              STR      r0,[r1,#0]  ; Total
00002e  1c64              ADDS     r4,r4,#1              ;101
                  |L9.48|
000030  f2427010          MOV      r0,#0x2710            ;101
000034  4284              CMP      r4,r0                 ;101
000036  dbe6              BLT      |L9.6|
;;;107        };
;;;108    }
000038  bd38              POP      {r3-r5,pc}
;;;109    
                          ENDP

00003a  0000              DCW      0x0000
                  |L9.60|
                          DCD      0x000186a0
                  |L9.64|
                          DCD      End
                  |L9.68|
                          DCD      Start
                  |L9.72|
                          DCD      Total

                          AREA ||i.Test_Mail_ISR||, CODE, READONLY, ALIGN=2

                  Test_Mail_ISR PROC
;;;121    
;;;122    void Test_Mail_ISR(void)
000000  b508              PUSH     {r3,lr}
;;;123    {
;;;124        ptr_t Data;
;;;125        static cnt_t Count;
;;;126        for(Count=0;Count<10000;Count++)
000002  2000              MOVS     r0,#0
000004  4911              LDR      r1,|L10.76|
000006  6008              STR      r0,[r1,#0]  ; Count
000008  e018              B        |L10.60|
                  |L10.10|
;;;127        {
;;;128            RMP_Thd_Rcv(&Data, RMP_MAX_SLICES);
00000a  4911              LDR      r1,|L10.80|
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       RMP_Thd_Rcv
;;;129            /* Read counter here */
;;;130            End=COUNTER_READ();
000012  f04f4080          MOV      r0,#0x40000000
000016  6a40              LDR      r0,[r0,#0x24]
000018  0040              LSLS     r0,r0,#1
00001a  490e              LDR      r1,|L10.84|
00001c  6008              STR      r0,[r1,#0]  ; End
;;;131            Total+=(tim_t)(End-Start);
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]  ; End
000022  490d              LDR      r1,|L10.88|
000024  6809              LDR      r1,[r1,#0]  ; Start
000026  1a40              SUBS     r0,r0,r1
000028  490c              LDR      r1,|L10.92|
00002a  6809              LDR      r1,[r1,#0]  ; Total
00002c  4408              ADD      r0,r0,r1
00002e  490b              LDR      r1,|L10.92|
000030  6008              STR      r0,[r1,#0]  ; Total
000032  4806              LDR      r0,|L10.76|
000034  6800              LDR      r0,[r0,#0]            ;126  ; Count
000036  1c40              ADDS     r0,r0,#1              ;126
000038  4904              LDR      r1,|L10.76|
00003a  6008              STR      r0,[r1,#0]            ;126  ; Count
                  |L10.60|
00003c  4803              LDR      r0,|L10.76|
00003e  6800              LDR      r0,[r0,#0]            ;126  ; Count
000040  f2427110          MOV      r1,#0x2710            ;126
000044  4288              CMP      r0,r1                 ;126
000046  dbe0              BLT      |L10.10|
;;;132        };
;;;133    }
000048  bd08              POP      {r3,pc}
;;;134    
                          ENDP

00004a  0000              DCW      0x0000
                  |L10.76|
                          DCD      Count
                  |L10.80|
                          DCD      0x000186a0
                  |L10.84|
                          DCD      End
                  |L10.88|
                          DCD      Start
                  |L10.92|
                          DCD      Total

                          AREA ||i.Test_Sem_1||, CODE, READONLY, ALIGN=2

                  Test_Sem_1 PROC
;;;56     
;;;57     void Test_Sem_1(void)
000000  b510              PUSH     {r4,lr}
;;;58     {
;;;59         cnt_t Count;
;;;60         for(Count=0;Count<10000;Count++)
000002  2400              MOVS     r4,#0
000004  e00a              B        |L11.28|
                  |L11.6|
;;;61         {
;;;62             /* Read counter here */
;;;63             Start=COUNTER_READ();
000006  f04f4080          MOV      r0,#0x40000000
00000a  6a40              LDR      r0,[r0,#0x24]
00000c  0040              LSLS     r0,r0,#1
00000e  4906              LDR      r1,|L11.40|
000010  6008              STR      r0,[r1,#0]  ; Start
;;;64             RMP_Sem_Post(&Sem_1, 1);
000012  2101              MOVS     r1,#1
000014  4805              LDR      r0,|L11.44|
000016  f7fffffe          BL       RMP_Sem_Post
00001a  1c64              ADDS     r4,r4,#1              ;60
                  |L11.28|
00001c  f2427010          MOV      r0,#0x2710            ;60
000020  4284              CMP      r4,r0                 ;60
000022  dbf0              BLT      |L11.6|
;;;65         }
;;;66     }
000024  bd10              POP      {r4,pc}
;;;67     
                          ENDP

000026  0000              DCW      0x0000
                  |L11.40|
                          DCD      Start
                  |L11.44|
                          DCD      Sem_1

                          AREA ||i.Test_Sem_2||, CODE, READONLY, ALIGN=2

                  Test_Sem_2 PROC
;;;109    
;;;110    void Test_Sem_2(void)
000000  b510              PUSH     {r4,lr}
;;;111    {
;;;112        cnt_t Count;
;;;113        for(Count=0;Count<10000;Count++)
000002  2400              MOVS     r4,#0
000004  e014              B        |L12.48|
                  |L12.6|
;;;114        {
;;;115            RMP_Sem_Pend(&Sem_1, RMP_MAX_SLICES);
000006  490d              LDR      r1,|L12.60|
000008  480d              LDR      r0,|L12.64|
00000a  f7fffffe          BL       RMP_Sem_Pend
;;;116            /* Read counter here */
;;;117            End=COUNTER_READ();
00000e  f04f4080          MOV      r0,#0x40000000
000012  6a40              LDR      r0,[r0,#0x24]
000014  0040              LSLS     r0,r0,#1
000016  490b              LDR      r1,|L12.68|
000018  6008              STR      r0,[r1,#0]  ; End
;;;118            Total+=(tim_t)(End-Start);
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]  ; End
00001e  490a              LDR      r1,|L12.72|
000020  6809              LDR      r1,[r1,#0]  ; Start
000022  1a40              SUBS     r0,r0,r1
000024  4909              LDR      r1,|L12.76|
000026  6809              LDR      r1,[r1,#0]  ; Total
000028  4408              ADD      r0,r0,r1
00002a  4908              LDR      r1,|L12.76|
00002c  6008              STR      r0,[r1,#0]  ; Total
00002e  1c64              ADDS     r4,r4,#1              ;113
                  |L12.48|
000030  f2427010          MOV      r0,#0x2710            ;113
000034  4284              CMP      r4,r0                 ;113
000036  dbe6              BLT      |L12.6|
;;;119        };
;;;120    }
000038  bd10              POP      {r4,pc}
;;;121    
                          ENDP

00003a  0000              DCW      0x0000
                  |L12.60|
                          DCD      0x000186a0
                  |L12.64|
                          DCD      Sem_1
                  |L12.68|
                          DCD      End
                  |L12.72|
                          DCD      Start
                  |L12.76|
                          DCD      Total

                          AREA ||i.Test_Sem_ISR||, CODE, READONLY, ALIGN=2

                  Test_Sem_ISR PROC
;;;134    
;;;135    void Test_Sem_ISR(void)
000000  b510              PUSH     {r4,lr}
;;;136    {
;;;137        static cnt_t Count;
;;;138        for(Count=0;Count<10000;Count++)
000002  2000              MOVS     r0,#0
000004  4911              LDR      r1,|L13.76|
000006  6008              STR      r0,[r1,#0]  ; Count
000008  e018              B        |L13.60|
                  |L13.10|
;;;139        {
;;;140            RMP_Sem_Pend(&Sem_1, RMP_MAX_SLICES);
00000a  4911              LDR      r1,|L13.80|
00000c  4811              LDR      r0,|L13.84|
00000e  f7fffffe          BL       RMP_Sem_Pend
;;;141            /* Read counter here */
;;;142            End=COUNTER_READ();
000012  f04f4080          MOV      r0,#0x40000000
000016  6a40              LDR      r0,[r0,#0x24]
000018  0040              LSLS     r0,r0,#1
00001a  490f              LDR      r1,|L13.88|
00001c  6008              STR      r0,[r1,#0]  ; End
;;;143            Total+=(tim_t)(End-Start);
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]  ; End
000022  490e              LDR      r1,|L13.92|
000024  6809              LDR      r1,[r1,#0]  ; Start
000026  1a40              SUBS     r0,r0,r1
000028  490d              LDR      r1,|L13.96|
00002a  6809              LDR      r1,[r1,#0]  ; Total
00002c  4408              ADD      r0,r0,r1
00002e  490c              LDR      r1,|L13.96|
000030  6008              STR      r0,[r1,#0]  ; Total
000032  4806              LDR      r0,|L13.76|
000034  6800              LDR      r0,[r0,#0]            ;138  ; Count
000036  1c40              ADDS     r0,r0,#1              ;138
000038  4904              LDR      r1,|L13.76|
00003a  6008              STR      r0,[r1,#0]            ;138  ; Count
                  |L13.60|
00003c  4803              LDR      r0,|L13.76|
00003e  6800              LDR      r0,[r0,#0]            ;138  ; Count
000040  f2427110          MOV      r1,#0x2710            ;138
000044  4288              CMP      r0,r1                 ;138
000046  dbe0              BLT      |L13.10|
;;;144        };
;;;145    }
000048  bd10              POP      {r4,pc}
;;;146    
                          ENDP

00004a  0000              DCW      0x0000
                  |L13.76|
                          DCD      |symbol_number.51|
                  |L13.80|
                          DCD      0x000186a0
                  |L13.84|
                          DCD      Sem_1
                  |L13.88|
                          DCD      End
                  |L13.92|
                          DCD      Start
                  |L13.96|
                          DCD      Total

                          AREA ||i.Test_Yield_1||, CODE, READONLY, ALIGN=2

                  Test_Yield_1 PROC
;;;34     ******************************************************************************/
;;;35     void Test_Yield_1(void)
000000  b510              PUSH     {r4,lr}
;;;36     {
;;;37         cnt_t Count;
;;;38         for(Count=0;Count<10000;Count++)
000002  2400              MOVS     r4,#0
000004  e008              B        |L14.24|
                  |L14.6|
;;;39         {
;;;40             /* Read counter here */
;;;41             Start=COUNTER_READ();
000006  f04f4080          MOV      r0,#0x40000000
00000a  6a40              LDR      r0,[r0,#0x24]
00000c  0040              LSLS     r0,r0,#1
00000e  4905              LDR      r1,|L14.36|
000010  6008              STR      r0,[r1,#0]  ; Start
;;;42             RMP_Yield();
000012  f7fffffe          BL       RMP_Yield
000016  1c64              ADDS     r4,r4,#1              ;38
                  |L14.24|
000018  f2427010          MOV      r0,#0x2710            ;38
00001c  4284              CMP      r4,r0                 ;38
00001e  dbf2              BLT      |L14.6|
;;;43         }
;;;44     }
000020  bd10              POP      {r4,pc}
;;;45     
                          ENDP

000022  0000              DCW      0x0000
                  |L14.36|
                          DCD      Start

                          AREA ||i.Test_Yield_2||, CODE, READONLY, ALIGN=2

                  Test_Yield_2 PROC
;;;84     ******************************************************************************/
;;;85     void Test_Yield_2(void)
000000  b510              PUSH     {r4,lr}
;;;86     {
;;;87         cnt_t Count;
;;;88         for(Count=0;Count<10000;Count++)
000002  2400              MOVS     r4,#0
000004  e012              B        |L15.44|
                  |L15.6|
;;;89         {
;;;90             RMP_Yield();
000006  f7fffffe          BL       RMP_Yield
;;;91             /* Read counter here */
;;;92             End=COUNTER_READ();
00000a  f04f4080          MOV      r0,#0x40000000
00000e  6a40              LDR      r0,[r0,#0x24]
000010  0040              LSLS     r0,r0,#1
000012  4909              LDR      r1,|L15.56|
000014  6008              STR      r0,[r1,#0]  ; End
;;;93             Total+=(tim_t)(End-Start);
000016  4608              MOV      r0,r1
000018  6800              LDR      r0,[r0,#0]  ; End
00001a  4908              LDR      r1,|L15.60|
00001c  6809              LDR      r1,[r1,#0]  ; Start
00001e  1a40              SUBS     r0,r0,r1
000020  4907              LDR      r1,|L15.64|
000022  6809              LDR      r1,[r1,#0]  ; Total
000024  4408              ADD      r0,r0,r1
000026  4906              LDR      r1,|L15.64|
000028  6008              STR      r0,[r1,#0]  ; Total
00002a  1c64              ADDS     r4,r4,#1              ;88
                  |L15.44|
00002c  f2427010          MOV      r0,#0x2710            ;88
000030  4284              CMP      r4,r0                 ;88
000032  dbe8              BLT      |L15.6|
;;;94         };
;;;95     }
000034  bd10              POP      {r4,pc}
;;;96     
                          ENDP

000036  0000              DCW      0x0000
                  |L15.56|
                          DCD      End
                  |L15.60|
                          DCD      Start
                  |L15.64|
                          DCD      Total

                          AREA ||i.Timer_Init||, CODE, READONLY, ALIGN=1

                  Timer_Init PROC
;;;81     ******************************************************************************/
;;;82     void Timer_Init(void)
000000  4770              BX       lr
;;;83     {
;;;84         /* Timer is initialized on startup by the M7M1 kernel */
;;;85     }
;;;86     /* End Function:Timer_Init ***************************************************/
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Stack_1
                          %        1024
                  Thd_1
                          %        60
                  Stack_2
                          %        1024
                  Thd_2
                          %        60
                  Sem_1
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  RMP_Pgtbl
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x001d0003
00000c  3f3f3f3f          DCB      0x3f,0x3f,0x3f,0x3f
000010  3f3f3f3f          DCB      0x3f,0x3f,0x3f,0x3f
                  RMP_Image
                          DCD      0x56495254
000018  564d2044          DCB      0x56,0x4d,0x20,0x44
00001c  6f6d6169          DCB      0x6f,0x6d,0x61,0x69
000020  6e203031          DCB      0x6e,0x20,0x30,0x31
000024  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _RMP_Entry
                          DCD      RMP_User_Stack
                          DCD      0x00000100
                          DCD      _RMP_Int
                          DCD      RMP_Int_Stack
                          DCD      0x00000400
                          DCD      RMP_Param
                          DCD      RMP_Regs
                          DCD      RMP_Flag
                          DCD      RMP_Console
                          DCD      0x00000080
                          DCD      0x00000001
                          DCD      0x0000000a
                          DCD      0x00000001
                          DCD      RMP_Pgtbl
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  Start
                          DCD      0x00000000
                  End
                          DCD      0x00000000
                  Total
                          DCD      0x00000000
                  Temp
                          DCD      0x00000000
                  Yield_Time
                          DCD      0x00000000
                  Mailbox_Time
                          DCD      0x00000000
                  Semaphore_Time
                          DCD      0x00000000
                  Mailbox_ISR_Time
                          DCD      0x00000000
                  Semaphore_ISR_Time
                          DCD      0x00000000
                  Count
                          DCD      0x00000000
                  |symbol_number.51|
                          DCD      0x00000000
                  |symbol_number.52|
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\MProkaron\\Benchmark\\test.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_test_c_Thd_1____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32F7xx_HAL_Driver\\Core\\cmsis_armcc.h"
|__asm___6_test_c_Thd_1____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_test_c_Thd_1____REVSH|
#line 402
|__asm___6_test_c_Thd_1____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_test_c_Thd_1____RRX|
#line 587
|__asm___6_test_c_Thd_1____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
