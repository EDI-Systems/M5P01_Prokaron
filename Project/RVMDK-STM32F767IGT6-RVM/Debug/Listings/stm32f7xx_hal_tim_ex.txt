; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f7xx_hal_tim_ex.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f7xx_hal_tim_ex.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\..\Library\STM32F7xx_HAL_Driver\Core -I..\..\..\..\Library\STM32F7xx_HAL_Driver\Inc -I..\..\..\..\Library\STM32F7xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\32-Bit_MCU\STM32\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f7xx_hal_tim_ex.crf ..\..\..\..\Library\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_tim_ex.c]
                          THUMB

                          AREA ||i.HAL_TIMEx_BreakCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_BreakCallback PROC
;;;2368     */
;;;2369   __weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2370   {
;;;2371     /* Prevent unused argument(s) compilation warning */
;;;2372     UNUSED(htim);
;;;2373    
;;;2374     /* NOTE : This function Should not be modified, when the callback is needed,
;;;2375               the HAL_TIMEx_BreakCallback could be implemented in the user file
;;;2376      */
;;;2377   }
;;;2378   
                          ENDP


                          AREA ||i.HAL_TIMEx_CommutationCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_CommutationCallback PROC
;;;2352     */
;;;2353   __weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2354   {
;;;2355     /* Prevent unused argument(s) compilation warning */
;;;2356     UNUSED(htim);
;;;2357    
;;;2358     /* NOTE : This function Should not be modified, when the callback is needed,
;;;2359               the HAL_TIMEx_CommutationCallback could be implemented in the user file
;;;2360      */
;;;2361   }
;;;2362   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigBreakDeadTime||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigBreakDeadTime PROC
;;;2112     */    
;;;2113   HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
000000  4603              MOV      r3,r0
;;;2114                                                 TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
;;;2115   {
000002  460a              MOV      r2,r1
;;;2116     uint32_t tmpbdtr = 0;
000004  2100              MOVS     r1,#0
;;;2117     
;;;2118     /* Check the parameters */
;;;2119     assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
;;;2120     assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
;;;2121     assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
;;;2122     assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
;;;2123     assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
;;;2124     assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
;;;2125     assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
;;;2126     assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
;;;2127     assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
;;;2128     assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
;;;2129     assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
;;;2130     assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
;;;2131     
;;;2132     /* Check input state */
;;;2133     __HAL_LOCK(htim);
000006  bf00              NOP      
000008  6b98              LDR      r0,[r3,#0x38]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L3.18|
00000e  2002              MOVS     r0,#2
                  |L3.16|
;;;2134     
;;;2135     htim->State = HAL_TIM_STATE_BUSY;
;;;2136   
;;;2137     /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
;;;2138        the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;2139       
;;;2140     /* Clear the BDTR bits */
;;;2141     tmpbdtr &= ~(TIM_BDTR_DTG | TIM_BDTR_LOCK |  TIM_BDTR_OSSI | 
;;;2142                  TIM_BDTR_OSSR | TIM_BDTR_BKE | TIM_BDTR_BKP | 
;;;2143                  TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF |
;;;2144                  TIM_BDTR_BK2F | TIM_BDTR_BK2E | TIM_BDTR_BK2P);
;;;2145   
;;;2146     /* Set the BDTR bits */
;;;2147     tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
;;;2148     tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
;;;2149     tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
;;;2150     tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
;;;2151     tmpbdtr |= sBreakDeadTimeConfig->BreakState;
;;;2152     tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
;;;2153     tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
;;;2154     tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
;;;2155     tmpbdtr |= (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT);
;;;2156     tmpbdtr |= sBreakDeadTimeConfig->Break2State;
;;;2157     tmpbdtr |= sBreakDeadTimeConfig->Break2Polarity;
;;;2158     
;;;2159     /* Set TIMx_BDTR */
;;;2160     htim->Instance->BDTR = tmpbdtr;
;;;2161     
;;;2162     __HAL_UNLOCK(htim);
;;;2163     
;;;2164     return HAL_OK;
;;;2165   }
000010  4770              BX       lr
                  |L3.18|
000012  2001              MOVS     r0,#1                 ;2133
000014  6398              STR      r0,[r3,#0x38]         ;2133
000016  bf00              NOP                            ;2133
000018  2002              MOVS     r0,#2                 ;2135
00001a  63d8              STR      r0,[r3,#0x3c]         ;2135
00001c  f001417c          AND      r1,r1,#0xfc000000     ;2141
000020  68d0              LDR      r0,[r2,#0xc]          ;2147
000022  4301              ORRS     r1,r1,r0              ;2147
000024  6890              LDR      r0,[r2,#8]            ;2148
000026  4301              ORRS     r1,r1,r0              ;2148
000028  6850              LDR      r0,[r2,#4]            ;2149
00002a  4301              ORRS     r1,r1,r0              ;2149
00002c  6810              LDR      r0,[r2,#0]            ;2150
00002e  4301              ORRS     r1,r1,r0              ;2150
000030  6910              LDR      r0,[r2,#0x10]         ;2151
000032  4301              ORRS     r1,r1,r0              ;2151
000034  6950              LDR      r0,[r2,#0x14]         ;2152
000036  4301              ORRS     r1,r1,r0              ;2152
000038  6a90              LDR      r0,[r2,#0x28]         ;2153
00003a  4301              ORRS     r1,r1,r0              ;2153
00003c  8b10              LDRH     r0,[r2,#0x18]         ;2154
00003e  ea414100          ORR      r1,r1,r0,LSL #16      ;2154
000042  8c90              LDRH     r0,[r2,#0x24]         ;2155
000044  ea415100          ORR      r1,r1,r0,LSL #20      ;2155
000048  69d0              LDR      r0,[r2,#0x1c]         ;2156
00004a  4301              ORRS     r1,r1,r0              ;2156
00004c  6a10              LDR      r0,[r2,#0x20]         ;2157
00004e  4301              ORRS     r1,r1,r0              ;2157
000050  6818              LDR      r0,[r3,#0]            ;2160
000052  6441              STR      r1,[r0,#0x44]         ;2160
000054  bf00              NOP                            ;2162
000056  2000              MOVS     r0,#0                 ;2162
000058  6398              STR      r0,[r3,#0x38]         ;2162
00005a  bf00              NOP                            ;2162
00005c  bf00              NOP                            ;2164
00005e  e7d7              B        |L3.16|
;;;2166   #if defined (STM32F765xx) || defined(STM32F767xx) || defined(STM32F769xx) || defined(STM32F777xx) || defined(STM32F779xx)
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigBreakInput||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigBreakInput PROC
;;;2176     */
;;;2177   HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
000000  b570              PUSH     {r4-r6,lr}
;;;2178                                                uint32_t BreakInput,
;;;2179                                                TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
;;;2180   
;;;2181   {
000002  4603              MOV      r3,r0
000004  460d              MOV      r5,r1
;;;2182     uint32_t tmporx = 0;
000006  2100              MOVS     r1,#0
;;;2183     uint32_t bkin_enable_mask = 0;
000008  2400              MOVS     r4,#0
;;;2184     uint32_t bkin_enable_bitpos = 0;
00000a  2600              MOVS     r6,#0
;;;2185   
;;;2186     /* Check the parameters */
;;;2187     assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
;;;2188     assert_param(IS_TIM_BREAKINPUT(BreakInput));
;;;2189     assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
;;;2190     assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
;;;2191   
;;;2192     /* Check input state */
;;;2193     __HAL_LOCK(htim);
00000c  bf00              NOP      
00000e  6b98              LDR      r0,[r3,#0x38]
000010  2801              CMP      r0,#1
000012  d101              BNE      |L4.24|
000014  2002              MOVS     r0,#2
                  |L4.22|
;;;2194     
;;;2195     switch(sBreakInputConfig->Source)
;;;2196     {
;;;2197     case TIM_BREAKINPUTSOURCE_BKIN:
;;;2198       {
;;;2199         bkin_enable_mask = TIM1_AF1_BKINE;
;;;2200         bkin_enable_bitpos = 0;
;;;2201       }
;;;2202       break;
;;;2203     
;;;2204     case TIM_BREAKINPUTSOURCE_DFSDM1:
;;;2205       {
;;;2206         bkin_enable_mask = TIM1_AF1_BKDF1BKE;
;;;2207         bkin_enable_bitpos = 8;
;;;2208       }
;;;2209       break;    
;;;2210   
;;;2211     default:
;;;2212       break;
;;;2213     }
;;;2214     
;;;2215     switch(BreakInput)
;;;2216     {
;;;2217       case TIM_BREAKINPUT_BRK:
;;;2218         {
;;;2219           /* Get the TIMx_AF1 register value */
;;;2220           tmporx = htim->Instance->AF1;
;;;2221           
;;;2222           /* Enable the break input */
;;;2223           tmporx &= ~bkin_enable_mask;
;;;2224           tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
;;;2225           
;;;2226           /* Set TIMx_AF1 */
;;;2227           htim->Instance->AF1 = tmporx;        
;;;2228         }
;;;2229           break;
;;;2230       case TIM_BREAKINPUT_BRK2:
;;;2231         {
;;;2232           /* Get the TIMx_AF2 register value */
;;;2233           tmporx = htim->Instance->AF2;
;;;2234           
;;;2235           /* Enable the break input */
;;;2236           tmporx &= ~bkin_enable_mask;
;;;2237           tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
;;;2238           
;;;2239           /* Set TIMx_AF2 */
;;;2240           htim->Instance->AF2 = tmporx;        
;;;2241         }
;;;2242         break;    
;;;2243     default:
;;;2244       break;
;;;2245     }
;;;2246     
;;;2247     __HAL_UNLOCK(htim);
;;;2248   
;;;2249     return HAL_OK;
;;;2250   }
000016  bd70              POP      {r4-r6,pc}
                  |L4.24|
000018  2001              MOVS     r0,#1                 ;2193
00001a  6398              STR      r0,[r3,#0x38]         ;2193
00001c  bf00              NOP                            ;2193
00001e  6810              LDR      r0,[r2,#0]            ;2195
000020  2801              CMP      r0,#1                 ;2195
000022  d002              BEQ      |L4.42|
000024  2808              CMP      r0,#8                 ;2195
000026  d107              BNE      |L4.56|
000028  e002              B        |L4.48|
                  |L4.42|
00002a  2401              MOVS     r4,#1                 ;2199
00002c  2600              MOVS     r6,#0                 ;2200
00002e  e004              B        |L4.58|
                  |L4.48|
000030  f44f7480          MOV      r4,#0x100             ;2206
000034  2608              MOVS     r6,#8                 ;2207
000036  e000              B        |L4.58|
                  |L4.56|
000038  bf00              NOP                            ;2212
                  |L4.58|
00003a  bf00              NOP                            ;2202
00003c  2d01              CMP      r5,#1                 ;2215
00003e  d002              BEQ      |L4.70|
000040  2d02              CMP      r5,#2                 ;2215
000042  d114              BNE      |L4.110|
000044  e009              B        |L4.90|
                  |L4.70|
000046  6818              LDR      r0,[r3,#0]            ;2220
000048  6e01              LDR      r1,[r0,#0x60]         ;2220
00004a  43a1              BICS     r1,r1,r4              ;2223
00004c  6850              LDR      r0,[r2,#4]            ;2224
00004e  40b0              LSLS     r0,r0,r6              ;2224
000050  4020              ANDS     r0,r0,r4              ;2224
000052  4301              ORRS     r1,r1,r0              ;2224
000054  6818              LDR      r0,[r3,#0]            ;2227
000056  6601              STR      r1,[r0,#0x60]         ;2227
000058  e00a              B        |L4.112|
                  |L4.90|
00005a  6818              LDR      r0,[r3,#0]            ;2233
00005c  6e41              LDR      r1,[r0,#0x64]         ;2233
00005e  43a1              BICS     r1,r1,r4              ;2236
000060  6850              LDR      r0,[r2,#4]            ;2237
000062  40b0              LSLS     r0,r0,r6              ;2237
000064  4020              ANDS     r0,r0,r4              ;2237
000066  4301              ORRS     r1,r1,r0              ;2237
000068  6818              LDR      r0,[r3,#0]            ;2240
00006a  6641              STR      r1,[r0,#0x64]         ;2240
00006c  e000              B        |L4.112|
                  |L4.110|
00006e  bf00              NOP                            ;2244
                  |L4.112|
000070  bf00              NOP                            ;2229
000072  bf00              NOP                            ;2247
000074  2000              MOVS     r0,#0                 ;2247
000076  6398              STR      r0,[r3,#0x38]         ;2247
000078  bf00              NOP                            ;2247
00007a  bf00              NOP                            ;2249
00007c  e7cb              B        |L4.22|
;;;2251   #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutationEvent PROC
;;;1489     */
;;;1490   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  b510              PUSH     {r4,lr}
;;;1491   {
000002  4603              MOV      r3,r0
;;;1492     /* Check the parameters */
;;;1493     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1494     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1495     
;;;1496     __HAL_LOCK(htim);
000004  bf00              NOP      
000006  6b98              LDR      r0,[r3,#0x38]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L5.16|
00000c  2002              MOVS     r0,#2
                  |L5.14|
;;;1497     
;;;1498     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1499         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1500     {    
;;;1501       /* Select the Input trigger */
;;;1502       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1503       htim->Instance->SMCR |= InputTrigger;
;;;1504     }
;;;1505       
;;;1506     /* Select the Capture Compare preload feature */
;;;1507     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1508     /* Select the Commutation event source */
;;;1509     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1510     htim->Instance->CR2 |= CommutationSource;
;;;1511       
;;;1512     __HAL_UNLOCK(htim);
;;;1513     
;;;1514     return HAL_OK;
;;;1515   }
00000e  bd10              POP      {r4,pc}
                  |L5.16|
000010  2001              MOVS     r0,#1                 ;1496
000012  6398              STR      r0,[r3,#0x38]         ;1496
000014  bf00              NOP                            ;1496
000016  b129              CBZ      r1,|L5.36|
000018  2910              CMP      r1,#0x10              ;1498
00001a  d003              BEQ      |L5.36|
00001c  2920              CMP      r1,#0x20              ;1499
00001e  d001              BEQ      |L5.36|
000020  2930              CMP      r1,#0x30              ;1499
000022  d10a              BNE      |L5.58|
                  |L5.36|
000024  6818              LDR      r0,[r3,#0]            ;1502
000026  6880              LDR      r0,[r0,#8]            ;1502
000028  f0200070          BIC      r0,r0,#0x70           ;1502
00002c  681c              LDR      r4,[r3,#0]            ;1502
00002e  60a0              STR      r0,[r4,#8]            ;1502
000030  6818              LDR      r0,[r3,#0]            ;1503
000032  6880              LDR      r0,[r0,#8]            ;1503
000034  4308              ORRS     r0,r0,r1              ;1503
000036  681c              LDR      r4,[r3,#0]            ;1503
000038  60a0              STR      r0,[r4,#8]            ;1503
                  |L5.58|
00003a  6818              LDR      r0,[r3,#0]            ;1507
00003c  6840              LDR      r0,[r0,#4]            ;1507
00003e  f0400001          ORR      r0,r0,#1              ;1507
000042  681c              LDR      r4,[r3,#0]            ;1507
000044  6060              STR      r0,[r4,#4]            ;1507
000046  6818              LDR      r0,[r3,#0]            ;1509
000048  6840              LDR      r0,[r0,#4]            ;1509
00004a  f0200004          BIC      r0,r0,#4              ;1509
00004e  681c              LDR      r4,[r3,#0]            ;1509
000050  6060              STR      r0,[r4,#4]            ;1509
000052  6818              LDR      r0,[r3,#0]            ;1510
000054  6840              LDR      r0,[r0,#4]            ;1510
000056  4310              ORRS     r0,r0,r2              ;1510
000058  681c              LDR      r4,[r3,#0]            ;1510
00005a  6060              STR      r0,[r4,#4]            ;1510
00005c  bf00              NOP                            ;1512
00005e  2000              MOVS     r0,#0                 ;1512
000060  6398              STR      r0,[r3,#0x38]         ;1512
000062  bf00              NOP                            ;1512
000064  bf00              NOP                            ;1514
000066  e7d2              B        |L5.14|
;;;1516   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_ConfigCommutationEvent_DMA PROC
;;;1593     */
;;;1594   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  b510              PUSH     {r4,lr}
;;;1595   {
000002  4603              MOV      r3,r0
;;;1596     /* Check the parameters */
;;;1597     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1598     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1599     
;;;1600     __HAL_LOCK(htim);
000004  bf00              NOP      
000006  6b98              LDR      r0,[r3,#0x38]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L6.16|
00000c  2002              MOVS     r0,#2
                  |L6.14|
;;;1601     
;;;1602     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1603         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1604     {    
;;;1605       /* Select the Input trigger */
;;;1606       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1607       htim->Instance->SMCR |= InputTrigger;
;;;1608     }
;;;1609     
;;;1610     /* Select the Capture Compare preload feature */
;;;1611     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1612     /* Select the Commutation event source */
;;;1613     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1614     htim->Instance->CR2 |= CommutationSource;
;;;1615     
;;;1616     /* Enable the Commutation DMA Request */
;;;1617     /* Set the DMA Commutation Callback */
;;;1618     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = HAL_TIMEx_DMACommutationCplt;     
;;;1619     /* Set the DMA error callback */
;;;1620     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = HAL_TIM_DMAError;
;;;1621     
;;;1622     /* Enable the Commutation DMA Request */
;;;1623     __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
;;;1624   
;;;1625     __HAL_UNLOCK(htim);
;;;1626     
;;;1627     return HAL_OK;
;;;1628   }
00000e  bd10              POP      {r4,pc}
                  |L6.16|
000010  2001              MOVS     r0,#1                 ;1600
000012  6398              STR      r0,[r3,#0x38]         ;1600
000014  bf00              NOP                            ;1600
000016  b129              CBZ      r1,|L6.36|
000018  2910              CMP      r1,#0x10              ;1602
00001a  d003              BEQ      |L6.36|
00001c  2920              CMP      r1,#0x20              ;1603
00001e  d001              BEQ      |L6.36|
000020  2930              CMP      r1,#0x30              ;1603
000022  d10a              BNE      |L6.58|
                  |L6.36|
000024  6818              LDR      r0,[r3,#0]            ;1606
000026  6880              LDR      r0,[r0,#8]            ;1606
000028  f0200070          BIC      r0,r0,#0x70           ;1606
00002c  681c              LDR      r4,[r3,#0]            ;1606
00002e  60a0              STR      r0,[r4,#8]            ;1606
000030  6818              LDR      r0,[r3,#0]            ;1607
000032  6880              LDR      r0,[r0,#8]            ;1607
000034  4308              ORRS     r0,r0,r1              ;1607
000036  681c              LDR      r4,[r3,#0]            ;1607
000038  60a0              STR      r0,[r4,#8]            ;1607
                  |L6.58|
00003a  6818              LDR      r0,[r3,#0]            ;1611
00003c  6840              LDR      r0,[r0,#4]            ;1611
00003e  f0400001          ORR      r0,r0,#1              ;1611
000042  681c              LDR      r4,[r3,#0]            ;1611
000044  6060              STR      r0,[r4,#4]            ;1611
000046  6818              LDR      r0,[r3,#0]            ;1613
000048  6840              LDR      r0,[r0,#4]            ;1613
00004a  f0200004          BIC      r0,r0,#4              ;1613
00004e  681c              LDR      r4,[r3,#0]            ;1613
000050  6060              STR      r0,[r4,#4]            ;1613
000052  6818              LDR      r0,[r3,#0]            ;1614
000054  6840              LDR      r0,[r0,#4]            ;1614
000056  4310              ORRS     r0,r0,r2              ;1614
000058  681c              LDR      r4,[r3,#0]            ;1614
00005a  6060              STR      r0,[r4,#4]            ;1614
00005c  4c08              LDR      r4,|L6.128|
00005e  6b18              LDR      r0,[r3,#0x30]         ;1618
000060  6404              STR      r4,[r0,#0x40]         ;1618
000062  4c08              LDR      r4,|L6.132|
000064  6b18              LDR      r0,[r3,#0x30]         ;1620
000066  6504              STR      r4,[r0,#0x50]         ;1620
000068  6818              LDR      r0,[r3,#0]            ;1623
00006a  68c0              LDR      r0,[r0,#0xc]          ;1623
00006c  f4405000          ORR      r0,r0,#0x2000         ;1623
000070  681c              LDR      r4,[r3,#0]            ;1623
000072  60e0              STR      r0,[r4,#0xc]          ;1623
000074  bf00              NOP                            ;1625
000076  2000              MOVS     r0,#0                 ;1625
000078  6398              STR      r0,[r3,#0x38]         ;1625
00007a  bf00              NOP                            ;1625
00007c  bf00              NOP                            ;1627
00007e  e7c6              B        |L6.14|
;;;1629   
                          ENDP

                  |L6.128|
                          DCD      TIMEx_DMACommutationCplt
                  |L6.132|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutationEvent_IT PROC
;;;1539     */
;;;1540   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  b510              PUSH     {r4,lr}
;;;1541   {
000002  4603              MOV      r3,r0
;;;1542     /* Check the parameters */
;;;1543     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1544     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1545     
;;;1546     __HAL_LOCK(htim);
000004  bf00              NOP      
000006  6b98              LDR      r0,[r3,#0x38]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L7.16|
00000c  2002              MOVS     r0,#2
                  |L7.14|
;;;1547     
;;;1548     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1549         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1550     {    
;;;1551       /* Select the Input trigger */
;;;1552       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1553       htim->Instance->SMCR |= InputTrigger;
;;;1554     }
;;;1555     
;;;1556     /* Select the Capture Compare preload feature */
;;;1557     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1558     /* Select the Commutation event source */
;;;1559     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1560     htim->Instance->CR2 |= CommutationSource;
;;;1561       
;;;1562     /* Enable the Commutation Interrupt Request */
;;;1563     __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
;;;1564   
;;;1565     __HAL_UNLOCK(htim);
;;;1566     
;;;1567     return HAL_OK;
;;;1568   }
00000e  bd10              POP      {r4,pc}
                  |L7.16|
000010  2001              MOVS     r0,#1                 ;1546
000012  6398              STR      r0,[r3,#0x38]         ;1546
000014  bf00              NOP                            ;1546
000016  b129              CBZ      r1,|L7.36|
000018  2910              CMP      r1,#0x10              ;1548
00001a  d003              BEQ      |L7.36|
00001c  2920              CMP      r1,#0x20              ;1549
00001e  d001              BEQ      |L7.36|
000020  2930              CMP      r1,#0x30              ;1549
000022  d10a              BNE      |L7.58|
                  |L7.36|
000024  6818              LDR      r0,[r3,#0]            ;1552
000026  6880              LDR      r0,[r0,#8]            ;1552
000028  f0200070          BIC      r0,r0,#0x70           ;1552
00002c  681c              LDR      r4,[r3,#0]            ;1552
00002e  60a0              STR      r0,[r4,#8]            ;1552
000030  6818              LDR      r0,[r3,#0]            ;1553
000032  6880              LDR      r0,[r0,#8]            ;1553
000034  4308              ORRS     r0,r0,r1              ;1553
000036  681c              LDR      r4,[r3,#0]            ;1553
000038  60a0              STR      r0,[r4,#8]            ;1553
                  |L7.58|
00003a  6818              LDR      r0,[r3,#0]            ;1557
00003c  6840              LDR      r0,[r0,#4]            ;1557
00003e  f0400001          ORR      r0,r0,#1              ;1557
000042  681c              LDR      r4,[r3,#0]            ;1557
000044  6060              STR      r0,[r4,#4]            ;1557
000046  6818              LDR      r0,[r3,#0]            ;1559
000048  6840              LDR      r0,[r0,#4]            ;1559
00004a  f0200004          BIC      r0,r0,#4              ;1559
00004e  681c              LDR      r4,[r3,#0]            ;1559
000050  6060              STR      r0,[r4,#4]            ;1559
000052  6818              LDR      r0,[r3,#0]            ;1560
000054  6840              LDR      r0,[r0,#4]            ;1560
000056  4310              ORRS     r0,r0,r2              ;1560
000058  681c              LDR      r4,[r3,#0]            ;1560
00005a  6060              STR      r0,[r4,#4]            ;1560
00005c  6818              LDR      r0,[r3,#0]            ;1563
00005e  68c0              LDR      r0,[r0,#0xc]          ;1563
000060  f0400020          ORR      r0,r0,#0x20           ;1563
000064  681c              LDR      r4,[r3,#0]            ;1563
000066  60e0              STR      r0,[r4,#0xc]          ;1563
000068  bf00              NOP                            ;1565
00006a  2000              MOVS     r0,#0                 ;1565
00006c  6398              STR      r0,[r3,#0x38]         ;1565
00006e  bf00              NOP                            ;1565
000070  bf00              NOP                            ;1567
000072  e7cc              B        |L7.14|
;;;1569   
                          ENDP


                          AREA ||i.HAL_TIMEx_GroupChannel5||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_GroupChannel5 PROC
;;;2302     */
;;;2303   HAL_StatusTypeDef HAL_TIMEx_GroupChannel5(TIM_HandleTypeDef *htim, uint32_t OCRef)
000000  4602              MOV      r2,r0
;;;2304   {
;;;2305     /* Check parameters */
;;;2306     assert_param(IS_TIM_COMBINED3PHASEPWM_INSTANCE(htim->Instance));
;;;2307     assert_param(IS_TIM_GROUPCH5(OCRef));
;;;2308   
;;;2309     /* Process Locked */
;;;2310     __HAL_LOCK(htim);
000002  bf00              NOP      
000004  6b90              LDR      r0,[r2,#0x38]
000006  2801              CMP      r0,#1
000008  d101              BNE      |L8.14|
00000a  2002              MOVS     r0,#2
                  |L8.12|
;;;2311     
;;;2312     htim->State = HAL_TIM_STATE_BUSY;
;;;2313     
;;;2314     /* Clear GC5Cx bit fields */
;;;2315     htim->Instance->CCR5 &= ~(TIM_CCR5_GC5C3|TIM_CCR5_GC5C2|TIM_CCR5_GC5C1);
;;;2316     
;;;2317     /* Set GC5Cx bit fields */
;;;2318     htim->Instance->CCR5 |= OCRef;
;;;2319                                      
;;;2320     htim->State = HAL_TIM_STATE_READY;                                 
;;;2321     
;;;2322     __HAL_UNLOCK(htim);
;;;2323     
;;;2324     return HAL_OK;
;;;2325   }
00000c  4770              BX       lr
                  |L8.14|
00000e  2001              MOVS     r0,#1                 ;2310
000010  6390              STR      r0,[r2,#0x38]         ;2310
000012  bf00              NOP                            ;2310
000014  2002              MOVS     r0,#2                 ;2312
000016  63d0              STR      r0,[r2,#0x3c]         ;2312
000018  6810              LDR      r0,[r2,#0]            ;2315
00001a  6d80              LDR      r0,[r0,#0x58]         ;2315
00001c  f0204060          BIC      r0,r0,#0xe0000000     ;2315
000020  6813              LDR      r3,[r2,#0]            ;2315
000022  6598              STR      r0,[r3,#0x58]         ;2315
000024  6810              LDR      r0,[r2,#0]            ;2318
000026  6d80              LDR      r0,[r0,#0x58]         ;2318
000028  4308              ORRS     r0,r0,r1              ;2318
00002a  6813              LDR      r3,[r2,#0]            ;2318
00002c  6598              STR      r0,[r3,#0x58]         ;2318
00002e  2001              MOVS     r0,#1                 ;2320
000030  63d0              STR      r0,[r2,#0x3c]         ;2320
000032  bf00              NOP                            ;2322
000034  2000              MOVS     r0,#0                 ;2322
000036  6390              STR      r0,[r2,#0x38]         ;2322
000038  bf00              NOP                            ;2322
00003a  bf00              NOP                            ;2324
00003c  e7e6              B        |L8.12|
;;;2326   
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_DeInit PROC
;;;238      */
;;;239    HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;240    {
000002  4604              MOV      r4,r0
;;;241      /* Check the parameters */
;;;242      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;243    
;;;244      htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  63e0              STR      r0,[r4,#0x3c]
;;;245      
;;;246      /* Disable the TIM Peripheral Clock */
;;;247      __HAL_TIM_DISABLE(htim);
000008  bf00              NOP      
00000a  6820              LDR      r0,[r4,#0]
00000c  6a00              LDR      r0,[r0,#0x20]
00000e  f2411111          MOV      r1,#0x1111
000012  4008              ANDS     r0,r0,r1
000014  b950              CBNZ     r0,|L9.44|
000016  6820              LDR      r0,[r4,#0]
000018  6a00              LDR      r0,[r0,#0x20]
00001a  1089              ASRS     r1,r1,#2
00001c  4008              ANDS     r0,r0,r1
00001e  b928              CBNZ     r0,|L9.44|
000020  6820              LDR      r0,[r4,#0]
000022  6800              LDR      r0,[r0,#0]
000024  f0200001          BIC      r0,r0,#1
000028  6821              LDR      r1,[r4,#0]
00002a  6008              STR      r0,[r1,#0]
                  |L9.44|
00002c  bf00              NOP      
;;;248        
;;;249      /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;250      HAL_TIMEx_HallSensor_MspDeInit(htim);
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       HAL_TIMEx_HallSensor_MspDeInit
;;;251        
;;;252      /* Change TIM state */  
;;;253      htim->State = HAL_TIM_STATE_RESET; 
000034  2000              MOVS     r0,#0
000036  63e0              STR      r0,[r4,#0x3c]
;;;254    
;;;255      /* Release Lock */
;;;256      __HAL_UNLOCK(htim);
000038  bf00              NOP      
00003a  63a0              STR      r0,[r4,#0x38]
00003c  bf00              NOP      
;;;257    
;;;258      return HAL_OK;
;;;259    }
00003e  bd10              POP      {r4,pc}
;;;260    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_GetState PROC
;;;2403     */
;;;2404   HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
000000  4601              MOV      r1,r0
;;;2405   {
;;;2406     return htim->State;
000002  6bc8              LDR      r0,[r1,#0x3c]
;;;2407   }
000004  4770              BX       lr
;;;2408   
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Init||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Init PROC
;;;165      */
;;;166    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
000000  b530              PUSH     {r4,r5,lr}
;;;167    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;168      TIM_OC_InitTypeDef OC_Config;
;;;169        
;;;170      /* Check the TIM handle allocation */
;;;171      if(htim == NULL)
000008  b914              CBNZ     r4,|L11.16|
;;;172      {
;;;173        return HAL_ERROR;
00000a  2001              MOVS     r0,#1
                  |L11.12|
;;;174      }
;;;175      
;;;176      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;177      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;178      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;179      assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
;;;180      assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
;;;181      assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
;;;182    
;;;183      /* Set the TIM state */
;;;184      htim->State= HAL_TIM_STATE_BUSY;
;;;185      
;;;186      /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;187      HAL_TIMEx_HallSensor_MspInit(htim);
;;;188      
;;;189      /* Configure the Time base in the Encoder Mode */
;;;190      TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;191      
;;;192      /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
;;;193      TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
;;;194      
;;;195      /* Reset the IC1PSC Bits */
;;;196      htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
;;;197      /* Set the IC1PSC value */
;;;198      htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
;;;199      
;;;200      /* Enable the Hall sensor interface (XOR function of the three inputs) */
;;;201      htim->Instance->CR2 |= TIM_CR2_TI1S;
;;;202      
;;;203      /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
;;;204      htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;205      htim->Instance->SMCR |= TIM_TS_TI1F_ED;
;;;206      
;;;207      /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */  
;;;208      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;209      htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
;;;210      
;;;211      /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
;;;212      OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
;;;213      OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
;;;214      OC_Config.OCMode = TIM_OCMODE_PWM2;
;;;215      OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
;;;216      OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
;;;217      OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
;;;218      OC_Config.Pulse = sConfig->Commutation_Delay; 
;;;219        
;;;220      TIM_OC2_SetConfig(htim->Instance, &OC_Config);
;;;221      
;;;222      /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
;;;223        register to 101 */
;;;224      htim->Instance->CR2 &= ~TIM_CR2_MMS;
;;;225      htim->Instance->CR2 |= TIM_TRGO_OC2REF; 
;;;226      
;;;227      /* Initialize the TIM state*/
;;;228      htim->State= HAL_TIM_STATE_READY;
;;;229    
;;;230      return HAL_OK;
;;;231    }
00000c  b007              ADD      sp,sp,#0x1c
00000e  bd30              POP      {r4,r5,pc}
                  |L11.16|
000010  2002              MOVS     r0,#2                 ;184
000012  63e0              STR      r0,[r4,#0x3c]         ;184
000014  4620              MOV      r0,r4                 ;187
000016  f7fffffe          BL       HAL_TIMEx_HallSensor_MspInit
00001a  1d21              ADDS     r1,r4,#4              ;190
00001c  6820              LDR      r0,[r4,#0]            ;190
00001e  f7fffffe          BL       TIM_Base_SetConfig
000022  68ab              LDR      r3,[r5,#8]            ;193
000024  6829              LDR      r1,[r5,#0]            ;193
000026  2203              MOVS     r2,#3                 ;193
000028  6820              LDR      r0,[r4,#0]            ;193
00002a  f7fffffe          BL       TIM_TI1_SetConfig
00002e  6820              LDR      r0,[r4,#0]            ;196
000030  6980              LDR      r0,[r0,#0x18]         ;196
000032  f020000c          BIC      r0,r0,#0xc            ;196
000036  6821              LDR      r1,[r4,#0]            ;196
000038  6188              STR      r0,[r1,#0x18]         ;196
00003a  6820              LDR      r0,[r4,#0]            ;198
00003c  6980              LDR      r0,[r0,#0x18]         ;198
00003e  6869              LDR      r1,[r5,#4]            ;198
000040  4308              ORRS     r0,r0,r1              ;198
000042  6821              LDR      r1,[r4,#0]            ;198
000044  6188              STR      r0,[r1,#0x18]         ;198
000046  6820              LDR      r0,[r4,#0]            ;201
000048  6840              LDR      r0,[r0,#4]            ;201
00004a  f0400080          ORR      r0,r0,#0x80           ;201
00004e  6821              LDR      r1,[r4,#0]            ;201
000050  6048              STR      r0,[r1,#4]            ;201
000052  6820              LDR      r0,[r4,#0]            ;204
000054  6880              LDR      r0,[r0,#8]            ;204
000056  f0200070          BIC      r0,r0,#0x70           ;204
00005a  6821              LDR      r1,[r4,#0]            ;204
00005c  6088              STR      r0,[r1,#8]            ;204
00005e  6820              LDR      r0,[r4,#0]            ;205
000060  6880              LDR      r0,[r0,#8]            ;205
000062  f0400040          ORR      r0,r0,#0x40           ;205
000066  6821              LDR      r1,[r4,#0]            ;205
000068  6088              STR      r0,[r1,#8]            ;205
00006a  6820              LDR      r0,[r4,#0]            ;208
00006c  6880              LDR      r0,[r0,#8]            ;208
00006e  4914              LDR      r1,|L11.192|
000070  4008              ANDS     r0,r0,r1              ;208
000072  6821              LDR      r1,[r4,#0]            ;208
000074  6088              STR      r0,[r1,#8]            ;208
000076  6820              LDR      r0,[r4,#0]            ;209
000078  6880              LDR      r0,[r0,#8]            ;209
00007a  f0400004          ORR      r0,r0,#4              ;209
00007e  6821              LDR      r1,[r4,#0]            ;209
000080  6088              STR      r0,[r1,#8]            ;209
000082  2000              MOVS     r0,#0                 ;212
000084  9004              STR      r0,[sp,#0x10]         ;212
000086  9005              STR      r0,[sp,#0x14]         ;213
000088  2070              MOVS     r0,#0x70              ;214
00008a  9000              STR      r0,[sp,#0]            ;214
00008c  2000              MOVS     r0,#0                 ;215
00008e  9006              STR      r0,[sp,#0x18]         ;215
000090  9003              STR      r0,[sp,#0xc]          ;216
000092  9002              STR      r0,[sp,#8]            ;217
000094  68e8              LDR      r0,[r5,#0xc]          ;218
000096  9001              STR      r0,[sp,#4]            ;218
000098  4669              MOV      r1,sp                 ;220
00009a  6820              LDR      r0,[r4,#0]            ;220
00009c  f7fffffe          BL       TIM_OC2_SetConfig
0000a0  6820              LDR      r0,[r4,#0]            ;224
0000a2  6840              LDR      r0,[r0,#4]            ;224
0000a4  f0200070          BIC      r0,r0,#0x70           ;224
0000a8  6821              LDR      r1,[r4,#0]            ;224
0000aa  6048              STR      r0,[r1,#4]            ;224
0000ac  6820              LDR      r0,[r4,#0]            ;225
0000ae  6840              LDR      r0,[r0,#4]            ;225
0000b0  f0400050          ORR      r0,r0,#0x50           ;225
0000b4  6821              LDR      r1,[r4,#0]            ;225
0000b6  6048              STR      r0,[r1,#4]            ;225
0000b8  2001              MOVS     r0,#1                 ;228
0000ba  63e0              STR      r0,[r4,#0x3c]         ;228
0000bc  2000              MOVS     r0,#0                 ;230
0000be  e7a5              B        |L11.12|
;;;232    
                          ENDP

                  |L11.192|
                          DCD      0xfffefff8

                          AREA ||i.HAL_TIMEx_HallSensor_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspDeInit PROC
;;;282      */
;;;283    __weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;284    {
;;;285      /* Prevent unused argument(s) compilation warning */
;;;286      UNUSED(htim);
;;;287     
;;;288      /* NOTE : This function Should not be modified, when the callback is needed,
;;;289                the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
;;;290       */
;;;291    }
;;;292    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspInit PROC
;;;266      */
;;;267    __weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;268    {
;;;269      /* Prevent unused argument(s) compilation warning */
;;;270      UNUSED(htim);
;;;271     
;;;272      /* NOTE : This function Should not be modified, when the callback is needed,
;;;273                the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
;;;274       */
;;;275    }
;;;276    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Start PROC
;;;298      */
;;;299    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;300    {
000002  4604              MOV      r4,r0
;;;301      /* Check the parameters */
;;;302      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;303      
;;;304      /* Enable the Input Capture channels 1
;;;305        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;306      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
000004  2201              MOVS     r2,#1
000006  2100              MOVS     r1,#0
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;307      
;;;308      /* Enable the Peripheral */
;;;309      __HAL_TIM_ENABLE(htim);
00000e  6820              LDR      r0,[r4,#0]
000010  6800              LDR      r0,[r0,#0]
000012  f0400001          ORR      r0,r0,#1
000016  6821              LDR      r1,[r4,#0]
000018  6008              STR      r0,[r1,#0]
;;;310      
;;;311      /* Return function status */
;;;312      return HAL_OK;
00001a  2000              MOVS     r0,#0
;;;313    }
00001c  bd10              POP      {r4,pc}
;;;314    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Start_DMA PROC
;;;394      */
;;;395    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;396    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;397      /* Check the parameters */
;;;398      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;399      
;;;400       if((htim->State == HAL_TIM_STATE_BUSY))
000008  6be0              LDR      r0,[r4,#0x3c]
00000a  2802              CMP      r0,#2
00000c  d100              BNE      |L15.16|
                  |L15.14|
;;;401      {
;;;402         return HAL_BUSY;
;;;403      }
;;;404      else if((htim->State == HAL_TIM_STATE_READY))
;;;405      {
;;;406        if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;407        {
;;;408          return HAL_ERROR;                                    
;;;409        }
;;;410        else
;;;411        {
;;;412          htim->State = HAL_TIM_STATE_BUSY;
;;;413        }
;;;414      }
;;;415      /* Enable the Input Capture channels 1
;;;416        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;417      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
;;;418      
;;;419      /* Set the DMA Input Capture 1 Callback */
;;;420      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMACaptureCplt;     
;;;421      /* Set the DMA error callback */
;;;422      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;423      
;;;424      /* Enable the DMA Stream for Capture 1*/
;;;425      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);    
;;;426      
;;;427      /* Enable the capture compare 1 Interrupt */
;;;428      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;429     
;;;430      /* Enable the Peripheral */
;;;431      __HAL_TIM_ENABLE(htim);
;;;432      
;;;433      /* Return function status */
;;;434      return HAL_OK;
;;;435    }
00000e  bd70              POP      {r4-r6,pc}
                  |L15.16|
000010  6be0              LDR      r0,[r4,#0x3c]         ;404
000012  2801              CMP      r0,#1                 ;404
000014  d105              BNE      |L15.34|
000016  b915              CBNZ     r5,|L15.30|
000018  2e00              CMP      r6,#0                 ;406
00001a  dd00              BLE      |L15.30|
00001c  e7f7              B        |L15.14|
                  |L15.30|
00001e  2002              MOVS     r0,#2                 ;412
000020  63e0              STR      r0,[r4,#0x3c]         ;412
                  |L15.34|
000022  2201              MOVS     r2,#1                 ;417
000024  2100              MOVS     r1,#0                 ;417
000026  6820              LDR      r0,[r4,#0]            ;417
000028  f7fffffe          BL       TIM_CCxChannelCmd
00002c  490d              LDR      r1,|L15.100|
00002e  6a20              LDR      r0,[r4,#0x20]         ;420
000030  6401              STR      r1,[r0,#0x40]         ;420
000032  490d              LDR      r1,|L15.104|
000034  6a20              LDR      r0,[r4,#0x20]         ;422
000036  6501              STR      r1,[r0,#0x50]         ;422
000038  6822              LDR      r2,[r4,#0]            ;425
00003a  f1020134          ADD      r1,r2,#0x34           ;425
00003e  4633              MOV      r3,r6                 ;425
000040  462a              MOV      r2,r5                 ;425
000042  6a20              LDR      r0,[r4,#0x20]         ;425
000044  f7fffffe          BL       HAL_DMA_Start_IT
000048  6820              LDR      r0,[r4,#0]            ;428
00004a  68c0              LDR      r0,[r0,#0xc]          ;428
00004c  f4407000          ORR      r0,r0,#0x200          ;428
000050  6821              LDR      r1,[r4,#0]            ;428
000052  60c8              STR      r0,[r1,#0xc]          ;428
000054  6820              LDR      r0,[r4,#0]            ;431
000056  6800              LDR      r0,[r0,#0]            ;431
000058  f0400001          ORR      r0,r0,#1              ;431
00005c  6821              LDR      r1,[r4,#0]            ;431
00005e  6008              STR      r0,[r1,#0]            ;431
000060  2000              MOVS     r0,#0                 ;434
000062  e7d4              B        |L15.14|
;;;436    
                          ENDP

                  |L15.100|
                          DCD      TIM_DMACaptureCplt
                  |L15.104|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_HallSensor_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Start_IT PROC
;;;342      */
;;;343    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;344    { 
000002  4604              MOV      r4,r0
;;;345      /* Check the parameters */
;;;346      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;347      
;;;348      /* Enable the capture compare Interrupts 1 event */
;;;349      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000004  6820              LDR      r0,[r4,#0]
000006  68c0              LDR      r0,[r0,#0xc]
000008  f0400002          ORR      r0,r0,#2
00000c  6821              LDR      r1,[r4,#0]
00000e  60c8              STR      r0,[r1,#0xc]
;;;350      
;;;351      /* Enable the Input Capture channels 1
;;;352        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;353      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);  
000010  2201              MOVS     r2,#1
000012  2100              MOVS     r1,#0
000014  6820              LDR      r0,[r4,#0]
000016  f7fffffe          BL       TIM_CCxChannelCmd
;;;354      
;;;355      /* Enable the Peripheral */
;;;356      __HAL_TIM_ENABLE(htim);
00001a  6820              LDR      r0,[r4,#0]
00001c  6800              LDR      r0,[r0,#0]
00001e  f0400001          ORR      r0,r0,#1
000022  6821              LDR      r1,[r4,#0]
000024  6008              STR      r0,[r1,#0]
;;;357      
;;;358      /* Return function status */
;;;359      return HAL_OK;
000026  2000              MOVS     r0,#0
;;;360    }
000028  bd10              POP      {r4,pc}
;;;361    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop PROC
;;;320      */
;;;321    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;322    {
000002  4604              MOV      r4,r0
;;;323      /* Check the parameters */
;;;324      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;325      
;;;326      /* Disable the Input Capture channels 1, 2 and 3
;;;327        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;328      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;329    
;;;330      /* Disable the Peripheral */
;;;331      __HAL_TIM_DISABLE(htim);
00000e  bf00              NOP      
000010  6820              LDR      r0,[r4,#0]
000012  6a00              LDR      r0,[r0,#0x20]
000014  f2411111          MOV      r1,#0x1111
000018  4008              ANDS     r0,r0,r1
00001a  b950              CBNZ     r0,|L17.50|
00001c  6820              LDR      r0,[r4,#0]
00001e  6a00              LDR      r0,[r0,#0x20]
000020  1089              ASRS     r1,r1,#2
000022  4008              ANDS     r0,r0,r1
000024  b928              CBNZ     r0,|L17.50|
000026  6820              LDR      r0,[r4,#0]
000028  6800              LDR      r0,[r0,#0]
00002a  f0200001          BIC      r0,r0,#1
00002e  6821              LDR      r1,[r4,#0]
000030  6008              STR      r0,[r1,#0]
                  |L17.50|
000032  bf00              NOP      
;;;332      
;;;333      /* Return function status */
;;;334      return HAL_OK;
000034  2000              MOVS     r0,#0
;;;335    }
000036  bd10              POP      {r4,pc}
;;;336    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop_DMA PROC
;;;442      */
;;;443    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;444    {
000002  4604              MOV      r4,r0
;;;445      /* Check the parameters */
;;;446      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;447      
;;;448      /* Disable the Input Capture channels 1
;;;449        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;450      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;451     
;;;452      
;;;453      /* Disable the capture compare Interrupts 1 event */
;;;454      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
00000e  6820              LDR      r0,[r4,#0]
000010  68c0              LDR      r0,[r0,#0xc]
000012  f4207000          BIC      r0,r0,#0x200
000016  6821              LDR      r1,[r4,#0]
000018  60c8              STR      r0,[r1,#0xc]
;;;455     
;;;456      /* Disable the Peripheral */
;;;457      __HAL_TIM_DISABLE(htim);
00001a  bf00              NOP      
00001c  6820              LDR      r0,[r4,#0]
00001e  6a00              LDR      r0,[r0,#0x20]
000020  f2411111          MOV      r1,#0x1111
000024  4008              ANDS     r0,r0,r1
000026  b950              CBNZ     r0,|L18.62|
000028  6820              LDR      r0,[r4,#0]
00002a  6a00              LDR      r0,[r0,#0x20]
00002c  1089              ASRS     r1,r1,#2
00002e  4008              ANDS     r0,r0,r1
000030  b928              CBNZ     r0,|L18.62|
000032  6820              LDR      r0,[r4,#0]
000034  6800              LDR      r0,[r0,#0]
000036  f0200001          BIC      r0,r0,#1
00003a  6821              LDR      r1,[r4,#0]
00003c  6008              STR      r0,[r1,#0]
                  |L18.62|
00003e  bf00              NOP      
;;;458      
;;;459      /* Return function status */
;;;460      return HAL_OK;
000040  2000              MOVS     r0,#0
;;;461    }
000042  bd10              POP      {r4,pc}
;;;462    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop_IT PROC
;;;367      */
;;;368    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;369    {
000002  4604              MOV      r4,r0
;;;370      /* Check the parameters */
;;;371      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;372      
;;;373      /* Disable the Input Capture channels 1
;;;374        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;375      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;376      
;;;377      /* Disable the capture compare Interrupts event */
;;;378      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
00000e  6820              LDR      r0,[r4,#0]
000010  68c0              LDR      r0,[r0,#0xc]
000012  f0200002          BIC      r0,r0,#2
000016  6821              LDR      r1,[r4,#0]
000018  60c8              STR      r0,[r1,#0xc]
;;;379      
;;;380      /* Disable the Peripheral */
;;;381      __HAL_TIM_DISABLE(htim);
00001a  bf00              NOP      
00001c  6820              LDR      r0,[r4,#0]
00001e  6a00              LDR      r0,[r0,#0x20]
000020  f2411111          MOV      r1,#0x1111
000024  4008              ANDS     r0,r0,r1
000026  b950              CBNZ     r0,|L19.62|
000028  6820              LDR      r0,[r4,#0]
00002a  6a00              LDR      r0,[r0,#0x20]
00002c  1089              ASRS     r1,r1,#2
00002e  4008              ANDS     r0,r0,r1
000030  b928              CBNZ     r0,|L19.62|
000032  6820              LDR      r0,[r4,#0]
000034  6800              LDR      r0,[r0,#0]
000036  f0200001          BIC      r0,r0,#1
00003a  6821              LDR      r1,[r4,#0]
00003c  6008              STR      r0,[r1,#0]
                  |L19.62|
00003e  bf00              NOP      
;;;382      
;;;383      /* Return function status */
;;;384      return HAL_OK;
000040  2000              MOVS     r0,#0
;;;385    }
000042  bd10              POP      {r4,pc}
;;;386    
                          ENDP


                          AREA ||i.HAL_TIMEx_MasterConfigSynchronization||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_MasterConfigSynchronization PROC
;;;2051     */
;;;2052   HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
000000  b530              PUSH     {r4,r5,lr}
;;;2053   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;2054     uint32_t tmpcr2;  
;;;2055     uint32_t tmpsmcr;  
;;;2056   
;;;2057     /* Check the parameters */
;;;2058     assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
;;;2059     assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
;;;2060     assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
;;;2061     
;;;2062     /* Check input state */
;;;2063     __HAL_LOCK(htim);
000006  bf00              NOP      
000008  6b90              LDR      r0,[r2,#0x38]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L20.18|
00000e  2002              MOVS     r0,#2
                  |L20.16|
;;;2064   
;;;2065    /* Get the TIMx CR2 register value */
;;;2066     tmpcr2 = htim->Instance->CR2;
;;;2067   
;;;2068     /* Get the TIMx SMCR register value */
;;;2069     tmpsmcr = htim->Instance->SMCR;
;;;2070   
;;;2071     /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
;;;2072     if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
;;;2073     {
;;;2074       /* Check the parameters */
;;;2075       assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
;;;2076       
;;;2077       /* Clear the MMS2 bits */
;;;2078       tmpcr2 &= ~TIM_CR2_MMS2;
;;;2079       /* Select the TRGO2 source*/
;;;2080       tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
;;;2081     }
;;;2082     
;;;2083     /* Reset the MMS Bits */
;;;2084     tmpcr2 &= ~TIM_CR2_MMS;
;;;2085     /* Select the TRGO source */
;;;2086     tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
;;;2087   
;;;2088     /* Reset the MSM Bit */
;;;2089     tmpsmcr &= ~TIM_SMCR_MSM;
;;;2090     /* Set master mode */
;;;2091     tmpsmcr |= sMasterConfig->MasterSlaveMode;
;;;2092     
;;;2093     /* Update TIMx CR2 */
;;;2094     htim->Instance->CR2 = tmpcr2;
;;;2095     
;;;2096     /* Update TIMx SMCR */
;;;2097     htim->Instance->SMCR = tmpsmcr;
;;;2098   
;;;2099     __HAL_UNLOCK(htim);
;;;2100     
;;;2101     return HAL_OK;
;;;2102   } 
000010  bd30              POP      {r4,r5,pc}
                  |L20.18|
000012  2001              MOVS     r0,#1                 ;2063
000014  6390              STR      r0,[r2,#0x38]         ;2063
000016  bf00              NOP                            ;2063
000018  6810              LDR      r0,[r2,#0]            ;2066
00001a  6841              LDR      r1,[r0,#4]            ;2066
00001c  6810              LDR      r0,[r2,#0]            ;2069
00001e  6884              LDR      r4,[r0,#8]            ;2069
000020  4d0e              LDR      r5,|L20.92|
000022  6810              LDR      r0,[r2,#0]            ;2072
000024  42a8              CMP      r0,r5                 ;2072
000026  d003              BEQ      |L20.48|
000028  4d0d              LDR      r5,|L20.96|
00002a  6810              LDR      r0,[r2,#0]            ;2072
00002c  42a8              CMP      r0,r5                 ;2072
00002e  d103              BNE      |L20.56|
                  |L20.48|
000030  f4210170          BIC      r1,r1,#0xf00000       ;2078
000034  6858              LDR      r0,[r3,#4]            ;2080
000036  4301              ORRS     r1,r1,r0              ;2080
                  |L20.56|
000038  f0210170          BIC      r1,r1,#0x70           ;2084
00003c  6818              LDR      r0,[r3,#0]            ;2086
00003e  4301              ORRS     r1,r1,r0              ;2086
000040  f0240480          BIC      r4,r4,#0x80           ;2089
000044  6898              LDR      r0,[r3,#8]            ;2091
000046  4304              ORRS     r4,r4,r0              ;2091
000048  6810              LDR      r0,[r2,#0]            ;2094
00004a  6041              STR      r1,[r0,#4]            ;2094
00004c  6810              LDR      r0,[r2,#0]            ;2097
00004e  6084              STR      r4,[r0,#8]            ;2097
000050  bf00              NOP                            ;2099
000052  2000              MOVS     r0,#0                 ;2099
000054  6390              STR      r0,[r2,#0x38]         ;2099
000056  bf00              NOP                            ;2099
000058  bf00              NOP                            ;2101
00005a  e7d9              B        |L20.16|
;;;2103                                                        
                          ENDP

                  |L20.92|
                          DCD      0x40010000
                  |L20.96|
                          DCD      0x40010400

                          AREA ||i.HAL_TIMEx_OCN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Start PROC
;;;499      */
;;;500    HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;501    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;502      /* Check the parameters */
;;;503      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;504      
;;;505         /* Enable the Capture compare channel N */
;;;506         TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
000006  2204              MOVS     r2,#4
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;507        
;;;508      /* Enable the Main Output */
;;;509        __HAL_TIM_MOE_ENABLE(htim);
000010  6820              LDR      r0,[r4,#0]
000012  6c40              LDR      r0,[r0,#0x44]
000014  f4404000          ORR      r0,r0,#0x8000
000018  6821              LDR      r1,[r4,#0]
00001a  6448              STR      r0,[r1,#0x44]
;;;510    
;;;511      /* Enable the Peripheral */
;;;512      __HAL_TIM_ENABLE(htim);
00001c  6820              LDR      r0,[r4,#0]
00001e  6800              LDR      r0,[r0,#0]
000020  f0400001          ORR      r0,r0,#1
000024  6821              LDR      r1,[r4,#0]
000026  6008              STR      r0,[r1,#0]
;;;513      
;;;514      /* Return function status */
;;;515      return HAL_OK;
000028  2000              MOVS     r0,#0
;;;516    } 
00002a  bd70              POP      {r4-r6,pc}
;;;517    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OCN_Start_DMA PROC
;;;705      */
;;;706    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;707    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;708      /* Check the parameters */
;;;709      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;710      
;;;711      if((htim->State == HAL_TIM_STATE_BUSY))
00000c  6be0              LDR      r0,[r4,#0x3c]
00000e  2802              CMP      r0,#2
000010  d101              BNE      |L22.22|
                  |L22.18|
;;;712      {
;;;713         return HAL_BUSY;
;;;714      }
;;;715      else if((htim->State == HAL_TIM_STATE_READY))
;;;716      {
;;;717        if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;718        {
;;;719          return HAL_ERROR;                                    
;;;720        }
;;;721        else
;;;722        {
;;;723          htim->State = HAL_TIM_STATE_BUSY;
;;;724        }
;;;725      }    
;;;726      switch (Channel)
;;;727      {
;;;728        case TIM_CHANNEL_1:
;;;729        {      
;;;730          /* Set the DMA Period elapsed callback */
;;;731          htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;732         
;;;733          /* Set the DMA error callback */
;;;734          htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;735          
;;;736          /* Enable the DMA Stream */
;;;737          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;738          
;;;739          /* Enable the TIM Output Compare DMA request */
;;;740          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;741        }
;;;742        break;
;;;743        
;;;744        case TIM_CHANNEL_2:
;;;745        {
;;;746          /* Set the DMA Period elapsed callback */
;;;747          htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;748         
;;;749          /* Set the DMA error callback */
;;;750          htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
;;;751          
;;;752          /* Enable the DMA Stream */
;;;753          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;754          
;;;755          /* Enable the TIM Output Compare DMA request */
;;;756          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;757        }
;;;758        break;
;;;759        
;;;760        case TIM_CHANNEL_3:
;;;761    {
;;;762          /* Set the DMA Period elapsed callback */
;;;763          htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;764         
;;;765          /* Set the DMA error callback */
;;;766          htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
;;;767          
;;;768          /* Enable the DMA Stream */
;;;769          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;770          
;;;771          /* Enable the TIM Output Compare DMA request */
;;;772          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;773        }
;;;774        break;
;;;775        
;;;776        case TIM_CHANNEL_4:
;;;777        {
;;;778         /* Set the DMA Period elapsed callback */
;;;779          htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;780         
;;;781          /* Set the DMA error callback */
;;;782          htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
;;;783          
;;;784          /* Enable the DMA Stream */
;;;785          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;786          
;;;787          /* Enable the TIM Output Compare DMA request */
;;;788          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;789        }
;;;790        break;
;;;791        
;;;792        default:
;;;793        break;
;;;794      }
;;;795    
;;;796      /* Enable the Capture compare channel N */
;;;797      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;798      
;;;799      /* Enable the Main Output */
;;;800      __HAL_TIM_MOE_ENABLE(htim);
;;;801      
;;;802      /* Enable the Peripheral */
;;;803      __HAL_TIM_ENABLE(htim); 
;;;804      
;;;805      /* Return function status */
;;;806      return HAL_OK;
;;;807    }
000012  e8bd81f0          POP      {r4-r8,pc}
                  |L22.22|
000016  6be0              LDR      r0,[r4,#0x3c]         ;715
000018  2801              CMP      r0,#1                 ;715
00001a  d105              BNE      |L22.40|
00001c  b915              CBNZ     r5,|L22.36|
00001e  2f00              CMP      r7,#0                 ;717
000020  dd00              BLE      |L22.36|
000022  e7f6              B        |L22.18|
                  |L22.36|
000024  2002              MOVS     r0,#2                 ;723
000026  63e0              STR      r0,[r4,#0x3c]         ;723
                  |L22.40|
000028  b136              CBZ      r6,|L22.56|
00002a  2e04              CMP      r6,#4                 ;726
00002c  d019              BEQ      |L22.98|
00002e  2e08              CMP      r6,#8                 ;726
000030  d02c              BEQ      |L22.140|
000032  2e0c              CMP      r6,#0xc               ;726
000034  d154              BNE      |L22.224|
000036  e03e              B        |L22.182|
                  |L22.56|
000038  4934              LDR      r1,|L22.268|
00003a  6a20              LDR      r0,[r4,#0x20]         ;731
00003c  6401              STR      r1,[r0,#0x40]         ;731
00003e  4934              LDR      r1,|L22.272|
000040  6a20              LDR      r0,[r4,#0x20]         ;734
000042  6501              STR      r1,[r0,#0x50]         ;734
000044  6821              LDR      r1,[r4,#0]            ;737
000046  f1010234          ADD      r2,r1,#0x34           ;737
00004a  463b              MOV      r3,r7                 ;737
00004c  4629              MOV      r1,r5                 ;737
00004e  6a20              LDR      r0,[r4,#0x20]         ;737
000050  f7fffffe          BL       HAL_DMA_Start_IT
000054  6820              LDR      r0,[r4,#0]            ;740
000056  68c0              LDR      r0,[r0,#0xc]          ;740
000058  f4407000          ORR      r0,r0,#0x200          ;740
00005c  6821              LDR      r1,[r4,#0]            ;740
00005e  60c8              STR      r0,[r1,#0xc]          ;740
000060  e03f              B        |L22.226|
                  |L22.98|
000062  492a              LDR      r1,|L22.268|
000064  6a60              LDR      r0,[r4,#0x24]         ;747
000066  6401              STR      r1,[r0,#0x40]         ;747
000068  4929              LDR      r1,|L22.272|
00006a  6a60              LDR      r0,[r4,#0x24]         ;750
00006c  6501              STR      r1,[r0,#0x50]         ;750
00006e  6821              LDR      r1,[r4,#0]            ;753
000070  f1010238          ADD      r2,r1,#0x38           ;753
000074  463b              MOV      r3,r7                 ;753
000076  4629              MOV      r1,r5                 ;753
000078  6a60              LDR      r0,[r4,#0x24]         ;753
00007a  f7fffffe          BL       HAL_DMA_Start_IT
00007e  6820              LDR      r0,[r4,#0]            ;756
000080  68c0              LDR      r0,[r0,#0xc]          ;756
000082  f4406080          ORR      r0,r0,#0x400          ;756
000086  6821              LDR      r1,[r4,#0]            ;756
000088  60c8              STR      r0,[r1,#0xc]          ;756
00008a  e02a              B        |L22.226|
                  |L22.140|
00008c  491f              LDR      r1,|L22.268|
00008e  6aa0              LDR      r0,[r4,#0x28]         ;763
000090  6401              STR      r1,[r0,#0x40]         ;763
000092  491f              LDR      r1,|L22.272|
000094  6aa0              LDR      r0,[r4,#0x28]         ;766
000096  6501              STR      r1,[r0,#0x50]         ;766
000098  6821              LDR      r1,[r4,#0]            ;769
00009a  f101023c          ADD      r2,r1,#0x3c           ;769
00009e  463b              MOV      r3,r7                 ;769
0000a0  4629              MOV      r1,r5                 ;769
0000a2  6aa0              LDR      r0,[r4,#0x28]         ;769
0000a4  f7fffffe          BL       HAL_DMA_Start_IT
0000a8  6820              LDR      r0,[r4,#0]            ;772
0000aa  68c0              LDR      r0,[r0,#0xc]          ;772
0000ac  f4406000          ORR      r0,r0,#0x800          ;772
0000b0  6821              LDR      r1,[r4,#0]            ;772
0000b2  60c8              STR      r0,[r1,#0xc]          ;772
0000b4  e015              B        |L22.226|
                  |L22.182|
0000b6  4915              LDR      r1,|L22.268|
0000b8  6ae0              LDR      r0,[r4,#0x2c]         ;779
0000ba  6401              STR      r1,[r0,#0x40]         ;779
0000bc  4914              LDR      r1,|L22.272|
0000be  6ae0              LDR      r0,[r4,#0x2c]         ;782
0000c0  6501              STR      r1,[r0,#0x50]         ;782
0000c2  6821              LDR      r1,[r4,#0]            ;785
0000c4  f1010240          ADD      r2,r1,#0x40           ;785
0000c8  463b              MOV      r3,r7                 ;785
0000ca  4629              MOV      r1,r5                 ;785
0000cc  6ae0              LDR      r0,[r4,#0x2c]         ;785
0000ce  f7fffffe          BL       HAL_DMA_Start_IT
0000d2  6820              LDR      r0,[r4,#0]            ;788
0000d4  68c0              LDR      r0,[r0,#0xc]          ;788
0000d6  f4405080          ORR      r0,r0,#0x1000         ;788
0000da  6821              LDR      r1,[r4,#0]            ;788
0000dc  60c8              STR      r0,[r1,#0xc]          ;788
0000de  e000              B        |L22.226|
                  |L22.224|
0000e0  bf00              NOP                            ;793
                  |L22.226|
0000e2  bf00              NOP                            ;742
0000e4  2204              MOVS     r2,#4                 ;797
0000e6  4631              MOV      r1,r6                 ;797
0000e8  6820              LDR      r0,[r4,#0]            ;797
0000ea  f7fffffe          BL       TIM_CCxNChannelCmd
0000ee  6820              LDR      r0,[r4,#0]            ;800
0000f0  6c40              LDR      r0,[r0,#0x44]         ;800
0000f2  f4404000          ORR      r0,r0,#0x8000         ;800
0000f6  6821              LDR      r1,[r4,#0]            ;800
0000f8  6448              STR      r0,[r1,#0x44]         ;800
0000fa  6820              LDR      r0,[r4,#0]            ;803
0000fc  6800              LDR      r0,[r0,#0]            ;803
0000fe  f0400001          ORR      r0,r0,#1              ;803
000102  6821              LDR      r1,[r4,#0]            ;803
000104  6008              STR      r0,[r1,#0]            ;803
000106  2000              MOVS     r0,#0                 ;806
000108  e783              B        |L22.18|
;;;808    
                          ENDP

00010a  0000              DCW      0x0000
                  |L22.268|
                          DCD      TIM_DMADelayPulseCplt
                  |L22.272|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_OCN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Start_IT PROC
;;;561      */
;;;562    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;563    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;564      /* Check the parameters */
;;;565      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;566      
;;;567      switch (Channel)
000006  b135              CBZ      r5,|L23.22|
000008  2d04              CMP      r5,#4
00000a  d00b              BEQ      |L23.36|
00000c  2d08              CMP      r5,#8
00000e  d010              BEQ      |L23.50|
000010  2d0c              CMP      r5,#0xc
000012  d11c              BNE      |L23.78|
000014  e014              B        |L23.64|
                  |L23.22|
;;;568      {
;;;569        case TIM_CHANNEL_1:
;;;570        {       
;;;571          /* Enable the TIM Output Compare interrupt */
;;;572          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000016  6820              LDR      r0,[r4,#0]
000018  68c0              LDR      r0,[r0,#0xc]
00001a  f0400002          ORR      r0,r0,#2
00001e  6821              LDR      r1,[r4,#0]
000020  60c8              STR      r0,[r1,#0xc]
;;;573        }
;;;574        break;
000022  e015              B        |L23.80|
                  |L23.36|
;;;575        
;;;576        case TIM_CHANNEL_2:
;;;577        {
;;;578          /* Enable the TIM Output Compare interrupt */
;;;579          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000024  6820              LDR      r0,[r4,#0]
000026  68c0              LDR      r0,[r0,#0xc]
000028  f0400004          ORR      r0,r0,#4
00002c  6821              LDR      r1,[r4,#0]
00002e  60c8              STR      r0,[r1,#0xc]
;;;580        }
;;;581        break;
000030  e00e              B        |L23.80|
                  |L23.50|
;;;582        
;;;583        case TIM_CHANNEL_3:
;;;584        {
;;;585          /* Enable the TIM Output Compare interrupt */
;;;586          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
000032  6820              LDR      r0,[r4,#0]
000034  68c0              LDR      r0,[r0,#0xc]
000036  f0400008          ORR      r0,r0,#8
00003a  6821              LDR      r1,[r4,#0]
00003c  60c8              STR      r0,[r1,#0xc]
;;;587        }
;;;588        break;
00003e  e007              B        |L23.80|
                  |L23.64|
;;;589        
;;;590        case TIM_CHANNEL_4:
;;;591        {
;;;592          /* Enable the TIM Output Compare interrupt */
;;;593          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000040  6820              LDR      r0,[r4,#0]
000042  68c0              LDR      r0,[r0,#0xc]
000044  f0400010          ORR      r0,r0,#0x10
000048  6821              LDR      r1,[r4,#0]
00004a  60c8              STR      r0,[r1,#0xc]
;;;594        }
;;;595        break;
00004c  e000              B        |L23.80|
                  |L23.78|
;;;596        
;;;597        default:
;;;598        break;
00004e  bf00              NOP      
                  |L23.80|
000050  bf00              NOP                            ;574
;;;599      } 
;;;600      
;;;601      /* Enable the TIM Break interrupt */
;;;602      __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
000052  6820              LDR      r0,[r4,#0]
000054  68c0              LDR      r0,[r0,#0xc]
000056  f0400080          ORR      r0,r0,#0x80
00005a  6821              LDR      r1,[r4,#0]
00005c  60c8              STR      r0,[r1,#0xc]
;;;603      
;;;604      /* Enable the Capture compare channel N */
;;;605      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
00005e  2204              MOVS     r2,#4
000060  4629              MOV      r1,r5
000062  6820              LDR      r0,[r4,#0]
000064  f7fffffe          BL       TIM_CCxNChannelCmd
;;;606    
;;;607      /* Enable the Main Output */
;;;608     __HAL_TIM_MOE_ENABLE(htim);
000068  6820              LDR      r0,[r4,#0]
00006a  6c40              LDR      r0,[r0,#0x44]
00006c  f4404000          ORR      r0,r0,#0x8000
000070  6821              LDR      r1,[r4,#0]
000072  6448              STR      r0,[r1,#0x44]
;;;609    
;;;610      /* Enable the Peripheral */
;;;611      __HAL_TIM_ENABLE(htim);
000074  6820              LDR      r0,[r4,#0]
000076  6800              LDR      r0,[r0,#0]
000078  f0400001          ORR      r0,r0,#1
00007c  6821              LDR      r1,[r4,#0]
00007e  6008              STR      r0,[r1,#0]
;;;612      
;;;613      /* Return function status */
;;;614      return HAL_OK;
000080  2000              MOVS     r0,#0
;;;615    } 
000082  bd70              POP      {r4-r6,pc}
;;;616    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop PROC
;;;530      */
;;;531    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;532    { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;533      /* Check the parameters */
;;;534      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;535      
;;;536        /* Disable the Capture compare channel N */
;;;537      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;538        
;;;539      /* Disable the Main Output */
;;;540        __HAL_TIM_MOE_DISABLE(htim);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  6a00              LDR      r0,[r0,#0x20]
000016  f2411111          MOV      r1,#0x1111
00001a  4008              ANDS     r0,r0,r1
00001c  b950              CBNZ     r0,|L24.52|
00001e  6820              LDR      r0,[r4,#0]
000020  6a00              LDR      r0,[r0,#0x20]
000022  1089              ASRS     r1,r1,#2
000024  4008              ANDS     r0,r0,r1
000026  b928              CBNZ     r0,|L24.52|
000028  6820              LDR      r0,[r4,#0]
00002a  6c40              LDR      r0,[r0,#0x44]
00002c  f4204000          BIC      r0,r0,#0x8000
000030  6821              LDR      r1,[r4,#0]
000032  6448              STR      r0,[r1,#0x44]
                  |L24.52|
000034  bf00              NOP      
;;;541    
;;;542      /* Disable the Peripheral */
;;;543      __HAL_TIM_DISABLE(htim);
000036  bf00              NOP      
000038  6820              LDR      r0,[r4,#0]
00003a  6a00              LDR      r0,[r0,#0x20]
00003c  f2411111          MOV      r1,#0x1111
000040  4008              ANDS     r0,r0,r1
000042  b950              CBNZ     r0,|L24.90|
000044  6820              LDR      r0,[r4,#0]
000046  6a00              LDR      r0,[r0,#0x20]
000048  1089              ASRS     r1,r1,#2
00004a  4008              ANDS     r0,r0,r1
00004c  b928              CBNZ     r0,|L24.90|
00004e  6820              LDR      r0,[r4,#0]
000050  6800              LDR      r0,[r0,#0]
000052  f0200001          BIC      r0,r0,#1
000056  6821              LDR      r1,[r4,#0]
000058  6008              STR      r0,[r1,#0]
                  |L24.90|
00005a  bf00              NOP      
;;;544      
;;;545      /* Return function status */
;;;546      return HAL_OK;
00005c  2000              MOVS     r0,#0
;;;547    } 
00005e  bd70              POP      {r4-r6,pc}
;;;548    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop_DMA PROC
;;;821      */
;;;822    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;823    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;824      /* Check the parameters */
;;;825      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;826      
;;;827      switch (Channel)
000006  b135              CBZ      r5,|L25.22|
000008  2d04              CMP      r5,#4
00000a  d00b              BEQ      |L25.36|
00000c  2d08              CMP      r5,#8
00000e  d010              BEQ      |L25.50|
000010  2d0c              CMP      r5,#0xc
000012  d11c              BNE      |L25.78|
000014  e014              B        |L25.64|
                  |L25.22|
;;;828      {
;;;829        case TIM_CHANNEL_1:
;;;830        {       
;;;831          /* Disable the TIM Output Compare DMA request */
;;;832          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000016  6820              LDR      r0,[r4,#0]
000018  68c0              LDR      r0,[r0,#0xc]
00001a  f4207000          BIC      r0,r0,#0x200
00001e  6821              LDR      r1,[r4,#0]
000020  60c8              STR      r0,[r1,#0xc]
;;;833        }
;;;834        break;
000022  e015              B        |L25.80|
                  |L25.36|
;;;835        
;;;836        case TIM_CHANNEL_2:
;;;837        {
;;;838          /* Disable the TIM Output Compare DMA request */
;;;839          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000024  6820              LDR      r0,[r4,#0]
000026  68c0              LDR      r0,[r0,#0xc]
000028  f4206080          BIC      r0,r0,#0x400
00002c  6821              LDR      r1,[r4,#0]
00002e  60c8              STR      r0,[r1,#0xc]
;;;840        }
;;;841        break;
000030  e00e              B        |L25.80|
                  |L25.50|
;;;842        
;;;843        case TIM_CHANNEL_3:
;;;844        {
;;;845          /* Disable the TIM Output Compare DMA request */
;;;846          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
000032  6820              LDR      r0,[r4,#0]
000034  68c0              LDR      r0,[r0,#0xc]
000036  f4206000          BIC      r0,r0,#0x800
00003a  6821              LDR      r1,[r4,#0]
00003c  60c8              STR      r0,[r1,#0xc]
;;;847        }
;;;848        break;
00003e  e007              B        |L25.80|
                  |L25.64|
;;;849        
;;;850        case TIM_CHANNEL_4:
;;;851        {
;;;852          /* Disable the TIM Output Compare interrupt */
;;;853          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
000040  6820              LDR      r0,[r4,#0]
000042  68c0              LDR      r0,[r0,#0xc]
000044  f4205080          BIC      r0,r0,#0x1000
000048  6821              LDR      r1,[r4,#0]
00004a  60c8              STR      r0,[r1,#0xc]
;;;854        }
;;;855        break;
00004c  e000              B        |L25.80|
                  |L25.78|
;;;856        
;;;857        default:
;;;858        break;
00004e  bf00              NOP      
                  |L25.80|
000050  bf00              NOP                            ;834
;;;859      } 
;;;860      
;;;861      /* Disable the Capture compare channel N */
;;;862      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000052  2200              MOVS     r2,#0
000054  4629              MOV      r1,r5
000056  6820              LDR      r0,[r4,#0]
000058  f7fffffe          BL       TIM_CCxNChannelCmd
;;;863      
;;;864      /* Disable the Main Output */
;;;865      __HAL_TIM_MOE_DISABLE(htim);
00005c  bf00              NOP      
00005e  6820              LDR      r0,[r4,#0]
000060  6a00              LDR      r0,[r0,#0x20]
000062  f2411111          MOV      r1,#0x1111
000066  4008              ANDS     r0,r0,r1
000068  b950              CBNZ     r0,|L25.128|
00006a  6820              LDR      r0,[r4,#0]
00006c  6a00              LDR      r0,[r0,#0x20]
00006e  1089              ASRS     r1,r1,#2
000070  4008              ANDS     r0,r0,r1
000072  b928              CBNZ     r0,|L25.128|
000074  6820              LDR      r0,[r4,#0]
000076  6c40              LDR      r0,[r0,#0x44]
000078  f4204000          BIC      r0,r0,#0x8000
00007c  6821              LDR      r1,[r4,#0]
00007e  6448              STR      r0,[r1,#0x44]
                  |L25.128|
000080  bf00              NOP      
;;;866      
;;;867      /* Disable the Peripheral */
;;;868      __HAL_TIM_DISABLE(htim);
000082  bf00              NOP      
000084  6820              LDR      r0,[r4,#0]
000086  6a00              LDR      r0,[r0,#0x20]
000088  f2411111          MOV      r1,#0x1111
00008c  4008              ANDS     r0,r0,r1
00008e  b950              CBNZ     r0,|L25.166|
000090  6820              LDR      r0,[r4,#0]
000092  6a00              LDR      r0,[r0,#0x20]
000094  1089              ASRS     r1,r1,#2
000096  4008              ANDS     r0,r0,r1
000098  b928              CBNZ     r0,|L25.166|
00009a  6820              LDR      r0,[r4,#0]
00009c  6800              LDR      r0,[r0,#0]
00009e  f0200001          BIC      r0,r0,#1
0000a2  6821              LDR      r1,[r4,#0]
0000a4  6008              STR      r0,[r1,#0]
                  |L25.166|
0000a6  bf00              NOP      
;;;869      
;;;870      /* Change the htim state */
;;;871      htim->State = HAL_TIM_STATE_READY;
0000a8  2001              MOVS     r0,#1
0000aa  63e0              STR      r0,[r4,#0x3c]
;;;872      
;;;873      /* Return function status */
;;;874      return HAL_OK;
0000ac  2000              MOVS     r0,#0
;;;875    }
0000ae  bd70              POP      {r4-r6,pc}
;;;876    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop_IT PROC
;;;629      */
;;;630    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;631    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;632      uint32_t tmpccer = 0; 
000006  2600              MOVS     r6,#0
;;;633    
;;;634      /* Check the parameters */
;;;635      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;636      
;;;637      switch (Channel)
000008  b135              CBZ      r5,|L26.24|
00000a  2d04              CMP      r5,#4
00000c  d00b              BEQ      |L26.38|
00000e  2d08              CMP      r5,#8
000010  d010              BEQ      |L26.52|
000012  2d0c              CMP      r5,#0xc
000014  d11c              BNE      |L26.80|
000016  e014              B        |L26.66|
                  |L26.24|
;;;638      {
;;;639        case TIM_CHANNEL_1:
;;;640        {       
;;;641          /* Disable the TIM Output Compare interrupt */
;;;642          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000018  6820              LDR      r0,[r4,#0]
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  f0200002          BIC      r0,r0,#2
000020  6821              LDR      r1,[r4,#0]
000022  60c8              STR      r0,[r1,#0xc]
;;;643        }
;;;644        break;
000024  e015              B        |L26.82|
                  |L26.38|
;;;645        
;;;646        case TIM_CHANNEL_2:
;;;647        {
;;;648          /* Disable the TIM Output Compare interrupt */
;;;649          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000026  6820              LDR      r0,[r4,#0]
000028  68c0              LDR      r0,[r0,#0xc]
00002a  f0200004          BIC      r0,r0,#4
00002e  6821              LDR      r1,[r4,#0]
000030  60c8              STR      r0,[r1,#0xc]
;;;650        }
;;;651        break;
000032  e00e              B        |L26.82|
                  |L26.52|
;;;652        
;;;653        case TIM_CHANNEL_3:
;;;654        {
;;;655          /* Disable the TIM Output Compare interrupt */
;;;656          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000034  6820              LDR      r0,[r4,#0]
000036  68c0              LDR      r0,[r0,#0xc]
000038  f0200008          BIC      r0,r0,#8
00003c  6821              LDR      r1,[r4,#0]
00003e  60c8              STR      r0,[r1,#0xc]
;;;657        }
;;;658        break;
000040  e007              B        |L26.82|
                  |L26.66|
;;;659        
;;;660        case TIM_CHANNEL_4:
;;;661        {
;;;662          /* Disable the TIM Output Compare interrupt */
;;;663          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
000042  6820              LDR      r0,[r4,#0]
000044  68c0              LDR      r0,[r0,#0xc]
000046  f0200010          BIC      r0,r0,#0x10
00004a  6821              LDR      r1,[r4,#0]
00004c  60c8              STR      r0,[r1,#0xc]
;;;664        }
;;;665        break;
00004e  e000              B        |L26.82|
                  |L26.80|
;;;666        
;;;667        default:
;;;668        break; 
000050  bf00              NOP      
                  |L26.82|
000052  bf00              NOP                            ;644
;;;669      }
;;;670    
;;;671      /* Disable the Capture compare channel N */
;;;672      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000054  2200              MOVS     r2,#0
000056  4629              MOV      r1,r5
000058  6820              LDR      r0,[r4,#0]
00005a  f7fffffe          BL       TIM_CCxNChannelCmd
;;;673    
;;;674      /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;675      tmpccer = htim->Instance->CCER;
00005e  6820              LDR      r0,[r4,#0]
000060  6a06              LDR      r6,[r0,#0x20]
;;;676      if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
000062  f2404044          MOV      r0,#0x444
000066  4030              ANDS     r0,r0,r6
000068  b928              CBNZ     r0,|L26.118|
;;;677      {
;;;678        __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
00006a  6820              LDR      r0,[r4,#0]
00006c  68c0              LDR      r0,[r0,#0xc]
00006e  f0200080          BIC      r0,r0,#0x80
000072  6821              LDR      r1,[r4,#0]
000074  60c8              STR      r0,[r1,#0xc]
                  |L26.118|
;;;679      }
;;;680    
;;;681      /* Disable the Main Output */
;;;682      __HAL_TIM_MOE_DISABLE(htim);
000076  bf00              NOP      
000078  6820              LDR      r0,[r4,#0]
00007a  6a00              LDR      r0,[r0,#0x20]
00007c  f2411111          MOV      r1,#0x1111
000080  4008              ANDS     r0,r0,r1
000082  b950              CBNZ     r0,|L26.154|
000084  6820              LDR      r0,[r4,#0]
000086  6a00              LDR      r0,[r0,#0x20]
000088  1089              ASRS     r1,r1,#2
00008a  4008              ANDS     r0,r0,r1
00008c  b928              CBNZ     r0,|L26.154|
00008e  6820              LDR      r0,[r4,#0]
000090  6c40              LDR      r0,[r0,#0x44]
000092  f4204000          BIC      r0,r0,#0x8000
000096  6821              LDR      r1,[r4,#0]
000098  6448              STR      r0,[r1,#0x44]
                  |L26.154|
00009a  bf00              NOP      
;;;683    
;;;684      /* Disable the Peripheral */
;;;685      __HAL_TIM_DISABLE(htim);
00009c  bf00              NOP      
00009e  6820              LDR      r0,[r4,#0]
0000a0  6a00              LDR      r0,[r0,#0x20]
0000a2  f2411111          MOV      r1,#0x1111
0000a6  4008              ANDS     r0,r0,r1
0000a8  b950              CBNZ     r0,|L26.192|
0000aa  6820              LDR      r0,[r4,#0]
0000ac  6a00              LDR      r0,[r0,#0x20]
0000ae  1089              ASRS     r1,r1,#2
0000b0  4008              ANDS     r0,r0,r1
0000b2  b928              CBNZ     r0,|L26.192|
0000b4  6820              LDR      r0,[r4,#0]
0000b6  6800              LDR      r0,[r0,#0]
0000b8  f0200001          BIC      r0,r0,#1
0000bc  6821              LDR      r1,[r4,#0]
0000be  6008              STR      r0,[r1,#0]
                  |L26.192|
0000c0  bf00              NOP      
;;;686      
;;;687      /* Return function status */
;;;688      return HAL_OK;
0000c2  2000              MOVS     r0,#0
;;;689    } 
0000c4  bd70              POP      {r4-r6,pc}
;;;690    
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start PROC
;;;1331     */
;;;1332   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1333     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1334     /* Check the parameters */
;;;1335     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1336     
;;;1337     /* Enable the complementary One Pulse output */
;;;1338     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
000006  2204              MOVS     r2,#4
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1339     
;;;1340     /* Enable the Main Output */
;;;1341     __HAL_TIM_MOE_ENABLE(htim);
000010  6820              LDR      r0,[r4,#0]
000012  6c40              LDR      r0,[r0,#0x44]
000014  f4404000          ORR      r0,r0,#0x8000
000018  6821              LDR      r1,[r4,#0]
00001a  6448              STR      r0,[r1,#0x44]
;;;1342     
;;;1343     /* Return function status */
;;;1344     return HAL_OK;
00001c  2000              MOVS     r0,#0
;;;1345   }
00001e  bd70              POP      {r4-r6,pc}
;;;1346   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start_IT PROC
;;;1387     */
;;;1388   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1389   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1390     /* Check the parameters */
;;;1391     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1392   
;;;1393     /* Enable the TIM Capture/Compare 1 interrupt */
;;;1394     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000006  6820              LDR      r0,[r4,#0]
000008  68c0              LDR      r0,[r0,#0xc]
00000a  f0400002          ORR      r0,r0,#2
00000e  6821              LDR      r1,[r4,#0]
000010  60c8              STR      r0,[r1,#0xc]
;;;1395     
;;;1396     /* Enable the TIM Capture/Compare 2 interrupt */
;;;1397     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000012  6820              LDR      r0,[r4,#0]
000014  68c0              LDR      r0,[r0,#0xc]
000016  f0400004          ORR      r0,r0,#4
00001a  6821              LDR      r1,[r4,#0]
00001c  60c8              STR      r0,[r1,#0xc]
;;;1398     
;;;1399     /* Enable the complementary One Pulse output */
;;;1400     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
00001e  2204              MOVS     r2,#4
000020  4629              MOV      r1,r5
000022  6820              LDR      r0,[r4,#0]
000024  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1401     
;;;1402     /* Enable the Main Output */
;;;1403     __HAL_TIM_MOE_ENABLE(htim);
000028  6820              LDR      r0,[r4,#0]
00002a  6c40              LDR      r0,[r0,#0x44]
00002c  f4404000          ORR      r0,r0,#0x8000
000030  6821              LDR      r1,[r4,#0]
000032  6448              STR      r0,[r1,#0x44]
;;;1404     
;;;1405     /* Return function status */
;;;1406     return HAL_OK;
000034  2000              MOVS     r0,#0
;;;1407     } 
000036  bd70              POP      {r4-r6,pc}
;;;1408     
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Stop PROC
;;;1357     */
;;;1358   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1359   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1360   
;;;1361     /* Check the parameters */
;;;1362     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1363   
;;;1364     /* Disable the complementary One Pulse output */
;;;1365       TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1366     
;;;1367     /* Disable the Main Output */
;;;1368       __HAL_TIM_MOE_DISABLE(htim);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  6a00              LDR      r0,[r0,#0x20]
000016  f2411111          MOV      r1,#0x1111
00001a  4008              ANDS     r0,r0,r1
00001c  b950              CBNZ     r0,|L29.52|
00001e  6820              LDR      r0,[r4,#0]
000020  6a00              LDR      r0,[r0,#0x20]
000022  1089              ASRS     r1,r1,#2
000024  4008              ANDS     r0,r0,r1
000026  b928              CBNZ     r0,|L29.52|
000028  6820              LDR      r0,[r4,#0]
00002a  6c40              LDR      r0,[r0,#0x44]
00002c  f4204000          BIC      r0,r0,#0x8000
000030  6821              LDR      r1,[r4,#0]
000032  6448              STR      r0,[r1,#0x44]
                  |L29.52|
000034  bf00              NOP      
;;;1369     
;;;1370     /* Disable the Peripheral */
;;;1371     __HAL_TIM_DISABLE(htim); 
000036  bf00              NOP      
000038  6820              LDR      r0,[r4,#0]
00003a  6a00              LDR      r0,[r0,#0x20]
00003c  f2411111          MOV      r1,#0x1111
000040  4008              ANDS     r0,r0,r1
000042  b950              CBNZ     r0,|L29.90|
000044  6820              LDR      r0,[r4,#0]
000046  6a00              LDR      r0,[r0,#0x20]
000048  1089              ASRS     r1,r1,#2
00004a  4008              ANDS     r0,r0,r1
00004c  b928              CBNZ     r0,|L29.90|
00004e  6820              LDR      r0,[r4,#0]
000050  6800              LDR      r0,[r0,#0]
000052  f0200001          BIC      r0,r0,#1
000056  6821              LDR      r1,[r4,#0]
000058  6008              STR      r0,[r1,#0]
                  |L29.90|
00005a  bf00              NOP      
;;;1372      
;;;1373     /* Return function status */
;;;1374     return HAL_OK;
00005c  2000              MOVS     r0,#0
;;;1375   }
00005e  bd70              POP      {r4-r6,pc}
;;;1376   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Stop_IT PROC
;;;1419     */
;;;1420   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1421   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1422     /* Check the parameters */
;;;1423     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1424   
;;;1425     /* Disable the TIM Capture/Compare 1 interrupt */
;;;1426     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000006  6820              LDR      r0,[r4,#0]
000008  68c0              LDR      r0,[r0,#0xc]
00000a  f0200002          BIC      r0,r0,#2
00000e  6821              LDR      r1,[r4,#0]
000010  60c8              STR      r0,[r1,#0xc]
;;;1427     
;;;1428     /* Disable the TIM Capture/Compare 2 interrupt */
;;;1429     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000012  6820              LDR      r0,[r4,#0]
000014  68c0              LDR      r0,[r0,#0xc]
000016  f0200004          BIC      r0,r0,#4
00001a  6821              LDR      r1,[r4,#0]
00001c  60c8              STR      r0,[r1,#0xc]
;;;1430     
;;;1431     /* Disable the complementary One Pulse output */
;;;1432     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
00001e  2200              MOVS     r2,#0
000020  4629              MOV      r1,r5
000022  6820              LDR      r0,[r4,#0]
000024  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1433     
;;;1434     /* Disable the Main Output */
;;;1435     __HAL_TIM_MOE_DISABLE(htim);
000028  bf00              NOP      
00002a  6820              LDR      r0,[r4,#0]
00002c  6a00              LDR      r0,[r0,#0x20]
00002e  f2411111          MOV      r1,#0x1111
000032  4008              ANDS     r0,r0,r1
000034  b950              CBNZ     r0,|L30.76|
000036  6820              LDR      r0,[r4,#0]
000038  6a00              LDR      r0,[r0,#0x20]
00003a  1089              ASRS     r1,r1,#2
00003c  4008              ANDS     r0,r0,r1
00003e  b928              CBNZ     r0,|L30.76|
000040  6820              LDR      r0,[r4,#0]
000042  6c40              LDR      r0,[r0,#0x44]
000044  f4204000          BIC      r0,r0,#0x8000
000048  6821              LDR      r1,[r4,#0]
00004a  6448              STR      r0,[r1,#0x44]
                  |L30.76|
00004c  bf00              NOP      
;;;1436     
;;;1437     /* Disable the Peripheral */
;;;1438      __HAL_TIM_DISABLE(htim);  
00004e  bf00              NOP      
000050  6820              LDR      r0,[r4,#0]
000052  6a00              LDR      r0,[r0,#0x20]
000054  f2411111          MOV      r1,#0x1111
000058  4008              ANDS     r0,r0,r1
00005a  b950              CBNZ     r0,|L30.114|
00005c  6820              LDR      r0,[r4,#0]
00005e  6a00              LDR      r0,[r0,#0x20]
000060  1089              ASRS     r1,r1,#2
000062  4008              ANDS     r0,r0,r1
000064  b928              CBNZ     r0,|L30.114|
000066  6820              LDR      r0,[r4,#0]
000068  6800              LDR      r0,[r0,#0]
00006a  f0200001          BIC      r0,r0,#1
00006e  6821              LDR      r1,[r4,#0]
000070  6008              STR      r0,[r1,#0]
                  |L30.114|
000072  bf00              NOP      
;;;1439     
;;;1440     /* Return function status */
;;;1441     return HAL_OK;
000074  2000              MOVS     r0,#0
;;;1442   }
000076  bd70              POP      {r4-r6,pc}
;;;1443   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Start PROC
;;;922      */
;;;923    HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;924    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;925      /* Check the parameters */
;;;926      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;927      
;;;928      /* Enable the complementary PWM output  */
;;;929      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
000006  2204              MOVS     r2,#4
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;930      
;;;931      /* Enable the Main Output */
;;;932      __HAL_TIM_MOE_ENABLE(htim);
000010  6820              LDR      r0,[r4,#0]
000012  6c40              LDR      r0,[r0,#0x44]
000014  f4404000          ORR      r0,r0,#0x8000
000018  6821              LDR      r1,[r4,#0]
00001a  6448              STR      r0,[r1,#0x44]
;;;933      
;;;934      /* Enable the Peripheral */
;;;935      __HAL_TIM_ENABLE(htim);
00001c  6820              LDR      r0,[r4,#0]
00001e  6800              LDR      r0,[r0,#0]
000020  f0400001          ORR      r0,r0,#1
000024  6821              LDR      r1,[r4,#0]
000026  6008              STR      r0,[r1,#0]
;;;936      
;;;937      /* Return function status */
;;;938      return HAL_OK;
000028  2000              MOVS     r0,#0
;;;939    } 
00002a  bd70              POP      {r4-r6,pc}
;;;940    
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_PWMN_Start_DMA PROC
;;;1127     */
;;;1128   HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1129   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;1130     /* Check the parameters */
;;;1131     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1132     
;;;1133     if((htim->State == HAL_TIM_STATE_BUSY))
00000c  6be0              LDR      r0,[r4,#0x3c]
00000e  2802              CMP      r0,#2
000010  d101              BNE      |L32.22|
                  |L32.18|
;;;1134     {
;;;1135        return HAL_BUSY;
;;;1136     }
;;;1137     else if((htim->State == HAL_TIM_STATE_READY))
;;;1138     {
;;;1139       if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;1140       {
;;;1141         return HAL_ERROR;                                    
;;;1142       }
;;;1143       else
;;;1144       {
;;;1145         htim->State = HAL_TIM_STATE_BUSY;
;;;1146       }
;;;1147     }    
;;;1148     switch (Channel)
;;;1149     {
;;;1150       case TIM_CHANNEL_1:
;;;1151       {      
;;;1152         /* Set the DMA Period elapsed callback */
;;;1153         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1154        
;;;1155         /* Set the DMA error callback */
;;;1156         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1157         
;;;1158         /* Enable the DMA Stream */
;;;1159         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;1160         
;;;1161         /* Enable the TIM Capture/Compare 1 DMA request */
;;;1162         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;1163       }
;;;1164       break;
;;;1165       
;;;1166       case TIM_CHANNEL_2:
;;;1167       {
;;;1168         /* Set the DMA Period elapsed callback */
;;;1169         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1170        
;;;1171         /* Set the DMA error callback */
;;;1172         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1173         
;;;1174         /* Enable the DMA Stream */
;;;1175         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;1176         
;;;1177         /* Enable the TIM Capture/Compare 2 DMA request */
;;;1178         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;1179       }
;;;1180       break;
;;;1181       
;;;1182       case TIM_CHANNEL_3:
;;;1183       {
;;;1184         /* Set the DMA Period elapsed callback */
;;;1185         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1186        
;;;1187         /* Set the DMA error callback */
;;;1188         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1189         
;;;1190         /* Enable the DMA Stream */
;;;1191         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;1192         
;;;1193         /* Enable the TIM Capture/Compare 3 DMA request */
;;;1194         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;1195       }
;;;1196       break;
;;;1197       
;;;1198       case TIM_CHANNEL_4:
;;;1199       {
;;;1200        /* Set the DMA Period elapsed callback */
;;;1201         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1202        
;;;1203         /* Set the DMA error callback */
;;;1204         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1205         
;;;1206         /* Enable the DMA Stream */
;;;1207         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;1208         
;;;1209         /* Enable the TIM Capture/Compare 4 DMA request */
;;;1210         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;1211       }
;;;1212       break;
;;;1213       
;;;1214       default:
;;;1215       break;
;;;1216     }
;;;1217   
;;;1218     /* Enable the complementary PWM output  */
;;;1219        TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;1220       
;;;1221     /* Enable the Main Output */
;;;1222       __HAL_TIM_MOE_ENABLE(htim);
;;;1223     
;;;1224     /* Enable the Peripheral */
;;;1225     __HAL_TIM_ENABLE(htim); 
;;;1226     
;;;1227     /* Return function status */
;;;1228     return HAL_OK;
;;;1229   }
000012  e8bd81f0          POP      {r4-r8,pc}
                  |L32.22|
000016  6be0              LDR      r0,[r4,#0x3c]         ;1137
000018  2801              CMP      r0,#1                 ;1137
00001a  d105              BNE      |L32.40|
00001c  b915              CBNZ     r5,|L32.36|
00001e  2f00              CMP      r7,#0                 ;1139
000020  dd00              BLE      |L32.36|
000022  e7f6              B        |L32.18|
                  |L32.36|
000024  2002              MOVS     r0,#2                 ;1145
000026  63e0              STR      r0,[r4,#0x3c]         ;1145
                  |L32.40|
000028  b136              CBZ      r6,|L32.56|
00002a  2e04              CMP      r6,#4                 ;1148
00002c  d019              BEQ      |L32.98|
00002e  2e08              CMP      r6,#8                 ;1148
000030  d02c              BEQ      |L32.140|
000032  2e0c              CMP      r6,#0xc               ;1148
000034  d154              BNE      |L32.224|
000036  e03e              B        |L32.182|
                  |L32.56|
000038  4934              LDR      r1,|L32.268|
00003a  6a20              LDR      r0,[r4,#0x20]         ;1153
00003c  6401              STR      r1,[r0,#0x40]         ;1153
00003e  4934              LDR      r1,|L32.272|
000040  6a20              LDR      r0,[r4,#0x20]         ;1156
000042  6501              STR      r1,[r0,#0x50]         ;1156
000044  6821              LDR      r1,[r4,#0]            ;1159
000046  f1010234          ADD      r2,r1,#0x34           ;1159
00004a  463b              MOV      r3,r7                 ;1159
00004c  4629              MOV      r1,r5                 ;1159
00004e  6a20              LDR      r0,[r4,#0x20]         ;1159
000050  f7fffffe          BL       HAL_DMA_Start_IT
000054  6820              LDR      r0,[r4,#0]            ;1162
000056  68c0              LDR      r0,[r0,#0xc]          ;1162
000058  f4407000          ORR      r0,r0,#0x200          ;1162
00005c  6821              LDR      r1,[r4,#0]            ;1162
00005e  60c8              STR      r0,[r1,#0xc]          ;1162
000060  e03f              B        |L32.226|
                  |L32.98|
000062  492a              LDR      r1,|L32.268|
000064  6a60              LDR      r0,[r4,#0x24]         ;1169
000066  6401              STR      r1,[r0,#0x40]         ;1169
000068  4929              LDR      r1,|L32.272|
00006a  6a60              LDR      r0,[r4,#0x24]         ;1172
00006c  6501              STR      r1,[r0,#0x50]         ;1172
00006e  6821              LDR      r1,[r4,#0]            ;1175
000070  f1010238          ADD      r2,r1,#0x38           ;1175
000074  463b              MOV      r3,r7                 ;1175
000076  4629              MOV      r1,r5                 ;1175
000078  6a60              LDR      r0,[r4,#0x24]         ;1175
00007a  f7fffffe          BL       HAL_DMA_Start_IT
00007e  6820              LDR      r0,[r4,#0]            ;1178
000080  68c0              LDR      r0,[r0,#0xc]          ;1178
000082  f4406080          ORR      r0,r0,#0x400          ;1178
000086  6821              LDR      r1,[r4,#0]            ;1178
000088  60c8              STR      r0,[r1,#0xc]          ;1178
00008a  e02a              B        |L32.226|
                  |L32.140|
00008c  491f              LDR      r1,|L32.268|
00008e  6aa0              LDR      r0,[r4,#0x28]         ;1185
000090  6401              STR      r1,[r0,#0x40]         ;1185
000092  491f              LDR      r1,|L32.272|
000094  6aa0              LDR      r0,[r4,#0x28]         ;1188
000096  6501              STR      r1,[r0,#0x50]         ;1188
000098  6821              LDR      r1,[r4,#0]            ;1191
00009a  f101023c          ADD      r2,r1,#0x3c           ;1191
00009e  463b              MOV      r3,r7                 ;1191
0000a0  4629              MOV      r1,r5                 ;1191
0000a2  6aa0              LDR      r0,[r4,#0x28]         ;1191
0000a4  f7fffffe          BL       HAL_DMA_Start_IT
0000a8  6820              LDR      r0,[r4,#0]            ;1194
0000aa  68c0              LDR      r0,[r0,#0xc]          ;1194
0000ac  f4406000          ORR      r0,r0,#0x800          ;1194
0000b0  6821              LDR      r1,[r4,#0]            ;1194
0000b2  60c8              STR      r0,[r1,#0xc]          ;1194
0000b4  e015              B        |L32.226|
                  |L32.182|
0000b6  4915              LDR      r1,|L32.268|
0000b8  6ae0              LDR      r0,[r4,#0x2c]         ;1201
0000ba  6401              STR      r1,[r0,#0x40]         ;1201
0000bc  4914              LDR      r1,|L32.272|
0000be  6ae0              LDR      r0,[r4,#0x2c]         ;1204
0000c0  6501              STR      r1,[r0,#0x50]         ;1204
0000c2  6821              LDR      r1,[r4,#0]            ;1207
0000c4  f1010240          ADD      r2,r1,#0x40           ;1207
0000c8  463b              MOV      r3,r7                 ;1207
0000ca  4629              MOV      r1,r5                 ;1207
0000cc  6ae0              LDR      r0,[r4,#0x2c]         ;1207
0000ce  f7fffffe          BL       HAL_DMA_Start_IT
0000d2  6820              LDR      r0,[r4,#0]            ;1210
0000d4  68c0              LDR      r0,[r0,#0xc]          ;1210
0000d6  f4405080          ORR      r0,r0,#0x1000         ;1210
0000da  6821              LDR      r1,[r4,#0]            ;1210
0000dc  60c8              STR      r0,[r1,#0xc]          ;1210
0000de  e000              B        |L32.226|
                  |L32.224|
0000e0  bf00              NOP                            ;1215
                  |L32.226|
0000e2  bf00              NOP                            ;1164
0000e4  2204              MOVS     r2,#4                 ;1219
0000e6  4631              MOV      r1,r6                 ;1219
0000e8  6820              LDR      r0,[r4,#0]            ;1219
0000ea  f7fffffe          BL       TIM_CCxNChannelCmd
0000ee  6820              LDR      r0,[r4,#0]            ;1222
0000f0  6c40              LDR      r0,[r0,#0x44]         ;1222
0000f2  f4404000          ORR      r0,r0,#0x8000         ;1222
0000f6  6821              LDR      r1,[r4,#0]            ;1222
0000f8  6448              STR      r0,[r1,#0x44]         ;1222
0000fa  6820              LDR      r0,[r4,#0]            ;1225
0000fc  6800              LDR      r0,[r0,#0]            ;1225
0000fe  f0400001          ORR      r0,r0,#1              ;1225
000102  6821              LDR      r1,[r4,#0]            ;1225
000104  6008              STR      r0,[r1,#0]            ;1225
000106  2000              MOVS     r0,#0                 ;1228
000108  e783              B        |L32.18|
;;;1230   
                          ENDP

00010a  0000              DCW      0x0000
                  |L32.268|
                          DCD      TIM_DMADelayPulseCplt
                  |L32.272|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_PWMN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Start_IT PROC
;;;983      */
;;;984    HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;985    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;986      /* Check the parameters */
;;;987      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;988      
;;;989      switch (Channel)
000006  b135              CBZ      r5,|L33.22|
000008  2d04              CMP      r5,#4
00000a  d00b              BEQ      |L33.36|
00000c  2d08              CMP      r5,#8
00000e  d010              BEQ      |L33.50|
000010  2d0c              CMP      r5,#0xc
000012  d11c              BNE      |L33.78|
000014  e014              B        |L33.64|
                  |L33.22|
;;;990      {
;;;991        case TIM_CHANNEL_1:
;;;992        {       
;;;993          /* Enable the TIM Capture/Compare 1 interrupt */
;;;994          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000016  6820              LDR      r0,[r4,#0]
000018  68c0              LDR      r0,[r0,#0xc]
00001a  f0400002          ORR      r0,r0,#2
00001e  6821              LDR      r1,[r4,#0]
000020  60c8              STR      r0,[r1,#0xc]
;;;995        }
;;;996        break;
000022  e015              B        |L33.80|
                  |L33.36|
;;;997        
;;;998        case TIM_CHANNEL_2:
;;;999        {
;;;1000         /* Enable the TIM Capture/Compare 2 interrupt */
;;;1001         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000024  6820              LDR      r0,[r4,#0]
000026  68c0              LDR      r0,[r0,#0xc]
000028  f0400004          ORR      r0,r0,#4
00002c  6821              LDR      r1,[r4,#0]
00002e  60c8              STR      r0,[r1,#0xc]
;;;1002       }
;;;1003       break;
000030  e00e              B        |L33.80|
                  |L33.50|
;;;1004       
;;;1005       case TIM_CHANNEL_3:
;;;1006       {
;;;1007         /* Enable the TIM Capture/Compare 3 interrupt */
;;;1008         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
000032  6820              LDR      r0,[r4,#0]
000034  68c0              LDR      r0,[r0,#0xc]
000036  f0400008          ORR      r0,r0,#8
00003a  6821              LDR      r1,[r4,#0]
00003c  60c8              STR      r0,[r1,#0xc]
;;;1009       }
;;;1010       break;
00003e  e007              B        |L33.80|
                  |L33.64|
;;;1011       
;;;1012       case TIM_CHANNEL_4:
;;;1013       {
;;;1014         /* Enable the TIM Capture/Compare 4 interrupt */
;;;1015         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000040  6820              LDR      r0,[r4,#0]
000042  68c0              LDR      r0,[r0,#0xc]
000044  f0400010          ORR      r0,r0,#0x10
000048  6821              LDR      r1,[r4,#0]
00004a  60c8              STR      r0,[r1,#0xc]
;;;1016       }
;;;1017       break;
00004c  e000              B        |L33.80|
                  |L33.78|
;;;1018       
;;;1019       default:
;;;1020       break;
00004e  bf00              NOP      
                  |L33.80|
000050  bf00              NOP                            ;996
;;;1021     } 
;;;1022     
;;;1023     /* Enable the TIM Break interrupt */
;;;1024     __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
000052  6820              LDR      r0,[r4,#0]
000054  68c0              LDR      r0,[r0,#0xc]
000056  f0400080          ORR      r0,r0,#0x80
00005a  6821              LDR      r1,[r4,#0]
00005c  60c8              STR      r0,[r1,#0xc]
;;;1025     
;;;1026     /* Enable the complementary PWM output  */
;;;1027     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
00005e  2204              MOVS     r2,#4
000060  4629              MOV      r1,r5
000062  6820              LDR      r0,[r4,#0]
000064  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1028     
;;;1029     /* Enable the Main Output */
;;;1030     __HAL_TIM_MOE_ENABLE(htim);
000068  6820              LDR      r0,[r4,#0]
00006a  6c40              LDR      r0,[r0,#0x44]
00006c  f4404000          ORR      r0,r0,#0x8000
000070  6821              LDR      r1,[r4,#0]
000072  6448              STR      r0,[r1,#0x44]
;;;1031     
;;;1032     /* Enable the Peripheral */
;;;1033     __HAL_TIM_ENABLE(htim);
000074  6820              LDR      r0,[r4,#0]
000076  6800              LDR      r0,[r0,#0]
000078  f0400001          ORR      r0,r0,#1
00007c  6821              LDR      r1,[r4,#0]
00007e  6008              STR      r0,[r1,#0]
;;;1034     
;;;1035     /* Return function status */
;;;1036     return HAL_OK;
000080  2000              MOVS     r0,#0
;;;1037   } 
000082  bd70              POP      {r4-r6,pc}
;;;1038   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop PROC
;;;952      */
;;;953    HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;954    { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;955      /* Check the parameters */
;;;956      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;957      
;;;958      /* Disable the complementary PWM output  */
;;;959      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);  
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;960      
;;;961      /* Disable the Main Output */
;;;962      __HAL_TIM_MOE_DISABLE(htim);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  6a00              LDR      r0,[r0,#0x20]
000016  f2411111          MOV      r1,#0x1111
00001a  4008              ANDS     r0,r0,r1
00001c  b950              CBNZ     r0,|L34.52|
00001e  6820              LDR      r0,[r4,#0]
000020  6a00              LDR      r0,[r0,#0x20]
000022  1089              ASRS     r1,r1,#2
000024  4008              ANDS     r0,r0,r1
000026  b928              CBNZ     r0,|L34.52|
000028  6820              LDR      r0,[r4,#0]
00002a  6c40              LDR      r0,[r0,#0x44]
00002c  f4204000          BIC      r0,r0,#0x8000
000030  6821              LDR      r1,[r4,#0]
000032  6448              STR      r0,[r1,#0x44]
                  |L34.52|
000034  bf00              NOP      
;;;963      
;;;964      /* Disable the Peripheral */
;;;965      __HAL_TIM_DISABLE(htim);
000036  bf00              NOP      
000038  6820              LDR      r0,[r4,#0]
00003a  6a00              LDR      r0,[r0,#0x20]
00003c  f2411111          MOV      r1,#0x1111
000040  4008              ANDS     r0,r0,r1
000042  b950              CBNZ     r0,|L34.90|
000044  6820              LDR      r0,[r4,#0]
000046  6a00              LDR      r0,[r0,#0x20]
000048  1089              ASRS     r1,r1,#2
00004a  4008              ANDS     r0,r0,r1
00004c  b928              CBNZ     r0,|L34.90|
00004e  6820              LDR      r0,[r4,#0]
000050  6800              LDR      r0,[r0,#0]
000052  f0200001          BIC      r0,r0,#1
000056  6821              LDR      r1,[r4,#0]
000058  6008              STR      r0,[r1,#0]
                  |L34.90|
00005a  bf00              NOP      
;;;966      
;;;967      /* Return function status */
;;;968      return HAL_OK;
00005c  2000              MOVS     r0,#0
;;;969    } 
00005e  bd70              POP      {r4-r6,pc}
;;;970    
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop_DMA PROC
;;;1243     */
;;;1244   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1245   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1246     /* Check the parameters */
;;;1247     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1248     
;;;1249     switch (Channel)
000006  b135              CBZ      r5,|L35.22|
000008  2d04              CMP      r5,#4
00000a  d00b              BEQ      |L35.36|
00000c  2d08              CMP      r5,#8
00000e  d010              BEQ      |L35.50|
000010  2d0c              CMP      r5,#0xc
000012  d11c              BNE      |L35.78|
000014  e014              B        |L35.64|
                  |L35.22|
;;;1250     {
;;;1251       case TIM_CHANNEL_1:
;;;1252       {       
;;;1253         /* Disable the TIM Capture/Compare 1 DMA request */
;;;1254         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000016  6820              LDR      r0,[r4,#0]
000018  68c0              LDR      r0,[r0,#0xc]
00001a  f4207000          BIC      r0,r0,#0x200
00001e  6821              LDR      r1,[r4,#0]
000020  60c8              STR      r0,[r1,#0xc]
;;;1255       }
;;;1256       break;
000022  e015              B        |L35.80|
                  |L35.36|
;;;1257       
;;;1258       case TIM_CHANNEL_2:
;;;1259       {
;;;1260         /* Disable the TIM Capture/Compare 2 DMA request */
;;;1261         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000024  6820              LDR      r0,[r4,#0]
000026  68c0              LDR      r0,[r0,#0xc]
000028  f4206080          BIC      r0,r0,#0x400
00002c  6821              LDR      r1,[r4,#0]
00002e  60c8              STR      r0,[r1,#0xc]
;;;1262       }
;;;1263       break;
000030  e00e              B        |L35.80|
                  |L35.50|
;;;1264       
;;;1265       case TIM_CHANNEL_3:
;;;1266       {
;;;1267         /* Disable the TIM Capture/Compare 3 DMA request */
;;;1268         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
000032  6820              LDR      r0,[r4,#0]
000034  68c0              LDR      r0,[r0,#0xc]
000036  f4206000          BIC      r0,r0,#0x800
00003a  6821              LDR      r1,[r4,#0]
00003c  60c8              STR      r0,[r1,#0xc]
;;;1269       }
;;;1270       break;
00003e  e007              B        |L35.80|
                  |L35.64|
;;;1271       
;;;1272       case TIM_CHANNEL_4:
;;;1273       {
;;;1274         /* Disable the TIM Capture/Compare 4 DMA request */
;;;1275         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
000040  6820              LDR      r0,[r4,#0]
000042  68c0              LDR      r0,[r0,#0xc]
000044  f4205080          BIC      r0,r0,#0x1000
000048  6821              LDR      r1,[r4,#0]
00004a  60c8              STR      r0,[r1,#0xc]
;;;1276       }
;;;1277       break;
00004c  e000              B        |L35.80|
                  |L35.78|
;;;1278       
;;;1279       default:
;;;1280       break;
00004e  bf00              NOP      
                  |L35.80|
000050  bf00              NOP                            ;1256
;;;1281     } 
;;;1282     
;;;1283     /* Disable the complementary PWM output */
;;;1284       TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000052  2200              MOVS     r2,#0
000054  4629              MOV      r1,r5
000056  6820              LDR      r0,[r4,#0]
000058  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1285        
;;;1286     /* Disable the Main Output */
;;;1287       __HAL_TIM_MOE_DISABLE(htim);
00005c  bf00              NOP      
00005e  6820              LDR      r0,[r4,#0]
000060  6a00              LDR      r0,[r0,#0x20]
000062  f2411111          MOV      r1,#0x1111
000066  4008              ANDS     r0,r0,r1
000068  b950              CBNZ     r0,|L35.128|
00006a  6820              LDR      r0,[r4,#0]
00006c  6a00              LDR      r0,[r0,#0x20]
00006e  1089              ASRS     r1,r1,#2
000070  4008              ANDS     r0,r0,r1
000072  b928              CBNZ     r0,|L35.128|
000074  6820              LDR      r0,[r4,#0]
000076  6c40              LDR      r0,[r0,#0x44]
000078  f4204000          BIC      r0,r0,#0x8000
00007c  6821              LDR      r1,[r4,#0]
00007e  6448              STR      r0,[r1,#0x44]
                  |L35.128|
000080  bf00              NOP      
;;;1288   
;;;1289     /* Disable the Peripheral */
;;;1290     __HAL_TIM_DISABLE(htim);
000082  bf00              NOP      
000084  6820              LDR      r0,[r4,#0]
000086  6a00              LDR      r0,[r0,#0x20]
000088  f2411111          MOV      r1,#0x1111
00008c  4008              ANDS     r0,r0,r1
00008e  b950              CBNZ     r0,|L35.166|
000090  6820              LDR      r0,[r4,#0]
000092  6a00              LDR      r0,[r0,#0x20]
000094  1089              ASRS     r1,r1,#2
000096  4008              ANDS     r0,r0,r1
000098  b928              CBNZ     r0,|L35.166|
00009a  6820              LDR      r0,[r4,#0]
00009c  6800              LDR      r0,[r0,#0]
00009e  f0200001          BIC      r0,r0,#1
0000a2  6821              LDR      r1,[r4,#0]
0000a4  6008              STR      r0,[r1,#0]
                  |L35.166|
0000a6  bf00              NOP      
;;;1291     
;;;1292     /* Change the htim state */
;;;1293     htim->State = HAL_TIM_STATE_READY;
0000a8  2001              MOVS     r0,#1
0000aa  63e0              STR      r0,[r4,#0x3c]
;;;1294     
;;;1295     /* Return function status */
;;;1296     return HAL_OK;
0000ac  2000              MOVS     r0,#0
;;;1297   }
0000ae  bd70              POP      {r4-r6,pc}
;;;1298   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop_IT PROC
;;;1051     */
;;;1052   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1053   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1054     uint32_t tmpccer = 0;
000006  2600              MOVS     r6,#0
;;;1055     
;;;1056     /* Check the parameters */
;;;1057     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1058   
;;;1059     switch (Channel)
000008  b135              CBZ      r5,|L36.24|
00000a  2d04              CMP      r5,#4
00000c  d00b              BEQ      |L36.38|
00000e  2d08              CMP      r5,#8
000010  d010              BEQ      |L36.52|
000012  2d0c              CMP      r5,#0xc
000014  d11c              BNE      |L36.80|
000016  e014              B        |L36.66|
                  |L36.24|
;;;1060     {
;;;1061       case TIM_CHANNEL_1:
;;;1062       {       
;;;1063         /* Disable the TIM Capture/Compare 1 interrupt */
;;;1064         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000018  6820              LDR      r0,[r4,#0]
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  f0200002          BIC      r0,r0,#2
000020  6821              LDR      r1,[r4,#0]
000022  60c8              STR      r0,[r1,#0xc]
;;;1065       }
;;;1066       break;
000024  e015              B        |L36.82|
                  |L36.38|
;;;1067       
;;;1068       case TIM_CHANNEL_2:
;;;1069       {
;;;1070         /* Disable the TIM Capture/Compare 2 interrupt */
;;;1071         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000026  6820              LDR      r0,[r4,#0]
000028  68c0              LDR      r0,[r0,#0xc]
00002a  f0200004          BIC      r0,r0,#4
00002e  6821              LDR      r1,[r4,#0]
000030  60c8              STR      r0,[r1,#0xc]
;;;1072       }
;;;1073       break;
000032  e00e              B        |L36.82|
                  |L36.52|
;;;1074       
;;;1075       case TIM_CHANNEL_3:
;;;1076       {
;;;1077         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1078         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000034  6820              LDR      r0,[r4,#0]
000036  68c0              LDR      r0,[r0,#0xc]
000038  f0200008          BIC      r0,r0,#8
00003c  6821              LDR      r1,[r4,#0]
00003e  60c8              STR      r0,[r1,#0xc]
;;;1079       }
;;;1080       break;
000040  e007              B        |L36.82|
                  |L36.66|
;;;1081       
;;;1082       case TIM_CHANNEL_4:
;;;1083       {
;;;1084         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1085         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
000042  6820              LDR      r0,[r4,#0]
000044  68c0              LDR      r0,[r0,#0xc]
000046  f0200010          BIC      r0,r0,#0x10
00004a  6821              LDR      r1,[r4,#0]
00004c  60c8              STR      r0,[r1,#0xc]
;;;1086       }
;;;1087       break;
00004e  e000              B        |L36.82|
                  |L36.80|
;;;1088       
;;;1089       default:
;;;1090       break; 
000050  bf00              NOP      
                  |L36.82|
000052  bf00              NOP                            ;1066
;;;1091     }
;;;1092     
;;;1093     /* Disable the complementary PWM output  */
;;;1094     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000054  2200              MOVS     r2,#0
000056  4629              MOV      r1,r5
000058  6820              LDR      r0,[r4,#0]
00005a  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1095     
;;;1096     /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;1097     tmpccer = htim->Instance->CCER;
00005e  6820              LDR      r0,[r4,#0]
000060  6a06              LDR      r6,[r0,#0x20]
;;;1098     if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
000062  f2404044          MOV      r0,#0x444
000066  4030              ANDS     r0,r0,r6
000068  b928              CBNZ     r0,|L36.118|
;;;1099     {
;;;1100       __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
00006a  6820              LDR      r0,[r4,#0]
00006c  68c0              LDR      r0,[r0,#0xc]
00006e  f0200080          BIC      r0,r0,#0x80
000072  6821              LDR      r1,[r4,#0]
000074  60c8              STR      r0,[r1,#0xc]
                  |L36.118|
;;;1101     }
;;;1102     
;;;1103     /* Disable the Main Output */
;;;1104     __HAL_TIM_MOE_DISABLE(htim);
000076  bf00              NOP      
000078  6820              LDR      r0,[r4,#0]
00007a  6a00              LDR      r0,[r0,#0x20]
00007c  f2411111          MOV      r1,#0x1111
000080  4008              ANDS     r0,r0,r1
000082  b950              CBNZ     r0,|L36.154|
000084  6820              LDR      r0,[r4,#0]
000086  6a00              LDR      r0,[r0,#0x20]
000088  1089              ASRS     r1,r1,#2
00008a  4008              ANDS     r0,r0,r1
00008c  b928              CBNZ     r0,|L36.154|
00008e  6820              LDR      r0,[r4,#0]
000090  6c40              LDR      r0,[r0,#0x44]
000092  f4204000          BIC      r0,r0,#0x8000
000096  6821              LDR      r1,[r4,#0]
000098  6448              STR      r0,[r1,#0x44]
                  |L36.154|
00009a  bf00              NOP      
;;;1105     
;;;1106     /* Disable the Peripheral */
;;;1107     __HAL_TIM_DISABLE(htim);
00009c  bf00              NOP      
00009e  6820              LDR      r0,[r4,#0]
0000a0  6a00              LDR      r0,[r0,#0x20]
0000a2  f2411111          MOV      r1,#0x1111
0000a6  4008              ANDS     r0,r0,r1
0000a8  b950              CBNZ     r0,|L36.192|
0000aa  6820              LDR      r0,[r4,#0]
0000ac  6a00              LDR      r0,[r0,#0x20]
0000ae  1089              ASRS     r1,r1,#2
0000b0  4008              ANDS     r0,r0,r1
0000b2  b928              CBNZ     r0,|L36.192|
0000b4  6820              LDR      r0,[r4,#0]
0000b6  6800              LDR      r0,[r0,#0]
0000b8  f0200001          BIC      r0,r0,#1
0000bc  6821              LDR      r1,[r4,#0]
0000be  6008              STR      r0,[r1,#0]
                  |L36.192|
0000c0  bf00              NOP      
;;;1108     
;;;1109     /* Return function status */
;;;1110     return HAL_OK;
0000c2  2000              MOVS     r0,#0
;;;1111   } 
0000c4  bd70              POP      {r4-r6,pc}
;;;1112   
                          ENDP


                          AREA ||i.HAL_TIMEx_RemapConfig||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_RemapConfig PROC
;;;2273     */
;;;2274   HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
000000  4602              MOV      r2,r0
;;;2275   {
;;;2276     __HAL_LOCK(htim);
000002  bf00              NOP      
000004  6b90              LDR      r0,[r2,#0x38]
000006  2801              CMP      r0,#1
000008  d101              BNE      |L37.14|
00000a  2002              MOVS     r0,#2
                  |L37.12|
;;;2277       
;;;2278     /* Check parameters */
;;;2279     assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
;;;2280     assert_param(IS_TIM_REMAP(Remap));
;;;2281     
;;;2282     /* Set the Timer remapping configuration */
;;;2283     htim->Instance->OR = Remap;
;;;2284     
;;;2285     htim->State = HAL_TIM_STATE_READY;
;;;2286     
;;;2287     __HAL_UNLOCK(htim);  
;;;2288     
;;;2289     return HAL_OK;
;;;2290   }
00000c  4770              BX       lr
                  |L37.14|
00000e  2001              MOVS     r0,#1                 ;2276
000010  6390              STR      r0,[r2,#0x38]         ;2276
000012  bf00              NOP                            ;2276
000014  6810              LDR      r0,[r2,#0]            ;2283
000016  6501              STR      r1,[r0,#0x50]         ;2283
000018  2001              MOVS     r0,#1                 ;2285
00001a  63d0              STR      r0,[r2,#0x3c]         ;2285
00001c  bf00              NOP                            ;2287
00001e  2000              MOVS     r0,#0                 ;2287
000020  6390              STR      r0,[r2,#0x38]         ;2287
000022  bf00              NOP                            ;2287
000024  bf00              NOP                            ;2289
000026  e7f1              B        |L37.12|
;;;2291   
                          ENDP


                          AREA ||i.HAL_TIM_ConfigOCrefClear||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ConfigOCrefClear PROC
;;;1889     */ 
;;;1890   HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1891                                              TIM_ClearInputConfigTypeDef *sClearInputConfig,
;;;1892                                              uint32_t Channel)
;;;1893   { 
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
;;;1894     uint32_t tmpsmcr = 0;
00000a  2600              MOVS     r6,#0
;;;1895   
;;;1896     /* Check the parameters */ 
;;;1897     assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
;;;1898     assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));
;;;1899                                           
;;;1900     /* Check input state */
;;;1901     __HAL_LOCK(htim);
00000c  bf00              NOP      
00000e  6ba0              LDR      r0,[r4,#0x38]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L38.26|
000014  2002              MOVS     r0,#2
                  |L38.22|
;;;1902     
;;;1903     switch (sClearInputConfig->ClearInputSource)
;;;1904     {
;;;1905       case TIM_CLEARINPUTSOURCE_NONE:
;;;1906       {
;;;1907         /* Get the TIMx SMCR register value */
;;;1908         tmpsmcr = htim->Instance->SMCR;
;;;1909         
;;;1910         /* Clear the OCREF clear selection bit */
;;;1911         tmpsmcr &= ~TIM_SMCR_OCCS;
;;;1912         
;;;1913         /* Clear the ETR Bits */
;;;1914         tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
;;;1915         
;;;1916         /* Set TIMx_SMCR */
;;;1917         htim->Instance->SMCR = tmpsmcr;
;;;1918      }
;;;1919       break;
;;;1920       
;;;1921       case TIM_CLEARINPUTSOURCE_OCREFCLR:
;;;1922       {
;;;1923         /* Clear the OCREF clear selection bit */
;;;1924         htim->Instance->SMCR &= ~TIM_SMCR_OCCS;
;;;1925       }
;;;1926       break;
;;;1927       
;;;1928       case TIM_CLEARINPUTSOURCE_ETR:
;;;1929       {
;;;1930         /* Check the parameters */ 
;;;1931         assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
;;;1932         assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
;;;1933         assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));
;;;1934         
;;;1935         TIM_ETR_SetConfig(htim->Instance,
;;;1936                           sClearInputConfig->ClearInputPrescaler,
;;;1937                           sClearInputConfig->ClearInputPolarity,
;;;1938                           sClearInputConfig->ClearInputFilter);
;;;1939         
;;;1940         /* Set the OCREF clear selection bit */
;;;1941         htim->Instance->SMCR |= TIM_SMCR_OCCS;
;;;1942       }
;;;1943       break;
;;;1944       default:  
;;;1945       break;
;;;1946     }
;;;1947     
;;;1948     switch (Channel)
;;;1949     { 
;;;1950       case TIM_CHANNEL_1:
;;;1951         {
;;;1952           if(sClearInputConfig->ClearInputState != RESET)
;;;1953           {
;;;1954             /* Enable the Ocref clear feature for Channel 1 */
;;;1955             htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
;;;1956           }
;;;1957           else
;;;1958           {
;;;1959             /* Disable the Ocref clear feature for Channel 1 */
;;;1960             htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;      
;;;1961           }
;;;1962         }    
;;;1963         break;
;;;1964       case TIM_CHANNEL_2:    
;;;1965         {
;;;1966           if(sClearInputConfig->ClearInputState != RESET)
;;;1967           {
;;;1968             /* Enable the Ocref clear feature for Channel 2 */
;;;1969             htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
;;;1970           }
;;;1971           else
;;;1972           {
;;;1973             /* Disable the Ocref clear feature for Channel 2 */
;;;1974             htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;      
;;;1975           }
;;;1976         }    
;;;1977       break;
;;;1978       case TIM_CHANNEL_3:    
;;;1979         {
;;;1980           if(sClearInputConfig->ClearInputState != RESET)
;;;1981           {
;;;1982             /* Enable the Ocref clear feature for Channel 3 */
;;;1983             htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
;;;1984           }
;;;1985           else
;;;1986           {
;;;1987             /* Disable the Ocref clear feature for Channel 3 */
;;;1988             htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;      
;;;1989           }
;;;1990         }    
;;;1991       break;
;;;1992       case TIM_CHANNEL_4:    
;;;1993         {
;;;1994           if(sClearInputConfig->ClearInputState != RESET)
;;;1995           {
;;;1996             /* Enable the Ocref clear feature for Channel 4 */
;;;1997             htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
;;;1998           }
;;;1999           else
;;;2000           {
;;;2001             /* Disable the Ocref clear feature for Channel 4 */
;;;2002             htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;      
;;;2003           }
;;;2004         }    
;;;2005       break;
;;;2006       case TIM_CHANNEL_5:    
;;;2007         {
;;;2008           if(sClearInputConfig->ClearInputState != RESET)
;;;2009           {
;;;2010             /* Enable the Ocref clear feature for Channel 1 */
;;;2011             htim->Instance->CCMR3 |= TIM_CCMR3_OC5CE;
;;;2012           }
;;;2013           else
;;;2014           {
;;;2015             /* Disable the Ocref clear feature for Channel 1 */
;;;2016             htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5CE;      
;;;2017           }
;;;2018         }    
;;;2019       break;
;;;2020       case TIM_CHANNEL_6:    
;;;2021         {
;;;2022           if(sClearInputConfig->ClearInputState != RESET)
;;;2023           {
;;;2024             /* Enable the Ocref clear feature for Channel 1 */
;;;2025             htim->Instance->CCMR3 |= TIM_CCMR3_OC6CE;
;;;2026           }
;;;2027           else
;;;2028           {
;;;2029             /* Disable the Ocref clear feature for Channel 1 */
;;;2030             htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6CE;      
;;;2031           }
;;;2032         }    
;;;2033       break;
;;;2034       default:  
;;;2035       break;
;;;2036     } 
;;;2037     
;;;2038     __HAL_UNLOCK(htim);
;;;2039   
;;;2040     return HAL_OK;  
;;;2041   }  
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L38.26|
00001a  2001              MOVS     r0,#1                 ;1901
00001c  63a0              STR      r0,[r4,#0x38]         ;1901
00001e  bf00              NOP                            ;1901
000020  6868              LDR      r0,[r5,#4]            ;1903
000022  b120              CBZ      r0,|L38.46|
000024  2801              CMP      r0,#1                 ;1903
000026  d012              BEQ      |L38.78|
000028  2802              CMP      r0,#2                 ;1903
00002a  d11d              BNE      |L38.104|
00002c  e008              B        |L38.64|
                  |L38.46|
00002e  6820              LDR      r0,[r4,#0]            ;1908
000030  6886              LDR      r6,[r0,#8]            ;1908
000032  f0260608          BIC      r6,r6,#8              ;1911
000036  f426467f          BIC      r6,r6,#0xff00         ;1914
00003a  6820              LDR      r0,[r4,#0]            ;1917
00003c  6086              STR      r6,[r0,#8]            ;1917
00003e  e014              B        |L38.106|
                  |L38.64|
000040  6820              LDR      r0,[r4,#0]            ;1924
000042  6880              LDR      r0,[r0,#8]            ;1924
000044  f0200008          BIC      r0,r0,#8              ;1924
000048  6821              LDR      r1,[r4,#0]            ;1924
00004a  6088              STR      r0,[r1,#8]            ;1924
00004c  e00d              B        |L38.106|
                  |L38.78|
00004e  e9d51303          LDRD     r1,r3,[r5,#0xc]       ;1935
000052  68aa              LDR      r2,[r5,#8]            ;1935
000054  6820              LDR      r0,[r4,#0]            ;1935
000056  f7fffffe          BL       TIM_ETR_SetConfig
00005a  6820              LDR      r0,[r4,#0]            ;1941
00005c  6880              LDR      r0,[r0,#8]            ;1941
00005e  f0400008          ORR      r0,r0,#8              ;1941
000062  6821              LDR      r1,[r4,#0]            ;1941
000064  6088              STR      r0,[r1,#8]            ;1941
000066  e000              B        |L38.106|
                  |L38.104|
000068  bf00              NOP                            ;1945
                  |L38.106|
00006a  bf00              NOP                            ;1919
00006c  2f0c              CMP      r7,#0xc               ;1948
00006e  d03b              BEQ      |L38.232|
000070  dc05              BGT      |L38.126|
000072  b14f              CBZ      r7,|L38.136|
000074  2f04              CMP      r7,#4                 ;1948
000076  d017              BEQ      |L38.168|
000078  2f08              CMP      r7,#8                 ;1948
00007a  d165              BNE      |L38.328|
00007c  e024              B        |L38.200|
                  |L38.126|
00007e  2f10              CMP      r7,#0x10              ;1948
000080  d042              BEQ      |L38.264|
000082  2f14              CMP      r7,#0x14              ;1948
000084  d160              BNE      |L38.328|
000086  e04f              B        |L38.296|
                  |L38.136|
000088  6828              LDR      r0,[r5,#0]            ;1952
00008a  b130              CBZ      r0,|L38.154|
00008c  6820              LDR      r0,[r4,#0]            ;1955
00008e  6980              LDR      r0,[r0,#0x18]         ;1955
000090  f0400080          ORR      r0,r0,#0x80           ;1955
000094  6821              LDR      r1,[r4,#0]            ;1955
000096  6188              STR      r0,[r1,#0x18]         ;1955
000098  e005              B        |L38.166|
                  |L38.154|
00009a  6820              LDR      r0,[r4,#0]            ;1960
00009c  6980              LDR      r0,[r0,#0x18]         ;1960
00009e  f0200080          BIC      r0,r0,#0x80           ;1960
0000a2  6821              LDR      r1,[r4,#0]            ;1960
0000a4  6188              STR      r0,[r1,#0x18]         ;1960
                  |L38.166|
0000a6  e050              B        |L38.330|
                  |L38.168|
0000a8  6828              LDR      r0,[r5,#0]            ;1966
0000aa  b130              CBZ      r0,|L38.186|
0000ac  6820              LDR      r0,[r4,#0]            ;1969
0000ae  6980              LDR      r0,[r0,#0x18]         ;1969
0000b0  f4404000          ORR      r0,r0,#0x8000         ;1969
0000b4  6821              LDR      r1,[r4,#0]            ;1969
0000b6  6188              STR      r0,[r1,#0x18]         ;1969
0000b8  e005              B        |L38.198|
                  |L38.186|
0000ba  6820              LDR      r0,[r4,#0]            ;1974
0000bc  6980              LDR      r0,[r0,#0x18]         ;1974
0000be  f4204000          BIC      r0,r0,#0x8000         ;1974
0000c2  6821              LDR      r1,[r4,#0]            ;1974
0000c4  6188              STR      r0,[r1,#0x18]         ;1974
                  |L38.198|
0000c6  e040              B        |L38.330|
                  |L38.200|
0000c8  6828              LDR      r0,[r5,#0]            ;1980
0000ca  b130              CBZ      r0,|L38.218|
0000cc  6820              LDR      r0,[r4,#0]            ;1983
0000ce  69c0              LDR      r0,[r0,#0x1c]         ;1983
0000d0  f0400080          ORR      r0,r0,#0x80           ;1983
0000d4  6821              LDR      r1,[r4,#0]            ;1983
0000d6  61c8              STR      r0,[r1,#0x1c]         ;1983
0000d8  e005              B        |L38.230|
                  |L38.218|
0000da  6820              LDR      r0,[r4,#0]            ;1988
0000dc  69c0              LDR      r0,[r0,#0x1c]         ;1988
0000de  f0200080          BIC      r0,r0,#0x80           ;1988
0000e2  6821              LDR      r1,[r4,#0]            ;1988
0000e4  61c8              STR      r0,[r1,#0x1c]         ;1988
                  |L38.230|
0000e6  e030              B        |L38.330|
                  |L38.232|
0000e8  6828              LDR      r0,[r5,#0]            ;1994
0000ea  b130              CBZ      r0,|L38.250|
0000ec  6820              LDR      r0,[r4,#0]            ;1997
0000ee  69c0              LDR      r0,[r0,#0x1c]         ;1997
0000f0  f4404000          ORR      r0,r0,#0x8000         ;1997
0000f4  6821              LDR      r1,[r4,#0]            ;1997
0000f6  61c8              STR      r0,[r1,#0x1c]         ;1997
0000f8  e005              B        |L38.262|
                  |L38.250|
0000fa  6820              LDR      r0,[r4,#0]            ;2002
0000fc  69c0              LDR      r0,[r0,#0x1c]         ;2002
0000fe  f4204000          BIC      r0,r0,#0x8000         ;2002
000102  6821              LDR      r1,[r4,#0]            ;2002
000104  61c8              STR      r0,[r1,#0x1c]         ;2002
                  |L38.262|
000106  e020              B        |L38.330|
                  |L38.264|
000108  6828              LDR      r0,[r5,#0]            ;2008
00010a  b130              CBZ      r0,|L38.282|
00010c  6820              LDR      r0,[r4,#0]            ;2011
00010e  6d40              LDR      r0,[r0,#0x54]         ;2011
000110  f0400080          ORR      r0,r0,#0x80           ;2011
000114  6821              LDR      r1,[r4,#0]            ;2011
000116  6548              STR      r0,[r1,#0x54]         ;2011
000118  e005              B        |L38.294|
                  |L38.282|
00011a  6820              LDR      r0,[r4,#0]            ;2016
00011c  6d40              LDR      r0,[r0,#0x54]         ;2016
00011e  f0200080          BIC      r0,r0,#0x80           ;2016
000122  6821              LDR      r1,[r4,#0]            ;2016
000124  6548              STR      r0,[r1,#0x54]         ;2016
                  |L38.294|
000126  e010              B        |L38.330|
                  |L38.296|
000128  6828              LDR      r0,[r5,#0]            ;2022
00012a  b130              CBZ      r0,|L38.314|
00012c  6820              LDR      r0,[r4,#0]            ;2025
00012e  6d40              LDR      r0,[r0,#0x54]         ;2025
000130  f4404000          ORR      r0,r0,#0x8000         ;2025
000134  6821              LDR      r1,[r4,#0]            ;2025
000136  6548              STR      r0,[r1,#0x54]         ;2025
000138  e005              B        |L38.326|
                  |L38.314|
00013a  6820              LDR      r0,[r4,#0]            ;2030
00013c  6d40              LDR      r0,[r0,#0x54]         ;2030
00013e  f4204000          BIC      r0,r0,#0x8000         ;2030
000142  6821              LDR      r1,[r4,#0]            ;2030
000144  6548              STR      r0,[r1,#0x54]         ;2030
                  |L38.326|
000146  e000              B        |L38.330|
                  |L38.328|
000148  bf00              NOP                            ;2035
                  |L38.330|
00014a  bf00              NOP                            ;1963
00014c  bf00              NOP                            ;2038
00014e  2000              MOVS     r0,#0                 ;2038
000150  63a0              STR      r0,[r4,#0x38]         ;2038
000152  bf00              NOP                            ;2038
000154  bf00              NOP                            ;2040
000156  e75e              B        |L38.22|
;;;2042   
                          ENDP


                          AREA ||i.HAL_TIM_OC_ConfigChannel||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_ConfigChannel PROC
;;;1644     */
;;;1645   HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1646   {  
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;1647     /* Check the parameters */
;;;1648     assert_param(IS_TIM_CHANNELS(Channel)); 
;;;1649     assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
;;;1650     assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
;;;1651     
;;;1652     /* Check input state */
;;;1653     __HAL_LOCK(htim); 
000008  bf00              NOP      
00000a  6ba0              LDR      r0,[r4,#0x38]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L39.20|
000010  2002              MOVS     r0,#2
                  |L39.18|
;;;1654     
;;;1655     htim->State = HAL_TIM_STATE_BUSY;
;;;1656     
;;;1657     switch (Channel)
;;;1658     {
;;;1659       case TIM_CHANNEL_1:
;;;1660       {
;;;1661         /* Check the parameters */
;;;1662         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
;;;1663         
;;;1664        /* Configure the TIM Channel 1 in Output Compare */
;;;1665         TIM_OC1_SetConfig(htim->Instance, sConfig);
;;;1666       }
;;;1667       break;
;;;1668       
;;;1669       case TIM_CHANNEL_2:
;;;1670       {
;;;1671         /* Check the parameters */
;;;1672         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
;;;1673         
;;;1674         /* Configure the TIM Channel 2 in Output Compare */
;;;1675         TIM_OC2_SetConfig(htim->Instance, sConfig);
;;;1676       }
;;;1677       break;
;;;1678       
;;;1679       case TIM_CHANNEL_3:
;;;1680       {
;;;1681         /* Check the parameters */
;;;1682         assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
;;;1683         
;;;1684         /* Configure the TIM Channel 3 in Output Compare */
;;;1685         TIM_OC3_SetConfig(htim->Instance, sConfig);
;;;1686       }
;;;1687       break;
;;;1688       
;;;1689       case TIM_CHANNEL_4:
;;;1690       {
;;;1691         /* Check the parameters */
;;;1692         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
;;;1693         
;;;1694          /* Configure the TIM Channel 4 in Output Compare */
;;;1695          TIM_OC4_SetConfig(htim->Instance, sConfig);
;;;1696       }
;;;1697       break;
;;;1698       
;;;1699       case TIM_CHANNEL_5:
;;;1700       {
;;;1701         /* Check the parameters */
;;;1702         assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
;;;1703         
;;;1704          /* Configure the TIM Channel 5 in Output Compare */
;;;1705          TIM_OC5_SetConfig(htim->Instance, sConfig);
;;;1706       }
;;;1707       break;
;;;1708       
;;;1709       case TIM_CHANNEL_6:
;;;1710       {
;;;1711         /* Check the parameters */
;;;1712         assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
;;;1713         
;;;1714          /* Configure the TIM Channel 6 in Output Compare */
;;;1715          TIM_OC6_SetConfig(htim->Instance, sConfig);
;;;1716       }
;;;1717       break;
;;;1718           
;;;1719       default:
;;;1720       break;    
;;;1721     }
;;;1722     
;;;1723     htim->State = HAL_TIM_STATE_READY;
;;;1724     
;;;1725     __HAL_UNLOCK(htim); 
;;;1726     
;;;1727     return HAL_OK;
;;;1728   }
000012  bd70              POP      {r4-r6,pc}
                  |L39.20|
000014  2001              MOVS     r0,#1                 ;1653
000016  63a0              STR      r0,[r4,#0x38]         ;1653
000018  bf00              NOP                            ;1653
00001a  2002              MOVS     r0,#2                 ;1655
00001c  63e0              STR      r0,[r4,#0x3c]         ;1655
00001e  2d0c              CMP      r5,#0xc               ;1657
000020  d01a              BEQ      |L39.88|
000022  dc05              BGT      |L39.48|
000024  b14d              CBZ      r5,|L39.58|
000026  2d04              CMP      r5,#4                 ;1657
000028  d00c              BEQ      |L39.68|
00002a  2d08              CMP      r5,#8                 ;1657
00002c  d123              BNE      |L39.118|
00002e  e00e              B        |L39.78|
                  |L39.48|
000030  2d10              CMP      r5,#0x10              ;1657
000032  d016              BEQ      |L39.98|
000034  2d14              CMP      r5,#0x14              ;1657
000036  d11e              BNE      |L39.118|
000038  e018              B        |L39.108|
                  |L39.58|
00003a  4631              MOV      r1,r6                 ;1665
00003c  6820              LDR      r0,[r4,#0]            ;1665
00003e  f7fffffe          BL       TIM_OC1_SetConfig
000042  e019              B        |L39.120|
                  |L39.68|
000044  4631              MOV      r1,r6                 ;1675
000046  6820              LDR      r0,[r4,#0]            ;1675
000048  f7fffffe          BL       TIM_OC2_SetConfig
00004c  e014              B        |L39.120|
                  |L39.78|
00004e  4631              MOV      r1,r6                 ;1685
000050  6820              LDR      r0,[r4,#0]            ;1685
000052  f7fffffe          BL       TIM_OC3_SetConfig
000056  e00f              B        |L39.120|
                  |L39.88|
000058  4631              MOV      r1,r6                 ;1695
00005a  6820              LDR      r0,[r4,#0]            ;1695
00005c  f7fffffe          BL       TIM_OC4_SetConfig
000060  e00a              B        |L39.120|
                  |L39.98|
000062  4631              MOV      r1,r6                 ;1705
000064  6820              LDR      r0,[r4,#0]            ;1705
000066  f7fffffe          BL       TIM_OC5_SetConfig
00006a  e005              B        |L39.120|
                  |L39.108|
00006c  4631              MOV      r1,r6                 ;1715
00006e  6820              LDR      r0,[r4,#0]            ;1715
000070  f7fffffe          BL       TIM_OC6_SetConfig
000074  e000              B        |L39.120|
                  |L39.118|
000076  bf00              NOP                            ;1720
                  |L39.120|
000078  bf00              NOP                            ;1667
00007a  2001              MOVS     r0,#1                 ;1723
00007c  63e0              STR      r0,[r4,#0x3c]         ;1723
00007e  bf00              NOP                            ;1725
000080  2000              MOVS     r0,#0                 ;1725
000082  63a0              STR      r0,[r4,#0x38]         ;1725
000084  bf00              NOP                            ;1725
000086  bf00              NOP                            ;1727
000088  e7c3              B        |L39.18|
;;;1729   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_ConfigChannel||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_ConfigChannel PROC
;;;1744     */
;;;1745   HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
000000  b570              PUSH     {r4-r6,lr}
;;;1746                                               TIM_OC_InitTypeDef* sConfig, 
;;;1747                                               uint32_t Channel)
;;;1748   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;1749     /* Check the parameters */
;;;1750     assert_param(IS_TIM_CHANNELS(Channel)); 
;;;1751     assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
;;;1752     assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
;;;1753     assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
;;;1754     
;;;1755     /* Check input state */
;;;1756     __HAL_LOCK(htim);
000008  bf00              NOP      
00000a  6ba0              LDR      r0,[r4,#0x38]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L40.20|
000010  2002              MOVS     r0,#2
                  |L40.18|
;;;1757     
;;;1758     htim->State = HAL_TIM_STATE_BUSY;
;;;1759       
;;;1760     switch (Channel)
;;;1761     {
;;;1762       case TIM_CHANNEL_1:
;;;1763       {
;;;1764         /* Check the parameters */
;;;1765         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
;;;1766         
;;;1767         /* Configure the Channel 1 in PWM mode */
;;;1768         TIM_OC1_SetConfig(htim->Instance, sConfig);
;;;1769         
;;;1770         /* Set the Preload enable bit for channel1 */
;;;1771         htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
;;;1772         
;;;1773         /* Configure the Output Fast mode */
;;;1774         htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
;;;1775         htim->Instance->CCMR1 |= sConfig->OCFastMode;
;;;1776       }
;;;1777       break;
;;;1778       
;;;1779       case TIM_CHANNEL_2:
;;;1780       {
;;;1781         /* Check the parameters */
;;;1782         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
;;;1783         
;;;1784         /* Configure the Channel 2 in PWM mode */
;;;1785         TIM_OC2_SetConfig(htim->Instance, sConfig);
;;;1786         
;;;1787         /* Set the Preload enable bit for channel2 */
;;;1788         htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
;;;1789         
;;;1790         /* Configure the Output Fast mode */
;;;1791         htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
;;;1792         htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
;;;1793       }
;;;1794       break;
;;;1795       
;;;1796       case TIM_CHANNEL_3:
;;;1797       {
;;;1798         /* Check the parameters */
;;;1799         assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
;;;1800         
;;;1801         /* Configure the Channel 3 in PWM mode */
;;;1802         TIM_OC3_SetConfig(htim->Instance, sConfig);
;;;1803         
;;;1804         /* Set the Preload enable bit for channel3 */
;;;1805         htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
;;;1806         
;;;1807        /* Configure the Output Fast mode */
;;;1808         htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
;;;1809         htim->Instance->CCMR2 |= sConfig->OCFastMode;  
;;;1810       }
;;;1811       break;
;;;1812       
;;;1813       case TIM_CHANNEL_4:
;;;1814       {
;;;1815         /* Check the parameters */
;;;1816         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
;;;1817         
;;;1818         /* Configure the Channel 4 in PWM mode */
;;;1819         TIM_OC4_SetConfig(htim->Instance, sConfig);
;;;1820         
;;;1821         /* Set the Preload enable bit for channel4 */
;;;1822         htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
;;;1823         
;;;1824        /* Configure the Output Fast mode */
;;;1825         htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
;;;1826         htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
;;;1827       }
;;;1828       break;
;;;1829       
;;;1830       case TIM_CHANNEL_5:
;;;1831       {
;;;1832          /* Check the parameters */
;;;1833         assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
;;;1834         
;;;1835        /* Configure the Channel 5 in PWM mode */
;;;1836         TIM_OC5_SetConfig(htim->Instance, sConfig);
;;;1837         
;;;1838         /* Set the Preload enable bit for channel5*/
;;;1839         htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
;;;1840         
;;;1841        /* Configure the Output Fast mode */
;;;1842         htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
;;;1843         htim->Instance->CCMR3 |= sConfig->OCFastMode;  
;;;1844       }
;;;1845       break;
;;;1846       
;;;1847       case TIM_CHANNEL_6:
;;;1848       {
;;;1849          /* Check the parameters */
;;;1850         assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
;;;1851         
;;;1852        /* Configure the Channel 5 in PWM mode */
;;;1853         TIM_OC6_SetConfig(htim->Instance, sConfig);
;;;1854         
;;;1855         /* Set the Preload enable bit for channel6 */
;;;1856         htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
;;;1857         
;;;1858        /* Configure the Output Fast mode */
;;;1859         htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
;;;1860         htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
;;;1861       }
;;;1862       break;
;;;1863       
;;;1864       default:
;;;1865       break;    
;;;1866     }
;;;1867     
;;;1868     htim->State = HAL_TIM_STATE_READY;
;;;1869       
;;;1870     __HAL_UNLOCK(htim);
;;;1871     
;;;1872     return HAL_OK;
;;;1873   }
000012  bd70              POP      {r4-r6,pc}
                  |L40.20|
000014  2001              MOVS     r0,#1                 ;1756
000016  63a0              STR      r0,[r4,#0x38]         ;1756
000018  bf00              NOP                            ;1756
00001a  2002              MOVS     r0,#2                 ;1758
00001c  63e0              STR      r0,[r4,#0x3c]         ;1758
00001e  2e0c              CMP      r6,#0xc               ;1760
000020  d051              BEQ      |L40.198|
000022  dc05              BGT      |L40.48|
000024  b14e              CBZ      r6,|L40.58|
000026  2e04              CMP      r6,#4                 ;1760
000028  d01e              BEQ      |L40.104|
00002a  2e08              CMP      r6,#8                 ;1760
                  |L40.44|
00002c  d17a              BNE      |L40.292|
00002e  e033              B        |L40.152|
                  |L40.48|
000030  2e10              CMP      r6,#0x10              ;1760
000032  d060              BEQ      |L40.246|
000034  2e14              CMP      r6,#0x14              ;1760
000036  d1f9              BNE      |L40.44|
000038  e075              B        |L40.294|
                  |L40.58|
00003a  4629              MOV      r1,r5                 ;1768
00003c  6820              LDR      r0,[r4,#0]            ;1768
00003e  f7fffffe          BL       TIM_OC1_SetConfig
000042  6820              LDR      r0,[r4,#0]            ;1771
000044  6980              LDR      r0,[r0,#0x18]         ;1771
000046  f0400008          ORR      r0,r0,#8              ;1771
00004a  6821              LDR      r1,[r4,#0]            ;1771
00004c  6188              STR      r0,[r1,#0x18]         ;1771
00004e  6820              LDR      r0,[r4,#0]            ;1774
000050  6980              LDR      r0,[r0,#0x18]         ;1774
000052  f0200004          BIC      r0,r0,#4              ;1774
000056  6821              LDR      r1,[r4,#0]            ;1774
000058  6188              STR      r0,[r1,#0x18]         ;1774
00005a  6820              LDR      r0,[r4,#0]            ;1775
00005c  6980              LDR      r0,[r0,#0x18]         ;1775
00005e  6929              LDR      r1,[r5,#0x10]         ;1775
000060  4308              ORRS     r0,r0,r1              ;1775
000062  6821              LDR      r1,[r4,#0]            ;1775
000064  6188              STR      r0,[r1,#0x18]         ;1775
000066  e077              B        |L40.344|
                  |L40.104|
000068  4629              MOV      r1,r5                 ;1785
00006a  6820              LDR      r0,[r4,#0]            ;1785
00006c  f7fffffe          BL       TIM_OC2_SetConfig
000070  6820              LDR      r0,[r4,#0]            ;1788
000072  6980              LDR      r0,[r0,#0x18]         ;1788
000074  f4406000          ORR      r0,r0,#0x800          ;1788
000078  6821              LDR      r1,[r4,#0]            ;1788
00007a  6188              STR      r0,[r1,#0x18]         ;1788
00007c  6820              LDR      r0,[r4,#0]            ;1791
00007e  6980              LDR      r0,[r0,#0x18]         ;1791
000080  f4206080          BIC      r0,r0,#0x400          ;1791
000084  6821              LDR      r1,[r4,#0]            ;1791
000086  6188              STR      r0,[r1,#0x18]         ;1791
000088  6820              LDR      r0,[r4,#0]            ;1792
00008a  6980              LDR      r0,[r0,#0x18]         ;1792
00008c  6929              LDR      r1,[r5,#0x10]         ;1792
00008e  ea402001          ORR      r0,r0,r1,LSL #8       ;1792
000092  6821              LDR      r1,[r4,#0]            ;1792
000094  6188              STR      r0,[r1,#0x18]         ;1792
000096  e05f              B        |L40.344|
                  |L40.152|
000098  4629              MOV      r1,r5                 ;1802
00009a  6820              LDR      r0,[r4,#0]            ;1802
00009c  f7fffffe          BL       TIM_OC3_SetConfig
0000a0  6820              LDR      r0,[r4,#0]            ;1805
0000a2  69c0              LDR      r0,[r0,#0x1c]         ;1805
0000a4  f0400008          ORR      r0,r0,#8              ;1805
0000a8  6821              LDR      r1,[r4,#0]            ;1805
0000aa  61c8              STR      r0,[r1,#0x1c]         ;1805
0000ac  6820              LDR      r0,[r4,#0]            ;1808
0000ae  69c0              LDR      r0,[r0,#0x1c]         ;1808
0000b0  f0200004          BIC      r0,r0,#4              ;1808
0000b4  6821              LDR      r1,[r4,#0]            ;1808
0000b6  61c8              STR      r0,[r1,#0x1c]         ;1808
0000b8  6820              LDR      r0,[r4,#0]            ;1809
0000ba  69c0              LDR      r0,[r0,#0x1c]         ;1809
0000bc  6929              LDR      r1,[r5,#0x10]         ;1809
0000be  4308              ORRS     r0,r0,r1              ;1809
0000c0  6821              LDR      r1,[r4,#0]            ;1809
0000c2  61c8              STR      r0,[r1,#0x1c]         ;1809
0000c4  e048              B        |L40.344|
                  |L40.198|
0000c6  4629              MOV      r1,r5                 ;1819
0000c8  6820              LDR      r0,[r4,#0]            ;1819
0000ca  f7fffffe          BL       TIM_OC4_SetConfig
0000ce  6820              LDR      r0,[r4,#0]            ;1822
0000d0  69c0              LDR      r0,[r0,#0x1c]         ;1822
0000d2  f4406000          ORR      r0,r0,#0x800          ;1822
0000d6  6821              LDR      r1,[r4,#0]            ;1822
0000d8  61c8              STR      r0,[r1,#0x1c]         ;1822
0000da  6820              LDR      r0,[r4,#0]            ;1825
0000dc  69c0              LDR      r0,[r0,#0x1c]         ;1825
0000de  f4206080          BIC      r0,r0,#0x400          ;1825
0000e2  6821              LDR      r1,[r4,#0]            ;1825
0000e4  61c8              STR      r0,[r1,#0x1c]         ;1825
0000e6  6820              LDR      r0,[r4,#0]            ;1826
0000e8  69c0              LDR      r0,[r0,#0x1c]         ;1826
0000ea  6929              LDR      r1,[r5,#0x10]         ;1826
0000ec  ea402001          ORR      r0,r0,r1,LSL #8       ;1826
0000f0  6821              LDR      r1,[r4,#0]            ;1826
0000f2  61c8              STR      r0,[r1,#0x1c]         ;1826
0000f4  e030              B        |L40.344|
                  |L40.246|
0000f6  4629              MOV      r1,r5                 ;1836
0000f8  6820              LDR      r0,[r4,#0]            ;1836
0000fa  f7fffffe          BL       TIM_OC5_SetConfig
0000fe  6820              LDR      r0,[r4,#0]            ;1839
000100  6d40              LDR      r0,[r0,#0x54]         ;1839
000102  f0400008          ORR      r0,r0,#8              ;1839
000106  6821              LDR      r1,[r4,#0]            ;1839
000108  6548              STR      r0,[r1,#0x54]         ;1839
00010a  6820              LDR      r0,[r4,#0]            ;1842
00010c  6d40              LDR      r0,[r0,#0x54]         ;1842
00010e  f0200004          BIC      r0,r0,#4              ;1842
000112  6821              LDR      r1,[r4,#0]            ;1842
000114  6548              STR      r0,[r1,#0x54]         ;1842
000116  6820              LDR      r0,[r4,#0]            ;1843
000118  6d40              LDR      r0,[r0,#0x54]         ;1843
00011a  6929              LDR      r1,[r5,#0x10]         ;1843
00011c  4308              ORRS     r0,r0,r1              ;1843
00011e  6821              LDR      r1,[r4,#0]            ;1843
000120  6548              STR      r0,[r1,#0x54]         ;1843
000122  e019              B        |L40.344|
                  |L40.292|
000124  e017              B        |L40.342|
                  |L40.294|
000126  4629              MOV      r1,r5                 ;1853
000128  6820              LDR      r0,[r4,#0]            ;1853
00012a  f7fffffe          BL       TIM_OC6_SetConfig
00012e  6820              LDR      r0,[r4,#0]            ;1856
000130  6d40              LDR      r0,[r0,#0x54]         ;1856
000132  f4406000          ORR      r0,r0,#0x800          ;1856
000136  6821              LDR      r1,[r4,#0]            ;1856
000138  6548              STR      r0,[r1,#0x54]         ;1856
00013a  6820              LDR      r0,[r4,#0]            ;1859
00013c  6d40              LDR      r0,[r0,#0x54]         ;1859
00013e  f4206080          BIC      r0,r0,#0x400          ;1859
000142  6821              LDR      r1,[r4,#0]            ;1859
000144  6548              STR      r0,[r1,#0x54]         ;1859
000146  6820              LDR      r0,[r4,#0]            ;1860
000148  6d40              LDR      r0,[r0,#0x54]         ;1860
00014a  6929              LDR      r1,[r5,#0x10]         ;1860
00014c  ea402001          ORR      r0,r0,r1,LSL #8       ;1860
000150  6821              LDR      r1,[r4,#0]            ;1860
000152  6548              STR      r0,[r1,#0x54]         ;1860
000154  e000              B        |L40.344|
                  |L40.342|
000156  bf00              NOP                            ;1865
                  |L40.344|
000158  bf00              NOP                            ;1777
00015a  2001              MOVS     r0,#1                 ;1868
00015c  63e0              STR      r0,[r4,#0x3c]         ;1868
00015e  bf00              NOP                            ;1870
000160  2000              MOVS     r0,#0                 ;1870
000162  63a0              STR      r0,[r4,#0x38]         ;1870
000164  bf00              NOP                            ;1870
000166  bf00              NOP                            ;1872
000168  e753              B        |L40.18|
;;;1874   
                          ENDP


                          AREA ||i.TIMEx_DMACommutationCplt||, CODE, READONLY, ALIGN=1

                  TIMEx_DMACommutationCplt PROC
;;;2418     */
;;;2419   void HAL_TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;2420   {
000002  4604              MOV      r4,r0
;;;2421     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6be5              LDR      r5,[r4,#0x3c]
;;;2422     
;;;2423     htim->State= HAL_TIM_STATE_READY;
000006  2001              MOVS     r0,#1
000008  63e8              STR      r0,[r5,#0x3c]
;;;2424       
;;;2425     HAL_TIMEx_CommutationCallback(htim); 
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       HAL_TIMEx_CommutationCallback
;;;2426   }
000010  bd70              POP      {r4-r6,pc}
;;;2427   
                          ENDP


                          AREA ||i.TIM_CCxNChannelCmd||, CODE, READONLY, ALIGN=1

                  TIM_CCxNChannelCmd PROC
;;;2439     */
;;;2440   static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
000000  b530              PUSH     {r4,r5,lr}
;;;2441   {
;;;2442     uint32_t tmp = 0;
000002  2300              MOVS     r3,#0
;;;2443   
;;;2444     /* Check the parameters */
;;;2445     assert_param(IS_TIM_ADVANCED_INSTANCE(TIMx));
;;;2446     assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));
;;;2447   
;;;2448     tmp = TIM_CCER_CC1NE << Channel;
000004  2404              MOVS     r4,#4
000006  fa04f301          LSL      r3,r4,r1
;;;2449   
;;;2450     /* Reset the CCxNE Bit */
;;;2451     TIMx->CCER &= ~tmp;
00000a  6a04              LDR      r4,[r0,#0x20]
00000c  439c              BICS     r4,r4,r3
00000e  6204              STR      r4,[r0,#0x20]
;;;2452   
;;;2453     /* Set or reset the CCxNE Bit */ 
;;;2454     TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
000010  6a04              LDR      r4,[r0,#0x20]
000012  fa02f501          LSL      r5,r2,r1
000016  432c              ORRS     r4,r4,r5
000018  6204              STR      r4,[r0,#0x20]
;;;2455   }
00001a  bd30              POP      {r4,r5,pc}
;;;2456   
                          ENDP


                          AREA ||i.TIM_OC5_SetConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC5_SetConfig PROC
;;;2462     */
;;;2463   static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
000000  b530              PUSH     {r4,r5,lr}
;;;2464   {
;;;2465     uint32_t tmpccmrx = 0;
000002  2400              MOVS     r4,#0
;;;2466     uint32_t tmpccer = 0;
000004  2200              MOVS     r2,#0
;;;2467     uint32_t tmpcr2 = 0; 
000006  2300              MOVS     r3,#0
;;;2468   
;;;2469     /* Disable the output: Reset the CCxE Bit */
;;;2470     TIMx->CCER &= ~TIM_CCER_CC5E;
000008  6a05              LDR      r5,[r0,#0x20]
00000a  f4253580          BIC      r5,r5,#0x10000
00000e  6205              STR      r5,[r0,#0x20]
;;;2471     
;;;2472     /* Get the TIMx CCER register value */
;;;2473     tmpccer = TIMx->CCER;
000010  6a02              LDR      r2,[r0,#0x20]
;;;2474     /* Get the TIMx CR2 register value */
;;;2475     tmpcr2 =  TIMx->CR2; 
000012  6843              LDR      r3,[r0,#4]
;;;2476     /* Get the TIMx CCMR1 register value */
;;;2477     tmpccmrx = TIMx->CCMR3;
000014  6d44              LDR      r4,[r0,#0x54]
;;;2478   
;;;2479     /* Reset the Output Compare Mode Bits */
;;;2480     tmpccmrx &= ~(TIM_CCMR3_OC5M);
000016  4d0d              LDR      r5,|L43.76|
000018  402c              ANDS     r4,r4,r5
;;;2481     /* Select the Output Compare Mode */
;;;2482     tmpccmrx |= OC_Config->OCMode;
00001a  680d              LDR      r5,[r1,#0]
00001c  432c              ORRS     r4,r4,r5
;;;2483     
;;;2484     /* Reset the Output Polarity level */
;;;2485     tmpccer &= ~TIM_CCER_CC5P;
00001e  f4223200          BIC      r2,r2,#0x20000
;;;2486     /* Set the Output Compare Polarity */
;;;2487     tmpccer |= (OC_Config->OCPolarity << 16);
000022  890d              LDRH     r5,[r1,#8]
000024  ea424205          ORR      r2,r2,r5,LSL #16
;;;2488   
;;;2489     if(IS_TIM_BREAK_INSTANCE(TIMx))
000028  4d09              LDR      r5,|L43.80|
00002a  42a8              CMP      r0,r5
00002c  d002              BEQ      |L43.52|
00002e  4d09              LDR      r5,|L43.84|
000030  42a8              CMP      r0,r5
000032  d104              BNE      |L43.62|
                  |L43.52|
;;;2490     {   
;;;2491       /* Reset the Output Compare IDLE State */
;;;2492       tmpcr2 &= ~TIM_CR2_OIS5;
000034  f4233380          BIC      r3,r3,#0x10000
;;;2493       /* Set the Output Idle state */
;;;2494       tmpcr2 |= (OC_Config->OCIdleState << 8);
000038  694d              LDR      r5,[r1,#0x14]
00003a  ea432305          ORR      r3,r3,r5,LSL #8
                  |L43.62|
;;;2495     }
;;;2496     /* Write to TIMx CR2 */
;;;2497     TIMx->CR2 = tmpcr2;
00003e  6043              STR      r3,[r0,#4]
;;;2498     
;;;2499     /* Write to TIMx CCMR3 */
;;;2500     TIMx->CCMR3 = tmpccmrx;
000040  6544              STR      r4,[r0,#0x54]
;;;2501     
;;;2502     /* Set the Capture Compare Register value */
;;;2503     TIMx->CCR5 = OC_Config->Pulse;
000042  684d              LDR      r5,[r1,#4]
000044  6585              STR      r5,[r0,#0x58]
;;;2504     
;;;2505     /* Write to TIMx CCER */
;;;2506     TIMx->CCER = tmpccer;  
000046  6202              STR      r2,[r0,#0x20]
;;;2507   }
000048  bd30              POP      {r4,r5,pc}
;;;2508   
                          ENDP

00004a  0000              DCW      0x0000
                  |L43.76|
                          DCD      0xfffeff8f
                  |L43.80|
                          DCD      0x40010000
                  |L43.84|
                          DCD      0x40010400

                          AREA ||i.TIM_OC6_SetConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC6_SetConfig PROC
;;;2514     */
;;;2515   static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
000000  b530              PUSH     {r4,r5,lr}
;;;2516   {
;;;2517     uint32_t tmpccmrx = 0;
000002  2400              MOVS     r4,#0
;;;2518     uint32_t tmpccer = 0;
000004  2200              MOVS     r2,#0
;;;2519     uint32_t tmpcr2 = 0; 
000006  2300              MOVS     r3,#0
;;;2520   
;;;2521     /* Disable the output: Reset the CCxE Bit */
;;;2522     TIMx->CCER &= ~TIM_CCER_CC6E;
000008  6a05              LDR      r5,[r0,#0x20]
00000a  f4251580          BIC      r5,r5,#0x100000
00000e  6205              STR      r5,[r0,#0x20]
;;;2523     
;;;2524     /* Get the TIMx CCER register value */
;;;2525     tmpccer = TIMx->CCER;
000010  6a02              LDR      r2,[r0,#0x20]
;;;2526     /* Get the TIMx CR2 register value */
;;;2527     tmpcr2 =  TIMx->CR2; 
000012  6843              LDR      r3,[r0,#4]
;;;2528     /* Get the TIMx CCMR1 register value */
;;;2529     tmpccmrx = TIMx->CCMR3;
000014  6d44              LDR      r4,[r0,#0x54]
;;;2530       
;;;2531     /* Reset the Output Compare Mode Bits */
;;;2532     tmpccmrx &= ~(TIM_CCMR3_OC6M);
000016  4d0d              LDR      r5,|L44.76|
000018  402c              ANDS     r4,r4,r5
;;;2533     /* Select the Output Compare Mode */
;;;2534     tmpccmrx |= (OC_Config->OCMode << 8);
00001a  680d              LDR      r5,[r1,#0]
00001c  ea442405          ORR      r4,r4,r5,LSL #8
;;;2535     
;;;2536     /* Reset the Output Polarity level */
;;;2537     tmpccer &= (uint32_t)~TIM_CCER_CC6P;
000020  f4221200          BIC      r2,r2,#0x200000
;;;2538     /* Set the Output Compare Polarity */
;;;2539     tmpccer |= (OC_Config->OCPolarity << 20);
000024  890d              LDRH     r5,[r1,#8]
000026  ea425205          ORR      r2,r2,r5,LSL #20
;;;2540   
;;;2541     if(IS_TIM_BREAK_INSTANCE(TIMx))
00002a  4d09              LDR      r5,|L44.80|
00002c  42a8              CMP      r0,r5
00002e  d002              BEQ      |L44.54|
000030  4d08              LDR      r5,|L44.84|
000032  42a8              CMP      r0,r5
000034  d104              BNE      |L44.64|
                  |L44.54|
;;;2542     {   
;;;2543       /* Reset the Output Compare IDLE State */
;;;2544       tmpcr2 &= ~TIM_CR2_OIS6;
000036  f4232380          BIC      r3,r3,#0x40000
;;;2545       /* Set the Output Idle state */
;;;2546       tmpcr2 |= (OC_Config->OCIdleState << 10);
00003a  694d              LDR      r5,[r1,#0x14]
00003c  ea432385          ORR      r3,r3,r5,LSL #10
                  |L44.64|
;;;2547     }
;;;2548     
;;;2549     /* Write to TIMx CR2 */
;;;2550     TIMx->CR2 = tmpcr2;
000040  6043              STR      r3,[r0,#4]
;;;2551     
;;;2552     /* Write to TIMx CCMR3 */
;;;2553     TIMx->CCMR3 = tmpccmrx;
000042  6544              STR      r4,[r0,#0x54]
;;;2554     
;;;2555     /* Set the Capture Compare Register value */
;;;2556     TIMx->CCR6 = OC_Config->Pulse;
000044  684d              LDR      r5,[r1,#4]
000046  65c5              STR      r5,[r0,#0x5c]
;;;2557     
;;;2558     /* Write to TIMx CCER */
;;;2559     TIMx->CCER = tmpccer;  
000048  6202              STR      r2,[r0,#0x20]
;;;2560   } 
00004a  bd30              POP      {r4,r5,pc}
;;;2561   
                          ENDP

                  |L44.76|
                          DCD      0xfeff8fff
                  |L44.80|
                          DCD      0x40010000
                  |L44.84|
                          DCD      0x40010400

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_tim_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____REV16|
#line 388 "..\\..\\..\\..\\Library\\STM32F7xx_HAL_Driver\\Core\\cmsis_armcc.h"
|__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____REVSH|
#line 402
|__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____RRX|
#line 587
|__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
