; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\platform_cmx.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\platform_cmx.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\..\Library\STM32F7xx_HAL_Driver\Core -I..\..\..\..\Library\STM32F7xx_HAL_Driver\Inc -I..\..\..\..\Library\STM32F7xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\32-Bit_MCU\STM32\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\platform_cmx.crf ..\..\MProkaron\Platform\CortexM\platform_cmx.c]
                          THUMB

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;1905    */
;;;1906   __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;1907   {
;;;1908     if ((int32_t)(IRQn) < 0)
000002  2800              CMP      r0,#0
000004  da07              BGE      |L1.22|
;;;1909     {
;;;1910       SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000006  070a              LSLS     r2,r1,#28
000008  0e14              LSRS     r4,r2,#24
00000a  4a05              LDR      r2,|L1.32|
00000c  f000030f          AND      r3,r0,#0xf
000010  1f1b              SUBS     r3,r3,#4
000012  54d4              STRB     r4,[r2,r3]
000014  e003              B        |L1.30|
                  |L1.22|
;;;1911     }
;;;1912     else
;;;1913     {
;;;1914       NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000016  070a              LSLS     r2,r1,#28
000018  0e13              LSRS     r3,r2,#24
00001a  4a02              LDR      r2,|L1.36|
00001c  5413              STRB     r3,[r2,r0]
                  |L1.30|
;;;1915     }
;;;1916   }
00001e  bd10              POP      {r4,pc}
;;;1917   
                          ENDP

                  |L1.32|
                          DCD      0xe000ed18
                  |L1.36|
                          DCD      0xe000e400

                          AREA ||i.RMP_Putchar||, CODE, READONLY, ALIGN=2

                  RMP_Putchar PROC
;;;88     ******************************************************************************/
;;;89     void RMP_Putchar(char Char)
000000  bf00              NOP      
;;;90     {
;;;91         RMP_CMX_PUTCHAR(Char);
000002  4601              MOV      r1,r0
000004  4a0b              LDR      r2,|L2.52|
000006  6812              LDR      r2,[r2,#0]
000008  f0020201          AND      r2,r2,#1
00000c  b17a              CBZ      r2,|L2.46|
00000e  4a09              LDR      r2,|L2.52|
000010  3a80              SUBS     r2,r2,#0x80
000012  6812              LDR      r2,[r2,#0]
000014  f0020201          AND      r2,r2,#1
000018  b14a              CBZ      r2,|L2.46|
00001a  e000              B        |L2.30|
                  |L2.28|
00001c  bf00              NOP      
                  |L2.30|
00001e  f04f4260          MOV      r2,#0xe0000000
000022  6812              LDR      r2,[r2,#0]
000024  2a00              CMP      r2,#0
000026  d0f9              BEQ      |L2.28|
000028  f04f4360          MOV      r3,#0xe0000000
00002c  7019              STRB     r1,[r3,#0]
                  |L2.46|
00002e  bf00              NOP      
000030  bf00              NOP      
;;;92     }
000032  4770              BX       lr
;;;93     /* End Function:RMP_Putchar **************************************************/
                          ENDP

                  |L2.52|
                          DCD      0xe0000e80

                          AREA ||i.SCB_EnableDCache||, CODE, READONLY, ALIGN=2

                  SCB_EnableDCache PROC
;;;2122     */
;;;2123   __STATIC_INLINE void SCB_EnableDCache (void)
000000  b510              PUSH     {r4,lr}
;;;2124   {
;;;2125     #if (__DCACHE_PRESENT == 1U)
;;;2126       uint32_t ccsidr;
;;;2127       uint32_t sets;
;;;2128       uint32_t ways;
;;;2129   
;;;2130       SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
000002  2300              MOVS     r3,#0
000004  4c23              LDR      r4,|L3.148|
000006  6023              STR      r3,[r4,#0]
;;;2131       __DSB();
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  bf00              NOP      
00000e  f3bf8f4f          DSB      
000012  bf00              NOP      
000014  bf00              NOP      
000016  bf00              NOP      
;;;2132   
;;;2133       ccsidr = SCB->CCSIDR;
000018  1f23              SUBS     r3,r4,#4
00001a  6818              LDR      r0,[r3,#0]
;;;2134   
;;;2135                                               /* invalidate D-Cache */
;;;2136       sets = (uint32_t)(CCSIDR_SETS(ccsidr));
00001c  f3c0314e          UBFX     r1,r0,#13,#15
;;;2137       do {
000020  bf00              NOP      
                  |L3.34|
;;;2138         ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
000022  f3c002c9          UBFX     r2,r0,#3,#10
;;;2139         do {
000026  bf00              NOP      
                  |L3.40|
;;;2140           SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
000028  f64373e0          MOV      r3,#0x3fe0
00002c  ea031341          AND      r3,r3,r1,LSL #5
000030  f04f4440          MOV      r4,#0xc0000000
000034  ea047482          AND      r4,r4,r2,LSL #30
000038  4323              ORRS     r3,r3,r4
00003a  4c17              LDR      r4,|L3.152|
00003c  6023              STR      r3,[r4,#0]
;;;2141                         ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
;;;2142           #if defined ( __CC_ARM )
;;;2143             __schedule_barrier();
00003e  bf00              NOP      
000040  bf00              NOP      
;;;2144           #endif
;;;2145         } while (ways--);
000042  1e13              SUBS     r3,r2,#0
000044  f1a20201          SUB      r2,r2,#1
000048  d1ee              BNE      |L3.40|
;;;2146       } while(sets--);
00004a  1e0b              SUBS     r3,r1,#0
00004c  f1a10101          SUB      r1,r1,#1
000050  d1e7              BNE      |L3.34|
;;;2147       __DSB();
000052  bf00              NOP      
000054  bf00              NOP      
000056  bf00              NOP      
000058  f3bf8f4f          DSB      
00005c  bf00              NOP      
00005e  bf00              NOP      
000060  bf00              NOP      
;;;2148   
;;;2149       SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
000062  4b0c              LDR      r3,|L3.148|
000064  3b70              SUBS     r3,r3,#0x70
000066  681b              LDR      r3,[r3,#0]
000068  f4433380          ORR      r3,r3,#0x10000
00006c  4c09              LDR      r4,|L3.148|
00006e  3c70              SUBS     r4,r4,#0x70
000070  6023              STR      r3,[r4,#0]
;;;2150   
;;;2151       __DSB();
000072  bf00              NOP      
000074  bf00              NOP      
000076  bf00              NOP      
000078  f3bf8f4f          DSB      
00007c  bf00              NOP      
00007e  bf00              NOP      
000080  bf00              NOP      
;;;2152       __ISB();
000082  bf00              NOP      
000084  bf00              NOP      
000086  bf00              NOP      
000088  f3bf8f6f          ISB      
00008c  bf00              NOP      
00008e  bf00              NOP      
000090  bf00              NOP      
;;;2153     #endif
;;;2154   }
000092  bd10              POP      {r4,pc}
;;;2155   
                          ENDP

                  |L3.148|
                          DCD      0xe000ed84
                  |L3.152|
                          DCD      0xe000ef60

                          AREA ||i._RMP_Low_Level_Init||, CODE, READONLY, ALIGN=2

                  _RMP_Low_Level_Init PROC
;;;61     ******************************************************************************/
;;;62     void _RMP_Low_Level_Init(void)
000000  b510              PUSH     {r4,lr}
;;;63     {
000002  b0b6              SUB      sp,sp,#0xd8
;;;64         RMP_CMX_LOW_LEVEL_INIT();
000004  bf00              NOP      
000006  2134              MOVS     r1,#0x34
000008  a829              ADD      r0,sp,#0xa4
00000a  f7fffffe          BL       RMP_Clear
00000e  2114              MOVS     r1,#0x14
000010  a824              ADD      r0,sp,#0x90
000012  f7fffffe          BL       RMP_Clear
000016  2114              MOVS     r1,#0x14
000018  a81f              ADD      r0,sp,#0x7c
00001a  f7fffffe          BL       RMP_Clear
00001e  2178              MOVS     r1,#0x78
000020  a801              ADD      r0,sp,#4
000022  f7fffffe          BL       RMP_Clear
000026  bf00              NOP      
000028  48b6              LDR      r0,|L4.772|
00002a  6800              LDR      r0,[r0,#0]
00002c  f0405080          ORR      r0,r0,#0x10000000
000030  49b4              LDR      r1,|L4.772|
000032  6008              STR      r0,[r1,#0]
000034  4608              MOV      r0,r1
000036  6800              LDR      r0,[r0,#0]
000038  f0005080          AND      r0,r0,#0x10000000
00003c  9000              STR      r0,[sp,#0]
00003e  bf00              NOP      
000040  bf00              NOP      
000042  bf00              NOP      
000044  48b0              LDR      r0,|L4.776|
000046  6800              LDR      r0,[r0,#0]
000048  f4404040          ORR      r0,r0,#0xc000
00004c  49ae              LDR      r1,|L4.776|
00004e  6008              STR      r0,[r1,#0]
000050  4608              MOV      r0,r1
000052  6800              LDR      r0,[r0,#0]
000054  f4004040          AND      r0,r0,#0xc000
000058  9000              STR      r0,[sp,#0]
00005a  bf00              NOP      
00005c  bf00              NOP      
00005e  2001              MOVS     r0,#1
000060  9029              STR      r0,[sp,#0xa4]
000062  0400              LSLS     r0,r0,#16
000064  902a              STR      r0,[sp,#0xa8]
000066  2002              MOVS     r0,#2
000068  902f              STR      r0,[sp,#0xbc]
00006a  0541              LSLS     r1,r0,#21
00006c  a829              ADD      r0,sp,#0xa4
00006e  61c1              STR      r1,[r0,#0x1c]
000070  2119              MOVS     r1,#0x19
000072  6201              STR      r1,[r0,#0x20]
000074  f44f71d8          MOV      r1,#0x1b0
000078  6241              STR      r1,[r0,#0x24]
00007a  2102              MOVS     r1,#2
00007c  6281              STR      r1,[r0,#0x28]
00007e  2109              MOVS     r1,#9
000080  62c1              STR      r1,[r0,#0x2c]
000082  bf00              NOP      
000084  f7fffffe          BL       HAL_RCC_OscConfig
000088  b908              CBNZ     r0,|L4.142|
00008a  2001              MOVS     r0,#1
00008c  e000              B        |L4.144|
                  |L4.142|
00008e  2000              MOVS     r0,#0
                  |L4.144|
000090  2800              CMP      r0,#0
000092  d11c              BNE      |L4.206|
000094  a09d              ADR      r0,|L4.780|
000096  f7fffffe          BL       RMP_Print_String
00009a  a0a6              ADR      r0,|L4.820|
00009c  f7fffffe          BL       RMP_Print_String
0000a0  a0b0              ADR      r0,|L4.868|
0000a2  f7fffffe          BL       RMP_Print_String
0000a6  2040              MOVS     r0,#0x40
0000a8  f7fffffe          BL       RMP_Print_Int
0000ac  a0b0              ADR      r0,|L4.880|
0000ae  f7fffffe          BL       RMP_Print_String
0000b2  a0b0              ADR      r0,|L4.884|
0000b4  f7fffffe          BL       RMP_Print_String
0000b8  a0b1              ADR      r0,|L4.896|
0000ba  f7fffffe          BL       RMP_Print_String
0000be  a0b1              ADR      r0,|L4.900|
0000c0  f7fffffe          BL       RMP_Print_String
0000c4  a0aa              ADR      r0,|L4.880|
0000c6  f7fffffe          BL       RMP_Print_String
0000ca  bf00              NOP      
                  |L4.204|
0000cc  e7fe              B        |L4.204|
                  |L4.206|
0000ce  bf00              NOP      
0000d0  bf00              NOP      
0000d2  f7fffffe          BL       HAL_PWREx_EnableOverDrive
0000d6  b908              CBNZ     r0,|L4.220|
0000d8  2001              MOVS     r0,#1
0000da  e000              B        |L4.222|
                  |L4.220|
0000dc  2000              MOVS     r0,#0
                  |L4.222|
0000de  2800              CMP      r0,#0
0000e0  d11c              BNE      |L4.284|
0000e2  a08a              ADR      r0,|L4.780|
0000e4  f7fffffe          BL       RMP_Print_String
0000e8  a092              ADR      r0,|L4.820|
0000ea  f7fffffe          BL       RMP_Print_String
0000ee  a09d              ADR      r0,|L4.868|
0000f0  f7fffffe          BL       RMP_Print_String
0000f4  2040              MOVS     r0,#0x40
0000f6  f7fffffe          BL       RMP_Print_Int
0000fa  a09d              ADR      r0,|L4.880|
0000fc  f7fffffe          BL       RMP_Print_String
000100  a09c              ADR      r0,|L4.884|
000102  f7fffffe          BL       RMP_Print_String
000106  a09e              ADR      r0,|L4.896|
000108  f7fffffe          BL       RMP_Print_String
00010c  a09d              ADR      r0,|L4.900|
00010e  f7fffffe          BL       RMP_Print_String
000112  a097              ADR      r0,|L4.880|
000114  f7fffffe          BL       RMP_Print_String
000118  bf00              NOP      
                  |L4.282|
00011a  e7fe              B        |L4.282|
                  |L4.284|
00011c  bf00              NOP      
00011e  200f              MOVS     r0,#0xf
000120  9024              STR      r0,[sp,#0x90]
000122  2002              MOVS     r0,#2
000124  9025              STR      r0,[sp,#0x94]
000126  2000              MOVS     r0,#0
000128  9026              STR      r0,[sp,#0x98]
00012a  f44f5080          MOV      r0,#0x1000
00012e  9027              STR      r0,[sp,#0x9c]
000130  9028              STR      r0,[sp,#0xa0]
000132  bf00              NOP      
000134  2107              MOVS     r1,#7
000136  a824              ADD      r0,sp,#0x90
000138  f7fffffe          BL       HAL_RCC_ClockConfig
00013c  b908              CBNZ     r0,|L4.322|
00013e  2001              MOVS     r0,#1
000140  e000              B        |L4.324|
                  |L4.322|
000142  2000              MOVS     r0,#0
                  |L4.324|
000144  2800              CMP      r0,#0
000146  d11c              BNE      |L4.386|
000148  a070              ADR      r0,|L4.780|
00014a  f7fffffe          BL       RMP_Print_String
00014e  a079              ADR      r0,|L4.820|
000150  f7fffffe          BL       RMP_Print_String
000154  a083              ADR      r0,|L4.868|
000156  f7fffffe          BL       RMP_Print_String
00015a  2040              MOVS     r0,#0x40
00015c  f7fffffe          BL       RMP_Print_Int
000160  a083              ADR      r0,|L4.880|
000162  f7fffffe          BL       RMP_Print_String
000166  a083              ADR      r0,|L4.884|
000168  f7fffffe          BL       RMP_Print_String
00016c  a084              ADR      r0,|L4.896|
00016e  f7fffffe          BL       RMP_Print_String
000172  a084              ADR      r0,|L4.900|
000174  f7fffffe          BL       RMP_Print_String
000178  a07d              ADR      r0,|L4.880|
00017a  f7fffffe          BL       RMP_Print_String
00017e  bf00              NOP      
                  |L4.384|
000180  e7fe              B        |L4.384|
                  |L4.386|
000182  bf00              NOP      
000184  bf00              NOP      
000186  bf00              NOP      
000188  bf00              NOP      
00018a  bf00              NOP      
00018c  bf00              NOP      
00018e  f3bf8f4f          DSB      
000192  bf00              NOP      
000194  bf00              NOP      
000196  bf00              NOP      
000198  bf00              NOP      
00019a  bf00              NOP      
00019c  bf00              NOP      
00019e  f3bf8f6f          ISB      
0001a2  bf00              NOP      
0001a4  bf00              NOP      
0001a6  bf00              NOP      
0001a8  2000              MOVS     r0,#0
0001aa  4979              LDR      r1,|L4.912|
0001ac  6008              STR      r0,[r1,#0]
0001ae  4879              LDR      r0,|L4.916|
0001b0  6800              LDR      r0,[r0,#0]
0001b2  f4403000          ORR      r0,r0,#0x20000
0001b6  4977              LDR      r1,|L4.916|
0001b8  6008              STR      r0,[r1,#0]
0001ba  bf00              NOP      
0001bc  bf00              NOP      
0001be  bf00              NOP      
0001c0  f3bf8f4f          DSB      
0001c4  bf00              NOP      
0001c6  bf00              NOP      
0001c8  bf00              NOP      
0001ca  bf00              NOP      
0001cc  bf00              NOP      
0001ce  bf00              NOP      
0001d0  f3bf8f6f          ISB      
0001d4  bf00              NOP      
0001d6  bf00              NOP      
0001d8  bf00              NOP      
0001da  bf00              NOP      
0001dc  f7fffffe          BL       SCB_EnableDCache
0001e0  486d              LDR      r0,|L4.920|
0001e2  6800              LDR      r0,[r0,#0]
0001e4  f4407000          ORR      r0,r0,#0x200
0001e8  496b              LDR      r1,|L4.920|
0001ea  6008              STR      r0,[r1,#0]
0001ec  bf00              NOP      
0001ee  4845              LDR      r0,|L4.772|
0001f0  3810              SUBS     r0,r0,#0x10
0001f2  6800              LDR      r0,[r0,#0]
0001f4  f0400001          ORR      r0,r0,#1
0001f8  4942              LDR      r1,|L4.772|
0001fa  3910              SUBS     r1,r1,#0x10
0001fc  6008              STR      r0,[r1,#0]
0001fe  4608              MOV      r0,r1
000200  6800              LDR      r0,[r0,#0]
000202  f0000001          AND      r0,r0,#1
000206  9000              STR      r0,[sp,#0]
000208  bf00              NOP      
00020a  bf00              NOP      
00020c  bf00              NOP      
00020e  483d              LDR      r0,|L4.772|
000210  1d00              ADDS     r0,r0,#4
000212  6800              LDR      r0,[r0,#0]
000214  f0400010          ORR      r0,r0,#0x10
000218  493a              LDR      r1,|L4.772|
00021a  1d09              ADDS     r1,r1,#4
00021c  6008              STR      r0,[r1,#0]
00021e  4608              MOV      r0,r1
000220  6800              LDR      r0,[r0,#0]
000222  f0000010          AND      r0,r0,#0x10
000226  9000              STR      r0,[sp,#0]
000228  bf00              NOP      
00022a  bf00              NOP      
00022c  1548              ASRS     r0,r1,#21
00022e  901f              STR      r0,[sp,#0x7c]
000230  2002              MOVS     r0,#2
000232  9020              STR      r0,[sp,#0x80]
000234  2001              MOVS     r0,#1
000236  9021              STR      r0,[sp,#0x84]
000238  2003              MOVS     r0,#3
00023a  9022              STR      r0,[sp,#0x88]
00023c  2007              MOVS     r0,#7
00023e  9023              STR      r0,[sp,#0x8c]
000240  a91f              ADD      r1,sp,#0x7c
000242  4856              LDR      r0,|L4.924|
000244  f7fffffe          BL       HAL_GPIO_Init
000248  4855              LDR      r0,|L4.928|
00024a  9001              STR      r0,[sp,#4]
00024c  f44f30e1          MOV      r0,#0x1c200
000250  9002              STR      r0,[sp,#8]
000252  2100              MOVS     r1,#0
000254  9103              STR      r1,[sp,#0xc]
000256  9104              STR      r1,[sp,#0x10]
000258  9105              STR      r1,[sp,#0x14]
00025a  9107              STR      r1,[sp,#0x1c]
00025c  2108              MOVS     r1,#8
00025e  9106              STR      r1,[sp,#0x18]
000260  a801              ADD      r0,sp,#4
000262  f7fffffe          BL       HAL_UART_Init
000266  bf00              NOP      
;;;65         
;;;66         /* Enable all fault handlers */
;;;67         SCB->SHCSR|=RMP_CMX_SHCSR_USGFAULTENA|RMP_CMX_SHCSR_BUSFAULTENA|RMP_CMX_SHCSR_MEMFAULTENA;
000268  484a              LDR      r0,|L4.916|
00026a  3010              ADDS     r0,r0,#0x10
00026c  6800              LDR      r0,[r0,#0]
00026e  f44020e0          ORR      r0,r0,#0x70000
000272  4948              LDR      r1,|L4.916|
000274  3110              ADDS     r1,r1,#0x10
000276  6008              STR      r0,[r1,#0]
;;;68         
;;;69         /* Set the priority of timer, svc and faults to the lowest */
;;;70         NVIC_SetPriorityGrouping(RMP_CMX_NVIC_GROUPING);
000278  2005              MOVS     r0,#5
00027a  4602              MOV      r2,r0
00027c  4b45              LDR      r3,|L4.916|
00027e  3b08              SUBS     r3,r3,#8
000280  6819              LDR      r1,[r3,#0]
000282  f64f03ff          MOV      r3,#0xf8ff
000286  4019              ANDS     r1,r1,r3
000288  4b46              LDR      r3,|L4.932|
00028a  430b              ORRS     r3,r3,r1
00028c  ea432102          ORR      r1,r3,r2,LSL #8
000290  4b40              LDR      r3,|L4.916|
000292  3b08              SUBS     r3,r3,#8
000294  6019              STR      r1,[r3,#0]
000296  bf00              NOP      
;;;71         NVIC_SetPriority(SVCall_IRQn, 0xFF);
000298  21ff              MOVS     r1,#0xff
00029a  4240              RSBS     r0,r0,#0
00029c  f7fffffe          BL       NVIC_SetPriority
;;;72         NVIC_SetPriority(PendSV_IRQn, 0xFF);
0002a0  21ff              MOVS     r1,#0xff
0002a2  f06f0001          MVN      r0,#1
0002a6  f7fffffe          BL       NVIC_SetPriority
;;;73         NVIC_SetPriority(SysTick_IRQn, 0xFF);
0002aa  21ff              MOVS     r1,#0xff
0002ac  f04f30ff          MOV      r0,#0xffffffff
0002b0  f7fffffe          BL       NVIC_SetPriority
;;;74         NVIC_SetPriority(BusFault_IRQn, 0xFF);
0002b4  21ff              MOVS     r1,#0xff
0002b6  f06f000a          MVN      r0,#0xa
0002ba  f7fffffe          BL       NVIC_SetPriority
;;;75         NVIC_SetPriority(UsageFault_IRQn, 0xFF);
0002be  21ff              MOVS     r1,#0xff
0002c0  f06f0009          MVN      r0,#9
0002c4  f7fffffe          BL       NVIC_SetPriority
;;;76         NVIC_SetPriority(DebugMonitor_IRQn, 0xFF);
0002c8  21ff              MOVS     r1,#0xff
0002ca  f06f0003          MVN      r0,#3
0002ce  f7fffffe          BL       NVIC_SetPriority
;;;77         
;;;78         /* Configure systick */
;;;79         SysTick_Config(RMP_CMX_SYSTICK_VAL);
0002d2  f2454460          MOV      r4,#0x5460
0002d6  1e60              SUBS     r0,r4,#1
0002d8  f1b07f80          CMP      r0,#0x1000000
0002dc  d300              BCC      |L4.736|
0002de  e00f              B        |L4.768|
                  |L4.736|
0002e0  1e60              SUBS     r0,r4,#1
0002e2  f04f21e0          MOV      r1,#0xe000e000
0002e6  6148              STR      r0,[r1,#0x14]
0002e8  210f              MOVS     r1,#0xf
0002ea  f04f30ff          MOV      r0,#0xffffffff
0002ee  f7fffffe          BL       NVIC_SetPriority
0002f2  2000              MOVS     r0,#0
0002f4  f04f21e0          MOV      r1,#0xe000e000
0002f8  6188              STR      r0,[r1,#0x18]
0002fa  2007              MOVS     r0,#7
0002fc  6108              STR      r0,[r1,#0x10]
0002fe  bf00              NOP      
                  |L4.768|
;;;80     }
000300  b036              ADD      sp,sp,#0xd8
000302  bd10              POP      {r4,pc}
;;;81     /* End Function:_RMP_Low_Level_Init ******************************************/
                          ENDP

                  |L4.772|
                          DCD      0x40023840
                  |L4.776|
                          DCD      0x40007000
                  |L4.780|
00030c  0d0a2a2a          DCB      "\r\n***\r\nKernel panic - not syncing:\r\n",0
000310  2a0d0a4b
000314  65726e65
000318  6c207061
00031c  6e696320
000320  2d206e6f
000324  74207379
000328  6e63696e
00032c  673a0d0a
000330  00      
000331  00                DCB      0
000332  00                DCB      0
000333  00                DCB      0
                  |L4.820|
000334  2e2e5c2e          DCB      "..\\..\\MProkaron\\Platform\\CortexM\\platform_cmx.c",0
000338  2e5c4d50
00033c  726f6b61
000340  726f6e5c
000344  506c6174
000348  666f726d
00034c  5c436f72
000350  7465784d
000354  5c706c61
000358  74666f72
00035c  6d5f636d
000360  782e6300
                  |L4.868|
000364  202c204c          DCB      " , Line ",0
000368  696e6520
00036c  00      
00036d  00                DCB      0
00036e  00                DCB      0
00036f  00                DCB      0
                  |L4.880|
000370  0d0a00            DCB      "\r\n",0
000373  00                DCB      0
                  |L4.884|
000374  46656220          DCB      "Feb  9 2018",0
000378  20392032
00037c  30313800
                  |L4.896|
000380  202c2000          DCB      " , ",0
                  |L4.900|
000384  31393a31          DCB      "19:16:10",0
000388  363a3130
00038c  00      
00038d  00                DCB      0
00038e  00                DCB      0
00038f  00                DCB      0
                  |L4.912|
                          DCD      0xe000ef50
                  |L4.916|
                          DCD      0xe000ed14
                  |L4.920|
                          DCD      0x40023c00
                  |L4.924|
                          DCD      0x40020000
                  |L4.928|
                          DCD      0x40011000
                  |L4.932|
                          DCD      0x05fa0000

                          AREA ||i._RMP_Stack_Init||, CODE, READONLY, ALIGN=2

                  _RMP_Stack_Init PROC
;;;43     ******************************************************************************/
;;;44     void _RMP_Stack_Init(ptr_t Entry, ptr_t Stack, ptr_t Arg)
000000  620a              STR      r2,[r1,#0x20]
;;;45     {
;;;46         /* The "8" here is because we also pushed other registers to PSP */
;;;47         /* CM3:Pass the parameter */                            
;;;48         ((ptr_t*)Stack)[0+8]=Arg;       
;;;49         /* CM3:for xPSR. fill the T bit,or an INVSTATE will happen */
;;;50         ((ptr_t*)Stack)[6+8]=Entry;
000002  6388              STR      r0,[r1,#0x38]
;;;51         /* CM3:Set the process entrance */                            
;;;52         ((ptr_t*)Stack)[7+8]=0x01000200;      
000004  4b01              LDR      r3,|L5.12|
000006  63cb              STR      r3,[r1,#0x3c]
;;;53     }
000008  4770              BX       lr
;;;54     /* End Function:_RMP_Stack_Init **********************************************/
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      0x01000200

;*** Start embedded assembler ***

#line 1 "..\\..\\MProkaron\\Platform\\CortexM\\platform_cmx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_platform_cmx_c_203ac359____REV16|
#line 388 "..\\..\\..\\..\\Library\\STM32F7xx_HAL_Driver\\Core\\cmsis_armcc.h"
|__asm___14_platform_cmx_c_203ac359____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_platform_cmx_c_203ac359____REVSH|
#line 402
|__asm___14_platform_cmx_c_203ac359____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_platform_cmx_c_203ac359____RRX|
#line 587
|__asm___14_platform_cmx_c_203ac359____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
