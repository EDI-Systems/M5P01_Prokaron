


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************
    2 00000000         ;Filename    : platform_cmx_RVM.s
    3 00000000         ;Author      : pry
    4 00000000         ;Date        : 09/02/2018
    5 00000000         ;Description : The assembly part of the RMP RTOS for the
                        RVM virtual machine.
    6 00000000         ;*******************************************************
                       **********************/
    7 00000000         
    8 00000000         ;/* The ARM Cortex-M Structure *************************
                       ***********************
    9 00000000         ;R0-R7:General purpose registers that are accessible. 
   10 00000000         ;R8-R12:general purpose registers that can only be reach
                       ed by 32-bit instructions.
   11 00000000         ;R13:SP/SP_process/SP_main    Stack pointer
   12 00000000         ;R14:LR                       Link Register(used for ret
                       urning from a subfunction)
   13 00000000         ;R15:PC                       Program counter.
   14 00000000         ;IPSR                         Interrupt Program Status R
                       egister.
   15 00000000         ;APSR                         Application Program Status
                        Register.
   16 00000000         ;EPSR                         Execute Program Status Reg
                       ister.
   17 00000000         ;The above 3 registers are saved into the stack in combi
                       nation(xPSR).
   18 00000000         ;
   19 00000000         ;The ARM Cortex-M4 also include a single-accuracy FPU.
   20 00000000         ;*******************************************************
                       **********************/
   21 00000000         
   22 00000000         ;/* Begin Header ***************************************
                       **********************/
   23 00000000                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3
   24 00000000         RMP_User_Stack
   25 00000000         User_Stack
                               SPACE            0x00000100
   26 00000100         __initial_sp
   27 00000100         
   28 00000100         RMP_Int_Stack
   29 00000100         Int_Stack
                               SPACE            0x00000400
   30 00000500         
   31 00000500         ;The align is "(2^3)/8=1(Byte)." In fact it does not tak
                       e effect.            
   32 00000500                 AREA             RESET,CODE,READONLY,ALIGN=3
   33 00000000         
   34 00000000                 THUMB
   35 00000000                 REQUIRE8
   36 00000000                 PRESERVE8
   37 00000000         ;/* End Header *****************************************
                       **********************/
   38 00000000         
   39 00000000         ;/* Begin Exports **************************************
                       **********************/
   40 00000000         ;The initial stack pointer position
   41 00000000                 EXPORT           __initial_sp



ARM Macro Assembler    Page 2 


   42 00000000         ;The user stack pointer position
   43 00000000                 EXPORT           RMP_User_Stack
   44 00000000         ;The interrupt stack pointer position
   45 00000000                 EXPORT           RMP_Int_Stack
   46 00000000         ;The entry stub
   47 00000000                 EXPORT           _RMP_Entry
   48 00000000         ;Get the MSB                              
   49 00000000                 EXPORT           RMP_MSB_Get
   50 00000000         ;Start the first thread
   51 00000000                 EXPORT           _RMP_Start
   52 00000000         ;The hypercall maker
   53 00000000                 EXPORT           _RMP_Hypercall
   54 00000000         ;The PendSV trigger
   55 00000000                 EXPORT           _RMP_Yield
   56 00000000         ;The interrupt handling routine receive endpoint 
   57 00000000                 EXPORT           _RMP_Int_Rcv
   58 00000000         ;The atomic AND operation
   59 00000000                 EXPORT           _RMP_Fetch_And
   60 00000000         ;/* End Exports ****************************************
                       **********************/
   61 00000000         
   62 00000000         ;/* Begin Imports **************************************
                       **********************/
   63 00000000         ;The real task switch handling function
   64 00000000                 IMPORT           _RMP_Get_High_Rdy
   65 00000000         ;The real systick handler function
   66 00000000                 IMPORT           _RMP_Tick_Handler
   67 00000000         ;The PID of the current thread                     
   68 00000000                 IMPORT           RMP_Cur_Thd
   69 00000000         ;The stack address of current thread
   70 00000000                 IMPORT           RMP_Cur_SP
   71 00000000         ;Save and load extra contexts, such as FPU, peripherals 
                       and MPU
   72 00000000                 IMPORT           RMP_Save_Ctx
   73 00000000                 IMPORT           RMP_Load_Ctx
   74 00000000         ;The RVM image header
   75 00000000                 IMPORT           RMP_Image
   76 00000000         ;The real entry
   77 00000000                 IMPORT           __main
   78 00000000         ;The context switch interrupt flag
   79 00000000                 IMPORT           RMP_Ctxsw
   80 00000000         ;/* End Imports ****************************************
                       **********************/
   81 00000000         
   82 00000000         ;/* Begin Global Variable ******************************
                       **********************/
   83 00000000 00000000        DCD              RMP_Image
   84 00000004         ;/* End Global Variable ********************************
                       **********************/
   85 00000004         
   86 00000004         ;/* Begin Function:_RMP_Entry **************************
                       ***********************
   87 00000004         ;Description    : The entry of the OS, when running in a
                       n virtualized environment.
   88 00000004         ;Input          : None.
   89 00000004         ;Output         : None.
   90 00000004         ;Return         : None.   
   91 00000004         ;Register Usage : None. 
   92 00000004         ;*******************************************************



ARM Macro Assembler    Page 3 


                       **********************/
   93 00000004         _RMP_Entry
   94 00000004 481E            LDR              R0, =__main
   95 00000006 4700            BX               R0
   96 00000008         ;/* End Function:_RMP_Entry ****************************
                       **********************/
   97 00000008         
   98 00000008         ;/* Begin Function:_RMP_Fetch_Or ***********************
                       ***********************
   99 00000008         ;Description : The fetch-and-logic-or atomic instruction
                       . Logic OR the pointer
  100 00000008         ;              value with the operand, and return the va
                       lue before logic OR.
  101 00000008         ;Input       : ptr_t* Ptr - The pointer to the data.
  102 00000008         ;              ptr_t Operand - The number to logic OR wi
                       th the destination.
  103 00000008         ;Output      : ptr_t* Ptr - The pointer to the data.
  104 00000008         ;Return      : ptr_t - The value before the OR operation
                       .
  105 00000008         ;*******************************************************
                       **********************/
  106 00000008         _RMP_Fetch_And
  107 00000008 B410            PUSH             {R4}
  108 0000000A         _RMP_Fetch_And_Fail
  109 0000000A E850 2F00       LDREX            R2,[R0]     ; Load exclusive
  110 0000000E EA02 0301       AND              R3,R2,R1    ; OR operation
  111 00000012 E840 3400       STREX            R4,R3,[R0]  ; Store exclusive
  112 00000016 2C00            CMP              R4,#0x00    ; See if we succeed
                                                            ed
  113 00000018 D1F7            BNE              _RMP_Fetch_And_Fail ; Go back i
                                                            f we fail
  114 0000001A 4610            MOV              R0,R2
  115 0000001C BC10            POP              {R4}
  116 0000001E 4770            BX               LR
  117 00000020         ;/* End Function:_RMP_Fetch_Or *************************
                       **********************/
  118 00000020         
  119 00000020         ;/* Begin Function:RMP_MSB_Get *************************
                       ***********************
  120 00000020         ;Description    : Get the MSB of the word.
  121 00000020         ;Input          : ptr_t Val - The value.
  122 00000020         ;Output         : None.
  123 00000020         ;Return         : ptr_t - The MSB position.   
  124 00000020         ;Register Usage : None. 
  125 00000020         ;*******************************************************
                       **********************/
  126 00000020         RMP_MSB_Get
  127 00000020 FAB0 F180       CLZ              R1,R0
  128 00000024 F04F 001F       MOV              R0,#31
  129 00000028 EBA0 0001       SUB              R0,R1
  130 0000002C 4770            BX               LR
  131 0000002E         ;/* End Function:RMP_MSB_Get ***************************
                       **********************/
  132 0000002E         
  133 0000002E         ;/* Begin Function:_RMP_Hypercall **********************
                       ***********************
  134 0000002E         ;Description    : The stub to make a hypercall. This is 
                       actually a RME system call(asnd).
  135 0000002E         ;Input          : None.



ARM Macro Assembler    Page 4 


  136 0000002E         ;Output         : None.
  137 0000002E         ;Return         : None.   
  138 0000002E         ;Register Usage : None. 
  139 0000002E         ;*******************************************************
                       **********************/
  140 0000002E         _RMP_Hypercall
  141 0000002E B430            PUSH             {R4-R5}     ; Manual clobbering
                                                            
  142 00000030 F44F 3400       MOV              R4,#0x20000 ; Asynchronous send
                                                            
  143 00000034 F04F 0500       MOV              R5,#0       ; To capability num
                                                            ber 0.
  144 00000038         
  145 00000038 DF00            SVC              #0x00       ; System call
  146 0000003A F3BF 8F6F       ISB                          ; Instruction barri
                                                            er - wait for instr
                                                            uction to complete.
                                                            
  147 0000003E         
  148 0000003E BC30            POP              {R4-R5}     ; Manual recovering
                                                            
  149 00000040 4770            BX               LR          ; Return from the c
                                                            all
  150 00000042         
  151 00000042 E7FE            B                .           ; Shouldn't reach h
                                                            ere.
  152 00000044         ;/* End Function:_RMP_Hypercall ************************
                       **********************/
  153 00000044         
  154 00000044         ;/* Begin Function:_RMP_Yield **************************
                       ***********************
  155 00000044         ;Description : Trigger a yield to another thread. This w
                       ill actually send a interrupt
  156 00000044         ;              to the interrupt thread.
  157 00000044         ;Input       : None.
  158 00000044         ;Output      : None.                                    
                         
  159 00000044         ;*******************************************************
                       **********************/
  160 00000044         _RMP_Yield
  161 00000044 B430            PUSH             {R4-R5}     ; Manual clobbering
                                                            
  162 00000046 4C0F            LDR              R4,=RMP_Ctxsw ; Set the context
                                                             switch flag 
  163 00000048 F04F 0501       MOV              R5,#0x01    ; Flag & capability
                                                             number
  164 0000004C 6025            STR              R5,[R4]
  165 0000004E F44F 3400       MOV              R4,#0x20000 ; Asynchronous send
                                                            
  166 00000052         
  167 00000052 DF00            SVC              #0x00       ; System call
  168 00000054 F3BF 8F6F       ISB                          ; Instruction barri
                                                            er - wait for instr
                                                            uction to complete.
                                                            
  169 00000058         
  170 00000058 BC30            POP              {R4-R5}     ; Manual recovering
                                                            
  171 0000005A 4770            BX               LR          ; Return from the c



ARM Macro Assembler    Page 5 


                                                            all                
                                                                               
                                                                      
  172 0000005C         ;/* End Function:_RMP_Yield ****************************
                       **********************/
  173 0000005C         
  174 0000005C         ;/* Begin Function:_RMP_Int_Rcv ************************
                       ***********************
  175 0000005C         ;Description : Cause the interrupt handler routine to wa
                       it on the interrupt endpoint.
  176 0000005C         ;Input       : None.
  177 0000005C         ;Output      : None.                                    
                         
  178 0000005C         ;*******************************************************
                       **********************/
  179 0000005C         _RMP_Int_Rcv
  180 0000005C B430            PUSH             {R4-R5}     ; Manual clobbering
                                                            
  181 0000005E F44F 3440       MOV              R4,#0x30000 ; Asynchronous rece
                                                            ive
  182 00000062 F04F 0501       MOV              R5,#1       ; From capability n
                                                            umber 1.
  183 00000066         
  184 00000066 DF00            SVC              #0x00       ; System call
  185 00000068 F3BF 8F6F       ISB                          ; Instruction barri
                                                            er - wait for instr
                                                            uction to complete.
                                                            
  186 0000006C         
  187 0000006C BC30            POP              {R4-R5}     ; Manual recovering
                                                            
  188 0000006E 4770            BX               LR          ; Return from the c
                                                            all                
                                                                               
                                                                      
  189 00000070         ;/* End Function:_RMP_Yield ****************************
                       **********************/
  190 00000070         
  191 00000070         ;/* Begin Function:_RMP_Start **************************
                       ***********************
  192 00000070         ;Description : Jump to the user function and will never 
                       return from it.
  193 00000070         ;Input       : None.
  194 00000070         ;Output      : None.                                    
                         
  195 00000070         ;*******************************************************
                       **********************/
  196 00000070         _RMP_Start
  197 00000070         ;Should never reach here
  198 00000070 F1A1 0110       SUB              R1,#16      ; This is how we pu
                                                            sh our registers so
                                                             move forward
  199 00000074 468D            MOV              SP,R1       ; Set the stack poi
                                                            nter
  200 00000076         
  201 00000076 F3BF 8F4F       DSB                          ; Data and instruct
                                                            ion barrier
  202 0000007A F3BF 8F6F       ISB
  203 0000007E         



ARM Macro Assembler    Page 6 


  204 0000007E 4780            BLX              R0          ; Branch to our tar
                                                            get
  205 00000080         ;/* End Function:_RMP_Start ****************************
                       **********************/
  206 00000080         
  207 00000080                 END
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M7.fp.dp --apcs=
interwork --depend=.\debug\output\platform_cmx_rvm_asm.d -o.\debug\output\platf
orm_cmx_rvm_asm.o -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-S
TM32F767IGT6-RVM\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CM
SIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Dr
ivers\CMSIS\Device\ST\STM32F7xx\Include --predefine="__MICROLIB SETA 1" --prede
fine="__UVISION_VERSION SETA 520" --predefine="_RTE_ SETA 1" --predefine="STM32
F767xx SETA 1" --list=.\debug\listings\platform_cmx_rvm_asm.lst ..\..\MProkaron
\Platform\CortexM_RVM\platform_cmx_RVM_asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Int_Stack 00000100

Symbol: Int_Stack
   Definitions
      At line 29 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
   Uses
      None
Comment: Int_Stack unused
RMP_Int_Stack 00000100

Symbol: RMP_Int_Stack
   Definitions
      At line 28 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
   Uses
      At line 45 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
Comment: RMP_Int_Stack used once
RMP_User_Stack 00000000

Symbol: RMP_User_Stack
   Definitions
      At line 24 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
   Uses
      At line 43 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
Comment: RMP_User_Stack used once
STACK 00000000

Symbol: STACK
   Definitions
      At line 23 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
   Uses
      None
Comment: STACK unused
User_Stack 00000000

Symbol: User_Stack
   Definitions
      At line 25 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
   Uses
      None
Comment: User_Stack unused
__initial_sp 00000100

Symbol: __initial_sp
   Definitions
      At line 26 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
   Uses
      At line 41 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
Comment: __initial_sp used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 32 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
   Uses
      None
Comment: RESET unused
RMP_MSB_Get 00000020

Symbol: RMP_MSB_Get
   Definitions
      At line 126 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM
_asm.s
   Uses
      At line 49 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
Comment: RMP_MSB_Get used once
_RMP_Entry 00000004

Symbol: _RMP_Entry
   Definitions
      At line 93 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
   Uses
      At line 47 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
Comment: _RMP_Entry used once
_RMP_Fetch_And 00000008

Symbol: _RMP_Fetch_And
   Definitions
      At line 106 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM
_asm.s
   Uses
      At line 59 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
Comment: _RMP_Fetch_And used once
_RMP_Fetch_And_Fail 0000000A

Symbol: _RMP_Fetch_And_Fail
   Definitions
      At line 108 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM
_asm.s
   Uses
      At line 113 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM
_asm.s
Comment: _RMP_Fetch_And_Fail used once
_RMP_Hypercall 0000002E

Symbol: _RMP_Hypercall
   Definitions
      At line 140 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM
_asm.s
   Uses
      At line 53 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
Comment: _RMP_Hypercall used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

_RMP_Int_Rcv 0000005C

Symbol: _RMP_Int_Rcv
   Definitions
      At line 179 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM
_asm.s
   Uses
      At line 57 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
Comment: _RMP_Int_Rcv used once
_RMP_Start 00000070

Symbol: _RMP_Start
   Definitions
      At line 196 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM
_asm.s
   Uses
      At line 51 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
Comment: _RMP_Start used once
_RMP_Yield 00000044

Symbol: _RMP_Yield
   Definitions
      At line 160 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM
_asm.s
   Uses
      At line 55 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
Comment: _RMP_Yield used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

RMP_Ctxsw 00000000

Symbol: RMP_Ctxsw
   Definitions
      At line 79 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
   Uses
      At line 162 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM
_asm.s
Comment: RMP_Ctxsw used once
RMP_Cur_SP 00000000

Symbol: RMP_Cur_SP
   Definitions
      At line 70 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
   Uses
      None
Comment: RMP_Cur_SP unused
RMP_Cur_Thd 00000000

Symbol: RMP_Cur_Thd
   Definitions
      At line 68 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
   Uses
      None
Comment: RMP_Cur_Thd unused
RMP_Image 00000000

Symbol: RMP_Image
   Definitions
      At line 75 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
   Uses
      At line 83 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
Comment: RMP_Image used once
RMP_Load_Ctx 00000000

Symbol: RMP_Load_Ctx
   Definitions
      At line 73 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
   Uses
      None
Comment: RMP_Load_Ctx unused
RMP_Save_Ctx 00000000

Symbol: RMP_Save_Ctx
   Definitions
      At line 72 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
   Uses
      None
Comment: RMP_Save_Ctx unused
_RMP_Get_High_Rdy 00000000

Symbol: _RMP_Get_High_Rdy



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 64 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
   Uses
      None
Comment: _RMP_Get_High_Rdy unused
_RMP_Tick_Handler 00000000

Symbol: _RMP_Tick_Handler
   Definitions
      At line 66 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
   Uses
      None
Comment: _RMP_Tick_Handler unused
__main 00000000

Symbol: __main
   Definitions
      At line 77 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
   Uses
      At line 94 in file ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM_
asm.s
Comment: __main used once
9 symbols
361 symbols in table
