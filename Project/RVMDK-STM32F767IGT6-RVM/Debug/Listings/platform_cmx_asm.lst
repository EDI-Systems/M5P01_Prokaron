


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************
    2 00000000         ;Filename    : platform_stm32.s
    3 00000000         ;Author      : pry
    4 00000000         ;Date        : 10/04/2012
    5 00000000         ;Description : The assembly part of the RMP RTOS.
    6 00000000         ;*******************************************************
                       **********************/
    7 00000000         
    8 00000000         ;/* The ARM Cortex-M Structure *************************
                       ***********************
    9 00000000         ;R0-R7:General purpose registers that are accessible. 
   10 00000000         ;R8-R12:general purpose registers that can only be reach
                       ed by 32-bit instructions.
   11 00000000         ;R13:SP/SP_process/SP_main    Stack pointer
   12 00000000         ;R14:LR                       Link Register(used for ret
                       urning from a subfunction)
   13 00000000         ;R15:PC                       Program counter.
   14 00000000         ;IPSR                         Interrupt Program Status R
                       egister.
   15 00000000         ;APSR                         Application Program Status
                        Register.
   16 00000000         ;EPSR                         Execute Program Status Reg
                       ister.
   17 00000000         ;The above 3 registers are saved into the stack in combi
                       nation(xPSR).
   18 00000000         ;
   19 00000000         ;The ARM Cortex-M4 also include a single-accuracy FPU.
   20 00000000         ;*******************************************************
                       **********************/
   21 00000000         
   22 00000000         ;/* Begin Header ***************************************
                       **********************/
   23 00000000         ;The align is "(2^3)/8=1(Byte)." In fact it does not tak
                       e effect.            
   24 00000000                 AREA             ARCH,CODE,READONLY,ALIGN=3
   25 00000000         
   26 00000000                 THUMB
   27 00000000                 REQUIRE8
   28 00000000                 PRESERVE8
   29 00000000         ;/* End Header *****************************************
                       **********************/
   30 00000000         
   31 00000000         ;/* Begin Exports **************************************
                       **********************/
   32 00000000         ;Disable all interrupts
   33 00000000                 EXPORT           RMP_Disable_Int
   34 00000000         ;Enable all interrupts            
   35 00000000                 EXPORT           RMP_Enable_Int
   36 00000000         ;Get the MSB                              
   37 00000000                 EXPORT           RMP_MSB_Get
   38 00000000         ;Start the first thread
   39 00000000                 EXPORT           _RMP_Start
   40 00000000         ;The PendSV trigger
   41 00000000                 EXPORT           _RMP_Yield
   42 00000000         ;The system pending service routine              
   43 00000000                 EXPORT           PendSV_Handler
   44 00000000         ;The systick timer routine              
   45 00000000                 EXPORT           SysTick_Handler



ARM Macro Assembler    Page 2 


   46 00000000         ;/* End Exports ****************************************
                       **********************/
   47 00000000         
   48 00000000         ;/* Begin Imports **************************************
                       **********************/
   49 00000000         ;The real task switch handling function
   50 00000000                 IMPORT           _RMP_Get_High_Rdy
   51 00000000         ;The real systick handler function
   52 00000000                 IMPORT           _RMP_Tick_Handler
   53 00000000         ;The PID of the current thread                     
   54 00000000                 IMPORT           RMP_Cur_Thd
   55 00000000         ;The stack address of current thread
   56 00000000                 IMPORT           RMP_Cur_SP
   57 00000000         ;Save and load extra contexts, such as FPU, peripherals 
                       and MPU
   58 00000000                 IMPORT           RMP_Save_Ctx
   59 00000000                 IMPORT           RMP_Load_Ctx
   60 00000000         ;/* End Imports ****************************************
                       **********************/
   61 00000000         
   62 00000000         ;/* Begin Function:RMP_Disable_Int *********************
                       ***********************
   63 00000000         ;Description    : The function for disabling all interru
                       pts. Does not allow nesting.
   64 00000000         ;Input          : None.
   65 00000000         ;Output         : None.    
   66 00000000         ;Register Usage : None.                                 
                        
   67 00000000         ;*******************************************************
                       **********************/    
   68 00000000         RMP_Disable_Int
   69 00000000         ;Disable all interrupts (I is primask,F is Faultmask.)
   70 00000000 B672            CPSID            I
   71 00000002 4770            BX               LR
   72 00000004         ;/* End Function:RMP_Disable_Int ***********************
                       **********************/
   73 00000004         
   74 00000004         ;/* Begin Function:RMP_Enable_Int **********************
                       ***********************
   75 00000004         ;Description    : The function for enabling all interrup
                       ts. Does not allow nesting.
   76 00000004         ;Input          : None.
   77 00000004         ;Output         : None.    
   78 00000004         ;Register Usage : None.                                 
                        
   79 00000004         ;*******************************************************
                       **********************/
   80 00000004         RMP_Enable_Int
   81 00000004         ;Enable all interrupts.
   82 00000004 B662            CPSIE            I
   83 00000006 4770            BX               LR
   84 00000008         ;/* End Function:RMP_Enable_Int ************************
                       **********************/
   85 00000008         
   86 00000008         ;/* Begin Function:RMP_MSB_Get *************************
                       ***********************
   87 00000008         ;Description    : Get the MSB of the word.
   88 00000008         ;Input          : ptr_t Val - The value.
   89 00000008         ;Output         : None.



ARM Macro Assembler    Page 3 


   90 00000008         ;Return         : ptr_t - The MSB position.   
   91 00000008         ;Register Usage : None. 
   92 00000008         ;*******************************************************
                       **********************/
   93 00000008         RMP_MSB_Get
   94 00000008 FAB0 F180       CLZ              R1,R0
   95 0000000C F04F 001F       MOV              R0,#31
   96 00000010 EBA0 0001       SUB              R0,R1
   97 00000014 4770            BX               LR
   98 00000016         ;/* End Function:RMP_MSB_Get ***************************
                       **********************/
   99 00000016         
  100 00000016         ;/* Begin Function:_RMP_Yield **************************
                       ***********************
  101 00000016         ;Description : Trigger a yield to another thread.
  102 00000016         ;Input       : None.
  103 00000016         ;Output      : None.                                    
                         
  104 00000016         ;*******************************************************
                       **********************/
  105 00000016         _RMP_Yield
  106 00000016 B403            PUSH             {R0-R1}
  107 00000018         
  108 00000018         
  109 00000018 4818            LDR              R0,=0xE000ED04 ;The NVIC_INT_CT
                                                            RL register
  110 0000001A         
  111 0000001A F04F 5180       LDR              R1,=0x10000000 ;Trigger the Pen
                                                            dSV          
  112 0000001E 6001            STR              R1,[R0]
  113 00000020         
  114 00000020 F3BF 8F4F       DSB                          ;Data and instructi
                                                            on barrier
  115 00000024 F3BF 8F6F       ISB
  116 00000028         
  117 00000028 BC03            POP              {R0-R1}
  118 0000002A 4770            BX               LR
  119 0000002C         ;/* End Function:_RMP_Yield ****************************
                       **********************/
  120 0000002C         
  121 0000002C         ;/* Begin Function:_RMP_Start **************************
                       ***********************
  122 0000002C         ;Description : Jump to the user function and will never 
                       return from it.
  123 0000002C         ;Input       : None.
  124 0000002C         ;Output      : None.                                    
                         
  125 0000002C         ;*******************************************************
                       **********************/
  126 0000002C         _RMP_Start
  127 0000002C         ;Should never reach here
  128 0000002C F1A1 0110       SUB              R1,#16      ; This is how we pu
                                                            sh our registers so
                                                             move forward
  129 00000030 F381 8809       MSR              PSP,R1      ; Set the stack poi
                                                            nter
  130 00000034 F04F 0402       MOV              R4,#0x02    ; Previleged thread
                                                             mode
  131 00000038 F384 8814       MSR              CONTROL,R4



ARM Macro Assembler    Page 4 


  132 0000003C         
  133 0000003C F3BF 8F4F       DSB                          ;Data and instructi
                                                            on barrier
  134 00000040 F3BF 8F6F       ISB
  135 00000044         
  136 00000044 4780            BLX              R0          ; Branch to our tar
                                                            get
  137 00000046 E7FE            B                .           ; Capture faults   
                                                               
  138 00000048         ;/* End Function:_RMP_Start ****************************
                       **********************/
  139 00000048         
  140 00000048         ;/* Begin Function:PendSV_Handler **********************
                       ***********************
  141 00000048         ;Description : The PendSV interrupt routine. In fact, it
                        will call a C function
  142 00000048         ;              directly. The reason why the interrupt ro
                       utine must be an assembly
  143 00000048         ;              function is that the complier may deal wi
                       th the stack in a different 
  144 00000048         ;              way when different optimization level is 
                       chosen. An assembly function
  145 00000048         ;              can make way around this problem.
  146 00000048         ;Input       : None.
  147 00000048         ;Output      : None.                                    
                         
  148 00000048         ;*******************************************************
                       **********************/
  149 00000048         PendSV_Handler
  150 00000048         ;Spill all the registers onto the user stack
  151 00000048 B500            PUSH             {LR}
  152 0000004A F3EF 8009       MRS              R0,PSP
  153 0000004E E920 0FF0       STMDB            R0!,{R4-R11}
  154 00000052         
  155 00000052         ;Save extra context
  156 00000052 F7FF FFFE       BL               RMP_Save_Ctx
  157 00000056         
  158 00000056         ;Save The SP to control block.
  159 00000056 490A            LDR              R1,=RMP_Cur_SP
  160 00000058 6008            STR              R0,[R1]
  161 0000005A         
  162 0000005A         ;Get the highest ready task.
  163 0000005A F7FF FFFE       BL               _RMP_Get_High_Rdy
  164 0000005E         
  165 0000005E         ;Load the SP.
  166 0000005E 4908            LDR              R1,=RMP_Cur_SP
  167 00000060 6808            LDR              R0,[R1]
  168 00000062         
  169 00000062         ;Load extra context
  170 00000062 F7FF FFFE       BL               RMP_Load_Ctx
  171 00000066         
  172 00000066 E8B0 0FF0       LDMIA            R0!,{R4-R11}
  173 0000006A F380 8809       MSR              PSP,R0
  174 0000006E         
  175 0000006E         ;Here the LR must be 0xFFFFFFF9(Which indicates that we 
                       are returning from
  176 0000006E         ;the interrupt routine, and when we return from it we wi
                       ll use the PSP.).     
  177 0000006E BD00            POP              {PC}



ARM Macro Assembler    Page 5 


  178 00000070         ;/* End Function:PendSV_Handler ************************
                       **********************/
  179 00000070         
  180 00000070         ;/* Begin Function:SysTick_Handler *********************
                       ***********************
  181 00000070         ;Description : The SysTick interrupt routine. In fact, i
                       t will call a C function
  182 00000070         ;              directly. The reason why the interrupt ro
                       utine must be an assembly
  183 00000070         ;              function is that the complier may deal wi
                       th the stack in a different 
  184 00000070         ;              way when different optimization level is 
                       chosen. An assembly function
  185 00000070         ;              can make way around this problem.
  186 00000070         ;Input       : None.
  187 00000070         ;Output      : None.                                    
                         
  188 00000070         ;*******************************************************
                       **********************/
  189 00000070         SysTick_Handler
  190 00000070 B500            PUSH             {LR}
  191 00000072         ;Note the system that we have entered an interrupt. We a
                       re not using tickless.
  192 00000072 F04F 0001       MOV              R0,#0x01
  193 00000076 F7FF FFFE       BL               _RMP_Tick_Handler
  194 0000007A         
  195 0000007A BD00            POP              {PC}
  196 0000007C         ;/* End Function:SysTick_Handler ***********************
                       **********************/
  197 0000007C         
  198 0000007C                 END
              E000ED04 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M7.fp.dp --apcs=
interwork --depend=.\debug\output\platform_cmx_asm.d -o.\debug\output\platform_
cmx_asm.o -IF:\Code_Library\MCU\32-Bit_MCU\STM32\M5P1_MuProkaron\Project\RVMDK-
STM32F767IGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS
\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drive
rs\CMSIS\Device\ST\STM32F7xx\Include --predefine="__MICROLIB SETA 1" --predefin
e="__UVISION_VERSION SETA 520" --predefine="_RTE_ SETA 1" --predefine="STM32F76
7xx SETA 1" --list=.\debug\listings\platform_cmx_asm.lst ..\..\MProkaron\Platfo
rm\CortexM\platform_cmx_asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARCH 00000000

Symbol: ARCH
   Definitions
      At line 24 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      None
Comment: ARCH unused
PendSV_Handler 00000048

Symbol: PendSV_Handler
   Definitions
      At line 149 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 43 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: PendSV_Handler used once
RMP_Disable_Int 00000000

Symbol: RMP_Disable_Int
   Definitions
      At line 68 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 33 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: RMP_Disable_Int used once
RMP_Enable_Int 00000004

Symbol: RMP_Enable_Int
   Definitions
      At line 80 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 35 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: RMP_Enable_Int used once
RMP_MSB_Get 00000008

Symbol: RMP_MSB_Get
   Definitions
      At line 93 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 37 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: RMP_MSB_Get used once
SysTick_Handler 00000070

Symbol: SysTick_Handler
   Definitions
      At line 189 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 45 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: SysTick_Handler used once
_RMP_Start 0000002C

Symbol: _RMP_Start
   Definitions
      At line 126 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 39 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: _RMP_Start used once
_RMP_Yield 00000016

Symbol: _RMP_Yield



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 105 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 41 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: _RMP_Yield used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

RMP_Cur_SP 00000000

Symbol: RMP_Cur_SP
   Definitions
      At line 56 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 159 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
      At line 166 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s

RMP_Cur_Thd 00000000

Symbol: RMP_Cur_Thd
   Definitions
      At line 54 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      None
Comment: RMP_Cur_Thd unused
RMP_Load_Ctx 00000000

Symbol: RMP_Load_Ctx
   Definitions
      At line 59 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 170 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: RMP_Load_Ctx used once
RMP_Save_Ctx 00000000

Symbol: RMP_Save_Ctx
   Definitions
      At line 58 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 156 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: RMP_Save_Ctx used once
_RMP_Get_High_Rdy 00000000

Symbol: _RMP_Get_High_Rdy
   Definitions
      At line 50 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 163 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: _RMP_Get_High_Rdy used once
_RMP_Tick_Handler 00000000

Symbol: _RMP_Tick_Handler
   Definitions
      At line 52 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
   Uses
      At line 193 in file ..\..\MProkaron\Platform\CortexM\platform_cmx_asm.s
Comment: _RMP_Tick_Handler used once
6 symbols
351 symbols in table
