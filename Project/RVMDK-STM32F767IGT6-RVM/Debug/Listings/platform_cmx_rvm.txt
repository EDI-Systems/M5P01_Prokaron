; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\platform_cmx_rvm.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\platform_cmx_rvm.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Core -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6-RVM\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\platform_cmx_rvm.crf ..\..\MProkaron\Platform\CortexM_RVM\platform_cmx_RVM.c]
                          THUMB

                          AREA ||i.RMP_Disable_Int||, CODE, READONLY, ALIGN=2

                  RMP_Disable_Int PROC
;;;162    ******************************************************************************/
;;;163    void RMP_Disable_Int(void)
000000  b508              PUSH     {r3,lr}
;;;164    {
;;;165        /* Must be successful */
;;;166        RMP_ASSERT(RMP_Hypercall(RVM_HYP_DISINT,0,0,0,0)==0);
000002  bf00              NOP      
000004  2000              MOVS     r0,#0
000006  4603              MOV      r3,r0
000008  4602              MOV      r2,r0
00000a  4601              MOV      r1,r0
00000c  9000              STR      r0,[sp,#0]
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       RMP_Hypercall
000014  b908              CBNZ     r0,|L1.26|
000016  2001              MOVS     r0,#1
000018  e000              B        |L1.28|
                  |L1.26|
00001a  2000              MOVS     r0,#0
                  |L1.28|
00001c  2800              CMP      r0,#0
00001e  d11c              BNE      |L1.90|
000020  a00f              ADR      r0,|L1.96|
000022  f7fffffe          BL       RMP_Print_String
000026  a018              ADR      r0,|L1.136|
000028  f7fffffe          BL       RMP_Print_String
00002c  a024              ADR      r0,|L1.192|
00002e  f7fffffe          BL       RMP_Print_String
000032  20a6              MOVS     r0,#0xa6
000034  f7fffffe          BL       RMP_Print_Int
000038  a024              ADR      r0,|L1.204|
00003a  f7fffffe          BL       RMP_Print_String
00003e  a024              ADR      r0,|L1.208|
000040  f7fffffe          BL       RMP_Print_String
000044  a025              ADR      r0,|L1.220|
000046  f7fffffe          BL       RMP_Print_String
00004a  a025              ADR      r0,|L1.224|
00004c  f7fffffe          BL       RMP_Print_String
000050  a01e              ADR      r0,|L1.204|
000052  f7fffffe          BL       RMP_Print_String
000056  bf00              NOP      
                  |L1.88|
000058  e7fe              B        |L1.88|
                  |L1.90|
00005a  bf00              NOP      
;;;167    }
00005c  bd08              POP      {r3,pc}
;;;168    /* End Function:RMP_Disable_Int **********************************************/
                          ENDP

00005e  0000              DCW      0x0000
                  |L1.96|
000060  0d0a2a2a          DCB      "\r\n***\r\nKernel panic - not syncing:\r\n",0
000064  2a0d0a4b
000068  65726e65
00006c  6c207061
000070  6e696320
000074  2d206e6f
000078  74207379
00007c  6e63696e
000080  673a0d0a
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L1.136|
000088  2e2e5c2e          DCB      "..\\..\\MProkaron\\Platform\\CortexM_RVM\\platform_cmx_"
00008c  2e5c4d50
000090  726f6b61
000094  726f6e5c
000098  506c6174
00009c  666f726d
0000a0  5c436f72
0000a4  7465784d
0000a8  5f52564d
0000ac  5c706c61
0000b0  74666f72
0000b4  6d5f636d
0000b8  785f    
0000ba  52564d2e          DCB      "RVM.c",0
0000be  6300    
                  |L1.192|
0000c0  202c204c          DCB      " , Line ",0
0000c4  696e6520
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L1.204|
0000cc  0d0a00            DCB      "\r\n",0
0000cf  00                DCB      0
                  |L1.208|
0000d0  46656220          DCB      "Feb 22 2018",0
0000d4  32322032
0000d8  30313800
                  |L1.220|
0000dc  202c2000          DCB      " , ",0
                  |L1.224|
0000e0  31383a32          DCB      "18:21:26",0
0000e4  313a3236
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0

                          AREA ||i.RMP_Enable_Int||, CODE, READONLY, ALIGN=2

                  RMP_Enable_Int PROC
;;;149    ******************************************************************************/
;;;150    void RMP_Enable_Int(void)
000000  b508              PUSH     {r3,lr}
;;;151    {
;;;152        /* Must be successful */
;;;153        RMP_ASSERT(RMP_Hypercall(RVM_HYP_ENAINT,0,0,0,0)==0);
000002  bf00              NOP      
000004  2000              MOVS     r0,#0
000006  4603              MOV      r3,r0
000008  4602              MOV      r2,r0
00000a  4601              MOV      r1,r0
00000c  9000              STR      r0,[sp,#0]
00000e  f7fffffe          BL       RMP_Hypercall
000012  b908              CBNZ     r0,|L2.24|
000014  2001              MOVS     r0,#1
000016  e000              B        |L2.26|
                  |L2.24|
000018  2000              MOVS     r0,#0
                  |L2.26|
00001a  2800              CMP      r0,#0
00001c  d11c              BNE      |L2.88|
00001e  a00f              ADR      r0,|L2.92|
000020  f7fffffe          BL       RMP_Print_String
000024  a017              ADR      r0,|L2.132|
000026  f7fffffe          BL       RMP_Print_String
00002a  a024              ADR      r0,|L2.188|
00002c  f7fffffe          BL       RMP_Print_String
000030  2099              MOVS     r0,#0x99
000032  f7fffffe          BL       RMP_Print_Int
000036  a024              ADR      r0,|L2.200|
000038  f7fffffe          BL       RMP_Print_String
00003c  a023              ADR      r0,|L2.204|
00003e  f7fffffe          BL       RMP_Print_String
000042  a025              ADR      r0,|L2.216|
000044  f7fffffe          BL       RMP_Print_String
000048  a024              ADR      r0,|L2.220|
00004a  f7fffffe          BL       RMP_Print_String
00004e  a01e              ADR      r0,|L2.200|
000050  f7fffffe          BL       RMP_Print_String
000054  bf00              NOP      
                  |L2.86|
000056  e7fe              B        |L2.86|
                  |L2.88|
000058  bf00              NOP      
;;;154    }
00005a  bd08              POP      {r3,pc}
;;;155    /* End Function:RMP_Enable_Int ***********************************************/
                          ENDP

                  |L2.92|
00005c  0d0a2a2a          DCB      "\r\n***\r\nKernel panic - not syncing:\r\n",0
000060  2a0d0a4b
000064  65726e65
000068  6c207061
00006c  6e696320
000070  2d206e6f
000074  74207379
000078  6e63696e
00007c  673a0d0a
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L2.132|
000084  2e2e5c2e          DCB      "..\\..\\MProkaron\\Platform\\CortexM_RVM\\platform_cmx_"
000088  2e5c4d50
00008c  726f6b61
000090  726f6e5c
000094  506c6174
000098  666f726d
00009c  5c436f72
0000a0  7465784d
0000a4  5f52564d
0000a8  5c706c61
0000ac  74666f72
0000b0  6d5f636d
0000b4  785f    
0000b6  52564d2e          DCB      "RVM.c",0
0000ba  6300    
                  |L2.188|
0000bc  202c204c          DCB      " , Line ",0
0000c0  696e6520
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L2.200|
0000c8  0d0a00            DCB      "\r\n",0
0000cb  00                DCB      0
                  |L2.204|
0000cc  46656220          DCB      "Feb 22 2018",0
0000d0  32322032
0000d4  30313800
                  |L2.216|
0000d8  202c2000          DCB      " , ",0
                  |L2.220|
0000dc  31383a32          DCB      "18:21:26",0
0000e0  313a3236
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0

                          AREA ||i.RMP_Hyp_Del_Evt||, CODE, READONLY, ALIGN=1

                  RMP_Hyp_Del_Evt PROC
;;;190    ******************************************************************************/
;;;191    ret_t RMP_Hyp_Del_Evt(cnt_t Evt_ID)
000000  b538              PUSH     {r3-r5,lr}
;;;192    {
000002  4604              MOV      r4,r0
;;;193        return RMP_Hypercall(RVM_HYP_DELEVT,Evt_ID,0,0,0);
000004  2000              MOVS     r0,#0
000006  4603              MOV      r3,r0
000008  4602              MOV      r2,r0
00000a  4621              MOV      r1,r4
00000c  9000              STR      r0,[sp,#0]
00000e  2003              MOVS     r0,#3
000010  f7fffffe          BL       RMP_Hypercall
;;;194    }
000014  bd38              POP      {r3-r5,pc}
;;;195    /* End Function:RMP_Hyp_Del_Evt **********************************************/
                          ENDP


                          AREA ||i.RMP_Hyp_Reg_Evt||, CODE, READONLY, ALIGN=1

                  RMP_Hyp_Reg_Evt PROC
;;;177    ******************************************************************************/
;;;178    ret_t RMP_Hyp_Reg_Evt(ptr_t Int_Num, ptr_t VMID)
000000  b538              PUSH     {r3-r5,lr}
;;;179    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;180        return RMP_Hypercall(RVM_HYP_REGEVT,Int_Num,VMID,0,0);
000006  2000              MOVS     r0,#0
000008  4603              MOV      r3,r0
00000a  462a              MOV      r2,r5
00000c  4621              MOV      r1,r4
00000e  9000              STR      r0,[sp,#0]
000010  2002              MOVS     r0,#2
000012  f7fffffe          BL       RMP_Hypercall
;;;181    }
000016  bd38              POP      {r3-r5,pc}
;;;182    /* End Function:RMP_Hyp_Reg_Evt **********************************************/
                          ENDP


                          AREA ||i.RMP_Hypercall||, CODE, READONLY, ALIGN=2

                  RMP_Hypercall PROC
;;;126    ******************************************************************************/
;;;127    ret_t RMP_Hypercall(ptr_t Number, ptr_t Param1, ptr_t Param2, ptr_t Param3, ptr_t Param4)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;128    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8018          LDR      r8,[sp,#0x18]
;;;129        /* Pass the parameters */
;;;130        RMP_Param.Number=Number;
000010  4806              LDR      r0,|L5.44|
000012  6004              STR      r4,[r0,#0]  ; RMP_Param
;;;131        RMP_Param.Param[0]=Param1;
000014  6045              STR      r5,[r0,#4]  ; RMP_Param
;;;132        RMP_Param.Param[1]=Param2;
000016  6086              STR      r6,[r0,#8]
;;;133        RMP_Param.Param[2]=Param3;
000018  60c7              STR      r7,[r0,#0xc]
;;;134        RMP_Param.Param[3]=Param4;
00001a  f8c08010          STR      r8,[r0,#0x10]
;;;135        
;;;136        /* Do the hypercall */
;;;137        _RMP_Hypercall();
00001e  f7fffffe          BL       _RMP_Hypercall
;;;138        
;;;139        /* Return the result */
;;;140        return RMP_Param.Param[0];
000022  4802              LDR      r0,|L5.44|
000024  6840              LDR      r0,[r0,#4]  ; RMP_Param
;;;141    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;142    /* End Function:RMP_Hypercall ************************************************/
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      RMP_Param

                          AREA ||i.RMP_PendSV_Handler||, CODE, READONLY, ALIGN=2

                  RMP_PendSV_Handler PROC
;;;366    ******************************************************************************/
;;;367    void RMP_PendSV_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;368    {
;;;369        ptr_t* SP;
;;;370        
;;;371        /* Spill all the registers onto the user stack
;;;372         * MRS       R0,PSP
;;;373         * STMDB     R0!,{R4-R11,LR} */
;;;374        SP=(ptr_t*)(RMP_Regs.Reg.SP);    
000002  4827              LDR      r0,|L6.160|
000004  6804              LDR      r4,[r0,#0]  ; RMP_Regs
;;;375        *(--SP)=RMP_Regs.Reg.LR;
000006  6a41              LDR      r1,[r0,#0x24]  ; RMP_Regs
000008  1f20              SUBS     r0,r4,#4
00000a  4604              MOV      r4,r0
00000c  6001              STR      r1,[r0,#0]
;;;376        *(--SP)=RMP_Regs.Reg.R11;
00000e  4824              LDR      r0,|L6.160|
000010  6a01              LDR      r1,[r0,#0x20]  ; RMP_Regs
000012  1f20              SUBS     r0,r4,#4
000014  4604              MOV      r4,r0
000016  6001              STR      r1,[r0,#0]
;;;377        *(--SP)=RMP_Regs.Reg.R10;
000018  4821              LDR      r0,|L6.160|
00001a  69c1              LDR      r1,[r0,#0x1c]  ; RMP_Regs
00001c  1f20              SUBS     r0,r4,#4
00001e  4604              MOV      r4,r0
000020  6001              STR      r1,[r0,#0]
;;;378        *(--SP)=RMP_Regs.Reg.R9;
000022  481f              LDR      r0,|L6.160|
000024  6981              LDR      r1,[r0,#0x18]  ; RMP_Regs
000026  1f20              SUBS     r0,r4,#4
000028  4604              MOV      r4,r0
00002a  6001              STR      r1,[r0,#0]
;;;379        *(--SP)=RMP_Regs.Reg.R8;
00002c  481c              LDR      r0,|L6.160|
00002e  6941              LDR      r1,[r0,#0x14]  ; RMP_Regs
000030  1f20              SUBS     r0,r4,#4
000032  4604              MOV      r4,r0
000034  6001              STR      r1,[r0,#0]
;;;380        *(--SP)=RMP_Regs.Reg.R7;
000036  481a              LDR      r0,|L6.160|
000038  6901              LDR      r1,[r0,#0x10]  ; RMP_Regs
00003a  1f20              SUBS     r0,r4,#4
00003c  4604              MOV      r4,r0
00003e  6001              STR      r1,[r0,#0]
;;;381        *(--SP)=RMP_Regs.Reg.R6;
000040  4817              LDR      r0,|L6.160|
000042  68c1              LDR      r1,[r0,#0xc]  ; RMP_Regs
000044  1f20              SUBS     r0,r4,#4
000046  4604              MOV      r4,r0
000048  6001              STR      r1,[r0,#0]
;;;382        *(--SP)=RMP_Regs.Reg.R5;
00004a  4815              LDR      r0,|L6.160|
00004c  6881              LDR      r1,[r0,#8]  ; RMP_Regs
00004e  1f20              SUBS     r0,r4,#4
000050  4604              MOV      r4,r0
000052  6001              STR      r1,[r0,#0]
;;;383        *(--SP)=RMP_Regs.Reg.R4;
000054  4812              LDR      r0,|L6.160|
000056  6841              LDR      r1,[r0,#4]  ; RMP_Regs
000058  1f20              SUBS     r0,r4,#4
00005a  4604              MOV      r4,r0
00005c  6001              STR      r1,[r0,#0]
;;;384        
;;;385        /* Save extra context
;;;386         * BL       RMP_Save_Ctx */
;;;387        RMP_Save_Ctx();
00005e  f7fffffe          BL       RMP_Save_Ctx
;;;388        
;;;389        /* Save the SP to control block
;;;390         * LDR       R1,=RMP_Cur_SP
;;;391         * STR       R0,[R1] */
;;;392        RMP_Cur_SP=(ptr_t)SP;
000062  4810              LDR      r0,|L6.164|
000064  6004              STR      r4,[r0,#0]  ; RMP_Cur_SP
;;;393                    
;;;394        /* Get the highest ready task
;;;395         * BL        _RMP_Get_High_Rdy */
;;;396        _RMP_Get_High_Rdy();
000066  f7fffffe          BL       _RMP_Get_High_Rdy
;;;397        
;;;398        /* Load the SP
;;;399         * LDR       R1,=RMP_Cur_SP
;;;400         * LDR       R0,[R1] */
;;;401        SP=(ptr_t*)RMP_Cur_SP;
00006a  480e              LDR      r0,|L6.164|
00006c  6804              LDR      r4,[r0,#0]  ; RMP_Cur_SP
;;;402        
;;;403        /* Load extra context
;;;404         * BL        RMP_Load_Ctx */
;;;405        RMP_Load_Ctx();
00006e  f7fffffe          BL       RMP_Load_Ctx
;;;406         
;;;407        /* Load registers from user stack
;;;408         * LDMIA     R0!,{R4-R11,LR}
;;;409         * MSR       PSP,R0 */
;;;410        RMP_Regs.Reg.R4=*(SP++);
000072  cc01              LDM      r4!,{r0}
000074  490a              LDR      r1,|L6.160|
000076  6048              STR      r0,[r1,#4]  ; RMP_Regs
;;;411        RMP_Regs.Reg.R5=*(SP++);
000078  cc01              LDM      r4!,{r0}
00007a  6088              STR      r0,[r1,#8]  ; RMP_Regs
;;;412        RMP_Regs.Reg.R6=*(SP++);
00007c  cc01              LDM      r4!,{r0}
00007e  60c8              STR      r0,[r1,#0xc]  ; RMP_Regs
;;;413        RMP_Regs.Reg.R7=*(SP++);
000080  cc01              LDM      r4!,{r0}
000082  6108              STR      r0,[r1,#0x10]  ; RMP_Regs
;;;414        RMP_Regs.Reg.R8=*(SP++);
000084  cc01              LDM      r4!,{r0}
000086  6148              STR      r0,[r1,#0x14]  ; RMP_Regs
;;;415        RMP_Regs.Reg.R9=*(SP++);
000088  cc01              LDM      r4!,{r0}
00008a  6188              STR      r0,[r1,#0x18]  ; RMP_Regs
;;;416        RMP_Regs.Reg.R10=*(SP++);
00008c  cc01              LDM      r4!,{r0}
00008e  61c8              STR      r0,[r1,#0x1c]  ; RMP_Regs
;;;417        RMP_Regs.Reg.R11=*(SP++);
000090  cc01              LDM      r4!,{r0}
000092  6208              STR      r0,[r1,#0x20]  ; RMP_Regs
;;;418        RMP_Regs.Reg.LR=*(SP++);
000094  cc01              LDM      r4!,{r0}
000096  6248              STR      r0,[r1,#0x24]  ; RMP_Regs
;;;419        RMP_Regs.Reg.SP=(ptr_t)SP;
000098  4608              MOV      r0,r1
00009a  6004              STR      r4,[r0,#0]  ; RMP_Regs
;;;420                    
;;;421        /* Here the LR will indicate whether we are using FPU
;;;422         * BX        LR */
;;;423        return;
;;;424    }
00009c  bd10              POP      {r4,pc}
;;;425    /* End Function:RMP_PendSV_Handler *******************************************/
                          ENDP

00009e  0000              DCW      0x0000
                  |L6.160|
                          DCD      RMP_Regs
                  |L6.164|
                          DCD      RMP_Cur_SP

                          AREA ||i.RMP_Putchar||, CODE, READONLY, ALIGN=2

                  RMP_Putchar PROC
;;;99     ******************************************************************************/
;;;100    void RMP_Putchar(char Char)
000000  b510              PUSH     {r4,lr}
;;;101    {
000002  4604              MOV      r4,r0
;;;102        /* If we are not changing lines, and buffer not full */
;;;103        if((Char!='\r')&&(Char!='\n')&&(Char!='\0')&&(RMP_Console_Ptr<RMP_KERNEL_DEBUG_MAX_STR-1))
000004  2c0d              CMP      r4,#0xd
000006  d00f              BEQ      |L7.40|
000008  2c0a              CMP      r4,#0xa
00000a  d00d              BEQ      |L7.40|
00000c  b164              CBZ      r4,|L7.40|
00000e  480d              LDR      r0,|L7.68|
000010  6800              LDR      r0,[r0,#0]  ; RMP_Console_Ptr
000012  287f              CMP      r0,#0x7f
000014  d208              BCS      |L7.40|
;;;104        {
;;;105            RMP_Console[RMP_Console_Ptr++]=Char;
000016  480b              LDR      r0,|L7.68|
000018  6801              LDR      r1,[r0,#0]  ; RMP_Console_Ptr
00001a  6800              LDR      r0,[r0,#0]  ; RMP_Console_Ptr
00001c  1c40              ADDS     r0,r0,#1
00001e  4a09              LDR      r2,|L7.68|
000020  6010              STR      r0,[r2,#0]  ; RMP_Console_Ptr
000022  4809              LDR      r0,|L7.72|
000024  5444              STRB     r4,[r0,r1]
000026  e00c              B        |L7.66|
                  |L7.40|
;;;106        }
;;;107        else
;;;108        {
;;;109            RMP_Lock_Sched();
000028  f7fffffe          BL       RMP_Lock_Sched
;;;110            RMP_Console[RMP_Console_Ptr]='\0';
00002c  2000              MOVS     r0,#0
00002e  4906              LDR      r1,|L7.72|
000030  4a04              LDR      r2,|L7.68|
000032  6812              LDR      r2,[r2,#0]  ; RMP_Console_Ptr
000034  5488              STRB     r0,[r1,r2]
;;;111            RMP_Console_Ptr=0;
000036  4903              LDR      r1,|L7.68|
000038  6008              STR      r0,[r1,#0]  ; RMP_Console_Ptr
;;;112            RVM_Hyp_Print();
00003a  f7fffffe          BL       RVM_Hyp_Print
;;;113            RMP_Unlock_Sched();
00003e  f7fffffe          BL       RMP_Unlock_Sched
                  |L7.66|
;;;114        }
;;;115    }
000042  bd10              POP      {r4,pc}
;;;116    /* End Function:RMP_Putchar **************************************************/
                          ENDP

                  |L7.68|
                          DCD      RMP_Console_Ptr
                  |L7.72|
                          DCD      RMP_Console

                          AREA ||i.RMP_SysTick_Handler||, CODE, READONLY, ALIGN=1

                  RMP_SysTick_Handler PROC
;;;432    ******************************************************************************/
;;;433    void RMP_SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;434    {
;;;435        /* PUSH      {LR} */
;;;436        /* Note the system that we have entered an interrupt. We are not using tickless here */
;;;437        /* MOV       R0,#0x01 */
;;;438        /* BL        _RMP_Tick_Handler */
;;;439        _RMP_Tick_Handler(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       _RMP_Tick_Handler
;;;440        /* POP       {PC} */
;;;441    }
000008  bd10              POP      {r4,pc}
;;;442    /* End Function:RMP_SysTick_Handler ******************************************/
                          ENDP


                          AREA ||i.RVM_Hyp_Print||, CODE, READONLY, ALIGN=1

                  RVM_Hyp_Print PROC
;;;280    ******************************************************************************/
;;;281    ret_t RVM_Hyp_Print(void)
000000  b508              PUSH     {r3,lr}
;;;282    {
;;;283        return RMP_Hypercall(RVM_HYP_PRINT,0,0,0,0);
000002  2000              MOVS     r0,#0
000004  4603              MOV      r3,r0
000006  4602              MOV      r2,r0
000008  4601              MOV      r1,r0
00000a  9000              STR      r0,[sp,#0]
00000c  2009              MOVS     r0,#9
00000e  f7fffffe          BL       RMP_Hypercall
;;;284    }
000012  bd08              POP      {r3,pc}
;;;285    /* End Function:RVM_Hyp_Print ************************************************/
                          ENDP


                          AREA ||i.RVM_Hyp_Query||, CODE, READONLY, ALIGN=2

                  RVM_Hyp_Query PROC
;;;239    ******************************************************************************/
;;;240    ret_t RVM_Hyp_Query(s8* Name)
000000  b570              PUSH     {r4-r6,lr}
;;;241    {
000002  4605              MOV      r5,r0
;;;242        cnt_t Count;
;;;243        s8* Name_Array;
;;;244        
;;;245        /* Pass the parameters */
;;;246        RMP_Param.Number=RVM_HYP_SENDEVT;
000004  2005              MOVS     r0,#5
000006  4909              LDR      r1,|L10.44|
000008  6008              STR      r0,[r1,#0]  ; RMP_Param
;;;247        Name_Array=(s8*)(RMP_Param.Param);
00000a  1d0e              ADDS     r6,r1,#4
;;;248        for(Count=0;Count<16;Count++)
00000c  2400              MOVS     r4,#0
00000e  e005              B        |L10.28|
                  |L10.16|
;;;249        {
;;;250            if(Name[Count]=='\0')
000010  5d28              LDRB     r0,[r5,r4]
000012  b900              CBNZ     r0,|L10.22|
;;;251                break;
000014  e004              B        |L10.32|
                  |L10.22|
;;;252            Name_Array[Count]=Name[Count];
000016  5d28              LDRB     r0,[r5,r4]
000018  5530              STRB     r0,[r6,r4]
00001a  1c64              ADDS     r4,r4,#1              ;248
                  |L10.28|
00001c  2c10              CMP      r4,#0x10              ;248
00001e  dbf7              BLT      |L10.16|
                  |L10.32|
000020  bf00              NOP                            ;251
;;;253        }
;;;254        
;;;255        /* Do the hypercall */
;;;256        _RMP_Hypercall();
000022  f7fffffe          BL       _RMP_Hypercall
;;;257        
;;;258        /* Return the result */
;;;259        return RMP_Param.Param[0];
000026  4801              LDR      r0,|L10.44|
000028  6840              LDR      r0,[r0,#4]  ; RMP_Param
;;;260    }
00002a  bd70              POP      {r4-r6,pc}
;;;261    /* End Function:RVM_Hyp_Query ************************************************/
                          ENDP

                  |L10.44|
                          DCD      RMP_Param

                          AREA ||i.RVM_Hyp_Query_Evt||, CODE, READONLY, ALIGN=1

                  RVM_Hyp_Query_Evt PROC
;;;227    ******************************************************************************/
;;;228    ret_t RVM_Hyp_Query_Evt(ptr_t VMID)
000000  b538              PUSH     {r3-r5,lr}
;;;229    {
000002  4604              MOV      r4,r0
;;;230        return RMP_Hypercall(RVM_HYP_QUERYEVT,VMID,0,0,0);
000004  2000              MOVS     r0,#0
000006  4603              MOV      r3,r0
000008  4602              MOV      r2,r0
00000a  4621              MOV      r1,r4
00000c  9000              STR      r0,[sp,#0]
00000e  2006              MOVS     r0,#6
000010  f7fffffe          BL       RMP_Hypercall
;;;231    }
000014  bd38              POP      {r3-r5,pc}
;;;232    /* End Function:RVM_Hyp_Query_Evt ********************************************/
                          ENDP


                          AREA ||i.RVM_Hyp_Send_Evt||, CODE, READONLY, ALIGN=1

                  RVM_Hyp_Send_Evt PROC
;;;215    ******************************************************************************/
;;;216    ret_t RVM_Hyp_Send_Evt(ptr_t Evt_ID)
000000  b538              PUSH     {r3-r5,lr}
;;;217    {
000002  4604              MOV      r4,r0
;;;218        return RMP_Hypercall(RVM_HYP_SENDEVT,Evt_ID,0,0,0);
000004  2000              MOVS     r0,#0
000006  4603              MOV      r3,r0
000008  4602              MOV      r2,r0
00000a  4621              MOV      r1,r4
00000c  9000              STR      r0,[sp,#0]
00000e  2005              MOVS     r0,#5
000010  f7fffffe          BL       RMP_Hypercall
;;;219    }
000014  bd38              POP      {r3-r5,pc}
;;;220    /* End Function:RVM_Hyp_Send_Evt *********************************************/
                          ENDP


                          AREA ||i.RVM_Hyp_Tim_Prog||, CODE, READONLY, ALIGN=1

                  RVM_Hyp_Tim_Prog PROC
;;;268    ******************************************************************************/
;;;269    ret_t RVM_Hyp_Tim_Prog(ptr_t Period)
000000  b538              PUSH     {r3-r5,lr}
;;;270    {
000002  4604              MOV      r4,r0
;;;271        return RMP_Hypercall(RVM_HYP_TIMPROG,Period,0,0,0);
000004  2000              MOVS     r0,#0
000006  4603              MOV      r3,r0
000008  4602              MOV      r2,r0
00000a  4621              MOV      r1,r4
00000c  9000              STR      r0,[sp,#0]
00000e  2008              MOVS     r0,#8
000010  f7fffffe          BL       RMP_Hypercall
;;;272    }
000014  bd38              POP      {r3-r5,pc}
;;;273    /* End Function:RVM_Hyp_Tim_Prog *********************************************/
                          ENDP


                          AREA ||i.RVM_Hyp_Wait_Evt||, CODE, READONLY, ALIGN=1

                  RVM_Hyp_Wait_Evt PROC
;;;202    ******************************************************************************/
;;;203    ret_t RVM_Hyp_Wait_Evt(void)
000000  b508              PUSH     {r3,lr}
;;;204    {
;;;205        return RMP_Hypercall(RVM_HYP_WAITEVT,0,0,0,0);
000002  2000              MOVS     r0,#0
000004  4603              MOV      r3,r0
000006  4602              MOV      r2,r0
000008  4601              MOV      r1,r0
00000a  9000              STR      r0,[sp,#0]
00000c  2004              MOVS     r0,#4
00000e  f7fffffe          BL       RMP_Hypercall
;;;206    }
000012  bd08              POP      {r3,pc}
;;;207    /* End Function:RVM_Hyp_Wait_Evt *********************************************/
                          ENDP


                          AREA ||i._RMP_Get_Int||, CODE, READONLY, ALIGN=2

                  _RMP_Get_Int PROC
;;;293    ******************************************************************************/
;;;294    ret_t _RMP_Get_Int(void)
000000  b570              PUSH     {r4-r6,lr}
;;;295    {
;;;296        cnt_t Count;
;;;297        cnt_t Pos;
;;;298        
;;;299        /* See which one is ready, and pick it */
;;;300        Pos=-1;
000002  f04f35ff          MOV      r5,#0xffffffff
;;;301        for(Count=RVM_VECT_BITMAP-1;Count>=0;Count--)
000006  2400              MOVS     r4,#0
000008  e00e              B        |L15.40|
                  |L15.10|
;;;302        {
;;;303            if(RMP_Flag.Flags[Count]==0)
00000a  4817              LDR      r0,|L15.104|
00000c  f8500024          LDR      r0,[r0,r4,LSL #2]
000010  b900              CBNZ     r0,|L15.20|
;;;304                continue;
000012  e008              B        |L15.38|
                  |L15.20|
;;;305            
;;;306            Pos=RMP_MSB_Get(RMP_Flag.Flags[Count]);
000014  4914              LDR      r1,|L15.104|
000016  f8510024          LDR      r0,[r1,r4,LSL #2]
00001a  f7fffffe          BL       RMP_MSB_Get
00001e  4605              MOV      r5,r0
;;;307            Pos+=(Count<<RMP_WORD_ORDER);
000020  eb051544          ADD      r5,r5,r4,LSL #5
;;;308            break;
000024  e002              B        |L15.44|
                  |L15.38|
000026  1e64              SUBS     r4,r4,#1              ;301
                  |L15.40|
000028  2c00              CMP      r4,#0                 ;301
00002a  daee              BGE      |L15.10|
                  |L15.44|
00002c  bf00              NOP      
;;;309        }
;;;310        
;;;311        /* Now kill the bit */
;;;312        if(Pos>=0)
00002e  2d00              CMP      r5,#0
000030  db11              BLT      |L15.86|
;;;313        {
;;;314            /* See if context switch required */
;;;315            if((Pos>1)&&(RMP_Ctxsw!=0))
000032  2d01              CMP      r5,#1
000034  dd06              BLE      |L15.68|
000036  480d              LDR      r0,|L15.108|
000038  6800              LDR      r0,[r0,#0]  ; RMP_Ctxsw
00003a  b118              CBZ      r0,|L15.68|
;;;316            {
;;;317                    RMP_Ctxsw=0;
00003c  2000              MOVS     r0,#0
00003e  490b              LDR      r1,|L15.108|
000040  6008              STR      r0,[r1,#0]  ; RMP_Ctxsw
;;;318                    Pos=1;
000042  2501              MOVS     r5,#1
                  |L15.68|
;;;319            }
;;;320            _RMP_Fetch_And(&RMP_Flag.Flags[Count],~(((ptr_t)1)<<Pos));
000044  2201              MOVS     r2,#1
000046  40aa              LSLS     r2,r2,r5
000048  43d1              MVNS     r1,r2
00004a  4a07              LDR      r2,|L15.104|
00004c  eb020084          ADD      r0,r2,r4,LSL #2
000050  f7fffffe          BL       _RMP_Fetch_And
000054  e006              B        |L15.100|
                  |L15.86|
;;;321        }
;;;322        else 
;;;323        {
;;;324            if(RMP_Ctxsw!=0)
000056  4805              LDR      r0,|L15.108|
000058  6800              LDR      r0,[r0,#0]  ; RMP_Ctxsw
00005a  b118              CBZ      r0,|L15.100|
;;;325            {
;;;326                    RMP_Ctxsw=0;
00005c  2000              MOVS     r0,#0
00005e  4903              LDR      r1,|L15.108|
000060  6008              STR      r0,[r1,#0]  ; RMP_Ctxsw
;;;327                    Pos=1;
000062  2501              MOVS     r5,#1
                  |L15.100|
;;;328            }
;;;329        }
;;;330        
;;;331        return Pos;
000064  4628              MOV      r0,r5
;;;332    }
000066  bd70              POP      {r4-r6,pc}
;;;333    /* End Function:_RMP_Get_Int *************************************************/
                          ENDP

                  |L15.104|
                          DCD      RMP_Flag
                  |L15.108|
                          DCD      RMP_Ctxsw

                          AREA ||i._RMP_Int||, CODE, READONLY, ALIGN=2

                  _RMP_Int PROC
;;;340    ******************************************************************************/
;;;341    void _RMP_Int(void)
000000  e012              B        |L16.40|
                  |L16.2|
;;;342    {
;;;343        cnt_t Int_Num;
;;;344        
;;;345        while(1)
;;;346        {
;;;347            _RMP_Int_Rcv();
000002  f7fffffe          BL       _RMP_Int_Rcv
;;;348            /* Look for interrupts to handle from the first */
;;;349            Int_Num=_RMP_Get_Int();
000006  f7fffffe          BL       _RMP_Get_Int
00000a  4604              MOV      r4,r0
;;;350            /* Handle the interrupt here - the interrupt is tail-chained */
;;;351            while(Int_Num>=0)
00000c  e00a              B        |L16.36|
                  |L16.14|
;;;352            {
;;;353                if(RMP_Vect[Int_Num]!=0)
00000e  4807              LDR      r0,|L16.44|
000010  f8500024          LDR      r0,[r0,r4,LSL #2]
000014  b118              CBZ      r0,|L16.30|
;;;354                    ((void(*)(void))RMP_Vect[Int_Num])();
000016  4905              LDR      r1,|L16.44|
000018  f8510024          LDR      r0,[r1,r4,LSL #2]
00001c  4780              BLX      r0
                  |L16.30|
;;;355                Int_Num=_RMP_Get_Int();
00001e  f7fffffe          BL       _RMP_Get_Int
000022  4604              MOV      r4,r0
                  |L16.36|
000024  2c00              CMP      r4,#0                 ;351
000026  daf2              BGE      |L16.14|
                  |L16.40|
000028  e7eb              B        |L16.2|
;;;356            }
;;;357        }
;;;358    }
;;;359    /* End Function:_RMP_Int *****************************************************/
                          ENDP

00002a  0000              DCW      0x0000
                  |L16.44|
                          DCD      RMP_Vect

                          AREA ||i._RMP_Low_Level_Init||, CODE, READONLY, ALIGN=2

                  _RMP_Low_Level_Init PROC
;;;63     ******************************************************************************/
;;;64     void _RMP_Low_Level_Init(void)
000000  2100              MOVS     r1,#0
;;;65     {
;;;66         cnt_t Count;
;;;67         /* Clear all VM-related flags and registration tables */
;;;68         RMP_Ctxsw=0;
000002  4a0e              LDR      r2,|L17.60|
000004  6011              STR      r1,[r2,#0]  ; RMP_Ctxsw
;;;69         for(Count=0;Count<RVM_VECT_BITMAP;Count++)
000006  2000              MOVS     r0,#0
000008  e004              B        |L17.20|
                  |L17.10|
;;;70             RMP_Flag.Flags[Count]=0;
00000a  2100              MOVS     r1,#0
00000c  4a0c              LDR      r2,|L17.64|
00000e  f8421020          STR      r1,[r2,r0,LSL #2]
000012  1c40              ADDS     r0,r0,#1              ;69
                  |L17.20|
000014  2800              CMP      r0,#0                 ;69
000016  d0f8              BEQ      |L17.10|
;;;71         for(Count=0;Count<RVM_MAX_INTVECT;Count++)
000018  2000              MOVS     r0,#0
00001a  e004              B        |L17.38|
                  |L17.28|
;;;72             RMP_Vect[Count]=0;
00001c  2100              MOVS     r1,#0
00001e  4a09              LDR      r2,|L17.68|
000020  f8421020          STR      r1,[r2,r0,LSL #2]
000024  1c40              ADDS     r0,r0,#1              ;71
                  |L17.38|
000026  2820              CMP      r0,#0x20              ;71
000028  dbf8              BLT      |L17.28|
;;;73         /* Install systick and pendsv handlers */
;;;74         RMP_Vect[0]=(ptr_t)RMP_SysTick_Handler;
00002a  4907              LDR      r1,|L17.72|
00002c  4a05              LDR      r2,|L17.68|
00002e  6011              STR      r1,[r2,#0]  ; RMP_Vect
;;;75         RMP_Vect[1]=(ptr_t)RMP_PendSV_Handler;
000030  4906              LDR      r1,|L17.76|
000032  6051              STR      r1,[r2,#4]  ; RMP_Vect
;;;76         
;;;77         /* Clean up the console */
;;;78         RMP_Console_Ptr=0;
000034  2100              MOVS     r1,#0
000036  4a06              LDR      r2,|L17.80|
000038  6011              STR      r1,[r2,#0]  ; RMP_Console_Ptr
;;;79     }
00003a  4770              BX       lr
;;;80     /* End Function:_RMP_Low_Level_Init ******************************************/
                          ENDP

                  |L17.60|
                          DCD      RMP_Ctxsw
                  |L17.64|
                          DCD      RMP_Flag
                  |L17.68|
                          DCD      RMP_Vect
                  |L17.72|
                          DCD      RMP_SysTick_Handler
                  |L17.76|
                          DCD      RMP_PendSV_Handler
                  |L17.80|
                          DCD      RMP_Console_Ptr

                          AREA ||i._RMP_Plat_Hook||, CODE, READONLY, ALIGN=1

                  _RMP_Plat_Hook PROC
;;;87     ******************************************************************************/
;;;88     void _RMP_Plat_Hook(void)
000000  b510              PUSH     {r4,lr}
;;;89     {
;;;90         RMP_Enable_Int();
000002  f7fffffe          BL       RMP_Enable_Int
;;;91     }
000006  bd10              POP      {r4,pc}
;;;92     /* End Function:_RMP_Plat_Hook ***********************************************/
                          ENDP


                          AREA ||i._RMP_Stack_Init||, CODE, READONLY, ALIGN=2

                  _RMP_Stack_Init PROC
;;;43     ******************************************************************************/
;;;44     void _RMP_Stack_Init(ptr_t Entry, ptr_t Stack, ptr_t Arg)
000000  f06f0302          MVN      r3,#2
;;;45     {
;;;46         /* The "9" here is because we also pushed other registers to PSP */
;;;47         /* This is the LR value indicating that we never used the FPU */
;;;48         ((ptr_t*)Stack)[0+8]=0xFFFFFFFD;       
000004  620b              STR      r3,[r1,#0x20]
;;;49         /* CM3:Pass the parameter */                            
;;;50         ((ptr_t*)Stack)[0+9]=Arg;       
000006  624a              STR      r2,[r1,#0x24]
;;;51         /* CM3:for xPSR. fill the T bit,or an INVSTATE will happen */
;;;52         ((ptr_t*)Stack)[6+9]=Entry;
000008  63c8              STR      r0,[r1,#0x3c]
;;;53         /* CM3:Set the process entrance */                            
;;;54         ((ptr_t*)Stack)[7+9]=0x01000200;      
00000a  4b01              LDR      r3,|L19.16|
00000c  640b              STR      r3,[r1,#0x40]
;;;55     }
00000e  4770              BX       lr
;;;56     /* End Function:_RMP_Stack_Init **********************************************/
                          ENDP

                  |L19.16|
                          DCD      0x01000200

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  RMP_Console
                          %        128
                  RMP_Param
                          %        20
                  RMP_Regs
                          %        104
                  RMP_Vect
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  RMP_Console_Ptr
                          DCD      0x00000000
                  RMP_Ctxsw
                          DCD      0x00000000
                  RMP_Flag
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\MProkaron\\Platform\\CortexM_RVM\\platform_cmx_RVM.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_platform_cmx_RVM_c_203ac359____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32F7xx_HAL_Driver\\Core\\cmsis_armcc.h"
|__asm___18_platform_cmx_RVM_c_203ac359____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_platform_cmx_RVM_c_203ac359____REVSH|
#line 402
|__asm___18_platform_cmx_RVM_c_203ac359____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_platform_cmx_RVM_c_203ac359____RRX|
#line 587
|__asm___18_platform_cmx_RVM_c_203ac359____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
