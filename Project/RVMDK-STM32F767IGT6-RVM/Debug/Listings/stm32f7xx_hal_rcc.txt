; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f7xx_hal_rcc.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f7xx_hal_rcc.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\..\Library\STM32F7xx_HAL_Driver\Core -I..\..\..\..\Library\STM32F7xx_HAL_Driver\Inc -I..\..\..\..\Library\STM32F7xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\32-Bit_MCU\STM32\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f7xx_hal_rcc.crf ..\..\..\..\Library\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_rcc.c]
                          THUMB

                          AREA ||i.HAL_RCC_CSSCallback||, CODE, READONLY, ALIGN=1

                  HAL_RCC_CSSCallback PROC
;;;1076     */
;;;1077   __weak void HAL_RCC_CSSCallback(void)
000000  4770              BX       lr
;;;1078   {
;;;1079     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1080               the HAL_RCC_CSSCallback could be implemented in the user file
;;;1081      */ 
;;;1082   }
;;;1083   
                          ENDP


                          AREA ||i.HAL_RCC_ClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_ClockConfig PROC
;;;582      */
;;;583    HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
000000  b570              PUSH     {r4-r6,lr}
;;;584    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;585      uint32_t tickstart = 0;
000006  2600              MOVS     r6,#0
;;;586    
;;;587      /* Check the parameters */
;;;588      assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
;;;589      assert_param(IS_FLASH_LATENCY(FLatency));
;;;590    
;;;591      /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
;;;592      must be correctly programmed according to the frequency of the CPU clock 
;;;593      (HCLK) and the supply voltage of the device. */
;;;594      
;;;595      /* Increasing the CPU frequency */
;;;596      if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
000008  4866              LDR      r0,|L2.420|
00000a  6800              LDR      r0,[r0,#0]
00000c  f000000f          AND      r0,r0,#0xf
000010  42a8              CMP      r0,r5
000012  d20e              BCS      |L2.50|
;;;597      {    
;;;598        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;599        __HAL_FLASH_SET_LATENCY(FLatency);
000014  4863              LDR      r0,|L2.420|
000016  6800              LDR      r0,[r0,#0]
000018  f020000f          BIC      r0,r0,#0xf
00001c  4328              ORRS     r0,r0,r5
00001e  4961              LDR      r1,|L2.420|
000020  6008              STR      r0,[r1,#0]
;;;600        
;;;601        /* Check that the new number of wait states is taken into account to access the Flash
;;;602        memory by reading the FLASH_ACR register */
;;;603        if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
000022  4608              MOV      r0,r1
000024  6800              LDR      r0,[r0,#0]
000026  f000000f          AND      r0,r0,#0xf
00002a  42a8              CMP      r0,r5
00002c  d001              BEQ      |L2.50|
;;;604        {
;;;605          return HAL_ERROR;
00002e  2001              MOVS     r0,#1
                  |L2.48|
;;;606        }
;;;607      }
;;;608      
;;;609      /*-------------------------- HCLK Configuration --------------------------*/
;;;610      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;611      {
;;;612        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;613        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
;;;614      }
;;;615      
;;;616      /*------------------------- SYSCLK Configuration ---------------------------*/ 
;;;617      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;618      {    
;;;619        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;620        
;;;621        /* HSE is selected as System Clock Source */
;;;622        if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;623        {
;;;624          /* Check the HSE ready flag */  
;;;625          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;626          {
;;;627            return HAL_ERROR;
;;;628          }
;;;629        }
;;;630        /* PLL is selected as System Clock Source */
;;;631        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;632        {
;;;633          /* Check the PLL ready flag */  
;;;634          if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;635          {
;;;636            return HAL_ERROR;
;;;637          }
;;;638        }
;;;639        /* HSI is selected as System Clock Source */
;;;640        else
;;;641        {
;;;642          /* Check the HSI ready flag */  
;;;643          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;644          {
;;;645            return HAL_ERROR;
;;;646          }
;;;647        }
;;;648        
;;;649        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;650        /* Get Start Tick*/
;;;651        tickstart = HAL_GetTick();
;;;652        
;;;653        if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;654        {
;;;655          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
;;;656          {
;;;657            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;658            {
;;;659              return HAL_TIMEOUT;
;;;660            }
;;;661          }
;;;662        }
;;;663        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;664        {
;;;665          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;666          {
;;;667            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;668            {
;;;669              return HAL_TIMEOUT;
;;;670            }
;;;671          }
;;;672        }
;;;673        else
;;;674        {
;;;675          while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
;;;676          {
;;;677            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;678            {
;;;679              return HAL_TIMEOUT;
;;;680            }
;;;681          }
;;;682        }
;;;683      }
;;;684      
;;;685      /* Decreasing the number of wait states because of lower CPU frequency */
;;;686      if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
;;;687      {
;;;688        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;689        __HAL_FLASH_SET_LATENCY(FLatency);
;;;690        
;;;691        /* Check that the new number of wait states is taken into account to access the Flash
;;;692        memory by reading the FLASH_ACR register */
;;;693        if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
;;;694        {
;;;695          return HAL_ERROR;
;;;696        }
;;;697      }
;;;698    
;;;699      /*-------------------------- PCLK1 Configuration ---------------------------*/ 
;;;700      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;701      {
;;;702        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
;;;703        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
;;;704      }
;;;705      
;;;706      /*-------------------------- PCLK2 Configuration ---------------------------*/ 
;;;707      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;708      {
;;;709        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
;;;710        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
;;;711      }
;;;712    
;;;713      /* Update the SystemCoreClock global variable */
;;;714      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
;;;715      
;;;716      /* Configure the source of time base considering new system clocks settings*/
;;;717      HAL_InitTick (TICK_INT_PRIORITY);
;;;718      
;;;719      return HAL_OK;
;;;720    }
000030  bd70              POP      {r4-r6,pc}
                  |L2.50|
000032  7820              LDRB     r0,[r4,#0]            ;610
000034  f0000002          AND      r0,r0,#2              ;610
000038  2802              CMP      r0,#2                 ;610
00003a  d107              BNE      |L2.76|
00003c  485a              LDR      r0,|L2.424|
00003e  6800              LDR      r0,[r0,#0]            ;613
000040  f02000f0          BIC      r0,r0,#0xf0           ;613
000044  68a1              LDR      r1,[r4,#8]            ;613
000046  4308              ORRS     r0,r0,r1              ;613
000048  4957              LDR      r1,|L2.424|
00004a  6008              STR      r0,[r1,#0]            ;613
                  |L2.76|
00004c  7820              LDRB     r0,[r4,#0]            ;617
00004e  f0000001          AND      r0,r0,#1              ;617
000052  2800              CMP      r0,#0                 ;617
000054  d060              BEQ      |L2.280|
000056  6860              LDR      r0,[r4,#4]            ;622
000058  2801              CMP      r0,#1                 ;622
00005a  d107              BNE      |L2.108|
00005c  4852              LDR      r0,|L2.424|
00005e  3808              SUBS     r0,r0,#8              ;625
000060  6800              LDR      r0,[r0,#0]            ;625
000062  f3c04040          UBFX     r0,r0,#17,#1          ;625
000066  b9a0              CBNZ     r0,|L2.146|
000068  2001              MOVS     r0,#1                 ;627
00006a  e7e1              B        |L2.48|
                  |L2.108|
00006c  6860              LDR      r0,[r4,#4]            ;631
00006e  2802              CMP      r0,#2                 ;631
000070  d107              BNE      |L2.130|
000072  484d              LDR      r0,|L2.424|
000074  3808              SUBS     r0,r0,#8              ;634
000076  6800              LDR      r0,[r0,#0]            ;634
000078  f3c06040          UBFX     r0,r0,#25,#1          ;634
00007c  b948              CBNZ     r0,|L2.146|
00007e  2001              MOVS     r0,#1                 ;636
000080  e7d6              B        |L2.48|
                  |L2.130|
000082  4849              LDR      r0,|L2.424|
000084  3808              SUBS     r0,r0,#8              ;643
000086  6800              LDR      r0,[r0,#0]            ;643
000088  f3c00040          UBFX     r0,r0,#1,#1           ;643
00008c  b908              CBNZ     r0,|L2.146|
00008e  2001              MOVS     r0,#1                 ;645
000090  e7ce              B        |L2.48|
                  |L2.146|
000092  4845              LDR      r0,|L2.424|
000094  6800              LDR      r0,[r0,#0]            ;649
000096  f0200003          BIC      r0,r0,#3              ;649
00009a  6861              LDR      r1,[r4,#4]            ;649
00009c  4308              ORRS     r0,r0,r1              ;649
00009e  4942              LDR      r1,|L2.424|
0000a0  6008              STR      r0,[r1,#0]            ;649
0000a2  f7fffffe          BL       HAL_GetTick
0000a6  4606              MOV      r6,r0                 ;651
0000a8  6860              LDR      r0,[r4,#4]            ;653
0000aa  2801              CMP      r0,#1                 ;653
0000ac  d110              BNE      |L2.208|
0000ae  e008              B        |L2.194|
                  |L2.176|
0000b0  f7fffffe          BL       HAL_GetTick
0000b4  1b80              SUBS     r0,r0,r6              ;657
0000b6  f2413188          MOV      r1,#0x1388            ;657
0000ba  4288              CMP      r0,r1                 ;657
0000bc  d901              BLS      |L2.194|
0000be  2003              MOVS     r0,#3                 ;659
0000c0  e7b6              B        |L2.48|
                  |L2.194|
0000c2  4839              LDR      r0,|L2.424|
0000c4  6800              LDR      r0,[r0,#0]            ;655
0000c6  f000000c          AND      r0,r0,#0xc            ;655
0000ca  2804              CMP      r0,#4                 ;655
0000cc  d1f0              BNE      |L2.176|
0000ce  e023              B        |L2.280|
                  |L2.208|
0000d0  6860              LDR      r0,[r4,#4]            ;663
0000d2  2802              CMP      r0,#2                 ;663
0000d4  d110              BNE      |L2.248|
0000d6  e008              B        |L2.234|
                  |L2.216|
0000d8  f7fffffe          BL       HAL_GetTick
0000dc  1b80              SUBS     r0,r0,r6              ;667
0000de  f2413188          MOV      r1,#0x1388            ;667
0000e2  4288              CMP      r0,r1                 ;667
0000e4  d901              BLS      |L2.234|
0000e6  2003              MOVS     r0,#3                 ;669
0000e8  e7a2              B        |L2.48|
                  |L2.234|
0000ea  482f              LDR      r0,|L2.424|
0000ec  6800              LDR      r0,[r0,#0]            ;665
0000ee  f000000c          AND      r0,r0,#0xc            ;665
0000f2  2808              CMP      r0,#8                 ;665
0000f4  d1f0              BNE      |L2.216|
0000f6  e00f              B        |L2.280|
                  |L2.248|
0000f8  e008              B        |L2.268|
                  |L2.250|
0000fa  f7fffffe          BL       HAL_GetTick
0000fe  1b80              SUBS     r0,r0,r6              ;677
000100  f2413188          MOV      r1,#0x1388            ;677
000104  4288              CMP      r0,r1                 ;677
000106  d901              BLS      |L2.268|
000108  2003              MOVS     r0,#3                 ;679
00010a  e791              B        |L2.48|
                  |L2.268|
00010c  4826              LDR      r0,|L2.424|
00010e  6800              LDR      r0,[r0,#0]            ;675
000110  f000000c          AND      r0,r0,#0xc            ;675
000114  2800              CMP      r0,#0                 ;675
000116  d1f0              BNE      |L2.250|
                  |L2.280|
000118  4822              LDR      r0,|L2.420|
00011a  6800              LDR      r0,[r0,#0]            ;686
00011c  f000000f          AND      r0,r0,#0xf            ;686
000120  42a8              CMP      r0,r5                 ;686
000122  d90e              BLS      |L2.322|
000124  481f              LDR      r0,|L2.420|
000126  6800              LDR      r0,[r0,#0]            ;689
000128  f020000f          BIC      r0,r0,#0xf            ;689
00012c  4328              ORRS     r0,r0,r5              ;689
00012e  491d              LDR      r1,|L2.420|
000130  6008              STR      r0,[r1,#0]            ;689
000132  4608              MOV      r0,r1                 ;693
000134  6800              LDR      r0,[r0,#0]            ;693
000136  f000000f          AND      r0,r0,#0xf            ;693
00013a  42a8              CMP      r0,r5                 ;693
00013c  d001              BEQ      |L2.322|
00013e  2001              MOVS     r0,#1                 ;695
000140  e776              B        |L2.48|
                  |L2.322|
000142  7820              LDRB     r0,[r4,#0]            ;700
000144  f0000004          AND      r0,r0,#4              ;700
000148  2804              CMP      r0,#4                 ;700
00014a  d107              BNE      |L2.348|
00014c  4816              LDR      r0,|L2.424|
00014e  6800              LDR      r0,[r0,#0]            ;703
000150  f42050e0          BIC      r0,r0,#0x1c00         ;703
000154  68e1              LDR      r1,[r4,#0xc]          ;703
000156  4308              ORRS     r0,r0,r1              ;703
000158  4913              LDR      r1,|L2.424|
00015a  6008              STR      r0,[r1,#0]            ;703
                  |L2.348|
00015c  7820              LDRB     r0,[r4,#0]            ;707
00015e  f0000008          AND      r0,r0,#8              ;707
000162  2808              CMP      r0,#8                 ;707
000164  d108              BNE      |L2.376|
000166  4810              LDR      r0,|L2.424|
000168  6800              LDR      r0,[r0,#0]            ;710
00016a  f4204060          BIC      r0,r0,#0xe000         ;710
00016e  6921              LDR      r1,[r4,#0x10]         ;710
000170  ea4000c1          ORR      r0,r0,r1,LSL #3       ;710
000174  490c              LDR      r1,|L2.424|
000176  6008              STR      r0,[r1,#0]            ;710
                  |L2.376|
000178  f7fffffe          BL       HAL_RCC_GetSysClockFreq
00017c  490a              LDR      r1,|L2.424|
00017e  6809              LDR      r1,[r1,#0]            ;714
000180  f00101f0          AND      r1,r1,#0xf0           ;714
000184  22f0              MOVS     r2,#0xf0              ;714
000186  fa92f2a2          RBIT     r2,r2                 ;714
00018a  fab2f282          CLZ      r2,r2                 ;714
00018e  40d1              LSRS     r1,r1,r2              ;714
000190  4a06              LDR      r2,|L2.428|
000192  5c51              LDRB     r1,[r2,r1]            ;714
000194  40c8              LSRS     r0,r0,r1              ;714
000196  4906              LDR      r1,|L2.432|
000198  6008              STR      r0,[r1,#0]            ;714  ; SystemCoreClock
00019a  200f              MOVS     r0,#0xf               ;717
00019c  f7fffffe          BL       HAL_InitTick
0001a0  2000              MOVS     r0,#0                 ;719
0001a2  e745              B        |L2.48|
;;;721    
                          ENDP

                  |L2.420|
                          DCD      0x40023c00
                  |L2.424|
                          DCD      0x40023808
                  |L2.428|
                          DCD      AHBPrescTable
                  |L2.432|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DeInit PROC
;;;215      */
;;;216    void HAL_RCC_DeInit(void)
000000  4819              LDR      r0,|L3.104|
;;;217    {
;;;218      /* Set HSION bit */
;;;219      SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
000002  6800              LDR      r0,[r0,#0]
000004  f0400081          ORR      r0,r0,#0x81
000008  4917              LDR      r1,|L3.104|
00000a  6008              STR      r0,[r1,#0]
;;;220      
;;;221      /* Reset CFGR register */
;;;222      CLEAR_REG(RCC->CFGR);
00000c  2000              MOVS     r0,#0
00000e  4916              LDR      r1,|L3.104|
000010  3108              ADDS     r1,r1,#8
000012  6008              STR      r0,[r1,#0]
;;;223      
;;;224      /* Reset HSEON, CSSON, PLLON, PLLI2S */
;;;225      CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON| RCC_CR_PLLI2SON); 
000014  4814              LDR      r0,|L3.104|
000016  6800              LDR      r0,[r0,#0]
000018  4914              LDR      r1,|L3.108|
00001a  4008              ANDS     r0,r0,r1
00001c  4912              LDR      r1,|L3.104|
00001e  6008              STR      r0,[r1,#0]
;;;226      
;;;227      /* Reset PLLCFGR register */
;;;228      CLEAR_REG(RCC->PLLCFGR);
000020  2000              MOVS     r0,#0
000022  1d09              ADDS     r1,r1,#4
000024  6008              STR      r0,[r1,#0]
;;;229      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | ((uint32_t)0x20000000U)); 
000026  4608              MOV      r0,r1
000028  6800              LDR      r0,[r0,#0]
00002a  4911              LDR      r1,|L3.112|
00002c  4308              ORRS     r0,r0,r1
00002e  490e              LDR      r1,|L3.104|
000030  1d09              ADDS     r1,r1,#4
000032  6008              STR      r0,[r1,#0]
;;;230      
;;;231      /* Reset PLLI2SCFGR register */
;;;232      CLEAR_REG(RCC->PLLI2SCFGR);
000034  2000              MOVS     r0,#0
000036  490c              LDR      r1,|L3.104|
000038  3184              ADDS     r1,r1,#0x84
00003a  6008              STR      r0,[r1,#0]
;;;233      SET_BIT(RCC->PLLI2SCFGR,  RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1);
00003c  4608              MOV      r0,r1
00003e  6800              LDR      r0,[r0,#0]
000040  490c              LDR      r1,|L3.116|
000042  4308              ORRS     r0,r0,r1
000044  4908              LDR      r1,|L3.104|
000046  3184              ADDS     r1,r1,#0x84
000048  6008              STR      r0,[r1,#0]
;;;234      
;;;235      /* Reset HSEBYP bit */
;;;236      CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
00004a  4807              LDR      r0,|L3.104|
00004c  6800              LDR      r0,[r0,#0]
00004e  f4202080          BIC      r0,r0,#0x40000
000052  4905              LDR      r1,|L3.104|
000054  6008              STR      r0,[r1,#0]
;;;237      
;;;238      /* Disable all interrupts */
;;;239      CLEAR_REG(RCC->CIR);
000056  2000              MOVS     r0,#0
000058  4903              LDR      r1,|L3.104|
00005a  310c              ADDS     r1,r1,#0xc
00005c  6008              STR      r0,[r1,#0]
;;;240      
;;;241      /* Update the SystemCoreClock global variable */
;;;242      SystemCoreClock = HSI_VALUE;
00005e  4806              LDR      r0,|L3.120|
000060  4906              LDR      r1,|L3.124|
000062  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;243    }
000064  4770              BX       lr
;;;244    
                          ENDP

000066  0000              DCW      0x0000
                  |L3.104|
                          DCD      0x40023800
                  |L3.108|
                          DCD      0xfaf6ffff
                  |L3.112|
                          DCD      0x24003010
                  |L3.116|
                          DCD      0x20003000
                  |L3.120|
                          DCD      0x00f42400
                  |L3.124|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_DisableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DisableCSS PROC
;;;829      */
;;;830    void HAL_RCC_DisableCSS(void)
000000  4803              LDR      r0,|L4.16|
;;;831    {
;;;832      CLEAR_BIT(RCC->CR, RCC_CR_CSSON);
000002  6800              LDR      r0,[r0,#0]
000004  f4202000          BIC      r0,r0,#0x80000
000008  4901              LDR      r1,|L4.16|
00000a  6008              STR      r0,[r1,#0]
;;;833    }
00000c  4770              BX       lr
;;;834    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0x40023800

                          AREA ||i.HAL_RCC_EnableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_EnableCSS PROC
;;;820      */
;;;821    void HAL_RCC_EnableCSS(void)
000000  4803              LDR      r0,|L5.16|
;;;822    {
;;;823      SET_BIT(RCC->CR, RCC_CR_CSSON);
000002  6800              LDR      r0,[r0,#0]
000004  f4402000          ORR      r0,r0,#0x80000
000008  4901              LDR      r1,|L5.16|
00000a  6008              STR      r0,[r1,#0]
;;;824    }
00000c  4770              BX       lr
;;;825    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0x40023800

                          AREA ||i.HAL_RCC_GetClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetClockConfig PROC
;;;1033     */
;;;1034   void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
000000  220f              MOVS     r2,#0xf
;;;1035   {
;;;1036     /* Set all possible values for the Clock type parameter --------------------*/
;;;1037     RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
000002  6002              STR      r2,[r0,#0]
;;;1038      
;;;1039     /* Get the SYSCLK configuration --------------------------------------------*/ 
;;;1040     RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
000004  4a0d              LDR      r2,|L6.60|
000006  6812              LDR      r2,[r2,#0]
000008  f0020203          AND      r2,r2,#3
00000c  6042              STR      r2,[r0,#4]
;;;1041     
;;;1042     /* Get the HCLK configuration ----------------------------------------------*/ 
;;;1043     RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
00000e  4a0b              LDR      r2,|L6.60|
000010  6812              LDR      r2,[r2,#0]
000012  f00202f0          AND      r2,r2,#0xf0
000016  6082              STR      r2,[r0,#8]
;;;1044     
;;;1045     /* Get the APB1 configuration ----------------------------------------------*/ 
;;;1046     RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
000018  4a08              LDR      r2,|L6.60|
00001a  6812              LDR      r2,[r2,#0]
00001c  f40252e0          AND      r2,r2,#0x1c00
000020  60c2              STR      r2,[r0,#0xc]
;;;1047     
;;;1048     /* Get the APB2 configuration ----------------------------------------------*/ 
;;;1049     RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
000022  4a06              LDR      r2,|L6.60|
000024  6812              LDR      r2,[r2,#0]
000026  f4024260          AND      r2,r2,#0xe000
00002a  08d2              LSRS     r2,r2,#3
00002c  6102              STR      r2,[r0,#0x10]
;;;1050     
;;;1051     /* Get the Flash Wait State (Latency) configuration ------------------------*/   
;;;1052     *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
00002e  4a04              LDR      r2,|L6.64|
000030  6812              LDR      r2,[r2,#0]
000032  f002020f          AND      r2,r2,#0xf
000036  600a              STR      r2,[r1,#0]
;;;1053   }
000038  4770              BX       lr
;;;1054   
                          ENDP

00003a  0000              DCW      0x0000
                  |L6.60|
                          DCD      0x40023808
                  |L6.64|
                          DCD      0x40023c00

                          AREA ||i.HAL_RCC_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetHCLKFreq PROC
;;;918      */
;;;919    uint32_t HAL_RCC_GetHCLKFreq(void)
000000  4801              LDR      r0,|L7.8|
;;;920    {
;;;921      return SystemCoreClock;
000002  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;922    }
000004  4770              BX       lr
;;;923    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_GetOscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetOscConfig PROC
;;;954      */
;;;955    void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  210f              MOVS     r1,#0xf
;;;956    {
;;;957      /* Set all possible values for the Oscillator type parameter ---------------*/
;;;958      RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
000002  6001              STR      r1,[r0,#0]
;;;959      
;;;960      /* Get the HSE configuration -----------------------------------------------*/
;;;961      if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
000004  4947              LDR      r1,|L8.292|
000006  6809              LDR      r1,[r1,#0]
000008  f4012180          AND      r1,r1,#0x40000
00000c  f5b12f80          CMP      r1,#0x40000
000010  d103              BNE      |L8.26|
;;;962      {
;;;963        RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
000012  f44f21a0          MOV      r1,#0x50000
000016  6041              STR      r1,[r0,#4]
000018  e00c              B        |L8.52|
                  |L8.26|
;;;964      }
;;;965      else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
00001a  4942              LDR      r1,|L8.292|
00001c  6809              LDR      r1,[r1,#0]
00001e  f4013180          AND      r1,r1,#0x10000
000022  f5b13f80          CMP      r1,#0x10000
000026  d103              BNE      |L8.48|
;;;966      {
;;;967        RCC_OscInitStruct->HSEState = RCC_HSE_ON;
000028  f44f3180          MOV      r1,#0x10000
00002c  6041              STR      r1,[r0,#4]
00002e  e001              B        |L8.52|
                  |L8.48|
;;;968      }
;;;969      else
;;;970      {
;;;971        RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
000030  2100              MOVS     r1,#0
000032  6041              STR      r1,[r0,#4]
                  |L8.52|
;;;972      }
;;;973      
;;;974      /* Get the HSI configuration -----------------------------------------------*/
;;;975      if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
000034  493b              LDR      r1,|L8.292|
000036  6809              LDR      r1,[r1,#0]
000038  f0010101          AND      r1,r1,#1
00003c  b111              CBZ      r1,|L8.68|
;;;976      {
;;;977        RCC_OscInitStruct->HSIState = RCC_HSI_ON;
00003e  2101              MOVS     r1,#1
000040  60c1              STR      r1,[r0,#0xc]
000042  e001              B        |L8.72|
                  |L8.68|
;;;978      }
;;;979      else
;;;980      {
;;;981        RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
000044  2100              MOVS     r1,#0
000046  60c1              STR      r1,[r0,#0xc]
                  |L8.72|
;;;982      }
;;;983      
;;;984      RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
000048  4936              LDR      r1,|L8.292|
00004a  6809              LDR      r1,[r1,#0]
00004c  f00101f8          AND      r1,r1,#0xf8
000050  22f8              MOVS     r2,#0xf8
000052  fa92f2a2          RBIT     r2,r2
000056  fab2f282          CLZ      r2,r2
00005a  40d1              LSRS     r1,r1,r2
00005c  6101              STR      r1,[r0,#0x10]
;;;985      
;;;986      /* Get the LSE configuration -----------------------------------------------*/
;;;987      if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
00005e  4931              LDR      r1,|L8.292|
000060  3170              ADDS     r1,r1,#0x70
000062  6809              LDR      r1,[r1,#0]
000064  f0010104          AND      r1,r1,#4
000068  2904              CMP      r1,#4
00006a  d102              BNE      |L8.114|
;;;988      {
;;;989        RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
00006c  2105              MOVS     r1,#5
00006e  6081              STR      r1,[r0,#8]
000070  e00a              B        |L8.136|
                  |L8.114|
;;;990      }
;;;991      else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
000072  492c              LDR      r1,|L8.292|
000074  3170              ADDS     r1,r1,#0x70
000076  6809              LDR      r1,[r1,#0]
000078  f0010101          AND      r1,r1,#1
00007c  b111              CBZ      r1,|L8.132|
;;;992      {
;;;993        RCC_OscInitStruct->LSEState = RCC_LSE_ON;
00007e  2101              MOVS     r1,#1
000080  6081              STR      r1,[r0,#8]
000082  e001              B        |L8.136|
                  |L8.132|
;;;994      }
;;;995      else
;;;996      {
;;;997        RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
000084  2100              MOVS     r1,#0
000086  6081              STR      r1,[r0,#8]
                  |L8.136|
;;;998      }
;;;999      
;;;1000     /* Get the LSI configuration -----------------------------------------------*/
;;;1001     if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
000088  4926              LDR      r1,|L8.292|
00008a  3174              ADDS     r1,r1,#0x74
00008c  6809              LDR      r1,[r1,#0]
00008e  f0010101          AND      r1,r1,#1
000092  b111              CBZ      r1,|L8.154|
;;;1002     {
;;;1003       RCC_OscInitStruct->LSIState = RCC_LSI_ON;
000094  2101              MOVS     r1,#1
000096  6141              STR      r1,[r0,#0x14]
000098  e001              B        |L8.158|
                  |L8.154|
;;;1004     }
;;;1005     else
;;;1006     {
;;;1007       RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
00009a  2100              MOVS     r1,#0
00009c  6141              STR      r1,[r0,#0x14]
                  |L8.158|
;;;1008     }
;;;1009     
;;;1010     /* Get the PLL configuration -----------------------------------------------*/
;;;1011     if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
00009e  4921              LDR      r1,|L8.292|
0000a0  6809              LDR      r1,[r1,#0]
0000a2  f0017180          AND      r1,r1,#0x1000000
0000a6  f1b17f80          CMP      r1,#0x1000000
0000aa  d102              BNE      |L8.178|
;;;1012     {
;;;1013       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
0000ac  2102              MOVS     r1,#2
0000ae  6181              STR      r1,[r0,#0x18]
0000b0  e001              B        |L8.182|
                  |L8.178|
;;;1014     }
;;;1015     else
;;;1016     {
;;;1017       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
0000b2  2101              MOVS     r1,#1
0000b4  6181              STR      r1,[r0,#0x18]
                  |L8.182|
;;;1018     }
;;;1019     RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
0000b6  491b              LDR      r1,|L8.292|
0000b8  1d09              ADDS     r1,r1,#4
0000ba  6809              LDR      r1,[r1,#0]
0000bc  f4010280          AND      r2,r1,#0x400000
0000c0  61c2              STR      r2,[r0,#0x1c]
;;;1020     RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
0000c2  4918              LDR      r1,|L8.292|
0000c4  1d09              ADDS     r1,r1,#4
0000c6  6809              LDR      r1,[r1,#0]
0000c8  f001023f          AND      r2,r1,#0x3f
0000cc  6202              STR      r2,[r0,#0x20]
;;;1021     RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
0000ce  4915              LDR      r1,|L8.292|
0000d0  1d09              ADDS     r1,r1,#4
0000d2  6809              LDR      r1,[r1,#0]
0000d4  f64772c0          MOV      r2,#0x7fc0
0000d8  4011              ANDS     r1,r1,r2
0000da  fa92f2a2          RBIT     r2,r2
0000de  fab2f282          CLZ      r2,r2
0000e2  40d1              LSRS     r1,r1,r2
0000e4  6241              STR      r1,[r0,#0x24]
;;;1022     RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1) >> POSITION_VAL(RCC_PLLCFGR_PLLP));
0000e6  490f              LDR      r1,|L8.292|
0000e8  1d09              ADDS     r1,r1,#4
0000ea  6809              LDR      r1,[r1,#0]
0000ec  f4013140          AND      r1,r1,#0x30000
0000f0  f5013180          ADD      r1,r1,#0x10000
0000f4  0049              LSLS     r1,r1,#1
0000f6  f44f3240          MOV      r2,#0x30000
0000fa  fa92f2a2          RBIT     r2,r2
0000fe  fab2f282          CLZ      r2,r2
000102  40d1              LSRS     r1,r1,r2
000104  6281              STR      r1,[r0,#0x28]
;;;1023     RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PLLCFGR_PLLQ));
000106  4907              LDR      r1,|L8.292|
000108  1d09              ADDS     r1,r1,#4
00010a  6809              LDR      r1,[r1,#0]
00010c  f0016170          AND      r1,r1,#0xf000000
000110  f04f6270          MOV      r2,#0xf000000
000114  fa92f2a2          RBIT     r2,r2
000118  fab2f282          CLZ      r2,r2
00011c  40d1              LSRS     r1,r1,r2
00011e  62c1              STR      r1,[r0,#0x2c]
;;;1024   }
000120  4770              BX       lr
;;;1025   
                          ENDP

000122  0000              DCW      0x0000
                  |L8.292|
                          DCD      0x40023800

                          AREA ||i.HAL_RCC_GetPCLK1Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK1Freq PROC
;;;929      */
;;;930    uint32_t HAL_RCC_GetPCLK1Freq(void)
000000  b500              PUSH     {lr}
;;;931    {  
;;;932      /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
;;;933      return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4907              LDR      r1,|L9.36|
000008  6809              LDR      r1,[r1,#0]
00000a  f40151e0          AND      r1,r1,#0x1c00
00000e  f44f52e0          MOV      r2,#0x1c00
000012  fa92f2a2          RBIT     r2,r2
000016  fab2f282          CLZ      r2,r2
00001a  40d1              LSRS     r1,r1,r2
00001c  4a02              LDR      r2,|L9.40|
00001e  5c51              LDRB     r1,[r2,r1]
000020  40c8              LSRS     r0,r0,r1
;;;934    }
000022  bd00              POP      {pc}
;;;935    
                          ENDP

                  |L9.36|
                          DCD      0x40023808
                  |L9.40|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetPCLK2Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK2Freq PROC
;;;941      */
;;;942    uint32_t HAL_RCC_GetPCLK2Freq(void)
000000  b500              PUSH     {lr}
;;;943    {
;;;944      /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
;;;945      return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4907              LDR      r1,|L10.36|
000008  6809              LDR      r1,[r1,#0]
00000a  f4014160          AND      r1,r1,#0xe000
00000e  f44f4260          MOV      r2,#0xe000
000012  fa92f2a2          RBIT     r2,r2
000016  fab2f282          CLZ      r2,r2
00001a  40d1              LSRS     r1,r1,r2
00001c  4a02              LDR      r2,|L10.40|
00001e  5c51              LDRB     r1,[r2,r1]
000020  40c8              LSRS     r0,r0,r1
;;;946    } 
000022  bd00              POP      {pc}
;;;947    
                          ENDP

                  |L10.36|
                          DCD      0x40023808
                  |L10.40|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetSysClockFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetSysClockFreq PROC
;;;864      */
;;;865    uint32_t HAL_RCC_GetSysClockFreq(void)
000000  b570              PUSH     {r4-r6,lr}
;;;866    {
;;;867      uint32_t pllm = 0, pllvco = 0, pllp = 0;
000002  2100              MOVS     r1,#0
000004  2200              MOVS     r2,#0
000006  2300              MOVS     r3,#0
;;;868      uint32_t sysclockfreq = 0;
000008  2000              MOVS     r0,#0
;;;869    
;;;870      /* Get SYSCLK source -------------------------------------------------------*/
;;;871      switch (RCC->CFGR & RCC_CFGR_SWS)
00000a  4c27              LDR      r4,|L11.168|
00000c  6824              LDR      r4,[r4,#0]
00000e  f004040c          AND      r4,r4,#0xc
000012  b124              CBZ      r4,|L11.30|
000014  2c04              CMP      r4,#4
000016  d004              BEQ      |L11.34|
000018  2c08              CMP      r4,#8
00001a  d141              BNE      |L11.160|
00001c  e003              B        |L11.38|
                  |L11.30|
;;;872      {
;;;873        case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
;;;874        {
;;;875          sysclockfreq = HSI_VALUE;
00001e  4823              LDR      r0,|L11.172|
;;;876           break;
000020  e040              B        |L11.164|
                  |L11.34|
;;;877        }
;;;878        case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
;;;879        {
;;;880          sysclockfreq = HSE_VALUE;
000022  4823              LDR      r0,|L11.176|
;;;881          break;
000024  e03e              B        |L11.164|
                  |L11.38|
;;;882        }
;;;883        case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
;;;884        {
;;;885          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
;;;886          SYSCLK = PLL_VCO / PLLP */
;;;887          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
000026  4c20              LDR      r4,|L11.168|
000028  1f24              SUBS     r4,r4,#4
00002a  6824              LDR      r4,[r4,#0]
00002c  f004013f          AND      r1,r4,#0x3f
;;;888          if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
000030  4c1d              LDR      r4,|L11.168|
000032  1f24              SUBS     r4,r4,#4
000034  6824              LDR      r4,[r4,#0]
000036  f4040480          AND      r4,r4,#0x400000
00003a  b184              CBZ      r4,|L11.94|
;;;889          {
;;;890            /* HSE used as PLL clock source */
;;;891            pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
00003c  4c1c              LDR      r4,|L11.176|
00003e  fbb4f5f1          UDIV     r5,r4,r1
000042  4c19              LDR      r4,|L11.168|
000044  1f24              SUBS     r4,r4,#4
000046  6824              LDR      r4,[r4,#0]
000048  f64776c0          MOV      r6,#0x7fc0
00004c  4034              ANDS     r4,r4,r6
00004e  fa96f6a6          RBIT     r6,r6
000052  fab6f686          CLZ      r6,r6
000056  40f4              LSRS     r4,r4,r6
000058  fb05f204          MUL      r2,r5,r4
00005c  e00f              B        |L11.126|
                  |L11.94|
;;;892          }
;;;893          else
;;;894          {
;;;895            /* HSI used as PLL clock source */
;;;896            pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
00005e  4c13              LDR      r4,|L11.172|
000060  fbb4f5f1          UDIV     r5,r4,r1
000064  4c10              LDR      r4,|L11.168|
000066  1f24              SUBS     r4,r4,#4
000068  6824              LDR      r4,[r4,#0]
00006a  f64776c0          MOV      r6,#0x7fc0
00006e  4034              ANDS     r4,r4,r6
000070  fa96f6a6          RBIT     r6,r6
000074  fab6f686          CLZ      r6,r6
000078  40f4              LSRS     r4,r4,r6
00007a  fb05f204          MUL      r2,r5,r4
                  |L11.126|
;;;897          }
;;;898          pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
00007e  4c0a              LDR      r4,|L11.168|
000080  1f24              SUBS     r4,r4,#4
000082  6824              LDR      r4,[r4,#0]
000084  f4043440          AND      r4,r4,#0x30000
000088  f44f3540          MOV      r5,#0x30000
00008c  fa95f5a5          RBIT     r5,r5
000090  fab5f585          CLZ      r5,r5
000094  40ec              LSRS     r4,r4,r5
000096  1c64              ADDS     r4,r4,#1
000098  0063              LSLS     r3,r4,#1
;;;899          
;;;900          sysclockfreq = pllvco/pllp;
00009a  fbb2f0f3          UDIV     r0,r2,r3
;;;901          break;
00009e  e001              B        |L11.164|
                  |L11.160|
;;;902        }
;;;903        default:
;;;904        {
;;;905          sysclockfreq = HSI_VALUE;
0000a0  4802              LDR      r0,|L11.172|
;;;906          break;
0000a2  bf00              NOP      
                  |L11.164|
0000a4  bf00              NOP                            ;876
;;;907        }
;;;908      }
;;;909      return sysclockfreq;
;;;910    }
0000a6  bd70              POP      {r4-r6,pc}
;;;911    
                          ENDP

                  |L11.168|
                          DCD      0x40023808
                  |L11.172|
                          DCD      0x00f42400
                  |L11.176|
                          DCD      0x017d7840

                          AREA ||i.HAL_RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_MCOConfig PROC
;;;766      */
;;;767    void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
000000  b570              PUSH     {r4-r6,lr}
;;;768    {
000002  b086              SUB      sp,sp,#0x18
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;769      GPIO_InitTypeDef GPIO_InitStruct;
;;;770      /* Check the parameters */
;;;771      assert_param(IS_RCC_MCO(RCC_MCOx));
;;;772      assert_param(IS_RCC_MCODIV(RCC_MCODiv));
;;;773      /* RCC_MCO1 */
;;;774      if(RCC_MCOx == RCC_MCO1)
00000a  bb36              CBNZ     r6,|L12.90|
;;;775      {
;;;776        assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
;;;777        
;;;778        /* MCO1 Clock Enable */
;;;779        MCO1_CLK_ENABLE();
00000c  bf00              NOP      
00000e  4827              LDR      r0,|L12.172|
000010  6800              LDR      r0,[r0,#0]
000012  f0400001          ORR      r0,r0,#1
000016  4925              LDR      r1,|L12.172|
000018  6008              STR      r0,[r1,#0]
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]
00001e  f0000001          AND      r0,r0,#1
000022  9000              STR      r0,[sp,#0]
000024  bf00              NOP      
000026  bf00              NOP      
;;;780        
;;;781        /* Configure the MCO1 pin in alternate function mode */    
;;;782        GPIO_InitStruct.Pin = MCO1_PIN;
000028  1588              ASRS     r0,r1,#22
00002a  9001              STR      r0,[sp,#4]
;;;783        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
00002c  2002              MOVS     r0,#2
00002e  9002              STR      r0,[sp,#8]
;;;784        GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
000030  2003              MOVS     r0,#3
000032  9004              STR      r0,[sp,#0x10]
;;;785        GPIO_InitStruct.Pull = GPIO_NOPULL;
000034  2000              MOVS     r0,#0
000036  9003              STR      r0,[sp,#0xc]
;;;786        GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
000038  9005              STR      r0,[sp,#0x14]
;;;787        HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
00003a  a901              ADD      r1,sp,#4
00003c  481c              LDR      r0,|L12.176|
00003e  f7fffffe          BL       HAL_GPIO_Init
;;;788        
;;;789        /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
;;;790        MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
000042  481a              LDR      r0,|L12.172|
000044  3828              SUBS     r0,r0,#0x28
000046  6800              LDR      r0,[r0,#0]
000048  f02060ec          BIC      r0,r0,#0x7600000
00004c  ea440105          ORR      r1,r4,r5
000050  4308              ORRS     r0,r0,r1
000052  4916              LDR      r1,|L12.172|
000054  3928              SUBS     r1,r1,#0x28
000056  6008              STR      r0,[r1,#0]
000058  e025              B        |L12.166|
                  |L12.90|
;;;791      }
;;;792      else
;;;793      {
;;;794        assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
;;;795        
;;;796        /* MCO2 Clock Enable */
;;;797        MCO2_CLK_ENABLE();
00005a  bf00              NOP      
00005c  4813              LDR      r0,|L12.172|
00005e  6800              LDR      r0,[r0,#0]
000060  f0400004          ORR      r0,r0,#4
000064  4911              LDR      r1,|L12.172|
000066  6008              STR      r0,[r1,#0]
000068  4608              MOV      r0,r1
00006a  6800              LDR      r0,[r0,#0]
00006c  f0000004          AND      r0,r0,#4
000070  9000              STR      r0,[sp,#0]
000072  bf00              NOP      
000074  bf00              NOP      
;;;798        
;;;799        /* Configure the MCO2 pin in alternate function mode */
;;;800        GPIO_InitStruct.Pin = MCO2_PIN;
000076  1548              ASRS     r0,r1,#21
000078  9001              STR      r0,[sp,#4]
;;;801        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
00007a  2002              MOVS     r0,#2
00007c  9002              STR      r0,[sp,#8]
;;;802        GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
00007e  2003              MOVS     r0,#3
000080  9004              STR      r0,[sp,#0x10]
;;;803        GPIO_InitStruct.Pull = GPIO_NOPULL;
000082  2000              MOVS     r0,#0
000084  9003              STR      r0,[sp,#0xc]
;;;804        GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
000086  9005              STR      r0,[sp,#0x14]
;;;805        HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
000088  a901              ADD      r1,sp,#4
00008a  480a              LDR      r0,|L12.180|
00008c  f7fffffe          BL       HAL_GPIO_Init
;;;806        
;;;807        /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
;;;808        MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
000090  4806              LDR      r0,|L12.172|
000092  3828              SUBS     r0,r0,#0x28
000094  6800              LDR      r0,[r0,#0]
000096  f0204078          BIC      r0,r0,#0xf8000000
00009a  ea4401c5          ORR      r1,r4,r5,LSL #3
00009e  4308              ORRS     r0,r0,r1
0000a0  4902              LDR      r1,|L12.172|
0000a2  3928              SUBS     r1,r1,#0x28
0000a4  6008              STR      r0,[r1,#0]
                  |L12.166|
;;;809      }
;;;810    }
0000a6  b006              ADD      sp,sp,#0x18
0000a8  bd70              POP      {r4-r6,pc}
;;;811    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L12.172|
                          DCD      0x40023830
                  |L12.176|
                          DCD      0x40020000
                  |L12.180|
                          DCD      0x40020800

                          AREA ||i.HAL_RCC_NMI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RCC_NMI_IRQHandler PROC
;;;1059     */
;;;1060   void HAL_RCC_NMI_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1061   {
;;;1062     /* Check RCC CSSF flag  */
;;;1063     if(__HAL_RCC_GET_IT(RCC_IT_CSS))
000002  4806              LDR      r0,|L13.28|
000004  6800              LDR      r0,[r0,#0]
000006  f0000080          AND      r0,r0,#0x80
00000a  2880              CMP      r0,#0x80
00000c  d105              BNE      |L13.26|
;;;1064     {
;;;1065       /* RCC Clock Security System interrupt user callback */
;;;1066       HAL_RCC_CSSCallback();
00000e  f7fffffe          BL       HAL_RCC_CSSCallback
;;;1067   
;;;1068       /* Clear RCC CSS pending bit */
;;;1069       __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
000012  2080              MOVS     r0,#0x80
000014  4901              LDR      r1,|L13.28|
000016  1c89              ADDS     r1,r1,#2
000018  7008              STRB     r0,[r1,#0]
                  |L13.26|
;;;1070     }
;;;1071   }
00001a  bd10              POP      {r4,pc}
;;;1072   
                          ENDP

                  |L13.28|
                          DCD      0x4002380c

                          AREA ||i.HAL_RCC_OscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_OscConfig PROC
;;;258      */
;;;259    __weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b538              PUSH     {r3-r5,lr}
;;;260    {
000002  4604              MOV      r4,r0
;;;261      uint32_t tickstart = 0;  
000004  2500              MOVS     r5,#0
;;;262     
;;;263      /* Check the parameters */
;;;264      assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;265      
;;;266      /*------------------------------- HSE Configuration ------------------------*/ 
;;;267      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
000006  7820              LDRB     r0,[r4,#0]
000008  f0000001          AND      r0,r0,#1
00000c  2800              CMP      r0,#0
00000e  d071              BEQ      |L14.244|
;;;268      {
;;;269        /* Check the parameters */
;;;270        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;271        /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
;;;272        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
000010  48fe              LDR      r0,|L14.1036|
000012  6800              LDR      r0,[r0,#0]
000014  f000000c          AND      r0,r0,#0xc
000018  2804              CMP      r0,#4
00001a  d00d              BEQ      |L14.56|
;;;273           || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
00001c  48fb              LDR      r0,|L14.1036|
00001e  6800              LDR      r0,[r0,#0]
000020  f000000c          AND      r0,r0,#0xc
000024  2808              CMP      r0,#8
000026  d113              BNE      |L14.80|
000028  48f8              LDR      r0,|L14.1036|
00002a  1f00              SUBS     r0,r0,#4
00002c  6800              LDR      r0,[r0,#0]
00002e  f4000080          AND      r0,r0,#0x400000
000032  f5b00f80          CMP      r0,#0x400000
000036  d10b              BNE      |L14.80|
                  |L14.56|
;;;274        {
;;;275    	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
000038  48f4              LDR      r0,|L14.1036|
00003a  3808              SUBS     r0,r0,#8
00003c  6800              LDR      r0,[r0,#0]
00003e  f3c04040          UBFX     r0,r0,#17,#1
000042  2800              CMP      r0,#0
000044  d069              BEQ      |L14.282|
000046  6860              LDR      r0,[r4,#4]
000048  2800              CMP      r0,#0
00004a  d166              BNE      |L14.282|
;;;276          {
;;;277            return HAL_ERROR;
00004c  2001              MOVS     r0,#1
                  |L14.78|
;;;278          }
;;;279        }
;;;280        else
;;;281        {
;;;282          /* Set the new HSE configuration ---------------------------------------*/
;;;283          __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
;;;284          
;;;285          /* Check the HSE State */
;;;286          if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
;;;287          {
;;;288            /* Get Start Tick*/
;;;289            tickstart = HAL_GetTick();
;;;290            
;;;291            /* Wait till HSE is ready */  
;;;292            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;293            {
;;;294              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;295              {
;;;296                return HAL_TIMEOUT;
;;;297              }
;;;298            }
;;;299          }
;;;300          else
;;;301          {
;;;302            /* Get Start Tick*/
;;;303            tickstart = HAL_GetTick();
;;;304            
;;;305            /* Wait till HSE is bypassed or disabled */
;;;306            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;307            {
;;;308               if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;309              {
;;;310                return HAL_TIMEOUT;
;;;311              }
;;;312            }
;;;313          }
;;;314        }
;;;315      }
;;;316      /*----------------------------- HSI Configuration --------------------------*/ 
;;;317      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
;;;318      {
;;;319        /* Check the parameters */
;;;320        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;321        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;322        
;;;323        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
;;;324        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
;;;325           || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
;;;326        {
;;;327          /* When HSI is used as system clock it will not disabled */
;;;328          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;329          {
;;;330            return HAL_ERROR;
;;;331          }
;;;332          /* Otherwise, just the calibration is allowed */
;;;333          else
;;;334          {
;;;335            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;336            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;337          }
;;;338        }
;;;339        else
;;;340        {
;;;341          /* Check the HSI State */
;;;342          if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
;;;343          {
;;;344            /* Enable the Internal High Speed oscillator (HSI). */
;;;345            __HAL_RCC_HSI_ENABLE();
;;;346    
;;;347            /* Get Start Tick*/
;;;348            tickstart = HAL_GetTick();
;;;349    
;;;350            /* Wait till HSI is ready */  
;;;351            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;352            {
;;;353              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;354              {
;;;355                return HAL_TIMEOUT;
;;;356              }
;;;357            }
;;;358                    
;;;359            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;360            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;361          }
;;;362          else
;;;363          {
;;;364            /* Disable the Internal High Speed oscillator (HSI). */
;;;365            __HAL_RCC_HSI_DISABLE();
;;;366    
;;;367            /* Get Start Tick*/
;;;368            tickstart = HAL_GetTick();
;;;369          
;;;370            /* Wait till HSI is ready */  
;;;371            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
;;;372            {
;;;373              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;374              {
;;;375                return HAL_TIMEOUT;
;;;376              } 
;;;377            } 
;;;378          }
;;;379        }
;;;380      }
;;;381      /*------------------------------ LSI Configuration -------------------------*/
;;;382      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;383      {
;;;384        /* Check the parameters */
;;;385        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;386    
;;;387        /* Check the LSI State */
;;;388        if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
;;;389        {
;;;390          /* Enable the Internal Low Speed oscillator (LSI). */
;;;391          __HAL_RCC_LSI_ENABLE();
;;;392          
;;;393          /* Get Start Tick*/
;;;394          tickstart = HAL_GetTick();
;;;395          
;;;396          /* Wait till LSI is ready */
;;;397          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;398          {
;;;399            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;400            {
;;;401              return HAL_TIMEOUT;
;;;402            }
;;;403          }
;;;404        }
;;;405        else
;;;406        {
;;;407          /* Disable the Internal Low Speed oscillator (LSI). */
;;;408          __HAL_RCC_LSI_DISABLE();
;;;409          
;;;410          /* Get Start Tick*/
;;;411          tickstart = HAL_GetTick();
;;;412          
;;;413          /* Wait till LSI is ready */  
;;;414          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;415          {
;;;416            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;417            {
;;;418              return HAL_TIMEOUT;
;;;419            }
;;;420          }
;;;421        }
;;;422      }
;;;423      /*------------------------------ LSE Configuration -------------------------*/ 
;;;424      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;425      {
;;;426        /* Check the parameters */
;;;427        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;428        
;;;429        /* Enable Power Clock*/
;;;430        __HAL_RCC_PWR_CLK_ENABLE();
;;;431        
;;;432        /* Enable write access to Backup domain */
;;;433        PWR->CR1 |= PWR_CR1_DBP;
;;;434        
;;;435        /* Wait for Backup domain Write protection disable */
;;;436        tickstart = HAL_GetTick();
;;;437        
;;;438        while((PWR->CR1 & PWR_CR1_DBP) == RESET)
;;;439        {
;;;440          if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
;;;441          {
;;;442            return HAL_TIMEOUT;
;;;443          }      
;;;444        }
;;;445        
;;;446        /* Set the new LSE configuration -----------------------------------------*/
;;;447        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;448        /* Check the LSE State */
;;;449        if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
;;;450        {
;;;451          /* Get Start Tick*/
;;;452          tickstart = HAL_GetTick();
;;;453          
;;;454          /* Wait till LSE is ready */  
;;;455          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;456          {
;;;457            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;458            {
;;;459              return HAL_TIMEOUT;
;;;460            }       
;;;461          }
;;;462        }
;;;463        else
;;;464        {
;;;465          /* Get Start Tick*/
;;;466          tickstart = HAL_GetTick();
;;;467          
;;;468          /* Wait till LSE is ready */  
;;;469          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;470          {
;;;471            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;472            {
;;;473              return HAL_TIMEOUT;
;;;474            }       
;;;475          }
;;;476        }
;;;477      }
;;;478      /*-------------------------------- PLL Configuration -----------------------*/
;;;479      /* Check the parameters */
;;;480      assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;481      if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;482      {
;;;483        /* Check if the PLL is used as system clock or not */
;;;484        if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;485        { 
;;;486          if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;487          {
;;;488            /* Check the parameters */
;;;489            assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;490            assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
;;;491            assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
;;;492            assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
;;;493            assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
;;;494            
;;;495            /* Disable the main PLL. */
;;;496            __HAL_RCC_PLL_DISABLE();
;;;497            
;;;498            /* Get Start Tick*/
;;;499            tickstart = HAL_GetTick();
;;;500            
;;;501            /* Wait till PLL is ready */  
;;;502            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;503            {
;;;504              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;505              {
;;;506                return HAL_TIMEOUT;
;;;507              }
;;;508            }
;;;509            
;;;510            /* Configure the main PLL clock source, multiplication and division factors. */
;;;511            WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
;;;512                                     RCC_OscInitStruct->PLL.PLLM                                                 | \
;;;513                                     (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
;;;514                                     (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
;;;515                                     (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
;;;516            /* Enable the main PLL. */
;;;517            __HAL_RCC_PLL_ENABLE();
;;;518    
;;;519            /* Get Start Tick*/
;;;520            tickstart = HAL_GetTick();
;;;521            
;;;522            /* Wait till PLL is ready */  
;;;523            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;524            {
;;;525              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;526              {
;;;527                return HAL_TIMEOUT;
;;;528              } 
;;;529            }
;;;530          }
;;;531          else
;;;532          {
;;;533            /* Disable the main PLL. */
;;;534            __HAL_RCC_PLL_DISABLE();
;;;535     
;;;536            /* Get Start Tick*/
;;;537            tickstart = HAL_GetTick();
;;;538            
;;;539            /* Wait till PLL is ready */  
;;;540            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;541            {
;;;542              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;543              {
;;;544                return HAL_TIMEOUT;
;;;545              }
;;;546            }
;;;547          }
;;;548        }
;;;549        else
;;;550        {
;;;551          return HAL_ERROR;
;;;552        }
;;;553      }
;;;554      return HAL_OK;
;;;555    }
00004e  bd38              POP      {r3-r5,pc}
                  |L14.80|
000050  bf00              NOP                            ;283
000052  6860              LDR      r0,[r4,#4]            ;283
000054  f5b03f80          CMP      r0,#0x10000           ;283
000058  d108              BNE      |L14.108|
00005a  48ec              LDR      r0,|L14.1036|
00005c  3808              SUBS     r0,r0,#8              ;283
00005e  6800              LDR      r0,[r0,#0]            ;283
000060  f4403080          ORR      r0,r0,#0x10000        ;283
000064  49e9              LDR      r1,|L14.1036|
000066  3908              SUBS     r1,r1,#8              ;283
000068  6008              STR      r0,[r1,#0]            ;283
00006a  e02e              B        |L14.202|
                  |L14.108|
00006c  6860              LDR      r0,[r4,#4]            ;283
00006e  b968              CBNZ     r0,|L14.140|
000070  48e6              LDR      r0,|L14.1036|
000072  3808              SUBS     r0,r0,#8              ;283
000074  6800              LDR      r0,[r0,#0]            ;283
000076  f4203080          BIC      r0,r0,#0x10000        ;283
00007a  49e4              LDR      r1,|L14.1036|
00007c  3908              SUBS     r1,r1,#8              ;283
00007e  6008              STR      r0,[r1,#0]            ;283
000080  4608              MOV      r0,r1                 ;283
000082  6800              LDR      r0,[r0,#0]            ;283
000084  f4202080          BIC      r0,r0,#0x40000        ;283
000088  6008              STR      r0,[r1,#0]            ;283
00008a  e01e              B        |L14.202|
                  |L14.140|
00008c  6860              LDR      r0,[r4,#4]            ;283
00008e  f5b02fa0          CMP      r0,#0x50000           ;283
000092  d10d              BNE      |L14.176|
000094  48dd              LDR      r0,|L14.1036|
000096  3808              SUBS     r0,r0,#8              ;283
000098  6800              LDR      r0,[r0,#0]            ;283
00009a  f4402080          ORR      r0,r0,#0x40000        ;283
00009e  49db              LDR      r1,|L14.1036|
0000a0  3908              SUBS     r1,r1,#8              ;283
0000a2  6008              STR      r0,[r1,#0]            ;283
0000a4  4608              MOV      r0,r1                 ;283
0000a6  6800              LDR      r0,[r0,#0]            ;283
0000a8  f4403080          ORR      r0,r0,#0x10000        ;283
0000ac  6008              STR      r0,[r1,#0]            ;283
0000ae  e00c              B        |L14.202|
                  |L14.176|
0000b0  48d6              LDR      r0,|L14.1036|
0000b2  3808              SUBS     r0,r0,#8              ;283
0000b4  6800              LDR      r0,[r0,#0]            ;283
0000b6  f4203080          BIC      r0,r0,#0x10000        ;283
0000ba  49d4              LDR      r1,|L14.1036|
0000bc  3908              SUBS     r1,r1,#8              ;283
0000be  6008              STR      r0,[r1,#0]            ;283
0000c0  4608              MOV      r0,r1                 ;283
0000c2  6800              LDR      r0,[r0,#0]            ;283
0000c4  f4202080          BIC      r0,r0,#0x40000        ;283
0000c8  6008              STR      r0,[r1,#0]            ;283
                  |L14.202|
0000ca  bf00              NOP                            ;283
0000cc  6860              LDR      r0,[r4,#4]            ;286
0000ce  b190              CBZ      r0,|L14.246|
0000d0  f7fffffe          BL       HAL_GetTick
0000d4  4605              MOV      r5,r0                 ;289
0000d6  e006              B        |L14.230|
                  |L14.216|
0000d8  f7fffffe          BL       HAL_GetTick
0000dc  1b40              SUBS     r0,r0,r5              ;294
0000de  2864              CMP      r0,#0x64              ;294
0000e0  d901              BLS      |L14.230|
0000e2  2003              MOVS     r0,#3                 ;296
0000e4  e7b3              B        |L14.78|
                  |L14.230|
0000e6  48c9              LDR      r0,|L14.1036|
0000e8  3808              SUBS     r0,r0,#8              ;292
0000ea  6800              LDR      r0,[r0,#0]            ;292
0000ec  f3c04040          UBFX     r0,r0,#17,#1          ;292
0000f0  2800              CMP      r0,#0                 ;292
0000f2  d0f1              BEQ      |L14.216|
                  |L14.244|
0000f4  e011              B        |L14.282|
                  |L14.246|
0000f6  f7fffffe          BL       HAL_GetTick
0000fa  4605              MOV      r5,r0                 ;303
0000fc  e006              B        |L14.268|
                  |L14.254|
0000fe  f7fffffe          BL       HAL_GetTick
000102  1b40              SUBS     r0,r0,r5              ;308
000104  2864              CMP      r0,#0x64              ;308
000106  d901              BLS      |L14.268|
000108  2003              MOVS     r0,#3                 ;310
00010a  e7a0              B        |L14.78|
                  |L14.268|
00010c  48bf              LDR      r0,|L14.1036|
00010e  3808              SUBS     r0,r0,#8              ;306
000110  6800              LDR      r0,[r0,#0]            ;306
000112  f3c04040          UBFX     r0,r0,#17,#1          ;306
000116  2800              CMP      r0,#0                 ;306
000118  d1f1              BNE      |L14.254|
                  |L14.282|
00011a  7820              LDRB     r0,[r4,#0]            ;317
00011c  f0000002          AND      r0,r0,#2              ;317
000120  2802              CMP      r0,#2                 ;317
000122  d173              BNE      |L14.524|
000124  48b9              LDR      r0,|L14.1036|
000126  6800              LDR      r0,[r0,#0]            ;324
000128  f000000c          AND      r0,r0,#0xc            ;324
00012c  b158              CBZ      r0,|L14.326|
00012e  48b7              LDR      r0,|L14.1036|
000130  6800              LDR      r0,[r0,#0]            ;325
000132  f000000c          AND      r0,r0,#0xc            ;325
000136  2808              CMP      r0,#8                 ;325
000138  d121              BNE      |L14.382|
00013a  48b4              LDR      r0,|L14.1036|
00013c  1f00              SUBS     r0,r0,#4              ;325
00013e  6800              LDR      r0,[r0,#0]            ;325
000140  f4000080          AND      r0,r0,#0x400000       ;325
000144  b9d8              CBNZ     r0,|L14.382|
                  |L14.326|
000146  48b1              LDR      r0,|L14.1036|
000148  3808              SUBS     r0,r0,#8              ;328
00014a  6800              LDR      r0,[r0,#0]            ;328
00014c  f3c00040          UBFX     r0,r0,#1,#1           ;328
000150  b120              CBZ      r0,|L14.348|
000152  68e0              LDR      r0,[r4,#0xc]          ;328
000154  2801              CMP      r0,#1                 ;328
000156  d001              BEQ      |L14.348|
000158  2001              MOVS     r0,#1                 ;330
00015a  e778              B        |L14.78|
                  |L14.348|
00015c  48ab              LDR      r0,|L14.1036|
00015e  3808              SUBS     r0,r0,#8              ;336
000160  6800              LDR      r0,[r0,#0]            ;336
000162  f02000f8          BIC      r0,r0,#0xf8           ;336
000166  22f8              MOVS     r2,#0xf8              ;336
000168  fa92f2a2          RBIT     r2,r2                 ;336
00016c  fab2f282          CLZ      r2,r2                 ;336
000170  6921              LDR      r1,[r4,#0x10]         ;336
000172  4091              LSLS     r1,r1,r2              ;336
000174  4308              ORRS     r0,r0,r1              ;336
000176  49a5              LDR      r1,|L14.1036|
000178  3908              SUBS     r1,r1,#8              ;336
00017a  6008              STR      r0,[r1,#0]            ;336
00017c  e046              B        |L14.524|
                  |L14.382|
00017e  68e0              LDR      r0,[r4,#0xc]          ;342
000180  b350              CBZ      r0,|L14.472|
000182  48a2              LDR      r0,|L14.1036|
000184  3808              SUBS     r0,r0,#8              ;345
000186  6800              LDR      r0,[r0,#0]            ;345
000188  f0400001          ORR      r0,r0,#1              ;345
00018c  499f              LDR      r1,|L14.1036|
00018e  3908              SUBS     r1,r1,#8              ;345
000190  6008              STR      r0,[r1,#0]            ;345
000192  f7fffffe          BL       HAL_GetTick
000196  4605              MOV      r5,r0                 ;348
000198  e006              B        |L14.424|
                  |L14.410|
00019a  f7fffffe          BL       HAL_GetTick
00019e  1b40              SUBS     r0,r0,r5              ;353
0001a0  2802              CMP      r0,#2                 ;353
0001a2  d901              BLS      |L14.424|
0001a4  2003              MOVS     r0,#3                 ;355
0001a6  e752              B        |L14.78|
                  |L14.424|
0001a8  4898              LDR      r0,|L14.1036|
0001aa  3808              SUBS     r0,r0,#8              ;351
0001ac  6800              LDR      r0,[r0,#0]            ;351
0001ae  f3c00040          UBFX     r0,r0,#1,#1           ;351
0001b2  2800              CMP      r0,#0                 ;351
0001b4  d0f1              BEQ      |L14.410|
0001b6  4895              LDR      r0,|L14.1036|
0001b8  3808              SUBS     r0,r0,#8              ;360
0001ba  6800              LDR      r0,[r0,#0]            ;360
0001bc  f02000f8          BIC      r0,r0,#0xf8           ;360
0001c0  22f8              MOVS     r2,#0xf8              ;360
0001c2  fa92f2a2          RBIT     r2,r2                 ;360
0001c6  fab2f282          CLZ      r2,r2                 ;360
0001ca  6921              LDR      r1,[r4,#0x10]         ;360
0001cc  4091              LSLS     r1,r1,r2              ;360
0001ce  4308              ORRS     r0,r0,r1              ;360
0001d0  498e              LDR      r1,|L14.1036|
0001d2  3908              SUBS     r1,r1,#8              ;360
0001d4  6008              STR      r0,[r1,#0]            ;360
0001d6  e019              B        |L14.524|
                  |L14.472|
0001d8  488c              LDR      r0,|L14.1036|
0001da  3808              SUBS     r0,r0,#8              ;365
0001dc  6800              LDR      r0,[r0,#0]            ;365
0001de  f0200001          BIC      r0,r0,#1              ;365
0001e2  498a              LDR      r1,|L14.1036|
0001e4  3908              SUBS     r1,r1,#8              ;365
0001e6  6008              STR      r0,[r1,#0]            ;365
0001e8  f7fffffe          BL       HAL_GetTick
0001ec  4605              MOV      r5,r0                 ;368
0001ee  e006              B        |L14.510|
                  |L14.496|
0001f0  f7fffffe          BL       HAL_GetTick
0001f4  1b40              SUBS     r0,r0,r5              ;373
0001f6  2802              CMP      r0,#2                 ;373
0001f8  d901              BLS      |L14.510|
0001fa  2003              MOVS     r0,#3                 ;375
0001fc  e727              B        |L14.78|
                  |L14.510|
0001fe  4883              LDR      r0,|L14.1036|
000200  3808              SUBS     r0,r0,#8              ;371
000202  6800              LDR      r0,[r0,#0]            ;371
000204  f3c00040          UBFX     r0,r0,#1,#1           ;371
000208  2800              CMP      r0,#0                 ;371
00020a  d1f1              BNE      |L14.496|
                  |L14.524|
00020c  7820              LDRB     r0,[r4,#0]            ;382
00020e  f0000008          AND      r0,r0,#8              ;382
000212  2808              CMP      r0,#8                 ;382
000214  d136              BNE      |L14.644|
000216  6960              LDR      r0,[r4,#0x14]         ;388
000218  b1d0              CBZ      r0,|L14.592|
00021a  487c              LDR      r0,|L14.1036|
00021c  306c              ADDS     r0,r0,#0x6c           ;391
00021e  6800              LDR      r0,[r0,#0]            ;391
000220  f0400001          ORR      r0,r0,#1              ;391
000224  4979              LDR      r1,|L14.1036|
000226  316c              ADDS     r1,r1,#0x6c           ;391
000228  6008              STR      r0,[r1,#0]            ;391
00022a  f7fffffe          BL       HAL_GetTick
00022e  4605              MOV      r5,r0                 ;394
000230  e006              B        |L14.576|
                  |L14.562|
000232  f7fffffe          BL       HAL_GetTick
000236  1b40              SUBS     r0,r0,r5              ;399
000238  2802              CMP      r0,#2                 ;399
00023a  d901              BLS      |L14.576|
00023c  2003              MOVS     r0,#3                 ;401
00023e  e706              B        |L14.78|
                  |L14.576|
000240  4872              LDR      r0,|L14.1036|
000242  306c              ADDS     r0,r0,#0x6c           ;397
000244  6800              LDR      r0,[r0,#0]            ;397
000246  f3c00040          UBFX     r0,r0,#1,#1           ;397
00024a  2800              CMP      r0,#0                 ;397
00024c  d0f1              BEQ      |L14.562|
00024e  e019              B        |L14.644|
                  |L14.592|
000250  486e              LDR      r0,|L14.1036|
000252  306c              ADDS     r0,r0,#0x6c           ;408
000254  6800              LDR      r0,[r0,#0]            ;408
000256  f0200001          BIC      r0,r0,#1              ;408
00025a  496c              LDR      r1,|L14.1036|
00025c  316c              ADDS     r1,r1,#0x6c           ;408
00025e  6008              STR      r0,[r1,#0]            ;408
000260  f7fffffe          BL       HAL_GetTick
000264  4605              MOV      r5,r0                 ;411
000266  e006              B        |L14.630|
                  |L14.616|
000268  f7fffffe          BL       HAL_GetTick
00026c  1b40              SUBS     r0,r0,r5              ;416
00026e  2802              CMP      r0,#2                 ;416
000270  d901              BLS      |L14.630|
000272  2003              MOVS     r0,#3                 ;418
000274  e6eb              B        |L14.78|
                  |L14.630|
000276  4865              LDR      r0,|L14.1036|
000278  306c              ADDS     r0,r0,#0x6c           ;414
00027a  6800              LDR      r0,[r0,#0]            ;414
00027c  f3c00040          UBFX     r0,r0,#1,#1           ;414
000280  2800              CMP      r0,#0                 ;414
000282  d1f1              BNE      |L14.616|
                  |L14.644|
000284  7820              LDRB     r0,[r4,#0]            ;424
000286  f0000004          AND      r0,r0,#4              ;424
00028a  2804              CMP      r0,#4                 ;424
00028c  d171              BNE      |L14.882|
00028e  bf00              NOP                            ;430
000290  485e              LDR      r0,|L14.1036|
000292  3038              ADDS     r0,r0,#0x38           ;430
000294  6800              LDR      r0,[r0,#0]            ;430
000296  f0405080          ORR      r0,r0,#0x10000000     ;430
00029a  495c              LDR      r1,|L14.1036|
00029c  3138              ADDS     r1,r1,#0x38           ;430
00029e  6008              STR      r0,[r1,#0]            ;430
0002a0  4608              MOV      r0,r1                 ;430
0002a2  6800              LDR      r0,[r0,#0]            ;430
0002a4  f0005080          AND      r0,r0,#0x10000000     ;430
0002a8  9000              STR      r0,[sp,#0]            ;430
0002aa  bf00              NOP                            ;430
0002ac  bf00              NOP                            ;430
0002ae  4858              LDR      r0,|L14.1040|
0002b0  6800              LDR      r0,[r0,#0]            ;433
0002b2  f4407080          ORR      r0,r0,#0x100          ;433
0002b6  4956              LDR      r1,|L14.1040|
0002b8  6008              STR      r0,[r1,#0]            ;433
0002ba  f7fffffe          BL       HAL_GetTick
0002be  4605              MOV      r5,r0                 ;436
0002c0  e006              B        |L14.720|
                  |L14.706|
0002c2  f7fffffe          BL       HAL_GetTick
0002c6  1b40              SUBS     r0,r0,r5              ;440
0002c8  2864              CMP      r0,#0x64              ;440
0002ca  d901              BLS      |L14.720|
0002cc  2003              MOVS     r0,#3                 ;442
0002ce  e6be              B        |L14.78|
                  |L14.720|
0002d0  484f              LDR      r0,|L14.1040|
0002d2  6800              LDR      r0,[r0,#0]            ;438
0002d4  f4007080          AND      r0,r0,#0x100          ;438
0002d8  2800              CMP      r0,#0                 ;438
0002da  d0f2              BEQ      |L14.706|
0002dc  bf00              NOP                            ;447
0002de  68a0              LDR      r0,[r4,#8]            ;447
0002e0  2801              CMP      r0,#1                 ;447
0002e2  d108              BNE      |L14.758|
0002e4  4849              LDR      r0,|L14.1036|
0002e6  3068              ADDS     r0,r0,#0x68           ;447
0002e8  6800              LDR      r0,[r0,#0]            ;447
0002ea  f0400001          ORR      r0,r0,#1              ;447
0002ee  4947              LDR      r1,|L14.1036|
0002f0  3168              ADDS     r1,r1,#0x68           ;447
0002f2  6008              STR      r0,[r1,#0]            ;447
0002f4  e02d              B        |L14.850|
                  |L14.758|
0002f6  68a0              LDR      r0,[r4,#8]            ;447
0002f8  b968              CBNZ     r0,|L14.790|
0002fa  4844              LDR      r0,|L14.1036|
0002fc  3068              ADDS     r0,r0,#0x68           ;447
0002fe  6800              LDR      r0,[r0,#0]            ;447
000300  f0200001          BIC      r0,r0,#1              ;447
000304  4941              LDR      r1,|L14.1036|
000306  3168              ADDS     r1,r1,#0x68           ;447
000308  6008              STR      r0,[r1,#0]            ;447
00030a  4608              MOV      r0,r1                 ;447
00030c  6800              LDR      r0,[r0,#0]            ;447
00030e  f0200004          BIC      r0,r0,#4              ;447
000312  6008              STR      r0,[r1,#0]            ;447
000314  e01d              B        |L14.850|
                  |L14.790|
000316  68a0              LDR      r0,[r4,#8]            ;447
000318  2805              CMP      r0,#5                 ;447
00031a  d10d              BNE      |L14.824|
00031c  483b              LDR      r0,|L14.1036|
00031e  3068              ADDS     r0,r0,#0x68           ;447
000320  6800              LDR      r0,[r0,#0]            ;447
000322  f0400004          ORR      r0,r0,#4              ;447
000326  4939              LDR      r1,|L14.1036|
000328  3168              ADDS     r1,r1,#0x68           ;447
00032a  6008              STR      r0,[r1,#0]            ;447
00032c  4608              MOV      r0,r1                 ;447
00032e  6800              LDR      r0,[r0,#0]            ;447
000330  f0400001          ORR      r0,r0,#1              ;447
000334  6008              STR      r0,[r1,#0]            ;447
000336  e00c              B        |L14.850|
                  |L14.824|
000338  4834              LDR      r0,|L14.1036|
00033a  3068              ADDS     r0,r0,#0x68           ;447
00033c  6800              LDR      r0,[r0,#0]            ;447
00033e  f0200001          BIC      r0,r0,#1              ;447
000342  4932              LDR      r1,|L14.1036|
000344  3168              ADDS     r1,r1,#0x68           ;447
000346  6008              STR      r0,[r1,#0]            ;447
000348  4608              MOV      r0,r1                 ;447
00034a  6800              LDR      r0,[r0,#0]            ;447
00034c  f0200004          BIC      r0,r0,#4              ;447
000350  6008              STR      r0,[r1,#0]            ;447
                  |L14.850|
000352  bf00              NOP                            ;447
000354  68a0              LDR      r0,[r4,#8]            ;449
000356  b1a8              CBZ      r0,|L14.900|
000358  f7fffffe          BL       HAL_GetTick
00035c  4605              MOV      r5,r0                 ;452
00035e  e009              B        |L14.884|
                  |L14.864|
000360  f7fffffe          BL       HAL_GetTick
000364  1b40              SUBS     r0,r0,r5              ;457
000366  f2413188          MOV      r1,#0x1388            ;457
00036a  4288              CMP      r0,r1                 ;457
00036c  d902              BLS      |L14.884|
00036e  2003              MOVS     r0,#3                 ;459
000370  e66d              B        |L14.78|
                  |L14.882|
000372  e01b              B        |L14.940|
                  |L14.884|
000374  4825              LDR      r0,|L14.1036|
000376  3068              ADDS     r0,r0,#0x68           ;455
000378  6800              LDR      r0,[r0,#0]            ;455
00037a  f3c00040          UBFX     r0,r0,#1,#1           ;455
00037e  2800              CMP      r0,#0                 ;455
000380  d0ee              BEQ      |L14.864|
000382  e013              B        |L14.940|
                  |L14.900|
000384  f7fffffe          BL       HAL_GetTick
000388  4605              MOV      r5,r0                 ;466
00038a  e008              B        |L14.926|
                  |L14.908|
00038c  f7fffffe          BL       HAL_GetTick
000390  1b40              SUBS     r0,r0,r5              ;471
000392  f2413188          MOV      r1,#0x1388            ;471
000396  4288              CMP      r0,r1                 ;471
000398  d901              BLS      |L14.926|
00039a  2003              MOVS     r0,#3                 ;473
00039c  e657              B        |L14.78|
                  |L14.926|
00039e  481b              LDR      r0,|L14.1036|
0003a0  3068              ADDS     r0,r0,#0x68           ;469
0003a2  6800              LDR      r0,[r0,#0]            ;469
0003a4  f3c00040          UBFX     r0,r0,#1,#1           ;469
0003a8  2800              CMP      r0,#0                 ;469
0003aa  d1ef              BNE      |L14.908|
                  |L14.940|
0003ac  69a0              LDR      r0,[r4,#0x18]         ;481
0003ae  b388              CBZ      r0,|L14.1044|
0003b0  4816              LDR      r0,|L14.1036|
0003b2  6800              LDR      r0,[r0,#0]            ;484
0003b4  f000000c          AND      r0,r0,#0xc            ;484
0003b8  2808              CMP      r0,#8                 ;484
0003ba  d07a              BEQ      |L14.1202|
0003bc  69a0              LDR      r0,[r4,#0x18]         ;486
0003be  2802              CMP      r0,#2                 ;486
0003c0  d15b              BNE      |L14.1146|
0003c2  4812              LDR      r0,|L14.1036|
0003c4  3808              SUBS     r0,r0,#8              ;496
0003c6  6800              LDR      r0,[r0,#0]            ;496
0003c8  f0207080          BIC      r0,r0,#0x1000000      ;496
0003cc  490f              LDR      r1,|L14.1036|
0003ce  3908              SUBS     r1,r1,#8              ;496
0003d0  6008              STR      r0,[r1,#0]            ;496
0003d2  f7fffffe          BL       HAL_GetTick
0003d6  4605              MOV      r5,r0                 ;499
0003d8  e006              B        |L14.1000|
                  |L14.986|
0003da  f7fffffe          BL       HAL_GetTick
0003de  1b40              SUBS     r0,r0,r5              ;504
0003e0  2802              CMP      r0,#2                 ;504
0003e2  d901              BLS      |L14.1000|
0003e4  2003              MOVS     r0,#3                 ;506
0003e6  e632              B        |L14.78|
                  |L14.1000|
0003e8  4808              LDR      r0,|L14.1036|
0003ea  3808              SUBS     r0,r0,#8              ;502
0003ec  6800              LDR      r0,[r0,#0]            ;502
0003ee  f3c06040          UBFX     r0,r0,#25,#1          ;502
0003f2  2800              CMP      r0,#0                 ;502
0003f4  d1f1              BNE      |L14.986|
0003f6  e9d40107          LDRD     r0,r1,[r4,#0x1c]      ;511
0003fa  4308              ORRS     r0,r0,r1              ;511
0003fc  f64772c0          MOV      r2,#0x7fc0            ;511
000400  fa92f2a2          RBIT     r2,r2                 ;511
000404  fab2f282          CLZ      r2,r2                 ;511
000408  6a61              LDR      r1,[r4,#0x24]         ;511
00040a  e004              B        |L14.1046|
                  |L14.1036|
                          DCD      0x40023808
                  |L14.1040|
                          DCD      0x40007000
                  |L14.1044|
000414  e04f              B        |L14.1206|
                  |L14.1046|
000416  4091              LSLS     r1,r1,r2              ;511
000418  4308              ORRS     r0,r0,r1              ;511
00041a  2201              MOVS     r2,#1                 ;511
00041c  6aa1              LDR      r1,[r4,#0x28]         ;511
00041e  ebc20151          RSB      r1,r2,r1,LSR #1       ;511
000422  f44f3240          MOV      r2,#0x30000           ;511
000426  fa92f2a2          RBIT     r2,r2                 ;511
00042a  fab2f282          CLZ      r2,r2                 ;511
00042e  4091              LSLS     r1,r1,r2              ;511
000430  4308              ORRS     r0,r0,r1              ;511
000432  f04f6270          MOV      r2,#0xf000000         ;511
000436  fa92f2a2          RBIT     r2,r2                 ;511
00043a  fab2f282          CLZ      r2,r2                 ;511
00043e  6ae1              LDR      r1,[r4,#0x2c]         ;511
000440  4091              LSLS     r1,r1,r2              ;511
000442  4308              ORRS     r0,r0,r1              ;511
000444  491d              LDR      r1,|L14.1212|
000446  6008              STR      r0,[r1,#0]            ;511
000448  1f08              SUBS     r0,r1,#4              ;517
00044a  6800              LDR      r0,[r0,#0]            ;517
00044c  f0407080          ORR      r0,r0,#0x1000000      ;517
000450  1f09              SUBS     r1,r1,#4              ;517
000452  6008              STR      r0,[r1,#0]            ;517
000454  f7fffffe          BL       HAL_GetTick
000458  4605              MOV      r5,r0                 ;520
00045a  e006              B        |L14.1130|
                  |L14.1116|
00045c  f7fffffe          BL       HAL_GetTick
000460  1b40              SUBS     r0,r0,r5              ;525
000462  2802              CMP      r0,#2                 ;525
000464  d901              BLS      |L14.1130|
000466  2003              MOVS     r0,#3                 ;527
000468  e5f1              B        |L14.78|
                  |L14.1130|
00046a  4814              LDR      r0,|L14.1212|
00046c  1f00              SUBS     r0,r0,#4              ;523
00046e  6800              LDR      r0,[r0,#0]            ;523
000470  f3c06040          UBFX     r0,r0,#25,#1          ;523
000474  2800              CMP      r0,#0                 ;523
000476  d0f1              BEQ      |L14.1116|
000478  e01d              B        |L14.1206|
                  |L14.1146|
00047a  4810              LDR      r0,|L14.1212|
00047c  1f00              SUBS     r0,r0,#4              ;534
00047e  6800              LDR      r0,[r0,#0]            ;534
000480  f0207080          BIC      r0,r0,#0x1000000      ;534
000484  490d              LDR      r1,|L14.1212|
000486  1f09              SUBS     r1,r1,#4              ;534
000488  6008              STR      r0,[r1,#0]            ;534
00048a  f7fffffe          BL       HAL_GetTick
00048e  4605              MOV      r5,r0                 ;537
000490  e007              B        |L14.1186|
                  |L14.1170|
000492  f7fffffe          BL       HAL_GetTick
000496  1b40              SUBS     r0,r0,r5              ;542
000498  2802              CMP      r0,#2                 ;542
00049a  d902              BLS      |L14.1186|
00049c  2003              MOVS     r0,#3                 ;544
00049e  e5d6              B        |L14.78|
0004a0  e007              B        |L14.1202|
                  |L14.1186|
0004a2  4806              LDR      r0,|L14.1212|
0004a4  1f00              SUBS     r0,r0,#4              ;540
0004a6  6800              LDR      r0,[r0,#0]            ;540
0004a8  f3c06040          UBFX     r0,r0,#25,#1          ;540
0004ac  2800              CMP      r0,#0                 ;540
0004ae  d1f0              BNE      |L14.1170|
0004b0  e001              B        |L14.1206|
                  |L14.1202|
0004b2  2001              MOVS     r0,#1                 ;551
0004b4  e5cb              B        |L14.78|
                  |L14.1206|
0004b6  2000              MOVS     r0,#0                 ;554
0004b8  e5c9              B        |L14.78|
;;;556     
                          ENDP

0004ba  0000              DCW      0x0000
                  |L14.1212|
                          DCD      0x40023804

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_rcc_c_b7071a4b____REV16|
#line 388 "..\\..\\..\\..\\Library\\STM32F7xx_HAL_Driver\\Core\\cmsis_armcc.h"
|__asm___19_stm32f7xx_hal_rcc_c_b7071a4b____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_rcc_c_b7071a4b____REVSH|
#line 402
|__asm___19_stm32f7xx_hal_rcc_c_b7071a4b____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_rcc_c_b7071a4b____RRX|
#line 587
|__asm___19_stm32f7xx_hal_rcc_c_b7071a4b____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
