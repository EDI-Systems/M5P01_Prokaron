; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f0xx_hal_gpio.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f0xx_hal_gpio.d --cpu=Cortex-M0 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\STM32F0xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\STM32F0xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F030F4P6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0\Drivers\CMSIS\Device\ST\STM32F0xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F030x6 -DSTM32F030x6 -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f0xx_hal_gpio.crf ..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\STM32F0xx_HAL_Driver\Src\stm32f0xx_hal_gpio.c]
                          THUMB

                          AREA ||i.HAL_GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_DeInit PROC
;;;310      */
;;;311    void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
000000  2300              MOVS     r3,#0
;;;312    {
;;;313      uint32_t position = 0x00U;
;;;314      uint32_t iocurrent = 0x00U;
;;;315      uint32_t tmp = 0x00U;
;;;316    
;;;317      /* Check the parameters */
;;;318      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;319      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;320    
;;;321      /* Configure the port pins */
;;;322      while ((GPIO_Pin >> position) != RESET)
000002  2900              CMP      r1,#0
000004  d05d              BEQ      |L1.194|
000006  b5f0              PUSH     {r4-r7,lr}            ;312
                  |L1.8|
;;;323      {
;;;324        /* Get current io position */
;;;325        iocurrent = GPIO_Pin & (1U << position);
000008  2401              MOVS     r4,#1
00000a  409c              LSLS     r4,r4,r3
00000c  4622              MOV      r2,r4
00000e  400a              ANDS     r2,r2,r1
;;;326    
;;;327        if (iocurrent)
000010  d052              BEQ      |L1.184|
;;;328        {
;;;329          /*------------------------- GPIO Mode Configuration --------------------*/
;;;330          /* Configure IO Direction in Input Floting Mode */
;;;331          CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2U)); 
000012  6806              LDR      r6,[r0,#0]
000014  005f              LSLS     r7,r3,#1
000016  2503              MOVS     r5,#3
000018  40bd              LSLS     r5,r5,r7
00001a  43ae              BICS     r6,r6,r5
00001c  46ac              MOV      r12,r5
00001e  6006              STR      r6,[r0,#0]
;;;332      
;;;333          /* Configure the default Alternate Function in current IO */ 
;;;334          CLEAR_BIT(GPIOx->AFR[position >> 3U], 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
000020  08dd              LSRS     r5,r3,#3
000022  00ad              LSLS     r5,r5,#2
000024  182d              ADDS     r5,r5,r0
000026  6a2e              LDR      r6,[r5,#0x20]
000028  46ae              MOV      lr,r5
00002a  075d              LSLS     r5,r3,#29
00002c  0eef              LSRS     r7,r5,#27
00002e  250f              MOVS     r5,#0xf
000030  40bd              LSLS     r5,r5,r7
000032  43ae              BICS     r6,r6,r5
000034  4675              MOV      r5,lr
000036  622e              STR      r6,[r5,#0x20]
;;;335      
;;;336          /* Configure the default value for IO Speed */
;;;337          CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
000038  6886              LDR      r6,[r0,#8]
00003a  4665              MOV      r5,r12
00003c  43ae              BICS     r6,r6,r5
00003e  6086              STR      r6,[r0,#8]
;;;338                      
;;;339          /* Configure the default value IO Output Type */
;;;340          CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
000040  6845              LDR      r5,[r0,#4]
000042  43a5              BICS     r5,r5,r4
000044  6045              STR      r5,[r0,#4]
;;;341      
;;;342          /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
;;;343          CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2U));
000046  68c4              LDR      r4,[r0,#0xc]
000048  4665              MOV      r5,r12
00004a  43ac              BICS     r4,r4,r5
00004c  60c4              STR      r4,[r0,#0xc]
;;;344    
;;;345          /*------------------------- EXTI Mode Configuration --------------------*/
;;;346          /* Clear the External Interrupt or Event for the current IO */
;;;347          
;;;348          tmp = SYSCFG->EXTICR[position >> 2U];
00004e  089d              LSRS     r5,r3,#2
000050  4c1c              LDR      r4,|L1.196|
000052  00ad              LSLS     r5,r5,#2
000054  192d              ADDS     r5,r5,r4
000056  68af              LDR      r7,[r5,#8]
;;;349          tmp &= ((0x0FU) << (4U * (position & 0x03U)));
000058  079c              LSLS     r4,r3,#30
00005a  0f26              LSRS     r6,r4,#28
00005c  240f              MOVS     r4,#0xf
00005e  40b4              LSLS     r4,r4,r6
000060  46a4              MOV      r12,r4
000062  403c              ANDS     r4,r4,r7
;;;350          if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
000064  2709              MOVS     r7,#9
000066  06ff              LSLS     r7,r7,#27
000068  42b8              CMP      r0,r7
00006a  d101              BNE      |L1.112|
00006c  2700              MOVS     r7,#0
00006e  e00f              B        |L1.144|
                  |L1.112|
000070  4f15              LDR      r7,|L1.200|
000072  42b8              CMP      r0,r7
000074  d101              BNE      |L1.122|
000076  2701              MOVS     r7,#1
000078  e00a              B        |L1.144|
                  |L1.122|
00007a  4f14              LDR      r7,|L1.204|
00007c  42b8              CMP      r0,r7
00007e  d101              BNE      |L1.132|
000080  2702              MOVS     r7,#2
000082  e005              B        |L1.144|
                  |L1.132|
000084  4f12              LDR      r7,|L1.208|
000086  42b8              CMP      r0,r7
000088  d101              BNE      |L1.142|
00008a  2703              MOVS     r7,#3
00008c  e000              B        |L1.144|
                  |L1.142|
00008e  2705              MOVS     r7,#5
                  |L1.144|
000090  40b7              LSLS     r7,r7,r6
000092  42a7              CMP      r7,r4
000094  d110              BNE      |L1.184|
;;;351          {
;;;352            tmp = (0x0FU) << (4U * (position & 0x03U));
;;;353            CLEAR_BIT(SYSCFG->EXTICR[position >> 2U], tmp);
000096  68ae              LDR      r6,[r5,#8]
000098  4664              MOV      r4,r12                ;350
00009a  43a6              BICS     r6,r6,r4
00009c  60ae              STR      r6,[r5,#8]
;;;354            
;;;355            /* Clear EXTI line configuration */
;;;356            CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
00009e  4c0d              LDR      r4,|L1.212|
0000a0  6825              LDR      r5,[r4,#0]
0000a2  4395              BICS     r5,r5,r2
0000a4  6025              STR      r5,[r4,#0]
;;;357            CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
0000a6  6865              LDR      r5,[r4,#4]
0000a8  4395              BICS     r5,r5,r2
0000aa  6065              STR      r5,[r4,#4]
;;;358            
;;;359            /* Clear Rising Falling edge configuration */
;;;360            CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
0000ac  68a5              LDR      r5,[r4,#8]
0000ae  4395              BICS     r5,r5,r2
0000b0  60a5              STR      r5,[r4,#8]
;;;361            CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
0000b2  68e5              LDR      r5,[r4,#0xc]
0000b4  4395              BICS     r5,r5,r2
0000b6  60e5              STR      r5,[r4,#0xc]
                  |L1.184|
0000b8  460a              MOV      r2,r1
0000ba  1c5b              ADDS     r3,r3,#1
0000bc  40da              LSRS     r2,r2,r3              ;322
0000be  d1a3              BNE      |L1.8|
;;;362          }
;;;363        }
;;;364        
;;;365        position++;
;;;366      }
;;;367    }
0000c0  bdf0              POP      {r4-r7,pc}
                  |L1.194|
0000c2  4770              BX       lr
;;;368    
                          ENDP

                  |L1.196|
                          DCD      0x40010000
                  |L1.200|
                          DCD      0x48000400
                  |L1.204|
                          DCD      0x48000800
                  |L1.208|
                          DCD      0x48000c00
                  |L1.212|
                          DCD      0x40010400

                          AREA ||i.HAL_GPIO_EXTI_Callback||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_EXTI_Callback PROC
;;;514      */
;;;515    __weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
000000  4770              BX       lr
;;;516    {
;;;517      /* Prevent unused argument(s) compilation warning */
;;;518      UNUSED(GPIO_Pin);
;;;519    
;;;520      /* NOTE: This function should not be modified, when the callback is needed,
;;;521                the HAL_GPIO_EXTI_Callback could be implemented in the user file
;;;522       */ 
;;;523    }
;;;524    
                          ENDP


                          AREA ||i.HAL_GPIO_EXTI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_EXTI_IRQHandler PROC
;;;499      */
;;;500    void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
000000  4904              LDR      r1,|L3.20|
;;;501    {
;;;502      /* EXTI line interrupt detected */
;;;503      if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
000002  694a              LDR      r2,[r1,#0x14]
000004  4202              TST      r2,r0
000006  d004              BEQ      |L3.18|
000008  b510              PUSH     {r4,lr}               ;501
;;;504      { 
;;;505        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
00000a  6148              STR      r0,[r1,#0x14]
;;;506        HAL_GPIO_EXTI_Callback(GPIO_Pin);
00000c  f7fffffe          BL       HAL_GPIO_EXTI_Callback
;;;507      }
;;;508    }
000010  bd10              POP      {r4,pc}
                  |L3.18|
000012  4770              BX       lr
;;;509    
                          ENDP

                  |L3.20|
                          DCD      0x40010400

                          AREA ||i.HAL_GPIO_Init||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_Init PROC
;;;185      */
;;;186    void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
000000  680b              LDR      r3,[r1,#0]
;;;187    { 
;;;188      uint32_t position = 0x00U;
000002  2200              MOVS     r2,#0
;;;189      uint32_t iocurrent = 0x00U;
;;;190      uint32_t temp = 0x00U;
;;;191    
;;;192      /* Check the parameters */
;;;193      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;194      assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
;;;195      assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
;;;196      assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
;;;197    
;;;198      /* Configure the port pins */
;;;199      while (((GPIO_Init->Pin) >> position) != RESET)
000004  2b00              CMP      r3,#0
000006  d06f              BEQ      |L4.232|
000008  b4f8              PUSH     {r3-r7}               ;187
                  |L4.10|
;;;200      {
;;;201        /* Get current io position */
;;;202        iocurrent = (GPIO_Init->Pin) & (1U << position);
00000a  2701              MOVS     r7,#1
00000c  680b              LDR      r3,[r1,#0]
00000e  4097              LSLS     r7,r7,r2
000010  403b              ANDS     r3,r3,r7
;;;203        
;;;204        if(iocurrent)
000012  d06a              BEQ      |L4.234|
;;;205        {
;;;206          /*--------------------- GPIO Mode Configuration ------------------------*/
;;;207          /* In case of Alternate function mode selection */
;;;208          if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
000014  684c              LDR      r4,[r1,#4]
000016  2c02              CMP      r4,#2
000018  d001              BEQ      |L4.30|
00001a  2c12              CMP      r4,#0x12
00001c  d10e              BNE      |L4.60|
                  |L4.30|
;;;209          {
;;;210            /* Check the Alternate function parameters */
;;;211            assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
;;;212            assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
;;;213            
;;;214            /* Configure Alternate function mapped with the current IO */ 
;;;215            temp = GPIOx->AFR[position >> 3];
00001e  08d4              LSRS     r4,r2,#3
000020  00a4              LSLS     r4,r4,#2
000022  1824              ADDS     r4,r4,r0
000024  46a4              MOV      r12,r4
000026  6a24              LDR      r4,[r4,#0x20]
;;;216            CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
000028  0755              LSLS     r5,r2,#29
00002a  0eed              LSRS     r5,r5,#27
00002c  260f              MOVS     r6,#0xf
00002e  40ae              LSLS     r6,r6,r5
000030  43b4              BICS     r4,r4,r6
;;;217            SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
000032  690e              LDR      r6,[r1,#0x10]
000034  40ae              LSLS     r6,r6,r5
000036  4326              ORRS     r6,r6,r4
000038  4664              MOV      r4,r12
;;;218            GPIOx->AFR[position >> 3U] = temp;
00003a  6226              STR      r6,[r4,#0x20]
                  |L4.60|
;;;219          }
;;;220    
;;;221          /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
;;;222          temp = GPIOx->MODER;
00003c  6805              LDR      r5,[r0,#0]
;;;223          CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
00003e  0056              LSLS     r6,r2,#1
000040  2403              MOVS     r4,#3
000042  40b4              LSLS     r4,r4,r6
000044  46a4              MOV      r12,r4
000046  43a5              BICS     r5,r5,r4
;;;224          SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
000048  790c              LDRB     r4,[r1,#4]
00004a  07a4              LSLS     r4,r4,#30
00004c  0fa4              LSRS     r4,r4,#30
00004e  40b4              LSLS     r4,r4,r6
000050  432c              ORRS     r4,r4,r5
;;;225          GPIOx->MODER = temp;
000052  6004              STR      r4,[r0,#0]
;;;226    
;;;227          /* In case of Output or Alternate function mode selection */
;;;228          if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
000054  684c              LDR      r4,[r1,#4]
000056  2c01              CMP      r4,#1
000058  d005              BEQ      |L4.102|
00005a  2c02              CMP      r4,#2
00005c  d003              BEQ      |L4.102|
00005e  2c11              CMP      r4,#0x11
000060  d001              BEQ      |L4.102|
000062  2c12              CMP      r4,#0x12
000064  d10f              BNE      |L4.134|
                  |L4.102|
;;;229              (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
;;;230          {
;;;231            /* Check the Speed parameter */
;;;232            assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
;;;233            /* Configure the IO Speed */
;;;234            temp = GPIOx->OSPEEDR; 
000066  6885              LDR      r5,[r0,#8]
000068  4664              MOV      r4,r12
;;;235            CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
00006a  43a5              BICS     r5,r5,r4
00006c  462c              MOV      r4,r5
;;;236            SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
00006e  68cd              LDR      r5,[r1,#0xc]
000070  40b5              LSLS     r5,r5,r6
000072  4325              ORRS     r5,r5,r4
;;;237            GPIOx->OSPEEDR = temp;
000074  6085              STR      r5,[r0,#8]
;;;238    
;;;239            /* Configure the IO Output Type */
;;;240            temp = GPIOx->OTYPER;
000076  6845              LDR      r5,[r0,#4]
;;;241            CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
;;;242            SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
000078  790c              LDRB     r4,[r1,#4]
00007a  43bd              BICS     r5,r5,r7              ;241
00007c  06e4              LSLS     r4,r4,#27
00007e  0fe4              LSRS     r4,r4,#31
000080  4094              LSLS     r4,r4,r2
000082  432c              ORRS     r4,r4,r5
;;;243            GPIOx->OTYPER = temp;
000084  6044              STR      r4,[r0,#4]
                  |L4.134|
;;;244          }
;;;245    
;;;246          /* Activate the Pull-up or Pull down resistor for the current IO */
;;;247          temp = GPIOx->PUPDR;
000086  68c4              LDR      r4,[r0,#0xc]
000088  4665              MOV      r5,r12
;;;248          CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
00008a  43ac              BICS     r4,r4,r5
;;;249          SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
00008c  688d              LDR      r5,[r1,#8]
00008e  40b5              LSLS     r5,r5,r6
000090  4325              ORRS     r5,r5,r4
;;;250          GPIOx->PUPDR = temp;
000092  60c5              STR      r5,[r0,#0xc]
;;;251    
;;;252          /*--------------------- EXTI Mode Configuration ------------------------*/
;;;253          /* Configure the External Interrupt or event for the current IO */
;;;254          if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
000094  684c              LDR      r4,[r1,#4]
000096  00e4              LSLS     r4,r4,#3
000098  d549              BPL      |L4.302|
;;;255          {
;;;256            /* Enable SYSCFG Clock */
;;;257            __HAL_RCC_SYSCFG_CLK_ENABLE();
00009a  4c29              LDR      r4,|L4.320|
00009c  69a5              LDR      r5,[r4,#0x18]
00009e  2601              MOVS     r6,#1
0000a0  4335              ORRS     r5,r5,r6
0000a2  61a5              STR      r5,[r4,#0x18]
0000a4  69a4              LDR      r4,[r4,#0x18]
;;;258      
;;;259            temp = SYSCFG->EXTICR[position >> 2];
0000a6  0895              LSRS     r5,r2,#2
0000a8  4034              ANDS     r4,r4,r6              ;257
0000aa  9400              STR      r4,[sp,#0]
0000ac  4c25              LDR      r4,|L4.324|
0000ae  00ad              LSLS     r5,r5,#2
0000b0  192f              ADDS     r7,r5,r4
0000b2  68bc              LDR      r4,[r7,#8]
;;;260            CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
0000b4  0795              LSLS     r5,r2,#30
0000b6  0f2e              LSRS     r6,r5,#28
0000b8  250f              MOVS     r5,#0xf
0000ba  40b5              LSLS     r5,r5,r6
0000bc  43ac              BICS     r4,r4,r5
;;;261            SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
0000be  2509              MOVS     r5,#9
0000c0  06ed              LSLS     r5,r5,#27
0000c2  42a8              CMP      r0,r5
0000c4  d101              BNE      |L4.202|
0000c6  2500              MOVS     r5,#0
0000c8  e011              B        |L4.238|
                  |L4.202|
0000ca  4d1f              LDR      r5,|L4.328|
0000cc  42a8              CMP      r0,r5
0000ce  d101              BNE      |L4.212|
0000d0  2501              MOVS     r5,#1
0000d2  e00c              B        |L4.238|
                  |L4.212|
0000d4  4d1d              LDR      r5,|L4.332|
0000d6  42a8              CMP      r0,r5
0000d8  d101              BNE      |L4.222|
0000da  2502              MOVS     r5,#2
0000dc  e007              B        |L4.238|
                  |L4.222|
0000de  4d1c              LDR      r5,|L4.336|
0000e0  42a8              CMP      r0,r5
0000e2  d103              BNE      |L4.236|
0000e4  2503              MOVS     r5,#3
0000e6  e002              B        |L4.238|
                  |L4.232|
0000e8  e028              B        |L4.316|
                  |L4.234|
0000ea  e020              B        |L4.302|
                  |L4.236|
0000ec  2505              MOVS     r5,#5
                  |L4.238|
0000ee  40b5              LSLS     r5,r5,r6
0000f0  4325              ORRS     r5,r5,r4
;;;262            SYSCFG->EXTICR[position >> 2] = temp;
0000f2  60bd              STR      r5,[r7,#8]
;;;263                      
;;;264            /* Clear EXTI line configuration */
;;;265            temp = EXTI->IMR;
0000f4  4c17              LDR      r4,|L4.340|
0000f6  6825              LDR      r5,[r4,#0]
;;;266            CLEAR_BIT(temp, (uint32_t)iocurrent);
;;;267            if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
0000f8  684e              LDR      r6,[r1,#4]
0000fa  439d              BICS     r5,r5,r3              ;266
0000fc  03f6              LSLS     r6,r6,#15
0000fe  d500              BPL      |L4.258|
;;;268            {
;;;269              SET_BIT(temp, iocurrent); 
000100  431d              ORRS     r5,r5,r3
                  |L4.258|
;;;270            }
;;;271            EXTI->IMR = temp;
000102  6025              STR      r5,[r4,#0]
;;;272    
;;;273            temp = EXTI->EMR;
000104  6865              LDR      r5,[r4,#4]
;;;274            CLEAR_BIT(temp, (uint32_t)iocurrent);      
;;;275            if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
000106  684e              LDR      r6,[r1,#4]
000108  439d              BICS     r5,r5,r3              ;274
00010a  03b6              LSLS     r6,r6,#14
00010c  d500              BPL      |L4.272|
;;;276            { 
;;;277              SET_BIT(temp, iocurrent); 
00010e  431d              ORRS     r5,r5,r3
                  |L4.272|
;;;278            }
;;;279            EXTI->EMR = temp;
000110  6065              STR      r5,[r4,#4]
;;;280      
;;;281            /* Clear Rising Falling edge configuration */
;;;282            temp = EXTI->RTSR;
000112  68a5              LDR      r5,[r4,#8]
;;;283            CLEAR_BIT(temp, (uint32_t)iocurrent); 
;;;284            if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
000114  684e              LDR      r6,[r1,#4]
000116  439d              BICS     r5,r5,r3              ;283
000118  02f6              LSLS     r6,r6,#11
00011a  d500              BPL      |L4.286|
;;;285            {
;;;286              SET_BIT(temp, iocurrent); 
00011c  431d              ORRS     r5,r5,r3
                  |L4.286|
;;;287            }
;;;288            EXTI->RTSR = temp;
00011e  60a5              STR      r5,[r4,#8]
;;;289    
;;;290            temp = EXTI->FTSR;
000120  68e5              LDR      r5,[r4,#0xc]
;;;291            CLEAR_BIT(temp, (uint32_t)iocurrent); 
;;;292            if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
000122  684e              LDR      r6,[r1,#4]
000124  439d              BICS     r5,r5,r3              ;291
000126  02b6              LSLS     r6,r6,#10
000128  d500              BPL      |L4.300|
;;;293            {
;;;294              SET_BIT(temp, iocurrent); 
00012a  431d              ORRS     r5,r5,r3
                  |L4.300|
;;;295            }
;;;296            EXTI->FTSR = temp;
00012c  60e5              STR      r5,[r4,#0xc]
                  |L4.302|
;;;297          }
;;;298        }
;;;299        
;;;300        position++;
00012e  680b              LDR      r3,[r1,#0]
000130  1c52              ADDS     r2,r2,#1
000132  40d3              LSRS     r3,r3,r2
000134  d000              BEQ      |L4.312|
000136  e768              B        |L4.10|
                  |L4.312|
;;;301      } 
;;;302    }
000138  bcf8              POP      {r3-r7}
00013a  4770              BX       lr
                  |L4.316|
00013c  4770              BX       lr
;;;303    
                          ENDP

00013e  0000              DCW      0x0000
                  |L4.320|
                          DCD      0x40021000
                  |L4.324|
                          DCD      0x40010000
                  |L4.328|
                          DCD      0x48000400
                  |L4.332|
                          DCD      0x48000800
                  |L4.336|
                          DCD      0x48000c00
                  |L4.340|
                          DCD      0x40010400

                          AREA ||i.HAL_GPIO_LockPin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_LockPin PROC
;;;465    */
;;;466    HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  2201              MOVS     r2,#1
;;;467    {
;;;468      __IO uint32_t tmp = GPIO_LCKR_LCKK;
000002  0412              LSLS     r2,r2,#16
000004  b081              SUB      sp,sp,#4              ;467
;;;469    
;;;470      /* Check the parameters */
;;;471      assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
;;;472      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;473    
;;;474      /* Apply lock key write sequence */
;;;475      SET_BIT(tmp, GPIO_Pin);
000006  430a              ORRS     r2,r2,r1
;;;476      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;477      GPIOx->LCKR = tmp;
000008  9200              STR      r2,[sp,#0]
00000a  61c2              STR      r2,[r0,#0x1c]
;;;478      /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
;;;479      GPIOx->LCKR = GPIO_Pin;
00000c  61c1              STR      r1,[r0,#0x1c]
;;;480      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;481      GPIOx->LCKR = tmp;
00000e  9900              LDR      r1,[sp,#0]
000010  61c1              STR      r1,[r0,#0x1c]
;;;482      /* Read LCKK bit*/
;;;483      tmp = GPIOx->LCKR;
000012  69c1              LDR      r1,[r0,#0x1c]
;;;484    
;;;485      if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
000014  9100              STR      r1,[sp,#0]
000016  69c0              LDR      r0,[r0,#0x1c]
000018  03c0              LSLS     r0,r0,#15
00001a  d502              BPL      |L5.34|
;;;486      {
;;;487        return HAL_OK;
00001c  2000              MOVS     r0,#0
;;;488      }
;;;489      else
;;;490      {
;;;491        return HAL_ERROR;
;;;492      }
;;;493    }
00001e  b001              ADD      sp,sp,#4
000020  4770              BX       lr
                  |L5.34|
000022  2001              MOVS     r0,#1                 ;491
000024  b001              ADD      sp,sp,#4
000026  4770              BX       lr
;;;494    
                          ENDP


                          AREA ||i.HAL_GPIO_ReadPin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_ReadPin PROC
;;;391      */
;;;392    GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6900              LDR      r0,[r0,#0x10]
;;;393    {
;;;394      GPIO_PinState bitstatus;
;;;395    
;;;396      /* Check the parameters */
;;;397      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;398    
;;;399      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
000002  4008              ANDS     r0,r0,r1
000004  d000              BEQ      |L6.8|
;;;400      {
;;;401        bitstatus = GPIO_PIN_SET;
000006  2001              MOVS     r0,#1
                  |L6.8|
;;;402      }
;;;403      else
;;;404      {
;;;405        bitstatus = GPIO_PIN_RESET;
;;;406      }
;;;407      return bitstatus;
;;;408      }
000008  4770              BX       lr
;;;409    
                          ENDP


                          AREA ||i.HAL_GPIO_TogglePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_TogglePin PROC
;;;446      */
;;;447    void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6942              LDR      r2,[r0,#0x14]
;;;448    {
;;;449      /* Check the parameters */
;;;450      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;451    
;;;452      GPIOx->ODR ^= GPIO_Pin;
000002  404a              EORS     r2,r2,r1
000004  6142              STR      r2,[r0,#0x14]
;;;453    }
000006  4770              BX       lr
;;;454    
                          ENDP


                          AREA ||i.HAL_GPIO_WritePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_WritePin PROC
;;;424      */
;;;425    void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
000000  2a00              CMP      r2,#0
;;;426    {
000002  d001              BEQ      |L8.8|
;;;427      /* Check the parameters */
;;;428      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;429      assert_param(IS_GPIO_PIN_ACTION(PinState));
;;;430    
;;;431      if (PinState != GPIO_PIN_RESET)
;;;432      {
;;;433        GPIOx->BSRR = (uint32_t)GPIO_Pin;
000004  6181              STR      r1,[r0,#0x18]
;;;434      }
;;;435      else
;;;436      {
;;;437        GPIOx->BRR = (uint32_t)GPIO_Pin;
;;;438      }
;;;439    }
000006  4770              BX       lr
                  |L8.8|
000008  6281              STR      r1,[r0,#0x28]         ;437
00000a  4770              BX       lr
;;;440      
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F0_V1.9.0\\Drivers\\STM32F0xx_HAL_Driver\\Src\\stm32f0xx_hal_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f0xx_hal_gpio_c_ea787061____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F0_V1.9.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_stm32f0xx_hal_gpio_c_ea787061____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f0xx_hal_gpio_c_ea787061____REVSH|
#line 402
|__asm___20_stm32f0xx_hal_gpio_c_ea787061____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
