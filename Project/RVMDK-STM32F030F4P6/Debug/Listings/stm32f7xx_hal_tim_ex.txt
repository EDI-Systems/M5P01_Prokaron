; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f7xx_hal_tim_ex.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f7xx_hal_tim_ex.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Core -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F767IGT6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f7xx_hal_tim_ex.crf ..\..\..\M0P0_Library\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_tim_ex.c]
                          THUMB

                          AREA ||i.HAL_TIMEx_BreakCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_BreakCallback PROC
;;;2368     */
;;;2369   __weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2370   {
;;;2371     /* Prevent unused argument(s) compilation warning */
;;;2372     UNUSED(htim);
;;;2373    
;;;2374     /* NOTE : This function Should not be modified, when the callback is needed,
;;;2375               the HAL_TIMEx_BreakCallback could be implemented in the user file
;;;2376      */
;;;2377   }
;;;2378   
                          ENDP


                          AREA ||i.HAL_TIMEx_CommutationCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_CommutationCallback PROC
;;;2352     */
;;;2353   __weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2354   {
;;;2355     /* Prevent unused argument(s) compilation warning */
;;;2356     UNUSED(htim);
;;;2357    
;;;2358     /* NOTE : This function Should not be modified, when the callback is needed,
;;;2359               the HAL_TIMEx_CommutationCallback could be implemented in the user file
;;;2360      */
;;;2361   }
;;;2362   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigBreakDeadTime||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigBreakDeadTime PROC
;;;2112     */    
;;;2113   HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
000000  6b82              LDR      r2,[r0,#0x38]
;;;2114                                                 TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
;;;2115   {
;;;2116     uint32_t tmpbdtr = 0;
;;;2117     
;;;2118     /* Check the parameters */
;;;2119     assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
;;;2120     assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
;;;2121     assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
;;;2122     assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
;;;2123     assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
;;;2124     assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
;;;2125     assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
;;;2126     assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
;;;2127     assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
;;;2128     assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
;;;2129     assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
;;;2130     assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
;;;2131     
;;;2132     /* Check input state */
;;;2133     __HAL_LOCK(htim);
000002  2a01              CMP      r2,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;2134     
;;;2135     htim->State = HAL_TIM_STATE_BUSY;
;;;2136   
;;;2137     /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
;;;2138        the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;2139       
;;;2140     /* Clear the BDTR bits */
;;;2141     tmpbdtr &= ~(TIM_BDTR_DTG | TIM_BDTR_LOCK |  TIM_BDTR_OSSI | 
;;;2142                  TIM_BDTR_OSSR | TIM_BDTR_BKE | TIM_BDTR_BKP | 
;;;2143                  TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF |
;;;2144                  TIM_BDTR_BK2F | TIM_BDTR_BK2E | TIM_BDTR_BK2P);
;;;2145   
;;;2146     /* Set the BDTR bits */
;;;2147     tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
;;;2148     tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
;;;2149     tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
;;;2150     tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
;;;2151     tmpbdtr |= sBreakDeadTimeConfig->BreakState;
;;;2152     tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
;;;2153     tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
;;;2154     tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
;;;2155     tmpbdtr |= (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT);
;;;2156     tmpbdtr |= sBreakDeadTimeConfig->Break2State;
;;;2157     tmpbdtr |= sBreakDeadTimeConfig->Break2Polarity;
;;;2158     
;;;2159     /* Set TIMx_BDTR */
;;;2160     htim->Instance->BDTR = tmpbdtr;
;;;2161     
;;;2162     __HAL_UNLOCK(htim);
;;;2163     
;;;2164     return HAL_OK;
;;;2165   }
000008  4770              BXEQ     lr
00000a  f84d4d04          PUSH.W   {r4}                  ;2115
00000e  2301              MOVS     r3,#1                 ;2133
000010  6383              STR      r3,[r0,#0x38]         ;2135
000012  2202              MOVS     r2,#2                 ;2135
000014  63c2              STR      r2,[r0,#0x3c]         ;2135
000016  e9d14202          LDRD     r4,r2,[r1,#8]         ;2135
00001a  e9d1c300          LDRD     r12,r3,[r1,#0]        ;2148
00001e  4322              ORRS     r2,r2,r4              ;2148
000020  431a              ORRS     r2,r2,r3              ;2149
000022  e9d14304          LDRD     r4,r3,[r1,#0x10]      ;2153
000026  ea4c0202          ORR      r2,r12,r2             ;2150
00002a  f8d1c028          LDR      r12,[r1,#0x28]        ;2153
00002e  4322              ORRS     r2,r2,r4              ;2151
000030  8b0c              LDRH     r4,[r1,#0x18]         ;2154
000032  431a              ORRS     r2,r2,r3              ;2152
000034  8c8b              LDRH     r3,[r1,#0x24]         ;2155
000036  ea4c0202          ORR      r2,r12,r2             ;2153
00003a  ea424204          ORR      r2,r2,r4,LSL #16      ;2154
00003e  e9d1c407          LDRD     r12,r4,[r1,#0x1c]     ;2154
000042  ea425103          ORR      r1,r2,r3,LSL #20      ;2155
000046  6802              LDR      r2,[r0,#0]            ;2160
000048  ea4c0101          ORR      r1,r12,r1             ;2156
00004c  4321              ORRS     r1,r1,r4              ;2157
00004e  2300              MOVS     r3,#0                 ;2162
000050  6451              STR      r1,[r2,#0x44]         ;2160
000052  6383              STR      r3,[r0,#0x38]         ;2164
000054  4618              MOV      r0,r3                 ;2164
000056  f85d4b04          POP.W    {r4}
00005a  4770              BX       lr
;;;2166   #if defined (STM32F765xx) || defined(STM32F767xx) || defined(STM32F769xx) || defined(STM32F777xx) || defined(STM32F779xx)
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigBreakInput||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigBreakInput PROC
;;;2176     */
;;;2177   HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
000000  f84d4d04          PUSH.W   {r4}
;;;2178                                                uint32_t BreakInput,
;;;2179                                                TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
;;;2180   
;;;2181   {
;;;2182     uint32_t tmporx = 0;
;;;2183     uint32_t bkin_enable_mask = 0;
;;;2184     uint32_t bkin_enable_bitpos = 0;
;;;2185   
;;;2186     /* Check the parameters */
;;;2187     assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
;;;2188     assert_param(IS_TIM_BREAKINPUT(BreakInput));
;;;2189     assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
;;;2190     assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
;;;2191   
;;;2192     /* Check input state */
;;;2193     __HAL_LOCK(htim);
000004  6b84              LDR      r4,[r0,#0x38]
000006  2300              MOVS     r3,#0                 ;2183
000008  469c              MOV      r12,r3                ;2184
00000a  2c01              CMP      r4,#1
00000c  bf02              ITTT     EQ
00000e  2002              MOVEQ    r0,#2
;;;2194     
;;;2195     switch(sBreakInputConfig->Source)
;;;2196     {
;;;2197     case TIM_BREAKINPUTSOURCE_BKIN:
;;;2198       {
;;;2199         bkin_enable_mask = TIM1_AF1_BKINE;
;;;2200         bkin_enable_bitpos = 0;
;;;2201       }
;;;2202       break;
;;;2203     
;;;2204     case TIM_BREAKINPUTSOURCE_DFSDM1:
;;;2205       {
;;;2206         bkin_enable_mask = TIM1_AF1_BKDF1BKE;
;;;2207         bkin_enable_bitpos = 8;
;;;2208       }
;;;2209       break;    
;;;2210   
;;;2211     default:
;;;2212       break;
;;;2213     }
;;;2214     
;;;2215     switch(BreakInput)
;;;2216     {
;;;2217       case TIM_BREAKINPUT_BRK:
;;;2218         {
;;;2219           /* Get the TIMx_AF1 register value */
;;;2220           tmporx = htim->Instance->AF1;
;;;2221           
;;;2222           /* Enable the break input */
;;;2223           tmporx &= ~bkin_enable_mask;
;;;2224           tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
;;;2225           
;;;2226           /* Set TIMx_AF1 */
;;;2227           htim->Instance->AF1 = tmporx;        
;;;2228         }
;;;2229           break;
;;;2230       case TIM_BREAKINPUT_BRK2:
;;;2231         {
;;;2232           /* Get the TIMx_AF2 register value */
;;;2233           tmporx = htim->Instance->AF2;
;;;2234           
;;;2235           /* Enable the break input */
;;;2236           tmporx &= ~bkin_enable_mask;
;;;2237           tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
;;;2238           
;;;2239           /* Set TIMx_AF2 */
;;;2240           htim->Instance->AF2 = tmporx;        
;;;2241         }
;;;2242         break;    
;;;2243     default:
;;;2244       break;
;;;2245     }
;;;2246     
;;;2247     __HAL_UNLOCK(htim);
;;;2248   
;;;2249     return HAL_OK;
;;;2250   }
000010  f85d4b04          POPEQ.W  {r4}
000014  4770              BXEQ     lr
000016  2401              MOVS     r4,#1                 ;2193
000018  6384              STR      r4,[r0,#0x38]         ;2195
00001a  6814              LDR      r4,[r2,#0]            ;2195
00001c  2c01              CMP      r4,#1                 ;2195
00001e  bf08              IT       EQ                    ;2199
000020  2301              MOVEQ    r3,#1                 ;2199
000022  d005              BEQ      |L4.48|
000024  2c08              CMP      r4,#8                 ;2195
000026  bf04              ITT      EQ                    ;2206
000028  f44f7380          MOVEQ    r3,#0x100             ;2206
00002c  f04f0c08          MOVEQ    r12,#8                ;2207
                  |L4.48|
000030  2901              CMP      r1,#1                 ;2215
000032  d002              BEQ      |L4.58|
000034  2902              CMP      r1,#2                 ;2215
000036  d00b              BEQ      |L4.80|
000038  e014              B        |L4.100|
                  |L4.58|
00003a  6801              LDR      r1,[r0,#0]            ;2224
00003c  6854              LDR      r4,[r2,#4]            ;2220
00003e  6e0a              LDR      r2,[r1,#0x60]         ;2220
000040  fa04fc0c          LSL      r12,r4,r12            ;2224
000044  439a              BICS     r2,r2,r3              ;2223
000046  ea0c0303          AND      r3,r12,r3             ;2224
00004a  431a              ORRS     r2,r2,r3              ;2224
00004c  660a              STR      r2,[r1,#0x60]         ;2227
00004e  e009              B        |L4.100|
                  |L4.80|
000050  6801              LDR      r1,[r0,#0]            ;2237
000052  6854              LDR      r4,[r2,#4]            ;2233
000054  6e4a              LDR      r2,[r1,#0x64]         ;2233
000056  fa04fc0c          LSL      r12,r4,r12            ;2237
00005a  439a              BICS     r2,r2,r3              ;2236
00005c  ea0c0303          AND      r3,r12,r3             ;2237
000060  431a              ORRS     r2,r2,r3              ;2237
000062  664a              STR      r2,[r1,#0x64]         ;2240
                  |L4.100|
000064  2100              MOVS     r1,#0                 ;2247
000066  6381              STR      r1,[r0,#0x38]         ;2249
000068  f85d4b04          POP.W    {r4}
00006c  4608              MOV      r0,r1                 ;2249
00006e  4770              BX       lr
;;;2251   #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutationEvent PROC
;;;1489     */
;;;1490   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  6b83              LDR      r3,[r0,#0x38]
;;;1491   {
;;;1492     /* Check the parameters */
;;;1493     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1494     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1495     
;;;1496     __HAL_LOCK(htim);
000002  2b01              CMP      r3,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;1497     
;;;1498     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1499         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1500     {    
;;;1501       /* Select the Input trigger */
;;;1502       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1503       htim->Instance->SMCR |= InputTrigger;
;;;1504     }
;;;1505       
;;;1506     /* Select the Capture Compare preload feature */
;;;1507     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1508     /* Select the Commutation event source */
;;;1509     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1510     htim->Instance->CR2 |= CommutationSource;
;;;1511       
;;;1512     __HAL_UNLOCK(htim);
;;;1513     
;;;1514     return HAL_OK;
;;;1515   }
000008  4770              BXEQ     lr
00000a  2301              MOVS     r3,#1                 ;1496
00000c  2900              CMP      r1,#0                 ;1498
00000e  6383              STR      r3,[r0,#0x38]         ;1496
000010  bf18              IT       NE                    ;1498
000012  2910              CMPNE    r1,#0x10              ;1498
000014  d003              BEQ      |L5.30|
000016  2920              CMP      r1,#0x20              ;1498
000018  bf18              IT       NE                    ;1498
00001a  2930              CMPNE    r1,#0x30              ;1498
00001c  d10c              BNE      |L5.56|
                  |L5.30|
00001e  6803              LDR      r3,[r0,#0]            ;1502
000020  f8d3c008          LDR      r12,[r3,#8]           ;1502
000024  f02c0c70          BIC      r12,r12,#0x70         ;1502
000028  f8c3c008          STR      r12,[r3,#8]           ;1502
00002c  6803              LDR      r3,[r0,#0]            ;1503
00002e  f8d3c008          LDR      r12,[r3,#8]           ;1503
000032  ea4c0101          ORR      r1,r12,r1             ;1503
000036  6099              STR      r1,[r3,#8]            ;1503
                  |L5.56|
000038  6801              LDR      r1,[r0,#0]            ;1507
00003a  2300              MOVS     r3,#0                 ;1512
00003c  f8d1c004          LDR      r12,[r1,#4]           ;1507
000040  f04c0c01          ORR      r12,r12,#1            ;1507
000044  f8c1c004          STR      r12,[r1,#4]           ;1507
000048  6801              LDR      r1,[r0,#0]            ;1509
00004a  f8d1c004          LDR      r12,[r1,#4]           ;1509
00004e  f02c0c04          BIC      r12,r12,#4            ;1509
000052  f8c1c004          STR      r12,[r1,#4]           ;1509
000056  6801              LDR      r1,[r0,#0]            ;1510
000058  f8d1c004          LDR      r12,[r1,#4]           ;1510
00005c  ea4c0202          ORR      r2,r12,r2             ;1510
000060  604a              STR      r2,[r1,#4]            ;1510
000062  6383              STR      r3,[r0,#0x38]         ;1514
000064  4618              MOV      r0,r3                 ;1514
000066  4770              BX       lr
;;;1516   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_ConfigCommutationEvent_DMA PROC
;;;1593     */
;;;1594   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  6b83              LDR      r3,[r0,#0x38]
;;;1595   {
;;;1596     /* Check the parameters */
;;;1597     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1598     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1599     
;;;1600     __HAL_LOCK(htim);
000002  2b01              CMP      r3,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;1601     
;;;1602     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1603         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1604     {    
;;;1605       /* Select the Input trigger */
;;;1606       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1607       htim->Instance->SMCR |= InputTrigger;
;;;1608     }
;;;1609     
;;;1610     /* Select the Capture Compare preload feature */
;;;1611     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1612     /* Select the Commutation event source */
;;;1613     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1614     htim->Instance->CR2 |= CommutationSource;
;;;1615     
;;;1616     /* Enable the Commutation DMA Request */
;;;1617     /* Set the DMA Commutation Callback */
;;;1618     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = HAL_TIMEx_DMACommutationCplt;     
;;;1619     /* Set the DMA error callback */
;;;1620     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = HAL_TIM_DMAError;
;;;1621     
;;;1622     /* Enable the Commutation DMA Request */
;;;1623     __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
;;;1624   
;;;1625     __HAL_UNLOCK(htim);
;;;1626     
;;;1627     return HAL_OK;
;;;1628   }
000008  4770              BXEQ     lr
00000a  2301              MOVS     r3,#1                 ;1600
00000c  2900              CMP      r1,#0                 ;1602
00000e  6383              STR      r3,[r0,#0x38]         ;1600
000010  bf18              IT       NE                    ;1602
000012  2910              CMPNE    r1,#0x10              ;1602
000014  d003              BEQ      |L6.30|
000016  2920              CMP      r1,#0x20              ;1602
000018  bf18              IT       NE                    ;1602
00001a  2930              CMPNE    r1,#0x30              ;1602
00001c  d10c              BNE      |L6.56|
                  |L6.30|
00001e  6803              LDR      r3,[r0,#0]            ;1606
000020  f8d3c008          LDR      r12,[r3,#8]           ;1606
000024  f02c0c70          BIC      r12,r12,#0x70         ;1606
000028  f8c3c008          STR      r12,[r3,#8]           ;1606
00002c  6803              LDR      r3,[r0,#0]            ;1607
00002e  f8d3c008          LDR      r12,[r3,#8]           ;1607
000032  ea4c0101          ORR      r1,r12,r1             ;1607
000036  6099              STR      r1,[r3,#8]            ;1607
                  |L6.56|
000038  6801              LDR      r1,[r0,#0]            ;1611
00003a  2300              MOVS     r3,#0                 ;1625
00003c  f8d1c004          LDR      r12,[r1,#4]           ;1611
000040  f04c0c01          ORR      r12,r12,#1            ;1611
000044  f8c1c004          STR      r12,[r1,#4]           ;1611
000048  6801              LDR      r1,[r0,#0]            ;1613
00004a  f8d1c004          LDR      r12,[r1,#4]           ;1613
00004e  f02c0c04          BIC      r12,r12,#4            ;1613
000052  f8c1c004          STR      r12,[r1,#4]           ;1613
000056  6801              LDR      r1,[r0,#0]            ;1614
000058  f8d1c004          LDR      r12,[r1,#4]           ;1614
00005c  ea4c0202          ORR      r2,r12,r2             ;1614
000060  604a              STR      r2,[r1,#4]            ;1614
000062  6b02              LDR      r2,[r0,#0x30]         ;1618
000064  4906              LDR      r1,|L6.128|
000066  6411              STR      r1,[r2,#0x40]         ;1620
000068  6b02              LDR      r2,[r0,#0x30]         ;1620
00006a  4906              LDR      r1,|L6.132|
00006c  6511              STR      r1,[r2,#0x50]         ;1623
00006e  6801              LDR      r1,[r0,#0]            ;1623
000070  68ca              LDR      r2,[r1,#0xc]          ;1623
000072  f4425200          ORR      r2,r2,#0x2000         ;1623
000076  60ca              STR      r2,[r1,#0xc]          ;1623
000078  6383              STR      r3,[r0,#0x38]         ;1627
00007a  2000              MOVS     r0,#0                 ;1627
00007c  4770              BX       lr
;;;1629   
                          ENDP

00007e  0000              DCW      0x0000
                  |L6.128|
                          DCD      TIMEx_DMACommutationCplt
                  |L6.132|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutationEvent_IT PROC
;;;1539     */
;;;1540   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  6b83              LDR      r3,[r0,#0x38]
;;;1541   {
;;;1542     /* Check the parameters */
;;;1543     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1544     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1545     
;;;1546     __HAL_LOCK(htim);
000002  2b01              CMP      r3,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;1547     
;;;1548     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1549         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1550     {    
;;;1551       /* Select the Input trigger */
;;;1552       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1553       htim->Instance->SMCR |= InputTrigger;
;;;1554     }
;;;1555     
;;;1556     /* Select the Capture Compare preload feature */
;;;1557     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1558     /* Select the Commutation event source */
;;;1559     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1560     htim->Instance->CR2 |= CommutationSource;
;;;1561       
;;;1562     /* Enable the Commutation Interrupt Request */
;;;1563     __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
;;;1564   
;;;1565     __HAL_UNLOCK(htim);
;;;1566     
;;;1567     return HAL_OK;
;;;1568   }
000008  4770              BXEQ     lr
00000a  2301              MOVS     r3,#1                 ;1546
00000c  2900              CMP      r1,#0                 ;1548
00000e  6383              STR      r3,[r0,#0x38]         ;1546
000010  bf18              IT       NE                    ;1548
000012  2910              CMPNE    r1,#0x10              ;1548
000014  d003              BEQ      |L7.30|
000016  2920              CMP      r1,#0x20              ;1548
000018  bf18              IT       NE                    ;1548
00001a  2930              CMPNE    r1,#0x30              ;1548
00001c  d10c              BNE      |L7.56|
                  |L7.30|
00001e  6803              LDR      r3,[r0,#0]            ;1552
000020  f8d3c008          LDR      r12,[r3,#8]           ;1552
000024  f02c0c70          BIC      r12,r12,#0x70         ;1552
000028  f8c3c008          STR      r12,[r3,#8]           ;1552
00002c  6803              LDR      r3,[r0,#0]            ;1553
00002e  f8d3c008          LDR      r12,[r3,#8]           ;1553
000032  ea4c0101          ORR      r1,r12,r1             ;1553
000036  6099              STR      r1,[r3,#8]            ;1553
                  |L7.56|
000038  6801              LDR      r1,[r0,#0]            ;1557
00003a  2300              MOVS     r3,#0                 ;1565
00003c  f8d1c004          LDR      r12,[r1,#4]           ;1557
000040  f04c0c01          ORR      r12,r12,#1            ;1557
000044  f8c1c004          STR      r12,[r1,#4]           ;1557
000048  6801              LDR      r1,[r0,#0]            ;1559
00004a  f8d1c004          LDR      r12,[r1,#4]           ;1559
00004e  f02c0c04          BIC      r12,r12,#4            ;1559
000052  f8c1c004          STR      r12,[r1,#4]           ;1559
000056  6801              LDR      r1,[r0,#0]            ;1560
000058  f8d1c004          LDR      r12,[r1,#4]           ;1560
00005c  ea4c0202          ORR      r2,r12,r2             ;1560
000060  604a              STR      r2,[r1,#4]            ;1560
000062  6801              LDR      r1,[r0,#0]            ;1563
000064  68ca              LDR      r2,[r1,#0xc]          ;1563
000066  f0420220          ORR      r2,r2,#0x20           ;1563
00006a  60ca              STR      r2,[r1,#0xc]          ;1563
00006c  6383              STR      r3,[r0,#0x38]         ;1567
00006e  2000              MOVS     r0,#0                 ;1567
000070  4770              BX       lr
;;;1569   
                          ENDP


                          AREA ||i.HAL_TIMEx_GroupChannel5||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_GroupChannel5 PROC
;;;2302     */
;;;2303   HAL_StatusTypeDef HAL_TIMEx_GroupChannel5(TIM_HandleTypeDef *htim, uint32_t OCRef)
000000  6b82              LDR      r2,[r0,#0x38]
;;;2304   {
;;;2305     /* Check parameters */
;;;2306     assert_param(IS_TIM_COMBINED3PHASEPWM_INSTANCE(htim->Instance));
;;;2307     assert_param(IS_TIM_GROUPCH5(OCRef));
;;;2308   
;;;2309     /* Process Locked */
;;;2310     __HAL_LOCK(htim);
000002  2a01              CMP      r2,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;2311     
;;;2312     htim->State = HAL_TIM_STATE_BUSY;
;;;2313     
;;;2314     /* Clear GC5Cx bit fields */
;;;2315     htim->Instance->CCR5 &= ~(TIM_CCR5_GC5C3|TIM_CCR5_GC5C2|TIM_CCR5_GC5C1);
;;;2316     
;;;2317     /* Set GC5Cx bit fields */
;;;2318     htim->Instance->CCR5 |= OCRef;
;;;2319                                      
;;;2320     htim->State = HAL_TIM_STATE_READY;                                 
;;;2321     
;;;2322     __HAL_UNLOCK(htim);
;;;2323     
;;;2324     return HAL_OK;
;;;2325   }
000008  4770              BXEQ     lr
00000a  2201              MOVS     r2,#1                 ;2310
00000c  2302              MOVS     r3,#2                 ;2312
00000e  63c3              STR      r3,[r0,#0x3c]         ;2312
000010  6382              STR      r2,[r0,#0x38]         ;2312
000012  6803              LDR      r3,[r0,#0]            ;2315
000014  f8d3c058          LDR      r12,[r3,#0x58]        ;2315
000018  f02c4c60          BIC      r12,r12,#0xe0000000   ;2315
00001c  f8c3c058          STR      r12,[r3,#0x58]        ;2315
000020  6803              LDR      r3,[r0,#0]            ;2318
000022  f8d3c058          LDR      r12,[r3,#0x58]        ;2318
000026  ea4c0c01          ORR      r12,r12,r1            ;2318
00002a  f8c3c058          STR      r12,[r3,#0x58]        ;2318
00002e  2100              MOVS     r1,#0                 ;2322
000030  63c2              STR      r2,[r0,#0x3c]         ;2320
000032  6381              STR      r1,[r0,#0x38]         ;2324
000034  4608              MOV      r0,r1                 ;2324
000036  4770              BX       lr
;;;2326   
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_DeInit PROC
;;;238      */
;;;239    HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;240    {
000002  4604              MOV      r4,r0
;;;241      /* Check the parameters */
;;;242      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;243    
;;;244      htim->State = HAL_TIM_STATE_BUSY;
;;;245      
;;;246      /* Disable the TIM Peripheral Clock */
;;;247      __HAL_TIM_DISABLE(htim);
000004  f2411111          MOV      r1,#0x1111
000008  2002              MOVS     r0,#2                 ;244
00000a  63e0              STR      r0,[r4,#0x3c]         ;244
00000c  6820              LDR      r0,[r4,#0]
00000e  6a02              LDR      r2,[r0,#0x20]
000010  420a              TST      r2,r1
000012  d108              BNE      |L9.38|
000014  6a01              LDR      r1,[r0,#0x20]
000016  f2404244          MOV      r2,#0x444
00001a  4211              TST      r1,r2
00001c  d103              BNE      |L9.38|
00001e  6801              LDR      r1,[r0,#0]
000020  f0210101          BIC      r1,r1,#1
000024  6001              STR      r1,[r0,#0]
                  |L9.38|
;;;248        
;;;249      /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;250      HAL_TIMEx_HallSensor_MspDeInit(htim);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       HAL_TIMEx_HallSensor_MspDeInit
;;;251        
;;;252      /* Change TIM state */  
;;;253      htim->State = HAL_TIM_STATE_RESET; 
00002c  2000              MOVS     r0,#0
00002e  63e0              STR      r0,[r4,#0x3c]
;;;254    
;;;255      /* Release Lock */
;;;256      __HAL_UNLOCK(htim);
000030  63a0              STR      r0,[r4,#0x38]
;;;257    
;;;258      return HAL_OK;
;;;259    }
000032  bd10              POP      {r4,pc}
;;;260    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_GetState PROC
;;;2403     */
;;;2404   HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
000000  6bc0              LDR      r0,[r0,#0x3c]
;;;2405   {
;;;2406     return htim->State;
;;;2407   }
000002  4770              BX       lr
;;;2408   
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Init PROC
;;;165      */
;;;166    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
000000  2800              CMP      r0,#0
;;;167    {
;;;168      TIM_OC_InitTypeDef OC_Config;
;;;169        
;;;170      /* Check the TIM handle allocation */
;;;171      if(htim == NULL)
;;;172      {
;;;173        return HAL_ERROR;
000002  bf04              ITT      EQ
000004  2001              MOVEQ    r0,#1
;;;174      }
;;;175      
;;;176      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;177      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;178      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;179      assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
;;;180      assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
;;;181      assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
;;;182    
;;;183      /* Set the TIM state */
;;;184      htim->State= HAL_TIM_STATE_BUSY;
;;;185      
;;;186      /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;187      HAL_TIMEx_HallSensor_MspInit(htim);
;;;188      
;;;189      /* Configure the Time base in the Encoder Mode */
;;;190      TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;191      
;;;192      /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
;;;193      TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
;;;194      
;;;195      /* Reset the IC1PSC Bits */
;;;196      htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
;;;197      /* Set the IC1PSC value */
;;;198      htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
;;;199      
;;;200      /* Enable the Hall sensor interface (XOR function of the three inputs) */
;;;201      htim->Instance->CR2 |= TIM_CR2_TI1S;
;;;202      
;;;203      /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
;;;204      htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;205      htim->Instance->SMCR |= TIM_TS_TI1F_ED;
;;;206      
;;;207      /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */  
;;;208      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;209      htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
;;;210      
;;;211      /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
;;;212      OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
;;;213      OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
;;;214      OC_Config.OCMode = TIM_OCMODE_PWM2;
;;;215      OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
;;;216      OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
;;;217      OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
;;;218      OC_Config.Pulse = sConfig->Commutation_Delay; 
;;;219        
;;;220      TIM_OC2_SetConfig(htim->Instance, &OC_Config);
;;;221      
;;;222      /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
;;;223        register to 101 */
;;;224      htim->Instance->CR2 &= ~TIM_CR2_MMS;
;;;225      htim->Instance->CR2 |= TIM_TRGO_OC2REF; 
;;;226      
;;;227      /* Initialize the TIM state*/
;;;228      htim->State= HAL_TIM_STATE_READY;
;;;229    
;;;230      return HAL_OK;
;;;231    }
000006  4770              BXEQ     lr
000008  b530              PUSH     {r4,r5,lr}            ;167
00000a  4604              MOV      r4,r0                 ;167
00000c  460d              MOV      r5,r1                 ;167
00000e  2002              MOVS     r0,#2                 ;184
000010  b087              SUB      sp,sp,#0x1c           ;167
000012  63e0              STR      r0,[r4,#0x3c]         ;184
000014  4620              MOV      r0,r4                 ;187
000016  f7fffffe          BL       HAL_TIMEx_HallSensor_MspInit
00001a  6820              LDR      r0,[r4,#0]            ;190
00001c  1d21              ADDS     r1,r4,#4              ;190
00001e  f7fffffe          BL       TIM_Base_SetConfig
000022  68ab              LDR      r3,[r5,#8]            ;193
000024  2203              MOVS     r2,#3                 ;193
000026  6829              LDR      r1,[r5,#0]            ;193
000028  6820              LDR      r0,[r4,#0]            ;193
00002a  f7fffffe          BL       TIM_TI1_SetConfig
00002e  6821              LDR      r1,[r4,#0]            ;196
000030  2000              MOVS     r0,#0                 ;212
000032  2270              MOVS     r2,#0x70              ;214
000034  698b              LDR      r3,[r1,#0x18]         ;196
000036  f023030c          BIC      r3,r3,#0xc            ;196
00003a  618b              STR      r3,[r1,#0x18]         ;196
00003c  6821              LDR      r1,[r4,#0]            ;198
00003e  698b              LDR      r3,[r1,#0x18]         ;198
000040  f8d5c004          LDR      r12,[r5,#4]           ;198
000044  ea43030c          ORR      r3,r3,r12             ;198
000048  618b              STR      r3,[r1,#0x18]         ;198
00004a  6821              LDR      r1,[r4,#0]            ;201
00004c  684b              LDR      r3,[r1,#4]            ;201
00004e  f0430380          ORR      r3,r3,#0x80           ;201
000052  604b              STR      r3,[r1,#4]            ;201
000054  6821              LDR      r1,[r4,#0]            ;204
000056  688b              LDR      r3,[r1,#8]            ;204
000058  f0230370          BIC      r3,r3,#0x70           ;204
00005c  608b              STR      r3,[r1,#8]            ;204
00005e  6821              LDR      r1,[r4,#0]            ;205
000060  688b              LDR      r3,[r1,#8]            ;205
000062  f0430340          ORR      r3,r3,#0x40           ;205
000066  608b              STR      r3,[r1,#8]            ;205
000068  6821              LDR      r1,[r4,#0]            ;208
00006a  688b              LDR      r3,[r1,#8]            ;208
00006c  f0230307          BIC      r3,r3,#7              ;208
000070  f4233380          BIC      r3,r3,#0x10000        ;208
000074  608b              STR      r3,[r1,#8]            ;208
000076  6821              LDR      r1,[r4,#0]            ;209
000078  688b              LDR      r3,[r1,#8]            ;209
00007a  f0430304          ORR      r3,r3,#4              ;209
00007e  608b              STR      r3,[r1,#8]            ;209
000080  9005              STR      r0,[sp,#0x14]         ;215
000082  4669              MOV      r1,sp                 ;220
000084  9004              STR      r0,[sp,#0x10]         ;213
000086  9006              STR      r0,[sp,#0x18]         ;216
000088  9003              STR      r0,[sp,#0xc]          ;217
00008a  9200              STR      r2,[sp,#0]            ;218
00008c  9002              STR      r0,[sp,#8]            ;218
00008e  68e8              LDR      r0,[r5,#0xc]          ;218
000090  9001              STR      r0,[sp,#4]            ;220
000092  6820              LDR      r0,[r4,#0]            ;220
000094  f7fffffe          BL       TIM_OC2_SetConfig
000098  6820              LDR      r0,[r4,#0]            ;224
00009a  2101              MOVS     r1,#1                 ;228
00009c  6842              LDR      r2,[r0,#4]            ;224
00009e  f0220270          BIC      r2,r2,#0x70           ;224
0000a2  6042              STR      r2,[r0,#4]            ;224
0000a4  6820              LDR      r0,[r4,#0]            ;225
0000a6  6842              LDR      r2,[r0,#4]            ;225
0000a8  f0420250          ORR      r2,r2,#0x50           ;225
0000ac  6042              STR      r2,[r0,#4]            ;225
0000ae  63e1              STR      r1,[r4,#0x3c]         ;228
0000b0  b007              ADD      sp,sp,#0x1c
0000b2  2000              MOVS     r0,#0                 ;230
0000b4  bd30              POP      {r4,r5,pc}
;;;232    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspDeInit PROC
;;;282      */
;;;283    __weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;284    {
;;;285      /* Prevent unused argument(s) compilation warning */
;;;286      UNUSED(htim);
;;;287     
;;;288      /* NOTE : This function Should not be modified, when the callback is needed,
;;;289                the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
;;;290       */
;;;291    }
;;;292    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspInit PROC
;;;266      */
;;;267    __weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;268    {
;;;269      /* Prevent unused argument(s) compilation warning */
;;;270      UNUSED(htim);
;;;271     
;;;272      /* NOTE : This function Should not be modified, when the callback is needed,
;;;273                the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
;;;274       */
;;;275    }
;;;276    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Start PROC
;;;298      */
;;;299    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;300    {
;;;301      /* Check the parameters */
;;;302      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;303      
;;;304      /* Enable the Input Capture channels 1
;;;305        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;306      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
000002  2201              MOVS     r2,#1
000004  4604              MOV      r4,r0                 ;300
000006  6800              LDR      r0,[r0,#0]
000008  2100              MOVS     r1,#0
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;307      
;;;308      /* Enable the Peripheral */
;;;309      __HAL_TIM_ENABLE(htim);
00000e  6820              LDR      r0,[r4,#0]
000010  6801              LDR      r1,[r0,#0]
000012  f0410101          ORR      r1,r1,#1
000016  6001              STR      r1,[r0,#0]
;;;310      
;;;311      /* Return function status */
;;;312      return HAL_OK;
000018  2000              MOVS     r0,#0
;;;313    }
00001a  bd10              POP      {r4,pc}
;;;314    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Start_DMA PROC
;;;394      */
;;;395    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;396    {
000002  4604              MOV      r4,r0
;;;397      /* Check the parameters */
;;;398      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;399      
;;;400       if((htim->State == HAL_TIM_STATE_BUSY))
000004  6bc0              LDR      r0,[r0,#0x3c]
000006  4615              MOV      r5,r2                 ;396
000008  460e              MOV      r6,r1                 ;396
00000a  2802              CMP      r0,#2
;;;401      {
;;;402         return HAL_BUSY;
;;;403      }
;;;404      else if((htim->State == HAL_TIM_STATE_READY))
;;;405      {
;;;406        if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;407        {
;;;408          return HAL_ERROR;                                    
;;;409        }
;;;410        else
;;;411        {
;;;412          htim->State = HAL_TIM_STATE_BUSY;
;;;413        }
;;;414      }
;;;415      /* Enable the Input Capture channels 1
;;;416        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;417      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
;;;418      
;;;419      /* Set the DMA Input Capture 1 Callback */
;;;420      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMACaptureCplt;     
;;;421      /* Set the DMA error callback */
;;;422      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;423      
;;;424      /* Enable the DMA Stream for Capture 1*/
;;;425      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);    
;;;426      
;;;427      /* Enable the capture compare 1 Interrupt */
;;;428      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;429     
;;;430      /* Enable the Peripheral */
;;;431      __HAL_TIM_ENABLE(htim);
;;;432      
;;;433      /* Return function status */
;;;434      return HAL_OK;
;;;435    }
00000c  bf08              IT       EQ
00000e  bd70              POPEQ    {r4-r6,pc}
000010  6be0              LDR      r0,[r4,#0x3c]         ;404
000012  2801              CMP      r0,#1                 ;404
000014  d106              BNE      |L15.36|
000016  b91e              CBNZ     r6,|L15.32|
000018  2d00              CMP      r5,#0                 ;406
00001a  bf1c              ITT      NE                    ;408
00001c  2001              MOVNE    r0,#1                 ;408
00001e  bd70              POPNE    {r4-r6,pc}
                  |L15.32|
000020  2002              MOVS     r0,#2                 ;412
000022  63e0              STR      r0,[r4,#0x3c]         ;412
                  |L15.36|
000024  2201              MOVS     r2,#1                 ;417
000026  6820              LDR      r0,[r4,#0]            ;417
000028  2100              MOVS     r1,#0                 ;417
00002a  f7fffffe          BL       TIM_CCxChannelCmd
00002e  6a21              LDR      r1,[r4,#0x20]         ;420
000030  462b              MOV      r3,r5                 ;425
000032  480b              LDR      r0,|L15.96|
000034  4632              MOV      r2,r6                 ;425
000036  6408              STR      r0,[r1,#0x40]         ;422
000038  6a21              LDR      r1,[r4,#0x20]         ;422
00003a  480a              LDR      r0,|L15.100|
00003c  6508              STR      r0,[r1,#0x50]         ;425
00003e  6821              LDR      r1,[r4,#0]            ;425
000040  6a20              LDR      r0,[r4,#0x20]         ;425
000042  3134              ADDS     r1,r1,#0x34           ;425
000044  f7fffffe          BL       HAL_DMA_Start_IT
000048  6820              LDR      r0,[r4,#0]            ;428
00004a  68c1              LDR      r1,[r0,#0xc]          ;428
00004c  f4417100          ORR      r1,r1,#0x200          ;428
000050  60c1              STR      r1,[r0,#0xc]          ;428
000052  6820              LDR      r0,[r4,#0]            ;431
000054  6801              LDR      r1,[r0,#0]            ;431
000056  f0410101          ORR      r1,r1,#1              ;431
00005a  6001              STR      r1,[r0,#0]            ;431
00005c  2000              MOVS     r0,#0                 ;434
00005e  bd70              POP      {r4-r6,pc}
;;;436    
                          ENDP

                  |L15.96|
                          DCD      TIM_DMACaptureCplt
                  |L15.100|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_HallSensor_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Start_IT PROC
;;;342      */
;;;343    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;344    { 
000002  4604              MOV      r4,r0
;;;345      /* Check the parameters */
;;;346      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;347      
;;;348      /* Enable the capture compare Interrupts 1 event */
;;;349      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000004  6800              LDR      r0,[r0,#0]
000006  68c1              LDR      r1,[r0,#0xc]
000008  f0410102          ORR      r1,r1,#2
00000c  60c1              STR      r1,[r0,#0xc]
;;;350      
;;;351      /* Enable the Input Capture channels 1
;;;352        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;353      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);  
00000e  6820              LDR      r0,[r4,#0]
000010  2201              MOVS     r2,#1
000012  2100              MOVS     r1,#0
000014  f7fffffe          BL       TIM_CCxChannelCmd
;;;354      
;;;355      /* Enable the Peripheral */
;;;356      __HAL_TIM_ENABLE(htim);
000018  6820              LDR      r0,[r4,#0]
00001a  6801              LDR      r1,[r0,#0]
00001c  f0410101          ORR      r1,r1,#1
000020  6001              STR      r1,[r0,#0]
;;;357      
;;;358      /* Return function status */
;;;359      return HAL_OK;
000022  2000              MOVS     r0,#0
;;;360    }
000024  bd10              POP      {r4,pc}
;;;361    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop PROC
;;;320      */
;;;321    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
000000  2200              MOVS     r2,#0
;;;322    {
000002  b510              PUSH     {r4,lr}
000004  4604              MOV      r4,r0
;;;323      /* Check the parameters */
;;;324      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;325      
;;;326      /* Disable the Input Capture channels 1, 2 and 3
;;;327        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;328      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000006  6800              LDR      r0,[r0,#0]
000008  4611              MOV      r1,r2
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;329    
;;;330      /* Disable the Peripheral */
;;;331      __HAL_TIM_DISABLE(htim);
00000e  6820              LDR      r0,[r4,#0]
000010  f2411111          MOV      r1,#0x1111
000014  6a02              LDR      r2,[r0,#0x20]
000016  420a              TST      r2,r1
000018  d108              BNE      |L17.44|
00001a  6a01              LDR      r1,[r0,#0x20]
00001c  f2404244          MOV      r2,#0x444
000020  4211              TST      r1,r2
000022  d103              BNE      |L17.44|
000024  6801              LDR      r1,[r0,#0]
000026  f0210101          BIC      r1,r1,#1
00002a  6001              STR      r1,[r0,#0]
                  |L17.44|
;;;332      
;;;333      /* Return function status */
;;;334      return HAL_OK;
00002c  2000              MOVS     r0,#0
;;;335    }
00002e  bd10              POP      {r4,pc}
;;;336    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop_DMA PROC
;;;442      */
;;;443    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
000000  2200              MOVS     r2,#0
;;;444    {
000002  b510              PUSH     {r4,lr}
000004  4604              MOV      r4,r0
;;;445      /* Check the parameters */
;;;446      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;447      
;;;448      /* Disable the Input Capture channels 1
;;;449        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;450      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000006  6800              LDR      r0,[r0,#0]
000008  4611              MOV      r1,r2
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;451     
;;;452      
;;;453      /* Disable the capture compare Interrupts 1 event */
;;;454      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
00000e  6820              LDR      r0,[r4,#0]
;;;455     
;;;456      /* Disable the Peripheral */
;;;457      __HAL_TIM_DISABLE(htim);
000010  f2411111          MOV      r1,#0x1111
000014  68c2              LDR      r2,[r0,#0xc]          ;454
000016  f4227200          BIC      r2,r2,#0x200          ;454
00001a  60c2              STR      r2,[r0,#0xc]          ;454
00001c  6820              LDR      r0,[r4,#0]
00001e  6a02              LDR      r2,[r0,#0x20]
000020  420a              TST      r2,r1
000022  d108              BNE      |L18.54|
000024  6a01              LDR      r1,[r0,#0x20]
000026  f2404244          MOV      r2,#0x444
00002a  4211              TST      r1,r2
00002c  d103              BNE      |L18.54|
00002e  6801              LDR      r1,[r0,#0]
000030  f0210101          BIC      r1,r1,#1
000034  6001              STR      r1,[r0,#0]
                  |L18.54|
;;;458      
;;;459      /* Return function status */
;;;460      return HAL_OK;
000036  2000              MOVS     r0,#0
;;;461    }
000038  bd10              POP      {r4,pc}
;;;462    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop_IT PROC
;;;367      */
;;;368    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
000000  2200              MOVS     r2,#0
;;;369    {
000002  b510              PUSH     {r4,lr}
000004  4604              MOV      r4,r0
;;;370      /* Check the parameters */
;;;371      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;372      
;;;373      /* Disable the Input Capture channels 1
;;;374        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;375      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000006  6800              LDR      r0,[r0,#0]
000008  4611              MOV      r1,r2
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;376      
;;;377      /* Disable the capture compare Interrupts event */
;;;378      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
00000e  6820              LDR      r0,[r4,#0]
;;;379      
;;;380      /* Disable the Peripheral */
;;;381      __HAL_TIM_DISABLE(htim);
000010  f2411111          MOV      r1,#0x1111
000014  68c2              LDR      r2,[r0,#0xc]          ;378
000016  f0220202          BIC      r2,r2,#2              ;378
00001a  60c2              STR      r2,[r0,#0xc]          ;378
00001c  6820              LDR      r0,[r4,#0]
00001e  6a02              LDR      r2,[r0,#0x20]
000020  420a              TST      r2,r1
000022  d108              BNE      |L19.54|
000024  6a01              LDR      r1,[r0,#0x20]
000026  f2404244          MOV      r2,#0x444
00002a  4211              TST      r1,r2
00002c  d103              BNE      |L19.54|
00002e  6801              LDR      r1,[r0,#0]
000030  f0210101          BIC      r1,r1,#1
000034  6001              STR      r1,[r0,#0]
                  |L19.54|
;;;382      
;;;383      /* Return function status */
;;;384      return HAL_OK;
000036  2000              MOVS     r0,#0
;;;385    }
000038  bd10              POP      {r4,pc}
;;;386    
                          ENDP


                          AREA ||i.HAL_TIMEx_MasterConfigSynchronization||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_MasterConfigSynchronization PROC
;;;2051     */
;;;2052   HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
000000  b430              PUSH     {r4,r5}
;;;2053   {
;;;2054     uint32_t tmpcr2;  
;;;2055     uint32_t tmpsmcr;  
;;;2056   
;;;2057     /* Check the parameters */
;;;2058     assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
;;;2059     assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
;;;2060     assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
;;;2061     
;;;2062     /* Check input state */
;;;2063     __HAL_LOCK(htim);
000002  6b82              LDR      r2,[r0,#0x38]
000004  2a01              CMP      r2,#1
000006  bf02              ITTT     EQ
000008  2002              MOVEQ    r0,#2
;;;2064   
;;;2065    /* Get the TIMx CR2 register value */
;;;2066     tmpcr2 = htim->Instance->CR2;
;;;2067   
;;;2068     /* Get the TIMx SMCR register value */
;;;2069     tmpsmcr = htim->Instance->SMCR;
;;;2070   
;;;2071     /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
;;;2072     if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
;;;2073     {
;;;2074       /* Check the parameters */
;;;2075       assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
;;;2076       
;;;2077       /* Clear the MMS2 bits */
;;;2078       tmpcr2 &= ~TIM_CR2_MMS2;
;;;2079       /* Select the TRGO2 source*/
;;;2080       tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
;;;2081     }
;;;2082     
;;;2083     /* Reset the MMS Bits */
;;;2084     tmpcr2 &= ~TIM_CR2_MMS;
;;;2085     /* Select the TRGO source */
;;;2086     tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
;;;2087   
;;;2088     /* Reset the MSM Bit */
;;;2089     tmpsmcr &= ~TIM_SMCR_MSM;
;;;2090     /* Set master mode */
;;;2091     tmpsmcr |= sMasterConfig->MasterSlaveMode;
;;;2092     
;;;2093     /* Update TIMx CR2 */
;;;2094     htim->Instance->CR2 = tmpcr2;
;;;2095     
;;;2096     /* Update TIMx SMCR */
;;;2097     htim->Instance->SMCR = tmpsmcr;
;;;2098   
;;;2099     __HAL_UNLOCK(htim);
;;;2100     
;;;2101     return HAL_OK;
;;;2102   } 
00000a  bc30              POPEQ    {r4,r5}
00000c  4770              BXEQ     lr
00000e  2201              MOVS     r2,#1                 ;2063
000010  6382              STR      r2,[r0,#0x38]         ;2066
000012  6802              LDR      r2,[r0,#0]            ;2066
000014  6853              LDR      r3,[r2,#4]            ;2066
000016  f1a24c80          SUB      r12,r2,#0x40000000    ;2072
00001a  f5bc3c80          SUBS     r12,r12,#0x10000      ;2072
00001e  f8d2c008          LDR      r12,[r2,#8]           ;2069
000022  bf1c              ITT      NE                    ;2072
000024  f1a24480          SUBNE    r4,r2,#0x40000000     ;2072
000028  f5b43482          SUBSNE   r4,r4,#0x10400        ;2072
00002c  d103              BNE      |L20.54|
00002e  684c              LDR      r4,[r1,#4]            ;2080
000030  f4230370          BIC      r3,r3,#0xf00000       ;2078
000034  4323              ORRS     r3,r3,r4              ;2080
                  |L20.54|
000036  680c              LDR      r4,[r1,#0]            ;2089
000038  688d              LDR      r5,[r1,#8]            ;2089
00003a  f0230370          BIC      r3,r3,#0x70           ;2084
00003e  f02c0180          BIC      r1,r12,#0x80          ;2089
000042  f04f0c00          MOV      r12,#0                ;2099
000046  4323              ORRS     r3,r3,r4              ;2086
000048  6053              STR      r3,[r2,#4]            ;2094
00004a  6802              LDR      r2,[r0,#0]            ;2097
00004c  4329              ORRS     r1,r1,r5              ;2091
00004e  6091              STR      r1,[r2,#8]            ;2097
000050  f8c0c038          STR      r12,[r0,#0x38]        ;2101
000054  4660              MOV      r0,r12                ;2101
000056  bc30              POP      {r4,r5}
000058  4770              BX       lr
;;;2103                                                        
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Start PROC
;;;499      */
;;;500    HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
000002  2304              MOVS     r3,#4
000004  f8d2c020          LDR      r12,[r2,#0x20]
000008  fa03f101          LSL      r1,r3,r1
00000c  ea2c0301          BIC      r3,r12,r1
000010  6213              STR      r3,[r2,#0x20]
000012  6a13              LDR      r3,[r2,#0x20]
000014  4319              ORRS     r1,r1,r3
000016  6211              STR      r1,[r2,#0x20]
;;;501    {
;;;502      /* Check the parameters */
;;;503      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;504      
;;;505         /* Enable the Capture compare channel N */
;;;506         TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;507        
;;;508      /* Enable the Main Output */
;;;509        __HAL_TIM_MOE_ENABLE(htim);
000018  6801              LDR      r1,[r0,#0]
00001a  6c4a              LDR      r2,[r1,#0x44]
00001c  f4424200          ORR      r2,r2,#0x8000
000020  644a              STR      r2,[r1,#0x44]
;;;510    
;;;511      /* Enable the Peripheral */
;;;512      __HAL_TIM_ENABLE(htim);
000022  6800              LDR      r0,[r0,#0]
000024  6801              LDR      r1,[r0,#0]
000026  f0410101          ORR      r1,r1,#1
00002a  6001              STR      r1,[r0,#0]
;;;513      
;;;514      /* Return function status */
;;;515      return HAL_OK;
00002c  2000              MOVS     r0,#0
;;;516    } 
00002e  4770              BX       lr
;;;517    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OCN_Start_DMA PROC
;;;705      */
;;;706    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;707    {
000002  4604              MOV      r4,r0
;;;708      /* Check the parameters */
;;;709      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;710      
;;;711      if((htim->State == HAL_TIM_STATE_BUSY))
000004  6bc0              LDR      r0,[r0,#0x3c]
000006  4694              MOV      r12,r2                ;707
000008  460d              MOV      r5,r1                 ;707
00000a  2802              CMP      r0,#2
;;;712      {
;;;713         return HAL_BUSY;
;;;714      }
;;;715      else if((htim->State == HAL_TIM_STATE_READY))
;;;716      {
;;;717        if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;718        {
;;;719          return HAL_ERROR;                                    
;;;720        }
;;;721        else
;;;722        {
;;;723          htim->State = HAL_TIM_STATE_BUSY;
;;;724        }
;;;725      }    
;;;726      switch (Channel)
;;;727      {
;;;728        case TIM_CHANNEL_1:
;;;729        {      
;;;730          /* Set the DMA Period elapsed callback */
;;;731          htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;732         
;;;733          /* Set the DMA error callback */
;;;734          htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;735          
;;;736          /* Enable the DMA Stream */
;;;737          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;738          
;;;739          /* Enable the TIM Output Compare DMA request */
;;;740          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;741        }
;;;742        break;
;;;743        
;;;744        case TIM_CHANNEL_2:
;;;745        {
;;;746          /* Set the DMA Period elapsed callback */
;;;747          htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;748         
;;;749          /* Set the DMA error callback */
;;;750          htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
;;;751          
;;;752          /* Enable the DMA Stream */
;;;753          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;754          
;;;755          /* Enable the TIM Output Compare DMA request */
;;;756          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;757        }
;;;758        break;
;;;759        
;;;760        case TIM_CHANNEL_3:
;;;761    {
;;;762          /* Set the DMA Period elapsed callback */
;;;763          htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;764         
;;;765          /* Set the DMA error callback */
;;;766          htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
;;;767          
;;;768          /* Enable the DMA Stream */
;;;769          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;770          
;;;771          /* Enable the TIM Output Compare DMA request */
;;;772          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;773        }
;;;774        break;
;;;775        
;;;776        case TIM_CHANNEL_4:
;;;777        {
;;;778         /* Set the DMA Period elapsed callback */
;;;779          htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;780         
;;;781          /* Set the DMA error callback */
;;;782          htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
;;;783          
;;;784          /* Enable the DMA Stream */
;;;785          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;786          
;;;787          /* Enable the TIM Output Compare DMA request */
;;;788          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;789        }
;;;790        break;
;;;791        
;;;792        default:
;;;793        break;
;;;794      }
;;;795    
;;;796      /* Enable the Capture compare channel N */
;;;797      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;798      
;;;799      /* Enable the Main Output */
;;;800      __HAL_TIM_MOE_ENABLE(htim);
;;;801      
;;;802      /* Enable the Peripheral */
;;;803      __HAL_TIM_ENABLE(htim); 
;;;804      
;;;805      /* Return function status */
;;;806      return HAL_OK;
;;;807    }
00000c  bf08              IT       EQ
00000e  bd70              POPEQ    {r4-r6,pc}
000010  6be0              LDR      r0,[r4,#0x3c]         ;715
000012  2801              CMP      r0,#1                 ;715
000014  d108              BNE      |L22.40|
000016  f1bc0f00          CMP      r12,#0                ;717
00001a  d103              BNE      |L22.36|
00001c  2b00              CMP      r3,#0                 ;717
00001e  bf1c              ITT      NE                    ;719
000020  2001              MOVNE    r0,#1                 ;719
000022  bd70              POPNE    {r4-r6,pc}
                  |L22.36|
000024  2002              MOVS     r0,#2                 ;723
000026  63e0              STR      r0,[r4,#0x3c]         ;723
                  |L22.40|
000028  482f              LDR      r0,|L22.232|
00002a  4930              LDR      r1,|L22.236|
00002c  b135              CBZ      r5,|L22.60|
00002e  2d04              CMP      r5,#4                 ;726
000030  d014              BEQ      |L22.92|
000032  2d08              CMP      r5,#8                 ;726
000034  d022              BEQ      |L22.124|
000036  2d0c              CMP      r5,#0xc               ;726
000038  d030              BEQ      |L22.156|
00003a  e03f              B        |L22.188|
                  |L22.60|
00003c  6a22              LDR      r2,[r4,#0x20]         ;731
00003e  6410              STR      r0,[r2,#0x40]         ;734
000040  6a20              LDR      r0,[r4,#0x20]         ;734
000042  6501              STR      r1,[r0,#0x50]         ;737
000044  6821              LDR      r1,[r4,#0]            ;737
000046  6a20              LDR      r0,[r4,#0x20]         ;737
000048  f1010234          ADD      r2,r1,#0x34           ;737
00004c  4661              MOV      r1,r12                ;737
00004e  f7fffffe          BL       HAL_DMA_Start_IT
000052  6820              LDR      r0,[r4,#0]            ;740
000054  68c1              LDR      r1,[r0,#0xc]          ;740
000056  f4417100          ORR      r1,r1,#0x200          ;740
00005a  e02e              B        |L22.186|
                  |L22.92|
00005c  6a62              LDR      r2,[r4,#0x24]         ;747
00005e  6410              STR      r0,[r2,#0x40]         ;750
000060  6a60              LDR      r0,[r4,#0x24]         ;750
000062  6501              STR      r1,[r0,#0x50]         ;753
000064  6821              LDR      r1,[r4,#0]            ;753
000066  6a60              LDR      r0,[r4,#0x24]         ;753
000068  f1010238          ADD      r2,r1,#0x38           ;753
00006c  4661              MOV      r1,r12                ;753
00006e  f7fffffe          BL       HAL_DMA_Start_IT
000072  6820              LDR      r0,[r4,#0]            ;756
000074  68c1              LDR      r1,[r0,#0xc]          ;756
000076  f4416180          ORR      r1,r1,#0x400          ;756
00007a  e01e              B        |L22.186|
                  |L22.124|
00007c  6aa2              LDR      r2,[r4,#0x28]         ;763
00007e  6410              STR      r0,[r2,#0x40]         ;766
000080  6aa0              LDR      r0,[r4,#0x28]         ;766
000082  6501              STR      r1,[r0,#0x50]         ;769
000084  6821              LDR      r1,[r4,#0]            ;769
000086  6aa0              LDR      r0,[r4,#0x28]         ;769
000088  f101023c          ADD      r2,r1,#0x3c           ;769
00008c  4661              MOV      r1,r12                ;769
00008e  f7fffffe          BL       HAL_DMA_Start_IT
000092  6820              LDR      r0,[r4,#0]            ;772
000094  68c1              LDR      r1,[r0,#0xc]          ;772
000096  f4416100          ORR      r1,r1,#0x800          ;772
00009a  e00e              B        |L22.186|
                  |L22.156|
00009c  6ae2              LDR      r2,[r4,#0x2c]         ;779
00009e  6410              STR      r0,[r2,#0x40]         ;782
0000a0  6ae0              LDR      r0,[r4,#0x2c]         ;782
0000a2  6501              STR      r1,[r0,#0x50]         ;785
0000a4  6821              LDR      r1,[r4,#0]            ;785
0000a6  6ae0              LDR      r0,[r4,#0x2c]         ;785
0000a8  f1010240          ADD      r2,r1,#0x40           ;785
0000ac  4661              MOV      r1,r12                ;785
0000ae  f7fffffe          BL       HAL_DMA_Start_IT
0000b2  6820              LDR      r0,[r4,#0]            ;788
0000b4  68c1              LDR      r1,[r0,#0xc]          ;788
0000b6  f4415180          ORR      r1,r1,#0x1000         ;788
                  |L22.186|
0000ba  60c1              STR      r1,[r0,#0xc]          ;772
                  |L22.188|
0000bc  6820              LDR      r0,[r4,#0]            ;772
0000be  2104              MOVS     r1,#4                 ;772
0000c0  6a02              LDR      r2,[r0,#0x20]         ;772
0000c2  40a9              LSLS     r1,r1,r5              ;772
0000c4  438a              BICS     r2,r2,r1              ;772
0000c6  6202              STR      r2,[r0,#0x20]         ;772
0000c8  6a02              LDR      r2,[r0,#0x20]         ;772
0000ca  4311              ORRS     r1,r1,r2              ;772
0000cc  6201              STR      r1,[r0,#0x20]         ;772
0000ce  6820              LDR      r0,[r4,#0]            ;800
0000d0  6c41              LDR      r1,[r0,#0x44]         ;800
0000d2  f4414100          ORR      r1,r1,#0x8000         ;800
0000d6  6441              STR      r1,[r0,#0x44]         ;800
0000d8  6820              LDR      r0,[r4,#0]            ;803
0000da  6801              LDR      r1,[r0,#0]            ;803
0000dc  f0410101          ORR      r1,r1,#1              ;803
0000e0  6001              STR      r1,[r0,#0]            ;803
0000e2  2000              MOVS     r0,#0                 ;806
0000e4  bd70              POP      {r4-r6,pc}
;;;808    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L22.232|
                          DCD      TIM_DMADelayPulseCplt
                  |L22.236|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_OCN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Start_IT PROC
;;;561      */
;;;562    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
;;;563    {
;;;564      /* Check the parameters */
;;;565      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;566      
;;;567      switch (Channel)
000002  2900              CMP      r1,#0
;;;568      {
;;;569        case TIM_CHANNEL_1:
;;;570        {       
;;;571          /* Enable the TIM Output Compare interrupt */
;;;572          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000004  bf04              ITT      EQ
000006  68d3              LDREQ    r3,[r2,#0xc]
000008  f0430302          ORREQ    r3,r3,#2
00000c  d011              BEQ      |L23.50|
00000e  2904              CMP      r1,#4                 ;567
;;;573        }
;;;574        break;
;;;575        
;;;576        case TIM_CHANNEL_2:
;;;577        {
;;;578          /* Enable the TIM Output Compare interrupt */
;;;579          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000010  bf04              ITT      EQ
000012  68d3              LDREQ    r3,[r2,#0xc]
000014  f0430304          ORREQ    r3,r3,#4
000018  d00b              BEQ      |L23.50|
00001a  2908              CMP      r1,#8                 ;567
;;;580        }
;;;581        break;
;;;582        
;;;583        case TIM_CHANNEL_3:
;;;584        {
;;;585          /* Enable the TIM Output Compare interrupt */
;;;586          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
00001c  bf04              ITT      EQ
00001e  68d3              LDREQ    r3,[r2,#0xc]
000020  f0430308          ORREQ    r3,r3,#8
000024  d005              BEQ      |L23.50|
000026  290c              CMP      r1,#0xc               ;567
;;;587        }
;;;588        break;
;;;589        
;;;590        case TIM_CHANNEL_4:
;;;591        {
;;;592          /* Enable the TIM Output Compare interrupt */
;;;593          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000028  bf04              ITT      EQ
00002a  68d3              LDREQ    r3,[r2,#0xc]
00002c  f0430310          ORREQ    r3,r3,#0x10
000030  d100              BNE      |L23.52|
                  |L23.50|
000032  60d3              STR      r3,[r2,#0xc]          ;586
                  |L23.52|
;;;594        }
;;;595        break;
;;;596        
;;;597        default:
;;;598        break;
;;;599      } 
;;;600      
;;;601      /* Enable the TIM Break interrupt */
;;;602      __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
000034  6802              LDR      r2,[r0,#0]
000036  68d3              LDR      r3,[r2,#0xc]
000038  f0430380          ORR      r3,r3,#0x80
00003c  60d3              STR      r3,[r2,#0xc]
00003e  6802              LDR      r2,[r0,#0]
000040  2304              MOVS     r3,#4
000042  f8d2c020          LDR      r12,[r2,#0x20]
000046  fa03f101          LSL      r1,r3,r1
00004a  ea2c0301          BIC      r3,r12,r1
00004e  6213              STR      r3,[r2,#0x20]
000050  6a13              LDR      r3,[r2,#0x20]
000052  4319              ORRS     r1,r1,r3
000054  6211              STR      r1,[r2,#0x20]
;;;603      
;;;604      /* Enable the Capture compare channel N */
;;;605      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;606    
;;;607      /* Enable the Main Output */
;;;608     __HAL_TIM_MOE_ENABLE(htim);
000056  6801              LDR      r1,[r0,#0]
000058  6c4a              LDR      r2,[r1,#0x44]
00005a  f4424200          ORR      r2,r2,#0x8000
00005e  644a              STR      r2,[r1,#0x44]
;;;609    
;;;610      /* Enable the Peripheral */
;;;611      __HAL_TIM_ENABLE(htim);
000060  6800              LDR      r0,[r0,#0]
000062  6801              LDR      r1,[r0,#0]
000064  f0410101          ORR      r1,r1,#1
000068  6001              STR      r1,[r0,#0]
;;;612      
;;;613      /* Return function status */
;;;614      return HAL_OK;
00006a  2000              MOVS     r0,#0
;;;615    } 
00006c  4770              BX       lr
;;;616    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop PROC
;;;530      */
;;;531    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;532    { 
000004  6802              LDR      r2,[r0,#0]
;;;533      /* Check the parameters */
;;;534      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;535      
;;;536        /* Disable the Capture compare channel N */
;;;537      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000006  2300              MOVS     r3,#0
000008  f04f0c04          MOV      r12,#4
00000c  408b              LSLS     r3,r3,r1
00000e  6a14              LDR      r4,[r2,#0x20]
000010  fa0cf101          LSL      r1,r12,r1
000014  ea240101          BIC      r1,r4,r1
000018  6211              STR      r1,[r2,#0x20]
00001a  6a11              LDR      r1,[r2,#0x20]
00001c  4319              ORRS     r1,r1,r3
00001e  6211              STR      r1,[r2,#0x20]
;;;538        
;;;539      /* Disable the Main Output */
;;;540        __HAL_TIM_MOE_DISABLE(htim);
000020  6801              LDR      r1,[r0,#0]
000022  f2411211          MOV      r2,#0x1111
000026  1093              ASRS     r3,r2,#2
000028  f8d1c020          LDR      r12,[r1,#0x20]
00002c  ea1c0f02          TST      r12,r2
000030  bf04              ITT      EQ
000032  f8d1c020          LDREQ    r12,[r1,#0x20]
000036  ea1c0f03          TSTEQ    r12,r3
00003a  d105              BNE      |L24.72|
00003c  f8d1c044          LDR      r12,[r1,#0x44]
000040  f42c4c00          BIC      r12,r12,#0x8000
000044  f8c1c044          STR      r12,[r1,#0x44]
                  |L24.72|
;;;541    
;;;542      /* Disable the Peripheral */
;;;543      __HAL_TIM_DISABLE(htim);
000048  6800              LDR      r0,[r0,#0]
00004a  6a01              LDR      r1,[r0,#0x20]
00004c  4211              TST      r1,r2
00004e  bf04              ITT      EQ
000050  6a01              LDREQ    r1,[r0,#0x20]
000052  4219              TSTEQ    r1,r3
000054  d103              BNE      |L24.94|
000056  6801              LDR      r1,[r0,#0]
000058  f0210101          BIC      r1,r1,#1
00005c  6001              STR      r1,[r0,#0]
                  |L24.94|
;;;544      
;;;545      /* Return function status */
;;;546      return HAL_OK;
;;;547    } 
00005e  f85d4b04          POP.W    {r4}
000062  2000              MOVS     r0,#0                 ;546
000064  4770              BX       lr
;;;548    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop_DMA PROC
;;;821      */
;;;822    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;823    {
;;;824      /* Check the parameters */
;;;825      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;826      
;;;827      switch (Channel)
000004  6802              LDR      r2,[r0,#0]
000006  2900              CMP      r1,#0
;;;828      {
;;;829        case TIM_CHANNEL_1:
;;;830        {       
;;;831          /* Disable the TIM Output Compare DMA request */
;;;832          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000008  bf04              ITT      EQ
00000a  68d3              LDREQ    r3,[r2,#0xc]
00000c  f4237300          BICEQ    r3,r3,#0x200
000010  d011              BEQ      |L25.54|
000012  2904              CMP      r1,#4                 ;827
;;;833        }
;;;834        break;
;;;835        
;;;836        case TIM_CHANNEL_2:
;;;837        {
;;;838          /* Disable the TIM Output Compare DMA request */
;;;839          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000014  bf04              ITT      EQ
000016  68d3              LDREQ    r3,[r2,#0xc]
000018  f4236380          BICEQ    r3,r3,#0x400
00001c  d00b              BEQ      |L25.54|
00001e  2908              CMP      r1,#8                 ;827
;;;840        }
;;;841        break;
;;;842        
;;;843        case TIM_CHANNEL_3:
;;;844        {
;;;845          /* Disable the TIM Output Compare DMA request */
;;;846          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
000020  bf04              ITT      EQ
000022  68d3              LDREQ    r3,[r2,#0xc]
000024  f4236300          BICEQ    r3,r3,#0x800
000028  d005              BEQ      |L25.54|
00002a  290c              CMP      r1,#0xc               ;827
;;;847        }
;;;848        break;
;;;849        
;;;850        case TIM_CHANNEL_4:
;;;851        {
;;;852          /* Disable the TIM Output Compare interrupt */
;;;853          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
00002c  bf04              ITT      EQ
00002e  68d3              LDREQ    r3,[r2,#0xc]
000030  f4235380          BICEQ    r3,r3,#0x1000
000034  d100              BNE      |L25.56|
                  |L25.54|
000036  60d3              STR      r3,[r2,#0xc]          ;846
                  |L25.56|
;;;854        }
;;;855        break;
;;;856        
;;;857        default:
;;;858        break;
;;;859      } 
;;;860      
;;;861      /* Disable the Capture compare channel N */
;;;862      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000038  2300              MOVS     r3,#0
00003a  6802              LDR      r2,[r0,#0]
00003c  f04f0c04          MOV      r12,#4
000040  408b              LSLS     r3,r3,r1
000042  6a14              LDR      r4,[r2,#0x20]
000044  fa0cf101          LSL      r1,r12,r1
000048  ea240101          BIC      r1,r4,r1
00004c  6211              STR      r1,[r2,#0x20]
00004e  6a11              LDR      r1,[r2,#0x20]
000050  4319              ORRS     r1,r1,r3
000052  6211              STR      r1,[r2,#0x20]
;;;863      
;;;864      /* Disable the Main Output */
;;;865      __HAL_TIM_MOE_DISABLE(htim);
000054  6801              LDR      r1,[r0,#0]
000056  f2411211          MOV      r2,#0x1111
00005a  1093              ASRS     r3,r2,#2
00005c  f8d1c020          LDR      r12,[r1,#0x20]
000060  ea1c0f02          TST      r12,r2
000064  bf04              ITT      EQ
000066  f8d1c020          LDREQ    r12,[r1,#0x20]
00006a  ea1c0f03          TSTEQ    r12,r3
00006e  d105              BNE      |L25.124|
000070  f8d1c044          LDR      r12,[r1,#0x44]
000074  f42c4c00          BIC      r12,r12,#0x8000
000078  f8c1c044          STR      r12,[r1,#0x44]
                  |L25.124|
;;;866      
;;;867      /* Disable the Peripheral */
;;;868      __HAL_TIM_DISABLE(htim);
00007c  6801              LDR      r1,[r0,#0]
00007e  f8d1c020          LDR      r12,[r1,#0x20]
000082  ea1c0f02          TST      r12,r2
000086  bf04              ITT      EQ
000088  6a0a              LDREQ    r2,[r1,#0x20]
00008a  421a              TSTEQ    r2,r3
00008c  d103              BNE      |L25.150|
00008e  680a              LDR      r2,[r1,#0]
000090  f0220201          BIC      r2,r2,#1
000094  600a              STR      r2,[r1,#0]
                  |L25.150|
;;;869      
;;;870      /* Change the htim state */
;;;871      htim->State = HAL_TIM_STATE_READY;
000096  2101              MOVS     r1,#1
000098  63c1              STR      r1,[r0,#0x3c]
;;;872      
;;;873      /* Return function status */
;;;874      return HAL_OK;
;;;875    }
00009a  f85d4b04          POP.W    {r4}
00009e  2000              MOVS     r0,#0                 ;874
0000a0  4770              BX       lr
;;;876    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop_IT PROC
;;;629      */
;;;630    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;631    {
;;;632      uint32_t tmpccer = 0; 
;;;633    
;;;634      /* Check the parameters */
;;;635      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;636      
;;;637      switch (Channel)
;;;638      {
;;;639        case TIM_CHANNEL_1:
;;;640        {       
;;;641          /* Disable the TIM Output Compare interrupt */
;;;642          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000004  6802              LDR      r2,[r0,#0]
000006  2900              CMP      r1,#0                 ;637
000008  bf04              ITT      EQ
00000a  68d3              LDREQ    r3,[r2,#0xc]
00000c  f0230302          BICEQ    r3,r3,#2
000010  d011              BEQ      |L26.54|
000012  2904              CMP      r1,#4                 ;637
;;;643        }
;;;644        break;
;;;645        
;;;646        case TIM_CHANNEL_2:
;;;647        {
;;;648          /* Disable the TIM Output Compare interrupt */
;;;649          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000014  bf04              ITT      EQ
000016  68d3              LDREQ    r3,[r2,#0xc]
000018  f0230304          BICEQ    r3,r3,#4
00001c  d00b              BEQ      |L26.54|
00001e  2908              CMP      r1,#8                 ;637
;;;650        }
;;;651        break;
;;;652        
;;;653        case TIM_CHANNEL_3:
;;;654        {
;;;655          /* Disable the TIM Output Compare interrupt */
;;;656          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000020  bf04              ITT      EQ
000022  68d3              LDREQ    r3,[r2,#0xc]
000024  f0230308          BICEQ    r3,r3,#8
000028  d005              BEQ      |L26.54|
00002a  290c              CMP      r1,#0xc               ;637
;;;657        }
;;;658        break;
;;;659        
;;;660        case TIM_CHANNEL_4:
;;;661        {
;;;662          /* Disable the TIM Output Compare interrupt */
;;;663          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
00002c  bf04              ITT      EQ
00002e  68d3              LDREQ    r3,[r2,#0xc]
000030  f0230310          BICEQ    r3,r3,#0x10
000034  d100              BNE      |L26.56|
                  |L26.54|
000036  60d3              STR      r3,[r2,#0xc]          ;656
                  |L26.56|
;;;664        }
;;;665        break;
;;;666        
;;;667        default:
;;;668        break; 
;;;669      }
;;;670    
;;;671      /* Disable the Capture compare channel N */
;;;672      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000038  2300              MOVS     r3,#0
00003a  6802              LDR      r2,[r0,#0]
00003c  f04f0c04          MOV      r12,#4
000040  408b              LSLS     r3,r3,r1
000042  6a14              LDR      r4,[r2,#0x20]
000044  fa0cf101          LSL      r1,r12,r1
000048  ea240101          BIC      r1,r4,r1
00004c  6211              STR      r1,[r2,#0x20]
00004e  6a11              LDR      r1,[r2,#0x20]
000050  4319              ORRS     r1,r1,r3
000052  6211              STR      r1,[r2,#0x20]
;;;673    
;;;674      /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;675      tmpccer = htim->Instance->CCER;
000054  6801              LDR      r1,[r0,#0]
;;;676      if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
000056  f2404244          MOV      r2,#0x444
00005a  6a0b              LDR      r3,[r1,#0x20]         ;675
00005c  4213              TST      r3,r2
00005e  d103              BNE      |L26.104|
;;;677      {
;;;678        __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
000060  68cb              LDR      r3,[r1,#0xc]
000062  f0230380          BIC      r3,r3,#0x80
000066  60cb              STR      r3,[r1,#0xc]
                  |L26.104|
;;;679      }
;;;680    
;;;681      /* Disable the Main Output */
;;;682      __HAL_TIM_MOE_DISABLE(htim);
000068  6801              LDR      r1,[r0,#0]
00006a  f2411311          MOV      r3,#0x1111
00006e  f8d1c020          LDR      r12,[r1,#0x20]
000072  ea1c0f03          TST      r12,r3
000076  bf04              ITT      EQ
000078  f8d1c020          LDREQ    r12,[r1,#0x20]
00007c  ea1c0f02          TSTEQ    r12,r2
000080  d105              BNE      |L26.142|
000082  f8d1c044          LDR      r12,[r1,#0x44]
000086  f42c4c00          BIC      r12,r12,#0x8000
00008a  f8c1c044          STR      r12,[r1,#0x44]
                  |L26.142|
;;;683    
;;;684      /* Disable the Peripheral */
;;;685      __HAL_TIM_DISABLE(htim);
00008e  6800              LDR      r0,[r0,#0]
000090  6a01              LDR      r1,[r0,#0x20]
000092  4219              TST      r1,r3
000094  bf04              ITT      EQ
000096  6a01              LDREQ    r1,[r0,#0x20]
000098  4211              TSTEQ    r1,r2
00009a  d103              BNE      |L26.164|
00009c  6801              LDR      r1,[r0,#0]
00009e  f0210101          BIC      r1,r1,#1
0000a2  6001              STR      r1,[r0,#0]
                  |L26.164|
;;;686      
;;;687      /* Return function status */
;;;688      return HAL_OK;
;;;689    } 
0000a4  f85d4b04          POP.W    {r4}
0000a8  2000              MOVS     r0,#0                 ;688
0000aa  4770              BX       lr
;;;690    
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start PROC
;;;1331     */
;;;1332   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  6802              LDR      r2,[r0,#0]
000002  2304              MOVS     r3,#4
000004  fa03f101          LSL      r1,r3,r1
000008  6a13              LDR      r3,[r2,#0x20]
00000a  438b              BICS     r3,r3,r1
00000c  6213              STR      r3,[r2,#0x20]
00000e  6a13              LDR      r3,[r2,#0x20]
000010  4319              ORRS     r1,r1,r3
000012  6211              STR      r1,[r2,#0x20]
;;;1333     {
;;;1334     /* Check the parameters */
;;;1335     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1336     
;;;1337     /* Enable the complementary One Pulse output */
;;;1338     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
;;;1339     
;;;1340     /* Enable the Main Output */
;;;1341     __HAL_TIM_MOE_ENABLE(htim);
000014  6800              LDR      r0,[r0,#0]
000016  6c41              LDR      r1,[r0,#0x44]
000018  f4414100          ORR      r1,r1,#0x8000
00001c  6441              STR      r1,[r0,#0x44]
;;;1342     
;;;1343     /* Return function status */
;;;1344     return HAL_OK;
00001e  2000              MOVS     r0,#0
;;;1345   }
000020  4770              BX       lr
;;;1346   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start_IT PROC
;;;1387     */
;;;1388   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  6802              LDR      r2,[r0,#0]
;;;1389   {
;;;1390     /* Check the parameters */
;;;1391     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1392   
;;;1393     /* Enable the TIM Capture/Compare 1 interrupt */
;;;1394     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000002  68d3              LDR      r3,[r2,#0xc]
000004  f0430302          ORR      r3,r3,#2
000008  60d3              STR      r3,[r2,#0xc]
;;;1395     
;;;1396     /* Enable the TIM Capture/Compare 2 interrupt */
;;;1397     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
00000a  6802              LDR      r2,[r0,#0]
00000c  68d3              LDR      r3,[r2,#0xc]
00000e  f0430304          ORR      r3,r3,#4
000012  60d3              STR      r3,[r2,#0xc]
000014  6802              LDR      r2,[r0,#0]
000016  2304              MOVS     r3,#4
000018  f8d2c020          LDR      r12,[r2,#0x20]
00001c  fa03f101          LSL      r1,r3,r1
000020  ea2c0301          BIC      r3,r12,r1
000024  6213              STR      r3,[r2,#0x20]
000026  6a13              LDR      r3,[r2,#0x20]
000028  4319              ORRS     r1,r1,r3
00002a  6211              STR      r1,[r2,#0x20]
;;;1398     
;;;1399     /* Enable the complementary One Pulse output */
;;;1400     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
;;;1401     
;;;1402     /* Enable the Main Output */
;;;1403     __HAL_TIM_MOE_ENABLE(htim);
00002c  6800              LDR      r0,[r0,#0]
00002e  6c41              LDR      r1,[r0,#0x44]
000030  f4414100          ORR      r1,r1,#0x8000
000034  6441              STR      r1,[r0,#0x44]
;;;1404     
;;;1405     /* Return function status */
;;;1406     return HAL_OK;
000036  2000              MOVS     r0,#0
;;;1407     } 
000038  4770              BX       lr
;;;1408     
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Stop PROC
;;;1357     */
;;;1358   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  f84d4d04          PUSH.W   {r4}
;;;1359   {
000004  6802              LDR      r2,[r0,#0]
;;;1360   
;;;1361     /* Check the parameters */
;;;1362     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1363   
;;;1364     /* Disable the complementary One Pulse output */
;;;1365       TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
000006  2300              MOVS     r3,#0
000008  f04f0c04          MOV      r12,#4
00000c  408b              LSLS     r3,r3,r1
00000e  6a14              LDR      r4,[r2,#0x20]
000010  fa0cf101          LSL      r1,r12,r1
000014  ea240101          BIC      r1,r4,r1
000018  6211              STR      r1,[r2,#0x20]
00001a  6a11              LDR      r1,[r2,#0x20]
00001c  4319              ORRS     r1,r1,r3
00001e  6211              STR      r1,[r2,#0x20]
;;;1366     
;;;1367     /* Disable the Main Output */
;;;1368       __HAL_TIM_MOE_DISABLE(htim);
000020  6801              LDR      r1,[r0,#0]
000022  f2411211          MOV      r2,#0x1111
000026  1093              ASRS     r3,r2,#2
000028  f8d1c020          LDR      r12,[r1,#0x20]
00002c  ea1c0f02          TST      r12,r2
000030  bf04              ITT      EQ
000032  f8d1c020          LDREQ    r12,[r1,#0x20]
000036  ea1c0f03          TSTEQ    r12,r3
00003a  d105              BNE      |L29.72|
00003c  f8d1c044          LDR      r12,[r1,#0x44]
000040  f42c4c00          BIC      r12,r12,#0x8000
000044  f8c1c044          STR      r12,[r1,#0x44]
                  |L29.72|
;;;1369     
;;;1370     /* Disable the Peripheral */
;;;1371     __HAL_TIM_DISABLE(htim); 
000048  6800              LDR      r0,[r0,#0]
00004a  6a01              LDR      r1,[r0,#0x20]
00004c  4211              TST      r1,r2
00004e  bf04              ITT      EQ
000050  6a01              LDREQ    r1,[r0,#0x20]
000052  4219              TSTEQ    r1,r3
000054  d103              BNE      |L29.94|
000056  6801              LDR      r1,[r0,#0]
000058  f0210101          BIC      r1,r1,#1
00005c  6001              STR      r1,[r0,#0]
                  |L29.94|
;;;1372      
;;;1373     /* Return function status */
;;;1374     return HAL_OK;
;;;1375   }
00005e  f85d4b04          POP.W    {r4}
000062  2000              MOVS     r0,#0                 ;1374
000064  4770              BX       lr
;;;1376   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Stop_IT PROC
;;;1419     */
;;;1420   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  f84d4d04          PUSH.W   {r4}
;;;1421   {
;;;1422     /* Check the parameters */
;;;1423     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1424   
;;;1425     /* Disable the TIM Capture/Compare 1 interrupt */
;;;1426     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000004  6802              LDR      r2,[r0,#0]
000006  68d3              LDR      r3,[r2,#0xc]
000008  f0230302          BIC      r3,r3,#2
00000c  60d3              STR      r3,[r2,#0xc]
;;;1427     
;;;1428     /* Disable the TIM Capture/Compare 2 interrupt */
;;;1429     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
00000e  6802              LDR      r2,[r0,#0]
000010  68d3              LDR      r3,[r2,#0xc]
000012  f0230304          BIC      r3,r3,#4
000016  60d3              STR      r3,[r2,#0xc]
000018  6802              LDR      r2,[r0,#0]
;;;1430     
;;;1431     /* Disable the complementary One Pulse output */
;;;1432     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
00001a  2300              MOVS     r3,#0
00001c  f04f0c04          MOV      r12,#4
000020  408b              LSLS     r3,r3,r1
000022  6a14              LDR      r4,[r2,#0x20]
000024  fa0cf101          LSL      r1,r12,r1
000028  ea240101          BIC      r1,r4,r1
00002c  6211              STR      r1,[r2,#0x20]
00002e  6a11              LDR      r1,[r2,#0x20]
000030  4319              ORRS     r1,r1,r3
000032  6211              STR      r1,[r2,#0x20]
;;;1433     
;;;1434     /* Disable the Main Output */
;;;1435     __HAL_TIM_MOE_DISABLE(htim);
000034  6801              LDR      r1,[r0,#0]
000036  f2411211          MOV      r2,#0x1111
00003a  1093              ASRS     r3,r2,#2
00003c  f8d1c020          LDR      r12,[r1,#0x20]
000040  ea1c0f02          TST      r12,r2
000044  bf04              ITT      EQ
000046  f8d1c020          LDREQ    r12,[r1,#0x20]
00004a  ea1c0f03          TSTEQ    r12,r3
00004e  d105              BNE      |L30.92|
000050  f8d1c044          LDR      r12,[r1,#0x44]
000054  f42c4c00          BIC      r12,r12,#0x8000
000058  f8c1c044          STR      r12,[r1,#0x44]
                  |L30.92|
;;;1436     
;;;1437     /* Disable the Peripheral */
;;;1438      __HAL_TIM_DISABLE(htim);  
00005c  6800              LDR      r0,[r0,#0]
00005e  6a01              LDR      r1,[r0,#0x20]
000060  4211              TST      r1,r2
000062  bf04              ITT      EQ
000064  6a01              LDREQ    r1,[r0,#0x20]
000066  4219              TSTEQ    r1,r3
000068  d103              BNE      |L30.114|
00006a  6801              LDR      r1,[r0,#0]
00006c  f0210101          BIC      r1,r1,#1
000070  6001              STR      r1,[r0,#0]
                  |L30.114|
;;;1439     
;;;1440     /* Return function status */
;;;1441     return HAL_OK;
;;;1442   }
000072  f85d4b04          POP.W    {r4}
000076  2000              MOVS     r0,#0                 ;1441
000078  4770              BX       lr
;;;1443   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Start PROC
;;;922      */
;;;923    HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
000002  2304              MOVS     r3,#4
000004  f8d2c020          LDR      r12,[r2,#0x20]
000008  fa03f101          LSL      r1,r3,r1
00000c  ea2c0301          BIC      r3,r12,r1
000010  6213              STR      r3,[r2,#0x20]
000012  6a13              LDR      r3,[r2,#0x20]
000014  4319              ORRS     r1,r1,r3
000016  6211              STR      r1,[r2,#0x20]
;;;924    {
;;;925      /* Check the parameters */
;;;926      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;927      
;;;928      /* Enable the complementary PWM output  */
;;;929      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;930      
;;;931      /* Enable the Main Output */
;;;932      __HAL_TIM_MOE_ENABLE(htim);
000018  6801              LDR      r1,[r0,#0]
00001a  6c4a              LDR      r2,[r1,#0x44]
00001c  f4424200          ORR      r2,r2,#0x8000
000020  644a              STR      r2,[r1,#0x44]
;;;933      
;;;934      /* Enable the Peripheral */
;;;935      __HAL_TIM_ENABLE(htim);
000022  6800              LDR      r0,[r0,#0]
000024  6801              LDR      r1,[r0,#0]
000026  f0410101          ORR      r1,r1,#1
00002a  6001              STR      r1,[r0,#0]
;;;936      
;;;937      /* Return function status */
;;;938      return HAL_OK;
00002c  2000              MOVS     r0,#0
;;;939    } 
00002e  4770              BX       lr
;;;940    
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_PWMN_Start_DMA PROC
;;;1127     */
;;;1128   HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;1129   {
000002  4604              MOV      r4,r0
;;;1130     /* Check the parameters */
;;;1131     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1132     
;;;1133     if((htim->State == HAL_TIM_STATE_BUSY))
000004  6bc0              LDR      r0,[r0,#0x3c]
000006  4694              MOV      r12,r2                ;1129
000008  460d              MOV      r5,r1                 ;1129
00000a  2802              CMP      r0,#2
;;;1134     {
;;;1135        return HAL_BUSY;
;;;1136     }
;;;1137     else if((htim->State == HAL_TIM_STATE_READY))
;;;1138     {
;;;1139       if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;1140       {
;;;1141         return HAL_ERROR;                                    
;;;1142       }
;;;1143       else
;;;1144       {
;;;1145         htim->State = HAL_TIM_STATE_BUSY;
;;;1146       }
;;;1147     }    
;;;1148     switch (Channel)
;;;1149     {
;;;1150       case TIM_CHANNEL_1:
;;;1151       {      
;;;1152         /* Set the DMA Period elapsed callback */
;;;1153         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1154        
;;;1155         /* Set the DMA error callback */
;;;1156         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1157         
;;;1158         /* Enable the DMA Stream */
;;;1159         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;1160         
;;;1161         /* Enable the TIM Capture/Compare 1 DMA request */
;;;1162         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;1163       }
;;;1164       break;
;;;1165       
;;;1166       case TIM_CHANNEL_2:
;;;1167       {
;;;1168         /* Set the DMA Period elapsed callback */
;;;1169         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1170        
;;;1171         /* Set the DMA error callback */
;;;1172         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1173         
;;;1174         /* Enable the DMA Stream */
;;;1175         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;1176         
;;;1177         /* Enable the TIM Capture/Compare 2 DMA request */
;;;1178         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;1179       }
;;;1180       break;
;;;1181       
;;;1182       case TIM_CHANNEL_3:
;;;1183       {
;;;1184         /* Set the DMA Period elapsed callback */
;;;1185         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1186        
;;;1187         /* Set the DMA error callback */
;;;1188         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1189         
;;;1190         /* Enable the DMA Stream */
;;;1191         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;1192         
;;;1193         /* Enable the TIM Capture/Compare 3 DMA request */
;;;1194         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;1195       }
;;;1196       break;
;;;1197       
;;;1198       case TIM_CHANNEL_4:
;;;1199       {
;;;1200        /* Set the DMA Period elapsed callback */
;;;1201         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
;;;1202        
;;;1203         /* Set the DMA error callback */
;;;1204         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
;;;1205         
;;;1206         /* Enable the DMA Stream */
;;;1207         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;1208         
;;;1209         /* Enable the TIM Capture/Compare 4 DMA request */
;;;1210         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;1211       }
;;;1212       break;
;;;1213       
;;;1214       default:
;;;1215       break;
;;;1216     }
;;;1217   
;;;1218     /* Enable the complementary PWM output  */
;;;1219        TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;1220       
;;;1221     /* Enable the Main Output */
;;;1222       __HAL_TIM_MOE_ENABLE(htim);
;;;1223     
;;;1224     /* Enable the Peripheral */
;;;1225     __HAL_TIM_ENABLE(htim); 
;;;1226     
;;;1227     /* Return function status */
;;;1228     return HAL_OK;
;;;1229   }
00000c  bf08              IT       EQ
00000e  bd70              POPEQ    {r4-r6,pc}
000010  6be0              LDR      r0,[r4,#0x3c]         ;1137
000012  2801              CMP      r0,#1                 ;1137
000014  d108              BNE      |L32.40|
000016  f1bc0f00          CMP      r12,#0                ;1139
00001a  d103              BNE      |L32.36|
00001c  2b00              CMP      r3,#0                 ;1139
00001e  bf1c              ITT      NE                    ;1141
000020  2001              MOVNE    r0,#1                 ;1141
000022  bd70              POPNE    {r4-r6,pc}
                  |L32.36|
000024  2002              MOVS     r0,#2                 ;1145
000026  63e0              STR      r0,[r4,#0x3c]         ;1145
                  |L32.40|
000028  482f              LDR      r0,|L32.232|
00002a  4930              LDR      r1,|L32.236|
00002c  b135              CBZ      r5,|L32.60|
00002e  2d04              CMP      r5,#4                 ;1148
000030  d014              BEQ      |L32.92|
000032  2d08              CMP      r5,#8                 ;1148
000034  d022              BEQ      |L32.124|
000036  2d0c              CMP      r5,#0xc               ;1148
000038  d030              BEQ      |L32.156|
00003a  e03f              B        |L32.188|
                  |L32.60|
00003c  6a22              LDR      r2,[r4,#0x20]         ;1153
00003e  6410              STR      r0,[r2,#0x40]         ;1156
000040  6a20              LDR      r0,[r4,#0x20]         ;1156
000042  6501              STR      r1,[r0,#0x50]         ;1159
000044  6821              LDR      r1,[r4,#0]            ;1159
000046  6a20              LDR      r0,[r4,#0x20]         ;1159
000048  f1010234          ADD      r2,r1,#0x34           ;1159
00004c  4661              MOV      r1,r12                ;1159
00004e  f7fffffe          BL       HAL_DMA_Start_IT
000052  6820              LDR      r0,[r4,#0]            ;1162
000054  68c1              LDR      r1,[r0,#0xc]          ;1162
000056  f4417100          ORR      r1,r1,#0x200          ;1162
00005a  e02e              B        |L32.186|
                  |L32.92|
00005c  6a62              LDR      r2,[r4,#0x24]         ;1169
00005e  6410              STR      r0,[r2,#0x40]         ;1172
000060  6a60              LDR      r0,[r4,#0x24]         ;1172
000062  6501              STR      r1,[r0,#0x50]         ;1175
000064  6821              LDR      r1,[r4,#0]            ;1175
000066  6a60              LDR      r0,[r4,#0x24]         ;1175
000068  f1010238          ADD      r2,r1,#0x38           ;1175
00006c  4661              MOV      r1,r12                ;1175
00006e  f7fffffe          BL       HAL_DMA_Start_IT
000072  6820              LDR      r0,[r4,#0]            ;1178
000074  68c1              LDR      r1,[r0,#0xc]          ;1178
000076  f4416180          ORR      r1,r1,#0x400          ;1178
00007a  e01e              B        |L32.186|
                  |L32.124|
00007c  6aa2              LDR      r2,[r4,#0x28]         ;1185
00007e  6410              STR      r0,[r2,#0x40]         ;1188
000080  6aa0              LDR      r0,[r4,#0x28]         ;1188
000082  6501              STR      r1,[r0,#0x50]         ;1191
000084  6821              LDR      r1,[r4,#0]            ;1191
000086  6aa0              LDR      r0,[r4,#0x28]         ;1191
000088  f101023c          ADD      r2,r1,#0x3c           ;1191
00008c  4661              MOV      r1,r12                ;1191
00008e  f7fffffe          BL       HAL_DMA_Start_IT
000092  6820              LDR      r0,[r4,#0]            ;1194
000094  68c1              LDR      r1,[r0,#0xc]          ;1194
000096  f4416100          ORR      r1,r1,#0x800          ;1194
00009a  e00e              B        |L32.186|
                  |L32.156|
00009c  6ae2              LDR      r2,[r4,#0x2c]         ;1201
00009e  6410              STR      r0,[r2,#0x40]         ;1204
0000a0  6ae0              LDR      r0,[r4,#0x2c]         ;1204
0000a2  6501              STR      r1,[r0,#0x50]         ;1207
0000a4  6821              LDR      r1,[r4,#0]            ;1207
0000a6  6ae0              LDR      r0,[r4,#0x2c]         ;1207
0000a8  f1010240          ADD      r2,r1,#0x40           ;1207
0000ac  4661              MOV      r1,r12                ;1207
0000ae  f7fffffe          BL       HAL_DMA_Start_IT
0000b2  6820              LDR      r0,[r4,#0]            ;1210
0000b4  68c1              LDR      r1,[r0,#0xc]          ;1210
0000b6  f4415180          ORR      r1,r1,#0x1000         ;1210
                  |L32.186|
0000ba  60c1              STR      r1,[r0,#0xc]          ;1194
                  |L32.188|
0000bc  6820              LDR      r0,[r4,#0]            ;1194
0000be  2104              MOVS     r1,#4                 ;1194
0000c0  6a02              LDR      r2,[r0,#0x20]         ;1194
0000c2  40a9              LSLS     r1,r1,r5              ;1194
0000c4  438a              BICS     r2,r2,r1              ;1194
0000c6  6202              STR      r2,[r0,#0x20]         ;1194
0000c8  6a02              LDR      r2,[r0,#0x20]         ;1194
0000ca  4311              ORRS     r1,r1,r2              ;1194
0000cc  6201              STR      r1,[r0,#0x20]         ;1194
0000ce  6820              LDR      r0,[r4,#0]            ;1222
0000d0  6c41              LDR      r1,[r0,#0x44]         ;1222
0000d2  f4414100          ORR      r1,r1,#0x8000         ;1222
0000d6  6441              STR      r1,[r0,#0x44]         ;1222
0000d8  6820              LDR      r0,[r4,#0]            ;1225
0000da  6801              LDR      r1,[r0,#0]            ;1225
0000dc  f0410101          ORR      r1,r1,#1              ;1225
0000e0  6001              STR      r1,[r0,#0]            ;1225
0000e2  2000              MOVS     r0,#0                 ;1228
0000e4  bd70              POP      {r4-r6,pc}
;;;1230   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L32.232|
                          DCD      TIM_DMADelayPulseCplt
                  |L32.236|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_PWMN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Start_IT PROC
;;;983      */
;;;984    HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
;;;985    {
;;;986      /* Check the parameters */
;;;987      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;988      
;;;989      switch (Channel)
000002  2900              CMP      r1,#0
;;;990      {
;;;991        case TIM_CHANNEL_1:
;;;992        {       
;;;993          /* Enable the TIM Capture/Compare 1 interrupt */
;;;994          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000004  bf04              ITT      EQ
000006  68d3              LDREQ    r3,[r2,#0xc]
000008  f0430302          ORREQ    r3,r3,#2
00000c  d011              BEQ      |L33.50|
00000e  2904              CMP      r1,#4                 ;989
;;;995        }
;;;996        break;
;;;997        
;;;998        case TIM_CHANNEL_2:
;;;999        {
;;;1000         /* Enable the TIM Capture/Compare 2 interrupt */
;;;1001         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000010  bf04              ITT      EQ
000012  68d3              LDREQ    r3,[r2,#0xc]
000014  f0430304          ORREQ    r3,r3,#4
000018  d00b              BEQ      |L33.50|
00001a  2908              CMP      r1,#8                 ;989
;;;1002       }
;;;1003       break;
;;;1004       
;;;1005       case TIM_CHANNEL_3:
;;;1006       {
;;;1007         /* Enable the TIM Capture/Compare 3 interrupt */
;;;1008         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
00001c  bf04              ITT      EQ
00001e  68d3              LDREQ    r3,[r2,#0xc]
000020  f0430308          ORREQ    r3,r3,#8
000024  d005              BEQ      |L33.50|
000026  290c              CMP      r1,#0xc               ;989
;;;1009       }
;;;1010       break;
;;;1011       
;;;1012       case TIM_CHANNEL_4:
;;;1013       {
;;;1014         /* Enable the TIM Capture/Compare 4 interrupt */
;;;1015         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000028  bf04              ITT      EQ
00002a  68d3              LDREQ    r3,[r2,#0xc]
00002c  f0430310          ORREQ    r3,r3,#0x10
000030  d100              BNE      |L33.52|
                  |L33.50|
000032  60d3              STR      r3,[r2,#0xc]          ;1008
                  |L33.52|
;;;1016       }
;;;1017       break;
;;;1018       
;;;1019       default:
;;;1020       break;
;;;1021     } 
;;;1022     
;;;1023     /* Enable the TIM Break interrupt */
;;;1024     __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
000034  6802              LDR      r2,[r0,#0]
000036  68d3              LDR      r3,[r2,#0xc]
000038  f0430380          ORR      r3,r3,#0x80
00003c  60d3              STR      r3,[r2,#0xc]
00003e  6802              LDR      r2,[r0,#0]
000040  2304              MOVS     r3,#4
000042  f8d2c020          LDR      r12,[r2,#0x20]
000046  fa03f101          LSL      r1,r3,r1
00004a  ea2c0301          BIC      r3,r12,r1
00004e  6213              STR      r3,[r2,#0x20]
000050  6a13              LDR      r3,[r2,#0x20]
000052  4319              ORRS     r1,r1,r3
000054  6211              STR      r1,[r2,#0x20]
;;;1025     
;;;1026     /* Enable the complementary PWM output  */
;;;1027     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;1028     
;;;1029     /* Enable the Main Output */
;;;1030     __HAL_TIM_MOE_ENABLE(htim);
000056  6801              LDR      r1,[r0,#0]
000058  6c4a              LDR      r2,[r1,#0x44]
00005a  f4424200          ORR      r2,r2,#0x8000
00005e  644a              STR      r2,[r1,#0x44]
;;;1031     
;;;1032     /* Enable the Peripheral */
;;;1033     __HAL_TIM_ENABLE(htim);
000060  6800              LDR      r0,[r0,#0]
000062  6801              LDR      r1,[r0,#0]
000064  f0410101          ORR      r1,r1,#1
000068  6001              STR      r1,[r0,#0]
;;;1034     
;;;1035     /* Return function status */
;;;1036     return HAL_OK;
00006a  2000              MOVS     r0,#0
;;;1037   } 
00006c  4770              BX       lr
;;;1038   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop PROC
;;;952      */
;;;953    HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;954    { 
000004  6802              LDR      r2,[r0,#0]
;;;955      /* Check the parameters */
;;;956      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;957      
;;;958      /* Disable the complementary PWM output  */
;;;959      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);  
000006  2300              MOVS     r3,#0
000008  f04f0c04          MOV      r12,#4
00000c  408b              LSLS     r3,r3,r1
00000e  6a14              LDR      r4,[r2,#0x20]
000010  fa0cf101          LSL      r1,r12,r1
000014  ea240101          BIC      r1,r4,r1
000018  6211              STR      r1,[r2,#0x20]
00001a  6a11              LDR      r1,[r2,#0x20]
00001c  4319              ORRS     r1,r1,r3
00001e  6211              STR      r1,[r2,#0x20]
;;;960      
;;;961      /* Disable the Main Output */
;;;962      __HAL_TIM_MOE_DISABLE(htim);
000020  6801              LDR      r1,[r0,#0]
000022  f2411211          MOV      r2,#0x1111
000026  1093              ASRS     r3,r2,#2
000028  f8d1c020          LDR      r12,[r1,#0x20]
00002c  ea1c0f02          TST      r12,r2
000030  bf04              ITT      EQ
000032  f8d1c020          LDREQ    r12,[r1,#0x20]
000036  ea1c0f03          TSTEQ    r12,r3
00003a  d105              BNE      |L34.72|
00003c  f8d1c044          LDR      r12,[r1,#0x44]
000040  f42c4c00          BIC      r12,r12,#0x8000
000044  f8c1c044          STR      r12,[r1,#0x44]
                  |L34.72|
;;;963      
;;;964      /* Disable the Peripheral */
;;;965      __HAL_TIM_DISABLE(htim);
000048  6800              LDR      r0,[r0,#0]
00004a  6a01              LDR      r1,[r0,#0x20]
00004c  4211              TST      r1,r2
00004e  bf04              ITT      EQ
000050  6a01              LDREQ    r1,[r0,#0x20]
000052  4219              TSTEQ    r1,r3
000054  d103              BNE      |L34.94|
000056  6801              LDR      r1,[r0,#0]
000058  f0210101          BIC      r1,r1,#1
00005c  6001              STR      r1,[r0,#0]
                  |L34.94|
;;;966      
;;;967      /* Return function status */
;;;968      return HAL_OK;
;;;969    } 
00005e  f85d4b04          POP.W    {r4}
000062  2000              MOVS     r0,#0                 ;968
000064  4770              BX       lr
;;;970    
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop_DMA PROC
;;;1243     */
;;;1244   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;1245   {
;;;1246     /* Check the parameters */
;;;1247     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1248     
;;;1249     switch (Channel)
000004  6802              LDR      r2,[r0,#0]
000006  2900              CMP      r1,#0
;;;1250     {
;;;1251       case TIM_CHANNEL_1:
;;;1252       {       
;;;1253         /* Disable the TIM Capture/Compare 1 DMA request */
;;;1254         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000008  bf04              ITT      EQ
00000a  68d3              LDREQ    r3,[r2,#0xc]
00000c  f4237300          BICEQ    r3,r3,#0x200
000010  d011              BEQ      |L35.54|
000012  2904              CMP      r1,#4                 ;1249
;;;1255       }
;;;1256       break;
;;;1257       
;;;1258       case TIM_CHANNEL_2:
;;;1259       {
;;;1260         /* Disable the TIM Capture/Compare 2 DMA request */
;;;1261         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000014  bf04              ITT      EQ
000016  68d3              LDREQ    r3,[r2,#0xc]
000018  f4236380          BICEQ    r3,r3,#0x400
00001c  d00b              BEQ      |L35.54|
00001e  2908              CMP      r1,#8                 ;1249
;;;1262       }
;;;1263       break;
;;;1264       
;;;1265       case TIM_CHANNEL_3:
;;;1266       {
;;;1267         /* Disable the TIM Capture/Compare 3 DMA request */
;;;1268         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
000020  bf04              ITT      EQ
000022  68d3              LDREQ    r3,[r2,#0xc]
000024  f4236300          BICEQ    r3,r3,#0x800
000028  d005              BEQ      |L35.54|
00002a  290c              CMP      r1,#0xc               ;1249
;;;1269       }
;;;1270       break;
;;;1271       
;;;1272       case TIM_CHANNEL_4:
;;;1273       {
;;;1274         /* Disable the TIM Capture/Compare 4 DMA request */
;;;1275         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
00002c  bf04              ITT      EQ
00002e  68d3              LDREQ    r3,[r2,#0xc]
000030  f4235380          BICEQ    r3,r3,#0x1000
000034  d100              BNE      |L35.56|
                  |L35.54|
000036  60d3              STR      r3,[r2,#0xc]          ;1268
                  |L35.56|
;;;1276       }
;;;1277       break;
;;;1278       
;;;1279       default:
;;;1280       break;
;;;1281     } 
;;;1282     
;;;1283     /* Disable the complementary PWM output */
;;;1284       TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000038  2300              MOVS     r3,#0
00003a  6802              LDR      r2,[r0,#0]
00003c  f04f0c04          MOV      r12,#4
000040  408b              LSLS     r3,r3,r1
000042  6a14              LDR      r4,[r2,#0x20]
000044  fa0cf101          LSL      r1,r12,r1
000048  ea240101          BIC      r1,r4,r1
00004c  6211              STR      r1,[r2,#0x20]
00004e  6a11              LDR      r1,[r2,#0x20]
000050  4319              ORRS     r1,r1,r3
000052  6211              STR      r1,[r2,#0x20]
;;;1285        
;;;1286     /* Disable the Main Output */
;;;1287       __HAL_TIM_MOE_DISABLE(htim);
000054  6801              LDR      r1,[r0,#0]
000056  f2411211          MOV      r2,#0x1111
00005a  1093              ASRS     r3,r2,#2
00005c  f8d1c020          LDR      r12,[r1,#0x20]
000060  ea1c0f02          TST      r12,r2
000064  bf04              ITT      EQ
000066  f8d1c020          LDREQ    r12,[r1,#0x20]
00006a  ea1c0f03          TSTEQ    r12,r3
00006e  d105              BNE      |L35.124|
000070  f8d1c044          LDR      r12,[r1,#0x44]
000074  f42c4c00          BIC      r12,r12,#0x8000
000078  f8c1c044          STR      r12,[r1,#0x44]
                  |L35.124|
;;;1288   
;;;1289     /* Disable the Peripheral */
;;;1290     __HAL_TIM_DISABLE(htim);
00007c  6801              LDR      r1,[r0,#0]
00007e  f8d1c020          LDR      r12,[r1,#0x20]
000082  ea1c0f02          TST      r12,r2
000086  bf04              ITT      EQ
000088  6a0a              LDREQ    r2,[r1,#0x20]
00008a  421a              TSTEQ    r2,r3
00008c  d103              BNE      |L35.150|
00008e  680a              LDR      r2,[r1,#0]
000090  f0220201          BIC      r2,r2,#1
000094  600a              STR      r2,[r1,#0]
                  |L35.150|
;;;1291     
;;;1292     /* Change the htim state */
;;;1293     htim->State = HAL_TIM_STATE_READY;
000096  2101              MOVS     r1,#1
000098  63c1              STR      r1,[r0,#0x3c]
;;;1294     
;;;1295     /* Return function status */
;;;1296     return HAL_OK;
;;;1297   }
00009a  f85d4b04          POP.W    {r4}
00009e  2000              MOVS     r0,#0                 ;1296
0000a0  4770              BX       lr
;;;1298   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop_IT PROC
;;;1051     */
;;;1052   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
000000  f84d4d04          PUSH.W   {r4}
;;;1053   {
;;;1054     uint32_t tmpccer = 0;
;;;1055     
;;;1056     /* Check the parameters */
;;;1057     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1058   
;;;1059     switch (Channel)
;;;1060     {
;;;1061       case TIM_CHANNEL_1:
;;;1062       {       
;;;1063         /* Disable the TIM Capture/Compare 1 interrupt */
;;;1064         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000004  6802              LDR      r2,[r0,#0]
000006  2900              CMP      r1,#0                 ;1059
000008  bf04              ITT      EQ
00000a  68d3              LDREQ    r3,[r2,#0xc]
00000c  f0230302          BICEQ    r3,r3,#2
000010  d011              BEQ      |L36.54|
000012  2904              CMP      r1,#4                 ;1059
;;;1065       }
;;;1066       break;
;;;1067       
;;;1068       case TIM_CHANNEL_2:
;;;1069       {
;;;1070         /* Disable the TIM Capture/Compare 2 interrupt */
;;;1071         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000014  bf04              ITT      EQ
000016  68d3              LDREQ    r3,[r2,#0xc]
000018  f0230304          BICEQ    r3,r3,#4
00001c  d00b              BEQ      |L36.54|
00001e  2908              CMP      r1,#8                 ;1059
;;;1072       }
;;;1073       break;
;;;1074       
;;;1075       case TIM_CHANNEL_3:
;;;1076       {
;;;1077         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1078         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000020  bf04              ITT      EQ
000022  68d3              LDREQ    r3,[r2,#0xc]
000024  f0230308          BICEQ    r3,r3,#8
000028  d005              BEQ      |L36.54|
00002a  290c              CMP      r1,#0xc               ;1059
;;;1079       }
;;;1080       break;
;;;1081       
;;;1082       case TIM_CHANNEL_4:
;;;1083       {
;;;1084         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1085         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
00002c  bf04              ITT      EQ
00002e  68d3              LDREQ    r3,[r2,#0xc]
000030  f0230310          BICEQ    r3,r3,#0x10
000034  d100              BNE      |L36.56|
                  |L36.54|
000036  60d3              STR      r3,[r2,#0xc]          ;1078
                  |L36.56|
;;;1086       }
;;;1087       break;
;;;1088       
;;;1089       default:
;;;1090       break; 
;;;1091     }
;;;1092     
;;;1093     /* Disable the complementary PWM output  */
;;;1094     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000038  2300              MOVS     r3,#0
00003a  6802              LDR      r2,[r0,#0]
00003c  f04f0c04          MOV      r12,#4
000040  408b              LSLS     r3,r3,r1
000042  6a14              LDR      r4,[r2,#0x20]
000044  fa0cf101          LSL      r1,r12,r1
000048  ea240101          BIC      r1,r4,r1
00004c  6211              STR      r1,[r2,#0x20]
00004e  6a11              LDR      r1,[r2,#0x20]
000050  4319              ORRS     r1,r1,r3
000052  6211              STR      r1,[r2,#0x20]
;;;1095     
;;;1096     /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;1097     tmpccer = htim->Instance->CCER;
000054  6801              LDR      r1,[r0,#0]
;;;1098     if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
000056  f2404244          MOV      r2,#0x444
00005a  6a0b              LDR      r3,[r1,#0x20]         ;1097
00005c  4213              TST      r3,r2
00005e  d103              BNE      |L36.104|
;;;1099     {
;;;1100       __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
000060  68cb              LDR      r3,[r1,#0xc]
000062  f0230380          BIC      r3,r3,#0x80
000066  60cb              STR      r3,[r1,#0xc]
                  |L36.104|
;;;1101     }
;;;1102     
;;;1103     /* Disable the Main Output */
;;;1104     __HAL_TIM_MOE_DISABLE(htim);
000068  6801              LDR      r1,[r0,#0]
00006a  f2411311          MOV      r3,#0x1111
00006e  f8d1c020          LDR      r12,[r1,#0x20]
000072  ea1c0f03          TST      r12,r3
000076  bf04              ITT      EQ
000078  f8d1c020          LDREQ    r12,[r1,#0x20]
00007c  ea1c0f02          TSTEQ    r12,r2
000080  d105              BNE      |L36.142|
000082  f8d1c044          LDR      r12,[r1,#0x44]
000086  f42c4c00          BIC      r12,r12,#0x8000
00008a  f8c1c044          STR      r12,[r1,#0x44]
                  |L36.142|
;;;1105     
;;;1106     /* Disable the Peripheral */
;;;1107     __HAL_TIM_DISABLE(htim);
00008e  6800              LDR      r0,[r0,#0]
000090  6a01              LDR      r1,[r0,#0x20]
000092  4219              TST      r1,r3
000094  bf04              ITT      EQ
000096  6a01              LDREQ    r1,[r0,#0x20]
000098  4211              TSTEQ    r1,r2
00009a  d103              BNE      |L36.164|
00009c  6801              LDR      r1,[r0,#0]
00009e  f0210101          BIC      r1,r1,#1
0000a2  6001              STR      r1,[r0,#0]
                  |L36.164|
;;;1108     
;;;1109     /* Return function status */
;;;1110     return HAL_OK;
;;;1111   } 
0000a4  f85d4b04          POP.W    {r4}
0000a8  2000              MOVS     r0,#0                 ;1110
0000aa  4770              BX       lr
;;;1112   
                          ENDP


                          AREA ||i.HAL_TIMEx_RemapConfig||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_RemapConfig PROC
;;;2273     */
;;;2274   HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
000000  6b82              LDR      r2,[r0,#0x38]
;;;2275   {
;;;2276     __HAL_LOCK(htim);
000002  2a01              CMP      r2,#1
000004  bf04              ITT      EQ
000006  2002              MOVEQ    r0,#2
;;;2277       
;;;2278     /* Check parameters */
;;;2279     assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
;;;2280     assert_param(IS_TIM_REMAP(Remap));
;;;2281     
;;;2282     /* Set the Timer remapping configuration */
;;;2283     htim->Instance->OR = Remap;
;;;2284     
;;;2285     htim->State = HAL_TIM_STATE_READY;
;;;2286     
;;;2287     __HAL_UNLOCK(htim);  
;;;2288     
;;;2289     return HAL_OK;
;;;2290   }
000008  4770              BXEQ     lr
00000a  2201              MOVS     r2,#1                 ;2276
00000c  f8d0c000          LDR      r12,[r0,#0]           ;2283
000010  2300              MOVS     r3,#0                 ;2287
000012  f8cc1050          STR      r1,[r12,#0x50]        ;2283
000016  63c2              STR      r2,[r0,#0x3c]         ;2285
000018  6383              STR      r3,[r0,#0x38]         ;2289
00001a  4618              MOV      r0,r3                 ;2289
00001c  4770              BX       lr
;;;2291   
                          ENDP


                          AREA ||i.HAL_TIM_ConfigOCrefClear||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ConfigOCrefClear PROC
;;;1889     */ 
;;;1890   HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
000000  b570              PUSH     {r4-r6,lr}
;;;1891                                              TIM_ClearInputConfigTypeDef *sClearInputConfig,
;;;1892                                              uint32_t Channel)
;;;1893   { 
000002  4604              MOV      r4,r0
;;;1894     uint32_t tmpsmcr = 0;
;;;1895   
;;;1896     /* Check the parameters */ 
;;;1897     assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
;;;1898     assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));
;;;1899                                           
;;;1900     /* Check input state */
;;;1901     __HAL_LOCK(htim);
000004  6b80              LDR      r0,[r0,#0x38]
000006  4616              MOV      r6,r2                 ;1893
000008  460d              MOV      r5,r1                 ;1893
00000a  2801              CMP      r0,#1
00000c  bf04              ITT      EQ
00000e  2002              MOVEQ    r0,#2
;;;1902     
;;;1903     switch (sClearInputConfig->ClearInputSource)
;;;1904     {
;;;1905       case TIM_CLEARINPUTSOURCE_NONE:
;;;1906       {
;;;1907         /* Get the TIMx SMCR register value */
;;;1908         tmpsmcr = htim->Instance->SMCR;
;;;1909         
;;;1910         /* Clear the OCREF clear selection bit */
;;;1911         tmpsmcr &= ~TIM_SMCR_OCCS;
;;;1912         
;;;1913         /* Clear the ETR Bits */
;;;1914         tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
;;;1915         
;;;1916         /* Set TIMx_SMCR */
;;;1917         htim->Instance->SMCR = tmpsmcr;
;;;1918      }
;;;1919       break;
;;;1920       
;;;1921       case TIM_CLEARINPUTSOURCE_OCREFCLR:
;;;1922       {
;;;1923         /* Clear the OCREF clear selection bit */
;;;1924         htim->Instance->SMCR &= ~TIM_SMCR_OCCS;
;;;1925       }
;;;1926       break;
;;;1927       
;;;1928       case TIM_CLEARINPUTSOURCE_ETR:
;;;1929       {
;;;1930         /* Check the parameters */ 
;;;1931         assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
;;;1932         assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
;;;1933         assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));
;;;1934         
;;;1935         TIM_ETR_SetConfig(htim->Instance,
;;;1936                           sClearInputConfig->ClearInputPrescaler,
;;;1937                           sClearInputConfig->ClearInputPolarity,
;;;1938                           sClearInputConfig->ClearInputFilter);
;;;1939         
;;;1940         /* Set the OCREF clear selection bit */
;;;1941         htim->Instance->SMCR |= TIM_SMCR_OCCS;
;;;1942       }
;;;1943       break;
;;;1944       default:  
;;;1945       break;
;;;1946     }
;;;1947     
;;;1948     switch (Channel)
;;;1949     { 
;;;1950       case TIM_CHANNEL_1:
;;;1951         {
;;;1952           if(sClearInputConfig->ClearInputState != RESET)
;;;1953           {
;;;1954             /* Enable the Ocref clear feature for Channel 1 */
;;;1955             htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
;;;1956           }
;;;1957           else
;;;1958           {
;;;1959             /* Disable the Ocref clear feature for Channel 1 */
;;;1960             htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;      
;;;1961           }
;;;1962         }    
;;;1963         break;
;;;1964       case TIM_CHANNEL_2:    
;;;1965         {
;;;1966           if(sClearInputConfig->ClearInputState != RESET)
;;;1967           {
;;;1968             /* Enable the Ocref clear feature for Channel 2 */
;;;1969             htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
;;;1970           }
;;;1971           else
;;;1972           {
;;;1973             /* Disable the Ocref clear feature for Channel 2 */
;;;1974             htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;      
;;;1975           }
;;;1976         }    
;;;1977       break;
;;;1978       case TIM_CHANNEL_3:    
;;;1979         {
;;;1980           if(sClearInputConfig->ClearInputState != RESET)
;;;1981           {
;;;1982             /* Enable the Ocref clear feature for Channel 3 */
;;;1983             htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
;;;1984           }
;;;1985           else
;;;1986           {
;;;1987             /* Disable the Ocref clear feature for Channel 3 */
;;;1988             htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;      
;;;1989           }
;;;1990         }    
;;;1991       break;
;;;1992       case TIM_CHANNEL_4:    
;;;1993         {
;;;1994           if(sClearInputConfig->ClearInputState != RESET)
;;;1995           {
;;;1996             /* Enable the Ocref clear feature for Channel 4 */
;;;1997             htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
;;;1998           }
;;;1999           else
;;;2000           {
;;;2001             /* Disable the Ocref clear feature for Channel 4 */
;;;2002             htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;      
;;;2003           }
;;;2004         }    
;;;2005       break;
;;;2006       case TIM_CHANNEL_5:    
;;;2007         {
;;;2008           if(sClearInputConfig->ClearInputState != RESET)
;;;2009           {
;;;2010             /* Enable the Ocref clear feature for Channel 1 */
;;;2011             htim->Instance->CCMR3 |= TIM_CCMR3_OC5CE;
;;;2012           }
;;;2013           else
;;;2014           {
;;;2015             /* Disable the Ocref clear feature for Channel 1 */
;;;2016             htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5CE;      
;;;2017           }
;;;2018         }    
;;;2019       break;
;;;2020       case TIM_CHANNEL_6:    
;;;2021         {
;;;2022           if(sClearInputConfig->ClearInputState != RESET)
;;;2023           {
;;;2024             /* Enable the Ocref clear feature for Channel 1 */
;;;2025             htim->Instance->CCMR3 |= TIM_CCMR3_OC6CE;
;;;2026           }
;;;2027           else
;;;2028           {
;;;2029             /* Disable the Ocref clear feature for Channel 1 */
;;;2030             htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6CE;      
;;;2031           }
;;;2032         }    
;;;2033       break;
;;;2034       default:  
;;;2035       break;
;;;2036     } 
;;;2037     
;;;2038     __HAL_UNLOCK(htim);
;;;2039   
;;;2040     return HAL_OK;  
;;;2041   }  
000010  bd70              POPEQ    {r4-r6,pc}
000012  2001              MOVS     r0,#1                 ;1901
000014  63a0              STR      r0,[r4,#0x38]         ;1903
000016  6868              LDR      r0,[r5,#4]            ;1901
000018  b120              CBZ      r0,|L38.36|
00001a  2801              CMP      r0,#1                 ;1903
00001c  d00f              BEQ      |L38.62|
00001e  2802              CMP      r0,#2                 ;1903
000020  d007              BEQ      |L38.50|
000022  e017              B        |L38.84|
                  |L38.36|
000024  6820              LDR      r0,[r4,#0]            ;1908
000026  6881              LDR      r1,[r0,#8]            ;1908
000028  f42161e1          BIC      r1,r1,#0x708          ;1914
00002c  f4214178          BIC      r1,r1,#0xf800         ;1914
000030  e003              B        |L38.58|
                  |L38.50|
000032  6820              LDR      r0,[r4,#0]            ;1924
000034  6881              LDR      r1,[r0,#8]            ;1924
000036  f0210108          BIC      r1,r1,#8              ;1924
                  |L38.58|
00003a  6081              STR      r1,[r0,#8]            ;1917
00003c  e00a              B        |L38.84|
                  |L38.62|
00003e  692b              LDR      r3,[r5,#0x10]         ;1935
000040  6820              LDR      r0,[r4,#0]            ;1935
000042  e9d52102          LDRD     r2,r1,[r5,#8]         ;1935
000046  f7fffffe          BL       TIM_ETR_SetConfig
00004a  6820              LDR      r0,[r4,#0]            ;1941
00004c  6881              LDR      r1,[r0,#8]            ;1941
00004e  f0410108          ORR      r1,r1,#8              ;1941
000052  6081              STR      r1,[r0,#8]            ;1941
                  |L38.84|
000054  2e0c              CMP      r6,#0xc               ;1948
000056  d02b              BEQ      |L38.176|
000058  dc05              BGT      |L38.102|
00005a  b14e              CBZ      r6,|L38.112|
00005c  2e04              CMP      r6,#4                 ;1948
00005e  d012              BEQ      |L38.134|
000060  2e08              CMP      r6,#8                 ;1948
000062  d01a              BEQ      |L38.154|
000064  e038              B        |L38.216|
                  |L38.102|
000066  2e10              CMP      r6,#0x10              ;1948
000068  d02c              BEQ      |L38.196|
00006a  2e14              CMP      r6,#0x14              ;1948
00006c  d037              BEQ      |L38.222|
00006e  e033              B        |L38.216|
                  |L38.112|
000070  6828              LDR      r0,[r5,#0]            ;1952
000072  2800              CMP      r0,#0                 ;1952
000074  6820              LDR      r0,[r4,#0]            ;1960
000076  6981              LDR      r1,[r0,#0x18]         ;1960
000078  bf14              ITE      NE                    ;1955
00007a  f0410180          ORRNE    r1,r1,#0x80           ;1955
00007e  f0210180          BICEQ    r1,r1,#0x80           ;1960
                  |L38.130|
000082  6181              STR      r1,[r0,#0x18]         ;1955
000084  e028              B        |L38.216|
                  |L38.134|
000086  6828              LDR      r0,[r5,#0]            ;1966
000088  2800              CMP      r0,#0                 ;1966
00008a  6820              LDR      r0,[r4,#0]            ;1974
00008c  6981              LDR      r1,[r0,#0x18]         ;1974
00008e  bf14              ITE      NE                    ;1969
000090  f4414100          ORRNE    r1,r1,#0x8000         ;1969
000094  f4214100          BICEQ    r1,r1,#0x8000         ;1974
000098  e7f3              B        |L38.130|
                  |L38.154|
00009a  6828              LDR      r0,[r5,#0]            ;1980
00009c  2800              CMP      r0,#0                 ;1980
00009e  6820              LDR      r0,[r4,#0]            ;1988
0000a0  69c1              LDR      r1,[r0,#0x1c]         ;1988
0000a2  bf14              ITE      NE                    ;1983
0000a4  f0410180          ORRNE    r1,r1,#0x80           ;1983
0000a8  f0210180          BICEQ    r1,r1,#0x80           ;1988
                  |L38.172|
0000ac  61c1              STR      r1,[r0,#0x1c]         ;1983
0000ae  e013              B        |L38.216|
                  |L38.176|
0000b0  6828              LDR      r0,[r5,#0]            ;1994
0000b2  2800              CMP      r0,#0                 ;1994
0000b4  6820              LDR      r0,[r4,#0]            ;2002
0000b6  69c1              LDR      r1,[r0,#0x1c]         ;2002
0000b8  bf14              ITE      NE                    ;1997
0000ba  f4414100          ORRNE    r1,r1,#0x8000         ;1997
0000be  f4214100          BICEQ    r1,r1,#0x8000         ;2002
0000c2  e7f3              B        |L38.172|
                  |L38.196|
0000c4  6828              LDR      r0,[r5,#0]            ;2008
0000c6  2800              CMP      r0,#0                 ;2008
0000c8  6820              LDR      r0,[r4,#0]            ;2016
0000ca  6d41              LDR      r1,[r0,#0x54]         ;2016
0000cc  bf14              ITE      NE                    ;2011
0000ce  f0410180          ORRNE    r1,r1,#0x80           ;2011
0000d2  f0210180          BICEQ    r1,r1,#0x80           ;2016
                  |L38.214|
0000d6  6541              STR      r1,[r0,#0x54]         ;2011
                  |L38.216|
0000d8  2000              MOVS     r0,#0                 ;2038
0000da  63a0              STR      r0,[r4,#0x38]         ;2040
0000dc  bd70              POP      {r4-r6,pc}
                  |L38.222|
0000de  6828              LDR      r0,[r5,#0]            ;2022
0000e0  2800              CMP      r0,#0                 ;2022
0000e2  6820              LDR      r0,[r4,#0]            ;2030
0000e4  6d41              LDR      r1,[r0,#0x54]         ;2030
0000e6  bf14              ITE      NE                    ;2025
0000e8  f4414100          ORRNE    r1,r1,#0x8000         ;2025
0000ec  f4214100          BICEQ    r1,r1,#0x8000         ;2030
0000f0  e7f1              B        |L38.214|
;;;2042   
                          ENDP


                          AREA ||i.HAL_TIM_OC_ConfigChannel||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OC_ConfigChannel PROC
;;;1644     */
;;;1645   HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1646   {  
000004  4604              MOV      r4,r0
;;;1647     /* Check the parameters */
;;;1648     assert_param(IS_TIM_CHANNELS(Channel)); 
;;;1649     assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
;;;1650     assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
;;;1651     
;;;1652     /* Check input state */
;;;1653     __HAL_LOCK(htim); 
000006  6b80              LDR      r0,[r0,#0x38]
000008  2801              CMP      r0,#1
00000a  bf0d              ITEET    EQ
00000c  2002              MOVEQ    r0,#2
00000e  2501              MOVNE    r5,#1
000010  63a5              STRNE    r5,[r4,#0x38]
;;;1654     
;;;1655     htim->State = HAL_TIM_STATE_BUSY;
;;;1656     
;;;1657     switch (Channel)
;;;1658     {
;;;1659       case TIM_CHANNEL_1:
;;;1660       {
;;;1661         /* Check the parameters */
;;;1662         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
;;;1663         
;;;1664        /* Configure the TIM Channel 1 in Output Compare */
;;;1665         TIM_OC1_SetConfig(htim->Instance, sConfig);
;;;1666       }
;;;1667       break;
;;;1668       
;;;1669       case TIM_CHANNEL_2:
;;;1670       {
;;;1671         /* Check the parameters */
;;;1672         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
;;;1673         
;;;1674         /* Configure the TIM Channel 2 in Output Compare */
;;;1675         TIM_OC2_SetConfig(htim->Instance, sConfig);
;;;1676       }
;;;1677       break;
;;;1678       
;;;1679       case TIM_CHANNEL_3:
;;;1680       {
;;;1681         /* Check the parameters */
;;;1682         assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
;;;1683         
;;;1684         /* Configure the TIM Channel 3 in Output Compare */
;;;1685         TIM_OC3_SetConfig(htim->Instance, sConfig);
;;;1686       }
;;;1687       break;
;;;1688       
;;;1689       case TIM_CHANNEL_4:
;;;1690       {
;;;1691         /* Check the parameters */
;;;1692         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
;;;1693         
;;;1694          /* Configure the TIM Channel 4 in Output Compare */
;;;1695          TIM_OC4_SetConfig(htim->Instance, sConfig);
;;;1696       }
;;;1697       break;
;;;1698       
;;;1699       case TIM_CHANNEL_5:
;;;1700       {
;;;1701         /* Check the parameters */
;;;1702         assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
;;;1703         
;;;1704          /* Configure the TIM Channel 5 in Output Compare */
;;;1705          TIM_OC5_SetConfig(htim->Instance, sConfig);
;;;1706       }
;;;1707       break;
;;;1708       
;;;1709       case TIM_CHANNEL_6:
;;;1710       {
;;;1711         /* Check the parameters */
;;;1712         assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
;;;1713         
;;;1714          /* Configure the TIM Channel 6 in Output Compare */
;;;1715          TIM_OC6_SetConfig(htim->Instance, sConfig);
;;;1716       }
;;;1717       break;
;;;1718           
;;;1719       default:
;;;1720       break;    
;;;1721     }
;;;1722     
;;;1723     htim->State = HAL_TIM_STATE_READY;
;;;1724     
;;;1725     __HAL_UNLOCK(htim); 
;;;1726     
;;;1727     return HAL_OK;
;;;1728   }
000012  e8bd87f0          POPEQ    {r4-r10,pc}
000016  2002              MOVS     r0,#2                 ;1655
000018  2a0c              CMP      r2,#0xc               ;1657
00001a  63e0              STR      r0,[r4,#0x3c]         ;1655
00001c  d019              BEQ      |L39.82|
00001e  dc08              BGT      |L39.50|
000020  b17a              CBZ      r2,|L39.66|
000022  2a04              CMP      r2,#4                 ;1657
000024  d011              BEQ      |L39.74|
000026  2a08              CMP      r2,#8                 ;1657
000028  bf04              ITT      EQ                    ;1685
00002a  6820              LDREQ    r0,[r4,#0]            ;1685
00002c  f7fffffe          BLEQ     TIM_OC3_SetConfig
000030  e05d              B        |L39.238|
                  |L39.50|
000032  f8dfc0c4          LDR      r12,|L39.248|
000036  2a10              CMP      r2,#0x10              ;1657
000038  4b30              LDR      r3,|L39.252|
00003a  d00e              BEQ      |L39.90|
00003c  2a14              CMP      r2,#0x14              ;1657
00003e  d031              BEQ      |L39.164|
000040  e055              B        |L39.238|
                  |L39.66|
000042  6820              LDR      r0,[r4,#0]            ;1665
000044  f7fffffe          BL       TIM_OC1_SetConfig
000048  e051              B        |L39.238|
                  |L39.74|
00004a  6820              LDR      r0,[r4,#0]            ;1675
00004c  f7fffffe          BL       TIM_OC2_SetConfig
000050  e04d              B        |L39.238|
                  |L39.82|
000052  6820              LDR      r0,[r4,#0]            ;1695
000054  f7fffffe          BL       TIM_OC4_SetConfig
000058  e049              B        |L39.238|
                  |L39.90|
00005a  6820              LDR      r0,[r4,#0]            ;1697
00005c  6a02              LDR      r2,[r0,#0x20]         ;1697
00005e  f4223280          BIC      r2,r2,#0x10000        ;1697
000062  6202              STR      r2,[r0,#0x20]         ;1697
000064  6a06              LDR      r6,[r0,#0x20]         ;1697
000066  6842              LDR      r2,[r0,#4]            ;1697
000068  6d47              LDR      r7,[r0,#0x54]         ;1697
00006a  4560              CMP      r0,r12                ;1697
00006c  f8b19008          LDRH     r9,[r1,#8]            ;1697
000070  f4263600          BIC      r6,r6,#0x20000        ;1697
000074  f8d18000          LDR      r8,[r1,#0]            ;1697
000078  f0270c70          BIC      r12,r7,#0x70          ;1697
00007c  f42c3c80          BIC      r12,r12,#0x10000      ;1697
000080  ea464609          ORR      r6,r6,r9,LSL #16      ;1697
000084  ea480c0c          ORR      r12,r8,r12            ;1697
000088  bf18              IT       NE                    ;1697
00008a  4298              CMPNE    r0,r3                 ;1697
00008c  d104              BNE      |L39.152|
00008e  694b              LDR      r3,[r1,#0x14]         ;1705
000090  f4223280          BIC      r2,r2,#0x10000        ;1705
000094  ea422203          ORR      r2,r2,r3,LSL #8       ;1705
                  |L39.152|
000098  6042              STR      r2,[r0,#4]            ;1705
00009a  f8c0c054          STR      r12,[r0,#0x54]        ;1705
00009e  6849              LDR      r1,[r1,#4]            ;1705
0000a0  6581              STR      r1,[r0,#0x58]         ;1705
0000a2  e023              B        |L39.236|
                  |L39.164|
0000a4  6820              LDR      r0,[r4,#0]            ;1707
0000a6  6a02              LDR      r2,[r0,#0x20]         ;1707
0000a8  f4221280          BIC      r2,r2,#0x100000       ;1707
0000ac  6202              STR      r2,[r0,#0x20]         ;1707
0000ae  6a07              LDR      r7,[r0,#0x20]         ;1707
0000b0  6842              LDR      r2,[r0,#4]            ;1707
0000b2  6d46              LDR      r6,[r0,#0x54]         ;1707
0000b4  4560              CMP      r0,r12                ;1707
0000b6  f8b19008          LDRH     r9,[r1,#8]            ;1707
0000ba  f4271700          BIC      r7,r7,#0x200000       ;1707
0000be  f8d18000          LDR      r8,[r1,#0]            ;1707
0000c2  f4264ce0          BIC      r12,r6,#0x7000        ;1707
0000c6  f02c7c80          BIC      r12,r12,#0x1000000    ;1707
0000ca  ea475609          ORR      r6,r7,r9,LSL #20      ;1707
0000ce  ea4c2c08          ORR      r12,r12,r8,LSL #8     ;1707
0000d2  bf18              IT       NE                    ;1707
0000d4  4298              CMPNE    r0,r3                 ;1707
0000d6  d104              BNE      |L39.226|
0000d8  694b              LDR      r3,[r1,#0x14]         ;1715
0000da  f4222280          BIC      r2,r2,#0x40000        ;1715
0000de  ea422283          ORR      r2,r2,r3,LSL #10      ;1715
                  |L39.226|
0000e2  6042              STR      r2,[r0,#4]            ;1715
0000e4  f8c0c054          STR      r12,[r0,#0x54]        ;1715
0000e8  6849              LDR      r1,[r1,#4]            ;1715
0000ea  65c1              STR      r1,[r0,#0x5c]         ;1715
                  |L39.236|
0000ec  6206              STR      r6,[r0,#0x20]         ;1715
                  |L39.238|
0000ee  2000              MOVS     r0,#0                 ;1725
0000f0  63e5              STR      r5,[r4,#0x3c]         ;1723
0000f2  63a0              STR      r0,[r4,#0x38]         ;1725
0000f4  e8bd87f0          POP      {r4-r10,pc}
;;;1729   
                          ENDP

                  |L39.248|
                          DCD      0x40010000
                  |L39.252|
                          DCD      0x40010400

                          AREA ||i.HAL_TIM_PWM_ConfigChannel||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PWM_ConfigChannel PROC
;;;1744     */
;;;1745   HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1746                                               TIM_OC_InitTypeDef* sConfig, 
;;;1747                                               uint32_t Channel)
;;;1748   {
000004  4604              MOV      r4,r0
;;;1749     /* Check the parameters */
;;;1750     assert_param(IS_TIM_CHANNELS(Channel)); 
;;;1751     assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
;;;1752     assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
;;;1753     assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
;;;1754     
;;;1755     /* Check input state */
;;;1756     __HAL_LOCK(htim);
000006  6b80              LDR      r0,[r0,#0x38]
000008  460d              MOV      r5,r1                 ;1748
00000a  2801              CMP      r0,#1
00000c  bf0d              ITEET    EQ
00000e  2002              MOVEQ    r0,#2
000010  2601              MOVNE    r6,#1
000012  63a6              STRNE    r6,[r4,#0x38]
;;;1757     
;;;1758     htim->State = HAL_TIM_STATE_BUSY;
;;;1759       
;;;1760     switch (Channel)
;;;1761     {
;;;1762       case TIM_CHANNEL_1:
;;;1763       {
;;;1764         /* Check the parameters */
;;;1765         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
;;;1766         
;;;1767         /* Configure the Channel 1 in PWM mode */
;;;1768         TIM_OC1_SetConfig(htim->Instance, sConfig);
;;;1769         
;;;1770         /* Set the Preload enable bit for channel1 */
;;;1771         htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
;;;1772         
;;;1773         /* Configure the Output Fast mode */
;;;1774         htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
;;;1775         htim->Instance->CCMR1 |= sConfig->OCFastMode;
;;;1776       }
;;;1777       break;
;;;1778       
;;;1779       case TIM_CHANNEL_2:
;;;1780       {
;;;1781         /* Check the parameters */
;;;1782         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
;;;1783         
;;;1784         /* Configure the Channel 2 in PWM mode */
;;;1785         TIM_OC2_SetConfig(htim->Instance, sConfig);
;;;1786         
;;;1787         /* Set the Preload enable bit for channel2 */
;;;1788         htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
;;;1789         
;;;1790         /* Configure the Output Fast mode */
;;;1791         htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
;;;1792         htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
;;;1793       }
;;;1794       break;
;;;1795       
;;;1796       case TIM_CHANNEL_3:
;;;1797       {
;;;1798         /* Check the parameters */
;;;1799         assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
;;;1800         
;;;1801         /* Configure the Channel 3 in PWM mode */
;;;1802         TIM_OC3_SetConfig(htim->Instance, sConfig);
;;;1803         
;;;1804         /* Set the Preload enable bit for channel3 */
;;;1805         htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
;;;1806         
;;;1807        /* Configure the Output Fast mode */
;;;1808         htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
;;;1809         htim->Instance->CCMR2 |= sConfig->OCFastMode;  
;;;1810       }
;;;1811       break;
;;;1812       
;;;1813       case TIM_CHANNEL_4:
;;;1814       {
;;;1815         /* Check the parameters */
;;;1816         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
;;;1817         
;;;1818         /* Configure the Channel 4 in PWM mode */
;;;1819         TIM_OC4_SetConfig(htim->Instance, sConfig);
;;;1820         
;;;1821         /* Set the Preload enable bit for channel4 */
;;;1822         htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
;;;1823         
;;;1824        /* Configure the Output Fast mode */
;;;1825         htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
;;;1826         htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
;;;1827       }
;;;1828       break;
;;;1829       
;;;1830       case TIM_CHANNEL_5:
;;;1831       {
;;;1832          /* Check the parameters */
;;;1833         assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
;;;1834         
;;;1835        /* Configure the Channel 5 in PWM mode */
;;;1836         TIM_OC5_SetConfig(htim->Instance, sConfig);
;;;1837         
;;;1838         /* Set the Preload enable bit for channel5*/
;;;1839         htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
;;;1840         
;;;1841        /* Configure the Output Fast mode */
;;;1842         htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
;;;1843         htim->Instance->CCMR3 |= sConfig->OCFastMode;  
;;;1844       }
;;;1845       break;
;;;1846       
;;;1847       case TIM_CHANNEL_6:
;;;1848       {
;;;1849          /* Check the parameters */
;;;1850         assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
;;;1851         
;;;1852        /* Configure the Channel 5 in PWM mode */
;;;1853         TIM_OC6_SetConfig(htim->Instance, sConfig);
;;;1854         
;;;1855         /* Set the Preload enable bit for channel6 */
;;;1856         htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
;;;1857         
;;;1858        /* Configure the Output Fast mode */
;;;1859         htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
;;;1860         htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
;;;1861       }
;;;1862       break;
;;;1863       
;;;1864       default:
;;;1865       break;    
;;;1866     }
;;;1867     
;;;1868     htim->State = HAL_TIM_STATE_READY;
;;;1869       
;;;1870     __HAL_UNLOCK(htim);
;;;1871     
;;;1872     return HAL_OK;
;;;1873   }
000014  e8bd87f0          POPEQ    {r4-r10,pc}
000018  2002              MOVS     r0,#2                 ;1758
00001a  2a0c              CMP      r2,#0xc               ;1760
00001c  63e0              STR      r0,[r4,#0x3c]         ;1758
00001e  d047              BEQ      |L40.176|
000020  dc06              BGT      |L40.48|
000022  b16a              CBZ      r2,|L40.64|
000024  2a04              CMP      r2,#4                 ;1760
000026  d01d              BEQ      |L40.100|
000028  2a08              CMP      r2,#8                 ;1760
00002a  d02f              BEQ      |L40.140|
00002c  f000b8bf          B.W      |L40.430|
                  |L40.48|
000030  f8dfc184          LDR      r12,|L40.440|
000034  2a10              CMP      r2,#0x10              ;1760
000036  4b61              LDR      r3,|L40.444|
000038  d04e              BEQ      |L40.216|
00003a  2a14              CMP      r2,#0x14              ;1760
00003c  d07e              BEQ      |L40.316|
00003e  e0b6              B        |L40.430|
                  |L40.64|
000040  6820              LDR      r0,[r4,#0]            ;1768
000042  f7fffffe          BL       TIM_OC1_SetConfig
000046  6820              LDR      r0,[r4,#0]            ;1771
000048  6981              LDR      r1,[r0,#0x18]         ;1771
00004a  f0410108          ORR      r1,r1,#8              ;1771
00004e  6181              STR      r1,[r0,#0x18]         ;1771
000050  6820              LDR      r0,[r4,#0]            ;1774
000052  6981              LDR      r1,[r0,#0x18]         ;1774
000054  f0210104          BIC      r1,r1,#4              ;1774
000058  6181              STR      r1,[r0,#0x18]         ;1774
00005a  6820              LDR      r0,[r4,#0]            ;1775
00005c  6929              LDR      r1,[r5,#0x10]         ;1775
00005e  6982              LDR      r2,[r0,#0x18]         ;1775
000060  4311              ORRS     r1,r1,r2              ;1775
000062  e011              B        |L40.136|
                  |L40.100|
000064  6820              LDR      r0,[r4,#0]            ;1785
000066  f7fffffe          BL       TIM_OC2_SetConfig
00006a  6820              LDR      r0,[r4,#0]            ;1788
00006c  6981              LDR      r1,[r0,#0x18]         ;1788
00006e  f4416100          ORR      r1,r1,#0x800          ;1788
000072  6181              STR      r1,[r0,#0x18]         ;1788
000074  6820              LDR      r0,[r4,#0]            ;1791
000076  6981              LDR      r1,[r0,#0x18]         ;1791
000078  f4216180          BIC      r1,r1,#0x400          ;1791
00007c  6181              STR      r1,[r0,#0x18]         ;1791
00007e  6820              LDR      r0,[r4,#0]            ;1792
000080  6929              LDR      r1,[r5,#0x10]         ;1792
000082  6982              LDR      r2,[r0,#0x18]         ;1792
000084  ea422101          ORR      r1,r2,r1,LSL #8       ;1792
                  |L40.136|
000088  6181              STR      r1,[r0,#0x18]         ;1775
00008a  e090              B        |L40.430|
                  |L40.140|
00008c  6820              LDR      r0,[r4,#0]            ;1802
00008e  f7fffffe          BL       TIM_OC3_SetConfig
000092  6820              LDR      r0,[r4,#0]            ;1805
000094  69c1              LDR      r1,[r0,#0x1c]         ;1805
000096  f0410108          ORR      r1,r1,#8              ;1805
00009a  61c1              STR      r1,[r0,#0x1c]         ;1805
00009c  6820              LDR      r0,[r4,#0]            ;1808
00009e  69c1              LDR      r1,[r0,#0x1c]         ;1808
0000a0  f0210104          BIC      r1,r1,#4              ;1808
0000a4  61c1              STR      r1,[r0,#0x1c]         ;1808
0000a6  6820              LDR      r0,[r4,#0]            ;1809
0000a8  6929              LDR      r1,[r5,#0x10]         ;1809
0000aa  69c2              LDR      r2,[r0,#0x1c]         ;1809
0000ac  4311              ORRS     r1,r1,r2              ;1809
0000ae  e011              B        |L40.212|
                  |L40.176|
0000b0  6820              LDR      r0,[r4,#0]            ;1819
0000b2  f7fffffe          BL       TIM_OC4_SetConfig
0000b6  6820              LDR      r0,[r4,#0]            ;1822
0000b8  69c1              LDR      r1,[r0,#0x1c]         ;1822
0000ba  f4416100          ORR      r1,r1,#0x800          ;1822
0000be  61c1              STR      r1,[r0,#0x1c]         ;1822
0000c0  6820              LDR      r0,[r4,#0]            ;1825
0000c2  69c1              LDR      r1,[r0,#0x1c]         ;1825
0000c4  f4216180          BIC      r1,r1,#0x400          ;1825
0000c8  61c1              STR      r1,[r0,#0x1c]         ;1825
0000ca  6820              LDR      r0,[r4,#0]            ;1826
0000cc  6929              LDR      r1,[r5,#0x10]         ;1826
0000ce  69c2              LDR      r2,[r0,#0x1c]         ;1826
0000d0  ea422101          ORR      r1,r2,r1,LSL #8       ;1826
                  |L40.212|
0000d4  61c1              STR      r1,[r0,#0x1c]         ;1809
0000d6  e06a              B        |L40.430|
                  |L40.216|
0000d8  6820              LDR      r0,[r4,#0]            ;1809
0000da  6a01              LDR      r1,[r0,#0x20]         ;1809
0000dc  f4213180          BIC      r1,r1,#0x10000        ;1809
0000e0  6201              STR      r1,[r0,#0x20]         ;1809
0000e2  6a07              LDR      r7,[r0,#0x20]         ;1809
0000e4  6841              LDR      r1,[r0,#4]            ;1809
0000e6  6d42              LDR      r2,[r0,#0x54]         ;1809
0000e8  4560              CMP      r0,r12                ;1809
0000ea  f8b59008          LDRH     r9,[r5,#8]            ;1809
0000ee  f4273700          BIC      r7,r7,#0x20000        ;1809
0000f2  f8d58000          LDR      r8,[r5,#0]            ;1809
0000f6  f0220270          BIC      r2,r2,#0x70           ;1809
0000fa  f4223280          BIC      r2,r2,#0x10000        ;1809
0000fe  ea474c09          ORR      r12,r7,r9,LSL #16     ;1809
000102  ea480202          ORR      r2,r8,r2              ;1809
000106  bf18              IT       NE                    ;1809
000108  4298              CMPNE    r0,r3                 ;1809
00010a  d104              BNE      |L40.278|
00010c  696b              LDR      r3,[r5,#0x14]         ;1836
00010e  f4213180          BIC      r1,r1,#0x10000        ;1836
000112  ea412103          ORR      r1,r1,r3,LSL #8       ;1836
                  |L40.278|
000116  6041              STR      r1,[r0,#4]            ;1836
000118  6542              STR      r2,[r0,#0x54]         ;1836
00011a  6869              LDR      r1,[r5,#4]            ;1836
00011c  6581              STR      r1,[r0,#0x58]         ;1836
00011e  f8c0c020          STR      r12,[r0,#0x20]        ;1836
000122  6820              LDR      r0,[r4,#0]            ;1839
000124  6d41              LDR      r1,[r0,#0x54]         ;1839
000126  f0410108          ORR      r1,r1,#8              ;1839
00012a  6541              STR      r1,[r0,#0x54]         ;1839
00012c  6820              LDR      r0,[r4,#0]            ;1842
00012e  6d41              LDR      r1,[r0,#0x54]         ;1842
000130  f0210104          BIC      r1,r1,#4              ;1842
000134  6541              STR      r1,[r0,#0x54]         ;1842
000136  6820              LDR      r0,[r4,#0]            ;1843
000138  6929              LDR      r1,[r5,#0x10]         ;1843
00013a  e000              B        |L40.318|
                  |L40.316|
00013c  e002              B        |L40.324|
                  |L40.318|
00013e  6d42              LDR      r2,[r0,#0x54]         ;1843
000140  4311              ORRS     r1,r1,r2              ;1843
000142  e033              B        |L40.428|
                  |L40.324|
000144  6820              LDR      r0,[r4,#0]            ;1845
000146  6a01              LDR      r1,[r0,#0x20]         ;1845
000148  f4211180          BIC      r1,r1,#0x100000       ;1845
00014c  6201              STR      r1,[r0,#0x20]         ;1845
00014e  6a02              LDR      r2,[r0,#0x20]         ;1845
000150  6841              LDR      r1,[r0,#4]            ;1845
000152  6d47              LDR      r7,[r0,#0x54]         ;1845
000154  4560              CMP      r0,r12                ;1845
000156  f8b59008          LDRH     r9,[r5,#8]            ;1845
00015a  f4221200          BIC      r2,r2,#0x200000       ;1845
00015e  f8d58000          LDR      r8,[r5,#0]            ;1845
000162  f4274ce0          BIC      r12,r7,#0x7000        ;1845
000166  f02c7c80          BIC      r12,r12,#0x1000000    ;1845
00016a  ea425209          ORR      r2,r2,r9,LSL #20      ;1845
00016e  ea4c2c08          ORR      r12,r12,r8,LSL #8     ;1845
000172  bf18              IT       NE                    ;1845
000174  4298              CMPNE    r0,r3                 ;1845
000176  d104              BNE      |L40.386|
000178  696b              LDR      r3,[r5,#0x14]         ;1853
00017a  f4212180          BIC      r1,r1,#0x40000        ;1853
00017e  ea412183          ORR      r1,r1,r3,LSL #10      ;1853
                  |L40.386|
000182  6041              STR      r1,[r0,#4]            ;1853
000184  f8c0c054          STR      r12,[r0,#0x54]        ;1853
000188  6869              LDR      r1,[r5,#4]            ;1853
00018a  65c1              STR      r1,[r0,#0x5c]         ;1853
00018c  6202              STR      r2,[r0,#0x20]         ;1853
00018e  6820              LDR      r0,[r4,#0]            ;1856
000190  6d41              LDR      r1,[r0,#0x54]         ;1856
000192  f4416100          ORR      r1,r1,#0x800          ;1856
000196  6541              STR      r1,[r0,#0x54]         ;1856
000198  6820              LDR      r0,[r4,#0]            ;1859
00019a  6d41              LDR      r1,[r0,#0x54]         ;1859
00019c  f4216180          BIC      r1,r1,#0x400          ;1859
0001a0  6541              STR      r1,[r0,#0x54]         ;1859
0001a2  6820              LDR      r0,[r4,#0]            ;1860
0001a4  6929              LDR      r1,[r5,#0x10]         ;1860
0001a6  6d42              LDR      r2,[r0,#0x54]         ;1860
0001a8  ea422101          ORR      r1,r2,r1,LSL #8       ;1860
                  |L40.428|
0001ac  6541              STR      r1,[r0,#0x54]         ;1843
                  |L40.430|
0001ae  2000              MOVS     r0,#0                 ;1870
0001b0  63e6              STR      r6,[r4,#0x3c]         ;1868
0001b2  63a0              STR      r0,[r4,#0x38]         ;1870
0001b4  e8bd87f0          POP      {r4-r10,pc}
;;;1874   
                          ENDP

                  |L40.440|
                          DCD      0x40010000
                  |L40.444|
                          DCD      0x40010400

                          AREA ||i.TIMEx_DMACommutationCplt||, CODE, READONLY, ALIGN=1

                  TIMEx_DMACommutationCplt PROC
;;;2418     */
;;;2419   void HAL_TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;2420   {
;;;2421     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6bc0              LDR      r0,[r0,#0x3c]
;;;2422     
;;;2423     htim->State= HAL_TIM_STATE_READY;
000004  2101              MOVS     r1,#1
000006  63c1              STR      r1,[r0,#0x3c]
;;;2424       
;;;2425     HAL_TIMEx_CommutationCallback(htim); 
000008  f7fffffe          BL       HAL_TIMEx_CommutationCallback
;;;2426   }
00000c  bd10              POP      {r4,pc}
;;;2427   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_tim_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32F7xx_HAL_Driver\\Core\\cmsis_armcc.h"
|__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____REVSH|
#line 402
|__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____RRX|
#line 587
|__asm___22_stm32f7xx_hal_tim_ex_c_e8ef3920____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
