; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f0xx_hal_cortex.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f0xx_hal_cortex.d --cpu=Cortex-M0 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\STM32F0xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\STM32F0xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F030F4P6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0\Drivers\CMSIS\Device\ST\STM32F0xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F030x6 -DSTM32F030x6 -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f0xx_hal_cortex.crf ..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\STM32F0xx_HAL_Driver\Src\stm32f0xx_hal_cortex.c]
                          THUMB

                          AREA ||i.HAL_NVIC_ClearPendingIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_ClearPendingIRQ PROC
;;;288      */
;;;289    void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000000  06c1              LSLS     r1,r0,#27
000002  0ec9              LSRS     r1,r1,#27
000004  2001              MOVS     r0,#1
000006  4088              LSLS     r0,r0,r1
000008  4901              LDR      r1,|L1.16|
00000a  6008              STR      r0,[r1,#0]
;;;290    {
;;;291      /* Check the parameters */
;;;292      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;293      
;;;294      /* Clear pending interrupt */
;;;295      NVIC_ClearPendingIRQ(IRQn);
;;;296    }
00000c  4770              BX       lr
;;;297    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0xe000e280

                          AREA ||i.HAL_NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_DisableIRQ PROC
;;;183      */
;;;184    void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c1              LSLS     r1,r0,#27
000002  0ec9              LSRS     r1,r1,#27
000004  2001              MOVS     r0,#1
000006  4088              LSLS     r0,r0,r1
000008  4901              LDR      r1,|L2.16|
00000a  6008              STR      r0,[r1,#0]
;;;185    {
;;;186      /* Check the parameters */
;;;187      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;188      
;;;189      /* Disable interrupt */
;;;190      NVIC_DisableIRQ(IRQn);
;;;191    }
00000c  4770              BX       lr
;;;192    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0xe000e180

                          AREA ||i.HAL_NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_EnableIRQ PROC
;;;167      */
;;;168    void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c1              LSLS     r1,r0,#27
000002  0ec9              LSRS     r1,r1,#27
000004  2001              MOVS     r0,#1
000006  4088              LSLS     r0,r0,r1
000008  4901              LDR      r1,|L3.16|
00000a  6008              STR      r0,[r1,#0]
;;;169    {
;;;170      /* Check the parameters */
;;;171      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;172      
;;;173      /* Enable interrupt */
;;;174      NVIC_EnableIRQ(IRQn);
;;;175    }
00000c  4770              BX       lr
;;;176    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0xe000e100

                          AREA ||i.HAL_NVIC_GetPendingIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_GetPendingIRQ PROC
;;;272      */
;;;273    uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
000000  4905              LDR      r1,|L4.24|
;;;274    {
;;;275      /* Check the parameters */
;;;276      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;277      
;;;278      /* Return 1 if pending else 0 */
;;;279      return NVIC_GetPendingIRQ(IRQn);
000002  6809              LDR      r1,[r1,#0]
000004  06c2              LSLS     r2,r0,#27
000006  0ed2              LSRS     r2,r2,#27
000008  2001              MOVS     r0,#1
00000a  4090              LSLS     r0,r0,r2
00000c  4201              TST      r1,r0
00000e  d001              BEQ      |L4.20|
000010  2001              MOVS     r0,#1                 ;274
;;;280    }
000012  4770              BX       lr
                  |L4.20|
000014  2000              MOVS     r0,#0
000016  4770              BX       lr
;;;281    
                          ENDP

                  |L4.24|
                          DCD      0xe000e200

                          AREA ||i.HAL_NVIC_GetPriority||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_GetPriority PROC
;;;241      */
;;;242    uint32_t HAL_NVIC_GetPriority(IRQn_Type IRQn)
000000  0781              LSLS     r1,r0,#30
000002  0ec9              LSRS     r1,r1,#27
000004  2800              CMP      r0,#0
;;;243    {
000006  da0b              BGE      |L5.32|
000008  0700              LSLS     r0,r0,#28
00000a  0f00              LSRS     r0,r0,#28
00000c  3808              SUBS     r0,r0,#8
00000e  0880              LSRS     r0,r0,#2
000010  4a08              LDR      r2,|L5.52|
000012  0080              LSLS     r0,r0,#2
000014  1880              ADDS     r0,r0,r2
000016  69c0              LDR      r0,[r0,#0x1c]
000018  40c8              LSRS     r0,r0,r1
00001a  0600              LSLS     r0,r0,#24
00001c  0f80              LSRS     r0,r0,#30
;;;244      /* Get priority for Cortex-M system or device specific interrupts */
;;;245      return NVIC_GetPriority(IRQn);
;;;246    }
00001e  4770              BX       lr
                  |L5.32|
000020  0880              LSRS     r0,r0,#2
000022  4a05              LDR      r2,|L5.56|
000024  0080              LSLS     r0,r0,#2
000026  1880              ADDS     r0,r0,r2
000028  6800              LDR      r0,[r0,#0]
00002a  40c8              LSRS     r0,r0,r1
00002c  0600              LSLS     r0,r0,#24
00002e  0f80              LSRS     r0,r0,#30
000030  4770              BX       lr
;;;247    
                          ENDP

000032  0000              DCW      0x0000
                  |L5.52|
                          DCD      0xe000ed00
                  |L5.56|
                          DCD      0xe000e400

                          AREA ||i.HAL_NVIC_SetPendingIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SetPendingIRQ PROC
;;;254      */
;;;255    void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
000000  06c1              LSLS     r1,r0,#27
000002  0ec9              LSRS     r1,r1,#27
000004  2001              MOVS     r0,#1
000006  4088              LSLS     r0,r0,r1
000008  4901              LDR      r1,|L6.16|
00000a  6008              STR      r0,[r1,#0]
;;;256    {
;;;257      /* Check the parameters */
;;;258      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;259      
;;;260      /* Set interrupt pending */
;;;261      NVIC_SetPendingIRQ(IRQn);
;;;262    }
00000c  4770              BX       lr
;;;263    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0xe000e200

                          AREA ||i.HAL_NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SetPriority PROC
;;;151      */
;;;152    void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
000000  0782              LSLS     r2,r0,#30
000002  0ed3              LSRS     r3,r2,#27
000004  22ff              MOVS     r2,#0xff
000006  409a              LSLS     r2,r2,r3
000008  0789              LSLS     r1,r1,#30
00000a  0e09              LSRS     r1,r1,#24
00000c  4099              LSLS     r1,r1,r3
00000e  2800              CMP      r0,#0
;;;153    { 
000010  da0b              BGE      |L7.42|
000012  0700              LSLS     r0,r0,#28
000014  0f00              LSRS     r0,r0,#28
000016  3808              SUBS     r0,r0,#8
000018  0883              LSRS     r3,r0,#2
00001a  4808              LDR      r0,|L7.60|
00001c  009b              LSLS     r3,r3,#2
00001e  1818              ADDS     r0,r3,r0
000020  69c3              LDR      r3,[r0,#0x1c]
000022  4393              BICS     r3,r3,r2
000024  430b              ORRS     r3,r3,r1
000026  61c3              STR      r3,[r0,#0x1c]
;;;154      /* Check the parameters */
;;;155      assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
;;;156      NVIC_SetPriority(IRQn,PreemptPriority);
;;;157    }
000028  4770              BX       lr
                  |L7.42|
00002a  0883              LSRS     r3,r0,#2
00002c  4804              LDR      r0,|L7.64|
00002e  009b              LSLS     r3,r3,#2
000030  181b              ADDS     r3,r3,r0
000032  6818              LDR      r0,[r3,#0]
000034  4390              BICS     r0,r0,r2
000036  4308              ORRS     r0,r0,r1
000038  6018              STR      r0,[r3,#0]
00003a  4770              BX       lr
;;;158    
                          ENDP

                  |L7.60|
                          DCD      0xe000ed00
                  |L7.64|
                          DCD      0xe000e400

                          AREA ||i.HAL_NVIC_SystemReset||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SystemReset PROC
;;;196      */
;;;197    void HAL_NVIC_SystemReset(void)
000000  f3bf8f4f          DSB      
000004  4904              LDR      r1,|L8.24|
000006  4803              LDR      r0,|L8.20|
000008  60c8              STR      r0,[r1,#0xc]
00000a  f3bf8f4f          DSB      
                  |L8.14|
00000e  bf00              NOP      
000010  e7fd              B        |L8.14|
;;;198    {
;;;199      /* System Reset */
;;;200      NVIC_SystemReset();
;;;201    }
;;;202    
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x05fa0004
                  |L8.24|
                          DCD      0xe000ed00

                          AREA ||i.HAL_SYSTICK_CLKSourceConfig||, CODE, READONLY, ALIGN=2

                  HAL_SYSTICK_CLKSourceConfig PROC
;;;305      */
;;;306    void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
000000  2204              MOVS     r2,#4
;;;307    {
;;;308      /* Check the parameters */
;;;309      assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
;;;310      if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
;;;311      {
;;;312        SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
000002  4904              LDR      r1,|L9.20|
000004  2804              CMP      r0,#4                 ;310
;;;313      }
;;;314      else
;;;315      {
;;;316        SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
000006  6908              LDR      r0,[r1,#0x10]
000008  d002              BEQ      |L9.16|
00000a  4390              BICS     r0,r0,r2
                  |L9.12|
00000c  6108              STR      r0,[r1,#0x10]         ;312
;;;317      }
;;;318    }
00000e  4770              BX       lr
                  |L9.16|
000010  4310              ORRS     r0,r0,r2              ;312
000012  e7fb              B        |L9.12|
;;;319    
                          ENDP

                  |L9.20|
                          DCD      0xe000e000

                          AREA ||i.HAL_SYSTICK_Callback||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_Callback PROC
;;;332      */
;;;333    __weak void HAL_SYSTICK_Callback(void)
000000  4770              BX       lr
;;;334    {
;;;335      /* NOTE : This function Should not be modified, when the callback is needed,
;;;336                the HAL_SYSTICK_Callback could be implemented in the user file
;;;337       */
;;;338    }
;;;339    
                          ENDP


                          AREA ||i.HAL_SYSTICK_Config||, CODE, READONLY, ALIGN=2

                  HAL_SYSTICK_Config PROC
;;;209      */
;;;210    uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
000000  490b              LDR      r1,|L11.48|
;;;211    {
000002  b410              PUSH     {r4}
000004  1e40              SUBS     r0,r0,#1
000006  4288              CMP      r0,r1
000008  d902              BLS      |L11.16|
;;;212       return SysTick_Config(TicksNumb);
;;;213    }
00000a  bc10              POP      {r4}
00000c  2001              MOVS     r0,#1
00000e  4770              BX       lr
                  |L11.16|
000010  4908              LDR      r1,|L11.52|
000012  6148              STR      r0,[r1,#0x14]
000014  4808              LDR      r0,|L11.56|
000016  2207              MOVS     r2,#7                 ;212
000018  69c3              LDR      r3,[r0,#0x1c]         ;212
00001a  021b              LSLS     r3,r3,#8              ;212
00001c  0a1b              LSRS     r3,r3,#8              ;212
00001e  044c              LSLS     r4,r1,#17             ;212
000020  4323              ORRS     r3,r3,r4              ;212
000022  61c3              STR      r3,[r0,#0x1c]         ;212
000024  2000              MOVS     r0,#0                 ;212
000026  6188              STR      r0,[r1,#0x18]         ;212
000028  610a              STR      r2,[r1,#0x10]         ;212
00002a  bc10              POP      {r4}
00002c  4770              BX       lr
;;;214    /**
                          ENDP

00002e  0000              DCW      0x0000
                  |L11.48|
                          DCD      0x00ffffff
                  |L11.52|
                          DCD      0xe000e000
                  |L11.56|
                          DCD      0xe000ed04

                          AREA ||i.HAL_SYSTICK_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_IRQHandler PROC
;;;323      */
;;;324    void HAL_SYSTICK_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;325    {
;;;326      HAL_SYSTICK_Callback();
000002  f7fffffe          BL       HAL_SYSTICK_Callback
;;;327    }
000006  bd10              POP      {r4,pc}
;;;328    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F0_V1.9.0\\Drivers\\STM32F0xx_HAL_Driver\\Src\\stm32f0xx_hal_cortex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f0xx_hal_cortex_c_910ac087____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F0_V1.9.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f0xx_hal_cortex_c_910ac087____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f0xx_hal_cortex_c_910ac087____REVSH|
#line 402
|__asm___22_stm32f0xx_hal_cortex_c_910ac087____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
