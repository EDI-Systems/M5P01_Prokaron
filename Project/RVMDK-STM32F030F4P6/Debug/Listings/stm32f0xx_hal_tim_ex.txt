; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f0xx_hal_tim_ex.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f0xx_hal_tim_ex.d --cpu=Cortex-M0 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\STM32F0xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\STM32F0xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F030F4P6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0\Drivers\CMSIS\Device\ST\STM32F0xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F030x6 -DSTM32F030x6 -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f0xx_hal_tim_ex.crf ..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\STM32F0xx_HAL_Driver\Src\stm32f0xx_hal_tim_ex.c]
                          THUMB

                          AREA ||i.HAL_TIMEx_BreakCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_BreakCallback PROC
;;;1908     */
;;;1909   __weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1910   {
;;;1911     /* Prevent unused argument(s) compilation warning */
;;;1912     UNUSED(htim);
;;;1913   
;;;1914     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1915               the HAL_TIMEx_BreakCallback could be implemented in the user file
;;;1916      */
;;;1917   }
;;;1918   
                          ENDP


                          AREA ||i.HAL_TIMEx_CommutationCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_CommutationCallback PROC
;;;1893     */
;;;1894   __weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1895   {
;;;1896     /* Prevent unused argument(s) compilation warning */
;;;1897     UNUSED(htim);
;;;1898   
;;;1899     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1900               the HAL_TIMEx_CommutationCallback could be implemented in the user file
;;;1901      */
;;;1902   }
;;;1903   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigBreakDeadTime||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigBreakDeadTime PROC
;;;1641     */    
;;;1642   HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
000000  6bc2              LDR      r2,[r0,#0x3c]
;;;1643                                                   TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
;;;1644   {
;;;1645     uint32_t tmpbdtr = 0;
;;;1646      
;;;1647     /* Check the parameters */
;;;1648     assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
;;;1649     assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
;;;1650     assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
;;;1651     assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
;;;1652     assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
;;;1653     assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
;;;1654     assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
;;;1655     assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
;;;1656   
;;;1657     /* Process Locked */
;;;1658     __HAL_LOCK(htim);
000002  2a01              CMP      r2,#1
000004  d101              BNE      |L3.10|
000006  2002              MOVS     r0,#2
;;;1659   
;;;1660     htim->State = HAL_TIM_STATE_BUSY;
;;;1661   
;;;1662     /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
;;;1663        the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;1664     
;;;1665     /* Set the BDTR bits */
;;;1666     MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
;;;1667     MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
;;;1668     MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
;;;1669     MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
;;;1670     MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
;;;1671     MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
;;;1672     MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
;;;1673     MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
;;;1674     
;;;1675     /* Set TIMx_BDTR */
;;;1676     htim->Instance->BDTR = tmpbdtr;
;;;1677     
;;;1678     htim->State = HAL_TIM_STATE_READY;
;;;1679   
;;;1680     __HAL_UNLOCK(htim);
;;;1681   
;;;1682     return HAL_OK;
;;;1683   }
000008  4770              BX       lr
                  |L3.10|
00000a  b410              PUSH     {r4}                  ;1644
00000c  2301              MOVS     r3,#1                 ;1658
00000e  2202              MOVS     r2,#2                 ;1660
000010  63c3              STR      r3,[r0,#0x3c]         ;1660
000012  6402              STR      r2,[r0,#0x40]         ;1660
000014  2403              MOVS     r4,#3                 ;1667
000016  68ca              LDR      r2,[r1,#0xc]          ;1667
000018  0224              LSLS     r4,r4,#8              ;1667
00001a  43a2              BICS     r2,r2,r4              ;1667
00001c  688c              LDR      r4,[r1,#8]            ;1667
00001e  4322              ORRS     r2,r2,r4              ;1667
000020  029c              LSLS     r4,r3,#10             ;1668
000022  43a2              BICS     r2,r2,r4              ;1668
000024  684c              LDR      r4,[r1,#4]            ;1668
000026  4322              ORRS     r2,r2,r4              ;1668
000028  02dc              LSLS     r4,r3,#11             ;1669
00002a  43a2              BICS     r2,r2,r4              ;1669
00002c  680c              LDR      r4,[r1,#0]            ;1669
00002e  4322              ORRS     r2,r2,r4              ;1669
000030  031c              LSLS     r4,r3,#12             ;1670
000032  43a2              BICS     r2,r2,r4              ;1670
000034  690c              LDR      r4,[r1,#0x10]         ;1670
000036  4322              ORRS     r2,r2,r4              ;1670
000038  035c              LSLS     r4,r3,#13             ;1671
00003a  43a2              BICS     r2,r2,r4              ;1671
00003c  694c              LDR      r4,[r1,#0x14]         ;1671
00003e  6989              LDR      r1,[r1,#0x18]         ;1672
000040  4322              ORRS     r2,r2,r4              ;1671
000042  039c              LSLS     r4,r3,#14             ;1672
000044  43a2              BICS     r2,r2,r4              ;1672
000046  430a              ORRS     r2,r2,r1              ;1672
000048  03dc              LSLS     r4,r3,#15             ;1673
00004a  43a2              BICS     r2,r2,r4              ;1673
00004c  430a              ORRS     r2,r2,r1              ;1673
00004e  6801              LDR      r1,[r0,#0]            ;1676
000050  644a              STR      r2,[r1,#0x44]         ;1676
000052  6403              STR      r3,[r0,#0x40]         ;1678
000054  2100              MOVS     r1,#0                 ;1680
000056  63c1              STR      r1,[r0,#0x3c]         ;1682
000058  bc10              POP      {r4}
00005a  4608              MOV      r0,r1                 ;1682
00005c  4770              BX       lr
;;;1684   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutationEvent PROC
;;;1459     */
;;;1460   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  b470              PUSH     {r4-r6}
;;;1461   {
;;;1462     /* Check the parameters */
;;;1463     assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
;;;1464     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1465   
;;;1466     __HAL_LOCK(htim);
000002  6bc3              LDR      r3,[r0,#0x3c]
000004  2b01              CMP      r3,#1
000006  d00a              BEQ      |L4.30|
000008  2301              MOVS     r3,#1
;;;1467   
;;;1468     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
00000a  63c3              STR      r3,[r0,#0x3c]
00000c  2900              CMP      r1,#0
00000e  d009              BEQ      |L4.36|
000010  2910              CMP      r1,#0x10
000012  d007              BEQ      |L4.36|
000014  2920              CMP      r1,#0x20
000016  d005              BEQ      |L4.36|
000018  2930              CMP      r1,#0x30
00001a  d003              BEQ      |L4.36|
00001c  e00b              B        |L4.54|
                  |L4.30|
;;;1469         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1470     {
;;;1471       /* Select the Input trigger */
;;;1472       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1473       htim->Instance->SMCR |= InputTrigger;
;;;1474     }
;;;1475   
;;;1476     /* Select the Capture Compare preload feature */
;;;1477     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1478     /* Select the Commutation event source */
;;;1479     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1480     htim->Instance->CR2 |= CommutationSource;
;;;1481   
;;;1482     __HAL_UNLOCK(htim);
;;;1483   
;;;1484     return HAL_OK;
;;;1485   }
00001e  bc70              POP      {r4-r6}
000020  2002              MOVS     r0,#2                 ;1466
000022  4770              BX       lr
                  |L4.36|
000024  6804              LDR      r4,[r0,#0]            ;1472
000026  68a5              LDR      r5,[r4,#8]            ;1472
000028  2670              MOVS     r6,#0x70              ;1472
00002a  43b5              BICS     r5,r5,r6              ;1472
00002c  60a5              STR      r5,[r4,#8]            ;1472
00002e  6804              LDR      r4,[r0,#0]            ;1473
000030  68a5              LDR      r5,[r4,#8]            ;1473
000032  430d              ORRS     r5,r5,r1              ;1473
000034  60a5              STR      r5,[r4,#8]            ;1473
                  |L4.54|
000036  6801              LDR      r1,[r0,#0]            ;1477
000038  684c              LDR      r4,[r1,#4]            ;1477
00003a  431c              ORRS     r4,r4,r3              ;1477
00003c  604c              STR      r4,[r1,#4]            ;1477
00003e  6801              LDR      r1,[r0,#0]            ;1479
000040  684b              LDR      r3,[r1,#4]            ;1479
000042  2404              MOVS     r4,#4                 ;1479
000044  43a3              BICS     r3,r3,r4              ;1479
000046  604b              STR      r3,[r1,#4]            ;1479
000048  6801              LDR      r1,[r0,#0]            ;1480
00004a  684b              LDR      r3,[r1,#4]            ;1480
00004c  4313              ORRS     r3,r3,r2              ;1480
00004e  604b              STR      r3,[r1,#4]            ;1480
000050  2100              MOVS     r1,#0                 ;1482
000052  63c1              STR      r1,[r0,#0x3c]         ;1484
000054  bc70              POP      {r4-r6}
000056  4608              MOV      r0,r1                 ;1484
000058  4770              BX       lr
;;;1486   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_ConfigCommutationEvent_DMA PROC
;;;1561     */
;;;1562   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  b470              PUSH     {r4-r6}
;;;1563   {
;;;1564     /* Check the parameters */
;;;1565     assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
;;;1566     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1567   
;;;1568     __HAL_LOCK(htim);
000002  6bc3              LDR      r3,[r0,#0x3c]
000004  2b01              CMP      r3,#1
000006  d00a              BEQ      |L5.30|
000008  2301              MOVS     r3,#1
;;;1569   
;;;1570     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
00000a  63c3              STR      r3,[r0,#0x3c]
00000c  2900              CMP      r1,#0
00000e  d009              BEQ      |L5.36|
000010  2910              CMP      r1,#0x10
000012  d007              BEQ      |L5.36|
000014  2920              CMP      r1,#0x20
000016  d005              BEQ      |L5.36|
000018  2930              CMP      r1,#0x30
00001a  d003              BEQ      |L5.36|
00001c  e00b              B        |L5.54|
                  |L5.30|
;;;1571         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1572     {
;;;1573       /* Select the Input trigger */
;;;1574       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1575       htim->Instance->SMCR |= InputTrigger;
;;;1576     }
;;;1577   
;;;1578     /* Select the Capture Compare preload feature */
;;;1579     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1580     /* Select the Commutation event source */
;;;1581     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1582     htim->Instance->CR2 |= CommutationSource;
;;;1583   
;;;1584     /* Enable the Commutation DMA Request */
;;;1585     /* Set the DMA Commutation Callback */
;;;1586     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
;;;1587     /* Set the DMA error callback */
;;;1588     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
;;;1589   
;;;1590     /* Enable the Commutation DMA Request */
;;;1591     __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
;;;1592   
;;;1593     __HAL_UNLOCK(htim);
;;;1594   
;;;1595     return HAL_OK;
;;;1596   }
00001e  bc70              POP      {r4-r6}
000020  2002              MOVS     r0,#2                 ;1568
000022  4770              BX       lr
                  |L5.36|
000024  6804              LDR      r4,[r0,#0]            ;1574
000026  68a5              LDR      r5,[r4,#8]            ;1574
000028  2670              MOVS     r6,#0x70              ;1574
00002a  43b5              BICS     r5,r5,r6              ;1574
00002c  60a5              STR      r5,[r4,#8]            ;1574
00002e  6804              LDR      r4,[r0,#0]            ;1575
000030  68a5              LDR      r5,[r4,#8]            ;1575
000032  430d              ORRS     r5,r5,r1              ;1575
000034  60a5              STR      r5,[r4,#8]            ;1575
                  |L5.54|
000036  6801              LDR      r1,[r0,#0]            ;1579
000038  684c              LDR      r4,[r1,#4]            ;1579
00003a  431c              ORRS     r4,r4,r3              ;1579
00003c  604c              STR      r4,[r1,#4]            ;1579
00003e  6801              LDR      r1,[r0,#0]            ;1581
000040  684b              LDR      r3,[r1,#4]            ;1581
000042  2404              MOVS     r4,#4                 ;1581
000044  43a3              BICS     r3,r3,r4              ;1581
000046  604b              STR      r3,[r1,#4]            ;1581
000048  6801              LDR      r1,[r0,#0]            ;1582
00004a  684b              LDR      r3,[r1,#4]            ;1582
00004c  4313              ORRS     r3,r3,r2              ;1582
00004e  604b              STR      r3,[r1,#4]            ;1582
000050  6b42              LDR      r2,[r0,#0x34]         ;1586
000052  4907              LDR      r1,|L5.112|
000054  62d1              STR      r1,[r2,#0x2c]         ;1588
000056  6b42              LDR      r2,[r0,#0x34]         ;1588
000058  4906              LDR      r1,|L5.116|
00005a  6351              STR      r1,[r2,#0x34]         ;1591
00005c  6801              LDR      r1,[r0,#0]            ;1591
00005e  68ca              LDR      r2,[r1,#0xc]          ;1591
000060  02e3              LSLS     r3,r4,#11             ;1591
000062  431a              ORRS     r2,r2,r3              ;1591
000064  60ca              STR      r2,[r1,#0xc]          ;1591
000066  2100              MOVS     r1,#0                 ;1593
000068  63c1              STR      r1,[r0,#0x3c]         ;1595
00006a  bc70              POP      {r4-r6}
00006c  4608              MOV      r0,r1                 ;1595
00006e  4770              BX       lr
;;;1597   
                          ENDP

                  |L5.112|
                          DCD      TIMEx_DMACommutationCplt
                  |L5.116|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutationEvent_IT PROC
;;;1508     */
;;;1509   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  b470              PUSH     {r4-r6}
;;;1510   {
;;;1511     /* Check the parameters */
;;;1512     assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
;;;1513     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1514   
;;;1515     __HAL_LOCK(htim);
000002  6bc3              LDR      r3,[r0,#0x3c]
000004  2b01              CMP      r3,#1
000006  d00a              BEQ      |L6.30|
000008  2301              MOVS     r3,#1
;;;1516   
;;;1517     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
00000a  63c3              STR      r3,[r0,#0x3c]
00000c  2900              CMP      r1,#0
00000e  d009              BEQ      |L6.36|
000010  2910              CMP      r1,#0x10
000012  d007              BEQ      |L6.36|
000014  2920              CMP      r1,#0x20
000016  d005              BEQ      |L6.36|
000018  2930              CMP      r1,#0x30
00001a  d003              BEQ      |L6.36|
00001c  e00b              B        |L6.54|
                  |L6.30|
;;;1518         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1519     {
;;;1520       /* Select the Input trigger */
;;;1521       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1522       htim->Instance->SMCR |= InputTrigger;
;;;1523     }
;;;1524   
;;;1525     /* Select the Capture Compare preload feature */
;;;1526     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1527     /* Select the Commutation event source */
;;;1528     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1529     htim->Instance->CR2 |= CommutationSource;
;;;1530   
;;;1531     /* Enable the Commutation Interrupt Request */
;;;1532     __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
;;;1533   
;;;1534     __HAL_UNLOCK(htim);
;;;1535   
;;;1536     return HAL_OK;
;;;1537   }
00001e  bc70              POP      {r4-r6}
000020  2002              MOVS     r0,#2                 ;1515
000022  4770              BX       lr
                  |L6.36|
000024  6804              LDR      r4,[r0,#0]            ;1521
000026  68a5              LDR      r5,[r4,#8]            ;1521
000028  2670              MOVS     r6,#0x70              ;1521
00002a  43b5              BICS     r5,r5,r6              ;1521
00002c  60a5              STR      r5,[r4,#8]            ;1521
00002e  6804              LDR      r4,[r0,#0]            ;1522
000030  68a5              LDR      r5,[r4,#8]            ;1522
000032  430d              ORRS     r5,r5,r1              ;1522
000034  60a5              STR      r5,[r4,#8]            ;1522
                  |L6.54|
000036  6801              LDR      r1,[r0,#0]            ;1526
000038  684c              LDR      r4,[r1,#4]            ;1526
00003a  431c              ORRS     r4,r4,r3              ;1526
00003c  604c              STR      r4,[r1,#4]            ;1526
00003e  6801              LDR      r1,[r0,#0]            ;1528
000040  684b              LDR      r3,[r1,#4]            ;1528
000042  2404              MOVS     r4,#4                 ;1528
000044  43a3              BICS     r3,r3,r4              ;1528
000046  604b              STR      r3,[r1,#4]            ;1528
000048  6801              LDR      r1,[r0,#0]            ;1529
00004a  684b              LDR      r3,[r1,#4]            ;1529
00004c  4313              ORRS     r3,r3,r2              ;1529
00004e  604b              STR      r3,[r1,#4]            ;1529
000050  6801              LDR      r1,[r0,#0]            ;1532
000052  68ca              LDR      r2,[r1,#0xc]          ;1532
000054  2320              MOVS     r3,#0x20              ;1532
000056  431a              ORRS     r2,r2,r3              ;1532
000058  60ca              STR      r2,[r1,#0xc]          ;1532
00005a  2100              MOVS     r1,#0                 ;1534
00005c  63c1              STR      r1,[r0,#0x3c]         ;1536
00005e  bc70              POP      {r4-r6}
000060  4608              MOV      r0,r1                 ;1536
000062  4770              BX       lr
;;;1538   
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_DeInit PROC
;;;236      */
;;;237    HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;238    {
000002  4604              MOV      r4,r0
;;;239      /* Check the parameters */
;;;240      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;241    
;;;242      htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  6420              STR      r0,[r4,#0x40]
;;;243    
;;;244      /* Disable the TIM Peripheral Clock */
;;;245      __HAL_TIM_DISABLE(htim);
000008  6820              LDR      r0,[r4,#0]
00000a  6a01              LDR      r1,[r0,#0x20]
00000c  4a08              LDR      r2,|L7.48|
00000e  4211              TST      r1,r2
000010  d107              BNE      |L7.34|
000012  6a01              LDR      r1,[r0,#0x20]
000014  1092              ASRS     r2,r2,#2
000016  4211              TST      r1,r2
000018  d103              BNE      |L7.34|
00001a  6801              LDR      r1,[r0,#0]
00001c  0849              LSRS     r1,r1,#1
00001e  0049              LSLS     r1,r1,#1
000020  6001              STR      r1,[r0,#0]
                  |L7.34|
;;;246    
;;;247      /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;248      HAL_TIMEx_HallSensor_MspDeInit(htim);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       HAL_TIMEx_HallSensor_MspDeInit
;;;249    
;;;250      /* Change TIM state */
;;;251      htim->State = HAL_TIM_STATE_RESET;
000028  2000              MOVS     r0,#0
00002a  6420              STR      r0,[r4,#0x40]
;;;252    
;;;253      /* Release Lock */
;;;254      __HAL_UNLOCK(htim);
00002c  63e0              STR      r0,[r4,#0x3c]
;;;255    
;;;256      return HAL_OK;
;;;257    }
00002e  bd10              POP      {r4,pc}
;;;258    
                          ENDP

                  |L7.48|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_HallSensor_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_GetState PROC
;;;1956     */
;;;1957   HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
000000  6c00              LDR      r0,[r0,#0x40]
;;;1958   {
;;;1959     return htim->State;
;;;1960   }
000002  4770              BX       lr
;;;1961   
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Init PROC
;;;157      */
;;;158    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
000000  2800              CMP      r0,#0
;;;159    {
;;;160      TIM_OC_InitTypeDef OC_Config;
;;;161    
;;;162      /* Check the TIM handle allocation */
;;;163      if(htim == NULL)
000002  d101              BNE      |L9.8|
;;;164      {
;;;165        return HAL_ERROR;
000004  2001              MOVS     r0,#1
;;;166      }
;;;167    
;;;168      assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));
;;;169      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;170      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;171      assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
;;;172      assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
;;;173      assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
;;;174      assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
;;;175    
;;;176      if(htim->State == HAL_TIM_STATE_RESET)
;;;177      {
;;;178        /* Allocate lock resource and initialize it */
;;;179        htim->Lock = HAL_UNLOCKED;
;;;180    
;;;181        /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;182        HAL_TIMEx_HallSensor_MspInit(htim);
;;;183      }
;;;184    
;;;185      /* Set the TIM state */
;;;186      htim->State= HAL_TIM_STATE_BUSY;
;;;187    
;;;188      /* Configure the Time base in the Encoder Mode */
;;;189      TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;190    
;;;191      /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
;;;192      TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
;;;193    
;;;194      /* Reset the IC1PSC Bits */
;;;195      htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
;;;196      /* Set the IC1PSC value */
;;;197      htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
;;;198    
;;;199      /* Enable the Hall sensor interface (XOR function of the three inputs) */
;;;200      htim->Instance->CR2 |= TIM_CR2_TI1S;
;;;201    
;;;202      /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
;;;203      htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;204      htim->Instance->SMCR |= TIM_TS_TI1F_ED;
;;;205    
;;;206      /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
;;;207      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;208      htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
;;;209    
;;;210      /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
;;;211      OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
;;;212      OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
;;;213      OC_Config.OCMode = TIM_OCMODE_PWM2;
;;;214      OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
;;;215      OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
;;;216      OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
;;;217      OC_Config.Pulse = sConfig->Commutation_Delay;
;;;218    
;;;219      TIM_OC2_SetConfig(htim->Instance, &OC_Config);
;;;220    
;;;221      /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
;;;222        register to 101 */
;;;223      htim->Instance->CR2 &= ~TIM_CR2_MMS;
;;;224      htim->Instance->CR2 |= TIM_TRGO_OC2REF;
;;;225    
;;;226      /* Initialize the TIM state*/
;;;227      htim->State= HAL_TIM_STATE_READY;
;;;228    
;;;229      return HAL_OK;
;;;230    }
000006  4770              BX       lr
                  |L9.8|
000008  b5f0              PUSH     {r4-r7,lr}            ;159
00000a  4604              MOV      r4,r0                 ;159
00000c  6c00              LDR      r0,[r0,#0x40]         ;176
00000e  b087              SUB      sp,sp,#0x1c           ;159
000010  460e              MOV      r6,r1                 ;159
000012  2500              MOVS     r5,#0                 ;176
000014  2800              CMP      r0,#0                 ;176
000016  d103              BNE      |L9.32|
000018  4620              MOV      r0,r4                 ;182
00001a  63e5              STR      r5,[r4,#0x3c]         ;182
00001c  f7fffffe          BL       HAL_TIMEx_HallSensor_MspInit
                  |L9.32|
000020  2002              MOVS     r0,#2                 ;186
000022  6420              STR      r0,[r4,#0x40]         ;186
000024  1d21              ADDS     r1,r4,#4              ;189
000026  6820              LDR      r0,[r4,#0]            ;189
000028  f7fffffe          BL       TIM_Base_SetConfig
00002c  68b3              LDR      r3,[r6,#8]            ;192
00002e  6831              LDR      r1,[r6,#0]            ;192
000030  2203              MOVS     r2,#3                 ;192
000032  6820              LDR      r0,[r4,#0]            ;192
000034  f7fffffe          BL       TIM_TI1_SetConfig
000038  6820              LDR      r0,[r4,#0]            ;195
00003a  6981              LDR      r1,[r0,#0x18]         ;195
00003c  220c              MOVS     r2,#0xc               ;195
00003e  4391              BICS     r1,r1,r2              ;195
000040  6181              STR      r1,[r0,#0x18]         ;195
000042  6820              LDR      r0,[r4,#0]            ;197
000044  6981              LDR      r1,[r0,#0x18]         ;197
000046  6872              LDR      r2,[r6,#4]            ;197
000048  4311              ORRS     r1,r1,r2              ;197
00004a  6181              STR      r1,[r0,#0x18]         ;197
00004c  6820              LDR      r0,[r4,#0]            ;200
00004e  6841              LDR      r1,[r0,#4]            ;200
000050  2280              MOVS     r2,#0x80              ;200
000052  4311              ORRS     r1,r1,r2              ;200
000054  6041              STR      r1,[r0,#4]            ;200
000056  6820              LDR      r0,[r4,#0]            ;203
000058  6881              LDR      r1,[r0,#8]            ;203
00005a  2770              MOVS     r7,#0x70              ;203
00005c  43b9              BICS     r1,r1,r7              ;203
00005e  6081              STR      r1,[r0,#8]            ;203
000060  6820              LDR      r0,[r4,#0]            ;204
000062  6881              LDR      r1,[r0,#8]            ;204
000064  2240              MOVS     r2,#0x40              ;204
000066  4311              ORRS     r1,r1,r2              ;204
000068  6081              STR      r1,[r0,#8]            ;204
00006a  6820              LDR      r0,[r4,#0]            ;207
00006c  6881              LDR      r1,[r0,#8]            ;207
00006e  08c9              LSRS     r1,r1,#3              ;207
000070  00c9              LSLS     r1,r1,#3              ;207
000072  6081              STR      r1,[r0,#8]            ;207
000074  6820              LDR      r0,[r4,#0]            ;208
000076  6881              LDR      r1,[r0,#8]            ;208
000078  2204              MOVS     r2,#4                 ;208
00007a  4311              ORRS     r1,r1,r2              ;208
00007c  6081              STR      r1,[r0,#8]            ;208
00007e  9505              STR      r5,[sp,#0x14]         ;214
000080  9504              STR      r5,[sp,#0x10]         ;212
000082  9506              STR      r5,[sp,#0x18]         ;215
000084  9503              STR      r5,[sp,#0xc]          ;216
000086  9700              STR      r7,[sp,#0]            ;217
000088  9502              STR      r5,[sp,#8]            ;217
00008a  68f0              LDR      r0,[r6,#0xc]          ;217
00008c  9001              STR      r0,[sp,#4]            ;219
00008e  4669              MOV      r1,sp                 ;219
000090  6820              LDR      r0,[r4,#0]            ;219
000092  f7fffffe          BL       TIM_OC2_SetConfig
000096  6820              LDR      r0,[r4,#0]            ;223
000098  6841              LDR      r1,[r0,#4]            ;223
00009a  43b9              BICS     r1,r1,r7              ;223
00009c  6041              STR      r1,[r0,#4]            ;223
00009e  6820              LDR      r0,[r4,#0]            ;224
0000a0  6841              LDR      r1,[r0,#4]            ;224
0000a2  2250              MOVS     r2,#0x50              ;224
0000a4  4311              ORRS     r1,r1,r2              ;224
0000a6  6041              STR      r1,[r0,#4]            ;224
0000a8  2001              MOVS     r0,#1                 ;227
0000aa  6420              STR      r0,[r4,#0x40]         ;227
0000ac  2000              MOVS     r0,#0                 ;229
0000ae  b007              ADD      sp,sp,#0x1c
0000b0  bdf0              POP      {r4-r7,pc}
;;;231    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspDeInit PROC
;;;278      */
;;;279    __weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;280    {
;;;281      /* Prevent unused argument(s) compilation warning */
;;;282      UNUSED(htim);
;;;283    
;;;284      /* NOTE : This function Should not be modified, when the callback is needed,
;;;285                the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
;;;286       */
;;;287    }
;;;288    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspInit PROC
;;;263      */
;;;264    __weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;265    {
;;;266      /* Prevent unused argument(s) compilation warning */
;;;267      UNUSED(htim);
;;;268    
;;;269      /* NOTE : This function Should not be modified, when the callback is needed,
;;;270                the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
;;;271       */
;;;272    }
;;;273    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Start PROC
;;;293      */
;;;294    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;295    {
000002  4604              MOV      r4,r0
;;;296      /* Check the parameters */
;;;297      assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));
;;;298    
;;;299      /* Enable the Input Capture channel 1
;;;300        (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;301      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
000004  6800              LDR      r0,[r0,#0]
000006  2201              MOVS     r2,#1
000008  2100              MOVS     r1,#0
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;302    
;;;303      /* Enable the Peripheral */
;;;304      __HAL_TIM_ENABLE(htim);
00000e  6820              LDR      r0,[r4,#0]
000010  6801              LDR      r1,[r0,#0]
000012  2201              MOVS     r2,#1
000014  4311              ORRS     r1,r1,r2
000016  6001              STR      r1,[r0,#0]
;;;305    
;;;306      /* Return function status */
;;;307      return HAL_OK;
000018  2000              MOVS     r0,#0
;;;308    }
00001a  bd10              POP      {r4,pc}
;;;309    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Start_DMA PROC
;;;385      */
;;;386    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;387    {
000002  4604              MOV      r4,r0
;;;388      /* Check the parameters */
;;;389      assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));
;;;390    
;;;391       if((htim->State == HAL_TIM_STATE_BUSY))
000004  6c00              LDR      r0,[r0,#0x40]
000006  4615              MOV      r5,r2                 ;387
000008  460e              MOV      r6,r1                 ;387
00000a  2802              CMP      r0,#2
00000c  d006              BEQ      |L13.28|
;;;392      {
;;;393         return HAL_BUSY;
;;;394      }
;;;395      else if((htim->State == HAL_TIM_STATE_READY))
00000e  6c20              LDR      r0,[r4,#0x40]
000010  2801              CMP      r0,#1
000012  d106              BNE      |L13.34|
;;;396      {
;;;397        if(((uint32_t)pData == 0U ) && (Length > 0U))
000014  2e00              CMP      r6,#0
000016  d102              BNE      |L13.30|
000018  2d00              CMP      r5,#0
00001a  d000              BEQ      |L13.30|
                  |L13.28|
;;;398        {
;;;399          return HAL_ERROR;
;;;400        }
;;;401        else
;;;402        {
;;;403          htim->State = HAL_TIM_STATE_BUSY;
;;;404        }
;;;405      }
;;;406      /* Enable the Input Capture channel 1
;;;407        (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;408      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;409    
;;;410      /* Set the DMA Input Capture 1 Callback */
;;;411      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
;;;412      /* Set the DMA error callback */
;;;413      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;414    
;;;415      /* Enable the DMA channel for Capture 1*/
;;;416      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
;;;417    
;;;418      /* Enable the capture compare 1 Interrupt */
;;;419      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;420    
;;;421      /* Enable the Peripheral */
;;;422      __HAL_TIM_ENABLE(htim);
;;;423    
;;;424      /* Return function status */
;;;425      return HAL_OK;
;;;426    }
00001c  bd70              POP      {r4-r6,pc}
                  |L13.30|
00001e  2002              MOVS     r0,#2                 ;403
000020  6420              STR      r0,[r4,#0x40]         ;403
                  |L13.34|
000022  2201              MOVS     r2,#1                 ;408
000024  2100              MOVS     r1,#0                 ;408
000026  6820              LDR      r0,[r4,#0]            ;408
000028  f7fffffe          BL       TIM_CCxChannelCmd
00002c  6a61              LDR      r1,[r4,#0x24]         ;411
00002e  480c              LDR      r0,|L13.96|
000030  62c8              STR      r0,[r1,#0x2c]         ;413
000032  6a61              LDR      r1,[r4,#0x24]         ;413
000034  480b              LDR      r0,|L13.100|
000036  6348              STR      r0,[r1,#0x34]         ;416
000038  6821              LDR      r1,[r4,#0]            ;416
00003a  462b              MOV      r3,r5                 ;416
00003c  4632              MOV      r2,r6                 ;416
00003e  3134              ADDS     r1,r1,#0x34           ;416
000040  6a60              LDR      r0,[r4,#0x24]         ;416
000042  f7fffffe          BL       HAL_DMA_Start_IT
000046  6820              LDR      r0,[r4,#0]            ;419
000048  68c1              LDR      r1,[r0,#0xc]          ;419
00004a  2201              MOVS     r2,#1                 ;419
00004c  0252              LSLS     r2,r2,#9              ;419
00004e  4311              ORRS     r1,r1,r2              ;419
000050  60c1              STR      r1,[r0,#0xc]          ;419
000052  6820              LDR      r0,[r4,#0]            ;422
000054  6801              LDR      r1,[r0,#0]            ;422
000056  2201              MOVS     r2,#1                 ;422
000058  4311              ORRS     r1,r1,r2              ;422
00005a  6001              STR      r1,[r0,#0]            ;422
00005c  2000              MOVS     r0,#0                 ;425
00005e  bd70              POP      {r4-r6,pc}
;;;427    
                          ENDP

                  |L13.96|
                          DCD      TIM_DMACaptureCplt
                  |L13.100|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_HallSensor_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Start_IT PROC
;;;335      */
;;;336    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;337    {
000002  4604              MOV      r4,r0
;;;338      /* Check the parameters */
;;;339      assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));
;;;340    
;;;341      /* Enable the capture compare Interrupts 1 event */
;;;342      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000004  6800              LDR      r0,[r0,#0]
000006  68c1              LDR      r1,[r0,#0xc]
000008  2202              MOVS     r2,#2
00000a  4311              ORRS     r1,r1,r2
00000c  60c1              STR      r1,[r0,#0xc]
;;;343    
;;;344      /* Enable the Input Capture channel 1
;;;345        (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;346      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
00000e  2201              MOVS     r2,#1
000010  2100              MOVS     r1,#0
000012  6820              LDR      r0,[r4,#0]
000014  f7fffffe          BL       TIM_CCxChannelCmd
;;;347    
;;;348      /* Enable the Peripheral */
;;;349      __HAL_TIM_ENABLE(htim);
000018  6820              LDR      r0,[r4,#0]
00001a  6801              LDR      r1,[r0,#0]
00001c  2201              MOVS     r2,#1
00001e  4311              ORRS     r1,r1,r2
000020  6001              STR      r1,[r0,#0]
;;;350    
;;;351      /* Return function status */
;;;352      return HAL_OK;
000022  2000              MOVS     r0,#0
;;;353    }
000024  bd10              POP      {r4,pc}
;;;354    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Stop PROC
;;;314      */
;;;315    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;316    {
000002  4604              MOV      r4,r0
;;;317      /* Check the parameters */
;;;318      assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));
;;;319    
;;;320      /* Disable the Input Capture channels 1, 2 and 3
;;;321        (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;322      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
000004  2200              MOVS     r2,#0
000006  6800              LDR      r0,[r0,#0]
000008  4611              MOV      r1,r2
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;323    
;;;324      /* Disable the Peripheral */
;;;325      __HAL_TIM_DISABLE(htim);
00000e  6820              LDR      r0,[r4,#0]
000010  6a01              LDR      r1,[r0,#0x20]
000012  4a06              LDR      r2,|L15.44|
000014  4211              TST      r1,r2
000016  d107              BNE      |L15.40|
000018  6a01              LDR      r1,[r0,#0x20]
00001a  1092              ASRS     r2,r2,#2
00001c  4211              TST      r1,r2
00001e  d103              BNE      |L15.40|
000020  6801              LDR      r1,[r0,#0]
000022  0849              LSRS     r1,r1,#1
000024  0049              LSLS     r1,r1,#1
000026  6001              STR      r1,[r0,#0]
                  |L15.40|
;;;326    
;;;327      /* Return function status */
;;;328      return HAL_OK;
000028  2000              MOVS     r0,#0
;;;329    }
00002a  bd10              POP      {r4,pc}
;;;330    
                          ENDP

                  |L15.44|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_HallSensor_Stop_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Stop_DMA PROC
;;;432      */
;;;433    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;434    {
000002  4604              MOV      r4,r0
;;;435      /* Check the parameters */
;;;436      assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));
;;;437    
;;;438      /* Disable the Input Capture channel 1
;;;439        (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;440      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
000004  2200              MOVS     r2,#0
000006  6800              LDR      r0,[r0,#0]
000008  4611              MOV      r1,r2
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;441    
;;;442    
;;;443      /* Disable the capture compare Interrupts 1 event */
;;;444      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
00000e  6820              LDR      r0,[r4,#0]
000010  68c1              LDR      r1,[r0,#0xc]
000012  2201              MOVS     r2,#1
000014  0252              LSLS     r2,r2,#9
000016  4391              BICS     r1,r1,r2
000018  60c1              STR      r1,[r0,#0xc]
;;;445    
;;;446      /* Disable the Peripheral */
;;;447      __HAL_TIM_DISABLE(htim);
00001a  6820              LDR      r0,[r4,#0]
00001c  6a01              LDR      r1,[r0,#0x20]
00001e  4a06              LDR      r2,|L16.56|
000020  4211              TST      r1,r2
000022  d107              BNE      |L16.52|
000024  6a01              LDR      r1,[r0,#0x20]
000026  1092              ASRS     r2,r2,#2
000028  4211              TST      r1,r2
00002a  d103              BNE      |L16.52|
00002c  6801              LDR      r1,[r0,#0]
00002e  0849              LSRS     r1,r1,#1
000030  0049              LSLS     r1,r1,#1
000032  6001              STR      r1,[r0,#0]
                  |L16.52|
;;;448    
;;;449      /* Return function status */
;;;450      return HAL_OK;
000034  2000              MOVS     r0,#0
;;;451    }
000036  bd10              POP      {r4,pc}
;;;452    
                          ENDP

                  |L16.56|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_HallSensor_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Stop_IT PROC
;;;359      */
;;;360    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;361    {
000002  4604              MOV      r4,r0
;;;362      /* Check the parameters */
;;;363      assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));
;;;364    
;;;365      /* Disable the Input Capture channel 1
;;;366        (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;367      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
000004  2200              MOVS     r2,#0
000006  6800              LDR      r0,[r0,#0]
000008  4611              MOV      r1,r2
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;368    
;;;369      /* Disable the capture compare Interrupts event */
;;;370      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
00000e  6820              LDR      r0,[r4,#0]
000010  68c1              LDR      r1,[r0,#0xc]
000012  2202              MOVS     r2,#2
000014  4391              BICS     r1,r1,r2
000016  60c1              STR      r1,[r0,#0xc]
;;;371    
;;;372      /* Disable the Peripheral */
;;;373      __HAL_TIM_DISABLE(htim);
000018  6820              LDR      r0,[r4,#0]
00001a  6a01              LDR      r1,[r0,#0x20]
00001c  4a06              LDR      r2,|L17.56|
00001e  4211              TST      r1,r2
000020  d107              BNE      |L17.50|
000022  6a01              LDR      r1,[r0,#0x20]
000024  1092              ASRS     r2,r2,#2
000026  4211              TST      r1,r2
000028  d103              BNE      |L17.50|
00002a  6801              LDR      r1,[r0,#0]
00002c  0849              LSRS     r1,r1,#1
00002e  0049              LSLS     r1,r1,#1
000030  6001              STR      r1,[r0,#0]
                  |L17.50|
;;;374    
;;;375      /* Return function status */
;;;376      return HAL_OK;
000032  2000              MOVS     r0,#0
;;;377    }
000034  bd10              POP      {r4,pc}
;;;378    
                          ENDP

000036  0000              DCW      0x0000
                  |L17.56|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_MasterConfigSynchronization||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_MasterConfigSynchronization PROC
;;;1605     */
;;;1606   HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
000000  6bc2              LDR      r2,[r0,#0x3c]
;;;1607   {
;;;1608     /* Check the parameters */
;;;1609     assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
;;;1610     assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
;;;1611     assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
;;;1612   
;;;1613     __HAL_LOCK(htim);
000002  2a01              CMP      r2,#1
000004  d101              BNE      |L18.10|
000006  2002              MOVS     r0,#2
;;;1614   
;;;1615     htim->State = HAL_TIM_STATE_BUSY;
;;;1616   
;;;1617     /* Reset the MMS Bits */
;;;1618     htim->Instance->CR2 &= ~TIM_CR2_MMS;
;;;1619     /* Select the TRGO source */
;;;1620     htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
;;;1621   
;;;1622     /* Reset the MSM Bit */
;;;1623     htim->Instance->SMCR &= ~TIM_SMCR_MSM;
;;;1624     /* Set or Reset the MSM Bit */
;;;1625     htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
;;;1626   
;;;1627     htim->State = HAL_TIM_STATE_READY;
;;;1628   
;;;1629     __HAL_UNLOCK(htim);
;;;1630   
;;;1631     return HAL_OK;
;;;1632   }
000008  4770              BX       lr
                  |L18.10|
00000a  b430              PUSH     {r4,r5}               ;1607
00000c  2201              MOVS     r2,#1                 ;1613
00000e  2302              MOVS     r3,#2                 ;1615
000010  6403              STR      r3,[r0,#0x40]         ;1615
000012  63c2              STR      r2,[r0,#0x3c]         ;1615
000014  6803              LDR      r3,[r0,#0]            ;1618
000016  685c              LDR      r4,[r3,#4]            ;1618
000018  2570              MOVS     r5,#0x70              ;1618
00001a  43ac              BICS     r4,r4,r5              ;1618
00001c  605c              STR      r4,[r3,#4]            ;1618
00001e  6803              LDR      r3,[r0,#0]            ;1620
000020  685c              LDR      r4,[r3,#4]            ;1620
000022  680d              LDR      r5,[r1,#0]            ;1620
000024  432c              ORRS     r4,r4,r5              ;1620
000026  605c              STR      r4,[r3,#4]            ;1620
000028  6803              LDR      r3,[r0,#0]            ;1623
00002a  689c              LDR      r4,[r3,#8]            ;1623
00002c  2580              MOVS     r5,#0x80              ;1623
00002e  43ac              BICS     r4,r4,r5              ;1623
000030  609c              STR      r4,[r3,#8]            ;1623
000032  6803              LDR      r3,[r0,#0]            ;1625
000034  689c              LDR      r4,[r3,#8]            ;1625
000036  6849              LDR      r1,[r1,#4]            ;1625
000038  430c              ORRS     r4,r4,r1              ;1625
00003a  609c              STR      r4,[r3,#8]            ;1625
00003c  6402              STR      r2,[r0,#0x40]         ;1627
00003e  2100              MOVS     r1,#0                 ;1629
000040  63c1              STR      r1,[r0,#0x3c]         ;1631
000042  bc30              POP      {r4,r5}
000044  4608              MOV      r0,r1                 ;1631
000046  4770              BX       lr
;;;1633   
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Start PROC
;;;488      */
;;;489    HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  2204              MOVS     r2,#4
000002  6803              LDR      r3,[r0,#0]
000004  408a              LSLS     r2,r2,r1
000006  6a19              LDR      r1,[r3,#0x20]
000008  4391              BICS     r1,r1,r2
00000a  6219              STR      r1,[r3,#0x20]
00000c  6a19              LDR      r1,[r3,#0x20]
00000e  4311              ORRS     r1,r1,r2
000010  6219              STR      r1,[r3,#0x20]
;;;490    {
;;;491      /* Check the parameters */
;;;492      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;493    
;;;494         /* Enable the Capture compare channel N */
;;;495         TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;496    
;;;497      /* Enable the Main Ouput */
;;;498        __HAL_TIM_MOE_ENABLE(htim);
000012  6801              LDR      r1,[r0,#0]
000014  6c4a              LDR      r2,[r1,#0x44]
000016  2301              MOVS     r3,#1
000018  03db              LSLS     r3,r3,#15
00001a  431a              ORRS     r2,r2,r3
00001c  644a              STR      r2,[r1,#0x44]
;;;499    
;;;500      /* Enable the Peripheral */
;;;501      __HAL_TIM_ENABLE(htim);
00001e  6800              LDR      r0,[r0,#0]
000020  6801              LDR      r1,[r0,#0]
000022  2201              MOVS     r2,#1
000024  4311              ORRS     r1,r1,r2
000026  6001              STR      r1,[r0,#0]
;;;502    
;;;503      /* Return function status */
;;;504      return HAL_OK;
000028  2000              MOVS     r0,#0
;;;505    }
00002a  4770              BX       lr
;;;506    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OCN_Start_DMA PROC
;;;690      */
;;;691    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;692    {
000002  4604              MOV      r4,r0
;;;693      /* Check the parameters */
;;;694      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;695    
;;;696      if((htim->State == HAL_TIM_STATE_BUSY))
000004  6c00              LDR      r0,[r0,#0x40]
000006  4616              MOV      r6,r2                 ;692
000008  460d              MOV      r5,r1                 ;692
00000a  2802              CMP      r0,#2
00000c  d006              BEQ      |L20.28|
;;;697      {
;;;698         return HAL_BUSY;
;;;699      }
;;;700      else if((htim->State == HAL_TIM_STATE_READY))
00000e  6c20              LDR      r0,[r4,#0x40]
000010  2801              CMP      r0,#1
000012  d106              BNE      |L20.34|
;;;701      {
;;;702        if(((uint32_t)pData == 0U ) && (Length > 0U))
000014  2e00              CMP      r6,#0
000016  d102              BNE      |L20.30|
000018  2b00              CMP      r3,#0
00001a  d000              BEQ      |L20.30|
                  |L20.28|
;;;703        {
;;;704          return HAL_ERROR;
;;;705        }
;;;706        else
;;;707        {
;;;708          htim->State = HAL_TIM_STATE_BUSY;
;;;709        }
;;;710      }
;;;711      switch (Channel)
;;;712      {
;;;713        case TIM_CHANNEL_1:
;;;714        {
;;;715          /* Set the DMA Period elapsed callback */
;;;716          htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;717    
;;;718          /* Set the DMA error callback */
;;;719          htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;720    
;;;721          /* Enable the DMA channel */
;;;722          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;723    
;;;724          /* Enable the TIM Output Compare DMA request */
;;;725          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;726        }
;;;727        break;
;;;728    
;;;729        case TIM_CHANNEL_2:
;;;730        {
;;;731          /* Set the DMA Period elapsed callback */
;;;732          htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;733    
;;;734          /* Set the DMA error callback */
;;;735          htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;736    
;;;737          /* Enable the DMA channel */
;;;738          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;739    
;;;740          /* Enable the TIM Output Compare DMA request */
;;;741          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;742        }
;;;743        break;
;;;744    
;;;745        case TIM_CHANNEL_3:
;;;746    {
;;;747          /* Set the DMA Period elapsed callback */
;;;748          htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;749    
;;;750          /* Set the DMA error callback */
;;;751          htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;752    
;;;753          /* Enable the DMA channel */
;;;754          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;755    
;;;756          /* Enable the TIM Output Compare DMA request */
;;;757          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;758        }
;;;759        break;
;;;760    
;;;761        case TIM_CHANNEL_4:
;;;762        {
;;;763         /* Set the DMA Period elapsed callback */
;;;764          htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;765    
;;;766          /* Set the DMA error callback */
;;;767          htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;768    
;;;769          /* Enable the DMA channel */
;;;770          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;771    
;;;772          /* Enable the TIM Output Compare DMA request */
;;;773          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;774        }
;;;775        break;
;;;776    
;;;777        default:
;;;778        break;
;;;779      }
;;;780    
;;;781      /* Enable the Capture compare channel N */
;;;782      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;783    
;;;784      /* Enable the Main Ouput */
;;;785      __HAL_TIM_MOE_ENABLE(htim);
;;;786    
;;;787      /* Enable the Peripheral */
;;;788      __HAL_TIM_ENABLE(htim);
;;;789    
;;;790      /* Return function status */
;;;791      return HAL_OK;
;;;792    }
00001c  bd70              POP      {r4-r6,pc}
                  |L20.30|
00001e  2002              MOVS     r0,#2                 ;708
000020  6420              STR      r0,[r4,#0x40]         ;708
                  |L20.34|
000022  4832              LDR      r0,|L20.236|
000024  4932              LDR      r1,|L20.240|
000026  2d00              CMP      r5,#0                 ;711
000028  d006              BEQ      |L20.56|
00002a  2d04              CMP      r5,#4                 ;711
00002c  d015              BEQ      |L20.90|
00002e  2d08              CMP      r5,#8                 ;711
000030  d024              BEQ      |L20.124|
000032  2d0c              CMP      r5,#0xc               ;711
000034  d143              BNE      |L20.190|
000036  e032              B        |L20.158|
                  |L20.56|
000038  6a62              LDR      r2,[r4,#0x24]         ;716
00003a  62d0              STR      r0,[r2,#0x2c]         ;719
00003c  6a60              LDR      r0,[r4,#0x24]         ;719
00003e  6341              STR      r1,[r0,#0x34]         ;722
000040  6822              LDR      r2,[r4,#0]            ;722
000042  4631              MOV      r1,r6                 ;722
000044  3234              ADDS     r2,r2,#0x34           ;722
000046  6a60              LDR      r0,[r4,#0x24]         ;722
000048  f7fffffe          BL       HAL_DMA_Start_IT
00004c  6820              LDR      r0,[r4,#0]            ;725
00004e  68c1              LDR      r1,[r0,#0xc]          ;725
000050  2201              MOVS     r2,#1                 ;725
000052  0252              LSLS     r2,r2,#9              ;725
000054  4311              ORRS     r1,r1,r2              ;725
000056  60c1              STR      r1,[r0,#0xc]          ;725
000058  e031              B        |L20.190|
                  |L20.90|
00005a  6aa2              LDR      r2,[r4,#0x28]         ;732
00005c  62d0              STR      r0,[r2,#0x2c]         ;735
00005e  6aa0              LDR      r0,[r4,#0x28]         ;735
000060  6341              STR      r1,[r0,#0x34]         ;738
000062  6822              LDR      r2,[r4,#0]            ;738
000064  4631              MOV      r1,r6                 ;738
000066  3238              ADDS     r2,r2,#0x38           ;738
000068  6aa0              LDR      r0,[r4,#0x28]         ;738
00006a  f7fffffe          BL       HAL_DMA_Start_IT
00006e  6820              LDR      r0,[r4,#0]            ;741
000070  68c1              LDR      r1,[r0,#0xc]          ;741
000072  2201              MOVS     r2,#1                 ;741
000074  0292              LSLS     r2,r2,#10             ;741
000076  4311              ORRS     r1,r1,r2              ;741
000078  60c1              STR      r1,[r0,#0xc]          ;741
00007a  e020              B        |L20.190|
                  |L20.124|
00007c  6ae2              LDR      r2,[r4,#0x2c]         ;748
00007e  62d0              STR      r0,[r2,#0x2c]         ;751
000080  6ae0              LDR      r0,[r4,#0x2c]         ;751
000082  6341              STR      r1,[r0,#0x34]         ;754
000084  6822              LDR      r2,[r4,#0]            ;754
000086  4631              MOV      r1,r6                 ;754
000088  323c              ADDS     r2,r2,#0x3c           ;754
00008a  6ae0              LDR      r0,[r4,#0x2c]         ;754
00008c  f7fffffe          BL       HAL_DMA_Start_IT
000090  6820              LDR      r0,[r4,#0]            ;757
000092  68c1              LDR      r1,[r0,#0xc]          ;757
000094  2201              MOVS     r2,#1                 ;757
000096  02d2              LSLS     r2,r2,#11             ;757
000098  4311              ORRS     r1,r1,r2              ;757
00009a  60c1              STR      r1,[r0,#0xc]          ;757
00009c  e00f              B        |L20.190|
                  |L20.158|
00009e  6b22              LDR      r2,[r4,#0x30]         ;764
0000a0  62d0              STR      r0,[r2,#0x2c]         ;767
0000a2  6b20              LDR      r0,[r4,#0x30]         ;767
0000a4  6341              STR      r1,[r0,#0x34]         ;770
0000a6  6822              LDR      r2,[r4,#0]            ;770
0000a8  4631              MOV      r1,r6                 ;770
0000aa  3240              ADDS     r2,r2,#0x40           ;770
0000ac  6b20              LDR      r0,[r4,#0x30]         ;770
0000ae  f7fffffe          BL       HAL_DMA_Start_IT
0000b2  6820              LDR      r0,[r4,#0]            ;773
0000b4  68c1              LDR      r1,[r0,#0xc]          ;773
0000b6  2201              MOVS     r2,#1                 ;773
0000b8  0312              LSLS     r2,r2,#12             ;773
0000ba  4311              ORRS     r1,r1,r2              ;773
0000bc  60c1              STR      r1,[r0,#0xc]          ;773
                  |L20.190|
0000be  6821              LDR      r1,[r4,#0]            ;773
0000c0  2004              MOVS     r0,#4                 ;773
0000c2  6a0a              LDR      r2,[r1,#0x20]         ;773
0000c4  40a8              LSLS     r0,r0,r5              ;773
0000c6  4382              BICS     r2,r2,r0              ;773
0000c8  620a              STR      r2,[r1,#0x20]         ;773
0000ca  6a0a              LDR      r2,[r1,#0x20]         ;773
0000cc  4302              ORRS     r2,r2,r0              ;773
0000ce  620a              STR      r2,[r1,#0x20]         ;773
0000d0  6820              LDR      r0,[r4,#0]            ;785
0000d2  6c41              LDR      r1,[r0,#0x44]         ;785
0000d4  2201              MOVS     r2,#1                 ;785
0000d6  03d2              LSLS     r2,r2,#15             ;785
0000d8  4311              ORRS     r1,r1,r2              ;785
0000da  6441              STR      r1,[r0,#0x44]         ;785
0000dc  6820              LDR      r0,[r4,#0]            ;788
0000de  6801              LDR      r1,[r0,#0]            ;788
0000e0  2201              MOVS     r2,#1                 ;788
0000e2  4311              ORRS     r1,r1,r2              ;788
0000e4  6001              STR      r1,[r0,#0]            ;788
0000e6  2000              MOVS     r0,#0                 ;791
0000e8  bd70              POP      {r4-r6,pc}
;;;793    
                          ENDP

0000ea  0000              DCW      0x0000
                  |L20.236|
                          DCD      TIM_DMADelayPulseCplt
                  |L20.240|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_OCN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Start_IT PROC
;;;548      */
;;;549    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b430              PUSH     {r4,r5}
;;;550    {
000002  2304              MOVS     r3,#4
;;;551      /* Check the parameters */
;;;552      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;553    
;;;554      switch (Channel)
000004  6802              LDR      r2,[r0,#0]
000006  2900              CMP      r1,#0
000008  d006              BEQ      |L21.24|
00000a  2904              CMP      r1,#4
00000c  d008              BEQ      |L21.32|
00000e  2908              CMP      r1,#8
000010  d00a              BEQ      |L21.40|
000012  290c              CMP      r1,#0xc
000014  d111              BNE      |L21.58|
000016  e00c              B        |L21.50|
                  |L21.24|
;;;555      {
;;;556        case TIM_CHANNEL_1:
;;;557        {
;;;558          /* Enable the TIM Output Compare interrupt */
;;;559          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000018  68d4              LDR      r4,[r2,#0xc]
00001a  2502              MOVS     r5,#2
00001c  432c              ORRS     r4,r4,r5
;;;560        }
;;;561        break;
00001e  e001              B        |L21.36|
                  |L21.32|
;;;562    
;;;563        case TIM_CHANNEL_2:
;;;564        {
;;;565          /* Enable the TIM Output Compare interrupt */
;;;566          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000020  68d4              LDR      r4,[r2,#0xc]
000022  431c              ORRS     r4,r4,r3
                  |L21.36|
000024  60d4              STR      r4,[r2,#0xc]          ;559
000026  e008              B        |L21.58|
                  |L21.40|
;;;567        }
;;;568        break;
;;;569    
;;;570        case TIM_CHANNEL_3:
;;;571        {
;;;572          /* Enable the TIM Output Compare interrupt */
;;;573          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
000028  68d4              LDR      r4,[r2,#0xc]
00002a  2508              MOVS     r5,#8
00002c  432c              ORRS     r4,r4,r5
00002e  60d4              STR      r4,[r2,#0xc]
;;;574        }
;;;575        break;
000030  e003              B        |L21.58|
                  |L21.50|
;;;576    
;;;577        case TIM_CHANNEL_4:
;;;578        {
;;;579          /* Enable the TIM Output Compare interrupt */
;;;580          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000032  68d4              LDR      r4,[r2,#0xc]
000034  2510              MOVS     r5,#0x10
000036  432c              ORRS     r4,r4,r5
000038  60d4              STR      r4,[r2,#0xc]
                  |L21.58|
;;;581        }
;;;582        break;
;;;583    
;;;584        default:
;;;585        break;
;;;586      }
;;;587    
;;;588      /* Enable the TIM Break interrupt */
;;;589      __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
00003a  6802              LDR      r2,[r0,#0]
00003c  68d4              LDR      r4,[r2,#0xc]
00003e  2580              MOVS     r5,#0x80
000040  432c              ORRS     r4,r4,r5
000042  60d4              STR      r4,[r2,#0xc]
000044  6802              LDR      r2,[r0,#0]
000046  408b              LSLS     r3,r3,r1
000048  6a11              LDR      r1,[r2,#0x20]
00004a  4399              BICS     r1,r1,r3
00004c  6211              STR      r1,[r2,#0x20]
00004e  6a11              LDR      r1,[r2,#0x20]
000050  4319              ORRS     r1,r1,r3
000052  6211              STR      r1,[r2,#0x20]
;;;590    
;;;591         /* Enable the Capture compare channel N */
;;;592         TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;593    
;;;594      /* Enable the Main Ouput */
;;;595        __HAL_TIM_MOE_ENABLE(htim);
000054  6801              LDR      r1,[r0,#0]
000056  6c4a              LDR      r2,[r1,#0x44]
000058  022b              LSLS     r3,r5,#8
00005a  431a              ORRS     r2,r2,r3
00005c  644a              STR      r2,[r1,#0x44]
;;;596    
;;;597      /* Enable the Peripheral */
;;;598      __HAL_TIM_ENABLE(htim);
00005e  6800              LDR      r0,[r0,#0]
000060  6801              LDR      r1,[r0,#0]
000062  2201              MOVS     r2,#1
000064  4311              ORRS     r1,r1,r2
000066  6001              STR      r1,[r0,#0]
;;;599    
;;;600      /* Return function status */
;;;601      return HAL_OK;
;;;602    }
000068  bc30              POP      {r4,r5}
00006a  2000              MOVS     r0,#0                 ;601
00006c  4770              BX       lr
;;;603    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OCN_Stop PROC
;;;518      */
;;;519    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b430              PUSH     {r4,r5}
000002  6802              LDR      r2,[r0,#0]
;;;520    {
;;;521      /* Check the parameters */
;;;522      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;523    
;;;524        /* Disable the Capture compare channel N */
;;;525      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000004  2400              MOVS     r4,#0
000006  2304              MOVS     r3,#4
000008  6a15              LDR      r5,[r2,#0x20]
00000a  408b              LSLS     r3,r3,r1
00000c  439d              BICS     r5,r5,r3
00000e  6215              STR      r5,[r2,#0x20]
000010  6a13              LDR      r3,[r2,#0x20]
000012  408c              LSLS     r4,r4,r1
000014  4323              ORRS     r3,r3,r4
000016  6213              STR      r3,[r2,#0x20]
;;;526    
;;;527      /* Disable the Main Ouput */
;;;528        __HAL_TIM_MOE_DISABLE(htim);
000018  6801              LDR      r1,[r0,#0]
00001a  6a0c              LDR      r4,[r1,#0x20]
00001c  4a0c              LDR      r2,|L22.80|
00001e  4b0d              LDR      r3,|L22.84|
000020  4214              TST      r4,r2
000022  d107              BNE      |L22.52|
000024  6a0c              LDR      r4,[r1,#0x20]
000026  421c              TST      r4,r3
000028  d104              BNE      |L22.52|
00002a  6c4c              LDR      r4,[r1,#0x44]
00002c  2501              MOVS     r5,#1
00002e  03ed              LSLS     r5,r5,#15
000030  43ac              BICS     r4,r4,r5
000032  644c              STR      r4,[r1,#0x44]
                  |L22.52|
;;;529    
;;;530      /* Disable the Peripheral */
;;;531      __HAL_TIM_DISABLE(htim);
000034  6800              LDR      r0,[r0,#0]
000036  6a01              LDR      r1,[r0,#0x20]
000038  4211              TST      r1,r2
00003a  d106              BNE      |L22.74|
00003c  6a01              LDR      r1,[r0,#0x20]
00003e  4219              TST      r1,r3
000040  d103              BNE      |L22.74|
000042  6801              LDR      r1,[r0,#0]
000044  0849              LSRS     r1,r1,#1
000046  0049              LSLS     r1,r1,#1
000048  6001              STR      r1,[r0,#0]
                  |L22.74|
;;;532    
;;;533      /* Return function status */
;;;534      return HAL_OK;
;;;535    }
00004a  bc30              POP      {r4,r5}
00004c  2000              MOVS     r0,#0                 ;534
00004e  4770              BX       lr
;;;536    
                          ENDP

                  |L22.80|
                          DCD      0x00001111
                  |L22.84|
                          DCD      0x00000444

                          AREA ||i.HAL_TIMEx_OCN_Stop_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OCN_Stop_DMA PROC
;;;805      */
;;;806    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b430              PUSH     {r4,r5}
;;;807    {
;;;808      /* Check the parameters */
;;;809      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;810    
;;;811      switch (Channel)
000002  6802              LDR      r2,[r0,#0]
000004  2900              CMP      r1,#0
000006  d006              BEQ      |L23.22|
000008  2904              CMP      r1,#4
00000a  d00a              BEQ      |L23.34|
00000c  2908              CMP      r1,#8
00000e  d00e              BEQ      |L23.46|
000010  290c              CMP      r1,#0xc
000012  d117              BNE      |L23.68|
000014  e011              B        |L23.58|
                  |L23.22|
;;;812      {
;;;813        case TIM_CHANNEL_1:
;;;814        {
;;;815          /* Disable the TIM Output Compare DMA request */
;;;816          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000016  68d3              LDR      r3,[r2,#0xc]
000018  2401              MOVS     r4,#1
00001a  0264              LSLS     r4,r4,#9
00001c  43a3              BICS     r3,r3,r4
00001e  60d3              STR      r3,[r2,#0xc]
;;;817        }
;;;818        break;
000020  e010              B        |L23.68|
                  |L23.34|
;;;819    
;;;820        case TIM_CHANNEL_2:
;;;821        {
;;;822          /* Disable the TIM Output Compare DMA request */
;;;823          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000022  68d3              LDR      r3,[r2,#0xc]
000024  2401              MOVS     r4,#1
000026  02a4              LSLS     r4,r4,#10
000028  43a3              BICS     r3,r3,r4
00002a  60d3              STR      r3,[r2,#0xc]
;;;824        }
;;;825        break;
00002c  e00a              B        |L23.68|
                  |L23.46|
;;;826    
;;;827        case TIM_CHANNEL_3:
;;;828        {
;;;829          /* Disable the TIM Output Compare DMA request */
;;;830          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
00002e  68d3              LDR      r3,[r2,#0xc]
000030  2401              MOVS     r4,#1
000032  02e4              LSLS     r4,r4,#11
000034  43a3              BICS     r3,r3,r4
000036  60d3              STR      r3,[r2,#0xc]
;;;831        }
;;;832        break;
000038  e004              B        |L23.68|
                  |L23.58|
;;;833    
;;;834        case TIM_CHANNEL_4:
;;;835        {
;;;836          /* Disable the TIM Output Compare interrupt */
;;;837          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
00003a  68d3              LDR      r3,[r2,#0xc]
00003c  2401              MOVS     r4,#1
00003e  0324              LSLS     r4,r4,#12
000040  43a3              BICS     r3,r3,r4
000042  60d3              STR      r3,[r2,#0xc]
                  |L23.68|
000044  6802              LDR      r2,[r0,#0]
;;;838        }
;;;839        break;
;;;840    
;;;841        default:
;;;842        break;
;;;843      }
;;;844    
;;;845      /* Disable the Capture compare channel N */
;;;846      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000046  2400              MOVS     r4,#0
000048  2304              MOVS     r3,#4
00004a  6a15              LDR      r5,[r2,#0x20]
00004c  408b              LSLS     r3,r3,r1
00004e  439d              BICS     r5,r5,r3
000050  6215              STR      r5,[r2,#0x20]
000052  6a13              LDR      r3,[r2,#0x20]
000054  408c              LSLS     r4,r4,r1
000056  4323              ORRS     r3,r3,r4
000058  6213              STR      r3,[r2,#0x20]
;;;847    
;;;848      /* Disable the Main Ouput */
;;;849      __HAL_TIM_MOE_DISABLE(htim);
00005a  6801              LDR      r1,[r0,#0]
00005c  6a0c              LDR      r4,[r1,#0x20]
00005e  4b0e              LDR      r3,|L23.152|
000060  4a0e              LDR      r2,|L23.156|
000062  421c              TST      r4,r3
000064  d107              BNE      |L23.118|
000066  6a0c              LDR      r4,[r1,#0x20]
000068  4214              TST      r4,r2
00006a  d104              BNE      |L23.118|
00006c  6c4c              LDR      r4,[r1,#0x44]
00006e  2501              MOVS     r5,#1
000070  03ed              LSLS     r5,r5,#15
000072  43ac              BICS     r4,r4,r5
000074  644c              STR      r4,[r1,#0x44]
                  |L23.118|
;;;850    
;;;851      /* Disable the Peripheral */
;;;852      __HAL_TIM_DISABLE(htim);
000076  6801              LDR      r1,[r0,#0]
000078  6a0c              LDR      r4,[r1,#0x20]
00007a  421c              TST      r4,r3
00007c  d106              BNE      |L23.140|
00007e  6a0b              LDR      r3,[r1,#0x20]
000080  4213              TST      r3,r2
000082  d103              BNE      |L23.140|
000084  680a              LDR      r2,[r1,#0]
000086  0852              LSRS     r2,r2,#1
000088  0052              LSLS     r2,r2,#1
00008a  600a              STR      r2,[r1,#0]
                  |L23.140|
;;;853    
;;;854      /* Change the htim state */
;;;855      htim->State = HAL_TIM_STATE_READY;
00008c  2101              MOVS     r1,#1
00008e  6401              STR      r1,[r0,#0x40]
;;;856    
;;;857      /* Return function status */
;;;858      return HAL_OK;
;;;859    }
000090  bc30              POP      {r4,r5}
000092  2000              MOVS     r0,#0                 ;858
000094  4770              BX       lr
;;;860    
                          ENDP

000096  0000              DCW      0x0000
                  |L23.152|
                          DCD      0x00001111
                  |L23.156|
                          DCD      0x00000444

                          AREA ||i.HAL_TIMEx_OCN_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OCN_Stop_IT PROC
;;;615      */
;;;616    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b430              PUSH     {r4,r5}
;;;617    {
000002  2304              MOVS     r3,#4
;;;618      uint32_t tmpccer = 0U;
;;;619    
;;;620      /* Check the parameters */
;;;621      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;622    
;;;623      switch (Channel)
000004  6802              LDR      r2,[r0,#0]
000006  2900              CMP      r1,#0
000008  d006              BEQ      |L24.24|
00000a  2904              CMP      r1,#4
00000c  d008              BEQ      |L24.32|
00000e  2908              CMP      r1,#8
000010  d00a              BEQ      |L24.40|
000012  290c              CMP      r1,#0xc
000014  d111              BNE      |L24.58|
000016  e00c              B        |L24.50|
                  |L24.24|
;;;624      {
;;;625        case TIM_CHANNEL_1:
;;;626        {
;;;627          /* Disable the TIM Output Compare interrupt */
;;;628          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000018  68d4              LDR      r4,[r2,#0xc]
00001a  2502              MOVS     r5,#2
00001c  43ac              BICS     r4,r4,r5
;;;629        }
;;;630        break;
00001e  e001              B        |L24.36|
                  |L24.32|
;;;631    
;;;632        case TIM_CHANNEL_2:
;;;633        {
;;;634          /* Disable the TIM Output Compare interrupt */
;;;635          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000020  68d4              LDR      r4,[r2,#0xc]
000022  439c              BICS     r4,r4,r3
                  |L24.36|
000024  60d4              STR      r4,[r2,#0xc]          ;628
000026  e008              B        |L24.58|
                  |L24.40|
;;;636        }
;;;637        break;
;;;638    
;;;639        case TIM_CHANNEL_3:
;;;640        {
;;;641          /* Disable the TIM Output Compare interrupt */
;;;642          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000028  68d4              LDR      r4,[r2,#0xc]
00002a  2508              MOVS     r5,#8
00002c  43ac              BICS     r4,r4,r5
00002e  60d4              STR      r4,[r2,#0xc]
;;;643        }
;;;644        break;
000030  e003              B        |L24.58|
                  |L24.50|
;;;645    
;;;646        case TIM_CHANNEL_4:
;;;647        {
;;;648          /* Disable the TIM Output Compare interrupt */
;;;649          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
000032  68d4              LDR      r4,[r2,#0xc]
000034  2510              MOVS     r5,#0x10
000036  43ac              BICS     r4,r4,r5
000038  60d4              STR      r4,[r2,#0xc]
                  |L24.58|
00003a  6802              LDR      r2,[r0,#0]
;;;650        }
;;;651        break;
;;;652    
;;;653        default:
;;;654        break;
;;;655      }
;;;656    
;;;657         /* Disable the Capture compare channel N */
;;;658         TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
00003c  2400              MOVS     r4,#0
00003e  6a15              LDR      r5,[r2,#0x20]
000040  408b              LSLS     r3,r3,r1
000042  439d              BICS     r5,r5,r3
000044  6215              STR      r5,[r2,#0x20]
000046  6a13              LDR      r3,[r2,#0x20]
000048  408c              LSLS     r4,r4,r1
00004a  4323              ORRS     r3,r3,r4
00004c  6213              STR      r3,[r2,#0x20]
;;;659    
;;;660      /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;661      tmpccer = htim->Instance->CCER;
00004e  6803              LDR      r3,[r0,#0]
000050  6a19              LDR      r1,[r3,#0x20]
;;;662      if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
000052  4a11              LDR      r2,|L24.152|
000054  4211              TST      r1,r2
000056  d103              BNE      |L24.96|
;;;663      {
;;;664        __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
000058  68d9              LDR      r1,[r3,#0xc]
00005a  2480              MOVS     r4,#0x80
00005c  43a1              BICS     r1,r1,r4
00005e  60d9              STR      r1,[r3,#0xc]
                  |L24.96|
;;;665      }
;;;666    
;;;667      /* Disable the Main Ouput */
;;;668        __HAL_TIM_MOE_DISABLE(htim);
000060  6801              LDR      r1,[r0,#0]
000062  6a0c              LDR      r4,[r1,#0x20]
000064  4b0d              LDR      r3,|L24.156|
000066  421c              TST      r4,r3
000068  d107              BNE      |L24.122|
00006a  6a0c              LDR      r4,[r1,#0x20]
00006c  4214              TST      r4,r2
00006e  d104              BNE      |L24.122|
000070  6c4c              LDR      r4,[r1,#0x44]
000072  2501              MOVS     r5,#1
000074  03ed              LSLS     r5,r5,#15
000076  43ac              BICS     r4,r4,r5
000078  644c              STR      r4,[r1,#0x44]
                  |L24.122|
;;;669    
;;;670      /* Disable the Peripheral */
;;;671      __HAL_TIM_DISABLE(htim);
00007a  6800              LDR      r0,[r0,#0]
00007c  6a01              LDR      r1,[r0,#0x20]
00007e  4219              TST      r1,r3
000080  d106              BNE      |L24.144|
000082  6a01              LDR      r1,[r0,#0x20]
000084  4211              TST      r1,r2
000086  d103              BNE      |L24.144|
000088  6801              LDR      r1,[r0,#0]
00008a  0849              LSRS     r1,r1,#1
00008c  0049              LSLS     r1,r1,#1
00008e  6001              STR      r1,[r0,#0]
                  |L24.144|
;;;672    
;;;673      /* Return function status */
;;;674      return HAL_OK;
;;;675    }
000090  bc30              POP      {r4,r5}
000092  2000              MOVS     r0,#0                 ;674
000094  4770              BX       lr
;;;676    
                          ENDP

000096  0000              DCW      0x0000
                  |L24.152|
                          DCD      0x00000444
                  |L24.156|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_OnePulseN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start PROC
;;;1308     */
;;;1309   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  2204              MOVS     r2,#4
000002  6803              LDR      r3,[r0,#0]
000004  408a              LSLS     r2,r2,r1
000006  6a19              LDR      r1,[r3,#0x20]
000008  4391              BICS     r1,r1,r2
00000a  6219              STR      r1,[r3,#0x20]
00000c  6a19              LDR      r1,[r3,#0x20]
00000e  4311              ORRS     r1,r1,r2
000010  6219              STR      r1,[r3,#0x20]
;;;1310     {
;;;1311     /* Check the parameters */
;;;1312     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));
;;;1313   
;;;1314     /* Enable the complementary One Pulse output */
;;;1315     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
;;;1316   
;;;1317     /* Enable the Main Ouput */
;;;1318     __HAL_TIM_MOE_ENABLE(htim);
000012  6800              LDR      r0,[r0,#0]
000014  6c41              LDR      r1,[r0,#0x44]
000016  2201              MOVS     r2,#1
000018  03d2              LSLS     r2,r2,#15
00001a  4311              ORRS     r1,r1,r2
00001c  6441              STR      r1,[r0,#0x44]
;;;1319   
;;;1320     /* Return function status */
;;;1321     return HAL_OK;
00001e  2000              MOVS     r0,#0
;;;1322   }
000020  4770              BX       lr
;;;1323   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start_IT PROC
;;;1362     */
;;;1363   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b410              PUSH     {r4}
;;;1364   {
;;;1365     /* Check the parameters */
;;;1366     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));
;;;1367   
;;;1368     /* Enable the TIM Capture/Compare 1 interrupt */
;;;1369     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000002  6802              LDR      r2,[r0,#0]
000004  68d3              LDR      r3,[r2,#0xc]
000006  2402              MOVS     r4,#2
000008  4323              ORRS     r3,r3,r4
00000a  60d3              STR      r3,[r2,#0xc]
;;;1370   
;;;1371     /* Enable the TIM Capture/Compare 2 interrupt */
;;;1372     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
00000c  6803              LDR      r3,[r0,#0]
00000e  68dc              LDR      r4,[r3,#0xc]
000010  2204              MOVS     r2,#4
000012  4314              ORRS     r4,r4,r2
000014  60dc              STR      r4,[r3,#0xc]
000016  6803              LDR      r3,[r0,#0]
000018  408a              LSLS     r2,r2,r1
00001a  6a19              LDR      r1,[r3,#0x20]
00001c  4391              BICS     r1,r1,r2
00001e  6219              STR      r1,[r3,#0x20]
000020  6a19              LDR      r1,[r3,#0x20]
000022  4311              ORRS     r1,r1,r2
000024  6219              STR      r1,[r3,#0x20]
;;;1373   
;;;1374     /* Enable the complementary One Pulse output */
;;;1375     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
;;;1376   
;;;1377     /* Enable the Main Ouput */
;;;1378     __HAL_TIM_MOE_ENABLE(htim);
000026  6800              LDR      r0,[r0,#0]
000028  6c41              LDR      r1,[r0,#0x44]
00002a  2201              MOVS     r2,#1
00002c  03d2              LSLS     r2,r2,#15
00002e  4311              ORRS     r1,r1,r2
000030  6441              STR      r1,[r0,#0x44]
;;;1379   
;;;1380     /* Return function status */
;;;1381     return HAL_OK;
;;;1382     }
000032  bc10              POP      {r4}
000034  2000              MOVS     r0,#0                 ;1381
000036  4770              BX       lr
;;;1383   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Stop||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OnePulseN_Stop PROC
;;;1333     */
;;;1334   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b430              PUSH     {r4,r5}
000002  6802              LDR      r2,[r0,#0]
;;;1335   {
;;;1336   
;;;1337     /* Check the parameters */
;;;1338     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));
;;;1339   
;;;1340     /* Disable the complementary One Pulse output */
;;;1341       TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
000004  2400              MOVS     r4,#0
000006  2304              MOVS     r3,#4
000008  6a15              LDR      r5,[r2,#0x20]
00000a  408b              LSLS     r3,r3,r1
00000c  439d              BICS     r5,r5,r3
00000e  6215              STR      r5,[r2,#0x20]
000010  6a13              LDR      r3,[r2,#0x20]
000012  408c              LSLS     r4,r4,r1
000014  4323              ORRS     r3,r3,r4
000016  6213              STR      r3,[r2,#0x20]
;;;1342   
;;;1343     /* Disable the Main Ouput */
;;;1344       __HAL_TIM_MOE_DISABLE(htim);
000018  6801              LDR      r1,[r0,#0]
00001a  6a0c              LDR      r4,[r1,#0x20]
00001c  4a0c              LDR      r2,|L27.80|
00001e  4b0d              LDR      r3,|L27.84|
000020  4214              TST      r4,r2
000022  d107              BNE      |L27.52|
000024  6a0c              LDR      r4,[r1,#0x20]
000026  421c              TST      r4,r3
000028  d104              BNE      |L27.52|
00002a  6c4c              LDR      r4,[r1,#0x44]
00002c  2501              MOVS     r5,#1
00002e  03ed              LSLS     r5,r5,#15
000030  43ac              BICS     r4,r4,r5
000032  644c              STR      r4,[r1,#0x44]
                  |L27.52|
;;;1345   
;;;1346     /* Disable the Peripheral */
;;;1347     __HAL_TIM_DISABLE(htim);
000034  6800              LDR      r0,[r0,#0]
000036  6a01              LDR      r1,[r0,#0x20]
000038  4211              TST      r1,r2
00003a  d106              BNE      |L27.74|
00003c  6a01              LDR      r1,[r0,#0x20]
00003e  4219              TST      r1,r3
000040  d103              BNE      |L27.74|
000042  6801              LDR      r1,[r0,#0]
000044  0849              LSRS     r1,r1,#1
000046  0049              LSLS     r1,r1,#1
000048  6001              STR      r1,[r0,#0]
                  |L27.74|
;;;1348   
;;;1349     /* Return function status */
;;;1350     return HAL_OK;
;;;1351   }
00004a  bc30              POP      {r4,r5}
00004c  2000              MOVS     r0,#0                 ;1350
00004e  4770              BX       lr
;;;1352   
                          ENDP

                  |L27.80|
                          DCD      0x00001111
                  |L27.84|
                          DCD      0x00000444

                          AREA ||i.HAL_TIMEx_OnePulseN_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OnePulseN_Stop_IT PROC
;;;1393     */
;;;1394   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b430              PUSH     {r4,r5}
;;;1395   {
;;;1396     /* Check the parameters */
;;;1397     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));
;;;1398   
;;;1399     /* Disable the TIM Capture/Compare 1 interrupt */
;;;1400     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000002  6802              LDR      r2,[r0,#0]
000004  68d3              LDR      r3,[r2,#0xc]
000006  2402              MOVS     r4,#2
000008  43a3              BICS     r3,r3,r4
00000a  60d3              STR      r3,[r2,#0xc]
;;;1401   
;;;1402     /* Disable the TIM Capture/Compare 2 interrupt */
;;;1403     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
00000c  6802              LDR      r2,[r0,#0]
00000e  68d4              LDR      r4,[r2,#0xc]
000010  2304              MOVS     r3,#4
000012  439c              BICS     r4,r4,r3
000014  60d4              STR      r4,[r2,#0xc]
000016  6802              LDR      r2,[r0,#0]
;;;1404   
;;;1405     /* Disable the complementary One Pulse output */
;;;1406     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
000018  2400              MOVS     r4,#0
00001a  6a15              LDR      r5,[r2,#0x20]
00001c  408b              LSLS     r3,r3,r1
00001e  439d              BICS     r5,r5,r3
000020  6215              STR      r5,[r2,#0x20]
000022  6a13              LDR      r3,[r2,#0x20]
000024  408c              LSLS     r4,r4,r1
000026  4323              ORRS     r3,r3,r4
000028  6213              STR      r3,[r2,#0x20]
;;;1407   
;;;1408     /* Disable the Main Ouput */
;;;1409     __HAL_TIM_MOE_DISABLE(htim);
00002a  6801              LDR      r1,[r0,#0]
00002c  6a0c              LDR      r4,[r1,#0x20]
00002e  4a0d              LDR      r2,|L28.100|
000030  4b0d              LDR      r3,|L28.104|
000032  4214              TST      r4,r2
000034  d107              BNE      |L28.70|
000036  6a0c              LDR      r4,[r1,#0x20]
000038  421c              TST      r4,r3
00003a  d104              BNE      |L28.70|
00003c  6c4c              LDR      r4,[r1,#0x44]
00003e  2501              MOVS     r5,#1
000040  03ed              LSLS     r5,r5,#15
000042  43ac              BICS     r4,r4,r5
000044  644c              STR      r4,[r1,#0x44]
                  |L28.70|
;;;1410   
;;;1411     /* Disable the Peripheral */
;;;1412      __HAL_TIM_DISABLE(htim);
000046  6800              LDR      r0,[r0,#0]
000048  6a01              LDR      r1,[r0,#0x20]
00004a  4211              TST      r1,r2
00004c  d106              BNE      |L28.92|
00004e  6a01              LDR      r1,[r0,#0x20]
000050  4219              TST      r1,r3
000052  d103              BNE      |L28.92|
000054  6801              LDR      r1,[r0,#0]
000056  0849              LSRS     r1,r1,#1
000058  0049              LSLS     r1,r1,#1
00005a  6001              STR      r1,[r0,#0]
                  |L28.92|
;;;1413   
;;;1414     /* Return function status */
;;;1415     return HAL_OK;
;;;1416   }
00005c  bc30              POP      {r4,r5}
00005e  2000              MOVS     r0,#0                 ;1415
000060  4770              BX       lr
;;;1417   
                          ENDP

000062  0000              DCW      0x0000
                  |L28.100|
                          DCD      0x00001111
                  |L28.104|
                          DCD      0x00000444

                          AREA ||i.HAL_TIMEx_PWMN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Start PROC
;;;905      */
;;;906    HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  2204              MOVS     r2,#4
000002  6803              LDR      r3,[r0,#0]
000004  408a              LSLS     r2,r2,r1
000006  6a19              LDR      r1,[r3,#0x20]
000008  4391              BICS     r1,r1,r2
00000a  6219              STR      r1,[r3,#0x20]
00000c  6a19              LDR      r1,[r3,#0x20]
00000e  4311              ORRS     r1,r1,r2
000010  6219              STR      r1,[r3,#0x20]
;;;907    {
;;;908      /* Check the parameters */
;;;909      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;910    
;;;911      /* Enable the complementary PWM output  */
;;;912      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;913    
;;;914      /* Enable the Main Ouput */
;;;915      __HAL_TIM_MOE_ENABLE(htim);
000012  6801              LDR      r1,[r0,#0]
000014  6c4a              LDR      r2,[r1,#0x44]
000016  2301              MOVS     r3,#1
000018  03db              LSLS     r3,r3,#15
00001a  431a              ORRS     r2,r2,r3
00001c  644a              STR      r2,[r1,#0x44]
;;;916    
;;;917      /* Enable the Peripheral */
;;;918      __HAL_TIM_ENABLE(htim);
00001e  6800              LDR      r0,[r0,#0]
000020  6801              LDR      r1,[r0,#0]
000022  2201              MOVS     r2,#1
000024  4311              ORRS     r1,r1,r2
000026  6001              STR      r1,[r0,#0]
;;;919    
;;;920      /* Return function status */
;;;921      return HAL_OK;
000028  2000              MOVS     r0,#0
;;;922    }
00002a  4770              BX       lr
;;;923    
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_PWMN_Start_DMA PROC
;;;1106     */
;;;1107   HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;1108   {
000002  4604              MOV      r4,r0
;;;1109     /* Check the parameters */
;;;1110     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;1111   
;;;1112     if((htim->State == HAL_TIM_STATE_BUSY))
000004  6c00              LDR      r0,[r0,#0x40]
000006  4616              MOV      r6,r2                 ;1108
000008  460d              MOV      r5,r1                 ;1108
00000a  2802              CMP      r0,#2
00000c  d006              BEQ      |L30.28|
;;;1113     {
;;;1114        return HAL_BUSY;
;;;1115     }
;;;1116     else if((htim->State == HAL_TIM_STATE_READY))
00000e  6c20              LDR      r0,[r4,#0x40]
000010  2801              CMP      r0,#1
000012  d106              BNE      |L30.34|
;;;1117     {
;;;1118       if(((uint32_t)pData == 0U ) && (Length > 0U))
000014  2e00              CMP      r6,#0
000016  d102              BNE      |L30.30|
000018  2b00              CMP      r3,#0
00001a  d000              BEQ      |L30.30|
                  |L30.28|
;;;1119       {
;;;1120         return HAL_ERROR;
;;;1121       }
;;;1122       else
;;;1123       {
;;;1124         htim->State = HAL_TIM_STATE_BUSY;
;;;1125       }
;;;1126     }
;;;1127     switch (Channel)
;;;1128     {
;;;1129       case TIM_CHANNEL_1:
;;;1130       {
;;;1131         /* Set the DMA Period elapsed callback */
;;;1132         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1133   
;;;1134         /* Set the DMA error callback */
;;;1135         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;1136   
;;;1137         /* Enable the DMA channel */
;;;1138         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;1139   
;;;1140         /* Enable the TIM Capture/Compare 1 DMA request */
;;;1141         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;1142       }
;;;1143       break;
;;;1144   
;;;1145       case TIM_CHANNEL_2:
;;;1146       {
;;;1147         /* Set the DMA Period elapsed callback */
;;;1148         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1149   
;;;1150         /* Set the DMA error callback */
;;;1151         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;1152   
;;;1153         /* Enable the DMA channel */
;;;1154         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;1155   
;;;1156         /* Enable the TIM Capture/Compare 2 DMA request */
;;;1157         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;1158       }
;;;1159       break;
;;;1160   
;;;1161       case TIM_CHANNEL_3:
;;;1162       {
;;;1163         /* Set the DMA Period elapsed callback */
;;;1164         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1165   
;;;1166         /* Set the DMA error callback */
;;;1167         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;1168   
;;;1169         /* Enable the DMA channel */
;;;1170         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;1171   
;;;1172         /* Enable the TIM Capture/Compare 3 DMA request */
;;;1173         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;1174       }
;;;1175       break;
;;;1176   
;;;1177       case TIM_CHANNEL_4:
;;;1178       {
;;;1179        /* Set the DMA Period elapsed callback */
;;;1180         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1181   
;;;1182         /* Set the DMA error callback */
;;;1183         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;1184   
;;;1185         /* Enable the DMA channel */
;;;1186         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;1187   
;;;1188         /* Enable the TIM Capture/Compare 4 DMA request */
;;;1189         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;1190       }
;;;1191       break;
;;;1192   
;;;1193       default:
;;;1194       break;
;;;1195     }
;;;1196   
;;;1197     /* Enable the complementary PWM output  */
;;;1198        TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;1199   
;;;1200     /* Enable the Main Ouput */
;;;1201       __HAL_TIM_MOE_ENABLE(htim);
;;;1202   
;;;1203     /* Enable the Peripheral */
;;;1204     __HAL_TIM_ENABLE(htim);
;;;1205   
;;;1206     /* Return function status */
;;;1207     return HAL_OK;
;;;1208   }
00001c  bd70              POP      {r4-r6,pc}
                  |L30.30|
00001e  2002              MOVS     r0,#2                 ;1124
000020  6420              STR      r0,[r4,#0x40]         ;1124
                  |L30.34|
000022  4832              LDR      r0,|L30.236|
000024  4932              LDR      r1,|L30.240|
000026  2d00              CMP      r5,#0                 ;1127
000028  d006              BEQ      |L30.56|
00002a  2d04              CMP      r5,#4                 ;1127
00002c  d015              BEQ      |L30.90|
00002e  2d08              CMP      r5,#8                 ;1127
000030  d024              BEQ      |L30.124|
000032  2d0c              CMP      r5,#0xc               ;1127
000034  d143              BNE      |L30.190|
000036  e032              B        |L30.158|
                  |L30.56|
000038  6a62              LDR      r2,[r4,#0x24]         ;1132
00003a  62d0              STR      r0,[r2,#0x2c]         ;1135
00003c  6a60              LDR      r0,[r4,#0x24]         ;1135
00003e  6341              STR      r1,[r0,#0x34]         ;1138
000040  6822              LDR      r2,[r4,#0]            ;1138
000042  4631              MOV      r1,r6                 ;1138
000044  3234              ADDS     r2,r2,#0x34           ;1138
000046  6a60              LDR      r0,[r4,#0x24]         ;1138
000048  f7fffffe          BL       HAL_DMA_Start_IT
00004c  6820              LDR      r0,[r4,#0]            ;1141
00004e  68c1              LDR      r1,[r0,#0xc]          ;1141
000050  2201              MOVS     r2,#1                 ;1141
000052  0252              LSLS     r2,r2,#9              ;1141
000054  4311              ORRS     r1,r1,r2              ;1141
000056  60c1              STR      r1,[r0,#0xc]          ;1141
000058  e031              B        |L30.190|
                  |L30.90|
00005a  6aa2              LDR      r2,[r4,#0x28]         ;1148
00005c  62d0              STR      r0,[r2,#0x2c]         ;1151
00005e  6aa0              LDR      r0,[r4,#0x28]         ;1151
000060  6341              STR      r1,[r0,#0x34]         ;1154
000062  6822              LDR      r2,[r4,#0]            ;1154
000064  4631              MOV      r1,r6                 ;1154
000066  3238              ADDS     r2,r2,#0x38           ;1154
000068  6aa0              LDR      r0,[r4,#0x28]         ;1154
00006a  f7fffffe          BL       HAL_DMA_Start_IT
00006e  6820              LDR      r0,[r4,#0]            ;1157
000070  68c1              LDR      r1,[r0,#0xc]          ;1157
000072  2201              MOVS     r2,#1                 ;1157
000074  0292              LSLS     r2,r2,#10             ;1157
000076  4311              ORRS     r1,r1,r2              ;1157
000078  60c1              STR      r1,[r0,#0xc]          ;1157
00007a  e020              B        |L30.190|
                  |L30.124|
00007c  6ae2              LDR      r2,[r4,#0x2c]         ;1164
00007e  62d0              STR      r0,[r2,#0x2c]         ;1167
000080  6ae0              LDR      r0,[r4,#0x2c]         ;1167
000082  6341              STR      r1,[r0,#0x34]         ;1170
000084  6822              LDR      r2,[r4,#0]            ;1170
000086  4631              MOV      r1,r6                 ;1170
000088  323c              ADDS     r2,r2,#0x3c           ;1170
00008a  6ae0              LDR      r0,[r4,#0x2c]         ;1170
00008c  f7fffffe          BL       HAL_DMA_Start_IT
000090  6820              LDR      r0,[r4,#0]            ;1173
000092  68c1              LDR      r1,[r0,#0xc]          ;1173
000094  2201              MOVS     r2,#1                 ;1173
000096  02d2              LSLS     r2,r2,#11             ;1173
000098  4311              ORRS     r1,r1,r2              ;1173
00009a  60c1              STR      r1,[r0,#0xc]          ;1173
00009c  e00f              B        |L30.190|
                  |L30.158|
00009e  6b22              LDR      r2,[r4,#0x30]         ;1180
0000a0  62d0              STR      r0,[r2,#0x2c]         ;1183
0000a2  6b20              LDR      r0,[r4,#0x30]         ;1183
0000a4  6341              STR      r1,[r0,#0x34]         ;1186
0000a6  6822              LDR      r2,[r4,#0]            ;1186
0000a8  4631              MOV      r1,r6                 ;1186
0000aa  3240              ADDS     r2,r2,#0x40           ;1186
0000ac  6b20              LDR      r0,[r4,#0x30]         ;1186
0000ae  f7fffffe          BL       HAL_DMA_Start_IT
0000b2  6820              LDR      r0,[r4,#0]            ;1189
0000b4  68c1              LDR      r1,[r0,#0xc]          ;1189
0000b6  2201              MOVS     r2,#1                 ;1189
0000b8  0312              LSLS     r2,r2,#12             ;1189
0000ba  4311              ORRS     r1,r1,r2              ;1189
0000bc  60c1              STR      r1,[r0,#0xc]          ;1189
                  |L30.190|
0000be  6821              LDR      r1,[r4,#0]            ;1189
0000c0  2004              MOVS     r0,#4                 ;1189
0000c2  6a0a              LDR      r2,[r1,#0x20]         ;1189
0000c4  40a8              LSLS     r0,r0,r5              ;1189
0000c6  4382              BICS     r2,r2,r0              ;1189
0000c8  620a              STR      r2,[r1,#0x20]         ;1189
0000ca  6a0a              LDR      r2,[r1,#0x20]         ;1189
0000cc  4302              ORRS     r2,r2,r0              ;1189
0000ce  620a              STR      r2,[r1,#0x20]         ;1189
0000d0  6820              LDR      r0,[r4,#0]            ;1201
0000d2  6c41              LDR      r1,[r0,#0x44]         ;1201
0000d4  2201              MOVS     r2,#1                 ;1201
0000d6  03d2              LSLS     r2,r2,#15             ;1201
0000d8  4311              ORRS     r1,r1,r2              ;1201
0000da  6441              STR      r1,[r0,#0x44]         ;1201
0000dc  6820              LDR      r0,[r4,#0]            ;1204
0000de  6801              LDR      r1,[r0,#0]            ;1204
0000e0  2201              MOVS     r2,#1                 ;1204
0000e2  4311              ORRS     r1,r1,r2              ;1204
0000e4  6001              STR      r1,[r0,#0]            ;1204
0000e6  2000              MOVS     r0,#0                 ;1207
0000e8  bd70              POP      {r4-r6,pc}
;;;1209   
                          ENDP

0000ea  0000              DCW      0x0000
                  |L30.236|
                          DCD      TIM_DMADelayPulseCplt
                  |L30.240|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_PWMN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Start_IT PROC
;;;964      */
;;;965    HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b430              PUSH     {r4,r5}
;;;966    {
000002  2304              MOVS     r3,#4
;;;967      /* Check the parameters */
;;;968      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;969    
;;;970      switch (Channel)
000004  6802              LDR      r2,[r0,#0]
000006  2900              CMP      r1,#0
000008  d006              BEQ      |L31.24|
00000a  2904              CMP      r1,#4
00000c  d008              BEQ      |L31.32|
00000e  2908              CMP      r1,#8
000010  d00a              BEQ      |L31.40|
000012  290c              CMP      r1,#0xc
000014  d111              BNE      |L31.58|
000016  e00c              B        |L31.50|
                  |L31.24|
;;;971      {
;;;972        case TIM_CHANNEL_1:
;;;973        {
;;;974          /* Enable the TIM Capture/Compare 1 interrupt */
;;;975          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000018  68d4              LDR      r4,[r2,#0xc]
00001a  2502              MOVS     r5,#2
00001c  432c              ORRS     r4,r4,r5
;;;976        }
;;;977        break;
00001e  e001              B        |L31.36|
                  |L31.32|
;;;978    
;;;979        case TIM_CHANNEL_2:
;;;980        {
;;;981          /* Enable the TIM Capture/Compare 2 interrupt */
;;;982          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000020  68d4              LDR      r4,[r2,#0xc]
000022  431c              ORRS     r4,r4,r3
                  |L31.36|
000024  60d4              STR      r4,[r2,#0xc]          ;975
000026  e008              B        |L31.58|
                  |L31.40|
;;;983        }
;;;984        break;
;;;985    
;;;986        case TIM_CHANNEL_3:
;;;987        {
;;;988          /* Enable the TIM Capture/Compare 3 interrupt */
;;;989          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
000028  68d4              LDR      r4,[r2,#0xc]
00002a  2508              MOVS     r5,#8
00002c  432c              ORRS     r4,r4,r5
00002e  60d4              STR      r4,[r2,#0xc]
;;;990        }
;;;991        break;
000030  e003              B        |L31.58|
                  |L31.50|
;;;992    
;;;993        case TIM_CHANNEL_4:
;;;994        {
;;;995          /* Enable the TIM Capture/Compare 4 interrupt */
;;;996          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000032  68d4              LDR      r4,[r2,#0xc]
000034  2510              MOVS     r5,#0x10
000036  432c              ORRS     r4,r4,r5
000038  60d4              STR      r4,[r2,#0xc]
                  |L31.58|
;;;997        }
;;;998        break;
;;;999    
;;;1000       default:
;;;1001       break;
;;;1002     }
;;;1003   
;;;1004     /* Enable the TIM Break interrupt */
;;;1005     __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
00003a  6802              LDR      r2,[r0,#0]
00003c  68d4              LDR      r4,[r2,#0xc]
00003e  2580              MOVS     r5,#0x80
000040  432c              ORRS     r4,r4,r5
000042  60d4              STR      r4,[r2,#0xc]
000044  6802              LDR      r2,[r0,#0]
000046  408b              LSLS     r3,r3,r1
000048  6a11              LDR      r1,[r2,#0x20]
00004a  4399              BICS     r1,r1,r3
00004c  6211              STR      r1,[r2,#0x20]
00004e  6a11              LDR      r1,[r2,#0x20]
000050  4319              ORRS     r1,r1,r3
000052  6211              STR      r1,[r2,#0x20]
;;;1006   
;;;1007     /* Enable the complementary PWM output  */
;;;1008     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;1009   
;;;1010     /* Enable the Main Ouput */
;;;1011     __HAL_TIM_MOE_ENABLE(htim);
000054  6801              LDR      r1,[r0,#0]
000056  6c4a              LDR      r2,[r1,#0x44]
000058  022b              LSLS     r3,r5,#8
00005a  431a              ORRS     r2,r2,r3
00005c  644a              STR      r2,[r1,#0x44]
;;;1012   
;;;1013     /* Enable the Peripheral */
;;;1014     __HAL_TIM_ENABLE(htim);
00005e  6800              LDR      r0,[r0,#0]
000060  6801              LDR      r1,[r0,#0]
000062  2201              MOVS     r2,#1
000064  4311              ORRS     r1,r1,r2
000066  6001              STR      r1,[r0,#0]
;;;1015   
;;;1016     /* Return function status */
;;;1017     return HAL_OK;
;;;1018   }
000068  bc30              POP      {r4,r5}
00006a  2000              MOVS     r0,#0                 ;1017
00006c  4770              BX       lr
;;;1019   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_PWMN_Stop PROC
;;;934      */
;;;935    HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b430              PUSH     {r4,r5}
000002  6802              LDR      r2,[r0,#0]
;;;936    {
;;;937      /* Check the parameters */
;;;938      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;939    
;;;940      /* Disable the complementary PWM output  */
;;;941      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000004  2400              MOVS     r4,#0
000006  2304              MOVS     r3,#4
000008  6a15              LDR      r5,[r2,#0x20]
00000a  408b              LSLS     r3,r3,r1
00000c  439d              BICS     r5,r5,r3
00000e  6215              STR      r5,[r2,#0x20]
000010  6a13              LDR      r3,[r2,#0x20]
000012  408c              LSLS     r4,r4,r1
000014  4323              ORRS     r3,r3,r4
000016  6213              STR      r3,[r2,#0x20]
;;;942    
;;;943      /* Disable the Main Ouput */
;;;944      __HAL_TIM_MOE_DISABLE(htim);
000018  6801              LDR      r1,[r0,#0]
00001a  6a0c              LDR      r4,[r1,#0x20]
00001c  4a0c              LDR      r2,|L32.80|
00001e  4b0d              LDR      r3,|L32.84|
000020  4214              TST      r4,r2
000022  d107              BNE      |L32.52|
000024  6a0c              LDR      r4,[r1,#0x20]
000026  421c              TST      r4,r3
000028  d104              BNE      |L32.52|
00002a  6c4c              LDR      r4,[r1,#0x44]
00002c  2501              MOVS     r5,#1
00002e  03ed              LSLS     r5,r5,#15
000030  43ac              BICS     r4,r4,r5
000032  644c              STR      r4,[r1,#0x44]
                  |L32.52|
;;;945    
;;;946      /* Disable the Peripheral */
;;;947      __HAL_TIM_DISABLE(htim);
000034  6800              LDR      r0,[r0,#0]
000036  6a01              LDR      r1,[r0,#0x20]
000038  4211              TST      r1,r2
00003a  d106              BNE      |L32.74|
00003c  6a01              LDR      r1,[r0,#0x20]
00003e  4219              TST      r1,r3
000040  d103              BNE      |L32.74|
000042  6801              LDR      r1,[r0,#0]
000044  0849              LSRS     r1,r1,#1
000046  0049              LSLS     r1,r1,#1
000048  6001              STR      r1,[r0,#0]
                  |L32.74|
;;;948    
;;;949      /* Return function status */
;;;950      return HAL_OK;
;;;951    }
00004a  bc30              POP      {r4,r5}
00004c  2000              MOVS     r0,#0                 ;950
00004e  4770              BX       lr
;;;952    
                          ENDP

                  |L32.80|
                          DCD      0x00001111
                  |L32.84|
                          DCD      0x00000444

                          AREA ||i.HAL_TIMEx_PWMN_Stop_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_PWMN_Stop_DMA PROC
;;;1221     */
;;;1222   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b430              PUSH     {r4,r5}
;;;1223   {
;;;1224     /* Check the parameters */
;;;1225     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;1226   
;;;1227     switch (Channel)
000002  6802              LDR      r2,[r0,#0]
000004  2900              CMP      r1,#0
000006  d006              BEQ      |L33.22|
000008  2904              CMP      r1,#4
00000a  d00a              BEQ      |L33.34|
00000c  2908              CMP      r1,#8
00000e  d00e              BEQ      |L33.46|
000010  290c              CMP      r1,#0xc
000012  d117              BNE      |L33.68|
000014  e011              B        |L33.58|
                  |L33.22|
;;;1228     {
;;;1229       case TIM_CHANNEL_1:
;;;1230       {
;;;1231         /* Disable the TIM Capture/Compare 1 DMA request */
;;;1232         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000016  68d3              LDR      r3,[r2,#0xc]
000018  2401              MOVS     r4,#1
00001a  0264              LSLS     r4,r4,#9
00001c  43a3              BICS     r3,r3,r4
00001e  60d3              STR      r3,[r2,#0xc]
;;;1233       }
;;;1234       break;
000020  e010              B        |L33.68|
                  |L33.34|
;;;1235   
;;;1236       case TIM_CHANNEL_2:
;;;1237       {
;;;1238         /* Disable the TIM Capture/Compare 2 DMA request */
;;;1239         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000022  68d3              LDR      r3,[r2,#0xc]
000024  2401              MOVS     r4,#1
000026  02a4              LSLS     r4,r4,#10
000028  43a3              BICS     r3,r3,r4
00002a  60d3              STR      r3,[r2,#0xc]
;;;1240       }
;;;1241       break;
00002c  e00a              B        |L33.68|
                  |L33.46|
;;;1242   
;;;1243       case TIM_CHANNEL_3:
;;;1244       {
;;;1245         /* Disable the TIM Capture/Compare 3 DMA request */
;;;1246         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
00002e  68d3              LDR      r3,[r2,#0xc]
000030  2401              MOVS     r4,#1
000032  02e4              LSLS     r4,r4,#11
000034  43a3              BICS     r3,r3,r4
000036  60d3              STR      r3,[r2,#0xc]
;;;1247       }
;;;1248       break;
000038  e004              B        |L33.68|
                  |L33.58|
;;;1249   
;;;1250       case TIM_CHANNEL_4:
;;;1251       {
;;;1252         /* Disable the TIM Capture/Compare 4 DMA request */
;;;1253         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
00003a  68d3              LDR      r3,[r2,#0xc]
00003c  2401              MOVS     r4,#1
00003e  0324              LSLS     r4,r4,#12
000040  43a3              BICS     r3,r3,r4
000042  60d3              STR      r3,[r2,#0xc]
                  |L33.68|
000044  6802              LDR      r2,[r0,#0]
;;;1254       }
;;;1255       break;
;;;1256   
;;;1257       default:
;;;1258       break;
;;;1259     }
;;;1260   
;;;1261     /* Disable the complementary PWM output */
;;;1262       TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000046  2400              MOVS     r4,#0
000048  2304              MOVS     r3,#4
00004a  6a15              LDR      r5,[r2,#0x20]
00004c  408b              LSLS     r3,r3,r1
00004e  439d              BICS     r5,r5,r3
000050  6215              STR      r5,[r2,#0x20]
000052  6a13              LDR      r3,[r2,#0x20]
000054  408c              LSLS     r4,r4,r1
000056  4323              ORRS     r3,r3,r4
000058  6213              STR      r3,[r2,#0x20]
;;;1263   
;;;1264     /* Disable the Main Ouput */
;;;1265       __HAL_TIM_MOE_DISABLE(htim);
00005a  6801              LDR      r1,[r0,#0]
00005c  6a0c              LDR      r4,[r1,#0x20]
00005e  4b0e              LDR      r3,|L33.152|
000060  4a0e              LDR      r2,|L33.156|
000062  421c              TST      r4,r3
000064  d107              BNE      |L33.118|
000066  6a0c              LDR      r4,[r1,#0x20]
000068  4214              TST      r4,r2
00006a  d104              BNE      |L33.118|
00006c  6c4c              LDR      r4,[r1,#0x44]
00006e  2501              MOVS     r5,#1
000070  03ed              LSLS     r5,r5,#15
000072  43ac              BICS     r4,r4,r5
000074  644c              STR      r4,[r1,#0x44]
                  |L33.118|
;;;1266   
;;;1267     /* Disable the Peripheral */
;;;1268     __HAL_TIM_DISABLE(htim);
000076  6801              LDR      r1,[r0,#0]
000078  6a0c              LDR      r4,[r1,#0x20]
00007a  421c              TST      r4,r3
00007c  d106              BNE      |L33.140|
00007e  6a0b              LDR      r3,[r1,#0x20]
000080  4213              TST      r3,r2
000082  d103              BNE      |L33.140|
000084  680a              LDR      r2,[r1,#0]
000086  0852              LSRS     r2,r2,#1
000088  0052              LSLS     r2,r2,#1
00008a  600a              STR      r2,[r1,#0]
                  |L33.140|
;;;1269   
;;;1270     /* Change the htim state */
;;;1271     htim->State = HAL_TIM_STATE_READY;
00008c  2101              MOVS     r1,#1
00008e  6401              STR      r1,[r0,#0x40]
;;;1272   
;;;1273     /* Return function status */
;;;1274     return HAL_OK;
;;;1275   }
000090  bc30              POP      {r4,r5}
000092  2000              MOVS     r0,#0                 ;1274
000094  4770              BX       lr
;;;1276   
                          ENDP

000096  0000              DCW      0x0000
                  |L33.152|
                          DCD      0x00001111
                  |L33.156|
                          DCD      0x00000444

                          AREA ||i.HAL_TIMEx_PWMN_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_PWMN_Stop_IT PROC
;;;1031     */
;;;1032   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b430              PUSH     {r4,r5}
;;;1033   {
000002  2304              MOVS     r3,#4
;;;1034     uint32_t tmpccer = 0U;
;;;1035   
;;;1036     /* Check the parameters */
;;;1037     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;1038   
;;;1039     switch (Channel)
000004  6802              LDR      r2,[r0,#0]
000006  2900              CMP      r1,#0
000008  d006              BEQ      |L34.24|
00000a  2904              CMP      r1,#4
00000c  d008              BEQ      |L34.32|
00000e  2908              CMP      r1,#8
000010  d00a              BEQ      |L34.40|
000012  290c              CMP      r1,#0xc
000014  d111              BNE      |L34.58|
000016  e00c              B        |L34.50|
                  |L34.24|
;;;1040     {
;;;1041       case TIM_CHANNEL_1:
;;;1042       {
;;;1043         /* Disable the TIM Capture/Compare 1 interrupt */
;;;1044         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000018  68d4              LDR      r4,[r2,#0xc]
00001a  2502              MOVS     r5,#2
00001c  43ac              BICS     r4,r4,r5
;;;1045       }
;;;1046       break;
00001e  e001              B        |L34.36|
                  |L34.32|
;;;1047   
;;;1048       case TIM_CHANNEL_2:
;;;1049       {
;;;1050         /* Disable the TIM Capture/Compare 2 interrupt */
;;;1051         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000020  68d4              LDR      r4,[r2,#0xc]
000022  439c              BICS     r4,r4,r3
                  |L34.36|
000024  60d4              STR      r4,[r2,#0xc]          ;1044
000026  e008              B        |L34.58|
                  |L34.40|
;;;1052       }
;;;1053       break;
;;;1054   
;;;1055       case TIM_CHANNEL_3:
;;;1056       {
;;;1057         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1058         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000028  68d4              LDR      r4,[r2,#0xc]
00002a  2508              MOVS     r5,#8
00002c  43ac              BICS     r4,r4,r5
00002e  60d4              STR      r4,[r2,#0xc]
;;;1059       }
;;;1060       break;
000030  e003              B        |L34.58|
                  |L34.50|
;;;1061   
;;;1062       case TIM_CHANNEL_4:
;;;1063       {
;;;1064         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1065         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
000032  68d4              LDR      r4,[r2,#0xc]
000034  2510              MOVS     r5,#0x10
000036  43ac              BICS     r4,r4,r5
000038  60d4              STR      r4,[r2,#0xc]
                  |L34.58|
00003a  6802              LDR      r2,[r0,#0]
;;;1066       }
;;;1067       break;
;;;1068   
;;;1069       default:
;;;1070       break;
;;;1071     }
;;;1072   
;;;1073     /* Disable the complementary PWM output  */
;;;1074     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
00003c  2400              MOVS     r4,#0
00003e  6a15              LDR      r5,[r2,#0x20]
000040  408b              LSLS     r3,r3,r1
000042  439d              BICS     r5,r5,r3
000044  6215              STR      r5,[r2,#0x20]
000046  6a13              LDR      r3,[r2,#0x20]
000048  408c              LSLS     r4,r4,r1
00004a  4323              ORRS     r3,r3,r4
00004c  6213              STR      r3,[r2,#0x20]
;;;1075   
;;;1076     /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;1077     tmpccer = htim->Instance->CCER;
00004e  6803              LDR      r3,[r0,#0]
000050  6a19              LDR      r1,[r3,#0x20]
;;;1078     if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
000052  4a11              LDR      r2,|L34.152|
000054  4211              TST      r1,r2
000056  d103              BNE      |L34.96|
;;;1079     {
;;;1080       __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
000058  68d9              LDR      r1,[r3,#0xc]
00005a  2480              MOVS     r4,#0x80
00005c  43a1              BICS     r1,r1,r4
00005e  60d9              STR      r1,[r3,#0xc]
                  |L34.96|
;;;1081     }
;;;1082   
;;;1083     /* Disable the Main Ouput */
;;;1084     __HAL_TIM_MOE_DISABLE(htim);
000060  6801              LDR      r1,[r0,#0]
000062  6a0c              LDR      r4,[r1,#0x20]
000064  4b0d              LDR      r3,|L34.156|
000066  421c              TST      r4,r3
000068  d107              BNE      |L34.122|
00006a  6a0c              LDR      r4,[r1,#0x20]
00006c  4214              TST      r4,r2
00006e  d104              BNE      |L34.122|
000070  6c4c              LDR      r4,[r1,#0x44]
000072  2501              MOVS     r5,#1
000074  03ed              LSLS     r5,r5,#15
000076  43ac              BICS     r4,r4,r5
000078  644c              STR      r4,[r1,#0x44]
                  |L34.122|
;;;1085   
;;;1086     /* Disable the Peripheral */
;;;1087     __HAL_TIM_DISABLE(htim);
00007a  6800              LDR      r0,[r0,#0]
00007c  6a01              LDR      r1,[r0,#0x20]
00007e  4219              TST      r1,r3
000080  d106              BNE      |L34.144|
000082  6a01              LDR      r1,[r0,#0x20]
000084  4211              TST      r1,r2
000086  d103              BNE      |L34.144|
000088  6801              LDR      r1,[r0,#0]
00008a  0849              LSRS     r1,r1,#1
00008c  0049              LSLS     r1,r1,#1
00008e  6001              STR      r1,[r0,#0]
                  |L34.144|
;;;1088   
;;;1089     /* Return function status */
;;;1090     return HAL_OK;
;;;1091   }
000090  bc30              POP      {r4,r5}
000092  2000              MOVS     r0,#0                 ;1090
000094  4770              BX       lr
;;;1092   
                          ENDP

000096  0000              DCW      0x0000
                  |L34.152|
                          DCD      0x00000444
                  |L34.156|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_RemapConfig||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_RemapConfig PROC
;;;1695     */
;;;1696   HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
000000  6bc2              LDR      r2,[r0,#0x3c]
;;;1697   {
;;;1698     __HAL_LOCK(htim);
000002  2a01              CMP      r2,#1
000004  d007              BEQ      |L35.22|
;;;1699   
;;;1700     /* Check parameters */
;;;1701     assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
;;;1702     assert_param(IS_TIM_REMAP(Remap));
;;;1703   
;;;1704     /* Set the Timer remapping configuration */
;;;1705     htim->Instance->OR = Remap;
000006  6803              LDR      r3,[r0,#0]
000008  2201              MOVS     r2,#1                 ;1698
00000a  6519              STR      r1,[r3,#0x50]
;;;1706   
;;;1707     htim->State = HAL_TIM_STATE_READY;
00000c  6402              STR      r2,[r0,#0x40]
;;;1708   
;;;1709     __HAL_UNLOCK(htim);
00000e  2100              MOVS     r1,#0
;;;1710   
;;;1711     return HAL_OK;
000010  63c1              STR      r1,[r0,#0x3c]
000012  4608              MOV      r0,r1
;;;1712   }
000014  4770              BX       lr
                  |L35.22|
000016  2002              MOVS     r0,#2                 ;1698
000018  4770              BX       lr
;;;1713   
                          ENDP


                          AREA ||i.TIMEx_DMACommutationCplt||, CODE, READONLY, ALIGN=1

                  TIMEx_DMACommutationCplt PROC
;;;1923     */
;;;1924   void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;1925   {
;;;1926     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6a80              LDR      r0,[r0,#0x28]
;;;1927   
;;;1928     htim->State= HAL_TIM_STATE_READY;
000004  2101              MOVS     r1,#1
000006  6401              STR      r1,[r0,#0x40]
;;;1929   
;;;1930     HAL_TIMEx_CommutationCallback(htim);
000008  f7fffffe          BL       HAL_TIMEx_CommutationCallback
;;;1931   }
00000c  bd10              POP      {r4,pc}
;;;1932   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F0_V1.9.0\\Drivers\\STM32F0xx_HAL_Driver\\Src\\stm32f0xx_hal_tim_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f0xx_hal_tim_ex_c_e8ef3920____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F0_V1.9.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f0xx_hal_tim_ex_c_e8ef3920____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f0xx_hal_tim_ex_c_e8ef3920____REVSH|
#line 402
|__asm___22_stm32f0xx_hal_tim_ex_c_e8ef3920____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
