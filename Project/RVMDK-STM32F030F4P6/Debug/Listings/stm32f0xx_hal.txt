; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32f0xx_hal.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32f0xx_hal.d --cpu=Cortex-M0 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\STM32F0xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\STM32F0xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32F030F4P6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0\Drivers\CMSIS\Device\ST\STM32F0xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32F030x6 -DSTM32F030x6 -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32f0xx_hal.crf ..\..\..\M0P0_Library\STM32Cube_FW_F0_V1.9.0\Drivers\STM32F0xx_HAL_Driver\Src\stm32f0xx_hal.c]
                          THUMB

                          AREA ||i.HAL_DBGMCU_DisableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGStandbyMode PROC
;;;444      */
;;;445    void HAL_DBGMCU_DisableDBGStandbyMode(void)
000000  4802              LDR      r0,|L1.12|
;;;446    {
;;;447      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6841              LDR      r1,[r0,#4]
000004  2204              MOVS     r2,#4
000006  4391              BICS     r1,r1,r2
000008  6041              STR      r1,[r0,#4]
;;;448    }
00000a  4770              BX       lr
;;;449    
                          ENDP

                  |L1.12|
                          DCD      0x40015800

                          AREA ||i.HAL_DBGMCU_DisableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGStopMode PROC
;;;426      */
;;;427    void HAL_DBGMCU_DisableDBGStopMode(void)
000000  4802              LDR      r0,|L2.12|
;;;428    {
;;;429      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6841              LDR      r1,[r0,#4]
000004  2202              MOVS     r2,#2
000006  4391              BICS     r1,r1,r2
000008  6041              STR      r1,[r0,#4]
;;;430    }
00000a  4770              BX       lr
;;;431    
                          ENDP

                  |L2.12|
                          DCD      0x40015800

                          AREA ||i.HAL_DBGMCU_EnableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGStandbyMode PROC
;;;435      */
;;;436    void HAL_DBGMCU_EnableDBGStandbyMode(void)
000000  4802              LDR      r0,|L3.12|
;;;437    {
;;;438      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6841              LDR      r1,[r0,#4]
000004  2204              MOVS     r2,#4
000006  4311              ORRS     r1,r1,r2
000008  6041              STR      r1,[r0,#4]
;;;439    }
00000a  4770              BX       lr
;;;440    
                          ENDP

                  |L3.12|
                          DCD      0x40015800

                          AREA ||i.HAL_DBGMCU_EnableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGStopMode PROC
;;;417      */
;;;418    void HAL_DBGMCU_EnableDBGStopMode(void)
000000  4802              LDR      r0,|L4.12|
;;;419    {
;;;420      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6841              LDR      r1,[r0,#4]
000004  2202              MOVS     r2,#2
000006  4311              ORRS     r1,r1,r2
000008  6041              STR      r1,[r0,#4]
;;;421    }
00000a  4770              BX       lr
;;;422    
                          ENDP

                  |L4.12|
                          DCD      0x40015800

                          AREA ||i.HAL_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DeInit PROC
;;;178      */
;;;179    HAL_StatusTypeDef HAL_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;180    {
;;;181      /* Reset of all peripherals */
;;;182      __HAL_RCC_APB1_FORCE_RESET();
000002  2100              MOVS     r1,#0
000004  4806              LDR      r0,|L5.32|
000006  43c9              MVNS     r1,r1
000008  6101              STR      r1,[r0,#0x10]
;;;183      __HAL_RCC_APB1_RELEASE_RESET();
00000a  2200              MOVS     r2,#0
00000c  6102              STR      r2,[r0,#0x10]
;;;184    
;;;185      __HAL_RCC_APB2_FORCE_RESET();
00000e  60c1              STR      r1,[r0,#0xc]
;;;186      __HAL_RCC_APB2_RELEASE_RESET();
000010  60c2              STR      r2,[r0,#0xc]
;;;187    
;;;188      __HAL_RCC_AHB_FORCE_RESET();
000012  6281              STR      r1,[r0,#0x28]
;;;189      __HAL_RCC_AHB_RELEASE_RESET();
000014  6282              STR      r2,[r0,#0x28]
;;;190    
;;;191      /* De-Init the low level hardware */
;;;192      HAL_MspDeInit();
000016  f7fffffe          BL       HAL_MspDeInit
;;;193        
;;;194      /* Return function status */
;;;195      return HAL_OK;
00001a  2000              MOVS     r0,#0
;;;196    }
00001c  bd10              POP      {r4,pc}
;;;197    
                          ENDP

00001e  0000              DCW      0x0000
                  |L5.32|
                          DCD      0x40021000

                          AREA ||i.HAL_Delay||, CODE, READONLY, ALIGN=1

                  HAL_Delay PROC
;;;310      */
;;;311    __weak void HAL_Delay(__IO uint32_t Delay)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;312    {
;;;313      uint32_t tickstart = HAL_GetTick();
000002  f7fffffe          BL       HAL_GetTick
;;;314      uint32_t wait = Delay;
;;;315      
;;;316      /* Add a period to guarantee minimum wait */
;;;317      if (wait < HAL_MAX_DELAY)
000006  9c00              LDR      r4,[sp,#0]
000008  4605              MOV      r5,r0                 ;313
00000a  1c60              ADDS     r0,r4,#1
00000c  d000              BEQ      |L6.16|
00000e  1c64              ADDS     r4,r4,#1
                  |L6.16|
;;;318      {
;;;319         wait++;
;;;320      }
;;;321      
;;;322      while((HAL_GetTick() - tickstart) < wait)
000010  f7fffffe          BL       HAL_GetTick
000014  1b40              SUBS     r0,r0,r5
000016  42a0              CMP      r0,r4
000018  d3fa              BCC      |L6.16|
;;;323      {
;;;324      }
;;;325    }
00001a  bd38              POP      {r3-r5,pc}
;;;326    
                          ENDP


                          AREA ||i.HAL_GetDEVID||, CODE, READONLY, ALIGN=2

                  HAL_GetDEVID PROC
;;;381      */
;;;382    uint32_t HAL_GetDEVID(void)
000000  4802              LDR      r0,|L7.12|
;;;383    {
;;;384       return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
000002  6800              LDR      r0,[r0,#0]
000004  0500              LSLS     r0,r0,#20
000006  0d00              LSRS     r0,r0,#20
;;;385    }
000008  4770              BX       lr
;;;386    
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      0x40015800

                          AREA ||i.HAL_GetHalVersion||, CODE, READONLY, ALIGN=2

                  HAL_GetHalVersion PROC
;;;363      */
;;;364    uint32_t HAL_GetHalVersion(void)
000000  4800              LDR      r0,|L8.4|
;;;365    {
;;;366     return __STM32F0xx_HAL_VERSION;
;;;367    }
000002  4770              BX       lr
;;;368    
                          ENDP

                  |L8.4|
                          DCD      0x01070000

                          AREA ||i.HAL_GetREVID||, CODE, READONLY, ALIGN=2

                  HAL_GetREVID PROC
;;;372      */
;;;373    uint32_t HAL_GetREVID(void)
000000  4801              LDR      r0,|L9.8|
;;;374    {
;;;375       return((DBGMCU->IDCODE) >> 16U);
000002  6800              LDR      r0,[r0,#0]
000004  0c00              LSRS     r0,r0,#16
;;;376    }
000006  4770              BX       lr
;;;377    
                          ENDP

                  |L9.8|
                          DCD      0x40015800

                          AREA ||i.HAL_GetTick||, CODE, READONLY, ALIGN=2

                  HAL_GetTick PROC
;;;294      */
;;;295    __weak uint32_t HAL_GetTick(void)
000000  4801              LDR      r0,|L10.8|
;;;296    {
;;;297      return uwTick;
000002  6800              LDR      r0,[r0,#0]  ; uwTick
;;;298    }
000004  4770              BX       lr
;;;299    
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      ||.data||

                          AREA ||i.HAL_GetUIDw0||, CODE, READONLY, ALIGN=2

                  HAL_GetUIDw0 PROC
;;;390      */
;;;391    uint32_t HAL_GetUIDw0(void)
000000  4801              LDR      r0,|L11.8|
;;;392    {
;;;393       return(READ_REG(*((uint32_t *)UID_BASE)));
000002  6ac0              LDR      r0,[r0,#0x2c]
;;;394    }
000004  4770              BX       lr
;;;395    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      0x1ffff780

                          AREA ||i.HAL_GetUIDw1||, CODE, READONLY, ALIGN=2

                  HAL_GetUIDw1 PROC
;;;399      */
;;;400    uint32_t HAL_GetUIDw1(void)
000000  4801              LDR      r0,|L12.8|
;;;401    {
;;;402       return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
000002  6b00              LDR      r0,[r0,#0x30]
;;;403    }
000004  4770              BX       lr
;;;404    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      0x1ffff780

                          AREA ||i.HAL_GetUIDw2||, CODE, READONLY, ALIGN=2

                  HAL_GetUIDw2 PROC
;;;408      */
;;;409    uint32_t HAL_GetUIDw2(void)
000000  4801              LDR      r0,|L13.8|
;;;410    {
;;;411       return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
000002  6b40              LDR      r0,[r0,#0x34]
;;;412    }
000004  4770              BX       lr
;;;413    
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      0x1ffff780

                          AREA ||i.HAL_IncTick||, CODE, READONLY, ALIGN=2

                  HAL_IncTick PROC
;;;283      */
;;;284    __weak void HAL_IncTick(void)
000000  4802              LDR      r0,|L14.12|
;;;285    {
;;;286      uwTick++;
000002  6801              LDR      r1,[r0,#0]  ; uwTick
000004  1c49              ADDS     r1,r1,#1
000006  6001              STR      r1,[r0,#0]  ; uwTick
;;;287    }
000008  4770              BX       lr
;;;288    
                          ENDP

00000a  0000              DCW      0x0000
                  |L14.12|
                          DCD      ||.data||

                          AREA ||i.HAL_Init||, CODE, READONLY, ALIGN=2

                  HAL_Init PROC
;;;154      */
;;;155    HAL_StatusTypeDef HAL_Init(void)
000000  b510              PUSH     {r4,lr}
;;;156    {
;;;157      /* Configure Flash prefetch */ 
;;;158    #if (PREFETCH_ENABLE != 0)
;;;159      __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
000002  4806              LDR      r0,|L15.28|
000004  6801              LDR      r1,[r0,#0]
000006  2210              MOVS     r2,#0x10
000008  4311              ORRS     r1,r1,r2
00000a  6001              STR      r1,[r0,#0]
;;;160    #endif /* PREFETCH_ENABLE */
;;;161    
;;;162      /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
;;;163    
;;;164      HAL_InitTick(TICK_INT_PRIORITY);
00000c  2003              MOVS     r0,#3
00000e  f7fffffe          BL       HAL_InitTick
;;;165    
;;;166      /* Init the low level hardware */
;;;167      HAL_MspInit();
000012  f7fffffe          BL       HAL_MspInit
;;;168    
;;;169      /* Return function status */
;;;170      return HAL_OK;
000016  2000              MOVS     r0,#0
;;;171    }
000018  bd10              POP      {r4,pc}
;;;172    
                          ENDP

00001a  0000              DCW      0x0000
                  |L15.28|
                          DCD      0x40022000

                          AREA ||i.HAL_InitTick||, CODE, READONLY, ALIGN=1

                  HAL_InitTick PROC
;;;235      */
;;;236    __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
000000  b510              PUSH     {r4,lr}
;;;237    {
000002  4604              MOV      r4,r0
;;;238      /*Configure the SysTick to have interrupt in 1ms time basis*/
;;;239      HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
000004  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000008  217d              MOVS     r1,#0x7d
00000a  00c9              LSLS     r1,r1,#3
00000c  f7fffffe          BL       __aeabi_uidivmod
000010  f7fffffe          BL       HAL_SYSTICK_Config
;;;240    
;;;241      /*Configure the SysTick IRQ priority */
;;;242      HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
000014  2200              MOVS     r2,#0
000016  4621              MOV      r1,r4
000018  1e50              SUBS     r0,r2,#1
00001a  f7fffffe          BL       HAL_NVIC_SetPriority
;;;243    
;;;244       /* Return function status */
;;;245      return HAL_OK;
00001e  2000              MOVS     r0,#0
;;;246    }
000020  bd10              POP      {r4,pc}
;;;247    
                          ENDP


                          AREA ||i.HAL_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_MspDeInit PROC
;;;212      */
;;;213    __weak void HAL_MspDeInit(void)
000000  4770              BX       lr
;;;214    {
;;;215      /* NOTE : This function Should not be modified, when the callback is needed,
;;;216                the HAL_MspDeInit could be implemented in the user file
;;;217       */
;;;218    }
;;;219    
                          ENDP


                          AREA ||i.HAL_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_MspInit PROC
;;;201      */
;;;202    __weak void HAL_MspInit(void)
000000  4770              BX       lr
;;;203    {
;;;204      /* NOTE : This function Should not be modified, when the callback is needed,
;;;205                the HAL_MspInit could be implemented in the user file
;;;206       */
;;;207    }
;;;208    
                          ENDP


                          AREA ||i.HAL_ResumeTick||, CODE, READONLY, ALIGN=2

                  HAL_ResumeTick PROC
;;;353      */
;;;354    __weak void HAL_ResumeTick(void)
000000  4802              LDR      r0,|L19.12|
;;;355    {
;;;356      /* Enable SysTick Interrupt */
;;;357      SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
000002  6901              LDR      r1,[r0,#0x10]
000004  2202              MOVS     r2,#2
000006  4311              ORRS     r1,r1,r2
000008  6101              STR      r1,[r0,#0x10]
;;;358    }
00000a  4770              BX       lr
;;;359    
                          ENDP

                  |L19.12|
                          DCD      0xe000e000

                          AREA ||i.HAL_SuspendTick||, CODE, READONLY, ALIGN=2

                  HAL_SuspendTick PROC
;;;336      */
;;;337    __weak void HAL_SuspendTick(void)
000000  4802              LDR      r0,|L20.12|
;;;338    
;;;339    {
;;;340      /* Disable SysTick Interrupt */
;;;341      CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
000002  6901              LDR      r1,[r0,#0x10]
000004  2202              MOVS     r2,#2
000006  4391              BICS     r1,r1,r2
000008  6101              STR      r1,[r0,#0x10]
;;;342    }
00000a  4770              BX       lr
;;;343    
                          ENDP

                  |L20.12|
                          DCD      0xe000e000

                          AREA ||.data||, DATA, ALIGN=2

                  uwTick
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F0_V1.9.0\\Drivers\\STM32F0xx_HAL_Driver\\Src\\stm32f0xx_hal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f0xx_hal_c_HAL_Init____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_F0_V1.9.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_stm32f0xx_hal_c_HAL_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f0xx_hal_c_HAL_Init____REVSH|
#line 402
|__asm___15_stm32f0xx_hal_c_HAL_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
