; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32l0xx_hal_cortex.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32l0xx_hal_cortex.d --cpu=Cortex-M0+ --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32L053C8T6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32L0xx_DFP\2.0.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32L053xx -DSTM32L0xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32l0xx_hal_cortex.crf ..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Src\stm32l0xx_hal_cortex.c]
                          THUMB

                          AREA ||i.HAL_MPU_ConfigRegion||, CODE, READONLY, ALIGN=2

                  HAL_MPU_ConfigRegion PROC
;;;335      */
;;;336    void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
000000  4912              LDR      r1,|L1.76|
;;;337    {
;;;338      /* Check the parameters */
;;;339      assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
;;;340      assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
;;;341    
;;;342      /* Set the Region number */
;;;343      MPU->RNR = MPU_Init->Number;
000002  7942              LDRB     r2,[r0,#5]
000004  618a              STR      r2,[r1,#0x18]
;;;344    
;;;345      if ((MPU_Init->Enable) == MPU_REGION_ENABLE)
000006  7902              LDRB     r2,[r0,#4]
000008  2a01              CMP      r2,#1
00000a  d003              BEQ      |L1.20|
;;;346      {
;;;347        /* Check the parameters */
;;;348        assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
;;;349        assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
;;;350        assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
;;;351        assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
;;;352        assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
;;;353        assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
;;;354        assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
;;;355    
;;;356        /* Set the base adsress and set the 4 LSB to 0 */
;;;357        MPU->RBAR = (MPU_Init->BaseAddress) & 0xfffffff0U;
;;;358    
;;;359        /* Fill the field RASR */
;;;360        MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
;;;361                    ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
;;;362                    ((uint32_t)MPU_Init->IsShareable        << MPU_RASR_S_Pos)    |
;;;363                    ((uint32_t)MPU_Init->IsCacheable        << MPU_RASR_C_Pos)    |
;;;364                    ((uint32_t)MPU_Init->IsBufferable       << MPU_RASR_B_Pos)    |
;;;365                    ((uint32_t)MPU_Init->SubRegionDisable   << MPU_RASR_SRD_Pos)  |
;;;366                    ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
;;;367                    ((uint32_t)MPU_Init->Enable             << MPU_RASR_ENABLE_Pos);
;;;368      }
;;;369      else
;;;370      {
;;;371        MPU->RBAR = 0x00U;
00000c  2000              MOVS     r0,#0
00000e  61c8              STR      r0,[r1,#0x1c]
;;;372        MPU->RASR = 0x00U;
000010  6208              STR      r0,[r1,#0x20]
;;;373      }
;;;374    }
000012  4770              BX       lr
                  |L1.20|
000014  6802              LDR      r2,[r0,#0]            ;357
000016  0912              LSRS     r2,r2,#4              ;357
000018  0112              LSLS     r2,r2,#4              ;357
00001a  61ca              STR      r2,[r1,#0x1c]         ;357
00001c  7a82              LDRB     r2,[r0,#0xa]          ;360
00001e  7a43              LDRB     r3,[r0,#9]            ;360
000020  0712              LSLS     r2,r2,#28             ;360
000022  061b              LSLS     r3,r3,#24             ;360
000024  431a              ORRS     r2,r2,r3              ;360
000026  7ac3              LDRB     r3,[r0,#0xb]          ;360
000028  049b              LSLS     r3,r3,#18             ;360
00002a  431a              ORRS     r2,r2,r3              ;360
00002c  7b03              LDRB     r3,[r0,#0xc]          ;360
00002e  045b              LSLS     r3,r3,#17             ;360
000030  431a              ORRS     r2,r2,r3              ;360
000032  7b43              LDRB     r3,[r0,#0xd]          ;360
000034  041b              LSLS     r3,r3,#16             ;360
000036  431a              ORRS     r2,r2,r3              ;360
000038  79c3              LDRB     r3,[r0,#7]            ;360
00003a  021b              LSLS     r3,r3,#8              ;360
00003c  431a              ORRS     r2,r2,r3              ;360
00003e  7983              LDRB     r3,[r0,#6]            ;360
000040  7900              LDRB     r0,[r0,#4]            ;360
000042  005b              LSLS     r3,r3,#1              ;360
000044  431a              ORRS     r2,r2,r3              ;360
000046  4302              ORRS     r2,r2,r0              ;360
000048  620a              STR      r2,[r1,#0x20]         ;360
00004a  4770              BX       lr
;;;375    #endif /* __MPU_PRESENT */
                          ENDP

                  |L1.76|
                          DCD      0xe000ed80

                          AREA ||i.HAL_NVIC_ClearPendingIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_ClearPendingIRQ PROC
;;;279      */
;;;280    void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000000  06c1              LSLS     r1,r0,#27
000002  0ec9              LSRS     r1,r1,#27
000004  2001              MOVS     r0,#1
000006  4088              LSLS     r0,r0,r1
000008  4901              LDR      r1,|L2.16|
00000a  6008              STR      r0,[r1,#0]
;;;281    { 
;;;282      /* Clear pending interrupt */
;;;283      NVIC_ClearPendingIRQ(IRQn);
;;;284    }
00000c  4770              BX       lr
;;;285    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0xe000e280

                          AREA ||i.HAL_NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_DisableIRQ PROC
;;;180      */
;;;181    void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c1              LSLS     r1,r0,#27
000002  0ec9              LSRS     r1,r1,#27
000004  2001              MOVS     r0,#1
000006  4088              LSLS     r0,r0,r1
000008  4901              LDR      r1,|L3.16|
00000a  6008              STR      r0,[r1,#0]
;;;182    {
;;;183        /* Check the parameters */
;;;184      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;185      
;;;186      /* Disable interrupt */
;;;187      NVIC_DisableIRQ(IRQn);
;;;188    }
00000c  4770              BX       lr
;;;189    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0xe000e180

                          AREA ||i.HAL_NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_EnableIRQ PROC
;;;164      */
;;;165    void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c1              LSLS     r1,r0,#27
000002  0ec9              LSRS     r1,r1,#27
000004  2001              MOVS     r0,#1
000006  4088              LSLS     r0,r0,r1
000008  4901              LDR      r1,|L4.16|
00000a  6008              STR      r0,[r1,#0]
;;;166    {
;;;167      /* Check the parameters */
;;;168      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;169      
;;;170      /* Enable interrupt */
;;;171      NVIC_EnableIRQ(IRQn);
;;;172    }
00000c  4770              BX       lr
;;;173    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0xe000e100

                          AREA ||i.HAL_NVIC_GetPendingIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_GetPendingIRQ PROC
;;;266      */
;;;267    uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
000000  4905              LDR      r1,|L5.24|
;;;268    { 
;;;269      /* Return 1 if pending else 0 */
;;;270      return NVIC_GetPendingIRQ(IRQn);
000002  6809              LDR      r1,[r1,#0]
000004  06c2              LSLS     r2,r0,#27
000006  0ed2              LSRS     r2,r2,#27
000008  2001              MOVS     r0,#1
00000a  4090              LSLS     r0,r0,r2
00000c  4201              TST      r1,r0
00000e  d001              BEQ      |L5.20|
000010  2001              MOVS     r0,#1                 ;268
;;;271    }
000012  4770              BX       lr
                  |L5.20|
000014  2000              MOVS     r0,#0
000016  4770              BX       lr
;;;272    
                          ENDP

                  |L5.24|
                          DCD      0xe000e200

                          AREA ||i.HAL_NVIC_GetPriority||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_GetPriority PROC
;;;238      */
;;;239    uint32_t HAL_NVIC_GetPriority(IRQn_Type IRQn)
000000  0781              LSLS     r1,r0,#30
000002  0ec9              LSRS     r1,r1,#27
000004  2800              CMP      r0,#0
;;;240    {
000006  da0b              BGE      |L6.32|
000008  0700              LSLS     r0,r0,#28
00000a  0f00              LSRS     r0,r0,#28
00000c  3808              SUBS     r0,r0,#8
00000e  0880              LSRS     r0,r0,#2
000010  4a08              LDR      r2,|L6.52|
000012  0080              LSLS     r0,r0,#2
000014  1880              ADDS     r0,r0,r2
000016  69c0              LDR      r0,[r0,#0x1c]
000018  40c8              LSRS     r0,r0,r1
00001a  0600              LSLS     r0,r0,#24
00001c  0f80              LSRS     r0,r0,#30
;;;241      /* Get priority for Cortex-M system or device specific interrupts */
;;;242      return NVIC_GetPriority(IRQn);
;;;243    }
00001e  4770              BX       lr
                  |L6.32|
000020  0880              LSRS     r0,r0,#2
000022  4a05              LDR      r2,|L6.56|
000024  0080              LSLS     r0,r0,#2
000026  1880              ADDS     r0,r0,r2
000028  6800              LDR      r0,[r0,#0]
00002a  40c8              LSRS     r0,r0,r1
00002c  0600              LSLS     r0,r0,#24
00002e  0f80              LSRS     r0,r0,#30
000030  4770              BX       lr
;;;244    
                          ENDP

000032  0000              DCW      0x0000
                  |L6.52|
                          DCD      0xe000ed00
                  |L6.56|
                          DCD      0xe000e400

                          AREA ||i.HAL_NVIC_SetPendingIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SetPendingIRQ PROC
;;;251      */
;;;252    void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
000000  06c1              LSLS     r1,r0,#27
000002  0ec9              LSRS     r1,r1,#27
000004  2001              MOVS     r0,#1
000006  4088              LSLS     r0,r0,r1
000008  4901              LDR      r1,|L7.16|
00000a  6008              STR      r0,[r1,#0]
;;;253    { 
;;;254      /* Set interrupt pending */
;;;255      NVIC_SetPendingIRQ(IRQn);
;;;256    }
00000c  4770              BX       lr
;;;257    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0xe000e200

                          AREA ||i.HAL_NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SetPriority PROC
;;;148      */
;;;149    void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
000000  0782              LSLS     r2,r0,#30
000002  0ed3              LSRS     r3,r2,#27
000004  22ff              MOVS     r2,#0xff
000006  409a              LSLS     r2,r2,r3
000008  0789              LSLS     r1,r1,#30
00000a  0e09              LSRS     r1,r1,#24
00000c  4099              LSLS     r1,r1,r3
00000e  2800              CMP      r0,#0
;;;150    { 
000010  da0b              BGE      |L8.42|
000012  0700              LSLS     r0,r0,#28
000014  0f00              LSRS     r0,r0,#28
000016  3808              SUBS     r0,r0,#8
000018  0883              LSRS     r3,r0,#2
00001a  4808              LDR      r0,|L8.60|
00001c  009b              LSLS     r3,r3,#2
00001e  1818              ADDS     r0,r3,r0
000020  69c3              LDR      r3,[r0,#0x1c]
000022  4393              BICS     r3,r3,r2
000024  430b              ORRS     r3,r3,r1
000026  61c3              STR      r3,[r0,#0x1c]
;;;151        /* Check the parameters */
;;;152      assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
;;;153      NVIC_SetPriority(IRQn,PreemptPriority);
;;;154    }
000028  4770              BX       lr
                  |L8.42|
00002a  0883              LSRS     r3,r0,#2
00002c  4804              LDR      r0,|L8.64|
00002e  009b              LSLS     r3,r3,#2
000030  181b              ADDS     r3,r3,r0
000032  6818              LDR      r0,[r3,#0]
000034  4390              BICS     r0,r0,r2
000036  4308              ORRS     r0,r0,r1
000038  6018              STR      r0,[r3,#0]
00003a  4770              BX       lr
;;;155    
                          ENDP

                  |L8.60|
                          DCD      0xe000ed00
                  |L8.64|
                          DCD      0xe000e400

                          AREA ||i.HAL_NVIC_SystemReset||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SystemReset PROC
;;;193      */
;;;194    void HAL_NVIC_SystemReset(void)
000000  f3bf8f4f          DSB      
000004  4904              LDR      r1,|L9.24|
000006  4803              LDR      r0,|L9.20|
000008  60c8              STR      r0,[r1,#0xc]
00000a  f3bf8f4f          DSB      
                  |L9.14|
00000e  bf00              NOP      
000010  e7fd              B        |L9.14|
;;;195    {
;;;196      /* System Reset */
;;;197      NVIC_SystemReset();
;;;198    }
;;;199    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x05fa0004
                  |L9.24|
                          DCD      0xe000ed00

                          AREA ||i.HAL_SYSTICK_CLKSourceConfig||, CODE, READONLY, ALIGN=2

                  HAL_SYSTICK_CLKSourceConfig PROC
;;;294      */
;;;295    void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
000000  2204              MOVS     r2,#4
;;;296    {
;;;297      /* Check the parameters */
;;;298      assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
;;;299      if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
;;;300      {
;;;301        SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
000002  4904              LDR      r1,|L10.20|
000004  2804              CMP      r0,#4                 ;299
;;;302      }
;;;303      else
;;;304      {
;;;305        SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
000006  6908              LDR      r0,[r1,#0x10]
000008  d002              BEQ      |L10.16|
00000a  4390              BICS     r0,r0,r2
                  |L10.12|
00000c  6108              STR      r0,[r1,#0x10]         ;301
;;;306      }
;;;307    }
00000e  4770              BX       lr
                  |L10.16|
000010  4310              ORRS     r0,r0,r2              ;301
000012  e7fb              B        |L10.12|
;;;308    
                          ENDP

                  |L10.20|
                          DCD      0xe000e000

                          AREA ||i.HAL_SYSTICK_Callback||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_Callback PROC
;;;321      */
;;;322    __weak void HAL_SYSTICK_Callback(void)
000000  4770              BX       lr
;;;323    {
;;;324      /* NOTE : This function Should not be modified, when the callback is needed,
;;;325                the HAL_SYSTICK_Callback could be implemented in the user file
;;;326       */
;;;327    }
;;;328    
                          ENDP


                          AREA ||i.HAL_SYSTICK_Config||, CODE, READONLY, ALIGN=2

                  HAL_SYSTICK_Config PROC
;;;206      */
;;;207    uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
000000  490b              LDR      r1,|L12.48|
;;;208    {
000002  b410              PUSH     {r4}
000004  1e40              SUBS     r0,r0,#1
000006  4288              CMP      r0,r1
000008  d902              BLS      |L12.16|
;;;209       return SysTick_Config(TicksNumb);
;;;210    }
00000a  bc10              POP      {r4}
00000c  2001              MOVS     r0,#1
00000e  4770              BX       lr
                  |L12.16|
000010  4908              LDR      r1,|L12.52|
000012  6148              STR      r0,[r1,#0x14]
000014  4808              LDR      r0,|L12.56|
000016  2207              MOVS     r2,#7                 ;209
000018  69c3              LDR      r3,[r0,#0x1c]         ;209
00001a  021b              LSLS     r3,r3,#8              ;209
00001c  0a1b              LSRS     r3,r3,#8              ;209
00001e  044c              LSLS     r4,r1,#17             ;209
000020  4323              ORRS     r3,r3,r4              ;209
000022  61c3              STR      r3,[r0,#0x1c]         ;209
000024  2000              MOVS     r0,#0                 ;209
000026  6188              STR      r0,[r1,#0x18]         ;209
000028  610a              STR      r2,[r1,#0x10]         ;209
00002a  bc10              POP      {r4}
00002c  4770              BX       lr
;;;211    /**
                          ENDP

00002e  0000              DCW      0x0000
                  |L12.48|
                          DCD      0x00ffffff
                  |L12.52|
                          DCD      0xe000e000
                  |L12.56|
                          DCD      0xe000ed04

                          AREA ||i.HAL_SYSTICK_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_IRQHandler PROC
;;;312      */
;;;313    void HAL_SYSTICK_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;314    {
;;;315      HAL_SYSTICK_Callback();
000002  f7fffffe          BL       HAL_SYSTICK_Callback
;;;316    }
000006  bd10              POP      {r4,pc}
;;;317    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_L0_V1.10.0\\Drivers\\STM32L0xx_HAL_Driver\\Src\\stm32l0xx_hal_cortex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32l0xx_hal_cortex_c_910ac087____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_L0_V1.10.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32l0xx_hal_cortex_c_910ac087____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32l0xx_hal_cortex_c_910ac087____REVSH|
#line 402
|__asm___22_stm32l0xx_hal_cortex_c_910ac087____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
