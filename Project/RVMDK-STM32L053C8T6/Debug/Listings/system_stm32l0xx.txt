; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\system_stm32l0xx.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\system_stm32l0xx.d --cpu=Cortex-M0+ --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32L053C8T6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32L0xx_DFP\2.0.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32L053xx -DSTM32L0xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\system_stm32l0xx.crf ..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Device\ST\STM32L0xx\Source\Templates\system_stm32l0xx.c]
                          THUMB

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;219      */
;;;220    void SystemCoreClockUpdate (void)
000000  b570              PUSH     {r4-r6,lr}
;;;221    {
;;;222      uint32_t tmp = 0U, pllmul = 0U, plldiv = 0U, pllsource = 0U, msirange = 0U;
;;;223    
;;;224      /* Get SYSCLK source -------------------------------------------------------*/
;;;225      tmp = RCC->CFGR & RCC_CFGR_SWS;
000002  4d1c              LDR      r5,|L1.116|
000004  68e9              LDR      r1,[r5,#0xc]
000006  200c              MOVS     r0,#0xc
000008  4001              ANDS     r1,r1,r0
;;;226      
;;;227      switch (tmp)
;;;228      {
;;;229        case 0x00U:  /* MSI used as system clock */
;;;230          msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13U;
;;;231          SystemCoreClock = (32768U * (1U << (msirange + 1U)));
00000a  481b              LDR      r0,|L1.120|
00000c  4c1b              LDR      r4,|L1.124|
00000e  d005              BEQ      |L1.28|
000010  2904              CMP      r1,#4                 ;227
000012  d009              BEQ      |L1.40|
000014  2908              CMP      r1,#8                 ;227
000016  d009              BEQ      |L1.44|
000018  290c              CMP      r1,#0xc               ;227
00001a  d012              BEQ      |L1.66|
                  |L1.28|
00001c  6869              LDR      r1,[r5,#4]            ;230
00001e  0409              LSLS     r1,r1,#16             ;230
000020  0f49              LSRS     r1,r1,#29             ;230
000022  1c49              ADDS     r1,r1,#1              ;230
000024  4088              LSLS     r0,r0,r1
;;;232          break;
000026  e002              B        |L1.46|
                  |L1.40|
;;;233        case 0x04U:  /* HSI used as system clock */
;;;234          SystemCoreClock = HSI_VALUE;
000028  4815              LDR      r0,|L1.128|
;;;235          break;
00002a  e000              B        |L1.46|
                  |L1.44|
;;;236        case 0x08U:  /* HSE used as system clock */
;;;237          SystemCoreClock = HSE_VALUE;
00002c  4815              LDR      r0,|L1.132|
                  |L1.46|
;;;238          break;
;;;239        case 0x0CU:  /* PLL used as system clock */
;;;240          /* Get PLL clock source and multiplication factor ----------------------*/
;;;241          pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
;;;242          plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
;;;243          pllmul = PLLMulTable[(pllmul >> 18U)];
;;;244          plldiv = (plldiv >> 22U) + 1U;
;;;245          
;;;246          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
;;;247    
;;;248          if (pllsource == 0x00U)
;;;249          {
;;;250            /* HSI oscillator clock selected as PLL clock entry */
;;;251            SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
;;;252          }
;;;253          else
;;;254          {
;;;255            /* HSE selected as PLL clock entry */
;;;256            SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
;;;257          }
;;;258          break;
;;;259        default: /* MSI used as system clock */
;;;260          msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13U;
;;;261          SystemCoreClock = (32768U * (1U << (msirange + 1U)));
;;;262          break;
;;;263      }
;;;264      /* Compute HCLK clock frequency --------------------------------------------*/
;;;265      /* Get HCLK prescaler */
;;;266      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
00002e  6020              STR      r0,[r4,#0]  ; SystemCoreClock
000030  68e8              LDR      r0,[r5,#0xc]
000032  4915              LDR      r1,|L1.136|
000034  0600              LSLS     r0,r0,#24
000036  0f00              LSRS     r0,r0,#28
000038  5c08              LDRB     r0,[r1,r0]
;;;267      /* HCLK clock frequency */
;;;268      SystemCoreClock >>= tmp;
00003a  6821              LDR      r1,[r4,#0]  ; SystemCoreClock
00003c  40c1              LSRS     r1,r1,r0
00003e  6021              STR      r1,[r4,#0]  ; SystemCoreClock
;;;269    }
000040  bd70              POP      {r4-r6,pc}
                  |L1.66|
000042  68e8              LDR      r0,[r5,#0xc]          ;241
000044  68e9              LDR      r1,[r5,#0xc]          ;242
000046  0280              LSLS     r0,r0,#10
000048  4a10              LDR      r2,|L1.140|
00004a  0f00              LSRS     r0,r0,#28
00004c  5c10              LDRB     r0,[r2,r0]            ;243
00004e  0209              LSLS     r1,r1,#8
000050  68ea              LDR      r2,[r5,#0xc]          ;246
000052  0f89              LSRS     r1,r1,#30
000054  2301              MOVS     r3,#1                 ;246
000056  041b              LSLS     r3,r3,#16             ;246
000058  1c49              ADDS     r1,r1,#1              ;246
00005a  421a              TST      r2,r3                 ;246
00005c  d104              BNE      |L1.104|
00005e  4a08              LDR      r2,|L1.128|
000060  4350              MULS     r0,r2,r0              ;251
000062  f7fffffe          BL       __aeabi_uidivmod
000066  e7e2              B        |L1.46|
                  |L1.104|
000068  4a06              LDR      r2,|L1.132|
00006a  4350              MULS     r0,r2,r0              ;256
00006c  f7fffffe          BL       __aeabi_uidivmod
000070  e7dd              B        |L1.46|
;;;270    
                          ENDP

000072  0000              DCW      0x0000
                  |L1.116|
                          DCD      0x40021000
                  |L1.120|
                          DCD      0x00008000
                  |L1.124|
                          DCD      ||.data||
                  |L1.128|
                          DCD      0x00f42400
                  |L1.132|
                          DCD      0x007a1200
                  |L1.136|
                          DCD      ||.constdata||
                  |L1.140|
                          DCD      ||.constdata||+0x10

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;150      */
;;;151    void SystemInit (void)
000000  4810              LDR      r0,|L2.68|
;;;152    {    
;;;153    /*!< Set MSION bit */
;;;154      RCC->CR |= (uint32_t)0x00000100U;
000002  6801              LDR      r1,[r0,#0]
000004  1582              ASRS     r2,r0,#22
000006  4311              ORRS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;155    
;;;156      /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
;;;157      RCC->CFGR &= (uint32_t) 0x88FF400CU;
00000a  68c1              LDR      r1,[r0,#0xc]
00000c  4a0e              LDR      r2,|L2.72|
00000e  4011              ANDS     r1,r1,r2
000010  60c1              STR      r1,[r0,#0xc]
;;;158     
;;;159      /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
;;;160      RCC->CR &= (uint32_t)0xFEF6FFF6U;
000012  6801              LDR      r1,[r0,#0]
000014  4a0d              LDR      r2,|L2.76|
000016  4011              ANDS     r1,r1,r2
000018  6001              STR      r1,[r0,#0]
;;;161      
;;;162      /*!< Reset HSI48ON  bit */
;;;163      RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
00001a  6881              LDR      r1,[r0,#8]
00001c  0849              LSRS     r1,r1,#1
00001e  0049              LSLS     r1,r1,#1
000020  6081              STR      r1,[r0,#8]
;;;164      
;;;165      /*!< Reset HSEBYP bit */
;;;166      RCC->CR &= (uint32_t)0xFFFBFFFFU;
000022  6801              LDR      r1,[r0,#0]
000024  2201              MOVS     r2,#1
000026  0492              LSLS     r2,r2,#18
000028  4391              BICS     r1,r1,r2
00002a  6001              STR      r1,[r0,#0]
;;;167    
;;;168      /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
;;;169      RCC->CFGR &= (uint32_t)0xFF02FFFFU;
00002c  68c1              LDR      r1,[r0,#0xc]
00002e  22fd              MOVS     r2,#0xfd
000030  0412              LSLS     r2,r2,#16
000032  4391              BICS     r1,r1,r2
000034  60c1              STR      r1,[r0,#0xc]
;;;170    
;;;171      /*!< Disable all interrupts */
;;;172      RCC->CIER = 0x00000000U;
000036  2100              MOVS     r1,#0
000038  6101              STR      r1,[r0,#0x10]
;;;173      
;;;174      /* Configure the Vector Table location add offset address ------------------*/
;;;175    #ifdef VECT_TAB_SRAM
;;;176      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;177    #else
;;;178      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00003a  4905              LDR      r1,|L2.80|
00003c  03c0              LSLS     r0,r0,#15
00003e  6088              STR      r0,[r1,#8]
;;;179    #endif
;;;180    }
000040  4770              BX       lr
;;;181    
                          ENDP

000042  0000              DCW      0x0000
                  |L2.68|
                          DCD      0x40021000
                  |L2.72|
                          DCD      0x88ff400c
                  |L2.76|
                          DCD      0xfef6fff6
                  |L2.80|
                          DCD      0xe000ed00

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  AHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09
                  PLLMulTable
000010  03040608          DCB      0x03,0x04,0x06,0x08
000014  0c101820          DCB      0x0c,0x10,0x18,0x20
000018  30                DCB      0x30

                          AREA ||area_number.6||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.constdata||
                  APBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  01020304          DCB      0x01,0x02,0x03,0x04

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x001e8480

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_L0_V1.10.0\\Drivers\\CMSIS\\Device\\ST\\STM32L0xx\\Source\\Templates\\system_stm32l0xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32l0xx_c_5d646a67____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_L0_V1.10.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___18_system_stm32l0xx_c_5d646a67____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32l0xx_c_5d646a67____REVSH|
#line 402
|__asm___18_system_stm32l0xx_c_5d646a67____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
