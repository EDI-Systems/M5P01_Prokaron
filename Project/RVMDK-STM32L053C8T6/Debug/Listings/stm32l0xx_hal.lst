L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Src\stm32l0xx_hal.c"
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal.c
N  * @author  MCD Application Team
N  * @brief   HAL module driver.
N  *          This is the common part of the HAL initialization
N  *
N  @verbatim
N  ==============================================================================
N                     ##### How to use this driver #####
N  ==============================================================================
N    [..]
N    The common HAL driver contains a set of generic and common APIs that can be
N    used by the PPP peripheral drivers and the user to start using the HAL. 
N    [..]
N    The HAL contains two APIs categories: 
N         (+) Common HAL APIs
N         (+) Services HAL APIs
N
N  @endverbatim
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx_hal.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal.h
N  * @author  MCD Application Team
N  * @brief   This file contains all the functions prototypes for the HAL 
N  *          module driver.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_H
N#define __STM32L0xx_HAL_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx_hal_conf.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\Conf\stm32l0xx_hal_conf.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal_conf.h
N  * @brief   HAL configuration file.             
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2018 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_CONF_H
N#define __STM32L0xx_HAL_CONF_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Exported types ------------------------------------------------------------*/
N/* Exported constants --------------------------------------------------------*/
N
N/* ########################## Module Selection ############################## */
N/**
N  * @brief This is the list of modules to be used in the HAL driver 
N  */
N
N#define HAL_MODULE_ENABLED  
N/*#define HAL_ADC_MODULE_ENABLED   */
N/*#define HAL_CRYP_MODULE_ENABLED   */
N/*#define HAL_COMP_MODULE_ENABLED   */
N/*#define HAL_CRC_MODULE_ENABLED   */
N/*#define HAL_CRYP_MODULE_ENABLED   */
N/*#define HAL_DAC_MODULE_ENABLED   */
N/*#define HAL_FIREWALL_MODULE_ENABLED   */
N/*#define HAL_I2S_MODULE_ENABLED   */
N/*#define HAL_IWDG_MODULE_ENABLED   */
N/*#define HAL_LCD_MODULE_ENABLED   */
N/*#define HAL_LPTIM_MODULE_ENABLED   */
N/*#define HAL_RNG_MODULE_ENABLED   */
N/*#define HAL_RTC_MODULE_ENABLED   */
N/*#define HAL_SPI_MODULE_ENABLED   */
N#define HAL_TIM_MODULE_ENABLED
N/*#define HAL_TSC_MODULE_ENABLED   */
N#define HAL_UART_MODULE_ENABLED    
N/* #define HAL_USART_MODULE_ENABLED   */
N/*#define HAL_IRDA_MODULE_ENABLED   */
N/*#define HAL_SMARTCARD_MODULE_ENABLED   */
N/*#define HAL_SMBUS_MODULE_ENABLED   */
N/*#define HAL_WWDG_MODULE_ENABLED   */
N/*#define HAL_PCD_MODULE_ENABLED   */
N#define HAL_GPIO_MODULE_ENABLED
N#define HAL_DMA_MODULE_ENABLED
N/* #define HAL_I2C_MODULE_ENABLED */
N#define HAL_RCC_MODULE_ENABLED
N#define HAL_FLASH_MODULE_ENABLED
N#define HAL_PWR_MODULE_ENABLED
N#define HAL_CORTEX_MODULE_ENABLED
N
N/* ########################## Oscillator Values adaptation ####################*/
N/**
N  * @brief Adjust the value of External High Speed oscillator (HSE) used in your application.
N  *        This value is used by the RCC HAL module to compute the system frequency
N  *        (when HSE is used as system clock source, directly or through the PLL).  
N  */
N#if !defined  (HSE_VALUE) 
X#if !0L 
N  #define HSE_VALUE    ((uint32_t)8000000U) /*!< Value of the External oscillator in Hz */
N#endif /* HSE_VALUE */
N
N#if !defined  (HSE_STARTUP_TIMEOUT)
X#if !0L
N  #define HSE_STARTUP_TIMEOUT    ((uint32_t)100U)   /*!< Time out for HSE start up, in ms */
N#endif /* HSE_STARTUP_TIMEOUT */
N
N/**
N  * @brief Internal Multiple Speed oscillator (MSI) default value.
N  *        This value is the default MSI range value after Reset.
N  */
N#if !defined  (MSI_VALUE)
X#if !0L
N  #define MSI_VALUE    ((uint32_t)2097000U) /*!< Value of the Internal oscillator in Hz*/
N#endif /* MSI_VALUE */
N   
N/**
N  * @brief Internal High Speed oscillator (HSI) value.
N  *        This value is used by the RCC HAL module to compute the system frequency
N  *        (when HSI is used as system clock source, directly or through the PLL). 
N  */
N#if !defined  (HSI_VALUE)
X#if !0L
N  #define HSI_VALUE    ((uint32_t)16000000U) /*!< Value of the Internal oscillator in Hz*/
N#endif /* HSI_VALUE */
N
N/**
N  * @brief Internal High Speed oscillator for USB (HSI48) value.
N  */
N#if !defined  (HSI48_VALUE) 
X#if !0L 
N#define HSI48_VALUE ((uint32_t)48000000U) /*!< Value of the Internal High Speed oscillator for USB in Hz.
N                                             The real value may vary depending on the variations
N                                             in voltage and temperature.  */
N#endif /* HSI48_VALUE */
N
N/**
N  * @brief Internal Low Speed oscillator (LSI) value.
N  */
N#if !defined  (LSI_VALUE) 
X#if !0L 
N #define LSI_VALUE  ((uint32_t)37000U)       /*!< LSI Typical Value in Hz*/
N#endif /* LSI_VALUE */                      /*!< Value of the Internal Low Speed oscillator in Hz
N                                             The real value may vary depending on the variations
N                                             in voltage and temperature.*/   
N/**
N  * @brief External Low Speed oscillator (LSE) value.
N  *        This value is used by the UART, RTC HAL module to compute the system frequency
N  */
N#if !defined  (LSE_VALUE)
X#if !0L
N  #define LSE_VALUE    ((uint32_t)32768U) /*!< Value of the External oscillator in Hz*/
N#endif /* LSE_VALUE */
N
N#if !defined  (LSE_STARTUP_TIMEOUT)
X#if !0L
N  #define LSE_STARTUP_TIMEOUT  ((uint32_t)5000U)   /*!< Time out for LSE start up, in ms */
N#endif /* LSE_STARTUP_TIMEOUT */
N
N/* Tip: To avoid modifying this file each time you need to use different HSE,
N   ===  you can define the HSE value in your toolchain compiler preprocessor. */
N
N/* ########################### System Configuration ######################### */
N/**
N  * @brief This is the HAL system configuration section
N  */     
N#define  VDD_VALUE                    ((uint32_t)3300U) /*!< Value of VDD in mv */           
N#define  TICK_INT_PRIORITY            ((uint32_t)0U)    /*!< tick interrupt priority */            
N#define  USE_RTOS                     0U     
N#define  PREFETCH_ENABLE              0U              
N#define  PREREAD_ENABLE               1U
N#define  BUFFER_CACHE_DISABLE         0U
N
N/* ########################## Assert Selection ############################## */
N/**
N  * @brief Uncomment the line below to expanse the "assert_param" macro in the 
N  *        HAL drivers code
N  */
N/* #define USE_FULL_ASSERT    1U */
N
N/* Includes ------------------------------------------------------------------*/
N/**
N  * @brief Include module's header file 
N  */
N
N#ifdef HAL_RCC_MODULE_ENABLED
N  #include "stm32l0xx_hal_rcc.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_rcc.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal_rcc.h
N  * @author  MCD Application Team
N  * @brief   Header file of RCC HAL module.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_RCC_H
N#define __STM32L0xx_HAL_RCC_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx_hal_def.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_def.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal_def.h
N  * @author  MCD Application Team
N  * @brief   This file contains HAL common defines, enumeration, macros and 
N  *          structures definitions. 
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_DEF
N#define __STM32L0xx_HAL_DEF
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include\stm32l0xx.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx.h
N  * @author  MCD Application Team
N  * @brief   CMSIS Cortex-M0+ Device Peripheral Access Layer Header File. 
N  *          This file contains all the peripheral register's definitions, bits 
N  *          definitions and memory mapping for STM32L0xx devices.            
N  *            
N  *          The file is the unique include file that the application programmer
N  *          is using in the C source code, usually in main.c. This file contains:
N  *           - Configuration section that allows to select:
N  *              - The device used in the target application
N  *              - To use or not the peripheral's drivers in application code(i.e. 
N  *                code will be based on direct access to peripheral's registers 
N  *                rather than drivers API), this option is controlled by 
N  *                "#define USE_HAL_DRIVER"
N  *  
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************  
N  */ 
N
N/** @addtogroup CMSIS
N  * @{
N  */
N
N/** @addtogroup stm32l0xx
N  * @{
N  */
N    
N#ifndef __STM32L0xx_H
N#define __STM32L0xx_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif /* __cplusplus */
N   
N/** @addtogroup Library_configuration_section
N  * @{
N  */
N
N/**
N  * @brief STM32 Family
N  */
N#if !defined (STM32L0)
X#if !0L
N#define STM32L0
N#endif /* STM32L0 */
N
N/* Uncomment the line below according to the target STM32 device used in your
N   application 
N  */
N
N#if !defined (STM32L011xx) && !defined (STM32L021xx) && \
N    !defined (STM32L031xx) && !defined (STM32L041xx) && \
N    !defined (STM32L051xx) && !defined (STM32L052xx) && !defined (STM32L053xx) && \
N    !defined (STM32L061xx) && !defined (STM32L062xx) && !defined (STM32L063xx) && \
N    !defined (STM32L071xx) && !defined (STM32L072xx) && !defined (STM32L073xx) && \
N    !defined (STM32L081xx) && !defined (STM32L082xx) && !defined (STM32L083xx) \
N  /* #define STM32L011xx */
X#if !0L && !0L &&     !0L && !0L &&     !0L && !0L && !1L &&     !0L && !0L && !0L &&     !0L && !0L && !0L &&     !0L && !0L && !0L    
S  /* #define STM32L021xx */
S  /* #define STM32L031xx */   /*!< STM32L031C6, STM32L031E6, STM32L031F6, STM32L031G6, STM32L031K6 Devices */
S  /* #define STM32L041xx */   /*!< STM32L041C6, STM32L041E6, STM32L041F6, STM32L041G6, STM32L041K6 Devices */
S  /* #define STM32L051xx */   /*!< STM32L051K8, STM32L051C6, STM32L051C8, STM32L051R6, STM32L051R8 Devices */
S  /* #define STM32L052xx */   /*!< STM32L052K6, STM32L052K8, STM32L052C6, STM32L052C8, STM32L052R6, STM32L052R8 Devices */
S  /* #define STM32L053xx */   /*!< STM32L053C6, STM32L053C8, STM32L053R6, STM32L053R8 Devices */
S  /* #define STM32L061xx */   /*!< */
S  /* #define STM32L062xx */   /*!< STM32L062K8 */
S  /* #define STM32L063xx */   /*!< STM32L063C8, STM32L063R8 */ 
S  /* #define STM32L071xx */   /*!< */
S  /* #define STM32L072xx */   /*!< */
S  /* #define STM32L073xx */   /*!< STM32L073V8, STM32L073VB, STM32L073RB, STM32L073VZ, STM32L073RZ Devices */
S  /* #define STM32L081xx */   /*!< */
S  /* #define STM32L082xx */   /*!< */
S  /* #define STM32L083xx */   /*!< */ 
N#endif
N   
N/*  Tip: To avoid modifying this file each time you need to switch between these
N        devices, you can define the device in your toolchain compiler preprocessor.
N  */
N#if !defined  (USE_HAL_DRIVER)
X#if !1L
S/**
S * @brief Comment the line below if you will not use the peripherals drivers.
S   In this case, these drivers will not be included and the application code will 
S   be based on direct access to peripherals registers 
S   */
S  /*#define USE_HAL_DRIVER */
N#endif /* USE_HAL_DRIVER */
N
N/**
N  * @brief CMSIS Device version number V1.7.1
N  */
N#define __STM32L0xx_CMSIS_VERSION_MAIN   (0x01) /*!< [31:24] main version */
N#define __STM32L0xx_CMSIS_VERSION_SUB1   (0x07) /*!< [23:16] sub1 version */
N#define __STM32L0xx_CMSIS_VERSION_SUB2   (0x02) /*!< [15:8]  sub2 version */
N#define __STM32L0xx_CMSIS_VERSION_RC     (0x00) /*!< [7:0]  release candidate */
N#define __STM32L0xx_CMSIS_VERSION        ((__STM32L0xx_CMSIS_VERSION_MAIN     << 24)\
N                                         |(__STM32L0xx_CMSIS_VERSION_SUB1 << 16)\
N                                         |(__STM32L0xx_CMSIS_VERSION_SUB2 << 8 )\
N                                         |(__STM32L0xx_CMSIS_VERSION_RC))
X#define __STM32L0xx_CMSIS_VERSION        ((__STM32L0xx_CMSIS_VERSION_MAIN     << 24)                                         |(__STM32L0xx_CMSIS_VERSION_SUB1 << 16)                                         |(__STM32L0xx_CMSIS_VERSION_SUB2 << 8 )                                         |(__STM32L0xx_CMSIS_VERSION_RC))
N                                             
N/**
N  * @}
N  */
N
N/** @addtogroup Device_Included
N  * @{
N  */
N#if defined(STM32L011xx)
X#if 0L
S  #include "stm32l011xx.h"
S#elif defined(STM32L021xx)
X#elif 0L
S  #include "stm32l021xx.h"
S#elif defined(STM32L031xx)
X#elif 0L
S  #include "stm32l031xx.h"
S#elif defined(STM32L041xx)
X#elif 0L
S  #include "stm32l041xx.h"
S#elif defined(STM32L051xx)
X#elif 0L
S  #include "stm32l051xx.h"
S#elif defined(STM32L052xx)
X#elif 0L
S  #include "stm32l052xx.h"
N#elif defined(STM32L053xx)
X#elif 1L
N  #include "stm32l053xx.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include\stm32l053xx.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l053xx.h
N  * @author  MCD Application Team
N  * @brief   CMSIS Cortex-M0+ Device Peripheral Access Layer Header File. 
N  *          This file contains all the peripheral register's definitions, bits 
N  *          definitions and memory mapping for stm32l053xx devices.  
N  *          
N  *          This file contains:
N  *           - Data structures and the address mapping for all peripherals
N  *           - Peripheral's registers declarations and bits definition
N  *           - Macros to access peripheral's registers hardware
N  *
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */
N
N/** @addtogroup CMSIS
N  * @{
N  */
N
N/** @addtogroup stm32l053xx
N  * @{
N  */
N    
N#ifndef __STM32L053xx_H
N#define __STM32L053xx_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif 
N  
N
N/** @addtogroup Configuration_section_for_CMSIS
N  * @{
N  */
N/**
N  * @brief Configuration of the Cortex-M0+ Processor and Core Peripherals 
N  */
N#define __CM0PLUS_REV             0 /*!< Core Revision r0p0                            */
N#define __MPU_PRESENT             1 /*!< STM32L0xx  provides an MPU                    */
N#define __VTOR_PRESENT            1 /*!< Vector  Table  Register supported             */
N#define __NVIC_PRIO_BITS          2 /*!< STM32L0xx uses 2 Bits for the Priority Levels */
N#define __Vendor_SysTickConfig    0 /*!< Set to 1 if different SysTick Config is used  */
N
N/**
N  * @}
N  */
N   
N/** @addtogroup Peripheral_interrupt_number_definition
N  * @{
N  */
N   
N/**
N * @brief stm32l053xx Interrupt Number Definition, according to the selected device 
N *        in @ref Library_configuration_section 
N */
N
N/*!< Interrupt Number Definition */
Ntypedef enum
N{
N/******  Cortex-M0 Processor Exceptions Numbers ******************************************************/
N  NonMaskableInt_IRQn         = -14,    /*!< 2 Non Maskable Interrupt                                */
N  HardFault_IRQn              = -13,    /*!< 3 Cortex-M0+ Hard Fault Interrupt                       */
N  SVC_IRQn                    = -5,     /*!< 11 Cortex-M0+ SV Call Interrupt                         */
N  PendSV_IRQn                 = -2,     /*!< 14 Cortex-M0+ Pend SV Interrupt                         */
N  SysTick_IRQn                = -1,     /*!< 15 Cortex-M0+ System Tick Interrupt                     */
N
N/******  STM32L-0 specific Interrupt Numbers *********************************************************/
N  WWDG_IRQn                   = 0,      /*!< Window WatchDog Interrupt                               */
N  PVD_IRQn                    = 1,      /*!< PVD through EXTI Line detect Interrupt                  */
N  RTC_IRQn                    = 2,      /*!< RTC through EXTI Line Interrupt                         */
N  FLASH_IRQn                  = 3,      /*!< FLASH Interrupt                                         */
N  RCC_CRS_IRQn                = 4,      /*!< RCC and CRS Interrupts                                  */
N  EXTI0_1_IRQn                = 5,      /*!< EXTI Line 0 and 1 Interrupts                            */
N  EXTI2_3_IRQn                = 6,      /*!< EXTI Line 2 and 3 Interrupts                            */
N  EXTI4_15_IRQn               = 7,      /*!< EXTI Line 4 to 15 Interrupts                            */
N  TSC_IRQn                    = 8,      /*!< TSC Interrupt                                           */
N  DMA1_Channel1_IRQn          = 9,      /*!< DMA1 Channel 1 Interrupt                                */
N  DMA1_Channel2_3_IRQn        = 10,     /*!< DMA1 Channel 2 and Channel 3 Interrupts                 */
N  DMA1_Channel4_5_6_7_IRQn    = 11,     /*!< DMA1 Channel 4, Channel 5, Channel 6 and Channel 7 Interrupts */
N  ADC1_COMP_IRQn              = 12,     /*!< ADC1, COMP1 and COMP2 Interrupts                        */
N  LPTIM1_IRQn                 = 13,     /*!< LPTIM1 Interrupt                                        */
N  TIM2_IRQn                   = 15,     /*!< TIM2 Interrupt                                          */
N  TIM6_DAC_IRQn               = 17,     /*!< TIM6 and DAC Interrupts                                 */
N  TIM21_IRQn                  = 20,     /*!< TIM21 Interrupt                                         */
N  TIM22_IRQn                  = 22,     /*!< TIM22 Interrupt                                         */
N  I2C1_IRQn                   = 23,     /*!< I2C1 Interrupt                                          */
N  I2C2_IRQn                   = 24,     /*!< I2C2 Interrupt                                          */
N  SPI1_IRQn                   = 25,     /*!< SPI1 Interrupt                                          */
N  SPI2_IRQn                   = 26,     /*!< SPI2 Interrupt                                          */
N  USART1_IRQn                 = 27,     /*!< USART1 Interrupt                                        */
N  USART2_IRQn                 = 28,     /*!< USART2 Interrupt                                        */
N  RNG_LPUART1_IRQn            = 29,     /*!< RNG and LPUART1 Interrupts                              */
N  LCD_IRQn                    = 30,     /*!< LCD Interrupt                                           */
N  USB_IRQn                    = 31,     /*!< USB global Interrupt                                    */
N} IRQn_Type;
N
N/**
N  * @}
N  */
N
N#include "core_cm0plus.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Include\core_cm0plus.h" 1
N/**************************************************************************//**
N * @file     core_cm0plus.h
N * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060183 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CM0PLUS_H_GENERIC
N#define __CORE_CM0PLUS_H_GENERIC
N
N#include <stdint.h>
L 1 "D:\Program_Files_x86\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060009
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 45 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Include\core_cm0plus.h" 2
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/**
N  \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
N  CMSIS violates the following MISRA-C:2004 rules:
N
N   \li Required Rule 8.5, object/function definition in header file.<br>
N     Function definitions in header files are used to allow 'inlining'.
N
N   \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
N     Unions are used for effective representation of core registers.
N
N   \li Advisory Rule 19.7, Function-like macro defined.<br>
N     Function-like macros are used to allow more efficient code.
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/**
N  \ingroup Cortex-M0+
N  @{
N */
N
N/*  CMSIS CM0+ definitions */
N#define __CM0PLUS_CMSIS_VERSION_MAIN (0x04U)                                   /*!< [31:16] CMSIS HAL main version */
N#define __CM0PLUS_CMSIS_VERSION_SUB  (0x1EU)                                   /*!< [15:0]  CMSIS HAL sub version */
N#define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
N                                       __CM0PLUS_CMSIS_VERSION_SUB           ) /*!< CMSIS HAL version number */
X#define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) |                                        __CM0PLUS_CMSIS_VERSION_SUB           )  
N
N#define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core */
N
N
N#if   defined ( __CC_ARM )
X#if   1L
N  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler */
N  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler */
N  #define __STATIC_INLINE  static __inline
N
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler */
S  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler */
S  #define __STATIC_INLINE  static __inline
S
S#elif defined ( __GNUC__ )
S  #define __ASM            __asm                                      /*!< asm keyword for GNU Compiler */
S  #define __INLINE         inline                                     /*!< inline keyword for GNU Compiler */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __ICCARM__ )
S  #define __ASM            __asm                                      /*!< asm keyword for IAR Compiler */
S  #define __INLINE         inline                                     /*!< inline keyword for IAR Compiler. Only available in High optimization mode! */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __TMS470__ )
S  #define __ASM            __asm                                      /*!< asm keyword for TI CCS Compiler */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __TASKING__ )
S  #define __ASM            __asm                                      /*!< asm keyword for TASKING Compiler */
S  #define __INLINE         inline                                     /*!< inline keyword for TASKING Compiler */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __CSMC__ )
S  #define __packed
S  #define __ASM            _asm                                      /*!< asm keyword for COSMIC Compiler */
S  #define __INLINE         inline                                    /*!< inline keyword for COSMIC Compiler. Use -pc99 on compile line */
S  #define __STATIC_INLINE  static inline
S
S#else
S  #error Unknown compiler
N#endif
N
N/** __FPU_USED indicates whether an FPU is used or not.
N    This core does not support an FPU at all
N*/
N#define __FPU_USED       0U
N
N#if defined ( __CC_ARM )
X#if 1L
N  #if defined __TARGET_FPU_VFP
X  #if 0L
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
N  #endif
N
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #if defined __ARM_PCS_VFP
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __GNUC__ )
S  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __ICCARM__ )
S  #if defined __ARMVFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TMS470__ )
S  #if defined __TI_VFP_SUPPORT__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TASKING__ )
S  #if defined __FPU_VFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __CSMC__ )
S  #if ( __CSMC__ & 0x400U)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
N#endif
N
N#include "core_cmInstr.h"                /* Core Instruction Access */
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Include\core_cmInstr.h" 1
N/**************************************************************************//**
N * @file     core_cmInstr.h
N * @brief    CMSIS Cortex-M Core Instruction Access Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060183 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CMINSTR_H
N#define __CORE_CMINSTR_H
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/*------------------ RealView Compiler -----------------*/
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Include\cmsis_armcc.h" 1
N/**************************************************************************//**
N * @file     cmsis_armcc.h
N * @brief    CMSIS Cortex-M Core Function/Instruction Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#ifndef __CMSIS_ARMCC_H
N#define __CMSIS_ARMCC_H
N
N
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 400677)
X#if 1L && (5060183 < 400677)
S  #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
N#endif
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N/* intrinsic void __enable_irq();     */
N/* intrinsic void __disable_irq();    */
N
N/**
N  \brief   Get Control Register
N  \details Returns the content of the Control Register.
N  \return               Control Register value
N */
N__STATIC_INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N
N/**
N  \brief   Set Control Register
N  \details Writes the given value to the Control Register.
N  \param [in]    control  Control Register value to set
N */
N__STATIC_INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N
N/**
N  \brief   Get IPSR Register
N  \details Returns the content of the IPSR Register.
N  \return               IPSR Register value
N */
N__STATIC_INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N
N
N/**
N  \brief   Get APSR Register
N  \details Returns the content of the APSR Register.
N  \return               APSR Register value
N */
N__STATIC_INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N
N
N/**
N  \brief   Get xPSR Register
N  \details Returns the content of the xPSR Register.
N  \return               xPSR Register value
N */
N__STATIC_INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N
N
N/**
N  \brief   Get Process Stack Pointer
N  \details Returns the current value of the Process Stack Pointer (PSP).
N  \return               PSP Register value
N */
N__STATIC_INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N
N
N/**
N  \brief   Set Process Stack Pointer
N  \details Assigns the given value to the Process Stack Pointer (PSP).
N  \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N
N
N/**
N  \brief   Get Main Stack Pointer
N  \details Returns the current value of the Main Stack Pointer (MSP).
N  \return               MSP Register value
N */
N__STATIC_INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N
N
N/**
N  \brief   Set Main Stack Pointer
N  \details Assigns the given value to the Main Stack Pointer (MSP).
N  \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N
N
N/**
N  \brief   Get Priority Mask
N  \details Returns the current state of the priority mask bit from the Priority Mask Register.
N  \return               Priority Mask value
N */
N__STATIC_INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N
N/**
N  \brief   Set Priority Mask
N  \details Assigns the given value to the Priority Mask Register.
N  \param [in]    priMask  Priority Mask
N */
N__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N
N#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
X#if       ((0x00U) >= 0x03U) || (__CORTEX_SC >= 300U)
S
S/**
S  \brief   Enable FIQ
S  \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __enable_fault_irq                __enable_fiq
S
S
S/**
S  \brief   Disable FIQ
S  \details Disables FIQ interrupts by setting the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __disable_fault_irq               __disable_fiq
S
S
S/**
S  \brief   Get Base Priority
S  \details Returns the current value of the Base Priority register.
S  \return               Base Priority register value
S */
S__STATIC_INLINE uint32_t  __get_BASEPRI(void)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  return(__regBasePri);
S}
S
S
S/**
S  \brief   Set Base Priority
S  \details Assigns the given value to the Base Priority register.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  __regBasePri = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Set Base Priority with condition
S  \details Assigns the given value to the Base Priority register only if BASEPRI masking is disabled,
S           or the new value increases the BASEPRI priority level.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
S{
S  register uint32_t __regBasePriMax      __ASM("basepri_max");
S  __regBasePriMax = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Get Fault Mask
S  \details Returns the current value of the Fault Mask register.
S  \return               Fault Mask register value
S */
S__STATIC_INLINE uint32_t __get_FAULTMASK(void)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  return(__regFaultMask);
S}
S
S
S/**
S  \brief   Set Fault Mask
S  \details Assigns the given value to the Fault Mask register.
S  \param [in]    faultMask  Fault Mask value to set
S */
S__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  __regFaultMask = (faultMask & (uint32_t)1);
S}
S
N#endif /* (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U) */
N
N
N#if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
X#if       ((0x00U) == 0x04U) || ((0x00U) == 0x07U)
S
S/**
S  \brief   Get FPSCR
S  \details Returns the current value of the Floating Point Status/Control register.
S  \return               Floating Point Status/Control register value
S */
S__STATIC_INLINE uint32_t __get_FPSCR(void)
S{
S#if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
S  register uint32_t __regfpscr         __ASM("fpscr");
S  return(__regfpscr);
S#else
S   return(0U);
S#endif
S}
S
S
S/**
S  \brief   Set FPSCR
S  \details Assigns the given value to the Floating Point Status/Control register.
S  \param [in]    fpscr  Floating Point Status/Control value to set
S */
S__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
S{
S#if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
S  register uint32_t __regfpscr         __ASM("fpscr");
S  __regfpscr = (fpscr);
S#endif
S}
S
N#endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
N
N
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/**
N  \brief   No Operation
N  \details No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/**
N  \brief   Wait For Interrupt
N  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/**
N  \brief   Wait For Event
N  \details Wait For Event is a hint instruction that permits the processor to enter
N           a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/**
N  \brief   Send Event
N  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/**
N  \brief   Instruction Synchronization Barrier
N  \details Instruction Synchronization Barrier flushes the pipeline in the processor,
N           so that all instructions following the ISB are fetched from cache or memory,
N           after the instruction has been completed.
N */
N#define __ISB() do {\
N                   __schedule_barrier();\
N                   __isb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __ISB() do {                   __schedule_barrier();                   __isb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Synchronization Barrier
N  \details Acts as a special kind of Data Memory Barrier.
N           It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB() do {\
N                   __schedule_barrier();\
N                   __dsb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DSB() do {                   __schedule_barrier();                   __dsb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Memory Barrier
N  \details Ensures the apparent order of the explicit memory operations before
N           and after the instruction, without ensuring their completion.
N */
N#define __DMB() do {\
N                   __schedule_barrier();\
N                   __dmb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DMB() do {                   __schedule_barrier();                   __dmb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Reverse byte order (32 bit)
N  \details Reverses the byte order in integer value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order in two unsigned short values.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
X__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif
N
N/**
N  \brief   Reverse byte order in signed short value
N  \details Reverses the byte order in a signed short value with sign extension to integer.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
X__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Rotate Right in unsigned value (32 bit)
N  \details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N  \param [in]    value  Value to rotate
N  \param [in]    value  Number of Bits to rotate
N  \return               Rotated value
N */
N#define __ROR                             __ror
N
N
N/**
N  \brief   Breakpoint
N  \details Causes the processor to enter Debug state.
N           Debug tools can use this to investigate system state when the instruction at a particular address is reached.
N  \param [in]    value  is ignored by the processor.
N                 If required, a debugger can use it to store additional information about the breakpoint.
N */
N#define __BKPT(value)                       __breakpoint(value)
N
N
N/**
N  \brief   Reverse bit order of value
N  \details Reverses the bit order of the given value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
X#if       ((0x00U) >= 0x03U) || (__CORTEX_SC >= 300U)
S  #define __RBIT                          __rbit
N#else
N__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
X__attribute__((always_inline)) static __inline uint32_t __RBIT(uint32_t value)
N{
N  uint32_t result;
N  int32_t s = 4 /*sizeof(v)*/ * 8 - 1; /* extra shift needed at end */
N
N  result = value;                      /* r will be reversed bits of v; first get LSB of v */
N  for (value >>= 1U; value; value >>= 1U)
N  {
N    result <<= 1U;
N    result |= value & 1U;
N    s--;
N  }
N  result <<= s;                        /* shift when v's highest bits are zero */
N  return(result);
N}
N#endif
N
N
N/**
N  \brief   Count leading zeros
N  \details Counts the number of leading zeros of a data value.
N  \param [in]  value  Value to count the leading zeros
N  \return             number of leading zeros in value
N */
N#define __CLZ                             __clz
N
N
N#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
X#if       ((0x00U) >= 0x03U) || (__CORTEX_SC >= 300U)
S
S/**
S  \brief   LDR Exclusive (8 bit)
S  \details Executes a exclusive LDR instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXB(ptr)                                                        ((uint8_t ) __ldrex(ptr))
S#else
S  #define __LDREXB(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint8_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (16 bit)
S  \details Executes a exclusive LDR instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
S#else
S  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (32 bit)
S  \details Executes a exclusive LDR instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXW(ptr)                                                        ((uint32_t ) __ldrex(ptr))
S#else
S  #define __LDREXW(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint32_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (8 bit)
S  \details Executes a exclusive STR instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXB(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXB(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (16 bit)
S  \details Executes a exclusive STR instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXH(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXH(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (32 bit)
S  \details Executes a exclusive STR instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXW(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXW(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   Remove the exclusive lock
S  \details Removes the exclusive lock which is created by LDREX.
S */
S#define __CLREX                           __clrex
S
S
S/**
S  \brief   Signed Saturate
S  \details Saturates a signed value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (1..32)
S  \return             Saturated value
S */
S#define __SSAT                            __ssat
S
S
S/**
S  \brief   Unsigned Saturate
S  \details Saturates an unsigned value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (0..31)
S  \return             Saturated value
S */
S#define __USAT                            __usat
S
S
S/**
S  \brief   Rotate Right with Extend (32 bit)
S  \details Moves each bit of a bitstring right by one bit.
S           The carry input is shifted in at the left end of the bitstring.
S  \param [in]    value  Value to rotate
S  \return               Rotated value
S */
S#ifndef __NO_EMBEDDED_ASM
S__attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
S{
S  rrx r0, r0
S  bx lr
S}
S#endif
S
S
S/**
S  \brief   LDRT Unprivileged (8 bit)
S  \details Executes a Unprivileged LDRT instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (16 bit)
S  \details Executes a Unprivileged LDRT instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (32 bit)
S  \details Executes a Unprivileged LDRT instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
S
S
S/**
S  \brief   STRT Unprivileged (8 bit)
S  \details Executes a Unprivileged STRT instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRBT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (16 bit)
S  \details Executes a Unprivileged STRT instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRHT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (32 bit)
S  \details Executes a Unprivileged STRT instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRT(value, ptr)                __strt(value, ptr)
S
N#endif /* (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U) */
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N#if (__CORTEX_M >= 0x04U)  /* only for Cortex-M4 and above */
X#if ((0x00U) >= 0x04U)   
S
S#define __SADD8                           __sadd8
S#define __QADD8                           __qadd8
S#define __SHADD8                          __shadd8
S#define __UADD8                           __uadd8
S#define __UQADD8                          __uqadd8
S#define __UHADD8                          __uhadd8
S#define __SSUB8                           __ssub8
S#define __QSUB8                           __qsub8
S#define __SHSUB8                          __shsub8
S#define __USUB8                           __usub8
S#define __UQSUB8                          __uqsub8
S#define __UHSUB8                          __uhsub8
S#define __SADD16                          __sadd16
S#define __QADD16                          __qadd16
S#define __SHADD16                         __shadd16
S#define __UADD16                          __uadd16
S#define __UQADD16                         __uqadd16
S#define __UHADD16                         __uhadd16
S#define __SSUB16                          __ssub16
S#define __QSUB16                          __qsub16
S#define __SHSUB16                         __shsub16
S#define __USUB16                          __usub16
S#define __UQSUB16                         __uqsub16
S#define __UHSUB16                         __uhsub16
S#define __SASX                            __sasx
S#define __QASX                            __qasx
S#define __SHASX                           __shasx
S#define __UASX                            __uasx
S#define __UQASX                           __uqasx
S#define __UHASX                           __uhasx
S#define __SSAX                            __ssax
S#define __QSAX                            __qsax
S#define __SHSAX                           __shsax
S#define __USAX                            __usax
S#define __UQSAX                           __uqsax
S#define __UHSAX                           __uhsax
S#define __USAD8                           __usad8
S#define __USADA8                          __usada8
S#define __SSAT16                          __ssat16
S#define __USAT16                          __usat16
S#define __UXTB16                          __uxtb16
S#define __UXTAB16                         __uxtab16
S#define __SXTB16                          __sxtb16
S#define __SXTAB16                         __sxtab16
S#define __SMUAD                           __smuad
S#define __SMUADX                          __smuadx
S#define __SMLAD                           __smlad
S#define __SMLADX                          __smladx
S#define __SMLALD                          __smlald
S#define __SMLALDX                         __smlaldx
S#define __SMUSD                           __smusd
S#define __SMUSDX                          __smusdx
S#define __SMLSD                           __smlsd
S#define __SMLSDX                          __smlsdx
S#define __SMLSLD                          __smlsld
S#define __SMLSLDX                         __smlsldx
S#define __SEL                             __sel
S#define __QADD                            __qadd
S#define __QSUB                            __qsub
S
S#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |  \
S                                           ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
X#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |                                             ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
S
S#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |  \
S                                           ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
X#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |                                             ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
S
S#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) + \
S                                                      ((int64_t)(ARG3) << 32U)     ) >> 32U))
X#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) +                                                       ((int64_t)(ARG3) << 32U)     ) >> 32U))
S
N#endif /* (__CORTEX_M >= 0x04) */
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#endif /* __CMSIS_ARMCC_H */
L 54 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Include\core_cmInstr.h" 2
N
N/*------------------ ARM Compiler V6 -------------------*/
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #include "cmsis_armcc_V6.h"
S
S/*------------------ GNU Compiler ----------------------*/
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S/*------------------ ICC Compiler ----------------------*/
S#elif defined ( __ICCARM__ )
S  #include <cmsis_iar.h>
S
S/*------------------ TI CCS Compiler -------------------*/
S#elif defined ( __TMS470__ )
S  #include <cmsis_ccs.h>
S
S/*------------------ TASKING Compiler ------------------*/
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S/*------------------ COSMIC Compiler -------------------*/
S#elif defined ( __CSMC__ )
S  #include <cmsis_csm.h>
S
N#endif
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N#endif /* __CORE_CMINSTR_H */
L 164 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Include\core_cm0plus.h" 2
N#include "core_cmFunc.h"                 /* Core Function Access */
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Include\core_cmFunc.h" 1
N/**************************************************************************//**
N * @file     core_cmFunc.h
N * @brief    CMSIS Cortex-M Core Function Access Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060183 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CMFUNC_H
N#define __CORE_CMFUNC_H
N
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N*/
N
N/*------------------ RealView Compiler -----------------*/
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
N
N/*------------------ ARM Compiler V6 -------------------*/
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #include "cmsis_armcc_V6.h"
S
S/*------------------ GNU Compiler ----------------------*/
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S/*------------------ ICC Compiler ----------------------*/
S#elif defined ( __ICCARM__ )
S  #include <cmsis_iar.h>
S
S/*------------------ TI CCS Compiler -------------------*/
S#elif defined ( __TMS470__ )
S  #include <cmsis_ccs.h>
S
S/*------------------ TASKING Compiler ------------------*/
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S/*------------------ COSMIC Compiler -------------------*/
S#elif defined ( __CSMC__ )
S  #include <cmsis_csm.h>
S
N#endif
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N#endif /* __CORE_CMFUNC_H */
L 165 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Include\core_cm0plus.h" 2
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0PLUS_H_GENERIC */
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM0PLUS_H_DEPENDANT
N#define __CORE_CM0PLUS_H_DEPENDANT
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* check device defines and use defaults */
N#if defined __CHECK_DEVICE_DEFINES
X#if 0L
S  #ifndef __CM0PLUS_REV
S    #define __CM0PLUS_REV             0x0000U
S    #warning "__CM0PLUS_REV not defined in device header file; using default!"
S  #endif
S
S  #ifndef __MPU_PRESENT
S    #define __MPU_PRESENT             0U
S    #warning "__MPU_PRESENT not defined in device header file; using default!"
S  #endif
S
S  #ifndef __VTOR_PRESENT
S    #define __VTOR_PRESENT            0U
S    #warning "__VTOR_PRESENT not defined in device header file; using default!"
S  #endif
S
S  #ifndef __NVIC_PRIO_BITS
S    #define __NVIC_PRIO_BITS          2U
S    #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
S  #endif
S
S  #ifndef __Vendor_SysTickConfig
S    #define __Vendor_SysTickConfig    0U
S    #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
S  #endif
N#endif
N
N/* IO definitions (access restrictions to peripheral registers) */
N/**
N    \defgroup CMSIS_glob_defs CMSIS Global Defines
N
N    <strong>IO Type Qualifiers</strong> are used
N    \li to specify the access to peripheral variables.
N    \li for automatic generation of peripheral register debug information.
N*/
N#ifdef __cplusplus
S  #define   __I     volatile             /*!< Defines 'read only' permissions */
N#else
N  #define   __I     volatile const       /*!< Defines 'read only' permissions */
N#endif
N#define     __O     volatile             /*!< Defines 'write only' permissions */
N#define     __IO    volatile             /*!< Defines 'read / write' permissions */
N
N/* following defines should be used for structure members */
N#define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
N#define     __OM     volatile            /*! Defines 'write only' structure member permissions */
N#define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
N
N/*@} end of group Cortex-M0+ */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N  - Core MPU Register
N ******************************************************************************/
N/**
N  \defgroup CMSIS_core_register Defines and Type Definitions
N  \brief Type definitions and defines for Cortex-M processor based devices.
N*/
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_CORE  Status and Control Registers
N  \brief      Core Register type definitions.
N  @{
N */
N
N/**
N  \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} APSR_Type;
N
N/* APSR Register Definitions */
N#define APSR_N_Pos                         31U                                            /*!< APSR: N Position */
N#define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR: N Mask */
N
N#define APSR_Z_Pos                         30U                                            /*!< APSR: Z Position */
N#define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR: Z Mask */
N
N#define APSR_C_Pos                         29U                                            /*!< APSR: C Position */
N#define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR: C Mask */
N
N#define APSR_V_Pos                         28U                                            /*!< APSR: V Position */
N#define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR: V Mask */
N
N
N/**
N  \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} IPSR_Type;
N
N/* IPSR Register Definitions */
N#define IPSR_ISR_Pos                        0U                                            /*!< IPSR: ISR Position */
N#define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
N    uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} xPSR_Type;
N
N/* xPSR Register Definitions */
N#define xPSR_N_Pos                         31U                                            /*!< xPSR: N Position */
N#define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR: N Mask */
N
N#define xPSR_Z_Pos                         30U                                            /*!< xPSR: Z Position */
N#define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR: Z Mask */
N
N#define xPSR_C_Pos                         29U                                            /*!< xPSR: C Position */
N#define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR: C Mask */
N
N#define xPSR_V_Pos                         28U                                            /*!< xPSR: V Position */
N#define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR: V Mask */
N
N#define xPSR_T_Pos                         24U                                            /*!< xPSR: T Position */
N#define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR: T Mask */
N
N#define xPSR_ISR_Pos                        0U                                            /*!< xPSR: ISR Position */
N#define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
N    uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} CONTROL_Type;
N
N/* CONTROL Register Definitions */
N#define CONTROL_SPSEL_Pos                   1U                                            /*!< CONTROL: SPSEL Position */
N#define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONTROL: SPSEL Mask */
N
N#define CONTROL_nPRIV_Pos                   0U                                            /*!< CONTROL: nPRIV Position */
N#define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONTROL: nPRIV Mask */
N
N/*@} end of group CMSIS_CORE */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
N  \brief      Type definitions for the NVIC Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
X  volatile uint32_t ISER[1U];                
N        uint32_t RESERVED0[31U];
N  __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register */
X  volatile uint32_t ICER[1U];                
N        uint32_t RSERVED1[31U];
N  __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register */
X  volatile uint32_t ISPR[1U];                
N        uint32_t RESERVED2[31U];
N  __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register */
X  volatile uint32_t ICPR[1U];                
N        uint32_t RESERVED3[31U];
N        uint32_t RESERVED4[64U];
N  __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
X  volatile uint32_t IP[8U];                  
N}  NVIC_Type;
N
N/*@} end of group CMSIS_NVIC */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCB     System Control Block (SCB)
N  \brief    Type definitions for the System Control Block Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
X  volatile const  uint32_t CPUID;                   
N  __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register */
X  volatile uint32_t ICSR;                    
N#if (__VTOR_PRESENT == 1U)
X#if (1 == 1U)
N  __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
X  volatile uint32_t VTOR;                    
N#else
S        uint32_t RESERVED0;
N#endif
N  __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register */
X  volatile uint32_t AIRCR;                   
N  __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
X  volatile uint32_t SCR;                     
N  __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register */
X  volatile uint32_t CCR;                     
N        uint32_t RESERVED1;
N  __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registers. [0] is RESERVED */
X  volatile uint32_t SHP[2U];                 
N  __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State Register */
X  volatile uint32_t SHCSR;                   
N} SCB_Type;
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB ICSR: VECTACTIVE Mask */
N
N#if (__VTOR_PRESENT == 1U)
X#if (1 == 1U)
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB VTOR: TBLOFF Position */
N#define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB VTOR: TBLOFF Mask */
N#endif
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
N  \brief    Type definitions for the System Timer Registers.
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
X  volatile uint32_t LOAD;                    
N  __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register */
X  volatile uint32_t VAL;                     
N  __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
X  volatile const  uint32_t CALIB;                   
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N#if (__MPU_PRESENT == 1U)
X#if (1 == 1U)
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
N  \brief    Type definitions for the Memory Protection Unit (MPU)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Memory Protection Unit (MPU).
N */
Ntypedef struct
N{
N  __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
X  volatile const  uint32_t TYPE;                    
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
X  volatile uint32_t RNR;                     
N  __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register */
X  volatile uint32_t RBAR;                    
N  __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Register */
X  volatile uint32_t RASR;                    
N} MPU_Type;
N
N/* MPU Type Register Definitions */
N#define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU TYPE: IREGION Position */
N#define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU TYPE: IREGION Mask */
N
N#define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU TYPE: DREGION Position */
N#define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU TYPE: DREGION Mask */
N
N#define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU TYPE: SEPARATE Position */
N#define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU TYPE: SEPARATE Mask */
N
N/* MPU Control Register Definitions */
N#define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU CTRL: PRIVDEFENA Position */
N#define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU CTRL: PRIVDEFENA Mask */
N
N#define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU CTRL: HFNMIENA Position */
N#define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU CTRL: HFNMIENA Mask */
N
N#define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU CTRL: ENABLE Position */
N#define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU CTRL: ENABLE Mask */
N
N/* MPU Region Number Register Definitions */
N#define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU RNR: REGION Position */
N#define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU RNR: REGION Mask */
N
N/* MPU Region Base Address Register Definitions */
N#define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU RBAR: ADDR Position */
N#define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU RBAR: ADDR Mask */
N
N#define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU RBAR: VALID Position */
N#define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU RBAR: VALID Mask */
N
N#define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU RBAR: REGION Position */
N#define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU RBAR: REGION Mask */
N
N/* MPU Region Attribute and Size Register Definitions */
N#define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU RASR: MPU Region Attribute field Position */
N#define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU RASR: MPU Region Attribute field Mask */
N
N#define MPU_RASR_XN_Pos                    28U                                            /*!< MPU RASR: ATTRS.XN Position */
N#define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU RASR: ATTRS.XN Mask */
N
N#define MPU_RASR_AP_Pos                    24U                                            /*!< MPU RASR: ATTRS.AP Position */
N#define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU RASR: ATTRS.AP Mask */
N
N#define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU RASR: ATTRS.TEX Position */
N#define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU RASR: ATTRS.TEX Mask */
N
N#define MPU_RASR_S_Pos                     18U                                            /*!< MPU RASR: ATTRS.S Position */
N#define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU RASR: ATTRS.S Mask */
N
N#define MPU_RASR_C_Pos                     17U                                            /*!< MPU RASR: ATTRS.C Position */
N#define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU RASR: ATTRS.C Mask */
N
N#define MPU_RASR_B_Pos                     16U                                            /*!< MPU RASR: ATTRS.B Position */
N#define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU RASR: ATTRS.B Mask */
N
N#define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU RASR: Sub-Region Disable Position */
N#define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU RASR: Sub-Region Disable Mask */
N
N#define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU RASR: Region Size Field Position */
N#define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU RASR: Region Size Field Mask */
N
N#define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU RASR: Region enable bit Position */
N#define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU RASR: Region enable bit Disable Mask */
N
N/*@} end of group CMSIS_MPU */
N#endif
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
N  \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible over DAP and not via processor.
N            Therefore they are not covered by the Cortex-M0+ header file.
N  @{
N */
N/*@} end of group CMSIS_CoreDebug */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_bitfield     Core register bit field macros
N  \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
N  @{
N */
N
N/**
N  \brief   Mask and shift a bit field value for use in a register bit range.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of the bit field.
N  \return           Masked and shifted value.
N*/
N#define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
N
N/**
N  \brief     Mask and shift a register value to extract a bit filed value.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of register.
N  \return           Masked and shifted bit field value.
N*/
N#define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
N
N/*@} end of group CMSIS_core_bitfield */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_base     Core Definitions
N  \brief      Definitions for base addresses, unions, and structures.
N  @{
N */
N
N/* Memory mapping of Cortex-M0+ Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
N
N#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct */
N#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct */
N#define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struct */
N
N#if (__MPU_PRESENT == 1U)
X#if (1 == 1U)
N  #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit */
N  #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit */
N#endif
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Register Access Functions
N ******************************************************************************/
N/**
N  \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_NVICFunctions NVIC Functions
N  \brief    Functions that manage interrupts and exceptions via the NVIC.
N  @{
N */
N
N/* Interrupt Priorities are WORD accessible only under ARMv6M                   */
N/* The following MACROS handle generation of the register offset and byte masks */
N#define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
N#define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
N#define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
N
N
N/**
N  \brief   Enable External Interrupt
N  \details Enables a device-specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  External interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N}
N
N
N/**
N  \brief   Disable External Interrupt
N  \details Disables a device-specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  External interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N}
N
N
N/**
N  \brief   Get Pending Interrupt
N  \details Reads the pending register in the NVIC and returns the pending bit for the specified interrupt.
N  \param [in]      IRQn  Interrupt number.
N  \return             0  Interrupt status is not pending.
N  \return             1  Interrupt status is pending.
N */
N__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X  return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N}
N
N
N/**
N  \brief   Set Pending Interrupt
N  \details Sets the pending bit of an external interrupt.
N  \param [in]      IRQn  Interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N}
N
N
N/**
N  \brief   Clear Pending Interrupt
N  \details Clears the pending bit of an external interrupt.
N  \param [in]      IRQn  External interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N}
N
N
N/**
N  \brief   Set Interrupt Priority
N  \details Sets the priority of an interrupt.
N  \note    The priority cannot be set for every core interrupt.
N  \param [in]      IRQn  Interrupt number.
N  \param [in]  priority  Priority to set.
N */
N__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if ((int32_t)(IRQn) < 0)
N  {
N    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] = ((uint32_t)(((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N  else
N  {
N    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  = ((uint32_t)(((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Priority
N  \details Reads the priority of an interrupt.
N           The interrupt number can be positive to specify an external (device specific) interrupt,
N           or negative to specify an internal (core) interrupt.
N  \param [in]   IRQn  Interrupt number.
N  \return             Interrupt Priority.
N                      Value is aligned automatically to the implemented priority bits of the microcontroller.
N */
N__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if ((int32_t)(IRQn) < 0)
N  {
N    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N  else
N  {
N    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[ ( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N}
N
N
N/**
N  \brief   System Reset
N  \details Initiates a system reset request to reset the MCU.
N */
N__STATIC_INLINE void NVIC_SystemReset(void)
Xstatic __inline void NVIC_SystemReset(void)
N{
N  __DSB();                                                          /* Ensure all outstanding memory accesses included
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                          
N                                                                       buffered write are completed before reset */
N  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = ((0x5FAUL << 16U) |
N                 SCB_AIRCR_SYSRESETREQ_Msk);
X                 (1UL << 2U));
N  __DSB();                                                          /* Ensure completion of memory access */
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                           
N
N  for(;;)                                                           /* wait until reset */
N  {
N    __NOP();
X    __nop();
N  }
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
N  \brief    Functions that configure the System.
N  @{
N */
N
N#if (__Vendor_SysTickConfig == 0U)
X#if (0 == 0U)
N
N/**
N  \brief   System Tick Configuration
N  \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
N           Counter is in free running mode to generate periodic interrupts.
N  \param [in]  ticks  Number of ticks between two interrupts.
N  \return          0  Function succeeded.
N  \return          1  Function failed.
N  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
N           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
N           must contain a vendor-specific implementation of this function.
N */
N__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{
N  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
X  if ((ticks - 1UL) > (0xFFFFFFUL ))
N  {
N    return (1UL);                                                   /* Reload value impossible */
N  }
N
N  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (uint32_t)(ticks - 1UL);                          
N  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
X  NVIC_SetPriority (SysTick_IRQn, (1UL << 2) - 1UL);  
N  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0UL;                                              
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2U) |
N                   SysTick_CTRL_TICKINT_Msk   |
X                   (1UL << 1U)   |
N                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL );                          
N  return (0UL);                                                     /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0PLUS_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
L 130 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include\stm32l053xx.h" 2
N#include "system_stm32l0xx.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include\system_stm32l0xx.h" 1
N/**
N  ******************************************************************************
N  * @file    system_stm32l0xx.h
N  * @author  MCD Application Team
N  * @brief   CMSIS Cortex-M0+ Device Peripheral Access Layer System Header File.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */
N
N/** @addtogroup CMSIS
N  * @{
N  */
N
N/** @addtogroup stm32l0xx_system
N  * @{
N  */  
N  
N/**
N  * @brief Define to prevent recursive inclusion
N  */
N#ifndef __SYSTEM_STM32L0XX_H
N#define __SYSTEM_STM32L0XX_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif 
N
N/** @addtogroup STM32L0xx_System_Includes
N  * @{
N  */
N
N/**
N  * @}
N  */
N
N
N/** @addtogroup STM32L0xx_System_Exported_types
N  * @{
N  */
N  /* This variable is updated in three ways:
N      1) by calling CMSIS function SystemCoreClockUpdate()
N      2) by calling HAL API function HAL_RCC_GetSysClockFreq()
N      3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency 
N         Note: If you use this function to configure the system clock; then there
N               is no need to call the 2 first functions listed above, since SystemCoreClock
N               variable is updated automatically.
N  */
Nextern uint32_t SystemCoreClock;          /*!< System Clock Frequency (Core Clock) */
N/*
N*/
Nextern const uint8_t AHBPrescTable[16];   /*!< AHB prescalers table values */
Nextern const uint8_t APBPrescTable[8];    /*!< APB prescalers table values */
Nextern const uint8_t PLLMulTable[9];      /*!< PLL multipiers table values */
N
N
N/**
N  * @}
N  */
N
N/** @addtogroup STM32L0xx_System_Exported_Constants
N  * @{
N  */
N
N/**
N  * @}
N  */
N
N/** @addtogroup STM32L0xx_System_Exported_Macros
N  * @{
N  */
N
N/**
N  * @}
N  */
N
N/** @addtogroup STM32L0xx_System_Exported_Functions
N  * @{
N  */
N  
Nextern void SystemInit(void);
Nextern void SystemCoreClockUpdate(void);
N/**
N  * @}
N  */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__SYSTEM_STM32L0XX_H */
N
N/**
N  * @}
N  */
N  
N/**
N  * @}
N  */  
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 131 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include\stm32l053xx.h" 2
N#include <stdint.h>
N
N/** @addtogroup Peripheral_registers_structures
N  * @{
N  */   
N
N/** 
N  * @brief Analog to Digital Converter  
N  */
N
Ntypedef struct
N{
N  __IO uint32_t ISR;          /*!< ADC Interrupt and Status register,                          Address offset:0x00 */
X  volatile uint32_t ISR;           
N  __IO uint32_t IER;          /*!< ADC Interrupt Enable register,                              Address offset:0x04 */
X  volatile uint32_t IER;           
N  __IO uint32_t CR;           /*!< ADC Control register,                                       Address offset:0x08 */
X  volatile uint32_t CR;            
N  __IO uint32_t CFGR1;        /*!< ADC Configuration register 1,                               Address offset:0x0C */
X  volatile uint32_t CFGR1;         
N  __IO uint32_t CFGR2;        /*!< ADC Configuration register 2,                               Address offset:0x10 */
X  volatile uint32_t CFGR2;         
N  __IO uint32_t SMPR;         /*!< ADC Sampling time register,                                 Address offset:0x14 */
X  volatile uint32_t SMPR;          
N  uint32_t   RESERVED1;       /*!< Reserved,                                                                  0x18 */
N  uint32_t   RESERVED2;       /*!< Reserved,                                                                  0x1C */
N  __IO uint32_t TR;           /*!< ADC watchdog threshold register,                            Address offset:0x20 */
X  volatile uint32_t TR;            
N  uint32_t   RESERVED3;       /*!< Reserved,                                                                  0x24 */
N  __IO uint32_t CHSELR;       /*!< ADC channel selection register,                             Address offset:0x28 */
X  volatile uint32_t CHSELR;        
N  uint32_t   RESERVED4[5];    /*!< Reserved,                                                                  0x2C */
N  __IO uint32_t DR;           /*!< ADC data register,                                          Address offset:0x40 */
X  volatile uint32_t DR;            
N  uint32_t   RESERVED5[28];   /*!< Reserved,                                                           0x44 - 0xB0 */
N  __IO uint32_t CALFACT;      /*!< ADC data register,                                          Address offset:0xB4 */
X  volatile uint32_t CALFACT;       
N} ADC_TypeDef;
N
Ntypedef struct
N{
N  __IO uint32_t CCR;
X  volatile uint32_t CCR;
N} ADC_Common_TypeDef;
N
N
N/**
N  * @brief Comparator 
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CSR;     /*!< COMP comparator control and status register, Address offset: 0x18 */
X  volatile uint32_t CSR;      
N} COMP_TypeDef;
N
Ntypedef struct
N{
N  __IO uint32_t CSR;         /*!< COMP control and status register, used for bits common to several COMP instances, Address offset: 0x00 */
X  volatile uint32_t CSR;          
N} COMP_Common_TypeDef;
N
N
N/**
N* @brief CRC calculation unit
N*/
N
Ntypedef struct
N{
N__IO uint32_t DR;            /*!< CRC Data register,                            Address offset: 0x00 */
Xvolatile uint32_t DR;             
N__IO uint8_t IDR;            /*!< CRC Independent data register,                Address offset: 0x04 */
Xvolatile uint8_t IDR;             
Nuint8_t RESERVED0;           /*!< Reserved,                                                     0x05 */
Nuint16_t RESERVED1;          /*!< Reserved,                                                     0x06 */
N__IO uint32_t CR;            /*!< CRC Control register,                         Address offset: 0x08 */
Xvolatile uint32_t CR;             
Nuint32_t RESERVED2;          /*!< Reserved,                                                     0x0C */
N__IO uint32_t INIT;          /*!< Initial CRC value register,                   Address offset: 0x10 */
Xvolatile uint32_t INIT;           
N__IO uint32_t POL;           /*!< CRC polynomial register,                      Address offset: 0x14 */
Xvolatile uint32_t POL;            
N} CRC_TypeDef;
N
N/**
N  * @brief Clock Recovery System 
N  */
N
Ntypedef struct 
N{
N__IO uint32_t CR;     /*!< CRS ccontrol register,              Address offset: 0x00 */
Xvolatile uint32_t CR;      
N__IO uint32_t CFGR;   /*!< CRS configuration register,         Address offset: 0x04 */
Xvolatile uint32_t CFGR;    
N__IO uint32_t ISR;    /*!< CRS interrupt and status register,  Address offset: 0x08 */
Xvolatile uint32_t ISR;     
N__IO uint32_t ICR;    /*!< CRS interrupt flag clear register,  Address offset: 0x0C */
Xvolatile uint32_t ICR;     
N} CRS_TypeDef;
N
N/** 
N  * @brief Digital to Analog Converter
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CR;            /*!< DAC control register,                                    Address offset: 0x00 */
X  volatile uint32_t CR;             
N  __IO uint32_t SWTRIGR;       /*!< DAC software trigger register,                           Address offset: 0x04 */
X  volatile uint32_t SWTRIGR;        
N  __IO uint32_t DHR12R1;       /*!< DAC channel1 12-bit right-aligned data holding register, Address offset: 0x08 */
X  volatile uint32_t DHR12R1;        
N  __IO uint32_t DHR12L1;       /*!< DAC channel1 12-bit left aligned data holding register,  Address offset: 0x0C */
X  volatile uint32_t DHR12L1;        
N  __IO uint32_t DHR8R1;        /*!< DAC channel1 8-bit right aligned data holding register,  Address offset: 0x10 */
X  volatile uint32_t DHR8R1;         
N  uint32_t      RESERVED0[6];  /*!<                                                                     0x14-0x28 */
N  __IO uint32_t DOR1;          /*!< DAC channel1 data output register,                       Address offset: 0x2C */
X  volatile uint32_t DOR1;           
N  uint32_t      RESERVED1;     /*!<                                                                          0x30 */
N  __IO uint32_t SR;            /*!< DAC status register,                                     Address offset: 0x34 */
X  volatile uint32_t SR;             
N} DAC_TypeDef;
N
N/** 
N  * @brief Debug MCU
N  */
N
Ntypedef struct
N{
N  __IO uint32_t IDCODE;       /*!< MCU device ID code,                          Address offset: 0x00 */
X  volatile uint32_t IDCODE;        
N  __IO uint32_t CR;           /*!< Debug MCU configuration register,            Address offset: 0x04 */
X  volatile uint32_t CR;            
N  __IO uint32_t APB1FZ;       /*!< Debug MCU APB1 freeze register,              Address offset: 0x08 */
X  volatile uint32_t APB1FZ;        
N  __IO uint32_t APB2FZ;       /*!< Debug MCU APB2 freeze register,              Address offset: 0x0C */
X  volatile uint32_t APB2FZ;        
N}DBGMCU_TypeDef;
N
N/** 
N  * @brief DMA Controller
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CCR;          /*!< DMA channel x configuration register */
X  volatile uint32_t CCR;           
N  __IO uint32_t CNDTR;        /*!< DMA channel x number of data register */
X  volatile uint32_t CNDTR;         
N  __IO uint32_t CPAR;         /*!< DMA channel x peripheral address register */
X  volatile uint32_t CPAR;          
N  __IO uint32_t CMAR;         /*!< DMA channel x memory address register */
X  volatile uint32_t CMAR;          
N} DMA_Channel_TypeDef;
N
Ntypedef struct
N{
N  __IO uint32_t ISR;          /*!< DMA interrupt status register,               Address offset: 0x00 */
X  volatile uint32_t ISR;           
N  __IO uint32_t IFCR;         /*!< DMA interrupt flag clear register,           Address offset: 0x04 */
X  volatile uint32_t IFCR;          
N} DMA_TypeDef;                                                                  
N                                                                                
Ntypedef struct                                                                  
N{                                                                               
N  __IO uint32_t CSELR;        /*!< DMA channel selection register,              Address offset: 0xA8 */
X  volatile uint32_t CSELR;         
N} DMA_Request_TypeDef;                                                          
N                                                                                
N/**                                                                             
N  * @brief External Interrupt/Event Controller                                  
N  */                                                                            
N                                                                                
Ntypedef struct                                                                  
N{                                                                               
N  __IO uint32_t IMR;          /*!<EXTI Interrupt mask register,                 Address offset: 0x00 */
X  volatile uint32_t IMR;           
N  __IO uint32_t EMR;          /*!<EXTI Event mask register,                     Address offset: 0x04 */
X  volatile uint32_t EMR;           
N  __IO uint32_t RTSR;         /*!<EXTI Rising trigger selection register ,      Address offset: 0x08 */
X  volatile uint32_t RTSR;          
N  __IO uint32_t FTSR;         /*!<EXTI Falling trigger selection register,      Address offset: 0x0C */
X  volatile uint32_t FTSR;          
N  __IO uint32_t SWIER;        /*!<EXTI Software interrupt event register,       Address offset: 0x10 */
X  volatile uint32_t SWIER;         
N  __IO uint32_t PR;           /*!<EXTI Pending register,                        Address offset: 0x14 */
X  volatile uint32_t PR;            
N}EXTI_TypeDef;
N
N/** 
N  * @brief FLASH Registers
N  */
Ntypedef struct
N{
N  __IO uint32_t ACR;           /*!< Access control register,                     Address offset: 0x00 */
X  volatile uint32_t ACR;            
N  __IO uint32_t PECR;          /*!< Program/erase control register,              Address offset: 0x04 */
X  volatile uint32_t PECR;           
N  __IO uint32_t PDKEYR;        /*!< Power down key register,                     Address offset: 0x08 */
X  volatile uint32_t PDKEYR;         
N  __IO uint32_t PEKEYR;        /*!< Program/erase key register,                  Address offset: 0x0c */
X  volatile uint32_t PEKEYR;         
N  __IO uint32_t PRGKEYR;       /*!< Program memory key register,                 Address offset: 0x10 */
X  volatile uint32_t PRGKEYR;        
N  __IO uint32_t OPTKEYR;       /*!< Option byte key register,                    Address offset: 0x14 */
X  volatile uint32_t OPTKEYR;        
N  __IO uint32_t SR;            /*!< Status register,                             Address offset: 0x18 */
X  volatile uint32_t SR;             
N  __IO uint32_t OPTR;          /*!< Option byte register,                        Address offset: 0x1c */
X  volatile uint32_t OPTR;           
N  __IO uint32_t WRPR;          /*!< Write protection register,                   Address offset: 0x20 */
X  volatile uint32_t WRPR;           
N} FLASH_TypeDef;
N
N
N/** 
N  * @brief Option Bytes Registers
N  */
Ntypedef struct
N{
N  __IO uint32_t RDP;               /*!< Read protection register,               Address offset: 0x00 */
X  volatile uint32_t RDP;                
N  __IO uint32_t USER;              /*!< user register,                          Address offset: 0x04 */
X  volatile uint32_t USER;               
N  __IO uint32_t WRP01;             /*!< write protection Bytes 0 and 1          Address offset: 0x08 */
X  volatile uint32_t WRP01;              
N} OB_TypeDef;
N  
N
N/** 
N  * @brief General Purpose IO
N  */
N
Ntypedef struct
N{
N  __IO uint32_t MODER;        /*!< GPIO port mode register,                     Address offset: 0x00 */
X  volatile uint32_t MODER;         
N  __IO uint32_t OTYPER;       /*!< GPIO port output type register,              Address offset: 0x04 */
X  volatile uint32_t OTYPER;        
N  __IO uint32_t OSPEEDR;      /*!< GPIO port output speed register,             Address offset: 0x08 */
X  volatile uint32_t OSPEEDR;       
N  __IO uint32_t PUPDR;        /*!< GPIO port pull-up/pull-down register,        Address offset: 0x0C */
X  volatile uint32_t PUPDR;         
N  __IO uint32_t IDR;          /*!< GPIO port input data register,               Address offset: 0x10 */
X  volatile uint32_t IDR;           
N  __IO uint32_t ODR;          /*!< GPIO port output data register,              Address offset: 0x14 */
X  volatile uint32_t ODR;           
N  __IO uint32_t BSRR;         /*!< GPIO port bit set/reset registerBSRR,        Address offset: 0x18 */
X  volatile uint32_t BSRR;          
N  __IO uint32_t LCKR;         /*!< GPIO port configuration lock register,       Address offset: 0x1C */
X  volatile uint32_t LCKR;          
N  __IO uint32_t AFR[2];       /*!< GPIO alternate function register,            Address offset: 0x20-0x24 */
X  volatile uint32_t AFR[2];        
N  __IO uint32_t BRR;          /*!< GPIO bit reset register,                     Address offset: 0x28 */
X  volatile uint32_t BRR;           
N}GPIO_TypeDef;
N
N/** 
N  * @brief LPTIMIMER
N  */
Ntypedef struct
N{
N  __IO uint32_t ISR;      /*!< LPTIM Interrupt and Status register,             Address offset: 0x00 */
X  volatile uint32_t ISR;       
N  __IO uint32_t ICR;      /*!< LPTIM Interrupt Clear register,                  Address offset: 0x04 */
X  volatile uint32_t ICR;       
N  __IO uint32_t IER;      /*!< LPTIM Interrupt Enable register,                 Address offset: 0x08 */
X  volatile uint32_t IER;       
N  __IO uint32_t CFGR;     /*!< LPTIM Configuration register,                    Address offset: 0x0C */
X  volatile uint32_t CFGR;      
N  __IO uint32_t CR;       /*!< LPTIM Control register,                          Address offset: 0x10 */
X  volatile uint32_t CR;        
N  __IO uint32_t CMP;      /*!< LPTIM Compare register,                          Address offset: 0x14 */
X  volatile uint32_t CMP;       
N  __IO uint32_t ARR;      /*!< LPTIM Autoreload register,                       Address offset: 0x18 */
X  volatile uint32_t ARR;       
N  __IO uint32_t CNT;      /*!< LPTIM Counter register,                          Address offset: 0x1C */
X  volatile uint32_t CNT;       
N} LPTIM_TypeDef;
N
N/** 
N  * @brief SysTem Configuration
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CFGR1;         /*!< SYSCFG configuration register 1,                    Address offset: 0x00 */
X  volatile uint32_t CFGR1;          
N  __IO uint32_t CFGR2;         /*!< SYSCFG configuration register 2,                    Address offset: 0x04 */
X  volatile uint32_t CFGR2;          
N  __IO uint32_t EXTICR[4];     /*!< SYSCFG external interrupt configuration register,   Address offset: 0x14-0x08 */
X  volatile uint32_t EXTICR[4];      
N       uint32_t RESERVED[2];   /*!< Reserved,                                           0x18-0x1C */
N  __IO uint32_t CFGR3;         /*!< SYSCFG configuration register 3,                    Address offset: 0x20 */       
X  volatile uint32_t CFGR3;                 
N} SYSCFG_TypeDef;
N
N
N
N/** 
N  * @brief Inter-integrated Circuit Interface
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CR1;      /*!< I2C Control register 1,            Address offset: 0x00 */
X  volatile uint32_t CR1;       
N  __IO uint32_t CR2;      /*!< I2C Control register 2,            Address offset: 0x04 */
X  volatile uint32_t CR2;       
N  __IO uint32_t OAR1;     /*!< I2C Own address 1 register,        Address offset: 0x08 */
X  volatile uint32_t OAR1;      
N  __IO uint32_t OAR2;     /*!< I2C Own address 2 register,        Address offset: 0x0C */
X  volatile uint32_t OAR2;      
N  __IO uint32_t TIMINGR;  /*!< I2C Timing register,               Address offset: 0x10 */
X  volatile uint32_t TIMINGR;   
N  __IO uint32_t TIMEOUTR; /*!< I2C Timeout register,              Address offset: 0x14 */
X  volatile uint32_t TIMEOUTR;  
N  __IO uint32_t ISR;      /*!< I2C Interrupt and status register, Address offset: 0x18 */
X  volatile uint32_t ISR;       
N  __IO uint32_t ICR;      /*!< I2C Interrupt clear register,      Address offset: 0x1C */
X  volatile uint32_t ICR;       
N  __IO uint32_t PECR;     /*!< I2C PEC register,                  Address offset: 0x20 */
X  volatile uint32_t PECR;      
N  __IO uint32_t RXDR;     /*!< I2C Receive data register,         Address offset: 0x24 */
X  volatile uint32_t RXDR;      
N  __IO uint32_t TXDR;     /*!< I2C Transmit data register,        Address offset: 0x28 */
X  volatile uint32_t TXDR;      
N}I2C_TypeDef;
N
N
N/** 
N  * @brief Independent WATCHDOG
N  */
Ntypedef struct
N{
N  __IO uint32_t KR;   /*!< IWDG Key register,       Address offset: 0x00 */
X  volatile uint32_t KR;    
N  __IO uint32_t PR;   /*!< IWDG Prescaler register, Address offset: 0x04 */
X  volatile uint32_t PR;    
N  __IO uint32_t RLR;  /*!< IWDG Reload register,    Address offset: 0x08 */
X  volatile uint32_t RLR;   
N  __IO uint32_t SR;   /*!< IWDG Status register,    Address offset: 0x0C */
X  volatile uint32_t SR;    
N  __IO uint32_t WINR; /*!< IWDG Window register,    Address offset: 0x10 */
X  volatile uint32_t WINR;  
N} IWDG_TypeDef;
N
N/** 
N  * @brief LCD
N  */
Ntypedef struct
N{
N  __IO uint32_t CR;        /*!< LCD control register,              Address offset: 0x00 */
X  volatile uint32_t CR;         
N  __IO uint32_t FCR;       /*!< LCD frame control register,        Address offset: 0x04 */
X  volatile uint32_t FCR;        
N  __IO uint32_t SR;        /*!< LCD status register,               Address offset: 0x08 */
X  volatile uint32_t SR;         
N  __IO uint32_t CLR;       /*!< LCD clear register,                Address offset: 0x0C */
X  volatile uint32_t CLR;        
N  uint32_t RESERVED;       /*!< Reserved,                          Address offset: 0x10 */
N  __IO uint32_t RAM[16];   /*!< LCD display memory,                Address offset: 0x14-0x50 */
X  volatile uint32_t RAM[16];    
N} LCD_TypeDef;
N
N/** 
N  * @brief MIFARE Firewall
N  */
Ntypedef struct
N{
N  __IO uint32_t CSSA;     /*!< Code Segment Start Address register,               Address offset: 0x00 */
X  volatile uint32_t CSSA;      
N  __IO uint32_t CSL;      /*!< Code Segment Length register,                      Address offset: 0x04 */
X  volatile uint32_t CSL;       
N  __IO uint32_t NVDSSA;   /*!< NON volatile data Segment Start Address register,  Address offset: 0x08 */
X  volatile uint32_t NVDSSA;    
N  __IO uint32_t NVDSL;    /*!< NON volatile data Segment Length register,         Address offset: 0x0C */
X  volatile uint32_t NVDSL;     
N  __IO uint32_t VDSSA ;   /*!< Volatile data Segment Start Address register,      Address offset: 0x10 */
X  volatile uint32_t VDSSA ;    
N  __IO uint32_t VDSL ;    /*!< Volatile data Segment Length register,             Address offset: 0x14 */
X  volatile uint32_t VDSL ;     
N  __IO uint32_t LSSA ;    /*!< Library Segment Start Address register,            Address offset: 0x18 */
X  volatile uint32_t LSSA ;     
N  __IO uint32_t LSL ;     /*!< Library Segment Length register,                   Address offset: 0x1C */
X  volatile uint32_t LSL ;      
N  __IO uint32_t CR ;      /*!< Configuration  register,                           Address offset: 0x20 */
X  volatile uint32_t CR ;       
N 
N} FIREWALL_TypeDef;
N
N/** 
N  * @brief Power Control
N  */
Ntypedef struct
N{
N  __IO uint32_t CR;   /*!< PWR power control register,        Address offset: 0x00 */
X  volatile uint32_t CR;    
N  __IO uint32_t CSR;  /*!< PWR power control/status register, Address offset: 0x04 */
X  volatile uint32_t CSR;   
N} PWR_TypeDef;
N
N/** 
N  * @brief Reset and Clock Control
N  */
Ntypedef struct
N{
N  __IO uint32_t CR;            /*!< RCC clock control register,                                   Address offset: 0x00 */
X  volatile uint32_t CR;             
N  __IO uint32_t ICSCR;         /*!< RCC Internal clock sources calibration register,              Address offset: 0x04 */
X  volatile uint32_t ICSCR;          
N  __IO uint32_t CRRCR;         /*!< RCC Clock recovery RC register,                               Address offset: 0x08 */
X  volatile uint32_t CRRCR;          
N  __IO uint32_t CFGR;          /*!< RCC Clock configuration register,                             Address offset: 0x0C */
X  volatile uint32_t CFGR;           
N  __IO uint32_t CIER;          /*!< RCC Clock interrupt enable register,                          Address offset: 0x10 */
X  volatile uint32_t CIER;           
N  __IO uint32_t CIFR;          /*!< RCC Clock interrupt flag register,                            Address offset: 0x14 */
X  volatile uint32_t CIFR;           
N  __IO uint32_t CICR;          /*!< RCC Clock interrupt clear register,                           Address offset: 0x18 */
X  volatile uint32_t CICR;           
N  __IO uint32_t IOPRSTR;       /*!< RCC IO port reset register,                                   Address offset: 0x1C */
X  volatile uint32_t IOPRSTR;        
N  __IO uint32_t AHBRSTR;       /*!< RCC AHB peripheral reset register,                            Address offset: 0x20 */
X  volatile uint32_t AHBRSTR;        
N  __IO uint32_t APB2RSTR;      /*!< RCC APB2 peripheral reset register,                           Address offset: 0x24 */
X  volatile uint32_t APB2RSTR;       
N  __IO uint32_t APB1RSTR;      /*!< RCC APB1 peripheral reset register,                           Address offset: 0x28 */
X  volatile uint32_t APB1RSTR;       
N  __IO uint32_t IOPENR;        /*!< RCC Clock IO port enable register,                            Address offset: 0x2C */
X  volatile uint32_t IOPENR;         
N  __IO uint32_t AHBENR;        /*!< RCC AHB peripheral clock enable register,                     Address offset: 0x30 */
X  volatile uint32_t AHBENR;         
N  __IO uint32_t APB2ENR;       /*!< RCC APB2 peripheral enable register,                          Address offset: 0x34 */
X  volatile uint32_t APB2ENR;        
N  __IO uint32_t APB1ENR;       /*!< RCC APB1 peripheral enable register,                          Address offset: 0x38 */
X  volatile uint32_t APB1ENR;        
N  __IO uint32_t IOPSMENR;      /*!< RCC IO port clock enable in sleep mode register,              Address offset: 0x3C */
X  volatile uint32_t IOPSMENR;       
N  __IO uint32_t AHBSMENR;      /*!< RCC AHB peripheral clock enable in sleep mode register,       Address offset: 0x40 */
X  volatile uint32_t AHBSMENR;       
N  __IO uint32_t APB2SMENR;     /*!< RCC APB2 peripheral clock enable in sleep mode register,      Address offset: 0x44 */
X  volatile uint32_t APB2SMENR;      
N  __IO uint32_t APB1SMENR;     /*!< RCC APB1 peripheral clock enable in sleep mode register,      Address offset: 0x48 */
X  volatile uint32_t APB1SMENR;      
N  __IO uint32_t CCIPR;         /*!< RCC clock configuration register,                             Address offset: 0x4C */
X  volatile uint32_t CCIPR;          
N  __IO uint32_t CSR;           /*!< RCC Control/status register,                                  Address offset: 0x50 */
X  volatile uint32_t CSR;            
N} RCC_TypeDef;
N
N/** 
N  * @brief Random numbers generator
N  */
Ntypedef struct 
N{
N  __IO uint32_t CR;  /*!< RNG control register, Address offset: 0x00 */
X  volatile uint32_t CR;   
N  __IO uint32_t SR;  /*!< RNG status register,  Address offset: 0x04 */
X  volatile uint32_t SR;   
N  __IO uint32_t DR;  /*!< RNG data register,    Address offset: 0x08 */
X  volatile uint32_t DR;   
N} RNG_TypeDef;
N
N/** 
N  * @brief Real-Time Clock
N  */
Ntypedef struct
N{
N  __IO uint32_t TR;         /*!< RTC time register,                                         Address offset: 0x00 */
X  volatile uint32_t TR;          
N  __IO uint32_t DR;         /*!< RTC date register,                                         Address offset: 0x04 */
X  volatile uint32_t DR;          
N  __IO uint32_t CR;         /*!< RTC control register,                                      Address offset: 0x08 */
X  volatile uint32_t CR;          
N  __IO uint32_t ISR;        /*!< RTC initialization and status register,                    Address offset: 0x0C */
X  volatile uint32_t ISR;         
N  __IO uint32_t PRER;       /*!< RTC prescaler register,                                    Address offset: 0x10 */
X  volatile uint32_t PRER;        
N  __IO uint32_t WUTR;       /*!< RTC wakeup timer register,                                 Address offset: 0x14 */
X  volatile uint32_t WUTR;        
N       uint32_t RESERVED;   /*!< Reserved,                                                  Address offset: 0x18 */
N  __IO uint32_t ALRMAR;     /*!< RTC alarm A register,                                      Address offset: 0x1C */
X  volatile uint32_t ALRMAR;      
N  __IO uint32_t ALRMBR;     /*!< RTC alarm B register,                                      Address offset: 0x20 */
X  volatile uint32_t ALRMBR;      
N  __IO uint32_t WPR;        /*!< RTC write protection register,                             Address offset: 0x24 */
X  volatile uint32_t WPR;         
N  __IO uint32_t SSR;        /*!< RTC sub second register,                                   Address offset: 0x28 */
X  volatile uint32_t SSR;         
N  __IO uint32_t SHIFTR;     /*!< RTC shift control register,                                Address offset: 0x2C */
X  volatile uint32_t SHIFTR;      
N  __IO uint32_t TSTR;       /*!< RTC time stamp time register,                              Address offset: 0x30 */
X  volatile uint32_t TSTR;        
N  __IO uint32_t TSDR;       /*!< RTC time stamp date register,                              Address offset: 0x34 */
X  volatile uint32_t TSDR;        
N  __IO uint32_t TSSSR;      /*!< RTC time-stamp sub second register,                        Address offset: 0x38 */
X  volatile uint32_t TSSSR;       
N  __IO uint32_t CALR;       /*!< RTC calibration register,                                  Address offset: 0x3C */
X  volatile uint32_t CALR;        
N  __IO uint32_t TAMPCR;     /*!< RTC tamper configuration register,                         Address offset: 0x40 */
X  volatile uint32_t TAMPCR;      
N  __IO uint32_t ALRMASSR;   /*!< RTC alarm A sub second register,                           Address offset: 0x44 */
X  volatile uint32_t ALRMASSR;    
N  __IO uint32_t ALRMBSSR;   /*!< RTC alarm B sub second register,                           Address offset: 0x48 */
X  volatile uint32_t ALRMBSSR;    
N  __IO uint32_t OR;         /*!< RTC option register,                                       Address offset  0x4C */
X  volatile uint32_t OR;          
N  __IO uint32_t BKP0R;      /*!< RTC backup register 0,                                     Address offset: 0x50 */
X  volatile uint32_t BKP0R;       
N  __IO uint32_t BKP1R;      /*!< RTC backup register 1,                                     Address offset: 0x54 */
X  volatile uint32_t BKP1R;       
N  __IO uint32_t BKP2R;      /*!< RTC backup register 2,                                     Address offset: 0x58 */
X  volatile uint32_t BKP2R;       
N  __IO uint32_t BKP3R;      /*!< RTC backup register 3,                                     Address offset: 0x5C */
X  volatile uint32_t BKP3R;       
N  __IO uint32_t BKP4R;      /*!< RTC backup register 4,                                     Address offset: 0x60 */
X  volatile uint32_t BKP4R;       
N} RTC_TypeDef;
N
N
N/** 
N  * @brief Serial Peripheral Interface
N  */
Ntypedef struct
N{
N  __IO uint32_t CR1;      /*!< SPI Control register 1 (not used in I2S mode),       Address offset: 0x00 */
X  volatile uint32_t CR1;       
N  __IO uint32_t CR2;      /*!< SPI Control register 2,                              Address offset: 0x04 */
X  volatile uint32_t CR2;       
N  __IO uint32_t SR;       /*!< SPI Status register,                                 Address offset: 0x08 */
X  volatile uint32_t SR;        
N  __IO uint32_t DR;       /*!< SPI data register,                                   Address offset: 0x0C */
X  volatile uint32_t DR;        
N  __IO uint32_t CRCPR;    /*!< SPI CRC polynomial register (not used in I2S mode),  Address offset: 0x10 */
X  volatile uint32_t CRCPR;     
N  __IO uint32_t RXCRCR;   /*!< SPI Rx CRC register (not used in I2S mode),          Address offset: 0x14 */
X  volatile uint32_t RXCRCR;    
N  __IO uint32_t TXCRCR;   /*!< SPI Tx CRC register (not used in I2S mode),          Address offset: 0x18 */
X  volatile uint32_t TXCRCR;    
N  __IO uint32_t I2SCFGR;  /*!< SPI_I2S configuration register,                      Address offset: 0x1C */
X  volatile uint32_t I2SCFGR;   
N  __IO uint32_t I2SPR;    /*!< SPI_I2S prescaler register,                          Address offset: 0x20 */
X  volatile uint32_t I2SPR;     
N} SPI_TypeDef;
N
N/** 
N  * @brief TIM
N  */
Ntypedef struct
N{
N  __IO uint32_t CR1;       /*!< TIM control register 1,                       Address offset: 0x00 */
X  volatile uint32_t CR1;        
N  __IO uint32_t CR2;       /*!< TIM control register 2,                       Address offset: 0x04 */
X  volatile uint32_t CR2;        
N  __IO uint32_t SMCR;      /*!< TIM slave Mode Control register,              Address offset: 0x08 */
X  volatile uint32_t SMCR;       
N  __IO uint32_t DIER;      /*!< TIM DMA/interrupt enable register,            Address offset: 0x0C */
X  volatile uint32_t DIER;       
N  __IO uint32_t SR;        /*!< TIM status register,                          Address offset: 0x10 */
X  volatile uint32_t SR;         
N  __IO uint32_t EGR;       /*!< TIM event generation register,                Address offset: 0x14 */
X  volatile uint32_t EGR;        
N  __IO uint32_t CCMR1;     /*!< TIM  capture/compare mode register 1,         Address offset: 0x18 */
X  volatile uint32_t CCMR1;      
N  __IO uint32_t CCMR2;     /*!< TIM  capture/compare mode register 2,         Address offset: 0x1C */
X  volatile uint32_t CCMR2;      
N  __IO uint32_t CCER;      /*!< TIM capture/compare enable register,          Address offset: 0x20 */
X  volatile uint32_t CCER;       
N  __IO uint32_t CNT;       /*!< TIM counter register,                         Address offset: 0x24 */
X  volatile uint32_t CNT;        
N  __IO uint32_t PSC;       /*!< TIM prescaler register,                       Address offset: 0x28 */
X  volatile uint32_t PSC;        
N  __IO uint32_t ARR;       /*!< TIM auto-reload register,                     Address offset: 0x2C */
X  volatile uint32_t ARR;        
N  uint32_t      RESERVED12;/*!< Reserved                                      Address offset: 0x30 */
N  __IO uint32_t CCR1;      /*!< TIM capture/compare register 1,               Address offset: 0x34 */
X  volatile uint32_t CCR1;       
N  __IO uint32_t CCR2;      /*!< TIM capture/compare register 2,               Address offset: 0x38 */
X  volatile uint32_t CCR2;       
N  __IO uint32_t CCR3;      /*!< TIM capture/compare register 3,               Address offset: 0x3C */
X  volatile uint32_t CCR3;       
N  __IO uint32_t CCR4;      /*!< TIM capture/compare register 4,               Address offset: 0x40 */
X  volatile uint32_t CCR4;       
N  uint32_t      RESERVED17;/*!< Reserved,                                     Address offset: 0x44 */
N  __IO uint32_t DCR;       /*!< TIM DMA control register,                     Address offset: 0x48 */
X  volatile uint32_t DCR;        
N  __IO uint32_t DMAR;      /*!< TIM DMA address for full transfer register,   Address offset: 0x4C */
X  volatile uint32_t DMAR;       
N  __IO uint32_t OR;        /*!< TIM option register,                          Address offset: 0x50 */
X  volatile uint32_t OR;         
N} TIM_TypeDef;
N
N/**
N  * @brief Touch Sensing Controller (TSC)
N  */
Ntypedef struct
N{
N  __IO uint32_t CR;            /*!< TSC control register,                     Address offset: 0x00 */
X  volatile uint32_t CR;             
N  __IO uint32_t IER;           /*!< TSC interrupt enable register,            Address offset: 0x04 */
X  volatile uint32_t IER;            
N  __IO uint32_t ICR;           /*!< TSC interrupt clear register,             Address offset: 0x08 */
X  volatile uint32_t ICR;            
N  __IO uint32_t ISR;           /*!< TSC interrupt status register,            Address offset: 0x0C */
X  volatile uint32_t ISR;            
N  __IO uint32_t IOHCR;         /*!< TSC I/O hysteresis control register,      Address offset: 0x10 */
X  volatile uint32_t IOHCR;          
N  uint32_t      RESERVED1;     /*!< Reserved,                                 Address offset: 0x14 */
N  __IO uint32_t IOASCR;        /*!< TSC I/O analog switch control register,   Address offset: 0x18 */
X  volatile uint32_t IOASCR;         
N  uint32_t      RESERVED2;     /*!< Reserved,                                 Address offset: 0x1C */
N  __IO uint32_t IOSCR;         /*!< TSC I/O sampling control register,        Address offset: 0x20 */
X  volatile uint32_t IOSCR;          
N  uint32_t      RESERVED3;     /*!< Reserved,                                 Address offset: 0x24 */
N  __IO uint32_t IOCCR;         /*!< TSC I/O channel control register,         Address offset: 0x28 */
X  volatile uint32_t IOCCR;          
N  uint32_t      RESERVED4;     /*!< Reserved,                                 Address offset: 0x2C */
N  __IO uint32_t IOGCSR;        /*!< TSC I/O group control status register,    Address offset: 0x30 */
X  volatile uint32_t IOGCSR;         
N  __IO uint32_t IOGXCR[8];     /*!< TSC I/O group x counter register,         Address offset: 0x34-50 */
X  volatile uint32_t IOGXCR[8];      
N} TSC_TypeDef;
N
N/** 
N  * @brief Universal Synchronous Asynchronous Receiver Transmitter
N  */
Ntypedef struct
N{
N  __IO uint32_t CR1;    /*!< USART Control register 1,                 Address offset: 0x00 */ 
X  volatile uint32_t CR1;      
N  __IO uint32_t CR2;    /*!< USART Control register 2,                 Address offset: 0x04 */ 
X  volatile uint32_t CR2;      
N  __IO uint32_t CR3;    /*!< USART Control register 3,                 Address offset: 0x08 */
X  volatile uint32_t CR3;     
N  __IO uint32_t BRR;    /*!< USART Baud rate register,                 Address offset: 0x0C */  
X  volatile uint32_t BRR;       
N  __IO uint32_t GTPR;   /*!< USART Guard time and prescaler register,  Address offset: 0x10 */
X  volatile uint32_t GTPR;    
N  __IO uint32_t RTOR;   /*!< USART Receiver Time Out register,         Address offset: 0x14 */  
X  volatile uint32_t RTOR;      
N  __IO uint32_t RQR;    /*!< USART Request register,                   Address offset: 0x18 */
X  volatile uint32_t RQR;     
N  __IO uint32_t ISR;    /*!< USART Interrupt and status register,      Address offset: 0x1C */
X  volatile uint32_t ISR;     
N  __IO uint32_t ICR;    /*!< USART Interrupt flag Clear register,      Address offset: 0x20 */
X  volatile uint32_t ICR;     
N  __IO uint32_t RDR;    /*!< USART Receive Data register,              Address offset: 0x24 */
X  volatile uint32_t RDR;     
N  __IO uint32_t TDR;    /*!< USART Transmit Data register,             Address offset: 0x28 */
X  volatile uint32_t TDR;     
N} USART_TypeDef;
N
N/** 
N  * @brief Window WATCHDOG
N  */
Ntypedef struct
N{
N  __IO uint32_t CR;   /*!< WWDG Control register,       Address offset: 0x00 */
X  volatile uint32_t CR;    
N  __IO uint32_t CFR;  /*!< WWDG Configuration register, Address offset: 0x04 */
X  volatile uint32_t CFR;   
N  __IO uint32_t SR;   /*!< WWDG Status register,        Address offset: 0x08 */
X  volatile uint32_t SR;    
N} WWDG_TypeDef;
N
N/** 
N  * @brief Universal Serial Bus Full Speed Device
N  */
Ntypedef struct
N{
N  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
X  volatile uint16_t EP0R;              
N  __IO uint16_t RESERVED0;       /*!< Reserved */     
X  volatile uint16_t RESERVED0;             
N  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
X  volatile uint16_t EP1R;             
N  __IO uint16_t RESERVED1;       /*!< Reserved */       
X  volatile uint16_t RESERVED1;               
N  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
X  volatile uint16_t EP2R;             
N  __IO uint16_t RESERVED2;       /*!< Reserved */       
X  volatile uint16_t RESERVED2;               
N  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
X  volatile uint16_t EP3R;              
N  __IO uint16_t RESERVED3;       /*!< Reserved */       
X  volatile uint16_t RESERVED3;               
N  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
X  volatile uint16_t EP4R;             
N  __IO uint16_t RESERVED4;       /*!< Reserved */       
X  volatile uint16_t RESERVED4;               
N  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
X  volatile uint16_t EP5R;             
N  __IO uint16_t RESERVED5;       /*!< Reserved */       
X  volatile uint16_t RESERVED5;               
N  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
X  volatile uint16_t EP6R;             
N  __IO uint16_t RESERVED6;       /*!< Reserved */       
X  volatile uint16_t RESERVED6;               
N  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
X  volatile uint16_t EP7R;             
N  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
X  volatile uint16_t RESERVED7[17];         
N  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
X  volatile uint16_t CNTR;             
N  __IO uint16_t RESERVED8;       /*!< Reserved */       
X  volatile uint16_t RESERVED8;               
N  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
X  volatile uint16_t ISTR;             
N  __IO uint16_t RESERVED9;       /*!< Reserved */       
X  volatile uint16_t RESERVED9;               
N  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
X  volatile uint16_t FNR;              
N  __IO uint16_t RESERVEDA;       /*!< Reserved */       
X  volatile uint16_t RESERVEDA;               
N  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
X  volatile uint16_t DADDR;            
N  __IO uint16_t RESERVEDB;       /*!< Reserved */       
X  volatile uint16_t RESERVEDB;               
N  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
X  volatile uint16_t BTABLE;           
N  __IO uint16_t RESERVEDC;       /*!< Reserved */       
X  volatile uint16_t RESERVEDC;               
N  __IO uint16_t LPMCSR;          /*!< LPM Control and Status register,        Address offset: 0x54 */
X  volatile uint16_t LPMCSR;           
N  __IO uint16_t RESERVEDD;       /*!< Reserved */       
X  volatile uint16_t RESERVEDD;               
N  __IO uint16_t BCDR;            /*!< Battery Charging detector register,     Address offset: 0x58 */
X  volatile uint16_t BCDR;             
N  __IO uint16_t RESERVEDE;       /*!< Reserved */       
X  volatile uint16_t RESERVEDE;               
N} USB_TypeDef;
N
N/**
N  * @}
N  */
N  
N/** @addtogroup Peripheral_memory_map
N  * @{
N  */
N#define FLASH_BASE             ((uint32_t)0x08000000U) /*!< FLASH base address in the alias region */
N#define FLASH_END              ((uint32_t)0x0800FFFFU) /*!< FLASH end address in the alias region */
N#define DATA_EEPROM_BASE       ((uint32_t)0x08080000U) /*!< DATA_EEPROM base address in the alias region */
N#define DATA_EEPROM_END        ((uint32_t)0x080807FFU) /*!< DATA EEPROM end address in the alias region */
N#define SRAM_BASE              ((uint32_t)0x20000000U) /*!< SRAM base address in the alias region */
N#define SRAM_SIZE_MAX          ((uint32_t)0x00002000U) /*!< maximum SRAM size (up to 8KBytes) */
N
N#define PERIPH_BASE            ((uint32_t)0x40000000U) /*!< Peripheral base address in the alias region */
N
N/*!< Peripheral memory map */
N#define APBPERIPH_BASE        PERIPH_BASE
N#define AHBPERIPH_BASE        (PERIPH_BASE + 0x00020000U)
N#define IOPPERIPH_BASE        (PERIPH_BASE + 0x10000000U)
N
N#define TIM2_BASE             (APBPERIPH_BASE + 0x00000000U)
N#define TIM6_BASE             (APBPERIPH_BASE + 0x00001000U)
N#define LCD_BASE              (APBPERIPH_BASE + 0x00002400U)
N#define RTC_BASE              (APBPERIPH_BASE + 0x00002800U)
N#define WWDG_BASE             (APBPERIPH_BASE + 0x00002C00U)
N#define IWDG_BASE             (APBPERIPH_BASE + 0x00003000U)
N#define SPI2_BASE             (APBPERIPH_BASE + 0x00003800U)
N#define USART2_BASE           (APBPERIPH_BASE + 0x00004400U)
N#define LPUART1_BASE          (APBPERIPH_BASE + 0x00004800U)
N#define I2C1_BASE             (APBPERIPH_BASE + 0x00005400U)
N#define I2C2_BASE             (APBPERIPH_BASE + 0x00005800U)
N#define CRS_BASE              (APBPERIPH_BASE + 0x00006C00U)
N#define PWR_BASE              (APBPERIPH_BASE + 0x00007000U)
N#define DAC_BASE              (APBPERIPH_BASE + 0x00007400U)
N#define LPTIM1_BASE           (APBPERIPH_BASE + 0x00007C00U)
N
N#define SYSCFG_BASE           (APBPERIPH_BASE + 0x00010000U)
N#define COMP1_BASE            (APBPERIPH_BASE + 0x00010018U)
N#define COMP2_BASE            (APBPERIPH_BASE + 0x0001001CU)
N#define COMP12_COMMON       ((COMP_Common_TypeDef *) COMP1_BASE)
N#define EXTI_BASE             (APBPERIPH_BASE + 0x00010400U)
N#define TIM21_BASE            (APBPERIPH_BASE + 0x00010800U)
N#define TIM22_BASE            (APBPERIPH_BASE + 0x00011400U)
N#define FIREWALL_BASE         (APBPERIPH_BASE + 0x00011C00U)
N#define ADC1_BASE             (APBPERIPH_BASE + 0x00012400U)
N#define ADC_BASE              (APBPERIPH_BASE + 0x00012708U)
N#define SPI1_BASE             (APBPERIPH_BASE + 0x00013000U)
N#define USART1_BASE           (APBPERIPH_BASE + 0x00013800U)
N#define DBGMCU_BASE           (APBPERIPH_BASE + 0x00015800U)
N
N#define DMA1_BASE             (AHBPERIPH_BASE + 0x00000000U)
N#define DMA1_Channel1_BASE    (DMA1_BASE + 0x00000008U)
N#define DMA1_Channel2_BASE    (DMA1_BASE + 0x0000001CU)
N#define DMA1_Channel3_BASE    (DMA1_BASE + 0x00000030U)
N#define DMA1_Channel4_BASE    (DMA1_BASE + 0x00000044U)
N#define DMA1_Channel5_BASE    (DMA1_BASE + 0x00000058U)
N#define DMA1_Channel6_BASE    (DMA1_BASE + 0x0000006CU)
N#define DMA1_Channel7_BASE    (DMA1_BASE + 0x00000080U)
N#define DMA1_CSELR_BASE       (DMA1_BASE + 0x000000A8U)
N
N
N#define RCC_BASE              (AHBPERIPH_BASE + 0x00001000U)
N#define FLASH_R_BASE          (AHBPERIPH_BASE + 0x00002000U) /*!< FLASH registers base address */
N#define OB_BASE               ((uint32_t)0x1FF80000U)        /*!< FLASH Option Bytes base address */
N#define FLASHSIZE_BASE        ((uint32_t)0x1FF8007CU)        /*!< FLASH Size register base address */
N#define UID_BASE              ((uint32_t)0x1FF80050U)        /*!< Unique device ID register base address  */
N#define CRC_BASE              (AHBPERIPH_BASE + 0x00003000U)
N#define TSC_BASE              (AHBPERIPH_BASE + 0x00004000U)
N#define RNG_BASE              (AHBPERIPH_BASE + 0x00005000U)
N
N#define GPIOA_BASE            (IOPPERIPH_BASE + 0x00000000U)
N#define GPIOB_BASE            (IOPPERIPH_BASE + 0x00000400U)
N#define GPIOC_BASE            (IOPPERIPH_BASE + 0x00000800U)
N#define GPIOD_BASE            (IOPPERIPH_BASE + 0x00000C00U)
N#define GPIOH_BASE            (IOPPERIPH_BASE + 0x00001C00U)
N
N/**
N  * @}
N  */
N  
N/** @addtogroup Peripheral_declaration
N  * @{
N  */  
N
N#define TIM2                ((TIM_TypeDef *) TIM2_BASE)
N#define TIM6                ((TIM_TypeDef *) TIM6_BASE)
N#define RTC                 ((RTC_TypeDef *) RTC_BASE)
N#define WWDG                ((WWDG_TypeDef *) WWDG_BASE)
N#define IWDG                ((IWDG_TypeDef *) IWDG_BASE)
N#define SPI2                ((SPI_TypeDef *) SPI2_BASE)
N#define USART2              ((USART_TypeDef *) USART2_BASE)
N#define LPUART1             ((USART_TypeDef *) LPUART1_BASE)
N#define I2C1                ((I2C_TypeDef *) I2C1_BASE)
N#define I2C2                ((I2C_TypeDef *) I2C2_BASE)
N#define CRS                 ((CRS_TypeDef *) CRS_BASE)
N#define PWR                 ((PWR_TypeDef *) PWR_BASE)
N#define DAC                 ((DAC_TypeDef *) DAC_BASE)
N#define DAC1                ((DAC_TypeDef *) DAC_BASE)
N#define LPTIM1              ((LPTIM_TypeDef *) LPTIM1_BASE)
N#define LCD                 ((LCD_TypeDef *) LCD_BASE)
N
N#define SYSCFG              ((SYSCFG_TypeDef *) SYSCFG_BASE)
N#define COMP1               ((COMP_TypeDef *) COMP1_BASE)
N#define COMP2               ((COMP_TypeDef *) COMP2_BASE)
N#define EXTI                ((EXTI_TypeDef *) EXTI_BASE)
N#define TIM21               ((TIM_TypeDef *) TIM21_BASE)
N#define TIM22               ((TIM_TypeDef *) TIM22_BASE)
N#define FIREWALL            ((FIREWALL_TypeDef *) FIREWALL_BASE)
N#define ADC1                ((ADC_TypeDef *) ADC1_BASE)
N#define ADC1_COMMON         ((ADC_Common_TypeDef *) ADC_BASE)
N/* Legacy defines */
N#define ADC                 ADC1_COMMON
N#define SPI1                ((SPI_TypeDef *) SPI1_BASE)
N#define USART1              ((USART_TypeDef *) USART1_BASE)
N#define DBGMCU              ((DBGMCU_TypeDef *) DBGMCU_BASE)
N
N#define DMA1                ((DMA_TypeDef *) DMA1_BASE)
N#define DMA1_Channel1       ((DMA_Channel_TypeDef *) DMA1_Channel1_BASE)
N#define DMA1_Channel2       ((DMA_Channel_TypeDef *) DMA1_Channel2_BASE)
N#define DMA1_Channel3       ((DMA_Channel_TypeDef *) DMA1_Channel3_BASE)
N#define DMA1_Channel4       ((DMA_Channel_TypeDef *) DMA1_Channel4_BASE)
N#define DMA1_Channel5       ((DMA_Channel_TypeDef *) DMA1_Channel5_BASE)
N#define DMA1_Channel6       ((DMA_Channel_TypeDef *) DMA1_Channel6_BASE)
N#define DMA1_Channel7       ((DMA_Channel_TypeDef *) DMA1_Channel7_BASE)
N#define DMA1_CSELR          ((DMA_Request_TypeDef *) DMA1_CSELR_BASE)
N
N
N#define FLASH               ((FLASH_TypeDef *) FLASH_R_BASE)
N#define OB                  ((OB_TypeDef *) OB_BASE) 
N#define RCC                 ((RCC_TypeDef *) RCC_BASE)
N#define CRC                 ((CRC_TypeDef *) CRC_BASE)
N#define TSC                 ((TSC_TypeDef *) TSC_BASE)
N#define RNG                 ((RNG_TypeDef *) RNG_BASE)
N
N#define GPIOA               ((GPIO_TypeDef *) GPIOA_BASE)
N#define GPIOB               ((GPIO_TypeDef *) GPIOB_BASE)
N#define GPIOC               ((GPIO_TypeDef *) GPIOC_BASE)
N#define GPIOD               ((GPIO_TypeDef *) GPIOD_BASE)
N#define GPIOH               ((GPIO_TypeDef *) GPIOH_BASE)
N
N#define USB                 ((USB_TypeDef *) USB_BASE)
N
N/**
N  * @}
N  */
N
N/** @addtogroup Exported_constants
N  * @{
N  */
N  
N  /** @addtogroup Peripheral_Registers_Bits_Definition
N  * @{
N  */
N    
N/******************************************************************************/
N/*                         Peripheral Registers Bits Definition               */
N/******************************************************************************/
N/******************************************************************************/
N/*                                                                            */
N/*                      Analog to Digital Converter (ADC)                     */
N/*                                                                            */
N/******************************************************************************/
N/********************  Bits definition for ADC_ISR register  ******************/
N#define ADC_ISR_EOCAL_Pos          (11U)                                       
N#define ADC_ISR_EOCAL_Msk          (0x1U << ADC_ISR_EOCAL_Pos)                 /*!< 0x00000800 */
N#define ADC_ISR_EOCAL              ADC_ISR_EOCAL_Msk                           /*!< End of calibration flag */
N#define ADC_ISR_AWD_Pos            (7U)                                        
N#define ADC_ISR_AWD_Msk            (0x1U << ADC_ISR_AWD_Pos)                   /*!< 0x00000080 */
N#define ADC_ISR_AWD                ADC_ISR_AWD_Msk                             /*!< Analog watchdog flag */
N#define ADC_ISR_OVR_Pos            (4U)                                        
N#define ADC_ISR_OVR_Msk            (0x1U << ADC_ISR_OVR_Pos)                   /*!< 0x00000010 */
N#define ADC_ISR_OVR                ADC_ISR_OVR_Msk                             /*!< Overrun flag */
N#define ADC_ISR_EOSEQ_Pos          (3U)                                        
N#define ADC_ISR_EOSEQ_Msk          (0x1U << ADC_ISR_EOSEQ_Pos)                 /*!< 0x00000008 */
N#define ADC_ISR_EOSEQ              ADC_ISR_EOSEQ_Msk                           /*!< End of Sequence flag */
N#define ADC_ISR_EOC_Pos            (2U)                                        
N#define ADC_ISR_EOC_Msk            (0x1U << ADC_ISR_EOC_Pos)                   /*!< 0x00000004 */
N#define ADC_ISR_EOC                ADC_ISR_EOC_Msk                             /*!< End of Conversion */
N#define ADC_ISR_EOSMP_Pos          (1U)                                        
N#define ADC_ISR_EOSMP_Msk          (0x1U << ADC_ISR_EOSMP_Pos)                 /*!< 0x00000002 */
N#define ADC_ISR_EOSMP              ADC_ISR_EOSMP_Msk                           /*!< End of sampling flag */
N#define ADC_ISR_ADRDY_Pos          (0U)                                        
N#define ADC_ISR_ADRDY_Msk          (0x1U << ADC_ISR_ADRDY_Pos)                 /*!< 0x00000001 */
N#define ADC_ISR_ADRDY              ADC_ISR_ADRDY_Msk                           /*!< ADC Ready */
N
N/* Old EOSEQ bit definition, maintained for legacy purpose */
N#define ADC_ISR_EOS                          ADC_ISR_EOSEQ
N
N/********************  Bits definition for ADC_IER register  ******************/
N#define ADC_IER_EOCALIE_Pos        (11U)                                       
N#define ADC_IER_EOCALIE_Msk        (0x1U << ADC_IER_EOCALIE_Pos)               /*!< 0x00000800 */
N#define ADC_IER_EOCALIE            ADC_IER_EOCALIE_Msk                         /*!< Enf Of Calibration interrupt enable */
N#define ADC_IER_AWDIE_Pos          (7U)                                        
N#define ADC_IER_AWDIE_Msk          (0x1U << ADC_IER_AWDIE_Pos)                 /*!< 0x00000080 */
N#define ADC_IER_AWDIE              ADC_IER_AWDIE_Msk                           /*!< Analog Watchdog interrupt enable */
N#define ADC_IER_OVRIE_Pos          (4U)                                        
N#define ADC_IER_OVRIE_Msk          (0x1U << ADC_IER_OVRIE_Pos)                 /*!< 0x00000010 */
N#define ADC_IER_OVRIE              ADC_IER_OVRIE_Msk                           /*!< Overrun interrupt enable */
N#define ADC_IER_EOSEQIE_Pos        (3U)                                        
N#define ADC_IER_EOSEQIE_Msk        (0x1U << ADC_IER_EOSEQIE_Pos)               /*!< 0x00000008 */
N#define ADC_IER_EOSEQIE            ADC_IER_EOSEQIE_Msk                         /*!< End of Sequence of conversion interrupt enable */
N#define ADC_IER_EOCIE_Pos          (2U)                                        
N#define ADC_IER_EOCIE_Msk          (0x1U << ADC_IER_EOCIE_Pos)                 /*!< 0x00000004 */
N#define ADC_IER_EOCIE              ADC_IER_EOCIE_Msk                           /*!< End of Conversion interrupt enable */
N#define ADC_IER_EOSMPIE_Pos        (1U)                                        
N#define ADC_IER_EOSMPIE_Msk        (0x1U << ADC_IER_EOSMPIE_Pos)               /*!< 0x00000002 */
N#define ADC_IER_EOSMPIE            ADC_IER_EOSMPIE_Msk                         /*!< End of sampling interrupt enable */
N#define ADC_IER_ADRDYIE_Pos        (0U)                                        
N#define ADC_IER_ADRDYIE_Msk        (0x1U << ADC_IER_ADRDYIE_Pos)               /*!< 0x00000001 */
N#define ADC_IER_ADRDYIE            ADC_IER_ADRDYIE_Msk                         /*!< ADC Ready interrupt enable */
N
N/* Old EOSEQIE bit definition, maintained for legacy purpose */
N#define ADC_IER_EOSIE                        ADC_IER_EOSEQIE
N
N/********************  Bits definition for ADC_CR register  *******************/
N#define ADC_CR_ADCAL_Pos           (31U)                                       
N#define ADC_CR_ADCAL_Msk           (0x1U << ADC_CR_ADCAL_Pos)                  /*!< 0x80000000 */
N#define ADC_CR_ADCAL               ADC_CR_ADCAL_Msk                            /*!< ADC calibration */
N#define ADC_CR_ADVREGEN_Pos        (28U)                                       
N#define ADC_CR_ADVREGEN_Msk        (0x1U << ADC_CR_ADVREGEN_Pos)               /*!< 0x10000000 */
N#define ADC_CR_ADVREGEN            ADC_CR_ADVREGEN_Msk                         /*!< ADC Voltage Regulator Enable */
N#define ADC_CR_ADSTP_Pos           (4U)                                        
N#define ADC_CR_ADSTP_Msk           (0x1U << ADC_CR_ADSTP_Pos)                  /*!< 0x00000010 */
N#define ADC_CR_ADSTP               ADC_CR_ADSTP_Msk                            /*!< ADC stop of conversion command */
N#define ADC_CR_ADSTART_Pos         (2U)                                        
N#define ADC_CR_ADSTART_Msk         (0x1U << ADC_CR_ADSTART_Pos)                /*!< 0x00000004 */
N#define ADC_CR_ADSTART             ADC_CR_ADSTART_Msk                          /*!< ADC start of conversion */
N#define ADC_CR_ADDIS_Pos           (1U)                                        
N#define ADC_CR_ADDIS_Msk           (0x1U << ADC_CR_ADDIS_Pos)                  /*!< 0x00000002 */
N#define ADC_CR_ADDIS               ADC_CR_ADDIS_Msk                            /*!< ADC disable command */
N#define ADC_CR_ADEN_Pos            (0U)                                        
N#define ADC_CR_ADEN_Msk            (0x1U << ADC_CR_ADEN_Pos)                   /*!< 0x00000001 */
N#define ADC_CR_ADEN                ADC_CR_ADEN_Msk                             /*!< ADC enable control */ /*####   TBV  */
N
N/*******************  Bits definition for ADC_CFGR1 register  *****************/
N#define ADC_CFGR1_AWDCH_Pos        (26U)                                       
N#define ADC_CFGR1_AWDCH_Msk        (0x1FU << ADC_CFGR1_AWDCH_Pos)              /*!< 0x7C000000 */
N#define ADC_CFGR1_AWDCH            ADC_CFGR1_AWDCH_Msk                         /*!< AWDCH[4:0] bits (Analog watchdog channel select bits) */
N#define ADC_CFGR1_AWDCH_0          (0x01U << ADC_CFGR1_AWDCH_Pos)              /*!< 0x04000000 */
N#define ADC_CFGR1_AWDCH_1          (0x02U << ADC_CFGR1_AWDCH_Pos)              /*!< 0x08000000 */
N#define ADC_CFGR1_AWDCH_2          (0x04U << ADC_CFGR1_AWDCH_Pos)              /*!< 0x10000000 */
N#define ADC_CFGR1_AWDCH_3          (0x08U << ADC_CFGR1_AWDCH_Pos)              /*!< 0x20000000 */
N#define ADC_CFGR1_AWDCH_4          (0x10U << ADC_CFGR1_AWDCH_Pos)              /*!< 0x40000000 */
N#define ADC_CFGR1_AWDEN_Pos        (23U)                                       
N#define ADC_CFGR1_AWDEN_Msk        (0x1U << ADC_CFGR1_AWDEN_Pos)               /*!< 0x00800000 */
N#define ADC_CFGR1_AWDEN            ADC_CFGR1_AWDEN_Msk                         /*!< Analog watchdog enable on regular channels */
N#define ADC_CFGR1_AWDSGL_Pos       (22U)                                       
N#define ADC_CFGR1_AWDSGL_Msk       (0x1U << ADC_CFGR1_AWDSGL_Pos)              /*!< 0x00400000 */
N#define ADC_CFGR1_AWDSGL           ADC_CFGR1_AWDSGL_Msk                        /*!< Enable the watchdog on a single channel or on all channels  */
N#define ADC_CFGR1_DISCEN_Pos       (16U)                                       
N#define ADC_CFGR1_DISCEN_Msk       (0x1U << ADC_CFGR1_DISCEN_Pos)              /*!< 0x00010000 */
N#define ADC_CFGR1_DISCEN           ADC_CFGR1_DISCEN_Msk                        /*!< Discontinuous mode on regular channels */
N#define ADC_CFGR1_AUTOFF_Pos       (15U)                                       
N#define ADC_CFGR1_AUTOFF_Msk       (0x1U << ADC_CFGR1_AUTOFF_Pos)              /*!< 0x00008000 */
N#define ADC_CFGR1_AUTOFF           ADC_CFGR1_AUTOFF_Msk                        /*!< ADC auto power off */
N#define ADC_CFGR1_WAIT_Pos         (14U)                                       
N#define ADC_CFGR1_WAIT_Msk         (0x1U << ADC_CFGR1_WAIT_Pos)                /*!< 0x00004000 */
N#define ADC_CFGR1_WAIT             ADC_CFGR1_WAIT_Msk                          /*!< ADC wait conversion mode */
N#define ADC_CFGR1_CONT_Pos         (13U)                                       
N#define ADC_CFGR1_CONT_Msk         (0x1U << ADC_CFGR1_CONT_Pos)                /*!< 0x00002000 */
N#define ADC_CFGR1_CONT             ADC_CFGR1_CONT_Msk                          /*!< Continuous Conversion */
N#define ADC_CFGR1_OVRMOD_Pos       (12U)                                       
N#define ADC_CFGR1_OVRMOD_Msk       (0x1U << ADC_CFGR1_OVRMOD_Pos)              /*!< 0x00001000 */
N#define ADC_CFGR1_OVRMOD           ADC_CFGR1_OVRMOD_Msk                        /*!< Overrun mode */
N#define ADC_CFGR1_EXTEN_Pos        (10U)                                       
N#define ADC_CFGR1_EXTEN_Msk        (0x3U << ADC_CFGR1_EXTEN_Pos)               /*!< 0x00000C00 */
N#define ADC_CFGR1_EXTEN            ADC_CFGR1_EXTEN_Msk                         /*!< EXTEN[1:0] bits (External Trigger Conversion mode for regular channels) */
N#define ADC_CFGR1_EXTEN_0          (0x1U << ADC_CFGR1_EXTEN_Pos)               /*!< 0x00000400 */
N#define ADC_CFGR1_EXTEN_1          (0x2U << ADC_CFGR1_EXTEN_Pos)               /*!< 0x00000800 */
N#define ADC_CFGR1_EXTSEL_Pos       (6U)                                        
N#define ADC_CFGR1_EXTSEL_Msk       (0x7U << ADC_CFGR1_EXTSEL_Pos)              /*!< 0x000001C0 */
N#define ADC_CFGR1_EXTSEL           ADC_CFGR1_EXTSEL_Msk                        /*!< EXTSEL[2:0] bits (External Event Select for regular group) */
N#define ADC_CFGR1_EXTSEL_0         (0x1U << ADC_CFGR1_EXTSEL_Pos)              /*!< 0x00000040 */
N#define ADC_CFGR1_EXTSEL_1         (0x2U << ADC_CFGR1_EXTSEL_Pos)              /*!< 0x00000080 */
N#define ADC_CFGR1_EXTSEL_2         (0x4U << ADC_CFGR1_EXTSEL_Pos)              /*!< 0x00000100 */
N#define ADC_CFGR1_ALIGN_Pos        (5U)                                        
N#define ADC_CFGR1_ALIGN_Msk        (0x1U << ADC_CFGR1_ALIGN_Pos)               /*!< 0x00000020 */
N#define ADC_CFGR1_ALIGN            ADC_CFGR1_ALIGN_Msk                         /*!< Data Alignment */
N#define ADC_CFGR1_RES_Pos          (3U)                                        
N#define ADC_CFGR1_RES_Msk          (0x3U << ADC_CFGR1_RES_Pos)                 /*!< 0x00000018 */
N#define ADC_CFGR1_RES              ADC_CFGR1_RES_Msk                           /*!< RES[1:0] bits (Resolution) */
N#define ADC_CFGR1_RES_0            (0x1U << ADC_CFGR1_RES_Pos)                 /*!< 0x00000008 */
N#define ADC_CFGR1_RES_1            (0x2U << ADC_CFGR1_RES_Pos)                 /*!< 0x00000010 */
N#define ADC_CFGR1_SCANDIR_Pos      (2U)                                        
N#define ADC_CFGR1_SCANDIR_Msk      (0x1U << ADC_CFGR1_SCANDIR_Pos)             /*!< 0x00000004 */
N#define ADC_CFGR1_SCANDIR          ADC_CFGR1_SCANDIR_Msk                       /*!< Sequence scan direction */
N#define ADC_CFGR1_DMACFG_Pos       (1U)                                        
N#define ADC_CFGR1_DMACFG_Msk       (0x1U << ADC_CFGR1_DMACFG_Pos)              /*!< 0x00000002 */
N#define ADC_CFGR1_DMACFG           ADC_CFGR1_DMACFG_Msk                        /*!< Direct memory access configuration */
N#define ADC_CFGR1_DMAEN_Pos        (0U)                                        
N#define ADC_CFGR1_DMAEN_Msk        (0x1U << ADC_CFGR1_DMAEN_Pos)               /*!< 0x00000001 */
N#define ADC_CFGR1_DMAEN            ADC_CFGR1_DMAEN_Msk                         /*!< Direct memory access enable */
N
N/* Old WAIT bit definition, maintained for legacy purpose */
N#define ADC_CFGR1_AUTDLY                    ADC_CFGR1_WAIT
N
N/*******************  Bits definition for ADC_CFGR2 register  *****************/
N#define ADC_CFGR2_TOVS_Pos         (9U)                                        
N#define ADC_CFGR2_TOVS_Msk         (0x1U << ADC_CFGR2_TOVS_Pos)                /*!< 0x80000200 */
N#define ADC_CFGR2_TOVS             ADC_CFGR2_TOVS_Msk                          /*!< Triggered Oversampling */
N#define ADC_CFGR2_OVSS_Pos         (5U)                                        
N#define ADC_CFGR2_OVSS_Msk         (0xFU << ADC_CFGR2_OVSS_Pos)                /*!< 0x000001E0 */
N#define ADC_CFGR2_OVSS             ADC_CFGR2_OVSS_Msk                          /*!< OVSS [3:0] bits (Oversampling shift) */
N#define ADC_CFGR2_OVSS_0           (0x1U << ADC_CFGR2_OVSS_Pos)                /*!< 0x00000020 */
N#define ADC_CFGR2_OVSS_1           (0x2U << ADC_CFGR2_OVSS_Pos)                /*!< 0x00000040 */
N#define ADC_CFGR2_OVSS_2           (0x4U << ADC_CFGR2_OVSS_Pos)                /*!< 0x00000080 */
N#define ADC_CFGR2_OVSS_3           (0x8U << ADC_CFGR2_OVSS_Pos)                /*!< 0x00000100 */
N#define ADC_CFGR2_OVSR_Pos         (2U)                                        
N#define ADC_CFGR2_OVSR_Msk         (0x7U << ADC_CFGR2_OVSR_Pos)                /*!< 0x0000001C */
N#define ADC_CFGR2_OVSR             ADC_CFGR2_OVSR_Msk                          /*!< OVSR  [2:0] bits (Oversampling ratio) */
N#define ADC_CFGR2_OVSR_0           (0x1U << ADC_CFGR2_OVSR_Pos)                /*!< 0x00000004 */
N#define ADC_CFGR2_OVSR_1           (0x2U << ADC_CFGR2_OVSR_Pos)                /*!< 0x00000008 */
N#define ADC_CFGR2_OVSR_2           (0x4U << ADC_CFGR2_OVSR_Pos)                /*!< 0x00000010 */
N#define ADC_CFGR2_OVSE_Pos         (0U)                                        
N#define ADC_CFGR2_OVSE_Msk         (0x1U << ADC_CFGR2_OVSE_Pos)                /*!< 0x00000001 */
N#define ADC_CFGR2_OVSE             ADC_CFGR2_OVSE_Msk                          /*!< Oversampler Enable */
N#define ADC_CFGR2_CKMODE_Pos       (30U)                                       
N#define ADC_CFGR2_CKMODE_Msk       (0x3U << ADC_CFGR2_CKMODE_Pos)              /*!< 0xC0000000 */
N#define ADC_CFGR2_CKMODE           ADC_CFGR2_CKMODE_Msk                        /*!< CKMODE [1:0] bits (ADC clock mode) */
N#define ADC_CFGR2_CKMODE_0         (0x1U << ADC_CFGR2_CKMODE_Pos)              /*!< 0x40000000 */
N#define ADC_CFGR2_CKMODE_1         (0x2U << ADC_CFGR2_CKMODE_Pos)              /*!< 0x80000000 */
N
N
N/******************  Bit definition for ADC_SMPR register  ********************/
N#define ADC_SMPR_SMP_Pos           (0U)                                        
N#define ADC_SMPR_SMP_Msk           (0x7U << ADC_SMPR_SMP_Pos)                  /*!< 0x00000007 */
N#define ADC_SMPR_SMP               ADC_SMPR_SMP_Msk                            /*!< SMPR[2:0] bits (Sampling time selection) */
N#define ADC_SMPR_SMP_0             (0x1U << ADC_SMPR_SMP_Pos)                  /*!< 0x00000001 */
N#define ADC_SMPR_SMP_1             (0x2U << ADC_SMPR_SMP_Pos)                  /*!< 0x00000002 */
N#define ADC_SMPR_SMP_2             (0x4U << ADC_SMPR_SMP_Pos)                  /*!< 0x00000004 */
N
N/* Legacy defines */
N#define ADC_SMPR_SMPR                       ADC_SMPR_SMP
N#define ADC_SMPR_SMPR_0                     ADC_SMPR_SMP_0
N#define ADC_SMPR_SMPR_1                     ADC_SMPR_SMP_1
N#define ADC_SMPR_SMPR_2                     ADC_SMPR_SMP_2
N
N/*******************  Bit definition for ADC_TR register  ********************/
N#define ADC_TR_HT_Pos              (16U)                                       
N#define ADC_TR_HT_Msk              (0xFFFU << ADC_TR_HT_Pos)                   /*!< 0x0FFF0000 */
N#define ADC_TR_HT                  ADC_TR_HT_Msk                               /*!< Analog watchdog high threshold */
N#define ADC_TR_LT_Pos              (0U)                                        
N#define ADC_TR_LT_Msk              (0xFFFU << ADC_TR_LT_Pos)                   /*!< 0x00000FFF */
N#define ADC_TR_LT                  ADC_TR_LT_Msk                               /*!< Analog watchdog low threshold */
N
N/******************  Bit definition for ADC_CHSELR register  ******************/
N#define ADC_CHSELR_CHSEL_Pos       (0U)                                        
N#define ADC_CHSELR_CHSEL_Msk       (0x7FFFFU << ADC_CHSELR_CHSEL_Pos)          /*!< 0x0007FFFF */
N#define ADC_CHSELR_CHSEL           ADC_CHSELR_CHSEL_Msk                        /*!< ADC group regular sequencer channels */
N#define ADC_CHSELR_CHSEL18_Pos     (18U)                                       
N#define ADC_CHSELR_CHSEL18_Msk     (0x1U << ADC_CHSELR_CHSEL18_Pos)            /*!< 0x00040000 */
N#define ADC_CHSELR_CHSEL18         ADC_CHSELR_CHSEL18_Msk                      /*!< Channel 18 selection */
N#define ADC_CHSELR_CHSEL17_Pos     (17U)                                       
N#define ADC_CHSELR_CHSEL17_Msk     (0x1U << ADC_CHSELR_CHSEL17_Pos)            /*!< 0x00020000 */
N#define ADC_CHSELR_CHSEL17         ADC_CHSELR_CHSEL17_Msk                      /*!< Channel 17 selection */
N#define ADC_CHSELR_CHSEL16_Pos     (16U)                                       
N#define ADC_CHSELR_CHSEL16_Msk     (0x1U << ADC_CHSELR_CHSEL16_Pos)            /*!< 0x00010000 */
N#define ADC_CHSELR_CHSEL16         ADC_CHSELR_CHSEL16_Msk                      /*!< Channel 16 selection */
N#define ADC_CHSELR_CHSEL15_Pos     (15U)                                       
N#define ADC_CHSELR_CHSEL15_Msk     (0x1U << ADC_CHSELR_CHSEL15_Pos)            /*!< 0x00008000 */
N#define ADC_CHSELR_CHSEL15         ADC_CHSELR_CHSEL15_Msk                      /*!< Channel 15 selection */
N#define ADC_CHSELR_CHSEL14_Pos     (14U)                                       
N#define ADC_CHSELR_CHSEL14_Msk     (0x1U << ADC_CHSELR_CHSEL14_Pos)            /*!< 0x00004000 */
N#define ADC_CHSELR_CHSEL14         ADC_CHSELR_CHSEL14_Msk                      /*!< Channel 14 selection */
N#define ADC_CHSELR_CHSEL13_Pos     (13U)                                       
N#define ADC_CHSELR_CHSEL13_Msk     (0x1U << ADC_CHSELR_CHSEL13_Pos)            /*!< 0x00002000 */
N#define ADC_CHSELR_CHSEL13         ADC_CHSELR_CHSEL13_Msk                      /*!< Channel 13 selection */
N#define ADC_CHSELR_CHSEL12_Pos     (12U)                                       
N#define ADC_CHSELR_CHSEL12_Msk     (0x1U << ADC_CHSELR_CHSEL12_Pos)            /*!< 0x00001000 */
N#define ADC_CHSELR_CHSEL12         ADC_CHSELR_CHSEL12_Msk                      /*!< Channel 12 selection */
N#define ADC_CHSELR_CHSEL11_Pos     (11U)                                       
N#define ADC_CHSELR_CHSEL11_Msk     (0x1U << ADC_CHSELR_CHSEL11_Pos)            /*!< 0x00000800 */
N#define ADC_CHSELR_CHSEL11         ADC_CHSELR_CHSEL11_Msk                      /*!< Channel 11 selection */
N#define ADC_CHSELR_CHSEL10_Pos     (10U)                                       
N#define ADC_CHSELR_CHSEL10_Msk     (0x1U << ADC_CHSELR_CHSEL10_Pos)            /*!< 0x00000400 */
N#define ADC_CHSELR_CHSEL10         ADC_CHSELR_CHSEL10_Msk                      /*!< Channel 10 selection */
N#define ADC_CHSELR_CHSEL9_Pos      (9U)                                        
N#define ADC_CHSELR_CHSEL9_Msk      (0x1U << ADC_CHSELR_CHSEL9_Pos)             /*!< 0x00000200 */
N#define ADC_CHSELR_CHSEL9          ADC_CHSELR_CHSEL9_Msk                       /*!< Channel 9 selection */
N#define ADC_CHSELR_CHSEL8_Pos      (8U)                                        
N#define ADC_CHSELR_CHSEL8_Msk      (0x1U << ADC_CHSELR_CHSEL8_Pos)             /*!< 0x00000100 */
N#define ADC_CHSELR_CHSEL8          ADC_CHSELR_CHSEL8_Msk                       /*!< Channel 8 selection */
N#define ADC_CHSELR_CHSEL7_Pos      (7U)                                        
N#define ADC_CHSELR_CHSEL7_Msk      (0x1U << ADC_CHSELR_CHSEL7_Pos)             /*!< 0x00000080 */
N#define ADC_CHSELR_CHSEL7          ADC_CHSELR_CHSEL7_Msk                       /*!< Channel 7 selection */
N#define ADC_CHSELR_CHSEL6_Pos      (6U)                                        
N#define ADC_CHSELR_CHSEL6_Msk      (0x1U << ADC_CHSELR_CHSEL6_Pos)             /*!< 0x00000040 */
N#define ADC_CHSELR_CHSEL6          ADC_CHSELR_CHSEL6_Msk                       /*!< Channel 6 selection */
N#define ADC_CHSELR_CHSEL5_Pos      (5U)                                        
N#define ADC_CHSELR_CHSEL5_Msk      (0x1U << ADC_CHSELR_CHSEL5_Pos)             /*!< 0x00000020 */
N#define ADC_CHSELR_CHSEL5          ADC_CHSELR_CHSEL5_Msk                       /*!< Channel 5 selection */
N#define ADC_CHSELR_CHSEL4_Pos      (4U)                                        
N#define ADC_CHSELR_CHSEL4_Msk      (0x1U << ADC_CHSELR_CHSEL4_Pos)             /*!< 0x00000010 */
N#define ADC_CHSELR_CHSEL4          ADC_CHSELR_CHSEL4_Msk                       /*!< Channel 4 selection */
N#define ADC_CHSELR_CHSEL3_Pos      (3U)                                        
N#define ADC_CHSELR_CHSEL3_Msk      (0x1U << ADC_CHSELR_CHSEL3_Pos)             /*!< 0x00000008 */
N#define ADC_CHSELR_CHSEL3          ADC_CHSELR_CHSEL3_Msk                       /*!< Channel 3 selection */
N#define ADC_CHSELR_CHSEL2_Pos      (2U)                                        
N#define ADC_CHSELR_CHSEL2_Msk      (0x1U << ADC_CHSELR_CHSEL2_Pos)             /*!< 0x00000004 */
N#define ADC_CHSELR_CHSEL2          ADC_CHSELR_CHSEL2_Msk                       /*!< Channel 2 selection */
N#define ADC_CHSELR_CHSEL1_Pos      (1U)                                        
N#define ADC_CHSELR_CHSEL1_Msk      (0x1U << ADC_CHSELR_CHSEL1_Pos)             /*!< 0x00000002 */
N#define ADC_CHSELR_CHSEL1          ADC_CHSELR_CHSEL1_Msk                       /*!< Channel 1 selection */
N#define ADC_CHSELR_CHSEL0_Pos      (0U)                                        
N#define ADC_CHSELR_CHSEL0_Msk      (0x1U << ADC_CHSELR_CHSEL0_Pos)             /*!< 0x00000001 */
N#define ADC_CHSELR_CHSEL0          ADC_CHSELR_CHSEL0_Msk                       /*!< Channel 0 selection */
N
N/********************  Bit definition for ADC_DR register  ********************/
N#define ADC_DR_DATA_Pos            (0U)                                        
N#define ADC_DR_DATA_Msk            (0xFFFFU << ADC_DR_DATA_Pos)                /*!< 0x0000FFFF */
N#define ADC_DR_DATA                ADC_DR_DATA_Msk                             /*!< Regular data */
N
N/********************  Bit definition for ADC_CALFACT register  ********************/
N#define ADC_CALFACT_CALFACT_Pos    (0U)                                        
N#define ADC_CALFACT_CALFACT_Msk    (0x7FU << ADC_CALFACT_CALFACT_Pos)          /*!< 0x0000007F */
N#define ADC_CALFACT_CALFACT        ADC_CALFACT_CALFACT_Msk                     /*!< Calibration factor */
N
N/*******************  Bit definition for ADC_CCR register  ********************/
N#define ADC_CCR_LFMEN_Pos          (25U)                                       
N#define ADC_CCR_LFMEN_Msk          (0x1U << ADC_CCR_LFMEN_Pos)                 /*!< 0x02000000 */
N#define ADC_CCR_LFMEN              ADC_CCR_LFMEN_Msk                           /*!< Low Frequency Mode enable */
N#define ADC_CCR_VLCDEN_Pos         (24U)                                       
N#define ADC_CCR_VLCDEN_Msk         (0x1U << ADC_CCR_VLCDEN_Pos)                /*!< 0x01000000 */
N#define ADC_CCR_VLCDEN             ADC_CCR_VLCDEN_Msk                          /*!< Voltage LCD enable */
N#define ADC_CCR_TSEN_Pos           (23U)                                       
N#define ADC_CCR_TSEN_Msk           (0x1U << ADC_CCR_TSEN_Pos)                  /*!< 0x00800000 */
N#define ADC_CCR_TSEN               ADC_CCR_TSEN_Msk                            /*!< Temperature sensore enable */
N#define ADC_CCR_VREFEN_Pos         (22U)                                       
N#define ADC_CCR_VREFEN_Msk         (0x1U << ADC_CCR_VREFEN_Pos)                /*!< 0x00400000 */
N#define ADC_CCR_VREFEN             ADC_CCR_VREFEN_Msk                          /*!< Vrefint enable */
N#define ADC_CCR_PRESC_Pos          (18U)                                       
N#define ADC_CCR_PRESC_Msk          (0xFU << ADC_CCR_PRESC_Pos)                 /*!< 0x003C0000 */
N#define ADC_CCR_PRESC              ADC_CCR_PRESC_Msk                           /*!< PRESC  [3:0] bits (ADC prescaler) */
N#define ADC_CCR_PRESC_0            (0x1U << ADC_CCR_PRESC_Pos)                 /*!< 0x00040000 */
N#define ADC_CCR_PRESC_1            (0x2U << ADC_CCR_PRESC_Pos)                 /*!< 0x00080000 */
N#define ADC_CCR_PRESC_2            (0x4U << ADC_CCR_PRESC_Pos)                 /*!< 0x00100000 */
N#define ADC_CCR_PRESC_3            (0x8U << ADC_CCR_PRESC_Pos)                 /*!< 0x00200000 */
N
N/******************************************************************************/
N/*                                                                            */
N/*                      Analog Comparators (COMP)                             */
N/*                                                                            */
N/******************************************************************************/
N/*************  Bit definition for COMP_CSR register (COMP1 and COMP2)  **************/
N/* COMP1 bits definition */
N#define COMP_CSR_COMP1EN_Pos           (0U)                                    
N#define COMP_CSR_COMP1EN_Msk           (0x1U << COMP_CSR_COMP1EN_Pos)          /*!< 0x00000001 */
N#define COMP_CSR_COMP1EN               COMP_CSR_COMP1EN_Msk                    /*!< COMP1 enable */
N#define COMP_CSR_COMP1INNSEL_Pos       (4U)                                    
N#define COMP_CSR_COMP1INNSEL_Msk       (0x3U << COMP_CSR_COMP1INNSEL_Pos)      /*!< 0x00000030 */
N#define COMP_CSR_COMP1INNSEL           COMP_CSR_COMP1INNSEL_Msk                /*!< COMP1 inverting input select */
N#define COMP_CSR_COMP1INNSEL_0         (0x1U << COMP_CSR_COMP1INNSEL_Pos)      /*!< 0x00000010 */
N#define COMP_CSR_COMP1INNSEL_1         (0x2U << COMP_CSR_COMP1INNSEL_Pos)      /*!< 0x00000020 */
N#define COMP_CSR_COMP1WM_Pos           (8U)                                    
N#define COMP_CSR_COMP1WM_Msk           (0x1U << COMP_CSR_COMP1WM_Pos)          /*!< 0x00000100 */
N#define COMP_CSR_COMP1WM               COMP_CSR_COMP1WM_Msk                    /*!< Comparators window mode enable */
N#define COMP_CSR_COMP1LPTIM1IN1_Pos    (12U)                                   
N#define COMP_CSR_COMP1LPTIM1IN1_Msk    (0x1U << COMP_CSR_COMP1LPTIM1IN1_Pos)   /*!< 0x00001000 */
N#define COMP_CSR_COMP1LPTIM1IN1        COMP_CSR_COMP1LPTIM1IN1_Msk             /*!< COMP1 LPTIM1 IN1 connection */
N#define COMP_CSR_COMP1POLARITY_Pos     (15U)                                   
N#define COMP_CSR_COMP1POLARITY_Msk     (0x1U << COMP_CSR_COMP1POLARITY_Pos)    /*!< 0x00008000 */
N#define COMP_CSR_COMP1POLARITY         COMP_CSR_COMP1POLARITY_Msk              /*!< COMP1 output polarity */
N#define COMP_CSR_COMP1VALUE_Pos        (30U)                                   
N#define COMP_CSR_COMP1VALUE_Msk        (0x1U << COMP_CSR_COMP1VALUE_Pos)       /*!< 0x40000000 */
N#define COMP_CSR_COMP1VALUE            COMP_CSR_COMP1VALUE_Msk                 /*!< COMP1 output level */
N#define COMP_CSR_COMP1LOCK_Pos         (31U)                                   
N#define COMP_CSR_COMP1LOCK_Msk         (0x1U << COMP_CSR_COMP1LOCK_Pos)        /*!< 0x80000000 */
N#define COMP_CSR_COMP1LOCK             COMP_CSR_COMP1LOCK_Msk                  /*!< COMP1 lock */
N/* COMP2 bits definition */
N#define COMP_CSR_COMP2EN_Pos           (0U)                                    
N#define COMP_CSR_COMP2EN_Msk           (0x1U << COMP_CSR_COMP2EN_Pos)          /*!< 0x00000001 */
N#define COMP_CSR_COMP2EN               COMP_CSR_COMP2EN_Msk                    /*!< COMP2 enable */
N#define COMP_CSR_COMP2SPEED_Pos        (3U)                                    
N#define COMP_CSR_COMP2SPEED_Msk        (0x1U << COMP_CSR_COMP2SPEED_Pos)       /*!< 0x00000008 */
N#define COMP_CSR_COMP2SPEED            COMP_CSR_COMP2SPEED_Msk                 /*!< COMP2 power mode */
N#define COMP_CSR_COMP2INNSEL_Pos       (4U)                                    
N#define COMP_CSR_COMP2INNSEL_Msk       (0x7U << COMP_CSR_COMP2INNSEL_Pos)      /*!< 0x00000070 */
N#define COMP_CSR_COMP2INNSEL           COMP_CSR_COMP2INNSEL_Msk                /*!< COMP2 inverting input select */
N#define COMP_CSR_COMP2INNSEL_0         (0x1U << COMP_CSR_COMP2INNSEL_Pos)      /*!< 0x00000010 */
N#define COMP_CSR_COMP2INNSEL_1         (0x2U << COMP_CSR_COMP2INNSEL_Pos)      /*!< 0x00000020 */
N#define COMP_CSR_COMP2INNSEL_2         (0x4U << COMP_CSR_COMP2INNSEL_Pos)      /*!< 0x00000040 */
N#define COMP_CSR_COMP2INPSEL_Pos       (8U)                                    
N#define COMP_CSR_COMP2INPSEL_Msk       (0x7U << COMP_CSR_COMP2INPSEL_Pos)      /*!< 0x00000700 */
N#define COMP_CSR_COMP2INPSEL           COMP_CSR_COMP2INPSEL_Msk                /*!< COMPx non inverting input select */
N#define COMP_CSR_COMP2INPSEL_0         (0x1U << COMP_CSR_COMP2INPSEL_Pos)      /*!< 0x00000100 */
N#define COMP_CSR_COMP2INPSEL_1         (0x2U << COMP_CSR_COMP2INPSEL_Pos)      /*!< 0x00000200 */
N#define COMP_CSR_COMP2INPSEL_2         (0x4U << COMP_CSR_COMP2INPSEL_Pos)      /*!< 0x00000400 */
N#define COMP_CSR_COMP2LPTIM1IN2_Pos    (12U)                                   
N#define COMP_CSR_COMP2LPTIM1IN2_Msk    (0x1U << COMP_CSR_COMP2LPTIM1IN2_Pos)   /*!< 0x00001000 */
N#define COMP_CSR_COMP2LPTIM1IN2        COMP_CSR_COMP2LPTIM1IN2_Msk             /*!< COMP2 LPTIM1 IN2 connection */
N#define COMP_CSR_COMP2LPTIM1IN1_Pos    (13U)                                   
N#define COMP_CSR_COMP2LPTIM1IN1_Msk    (0x1U << COMP_CSR_COMP2LPTIM1IN1_Pos)   /*!< 0x00002000 */
N#define COMP_CSR_COMP2LPTIM1IN1        COMP_CSR_COMP2LPTIM1IN1_Msk             /*!< COMP2 LPTIM1 IN1 connection */
N#define COMP_CSR_COMP2POLARITY_Pos     (15U)                                   
N#define COMP_CSR_COMP2POLARITY_Msk     (0x1U << COMP_CSR_COMP2POLARITY_Pos)    /*!< 0x00008000 */
N#define COMP_CSR_COMP2POLARITY         COMP_CSR_COMP2POLARITY_Msk              /*!< COMP2 output polarity */
N#define COMP_CSR_COMP2VALUE_Pos        (30U)                                   
N#define COMP_CSR_COMP2VALUE_Msk        (0x1U << COMP_CSR_COMP2VALUE_Pos)       /*!< 0x40000000 */
N#define COMP_CSR_COMP2VALUE            COMP_CSR_COMP2VALUE_Msk                 /*!< COMP2 output level */
N#define COMP_CSR_COMP2LOCK_Pos         (31U)                                   
N#define COMP_CSR_COMP2LOCK_Msk         (0x1U << COMP_CSR_COMP2LOCK_Pos)        /*!< 0x80000000 */
N#define COMP_CSR_COMP2LOCK             COMP_CSR_COMP2LOCK_Msk                  /*!< COMP2 lock */
N
N/**********************  Bit definition for COMP_CSR register common  ****************/
N#define COMP_CSR_COMPxEN_Pos           (0U)                                    
N#define COMP_CSR_COMPxEN_Msk           (0x1U << COMP_CSR_COMPxEN_Pos)          /*!< 0x00000001 */
N#define COMP_CSR_COMPxEN               COMP_CSR_COMPxEN_Msk                    /*!< COMPx enable */
N#define COMP_CSR_COMPxPOLARITY_Pos     (15U)                                   
N#define COMP_CSR_COMPxPOLARITY_Msk     (0x1U << COMP_CSR_COMPxPOLARITY_Pos)    /*!< 0x00008000 */
N#define COMP_CSR_COMPxPOLARITY         COMP_CSR_COMPxPOLARITY_Msk              /*!< COMPx output polarity */
N#define COMP_CSR_COMPxOUTVALUE_Pos     (30U)                                   
N#define COMP_CSR_COMPxOUTVALUE_Msk     (0x1U << COMP_CSR_COMPxOUTVALUE_Pos)    /*!< 0x40000000 */
N#define COMP_CSR_COMPxOUTVALUE         COMP_CSR_COMPxOUTVALUE_Msk              /*!< COMPx output level */
N#define COMP_CSR_COMPxLOCK_Pos         (31U)                                   
N#define COMP_CSR_COMPxLOCK_Msk         (0x1U << COMP_CSR_COMPxLOCK_Pos)        /*!< 0x80000000 */
N#define COMP_CSR_COMPxLOCK             COMP_CSR_COMPxLOCK_Msk                  /*!< COMPx lock */
N
N/* Reference defines */
N#define COMP_CSR_WINMODE   COMP_CSR_COMP1WM /*!< Bit intended to be used with COMP common instance (COMP_Common_TypeDef)  */
N
N/******************************************************************************/
N/*                                                                            */
N/*                       CRC calculation unit (CRC)                           */
N/*                                                                            */
N/******************************************************************************/
N/*******************  Bit definition for CRC_DR register  *********************/
N#define CRC_DR_DR_Pos            (0U)                                          
N#define CRC_DR_DR_Msk            (0xFFFFFFFFU << CRC_DR_DR_Pos)                /*!< 0xFFFFFFFF */
N#define CRC_DR_DR                CRC_DR_DR_Msk                                 /*!< Data register bits */
N
N/*******************  Bit definition for CRC_IDR register  ********************/
N#define CRC_IDR_IDR              ((uint8_t)0xFFU)                              /*!< General-purpose 8-bit data register bits */
N
N/********************  Bit definition for CRC_CR register  ********************/
N#define CRC_CR_RESET_Pos         (0U)                                          
N#define CRC_CR_RESET_Msk         (0x1U << CRC_CR_RESET_Pos)                    /*!< 0x00000001 */
N#define CRC_CR_RESET             CRC_CR_RESET_Msk                              /*!< RESET the CRC computation unit bit */
N#define CRC_CR_POLYSIZE_Pos      (3U)                                          
N#define CRC_CR_POLYSIZE_Msk      (0x3U << CRC_CR_POLYSIZE_Pos)                 /*!< 0x00000018 */
N#define CRC_CR_POLYSIZE          CRC_CR_POLYSIZE_Msk                           /*!< Polynomial size bits */
N#define CRC_CR_POLYSIZE_0        (0x1U << CRC_CR_POLYSIZE_Pos)                 /*!< 0x00000008 */
N#define CRC_CR_POLYSIZE_1        (0x2U << CRC_CR_POLYSIZE_Pos)                 /*!< 0x00000010 */
N#define CRC_CR_REV_IN_Pos        (5U)                                          
N#define CRC_CR_REV_IN_Msk        (0x3U << CRC_CR_REV_IN_Pos)                   /*!< 0x00000060 */
N#define CRC_CR_REV_IN            CRC_CR_REV_IN_Msk                             /*!< REV_IN Reverse Input Data bits */
N#define CRC_CR_REV_IN_0          (0x1U << CRC_CR_REV_IN_Pos)                   /*!< 0x00000020 */
N#define CRC_CR_REV_IN_1          (0x2U << CRC_CR_REV_IN_Pos)                   /*!< 0x00000040 */
N#define CRC_CR_REV_OUT_Pos       (7U)                                          
N#define CRC_CR_REV_OUT_Msk       (0x1U << CRC_CR_REV_OUT_Pos)                  /*!< 0x00000080 */
N#define CRC_CR_REV_OUT           CRC_CR_REV_OUT_Msk                            /*!< REV_OUT Reverse Output Data bits */
N
N/*******************  Bit definition for CRC_INIT register  *******************/
N#define CRC_INIT_INIT_Pos        (0U)                                          
N#define CRC_INIT_INIT_Msk        (0xFFFFFFFFU << CRC_INIT_INIT_Pos)            /*!< 0xFFFFFFFF */
N#define CRC_INIT_INIT            CRC_INIT_INIT_Msk                             /*!< Initial CRC value bits */
N
N/*******************  Bit definition for CRC_POL register  ********************/
N#define CRC_POL_POL_Pos          (0U)                                          
N#define CRC_POL_POL_Msk          (0xFFFFFFFFU << CRC_POL_POL_Pos)              /*!< 0xFFFFFFFF */
N#define CRC_POL_POL              CRC_POL_POL_Msk                               /*!< Coefficients of the polynomial */
N
N/******************************************************************************/
N/*                                                                            */
N/*                          CRS Clock Recovery System                         */
N/*                                                                            */
N/******************************************************************************/
N
N/*******************  Bit definition for CRS_CR register  *********************/
N#define CRS_CR_SYNCOKIE_Pos       (0U)                                         
N#define CRS_CR_SYNCOKIE_Msk       (0x1U << CRS_CR_SYNCOKIE_Pos)                /*!< 0x00000001 */
N#define CRS_CR_SYNCOKIE           CRS_CR_SYNCOKIE_Msk                          /* SYNC event OK interrupt enable        */
N#define CRS_CR_SYNCWARNIE_Pos     (1U)                                         
N#define CRS_CR_SYNCWARNIE_Msk     (0x1U << CRS_CR_SYNCWARNIE_Pos)              /*!< 0x00000002 */
N#define CRS_CR_SYNCWARNIE         CRS_CR_SYNCWARNIE_Msk                        /* SYNC warning interrupt enable         */
N#define CRS_CR_ERRIE_Pos          (2U)                                         
N#define CRS_CR_ERRIE_Msk          (0x1U << CRS_CR_ERRIE_Pos)                   /*!< 0x00000004 */
N#define CRS_CR_ERRIE              CRS_CR_ERRIE_Msk                             /* SYNC error interrupt enable           */
N#define CRS_CR_ESYNCIE_Pos        (3U)                                         
N#define CRS_CR_ESYNCIE_Msk        (0x1U << CRS_CR_ESYNCIE_Pos)                 /*!< 0x00000008 */
N#define CRS_CR_ESYNCIE            CRS_CR_ESYNCIE_Msk                           /* Expected SYNC(ESYNCF) interrupt Enable*/
N#define CRS_CR_CEN_Pos            (5U)                                         
N#define CRS_CR_CEN_Msk            (0x1U << CRS_CR_CEN_Pos)                     /*!< 0x00000020 */
N#define CRS_CR_CEN                CRS_CR_CEN_Msk                               /* Frequency error counter enable        */
N#define CRS_CR_AUTOTRIMEN_Pos     (6U)                                         
N#define CRS_CR_AUTOTRIMEN_Msk     (0x1U << CRS_CR_AUTOTRIMEN_Pos)              /*!< 0x00000040 */
N#define CRS_CR_AUTOTRIMEN         CRS_CR_AUTOTRIMEN_Msk                        /* Automatic trimming enable             */
N#define CRS_CR_SWSYNC_Pos         (7U)                                         
N#define CRS_CR_SWSYNC_Msk         (0x1U << CRS_CR_SWSYNC_Pos)                  /*!< 0x00000080 */
N#define CRS_CR_SWSYNC             CRS_CR_SWSYNC_Msk                            /* A Software SYNC event is generated    */
N#define CRS_CR_TRIM_Pos           (8U)                                         
N#define CRS_CR_TRIM_Msk           (0x3FU << CRS_CR_TRIM_Pos)                   /*!< 0x00003F00 */
N#define CRS_CR_TRIM               CRS_CR_TRIM_Msk                              /* HSI48 oscillator smooth trimming      */
N
N/*******************  Bit definition for CRS_CFGR register  *********************/
N#define CRS_CFGR_RELOAD_Pos       (0U)                                         
N#define CRS_CFGR_RELOAD_Msk       (0xFFFFU << CRS_CFGR_RELOAD_Pos)             /*!< 0x0000FFFF */
N#define CRS_CFGR_RELOAD           CRS_CFGR_RELOAD_Msk                          /* Counter reload value               */
N#define CRS_CFGR_FELIM_Pos        (16U)                                        
N#define CRS_CFGR_FELIM_Msk        (0xFFU << CRS_CFGR_FELIM_Pos)                /*!< 0x00FF0000 */
N#define CRS_CFGR_FELIM            CRS_CFGR_FELIM_Msk                           /* Frequency error limit              */
N
N#define CRS_CFGR_SYNCDIV_Pos      (24U)                                        
N#define CRS_CFGR_SYNCDIV_Msk      (0x7U << CRS_CFGR_SYNCDIV_Pos)               /*!< 0x07000000 */
N#define CRS_CFGR_SYNCDIV          CRS_CFGR_SYNCDIV_Msk                         /* SYNC divider                       */
N#define CRS_CFGR_SYNCDIV_0        (0x1U << CRS_CFGR_SYNCDIV_Pos)               /*!< 0x01000000 */
N#define CRS_CFGR_SYNCDIV_1        (0x2U << CRS_CFGR_SYNCDIV_Pos)               /*!< 0x02000000 */
N#define CRS_CFGR_SYNCDIV_2        (0x4U << CRS_CFGR_SYNCDIV_Pos)               /*!< 0x04000000 */
N
N#define CRS_CFGR_SYNCSRC_Pos      (28U)                                        
N#define CRS_CFGR_SYNCSRC_Msk      (0x3U << CRS_CFGR_SYNCSRC_Pos)               /*!< 0x30000000 */
N#define CRS_CFGR_SYNCSRC          CRS_CFGR_SYNCSRC_Msk                         /* SYNC signal source selection       */
N#define CRS_CFGR_SYNCSRC_0        (0x1U << CRS_CFGR_SYNCSRC_Pos)               /*!< 0x10000000 */
N#define CRS_CFGR_SYNCSRC_1        (0x2U << CRS_CFGR_SYNCSRC_Pos)               /*!< 0x20000000 */
N
N#define CRS_CFGR_SYNCPOL_Pos      (31U)                                        
N#define CRS_CFGR_SYNCPOL_Msk      (0x1U << CRS_CFGR_SYNCPOL_Pos)               /*!< 0x80000000 */
N#define CRS_CFGR_SYNCPOL          CRS_CFGR_SYNCPOL_Msk                         /* SYNC polarity selection            */
N  
N/*******************  Bit definition for CRS_ISR register  *********************/
N#define CRS_ISR_SYNCOKF_Pos       (0U)                                         
N#define CRS_ISR_SYNCOKF_Msk       (0x1U << CRS_ISR_SYNCOKF_Pos)                /*!< 0x00000001 */
N#define CRS_ISR_SYNCOKF           CRS_ISR_SYNCOKF_Msk                          /* SYNC event OK flag             */
N#define CRS_ISR_SYNCWARNF_Pos     (1U)                                         
N#define CRS_ISR_SYNCWARNF_Msk     (0x1U << CRS_ISR_SYNCWARNF_Pos)              /*!< 0x00000002 */
N#define CRS_ISR_SYNCWARNF         CRS_ISR_SYNCWARNF_Msk                        /* SYNC warning                   */
N#define CRS_ISR_ERRF_Pos          (2U)                                         
N#define CRS_ISR_ERRF_Msk          (0x1U << CRS_ISR_ERRF_Pos)                   /*!< 0x00000004 */
N#define CRS_ISR_ERRF              CRS_ISR_ERRF_Msk                             /* SYNC error flag                */
N#define CRS_ISR_ESYNCF_Pos        (3U)                                         
N#define CRS_ISR_ESYNCF_Msk        (0x1U << CRS_ISR_ESYNCF_Pos)                 /*!< 0x00000008 */
N#define CRS_ISR_ESYNCF            CRS_ISR_ESYNCF_Msk                           /* Expected SYNC flag             */
N#define CRS_ISR_SYNCERR_Pos       (8U)                                         
N#define CRS_ISR_SYNCERR_Msk       (0x1U << CRS_ISR_SYNCERR_Pos)                /*!< 0x00000100 */
N#define CRS_ISR_SYNCERR           CRS_ISR_SYNCERR_Msk                          /* SYNC error                     */
N#define CRS_ISR_SYNCMISS_Pos      (9U)                                         
N#define CRS_ISR_SYNCMISS_Msk      (0x1U << CRS_ISR_SYNCMISS_Pos)               /*!< 0x00000200 */
N#define CRS_ISR_SYNCMISS          CRS_ISR_SYNCMISS_Msk                         /* SYNC missed                    */
N#define CRS_ISR_TRIMOVF_Pos       (10U)                                        
N#define CRS_ISR_TRIMOVF_Msk       (0x1U << CRS_ISR_TRIMOVF_Pos)                /*!< 0x00000400 */
N#define CRS_ISR_TRIMOVF           CRS_ISR_TRIMOVF_Msk                          /* Trimming overflow or underflow */
N#define CRS_ISR_FEDIR_Pos         (15U)                                        
N#define CRS_ISR_FEDIR_Msk         (0x1U << CRS_ISR_FEDIR_Pos)                  /*!< 0x00008000 */
N#define CRS_ISR_FEDIR             CRS_ISR_FEDIR_Msk                            /* Frequency error direction      */
N#define CRS_ISR_FECAP_Pos         (16U)                                        
N#define CRS_ISR_FECAP_Msk         (0xFFFFU << CRS_ISR_FECAP_Pos)               /*!< 0xFFFF0000 */
N#define CRS_ISR_FECAP             CRS_ISR_FECAP_Msk                            /* Frequency error capture        */
N
N/*******************  Bit definition for CRS_ICR register  *********************/
N#define CRS_ICR_SYNCOKC_Pos       (0U)                                         
N#define CRS_ICR_SYNCOKC_Msk       (0x1U << CRS_ICR_SYNCOKC_Pos)                /*!< 0x00000001 */
N#define CRS_ICR_SYNCOKC           CRS_ICR_SYNCOKC_Msk                          /* SYNC event OK clear flag     */
N#define CRS_ICR_SYNCWARNC_Pos     (1U)                                         
N#define CRS_ICR_SYNCWARNC_Msk     (0x1U << CRS_ICR_SYNCWARNC_Pos)              /*!< 0x00000002 */
N#define CRS_ICR_SYNCWARNC         CRS_ICR_SYNCWARNC_Msk                        /* SYNC warning clear flag      */
N#define CRS_ICR_ERRC_Pos          (2U)                                         
N#define CRS_ICR_ERRC_Msk          (0x1U << CRS_ICR_ERRC_Pos)                   /*!< 0x00000004 */
N#define CRS_ICR_ERRC              CRS_ICR_ERRC_Msk                             /* Error clear flag             */
N#define CRS_ICR_ESYNCC_Pos        (3U)                                         
N#define CRS_ICR_ESYNCC_Msk        (0x1U << CRS_ICR_ESYNCC_Pos)                 /*!< 0x00000008 */
N#define CRS_ICR_ESYNCC            CRS_ICR_ESYNCC_Msk                           /* Expected SYNC clear flag     */
N
N/******************************************************************************/
N/*                                                                            */
N/*                 Digital to Analog Converter (DAC)                          */
N/*                                                                            */
N/******************************************************************************/
N
N/*
N * @brief Specific device feature definitions (not present on all devices in the STM32L0 family)
N */
N/* Note: No specific macro feature on this device */
N
N/********************  Bit definition for DAC_CR register  ********************/
N#define DAC_CR_EN1_Pos              (0U)                                       
N#define DAC_CR_EN1_Msk              (0x1U << DAC_CR_EN1_Pos)                   /*!< 0x00000001 */
N#define DAC_CR_EN1                  DAC_CR_EN1_Msk                             /*!< DAC channel1 enable */
N#define DAC_CR_BOFF1_Pos            (1U)                                       
N#define DAC_CR_BOFF1_Msk            (0x1U << DAC_CR_BOFF1_Pos)                 /*!< 0x00000002 */
N#define DAC_CR_BOFF1                DAC_CR_BOFF1_Msk                           /*!< DAC channel1 output buffer disable */
N#define DAC_CR_TEN1_Pos             (2U)                                       
N#define DAC_CR_TEN1_Msk             (0x1U << DAC_CR_TEN1_Pos)                  /*!< 0x00000004 */
N#define DAC_CR_TEN1                 DAC_CR_TEN1_Msk                            /*!< DAC channel1 Trigger enable */
N
N#define DAC_CR_TSEL1_Pos            (3U)                                       
N#define DAC_CR_TSEL1_Msk            (0x7U << DAC_CR_TSEL1_Pos)                 /*!< 0x00000038 */
N#define DAC_CR_TSEL1                DAC_CR_TSEL1_Msk                           /*!< TSEL1[2:0] (DAC channel1 Trigger selection) */
N#define DAC_CR_TSEL1_0              (0x1U << DAC_CR_TSEL1_Pos)                 /*!< 0x00000008 */
N#define DAC_CR_TSEL1_1              (0x2U << DAC_CR_TSEL1_Pos)                 /*!< 0x00000010 */
N#define DAC_CR_TSEL1_2              (0x4U << DAC_CR_TSEL1_Pos)                 /*!< 0x00000020 */
N
N#define DAC_CR_WAVE1_Pos            (6U)                                       
N#define DAC_CR_WAVE1_Msk            (0x3U << DAC_CR_WAVE1_Pos)                 /*!< 0x000000C0 */
N#define DAC_CR_WAVE1                DAC_CR_WAVE1_Msk                           /*!< WAVE1[1:0] (DAC channel1 noise/triangle wave generation enable) */
N#define DAC_CR_WAVE1_0              (0x1U << DAC_CR_WAVE1_Pos)                 /*!< 0x00000040 */
N#define DAC_CR_WAVE1_1              (0x2U << DAC_CR_WAVE1_Pos)                 /*!< 0x00000080 */
N
N#define DAC_CR_MAMP1_Pos            (8U)                                       
N#define DAC_CR_MAMP1_Msk            (0xFU << DAC_CR_MAMP1_Pos)                 /*!< 0x00000F00 */
N#define DAC_CR_MAMP1                DAC_CR_MAMP1_Msk                           /*!< MAMP1[3:0] (DAC channel1 Mask/Amplitude selector) */
N#define DAC_CR_MAMP1_0              (0x1U << DAC_CR_MAMP1_Pos)                 /*!< 0x00000100 */
N#define DAC_CR_MAMP1_1              (0x2U << DAC_CR_MAMP1_Pos)                 /*!< 0x00000200 */
N#define DAC_CR_MAMP1_2              (0x4U << DAC_CR_MAMP1_Pos)                 /*!< 0x00000400 */
N#define DAC_CR_MAMP1_3              (0x8U << DAC_CR_MAMP1_Pos)                 /*!< 0x00000800 */
N
N#define DAC_CR_DMAEN1_Pos           (12U)                                      
N#define DAC_CR_DMAEN1_Msk           (0x1U << DAC_CR_DMAEN1_Pos)                /*!< 0x00001000 */
N#define DAC_CR_DMAEN1               DAC_CR_DMAEN1_Msk                          /*!< DAC channel1 DMA enable */
N#define DAC_CR_DMAUDRIE1_Pos        (13U)                                      
N#define DAC_CR_DMAUDRIE1_Msk        (0x1U << DAC_CR_DMAUDRIE1_Pos)             /*!< 0x00002000 */
N#define DAC_CR_DMAUDRIE1            DAC_CR_DMAUDRIE1_Msk                       /*!< DAC channel1 DMA Underrun interrupt enable */
N
N/*****************  Bit definition for DAC_SWTRIGR register  ******************/
N#define DAC_SWTRIGR_SWTRIG1_Pos     (0U)                                       
N#define DAC_SWTRIGR_SWTRIG1_Msk     (0x1U << DAC_SWTRIGR_SWTRIG1_Pos)          /*!< 0x00000001 */
N#define DAC_SWTRIGR_SWTRIG1         DAC_SWTRIGR_SWTRIG1_Msk                    /*!< DAC channel1 software trigger */
N
N/*****************  Bit definition for DAC_DHR12R1 register  ******************/
N#define DAC_DHR12R1_DACC1DHR_Pos    (0U)                                       
N#define DAC_DHR12R1_DACC1DHR_Msk    (0xFFFU << DAC_DHR12R1_DACC1DHR_Pos)       /*!< 0x00000FFF */
N#define DAC_DHR12R1_DACC1DHR        DAC_DHR12R1_DACC1DHR_Msk                   /*!< DAC channel1 12-bit Right aligned data */
N
N/*****************  Bit definition for DAC_DHR12L1 register  ******************/
N#define DAC_DHR12L1_DACC1DHR_Pos    (4U)                                       
N#define DAC_DHR12L1_DACC1DHR_Msk    (0xFFFU << DAC_DHR12L1_DACC1DHR_Pos)       /*!< 0x0000FFF0 */
N#define DAC_DHR12L1_DACC1DHR        DAC_DHR12L1_DACC1DHR_Msk                   /*!< DAC channel1 12-bit Left aligned data */
N
N/******************  Bit definition for DAC_DHR8R1 register  ******************/
N#define DAC_DHR8R1_DACC1DHR_Pos     (0U)                                       
N#define DAC_DHR8R1_DACC1DHR_Msk     (0xFFU << DAC_DHR8R1_DACC1DHR_Pos)         /*!< 0x000000FF */
N#define DAC_DHR8R1_DACC1DHR         DAC_DHR8R1_DACC1DHR_Msk                    /*!< DAC channel1 8-bit Right aligned data */
N
N/*******************  Bit definition for DAC_DOR1 register  *******************/
N#define DAC_DOR1_DACC1DOR           ((uint16_t)0x00000FFFU)                    /*!< DAC channel1 data output */
N
N/********************  Bit definition for DAC_SR register  ********************/
N#define DAC_SR_DMAUDR1_Pos          (13U)                                      
N#define DAC_SR_DMAUDR1_Msk          (0x1U << DAC_SR_DMAUDR1_Pos)               /*!< 0x00002000 */
N#define DAC_SR_DMAUDR1              DAC_SR_DMAUDR1_Msk                         /*!< DAC channel1 DMA underrun flag */
N
N/******************************************************************************/
N/*                                                                            */
N/*                           Debug MCU (DBGMCU)                               */
N/*                                                                            */
N/******************************************************************************/
N
N/****************  Bit definition for DBGMCU_IDCODE register  *****************/
N#define DBGMCU_IDCODE_DEV_ID_Pos               (0U)                            
N#define DBGMCU_IDCODE_DEV_ID_Msk               (0xFFFU << DBGMCU_IDCODE_DEV_ID_Pos) /*!< 0x00000FFF */
N#define DBGMCU_IDCODE_DEV_ID                   DBGMCU_IDCODE_DEV_ID_Msk        /*!< Device Identifier */
N
N#define DBGMCU_IDCODE_REV_ID_Pos               (16U)                           
N#define DBGMCU_IDCODE_REV_ID_Msk               (0xFFFFU << DBGMCU_IDCODE_REV_ID_Pos) /*!< 0xFFFF0000 */
N#define DBGMCU_IDCODE_REV_ID                   DBGMCU_IDCODE_REV_ID_Msk        /*!< REV_ID[15:0] bits (Revision Identifier) */
N#define DBGMCU_IDCODE_REV_ID_0                 (0x0001U << DBGMCU_IDCODE_REV_ID_Pos) /*!< 0x00010000 */
N#define DBGMCU_IDCODE_REV_ID_1                 (0x0002U << DBGMCU_IDCODE_REV_ID_Pos) /*!< 0x00020000 */
N#define DBGMCU_IDCODE_REV_ID_2                 (0x0004U << DBGMCU_IDCODE_REV_ID_Pos) /*!< 0x00040000 */
N#define DBGMCU_IDCODE_REV_ID_3                 (0x0008U << DBGMCU_IDCODE_REV_ID_Pos) /*!< 0x00080000 */
N#define DBGMCU_IDCODE_REV_ID_4                 (0x0010U << DBGMCU_IDCODE_REV_ID_Pos) /*!< 0x00100000 */
N#define DBGMCU_IDCODE_REV_ID_5                 (0x0020U << DBGMCU_IDCODE_REV_ID_Pos) /*!< 0x00200000 */
N#define DBGMCU_IDCODE_REV_ID_6                 (0x0040U << DBGMCU_IDCODE_REV_ID_Pos) /*!< 0x00400000 */
N#define DBGMCU_IDCODE_REV_ID_7                 (0x0080U << DBGMCU_IDCODE_REV_ID_Pos) /*!< 0x00800000 */
N#define DBGMCU_IDCODE_REV_ID_8                 (0x0100U << DBGMCU_IDCODE_REV_ID_Pos) /*!< 0x01000000 */
N#define DBGMCU_IDCODE_REV_ID_9                 (0x0200U << DBGMCU_IDCODE_REV_ID_Pos) /*!< 0x02000000 */
N#define DBGMCU_IDCODE_REV_ID_10                (0x0400U << DBGMCU_IDCODE_REV_ID_Pos) /*!< 0x04000000 */
N#define DBGMCU_IDCODE_REV_ID_11                (0x0800U << DBGMCU_IDCODE_REV_ID_Pos) /*!< 0x08000000 */
N#define DBGMCU_IDCODE_REV_ID_12                (0x1000U << DBGMCU_IDCODE_REV_ID_Pos) /*!< 0x10000000 */
N#define DBGMCU_IDCODE_REV_ID_13                (0x2000U << DBGMCU_IDCODE_REV_ID_Pos) /*!< 0x20000000 */
N#define DBGMCU_IDCODE_REV_ID_14                (0x4000U << DBGMCU_IDCODE_REV_ID_Pos) /*!< 0x40000000 */
N#define DBGMCU_IDCODE_REV_ID_15                (0x8000U << DBGMCU_IDCODE_REV_ID_Pos) /*!< 0x80000000 */
N
N/******************  Bit definition for DBGMCU_CR register  *******************/
N#define DBGMCU_CR_DBG_Pos                      (0U)                            
N#define DBGMCU_CR_DBG_Msk                      (0x7U << DBGMCU_CR_DBG_Pos)     /*!< 0x00000007 */
N#define DBGMCU_CR_DBG                          DBGMCU_CR_DBG_Msk               /*!< Debug mode mask */
N#define DBGMCU_CR_DBG_SLEEP_Pos                (0U)                            
N#define DBGMCU_CR_DBG_SLEEP_Msk                (0x1U << DBGMCU_CR_DBG_SLEEP_Pos) /*!< 0x00000001 */
N#define DBGMCU_CR_DBG_SLEEP                    DBGMCU_CR_DBG_SLEEP_Msk         /*!< Debug Sleep Mode */
N#define DBGMCU_CR_DBG_STOP_Pos                 (1U)                            
N#define DBGMCU_CR_DBG_STOP_Msk                 (0x1U << DBGMCU_CR_DBG_STOP_Pos) /*!< 0x00000002 */
N#define DBGMCU_CR_DBG_STOP                     DBGMCU_CR_DBG_STOP_Msk          /*!< Debug Stop Mode */
N#define DBGMCU_CR_DBG_STANDBY_Pos              (2U)                            
N#define DBGMCU_CR_DBG_STANDBY_Msk              (0x1U << DBGMCU_CR_DBG_STANDBY_Pos) /*!< 0x00000004 */
N#define DBGMCU_CR_DBG_STANDBY                  DBGMCU_CR_DBG_STANDBY_Msk       /*!< Debug Standby mode */
N
N/******************  Bit definition for DBGMCU_APB1_FZ register  **************/
N#define DBGMCU_APB1_FZ_DBG_TIM2_STOP_Pos       (0U)                            
N#define DBGMCU_APB1_FZ_DBG_TIM2_STOP_Msk       (0x1U << DBGMCU_APB1_FZ_DBG_TIM2_STOP_Pos) /*!< 0x00000001 */
N#define DBGMCU_APB1_FZ_DBG_TIM2_STOP           DBGMCU_APB1_FZ_DBG_TIM2_STOP_Msk /*!< TIM2 counter stopped when core is halted */
N#define DBGMCU_APB1_FZ_DBG_TIM6_STOP_Pos       (4U)                            
N#define DBGMCU_APB1_FZ_DBG_TIM6_STOP_Msk       (0x1U << DBGMCU_APB1_FZ_DBG_TIM6_STOP_Pos) /*!< 0x00000010 */
N#define DBGMCU_APB1_FZ_DBG_TIM6_STOP           DBGMCU_APB1_FZ_DBG_TIM6_STOP_Msk /*!< TIM6 counter stopped when core is halted */
N#define DBGMCU_APB1_FZ_DBG_RTC_STOP_Pos        (10U)                           
N#define DBGMCU_APB1_FZ_DBG_RTC_STOP_Msk        (0x1U << DBGMCU_APB1_FZ_DBG_RTC_STOP_Pos) /*!< 0x00000400 */
N#define DBGMCU_APB1_FZ_DBG_RTC_STOP            DBGMCU_APB1_FZ_DBG_RTC_STOP_Msk /*!< RTC Calendar frozen when core is halted */
N#define DBGMCU_APB1_FZ_DBG_WWDG_STOP_Pos       (11U)                           
N#define DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk       (0x1U << DBGMCU_APB1_FZ_DBG_WWDG_STOP_Pos) /*!< 0x00000800 */
N#define DBGMCU_APB1_FZ_DBG_WWDG_STOP           DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk /*!< Debug Window Watchdog stopped when Core is halted */
N#define DBGMCU_APB1_FZ_DBG_IWDG_STOP_Pos       (12U)                           
N#define DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk       (0x1U << DBGMCU_APB1_FZ_DBG_IWDG_STOP_Pos) /*!< 0x00001000 */
N#define DBGMCU_APB1_FZ_DBG_IWDG_STOP           DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk /*!< Debug Independent Watchdog stopped when Core is halted */
N#define DBGMCU_APB1_FZ_DBG_I2C1_STOP_Pos       (21U)                           
N#define DBGMCU_APB1_FZ_DBG_I2C1_STOP_Msk       (0x1U << DBGMCU_APB1_FZ_DBG_I2C1_STOP_Pos) /*!< 0x00200000 */
N#define DBGMCU_APB1_FZ_DBG_I2C1_STOP           DBGMCU_APB1_FZ_DBG_I2C1_STOP_Msk /*!< I2C1 SMBUS timeout mode stopped when Core is halted */
N#define DBGMCU_APB1_FZ_DBG_I2C2_STOP_Pos       (22U)                           
N#define DBGMCU_APB1_FZ_DBG_I2C2_STOP_Msk       (0x1U << DBGMCU_APB1_FZ_DBG_I2C2_STOP_Pos) /*!< 0x00400000 */
N#define DBGMCU_APB1_FZ_DBG_I2C2_STOP           DBGMCU_APB1_FZ_DBG_I2C2_STOP_Msk /*!< I2C2 SMBUS timeout mode stopped when Core is halted */
N#define DBGMCU_APB1_FZ_DBG_LPTIMER_STOP_Pos    (31U)                           
N#define DBGMCU_APB1_FZ_DBG_LPTIMER_STOP_Msk    (0x1U << DBGMCU_APB1_FZ_DBG_LPTIMER_STOP_Pos) /*!< 0x80000000 */
N#define DBGMCU_APB1_FZ_DBG_LPTIMER_STOP        DBGMCU_APB1_FZ_DBG_LPTIMER_STOP_Msk /*!< LPTIM1 counter stopped when core is halted */
N/******************  Bit definition for DBGMCU_APB2_FZ register  **************/
N#define DBGMCU_APB2_FZ_DBG_TIM22_STOP_Pos      (5U)                            
N#define DBGMCU_APB2_FZ_DBG_TIM22_STOP_Msk      (0x1U << DBGMCU_APB2_FZ_DBG_TIM22_STOP_Pos) /*!< 0x00000020 */
N#define DBGMCU_APB2_FZ_DBG_TIM22_STOP          DBGMCU_APB2_FZ_DBG_TIM22_STOP_Msk /*!< TIM22 counter stopped when core is halted */
N#define DBGMCU_APB2_FZ_DBG_TIM21_STOP_Pos      (2U)                            
N#define DBGMCU_APB2_FZ_DBG_TIM21_STOP_Msk      (0x1U << DBGMCU_APB2_FZ_DBG_TIM21_STOP_Pos) /*!< 0x00000004 */
N#define DBGMCU_APB2_FZ_DBG_TIM21_STOP          DBGMCU_APB2_FZ_DBG_TIM21_STOP_Msk /*!< TIM21 counter stopped when core is halted */
N
N/******************************************************************************/
N/*                                                                            */
N/*                           DMA Controller (DMA)                             */
N/*                                                                            */
N/******************************************************************************/
N
N/*******************  Bit definition for DMA_ISR register  ********************/
N#define DMA_ISR_GIF1_Pos       (0U)                                            
N#define DMA_ISR_GIF1_Msk       (0x1U << DMA_ISR_GIF1_Pos)                      /*!< 0x00000001 */
N#define DMA_ISR_GIF1           DMA_ISR_GIF1_Msk                                /*!< Channel 1 Global interrupt flag    */
N#define DMA_ISR_TCIF1_Pos      (1U)                                            
N#define DMA_ISR_TCIF1_Msk      (0x1U << DMA_ISR_TCIF1_Pos)                     /*!< 0x00000002 */
N#define DMA_ISR_TCIF1          DMA_ISR_TCIF1_Msk                               /*!< Channel 1 Transfer Complete flag   */
N#define DMA_ISR_HTIF1_Pos      (2U)                                            
N#define DMA_ISR_HTIF1_Msk      (0x1U << DMA_ISR_HTIF1_Pos)                     /*!< 0x00000004 */
N#define DMA_ISR_HTIF1          DMA_ISR_HTIF1_Msk                               /*!< Channel 1 Half Transfer flag       */
N#define DMA_ISR_TEIF1_Pos      (3U)                                            
N#define DMA_ISR_TEIF1_Msk      (0x1U << DMA_ISR_TEIF1_Pos)                     /*!< 0x00000008 */
N#define DMA_ISR_TEIF1          DMA_ISR_TEIF1_Msk                               /*!< Channel 1 Transfer Error flag      */
N#define DMA_ISR_GIF2_Pos       (4U)                                            
N#define DMA_ISR_GIF2_Msk       (0x1U << DMA_ISR_GIF2_Pos)                      /*!< 0x00000010 */
N#define DMA_ISR_GIF2           DMA_ISR_GIF2_Msk                                /*!< Channel 2 Global interrupt flag    */
N#define DMA_ISR_TCIF2_Pos      (5U)                                            
N#define DMA_ISR_TCIF2_Msk      (0x1U << DMA_ISR_TCIF2_Pos)                     /*!< 0x00000020 */
N#define DMA_ISR_TCIF2          DMA_ISR_TCIF2_Msk                               /*!< Channel 2 Transfer Complete flag   */
N#define DMA_ISR_HTIF2_Pos      (6U)                                            
N#define DMA_ISR_HTIF2_Msk      (0x1U << DMA_ISR_HTIF2_Pos)                     /*!< 0x00000040 */
N#define DMA_ISR_HTIF2          DMA_ISR_HTIF2_Msk                               /*!< Channel 2 Half Transfer flag       */
N#define DMA_ISR_TEIF2_Pos      (7U)                                            
N#define DMA_ISR_TEIF2_Msk      (0x1U << DMA_ISR_TEIF2_Pos)                     /*!< 0x00000080 */
N#define DMA_ISR_TEIF2          DMA_ISR_TEIF2_Msk                               /*!< Channel 2 Transfer Error flag      */
N#define DMA_ISR_GIF3_Pos       (8U)                                            
N#define DMA_ISR_GIF3_Msk       (0x1U << DMA_ISR_GIF3_Pos)                      /*!< 0x00000100 */
N#define DMA_ISR_GIF3           DMA_ISR_GIF3_Msk                                /*!< Channel 3 Global interrupt flag    */
N#define DMA_ISR_TCIF3_Pos      (9U)                                            
N#define DMA_ISR_TCIF3_Msk      (0x1U << DMA_ISR_TCIF3_Pos)                     /*!< 0x00000200 */
N#define DMA_ISR_TCIF3          DMA_ISR_TCIF3_Msk                               /*!< Channel 3 Transfer Complete flag   */
N#define DMA_ISR_HTIF3_Pos      (10U)                                           
N#define DMA_ISR_HTIF3_Msk      (0x1U << DMA_ISR_HTIF3_Pos)                     /*!< 0x00000400 */
N#define DMA_ISR_HTIF3          DMA_ISR_HTIF3_Msk                               /*!< Channel 3 Half Transfer flag       */
N#define DMA_ISR_TEIF3_Pos      (11U)                                           
N#define DMA_ISR_TEIF3_Msk      (0x1U << DMA_ISR_TEIF3_Pos)                     /*!< 0x00000800 */
N#define DMA_ISR_TEIF3          DMA_ISR_TEIF3_Msk                               /*!< Channel 3 Transfer Error flag      */
N#define DMA_ISR_GIF4_Pos       (12U)                                           
N#define DMA_ISR_GIF4_Msk       (0x1U << DMA_ISR_GIF4_Pos)                      /*!< 0x00001000 */
N#define DMA_ISR_GIF4           DMA_ISR_GIF4_Msk                                /*!< Channel 4 Global interrupt flag    */
N#define DMA_ISR_TCIF4_Pos      (13U)                                           
N#define DMA_ISR_TCIF4_Msk      (0x1U << DMA_ISR_TCIF4_Pos)                     /*!< 0x00002000 */
N#define DMA_ISR_TCIF4          DMA_ISR_TCIF4_Msk                               /*!< Channel 4 Transfer Complete flag   */
N#define DMA_ISR_HTIF4_Pos      (14U)                                           
N#define DMA_ISR_HTIF4_Msk      (0x1U << DMA_ISR_HTIF4_Pos)                     /*!< 0x00004000 */
N#define DMA_ISR_HTIF4          DMA_ISR_HTIF4_Msk                               /*!< Channel 4 Half Transfer flag       */
N#define DMA_ISR_TEIF4_Pos      (15U)                                           
N#define DMA_ISR_TEIF4_Msk      (0x1U << DMA_ISR_TEIF4_Pos)                     /*!< 0x00008000 */
N#define DMA_ISR_TEIF4          DMA_ISR_TEIF4_Msk                               /*!< Channel 4 Transfer Error flag      */
N#define DMA_ISR_GIF5_Pos       (16U)                                           
N#define DMA_ISR_GIF5_Msk       (0x1U << DMA_ISR_GIF5_Pos)                      /*!< 0x00010000 */
N#define DMA_ISR_GIF5           DMA_ISR_GIF5_Msk                                /*!< Channel 5 Global interrupt flag    */
N#define DMA_ISR_TCIF5_Pos      (17U)                                           
N#define DMA_ISR_TCIF5_Msk      (0x1U << DMA_ISR_TCIF5_Pos)                     /*!< 0x00020000 */
N#define DMA_ISR_TCIF5          DMA_ISR_TCIF5_Msk                               /*!< Channel 5 Transfer Complete flag   */
N#define DMA_ISR_HTIF5_Pos      (18U)                                           
N#define DMA_ISR_HTIF5_Msk      (0x1U << DMA_ISR_HTIF5_Pos)                     /*!< 0x00040000 */
N#define DMA_ISR_HTIF5          DMA_ISR_HTIF5_Msk                               /*!< Channel 5 Half Transfer flag       */
N#define DMA_ISR_TEIF5_Pos      (19U)                                           
N#define DMA_ISR_TEIF5_Msk      (0x1U << DMA_ISR_TEIF5_Pos)                     /*!< 0x00080000 */
N#define DMA_ISR_TEIF5          DMA_ISR_TEIF5_Msk                               /*!< Channel 5 Transfer Error flag      */
N#define DMA_ISR_GIF6_Pos       (20U)                                           
N#define DMA_ISR_GIF6_Msk       (0x1U << DMA_ISR_GIF6_Pos)                      /*!< 0x00100000 */
N#define DMA_ISR_GIF6           DMA_ISR_GIF6_Msk                                /*!< Channel 6 Global interrupt flag */
N#define DMA_ISR_TCIF6_Pos      (21U)                                           
N#define DMA_ISR_TCIF6_Msk      (0x1U << DMA_ISR_TCIF6_Pos)                     /*!< 0x00200000 */
N#define DMA_ISR_TCIF6          DMA_ISR_TCIF6_Msk                               /*!< Channel 6 Transfer Complete flag */
N#define DMA_ISR_HTIF6_Pos      (22U)                                           
N#define DMA_ISR_HTIF6_Msk      (0x1U << DMA_ISR_HTIF6_Pos)                     /*!< 0x00400000 */
N#define DMA_ISR_HTIF6          DMA_ISR_HTIF6_Msk                               /*!< Channel 6 Half Transfer flag */
N#define DMA_ISR_TEIF6_Pos      (23U)                                           
N#define DMA_ISR_TEIF6_Msk      (0x1U << DMA_ISR_TEIF6_Pos)                     /*!< 0x00800000 */
N#define DMA_ISR_TEIF6          DMA_ISR_TEIF6_Msk                               /*!< Channel 6 Transfer Error flag */
N#define DMA_ISR_GIF7_Pos       (24U)                                           
N#define DMA_ISR_GIF7_Msk       (0x1U << DMA_ISR_GIF7_Pos)                      /*!< 0x01000000 */
N#define DMA_ISR_GIF7           DMA_ISR_GIF7_Msk                                /*!< Channel 7 Global interrupt flag */
N#define DMA_ISR_TCIF7_Pos      (25U)                                           
N#define DMA_ISR_TCIF7_Msk      (0x1U << DMA_ISR_TCIF7_Pos)                     /*!< 0x02000000 */
N#define DMA_ISR_TCIF7          DMA_ISR_TCIF7_Msk                               /*!< Channel 7 Transfer Complete flag */
N#define DMA_ISR_HTIF7_Pos      (26U)                                           
N#define DMA_ISR_HTIF7_Msk      (0x1U << DMA_ISR_HTIF7_Pos)                     /*!< 0x04000000 */
N#define DMA_ISR_HTIF7          DMA_ISR_HTIF7_Msk                               /*!< Channel 7 Half Transfer flag */
N#define DMA_ISR_TEIF7_Pos      (27U)                                           
N#define DMA_ISR_TEIF7_Msk      (0x1U << DMA_ISR_TEIF7_Pos)                     /*!< 0x08000000 */
N#define DMA_ISR_TEIF7          DMA_ISR_TEIF7_Msk                               /*!< Channel 7 Transfer Error flag */
N
N/*******************  Bit definition for DMA_IFCR register  *******************/
N#define DMA_IFCR_CGIF1_Pos     (0U)                                            
N#define DMA_IFCR_CGIF1_Msk     (0x1U << DMA_IFCR_CGIF1_Pos)                    /*!< 0x00000001 */
N#define DMA_IFCR_CGIF1         DMA_IFCR_CGIF1_Msk                              /*!< Channel 1 Global interrupt clear    */
N#define DMA_IFCR_CTCIF1_Pos    (1U)                                            
N#define DMA_IFCR_CTCIF1_Msk    (0x1U << DMA_IFCR_CTCIF1_Pos)                   /*!< 0x00000002 */
N#define DMA_IFCR_CTCIF1        DMA_IFCR_CTCIF1_Msk                             /*!< Channel 1 Transfer Complete clear   */
N#define DMA_IFCR_CHTIF1_Pos    (2U)                                            
N#define DMA_IFCR_CHTIF1_Msk    (0x1U << DMA_IFCR_CHTIF1_Pos)                   /*!< 0x00000004 */
N#define DMA_IFCR_CHTIF1        DMA_IFCR_CHTIF1_Msk                             /*!< Channel 1 Half Transfer clear       */
N#define DMA_IFCR_CTEIF1_Pos    (3U)                                            
N#define DMA_IFCR_CTEIF1_Msk    (0x1U << DMA_IFCR_CTEIF1_Pos)                   /*!< 0x00000008 */
N#define DMA_IFCR_CTEIF1        DMA_IFCR_CTEIF1_Msk                             /*!< Channel 1 Transfer Error clear      */
N#define DMA_IFCR_CGIF2_Pos     (4U)                                            
N#define DMA_IFCR_CGIF2_Msk     (0x1U << DMA_IFCR_CGIF2_Pos)                    /*!< 0x00000010 */
N#define DMA_IFCR_CGIF2         DMA_IFCR_CGIF2_Msk                              /*!< Channel 2 Global interrupt clear    */
N#define DMA_IFCR_CTCIF2_Pos    (5U)                                            
N#define DMA_IFCR_CTCIF2_Msk    (0x1U << DMA_IFCR_CTCIF2_Pos)                   /*!< 0x00000020 */
N#define DMA_IFCR_CTCIF2        DMA_IFCR_CTCIF2_Msk                             /*!< Channel 2 Transfer Complete clear   */
N#define DMA_IFCR_CHTIF2_Pos    (6U)                                            
N#define DMA_IFCR_CHTIF2_Msk    (0x1U << DMA_IFCR_CHTIF2_Pos)                   /*!< 0x00000040 */
N#define DMA_IFCR_CHTIF2        DMA_IFCR_CHTIF2_Msk                             /*!< Channel 2 Half Transfer clear       */
N#define DMA_IFCR_CTEIF2_Pos    (7U)                                            
N#define DMA_IFCR_CTEIF2_Msk    (0x1U << DMA_IFCR_CTEIF2_Pos)                   /*!< 0x00000080 */
N#define DMA_IFCR_CTEIF2        DMA_IFCR_CTEIF2_Msk                             /*!< Channel 2 Transfer Error clear      */
N#define DMA_IFCR_CGIF3_Pos     (8U)                                            
N#define DMA_IFCR_CGIF3_Msk     (0x1U << DMA_IFCR_CGIF3_Pos)                    /*!< 0x00000100 */
N#define DMA_IFCR_CGIF3         DMA_IFCR_CGIF3_Msk                              /*!< Channel 3 Global interrupt clear    */
N#define DMA_IFCR_CTCIF3_Pos    (9U)                                            
N#define DMA_IFCR_CTCIF3_Msk    (0x1U << DMA_IFCR_CTCIF3_Pos)                   /*!< 0x00000200 */
N#define DMA_IFCR_CTCIF3        DMA_IFCR_CTCIF3_Msk                             /*!< Channel 3 Transfer Complete clear   */
N#define DMA_IFCR_CHTIF3_Pos    (10U)                                           
N#define DMA_IFCR_CHTIF3_Msk    (0x1U << DMA_IFCR_CHTIF3_Pos)                   /*!< 0x00000400 */
N#define DMA_IFCR_CHTIF3        DMA_IFCR_CHTIF3_Msk                             /*!< Channel 3 Half Transfer clear       */
N#define DMA_IFCR_CTEIF3_Pos    (11U)                                           
N#define DMA_IFCR_CTEIF3_Msk    (0x1U << DMA_IFCR_CTEIF3_Pos)                   /*!< 0x00000800 */
N#define DMA_IFCR_CTEIF3        DMA_IFCR_CTEIF3_Msk                             /*!< Channel 3 Transfer Error clear      */
N#define DMA_IFCR_CGIF4_Pos     (12U)                                           
N#define DMA_IFCR_CGIF4_Msk     (0x1U << DMA_IFCR_CGIF4_Pos)                    /*!< 0x00001000 */
N#define DMA_IFCR_CGIF4         DMA_IFCR_CGIF4_Msk                              /*!< Channel 4 Global interrupt clear    */
N#define DMA_IFCR_CTCIF4_Pos    (13U)                                           
N#define DMA_IFCR_CTCIF4_Msk    (0x1U << DMA_IFCR_CTCIF4_Pos)                   /*!< 0x00002000 */
N#define DMA_IFCR_CTCIF4        DMA_IFCR_CTCIF4_Msk                             /*!< Channel 4 Transfer Complete clear   */
N#define DMA_IFCR_CHTIF4_Pos    (14U)                                           
N#define DMA_IFCR_CHTIF4_Msk    (0x1U << DMA_IFCR_CHTIF4_Pos)                   /*!< 0x00004000 */
N#define DMA_IFCR_CHTIF4        DMA_IFCR_CHTIF4_Msk                             /*!< Channel 4 Half Transfer clear       */
N#define DMA_IFCR_CTEIF4_Pos    (15U)                                           
N#define DMA_IFCR_CTEIF4_Msk    (0x1U << DMA_IFCR_CTEIF4_Pos)                   /*!< 0x00008000 */
N#define DMA_IFCR_CTEIF4        DMA_IFCR_CTEIF4_Msk                             /*!< Channel 4 Transfer Error clear      */
N#define DMA_IFCR_CGIF5_Pos     (16U)                                           
N#define DMA_IFCR_CGIF5_Msk     (0x1U << DMA_IFCR_CGIF5_Pos)                    /*!< 0x00010000 */
N#define DMA_IFCR_CGIF5         DMA_IFCR_CGIF5_Msk                              /*!< Channel 5 Global interrupt clear    */
N#define DMA_IFCR_CTCIF5_Pos    (17U)                                           
N#define DMA_IFCR_CTCIF5_Msk    (0x1U << DMA_IFCR_CTCIF5_Pos)                   /*!< 0x00020000 */
N#define DMA_IFCR_CTCIF5        DMA_IFCR_CTCIF5_Msk                             /*!< Channel 5 Transfer Complete clear   */
N#define DMA_IFCR_CHTIF5_Pos    (18U)                                           
N#define DMA_IFCR_CHTIF5_Msk    (0x1U << DMA_IFCR_CHTIF5_Pos)                   /*!< 0x00040000 */
N#define DMA_IFCR_CHTIF5        DMA_IFCR_CHTIF5_Msk                             /*!< Channel 5 Half Transfer clear       */
N#define DMA_IFCR_CTEIF5_Pos    (19U)                                           
N#define DMA_IFCR_CTEIF5_Msk    (0x1U << DMA_IFCR_CTEIF5_Pos)                   /*!< 0x00080000 */
N#define DMA_IFCR_CTEIF5        DMA_IFCR_CTEIF5_Msk                             /*!< Channel 5 Transfer Error clear      */
N#define DMA_IFCR_CGIF6_Pos     (20U)                                           
N#define DMA_IFCR_CGIF6_Msk     (0x1U << DMA_IFCR_CGIF6_Pos)                    /*!< 0x00100000 */
N#define DMA_IFCR_CGIF6         DMA_IFCR_CGIF6_Msk                              /*!< Channel 6 Global interrupt clear */
N#define DMA_IFCR_CTCIF6_Pos    (21U)                                           
N#define DMA_IFCR_CTCIF6_Msk    (0x1U << DMA_IFCR_CTCIF6_Pos)                   /*!< 0x00200000 */
N#define DMA_IFCR_CTCIF6        DMA_IFCR_CTCIF6_Msk                             /*!< Channel 6 Transfer Complete clear */
N#define DMA_IFCR_CHTIF6_Pos    (22U)                                           
N#define DMA_IFCR_CHTIF6_Msk    (0x1U << DMA_IFCR_CHTIF6_Pos)                   /*!< 0x00400000 */
N#define DMA_IFCR_CHTIF6        DMA_IFCR_CHTIF6_Msk                             /*!< Channel 6 Half Transfer clear */
N#define DMA_IFCR_CTEIF6_Pos    (23U)                                           
N#define DMA_IFCR_CTEIF6_Msk    (0x1U << DMA_IFCR_CTEIF6_Pos)                   /*!< 0x00800000 */
N#define DMA_IFCR_CTEIF6        DMA_IFCR_CTEIF6_Msk                             /*!< Channel 6 Transfer Error clear */
N#define DMA_IFCR_CGIF7_Pos     (24U)                                           
N#define DMA_IFCR_CGIF7_Msk     (0x1U << DMA_IFCR_CGIF7_Pos)                    /*!< 0x01000000 */
N#define DMA_IFCR_CGIF7         DMA_IFCR_CGIF7_Msk                              /*!< Channel 7 Global interrupt clear */
N#define DMA_IFCR_CTCIF7_Pos    (25U)                                           
N#define DMA_IFCR_CTCIF7_Msk    (0x1U << DMA_IFCR_CTCIF7_Pos)                   /*!< 0x02000000 */
N#define DMA_IFCR_CTCIF7        DMA_IFCR_CTCIF7_Msk                             /*!< Channel 7 Transfer Complete clear */
N#define DMA_IFCR_CHTIF7_Pos    (26U)                                           
N#define DMA_IFCR_CHTIF7_Msk    (0x1U << DMA_IFCR_CHTIF7_Pos)                   /*!< 0x04000000 */
N#define DMA_IFCR_CHTIF7        DMA_IFCR_CHTIF7_Msk                             /*!< Channel 7 Half Transfer clear */
N#define DMA_IFCR_CTEIF7_Pos    (27U)                                           
N#define DMA_IFCR_CTEIF7_Msk    (0x1U << DMA_IFCR_CTEIF7_Pos)                   /*!< 0x08000000 */
N#define DMA_IFCR_CTEIF7        DMA_IFCR_CTEIF7_Msk                             /*!< Channel 7 Transfer Error clear */
N
N/*******************  Bit definition for DMA_CCR register  ********************/
N#define DMA_CCR_EN_Pos         (0U)                                            
N#define DMA_CCR_EN_Msk         (0x1U << DMA_CCR_EN_Pos)                        /*!< 0x00000001 */
N#define DMA_CCR_EN             DMA_CCR_EN_Msk                                  /*!< Channel enable                      */
N#define DMA_CCR_TCIE_Pos       (1U)                                            
N#define DMA_CCR_TCIE_Msk       (0x1U << DMA_CCR_TCIE_Pos)                      /*!< 0x00000002 */
N#define DMA_CCR_TCIE           DMA_CCR_TCIE_Msk                                /*!< Transfer complete interrupt enable  */
N#define DMA_CCR_HTIE_Pos       (2U)                                            
N#define DMA_CCR_HTIE_Msk       (0x1U << DMA_CCR_HTIE_Pos)                      /*!< 0x00000004 */
N#define DMA_CCR_HTIE           DMA_CCR_HTIE_Msk                                /*!< Half Transfer interrupt enable      */
N#define DMA_CCR_TEIE_Pos       (3U)                                            
N#define DMA_CCR_TEIE_Msk       (0x1U << DMA_CCR_TEIE_Pos)                      /*!< 0x00000008 */
N#define DMA_CCR_TEIE           DMA_CCR_TEIE_Msk                                /*!< Transfer error interrupt enable     */
N#define DMA_CCR_DIR_Pos        (4U)                                            
N#define DMA_CCR_DIR_Msk        (0x1U << DMA_CCR_DIR_Pos)                       /*!< 0x00000010 */
N#define DMA_CCR_DIR            DMA_CCR_DIR_Msk                                 /*!< Data transfer direction             */
N#define DMA_CCR_CIRC_Pos       (5U)                                            
N#define DMA_CCR_CIRC_Msk       (0x1U << DMA_CCR_CIRC_Pos)                      /*!< 0x00000020 */
N#define DMA_CCR_CIRC           DMA_CCR_CIRC_Msk                                /*!< Circular mode                       */
N#define DMA_CCR_PINC_Pos       (6U)                                            
N#define DMA_CCR_PINC_Msk       (0x1U << DMA_CCR_PINC_Pos)                      /*!< 0x00000040 */
N#define DMA_CCR_PINC           DMA_CCR_PINC_Msk                                /*!< Peripheral increment mode           */
N#define DMA_CCR_MINC_Pos       (7U)                                            
N#define DMA_CCR_MINC_Msk       (0x1U << DMA_CCR_MINC_Pos)                      /*!< 0x00000080 */
N#define DMA_CCR_MINC           DMA_CCR_MINC_Msk                                /*!< Memory increment mode               */
N
N#define DMA_CCR_PSIZE_Pos      (8U)                                            
N#define DMA_CCR_PSIZE_Msk      (0x3U << DMA_CCR_PSIZE_Pos)                     /*!< 0x00000300 */
N#define DMA_CCR_PSIZE          DMA_CCR_PSIZE_Msk                               /*!< PSIZE[1:0] bits (Peripheral size)   */
N#define DMA_CCR_PSIZE_0        (0x1U << DMA_CCR_PSIZE_Pos)                     /*!< 0x00000100 */
N#define DMA_CCR_PSIZE_1        (0x2U << DMA_CCR_PSIZE_Pos)                     /*!< 0x00000200 */
N
N#define DMA_CCR_MSIZE_Pos      (10U)                                           
N#define DMA_CCR_MSIZE_Msk      (0x3U << DMA_CCR_MSIZE_Pos)                     /*!< 0x00000C00 */
N#define DMA_CCR_MSIZE          DMA_CCR_MSIZE_Msk                               /*!< MSIZE[1:0] bits (Memory size)       */
N#define DMA_CCR_MSIZE_0        (0x1U << DMA_CCR_MSIZE_Pos)                     /*!< 0x00000400 */
N#define DMA_CCR_MSIZE_1        (0x2U << DMA_CCR_MSIZE_Pos)                     /*!< 0x00000800 */
N
N#define DMA_CCR_PL_Pos         (12U)                                           
N#define DMA_CCR_PL_Msk         (0x3U << DMA_CCR_PL_Pos)                        /*!< 0x00003000 */
N#define DMA_CCR_PL             DMA_CCR_PL_Msk                                  /*!< PL[1:0] bits(Channel Priority level)*/
N#define DMA_CCR_PL_0           (0x1U << DMA_CCR_PL_Pos)                        /*!< 0x00001000 */
N#define DMA_CCR_PL_1           (0x2U << DMA_CCR_PL_Pos)                        /*!< 0x00002000 */
N
N#define DMA_CCR_MEM2MEM_Pos    (14U)                                           
N#define DMA_CCR_MEM2MEM_Msk    (0x1U << DMA_CCR_MEM2MEM_Pos)                   /*!< 0x00004000 */
N#define DMA_CCR_MEM2MEM        DMA_CCR_MEM2MEM_Msk                             /*!< Memory to memory mode               */
N
N/******************  Bit definition for DMA_CNDTR register  *******************/
N#define DMA_CNDTR_NDT_Pos      (0U)                                            
N#define DMA_CNDTR_NDT_Msk      (0xFFFFU << DMA_CNDTR_NDT_Pos)                  /*!< 0x0000FFFF */
N#define DMA_CNDTR_NDT          DMA_CNDTR_NDT_Msk                               /*!< Number of data to Transfer          */
N
N/******************  Bit definition for DMA_CPAR register  ********************/
N#define DMA_CPAR_PA_Pos        (0U)                                            
N#define DMA_CPAR_PA_Msk        (0xFFFFFFFFU << DMA_CPAR_PA_Pos)                /*!< 0xFFFFFFFF */
N#define DMA_CPAR_PA            DMA_CPAR_PA_Msk                                 /*!< Peripheral Address                  */
N
N/******************  Bit definition for DMA_CMAR register  ********************/
N#define DMA_CMAR_MA_Pos        (0U)                                            
N#define DMA_CMAR_MA_Msk        (0xFFFFFFFFU << DMA_CMAR_MA_Pos)                /*!< 0xFFFFFFFF */
N#define DMA_CMAR_MA            DMA_CMAR_MA_Msk                                 /*!< Memory Address                      */
N
N
N/*******************  Bit definition for DMA_CSELR register  *******************/
N#define DMA_CSELR_C1S_Pos      (0U)                                            
N#define DMA_CSELR_C1S_Msk      (0xFU << DMA_CSELR_C1S_Pos)                     /*!< 0x0000000F */
N#define DMA_CSELR_C1S          DMA_CSELR_C1S_Msk                               /*!< Channel 1 Selection */ 
N#define DMA_CSELR_C2S_Pos      (4U)                                            
N#define DMA_CSELR_C2S_Msk      (0xFU << DMA_CSELR_C2S_Pos)                     /*!< 0x000000F0 */
N#define DMA_CSELR_C2S          DMA_CSELR_C2S_Msk                               /*!< Channel 2 Selection */ 
N#define DMA_CSELR_C3S_Pos      (8U)                                            
N#define DMA_CSELR_C3S_Msk      (0xFU << DMA_CSELR_C3S_Pos)                     /*!< 0x00000F00 */
N#define DMA_CSELR_C3S          DMA_CSELR_C3S_Msk                               /*!< Channel 3 Selection */ 
N#define DMA_CSELR_C4S_Pos      (12U)                                           
N#define DMA_CSELR_C4S_Msk      (0xFU << DMA_CSELR_C4S_Pos)                     /*!< 0x0000F000 */
N#define DMA_CSELR_C4S          DMA_CSELR_C4S_Msk                               /*!< Channel 4 Selection */ 
N#define DMA_CSELR_C5S_Pos      (16U)                                           
N#define DMA_CSELR_C5S_Msk      (0xFU << DMA_CSELR_C5S_Pos)                     /*!< 0x000F0000 */
N#define DMA_CSELR_C5S          DMA_CSELR_C5S_Msk                               /*!< Channel 5 Selection */ 
N#define DMA_CSELR_C6S_Pos      (20U)                                           
N#define DMA_CSELR_C6S_Msk      (0xFU << DMA_CSELR_C6S_Pos)                     /*!< 0x00F00000 */
N#define DMA_CSELR_C6S          DMA_CSELR_C6S_Msk                               /*!< Channel 6 Selection */ 
N#define DMA_CSELR_C7S_Pos      (24U)                                           
N#define DMA_CSELR_C7S_Msk      (0xFU << DMA_CSELR_C7S_Pos)                     /*!< 0x0F000000 */
N#define DMA_CSELR_C7S          DMA_CSELR_C7S_Msk                               /*!< Channel 7 Selection */
N
N/******************************************************************************/
N/*                                                                            */
N/*                 External Interrupt/Event Controller (EXTI)                 */
N/*                                                                            */
N/******************************************************************************/
N
N/*******************  Bit definition for EXTI_IMR register  *******************/
N#define EXTI_IMR_IM0_Pos        (0U)                                           
N#define EXTI_IMR_IM0_Msk        (0x1U << EXTI_IMR_IM0_Pos)                     /*!< 0x00000001 */
N#define EXTI_IMR_IM0            EXTI_IMR_IM0_Msk                               /*!< Interrupt Mask on line 0  */
N#define EXTI_IMR_IM1_Pos        (1U)                                           
N#define EXTI_IMR_IM1_Msk        (0x1U << EXTI_IMR_IM1_Pos)                     /*!< 0x00000002 */
N#define EXTI_IMR_IM1            EXTI_IMR_IM1_Msk                               /*!< Interrupt Mask on line 1  */
N#define EXTI_IMR_IM2_Pos        (2U)                                           
N#define EXTI_IMR_IM2_Msk        (0x1U << EXTI_IMR_IM2_Pos)                     /*!< 0x00000004 */
N#define EXTI_IMR_IM2            EXTI_IMR_IM2_Msk                               /*!< Interrupt Mask on line 2  */
N#define EXTI_IMR_IM3_Pos        (3U)                                           
N#define EXTI_IMR_IM3_Msk        (0x1U << EXTI_IMR_IM3_Pos)                     /*!< 0x00000008 */
N#define EXTI_IMR_IM3            EXTI_IMR_IM3_Msk                               /*!< Interrupt Mask on line 3  */
N#define EXTI_IMR_IM4_Pos        (4U)                                           
N#define EXTI_IMR_IM4_Msk        (0x1U << EXTI_IMR_IM4_Pos)                     /*!< 0x00000010 */
N#define EXTI_IMR_IM4            EXTI_IMR_IM4_Msk                               /*!< Interrupt Mask on line 4  */
N#define EXTI_IMR_IM5_Pos        (5U)                                           
N#define EXTI_IMR_IM5_Msk        (0x1U << EXTI_IMR_IM5_Pos)                     /*!< 0x00000020 */
N#define EXTI_IMR_IM5            EXTI_IMR_IM5_Msk                               /*!< Interrupt Mask on line 5  */
N#define EXTI_IMR_IM6_Pos        (6U)                                           
N#define EXTI_IMR_IM6_Msk        (0x1U << EXTI_IMR_IM6_Pos)                     /*!< 0x00000040 */
N#define EXTI_IMR_IM6            EXTI_IMR_IM6_Msk                               /*!< Interrupt Mask on line 6  */
N#define EXTI_IMR_IM7_Pos        (7U)                                           
N#define EXTI_IMR_IM7_Msk        (0x1U << EXTI_IMR_IM7_Pos)                     /*!< 0x00000080 */
N#define EXTI_IMR_IM7            EXTI_IMR_IM7_Msk                               /*!< Interrupt Mask on line 7  */
N#define EXTI_IMR_IM8_Pos        (8U)                                           
N#define EXTI_IMR_IM8_Msk        (0x1U << EXTI_IMR_IM8_Pos)                     /*!< 0x00000100 */
N#define EXTI_IMR_IM8            EXTI_IMR_IM8_Msk                               /*!< Interrupt Mask on line 8  */
N#define EXTI_IMR_IM9_Pos        (9U)                                           
N#define EXTI_IMR_IM9_Msk        (0x1U << EXTI_IMR_IM9_Pos)                     /*!< 0x00000200 */
N#define EXTI_IMR_IM9            EXTI_IMR_IM9_Msk                               /*!< Interrupt Mask on line 9  */
N#define EXTI_IMR_IM10_Pos       (10U)                                          
N#define EXTI_IMR_IM10_Msk       (0x1U << EXTI_IMR_IM10_Pos)                    /*!< 0x00000400 */
N#define EXTI_IMR_IM10           EXTI_IMR_IM10_Msk                              /*!< Interrupt Mask on line 10 */
N#define EXTI_IMR_IM11_Pos       (11U)                                          
N#define EXTI_IMR_IM11_Msk       (0x1U << EXTI_IMR_IM11_Pos)                    /*!< 0x00000800 */
N#define EXTI_IMR_IM11           EXTI_IMR_IM11_Msk                              /*!< Interrupt Mask on line 11 */
N#define EXTI_IMR_IM12_Pos       (12U)                                          
N#define EXTI_IMR_IM12_Msk       (0x1U << EXTI_IMR_IM12_Pos)                    /*!< 0x00001000 */
N#define EXTI_IMR_IM12           EXTI_IMR_IM12_Msk                              /*!< Interrupt Mask on line 12 */
N#define EXTI_IMR_IM13_Pos       (13U)                                          
N#define EXTI_IMR_IM13_Msk       (0x1U << EXTI_IMR_IM13_Pos)                    /*!< 0x00002000 */
N#define EXTI_IMR_IM13           EXTI_IMR_IM13_Msk                              /*!< Interrupt Mask on line 13 */
N#define EXTI_IMR_IM14_Pos       (14U)                                          
N#define EXTI_IMR_IM14_Msk       (0x1U << EXTI_IMR_IM14_Pos)                    /*!< 0x00004000 */
N#define EXTI_IMR_IM14           EXTI_IMR_IM14_Msk                              /*!< Interrupt Mask on line 14 */
N#define EXTI_IMR_IM15_Pos       (15U)                                          
N#define EXTI_IMR_IM15_Msk       (0x1U << EXTI_IMR_IM15_Pos)                    /*!< 0x00008000 */
N#define EXTI_IMR_IM15           EXTI_IMR_IM15_Msk                              /*!< Interrupt Mask on line 15 */
N#define EXTI_IMR_IM16_Pos       (16U)                                          
N#define EXTI_IMR_IM16_Msk       (0x1U << EXTI_IMR_IM16_Pos)                    /*!< 0x00010000 */
N#define EXTI_IMR_IM16           EXTI_IMR_IM16_Msk                              /*!< Interrupt Mask on line 16 */
N#define EXTI_IMR_IM17_Pos       (17U)                                          
N#define EXTI_IMR_IM17_Msk       (0x1U << EXTI_IMR_IM17_Pos)                    /*!< 0x00020000 */
N#define EXTI_IMR_IM17           EXTI_IMR_IM17_Msk                              /*!< Interrupt Mask on line 17 */
N#define EXTI_IMR_IM18_Pos       (18U)                                          
N#define EXTI_IMR_IM18_Msk       (0x1U << EXTI_IMR_IM18_Pos)                    /*!< 0x00040000 */
N#define EXTI_IMR_IM18           EXTI_IMR_IM18_Msk                              /*!< Interrupt Mask on line 18 */
N#define EXTI_IMR_IM19_Pos       (19U)                                          
N#define EXTI_IMR_IM19_Msk       (0x1U << EXTI_IMR_IM19_Pos)                    /*!< 0x00080000 */
N#define EXTI_IMR_IM19           EXTI_IMR_IM19_Msk                              /*!< Interrupt Mask on line 19 */
N#define EXTI_IMR_IM20_Pos       (20U)                                          
N#define EXTI_IMR_IM20_Msk       (0x1U << EXTI_IMR_IM20_Pos)                    /*!< 0x00100000 */
N#define EXTI_IMR_IM20           EXTI_IMR_IM20_Msk                              /*!< Interrupt Mask on line 20 */
N#define EXTI_IMR_IM21_Pos       (21U)                                          
N#define EXTI_IMR_IM21_Msk       (0x1U << EXTI_IMR_IM21_Pos)                    /*!< 0x00200000 */
N#define EXTI_IMR_IM21           EXTI_IMR_IM21_Msk                              /*!< Interrupt Mask on line 21 */
N#define EXTI_IMR_IM22_Pos       (22U)                                          
N#define EXTI_IMR_IM22_Msk       (0x1U << EXTI_IMR_IM22_Pos)                    /*!< 0x00400000 */
N#define EXTI_IMR_IM22           EXTI_IMR_IM22_Msk                              /*!< Interrupt Mask on line 22 */
N#define EXTI_IMR_IM23_Pos       (23U)                                          
N#define EXTI_IMR_IM23_Msk       (0x1U << EXTI_IMR_IM23_Pos)                    /*!< 0x00800000 */
N#define EXTI_IMR_IM23           EXTI_IMR_IM23_Msk                              /*!< Interrupt Mask on line 23 */
N#define EXTI_IMR_IM25_Pos       (25U)                                          
N#define EXTI_IMR_IM25_Msk       (0x1U << EXTI_IMR_IM25_Pos)                    /*!< 0x02000000 */
N#define EXTI_IMR_IM25           EXTI_IMR_IM25_Msk                              /*!< Interrupt Mask on line 25 */
N#define EXTI_IMR_IM26_Pos       (26U)                                          
N#define EXTI_IMR_IM26_Msk       (0x1U << EXTI_IMR_IM26_Pos)                    /*!< 0x04000000 */
N#define EXTI_IMR_IM26           EXTI_IMR_IM26_Msk                              /*!< Interrupt Mask on line 26 */
N#define EXTI_IMR_IM28_Pos       (28U)                                          
N#define EXTI_IMR_IM28_Msk       (0x1U << EXTI_IMR_IM28_Pos)                    /*!< 0x10000000 */
N#define EXTI_IMR_IM28           EXTI_IMR_IM28_Msk                              /*!< Interrupt Mask on line 28 */
N#define EXTI_IMR_IM29_Pos       (29U)                                          
N#define EXTI_IMR_IM29_Msk       (0x1U << EXTI_IMR_IM29_Pos)                    /*!< 0x20000000 */
N#define EXTI_IMR_IM29           EXTI_IMR_IM29_Msk                              /*!< Interrupt Mask on line 29 */
N
N#define EXTI_IMR_IM_Pos         (0U)                                           
N#define EXTI_IMR_IM_Msk         (0x36FFFFFFU << EXTI_IMR_IM_Pos)               /*!< 0x36FFFFFF */
N#define EXTI_IMR_IM             EXTI_IMR_IM_Msk                                /*!< Interrupt Mask All */
N
N/******************  Bit definition for EXTI_EMR register  ********************/
N#define EXTI_EMR_EM0_Pos        (0U)                                           
N#define EXTI_EMR_EM0_Msk        (0x1U << EXTI_EMR_EM0_Pos)                     /*!< 0x00000001 */
N#define EXTI_EMR_EM0            EXTI_EMR_EM0_Msk                               /*!< Event Mask on line 0  */
N#define EXTI_EMR_EM1_Pos        (1U)                                           
N#define EXTI_EMR_EM1_Msk        (0x1U << EXTI_EMR_EM1_Pos)                     /*!< 0x00000002 */
N#define EXTI_EMR_EM1            EXTI_EMR_EM1_Msk                               /*!< Event Mask on line 1  */
N#define EXTI_EMR_EM2_Pos        (2U)                                           
N#define EXTI_EMR_EM2_Msk        (0x1U << EXTI_EMR_EM2_Pos)                     /*!< 0x00000004 */
N#define EXTI_EMR_EM2            EXTI_EMR_EM2_Msk                               /*!< Event Mask on line 2  */
N#define EXTI_EMR_EM3_Pos        (3U)                                           
N#define EXTI_EMR_EM3_Msk        (0x1U << EXTI_EMR_EM3_Pos)                     /*!< 0x00000008 */
N#define EXTI_EMR_EM3            EXTI_EMR_EM3_Msk                               /*!< Event Mask on line 3  */
N#define EXTI_EMR_EM4_Pos        (4U)                                           
N#define EXTI_EMR_EM4_Msk        (0x1U << EXTI_EMR_EM4_Pos)                     /*!< 0x00000010 */
N#define EXTI_EMR_EM4            EXTI_EMR_EM4_Msk                               /*!< Event Mask on line 4  */
N#define EXTI_EMR_EM5_Pos        (5U)                                           
N#define EXTI_EMR_EM5_Msk        (0x1U << EXTI_EMR_EM5_Pos)                     /*!< 0x00000020 */
N#define EXTI_EMR_EM5            EXTI_EMR_EM5_Msk                               /*!< Event Mask on line 5  */
N#define EXTI_EMR_EM6_Pos        (6U)                                           
N#define EXTI_EMR_EM6_Msk        (0x1U << EXTI_EMR_EM6_Pos)                     /*!< 0x00000040 */
N#define EXTI_EMR_EM6            EXTI_EMR_EM6_Msk                               /*!< Event Mask on line 6  */
N#define EXTI_EMR_EM7_Pos        (7U)                                           
N#define EXTI_EMR_EM7_Msk        (0x1U << EXTI_EMR_EM7_Pos)                     /*!< 0x00000080 */
N#define EXTI_EMR_EM7            EXTI_EMR_EM7_Msk                               /*!< Event Mask on line 7  */
N#define EXTI_EMR_EM8_Pos        (8U)                                           
N#define EXTI_EMR_EM8_Msk        (0x1U << EXTI_EMR_EM8_Pos)                     /*!< 0x00000100 */
N#define EXTI_EMR_EM8            EXTI_EMR_EM8_Msk                               /*!< Event Mask on line 8  */
N#define EXTI_EMR_EM9_Pos        (9U)                                           
N#define EXTI_EMR_EM9_Msk        (0x1U << EXTI_EMR_EM9_Pos)                     /*!< 0x00000200 */
N#define EXTI_EMR_EM9            EXTI_EMR_EM9_Msk                               /*!< Event Mask on line 9  */
N#define EXTI_EMR_EM10_Pos       (10U)                                          
N#define EXTI_EMR_EM10_Msk       (0x1U << EXTI_EMR_EM10_Pos)                    /*!< 0x00000400 */
N#define EXTI_EMR_EM10           EXTI_EMR_EM10_Msk                              /*!< Event Mask on line 10 */
N#define EXTI_EMR_EM11_Pos       (11U)                                          
N#define EXTI_EMR_EM11_Msk       (0x1U << EXTI_EMR_EM11_Pos)                    /*!< 0x00000800 */
N#define EXTI_EMR_EM11           EXTI_EMR_EM11_Msk                              /*!< Event Mask on line 11 */
N#define EXTI_EMR_EM12_Pos       (12U)                                          
N#define EXTI_EMR_EM12_Msk       (0x1U << EXTI_EMR_EM12_Pos)                    /*!< 0x00001000 */
N#define EXTI_EMR_EM12           EXTI_EMR_EM12_Msk                              /*!< Event Mask on line 12 */
N#define EXTI_EMR_EM13_Pos       (13U)                                          
N#define EXTI_EMR_EM13_Msk       (0x1U << EXTI_EMR_EM13_Pos)                    /*!< 0x00002000 */
N#define EXTI_EMR_EM13           EXTI_EMR_EM13_Msk                              /*!< Event Mask on line 13 */
N#define EXTI_EMR_EM14_Pos       (14U)                                          
N#define EXTI_EMR_EM14_Msk       (0x1U << EXTI_EMR_EM14_Pos)                    /*!< 0x00004000 */
N#define EXTI_EMR_EM14           EXTI_EMR_EM14_Msk                              /*!< Event Mask on line 14 */
N#define EXTI_EMR_EM15_Pos       (15U)                                          
N#define EXTI_EMR_EM15_Msk       (0x1U << EXTI_EMR_EM15_Pos)                    /*!< 0x00008000 */
N#define EXTI_EMR_EM15           EXTI_EMR_EM15_Msk                              /*!< Event Mask on line 15 */
N#define EXTI_EMR_EM16_Pos       (16U)                                          
N#define EXTI_EMR_EM16_Msk       (0x1U << EXTI_EMR_EM16_Pos)                    /*!< 0x00010000 */
N#define EXTI_EMR_EM16           EXTI_EMR_EM16_Msk                              /*!< Event Mask on line 16 */
N#define EXTI_EMR_EM17_Pos       (17U)                                          
N#define EXTI_EMR_EM17_Msk       (0x1U << EXTI_EMR_EM17_Pos)                    /*!< 0x00020000 */
N#define EXTI_EMR_EM17           EXTI_EMR_EM17_Msk                              /*!< Event Mask on line 17 */
N#define EXTI_EMR_EM18_Pos       (18U)                                          
N#define EXTI_EMR_EM18_Msk       (0x1U << EXTI_EMR_EM18_Pos)                    /*!< 0x00040000 */
N#define EXTI_EMR_EM18           EXTI_EMR_EM18_Msk                              /*!< Event Mask on line 18 */
N#define EXTI_EMR_EM19_Pos       (19U)                                          
N#define EXTI_EMR_EM19_Msk       (0x1U << EXTI_EMR_EM19_Pos)                    /*!< 0x00080000 */
N#define EXTI_EMR_EM19           EXTI_EMR_EM19_Msk                              /*!< Event Mask on line 19 */
N#define EXTI_EMR_EM20_Pos       (20U)                                          
N#define EXTI_EMR_EM20_Msk       (0x1U << EXTI_EMR_EM20_Pos)                    /*!< 0x00100000 */
N#define EXTI_EMR_EM20           EXTI_EMR_EM20_Msk                              /*!< Event Mask on line 20 */
N#define EXTI_EMR_EM21_Pos       (21U)                                          
N#define EXTI_EMR_EM21_Msk       (0x1U << EXTI_EMR_EM21_Pos)                    /*!< 0x00200000 */
N#define EXTI_EMR_EM21           EXTI_EMR_EM21_Msk                              /*!< Event Mask on line 21 */
N#define EXTI_EMR_EM22_Pos       (22U)                                          
N#define EXTI_EMR_EM22_Msk       (0x1U << EXTI_EMR_EM22_Pos)                    /*!< 0x00400000 */
N#define EXTI_EMR_EM22           EXTI_EMR_EM22_Msk                              /*!< Event Mask on line 22 */
N#define EXTI_EMR_EM23_Pos       (23U)                                          
N#define EXTI_EMR_EM23_Msk       (0x1U << EXTI_EMR_EM23_Pos)                    /*!< 0x00800000 */
N#define EXTI_EMR_EM23           EXTI_EMR_EM23_Msk                              /*!< Event Mask on line 23 */
N#define EXTI_EMR_EM25_Pos       (25U)                                          
N#define EXTI_EMR_EM25_Msk       (0x1U << EXTI_EMR_EM25_Pos)                    /*!< 0x02000000 */
N#define EXTI_EMR_EM25           EXTI_EMR_EM25_Msk                              /*!< Event Mask on line 25 */
N#define EXTI_EMR_EM26_Pos       (26U)                                          
N#define EXTI_EMR_EM26_Msk       (0x1U << EXTI_EMR_EM26_Pos)                    /*!< 0x04000000 */
N#define EXTI_EMR_EM26           EXTI_EMR_EM26_Msk                              /*!< Event Mask on line 26 */
N#define EXTI_EMR_EM28_Pos       (28U)                                          
N#define EXTI_EMR_EM28_Msk       (0x1U << EXTI_EMR_EM28_Pos)                    /*!< 0x10000000 */
N#define EXTI_EMR_EM28           EXTI_EMR_EM28_Msk                              /*!< Event Mask on line 28 */
N#define EXTI_EMR_EM29_Pos       (29U)                                          
N#define EXTI_EMR_EM29_Msk       (0x1U << EXTI_EMR_EM29_Pos)                    /*!< 0x20000000 */
N#define EXTI_EMR_EM29           EXTI_EMR_EM29_Msk                              /*!< Event Mask on line 29 */
N
N/*******************  Bit definition for EXTI_RTSR register  ******************/
N#define EXTI_RTSR_RT0_Pos       (0U)                                           
N#define EXTI_RTSR_RT0_Msk       (0x1U << EXTI_RTSR_RT0_Pos)                    /*!< 0x00000001 */
N#define EXTI_RTSR_RT0           EXTI_RTSR_RT0_Msk                              /*!< Rising trigger event configuration bit of line 0 */
N#define EXTI_RTSR_RT1_Pos       (1U)                                           
N#define EXTI_RTSR_RT1_Msk       (0x1U << EXTI_RTSR_RT1_Pos)                    /*!< 0x00000002 */
N#define EXTI_RTSR_RT1           EXTI_RTSR_RT1_Msk                              /*!< Rising trigger event configuration bit of line 1 */
N#define EXTI_RTSR_RT2_Pos       (2U)                                           
N#define EXTI_RTSR_RT2_Msk       (0x1U << EXTI_RTSR_RT2_Pos)                    /*!< 0x00000004 */
N#define EXTI_RTSR_RT2           EXTI_RTSR_RT2_Msk                              /*!< Rising trigger event configuration bit of line 2 */
N#define EXTI_RTSR_RT3_Pos       (3U)                                           
N#define EXTI_RTSR_RT3_Msk       (0x1U << EXTI_RTSR_RT3_Pos)                    /*!< 0x00000008 */
N#define EXTI_RTSR_RT3           EXTI_RTSR_RT3_Msk                              /*!< Rising trigger event configuration bit of line 3 */
N#define EXTI_RTSR_RT4_Pos       (4U)                                           
N#define EXTI_RTSR_RT4_Msk       (0x1U << EXTI_RTSR_RT4_Pos)                    /*!< 0x00000010 */
N#define EXTI_RTSR_RT4           EXTI_RTSR_RT4_Msk                              /*!< Rising trigger event configuration bit of line 4 */
N#define EXTI_RTSR_RT5_Pos       (5U)                                           
N#define EXTI_RTSR_RT5_Msk       (0x1U << EXTI_RTSR_RT5_Pos)                    /*!< 0x00000020 */
N#define EXTI_RTSR_RT5           EXTI_RTSR_RT5_Msk                              /*!< Rising trigger event configuration bit of line 5 */
N#define EXTI_RTSR_RT6_Pos       (6U)                                           
N#define EXTI_RTSR_RT6_Msk       (0x1U << EXTI_RTSR_RT6_Pos)                    /*!< 0x00000040 */
N#define EXTI_RTSR_RT6           EXTI_RTSR_RT6_Msk                              /*!< Rising trigger event configuration bit of line 6 */
N#define EXTI_RTSR_RT7_Pos       (7U)                                           
N#define EXTI_RTSR_RT7_Msk       (0x1U << EXTI_RTSR_RT7_Pos)                    /*!< 0x00000080 */
N#define EXTI_RTSR_RT7           EXTI_RTSR_RT7_Msk                              /*!< Rising trigger event configuration bit of line 7 */
N#define EXTI_RTSR_RT8_Pos       (8U)                                           
N#define EXTI_RTSR_RT8_Msk       (0x1U << EXTI_RTSR_RT8_Pos)                    /*!< 0x00000100 */
N#define EXTI_RTSR_RT8           EXTI_RTSR_RT8_Msk                              /*!< Rising trigger event configuration bit of line 8 */
N#define EXTI_RTSR_RT9_Pos       (9U)                                           
N#define EXTI_RTSR_RT9_Msk       (0x1U << EXTI_RTSR_RT9_Pos)                    /*!< 0x00000200 */
N#define EXTI_RTSR_RT9           EXTI_RTSR_RT9_Msk                              /*!< Rising trigger event configuration bit of line 9 */
N#define EXTI_RTSR_RT10_Pos      (10U)                                          
N#define EXTI_RTSR_RT10_Msk      (0x1U << EXTI_RTSR_RT10_Pos)                   /*!< 0x00000400 */
N#define EXTI_RTSR_RT10          EXTI_RTSR_RT10_Msk                             /*!< Rising trigger event configuration bit of line 10 */
N#define EXTI_RTSR_RT11_Pos      (11U)                                          
N#define EXTI_RTSR_RT11_Msk      (0x1U << EXTI_RTSR_RT11_Pos)                   /*!< 0x00000800 */
N#define EXTI_RTSR_RT11          EXTI_RTSR_RT11_Msk                             /*!< Rising trigger event configuration bit of line 11 */
N#define EXTI_RTSR_RT12_Pos      (12U)                                          
N#define EXTI_RTSR_RT12_Msk      (0x1U << EXTI_RTSR_RT12_Pos)                   /*!< 0x00001000 */
N#define EXTI_RTSR_RT12          EXTI_RTSR_RT12_Msk                             /*!< Rising trigger event configuration bit of line 12 */
N#define EXTI_RTSR_RT13_Pos      (13U)                                          
N#define EXTI_RTSR_RT13_Msk      (0x1U << EXTI_RTSR_RT13_Pos)                   /*!< 0x00002000 */
N#define EXTI_RTSR_RT13          EXTI_RTSR_RT13_Msk                             /*!< Rising trigger event configuration bit of line 13 */
N#define EXTI_RTSR_RT14_Pos      (14U)                                          
N#define EXTI_RTSR_RT14_Msk      (0x1U << EXTI_RTSR_RT14_Pos)                   /*!< 0x00004000 */
N#define EXTI_RTSR_RT14          EXTI_RTSR_RT14_Msk                             /*!< Rising trigger event configuration bit of line 14 */
N#define EXTI_RTSR_RT15_Pos      (15U)                                          
N#define EXTI_RTSR_RT15_Msk      (0x1U << EXTI_RTSR_RT15_Pos)                   /*!< 0x00008000 */
N#define EXTI_RTSR_RT15          EXTI_RTSR_RT15_Msk                             /*!< Rising trigger event configuration bit of line 15 */
N#define EXTI_RTSR_RT16_Pos      (16U)                                          
N#define EXTI_RTSR_RT16_Msk      (0x1U << EXTI_RTSR_RT16_Pos)                   /*!< 0x00010000 */
N#define EXTI_RTSR_RT16          EXTI_RTSR_RT16_Msk                             /*!< Rising trigger event configuration bit of line 16 */
N#define EXTI_RTSR_RT17_Pos      (17U)                                          
N#define EXTI_RTSR_RT17_Msk      (0x1U << EXTI_RTSR_RT17_Pos)                   /*!< 0x00020000 */
N#define EXTI_RTSR_RT17          EXTI_RTSR_RT17_Msk                             /*!< Rising trigger event configuration bit of line 17 */
N#define EXTI_RTSR_RT19_Pos      (19U)                                          
N#define EXTI_RTSR_RT19_Msk      (0x1U << EXTI_RTSR_RT19_Pos)                   /*!< 0x00080000 */
N#define EXTI_RTSR_RT19          EXTI_RTSR_RT19_Msk                             /*!< Rising trigger event configuration bit of line 19 */
N#define EXTI_RTSR_RT20_Pos      (20U)                                          
N#define EXTI_RTSR_RT20_Msk      (0x1U << EXTI_RTSR_RT20_Pos)                   /*!< 0x00100000 */
N#define EXTI_RTSR_RT20          EXTI_RTSR_RT20_Msk                             /*!< Rising trigger event configuration bit of line 20 */
N#define EXTI_RTSR_RT21_Pos      (21U)                                          
N#define EXTI_RTSR_RT21_Msk      (0x1U << EXTI_RTSR_RT21_Pos)                   /*!< 0x00200000 */
N#define EXTI_RTSR_RT21          EXTI_RTSR_RT21_Msk                             /*!< Rising trigger event configuration bit of line 21 */
N#define EXTI_RTSR_RT22_Pos      (22U)                                          
N#define EXTI_RTSR_RT22_Msk      (0x1U << EXTI_RTSR_RT22_Pos)                   /*!< 0x00400000 */
N#define EXTI_RTSR_RT22          EXTI_RTSR_RT22_Msk                             /*!< Rising trigger event configuration bit of line 22 */
N
N/* Legacy defines */
N#define EXTI_RTSR_TR0                       EXTI_RTSR_RT0
N#define EXTI_RTSR_TR1                       EXTI_RTSR_RT1
N#define EXTI_RTSR_TR2                       EXTI_RTSR_RT2
N#define EXTI_RTSR_TR3                       EXTI_RTSR_RT3
N#define EXTI_RTSR_TR4                       EXTI_RTSR_RT4
N#define EXTI_RTSR_TR5                       EXTI_RTSR_RT5
N#define EXTI_RTSR_TR6                       EXTI_RTSR_RT6
N#define EXTI_RTSR_TR7                       EXTI_RTSR_RT7
N#define EXTI_RTSR_TR8                       EXTI_RTSR_RT8
N#define EXTI_RTSR_TR9                       EXTI_RTSR_RT9
N#define EXTI_RTSR_TR10                      EXTI_RTSR_RT10
N#define EXTI_RTSR_TR11                      EXTI_RTSR_RT11
N#define EXTI_RTSR_TR12                      EXTI_RTSR_RT12
N#define EXTI_RTSR_TR13                      EXTI_RTSR_RT13
N#define EXTI_RTSR_TR14                      EXTI_RTSR_RT14
N#define EXTI_RTSR_TR15                      EXTI_RTSR_RT15
N#define EXTI_RTSR_TR16                      EXTI_RTSR_RT16
N#define EXTI_RTSR_TR17                      EXTI_RTSR_RT17
N#define EXTI_RTSR_TR19                      EXTI_RTSR_RT19
N#define EXTI_RTSR_TR20                      EXTI_RTSR_RT20
N#define EXTI_RTSR_TR21                      EXTI_RTSR_RT21
N#define EXTI_RTSR_TR22                      EXTI_RTSR_RT22
N
N/*******************  Bit definition for EXTI_FTSR register *******************/
N#define EXTI_FTSR_FT0_Pos       (0U)                                           
N#define EXTI_FTSR_FT0_Msk       (0x1U << EXTI_FTSR_FT0_Pos)                    /*!< 0x00000001 */
N#define EXTI_FTSR_FT0           EXTI_FTSR_FT0_Msk                              /*!< Falling trigger event configuration bit of line 0 */
N#define EXTI_FTSR_FT1_Pos       (1U)                                           
N#define EXTI_FTSR_FT1_Msk       (0x1U << EXTI_FTSR_FT1_Pos)                    /*!< 0x00000002 */
N#define EXTI_FTSR_FT1           EXTI_FTSR_FT1_Msk                              /*!< Falling trigger event configuration bit of line 1 */
N#define EXTI_FTSR_FT2_Pos       (2U)                                           
N#define EXTI_FTSR_FT2_Msk       (0x1U << EXTI_FTSR_FT2_Pos)                    /*!< 0x00000004 */
N#define EXTI_FTSR_FT2           EXTI_FTSR_FT2_Msk                              /*!< Falling trigger event configuration bit of line 2 */
N#define EXTI_FTSR_FT3_Pos       (3U)                                           
N#define EXTI_FTSR_FT3_Msk       (0x1U << EXTI_FTSR_FT3_Pos)                    /*!< 0x00000008 */
N#define EXTI_FTSR_FT3           EXTI_FTSR_FT3_Msk                              /*!< Falling trigger event configuration bit of line 3 */
N#define EXTI_FTSR_FT4_Pos       (4U)                                           
N#define EXTI_FTSR_FT4_Msk       (0x1U << EXTI_FTSR_FT4_Pos)                    /*!< 0x00000010 */
N#define EXTI_FTSR_FT4           EXTI_FTSR_FT4_Msk                              /*!< Falling trigger event configuration bit of line 4 */
N#define EXTI_FTSR_FT5_Pos       (5U)                                           
N#define EXTI_FTSR_FT5_Msk       (0x1U << EXTI_FTSR_FT5_Pos)                    /*!< 0x00000020 */
N#define EXTI_FTSR_FT5           EXTI_FTSR_FT5_Msk                              /*!< Falling trigger event configuration bit of line 5 */
N#define EXTI_FTSR_FT6_Pos       (6U)                                           
N#define EXTI_FTSR_FT6_Msk       (0x1U << EXTI_FTSR_FT6_Pos)                    /*!< 0x00000040 */
N#define EXTI_FTSR_FT6           EXTI_FTSR_FT6_Msk                              /*!< Falling trigger event configuration bit of line 6 */
N#define EXTI_FTSR_FT7_Pos       (7U)                                           
N#define EXTI_FTSR_FT7_Msk       (0x1U << EXTI_FTSR_FT7_Pos)                    /*!< 0x00000080 */
N#define EXTI_FTSR_FT7           EXTI_FTSR_FT7_Msk                              /*!< Falling trigger event configuration bit of line 7 */
N#define EXTI_FTSR_FT8_Pos       (8U)                                           
N#define EXTI_FTSR_FT8_Msk       (0x1U << EXTI_FTSR_FT8_Pos)                    /*!< 0x00000100 */
N#define EXTI_FTSR_FT8           EXTI_FTSR_FT8_Msk                              /*!< Falling trigger event configuration bit of line 8 */
N#define EXTI_FTSR_FT9_Pos       (9U)                                           
N#define EXTI_FTSR_FT9_Msk       (0x1U << EXTI_FTSR_FT9_Pos)                    /*!< 0x00000200 */
N#define EXTI_FTSR_FT9           EXTI_FTSR_FT9_Msk                              /*!< Falling trigger event configuration bit of line 9 */
N#define EXTI_FTSR_FT10_Pos      (10U)                                          
N#define EXTI_FTSR_FT10_Msk      (0x1U << EXTI_FTSR_FT10_Pos)                   /*!< 0x00000400 */
N#define EXTI_FTSR_FT10          EXTI_FTSR_FT10_Msk                             /*!< Falling trigger event configuration bit of line 10 */
N#define EXTI_FTSR_FT11_Pos      (11U)                                          
N#define EXTI_FTSR_FT11_Msk      (0x1U << EXTI_FTSR_FT11_Pos)                   /*!< 0x00000800 */
N#define EXTI_FTSR_FT11          EXTI_FTSR_FT11_Msk                             /*!< Falling trigger event configuration bit of line 11 */
N#define EXTI_FTSR_FT12_Pos      (12U)                                          
N#define EXTI_FTSR_FT12_Msk      (0x1U << EXTI_FTSR_FT12_Pos)                   /*!< 0x00001000 */
N#define EXTI_FTSR_FT12          EXTI_FTSR_FT12_Msk                             /*!< Falling trigger event configuration bit of line 12 */
N#define EXTI_FTSR_FT13_Pos      (13U)                                          
N#define EXTI_FTSR_FT13_Msk      (0x1U << EXTI_FTSR_FT13_Pos)                   /*!< 0x00002000 */
N#define EXTI_FTSR_FT13          EXTI_FTSR_FT13_Msk                             /*!< Falling trigger event configuration bit of line 13 */
N#define EXTI_FTSR_FT14_Pos      (14U)                                          
N#define EXTI_FTSR_FT14_Msk      (0x1U << EXTI_FTSR_FT14_Pos)                   /*!< 0x00004000 */
N#define EXTI_FTSR_FT14          EXTI_FTSR_FT14_Msk                             /*!< Falling trigger event configuration bit of line 14 */
N#define EXTI_FTSR_FT15_Pos      (15U)                                          
N#define EXTI_FTSR_FT15_Msk      (0x1U << EXTI_FTSR_FT15_Pos)                   /*!< 0x00008000 */
N#define EXTI_FTSR_FT15          EXTI_FTSR_FT15_Msk                             /*!< Falling trigger event configuration bit of line 15 */
N#define EXTI_FTSR_FT16_Pos      (16U)                                          
N#define EXTI_FTSR_FT16_Msk      (0x1U << EXTI_FTSR_FT16_Pos)                   /*!< 0x00010000 */
N#define EXTI_FTSR_FT16          EXTI_FTSR_FT16_Msk                             /*!< Falling trigger event configuration bit of line 16 */
N#define EXTI_FTSR_FT17_Pos      (17U)                                          
N#define EXTI_FTSR_FT17_Msk      (0x1U << EXTI_FTSR_FT17_Pos)                   /*!< 0x00020000 */
N#define EXTI_FTSR_FT17          EXTI_FTSR_FT17_Msk                             /*!< Falling trigger event configuration bit of line 17 */
N#define EXTI_FTSR_FT19_Pos      (19U)                                          
N#define EXTI_FTSR_FT19_Msk      (0x1U << EXTI_FTSR_FT19_Pos)                   /*!< 0x00080000 */
N#define EXTI_FTSR_FT19          EXTI_FTSR_FT19_Msk                             /*!< Falling trigger event configuration bit of line 19 */
N#define EXTI_FTSR_FT20_Pos      (20U)                                          
N#define EXTI_FTSR_FT20_Msk      (0x1U << EXTI_FTSR_FT20_Pos)                   /*!< 0x00100000 */
N#define EXTI_FTSR_FT20          EXTI_FTSR_FT20_Msk                             /*!< Falling trigger event configuration bit of line 20 */
N#define EXTI_FTSR_FT21_Pos      (21U)                                          
N#define EXTI_FTSR_FT21_Msk      (0x1U << EXTI_FTSR_FT21_Pos)                   /*!< 0x00200000 */
N#define EXTI_FTSR_FT21          EXTI_FTSR_FT21_Msk                             /*!< Falling trigger event configuration bit of line 21 */
N#define EXTI_FTSR_FT22_Pos      (22U)                                          
N#define EXTI_FTSR_FT22_Msk      (0x1U << EXTI_FTSR_FT22_Pos)                   /*!< 0x00400000 */
N#define EXTI_FTSR_FT22          EXTI_FTSR_FT22_Msk                             /*!< Falling trigger event configuration bit of line 22 */
N
N/* Legacy defines */
N#define EXTI_FTSR_TR0                       EXTI_FTSR_FT0
N#define EXTI_FTSR_TR1                       EXTI_FTSR_FT1
N#define EXTI_FTSR_TR2                       EXTI_FTSR_FT2
N#define EXTI_FTSR_TR3                       EXTI_FTSR_FT3
N#define EXTI_FTSR_TR4                       EXTI_FTSR_FT4
N#define EXTI_FTSR_TR5                       EXTI_FTSR_FT5
N#define EXTI_FTSR_TR6                       EXTI_FTSR_FT6
N#define EXTI_FTSR_TR7                       EXTI_FTSR_FT7
N#define EXTI_FTSR_TR8                       EXTI_FTSR_FT8
N#define EXTI_FTSR_TR9                       EXTI_FTSR_FT9
N#define EXTI_FTSR_TR10                      EXTI_FTSR_FT10
N#define EXTI_FTSR_TR11                      EXTI_FTSR_FT11
N#define EXTI_FTSR_TR12                      EXTI_FTSR_FT12
N#define EXTI_FTSR_TR13                      EXTI_FTSR_FT13
N#define EXTI_FTSR_TR14                      EXTI_FTSR_FT14
N#define EXTI_FTSR_TR15                      EXTI_FTSR_FT15
N#define EXTI_FTSR_TR16                      EXTI_FTSR_FT16
N#define EXTI_FTSR_TR17                      EXTI_FTSR_FT17
N#define EXTI_FTSR_TR19                      EXTI_FTSR_FT19
N#define EXTI_FTSR_TR20                      EXTI_FTSR_FT20
N#define EXTI_FTSR_TR21                      EXTI_FTSR_FT21
N#define EXTI_FTSR_TR22                      EXTI_FTSR_FT22
N
N/******************* Bit definition for EXTI_SWIER register *******************/
N#define EXTI_SWIER_SWI0_Pos     (0U)                                           
N#define EXTI_SWIER_SWI0_Msk     (0x1U << EXTI_SWIER_SWI0_Pos)                  /*!< 0x00000001 */
N#define EXTI_SWIER_SWI0         EXTI_SWIER_SWI0_Msk                            /*!< Software Interrupt on line 0  */
N#define EXTI_SWIER_SWI1_Pos     (1U)                                           
N#define EXTI_SWIER_SWI1_Msk     (0x1U << EXTI_SWIER_SWI1_Pos)                  /*!< 0x00000002 */
N#define EXTI_SWIER_SWI1         EXTI_SWIER_SWI1_Msk                            /*!< Software Interrupt on line 1  */
N#define EXTI_SWIER_SWI2_Pos     (2U)                                           
N#define EXTI_SWIER_SWI2_Msk     (0x1U << EXTI_SWIER_SWI2_Pos)                  /*!< 0x00000004 */
N#define EXTI_SWIER_SWI2         EXTI_SWIER_SWI2_Msk                            /*!< Software Interrupt on line 2  */
N#define EXTI_SWIER_SWI3_Pos     (3U)                                           
N#define EXTI_SWIER_SWI3_Msk     (0x1U << EXTI_SWIER_SWI3_Pos)                  /*!< 0x00000008 */
N#define EXTI_SWIER_SWI3         EXTI_SWIER_SWI3_Msk                            /*!< Software Interrupt on line 3  */
N#define EXTI_SWIER_SWI4_Pos     (4U)                                           
N#define EXTI_SWIER_SWI4_Msk     (0x1U << EXTI_SWIER_SWI4_Pos)                  /*!< 0x00000010 */
N#define EXTI_SWIER_SWI4         EXTI_SWIER_SWI4_Msk                            /*!< Software Interrupt on line 4  */
N#define EXTI_SWIER_SWI5_Pos     (5U)                                           
N#define EXTI_SWIER_SWI5_Msk     (0x1U << EXTI_SWIER_SWI5_Pos)                  /*!< 0x00000020 */
N#define EXTI_SWIER_SWI5         EXTI_SWIER_SWI5_Msk                            /*!< Software Interrupt on line 5  */
N#define EXTI_SWIER_SWI6_Pos     (6U)                                           
N#define EXTI_SWIER_SWI6_Msk     (0x1U << EXTI_SWIER_SWI6_Pos)                  /*!< 0x00000040 */
N#define EXTI_SWIER_SWI6         EXTI_SWIER_SWI6_Msk                            /*!< Software Interrupt on line 6  */
N#define EXTI_SWIER_SWI7_Pos     (7U)                                           
N#define EXTI_SWIER_SWI7_Msk     (0x1U << EXTI_SWIER_SWI7_Pos)                  /*!< 0x00000080 */
N#define EXTI_SWIER_SWI7         EXTI_SWIER_SWI7_Msk                            /*!< Software Interrupt on line 7  */
N#define EXTI_SWIER_SWI8_Pos     (8U)                                           
N#define EXTI_SWIER_SWI8_Msk     (0x1U << EXTI_SWIER_SWI8_Pos)                  /*!< 0x00000100 */
N#define EXTI_SWIER_SWI8         EXTI_SWIER_SWI8_Msk                            /*!< Software Interrupt on line 8  */
N#define EXTI_SWIER_SWI9_Pos     (9U)                                           
N#define EXTI_SWIER_SWI9_Msk     (0x1U << EXTI_SWIER_SWI9_Pos)                  /*!< 0x00000200 */
N#define EXTI_SWIER_SWI9         EXTI_SWIER_SWI9_Msk                            /*!< Software Interrupt on line 9  */
N#define EXTI_SWIER_SWI10_Pos    (10U)                                          
N#define EXTI_SWIER_SWI10_Msk    (0x1U << EXTI_SWIER_SWI10_Pos)                 /*!< 0x00000400 */
N#define EXTI_SWIER_SWI10        EXTI_SWIER_SWI10_Msk                           /*!< Software Interrupt on line 10 */
N#define EXTI_SWIER_SWI11_Pos    (11U)                                          
N#define EXTI_SWIER_SWI11_Msk    (0x1U << EXTI_SWIER_SWI11_Pos)                 /*!< 0x00000800 */
N#define EXTI_SWIER_SWI11        EXTI_SWIER_SWI11_Msk                           /*!< Software Interrupt on line 11 */
N#define EXTI_SWIER_SWI12_Pos    (12U)                                          
N#define EXTI_SWIER_SWI12_Msk    (0x1U << EXTI_SWIER_SWI12_Pos)                 /*!< 0x00001000 */
N#define EXTI_SWIER_SWI12        EXTI_SWIER_SWI12_Msk                           /*!< Software Interrupt on line 12 */
N#define EXTI_SWIER_SWI13_Pos    (13U)                                          
N#define EXTI_SWIER_SWI13_Msk    (0x1U << EXTI_SWIER_SWI13_Pos)                 /*!< 0x00002000 */
N#define EXTI_SWIER_SWI13        EXTI_SWIER_SWI13_Msk                           /*!< Software Interrupt on line 13 */
N#define EXTI_SWIER_SWI14_Pos    (14U)                                          
N#define EXTI_SWIER_SWI14_Msk    (0x1U << EXTI_SWIER_SWI14_Pos)                 /*!< 0x00004000 */
N#define EXTI_SWIER_SWI14        EXTI_SWIER_SWI14_Msk                           /*!< Software Interrupt on line 14 */
N#define EXTI_SWIER_SWI15_Pos    (15U)                                          
N#define EXTI_SWIER_SWI15_Msk    (0x1U << EXTI_SWIER_SWI15_Pos)                 /*!< 0x00008000 */
N#define EXTI_SWIER_SWI15        EXTI_SWIER_SWI15_Msk                           /*!< Software Interrupt on line 15 */
N#define EXTI_SWIER_SWI16_Pos    (16U)                                          
N#define EXTI_SWIER_SWI16_Msk    (0x1U << EXTI_SWIER_SWI16_Pos)                 /*!< 0x00010000 */
N#define EXTI_SWIER_SWI16        EXTI_SWIER_SWI16_Msk                           /*!< Software Interrupt on line 16 */
N#define EXTI_SWIER_SWI17_Pos    (17U)                                          
N#define EXTI_SWIER_SWI17_Msk    (0x1U << EXTI_SWIER_SWI17_Pos)                 /*!< 0x00020000 */
N#define EXTI_SWIER_SWI17        EXTI_SWIER_SWI17_Msk                           /*!< Software Interrupt on line 17 */
N#define EXTI_SWIER_SWI19_Pos    (19U)                                          
N#define EXTI_SWIER_SWI19_Msk    (0x1U << EXTI_SWIER_SWI19_Pos)                 /*!< 0x00080000 */
N#define EXTI_SWIER_SWI19        EXTI_SWIER_SWI19_Msk                           /*!< Software Interrupt on line 19 */
N#define EXTI_SWIER_SWI20_Pos    (20U)                                          
N#define EXTI_SWIER_SWI20_Msk    (0x1U << EXTI_SWIER_SWI20_Pos)                 /*!< 0x00100000 */
N#define EXTI_SWIER_SWI20        EXTI_SWIER_SWI20_Msk                           /*!< Software Interrupt on line 20 */
N#define EXTI_SWIER_SWI21_Pos    (21U)                                          
N#define EXTI_SWIER_SWI21_Msk    (0x1U << EXTI_SWIER_SWI21_Pos)                 /*!< 0x00200000 */
N#define EXTI_SWIER_SWI21        EXTI_SWIER_SWI21_Msk                           /*!< Software Interrupt on line 21 */
N#define EXTI_SWIER_SWI22_Pos    (22U)                                          
N#define EXTI_SWIER_SWI22_Msk    (0x1U << EXTI_SWIER_SWI22_Pos)                 /*!< 0x00400000 */
N#define EXTI_SWIER_SWI22        EXTI_SWIER_SWI22_Msk                           /*!< Software Interrupt on line 22 */
N
N/* Legacy defines */
N#define EXTI_SWIER_SWIER0                   EXTI_SWIER_SWI0
N#define EXTI_SWIER_SWIER1                   EXTI_SWIER_SWI1
N#define EXTI_SWIER_SWIER2                   EXTI_SWIER_SWI2
N#define EXTI_SWIER_SWIER3                   EXTI_SWIER_SWI3
N#define EXTI_SWIER_SWIER4                   EXTI_SWIER_SWI4
N#define EXTI_SWIER_SWIER5                   EXTI_SWIER_SWI5
N#define EXTI_SWIER_SWIER6                   EXTI_SWIER_SWI6
N#define EXTI_SWIER_SWIER7                   EXTI_SWIER_SWI7
N#define EXTI_SWIER_SWIER8                   EXTI_SWIER_SWI8
N#define EXTI_SWIER_SWIER9                   EXTI_SWIER_SWI9
N#define EXTI_SWIER_SWIER10                  EXTI_SWIER_SWI10
N#define EXTI_SWIER_SWIER11                  EXTI_SWIER_SWI11
N#define EXTI_SWIER_SWIER12                  EXTI_SWIER_SWI12
N#define EXTI_SWIER_SWIER13                  EXTI_SWIER_SWI13
N#define EXTI_SWIER_SWIER14                  EXTI_SWIER_SWI14
N#define EXTI_SWIER_SWIER15                  EXTI_SWIER_SWI15
N#define EXTI_SWIER_SWIER16                  EXTI_SWIER_SWI16
N#define EXTI_SWIER_SWIER17                  EXTI_SWIER_SWI17
N#define EXTI_SWIER_SWIER19                  EXTI_SWIER_SWI19
N#define EXTI_SWIER_SWIER20                  EXTI_SWIER_SWI20
N#define EXTI_SWIER_SWIER21                  EXTI_SWIER_SWI21
N#define EXTI_SWIER_SWIER22                  EXTI_SWIER_SWI22
N
N/******************  Bit definition for EXTI_PR register  *********************/
N#define EXTI_PR_PIF0_Pos        (0U)                                           
N#define EXTI_PR_PIF0_Msk        (0x1U << EXTI_PR_PIF0_Pos)                     /*!< 0x00000001 */
N#define EXTI_PR_PIF0            EXTI_PR_PIF0_Msk                               /*!< Pending bit 0  */
N#define EXTI_PR_PIF1_Pos        (1U)                                           
N#define EXTI_PR_PIF1_Msk        (0x1U << EXTI_PR_PIF1_Pos)                     /*!< 0x00000002 */
N#define EXTI_PR_PIF1            EXTI_PR_PIF1_Msk                               /*!< Pending bit 1  */
N#define EXTI_PR_PIF2_Pos        (2U)                                           
N#define EXTI_PR_PIF2_Msk        (0x1U << EXTI_PR_PIF2_Pos)                     /*!< 0x00000004 */
N#define EXTI_PR_PIF2            EXTI_PR_PIF2_Msk                               /*!< Pending bit 2  */
N#define EXTI_PR_PIF3_Pos        (3U)                                           
N#define EXTI_PR_PIF3_Msk        (0x1U << EXTI_PR_PIF3_Pos)                     /*!< 0x00000008 */
N#define EXTI_PR_PIF3            EXTI_PR_PIF3_Msk                               /*!< Pending bit 3  */
N#define EXTI_PR_PIF4_Pos        (4U)                                           
N#define EXTI_PR_PIF4_Msk        (0x1U << EXTI_PR_PIF4_Pos)                     /*!< 0x00000010 */
N#define EXTI_PR_PIF4            EXTI_PR_PIF4_Msk                               /*!< Pending bit 4  */
N#define EXTI_PR_PIF5_Pos        (5U)                                           
N#define EXTI_PR_PIF5_Msk        (0x1U << EXTI_PR_PIF5_Pos)                     /*!< 0x00000020 */
N#define EXTI_PR_PIF5            EXTI_PR_PIF5_Msk                               /*!< Pending bit 5  */
N#define EXTI_PR_PIF6_Pos        (6U)                                           
N#define EXTI_PR_PIF6_Msk        (0x1U << EXTI_PR_PIF6_Pos)                     /*!< 0x00000040 */
N#define EXTI_PR_PIF6            EXTI_PR_PIF6_Msk                               /*!< Pending bit 6  */
N#define EXTI_PR_PIF7_Pos        (7U)                                           
N#define EXTI_PR_PIF7_Msk        (0x1U << EXTI_PR_PIF7_Pos)                     /*!< 0x00000080 */
N#define EXTI_PR_PIF7            EXTI_PR_PIF7_Msk                               /*!< Pending bit 7  */
N#define EXTI_PR_PIF8_Pos        (8U)                                           
N#define EXTI_PR_PIF8_Msk        (0x1U << EXTI_PR_PIF8_Pos)                     /*!< 0x00000100 */
N#define EXTI_PR_PIF8            EXTI_PR_PIF8_Msk                               /*!< Pending bit 8  */
N#define EXTI_PR_PIF9_Pos        (9U)                                           
N#define EXTI_PR_PIF9_Msk        (0x1U << EXTI_PR_PIF9_Pos)                     /*!< 0x00000200 */
N#define EXTI_PR_PIF9            EXTI_PR_PIF9_Msk                               /*!< Pending bit 9  */
N#define EXTI_PR_PIF10_Pos       (10U)                                          
N#define EXTI_PR_PIF10_Msk       (0x1U << EXTI_PR_PIF10_Pos)                    /*!< 0x00000400 */
N#define EXTI_PR_PIF10           EXTI_PR_PIF10_Msk                              /*!< Pending bit 10 */
N#define EXTI_PR_PIF11_Pos       (11U)                                          
N#define EXTI_PR_PIF11_Msk       (0x1U << EXTI_PR_PIF11_Pos)                    /*!< 0x00000800 */
N#define EXTI_PR_PIF11           EXTI_PR_PIF11_Msk                              /*!< Pending bit 11 */
N#define EXTI_PR_PIF12_Pos       (12U)                                          
N#define EXTI_PR_PIF12_Msk       (0x1U << EXTI_PR_PIF12_Pos)                    /*!< 0x00001000 */
N#define EXTI_PR_PIF12           EXTI_PR_PIF12_Msk                              /*!< Pending bit 12 */
N#define EXTI_PR_PIF13_Pos       (13U)                                          
N#define EXTI_PR_PIF13_Msk       (0x1U << EXTI_PR_PIF13_Pos)                    /*!< 0x00002000 */
N#define EXTI_PR_PIF13           EXTI_PR_PIF13_Msk                              /*!< Pending bit 13 */
N#define EXTI_PR_PIF14_Pos       (14U)                                          
N#define EXTI_PR_PIF14_Msk       (0x1U << EXTI_PR_PIF14_Pos)                    /*!< 0x00004000 */
N#define EXTI_PR_PIF14           EXTI_PR_PIF14_Msk                              /*!< Pending bit 14 */
N#define EXTI_PR_PIF15_Pos       (15U)                                          
N#define EXTI_PR_PIF15_Msk       (0x1U << EXTI_PR_PIF15_Pos)                    /*!< 0x00008000 */
N#define EXTI_PR_PIF15           EXTI_PR_PIF15_Msk                              /*!< Pending bit 15 */
N#define EXTI_PR_PIF16_Pos       (16U)                                          
N#define EXTI_PR_PIF16_Msk       (0x1U << EXTI_PR_PIF16_Pos)                    /*!< 0x00010000 */
N#define EXTI_PR_PIF16           EXTI_PR_PIF16_Msk                              /*!< Pending bit 16 */
N#define EXTI_PR_PIF17_Pos       (17U)                                          
N#define EXTI_PR_PIF17_Msk       (0x1U << EXTI_PR_PIF17_Pos)                    /*!< 0x00020000 */
N#define EXTI_PR_PIF17           EXTI_PR_PIF17_Msk                              /*!< Pending bit 17 */
N#define EXTI_PR_PIF19_Pos       (19U)                                          
N#define EXTI_PR_PIF19_Msk       (0x1U << EXTI_PR_PIF19_Pos)                    /*!< 0x00080000 */
N#define EXTI_PR_PIF19           EXTI_PR_PIF19_Msk                              /*!< Pending bit 19 */
N#define EXTI_PR_PIF20_Pos       (20U)                                          
N#define EXTI_PR_PIF20_Msk       (0x1U << EXTI_PR_PIF20_Pos)                    /*!< 0x00100000 */
N#define EXTI_PR_PIF20           EXTI_PR_PIF20_Msk                              /*!< Pending bit 20 */
N#define EXTI_PR_PIF21_Pos       (21U)                                          
N#define EXTI_PR_PIF21_Msk       (0x1U << EXTI_PR_PIF21_Pos)                    /*!< 0x00200000 */
N#define EXTI_PR_PIF21           EXTI_PR_PIF21_Msk                              /*!< Pending bit 21 */
N#define EXTI_PR_PIF22_Pos       (22U)                                          
N#define EXTI_PR_PIF22_Msk       (0x1U << EXTI_PR_PIF22_Pos)                    /*!< 0x00400000 */
N#define EXTI_PR_PIF22           EXTI_PR_PIF22_Msk                              /*!< Pending bit 22 */
N
N/* Legacy defines */
N#define EXTI_PR_PR0                         EXTI_PR_PIF0
N#define EXTI_PR_PR1                         EXTI_PR_PIF1
N#define EXTI_PR_PR2                         EXTI_PR_PIF2
N#define EXTI_PR_PR3                         EXTI_PR_PIF3
N#define EXTI_PR_PR4                         EXTI_PR_PIF4
N#define EXTI_PR_PR5                         EXTI_PR_PIF5
N#define EXTI_PR_PR6                         EXTI_PR_PIF6
N#define EXTI_PR_PR7                         EXTI_PR_PIF7
N#define EXTI_PR_PR8                         EXTI_PR_PIF8
N#define EXTI_PR_PR9                         EXTI_PR_PIF9
N#define EXTI_PR_PR10                        EXTI_PR_PIF10
N#define EXTI_PR_PR11                        EXTI_PR_PIF11
N#define EXTI_PR_PR12                        EXTI_PR_PIF12
N#define EXTI_PR_PR13                        EXTI_PR_PIF13
N#define EXTI_PR_PR14                        EXTI_PR_PIF14
N#define EXTI_PR_PR15                        EXTI_PR_PIF15
N#define EXTI_PR_PR16                        EXTI_PR_PIF16
N#define EXTI_PR_PR17                        EXTI_PR_PIF17
N#define EXTI_PR_PR19                        EXTI_PR_PIF19
N#define EXTI_PR_PR20                        EXTI_PR_PIF20
N#define EXTI_PR_PR21                        EXTI_PR_PIF21
N#define EXTI_PR_PR22                        EXTI_PR_PIF22
N
N/******************************************************************************/
N/*                                                                            */
N/*                      FLASH and Option Bytes Registers                      */
N/*                                                                            */
N/******************************************************************************/
N
N/*******************  Bit definition for FLASH_ACR register  ******************/
N#define FLASH_ACR_LATENCY_Pos        (0U)                                      
N#define FLASH_ACR_LATENCY_Msk        (0x1U << FLASH_ACR_LATENCY_Pos)           /*!< 0x00000001 */
N#define FLASH_ACR_LATENCY            FLASH_ACR_LATENCY_Msk                     /*!< LATENCY bit (Latency) */
N#define FLASH_ACR_PRFTEN_Pos         (1U)                                      
N#define FLASH_ACR_PRFTEN_Msk         (0x1U << FLASH_ACR_PRFTEN_Pos)            /*!< 0x00000002 */
N#define FLASH_ACR_PRFTEN             FLASH_ACR_PRFTEN_Msk                      /*!< Prefetch Buffer Enable */
N#define FLASH_ACR_SLEEP_PD_Pos       (3U)                                      
N#define FLASH_ACR_SLEEP_PD_Msk       (0x1U << FLASH_ACR_SLEEP_PD_Pos)          /*!< 0x00000008 */
N#define FLASH_ACR_SLEEP_PD           FLASH_ACR_SLEEP_PD_Msk                    /*!< Flash mode during sleep mode */
N#define FLASH_ACR_RUN_PD_Pos         (4U)                                      
N#define FLASH_ACR_RUN_PD_Msk         (0x1U << FLASH_ACR_RUN_PD_Pos)            /*!< 0x00000010 */
N#define FLASH_ACR_RUN_PD             FLASH_ACR_RUN_PD_Msk                      /*!< Flash mode during RUN mode */
N#define FLASH_ACR_DISAB_BUF_Pos      (5U)                                      
N#define FLASH_ACR_DISAB_BUF_Msk      (0x1U << FLASH_ACR_DISAB_BUF_Pos)         /*!< 0x00000020 */
N#define FLASH_ACR_DISAB_BUF          FLASH_ACR_DISAB_BUF_Msk                   /*!< Disable Buffer */
N#define FLASH_ACR_PRE_READ_Pos       (6U)                                      
N#define FLASH_ACR_PRE_READ_Msk       (0x1U << FLASH_ACR_PRE_READ_Pos)          /*!< 0x00000040 */
N#define FLASH_ACR_PRE_READ           FLASH_ACR_PRE_READ_Msk                    /*!< Pre-read data address */
N
N/*******************  Bit definition for FLASH_PECR register  ******************/
N#define FLASH_PECR_PELOCK_Pos        (0U)                                      
N#define FLASH_PECR_PELOCK_Msk        (0x1U << FLASH_PECR_PELOCK_Pos)           /*!< 0x00000001 */
N#define FLASH_PECR_PELOCK            FLASH_PECR_PELOCK_Msk                     /*!< FLASH_PECR and Flash data Lock */
N#define FLASH_PECR_PRGLOCK_Pos       (1U)                                      
N#define FLASH_PECR_PRGLOCK_Msk       (0x1U << FLASH_PECR_PRGLOCK_Pos)          /*!< 0x00000002 */
N#define FLASH_PECR_PRGLOCK           FLASH_PECR_PRGLOCK_Msk                    /*!< Program matrix Lock */
N#define FLASH_PECR_OPTLOCK_Pos       (2U)                                      
N#define FLASH_PECR_OPTLOCK_Msk       (0x1U << FLASH_PECR_OPTLOCK_Pos)          /*!< 0x00000004 */
N#define FLASH_PECR_OPTLOCK           FLASH_PECR_OPTLOCK_Msk                    /*!< Option byte matrix Lock */
N#define FLASH_PECR_PROG_Pos          (3U)                                      
N#define FLASH_PECR_PROG_Msk          (0x1U << FLASH_PECR_PROG_Pos)             /*!< 0x00000008 */
N#define FLASH_PECR_PROG              FLASH_PECR_PROG_Msk                       /*!< Program matrix selection */
N#define FLASH_PECR_DATA_Pos          (4U)                                      
N#define FLASH_PECR_DATA_Msk          (0x1U << FLASH_PECR_DATA_Pos)             /*!< 0x00000010 */
N#define FLASH_PECR_DATA              FLASH_PECR_DATA_Msk                       /*!< Data matrix selection */
N#define FLASH_PECR_FIX_Pos           (8U)                                      
N#define FLASH_PECR_FIX_Msk           (0x1U << FLASH_PECR_FIX_Pos)              /*!< 0x00000100 */
N#define FLASH_PECR_FIX               FLASH_PECR_FIX_Msk                        /*!< Fixed Time Data write for Word/Half Word/Byte programming */
N#define FLASH_PECR_ERASE_Pos         (9U)                                      
N#define FLASH_PECR_ERASE_Msk         (0x1U << FLASH_PECR_ERASE_Pos)            /*!< 0x00000200 */
N#define FLASH_PECR_ERASE             FLASH_PECR_ERASE_Msk                      /*!< Page erasing mode */
N#define FLASH_PECR_FPRG_Pos          (10U)                                     
N#define FLASH_PECR_FPRG_Msk          (0x1U << FLASH_PECR_FPRG_Pos)             /*!< 0x00000400 */
N#define FLASH_PECR_FPRG              FLASH_PECR_FPRG_Msk                       /*!< Fast Page/Half Page programming mode */
N#define FLASH_PECR_EOPIE_Pos         (16U)                                     
N#define FLASH_PECR_EOPIE_Msk         (0x1U << FLASH_PECR_EOPIE_Pos)            /*!< 0x00010000 */
N#define FLASH_PECR_EOPIE             FLASH_PECR_EOPIE_Msk                      /*!< End of programming interrupt */ 
N#define FLASH_PECR_ERRIE_Pos         (17U)                                     
N#define FLASH_PECR_ERRIE_Msk         (0x1U << FLASH_PECR_ERRIE_Pos)            /*!< 0x00020000 */
N#define FLASH_PECR_ERRIE             FLASH_PECR_ERRIE_Msk                      /*!< Error interrupt */ 
N#define FLASH_PECR_OBL_LAUNCH_Pos    (18U)                                     
N#define FLASH_PECR_OBL_LAUNCH_Msk    (0x1U << FLASH_PECR_OBL_LAUNCH_Pos)       /*!< 0x00040000 */
N#define FLASH_PECR_OBL_LAUNCH        FLASH_PECR_OBL_LAUNCH_Msk                 /*!< Launch the option byte loading */
N#define FLASH_PECR_HALF_ARRAY_Pos    (19U)                                     
N#define FLASH_PECR_HALF_ARRAY_Msk    (0x1U << FLASH_PECR_HALF_ARRAY_Pos)       /*!< 0x00080000 */
N#define FLASH_PECR_HALF_ARRAY        FLASH_PECR_HALF_ARRAY_Msk                 /*!< Half array mode */
N
N/******************  Bit definition for FLASH_PDKEYR register  ******************/
N#define FLASH_PDKEYR_PDKEYR_Pos      (0U)                                      
N#define FLASH_PDKEYR_PDKEYR_Msk      (0xFFFFFFFFU << FLASH_PDKEYR_PDKEYR_Pos)  /*!< 0xFFFFFFFF */
N#define FLASH_PDKEYR_PDKEYR          FLASH_PDKEYR_PDKEYR_Msk                   /*!< FLASH_PEC and data matrix Key */
N
N/******************  Bit definition for FLASH_PEKEYR register  ******************/
N#define FLASH_PEKEYR_PEKEYR_Pos      (0U)                                      
N#define FLASH_PEKEYR_PEKEYR_Msk      (0xFFFFFFFFU << FLASH_PEKEYR_PEKEYR_Pos)  /*!< 0xFFFFFFFF */
N#define FLASH_PEKEYR_PEKEYR          FLASH_PEKEYR_PEKEYR_Msk                   /*!< FLASH_PEC and data matrix Key */
N
N/******************  Bit definition for FLASH_PRGKEYR register  ******************/
N#define FLASH_PRGKEYR_PRGKEYR_Pos    (0U)                                      
N#define FLASH_PRGKEYR_PRGKEYR_Msk    (0xFFFFFFFFU << FLASH_PRGKEYR_PRGKEYR_Pos) /*!< 0xFFFFFFFF */
N#define FLASH_PRGKEYR_PRGKEYR        FLASH_PRGKEYR_PRGKEYR_Msk                 /*!< Program matrix Key */
N
N/******************  Bit definition for FLASH_OPTKEYR register  ******************/
N#define FLASH_OPTKEYR_OPTKEYR_Pos    (0U)                                      
N#define FLASH_OPTKEYR_OPTKEYR_Msk    (0xFFFFFFFFU << FLASH_OPTKEYR_OPTKEYR_Pos) /*!< 0xFFFFFFFF */
N#define FLASH_OPTKEYR_OPTKEYR        FLASH_OPTKEYR_OPTKEYR_Msk                 /*!< Option bytes matrix Key */
N
N/******************  Bit definition for FLASH_SR register  *******************/
N#define FLASH_SR_BSY_Pos             (0U)                                      
N#define FLASH_SR_BSY_Msk             (0x1U << FLASH_SR_BSY_Pos)                /*!< 0x00000001 */
N#define FLASH_SR_BSY                 FLASH_SR_BSY_Msk                          /*!< Busy */
N#define FLASH_SR_EOP_Pos             (1U)                                      
N#define FLASH_SR_EOP_Msk             (0x1U << FLASH_SR_EOP_Pos)                /*!< 0x00000002 */
N#define FLASH_SR_EOP                 FLASH_SR_EOP_Msk                          /*!< End Of Programming*/
N#define FLASH_SR_HVOFF_Pos           (2U)                                      
N#define FLASH_SR_HVOFF_Msk           (0x1U << FLASH_SR_HVOFF_Pos)              /*!< 0x00000004 */
N#define FLASH_SR_HVOFF               FLASH_SR_HVOFF_Msk                        /*!< End of high voltage */
N#define FLASH_SR_READY_Pos           (3U)                                      
N#define FLASH_SR_READY_Msk           (0x1U << FLASH_SR_READY_Pos)              /*!< 0x00000008 */
N#define FLASH_SR_READY               FLASH_SR_READY_Msk                        /*!< Flash ready after low power mode */
N
N#define FLASH_SR_WRPERR_Pos          (8U)                                      
N#define FLASH_SR_WRPERR_Msk          (0x1U << FLASH_SR_WRPERR_Pos)             /*!< 0x00000100 */
N#define FLASH_SR_WRPERR              FLASH_SR_WRPERR_Msk                       /*!< Write protection error */
N#define FLASH_SR_PGAERR_Pos          (9U)                                      
N#define FLASH_SR_PGAERR_Msk          (0x1U << FLASH_SR_PGAERR_Pos)             /*!< 0x00000200 */
N#define FLASH_SR_PGAERR              FLASH_SR_PGAERR_Msk                       /*!< Programming Alignment Error */
N#define FLASH_SR_SIZERR_Pos          (10U)                                     
N#define FLASH_SR_SIZERR_Msk          (0x1U << FLASH_SR_SIZERR_Pos)             /*!< 0x00000400 */
N#define FLASH_SR_SIZERR              FLASH_SR_SIZERR_Msk                       /*!< Size error */
N#define FLASH_SR_OPTVERR_Pos         (11U)                                     
N#define FLASH_SR_OPTVERR_Msk         (0x1U << FLASH_SR_OPTVERR_Pos)            /*!< 0x00000800 */
N#define FLASH_SR_OPTVERR             FLASH_SR_OPTVERR_Msk                      /*!< Option Valid error */
N#define FLASH_SR_RDERR_Pos           (13U)                                     
N#define FLASH_SR_RDERR_Msk           (0x1U << FLASH_SR_RDERR_Pos)              /*!< 0x00002000 */
N#define FLASH_SR_RDERR               FLASH_SR_RDERR_Msk                        /*!< Read protected error */
N#define FLASH_SR_NOTZEROERR_Pos      (16U)                                     
N#define FLASH_SR_NOTZEROERR_Msk      (0x1U << FLASH_SR_NOTZEROERR_Pos)         /*!< 0x00010000 */
N#define FLASH_SR_NOTZEROERR          FLASH_SR_NOTZEROERR_Msk                   /*!< Not Zero error */
N#define FLASH_SR_FWWERR_Pos          (17U)                                     
N#define FLASH_SR_FWWERR_Msk          (0x1U << FLASH_SR_FWWERR_Pos)             /*!< 0x00020000 */
N#define FLASH_SR_FWWERR              FLASH_SR_FWWERR_Msk                       /*!< Write/Errase operation aborted */
N
N/* Legacy defines */
N#define FLASH_SR_FWWER                      FLASH_SR_FWWERR
N#define FLASH_SR_ENHV                       FLASH_SR_HVOFF
N#define FLASH_SR_ENDHV                      FLASH_SR_HVOFF
N
N/******************  Bit definition for FLASH_OPTR register  *******************/
N#define FLASH_OPTR_RDPROT_Pos        (0U)                                      
N#define FLASH_OPTR_RDPROT_Msk        (0xFFU << FLASH_OPTR_RDPROT_Pos)          /*!< 0x000000FF */
N#define FLASH_OPTR_RDPROT            FLASH_OPTR_RDPROT_Msk                     /*!< Read Protection */
N#define FLASH_OPTR_WPRMOD_Pos        (8U)                                      
N#define FLASH_OPTR_WPRMOD_Msk        (0x1U << FLASH_OPTR_WPRMOD_Pos)           /*!< 0x00000100 */
N#define FLASH_OPTR_WPRMOD            FLASH_OPTR_WPRMOD_Msk                     /*!< Selection of protection mode of WPR bits */
N#define FLASH_OPTR_BOR_LEV_Pos       (16U)                                     
N#define FLASH_OPTR_BOR_LEV_Msk       (0xFU << FLASH_OPTR_BOR_LEV_Pos)          /*!< 0x000F0000 */
N#define FLASH_OPTR_BOR_LEV           FLASH_OPTR_BOR_LEV_Msk                    /*!< BOR_LEV[3:0] Brown Out Reset Threshold Level*/
N#define FLASH_OPTR_IWDG_SW_Pos       (20U)                                     
N#define FLASH_OPTR_IWDG_SW_Msk       (0x1U << FLASH_OPTR_IWDG_SW_Pos)          /*!< 0x00100000 */
N#define FLASH_OPTR_IWDG_SW           FLASH_OPTR_IWDG_SW_Msk                    /*!< IWDG_SW */
N#define FLASH_OPTR_nRST_STOP_Pos     (21U)                                     
N#define FLASH_OPTR_nRST_STOP_Msk     (0x1U << FLASH_OPTR_nRST_STOP_Pos)        /*!< 0x00200000 */
N#define FLASH_OPTR_nRST_STOP         FLASH_OPTR_nRST_STOP_Msk                  /*!< nRST_STOP */
N#define FLASH_OPTR_nRST_STDBY_Pos    (22U)                                     
N#define FLASH_OPTR_nRST_STDBY_Msk    (0x1U << FLASH_OPTR_nRST_STDBY_Pos)       /*!< 0x00400000 */
N#define FLASH_OPTR_nRST_STDBY        FLASH_OPTR_nRST_STDBY_Msk                 /*!< nRST_STDBY */
N#define FLASH_OPTR_USER_Pos          (20U)                                     
N#define FLASH_OPTR_USER_Msk          (0x7U << FLASH_OPTR_USER_Pos)             /*!< 0x00700000 */
N#define FLASH_OPTR_USER              FLASH_OPTR_USER_Msk                       /*!< User Option Bytes */
N#define FLASH_OPTR_BOOT1_Pos         (31U)                                     
N#define FLASH_OPTR_BOOT1_Msk         (0x1U << FLASH_OPTR_BOOT1_Pos)            /*!< 0x80000000 */
N#define FLASH_OPTR_BOOT1             FLASH_OPTR_BOOT1_Msk                      /*!< BOOT1 */
N
N/******************  Bit definition for FLASH_WRPR register  ******************/
N#define FLASH_WRPR_WRP_Pos           (0U)                                      
N#define FLASH_WRPR_WRP_Msk           (0xFFFFU << FLASH_WRPR_WRP_Pos)           /*!< 0x0000FFFF */
N#define FLASH_WRPR_WRP               FLASH_WRPR_WRP_Msk                        /*!< Write Protection bits */
N
N/******************************************************************************/
N/*                                                                            */
N/*                       General Purpose IOs (GPIO)                           */
N/*                                                                            */
N/******************************************************************************/
N/*******************  Bit definition for GPIO_MODER register  *****************/
N#define GPIO_MODER_MODE0_Pos            (0U)                                   
N#define GPIO_MODER_MODE0_Msk            (0x3U << GPIO_MODER_MODE0_Pos)         /*!< 0x00000003 */
N#define GPIO_MODER_MODE0                GPIO_MODER_MODE0_Msk                   
N#define GPIO_MODER_MODE0_0              (0x1U << GPIO_MODER_MODE0_Pos)         /*!< 0x00000001 */
N#define GPIO_MODER_MODE0_1              (0x2U << GPIO_MODER_MODE0_Pos)         /*!< 0x00000002 */
N#define GPIO_MODER_MODE1_Pos            (2U)                                   
N#define GPIO_MODER_MODE1_Msk            (0x3U << GPIO_MODER_MODE1_Pos)         /*!< 0x0000000C */
N#define GPIO_MODER_MODE1                GPIO_MODER_MODE1_Msk                   
N#define GPIO_MODER_MODE1_0              (0x1U << GPIO_MODER_MODE1_Pos)         /*!< 0x00000004 */
N#define GPIO_MODER_MODE1_1              (0x2U << GPIO_MODER_MODE1_Pos)         /*!< 0x00000008 */
N#define GPIO_MODER_MODE2_Pos            (4U)                                   
N#define GPIO_MODER_MODE2_Msk            (0x3U << GPIO_MODER_MODE2_Pos)         /*!< 0x00000030 */
N#define GPIO_MODER_MODE2                GPIO_MODER_MODE2_Msk                   
N#define GPIO_MODER_MODE2_0              (0x1U << GPIO_MODER_MODE2_Pos)         /*!< 0x00000010 */
N#define GPIO_MODER_MODE2_1              (0x2U << GPIO_MODER_MODE2_Pos)         /*!< 0x00000020 */
N#define GPIO_MODER_MODE3_Pos            (6U)                                   
N#define GPIO_MODER_MODE3_Msk            (0x3U << GPIO_MODER_MODE3_Pos)         /*!< 0x000000C0 */
N#define GPIO_MODER_MODE3                GPIO_MODER_MODE3_Msk                   
N#define GPIO_MODER_MODE3_0              (0x1U << GPIO_MODER_MODE3_Pos)         /*!< 0x00000040 */
N#define GPIO_MODER_MODE3_1              (0x2U << GPIO_MODER_MODE3_Pos)         /*!< 0x00000080 */
N#define GPIO_MODER_MODE4_Pos            (8U)                                   
N#define GPIO_MODER_MODE4_Msk            (0x3U << GPIO_MODER_MODE4_Pos)         /*!< 0x00000300 */
N#define GPIO_MODER_MODE4                GPIO_MODER_MODE4_Msk                   
N#define GPIO_MODER_MODE4_0              (0x1U << GPIO_MODER_MODE4_Pos)         /*!< 0x00000100 */
N#define GPIO_MODER_MODE4_1              (0x2U << GPIO_MODER_MODE4_Pos)         /*!< 0x00000200 */
N#define GPIO_MODER_MODE5_Pos            (10U)                                  
N#define GPIO_MODER_MODE5_Msk            (0x3U << GPIO_MODER_MODE5_Pos)         /*!< 0x00000C00 */
N#define GPIO_MODER_MODE5                GPIO_MODER_MODE5_Msk                   
N#define GPIO_MODER_MODE5_0              (0x1U << GPIO_MODER_MODE5_Pos)         /*!< 0x00000400 */
N#define GPIO_MODER_MODE5_1              (0x2U << GPIO_MODER_MODE5_Pos)         /*!< 0x00000800 */
N#define GPIO_MODER_MODE6_Pos            (12U)                                  
N#define GPIO_MODER_MODE6_Msk            (0x3U << GPIO_MODER_MODE6_Pos)         /*!< 0x00003000 */
N#define GPIO_MODER_MODE6                GPIO_MODER_MODE6_Msk                   
N#define GPIO_MODER_MODE6_0              (0x1U << GPIO_MODER_MODE6_Pos)         /*!< 0x00001000 */
N#define GPIO_MODER_MODE6_1              (0x2U << GPIO_MODER_MODE6_Pos)         /*!< 0x00002000 */
N#define GPIO_MODER_MODE7_Pos            (14U)                                  
N#define GPIO_MODER_MODE7_Msk            (0x3U << GPIO_MODER_MODE7_Pos)         /*!< 0x0000C000 */
N#define GPIO_MODER_MODE7                GPIO_MODER_MODE7_Msk                   
N#define GPIO_MODER_MODE7_0              (0x1U << GPIO_MODER_MODE7_Pos)         /*!< 0x00004000 */
N#define GPIO_MODER_MODE7_1              (0x2U << GPIO_MODER_MODE7_Pos)         /*!< 0x00008000 */
N#define GPIO_MODER_MODE8_Pos            (16U)                                  
N#define GPIO_MODER_MODE8_Msk            (0x3U << GPIO_MODER_MODE8_Pos)         /*!< 0x00030000 */
N#define GPIO_MODER_MODE8                GPIO_MODER_MODE8_Msk                   
N#define GPIO_MODER_MODE8_0              (0x1U << GPIO_MODER_MODE8_Pos)         /*!< 0x00010000 */
N#define GPIO_MODER_MODE8_1              (0x2U << GPIO_MODER_MODE8_Pos)         /*!< 0x00020000 */
N#define GPIO_MODER_MODE9_Pos            (18U)                                  
N#define GPIO_MODER_MODE9_Msk            (0x3U << GPIO_MODER_MODE9_Pos)         /*!< 0x000C0000 */
N#define GPIO_MODER_MODE9                GPIO_MODER_MODE9_Msk                   
N#define GPIO_MODER_MODE9_0              (0x1U << GPIO_MODER_MODE9_Pos)         /*!< 0x00040000 */
N#define GPIO_MODER_MODE9_1              (0x2U << GPIO_MODER_MODE9_Pos)         /*!< 0x00080000 */
N#define GPIO_MODER_MODE10_Pos           (20U)                                  
N#define GPIO_MODER_MODE10_Msk           (0x3U << GPIO_MODER_MODE10_Pos)        /*!< 0x00300000 */
N#define GPIO_MODER_MODE10               GPIO_MODER_MODE10_Msk                  
N#define GPIO_MODER_MODE10_0             (0x1U << GPIO_MODER_MODE10_Pos)        /*!< 0x00100000 */
N#define GPIO_MODER_MODE10_1             (0x2U << GPIO_MODER_MODE10_Pos)        /*!< 0x00200000 */
N#define GPIO_MODER_MODE11_Pos           (22U)                                  
N#define GPIO_MODER_MODE11_Msk           (0x3U << GPIO_MODER_MODE11_Pos)        /*!< 0x00C00000 */
N#define GPIO_MODER_MODE11               GPIO_MODER_MODE11_Msk                  
N#define GPIO_MODER_MODE11_0             (0x1U << GPIO_MODER_MODE11_Pos)        /*!< 0x00400000 */
N#define GPIO_MODER_MODE11_1             (0x2U << GPIO_MODER_MODE11_Pos)        /*!< 0x00800000 */
N#define GPIO_MODER_MODE12_Pos           (24U)                                  
N#define GPIO_MODER_MODE12_Msk           (0x3U << GPIO_MODER_MODE12_Pos)        /*!< 0x03000000 */
N#define GPIO_MODER_MODE12               GPIO_MODER_MODE12_Msk                  
N#define GPIO_MODER_MODE12_0             (0x1U << GPIO_MODER_MODE12_Pos)        /*!< 0x01000000 */
N#define GPIO_MODER_MODE12_1             (0x2U << GPIO_MODER_MODE12_Pos)        /*!< 0x02000000 */
N#define GPIO_MODER_MODE13_Pos           (26U)                                  
N#define GPIO_MODER_MODE13_Msk           (0x3U << GPIO_MODER_MODE13_Pos)        /*!< 0x0C000000 */
N#define GPIO_MODER_MODE13               GPIO_MODER_MODE13_Msk                  
N#define GPIO_MODER_MODE13_0             (0x1U << GPIO_MODER_MODE13_Pos)        /*!< 0x04000000 */
N#define GPIO_MODER_MODE13_1             (0x2U << GPIO_MODER_MODE13_Pos)        /*!< 0x08000000 */
N#define GPIO_MODER_MODE14_Pos           (28U)                                  
N#define GPIO_MODER_MODE14_Msk           (0x3U << GPIO_MODER_MODE14_Pos)        /*!< 0x30000000 */
N#define GPIO_MODER_MODE14               GPIO_MODER_MODE14_Msk                  
N#define GPIO_MODER_MODE14_0             (0x1U << GPIO_MODER_MODE14_Pos)        /*!< 0x10000000 */
N#define GPIO_MODER_MODE14_1             (0x2U << GPIO_MODER_MODE14_Pos)        /*!< 0x20000000 */
N#define GPIO_MODER_MODE15_Pos           (30U)                                  
N#define GPIO_MODER_MODE15_Msk           (0x3U << GPIO_MODER_MODE15_Pos)        /*!< 0xC0000000 */
N#define GPIO_MODER_MODE15               GPIO_MODER_MODE15_Msk                  
N#define GPIO_MODER_MODE15_0             (0x1U << GPIO_MODER_MODE15_Pos)        /*!< 0x40000000 */
N#define GPIO_MODER_MODE15_1             (0x2U << GPIO_MODER_MODE15_Pos)        /*!< 0x80000000 */
N
N/******************  Bit definition for GPIO_OTYPER register  *****************/
N#define GPIO_OTYPER_OT_0                (0x00000001U)                          
N#define GPIO_OTYPER_OT_1                (0x00000002U)                          
N#define GPIO_OTYPER_OT_2                (0x00000004U)                          
N#define GPIO_OTYPER_OT_3                (0x00000008U)                          
N#define GPIO_OTYPER_OT_4                (0x00000010U)                          
N#define GPIO_OTYPER_OT_5                (0x00000020U)                          
N#define GPIO_OTYPER_OT_6                (0x00000040U)                          
N#define GPIO_OTYPER_OT_7                (0x00000080U)                          
N#define GPIO_OTYPER_OT_8                (0x00000100U)                          
N#define GPIO_OTYPER_OT_9                (0x00000200U)                          
N#define GPIO_OTYPER_OT_10               (0x00000400U)                          
N#define GPIO_OTYPER_OT_11               (0x00000800U)                          
N#define GPIO_OTYPER_OT_12               (0x00001000U)                          
N#define GPIO_OTYPER_OT_13               (0x00002000U)                          
N#define GPIO_OTYPER_OT_14               (0x00004000U)                          
N#define GPIO_OTYPER_OT_15               (0x00008000U)                          
N
N/****************  Bit definition for GPIO_OSPEEDR register  ******************/
N#define GPIO_OSPEEDER_OSPEED0_Pos       (0U)                                   
N#define GPIO_OSPEEDER_OSPEED0_Msk       (0x3U << GPIO_OSPEEDER_OSPEED0_Pos)    /*!< 0x00000003 */
N#define GPIO_OSPEEDER_OSPEED0           GPIO_OSPEEDER_OSPEED0_Msk              
N#define GPIO_OSPEEDER_OSPEED0_0         (0x1U << GPIO_OSPEEDER_OSPEED0_Pos)    /*!< 0x00000001 */
N#define GPIO_OSPEEDER_OSPEED0_1         (0x2U << GPIO_OSPEEDER_OSPEED0_Pos)    /*!< 0x00000002 */
N#define GPIO_OSPEEDER_OSPEED1_Pos       (2U)                                   
N#define GPIO_OSPEEDER_OSPEED1_Msk       (0x3U << GPIO_OSPEEDER_OSPEED1_Pos)    /*!< 0x0000000C */
N#define GPIO_OSPEEDER_OSPEED1           GPIO_OSPEEDER_OSPEED1_Msk              
N#define GPIO_OSPEEDER_OSPEED1_0         (0x1U << GPIO_OSPEEDER_OSPEED1_Pos)    /*!< 0x00000004 */
N#define GPIO_OSPEEDER_OSPEED1_1         (0x2U << GPIO_OSPEEDER_OSPEED1_Pos)    /*!< 0x00000008 */
N#define GPIO_OSPEEDER_OSPEED2_Pos       (4U)                                   
N#define GPIO_OSPEEDER_OSPEED2_Msk       (0x3U << GPIO_OSPEEDER_OSPEED2_Pos)    /*!< 0x00000030 */
N#define GPIO_OSPEEDER_OSPEED2           GPIO_OSPEEDER_OSPEED2_Msk              
N#define GPIO_OSPEEDER_OSPEED2_0         (0x1U << GPIO_OSPEEDER_OSPEED2_Pos)    /*!< 0x00000010 */
N#define GPIO_OSPEEDER_OSPEED2_1         (0x2U << GPIO_OSPEEDER_OSPEED2_Pos)    /*!< 0x00000020 */
N#define GPIO_OSPEEDER_OSPEED3_Pos       (6U)                                   
N#define GPIO_OSPEEDER_OSPEED3_Msk       (0x3U << GPIO_OSPEEDER_OSPEED3_Pos)    /*!< 0x000000C0 */
N#define GPIO_OSPEEDER_OSPEED3           GPIO_OSPEEDER_OSPEED3_Msk              
N#define GPIO_OSPEEDER_OSPEED3_0         (0x1U << GPIO_OSPEEDER_OSPEED3_Pos)    /*!< 0x00000040 */
N#define GPIO_OSPEEDER_OSPEED3_1         (0x2U << GPIO_OSPEEDER_OSPEED3_Pos)    /*!< 0x00000080 */
N#define GPIO_OSPEEDER_OSPEED4_Pos       (8U)                                   
N#define GPIO_OSPEEDER_OSPEED4_Msk       (0x3U << GPIO_OSPEEDER_OSPEED4_Pos)    /*!< 0x00000300 */
N#define GPIO_OSPEEDER_OSPEED4           GPIO_OSPEEDER_OSPEED4_Msk              
N#define GPIO_OSPEEDER_OSPEED4_0         (0x1U << GPIO_OSPEEDER_OSPEED4_Pos)    /*!< 0x00000100 */
N#define GPIO_OSPEEDER_OSPEED4_1         (0x2U << GPIO_OSPEEDER_OSPEED4_Pos)    /*!< 0x00000200 */
N#define GPIO_OSPEEDER_OSPEED5_Pos       (10U)                                  
N#define GPIO_OSPEEDER_OSPEED5_Msk       (0x3U << GPIO_OSPEEDER_OSPEED5_Pos)    /*!< 0x00000C00 */
N#define GPIO_OSPEEDER_OSPEED5           GPIO_OSPEEDER_OSPEED5_Msk              
N#define GPIO_OSPEEDER_OSPEED5_0         (0x1U << GPIO_OSPEEDER_OSPEED5_Pos)    /*!< 0x00000400 */
N#define GPIO_OSPEEDER_OSPEED5_1         (0x2U << GPIO_OSPEEDER_OSPEED5_Pos)    /*!< 0x00000800 */
N#define GPIO_OSPEEDER_OSPEED6_Pos       (12U)                                  
N#define GPIO_OSPEEDER_OSPEED6_Msk       (0x3U << GPIO_OSPEEDER_OSPEED6_Pos)    /*!< 0x00003000 */
N#define GPIO_OSPEEDER_OSPEED6           GPIO_OSPEEDER_OSPEED6_Msk              
N#define GPIO_OSPEEDER_OSPEED6_0         (0x1U << GPIO_OSPEEDER_OSPEED6_Pos)    /*!< 0x00001000 */
N#define GPIO_OSPEEDER_OSPEED6_1         (0x2U << GPIO_OSPEEDER_OSPEED6_Pos)    /*!< 0x00002000 */
N#define GPIO_OSPEEDER_OSPEED7_Pos       (14U)                                  
N#define GPIO_OSPEEDER_OSPEED7_Msk       (0x3U << GPIO_OSPEEDER_OSPEED7_Pos)    /*!< 0x0000C000 */
N#define GPIO_OSPEEDER_OSPEED7           GPIO_OSPEEDER_OSPEED7_Msk              
N#define GPIO_OSPEEDER_OSPEED7_0         (0x1U << GPIO_OSPEEDER_OSPEED7_Pos)    /*!< 0x00004000 */
N#define GPIO_OSPEEDER_OSPEED7_1         (0x2U << GPIO_OSPEEDER_OSPEED7_Pos)    /*!< 0x00008000 */
N#define GPIO_OSPEEDER_OSPEED8_Pos       (16U)                                  
N#define GPIO_OSPEEDER_OSPEED8_Msk       (0x3U << GPIO_OSPEEDER_OSPEED8_Pos)    /*!< 0x00030000 */
N#define GPIO_OSPEEDER_OSPEED8           GPIO_OSPEEDER_OSPEED8_Msk              
N#define GPIO_OSPEEDER_OSPEED8_0         (0x1U << GPIO_OSPEEDER_OSPEED8_Pos)    /*!< 0x00010000 */
N#define GPIO_OSPEEDER_OSPEED8_1         (0x2U << GPIO_OSPEEDER_OSPEED8_Pos)    /*!< 0x00020000 */
N#define GPIO_OSPEEDER_OSPEED9_Pos       (18U)                                  
N#define GPIO_OSPEEDER_OSPEED9_Msk       (0x3U << GPIO_OSPEEDER_OSPEED9_Pos)    /*!< 0x000C0000 */
N#define GPIO_OSPEEDER_OSPEED9           GPIO_OSPEEDER_OSPEED9_Msk              
N#define GPIO_OSPEEDER_OSPEED9_0         (0x1U << GPIO_OSPEEDER_OSPEED9_Pos)    /*!< 0x00040000 */
N#define GPIO_OSPEEDER_OSPEED9_1         (0x2U << GPIO_OSPEEDER_OSPEED9_Pos)    /*!< 0x00080000 */
N#define GPIO_OSPEEDER_OSPEED10_Pos      (20U)                                  
N#define GPIO_OSPEEDER_OSPEED10_Msk      (0x3U << GPIO_OSPEEDER_OSPEED10_Pos)   /*!< 0x00300000 */
N#define GPIO_OSPEEDER_OSPEED10          GPIO_OSPEEDER_OSPEED10_Msk             
N#define GPIO_OSPEEDER_OSPEED10_0        (0x1U << GPIO_OSPEEDER_OSPEED10_Pos)   /*!< 0x00100000 */
N#define GPIO_OSPEEDER_OSPEED10_1        (0x2U << GPIO_OSPEEDER_OSPEED10_Pos)   /*!< 0x00200000 */
N#define GPIO_OSPEEDER_OSPEED11_Pos      (22U)                                  
N#define GPIO_OSPEEDER_OSPEED11_Msk      (0x3U << GPIO_OSPEEDER_OSPEED11_Pos)   /*!< 0x00C00000 */
N#define GPIO_OSPEEDER_OSPEED11          GPIO_OSPEEDER_OSPEED11_Msk             
N#define GPIO_OSPEEDER_OSPEED11_0        (0x1U << GPIO_OSPEEDER_OSPEED11_Pos)   /*!< 0x00400000 */
N#define GPIO_OSPEEDER_OSPEED11_1        (0x2U << GPIO_OSPEEDER_OSPEED11_Pos)   /*!< 0x00800000 */
N#define GPIO_OSPEEDER_OSPEED12_Pos      (24U)                                  
N#define GPIO_OSPEEDER_OSPEED12_Msk      (0x3U << GPIO_OSPEEDER_OSPEED12_Pos)   /*!< 0x03000000 */
N#define GPIO_OSPEEDER_OSPEED12          GPIO_OSPEEDER_OSPEED12_Msk             
N#define GPIO_OSPEEDER_OSPEED12_0        (0x1U << GPIO_OSPEEDER_OSPEED12_Pos)   /*!< 0x01000000 */
N#define GPIO_OSPEEDER_OSPEED12_1        (0x2U << GPIO_OSPEEDER_OSPEED12_Pos)   /*!< 0x02000000 */
N#define GPIO_OSPEEDER_OSPEED13_Pos      (26U)                                  
N#define GPIO_OSPEEDER_OSPEED13_Msk      (0x3U << GPIO_OSPEEDER_OSPEED13_Pos)   /*!< 0x0C000000 */
N#define GPIO_OSPEEDER_OSPEED13          GPIO_OSPEEDER_OSPEED13_Msk             
N#define GPIO_OSPEEDER_OSPEED13_0        (0x1U << GPIO_OSPEEDER_OSPEED13_Pos)   /*!< 0x04000000 */
N#define GPIO_OSPEEDER_OSPEED13_1        (0x2U << GPIO_OSPEEDER_OSPEED13_Pos)   /*!< 0x08000000 */
N#define GPIO_OSPEEDER_OSPEED14_Pos      (28U)                                  
N#define GPIO_OSPEEDER_OSPEED14_Msk      (0x3U << GPIO_OSPEEDER_OSPEED14_Pos)   /*!< 0x30000000 */
N#define GPIO_OSPEEDER_OSPEED14          GPIO_OSPEEDER_OSPEED14_Msk             
N#define GPIO_OSPEEDER_OSPEED14_0        (0x1U << GPIO_OSPEEDER_OSPEED14_Pos)   /*!< 0x10000000 */
N#define GPIO_OSPEEDER_OSPEED14_1        (0x2U << GPIO_OSPEEDER_OSPEED14_Pos)   /*!< 0x20000000 */
N#define GPIO_OSPEEDER_OSPEED15_Pos      (30U)                                  
N#define GPIO_OSPEEDER_OSPEED15_Msk      (0x3U << GPIO_OSPEEDER_OSPEED15_Pos)   /*!< 0xC0000000 */
N#define GPIO_OSPEEDER_OSPEED15          GPIO_OSPEEDER_OSPEED15_Msk             
N#define GPIO_OSPEEDER_OSPEED15_0        (0x1U << GPIO_OSPEEDER_OSPEED15_Pos)   /*!< 0x40000000 */
N#define GPIO_OSPEEDER_OSPEED15_1        (0x2U << GPIO_OSPEEDER_OSPEED15_Pos)   /*!< 0x80000000 */
N
N/*******************  Bit definition for GPIO_PUPDR register ******************/
N#define GPIO_PUPDR_PUPD0_Pos            (0U)                                   
N#define GPIO_PUPDR_PUPD0_Msk            (0x3U << GPIO_PUPDR_PUPD0_Pos)         /*!< 0x00000003 */
N#define GPIO_PUPDR_PUPD0                GPIO_PUPDR_PUPD0_Msk                   
N#define GPIO_PUPDR_PUPD0_0              (0x1U << GPIO_PUPDR_PUPD0_Pos)         /*!< 0x00000001 */
N#define GPIO_PUPDR_PUPD0_1              (0x2U << GPIO_PUPDR_PUPD0_Pos)         /*!< 0x00000002 */
N#define GPIO_PUPDR_PUPD1_Pos            (2U)                                   
N#define GPIO_PUPDR_PUPD1_Msk            (0x3U << GPIO_PUPDR_PUPD1_Pos)         /*!< 0x0000000C */
N#define GPIO_PUPDR_PUPD1                GPIO_PUPDR_PUPD1_Msk                   
N#define GPIO_PUPDR_PUPD1_0              (0x1U << GPIO_PUPDR_PUPD1_Pos)         /*!< 0x00000004 */
N#define GPIO_PUPDR_PUPD1_1              (0x2U << GPIO_PUPDR_PUPD1_Pos)         /*!< 0x00000008 */
N#define GPIO_PUPDR_PUPD2_Pos            (4U)                                   
N#define GPIO_PUPDR_PUPD2_Msk            (0x3U << GPIO_PUPDR_PUPD2_Pos)         /*!< 0x00000030 */
N#define GPIO_PUPDR_PUPD2                GPIO_PUPDR_PUPD2_Msk                   
N#define GPIO_PUPDR_PUPD2_0              (0x1U << GPIO_PUPDR_PUPD2_Pos)         /*!< 0x00000010 */
N#define GPIO_PUPDR_PUPD2_1              (0x2U << GPIO_PUPDR_PUPD2_Pos)         /*!< 0x00000020 */
N#define GPIO_PUPDR_PUPD3_Pos            (6U)                                   
N#define GPIO_PUPDR_PUPD3_Msk            (0x3U << GPIO_PUPDR_PUPD3_Pos)         /*!< 0x000000C0 */
N#define GPIO_PUPDR_PUPD3                GPIO_PUPDR_PUPD3_Msk                   
N#define GPIO_PUPDR_PUPD3_0              (0x1U << GPIO_PUPDR_PUPD3_Pos)         /*!< 0x00000040 */
N#define GPIO_PUPDR_PUPD3_1              (0x2U << GPIO_PUPDR_PUPD3_Pos)         /*!< 0x00000080 */
N#define GPIO_PUPDR_PUPD4_Pos            (8U)                                   
N#define GPIO_PUPDR_PUPD4_Msk            (0x3U << GPIO_PUPDR_PUPD4_Pos)         /*!< 0x00000300 */
N#define GPIO_PUPDR_PUPD4                GPIO_PUPDR_PUPD4_Msk                   
N#define GPIO_PUPDR_PUPD4_0              (0x1U << GPIO_PUPDR_PUPD4_Pos)         /*!< 0x00000100 */
N#define GPIO_PUPDR_PUPD4_1              (0x2U << GPIO_PUPDR_PUPD4_Pos)         /*!< 0x00000200 */
N#define GPIO_PUPDR_PUPD5_Pos            (10U)                                  
N#define GPIO_PUPDR_PUPD5_Msk            (0x3U << GPIO_PUPDR_PUPD5_Pos)         /*!< 0x00000C00 */
N#define GPIO_PUPDR_PUPD5                GPIO_PUPDR_PUPD5_Msk                   
N#define GPIO_PUPDR_PUPD5_0              (0x1U << GPIO_PUPDR_PUPD5_Pos)         /*!< 0x00000400 */
N#define GPIO_PUPDR_PUPD5_1              (0x2U << GPIO_PUPDR_PUPD5_Pos)         /*!< 0x00000800 */
N#define GPIO_PUPDR_PUPD6_Pos            (12U)                                  
N#define GPIO_PUPDR_PUPD6_Msk            (0x3U << GPIO_PUPDR_PUPD6_Pos)         /*!< 0x00003000 */
N#define GPIO_PUPDR_PUPD6                GPIO_PUPDR_PUPD6_Msk                   
N#define GPIO_PUPDR_PUPD6_0              (0x1U << GPIO_PUPDR_PUPD6_Pos)         /*!< 0x00001000 */
N#define GPIO_PUPDR_PUPD6_1              (0x2U << GPIO_PUPDR_PUPD6_Pos)         /*!< 0x00002000 */
N#define GPIO_PUPDR_PUPD7_Pos            (14U)                                  
N#define GPIO_PUPDR_PUPD7_Msk            (0x3U << GPIO_PUPDR_PUPD7_Pos)         /*!< 0x0000C000 */
N#define GPIO_PUPDR_PUPD7                GPIO_PUPDR_PUPD7_Msk                   
N#define GPIO_PUPDR_PUPD7_0              (0x1U << GPIO_PUPDR_PUPD7_Pos)         /*!< 0x00004000 */
N#define GPIO_PUPDR_PUPD7_1              (0x2U << GPIO_PUPDR_PUPD7_Pos)         /*!< 0x00008000 */
N#define GPIO_PUPDR_PUPD8_Pos            (16U)                                  
N#define GPIO_PUPDR_PUPD8_Msk            (0x3U << GPIO_PUPDR_PUPD8_Pos)         /*!< 0x00030000 */
N#define GPIO_PUPDR_PUPD8                GPIO_PUPDR_PUPD8_Msk                   
N#define GPIO_PUPDR_PUPD8_0              (0x1U << GPIO_PUPDR_PUPD8_Pos)         /*!< 0x00010000 */
N#define GPIO_PUPDR_PUPD8_1              (0x2U << GPIO_PUPDR_PUPD8_Pos)         /*!< 0x00020000 */
N#define GPIO_PUPDR_PUPD9_Pos            (18U)                                  
N#define GPIO_PUPDR_PUPD9_Msk            (0x3U << GPIO_PUPDR_PUPD9_Pos)         /*!< 0x000C0000 */
N#define GPIO_PUPDR_PUPD9                GPIO_PUPDR_PUPD9_Msk                   
N#define GPIO_PUPDR_PUPD9_0              (0x1U << GPIO_PUPDR_PUPD9_Pos)         /*!< 0x00040000 */
N#define GPIO_PUPDR_PUPD9_1              (0x2U << GPIO_PUPDR_PUPD9_Pos)         /*!< 0x00080000 */
N#define GPIO_PUPDR_PUPD10_Pos           (20U)                                  
N#define GPIO_PUPDR_PUPD10_Msk           (0x3U << GPIO_PUPDR_PUPD10_Pos)        /*!< 0x00300000 */
N#define GPIO_PUPDR_PUPD10               GPIO_PUPDR_PUPD10_Msk                  
N#define GPIO_PUPDR_PUPD10_0             (0x1U << GPIO_PUPDR_PUPD10_Pos)        /*!< 0x00100000 */
N#define GPIO_PUPDR_PUPD10_1             (0x2U << GPIO_PUPDR_PUPD10_Pos)        /*!< 0x00200000 */
N#define GPIO_PUPDR_PUPD11_Pos           (22U)                                  
N#define GPIO_PUPDR_PUPD11_Msk           (0x3U << GPIO_PUPDR_PUPD11_Pos)        /*!< 0x00C00000 */
N#define GPIO_PUPDR_PUPD11               GPIO_PUPDR_PUPD11_Msk                  
N#define GPIO_PUPDR_PUPD11_0             (0x1U << GPIO_PUPDR_PUPD11_Pos)        /*!< 0x00400000 */
N#define GPIO_PUPDR_PUPD11_1             (0x2U << GPIO_PUPDR_PUPD11_Pos)        /*!< 0x00800000 */
N#define GPIO_PUPDR_PUPD12_Pos           (24U)                                  
N#define GPIO_PUPDR_PUPD12_Msk           (0x3U << GPIO_PUPDR_PUPD12_Pos)        /*!< 0x03000000 */
N#define GPIO_PUPDR_PUPD12               GPIO_PUPDR_PUPD12_Msk                  
N#define GPIO_PUPDR_PUPD12_0             (0x1U << GPIO_PUPDR_PUPD12_Pos)        /*!< 0x01000000 */
N#define GPIO_PUPDR_PUPD12_1             (0x2U << GPIO_PUPDR_PUPD12_Pos)        /*!< 0x02000000 */
N#define GPIO_PUPDR_PUPD13_Pos           (26U)                                  
N#define GPIO_PUPDR_PUPD13_Msk           (0x3U << GPIO_PUPDR_PUPD13_Pos)        /*!< 0x0C000000 */
N#define GPIO_PUPDR_PUPD13               GPIO_PUPDR_PUPD13_Msk                  
N#define GPIO_PUPDR_PUPD13_0             (0x1U << GPIO_PUPDR_PUPD13_Pos)        /*!< 0x04000000 */
N#define GPIO_PUPDR_PUPD13_1             (0x2U << GPIO_PUPDR_PUPD13_Pos)        /*!< 0x08000000 */
N#define GPIO_PUPDR_PUPD14_Pos           (28U)                                  
N#define GPIO_PUPDR_PUPD14_Msk           (0x3U << GPIO_PUPDR_PUPD14_Pos)        /*!< 0x30000000 */
N#define GPIO_PUPDR_PUPD14               GPIO_PUPDR_PUPD14_Msk                  
N#define GPIO_PUPDR_PUPD14_0             (0x1U << GPIO_PUPDR_PUPD14_Pos)        /*!< 0x10000000 */
N#define GPIO_PUPDR_PUPD14_1             (0x2U << GPIO_PUPDR_PUPD14_Pos)        /*!< 0x20000000 */
N#define GPIO_PUPDR_PUPD15_Pos           (30U)                                  
N#define GPIO_PUPDR_PUPD15_Msk           (0x3U << GPIO_PUPDR_PUPD15_Pos)        /*!< 0xC0000000 */
N#define GPIO_PUPDR_PUPD15               GPIO_PUPDR_PUPD15_Msk                  
N#define GPIO_PUPDR_PUPD15_0             (0x1U << GPIO_PUPDR_PUPD15_Pos)        /*!< 0x40000000 */
N#define GPIO_PUPDR_PUPD15_1             (0x2U << GPIO_PUPDR_PUPD15_Pos)        /*!< 0x80000000 */
N
N/*******************  Bit definition for GPIO_IDR register  *******************/
N#define GPIO_IDR_ID0_Pos                (0U)                                   
N#define GPIO_IDR_ID0_Msk                (0x1U << GPIO_IDR_ID0_Pos)             /*!< 0x00000001 */
N#define GPIO_IDR_ID0                    GPIO_IDR_ID0_Msk                       
N#define GPIO_IDR_ID1_Pos                (1U)                                   
N#define GPIO_IDR_ID1_Msk                (0x1U << GPIO_IDR_ID1_Pos)             /*!< 0x00000002 */
N#define GPIO_IDR_ID1                    GPIO_IDR_ID1_Msk                       
N#define GPIO_IDR_ID2_Pos                (2U)                                   
N#define GPIO_IDR_ID2_Msk                (0x1U << GPIO_IDR_ID2_Pos)             /*!< 0x00000004 */
N#define GPIO_IDR_ID2                    GPIO_IDR_ID2_Msk                       
N#define GPIO_IDR_ID3_Pos                (3U)                                   
N#define GPIO_IDR_ID3_Msk                (0x1U << GPIO_IDR_ID3_Pos)             /*!< 0x00000008 */
N#define GPIO_IDR_ID3                    GPIO_IDR_ID3_Msk                       
N#define GPIO_IDR_ID4_Pos                (4U)                                   
N#define GPIO_IDR_ID4_Msk                (0x1U << GPIO_IDR_ID4_Pos)             /*!< 0x00000010 */
N#define GPIO_IDR_ID4                    GPIO_IDR_ID4_Msk                       
N#define GPIO_IDR_ID5_Pos                (5U)                                   
N#define GPIO_IDR_ID5_Msk                (0x1U << GPIO_IDR_ID5_Pos)             /*!< 0x00000020 */
N#define GPIO_IDR_ID5                    GPIO_IDR_ID5_Msk                       
N#define GPIO_IDR_ID6_Pos                (6U)                                   
N#define GPIO_IDR_ID6_Msk                (0x1U << GPIO_IDR_ID6_Pos)             /*!< 0x00000040 */
N#define GPIO_IDR_ID6                    GPIO_IDR_ID6_Msk                       
N#define GPIO_IDR_ID7_Pos                (7U)                                   
N#define GPIO_IDR_ID7_Msk                (0x1U << GPIO_IDR_ID7_Pos)             /*!< 0x00000080 */
N#define GPIO_IDR_ID7                    GPIO_IDR_ID7_Msk                       
N#define GPIO_IDR_ID8_Pos                (8U)                                   
N#define GPIO_IDR_ID8_Msk                (0x1U << GPIO_IDR_ID8_Pos)             /*!< 0x00000100 */
N#define GPIO_IDR_ID8                    GPIO_IDR_ID8_Msk                       
N#define GPIO_IDR_ID9_Pos                (9U)                                   
N#define GPIO_IDR_ID9_Msk                (0x1U << GPIO_IDR_ID9_Pos)             /*!< 0x00000200 */
N#define GPIO_IDR_ID9                    GPIO_IDR_ID9_Msk                       
N#define GPIO_IDR_ID10_Pos               (10U)                                  
N#define GPIO_IDR_ID10_Msk               (0x1U << GPIO_IDR_ID10_Pos)            /*!< 0x00000400 */
N#define GPIO_IDR_ID10                   GPIO_IDR_ID10_Msk                      
N#define GPIO_IDR_ID11_Pos               (11U)                                  
N#define GPIO_IDR_ID11_Msk               (0x1U << GPIO_IDR_ID11_Pos)            /*!< 0x00000800 */
N#define GPIO_IDR_ID11                   GPIO_IDR_ID11_Msk                      
N#define GPIO_IDR_ID12_Pos               (12U)                                  
N#define GPIO_IDR_ID12_Msk               (0x1U << GPIO_IDR_ID12_Pos)            /*!< 0x00001000 */
N#define GPIO_IDR_ID12                   GPIO_IDR_ID12_Msk                      
N#define GPIO_IDR_ID13_Pos               (13U)                                  
N#define GPIO_IDR_ID13_Msk               (0x1U << GPIO_IDR_ID13_Pos)            /*!< 0x00002000 */
N#define GPIO_IDR_ID13                   GPIO_IDR_ID13_Msk                      
N#define GPIO_IDR_ID14_Pos               (14U)                                  
N#define GPIO_IDR_ID14_Msk               (0x1U << GPIO_IDR_ID14_Pos)            /*!< 0x00004000 */
N#define GPIO_IDR_ID14                   GPIO_IDR_ID14_Msk                      
N#define GPIO_IDR_ID15_Pos               (15U)                                  
N#define GPIO_IDR_ID15_Msk               (0x1U << GPIO_IDR_ID15_Pos)            /*!< 0x00008000 */
N#define GPIO_IDR_ID15                   GPIO_IDR_ID15_Msk                      
N
N/******************  Bit definition for GPIO_ODR register  ********************/
N#define GPIO_ODR_OD0_Pos                (0U)                                   
N#define GPIO_ODR_OD0_Msk                (0x1U << GPIO_ODR_OD0_Pos)             /*!< 0x00000001 */
N#define GPIO_ODR_OD0                    GPIO_ODR_OD0_Msk                       
N#define GPIO_ODR_OD1_Pos                (1U)                                   
N#define GPIO_ODR_OD1_Msk                (0x1U << GPIO_ODR_OD1_Pos)             /*!< 0x00000002 */
N#define GPIO_ODR_OD1                    GPIO_ODR_OD1_Msk                       
N#define GPIO_ODR_OD2_Pos                (2U)                                   
N#define GPIO_ODR_OD2_Msk                (0x1U << GPIO_ODR_OD2_Pos)             /*!< 0x00000004 */
N#define GPIO_ODR_OD2                    GPIO_ODR_OD2_Msk                       
N#define GPIO_ODR_OD3_Pos                (3U)                                   
N#define GPIO_ODR_OD3_Msk                (0x1U << GPIO_ODR_OD3_Pos)             /*!< 0x00000008 */
N#define GPIO_ODR_OD3                    GPIO_ODR_OD3_Msk                       
N#define GPIO_ODR_OD4_Pos                (4U)                                   
N#define GPIO_ODR_OD4_Msk                (0x1U << GPIO_ODR_OD4_Pos)             /*!< 0x00000010 */
N#define GPIO_ODR_OD4                    GPIO_ODR_OD4_Msk                       
N#define GPIO_ODR_OD5_Pos                (5U)                                   
N#define GPIO_ODR_OD5_Msk                (0x1U << GPIO_ODR_OD5_Pos)             /*!< 0x00000020 */
N#define GPIO_ODR_OD5                    GPIO_ODR_OD5_Msk                       
N#define GPIO_ODR_OD6_Pos                (6U)                                   
N#define GPIO_ODR_OD6_Msk                (0x1U << GPIO_ODR_OD6_Pos)             /*!< 0x00000040 */
N#define GPIO_ODR_OD6                    GPIO_ODR_OD6_Msk                       
N#define GPIO_ODR_OD7_Pos                (7U)                                   
N#define GPIO_ODR_OD7_Msk                (0x1U << GPIO_ODR_OD7_Pos)             /*!< 0x00000080 */
N#define GPIO_ODR_OD7                    GPIO_ODR_OD7_Msk                       
N#define GPIO_ODR_OD8_Pos                (8U)                                   
N#define GPIO_ODR_OD8_Msk                (0x1U << GPIO_ODR_OD8_Pos)             /*!< 0x00000100 */
N#define GPIO_ODR_OD8                    GPIO_ODR_OD8_Msk                       
N#define GPIO_ODR_OD9_Pos                (9U)                                   
N#define GPIO_ODR_OD9_Msk                (0x1U << GPIO_ODR_OD9_Pos)             /*!< 0x00000200 */
N#define GPIO_ODR_OD9                    GPIO_ODR_OD9_Msk                       
N#define GPIO_ODR_OD10_Pos               (10U)                                  
N#define GPIO_ODR_OD10_Msk               (0x1U << GPIO_ODR_OD10_Pos)            /*!< 0x00000400 */
N#define GPIO_ODR_OD10                   GPIO_ODR_OD10_Msk                      
N#define GPIO_ODR_OD11_Pos               (11U)                                  
N#define GPIO_ODR_OD11_Msk               (0x1U << GPIO_ODR_OD11_Pos)            /*!< 0x00000800 */
N#define GPIO_ODR_OD11                   GPIO_ODR_OD11_Msk                      
N#define GPIO_ODR_OD12_Pos               (12U)                                  
N#define GPIO_ODR_OD12_Msk               (0x1U << GPIO_ODR_OD12_Pos)            /*!< 0x00001000 */
N#define GPIO_ODR_OD12                   GPIO_ODR_OD12_Msk                      
N#define GPIO_ODR_OD13_Pos               (13U)                                  
N#define GPIO_ODR_OD13_Msk               (0x1U << GPIO_ODR_OD13_Pos)            /*!< 0x00002000 */
N#define GPIO_ODR_OD13                   GPIO_ODR_OD13_Msk                      
N#define GPIO_ODR_OD14_Pos               (14U)                                  
N#define GPIO_ODR_OD14_Msk               (0x1U << GPIO_ODR_OD14_Pos)            /*!< 0x00004000 */
N#define GPIO_ODR_OD14                   GPIO_ODR_OD14_Msk                      
N#define GPIO_ODR_OD15_Pos               (15U)                                  
N#define GPIO_ODR_OD15_Msk               (0x1U << GPIO_ODR_OD15_Pos)            /*!< 0x00008000 */
N#define GPIO_ODR_OD15                   GPIO_ODR_OD15_Msk                      
N
N/****************** Bit definition for GPIO_BSRR register  ********************/
N#define GPIO_BSRR_BS_0                  (0x00000001U)                          
N#define GPIO_BSRR_BS_1                  (0x00000002U)                          
N#define GPIO_BSRR_BS_2                  (0x00000004U)                          
N#define GPIO_BSRR_BS_3                  (0x00000008U)                          
N#define GPIO_BSRR_BS_4                  (0x00000010U)                          
N#define GPIO_BSRR_BS_5                  (0x00000020U)                          
N#define GPIO_BSRR_BS_6                  (0x00000040U)                          
N#define GPIO_BSRR_BS_7                  (0x00000080U)                          
N#define GPIO_BSRR_BS_8                  (0x00000100U)                          
N#define GPIO_BSRR_BS_9                  (0x00000200U)                          
N#define GPIO_BSRR_BS_10                 (0x00000400U)                          
N#define GPIO_BSRR_BS_11                 (0x00000800U)                          
N#define GPIO_BSRR_BS_12                 (0x00001000U)                          
N#define GPIO_BSRR_BS_13                 (0x00002000U)                          
N#define GPIO_BSRR_BS_14                 (0x00004000U)                          
N#define GPIO_BSRR_BS_15                 (0x00008000U)                          
N#define GPIO_BSRR_BR_0                  (0x00010000U)                          
N#define GPIO_BSRR_BR_1                  (0x00020000U)                          
N#define GPIO_BSRR_BR_2                  (0x00040000U)                          
N#define GPIO_BSRR_BR_3                  (0x00080000U)                          
N#define GPIO_BSRR_BR_4                  (0x00100000U)                          
N#define GPIO_BSRR_BR_5                  (0x00200000U)                          
N#define GPIO_BSRR_BR_6                  (0x00400000U)                          
N#define GPIO_BSRR_BR_7                  (0x00800000U)                          
N#define GPIO_BSRR_BR_8                  (0x01000000U)                          
N#define GPIO_BSRR_BR_9                  (0x02000000U)                          
N#define GPIO_BSRR_BR_10                 (0x04000000U)                          
N#define GPIO_BSRR_BR_11                 (0x08000000U)                          
N#define GPIO_BSRR_BR_12                 (0x10000000U)                          
N#define GPIO_BSRR_BR_13                 (0x20000000U)                          
N#define GPIO_BSRR_BR_14                 (0x40000000U)                          
N#define GPIO_BSRR_BR_15                 (0x80000000U)                          
N
N/****************** Bit definition for GPIO_LCKR register  ********************/
N#define GPIO_LCKR_LCK0_Pos              (0U)                                   
N#define GPIO_LCKR_LCK0_Msk              (0x1U << GPIO_LCKR_LCK0_Pos)           /*!< 0x00000001 */
N#define GPIO_LCKR_LCK0                  GPIO_LCKR_LCK0_Msk                     
N#define GPIO_LCKR_LCK1_Pos              (1U)                                   
N#define GPIO_LCKR_LCK1_Msk              (0x1U << GPIO_LCKR_LCK1_Pos)           /*!< 0x00000002 */
N#define GPIO_LCKR_LCK1                  GPIO_LCKR_LCK1_Msk                     
N#define GPIO_LCKR_LCK2_Pos              (2U)                                   
N#define GPIO_LCKR_LCK2_Msk              (0x1U << GPIO_LCKR_LCK2_Pos)           /*!< 0x00000004 */
N#define GPIO_LCKR_LCK2                  GPIO_LCKR_LCK2_Msk                     
N#define GPIO_LCKR_LCK3_Pos              (3U)                                   
N#define GPIO_LCKR_LCK3_Msk              (0x1U << GPIO_LCKR_LCK3_Pos)           /*!< 0x00000008 */
N#define GPIO_LCKR_LCK3                  GPIO_LCKR_LCK3_Msk                     
N#define GPIO_LCKR_LCK4_Pos              (4U)                                   
N#define GPIO_LCKR_LCK4_Msk              (0x1U << GPIO_LCKR_LCK4_Pos)           /*!< 0x00000010 */
N#define GPIO_LCKR_LCK4                  GPIO_LCKR_LCK4_Msk                     
N#define GPIO_LCKR_LCK5_Pos              (5U)                                   
N#define GPIO_LCKR_LCK5_Msk              (0x1U << GPIO_LCKR_LCK5_Pos)           /*!< 0x00000020 */
N#define GPIO_LCKR_LCK5                  GPIO_LCKR_LCK5_Msk                     
N#define GPIO_LCKR_LCK6_Pos              (6U)                                   
N#define GPIO_LCKR_LCK6_Msk              (0x1U << GPIO_LCKR_LCK6_Pos)           /*!< 0x00000040 */
N#define GPIO_LCKR_LCK6                  GPIO_LCKR_LCK6_Msk                     
N#define GPIO_LCKR_LCK7_Pos              (7U)                                   
N#define GPIO_LCKR_LCK7_Msk              (0x1U << GPIO_LCKR_LCK7_Pos)           /*!< 0x00000080 */
N#define GPIO_LCKR_LCK7                  GPIO_LCKR_LCK7_Msk                     
N#define GPIO_LCKR_LCK8_Pos              (8U)                                   
N#define GPIO_LCKR_LCK8_Msk              (0x1U << GPIO_LCKR_LCK8_Pos)           /*!< 0x00000100 */
N#define GPIO_LCKR_LCK8                  GPIO_LCKR_LCK8_Msk                     
N#define GPIO_LCKR_LCK9_Pos              (9U)                                   
N#define GPIO_LCKR_LCK9_Msk              (0x1U << GPIO_LCKR_LCK9_Pos)           /*!< 0x00000200 */
N#define GPIO_LCKR_LCK9                  GPIO_LCKR_LCK9_Msk                     
N#define GPIO_LCKR_LCK10_Pos             (10U)                                  
N#define GPIO_LCKR_LCK10_Msk             (0x1U << GPIO_LCKR_LCK10_Pos)          /*!< 0x00000400 */
N#define GPIO_LCKR_LCK10                 GPIO_LCKR_LCK10_Msk                    
N#define GPIO_LCKR_LCK11_Pos             (11U)                                  
N#define GPIO_LCKR_LCK11_Msk             (0x1U << GPIO_LCKR_LCK11_Pos)          /*!< 0x00000800 */
N#define GPIO_LCKR_LCK11                 GPIO_LCKR_LCK11_Msk                    
N#define GPIO_LCKR_LCK12_Pos             (12U)                                  
N#define GPIO_LCKR_LCK12_Msk             (0x1U << GPIO_LCKR_LCK12_Pos)          /*!< 0x00001000 */
N#define GPIO_LCKR_LCK12                 GPIO_LCKR_LCK12_Msk                    
N#define GPIO_LCKR_LCK13_Pos             (13U)                                  
N#define GPIO_LCKR_LCK13_Msk             (0x1U << GPIO_LCKR_LCK13_Pos)          /*!< 0x00002000 */
N#define GPIO_LCKR_LCK13                 GPIO_LCKR_LCK13_Msk                    
N#define GPIO_LCKR_LCK14_Pos             (14U)                                  
N#define GPIO_LCKR_LCK14_Msk             (0x1U << GPIO_LCKR_LCK14_Pos)          /*!< 0x00004000 */
N#define GPIO_LCKR_LCK14                 GPIO_LCKR_LCK14_Msk                    
N#define GPIO_LCKR_LCK15_Pos             (15U)                                  
N#define GPIO_LCKR_LCK15_Msk             (0x1U << GPIO_LCKR_LCK15_Pos)          /*!< 0x00008000 */
N#define GPIO_LCKR_LCK15                 GPIO_LCKR_LCK15_Msk                    
N#define GPIO_LCKR_LCKK_Pos              (16U)                                  
N#define GPIO_LCKR_LCKK_Msk              (0x1U << GPIO_LCKR_LCKK_Pos)           /*!< 0x00010000 */
N#define GPIO_LCKR_LCKK                  GPIO_LCKR_LCKK_Msk                     
N
N/****************** Bit definition for GPIO_AFRL register ********************/
N#define GPIO_AFRL_AFRL0_Pos             (0U)                                   
N#define GPIO_AFRL_AFRL0_Msk             (0xFU << GPIO_AFRL_AFRL0_Pos)          /*!< 0x0000000F */
N#define GPIO_AFRL_AFRL0                 GPIO_AFRL_AFRL0_Msk                    
N#define GPIO_AFRL_AFRL1_Pos             (4U)                                   
N#define GPIO_AFRL_AFRL1_Msk             (0xFU << GPIO_AFRL_AFRL1_Pos)          /*!< 0x000000F0 */
N#define GPIO_AFRL_AFRL1                 GPIO_AFRL_AFRL1_Msk                    
N#define GPIO_AFRL_AFRL2_Pos             (8U)                                   
N#define GPIO_AFRL_AFRL2_Msk             (0xFU << GPIO_AFRL_AFRL2_Pos)          /*!< 0x00000F00 */
N#define GPIO_AFRL_AFRL2                 GPIO_AFRL_AFRL2_Msk                    
N#define GPIO_AFRL_AFRL3_Pos             (12U)                                  
N#define GPIO_AFRL_AFRL3_Msk             (0xFU << GPIO_AFRL_AFRL3_Pos)          /*!< 0x0000F000 */
N#define GPIO_AFRL_AFRL3                 GPIO_AFRL_AFRL3_Msk                    
N#define GPIO_AFRL_AFRL4_Pos             (16U)                                  
N#define GPIO_AFRL_AFRL4_Msk             (0xFU << GPIO_AFRL_AFRL4_Pos)          /*!< 0x000F0000 */
N#define GPIO_AFRL_AFRL4                 GPIO_AFRL_AFRL4_Msk                    
N#define GPIO_AFRL_AFRL5_Pos             (20U)                                  
N#define GPIO_AFRL_AFRL5_Msk             (0xFU << GPIO_AFRL_AFRL5_Pos)          /*!< 0x00F00000 */
N#define GPIO_AFRL_AFRL5                 GPIO_AFRL_AFRL5_Msk                    
N#define GPIO_AFRL_AFRL6_Pos             (24U)                                  
N#define GPIO_AFRL_AFRL6_Msk             (0xFU << GPIO_AFRL_AFRL6_Pos)          /*!< 0x0F000000 */
N#define GPIO_AFRL_AFRL6                 GPIO_AFRL_AFRL6_Msk                    
N#define GPIO_AFRL_AFRL7_Pos             (28U)                                  
N#define GPIO_AFRL_AFRL7_Msk             (0xFU << GPIO_AFRL_AFRL7_Pos)          /*!< 0xF0000000 */
N#define GPIO_AFRL_AFRL7                 GPIO_AFRL_AFRL7_Msk                    
N
N/****************** Bit definition for GPIO_AFRH register ********************/
N#define GPIO_AFRH_AFRH0_Pos             (0U)                                   
N#define GPIO_AFRH_AFRH0_Msk             (0xFU << GPIO_AFRH_AFRH0_Pos)          /*!< 0x0000000F */
N#define GPIO_AFRH_AFRH0                 GPIO_AFRH_AFRH0_Msk                    
N#define GPIO_AFRH_AFRH1_Pos             (4U)                                   
N#define GPIO_AFRH_AFRH1_Msk             (0xFU << GPIO_AFRH_AFRH1_Pos)          /*!< 0x000000F0 */
N#define GPIO_AFRH_AFRH1                 GPIO_AFRH_AFRH1_Msk                    
N#define GPIO_AFRH_AFRH2_Pos             (8U)                                   
N#define GPIO_AFRH_AFRH2_Msk             (0xFU << GPIO_AFRH_AFRH2_Pos)          /*!< 0x00000F00 */
N#define GPIO_AFRH_AFRH2                 GPIO_AFRH_AFRH2_Msk                    
N#define GPIO_AFRH_AFRH3_Pos             (12U)                                  
N#define GPIO_AFRH_AFRH3_Msk             (0xFU << GPIO_AFRH_AFRH3_Pos)          /*!< 0x0000F000 */
N#define GPIO_AFRH_AFRH3                 GPIO_AFRH_AFRH3_Msk                    
N#define GPIO_AFRH_AFRH4_Pos             (16U)                                  
N#define GPIO_AFRH_AFRH4_Msk             (0xFU << GPIO_AFRH_AFRH4_Pos)          /*!< 0x000F0000 */
N#define GPIO_AFRH_AFRH4                 GPIO_AFRH_AFRH4_Msk                    
N#define GPIO_AFRH_AFRH5_Pos             (20U)                                  
N#define GPIO_AFRH_AFRH5_Msk             (0xFU << GPIO_AFRH_AFRH5_Pos)          /*!< 0x00F00000 */
N#define GPIO_AFRH_AFRH5                 GPIO_AFRH_AFRH5_Msk                    
N#define GPIO_AFRH_AFRH6_Pos             (24U)                                  
N#define GPIO_AFRH_AFRH6_Msk             (0xFU << GPIO_AFRH_AFRH6_Pos)          /*!< 0x0F000000 */
N#define GPIO_AFRH_AFRH6                 GPIO_AFRH_AFRH6_Msk                    
N#define GPIO_AFRH_AFRH7_Pos             (28U)                                  
N#define GPIO_AFRH_AFRH7_Msk             (0xFU << GPIO_AFRH_AFRH7_Pos)          /*!< 0xF0000000 */
N#define GPIO_AFRH_AFRH7                 GPIO_AFRH_AFRH7_Msk                    
N
N/****************** Bit definition for GPIO_BRR register  *********************/
N#define GPIO_BRR_BR_0                   (0x00000001U)                          
N#define GPIO_BRR_BR_1                   (0x00000002U)                          
N#define GPIO_BRR_BR_2                   (0x00000004U)                          
N#define GPIO_BRR_BR_3                   (0x00000008U)                          
N#define GPIO_BRR_BR_4                   (0x00000010U)                          
N#define GPIO_BRR_BR_5                   (0x00000020U)                          
N#define GPIO_BRR_BR_6                   (0x00000040U)                          
N#define GPIO_BRR_BR_7                   (0x00000080U)                          
N#define GPIO_BRR_BR_8                   (0x00000100U)                          
N#define GPIO_BRR_BR_9                   (0x00000200U)                          
N#define GPIO_BRR_BR_10                  (0x00000400U)                          
N#define GPIO_BRR_BR_11                  (0x00000800U)                          
N#define GPIO_BRR_BR_12                  (0x00001000U)                          
N#define GPIO_BRR_BR_13                  (0x00002000U)                          
N#define GPIO_BRR_BR_14                  (0x00004000U)                          
N#define GPIO_BRR_BR_15                  (0x00008000U)                          
N
N/******************************************************************************/
N/*                                                                            */
N/*                   Inter-integrated Circuit Interface (I2C)                 */
N/*                                                                            */
N/******************************************************************************/
N
N/*******************  Bit definition for I2C_CR1 register  *******************/
N#define I2C_CR1_PE_Pos               (0U)                                      
N#define I2C_CR1_PE_Msk               (0x1U << I2C_CR1_PE_Pos)                  /*!< 0x00000001 */
N#define I2C_CR1_PE                   I2C_CR1_PE_Msk                            /*!< Peripheral enable */
N#define I2C_CR1_TXIE_Pos             (1U)                                      
N#define I2C_CR1_TXIE_Msk             (0x1U << I2C_CR1_TXIE_Pos)                /*!< 0x00000002 */
N#define I2C_CR1_TXIE                 I2C_CR1_TXIE_Msk                          /*!< TX interrupt enable */
N#define I2C_CR1_RXIE_Pos             (2U)                                      
N#define I2C_CR1_RXIE_Msk             (0x1U << I2C_CR1_RXIE_Pos)                /*!< 0x00000004 */
N#define I2C_CR1_RXIE                 I2C_CR1_RXIE_Msk                          /*!< RX interrupt enable */
N#define I2C_CR1_ADDRIE_Pos           (3U)                                      
N#define I2C_CR1_ADDRIE_Msk           (0x1U << I2C_CR1_ADDRIE_Pos)              /*!< 0x00000008 */
N#define I2C_CR1_ADDRIE               I2C_CR1_ADDRIE_Msk                        /*!< Address match interrupt enable */
N#define I2C_CR1_NACKIE_Pos           (4U)                                      
N#define I2C_CR1_NACKIE_Msk           (0x1U << I2C_CR1_NACKIE_Pos)              /*!< 0x00000010 */
N#define I2C_CR1_NACKIE               I2C_CR1_NACKIE_Msk                        /*!< NACK received interrupt enable */
N#define I2C_CR1_STOPIE_Pos           (5U)                                      
N#define I2C_CR1_STOPIE_Msk           (0x1U << I2C_CR1_STOPIE_Pos)              /*!< 0x00000020 */
N#define I2C_CR1_STOPIE               I2C_CR1_STOPIE_Msk                        /*!< STOP detection interrupt enable */
N#define I2C_CR1_TCIE_Pos             (6U)                                      
N#define I2C_CR1_TCIE_Msk             (0x1U << I2C_CR1_TCIE_Pos)                /*!< 0x00000040 */
N#define I2C_CR1_TCIE                 I2C_CR1_TCIE_Msk                          /*!< Transfer complete interrupt enable */
N#define I2C_CR1_ERRIE_Pos            (7U)                                      
N#define I2C_CR1_ERRIE_Msk            (0x1U << I2C_CR1_ERRIE_Pos)               /*!< 0x00000080 */
N#define I2C_CR1_ERRIE                I2C_CR1_ERRIE_Msk                         /*!< Errors interrupt enable */
N#define I2C_CR1_DNF_Pos              (8U)                                      
N#define I2C_CR1_DNF_Msk              (0xFU << I2C_CR1_DNF_Pos)                 /*!< 0x00000F00 */
N#define I2C_CR1_DNF                  I2C_CR1_DNF_Msk                           /*!< Digital noise filter */
N#define I2C_CR1_ANFOFF_Pos           (12U)                                     
N#define I2C_CR1_ANFOFF_Msk           (0x1U << I2C_CR1_ANFOFF_Pos)              /*!< 0x00001000 */
N#define I2C_CR1_ANFOFF               I2C_CR1_ANFOFF_Msk                        /*!< Analog noise filter OFF */
N#define I2C_CR1_TXDMAEN_Pos          (14U)                                     
N#define I2C_CR1_TXDMAEN_Msk          (0x1U << I2C_CR1_TXDMAEN_Pos)             /*!< 0x00004000 */
N#define I2C_CR1_TXDMAEN              I2C_CR1_TXDMAEN_Msk                       /*!< DMA transmission requests enable */
N#define I2C_CR1_RXDMAEN_Pos          (15U)                                     
N#define I2C_CR1_RXDMAEN_Msk          (0x1U << I2C_CR1_RXDMAEN_Pos)             /*!< 0x00008000 */
N#define I2C_CR1_RXDMAEN              I2C_CR1_RXDMAEN_Msk                       /*!< DMA reception requests enable */
N#define I2C_CR1_SBC_Pos              (16U)                                     
N#define I2C_CR1_SBC_Msk              (0x1U << I2C_CR1_SBC_Pos)                 /*!< 0x00010000 */
N#define I2C_CR1_SBC                  I2C_CR1_SBC_Msk                           /*!< Slave byte control */
N#define I2C_CR1_NOSTRETCH_Pos        (17U)                                     
N#define I2C_CR1_NOSTRETCH_Msk        (0x1U << I2C_CR1_NOSTRETCH_Pos)           /*!< 0x00020000 */
N#define I2C_CR1_NOSTRETCH            I2C_CR1_NOSTRETCH_Msk                     /*!< Clock stretching disable */
N#define I2C_CR1_WUPEN_Pos            (18U)                                     
N#define I2C_CR1_WUPEN_Msk            (0x1U << I2C_CR1_WUPEN_Pos)               /*!< 0x00040000 */
N#define I2C_CR1_WUPEN                I2C_CR1_WUPEN_Msk                         /*!< Wakeup from STOP enable */
N#define I2C_CR1_GCEN_Pos             (19U)                                     
N#define I2C_CR1_GCEN_Msk             (0x1U << I2C_CR1_GCEN_Pos)                /*!< 0x00080000 */
N#define I2C_CR1_GCEN                 I2C_CR1_GCEN_Msk                          /*!< General call enable */
N#define I2C_CR1_SMBHEN_Pos           (20U)                                     
N#define I2C_CR1_SMBHEN_Msk           (0x1U << I2C_CR1_SMBHEN_Pos)              /*!< 0x00100000 */
N#define I2C_CR1_SMBHEN               I2C_CR1_SMBHEN_Msk                        /*!< SMBus host address enable */
N#define I2C_CR1_SMBDEN_Pos           (21U)                                     
N#define I2C_CR1_SMBDEN_Msk           (0x1U << I2C_CR1_SMBDEN_Pos)              /*!< 0x00200000 */
N#define I2C_CR1_SMBDEN               I2C_CR1_SMBDEN_Msk                        /*!< SMBus device default address enable */
N#define I2C_CR1_ALERTEN_Pos          (22U)                                     
N#define I2C_CR1_ALERTEN_Msk          (0x1U << I2C_CR1_ALERTEN_Pos)             /*!< 0x00400000 */
N#define I2C_CR1_ALERTEN              I2C_CR1_ALERTEN_Msk                       /*!< SMBus alert enable */
N#define I2C_CR1_PECEN_Pos            (23U)                                     
N#define I2C_CR1_PECEN_Msk            (0x1U << I2C_CR1_PECEN_Pos)               /*!< 0x00800000 */
N#define I2C_CR1_PECEN                I2C_CR1_PECEN_Msk                         /*!< PEC enable */
N
N/******************  Bit definition for I2C_CR2 register  ********************/
N#define I2C_CR2_SADD_Pos             (0U)                                      
N#define I2C_CR2_SADD_Msk             (0x3FFU << I2C_CR2_SADD_Pos)              /*!< 0x000003FF */
N#define I2C_CR2_SADD                 I2C_CR2_SADD_Msk                          /*!< Slave address (master mode) */
N#define I2C_CR2_RD_WRN_Pos           (10U)                                     
N#define I2C_CR2_RD_WRN_Msk           (0x1U << I2C_CR2_RD_WRN_Pos)              /*!< 0x00000400 */
N#define I2C_CR2_RD_WRN               I2C_CR2_RD_WRN_Msk                        /*!< Transfer direction (master mode) */
N#define I2C_CR2_ADD10_Pos            (11U)                                     
N#define I2C_CR2_ADD10_Msk            (0x1U << I2C_CR2_ADD10_Pos)               /*!< 0x00000800 */
N#define I2C_CR2_ADD10                I2C_CR2_ADD10_Msk                         /*!< 10-bit addressing mode (master mode) */
N#define I2C_CR2_HEAD10R_Pos          (12U)                                     
N#define I2C_CR2_HEAD10R_Msk          (0x1U << I2C_CR2_HEAD10R_Pos)             /*!< 0x00001000 */
N#define I2C_CR2_HEAD10R              I2C_CR2_HEAD10R_Msk                       /*!< 10-bit address header only read direction (master mode) */
N#define I2C_CR2_START_Pos            (13U)                                     
N#define I2C_CR2_START_Msk            (0x1U << I2C_CR2_START_Pos)               /*!< 0x00002000 */
N#define I2C_CR2_START                I2C_CR2_START_Msk                         /*!< START generation */
N#define I2C_CR2_STOP_Pos             (14U)                                     
N#define I2C_CR2_STOP_Msk             (0x1U << I2C_CR2_STOP_Pos)                /*!< 0x00004000 */
N#define I2C_CR2_STOP                 I2C_CR2_STOP_Msk                          /*!< STOP generation (master mode) */
N#define I2C_CR2_NACK_Pos             (15U)                                     
N#define I2C_CR2_NACK_Msk             (0x1U << I2C_CR2_NACK_Pos)                /*!< 0x00008000 */
N#define I2C_CR2_NACK                 I2C_CR2_NACK_Msk                          /*!< NACK generation (slave mode) */
N#define I2C_CR2_NBYTES_Pos           (16U)                                     
N#define I2C_CR2_NBYTES_Msk           (0xFFU << I2C_CR2_NBYTES_Pos)             /*!< 0x00FF0000 */
N#define I2C_CR2_NBYTES               I2C_CR2_NBYTES_Msk                        /*!< Number of bytes */
N#define I2C_CR2_RELOAD_Pos           (24U)                                     
N#define I2C_CR2_RELOAD_Msk           (0x1U << I2C_CR2_RELOAD_Pos)              /*!< 0x01000000 */
N#define I2C_CR2_RELOAD               I2C_CR2_RELOAD_Msk                        /*!< NBYTES reload mode */
N#define I2C_CR2_AUTOEND_Pos          (25U)                                     
N#define I2C_CR2_AUTOEND_Msk          (0x1U << I2C_CR2_AUTOEND_Pos)             /*!< 0x02000000 */
N#define I2C_CR2_AUTOEND              I2C_CR2_AUTOEND_Msk                       /*!< Automatic end mode (master mode) */
N#define I2C_CR2_PECBYTE_Pos          (26U)                                     
N#define I2C_CR2_PECBYTE_Msk          (0x1U << I2C_CR2_PECBYTE_Pos)             /*!< 0x04000000 */
N#define I2C_CR2_PECBYTE              I2C_CR2_PECBYTE_Msk                       /*!< Packet error checking byte */
N
N/*******************  Bit definition for I2C_OAR1 register  ******************/
N#define I2C_OAR1_OA1_Pos             (0U)                                      
N#define I2C_OAR1_OA1_Msk             (0x3FFU << I2C_OAR1_OA1_Pos)              /*!< 0x000003FF */
N#define I2C_OAR1_OA1                 I2C_OAR1_OA1_Msk                          /*!< Interface own address 1 */
N#define I2C_OAR1_OA1MODE_Pos         (10U)                                     
N#define I2C_OAR1_OA1MODE_Msk         (0x1U << I2C_OAR1_OA1MODE_Pos)            /*!< 0x00000400 */
N#define I2C_OAR1_OA1MODE             I2C_OAR1_OA1MODE_Msk                      /*!< Own address 1 10-bit mode */
N#define I2C_OAR1_OA1EN_Pos           (15U)                                     
N#define I2C_OAR1_OA1EN_Msk           (0x1U << I2C_OAR1_OA1EN_Pos)              /*!< 0x00008000 */
N#define I2C_OAR1_OA1EN               I2C_OAR1_OA1EN_Msk                        /*!< Own address 1 enable */
N
N/*******************  Bit definition for I2C_OAR2 register  ******************/
N#define I2C_OAR2_OA2_Pos             (1U)                                      
N#define I2C_OAR2_OA2_Msk             (0x7FU << I2C_OAR2_OA2_Pos)               /*!< 0x000000FE */
N#define I2C_OAR2_OA2                 I2C_OAR2_OA2_Msk                          /*!< Interface own address 2                        */
N#define I2C_OAR2_OA2MSK_Pos          (8U)                                      
N#define I2C_OAR2_OA2MSK_Msk          (0x7U << I2C_OAR2_OA2MSK_Pos)             /*!< 0x00000700 */
N#define I2C_OAR2_OA2MSK              I2C_OAR2_OA2MSK_Msk                       /*!< Own address 2 masks                            */
N#define I2C_OAR2_OA2NOMASK           (0x00000000U)                             /*!< No mask                                        */
N#define I2C_OAR2_OA2MASK01_Pos       (8U)                                      
N#define I2C_OAR2_OA2MASK01_Msk       (0x1U << I2C_OAR2_OA2MASK01_Pos)          /*!< 0x00000100 */
N#define I2C_OAR2_OA2MASK01           I2C_OAR2_OA2MASK01_Msk                    /*!< OA2[1] is masked, Only OA2[7:2] are compared   */
N#define I2C_OAR2_OA2MASK02_Pos       (9U)                                      
N#define I2C_OAR2_OA2MASK02_Msk       (0x1U << I2C_OAR2_OA2MASK02_Pos)          /*!< 0x00000200 */
N#define I2C_OAR2_OA2MASK02           I2C_OAR2_OA2MASK02_Msk                    /*!< OA2[2:1] is masked, Only OA2[7:3] are compared */
N#define I2C_OAR2_OA2MASK03_Pos       (8U)                                      
N#define I2C_OAR2_OA2MASK03_Msk       (0x3U << I2C_OAR2_OA2MASK03_Pos)          /*!< 0x00000300 */
N#define I2C_OAR2_OA2MASK03           I2C_OAR2_OA2MASK03_Msk                    /*!< OA2[3:1] is masked, Only OA2[7:4] are compared */
N#define I2C_OAR2_OA2MASK04_Pos       (10U)                                     
N#define I2C_OAR2_OA2MASK04_Msk       (0x1U << I2C_OAR2_OA2MASK04_Pos)          /*!< 0x00000400 */
N#define I2C_OAR2_OA2MASK04           I2C_OAR2_OA2MASK04_Msk                    /*!< OA2[4:1] is masked, Only OA2[7:5] are compared */
N#define I2C_OAR2_OA2MASK05_Pos       (8U)                                      
N#define I2C_OAR2_OA2MASK05_Msk       (0x5U << I2C_OAR2_OA2MASK05_Pos)          /*!< 0x00000500 */
N#define I2C_OAR2_OA2MASK05           I2C_OAR2_OA2MASK05_Msk                    /*!< OA2[5:1] is masked, Only OA2[7:6] are compared */
N#define I2C_OAR2_OA2MASK06_Pos       (9U)                                      
N#define I2C_OAR2_OA2MASK06_Msk       (0x3U << I2C_OAR2_OA2MASK06_Pos)          /*!< 0x00000600 */
N#define I2C_OAR2_OA2MASK06           I2C_OAR2_OA2MASK06_Msk                    /*!< OA2[6:1] is masked, Only OA2[7] are compared   */
N#define I2C_OAR2_OA2MASK07_Pos       (8U)                                      
N#define I2C_OAR2_OA2MASK07_Msk       (0x7U << I2C_OAR2_OA2MASK07_Pos)          /*!< 0x00000700 */
N#define I2C_OAR2_OA2MASK07           I2C_OAR2_OA2MASK07_Msk                    /*!< OA2[7:1] is masked, No comparison is done      */
N#define I2C_OAR2_OA2EN_Pos           (15U)                                     
N#define I2C_OAR2_OA2EN_Msk           (0x1U << I2C_OAR2_OA2EN_Pos)              /*!< 0x00008000 */
N#define I2C_OAR2_OA2EN               I2C_OAR2_OA2EN_Msk                        /*!< Own address 2 enable                           */
N
N/*******************  Bit definition for I2C_TIMINGR register *******************/
N#define I2C_TIMINGR_SCLL_Pos         (0U)                                      
N#define I2C_TIMINGR_SCLL_Msk         (0xFFU << I2C_TIMINGR_SCLL_Pos)           /*!< 0x000000FF */
N#define I2C_TIMINGR_SCLL             I2C_TIMINGR_SCLL_Msk                      /*!< SCL low period (master mode) */
N#define I2C_TIMINGR_SCLH_Pos         (8U)                                      
N#define I2C_TIMINGR_SCLH_Msk         (0xFFU << I2C_TIMINGR_SCLH_Pos)           /*!< 0x0000FF00 */
N#define I2C_TIMINGR_SCLH             I2C_TIMINGR_SCLH_Msk                      /*!< SCL high period (master mode) */
N#define I2C_TIMINGR_SDADEL_Pos       (16U)                                     
N#define I2C_TIMINGR_SDADEL_Msk       (0xFU << I2C_TIMINGR_SDADEL_Pos)          /*!< 0x000F0000 */
N#define I2C_TIMINGR_SDADEL           I2C_TIMINGR_SDADEL_Msk                    /*!< Data hold time */
N#define I2C_TIMINGR_SCLDEL_Pos       (20U)                                     
N#define I2C_TIMINGR_SCLDEL_Msk       (0xFU << I2C_TIMINGR_SCLDEL_Pos)          /*!< 0x00F00000 */
N#define I2C_TIMINGR_SCLDEL           I2C_TIMINGR_SCLDEL_Msk                    /*!< Data setup time */
N#define I2C_TIMINGR_PRESC_Pos        (28U)                                     
N#define I2C_TIMINGR_PRESC_Msk        (0xFU << I2C_TIMINGR_PRESC_Pos)           /*!< 0xF0000000 */
N#define I2C_TIMINGR_PRESC            I2C_TIMINGR_PRESC_Msk                     /*!< Timings prescaler */
N
N/******************* Bit definition for I2C_TIMEOUTR register *******************/
N#define I2C_TIMEOUTR_TIMEOUTA_Pos    (0U)                                      
N#define I2C_TIMEOUTR_TIMEOUTA_Msk    (0xFFFU << I2C_TIMEOUTR_TIMEOUTA_Pos)     /*!< 0x00000FFF */
N#define I2C_TIMEOUTR_TIMEOUTA        I2C_TIMEOUTR_TIMEOUTA_Msk                 /*!< Bus timeout A */
N#define I2C_TIMEOUTR_TIDLE_Pos       (12U)                                     
N#define I2C_TIMEOUTR_TIDLE_Msk       (0x1U << I2C_TIMEOUTR_TIDLE_Pos)          /*!< 0x00001000 */
N#define I2C_TIMEOUTR_TIDLE           I2C_TIMEOUTR_TIDLE_Msk                    /*!< Idle clock timeout detection */
N#define I2C_TIMEOUTR_TIMOUTEN_Pos    (15U)                                     
N#define I2C_TIMEOUTR_TIMOUTEN_Msk    (0x1U << I2C_TIMEOUTR_TIMOUTEN_Pos)       /*!< 0x00008000 */
N#define I2C_TIMEOUTR_TIMOUTEN        I2C_TIMEOUTR_TIMOUTEN_Msk                 /*!< Clock timeout enable */
N#define I2C_TIMEOUTR_TIMEOUTB_Pos    (16U)                                     
N#define I2C_TIMEOUTR_TIMEOUTB_Msk    (0xFFFU << I2C_TIMEOUTR_TIMEOUTB_Pos)     /*!< 0x0FFF0000 */
N#define I2C_TIMEOUTR_TIMEOUTB        I2C_TIMEOUTR_TIMEOUTB_Msk                 /*!< Bus timeout B*/
N#define I2C_TIMEOUTR_TEXTEN_Pos      (31U)                                     
N#define I2C_TIMEOUTR_TEXTEN_Msk      (0x1U << I2C_TIMEOUTR_TEXTEN_Pos)         /*!< 0x80000000 */
N#define I2C_TIMEOUTR_TEXTEN          I2C_TIMEOUTR_TEXTEN_Msk                   /*!< Extended clock timeout enable */
N
N/******************  Bit definition for I2C_ISR register  *********************/
N#define I2C_ISR_TXE_Pos              (0U)                                      
N#define I2C_ISR_TXE_Msk              (0x1U << I2C_ISR_TXE_Pos)                 /*!< 0x00000001 */
N#define I2C_ISR_TXE                  I2C_ISR_TXE_Msk                           /*!< Transmit data register empty */
N#define I2C_ISR_TXIS_Pos             (1U)                                      
N#define I2C_ISR_TXIS_Msk             (0x1U << I2C_ISR_TXIS_Pos)                /*!< 0x00000002 */
N#define I2C_ISR_TXIS                 I2C_ISR_TXIS_Msk                          /*!< Transmit interrupt status */
N#define I2C_ISR_RXNE_Pos             (2U)                                      
N#define I2C_ISR_RXNE_Msk             (0x1U << I2C_ISR_RXNE_Pos)                /*!< 0x00000004 */
N#define I2C_ISR_RXNE                 I2C_ISR_RXNE_Msk                          /*!< Receive data register not empty */
N#define I2C_ISR_ADDR_Pos             (3U)                                      
N#define I2C_ISR_ADDR_Msk             (0x1U << I2C_ISR_ADDR_Pos)                /*!< 0x00000008 */
N#define I2C_ISR_ADDR                 I2C_ISR_ADDR_Msk                          /*!< Address matched (slave mode)*/
N#define I2C_ISR_NACKF_Pos            (4U)                                      
N#define I2C_ISR_NACKF_Msk            (0x1U << I2C_ISR_NACKF_Pos)               /*!< 0x00000010 */
N#define I2C_ISR_NACKF                I2C_ISR_NACKF_Msk                         /*!< NACK received flag */
N#define I2C_ISR_STOPF_Pos            (5U)                                      
N#define I2C_ISR_STOPF_Msk            (0x1U << I2C_ISR_STOPF_Pos)               /*!< 0x00000020 */
N#define I2C_ISR_STOPF                I2C_ISR_STOPF_Msk                         /*!< STOP detection flag */
N#define I2C_ISR_TC_Pos               (6U)                                      
N#define I2C_ISR_TC_Msk               (0x1U << I2C_ISR_TC_Pos)                  /*!< 0x00000040 */
N#define I2C_ISR_TC                   I2C_ISR_TC_Msk                            /*!< Transfer complete (master mode) */
N#define I2C_ISR_TCR_Pos              (7U)                                      
N#define I2C_ISR_TCR_Msk              (0x1U << I2C_ISR_TCR_Pos)                 /*!< 0x00000080 */
N#define I2C_ISR_TCR                  I2C_ISR_TCR_Msk                           /*!< Transfer complete reload */
N#define I2C_ISR_BERR_Pos             (8U)                                      
N#define I2C_ISR_BERR_Msk             (0x1U << I2C_ISR_BERR_Pos)                /*!< 0x00000100 */
N#define I2C_ISR_BERR                 I2C_ISR_BERR_Msk                          /*!< Bus error */
N#define I2C_ISR_ARLO_Pos             (9U)                                      
N#define I2C_ISR_ARLO_Msk             (0x1U << I2C_ISR_ARLO_Pos)                /*!< 0x00000200 */
N#define I2C_ISR_ARLO                 I2C_ISR_ARLO_Msk                          /*!< Arbitration lost */
N#define I2C_ISR_OVR_Pos              (10U)                                     
N#define I2C_ISR_OVR_Msk              (0x1U << I2C_ISR_OVR_Pos)                 /*!< 0x00000400 */
N#define I2C_ISR_OVR                  I2C_ISR_OVR_Msk                           /*!< Overrun/Underrun */
N#define I2C_ISR_PECERR_Pos           (11U)                                     
N#define I2C_ISR_PECERR_Msk           (0x1U << I2C_ISR_PECERR_Pos)              /*!< 0x00000800 */
N#define I2C_ISR_PECERR               I2C_ISR_PECERR_Msk                        /*!< PEC error in reception */
N#define I2C_ISR_TIMEOUT_Pos          (12U)                                     
N#define I2C_ISR_TIMEOUT_Msk          (0x1U << I2C_ISR_TIMEOUT_Pos)             /*!< 0x00001000 */
N#define I2C_ISR_TIMEOUT              I2C_ISR_TIMEOUT_Msk                       /*!< Timeout or Tlow detection flag */
N#define I2C_ISR_ALERT_Pos            (13U)                                     
N#define I2C_ISR_ALERT_Msk            (0x1U << I2C_ISR_ALERT_Pos)               /*!< 0x00002000 */
N#define I2C_ISR_ALERT                I2C_ISR_ALERT_Msk                         /*!< SMBus alert */
N#define I2C_ISR_BUSY_Pos             (15U)                                     
N#define I2C_ISR_BUSY_Msk             (0x1U << I2C_ISR_BUSY_Pos)                /*!< 0x00008000 */
N#define I2C_ISR_BUSY                 I2C_ISR_BUSY_Msk                          /*!< Bus busy */
N#define I2C_ISR_DIR_Pos              (16U)                                     
N#define I2C_ISR_DIR_Msk              (0x1U << I2C_ISR_DIR_Pos)                 /*!< 0x00010000 */
N#define I2C_ISR_DIR                  I2C_ISR_DIR_Msk                           /*!< Transfer direction (slave mode) */
N#define I2C_ISR_ADDCODE_Pos          (17U)                                     
N#define I2C_ISR_ADDCODE_Msk          (0x7FU << I2C_ISR_ADDCODE_Pos)            /*!< 0x00FE0000 */
N#define I2C_ISR_ADDCODE              I2C_ISR_ADDCODE_Msk                       /*!< Address match code (slave mode) */
N
N/******************  Bit definition for I2C_ICR register  *********************/
N#define I2C_ICR_ADDRCF_Pos           (3U)                                      
N#define I2C_ICR_ADDRCF_Msk           (0x1U << I2C_ICR_ADDRCF_Pos)              /*!< 0x00000008 */
N#define I2C_ICR_ADDRCF               I2C_ICR_ADDRCF_Msk                        /*!< Address matched clear flag */
N#define I2C_ICR_NACKCF_Pos           (4U)                                      
N#define I2C_ICR_NACKCF_Msk           (0x1U << I2C_ICR_NACKCF_Pos)              /*!< 0x00000010 */
N#define I2C_ICR_NACKCF               I2C_ICR_NACKCF_Msk                        /*!< NACK clear flag */
N#define I2C_ICR_STOPCF_Pos           (5U)                                      
N#define I2C_ICR_STOPCF_Msk           (0x1U << I2C_ICR_STOPCF_Pos)              /*!< 0x00000020 */
N#define I2C_ICR_STOPCF               I2C_ICR_STOPCF_Msk                        /*!< STOP detection clear flag */
N#define I2C_ICR_BERRCF_Pos           (8U)                                      
N#define I2C_ICR_BERRCF_Msk           (0x1U << I2C_ICR_BERRCF_Pos)              /*!< 0x00000100 */
N#define I2C_ICR_BERRCF               I2C_ICR_BERRCF_Msk                        /*!< Bus error clear flag */
N#define I2C_ICR_ARLOCF_Pos           (9U)                                      
N#define I2C_ICR_ARLOCF_Msk           (0x1U << I2C_ICR_ARLOCF_Pos)              /*!< 0x00000200 */
N#define I2C_ICR_ARLOCF               I2C_ICR_ARLOCF_Msk                        /*!< Arbitration lost clear flag */
N#define I2C_ICR_OVRCF_Pos            (10U)                                     
N#define I2C_ICR_OVRCF_Msk            (0x1U << I2C_ICR_OVRCF_Pos)               /*!< 0x00000400 */
N#define I2C_ICR_OVRCF                I2C_ICR_OVRCF_Msk                         /*!< Overrun/Underrun clear flag */
N#define I2C_ICR_PECCF_Pos            (11U)                                     
N#define I2C_ICR_PECCF_Msk            (0x1U << I2C_ICR_PECCF_Pos)               /*!< 0x00000800 */
N#define I2C_ICR_PECCF                I2C_ICR_PECCF_Msk                         /*!< PAC error clear flag */
N#define I2C_ICR_TIMOUTCF_Pos         (12U)                                     
N#define I2C_ICR_TIMOUTCF_Msk         (0x1U << I2C_ICR_TIMOUTCF_Pos)            /*!< 0x00001000 */
N#define I2C_ICR_TIMOUTCF             I2C_ICR_TIMOUTCF_Msk                      /*!< Timeout clear flag */
N#define I2C_ICR_ALERTCF_Pos          (13U)                                     
N#define I2C_ICR_ALERTCF_Msk          (0x1U << I2C_ICR_ALERTCF_Pos)             /*!< 0x00002000 */
N#define I2C_ICR_ALERTCF              I2C_ICR_ALERTCF_Msk                       /*!< Alert clear flag */
N
N/******************  Bit definition for I2C_PECR register  *********************/
N#define I2C_PECR_PEC_Pos             (0U)                                      
N#define I2C_PECR_PEC_Msk             (0xFFU << I2C_PECR_PEC_Pos)               /*!< 0x000000FF */
N#define I2C_PECR_PEC                 I2C_PECR_PEC_Msk                          /*!< PEC register */
N
N/******************  Bit definition for I2C_RXDR register  *********************/
N#define I2C_RXDR_RXDATA_Pos          (0U)                                      
N#define I2C_RXDR_RXDATA_Msk          (0xFFU << I2C_RXDR_RXDATA_Pos)            /*!< 0x000000FF */
N#define I2C_RXDR_RXDATA              I2C_RXDR_RXDATA_Msk                       /*!< 8-bit receive data */
N
N/******************  Bit definition for I2C_TXDR register  *********************/
N#define I2C_TXDR_TXDATA_Pos          (0U)                                      
N#define I2C_TXDR_TXDATA_Msk          (0xFFU << I2C_TXDR_TXDATA_Pos)            /*!< 0x000000FF */
N#define I2C_TXDR_TXDATA              I2C_TXDR_TXDATA_Msk                       /*!< 8-bit transmit data */
N
N/******************************************************************************/
N/*                                                                            */
N/*                        Independent WATCHDOG (IWDG)                         */
N/*                                                                            */
N/******************************************************************************/
N/*******************  Bit definition for IWDG_KR register  ********************/
N#define IWDG_KR_KEY_Pos      (0U)                                              
N#define IWDG_KR_KEY_Msk      (0xFFFFU << IWDG_KR_KEY_Pos)                      /*!< 0x0000FFFF */
N#define IWDG_KR_KEY          IWDG_KR_KEY_Msk                                   /*!< Key value (write only, read 0000h) */
N
N/*******************  Bit definition for IWDG_PR register  ********************/
N#define IWDG_PR_PR_Pos       (0U)                                              
N#define IWDG_PR_PR_Msk       (0x7U << IWDG_PR_PR_Pos)                          /*!< 0x00000007 */
N#define IWDG_PR_PR           IWDG_PR_PR_Msk                                    /*!< PR[2:0] (Prescaler divider) */
N#define IWDG_PR_PR_0         (0x1U << IWDG_PR_PR_Pos)                          /*!< 0x00000001 */
N#define IWDG_PR_PR_1         (0x2U << IWDG_PR_PR_Pos)                          /*!< 0x00000002 */
N#define IWDG_PR_PR_2         (0x4U << IWDG_PR_PR_Pos)                          /*!< 0x00000004 */
N
N/*******************  Bit definition for IWDG_RLR register  *******************/
N#define IWDG_RLR_RL_Pos      (0U)                                              
N#define IWDG_RLR_RL_Msk      (0xFFFU << IWDG_RLR_RL_Pos)                       /*!< 0x00000FFF */
N#define IWDG_RLR_RL          IWDG_RLR_RL_Msk                                   /*!< Watchdog counter reload value */
N
N/*******************  Bit definition for IWDG_SR register  ********************/
N#define IWDG_SR_PVU_Pos      (0U)                                              
N#define IWDG_SR_PVU_Msk      (0x1U << IWDG_SR_PVU_Pos)                         /*!< 0x00000001 */
N#define IWDG_SR_PVU          IWDG_SR_PVU_Msk                                   /*!< Watchdog prescaler value update */
N#define IWDG_SR_RVU_Pos      (1U)                                              
N#define IWDG_SR_RVU_Msk      (0x1U << IWDG_SR_RVU_Pos)                         /*!< 0x00000002 */
N#define IWDG_SR_RVU          IWDG_SR_RVU_Msk                                   /*!< Watchdog counter reload value update */
N#define IWDG_SR_WVU_Pos      (2U)                                              
N#define IWDG_SR_WVU_Msk      (0x1U << IWDG_SR_WVU_Pos)                         /*!< 0x00000004 */
N#define IWDG_SR_WVU          IWDG_SR_WVU_Msk                                   /*!< Watchdog counter window value update */
N
N/*******************  Bit definition for IWDG_KR register  ********************/
N#define IWDG_WINR_WIN_Pos    (0U)                                              
N#define IWDG_WINR_WIN_Msk    (0xFFFU << IWDG_WINR_WIN_Pos)                     /*!< 0x00000FFF */
N#define IWDG_WINR_WIN        IWDG_WINR_WIN_Msk                                 /*!< Watchdog counter window value */
N
N/******************************************************************************/
N/*                                                                            */
N/*                          LCD Controller (LCD)                              */
N/*                                                                            */
N/******************************************************************************/
N
N/*******************  Bit definition for LCD_CR register  *********************/
N#define LCD_CR_LCDEN_Pos            (0U)                                       
N#define LCD_CR_LCDEN_Msk            (0x1U << LCD_CR_LCDEN_Pos)                 /*!< 0x00000001 */
N#define LCD_CR_LCDEN                LCD_CR_LCDEN_Msk                           /*!< LCD Enable Bit */
N#define LCD_CR_VSEL_Pos             (1U)                                       
N#define LCD_CR_VSEL_Msk             (0x1U << LCD_CR_VSEL_Pos)                  /*!< 0x00000002 */
N#define LCD_CR_VSEL                 LCD_CR_VSEL_Msk                            /*!< Voltage source selector Bit */
N
N#define LCD_CR_DUTY_Pos             (2U)                                       
N#define LCD_CR_DUTY_Msk             (0x7U << LCD_CR_DUTY_Pos)                  /*!< 0x0000001C */
N#define LCD_CR_DUTY                 LCD_CR_DUTY_Msk                            /*!< DUTY[2:0] bits (Duty selector) */
N#define LCD_CR_DUTY_0               (0x1U << LCD_CR_DUTY_Pos)                  /*!< 0x00000004 */
N#define LCD_CR_DUTY_1               (0x2U << LCD_CR_DUTY_Pos)                  /*!< 0x00000008 */
N#define LCD_CR_DUTY_2               (0x4U << LCD_CR_DUTY_Pos)                  /*!< 0x00000010 */
N
N#define LCD_CR_BIAS_Pos             (5U)                                       
N#define LCD_CR_BIAS_Msk             (0x3U << LCD_CR_BIAS_Pos)                  /*!< 0x00000060 */
N#define LCD_CR_BIAS                 LCD_CR_BIAS_Msk                            /*!< BIAS[1:0] bits (Bias selector) */
N#define LCD_CR_BIAS_0               (0x1U << LCD_CR_BIAS_Pos)                  /*!< 0x00000020 */
N#define LCD_CR_BIAS_1               (0x2U << LCD_CR_BIAS_Pos)                  /*!< 0x00000040 */
N
N#define LCD_CR_MUX_SEG_Pos          (7U)                                       
N#define LCD_CR_MUX_SEG_Msk          (0x1U << LCD_CR_MUX_SEG_Pos)               /*!< 0x00000080 */
N#define LCD_CR_MUX_SEG              LCD_CR_MUX_SEG_Msk                         /*!< Mux Segment Enable Bit */
N
N#define LCD_CR_BUFEN_Pos            (8U)
N#define LCD_CR_BUFEN_Msk            (0x1U << LCD_CR_BUFEN_Pos)                 /*!< 0x00000100 */
N#define LCD_CR_BUFEN                LCD_CR_BUFEN_Msk                           /*!< Voltage output buffer enable Bit */
N
N/*******************  Bit definition for LCD_FCR register  ********************/
N#define LCD_FCR_HD_Pos              (0U)                                       
N#define LCD_FCR_HD_Msk              (0x1U << LCD_FCR_HD_Pos)                   /*!< 0x00000001 */
N#define LCD_FCR_HD                  LCD_FCR_HD_Msk                             /*!< High Drive Enable Bit */
N#define LCD_FCR_SOFIE_Pos           (1U)                                       
N#define LCD_FCR_SOFIE_Msk           (0x1U << LCD_FCR_SOFIE_Pos)                /*!< 0x00000002 */
N#define LCD_FCR_SOFIE               LCD_FCR_SOFIE_Msk                          /*!< Start of Frame Interrupt Enable Bit */
N#define LCD_FCR_UDDIE_Pos           (3U)                                       
N#define LCD_FCR_UDDIE_Msk           (0x1U << LCD_FCR_UDDIE_Pos)                /*!< 0x00000008 */
N#define LCD_FCR_UDDIE               LCD_FCR_UDDIE_Msk                          /*!< Update Display Done Interrupt Enable Bit */
N
N#define LCD_FCR_PON_Pos             (4U)                                       
N#define LCD_FCR_PON_Msk             (0x7U << LCD_FCR_PON_Pos)                  /*!< 0x00000070 */
N#define LCD_FCR_PON                 LCD_FCR_PON_Msk                            /*!< PON[2:0] bits (Puls ON Duration) */
N#define LCD_FCR_PON_0               (0x1U << LCD_FCR_PON_Pos)                  /*!< 0x00000010 */
N#define LCD_FCR_PON_1               (0x2U << LCD_FCR_PON_Pos)                  /*!< 0x00000020 */
N#define LCD_FCR_PON_2               (0x4U << LCD_FCR_PON_Pos)                  /*!< 0x00000040 */
N
N#define LCD_FCR_DEAD_Pos            (7U)                                       
N#define LCD_FCR_DEAD_Msk            (0x7U << LCD_FCR_DEAD_Pos)                 /*!< 0x00000380 */
N#define LCD_FCR_DEAD                LCD_FCR_DEAD_Msk                           /*!< DEAD[2:0] bits (DEAD Time) */
N#define LCD_FCR_DEAD_0              (0x1U << LCD_FCR_DEAD_Pos)                 /*!< 0x00000080 */
N#define LCD_FCR_DEAD_1              (0x2U << LCD_FCR_DEAD_Pos)                 /*!< 0x00000100 */
N#define LCD_FCR_DEAD_2              (0x4U << LCD_FCR_DEAD_Pos)                 /*!< 0x00000200 */
N
N#define LCD_FCR_CC_Pos              (10U)                                      
N#define LCD_FCR_CC_Msk              (0x7U << LCD_FCR_CC_Pos)                   /*!< 0x00001C00 */
N#define LCD_FCR_CC                  LCD_FCR_CC_Msk                             /*!< CC[2:0] bits (Contrast Control) */
N#define LCD_FCR_CC_0                (0x1U << LCD_FCR_CC_Pos)                   /*!< 0x00000400 */
N#define LCD_FCR_CC_1                (0x2U << LCD_FCR_CC_Pos)                   /*!< 0x00000800 */
N#define LCD_FCR_CC_2                (0x4U << LCD_FCR_CC_Pos)                   /*!< 0x00001000 */
N
N#define LCD_FCR_BLINKF_Pos          (13U)                                      
N#define LCD_FCR_BLINKF_Msk          (0x7U << LCD_FCR_BLINKF_Pos)               /*!< 0x0000E000 */
N#define LCD_FCR_BLINKF              LCD_FCR_BLINKF_Msk                         /*!< BLINKF[2:0] bits (Blink Frequency) */
N#define LCD_FCR_BLINKF_0            (0x1U << LCD_FCR_BLINKF_Pos)               /*!< 0x00002000 */
N#define LCD_FCR_BLINKF_1            (0x2U << LCD_FCR_BLINKF_Pos)               /*!< 0x00004000 */
N#define LCD_FCR_BLINKF_2            (0x4U << LCD_FCR_BLINKF_Pos)               /*!< 0x00008000 */
N
N#define LCD_FCR_BLINK_Pos           (16U)                                      
N#define LCD_FCR_BLINK_Msk           (0x3U << LCD_FCR_BLINK_Pos)                /*!< 0x00030000 */
N#define LCD_FCR_BLINK               LCD_FCR_BLINK_Msk                          /*!< BLINK[1:0] bits (Blink Enable) */
N#define LCD_FCR_BLINK_0             (0x1U << LCD_FCR_BLINK_Pos)                /*!< 0x00010000 */
N#define LCD_FCR_BLINK_1             (0x2U << LCD_FCR_BLINK_Pos)                /*!< 0x00020000 */
N
N#define LCD_FCR_DIV_Pos             (18U)                                      
N#define LCD_FCR_DIV_Msk             (0xFU << LCD_FCR_DIV_Pos)                  /*!< 0x003C0000 */
N#define LCD_FCR_DIV                 LCD_FCR_DIV_Msk                            /*!< DIV[3:0] bits (Divider) */
N#define LCD_FCR_PS_Pos              (22U)                                      
N#define LCD_FCR_PS_Msk              (0xFU << LCD_FCR_PS_Pos)                   /*!< 0x03C00000 */
N#define LCD_FCR_PS                  LCD_FCR_PS_Msk                             /*!< PS[3:0] bits (Prescaler) */
N
N/*******************  Bit definition for LCD_SR register  *********************/
N#define LCD_SR_ENS_Pos              (0U)                                       
N#define LCD_SR_ENS_Msk              (0x1U << LCD_SR_ENS_Pos)                   /*!< 0x00000001 */
N#define LCD_SR_ENS                  LCD_SR_ENS_Msk                             /*!< LCD Enabled Bit */
N#define LCD_SR_SOF_Pos              (1U)                                       
N#define LCD_SR_SOF_Msk              (0x1U << LCD_SR_SOF_Pos)                   /*!< 0x00000002 */
N#define LCD_SR_SOF                  LCD_SR_SOF_Msk                             /*!< Start Of Frame Flag Bit */
N#define LCD_SR_UDR_Pos              (2U)                                       
N#define LCD_SR_UDR_Msk              (0x1U << LCD_SR_UDR_Pos)                   /*!< 0x00000004 */
N#define LCD_SR_UDR                  LCD_SR_UDR_Msk                             /*!< Update Display Request Bit */
N#define LCD_SR_UDD_Pos              (3U)                                       
N#define LCD_SR_UDD_Msk              (0x1U << LCD_SR_UDD_Pos)                   /*!< 0x00000008 */
N#define LCD_SR_UDD                  LCD_SR_UDD_Msk                             /*!< Update Display Done Flag Bit */
N#define LCD_SR_RDY_Pos              (4U)                                       
N#define LCD_SR_RDY_Msk              (0x1U << LCD_SR_RDY_Pos)                   /*!< 0x00000010 */
N#define LCD_SR_RDY                  LCD_SR_RDY_Msk                             /*!< Ready Flag Bit */
N#define LCD_SR_FCRSR_Pos            (5U)                                       
N#define LCD_SR_FCRSR_Msk            (0x1U << LCD_SR_FCRSR_Pos)                 /*!< 0x00000020 */
N#define LCD_SR_FCRSR                LCD_SR_FCRSR_Msk                           /*!< LCD FCR Register Synchronization Flag Bit */
N
N/*******************  Bit definition for LCD_CLR register  ********************/
N#define LCD_CLR_SOFC_Pos            (1U)                                       
N#define LCD_CLR_SOFC_Msk            (0x1U << LCD_CLR_SOFC_Pos)                 /*!< 0x00000002 */
N#define LCD_CLR_SOFC                LCD_CLR_SOFC_Msk                           /*!< Start Of Frame Flag Clear Bit */
N#define LCD_CLR_UDDC_Pos            (3U)                                       
N#define LCD_CLR_UDDC_Msk            (0x1U << LCD_CLR_UDDC_Pos)                 /*!< 0x00000008 */
N#define LCD_CLR_UDDC                LCD_CLR_UDDC_Msk                           /*!< Update Display Done Flag Clear Bit */
N
N/*******************  Bit definition for LCD_RAM register  ********************/
N#define LCD_RAM_SEGMENT_DATA_Pos    (0U)                                       
N#define LCD_RAM_SEGMENT_DATA_Msk    (0xFFFFFFFFU << LCD_RAM_SEGMENT_DATA_Pos)  /*!< 0xFFFFFFFF */
N#define LCD_RAM_SEGMENT_DATA        LCD_RAM_SEGMENT_DATA_Msk                   /*!< Segment Data Bits */
N
N/******************************************************************************/
N/*                                                                            */
N/*                         Low Power Timer (LPTTIM)                           */
N/*                                                                            */
N/******************************************************************************/
N/******************  Bit definition for LPTIM_ISR register  *******************/
N#define LPTIM_ISR_CMPM_Pos          (0U)                                       
N#define LPTIM_ISR_CMPM_Msk          (0x1U << LPTIM_ISR_CMPM_Pos)               /*!< 0x00000001 */
N#define LPTIM_ISR_CMPM              LPTIM_ISR_CMPM_Msk                         /*!< Compare match */
N#define LPTIM_ISR_ARRM_Pos          (1U)                                       
N#define LPTIM_ISR_ARRM_Msk          (0x1U << LPTIM_ISR_ARRM_Pos)               /*!< 0x00000002 */
N#define LPTIM_ISR_ARRM              LPTIM_ISR_ARRM_Msk                         /*!< Autoreload match */
N#define LPTIM_ISR_EXTTRIG_Pos       (2U)                                       
N#define LPTIM_ISR_EXTTRIG_Msk       (0x1U << LPTIM_ISR_EXTTRIG_Pos)            /*!< 0x00000004 */
N#define LPTIM_ISR_EXTTRIG           LPTIM_ISR_EXTTRIG_Msk                      /*!< External trigger edge event */
N#define LPTIM_ISR_CMPOK_Pos         (3U)                                       
N#define LPTIM_ISR_CMPOK_Msk         (0x1U << LPTIM_ISR_CMPOK_Pos)              /*!< 0x00000008 */
N#define LPTIM_ISR_CMPOK             LPTIM_ISR_CMPOK_Msk                        /*!< Compare register update OK */
N#define LPTIM_ISR_ARROK_Pos         (4U)                                       
N#define LPTIM_ISR_ARROK_Msk         (0x1U << LPTIM_ISR_ARROK_Pos)              /*!< 0x00000010 */
N#define LPTIM_ISR_ARROK             LPTIM_ISR_ARROK_Msk                        /*!< Autoreload register update OK */
N#define LPTIM_ISR_UP_Pos            (5U)                                       
N#define LPTIM_ISR_UP_Msk            (0x1U << LPTIM_ISR_UP_Pos)                 /*!< 0x00000020 */
N#define LPTIM_ISR_UP                LPTIM_ISR_UP_Msk                           /*!< Counter direction change down to up */
N#define LPTIM_ISR_DOWN_Pos          (6U)                                       
N#define LPTIM_ISR_DOWN_Msk          (0x1U << LPTIM_ISR_DOWN_Pos)               /*!< 0x00000040 */
N#define LPTIM_ISR_DOWN              LPTIM_ISR_DOWN_Msk                         /*!< Counter direction change up to down */
N
N/******************  Bit definition for LPTIM_ICR register  *******************/
N#define LPTIM_ICR_CMPMCF_Pos        (0U)                                       
N#define LPTIM_ICR_CMPMCF_Msk        (0x1U << LPTIM_ICR_CMPMCF_Pos)             /*!< 0x00000001 */
N#define LPTIM_ICR_CMPMCF            LPTIM_ICR_CMPMCF_Msk                       /*!< Compare match Clear Flag */
N#define LPTIM_ICR_ARRMCF_Pos        (1U)                                       
N#define LPTIM_ICR_ARRMCF_Msk        (0x1U << LPTIM_ICR_ARRMCF_Pos)             /*!< 0x00000002 */
N#define LPTIM_ICR_ARRMCF            LPTIM_ICR_ARRMCF_Msk                       /*!< Autoreload match Clear Flag */
N#define LPTIM_ICR_EXTTRIGCF_Pos     (2U)                                       
N#define LPTIM_ICR_EXTTRIGCF_Msk     (0x1U << LPTIM_ICR_EXTTRIGCF_Pos)          /*!< 0x00000004 */
N#define LPTIM_ICR_EXTTRIGCF         LPTIM_ICR_EXTTRIGCF_Msk                    /*!< External trigger edge event Clear Flag */
N#define LPTIM_ICR_CMPOKCF_Pos       (3U)                                       
N#define LPTIM_ICR_CMPOKCF_Msk       (0x1U << LPTIM_ICR_CMPOKCF_Pos)            /*!< 0x00000008 */
N#define LPTIM_ICR_CMPOKCF           LPTIM_ICR_CMPOKCF_Msk                      /*!< Compare register update OK Clear Flag */
N#define LPTIM_ICR_ARROKCF_Pos       (4U)                                       
N#define LPTIM_ICR_ARROKCF_Msk       (0x1U << LPTIM_ICR_ARROKCF_Pos)            /*!< 0x00000010 */
N#define LPTIM_ICR_ARROKCF           LPTIM_ICR_ARROKCF_Msk                      /*!< Autoreload register update OK Clear Flag */
N#define LPTIM_ICR_UPCF_Pos          (5U)                                       
N#define LPTIM_ICR_UPCF_Msk          (0x1U << LPTIM_ICR_UPCF_Pos)               /*!< 0x00000020 */
N#define LPTIM_ICR_UPCF              LPTIM_ICR_UPCF_Msk                         /*!< Counter direction change down to up Clear Flag */
N#define LPTIM_ICR_DOWNCF_Pos        (6U)                                       
N#define LPTIM_ICR_DOWNCF_Msk        (0x1U << LPTIM_ICR_DOWNCF_Pos)             /*!< 0x00000040 */
N#define LPTIM_ICR_DOWNCF            LPTIM_ICR_DOWNCF_Msk                       /*!< Counter direction change up to down Clear Flag */
N
N/******************  Bit definition for LPTIM_IER register ********************/
N#define LPTIM_IER_CMPMIE_Pos        (0U)                                       
N#define LPTIM_IER_CMPMIE_Msk        (0x1U << LPTIM_IER_CMPMIE_Pos)             /*!< 0x00000001 */
N#define LPTIM_IER_CMPMIE            LPTIM_IER_CMPMIE_Msk                       /*!< Compare match Interrupt Enable */
N#define LPTIM_IER_ARRMIE_Pos        (1U)                                       
N#define LPTIM_IER_ARRMIE_Msk        (0x1U << LPTIM_IER_ARRMIE_Pos)             /*!< 0x00000002 */
N#define LPTIM_IER_ARRMIE            LPTIM_IER_ARRMIE_Msk                       /*!< Autoreload match Interrupt Enable */
N#define LPTIM_IER_EXTTRIGIE_Pos     (2U)                                       
N#define LPTIM_IER_EXTTRIGIE_Msk     (0x1U << LPTIM_IER_EXTTRIGIE_Pos)          /*!< 0x00000004 */
N#define LPTIM_IER_EXTTRIGIE         LPTIM_IER_EXTTRIGIE_Msk                    /*!< External trigger edge event Interrupt Enable */
N#define LPTIM_IER_CMPOKIE_Pos       (3U)                                       
N#define LPTIM_IER_CMPOKIE_Msk       (0x1U << LPTIM_IER_CMPOKIE_Pos)            /*!< 0x00000008 */
N#define LPTIM_IER_CMPOKIE           LPTIM_IER_CMPOKIE_Msk                      /*!< Compare register update OK Interrupt Enable */
N#define LPTIM_IER_ARROKIE_Pos       (4U)                                       
N#define LPTIM_IER_ARROKIE_Msk       (0x1U << LPTIM_IER_ARROKIE_Pos)            /*!< 0x00000010 */
N#define LPTIM_IER_ARROKIE           LPTIM_IER_ARROKIE_Msk                      /*!< Autoreload register update OK Interrupt Enable */
N#define LPTIM_IER_UPIE_Pos          (5U)                                       
N#define LPTIM_IER_UPIE_Msk          (0x1U << LPTIM_IER_UPIE_Pos)               /*!< 0x00000020 */
N#define LPTIM_IER_UPIE              LPTIM_IER_UPIE_Msk                         /*!< Counter direction change down to up Interrupt Enable */
N#define LPTIM_IER_DOWNIE_Pos        (6U)                                       
N#define LPTIM_IER_DOWNIE_Msk        (0x1U << LPTIM_IER_DOWNIE_Pos)             /*!< 0x00000040 */
N#define LPTIM_IER_DOWNIE            LPTIM_IER_DOWNIE_Msk                       /*!< Counter direction change up to down Interrupt Enable */
N
N/******************  Bit definition for LPTIM_CFGR register *******************/
N#define LPTIM_CFGR_CKSEL_Pos        (0U)                                       
N#define LPTIM_CFGR_CKSEL_Msk        (0x1U << LPTIM_CFGR_CKSEL_Pos)             /*!< 0x00000001 */
N#define LPTIM_CFGR_CKSEL            LPTIM_CFGR_CKSEL_Msk                       /*!< Clock selector */
N
N#define LPTIM_CFGR_CKPOL_Pos        (1U)                                       
N#define LPTIM_CFGR_CKPOL_Msk        (0x3U << LPTIM_CFGR_CKPOL_Pos)             /*!< 0x00000006 */
N#define LPTIM_CFGR_CKPOL            LPTIM_CFGR_CKPOL_Msk                       /*!< CKPOL[1:0] bits (Clock polarity) */
N#define LPTIM_CFGR_CKPOL_0          (0x1U << LPTIM_CFGR_CKPOL_Pos)             /*!< 0x00000002 */
N#define LPTIM_CFGR_CKPOL_1          (0x2U << LPTIM_CFGR_CKPOL_Pos)             /*!< 0x00000004 */
N
N#define LPTIM_CFGR_CKFLT_Pos        (3U)                                       
N#define LPTIM_CFGR_CKFLT_Msk        (0x3U << LPTIM_CFGR_CKFLT_Pos)             /*!< 0x00000018 */
N#define LPTIM_CFGR_CKFLT            LPTIM_CFGR_CKFLT_Msk                       /*!< CKFLT[1:0] bits (Configurable digital filter for external clock) */
N#define LPTIM_CFGR_CKFLT_0          (0x1U << LPTIM_CFGR_CKFLT_Pos)             /*!< 0x00000008 */
N#define LPTIM_CFGR_CKFLT_1          (0x2U << LPTIM_CFGR_CKFLT_Pos)             /*!< 0x00000010 */
N
N#define LPTIM_CFGR_TRGFLT_Pos       (6U)                                       
N#define LPTIM_CFGR_TRGFLT_Msk       (0x3U << LPTIM_CFGR_TRGFLT_Pos)            /*!< 0x000000C0 */
N#define LPTIM_CFGR_TRGFLT           LPTIM_CFGR_TRGFLT_Msk                      /*!< TRGFLT[1:0] bits (Configurable digital filter for trigger) */
N#define LPTIM_CFGR_TRGFLT_0         (0x1U << LPTIM_CFGR_TRGFLT_Pos)            /*!< 0x00000040 */
N#define LPTIM_CFGR_TRGFLT_1         (0x2U << LPTIM_CFGR_TRGFLT_Pos)            /*!< 0x00000080 */
N
N#define LPTIM_CFGR_PRESC_Pos        (9U)                                       
N#define LPTIM_CFGR_PRESC_Msk        (0x7U << LPTIM_CFGR_PRESC_Pos)             /*!< 0x00000E00 */
N#define LPTIM_CFGR_PRESC            LPTIM_CFGR_PRESC_Msk                       /*!< PRESC[2:0] bits (Clock prescaler) */
N#define LPTIM_CFGR_PRESC_0          (0x1U << LPTIM_CFGR_PRESC_Pos)             /*!< 0x00000200 */
N#define LPTIM_CFGR_PRESC_1          (0x2U << LPTIM_CFGR_PRESC_Pos)             /*!< 0x00000400 */
N#define LPTIM_CFGR_PRESC_2          (0x4U << LPTIM_CFGR_PRESC_Pos)             /*!< 0x00000800 */
N
N#define LPTIM_CFGR_TRIGSEL_Pos      (13U)                                      
N#define LPTIM_CFGR_TRIGSEL_Msk      (0x7U << LPTIM_CFGR_TRIGSEL_Pos)           /*!< 0x0000E000 */
N#define LPTIM_CFGR_TRIGSEL          LPTIM_CFGR_TRIGSEL_Msk                     /*!< TRIGSEL[2:0]] bits (Trigger selector) */
N#define LPTIM_CFGR_TRIGSEL_0        (0x1U << LPTIM_CFGR_TRIGSEL_Pos)           /*!< 0x00002000 */
N#define LPTIM_CFGR_TRIGSEL_1        (0x2U << LPTIM_CFGR_TRIGSEL_Pos)           /*!< 0x00004000 */
N#define LPTIM_CFGR_TRIGSEL_2        (0x4U << LPTIM_CFGR_TRIGSEL_Pos)           /*!< 0x00008000 */
N
N#define LPTIM_CFGR_TRIGEN_Pos       (17U)                                      
N#define LPTIM_CFGR_TRIGEN_Msk       (0x3U << LPTIM_CFGR_TRIGEN_Pos)            /*!< 0x00060000 */
N#define LPTIM_CFGR_TRIGEN           LPTIM_CFGR_TRIGEN_Msk                      /*!< TRIGEN[1:0] bits (Trigger enable and polarity) */
N#define LPTIM_CFGR_TRIGEN_0         (0x1U << LPTIM_CFGR_TRIGEN_Pos)            /*!< 0x00020000 */
N#define LPTIM_CFGR_TRIGEN_1         (0x2U << LPTIM_CFGR_TRIGEN_Pos)            /*!< 0x00040000 */
N
N#define LPTIM_CFGR_TIMOUT_Pos       (19U)                                      
N#define LPTIM_CFGR_TIMOUT_Msk       (0x1U << LPTIM_CFGR_TIMOUT_Pos)            /*!< 0x00080000 */
N#define LPTIM_CFGR_TIMOUT           LPTIM_CFGR_TIMOUT_Msk                      /*!< Timout enable */
N#define LPTIM_CFGR_WAVE_Pos         (20U)                                      
N#define LPTIM_CFGR_WAVE_Msk         (0x1U << LPTIM_CFGR_WAVE_Pos)              /*!< 0x00100000 */
N#define LPTIM_CFGR_WAVE             LPTIM_CFGR_WAVE_Msk                        /*!< Waveform shape */
N#define LPTIM_CFGR_WAVPOL_Pos       (21U)                                      
N#define LPTIM_CFGR_WAVPOL_Msk       (0x1U << LPTIM_CFGR_WAVPOL_Pos)            /*!< 0x00200000 */
N#define LPTIM_CFGR_WAVPOL           LPTIM_CFGR_WAVPOL_Msk                      /*!< Waveform shape polarity */
N#define LPTIM_CFGR_PRELOAD_Pos      (22U)                                      
N#define LPTIM_CFGR_PRELOAD_Msk      (0x1U << LPTIM_CFGR_PRELOAD_Pos)           /*!< 0x00400000 */
N#define LPTIM_CFGR_PRELOAD          LPTIM_CFGR_PRELOAD_Msk                     /*!< Reg update mode */
N#define LPTIM_CFGR_COUNTMODE_Pos    (23U)                                      
N#define LPTIM_CFGR_COUNTMODE_Msk    (0x1U << LPTIM_CFGR_COUNTMODE_Pos)         /*!< 0x00800000 */
N#define LPTIM_CFGR_COUNTMODE        LPTIM_CFGR_COUNTMODE_Msk                   /*!< Counter mode enable */
N#define LPTIM_CFGR_ENC_Pos          (24U)                                      
N#define LPTIM_CFGR_ENC_Msk          (0x1U << LPTIM_CFGR_ENC_Pos)               /*!< 0x01000000 */
N#define LPTIM_CFGR_ENC              LPTIM_CFGR_ENC_Msk                         /*!< Encoder mode enable */
N
N/******************  Bit definition for LPTIM_CR register  ********************/
N#define LPTIM_CR_ENABLE_Pos         (0U)                                       
N#define LPTIM_CR_ENABLE_Msk         (0x1U << LPTIM_CR_ENABLE_Pos)              /*!< 0x00000001 */
N#define LPTIM_CR_ENABLE             LPTIM_CR_ENABLE_Msk                        /*!< LPTIMer enable */
N#define LPTIM_CR_SNGSTRT_Pos        (1U)                                       
N#define LPTIM_CR_SNGSTRT_Msk        (0x1U << LPTIM_CR_SNGSTRT_Pos)             /*!< 0x00000002 */
N#define LPTIM_CR_SNGSTRT            LPTIM_CR_SNGSTRT_Msk                       /*!< Timer start in single mode */
N#define LPTIM_CR_CNTSTRT_Pos        (2U)                                       
N#define LPTIM_CR_CNTSTRT_Msk        (0x1U << LPTIM_CR_CNTSTRT_Pos)             /*!< 0x00000004 */
N#define LPTIM_CR_CNTSTRT            LPTIM_CR_CNTSTRT_Msk                       /*!< Timer start in continuous mode */
N
N/******************  Bit definition for LPTIM_CMP register  *******************/
N#define LPTIM_CMP_CMP_Pos           (0U)                                       
N#define LPTIM_CMP_CMP_Msk           (0xFFFFU << LPTIM_CMP_CMP_Pos)             /*!< 0x0000FFFF */
N#define LPTIM_CMP_CMP               LPTIM_CMP_CMP_Msk                          /*!< Compare register */
N
N/******************  Bit definition for LPTIM_ARR register  *******************/
N#define LPTIM_ARR_ARR_Pos           (0U)                                       
N#define LPTIM_ARR_ARR_Msk           (0xFFFFU << LPTIM_ARR_ARR_Pos)             /*!< 0x0000FFFF */
N#define LPTIM_ARR_ARR               LPTIM_ARR_ARR_Msk                          /*!< Auto reload register */
N
N/******************  Bit definition for LPTIM_CNT register  *******************/
N#define LPTIM_CNT_CNT_Pos           (0U)                                       
N#define LPTIM_CNT_CNT_Msk           (0xFFFFU << LPTIM_CNT_CNT_Pos)             /*!< 0x0000FFFF */
N#define LPTIM_CNT_CNT               LPTIM_CNT_CNT_Msk                          /*!< Counter register */
N
N/******************************************************************************/
N/*                                                                            */
N/*                            MIFARE   Firewall                               */
N/*                                                                            */
N/******************************************************************************/
N
N/*******Bit definition for CSSA;CSL;NVDSSA;NVDSL;VDSSA;VDSL register */
N#define FW_CSSA_ADD_Pos      (8U)                                              
N#define FW_CSSA_ADD_Msk      (0xFFFFU << FW_CSSA_ADD_Pos)                      /*!< 0x00FFFF00 */
N#define FW_CSSA_ADD          FW_CSSA_ADD_Msk                                   /*!< Code Segment Start Address */ 
N#define FW_CSL_LENG_Pos      (8U)                                              
N#define FW_CSL_LENG_Msk      (0x3FFFU << FW_CSL_LENG_Pos)                      /*!< 0x003FFF00 */
N#define FW_CSL_LENG          FW_CSL_LENG_Msk                                   /*!< Code Segment Length        */  
N#define FW_NVDSSA_ADD_Pos    (8U)                                              
N#define FW_NVDSSA_ADD_Msk    (0xFFFFU << FW_NVDSSA_ADD_Pos)                    /*!< 0x00FFFF00 */
N#define FW_NVDSSA_ADD        FW_NVDSSA_ADD_Msk                                 /*!< Non Volatile Dat Segment Start Address */ 
N#define FW_NVDSL_LENG_Pos    (8U)                                              
N#define FW_NVDSL_LENG_Msk    (0x3FFFU << FW_NVDSL_LENG_Pos)                    /*!< 0x003FFF00 */
N#define FW_NVDSL_LENG        FW_NVDSL_LENG_Msk                                 /*!< Non Volatile Data Segment Length */ 
N#define FW_VDSSA_ADD_Pos     (6U)                                              
N#define FW_VDSSA_ADD_Msk     (0x3FFU << FW_VDSSA_ADD_Pos)                      /*!< 0x0000FFC0 */
N#define FW_VDSSA_ADD         FW_VDSSA_ADD_Msk                                  /*!< Volatile Data Segment Start Address */ 
N#define FW_VDSL_LENG_Pos     (6U)                                              
N#define FW_VDSL_LENG_Msk     (0x3FFU << FW_VDSL_LENG_Pos)                      /*!< 0x0000FFC0 */
N#define FW_VDSL_LENG         FW_VDSL_LENG_Msk                                  /*!< Volatile Data Segment Length */ 
N
N/**************************Bit definition for CR register *********************/
N#define FW_CR_FPA_Pos        (0U)                                              
N#define FW_CR_FPA_Msk        (0x1U << FW_CR_FPA_Pos)                           /*!< 0x00000001 */
N#define FW_CR_FPA            FW_CR_FPA_Msk                                     /*!< Firewall Pre Arm*/ 
N#define FW_CR_VDS_Pos        (1U)                                              
N#define FW_CR_VDS_Msk        (0x1U << FW_CR_VDS_Pos)                           /*!< 0x00000002 */
N#define FW_CR_VDS            FW_CR_VDS_Msk                                     /*!< Volatile Data Sharing*/ 
N#define FW_CR_VDE_Pos        (2U)                                              
N#define FW_CR_VDE_Msk        (0x1U << FW_CR_VDE_Pos)                           /*!< 0x00000004 */
N#define FW_CR_VDE            FW_CR_VDE_Msk                                     /*!< Volatile Data Execution*/ 
N
N/******************************************************************************/
N/*                                                                            */
N/*                          Power Control (PWR)                               */
N/*                                                                            */
N/******************************************************************************/
N
N#define PWR_PVD_SUPPORT                     /*!< PVD feature available on all devices: Power Voltage Detection feature */
N
N/********************  Bit definition for PWR_CR register  ********************/
N#define PWR_CR_LPSDSR_Pos          (0U)                                        
N#define PWR_CR_LPSDSR_Msk          (0x1U << PWR_CR_LPSDSR_Pos)                 /*!< 0x00000001 */
N#define PWR_CR_LPSDSR              PWR_CR_LPSDSR_Msk                           /*!< Low-power deepsleep/sleep/low power run */
N#define PWR_CR_PDDS_Pos            (1U)                                        
N#define PWR_CR_PDDS_Msk            (0x1U << PWR_CR_PDDS_Pos)                   /*!< 0x00000002 */
N#define PWR_CR_PDDS                PWR_CR_PDDS_Msk                             /*!< Power Down Deepsleep */
N#define PWR_CR_CWUF_Pos            (2U)                                        
N#define PWR_CR_CWUF_Msk            (0x1U << PWR_CR_CWUF_Pos)                   /*!< 0x00000004 */
N#define PWR_CR_CWUF                PWR_CR_CWUF_Msk                             /*!< Clear Wakeup Flag */
N#define PWR_CR_CSBF_Pos            (3U)                                        
N#define PWR_CR_CSBF_Msk            (0x1U << PWR_CR_CSBF_Pos)                   /*!< 0x00000008 */
N#define PWR_CR_CSBF                PWR_CR_CSBF_Msk                             /*!< Clear Standby Flag */
N#define PWR_CR_PVDE_Pos            (4U)                                        
N#define PWR_CR_PVDE_Msk            (0x1U << PWR_CR_PVDE_Pos)                   /*!< 0x00000010 */
N#define PWR_CR_PVDE                PWR_CR_PVDE_Msk                             /*!< Power Voltage Detector Enable */
N
N#define PWR_CR_PLS_Pos             (5U)                                        
N#define PWR_CR_PLS_Msk             (0x7U << PWR_CR_PLS_Pos)                    /*!< 0x000000E0 */
N#define PWR_CR_PLS                 PWR_CR_PLS_Msk                              /*!< PLS[2:0] bits (PVD Level Selection) */
N#define PWR_CR_PLS_0               (0x1U << PWR_CR_PLS_Pos)                    /*!< 0x00000020 */
N#define PWR_CR_PLS_1               (0x2U << PWR_CR_PLS_Pos)                    /*!< 0x00000040 */
N#define PWR_CR_PLS_2               (0x4U << PWR_CR_PLS_Pos)                    /*!< 0x00000080 */
N
N/*!< PVD level configuration */
N#define PWR_CR_PLS_LEV0            (0x00000000U)                               /*!< PVD level 0 */
N#define PWR_CR_PLS_LEV1            (0x00000020U)                               /*!< PVD level 1 */
N#define PWR_CR_PLS_LEV2            (0x00000040U)                               /*!< PVD level 2 */
N#define PWR_CR_PLS_LEV3            (0x00000060U)                               /*!< PVD level 3 */
N#define PWR_CR_PLS_LEV4            (0x00000080U)                               /*!< PVD level 4 */
N#define PWR_CR_PLS_LEV5            (0x000000A0U)                               /*!< PVD level 5 */
N#define PWR_CR_PLS_LEV6            (0x000000C0U)                               /*!< PVD level 6 */
N#define PWR_CR_PLS_LEV7            (0x000000E0U)                               /*!< PVD level 7 */
N
N#define PWR_CR_DBP_Pos             (8U)                                        
N#define PWR_CR_DBP_Msk             (0x1U << PWR_CR_DBP_Pos)                    /*!< 0x00000100 */
N#define PWR_CR_DBP                 PWR_CR_DBP_Msk                              /*!< Disable Backup Domain write protection */
N#define PWR_CR_ULP_Pos             (9U)                                        
N#define PWR_CR_ULP_Msk             (0x1U << PWR_CR_ULP_Pos)                    /*!< 0x00000200 */
N#define PWR_CR_ULP                 PWR_CR_ULP_Msk                              /*!< Ultra Low Power mode */
N#define PWR_CR_FWU_Pos             (10U)                                       
N#define PWR_CR_FWU_Msk             (0x1U << PWR_CR_FWU_Pos)                    /*!< 0x00000400 */
N#define PWR_CR_FWU                 PWR_CR_FWU_Msk                              /*!< Fast wakeup */
N
N#define PWR_CR_VOS_Pos             (11U)                                       
N#define PWR_CR_VOS_Msk             (0x3U << PWR_CR_VOS_Pos)                    /*!< 0x00001800 */
N#define PWR_CR_VOS                 PWR_CR_VOS_Msk                              /*!< VOS[1:0] bits (Voltage scaling range selection) */
N#define PWR_CR_VOS_0               (0x1U << PWR_CR_VOS_Pos)                    /*!< 0x00000800 */
N#define PWR_CR_VOS_1               (0x2U << PWR_CR_VOS_Pos)                    /*!< 0x00001000 */
N#define PWR_CR_DSEEKOFF_Pos        (13U)                                       
N#define PWR_CR_DSEEKOFF_Msk        (0x1U << PWR_CR_DSEEKOFF_Pos)               /*!< 0x00002000 */
N#define PWR_CR_DSEEKOFF            PWR_CR_DSEEKOFF_Msk                         /*!< Deep Sleep mode with EEPROM kept Off */
N#define PWR_CR_LPRUN_Pos           (14U)                                       
N#define PWR_CR_LPRUN_Msk           (0x1U << PWR_CR_LPRUN_Pos)                  /*!< 0x00004000 */
N#define PWR_CR_LPRUN               PWR_CR_LPRUN_Msk                            /*!< Low power run mode */
N
N/*******************  Bit definition for PWR_CSR register  ********************/
N#define PWR_CSR_WUF_Pos            (0U)                                        
N#define PWR_CSR_WUF_Msk            (0x1U << PWR_CSR_WUF_Pos)                   /*!< 0x00000001 */
N#define PWR_CSR_WUF                PWR_CSR_WUF_Msk                             /*!< Wakeup Flag */
N#define PWR_CSR_SBF_Pos            (1U)                                        
N#define PWR_CSR_SBF_Msk            (0x1U << PWR_CSR_SBF_Pos)                   /*!< 0x00000002 */
N#define PWR_CSR_SBF                PWR_CSR_SBF_Msk                             /*!< Standby Flag */
N#define PWR_CSR_PVDO_Pos           (2U)                                        
N#define PWR_CSR_PVDO_Msk           (0x1U << PWR_CSR_PVDO_Pos)                  /*!< 0x00000004 */
N#define PWR_CSR_PVDO               PWR_CSR_PVDO_Msk                            /*!< PVD Output */
N#define PWR_CSR_VREFINTRDYF_Pos    (3U)                                        
N#define PWR_CSR_VREFINTRDYF_Msk    (0x1U << PWR_CSR_VREFINTRDYF_Pos)           /*!< 0x00000008 */
N#define PWR_CSR_VREFINTRDYF        PWR_CSR_VREFINTRDYF_Msk                     /*!< Internal voltage reference (VREFINT) ready flag */
N#define PWR_CSR_VOSF_Pos           (4U)                                        
N#define PWR_CSR_VOSF_Msk           (0x1U << PWR_CSR_VOSF_Pos)                  /*!< 0x00000010 */
N#define PWR_CSR_VOSF               PWR_CSR_VOSF_Msk                            /*!< Voltage Scaling select flag */
N#define PWR_CSR_REGLPF_Pos         (5U)                                        
N#define PWR_CSR_REGLPF_Msk         (0x1U << PWR_CSR_REGLPF_Pos)                /*!< 0x00000020 */
N#define PWR_CSR_REGLPF             PWR_CSR_REGLPF_Msk                          /*!< Regulator LP flag */
N
N#define PWR_CSR_EWUP1_Pos          (8U)                                        
N#define PWR_CSR_EWUP1_Msk          (0x1U << PWR_CSR_EWUP1_Pos)                 /*!< 0x00000100 */
N#define PWR_CSR_EWUP1              PWR_CSR_EWUP1_Msk                           /*!< Enable WKUP pin 1 */
N#define PWR_CSR_EWUP2_Pos          (9U)                                        
N#define PWR_CSR_EWUP2_Msk          (0x1U << PWR_CSR_EWUP2_Pos)                 /*!< 0x00000200 */
N#define PWR_CSR_EWUP2              PWR_CSR_EWUP2_Msk                           /*!< Enable WKUP pin 2 */
N
N/******************************************************************************/
N/*                                                                            */
N/*                         Reset and Clock Control                            */
N/*                                                                            */
N/******************************************************************************/
N
N#define RCC_HSI48_SUPPORT           /*!< HSI48 feature support */
N#define RCC_HSECSS_SUPPORT          /*!< HSE CSS feature activation support */
N
N/********************  Bit definition for RCC_CR register  ********************/
N#define RCC_CR_HSION_Pos                 (0U)                                  
N#define RCC_CR_HSION_Msk                 (0x1U << RCC_CR_HSION_Pos)            /*!< 0x00000001 */
N#define RCC_CR_HSION                     RCC_CR_HSION_Msk                      /*!< Internal High Speed clock enable */
N#define RCC_CR_HSIKERON_Pos              (1U)                                  
N#define RCC_CR_HSIKERON_Msk              (0x1U << RCC_CR_HSIKERON_Pos)         /*!< 0x00000002 */
N#define RCC_CR_HSIKERON                  RCC_CR_HSIKERON_Msk                   /*!< Internal High Speed clock enable for some IPs Kernel */
N#define RCC_CR_HSIRDY_Pos                (2U)                                  
N#define RCC_CR_HSIRDY_Msk                (0x1U << RCC_CR_HSIRDY_Pos)           /*!< 0x00000004 */
N#define RCC_CR_HSIRDY                    RCC_CR_HSIRDY_Msk                     /*!< Internal High Speed clock ready flag */
N#define RCC_CR_HSIDIVEN_Pos              (3U)                                  
N#define RCC_CR_HSIDIVEN_Msk              (0x1U << RCC_CR_HSIDIVEN_Pos)         /*!< 0x00000008 */
N#define RCC_CR_HSIDIVEN                  RCC_CR_HSIDIVEN_Msk                   /*!< Internal High Speed clock divider enable */
N#define RCC_CR_HSIDIVF_Pos               (4U)                                  
N#define RCC_CR_HSIDIVF_Msk               (0x1U << RCC_CR_HSIDIVF_Pos)          /*!< 0x00000010 */
N#define RCC_CR_HSIDIVF                   RCC_CR_HSIDIVF_Msk                    /*!< Internal High Speed clock divider flag */
N#define RCC_CR_MSION_Pos                 (8U)                                  
N#define RCC_CR_MSION_Msk                 (0x1U << RCC_CR_MSION_Pos)            /*!< 0x00000100 */
N#define RCC_CR_MSION                     RCC_CR_MSION_Msk                      /*!< Internal Multi Speed clock enable */
N#define RCC_CR_MSIRDY_Pos                (9U)                                  
N#define RCC_CR_MSIRDY_Msk                (0x1U << RCC_CR_MSIRDY_Pos)           /*!< 0x00000200 */
N#define RCC_CR_MSIRDY                    RCC_CR_MSIRDY_Msk                     /*!< Internal Multi Speed clock ready flag */
N#define RCC_CR_HSEON_Pos                 (16U)                                 
N#define RCC_CR_HSEON_Msk                 (0x1U << RCC_CR_HSEON_Pos)            /*!< 0x00010000 */
N#define RCC_CR_HSEON                     RCC_CR_HSEON_Msk                      /*!< External High Speed clock enable */
N#define RCC_CR_HSERDY_Pos                (17U)                                 
N#define RCC_CR_HSERDY_Msk                (0x1U << RCC_CR_HSERDY_Pos)           /*!< 0x00020000 */
N#define RCC_CR_HSERDY                    RCC_CR_HSERDY_Msk                     /*!< External High Speed clock ready flag */
N#define RCC_CR_HSEBYP_Pos                (18U)                                 
N#define RCC_CR_HSEBYP_Msk                (0x1U << RCC_CR_HSEBYP_Pos)           /*!< 0x00040000 */
N#define RCC_CR_HSEBYP                    RCC_CR_HSEBYP_Msk                     /*!< External High Speed clock Bypass */
N#define RCC_CR_CSSHSEON_Pos              (19U)                                 
N#define RCC_CR_CSSHSEON_Msk              (0x1U << RCC_CR_CSSHSEON_Pos)         /*!< 0x00080000 */
N#define RCC_CR_CSSHSEON                  RCC_CR_CSSHSEON_Msk                   /*!< HSE Clock Security System enable */
N#define RCC_CR_RTCPRE_Pos                (20U)                                 
N#define RCC_CR_RTCPRE_Msk                (0x3U << RCC_CR_RTCPRE_Pos)           /*!< 0x00300000 */
N#define RCC_CR_RTCPRE                    RCC_CR_RTCPRE_Msk                     /*!< RTC/LCD prescaler [1:0] bits */
N#define RCC_CR_RTCPRE_0                  (0x1U << RCC_CR_RTCPRE_Pos)           /*!< 0x00100000 */
N#define RCC_CR_RTCPRE_1                  (0x2U << RCC_CR_RTCPRE_Pos)           /*!< 0x00200000 */
N#define RCC_CR_PLLON_Pos                 (24U)                                 
N#define RCC_CR_PLLON_Msk                 (0x1U << RCC_CR_PLLON_Pos)            /*!< 0x01000000 */
N#define RCC_CR_PLLON                     RCC_CR_PLLON_Msk                      /*!< PLL enable */
N#define RCC_CR_PLLRDY_Pos                (25U)                                 
N#define RCC_CR_PLLRDY_Msk                (0x1U << RCC_CR_PLLRDY_Pos)           /*!< 0x02000000 */
N#define RCC_CR_PLLRDY                    RCC_CR_PLLRDY_Msk                     /*!< PLL clock ready flag */
N
N/* Reference defines */
N#define RCC_CR_CSSON     RCC_CR_CSSHSEON
N
N/********************  Bit definition for RCC_ICSCR register  *****************/
N#define RCC_ICSCR_HSICAL_Pos             (0U)                                  
N#define RCC_ICSCR_HSICAL_Msk             (0xFFU << RCC_ICSCR_HSICAL_Pos)       /*!< 0x000000FF */
N#define RCC_ICSCR_HSICAL                 RCC_ICSCR_HSICAL_Msk                  /*!< Internal High Speed clock Calibration */
N#define RCC_ICSCR_HSITRIM_Pos            (8U)                                  
N#define RCC_ICSCR_HSITRIM_Msk            (0x1FU << RCC_ICSCR_HSITRIM_Pos)      /*!< 0x00001F00 */
N#define RCC_ICSCR_HSITRIM                RCC_ICSCR_HSITRIM_Msk                 /*!< Internal High Speed clock trimming */
N
N#define RCC_ICSCR_MSIRANGE_Pos           (13U)                                 
N#define RCC_ICSCR_MSIRANGE_Msk           (0x7U << RCC_ICSCR_MSIRANGE_Pos)      /*!< 0x0000E000 */
N#define RCC_ICSCR_MSIRANGE               RCC_ICSCR_MSIRANGE_Msk                /*!< Internal Multi Speed clock Range */
N#define RCC_ICSCR_MSIRANGE_0             (0x0U << RCC_ICSCR_MSIRANGE_Pos)      /*!< 0x00000000 */
N#define RCC_ICSCR_MSIRANGE_1             (0x1U << RCC_ICSCR_MSIRANGE_Pos)      /*!< 0x00002000 */
N#define RCC_ICSCR_MSIRANGE_2             (0x2U << RCC_ICSCR_MSIRANGE_Pos)      /*!< 0x00004000 */
N#define RCC_ICSCR_MSIRANGE_3             (0x3U << RCC_ICSCR_MSIRANGE_Pos)      /*!< 0x00006000 */
N#define RCC_ICSCR_MSIRANGE_4             (0x4U << RCC_ICSCR_MSIRANGE_Pos)      /*!< 0x00008000 */
N#define RCC_ICSCR_MSIRANGE_5             (0x5U << RCC_ICSCR_MSIRANGE_Pos)      /*!< 0x0000A000 */
N#define RCC_ICSCR_MSIRANGE_6             (0x6U << RCC_ICSCR_MSIRANGE_Pos)      /*!< 0x0000C000 */
N#define RCC_ICSCR_MSICAL_Pos             (16U)                                 
N#define RCC_ICSCR_MSICAL_Msk             (0xFFU << RCC_ICSCR_MSICAL_Pos)       /*!< 0x00FF0000 */
N#define RCC_ICSCR_MSICAL                 RCC_ICSCR_MSICAL_Msk                  /*!< Internal Multi Speed clock Calibration */
N#define RCC_ICSCR_MSITRIM_Pos            (24U)                                 
N#define RCC_ICSCR_MSITRIM_Msk            (0xFFU << RCC_ICSCR_MSITRIM_Pos)      /*!< 0xFF000000 */
N#define RCC_ICSCR_MSITRIM                RCC_ICSCR_MSITRIM_Msk                 /*!< Internal Multi Speed clock trimming */
N
N/********************  Bit definition for RCC_CRRCR register  *****************/
N#define RCC_CRRCR_HSI48ON_Pos            (0U)                                  
N#define RCC_CRRCR_HSI48ON_Msk            (0x1U << RCC_CRRCR_HSI48ON_Pos)       /*!< 0x00000001 */
N#define RCC_CRRCR_HSI48ON                RCC_CRRCR_HSI48ON_Msk                 /*!< HSI 48MHz clock enable */
N#define RCC_CRRCR_HSI48RDY_Pos           (1U)                                  
N#define RCC_CRRCR_HSI48RDY_Msk           (0x1U << RCC_CRRCR_HSI48RDY_Pos)      /*!< 0x00000002 */
N#define RCC_CRRCR_HSI48RDY               RCC_CRRCR_HSI48RDY_Msk                /*!< HSI 48MHz clock ready flag */
N#define RCC_CRRCR_HSI48CAL_Pos           (8U)                                  
N#define RCC_CRRCR_HSI48CAL_Msk           (0xFFU << RCC_CRRCR_HSI48CAL_Pos)     /*!< 0x0000FF00 */
N#define RCC_CRRCR_HSI48CAL               RCC_CRRCR_HSI48CAL_Msk                /*!< HSI 48MHz clock Calibration */
N
N/*******************  Bit definition for RCC_CFGR register  *******************/
N/*!< SW configuration */
N#define RCC_CFGR_SW_Pos                      (0U)                              
N#define RCC_CFGR_SW_Msk                      (0x3U << RCC_CFGR_SW_Pos)         /*!< 0x00000003 */
N#define RCC_CFGR_SW                          RCC_CFGR_SW_Msk                   /*!< SW[1:0] bits (System clock Switch) */
N#define RCC_CFGR_SW_0                        (0x1U << RCC_CFGR_SW_Pos)         /*!< 0x00000001 */
N#define RCC_CFGR_SW_1                        (0x2U << RCC_CFGR_SW_Pos)         /*!< 0x00000002 */
N
N#define RCC_CFGR_SW_MSI                      (0x00000000U)                     /*!< MSI selected as system clock */
N#define RCC_CFGR_SW_HSI                      (0x00000001U)                     /*!< HSI selected as system clock */
N#define RCC_CFGR_SW_HSE                      (0x00000002U)                     /*!< HSE selected as system clock */
N#define RCC_CFGR_SW_PLL                      (0x00000003U)                     /*!< PLL selected as system clock */
N
N/*!< SWS configuration */
N#define RCC_CFGR_SWS_Pos                     (2U)                              
N#define RCC_CFGR_SWS_Msk                     (0x3U << RCC_CFGR_SWS_Pos)        /*!< 0x0000000C */
N#define RCC_CFGR_SWS                         RCC_CFGR_SWS_Msk                  /*!< SWS[1:0] bits (System Clock Switch Status) */
N#define RCC_CFGR_SWS_0                       (0x1U << RCC_CFGR_SWS_Pos)        /*!< 0x00000004 */
N#define RCC_CFGR_SWS_1                       (0x2U << RCC_CFGR_SWS_Pos)        /*!< 0x00000008 */
N
N#define RCC_CFGR_SWS_MSI                     (0x00000000U)                     /*!< MSI oscillator used as system clock */
N#define RCC_CFGR_SWS_HSI                     (0x00000004U)                     /*!< HSI oscillator used as system clock */
N#define RCC_CFGR_SWS_HSE                     (0x00000008U)                     /*!< HSE oscillator used as system clock */
N#define RCC_CFGR_SWS_PLL                     (0x0000000CU)                     /*!< PLL used as system clock */
N
N/*!< HPRE configuration */
N#define RCC_CFGR_HPRE_Pos                    (4U)                              
N#define RCC_CFGR_HPRE_Msk                    (0xFU << RCC_CFGR_HPRE_Pos)       /*!< 0x000000F0 */
N#define RCC_CFGR_HPRE                        RCC_CFGR_HPRE_Msk                 /*!< HPRE[3:0] bits (AHB prescaler) */
N#define RCC_CFGR_HPRE_0                      (0x1U << RCC_CFGR_HPRE_Pos)       /*!< 0x00000010 */
N#define RCC_CFGR_HPRE_1                      (0x2U << RCC_CFGR_HPRE_Pos)       /*!< 0x00000020 */
N#define RCC_CFGR_HPRE_2                      (0x4U << RCC_CFGR_HPRE_Pos)       /*!< 0x00000040 */
N#define RCC_CFGR_HPRE_3                      (0x8U << RCC_CFGR_HPRE_Pos)       /*!< 0x00000080 */
N
N#define RCC_CFGR_HPRE_DIV1                   (0x00000000U)                     /*!< SYSCLK not divided */
N#define RCC_CFGR_HPRE_DIV2                   (0x00000080U)                     /*!< SYSCLK divided by 2 */
N#define RCC_CFGR_HPRE_DIV4                   (0x00000090U)                     /*!< SYSCLK divided by 4 */
N#define RCC_CFGR_HPRE_DIV8                   (0x000000A0U)                     /*!< SYSCLK divided by 8 */
N#define RCC_CFGR_HPRE_DIV16                  (0x000000B0U)                     /*!< SYSCLK divided by 16 */
N#define RCC_CFGR_HPRE_DIV64                  (0x000000C0U)                     /*!< SYSCLK divided by 64 */
N#define RCC_CFGR_HPRE_DIV128                 (0x000000D0U)                     /*!< SYSCLK divided by 128 */
N#define RCC_CFGR_HPRE_DIV256                 (0x000000E0U)                     /*!< SYSCLK divided by 256 */
N#define RCC_CFGR_HPRE_DIV512                 (0x000000F0U)                     /*!< SYSCLK divided by 512 */
N
N/*!< PPRE1 configuration */
N#define RCC_CFGR_PPRE1_Pos                   (8U)                              
N#define RCC_CFGR_PPRE1_Msk                   (0x7U << RCC_CFGR_PPRE1_Pos)      /*!< 0x00000700 */
N#define RCC_CFGR_PPRE1                       RCC_CFGR_PPRE1_Msk                /*!< PRE1[2:0] bits (APB1 prescaler) */
N#define RCC_CFGR_PPRE1_0                     (0x1U << RCC_CFGR_PPRE1_Pos)      /*!< 0x00000100 */
N#define RCC_CFGR_PPRE1_1                     (0x2U << RCC_CFGR_PPRE1_Pos)      /*!< 0x00000200 */
N#define RCC_CFGR_PPRE1_2                     (0x4U << RCC_CFGR_PPRE1_Pos)      /*!< 0x00000400 */
N
N#define RCC_CFGR_PPRE1_DIV1                  (0x00000000U)                     /*!< HCLK not divided */
N#define RCC_CFGR_PPRE1_DIV2                  (0x00000400U)                     /*!< HCLK divided by 2 */
N#define RCC_CFGR_PPRE1_DIV4                  (0x00000500U)                     /*!< HCLK divided by 4 */
N#define RCC_CFGR_PPRE1_DIV8                  (0x00000600U)                     /*!< HCLK divided by 8 */
N#define RCC_CFGR_PPRE1_DIV16                 (0x00000700U)                     /*!< HCLK divided by 16 */
N
N/*!< PPRE2 configuration */
N#define RCC_CFGR_PPRE2_Pos                   (11U)                             
N#define RCC_CFGR_PPRE2_Msk                   (0x7U << RCC_CFGR_PPRE2_Pos)      /*!< 0x00003800 */
N#define RCC_CFGR_PPRE2                       RCC_CFGR_PPRE2_Msk                /*!< PRE2[2:0] bits (APB2 prescaler) */
N#define RCC_CFGR_PPRE2_0                     (0x1U << RCC_CFGR_PPRE2_Pos)      /*!< 0x00000800 */
N#define RCC_CFGR_PPRE2_1                     (0x2U << RCC_CFGR_PPRE2_Pos)      /*!< 0x00001000 */
N#define RCC_CFGR_PPRE2_2                     (0x4U << RCC_CFGR_PPRE2_Pos)      /*!< 0x00002000 */
N
N#define RCC_CFGR_PPRE2_DIV1                  (0x00000000U)                     /*!< HCLK not divided */
N#define RCC_CFGR_PPRE2_DIV2                  (0x00002000U)                     /*!< HCLK divided by 2 */
N#define RCC_CFGR_PPRE2_DIV4                  (0x00002800U)                     /*!< HCLK divided by 4 */
N#define RCC_CFGR_PPRE2_DIV8                  (0x00003000U)                     /*!< HCLK divided by 8 */
N#define RCC_CFGR_PPRE2_DIV16                 (0x00003800U)                     /*!< HCLK divided by 16 */
N
N#define RCC_CFGR_STOPWUCK_Pos                (15U)                             
N#define RCC_CFGR_STOPWUCK_Msk                (0x1U << RCC_CFGR_STOPWUCK_Pos)   /*!< 0x00008000 */
N#define RCC_CFGR_STOPWUCK                    RCC_CFGR_STOPWUCK_Msk             /*!< Wake Up from Stop Clock selection */
N
N/*!< PLL entry clock source*/
N#define RCC_CFGR_PLLSRC_Pos                  (16U)                             
N#define RCC_CFGR_PLLSRC_Msk                  (0x1U << RCC_CFGR_PLLSRC_Pos)     /*!< 0x00010000 */
N#define RCC_CFGR_PLLSRC                      RCC_CFGR_PLLSRC_Msk               /*!< PLL entry clock source */
N
N#define RCC_CFGR_PLLSRC_HSI                  (0x00000000U)                     /*!< HSI as PLL entry clock source */
N#define RCC_CFGR_PLLSRC_HSE                  (0x00010000U)                     /*!< HSE as PLL entry clock source */
N
N
N/*!< PLLMUL configuration */
N#define RCC_CFGR_PLLMUL_Pos                  (18U)                             
N#define RCC_CFGR_PLLMUL_Msk                  (0xFU << RCC_CFGR_PLLMUL_Pos)     /*!< 0x003C0000 */
N#define RCC_CFGR_PLLMUL                      RCC_CFGR_PLLMUL_Msk               /*!< PLLMUL[3:0] bits (PLL multiplication factor) */
N#define RCC_CFGR_PLLMUL_0                    (0x1U << RCC_CFGR_PLLMUL_Pos)     /*!< 0x00040000 */
N#define RCC_CFGR_PLLMUL_1                    (0x2U << RCC_CFGR_PLLMUL_Pos)     /*!< 0x00080000 */
N#define RCC_CFGR_PLLMUL_2                    (0x4U << RCC_CFGR_PLLMUL_Pos)     /*!< 0x00100000 */
N#define RCC_CFGR_PLLMUL_3                    (0x8U << RCC_CFGR_PLLMUL_Pos)     /*!< 0x00200000 */
N
N#define RCC_CFGR_PLLMUL3                     (0x00000000U)                     /*!< PLL input clock * 3 */
N#define RCC_CFGR_PLLMUL4                     (0x00040000U)                     /*!< PLL input clock * 4 */
N#define RCC_CFGR_PLLMUL6                     (0x00080000U)                     /*!< PLL input clock * 6 */
N#define RCC_CFGR_PLLMUL8                     (0x000C0000U)                     /*!< PLL input clock * 8 */
N#define RCC_CFGR_PLLMUL12                    (0x00100000U)                     /*!< PLL input clock * 12 */
N#define RCC_CFGR_PLLMUL16                    (0x00140000U)                     /*!< PLL input clock * 16 */
N#define RCC_CFGR_PLLMUL24                    (0x00180000U)                     /*!< PLL input clock * 24 */
N#define RCC_CFGR_PLLMUL32                    (0x001C0000U)                     /*!< PLL input clock * 32 */
N#define RCC_CFGR_PLLMUL48                    (0x00200000U)                     /*!< PLL input clock * 48 */
N
N/*!< PLLDIV configuration */
N#define RCC_CFGR_PLLDIV_Pos                  (22U)                             
N#define RCC_CFGR_PLLDIV_Msk                  (0x3U << RCC_CFGR_PLLDIV_Pos)     /*!< 0x00C00000 */
N#define RCC_CFGR_PLLDIV                      RCC_CFGR_PLLDIV_Msk               /*!< PLLDIV[1:0] bits (PLL Output Division) */
N#define RCC_CFGR_PLLDIV_0                    (0x1U << RCC_CFGR_PLLDIV_Pos)     /*!< 0x00400000 */
N#define RCC_CFGR_PLLDIV_1                    (0x2U << RCC_CFGR_PLLDIV_Pos)     /*!< 0x00800000 */
N
N#define RCC_CFGR_PLLDIV2_Pos                 (22U)                             
N#define RCC_CFGR_PLLDIV2_Msk                 (0x1U << RCC_CFGR_PLLDIV2_Pos)    /*!< 0x00400000 */
N#define RCC_CFGR_PLLDIV2                     RCC_CFGR_PLLDIV2_Msk              /*!< PLL clock output = CKVCO / 2 */
N#define RCC_CFGR_PLLDIV3_Pos                 (23U)                             
N#define RCC_CFGR_PLLDIV3_Msk                 (0x1U << RCC_CFGR_PLLDIV3_Pos)    /*!< 0x00800000 */
N#define RCC_CFGR_PLLDIV3                     RCC_CFGR_PLLDIV3_Msk              /*!< PLL clock output = CKVCO / 3 */
N#define RCC_CFGR_PLLDIV4_Pos                 (22U)                             
N#define RCC_CFGR_PLLDIV4_Msk                 (0x3U << RCC_CFGR_PLLDIV4_Pos)    /*!< 0x00C00000 */
N#define RCC_CFGR_PLLDIV4                     RCC_CFGR_PLLDIV4_Msk              /*!< PLL clock output = CKVCO / 4 */
N
N/*!< MCO configuration */
N#define RCC_CFGR_MCOSEL_Pos                  (24U)                             
N#define RCC_CFGR_MCOSEL_Msk                  (0xFU << RCC_CFGR_MCOSEL_Pos)     /*!< 0x0F000000 */
N#define RCC_CFGR_MCOSEL                      RCC_CFGR_MCOSEL_Msk               /*!< MCO[3:0] bits (Microcontroller Clock Output) */
N#define RCC_CFGR_MCOSEL_0                    (0x1U << RCC_CFGR_MCOSEL_Pos)     /*!< 0x01000000 */
N#define RCC_CFGR_MCOSEL_1                    (0x2U << RCC_CFGR_MCOSEL_Pos)     /*!< 0x02000000 */
N#define RCC_CFGR_MCOSEL_2                    (0x4U << RCC_CFGR_MCOSEL_Pos)     /*!< 0x04000000 */
N#define RCC_CFGR_MCOSEL_3                    (0x8U << RCC_CFGR_MCOSEL_Pos)     /*!< 0x08000000 */
N
N#define RCC_CFGR_MCOSEL_NOCLOCK              (0x00000000U)                     /*!< No clock */
N#define RCC_CFGR_MCOSEL_SYSCLK_Pos           (24U)                             
N#define RCC_CFGR_MCOSEL_SYSCLK_Msk           (0x1U << RCC_CFGR_MCOSEL_SYSCLK_Pos) /*!< 0x01000000 */
N#define RCC_CFGR_MCOSEL_SYSCLK               RCC_CFGR_MCOSEL_SYSCLK_Msk        /*!< System clock selected as MCO source */
N#define RCC_CFGR_MCOSEL_HSI_Pos              (25U)                             
N#define RCC_CFGR_MCOSEL_HSI_Msk              (0x1U << RCC_CFGR_MCOSEL_HSI_Pos) /*!< 0x02000000 */
N#define RCC_CFGR_MCOSEL_HSI                  RCC_CFGR_MCOSEL_HSI_Msk           /*!< Internal 16 MHz RC oscillator clock selected */
N#define RCC_CFGR_MCOSEL_MSI_Pos              (24U)                             
N#define RCC_CFGR_MCOSEL_MSI_Msk              (0x3U << RCC_CFGR_MCOSEL_MSI_Pos) /*!< 0x03000000 */
N#define RCC_CFGR_MCOSEL_MSI                  RCC_CFGR_MCOSEL_MSI_Msk           /*!< Internal Medium Speed RC oscillator clock selected */
N#define RCC_CFGR_MCOSEL_HSE_Pos              (26U)                             
N#define RCC_CFGR_MCOSEL_HSE_Msk              (0x1U << RCC_CFGR_MCOSEL_HSE_Pos) /*!< 0x04000000 */
N#define RCC_CFGR_MCOSEL_HSE                  RCC_CFGR_MCOSEL_HSE_Msk           /*!< External 1-25 MHz oscillator clock selected */
N#define RCC_CFGR_MCOSEL_PLL_Pos              (24U)                             
N#define RCC_CFGR_MCOSEL_PLL_Msk              (0x5U << RCC_CFGR_MCOSEL_PLL_Pos) /*!< 0x05000000 */
N#define RCC_CFGR_MCOSEL_PLL                  RCC_CFGR_MCOSEL_PLL_Msk           /*!< PLL clock divided */
N#define RCC_CFGR_MCOSEL_LSI_Pos              (25U)                             
N#define RCC_CFGR_MCOSEL_LSI_Msk              (0x3U << RCC_CFGR_MCOSEL_LSI_Pos) /*!< 0x06000000 */
N#define RCC_CFGR_MCOSEL_LSI                  RCC_CFGR_MCOSEL_LSI_Msk           /*!< LSI selected */
N#define RCC_CFGR_MCOSEL_LSE_Pos              (24U)                             
N#define RCC_CFGR_MCOSEL_LSE_Msk              (0x7U << RCC_CFGR_MCOSEL_LSE_Pos) /*!< 0x07000000 */
N#define RCC_CFGR_MCOSEL_LSE                  RCC_CFGR_MCOSEL_LSE_Msk           /*!< LSE selected */
N#define RCC_CFGR_MCOSEL_HSI48_Pos            (27U)                             
N#define RCC_CFGR_MCOSEL_HSI48_Msk            (0x1U << RCC_CFGR_MCOSEL_HSI48_Pos) /*!< 0x08000000 */
N#define RCC_CFGR_MCOSEL_HSI48                RCC_CFGR_MCOSEL_HSI48_Msk         /*!< HSI48 clock selected as MCO source */
N
N#define RCC_CFGR_MCOPRE_Pos                  (28U)                             
N#define RCC_CFGR_MCOPRE_Msk                  (0x7U << RCC_CFGR_MCOPRE_Pos)     /*!< 0x70000000 */
N#define RCC_CFGR_MCOPRE                      RCC_CFGR_MCOPRE_Msk               /*!< MCO prescaler */
N#define RCC_CFGR_MCOPRE_0                    (0x1U << RCC_CFGR_MCOPRE_Pos)     /*!< 0x10000000 */
N#define RCC_CFGR_MCOPRE_1                    (0x2U << RCC_CFGR_MCOPRE_Pos)     /*!< 0x20000000 */
N#define RCC_CFGR_MCOPRE_2                    (0x4U << RCC_CFGR_MCOPRE_Pos)     /*!< 0x40000000 */
N
N#define RCC_CFGR_MCOPRE_DIV1                 (0x00000000U)                     /*!< MCO is divided by 1 */
N#define RCC_CFGR_MCOPRE_DIV2                 (0x10000000U)                     /*!< MCO is divided by 2 */
N#define RCC_CFGR_MCOPRE_DIV4                 (0x20000000U)                     /*!< MCO is divided by 4 */
N#define RCC_CFGR_MCOPRE_DIV8                 (0x30000000U)                     /*!< MCO is divided by 8 */
N#define RCC_CFGR_MCOPRE_DIV16                (0x40000000U)                     /*!< MCO is divided by 16 */
N
N/* Legacy defines */
N#define RCC_CFGR_MCO_NOCLOCK   RCC_CFGR_MCOSEL_NOCLOCK   
N#define RCC_CFGR_MCO_SYSCLK    RCC_CFGR_MCOSEL_SYSCLK    
N#define RCC_CFGR_MCO_HSI       RCC_CFGR_MCOSEL_HSI       
N#define RCC_CFGR_MCO_MSI       RCC_CFGR_MCOSEL_MSI       
N#define RCC_CFGR_MCO_HSE       RCC_CFGR_MCOSEL_HSE       
N#define RCC_CFGR_MCO_PLL       RCC_CFGR_MCOSEL_PLL       
N#define RCC_CFGR_MCO_LSI       RCC_CFGR_MCOSEL_LSI       
N#define RCC_CFGR_MCO_LSE       RCC_CFGR_MCOSEL_LSE       
N#define RCC_CFGR_MCO_HSI48     RCC_CFGR_MCOSEL_HSI48   
N
N#define RCC_CFGR_MCO_PRE                    RCC_CFGR_MCOPRE          /*!< MCO prescaler */
N#define RCC_CFGR_MCO_PRE_1                  RCC_CFGR_MCOPRE_DIV1        /*!< MCO is divided by 1 */
N#define RCC_CFGR_MCO_PRE_2                  RCC_CFGR_MCOPRE_DIV2        /*!< MCO is divided by 1 */
N#define RCC_CFGR_MCO_PRE_4                  RCC_CFGR_MCOPRE_DIV4        /*!< MCO is divided by 1 */
N#define RCC_CFGR_MCO_PRE_8                  RCC_CFGR_MCOPRE_DIV8        /*!< MCO is divided by 1 */
N#define RCC_CFGR_MCO_PRE_16                 RCC_CFGR_MCOPRE_DIV16       /*!< MCO is divided by 1 */
N
N/*!<******************  Bit definition for RCC_CIER register  ********************/
N#define RCC_CIER_LSIRDYIE_Pos            (0U)                                  
N#define RCC_CIER_LSIRDYIE_Msk            (0x1U << RCC_CIER_LSIRDYIE_Pos)       /*!< 0x00000001 */
N#define RCC_CIER_LSIRDYIE                RCC_CIER_LSIRDYIE_Msk                 /*!< LSI Ready Interrupt Enable */
N#define RCC_CIER_LSERDYIE_Pos            (1U)                                  
N#define RCC_CIER_LSERDYIE_Msk            (0x1U << RCC_CIER_LSERDYIE_Pos)       /*!< 0x00000002 */
N#define RCC_CIER_LSERDYIE                RCC_CIER_LSERDYIE_Msk                 /*!< LSE Ready Interrupt Enable */
N#define RCC_CIER_HSIRDYIE_Pos            (2U)                                  
N#define RCC_CIER_HSIRDYIE_Msk            (0x1U << RCC_CIER_HSIRDYIE_Pos)       /*!< 0x00000004 */
N#define RCC_CIER_HSIRDYIE                RCC_CIER_HSIRDYIE_Msk                 /*!< HSI Ready Interrupt Enable */
N#define RCC_CIER_HSERDYIE_Pos            (3U)                                  
N#define RCC_CIER_HSERDYIE_Msk            (0x1U << RCC_CIER_HSERDYIE_Pos)       /*!< 0x00000008 */
N#define RCC_CIER_HSERDYIE                RCC_CIER_HSERDYIE_Msk                 /*!< HSE Ready Interrupt Enable */
N#define RCC_CIER_PLLRDYIE_Pos            (4U)                                  
N#define RCC_CIER_PLLRDYIE_Msk            (0x1U << RCC_CIER_PLLRDYIE_Pos)       /*!< 0x00000010 */
N#define RCC_CIER_PLLRDYIE                RCC_CIER_PLLRDYIE_Msk                 /*!< PLL Ready Interrupt Enable */
N#define RCC_CIER_MSIRDYIE_Pos            (5U)                                  
N#define RCC_CIER_MSIRDYIE_Msk            (0x1U << RCC_CIER_MSIRDYIE_Pos)       /*!< 0x00000020 */
N#define RCC_CIER_MSIRDYIE                RCC_CIER_MSIRDYIE_Msk                 /*!< MSI Ready Interrupt Enable */
N#define RCC_CIER_HSI48RDYIE_Pos          (6U)                                  
N#define RCC_CIER_HSI48RDYIE_Msk          (0x1U << RCC_CIER_HSI48RDYIE_Pos)     /*!< 0x00000040 */
N#define RCC_CIER_HSI48RDYIE              RCC_CIER_HSI48RDYIE_Msk               /*!< HSI48 Ready Interrupt Enable */
N#define RCC_CIER_CSSLSE_Pos              (7U)                                  
N#define RCC_CIER_CSSLSE_Msk              (0x1U << RCC_CIER_CSSLSE_Pos)         /*!< 0x00000080 */
N#define RCC_CIER_CSSLSE                  RCC_CIER_CSSLSE_Msk                   /*!< LSE CSS Interrupt Enable */
N
N/* Reference defines */
N#define RCC_CIER_LSECSSIE                    RCC_CIER_CSSLSE
N
N/*!<******************  Bit definition for RCC_CIFR register  ********************/
N#define RCC_CIFR_LSIRDYF_Pos             (0U)                                  
N#define RCC_CIFR_LSIRDYF_Msk             (0x1U << RCC_CIFR_LSIRDYF_Pos)        /*!< 0x00000001 */
N#define RCC_CIFR_LSIRDYF                 RCC_CIFR_LSIRDYF_Msk                  /*!< LSI Ready Interrupt flag */
N#define RCC_CIFR_LSERDYF_Pos             (1U)                                  
N#define RCC_CIFR_LSERDYF_Msk             (0x1U << RCC_CIFR_LSERDYF_Pos)        /*!< 0x00000002 */
N#define RCC_CIFR_LSERDYF                 RCC_CIFR_LSERDYF_Msk                  /*!< LSE Ready Interrupt flag */
N#define RCC_CIFR_HSIRDYF_Pos             (2U)                                  
N#define RCC_CIFR_HSIRDYF_Msk             (0x1U << RCC_CIFR_HSIRDYF_Pos)        /*!< 0x00000004 */
N#define RCC_CIFR_HSIRDYF                 RCC_CIFR_HSIRDYF_Msk                  /*!< HSI Ready Interrupt flag */
N#define RCC_CIFR_HSERDYF_Pos             (3U)                                  
N#define RCC_CIFR_HSERDYF_Msk             (0x1U << RCC_CIFR_HSERDYF_Pos)        /*!< 0x00000008 */
N#define RCC_CIFR_HSERDYF                 RCC_CIFR_HSERDYF_Msk                  /*!< HSE Ready Interrupt flag */
N#define RCC_CIFR_PLLRDYF_Pos             (4U)                                  
N#define RCC_CIFR_PLLRDYF_Msk             (0x1U << RCC_CIFR_PLLRDYF_Pos)        /*!< 0x00000010 */
N#define RCC_CIFR_PLLRDYF                 RCC_CIFR_PLLRDYF_Msk                  /*!< PLL Ready Interrupt flag */
N#define RCC_CIFR_MSIRDYF_Pos             (5U)                                  
N#define RCC_CIFR_MSIRDYF_Msk             (0x1U << RCC_CIFR_MSIRDYF_Pos)        /*!< 0x00000020 */
N#define RCC_CIFR_MSIRDYF                 RCC_CIFR_MSIRDYF_Msk                  /*!< MSI Ready Interrupt flag */
N#define RCC_CIFR_HSI48RDYF_Pos           (6U)                                  
N#define RCC_CIFR_HSI48RDYF_Msk           (0x1U << RCC_CIFR_HSI48RDYF_Pos)      /*!< 0x00000040 */
N#define RCC_CIFR_HSI48RDYF               RCC_CIFR_HSI48RDYF_Msk                /*!< HSI48 Ready Interrupt flag */
N#define RCC_CIFR_CSSLSEF_Pos             (7U)                                  
N#define RCC_CIFR_CSSLSEF_Msk             (0x1U << RCC_CIFR_CSSLSEF_Pos)        /*!< 0x00000080 */
N#define RCC_CIFR_CSSLSEF                 RCC_CIFR_CSSLSEF_Msk                  /*!< LSE Clock Security System Interrupt flag */
N#define RCC_CIFR_CSSHSEF_Pos             (8U)                                  
N#define RCC_CIFR_CSSHSEF_Msk             (0x1U << RCC_CIFR_CSSHSEF_Pos)        /*!< 0x00000100 */
N#define RCC_CIFR_CSSHSEF                 RCC_CIFR_CSSHSEF_Msk                  /*!< HSE Clock Security System Interrupt flag */
N
N/* Reference defines */
N#define RCC_CIFR_LSECSSF                    RCC_CIFR_CSSLSEF
N#define RCC_CIFR_CSSF                       RCC_CIFR_CSSHSEF
N
N/*!<******************  Bit definition for RCC_CICR register  ********************/
N#define RCC_CICR_LSIRDYC_Pos             (0U)                                  
N#define RCC_CICR_LSIRDYC_Msk             (0x1U << RCC_CICR_LSIRDYC_Pos)        /*!< 0x00000001 */
N#define RCC_CICR_LSIRDYC                 RCC_CICR_LSIRDYC_Msk                  /*!< LSI Ready Interrupt Clear */
N#define RCC_CICR_LSERDYC_Pos             (1U)                                  
N#define RCC_CICR_LSERDYC_Msk             (0x1U << RCC_CICR_LSERDYC_Pos)        /*!< 0x00000002 */
N#define RCC_CICR_LSERDYC                 RCC_CICR_LSERDYC_Msk                  /*!< LSE Ready Interrupt Clear */
N#define RCC_CICR_HSIRDYC_Pos             (2U)                                  
N#define RCC_CICR_HSIRDYC_Msk             (0x1U << RCC_CICR_HSIRDYC_Pos)        /*!< 0x00000004 */
N#define RCC_CICR_HSIRDYC                 RCC_CICR_HSIRDYC_Msk                  /*!< HSI Ready Interrupt Clear */
N#define RCC_CICR_HSERDYC_Pos             (3U)                                  
N#define RCC_CICR_HSERDYC_Msk             (0x1U << RCC_CICR_HSERDYC_Pos)        /*!< 0x00000008 */
N#define RCC_CICR_HSERDYC                 RCC_CICR_HSERDYC_Msk                  /*!< HSE Ready Interrupt Clear */
N#define RCC_CICR_PLLRDYC_Pos             (4U)                                  
N#define RCC_CICR_PLLRDYC_Msk             (0x1U << RCC_CICR_PLLRDYC_Pos)        /*!< 0x00000010 */
N#define RCC_CICR_PLLRDYC                 RCC_CICR_PLLRDYC_Msk                  /*!< PLL Ready Interrupt Clear */
N#define RCC_CICR_MSIRDYC_Pos             (5U)                                  
N#define RCC_CICR_MSIRDYC_Msk             (0x1U << RCC_CICR_MSIRDYC_Pos)        /*!< 0x00000020 */
N#define RCC_CICR_MSIRDYC                 RCC_CICR_MSIRDYC_Msk                  /*!< MSI Ready Interrupt Clear */
N#define RCC_CICR_HSI48RDYC_Pos           (6U)                                  
N#define RCC_CICR_HSI48RDYC_Msk           (0x1U << RCC_CICR_HSI48RDYC_Pos)      /*!< 0x00000040 */
N#define RCC_CICR_HSI48RDYC               RCC_CICR_HSI48RDYC_Msk                /*!< HSI48 Ready Interrupt Clear */
N#define RCC_CICR_CSSLSEC_Pos             (7U)                                  
N#define RCC_CICR_CSSLSEC_Msk             (0x1U << RCC_CICR_CSSLSEC_Pos)        /*!< 0x00000080 */
N#define RCC_CICR_CSSLSEC                 RCC_CICR_CSSLSEC_Msk                  /*!< LSE Clock Security System Interrupt Clear */
N#define RCC_CICR_CSSHSEC_Pos             (8U)                                  
N#define RCC_CICR_CSSHSEC_Msk             (0x1U << RCC_CICR_CSSHSEC_Pos)        /*!< 0x00000100 */
N#define RCC_CICR_CSSHSEC                 RCC_CICR_CSSHSEC_Msk                  /*!< HSE Clock Security System Interrupt Clear */
N
N/* Reference defines */
N#define RCC_CICR_LSECSSC                    RCC_CICR_CSSLSEC
N#define RCC_CICR_CSSC                       RCC_CICR_CSSHSEC
N/*****************  Bit definition for RCC_IOPRSTR register  ******************/
N#define RCC_IOPRSTR_IOPARST_Pos          (0U)                                  
N#define RCC_IOPRSTR_IOPARST_Msk          (0x1U << RCC_IOPRSTR_IOPARST_Pos)     /*!< 0x00000001 */
N#define RCC_IOPRSTR_IOPARST              RCC_IOPRSTR_IOPARST_Msk               /*!< GPIO port A reset */
N#define RCC_IOPRSTR_IOPBRST_Pos          (1U)                                  
N#define RCC_IOPRSTR_IOPBRST_Msk          (0x1U << RCC_IOPRSTR_IOPBRST_Pos)     /*!< 0x00000002 */
N#define RCC_IOPRSTR_IOPBRST              RCC_IOPRSTR_IOPBRST_Msk               /*!< GPIO port B reset */
N#define RCC_IOPRSTR_IOPCRST_Pos          (2U)                                  
N#define RCC_IOPRSTR_IOPCRST_Msk          (0x1U << RCC_IOPRSTR_IOPCRST_Pos)     /*!< 0x00000004 */
N#define RCC_IOPRSTR_IOPCRST              RCC_IOPRSTR_IOPCRST_Msk               /*!< GPIO port C reset */
N#define RCC_IOPRSTR_IOPDRST_Pos          (3U)                                  
N#define RCC_IOPRSTR_IOPDRST_Msk          (0x1U << RCC_IOPRSTR_IOPDRST_Pos)     /*!< 0x00000008 */
N#define RCC_IOPRSTR_IOPDRST              RCC_IOPRSTR_IOPDRST_Msk               /*!< GPIO port D reset */
N#define RCC_IOPRSTR_IOPHRST_Pos          (7U)                                  
N#define RCC_IOPRSTR_IOPHRST_Msk          (0x1U << RCC_IOPRSTR_IOPHRST_Pos)     /*!< 0x00000080 */
N#define RCC_IOPRSTR_IOPHRST              RCC_IOPRSTR_IOPHRST_Msk               /*!< GPIO port H reset */
N
N/* Reference defines */
N#define RCC_IOPRSTR_GPIOARST                RCC_IOPRSTR_IOPARST        /*!< GPIO port A reset */
N#define RCC_IOPRSTR_GPIOBRST                RCC_IOPRSTR_IOPBRST        /*!< GPIO port B reset */
N#define RCC_IOPRSTR_GPIOCRST                RCC_IOPRSTR_IOPCRST        /*!< GPIO port C reset */
N#define RCC_IOPRSTR_GPIODRST                RCC_IOPRSTR_IOPDRST        /*!< GPIO port D reset */
N#define RCC_IOPRSTR_GPIOHRST                RCC_IOPRSTR_IOPHRST        /*!< GPIO port H reset */
N
N
N/******************  Bit definition for RCC_AHBRST register  ******************/
N#define RCC_AHBRSTR_DMARST_Pos           (0U)                                  
N#define RCC_AHBRSTR_DMARST_Msk           (0x1U << RCC_AHBRSTR_DMARST_Pos)      /*!< 0x00000001 */
N#define RCC_AHBRSTR_DMARST               RCC_AHBRSTR_DMARST_Msk                /*!< DMA1 reset */
N#define RCC_AHBRSTR_MIFRST_Pos           (8U)                                  
N#define RCC_AHBRSTR_MIFRST_Msk           (0x1U << RCC_AHBRSTR_MIFRST_Pos)      /*!< 0x00000100 */
N#define RCC_AHBRSTR_MIFRST               RCC_AHBRSTR_MIFRST_Msk                /*!< Memory interface reset reset */
N#define RCC_AHBRSTR_CRCRST_Pos           (12U)                                 
N#define RCC_AHBRSTR_CRCRST_Msk           (0x1U << RCC_AHBRSTR_CRCRST_Pos)      /*!< 0x00001000 */
N#define RCC_AHBRSTR_CRCRST               RCC_AHBRSTR_CRCRST_Msk                /*!< CRC reset */
N#define RCC_AHBRSTR_TSCRST_Pos           (16U)                                 
N#define RCC_AHBRSTR_TSCRST_Msk           (0x1U << RCC_AHBRSTR_TSCRST_Pos)      /*!< 0x00010000 */
N#define RCC_AHBRSTR_TSCRST               RCC_AHBRSTR_TSCRST_Msk                /*!< TSC reset */
N#define RCC_AHBRSTR_RNGRST_Pos           (20U)                                 
N#define RCC_AHBRSTR_RNGRST_Msk           (0x1U << RCC_AHBRSTR_RNGRST_Pos)      /*!< 0x00100000 */
N#define RCC_AHBRSTR_RNGRST               RCC_AHBRSTR_RNGRST_Msk                /*!< RNG reset */
N
N/* Reference defines */
N#define RCC_AHBRSTR_DMA1RST                 RCC_AHBRSTR_DMARST            /*!< DMA1 reset */
N
N/*****************  Bit definition for RCC_APB2RSTR register  *****************/
N#define RCC_APB2RSTR_SYSCFGRST_Pos       (0U)                                  
N#define RCC_APB2RSTR_SYSCFGRST_Msk       (0x1U << RCC_APB2RSTR_SYSCFGRST_Pos)  /*!< 0x00000001 */
N#define RCC_APB2RSTR_SYSCFGRST           RCC_APB2RSTR_SYSCFGRST_Msk            /*!< SYSCFG clock reset */
N#define RCC_APB2RSTR_TIM21RST_Pos        (2U)                                  
N#define RCC_APB2RSTR_TIM21RST_Msk        (0x1U << RCC_APB2RSTR_TIM21RST_Pos)   /*!< 0x00000004 */
N#define RCC_APB2RSTR_TIM21RST            RCC_APB2RSTR_TIM21RST_Msk             /*!< TIM21 clock reset */
N#define RCC_APB2RSTR_TIM22RST_Pos        (5U)                                  
N#define RCC_APB2RSTR_TIM22RST_Msk        (0x1U << RCC_APB2RSTR_TIM22RST_Pos)   /*!< 0x00000020 */
N#define RCC_APB2RSTR_TIM22RST            RCC_APB2RSTR_TIM22RST_Msk             /*!< TIM22 clock reset */
N#define RCC_APB2RSTR_ADCRST_Pos          (9U)                                  
N#define RCC_APB2RSTR_ADCRST_Msk          (0x1U << RCC_APB2RSTR_ADCRST_Pos)     /*!< 0x00000200 */
N#define RCC_APB2RSTR_ADCRST              RCC_APB2RSTR_ADCRST_Msk               /*!< ADC1 clock reset */
N#define RCC_APB2RSTR_SPI1RST_Pos         (12U)                                 
N#define RCC_APB2RSTR_SPI1RST_Msk         (0x1U << RCC_APB2RSTR_SPI1RST_Pos)    /*!< 0x00001000 */
N#define RCC_APB2RSTR_SPI1RST             RCC_APB2RSTR_SPI1RST_Msk              /*!< SPI1 clock reset */
N#define RCC_APB2RSTR_USART1RST_Pos       (14U)                                 
N#define RCC_APB2RSTR_USART1RST_Msk       (0x1U << RCC_APB2RSTR_USART1RST_Pos)  /*!< 0x00004000 */
N#define RCC_APB2RSTR_USART1RST           RCC_APB2RSTR_USART1RST_Msk            /*!< USART1 clock reset */
N#define RCC_APB2RSTR_DBGRST_Pos          (22U)                                 
N#define RCC_APB2RSTR_DBGRST_Msk          (0x1U << RCC_APB2RSTR_DBGRST_Pos)     /*!< 0x00400000 */
N#define RCC_APB2RSTR_DBGRST              RCC_APB2RSTR_DBGRST_Msk               /*!< DBGMCU clock reset */
N
N/* Reference defines */
N#define RCC_APB2RSTR_ADC1RST                RCC_APB2RSTR_ADCRST           /*!< ADC1 clock reset */
N#define RCC_APB2RSTR_DBGMCURST              RCC_APB2RSTR_DBGRST           /*!< DBGMCU clock reset */
N
N/*****************  Bit definition for RCC_APB1RSTR register  *****************/
N#define RCC_APB1RSTR_TIM2RST_Pos         (0U)                                  
N#define RCC_APB1RSTR_TIM2RST_Msk         (0x1U << RCC_APB1RSTR_TIM2RST_Pos)    /*!< 0x00000001 */
N#define RCC_APB1RSTR_TIM2RST             RCC_APB1RSTR_TIM2RST_Msk              /*!< Timer 2 clock reset */
N#define RCC_APB1RSTR_TIM6RST_Pos         (4U)                                  
N#define RCC_APB1RSTR_TIM6RST_Msk         (0x1U << RCC_APB1RSTR_TIM6RST_Pos)    /*!< 0x00000010 */
N#define RCC_APB1RSTR_TIM6RST             RCC_APB1RSTR_TIM6RST_Msk              /*!< Timer 6 clock reset */
N#define RCC_APB1RSTR_LCDRST_Pos          (9U)                                  
N#define RCC_APB1RSTR_LCDRST_Msk          (0x1U << RCC_APB1RSTR_LCDRST_Pos)     /*!< 0x00000200 */
N#define RCC_APB1RSTR_LCDRST              RCC_APB1RSTR_LCDRST_Msk               /*!< LCD clock reset */
N#define RCC_APB1RSTR_WWDGRST_Pos         (11U)                                 
N#define RCC_APB1RSTR_WWDGRST_Msk         (0x1U << RCC_APB1RSTR_WWDGRST_Pos)    /*!< 0x00000800 */
N#define RCC_APB1RSTR_WWDGRST             RCC_APB1RSTR_WWDGRST_Msk              /*!< Window Watchdog clock reset */
N#define RCC_APB1RSTR_SPI2RST_Pos         (14U)                                 
N#define RCC_APB1RSTR_SPI2RST_Msk         (0x1U << RCC_APB1RSTR_SPI2RST_Pos)    /*!< 0x00004000 */
N#define RCC_APB1RSTR_SPI2RST             RCC_APB1RSTR_SPI2RST_Msk              /*!< SPI2 clock reset */
N#define RCC_APB1RSTR_USART2RST_Pos       (17U)                                 
N#define RCC_APB1RSTR_USART2RST_Msk       (0x1U << RCC_APB1RSTR_USART2RST_Pos)  /*!< 0x00020000 */
N#define RCC_APB1RSTR_USART2RST           RCC_APB1RSTR_USART2RST_Msk            /*!< USART 2 clock reset */
N#define RCC_APB1RSTR_LPUART1RST_Pos      (18U)                                 
N#define RCC_APB1RSTR_LPUART1RST_Msk      (0x1U << RCC_APB1RSTR_LPUART1RST_Pos) /*!< 0x00040000 */
N#define RCC_APB1RSTR_LPUART1RST          RCC_APB1RSTR_LPUART1RST_Msk           /*!< LPUART1 clock reset */
N#define RCC_APB1RSTR_I2C1RST_Pos         (21U)                                 
N#define RCC_APB1RSTR_I2C1RST_Msk         (0x1U << RCC_APB1RSTR_I2C1RST_Pos)    /*!< 0x00200000 */
N#define RCC_APB1RSTR_I2C1RST             RCC_APB1RSTR_I2C1RST_Msk              /*!< I2C 1 clock reset */
N#define RCC_APB1RSTR_I2C2RST_Pos         (22U)                                 
N#define RCC_APB1RSTR_I2C2RST_Msk         (0x1U << RCC_APB1RSTR_I2C2RST_Pos)    /*!< 0x00400000 */
N#define RCC_APB1RSTR_I2C2RST             RCC_APB1RSTR_I2C2RST_Msk              /*!< I2C 2 clock reset */
N#define RCC_APB1RSTR_USBRST_Pos          (23U)                                 
N#define RCC_APB1RSTR_USBRST_Msk          (0x1U << RCC_APB1RSTR_USBRST_Pos)     /*!< 0x00800000 */
N#define RCC_APB1RSTR_USBRST              RCC_APB1RSTR_USBRST_Msk               /*!< USB clock reset */
N#define RCC_APB1RSTR_CRSRST_Pos          (27U)                                 
N#define RCC_APB1RSTR_CRSRST_Msk          (0x1U << RCC_APB1RSTR_CRSRST_Pos)     /*!< 0x08000000 */
N#define RCC_APB1RSTR_CRSRST              RCC_APB1RSTR_CRSRST_Msk               /*!< CRS clock reset */
N#define RCC_APB1RSTR_PWRRST_Pos          (28U)                                 
N#define RCC_APB1RSTR_PWRRST_Msk          (0x1U << RCC_APB1RSTR_PWRRST_Pos)     /*!< 0x10000000 */
N#define RCC_APB1RSTR_PWRRST              RCC_APB1RSTR_PWRRST_Msk               /*!< PWR clock reset */
N#define RCC_APB1RSTR_DACRST_Pos          (29U)                                 
N#define RCC_APB1RSTR_DACRST_Msk          (0x1U << RCC_APB1RSTR_DACRST_Pos)     /*!< 0x20000000 */
N#define RCC_APB1RSTR_DACRST              RCC_APB1RSTR_DACRST_Msk               /*!< DAC clock reset */
N#define RCC_APB1RSTR_LPTIM1RST_Pos       (31U)                                 
N#define RCC_APB1RSTR_LPTIM1RST_Msk       (0x1U << RCC_APB1RSTR_LPTIM1RST_Pos)  /*!< 0x80000000 */
N#define RCC_APB1RSTR_LPTIM1RST           RCC_APB1RSTR_LPTIM1RST_Msk            /*!< LPTIM1 clock reset */
N
N/*****************  Bit definition for RCC_IOPENR register  ******************/
N#define RCC_IOPENR_IOPAEN_Pos            (0U)                                  
N#define RCC_IOPENR_IOPAEN_Msk            (0x1U << RCC_IOPENR_IOPAEN_Pos)       /*!< 0x00000001 */
N#define RCC_IOPENR_IOPAEN                RCC_IOPENR_IOPAEN_Msk                 /*!< GPIO port A clock enable */
N#define RCC_IOPENR_IOPBEN_Pos            (1U)                                  
N#define RCC_IOPENR_IOPBEN_Msk            (0x1U << RCC_IOPENR_IOPBEN_Pos)       /*!< 0x00000002 */
N#define RCC_IOPENR_IOPBEN                RCC_IOPENR_IOPBEN_Msk                 /*!< GPIO port B clock enable */
N#define RCC_IOPENR_IOPCEN_Pos            (2U)                                  
N#define RCC_IOPENR_IOPCEN_Msk            (0x1U << RCC_IOPENR_IOPCEN_Pos)       /*!< 0x00000004 */
N#define RCC_IOPENR_IOPCEN                RCC_IOPENR_IOPCEN_Msk                 /*!< GPIO port C clock enable */
N#define RCC_IOPENR_IOPDEN_Pos            (3U)                                  
N#define RCC_IOPENR_IOPDEN_Msk            (0x1U << RCC_IOPENR_IOPDEN_Pos)       /*!< 0x00000008 */
N#define RCC_IOPENR_IOPDEN                RCC_IOPENR_IOPDEN_Msk                 /*!< GPIO port D clock enable */
N#define RCC_IOPENR_IOPHEN_Pos            (7U)                                  
N#define RCC_IOPENR_IOPHEN_Msk            (0x1U << RCC_IOPENR_IOPHEN_Pos)       /*!< 0x00000080 */
N#define RCC_IOPENR_IOPHEN                RCC_IOPENR_IOPHEN_Msk                 /*!< GPIO port H clock enable */
N
N/* Reference defines */
N#define RCC_IOPENR_GPIOAEN                  RCC_IOPENR_IOPAEN        /*!< GPIO port A clock enable */
N#define RCC_IOPENR_GPIOBEN                  RCC_IOPENR_IOPBEN        /*!< GPIO port B clock enable */
N#define RCC_IOPENR_GPIOCEN                  RCC_IOPENR_IOPCEN        /*!< GPIO port C clock enable */
N#define RCC_IOPENR_GPIODEN                  RCC_IOPENR_IOPDEN        /*!< GPIO port D clock enable */
N#define RCC_IOPENR_GPIOHEN                  RCC_IOPENR_IOPHEN        /*!< GPIO port H clock enable */
N
N/*****************  Bit definition for RCC_AHBENR register  ******************/
N#define RCC_AHBENR_DMAEN_Pos             (0U)                                  
N#define RCC_AHBENR_DMAEN_Msk             (0x1U << RCC_AHBENR_DMAEN_Pos)        /*!< 0x00000001 */
N#define RCC_AHBENR_DMAEN                 RCC_AHBENR_DMAEN_Msk                  /*!< DMA1 clock enable */
N#define RCC_AHBENR_MIFEN_Pos             (8U)                                  
N#define RCC_AHBENR_MIFEN_Msk             (0x1U << RCC_AHBENR_MIFEN_Pos)        /*!< 0x00000100 */
N#define RCC_AHBENR_MIFEN                 RCC_AHBENR_MIFEN_Msk                  /*!< NVM interface clock enable bit */
N#define RCC_AHBENR_CRCEN_Pos             (12U)                                 
N#define RCC_AHBENR_CRCEN_Msk             (0x1U << RCC_AHBENR_CRCEN_Pos)        /*!< 0x00001000 */
N#define RCC_AHBENR_CRCEN                 RCC_AHBENR_CRCEN_Msk                  /*!< CRC clock enable */
N#define RCC_AHBENR_TSCEN_Pos             (16U)                                 
N#define RCC_AHBENR_TSCEN_Msk             (0x1U << RCC_AHBENR_TSCEN_Pos)        /*!< 0x00010000 */
N#define RCC_AHBENR_TSCEN                 RCC_AHBENR_TSCEN_Msk                  /*!< TSC clock enable */
N#define RCC_AHBENR_RNGEN_Pos             (20U)                                 
N#define RCC_AHBENR_RNGEN_Msk             (0x1U << RCC_AHBENR_RNGEN_Pos)        /*!< 0x00100000 */
N#define RCC_AHBENR_RNGEN                 RCC_AHBENR_RNGEN_Msk                  /*!< RNG clock enable */
N
N/* Reference defines */
N#define RCC_AHBENR_DMA1EN                   RCC_AHBENR_DMAEN              /*!< DMA1 clock enable */
N
N/*****************  Bit definition for RCC_APB2ENR register  ******************/
N#define RCC_APB2ENR_SYSCFGEN_Pos         (0U)                                  
N#define RCC_APB2ENR_SYSCFGEN_Msk         (0x1U << RCC_APB2ENR_SYSCFGEN_Pos)    /*!< 0x00000001 */
N#define RCC_APB2ENR_SYSCFGEN             RCC_APB2ENR_SYSCFGEN_Msk              /*!< SYSCFG clock enable */
N#define RCC_APB2ENR_TIM21EN_Pos          (2U)                                  
N#define RCC_APB2ENR_TIM21EN_Msk          (0x1U << RCC_APB2ENR_TIM21EN_Pos)     /*!< 0x00000004 */
N#define RCC_APB2ENR_TIM21EN              RCC_APB2ENR_TIM21EN_Msk               /*!< TIM21 clock enable */
N#define RCC_APB2ENR_TIM22EN_Pos          (5U)                                  
N#define RCC_APB2ENR_TIM22EN_Msk          (0x1U << RCC_APB2ENR_TIM22EN_Pos)     /*!< 0x00000020 */
N#define RCC_APB2ENR_TIM22EN              RCC_APB2ENR_TIM22EN_Msk               /*!< TIM22 clock enable */
N#define RCC_APB2ENR_FWEN_Pos             (7U)                                  
N#define RCC_APB2ENR_FWEN_Msk             (0x1U << RCC_APB2ENR_FWEN_Pos)        /*!< 0x00000080 */
N#define RCC_APB2ENR_FWEN                 RCC_APB2ENR_FWEN_Msk                  /*!< MiFare Firewall clock enable */
N#define RCC_APB2ENR_ADCEN_Pos            (9U)                                  
N#define RCC_APB2ENR_ADCEN_Msk            (0x1U << RCC_APB2ENR_ADCEN_Pos)       /*!< 0x00000200 */
N#define RCC_APB2ENR_ADCEN                RCC_APB2ENR_ADCEN_Msk                 /*!< ADC1 clock enable */
N#define RCC_APB2ENR_SPI1EN_Pos           (12U)                                 
N#define RCC_APB2ENR_SPI1EN_Msk           (0x1U << RCC_APB2ENR_SPI1EN_Pos)      /*!< 0x00001000 */
N#define RCC_APB2ENR_SPI1EN               RCC_APB2ENR_SPI1EN_Msk                /*!< SPI1 clock enable */
N#define RCC_APB2ENR_USART1EN_Pos         (14U)                                 
N#define RCC_APB2ENR_USART1EN_Msk         (0x1U << RCC_APB2ENR_USART1EN_Pos)    /*!< 0x00004000 */
N#define RCC_APB2ENR_USART1EN             RCC_APB2ENR_USART1EN_Msk              /*!< USART1 clock enable */
N#define RCC_APB2ENR_DBGEN_Pos            (22U)                                 
N#define RCC_APB2ENR_DBGEN_Msk            (0x1U << RCC_APB2ENR_DBGEN_Pos)       /*!< 0x00400000 */
N#define RCC_APB2ENR_DBGEN                RCC_APB2ENR_DBGEN_Msk                 /*!< DBGMCU clock enable */
N
N/* Reference defines */
N
N#define RCC_APB2ENR_MIFIEN                  RCC_APB2ENR_FWEN              /*!< MiFare Firewall clock enable */
N#define RCC_APB2ENR_ADC1EN                  RCC_APB2ENR_ADCEN             /*!< ADC1 clock enable */
N#define RCC_APB2ENR_DBGMCUEN                RCC_APB2ENR_DBGEN             /*!< DBGMCU clock enable */
N
N/*****************  Bit definition for RCC_APB1ENR register  ******************/
N#define RCC_APB1ENR_TIM2EN_Pos           (0U)                                  
N#define RCC_APB1ENR_TIM2EN_Msk           (0x1U << RCC_APB1ENR_TIM2EN_Pos)      /*!< 0x00000001 */
N#define RCC_APB1ENR_TIM2EN               RCC_APB1ENR_TIM2EN_Msk                /*!< Timer 2 clock enable */
N#define RCC_APB1ENR_TIM6EN_Pos           (4U)                                  
N#define RCC_APB1ENR_TIM6EN_Msk           (0x1U << RCC_APB1ENR_TIM6EN_Pos)      /*!< 0x00000010 */
N#define RCC_APB1ENR_TIM6EN               RCC_APB1ENR_TIM6EN_Msk                /*!< Timer 6 clock enable */
N#define RCC_APB1ENR_LCDEN_Pos            (9U)                                  
N#define RCC_APB1ENR_LCDEN_Msk            (0x1U << RCC_APB1ENR_LCDEN_Pos)       /*!< 0x00000200 */
N#define RCC_APB1ENR_LCDEN                RCC_APB1ENR_LCDEN_Msk                 /*!< LCD clock enable */
N#define RCC_APB1ENR_WWDGEN_Pos           (11U)                                 
N#define RCC_APB1ENR_WWDGEN_Msk           (0x1U << RCC_APB1ENR_WWDGEN_Pos)      /*!< 0x00000800 */
N#define RCC_APB1ENR_WWDGEN               RCC_APB1ENR_WWDGEN_Msk                /*!< Window Watchdog clock enable */
N#define RCC_APB1ENR_SPI2EN_Pos           (14U)                                 
N#define RCC_APB1ENR_SPI2EN_Msk           (0x1U << RCC_APB1ENR_SPI2EN_Pos)      /*!< 0x00004000 */
N#define RCC_APB1ENR_SPI2EN               RCC_APB1ENR_SPI2EN_Msk                /*!< SPI2 clock enable */
N#define RCC_APB1ENR_USART2EN_Pos         (17U)                                 
N#define RCC_APB1ENR_USART2EN_Msk         (0x1U << RCC_APB1ENR_USART2EN_Pos)    /*!< 0x00020000 */
N#define RCC_APB1ENR_USART2EN             RCC_APB1ENR_USART2EN_Msk              /*!< USART2 clock enable */
N#define RCC_APB1ENR_LPUART1EN_Pos        (18U)                                 
N#define RCC_APB1ENR_LPUART1EN_Msk        (0x1U << RCC_APB1ENR_LPUART1EN_Pos)   /*!< 0x00040000 */
N#define RCC_APB1ENR_LPUART1EN            RCC_APB1ENR_LPUART1EN_Msk             /*!< LPUART1 clock enable */
N#define RCC_APB1ENR_I2C1EN_Pos           (21U)                                 
N#define RCC_APB1ENR_I2C1EN_Msk           (0x1U << RCC_APB1ENR_I2C1EN_Pos)      /*!< 0x00200000 */
N#define RCC_APB1ENR_I2C1EN               RCC_APB1ENR_I2C1EN_Msk                /*!< I2C1 clock enable */
N#define RCC_APB1ENR_I2C2EN_Pos           (22U)                                 
N#define RCC_APB1ENR_I2C2EN_Msk           (0x1U << RCC_APB1ENR_I2C2EN_Pos)      /*!< 0x00400000 */
N#define RCC_APB1ENR_I2C2EN               RCC_APB1ENR_I2C2EN_Msk                /*!< I2C2 clock enable */
N#define RCC_APB1ENR_USBEN_Pos            (23U)                                 
N#define RCC_APB1ENR_USBEN_Msk            (0x1U << RCC_APB1ENR_USBEN_Pos)       /*!< 0x00800000 */
N#define RCC_APB1ENR_USBEN                RCC_APB1ENR_USBEN_Msk                 /*!< USB clock enable */
N#define RCC_APB1ENR_CRSEN_Pos            (27U)                                 
N#define RCC_APB1ENR_CRSEN_Msk            (0x1U << RCC_APB1ENR_CRSEN_Pos)       /*!< 0x08000000 */
N#define RCC_APB1ENR_CRSEN                RCC_APB1ENR_CRSEN_Msk                 /*!< CRS clock enable */
N#define RCC_APB1ENR_PWREN_Pos            (28U)                                 
N#define RCC_APB1ENR_PWREN_Msk            (0x1U << RCC_APB1ENR_PWREN_Pos)       /*!< 0x10000000 */
N#define RCC_APB1ENR_PWREN                RCC_APB1ENR_PWREN_Msk                 /*!< PWR clock enable */
N#define RCC_APB1ENR_DACEN_Pos            (29U)                                 
N#define RCC_APB1ENR_DACEN_Msk            (0x1U << RCC_APB1ENR_DACEN_Pos)       /*!< 0x20000000 */
N#define RCC_APB1ENR_DACEN                RCC_APB1ENR_DACEN_Msk                 /*!< DAC clock enable */
N#define RCC_APB1ENR_LPTIM1EN_Pos         (31U)                                 
N#define RCC_APB1ENR_LPTIM1EN_Msk         (0x1U << RCC_APB1ENR_LPTIM1EN_Pos)    /*!< 0x80000000 */
N#define RCC_APB1ENR_LPTIM1EN             RCC_APB1ENR_LPTIM1EN_Msk              /*!< LPTIM1 clock enable */
N
N/******************  Bit definition for RCC_IOPSMENR register  ****************/
N#define RCC_IOPSMENR_IOPASMEN_Pos        (0U)                                  
N#define RCC_IOPSMENR_IOPASMEN_Msk        (0x1U << RCC_IOPSMENR_IOPASMEN_Pos)   /*!< 0x00000001 */
N#define RCC_IOPSMENR_IOPASMEN            RCC_IOPSMENR_IOPASMEN_Msk             /*!< GPIO port A clock enabled in sleep mode */
N#define RCC_IOPSMENR_IOPBSMEN_Pos        (1U)                                  
N#define RCC_IOPSMENR_IOPBSMEN_Msk        (0x1U << RCC_IOPSMENR_IOPBSMEN_Pos)   /*!< 0x00000002 */
N#define RCC_IOPSMENR_IOPBSMEN            RCC_IOPSMENR_IOPBSMEN_Msk             /*!< GPIO port B clock enabled in sleep mode */
N#define RCC_IOPSMENR_IOPCSMEN_Pos        (2U)                                  
N#define RCC_IOPSMENR_IOPCSMEN_Msk        (0x1U << RCC_IOPSMENR_IOPCSMEN_Pos)   /*!< 0x00000004 */
N#define RCC_IOPSMENR_IOPCSMEN            RCC_IOPSMENR_IOPCSMEN_Msk             /*!< GPIO port C clock enabled in sleep mode */
N#define RCC_IOPSMENR_IOPDSMEN_Pos        (3U)                                  
N#define RCC_IOPSMENR_IOPDSMEN_Msk        (0x1U << RCC_IOPSMENR_IOPDSMEN_Pos)   /*!< 0x00000008 */
N#define RCC_IOPSMENR_IOPDSMEN            RCC_IOPSMENR_IOPDSMEN_Msk             /*!< GPIO port D clock enabled in sleep mode */
N#define RCC_IOPSMENR_IOPHSMEN_Pos        (7U)                                  
N#define RCC_IOPSMENR_IOPHSMEN_Msk        (0x1U << RCC_IOPSMENR_IOPHSMEN_Pos)   /*!< 0x00000080 */
N#define RCC_IOPSMENR_IOPHSMEN            RCC_IOPSMENR_IOPHSMEN_Msk             /*!< GPIO port H clock enabled in sleep mode */
N
N/* Reference defines */
N#define RCC_IOPSMENR_GPIOASMEN              RCC_IOPSMENR_IOPASMEN        /*!< GPIO port A clock enabled in sleep mode */
N#define RCC_IOPSMENR_GPIOBSMEN              RCC_IOPSMENR_IOPBSMEN        /*!< GPIO port B clock enabled in sleep mode */
N#define RCC_IOPSMENR_GPIOCSMEN              RCC_IOPSMENR_IOPCSMEN        /*!< GPIO port C clock enabled in sleep mode */
N#define RCC_IOPSMENR_GPIODSMEN              RCC_IOPSMENR_IOPDSMEN        /*!< GPIO port D clock enabled in sleep mode */
N#define RCC_IOPSMENR_GPIOHSMEN              RCC_IOPSMENR_IOPHSMEN        /*!< GPIO port H clock enabled in sleep mode */
N
N/*****************  Bit definition for RCC_AHBSMENR register  ******************/
N#define RCC_AHBSMENR_DMASMEN_Pos         (0U)                                  
N#define RCC_AHBSMENR_DMASMEN_Msk         (0x1U << RCC_AHBSMENR_DMASMEN_Pos)    /*!< 0x00000001 */
N#define RCC_AHBSMENR_DMASMEN             RCC_AHBSMENR_DMASMEN_Msk              /*!< DMA1 clock enabled in sleep mode */
N#define RCC_AHBSMENR_MIFSMEN_Pos         (8U)                                  
N#define RCC_AHBSMENR_MIFSMEN_Msk         (0x1U << RCC_AHBSMENR_MIFSMEN_Pos)    /*!< 0x00000100 */
N#define RCC_AHBSMENR_MIFSMEN             RCC_AHBSMENR_MIFSMEN_Msk              /*!< NVM interface clock enable during sleep mode */
N#define RCC_AHBSMENR_SRAMSMEN_Pos        (9U)                                  
N#define RCC_AHBSMENR_SRAMSMEN_Msk        (0x1U << RCC_AHBSMENR_SRAMSMEN_Pos)   /*!< 0x00000200 */
N#define RCC_AHBSMENR_SRAMSMEN            RCC_AHBSMENR_SRAMSMEN_Msk             /*!< SRAM clock enabled in sleep mode */
N#define RCC_AHBSMENR_CRCSMEN_Pos         (12U)                                 
N#define RCC_AHBSMENR_CRCSMEN_Msk         (0x1U << RCC_AHBSMENR_CRCSMEN_Pos)    /*!< 0x00001000 */
N#define RCC_AHBSMENR_CRCSMEN             RCC_AHBSMENR_CRCSMEN_Msk              /*!< CRC clock enabled in sleep mode */
N#define RCC_AHBSMENR_TSCSMEN_Pos         (16U)                                 
N#define RCC_AHBSMENR_TSCSMEN_Msk         (0x1U << RCC_AHBSMENR_TSCSMEN_Pos)    /*!< 0x00010000 */
N#define RCC_AHBSMENR_TSCSMEN             RCC_AHBSMENR_TSCSMEN_Msk              /*!< TSC clock enabled in sleep mode */
N#define RCC_AHBSMENR_RNGSMEN_Pos         (20U)                                 
N#define RCC_AHBSMENR_RNGSMEN_Msk         (0x1U << RCC_AHBSMENR_RNGSMEN_Pos)    /*!< 0x00100000 */
N#define RCC_AHBSMENR_RNGSMEN             RCC_AHBSMENR_RNGSMEN_Msk              /*!< RNG clock enabled in sleep mode */
N
N/* Reference defines */
N#define RCC_AHBSMENR_DMA1SMEN               RCC_AHBSMENR_DMASMEN          /*!< DMA1 clock enabled in sleep mode */
N
N/*****************  Bit definition for RCC_APB2SMENR register  ******************/
N#define RCC_APB2SMENR_SYSCFGSMEN_Pos     (0U)                                  
N#define RCC_APB2SMENR_SYSCFGSMEN_Msk     (0x1U << RCC_APB2SMENR_SYSCFGSMEN_Pos) /*!< 0x00000001 */
N#define RCC_APB2SMENR_SYSCFGSMEN         RCC_APB2SMENR_SYSCFGSMEN_Msk          /*!< SYSCFG clock enabled in sleep mode */
N#define RCC_APB2SMENR_TIM21SMEN_Pos      (2U)                                  
N#define RCC_APB2SMENR_TIM21SMEN_Msk      (0x1U << RCC_APB2SMENR_TIM21SMEN_Pos) /*!< 0x00000004 */
N#define RCC_APB2SMENR_TIM21SMEN          RCC_APB2SMENR_TIM21SMEN_Msk           /*!< TIM21 clock enabled in sleep mode */
N#define RCC_APB2SMENR_TIM22SMEN_Pos      (5U)                                  
N#define RCC_APB2SMENR_TIM22SMEN_Msk      (0x1U << RCC_APB2SMENR_TIM22SMEN_Pos) /*!< 0x00000020 */
N#define RCC_APB2SMENR_TIM22SMEN          RCC_APB2SMENR_TIM22SMEN_Msk           /*!< TIM22 clock enabled in sleep mode */
N#define RCC_APB2SMENR_ADCSMEN_Pos        (9U)                                  
N#define RCC_APB2SMENR_ADCSMEN_Msk        (0x1U << RCC_APB2SMENR_ADCSMEN_Pos)   /*!< 0x00000200 */
N#define RCC_APB2SMENR_ADCSMEN            RCC_APB2SMENR_ADCSMEN_Msk             /*!< ADC1 clock enabled in sleep mode */
N#define RCC_APB2SMENR_SPI1SMEN_Pos       (12U)                                 
N#define RCC_APB2SMENR_SPI1SMEN_Msk       (0x1U << RCC_APB2SMENR_SPI1SMEN_Pos)  /*!< 0x00001000 */
N#define RCC_APB2SMENR_SPI1SMEN           RCC_APB2SMENR_SPI1SMEN_Msk            /*!< SPI1 clock enabled in sleep mode */
N#define RCC_APB2SMENR_USART1SMEN_Pos     (14U)                                 
N#define RCC_APB2SMENR_USART1SMEN_Msk     (0x1U << RCC_APB2SMENR_USART1SMEN_Pos) /*!< 0x00004000 */
N#define RCC_APB2SMENR_USART1SMEN         RCC_APB2SMENR_USART1SMEN_Msk          /*!< USART1 clock enabled in sleep mode */
N#define RCC_APB2SMENR_DBGSMEN_Pos        (22U)                                 
N#define RCC_APB2SMENR_DBGSMEN_Msk        (0x1U << RCC_APB2SMENR_DBGSMEN_Pos)   /*!< 0x00400000 */
N#define RCC_APB2SMENR_DBGSMEN            RCC_APB2SMENR_DBGSMEN_Msk             /*!< DBGMCU clock enabled in sleep mode */
N
N/* Reference defines */
N#define RCC_APB2SMENR_ADC1SMEN              RCC_APB2SMENR_ADCSMEN         /*!< ADC1 clock enabled in sleep mode */
N#define RCC_APB2SMENR_DBGMCUSMEN            RCC_APB2SMENR_DBGSMEN         /*!< DBGMCU clock enabled in sleep mode */
N
N/*****************  Bit definition for RCC_APB1SMENR register  ******************/
N#define RCC_APB1SMENR_TIM2SMEN_Pos       (0U)                                  
N#define RCC_APB1SMENR_TIM2SMEN_Msk       (0x1U << RCC_APB1SMENR_TIM2SMEN_Pos)  /*!< 0x00000001 */
N#define RCC_APB1SMENR_TIM2SMEN           RCC_APB1SMENR_TIM2SMEN_Msk            /*!< Timer 2 clock enabled in sleep mode */
N#define RCC_APB1SMENR_TIM6SMEN_Pos       (4U)                                  
N#define RCC_APB1SMENR_TIM6SMEN_Msk       (0x1U << RCC_APB1SMENR_TIM6SMEN_Pos)  /*!< 0x00000010 */
N#define RCC_APB1SMENR_TIM6SMEN           RCC_APB1SMENR_TIM6SMEN_Msk            /*!< Timer 6 clock enabled in sleep mode */
N#define RCC_APB1SMENR_LCDSMEN_Pos        (9U)                                  
N#define RCC_APB1SMENR_LCDSMEN_Msk        (0x1U << RCC_APB1SMENR_LCDSMEN_Pos)   /*!< 0x00000200 */
N#define RCC_APB1SMENR_LCDSMEN            RCC_APB1SMENR_LCDSMEN_Msk             /*!< LCD clock enabled in sleep mode */
N#define RCC_APB1SMENR_WWDGSMEN_Pos       (11U)                                 
N#define RCC_APB1SMENR_WWDGSMEN_Msk       (0x1U << RCC_APB1SMENR_WWDGSMEN_Pos)  /*!< 0x00000800 */
N#define RCC_APB1SMENR_WWDGSMEN           RCC_APB1SMENR_WWDGSMEN_Msk            /*!< Window Watchdog clock enabled in sleep mode */
N#define RCC_APB1SMENR_SPI2SMEN_Pos       (14U)                                 
N#define RCC_APB1SMENR_SPI2SMEN_Msk       (0x1U << RCC_APB1SMENR_SPI2SMEN_Pos)  /*!< 0x00004000 */
N#define RCC_APB1SMENR_SPI2SMEN           RCC_APB1SMENR_SPI2SMEN_Msk            /*!< SPI2 clock enabled in sleep mode */
N#define RCC_APB1SMENR_USART2SMEN_Pos     (17U)                                 
N#define RCC_APB1SMENR_USART2SMEN_Msk     (0x1U << RCC_APB1SMENR_USART2SMEN_Pos) /*!< 0x00020000 */
N#define RCC_APB1SMENR_USART2SMEN         RCC_APB1SMENR_USART2SMEN_Msk          /*!< USART2 clock enabled in sleep mode */
N#define RCC_APB1SMENR_LPUART1SMEN_Pos    (18U)                                 
N#define RCC_APB1SMENR_LPUART1SMEN_Msk    (0x1U << RCC_APB1SMENR_LPUART1SMEN_Pos) /*!< 0x00040000 */
N#define RCC_APB1SMENR_LPUART1SMEN        RCC_APB1SMENR_LPUART1SMEN_Msk         /*!< LPUART1 clock enabled in sleep mode */
N#define RCC_APB1SMENR_I2C1SMEN_Pos       (21U)                                 
N#define RCC_APB1SMENR_I2C1SMEN_Msk       (0x1U << RCC_APB1SMENR_I2C1SMEN_Pos)  /*!< 0x00200000 */
N#define RCC_APB1SMENR_I2C1SMEN           RCC_APB1SMENR_I2C1SMEN_Msk            /*!< I2C1 clock enabled in sleep mode */
N#define RCC_APB1SMENR_I2C2SMEN_Pos       (22U)                                 
N#define RCC_APB1SMENR_I2C2SMEN_Msk       (0x1U << RCC_APB1SMENR_I2C2SMEN_Pos)  /*!< 0x00400000 */
N#define RCC_APB1SMENR_I2C2SMEN           RCC_APB1SMENR_I2C2SMEN_Msk            /*!< I2C2 clock enabled in sleep mode */
N#define RCC_APB1SMENR_USBSMEN_Pos        (23U)                                 
N#define RCC_APB1SMENR_USBSMEN_Msk        (0x1U << RCC_APB1SMENR_USBSMEN_Pos)   /*!< 0x00800000 */
N#define RCC_APB1SMENR_USBSMEN            RCC_APB1SMENR_USBSMEN_Msk             /*!< USB clock enabled in sleep mode */
N#define RCC_APB1SMENR_CRSSMEN_Pos        (27U)                                 
N#define RCC_APB1SMENR_CRSSMEN_Msk        (0x1U << RCC_APB1SMENR_CRSSMEN_Pos)   /*!< 0x08000000 */
N#define RCC_APB1SMENR_CRSSMEN            RCC_APB1SMENR_CRSSMEN_Msk             /*!< CRS clock enabled in sleep mode */
N#define RCC_APB1SMENR_PWRSMEN_Pos        (28U)                                 
N#define RCC_APB1SMENR_PWRSMEN_Msk        (0x1U << RCC_APB1SMENR_PWRSMEN_Pos)   /*!< 0x10000000 */
N#define RCC_APB1SMENR_PWRSMEN            RCC_APB1SMENR_PWRSMEN_Msk             /*!< PWR clock enabled in sleep mode */
N#define RCC_APB1SMENR_DACSMEN_Pos        (29U)                                 
N#define RCC_APB1SMENR_DACSMEN_Msk        (0x1U << RCC_APB1SMENR_DACSMEN_Pos)   /*!< 0x20000000 */
N#define RCC_APB1SMENR_DACSMEN            RCC_APB1SMENR_DACSMEN_Msk             /*!< DAC clock enabled in sleep mode */
N#define RCC_APB1SMENR_LPTIM1SMEN_Pos     (31U)                                 
N#define RCC_APB1SMENR_LPTIM1SMEN_Msk     (0x1U << RCC_APB1SMENR_LPTIM1SMEN_Pos) /*!< 0x80000000 */
N#define RCC_APB1SMENR_LPTIM1SMEN         RCC_APB1SMENR_LPTIM1SMEN_Msk          /*!< LPTIM1 clock enabled in sleep mode */
N
N/*******************  Bit definition for RCC_CCIPR register  *******************/
N/*!< USART1 Clock source selection */
N#define RCC_CCIPR_USART1SEL_Pos          (0U)                                  
N#define RCC_CCIPR_USART1SEL_Msk          (0x3U << RCC_CCIPR_USART1SEL_Pos)     /*!< 0x00000003 */
N#define RCC_CCIPR_USART1SEL              RCC_CCIPR_USART1SEL_Msk               /*!< USART1SEL[1:0] bits */
N#define RCC_CCIPR_USART1SEL_0            (0x1U << RCC_CCIPR_USART1SEL_Pos)     /*!< 0x00000001 */
N#define RCC_CCIPR_USART1SEL_1            (0x2U << RCC_CCIPR_USART1SEL_Pos)     /*!< 0x00000002 */
N
N/*!< USART2 Clock source selection */
N#define RCC_CCIPR_USART2SEL_Pos          (2U)                                  
N#define RCC_CCIPR_USART2SEL_Msk          (0x3U << RCC_CCIPR_USART2SEL_Pos)     /*!< 0x0000000C */
N#define RCC_CCIPR_USART2SEL              RCC_CCIPR_USART2SEL_Msk               /*!< USART2SEL[1:0] bits */
N#define RCC_CCIPR_USART2SEL_0            (0x1U << RCC_CCIPR_USART2SEL_Pos)     /*!< 0x00000004 */
N#define RCC_CCIPR_USART2SEL_1            (0x2U << RCC_CCIPR_USART2SEL_Pos)     /*!< 0x00000008 */
N
N/*!< LPUART1 Clock source selection */ 
N#define RCC_CCIPR_LPUART1SEL_Pos         (10U)                                 
N#define RCC_CCIPR_LPUART1SEL_Msk         (0x3U << RCC_CCIPR_LPUART1SEL_Pos)    /*!< 0x00000C00 */
N#define RCC_CCIPR_LPUART1SEL             RCC_CCIPR_LPUART1SEL_Msk              /*!< LPUART1SEL[1:0] bits */
N#define RCC_CCIPR_LPUART1SEL_0           (0x1U << RCC_CCIPR_LPUART1SEL_Pos)    /*!< 0x0000400 */
N#define RCC_CCIPR_LPUART1SEL_1           (0x2U << RCC_CCIPR_LPUART1SEL_Pos)    /*!< 0x0000800 */
N
N/*!< I2C1 Clock source selection */
N#define RCC_CCIPR_I2C1SEL_Pos            (12U)                                 
N#define RCC_CCIPR_I2C1SEL_Msk            (0x3U << RCC_CCIPR_I2C1SEL_Pos)       /*!< 0x00003000 */
N#define RCC_CCIPR_I2C1SEL                RCC_CCIPR_I2C1SEL_Msk                 /*!< I2C1SEL [1:0] bits */
N#define RCC_CCIPR_I2C1SEL_0              (0x1U << RCC_CCIPR_I2C1SEL_Pos)       /*!< 0x00001000 */
N#define RCC_CCIPR_I2C1SEL_1              (0x2U << RCC_CCIPR_I2C1SEL_Pos)       /*!< 0x00002000 */
N
N
N/*!< LPTIM1 Clock source selection */ 
N#define RCC_CCIPR_LPTIM1SEL_Pos          (18U)                                 
N#define RCC_CCIPR_LPTIM1SEL_Msk          (0x3U << RCC_CCIPR_LPTIM1SEL_Pos)     /*!< 0x000C0000 */
N#define RCC_CCIPR_LPTIM1SEL              RCC_CCIPR_LPTIM1SEL_Msk               /*!< LPTIM1SEL [1:0] bits */
N#define RCC_CCIPR_LPTIM1SEL_0            (0x1U << RCC_CCIPR_LPTIM1SEL_Pos)     /*!< 0x00040000 */
N#define RCC_CCIPR_LPTIM1SEL_1            (0x2U << RCC_CCIPR_LPTIM1SEL_Pos)     /*!< 0x00080000 */
N
N/*!< HSI48 Clock source selection */ 
N#define RCC_CCIPR_HSI48SEL_Pos           (26U)                                 
N#define RCC_CCIPR_HSI48SEL_Msk           (0x1U << RCC_CCIPR_HSI48SEL_Pos)      /*!< 0x04000000 */
N#define RCC_CCIPR_HSI48SEL               RCC_CCIPR_HSI48SEL_Msk                /*!< HSI48 RC clock source selection bit for USB and RNG*/
N
N/* Legacy defines */
N#define RCC_CCIPR_HSI48MSEL                 RCC_CCIPR_HSI48SEL
N
N/*******************  Bit definition for RCC_CSR register  *******************/
N#define RCC_CSR_LSION_Pos                (0U)                                  
N#define RCC_CSR_LSION_Msk                (0x1U << RCC_CSR_LSION_Pos)           /*!< 0x00000001 */
N#define RCC_CSR_LSION                    RCC_CSR_LSION_Msk                     /*!< Internal Low Speed oscillator enable */
N#define RCC_CSR_LSIRDY_Pos               (1U)                                  
N#define RCC_CSR_LSIRDY_Msk               (0x1U << RCC_CSR_LSIRDY_Pos)          /*!< 0x00000002 */
N#define RCC_CSR_LSIRDY                   RCC_CSR_LSIRDY_Msk                    /*!< Internal Low Speed oscillator Ready */
N
N#define RCC_CSR_LSEON_Pos                (8U)                                  
N#define RCC_CSR_LSEON_Msk                (0x1U << RCC_CSR_LSEON_Pos)           /*!< 0x00000100 */
N#define RCC_CSR_LSEON                    RCC_CSR_LSEON_Msk                     /*!< External Low Speed oscillator enable */
N#define RCC_CSR_LSERDY_Pos               (9U)                                  
N#define RCC_CSR_LSERDY_Msk               (0x1U << RCC_CSR_LSERDY_Pos)          /*!< 0x00000200 */
N#define RCC_CSR_LSERDY                   RCC_CSR_LSERDY_Msk                    /*!< External Low Speed oscillator Ready */
N#define RCC_CSR_LSEBYP_Pos               (10U)                                 
N#define RCC_CSR_LSEBYP_Msk               (0x1U << RCC_CSR_LSEBYP_Pos)          /*!< 0x00000400 */
N#define RCC_CSR_LSEBYP                   RCC_CSR_LSEBYP_Msk                    /*!< External Low Speed oscillator Bypass */
N                                             
N#define RCC_CSR_LSEDRV_Pos               (11U)                                 
N#define RCC_CSR_LSEDRV_Msk               (0x3U << RCC_CSR_LSEDRV_Pos)          /*!< 0x00001800 */
N#define RCC_CSR_LSEDRV                   RCC_CSR_LSEDRV_Msk                    /*!< LSEDRV[1:0] bits (LSE Osc. drive capability) */
N#define RCC_CSR_LSEDRV_0                 (0x1U << RCC_CSR_LSEDRV_Pos)          /*!< 0x00000800 */
N#define RCC_CSR_LSEDRV_1                 (0x2U << RCC_CSR_LSEDRV_Pos)          /*!< 0x00001000 */
N                                             
N#define RCC_CSR_LSECSSON_Pos             (13U)                                 
N#define RCC_CSR_LSECSSON_Msk             (0x1U << RCC_CSR_LSECSSON_Pos)        /*!< 0x00002000 */
N#define RCC_CSR_LSECSSON                 RCC_CSR_LSECSSON_Msk                  /*!< External Low Speed oscillator CSS Enable */
N#define RCC_CSR_LSECSSD_Pos              (14U)                                 
N#define RCC_CSR_LSECSSD_Msk              (0x1U << RCC_CSR_LSECSSD_Pos)         /*!< 0x00004000 */
N#define RCC_CSR_LSECSSD                  RCC_CSR_LSECSSD_Msk                   /*!< External Low Speed oscillator CSS Detected */
N                                             
N/*!< RTC congiguration */                    
N#define RCC_CSR_RTCSEL_Pos               (16U)                                 
N#define RCC_CSR_RTCSEL_Msk               (0x3U << RCC_CSR_RTCSEL_Pos)          /*!< 0x00030000 */
N#define RCC_CSR_RTCSEL                   RCC_CSR_RTCSEL_Msk                    /*!< RTCSEL[1:0] bits (RTC clock source selection) */
N#define RCC_CSR_RTCSEL_0                 (0x1U << RCC_CSR_RTCSEL_Pos)          /*!< 0x00010000 */
N#define RCC_CSR_RTCSEL_1                 (0x2U << RCC_CSR_RTCSEL_Pos)          /*!< 0x00020000 */
N                                             
N#define RCC_CSR_RTCSEL_NOCLOCK               (0x00000000U)                     /*!< No clock */
N#define RCC_CSR_RTCSEL_LSE_Pos           (16U)                                 
N#define RCC_CSR_RTCSEL_LSE_Msk           (0x1U << RCC_CSR_RTCSEL_LSE_Pos)      /*!< 0x00010000 */
N#define RCC_CSR_RTCSEL_LSE               RCC_CSR_RTCSEL_LSE_Msk                /*!< LSE oscillator clock used as RTC clock */
N#define RCC_CSR_RTCSEL_LSI_Pos           (17U)                                 
N#define RCC_CSR_RTCSEL_LSI_Msk           (0x1U << RCC_CSR_RTCSEL_LSI_Pos)      /*!< 0x00020000 */
N#define RCC_CSR_RTCSEL_LSI               RCC_CSR_RTCSEL_LSI_Msk                /*!< LSI oscillator clock used as RTC clock */
N#define RCC_CSR_RTCSEL_HSE_Pos           (16U)                                 
N#define RCC_CSR_RTCSEL_HSE_Msk           (0x3U << RCC_CSR_RTCSEL_HSE_Pos)      /*!< 0x00030000 */
N#define RCC_CSR_RTCSEL_HSE               RCC_CSR_RTCSEL_HSE_Msk                /*!< HSE oscillator clock used as RTC clock */
N                                             
N#define RCC_CSR_RTCEN_Pos                (18U)                                 
N#define RCC_CSR_RTCEN_Msk                (0x1U << RCC_CSR_RTCEN_Pos)           /*!< 0x00040000 */
N#define RCC_CSR_RTCEN                    RCC_CSR_RTCEN_Msk                     /*!< RTC clock enable */
N#define RCC_CSR_RTCRST_Pos               (19U)                                 
N#define RCC_CSR_RTCRST_Msk               (0x1U << RCC_CSR_RTCRST_Pos)          /*!< 0x00080000 */
N#define RCC_CSR_RTCRST                   RCC_CSR_RTCRST_Msk                    /*!< RTC software reset  */
N
N#define RCC_CSR_RMVF_Pos                 (23U)                                 
N#define RCC_CSR_RMVF_Msk                 (0x1U << RCC_CSR_RMVF_Pos)            /*!< 0x00800000 */
N#define RCC_CSR_RMVF                     RCC_CSR_RMVF_Msk                      /*!< Remove reset flag */
N#define RCC_CSR_FWRSTF_Pos               (24U)                                 
N#define RCC_CSR_FWRSTF_Msk               (0x1U << RCC_CSR_FWRSTF_Pos)          /*!< 0x01000000 */
N#define RCC_CSR_FWRSTF                   RCC_CSR_FWRSTF_Msk                    /*!< Mifare Firewall reset flag */
N#define RCC_CSR_OBLRSTF_Pos              (25U)                                 
N#define RCC_CSR_OBLRSTF_Msk              (0x1U << RCC_CSR_OBLRSTF_Pos)         /*!< 0x02000000 */
N#define RCC_CSR_OBLRSTF                  RCC_CSR_OBLRSTF_Msk                   /*!< OBL reset flag */
N#define RCC_CSR_PINRSTF_Pos              (26U)                                 
N#define RCC_CSR_PINRSTF_Msk              (0x1U << RCC_CSR_PINRSTF_Pos)         /*!< 0x04000000 */
N#define RCC_CSR_PINRSTF                  RCC_CSR_PINRSTF_Msk                   /*!< PIN reset flag */
N#define RCC_CSR_PORRSTF_Pos              (27U)                                 
N#define RCC_CSR_PORRSTF_Msk              (0x1U << RCC_CSR_PORRSTF_Pos)         /*!< 0x08000000 */
N#define RCC_CSR_PORRSTF                  RCC_CSR_PORRSTF_Msk                   /*!< POR/PDR reset flag */
N#define RCC_CSR_SFTRSTF_Pos              (28U)                                 
N#define RCC_CSR_SFTRSTF_Msk              (0x1U << RCC_CSR_SFTRSTF_Pos)         /*!< 0x10000000 */
N#define RCC_CSR_SFTRSTF                  RCC_CSR_SFTRSTF_Msk                   /*!< Software Reset flag */
N#define RCC_CSR_IWDGRSTF_Pos             (29U)                                 
N#define RCC_CSR_IWDGRSTF_Msk             (0x1U << RCC_CSR_IWDGRSTF_Pos)        /*!< 0x20000000 */
N#define RCC_CSR_IWDGRSTF                 RCC_CSR_IWDGRSTF_Msk                  /*!< Independent Watchdog reset flag */
N#define RCC_CSR_WWDGRSTF_Pos             (30U)                                 
N#define RCC_CSR_WWDGRSTF_Msk             (0x1U << RCC_CSR_WWDGRSTF_Pos)        /*!< 0x40000000 */
N#define RCC_CSR_WWDGRSTF                 RCC_CSR_WWDGRSTF_Msk                  /*!< Window watchdog reset flag */
N#define RCC_CSR_LPWRRSTF_Pos             (31U)                                 
N#define RCC_CSR_LPWRRSTF_Msk             (0x1U << RCC_CSR_LPWRRSTF_Pos)        /*!< 0x80000000 */
N#define RCC_CSR_LPWRRSTF                 RCC_CSR_LPWRRSTF_Msk                  /*!< Low-Power reset flag */
N
N/* Reference defines */
N#define RCC_CSR_OBL                         RCC_CSR_OBLRSTF               /*!< OBL reset flag */
N
N
N/******************************************************************************/
N/*                                                                            */
N/*                                    RNG                                     */
N/*                                                                            */
N/******************************************************************************/
N/********************  Bits definition for RNG_CR register  *******************/
N#define RNG_CR_RNGEN_Pos    (2U)                                               
N#define RNG_CR_RNGEN_Msk    (0x1U << RNG_CR_RNGEN_Pos)                         /*!< 0x00000004 */
N#define RNG_CR_RNGEN        RNG_CR_RNGEN_Msk                                   
N#define RNG_CR_IE_Pos       (3U)                                               
N#define RNG_CR_IE_Msk       (0x1U << RNG_CR_IE_Pos)                            /*!< 0x00000008 */
N#define RNG_CR_IE           RNG_CR_IE_Msk                                      
N
N/********************  Bits definition for RNG_SR register  *******************/
N#define RNG_SR_DRDY_Pos     (0U)                                               
N#define RNG_SR_DRDY_Msk     (0x1U << RNG_SR_DRDY_Pos)                          /*!< 0x00000001 */
N#define RNG_SR_DRDY         RNG_SR_DRDY_Msk                                    
N#define RNG_SR_CECS_Pos     (1U)                                               
N#define RNG_SR_CECS_Msk     (0x1U << RNG_SR_CECS_Pos)                          /*!< 0x00000002 */
N#define RNG_SR_CECS         RNG_SR_CECS_Msk                                    
N#define RNG_SR_SECS_Pos     (2U)                                               
N#define RNG_SR_SECS_Msk     (0x1U << RNG_SR_SECS_Pos)                          /*!< 0x00000004 */
N#define RNG_SR_SECS         RNG_SR_SECS_Msk                                    
N#define RNG_SR_CEIS_Pos     (5U)                                               
N#define RNG_SR_CEIS_Msk     (0x1U << RNG_SR_CEIS_Pos)                          /*!< 0x00000020 */
N#define RNG_SR_CEIS         RNG_SR_CEIS_Msk                                    
N#define RNG_SR_SEIS_Pos     (6U)                                               
N#define RNG_SR_SEIS_Msk     (0x1U << RNG_SR_SEIS_Pos)                          /*!< 0x00000040 */
N#define RNG_SR_SEIS         RNG_SR_SEIS_Msk                                    
N
N/******************************************************************************/
N/*                                                                            */
N/*                           Real-Time Clock (RTC)                            */
N/*                                                                            */
N/******************************************************************************/
N/*
N* @brief Specific device feature definitions
N*/
N#define RTC_TAMPER1_SUPPORT
N#define RTC_TAMPER2_SUPPORT
N#define RTC_WAKEUP_SUPPORT
N#define RTC_BACKUP_SUPPORT
N
N/********************  Bits definition for RTC_TR register  *******************/
N#define RTC_TR_PM_Pos                  (22U)                                   
N#define RTC_TR_PM_Msk                  (0x1U << RTC_TR_PM_Pos)                 /*!< 0x00400000 */
N#define RTC_TR_PM                      RTC_TR_PM_Msk                           /*!<  */
N#define RTC_TR_HT_Pos                  (20U)                                   
N#define RTC_TR_HT_Msk                  (0x3U << RTC_TR_HT_Pos)                 /*!< 0x00300000 */
N#define RTC_TR_HT                      RTC_TR_HT_Msk                           /*!<  */
N#define RTC_TR_HT_0                    (0x1U << RTC_TR_HT_Pos)                 /*!< 0x00100000 */
N#define RTC_TR_HT_1                    (0x2U << RTC_TR_HT_Pos)                 /*!< 0x00200000 */
N#define RTC_TR_HU_Pos                  (16U)                                   
N#define RTC_TR_HU_Msk                  (0xFU << RTC_TR_HU_Pos)                 /*!< 0x000F0000 */
N#define RTC_TR_HU                      RTC_TR_HU_Msk                           /*!<  */
N#define RTC_TR_HU_0                    (0x1U << RTC_TR_HU_Pos)                 /*!< 0x00010000 */
N#define RTC_TR_HU_1                    (0x2U << RTC_TR_HU_Pos)                 /*!< 0x00020000 */
N#define RTC_TR_HU_2                    (0x4U << RTC_TR_HU_Pos)                 /*!< 0x00040000 */
N#define RTC_TR_HU_3                    (0x8U << RTC_TR_HU_Pos)                 /*!< 0x00080000 */
N#define RTC_TR_MNT_Pos                 (12U)                                   
N#define RTC_TR_MNT_Msk                 (0x7U << RTC_TR_MNT_Pos)                /*!< 0x00007000 */
N#define RTC_TR_MNT                     RTC_TR_MNT_Msk                          /*!<  */
N#define RTC_TR_MNT_0                   (0x1U << RTC_TR_MNT_Pos)                /*!< 0x00001000 */
N#define RTC_TR_MNT_1                   (0x2U << RTC_TR_MNT_Pos)                /*!< 0x00002000 */
N#define RTC_TR_MNT_2                   (0x4U << RTC_TR_MNT_Pos)                /*!< 0x00004000 */
N#define RTC_TR_MNU_Pos                 (8U)                                    
N#define RTC_TR_MNU_Msk                 (0xFU << RTC_TR_MNU_Pos)                /*!< 0x00000F00 */
N#define RTC_TR_MNU                     RTC_TR_MNU_Msk                          /*!<  */
N#define RTC_TR_MNU_0                   (0x1U << RTC_TR_MNU_Pos)                /*!< 0x00000100 */
N#define RTC_TR_MNU_1                   (0x2U << RTC_TR_MNU_Pos)                /*!< 0x00000200 */
N#define RTC_TR_MNU_2                   (0x4U << RTC_TR_MNU_Pos)                /*!< 0x00000400 */
N#define RTC_TR_MNU_3                   (0x8U << RTC_TR_MNU_Pos)                /*!< 0x00000800 */
N#define RTC_TR_ST_Pos                  (4U)                                    
N#define RTC_TR_ST_Msk                  (0x7U << RTC_TR_ST_Pos)                 /*!< 0x00000070 */
N#define RTC_TR_ST                      RTC_TR_ST_Msk                           /*!<  */
N#define RTC_TR_ST_0                    (0x1U << RTC_TR_ST_Pos)                 /*!< 0x00000010 */
N#define RTC_TR_ST_1                    (0x2U << RTC_TR_ST_Pos)                 /*!< 0x00000020 */
N#define RTC_TR_ST_2                    (0x4U << RTC_TR_ST_Pos)                 /*!< 0x00000040 */
N#define RTC_TR_SU_Pos                  (0U)                                    
N#define RTC_TR_SU_Msk                  (0xFU << RTC_TR_SU_Pos)                 /*!< 0x0000000F */
N#define RTC_TR_SU                      RTC_TR_SU_Msk                           /*!<  */
N#define RTC_TR_SU_0                    (0x1U << RTC_TR_SU_Pos)                 /*!< 0x00000001 */
N#define RTC_TR_SU_1                    (0x2U << RTC_TR_SU_Pos)                 /*!< 0x00000002 */
N#define RTC_TR_SU_2                    (0x4U << RTC_TR_SU_Pos)                 /*!< 0x00000004 */
N#define RTC_TR_SU_3                    (0x8U << RTC_TR_SU_Pos)                 /*!< 0x00000008 */
N
N/********************  Bits definition for RTC_DR register  *******************/
N#define RTC_DR_YT_Pos                  (20U)                                   
N#define RTC_DR_YT_Msk                  (0xFU << RTC_DR_YT_Pos)                 /*!< 0x00F00000 */
N#define RTC_DR_YT                      RTC_DR_YT_Msk                           /*!<  */
N#define RTC_DR_YT_0                    (0x1U << RTC_DR_YT_Pos)                 /*!< 0x00100000 */
N#define RTC_DR_YT_1                    (0x2U << RTC_DR_YT_Pos)                 /*!< 0x00200000 */
N#define RTC_DR_YT_2                    (0x4U << RTC_DR_YT_Pos)                 /*!< 0x00400000 */
N#define RTC_DR_YT_3                    (0x8U << RTC_DR_YT_Pos)                 /*!< 0x00800000 */
N#define RTC_DR_YU_Pos                  (16U)                                   
N#define RTC_DR_YU_Msk                  (0xFU << RTC_DR_YU_Pos)                 /*!< 0x000F0000 */
N#define RTC_DR_YU                      RTC_DR_YU_Msk                           /*!<  */
N#define RTC_DR_YU_0                    (0x1U << RTC_DR_YU_Pos)                 /*!< 0x00010000 */
N#define RTC_DR_YU_1                    (0x2U << RTC_DR_YU_Pos)                 /*!< 0x00020000 */
N#define RTC_DR_YU_2                    (0x4U << RTC_DR_YU_Pos)                 /*!< 0x00040000 */
N#define RTC_DR_YU_3                    (0x8U << RTC_DR_YU_Pos)                 /*!< 0x00080000 */
N#define RTC_DR_WDU_Pos                 (13U)                                   
N#define RTC_DR_WDU_Msk                 (0x7U << RTC_DR_WDU_Pos)                /*!< 0x0000E000 */
N#define RTC_DR_WDU                     RTC_DR_WDU_Msk                          /*!<  */
N#define RTC_DR_WDU_0                   (0x1U << RTC_DR_WDU_Pos)                /*!< 0x00002000 */
N#define RTC_DR_WDU_1                   (0x2U << RTC_DR_WDU_Pos)                /*!< 0x00004000 */
N#define RTC_DR_WDU_2                   (0x4U << RTC_DR_WDU_Pos)                /*!< 0x00008000 */
N#define RTC_DR_MT_Pos                  (12U)                                   
N#define RTC_DR_MT_Msk                  (0x1U << RTC_DR_MT_Pos)                 /*!< 0x00001000 */
N#define RTC_DR_MT                      RTC_DR_MT_Msk                           /*!<  */
N#define RTC_DR_MU_Pos                  (8U)                                    
N#define RTC_DR_MU_Msk                  (0xFU << RTC_DR_MU_Pos)                 /*!< 0x00000F00 */
N#define RTC_DR_MU                      RTC_DR_MU_Msk                           /*!<  */
N#define RTC_DR_MU_0                    (0x1U << RTC_DR_MU_Pos)                 /*!< 0x00000100 */
N#define RTC_DR_MU_1                    (0x2U << RTC_DR_MU_Pos)                 /*!< 0x00000200 */
N#define RTC_DR_MU_2                    (0x4U << RTC_DR_MU_Pos)                 /*!< 0x00000400 */
N#define RTC_DR_MU_3                    (0x8U << RTC_DR_MU_Pos)                 /*!< 0x00000800 */
N#define RTC_DR_DT_Pos                  (4U)                                    
N#define RTC_DR_DT_Msk                  (0x3U << RTC_DR_DT_Pos)                 /*!< 0x00000030 */
N#define RTC_DR_DT                      RTC_DR_DT_Msk                           /*!<  */
N#define RTC_DR_DT_0                    (0x1U << RTC_DR_DT_Pos)                 /*!< 0x00000010 */
N#define RTC_DR_DT_1                    (0x2U << RTC_DR_DT_Pos)                 /*!< 0x00000020 */
N#define RTC_DR_DU_Pos                  (0U)                                    
N#define RTC_DR_DU_Msk                  (0xFU << RTC_DR_DU_Pos)                 /*!< 0x0000000F */
N#define RTC_DR_DU                      RTC_DR_DU_Msk                           /*!<  */
N#define RTC_DR_DU_0                    (0x1U << RTC_DR_DU_Pos)                 /*!< 0x00000001 */
N#define RTC_DR_DU_1                    (0x2U << RTC_DR_DU_Pos)                 /*!< 0x00000002 */
N#define RTC_DR_DU_2                    (0x4U << RTC_DR_DU_Pos)                 /*!< 0x00000004 */
N#define RTC_DR_DU_3                    (0x8U << RTC_DR_DU_Pos)                 /*!< 0x00000008 */
N
N/********************  Bits definition for RTC_CR register  *******************/
N#define RTC_CR_COE_Pos                 (23U)                                   
N#define RTC_CR_COE_Msk                 (0x1U << RTC_CR_COE_Pos)                /*!< 0x00800000 */
N#define RTC_CR_COE                     RTC_CR_COE_Msk                          /*!<  */
N#define RTC_CR_OSEL_Pos                (21U)                                   
N#define RTC_CR_OSEL_Msk                (0x3U << RTC_CR_OSEL_Pos)               /*!< 0x00600000 */
N#define RTC_CR_OSEL                    RTC_CR_OSEL_Msk                         /*!<  */
N#define RTC_CR_OSEL_0                  (0x1U << RTC_CR_OSEL_Pos)               /*!< 0x00200000 */
N#define RTC_CR_OSEL_1                  (0x2U << RTC_CR_OSEL_Pos)               /*!< 0x00400000 */
N#define RTC_CR_POL_Pos                 (20U)                                   
N#define RTC_CR_POL_Msk                 (0x1U << RTC_CR_POL_Pos)                /*!< 0x00100000 */
N#define RTC_CR_POL                     RTC_CR_POL_Msk                          /*!<  */
N#define RTC_CR_COSEL_Pos               (19U)                                   
N#define RTC_CR_COSEL_Msk               (0x1U << RTC_CR_COSEL_Pos)              /*!< 0x00080000 */
N#define RTC_CR_COSEL                   RTC_CR_COSEL_Msk                        /*!<  */
N#define RTC_CR_BCK_Pos                 (18U)                                   
N#define RTC_CR_BCK_Msk                 (0x1U << RTC_CR_BCK_Pos)                /*!< 0x00040000 */
N#define RTC_CR_BCK                     RTC_CR_BCK_Msk                          /*!<  */
N#define RTC_CR_SUB1H_Pos               (17U)                                   
N#define RTC_CR_SUB1H_Msk               (0x1U << RTC_CR_SUB1H_Pos)              /*!< 0x00020000 */
N#define RTC_CR_SUB1H                   RTC_CR_SUB1H_Msk                        /*!<  */
N#define RTC_CR_ADD1H_Pos               (16U)                                   
N#define RTC_CR_ADD1H_Msk               (0x1U << RTC_CR_ADD1H_Pos)              /*!< 0x00010000 */
N#define RTC_CR_ADD1H                   RTC_CR_ADD1H_Msk                        /*!<  */
N#define RTC_CR_TSIE_Pos                (15U)                                   
N#define RTC_CR_TSIE_Msk                (0x1U << RTC_CR_TSIE_Pos)               /*!< 0x00008000 */
N#define RTC_CR_TSIE                    RTC_CR_TSIE_Msk                         /*!<  */
N#define RTC_CR_WUTIE_Pos               (14U)                                   
N#define RTC_CR_WUTIE_Msk               (0x1U << RTC_CR_WUTIE_Pos)              /*!< 0x00004000 */
N#define RTC_CR_WUTIE                   RTC_CR_WUTIE_Msk                        /*!<  */
N#define RTC_CR_ALRBIE_Pos              (13U)                                   
N#define RTC_CR_ALRBIE_Msk              (0x1U << RTC_CR_ALRBIE_Pos)             /*!< 0x00002000 */
N#define RTC_CR_ALRBIE                  RTC_CR_ALRBIE_Msk                       /*!<  */
N#define RTC_CR_ALRAIE_Pos              (12U)                                   
N#define RTC_CR_ALRAIE_Msk              (0x1U << RTC_CR_ALRAIE_Pos)             /*!< 0x00001000 */
N#define RTC_CR_ALRAIE                  RTC_CR_ALRAIE_Msk                       /*!<  */
N#define RTC_CR_TSE_Pos                 (11U)                                   
N#define RTC_CR_TSE_Msk                 (0x1U << RTC_CR_TSE_Pos)                /*!< 0x00000800 */
N#define RTC_CR_TSE                     RTC_CR_TSE_Msk                          /*!<  */
N#define RTC_CR_WUTE_Pos                (10U)                                   
N#define RTC_CR_WUTE_Msk                (0x1U << RTC_CR_WUTE_Pos)               /*!< 0x00000400 */
N#define RTC_CR_WUTE                    RTC_CR_WUTE_Msk                         /*!<  */
N#define RTC_CR_ALRBE_Pos               (9U)                                    
N#define RTC_CR_ALRBE_Msk               (0x1U << RTC_CR_ALRBE_Pos)              /*!< 0x00000200 */
N#define RTC_CR_ALRBE                   RTC_CR_ALRBE_Msk                        /*!<  */
N#define RTC_CR_ALRAE_Pos               (8U)                                    
N#define RTC_CR_ALRAE_Msk               (0x1U << RTC_CR_ALRAE_Pos)              /*!< 0x00000100 */
N#define RTC_CR_ALRAE                   RTC_CR_ALRAE_Msk                        /*!<  */
N#define RTC_CR_FMT_Pos                 (6U)                                    
N#define RTC_CR_FMT_Msk                 (0x1U << RTC_CR_FMT_Pos)                /*!< 0x00000040 */
N#define RTC_CR_FMT                     RTC_CR_FMT_Msk                          /*!<  */
N#define RTC_CR_BYPSHAD_Pos             (5U)                                    
N#define RTC_CR_BYPSHAD_Msk             (0x1U << RTC_CR_BYPSHAD_Pos)            /*!< 0x00000020 */
N#define RTC_CR_BYPSHAD                 RTC_CR_BYPSHAD_Msk                      /*!<  */
N#define RTC_CR_REFCKON_Pos             (4U)                                    
N#define RTC_CR_REFCKON_Msk             (0x1U << RTC_CR_REFCKON_Pos)            /*!< 0x00000010 */
N#define RTC_CR_REFCKON                 RTC_CR_REFCKON_Msk                      /*!<  */
N#define RTC_CR_TSEDGE_Pos              (3U)                                    
N#define RTC_CR_TSEDGE_Msk              (0x1U << RTC_CR_TSEDGE_Pos)             /*!< 0x00000008 */
N#define RTC_CR_TSEDGE                  RTC_CR_TSEDGE_Msk                       /*!<  */
N#define RTC_CR_WUCKSEL_Pos             (0U)                                    
N#define RTC_CR_WUCKSEL_Msk             (0x7U << RTC_CR_WUCKSEL_Pos)            /*!< 0x00000007 */
N#define RTC_CR_WUCKSEL                 RTC_CR_WUCKSEL_Msk                      /*!<  */
N#define RTC_CR_WUCKSEL_0               (0x1U << RTC_CR_WUCKSEL_Pos)            /*!< 0x00000001 */
N#define RTC_CR_WUCKSEL_1               (0x2U << RTC_CR_WUCKSEL_Pos)            /*!< 0x00000002 */
N#define RTC_CR_WUCKSEL_2               (0x4U << RTC_CR_WUCKSEL_Pos)            /*!< 0x00000004 */
N
N/********************  Bits definition for RTC_ISR register  ******************/
N#define RTC_ISR_RECALPF_Pos            (16U)                                   
N#define RTC_ISR_RECALPF_Msk            (0x1U << RTC_ISR_RECALPF_Pos)           /*!< 0x00010000 */
N#define RTC_ISR_RECALPF                RTC_ISR_RECALPF_Msk                     /*!<  */
N#define RTC_ISR_TAMP2F_Pos             (14U)                                   
N#define RTC_ISR_TAMP2F_Msk             (0x1U << RTC_ISR_TAMP2F_Pos)            /*!< 0x00004000 */
N#define RTC_ISR_TAMP2F                 RTC_ISR_TAMP2F_Msk                      /*!<  */
N#define RTC_ISR_TAMP1F_Pos             (13U)                                   
N#define RTC_ISR_TAMP1F_Msk             (0x1U << RTC_ISR_TAMP1F_Pos)            /*!< 0x00002000 */
N#define RTC_ISR_TAMP1F                 RTC_ISR_TAMP1F_Msk                      /*!<  */
N#define RTC_ISR_TSOVF_Pos              (12U)                                   
N#define RTC_ISR_TSOVF_Msk              (0x1U << RTC_ISR_TSOVF_Pos)             /*!< 0x00001000 */
N#define RTC_ISR_TSOVF                  RTC_ISR_TSOVF_Msk                       /*!<  */
N#define RTC_ISR_TSF_Pos                (11U)                                   
N#define RTC_ISR_TSF_Msk                (0x1U << RTC_ISR_TSF_Pos)               /*!< 0x00000800 */
N#define RTC_ISR_TSF                    RTC_ISR_TSF_Msk                         /*!<  */
N#define RTC_ISR_WUTF_Pos               (10U)                                   
N#define RTC_ISR_WUTF_Msk               (0x1U << RTC_ISR_WUTF_Pos)              /*!< 0x00000400 */
N#define RTC_ISR_WUTF                   RTC_ISR_WUTF_Msk                        /*!<  */
N#define RTC_ISR_ALRBF_Pos              (9U)                                    
N#define RTC_ISR_ALRBF_Msk              (0x1U << RTC_ISR_ALRBF_Pos)             /*!< 0x00000200 */
N#define RTC_ISR_ALRBF                  RTC_ISR_ALRBF_Msk                       /*!<  */
N#define RTC_ISR_ALRAF_Pos              (8U)                                    
N#define RTC_ISR_ALRAF_Msk              (0x1U << RTC_ISR_ALRAF_Pos)             /*!< 0x00000100 */
N#define RTC_ISR_ALRAF                  RTC_ISR_ALRAF_Msk                       /*!<  */
N#define RTC_ISR_INIT_Pos               (7U)                                    
N#define RTC_ISR_INIT_Msk               (0x1U << RTC_ISR_INIT_Pos)              /*!< 0x00000080 */
N#define RTC_ISR_INIT                   RTC_ISR_INIT_Msk                        /*!<  */
N#define RTC_ISR_INITF_Pos              (6U)                                    
N#define RTC_ISR_INITF_Msk              (0x1U << RTC_ISR_INITF_Pos)             /*!< 0x00000040 */
N#define RTC_ISR_INITF                  RTC_ISR_INITF_Msk                       /*!<  */
N#define RTC_ISR_RSF_Pos                (5U)                                    
N#define RTC_ISR_RSF_Msk                (0x1U << RTC_ISR_RSF_Pos)               /*!< 0x00000020 */
N#define RTC_ISR_RSF                    RTC_ISR_RSF_Msk                         /*!<  */
N#define RTC_ISR_INITS_Pos              (4U)                                    
N#define RTC_ISR_INITS_Msk              (0x1U << RTC_ISR_INITS_Pos)             /*!< 0x00000010 */
N#define RTC_ISR_INITS                  RTC_ISR_INITS_Msk                       /*!<  */
N#define RTC_ISR_SHPF_Pos               (3U)                                    
N#define RTC_ISR_SHPF_Msk               (0x1U << RTC_ISR_SHPF_Pos)              /*!< 0x00000008 */
N#define RTC_ISR_SHPF                   RTC_ISR_SHPF_Msk                        /*!<  */
N#define RTC_ISR_WUTWF_Pos              (2U)                                    
N#define RTC_ISR_WUTWF_Msk              (0x1U << RTC_ISR_WUTWF_Pos)             /*!< 0x00000004 */
N#define RTC_ISR_WUTWF                  RTC_ISR_WUTWF_Msk                       /*!<  */
N#define RTC_ISR_ALRBWF_Pos             (1U)                                    
N#define RTC_ISR_ALRBWF_Msk             (0x1U << RTC_ISR_ALRBWF_Pos)            /*!< 0x00000002 */
N#define RTC_ISR_ALRBWF                 RTC_ISR_ALRBWF_Msk                      /*!<  */
N#define RTC_ISR_ALRAWF_Pos             (0U)                                    
N#define RTC_ISR_ALRAWF_Msk             (0x1U << RTC_ISR_ALRAWF_Pos)            /*!< 0x00000001 */
N#define RTC_ISR_ALRAWF                 RTC_ISR_ALRAWF_Msk                      /*!<  */
N
N/********************  Bits definition for RTC_PRER register  *****************/
N#define RTC_PRER_PREDIV_A_Pos          (16U)                                   
N#define RTC_PRER_PREDIV_A_Msk          (0x7FU << RTC_PRER_PREDIV_A_Pos)        /*!< 0x007F0000 */
N#define RTC_PRER_PREDIV_A              RTC_PRER_PREDIV_A_Msk                   /*!<  */
N#define RTC_PRER_PREDIV_S_Pos          (0U)                                    
N#define RTC_PRER_PREDIV_S_Msk          (0x7FFFU << RTC_PRER_PREDIV_S_Pos)      /*!< 0x00007FFF */
N#define RTC_PRER_PREDIV_S              RTC_PRER_PREDIV_S_Msk                   /*!<  */
N
N/********************  Bits definition for RTC_WUTR register  *****************/
N#define RTC_WUTR_WUT_Pos               (0U)                                    
N#define RTC_WUTR_WUT_Msk               (0xFFFFU << RTC_WUTR_WUT_Pos)           /*!< 0x0000FFFF */
N#define RTC_WUTR_WUT                   RTC_WUTR_WUT_Msk                        
N
N/********************  Bits definition for RTC_ALRMAR register  ***************/
N#define RTC_ALRMAR_MSK4_Pos            (31U)                                   
N#define RTC_ALRMAR_MSK4_Msk            (0x1U << RTC_ALRMAR_MSK4_Pos)           /*!< 0x80000000 */
N#define RTC_ALRMAR_MSK4                RTC_ALRMAR_MSK4_Msk                     /*!<  */
N#define RTC_ALRMAR_WDSEL_Pos           (30U)                                   
N#define RTC_ALRMAR_WDSEL_Msk           (0x1U << RTC_ALRMAR_WDSEL_Pos)          /*!< 0x40000000 */
N#define RTC_ALRMAR_WDSEL               RTC_ALRMAR_WDSEL_Msk                    /*!<  */
N#define RTC_ALRMAR_DT_Pos              (28U)                                   
N#define RTC_ALRMAR_DT_Msk              (0x3U << RTC_ALRMAR_DT_Pos)             /*!< 0x30000000 */
N#define RTC_ALRMAR_DT                  RTC_ALRMAR_DT_Msk                       /*!<  */
N#define RTC_ALRMAR_DT_0                (0x1U << RTC_ALRMAR_DT_Pos)             /*!< 0x10000000 */
N#define RTC_ALRMAR_DT_1                (0x2U << RTC_ALRMAR_DT_Pos)             /*!< 0x20000000 */
N#define RTC_ALRMAR_DU_Pos              (24U)                                   
N#define RTC_ALRMAR_DU_Msk              (0xFU << RTC_ALRMAR_DU_Pos)             /*!< 0x0F000000 */
N#define RTC_ALRMAR_DU                  RTC_ALRMAR_DU_Msk                       /*!<  */
N#define RTC_ALRMAR_DU_0                (0x1U << RTC_ALRMAR_DU_Pos)             /*!< 0x01000000 */
N#define RTC_ALRMAR_DU_1                (0x2U << RTC_ALRMAR_DU_Pos)             /*!< 0x02000000 */
N#define RTC_ALRMAR_DU_2                (0x4U << RTC_ALRMAR_DU_Pos)             /*!< 0x04000000 */
N#define RTC_ALRMAR_DU_3                (0x8U << RTC_ALRMAR_DU_Pos)             /*!< 0x08000000 */
N#define RTC_ALRMAR_MSK3_Pos            (23U)                                   
N#define RTC_ALRMAR_MSK3_Msk            (0x1U << RTC_ALRMAR_MSK3_Pos)           /*!< 0x00800000 */
N#define RTC_ALRMAR_MSK3                RTC_ALRMAR_MSK3_Msk                     /*!<  */
N#define RTC_ALRMAR_PM_Pos              (22U)                                   
N#define RTC_ALRMAR_PM_Msk              (0x1U << RTC_ALRMAR_PM_Pos)             /*!< 0x00400000 */
N#define RTC_ALRMAR_PM                  RTC_ALRMAR_PM_Msk                       /*!<  */
N#define RTC_ALRMAR_HT_Pos              (20U)                                   
N#define RTC_ALRMAR_HT_Msk              (0x3U << RTC_ALRMAR_HT_Pos)             /*!< 0x00300000 */
N#define RTC_ALRMAR_HT                  RTC_ALRMAR_HT_Msk                       /*!<  */
N#define RTC_ALRMAR_HT_0                (0x1U << RTC_ALRMAR_HT_Pos)             /*!< 0x00100000 */
N#define RTC_ALRMAR_HT_1                (0x2U << RTC_ALRMAR_HT_Pos)             /*!< 0x00200000 */
N#define RTC_ALRMAR_HU_Pos              (16U)                                   
N#define RTC_ALRMAR_HU_Msk              (0xFU << RTC_ALRMAR_HU_Pos)             /*!< 0x000F0000 */
N#define RTC_ALRMAR_HU                  RTC_ALRMAR_HU_Msk                       /*!<  */
N#define RTC_ALRMAR_HU_0                (0x1U << RTC_ALRMAR_HU_Pos)             /*!< 0x00010000 */
N#define RTC_ALRMAR_HU_1                (0x2U << RTC_ALRMAR_HU_Pos)             /*!< 0x00020000 */
N#define RTC_ALRMAR_HU_2                (0x4U << RTC_ALRMAR_HU_Pos)             /*!< 0x00040000 */
N#define RTC_ALRMAR_HU_3                (0x8U << RTC_ALRMAR_HU_Pos)             /*!< 0x00080000 */
N#define RTC_ALRMAR_MSK2_Pos            (15U)                                   
N#define RTC_ALRMAR_MSK2_Msk            (0x1U << RTC_ALRMAR_MSK2_Pos)           /*!< 0x00008000 */
N#define RTC_ALRMAR_MSK2                RTC_ALRMAR_MSK2_Msk                     /*!<  */
N#define RTC_ALRMAR_MNT_Pos             (12U)                                   
N#define RTC_ALRMAR_MNT_Msk             (0x7U << RTC_ALRMAR_MNT_Pos)            /*!< 0x00007000 */
N#define RTC_ALRMAR_MNT                 RTC_ALRMAR_MNT_Msk                      /*!<  */
N#define RTC_ALRMAR_MNT_0               (0x1U << RTC_ALRMAR_MNT_Pos)            /*!< 0x00001000 */
N#define RTC_ALRMAR_MNT_1               (0x2U << RTC_ALRMAR_MNT_Pos)            /*!< 0x00002000 */
N#define RTC_ALRMAR_MNT_2               (0x4U << RTC_ALRMAR_MNT_Pos)            /*!< 0x00004000 */
N#define RTC_ALRMAR_MNU_Pos             (8U)                                    
N#define RTC_ALRMAR_MNU_Msk             (0xFU << RTC_ALRMAR_MNU_Pos)            /*!< 0x00000F00 */
N#define RTC_ALRMAR_MNU                 RTC_ALRMAR_MNU_Msk                      /*!<  */
N#define RTC_ALRMAR_MNU_0               (0x1U << RTC_ALRMAR_MNU_Pos)            /*!< 0x00000100 */
N#define RTC_ALRMAR_MNU_1               (0x2U << RTC_ALRMAR_MNU_Pos)            /*!< 0x00000200 */
N#define RTC_ALRMAR_MNU_2               (0x4U << RTC_ALRMAR_MNU_Pos)            /*!< 0x00000400 */
N#define RTC_ALRMAR_MNU_3               (0x8U << RTC_ALRMAR_MNU_Pos)            /*!< 0x00000800 */
N#define RTC_ALRMAR_MSK1_Pos            (7U)                                    
N#define RTC_ALRMAR_MSK1_Msk            (0x1U << RTC_ALRMAR_MSK1_Pos)           /*!< 0x00000080 */
N#define RTC_ALRMAR_MSK1                RTC_ALRMAR_MSK1_Msk                     /*!<  */
N#define RTC_ALRMAR_ST_Pos              (4U)                                    
N#define RTC_ALRMAR_ST_Msk              (0x7U << RTC_ALRMAR_ST_Pos)             /*!< 0x00000070 */
N#define RTC_ALRMAR_ST                  RTC_ALRMAR_ST_Msk                       /*!<  */
N#define RTC_ALRMAR_ST_0                (0x1U << RTC_ALRMAR_ST_Pos)             /*!< 0x00000010 */
N#define RTC_ALRMAR_ST_1                (0x2U << RTC_ALRMAR_ST_Pos)             /*!< 0x00000020 */
N#define RTC_ALRMAR_ST_2                (0x4U << RTC_ALRMAR_ST_Pos)             /*!< 0x00000040 */
N#define RTC_ALRMAR_SU_Pos              (0U)                                    
N#define RTC_ALRMAR_SU_Msk              (0xFU << RTC_ALRMAR_SU_Pos)             /*!< 0x0000000F */
N#define RTC_ALRMAR_SU                  RTC_ALRMAR_SU_Msk                       /*!<  */
N#define RTC_ALRMAR_SU_0                (0x1U << RTC_ALRMAR_SU_Pos)             /*!< 0x00000001 */
N#define RTC_ALRMAR_SU_1                (0x2U << RTC_ALRMAR_SU_Pos)             /*!< 0x00000002 */
N#define RTC_ALRMAR_SU_2                (0x4U << RTC_ALRMAR_SU_Pos)             /*!< 0x00000004 */
N#define RTC_ALRMAR_SU_3                (0x8U << RTC_ALRMAR_SU_Pos)             /*!< 0x00000008 */
N
N/********************  Bits definition for RTC_ALRMBR register  ***************/
N#define RTC_ALRMBR_MSK4_Pos            (31U)                                   
N#define RTC_ALRMBR_MSK4_Msk            (0x1U << RTC_ALRMBR_MSK4_Pos)           /*!< 0x80000000 */
N#define RTC_ALRMBR_MSK4                RTC_ALRMBR_MSK4_Msk                     /*!<  */
N#define RTC_ALRMBR_WDSEL_Pos           (30U)                                   
N#define RTC_ALRMBR_WDSEL_Msk           (0x1U << RTC_ALRMBR_WDSEL_Pos)          /*!< 0x40000000 */
N#define RTC_ALRMBR_WDSEL               RTC_ALRMBR_WDSEL_Msk                    /*!<  */
N#define RTC_ALRMBR_DT_Pos              (28U)                                   
N#define RTC_ALRMBR_DT_Msk              (0x3U << RTC_ALRMBR_DT_Pos)             /*!< 0x30000000 */
N#define RTC_ALRMBR_DT                  RTC_ALRMBR_DT_Msk                       /*!<  */
N#define RTC_ALRMBR_DT_0                (0x1U << RTC_ALRMBR_DT_Pos)             /*!< 0x10000000 */
N#define RTC_ALRMBR_DT_1                (0x2U << RTC_ALRMBR_DT_Pos)             /*!< 0x20000000 */
N#define RTC_ALRMBR_DU_Pos              (24U)                                   
N#define RTC_ALRMBR_DU_Msk              (0xFU << RTC_ALRMBR_DU_Pos)             /*!< 0x0F000000 */
N#define RTC_ALRMBR_DU                  RTC_ALRMBR_DU_Msk                       /*!<  */
N#define RTC_ALRMBR_DU_0                (0x1U << RTC_ALRMBR_DU_Pos)             /*!< 0x01000000 */
N#define RTC_ALRMBR_DU_1                (0x2U << RTC_ALRMBR_DU_Pos)             /*!< 0x02000000 */
N#define RTC_ALRMBR_DU_2                (0x4U << RTC_ALRMBR_DU_Pos)             /*!< 0x04000000 */
N#define RTC_ALRMBR_DU_3                (0x8U << RTC_ALRMBR_DU_Pos)             /*!< 0x08000000 */
N#define RTC_ALRMBR_MSK3_Pos            (23U)                                   
N#define RTC_ALRMBR_MSK3_Msk            (0x1U << RTC_ALRMBR_MSK3_Pos)           /*!< 0x00800000 */
N#define RTC_ALRMBR_MSK3                RTC_ALRMBR_MSK3_Msk                     /*!<  */
N#define RTC_ALRMBR_PM_Pos              (22U)                                   
N#define RTC_ALRMBR_PM_Msk              (0x1U << RTC_ALRMBR_PM_Pos)             /*!< 0x00400000 */
N#define RTC_ALRMBR_PM                  RTC_ALRMBR_PM_Msk                       /*!<  */
N#define RTC_ALRMBR_HT_Pos              (20U)                                   
N#define RTC_ALRMBR_HT_Msk              (0x3U << RTC_ALRMBR_HT_Pos)             /*!< 0x00300000 */
N#define RTC_ALRMBR_HT                  RTC_ALRMBR_HT_Msk                       /*!<  */
N#define RTC_ALRMBR_HT_0                (0x1U << RTC_ALRMBR_HT_Pos)             /*!< 0x00100000 */
N#define RTC_ALRMBR_HT_1                (0x2U << RTC_ALRMBR_HT_Pos)             /*!< 0x00200000 */
N#define RTC_ALRMBR_HU_Pos              (16U)                                   
N#define RTC_ALRMBR_HU_Msk              (0xFU << RTC_ALRMBR_HU_Pos)             /*!< 0x000F0000 */
N#define RTC_ALRMBR_HU                  RTC_ALRMBR_HU_Msk                       /*!<  */
N#define RTC_ALRMBR_HU_0                (0x1U << RTC_ALRMBR_HU_Pos)             /*!< 0x00010000 */
N#define RTC_ALRMBR_HU_1                (0x2U << RTC_ALRMBR_HU_Pos)             /*!< 0x00020000 */
N#define RTC_ALRMBR_HU_2                (0x4U << RTC_ALRMBR_HU_Pos)             /*!< 0x00040000 */
N#define RTC_ALRMBR_HU_3                (0x8U << RTC_ALRMBR_HU_Pos)             /*!< 0x00080000 */
N#define RTC_ALRMBR_MSK2_Pos            (15U)                                   
N#define RTC_ALRMBR_MSK2_Msk            (0x1U << RTC_ALRMBR_MSK2_Pos)           /*!< 0x00008000 */
N#define RTC_ALRMBR_MSK2                RTC_ALRMBR_MSK2_Msk                     /*!<  */
N#define RTC_ALRMBR_MNT_Pos             (12U)                                   
N#define RTC_ALRMBR_MNT_Msk             (0x7U << RTC_ALRMBR_MNT_Pos)            /*!< 0x00007000 */
N#define RTC_ALRMBR_MNT                 RTC_ALRMBR_MNT_Msk                      /*!<  */
N#define RTC_ALRMBR_MNT_0               (0x1U << RTC_ALRMBR_MNT_Pos)            /*!< 0x00001000 */
N#define RTC_ALRMBR_MNT_1               (0x2U << RTC_ALRMBR_MNT_Pos)            /*!< 0x00002000 */
N#define RTC_ALRMBR_MNT_2               (0x4U << RTC_ALRMBR_MNT_Pos)            /*!< 0x00004000 */
N#define RTC_ALRMBR_MNU_Pos             (8U)                                    
N#define RTC_ALRMBR_MNU_Msk             (0xFU << RTC_ALRMBR_MNU_Pos)            /*!< 0x00000F00 */
N#define RTC_ALRMBR_MNU                 RTC_ALRMBR_MNU_Msk                      /*!<  */
N#define RTC_ALRMBR_MNU_0               (0x1U << RTC_ALRMBR_MNU_Pos)            /*!< 0x00000100 */
N#define RTC_ALRMBR_MNU_1               (0x2U << RTC_ALRMBR_MNU_Pos)            /*!< 0x00000200 */
N#define RTC_ALRMBR_MNU_2               (0x4U << RTC_ALRMBR_MNU_Pos)            /*!< 0x00000400 */
N#define RTC_ALRMBR_MNU_3               (0x8U << RTC_ALRMBR_MNU_Pos)            /*!< 0x00000800 */
N#define RTC_ALRMBR_MSK1_Pos            (7U)                                    
N#define RTC_ALRMBR_MSK1_Msk            (0x1U << RTC_ALRMBR_MSK1_Pos)           /*!< 0x00000080 */
N#define RTC_ALRMBR_MSK1                RTC_ALRMBR_MSK1_Msk                     /*!<  */
N#define RTC_ALRMBR_ST_Pos              (4U)                                    
N#define RTC_ALRMBR_ST_Msk              (0x7U << RTC_ALRMBR_ST_Pos)             /*!< 0x00000070 */
N#define RTC_ALRMBR_ST                  RTC_ALRMBR_ST_Msk                       /*!<  */
N#define RTC_ALRMBR_ST_0                (0x1U << RTC_ALRMBR_ST_Pos)             /*!< 0x00000010 */
N#define RTC_ALRMBR_ST_1                (0x2U << RTC_ALRMBR_ST_Pos)             /*!< 0x00000020 */
N#define RTC_ALRMBR_ST_2                (0x4U << RTC_ALRMBR_ST_Pos)             /*!< 0x00000040 */
N#define RTC_ALRMBR_SU_Pos              (0U)                                    
N#define RTC_ALRMBR_SU_Msk              (0xFU << RTC_ALRMBR_SU_Pos)             /*!< 0x0000000F */
N#define RTC_ALRMBR_SU                  RTC_ALRMBR_SU_Msk                       /*!<  */
N#define RTC_ALRMBR_SU_0                (0x1U << RTC_ALRMBR_SU_Pos)             /*!< 0x00000001 */
N#define RTC_ALRMBR_SU_1                (0x2U << RTC_ALRMBR_SU_Pos)             /*!< 0x00000002 */
N#define RTC_ALRMBR_SU_2                (0x4U << RTC_ALRMBR_SU_Pos)             /*!< 0x00000004 */
N#define RTC_ALRMBR_SU_3                (0x8U << RTC_ALRMBR_SU_Pos)             /*!< 0x00000008 */
N
N/********************  Bits definition for RTC_WPR register  ******************/
N#define RTC_WPR_KEY_Pos                (0U)                                    
N#define RTC_WPR_KEY_Msk                (0xFFU << RTC_WPR_KEY_Pos)              /*!< 0x000000FF */
N#define RTC_WPR_KEY                    RTC_WPR_KEY_Msk                         /*!<  */
N
N/********************  Bits definition for RTC_SSR register  ******************/
N#define RTC_SSR_SS_Pos                 (0U)                                    
N#define RTC_SSR_SS_Msk                 (0xFFFFU << RTC_SSR_SS_Pos)             /*!< 0x0000FFFF */
N#define RTC_SSR_SS                     RTC_SSR_SS_Msk                          /*!<  */
N
N/********************  Bits definition for RTC_SHIFTR register  ***************/
N#define RTC_SHIFTR_SUBFS_Pos           (0U)                                    
N#define RTC_SHIFTR_SUBFS_Msk           (0x7FFFU << RTC_SHIFTR_SUBFS_Pos)       /*!< 0x00007FFF */
N#define RTC_SHIFTR_SUBFS               RTC_SHIFTR_SUBFS_Msk                    /*!<  */
N#define RTC_SHIFTR_ADD1S_Pos           (31U)                                   
N#define RTC_SHIFTR_ADD1S_Msk           (0x1U << RTC_SHIFTR_ADD1S_Pos)          /*!< 0x80000000 */
N#define RTC_SHIFTR_ADD1S               RTC_SHIFTR_ADD1S_Msk                    /*!<  */
N
N/********************  Bits definition for RTC_TSTR register  *****************/
N#define RTC_TSTR_PM_Pos                (22U)                                   
N#define RTC_TSTR_PM_Msk                (0x1U << RTC_TSTR_PM_Pos)               /*!< 0x00400000 */
N#define RTC_TSTR_PM                    RTC_TSTR_PM_Msk                         /*!<  */
N#define RTC_TSTR_HT_Pos                (20U)                                   
N#define RTC_TSTR_HT_Msk                (0x3U << RTC_TSTR_HT_Pos)               /*!< 0x00300000 */
N#define RTC_TSTR_HT                    RTC_TSTR_HT_Msk                         /*!<  */
N#define RTC_TSTR_HT_0                  (0x1U << RTC_TSTR_HT_Pos)               /*!< 0x00100000 */
N#define RTC_TSTR_HT_1                  (0x2U << RTC_TSTR_HT_Pos)               /*!< 0x00200000 */
N#define RTC_TSTR_HU_Pos                (16U)                                   
N#define RTC_TSTR_HU_Msk                (0xFU << RTC_TSTR_HU_Pos)               /*!< 0x000F0000 */
N#define RTC_TSTR_HU                    RTC_TSTR_HU_Msk                         /*!<  */
N#define RTC_TSTR_HU_0                  (0x1U << RTC_TSTR_HU_Pos)               /*!< 0x00010000 */
N#define RTC_TSTR_HU_1                  (0x2U << RTC_TSTR_HU_Pos)               /*!< 0x00020000 */
N#define RTC_TSTR_HU_2                  (0x4U << RTC_TSTR_HU_Pos)               /*!< 0x00040000 */
N#define RTC_TSTR_HU_3                  (0x8U << RTC_TSTR_HU_Pos)               /*!< 0x00080000 */
N#define RTC_TSTR_MNT_Pos               (12U)                                   
N#define RTC_TSTR_MNT_Msk               (0x7U << RTC_TSTR_MNT_Pos)              /*!< 0x00007000 */
N#define RTC_TSTR_MNT                   RTC_TSTR_MNT_Msk                        /*!<  */
N#define RTC_TSTR_MNT_0                 (0x1U << RTC_TSTR_MNT_Pos)              /*!< 0x00001000 */
N#define RTC_TSTR_MNT_1                 (0x2U << RTC_TSTR_MNT_Pos)              /*!< 0x00002000 */
N#define RTC_TSTR_MNT_2                 (0x4U << RTC_TSTR_MNT_Pos)              /*!< 0x00004000 */
N#define RTC_TSTR_MNU_Pos               (8U)                                    
N#define RTC_TSTR_MNU_Msk               (0xFU << RTC_TSTR_MNU_Pos)              /*!< 0x00000F00 */
N#define RTC_TSTR_MNU                   RTC_TSTR_MNU_Msk                        /*!<  */
N#define RTC_TSTR_MNU_0                 (0x1U << RTC_TSTR_MNU_Pos)              /*!< 0x00000100 */
N#define RTC_TSTR_MNU_1                 (0x2U << RTC_TSTR_MNU_Pos)              /*!< 0x00000200 */
N#define RTC_TSTR_MNU_2                 (0x4U << RTC_TSTR_MNU_Pos)              /*!< 0x00000400 */
N#define RTC_TSTR_MNU_3                 (0x8U << RTC_TSTR_MNU_Pos)              /*!< 0x00000800 */
N#define RTC_TSTR_ST_Pos                (4U)                                    
N#define RTC_TSTR_ST_Msk                (0x7U << RTC_TSTR_ST_Pos)               /*!< 0x00000070 */
N#define RTC_TSTR_ST                    RTC_TSTR_ST_Msk                         /*!<  */
N#define RTC_TSTR_ST_0                  (0x1U << RTC_TSTR_ST_Pos)               /*!< 0x00000010 */
N#define RTC_TSTR_ST_1                  (0x2U << RTC_TSTR_ST_Pos)               /*!< 0x00000020 */
N#define RTC_TSTR_ST_2                  (0x4U << RTC_TSTR_ST_Pos)               /*!< 0x00000040 */
N#define RTC_TSTR_SU_Pos                (0U)                                    
N#define RTC_TSTR_SU_Msk                (0xFU << RTC_TSTR_SU_Pos)               /*!< 0x0000000F */
N#define RTC_TSTR_SU                    RTC_TSTR_SU_Msk                         /*!<  */
N#define RTC_TSTR_SU_0                  (0x1U << RTC_TSTR_SU_Pos)               /*!< 0x00000001 */
N#define RTC_TSTR_SU_1                  (0x2U << RTC_TSTR_SU_Pos)               /*!< 0x00000002 */
N#define RTC_TSTR_SU_2                  (0x4U << RTC_TSTR_SU_Pos)               /*!< 0x00000004 */
N#define RTC_TSTR_SU_3                  (0x8U << RTC_TSTR_SU_Pos)               /*!< 0x00000008 */
N
N/********************  Bits definition for RTC_TSDR register  *****************/
N#define RTC_TSDR_WDU_Pos               (13U)                                   
N#define RTC_TSDR_WDU_Msk               (0x7U << RTC_TSDR_WDU_Pos)              /*!< 0x0000E000 */
N#define RTC_TSDR_WDU                   RTC_TSDR_WDU_Msk                        /*!<  */
N#define RTC_TSDR_WDU_0                 (0x1U << RTC_TSDR_WDU_Pos)              /*!< 0x00002000 */
N#define RTC_TSDR_WDU_1                 (0x2U << RTC_TSDR_WDU_Pos)              /*!< 0x00004000 */
N#define RTC_TSDR_WDU_2                 (0x4U << RTC_TSDR_WDU_Pos)              /*!< 0x00008000 */
N#define RTC_TSDR_MT_Pos                (12U)                                   
N#define RTC_TSDR_MT_Msk                (0x1U << RTC_TSDR_MT_Pos)               /*!< 0x00001000 */
N#define RTC_TSDR_MT                    RTC_TSDR_MT_Msk                         /*!<  */
N#define RTC_TSDR_MU_Pos                (8U)                                    
N#define RTC_TSDR_MU_Msk                (0xFU << RTC_TSDR_MU_Pos)               /*!< 0x00000F00 */
N#define RTC_TSDR_MU                    RTC_TSDR_MU_Msk                         /*!<  */
N#define RTC_TSDR_MU_0                  (0x1U << RTC_TSDR_MU_Pos)               /*!< 0x00000100 */
N#define RTC_TSDR_MU_1                  (0x2U << RTC_TSDR_MU_Pos)               /*!< 0x00000200 */
N#define RTC_TSDR_MU_2                  (0x4U << RTC_TSDR_MU_Pos)               /*!< 0x00000400 */
N#define RTC_TSDR_MU_3                  (0x8U << RTC_TSDR_MU_Pos)               /*!< 0x00000800 */
N#define RTC_TSDR_DT_Pos                (4U)                                    
N#define RTC_TSDR_DT_Msk                (0x3U << RTC_TSDR_DT_Pos)               /*!< 0x00000030 */
N#define RTC_TSDR_DT                    RTC_TSDR_DT_Msk                         /*!<  */
N#define RTC_TSDR_DT_0                  (0x1U << RTC_TSDR_DT_Pos)               /*!< 0x00000010 */
N#define RTC_TSDR_DT_1                  (0x2U << RTC_TSDR_DT_Pos)               /*!< 0x00000020 */
N#define RTC_TSDR_DU_Pos                (0U)                                    
N#define RTC_TSDR_DU_Msk                (0xFU << RTC_TSDR_DU_Pos)               /*!< 0x0000000F */
N#define RTC_TSDR_DU                    RTC_TSDR_DU_Msk                         /*!<  */
N#define RTC_TSDR_DU_0                  (0x1U << RTC_TSDR_DU_Pos)               /*!< 0x00000001 */
N#define RTC_TSDR_DU_1                  (0x2U << RTC_TSDR_DU_Pos)               /*!< 0x00000002 */
N#define RTC_TSDR_DU_2                  (0x4U << RTC_TSDR_DU_Pos)               /*!< 0x00000004 */
N#define RTC_TSDR_DU_3                  (0x8U << RTC_TSDR_DU_Pos)               /*!< 0x00000008 */
N
N/********************  Bits definition for RTC_TSSSR register  ****************/
N#define RTC_TSSSR_SS_Pos               (0U)                                    
N#define RTC_TSSSR_SS_Msk               (0xFFFFU << RTC_TSSSR_SS_Pos)           /*!< 0x0000FFFF */
N#define RTC_TSSSR_SS                   RTC_TSSSR_SS_Msk                        
N
N/********************  Bits definition for RTC_CALR register  *****************/
N#define RTC_CALR_CALP_Pos              (15U)                                   
N#define RTC_CALR_CALP_Msk              (0x1U << RTC_CALR_CALP_Pos)             /*!< 0x00008000 */
N#define RTC_CALR_CALP                  RTC_CALR_CALP_Msk                       /*!<  */
N#define RTC_CALR_CALW8_Pos             (14U)                                   
N#define RTC_CALR_CALW8_Msk             (0x1U << RTC_CALR_CALW8_Pos)            /*!< 0x00004000 */
N#define RTC_CALR_CALW8                 RTC_CALR_CALW8_Msk                      /*!<  */
N#define RTC_CALR_CALW16_Pos            (13U)                                   
N#define RTC_CALR_CALW16_Msk            (0x1U << RTC_CALR_CALW16_Pos)           /*!< 0x00002000 */
N#define RTC_CALR_CALW16                RTC_CALR_CALW16_Msk                     /*!<  */
N#define RTC_CALR_CALM_Pos              (0U)                                    
N#define RTC_CALR_CALM_Msk              (0x1FFU << RTC_CALR_CALM_Pos)           /*!< 0x000001FF */
N#define RTC_CALR_CALM                  RTC_CALR_CALM_Msk                       /*!<  */
N#define RTC_CALR_CALM_0                (0x001U << RTC_CALR_CALM_Pos)           /*!< 0x00000001 */
N#define RTC_CALR_CALM_1                (0x002U << RTC_CALR_CALM_Pos)           /*!< 0x00000002 */
N#define RTC_CALR_CALM_2                (0x004U << RTC_CALR_CALM_Pos)           /*!< 0x00000004 */
N#define RTC_CALR_CALM_3                (0x008U << RTC_CALR_CALM_Pos)           /*!< 0x00000008 */
N#define RTC_CALR_CALM_4                (0x010U << RTC_CALR_CALM_Pos)           /*!< 0x00000010 */
N#define RTC_CALR_CALM_5                (0x020U << RTC_CALR_CALM_Pos)           /*!< 0x00000020 */
N#define RTC_CALR_CALM_6                (0x040U << RTC_CALR_CALM_Pos)           /*!< 0x00000040 */
N#define RTC_CALR_CALM_7                (0x080U << RTC_CALR_CALM_Pos)           /*!< 0x00000080 */
N#define RTC_CALR_CALM_8                (0x100U << RTC_CALR_CALM_Pos)           /*!< 0x00000100 */
N
N/* Legacy defines */
N#define RTC_CAL_CALP     RTC_CALR_CALP 
N#define RTC_CAL_CALW8    RTC_CALR_CALW8  
N#define RTC_CAL_CALW16   RTC_CALR_CALW16 
N#define RTC_CAL_CALM     RTC_CALR_CALM 
N#define RTC_CAL_CALM_0   RTC_CALR_CALM_0 
N#define RTC_CAL_CALM_1   RTC_CALR_CALM_1 
N#define RTC_CAL_CALM_2   RTC_CALR_CALM_2 
N#define RTC_CAL_CALM_3   RTC_CALR_CALM_3 
N#define RTC_CAL_CALM_4   RTC_CALR_CALM_4 
N#define RTC_CAL_CALM_5   RTC_CALR_CALM_5 
N#define RTC_CAL_CALM_6   RTC_CALR_CALM_6 
N#define RTC_CAL_CALM_7   RTC_CALR_CALM_7 
N#define RTC_CAL_CALM_8   RTC_CALR_CALM_8 
N
N/********************  Bits definition for RTC_TAMPCR register  ****************/
N#define RTC_TAMPCR_TAMP2MF_Pos         (21U)                                   
N#define RTC_TAMPCR_TAMP2MF_Msk         (0x1U << RTC_TAMPCR_TAMP2MF_Pos)        /*!< 0x00200000 */
N#define RTC_TAMPCR_TAMP2MF             RTC_TAMPCR_TAMP2MF_Msk                  /*!<  */
N#define RTC_TAMPCR_TAMP2NOERASE_Pos    (20U)                                   
N#define RTC_TAMPCR_TAMP2NOERASE_Msk    (0x1U << RTC_TAMPCR_TAMP2NOERASE_Pos)   /*!< 0x00100000 */
N#define RTC_TAMPCR_TAMP2NOERASE        RTC_TAMPCR_TAMP2NOERASE_Msk             /*!<  */
N#define RTC_TAMPCR_TAMP2IE_Pos         (19U)                                   
N#define RTC_TAMPCR_TAMP2IE_Msk         (0x1U << RTC_TAMPCR_TAMP2IE_Pos)        /*!< 0x00080000 */
N#define RTC_TAMPCR_TAMP2IE             RTC_TAMPCR_TAMP2IE_Msk                  /*!<  */
N#define RTC_TAMPCR_TAMP1MF_Pos         (18U)                                   
N#define RTC_TAMPCR_TAMP1MF_Msk         (0x1U << RTC_TAMPCR_TAMP1MF_Pos)        /*!< 0x00040000 */
N#define RTC_TAMPCR_TAMP1MF             RTC_TAMPCR_TAMP1MF_Msk                  /*!<  */
N#define RTC_TAMPCR_TAMP1NOERASE_Pos    (17U)                                   
N#define RTC_TAMPCR_TAMP1NOERASE_Msk    (0x1U << RTC_TAMPCR_TAMP1NOERASE_Pos)   /*!< 0x00020000 */
N#define RTC_TAMPCR_TAMP1NOERASE        RTC_TAMPCR_TAMP1NOERASE_Msk             /*!<  */
N#define RTC_TAMPCR_TAMP1IE_Pos         (16U)                                   
N#define RTC_TAMPCR_TAMP1IE_Msk         (0x1U << RTC_TAMPCR_TAMP1IE_Pos)        /*!< 0x00010000 */
N#define RTC_TAMPCR_TAMP1IE             RTC_TAMPCR_TAMP1IE_Msk                  /*!<  */
N#define RTC_TAMPCR_TAMPPUDIS_Pos       (15U)                                   
N#define RTC_TAMPCR_TAMPPUDIS_Msk       (0x1U << RTC_TAMPCR_TAMPPUDIS_Pos)      /*!< 0x00008000 */
N#define RTC_TAMPCR_TAMPPUDIS           RTC_TAMPCR_TAMPPUDIS_Msk                /*!<  */
N#define RTC_TAMPCR_TAMPPRCH_Pos        (13U)                                   
N#define RTC_TAMPCR_TAMPPRCH_Msk        (0x3U << RTC_TAMPCR_TAMPPRCH_Pos)       /*!< 0x00006000 */
N#define RTC_TAMPCR_TAMPPRCH            RTC_TAMPCR_TAMPPRCH_Msk                 /*!<  */
N#define RTC_TAMPCR_TAMPPRCH_0          (0x1U << RTC_TAMPCR_TAMPPRCH_Pos)       /*!< 0x00002000 */
N#define RTC_TAMPCR_TAMPPRCH_1          (0x2U << RTC_TAMPCR_TAMPPRCH_Pos)       /*!< 0x00004000 */
N#define RTC_TAMPCR_TAMPFLT_Pos         (11U)                                   
N#define RTC_TAMPCR_TAMPFLT_Msk         (0x3U << RTC_TAMPCR_TAMPFLT_Pos)        /*!< 0x00001800 */
N#define RTC_TAMPCR_TAMPFLT             RTC_TAMPCR_TAMPFLT_Msk                  /*!<  */
N#define RTC_TAMPCR_TAMPFLT_0           (0x1U << RTC_TAMPCR_TAMPFLT_Pos)        /*!< 0x00000800 */
N#define RTC_TAMPCR_TAMPFLT_1           (0x2U << RTC_TAMPCR_TAMPFLT_Pos)        /*!< 0x00001000 */
N#define RTC_TAMPCR_TAMPFREQ_Pos        (8U)                                    
N#define RTC_TAMPCR_TAMPFREQ_Msk        (0x7U << RTC_TAMPCR_TAMPFREQ_Pos)       /*!< 0x00000700 */
N#define RTC_TAMPCR_TAMPFREQ            RTC_TAMPCR_TAMPFREQ_Msk                 /*!<  */
N#define RTC_TAMPCR_TAMPFREQ_0          (0x1U << RTC_TAMPCR_TAMPFREQ_Pos)       /*!< 0x00000100 */
N#define RTC_TAMPCR_TAMPFREQ_1          (0x2U << RTC_TAMPCR_TAMPFREQ_Pos)       /*!< 0x00000200 */
N#define RTC_TAMPCR_TAMPFREQ_2          (0x4U << RTC_TAMPCR_TAMPFREQ_Pos)       /*!< 0x00000400 */
N#define RTC_TAMPCR_TAMPTS_Pos          (7U)                                    
N#define RTC_TAMPCR_TAMPTS_Msk          (0x1U << RTC_TAMPCR_TAMPTS_Pos)         /*!< 0x00000080 */
N#define RTC_TAMPCR_TAMPTS              RTC_TAMPCR_TAMPTS_Msk                   /*!<  */
N#define RTC_TAMPCR_TAMP2TRG_Pos        (4U)                                    
N#define RTC_TAMPCR_TAMP2TRG_Msk        (0x1U << RTC_TAMPCR_TAMP2TRG_Pos)       /*!< 0x00000010 */
N#define RTC_TAMPCR_TAMP2TRG            RTC_TAMPCR_TAMP2TRG_Msk                 /*!<  */
N#define RTC_TAMPCR_TAMP2E_Pos          (3U)                                    
N#define RTC_TAMPCR_TAMP2E_Msk          (0x1U << RTC_TAMPCR_TAMP2E_Pos)         /*!< 0x00000008 */
N#define RTC_TAMPCR_TAMP2E              RTC_TAMPCR_TAMP2E_Msk                   /*!<  */
N#define RTC_TAMPCR_TAMPIE_Pos          (2U)                                    
N#define RTC_TAMPCR_TAMPIE_Msk          (0x1U << RTC_TAMPCR_TAMPIE_Pos)         /*!< 0x00000004 */
N#define RTC_TAMPCR_TAMPIE              RTC_TAMPCR_TAMPIE_Msk                   /*!<  */
N#define RTC_TAMPCR_TAMP1TRG_Pos        (1U)                                    
N#define RTC_TAMPCR_TAMP1TRG_Msk        (0x1U << RTC_TAMPCR_TAMP1TRG_Pos)       /*!< 0x00000002 */
N#define RTC_TAMPCR_TAMP1TRG            RTC_TAMPCR_TAMP1TRG_Msk                 /*!<  */
N#define RTC_TAMPCR_TAMP1E_Pos          (0U)                                    
N#define RTC_TAMPCR_TAMP1E_Msk          (0x1U << RTC_TAMPCR_TAMP1E_Pos)         /*!< 0x00000001 */
N#define RTC_TAMPCR_TAMP1E              RTC_TAMPCR_TAMP1E_Msk                   /*!<  */
N
N/********************  Bits definition for RTC_ALRMASSR register  *************/
N#define RTC_ALRMASSR_MASKSS_Pos        (24U)                                   
N#define RTC_ALRMASSR_MASKSS_Msk        (0xFU << RTC_ALRMASSR_MASKSS_Pos)       /*!< 0x0F000000 */
N#define RTC_ALRMASSR_MASKSS            RTC_ALRMASSR_MASKSS_Msk                 
N#define RTC_ALRMASSR_MASKSS_0          (0x1U << RTC_ALRMASSR_MASKSS_Pos)       /*!< 0x01000000 */
N#define RTC_ALRMASSR_MASKSS_1          (0x2U << RTC_ALRMASSR_MASKSS_Pos)       /*!< 0x02000000 */
N#define RTC_ALRMASSR_MASKSS_2          (0x4U << RTC_ALRMASSR_MASKSS_Pos)       /*!< 0x04000000 */
N#define RTC_ALRMASSR_MASKSS_3          (0x8U << RTC_ALRMASSR_MASKSS_Pos)       /*!< 0x08000000 */
N#define RTC_ALRMASSR_SS_Pos            (0U)                                    
N#define RTC_ALRMASSR_SS_Msk            (0x7FFFU << RTC_ALRMASSR_SS_Pos)        /*!< 0x00007FFF */
N#define RTC_ALRMASSR_SS                RTC_ALRMASSR_SS_Msk                     
N
N/********************  Bits definition for RTC_ALRMBSSR register  *************/
N#define RTC_ALRMBSSR_MASKSS_Pos        (24U)                                   
N#define RTC_ALRMBSSR_MASKSS_Msk        (0xFU << RTC_ALRMBSSR_MASKSS_Pos)       /*!< 0x0F000000 */
N#define RTC_ALRMBSSR_MASKSS            RTC_ALRMBSSR_MASKSS_Msk                 
N#define RTC_ALRMBSSR_MASKSS_0          (0x1U << RTC_ALRMBSSR_MASKSS_Pos)       /*!< 0x01000000 */
N#define RTC_ALRMBSSR_MASKSS_1          (0x2U << RTC_ALRMBSSR_MASKSS_Pos)       /*!< 0x02000000 */
N#define RTC_ALRMBSSR_MASKSS_2          (0x4U << RTC_ALRMBSSR_MASKSS_Pos)       /*!< 0x04000000 */
N#define RTC_ALRMBSSR_MASKSS_3          (0x8U << RTC_ALRMBSSR_MASKSS_Pos)       /*!< 0x08000000 */
N#define RTC_ALRMBSSR_SS_Pos            (0U)                                    
N#define RTC_ALRMBSSR_SS_Msk            (0x7FFFU << RTC_ALRMBSSR_SS_Pos)        /*!< 0x00007FFF */
N#define RTC_ALRMBSSR_SS                RTC_ALRMBSSR_SS_Msk                     
N
N/********************  Bits definition for RTC_OR register  ****************/
N#define RTC_OR_OUT_RMP_Pos             (1U)                                    
N#define RTC_OR_OUT_RMP_Msk             (0x1U << RTC_OR_OUT_RMP_Pos)            /*!< 0x00000002 */
N#define RTC_OR_OUT_RMP                 RTC_OR_OUT_RMP_Msk                      /*!<  */
N#define RTC_OR_ALARMOUTTYPE_Pos        (0U)                                    
N#define RTC_OR_ALARMOUTTYPE_Msk        (0x1U << RTC_OR_ALARMOUTTYPE_Pos)       /*!< 0x00000001 */
N#define RTC_OR_ALARMOUTTYPE            RTC_OR_ALARMOUTTYPE_Msk                 /*!<  */
N
N/* Legacy defines */
N#define RTC_OR_RTC_OUT_RMP                   RTC_OR_OUT_RMP
N
N/********************  Bits definition for RTC_BKP0R register  ****************/
N#define RTC_BKP0R_Pos                  (0U)                                    
N#define RTC_BKP0R_Msk                  (0xFFFFFFFFU << RTC_BKP0R_Pos)          /*!< 0xFFFFFFFF */
N#define RTC_BKP0R                      RTC_BKP0R_Msk                           /*!<  */
N
N/********************  Bits definition for RTC_BKP1R register  ****************/
N#define RTC_BKP1R_Pos                  (0U)                                    
N#define RTC_BKP1R_Msk                  (0xFFFFFFFFU << RTC_BKP1R_Pos)          /*!< 0xFFFFFFFF */
N#define RTC_BKP1R                      RTC_BKP1R_Msk                           /*!<  */
N
N/********************  Bits definition for RTC_BKP2R register  ****************/
N#define RTC_BKP2R_Pos                  (0U)                                    
N#define RTC_BKP2R_Msk                  (0xFFFFFFFFU << RTC_BKP2R_Pos)          /*!< 0xFFFFFFFF */
N#define RTC_BKP2R                      RTC_BKP2R_Msk                           /*!<  */
N
N/********************  Bits definition for RTC_BKP3R register  ****************/
N#define RTC_BKP3R_Pos                  (0U)                                    
N#define RTC_BKP3R_Msk                  (0xFFFFFFFFU << RTC_BKP3R_Pos)          /*!< 0xFFFFFFFF */
N#define RTC_BKP3R                      RTC_BKP3R_Msk                           /*!<  */
N
N/********************  Bits definition for RTC_BKP4R register  ****************/
N#define RTC_BKP4R_Pos                  (0U)                                    
N#define RTC_BKP4R_Msk                  (0xFFFFFFFFU << RTC_BKP4R_Pos)          /*!< 0xFFFFFFFF */
N#define RTC_BKP4R                      RTC_BKP4R_Msk                           /*!<  */
N
N/******************** Number of backup registers ******************************/
N#define RTC_BKP_NUMBER                       (0x00000005U)                  /*!<  */
N
N/******************************************************************************/
N/*                                                                            */
N/*                        Serial Peripheral Interface (SPI)                   */
N/*                                                                            */
N/******************************************************************************/
N
N/*
N * @brief Specific device feature definitions (not present on all devices in the STM32L0 family)
N */
N#define SPI_I2S_SUPPORT                       /*!< I2S support */
N
N/*******************  Bit definition for SPI_CR1 register  ********************/
N#define SPI_CR1_CPHA_Pos            (0U)                                       
N#define SPI_CR1_CPHA_Msk            (0x1U << SPI_CR1_CPHA_Pos)                 /*!< 0x00000001 */
N#define SPI_CR1_CPHA                SPI_CR1_CPHA_Msk                           /*!< Clock Phase */
N#define SPI_CR1_CPOL_Pos            (1U)                                       
N#define SPI_CR1_CPOL_Msk            (0x1U << SPI_CR1_CPOL_Pos)                 /*!< 0x00000002 */
N#define SPI_CR1_CPOL                SPI_CR1_CPOL_Msk                           /*!< Clock Polarity */
N#define SPI_CR1_MSTR_Pos            (2U)                                       
N#define SPI_CR1_MSTR_Msk            (0x1U << SPI_CR1_MSTR_Pos)                 /*!< 0x00000004 */
N#define SPI_CR1_MSTR                SPI_CR1_MSTR_Msk                           /*!< Master Selection */
N#define SPI_CR1_BR_Pos              (3U)                                       
N#define SPI_CR1_BR_Msk              (0x7U << SPI_CR1_BR_Pos)                   /*!< 0x00000038 */
N#define SPI_CR1_BR                  SPI_CR1_BR_Msk                             /*!< BR[2:0] bits (Baud Rate Control) */
N#define SPI_CR1_BR_0                (0x1U << SPI_CR1_BR_Pos)                   /*!< 0x00000008 */
N#define SPI_CR1_BR_1                (0x2U << SPI_CR1_BR_Pos)                   /*!< 0x00000010 */
N#define SPI_CR1_BR_2                (0x4U << SPI_CR1_BR_Pos)                   /*!< 0x00000020 */
N#define SPI_CR1_SPE_Pos             (6U)                                       
N#define SPI_CR1_SPE_Msk             (0x1U << SPI_CR1_SPE_Pos)                  /*!< 0x00000040 */
N#define SPI_CR1_SPE                 SPI_CR1_SPE_Msk                            /*!< SPI Enable */
N#define SPI_CR1_LSBFIRST_Pos        (7U)                                       
N#define SPI_CR1_LSBFIRST_Msk        (0x1U << SPI_CR1_LSBFIRST_Pos)             /*!< 0x00000080 */
N#define SPI_CR1_LSBFIRST            SPI_CR1_LSBFIRST_Msk                       /*!< Frame Format */
N#define SPI_CR1_SSI_Pos             (8U)                                       
N#define SPI_CR1_SSI_Msk             (0x1U << SPI_CR1_SSI_Pos)                  /*!< 0x00000100 */
N#define SPI_CR1_SSI                 SPI_CR1_SSI_Msk                            /*!< Internal slave select */
N#define SPI_CR1_SSM_Pos             (9U)                                       
N#define SPI_CR1_SSM_Msk             (0x1U << SPI_CR1_SSM_Pos)                  /*!< 0x00000200 */
N#define SPI_CR1_SSM                 SPI_CR1_SSM_Msk                            /*!< Software slave management */
N#define SPI_CR1_RXONLY_Pos          (10U)                                      
N#define SPI_CR1_RXONLY_Msk          (0x1U << SPI_CR1_RXONLY_Pos)               /*!< 0x00000400 */
N#define SPI_CR1_RXONLY              SPI_CR1_RXONLY_Msk                         /*!< Receive only */
N#define SPI_CR1_DFF_Pos             (11U)                                      
N#define SPI_CR1_DFF_Msk             (0x1U << SPI_CR1_DFF_Pos)                  /*!< 0x00000800 */
N#define SPI_CR1_DFF                 SPI_CR1_DFF_Msk                            /*!< Data Frame Format */
N#define SPI_CR1_CRCNEXT_Pos         (12U)                                      
N#define SPI_CR1_CRCNEXT_Msk         (0x1U << SPI_CR1_CRCNEXT_Pos)              /*!< 0x00001000 */
N#define SPI_CR1_CRCNEXT             SPI_CR1_CRCNEXT_Msk                        /*!< Transmit CRC next */
N#define SPI_CR1_CRCEN_Pos           (13U)                                      
N#define SPI_CR1_CRCEN_Msk           (0x1U << SPI_CR1_CRCEN_Pos)                /*!< 0x00002000 */
N#define SPI_CR1_CRCEN               SPI_CR1_CRCEN_Msk                          /*!< Hardware CRC calculation enable */
N#define SPI_CR1_BIDIOE_Pos          (14U)                                      
N#define SPI_CR1_BIDIOE_Msk          (0x1U << SPI_CR1_BIDIOE_Pos)               /*!< 0x00004000 */
N#define SPI_CR1_BIDIOE              SPI_CR1_BIDIOE_Msk                         /*!< Output enable in bidirectional mode */
N#define SPI_CR1_BIDIMODE_Pos        (15U)                                      
N#define SPI_CR1_BIDIMODE_Msk        (0x1U << SPI_CR1_BIDIMODE_Pos)             /*!< 0x00008000 */
N#define SPI_CR1_BIDIMODE            SPI_CR1_BIDIMODE_Msk                       /*!< Bidirectional data mode enable */
N
N/*******************  Bit definition for SPI_CR2 register  ********************/
N#define SPI_CR2_RXDMAEN_Pos         (0U)                                       
N#define SPI_CR2_RXDMAEN_Msk         (0x1U << SPI_CR2_RXDMAEN_Pos)              /*!< 0x00000001 */
N#define SPI_CR2_RXDMAEN             SPI_CR2_RXDMAEN_Msk                        /*!< Rx Buffer DMA Enable */
N#define SPI_CR2_TXDMAEN_Pos         (1U)                                       
N#define SPI_CR2_TXDMAEN_Msk         (0x1U << SPI_CR2_TXDMAEN_Pos)              /*!< 0x00000002 */
N#define SPI_CR2_TXDMAEN             SPI_CR2_TXDMAEN_Msk                        /*!< Tx Buffer DMA Enable */
N#define SPI_CR2_SSOE_Pos            (2U)                                       
N#define SPI_CR2_SSOE_Msk            (0x1U << SPI_CR2_SSOE_Pos)                 /*!< 0x00000004 */
N#define SPI_CR2_SSOE                SPI_CR2_SSOE_Msk                           /*!< SS Output Enable */
N#define SPI_CR2_FRF_Pos             (4U)                                       
N#define SPI_CR2_FRF_Msk             (0x1U << SPI_CR2_FRF_Pos)                  /*!< 0x00000010 */
N#define SPI_CR2_FRF                 SPI_CR2_FRF_Msk                            /*!< Frame Format Enable */
N#define SPI_CR2_ERRIE_Pos           (5U)                                       
N#define SPI_CR2_ERRIE_Msk           (0x1U << SPI_CR2_ERRIE_Pos)                /*!< 0x00000020 */
N#define SPI_CR2_ERRIE               SPI_CR2_ERRIE_Msk                          /*!< Error Interrupt Enable */
N#define SPI_CR2_RXNEIE_Pos          (6U)                                       
N#define SPI_CR2_RXNEIE_Msk          (0x1U << SPI_CR2_RXNEIE_Pos)               /*!< 0x00000040 */
N#define SPI_CR2_RXNEIE              SPI_CR2_RXNEIE_Msk                         /*!< RX buffer Not Empty Interrupt Enable */
N#define SPI_CR2_TXEIE_Pos           (7U)                                       
N#define SPI_CR2_TXEIE_Msk           (0x1U << SPI_CR2_TXEIE_Pos)                /*!< 0x00000080 */
N#define SPI_CR2_TXEIE               SPI_CR2_TXEIE_Msk                          /*!< Tx buffer Empty Interrupt Enable */
N
N/********************  Bit definition for SPI_SR register  ********************/
N#define SPI_SR_RXNE_Pos             (0U)                                       
N#define SPI_SR_RXNE_Msk             (0x1U << SPI_SR_RXNE_Pos)                  /*!< 0x00000001 */
N#define SPI_SR_RXNE                 SPI_SR_RXNE_Msk                            /*!< Receive buffer Not Empty */
N#define SPI_SR_TXE_Pos              (1U)                                       
N#define SPI_SR_TXE_Msk              (0x1U << SPI_SR_TXE_Pos)                   /*!< 0x00000002 */
N#define SPI_SR_TXE                  SPI_SR_TXE_Msk                             /*!< Transmit buffer Empty */
N#define SPI_SR_CHSIDE_Pos           (2U)                                       
N#define SPI_SR_CHSIDE_Msk           (0x1U << SPI_SR_CHSIDE_Pos)                /*!< 0x00000004 */
N#define SPI_SR_CHSIDE               SPI_SR_CHSIDE_Msk                          /*!< Channel side */
N#define SPI_SR_UDR_Pos              (3U)                                       
N#define SPI_SR_UDR_Msk              (0x1U << SPI_SR_UDR_Pos)                   /*!< 0x00000008 */
N#define SPI_SR_UDR                  SPI_SR_UDR_Msk                             /*!< Underrun flag */
N#define SPI_SR_CRCERR_Pos           (4U)                                       
N#define SPI_SR_CRCERR_Msk           (0x1U << SPI_SR_CRCERR_Pos)                /*!< 0x00000010 */
N#define SPI_SR_CRCERR               SPI_SR_CRCERR_Msk                          /*!< CRC Error flag */
N#define SPI_SR_MODF_Pos             (5U)                                       
N#define SPI_SR_MODF_Msk             (0x1U << SPI_SR_MODF_Pos)                  /*!< 0x00000020 */
N#define SPI_SR_MODF                 SPI_SR_MODF_Msk                            /*!< Mode fault */
N#define SPI_SR_OVR_Pos              (6U)                                       
N#define SPI_SR_OVR_Msk              (0x1U << SPI_SR_OVR_Pos)                   /*!< 0x00000040 */
N#define SPI_SR_OVR                  SPI_SR_OVR_Msk                             /*!< Overrun flag */
N#define SPI_SR_BSY_Pos              (7U)                                       
N#define SPI_SR_BSY_Msk              (0x1U << SPI_SR_BSY_Pos)                   /*!< 0x00000080 */
N#define SPI_SR_BSY                  SPI_SR_BSY_Msk                             /*!< Busy flag */
N#define SPI_SR_FRE_Pos              (8U)                                       
N#define SPI_SR_FRE_Msk              (0x1U << SPI_SR_FRE_Pos)                   /*!< 0x00000100 */
N#define SPI_SR_FRE                  SPI_SR_FRE_Msk                             /*!< TI frame format error */  
N
N/********************  Bit definition for SPI_DR register  ********************/
N#define SPI_DR_DR_Pos               (0U)                                       
N#define SPI_DR_DR_Msk               (0xFFFFU << SPI_DR_DR_Pos)                 /*!< 0x0000FFFF */
N#define SPI_DR_DR                   SPI_DR_DR_Msk                              /*!< Data Register */
N
N/*******************  Bit definition for SPI_CRCPR register  ******************/
N#define SPI_CRCPR_CRCPOLY_Pos       (0U)                                       
N#define SPI_CRCPR_CRCPOLY_Msk       (0xFFFFU << SPI_CRCPR_CRCPOLY_Pos)         /*!< 0x0000FFFF */
N#define SPI_CRCPR_CRCPOLY           SPI_CRCPR_CRCPOLY_Msk                      /*!< CRC polynomial register */
N
N/******************  Bit definition for SPI_RXCRCR register  ******************/
N#define SPI_RXCRCR_RXCRC_Pos        (0U)                                       
N#define SPI_RXCRCR_RXCRC_Msk        (0xFFFFU << SPI_RXCRCR_RXCRC_Pos)          /*!< 0x0000FFFF */
N#define SPI_RXCRCR_RXCRC            SPI_RXCRCR_RXCRC_Msk                       /*!< Rx CRC Register */
N
N/******************  Bit definition for SPI_TXCRCR register  ******************/
N#define SPI_TXCRCR_TXCRC_Pos        (0U)                                       
N#define SPI_TXCRCR_TXCRC_Msk        (0xFFFFU << SPI_TXCRCR_TXCRC_Pos)          /*!< 0x0000FFFF */
N#define SPI_TXCRCR_TXCRC            SPI_TXCRCR_TXCRC_Msk                       /*!< Tx CRC Register */
N
N/******************  Bit definition for SPI_I2SCFGR register  *****************/
N#define SPI_I2SCFGR_CHLEN_Pos       (0U)                                       
N#define SPI_I2SCFGR_CHLEN_Msk       (0x1U << SPI_I2SCFGR_CHLEN_Pos)            /*!< 0x00000001 */
N#define SPI_I2SCFGR_CHLEN           SPI_I2SCFGR_CHLEN_Msk                      /*!<Channel length (number of bits per audio channel) */
N#define SPI_I2SCFGR_DATLEN_Pos      (1U)                                       
N#define SPI_I2SCFGR_DATLEN_Msk      (0x3U << SPI_I2SCFGR_DATLEN_Pos)           /*!< 0x00000006 */
N#define SPI_I2SCFGR_DATLEN          SPI_I2SCFGR_DATLEN_Msk                     /*!<DATLEN[1:0] bits (Data length to be transferred) */
N#define SPI_I2SCFGR_DATLEN_0        (0x1U << SPI_I2SCFGR_DATLEN_Pos)           /*!< 0x00000002 */
N#define SPI_I2SCFGR_DATLEN_1        (0x2U << SPI_I2SCFGR_DATLEN_Pos)           /*!< 0x00000004 */
N#define SPI_I2SCFGR_CKPOL_Pos       (3U)                                       
N#define SPI_I2SCFGR_CKPOL_Msk       (0x1U << SPI_I2SCFGR_CKPOL_Pos)            /*!< 0x00000008 */
N#define SPI_I2SCFGR_CKPOL           SPI_I2SCFGR_CKPOL_Msk                      /*!<steady state clock polarity */
N#define SPI_I2SCFGR_I2SSTD_Pos      (4U)                                       
N#define SPI_I2SCFGR_I2SSTD_Msk      (0x3U << SPI_I2SCFGR_I2SSTD_Pos)           /*!< 0x00000030 */
N#define SPI_I2SCFGR_I2SSTD          SPI_I2SCFGR_I2SSTD_Msk                     /*!<I2SSTD[1:0] bits (I2S standard selection) */
N#define SPI_I2SCFGR_I2SSTD_0        (0x1U << SPI_I2SCFGR_I2SSTD_Pos)           /*!< 0x00000010 */
N#define SPI_I2SCFGR_I2SSTD_1        (0x2U << SPI_I2SCFGR_I2SSTD_Pos)           /*!< 0x00000020 */
N#define SPI_I2SCFGR_PCMSYNC_Pos     (7U)                                       
N#define SPI_I2SCFGR_PCMSYNC_Msk     (0x1U << SPI_I2SCFGR_PCMSYNC_Pos)          /*!< 0x00000080 */
N#define SPI_I2SCFGR_PCMSYNC         SPI_I2SCFGR_PCMSYNC_Msk                    /*!<PCM frame synchronization */
N#define SPI_I2SCFGR_I2SCFG_Pos      (8U)                                       
N#define SPI_I2SCFGR_I2SCFG_Msk      (0x3U << SPI_I2SCFGR_I2SCFG_Pos)           /*!< 0x00000300 */
N#define SPI_I2SCFGR_I2SCFG          SPI_I2SCFGR_I2SCFG_Msk                     /*!<I2SCFG[1:0] bits (I2S configuration mode) */
N#define SPI_I2SCFGR_I2SCFG_0        (0x1U << SPI_I2SCFGR_I2SCFG_Pos)           /*!< 0x00000100 */
N#define SPI_I2SCFGR_I2SCFG_1        (0x2U << SPI_I2SCFGR_I2SCFG_Pos)           /*!< 0x00000200 */
N#define SPI_I2SCFGR_I2SE_Pos        (10U)                                      
N#define SPI_I2SCFGR_I2SE_Msk        (0x1U << SPI_I2SCFGR_I2SE_Pos)             /*!< 0x00000400 */
N#define SPI_I2SCFGR_I2SE            SPI_I2SCFGR_I2SE_Msk                       /*!<I2S Enable */
N#define SPI_I2SCFGR_I2SMOD_Pos      (11U)                                      
N#define SPI_I2SCFGR_I2SMOD_Msk      (0x1U << SPI_I2SCFGR_I2SMOD_Pos)           /*!< 0x00000800 */
N#define SPI_I2SCFGR_I2SMOD          SPI_I2SCFGR_I2SMOD_Msk                     /*!<I2S mode selection */
N/******************  Bit definition for SPI_I2SPR register  *******************/
N#define SPI_I2SPR_I2SDIV_Pos        (0U)                                       
N#define SPI_I2SPR_I2SDIV_Msk        (0xFFU << SPI_I2SPR_I2SDIV_Pos)            /*!< 0x000000FF */
N#define SPI_I2SPR_I2SDIV            SPI_I2SPR_I2SDIV_Msk                       /*!<I2S Linear prescaler */
N#define SPI_I2SPR_ODD_Pos           (8U)                                       
N#define SPI_I2SPR_ODD_Msk           (0x1U << SPI_I2SPR_ODD_Pos)                /*!< 0x00000100 */
N#define SPI_I2SPR_ODD               SPI_I2SPR_ODD_Msk                          /*!<Odd factor for the prescaler */
N#define SPI_I2SPR_MCKOE_Pos         (9U)                                       
N#define SPI_I2SPR_MCKOE_Msk         (0x1U << SPI_I2SPR_MCKOE_Pos)              /*!< 0x00000200 */
N#define SPI_I2SPR_MCKOE             SPI_I2SPR_MCKOE_Msk                        /*!<Master Clock Output Enable */
N
N/******************************************************************************/
N/*                                                                            */
N/*                       System Configuration (SYSCFG)                        */
N/*                                                                            */
N/******************************************************************************/
N/*****************  Bit definition for SYSCFG_CFGR1 register  ****************/
N#define SYSCFG_CFGR1_MEM_MODE_Pos                (0U)                          
N#define SYSCFG_CFGR1_MEM_MODE_Msk                (0x3U << SYSCFG_CFGR1_MEM_MODE_Pos) /*!< 0x00000003 */
N#define SYSCFG_CFGR1_MEM_MODE                    SYSCFG_CFGR1_MEM_MODE_Msk     /*!< SYSCFG_Memory Remap Config */
N#define SYSCFG_CFGR1_MEM_MODE_0                  (0x1U << SYSCFG_CFGR1_MEM_MODE_Pos) /*!< 0x00000001 */
N#define SYSCFG_CFGR1_MEM_MODE_1                  (0x2U << SYSCFG_CFGR1_MEM_MODE_Pos) /*!< 0x00000002 */
N#define SYSCFG_CFGR1_BOOT_MODE_Pos               (8U)                          
N#define SYSCFG_CFGR1_BOOT_MODE_Msk               (0x3U << SYSCFG_CFGR1_BOOT_MODE_Pos) /*!< 0x00000300 */
N#define SYSCFG_CFGR1_BOOT_MODE                   SYSCFG_CFGR1_BOOT_MODE_Msk    /*!< SYSCFG_Boot mode Config */
N#define SYSCFG_CFGR1_BOOT_MODE_0                 (0x1U << SYSCFG_CFGR1_BOOT_MODE_Pos) /*!< 0x00000100 */
N#define SYSCFG_CFGR1_BOOT_MODE_1                 (0x2U << SYSCFG_CFGR1_BOOT_MODE_Pos) /*!< 0x00000200 */
N
N/*****************  Bit definition for SYSCFG_CFGR2 register  ****************/
N#define SYSCFG_CFGR2_FWDISEN_Pos                 (0U)                          
N#define SYSCFG_CFGR2_FWDISEN_Msk                 (0x1U << SYSCFG_CFGR2_FWDISEN_Pos) /*!< 0x00000001 */
N#define SYSCFG_CFGR2_FWDISEN                     SYSCFG_CFGR2_FWDISEN_Msk      /*!< Firewall disable bit */
N#define SYSCFG_CFGR2_CAPA_Pos                    (1U)                          
N#define SYSCFG_CFGR2_CAPA_Msk                    (0x7U << SYSCFG_CFGR2_CAPA_Pos) /*!< 0x0000000E */
N#define SYSCFG_CFGR2_CAPA                        SYSCFG_CFGR2_CAPA_Msk         /*!< Connection of internal Vlcd rail to external capacitors */
N#define SYSCFG_CFGR2_CAPA_0                      (0x1U << SYSCFG_CFGR2_CAPA_Pos) /*!< 0x00000002 */
N#define SYSCFG_CFGR2_CAPA_1                      (0x2U << SYSCFG_CFGR2_CAPA_Pos) /*!< 0x00000004 */
N#define SYSCFG_CFGR2_CAPA_2                      (0x4U << SYSCFG_CFGR2_CAPA_Pos) /*!< 0x00000008 */
N#define SYSCFG_CFGR2_I2C_PB6_FMP_Pos             (8U)                          
N#define SYSCFG_CFGR2_I2C_PB6_FMP_Msk             (0x1U << SYSCFG_CFGR2_I2C_PB6_FMP_Pos) /*!< 0x00000100 */
N#define SYSCFG_CFGR2_I2C_PB6_FMP                 SYSCFG_CFGR2_I2C_PB6_FMP_Msk  /*!< I2C PB6 Fast mode plus */
N#define SYSCFG_CFGR2_I2C_PB7_FMP_Pos             (9U)                          
N#define SYSCFG_CFGR2_I2C_PB7_FMP_Msk             (0x1U << SYSCFG_CFGR2_I2C_PB7_FMP_Pos) /*!< 0x00000200 */
N#define SYSCFG_CFGR2_I2C_PB7_FMP                 SYSCFG_CFGR2_I2C_PB7_FMP_Msk  /*!< I2C PB7 Fast mode plus */
N#define SYSCFG_CFGR2_I2C_PB8_FMP_Pos             (10U)                         
N#define SYSCFG_CFGR2_I2C_PB8_FMP_Msk             (0x1U << SYSCFG_CFGR2_I2C_PB8_FMP_Pos) /*!< 0x00000400 */
N#define SYSCFG_CFGR2_I2C_PB8_FMP                 SYSCFG_CFGR2_I2C_PB8_FMP_Msk  /*!< I2C PB8 Fast mode plus */
N#define SYSCFG_CFGR2_I2C_PB9_FMP_Pos             (11U)                         
N#define SYSCFG_CFGR2_I2C_PB9_FMP_Msk             (0x1U << SYSCFG_CFGR2_I2C_PB9_FMP_Pos) /*!< 0x00000800 */
N#define SYSCFG_CFGR2_I2C_PB9_FMP                 SYSCFG_CFGR2_I2C_PB9_FMP_Msk  /*!< I2C PB9 Fast mode plus */
N#define SYSCFG_CFGR2_I2C1_FMP_Pos                (12U)                         
N#define SYSCFG_CFGR2_I2C1_FMP_Msk                (0x1U << SYSCFG_CFGR2_I2C1_FMP_Pos) /*!< 0x00001000 */
N#define SYSCFG_CFGR2_I2C1_FMP                    SYSCFG_CFGR2_I2C1_FMP_Msk     /*!< I2C1 Fast mode plus */
N#define SYSCFG_CFGR2_I2C2_FMP_Pos                (13U)                         
N#define SYSCFG_CFGR2_I2C2_FMP_Msk                (0x1U << SYSCFG_CFGR2_I2C2_FMP_Pos) /*!< 0x00002000 */
N#define SYSCFG_CFGR2_I2C2_FMP                    SYSCFG_CFGR2_I2C2_FMP_Msk     /*!< I2C2 Fast mode plus */
N
N/*****************  Bit definition for SYSCFG_EXTICR1 register  ***************/
N#define SYSCFG_EXTICR1_EXTI0_Pos                 (0U)                          
N#define SYSCFG_EXTICR1_EXTI0_Msk                 (0xFU << SYSCFG_EXTICR1_EXTI0_Pos) /*!< 0x0000000F */
N#define SYSCFG_EXTICR1_EXTI0                     SYSCFG_EXTICR1_EXTI0_Msk      /*!< EXTI 0 configuration */
N#define SYSCFG_EXTICR1_EXTI1_Pos                 (4U)                          
N#define SYSCFG_EXTICR1_EXTI1_Msk                 (0xFU << SYSCFG_EXTICR1_EXTI1_Pos) /*!< 0x000000F0 */
N#define SYSCFG_EXTICR1_EXTI1                     SYSCFG_EXTICR1_EXTI1_Msk      /*!< EXTI 1 configuration */
N#define SYSCFG_EXTICR1_EXTI2_Pos                 (8U)                          
N#define SYSCFG_EXTICR1_EXTI2_Msk                 (0xFU << SYSCFG_EXTICR1_EXTI2_Pos) /*!< 0x00000F00 */
N#define SYSCFG_EXTICR1_EXTI2                     SYSCFG_EXTICR1_EXTI2_Msk      /*!< EXTI 2 configuration */
N#define SYSCFG_EXTICR1_EXTI3_Pos                 (12U)                         
N#define SYSCFG_EXTICR1_EXTI3_Msk                 (0xFU << SYSCFG_EXTICR1_EXTI3_Pos) /*!< 0x0000F000 */
N#define SYSCFG_EXTICR1_EXTI3                     SYSCFG_EXTICR1_EXTI3_Msk      /*!< EXTI 3 configuration */
N
N/** 
N  * @brief  EXTI0 configuration  
N  */
N#define SYSCFG_EXTICR1_EXTI0_PA                  (0x00000000U)                 /*!< PA[0] pin */
N#define SYSCFG_EXTICR1_EXTI0_PB                  (0x00000001U)                 /*!< PB[0] pin */
N#define SYSCFG_EXTICR1_EXTI0_PC                  (0x00000002U)                 /*!< PC[0] pin */
N#define SYSCFG_EXTICR1_EXTI0_PH                  (0x00000005U)                 /*!< PH[0] pin */
N
N/** 
N  * @brief  EXTI1 configuration  
N  */ 
N#define SYSCFG_EXTICR1_EXTI1_PA                  (0x00000000U)                 /*!< PA[1] pin */
N#define SYSCFG_EXTICR1_EXTI1_PB                  (0x00000010U)                 /*!< PB[1] pin */
N#define SYSCFG_EXTICR1_EXTI1_PC                  (0x00000020U)                 /*!< PC[1] pin */
N#define SYSCFG_EXTICR1_EXTI1_PH                  (0x00000050U)                 /*!< PH[1] pin */
N
N/** 
N  * @brief  EXTI2 configuration  
N  */
N#define SYSCFG_EXTICR1_EXTI2_PA                  (0x00000000U)                 /*!< PA[2] pin */
N#define SYSCFG_EXTICR1_EXTI2_PB                  (0x00000100U)                 /*!< PB[2] pin */
N#define SYSCFG_EXTICR1_EXTI2_PC                  (0x00000200U)                 /*!< PC[2] pin */
N#define SYSCFG_EXTICR1_EXTI2_PD                  (0x00000300U)                 /*!< PD[2] pin */
N
N/** 
N  * @brief  EXTI3 configuration  
N  */
N#define SYSCFG_EXTICR1_EXTI3_PA                  (0x00000000U)                 /*!< PA[3] pin */
N#define SYSCFG_EXTICR1_EXTI3_PB                  (0x00001000U)                 /*!< PB[3] pin */
N#define SYSCFG_EXTICR1_EXTI3_PC                  (0x00002000U)                 /*!< PC[3] pin */
N
N/*****************  Bit definition for SYSCFG_EXTICR2 register  *****************/
N#define SYSCFG_EXTICR2_EXTI4_Pos                 (0U)                          
N#define SYSCFG_EXTICR2_EXTI4_Msk                 (0xFU << SYSCFG_EXTICR2_EXTI4_Pos) /*!< 0x0000000F */
N#define SYSCFG_EXTICR2_EXTI4                     SYSCFG_EXTICR2_EXTI4_Msk      /*!< EXTI 4 configuration */
N#define SYSCFG_EXTICR2_EXTI5_Pos                 (4U)                          
N#define SYSCFG_EXTICR2_EXTI5_Msk                 (0xFU << SYSCFG_EXTICR2_EXTI5_Pos) /*!< 0x000000F0 */
N#define SYSCFG_EXTICR2_EXTI5                     SYSCFG_EXTICR2_EXTI5_Msk      /*!< EXTI 5 configuration */
N#define SYSCFG_EXTICR2_EXTI6_Pos                 (8U)                          
N#define SYSCFG_EXTICR2_EXTI6_Msk                 (0xFU << SYSCFG_EXTICR2_EXTI6_Pos) /*!< 0x00000F00 */
N#define SYSCFG_EXTICR2_EXTI6                     SYSCFG_EXTICR2_EXTI6_Msk      /*!< EXTI 6 configuration */
N#define SYSCFG_EXTICR2_EXTI7_Pos                 (12U)                         
N#define SYSCFG_EXTICR2_EXTI7_Msk                 (0xFU << SYSCFG_EXTICR2_EXTI7_Pos) /*!< 0x0000F000 */
N#define SYSCFG_EXTICR2_EXTI7                     SYSCFG_EXTICR2_EXTI7_Msk      /*!< EXTI 7 configuration */
N
N/** 
N  * @brief  EXTI4 configuration  
N  */
N#define SYSCFG_EXTICR2_EXTI4_PA                  (0x00000000U)                 /*!< PA[4] pin */
N#define SYSCFG_EXTICR2_EXTI4_PB                  (0x00000001U)                 /*!< PB[4] pin */
N#define SYSCFG_EXTICR2_EXTI4_PC                  (0x00000002U)                 /*!< PC[4] pin */
N
N/** 
N  * @brief  EXTI5 configuration  
N  */
N#define SYSCFG_EXTICR2_EXTI5_PA                  (0x00000000U)                 /*!< PA[5] pin */
N#define SYSCFG_EXTICR2_EXTI5_PB                  (0x00000010U)                 /*!< PB[5] pin */
N#define SYSCFG_EXTICR2_EXTI5_PC                  (0x00000020U)                 /*!< PC[5] pin */
N
N/** 
N  * @brief  EXTI6 configuration  
N  */
N#define SYSCFG_EXTICR2_EXTI6_PA                  (0x00000000U)                 /*!< PA[6] pin */
N#define SYSCFG_EXTICR2_EXTI6_PB                  (0x00000100U)                 /*!< PB[6] pin */
N#define SYSCFG_EXTICR2_EXTI6_PC                  (0x00000200U)                 /*!< PC[6] pin */
N
N/** 
N  * @brief  EXTI7 configuration  
N  */
N#define SYSCFG_EXTICR2_EXTI7_PA                  (0x00000000U)                 /*!< PA[7] pin */
N#define SYSCFG_EXTICR2_EXTI7_PB                  (0x00001000U)                 /*!< PB[7] pin */
N#define SYSCFG_EXTICR2_EXTI7_PC                  (0x00002000U)                 /*!< PC[7] pin */
N
N/*****************  Bit definition for SYSCFG_EXTICR3 register  *****************/
N#define SYSCFG_EXTICR3_EXTI8_Pos                 (0U)                          
N#define SYSCFG_EXTICR3_EXTI8_Msk                 (0xFU << SYSCFG_EXTICR3_EXTI8_Pos) /*!< 0x0000000F */
N#define SYSCFG_EXTICR3_EXTI8                     SYSCFG_EXTICR3_EXTI8_Msk      /*!< EXTI 8 configuration */
N#define SYSCFG_EXTICR3_EXTI9_Pos                 (4U)                          
N#define SYSCFG_EXTICR3_EXTI9_Msk                 (0xFU << SYSCFG_EXTICR3_EXTI9_Pos) /*!< 0x000000F0 */
N#define SYSCFG_EXTICR3_EXTI9                     SYSCFG_EXTICR3_EXTI9_Msk      /*!< EXTI 9 configuration */
N#define SYSCFG_EXTICR3_EXTI10_Pos                (8U)                          
N#define SYSCFG_EXTICR3_EXTI10_Msk                (0xFU << SYSCFG_EXTICR3_EXTI10_Pos) /*!< 0x00000F00 */
N#define SYSCFG_EXTICR3_EXTI10                    SYSCFG_EXTICR3_EXTI10_Msk     /*!< EXTI 10 configuration */
N#define SYSCFG_EXTICR3_EXTI11_Pos                (12U)                         
N#define SYSCFG_EXTICR3_EXTI11_Msk                (0xFU << SYSCFG_EXTICR3_EXTI11_Pos) /*!< 0x0000F000 */
N#define SYSCFG_EXTICR3_EXTI11                    SYSCFG_EXTICR3_EXTI11_Msk     /*!< EXTI 11 configuration */
N
N/** 
N  * @brief  EXTI8 configuration  
N  */
N#define SYSCFG_EXTICR3_EXTI8_PA                  (0x00000000U)                 /*!< PA[8] pin */
N#define SYSCFG_EXTICR3_EXTI8_PB                  (0x00000001U)                 /*!< PB[8] pin */
N#define SYSCFG_EXTICR3_EXTI8_PC                  (0x00000002U)                 /*!< PC[8] pin */
N
N/** 
N  * @brief  EXTI9 configuration  
N  */
N#define SYSCFG_EXTICR3_EXTI9_PA                  (0x00000000U)                 /*!< PA[9] pin */
N#define SYSCFG_EXTICR3_EXTI9_PB                  (0x00000010U)                 /*!< PB[9] pin */
N#define SYSCFG_EXTICR3_EXTI9_PC                  (0x00000020U)                 /*!< PC[9] pin */
N
N/** 
N  * @brief  EXTI10 configuration  
N  */
N#define SYSCFG_EXTICR3_EXTI10_PA                 (0x00000000U)                 /*!< PA[10] pin */
N#define SYSCFG_EXTICR3_EXTI10_PB                 (0x00000100U)                 /*!< PB[10] pin */
N#define SYSCFG_EXTICR3_EXTI10_PC                 (0x00000200U)                 /*!< PC[10] pin */
N
N/** 
N  * @brief  EXTI11 configuration  
N  */
N#define SYSCFG_EXTICR3_EXTI11_PA                 (0x00000000U)                 /*!< PA[11] pin */
N#define SYSCFG_EXTICR3_EXTI11_PB                 (0x00001000U)                 /*!< PB[11] pin */
N#define SYSCFG_EXTICR3_EXTI11_PC                 (0x00002000U)                 /*!< PC[11] pin */
N
N/*****************  Bit definition for SYSCFG_EXTICR4 register  *****************/
N#define SYSCFG_EXTICR4_EXTI12_Pos                (0U)                          
N#define SYSCFG_EXTICR4_EXTI12_Msk                (0xFU << SYSCFG_EXTICR4_EXTI12_Pos) /*!< 0x0000000F */
N#define SYSCFG_EXTICR4_EXTI12                    SYSCFG_EXTICR4_EXTI12_Msk     /*!< EXTI 12 configuration */
N#define SYSCFG_EXTICR4_EXTI13_Pos                (4U)                          
N#define SYSCFG_EXTICR4_EXTI13_Msk                (0xFU << SYSCFG_EXTICR4_EXTI13_Pos) /*!< 0x000000F0 */
N#define SYSCFG_EXTICR4_EXTI13                    SYSCFG_EXTICR4_EXTI13_Msk     /*!< EXTI 13 configuration */
N#define SYSCFG_EXTICR4_EXTI14_Pos                (8U)                          
N#define SYSCFG_EXTICR4_EXTI14_Msk                (0xFU << SYSCFG_EXTICR4_EXTI14_Pos) /*!< 0x00000F00 */
N#define SYSCFG_EXTICR4_EXTI14                    SYSCFG_EXTICR4_EXTI14_Msk     /*!< EXTI 14 configuration */
N#define SYSCFG_EXTICR4_EXTI15_Pos                (12U)                         
N#define SYSCFG_EXTICR4_EXTI15_Msk                (0xFU << SYSCFG_EXTICR4_EXTI15_Pos) /*!< 0x0000F000 */
N#define SYSCFG_EXTICR4_EXTI15                    SYSCFG_EXTICR4_EXTI15_Msk     /*!< EXTI 15 configuration */
N
N/** 
N  * @brief  EXTI12 configuration  
N  */
N#define SYSCFG_EXTICR4_EXTI12_PA                 (0x00000000U)                 /*!< PA[12] pin */
N#define SYSCFG_EXTICR4_EXTI12_PB                 (0x00000001U)                 /*!< PB[12] pin */
N#define SYSCFG_EXTICR4_EXTI12_PC                 (0x00000002U)                 /*!< PC[12] pin */
N
N/** 
N  * @brief  EXTI13 configuration  
N  */
N#define SYSCFG_EXTICR4_EXTI13_PA                 (0x00000000U)                 /*!< PA[13] pin */
N#define SYSCFG_EXTICR4_EXTI13_PB                 (0x00000010U)                 /*!< PB[13] pin */
N#define SYSCFG_EXTICR4_EXTI13_PC                 (0x00000020U)                 /*!< PC[13] pin */
N
N/** 
N  * @brief  EXTI14 configuration  
N  */
N#define SYSCFG_EXTICR4_EXTI14_PA                 (0x00000000U)                 /*!< PA[14] pin */
N#define SYSCFG_EXTICR4_EXTI14_PB                 (0x00000100U)                 /*!< PB[14] pin */
N#define SYSCFG_EXTICR4_EXTI14_PC                 (0x00000200U)                 /*!< PC[14] pin */
N
N/** 
N  * @brief  EXTI15 configuration  
N  */
N#define SYSCFG_EXTICR4_EXTI15_PA                 (0x00000000U)                 /*!< PA[15] pin */
N#define SYSCFG_EXTICR4_EXTI15_PB                 (0x00001000U)                 /*!< PB[15] pin */
N#define SYSCFG_EXTICR4_EXTI15_PC                 (0x00002000U)                 /*!< PC[15] pin */
N
N
N/*****************  Bit definition for SYSCFG_CFGR3 register  ****************/
N#define SYSCFG_CFGR3_VREF_OUT_Pos                (4U)                          
N#define SYSCFG_CFGR3_VREF_OUT_Msk                (0x3U << SYSCFG_CFGR3_VREF_OUT_Pos) /*!< 0x00000030 */
N#define SYSCFG_CFGR3_VREF_OUT                    SYSCFG_CFGR3_VREF_OUT_Msk     /*!< Verf_ADC connection bit */
N#define SYSCFG_CFGR3_VREF_OUT_0                  (0x1U << SYSCFG_CFGR3_VREF_OUT_Pos) /*!< 0x00000010 */
N#define SYSCFG_CFGR3_VREF_OUT_1                  (0x2U << SYSCFG_CFGR3_VREF_OUT_Pos) /*!< 0x00000020 */
N#define SYSCFG_CFGR3_ENBUF_VREFINT_ADC_Pos       (8U)                          
N#define SYSCFG_CFGR3_ENBUF_VREFINT_ADC_Msk       (0x1U << SYSCFG_CFGR3_ENBUF_VREFINT_ADC_Pos) /*!< 0x00000100 */
N#define SYSCFG_CFGR3_ENBUF_VREFINT_ADC           SYSCFG_CFGR3_ENBUF_VREFINT_ADC_Msk /*!< VREFINT reference for ADC enable bit */
N#define SYSCFG_CFGR3_ENBUF_SENSOR_ADC_Pos        (9U)                          
N#define SYSCFG_CFGR3_ENBUF_SENSOR_ADC_Msk        (0x1U << SYSCFG_CFGR3_ENBUF_SENSOR_ADC_Pos) /*!< 0x00000200 */
N#define SYSCFG_CFGR3_ENBUF_SENSOR_ADC            SYSCFG_CFGR3_ENBUF_SENSOR_ADC_Msk /*!< Sensor reference for ADC enable bit */
N#define SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP_Pos    (12U)                         
N#define SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP_Msk    (0x1U << SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP_Pos) /*!< 0x00001000 */
N#define SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP        SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP_Msk /*!< VREFINT reference for comparator 2 enable bit */
N#define SYSCFG_CFGR3_ENREF_HSI48_Pos             (13U)                         
N#define SYSCFG_CFGR3_ENREF_HSI48_Msk             (0x1U << SYSCFG_CFGR3_ENREF_HSI48_Pos) /*!< 0x00002000 */
N#define SYSCFG_CFGR3_ENREF_HSI48                 SYSCFG_CFGR3_ENREF_HSI48_Msk  /*!< VREFINT reference or 48 MHz RC oscillator enable bit */
N#define SYSCFG_CFGR3_VREFINT_RDYF_Pos            (30U)                         
N#define SYSCFG_CFGR3_VREFINT_RDYF_Msk            (0x1U << SYSCFG_CFGR3_VREFINT_RDYF_Pos) /*!< 0x40000000 */
N#define SYSCFG_CFGR3_VREFINT_RDYF                SYSCFG_CFGR3_VREFINT_RDYF_Msk /*!< VREFINT ready flag */
N#define SYSCFG_CFGR3_REF_LOCK_Pos                (31U)                         
N#define SYSCFG_CFGR3_REF_LOCK_Msk                (0x1U << SYSCFG_CFGR3_REF_LOCK_Pos) /*!< 0x80000000 */
N#define SYSCFG_CFGR3_REF_LOCK                    SYSCFG_CFGR3_REF_LOCK_Msk     /*!< CFGR3 lock bit */
N
N/* Legacy defines */
N
N#define SYSCFG_CFGR3_ENBUF_BGAP_ADC           SYSCFG_CFGR3_ENBUF_VREFINT_ADC
N#define SYSCFG_CFGR3_ENBUFLP_BGAP_COMP        SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP
N#define SYSCFG_CFGR3_ENREF_RC48MHz            SYSCFG_CFGR3_ENREF_HSI48
N#define SYSCFG_CFGR3_REF_RC48MHz_RDYF         SYSCFG_CFGR3_VREFINT_RDYF
N#define SYSCFG_CFGR3_REF_HSI48_RDYF           SYSCFG_CFGR3_VREFINT_RDYF
N#define SYSCFG_VREFINT_ADC_RDYF               SYSCFG_CFGR3_VREFINT_RDYF
N#define SYSCFG_CFGR3_SENSOR_ADC_RDYF          SYSCFG_CFGR3_VREFINT_RDYF
N#define SYSCFG_CFGR3_VREFINT_ADC_RDYF         SYSCFG_CFGR3_VREFINT_RDYF
N#define SYSCFG_CFGR3_VREFINT_COMP_RDYF        SYSCFG_CFGR3_VREFINT_RDYF
N
N/******************************************************************************/
N/*                                                                            */
N/*                               Timers (TIM)                                 */
N/*                                                                            */
N/******************************************************************************/
N/*
N* @brief Specific device feature definitions (not present on all devices in the STM32L0 family)
N*/
N#if defined (STM32L071xx) || defined (STM32L072xx) || defined (STM32L073xx) \
N    || defined (STM32L081xx) || defined (STM32L082xx) || defined (STM32L083xx)
X#if 0L || 0L || 0L     || 0L || 0L || 0L
S#define TIM_TIM2_REMAP_HSI_SUPPORT       /*!<Support remap HSI on TIM2 */
S#define TIM_TIM2_REMAP_HSI48_SUPPORT     /*!<Support remap HSI48 on TIM2 */
N#else
N#define TIM_TIM2_REMAP_HSI48_SUPPORT     /*!<Support remap HSI48 on TIM2 */
N#endif	
N
N/*******************  Bit definition for TIM_CR1 register  ********************/
N#define TIM_CR1_CEN_Pos           (0U)                                         
N#define TIM_CR1_CEN_Msk           (0x1U << TIM_CR1_CEN_Pos)                    /*!< 0x00000001 */
N#define TIM_CR1_CEN               TIM_CR1_CEN_Msk                              /*!<Counter enable */
N#define TIM_CR1_UDIS_Pos          (1U)                                         
N#define TIM_CR1_UDIS_Msk          (0x1U << TIM_CR1_UDIS_Pos)                   /*!< 0x00000002 */
N#define TIM_CR1_UDIS              TIM_CR1_UDIS_Msk                             /*!<Update disable */
N#define TIM_CR1_URS_Pos           (2U)                                         
N#define TIM_CR1_URS_Msk           (0x1U << TIM_CR1_URS_Pos)                    /*!< 0x00000004 */
N#define TIM_CR1_URS               TIM_CR1_URS_Msk                              /*!<Update request source */
N#define TIM_CR1_OPM_Pos           (3U)                                         
N#define TIM_CR1_OPM_Msk           (0x1U << TIM_CR1_OPM_Pos)                    /*!< 0x00000008 */
N#define TIM_CR1_OPM               TIM_CR1_OPM_Msk                              /*!<One pulse mode */
N#define TIM_CR1_DIR_Pos           (4U)                                         
N#define TIM_CR1_DIR_Msk           (0x1U << TIM_CR1_DIR_Pos)                    /*!< 0x00000010 */
N#define TIM_CR1_DIR               TIM_CR1_DIR_Msk                              /*!<Direction */
N
N#define TIM_CR1_CMS_Pos           (5U)                                         
N#define TIM_CR1_CMS_Msk           (0x3U << TIM_CR1_CMS_Pos)                    /*!< 0x00000060 */
N#define TIM_CR1_CMS               TIM_CR1_CMS_Msk                              /*!<CMS[1:0] bits (Center-aligned mode selection) */
N#define TIM_CR1_CMS_0             (0x1U << TIM_CR1_CMS_Pos)                    /*!< 0x00000020 */
N#define TIM_CR1_CMS_1             (0x2U << TIM_CR1_CMS_Pos)                    /*!< 0x00000040 */
N
N#define TIM_CR1_ARPE_Pos          (7U)                                         
N#define TIM_CR1_ARPE_Msk          (0x1U << TIM_CR1_ARPE_Pos)                   /*!< 0x00000080 */
N#define TIM_CR1_ARPE              TIM_CR1_ARPE_Msk                             /*!<Auto-reload preload enable */
N
N#define TIM_CR1_CKD_Pos           (8U)                                         
N#define TIM_CR1_CKD_Msk           (0x3U << TIM_CR1_CKD_Pos)                    /*!< 0x00000300 */
N#define TIM_CR1_CKD               TIM_CR1_CKD_Msk                              /*!<CKD[1:0] bits (clock division) */
N#define TIM_CR1_CKD_0             (0x1U << TIM_CR1_CKD_Pos)                    /*!< 0x00000100 */
N#define TIM_CR1_CKD_1             (0x2U << TIM_CR1_CKD_Pos)                    /*!< 0x00000200 */
N
N/*******************  Bit definition for TIM_CR2 register  ********************/
N#define TIM_CR2_CCDS_Pos          (3U)                                         
N#define TIM_CR2_CCDS_Msk          (0x1U << TIM_CR2_CCDS_Pos)                   /*!< 0x00000008 */
N#define TIM_CR2_CCDS              TIM_CR2_CCDS_Msk                             /*!<Capture/Compare DMA Selection */
N
N#define TIM_CR2_MMS_Pos           (4U)                                         
N#define TIM_CR2_MMS_Msk           (0x7U << TIM_CR2_MMS_Pos)                    /*!< 0x00000070 */
N#define TIM_CR2_MMS               TIM_CR2_MMS_Msk                              /*!<MMS[2:0] bits (Master Mode Selection) */
N#define TIM_CR2_MMS_0             (0x1U << TIM_CR2_MMS_Pos)                    /*!< 0x00000010 */
N#define TIM_CR2_MMS_1             (0x2U << TIM_CR2_MMS_Pos)                    /*!< 0x00000020 */
N#define TIM_CR2_MMS_2             (0x4U << TIM_CR2_MMS_Pos)                    /*!< 0x00000040 */
N
N#define TIM_CR2_TI1S_Pos          (7U)                                         
N#define TIM_CR2_TI1S_Msk          (0x1U << TIM_CR2_TI1S_Pos)                   /*!< 0x00000080 */
N#define TIM_CR2_TI1S              TIM_CR2_TI1S_Msk                             /*!<TI1 Selection */
N
N/*******************  Bit definition for TIM_SMCR register  *******************/
N#define TIM_SMCR_SMS_Pos          (0U)                                         
N#define TIM_SMCR_SMS_Msk          (0x7U << TIM_SMCR_SMS_Pos)                   /*!< 0x00000007 */
N#define TIM_SMCR_SMS              TIM_SMCR_SMS_Msk                             /*!<SMS[2:0] bits (Slave mode selection) */
N#define TIM_SMCR_SMS_0            (0x1U << TIM_SMCR_SMS_Pos)                   /*!< 0x00000001 */
N#define TIM_SMCR_SMS_1            (0x2U << TIM_SMCR_SMS_Pos)                   /*!< 0x00000002 */
N#define TIM_SMCR_SMS_2            (0x4U << TIM_SMCR_SMS_Pos)                   /*!< 0x00000004 */
N
N#define TIM_SMCR_OCCS_Pos         (3U)                                         
N#define TIM_SMCR_OCCS_Msk         (0x1U << TIM_SMCR_OCCS_Pos)                  /*!< 0x00000008 */
N#define TIM_SMCR_OCCS             TIM_SMCR_OCCS_Msk                            /*!< OCREF clear selection */
N
N#define TIM_SMCR_TS_Pos           (4U)                                         
N#define TIM_SMCR_TS_Msk           (0x7U << TIM_SMCR_TS_Pos)                    /*!< 0x00000070 */
N#define TIM_SMCR_TS               TIM_SMCR_TS_Msk                              /*!<TS[2:0] bits (Trigger selection) */
N#define TIM_SMCR_TS_0             (0x1U << TIM_SMCR_TS_Pos)                    /*!< 0x00000010 */
N#define TIM_SMCR_TS_1             (0x2U << TIM_SMCR_TS_Pos)                    /*!< 0x00000020 */
N#define TIM_SMCR_TS_2             (0x4U << TIM_SMCR_TS_Pos)                    /*!< 0x00000040 */
N
N#define TIM_SMCR_MSM_Pos          (7U)                                         
N#define TIM_SMCR_MSM_Msk          (0x1U << TIM_SMCR_MSM_Pos)                   /*!< 0x00000080 */
N#define TIM_SMCR_MSM              TIM_SMCR_MSM_Msk                             /*!<Master/slave mode */
N
N#define TIM_SMCR_ETF_Pos          (8U)                                         
N#define TIM_SMCR_ETF_Msk          (0xFU << TIM_SMCR_ETF_Pos)                   /*!< 0x00000F00 */
N#define TIM_SMCR_ETF              TIM_SMCR_ETF_Msk                             /*!<ETF[3:0] bits (External trigger filter) */
N#define TIM_SMCR_ETF_0            (0x1U << TIM_SMCR_ETF_Pos)                   /*!< 0x00000100 */
N#define TIM_SMCR_ETF_1            (0x2U << TIM_SMCR_ETF_Pos)                   /*!< 0x00000200 */
N#define TIM_SMCR_ETF_2            (0x4U << TIM_SMCR_ETF_Pos)                   /*!< 0x00000400 */
N#define TIM_SMCR_ETF_3            (0x8U << TIM_SMCR_ETF_Pos)                   /*!< 0x00000800 */
N
N#define TIM_SMCR_ETPS_Pos         (12U)                                        
N#define TIM_SMCR_ETPS_Msk         (0x3U << TIM_SMCR_ETPS_Pos)                  /*!< 0x00003000 */
N#define TIM_SMCR_ETPS             TIM_SMCR_ETPS_Msk                            /*!<ETPS[1:0] bits (External trigger prescaler) */
N#define TIM_SMCR_ETPS_0           (0x1U << TIM_SMCR_ETPS_Pos)                  /*!< 0x00001000 */
N#define TIM_SMCR_ETPS_1           (0x2U << TIM_SMCR_ETPS_Pos)                  /*!< 0x00002000 */
N
N#define TIM_SMCR_ECE_Pos          (14U)                                        
N#define TIM_SMCR_ECE_Msk          (0x1U << TIM_SMCR_ECE_Pos)                   /*!< 0x00004000 */
N#define TIM_SMCR_ECE              TIM_SMCR_ECE_Msk                             /*!<External clock enable */
N#define TIM_SMCR_ETP_Pos          (15U)                                        
N#define TIM_SMCR_ETP_Msk          (0x1U << TIM_SMCR_ETP_Pos)                   /*!< 0x00008000 */
N#define TIM_SMCR_ETP              TIM_SMCR_ETP_Msk                             /*!<External trigger polarity */
N
N/*******************  Bit definition for TIM_DIER register  *******************/
N#define TIM_DIER_UIE_Pos          (0U)                                         
N#define TIM_DIER_UIE_Msk          (0x1U << TIM_DIER_UIE_Pos)                   /*!< 0x00000001 */
N#define TIM_DIER_UIE              TIM_DIER_UIE_Msk                             /*!<Update interrupt enable */
N#define TIM_DIER_CC1IE_Pos        (1U)                                         
N#define TIM_DIER_CC1IE_Msk        (0x1U << TIM_DIER_CC1IE_Pos)                 /*!< 0x00000002 */
N#define TIM_DIER_CC1IE            TIM_DIER_CC1IE_Msk                           /*!<Capture/Compare 1 interrupt enable */
N#define TIM_DIER_CC2IE_Pos        (2U)                                         
N#define TIM_DIER_CC2IE_Msk        (0x1U << TIM_DIER_CC2IE_Pos)                 /*!< 0x00000004 */
N#define TIM_DIER_CC2IE            TIM_DIER_CC2IE_Msk                           /*!<Capture/Compare 2 interrupt enable */
N#define TIM_DIER_CC3IE_Pos        (3U)                                         
N#define TIM_DIER_CC3IE_Msk        (0x1U << TIM_DIER_CC3IE_Pos)                 /*!< 0x00000008 */
N#define TIM_DIER_CC3IE            TIM_DIER_CC3IE_Msk                           /*!<Capture/Compare 3 interrupt enable */
N#define TIM_DIER_CC4IE_Pos        (4U)                                         
N#define TIM_DIER_CC4IE_Msk        (0x1U << TIM_DIER_CC4IE_Pos)                 /*!< 0x00000010 */
N#define TIM_DIER_CC4IE            TIM_DIER_CC4IE_Msk                           /*!<Capture/Compare 4 interrupt enable */
N#define TIM_DIER_TIE_Pos          (6U)                                         
N#define TIM_DIER_TIE_Msk          (0x1U << TIM_DIER_TIE_Pos)                   /*!< 0x00000040 */
N#define TIM_DIER_TIE              TIM_DIER_TIE_Msk                             /*!<Trigger interrupt enable */
N#define TIM_DIER_UDE_Pos          (8U)                                         
N#define TIM_DIER_UDE_Msk          (0x1U << TIM_DIER_UDE_Pos)                   /*!< 0x00000100 */
N#define TIM_DIER_UDE              TIM_DIER_UDE_Msk                             /*!<Update DMA request enable */
N#define TIM_DIER_CC1DE_Pos        (9U)                                         
N#define TIM_DIER_CC1DE_Msk        (0x1U << TIM_DIER_CC1DE_Pos)                 /*!< 0x00000200 */
N#define TIM_DIER_CC1DE            TIM_DIER_CC1DE_Msk                           /*!<Capture/Compare 1 DMA request enable */
N#define TIM_DIER_CC2DE_Pos        (10U)                                        
N#define TIM_DIER_CC2DE_Msk        (0x1U << TIM_DIER_CC2DE_Pos)                 /*!< 0x00000400 */
N#define TIM_DIER_CC2DE            TIM_DIER_CC2DE_Msk                           /*!<Capture/Compare 2 DMA request enable */
N#define TIM_DIER_CC3DE_Pos        (11U)                                        
N#define TIM_DIER_CC3DE_Msk        (0x1U << TIM_DIER_CC3DE_Pos)                 /*!< 0x00000800 */
N#define TIM_DIER_CC3DE            TIM_DIER_CC3DE_Msk                           /*!<Capture/Compare 3 DMA request enable */
N#define TIM_DIER_CC4DE_Pos        (12U)                                        
N#define TIM_DIER_CC4DE_Msk        (0x1U << TIM_DIER_CC4DE_Pos)                 /*!< 0x00001000 */
N#define TIM_DIER_CC4DE            TIM_DIER_CC4DE_Msk                           /*!<Capture/Compare 4 DMA request enable */
N#define TIM_DIER_TDE_Pos          (14U)                                        
N#define TIM_DIER_TDE_Msk          (0x1U << TIM_DIER_TDE_Pos)                   /*!< 0x00004000 */
N#define TIM_DIER_TDE              TIM_DIER_TDE_Msk                             /*!<Trigger DMA request enable */
N
N/********************  Bit definition for TIM_SR register  ********************/
N#define TIM_SR_UIF_Pos            (0U)                                         
N#define TIM_SR_UIF_Msk            (0x1U << TIM_SR_UIF_Pos)                     /*!< 0x00000001 */
N#define TIM_SR_UIF                TIM_SR_UIF_Msk                               /*!<Update interrupt Flag */
N#define TIM_SR_CC1IF_Pos          (1U)                                         
N#define TIM_SR_CC1IF_Msk          (0x1U << TIM_SR_CC1IF_Pos)                   /*!< 0x00000002 */
N#define TIM_SR_CC1IF              TIM_SR_CC1IF_Msk                             /*!<Capture/Compare 1 interrupt Flag */
N#define TIM_SR_CC2IF_Pos          (2U)                                         
N#define TIM_SR_CC2IF_Msk          (0x1U << TIM_SR_CC2IF_Pos)                   /*!< 0x00000004 */
N#define TIM_SR_CC2IF              TIM_SR_CC2IF_Msk                             /*!<Capture/Compare 2 interrupt Flag */
N#define TIM_SR_CC3IF_Pos          (3U)                                         
N#define TIM_SR_CC3IF_Msk          (0x1U << TIM_SR_CC3IF_Pos)                   /*!< 0x00000008 */
N#define TIM_SR_CC3IF              TIM_SR_CC3IF_Msk                             /*!<Capture/Compare 3 interrupt Flag */
N#define TIM_SR_CC4IF_Pos          (4U)                                         
N#define TIM_SR_CC4IF_Msk          (0x1U << TIM_SR_CC4IF_Pos)                   /*!< 0x00000010 */
N#define TIM_SR_CC4IF              TIM_SR_CC4IF_Msk                             /*!<Capture/Compare 4 interrupt Flag */
N#define TIM_SR_TIF_Pos            (6U)                                         
N#define TIM_SR_TIF_Msk            (0x1U << TIM_SR_TIF_Pos)                     /*!< 0x00000040 */
N#define TIM_SR_TIF                TIM_SR_TIF_Msk                               /*!<Trigger interrupt Flag */
N#define TIM_SR_CC1OF_Pos          (9U)                                         
N#define TIM_SR_CC1OF_Msk          (0x1U << TIM_SR_CC1OF_Pos)                   /*!< 0x00000200 */
N#define TIM_SR_CC1OF              TIM_SR_CC1OF_Msk                             /*!<Capture/Compare 1 Overcapture Flag */
N#define TIM_SR_CC2OF_Pos          (10U)                                        
N#define TIM_SR_CC2OF_Msk          (0x1U << TIM_SR_CC2OF_Pos)                   /*!< 0x00000400 */
N#define TIM_SR_CC2OF              TIM_SR_CC2OF_Msk                             /*!<Capture/Compare 2 Overcapture Flag */
N#define TIM_SR_CC3OF_Pos          (11U)                                        
N#define TIM_SR_CC3OF_Msk          (0x1U << TIM_SR_CC3OF_Pos)                   /*!< 0x00000800 */
N#define TIM_SR_CC3OF              TIM_SR_CC3OF_Msk                             /*!<Capture/Compare 3 Overcapture Flag */
N#define TIM_SR_CC4OF_Pos          (12U)                                        
N#define TIM_SR_CC4OF_Msk          (0x1U << TIM_SR_CC4OF_Pos)                   /*!< 0x00001000 */
N#define TIM_SR_CC4OF              TIM_SR_CC4OF_Msk                             /*!<Capture/Compare 4 Overcapture Flag */
N
N/*******************  Bit definition for TIM_EGR register  ********************/
N#define TIM_EGR_UG_Pos            (0U)                                         
N#define TIM_EGR_UG_Msk            (0x1U << TIM_EGR_UG_Pos)                     /*!< 0x00000001 */
N#define TIM_EGR_UG                TIM_EGR_UG_Msk                               /*!<Update Generation */
N#define TIM_EGR_CC1G_Pos          (1U)                                         
N#define TIM_EGR_CC1G_Msk          (0x1U << TIM_EGR_CC1G_Pos)                   /*!< 0x00000002 */
N#define TIM_EGR_CC1G              TIM_EGR_CC1G_Msk                             /*!<Capture/Compare 1 Generation */
N#define TIM_EGR_CC2G_Pos          (2U)                                         
N#define TIM_EGR_CC2G_Msk          (0x1U << TIM_EGR_CC2G_Pos)                   /*!< 0x00000004 */
N#define TIM_EGR_CC2G              TIM_EGR_CC2G_Msk                             /*!<Capture/Compare 2 Generation */
N#define TIM_EGR_CC3G_Pos          (3U)                                         
N#define TIM_EGR_CC3G_Msk          (0x1U << TIM_EGR_CC3G_Pos)                   /*!< 0x00000008 */
N#define TIM_EGR_CC3G              TIM_EGR_CC3G_Msk                             /*!<Capture/Compare 3 Generation */
N#define TIM_EGR_CC4G_Pos          (4U)                                         
N#define TIM_EGR_CC4G_Msk          (0x1U << TIM_EGR_CC4G_Pos)                   /*!< 0x00000010 */
N#define TIM_EGR_CC4G              TIM_EGR_CC4G_Msk                             /*!<Capture/Compare 4 Generation */
N#define TIM_EGR_TG_Pos            (6U)                                         
N#define TIM_EGR_TG_Msk            (0x1U << TIM_EGR_TG_Pos)                     /*!< 0x00000040 */
N#define TIM_EGR_TG                TIM_EGR_TG_Msk                               /*!<Trigger Generation */
N
N/******************  Bit definition for TIM_CCMR1 register  *******************/
N#define TIM_CCMR1_CC1S_Pos        (0U)                                         
N#define TIM_CCMR1_CC1S_Msk        (0x3U << TIM_CCMR1_CC1S_Pos)                 /*!< 0x00000003 */
N#define TIM_CCMR1_CC1S            TIM_CCMR1_CC1S_Msk                           /*!<CC1S[1:0] bits (Capture/Compare 1 Selection) */
N#define TIM_CCMR1_CC1S_0          (0x1U << TIM_CCMR1_CC1S_Pos)                 /*!< 0x00000001 */
N#define TIM_CCMR1_CC1S_1          (0x2U << TIM_CCMR1_CC1S_Pos)                 /*!< 0x00000002 */
N
N#define TIM_CCMR1_OC1FE_Pos       (2U)                                         
N#define TIM_CCMR1_OC1FE_Msk       (0x1U << TIM_CCMR1_OC1FE_Pos)                /*!< 0x00000004 */
N#define TIM_CCMR1_OC1FE           TIM_CCMR1_OC1FE_Msk                          /*!<Output Compare 1 Fast enable */
N#define TIM_CCMR1_OC1PE_Pos       (3U)                                         
N#define TIM_CCMR1_OC1PE_Msk       (0x1U << TIM_CCMR1_OC1PE_Pos)                /*!< 0x00000008 */
N#define TIM_CCMR1_OC1PE           TIM_CCMR1_OC1PE_Msk                          /*!<Output Compare 1 Preload enable */
N
N#define TIM_CCMR1_OC1M_Pos        (4U)                                         
N#define TIM_CCMR1_OC1M_Msk        (0x7U << TIM_CCMR1_OC1M_Pos)                 /*!< 0x00000070 */
N#define TIM_CCMR1_OC1M            TIM_CCMR1_OC1M_Msk                           /*!<OC1M[2:0] bits (Output Compare 1 Mode) */
N#define TIM_CCMR1_OC1M_0          (0x1U << TIM_CCMR1_OC1M_Pos)                 /*!< 0x00000010 */
N#define TIM_CCMR1_OC1M_1          (0x2U << TIM_CCMR1_OC1M_Pos)                 /*!< 0x00000020 */
N#define TIM_CCMR1_OC1M_2          (0x4U << TIM_CCMR1_OC1M_Pos)                 /*!< 0x00000040 */
N
N#define TIM_CCMR1_OC1CE_Pos       (7U)                                         
N#define TIM_CCMR1_OC1CE_Msk       (0x1U << TIM_CCMR1_OC1CE_Pos)                /*!< 0x00000080 */
N#define TIM_CCMR1_OC1CE           TIM_CCMR1_OC1CE_Msk                          /*!<Output Compare 1Clear Enable */
N
N#define TIM_CCMR1_CC2S_Pos        (8U)                                         
N#define TIM_CCMR1_CC2S_Msk        (0x3U << TIM_CCMR1_CC2S_Pos)                 /*!< 0x00000300 */
N#define TIM_CCMR1_CC2S            TIM_CCMR1_CC2S_Msk                           /*!<CC2S[1:0] bits (Capture/Compare 2 Selection) */
N#define TIM_CCMR1_CC2S_0          (0x1U << TIM_CCMR1_CC2S_Pos)                 /*!< 0x00000100 */
N#define TIM_CCMR1_CC2S_1          (0x2U << TIM_CCMR1_CC2S_Pos)                 /*!< 0x00000200 */
N
N#define TIM_CCMR1_OC2FE_Pos       (10U)                                        
N#define TIM_CCMR1_OC2FE_Msk       (0x1U << TIM_CCMR1_OC2FE_Pos)                /*!< 0x00000400 */
N#define TIM_CCMR1_OC2FE           TIM_CCMR1_OC2FE_Msk                          /*!<Output Compare 2 Fast enable */
N#define TIM_CCMR1_OC2PE_Pos       (11U)                                        
N#define TIM_CCMR1_OC2PE_Msk       (0x1U << TIM_CCMR1_OC2PE_Pos)                /*!< 0x00000800 */
N#define TIM_CCMR1_OC2PE           TIM_CCMR1_OC2PE_Msk                          /*!<Output Compare 2 Preload enable */
N
N#define TIM_CCMR1_OC2M_Pos        (12U)                                        
N#define TIM_CCMR1_OC2M_Msk        (0x7U << TIM_CCMR1_OC2M_Pos)                 /*!< 0x00007000 */
N#define TIM_CCMR1_OC2M            TIM_CCMR1_OC2M_Msk                           /*!<OC2M[2:0] bits (Output Compare 2 Mode) */
N#define TIM_CCMR1_OC2M_0          (0x1U << TIM_CCMR1_OC2M_Pos)                 /*!< 0x00001000 */
N#define TIM_CCMR1_OC2M_1          (0x2U << TIM_CCMR1_OC2M_Pos)                 /*!< 0x00002000 */
N#define TIM_CCMR1_OC2M_2          (0x4U << TIM_CCMR1_OC2M_Pos)                 /*!< 0x00004000 */
N
N#define TIM_CCMR1_OC2CE_Pos       (15U)                                        
N#define TIM_CCMR1_OC2CE_Msk       (0x1U << TIM_CCMR1_OC2CE_Pos)                /*!< 0x00008000 */
N#define TIM_CCMR1_OC2CE           TIM_CCMR1_OC2CE_Msk                          /*!<Output Compare 2 Clear Enable */
N
N/*----------------------------------------------------------------------------*/
N
N#define TIM_CCMR1_IC1PSC_Pos      (2U)                                         
N#define TIM_CCMR1_IC1PSC_Msk      (0x3U << TIM_CCMR1_IC1PSC_Pos)               /*!< 0x0000000C */
N#define TIM_CCMR1_IC1PSC          TIM_CCMR1_IC1PSC_Msk                         /*!<IC1PSC[1:0] bits (Input Capture 1 Prescaler) */
N#define TIM_CCMR1_IC1PSC_0        (0x1U << TIM_CCMR1_IC1PSC_Pos)               /*!< 0x00000004 */
N#define TIM_CCMR1_IC1PSC_1        (0x2U << TIM_CCMR1_IC1PSC_Pos)               /*!< 0x00000008 */
N
N#define TIM_CCMR1_IC1F_Pos        (4U)                                         
N#define TIM_CCMR1_IC1F_Msk        (0xFU << TIM_CCMR1_IC1F_Pos)                 /*!< 0x000000F0 */
N#define TIM_CCMR1_IC1F            TIM_CCMR1_IC1F_Msk                           /*!<IC1F[3:0] bits (Input Capture 1 Filter) */
N#define TIM_CCMR1_IC1F_0          (0x1U << TIM_CCMR1_IC1F_Pos)                 /*!< 0x00000010 */
N#define TIM_CCMR1_IC1F_1          (0x2U << TIM_CCMR1_IC1F_Pos)                 /*!< 0x00000020 */
N#define TIM_CCMR1_IC1F_2          (0x4U << TIM_CCMR1_IC1F_Pos)                 /*!< 0x00000040 */
N#define TIM_CCMR1_IC1F_3          (0x8U << TIM_CCMR1_IC1F_Pos)                 /*!< 0x00000080 */
N
N#define TIM_CCMR1_IC2PSC_Pos      (10U)                                        
N#define TIM_CCMR1_IC2PSC_Msk      (0x3U << TIM_CCMR1_IC2PSC_Pos)               /*!< 0x00000C00 */
N#define TIM_CCMR1_IC2PSC          TIM_CCMR1_IC2PSC_Msk                         /*!<IC2PSC[1:0] bits (Input Capture 2 Prescaler) */
N#define TIM_CCMR1_IC2PSC_0        (0x1U << TIM_CCMR1_IC2PSC_Pos)               /*!< 0x00000400 */
N#define TIM_CCMR1_IC2PSC_1        (0x2U << TIM_CCMR1_IC2PSC_Pos)               /*!< 0x00000800 */
N
N#define TIM_CCMR1_IC2F_Pos        (12U)                                        
N#define TIM_CCMR1_IC2F_Msk        (0xFU << TIM_CCMR1_IC2F_Pos)                 /*!< 0x0000F000 */
N#define TIM_CCMR1_IC2F            TIM_CCMR1_IC2F_Msk                           /*!<IC2F[3:0] bits (Input Capture 2 Filter) */
N#define TIM_CCMR1_IC2F_0          (0x1U << TIM_CCMR1_IC2F_Pos)                 /*!< 0x00001000 */
N#define TIM_CCMR1_IC2F_1          (0x2U << TIM_CCMR1_IC2F_Pos)                 /*!< 0x00002000 */
N#define TIM_CCMR1_IC2F_2          (0x4U << TIM_CCMR1_IC2F_Pos)                 /*!< 0x00004000 */
N#define TIM_CCMR1_IC2F_3          (0x8U << TIM_CCMR1_IC2F_Pos)                 /*!< 0x00008000 */
N
N/******************  Bit definition for TIM_CCMR2 register  *******************/
N#define TIM_CCMR2_CC3S_Pos        (0U)                                         
N#define TIM_CCMR2_CC3S_Msk        (0x3U << TIM_CCMR2_CC3S_Pos)                 /*!< 0x00000003 */
N#define TIM_CCMR2_CC3S            TIM_CCMR2_CC3S_Msk                           /*!<CC3S[1:0] bits (Capture/Compare 3 Selection) */
N#define TIM_CCMR2_CC3S_0          (0x1U << TIM_CCMR2_CC3S_Pos)                 /*!< 0x00000001 */
N#define TIM_CCMR2_CC3S_1          (0x2U << TIM_CCMR2_CC3S_Pos)                 /*!< 0x00000002 */
N
N#define TIM_CCMR2_OC3FE_Pos       (2U)                                         
N#define TIM_CCMR2_OC3FE_Msk       (0x1U << TIM_CCMR2_OC3FE_Pos)                /*!< 0x00000004 */
N#define TIM_CCMR2_OC3FE           TIM_CCMR2_OC3FE_Msk                          /*!<Output Compare 3 Fast enable */
N#define TIM_CCMR2_OC3PE_Pos       (3U)                                         
N#define TIM_CCMR2_OC3PE_Msk       (0x1U << TIM_CCMR2_OC3PE_Pos)                /*!< 0x00000008 */
N#define TIM_CCMR2_OC3PE           TIM_CCMR2_OC3PE_Msk                          /*!<Output Compare 3 Preload enable */
N
N#define TIM_CCMR2_OC3M_Pos        (4U)                                         
N#define TIM_CCMR2_OC3M_Msk        (0x7U << TIM_CCMR2_OC3M_Pos)                 /*!< 0x00000070 */
N#define TIM_CCMR2_OC3M            TIM_CCMR2_OC3M_Msk                           /*!<OC3M[2:0] bits (Output Compare 3 Mode) */
N#define TIM_CCMR2_OC3M_0          (0x1U << TIM_CCMR2_OC3M_Pos)                 /*!< 0x00000010 */
N#define TIM_CCMR2_OC3M_1          (0x2U << TIM_CCMR2_OC3M_Pos)                 /*!< 0x00000020 */
N#define TIM_CCMR2_OC3M_2          (0x4U << TIM_CCMR2_OC3M_Pos)                 /*!< 0x00000040 */
N
N#define TIM_CCMR2_OC3CE_Pos       (7U)                                         
N#define TIM_CCMR2_OC3CE_Msk       (0x1U << TIM_CCMR2_OC3CE_Pos)                /*!< 0x00000080 */
N#define TIM_CCMR2_OC3CE           TIM_CCMR2_OC3CE_Msk                          /*!<Output Compare 3 Clear Enable */
N
N#define TIM_CCMR2_CC4S_Pos        (8U)                                         
N#define TIM_CCMR2_CC4S_Msk        (0x3U << TIM_CCMR2_CC4S_Pos)                 /*!< 0x00000300 */
N#define TIM_CCMR2_CC4S            TIM_CCMR2_CC4S_Msk                           /*!<CC4S[1:0] bits (Capture/Compare 4 Selection) */
N#define TIM_CCMR2_CC4S_0          (0x1U << TIM_CCMR2_CC4S_Pos)                 /*!< 0x00000100 */
N#define TIM_CCMR2_CC4S_1          (0x2U << TIM_CCMR2_CC4S_Pos)                 /*!< 0x00000200 */
N
N#define TIM_CCMR2_OC4FE_Pos       (10U)                                        
N#define TIM_CCMR2_OC4FE_Msk       (0x1U << TIM_CCMR2_OC4FE_Pos)                /*!< 0x00000400 */
N#define TIM_CCMR2_OC4FE           TIM_CCMR2_OC4FE_Msk                          /*!<Output Compare 4 Fast enable */
N#define TIM_CCMR2_OC4PE_Pos       (11U)                                        
N#define TIM_CCMR2_OC4PE_Msk       (0x1U << TIM_CCMR2_OC4PE_Pos)                /*!< 0x00000800 */
N#define TIM_CCMR2_OC4PE           TIM_CCMR2_OC4PE_Msk                          /*!<Output Compare 4 Preload enable */
N
N#define TIM_CCMR2_OC4M_Pos        (12U)                                        
N#define TIM_CCMR2_OC4M_Msk        (0x7U << TIM_CCMR2_OC4M_Pos)                 /*!< 0x00007000 */
N#define TIM_CCMR2_OC4M            TIM_CCMR2_OC4M_Msk                           /*!<OC4M[2:0] bits (Output Compare 4 Mode) */
N#define TIM_CCMR2_OC4M_0          (0x1U << TIM_CCMR2_OC4M_Pos)                 /*!< 0x00001000 */
N#define TIM_CCMR2_OC4M_1          (0x2U << TIM_CCMR2_OC4M_Pos)                 /*!< 0x00002000 */
N#define TIM_CCMR2_OC4M_2          (0x4U << TIM_CCMR2_OC4M_Pos)                 /*!< 0x00004000 */
N
N#define TIM_CCMR2_OC4CE_Pos       (15U)                                        
N#define TIM_CCMR2_OC4CE_Msk       (0x1U << TIM_CCMR2_OC4CE_Pos)                /*!< 0x00008000 */
N#define TIM_CCMR2_OC4CE           TIM_CCMR2_OC4CE_Msk                          /*!<Output Compare 4 Clear Enable */
N
N/*----------------------------------------------------------------------------*/
N
N#define TIM_CCMR2_IC3PSC_Pos      (2U)                                         
N#define TIM_CCMR2_IC3PSC_Msk      (0x3U << TIM_CCMR2_IC3PSC_Pos)               /*!< 0x0000000C */
N#define TIM_CCMR2_IC3PSC          TIM_CCMR2_IC3PSC_Msk                         /*!<IC3PSC[1:0] bits (Input Capture 3 Prescaler) */
N#define TIM_CCMR2_IC3PSC_0        (0x1U << TIM_CCMR2_IC3PSC_Pos)               /*!< 0x00000004 */
N#define TIM_CCMR2_IC3PSC_1        (0x2U << TIM_CCMR2_IC3PSC_Pos)               /*!< 0x00000008 */
N
N#define TIM_CCMR2_IC3F_Pos        (4U)                                         
N#define TIM_CCMR2_IC3F_Msk        (0xFU << TIM_CCMR2_IC3F_Pos)                 /*!< 0x000000F0 */
N#define TIM_CCMR2_IC3F            TIM_CCMR2_IC3F_Msk                           /*!<IC3F[3:0] bits (Input Capture 3 Filter) */
N#define TIM_CCMR2_IC3F_0          (0x1U << TIM_CCMR2_IC3F_Pos)                 /*!< 0x00000010 */
N#define TIM_CCMR2_IC3F_1          (0x2U << TIM_CCMR2_IC3F_Pos)                 /*!< 0x00000020 */
N#define TIM_CCMR2_IC3F_2          (0x4U << TIM_CCMR2_IC3F_Pos)                 /*!< 0x00000040 */
N#define TIM_CCMR2_IC3F_3          (0x8U << TIM_CCMR2_IC3F_Pos)                 /*!< 0x00000080 */
N
N#define TIM_CCMR2_IC4PSC_Pos      (10U)                                        
N#define TIM_CCMR2_IC4PSC_Msk      (0x3U << TIM_CCMR2_IC4PSC_Pos)               /*!< 0x00000C00 */
N#define TIM_CCMR2_IC4PSC          TIM_CCMR2_IC4PSC_Msk                         /*!<IC4PSC[1:0] bits (Input Capture 4 Prescaler) */
N#define TIM_CCMR2_IC4PSC_0        (0x1U << TIM_CCMR2_IC4PSC_Pos)               /*!< 0x00000400 */
N#define TIM_CCMR2_IC4PSC_1        (0x2U << TIM_CCMR2_IC4PSC_Pos)               /*!< 0x00000800 */
N
N#define TIM_CCMR2_IC4F_Pos        (12U)                                        
N#define TIM_CCMR2_IC4F_Msk        (0xFU << TIM_CCMR2_IC4F_Pos)                 /*!< 0x0000F000 */
N#define TIM_CCMR2_IC4F            TIM_CCMR2_IC4F_Msk                           /*!<IC4F[3:0] bits (Input Capture 4 Filter) */
N#define TIM_CCMR2_IC4F_0          (0x1U << TIM_CCMR2_IC4F_Pos)                 /*!< 0x00001000 */
N#define TIM_CCMR2_IC4F_1          (0x2U << TIM_CCMR2_IC4F_Pos)                 /*!< 0x00002000 */
N#define TIM_CCMR2_IC4F_2          (0x4U << TIM_CCMR2_IC4F_Pos)                 /*!< 0x00004000 */
N#define TIM_CCMR2_IC4F_3          (0x8U << TIM_CCMR2_IC4F_Pos)                 /*!< 0x00008000 */
N
N/*******************  Bit definition for TIM_CCER register  *******************/
N#define TIM_CCER_CC1E_Pos         (0U)                                         
N#define TIM_CCER_CC1E_Msk         (0x1U << TIM_CCER_CC1E_Pos)                  /*!< 0x00000001 */
N#define TIM_CCER_CC1E             TIM_CCER_CC1E_Msk                            /*!<Capture/Compare 1 output enable */
N#define TIM_CCER_CC1P_Pos         (1U)                                         
N#define TIM_CCER_CC1P_Msk         (0x1U << TIM_CCER_CC1P_Pos)                  /*!< 0x00000002 */
N#define TIM_CCER_CC1P             TIM_CCER_CC1P_Msk                            /*!<Capture/Compare 1 output Polarity */
N#define TIM_CCER_CC1NP_Pos        (3U)                                         
N#define TIM_CCER_CC1NP_Msk        (0x1U << TIM_CCER_CC1NP_Pos)                 /*!< 0x00000008 */
N#define TIM_CCER_CC1NP            TIM_CCER_CC1NP_Msk                           /*!<Capture/Compare 1 Complementary output Polarity */
N#define TIM_CCER_CC2E_Pos         (4U)                                         
N#define TIM_CCER_CC2E_Msk         (0x1U << TIM_CCER_CC2E_Pos)                  /*!< 0x00000010 */
N#define TIM_CCER_CC2E             TIM_CCER_CC2E_Msk                            /*!<Capture/Compare 2 output enable */
N#define TIM_CCER_CC2P_Pos         (5U)                                         
N#define TIM_CCER_CC2P_Msk         (0x1U << TIM_CCER_CC2P_Pos)                  /*!< 0x00000020 */
N#define TIM_CCER_CC2P             TIM_CCER_CC2P_Msk                            /*!<Capture/Compare 2 output Polarity */
N#define TIM_CCER_CC2NP_Pos        (7U)                                         
N#define TIM_CCER_CC2NP_Msk        (0x1U << TIM_CCER_CC2NP_Pos)                 /*!< 0x00000080 */
N#define TIM_CCER_CC2NP            TIM_CCER_CC2NP_Msk                           /*!<Capture/Compare 2 Complementary output Polarity */
N#define TIM_CCER_CC3E_Pos         (8U)                                         
N#define TIM_CCER_CC3E_Msk         (0x1U << TIM_CCER_CC3E_Pos)                  /*!< 0x00000100 */
N#define TIM_CCER_CC3E             TIM_CCER_CC3E_Msk                            /*!<Capture/Compare 3 output enable */
N#define TIM_CCER_CC3P_Pos         (9U)                                         
N#define TIM_CCER_CC3P_Msk         (0x1U << TIM_CCER_CC3P_Pos)                  /*!< 0x00000200 */
N#define TIM_CCER_CC3P             TIM_CCER_CC3P_Msk                            /*!<Capture/Compare 3 output Polarity */
N#define TIM_CCER_CC3NP_Pos        (11U)                                        
N#define TIM_CCER_CC3NP_Msk        (0x1U << TIM_CCER_CC3NP_Pos)                 /*!< 0x00000800 */
N#define TIM_CCER_CC3NP            TIM_CCER_CC3NP_Msk                           /*!<Capture/Compare 3 Complementary output Polarity */
N#define TIM_CCER_CC4E_Pos         (12U)                                        
N#define TIM_CCER_CC4E_Msk         (0x1U << TIM_CCER_CC4E_Pos)                  /*!< 0x00001000 */
N#define TIM_CCER_CC4E             TIM_CCER_CC4E_Msk                            /*!<Capture/Compare 4 output enable */
N#define TIM_CCER_CC4P_Pos         (13U)                                        
N#define TIM_CCER_CC4P_Msk         (0x1U << TIM_CCER_CC4P_Pos)                  /*!< 0x00002000 */
N#define TIM_CCER_CC4P             TIM_CCER_CC4P_Msk                            /*!<Capture/Compare 4 output Polarity */
N#define TIM_CCER_CC4NP_Pos        (15U)                                        
N#define TIM_CCER_CC4NP_Msk        (0x1U << TIM_CCER_CC4NP_Pos)                 /*!< 0x00008000 */
N#define TIM_CCER_CC4NP            TIM_CCER_CC4NP_Msk                           /*!<Capture/Compare 4 Complementary output Polarity */
N
N/*******************  Bit definition for TIM_CNT register  ********************/
N#define TIM_CNT_CNT_Pos           (0U)                                         
N#define TIM_CNT_CNT_Msk           (0xFFFFU << TIM_CNT_CNT_Pos)                 /*!< 0x0000FFFF */
N#define TIM_CNT_CNT               TIM_CNT_CNT_Msk                              /*!<Counter Value */
N
N/*******************  Bit definition for TIM_PSC register  ********************/
N#define TIM_PSC_PSC_Pos           (0U)                                         
N#define TIM_PSC_PSC_Msk           (0xFFFFU << TIM_PSC_PSC_Pos)                 /*!< 0x0000FFFF */
N#define TIM_PSC_PSC               TIM_PSC_PSC_Msk                              /*!<Prescaler Value */
N
N/*******************  Bit definition for TIM_ARR register  ********************/
N#define TIM_ARR_ARR_Pos           (0U)                                         
N#define TIM_ARR_ARR_Msk           (0xFFFFU << TIM_ARR_ARR_Pos)                 /*!< 0x0000FFFF */
N#define TIM_ARR_ARR               TIM_ARR_ARR_Msk                              /*!<actual auto-reload Value */
N
N/*******************  Bit definition for TIM_CCR1 register  *******************/
N#define TIM_CCR1_CCR1_Pos         (0U)                                         
N#define TIM_CCR1_CCR1_Msk         (0xFFFFU << TIM_CCR1_CCR1_Pos)               /*!< 0x0000FFFF */
N#define TIM_CCR1_CCR1             TIM_CCR1_CCR1_Msk                            /*!<Capture/Compare 1 Value */
N
N/*******************  Bit definition for TIM_CCR2 register  *******************/
N#define TIM_CCR2_CCR2_Pos         (0U)                                         
N#define TIM_CCR2_CCR2_Msk         (0xFFFFU << TIM_CCR2_CCR2_Pos)               /*!< 0x0000FFFF */
N#define TIM_CCR2_CCR2             TIM_CCR2_CCR2_Msk                            /*!<Capture/Compare 2 Value */
N
N/*******************  Bit definition for TIM_CCR3 register  *******************/
N#define TIM_CCR3_CCR3_Pos         (0U)                                         
N#define TIM_CCR3_CCR3_Msk         (0xFFFFU << TIM_CCR3_CCR3_Pos)               /*!< 0x0000FFFF */
N#define TIM_CCR3_CCR3             TIM_CCR3_CCR3_Msk                            /*!<Capture/Compare 3 Value */
N
N/*******************  Bit definition for TIM_CCR4 register  *******************/
N#define TIM_CCR4_CCR4_Pos         (0U)                                         
N#define TIM_CCR4_CCR4_Msk         (0xFFFFU << TIM_CCR4_CCR4_Pos)               /*!< 0x0000FFFF */
N#define TIM_CCR4_CCR4             TIM_CCR4_CCR4_Msk                            /*!<Capture/Compare 4 Value */
N
N/*******************  Bit definition for TIM_DCR register  ********************/
N#define TIM_DCR_DBA_Pos           (0U)                                         
N#define TIM_DCR_DBA_Msk           (0x1FU << TIM_DCR_DBA_Pos)                   /*!< 0x0000001F */
N#define TIM_DCR_DBA               TIM_DCR_DBA_Msk                              /*!<DBA[4:0] bits (DMA Base Address) */
N#define TIM_DCR_DBA_0             (0x01U << TIM_DCR_DBA_Pos)                   /*!< 0x00000001 */
N#define TIM_DCR_DBA_1             (0x02U << TIM_DCR_DBA_Pos)                   /*!< 0x00000002 */
N#define TIM_DCR_DBA_2             (0x04U << TIM_DCR_DBA_Pos)                   /*!< 0x00000004 */
N#define TIM_DCR_DBA_3             (0x08U << TIM_DCR_DBA_Pos)                   /*!< 0x00000008 */
N#define TIM_DCR_DBA_4             (0x10U << TIM_DCR_DBA_Pos)                   /*!< 0x00000010 */
N
N#define TIM_DCR_DBL_Pos           (8U)                                         
N#define TIM_DCR_DBL_Msk           (0x1FU << TIM_DCR_DBL_Pos)                   /*!< 0x00001F00 */
N#define TIM_DCR_DBL               TIM_DCR_DBL_Msk                              /*!<DBL[4:0] bits (DMA Burst Length) */
N#define TIM_DCR_DBL_0             (0x01U << TIM_DCR_DBL_Pos)                   /*!< 0x00000100 */
N#define TIM_DCR_DBL_1             (0x02U << TIM_DCR_DBL_Pos)                   /*!< 0x00000200 */
N#define TIM_DCR_DBL_2             (0x04U << TIM_DCR_DBL_Pos)                   /*!< 0x00000400 */
N#define TIM_DCR_DBL_3             (0x08U << TIM_DCR_DBL_Pos)                   /*!< 0x00000800 */
N#define TIM_DCR_DBL_4             (0x10U << TIM_DCR_DBL_Pos)                   /*!< 0x00001000 */
N
N/*******************  Bit definition for TIM_DMAR register  *******************/
N#define TIM_DMAR_DMAB_Pos         (0U)                                         
N#define TIM_DMAR_DMAB_Msk         (0xFFFFU << TIM_DMAR_DMAB_Pos)               /*!< 0x0000FFFF */
N#define TIM_DMAR_DMAB             TIM_DMAR_DMAB_Msk                            /*!<DMA register for burst accesses */
N
N/*******************  Bit definition for TIM_OR register  *********************/
N#define TIM2_OR_ETR_RMP_Pos      (0U)                                          
N#define TIM2_OR_ETR_RMP_Msk      (0x7U << TIM2_OR_ETR_RMP_Pos)                 /*!< 0x00000007 */
N#define TIM2_OR_ETR_RMP          TIM2_OR_ETR_RMP_Msk                           /*!<ETR_RMP[1:0] bits (TIM2 ETR remap) */
N#define TIM2_OR_ETR_RMP_0        (0x1U << TIM2_OR_ETR_RMP_Pos)                 /*!< 0x00000001 */
N#define TIM2_OR_ETR_RMP_1        (0x2U << TIM2_OR_ETR_RMP_Pos)                 /*!< 0x00000002 */
N#define TIM2_OR_ETR_RMP_2        (0x4U << TIM2_OR_ETR_RMP_Pos)                 /*!< 0x00000004 */
N#define TIM2_OR_TI4_RMP_Pos      (3U)                                          
N#define TIM2_OR_TI4_RMP_Msk      (0x3U << TIM2_OR_TI4_RMP_Pos)                 /*!< 0x00000018 */
N#define TIM2_OR_TI4_RMP          TIM2_OR_TI4_RMP_Msk                           /*!<TI4_RMP[1:0] bits (TIM2 Input 4 remap) */
N#define TIM2_OR_TI4_RMP_0        (0x1U << TIM2_OR_TI4_RMP_Pos)                 /*!< 0x00000008 */
N#define TIM2_OR_TI4_RMP_1        (0x2U << TIM2_OR_TI4_RMP_Pos)                 /*!< 0x00000010 */
N
N#define TIM21_OR_ETR_RMP_Pos      (0U)                                         
N#define TIM21_OR_ETR_RMP_Msk      (0x3U << TIM21_OR_ETR_RMP_Pos)               /*!< 0x00000003 */
N#define TIM21_OR_ETR_RMP          TIM21_OR_ETR_RMP_Msk                         /*!<ETR_RMP[1:0] bits (TIM21 ETR remap) */
N#define TIM21_OR_ETR_RMP_0        (0x1U << TIM21_OR_ETR_RMP_Pos)               /*!< 0x00000001 */
N#define TIM21_OR_ETR_RMP_1        (0x2U << TIM21_OR_ETR_RMP_Pos)               /*!< 0x00000002 */
N#define TIM21_OR_TI1_RMP_Pos      (2U)                                         
N#define TIM21_OR_TI1_RMP_Msk      (0x7U << TIM21_OR_TI1_RMP_Pos)               /*!< 0x0000001C */
N#define TIM21_OR_TI1_RMP          TIM21_OR_TI1_RMP_Msk                         /*!<TI1_RMP[2:0] bits (TIM21 Input 1 remap) */
N#define TIM21_OR_TI1_RMP_0        (0x1U << TIM21_OR_TI1_RMP_Pos)               /*!< 0x00000004 */
N#define TIM21_OR_TI1_RMP_1        (0x2U << TIM21_OR_TI1_RMP_Pos)               /*!< 0x00000008 */
N#define TIM21_OR_TI1_RMP_2        (0x4U << TIM21_OR_TI1_RMP_Pos)               /*!< 0x00000010 */
N#define TIM21_OR_TI2_RMP_Pos      (5U)                                         
N#define TIM21_OR_TI2_RMP_Msk      (0x1U << TIM21_OR_TI2_RMP_Pos)               /*!< 0x00000020 */
N#define TIM21_OR_TI2_RMP          TIM21_OR_TI2_RMP_Msk                         /*!<TI2_RMP bit (TIM21 Input 2 remap) */
N
N#define TIM22_OR_ETR_RMP_Pos      (0U)                                         
N#define TIM22_OR_ETR_RMP_Msk      (0x3U << TIM22_OR_ETR_RMP_Pos)               /*!< 0x00000003 */
N#define TIM22_OR_ETR_RMP          TIM22_OR_ETR_RMP_Msk                         /*!<ETR_RMP[1:0] bits (TIM22 ETR remap) */
N#define TIM22_OR_ETR_RMP_0        (0x1U << TIM22_OR_ETR_RMP_Pos)               /*!< 0x00000001 */
N#define TIM22_OR_ETR_RMP_1        (0x2U << TIM22_OR_ETR_RMP_Pos)               /*!< 0x00000002 */
N#define TIM22_OR_TI1_RMP_Pos      (2U)                                         
N#define TIM22_OR_TI1_RMP_Msk      (0x3U << TIM22_OR_TI1_RMP_Pos)               /*!< 0x0000000C */
N#define TIM22_OR_TI1_RMP          TIM22_OR_TI1_RMP_Msk                         /*!<TI1_RMP[2:0] bits (TIM22 Input 1 remap) */
N#define TIM22_OR_TI1_RMP_0        (0x1U << TIM22_OR_TI1_RMP_Pos)               /*!< 0x00000004 */
N#define TIM22_OR_TI1_RMP_1        (0x2U << TIM22_OR_TI1_RMP_Pos)               /*!< 0x00000008 */
N
N
N/******************************************************************************/
N/*                                                                            */
N/*                          Touch Sensing Controller (TSC)                    */
N/*                                                                            */
N/******************************************************************************/
N/*******************  Bit definition for TSC_CR register  *********************/
N#define TSC_CR_TSCE_Pos          (0U)                                          
N#define TSC_CR_TSCE_Msk          (0x1U << TSC_CR_TSCE_Pos)                     /*!< 0x00000001 */
N#define TSC_CR_TSCE              TSC_CR_TSCE_Msk                               /*!<Touch sensing controller enable */
N#define TSC_CR_START_Pos         (1U)                                          
N#define TSC_CR_START_Msk         (0x1U << TSC_CR_START_Pos)                    /*!< 0x00000002 */
N#define TSC_CR_START             TSC_CR_START_Msk                              /*!<Start acquisition */
N#define TSC_CR_AM_Pos            (2U)                                          
N#define TSC_CR_AM_Msk            (0x1U << TSC_CR_AM_Pos)                       /*!< 0x00000004 */
N#define TSC_CR_AM                TSC_CR_AM_Msk                                 /*!<Acquisition mode */
N#define TSC_CR_SYNCPOL_Pos       (3U)                                          
N#define TSC_CR_SYNCPOL_Msk       (0x1U << TSC_CR_SYNCPOL_Pos)                  /*!< 0x00000008 */
N#define TSC_CR_SYNCPOL           TSC_CR_SYNCPOL_Msk                            /*!<Synchronization pin polarity */
N#define TSC_CR_IODEF_Pos         (4U)                                          
N#define TSC_CR_IODEF_Msk         (0x1U << TSC_CR_IODEF_Pos)                    /*!< 0x00000010 */
N#define TSC_CR_IODEF             TSC_CR_IODEF_Msk                              /*!<IO default mode */
N
N#define TSC_CR_MCV_Pos           (5U)                                          
N#define TSC_CR_MCV_Msk           (0x7U << TSC_CR_MCV_Pos)                      /*!< 0x000000E0 */
N#define TSC_CR_MCV               TSC_CR_MCV_Msk                                /*!<MCV[2:0] bits (Max Count Value) */
N#define TSC_CR_MCV_0             (0x1U << TSC_CR_MCV_Pos)                      /*!< 0x00000020 */
N#define TSC_CR_MCV_1             (0x2U << TSC_CR_MCV_Pos)                      /*!< 0x00000040 */
N#define TSC_CR_MCV_2             (0x4U << TSC_CR_MCV_Pos)                      /*!< 0x00000080 */
N
N#define TSC_CR_PGPSC_Pos         (12U)                                         
N#define TSC_CR_PGPSC_Msk         (0x7U << TSC_CR_PGPSC_Pos)                    /*!< 0x00007000 */
N#define TSC_CR_PGPSC             TSC_CR_PGPSC_Msk                              /*!<PGPSC[2:0] bits (Pulse Generator Prescaler) */
N#define TSC_CR_PGPSC_0           (0x1U << TSC_CR_PGPSC_Pos)                    /*!< 0x00001000 */
N#define TSC_CR_PGPSC_1           (0x2U << TSC_CR_PGPSC_Pos)                    /*!< 0x00002000 */
N#define TSC_CR_PGPSC_2           (0x4U << TSC_CR_PGPSC_Pos)                    /*!< 0x00004000 */
N
N#define TSC_CR_SSPSC_Pos         (15U)                                         
N#define TSC_CR_SSPSC_Msk         (0x1U << TSC_CR_SSPSC_Pos)                    /*!< 0x00008000 */
N#define TSC_CR_SSPSC             TSC_CR_SSPSC_Msk                              /*!<Spread Spectrum Prescaler */
N#define TSC_CR_SSE_Pos           (16U)                                         
N#define TSC_CR_SSE_Msk           (0x1U << TSC_CR_SSE_Pos)                      /*!< 0x00010000 */
N#define TSC_CR_SSE               TSC_CR_SSE_Msk                                /*!<Spread Spectrum Enable */
N
N#define TSC_CR_SSD_Pos           (17U)                                         
N#define TSC_CR_SSD_Msk           (0x7FU << TSC_CR_SSD_Pos)                     /*!< 0x00FE0000 */
N#define TSC_CR_SSD               TSC_CR_SSD_Msk                                /*!<SSD[6:0] bits (Spread Spectrum Deviation) */
N#define TSC_CR_SSD_0             (0x01U << TSC_CR_SSD_Pos)                     /*!< 0x00020000 */
N#define TSC_CR_SSD_1             (0x02U << TSC_CR_SSD_Pos)                     /*!< 0x00040000 */
N#define TSC_CR_SSD_2             (0x04U << TSC_CR_SSD_Pos)                     /*!< 0x00080000 */
N#define TSC_CR_SSD_3             (0x08U << TSC_CR_SSD_Pos)                     /*!< 0x00100000 */
N#define TSC_CR_SSD_4             (0x10U << TSC_CR_SSD_Pos)                     /*!< 0x00200000 */
N#define TSC_CR_SSD_5             (0x20U << TSC_CR_SSD_Pos)                     /*!< 0x00400000 */
N#define TSC_CR_SSD_6             (0x40U << TSC_CR_SSD_Pos)                     /*!< 0x00800000 */
N
N#define TSC_CR_CTPL_Pos          (24U)                                         
N#define TSC_CR_CTPL_Msk          (0xFU << TSC_CR_CTPL_Pos)                     /*!< 0x0F000000 */
N#define TSC_CR_CTPL              TSC_CR_CTPL_Msk                               /*!<CTPL[3:0] bits (Charge Transfer pulse low) */
N#define TSC_CR_CTPL_0            (0x1U << TSC_CR_CTPL_Pos)                     /*!< 0x01000000 */
N#define TSC_CR_CTPL_1            (0x2U << TSC_CR_CTPL_Pos)                     /*!< 0x02000000 */
N#define TSC_CR_CTPL_2            (0x4U << TSC_CR_CTPL_Pos)                     /*!< 0x04000000 */
N#define TSC_CR_CTPL_3            (0x8U << TSC_CR_CTPL_Pos)                     /*!< 0x08000000 */
N
N#define TSC_CR_CTPH_Pos          (28U)                                         
N#define TSC_CR_CTPH_Msk          (0xFU << TSC_CR_CTPH_Pos)                     /*!< 0xF0000000 */
N#define TSC_CR_CTPH              TSC_CR_CTPH_Msk                               /*!<CTPH[3:0] bits (Charge Transfer pulse high) */
N#define TSC_CR_CTPH_0            (0x1U << TSC_CR_CTPH_Pos)                     /*!< 0x10000000 */
N#define TSC_CR_CTPH_1            (0x2U << TSC_CR_CTPH_Pos)                     /*!< 0x20000000 */
N#define TSC_CR_CTPH_2            (0x4U << TSC_CR_CTPH_Pos)                     /*!< 0x40000000 */
N#define TSC_CR_CTPH_3            (0x8U << TSC_CR_CTPH_Pos)                     /*!< 0x80000000 */
N
N/*******************  Bit definition for TSC_IER register  ********************/
N#define TSC_IER_EOAIE_Pos        (0U)                                          
N#define TSC_IER_EOAIE_Msk        (0x1U << TSC_IER_EOAIE_Pos)                   /*!< 0x00000001 */
N#define TSC_IER_EOAIE            TSC_IER_EOAIE_Msk                             /*!<End of acquisition interrupt enable */
N#define TSC_IER_MCEIE_Pos        (1U)                                          
N#define TSC_IER_MCEIE_Msk        (0x1U << TSC_IER_MCEIE_Pos)                   /*!< 0x00000002 */
N#define TSC_IER_MCEIE            TSC_IER_MCEIE_Msk                             /*!<Max count error interrupt enable */
N
N/*******************  Bit definition for TSC_ICR register  ********************/
N#define TSC_ICR_EOAIC_Pos        (0U)                                          
N#define TSC_ICR_EOAIC_Msk        (0x1U << TSC_ICR_EOAIC_Pos)                   /*!< 0x00000001 */
N#define TSC_ICR_EOAIC            TSC_ICR_EOAIC_Msk                             /*!<End of acquisition interrupt clear */
N#define TSC_ICR_MCEIC_Pos        (1U)                                          
N#define TSC_ICR_MCEIC_Msk        (0x1U << TSC_ICR_MCEIC_Pos)                   /*!< 0x00000002 */
N#define TSC_ICR_MCEIC            TSC_ICR_MCEIC_Msk                             /*!<Max count error interrupt clear */
N
N/*******************  Bit definition for TSC_ISR register  ********************/
N#define TSC_ISR_EOAF_Pos         (0U)                                          
N#define TSC_ISR_EOAF_Msk         (0x1U << TSC_ISR_EOAF_Pos)                    /*!< 0x00000001 */
N#define TSC_ISR_EOAF             TSC_ISR_EOAF_Msk                              /*!<End of acquisition flag */
N#define TSC_ISR_MCEF_Pos         (1U)                                          
N#define TSC_ISR_MCEF_Msk         (0x1U << TSC_ISR_MCEF_Pos)                    /*!< 0x00000002 */
N#define TSC_ISR_MCEF             TSC_ISR_MCEF_Msk                              /*!<Max count error flag */
N
N/*******************  Bit definition for TSC_IOHCR register  ******************/
N#define TSC_IOHCR_G1_IO1_Pos     (0U)                                          
N#define TSC_IOHCR_G1_IO1_Msk     (0x1U << TSC_IOHCR_G1_IO1_Pos)                /*!< 0x00000001 */
N#define TSC_IOHCR_G1_IO1         TSC_IOHCR_G1_IO1_Msk                          /*!<GROUP1_IO1 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G1_IO2_Pos     (1U)                                          
N#define TSC_IOHCR_G1_IO2_Msk     (0x1U << TSC_IOHCR_G1_IO2_Pos)                /*!< 0x00000002 */
N#define TSC_IOHCR_G1_IO2         TSC_IOHCR_G1_IO2_Msk                          /*!<GROUP1_IO2 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G1_IO3_Pos     (2U)                                          
N#define TSC_IOHCR_G1_IO3_Msk     (0x1U << TSC_IOHCR_G1_IO3_Pos)                /*!< 0x00000004 */
N#define TSC_IOHCR_G1_IO3         TSC_IOHCR_G1_IO3_Msk                          /*!<GROUP1_IO3 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G1_IO4_Pos     (3U)                                          
N#define TSC_IOHCR_G1_IO4_Msk     (0x1U << TSC_IOHCR_G1_IO4_Pos)                /*!< 0x00000008 */
N#define TSC_IOHCR_G1_IO4         TSC_IOHCR_G1_IO4_Msk                          /*!<GROUP1_IO4 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G2_IO1_Pos     (4U)                                          
N#define TSC_IOHCR_G2_IO1_Msk     (0x1U << TSC_IOHCR_G2_IO1_Pos)                /*!< 0x00000010 */
N#define TSC_IOHCR_G2_IO1         TSC_IOHCR_G2_IO1_Msk                          /*!<GROUP2_IO1 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G2_IO2_Pos     (5U)                                          
N#define TSC_IOHCR_G2_IO2_Msk     (0x1U << TSC_IOHCR_G2_IO2_Pos)                /*!< 0x00000020 */
N#define TSC_IOHCR_G2_IO2         TSC_IOHCR_G2_IO2_Msk                          /*!<GROUP2_IO2 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G2_IO3_Pos     (6U)                                          
N#define TSC_IOHCR_G2_IO3_Msk     (0x1U << TSC_IOHCR_G2_IO3_Pos)                /*!< 0x00000040 */
N#define TSC_IOHCR_G2_IO3         TSC_IOHCR_G2_IO3_Msk                          /*!<GROUP2_IO3 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G2_IO4_Pos     (7U)                                          
N#define TSC_IOHCR_G2_IO4_Msk     (0x1U << TSC_IOHCR_G2_IO4_Pos)                /*!< 0x00000080 */
N#define TSC_IOHCR_G2_IO4         TSC_IOHCR_G2_IO4_Msk                          /*!<GROUP2_IO4 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G3_IO1_Pos     (8U)                                          
N#define TSC_IOHCR_G3_IO1_Msk     (0x1U << TSC_IOHCR_G3_IO1_Pos)                /*!< 0x00000100 */
N#define TSC_IOHCR_G3_IO1         TSC_IOHCR_G3_IO1_Msk                          /*!<GROUP3_IO1 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G3_IO2_Pos     (9U)                                          
N#define TSC_IOHCR_G3_IO2_Msk     (0x1U << TSC_IOHCR_G3_IO2_Pos)                /*!< 0x00000200 */
N#define TSC_IOHCR_G3_IO2         TSC_IOHCR_G3_IO2_Msk                          /*!<GROUP3_IO2 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G3_IO3_Pos     (10U)                                         
N#define TSC_IOHCR_G3_IO3_Msk     (0x1U << TSC_IOHCR_G3_IO3_Pos)                /*!< 0x00000400 */
N#define TSC_IOHCR_G3_IO3         TSC_IOHCR_G3_IO3_Msk                          /*!<GROUP3_IO3 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G3_IO4_Pos     (11U)                                         
N#define TSC_IOHCR_G3_IO4_Msk     (0x1U << TSC_IOHCR_G3_IO4_Pos)                /*!< 0x00000800 */
N#define TSC_IOHCR_G3_IO4         TSC_IOHCR_G3_IO4_Msk                          /*!<GROUP3_IO4 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G4_IO1_Pos     (12U)                                         
N#define TSC_IOHCR_G4_IO1_Msk     (0x1U << TSC_IOHCR_G4_IO1_Pos)                /*!< 0x00001000 */
N#define TSC_IOHCR_G4_IO1         TSC_IOHCR_G4_IO1_Msk                          /*!<GROUP4_IO1 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G4_IO2_Pos     (13U)                                         
N#define TSC_IOHCR_G4_IO2_Msk     (0x1U << TSC_IOHCR_G4_IO2_Pos)                /*!< 0x00002000 */
N#define TSC_IOHCR_G4_IO2         TSC_IOHCR_G4_IO2_Msk                          /*!<GROUP4_IO2 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G4_IO3_Pos     (14U)                                         
N#define TSC_IOHCR_G4_IO3_Msk     (0x1U << TSC_IOHCR_G4_IO3_Pos)                /*!< 0x00004000 */
N#define TSC_IOHCR_G4_IO3         TSC_IOHCR_G4_IO3_Msk                          /*!<GROUP4_IO3 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G4_IO4_Pos     (15U)                                         
N#define TSC_IOHCR_G4_IO4_Msk     (0x1U << TSC_IOHCR_G4_IO4_Pos)                /*!< 0x00008000 */
N#define TSC_IOHCR_G4_IO4         TSC_IOHCR_G4_IO4_Msk                          /*!<GROUP4_IO4 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G5_IO1_Pos     (16U)                                         
N#define TSC_IOHCR_G5_IO1_Msk     (0x1U << TSC_IOHCR_G5_IO1_Pos)                /*!< 0x00010000 */
N#define TSC_IOHCR_G5_IO1         TSC_IOHCR_G5_IO1_Msk                          /*!<GROUP5_IO1 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G5_IO2_Pos     (17U)                                         
N#define TSC_IOHCR_G5_IO2_Msk     (0x1U << TSC_IOHCR_G5_IO2_Pos)                /*!< 0x00020000 */
N#define TSC_IOHCR_G5_IO2         TSC_IOHCR_G5_IO2_Msk                          /*!<GROUP5_IO2 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G5_IO3_Pos     (18U)                                         
N#define TSC_IOHCR_G5_IO3_Msk     (0x1U << TSC_IOHCR_G5_IO3_Pos)                /*!< 0x00040000 */
N#define TSC_IOHCR_G5_IO3         TSC_IOHCR_G5_IO3_Msk                          /*!<GROUP5_IO3 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G5_IO4_Pos     (19U)                                         
N#define TSC_IOHCR_G5_IO4_Msk     (0x1U << TSC_IOHCR_G5_IO4_Pos)                /*!< 0x00080000 */
N#define TSC_IOHCR_G5_IO4         TSC_IOHCR_G5_IO4_Msk                          /*!<GROUP5_IO4 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G6_IO1_Pos     (20U)                                         
N#define TSC_IOHCR_G6_IO1_Msk     (0x1U << TSC_IOHCR_G6_IO1_Pos)                /*!< 0x00100000 */
N#define TSC_IOHCR_G6_IO1         TSC_IOHCR_G6_IO1_Msk                          /*!<GROUP6_IO1 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G6_IO2_Pos     (21U)                                         
N#define TSC_IOHCR_G6_IO2_Msk     (0x1U << TSC_IOHCR_G6_IO2_Pos)                /*!< 0x00200000 */
N#define TSC_IOHCR_G6_IO2         TSC_IOHCR_G6_IO2_Msk                          /*!<GROUP6_IO2 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G6_IO3_Pos     (22U)                                         
N#define TSC_IOHCR_G6_IO3_Msk     (0x1U << TSC_IOHCR_G6_IO3_Pos)                /*!< 0x00400000 */
N#define TSC_IOHCR_G6_IO3         TSC_IOHCR_G6_IO3_Msk                          /*!<GROUP6_IO3 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G6_IO4_Pos     (23U)                                         
N#define TSC_IOHCR_G6_IO4_Msk     (0x1U << TSC_IOHCR_G6_IO4_Pos)                /*!< 0x00800000 */
N#define TSC_IOHCR_G6_IO4         TSC_IOHCR_G6_IO4_Msk                          /*!<GROUP6_IO4 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G7_IO1_Pos     (24U)                                         
N#define TSC_IOHCR_G7_IO1_Msk     (0x1U << TSC_IOHCR_G7_IO1_Pos)                /*!< 0x01000000 */
N#define TSC_IOHCR_G7_IO1         TSC_IOHCR_G7_IO1_Msk                          /*!<GROUP7_IO1 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G7_IO2_Pos     (25U)                                         
N#define TSC_IOHCR_G7_IO2_Msk     (0x1U << TSC_IOHCR_G7_IO2_Pos)                /*!< 0x02000000 */
N#define TSC_IOHCR_G7_IO2         TSC_IOHCR_G7_IO2_Msk                          /*!<GROUP7_IO2 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G7_IO3_Pos     (26U)                                         
N#define TSC_IOHCR_G7_IO3_Msk     (0x1U << TSC_IOHCR_G7_IO3_Pos)                /*!< 0x04000000 */
N#define TSC_IOHCR_G7_IO3         TSC_IOHCR_G7_IO3_Msk                          /*!<GROUP7_IO3 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G7_IO4_Pos     (27U)                                         
N#define TSC_IOHCR_G7_IO4_Msk     (0x1U << TSC_IOHCR_G7_IO4_Pos)                /*!< 0x08000000 */
N#define TSC_IOHCR_G7_IO4         TSC_IOHCR_G7_IO4_Msk                          /*!<GROUP7_IO4 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G8_IO1_Pos     (28U)                                         
N#define TSC_IOHCR_G8_IO1_Msk     (0x1U << TSC_IOHCR_G8_IO1_Pos)                /*!< 0x10000000 */
N#define TSC_IOHCR_G8_IO1         TSC_IOHCR_G8_IO1_Msk                          /*!<GROUP8_IO1 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G8_IO2_Pos     (29U)                                         
N#define TSC_IOHCR_G8_IO2_Msk     (0x1U << TSC_IOHCR_G8_IO2_Pos)                /*!< 0x20000000 */
N#define TSC_IOHCR_G8_IO2         TSC_IOHCR_G8_IO2_Msk                          /*!<GROUP8_IO2 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G8_IO3_Pos     (30U)                                         
N#define TSC_IOHCR_G8_IO3_Msk     (0x1U << TSC_IOHCR_G8_IO3_Pos)                /*!< 0x40000000 */
N#define TSC_IOHCR_G8_IO3         TSC_IOHCR_G8_IO3_Msk                          /*!<GROUP8_IO3 schmitt trigger hysteresis mode */
N#define TSC_IOHCR_G8_IO4_Pos     (31U)                                         
N#define TSC_IOHCR_G8_IO4_Msk     (0x1U << TSC_IOHCR_G8_IO4_Pos)                /*!< 0x80000000 */
N#define TSC_IOHCR_G8_IO4         TSC_IOHCR_G8_IO4_Msk                          /*!<GROUP8_IO4 schmitt trigger hysteresis mode */
N
N/*******************  Bit definition for TSC_IOASCR register  *****************/
N#define TSC_IOASCR_G1_IO1_Pos    (0U)                                          
N#define TSC_IOASCR_G1_IO1_Msk    (0x1U << TSC_IOASCR_G1_IO1_Pos)               /*!< 0x00000001 */
N#define TSC_IOASCR_G1_IO1        TSC_IOASCR_G1_IO1_Msk                         /*!<GROUP1_IO1 analog switch enable */
N#define TSC_IOASCR_G1_IO2_Pos    (1U)                                          
N#define TSC_IOASCR_G1_IO2_Msk    (0x1U << TSC_IOASCR_G1_IO2_Pos)               /*!< 0x00000002 */
N#define TSC_IOASCR_G1_IO2        TSC_IOASCR_G1_IO2_Msk                         /*!<GROUP1_IO2 analog switch enable */
N#define TSC_IOASCR_G1_IO3_Pos    (2U)                                          
N#define TSC_IOASCR_G1_IO3_Msk    (0x1U << TSC_IOASCR_G1_IO3_Pos)               /*!< 0x00000004 */
N#define TSC_IOASCR_G1_IO3        TSC_IOASCR_G1_IO3_Msk                         /*!<GROUP1_IO3 analog switch enable */
N#define TSC_IOASCR_G1_IO4_Pos    (3U)                                          
N#define TSC_IOASCR_G1_IO4_Msk    (0x1U << TSC_IOASCR_G1_IO4_Pos)               /*!< 0x00000008 */
N#define TSC_IOASCR_G1_IO4        TSC_IOASCR_G1_IO4_Msk                         /*!<GROUP1_IO4 analog switch enable */
N#define TSC_IOASCR_G2_IO1_Pos    (4U)                                          
N#define TSC_IOASCR_G2_IO1_Msk    (0x1U << TSC_IOASCR_G2_IO1_Pos)               /*!< 0x00000010 */
N#define TSC_IOASCR_G2_IO1        TSC_IOASCR_G2_IO1_Msk                         /*!<GROUP2_IO1 analog switch enable */
N#define TSC_IOASCR_G2_IO2_Pos    (5U)                                          
N#define TSC_IOASCR_G2_IO2_Msk    (0x1U << TSC_IOASCR_G2_IO2_Pos)               /*!< 0x00000020 */
N#define TSC_IOASCR_G2_IO2        TSC_IOASCR_G2_IO2_Msk                         /*!<GROUP2_IO2 analog switch enable */
N#define TSC_IOASCR_G2_IO3_Pos    (6U)                                          
N#define TSC_IOASCR_G2_IO3_Msk    (0x1U << TSC_IOASCR_G2_IO3_Pos)               /*!< 0x00000040 */
N#define TSC_IOASCR_G2_IO3        TSC_IOASCR_G2_IO3_Msk                         /*!<GROUP2_IO3 analog switch enable */
N#define TSC_IOASCR_G2_IO4_Pos    (7U)                                          
N#define TSC_IOASCR_G2_IO4_Msk    (0x1U << TSC_IOASCR_G2_IO4_Pos)               /*!< 0x00000080 */
N#define TSC_IOASCR_G2_IO4        TSC_IOASCR_G2_IO4_Msk                         /*!<GROUP2_IO4 analog switch enable */
N#define TSC_IOASCR_G3_IO1_Pos    (8U)                                          
N#define TSC_IOASCR_G3_IO1_Msk    (0x1U << TSC_IOASCR_G3_IO1_Pos)               /*!< 0x00000100 */
N#define TSC_IOASCR_G3_IO1        TSC_IOASCR_G3_IO1_Msk                         /*!<GROUP3_IO1 analog switch enable */
N#define TSC_IOASCR_G3_IO2_Pos    (9U)                                          
N#define TSC_IOASCR_G3_IO2_Msk    (0x1U << TSC_IOASCR_G3_IO2_Pos)               /*!< 0x00000200 */
N#define TSC_IOASCR_G3_IO2        TSC_IOASCR_G3_IO2_Msk                         /*!<GROUP3_IO2 analog switch enable */
N#define TSC_IOASCR_G3_IO3_Pos    (10U)                                         
N#define TSC_IOASCR_G3_IO3_Msk    (0x1U << TSC_IOASCR_G3_IO3_Pos)               /*!< 0x00000400 */
N#define TSC_IOASCR_G3_IO3        TSC_IOASCR_G3_IO3_Msk                         /*!<GROUP3_IO3 analog switch enable */
N#define TSC_IOASCR_G3_IO4_Pos    (11U)                                         
N#define TSC_IOASCR_G3_IO4_Msk    (0x1U << TSC_IOASCR_G3_IO4_Pos)               /*!< 0x00000800 */
N#define TSC_IOASCR_G3_IO4        TSC_IOASCR_G3_IO4_Msk                         /*!<GROUP3_IO4 analog switch enable */
N#define TSC_IOASCR_G4_IO1_Pos    (12U)                                         
N#define TSC_IOASCR_G4_IO1_Msk    (0x1U << TSC_IOASCR_G4_IO1_Pos)               /*!< 0x00001000 */
N#define TSC_IOASCR_G4_IO1        TSC_IOASCR_G4_IO1_Msk                         /*!<GROUP4_IO1 analog switch enable */
N#define TSC_IOASCR_G4_IO2_Pos    (13U)                                         
N#define TSC_IOASCR_G4_IO2_Msk    (0x1U << TSC_IOASCR_G4_IO2_Pos)               /*!< 0x00002000 */
N#define TSC_IOASCR_G4_IO2        TSC_IOASCR_G4_IO2_Msk                         /*!<GROUP4_IO2 analog switch enable */
N#define TSC_IOASCR_G4_IO3_Pos    (14U)                                         
N#define TSC_IOASCR_G4_IO3_Msk    (0x1U << TSC_IOASCR_G4_IO3_Pos)               /*!< 0x00004000 */
N#define TSC_IOASCR_G4_IO3        TSC_IOASCR_G4_IO3_Msk                         /*!<GROUP4_IO3 analog switch enable */
N#define TSC_IOASCR_G4_IO4_Pos    (15U)                                         
N#define TSC_IOASCR_G4_IO4_Msk    (0x1U << TSC_IOASCR_G4_IO4_Pos)               /*!< 0x00008000 */
N#define TSC_IOASCR_G4_IO4        TSC_IOASCR_G4_IO4_Msk                         /*!<GROUP4_IO4 analog switch enable */
N#define TSC_IOASCR_G5_IO1_Pos    (16U)                                         
N#define TSC_IOASCR_G5_IO1_Msk    (0x1U << TSC_IOASCR_G5_IO1_Pos)               /*!< 0x00010000 */
N#define TSC_IOASCR_G5_IO1        TSC_IOASCR_G5_IO1_Msk                         /*!<GROUP5_IO1 analog switch enable */
N#define TSC_IOASCR_G5_IO2_Pos    (17U)                                         
N#define TSC_IOASCR_G5_IO2_Msk    (0x1U << TSC_IOASCR_G5_IO2_Pos)               /*!< 0x00020000 */
N#define TSC_IOASCR_G5_IO2        TSC_IOASCR_G5_IO2_Msk                         /*!<GROUP5_IO2 analog switch enable */
N#define TSC_IOASCR_G5_IO3_Pos    (18U)                                         
N#define TSC_IOASCR_G5_IO3_Msk    (0x1U << TSC_IOASCR_G5_IO3_Pos)               /*!< 0x00040000 */
N#define TSC_IOASCR_G5_IO3        TSC_IOASCR_G5_IO3_Msk                         /*!<GROUP5_IO3 analog switch enable */
N#define TSC_IOASCR_G5_IO4_Pos    (19U)                                         
N#define TSC_IOASCR_G5_IO4_Msk    (0x1U << TSC_IOASCR_G5_IO4_Pos)               /*!< 0x00080000 */
N#define TSC_IOASCR_G5_IO4        TSC_IOASCR_G5_IO4_Msk                         /*!<GROUP5_IO4 analog switch enable */
N#define TSC_IOASCR_G6_IO1_Pos    (20U)                                         
N#define TSC_IOASCR_G6_IO1_Msk    (0x1U << TSC_IOASCR_G6_IO1_Pos)               /*!< 0x00100000 */
N#define TSC_IOASCR_G6_IO1        TSC_IOASCR_G6_IO1_Msk                         /*!<GROUP6_IO1 analog switch enable */
N#define TSC_IOASCR_G6_IO2_Pos    (21U)                                         
N#define TSC_IOASCR_G6_IO2_Msk    (0x1U << TSC_IOASCR_G6_IO2_Pos)               /*!< 0x00200000 */
N#define TSC_IOASCR_G6_IO2        TSC_IOASCR_G6_IO2_Msk                         /*!<GROUP6_IO2 analog switch enable */
N#define TSC_IOASCR_G6_IO3_Pos    (22U)                                         
N#define TSC_IOASCR_G6_IO3_Msk    (0x1U << TSC_IOASCR_G6_IO3_Pos)               /*!< 0x00400000 */
N#define TSC_IOASCR_G6_IO3        TSC_IOASCR_G6_IO3_Msk                         /*!<GROUP6_IO3 analog switch enable */
N#define TSC_IOASCR_G6_IO4_Pos    (23U)                                         
N#define TSC_IOASCR_G6_IO4_Msk    (0x1U << TSC_IOASCR_G6_IO4_Pos)               /*!< 0x00800000 */
N#define TSC_IOASCR_G6_IO4        TSC_IOASCR_G6_IO4_Msk                         /*!<GROUP6_IO4 analog switch enable */
N#define TSC_IOASCR_G7_IO1_Pos    (24U)                                         
N#define TSC_IOASCR_G7_IO1_Msk    (0x1U << TSC_IOASCR_G7_IO1_Pos)               /*!< 0x01000000 */
N#define TSC_IOASCR_G7_IO1        TSC_IOASCR_G7_IO1_Msk                         /*!<GROUP7_IO1 analog switch enable */
N#define TSC_IOASCR_G7_IO2_Pos    (25U)                                         
N#define TSC_IOASCR_G7_IO2_Msk    (0x1U << TSC_IOASCR_G7_IO2_Pos)               /*!< 0x02000000 */
N#define TSC_IOASCR_G7_IO2        TSC_IOASCR_G7_IO2_Msk                         /*!<GROUP7_IO2 analog switch enable */
N#define TSC_IOASCR_G7_IO3_Pos    (26U)                                         
N#define TSC_IOASCR_G7_IO3_Msk    (0x1U << TSC_IOASCR_G7_IO3_Pos)               /*!< 0x04000000 */
N#define TSC_IOASCR_G7_IO3        TSC_IOASCR_G7_IO3_Msk                         /*!<GROUP7_IO3 analog switch enable */
N#define TSC_IOASCR_G7_IO4_Pos    (27U)                                         
N#define TSC_IOASCR_G7_IO4_Msk    (0x1U << TSC_IOASCR_G7_IO4_Pos)               /*!< 0x08000000 */
N#define TSC_IOASCR_G7_IO4        TSC_IOASCR_G7_IO4_Msk                         /*!<GROUP7_IO4 analog switch enable */
N#define TSC_IOASCR_G8_IO1_Pos    (28U)                                         
N#define TSC_IOASCR_G8_IO1_Msk    (0x1U << TSC_IOASCR_G8_IO1_Pos)               /*!< 0x10000000 */
N#define TSC_IOASCR_G8_IO1        TSC_IOASCR_G8_IO1_Msk                         /*!<GROUP8_IO1 analog switch enable */
N#define TSC_IOASCR_G8_IO2_Pos    (29U)                                         
N#define TSC_IOASCR_G8_IO2_Msk    (0x1U << TSC_IOASCR_G8_IO2_Pos)               /*!< 0x20000000 */
N#define TSC_IOASCR_G8_IO2        TSC_IOASCR_G8_IO2_Msk                         /*!<GROUP8_IO2 analog switch enable */
N#define TSC_IOASCR_G8_IO3_Pos    (30U)                                         
N#define TSC_IOASCR_G8_IO3_Msk    (0x1U << TSC_IOASCR_G8_IO3_Pos)               /*!< 0x40000000 */
N#define TSC_IOASCR_G8_IO3        TSC_IOASCR_G8_IO3_Msk                         /*!<GROUP8_IO3 analog switch enable */
N#define TSC_IOASCR_G8_IO4_Pos    (31U)                                         
N#define TSC_IOASCR_G8_IO4_Msk    (0x1U << TSC_IOASCR_G8_IO4_Pos)               /*!< 0x80000000 */
N#define TSC_IOASCR_G8_IO4        TSC_IOASCR_G8_IO4_Msk                         /*!<GROUP8_IO4 analog switch enable */
N
N/*******************  Bit definition for TSC_IOSCR register  ******************/
N#define TSC_IOSCR_G1_IO1_Pos     (0U)                                          
N#define TSC_IOSCR_G1_IO1_Msk     (0x1U << TSC_IOSCR_G1_IO1_Pos)                /*!< 0x00000001 */
N#define TSC_IOSCR_G1_IO1         TSC_IOSCR_G1_IO1_Msk                          /*!<GROUP1_IO1 sampling mode */
N#define TSC_IOSCR_G1_IO2_Pos     (1U)                                          
N#define TSC_IOSCR_G1_IO2_Msk     (0x1U << TSC_IOSCR_G1_IO2_Pos)                /*!< 0x00000002 */
N#define TSC_IOSCR_G1_IO2         TSC_IOSCR_G1_IO2_Msk                          /*!<GROUP1_IO2 sampling mode */
N#define TSC_IOSCR_G1_IO3_Pos     (2U)                                          
N#define TSC_IOSCR_G1_IO3_Msk     (0x1U << TSC_IOSCR_G1_IO3_Pos)                /*!< 0x00000004 */
N#define TSC_IOSCR_G1_IO3         TSC_IOSCR_G1_IO3_Msk                          /*!<GROUP1_IO3 sampling mode */
N#define TSC_IOSCR_G1_IO4_Pos     (3U)                                          
N#define TSC_IOSCR_G1_IO4_Msk     (0x1U << TSC_IOSCR_G1_IO4_Pos)                /*!< 0x00000008 */
N#define TSC_IOSCR_G1_IO4         TSC_IOSCR_G1_IO4_Msk                          /*!<GROUP1_IO4 sampling mode */
N#define TSC_IOSCR_G2_IO1_Pos     (4U)                                          
N#define TSC_IOSCR_G2_IO1_Msk     (0x1U << TSC_IOSCR_G2_IO1_Pos)                /*!< 0x00000010 */
N#define TSC_IOSCR_G2_IO1         TSC_IOSCR_G2_IO1_Msk                          /*!<GROUP2_IO1 sampling mode */
N#define TSC_IOSCR_G2_IO2_Pos     (5U)                                          
N#define TSC_IOSCR_G2_IO2_Msk     (0x1U << TSC_IOSCR_G2_IO2_Pos)                /*!< 0x00000020 */
N#define TSC_IOSCR_G2_IO2         TSC_IOSCR_G2_IO2_Msk                          /*!<GROUP2_IO2 sampling mode */
N#define TSC_IOSCR_G2_IO3_Pos     (6U)                                          
N#define TSC_IOSCR_G2_IO3_Msk     (0x1U << TSC_IOSCR_G2_IO3_Pos)                /*!< 0x00000040 */
N#define TSC_IOSCR_G2_IO3         TSC_IOSCR_G2_IO3_Msk                          /*!<GROUP2_IO3 sampling mode */
N#define TSC_IOSCR_G2_IO4_Pos     (7U)                                          
N#define TSC_IOSCR_G2_IO4_Msk     (0x1U << TSC_IOSCR_G2_IO4_Pos)                /*!< 0x00000080 */
N#define TSC_IOSCR_G2_IO4         TSC_IOSCR_G2_IO4_Msk                          /*!<GROUP2_IO4 sampling mode */
N#define TSC_IOSCR_G3_IO1_Pos     (8U)                                          
N#define TSC_IOSCR_G3_IO1_Msk     (0x1U << TSC_IOSCR_G3_IO1_Pos)                /*!< 0x00000100 */
N#define TSC_IOSCR_G3_IO1         TSC_IOSCR_G3_IO1_Msk                          /*!<GROUP3_IO1 sampling mode */
N#define TSC_IOSCR_G3_IO2_Pos     (9U)                                          
N#define TSC_IOSCR_G3_IO2_Msk     (0x1U << TSC_IOSCR_G3_IO2_Pos)                /*!< 0x00000200 */
N#define TSC_IOSCR_G3_IO2         TSC_IOSCR_G3_IO2_Msk                          /*!<GROUP3_IO2 sampling mode */
N#define TSC_IOSCR_G3_IO3_Pos     (10U)                                         
N#define TSC_IOSCR_G3_IO3_Msk     (0x1U << TSC_IOSCR_G3_IO3_Pos)                /*!< 0x00000400 */
N#define TSC_IOSCR_G3_IO3         TSC_IOSCR_G3_IO3_Msk                          /*!<GROUP3_IO3 sampling mode */
N#define TSC_IOSCR_G3_IO4_Pos     (11U)                                         
N#define TSC_IOSCR_G3_IO4_Msk     (0x1U << TSC_IOSCR_G3_IO4_Pos)                /*!< 0x00000800 */
N#define TSC_IOSCR_G3_IO4         TSC_IOSCR_G3_IO4_Msk                          /*!<GROUP3_IO4 sampling mode */
N#define TSC_IOSCR_G4_IO1_Pos     (12U)                                         
N#define TSC_IOSCR_G4_IO1_Msk     (0x1U << TSC_IOSCR_G4_IO1_Pos)                /*!< 0x00001000 */
N#define TSC_IOSCR_G4_IO1         TSC_IOSCR_G4_IO1_Msk                          /*!<GROUP4_IO1 sampling mode */
N#define TSC_IOSCR_G4_IO2_Pos     (13U)                                         
N#define TSC_IOSCR_G4_IO2_Msk     (0x1U << TSC_IOSCR_G4_IO2_Pos)                /*!< 0x00002000 */
N#define TSC_IOSCR_G4_IO2         TSC_IOSCR_G4_IO2_Msk                          /*!<GROUP4_IO2 sampling mode */
N#define TSC_IOSCR_G4_IO3_Pos     (14U)                                         
N#define TSC_IOSCR_G4_IO3_Msk     (0x1U << TSC_IOSCR_G4_IO3_Pos)                /*!< 0x00004000 */
N#define TSC_IOSCR_G4_IO3         TSC_IOSCR_G4_IO3_Msk                          /*!<GROUP4_IO3 sampling mode */
N#define TSC_IOSCR_G4_IO4_Pos     (15U)                                         
N#define TSC_IOSCR_G4_IO4_Msk     (0x1U << TSC_IOSCR_G4_IO4_Pos)                /*!< 0x00008000 */
N#define TSC_IOSCR_G4_IO4         TSC_IOSCR_G4_IO4_Msk                          /*!<GROUP4_IO4 sampling mode */
N#define TSC_IOSCR_G5_IO1_Pos     (16U)                                         
N#define TSC_IOSCR_G5_IO1_Msk     (0x1U << TSC_IOSCR_G5_IO1_Pos)                /*!< 0x00010000 */
N#define TSC_IOSCR_G5_IO1         TSC_IOSCR_G5_IO1_Msk                          /*!<GROUP5_IO1 sampling mode */
N#define TSC_IOSCR_G5_IO2_Pos     (17U)                                         
N#define TSC_IOSCR_G5_IO2_Msk     (0x1U << TSC_IOSCR_G5_IO2_Pos)                /*!< 0x00020000 */
N#define TSC_IOSCR_G5_IO2         TSC_IOSCR_G5_IO2_Msk                          /*!<GROUP5_IO2 sampling mode */
N#define TSC_IOSCR_G5_IO3_Pos     (18U)                                         
N#define TSC_IOSCR_G5_IO3_Msk     (0x1U << TSC_IOSCR_G5_IO3_Pos)                /*!< 0x00040000 */
N#define TSC_IOSCR_G5_IO3         TSC_IOSCR_G5_IO3_Msk                          /*!<GROUP5_IO3 sampling mode */
N#define TSC_IOSCR_G5_IO4_Pos     (19U)                                         
N#define TSC_IOSCR_G5_IO4_Msk     (0x1U << TSC_IOSCR_G5_IO4_Pos)                /*!< 0x00080000 */
N#define TSC_IOSCR_G5_IO4         TSC_IOSCR_G5_IO4_Msk                          /*!<GROUP5_IO4 sampling mode */
N#define TSC_IOSCR_G6_IO1_Pos     (20U)                                         
N#define TSC_IOSCR_G6_IO1_Msk     (0x1U << TSC_IOSCR_G6_IO1_Pos)                /*!< 0x00100000 */
N#define TSC_IOSCR_G6_IO1         TSC_IOSCR_G6_IO1_Msk                          /*!<GROUP6_IO1 sampling mode */
N#define TSC_IOSCR_G6_IO2_Pos     (21U)                                         
N#define TSC_IOSCR_G6_IO2_Msk     (0x1U << TSC_IOSCR_G6_IO2_Pos)                /*!< 0x00200000 */
N#define TSC_IOSCR_G6_IO2         TSC_IOSCR_G6_IO2_Msk                          /*!<GROUP6_IO2 sampling mode */
N#define TSC_IOSCR_G6_IO3_Pos     (22U)                                         
N#define TSC_IOSCR_G6_IO3_Msk     (0x1U << TSC_IOSCR_G6_IO3_Pos)                /*!< 0x00400000 */
N#define TSC_IOSCR_G6_IO3         TSC_IOSCR_G6_IO3_Msk                          /*!<GROUP6_IO3 sampling mode */
N#define TSC_IOSCR_G6_IO4_Pos     (23U)                                         
N#define TSC_IOSCR_G6_IO4_Msk     (0x1U << TSC_IOSCR_G6_IO4_Pos)                /*!< 0x00800000 */
N#define TSC_IOSCR_G6_IO4         TSC_IOSCR_G6_IO4_Msk                          /*!<GROUP6_IO4 sampling mode */
N#define TSC_IOSCR_G7_IO1_Pos     (24U)                                         
N#define TSC_IOSCR_G7_IO1_Msk     (0x1U << TSC_IOSCR_G7_IO1_Pos)                /*!< 0x01000000 */
N#define TSC_IOSCR_G7_IO1         TSC_IOSCR_G7_IO1_Msk                          /*!<GROUP7_IO1 sampling mode */
N#define TSC_IOSCR_G7_IO2_Pos     (25U)                                         
N#define TSC_IOSCR_G7_IO2_Msk     (0x1U << TSC_IOSCR_G7_IO2_Pos)                /*!< 0x02000000 */
N#define TSC_IOSCR_G7_IO2         TSC_IOSCR_G7_IO2_Msk                          /*!<GROUP7_IO2 sampling mode */
N#define TSC_IOSCR_G7_IO3_Pos     (26U)                                         
N#define TSC_IOSCR_G7_IO3_Msk     (0x1U << TSC_IOSCR_G7_IO3_Pos)                /*!< 0x04000000 */
N#define TSC_IOSCR_G7_IO3         TSC_IOSCR_G7_IO3_Msk                          /*!<GROUP7_IO3 sampling mode */
N#define TSC_IOSCR_G7_IO4_Pos     (27U)                                         
N#define TSC_IOSCR_G7_IO4_Msk     (0x1U << TSC_IOSCR_G7_IO4_Pos)                /*!< 0x08000000 */
N#define TSC_IOSCR_G7_IO4         TSC_IOSCR_G7_IO4_Msk                          /*!<GROUP7_IO4 sampling mode */
N#define TSC_IOSCR_G8_IO1_Pos     (28U)                                         
N#define TSC_IOSCR_G8_IO1_Msk     (0x1U << TSC_IOSCR_G8_IO1_Pos)                /*!< 0x10000000 */
N#define TSC_IOSCR_G8_IO1         TSC_IOSCR_G8_IO1_Msk                          /*!<GROUP8_IO1 sampling mode */
N#define TSC_IOSCR_G8_IO2_Pos     (29U)                                         
N#define TSC_IOSCR_G8_IO2_Msk     (0x1U << TSC_IOSCR_G8_IO2_Pos)                /*!< 0x20000000 */
N#define TSC_IOSCR_G8_IO2         TSC_IOSCR_G8_IO2_Msk                          /*!<GROUP8_IO2 sampling mode */
N#define TSC_IOSCR_G8_IO3_Pos     (30U)                                         
N#define TSC_IOSCR_G8_IO3_Msk     (0x1U << TSC_IOSCR_G8_IO3_Pos)                /*!< 0x40000000 */
N#define TSC_IOSCR_G8_IO3         TSC_IOSCR_G8_IO3_Msk                          /*!<GROUP8_IO3 sampling mode */
N#define TSC_IOSCR_G8_IO4_Pos     (31U)                                         
N#define TSC_IOSCR_G8_IO4_Msk     (0x1U << TSC_IOSCR_G8_IO4_Pos)                /*!< 0x80000000 */
N#define TSC_IOSCR_G8_IO4         TSC_IOSCR_G8_IO4_Msk                          /*!<GROUP8_IO4 sampling mode */
N
N/*******************  Bit definition for TSC_IOCCR register  ******************/
N#define TSC_IOCCR_G1_IO1_Pos     (0U)                                          
N#define TSC_IOCCR_G1_IO1_Msk     (0x1U << TSC_IOCCR_G1_IO1_Pos)                /*!< 0x00000001 */
N#define TSC_IOCCR_G1_IO1         TSC_IOCCR_G1_IO1_Msk                          /*!<GROUP1_IO1 channel mode */
N#define TSC_IOCCR_G1_IO2_Pos     (1U)                                          
N#define TSC_IOCCR_G1_IO2_Msk     (0x1U << TSC_IOCCR_G1_IO2_Pos)                /*!< 0x00000002 */
N#define TSC_IOCCR_G1_IO2         TSC_IOCCR_G1_IO2_Msk                          /*!<GROUP1_IO2 channel mode */
N#define TSC_IOCCR_G1_IO3_Pos     (2U)                                          
N#define TSC_IOCCR_G1_IO3_Msk     (0x1U << TSC_IOCCR_G1_IO3_Pos)                /*!< 0x00000004 */
N#define TSC_IOCCR_G1_IO3         TSC_IOCCR_G1_IO3_Msk                          /*!<GROUP1_IO3 channel mode */
N#define TSC_IOCCR_G1_IO4_Pos     (3U)                                          
N#define TSC_IOCCR_G1_IO4_Msk     (0x1U << TSC_IOCCR_G1_IO4_Pos)                /*!< 0x00000008 */
N#define TSC_IOCCR_G1_IO4         TSC_IOCCR_G1_IO4_Msk                          /*!<GROUP1_IO4 channel mode */
N#define TSC_IOCCR_G2_IO1_Pos     (4U)                                          
N#define TSC_IOCCR_G2_IO1_Msk     (0x1U << TSC_IOCCR_G2_IO1_Pos)                /*!< 0x00000010 */
N#define TSC_IOCCR_G2_IO1         TSC_IOCCR_G2_IO1_Msk                          /*!<GROUP2_IO1 channel mode */
N#define TSC_IOCCR_G2_IO2_Pos     (5U)                                          
N#define TSC_IOCCR_G2_IO2_Msk     (0x1U << TSC_IOCCR_G2_IO2_Pos)                /*!< 0x00000020 */
N#define TSC_IOCCR_G2_IO2         TSC_IOCCR_G2_IO2_Msk                          /*!<GROUP2_IO2 channel mode */
N#define TSC_IOCCR_G2_IO3_Pos     (6U)                                          
N#define TSC_IOCCR_G2_IO3_Msk     (0x1U << TSC_IOCCR_G2_IO3_Pos)                /*!< 0x00000040 */
N#define TSC_IOCCR_G2_IO3         TSC_IOCCR_G2_IO3_Msk                          /*!<GROUP2_IO3 channel mode */
N#define TSC_IOCCR_G2_IO4_Pos     (7U)                                          
N#define TSC_IOCCR_G2_IO4_Msk     (0x1U << TSC_IOCCR_G2_IO4_Pos)                /*!< 0x00000080 */
N#define TSC_IOCCR_G2_IO4         TSC_IOCCR_G2_IO4_Msk                          /*!<GROUP2_IO4 channel mode */
N#define TSC_IOCCR_G3_IO1_Pos     (8U)                                          
N#define TSC_IOCCR_G3_IO1_Msk     (0x1U << TSC_IOCCR_G3_IO1_Pos)                /*!< 0x00000100 */
N#define TSC_IOCCR_G3_IO1         TSC_IOCCR_G3_IO1_Msk                          /*!<GROUP3_IO1 channel mode */
N#define TSC_IOCCR_G3_IO2_Pos     (9U)                                          
N#define TSC_IOCCR_G3_IO2_Msk     (0x1U << TSC_IOCCR_G3_IO2_Pos)                /*!< 0x00000200 */
N#define TSC_IOCCR_G3_IO2         TSC_IOCCR_G3_IO2_Msk                          /*!<GROUP3_IO2 channel mode */
N#define TSC_IOCCR_G3_IO3_Pos     (10U)                                         
N#define TSC_IOCCR_G3_IO3_Msk     (0x1U << TSC_IOCCR_G3_IO3_Pos)                /*!< 0x00000400 */
N#define TSC_IOCCR_G3_IO3         TSC_IOCCR_G3_IO3_Msk                          /*!<GROUP3_IO3 channel mode */
N#define TSC_IOCCR_G3_IO4_Pos     (11U)                                         
N#define TSC_IOCCR_G3_IO4_Msk     (0x1U << TSC_IOCCR_G3_IO4_Pos)                /*!< 0x00000800 */
N#define TSC_IOCCR_G3_IO4         TSC_IOCCR_G3_IO4_Msk                          /*!<GROUP3_IO4 channel mode */
N#define TSC_IOCCR_G4_IO1_Pos     (12U)                                         
N#define TSC_IOCCR_G4_IO1_Msk     (0x1U << TSC_IOCCR_G4_IO1_Pos)                /*!< 0x00001000 */
N#define TSC_IOCCR_G4_IO1         TSC_IOCCR_G4_IO1_Msk                          /*!<GROUP4_IO1 channel mode */
N#define TSC_IOCCR_G4_IO2_Pos     (13U)                                         
N#define TSC_IOCCR_G4_IO2_Msk     (0x1U << TSC_IOCCR_G4_IO2_Pos)                /*!< 0x00002000 */
N#define TSC_IOCCR_G4_IO2         TSC_IOCCR_G4_IO2_Msk                          /*!<GROUP4_IO2 channel mode */
N#define TSC_IOCCR_G4_IO3_Pos     (14U)                                         
N#define TSC_IOCCR_G4_IO3_Msk     (0x1U << TSC_IOCCR_G4_IO3_Pos)                /*!< 0x00004000 */
N#define TSC_IOCCR_G4_IO3         TSC_IOCCR_G4_IO3_Msk                          /*!<GROUP4_IO3 channel mode */
N#define TSC_IOCCR_G4_IO4_Pos     (15U)                                         
N#define TSC_IOCCR_G4_IO4_Msk     (0x1U << TSC_IOCCR_G4_IO4_Pos)                /*!< 0x00008000 */
N#define TSC_IOCCR_G4_IO4         TSC_IOCCR_G4_IO4_Msk                          /*!<GROUP4_IO4 channel mode */
N#define TSC_IOCCR_G5_IO1_Pos     (16U)                                         
N#define TSC_IOCCR_G5_IO1_Msk     (0x1U << TSC_IOCCR_G5_IO1_Pos)                /*!< 0x00010000 */
N#define TSC_IOCCR_G5_IO1         TSC_IOCCR_G5_IO1_Msk                          /*!<GROUP5_IO1 channel mode */
N#define TSC_IOCCR_G5_IO2_Pos     (17U)                                         
N#define TSC_IOCCR_G5_IO2_Msk     (0x1U << TSC_IOCCR_G5_IO2_Pos)                /*!< 0x00020000 */
N#define TSC_IOCCR_G5_IO2         TSC_IOCCR_G5_IO2_Msk                          /*!<GROUP5_IO2 channel mode */
N#define TSC_IOCCR_G5_IO3_Pos     (18U)                                         
N#define TSC_IOCCR_G5_IO3_Msk     (0x1U << TSC_IOCCR_G5_IO3_Pos)                /*!< 0x00040000 */
N#define TSC_IOCCR_G5_IO3         TSC_IOCCR_G5_IO3_Msk                          /*!<GROUP5_IO3 channel mode */
N#define TSC_IOCCR_G5_IO4_Pos     (19U)                                         
N#define TSC_IOCCR_G5_IO4_Msk     (0x1U << TSC_IOCCR_G5_IO4_Pos)                /*!< 0x00080000 */
N#define TSC_IOCCR_G5_IO4         TSC_IOCCR_G5_IO4_Msk                          /*!<GROUP5_IO4 channel mode */
N#define TSC_IOCCR_G6_IO1_Pos     (20U)                                         
N#define TSC_IOCCR_G6_IO1_Msk     (0x1U << TSC_IOCCR_G6_IO1_Pos)                /*!< 0x00100000 */
N#define TSC_IOCCR_G6_IO1         TSC_IOCCR_G6_IO1_Msk                          /*!<GROUP6_IO1 channel mode */
N#define TSC_IOCCR_G6_IO2_Pos     (21U)                                         
N#define TSC_IOCCR_G6_IO2_Msk     (0x1U << TSC_IOCCR_G6_IO2_Pos)                /*!< 0x00200000 */
N#define TSC_IOCCR_G6_IO2         TSC_IOCCR_G6_IO2_Msk                          /*!<GROUP6_IO2 channel mode */
N#define TSC_IOCCR_G6_IO3_Pos     (22U)                                         
N#define TSC_IOCCR_G6_IO3_Msk     (0x1U << TSC_IOCCR_G6_IO3_Pos)                /*!< 0x00400000 */
N#define TSC_IOCCR_G6_IO3         TSC_IOCCR_G6_IO3_Msk                          /*!<GROUP6_IO3 channel mode */
N#define TSC_IOCCR_G6_IO4_Pos     (23U)                                         
N#define TSC_IOCCR_G6_IO4_Msk     (0x1U << TSC_IOCCR_G6_IO4_Pos)                /*!< 0x00800000 */
N#define TSC_IOCCR_G6_IO4         TSC_IOCCR_G6_IO4_Msk                          /*!<GROUP6_IO4 channel mode */
N#define TSC_IOCCR_G7_IO1_Pos     (24U)                                         
N#define TSC_IOCCR_G7_IO1_Msk     (0x1U << TSC_IOCCR_G7_IO1_Pos)                /*!< 0x01000000 */
N#define TSC_IOCCR_G7_IO1         TSC_IOCCR_G7_IO1_Msk                          /*!<GROUP7_IO1 channel mode */
N#define TSC_IOCCR_G7_IO2_Pos     (25U)                                         
N#define TSC_IOCCR_G7_IO2_Msk     (0x1U << TSC_IOCCR_G7_IO2_Pos)                /*!< 0x02000000 */
N#define TSC_IOCCR_G7_IO2         TSC_IOCCR_G7_IO2_Msk                          /*!<GROUP7_IO2 channel mode */
N#define TSC_IOCCR_G7_IO3_Pos     (26U)                                         
N#define TSC_IOCCR_G7_IO3_Msk     (0x1U << TSC_IOCCR_G7_IO3_Pos)                /*!< 0x04000000 */
N#define TSC_IOCCR_G7_IO3         TSC_IOCCR_G7_IO3_Msk                          /*!<GROUP7_IO3 channel mode */
N#define TSC_IOCCR_G7_IO4_Pos     (27U)                                         
N#define TSC_IOCCR_G7_IO4_Msk     (0x1U << TSC_IOCCR_G7_IO4_Pos)                /*!< 0x08000000 */
N#define TSC_IOCCR_G7_IO4         TSC_IOCCR_G7_IO4_Msk                          /*!<GROUP7_IO4 channel mode */
N#define TSC_IOCCR_G8_IO1_Pos     (28U)                                         
N#define TSC_IOCCR_G8_IO1_Msk     (0x1U << TSC_IOCCR_G8_IO1_Pos)                /*!< 0x10000000 */
N#define TSC_IOCCR_G8_IO1         TSC_IOCCR_G8_IO1_Msk                          /*!<GROUP8_IO1 channel mode */
N#define TSC_IOCCR_G8_IO2_Pos     (29U)                                         
N#define TSC_IOCCR_G8_IO2_Msk     (0x1U << TSC_IOCCR_G8_IO2_Pos)                /*!< 0x20000000 */
N#define TSC_IOCCR_G8_IO2         TSC_IOCCR_G8_IO2_Msk                          /*!<GROUP8_IO2 channel mode */
N#define TSC_IOCCR_G8_IO3_Pos     (30U)                                         
N#define TSC_IOCCR_G8_IO3_Msk     (0x1U << TSC_IOCCR_G8_IO3_Pos)                /*!< 0x40000000 */
N#define TSC_IOCCR_G8_IO3         TSC_IOCCR_G8_IO3_Msk                          /*!<GROUP8_IO3 channel mode */
N#define TSC_IOCCR_G8_IO4_Pos     (31U)                                         
N#define TSC_IOCCR_G8_IO4_Msk     (0x1U << TSC_IOCCR_G8_IO4_Pos)                /*!< 0x80000000 */
N#define TSC_IOCCR_G8_IO4         TSC_IOCCR_G8_IO4_Msk                          /*!<GROUP8_IO4 channel mode */
N
N/*******************  Bit definition for TSC_IOGCSR register  *****************/
N#define TSC_IOGCSR_G1E_Pos       (0U)                                          
N#define TSC_IOGCSR_G1E_Msk       (0x1U << TSC_IOGCSR_G1E_Pos)                  /*!< 0x00000001 */
N#define TSC_IOGCSR_G1E           TSC_IOGCSR_G1E_Msk                            /*!<Analog IO GROUP1 enable */
N#define TSC_IOGCSR_G2E_Pos       (1U)                                          
N#define TSC_IOGCSR_G2E_Msk       (0x1U << TSC_IOGCSR_G2E_Pos)                  /*!< 0x00000002 */
N#define TSC_IOGCSR_G2E           TSC_IOGCSR_G2E_Msk                            /*!<Analog IO GROUP2 enable */
N#define TSC_IOGCSR_G3E_Pos       (2U)                                          
N#define TSC_IOGCSR_G3E_Msk       (0x1U << TSC_IOGCSR_G3E_Pos)                  /*!< 0x00000004 */
N#define TSC_IOGCSR_G3E           TSC_IOGCSR_G3E_Msk                            /*!<Analog IO GROUP3 enable */
N#define TSC_IOGCSR_G4E_Pos       (3U)                                          
N#define TSC_IOGCSR_G4E_Msk       (0x1U << TSC_IOGCSR_G4E_Pos)                  /*!< 0x00000008 */
N#define TSC_IOGCSR_G4E           TSC_IOGCSR_G4E_Msk                            /*!<Analog IO GROUP4 enable */
N#define TSC_IOGCSR_G5E_Pos       (4U)                                          
N#define TSC_IOGCSR_G5E_Msk       (0x1U << TSC_IOGCSR_G5E_Pos)                  /*!< 0x00000010 */
N#define TSC_IOGCSR_G5E           TSC_IOGCSR_G5E_Msk                            /*!<Analog IO GROUP5 enable */
N#define TSC_IOGCSR_G6E_Pos       (5U)                                          
N#define TSC_IOGCSR_G6E_Msk       (0x1U << TSC_IOGCSR_G6E_Pos)                  /*!< 0x00000020 */
N#define TSC_IOGCSR_G6E           TSC_IOGCSR_G6E_Msk                            /*!<Analog IO GROUP6 enable */
N#define TSC_IOGCSR_G7E_Pos       (6U)                                          
N#define TSC_IOGCSR_G7E_Msk       (0x1U << TSC_IOGCSR_G7E_Pos)                  /*!< 0x00000040 */
N#define TSC_IOGCSR_G7E           TSC_IOGCSR_G7E_Msk                            /*!<Analog IO GROUP7 enable */
N#define TSC_IOGCSR_G8E_Pos       (7U)                                          
N#define TSC_IOGCSR_G8E_Msk       (0x1U << TSC_IOGCSR_G8E_Pos)                  /*!< 0x00000080 */
N#define TSC_IOGCSR_G8E           TSC_IOGCSR_G8E_Msk                            /*!<Analog IO GROUP8 enable */
N#define TSC_IOGCSR_G1S_Pos       (16U)                                         
N#define TSC_IOGCSR_G1S_Msk       (0x1U << TSC_IOGCSR_G1S_Pos)                  /*!< 0x00010000 */
N#define TSC_IOGCSR_G1S           TSC_IOGCSR_G1S_Msk                            /*!<Analog IO GROUP1 status */
N#define TSC_IOGCSR_G2S_Pos       (17U)                                         
N#define TSC_IOGCSR_G2S_Msk       (0x1U << TSC_IOGCSR_G2S_Pos)                  /*!< 0x00020000 */
N#define TSC_IOGCSR_G2S           TSC_IOGCSR_G2S_Msk                            /*!<Analog IO GROUP2 status */
N#define TSC_IOGCSR_G3S_Pos       (18U)                                         
N#define TSC_IOGCSR_G3S_Msk       (0x1U << TSC_IOGCSR_G3S_Pos)                  /*!< 0x00040000 */
N#define TSC_IOGCSR_G3S           TSC_IOGCSR_G3S_Msk                            /*!<Analog IO GROUP3 status */
N#define TSC_IOGCSR_G4S_Pos       (19U)                                         
N#define TSC_IOGCSR_G4S_Msk       (0x1U << TSC_IOGCSR_G4S_Pos)                  /*!< 0x00080000 */
N#define TSC_IOGCSR_G4S           TSC_IOGCSR_G4S_Msk                            /*!<Analog IO GROUP4 status */
N#define TSC_IOGCSR_G5S_Pos       (20U)                                         
N#define TSC_IOGCSR_G5S_Msk       (0x1U << TSC_IOGCSR_G5S_Pos)                  /*!< 0x00100000 */
N#define TSC_IOGCSR_G5S           TSC_IOGCSR_G5S_Msk                            /*!<Analog IO GROUP5 status */
N#define TSC_IOGCSR_G6S_Pos       (21U)                                         
N#define TSC_IOGCSR_G6S_Msk       (0x1U << TSC_IOGCSR_G6S_Pos)                  /*!< 0x00200000 */
N#define TSC_IOGCSR_G6S           TSC_IOGCSR_G6S_Msk                            /*!<Analog IO GROUP6 status */
N#define TSC_IOGCSR_G7S_Pos       (22U)                                         
N#define TSC_IOGCSR_G7S_Msk       (0x1U << TSC_IOGCSR_G7S_Pos)                  /*!< 0x00400000 */
N#define TSC_IOGCSR_G7S           TSC_IOGCSR_G7S_Msk                            /*!<Analog IO GROUP7 status */
N#define TSC_IOGCSR_G8S_Pos       (23U)                                         
N#define TSC_IOGCSR_G8S_Msk       (0x1U << TSC_IOGCSR_G8S_Pos)                  /*!< 0x00800000 */
N#define TSC_IOGCSR_G8S           TSC_IOGCSR_G8S_Msk                            /*!<Analog IO GROUP8 status */
N
N/*******************  Bit definition for TSC_IOGXCR register  *****************/
N#define TSC_IOGXCR_CNT_Pos       (0U)                                          
N#define TSC_IOGXCR_CNT_Msk       (0x3FFFU << TSC_IOGXCR_CNT_Pos)               /*!< 0x00003FFF */
N#define TSC_IOGXCR_CNT           TSC_IOGXCR_CNT_Msk                            /*!<CNT[13:0] bits (Counter value) */
N
N/******************************************************************************/
N/*                                                                            */
N/*      Universal Synchronous Asynchronous Receiver Transmitter (USART)       */
N/*                                                                            */
N/******************************************************************************/
N
N/*
N * @brief Specific device feature definitions (not present on all devices in the STM32L0 family)
N */
N/* Note: No specific macro feature on this device */
N
N/******************  Bit definition for USART_CR1 register  *******************/
N#define USART_CR1_UE_Pos              (0U)                                     
N#define USART_CR1_UE_Msk              (0x1U << USART_CR1_UE_Pos)               /*!< 0x00000001 */
N#define USART_CR1_UE                  USART_CR1_UE_Msk                         /*!< USART Enable */
N#define USART_CR1_UESM_Pos            (1U)                                     
N#define USART_CR1_UESM_Msk            (0x1U << USART_CR1_UESM_Pos)             /*!< 0x00000002 */
N#define USART_CR1_UESM                USART_CR1_UESM_Msk                       /*!< USART Enable in STOP Mode */
N#define USART_CR1_RE_Pos              (2U)                                     
N#define USART_CR1_RE_Msk              (0x1U << USART_CR1_RE_Pos)               /*!< 0x00000004 */
N#define USART_CR1_RE                  USART_CR1_RE_Msk                         /*!< Receiver Enable */
N#define USART_CR1_TE_Pos              (3U)                                     
N#define USART_CR1_TE_Msk              (0x1U << USART_CR1_TE_Pos)               /*!< 0x00000008 */
N#define USART_CR1_TE                  USART_CR1_TE_Msk                         /*!< Transmitter Enable */
N#define USART_CR1_IDLEIE_Pos          (4U)                                     
N#define USART_CR1_IDLEIE_Msk          (0x1U << USART_CR1_IDLEIE_Pos)           /*!< 0x00000010 */
N#define USART_CR1_IDLEIE              USART_CR1_IDLEIE_Msk                     /*!< IDLE Interrupt Enable */
N#define USART_CR1_RXNEIE_Pos          (5U)                                     
N#define USART_CR1_RXNEIE_Msk          (0x1U << USART_CR1_RXNEIE_Pos)           /*!< 0x00000020 */
N#define USART_CR1_RXNEIE              USART_CR1_RXNEIE_Msk                     /*!< RXNE Interrupt Enable */
N#define USART_CR1_TCIE_Pos            (6U)                                     
N#define USART_CR1_TCIE_Msk            (0x1U << USART_CR1_TCIE_Pos)             /*!< 0x00000040 */
N#define USART_CR1_TCIE                USART_CR1_TCIE_Msk                       /*!< Transmission Complete Interrupt Enable */
N#define USART_CR1_TXEIE_Pos           (7U)                                     
N#define USART_CR1_TXEIE_Msk           (0x1U << USART_CR1_TXEIE_Pos)            /*!< 0x00000080 */
N#define USART_CR1_TXEIE               USART_CR1_TXEIE_Msk                      /*!< TXE Interrupt Enable */
N#define USART_CR1_PEIE_Pos            (8U)                                     
N#define USART_CR1_PEIE_Msk            (0x1U << USART_CR1_PEIE_Pos)             /*!< 0x00000100 */
N#define USART_CR1_PEIE                USART_CR1_PEIE_Msk                       /*!< PE Interrupt Enable */
N#define USART_CR1_PS_Pos              (9U)                                     
N#define USART_CR1_PS_Msk              (0x1U << USART_CR1_PS_Pos)               /*!< 0x00000200 */
N#define USART_CR1_PS                  USART_CR1_PS_Msk                         /*!< Parity Selection */
N#define USART_CR1_PCE_Pos             (10U)                                    
N#define USART_CR1_PCE_Msk             (0x1U << USART_CR1_PCE_Pos)              /*!< 0x00000400 */
N#define USART_CR1_PCE                 USART_CR1_PCE_Msk                        /*!< Parity Control Enable */
N#define USART_CR1_WAKE_Pos            (11U)                                    
N#define USART_CR1_WAKE_Msk            (0x1U << USART_CR1_WAKE_Pos)             /*!< 0x00000800 */
N#define USART_CR1_WAKE                USART_CR1_WAKE_Msk                       /*!< Receiver Wakeup method */
N#define USART_CR1_M_Pos               (12U)                                    
N#define USART_CR1_M_Msk               (0x10001U << USART_CR1_M_Pos)            /*!< 0x10001000 */
N#define USART_CR1_M                   USART_CR1_M_Msk                          /*!< Word length */
N#define USART_CR1_M0_Pos              (12U)                                    
N#define USART_CR1_M0_Msk              (0x1U << USART_CR1_M0_Pos)               /*!< 0x00001000 */
N#define USART_CR1_M0                  USART_CR1_M0_Msk                         /*!< Word length - Bit 0 */
N#define USART_CR1_MME_Pos             (13U)                                    
N#define USART_CR1_MME_Msk             (0x1U << USART_CR1_MME_Pos)              /*!< 0x00002000 */
N#define USART_CR1_MME                 USART_CR1_MME_Msk                        /*!< Mute Mode Enable */
N#define USART_CR1_CMIE_Pos            (14U)                                    
N#define USART_CR1_CMIE_Msk            (0x1U << USART_CR1_CMIE_Pos)             /*!< 0x00004000 */
N#define USART_CR1_CMIE                USART_CR1_CMIE_Msk                       /*!< Character match interrupt enable */
N#define USART_CR1_OVER8_Pos           (15U)                                    
N#define USART_CR1_OVER8_Msk           (0x1U << USART_CR1_OVER8_Pos)            /*!< 0x00008000 */
N#define USART_CR1_OVER8               USART_CR1_OVER8_Msk                      /*!< Oversampling by 8-bit or 16-bit mode */
N#define USART_CR1_DEDT_Pos            (16U)                                    
N#define USART_CR1_DEDT_Msk            (0x1FU << USART_CR1_DEDT_Pos)            /*!< 0x001F0000 */
N#define USART_CR1_DEDT                USART_CR1_DEDT_Msk                       /*!< DEDT[4:0] bits (Driver Enable Deassertion Time) */
N#define USART_CR1_DEDT_0              (0x01U << USART_CR1_DEDT_Pos)            /*!< 0x00010000 */
N#define USART_CR1_DEDT_1              (0x02U << USART_CR1_DEDT_Pos)            /*!< 0x00020000 */
N#define USART_CR1_DEDT_2              (0x04U << USART_CR1_DEDT_Pos)            /*!< 0x00040000 */
N#define USART_CR1_DEDT_3              (0x08U << USART_CR1_DEDT_Pos)            /*!< 0x00080000 */
N#define USART_CR1_DEDT_4              (0x10U << USART_CR1_DEDT_Pos)            /*!< 0x00100000 */
N#define USART_CR1_DEAT_Pos            (21U)                                    
N#define USART_CR1_DEAT_Msk            (0x1FU << USART_CR1_DEAT_Pos)            /*!< 0x03E00000 */
N#define USART_CR1_DEAT                USART_CR1_DEAT_Msk                       /*!< DEAT[4:0] bits (Driver Enable Assertion Time) */
N#define USART_CR1_DEAT_0              (0x01U << USART_CR1_DEAT_Pos)            /*!< 0x00200000 */
N#define USART_CR1_DEAT_1              (0x02U << USART_CR1_DEAT_Pos)            /*!< 0x00400000 */
N#define USART_CR1_DEAT_2              (0x04U << USART_CR1_DEAT_Pos)            /*!< 0x00800000 */
N#define USART_CR1_DEAT_3              (0x08U << USART_CR1_DEAT_Pos)            /*!< 0x01000000 */
N#define USART_CR1_DEAT_4              (0x10U << USART_CR1_DEAT_Pos)            /*!< 0x02000000 */
N#define USART_CR1_RTOIE_Pos           (26U)                                    
N#define USART_CR1_RTOIE_Msk           (0x1U << USART_CR1_RTOIE_Pos)            /*!< 0x04000000 */
N#define USART_CR1_RTOIE               USART_CR1_RTOIE_Msk                      /*!< Receive Time Out interrupt enable */
N#define USART_CR1_EOBIE_Pos           (27U)                                    
N#define USART_CR1_EOBIE_Msk           (0x1U << USART_CR1_EOBIE_Pos)            /*!< 0x08000000 */
N#define USART_CR1_EOBIE               USART_CR1_EOBIE_Msk                      /*!< End of Block interrupt enable */
N#define USART_CR1_M1_Pos              (28U)                                    
N#define USART_CR1_M1_Msk              (0x1U << USART_CR1_M1_Pos)               /*!< 0x10000000 */
N#define USART_CR1_M1                  USART_CR1_M1_Msk                         /*!< Word length - Bit 1 */
N/******************  Bit definition for USART_CR2 register  *******************/
N#define USART_CR2_ADDM7_Pos           (4U)                                     
N#define USART_CR2_ADDM7_Msk           (0x1U << USART_CR2_ADDM7_Pos)            /*!< 0x00000010 */
N#define USART_CR2_ADDM7               USART_CR2_ADDM7_Msk                      /*!< 7-bit or 4-bit Address Detection */
N#define USART_CR2_LBDL_Pos            (5U)                                     
N#define USART_CR2_LBDL_Msk            (0x1U << USART_CR2_LBDL_Pos)             /*!< 0x00000020 */
N#define USART_CR2_LBDL                USART_CR2_LBDL_Msk                       /*!< LIN Break Detection Length */
N#define USART_CR2_LBDIE_Pos           (6U)                                     
N#define USART_CR2_LBDIE_Msk           (0x1U << USART_CR2_LBDIE_Pos)            /*!< 0x00000040 */
N#define USART_CR2_LBDIE               USART_CR2_LBDIE_Msk                      /*!< LIN Break Detection Interrupt Enable */
N#define USART_CR2_LBCL_Pos            (8U)                                     
N#define USART_CR2_LBCL_Msk            (0x1U << USART_CR2_LBCL_Pos)             /*!< 0x00000100 */
N#define USART_CR2_LBCL                USART_CR2_LBCL_Msk                       /*!< Last Bit Clock pulse */
N#define USART_CR2_CPHA_Pos            (9U)                                     
N#define USART_CR2_CPHA_Msk            (0x1U << USART_CR2_CPHA_Pos)             /*!< 0x00000200 */
N#define USART_CR2_CPHA                USART_CR2_CPHA_Msk                       /*!< Clock Phase */
N#define USART_CR2_CPOL_Pos            (10U)                                    
N#define USART_CR2_CPOL_Msk            (0x1U << USART_CR2_CPOL_Pos)             /*!< 0x00000400 */
N#define USART_CR2_CPOL                USART_CR2_CPOL_Msk                       /*!< Clock Polarity */
N#define USART_CR2_CLKEN_Pos           (11U)                                    
N#define USART_CR2_CLKEN_Msk           (0x1U << USART_CR2_CLKEN_Pos)            /*!< 0x00000800 */
N#define USART_CR2_CLKEN               USART_CR2_CLKEN_Msk                      /*!< Clock Enable */
N#define USART_CR2_STOP_Pos            (12U)                                    
N#define USART_CR2_STOP_Msk            (0x3U << USART_CR2_STOP_Pos)             /*!< 0x00003000 */
N#define USART_CR2_STOP                USART_CR2_STOP_Msk                       /*!< STOP[1:0] bits (STOP bits) */
N#define USART_CR2_STOP_0              (0x1U << USART_CR2_STOP_Pos)             /*!< 0x00001000 */
N#define USART_CR2_STOP_1              (0x2U << USART_CR2_STOP_Pos)             /*!< 0x00002000 */
N#define USART_CR2_LINEN_Pos           (14U)                                    
N#define USART_CR2_LINEN_Msk           (0x1U << USART_CR2_LINEN_Pos)            /*!< 0x00004000 */
N#define USART_CR2_LINEN               USART_CR2_LINEN_Msk                      /*!< LIN mode enable */
N#define USART_CR2_SWAP_Pos            (15U)                                    
N#define USART_CR2_SWAP_Msk            (0x1U << USART_CR2_SWAP_Pos)             /*!< 0x00008000 */
N#define USART_CR2_SWAP                USART_CR2_SWAP_Msk                       /*!< SWAP TX/RX pins */
N#define USART_CR2_RXINV_Pos           (16U)                                    
N#define USART_CR2_RXINV_Msk           (0x1U << USART_CR2_RXINV_Pos)            /*!< 0x00010000 */
N#define USART_CR2_RXINV               USART_CR2_RXINV_Msk                      /*!< RX pin active level inversion */
N#define USART_CR2_TXINV_Pos           (17U)                                    
N#define USART_CR2_TXINV_Msk           (0x1U << USART_CR2_TXINV_Pos)            /*!< 0x00020000 */
N#define USART_CR2_TXINV               USART_CR2_TXINV_Msk                      /*!< TX pin active level inversion */
N#define USART_CR2_DATAINV_Pos         (18U)                                    
N#define USART_CR2_DATAINV_Msk         (0x1U << USART_CR2_DATAINV_Pos)          /*!< 0x00040000 */
N#define USART_CR2_DATAINV             USART_CR2_DATAINV_Msk                    /*!< Binary data inversion */
N#define USART_CR2_MSBFIRST_Pos        (19U)                                    
N#define USART_CR2_MSBFIRST_Msk        (0x1U << USART_CR2_MSBFIRST_Pos)         /*!< 0x00080000 */
N#define USART_CR2_MSBFIRST            USART_CR2_MSBFIRST_Msk                   /*!< Most Significant Bit First */
N#define USART_CR2_ABREN_Pos           (20U)                                    
N#define USART_CR2_ABREN_Msk           (0x1U << USART_CR2_ABREN_Pos)            /*!< 0x00100000 */
N#define USART_CR2_ABREN               USART_CR2_ABREN_Msk                      /*!< Auto Baud-Rate Enable*/
N#define USART_CR2_ABRMODE_Pos         (21U)                                    
N#define USART_CR2_ABRMODE_Msk         (0x3U << USART_CR2_ABRMODE_Pos)          /*!< 0x00600000 */
N#define USART_CR2_ABRMODE             USART_CR2_ABRMODE_Msk                    /*!< ABRMOD[1:0] bits (Auto Baud-Rate Mode) */
N#define USART_CR2_ABRMODE_0           (0x1U << USART_CR2_ABRMODE_Pos)          /*!< 0x00200000 */
N#define USART_CR2_ABRMODE_1           (0x2U << USART_CR2_ABRMODE_Pos)          /*!< 0x00400000 */
N#define USART_CR2_RTOEN_Pos           (23U)                                    
N#define USART_CR2_RTOEN_Msk           (0x1U << USART_CR2_RTOEN_Pos)            /*!< 0x00800000 */
N#define USART_CR2_RTOEN               USART_CR2_RTOEN_Msk                      /*!< Receiver Time-Out enable */
N#define USART_CR2_ADD_Pos             (24U)                                    
N#define USART_CR2_ADD_Msk             (0xFFU << USART_CR2_ADD_Pos)             /*!< 0xFF000000 */
N#define USART_CR2_ADD                 USART_CR2_ADD_Msk                        /*!< Address of the USART node */
N
N/******************  Bit definition for USART_CR3 register  *******************/
N#define USART_CR3_EIE_Pos             (0U)                                     
N#define USART_CR3_EIE_Msk             (0x1U << USART_CR3_EIE_Pos)              /*!< 0x00000001 */
N#define USART_CR3_EIE                 USART_CR3_EIE_Msk                        /*!< Error Interrupt Enable */
N#define USART_CR3_IREN_Pos            (1U)                                     
N#define USART_CR3_IREN_Msk            (0x1U << USART_CR3_IREN_Pos)             /*!< 0x00000002 */
N#define USART_CR3_IREN                USART_CR3_IREN_Msk                       /*!< IrDA mode Enable */
N#define USART_CR3_IRLP_Pos            (2U)                                     
N#define USART_CR3_IRLP_Msk            (0x1U << USART_CR3_IRLP_Pos)             /*!< 0x00000004 */
N#define USART_CR3_IRLP                USART_CR3_IRLP_Msk                       /*!< IrDA Low-Power */
N#define USART_CR3_HDSEL_Pos           (3U)                                     
N#define USART_CR3_HDSEL_Msk           (0x1U << USART_CR3_HDSEL_Pos)            /*!< 0x00000008 */
N#define USART_CR3_HDSEL               USART_CR3_HDSEL_Msk                      /*!< Half-Duplex Selection */
N#define USART_CR3_NACK_Pos            (4U)                                     
N#define USART_CR3_NACK_Msk            (0x1U << USART_CR3_NACK_Pos)             /*!< 0x00000010 */
N#define USART_CR3_NACK                USART_CR3_NACK_Msk                       /*!< SmartCard NACK enable */
N#define USART_CR3_SCEN_Pos            (5U)                                     
N#define USART_CR3_SCEN_Msk            (0x1U << USART_CR3_SCEN_Pos)             /*!< 0x00000020 */
N#define USART_CR3_SCEN                USART_CR3_SCEN_Msk                       /*!< SmartCard mode enable */
N#define USART_CR3_DMAR_Pos            (6U)                                     
N#define USART_CR3_DMAR_Msk            (0x1U << USART_CR3_DMAR_Pos)             /*!< 0x00000040 */
N#define USART_CR3_DMAR                USART_CR3_DMAR_Msk                       /*!< DMA Enable Receiver */
N#define USART_CR3_DMAT_Pos            (7U)                                     
N#define USART_CR3_DMAT_Msk            (0x1U << USART_CR3_DMAT_Pos)             /*!< 0x00000080 */
N#define USART_CR3_DMAT                USART_CR3_DMAT_Msk                       /*!< DMA Enable Transmitter */
N#define USART_CR3_RTSE_Pos            (8U)                                     
N#define USART_CR3_RTSE_Msk            (0x1U << USART_CR3_RTSE_Pos)             /*!< 0x00000100 */
N#define USART_CR3_RTSE                USART_CR3_RTSE_Msk                       /*!< RTS Enable */
N#define USART_CR3_CTSE_Pos            (9U)                                     
N#define USART_CR3_CTSE_Msk            (0x1U << USART_CR3_CTSE_Pos)             /*!< 0x00000200 */
N#define USART_CR3_CTSE                USART_CR3_CTSE_Msk                       /*!< CTS Enable */
N#define USART_CR3_CTSIE_Pos           (10U)                                    
N#define USART_CR3_CTSIE_Msk           (0x1U << USART_CR3_CTSIE_Pos)            /*!< 0x00000400 */
N#define USART_CR3_CTSIE               USART_CR3_CTSIE_Msk                      /*!< CTS Interrupt Enable */
N#define USART_CR3_ONEBIT_Pos          (11U)                                    
N#define USART_CR3_ONEBIT_Msk          (0x1U << USART_CR3_ONEBIT_Pos)           /*!< 0x00000800 */
N#define USART_CR3_ONEBIT              USART_CR3_ONEBIT_Msk                     /*!< One sample bit method enable */
N#define USART_CR3_OVRDIS_Pos          (12U)                                    
N#define USART_CR3_OVRDIS_Msk          (0x1U << USART_CR3_OVRDIS_Pos)           /*!< 0x00001000 */
N#define USART_CR3_OVRDIS              USART_CR3_OVRDIS_Msk                     /*!< Overrun Disable */
N#define USART_CR3_DDRE_Pos            (13U)                                    
N#define USART_CR3_DDRE_Msk            (0x1U << USART_CR3_DDRE_Pos)             /*!< 0x00002000 */
N#define USART_CR3_DDRE                USART_CR3_DDRE_Msk                       /*!< DMA Disable on Reception Error */
N#define USART_CR3_DEM_Pos             (14U)                                    
N#define USART_CR3_DEM_Msk             (0x1U << USART_CR3_DEM_Pos)              /*!< 0x00004000 */
N#define USART_CR3_DEM                 USART_CR3_DEM_Msk                        /*!< Driver Enable Mode */
N#define USART_CR3_DEP_Pos             (15U)                                    
N#define USART_CR3_DEP_Msk             (0x1U << USART_CR3_DEP_Pos)              /*!< 0x00008000 */
N#define USART_CR3_DEP                 USART_CR3_DEP_Msk                        /*!< Driver Enable Polarity Selection */
N#define USART_CR3_SCARCNT_Pos         (17U)                                    
N#define USART_CR3_SCARCNT_Msk         (0x7U << USART_CR3_SCARCNT_Pos)          /*!< 0x000E0000 */
N#define USART_CR3_SCARCNT             USART_CR3_SCARCNT_Msk                    /*!< SCARCNT[2:0] bits (SmartCard Auto-Retry Count) */
N#define USART_CR3_SCARCNT_0           (0x1U << USART_CR3_SCARCNT_Pos)          /*!< 0x00020000 */
N#define USART_CR3_SCARCNT_1           (0x2U << USART_CR3_SCARCNT_Pos)          /*!< 0x00040000 */
N#define USART_CR3_SCARCNT_2           (0x4U << USART_CR3_SCARCNT_Pos)          /*!< 0x00080000 */
N#define USART_CR3_WUS_Pos             (20U)                                    
N#define USART_CR3_WUS_Msk             (0x3U << USART_CR3_WUS_Pos)              /*!< 0x00300000 */
N#define USART_CR3_WUS                 USART_CR3_WUS_Msk                        /*!< WUS[1:0] bits (Wake UP Interrupt Flag Selection) */
N#define USART_CR3_WUS_0               (0x1U << USART_CR3_WUS_Pos)              /*!< 0x00100000 */
N#define USART_CR3_WUS_1               (0x2U << USART_CR3_WUS_Pos)              /*!< 0x00200000 */
N#define USART_CR3_WUFIE_Pos           (22U)                                    
N#define USART_CR3_WUFIE_Msk           (0x1U << USART_CR3_WUFIE_Pos)            /*!< 0x00400000 */
N#define USART_CR3_WUFIE               USART_CR3_WUFIE_Msk                      /*!< Wake Up Interrupt Enable */
N#define USART_CR3_UCESM_Pos           (23U)                                    
N#define USART_CR3_UCESM_Msk           (0x1U << USART_CR3_UCESM_Pos)            /*!< 0x00800000 */
N#define USART_CR3_UCESM               USART_CR3_UCESM_Msk                      /*!< Clock Enable in Stop mode */ 
N
N/******************  Bit definition for USART_BRR register  *******************/
N#define USART_BRR_DIV_FRACTION_Pos    (0U)                                     
N#define USART_BRR_DIV_FRACTION_Msk    (0xFU << USART_BRR_DIV_FRACTION_Pos)     /*!< 0x0000000F */
N#define USART_BRR_DIV_FRACTION        USART_BRR_DIV_FRACTION_Msk               /*!< Fraction of USARTDIV */
N#define USART_BRR_DIV_MANTISSA_Pos    (4U)                                     
N#define USART_BRR_DIV_MANTISSA_Msk    (0xFFFU << USART_BRR_DIV_MANTISSA_Pos)   /*!< 0x0000FFF0 */
N#define USART_BRR_DIV_MANTISSA        USART_BRR_DIV_MANTISSA_Msk               /*!< Mantissa of USARTDIV */
N
N/******************  Bit definition for USART_GTPR register  ******************/
N#define USART_GTPR_PSC_Pos            (0U)                                     
N#define USART_GTPR_PSC_Msk            (0xFFU << USART_GTPR_PSC_Pos)            /*!< 0x000000FF */
N#define USART_GTPR_PSC                USART_GTPR_PSC_Msk                       /*!< PSC[7:0] bits (Prescaler value) */
N#define USART_GTPR_GT_Pos             (8U)                                     
N#define USART_GTPR_GT_Msk             (0xFFU << USART_GTPR_GT_Pos)             /*!< 0x0000FF00 */
N#define USART_GTPR_GT                 USART_GTPR_GT_Msk                        /*!< GT[7:0] bits (Guard time value) */
N
N
N/*******************  Bit definition for USART_RTOR register  *****************/
N#define USART_RTOR_RTO_Pos            (0U)                                     
N#define USART_RTOR_RTO_Msk            (0xFFFFFFU << USART_RTOR_RTO_Pos)        /*!< 0x00FFFFFF */
N#define USART_RTOR_RTO                USART_RTOR_RTO_Msk                       /*!< Receiver Time Out Value */
N#define USART_RTOR_BLEN_Pos           (24U)                                    
N#define USART_RTOR_BLEN_Msk           (0xFFU << USART_RTOR_BLEN_Pos)           /*!< 0xFF000000 */
N#define USART_RTOR_BLEN               USART_RTOR_BLEN_Msk                      /*!< Block Length */
N
N/*******************  Bit definition for USART_RQR register  ******************/
N#define USART_RQR_ABRRQ_Pos           (0U)                                     
N#define USART_RQR_ABRRQ_Msk           (0x1U << USART_RQR_ABRRQ_Pos)            /*!< 0x00000001 */
N#define USART_RQR_ABRRQ               USART_RQR_ABRRQ_Msk                      /*!< Auto-Baud Rate Request */
N#define USART_RQR_SBKRQ_Pos           (1U)                                     
N#define USART_RQR_SBKRQ_Msk           (0x1U << USART_RQR_SBKRQ_Pos)            /*!< 0x00000002 */
N#define USART_RQR_SBKRQ               USART_RQR_SBKRQ_Msk                      /*!< Send Break Request */
N#define USART_RQR_MMRQ_Pos            (2U)                                     
N#define USART_RQR_MMRQ_Msk            (0x1U << USART_RQR_MMRQ_Pos)             /*!< 0x00000004 */
N#define USART_RQR_MMRQ                USART_RQR_MMRQ_Msk                       /*!< Mute Mode Request */
N#define USART_RQR_RXFRQ_Pos           (3U)                                     
N#define USART_RQR_RXFRQ_Msk           (0x1U << USART_RQR_RXFRQ_Pos)            /*!< 0x00000008 */
N#define USART_RQR_RXFRQ               USART_RQR_RXFRQ_Msk                      /*!< Receive Data flush Request */
N#define USART_RQR_TXFRQ_Pos           (4U)                                     
N#define USART_RQR_TXFRQ_Msk           (0x1U << USART_RQR_TXFRQ_Pos)            /*!< 0x00000010 */
N#define USART_RQR_TXFRQ               USART_RQR_TXFRQ_Msk                      /*!< Transmit data flush Request */
N
N/*******************  Bit definition for USART_ISR register  ******************/
N#define USART_ISR_PE_Pos              (0U)                                     
N#define USART_ISR_PE_Msk              (0x1U << USART_ISR_PE_Pos)               /*!< 0x00000001 */
N#define USART_ISR_PE                  USART_ISR_PE_Msk                         /*!< Parity Error */
N#define USART_ISR_FE_Pos              (1U)                                     
N#define USART_ISR_FE_Msk              (0x1U << USART_ISR_FE_Pos)               /*!< 0x00000002 */
N#define USART_ISR_FE                  USART_ISR_FE_Msk                         /*!< Framing Error */
N#define USART_ISR_NE_Pos              (2U)                                     
N#define USART_ISR_NE_Msk              (0x1U << USART_ISR_NE_Pos)               /*!< 0x00000004 */
N#define USART_ISR_NE                  USART_ISR_NE_Msk                         /*!< Noise detected Flag */
N#define USART_ISR_ORE_Pos             (3U)                                     
N#define USART_ISR_ORE_Msk             (0x1U << USART_ISR_ORE_Pos)              /*!< 0x00000008 */
N#define USART_ISR_ORE                 USART_ISR_ORE_Msk                        /*!< OverRun Error */
N#define USART_ISR_IDLE_Pos            (4U)                                     
N#define USART_ISR_IDLE_Msk            (0x1U << USART_ISR_IDLE_Pos)             /*!< 0x00000010 */
N#define USART_ISR_IDLE                USART_ISR_IDLE_Msk                       /*!< IDLE line detected */
N#define USART_ISR_RXNE_Pos            (5U)                                     
N#define USART_ISR_RXNE_Msk            (0x1U << USART_ISR_RXNE_Pos)             /*!< 0x00000020 */
N#define USART_ISR_RXNE                USART_ISR_RXNE_Msk                       /*!< Read Data Register Not Empty */
N#define USART_ISR_TC_Pos              (6U)                                     
N#define USART_ISR_TC_Msk              (0x1U << USART_ISR_TC_Pos)               /*!< 0x00000040 */
N#define USART_ISR_TC                  USART_ISR_TC_Msk                         /*!< Transmission Complete */
N#define USART_ISR_TXE_Pos             (7U)                                     
N#define USART_ISR_TXE_Msk             (0x1U << USART_ISR_TXE_Pos)              /*!< 0x00000080 */
N#define USART_ISR_TXE                 USART_ISR_TXE_Msk                        /*!< Transmit Data Register Empty */
N#define USART_ISR_LBDF_Pos            (8U)                                     
N#define USART_ISR_LBDF_Msk            (0x1U << USART_ISR_LBDF_Pos)             /*!< 0x00000100 */
N#define USART_ISR_LBDF                USART_ISR_LBDF_Msk                       /*!< LIN Break Detection Flag */
N#define USART_ISR_CTSIF_Pos           (9U)                                     
N#define USART_ISR_CTSIF_Msk           (0x1U << USART_ISR_CTSIF_Pos)            /*!< 0x00000200 */
N#define USART_ISR_CTSIF               USART_ISR_CTSIF_Msk                      /*!< CTS interrupt flag */
N#define USART_ISR_CTS_Pos             (10U)                                    
N#define USART_ISR_CTS_Msk             (0x1U << USART_ISR_CTS_Pos)              /*!< 0x00000400 */
N#define USART_ISR_CTS                 USART_ISR_CTS_Msk                        /*!< CTS flag */
N#define USART_ISR_RTOF_Pos            (11U)                                    
N#define USART_ISR_RTOF_Msk            (0x1U << USART_ISR_RTOF_Pos)             /*!< 0x00000800 */
N#define USART_ISR_RTOF                USART_ISR_RTOF_Msk                       /*!< Receiver Time Out */
N#define USART_ISR_EOBF_Pos            (12U)                                    
N#define USART_ISR_EOBF_Msk            (0x1U << USART_ISR_EOBF_Pos)             /*!< 0x00001000 */
N#define USART_ISR_EOBF                USART_ISR_EOBF_Msk                       /*!< End Of Block Flag */
N#define USART_ISR_ABRE_Pos            (14U)                                    
N#define USART_ISR_ABRE_Msk            (0x1U << USART_ISR_ABRE_Pos)             /*!< 0x00004000 */
N#define USART_ISR_ABRE                USART_ISR_ABRE_Msk                       /*!< Auto-Baud Rate Error */
N#define USART_ISR_ABRF_Pos            (15U)                                    
N#define USART_ISR_ABRF_Msk            (0x1U << USART_ISR_ABRF_Pos)             /*!< 0x00008000 */
N#define USART_ISR_ABRF                USART_ISR_ABRF_Msk                       /*!< Auto-Baud Rate Flag */
N#define USART_ISR_BUSY_Pos            (16U)                                    
N#define USART_ISR_BUSY_Msk            (0x1U << USART_ISR_BUSY_Pos)             /*!< 0x00010000 */
N#define USART_ISR_BUSY                USART_ISR_BUSY_Msk                       /*!< Busy Flag */
N#define USART_ISR_CMF_Pos             (17U)                                    
N#define USART_ISR_CMF_Msk             (0x1U << USART_ISR_CMF_Pos)              /*!< 0x00020000 */
N#define USART_ISR_CMF                 USART_ISR_CMF_Msk                        /*!< Character Match Flag */
N#define USART_ISR_SBKF_Pos            (18U)                                    
N#define USART_ISR_SBKF_Msk            (0x1U << USART_ISR_SBKF_Pos)             /*!< 0x00040000 */
N#define USART_ISR_SBKF                USART_ISR_SBKF_Msk                       /*!< Send Break Flag */
N#define USART_ISR_RWU_Pos             (19U)                                    
N#define USART_ISR_RWU_Msk             (0x1U << USART_ISR_RWU_Pos)              /*!< 0x00080000 */
N#define USART_ISR_RWU                 USART_ISR_RWU_Msk                        /*!< Receive Wake Up from mute mode Flag */
N#define USART_ISR_WUF_Pos             (20U)                                    
N#define USART_ISR_WUF_Msk             (0x1U << USART_ISR_WUF_Pos)              /*!< 0x00100000 */
N#define USART_ISR_WUF                 USART_ISR_WUF_Msk                        /*!< Wake Up from stop mode Flag */
N#define USART_ISR_TEACK_Pos           (21U)                                    
N#define USART_ISR_TEACK_Msk           (0x1U << USART_ISR_TEACK_Pos)            /*!< 0x00200000 */
N#define USART_ISR_TEACK               USART_ISR_TEACK_Msk                      /*!< Transmit Enable Acknowledge Flag */
N#define USART_ISR_REACK_Pos           (22U)                                    
N#define USART_ISR_REACK_Msk           (0x1U << USART_ISR_REACK_Pos)            /*!< 0x00400000 */
N#define USART_ISR_REACK               USART_ISR_REACK_Msk                      /*!< Receive Enable Acknowledge Flag */
N
N/*******************  Bit definition for USART_ICR register  ******************/
N#define USART_ICR_PECF_Pos            (0U)                                     
N#define USART_ICR_PECF_Msk            (0x1U << USART_ICR_PECF_Pos)             /*!< 0x00000001 */
N#define USART_ICR_PECF                USART_ICR_PECF_Msk                       /*!< Parity Error Clear Flag */
N#define USART_ICR_FECF_Pos            (1U)                                     
N#define USART_ICR_FECF_Msk            (0x1U << USART_ICR_FECF_Pos)             /*!< 0x00000002 */
N#define USART_ICR_FECF                USART_ICR_FECF_Msk                       /*!< Framing Error Clear Flag */
N#define USART_ICR_NCF_Pos             (2U)                                     
N#define USART_ICR_NCF_Msk             (0x1U << USART_ICR_NCF_Pos)              /*!< 0x00000004 */
N#define USART_ICR_NCF                 USART_ICR_NCF_Msk                        /*!< Noise detected Clear Flag */
N#define USART_ICR_ORECF_Pos           (3U)                                     
N#define USART_ICR_ORECF_Msk           (0x1U << USART_ICR_ORECF_Pos)            /*!< 0x00000008 */
N#define USART_ICR_ORECF               USART_ICR_ORECF_Msk                      /*!< OverRun Error Clear Flag */
N#define USART_ICR_IDLECF_Pos          (4U)                                     
N#define USART_ICR_IDLECF_Msk          (0x1U << USART_ICR_IDLECF_Pos)           /*!< 0x00000010 */
N#define USART_ICR_IDLECF              USART_ICR_IDLECF_Msk                     /*!< IDLE line detected Clear Flag */
N#define USART_ICR_TCCF_Pos            (6U)                                     
N#define USART_ICR_TCCF_Msk            (0x1U << USART_ICR_TCCF_Pos)             /*!< 0x00000040 */
N#define USART_ICR_TCCF                USART_ICR_TCCF_Msk                       /*!< Transmission Complete Clear Flag */
N#define USART_ICR_LBDCF_Pos           (8U)                                     
N#define USART_ICR_LBDCF_Msk           (0x1U << USART_ICR_LBDCF_Pos)            /*!< 0x00000100 */
N#define USART_ICR_LBDCF               USART_ICR_LBDCF_Msk                      /*!< LIN Break Detection Clear Flag */
N#define USART_ICR_CTSCF_Pos           (9U)                                     
N#define USART_ICR_CTSCF_Msk           (0x1U << USART_ICR_CTSCF_Pos)            /*!< 0x00000200 */
N#define USART_ICR_CTSCF               USART_ICR_CTSCF_Msk                      /*!< CTS Interrupt Clear Flag */
N#define USART_ICR_RTOCF_Pos           (11U)                                    
N#define USART_ICR_RTOCF_Msk           (0x1U << USART_ICR_RTOCF_Pos)            /*!< 0x00000800 */
N#define USART_ICR_RTOCF               USART_ICR_RTOCF_Msk                      /*!< Receiver Time Out Clear Flag */
N#define USART_ICR_EOBCF_Pos           (12U)                                    
N#define USART_ICR_EOBCF_Msk           (0x1U << USART_ICR_EOBCF_Pos)            /*!< 0x00001000 */
N#define USART_ICR_EOBCF               USART_ICR_EOBCF_Msk                      /*!< End Of Block Clear Flag */
N#define USART_ICR_CMCF_Pos            (17U)                                    
N#define USART_ICR_CMCF_Msk            (0x1U << USART_ICR_CMCF_Pos)             /*!< 0x00020000 */
N#define USART_ICR_CMCF                USART_ICR_CMCF_Msk                       /*!< Character Match Clear Flag */
N#define USART_ICR_WUCF_Pos            (20U)                                    
N#define USART_ICR_WUCF_Msk            (0x1U << USART_ICR_WUCF_Pos)             /*!< 0x00100000 */
N#define USART_ICR_WUCF                USART_ICR_WUCF_Msk                       /*!< Wake Up from stop mode Clear Flag */
N
N/*******************  Bit definition for USART_RDR register  ******************/
N#define USART_RDR_RDR_Pos             (0U)                                     
N#define USART_RDR_RDR_Msk             (0x1FFU << USART_RDR_RDR_Pos)            /*!< 0x000001FF */
N#define USART_RDR_RDR                 USART_RDR_RDR_Msk                        /*!< RDR[8:0] bits (Receive Data value) */
N
N/*******************  Bit definition for USART_TDR register  ******************/
N#define USART_TDR_TDR_Pos             (0U)                                     
N#define USART_TDR_TDR_Msk             (0x1FFU << USART_TDR_TDR_Pos)            /*!< 0x000001FF */
N#define USART_TDR_TDR                 USART_TDR_TDR_Msk                        /*!< TDR[8:0] bits (Transmit Data value) */
N
N/******************************************************************************/
N/*                                                                            */
N/*                         USB Device General registers                       */
N/*                                                                            */
N/******************************************************************************/
N#define USB_BASE                              (0x40005C00U)                    /*!< USB_IP Peripheral Registers base address */
N#define USB_PMAADDR_Pos           (13U)                                        
N#define USB_PMAADDR_Msk           (0x20003U << USB_PMAADDR_Pos)                /*!< 0x40006000 */
N#define USB_PMAADDR               USB_PMAADDR_Msk                              /*!< USB_IP Packet Memory Area base address */
N                                             
N#define USB_CNTR                             (USB_BASE + 0x40)           /*!< Control register */
N#define USB_ISTR                             (USB_BASE + 0x44)           /*!< Interrupt status register */
N#define USB_FNR                              (USB_BASE + 0x48)           /*!< Frame number register */
N#define USB_DADDR                            (USB_BASE + 0x4C)           /*!< Device address register */
N#define USB_BTABLE                           (USB_BASE + 0x50)           /*!< Buffer Table address register */
N#define USB_LPMCSR                           (USB_BASE + 0x54)           /*!< LPM Control and Status register */
N#define USB_BCDR                             (USB_BASE + 0x58)           /*!< Battery Charging detector register*/
N
N/****************************  ISTR interrupt events  *************************/
N#define USB_ISTR_CTR                          ((uint16_t)0x8000U)              /*!< Correct TRansfer (clear-only bit) */
N#define USB_ISTR_PMAOVR                       ((uint16_t)0x4000U)              /*!< DMA OVeR/underrun (clear-only bit) */
N#define USB_ISTR_ERR                          ((uint16_t)0x2000U)              /*!< ERRor (clear-only bit) */
N#define USB_ISTR_WKUP                         ((uint16_t)0x1000U)              /*!< WaKe UP (clear-only bit) */
N#define USB_ISTR_SUSP                         ((uint16_t)0x0800U)              /*!< SUSPend (clear-only bit) */
N#define USB_ISTR_RESET                        ((uint16_t)0x0400U)              /*!< RESET (clear-only bit) */
N#define USB_ISTR_SOF                          ((uint16_t)0x0200U)              /*!< Start Of Frame (clear-only bit) */
N#define USB_ISTR_ESOF                         ((uint16_t)0x0100U)              /*!< Expected Start Of Frame (clear-only bit) */
N#define USB_ISTR_L1REQ                        ((uint16_t)0x0080U)              /*!< LPM L1 state request  */
N#define USB_ISTR_DIR                          ((uint16_t)0x0010U)              /*!< DIRection of transaction (read-only bit)  */
N#define USB_ISTR_EP_ID                        ((uint16_t)0x000FU)              /*!< EndPoint IDentifier (read-only bit)  */
N
N#define USB_CLR_CTR                          (~USB_ISTR_CTR)             /*!< clear Correct TRansfer bit */
N#define USB_CLR_PMAOVR                       (~USB_ISTR_PMAOVR)          /*!< clear DMA OVeR/underrun bit*/
N#define USB_CLR_ERR                          (~USB_ISTR_ERR)             /*!< clear ERRor bit */
N#define USB_CLR_WKUP                         (~USB_ISTR_WKUP)            /*!< clear WaKe UP bit */
N#define USB_CLR_SUSP                         (~USB_ISTR_SUSP)            /*!< clear SUSPend bit */
N#define USB_CLR_RESET                        (~USB_ISTR_RESET)           /*!< clear RESET bit */
N#define USB_CLR_SOF                          (~USB_ISTR_SOF)             /*!< clear Start Of Frame bit */
N#define USB_CLR_ESOF                         (~USB_ISTR_ESOF)            /*!< clear Expected Start Of Frame bit */
N#define USB_CLR_L1REQ                        (~USB_ISTR_L1REQ)           /*!< clear LPM L1  bit */
N/*************************  CNTR control register bits definitions  ***********/
N#define USB_CNTR_CTRM                         ((uint16_t)0x8000U)              /*!< Correct TRansfer Mask */
N#define USB_CNTR_PMAOVRM                      ((uint16_t)0x4000U)              /*!< DMA OVeR/underrun Mask */
N#define USB_CNTR_ERRM                         ((uint16_t)0x2000U)              /*!< ERRor Mask */
N#define USB_CNTR_WKUPM                        ((uint16_t)0x1000U)              /*!< WaKe UP Mask */
N#define USB_CNTR_SUSPM                        ((uint16_t)0x0800U)              /*!< SUSPend Mask */
N#define USB_CNTR_RESETM                       ((uint16_t)0x0400U)              /*!< RESET Mask   */
N#define USB_CNTR_SOFM                         ((uint16_t)0x0200U)              /*!< Start Of Frame Mask */
N#define USB_CNTR_ESOFM                        ((uint16_t)0x0100U)              /*!< Expected Start Of Frame Mask */
N#define USB_CNTR_L1REQM                       ((uint16_t)0x0080U)              /*!< LPM L1 state request interrupt mask */
N#define USB_CNTR_L1RESUME                     ((uint16_t)0x0020U)              /*!< LPM L1 Resume request */
N#define USB_CNTR_RESUME                       ((uint16_t)0x0010U)              /*!< RESUME request */
N#define USB_CNTR_FSUSP                        ((uint16_t)0x0008U)              /*!< Force SUSPend */
N#define USB_CNTR_LPMODE                       ((uint16_t)0x0004U)              /*!< Low-power MODE */
N#define USB_CNTR_PDWN                         ((uint16_t)0x0002U)              /*!< Power DoWN */
N#define USB_CNTR_FRES                         ((uint16_t)0x0001U)              /*!< Force USB RESet */
N/*************************  BCDR control register bits definitions  ***********/
N#define USB_BCDR_DPPU                         ((uint16_t)0x8000U)              /*!< DP Pull-up Enable */  
N#define USB_BCDR_PS2DET                       ((uint16_t)0x0080U)              /*!< PS2 port or proprietary charger detected */  
N#define USB_BCDR_SDET                         ((uint16_t)0x0040U)              /*!< Secondary detection (SD) status */  
N#define USB_BCDR_PDET                         ((uint16_t)0x0020U)              /*!< Primary detection (PD) status */ 
N#define USB_BCDR_DCDET                        ((uint16_t)0x0010U)              /*!< Data contact detection (DCD) status */ 
N#define USB_BCDR_SDEN                         ((uint16_t)0x0008U)              /*!< Secondary detection (SD) mode enable */ 
N#define USB_BCDR_PDEN                         ((uint16_t)0x0004U)              /*!< Primary detection (PD) mode enable */  
N#define USB_BCDR_DCDEN                        ((uint16_t)0x0002U)              /*!< Data contact detection (DCD) mode enable */
N#define USB_BCDR_BCDEN                        ((uint16_t)0x0001U)              /*!< Battery charging detector (BCD) enable */
N/***************************  LPM register bits definitions  ******************/
N#define USB_LPMCSR_BESL                       ((uint16_t)0x00F0U)              /*!< BESL value received with last ACKed LPM Token  */ 
N#define USB_LPMCSR_REMWAKE                    ((uint16_t)0x0008U)              /*!< bRemoteWake value received with last ACKed LPM Token */ 
N#define USB_LPMCSR_LPMACK                     ((uint16_t)0x0002U)              /*!< LPM Token acknowledge enable*/
N#define USB_LPMCSR_LMPEN                      ((uint16_t)0x0001U)              /*!< LPM support enable  */
N/********************  FNR Frame Number Register bit definitions   ************/
N#define USB_FNR_RXDP                          ((uint16_t)0x8000U)              /*!< status of D+ data line */
N#define USB_FNR_RXDM                          ((uint16_t)0x4000U)              /*!< status of D- data line */
N#define USB_FNR_LCK                           ((uint16_t)0x2000U)              /*!< LoCKed */
N#define USB_FNR_LSOF                          ((uint16_t)0x1800U)              /*!< Lost SOF */
N#define USB_FNR_FN                            ((uint16_t)0x07FFU)              /*!< Frame Number */
N/********************  DADDR Device ADDRess bit definitions    ****************/
N#define USB_DADDR_EF                          ((uint8_t)0x80U)                 /*!< USB device address Enable Function */
N#define USB_DADDR_ADD                         ((uint8_t)0x7FU)                 /*!< USB device address */
N/******************************  Endpoint register    *************************/
N#define USB_EP0R                              USB_BASE                   /*!< endpoint 0 register address */
N#define USB_EP1R                             (USB_BASE + 0x04)           /*!< endpoint 1 register address */
N#define USB_EP2R                             (USB_BASE + 0x08)           /*!< endpoint 2 register address */
N#define USB_EP3R                             (USB_BASE + 0x0C)           /*!< endpoint 3 register address */
N#define USB_EP4R                             (USB_BASE + 0x10)           /*!< endpoint 4 register address */
N#define USB_EP5R                             (USB_BASE + 0x14)           /*!< endpoint 5 register address */
N#define USB_EP6R                             (USB_BASE + 0x18)           /*!< endpoint 6 register address */
N#define USB_EP7R                             (USB_BASE + 0x1C)           /*!< endpoint 7 register address */
N/* bit positions */ 
N#define USB_EP_CTR_RX                         ((uint16_t)0x8000U)              /*!<  EndPoint Correct TRansfer RX */
N#define USB_EP_DTOG_RX                        ((uint16_t)0x4000U)              /*!<  EndPoint Data TOGGLE RX */
N#define USB_EPRX_STAT                         ((uint16_t)0x3000U)              /*!<  EndPoint RX STATus bit field */
N#define USB_EP_SETUP                          ((uint16_t)0x0800U)              /*!<  EndPoint SETUP */
N#define USB_EP_T_FIELD                        ((uint16_t)0x0600U)              /*!<  EndPoint TYPE */
N#define USB_EP_KIND                           ((uint16_t)0x0100U)              /*!<  EndPoint KIND */
N#define USB_EP_CTR_TX                         ((uint16_t)0x0080U)              /*!<  EndPoint Correct TRansfer TX */
N#define USB_EP_DTOG_TX                        ((uint16_t)0x0040U)              /*!<  EndPoint Data TOGGLE TX */
N#define USB_EPTX_STAT                         ((uint16_t)0x0030U)              /*!<  EndPoint TX STATus bit field */
N#define USB_EPADDR_FIELD                      ((uint16_t)0x000FU)              /*!<  EndPoint ADDRess FIELD */
N
N/* EndPoint REGister MASK (no toggle fields) */
N#define USB_EPREG_MASK     (USB_EP_CTR_RX|USB_EP_SETUP|USB_EP_T_FIELD|USB_EP_KIND|USB_EP_CTR_TX|USB_EPADDR_FIELD)
N                                                                         /*!< EP_TYPE[1:0] EndPoint TYPE */
N#define USB_EP_TYPE_MASK                      ((uint16_t)0x0600U)              /*!< EndPoint TYPE Mask */
N#define USB_EP_BULK                           ((uint16_t)0x0000U)              /*!< EndPoint BULK */
N#define USB_EP_CONTROL                        ((uint16_t)0x0200U)              /*!< EndPoint CONTROL */
N#define USB_EP_ISOCHRONOUS                    ((uint16_t)0x0400U)              /*!< EndPoint ISOCHRONOUS */
N#define USB_EP_INTERRUPT                      ((uint16_t)0x0600U)              /*!< EndPoint INTERRUPT */
N#define USB_EP_T_MASK                        ((uint16_t) ~USB_EP_T_FIELD & USB_EPREG_MASK)
N                                                                 
N#define USB_EPKIND_MASK                      ((uint16_t)~USB_EP_KIND & USB_EPREG_MASK) /*!< EP_KIND EndPoint KIND */
N                                                                         /*!< STAT_TX[1:0] STATus for TX transfer */
N#define USB_EP_TX_DIS                         ((uint16_t)0x0000U)              /*!< EndPoint TX DISabled */
N#define USB_EP_TX_STALL                       ((uint16_t)0x0010U)              /*!< EndPoint TX STALLed */
N#define USB_EP_TX_NAK                         ((uint16_t)0x0020U)              /*!< EndPoint TX NAKed */
N#define USB_EP_TX_VALID                       ((uint16_t)0x0030U)              /*!< EndPoint TX VALID */
N#define USB_EPTX_DTOG1                        ((uint16_t)0x0010U)              /*!< EndPoint TX Data TOGgle bit1 */
N#define USB_EPTX_DTOG2                        ((uint16_t)0x0020U)              /*!< EndPoint TX Data TOGgle bit2 */
N#define USB_EPTX_DTOGMASK  (USB_EPTX_STAT|USB_EPREG_MASK)
N                                                                         /*!< STAT_RX[1:0] STATus for RX transfer */
N#define USB_EP_RX_DIS                         ((uint16_t)0x0000U)              /*!< EndPoint RX DISabled */
N#define USB_EP_RX_STALL                       ((uint16_t)0x1000U)              /*!< EndPoint RX STALLed */
N#define USB_EP_RX_NAK                         ((uint16_t)0x2000U)              /*!< EndPoint RX NAKed */
N#define USB_EP_RX_VALID                       ((uint16_t)0x3000U)              /*!< EndPoint RX VALID */
N#define USB_EPRX_DTOG1                        ((uint16_t)0x1000U)              /*!< EndPoint RX Data TOGgle bit1 */
N#define USB_EPRX_DTOG2                        ((uint16_t)0x2000U)              /*!< EndPoint RX Data TOGgle bit1 */
N#define USB_EPRX_DTOGMASK  (USB_EPRX_STAT|USB_EPREG_MASK)
N
N/******************************************************************************/
N/*                                                                            */
N/*                         Window WATCHDOG (WWDG)                             */
N/*                                                                            */
N/******************************************************************************/
N
N/*******************  Bit definition for WWDG_CR register  ********************/
N#define WWDG_CR_T_Pos           (0U)                                           
N#define WWDG_CR_T_Msk           (0x7FU << WWDG_CR_T_Pos)                       /*!< 0x0000007F */
N#define WWDG_CR_T               WWDG_CR_T_Msk                                  /*!< T[6:0] bits (7-Bit counter (MSB to LSB)) */
N#define WWDG_CR_T_0             (0x01U << WWDG_CR_T_Pos)                       /*!< 0x00000001 */
N#define WWDG_CR_T_1             (0x02U << WWDG_CR_T_Pos)                       /*!< 0x00000002 */
N#define WWDG_CR_T_2             (0x04U << WWDG_CR_T_Pos)                       /*!< 0x00000004 */
N#define WWDG_CR_T_3             (0x08U << WWDG_CR_T_Pos)                       /*!< 0x00000008 */
N#define WWDG_CR_T_4             (0x10U << WWDG_CR_T_Pos)                       /*!< 0x00000010 */
N#define WWDG_CR_T_5             (0x20U << WWDG_CR_T_Pos)                       /*!< 0x00000020 */
N#define WWDG_CR_T_6             (0x40U << WWDG_CR_T_Pos)                       /*!< 0x00000040 */
N
N/* Legacy defines */
N#define  WWDG_CR_T0    WWDG_CR_T_0
N#define  WWDG_CR_T1    WWDG_CR_T_1
N#define  WWDG_CR_T2    WWDG_CR_T_2
N#define  WWDG_CR_T3    WWDG_CR_T_3
N#define  WWDG_CR_T4    WWDG_CR_T_4
N#define  WWDG_CR_T5    WWDG_CR_T_5
N#define  WWDG_CR_T6    WWDG_CR_T_6
N
N#define WWDG_CR_WDGA_Pos        (7U)                                           
N#define WWDG_CR_WDGA_Msk        (0x1U << WWDG_CR_WDGA_Pos)                     /*!< 0x00000080 */
N#define WWDG_CR_WDGA            WWDG_CR_WDGA_Msk                               /*!< Activation bit */
N
N/*******************  Bit definition for WWDG_CFR register  *******************/
N#define WWDG_CFR_W_Pos          (0U)                                           
N#define WWDG_CFR_W_Msk          (0x7FU << WWDG_CFR_W_Pos)                      /*!< 0x0000007F */
N#define WWDG_CFR_W              WWDG_CFR_W_Msk                                 /*!< W[6:0] bits (7-bit window value) */
N#define WWDG_CFR_W_0            (0x01U << WWDG_CFR_W_Pos)                      /*!< 0x00000001 */
N#define WWDG_CFR_W_1            (0x02U << WWDG_CFR_W_Pos)                      /*!< 0x00000002 */
N#define WWDG_CFR_W_2            (0x04U << WWDG_CFR_W_Pos)                      /*!< 0x00000004 */
N#define WWDG_CFR_W_3            (0x08U << WWDG_CFR_W_Pos)                      /*!< 0x00000008 */
N#define WWDG_CFR_W_4            (0x10U << WWDG_CFR_W_Pos)                      /*!< 0x00000010 */
N#define WWDG_CFR_W_5            (0x20U << WWDG_CFR_W_Pos)                      /*!< 0x00000020 */
N#define WWDG_CFR_W_6            (0x40U << WWDG_CFR_W_Pos)                      /*!< 0x00000040 */
N
N/* Legacy defines */
N#define  WWDG_CFR_W0    WWDG_CFR_W_0
N#define  WWDG_CFR_W1    WWDG_CFR_W_1
N#define  WWDG_CFR_W2    WWDG_CFR_W_2
N#define  WWDG_CFR_W3    WWDG_CFR_W_3
N#define  WWDG_CFR_W4    WWDG_CFR_W_4
N#define  WWDG_CFR_W5    WWDG_CFR_W_5
N#define  WWDG_CFR_W6    WWDG_CFR_W_6
N
N#define WWDG_CFR_WDGTB_Pos      (7U)                                           
N#define WWDG_CFR_WDGTB_Msk      (0x3U << WWDG_CFR_WDGTB_Pos)                   /*!< 0x00000180 */
N#define WWDG_CFR_WDGTB          WWDG_CFR_WDGTB_Msk                             /*!< WDGTB[1:0] bits (Timer Base) */
N#define WWDG_CFR_WDGTB_0        (0x1U << WWDG_CFR_WDGTB_Pos)                   /*!< 0x00000080 */
N#define WWDG_CFR_WDGTB_1        (0x2U << WWDG_CFR_WDGTB_Pos)                   /*!< 0x00000100 */
N
N/* Legacy defines */
N#define  WWDG_CFR_WDGTB0    WWDG_CFR_WDGTB_0
N#define  WWDG_CFR_WDGTB1    WWDG_CFR_WDGTB_1
N
N#define WWDG_CFR_EWI_Pos        (9U)                                           
N#define WWDG_CFR_EWI_Msk        (0x1U << WWDG_CFR_EWI_Pos)                     /*!< 0x00000200 */
N#define WWDG_CFR_EWI            WWDG_CFR_EWI_Msk                               /*!< Early Wakeup Interrupt */
N
N/*******************  Bit definition for WWDG_SR register  ********************/
N#define WWDG_SR_EWIF_Pos        (0U)                                           
N#define WWDG_SR_EWIF_Msk        (0x1U << WWDG_SR_EWIF_Pos)                     /*!< 0x00000001 */
N#define WWDG_SR_EWIF            WWDG_SR_EWIF_Msk                               /*!< Early Wakeup Interrupt Flag */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */
N
N/** @addtogroup Exported_macros
N  * @{
N  */
N
N/******************************* ADC Instances ********************************/
N#define IS_ADC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == ADC1)
N#define IS_ADC_COMMON_INSTANCE(INSTANCE) ((INSTANCE) == ADC1_COMMON)
N
N/******************************* COMP Instances *******************************/
N#define IS_COMP_ALL_INSTANCE(INSTANCE) (((INSTANCE) == COMP1) || \
N                                       ((INSTANCE) == COMP2))
X#define IS_COMP_ALL_INSTANCE(INSTANCE) (((INSTANCE) == COMP1) ||                                        ((INSTANCE) == COMP2))
N
N#define IS_COMP_COMMON_INSTANCE(COMMON_INSTANCE) ((COMMON_INSTANCE) == COMP12_COMMON)
N
N/******************************* CRC Instances ********************************/
N#define IS_CRC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == CRC)
N
N/******************************* DAC Instances *********************************/
N#define IS_DAC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == DAC)
N
N/******************************* DMA Instances *********************************/
N#define IS_DMA_ALL_INSTANCE(INSTANCE) (((INSTANCE) == DMA1_Channel1) || \
N                                       ((INSTANCE) == DMA1_Channel2) || \
N                                       ((INSTANCE) == DMA1_Channel3) || \
N                                       ((INSTANCE) == DMA1_Channel4) || \
N                                       ((INSTANCE) == DMA1_Channel5) || \
N                                       ((INSTANCE) == DMA1_Channel6) || \
N                                       ((INSTANCE) == DMA1_Channel7))
X#define IS_DMA_ALL_INSTANCE(INSTANCE) (((INSTANCE) == DMA1_Channel1) ||                                        ((INSTANCE) == DMA1_Channel2) ||                                        ((INSTANCE) == DMA1_Channel3) ||                                        ((INSTANCE) == DMA1_Channel4) ||                                        ((INSTANCE) == DMA1_Channel5) ||                                        ((INSTANCE) == DMA1_Channel6) ||                                        ((INSTANCE) == DMA1_Channel7))
N
N/******************************* GPIO Instances *******************************/
N#define IS_GPIO_ALL_INSTANCE(INSTANCE) (((INSTANCE) == GPIOA) || \
N                                        ((INSTANCE) == GPIOB) || \
N                                        ((INSTANCE) == GPIOC) || \
N                                        ((INSTANCE) == GPIOD) || \
N                                        ((INSTANCE) == GPIOH))
X#define IS_GPIO_ALL_INSTANCE(INSTANCE) (((INSTANCE) == GPIOA) ||                                         ((INSTANCE) == GPIOB) ||                                         ((INSTANCE) == GPIOC) ||                                         ((INSTANCE) == GPIOD) ||                                         ((INSTANCE) == GPIOH))
N
N#define IS_GPIO_AF_INSTANCE(INSTANCE)  (((INSTANCE) == GPIOA) || \
N                                        ((INSTANCE) == GPIOB) || \
N                                        ((INSTANCE) == GPIOC) || \
N                                        ((INSTANCE) == GPIOD) || \
N                                        ((INSTANCE) == GPIOH))
X#define IS_GPIO_AF_INSTANCE(INSTANCE)  (((INSTANCE) == GPIOA) ||                                         ((INSTANCE) == GPIOB) ||                                         ((INSTANCE) == GPIOC) ||                                         ((INSTANCE) == GPIOD) ||                                         ((INSTANCE) == GPIOH))
N
N/******************************** I2C Instances *******************************/
N#define IS_I2C_ALL_INSTANCE(INSTANCE) (((INSTANCE) == I2C1) || \
N                                       ((INSTANCE) == I2C2))
X#define IS_I2C_ALL_INSTANCE(INSTANCE) (((INSTANCE) == I2C1) ||                                        ((INSTANCE) == I2C2))
N
N/****************** I2C Instances : wakeup capability from stop modes *********/
N#define IS_I2C_WAKEUP_FROMSTOP_INSTANCE(INSTANCE) (((INSTANCE) == I2C1))
N
N
N/******************************** I2S Instances *******************************/
N#define IS_I2S_ALL_INSTANCE(INSTANCE)  ((INSTANCE) == SPI2)
N
N/******************************* RNG Instances ********************************/
N#define IS_RNG_ALL_INSTANCE(INSTANCE)  ((INSTANCE) == RNG)
N
N/****************************** RTC Instances *********************************/
N#define IS_RTC_ALL_INSTANCE(INSTANCE)  ((INSTANCE) == RTC)
N
N/******************************** SMBUS Instances *****************************/
N#define IS_SMBUS_INSTANCE(INSTANCE)  ((INSTANCE) == I2C1)
N
N/******************************** SPI Instances *******************************/
N#define IS_SPI_ALL_INSTANCE(INSTANCE) (((INSTANCE) == SPI1) || \
N                                       ((INSTANCE) == SPI2))
X#define IS_SPI_ALL_INSTANCE(INSTANCE) (((INSTANCE) == SPI1) ||                                        ((INSTANCE) == SPI2))
N
N/****************** LPTIM Instances : All supported instances *****************/
N#define IS_LPTIM_INSTANCE(INSTANCE)       ((INSTANCE) == LPTIM1)
N
N/****************** TIM Instances : All supported instances *******************/
N#define IS_TIM_INSTANCE(INSTANCE)       (((INSTANCE) == TIM2)   || \
N                                         ((INSTANCE) == TIM6)   || \
N                                         ((INSTANCE) == TIM21)  || \
N                                         ((INSTANCE) == TIM22))
X#define IS_TIM_INSTANCE(INSTANCE)       (((INSTANCE) == TIM2)   ||                                          ((INSTANCE) == TIM6)   ||                                          ((INSTANCE) == TIM21)  ||                                          ((INSTANCE) == TIM22))
N
N/****************** TIM Instances : supporting counting mode selection ********/ 
N#define IS_TIM_COUNTER_MODE_SELECT_INSTANCE(INSTANCE)       (((INSTANCE) == TIM2)   || \
N                                                             ((INSTANCE) == TIM21)  || \
N                                                             ((INSTANCE) == TIM22))
X#define IS_TIM_COUNTER_MODE_SELECT_INSTANCE(INSTANCE)       (((INSTANCE) == TIM2)   ||                                                              ((INSTANCE) == TIM21)  ||                                                              ((INSTANCE) == TIM22))
N
N/****************** TIM Instances : supporting clock division *****************/
N#define IS_TIM_CLOCK_DIVISION_INSTANCE(INSTANCE)       (((INSTANCE) == TIM2)   || \
N                                                        ((INSTANCE) == TIM21)  || \
N                                                        ((INSTANCE) == TIM22))
X#define IS_TIM_CLOCK_DIVISION_INSTANCE(INSTANCE)       (((INSTANCE) == TIM2)   ||                                                         ((INSTANCE) == TIM21)  ||                                                         ((INSTANCE) == TIM22))
N
N/****** TIM Instances : supporting external clock mode 1 for ETRF input *******/
N#define IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(INSTANCE)   (((INSTANCE) == TIM2)   || \
N                                                          ((INSTANCE) == TIM21))
X#define IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(INSTANCE)   (((INSTANCE) == TIM2)   ||                                                           ((INSTANCE) == TIM21))
N
N/****** TIM Instances : supporting external clock mode 2 for ETRF input *******/
N#define IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(INSTANCE)   (((INSTANCE) == TIM2)   || \
N                                                          ((INSTANCE) == TIM21)  || \
N                                                          ((INSTANCE) == TIM22))
X#define IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(INSTANCE)   (((INSTANCE) == TIM2)   ||                                                           ((INSTANCE) == TIM21)  ||                                                           ((INSTANCE) == TIM22))
N
N/****************** TIM Instances : supporting external clock mode 1 for TIX inputs*/
N#define IS_TIM_CLOCKSOURCE_TIX_INSTANCE(INSTANCE)        (((INSTANCE) == TIM2)   || \
N                                                          ((INSTANCE) == TIM21))
X#define IS_TIM_CLOCKSOURCE_TIX_INSTANCE(INSTANCE)        (((INSTANCE) == TIM2)   ||                                                           ((INSTANCE) == TIM21))
N
N/****************** TIM Instances : supporting internal trigger inputs(ITRX) *******/
N#define IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(INSTANCE)       (((INSTANCE) == TIM2)   || \
N                                                          ((INSTANCE) == TIM21)  || \
N                                                          ((INSTANCE) == TIM22))
X#define IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(INSTANCE)       (((INSTANCE) == TIM2)   ||                                                           ((INSTANCE) == TIM21)  ||                                                           ((INSTANCE) == TIM22))
N
N/************* TIM Instances : at least 1 capture/compare channel *************/
N#define IS_TIM_CC1_INSTANCE(INSTANCE)   (((INSTANCE) == TIM2)  || \
N                                         ((INSTANCE) == TIM21) || \
N                                         ((INSTANCE) == TIM22))
X#define IS_TIM_CC1_INSTANCE(INSTANCE)   (((INSTANCE) == TIM2)  ||                                          ((INSTANCE) == TIM21) ||                                          ((INSTANCE) == TIM22))
N
N/************ TIM Instances : at least 2 capture/compare channels *************/
N#define IS_TIM_CC2_INSTANCE(INSTANCE)  (((INSTANCE) == TIM2)  || \
N                                        ((INSTANCE) == TIM21) || \
N                                        ((INSTANCE) == TIM22))
X#define IS_TIM_CC2_INSTANCE(INSTANCE)  (((INSTANCE) == TIM2)  ||                                         ((INSTANCE) == TIM21) ||                                         ((INSTANCE) == TIM22))
N
N/************ TIM Instances : at least 3 capture/compare channels *************/
N#define IS_TIM_CC3_INSTANCE(INSTANCE)   ((INSTANCE) == TIM2)
N
N/************ TIM Instances : at least 4 capture/compare channels *************/
N#define IS_TIM_CC4_INSTANCE(INSTANCE)   ((INSTANCE) == TIM2)
N
N/******************** TIM Instances : Advanced-control timers *****************/
N
N/******************* TIM Instances : Timer input XOR function *****************/
N#define IS_TIM_XOR_INSTANCE(INSTANCE)   ((INSTANCE) == TIM2)
N
N/****************** TIM Instances : DMA requests generation (UDE) *************/
N#define IS_TIM_DMA_INSTANCE(INSTANCE)      (((INSTANCE) == TIM2) || \
N                                            ((INSTANCE) == TIM6))
X#define IS_TIM_DMA_INSTANCE(INSTANCE)      (((INSTANCE) == TIM2) ||                                             ((INSTANCE) == TIM6))
N
N/************ TIM Instances : DMA requests generation (CCxDE) *****************/
N#define IS_TIM_DMA_CC_INSTANCE(INSTANCE)   ((INSTANCE) == TIM2)
N
N/************ TIM Instances : DMA requests generation (COMDE) *****************/
N#define IS_TIM_CCDMA_INSTANCE(INSTANCE)    ((INSTANCE) == TIM2)
N
N/******************** TIM Instances : DMA burst feature ***********************/
N#define IS_TIM_DMABURST_INSTANCE(INSTANCE)  ((INSTANCE) == TIM2)
N
N/****** TIM Instances : master mode available (TIMx_CR2.MMS available )********/
N#define IS_TIM_MASTER_INSTANCE(INSTANCE)   (((INSTANCE) == TIM2)  || \
N                                            ((INSTANCE) == TIM6)  || \
N                                            ((INSTANCE) == TIM21) || \
N                                            ((INSTANCE) == TIM22))
X#define IS_TIM_MASTER_INSTANCE(INSTANCE)   (((INSTANCE) == TIM2)  ||                                             ((INSTANCE) == TIM6)  ||                                             ((INSTANCE) == TIM21) ||                                             ((INSTANCE) == TIM22))
N
N/*********** TIM Instances : Slave mode available (TIMx_SMCR available )*******/
N#define IS_TIM_SLAVE_INSTANCE(INSTANCE)    (((INSTANCE) == TIM2)  || \
N                                            ((INSTANCE) == TIM21) || \
N                                            ((INSTANCE) == TIM22))
X#define IS_TIM_SLAVE_INSTANCE(INSTANCE)    (((INSTANCE) == TIM2)  ||                                             ((INSTANCE) == TIM21) ||                                             ((INSTANCE) == TIM22))
N
N/********************** TIM Instances : 32 bit Counter ************************/
N
N/***************** TIM Instances : external trigger input availabe ************/
N#define IS_TIM_ETR_INSTANCE(INSTANCE)      (((INSTANCE) == TIM2)  || \
N                                            ((INSTANCE) == TIM21) || \
N                                            ((INSTANCE) == TIM22))
X#define IS_TIM_ETR_INSTANCE(INSTANCE)      (((INSTANCE) == TIM2)  ||                                             ((INSTANCE) == TIM21) ||                                             ((INSTANCE) == TIM22))
N
N/****************** TIM Instances : remapping capability **********************/
N#define IS_TIM_REMAP_INSTANCE(INSTANCE) (((INSTANCE) == TIM2)   || \
N                                         ((INSTANCE) == TIM21)  || \
N                                         ((INSTANCE) == TIM22))
X#define IS_TIM_REMAP_INSTANCE(INSTANCE) (((INSTANCE) == TIM2)   ||                                          ((INSTANCE) == TIM21)  ||                                          ((INSTANCE) == TIM22))
N
N/****************** TIM Instances : supporting encoder interface **************/
N#define IS_TIM_ENCODER_INTERFACE_INSTANCE(INSTANCE) (((INSTANCE) == TIM2)   || \
N                                                     ((INSTANCE) == TIM21)  || \
N                                                     ((INSTANCE) == TIM22))
X#define IS_TIM_ENCODER_INTERFACE_INSTANCE(INSTANCE) (((INSTANCE) == TIM2)   ||                                                      ((INSTANCE) == TIM21)  ||                                                      ((INSTANCE) == TIM22))
N
N/******************* TIM Instances : output(s) OCXEC register *****************/
N#define IS_TIM_OCXREF_CLEAR_INSTANCE(INSTANCE)  ((INSTANCE) == TIM2)
N													   
N/******************* TIM Instances : output(s) available **********************/
N#define IS_TIM_CCX_INSTANCE(INSTANCE, CHANNEL) \
N    ((((INSTANCE) == TIM2) &&                  \
N     (((CHANNEL) == TIM_CHANNEL_1) ||          \
N      ((CHANNEL) == TIM_CHANNEL_2) ||          \
N      ((CHANNEL) == TIM_CHANNEL_3) ||          \
N      ((CHANNEL) == TIM_CHANNEL_4)))           \
N     ||                                        \
N     (((INSTANCE) == TIM21) &&                 \
N      (((CHANNEL) == TIM_CHANNEL_1) ||         \
N       ((CHANNEL) == TIM_CHANNEL_2)))          \
N     ||                                        \
N     (((INSTANCE) == TIM22) &&                 \
N      (((CHANNEL) == TIM_CHANNEL_1) ||         \
N       ((CHANNEL) == TIM_CHANNEL_2))))
X#define IS_TIM_CCX_INSTANCE(INSTANCE, CHANNEL)     ((((INSTANCE) == TIM2) &&                       (((CHANNEL) == TIM_CHANNEL_1) ||                ((CHANNEL) == TIM_CHANNEL_2) ||                ((CHANNEL) == TIM_CHANNEL_3) ||                ((CHANNEL) == TIM_CHANNEL_4)))                ||                                             (((INSTANCE) == TIM21) &&                       (((CHANNEL) == TIM_CHANNEL_1) ||                ((CHANNEL) == TIM_CHANNEL_2)))               ||                                             (((INSTANCE) == TIM22) &&                       (((CHANNEL) == TIM_CHANNEL_1) ||                ((CHANNEL) == TIM_CHANNEL_2))))
N
N/******************** UART Instances : Asynchronous mode **********************/
N#define IS_UART_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
N                                    ((INSTANCE) == USART2) || \
N                                    ((INSTANCE) == LPUART1))
X#define IS_UART_INSTANCE(INSTANCE) (((INSTANCE) == USART1) ||                                     ((INSTANCE) == USART2) ||                                     ((INSTANCE) == LPUART1))
N
N/******************** USART Instances : Synchronous mode **********************/
N#define IS_USART_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
N                                     ((INSTANCE) == USART2))
X#define IS_USART_INSTANCE(INSTANCE) (((INSTANCE) == USART1) ||                                      ((INSTANCE) == USART2))
N
N/****************** USART Instances : Auto Baud Rate detection ****************/
N
N#define IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
N                                                            ((INSTANCE) == USART2))
X#define IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(INSTANCE) (((INSTANCE) == USART1) ||                                                             ((INSTANCE) == USART2))
N
N/******************** UART Instances : Half-Duplex mode **********************/
N#define IS_UART_HALFDUPLEX_INSTANCE(INSTANCE)    (((INSTANCE) == USART1) || \
N                                                  ((INSTANCE) == USART2) || \
N                                                  ((INSTANCE) == LPUART1))
X#define IS_UART_HALFDUPLEX_INSTANCE(INSTANCE)    (((INSTANCE) == USART1) ||                                                   ((INSTANCE) == USART2) ||                                                   ((INSTANCE) == LPUART1))
N
N/******************** UART Instances : LIN mode **********************/
N#define IS_UART_LIN_INSTANCE(INSTANCE)    (((INSTANCE) == USART1) || \
N                                           ((INSTANCE) == USART2))
X#define IS_UART_LIN_INSTANCE(INSTANCE)    (((INSTANCE) == USART1) ||                                            ((INSTANCE) == USART2))
N
N/******************** UART Instances : Wake-up from Stop mode **********************/
N#define IS_UART_WAKEUP_FROMSTOP_INSTANCE(INSTANCE)   (((INSTANCE) == USART1) || \
N                                                      ((INSTANCE) == USART2) || \
N                                                      ((INSTANCE) == LPUART1))
X#define IS_UART_WAKEUP_FROMSTOP_INSTANCE(INSTANCE)   (((INSTANCE) == USART1) ||                                                       ((INSTANCE) == USART2) ||                                                       ((INSTANCE) == LPUART1))
N/****************** UART Instances : Hardware Flow control ********************/
N#define IS_UART_HWFLOW_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
N                                           ((INSTANCE) == USART2) || \
N                                           ((INSTANCE) == LPUART1))
X#define IS_UART_HWFLOW_INSTANCE(INSTANCE) (((INSTANCE) == USART1) ||                                            ((INSTANCE) == USART2) ||                                            ((INSTANCE) == LPUART1))
N
N/********************* UART Instances : Smard card mode ***********************/
N#define IS_SMARTCARD_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
N                                         ((INSTANCE) == USART2))
X#define IS_SMARTCARD_INSTANCE(INSTANCE) (((INSTANCE) == USART1) ||                                          ((INSTANCE) == USART2))
N
N/*********************** UART Instances : IRDA mode ***************************/
N#define IS_IRDA_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
N                                    ((INSTANCE) == USART2))
X#define IS_IRDA_INSTANCE(INSTANCE) (((INSTANCE) == USART1) ||                                     ((INSTANCE) == USART2))
N
N/******************** LPUART Instance *****************************************/
N#define IS_LPUART_INSTANCE(INSTANCE)    ((INSTANCE) == LPUART1)
N
N/****************************** IWDG Instances ********************************/
N#define IS_IWDG_ALL_INSTANCE(INSTANCE)  ((INSTANCE) == IWDG)
N
N/****************************** USB Instances ********************************/
N#define IS_USB_ALL_INSTANCE(INSTANCE) ((INSTANCE) == USB)
N
N/****************************** WWDG Instances ********************************/
N#define IS_WWDG_ALL_INSTANCE(INSTANCE)  ((INSTANCE) == WWDG)
N
N/****************************** LCD Instances ********************************/
N#define IS_LCD_ALL_INSTANCE(INSTANCE) ((INSTANCE) == LCD)
N
N/**
N  * @}
N  */
N
N/******************************************************************************/
N/*  For a painless codes migration between the STM32L0xx device product       */
N/*  lines, the aliases defined below are put in place to overcome the         */
N/*  differences in the interrupt handlers and IRQn definitions.               */
N/*  No need to update developed interrupt code when moving across             */ 
N/*  product lines within the same STM32L0 Family                              */
N/******************************************************************************/
N
N/* Aliases for __IRQn */
N
N#define LPUART1_IRQn                   RNG_LPUART1_IRQn
N#define AES_LPUART1_IRQn               RNG_LPUART1_IRQn
N#define AES_RNG_LPUART1_IRQn           RNG_LPUART1_IRQn
N#define TIM6_IRQn                      TIM6_DAC_IRQn
N#define RCC_IRQn                       RCC_CRS_IRQn
N
N/* Aliases for __IRQHandler */
N#define LPUART1_IRQHandler             RNG_LPUART1_IRQHandler
N#define AES_LPUART1_IRQHandler         RNG_LPUART1_IRQHandler
N#define AES_RNG_LPUART1_IRQHandler     RNG_LPUART1_IRQHandler
N#define TIM6_IRQHandler                TIM6_DAC_IRQHandler
N#define RCC_IRQHandler                 RCC_CRS_IRQHandler
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N#ifdef __cplusplus
S}
N#endif /* __cplusplus */
N
N#endif /* __STM32L053xx_H */
N
N
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 147 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include\stm32l0xx.h" 2
N#elif defined(STM32L062xx)
S  #include "stm32l062xx.h"
S#elif defined(STM32L063xx)
S  #include "stm32l063xx.h"
S#elif defined(STM32L061xx)
S  #include "stm32l061xx.h"
S#elif defined(STM32L071xx)
S  #include "stm32l071xx.h"
S#elif defined(STM32L072xx)
S  #include "stm32l072xx.h"
S#elif defined(STM32L073xx)
S  #include "stm32l073xx.h"
S#elif defined(STM32L082xx)
S  #include "stm32l082xx.h"
S#elif defined(STM32L083xx)
S  #include "stm32l083xx.h"
S#elif defined(STM32L081xx)
S  #include "stm32l081xx.h"
S#else
S #error "Please select first the target STM32L0xx device used in your application (in stm32l0xx.h file)"
N#endif
N
N/**
N  * @}
N  */
N
N/** @addtogroup Exported_types
N  * @{
N  */ 
Ntypedef enum 
N{
N  RESET = 0, 
N  SET = !RESET
N} FlagStatus, ITStatus;
N
Ntypedef enum 
N{
N  DISABLE = 0, 
N  ENABLE = !DISABLE
N} FunctionalState;
N#define IS_FUNCTIONAL_STATE(STATE) (((STATE) == DISABLE) || ((STATE) == ENABLE))
N
Ntypedef enum 
N{
N  ERROR = 0, 
N  SUCCESS = !ERROR
N} ErrorStatus;
N
N/**
N  * @}
N  */
N
N
N/** @addtogroup Exported_macro
N  * @{
N  */
N#define SET_BIT(REG, BIT)     ((REG) |= (BIT))
N
N#define CLEAR_BIT(REG, BIT)   ((REG) &= ~(BIT))
N
N#define READ_BIT(REG, BIT)    ((REG) & (BIT))
N
N#define CLEAR_REG(REG)        ((REG) = (0x0))
N
N#define WRITE_REG(REG, VAL)   ((REG) = (VAL))
N
N#define READ_REG(REG)         ((REG))
N
N#define MODIFY_REG(REG, CLEARMASK, SETMASK)  WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))
N
N/**
N  * @}
N  */
N
N#if defined (USE_HAL_DRIVER)
X#if 1L
N #include "stm32l0xx_hal.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal.h
N  * @author  MCD Application Team
N  * @brief   This file contains all the functions prototypes for the HAL 
N  *          module driver.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_H
S#define __STM32L0xx_HAL_H
S
S#ifdef __cplusplus
S extern "C" {
S#endif
S
S/* Includes ------------------------------------------------------------------*/
S#include "stm32l0xx_hal_conf.h"
S
S/** @addtogroup STM32L0xx_HAL_Driver
S  * @{
S  */
S
S/** @defgroup HAL HAL
S  * @{
S  */ 
S/** @defgroup HAL_Exported_Constants HAL Exported Constants
S  * @{
S  */ 
S
S/** @defgroup SYSCFG_BootMode Boot Mode
S  * @{
S  */
S#define SYSCFG_BOOT_MAINFLASH          ((uint32_t)0x00000000U)
S#define SYSCFG_BOOT_SYSTEMFLASH        ((uint32_t)SYSCFG_CFGR1_BOOT_MODE_0)
S#define SYSCFG_BOOT_SRAM               ((uint32_t)SYSCFG_CFGR1_BOOT_MODE)     
S
S/**
S  * @}
S  */ 
S
S/** @defgroup DBGMCU_Low_Power_Config DBGMCU Low Power Configuration
S  * @{
S  */
S#define DBGMCU_SLEEP                 DBGMCU_CR_DBG_SLEEP
S#define DBGMCU_STOP                  DBGMCU_CR_DBG_STOP
S#define DBGMCU_STANDBY               DBGMCU_CR_DBG_STANDBY
S#define IS_DBGMCU_PERIPH(__PERIPH__) ((((__PERIPH__) & (~(DBGMCU_CR_DBG))) == 0x00U) && ((__PERIPH__) != 0x00U))
S
S
S/**
S  * @}
S  */
S  
S#if defined (LCD_BASE) /* STM32L0x3xx only */
S/** @defgroup SYSCFG_LCD_EXT_CAPA SYSCFG LCD External Capacitors
S  * @{
S  */
S#define SYSCFG_LCD_EXT_CAPA             SYSCFG_CFGR2_CAPA /*!< Connection of internal Vlcd rail to external capacitors */
S#define SYSCFG_VLCD_PB2_EXT_CAPA_ON     SYSCFG_CFGR2_CAPA_0  /*!< Connection on PB2   */
S#define SYSCFG_VLCD_PB12_EXT_CAPA_ON    SYSCFG_CFGR2_CAPA_1  /*!< Connection on PB12  */
S#define SYSCFG_VLCD_PB0_EXT_CAPA_ON     SYSCFG_CFGR2_CAPA_2  /*!< Connection on PB0   */
S#if defined (SYSCFG_CFGR2_CAPA_3)
S#define SYSCFG_VLCD_PE11_EXT_CAPA_ON    SYSCFG_CFGR2_CAPA_3  /*!< Connection on PE11  */
S#endif
S#if defined (SYSCFG_CFGR2_CAPA_4)
S#define SYSCFG_VLCD_PE12_EXT_CAPA_ON    SYSCFG_CFGR2_CAPA_4  /*!< Connection on PE12  */
S#endif                        
S
S/**
S  * @}
S  */
S#endif
S
S/** @defgroup SYSCFG_VREFINT_OUT_SELECT SYSCFG VREFINT Out Selection
S  * @{
S  */ 
S#define SYSCFG_VREFINT_OUT_NONE          ((uint32_t)0x00000000U) /* no pad connected */  
S#define SYSCFG_VREFINT_OUT_PB0           SYSCFG_CFGR3_VREF_OUT_0 /* Selects PBO as output for the Vrefint */
S#define SYSCFG_VREFINT_OUT_PB1           SYSCFG_CFGR3_VREF_OUT_1 /* Selects PB1 as output for the Vrefint */
S#define SYSCFG_VREFINT_OUT_PB0_PB1       SYSCFG_CFGR3_VREF_OUT   /* Selects PBO and PB1 as output for the Vrefint */
S
S#define IS_SYSCFG_VREFINT_OUT_SELECT(OUTPUT)   (((OUTPUT) == SYSCFG_VREFINT_OUT_NONE)  || \
S                                                ((OUTPUT) == SYSCFG_VREFINT_OUT_PB0)  || \
S                                                ((OUTPUT) == SYSCFG_VREFINT_OUT_PB1)  || \
S                                                ((OUTPUT) == SYSCFG_VREFINT_OUT_PB0_PB1))
X#define IS_SYSCFG_VREFINT_OUT_SELECT(OUTPUT)   (((OUTPUT) == SYSCFG_VREFINT_OUT_NONE)  ||                                                 ((OUTPUT) == SYSCFG_VREFINT_OUT_PB0)  ||                                                 ((OUTPUT) == SYSCFG_VREFINT_OUT_PB1)  ||                                                 ((OUTPUT) == SYSCFG_VREFINT_OUT_PB0_PB1))
S/**
S  * @}
S  */ 
S
S/** @defgroup SYSCFG_flags_definition SYSCFG Flags Definition
S  * @{
S  */
S#define SYSCFG_FLAG_VREFINT_READY      SYSCFG_CFGR3_VREFINT_RDYF
S
S#define IS_SYSCFG_FLAG(FLAG)           ((FLAG) == SYSCFG_FLAG_VREFINT_READY))
S
S/**
S  * @}
S  */
S  
S/** @defgroup SYSCFG_FastModePlus_GPIO Fast Mode Plus on GPIO 
S  * @{
S  */ 
S/** @brief  Fast mode Plus driving capability on a specific GPIO  
S  */  
S#if defined (SYSCFG_CFGR2_I2C_PB6_FMP)
S#define SYSCFG_FASTMODEPLUS_PB6       SYSCFG_CFGR2_I2C_PB6_FMP  /* Enable Fast Mode Plus on PB6 */
S#endif
S#if defined (SYSCFG_CFGR2_I2C_PB7_FMP)
S#define SYSCFG_FASTMODEPLUS_PB7       SYSCFG_CFGR2_I2C_PB7_FMP  /* Enable Fast Mode Plus on PB7 */
S#endif
S#if defined (SYSCFG_CFGR2_I2C_PB8_FMP)
S#define SYSCFG_FASTMODEPLUS_PB8       SYSCFG_CFGR2_I2C_PB8_FMP  /* Enable Fast Mode Plus on PB8 */
S#endif
S#if defined (SYSCFG_CFGR2_I2C_PB9_FMP)
S#define SYSCFG_FASTMODEPLUS_PB9       SYSCFG_CFGR2_I2C_PB9_FMP  /* Enable Fast Mode Plus on PB9 */
S#endif
S
S#define IS_SYSCFG_FASTMODEPLUS(PIN) ((((PIN) & (SYSCFG_FASTMODEPLUS_PB6)) == SYSCFG_FASTMODEPLUS_PB6)  || \
S                                     (((PIN) & (SYSCFG_FASTMODEPLUS_PB7)) == SYSCFG_FASTMODEPLUS_PB7)  || \
S                                     (((PIN) & (SYSCFG_FASTMODEPLUS_PB8)) == SYSCFG_FASTMODEPLUS_PB8)  || \
S                                     (((PIN) & (SYSCFG_FASTMODEPLUS_PB9)) == SYSCFG_FASTMODEPLUS_PB9)  )
X#define IS_SYSCFG_FASTMODEPLUS(PIN) ((((PIN) & (SYSCFG_FASTMODEPLUS_PB6)) == SYSCFG_FASTMODEPLUS_PB6)  ||                                      (((PIN) & (SYSCFG_FASTMODEPLUS_PB7)) == SYSCFG_FASTMODEPLUS_PB7)  ||                                      (((PIN) & (SYSCFG_FASTMODEPLUS_PB8)) == SYSCFG_FASTMODEPLUS_PB8)  ||                                      (((PIN) & (SYSCFG_FASTMODEPLUS_PB9)) == SYSCFG_FASTMODEPLUS_PB9)  )
S/**
S * @}
S */
S /**
S  * @}
S  */ 
S  
S /** @defgroup HAL_Exported_Macros HAL Exported Macros
S  * @{
S  */  
S
S/** @brief  Freeze/Unfreeze Peripherals in Debug mode 
S  */
S#if defined (DBGMCU_APB1_FZ_DBG_TIM2_STOP)
S/**
S  * @brief  TIM2 Peripherals Debug mode 
S  */ 
S#define __HAL_DBGMCU_FREEZE_TIM2()     SET_BIT(DBGMCU->APB1FZ,DBGMCU_APB1_FZ_DBG_TIM2_STOP)
S#define __HAL_DBGMCU_UNFREEZE_TIM2()   CLEAR_BIT(DBGMCU->APB1FZ,DBGMCU_APB1_FZ_DBG_TIM2_STOP)
S#endif
S
S#if defined (DBGMCU_APB1_FZ_DBG_TIM3_STOP)
S/**
S  * @brief  TIM3 Peripherals Debug mode 
S  */ 
S#define __HAL_DBGMCU_FREEZE_TIM3()     SET_BIT(DBGMCU->APB1FZ,DBGMCU_APB1_FZ_DBG_TIM3_STOP)
S#define __HAL_DBGMCU_UNFREEZE_TIM3()   CLEAR_BIT(DBGMCU->APB1FZ,DBGMCU_APB1_FZ_DBG_TIM3_STOP)
S#endif
S
S#if defined (DBGMCU_APB1_FZ_DBG_TIM6_STOP)
S/**
S  * @brief  TIM6 Peripherals Debug mode 
S  */
S#define __HAL_DBGMCU_FREEZE_TIM6()     SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_TIM6_STOP)
S#define __HAL_DBGMCU_UNFREEZE_TIM6()   CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_TIM6_STOP)
S#endif
S
S#if defined (DBGMCU_APB1_FZ_DBG_TIM7_STOP)
S/**
S  * @brief  TIM7 Peripherals Debug mode 
S  */
S#define __HAL_DBGMCU_FREEZE_TIM7()     SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_TIM7_STOP)
S#define __HAL_DBGMCU_UNFREEZE_TIM7()   CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_TIM7_STOP)
S#endif
S
S#if defined (DBGMCU_APB1_FZ_DBG_RTC_STOP)
S/**
S  * @brief  RTC Peripherals Debug mode 
S  */
S#define __HAL_DBGMCU_FREEZE_RTC()      SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_RTC_STOP)
S#define __HAL_DBGMCU_UNFREEZE_RTC()    CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_RTC_STOP)
S#endif
S
S#if defined (DBGMCU_APB1_FZ_DBG_WWDG_STOP)
S/**
S  * @brief  WWDG Peripherals Debug mode 
S  */
S#define __HAL_DBGMCU_FREEZE_WWDG()     SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_WWDG_STOP)
S#define __HAL_DBGMCU_UNFREEZE_WWDG()   CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_WWDG_STOP)
S#endif
S
S#if defined (DBGMCU_APB1_FZ_DBG_IWDG_STOP)
S/**
S  * @brief  IWDG Peripherals Debug mode 
S  */
S#define __HAL_DBGMCU_FREEZE_IWDG()     SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_IWDG_STOP)
S#define __HAL_DBGMCU_UNFREEZE_IWDG()   CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_IWDG_STOP)
S#endif
S
S#if defined (DBGMCU_APB1_FZ_DBG_I2C1_STOP)
S/**
S  * @brief  I2C1 Peripherals Debug mode 
S  */
S#define __HAL_DBGMCU_FREEZE_I2C1_TIMEOUT()   SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C1_STOP)
S#define __HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT_DBGMCU() CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C1_STOP)
S#endif
S
S#if defined (DBGMCU_APB1_FZ_DBG_I2C2_STOP)
S/**
S  * @brief  I2C2 Peripherals Debug mode 
S  */
S#define __HAL_DBGMCU_FREEZE_I2C2_TIMEOUT_DBGMCU()   SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C2_STOP)
S#define __HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT_DBGMCU() CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C2_STOP)
S#endif
S
S#if defined (DBGMCU_APB1_FZ_DBG_I2C3_STOP)
S/**
S  * @brief  I2C3 Peripherals Debug mode 
S  */
S#define __HAL_DBGMCU_FREEZE_I2C3_TIMEOUT()   SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C3_STOP)
S#define __HAL_DBGMCU_UNFREEZE_I2C3_TIMEOUT() CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C3_STOP)
S#endif
S
S#if defined (DBGMCU_APB1_FZ_DBG_LPTIMER_STOP)
S/**
S  * @brief  LPTIMER Peripherals Debug mode 
S  */
S#define __HAL_DBGMCU_FREEZE_LPTIMER()        SET_BIT(DBGMCU->APB1FZ ,DBGMCU_APB1_FZ_DBG_LPTIMER_STOP)
S#define __HAL_DBGMCU_UNFREEZE_LPTIMER()      CLEAR_BIT(DBGMCU->APB1FZ ,DBGMCU_APB1_FZ_DBG_LPTIMER_STOP)
S#endif
S
S#if defined (DBGMCU_APB2_FZ_DBG_TIM22_STOP)
S/**
S  * @brief  TIM22 Peripherals Debug mode 
S  */
S#define __HAL_DBGMCU_FREEZE_TIM22()          SET_BIT(DBGMCU->APB2FZ, DBGMCU_APB2_FZ_DBG_TIM22_STOP)
S#define __HAL_DBGMCU_UNFREEZE_TIM22()        CLEAR_BIT(DBGMCU->APB2FZ, DBGMCU_APB2_FZ_DBG_TIM22_STOP)
S#endif
S
S#if defined (DBGMCU_APB2_FZ_DBG_TIM21_STOP)
S/**
S  * @brief  TIM21 Peripherals Debug mode 
S  */
S#define __HAL_DBGMCU_FREEZE_TIM21()          SET_BIT(DBGMCU->APB2FZ, DBGMCU_APB2_FZ_DBG_TIM21_STOP)
S#define __HAL_DBGMCU_UNFREEZE_TIM21()        CLEAR_BIT(DBGMCU->APB2FZ, DBGMCU_APB2_FZ_DBG_TIM21_STOP)
S#endif
S
S/** @brief  Main Flash memory mapped at 0x00000000
S  */
S#define __HAL_SYSCFG_REMAPMEMORY_FLASH()     CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_MEM_MODE)
S
S/** @brief  System Flash memory mapped at 0x00000000
S  */
S#define __HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH()      MODIFY_REG(SYSCFG->CFGR1, SYSCFG_CFGR1_MEM_MODE, SYSCFG_CFGR1_MEM_MODE_0)
S
S
S/** @brief  Embedded SRAM mapped at 0x00000000
S  */                                      
S#define __HAL_SYSCFG_REMAPMEMORY_SRAM()             MODIFY_REG(SYSCFG->CFGR1, SYSCFG_CFGR1_MEM_MODE, SYSCFG_CFGR1_MEM_MODE_0 | SYSCFG_CFGR1_MEM_MODE_1)
S
S/** @brief  Configuration of the DBG Low Power mode.
S  * @param  __DBGLPMODE__: bit field to indicate in wich Low Power mode DBG is still active.
S  *         This parameter can be a value of
S  *         - DBGMCU_SLEEP
S  *         - DBGMCU_STOP
S  *         - DBGMCU_STANDBY
S  */
S#define __HAL_SYSCFG_DBG_LP_CONFIG(__DBGLPMODE__)    do {assert_param(IS_DBGMCU_PERIPH(__DBGLPMODE__)); \
S                                                       MODIFY_REG(DBGMCU->CR, DBGMCU_CR_DBG, (__DBGLPMODE__)); \
S                                                     } while (0) 
X#define __HAL_SYSCFG_DBG_LP_CONFIG(__DBGLPMODE__)    do {assert_param(IS_DBGMCU_PERIPH(__DBGLPMODE__));                                                        MODIFY_REG(DBGMCU->CR, DBGMCU_CR_DBG, (__DBGLPMODE__));                                                      } while (0) 
S
S#if defined (LCD_BASE) /* STM32L0x3xx only */  
S                                                       
S/** @brief  Macro to configure the VLCD Decoupling capacitance connection.
S  *
S  * @param  __SYSCFG_VLCD_CAPA__: specifies the decoupling of LCD capacitance for rails connection on GPIO.
S  *          This parameter can be a combination of following values (when available):
S  *            @arg SYSCFG_VLCD_PB2_EXT_CAPA_ON:  Connection on PB2   
S  *            @arg SYSCFG_VLCD_PB12_EXT_CAPA_ON: Connection on PB12
S  *            @arg SYSCFG_VLCD_PB0_EXT_CAPA_ON:  Connection on PB0
S  *            @arg SYSCFG_VLCD_PE11_EXT_CAPA_ON: Connection on PE11
S  *            @arg SYSCFG_VLCD_PE12_EXT_CAPA_ON: Connection on PE12   
S  * @retval None
S  */
S#define __HAL_SYSCFG_VLCD_CAPA_CONFIG(__SYSCFG_VLCD_CAPA__) \
S                  MODIFY_REG(SYSCFG->CFGR2, SYSCFG_LCD_EXT_CAPA, (uint32_t)(__SYSCFG_VLCD_CAPA__))
X#define __HAL_SYSCFG_VLCD_CAPA_CONFIG(__SYSCFG_VLCD_CAPA__)                   MODIFY_REG(SYSCFG->CFGR2, SYSCFG_LCD_EXT_CAPA, (uint32_t)(__SYSCFG_VLCD_CAPA__))
S
S/**
S  * @brief  Returns the decoupling of LCD capacitance configured by user.
S  * @retval The LCD capacitance connection as configured by user. The returned can be a combination of :
S  *            SYSCFG_VLCD_PB2_EXT_CAPA_ON:  Connection on PB2   
S  *            SYSCFG_VLCD_PB12_EXT_CAPA_ON: Connection on PB12
S  *            SYSCFG_VLCD_PB0_EXT_CAPA_ON:  Connection on PB0
S  *            SYSCFG_VLCD_PE11_EXT_CAPA_ON: Connection on PE11
S  *            SYSCFG_VLCD_PE12_EXT_CAPA_ON: Connection on PE12 
S  */
S#define __HAL_SYSCFG_GET_VLCD_CAPA_CONFIG()          READ_BIT(SYSCFG->CFGR2, SYSCFG_LCD_EXT_CAPA)
S              
S#endif
S                                                        
S/**
S  * @brief  Returns the boot mode as configured by user.
S  * @retval The boot mode as configured by user. The returned can be a value of :
S  *     - SYSCFG_BOOT_MAINFLASH
S  *     - SYSCFG_BOOT_SYSTEMFLASH
S  *     - SYSCFG_BOOT_SRAM
S  */
S#define __HAL_SYSCFG_GET_BOOT_MODE()          READ_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_BOOT_MODE)
S
S
S/** @brief  Check whether the specified SYSCFG flag is set or not.
S  * @param  __FLAG__: specifies the flag to check.
S  *         The only parameter supported is SYSCFG_FLAG_VREFINT_READY
S  * @retval The new state of __FLAG__ (TRUE or FALSE).
S  */
S#define __HAL_SYSCFG_GET_FLAG(__FLAG__) (((SYSCFG->CFGR3) & (__FLAG__)) == (__FLAG__))
S
S/** @brief  Fast mode Plus driving capability enable macro
S  * @param __FASTMODEPLUS__: This parameter can be a value of : 
S  *     @arg SYSCFG_FASTMODEPLUS_PB6
S  *     @arg SYSCFG_FASTMODEPLUS_PB7
S  *     @arg SYSCFG_FASTMODEPLUS_PB8
S  *     @arg SYSCFG_FASTMODEPLUS_PB9
S  */
S#define __HAL_SYSCFG_FASTMODEPLUS_ENABLE(__FASTMODEPLUS__)  do {assert_param(IS_SYSCFG_FASTMODEPLUS((__FASTMODEPLUS__))); \
S                                                                SET_BIT(SYSCFG->CFGR2, (__FASTMODEPLUS__));                 \
S                                                               }while(0)
X#define __HAL_SYSCFG_FASTMODEPLUS_ENABLE(__FASTMODEPLUS__)  do {assert_param(IS_SYSCFG_FASTMODEPLUS((__FASTMODEPLUS__)));                                                                 SET_BIT(SYSCFG->CFGR2, (__FASTMODEPLUS__));                                                                                }while(0)
S/** @brief  Fast mode Plus driving capability disable macro
S  * @param __FASTMODEPLUS__: This parameter can be a value of : 
S  *     @arg SYSCFG_FASTMODEPLUS_PB6
S  *     @arg SYSCFG_FASTMODEPLUS_PB7
S  *     @arg SYSCFG_FASTMODEPLUS_PB8
S  *     @arg SYSCFG_FASTMODEPLUS_PB9
S  */
S#define __HAL_SYSCFG_FASTMODEPLUS_DISABLE(__FASTMODEPLUS__) do {assert_param(IS_SYSCFG_FASTMODEPLUS((__FASTMODEPLUS__))); \
S                                                                CLEAR_BIT(SYSCFG->CFGR2, (__FASTMODEPLUS__));               \
S                                                               }while(0)
X#define __HAL_SYSCFG_FASTMODEPLUS_DISABLE(__FASTMODEPLUS__) do {assert_param(IS_SYSCFG_FASTMODEPLUS((__FASTMODEPLUS__)));                                                                 CLEAR_BIT(SYSCFG->CFGR2, (__FASTMODEPLUS__));                                                                              }while(0)
S
S
S/**                  
S  * @}
S  */
S
S/** @defgroup HAL_Exported_Functions HAL Exported Functions
S  * @{
S  */
S/** @defgroup HAL_Exported_Functions_Group1 Initialization and de-initialization functions
S *  @brief    Initialization and de-initialization functions
S * @{
S  */
SHAL_StatusTypeDef HAL_Init(void);
SHAL_StatusTypeDef HAL_DeInit(void);
Svoid HAL_MspInit(void);
Svoid HAL_MspDeInit(void);
SHAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority);
S
S/**                  
S  * @}
S  */
S  
S /** @defgroup HAL_Exported_Functions_Group2 Peripheral Control functions 
S  *  @brief    Peripheral Control functions
S  * @{
S  */
Svoid HAL_IncTick(void);
Svoid HAL_Delay(__IO uint32_t Delay);
Suint32_t HAL_GetTick(void);
Svoid HAL_SuspendTick(void);
Svoid HAL_ResumeTick(void);
Suint32_t HAL_GetHalVersion(void);
Suint32_t HAL_GetREVID(void);
Suint32_t HAL_GetDEVID(void);
Svoid HAL_DBGMCU_EnableDBGSleepMode(void);
Svoid HAL_DBGMCU_DisableDBGSleepMode(void);
Svoid HAL_DBGMCU_EnableDBGStopMode(void);
Svoid HAL_DBGMCU_DisableDBGStopMode(void);
Svoid HAL_DBGMCU_EnableDBGStandbyMode(void);
Svoid HAL_DBGMCU_DisableDBGStandbyMode(void);
Svoid HAL_DBGMCU_DBG_EnableLowPowerConfig(uint32_t Periph);
Svoid HAL_DBGMCU_DBG_DisableLowPowerConfig(uint32_t Periph);
Suint32_t  HAL_SYSCFG_GetBootMode(void);
Svoid HAL_SYSCFG_Enable_Lock_VREFINT(void);
Svoid HAL_SYSCFG_Disable_Lock_VREFINT(void);
Svoid HAL_SYSCFG_VREFINT_OutputSelect(uint32_t SYSCFG_Vrefint_OUTPUT);
S
S/**                  
S  * @}
S  */
S/**                  
S  * @}
S  */
S
S/* Define the private group ***********************************/
S/**************************************************************/
S/** @defgroup HAL_Private HAL Private
S  * @{
S  */
S/**
S  * @}
S  */
S/**************************************************************/
S
S
S/**
S  * @}
S  */ 
S
S/**
S  * @}
S  */ 
S  
S#ifdef __cplusplus
S}
S#endif
S
N#endif /* __STM32L0xx_HAL_H */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
L 223 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include\stm32l0xx.h" 2
N#endif /* USE_HAL_DRIVER */
N
N#ifdef __cplusplus
S}
N#endif /* __cplusplus */
N
N#endif /* __STM32L0xx_H */
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N  
N
N
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 47 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_def.h" 2
N#include "Legacy/stm32_hal_legacy.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\Legacy/stm32_hal_legacy.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32_hal_legacy.h
N  * @author  MCD Application Team
N  * @brief   This file contains aliases definition for the STM32Cube HAL constants 
N  *          macros and functions maintained for legacy purpose.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32_HAL_LEGACY
N#define __STM32_HAL_LEGACY
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N/* Exported types ------------------------------------------------------------*/
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup HAL_AES_Aliased_Defines HAL CRYP Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define AES_FLAG_RDERR                  CRYP_FLAG_RDERR
N#define AES_FLAG_WRERR                  CRYP_FLAG_WRERR
N#define AES_CLEARFLAG_CCF               CRYP_CLEARFLAG_CCF
N#define AES_CLEARFLAG_RDERR             CRYP_CLEARFLAG_RDERR
N#define AES_CLEARFLAG_WRERR             CRYP_CLEARFLAG_WRERR
N
N/**
N  * @}
N  */
N  
N/** @defgroup HAL_ADC_Aliased_Defines HAL ADC Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define ADC_RESOLUTION12b               ADC_RESOLUTION_12B
N#define ADC_RESOLUTION10b               ADC_RESOLUTION_10B
N#define ADC_RESOLUTION8b                ADC_RESOLUTION_8B
N#define ADC_RESOLUTION6b                ADC_RESOLUTION_6B
N#define OVR_DATA_OVERWRITTEN            ADC_OVR_DATA_OVERWRITTEN
N#define OVR_DATA_PRESERVED              ADC_OVR_DATA_PRESERVED
N#define EOC_SINGLE_CONV                 ADC_EOC_SINGLE_CONV
N#define EOC_SEQ_CONV                    ADC_EOC_SEQ_CONV
N#define EOC_SINGLE_SEQ_CONV             ADC_EOC_SINGLE_SEQ_CONV
N#define REGULAR_GROUP                   ADC_REGULAR_GROUP
N#define INJECTED_GROUP                  ADC_INJECTED_GROUP
N#define REGULAR_INJECTED_GROUP          ADC_REGULAR_INJECTED_GROUP
N#define AWD_EVENT                       ADC_AWD_EVENT
N#define AWD1_EVENT                      ADC_AWD1_EVENT
N#define AWD2_EVENT                      ADC_AWD2_EVENT
N#define AWD3_EVENT                      ADC_AWD3_EVENT
N#define OVR_EVENT                       ADC_OVR_EVENT
N#define JQOVF_EVENT                     ADC_JQOVF_EVENT
N#define ALL_CHANNELS                    ADC_ALL_CHANNELS
N#define REGULAR_CHANNELS                ADC_REGULAR_CHANNELS
N#define INJECTED_CHANNELS               ADC_INJECTED_CHANNELS
N#define SYSCFG_FLAG_SENSOR_ADC          ADC_FLAG_SENSOR
N#define SYSCFG_FLAG_VREF_ADC            ADC_FLAG_VREFINT
N#define ADC_CLOCKPRESCALER_PCLK_DIV1    ADC_CLOCK_SYNC_PCLK_DIV1
N#define ADC_CLOCKPRESCALER_PCLK_DIV2    ADC_CLOCK_SYNC_PCLK_DIV2
N#define ADC_CLOCKPRESCALER_PCLK_DIV4    ADC_CLOCK_SYNC_PCLK_DIV4
N#define ADC_CLOCKPRESCALER_PCLK_DIV6    ADC_CLOCK_SYNC_PCLK_DIV6
N#define ADC_CLOCKPRESCALER_PCLK_DIV8    ADC_CLOCK_SYNC_PCLK_DIV8
N#define ADC_EXTERNALTRIG0_T6_TRGO       ADC_EXTERNALTRIGCONV_T6_TRGO 
N#define ADC_EXTERNALTRIG1_T21_CC2       ADC_EXTERNALTRIGCONV_T21_CC2 
N#define ADC_EXTERNALTRIG2_T2_TRGO       ADC_EXTERNALTRIGCONV_T2_TRGO 
N#define ADC_EXTERNALTRIG3_T2_CC4        ADC_EXTERNALTRIGCONV_T2_CC4  
N#define ADC_EXTERNALTRIG4_T22_TRGO      ADC_EXTERNALTRIGCONV_T22_TRGO
N#define ADC_EXTERNALTRIG7_EXT_IT11      ADC_EXTERNALTRIGCONV_EXT_IT11
N#define ADC_CLOCK_ASYNC                 ADC_CLOCK_ASYNC_DIV1
N#define ADC_EXTERNALTRIG_EDGE_NONE      ADC_EXTERNALTRIGCONVEDGE_NONE
N#define ADC_EXTERNALTRIG_EDGE_RISING    ADC_EXTERNALTRIGCONVEDGE_RISING
N#define ADC_EXTERNALTRIG_EDGE_FALLING   ADC_EXTERNALTRIGCONVEDGE_FALLING
N#define ADC_EXTERNALTRIG_EDGE_RISINGFALLING ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING
N#define ADC_SAMPLETIME_2CYCLE_5         ADC_SAMPLETIME_2CYCLES_5
N
N#define HAL_ADC_STATE_BUSY_REG          HAL_ADC_STATE_REG_BUSY
N#define HAL_ADC_STATE_BUSY_INJ          HAL_ADC_STATE_INJ_BUSY
N#define HAL_ADC_STATE_EOC_REG           HAL_ADC_STATE_REG_EOC
N#define HAL_ADC_STATE_EOC_INJ           HAL_ADC_STATE_INJ_EOC
N#define HAL_ADC_STATE_ERROR             HAL_ADC_STATE_ERROR_INTERNAL
N#define HAL_ADC_STATE_BUSY              HAL_ADC_STATE_BUSY_INTERNAL
N#define HAL_ADC_STATE_AWD               HAL_ADC_STATE_AWD1 
N/**
N  * @}
N  */
N  
N/** @defgroup HAL_CEC_Aliased_Defines HAL CEC Aliased Defines maintained for legacy purpose
N  * @{
N  */ 
N  
N#define __HAL_CEC_GET_IT __HAL_CEC_GET_FLAG 
N
N/**
N  * @}
N  */   
N   
N/** @defgroup HAL_COMP_Aliased_Defines HAL COMP Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define COMP_WINDOWMODE_DISABLED       COMP_WINDOWMODE_DISABLE
N#define COMP_WINDOWMODE_ENABLED        COMP_WINDOWMODE_ENABLE
N#define COMP_EXTI_LINE_COMP1_EVENT     COMP_EXTI_LINE_COMP1
N#define COMP_EXTI_LINE_COMP2_EVENT     COMP_EXTI_LINE_COMP2
N#define COMP_EXTI_LINE_COMP3_EVENT     COMP_EXTI_LINE_COMP3
N#define COMP_EXTI_LINE_COMP4_EVENT     COMP_EXTI_LINE_COMP4
N#define COMP_EXTI_LINE_COMP5_EVENT     COMP_EXTI_LINE_COMP5
N#define COMP_EXTI_LINE_COMP6_EVENT     COMP_EXTI_LINE_COMP6
N#define COMP_EXTI_LINE_COMP7_EVENT     COMP_EXTI_LINE_COMP7
N#if defined(STM32L0)
X#if 1L
N#define COMP_LPTIMCONNECTION_ENABLED   ((uint32_t)0x00000003U)    /*!< COMPX output generic naming: connected to LPTIM input 1 for COMP1, LPTIM input 2 for COMP2 */
N#endif
N#define COMP_OUTPUT_COMP6TIM2OCREFCLR  COMP_OUTPUT_COMP6_TIM2OCREFCLR
N#if defined(STM32F373xC) || defined(STM32F378xx)
X#if 0L || 0L
S#define COMP_OUTPUT_TIM3IC1            COMP_OUTPUT_COMP1_TIM3IC1
S#define COMP_OUTPUT_TIM3OCREFCLR       COMP_OUTPUT_COMP1_TIM3OCREFCLR
N#endif /* STM32F373xC || STM32F378xx */
N
N#if defined(STM32L0) || defined(STM32L4)
X#if 1L || 0L
N#define COMP_WINDOWMODE_ENABLE         COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON
N
N#define COMP_NONINVERTINGINPUT_IO1      COMP_INPUT_PLUS_IO1
N#define COMP_NONINVERTINGINPUT_IO2      COMP_INPUT_PLUS_IO2
N#define COMP_NONINVERTINGINPUT_IO3      COMP_INPUT_PLUS_IO3
N#define COMP_NONINVERTINGINPUT_IO4      COMP_INPUT_PLUS_IO4
N#define COMP_NONINVERTINGINPUT_IO5      COMP_INPUT_PLUS_IO5
N#define COMP_NONINVERTINGINPUT_IO6      COMP_INPUT_PLUS_IO6
N 
N#define COMP_INVERTINGINPUT_1_4VREFINT  COMP_INPUT_MINUS_1_4VREFINT
N#define COMP_INVERTINGINPUT_1_2VREFINT  COMP_INPUT_MINUS_1_2VREFINT
N#define COMP_INVERTINGINPUT_3_4VREFINT  COMP_INPUT_MINUS_3_4VREFINT
N#define COMP_INVERTINGINPUT_VREFINT     COMP_INPUT_MINUS_VREFINT
N#define COMP_INVERTINGINPUT_DAC1_CH1    COMP_INPUT_MINUS_DAC1_CH1
N#define COMP_INVERTINGINPUT_DAC1_CH2    COMP_INPUT_MINUS_DAC1_CH2
N#define COMP_INVERTINGINPUT_DAC1        COMP_INPUT_MINUS_DAC1_CH1
N#define COMP_INVERTINGINPUT_DAC2        COMP_INPUT_MINUS_DAC1_CH2
N#define COMP_INVERTINGINPUT_IO1         COMP_INPUT_MINUS_IO1
N#if defined(STM32L0)
X#if 1L
N/* Issue fixed on STM32L0 COMP driver: only 2 dedicated IO (IO1 and IO2),     */
N/* IO2 was wrongly assigned to IO shared with DAC and IO3 was corresponding   */
N/* to the second dedicated IO (only for COMP2).                               */
N#define COMP_INVERTINGINPUT_IO2         COMP_INPUT_MINUS_DAC1_CH2
N#define COMP_INVERTINGINPUT_IO3         COMP_INPUT_MINUS_IO2
N#else
S#define COMP_INVERTINGINPUT_IO2         COMP_INPUT_MINUS_IO2
S#define COMP_INVERTINGINPUT_IO3         COMP_INPUT_MINUS_IO3
N#endif
N#define COMP_INVERTINGINPUT_IO4         COMP_INPUT_MINUS_IO4
N#define COMP_INVERTINGINPUT_IO5         COMP_INPUT_MINUS_IO5
N
N#define COMP_OUTPUTLEVEL_LOW            COMP_OUTPUT_LEVEL_LOW
N#define COMP_OUTPUTLEVEL_HIGH           COMP_OUTPUT_LEVEL_HIGH
N
N/* Note: Literal "COMP_FLAG_LOCK" kept for legacy purpose.                    */
N/*       To check COMP lock state, use macro "__HAL_COMP_IS_LOCKED()".        */
N#if defined(COMP_CSR_LOCK)
X#if 0L
S#define COMP_FLAG_LOCK                 COMP_CSR_LOCK
N#elif defined(COMP_CSR_COMP1LOCK)
X#elif 1L
N#define COMP_FLAG_LOCK                 COMP_CSR_COMP1LOCK
N#elif defined(COMP_CSR_COMPxLOCK)
S#define COMP_FLAG_LOCK                 COMP_CSR_COMPxLOCK
N#endif
N
N#if defined(STM32L4)
X#if 0L
S#define COMP_BLANKINGSRCE_TIM1OC5        COMP_BLANKINGSRC_TIM1_OC5_COMP1
S#define COMP_BLANKINGSRCE_TIM2OC3        COMP_BLANKINGSRC_TIM2_OC3_COMP1
S#define COMP_BLANKINGSRCE_TIM3OC3        COMP_BLANKINGSRC_TIM3_OC3_COMP1
S#define COMP_BLANKINGSRCE_TIM3OC4        COMP_BLANKINGSRC_TIM3_OC4_COMP2
S#define COMP_BLANKINGSRCE_TIM8OC5        COMP_BLANKINGSRC_TIM8_OC5_COMP2
S#define COMP_BLANKINGSRCE_TIM15OC1       COMP_BLANKINGSRC_TIM15_OC1_COMP2
S#define COMP_BLANKINGSRCE_NONE           COMP_BLANKINGSRC_NONE
N#endif
N
N#if defined(STM32L0)
X#if 1L
N#define COMP_MODE_HIGHSPEED              COMP_POWERMODE_MEDIUMSPEED
N#define COMP_MODE_LOWSPEED               COMP_POWERMODE_ULTRALOWPOWER
N#else
S#define COMP_MODE_HIGHSPEED              COMP_POWERMODE_HIGHSPEED
S#define COMP_MODE_MEDIUMSPEED            COMP_POWERMODE_MEDIUMSPEED
S#define COMP_MODE_LOWPOWER               COMP_POWERMODE_LOWPOWER
S#define COMP_MODE_ULTRALOWPOWER          COMP_POWERMODE_ULTRALOWPOWER
N#endif
N
N#endif
N/**
N  * @}
N  */
N
N/** @defgroup HAL_CORTEX_Aliased_Defines HAL CORTEX Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define __HAL_CORTEX_SYSTICKCLK_CONFIG HAL_SYSTICK_CLKSourceConfig
N/**
N  * @}
N  */
N
N/** @defgroup HAL_CRC_Aliased_Defines HAL CRC Aliased Defines maintained for legacy purpose
N  * @{
N  */
N  
N#define CRC_OUTPUTDATA_INVERSION_DISABLED    CRC_OUTPUTDATA_INVERSION_DISABLE
N#define CRC_OUTPUTDATA_INVERSION_ENABLED     CRC_OUTPUTDATA_INVERSION_ENABLE
N
N/**
N  * @}
N  */
N
N/** @defgroup HAL_DAC_Aliased_Defines HAL DAC Aliased Defines maintained for legacy purpose
N  * @{
N  */
N
N#define DAC1_CHANNEL_1                                  DAC_CHANNEL_1
N#define DAC1_CHANNEL_2                                  DAC_CHANNEL_2
N#define DAC2_CHANNEL_1                                  DAC_CHANNEL_1
N#define DAC_WAVE_NONE                                   ((uint32_t)0x00000000U)
N#define DAC_WAVE_NOISE                                  ((uint32_t)DAC_CR_WAVE1_0)
N#define DAC_WAVE_TRIANGLE                               ((uint32_t)DAC_CR_WAVE1_1)                           
N#define DAC_WAVEGENERATION_NONE                         DAC_WAVE_NONE
N#define DAC_WAVEGENERATION_NOISE                        DAC_WAVE_NOISE
N#define DAC_WAVEGENERATION_TRIANGLE                     DAC_WAVE_TRIANGLE
N
N/**
N  * @}
N  */
N
N/** @defgroup HAL_DMA_Aliased_Defines HAL DMA Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define HAL_REMAPDMA_ADC_DMA_CH2                DMA_REMAP_ADC_DMA_CH2       
N#define HAL_REMAPDMA_USART1_TX_DMA_CH4          DMA_REMAP_USART1_TX_DMA_CH4 
N#define HAL_REMAPDMA_USART1_RX_DMA_CH5          DMA_REMAP_USART1_RX_DMA_CH5   
N#define HAL_REMAPDMA_TIM16_DMA_CH4              DMA_REMAP_TIM16_DMA_CH4       
N#define HAL_REMAPDMA_TIM17_DMA_CH2              DMA_REMAP_TIM17_DMA_CH2       
N#define HAL_REMAPDMA_USART3_DMA_CH32            DMA_REMAP_USART3_DMA_CH32
N#define HAL_REMAPDMA_TIM16_DMA_CH6              DMA_REMAP_TIM16_DMA_CH6
N#define HAL_REMAPDMA_TIM17_DMA_CH7              DMA_REMAP_TIM17_DMA_CH7      
N#define HAL_REMAPDMA_SPI2_DMA_CH67              DMA_REMAP_SPI2_DMA_CH67  
N#define HAL_REMAPDMA_USART2_DMA_CH67            DMA_REMAP_USART2_DMA_CH67 
N#define HAL_REMAPDMA_I2C1_DMA_CH76              DMA_REMAP_I2C1_DMA_CH76   
N#define HAL_REMAPDMA_TIM1_DMA_CH6               DMA_REMAP_TIM1_DMA_CH6     
N#define HAL_REMAPDMA_TIM2_DMA_CH7               DMA_REMAP_TIM2_DMA_CH7      
N#define HAL_REMAPDMA_TIM3_DMA_CH6               DMA_REMAP_TIM3_DMA_CH6    
N  
N#define IS_HAL_REMAPDMA                          IS_DMA_REMAP  
N#define __HAL_REMAPDMA_CHANNEL_ENABLE            __HAL_DMA_REMAP_CHANNEL_ENABLE
N#define __HAL_REMAPDMA_CHANNEL_DISABLE           __HAL_DMA_REMAP_CHANNEL_DISABLE
N  
N  
N  
N/**
N  * @}
N  */
N
N/** @defgroup HAL_FLASH_Aliased_Defines HAL FLASH Aliased Defines maintained for legacy purpose
N  * @{
N  */
N  
N#define TYPEPROGRAM_BYTE              FLASH_TYPEPROGRAM_BYTE
N#define TYPEPROGRAM_HALFWORD          FLASH_TYPEPROGRAM_HALFWORD
N#define TYPEPROGRAM_WORD              FLASH_TYPEPROGRAM_WORD
N#define TYPEPROGRAM_DOUBLEWORD        FLASH_TYPEPROGRAM_DOUBLEWORD
N#define TYPEERASE_SECTORS             FLASH_TYPEERASE_SECTORS
N#define TYPEERASE_PAGES               FLASH_TYPEERASE_PAGES
N#define TYPEERASE_PAGEERASE           FLASH_TYPEERASE_PAGES
N#define TYPEERASE_MASSERASE           FLASH_TYPEERASE_MASSERASE
N#define WRPSTATE_DISABLE              OB_WRPSTATE_DISABLE
N#define WRPSTATE_ENABLE               OB_WRPSTATE_ENABLE
N#define HAL_FLASH_TIMEOUT_VALUE       FLASH_TIMEOUT_VALUE
N#define OBEX_PCROP                    OPTIONBYTE_PCROP
N#define OBEX_BOOTCONFIG               OPTIONBYTE_BOOTCONFIG
N#define PCROPSTATE_DISABLE            OB_PCROP_STATE_DISABLE
N#define PCROPSTATE_ENABLE             OB_PCROP_STATE_ENABLE
N#define TYPEERASEDATA_BYTE            FLASH_TYPEERASEDATA_BYTE
N#define TYPEERASEDATA_HALFWORD        FLASH_TYPEERASEDATA_HALFWORD
N#define TYPEERASEDATA_WORD            FLASH_TYPEERASEDATA_WORD
N#define TYPEPROGRAMDATA_BYTE          FLASH_TYPEPROGRAMDATA_BYTE
N#define TYPEPROGRAMDATA_HALFWORD      FLASH_TYPEPROGRAMDATA_HALFWORD
N#define TYPEPROGRAMDATA_WORD          FLASH_TYPEPROGRAMDATA_WORD
N#define TYPEPROGRAMDATA_FASTBYTE      FLASH_TYPEPROGRAMDATA_FASTBYTE
N#define TYPEPROGRAMDATA_FASTHALFWORD  FLASH_TYPEPROGRAMDATA_FASTHALFWORD
N#define TYPEPROGRAMDATA_FASTWORD      FLASH_TYPEPROGRAMDATA_FASTWORD
N#define PAGESIZE                      FLASH_PAGE_SIZE
N#define TYPEPROGRAM_FASTBYTE          FLASH_TYPEPROGRAM_BYTE
N#define TYPEPROGRAM_FASTHALFWORD      FLASH_TYPEPROGRAM_HALFWORD
N#define TYPEPROGRAM_FASTWORD          FLASH_TYPEPROGRAM_WORD
N#define VOLTAGE_RANGE_1               FLASH_VOLTAGE_RANGE_1
N#define VOLTAGE_RANGE_2               FLASH_VOLTAGE_RANGE_2
N#define VOLTAGE_RANGE_3               FLASH_VOLTAGE_RANGE_3
N#define VOLTAGE_RANGE_4               FLASH_VOLTAGE_RANGE_4
N#define TYPEPROGRAM_FAST              FLASH_TYPEPROGRAM_FAST
N#define TYPEPROGRAM_FAST_AND_LAST     FLASH_TYPEPROGRAM_FAST_AND_LAST
N#define WRPAREA_BANK1_AREAA           OB_WRPAREA_BANK1_AREAA
N#define WRPAREA_BANK1_AREAB           OB_WRPAREA_BANK1_AREAB
N#define WRPAREA_BANK2_AREAA           OB_WRPAREA_BANK2_AREAA
N#define WRPAREA_BANK2_AREAB           OB_WRPAREA_BANK2_AREAB
N#define IWDG_STDBY_FREEZE             OB_IWDG_STDBY_FREEZE
N#define IWDG_STDBY_ACTIVE             OB_IWDG_STDBY_RUN
N#define IWDG_STOP_FREEZE              OB_IWDG_STOP_FREEZE
N#define IWDG_STOP_ACTIVE              OB_IWDG_STOP_RUN
N#define FLASH_ERROR_NONE              HAL_FLASH_ERROR_NONE
N#define FLASH_ERROR_RD                HAL_FLASH_ERROR_RD
N#define FLASH_ERROR_PG                HAL_FLASH_ERROR_PROG
N#define FLASH_ERROR_PGP               HAL_FLASH_ERROR_PGS
N#define FLASH_ERROR_WRP               HAL_FLASH_ERROR_WRP
N#define FLASH_ERROR_OPTV              HAL_FLASH_ERROR_OPTV
N#define FLASH_ERROR_OPTVUSR           HAL_FLASH_ERROR_OPTVUSR
N#define FLASH_ERROR_PROG              HAL_FLASH_ERROR_PROG
N#define FLASH_ERROR_OP                HAL_FLASH_ERROR_OPERATION
N#define FLASH_ERROR_PGA               HAL_FLASH_ERROR_PGA
N#define FLASH_ERROR_SIZE              HAL_FLASH_ERROR_SIZE
N#define FLASH_ERROR_SIZ               HAL_FLASH_ERROR_SIZE
N#define FLASH_ERROR_PGS               HAL_FLASH_ERROR_PGS
N#define FLASH_ERROR_MIS               HAL_FLASH_ERROR_MIS
N#define FLASH_ERROR_FAST              HAL_FLASH_ERROR_FAST
N#define FLASH_ERROR_FWWERR            HAL_FLASH_ERROR_FWWERR
N#define FLASH_ERROR_NOTZERO           HAL_FLASH_ERROR_NOTZERO
N#define FLASH_ERROR_OPERATION         HAL_FLASH_ERROR_OPERATION
N#define FLASH_ERROR_ERS               HAL_FLASH_ERROR_ERS
N#define OB_WDG_SW                     OB_IWDG_SW
N#define OB_WDG_HW                     OB_IWDG_HW
N#define OB_SDADC12_VDD_MONITOR_SET    OB_SDACD_VDD_MONITOR_SET
N#define OB_SDADC12_VDD_MONITOR_RESET  OB_SDACD_VDD_MONITOR_RESET
N#define OB_RAM_PARITY_CHECK_SET       OB_SRAM_PARITY_SET
N#define OB_RAM_PARITY_CHECK_RESET     OB_SRAM_PARITY_RESET
N#define IS_OB_SDADC12_VDD_MONITOR     IS_OB_SDACD_VDD_MONITOR
N#define OB_RDP_LEVEL0                 OB_RDP_LEVEL_0
N#define OB_RDP_LEVEL1                 OB_RDP_LEVEL_1
N#define OB_RDP_LEVEL2                 OB_RDP_LEVEL_2
N
N/**
N  * @}
N  */
N  
N/** @defgroup HAL_SYSCFG_Aliased_Defines HAL SYSCFG Aliased Defines maintained for legacy purpose
N  * @{
N  */
N  
N#define HAL_SYSCFG_FASTMODEPLUS_I2C_PA9    I2C_FASTMODEPLUS_PA9
N#define HAL_SYSCFG_FASTMODEPLUS_I2C_PA10   I2C_FASTMODEPLUS_PA10
N#define HAL_SYSCFG_FASTMODEPLUS_I2C_PB6    I2C_FASTMODEPLUS_PB6
N#define HAL_SYSCFG_FASTMODEPLUS_I2C_PB7    I2C_FASTMODEPLUS_PB7
N#define HAL_SYSCFG_FASTMODEPLUS_I2C_PB8    I2C_FASTMODEPLUS_PB8
N#define HAL_SYSCFG_FASTMODEPLUS_I2C_PB9    I2C_FASTMODEPLUS_PB9
N#define HAL_SYSCFG_FASTMODEPLUS_I2C1       I2C_FASTMODEPLUS_I2C1
N#define HAL_SYSCFG_FASTMODEPLUS_I2C2       I2C_FASTMODEPLUS_I2C2
N#define HAL_SYSCFG_FASTMODEPLUS_I2C3       I2C_FASTMODEPLUS_I2C3
N/**
N  * @}
N  */
N  
N
N/** @defgroup LL_FMC_Aliased_Defines LL FMC Aliased Defines maintained for compatibility purpose
N  * @{
N  */
N#if defined(STM32L4) || defined(STM32F7)
X#if 0L || 0L
S#define FMC_NAND_PCC_WAIT_FEATURE_DISABLE       FMC_NAND_WAIT_FEATURE_DISABLE
S#define FMC_NAND_PCC_WAIT_FEATURE_ENABLE        FMC_NAND_WAIT_FEATURE_ENABLE
S#define FMC_NAND_PCC_MEM_BUS_WIDTH_8            FMC_NAND_MEM_BUS_WIDTH_8
S#define FMC_NAND_PCC_MEM_BUS_WIDTH_16           FMC_NAND_MEM_BUS_WIDTH_16
N#else
N#define FMC_NAND_WAIT_FEATURE_DISABLE           FMC_NAND_PCC_WAIT_FEATURE_DISABLE
N#define FMC_NAND_WAIT_FEATURE_ENABLE            FMC_NAND_PCC_WAIT_FEATURE_ENABLE
N#define FMC_NAND_MEM_BUS_WIDTH_8                FMC_NAND_PCC_MEM_BUS_WIDTH_8
N#define FMC_NAND_MEM_BUS_WIDTH_16               FMC_NAND_PCC_MEM_BUS_WIDTH_16
N#endif
N/**
N  * @}
N  */
N
N/** @defgroup LL_FSMC_Aliased_Defines LL FSMC Aliased Defines maintained for legacy purpose
N  * @{
N  */
N  
N#define FSMC_NORSRAM_TYPEDEF                      FSMC_NORSRAM_TypeDef
N#define FSMC_NORSRAM_EXTENDED_TYPEDEF             FSMC_NORSRAM_EXTENDED_TypeDef
N/**
N  * @}
N  */
N
N/** @defgroup HAL_GPIO_Aliased_Macros HAL GPIO Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#define GET_GPIO_SOURCE                           GPIO_GET_INDEX
N#define GET_GPIO_INDEX                            GPIO_GET_INDEX
N
N#if defined(STM32F4)
X#if 0L
S#define GPIO_AF12_SDMMC                           GPIO_AF12_SDIO
S#define GPIO_AF12_SDMMC1                          GPIO_AF12_SDIO
N#endif
N
N#if defined(STM32F7)
X#if 0L
S#define GPIO_AF12_SDIO                            GPIO_AF12_SDMMC1
S#define GPIO_AF12_SDMMC                           GPIO_AF12_SDMMC1
N#endif
N
N#if defined(STM32L4)
X#if 0L
S#define GPIO_AF12_SDIO                            GPIO_AF12_SDMMC1
S#define GPIO_AF12_SDMMC                           GPIO_AF12_SDMMC1
N#endif
N
N#define GPIO_AF0_LPTIM                            GPIO_AF0_LPTIM1
N#define GPIO_AF1_LPTIM                            GPIO_AF1_LPTIM1
N#define GPIO_AF2_LPTIM                            GPIO_AF2_LPTIM1
N
N#if defined(STM32L0) || defined(STM32L4) || defined(STM32F4) || defined(STM32F2) || defined(STM32F7)
X#if 1L || 0L || 0L || 0L || 0L
N#define  GPIO_SPEED_LOW                           GPIO_SPEED_FREQ_LOW     
N#define  GPIO_SPEED_MEDIUM                        GPIO_SPEED_FREQ_MEDIUM     
N#define  GPIO_SPEED_FAST                          GPIO_SPEED_FREQ_HIGH     
N#define  GPIO_SPEED_HIGH                          GPIO_SPEED_FREQ_VERY_HIGH       
N#endif /* STM32L0 || STM32L4 || STM32F4 || STM32F2 || STM32F7 */
N
N#if defined(STM32L1) 
X#if 0L 
S #define  GPIO_SPEED_VERY_LOW    GPIO_SPEED_FREQ_LOW     
S #define  GPIO_SPEED_LOW         GPIO_SPEED_FREQ_MEDIUM     
S #define  GPIO_SPEED_MEDIUM      GPIO_SPEED_FREQ_HIGH     
S #define  GPIO_SPEED_HIGH        GPIO_SPEED_FREQ_VERY_HIGH     
N#endif /* STM32L1 */
N
N#if defined(STM32F0) || defined(STM32F3) || defined(STM32F1)
X#if 0L || 0L || 0L
S #define  GPIO_SPEED_LOW    GPIO_SPEED_FREQ_LOW
S #define  GPIO_SPEED_MEDIUM GPIO_SPEED_FREQ_MEDIUM
S #define  GPIO_SPEED_HIGH   GPIO_SPEED_FREQ_HIGH
N#endif /* STM32F0 || STM32F3 || STM32F1 */
N
N#define GPIO_AF6_DFSDM                            GPIO_AF6_DFSDM1
N/**
N  * @}
N  */
N
N/** @defgroup HAL_JPEG_Aliased_Macros HAL JPEG Aliased Macros maintained for legacy purpose
N  * @{
N  */
N  
N#if defined(STM32H7)
X#if 0L
S #define __HAL_RCC_JPEG_CLK_ENABLE               __HAL_RCC_JPGDECEN_CLK_ENABLE
S #define __HAL_RCC_JPEG_CLK_DISABLE              __HAL_RCC_JPGDECEN_CLK_DISABLE
S #define __HAL_RCC_JPEG_FORCE_RESET              __HAL_RCC_JPGDECRST_FORCE_RESET
S #define __HAL_RCC_JPEG_RELEASE_RESET            __HAL_RCC_JPGDECRST_RELEASE_RESET
S #define __HAL_RCC_JPEG_CLK_SLEEP_ENABLE         __HAL_RCC_JPGDEC_CLK_SLEEP_ENABLE
S #define __HAL_RCC_JPEG_CLK_SLEEP_DISABLE        __HAL_RCC_JPGDEC_CLK_SLEEP_DISABLE
S
S  #define DMA_REQUEST_DAC1 DMA_REQUEST_DAC1_CH1 
S  #define DMA_REQUEST_DAC2 DMA_REQUEST_DAC1_CH2 
S
S #define BDMA_REQUEST_LP_UART1_RX BDMA_REQUEST_LPUART1_RX
S #define BDMA_REQUEST_LP_UART1_TX BDMA_REQUEST_LPUART1_TX
S
S #define HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH0_EVT    HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH0_EVT
S #define HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH1_EVT    HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH1_EVT
S #define HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH2_EVT    HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH2_EVT
S #define HAL_DMAMUX1_REQUEST_GEN_LPTIM1_OUT         HAL_DMAMUX1_REQ_GEN_LPTIM1_OUT
S #define HAL_DMAMUX1_REQUEST_GEN_LPTIM2_OUT         HAL_DMAMUX1_REQ_GEN_LPTIM2_OUT
S #define HAL_DMAMUX1_REQUEST_GEN_LPTIM3_OUT         HAL_DMAMUX1_REQ_GEN_LPTIM3_OUT
S #define HAL_DMAMUX1_REQUEST_GEN_EXTI0              HAL_DMAMUX1_REQ_GEN_EXTI0
S #define HAL_DMAMUX1_REQUEST_GEN_TIM12_TRGO         HAL_DMAMUX1_REQ_GEN_TIM12_TRGO
S
S #define HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH0_EVT    HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH0_EVT
S #define HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH1_EVT    HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH1_EVT
S #define HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH2_EVT    HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH2_EVT
S #define HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH3_EVT    HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH3_EVT
S #define HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH4_EVT    HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH4_EVT
S #define HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH5_EVT    HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH5_EVT
S #define HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH6_EVT    HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH6_EVT
S #define HAL_DMAMUX2_REQUEST_GEN_LPUART1_RX_WKUP    HAL_DMAMUX2_REQ_GEN_LPUART1_RX_WKUP
S #define HAL_DMAMUX2_REQUEST_GEN_LPUART1_TX_WKUP    HAL_DMAMUX2_REQ_GEN_LPUART1_TX_WKUP
S #define HAL_DMAMUX2_REQUEST_GEN_LPTIM2_WKUP        HAL_DMAMUX2_REQ_GEN_LPTIM2_WKUP
S #define HAL_DMAMUX2_REQUEST_GEN_LPTIM2_OUT         HAL_DMAMUX2_REQ_GEN_LPTIM2_OUT
S #define HAL_DMAMUX2_REQUEST_GEN_LPTIM3_WKUP        HAL_DMAMUX2_REQ_GEN_LPTIM3_WKUP
S #define HAL_DMAMUX2_REQUEST_GEN_LPTIM3_OUT         HAL_DMAMUX2_REQ_GEN_LPTIM3_OUT
S #define HAL_DMAMUX2_REQUEST_GEN_LPTIM4_WKUP        HAL_DMAMUX2_REQ_GEN_LPTIM4_WKUP
S #define HAL_DMAMUX2_REQUEST_GEN_LPTIM5_WKUP        HAL_DMAMUX2_REQ_GEN_LPTIM5_WKUP
S #define HAL_DMAMUX2_REQUEST_GEN_I2C4_WKUP          HAL_DMAMUX2_REQ_GEN_I2C4_WKUP
S #define HAL_DMAMUX2_REQUEST_GEN_SPI6_WKUP          HAL_DMAMUX2_REQ_GEN_SPI6_WKUP
S #define HAL_DMAMUX2_REQUEST_GEN_COMP1_OUT          HAL_DMAMUX2_REQ_GEN_COMP1_OUT
S #define HAL_DMAMUX2_REQUEST_GEN_COMP2_OUT          HAL_DMAMUX2_REQ_GEN_COMP2_OUT
S #define HAL_DMAMUX2_REQUEST_GEN_RTC_WKUP           HAL_DMAMUX2_REQ_GEN_RTC_WKUP
S #define HAL_DMAMUX2_REQUEST_GEN_EXTI0              HAL_DMAMUX2_REQ_GEN_EXTI0
S #define HAL_DMAMUX2_REQUEST_GEN_EXTI2              HAL_DMAMUX2_REQ_GEN_EXTI2
S #define HAL_DMAMUX2_REQUEST_GEN_I2C4_IT_EVT        HAL_DMAMUX2_REQ_GEN_I2C4_IT_EVT
S #define HAL_DMAMUX2_REQUEST_GEN_SPI6_IT            HAL_DMAMUX2_REQ_GEN_SPI6_IT
S #define HAL_DMAMUX2_REQUEST_GEN_LPUART1_TX_IT      HAL_DMAMUX2_REQ_GEN_LPUART1_TX_IT
S #define HAL_DMAMUX2_REQUEST_GEN_LPUART1_RX_IT      HAL_DMAMUX2_REQ_GEN_LPUART1_RX_IT
S #define HAL_DMAMUX2_REQUEST_GEN_ADC3_IT            HAL_DMAMUX2_REQ_GEN_ADC3_IT
S #define HAL_DMAMUX2_REQUEST_GEN_ADC3_AWD1_OUT      HAL_DMAMUX2_REQ_GEN_ADC3_AWD1_OUT
S #define HAL_DMAMUX2_REQUEST_GEN_BDMA_CH0_IT        HAL_DMAMUX2_REQ_GEN_BDMA_CH0_IT
S #define HAL_DMAMUX2_REQUEST_GEN_BDMA_CH1_IT        HAL_DMAMUX2_REQ_GEN_BDMA_CH1_IT
S
S #define HAL_DMAMUX_REQUEST_GEN_NO_EVENT            HAL_DMAMUX_REQ_GEN_NO_EVENT
S #define HAL_DMAMUX_REQUEST_GEN_RISING              HAL_DMAMUX_REQ_GEN_RISING
S #define HAL_DMAMUX_REQUEST_GEN_FALLING             HAL_DMAMUX_REQ_GEN_FALLING
S #define HAL_DMAMUX_REQUEST_GEN_RISING_FALLING      HAL_DMAMUX_REQ_GEN_RISING_FALLING
S
S
N#endif /* STM32H7  */
N  
N  
N/**
N  * @}
N  */ 
N  
N  
N/** @defgroup HAL_HRTIM_Aliased_Macros HAL HRTIM Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#define HRTIM_TIMDELAYEDPROTECTION_DISABLED           HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED
N#define HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT1_EEV68  HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT1_EEV6
N#define HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT2_EEV68  HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT2_EEV6
N#define HRTIM_TIMDELAYEDPROTECTION_DELAYEDBOTH_EEV68  HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV6
N#define HRTIM_TIMDELAYEDPROTECTION_BALANCED_EEV68     HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6
N#define HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT1_DEEV79 HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT1_DEEV7
N#define HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT2_DEEV79 HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT2_DEEV7
N#define HRTIM_TIMDELAYEDPROTECTION_DELAYEDBOTH_EEV79  HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV7
N#define HRTIM_TIMDELAYEDPROTECTION_BALANCED_EEV79     HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7
N   
N#define __HAL_HRTIM_SetCounter        __HAL_HRTIM_SETCOUNTER
N#define __HAL_HRTIM_GetCounter        __HAL_HRTIM_GETCOUNTER
N#define __HAL_HRTIM_SetPeriod         __HAL_HRTIM_SETPERIOD
N#define __HAL_HRTIM_GetPeriod         __HAL_HRTIM_GETPERIOD
N#define __HAL_HRTIM_SetClockPrescaler __HAL_HRTIM_SETCLOCKPRESCALER
N#define __HAL_HRTIM_GetClockPrescaler __HAL_HRTIM_GETCLOCKPRESCALER
N#define __HAL_HRTIM_SetCompare        __HAL_HRTIM_SETCOMPARE
N#define __HAL_HRTIM_GetCompare        __HAL_HRTIM_GETCOMPARE
N/**
N  * @}
N  */
N
N/** @defgroup HAL_I2C_Aliased_Defines HAL I2C Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define I2C_DUALADDRESS_DISABLED                I2C_DUALADDRESS_DISABLE
N#define I2C_DUALADDRESS_ENABLED                 I2C_DUALADDRESS_ENABLE
N#define I2C_GENERALCALL_DISABLED                I2C_GENERALCALL_DISABLE
N#define I2C_GENERALCALL_ENABLED                 I2C_GENERALCALL_ENABLE
N#define I2C_NOSTRETCH_DISABLED                  I2C_NOSTRETCH_DISABLE
N#define I2C_NOSTRETCH_ENABLED                   I2C_NOSTRETCH_ENABLE
N#define I2C_ANALOGFILTER_ENABLED                I2C_ANALOGFILTER_ENABLE
N#define I2C_ANALOGFILTER_DISABLED               I2C_ANALOGFILTER_DISABLE
N#if defined(STM32F0) || defined(STM32F1) || defined(STM32F3) || defined(STM32G0) || defined(STM32L4) || defined(STM32L1) || defined(STM32F7)
X#if 0L || 0L || 0L || 0L || 0L || 0L || 0L
S#define HAL_I2C_STATE_MEM_BUSY_TX               HAL_I2C_STATE_BUSY_TX
S#define HAL_I2C_STATE_MEM_BUSY_RX               HAL_I2C_STATE_BUSY_RX
S#define HAL_I2C_STATE_MASTER_BUSY_TX            HAL_I2C_STATE_BUSY_TX
S#define HAL_I2C_STATE_MASTER_BUSY_RX            HAL_I2C_STATE_BUSY_RX
S#define HAL_I2C_STATE_SLAVE_BUSY_TX             HAL_I2C_STATE_BUSY_TX
S#define HAL_I2C_STATE_SLAVE_BUSY_RX             HAL_I2C_STATE_BUSY_RX
N#endif
N/**
N  * @}
N  */
N
N/** @defgroup HAL_IRDA_Aliased_Defines HAL IRDA Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define IRDA_ONE_BIT_SAMPLE_DISABLED            IRDA_ONE_BIT_SAMPLE_DISABLE
N#define IRDA_ONE_BIT_SAMPLE_ENABLED             IRDA_ONE_BIT_SAMPLE_ENABLE
N
N/**
N  * @}
N  */
N
N/** @defgroup HAL_IWDG_Aliased_Defines HAL IWDG Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define KR_KEY_RELOAD                   IWDG_KEY_RELOAD
N#define KR_KEY_ENABLE                   IWDG_KEY_ENABLE
N#define KR_KEY_EWA                      IWDG_KEY_WRITE_ACCESS_ENABLE
N#define KR_KEY_DWA                      IWDG_KEY_WRITE_ACCESS_DISABLE
N/**
N  * @}
N  */
N
N/** @defgroup HAL_LPTIM_Aliased_Defines HAL LPTIM Aliased Defines maintained for legacy purpose
N  * @{
N  */
N
N#define LPTIM_CLOCKSAMPLETIME_DIRECTTRANSISTION LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION
N#define LPTIM_CLOCKSAMPLETIME_2TRANSISTIONS     LPTIM_CLOCKSAMPLETIME_2TRANSITIONS
N#define LPTIM_CLOCKSAMPLETIME_4TRANSISTIONS     LPTIM_CLOCKSAMPLETIME_4TRANSITIONS
N#define LPTIM_CLOCKSAMPLETIME_8TRANSISTIONS     LPTIM_CLOCKSAMPLETIME_8TRANSITIONS
N
N#define LPTIM_CLOCKPOLARITY_RISINGEDGE          LPTIM_CLOCKPOLARITY_RISING
N#define LPTIM_CLOCKPOLARITY_FALLINGEDGE         LPTIM_CLOCKPOLARITY_FALLING
N#define LPTIM_CLOCKPOLARITY_BOTHEDGES           LPTIM_CLOCKPOLARITY_RISING_FALLING
N
N#define LPTIM_TRIGSAMPLETIME_DIRECTTRANSISTION  LPTIM_TRIGSAMPLETIME_DIRECTTRANSITION
N#define LPTIM_TRIGSAMPLETIME_2TRANSISTIONS      LPTIM_TRIGSAMPLETIME_2TRANSITIONS
N#define LPTIM_TRIGSAMPLETIME_4TRANSISTIONS      LPTIM_TRIGSAMPLETIME_4TRANSITIONS
N#define LPTIM_TRIGSAMPLETIME_8TRANSISTIONS      LPTIM_TRIGSAMPLETIME_8TRANSITIONS        
N
N/* The following 3 definition have also been present in a temporary version of lptim.h */
N/* They need to be renamed also to the right name, just in case */
N#define LPTIM_TRIGSAMPLETIME_2TRANSITION        LPTIM_TRIGSAMPLETIME_2TRANSITIONS
N#define LPTIM_TRIGSAMPLETIME_4TRANSITION        LPTIM_TRIGSAMPLETIME_4TRANSITIONS
N#define LPTIM_TRIGSAMPLETIME_8TRANSITION        LPTIM_TRIGSAMPLETIME_8TRANSITIONS
N
N/**
N  * @}
N  */
N
N/** @defgroup HAL_NAND_Aliased_Defines HAL NAND Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define HAL_NAND_Read_Page              HAL_NAND_Read_Page_8b
N#define HAL_NAND_Write_Page             HAL_NAND_Write_Page_8b
N#define HAL_NAND_Read_SpareArea         HAL_NAND_Read_SpareArea_8b
N#define HAL_NAND_Write_SpareArea        HAL_NAND_Write_SpareArea_8b
N
N#define NAND_AddressTypedef             NAND_AddressTypeDef
N
N#define __ARRAY_ADDRESS                 ARRAY_ADDRESS
N#define __ADDR_1st_CYCLE                ADDR_1ST_CYCLE
N#define __ADDR_2nd_CYCLE                ADDR_2ND_CYCLE
N#define __ADDR_3rd_CYCLE                ADDR_3RD_CYCLE
N#define __ADDR_4th_CYCLE                ADDR_4TH_CYCLE
N/**
N  * @}
N  */
N   
N/** @defgroup HAL_NOR_Aliased_Defines HAL NOR Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define NOR_StatusTypedef              HAL_NOR_StatusTypeDef
N#define NOR_SUCCESS                    HAL_NOR_STATUS_SUCCESS
N#define NOR_ONGOING                    HAL_NOR_STATUS_ONGOING
N#define NOR_ERROR                      HAL_NOR_STATUS_ERROR
N#define NOR_TIMEOUT                    HAL_NOR_STATUS_TIMEOUT
N
N#define __NOR_WRITE                    NOR_WRITE
N#define __NOR_ADDR_SHIFT               NOR_ADDR_SHIFT
N/**
N  * @}
N  */
N
N/** @defgroup HAL_OPAMP_Aliased_Defines HAL OPAMP Aliased Defines maintained for legacy purpose
N  * @{
N  */
N
N#define OPAMP_NONINVERTINGINPUT_VP0           OPAMP_NONINVERTINGINPUT_IO0
N#define OPAMP_NONINVERTINGINPUT_VP1           OPAMP_NONINVERTINGINPUT_IO1
N#define OPAMP_NONINVERTINGINPUT_VP2           OPAMP_NONINVERTINGINPUT_IO2
N#define OPAMP_NONINVERTINGINPUT_VP3           OPAMP_NONINVERTINGINPUT_IO3
N                                              
N#define OPAMP_SEC_NONINVERTINGINPUT_VP0       OPAMP_SEC_NONINVERTINGINPUT_IO0
N#define OPAMP_SEC_NONINVERTINGINPUT_VP1       OPAMP_SEC_NONINVERTINGINPUT_IO1
N#define OPAMP_SEC_NONINVERTINGINPUT_VP2       OPAMP_SEC_NONINVERTINGINPUT_IO2
N#define OPAMP_SEC_NONINVERTINGINPUT_VP3       OPAMP_SEC_NONINVERTINGINPUT_IO3   
N
N#define OPAMP_INVERTINGINPUT_VM0              OPAMP_INVERTINGINPUT_IO0
N#define OPAMP_INVERTINGINPUT_VM1              OPAMP_INVERTINGINPUT_IO1
N
N#define IOPAMP_INVERTINGINPUT_VM0             OPAMP_INVERTINGINPUT_IO0
N#define IOPAMP_INVERTINGINPUT_VM1             OPAMP_INVERTINGINPUT_IO1
N
N#define OPAMP_SEC_INVERTINGINPUT_VM0          OPAMP_SEC_INVERTINGINPUT_IO0
N#define OPAMP_SEC_INVERTINGINPUT_VM1          OPAMP_SEC_INVERTINGINPUT_IO1    
N
N#define OPAMP_INVERTINGINPUT_VINM             OPAMP_SEC_INVERTINGINPUT_IO1
N                                                                      
N#define OPAMP_PGACONNECT_NO                   OPAMP_PGA_CONNECT_INVERTINGINPUT_NO             
N#define OPAMP_PGACONNECT_VM0                  OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0            
N#define OPAMP_PGACONNECT_VM1                  OPAMP_PGA_CONNECT_INVERTINGINPUT_IO1          
N                                                        
N/**
N  * @}
N  */
N
N/** @defgroup HAL_I2S_Aliased_Defines HAL I2S Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define I2S_STANDARD_PHILLIPS      I2S_STANDARD_PHILIPS
N#if defined(STM32F7) 
X#if 0L 
S  #define I2S_CLOCK_SYSCLK           I2S_CLOCK_PLL
N#endif
N/**
N  * @}
N  */
N
N/** @defgroup HAL_PCCARD_Aliased_Defines HAL PCCARD Aliased Defines maintained for legacy purpose
N  * @{
N  */
N
N/* Compact Flash-ATA registers description */
N#define CF_DATA                       ATA_DATA                
N#define CF_SECTOR_COUNT               ATA_SECTOR_COUNT        
N#define CF_SECTOR_NUMBER              ATA_SECTOR_NUMBER       
N#define CF_CYLINDER_LOW               ATA_CYLINDER_LOW        
N#define CF_CYLINDER_HIGH              ATA_CYLINDER_HIGH       
N#define CF_CARD_HEAD                  ATA_CARD_HEAD           
N#define CF_STATUS_CMD                 ATA_STATUS_CMD          
N#define CF_STATUS_CMD_ALTERNATE       ATA_STATUS_CMD_ALTERNATE
N#define CF_COMMON_DATA_AREA           ATA_COMMON_DATA_AREA    
N
N/* Compact Flash-ATA commands */
N#define CF_READ_SECTOR_CMD            ATA_READ_SECTOR_CMD 
N#define CF_WRITE_SECTOR_CMD           ATA_WRITE_SECTOR_CMD
N#define CF_ERASE_SECTOR_CMD           ATA_ERASE_SECTOR_CMD
N#define CF_IDENTIFY_CMD               ATA_IDENTIFY_CMD
N
N#define PCCARD_StatusTypedef          HAL_PCCARD_StatusTypeDef
N#define PCCARD_SUCCESS                HAL_PCCARD_STATUS_SUCCESS
N#define PCCARD_ONGOING                HAL_PCCARD_STATUS_ONGOING
N#define PCCARD_ERROR                  HAL_PCCARD_STATUS_ERROR
N#define PCCARD_TIMEOUT                HAL_PCCARD_STATUS_TIMEOUT
N/**
N  * @}
N  */
N  
N/** @defgroup HAL_RTC_Aliased_Defines HAL RTC Aliased Defines maintained for legacy purpose
N  * @{
N  */
N  
N#define FORMAT_BIN                  RTC_FORMAT_BIN
N#define FORMAT_BCD                  RTC_FORMAT_BCD
N
N#define RTC_ALARMSUBSECONDMASK_None     RTC_ALARMSUBSECONDMASK_NONE
N#define RTC_TAMPERERASEBACKUP_DISABLED  RTC_TAMPER_ERASE_BACKUP_DISABLE
N#define RTC_TAMPERMASK_FLAG_DISABLED    RTC_TAMPERMASK_FLAG_DISABLE
N#define RTC_TAMPERMASK_FLAG_ENABLED     RTC_TAMPERMASK_FLAG_ENABLE
N
N#define RTC_MASKTAMPERFLAG_DISABLED     RTC_TAMPERMASK_FLAG_DISABLE 
N#define RTC_MASKTAMPERFLAG_ENABLED      RTC_TAMPERMASK_FLAG_ENABLE 
N#define RTC_TAMPERERASEBACKUP_ENABLED   RTC_TAMPER_ERASE_BACKUP_ENABLE
N#define RTC_TAMPER1_2_INTERRUPT         RTC_ALL_TAMPER_INTERRUPT 
N#define RTC_TAMPER1_2_3_INTERRUPT       RTC_ALL_TAMPER_INTERRUPT 
N
N#define RTC_TIMESTAMPPIN_PC13  RTC_TIMESTAMPPIN_DEFAULT
N#define RTC_TIMESTAMPPIN_PA0 RTC_TIMESTAMPPIN_POS1 
N#define RTC_TIMESTAMPPIN_PI8 RTC_TIMESTAMPPIN_POS1
N#define RTC_TIMESTAMPPIN_PC1   RTC_TIMESTAMPPIN_POS2
N
N#define RTC_OUTPUT_REMAP_PC13  RTC_OUTPUT_REMAP_NONE
N#define RTC_OUTPUT_REMAP_PB14  RTC_OUTPUT_REMAP_POS1
N#define RTC_OUTPUT_REMAP_PB2   RTC_OUTPUT_REMAP_POS1
N
N#define RTC_TAMPERPIN_PC13 RTC_TAMPERPIN_DEFAULT 
N#define RTC_TAMPERPIN_PA0  RTC_TAMPERPIN_POS1 
N#define RTC_TAMPERPIN_PI8  RTC_TAMPERPIN_POS1
N
N/**
N  * @}
N  */
N
N  
N/** @defgroup HAL_SMARTCARD_Aliased_Defines HAL SMARTCARD Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define SMARTCARD_NACK_ENABLED                  SMARTCARD_NACK_ENABLE
N#define SMARTCARD_NACK_DISABLED                 SMARTCARD_NACK_DISABLE
N
N#define SMARTCARD_ONEBIT_SAMPLING_DISABLED      SMARTCARD_ONE_BIT_SAMPLE_DISABLE
N#define SMARTCARD_ONEBIT_SAMPLING_ENABLED       SMARTCARD_ONE_BIT_SAMPLE_ENABLE
N#define SMARTCARD_ONEBIT_SAMPLING_DISABLE       SMARTCARD_ONE_BIT_SAMPLE_DISABLE
N#define SMARTCARD_ONEBIT_SAMPLING_ENABLE        SMARTCARD_ONE_BIT_SAMPLE_ENABLE
N
N#define SMARTCARD_TIMEOUT_DISABLED              SMARTCARD_TIMEOUT_DISABLE
N#define SMARTCARD_TIMEOUT_ENABLED               SMARTCARD_TIMEOUT_ENABLE
N
N#define SMARTCARD_LASTBIT_DISABLED              SMARTCARD_LASTBIT_DISABLE
N#define SMARTCARD_LASTBIT_ENABLED               SMARTCARD_LASTBIT_ENABLE
N/**
N  * @}
N  */
N
N  
N/** @defgroup HAL_SMBUS_Aliased_Defines HAL SMBUS Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define SMBUS_DUALADDRESS_DISABLED      SMBUS_DUALADDRESS_DISABLE
N#define SMBUS_DUALADDRESS_ENABLED       SMBUS_DUALADDRESS_ENABLE
N#define SMBUS_GENERALCALL_DISABLED      SMBUS_GENERALCALL_DISABLE
N#define SMBUS_GENERALCALL_ENABLED       SMBUS_GENERALCALL_ENABLE
N#define SMBUS_NOSTRETCH_DISABLED        SMBUS_NOSTRETCH_DISABLE
N#define SMBUS_NOSTRETCH_ENABLED         SMBUS_NOSTRETCH_ENABLE
N#define SMBUS_ANALOGFILTER_ENABLED      SMBUS_ANALOGFILTER_ENABLE
N#define SMBUS_ANALOGFILTER_DISABLED     SMBUS_ANALOGFILTER_DISABLE
N#define SMBUS_PEC_DISABLED              SMBUS_PEC_DISABLE
N#define SMBUS_PEC_ENABLED               SMBUS_PEC_ENABLE
N#define HAL_SMBUS_STATE_SLAVE_LISTEN    HAL_SMBUS_STATE_LISTEN
N/**
N  * @}
N  */
N  
N/** @defgroup HAL_SPI_Aliased_Defines HAL SPI Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define SPI_TIMODE_DISABLED             SPI_TIMODE_DISABLE
N#define SPI_TIMODE_ENABLED              SPI_TIMODE_ENABLE
N
N#define SPI_CRCCALCULATION_DISABLED     SPI_CRCCALCULATION_DISABLE
N#define SPI_CRCCALCULATION_ENABLED      SPI_CRCCALCULATION_ENABLE
N
N#define SPI_NSS_PULSE_DISABLED          SPI_NSS_PULSE_DISABLE
N#define SPI_NSS_PULSE_ENABLED           SPI_NSS_PULSE_ENABLE
N
N/**
N  * @}
N  */
N  
N/** @defgroup HAL_TIM_Aliased_Defines HAL TIM Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define CCER_CCxE_MASK                   TIM_CCER_CCxE_MASK
N#define CCER_CCxNE_MASK                  TIM_CCER_CCxNE_MASK
N  
N#define TIM_DMABase_CR1                  TIM_DMABASE_CR1
N#define TIM_DMABase_CR2                  TIM_DMABASE_CR2
N#define TIM_DMABase_SMCR                 TIM_DMABASE_SMCR
N#define TIM_DMABase_DIER                 TIM_DMABASE_DIER
N#define TIM_DMABase_SR                   TIM_DMABASE_SR
N#define TIM_DMABase_EGR                  TIM_DMABASE_EGR
N#define TIM_DMABase_CCMR1                TIM_DMABASE_CCMR1
N#define TIM_DMABase_CCMR2                TIM_DMABASE_CCMR2
N#define TIM_DMABase_CCER                 TIM_DMABASE_CCER
N#define TIM_DMABase_CNT                  TIM_DMABASE_CNT
N#define TIM_DMABase_PSC                  TIM_DMABASE_PSC
N#define TIM_DMABase_ARR                  TIM_DMABASE_ARR
N#define TIM_DMABase_RCR                  TIM_DMABASE_RCR
N#define TIM_DMABase_CCR1                 TIM_DMABASE_CCR1
N#define TIM_DMABase_CCR2                 TIM_DMABASE_CCR2
N#define TIM_DMABase_CCR3                 TIM_DMABASE_CCR3
N#define TIM_DMABase_CCR4                 TIM_DMABASE_CCR4
N#define TIM_DMABase_BDTR                 TIM_DMABASE_BDTR
N#define TIM_DMABase_DCR                  TIM_DMABASE_DCR
N#define TIM_DMABase_DMAR                 TIM_DMABASE_DMAR
N#define TIM_DMABase_OR1                  TIM_DMABASE_OR1
N#define TIM_DMABase_CCMR3                TIM_DMABASE_CCMR3
N#define TIM_DMABase_CCR5                 TIM_DMABASE_CCR5
N#define TIM_DMABase_CCR6                 TIM_DMABASE_CCR6
N#define TIM_DMABase_OR2                  TIM_DMABASE_OR2
N#define TIM_DMABase_OR3                  TIM_DMABASE_OR3
N#define TIM_DMABase_OR                   TIM_DMABASE_OR
N
N#define TIM_EventSource_Update           TIM_EVENTSOURCE_UPDATE
N#define TIM_EventSource_CC1              TIM_EVENTSOURCE_CC1
N#define TIM_EventSource_CC2              TIM_EVENTSOURCE_CC2
N#define TIM_EventSource_CC3              TIM_EVENTSOURCE_CC3
N#define TIM_EventSource_CC4              TIM_EVENTSOURCE_CC4
N#define TIM_EventSource_COM              TIM_EVENTSOURCE_COM
N#define TIM_EventSource_Trigger          TIM_EVENTSOURCE_TRIGGER
N#define TIM_EventSource_Break            TIM_EVENTSOURCE_BREAK
N#define TIM_EventSource_Break2           TIM_EVENTSOURCE_BREAK2
N
N#define TIM_DMABurstLength_1Transfer     TIM_DMABURSTLENGTH_1TRANSFER
N#define TIM_DMABurstLength_2Transfers    TIM_DMABURSTLENGTH_2TRANSFERS
N#define TIM_DMABurstLength_3Transfers    TIM_DMABURSTLENGTH_3TRANSFERS
N#define TIM_DMABurstLength_4Transfers    TIM_DMABURSTLENGTH_4TRANSFERS
N#define TIM_DMABurstLength_5Transfers    TIM_DMABURSTLENGTH_5TRANSFERS
N#define TIM_DMABurstLength_6Transfers    TIM_DMABURSTLENGTH_6TRANSFERS
N#define TIM_DMABurstLength_7Transfers    TIM_DMABURSTLENGTH_7TRANSFERS
N#define TIM_DMABurstLength_8Transfers    TIM_DMABURSTLENGTH_8TRANSFERS
N#define TIM_DMABurstLength_9Transfers    TIM_DMABURSTLENGTH_9TRANSFERS
N#define TIM_DMABurstLength_10Transfers   TIM_DMABURSTLENGTH_10TRANSFERS
N#define TIM_DMABurstLength_11Transfers   TIM_DMABURSTLENGTH_11TRANSFERS
N#define TIM_DMABurstLength_12Transfers   TIM_DMABURSTLENGTH_12TRANSFERS
N#define TIM_DMABurstLength_13Transfers   TIM_DMABURSTLENGTH_13TRANSFERS
N#define TIM_DMABurstLength_14Transfers   TIM_DMABURSTLENGTH_14TRANSFERS
N#define TIM_DMABurstLength_15Transfers   TIM_DMABURSTLENGTH_15TRANSFERS
N#define TIM_DMABurstLength_16Transfers   TIM_DMABURSTLENGTH_16TRANSFERS
N#define TIM_DMABurstLength_17Transfers   TIM_DMABURSTLENGTH_17TRANSFERS
N#define TIM_DMABurstLength_18Transfers   TIM_DMABURSTLENGTH_18TRANSFERS
N
N/**
N  * @}
N  */
N
N/** @defgroup HAL_TSC_Aliased_Defines HAL TSC Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define TSC_SYNC_POL_FALL        TSC_SYNC_POLARITY_FALLING
N#define TSC_SYNC_POL_RISE_HIGH   TSC_SYNC_POLARITY_RISING
N/**
N  * @}
N  */
N
N/** @defgroup HAL_UART_Aliased_Defines HAL UART Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define UART_ONEBIT_SAMPLING_DISABLED   UART_ONE_BIT_SAMPLE_DISABLE
N#define UART_ONEBIT_SAMPLING_ENABLED    UART_ONE_BIT_SAMPLE_ENABLE
N#define UART_ONE_BIT_SAMPLE_DISABLED    UART_ONE_BIT_SAMPLE_DISABLE
N#define UART_ONE_BIT_SAMPLE_ENABLED     UART_ONE_BIT_SAMPLE_ENABLE
N
N#define __HAL_UART_ONEBIT_ENABLE        __HAL_UART_ONE_BIT_SAMPLE_ENABLE
N#define __HAL_UART_ONEBIT_DISABLE       __HAL_UART_ONE_BIT_SAMPLE_DISABLE
N
N#define __DIV_SAMPLING16                UART_DIV_SAMPLING16
N#define __DIVMANT_SAMPLING16            UART_DIVMANT_SAMPLING16
N#define __DIVFRAQ_SAMPLING16            UART_DIVFRAQ_SAMPLING16
N#define __UART_BRR_SAMPLING16           UART_BRR_SAMPLING16
N
N#define __DIV_SAMPLING8                 UART_DIV_SAMPLING8
N#define __DIVMANT_SAMPLING8             UART_DIVMANT_SAMPLING8
N#define __DIVFRAQ_SAMPLING8             UART_DIVFRAQ_SAMPLING8
N#define __UART_BRR_SAMPLING8            UART_BRR_SAMPLING8
N
N#define __DIV_LPUART                    UART_DIV_LPUART
N
N#define UART_WAKEUPMETHODE_IDLELINE     UART_WAKEUPMETHOD_IDLELINE
N#define UART_WAKEUPMETHODE_ADDRESSMARK  UART_WAKEUPMETHOD_ADDRESSMARK
N
N/**
N  * @}
N  */
N
N  
N/** @defgroup HAL_USART_Aliased_Defines HAL USART Aliased Defines maintained for legacy purpose
N  * @{
N  */
N
N#define USART_CLOCK_DISABLED            USART_CLOCK_DISABLE
N#define USART_CLOCK_ENABLED             USART_CLOCK_ENABLE
N
N#define USARTNACK_ENABLED               USART_NACK_ENABLE
N#define USARTNACK_DISABLED              USART_NACK_DISABLE
N/**
N  * @}
N  */
N
N/** @defgroup HAL_WWDG_Aliased_Defines HAL WWDG Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define CFR_BASE                    WWDG_CFR_BASE
N
N/**
N  * @}
N  */
N
N/** @defgroup HAL_CAN_Aliased_Defines HAL CAN Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define CAN_FilterFIFO0             CAN_FILTER_FIFO0
N#define CAN_FilterFIFO1             CAN_FILTER_FIFO1
N#define CAN_IT_RQCP0                CAN_IT_TME
N#define CAN_IT_RQCP1                CAN_IT_TME
N#define CAN_IT_RQCP2                CAN_IT_TME
N#define INAK_TIMEOUT                CAN_TIMEOUT_VALUE
N#define SLAK_TIMEOUT                CAN_TIMEOUT_VALUE
N#define CAN_TXSTATUS_FAILED         ((uint8_t)0x00U)
N#define CAN_TXSTATUS_OK             ((uint8_t)0x01U)
N#define CAN_TXSTATUS_PENDING        ((uint8_t)0x02U)
N
N/**
N  * @}
N  */
N  
N/** @defgroup HAL_ETH_Aliased_Defines HAL ETH Aliased Defines maintained for legacy purpose
N  * @{
N  */
N
N#define VLAN_TAG                ETH_VLAN_TAG
N#define MIN_ETH_PAYLOAD         ETH_MIN_ETH_PAYLOAD
N#define MAX_ETH_PAYLOAD         ETH_MAX_ETH_PAYLOAD
N#define JUMBO_FRAME_PAYLOAD     ETH_JUMBO_FRAME_PAYLOAD
N#define MACMIIAR_CR_MASK        ETH_MACMIIAR_CR_MASK
N#define MACCR_CLEAR_MASK        ETH_MACCR_CLEAR_MASK
N#define MACFCR_CLEAR_MASK       ETH_MACFCR_CLEAR_MASK
N#define DMAOMR_CLEAR_MASK       ETH_DMAOMR_CLEAR_MASK
N
N#define ETH_MMCCR              ((uint32_t)0x00000100U)  
N#define ETH_MMCRIR             ((uint32_t)0x00000104U)  
N#define ETH_MMCTIR             ((uint32_t)0x00000108U)  
N#define ETH_MMCRIMR            ((uint32_t)0x0000010CU)  
N#define ETH_MMCTIMR            ((uint32_t)0x00000110U)  
N#define ETH_MMCTGFSCCR         ((uint32_t)0x0000014CU)  
N#define ETH_MMCTGFMSCCR        ((uint32_t)0x00000150U)  
N#define ETH_MMCTGFCR           ((uint32_t)0x00000168U)  
N#define ETH_MMCRFCECR          ((uint32_t)0x00000194U)  
N#define ETH_MMCRFAECR          ((uint32_t)0x00000198U)  
N#define ETH_MMCRGUFCR          ((uint32_t)0x000001C4U)
N 
N#define ETH_MAC_TXFIFO_FULL          ((uint32_t)0x02000000)  /* Tx FIFO full */
N#define ETH_MAC_TXFIFONOT_EMPTY      ((uint32_t)0x01000000)  /* Tx FIFO not empty */
N#define ETH_MAC_TXFIFO_WRITE_ACTIVE  ((uint32_t)0x00400000)  /* Tx FIFO write active */
N#define ETH_MAC_TXFIFO_IDLE     ((uint32_t)0x00000000)  /* Tx FIFO read status: Idle */
N#define ETH_MAC_TXFIFO_READ     ((uint32_t)0x00100000)  /* Tx FIFO read status: Read (transferring data to the MAC transmitter) */
N#define ETH_MAC_TXFIFO_WAITING  ((uint32_t)0x00200000)  /* Tx FIFO read status: Waiting for TxStatus from MAC transmitter */
N#define ETH_MAC_TXFIFO_WRITING  ((uint32_t)0x00300000)  /* Tx FIFO read status: Writing the received TxStatus or flushing the TxFIFO */
N#define ETH_MAC_TRANSMISSION_PAUSE     ((uint32_t)0x00080000)  /* MAC transmitter in pause */
N#define ETH_MAC_TRANSMITFRAMECONTROLLER_IDLE            ((uint32_t)0x00000000)  /* MAC transmit frame controller: Idle */
N#define ETH_MAC_TRANSMITFRAMECONTROLLER_WAITING         ((uint32_t)0x00020000)  /* MAC transmit frame controller: Waiting for Status of previous frame or IFG/backoff period to be over */
N#define ETH_MAC_TRANSMITFRAMECONTROLLER_GENRATING_PCF   ((uint32_t)0x00040000)  /* MAC transmit frame controller: Generating and transmitting a Pause control frame (in full duplex mode) */
N#define ETH_MAC_TRANSMITFRAMECONTROLLER_TRANSFERRING    ((uint32_t)0x00060000)  /* MAC transmit frame controller: Transferring input frame for transmission */
N#define ETH_MAC_MII_TRANSMIT_ACTIVE      ((uint32_t)0x00010000)  /* MAC MII transmit engine active */
N#define ETH_MAC_RXFIFO_EMPTY             ((uint32_t)0x00000000)  /* Rx FIFO fill level: empty */
N#define ETH_MAC_RXFIFO_BELOW_THRESHOLD   ((uint32_t)0x00000100)  /* Rx FIFO fill level: fill-level below flow-control de-activate threshold */
N#define ETH_MAC_RXFIFO_ABOVE_THRESHOLD   ((uint32_t)0x00000200)  /* Rx FIFO fill level: fill-level above flow-control activate threshold */
N#define ETH_MAC_RXFIFO_FULL              ((uint32_t)0x00000300)  /* Rx FIFO fill level: full */
N#if defined(STM32F1)
X#if 0L
N#else
N#define ETH_MAC_READCONTROLLER_IDLE               ((uint32_t)0x00000000)  /* Rx FIFO read controller IDLE state */
N#define ETH_MAC_READCONTROLLER_READING_DATA       ((uint32_t)0x00000020)  /* Rx FIFO read controller Reading frame data */
N#define ETH_MAC_READCONTROLLER_READING_STATUS     ((uint32_t)0x00000040)  /* Rx FIFO read controller Reading frame status (or time-stamp) */
N#endif
N#define ETH_MAC_READCONTROLLER_FLUSHING           ((uint32_t)0x00000060)  /* Rx FIFO read controller Flushing the frame data and status */
N#define ETH_MAC_RXFIFO_WRITE_ACTIVE     ((uint32_t)0x00000010)  /* Rx FIFO write controller active */
N#define ETH_MAC_SMALL_FIFO_NOTACTIVE    ((uint32_t)0x00000000)  /* MAC small FIFO read / write controllers not active */
N#define ETH_MAC_SMALL_FIFO_READ_ACTIVE  ((uint32_t)0x00000002)  /* MAC small FIFO read controller active */
N#define ETH_MAC_SMALL_FIFO_WRITE_ACTIVE ((uint32_t)0x00000004)  /* MAC small FIFO write controller active */
N#define ETH_MAC_SMALL_FIFO_RW_ACTIVE    ((uint32_t)0x00000006)  /* MAC small FIFO read / write controllers active */
N#define ETH_MAC_MII_RECEIVE_PROTOCOL_ACTIVE   ((uint32_t)0x00000001)  /* MAC MII receive protocol engine active */
N
N/**
N  * @}
N  */
N  
N/** @defgroup HAL_DCMI_Aliased_Defines HAL DCMI Aliased Defines maintained for legacy purpose
N  * @{
N  */
N#define HAL_DCMI_ERROR_OVF      HAL_DCMI_ERROR_OVR
N#define DCMI_IT_OVF             DCMI_IT_OVR
N#define DCMI_FLAG_OVFRI         DCMI_FLAG_OVRRI
N#define DCMI_FLAG_OVFMI         DCMI_FLAG_OVRMI
N
N#define HAL_DCMI_ConfigCROP     HAL_DCMI_ConfigCrop
N#define HAL_DCMI_EnableCROP     HAL_DCMI_EnableCrop
N#define HAL_DCMI_DisableCROP    HAL_DCMI_DisableCrop
N
N/**
N  * @}
N  */  
N  
N#if defined(STM32L4xx) || defined(STM32F7) || defined(STM32F427xx) || defined(STM32F437xx) ||\
N    defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
X#if 0L || 0L || 0L || 0L ||    0L || 0L || 0L || 0L
S/** @defgroup HAL_DMA2D_Aliased_Defines HAL DMA2D Aliased Defines maintained for legacy purpose
S  * @{
S  */
S#define DMA2D_ARGB8888          DMA2D_OUTPUT_ARGB8888
S#define DMA2D_RGB888            DMA2D_OUTPUT_RGB888  
S#define DMA2D_RGB565            DMA2D_OUTPUT_RGB565  
S#define DMA2D_ARGB1555          DMA2D_OUTPUT_ARGB1555
S#define DMA2D_ARGB4444          DMA2D_OUTPUT_ARGB4444
S
S#define CM_ARGB8888             DMA2D_INPUT_ARGB8888
S#define CM_RGB888               DMA2D_INPUT_RGB888  
S#define CM_RGB565               DMA2D_INPUT_RGB565  
S#define CM_ARGB1555             DMA2D_INPUT_ARGB1555
S#define CM_ARGB4444             DMA2D_INPUT_ARGB4444
S#define CM_L8                   DMA2D_INPUT_L8      
S#define CM_AL44                 DMA2D_INPUT_AL44    
S#define CM_AL88                 DMA2D_INPUT_AL88    
S#define CM_L4                   DMA2D_INPUT_L4      
S#define CM_A8                   DMA2D_INPUT_A8      
S#define CM_A4                   DMA2D_INPUT_A4      
S/**
S  * @}
S  */    
N#endif  /* STM32L4xx ||  STM32F7*/
N
N/** @defgroup HAL_PPP_Aliased_Defines HAL PPP Aliased Defines maintained for legacy purpose
N  * @{
N  */
N  
N/**
N  * @}
N  */
N
N/* Exported functions --------------------------------------------------------*/
N
N/** @defgroup HAL_CRYP_Aliased_Functions HAL CRYP Aliased Functions maintained for legacy purpose
N  * @{
N  */
N#define HAL_CRYP_ComputationCpltCallback     HAL_CRYPEx_ComputationCpltCallback
N/**
N  * @}
N  */  
N
N/** @defgroup HAL_HASH_Aliased_Functions HAL HASH Aliased Functions maintained for legacy purpose
N  * @{
N  */ 
N#define HAL_HASH_STATETypeDef        HAL_HASH_StateTypeDef
N#define HAL_HASHPhaseTypeDef         HAL_HASH_PhaseTypeDef
N#define HAL_HMAC_MD5_Finish          HAL_HASH_MD5_Finish
N#define HAL_HMAC_SHA1_Finish         HAL_HASH_SHA1_Finish
N#define HAL_HMAC_SHA224_Finish       HAL_HASH_SHA224_Finish
N#define HAL_HMAC_SHA256_Finish       HAL_HASH_SHA256_Finish
N
N/*HASH Algorithm Selection*/
N
N#define HASH_AlgoSelection_SHA1      HASH_ALGOSELECTION_SHA1 
N#define HASH_AlgoSelection_SHA224    HASH_ALGOSELECTION_SHA224
N#define HASH_AlgoSelection_SHA256    HASH_ALGOSELECTION_SHA256
N#define HASH_AlgoSelection_MD5       HASH_ALGOSELECTION_MD5
N
N#define HASH_AlgoMode_HASH         HASH_ALGOMODE_HASH 
N#define HASH_AlgoMode_HMAC         HASH_ALGOMODE_HMAC
N
N#define HASH_HMACKeyType_ShortKey  HASH_HMAC_KEYTYPE_SHORTKEY
N#define HASH_HMACKeyType_LongKey   HASH_HMAC_KEYTYPE_LONGKEY
N/**
N  * @}
N  */
N  
N/** @defgroup HAL_Aliased_Functions HAL Generic Aliased Functions maintained for legacy purpose
N  * @{
N  */
N#define HAL_EnableDBGSleepMode HAL_DBGMCU_EnableDBGSleepMode
N#define HAL_DisableDBGSleepMode HAL_DBGMCU_DisableDBGSleepMode
N#define HAL_EnableDBGStopMode HAL_DBGMCU_EnableDBGStopMode
N#define HAL_DisableDBGStopMode HAL_DBGMCU_DisableDBGStopMode
N#define HAL_EnableDBGStandbyMode HAL_DBGMCU_EnableDBGStandbyMode
N#define HAL_DisableDBGStandbyMode HAL_DBGMCU_DisableDBGStandbyMode
N#define HAL_DBG_LowPowerConfig(Periph, cmd) (((cmd)==ENABLE)? HAL_DBGMCU_DBG_EnableLowPowerConfig(Periph) : HAL_DBGMCU_DBG_DisableLowPowerConfig(Periph))
N#define HAL_VREFINT_OutputSelect  HAL_SYSCFG_VREFINT_OutputSelect
N#define HAL_Lock_Cmd(cmd) (((cmd)==ENABLE) ? HAL_SYSCFG_Enable_Lock_VREFINT() : HAL_SYSCFG_Disable_Lock_VREFINT())
N#if defined(STM32L0)
X#if 1L
N#else
S#define HAL_VREFINT_Cmd(cmd) (((cmd)==ENABLE)? HAL_SYSCFG_EnableVREFINT() : HAL_SYSCFG_DisableVREFINT())
N#endif
N#define HAL_ADC_EnableBuffer_Cmd(cmd)  (((cmd)==ENABLE) ? HAL_ADCEx_EnableVREFINT() : HAL_ADCEx_DisableVREFINT())
N#define HAL_ADC_EnableBufferSensor_Cmd(cmd) (((cmd)==ENABLE) ?  HAL_ADCEx_EnableVREFINTTempSensor() : HAL_ADCEx_DisableVREFINTTempSensor())
N/**
N  * @}
N  */
N
N/** @defgroup HAL_FLASH_Aliased_Functions HAL FLASH Aliased Functions maintained for legacy purpose
N  * @{
N  */
N#define FLASH_HalfPageProgram      HAL_FLASHEx_HalfPageProgram
N#define FLASH_EnableRunPowerDown   HAL_FLASHEx_EnableRunPowerDown
N#define FLASH_DisableRunPowerDown  HAL_FLASHEx_DisableRunPowerDown
N#define HAL_DATA_EEPROMEx_Unlock   HAL_FLASHEx_DATAEEPROM_Unlock
N#define HAL_DATA_EEPROMEx_Lock     HAL_FLASHEx_DATAEEPROM_Lock
N#define HAL_DATA_EEPROMEx_Erase    HAL_FLASHEx_DATAEEPROM_Erase
N#define HAL_DATA_EEPROMEx_Program  HAL_FLASHEx_DATAEEPROM_Program
N
N /**
N  * @}
N  */
N
N/** @defgroup HAL_I2C_Aliased_Functions HAL I2C Aliased Functions maintained for legacy purpose
N  * @{
N  */
N#define HAL_I2CEx_AnalogFilter_Config         HAL_I2CEx_ConfigAnalogFilter
N#define HAL_I2CEx_DigitalFilter_Config        HAL_I2CEx_ConfigDigitalFilter
N#define HAL_FMPI2CEx_AnalogFilter_Config      HAL_FMPI2CEx_ConfigAnalogFilter
N#define HAL_FMPI2CEx_DigitalFilter_Config     HAL_FMPI2CEx_ConfigDigitalFilter
N
N#define HAL_I2CFastModePlusConfig(SYSCFG_I2CFastModePlus, cmd) (((cmd)==ENABLE)? HAL_I2CEx_EnableFastModePlus(SYSCFG_I2CFastModePlus): HAL_I2CEx_DisableFastModePlus(SYSCFG_I2CFastModePlus))
N /**
N  * @}
N  */
N
N/** @defgroup HAL_PWR_Aliased HAL PWR Aliased maintained for legacy purpose
N  * @{
N  */
N#define HAL_PWR_PVDConfig                             HAL_PWR_ConfigPVD
N#define HAL_PWR_DisableBkUpReg                        HAL_PWREx_DisableBkUpReg
N#define HAL_PWR_DisableFlashPowerDown                 HAL_PWREx_DisableFlashPowerDown
N#define HAL_PWR_DisableVddio2Monitor                  HAL_PWREx_DisableVddio2Monitor
N#define HAL_PWR_EnableBkUpReg                         HAL_PWREx_EnableBkUpReg
N#define HAL_PWR_EnableFlashPowerDown                  HAL_PWREx_EnableFlashPowerDown
N#define HAL_PWR_EnableVddio2Monitor                   HAL_PWREx_EnableVddio2Monitor
N#define HAL_PWR_PVD_PVM_IRQHandler                    HAL_PWREx_PVD_PVM_IRQHandler
N#define HAL_PWR_PVDLevelConfig                        HAL_PWR_ConfigPVD
N#define HAL_PWR_Vddio2Monitor_IRQHandler              HAL_PWREx_Vddio2Monitor_IRQHandler
N#define HAL_PWR_Vddio2MonitorCallback                 HAL_PWREx_Vddio2MonitorCallback
N#define HAL_PWREx_ActivateOverDrive                   HAL_PWREx_EnableOverDrive
N#define HAL_PWREx_DeactivateOverDrive                 HAL_PWREx_DisableOverDrive
N#define HAL_PWREx_DisableSDADCAnalog                  HAL_PWREx_DisableSDADC
N#define HAL_PWREx_EnableSDADCAnalog                   HAL_PWREx_EnableSDADC
N#define HAL_PWREx_PVMConfig                           HAL_PWREx_ConfigPVM
N
N#define PWR_MODE_NORMAL                               PWR_PVD_MODE_NORMAL
N#define PWR_MODE_IT_RISING                            PWR_PVD_MODE_IT_RISING
N#define PWR_MODE_IT_FALLING                           PWR_PVD_MODE_IT_FALLING
N#define PWR_MODE_IT_RISING_FALLING                    PWR_PVD_MODE_IT_RISING_FALLING
N#define PWR_MODE_EVENT_RISING                         PWR_PVD_MODE_EVENT_RISING
N#define PWR_MODE_EVENT_FALLING                        PWR_PVD_MODE_EVENT_FALLING
N#define PWR_MODE_EVENT_RISING_FALLING                 PWR_PVD_MODE_EVENT_RISING_FALLING
N
N#define CR_OFFSET_BB                                  PWR_CR_OFFSET_BB
N#define CSR_OFFSET_BB                                 PWR_CSR_OFFSET_BB
N
N#define DBP_BitNumber                                 DBP_BIT_NUMBER
N#define PVDE_BitNumber                                PVDE_BIT_NUMBER
N#define PMODE_BitNumber                               PMODE_BIT_NUMBER
N#define EWUP_BitNumber                                EWUP_BIT_NUMBER
N#define FPDS_BitNumber                                FPDS_BIT_NUMBER
N#define ODEN_BitNumber                                ODEN_BIT_NUMBER
N#define ODSWEN_BitNumber                              ODSWEN_BIT_NUMBER
N#define MRLVDS_BitNumber                              MRLVDS_BIT_NUMBER
N#define LPLVDS_BitNumber                              LPLVDS_BIT_NUMBER
N#define BRE_BitNumber                                 BRE_BIT_NUMBER
N
N#define PWR_MODE_EVT                                  PWR_PVD_MODE_NORMAL
N 
N /**
N  * @}
N  */  
N  
N/** @defgroup HAL_SMBUS_Aliased_Functions HAL SMBUS Aliased Functions maintained for legacy purpose
N  * @{
N  */
N#define HAL_SMBUS_Slave_Listen_IT          HAL_SMBUS_EnableListen_IT
N#define HAL_SMBUS_SlaveAddrCallback        HAL_SMBUS_AddrCallback         
N#define HAL_SMBUS_SlaveListenCpltCallback  HAL_SMBUS_ListenCpltCallback   
N/**
N  * @}
N  */
N
N/** @defgroup HAL_SPI_Aliased_Functions HAL SPI Aliased Functions maintained for legacy purpose
N  * @{
N  */
N#define HAL_SPI_FlushRxFifo                HAL_SPIEx_FlushRxFifo
N/**
N  * @}
N  */  
N
N/** @defgroup HAL_TIM_Aliased_Functions HAL TIM Aliased Functions maintained for legacy purpose
N  * @{
N  */
N#define HAL_TIM_DMADelayPulseCplt                       TIM_DMADelayPulseCplt
N#define HAL_TIM_DMAError                                TIM_DMAError
N#define HAL_TIM_DMACaptureCplt                          TIM_DMACaptureCplt
N#define HAL_TIMEx_DMACommutationCplt                    TIMEx_DMACommutationCplt
N/**
N  * @}
N  */
N   
N/** @defgroup HAL_UART_Aliased_Functions HAL UART Aliased Functions maintained for legacy purpose
N  * @{
N  */ 
N#define HAL_UART_WakeupCallback HAL_UARTEx_WakeupCallback
N/**
N  * @}
N  */
N  
N/** @defgroup HAL_LTDC_Aliased_Functions HAL LTDC Aliased Functions maintained for legacy purpose
N  * @{
N  */ 
N#define HAL_LTDC_LineEvenCallback HAL_LTDC_LineEventCallback
N/**
N  * @}
N  */  
N   
N  
N/** @defgroup HAL_PPP_Aliased_Functions HAL PPP Aliased Functions maintained for legacy purpose
N  * @{
N  */
N  
N/**
N  * @}
N  */
N
N/* Exported macros ------------------------------------------------------------*/
N
N/** @defgroup HAL_AES_Aliased_Macros HAL CRYP Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#define AES_IT_CC                      CRYP_IT_CC
N#define AES_IT_ERR                     CRYP_IT_ERR
N#define AES_FLAG_CCF                   CRYP_FLAG_CCF
N/**
N  * @}
N  */  
N  
N/** @defgroup HAL_Aliased_Macros HAL Generic Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#define __HAL_GET_BOOT_MODE                   __HAL_SYSCFG_GET_BOOT_MODE
N#define __HAL_REMAPMEMORY_FLASH               __HAL_SYSCFG_REMAPMEMORY_FLASH
N#define __HAL_REMAPMEMORY_SYSTEMFLASH         __HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH
N#define __HAL_REMAPMEMORY_SRAM                __HAL_SYSCFG_REMAPMEMORY_SRAM
N#define __HAL_REMAPMEMORY_FMC                 __HAL_SYSCFG_REMAPMEMORY_FMC
N#define __HAL_REMAPMEMORY_FMC_SDRAM           __HAL_SYSCFG_REMAPMEMORY_FMC_SDRAM 
N#define __HAL_REMAPMEMORY_FSMC                __HAL_SYSCFG_REMAPMEMORY_FSMC
N#define __HAL_REMAPMEMORY_QUADSPI             __HAL_SYSCFG_REMAPMEMORY_QUADSPI
N#define __HAL_FMC_BANK                        __HAL_SYSCFG_FMC_BANK
N#define __HAL_GET_FLAG                        __HAL_SYSCFG_GET_FLAG
N#define __HAL_CLEAR_FLAG                      __HAL_SYSCFG_CLEAR_FLAG
N#define __HAL_VREFINT_OUT_ENABLE              __HAL_SYSCFG_VREFINT_OUT_ENABLE
N#define __HAL_VREFINT_OUT_DISABLE             __HAL_SYSCFG_VREFINT_OUT_DISABLE
N
N#define SYSCFG_FLAG_VREF_READY                SYSCFG_FLAG_VREFINT_READY
N#define SYSCFG_FLAG_RC48                      RCC_FLAG_HSI48
N#define IS_SYSCFG_FASTMODEPLUS_CONFIG         IS_I2C_FASTMODEPLUS
N#define UFB_MODE_BitNumber                    UFB_MODE_BIT_NUMBER
N#define CMP_PD_BitNumber                      CMP_PD_BIT_NUMBER
N
N/**
N  * @}
N  */
N
N   
N/** @defgroup HAL_ADC_Aliased_Macros HAL ADC Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#define __ADC_ENABLE                                     __HAL_ADC_ENABLE
N#define __ADC_DISABLE                                    __HAL_ADC_DISABLE
N#define __HAL_ADC_ENABLING_CONDITIONS                    ADC_ENABLING_CONDITIONS
N#define __HAL_ADC_DISABLING_CONDITIONS                   ADC_DISABLING_CONDITIONS
N#define __HAL_ADC_IS_ENABLED                             ADC_IS_ENABLE
N#define __ADC_IS_ENABLED                                 ADC_IS_ENABLE
N#define __HAL_ADC_IS_SOFTWARE_START_REGULAR              ADC_IS_SOFTWARE_START_REGULAR
N#define __HAL_ADC_IS_SOFTWARE_START_INJECTED             ADC_IS_SOFTWARE_START_INJECTED
N#define __HAL_ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED
N#define __HAL_ADC_IS_CONVERSION_ONGOING_REGULAR          ADC_IS_CONVERSION_ONGOING_REGULAR
N#define __HAL_ADC_IS_CONVERSION_ONGOING_INJECTED         ADC_IS_CONVERSION_ONGOING_INJECTED
N#define __HAL_ADC_IS_CONVERSION_ONGOING                  ADC_IS_CONVERSION_ONGOING
N#define __HAL_ADC_CLEAR_ERRORCODE                        ADC_CLEAR_ERRORCODE
N
N#define __HAL_ADC_GET_RESOLUTION                         ADC_GET_RESOLUTION
N#define __HAL_ADC_JSQR_RK                                ADC_JSQR_RK
N#define __HAL_ADC_CFGR_AWD1CH                            ADC_CFGR_AWD1CH_SHIFT
N#define __HAL_ADC_CFGR_AWD23CR                           ADC_CFGR_AWD23CR
N#define __HAL_ADC_CFGR_INJECT_AUTO_CONVERSION            ADC_CFGR_INJECT_AUTO_CONVERSION
N#define __HAL_ADC_CFGR_INJECT_CONTEXT_QUEUE              ADC_CFGR_INJECT_CONTEXT_QUEUE
N#define __HAL_ADC_CFGR_INJECT_DISCCONTINUOUS             ADC_CFGR_INJECT_DISCCONTINUOUS
N#define __HAL_ADC_CFGR_REG_DISCCONTINUOUS                ADC_CFGR_REG_DISCCONTINUOUS
N#define __HAL_ADC_CFGR_DISCONTINUOUS_NUM                 ADC_CFGR_DISCONTINUOUS_NUM
N#define __HAL_ADC_CFGR_AUTOWAIT                          ADC_CFGR_AUTOWAIT
N#define __HAL_ADC_CFGR_CONTINUOUS                        ADC_CFGR_CONTINUOUS
N#define __HAL_ADC_CFGR_OVERRUN                           ADC_CFGR_OVERRUN
N#define __HAL_ADC_CFGR_DMACONTREQ                        ADC_CFGR_DMACONTREQ
N#define __HAL_ADC_CFGR_EXTSEL                            ADC_CFGR_EXTSEL_SET
N#define __HAL_ADC_JSQR_JEXTSEL                           ADC_JSQR_JEXTSEL_SET
N#define __HAL_ADC_OFR_CHANNEL                            ADC_OFR_CHANNEL
N#define __HAL_ADC_DIFSEL_CHANNEL                         ADC_DIFSEL_CHANNEL
N#define __HAL_ADC_CALFACT_DIFF_SET                       ADC_CALFACT_DIFF_SET
N#define __HAL_ADC_CALFACT_DIFF_GET                       ADC_CALFACT_DIFF_GET
N#define __HAL_ADC_TRX_HIGHTHRESHOLD                      ADC_TRX_HIGHTHRESHOLD
N
N#define __HAL_ADC_OFFSET_SHIFT_RESOLUTION                ADC_OFFSET_SHIFT_RESOLUTION
N#define __HAL_ADC_AWD1THRESHOLD_SHIFT_RESOLUTION         ADC_AWD1THRESHOLD_SHIFT_RESOLUTION
N#define __HAL_ADC_AWD23THRESHOLD_SHIFT_RESOLUTION        ADC_AWD23THRESHOLD_SHIFT_RESOLUTION
N#define __HAL_ADC_COMMON_REGISTER                        ADC_COMMON_REGISTER
N#define __HAL_ADC_COMMON_CCR_MULTI                       ADC_COMMON_CCR_MULTI
N#define __HAL_ADC_MULTIMODE_IS_ENABLED                   ADC_MULTIMODE_IS_ENABLE
N#define __ADC_MULTIMODE_IS_ENABLED                       ADC_MULTIMODE_IS_ENABLE
N#define __HAL_ADC_NONMULTIMODE_OR_MULTIMODEMASTER        ADC_NONMULTIMODE_OR_MULTIMODEMASTER
N#define __HAL_ADC_COMMON_ADC_OTHER                       ADC_COMMON_ADC_OTHER
N#define __HAL_ADC_MULTI_SLAVE                            ADC_MULTI_SLAVE
N
N#define __HAL_ADC_SQR1_L                                 ADC_SQR1_L_SHIFT
N#define __HAL_ADC_JSQR_JL                                ADC_JSQR_JL_SHIFT
N#define __HAL_ADC_JSQR_RK_JL                             ADC_JSQR_RK_JL
N#define __HAL_ADC_CR1_DISCONTINUOUS_NUM                  ADC_CR1_DISCONTINUOUS_NUM
N#define __HAL_ADC_CR1_SCAN                               ADC_CR1_SCAN_SET
N#define __HAL_ADC_CONVCYCLES_MAX_RANGE                   ADC_CONVCYCLES_MAX_RANGE
N#define __HAL_ADC_CLOCK_PRESCALER_RANGE                  ADC_CLOCK_PRESCALER_RANGE
N#define __HAL_ADC_GET_CLOCK_PRESCALER                    ADC_GET_CLOCK_PRESCALER
N
N#define __HAL_ADC_SQR1                                   ADC_SQR1
N#define __HAL_ADC_SMPR1                                  ADC_SMPR1
N#define __HAL_ADC_SMPR2                                  ADC_SMPR2
N#define __HAL_ADC_SQR3_RK                                ADC_SQR3_RK
N#define __HAL_ADC_SQR2_RK                                ADC_SQR2_RK
N#define __HAL_ADC_SQR1_RK                                ADC_SQR1_RK
N#define __HAL_ADC_CR2_CONTINUOUS                         ADC_CR2_CONTINUOUS
N#define __HAL_ADC_CR1_DISCONTINUOUS                      ADC_CR1_DISCONTINUOUS
N#define __HAL_ADC_CR1_SCANCONV                           ADC_CR1_SCANCONV
N#define __HAL_ADC_CR2_EOCSelection                       ADC_CR2_EOCSelection
N#define __HAL_ADC_CR2_DMAContReq                         ADC_CR2_DMAContReq
N#define __HAL_ADC_JSQR                                   ADC_JSQR
N
N#define __HAL_ADC_CHSELR_CHANNEL                         ADC_CHSELR_CHANNEL
N#define __HAL_ADC_CFGR1_REG_DISCCONTINUOUS               ADC_CFGR1_REG_DISCCONTINUOUS
N#define __HAL_ADC_CFGR1_AUTOOFF                          ADC_CFGR1_AUTOOFF
N#define __HAL_ADC_CFGR1_AUTOWAIT                         ADC_CFGR1_AUTOWAIT
N#define __HAL_ADC_CFGR1_CONTINUOUS                       ADC_CFGR1_CONTINUOUS
N#define __HAL_ADC_CFGR1_OVERRUN                          ADC_CFGR1_OVERRUN
N#define __HAL_ADC_CFGR1_SCANDIR                          ADC_CFGR1_SCANDIR
N#define __HAL_ADC_CFGR1_DMACONTREQ                       ADC_CFGR1_DMACONTREQ
N
N/**
N  * @}
N  */
N
N/** @defgroup HAL_DAC_Aliased_Macros HAL DAC Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#define __HAL_DHR12R1_ALIGNEMENT                        DAC_DHR12R1_ALIGNMENT
N#define __HAL_DHR12R2_ALIGNEMENT                        DAC_DHR12R2_ALIGNMENT
N#define __HAL_DHR12RD_ALIGNEMENT                        DAC_DHR12RD_ALIGNMENT
N#define IS_DAC_GENERATE_WAVE                            IS_DAC_WAVE
N
N/**
N  * @}
N  */
N   
N/** @defgroup HAL_DBGMCU_Aliased_Macros HAL DBGMCU Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#define __HAL_FREEZE_TIM1_DBGMCU __HAL_DBGMCU_FREEZE_TIM1
N#define __HAL_UNFREEZE_TIM1_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM1
N#define __HAL_FREEZE_TIM2_DBGMCU __HAL_DBGMCU_FREEZE_TIM2
N#define __HAL_UNFREEZE_TIM2_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM2
N#define __HAL_FREEZE_TIM3_DBGMCU __HAL_DBGMCU_FREEZE_TIM3
N#define __HAL_UNFREEZE_TIM3_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM3
N#define __HAL_FREEZE_TIM4_DBGMCU __HAL_DBGMCU_FREEZE_TIM4
N#define __HAL_UNFREEZE_TIM4_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM4
N#define __HAL_FREEZE_TIM5_DBGMCU __HAL_DBGMCU_FREEZE_TIM5
N#define __HAL_UNFREEZE_TIM5_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM5
N#define __HAL_FREEZE_TIM6_DBGMCU __HAL_DBGMCU_FREEZE_TIM6
N#define __HAL_UNFREEZE_TIM6_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM6
N#define __HAL_FREEZE_TIM7_DBGMCU __HAL_DBGMCU_FREEZE_TIM7
N#define __HAL_UNFREEZE_TIM7_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM7
N#define __HAL_FREEZE_TIM8_DBGMCU __HAL_DBGMCU_FREEZE_TIM8
N#define __HAL_UNFREEZE_TIM8_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM8
N
N#define __HAL_FREEZE_TIM9_DBGMCU __HAL_DBGMCU_FREEZE_TIM9
N#define __HAL_UNFREEZE_TIM9_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM9
N#define __HAL_FREEZE_TIM10_DBGMCU __HAL_DBGMCU_FREEZE_TIM10
N#define __HAL_UNFREEZE_TIM10_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM10
N#define __HAL_FREEZE_TIM11_DBGMCU __HAL_DBGMCU_FREEZE_TIM11
N#define __HAL_UNFREEZE_TIM11_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM11
N#define __HAL_FREEZE_TIM12_DBGMCU __HAL_DBGMCU_FREEZE_TIM12
N#define __HAL_UNFREEZE_TIM12_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM12
N#define __HAL_FREEZE_TIM13_DBGMCU __HAL_DBGMCU_FREEZE_TIM13
N#define __HAL_UNFREEZE_TIM13_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM13
N#define __HAL_FREEZE_TIM14_DBGMCU __HAL_DBGMCU_FREEZE_TIM14
N#define __HAL_UNFREEZE_TIM14_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM14
N#define __HAL_FREEZE_CAN2_DBGMCU __HAL_DBGMCU_FREEZE_CAN2
N#define __HAL_UNFREEZE_CAN2_DBGMCU __HAL_DBGMCU_UNFREEZE_CAN2
N
N
N#define __HAL_FREEZE_TIM15_DBGMCU __HAL_DBGMCU_FREEZE_TIM15
N#define __HAL_UNFREEZE_TIM15_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM15
N#define __HAL_FREEZE_TIM16_DBGMCU __HAL_DBGMCU_FREEZE_TIM16
N#define __HAL_UNFREEZE_TIM16_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM16
N#define __HAL_FREEZE_TIM17_DBGMCU __HAL_DBGMCU_FREEZE_TIM17
N#define __HAL_UNFREEZE_TIM17_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM17
N#define __HAL_FREEZE_RTC_DBGMCU __HAL_DBGMCU_FREEZE_RTC
N#define __HAL_UNFREEZE_RTC_DBGMCU __HAL_DBGMCU_UNFREEZE_RTC
N#define __HAL_FREEZE_WWDG_DBGMCU __HAL_DBGMCU_FREEZE_WWDG
N#define __HAL_UNFREEZE_WWDG_DBGMCU __HAL_DBGMCU_UNFREEZE_WWDG
N#define __HAL_FREEZE_IWDG_DBGMCU __HAL_DBGMCU_FREEZE_IWDG
N#define __HAL_UNFREEZE_IWDG_DBGMCU __HAL_DBGMCU_UNFREEZE_IWDG
N#define __HAL_FREEZE_I2C1_TIMEOUT_DBGMCU __HAL_DBGMCU_FREEZE_I2C1_TIMEOUT
N#define __HAL_UNFREEZE_I2C1_TIMEOUT_DBGMCU __HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT
N#define __HAL_FREEZE_I2C2_TIMEOUT_DBGMCU __HAL_DBGMCU_FREEZE_I2C2_TIMEOUT
N#define __HAL_UNFREEZE_I2C2_TIMEOUT_DBGMCU __HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT
N#define __HAL_FREEZE_I2C3_TIMEOUT_DBGMCU __HAL_DBGMCU_FREEZE_I2C3_TIMEOUT
N#define __HAL_UNFREEZE_I2C3_TIMEOUT_DBGMCU __HAL_DBGMCU_UNFREEZE_I2C3_TIMEOUT
N#define __HAL_FREEZE_CAN1_DBGMCU __HAL_DBGMCU_FREEZE_CAN1
N#define __HAL_UNFREEZE_CAN1_DBGMCU __HAL_DBGMCU_UNFREEZE_CAN1
N#define __HAL_FREEZE_LPTIM1_DBGMCU __HAL_DBGMCU_FREEZE_LPTIM1
N#define __HAL_UNFREEZE_LPTIM1_DBGMCU __HAL_DBGMCU_UNFREEZE_LPTIM1
N#define __HAL_FREEZE_LPTIM2_DBGMCU __HAL_DBGMCU_FREEZE_LPTIM2
N#define __HAL_UNFREEZE_LPTIM2_DBGMCU __HAL_DBGMCU_UNFREEZE_LPTIM2
N
N/**
N  * @}
N  */
N
N/** @defgroup HAL_COMP_Aliased_Macros HAL COMP Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#if defined(STM32F3)
X#if 0L
S#define COMP_START                                       __HAL_COMP_ENABLE
S#define COMP_STOP                                        __HAL_COMP_DISABLE
S#define COMP_LOCK                                        __HAL_COMP_LOCK
S   
S#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx) || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
S#define __HAL_COMP_EXTI_RISING_IT_ENABLE(__EXTILINE__)   (((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE() : \
S                                                          __HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE())
X#define __HAL_COMP_EXTI_RISING_IT_ENABLE(__EXTILINE__)   (((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE() :                                                           __HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE())
S#define __HAL_COMP_EXTI_RISING_IT_DISABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE() : \
S                                                          __HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE())
X#define __HAL_COMP_EXTI_RISING_IT_DISABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE() :                                                           __HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE())
S#define __HAL_COMP_EXTI_FALLING_IT_ENABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE() : \
S                                                          __HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE())
X#define __HAL_COMP_EXTI_FALLING_IT_ENABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE() :                                                           __HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE())
S#define __HAL_COMP_EXTI_FALLING_IT_DISABLE(__EXTILINE__) (((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE() : \
S                                                          __HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE())
X#define __HAL_COMP_EXTI_FALLING_IT_DISABLE(__EXTILINE__) (((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE() :                                                           __HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE())
S#define __HAL_COMP_EXTI_ENABLE_IT(__EXTILINE__)          (((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_IT() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_IT() : \
S                                                          __HAL_COMP_COMP6_EXTI_ENABLE_IT())
X#define __HAL_COMP_EXTI_ENABLE_IT(__EXTILINE__)          (((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_IT() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_IT() :                                                           __HAL_COMP_COMP6_EXTI_ENABLE_IT())
S#define __HAL_COMP_EXTI_DISABLE_IT(__EXTILINE__)         (((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_IT() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_IT() : \
S                                                          __HAL_COMP_COMP6_EXTI_DISABLE_IT())
X#define __HAL_COMP_EXTI_DISABLE_IT(__EXTILINE__)         (((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_IT() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_IT() :                                                           __HAL_COMP_COMP6_EXTI_DISABLE_IT())
S#define __HAL_COMP_EXTI_GET_FLAG(__FLAG__)               (((__FLAG__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_GET_FLAG() : \
S                                                          ((__FLAG__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_GET_FLAG() : \
S                                                          __HAL_COMP_COMP6_EXTI_GET_FLAG())
X#define __HAL_COMP_EXTI_GET_FLAG(__FLAG__)               (((__FLAG__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_GET_FLAG() :                                                           ((__FLAG__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_GET_FLAG() :                                                           __HAL_COMP_COMP6_EXTI_GET_FLAG())
S#define __HAL_COMP_EXTI_CLEAR_FLAG(__FLAG__)             (((__FLAG__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_CLEAR_FLAG() : \
S                                                          ((__FLAG__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_CLEAR_FLAG() : \
S                                                          __HAL_COMP_COMP6_EXTI_CLEAR_FLAG())
X#define __HAL_COMP_EXTI_CLEAR_FLAG(__FLAG__)             (((__FLAG__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_CLEAR_FLAG() :                                                           ((__FLAG__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_CLEAR_FLAG() :                                                           __HAL_COMP_COMP6_EXTI_CLEAR_FLAG())
S# endif
S# if defined(STM32F302xE) || defined(STM32F302xC)
S#define __HAL_COMP_EXTI_RISING_IT_ENABLE(__EXTILINE__)   (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE() : \
S                                                          __HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE())
X#define __HAL_COMP_EXTI_RISING_IT_ENABLE(__EXTILINE__)   (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE() :                                                           __HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE())
S#define __HAL_COMP_EXTI_RISING_IT_DISABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE() : \
S                                                          __HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE())
X#define __HAL_COMP_EXTI_RISING_IT_DISABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE() :                                                           __HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE())
S#define __HAL_COMP_EXTI_FALLING_IT_ENABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE() : \
S                                                          __HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE())
X#define __HAL_COMP_EXTI_FALLING_IT_ENABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE() :                                                           __HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE())
S#define __HAL_COMP_EXTI_FALLING_IT_DISABLE(__EXTILINE__) (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE() : \
S                                                          __HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE())
X#define __HAL_COMP_EXTI_FALLING_IT_DISABLE(__EXTILINE__) (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE() :                                                           __HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE())
S#define __HAL_COMP_EXTI_ENABLE_IT(__EXTILINE__)          (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_IT() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_IT() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_IT() : \
S                                                          __HAL_COMP_COMP6_EXTI_ENABLE_IT())
X#define __HAL_COMP_EXTI_ENABLE_IT(__EXTILINE__)          (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_IT() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_IT() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_IT() :                                                           __HAL_COMP_COMP6_EXTI_ENABLE_IT())
S#define __HAL_COMP_EXTI_DISABLE_IT(__EXTILINE__)         (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_IT() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_IT() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_IT() : \
S                                                          __HAL_COMP_COMP6_EXTI_DISABLE_IT())
X#define __HAL_COMP_EXTI_DISABLE_IT(__EXTILINE__)         (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_IT() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_IT() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_IT() :                                                           __HAL_COMP_COMP6_EXTI_DISABLE_IT())
S#define __HAL_COMP_EXTI_GET_FLAG(__FLAG__)               (((__FLAG__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_GET_FLAG() : \
S                                                          ((__FLAG__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_GET_FLAG() : \
S                                                          ((__FLAG__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_GET_FLAG() : \
S                                                          __HAL_COMP_COMP6_EXTI_GET_FLAG())
X#define __HAL_COMP_EXTI_GET_FLAG(__FLAG__)               (((__FLAG__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_GET_FLAG() :                                                           ((__FLAG__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_GET_FLAG() :                                                           ((__FLAG__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_GET_FLAG() :                                                           __HAL_COMP_COMP6_EXTI_GET_FLAG())
S#define __HAL_COMP_EXTI_CLEAR_FLAG(__FLAG__)             (((__FLAG__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_CLEAR_FLAG() : \
S                                                          ((__FLAG__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_CLEAR_FLAG() : \
S                                                          ((__FLAG__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_CLEAR_FLAG() : \
S                                                          __HAL_COMP_COMP6_EXTI_CLEAR_FLAG())
X#define __HAL_COMP_EXTI_CLEAR_FLAG(__FLAG__)             (((__FLAG__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_CLEAR_FLAG() :                                                           ((__FLAG__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_CLEAR_FLAG() :                                                           ((__FLAG__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_CLEAR_FLAG() :                                                           __HAL_COMP_COMP6_EXTI_CLEAR_FLAG())
S# endif
S# if defined(STM32F303xE) || defined(STM32F398xx) || defined(STM32F303xC) || defined(STM32F358xx)
S#define __HAL_COMP_EXTI_RISING_IT_ENABLE(__EXTILINE__)   (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP3) ? __HAL_COMP_COMP3_EXTI_ENABLE_RISING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP5) ? __HAL_COMP_COMP5_EXTI_ENABLE_RISING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP6) ? __HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE() : \
S                                                          __HAL_COMP_COMP7_EXTI_ENABLE_RISING_EDGE())
X#define __HAL_COMP_EXTI_RISING_IT_ENABLE(__EXTILINE__)   (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP3) ? __HAL_COMP_COMP3_EXTI_ENABLE_RISING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP5) ? __HAL_COMP_COMP5_EXTI_ENABLE_RISING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP6) ? __HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE() :                                                           __HAL_COMP_COMP7_EXTI_ENABLE_RISING_EDGE())
S#define __HAL_COMP_EXTI_RISING_IT_DISABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP3) ? __HAL_COMP_COMP3_EXTI_DISABLE_RISING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP5) ? __HAL_COMP_COMP5_EXTI_DISABLE_RISING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP6) ? __HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE() : \
S                                                          __HAL_COMP_COMP7_EXTI_DISABLE_RISING_EDGE())
X#define __HAL_COMP_EXTI_RISING_IT_DISABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP3) ? __HAL_COMP_COMP3_EXTI_DISABLE_RISING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP5) ? __HAL_COMP_COMP5_EXTI_DISABLE_RISING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP6) ? __HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE() :                                                           __HAL_COMP_COMP7_EXTI_DISABLE_RISING_EDGE())
S#define __HAL_COMP_EXTI_FALLING_IT_ENABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP3) ? __HAL_COMP_COMP3_EXTI_ENABLE_FALLING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP5) ? __HAL_COMP_COMP5_EXTI_ENABLE_FALLING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP6) ? __HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE() : \
S                                                          __HAL_COMP_COMP7_EXTI_ENABLE_FALLING_EDGE())
X#define __HAL_COMP_EXTI_FALLING_IT_ENABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP3) ? __HAL_COMP_COMP3_EXTI_ENABLE_FALLING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP5) ? __HAL_COMP_COMP5_EXTI_ENABLE_FALLING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP6) ? __HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE() :                                                           __HAL_COMP_COMP7_EXTI_ENABLE_FALLING_EDGE())
S#define __HAL_COMP_EXTI_FALLING_IT_DISABLE(__EXTILINE__) (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP3) ? __HAL_COMP_COMP3_EXTI_DISABLE_FALLING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP5) ? __HAL_COMP_COMP5_EXTI_DISABLE_FALLING_EDGE() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP6) ? __HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE() : \
S                                                          __HAL_COMP_COMP7_EXTI_DISABLE_FALLING_EDGE())
X#define __HAL_COMP_EXTI_FALLING_IT_DISABLE(__EXTILINE__) (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP3) ? __HAL_COMP_COMP3_EXTI_DISABLE_FALLING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP5) ? __HAL_COMP_COMP5_EXTI_DISABLE_FALLING_EDGE() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP6) ? __HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE() :                                                           __HAL_COMP_COMP7_EXTI_DISABLE_FALLING_EDGE())
S#define __HAL_COMP_EXTI_ENABLE_IT(__EXTILINE__)          (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_IT() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_IT() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP3) ? __HAL_COMP_COMP3_EXTI_ENABLE_IT() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_IT() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP5) ? __HAL_COMP_COMP5_EXTI_ENABLE_IT() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP6) ? __HAL_COMP_COMP6_EXTI_ENABLE_IT() : \
S                                                          __HAL_COMP_COMP7_EXTI_ENABLE_IT())
X#define __HAL_COMP_EXTI_ENABLE_IT(__EXTILINE__)          (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_IT() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_ENABLE_IT() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP3) ? __HAL_COMP_COMP3_EXTI_ENABLE_IT() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_ENABLE_IT() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP5) ? __HAL_COMP_COMP5_EXTI_ENABLE_IT() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP6) ? __HAL_COMP_COMP6_EXTI_ENABLE_IT() :                                                           __HAL_COMP_COMP7_EXTI_ENABLE_IT())
S#define __HAL_COMP_EXTI_DISABLE_IT(__EXTILINE__)         (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_IT() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_IT() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP3) ? __HAL_COMP_COMP3_EXTI_DISABLE_IT() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_IT() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP5) ? __HAL_COMP_COMP5_EXTI_DISABLE_IT() : \
S                                                          ((__EXTILINE__)  == COMP_EXTI_LINE_COMP6) ? __HAL_COMP_COMP6_EXTI_DISABLE_IT() : \
S                                                          __HAL_COMP_COMP7_EXTI_DISABLE_IT())
X#define __HAL_COMP_EXTI_DISABLE_IT(__EXTILINE__)         (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_IT() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_DISABLE_IT() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP3) ? __HAL_COMP_COMP3_EXTI_DISABLE_IT() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_DISABLE_IT() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP5) ? __HAL_COMP_COMP5_EXTI_DISABLE_IT() :                                                           ((__EXTILINE__)  == COMP_EXTI_LINE_COMP6) ? __HAL_COMP_COMP6_EXTI_DISABLE_IT() :                                                           __HAL_COMP_COMP7_EXTI_DISABLE_IT())
S#define __HAL_COMP_EXTI_GET_FLAG(__FLAG__)               (((__FLAG__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_GET_FLAG() : \
S                                                          ((__FLAG__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_GET_FLAG() : \
S                                                          ((__FLAG__)  == COMP_EXTI_LINE_COMP3) ? __HAL_COMP_COMP3_EXTI_GET_FLAG() : \
S                                                          ((__FLAG__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_GET_FLAG() : \
S                                                          ((__FLAG__)  == COMP_EXTI_LINE_COMP5) ? __HAL_COMP_COMP5_EXTI_GET_FLAG() : \
S                                                          ((__FLAG__)  == COMP_EXTI_LINE_COMP6) ? __HAL_COMP_COMP6_EXTI_GET_FLAG() : \
S                                                          __HAL_COMP_COMP7_EXTI_GET_FLAG())
X#define __HAL_COMP_EXTI_GET_FLAG(__FLAG__)               (((__FLAG__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_GET_FLAG() :                                                           ((__FLAG__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_GET_FLAG() :                                                           ((__FLAG__)  == COMP_EXTI_LINE_COMP3) ? __HAL_COMP_COMP3_EXTI_GET_FLAG() :                                                           ((__FLAG__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_GET_FLAG() :                                                           ((__FLAG__)  == COMP_EXTI_LINE_COMP5) ? __HAL_COMP_COMP5_EXTI_GET_FLAG() :                                                           ((__FLAG__)  == COMP_EXTI_LINE_COMP6) ? __HAL_COMP_COMP6_EXTI_GET_FLAG() :                                                           __HAL_COMP_COMP7_EXTI_GET_FLAG())
S#define __HAL_COMP_EXTI_CLEAR_FLAG(__FLAG__)             (((__FLAG__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_CLEAR_FLAG() : \
S                                                          ((__FLAG__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_CLEAR_FLAG() : \
S                                                          ((__FLAG__)  == COMP_EXTI_LINE_COMP3) ? __HAL_COMP_COMP3_EXTI_CLEAR_FLAG() : \
S                                                          ((__FLAG__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_CLEAR_FLAG() : \
S                                                          ((__FLAG__)  == COMP_EXTI_LINE_COMP5) ? __HAL_COMP_COMP5_EXTI_CLEAR_FLAG() : \
S                                                          ((__FLAG__)  == COMP_EXTI_LINE_COMP6) ? __HAL_COMP_COMP6_EXTI_CLEAR_FLAG() : \
S                                                          __HAL_COMP_COMP7_EXTI_CLEAR_FLAG())
X#define __HAL_COMP_EXTI_CLEAR_FLAG(__FLAG__)             (((__FLAG__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_CLEAR_FLAG() :                                                           ((__FLAG__)  == COMP_EXTI_LINE_COMP2) ? __HAL_COMP_COMP2_EXTI_CLEAR_FLAG() :                                                           ((__FLAG__)  == COMP_EXTI_LINE_COMP3) ? __HAL_COMP_COMP3_EXTI_CLEAR_FLAG() :                                                           ((__FLAG__)  == COMP_EXTI_LINE_COMP4) ? __HAL_COMP_COMP4_EXTI_CLEAR_FLAG() :                                                           ((__FLAG__)  == COMP_EXTI_LINE_COMP5) ? __HAL_COMP_COMP5_EXTI_CLEAR_FLAG() :                                                           ((__FLAG__)  == COMP_EXTI_LINE_COMP6) ? __HAL_COMP_COMP6_EXTI_CLEAR_FLAG() :                                                           __HAL_COMP_COMP7_EXTI_CLEAR_FLAG())
S# endif
S# if defined(STM32F373xC) ||defined(STM32F378xx)
S#define __HAL_COMP_EXTI_RISING_IT_ENABLE(__EXTILINE__)   (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE() : \
S                                                          __HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE())
X#define __HAL_COMP_EXTI_RISING_IT_ENABLE(__EXTILINE__)   (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE() :                                                           __HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE())
S#define __HAL_COMP_EXTI_RISING_IT_DISABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE() : \
S                                                          __HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE())
X#define __HAL_COMP_EXTI_RISING_IT_DISABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE() :                                                           __HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE())
S#define __HAL_COMP_EXTI_FALLING_IT_ENABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE() : \
S                                                          __HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE())
X#define __HAL_COMP_EXTI_FALLING_IT_ENABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE() :                                                           __HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE())
S#define __HAL_COMP_EXTI_FALLING_IT_DISABLE(__EXTILINE__) (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE() : \
S                                                          __HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE())
X#define __HAL_COMP_EXTI_FALLING_IT_DISABLE(__EXTILINE__) (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE() :                                                           __HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE())
S#define __HAL_COMP_EXTI_ENABLE_IT(__EXTILINE__)          (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_IT() : \
S                                                          __HAL_COMP_COMP2_EXTI_ENABLE_IT())
X#define __HAL_COMP_EXTI_ENABLE_IT(__EXTILINE__)          (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_IT() :                                                           __HAL_COMP_COMP2_EXTI_ENABLE_IT())
S#define __HAL_COMP_EXTI_DISABLE_IT(__EXTILINE__)         (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_IT() : \
S                                                          __HAL_COMP_COMP2_EXTI_DISABLE_IT())
X#define __HAL_COMP_EXTI_DISABLE_IT(__EXTILINE__)         (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_IT() :                                                           __HAL_COMP_COMP2_EXTI_DISABLE_IT())
S#define __HAL_COMP_EXTI_GET_FLAG(__FLAG__)               (((__FLAG__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_GET_FLAG() : \
S                                                          __HAL_COMP_COMP2_EXTI_GET_FLAG())
X#define __HAL_COMP_EXTI_GET_FLAG(__FLAG__)               (((__FLAG__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_GET_FLAG() :                                                           __HAL_COMP_COMP2_EXTI_GET_FLAG())
S#define __HAL_COMP_EXTI_CLEAR_FLAG(__FLAG__)             (((__FLAG__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_CLEAR_FLAG() : \
S                                                          __HAL_COMP_COMP2_EXTI_CLEAR_FLAG())
X#define __HAL_COMP_EXTI_CLEAR_FLAG(__FLAG__)             (((__FLAG__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_CLEAR_FLAG() :                                                           __HAL_COMP_COMP2_EXTI_CLEAR_FLAG())
S# endif
N#else
N#define __HAL_COMP_EXTI_RISING_IT_ENABLE(__EXTILINE__)   (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE() : \
N                                                          __HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE())
X#define __HAL_COMP_EXTI_RISING_IT_ENABLE(__EXTILINE__)   (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE() :                                                           __HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE())
N#define __HAL_COMP_EXTI_RISING_IT_DISABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE() : \
N                                                          __HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE())
X#define __HAL_COMP_EXTI_RISING_IT_DISABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE() :                                                           __HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE())
N#define __HAL_COMP_EXTI_FALLING_IT_ENABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE() : \
N                                                          __HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE())
X#define __HAL_COMP_EXTI_FALLING_IT_ENABLE(__EXTILINE__)  (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE() :                                                           __HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE())
N#define __HAL_COMP_EXTI_FALLING_IT_DISABLE(__EXTILINE__) (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE() : \
N                                                          __HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE())
X#define __HAL_COMP_EXTI_FALLING_IT_DISABLE(__EXTILINE__) (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE() :                                                           __HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE())
N#define __HAL_COMP_EXTI_ENABLE_IT(__EXTILINE__)          (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_IT() : \
N                                                          __HAL_COMP_COMP2_EXTI_ENABLE_IT())
X#define __HAL_COMP_EXTI_ENABLE_IT(__EXTILINE__)          (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_IT() :                                                           __HAL_COMP_COMP2_EXTI_ENABLE_IT())
N#define __HAL_COMP_EXTI_DISABLE_IT(__EXTILINE__)         (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_IT() : \
N                                                          __HAL_COMP_COMP2_EXTI_DISABLE_IT())
X#define __HAL_COMP_EXTI_DISABLE_IT(__EXTILINE__)         (((__EXTILINE__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_IT() :                                                           __HAL_COMP_COMP2_EXTI_DISABLE_IT())
N#define __HAL_COMP_EXTI_GET_FLAG(__FLAG__)               (((__FLAG__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_GET_FLAG() : \
N                                                          __HAL_COMP_COMP2_EXTI_GET_FLAG())
X#define __HAL_COMP_EXTI_GET_FLAG(__FLAG__)               (((__FLAG__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_GET_FLAG() :                                                           __HAL_COMP_COMP2_EXTI_GET_FLAG())
N#define __HAL_COMP_EXTI_CLEAR_FLAG(__FLAG__)             (((__FLAG__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_CLEAR_FLAG() : \
N                                                          __HAL_COMP_COMP2_EXTI_CLEAR_FLAG())
X#define __HAL_COMP_EXTI_CLEAR_FLAG(__FLAG__)             (((__FLAG__)  == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_CLEAR_FLAG() :                                                           __HAL_COMP_COMP2_EXTI_CLEAR_FLAG())
N#endif
N
N#define __HAL_COMP_GET_EXTI_LINE  COMP_GET_EXTI_LINE
N
N#if defined(STM32L0) || defined(STM32L4)
X#if 1L || 0L
N/* Note: On these STM32 families, the only argument of this macro             */
N/*       is COMP_FLAG_LOCK.                                                   */
N/*       This macro is replaced by __HAL_COMP_IS_LOCKED with only HAL handle  */
N/*       argument.                                                            */
N#define __HAL_COMP_GET_FLAG(__HANDLE__, __FLAG__)  (__HAL_COMP_IS_LOCKED(__HANDLE__))
N#endif
N/**
N  * @}
N  */
N
N#if defined(STM32L0) || defined(STM32L4)
X#if 1L || 0L
N/** @defgroup HAL_COMP_Aliased_Functions HAL COMP Aliased Functions maintained for legacy purpose
N  * @{
N  */
N#define HAL_COMP_Start_IT       HAL_COMP_Start /* Function considered as legacy as EXTI event or IT configuration is done into HAL_COMP_Init() */
N#define HAL_COMP_Stop_IT        HAL_COMP_Stop  /* Function considered as legacy as EXTI event or IT configuration is done into HAL_COMP_Init() */
N/**
N  * @}
N  */
N#endif
N
N/** @defgroup HAL_DAC_Aliased_Macros HAL DAC Aliased Macros maintained for legacy purpose
N  * @{
N  */
N
N#define IS_DAC_WAVE(WAVE) (((WAVE) == DAC_WAVE_NONE) || \
N                          ((WAVE) == DAC_WAVE_NOISE)|| \
N                          ((WAVE) == DAC_WAVE_TRIANGLE))
X#define IS_DAC_WAVE(WAVE) (((WAVE) == DAC_WAVE_NONE) ||                           ((WAVE) == DAC_WAVE_NOISE)||                           ((WAVE) == DAC_WAVE_TRIANGLE))
N  
N/**
N  * @}
N  */
N
N/** @defgroup HAL_FLASH_Aliased_Macros HAL FLASH Aliased Macros maintained for legacy purpose
N  * @{
N  */
N
N#define IS_WRPAREA          IS_OB_WRPAREA
N#define IS_TYPEPROGRAM      IS_FLASH_TYPEPROGRAM
N#define IS_TYPEPROGRAMFLASH IS_FLASH_TYPEPROGRAM
N#define IS_TYPEERASE        IS_FLASH_TYPEERASE
N#define IS_NBSECTORS        IS_FLASH_NBSECTORS
N#define IS_OB_WDG_SOURCE    IS_OB_IWDG_SOURCE
N
N/**
N  * @}
N  */
N  
N/** @defgroup HAL_I2C_Aliased_Macros HAL I2C Aliased Macros maintained for legacy purpose
N  * @{
N  */
N  
N#define __HAL_I2C_RESET_CR2             I2C_RESET_CR2
N#define __HAL_I2C_GENERATE_START        I2C_GENERATE_START
N#define __HAL_I2C_FREQ_RANGE            I2C_FREQ_RANGE
N#define __HAL_I2C_RISE_TIME             I2C_RISE_TIME
N#define __HAL_I2C_SPEED_STANDARD        I2C_SPEED_STANDARD
N#define __HAL_I2C_SPEED_FAST            I2C_SPEED_FAST
N#define __HAL_I2C_SPEED                 I2C_SPEED
N#define __HAL_I2C_7BIT_ADD_WRITE        I2C_7BIT_ADD_WRITE
N#define __HAL_I2C_7BIT_ADD_READ         I2C_7BIT_ADD_READ
N#define __HAL_I2C_10BIT_ADDRESS         I2C_10BIT_ADDRESS
N#define __HAL_I2C_10BIT_HEADER_WRITE    I2C_10BIT_HEADER_WRITE
N#define __HAL_I2C_10BIT_HEADER_READ     I2C_10BIT_HEADER_READ
N#define __HAL_I2C_MEM_ADD_MSB           I2C_MEM_ADD_MSB
N#define __HAL_I2C_MEM_ADD_LSB           I2C_MEM_ADD_LSB
N#define __HAL_I2C_FREQRANGE             I2C_FREQRANGE
N/**
N  * @}
N  */
N  
N/** @defgroup HAL_I2S_Aliased_Macros HAL I2S Aliased Macros maintained for legacy purpose
N  * @{
N  */
N  
N#define IS_I2S_INSTANCE                 IS_I2S_ALL_INSTANCE
N#define IS_I2S_INSTANCE_EXT             IS_I2S_ALL_INSTANCE_EXT
N
N/**
N  * @}
N  */
N
N/** @defgroup HAL_IRDA_Aliased_Macros HAL IRDA Aliased Macros maintained for legacy purpose
N  * @{
N  */
N  
N#define __IRDA_DISABLE                  __HAL_IRDA_DISABLE
N#define __IRDA_ENABLE                   __HAL_IRDA_ENABLE
N
N#define __HAL_IRDA_GETCLOCKSOURCE       IRDA_GETCLOCKSOURCE
N#define __HAL_IRDA_MASK_COMPUTATION     IRDA_MASK_COMPUTATION
N#define __IRDA_GETCLOCKSOURCE           IRDA_GETCLOCKSOURCE
N#define __IRDA_MASK_COMPUTATION         IRDA_MASK_COMPUTATION
N
N#define IS_IRDA_ONEBIT_SAMPLE           IS_IRDA_ONE_BIT_SAMPLE                  
N
N
N/**
N  * @}
N  */
N
N
N/** @defgroup HAL_IWDG_Aliased_Macros HAL IWDG Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#define __HAL_IWDG_ENABLE_WRITE_ACCESS  IWDG_ENABLE_WRITE_ACCESS
N#define __HAL_IWDG_DISABLE_WRITE_ACCESS IWDG_DISABLE_WRITE_ACCESS
N/**
N  * @}
N  */
N
N
N/** @defgroup HAL_LPTIM_Aliased_Macros HAL LPTIM Aliased Macros maintained for legacy purpose
N  * @{
N  */
N
N#define __HAL_LPTIM_ENABLE_INTERRUPT    __HAL_LPTIM_ENABLE_IT
N#define __HAL_LPTIM_DISABLE_INTERRUPT   __HAL_LPTIM_DISABLE_IT
N#define __HAL_LPTIM_GET_ITSTATUS        __HAL_LPTIM_GET_IT_SOURCE
N
N/**
N  * @}
N  */
N  
N  
N/** @defgroup HAL_OPAMP_Aliased_Macros HAL OPAMP Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#define __OPAMP_CSR_OPAXPD                OPAMP_CSR_OPAXPD
N#define __OPAMP_CSR_S3SELX                OPAMP_CSR_S3SELX
N#define __OPAMP_CSR_S4SELX                OPAMP_CSR_S4SELX
N#define __OPAMP_CSR_S5SELX                OPAMP_CSR_S5SELX
N#define __OPAMP_CSR_S6SELX                OPAMP_CSR_S6SELX
N#define __OPAMP_CSR_OPAXCAL_L             OPAMP_CSR_OPAXCAL_L
N#define __OPAMP_CSR_OPAXCAL_H             OPAMP_CSR_OPAXCAL_H
N#define __OPAMP_CSR_OPAXLPM               OPAMP_CSR_OPAXLPM
N#define __OPAMP_CSR_ALL_SWITCHES          OPAMP_CSR_ALL_SWITCHES
N#define __OPAMP_CSR_ANAWSELX              OPAMP_CSR_ANAWSELX
N#define __OPAMP_CSR_OPAXCALOUT            OPAMP_CSR_OPAXCALOUT
N#define __OPAMP_OFFSET_TRIM_BITSPOSITION  OPAMP_OFFSET_TRIM_BITSPOSITION
N#define __OPAMP_OFFSET_TRIM_SET           OPAMP_OFFSET_TRIM_SET
N
N/**
N  * @}
N  */
N
N
N/** @defgroup HAL_PWR_Aliased_Macros HAL PWR Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#define __HAL_PVD_EVENT_DISABLE                                  __HAL_PWR_PVD_EXTI_DISABLE_EVENT
N#define __HAL_PVD_EVENT_ENABLE                                   __HAL_PWR_PVD_EXTI_ENABLE_EVENT
N#define __HAL_PVD_EXTI_FALLINGTRIGGER_DISABLE                    __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
N#define __HAL_PVD_EXTI_FALLINGTRIGGER_ENABLE                     __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
N#define __HAL_PVD_EXTI_RISINGTRIGGER_DISABLE                     __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
N#define __HAL_PVD_EXTI_RISINGTRIGGER_ENABLE                      __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
N#define __HAL_PVM_EVENT_DISABLE                                  __HAL_PWR_PVM_EVENT_DISABLE
N#define __HAL_PVM_EVENT_ENABLE                                   __HAL_PWR_PVM_EVENT_ENABLE
N#define __HAL_PVM_EXTI_FALLINGTRIGGER_DISABLE                    __HAL_PWR_PVM_EXTI_FALLINGTRIGGER_DISABLE
N#define __HAL_PVM_EXTI_FALLINGTRIGGER_ENABLE                     __HAL_PWR_PVM_EXTI_FALLINGTRIGGER_ENABLE
N#define __HAL_PVM_EXTI_RISINGTRIGGER_DISABLE                     __HAL_PWR_PVM_EXTI_RISINGTRIGGER_DISABLE
N#define __HAL_PVM_EXTI_RISINGTRIGGER_ENABLE                      __HAL_PWR_PVM_EXTI_RISINGTRIGGER_ENABLE
N#define __HAL_PWR_INTERNALWAKEUP_DISABLE                         HAL_PWREx_DisableInternalWakeUpLine
N#define __HAL_PWR_INTERNALWAKEUP_ENABLE                          HAL_PWREx_EnableInternalWakeUpLine
N#define __HAL_PWR_PULL_UP_DOWN_CONFIG_DISABLE                    HAL_PWREx_DisablePullUpPullDownConfig
N#define __HAL_PWR_PULL_UP_DOWN_CONFIG_ENABLE                     HAL_PWREx_EnablePullUpPullDownConfig
N#define __HAL_PWR_PVD_EXTI_CLEAR_EGDE_TRIGGER()                  do { __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); } while(0)
N#define __HAL_PWR_PVD_EXTI_EVENT_DISABLE                         __HAL_PWR_PVD_EXTI_DISABLE_EVENT
N#define __HAL_PWR_PVD_EXTI_EVENT_ENABLE                          __HAL_PWR_PVD_EXTI_ENABLE_EVENT
N#define __HAL_PWR_PVD_EXTI_FALLINGTRIGGER_DISABLE                __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
N#define __HAL_PWR_PVD_EXTI_FALLINGTRIGGER_ENABLE                 __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
N#define __HAL_PWR_PVD_EXTI_RISINGTRIGGER_DISABLE                 __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
N#define __HAL_PWR_PVD_EXTI_RISINGTRIGGER_ENABLE                  __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
N#define __HAL_PWR_PVD_EXTI_SET_FALLING_EGDE_TRIGGER              __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
N#define __HAL_PWR_PVD_EXTI_SET_RISING_EDGE_TRIGGER               __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
N#define __HAL_PWR_PVM_DISABLE()                                  do { HAL_PWREx_DisablePVM1();HAL_PWREx_DisablePVM2();HAL_PWREx_DisablePVM3();HAL_PWREx_DisablePVM4(); } while(0)
N#define __HAL_PWR_PVM_ENABLE()                                   do { HAL_PWREx_EnablePVM1();HAL_PWREx_EnablePVM2();HAL_PWREx_EnablePVM3();HAL_PWREx_EnablePVM4(); } while(0)
N#define __HAL_PWR_SRAM2CONTENT_PRESERVE_DISABLE                  HAL_PWREx_DisableSRAM2ContentRetention
N#define __HAL_PWR_SRAM2CONTENT_PRESERVE_ENABLE                   HAL_PWREx_EnableSRAM2ContentRetention
N#define __HAL_PWR_VDDIO2_DISABLE                                 HAL_PWREx_DisableVddIO2
N#define __HAL_PWR_VDDIO2_ENABLE                                  HAL_PWREx_EnableVddIO2
N#define __HAL_PWR_VDDIO2_EXTI_CLEAR_EGDE_TRIGGER                 __HAL_PWR_VDDIO2_EXTI_DISABLE_FALLING_EDGE
N#define __HAL_PWR_VDDIO2_EXTI_SET_FALLING_EGDE_TRIGGER           __HAL_PWR_VDDIO2_EXTI_ENABLE_FALLING_EDGE
N#define __HAL_PWR_VDDUSB_DISABLE                                 HAL_PWREx_DisableVddUSB
N#define __HAL_PWR_VDDUSB_ENABLE                                  HAL_PWREx_EnableVddUSB
N
N#if defined (STM32F4)
X#if 0L
S#define __HAL_PVD_EXTI_ENABLE_IT(PWR_EXTI_LINE_PVD)         __HAL_PWR_PVD_EXTI_ENABLE_IT()
S#define __HAL_PVD_EXTI_DISABLE_IT(PWR_EXTI_LINE_PVD)        __HAL_PWR_PVD_EXTI_DISABLE_IT()
S#define __HAL_PVD_EXTI_GET_FLAG(PWR_EXTI_LINE_PVD)          __HAL_PWR_PVD_EXTI_GET_FLAG()   
S#define __HAL_PVD_EXTI_CLEAR_FLAG(PWR_EXTI_LINE_PVD)        __HAL_PWR_PVD_EXTI_CLEAR_FLAG()
S#define __HAL_PVD_EXTI_GENERATE_SWIT(PWR_EXTI_LINE_PVD)     __HAL_PWR_PVD_EXTI_GENERATE_SWIT()
N#else
N#define __HAL_PVD_EXTI_CLEAR_FLAG                                __HAL_PWR_PVD_EXTI_CLEAR_FLAG
N#define __HAL_PVD_EXTI_DISABLE_IT                                __HAL_PWR_PVD_EXTI_DISABLE_IT
N#define __HAL_PVD_EXTI_ENABLE_IT                                 __HAL_PWR_PVD_EXTI_ENABLE_IT
N#define __HAL_PVD_EXTI_GENERATE_SWIT                             __HAL_PWR_PVD_EXTI_GENERATE_SWIT
N#define __HAL_PVD_EXTI_GET_FLAG                                  __HAL_PWR_PVD_EXTI_GET_FLAG 
N#endif /* STM32F4 */
N/**   
N  * @}
N  */  
N  
N  
N/** @defgroup HAL_RCC_Aliased HAL RCC Aliased maintained for legacy purpose
N  * @{
N  */
N  
N#define RCC_StopWakeUpClock_MSI     RCC_STOP_WAKEUPCLOCK_MSI
N#define RCC_StopWakeUpClock_HSI     RCC_STOP_WAKEUPCLOCK_HSI
N
N#define HAL_RCC_CCSCallback HAL_RCC_CSSCallback
N#define HAL_RC48_EnableBuffer_Cmd(cmd) (((cmd)==ENABLE) ? HAL_RCCEx_EnableHSI48_VREFINT() : HAL_RCCEx_DisableHSI48_VREFINT())
N
N#define __ADC_CLK_DISABLE          __HAL_RCC_ADC_CLK_DISABLE
N#define __ADC_CLK_ENABLE           __HAL_RCC_ADC_CLK_ENABLE
N#define __ADC_CLK_SLEEP_DISABLE    __HAL_RCC_ADC_CLK_SLEEP_DISABLE
N#define __ADC_CLK_SLEEP_ENABLE     __HAL_RCC_ADC_CLK_SLEEP_ENABLE
N#define __ADC_FORCE_RESET          __HAL_RCC_ADC_FORCE_RESET
N#define __ADC_RELEASE_RESET        __HAL_RCC_ADC_RELEASE_RESET
N#define __ADC1_CLK_DISABLE         __HAL_RCC_ADC1_CLK_DISABLE
N#define __ADC1_CLK_ENABLE          __HAL_RCC_ADC1_CLK_ENABLE
N#define __ADC1_FORCE_RESET         __HAL_RCC_ADC1_FORCE_RESET
N#define __ADC1_RELEASE_RESET       __HAL_RCC_ADC1_RELEASE_RESET
N#define __ADC1_CLK_SLEEP_ENABLE    __HAL_RCC_ADC1_CLK_SLEEP_ENABLE  
N#define __ADC1_CLK_SLEEP_DISABLE   __HAL_RCC_ADC1_CLK_SLEEP_DISABLE  
N#define __ADC2_CLK_DISABLE         __HAL_RCC_ADC2_CLK_DISABLE
N#define __ADC2_CLK_ENABLE          __HAL_RCC_ADC2_CLK_ENABLE
N#define __ADC2_FORCE_RESET __HAL_RCC_ADC2_FORCE_RESET
N#define __ADC2_RELEASE_RESET __HAL_RCC_ADC2_RELEASE_RESET
N#define __ADC3_CLK_DISABLE __HAL_RCC_ADC3_CLK_DISABLE
N#define __ADC3_CLK_ENABLE __HAL_RCC_ADC3_CLK_ENABLE
N#define __ADC3_FORCE_RESET __HAL_RCC_ADC3_FORCE_RESET
N#define __ADC3_RELEASE_RESET __HAL_RCC_ADC3_RELEASE_RESET
N#define __AES_CLK_DISABLE __HAL_RCC_AES_CLK_DISABLE
N#define __AES_CLK_ENABLE __HAL_RCC_AES_CLK_ENABLE
N#define __AES_CLK_SLEEP_DISABLE __HAL_RCC_AES_CLK_SLEEP_DISABLE
N#define __AES_CLK_SLEEP_ENABLE __HAL_RCC_AES_CLK_SLEEP_ENABLE
N#define __AES_FORCE_RESET __HAL_RCC_AES_FORCE_RESET
N#define __AES_RELEASE_RESET __HAL_RCC_AES_RELEASE_RESET
N#define __CRYP_CLK_SLEEP_ENABLE      __HAL_RCC_CRYP_CLK_SLEEP_ENABLE
N#define __CRYP_CLK_SLEEP_DISABLE  __HAL_RCC_CRYP_CLK_SLEEP_DISABLE
N#define __CRYP_CLK_ENABLE  __HAL_RCC_CRYP_CLK_ENABLE
N#define __CRYP_CLK_DISABLE  __HAL_RCC_CRYP_CLK_DISABLE
N#define __CRYP_FORCE_RESET       __HAL_RCC_CRYP_FORCE_RESET
N#define __CRYP_RELEASE_RESET  __HAL_RCC_CRYP_RELEASE_RESET
N#define __AFIO_CLK_DISABLE __HAL_RCC_AFIO_CLK_DISABLE
N#define __AFIO_CLK_ENABLE __HAL_RCC_AFIO_CLK_ENABLE
N#define __AFIO_FORCE_RESET __HAL_RCC_AFIO_FORCE_RESET
N#define __AFIO_RELEASE_RESET __HAL_RCC_AFIO_RELEASE_RESET
N#define __AHB_FORCE_RESET __HAL_RCC_AHB_FORCE_RESET
N#define __AHB_RELEASE_RESET __HAL_RCC_AHB_RELEASE_RESET
N#define __AHB1_FORCE_RESET __HAL_RCC_AHB1_FORCE_RESET
N#define __AHB1_RELEASE_RESET __HAL_RCC_AHB1_RELEASE_RESET
N#define __AHB2_FORCE_RESET __HAL_RCC_AHB2_FORCE_RESET
N#define __AHB2_RELEASE_RESET __HAL_RCC_AHB2_RELEASE_RESET
N#define __AHB3_FORCE_RESET __HAL_RCC_AHB3_FORCE_RESET
N#define __AHB3_RELEASE_RESET __HAL_RCC_AHB3_RELEASE_RESET
N#define __APB1_FORCE_RESET __HAL_RCC_APB1_FORCE_RESET
N#define __APB1_RELEASE_RESET __HAL_RCC_APB1_RELEASE_RESET
N#define __APB2_FORCE_RESET __HAL_RCC_APB2_FORCE_RESET
N#define __APB2_RELEASE_RESET __HAL_RCC_APB2_RELEASE_RESET
N#define __BKP_CLK_DISABLE __HAL_RCC_BKP_CLK_DISABLE
N#define __BKP_CLK_ENABLE __HAL_RCC_BKP_CLK_ENABLE
N#define __BKP_FORCE_RESET __HAL_RCC_BKP_FORCE_RESET
N#define __BKP_RELEASE_RESET __HAL_RCC_BKP_RELEASE_RESET
N#define __CAN1_CLK_DISABLE __HAL_RCC_CAN1_CLK_DISABLE
N#define __CAN1_CLK_ENABLE __HAL_RCC_CAN1_CLK_ENABLE
N#define __CAN1_CLK_SLEEP_DISABLE __HAL_RCC_CAN1_CLK_SLEEP_DISABLE
N#define __CAN1_CLK_SLEEP_ENABLE __HAL_RCC_CAN1_CLK_SLEEP_ENABLE
N#define __CAN1_FORCE_RESET __HAL_RCC_CAN1_FORCE_RESET
N#define __CAN1_RELEASE_RESET __HAL_RCC_CAN1_RELEASE_RESET
N#define __CAN_CLK_DISABLE         __HAL_RCC_CAN1_CLK_DISABLE
N#define __CAN_CLK_ENABLE          __HAL_RCC_CAN1_CLK_ENABLE
N#define __CAN_FORCE_RESET         __HAL_RCC_CAN1_FORCE_RESET
N#define __CAN_RELEASE_RESET       __HAL_RCC_CAN1_RELEASE_RESET
N#define __CAN2_CLK_DISABLE __HAL_RCC_CAN2_CLK_DISABLE
N#define __CAN2_CLK_ENABLE __HAL_RCC_CAN2_CLK_ENABLE
N#define __CAN2_FORCE_RESET __HAL_RCC_CAN2_FORCE_RESET
N#define __CAN2_RELEASE_RESET __HAL_RCC_CAN2_RELEASE_RESET
N#define __CEC_CLK_DISABLE __HAL_RCC_CEC_CLK_DISABLE
N#define __CEC_CLK_ENABLE __HAL_RCC_CEC_CLK_ENABLE
N#define __COMP_CLK_DISABLE        __HAL_RCC_COMP_CLK_DISABLE
N#define __COMP_CLK_ENABLE         __HAL_RCC_COMP_CLK_ENABLE
N#define __COMP_FORCE_RESET        __HAL_RCC_COMP_FORCE_RESET
N#define __COMP_RELEASE_RESET      __HAL_RCC_COMP_RELEASE_RESET
N#define __COMP_CLK_SLEEP_ENABLE   __HAL_RCC_COMP_CLK_SLEEP_ENABLE
N#define __COMP_CLK_SLEEP_DISABLE  __HAL_RCC_COMP_CLK_SLEEP_DISABLE
N#define __CEC_FORCE_RESET __HAL_RCC_CEC_FORCE_RESET
N#define __CEC_RELEASE_RESET __HAL_RCC_CEC_RELEASE_RESET
N#define __CRC_CLK_DISABLE __HAL_RCC_CRC_CLK_DISABLE
N#define __CRC_CLK_ENABLE __HAL_RCC_CRC_CLK_ENABLE
N#define __CRC_CLK_SLEEP_DISABLE __HAL_RCC_CRC_CLK_SLEEP_DISABLE
N#define __CRC_CLK_SLEEP_ENABLE __HAL_RCC_CRC_CLK_SLEEP_ENABLE
N#define __CRC_FORCE_RESET __HAL_RCC_CRC_FORCE_RESET
N#define __CRC_RELEASE_RESET __HAL_RCC_CRC_RELEASE_RESET
N#define __DAC_CLK_DISABLE __HAL_RCC_DAC_CLK_DISABLE
N#define __DAC_CLK_ENABLE __HAL_RCC_DAC_CLK_ENABLE
N#define __DAC_FORCE_RESET __HAL_RCC_DAC_FORCE_RESET
N#define __DAC_RELEASE_RESET __HAL_RCC_DAC_RELEASE_RESET
N#define __DAC1_CLK_DISABLE __HAL_RCC_DAC1_CLK_DISABLE
N#define __DAC1_CLK_ENABLE __HAL_RCC_DAC1_CLK_ENABLE
N#define __DAC1_CLK_SLEEP_DISABLE __HAL_RCC_DAC1_CLK_SLEEP_DISABLE
N#define __DAC1_CLK_SLEEP_ENABLE __HAL_RCC_DAC1_CLK_SLEEP_ENABLE
N#define __DAC1_FORCE_RESET __HAL_RCC_DAC1_FORCE_RESET
N#define __DAC1_RELEASE_RESET __HAL_RCC_DAC1_RELEASE_RESET
N#define __DBGMCU_CLK_ENABLE     __HAL_RCC_DBGMCU_CLK_ENABLE
N#define __DBGMCU_CLK_DISABLE     __HAL_RCC_DBGMCU_CLK_DISABLE
N#define __DBGMCU_FORCE_RESET    __HAL_RCC_DBGMCU_FORCE_RESET
N#define __DBGMCU_RELEASE_RESET  __HAL_RCC_DBGMCU_RELEASE_RESET
N#define __DFSDM_CLK_DISABLE __HAL_RCC_DFSDM_CLK_DISABLE
N#define __DFSDM_CLK_ENABLE __HAL_RCC_DFSDM_CLK_ENABLE
N#define __DFSDM_CLK_SLEEP_DISABLE __HAL_RCC_DFSDM_CLK_SLEEP_DISABLE
N#define __DFSDM_CLK_SLEEP_ENABLE __HAL_RCC_DFSDM_CLK_SLEEP_ENABLE
N#define __DFSDM_FORCE_RESET __HAL_RCC_DFSDM_FORCE_RESET
N#define __DFSDM_RELEASE_RESET __HAL_RCC_DFSDM_RELEASE_RESET
N#define __DMA1_CLK_DISABLE __HAL_RCC_DMA1_CLK_DISABLE
N#define __DMA1_CLK_ENABLE __HAL_RCC_DMA1_CLK_ENABLE
N#define __DMA1_CLK_SLEEP_DISABLE __HAL_RCC_DMA1_CLK_SLEEP_DISABLE
N#define __DMA1_CLK_SLEEP_ENABLE __HAL_RCC_DMA1_CLK_SLEEP_ENABLE
N#define __DMA1_FORCE_RESET __HAL_RCC_DMA1_FORCE_RESET
N#define __DMA1_RELEASE_RESET __HAL_RCC_DMA1_RELEASE_RESET
N#define __DMA2_CLK_DISABLE __HAL_RCC_DMA2_CLK_DISABLE
N#define __DMA2_CLK_ENABLE __HAL_RCC_DMA2_CLK_ENABLE
N#define __DMA2_CLK_SLEEP_DISABLE __HAL_RCC_DMA2_CLK_SLEEP_DISABLE
N#define __DMA2_CLK_SLEEP_ENABLE __HAL_RCC_DMA2_CLK_SLEEP_ENABLE
N#define __DMA2_FORCE_RESET __HAL_RCC_DMA2_FORCE_RESET
N#define __DMA2_RELEASE_RESET __HAL_RCC_DMA2_RELEASE_RESET
N#define __ETHMAC_CLK_DISABLE __HAL_RCC_ETHMAC_CLK_DISABLE
N#define __ETHMAC_CLK_ENABLE __HAL_RCC_ETHMAC_CLK_ENABLE
N#define __ETHMAC_FORCE_RESET __HAL_RCC_ETHMAC_FORCE_RESET
N#define __ETHMAC_RELEASE_RESET __HAL_RCC_ETHMAC_RELEASE_RESET
N#define __ETHMACRX_CLK_DISABLE __HAL_RCC_ETHMACRX_CLK_DISABLE
N#define __ETHMACRX_CLK_ENABLE __HAL_RCC_ETHMACRX_CLK_ENABLE
N#define __ETHMACTX_CLK_DISABLE __HAL_RCC_ETHMACTX_CLK_DISABLE
N#define __ETHMACTX_CLK_ENABLE __HAL_RCC_ETHMACTX_CLK_ENABLE
N#define __FIREWALL_CLK_DISABLE __HAL_RCC_FIREWALL_CLK_DISABLE
N#define __FIREWALL_CLK_ENABLE __HAL_RCC_FIREWALL_CLK_ENABLE
N#define __FLASH_CLK_DISABLE __HAL_RCC_FLASH_CLK_DISABLE
N#define __FLASH_CLK_ENABLE __HAL_RCC_FLASH_CLK_ENABLE
N#define __FLASH_CLK_SLEEP_DISABLE __HAL_RCC_FLASH_CLK_SLEEP_DISABLE
N#define __FLASH_CLK_SLEEP_ENABLE __HAL_RCC_FLASH_CLK_SLEEP_ENABLE
N#define __FLASH_FORCE_RESET __HAL_RCC_FLASH_FORCE_RESET
N#define __FLASH_RELEASE_RESET __HAL_RCC_FLASH_RELEASE_RESET
N#define __FLITF_CLK_DISABLE       __HAL_RCC_FLITF_CLK_DISABLE
N#define __FLITF_CLK_ENABLE        __HAL_RCC_FLITF_CLK_ENABLE
N#define __FLITF_FORCE_RESET       __HAL_RCC_FLITF_FORCE_RESET
N#define __FLITF_RELEASE_RESET     __HAL_RCC_FLITF_RELEASE_RESET
N#define __FLITF_CLK_SLEEP_ENABLE  __HAL_RCC_FLITF_CLK_SLEEP_ENABLE
N#define __FLITF_CLK_SLEEP_DISABLE __HAL_RCC_FLITF_CLK_SLEEP_DISABLE
N#define __FMC_CLK_DISABLE __HAL_RCC_FMC_CLK_DISABLE
N#define __FMC_CLK_ENABLE __HAL_RCC_FMC_CLK_ENABLE
N#define __FMC_CLK_SLEEP_DISABLE __HAL_RCC_FMC_CLK_SLEEP_DISABLE
N#define __FMC_CLK_SLEEP_ENABLE __HAL_RCC_FMC_CLK_SLEEP_ENABLE
N#define __FMC_FORCE_RESET __HAL_RCC_FMC_FORCE_RESET
N#define __FMC_RELEASE_RESET __HAL_RCC_FMC_RELEASE_RESET
N#define __FSMC_CLK_DISABLE __HAL_RCC_FSMC_CLK_DISABLE
N#define __FSMC_CLK_ENABLE __HAL_RCC_FSMC_CLK_ENABLE
N#define __GPIOA_CLK_DISABLE __HAL_RCC_GPIOA_CLK_DISABLE
N#define __GPIOA_CLK_ENABLE __HAL_RCC_GPIOA_CLK_ENABLE
N#define __GPIOA_CLK_SLEEP_DISABLE __HAL_RCC_GPIOA_CLK_SLEEP_DISABLE
N#define __GPIOA_CLK_SLEEP_ENABLE __HAL_RCC_GPIOA_CLK_SLEEP_ENABLE
N#define __GPIOA_FORCE_RESET __HAL_RCC_GPIOA_FORCE_RESET
N#define __GPIOA_RELEASE_RESET __HAL_RCC_GPIOA_RELEASE_RESET
N#define __GPIOB_CLK_DISABLE __HAL_RCC_GPIOB_CLK_DISABLE
N#define __GPIOB_CLK_ENABLE __HAL_RCC_GPIOB_CLK_ENABLE
N#define __GPIOB_CLK_SLEEP_DISABLE __HAL_RCC_GPIOB_CLK_SLEEP_DISABLE
N#define __GPIOB_CLK_SLEEP_ENABLE __HAL_RCC_GPIOB_CLK_SLEEP_ENABLE
N#define __GPIOB_FORCE_RESET __HAL_RCC_GPIOB_FORCE_RESET
N#define __GPIOB_RELEASE_RESET __HAL_RCC_GPIOB_RELEASE_RESET
N#define __GPIOC_CLK_DISABLE __HAL_RCC_GPIOC_CLK_DISABLE
N#define __GPIOC_CLK_ENABLE __HAL_RCC_GPIOC_CLK_ENABLE
N#define __GPIOC_CLK_SLEEP_DISABLE __HAL_RCC_GPIOC_CLK_SLEEP_DISABLE
N#define __GPIOC_CLK_SLEEP_ENABLE __HAL_RCC_GPIOC_CLK_SLEEP_ENABLE
N#define __GPIOC_FORCE_RESET __HAL_RCC_GPIOC_FORCE_RESET
N#define __GPIOC_RELEASE_RESET __HAL_RCC_GPIOC_RELEASE_RESET
N#define __GPIOD_CLK_DISABLE __HAL_RCC_GPIOD_CLK_DISABLE
N#define __GPIOD_CLK_ENABLE __HAL_RCC_GPIOD_CLK_ENABLE
N#define __GPIOD_CLK_SLEEP_DISABLE __HAL_RCC_GPIOD_CLK_SLEEP_DISABLE
N#define __GPIOD_CLK_SLEEP_ENABLE __HAL_RCC_GPIOD_CLK_SLEEP_ENABLE
N#define __GPIOD_FORCE_RESET __HAL_RCC_GPIOD_FORCE_RESET
N#define __GPIOD_RELEASE_RESET __HAL_RCC_GPIOD_RELEASE_RESET
N#define __GPIOE_CLK_DISABLE __HAL_RCC_GPIOE_CLK_DISABLE
N#define __GPIOE_CLK_ENABLE __HAL_RCC_GPIOE_CLK_ENABLE
N#define __GPIOE_CLK_SLEEP_DISABLE __HAL_RCC_GPIOE_CLK_SLEEP_DISABLE
N#define __GPIOE_CLK_SLEEP_ENABLE __HAL_RCC_GPIOE_CLK_SLEEP_ENABLE
N#define __GPIOE_FORCE_RESET __HAL_RCC_GPIOE_FORCE_RESET
N#define __GPIOE_RELEASE_RESET __HAL_RCC_GPIOE_RELEASE_RESET
N#define __GPIOF_CLK_DISABLE __HAL_RCC_GPIOF_CLK_DISABLE
N#define __GPIOF_CLK_ENABLE __HAL_RCC_GPIOF_CLK_ENABLE
N#define __GPIOF_CLK_SLEEP_DISABLE __HAL_RCC_GPIOF_CLK_SLEEP_DISABLE
N#define __GPIOF_CLK_SLEEP_ENABLE __HAL_RCC_GPIOF_CLK_SLEEP_ENABLE
N#define __GPIOF_FORCE_RESET __HAL_RCC_GPIOF_FORCE_RESET
N#define __GPIOF_RELEASE_RESET __HAL_RCC_GPIOF_RELEASE_RESET
N#define __GPIOG_CLK_DISABLE __HAL_RCC_GPIOG_CLK_DISABLE
N#define __GPIOG_CLK_ENABLE __HAL_RCC_GPIOG_CLK_ENABLE
N#define __GPIOG_CLK_SLEEP_DISABLE __HAL_RCC_GPIOG_CLK_SLEEP_DISABLE
N#define __GPIOG_CLK_SLEEP_ENABLE __HAL_RCC_GPIOG_CLK_SLEEP_ENABLE
N#define __GPIOG_FORCE_RESET __HAL_RCC_GPIOG_FORCE_RESET
N#define __GPIOG_RELEASE_RESET __HAL_RCC_GPIOG_RELEASE_RESET
N#define __GPIOH_CLK_DISABLE __HAL_RCC_GPIOH_CLK_DISABLE
N#define __GPIOH_CLK_ENABLE __HAL_RCC_GPIOH_CLK_ENABLE
N#define __GPIOH_CLK_SLEEP_DISABLE __HAL_RCC_GPIOH_CLK_SLEEP_DISABLE
N#define __GPIOH_CLK_SLEEP_ENABLE __HAL_RCC_GPIOH_CLK_SLEEP_ENABLE
N#define __GPIOH_FORCE_RESET __HAL_RCC_GPIOH_FORCE_RESET
N#define __GPIOH_RELEASE_RESET __HAL_RCC_GPIOH_RELEASE_RESET
N#define __I2C1_CLK_DISABLE __HAL_RCC_I2C1_CLK_DISABLE
N#define __I2C1_CLK_ENABLE __HAL_RCC_I2C1_CLK_ENABLE
N#define __I2C1_CLK_SLEEP_DISABLE __HAL_RCC_I2C1_CLK_SLEEP_DISABLE
N#define __I2C1_CLK_SLEEP_ENABLE __HAL_RCC_I2C1_CLK_SLEEP_ENABLE
N#define __I2C1_FORCE_RESET __HAL_RCC_I2C1_FORCE_RESET
N#define __I2C1_RELEASE_RESET __HAL_RCC_I2C1_RELEASE_RESET
N#define __I2C2_CLK_DISABLE __HAL_RCC_I2C2_CLK_DISABLE
N#define __I2C2_CLK_ENABLE __HAL_RCC_I2C2_CLK_ENABLE
N#define __I2C2_CLK_SLEEP_DISABLE __HAL_RCC_I2C2_CLK_SLEEP_DISABLE
N#define __I2C2_CLK_SLEEP_ENABLE __HAL_RCC_I2C2_CLK_SLEEP_ENABLE
N#define __I2C2_FORCE_RESET __HAL_RCC_I2C2_FORCE_RESET
N#define __I2C2_RELEASE_RESET __HAL_RCC_I2C2_RELEASE_RESET
N#define __I2C3_CLK_DISABLE __HAL_RCC_I2C3_CLK_DISABLE
N#define __I2C3_CLK_ENABLE __HAL_RCC_I2C3_CLK_ENABLE
N#define __I2C3_CLK_SLEEP_DISABLE __HAL_RCC_I2C3_CLK_SLEEP_DISABLE
N#define __I2C3_CLK_SLEEP_ENABLE __HAL_RCC_I2C3_CLK_SLEEP_ENABLE
N#define __I2C3_FORCE_RESET __HAL_RCC_I2C3_FORCE_RESET
N#define __I2C3_RELEASE_RESET __HAL_RCC_I2C3_RELEASE_RESET
N#define __LCD_CLK_DISABLE __HAL_RCC_LCD_CLK_DISABLE
N#define __LCD_CLK_ENABLE __HAL_RCC_LCD_CLK_ENABLE
N#define __LCD_CLK_SLEEP_DISABLE __HAL_RCC_LCD_CLK_SLEEP_DISABLE
N#define __LCD_CLK_SLEEP_ENABLE __HAL_RCC_LCD_CLK_SLEEP_ENABLE
N#define __LCD_FORCE_RESET __HAL_RCC_LCD_FORCE_RESET
N#define __LCD_RELEASE_RESET __HAL_RCC_LCD_RELEASE_RESET
N#define __LPTIM1_CLK_DISABLE __HAL_RCC_LPTIM1_CLK_DISABLE
N#define __LPTIM1_CLK_ENABLE __HAL_RCC_LPTIM1_CLK_ENABLE
N#define __LPTIM1_CLK_SLEEP_DISABLE __HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE
N#define __LPTIM1_CLK_SLEEP_ENABLE __HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE
N#define __LPTIM1_FORCE_RESET __HAL_RCC_LPTIM1_FORCE_RESET
N#define __LPTIM1_RELEASE_RESET __HAL_RCC_LPTIM1_RELEASE_RESET
N#define __LPTIM2_CLK_DISABLE __HAL_RCC_LPTIM2_CLK_DISABLE
N#define __LPTIM2_CLK_ENABLE __HAL_RCC_LPTIM2_CLK_ENABLE
N#define __LPTIM2_CLK_SLEEP_DISABLE __HAL_RCC_LPTIM2_CLK_SLEEP_DISABLE
N#define __LPTIM2_CLK_SLEEP_ENABLE __HAL_RCC_LPTIM2_CLK_SLEEP_ENABLE
N#define __LPTIM2_FORCE_RESET __HAL_RCC_LPTIM2_FORCE_RESET
N#define __LPTIM2_RELEASE_RESET __HAL_RCC_LPTIM2_RELEASE_RESET
N#define __LPUART1_CLK_DISABLE __HAL_RCC_LPUART1_CLK_DISABLE
N#define __LPUART1_CLK_ENABLE __HAL_RCC_LPUART1_CLK_ENABLE
N#define __LPUART1_CLK_SLEEP_DISABLE __HAL_RCC_LPUART1_CLK_SLEEP_DISABLE
N#define __LPUART1_CLK_SLEEP_ENABLE __HAL_RCC_LPUART1_CLK_SLEEP_ENABLE
N#define __LPUART1_FORCE_RESET __HAL_RCC_LPUART1_FORCE_RESET
N#define __LPUART1_RELEASE_RESET __HAL_RCC_LPUART1_RELEASE_RESET
N#define __OPAMP_CLK_DISABLE __HAL_RCC_OPAMP_CLK_DISABLE
N#define __OPAMP_CLK_ENABLE __HAL_RCC_OPAMP_CLK_ENABLE
N#define __OPAMP_CLK_SLEEP_DISABLE __HAL_RCC_OPAMP_CLK_SLEEP_DISABLE
N#define __OPAMP_CLK_SLEEP_ENABLE __HAL_RCC_OPAMP_CLK_SLEEP_ENABLE
N#define __OPAMP_FORCE_RESET __HAL_RCC_OPAMP_FORCE_RESET
N#define __OPAMP_RELEASE_RESET __HAL_RCC_OPAMP_RELEASE_RESET
N#define __OTGFS_CLK_DISABLE __HAL_RCC_OTGFS_CLK_DISABLE
N#define __OTGFS_CLK_ENABLE __HAL_RCC_OTGFS_CLK_ENABLE
N#define __OTGFS_CLK_SLEEP_DISABLE __HAL_RCC_OTGFS_CLK_SLEEP_DISABLE
N#define __OTGFS_CLK_SLEEP_ENABLE __HAL_RCC_OTGFS_CLK_SLEEP_ENABLE
N#define __OTGFS_FORCE_RESET __HAL_RCC_OTGFS_FORCE_RESET
N#define __OTGFS_RELEASE_RESET __HAL_RCC_OTGFS_RELEASE_RESET
N#define __PWR_CLK_DISABLE __HAL_RCC_PWR_CLK_DISABLE
N#define __PWR_CLK_ENABLE __HAL_RCC_PWR_CLK_ENABLE
N#define __PWR_CLK_SLEEP_DISABLE __HAL_RCC_PWR_CLK_SLEEP_DISABLE
N#define __PWR_CLK_SLEEP_ENABLE __HAL_RCC_PWR_CLK_SLEEP_ENABLE
N#define __PWR_FORCE_RESET __HAL_RCC_PWR_FORCE_RESET
N#define __PWR_RELEASE_RESET __HAL_RCC_PWR_RELEASE_RESET
N#define __QSPI_CLK_DISABLE __HAL_RCC_QSPI_CLK_DISABLE
N#define __QSPI_CLK_ENABLE __HAL_RCC_QSPI_CLK_ENABLE
N#define __QSPI_CLK_SLEEP_DISABLE __HAL_RCC_QSPI_CLK_SLEEP_DISABLE
N#define __QSPI_CLK_SLEEP_ENABLE __HAL_RCC_QSPI_CLK_SLEEP_ENABLE
N#define __QSPI_FORCE_RESET __HAL_RCC_QSPI_FORCE_RESET
N#define __QSPI_RELEASE_RESET __HAL_RCC_QSPI_RELEASE_RESET
N#define __RNG_CLK_DISABLE __HAL_RCC_RNG_CLK_DISABLE
N#define __RNG_CLK_ENABLE __HAL_RCC_RNG_CLK_ENABLE
N#define __RNG_CLK_SLEEP_DISABLE __HAL_RCC_RNG_CLK_SLEEP_DISABLE
N#define __RNG_CLK_SLEEP_ENABLE __HAL_RCC_RNG_CLK_SLEEP_ENABLE
N#define __RNG_FORCE_RESET __HAL_RCC_RNG_FORCE_RESET
N#define __RNG_RELEASE_RESET __HAL_RCC_RNG_RELEASE_RESET
N#define __SAI1_CLK_DISABLE __HAL_RCC_SAI1_CLK_DISABLE
N#define __SAI1_CLK_ENABLE __HAL_RCC_SAI1_CLK_ENABLE
N#define __SAI1_CLK_SLEEP_DISABLE __HAL_RCC_SAI1_CLK_SLEEP_DISABLE
N#define __SAI1_CLK_SLEEP_ENABLE __HAL_RCC_SAI1_CLK_SLEEP_ENABLE
N#define __SAI1_FORCE_RESET __HAL_RCC_SAI1_FORCE_RESET
N#define __SAI1_RELEASE_RESET __HAL_RCC_SAI1_RELEASE_RESET
N#define __SAI2_CLK_DISABLE __HAL_RCC_SAI2_CLK_DISABLE
N#define __SAI2_CLK_ENABLE __HAL_RCC_SAI2_CLK_ENABLE
N#define __SAI2_CLK_SLEEP_DISABLE __HAL_RCC_SAI2_CLK_SLEEP_DISABLE
N#define __SAI2_CLK_SLEEP_ENABLE __HAL_RCC_SAI2_CLK_SLEEP_ENABLE
N#define __SAI2_FORCE_RESET __HAL_RCC_SAI2_FORCE_RESET
N#define __SAI2_RELEASE_RESET __HAL_RCC_SAI2_RELEASE_RESET
N#define __SDIO_CLK_DISABLE __HAL_RCC_SDIO_CLK_DISABLE
N#define __SDIO_CLK_ENABLE __HAL_RCC_SDIO_CLK_ENABLE
N#define __SDMMC_CLK_DISABLE __HAL_RCC_SDMMC_CLK_DISABLE
N#define __SDMMC_CLK_ENABLE __HAL_RCC_SDMMC_CLK_ENABLE
N#define __SDMMC_CLK_SLEEP_DISABLE __HAL_RCC_SDMMC_CLK_SLEEP_DISABLE
N#define __SDMMC_CLK_SLEEP_ENABLE __HAL_RCC_SDMMC_CLK_SLEEP_ENABLE
N#define __SDMMC_FORCE_RESET __HAL_RCC_SDMMC_FORCE_RESET
N#define __SDMMC_RELEASE_RESET __HAL_RCC_SDMMC_RELEASE_RESET
N#define __SPI1_CLK_DISABLE __HAL_RCC_SPI1_CLK_DISABLE
N#define __SPI1_CLK_ENABLE __HAL_RCC_SPI1_CLK_ENABLE
N#define __SPI1_CLK_SLEEP_DISABLE __HAL_RCC_SPI1_CLK_SLEEP_DISABLE
N#define __SPI1_CLK_SLEEP_ENABLE __HAL_RCC_SPI1_CLK_SLEEP_ENABLE
N#define __SPI1_FORCE_RESET __HAL_RCC_SPI1_FORCE_RESET
N#define __SPI1_RELEASE_RESET __HAL_RCC_SPI1_RELEASE_RESET
N#define __SPI2_CLK_DISABLE __HAL_RCC_SPI2_CLK_DISABLE
N#define __SPI2_CLK_ENABLE __HAL_RCC_SPI2_CLK_ENABLE
N#define __SPI2_CLK_SLEEP_DISABLE __HAL_RCC_SPI2_CLK_SLEEP_DISABLE
N#define __SPI2_CLK_SLEEP_ENABLE __HAL_RCC_SPI2_CLK_SLEEP_ENABLE
N#define __SPI2_FORCE_RESET __HAL_RCC_SPI2_FORCE_RESET
N#define __SPI2_RELEASE_RESET __HAL_RCC_SPI2_RELEASE_RESET
N#define __SPI3_CLK_DISABLE __HAL_RCC_SPI3_CLK_DISABLE
N#define __SPI3_CLK_ENABLE __HAL_RCC_SPI3_CLK_ENABLE
N#define __SPI3_CLK_SLEEP_DISABLE __HAL_RCC_SPI3_CLK_SLEEP_DISABLE
N#define __SPI3_CLK_SLEEP_ENABLE __HAL_RCC_SPI3_CLK_SLEEP_ENABLE
N#define __SPI3_FORCE_RESET __HAL_RCC_SPI3_FORCE_RESET
N#define __SPI3_RELEASE_RESET __HAL_RCC_SPI3_RELEASE_RESET
N#define __SRAM_CLK_DISABLE __HAL_RCC_SRAM_CLK_DISABLE
N#define __SRAM_CLK_ENABLE __HAL_RCC_SRAM_CLK_ENABLE
N#define __SRAM1_CLK_SLEEP_DISABLE __HAL_RCC_SRAM1_CLK_SLEEP_DISABLE
N#define __SRAM1_CLK_SLEEP_ENABLE __HAL_RCC_SRAM1_CLK_SLEEP_ENABLE
N#define __SRAM2_CLK_SLEEP_DISABLE __HAL_RCC_SRAM2_CLK_SLEEP_DISABLE
N#define __SRAM2_CLK_SLEEP_ENABLE __HAL_RCC_SRAM2_CLK_SLEEP_ENABLE
N#define __SWPMI1_CLK_DISABLE __HAL_RCC_SWPMI1_CLK_DISABLE
N#define __SWPMI1_CLK_ENABLE __HAL_RCC_SWPMI1_CLK_ENABLE
N#define __SWPMI1_CLK_SLEEP_DISABLE __HAL_RCC_SWPMI1_CLK_SLEEP_DISABLE
N#define __SWPMI1_CLK_SLEEP_ENABLE __HAL_RCC_SWPMI1_CLK_SLEEP_ENABLE
N#define __SWPMI1_FORCE_RESET __HAL_RCC_SWPMI1_FORCE_RESET
N#define __SWPMI1_RELEASE_RESET __HAL_RCC_SWPMI1_RELEASE_RESET
N#define __SYSCFG_CLK_DISABLE __HAL_RCC_SYSCFG_CLK_DISABLE
N#define __SYSCFG_CLK_ENABLE __HAL_RCC_SYSCFG_CLK_ENABLE
N#define __SYSCFG_CLK_SLEEP_DISABLE __HAL_RCC_SYSCFG_CLK_SLEEP_DISABLE
N#define __SYSCFG_CLK_SLEEP_ENABLE __HAL_RCC_SYSCFG_CLK_SLEEP_ENABLE
N#define __SYSCFG_FORCE_RESET __HAL_RCC_SYSCFG_FORCE_RESET
N#define __SYSCFG_RELEASE_RESET __HAL_RCC_SYSCFG_RELEASE_RESET
N#define __TIM1_CLK_DISABLE __HAL_RCC_TIM1_CLK_DISABLE
N#define __TIM1_CLK_ENABLE __HAL_RCC_TIM1_CLK_ENABLE
N#define __TIM1_CLK_SLEEP_DISABLE __HAL_RCC_TIM1_CLK_SLEEP_DISABLE
N#define __TIM1_CLK_SLEEP_ENABLE __HAL_RCC_TIM1_CLK_SLEEP_ENABLE
N#define __TIM1_FORCE_RESET __HAL_RCC_TIM1_FORCE_RESET
N#define __TIM1_RELEASE_RESET __HAL_RCC_TIM1_RELEASE_RESET
N#define __TIM10_CLK_DISABLE __HAL_RCC_TIM10_CLK_DISABLE
N#define __TIM10_CLK_ENABLE __HAL_RCC_TIM10_CLK_ENABLE
N#define __TIM10_FORCE_RESET __HAL_RCC_TIM10_FORCE_RESET
N#define __TIM10_RELEASE_RESET __HAL_RCC_TIM10_RELEASE_RESET
N#define __TIM11_CLK_DISABLE __HAL_RCC_TIM11_CLK_DISABLE
N#define __TIM11_CLK_ENABLE __HAL_RCC_TIM11_CLK_ENABLE
N#define __TIM11_FORCE_RESET __HAL_RCC_TIM11_FORCE_RESET
N#define __TIM11_RELEASE_RESET __HAL_RCC_TIM11_RELEASE_RESET
N#define __TIM12_CLK_DISABLE __HAL_RCC_TIM12_CLK_DISABLE
N#define __TIM12_CLK_ENABLE __HAL_RCC_TIM12_CLK_ENABLE
N#define __TIM12_FORCE_RESET __HAL_RCC_TIM12_FORCE_RESET
N#define __TIM12_RELEASE_RESET __HAL_RCC_TIM12_RELEASE_RESET
N#define __TIM13_CLK_DISABLE __HAL_RCC_TIM13_CLK_DISABLE
N#define __TIM13_CLK_ENABLE __HAL_RCC_TIM13_CLK_ENABLE
N#define __TIM13_FORCE_RESET __HAL_RCC_TIM13_FORCE_RESET
N#define __TIM13_RELEASE_RESET __HAL_RCC_TIM13_RELEASE_RESET
N#define __TIM14_CLK_DISABLE __HAL_RCC_TIM14_CLK_DISABLE
N#define __TIM14_CLK_ENABLE __HAL_RCC_TIM14_CLK_ENABLE
N#define __TIM14_FORCE_RESET __HAL_RCC_TIM14_FORCE_RESET
N#define __TIM14_RELEASE_RESET __HAL_RCC_TIM14_RELEASE_RESET
N#define __TIM15_CLK_DISABLE __HAL_RCC_TIM15_CLK_DISABLE
N#define __TIM15_CLK_ENABLE __HAL_RCC_TIM15_CLK_ENABLE
N#define __TIM15_CLK_SLEEP_DISABLE __HAL_RCC_TIM15_CLK_SLEEP_DISABLE
N#define __TIM15_CLK_SLEEP_ENABLE __HAL_RCC_TIM15_CLK_SLEEP_ENABLE
N#define __TIM15_FORCE_RESET __HAL_RCC_TIM15_FORCE_RESET
N#define __TIM15_RELEASE_RESET __HAL_RCC_TIM15_RELEASE_RESET
N#define __TIM16_CLK_DISABLE __HAL_RCC_TIM16_CLK_DISABLE
N#define __TIM16_CLK_ENABLE __HAL_RCC_TIM16_CLK_ENABLE
N#define __TIM16_CLK_SLEEP_DISABLE __HAL_RCC_TIM16_CLK_SLEEP_DISABLE
N#define __TIM16_CLK_SLEEP_ENABLE __HAL_RCC_TIM16_CLK_SLEEP_ENABLE
N#define __TIM16_FORCE_RESET __HAL_RCC_TIM16_FORCE_RESET
N#define __TIM16_RELEASE_RESET __HAL_RCC_TIM16_RELEASE_RESET
N#define __TIM17_CLK_DISABLE __HAL_RCC_TIM17_CLK_DISABLE
N#define __TIM17_CLK_ENABLE __HAL_RCC_TIM17_CLK_ENABLE
N#define __TIM17_CLK_SLEEP_DISABLE __HAL_RCC_TIM17_CLK_SLEEP_DISABLE
N#define __TIM17_CLK_SLEEP_ENABLE __HAL_RCC_TIM17_CLK_SLEEP_ENABLE
N#define __TIM17_FORCE_RESET __HAL_RCC_TIM17_FORCE_RESET
N#define __TIM17_RELEASE_RESET __HAL_RCC_TIM17_RELEASE_RESET
N#define __TIM2_CLK_DISABLE __HAL_RCC_TIM2_CLK_DISABLE
N#define __TIM2_CLK_ENABLE __HAL_RCC_TIM2_CLK_ENABLE
N#define __TIM2_CLK_SLEEP_DISABLE __HAL_RCC_TIM2_CLK_SLEEP_DISABLE
N#define __TIM2_CLK_SLEEP_ENABLE __HAL_RCC_TIM2_CLK_SLEEP_ENABLE
N#define __TIM2_FORCE_RESET __HAL_RCC_TIM2_FORCE_RESET
N#define __TIM2_RELEASE_RESET __HAL_RCC_TIM2_RELEASE_RESET
N#define __TIM3_CLK_DISABLE __HAL_RCC_TIM3_CLK_DISABLE
N#define __TIM3_CLK_ENABLE __HAL_RCC_TIM3_CLK_ENABLE
N#define __TIM3_CLK_SLEEP_DISABLE __HAL_RCC_TIM3_CLK_SLEEP_DISABLE
N#define __TIM3_CLK_SLEEP_ENABLE __HAL_RCC_TIM3_CLK_SLEEP_ENABLE
N#define __TIM3_FORCE_RESET __HAL_RCC_TIM3_FORCE_RESET
N#define __TIM3_RELEASE_RESET __HAL_RCC_TIM3_RELEASE_RESET
N#define __TIM4_CLK_DISABLE __HAL_RCC_TIM4_CLK_DISABLE
N#define __TIM4_CLK_ENABLE __HAL_RCC_TIM4_CLK_ENABLE
N#define __TIM4_CLK_SLEEP_DISABLE __HAL_RCC_TIM4_CLK_SLEEP_DISABLE
N#define __TIM4_CLK_SLEEP_ENABLE __HAL_RCC_TIM4_CLK_SLEEP_ENABLE
N#define __TIM4_FORCE_RESET __HAL_RCC_TIM4_FORCE_RESET
N#define __TIM4_RELEASE_RESET __HAL_RCC_TIM4_RELEASE_RESET
N#define __TIM5_CLK_DISABLE __HAL_RCC_TIM5_CLK_DISABLE
N#define __TIM5_CLK_ENABLE __HAL_RCC_TIM5_CLK_ENABLE
N#define __TIM5_CLK_SLEEP_DISABLE __HAL_RCC_TIM5_CLK_SLEEP_DISABLE
N#define __TIM5_CLK_SLEEP_ENABLE __HAL_RCC_TIM5_CLK_SLEEP_ENABLE
N#define __TIM5_FORCE_RESET __HAL_RCC_TIM5_FORCE_RESET
N#define __TIM5_RELEASE_RESET __HAL_RCC_TIM5_RELEASE_RESET
N#define __TIM6_CLK_DISABLE __HAL_RCC_TIM6_CLK_DISABLE
N#define __TIM6_CLK_ENABLE __HAL_RCC_TIM6_CLK_ENABLE
N#define __TIM6_CLK_SLEEP_DISABLE __HAL_RCC_TIM6_CLK_SLEEP_DISABLE
N#define __TIM6_CLK_SLEEP_ENABLE __HAL_RCC_TIM6_CLK_SLEEP_ENABLE
N#define __TIM6_FORCE_RESET __HAL_RCC_TIM6_FORCE_RESET
N#define __TIM6_RELEASE_RESET __HAL_RCC_TIM6_RELEASE_RESET
N#define __TIM7_CLK_DISABLE __HAL_RCC_TIM7_CLK_DISABLE
N#define __TIM7_CLK_ENABLE __HAL_RCC_TIM7_CLK_ENABLE
N#define __TIM7_CLK_SLEEP_DISABLE __HAL_RCC_TIM7_CLK_SLEEP_DISABLE
N#define __TIM7_CLK_SLEEP_ENABLE __HAL_RCC_TIM7_CLK_SLEEP_ENABLE
N#define __TIM7_FORCE_RESET __HAL_RCC_TIM7_FORCE_RESET
N#define __TIM7_RELEASE_RESET __HAL_RCC_TIM7_RELEASE_RESET
N#define __TIM8_CLK_DISABLE __HAL_RCC_TIM8_CLK_DISABLE
N#define __TIM8_CLK_ENABLE __HAL_RCC_TIM8_CLK_ENABLE
N#define __TIM8_CLK_SLEEP_DISABLE __HAL_RCC_TIM8_CLK_SLEEP_DISABLE
N#define __TIM8_CLK_SLEEP_ENABLE __HAL_RCC_TIM8_CLK_SLEEP_ENABLE
N#define __TIM8_FORCE_RESET __HAL_RCC_TIM8_FORCE_RESET
N#define __TIM8_RELEASE_RESET __HAL_RCC_TIM8_RELEASE_RESET
N#define __TIM9_CLK_DISABLE __HAL_RCC_TIM9_CLK_DISABLE
N#define __TIM9_CLK_ENABLE __HAL_RCC_TIM9_CLK_ENABLE
N#define __TIM9_FORCE_RESET __HAL_RCC_TIM9_FORCE_RESET
N#define __TIM9_RELEASE_RESET __HAL_RCC_TIM9_RELEASE_RESET
N#define __TSC_CLK_DISABLE __HAL_RCC_TSC_CLK_DISABLE
N#define __TSC_CLK_ENABLE __HAL_RCC_TSC_CLK_ENABLE
N#define __TSC_CLK_SLEEP_DISABLE __HAL_RCC_TSC_CLK_SLEEP_DISABLE
N#define __TSC_CLK_SLEEP_ENABLE __HAL_RCC_TSC_CLK_SLEEP_ENABLE
N#define __TSC_FORCE_RESET __HAL_RCC_TSC_FORCE_RESET
N#define __TSC_RELEASE_RESET __HAL_RCC_TSC_RELEASE_RESET
N#define __UART4_CLK_DISABLE __HAL_RCC_UART4_CLK_DISABLE
N#define __UART4_CLK_ENABLE __HAL_RCC_UART4_CLK_ENABLE
N#define __UART4_CLK_SLEEP_DISABLE __HAL_RCC_UART4_CLK_SLEEP_DISABLE
N#define __UART4_CLK_SLEEP_ENABLE __HAL_RCC_UART4_CLK_SLEEP_ENABLE
N#define __UART4_FORCE_RESET __HAL_RCC_UART4_FORCE_RESET
N#define __UART4_RELEASE_RESET __HAL_RCC_UART4_RELEASE_RESET
N#define __UART5_CLK_DISABLE __HAL_RCC_UART5_CLK_DISABLE
N#define __UART5_CLK_ENABLE __HAL_RCC_UART5_CLK_ENABLE
N#define __UART5_CLK_SLEEP_DISABLE __HAL_RCC_UART5_CLK_SLEEP_DISABLE
N#define __UART5_CLK_SLEEP_ENABLE __HAL_RCC_UART5_CLK_SLEEP_ENABLE
N#define __UART5_FORCE_RESET __HAL_RCC_UART5_FORCE_RESET
N#define __UART5_RELEASE_RESET __HAL_RCC_UART5_RELEASE_RESET
N#define __USART1_CLK_DISABLE __HAL_RCC_USART1_CLK_DISABLE
N#define __USART1_CLK_ENABLE __HAL_RCC_USART1_CLK_ENABLE
N#define __USART1_CLK_SLEEP_DISABLE __HAL_RCC_USART1_CLK_SLEEP_DISABLE
N#define __USART1_CLK_SLEEP_ENABLE __HAL_RCC_USART1_CLK_SLEEP_ENABLE
N#define __USART1_FORCE_RESET __HAL_RCC_USART1_FORCE_RESET
N#define __USART1_RELEASE_RESET __HAL_RCC_USART1_RELEASE_RESET
N#define __USART2_CLK_DISABLE __HAL_RCC_USART2_CLK_DISABLE
N#define __USART2_CLK_ENABLE __HAL_RCC_USART2_CLK_ENABLE
N#define __USART2_CLK_SLEEP_DISABLE __HAL_RCC_USART2_CLK_SLEEP_DISABLE
N#define __USART2_CLK_SLEEP_ENABLE __HAL_RCC_USART2_CLK_SLEEP_ENABLE
N#define __USART2_FORCE_RESET __HAL_RCC_USART2_FORCE_RESET
N#define __USART2_RELEASE_RESET __HAL_RCC_USART2_RELEASE_RESET
N#define __USART3_CLK_DISABLE __HAL_RCC_USART3_CLK_DISABLE
N#define __USART3_CLK_ENABLE __HAL_RCC_USART3_CLK_ENABLE
N#define __USART3_CLK_SLEEP_DISABLE __HAL_RCC_USART3_CLK_SLEEP_DISABLE
N#define __USART3_CLK_SLEEP_ENABLE __HAL_RCC_USART3_CLK_SLEEP_ENABLE
N#define __USART3_FORCE_RESET __HAL_RCC_USART3_FORCE_RESET
N#define __USART3_RELEASE_RESET __HAL_RCC_USART3_RELEASE_RESET
N#define __USART4_CLK_DISABLE        __HAL_RCC_UART4_CLK_DISABLE
N#define __USART4_CLK_ENABLE         __HAL_RCC_UART4_CLK_ENABLE
N#define __USART4_CLK_SLEEP_ENABLE   __HAL_RCC_UART4_CLK_SLEEP_ENABLE
N#define __USART4_CLK_SLEEP_DISABLE  __HAL_RCC_UART4_CLK_SLEEP_DISABLE 
N#define __USART4_FORCE_RESET        __HAL_RCC_UART4_FORCE_RESET
N#define __USART4_RELEASE_RESET      __HAL_RCC_UART4_RELEASE_RESET
N#define __USART5_CLK_DISABLE        __HAL_RCC_UART5_CLK_DISABLE
N#define __USART5_CLK_ENABLE         __HAL_RCC_UART5_CLK_ENABLE
N#define __USART5_CLK_SLEEP_ENABLE   __HAL_RCC_UART5_CLK_SLEEP_ENABLE
N#define __USART5_CLK_SLEEP_DISABLE  __HAL_RCC_UART5_CLK_SLEEP_DISABLE 
N#define __USART5_FORCE_RESET        __HAL_RCC_UART5_FORCE_RESET
N#define __USART5_RELEASE_RESET      __HAL_RCC_UART5_RELEASE_RESET
N#define __USART7_CLK_DISABLE        __HAL_RCC_UART7_CLK_DISABLE
N#define __USART7_CLK_ENABLE         __HAL_RCC_UART7_CLK_ENABLE
N#define __USART7_FORCE_RESET        __HAL_RCC_UART7_FORCE_RESET
N#define __USART7_RELEASE_RESET      __HAL_RCC_UART7_RELEASE_RESET
N#define __USART8_CLK_DISABLE        __HAL_RCC_UART8_CLK_DISABLE
N#define __USART8_CLK_ENABLE         __HAL_RCC_UART8_CLK_ENABLE
N#define __USART8_FORCE_RESET        __HAL_RCC_UART8_FORCE_RESET
N#define __USART8_RELEASE_RESET      __HAL_RCC_UART8_RELEASE_RESET
N#define __USB_CLK_DISABLE         __HAL_RCC_USB_CLK_DISABLE
N#define __USB_CLK_ENABLE          __HAL_RCC_USB_CLK_ENABLE
N#define __USB_FORCE_RESET         __HAL_RCC_USB_FORCE_RESET
N#define __USB_CLK_SLEEP_ENABLE    __HAL_RCC_USB_CLK_SLEEP_ENABLE
N#define __USB_CLK_SLEEP_DISABLE   __HAL_RCC_USB_CLK_SLEEP_DISABLE
N#define __USB_OTG_FS_CLK_DISABLE __HAL_RCC_USB_OTG_FS_CLK_DISABLE
N#define __USB_OTG_FS_CLK_ENABLE __HAL_RCC_USB_OTG_FS_CLK_ENABLE
N#define __USB_RELEASE_RESET __HAL_RCC_USB_RELEASE_RESET
N#define __WWDG_CLK_DISABLE __HAL_RCC_WWDG_CLK_DISABLE
N#define __WWDG_CLK_ENABLE __HAL_RCC_WWDG_CLK_ENABLE
N#define __WWDG_CLK_SLEEP_DISABLE __HAL_RCC_WWDG_CLK_SLEEP_DISABLE
N#define __WWDG_CLK_SLEEP_ENABLE __HAL_RCC_WWDG_CLK_SLEEP_ENABLE
N#define __WWDG_FORCE_RESET __HAL_RCC_WWDG_FORCE_RESET
N#define __WWDG_RELEASE_RESET __HAL_RCC_WWDG_RELEASE_RESET
N#define __TIM21_CLK_ENABLE   __HAL_RCC_TIM21_CLK_ENABLE
N#define __TIM21_CLK_DISABLE   __HAL_RCC_TIM21_CLK_DISABLE
N#define __TIM21_FORCE_RESET   __HAL_RCC_TIM21_FORCE_RESET
N#define __TIM21_RELEASE_RESET  __HAL_RCC_TIM21_RELEASE_RESET
N#define __TIM21_CLK_SLEEP_ENABLE   __HAL_RCC_TIM21_CLK_SLEEP_ENABLE
N#define __TIM21_CLK_SLEEP_DISABLE   __HAL_RCC_TIM21_CLK_SLEEP_DISABLE
N#define __TIM22_CLK_ENABLE   __HAL_RCC_TIM22_CLK_ENABLE
N#define __TIM22_CLK_DISABLE   __HAL_RCC_TIM22_CLK_DISABLE
N#define __TIM22_FORCE_RESET   __HAL_RCC_TIM22_FORCE_RESET
N#define __TIM22_RELEASE_RESET  __HAL_RCC_TIM22_RELEASE_RESET
N#define __TIM22_CLK_SLEEP_ENABLE   __HAL_RCC_TIM22_CLK_SLEEP_ENABLE
N#define __TIM22_CLK_SLEEP_DISABLE   __HAL_RCC_TIM22_CLK_SLEEP_DISABLE
N#define __CRS_CLK_DISABLE __HAL_RCC_CRS_CLK_DISABLE
N#define __CRS_CLK_ENABLE __HAL_RCC_CRS_CLK_ENABLE
N#define __CRS_CLK_SLEEP_DISABLE __HAL_RCC_CRS_CLK_SLEEP_DISABLE
N#define __CRS_CLK_SLEEP_ENABLE __HAL_RCC_CRS_CLK_SLEEP_ENABLE
N#define __CRS_FORCE_RESET __HAL_RCC_CRS_FORCE_RESET
N#define __CRS_RELEASE_RESET __HAL_RCC_CRS_RELEASE_RESET
N#define __RCC_BACKUPRESET_FORCE __HAL_RCC_BACKUPRESET_FORCE
N#define __RCC_BACKUPRESET_RELEASE __HAL_RCC_BACKUPRESET_RELEASE
N
N#define __USB_OTG_FS_FORCE_RESET  __HAL_RCC_USB_OTG_FS_FORCE_RESET
N#define __USB_OTG_FS_RELEASE_RESET  __HAL_RCC_USB_OTG_FS_RELEASE_RESET
N#define __USB_OTG_FS_CLK_SLEEP_ENABLE  __HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE
N#define __USB_OTG_FS_CLK_SLEEP_DISABLE  __HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE
N#define __USB_OTG_HS_CLK_DISABLE  __HAL_RCC_USB_OTG_HS_CLK_DISABLE
N#define __USB_OTG_HS_CLK_ENABLE          __HAL_RCC_USB_OTG_HS_CLK_ENABLE
N#define __USB_OTG_HS_ULPI_CLK_ENABLE  __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE
N#define __USB_OTG_HS_ULPI_CLK_DISABLE  __HAL_RCC_USB_OTG_HS_ULPI_CLK_DISABLE  
N#define __TIM9_CLK_SLEEP_ENABLE          __HAL_RCC_TIM9_CLK_SLEEP_ENABLE
N#define __TIM9_CLK_SLEEP_DISABLE  __HAL_RCC_TIM9_CLK_SLEEP_DISABLE  
N#define __TIM10_CLK_SLEEP_ENABLE  __HAL_RCC_TIM10_CLK_SLEEP_ENABLE
N#define __TIM10_CLK_SLEEP_DISABLE  __HAL_RCC_TIM10_CLK_SLEEP_DISABLE  
N#define __TIM11_CLK_SLEEP_ENABLE  __HAL_RCC_TIM11_CLK_SLEEP_ENABLE
N#define __TIM11_CLK_SLEEP_DISABLE  __HAL_RCC_TIM11_CLK_SLEEP_DISABLE  
N#define __ETHMACPTP_CLK_SLEEP_ENABLE  __HAL_RCC_ETHMACPTP_CLK_SLEEP_ENABLE
N#define __ETHMACPTP_CLK_SLEEP_DISABLE  __HAL_RCC_ETHMACPTP_CLK_SLEEP_DISABLE
N#define __ETHMACPTP_CLK_ENABLE          __HAL_RCC_ETHMACPTP_CLK_ENABLE
N#define __ETHMACPTP_CLK_DISABLE          __HAL_RCC_ETHMACPTP_CLK_DISABLE  
N#define __HASH_CLK_ENABLE          __HAL_RCC_HASH_CLK_ENABLE
N#define __HASH_FORCE_RESET          __HAL_RCC_HASH_FORCE_RESET
N#define __HASH_RELEASE_RESET          __HAL_RCC_HASH_RELEASE_RESET
N#define __HASH_CLK_SLEEP_ENABLE          __HAL_RCC_HASH_CLK_SLEEP_ENABLE
N#define __HASH_CLK_SLEEP_DISABLE  __HAL_RCC_HASH_CLK_SLEEP_DISABLE
N#define __HASH_CLK_DISABLE            __HAL_RCC_HASH_CLK_DISABLE  
N#define __SPI5_CLK_ENABLE          __HAL_RCC_SPI5_CLK_ENABLE
N#define __SPI5_CLK_DISABLE              __HAL_RCC_SPI5_CLK_DISABLE
N#define __SPI5_FORCE_RESET          __HAL_RCC_SPI5_FORCE_RESET
N#define __SPI5_RELEASE_RESET          __HAL_RCC_SPI5_RELEASE_RESET
N#define __SPI5_CLK_SLEEP_ENABLE          __HAL_RCC_SPI5_CLK_SLEEP_ENABLE
N#define __SPI5_CLK_SLEEP_DISABLE  __HAL_RCC_SPI5_CLK_SLEEP_DISABLE  
N#define __SPI6_CLK_ENABLE          __HAL_RCC_SPI6_CLK_ENABLE
N#define __SPI6_CLK_DISABLE          __HAL_RCC_SPI6_CLK_DISABLE
N#define __SPI6_FORCE_RESET          __HAL_RCC_SPI6_FORCE_RESET
N#define __SPI6_RELEASE_RESET         __HAL_RCC_SPI6_RELEASE_RESET
N#define __SPI6_CLK_SLEEP_ENABLE          __HAL_RCC_SPI6_CLK_SLEEP_ENABLE
N#define __SPI6_CLK_SLEEP_DISABLE  __HAL_RCC_SPI6_CLK_SLEEP_DISABLE  
N#define __LTDC_CLK_ENABLE          __HAL_RCC_LTDC_CLK_ENABLE
N#define __LTDC_CLK_DISABLE          __HAL_RCC_LTDC_CLK_DISABLE
N#define __LTDC_FORCE_RESET          __HAL_RCC_LTDC_FORCE_RESET
N#define __LTDC_RELEASE_RESET          __HAL_RCC_LTDC_RELEASE_RESET
N#define __LTDC_CLK_SLEEP_ENABLE          __HAL_RCC_LTDC_CLK_SLEEP_ENABLE  
N#define __ETHMAC_CLK_SLEEP_ENABLE  __HAL_RCC_ETHMAC_CLK_SLEEP_ENABLE
N#define __ETHMAC_CLK_SLEEP_DISABLE  __HAL_RCC_ETHMAC_CLK_SLEEP_DISABLE  
N#define __ETHMACTX_CLK_SLEEP_ENABLE  __HAL_RCC_ETHMACTX_CLK_SLEEP_ENABLE
N#define __ETHMACTX_CLK_SLEEP_DISABLE  __HAL_RCC_ETHMACTX_CLK_SLEEP_DISABLE  
N#define __ETHMACRX_CLK_SLEEP_ENABLE  __HAL_RCC_ETHMACRX_CLK_SLEEP_ENABLE
N#define __ETHMACRX_CLK_SLEEP_DISABLE  __HAL_RCC_ETHMACRX_CLK_SLEEP_DISABLE  
N#define __TIM12_CLK_SLEEP_ENABLE  __HAL_RCC_TIM12_CLK_SLEEP_ENABLE
N#define __TIM12_CLK_SLEEP_DISABLE  __HAL_RCC_TIM12_CLK_SLEEP_DISABLE  
N#define __TIM13_CLK_SLEEP_ENABLE  __HAL_RCC_TIM13_CLK_SLEEP_ENABLE
N#define __TIM13_CLK_SLEEP_DISABLE  __HAL_RCC_TIM13_CLK_SLEEP_DISABLE  
N#define __TIM14_CLK_SLEEP_ENABLE  __HAL_RCC_TIM14_CLK_SLEEP_ENABLE
N#define __TIM14_CLK_SLEEP_DISABLE  __HAL_RCC_TIM14_CLK_SLEEP_DISABLE  
N#define __BKPSRAM_CLK_ENABLE          __HAL_RCC_BKPSRAM_CLK_ENABLE
N#define __BKPSRAM_CLK_DISABLE          __HAL_RCC_BKPSRAM_CLK_DISABLE
N#define __BKPSRAM_CLK_SLEEP_ENABLE  __HAL_RCC_BKPSRAM_CLK_SLEEP_ENABLE
N#define __BKPSRAM_CLK_SLEEP_DISABLE  __HAL_RCC_BKPSRAM_CLK_SLEEP_DISABLE  
N#define __CCMDATARAMEN_CLK_ENABLE  __HAL_RCC_CCMDATARAMEN_CLK_ENABLE
N#define __CCMDATARAMEN_CLK_DISABLE  __HAL_RCC_CCMDATARAMEN_CLK_DISABLE  
N#define __USART6_CLK_ENABLE          __HAL_RCC_USART6_CLK_ENABLE
N#define __USART6_CLK_DISABLE          __HAL_RCC_USART6_CLK_DISABLE
N#define __USART6_FORCE_RESET        __HAL_RCC_USART6_FORCE_RESET
N#define __USART6_RELEASE_RESET        __HAL_RCC_USART6_RELEASE_RESET
N#define __USART6_CLK_SLEEP_ENABLE  __HAL_RCC_USART6_CLK_SLEEP_ENABLE
N#define __USART6_CLK_SLEEP_DISABLE  __HAL_RCC_USART6_CLK_SLEEP_DISABLE  
N#define __SPI4_CLK_ENABLE          __HAL_RCC_SPI4_CLK_ENABLE
N#define __SPI4_CLK_DISABLE          __HAL_RCC_SPI4_CLK_DISABLE
N#define __SPI4_FORCE_RESET          __HAL_RCC_SPI4_FORCE_RESET
N#define __SPI4_RELEASE_RESET        __HAL_RCC_SPI4_RELEASE_RESET
N#define __SPI4_CLK_SLEEP_ENABLE   __HAL_RCC_SPI4_CLK_SLEEP_ENABLE
N#define __SPI4_CLK_SLEEP_DISABLE  __HAL_RCC_SPI4_CLK_SLEEP_DISABLE  
N#define __GPIOI_CLK_ENABLE          __HAL_RCC_GPIOI_CLK_ENABLE
N#define __GPIOI_CLK_DISABLE          __HAL_RCC_GPIOI_CLK_DISABLE
N#define __GPIOI_FORCE_RESET          __HAL_RCC_GPIOI_FORCE_RESET
N#define __GPIOI_RELEASE_RESET          __HAL_RCC_GPIOI_RELEASE_RESET
N#define __GPIOI_CLK_SLEEP_ENABLE  __HAL_RCC_GPIOI_CLK_SLEEP_ENABLE
N#define __GPIOI_CLK_SLEEP_DISABLE  __HAL_RCC_GPIOI_CLK_SLEEP_DISABLE  
N#define __GPIOJ_CLK_ENABLE          __HAL_RCC_GPIOJ_CLK_ENABLE
N#define __GPIOJ_CLK_DISABLE          __HAL_RCC_GPIOJ_CLK_DISABLE
N#define __GPIOJ_FORCE_RESET         __HAL_RCC_GPIOJ_FORCE_RESET
N#define __GPIOJ_RELEASE_RESET          __HAL_RCC_GPIOJ_RELEASE_RESET
N#define __GPIOJ_CLK_SLEEP_ENABLE  __HAL_RCC_GPIOJ_CLK_SLEEP_ENABLE
N#define __GPIOJ_CLK_SLEEP_DISABLE  __HAL_RCC_GPIOJ_CLK_SLEEP_DISABLE  
N#define __GPIOK_CLK_ENABLE          __HAL_RCC_GPIOK_CLK_ENABLE
N#define __GPIOK_CLK_DISABLE          __HAL_RCC_GPIOK_CLK_DISABLE
N#define __GPIOK_RELEASE_RESET          __HAL_RCC_GPIOK_RELEASE_RESET
N#define __GPIOK_CLK_SLEEP_ENABLE  __HAL_RCC_GPIOK_CLK_SLEEP_ENABLE
N#define __GPIOK_CLK_SLEEP_DISABLE  __HAL_RCC_GPIOK_CLK_SLEEP_DISABLE  
N#define __ETH_CLK_ENABLE          __HAL_RCC_ETH_CLK_ENABLE
N#define __ETH_CLK_DISABLE          __HAL_RCC_ETH_CLK_DISABLE  
N#define __DCMI_CLK_ENABLE          __HAL_RCC_DCMI_CLK_ENABLE
N#define __DCMI_CLK_DISABLE          __HAL_RCC_DCMI_CLK_DISABLE
N#define __DCMI_FORCE_RESET          __HAL_RCC_DCMI_FORCE_RESET
N#define __DCMI_RELEASE_RESET          __HAL_RCC_DCMI_RELEASE_RESET
N#define __DCMI_CLK_SLEEP_ENABLE   __HAL_RCC_DCMI_CLK_SLEEP_ENABLE
N#define __DCMI_CLK_SLEEP_DISABLE  __HAL_RCC_DCMI_CLK_SLEEP_DISABLE  
N#define __UART7_CLK_ENABLE          __HAL_RCC_UART7_CLK_ENABLE
N#define __UART7_CLK_DISABLE          __HAL_RCC_UART7_CLK_DISABLE
N#define __UART7_RELEASE_RESET       __HAL_RCC_UART7_RELEASE_RESET
N#define __UART7_FORCE_RESET       __HAL_RCC_UART7_FORCE_RESET
N#define __UART7_CLK_SLEEP_ENABLE  __HAL_RCC_UART7_CLK_SLEEP_ENABLE
N#define __UART7_CLK_SLEEP_DISABLE  __HAL_RCC_UART7_CLK_SLEEP_DISABLE  
N#define __UART8_CLK_ENABLE          __HAL_RCC_UART8_CLK_ENABLE
N#define __UART8_CLK_DISABLE          __HAL_RCC_UART8_CLK_DISABLE
N#define __UART8_FORCE_RESET          __HAL_RCC_UART8_FORCE_RESET
N#define __UART8_RELEASE_RESET          __HAL_RCC_UART8_RELEASE_RESET
N#define __UART8_CLK_SLEEP_ENABLE  __HAL_RCC_UART8_CLK_SLEEP_ENABLE
N#define __UART8_CLK_SLEEP_DISABLE  __HAL_RCC_UART8_CLK_SLEEP_DISABLE  
N#define __OTGHS_CLK_SLEEP_ENABLE  __HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE
N#define __OTGHS_CLK_SLEEP_DISABLE  __HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE
N#define __OTGHS_FORCE_RESET          __HAL_RCC_USB_OTG_HS_FORCE_RESET
N#define __OTGHS_RELEASE_RESET          __HAL_RCC_USB_OTG_HS_RELEASE_RESET  
N#define __OTGHSULPI_CLK_SLEEP_ENABLE  __HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE
N#define __OTGHSULPI_CLK_SLEEP_DISABLE  __HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE
N#define __HAL_RCC_OTGHS_CLK_SLEEP_ENABLE  __HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE
N#define __HAL_RCC_OTGHS_CLK_SLEEP_DISABLE  __HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE
N#define __HAL_RCC_OTGHS_IS_CLK_SLEEP_ENABLED __HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_ENABLED
N#define __HAL_RCC_OTGHS_IS_CLK_SLEEP_DISABLED __HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_DISABLED
N#define __HAL_RCC_OTGHS_FORCE_RESET          __HAL_RCC_USB_OTG_HS_FORCE_RESET
N#define __HAL_RCC_OTGHS_RELEASE_RESET          __HAL_RCC_USB_OTG_HS_RELEASE_RESET  
N#define __HAL_RCC_OTGHSULPI_CLK_SLEEP_ENABLE      __HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE
N#define __HAL_RCC_OTGHSULPI_CLK_SLEEP_DISABLE     __HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE 
N#define __HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_ENABLED  __HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_ENABLED
N#define __HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_DISABLED __HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_DISABLED   
N#define __SRAM3_CLK_SLEEP_ENABLE       __HAL_RCC_SRAM3_CLK_SLEEP_ENABLE  
N#define __CAN2_CLK_SLEEP_ENABLE        __HAL_RCC_CAN2_CLK_SLEEP_ENABLE
N#define __CAN2_CLK_SLEEP_DISABLE       __HAL_RCC_CAN2_CLK_SLEEP_DISABLE  
N#define __DAC_CLK_SLEEP_ENABLE         __HAL_RCC_DAC_CLK_SLEEP_ENABLE
N#define __DAC_CLK_SLEEP_DISABLE        __HAL_RCC_DAC_CLK_SLEEP_DISABLE  
N#define __ADC2_CLK_SLEEP_ENABLE        __HAL_RCC_ADC2_CLK_SLEEP_ENABLE
N#define __ADC2_CLK_SLEEP_DISABLE       __HAL_RCC_ADC2_CLK_SLEEP_DISABLE  
N#define __ADC3_CLK_SLEEP_ENABLE        __HAL_RCC_ADC3_CLK_SLEEP_ENABLE
N#define __ADC3_CLK_SLEEP_DISABLE       __HAL_RCC_ADC3_CLK_SLEEP_DISABLE  
N#define __FSMC_FORCE_RESET             __HAL_RCC_FSMC_FORCE_RESET
N#define __FSMC_RELEASE_RESET           __HAL_RCC_FSMC_RELEASE_RESET
N#define __FSMC_CLK_SLEEP_ENABLE        __HAL_RCC_FSMC_CLK_SLEEP_ENABLE
N#define __FSMC_CLK_SLEEP_DISABLE       __HAL_RCC_FSMC_CLK_SLEEP_DISABLE  
N#define __SDIO_FORCE_RESET             __HAL_RCC_SDIO_FORCE_RESET
N#define __SDIO_RELEASE_RESET           __HAL_RCC_SDIO_RELEASE_RESET
N#define __SDIO_CLK_SLEEP_DISABLE       __HAL_RCC_SDIO_CLK_SLEEP_DISABLE
N#define __SDIO_CLK_SLEEP_ENABLE        __HAL_RCC_SDIO_CLK_SLEEP_ENABLE  
N#define __DMA2D_CLK_ENABLE             __HAL_RCC_DMA2D_CLK_ENABLE
N#define __DMA2D_CLK_DISABLE            __HAL_RCC_DMA2D_CLK_DISABLE
N#define __DMA2D_FORCE_RESET            __HAL_RCC_DMA2D_FORCE_RESET
N#define __DMA2D_RELEASE_RESET          __HAL_RCC_DMA2D_RELEASE_RESET
N#define __DMA2D_CLK_SLEEP_ENABLE       __HAL_RCC_DMA2D_CLK_SLEEP_ENABLE
N#define __DMA2D_CLK_SLEEP_DISABLE      __HAL_RCC_DMA2D_CLK_SLEEP_DISABLE
N
N/* alias define maintained for legacy */
N#define __HAL_RCC_OTGFS_FORCE_RESET    __HAL_RCC_USB_OTG_FS_FORCE_RESET
N#define __HAL_RCC_OTGFS_RELEASE_RESET  __HAL_RCC_USB_OTG_FS_RELEASE_RESET
N
N#define __ADC12_CLK_ENABLE          __HAL_RCC_ADC12_CLK_ENABLE
N#define __ADC12_CLK_DISABLE         __HAL_RCC_ADC12_CLK_DISABLE
N#define __ADC34_CLK_ENABLE          __HAL_RCC_ADC34_CLK_ENABLE
N#define __ADC34_CLK_DISABLE         __HAL_RCC_ADC34_CLK_DISABLE
N#define __DAC2_CLK_ENABLE           __HAL_RCC_DAC2_CLK_ENABLE
N#define __DAC2_CLK_DISABLE          __HAL_RCC_DAC2_CLK_DISABLE
N#define __TIM18_CLK_ENABLE          __HAL_RCC_TIM18_CLK_ENABLE
N#define __TIM18_CLK_DISABLE         __HAL_RCC_TIM18_CLK_DISABLE
N#define __TIM19_CLK_ENABLE          __HAL_RCC_TIM19_CLK_ENABLE
N#define __TIM19_CLK_DISABLE         __HAL_RCC_TIM19_CLK_DISABLE
N#define __TIM20_CLK_ENABLE          __HAL_RCC_TIM20_CLK_ENABLE
N#define __TIM20_CLK_DISABLE         __HAL_RCC_TIM20_CLK_DISABLE
N#define __HRTIM1_CLK_ENABLE         __HAL_RCC_HRTIM1_CLK_ENABLE
N#define __HRTIM1_CLK_DISABLE        __HAL_RCC_HRTIM1_CLK_DISABLE
N#define __SDADC1_CLK_ENABLE         __HAL_RCC_SDADC1_CLK_ENABLE
N#define __SDADC2_CLK_ENABLE         __HAL_RCC_SDADC2_CLK_ENABLE
N#define __SDADC3_CLK_ENABLE         __HAL_RCC_SDADC3_CLK_ENABLE
N#define __SDADC1_CLK_DISABLE        __HAL_RCC_SDADC1_CLK_DISABLE
N#define __SDADC2_CLK_DISABLE        __HAL_RCC_SDADC2_CLK_DISABLE
N#define __SDADC3_CLK_DISABLE        __HAL_RCC_SDADC3_CLK_DISABLE
N
N#define __ADC12_FORCE_RESET         __HAL_RCC_ADC12_FORCE_RESET
N#define __ADC12_RELEASE_RESET       __HAL_RCC_ADC12_RELEASE_RESET
N#define __ADC34_FORCE_RESET         __HAL_RCC_ADC34_FORCE_RESET
N#define __ADC34_RELEASE_RESET       __HAL_RCC_ADC34_RELEASE_RESET
N#define __DAC2_FORCE_RESET          __HAL_RCC_DAC2_FORCE_RESET
N#define __DAC2_RELEASE_RESET        __HAL_RCC_DAC2_RELEASE_RESET
N#define __TIM18_FORCE_RESET         __HAL_RCC_TIM18_FORCE_RESET
N#define __TIM18_RELEASE_RESET       __HAL_RCC_TIM18_RELEASE_RESET
N#define __TIM19_FORCE_RESET         __HAL_RCC_TIM19_FORCE_RESET
N#define __TIM19_RELEASE_RESET       __HAL_RCC_TIM19_RELEASE_RESET
N#define __TIM20_FORCE_RESET         __HAL_RCC_TIM20_FORCE_RESET
N#define __TIM20_RELEASE_RESET       __HAL_RCC_TIM20_RELEASE_RESET
N#define __HRTIM1_FORCE_RESET        __HAL_RCC_HRTIM1_FORCE_RESET
N#define __HRTIM1_RELEASE_RESET      __HAL_RCC_HRTIM1_RELEASE_RESET
N#define __SDADC1_FORCE_RESET        __HAL_RCC_SDADC1_FORCE_RESET
N#define __SDADC2_FORCE_RESET        __HAL_RCC_SDADC2_FORCE_RESET
N#define __SDADC3_FORCE_RESET        __HAL_RCC_SDADC3_FORCE_RESET
N#define __SDADC1_RELEASE_RESET      __HAL_RCC_SDADC1_RELEASE_RESET
N#define __SDADC2_RELEASE_RESET      __HAL_RCC_SDADC2_RELEASE_RESET
N#define __SDADC3_RELEASE_RESET      __HAL_RCC_SDADC3_RELEASE_RESET
N
N#define __ADC1_IS_CLK_ENABLED       __HAL_RCC_ADC1_IS_CLK_ENABLED
N#define __ADC1_IS_CLK_DISABLED      __HAL_RCC_ADC1_IS_CLK_DISABLED
N#define __ADC12_IS_CLK_ENABLED      __HAL_RCC_ADC12_IS_CLK_ENABLED
N#define __ADC12_IS_CLK_DISABLED     __HAL_RCC_ADC12_IS_CLK_DISABLED
N#define __ADC34_IS_CLK_ENABLED      __HAL_RCC_ADC34_IS_CLK_ENABLED
N#define __ADC34_IS_CLK_DISABLED     __HAL_RCC_ADC34_IS_CLK_DISABLED
N#define __CEC_IS_CLK_ENABLED        __HAL_RCC_CEC_IS_CLK_ENABLED
N#define __CEC_IS_CLK_DISABLED       __HAL_RCC_CEC_IS_CLK_DISABLED
N#define __CRC_IS_CLK_ENABLED        __HAL_RCC_CRC_IS_CLK_ENABLED
N#define __CRC_IS_CLK_DISABLED       __HAL_RCC_CRC_IS_CLK_DISABLED
N#define __DAC1_IS_CLK_ENABLED       __HAL_RCC_DAC1_IS_CLK_ENABLED
N#define __DAC1_IS_CLK_DISABLED      __HAL_RCC_DAC1_IS_CLK_DISABLED
N#define __DAC2_IS_CLK_ENABLED       __HAL_RCC_DAC2_IS_CLK_ENABLED
N#define __DAC2_IS_CLK_DISABLED      __HAL_RCC_DAC2_IS_CLK_DISABLED
N#define __DMA1_IS_CLK_ENABLED       __HAL_RCC_DMA1_IS_CLK_ENABLED
N#define __DMA1_IS_CLK_DISABLED      __HAL_RCC_DMA1_IS_CLK_DISABLED
N#define __DMA2_IS_CLK_ENABLED       __HAL_RCC_DMA2_IS_CLK_ENABLED
N#define __DMA2_IS_CLK_DISABLED      __HAL_RCC_DMA2_IS_CLK_DISABLED
N#define __FLITF_IS_CLK_ENABLED      __HAL_RCC_FLITF_IS_CLK_ENABLED
N#define __FLITF_IS_CLK_DISABLED     __HAL_RCC_FLITF_IS_CLK_DISABLED
N#define __FMC_IS_CLK_ENABLED        __HAL_RCC_FMC_IS_CLK_ENABLED
N#define __FMC_IS_CLK_DISABLED       __HAL_RCC_FMC_IS_CLK_DISABLED
N#define __GPIOA_IS_CLK_ENABLED      __HAL_RCC_GPIOA_IS_CLK_ENABLED
N#define __GPIOA_IS_CLK_DISABLED     __HAL_RCC_GPIOA_IS_CLK_DISABLED
N#define __GPIOB_IS_CLK_ENABLED      __HAL_RCC_GPIOB_IS_CLK_ENABLED
N#define __GPIOB_IS_CLK_DISABLED     __HAL_RCC_GPIOB_IS_CLK_DISABLED
N#define __GPIOC_IS_CLK_ENABLED      __HAL_RCC_GPIOC_IS_CLK_ENABLED
N#define __GPIOC_IS_CLK_DISABLED     __HAL_RCC_GPIOC_IS_CLK_DISABLED
N#define __GPIOD_IS_CLK_ENABLED      __HAL_RCC_GPIOD_IS_CLK_ENABLED
N#define __GPIOD_IS_CLK_DISABLED     __HAL_RCC_GPIOD_IS_CLK_DISABLED
N#define __GPIOE_IS_CLK_ENABLED      __HAL_RCC_GPIOE_IS_CLK_ENABLED
N#define __GPIOE_IS_CLK_DISABLED     __HAL_RCC_GPIOE_IS_CLK_DISABLED
N#define __GPIOF_IS_CLK_ENABLED      __HAL_RCC_GPIOF_IS_CLK_ENABLED
N#define __GPIOF_IS_CLK_DISABLED     __HAL_RCC_GPIOF_IS_CLK_DISABLED
N#define __GPIOG_IS_CLK_ENABLED      __HAL_RCC_GPIOG_IS_CLK_ENABLED
N#define __GPIOG_IS_CLK_DISABLED     __HAL_RCC_GPIOG_IS_CLK_DISABLED
N#define __GPIOH_IS_CLK_ENABLED      __HAL_RCC_GPIOH_IS_CLK_ENABLED
N#define __GPIOH_IS_CLK_DISABLED     __HAL_RCC_GPIOH_IS_CLK_DISABLED
N#define __HRTIM1_IS_CLK_ENABLED     __HAL_RCC_HRTIM1_IS_CLK_ENABLED
N#define __HRTIM1_IS_CLK_DISABLED    __HAL_RCC_HRTIM1_IS_CLK_DISABLED
N#define __I2C1_IS_CLK_ENABLED       __HAL_RCC_I2C1_IS_CLK_ENABLED
N#define __I2C1_IS_CLK_DISABLED      __HAL_RCC_I2C1_IS_CLK_DISABLED
N#define __I2C2_IS_CLK_ENABLED       __HAL_RCC_I2C2_IS_CLK_ENABLED
N#define __I2C2_IS_CLK_DISABLED      __HAL_RCC_I2C2_IS_CLK_DISABLED
N#define __I2C3_IS_CLK_ENABLED       __HAL_RCC_I2C3_IS_CLK_ENABLED
N#define __I2C3_IS_CLK_DISABLED      __HAL_RCC_I2C3_IS_CLK_DISABLED
N#define __PWR_IS_CLK_ENABLED        __HAL_RCC_PWR_IS_CLK_ENABLED
N#define __PWR_IS_CLK_DISABLED       __HAL_RCC_PWR_IS_CLK_DISABLED
N#define __SYSCFG_IS_CLK_ENABLED     __HAL_RCC_SYSCFG_IS_CLK_ENABLED
N#define __SYSCFG_IS_CLK_DISABLED    __HAL_RCC_SYSCFG_IS_CLK_DISABLED
N#define __SPI1_IS_CLK_ENABLED       __HAL_RCC_SPI1_IS_CLK_ENABLED
N#define __SPI1_IS_CLK_DISABLED      __HAL_RCC_SPI1_IS_CLK_DISABLED
N#define __SPI2_IS_CLK_ENABLED       __HAL_RCC_SPI2_IS_CLK_ENABLED
N#define __SPI2_IS_CLK_DISABLED      __HAL_RCC_SPI2_IS_CLK_DISABLED
N#define __SPI3_IS_CLK_ENABLED       __HAL_RCC_SPI3_IS_CLK_ENABLED
N#define __SPI3_IS_CLK_DISABLED      __HAL_RCC_SPI3_IS_CLK_DISABLED
N#define __SPI4_IS_CLK_ENABLED       __HAL_RCC_SPI4_IS_CLK_ENABLED
N#define __SPI4_IS_CLK_DISABLED      __HAL_RCC_SPI4_IS_CLK_DISABLED
N#define __SDADC1_IS_CLK_ENABLED     __HAL_RCC_SDADC1_IS_CLK_ENABLED
N#define __SDADC1_IS_CLK_DISABLED    __HAL_RCC_SDADC1_IS_CLK_DISABLED
N#define __SDADC2_IS_CLK_ENABLED     __HAL_RCC_SDADC2_IS_CLK_ENABLED
N#define __SDADC2_IS_CLK_DISABLED    __HAL_RCC_SDADC2_IS_CLK_DISABLED
N#define __SDADC3_IS_CLK_ENABLED     __HAL_RCC_SDADC3_IS_CLK_ENABLED
N#define __SDADC3_IS_CLK_DISABLED    __HAL_RCC_SDADC3_IS_CLK_DISABLED
N#define __SRAM_IS_CLK_ENABLED       __HAL_RCC_SRAM_IS_CLK_ENABLED
N#define __SRAM_IS_CLK_DISABLED      __HAL_RCC_SRAM_IS_CLK_DISABLED
N#define __TIM1_IS_CLK_ENABLED       __HAL_RCC_TIM1_IS_CLK_ENABLED
N#define __TIM1_IS_CLK_DISABLED      __HAL_RCC_TIM1_IS_CLK_DISABLED
N#define __TIM2_IS_CLK_ENABLED       __HAL_RCC_TIM2_IS_CLK_ENABLED
N#define __TIM2_IS_CLK_DISABLED      __HAL_RCC_TIM2_IS_CLK_DISABLED
N#define __TIM3_IS_CLK_ENABLED       __HAL_RCC_TIM3_IS_CLK_ENABLED
N#define __TIM3_IS_CLK_DISABLED      __HAL_RCC_TIM3_IS_CLK_DISABLED
N#define __TIM4_IS_CLK_ENABLED       __HAL_RCC_TIM4_IS_CLK_ENABLED
N#define __TIM4_IS_CLK_DISABLED      __HAL_RCC_TIM4_IS_CLK_DISABLED
N#define __TIM5_IS_CLK_ENABLED       __HAL_RCC_TIM5_IS_CLK_ENABLED
N#define __TIM5_IS_CLK_DISABLED      __HAL_RCC_TIM5_IS_CLK_DISABLED
N#define __TIM6_IS_CLK_ENABLED       __HAL_RCC_TIM6_IS_CLK_ENABLED
N#define __TIM6_IS_CLK_DISABLED      __HAL_RCC_TIM6_IS_CLK_DISABLED
N#define __TIM7_IS_CLK_ENABLED       __HAL_RCC_TIM7_IS_CLK_ENABLED
N#define __TIM7_IS_CLK_DISABLED      __HAL_RCC_TIM7_IS_CLK_DISABLED
N#define __TIM8_IS_CLK_ENABLED       __HAL_RCC_TIM8_IS_CLK_ENABLED
N#define __TIM8_IS_CLK_DISABLED      __HAL_RCC_TIM8_IS_CLK_DISABLED
N#define __TIM12_IS_CLK_ENABLED      __HAL_RCC_TIM12_IS_CLK_ENABLED
N#define __TIM12_IS_CLK_DISABLED     __HAL_RCC_TIM12_IS_CLK_DISABLED
N#define __TIM13_IS_CLK_ENABLED      __HAL_RCC_TIM13_IS_CLK_ENABLED
N#define __TIM13_IS_CLK_DISABLED     __HAL_RCC_TIM13_IS_CLK_DISABLED
N#define __TIM14_IS_CLK_ENABLED      __HAL_RCC_TIM14_IS_CLK_ENABLED
N#define __TIM14_IS_CLK_DISABLED     __HAL_RCC_TIM14_IS_CLK_DISABLED
N#define __TIM15_IS_CLK_ENABLED      __HAL_RCC_TIM15_IS_CLK_ENABLED
N#define __TIM15_IS_CLK_DISABLED     __HAL_RCC_TIM15_IS_CLK_DISABLED
N#define __TIM16_IS_CLK_ENABLED      __HAL_RCC_TIM16_IS_CLK_ENABLED
N#define __TIM16_IS_CLK_DISABLED     __HAL_RCC_TIM16_IS_CLK_DISABLED
N#define __TIM17_IS_CLK_ENABLED      __HAL_RCC_TIM17_IS_CLK_ENABLED
N#define __TIM17_IS_CLK_DISABLED     __HAL_RCC_TIM17_IS_CLK_DISABLED
N#define __TIM18_IS_CLK_ENABLED      __HAL_RCC_TIM18_IS_CLK_ENABLED
N#define __TIM18_IS_CLK_DISABLED     __HAL_RCC_TIM18_IS_CLK_DISABLED
N#define __TIM19_IS_CLK_ENABLED      __HAL_RCC_TIM19_IS_CLK_ENABLED
N#define __TIM19_IS_CLK_DISABLED     __HAL_RCC_TIM19_IS_CLK_DISABLED
N#define __TIM20_IS_CLK_ENABLED      __HAL_RCC_TIM20_IS_CLK_ENABLED
N#define __TIM20_IS_CLK_DISABLED     __HAL_RCC_TIM20_IS_CLK_DISABLED
N#define __TSC_IS_CLK_ENABLED        __HAL_RCC_TSC_IS_CLK_ENABLED
N#define __TSC_IS_CLK_DISABLED       __HAL_RCC_TSC_IS_CLK_DISABLED
N#define __UART4_IS_CLK_ENABLED      __HAL_RCC_UART4_IS_CLK_ENABLED
N#define __UART4_IS_CLK_DISABLED     __HAL_RCC_UART4_IS_CLK_DISABLED
N#define __UART5_IS_CLK_ENABLED      __HAL_RCC_UART5_IS_CLK_ENABLED
N#define __UART5_IS_CLK_DISABLED     __HAL_RCC_UART5_IS_CLK_DISABLED
N#define __USART1_IS_CLK_ENABLED     __HAL_RCC_USART1_IS_CLK_ENABLED
N#define __USART1_IS_CLK_DISABLED    __HAL_RCC_USART1_IS_CLK_DISABLED
N#define __USART2_IS_CLK_ENABLED     __HAL_RCC_USART2_IS_CLK_ENABLED
N#define __USART2_IS_CLK_DISABLED    __HAL_RCC_USART2_IS_CLK_DISABLED
N#define __USART3_IS_CLK_ENABLED     __HAL_RCC_USART3_IS_CLK_ENABLED
N#define __USART3_IS_CLK_DISABLED    __HAL_RCC_USART3_IS_CLK_DISABLED
N#define __USB_IS_CLK_ENABLED        __HAL_RCC_USB_IS_CLK_ENABLED
N#define __USB_IS_CLK_DISABLED       __HAL_RCC_USB_IS_CLK_DISABLED
N#define __WWDG_IS_CLK_ENABLED       __HAL_RCC_WWDG_IS_CLK_ENABLED
N#define __WWDG_IS_CLK_DISABLED      __HAL_RCC_WWDG_IS_CLK_DISABLED
N
N#if defined(STM32F4)
X#if 0L
S#define __HAL_RCC_SDMMC1_FORCE_RESET       __HAL_RCC_SDIO_FORCE_RESET
S#define __HAL_RCC_SDMMC1_RELEASE_RESET     __HAL_RCC_SDIO_RELEASE_RESET
S#define __HAL_RCC_SDMMC1_CLK_SLEEP_ENABLE  __HAL_RCC_SDIO_CLK_SLEEP_ENABLE
S#define __HAL_RCC_SDMMC1_CLK_SLEEP_DISABLE __HAL_RCC_SDIO_CLK_SLEEP_DISABLE
S#define __HAL_RCC_SDMMC1_CLK_ENABLE        __HAL_RCC_SDIO_CLK_ENABLE
S#define __HAL_RCC_SDMMC1_CLK_DISABLE       __HAL_RCC_SDIO_CLK_DISABLE
S#define __HAL_RCC_SDMMC1_IS_CLK_ENABLED    __HAL_RCC_SDIO_IS_CLK_ENABLED
S#define __HAL_RCC_SDMMC1_IS_CLK_DISABLED   __HAL_RCC_SDIO_IS_CLK_DISABLED
S#define Sdmmc1ClockSelection               SdioClockSelection
S#define RCC_PERIPHCLK_SDMMC1               RCC_PERIPHCLK_SDIO
S#define RCC_SDMMC1CLKSOURCE_CLK48          RCC_SDIOCLKSOURCE_CK48
S#define RCC_SDMMC1CLKSOURCE_SYSCLK         RCC_SDIOCLKSOURCE_SYSCLK
S#define __HAL_RCC_SDMMC1_CONFIG            __HAL_RCC_SDIO_CONFIG
S#define __HAL_RCC_GET_SDMMC1_SOURCE        __HAL_RCC_GET_SDIO_SOURCE
N#endif
N
N#if defined(STM32F7) || defined(STM32L4)
X#if 0L || 0L
S#define __HAL_RCC_SDIO_FORCE_RESET         __HAL_RCC_SDMMC1_FORCE_RESET
S#define __HAL_RCC_SDIO_RELEASE_RESET       __HAL_RCC_SDMMC1_RELEASE_RESET
S#define __HAL_RCC_SDIO_CLK_SLEEP_ENABLE    __HAL_RCC_SDMMC1_CLK_SLEEP_ENABLE
S#define __HAL_RCC_SDIO_CLK_SLEEP_DISABLE   __HAL_RCC_SDMMC1_CLK_SLEEP_DISABLE
S#define __HAL_RCC_SDIO_CLK_ENABLE          __HAL_RCC_SDMMC1_CLK_ENABLE
S#define __HAL_RCC_SDIO_CLK_DISABLE         __HAL_RCC_SDMMC1_CLK_DISABLE
S#define __HAL_RCC_SDIO_IS_CLK_ENABLED      __HAL_RCC_SDMMC1_IS_CLK_ENABLED
S#define __HAL_RCC_SDIO_IS_CLK_DISABLED     __HAL_RCC_SDMMC1_IS_CLK_DISABLED
S#define SdioClockSelection                 Sdmmc1ClockSelection
S#define RCC_PERIPHCLK_SDIO                 RCC_PERIPHCLK_SDMMC1
S#define __HAL_RCC_SDIO_CONFIG              __HAL_RCC_SDMMC1_CONFIG
S#define __HAL_RCC_GET_SDIO_SOURCE          __HAL_RCC_GET_SDMMC1_SOURCE	
N#endif
N
N#if defined(STM32F7)
X#if 0L
S#define RCC_SDIOCLKSOURCE_CLK48             RCC_SDMMC1CLKSOURCE_CLK48
S#define RCC_SDIOCLKSOURCE_SYSCLK           RCC_SDMMC1CLKSOURCE_SYSCLK
N#endif
N
N#define __HAL_RCC_I2SCLK            __HAL_RCC_I2S_CONFIG
N#define __HAL_RCC_I2SCLK_CONFIG     __HAL_RCC_I2S_CONFIG
N
N#define __RCC_PLLSRC                RCC_GET_PLL_OSCSOURCE
N
N#define IS_RCC_MSIRANGE             IS_RCC_MSI_CLOCK_RANGE
N#define IS_RCC_RTCCLK_SOURCE        IS_RCC_RTCCLKSOURCE
N#define IS_RCC_SYSCLK_DIV           IS_RCC_HCLK
N#define IS_RCC_HCLK_DIV             IS_RCC_PCLK
N#define IS_RCC_PERIPHCLK            IS_RCC_PERIPHCLOCK
N
N#define RCC_IT_HSI14                RCC_IT_HSI14RDY
N
N#define RCC_IT_CSSLSE               RCC_IT_LSECSS
N#define RCC_IT_CSSHSE               RCC_IT_CSS
N
N#define RCC_PLLMUL_3                RCC_PLL_MUL3
N#define RCC_PLLMUL_4                RCC_PLL_MUL4
N#define RCC_PLLMUL_6                RCC_PLL_MUL6
N#define RCC_PLLMUL_8                RCC_PLL_MUL8
N#define RCC_PLLMUL_12               RCC_PLL_MUL12
N#define RCC_PLLMUL_16               RCC_PLL_MUL16
N#define RCC_PLLMUL_24               RCC_PLL_MUL24
N#define RCC_PLLMUL_32               RCC_PLL_MUL32
N#define RCC_PLLMUL_48               RCC_PLL_MUL48
N
N#define RCC_PLLDIV_2                RCC_PLL_DIV2
N#define RCC_PLLDIV_3                RCC_PLL_DIV3
N#define RCC_PLLDIV_4                RCC_PLL_DIV4
N
N#define IS_RCC_MCOSOURCE            IS_RCC_MCO1SOURCE
N#define __HAL_RCC_MCO_CONFIG        __HAL_RCC_MCO1_CONFIG
N#define RCC_MCO_NODIV               RCC_MCODIV_1
N#define RCC_MCO_DIV1                RCC_MCODIV_1
N#define RCC_MCO_DIV2                RCC_MCODIV_2
N#define RCC_MCO_DIV4                RCC_MCODIV_4
N#define RCC_MCO_DIV8                RCC_MCODIV_8
N#define RCC_MCO_DIV16               RCC_MCODIV_16
N#define RCC_MCO_DIV32               RCC_MCODIV_32
N#define RCC_MCO_DIV64               RCC_MCODIV_64
N#define RCC_MCO_DIV128              RCC_MCODIV_128
N#define RCC_MCOSOURCE_NONE          RCC_MCO1SOURCE_NOCLOCK
N#define RCC_MCOSOURCE_LSI           RCC_MCO1SOURCE_LSI
N#define RCC_MCOSOURCE_LSE           RCC_MCO1SOURCE_LSE
N#define RCC_MCOSOURCE_SYSCLK        RCC_MCO1SOURCE_SYSCLK
N#define RCC_MCOSOURCE_HSI           RCC_MCO1SOURCE_HSI
N#define RCC_MCOSOURCE_HSI14         RCC_MCO1SOURCE_HSI14
N#define RCC_MCOSOURCE_HSI48         RCC_MCO1SOURCE_HSI48
N#define RCC_MCOSOURCE_HSE           RCC_MCO1SOURCE_HSE
N#define RCC_MCOSOURCE_PLLCLK_DIV1   RCC_MCO1SOURCE_PLLCLK
N#define RCC_MCOSOURCE_PLLCLK_NODIV  RCC_MCO1SOURCE_PLLCLK
N#define RCC_MCOSOURCE_PLLCLK_DIV2   RCC_MCO1SOURCE_PLLCLK_DIV2
N
N#if defined(STM32WB) || defined(STM32G0)
X#if 0L || 0L
N#else
N#define RCC_RTCCLKSOURCE_NONE       RCC_RTCCLKSOURCE_NO_CLK
N#endif
N
N#define RCC_USBCLK_PLLSAI1          RCC_USBCLKSOURCE_PLLSAI1
N#define RCC_USBCLK_PLL              RCC_USBCLKSOURCE_PLL
N#define RCC_USBCLK_MSI              RCC_USBCLKSOURCE_MSI
N#define RCC_USBCLKSOURCE_PLLCLK     RCC_USBCLKSOURCE_PLL
N#define RCC_USBPLLCLK_DIV1          RCC_USBCLKSOURCE_PLL
N#define RCC_USBPLLCLK_DIV1_5        RCC_USBCLKSOURCE_PLL_DIV1_5
N#define RCC_USBPLLCLK_DIV2          RCC_USBCLKSOURCE_PLL_DIV2
N#define RCC_USBPLLCLK_DIV3          RCC_USBCLKSOURCE_PLL_DIV3
N
N#define HSION_BitNumber        RCC_HSION_BIT_NUMBER
N#define HSION_BITNUMBER        RCC_HSION_BIT_NUMBER
N#define HSEON_BitNumber        RCC_HSEON_BIT_NUMBER
N#define HSEON_BITNUMBER        RCC_HSEON_BIT_NUMBER
N#define MSION_BITNUMBER        RCC_MSION_BIT_NUMBER
N#define CSSON_BitNumber        RCC_CSSON_BIT_NUMBER
N#define CSSON_BITNUMBER        RCC_CSSON_BIT_NUMBER
N#define PLLON_BitNumber        RCC_PLLON_BIT_NUMBER
N#define PLLON_BITNUMBER        RCC_PLLON_BIT_NUMBER
N#define PLLI2SON_BitNumber     RCC_PLLI2SON_BIT_NUMBER
N#define I2SSRC_BitNumber       RCC_I2SSRC_BIT_NUMBER
N#define RTCEN_BitNumber        RCC_RTCEN_BIT_NUMBER
N#define RTCEN_BITNUMBER        RCC_RTCEN_BIT_NUMBER
N#define BDRST_BitNumber        RCC_BDRST_BIT_NUMBER
N#define BDRST_BITNUMBER        RCC_BDRST_BIT_NUMBER
N#define RTCRST_BITNUMBER       RCC_RTCRST_BIT_NUMBER
N#define LSION_BitNumber        RCC_LSION_BIT_NUMBER
N#define LSION_BITNUMBER        RCC_LSION_BIT_NUMBER
N#define LSEON_BitNumber        RCC_LSEON_BIT_NUMBER
N#define LSEON_BITNUMBER        RCC_LSEON_BIT_NUMBER
N#define LSEBYP_BITNUMBER       RCC_LSEBYP_BIT_NUMBER
N#define PLLSAION_BitNumber     RCC_PLLSAION_BIT_NUMBER
N#define TIMPRE_BitNumber       RCC_TIMPRE_BIT_NUMBER
N#define RMVF_BitNumber         RCC_RMVF_BIT_NUMBER
N#define RMVF_BITNUMBER         RCC_RMVF_BIT_NUMBER
N#define RCC_CR2_HSI14TRIM_BitNumber RCC_HSI14TRIM_BIT_NUMBER
N#define CR_BYTE2_ADDRESS       RCC_CR_BYTE2_ADDRESS
N#define CIR_BYTE1_ADDRESS      RCC_CIR_BYTE1_ADDRESS
N#define CIR_BYTE2_ADDRESS      RCC_CIR_BYTE2_ADDRESS
N#define BDCR_BYTE0_ADDRESS     RCC_BDCR_BYTE0_ADDRESS
N#define DBP_TIMEOUT_VALUE      RCC_DBP_TIMEOUT_VALUE
N#define LSE_TIMEOUT_VALUE      RCC_LSE_TIMEOUT_VALUE
N
N#define CR_HSION_BB            RCC_CR_HSION_BB
N#define CR_CSSON_BB            RCC_CR_CSSON_BB
N#define CR_PLLON_BB            RCC_CR_PLLON_BB
N#define CR_PLLI2SON_BB         RCC_CR_PLLI2SON_BB
N#define CR_MSION_BB            RCC_CR_MSION_BB
N#define CSR_LSION_BB           RCC_CSR_LSION_BB
N#define CSR_LSEON_BB           RCC_CSR_LSEON_BB
N#define CSR_LSEBYP_BB          RCC_CSR_LSEBYP_BB
N#define CSR_RTCEN_BB           RCC_CSR_RTCEN_BB
N#define CSR_RTCRST_BB          RCC_CSR_RTCRST_BB
N#define CFGR_I2SSRC_BB         RCC_CFGR_I2SSRC_BB
N#define BDCR_RTCEN_BB          RCC_BDCR_RTCEN_BB
N#define BDCR_BDRST_BB          RCC_BDCR_BDRST_BB
N#define CR_HSEON_BB            RCC_CR_HSEON_BB
N#define CSR_RMVF_BB            RCC_CSR_RMVF_BB
N#define CR_PLLSAION_BB         RCC_CR_PLLSAION_BB
N#define DCKCFGR_TIMPRE_BB      RCC_DCKCFGR_TIMPRE_BB
N
N#define __HAL_RCC_CRS_ENABLE_FREQ_ERROR_COUNTER     __HAL_RCC_CRS_FREQ_ERROR_COUNTER_ENABLE
N#define __HAL_RCC_CRS_DISABLE_FREQ_ERROR_COUNTER    __HAL_RCC_CRS_FREQ_ERROR_COUNTER_DISABLE
N#define __HAL_RCC_CRS_ENABLE_AUTOMATIC_CALIB        __HAL_RCC_CRS_AUTOMATIC_CALIB_ENABLE
N#define __HAL_RCC_CRS_DISABLE_AUTOMATIC_CALIB       __HAL_RCC_CRS_AUTOMATIC_CALIB_DISABLE
N#define __HAL_RCC_CRS_CALCULATE_RELOADVALUE         __HAL_RCC_CRS_RELOADVALUE_CALCULATE
N
N#define __HAL_RCC_GET_IT_SOURCE                     __HAL_RCC_GET_IT
N
N#define RCC_CRS_SYNCWARM       RCC_CRS_SYNCWARN
N#define RCC_CRS_TRIMOV         RCC_CRS_TRIMOVF
N
N#define RCC_PERIPHCLK_CK48               RCC_PERIPHCLK_CLK48
N#define RCC_CK48CLKSOURCE_PLLQ           RCC_CLK48CLKSOURCE_PLLQ
N#define RCC_CK48CLKSOURCE_PLLSAIP        RCC_CLK48CLKSOURCE_PLLSAIP
N#define RCC_CK48CLKSOURCE_PLLI2SQ        RCC_CLK48CLKSOURCE_PLLI2SQ
N#define IS_RCC_CK48CLKSOURCE             IS_RCC_CLK48CLKSOURCE
N#define RCC_SDIOCLKSOURCE_CK48           RCC_SDIOCLKSOURCE_CLK48
N
N#define __HAL_RCC_DFSDM_CLK_ENABLE             __HAL_RCC_DFSDM1_CLK_ENABLE
N#define __HAL_RCC_DFSDM_CLK_DISABLE            __HAL_RCC_DFSDM1_CLK_DISABLE
N#define __HAL_RCC_DFSDM_IS_CLK_ENABLED         __HAL_RCC_DFSDM1_IS_CLK_ENABLED
N#define __HAL_RCC_DFSDM_IS_CLK_DISABLED        __HAL_RCC_DFSDM1_IS_CLK_DISABLED
N#define __HAL_RCC_DFSDM_FORCE_RESET            __HAL_RCC_DFSDM1_FORCE_RESET
N#define __HAL_RCC_DFSDM_RELEASE_RESET          __HAL_RCC_DFSDM1_RELEASE_RESET
N#define __HAL_RCC_DFSDM_CLK_SLEEP_ENABLE       __HAL_RCC_DFSDM1_CLK_SLEEP_ENABLE
N#define __HAL_RCC_DFSDM_CLK_SLEEP_DISABLE      __HAL_RCC_DFSDM1_CLK_SLEEP_DISABLE
N#define __HAL_RCC_DFSDM_IS_CLK_SLEEP_ENABLED   __HAL_RCC_DFSDM1_IS_CLK_SLEEP_ENABLED
N#define __HAL_RCC_DFSDM_IS_CLK_SLEEP_DISABLED  __HAL_RCC_DFSDM1_IS_CLK_SLEEP_DISABLED
N#define DfsdmClockSelection         Dfsdm1ClockSelection
N#define RCC_PERIPHCLK_DFSDM         RCC_PERIPHCLK_DFSDM1
N#define RCC_DFSDMCLKSOURCE_PCLK     RCC_DFSDM1CLKSOURCE_PCLK
N#define RCC_DFSDMCLKSOURCE_SYSCLK   RCC_DFSDM1CLKSOURCE_SYSCLK
N#define __HAL_RCC_DFSDM_CONFIG      __HAL_RCC_DFSDM1_CONFIG
N#define __HAL_RCC_GET_DFSDM_SOURCE  __HAL_RCC_GET_DFSDM1_SOURCE
N/**
N  * @}
N  */
N
N/** @defgroup HAL_RNG_Aliased_Macros HAL RNG Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#define  HAL_RNG_ReadyCallback(__HANDLE__)  HAL_RNG_ReadyDataCallback((__HANDLE__), uint32_t random32bit)                                       
N
N/**
N  * @}
N  */
N  
N/** @defgroup HAL_RTC_Aliased_Macros HAL RTC Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#if defined (STM32G0)
X#if 0L
N#else
N#define __HAL_RTC_CLEAR_FLAG                      __HAL_RTC_EXTI_CLEAR_FLAG
N#endif
N#define __HAL_RTC_DISABLE_IT                      __HAL_RTC_EXTI_DISABLE_IT
N#define __HAL_RTC_ENABLE_IT                       __HAL_RTC_EXTI_ENABLE_IT
N
N#if defined (STM32F1)
X#if 0L
S#define __HAL_RTC_EXTI_CLEAR_FLAG(RTC_EXTI_LINE_ALARM_EVENT)  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG()
S
S#define __HAL_RTC_EXTI_ENABLE_IT(RTC_EXTI_LINE_ALARM_EVENT)   __HAL_RTC_ALARM_EXTI_ENABLE_IT()
S
S#define __HAL_RTC_EXTI_DISABLE_IT(RTC_EXTI_LINE_ALARM_EVENT)  __HAL_RTC_ALARM_EXTI_DISABLE_IT()
S
S#define __HAL_RTC_EXTI_GET_FLAG(RTC_EXTI_LINE_ALARM_EVENT)    __HAL_RTC_ALARM_EXTI_GET_FLAG()
S
S#define __HAL_RTC_EXTI_GENERATE_SWIT(RTC_EXTI_LINE_ALARM_EVENT)   __HAL_RTC_ALARM_EXTI_GENERATE_SWIT()
N#else
N#define __HAL_RTC_EXTI_CLEAR_FLAG(__EXTI_LINE__)  (((__EXTI_LINE__) == RTC_EXTI_LINE_ALARM_EVENT) ? __HAL_RTC_ALARM_EXTI_CLEAR_FLAG() : \
N                                                   (((__EXTI_LINE__) == RTC_EXTI_LINE_WAKEUPTIMER_EVENT) ? __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG() : \
N                                                      __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG()))
X#define __HAL_RTC_EXTI_CLEAR_FLAG(__EXTI_LINE__)  (((__EXTI_LINE__) == RTC_EXTI_LINE_ALARM_EVENT) ? __HAL_RTC_ALARM_EXTI_CLEAR_FLAG() :                                                    (((__EXTI_LINE__) == RTC_EXTI_LINE_WAKEUPTIMER_EVENT) ? __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG() :                                                       __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG()))
N#define __HAL_RTC_EXTI_ENABLE_IT(__EXTI_LINE__)   (((__EXTI_LINE__)  == RTC_EXTI_LINE_ALARM_EVENT) ? __HAL_RTC_ALARM_EXTI_ENABLE_IT() : \
N                                                  (((__EXTI_LINE__) == RTC_EXTI_LINE_WAKEUPTIMER_EVENT) ? __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT() : \
N                                                      __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT()))
X#define __HAL_RTC_EXTI_ENABLE_IT(__EXTI_LINE__)   (((__EXTI_LINE__)  == RTC_EXTI_LINE_ALARM_EVENT) ? __HAL_RTC_ALARM_EXTI_ENABLE_IT() :                                                   (((__EXTI_LINE__) == RTC_EXTI_LINE_WAKEUPTIMER_EVENT) ? __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT() :                                                       __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT()))
N#define __HAL_RTC_EXTI_DISABLE_IT(__EXTI_LINE__)  (((__EXTI_LINE__) == RTC_EXTI_LINE_ALARM_EVENT) ? __HAL_RTC_ALARM_EXTI_DISABLE_IT() : \
N                                                  (((__EXTI_LINE__) == RTC_EXTI_LINE_WAKEUPTIMER_EVENT) ? __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT() : \
N                                                      __HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_IT()))
X#define __HAL_RTC_EXTI_DISABLE_IT(__EXTI_LINE__)  (((__EXTI_LINE__) == RTC_EXTI_LINE_ALARM_EVENT) ? __HAL_RTC_ALARM_EXTI_DISABLE_IT() :                                                   (((__EXTI_LINE__) == RTC_EXTI_LINE_WAKEUPTIMER_EVENT) ? __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT() :                                                       __HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_IT()))
N#define __HAL_RTC_EXTI_GET_FLAG(__EXTI_LINE__)    (((__EXTI_LINE__) == RTC_EXTI_LINE_ALARM_EVENT) ? __HAL_RTC_ALARM_EXTI_GET_FLAG() : \
N                                                  (((__EXTI_LINE__) == RTC_EXTI_LINE_WAKEUPTIMER_EVENT) ? __HAL_RTC_WAKEUPTIMER_EXTI_GET_FLAG() : \
N                                                      __HAL_RTC_TAMPER_TIMESTAMP_EXTI_GET_FLAG()))
X#define __HAL_RTC_EXTI_GET_FLAG(__EXTI_LINE__)    (((__EXTI_LINE__) == RTC_EXTI_LINE_ALARM_EVENT) ? __HAL_RTC_ALARM_EXTI_GET_FLAG() :                                                   (((__EXTI_LINE__) == RTC_EXTI_LINE_WAKEUPTIMER_EVENT) ? __HAL_RTC_WAKEUPTIMER_EXTI_GET_FLAG() :                                                       __HAL_RTC_TAMPER_TIMESTAMP_EXTI_GET_FLAG()))
N#define __HAL_RTC_EXTI_GENERATE_SWIT(__EXTI_LINE__)   (((__EXTI_LINE__) == RTC_EXTI_LINE_ALARM_EVENT) ? __HAL_RTC_ALARM_EXTI_GENERATE_SWIT() : \
N                                                      (((__EXTI_LINE__) == RTC_EXTI_LINE_WAKEUPTIMER_EVENT) ? __HAL_RTC_WAKEUPTIMER_EXTI_GENERATE_SWIT() :  \
N                                                          __HAL_RTC_TAMPER_TIMESTAMP_EXTI_GENERATE_SWIT()))
X#define __HAL_RTC_EXTI_GENERATE_SWIT(__EXTI_LINE__)   (((__EXTI_LINE__) == RTC_EXTI_LINE_ALARM_EVENT) ? __HAL_RTC_ALARM_EXTI_GENERATE_SWIT() :                                                       (((__EXTI_LINE__) == RTC_EXTI_LINE_WAKEUPTIMER_EVENT) ? __HAL_RTC_WAKEUPTIMER_EXTI_GENERATE_SWIT() :                                                            __HAL_RTC_TAMPER_TIMESTAMP_EXTI_GENERATE_SWIT()))
N#endif   /* STM32F1 */
N
N#define IS_ALARM                                  IS_RTC_ALARM
N#define IS_ALARM_MASK                             IS_RTC_ALARM_MASK
N#define IS_TAMPER                                 IS_RTC_TAMPER
N#define IS_TAMPER_ERASE_MODE                      IS_RTC_TAMPER_ERASE_MODE
N#define IS_TAMPER_FILTER                          IS_RTC_TAMPER_FILTER 
N#define IS_TAMPER_INTERRUPT                       IS_RTC_TAMPER_INTERRUPT
N#define IS_TAMPER_MASKFLAG_STATE                  IS_RTC_TAMPER_MASKFLAG_STATE
N#define IS_TAMPER_PRECHARGE_DURATION              IS_RTC_TAMPER_PRECHARGE_DURATION
N#define IS_TAMPER_PULLUP_STATE                    IS_RTC_TAMPER_PULLUP_STATE
N#define IS_TAMPER_SAMPLING_FREQ                   IS_RTC_TAMPER_SAMPLING_FREQ
N#define IS_TAMPER_TIMESTAMPONTAMPER_DETECTION     IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION
N#define IS_TAMPER_TRIGGER                         IS_RTC_TAMPER_TRIGGER
N#define IS_WAKEUP_CLOCK                           IS_RTC_WAKEUP_CLOCK
N#define IS_WAKEUP_COUNTER                         IS_RTC_WAKEUP_COUNTER
N
N#define __RTC_WRITEPROTECTION_ENABLE  __HAL_RTC_WRITEPROTECTION_ENABLE
N#define __RTC_WRITEPROTECTION_DISABLE  __HAL_RTC_WRITEPROTECTION_DISABLE
N
N/**
N  * @}
N  */
N
N/** @defgroup HAL_SD_Aliased_Macros HAL SD Aliased Macros maintained for legacy purpose
N  * @{
N  */
N
N#define SD_OCR_CID_CSD_OVERWRIETE   SD_OCR_CID_CSD_OVERWRITE
N#define SD_CMD_SD_APP_STAUS         SD_CMD_SD_APP_STATUS
N
N#if defined(STM32F4)
X#if 0L
S#define  SD_SDMMC_DISABLED          SD_SDIO_DISABLED
S#define  SD_SDMMC_FUNCTION_BUSY     SD_SDIO_FUNCTION_BUSY     
S#define  SD_SDMMC_FUNCTION_FAILED   SD_SDIO_FUNCTION_FAILED   
S#define  SD_SDMMC_UNKNOWN_FUNCTION  SD_SDIO_UNKNOWN_FUNCTION  
S#define  SD_CMD_SDMMC_SEN_OP_COND   SD_CMD_SDIO_SEN_OP_COND   
S#define  SD_CMD_SDMMC_RW_DIRECT     SD_CMD_SDIO_RW_DIRECT     
S#define  SD_CMD_SDMMC_RW_EXTENDED   SD_CMD_SDIO_RW_EXTENDED   
S#define  __HAL_SD_SDMMC_ENABLE      __HAL_SD_SDIO_ENABLE      
S#define  __HAL_SD_SDMMC_DISABLE     __HAL_SD_SDIO_DISABLE     
S#define  __HAL_SD_SDMMC_DMA_ENABLE  __HAL_SD_SDIO_DMA_ENABLE  
S#define  __HAL_SD_SDMMC_DMA_DISABLE __HAL_SD_SDIO_DMA_DISABL  
S#define  __HAL_SD_SDMMC_ENABLE_IT   __HAL_SD_SDIO_ENABLE_IT   
S#define  __HAL_SD_SDMMC_DISABLE_IT  __HAL_SD_SDIO_DISABLE_IT  
S#define  __HAL_SD_SDMMC_GET_FLAG    __HAL_SD_SDIO_GET_FLAG    
S#define  __HAL_SD_SDMMC_CLEAR_FLAG  __HAL_SD_SDIO_CLEAR_FLAG  
S#define  __HAL_SD_SDMMC_GET_IT      __HAL_SD_SDIO_GET_IT      
S#define  __HAL_SD_SDMMC_CLEAR_IT    __HAL_SD_SDIO_CLEAR_IT    
S#define  SDMMC_STATIC_FLAGS         SDIO_STATIC_FLAGS	       
S#define  SDMMC_CMD0TIMEOUT          SDIO_CMD0TIMEOUT	       
S#define  SD_SDMMC_SEND_IF_COND      SD_SDIO_SEND_IF_COND
S/* alias CMSIS */
S#define  SDMMC1_IRQn                SDIO_IRQn
S#define  SDMMC1_IRQHandler          SDIO_IRQHandler
N#endif
N
N#if defined(STM32F7) || defined(STM32L4)
X#if 0L || 0L
S#define  SD_SDIO_DISABLED           SD_SDMMC_DISABLED
S#define  SD_SDIO_FUNCTION_BUSY      SD_SDMMC_FUNCTION_BUSY    
S#define  SD_SDIO_FUNCTION_FAILED    SD_SDMMC_FUNCTION_FAILED  
S#define  SD_SDIO_UNKNOWN_FUNCTION   SD_SDMMC_UNKNOWN_FUNCTION
S#define  SD_CMD_SDIO_SEN_OP_COND    SD_CMD_SDMMC_SEN_OP_COND
S#define  SD_CMD_SDIO_RW_DIRECT      SD_CMD_SDMMC_RW_DIRECT
S#define  SD_CMD_SDIO_RW_EXTENDED    SD_CMD_SDMMC_RW_EXTENDED
S#define  __HAL_SD_SDIO_ENABLE       __HAL_SD_SDMMC_ENABLE
S#define  __HAL_SD_SDIO_DISABLE      __HAL_SD_SDMMC_DISABLE
S#define  __HAL_SD_SDIO_DMA_ENABLE   __HAL_SD_SDMMC_DMA_ENABLE
S#define  __HAL_SD_SDIO_DMA_DISABL   __HAL_SD_SDMMC_DMA_DISABLE
S#define  __HAL_SD_SDIO_ENABLE_IT    __HAL_SD_SDMMC_ENABLE_IT
S#define  __HAL_SD_SDIO_DISABLE_IT   __HAL_SD_SDMMC_DISABLE_IT
S#define  __HAL_SD_SDIO_GET_FLAG     __HAL_SD_SDMMC_GET_FLAG
S#define  __HAL_SD_SDIO_CLEAR_FLAG   __HAL_SD_SDMMC_CLEAR_FLAG
S#define  __HAL_SD_SDIO_GET_IT       __HAL_SD_SDMMC_GET_IT
S#define  __HAL_SD_SDIO_CLEAR_IT     __HAL_SD_SDMMC_CLEAR_IT
S#define  SDIO_STATIC_FLAGS	        SDMMC_STATIC_FLAGS
S#define  SDIO_CMD0TIMEOUT	          SDMMC_CMD0TIMEOUT
S#define  SD_SDIO_SEND_IF_COND	      SD_SDMMC_SEND_IF_COND
S/* alias CMSIS for compatibilities */
S#define  SDIO_IRQn                  SDMMC1_IRQn
S#define  SDIO_IRQHandler            SDMMC1_IRQHandler
N#endif
N/**
N  * @}
N  */
N
N/** @defgroup HAL_SMARTCARD_Aliased_Macros HAL SMARTCARD Aliased Macros maintained for legacy purpose
N  * @{
N  */
N
N#define __SMARTCARD_ENABLE_IT           __HAL_SMARTCARD_ENABLE_IT
N#define __SMARTCARD_DISABLE_IT          __HAL_SMARTCARD_DISABLE_IT
N#define __SMARTCARD_ENABLE              __HAL_SMARTCARD_ENABLE
N#define __SMARTCARD_DISABLE             __HAL_SMARTCARD_DISABLE
N#define __SMARTCARD_DMA_REQUEST_ENABLE  __HAL_SMARTCARD_DMA_REQUEST_ENABLE
N#define __SMARTCARD_DMA_REQUEST_DISABLE __HAL_SMARTCARD_DMA_REQUEST_DISABLE
N
N#define __HAL_SMARTCARD_GETCLOCKSOURCE  SMARTCARD_GETCLOCKSOURCE
N#define __SMARTCARD_GETCLOCKSOURCE      SMARTCARD_GETCLOCKSOURCE
N
N#define IS_SMARTCARD_ONEBIT_SAMPLING    IS_SMARTCARD_ONE_BIT_SAMPLE                  
N
N/**
N  * @}
N  */
N
N/** @defgroup HAL_SMBUS_Aliased_Macros HAL SMBUS Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#define __HAL_SMBUS_RESET_CR1           SMBUS_RESET_CR1
N#define __HAL_SMBUS_RESET_CR2           SMBUS_RESET_CR2
N#define __HAL_SMBUS_GENERATE_START      SMBUS_GENERATE_START
N#define __HAL_SMBUS_GET_ADDR_MATCH      SMBUS_GET_ADDR_MATCH
N#define __HAL_SMBUS_GET_DIR             SMBUS_GET_DIR
N#define __HAL_SMBUS_GET_STOP_MODE       SMBUS_GET_STOP_MODE
N#define __HAL_SMBUS_GET_PEC_MODE        SMBUS_GET_PEC_MODE
N#define __HAL_SMBUS_GET_ALERT_ENABLED   SMBUS_GET_ALERT_ENABLED
N/**
N  * @}
N  */
N
N/** @defgroup HAL_SPI_Aliased_Macros HAL SPI Aliased Macros maintained for legacy purpose
N  * @{
N  */
N
N#define __HAL_SPI_1LINE_TX              SPI_1LINE_TX
N#define __HAL_SPI_1LINE_RX              SPI_1LINE_RX
N#define __HAL_SPI_RESET_CRC             SPI_RESET_CRC
N
N/**
N  * @}
N  */
N  
N/** @defgroup HAL_UART_Aliased_Macros HAL UART Aliased Macros maintained for legacy purpose
N  * @{
N  */
N
N#define __HAL_UART_GETCLOCKSOURCE       UART_GETCLOCKSOURCE
N#define __HAL_UART_MASK_COMPUTATION     UART_MASK_COMPUTATION
N#define __UART_GETCLOCKSOURCE           UART_GETCLOCKSOURCE
N#define __UART_MASK_COMPUTATION         UART_MASK_COMPUTATION
N
N#define IS_UART_WAKEUPMETHODE           IS_UART_WAKEUPMETHOD
N
N#define IS_UART_ONEBIT_SAMPLE           IS_UART_ONE_BIT_SAMPLE                  
N#define IS_UART_ONEBIT_SAMPLING         IS_UART_ONE_BIT_SAMPLE                  
N
N/**
N  * @}
N  */
N
N
N/** @defgroup HAL_USART_Aliased_Macros HAL USART Aliased Macros maintained for legacy purpose
N  * @{
N  */
N
N#define __USART_ENABLE_IT               __HAL_USART_ENABLE_IT
N#define __USART_DISABLE_IT              __HAL_USART_DISABLE_IT
N#define __USART_ENABLE                  __HAL_USART_ENABLE
N#define __USART_DISABLE                 __HAL_USART_DISABLE
N
N#define __HAL_USART_GETCLOCKSOURCE      USART_GETCLOCKSOURCE
N#define __USART_GETCLOCKSOURCE          USART_GETCLOCKSOURCE
N
N/**
N  * @}
N  */
N
N/** @defgroup HAL_USB_Aliased_Macros HAL USB Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#define USB_EXTI_LINE_WAKEUP                               USB_WAKEUP_EXTI_LINE
N
N#define USB_FS_EXTI_TRIGGER_RISING_EDGE                    USB_OTG_FS_WAKEUP_EXTI_RISING_EDGE
N#define USB_FS_EXTI_TRIGGER_FALLING_EDGE                   USB_OTG_FS_WAKEUP_EXTI_FALLING_EDGE
N#define USB_FS_EXTI_TRIGGER_BOTH_EDGE                      USB_OTG_FS_WAKEUP_EXTI_RISING_FALLING_EDGE
N#define USB_FS_EXTI_LINE_WAKEUP                            USB_OTG_FS_WAKEUP_EXTI_LINE
N
N#define USB_HS_EXTI_TRIGGER_RISING_EDGE                    USB_OTG_HS_WAKEUP_EXTI_RISING_EDGE
N#define USB_HS_EXTI_TRIGGER_FALLING_EDGE                   USB_OTG_HS_WAKEUP_EXTI_FALLING_EDGE
N#define USB_HS_EXTI_TRIGGER_BOTH_EDGE                      USB_OTG_HS_WAKEUP_EXTI_RISING_FALLING_EDGE
N#define USB_HS_EXTI_LINE_WAKEUP                            USB_OTG_HS_WAKEUP_EXTI_LINE
N
N#define __HAL_USB_EXTI_ENABLE_IT                           __HAL_USB_WAKEUP_EXTI_ENABLE_IT
N#define __HAL_USB_EXTI_DISABLE_IT                          __HAL_USB_WAKEUP_EXTI_DISABLE_IT
N#define __HAL_USB_EXTI_GET_FLAG                            __HAL_USB_WAKEUP_EXTI_GET_FLAG
N#define __HAL_USB_EXTI_CLEAR_FLAG                          __HAL_USB_WAKEUP_EXTI_CLEAR_FLAG
N#define __HAL_USB_EXTI_SET_RISING_EDGE_TRIGGER             __HAL_USB_WAKEUP_EXTI_ENABLE_RISING_EDGE
N#define __HAL_USB_EXTI_SET_FALLING_EDGE_TRIGGER            __HAL_USB_WAKEUP_EXTI_ENABLE_FALLING_EDGE
N#define __HAL_USB_EXTI_SET_FALLINGRISING_TRIGGER           __HAL_USB_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE
N
N#define __HAL_USB_FS_EXTI_ENABLE_IT                        __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT
N#define __HAL_USB_FS_EXTI_DISABLE_IT                       __HAL_USB_OTG_FS_WAKEUP_EXTI_DISABLE_IT
N#define __HAL_USB_FS_EXTI_GET_FLAG                         __HAL_USB_OTG_FS_WAKEUP_EXTI_GET_FLAG
N#define __HAL_USB_FS_EXTI_CLEAR_FLAG                       __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG
N#define __HAL_USB_FS_EXTI_SET_RISING_EGDE_TRIGGER          __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE
N#define __HAL_USB_FS_EXTI_SET_FALLING_EGDE_TRIGGER         __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_FALLING_EDGE
N#define __HAL_USB_FS_EXTI_SET_FALLINGRISING_TRIGGER        __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE
N#define __HAL_USB_FS_EXTI_GENERATE_SWIT                    __HAL_USB_OTG_FS_WAKEUP_EXTI_GENERATE_SWIT
N
N#define __HAL_USB_HS_EXTI_ENABLE_IT                        __HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_IT
N#define __HAL_USB_HS_EXTI_DISABLE_IT                       __HAL_USB_OTG_HS_WAKEUP_EXTI_DISABLE_IT
N#define __HAL_USB_HS_EXTI_GET_FLAG                         __HAL_USB_OTG_HS_WAKEUP_EXTI_GET_FLAG
N#define __HAL_USB_HS_EXTI_CLEAR_FLAG                       __HAL_USB_OTG_HS_WAKEUP_EXTI_CLEAR_FLAG
N#define __HAL_USB_HS_EXTI_SET_RISING_EGDE_TRIGGER          __HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_EDGE
N#define __HAL_USB_HS_EXTI_SET_FALLING_EGDE_TRIGGER         __HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_FALLING_EDGE
N#define __HAL_USB_HS_EXTI_SET_FALLINGRISING_TRIGGER        __HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE
N#define __HAL_USB_HS_EXTI_GENERATE_SWIT                    __HAL_USB_OTG_HS_WAKEUP_EXTI_GENERATE_SWIT
N
N#define HAL_PCD_ActiveRemoteWakeup                         HAL_PCD_ActivateRemoteWakeup
N#define HAL_PCD_DeActiveRemoteWakeup                       HAL_PCD_DeActivateRemoteWakeup
N
N#define HAL_PCD_SetTxFiFo                                  HAL_PCDEx_SetTxFiFo
N#define HAL_PCD_SetRxFiFo                                  HAL_PCDEx_SetRxFiFo
N/**
N  * @}
N  */
N
N/** @defgroup HAL_TIM_Aliased_Macros HAL TIM Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#define __HAL_TIM_SetICPrescalerValue   TIM_SET_ICPRESCALERVALUE
N#define __HAL_TIM_ResetICPrescalerValue TIM_RESET_ICPRESCALERVALUE
N
N#define TIM_GET_ITSTATUS                __HAL_TIM_GET_IT_SOURCE
N#define TIM_GET_CLEAR_IT                __HAL_TIM_CLEAR_IT
N
N#define __HAL_TIM_GET_ITSTATUS          __HAL_TIM_GET_IT_SOURCE
N
N#define __HAL_TIM_DIRECTION_STATUS      __HAL_TIM_IS_TIM_COUNTING_DOWN
N#define __HAL_TIM_PRESCALER             __HAL_TIM_SET_PRESCALER
N#define __HAL_TIM_SetCounter            __HAL_TIM_SET_COUNTER
N#define __HAL_TIM_GetCounter            __HAL_TIM_GET_COUNTER
N#define __HAL_TIM_SetAutoreload         __HAL_TIM_SET_AUTORELOAD
N#define __HAL_TIM_GetAutoreload         __HAL_TIM_GET_AUTORELOAD
N#define __HAL_TIM_SetClockDivision      __HAL_TIM_SET_CLOCKDIVISION
N#define __HAL_TIM_GetClockDivision      __HAL_TIM_GET_CLOCKDIVISION
N#define __HAL_TIM_SetICPrescaler        __HAL_TIM_SET_ICPRESCALER
N#define __HAL_TIM_GetICPrescaler        __HAL_TIM_GET_ICPRESCALER
N#define __HAL_TIM_SetCompare            __HAL_TIM_SET_COMPARE
N#define __HAL_TIM_GetCompare            __HAL_TIM_GET_COMPARE
N
N#define TIM_BREAKINPUTSOURCE_DFSDM  TIM_BREAKINPUTSOURCE_DFSDM1
N/**
N  * @}
N  */
N
N/** @defgroup HAL_ETH_Aliased_Macros HAL ETH Aliased Macros maintained for legacy purpose
N  * @{
N  */
N  
N#define __HAL_ETH_EXTI_ENABLE_IT                   __HAL_ETH_WAKEUP_EXTI_ENABLE_IT
N#define __HAL_ETH_EXTI_DISABLE_IT                  __HAL_ETH_WAKEUP_EXTI_DISABLE_IT
N#define __HAL_ETH_EXTI_GET_FLAG                    __HAL_ETH_WAKEUP_EXTI_GET_FLAG
N#define __HAL_ETH_EXTI_CLEAR_FLAG                  __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG
N#define __HAL_ETH_EXTI_SET_RISING_EGDE_TRIGGER     __HAL_ETH_WAKEUP_EXTI_ENABLE_RISING_EDGE_TRIGGER
N#define __HAL_ETH_EXTI_SET_FALLING_EGDE_TRIGGER    __HAL_ETH_WAKEUP_EXTI_ENABLE_FALLING_EDGE_TRIGGER
N#define __HAL_ETH_EXTI_SET_FALLINGRISING_TRIGGER   __HAL_ETH_WAKEUP_EXTI_ENABLE_FALLINGRISING_TRIGGER
N
N#define ETH_PROMISCIOUSMODE_ENABLE   ETH_PROMISCUOUS_MODE_ENABLE 
N#define ETH_PROMISCIOUSMODE_DISABLE  ETH_PROMISCUOUS_MODE_DISABLE
N#define IS_ETH_PROMISCIOUS_MODE      IS_ETH_PROMISCUOUS_MODE
N/**
N  * @}
N  */
N
N/** @defgroup HAL_LTDC_Aliased_Macros HAL LTDC Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#define __HAL_LTDC_LAYER LTDC_LAYER
N/**
N  * @}
N  */
N
N/** @defgroup HAL_SAI_Aliased_Macros HAL SAI Aliased Macros maintained for legacy purpose
N  * @{
N  */
N#define SAI_OUTPUTDRIVE_DISABLED          SAI_OUTPUTDRIVE_DISABLE
N#define SAI_OUTPUTDRIVE_ENABLED           SAI_OUTPUTDRIVE_ENABLE
N#define SAI_MASTERDIVIDER_ENABLED         SAI_MASTERDIVIDER_ENABLE
N#define SAI_MASTERDIVIDER_DISABLED        SAI_MASTERDIVIDER_DISABLE
N#define SAI_STREOMODE                     SAI_STEREOMODE
N#define SAI_FIFOStatus_Empty              SAI_FIFOSTATUS_EMPTY
N#define SAI_FIFOStatus_Less1QuarterFull   SAI_FIFOSTATUS_LESS1QUARTERFULL
N#define SAI_FIFOStatus_1QuarterFull       SAI_FIFOSTATUS_1QUARTERFULL
N#define SAI_FIFOStatus_HalfFull           SAI_FIFOSTATUS_HALFFULL
N#define SAI_FIFOStatus_3QuartersFull      SAI_FIFOSTATUS_3QUARTERFULL
N#define SAI_FIFOStatus_Full               SAI_FIFOSTATUS_FULL
N#define IS_SAI_BLOCK_MONO_STREO_MODE      IS_SAI_BLOCK_MONO_STEREO_MODE
N#define SAI_SYNCHRONOUS_EXT               SAI_SYNCHRONOUS_EXT_SAI1
N#define SAI_SYNCEXT_IN_ENABLE             SAI_SYNCEXT_OUTBLOCKA_ENABLE
N/**
N  * @}
N  */
N
N
N/** @defgroup HAL_PPP_Aliased_Macros HAL PPP Aliased Macros maintained for legacy purpose
N  * @{
N  */
N  
N/**
N  * @}
N  */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* ___STM32_HAL_LEGACY */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
L 48 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_def.h" 2
N#include <stdio.h>
L 1 "D:\Program_Files_x86\Keil_v5\ARM\ARMCC\Bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060009
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (0L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S#if !defined(__STRICT_ANSI__)
S    using ::std::asprintf;
S    using ::std::vasprintf;
S#endif
S    using ::std::__ARM_asprintf;
S    using ::std::__ARM_vasprintf;
S    using ::std::__ARM_vsnprintf;
S    using ::std::__ARM_snprintf;
S    using ::std::__ARM_vsscanf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 49 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_def.h" 2
N
N/* Exported types ------------------------------------------------------------*/
N
N/** 
N  * @brief  HAL Status structures definition  
N  */  
Ntypedef enum 
N{
N  HAL_OK       = 0x00U,
N  HAL_ERROR    = 0x01U,
N  HAL_BUSY     = 0x02U,
N  HAL_TIMEOUT  = 0x03U
N} HAL_StatusTypeDef;
N
N/** 
N  * @brief  HAL Lock structures definition  
N  */
Ntypedef enum 
N{
N  HAL_UNLOCKED = 0x00U,
N  HAL_LOCKED   = 0x01U  
N} HAL_LockTypeDef;
N
N/* Exported macro ------------------------------------------------------------*/
N
N#define UNUSED(x) ((void)(x))
N
N#define HAL_MAX_DELAY      0xFFFFFFFFU
N
N#define HAL_IS_BIT_SET(REG, BIT)         (((REG) & (BIT)) != RESET)
N#define HAL_IS_BIT_CLR(REG, BIT)         (((REG) & (BIT)) == RESET)
N
N#define __HAL_LINKDMA(__HANDLE__, __PPP_DMA_FIELD__, __DMA_HANDLE__)             \
N                        do{                                                    \
N                            (__HANDLE__)->__PPP_DMA_FIELD__ = &(__DMA_HANDLE__); \
N                            (__DMA_HANDLE__).Parent = (__HANDLE__);             \
N                          } while(0)
X#define __HAL_LINKDMA(__HANDLE__, __PPP_DMA_FIELD__, __DMA_HANDLE__)                                     do{                                                                                (__HANDLE__)->__PPP_DMA_FIELD__ = &(__DMA_HANDLE__);                             (__DMA_HANDLE__).Parent = (__HANDLE__);                                       } while(0)
N
N/** @brief Reset the Handle's State field.
N  * @param __HANDLE__: specifies the Peripheral Handle.
N  * @note  This macro can be used for the following purpose: 
N  *          - When the Handle is declared as local variable; before passing it as parameter
N  *            to HAL_PPP_Init() for the first time, it is mandatory to use this macro 
N  *            to set to 0 the Handle's "State" field.
N  *            Otherwise, "State" field may have any random value and the first time the function 
N  *            HAL_PPP_Init() is called, the low level hardware initialization will be missed
N  *            (i.e. HAL_PPP_MspInit() will not be executed).
N  *          - When there is a need to reconfigure the low level hardware: instead of calling
N  *            HAL_PPP_DeInit() then HAL_PPP_Init(), user can make a call to this macro then HAL_PPP_Init().
N  *            In this later function, when the Handle's "State" field is set to 0, it will execute the function
N  *            HAL_PPP_MspInit() which will reconfigure the low level hardware.
N  * @retval None
N  */
N#define __HAL_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = 0U)
N
N#if (USE_RTOS == 1)
X#if (0U == 1)
S                            
S  /* Reserved for future use */
S  #error "USE_RTOS should be 0 in the current HAL release"
S                            
N#else
N  #define __HAL_LOCK(__HANDLE__)                                               \
N                                do{                                            \
N                                    if((__HANDLE__)->Lock == HAL_LOCKED)       \
N                                    {                                          \
N                                       return HAL_BUSY;                        \
N                                    }                                          \
N                                    else                                       \
N                                    {                                          \
N                                       (__HANDLE__)->Lock = HAL_LOCKED;        \
N                                    }                                          \
N                                  }while (0)
X  #define __HAL_LOCK(__HANDLE__)                                                                               do{                                                                                if((__HANDLE__)->Lock == HAL_LOCKED)                                           {                                                                                 return HAL_BUSY;                                                            }                                                                              else                                                                           {                                                                                 (__HANDLE__)->Lock = HAL_LOCKED;                                            }                                                                            }while (0)
N
N  #define __HAL_UNLOCK(__HANDLE__)                                             \
N                                  do{                                          \
N                                      (__HANDLE__)->Lock = HAL_UNLOCKED;       \
N                                    }while (0)
X  #define __HAL_UNLOCK(__HANDLE__)                                                                               do{                                                                                (__HANDLE__)->Lock = HAL_UNLOCKED;                                           }while (0)
N#endif /* USE_RTOS */
N
N#if  defined ( __GNUC__ )
X#if  0L
S  #ifndef __weak
S    #define __weak   __attribute__((weak))
S  #endif /* __weak */
S  #ifndef __packed
S    #define __packed __attribute__((__packed__))
S  #endif /* __packed */
S  
S  #define __NOINLINE __attribute__ ( (noinline) ) 
S
N#endif /* __GNUC__ */
N
N
N/* Macro to get variable aligned on 4-bytes, for __ICCARM__ the directive "#pragma data_alignment=4" must be used instead */
N#if defined   (__GNUC__)        /* GNU Compiler */
X#if 0L         
S  #ifndef __ALIGN_END
S    #define __ALIGN_END    __attribute__ ((aligned (4)))
S  #endif /* __ALIGN_END */
S  #ifndef __ALIGN_BEGIN  
S    #define __ALIGN_BEGIN
S  #endif /* __ALIGN_BEGIN */
N#else
N  #ifndef __ALIGN_END
N    #define __ALIGN_END
N  #endif /* __ALIGN_END */
N  #ifndef __ALIGN_BEGIN      
N    #if defined   (__CC_ARM)      /* ARM Compiler */
X    #if 1L       
N      #define __ALIGN_BEGIN    __align(4)  
N    #elif defined (__ICCARM__)    /* IAR Compiler */
S      #define __ALIGN_BEGIN 
N    #endif /* __CC_ARM */
N  #endif /* __ALIGN_BEGIN */
N#endif /* __GNUC__ */
N
N/** 
N  * @brief  __RAM_FUNC definition
N  */ 
N#if defined ( __CC_ARM   )
X#if 1L
N/* ARM Compiler
N   ------------
N   RAM functions are defined using the toolchain options. 
N   Functions that are executed in RAM should reside in a separate source module.
N   Using the 'Options for File' dialog you can simply change the 'Code / Const' 
N   area of a module to a memory space in physical RAM.
N   Available memory areas are declared in the 'Target' tab of the 'Options for Target'
N   dialog. 
N*/
N#define __RAM_FUNC HAL_StatusTypeDef 
N
N#define __NOINLINE __attribute__ ( (noinline) ) 
N
N
N#elif defined ( __ICCARM__ )
S/* ICCARM Compiler
S   ---------------
S   RAM functions are defined using a specific toolchain keyword "__ramfunc". 
S*/
S#define __RAM_FUNC __ramfunc HAL_StatusTypeDef
S
S#define __NOINLINE _Pragma("optimize = no_inline")
S
S#elif defined   (  __GNUC__  )
S/* GNU Compiler
S   ------------
S  RAM functions are defined using a specific toolchain attribute 
S   "__attribute__((section(".RamFunc")))".
S*/
S#define __RAM_FUNC HAL_StatusTypeDef  __attribute__((section(".RamFunc")))
S
N#endif
N                                      
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* ___STM32L0xx_HAL_DEF */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
L 46 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_rcc.h" 2
N
N/** @addtogroup STM32L0xx_HAL_Driver
N  * @{
N  */
N
N/** @addtogroup RCC
N  * @{
N  */
N
N/** @addtogroup RCC_Private_Constants
N  * @{
N  */
N
N/** @defgroup RCC_Timeout RCC Timeout
N  * @{
N  */ 
N  
N/* Disable Backup domain write protection state change timeout */
N#define RCC_DBP_TIMEOUT_VALUE      (100U)       /* 100 ms */
N/* LSE state change timeout */
N#define RCC_LSE_TIMEOUT_VALUE      LSE_STARTUP_TIMEOUT
N#define CLOCKSWITCH_TIMEOUT_VALUE  (5000U)  /* 5 s    */
N#define HSE_TIMEOUT_VALUE          HSE_STARTUP_TIMEOUT
N#define MSI_TIMEOUT_VALUE          (2U)      /* 2 ms (minimum Tick + 1) */
N#define HSI_TIMEOUT_VALUE          (2U)      /* 2 ms (minimum Tick + 1) */
N#define HSI48_TIMEOUT_VALUE        (2U)      /* 2 ms (minimum Tick + 1) */
N#define LSI_TIMEOUT_VALUE          (2U)      /* 2 ms (minimum Tick + 1) */
N#define PLL_TIMEOUT_VALUE          (2U)      /* 2 ms (minimum Tick + 1) */
N#if defined(RCC_HSI48_SUPPORT)
X#if 1L
N#define HSI48_TIMEOUT_VALUE        (2U)      /* 2 ms (minimum Tick + 1) */
N#endif /* RCC_HSI48_SUPPORT */
N/**
N  * @}
N  */
N  
N
N/** @defgroup RCC_BitAddress_AliasRegion BitAddress AliasRegion
N  * @brief RCC registers bit address in the alias region
N  * @{
N  */
N#define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
N/* --- CR Register ---*/
N/* Alias word address of HSION bit */
N#define RCC_CR_OFFSET             (RCC_OFFSET + 0x00U)
N/* --- CFGR Register ---*/
N/* Alias word address of I2SSRC bit */
N#define RCC_CFGR_OFFSET           (RCC_OFFSET + 0x08U)
N/* --- CSR Register ---*/
N#define RCC_CSR_OFFSET            (RCC_OFFSET + 0x74U)
N
N/* CR register byte 3 (Bits[23:16]) base address */
N#define RCC_CR_BYTE2_ADDRESS      (0x40023802U)
N
N/* CIER register byte 0 (Bits[0:8]) base address */
N#define CIER_BYTE0_ADDRESS        ((uint32_t)(RCC_BASE + 0x10U + 0x00U))
N/**
N  * @}
N  */
N  
N
N/* Defines used for Flags */
N#define CR_REG_INDEX                     ((uint8_t)1)
N#define CSR_REG_INDEX                    ((uint8_t)2)
N#define CRRCR_REG_INDEX                  ((uint8_t)3)
N
N#define RCC_FLAG_MASK                    ((uint8_t)0x1F)
N
N/**
N  * @}
N  */
N
N/** @addtogroup RCC_Private_Macros
N  * @{
N  */
N#if defined(RCC_HSI48_SUPPORT)
X#if 1L
N#define IS_RCC_OSCILLATORTYPE(__OSCILLATOR__) (((__OSCILLATOR__) == RCC_OSCILLATORTYPE_NONE)                               || \
N                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSE)   == RCC_OSCILLATORTYPE_HSE)   || \
N                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSI)   == RCC_OSCILLATORTYPE_HSI)   || \
N                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48) || \
N                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_LSI)   == RCC_OSCILLATORTYPE_LSI)   || \
N                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_LSE)   == RCC_OSCILLATORTYPE_LSE)   || \
N                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_MSI)   == RCC_OSCILLATORTYPE_MSI))
X#define IS_RCC_OSCILLATORTYPE(__OSCILLATOR__) (((__OSCILLATOR__) == RCC_OSCILLATORTYPE_NONE)                               ||                                                (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSE)   == RCC_OSCILLATORTYPE_HSE)   ||                                                (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSI)   == RCC_OSCILLATORTYPE_HSI)   ||                                                (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48) ||                                                (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_LSI)   == RCC_OSCILLATORTYPE_LSI)   ||                                                (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_LSE)   == RCC_OSCILLATORTYPE_LSE)   ||                                                (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_MSI)   == RCC_OSCILLATORTYPE_MSI))
N
N#define IS_RCC_HSI48(__HSI48__) (((__HSI48__) == RCC_HSI48_OFF) || ((__HSI48__) == RCC_HSI48_ON))
N#else
S#define IS_RCC_OSCILLATORTYPE(__OSCILLATOR__) (((__OSCILLATOR__) == RCC_OSCILLATORTYPE_NONE)                           || \
S                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) || \
S                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) || \
S                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) || \
S                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE) || \
S                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI))
X#define IS_RCC_OSCILLATORTYPE(__OSCILLATOR__) (((__OSCILLATOR__) == RCC_OSCILLATORTYPE_NONE)                           ||                                                (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) ||                                                (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) ||                                                (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) ||                                                (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE) ||                                                (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI))
N#endif /* RCC_HSI48_SUPPORT */
N#define IS_RCC_PLLSOURCE(__SOURCE__) (((__SOURCE__) == RCC_PLLSOURCE_HSI) || \
N                                      ((__SOURCE__) == RCC_PLLSOURCE_HSE))
X#define IS_RCC_PLLSOURCE(__SOURCE__) (((__SOURCE__) == RCC_PLLSOURCE_HSI) ||                                       ((__SOURCE__) == RCC_PLLSOURCE_HSE))
N#define IS_RCC_HSE(__HSE__) (((__HSE__) == RCC_HSE_OFF) || ((__HSE__) == RCC_HSE_ON) || \
N                             ((__HSE__) == RCC_HSE_BYPASS))
X#define IS_RCC_HSE(__HSE__) (((__HSE__) == RCC_HSE_OFF) || ((__HSE__) == RCC_HSE_ON) ||                              ((__HSE__) == RCC_HSE_BYPASS))
N#define IS_RCC_LSE(__LSE__) (((__LSE__) == RCC_LSE_OFF) || ((__LSE__) == RCC_LSE_ON) || \
N                             ((__LSE__) == RCC_LSE_BYPASS))
X#define IS_RCC_LSE(__LSE__) (((__LSE__) == RCC_LSE_OFF) || ((__LSE__) == RCC_LSE_ON) ||                              ((__LSE__) == RCC_LSE_BYPASS))
N#if defined(RCC_CR_HSIOUTEN)
X#if 0L
S#define IS_RCC_HSI(__HSI__) (((__HSI__) == RCC_HSI_OFF) || ((__HSI__) == RCC_HSI_ON) || \
S                             ((__HSI__) == RCC_HSI_DIV4) || ((__HSI__) == RCC_HSI_OUTEN ))      
X#define IS_RCC_HSI(__HSI__) (((__HSI__) == RCC_HSI_OFF) || ((__HSI__) == RCC_HSI_ON) ||                              ((__HSI__) == RCC_HSI_DIV4) || ((__HSI__) == RCC_HSI_OUTEN ))      
N#else
N#define IS_RCC_HSI(__HSI__) (((__HSI__) == RCC_HSI_OFF) || ((__HSI__) == RCC_HSI_ON) || \
N                             ((__HSI__) == RCC_HSI_DIV4))
X#define IS_RCC_HSI(__HSI__) (((__HSI__) == RCC_HSI_OFF) || ((__HSI__) == RCC_HSI_ON) ||                              ((__HSI__) == RCC_HSI_DIV4))
N#endif /* RCC_CR_HSIOUTEN */
N#define IS_RCC_CALIBRATION_VALUE(__VALUE__) ((__VALUE__) <= 0x1F)
N#define IS_RCC_MSICALIBRATION_VALUE(__VALUE__) ((__VALUE__) <= 0xFF)
N#define IS_RCC_MSI_CLOCK_RANGE(__RANGE__)  (((__RANGE__) == RCC_MSIRANGE_0) || \
N                                            ((__RANGE__) == RCC_MSIRANGE_1) || \
N                                            ((__RANGE__) == RCC_MSIRANGE_2) || \
N                                            ((__RANGE__) == RCC_MSIRANGE_3) || \
N                                            ((__RANGE__) == RCC_MSIRANGE_4) || \
N                                            ((__RANGE__) == RCC_MSIRANGE_5) || \
N                                            ((__RANGE__) == RCC_MSIRANGE_6))
X#define IS_RCC_MSI_CLOCK_RANGE(__RANGE__)  (((__RANGE__) == RCC_MSIRANGE_0) ||                                             ((__RANGE__) == RCC_MSIRANGE_1) ||                                             ((__RANGE__) == RCC_MSIRANGE_2) ||                                             ((__RANGE__) == RCC_MSIRANGE_3) ||                                             ((__RANGE__) == RCC_MSIRANGE_4) ||                                             ((__RANGE__) == RCC_MSIRANGE_5) ||                                             ((__RANGE__) == RCC_MSIRANGE_6))
N#define IS_RCC_LSI(__LSI__) (((__LSI__) == RCC_LSI_OFF) || ((__LSI__) == RCC_LSI_ON))
N#define IS_RCC_MSI(__MSI__) (((__MSI__) == RCC_MSI_OFF) || ((__MSI__) == RCC_MSI_ON))
N
N#define IS_RCC_PLL(__PLL__) (((__PLL__) == RCC_PLL_NONE) || ((__PLL__) == RCC_PLL_OFF) || \
N                             ((__PLL__) == RCC_PLL_ON))
X#define IS_RCC_PLL(__PLL__) (((__PLL__) == RCC_PLL_NONE) || ((__PLL__) == RCC_PLL_OFF) ||                              ((__PLL__) == RCC_PLL_ON))
N#define IS_RCC_PLL_DIV(__DIV__) (((__DIV__) == RCC_PLL_DIV2) || \
N                                 ((__DIV__) == RCC_PLL_DIV3) || ((__DIV__) == RCC_PLL_DIV4))
X#define IS_RCC_PLL_DIV(__DIV__) (((__DIV__) == RCC_PLL_DIV2) ||                                  ((__DIV__) == RCC_PLL_DIV3) || ((__DIV__) == RCC_PLL_DIV4))
N
N#define IS_RCC_PLL_MUL(__MUL__) (((__MUL__) == RCC_PLL_MUL3)  || ((__MUL__) == RCC_PLL_MUL4)  || \
N                                 ((__MUL__) == RCC_PLL_MUL6)  || ((__MUL__) == RCC_PLL_MUL8)  || \
N                                 ((__MUL__) == RCC_PLL_MUL12) || ((__MUL__) == RCC_PLL_MUL16) || \
N                                 ((__MUL__) == RCC_PLL_MUL24) || ((__MUL__) == RCC_PLL_MUL32) || \
N                                 ((__MUL__) == RCC_PLL_MUL48))
X#define IS_RCC_PLL_MUL(__MUL__) (((__MUL__) == RCC_PLL_MUL3)  || ((__MUL__) == RCC_PLL_MUL4)  ||                                  ((__MUL__) == RCC_PLL_MUL6)  || ((__MUL__) == RCC_PLL_MUL8)  ||                                  ((__MUL__) == RCC_PLL_MUL12) || ((__MUL__) == RCC_PLL_MUL16) ||                                  ((__MUL__) == RCC_PLL_MUL24) || ((__MUL__) == RCC_PLL_MUL32) ||                                  ((__MUL__) == RCC_PLL_MUL48))
N#define IS_RCC_CLOCKTYPE(CLK) ((((CLK) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) || \
N                               (((CLK) & RCC_CLOCKTYPE_HCLK)   == RCC_CLOCKTYPE_HCLK)   || \
N                               (((CLK) & RCC_CLOCKTYPE_PCLK1)  == RCC_CLOCKTYPE_PCLK1)  || \
N                               (((CLK) & RCC_CLOCKTYPE_PCLK2)  == RCC_CLOCKTYPE_PCLK2))
X#define IS_RCC_CLOCKTYPE(CLK) ((((CLK) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) ||                                (((CLK) & RCC_CLOCKTYPE_HCLK)   == RCC_CLOCKTYPE_HCLK)   ||                                (((CLK) & RCC_CLOCKTYPE_PCLK1)  == RCC_CLOCKTYPE_PCLK1)  ||                                (((CLK) & RCC_CLOCKTYPE_PCLK2)  == RCC_CLOCKTYPE_PCLK2))
N#define IS_RCC_SYSCLKSOURCE(__SOURCE__) (((__SOURCE__) == RCC_SYSCLKSOURCE_MSI) || \
N                                         ((__SOURCE__) == RCC_SYSCLKSOURCE_HSI) || \
N                                         ((__SOURCE__) == RCC_SYSCLKSOURCE_HSE) || \
N                                         ((__SOURCE__) == RCC_SYSCLKSOURCE_PLLCLK))
X#define IS_RCC_SYSCLKSOURCE(__SOURCE__) (((__SOURCE__) == RCC_SYSCLKSOURCE_MSI) ||                                          ((__SOURCE__) == RCC_SYSCLKSOURCE_HSI) ||                                          ((__SOURCE__) == RCC_SYSCLKSOURCE_HSE) ||                                          ((__SOURCE__) == RCC_SYSCLKSOURCE_PLLCLK))
N#define IS_RCC_SYSCLKSOURCE_STATUS(__SOURCE__) (((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_MSI) || \
N                                                ((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_HSI) || \
N                                                ((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_HSE) || \
N                                                ((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_PLLCLK))
X#define IS_RCC_SYSCLKSOURCE_STATUS(__SOURCE__) (((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_MSI) ||                                                 ((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_HSI) ||                                                 ((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_HSE) ||                                                 ((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_PLLCLK))
N#define IS_RCC_HCLK(__HCLK__) (((__HCLK__) == RCC_SYSCLK_DIV1) || ((__HCLK__) == RCC_SYSCLK_DIV2) || \
N                               ((__HCLK__) == RCC_SYSCLK_DIV4) || ((__HCLK__) == RCC_SYSCLK_DIV8) || \
N                               ((__HCLK__) == RCC_SYSCLK_DIV16) || ((__HCLK__) == RCC_SYSCLK_DIV64) || \
N                               ((__HCLK__) == RCC_SYSCLK_DIV128) || ((__HCLK__) == RCC_SYSCLK_DIV256) || \
N                               ((__HCLK__) == RCC_SYSCLK_DIV512))
X#define IS_RCC_HCLK(__HCLK__) (((__HCLK__) == RCC_SYSCLK_DIV1) || ((__HCLK__) == RCC_SYSCLK_DIV2) ||                                ((__HCLK__) == RCC_SYSCLK_DIV4) || ((__HCLK__) == RCC_SYSCLK_DIV8) ||                                ((__HCLK__) == RCC_SYSCLK_DIV16) || ((__HCLK__) == RCC_SYSCLK_DIV64) ||                                ((__HCLK__) == RCC_SYSCLK_DIV128) || ((__HCLK__) == RCC_SYSCLK_DIV256) ||                                ((__HCLK__) == RCC_SYSCLK_DIV512))
N#define IS_RCC_PCLK(__PCLK__) (((__PCLK__) == RCC_HCLK_DIV1) || ((__PCLK__) == RCC_HCLK_DIV2) || \
N                               ((__PCLK__) == RCC_HCLK_DIV4) || ((__PCLK__) == RCC_HCLK_DIV8) || \
N                               ((__PCLK__) == RCC_HCLK_DIV16))
X#define IS_RCC_PCLK(__PCLK__) (((__PCLK__) == RCC_HCLK_DIV1) || ((__PCLK__) == RCC_HCLK_DIV2) ||                                ((__PCLK__) == RCC_HCLK_DIV4) || ((__PCLK__) == RCC_HCLK_DIV8) ||                                ((__PCLK__) == RCC_HCLK_DIV16))
N#if  defined(STM32L031xx) || defined(STM32L041xx) || defined(STM32L073xx) || defined(STM32L083xx) \
N  || defined(STM32L072xx) || defined(STM32L082xx) || defined(STM32L071xx) || defined(STM32L081xx) 
X#if  0L || 0L || 0L || 0L   || 0L || 0L || 0L || 0L 
S#define IS_RCC_MCO(__MCO__) (((__MCO__) == RCC_MCO1) || ((__MCO__) == RCC_MCO2) || ((__MCO__) == RCC_MCO3))
N#else
N#define IS_RCC_MCO(__MCO__) (((__MCO__) == RCC_MCO1) || ((__MCO__) == RCC_MCO2))
N
N#endif
N#define IS_RCC_MCODIV(__DIV__) (((__DIV__) == RCC_MCODIV_1) || ((__DIV__) == RCC_MCODIV_2) || \
N                                ((__DIV__) == RCC_MCODIV_4) || ((__DIV__) == RCC_MCODIV_8) || \
N                                ((__DIV__) == RCC_MCODIV_16)) 
X#define IS_RCC_MCODIV(__DIV__) (((__DIV__) == RCC_MCODIV_1) || ((__DIV__) == RCC_MCODIV_2) ||                                 ((__DIV__) == RCC_MCODIV_4) || ((__DIV__) == RCC_MCODIV_8) ||                                 ((__DIV__) == RCC_MCODIV_16)) 
N#if defined(RCC_CFGR_MCOSEL_HSI48)
X#if 1L
N#define IS_RCC_MCO1SOURCE(__SOURCE__) (((__SOURCE__) == RCC_MCO1SOURCE_NOCLOCK) || ((__SOURCE__) == RCC_MCO1SOURCE_SYSCLK) || \
N                                      ((__SOURCE__) == RCC_MCO1SOURCE_HSI)  || ((__SOURCE__) == RCC_MCO1SOURCE_MSI) || \
N                                      ((__SOURCE__) == RCC_MCO1SOURCE_HSE)  || ((__SOURCE__) == RCC_MCO1SOURCE_PLLCLK) || \
N                                      ((__SOURCE__) == RCC_MCO1SOURCE_LSI) || ((__SOURCE__) == RCC_MCO1SOURCE_LSE) || \
N                                      ((__SOURCE__) == RCC_MCO1SOURCE_HSI48))
X#define IS_RCC_MCO1SOURCE(__SOURCE__) (((__SOURCE__) == RCC_MCO1SOURCE_NOCLOCK) || ((__SOURCE__) == RCC_MCO1SOURCE_SYSCLK) ||                                       ((__SOURCE__) == RCC_MCO1SOURCE_HSI)  || ((__SOURCE__) == RCC_MCO1SOURCE_MSI) ||                                       ((__SOURCE__) == RCC_MCO1SOURCE_HSE)  || ((__SOURCE__) == RCC_MCO1SOURCE_PLLCLK) ||                                       ((__SOURCE__) == RCC_MCO1SOURCE_LSI) || ((__SOURCE__) == RCC_MCO1SOURCE_LSE) ||                                       ((__SOURCE__) == RCC_MCO1SOURCE_HSI48))
N#else
S#define IS_RCC_MCO1SOURCE(__SOURCE__) (((__SOURCE__) == RCC_MCO1SOURCE_NOCLOCK) || ((__SOURCE__) == RCC_MCO1SOURCE_SYSCLK) || \
S                                      ((__SOURCE__) == RCC_MCO1SOURCE_HSI)  || ((__SOURCE__) == RCC_MCO1SOURCE_MSI) || \
S                                      ((__SOURCE__) == RCC_MCO1SOURCE_HSE)  || ((__SOURCE__) == RCC_MCO1SOURCE_PLLCLK) || \
S                                      ((__SOURCE__) == RCC_MCO1SOURCE_LSI) || ((__SOURCE__) == RCC_MCO1SOURCE_LSE))
X#define IS_RCC_MCO1SOURCE(__SOURCE__) (((__SOURCE__) == RCC_MCO1SOURCE_NOCLOCK) || ((__SOURCE__) == RCC_MCO1SOURCE_SYSCLK) ||                                       ((__SOURCE__) == RCC_MCO1SOURCE_HSI)  || ((__SOURCE__) == RCC_MCO1SOURCE_MSI) ||                                       ((__SOURCE__) == RCC_MCO1SOURCE_HSE)  || ((__SOURCE__) == RCC_MCO1SOURCE_PLLCLK) ||                                       ((__SOURCE__) == RCC_MCO1SOURCE_LSI) || ((__SOURCE__) == RCC_MCO1SOURCE_LSE))
N#endif /* RCC_CFGR_MCOSEL_HSI48 */
N#define IS_RCC_RTCCLKSOURCE(__SOURCE__) (((__SOURCE__) == RCC_RTCCLKSOURCE_NO_CLK)   || \
N                                         ((__SOURCE__) == RCC_RTCCLKSOURCE_LSE)      || \
N                                         ((__SOURCE__) == RCC_RTCCLKSOURCE_LSI)      || \
N                                         ((__SOURCE__) == RCC_RTCCLKSOURCE_HSE_DIV2) || \
N                                         ((__SOURCE__) == RCC_RTCCLKSOURCE_HSE_DIV4) || \
N                                         ((__SOURCE__) == RCC_RTCCLKSOURCE_HSE_DIV8) || \
N                                         ((__SOURCE__) == RCC_RTCCLKSOURCE_HSE_DIV16))
X#define IS_RCC_RTCCLKSOURCE(__SOURCE__) (((__SOURCE__) == RCC_RTCCLKSOURCE_NO_CLK)   ||                                          ((__SOURCE__) == RCC_RTCCLKSOURCE_LSE)      ||                                          ((__SOURCE__) == RCC_RTCCLKSOURCE_LSI)      ||                                          ((__SOURCE__) == RCC_RTCCLKSOURCE_HSE_DIV2) ||                                          ((__SOURCE__) == RCC_RTCCLKSOURCE_HSE_DIV4) ||                                          ((__SOURCE__) == RCC_RTCCLKSOURCE_HSE_DIV8) ||                                          ((__SOURCE__) == RCC_RTCCLKSOURCE_HSE_DIV16))
N
N/**
N  * @}
N  */
N
N/* Exported types ------------------------------------------------------------*/
N
N/** @defgroup RCC_Exported_Types RCC Exported Types
N  * @{
N  */
N
N/** 
N  * @brief  RCC PLL configuration structure definition  
N  */
Ntypedef struct
N{
N  uint32_t PLLState;      /*!< PLLState: The new state of the PLL.
N                              This parameter can be a value of @ref RCC_PLL_Config */
N
N  uint32_t PLLSource;     /*!< PLLSource: PLL entry clock source.
N                              This parameter must be a value of @ref RCC_PLL_Clock_Source */          
N
N  uint32_t PLLMUL;        /*!< PLLMUL: Multiplication factor for PLL VCO input clock
N                              This parameter must be a value of @ref RCC_PLL_Multiplication_Factor*/       
N
N  uint32_t PLLDIV;        /*!< PLLDIV: Division factor for PLL VCO input clock
N                              This parameter must be a value of @ref RCC_PLL_Division_Factor*/       
N} RCC_PLLInitTypeDef;
N   
N/**
N  * @brief  RCC Internal/External Oscillator (HSE, HSI, LSE and LSI) configuration structure definition  
N  */
Ntypedef struct
N{
N  uint32_t OscillatorType;        /*!< The oscillators to be configured.
N                                       This parameter can be a value of @ref RCC_Oscillator_Type */
N
N  uint32_t HSEState;              /*!< The new state of the HSE.
N                                       This parameter can be a value of @ref RCC_HSE_Config */
N
N  uint32_t LSEState;              /*!< The new state of the LSE.
N                                       This parameter can be a value of @ref RCC_LSE_Config */
N
N  uint32_t HSIState;              /*!< The new state of the HSI.
N                                       This parameter can be a value of @ref RCC_HSI_Config */
N
N  uint32_t HSICalibrationValue;   /*!< The HSI calibration trimming value (default is RCC_HSICALIBRATION_DEFAULT).
N                                       This parameter must be a number between Min_Data = 0x00 and Max_Data = 0x1F */
N
N  uint32_t LSIState;              /*!< The new state of the LSI.
N                                       This parameter can be a value of @ref RCC_LSI_Config */
N
N#if defined(RCC_HSI48_SUPPORT)
X#if 1L
N  uint32_t HSI48State;            /*!< The new state of the HSI48.
N                                       This parameter can be a value of @ref RCC_HSI48_Config */
N
N#endif /* RCC_HSI48_SUPPORT */
N  uint32_t MSIState;              /*!< The new state of the MSI.
N                                       This parameter can be a value of @ref RCC_MSI_Config */
N
N  uint32_t MSICalibrationValue;   /*!< The MSI calibration trimming value. (default is RCC_MSICALIBRATION_DEFAULT).
N                                       This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF */
N
N  uint32_t MSIClockRange;         /*!< The MSI  frequency  range.
N                                        This parameter can be a value of @ref RCC_MSI_Clock_Range */
N
N  RCC_PLLInitTypeDef PLL;         /*!< PLL structure parameters */     
N
N} RCC_OscInitTypeDef;
N
N/**
N  * @brief  RCC System, AHB and APB busses clock configuration structure definition  
N  */
Ntypedef struct
N{
N  uint32_t ClockType;             /*!< The clock to be configured.
N                                       This parameter can be a value of @ref RCC_System_Clock_Type */
N
N  uint32_t SYSCLKSource;          /*!< The clock source (SYSCLKS) used as system clock.
N                                       This parameter can be a value of @ref RCC_System_Clock_Source */
N
N  uint32_t AHBCLKDivider;         /*!< The AHB clock (HCLK) divider. This clock is derived from the system clock (SYSCLK).
N                                       This parameter can be a value of @ref RCC_AHB_Clock_Source */
N
N  uint32_t APB1CLKDivider;        /*!< The APB1 clock (PCLK1) divider. This clock is derived from the AHB clock (HCLK).
N                                       This parameter can be a value of @ref RCC_APB1_APB2_Clock_Source */
N
N  uint32_t APB2CLKDivider;        /*!< The APB2 clock (PCLK2) divider. This clock is derived from the AHB clock (HCLK).
N                                       This parameter can be a value of @ref RCC_APB1_APB2_Clock_Source */
N} RCC_ClkInitTypeDef;
N
N/**
N  * @}
N  */
N
N/* Exported constants --------------------------------------------------------*/
N/** @defgroup RCC_Exported_Constants RCC Exported Constants
N  * @{
N  */
N
N/** @defgroup RCC_PLL_Clock_Source PLL Clock Source
N  * @{
N  */
N
N#define RCC_PLLSOURCE_HSI           RCC_CFGR_PLLSRC_HSI        /*!< HSI clock selected as PLL entry clock source */
N#define RCC_PLLSOURCE_HSE           RCC_CFGR_PLLSRC_HSE        /*!< HSE clock selected as PLL entry clock source */
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_Oscillator_Type Oscillator Type
N  * @{
N  */
N#define RCC_OSCILLATORTYPE_NONE            ((uint32_t)0x00000000)
N#define RCC_OSCILLATORTYPE_HSE             ((uint32_t)0x00000001)
N#define RCC_OSCILLATORTYPE_HSI             ((uint32_t)0x00000002)
N#define RCC_OSCILLATORTYPE_LSE             ((uint32_t)0x00000004)
N#define RCC_OSCILLATORTYPE_LSI             ((uint32_t)0x00000008)
N#define RCC_OSCILLATORTYPE_MSI             ((uint32_t)0x00000010)
N#if defined(RCC_HSI48_SUPPORT)
X#if 1L
N#define RCC_OSCILLATORTYPE_HSI48           ((uint32_t)0x00000020)
N#endif /* RCC_HSI48_SUPPORT */
N/**
N  * @}
N  */
N
N/** @defgroup RCC_HSE_Config HSE Config
N  * @{
N  */
N#define RCC_HSE_OFF                      ((uint32_t)0x00000000)                     /*!< HSE clock deactivation */
N#define RCC_HSE_ON                       RCC_CR_HSEON                               /*!< HSE clock activation */
N#define RCC_HSE_BYPASS                   ((uint32_t)(RCC_CR_HSEBYP | RCC_CR_HSEON)) /*!< External clock source for HSE clock */
N/**
N  * @}
N  */
N
N/** @defgroup RCC_LSE_Config LSE Config
N  * @{
N  */
N#define RCC_LSE_OFF                      ((uint32_t)0x00000000)                       /*!< LSE clock deactivation */
N#define RCC_LSE_ON                       RCC_CSR_LSEON                                /*!< LSE clock activation */
N#define RCC_LSE_BYPASS                   ((uint32_t)(RCC_CSR_LSEBYP | RCC_CSR_LSEON)) /*!< External clock source for LSE clock */
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_HSI_Config HSI Config
N  * @{
N  */
N#define RCC_HSI_OFF                      ((uint32_t)0x00000000)           /*!< HSI clock deactivation */
N#define RCC_HSI_ON                       RCC_CR_HSION                     /*!< HSI clock activation */
N#define RCC_HSI_DIV4                     (RCC_CR_HSIDIVEN | RCC_CR_HSION) /*!< HSI_DIV4 clock activation */
N#if defined(RCC_CR_HSIOUTEN)
X#if 0L
S#define RCC_HSI_OUTEN                    RCC_CR_HSIOUTEN                  /*!< HSI_OUTEN clock activation */
N#endif /* RCC_CR_HSIOUTEN */
N
N#define RCC_HSICALIBRATION_DEFAULT       ((uint32_t)0x10)         /* Default HSI calibration trimming value */
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_MSI_Clock_Range MSI Clock Range
N  * @{
N  */
N
N#define RCC_MSIRANGE_0                   RCC_ICSCR_MSIRANGE_0 /*!< MSI = 65.536 KHz  */
N#define RCC_MSIRANGE_1                   RCC_ICSCR_MSIRANGE_1 /*!< MSI = 131.072 KHz */
N#define RCC_MSIRANGE_2                   RCC_ICSCR_MSIRANGE_2 /*!< MSI = 262.144 KHz */
N#define RCC_MSIRANGE_3                   RCC_ICSCR_MSIRANGE_3 /*!< MSI = 524.288 KHz */
N#define RCC_MSIRANGE_4                   RCC_ICSCR_MSIRANGE_4 /*!< MSI = 1.048 MHz   */
N#define RCC_MSIRANGE_5                   RCC_ICSCR_MSIRANGE_5 /*!< MSI = 2.097 MHz   */
N#define RCC_MSIRANGE_6                   RCC_ICSCR_MSIRANGE_6 /*!< MSI = 4.194 MHz   */
N
N/**
N  * @}
N  */
N  
N/** @defgroup RCC_LSI_Config LSI Config
N  * @{
N  */
N#define RCC_LSI_OFF                      ((uint32_t)0x00000000)   /*!< LSI clock deactivation */
N#define RCC_LSI_ON                       RCC_CSR_LSION            /*!< LSI clock activation */
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_MSI_Config MSI Config
N  * @{
N  */
N#define RCC_MSI_OFF                      ((uint32_t)0x00000000)
N#define RCC_MSI_ON                       ((uint32_t)0x00000001)
N
N#define RCC_MSICALIBRATION_DEFAULT       ((uint32_t)0x00000000U)   /* Default MSI calibration trimming value */
N
N/**
N  * @}
N  */
N
N#if defined(RCC_HSI48_SUPPORT)
X#if 1L
N/** @defgroup RCC_HSI48_Config HSI48 Config
N  * @{
N  */
N#define RCC_HSI48_OFF               ((uint8_t)0x00)
N#define RCC_HSI48_ON                ((uint8_t)0x01)
N
N/**
N  * @}
N  */
N#endif /* RCC_HSI48_SUPPORT */
N
N/** @defgroup RCC_PLL_Config PLL Config
N  * @{
N  */
N#define RCC_PLL_NONE                      ((uint32_t)0x00000000)  /*!< PLL is not configured */
N#define RCC_PLL_OFF                       ((uint32_t)0x00000001)  /*!< PLL deactivation */
N#define RCC_PLL_ON                        ((uint32_t)0x00000002)  /*!< PLL activation */
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_System_Clock_Type System Clock Type
N  * @{
N  */
N#define RCC_CLOCKTYPE_SYSCLK             ((uint32_t)0x00000001) /*!< SYSCLK to configure */
N#define RCC_CLOCKTYPE_HCLK               ((uint32_t)0x00000002) /*!< HCLK to configure */
N#define RCC_CLOCKTYPE_PCLK1              ((uint32_t)0x00000004) /*!< PCLK1 to configure */
N#define RCC_CLOCKTYPE_PCLK2              ((uint32_t)0x00000008) /*!< PCLK2 to configure */
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_System_Clock_Source System Clock Source
N  * @{
N  */
N#define RCC_SYSCLKSOURCE_MSI             RCC_CFGR_SW_MSI /*!< MSI selected as system clock */
N#define RCC_SYSCLKSOURCE_HSI             RCC_CFGR_SW_HSI /*!< HSI selected as system clock */
N#define RCC_SYSCLKSOURCE_HSE             RCC_CFGR_SW_HSE /*!< HSE selected as system clock */
N#define RCC_SYSCLKSOURCE_PLLCLK          RCC_CFGR_SW_PLL /*!< PLL selected as system clock */
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_System_Clock_Source_Status System Clock Source Status
N  * @{
N  */
N#define RCC_SYSCLKSOURCE_STATUS_MSI      RCC_CFGR_SWS_MSI            /*!< MSI used as system clock */
N#define RCC_SYSCLKSOURCE_STATUS_HSI      RCC_CFGR_SWS_HSI            /*!< HSI used as system clock */
N#define RCC_SYSCLKSOURCE_STATUS_HSE      RCC_CFGR_SWS_HSE            /*!< HSE used as system clock */
N#define RCC_SYSCLKSOURCE_STATUS_PLLCLK   RCC_CFGR_SWS_PLL            /*!< PLL used as system clock */
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_AHB_Clock_Source AHB Clock Source
N  * @{
N  */
N#define RCC_SYSCLK_DIV1                  RCC_CFGR_HPRE_DIV1   /*!< SYSCLK not divided */
N#define RCC_SYSCLK_DIV2                  RCC_CFGR_HPRE_DIV2   /*!< SYSCLK divided by 2 */
N#define RCC_SYSCLK_DIV4                  RCC_CFGR_HPRE_DIV4   /*!< SYSCLK divided by 4 */
N#define RCC_SYSCLK_DIV8                  RCC_CFGR_HPRE_DIV8   /*!< SYSCLK divided by 8 */
N#define RCC_SYSCLK_DIV16                 RCC_CFGR_HPRE_DIV16  /*!< SYSCLK divided by 16 */
N#define RCC_SYSCLK_DIV64                 RCC_CFGR_HPRE_DIV64  /*!< SYSCLK divided by 64 */
N#define RCC_SYSCLK_DIV128                RCC_CFGR_HPRE_DIV128 /*!< SYSCLK divided by 128 */
N#define RCC_SYSCLK_DIV256                RCC_CFGR_HPRE_DIV256 /*!< SYSCLK divided by 256 */
N#define RCC_SYSCLK_DIV512                RCC_CFGR_HPRE_DIV512 /*!< SYSCLK divided by 512 */
N
N/**
N  * @}
N  */
N  
N/** @defgroup RCC_APB1_APB2_Clock_Source APB1 APB2 Clock Source
N  * @{
N  */
N#define RCC_HCLK_DIV1                    RCC_CFGR_PPRE1_DIV1  /*!< HCLK not divided */
N#define RCC_HCLK_DIV2                    RCC_CFGR_PPRE1_DIV2  /*!< HCLK divided by 2 */
N#define RCC_HCLK_DIV4                    RCC_CFGR_PPRE1_DIV4  /*!< HCLK divided by 4 */
N#define RCC_HCLK_DIV8                    RCC_CFGR_PPRE1_DIV8  /*!< HCLK divided by 8 */
N#define RCC_HCLK_DIV16                   RCC_CFGR_PPRE1_DIV16 /*!< HCLK divided by 16 */
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_HAL_EC_RTC_HSE_DIV RTC HSE Prescaler
N  * @{
N  */
N#define RCC_RTC_HSE_DIV_2               (uint32_t)0x00000000U /*!< HSE is divided by 2 for RTC clock  */
N#define RCC_RTC_HSE_DIV_4               RCC_CR_RTCPRE_0       /*!< HSE is divided by 4 for RTC clock  */
N#define RCC_RTC_HSE_DIV_8               RCC_CR_RTCPRE_1       /*!< HSE is divided by 8 for RTC clock  */
N#define RCC_RTC_HSE_DIV_16              RCC_CR_RTCPRE         /*!< HSE is divided by 16 for RTC clock */
N/**
N  * @}
N  */
N
N/** @defgroup RCC_RTC_LCD_Clock_Source RTC LCD Clock Source
N  * @{
N  */
N#define RCC_RTCCLKSOURCE_NO_CLK          ((uint32_t)0x00000000)                 /*!< No clock */
N#define RCC_RTCCLKSOURCE_LSE             RCC_CSR_RTCSEL_LSE                  /*!< LSE oscillator clock used as RTC clock */
N#define RCC_RTCCLKSOURCE_LSI             RCC_CSR_RTCSEL_LSI                  /*!< LSI oscillator clock used as RTC clock */
N#define RCC_RTCCLKSOURCE_HSE_DIVX        RCC_CSR_RTCSEL_HSE                         /*!< HSE oscillator clock divided by X used as RTC clock */
N#define RCC_RTCCLKSOURCE_HSE_DIV2        (RCC_RTC_HSE_DIV_2  | RCC_CSR_RTCSEL_HSE)  /*!< HSE oscillator clock divided by 2 used as RTC clock */
N#define RCC_RTCCLKSOURCE_HSE_DIV4        (RCC_RTC_HSE_DIV_4  | RCC_CSR_RTCSEL_HSE)  /*!< HSE oscillator clock divided by 4 used as RTC clock */
N#define RCC_RTCCLKSOURCE_HSE_DIV8        (RCC_RTC_HSE_DIV_8  | RCC_CSR_RTCSEL_HSE)  /*!< HSE oscillator clock divided by 8 used as RTC clock */
N#define RCC_RTCCLKSOURCE_HSE_DIV16       (RCC_RTC_HSE_DIV_16 | RCC_CSR_RTCSEL_HSE)  /*!< HSE oscillator clock divided by 16 used as RTC clock */
N/**
N  * @}
N  */
N
N/** @defgroup RCC_PLL_Division_Factor PLL Division Factor
N  * @{
N  */
N
N#define RCC_PLL_DIV2                    RCC_CFGR_PLLDIV2
N#define RCC_PLL_DIV3                    RCC_CFGR_PLLDIV3
N#define RCC_PLL_DIV4                    RCC_CFGR_PLLDIV4
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_PLL_Multiplication_Factor PLL Multiplication Factor
N  * @{
N  */
N
N#define RCC_PLL_MUL3                    RCC_CFGR_PLLMUL3
N#define RCC_PLL_MUL4                    RCC_CFGR_PLLMUL4
N#define RCC_PLL_MUL6                    RCC_CFGR_PLLMUL6
N#define RCC_PLL_MUL8                    RCC_CFGR_PLLMUL8
N#define RCC_PLL_MUL12                   RCC_CFGR_PLLMUL12
N#define RCC_PLL_MUL16                   RCC_CFGR_PLLMUL16
N#define RCC_PLL_MUL24                   RCC_CFGR_PLLMUL24
N#define RCC_PLL_MUL32                   RCC_CFGR_PLLMUL32 
N#define RCC_PLL_MUL48                   RCC_CFGR_PLLMUL48
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_MCO_Index MCO Index
N  * @{
N  */
N#define RCC_MCO1                         ((uint32_t)0x00000000)
N#define RCC_MCO2                         ((uint32_t)0x00000001)
N#if  defined(STM32L031xx) || defined(STM32L041xx) || defined(STM32L073xx) || defined(STM32L083xx) \
N  || defined(STM32L072xx) || defined(STM32L082xx) || defined(STM32L071xx) || defined(STM32L081xx) 
X#if  0L || 0L || 0L || 0L   || 0L || 0L || 0L || 0L 
S#define RCC_MCO3                         ((uint32_t)0x00000002)
N#endif
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_MCOx_Clock_Prescaler MCO Clock Prescaler
N  * @{
N  */
N#define RCC_MCODIV_1                    RCC_CFGR_MCO_PRE_1
N#define RCC_MCODIV_2                    RCC_CFGR_MCO_PRE_2
N#define RCC_MCODIV_4                    RCC_CFGR_MCO_PRE_4
N#define RCC_MCODIV_8                    RCC_CFGR_MCO_PRE_8
N#define RCC_MCODIV_16                   RCC_CFGR_MCO_PRE_16
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_MCO1_Clock_Source MCO1 Clock Source
N  * @{
N  */
N#define RCC_MCO1SOURCE_NOCLOCK           RCC_CFGR_MCO_NOCLOCK
N#define RCC_MCO1SOURCE_SYSCLK            RCC_CFGR_MCO_SYSCLK
N#define RCC_MCO1SOURCE_MSI               RCC_CFGR_MCO_MSI
N#define RCC_MCO1SOURCE_HSI               RCC_CFGR_MCO_HSI
N#define RCC_MCO1SOURCE_LSE               RCC_CFGR_MCO_LSE
N#define RCC_MCO1SOURCE_LSI               RCC_CFGR_MCO_LSI
N#define RCC_MCO1SOURCE_HSE               RCC_CFGR_MCO_HSE
N#define RCC_MCO1SOURCE_PLLCLK            RCC_CFGR_MCO_PLL
N#if defined(RCC_CFGR_MCOSEL_HSI48)
X#if 1L
N#define RCC_MCO1SOURCE_HSI48             RCC_CFGR_MCO_HSI48
N#endif /* RCC_CFGR_MCOSEL_HSI48 */
N
N/**
N  * @}
N  */
N/** @defgroup RCC_Interrupt Interrupts
N  * @{
N  */
N#define RCC_IT_LSIRDY                    RCC_CIFR_LSIRDYF   /*!< LSI Ready Interrupt flag */
N#define RCC_IT_LSERDY                    RCC_CIFR_LSERDYF   /*!< LSE Ready Interrupt flag */
N#define RCC_IT_HSIRDY                    RCC_CIFR_HSIRDYF   /*!< HSI Ready Interrupt flag */
N#define RCC_IT_HSERDY                    RCC_CIFR_HSERDYF   /*!< HSE Ready Interrupt flag */
N#define RCC_IT_PLLRDY                    RCC_CIFR_PLLRDYF   /*!< PLL Ready Interrupt flag */
N#define RCC_IT_MSIRDY                    RCC_CIFR_MSIRDYF   /*!< MSI Ready Interrupt flag */
N#define RCC_IT_LSECSS                    RCC_CIFR_CSSLSEF   /*!< LSE Clock Security System Interrupt flag */
N#if defined(RCC_HSECSS_SUPPORT)
X#if 1L
N#define RCC_IT_CSS                       RCC_CIFR_CSSHSEF   /*!< Clock Security System Interrupt flag */
N#endif /* RCC_HSECSS_SUPPORT */
N#if defined(RCC_HSI48_SUPPORT)
X#if 1L
N#define RCC_IT_HSI48RDY                  RCC_CIFR_HSI48RDYF /*!< HSI48 Ready Interrupt flag */
N#endif /* RCC_HSI48_SUPPORT */
N/**
N  * @}
N  */ 
N  
N/** @defgroup RCC_Flag Flags
N  *        Elements values convention: XXXYYYYYb
N  *           - YYYYY  : Flag position in the register
N  *           - XXX  : Register index
N  *                 - 001: CR register
N  *                 - 010: CSR register
N  *                 - 011: CRRCR register (*)
N  * (*)   Applicable only for STM32L052xx, STM32L053xx, (...), STM32L073xx & STM32L082xx 
N  * @{
N  */
N/* Flags in the CR register */
N#define RCC_FLAG_HSIRDY                  ((uint8_t)((CR_REG_INDEX << 5) | 2))     /*!< Internal High Speed clock ready flag */
N#define RCC_FLAG_HSIDIV                  ((uint8_t)((CR_REG_INDEX << 5) | 4))     /*!< HSI16 divider flag */
N#define RCC_FLAG_MSIRDY                  ((uint8_t)((CR_REG_INDEX << 5) | 9))     /*!< MSI clock ready flag */
N#define RCC_FLAG_HSERDY                  ((uint8_t)((CR_REG_INDEX << 5) | 17))    /*!< External High Speed clock ready flag */
N#define RCC_FLAG_PLLRDY                  ((uint8_t)((CR_REG_INDEX << 5) | 25))    /*!< PLL clock ready flag */
N/* Flags in the CSR register */
N#define RCC_FLAG_LSIRDY                  ((uint8_t)((CSR_REG_INDEX << 5) | 1))    /*!< Internal Low Speed oscillator Ready */
N#define RCC_FLAG_LSERDY                  ((uint8_t)((CSR_REG_INDEX << 5) | 9)) /*!< External Low Speed oscillator Ready */
N#define RCC_FLAG_LSECSS                  ((uint8_t)((CSR_REG_INDEX << 5) | 14))   /*!< CSS on LSE failure Detection */
N#define RCC_FLAG_OBLRST                  ((uint8_t)((CSR_REG_INDEX << 5) | 25))   /*!< Options bytes loading reset flag */
N#define RCC_FLAG_PINRST                  ((uint8_t)((CSR_REG_INDEX << 5) | 26))   /*!< PIN reset flag */
N#define RCC_FLAG_PORRST                  ((uint8_t)((CSR_REG_INDEX << 5) | 27))   /*!< POR/PDR reset flag */
N#define RCC_FLAG_SFTRST                  ((uint8_t)((CSR_REG_INDEX << 5) | 28))   /*!< Software Reset flag */
N#define RCC_FLAG_IWDGRST                 ((uint8_t)((CSR_REG_INDEX << 5) | 29))   /*!< Independent Watchdog reset flag */
N#define RCC_FLAG_WWDGRST                 ((uint8_t)((CSR_REG_INDEX << 5) | 30))   /*!< Window watchdog reset flag */
N#define RCC_FLAG_LPWRRST                 ((uint8_t)((CSR_REG_INDEX << 5) | 31))   /*!< Low-Power reset flag */
N#if defined(RCC_CSR_FWRSTF)
X#if 1L
N#define RCC_FLAG_FWRST                   ((uint8_t)((CSR_REG_INDEX << 5) |  8))   /*!< RCC flag FW reset */
N#endif /* RCC_CSR_FWRSTF */
N/* Flags in the CRRCR register */
N#if defined(RCC_HSI48_SUPPORT)
X#if 1L
N#define RCC_FLAG_HSI48RDY                ((uint8_t)((CRRCR_REG_INDEX << 5) | 1))  /*!< HSI48 clock ready flag */
N#endif /* RCC_HSI48_SUPPORT */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Exported macro ------------------------------------------------------------*/
N
N/** @defgroup RCC_Exported_Macros RCC Exported Macros
N  * @{
N  */
N
N/** @defgroup RCC_AHB_Peripheral_Clock_Enable_Disable AHB Peripheral Clock Enable Disable
N  * @brief  Enable or disable the AHB peripheral clock.
N  * @note   After reset, the peripheral clock (used for registers read/write access)
N  *         is disabled and the application software has to enable this clock before 
N  *         using it.
N  * @{
N  */
N#define __HAL_RCC_DMA1_CLK_ENABLE()   do { \
N                                        __IO uint32_t tmpreg; \
N                                        SET_BIT(RCC->AHBENR, RCC_AHBENR_DMA1EN);\
N                                        /* Delay after an RCC peripheral clock enabling */ \
N                                        tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_DMA1EN);\
N                                        UNUSED(tmpreg); \
N                                      } while(0)
X#define __HAL_RCC_DMA1_CLK_ENABLE()   do {                                         __IO uint32_t tmpreg;                                         SET_BIT(RCC->AHBENR, RCC_AHBENR_DMA1EN);                                                                                  tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_DMA1EN);                                        UNUSED(tmpreg);                                       } while(0)
N                                      
N#define __HAL_RCC_MIF_CLK_ENABLE()   do { \
N                                        __IO uint32_t tmpreg; \
N                                        SET_BIT(RCC->AHBENR, RCC_AHBENR_MIFEN);\
N                                        /* Delay after an RCC peripheral clock enabling */ \
N                                        tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_MIFEN);\
N                                        UNUSED(tmpreg); \
N                                      } while(0)
X#define __HAL_RCC_MIF_CLK_ENABLE()   do {                                         __IO uint32_t tmpreg;                                         SET_BIT(RCC->AHBENR, RCC_AHBENR_MIFEN);                                                                                  tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_MIFEN);                                        UNUSED(tmpreg);                                       } while(0)
N                                      
N#define __HAL_RCC_CRC_CLK_ENABLE()   do { \
N                                        __IO uint32_t tmpreg; \
N                                        SET_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN);\
N                                        /* Delay after an RCC peripheral clock enabling */ \
N                                        tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN);\
N                                        UNUSED(tmpreg); \
N                                      } while(0)
X#define __HAL_RCC_CRC_CLK_ENABLE()   do {                                         __IO uint32_t tmpreg;                                         SET_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN);                                                                                  tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN);                                        UNUSED(tmpreg);                                       } while(0)
N
N
N#define __HAL_RCC_DMA1_CLK_DISABLE()          CLEAR_BIT(RCC->AHBENR, RCC_AHBENR_DMA1EN)
N#define __HAL_RCC_MIF_CLK_DISABLE()           CLEAR_BIT(RCC->AHBENR, RCC_AHBENR_MIFEN)
N#define __HAL_RCC_CRC_CLK_DISABLE()           CLEAR_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN)
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_IOPORT_Clock_Enable_Disable IOPORT Peripheral Clock Enable Disable
N  * @brief  Enable or disable the IOPORT peripheral clock.
N  * @note   After reset, the peripheral clock (used for registers read/write access)
N  *         is disabled and the application software has to enable this clock before 
N  *         using it.
N  * @{
N  */
N#define __HAL_RCC_GPIOA_CLK_ENABLE()   do { \
N                                        __IO uint32_t tmpreg; \
N                                        SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN);\
N                                        /* Delay after an RCC peripheral clock enabling */ \
N                                        tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN);\
N                                        UNUSED(tmpreg); \
N                                      } while(0)
X#define __HAL_RCC_GPIOA_CLK_ENABLE()   do {                                         __IO uint32_t tmpreg;                                         SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN);                                                                                  tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN);                                        UNUSED(tmpreg);                                       } while(0)
N                                      
N#define __HAL_RCC_GPIOB_CLK_ENABLE()   do { \
N                                        __IO uint32_t tmpreg; \
N                                        SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);\
N                                        /* Delay after an RCC peripheral clock enabling */ \
N                                        tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);\
N                                        UNUSED(tmpreg); \
N                                      } while(0)
X#define __HAL_RCC_GPIOB_CLK_ENABLE()   do {                                         __IO uint32_t tmpreg;                                         SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);                                                                                  tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);                                        UNUSED(tmpreg);                                       } while(0)
N                                      
N#define __HAL_RCC_GPIOC_CLK_ENABLE()   do { \
N                                        __IO uint32_t tmpreg; \
N                                        SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOCEN);\
N                                        /* Delay after an RCC peripheral clock enabling */ \
N                                        tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOCEN);\
N                                        UNUSED(tmpreg); \
N                                      } while(0)
X#define __HAL_RCC_GPIOC_CLK_ENABLE()   do {                                         __IO uint32_t tmpreg;                                         SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOCEN);                                                                                  tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOCEN);                                        UNUSED(tmpreg);                                       } while(0)
N
N#define __HAL_RCC_GPIOH_CLK_ENABLE()   do { \
N                                        __IO uint32_t tmpreg; \
N                                        SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOHEN);\
N                                        /* Delay after an RCC peripheral clock enabling */ \
N                                        tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOHEN);\
N                                        UNUSED(tmpreg); \
N                                      } while(0)
X#define __HAL_RCC_GPIOH_CLK_ENABLE()   do {                                         __IO uint32_t tmpreg;                                         SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOHEN);                                                                                  tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOHEN);                                        UNUSED(tmpreg);                                       } while(0)
N
N
N#define __HAL_RCC_GPIOA_CLK_DISABLE()        CLEAR_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN)
N#define __HAL_RCC_GPIOB_CLK_DISABLE()        CLEAR_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN)
N#define __HAL_RCC_GPIOC_CLK_DISABLE()        CLEAR_BIT(RCC->IOPENR, RCC_IOPENR_GPIOCEN)
N#define __HAL_RCC_GPIOH_CLK_DISABLE()        CLEAR_BIT(RCC->IOPENR, RCC_IOPENR_GPIOHEN)
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_APB1_Clock_Enable_Disable APB1 Peripheral Clock Enable Disable
N  * @brief  Enable or disable the Low Speed APB (APB1) peripheral clock.
N  * @note   After reset, the peripheral clock (used for registers read/write access)
N  *         is disabled and the application software has to enable this clock before
N  *         using it.
N  * @{
N  */
N#define __HAL_RCC_WWDG_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_WWDGEN))
N#define __HAL_RCC_PWR_CLK_ENABLE()     SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_PWREN))
N
N#define __HAL_RCC_WWDG_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_WWDGEN))
N#define __HAL_RCC_PWR_CLK_DISABLE()     CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_PWREN))
N/**
N  * @}
N  */
N
N/** @defgroup RCC_APB2_Clock_Enable_Disable APB2 Peripheral Clock Enable Disable 
N  * @brief  Enable or disable the High Speed APB (APB2) peripheral clock.
N  * @note   After reset, the peripheral clock (used for registers read/write access)
N  *         is disabled and the application software has to enable this clock before 
N  *         using it.
N  * @{
N  */
N#define __HAL_RCC_SYSCFG_CLK_ENABLE()   SET_BIT(RCC->APB2ENR, (RCC_APB2ENR_SYSCFGEN))
N#define __HAL_RCC_DBGMCU_CLK_ENABLE()   SET_BIT(RCC->APB2ENR, (RCC_APB2ENR_DBGMCUEN))
N
N#define __HAL_RCC_SYSCFG_CLK_DISABLE()   CLEAR_BIT(RCC->APB2ENR, (RCC_APB2ENR_SYSCFGEN))
N#define __HAL_RCC_DBGMCU_CLK_DISABLE()   CLEAR_BIT(RCC->APB2ENR, (RCC_APB2ENR_DBGMCUEN))
N/**
N  * @}
N  */
N  
N/** @defgroup RCC_AHB_Peripheral_Clock_Enable_Disable_Status AHB Peripheral Clock Enabled or Disabled Status
N  * @brief  Check whether the AHB peripheral clock is enabled or not.
N  * @note   After reset, the peripheral clock (used for registers read/write access)
N  *         is disabled and the application software has to enable this clock before
N  *         using it.
N  * @{
N  */
N
N#define __HAL_RCC_DMA1_IS_CLK_ENABLED()        (READ_BIT(RCC->AHBENR, RCC_AHBENR_DMA1EN) != RESET)
N#define __HAL_RCC_MIF_IS_CLK_ENABLED()         (READ_BIT(RCC->AHBENR, RCC_AHBENR_MIFEN) != RESET)
N#define __HAL_RCC_CRC_IS_CLK_ENABLED()         (READ_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN) != RESET)
N#define __HAL_RCC_DMA1_IS_CLK_DISABLED()       (READ_BIT(RCC->AHBENR, RCC_AHBENR_DMA1EN) == RESET)
N#define __HAL_RCC_MIF_IS_CLK_DISABLED()        (READ_BIT(RCC->AHBENR, RCC_AHBENR_MIFEN) == RESET)
N#define __HAL_RCC_CRC_IS_CLK_DISABLED()        (READ_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN) == RESET)
N
N/**
N  * @}
N  */
N  
N/** @defgroup RCC_IOPORT_Peripheral_Clock_Enable_Disable_Status IOPORT Peripheral Clock Enabled or Disabled Status
N  * @brief  Check whether the IOPORT peripheral clock is enabled or not.
N  * @note   After reset, the peripheral clock (used for registers read/write access)
N  *         is disabled and the application software has to enable this clock before
N  *         using it.
N  * @{
N  */
N
N#define __HAL_RCC_GPIOA_IS_CLK_ENABLED()        (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN) != RESET)
N#define __HAL_RCC_GPIOB_IS_CLK_ENABLED()        (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN) != RESET)
N#define __HAL_RCC_GPIOC_IS_CLK_ENABLED()        (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOCEN) != RESET)
N#define __HAL_RCC_GPIOH_IS_CLK_ENABLED()        (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOHEN) != RESET)
N#define __HAL_RCC_GPIOA_IS_CLK_DISABLED()       (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN) == RESET)
N#define __HAL_RCC_GPIOB_IS_CLK_DISABLED()       (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN) == RESET)
N#define __HAL_RCC_GPIOC_IS_CLK_DISABLED()       (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOCEN) == RESET)
N#define __HAL_RCC_GPIOH_IS_CLK_DISABLED()       (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOHEN) == RESET)
N
N/**
N  * @}
N  */
N  
N/** @defgroup RCC_APB1_Clock_Enable_Disable_Status APB1 Peripheral Clock Enabled or Disabled Status
N  * @brief  Check whether the APB1 peripheral clock is enabled or not.
N  * @note   After reset, the peripheral clock (used for registers read/write access)
N  *         is disabled and the application software has to enable this clock before
N  *         using it.
N  * @{
N  */
N#define __HAL_RCC_WWDG_IS_CLK_ENABLED()        (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN) != RESET)
N#define __HAL_RCC_PWR_IS_CLK_ENABLED()         (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN) != RESET)
N#define __HAL_RCC_WWDG_IS_CLK_DISABLED()       (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN) == RESET)
N#define __HAL_RCC_PWR_IS_CLK_DISABLED()        (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN) == RESET)
N
N/**
N  * @}
N  */
N  
N/** @defgroup RCC_APB2_Clock_Enable_Disable_Status APB2 Peripheral Clock Enabled or Disabled Status
N  * @brief  Check whether the APB2 peripheral clock is enabled or not.
N  * @note   After reset, the peripheral clock (used for registers read/write access)
N  *         is disabled and the application software has to enable this clock before
N  *         using it.
N  * @{
N  */
N#define __HAL_RCC_SYSCFG_IS_CLK_ENABLED()        (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN) != RESET)
N#define __HAL_RCC_DBGMCU_IS_CLK_ENABLED()        (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_DBGMCUEN) != RESET)
N#define __HAL_RCC_SYSCFG_IS_CLK_DISABLED()       (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN) == RESET)
N#define __HAL_RCC_DBGMCU_IS_CLK_DISABLED()       (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_DBGMCUEN) == RESET)
N
N/**
N  * @}
N  */
N  
N /** @defgroup RCC_AHB_Force_Release_Reset AHB Peripheral Force Release Reset 
N  * @brief  Force or release AHB peripheral reset.
N  * @{
N  */
N#define __HAL_RCC_AHB_FORCE_RESET()     (RCC->AHBRSTR = 0xFFFFFFFFU)
N#define __HAL_RCC_DMA1_FORCE_RESET()    SET_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_DMA1RST))
N#define __HAL_RCC_MIF_FORCE_RESET()     SET_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_MIFRST))
N#define __HAL_RCC_CRC_FORCE_RESET()     SET_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_CRCRST))
N
N#define __HAL_RCC_AHB_RELEASE_RESET()     (RCC->AHBRSTR = 0x00000000U)
N#define __HAL_RCC_CRC_RELEASE_RESET()     CLEAR_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_CRCRST))
N#define __HAL_RCC_DMA1_RELEASE_RESET()    CLEAR_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_DMA1RST))
N#define __HAL_RCC_MIF_RELEASE_RESET()     CLEAR_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_MIFRST))
N/**
N  * @}
N  */
N  
N/** @defgroup RCC_IOPORT_Force_Release_Reset IOPORT Peripheral Force Release Reset 
N  * @brief  Force or release IOPORT peripheral reset.
N  * @{
N  */
N#define __HAL_RCC_IOP_FORCE_RESET()     (RCC->IOPRSTR = 0xFFFFFFFFU) 
N#define __HAL_RCC_GPIOA_FORCE_RESET()   SET_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOARST))
N#define __HAL_RCC_GPIOB_FORCE_RESET()   SET_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOBRST))
N#define __HAL_RCC_GPIOC_FORCE_RESET()   SET_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOCRST))
N#define __HAL_RCC_GPIOH_FORCE_RESET()   SET_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOHRST))
N
N#define __HAL_RCC_IOP_RELEASE_RESET()   (RCC->IOPRSTR = 0x00000000U) 
N#define __HAL_RCC_GPIOA_RELEASE_RESET() CLEAR_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOARST))
N#define __HAL_RCC_GPIOB_RELEASE_RESET() CLEAR_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOBRST))
N#define __HAL_RCC_GPIOC_RELEASE_RESET() CLEAR_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOCRST))
N#define __HAL_RCC_GPIOH_RELEASE_RESET() CLEAR_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOHRST))
N
N/**
N  * @}
N  */
N  
N/** @defgroup RCC_APB1_Force_Release_Reset APB1 Peripheral Force Release Reset 
N  * @brief  Force or release APB1 peripheral reset.
N  * @{
N  */
N#define __HAL_RCC_APB1_FORCE_RESET()     (RCC->APB1RSTR = 0xFFFFFFFFU)  
N#define __HAL_RCC_WWDG_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_WWDGRST))
N#define __HAL_RCC_PWR_FORCE_RESET()      SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_PWRRST))
N
N#define __HAL_RCC_APB1_RELEASE_RESET()   (RCC->APB1RSTR = 0x00000000U)
N#define __HAL_RCC_WWDG_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_WWDGRST))
N#define __HAL_RCC_PWR_RELEASE_RESET()    CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_PWRRST))
N
N/**
N  * @}
N  */
N  
N/** @defgroup RCC_APB2_Force_Release_Reset APB2 Peripheral Force Release Reset 
N  * @brief  Force or release APB2 peripheral reset.
N  * @{
N  */
N#define __HAL_RCC_APB2_FORCE_RESET()     (RCC->APB2RSTR = 0xFFFFFFFFU)  
N#define __HAL_RCC_DBGMCU_FORCE_RESET()   SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_DBGMCURST))
N#define __HAL_RCC_SYSCFG_FORCE_RESET()   SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_SYSCFGRST))
N
N#define __HAL_RCC_APB2_RELEASE_RESET()   (RCC->APB2RSTR = 0x00000000U)
N#define __HAL_RCC_DBGMCU_RELEASE_RESET() CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_DBGMCURST))
N#define __HAL_RCC_SYSCFG_RELEASE_RESET() CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_SYSCFGRST))
N/**
N  * @}
N  */
N  
N
N/** @defgroup RCC_AHB_Clock_Sleep_Enable_Disable AHB Peripheral Clock Sleep Enable Disable
N  * @brief  Enable or disable the AHB peripheral clock during Low Power (Sleep) mode.
N  * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
N  *         power consumption.
N  * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
N  * @note   By default, all peripheral activated clocks remain enabled during SLEEP mode.
N  * @{
N  */
N#define __HAL_RCC_CRC_CLK_SLEEP_ENABLE()      SET_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_CRCSMEN))
N#define __HAL_RCC_MIF_CLK_SLEEP_ENABLE()      SET_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_MIFSMEN))
N#define __HAL_RCC_SRAM_CLK_SLEEP_ENABLE()     SET_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_SRAMSMEN))
N#define __HAL_RCC_DMA1_CLK_SLEEP_ENABLE()     SET_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_DMA1SMEN))
N
N#define __HAL_RCC_CRC_CLK_SLEEP_DISABLE()     CLEAR_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_CRCSMEN))
N#define __HAL_RCC_MIF_CLK_SLEEP_DISABLE()     CLEAR_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_MIFSMEN))
N#define __HAL_RCC_SRAM_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_SRAMSMEN))
N#define __HAL_RCC_DMA1_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_DMA1SMEN))
N/**
N  * @}
N  */
N
N/** @defgroup RCC_IOPORT_Clock_Sleep_Enable_Disable IOPORT Peripheral Clock Sleep Enable Disable 
N  * @brief  Enable or disable the IOPORT peripheral clock during Low Power (Sleep) mode.
N  * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
N  *         power consumption.
N  * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
N  * @note   By default, all peripheral activated clocks remain enabled during SLEEP mode.
N  * @{
N  */
N
N#define __HAL_RCC_GPIOA_CLK_SLEEP_ENABLE()    SET_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOASMEN))
N#define __HAL_RCC_GPIOB_CLK_SLEEP_ENABLE()    SET_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOBSMEN))
N#define __HAL_RCC_GPIOC_CLK_SLEEP_ENABLE()    SET_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOCSMEN))
N#define __HAL_RCC_GPIOH_CLK_SLEEP_ENABLE()    SET_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOHSMEN))
N
N#define __HAL_RCC_GPIOA_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOASMEN))
N#define __HAL_RCC_GPIOB_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOBSMEN))
N#define __HAL_RCC_GPIOC_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOCSMEN))
N#define __HAL_RCC_GPIOH_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOHSMEN))
N/**
N  * @}
N  */
N  
N/** @defgroup RCC_APB1_Clock_Sleep_Enable_Disable APB1 Peripheral Clock Sleep Enable Disable   
N  * @brief  Enable or disable the APB1 peripheral clock during Low Power (Sleep) mode.
N  * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
N  *         power consumption.
N  * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
N  * @note   By default, all peripheral activated clocks remain enabled during SLEEP mode.
N  * @{
N  */
N#define __HAL_RCC_WWDG_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_WWDGSMEN))
N#define __HAL_RCC_PWR_CLK_SLEEP_ENABLE()     SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_PWRSMEN))
N
N#define __HAL_RCC_WWDG_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->APB1SMENR,  (RCC_APB1SMENR_WWDGSMEN))
N#define __HAL_RCC_PWR_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR,  (RCC_APB1SMENR_PWRSMEN))
N
N/**
N  * @}
N  */
N  
N/** @defgroup RCC_APB2_Clock_Sleep_Enable_Disable APB2 Peripheral Clock Sleep Enable Disable     
N  * @brief  Enable or disable the APB2 peripheral clock during Low Power (Sleep) mode.
N  * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
N  *         power consumption.
N  * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
N  * @note   By default, all peripheral activated clocks remain enabled during SLEEP mode.
N  * @{
N  */
N#define __HAL_RCC_SYSCFG_CLK_SLEEP_ENABLE()   SET_BIT(RCC->APB2SMENR, (RCC_APB2SMENR_SYSCFGSMEN))
N#define __HAL_RCC_DBGMCU_CLK_SLEEP_ENABLE()   SET_BIT(RCC->APB2SMENR, (RCC_APB2SMENR_DBGMCUSMEN))
N
N#define __HAL_RCC_SYSCFG_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->APB2SMENR,   (RCC_APB2SMENR_SYSCFGSMEN))
N#define __HAL_RCC_DBGMCU_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->APB2SMENR,   (RCC_APB2SMENR_DBGMCUSMEN))
N
N/**
N  * @}
N  */
N  
N/** @defgroup RCC_AHB_Clock_Sleep_Enable_Disable_Status AHB Peripheral Clock Sleep Enabled or Disabled Status
N  * @brief  Check whether the AHB peripheral clock during Low Power (Sleep) mode is enabled or not.
N  * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
N  *         power consumption.
N  * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
N  * @note   By default, all peripheral clocks are enabled during SLEEP mode.
N  * @{
N  */
N#define __HAL_RCC_CRC_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_CRCSMEN) != RESET)
N#define __HAL_RCC_MIF_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_MIFSMEN) != RESET)
N#define __HAL_RCC_SRAM_IS_CLK_SLEEP_ENABLED()   (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_SRAMSMEN) != RESET)
N#define __HAL_RCC_DMA1_IS_CLK_SLEEP_ENABLED()   (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_DMA1SMEN) != RESET)
N#define __HAL_RCC_CRC_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_CRCSMEN) == RESET)
N#define __HAL_RCC_MIF_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_MIFSMEN) == RESET)
N#define __HAL_RCC_SRAM_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_SRAMSMEN) == RESET)
N#define __HAL_RCC_DMA1_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_DMA1SMEN) == RESET)
N
N/**
N  * @}
N  */
N  
N/** @defgroup RCC_IOPORT_Clock_Sleep_Enable_Disable_Status IOPORT Peripheral Clock Sleep Enabled or Disabled Status
N  * @brief  Check whether the IOPORT peripheral clock during Low Power (Sleep) mode is enabled or not.
N  * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
N  *         power consumption.
N  * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
N  * @note   By default, all peripheral clocks are enabled during SLEEP mode.
N  * @{
N  */
N#define __HAL_RCC_GPIOA_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOASMEN) != RESET)
N#define __HAL_RCC_GPIOB_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOBSMEN) != RESET)
N#define __HAL_RCC_GPIOC_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOCSMEN) != RESET)
N#define __HAL_RCC_GPIOH_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOHSMEN) != RESET)
N#define __HAL_RCC_GPIOA_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOASMEN) == RESET)
N#define __HAL_RCC_GPIOB_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOBSMEN) == RESET)
N#define __HAL_RCC_GPIOC_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOCSMEN) == RESET)
N#define __HAL_RCC_GPIOH_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOHSMEN) == RESET)
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_APB1_Clock_Sleep_Enable_Disable_Status APB1 Peripheral Clock Sleep Enabled or Disabled Status
N  * @brief  Check whether the APB1 peripheral clock during Low Power (Sleep) mode is enabled or not.
N  * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
N  *         power consumption.
N  * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
N  * @note   By default, all peripheral clocks are enabled during SLEEP mode.
N  * @{
N  */
N#define __HAL_RCC_WWDG_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_WWDGSMEN) != RESET)
N#define __HAL_RCC_PWR_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_PWRSMEN) != RESET)
N#define __HAL_RCC_WWDG_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_WWDGSMEN) == RESET)
N#define __HAL_RCC_PWR_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_PWRSMEN) == RESET)
N
N/**
N  * @}
N  */
N  
N/** @defgroup RCC_APB2_Clock_Sleep_Enable_Disable_Status APB2 Peripheral Clock Sleep Enabled or Disabled Status
N  * @brief  Check whether the APB2 peripheral clock during Low Power (Sleep) mode is enabled or not.
N  * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
N  *         power consumption.
N  * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
N  * @note   By default, all peripheral clocks are enabled during SLEEP mode.
N  * @{
N  */
N#define __HAL_RCC_SYSCFG_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_SYSCFGSMEN) != RESET)
N#define __HAL_RCC_DBGMCU_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_DBGMCUSMEN) != RESET)
N#define __HAL_RCC_SYSCFG_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_SYSCFGSMEN) == RESET)
N#define __HAL_RCC_DBGMCU_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_DBGMCUSMEN) == RESET)
N
N/**
N  * @}
N  */
N/** @defgroup RCC_HSI_Configuration HSI Configuration
N  * @{   
N  */
N
N/** @brief  Macro to enable or disable the Internal High Speed oscillator (HSI).
N  * @note     After enabling the HSI, the application software should wait on 
N  *           HSIRDY flag to be set indicating that HSI clock is stable and can
N  *           be used to clock the PLL and/or system clock.
N  * @note     HSI can not be stopped if it is used directly or through the PLL
N  *           as system clock. In this case, you have to select another source 
N  *           of the system clock then stop the HSI.
N  * @note     The HSI is stopped by hardware when entering STOP and STANDBY modes. 
N  * @param    __STATE__ specifies the new state of the HSI.
N  *           This parameter can be one of the following values:
N  *            @arg @ref RCC_HSI_OFF turn OFF the HSI oscillator
N  *            @arg @ref RCC_HSI_ON turn ON the HSI oscillator
N  *            @arg @ref RCC_HSI_DIV4 turn ON the HSI oscillator and divide it by 4
N  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
N  *         clock cycles. 
N  */
N#define __HAL_RCC_HSI_CONFIG(__STATE__) \
N                  MODIFY_REG(RCC->CR, RCC_CR_HSION | RCC_CR_HSIDIVEN , (uint32_t)(__STATE__))
X#define __HAL_RCC_HSI_CONFIG(__STATE__)                   MODIFY_REG(RCC->CR, RCC_CR_HSION | RCC_CR_HSIDIVEN , (uint32_t)(__STATE__))
N
N/** @brief  Macros to enable or disable the Internal High Speed oscillator (HSI).
N  * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
N  *         It is used (enabled by hardware) as system clock source after startup
N  *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
N  *         of the HSE used directly or indirectly as system clock (if the Clock
N  *         Security System CSS is enabled).
N  * @note   HSI can not be stopped if it is used as system clock source. In this case,
N  *         you have to select another source of the system clock then stop the HSI.  
N  * @note   After enabling the HSI, the application software should wait on HSIRDY
N  *         flag to be set indicating that HSI clock is stable and can be used as
N  *         system clock source.  
N  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
N  *         clock cycles.  
N  */
N#define __HAL_RCC_HSI_ENABLE()  SET_BIT(RCC->CR, RCC_CR_HSION)
N#define __HAL_RCC_HSI_DISABLE() CLEAR_BIT(RCC->CR, RCC_CR_HSION)
N
N/** @brief  Macro to adjust the Internal High Speed oscillator (HSI) calibration value.
N  * @note   The calibration is used to compensate for the variations in voltage
N  *         and temperature that influence the frequency of the internal HSI RC.
N  * @param  _HSICALIBRATIONVALUE_ specifies the calibration trimming value.
N  *         (default is RCC_HSICALIBRATION_DEFAULT).
N  *         This parameter must be a number between 0 and 0x1F.
N  */  
N#define __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(_HSICALIBRATIONVALUE_) \
N          (MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, (uint32_t)(_HSICALIBRATIONVALUE_) << 8))
X#define __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(_HSICALIBRATIONVALUE_)           (MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, (uint32_t)(_HSICALIBRATIONVALUE_) << 8))
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_LSI_Configuration  LSI Configuration
N  * @{   
N  */
N
N/** @brief Macro to enable the Internal Low Speed oscillator (LSI).
N  * @note   After enabling the LSI, the application software should wait on 
N  *         LSIRDY flag to be set indicating that LSI clock is stable and can
N  *         be used to clock the IWDG and/or the RTC.
N  */
N#define __HAL_RCC_LSI_ENABLE() SET_BIT(RCC->CSR, RCC_CSR_LSION)
N
N/** @brief Macro to disable the Internal Low Speed oscillator (LSI).
N  * @note   LSI can not be disabled if the IWDG is running.  
N  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
N  *         clock cycles. 
N  */
N#define __HAL_RCC_LSI_DISABLE() CLEAR_BIT(RCC->CSR, RCC_CSR_LSION)
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_HSE_Configuration HSE Configuration
N  * @{   
N  */
N
N/**
N  * @brief  Macro to configure the External High Speed oscillator (HSE).
N  * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
N  *         supported by this macro. User should request a transition to HSE Off
N  *         first and then HSE On or HSE Bypass.
N  * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
N  *         software should wait on HSERDY flag to be set indicating that HSE clock
N  *         is stable and can be used to clock the PLL and/or system clock.
N  * @note   HSE state can not be changed if it is used directly or through the
N  *         PLL as system clock. In this case, you have to select another source
N  *         of the system clock then change the HSE state (ex. disable it).
N  * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.
N  * @note   This function reset the CSSON bit, so if the clock security system(CSS)
N  *         was previously enabled you have to enable it again after calling this
N  *         function.
N  * @param  __STATE__ specifies the new state of the HSE.
N  *          This parameter can be one of the following values:
N  *            @arg @ref RCC_HSE_OFF turn OFF the HSE oscillator, HSERDY flag goes low after
N  *                              6 HSE oscillator clock cycles.
N  *            @arg @ref RCC_HSE_ON turn ON the HSE oscillator
N  *            @arg @ref RCC_HSE_BYPASS HSE oscillator bypassed with external clock
N  */
N#define __HAL_RCC_HSE_CONFIG(__STATE__)                                     \
N                    do{                                                     \
N                      __IO uint32_t tmpreg;                                 \
N                      if ((__STATE__) == RCC_HSE_ON)                        \
N                      {                                                     \
N                        SET_BIT(RCC->CR, RCC_CR_HSEON);                     \
N                      }                                                     \
N                      else if ((__STATE__) == RCC_HSE_BYPASS)               \
N                      {                                                     \
N                        SET_BIT(RCC->CR, RCC_CR_HSEBYP);                    \
N                        SET_BIT(RCC->CR, RCC_CR_HSEON);                     \
N                      }                                                     \
N                      else                                                  \
N                      {                                                     \
N                        CLEAR_BIT(RCC->CR, RCC_CR_HSEON);                   \
N                        /* Delay after an RCC peripheral clock */           \
N                        tmpreg = READ_BIT(RCC->CR, RCC_CR_HSEON);           \
N                        UNUSED(tmpreg);                                     \
N                        CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);                  \
N                      }                                                     \
N                    }while(0)
X#define __HAL_RCC_HSE_CONFIG(__STATE__)                                                         do{                                                                           __IO uint32_t tmpreg;                                                       if ((__STATE__) == RCC_HSE_ON)                                              {                                                                             SET_BIT(RCC->CR, RCC_CR_HSEON);                                           }                                                                           else if ((__STATE__) == RCC_HSE_BYPASS)                                     {                                                                             SET_BIT(RCC->CR, RCC_CR_HSEBYP);                                            SET_BIT(RCC->CR, RCC_CR_HSEON);                                           }                                                                           else                                                                        {                                                                             CLEAR_BIT(RCC->CR, RCC_CR_HSEON);                                                                               tmpreg = READ_BIT(RCC->CR, RCC_CR_HSEON);                                   UNUSED(tmpreg);                                                             CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);                                        }                                                                         }while(0)
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_LSE_Configuration LSE Configuration
N  * @{   
N  */
N
N/**
N  * @brief  Macro to configure the External Low Speed oscillator (LSE).
N  * @note Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not supported by this macro. 
N  * @note   As the LSE is in the Backup domain and write access is denied to
N  *         this domain after reset, you have to enable write access using 
N  *         @ref HAL_PWR_EnableBkUpAccess() function before to configure the LSE
N  *         (to be done once after reset).  
N  * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_BYPASS), the application
N  *         software should wait on LSERDY flag to be set indicating that LSE clock
N  *         is stable and can be used to clock the RTC.
N  * @param  __STATE__ specifies the new state of the LSE.
N  *         This parameter can be one of the following values:
N  *            @arg @ref RCC_LSE_OFF turn OFF the LSE oscillator, LSERDY flag goes low after
N  *                              6 LSE oscillator clock cycles.
N  *            @arg @ref RCC_LSE_ON turn ON the LSE oscillator.
N  *            @arg @ref RCC_LSE_BYPASS LSE oscillator bypassed with external clock.
N  */
N#define __HAL_RCC_LSE_CONFIG(__STATE__)                                     \
N                    do{                                                     \
N                      if ((__STATE__) == RCC_LSE_ON)                        \
N                      {                                                     \
N                        SET_BIT(RCC->CSR, RCC_CSR_LSEON);                   \
N                      }                                                     \
N                      else if ((__STATE__) == RCC_LSE_OFF)                  \
N                      {                                                     \
N                        CLEAR_BIT(RCC->CSR, RCC_CSR_LSEON);                 \
N                        CLEAR_BIT(RCC->CSR, RCC_CSR_LSEBYP);                \
N                      }                                                     \
N                      else if ((__STATE__) == RCC_LSE_BYPASS)               \
N                      {                                                     \
N                        SET_BIT(RCC->CSR, RCC_CSR_LSEBYP);                  \
N                        SET_BIT(RCC->CSR, RCC_CSR_LSEON);                   \
N                      }                                                     \
N                      else                                                  \
N                      {                                                     \
N                        CLEAR_BIT(RCC->CSR, RCC_CSR_LSEON);                 \
N                        CLEAR_BIT(RCC->CSR, RCC_CSR_LSEBYP);                \
N                      }                                                     \
N                    }while(0)
X#define __HAL_RCC_LSE_CONFIG(__STATE__)                                                         do{                                                                           if ((__STATE__) == RCC_LSE_ON)                                              {                                                                             SET_BIT(RCC->CSR, RCC_CSR_LSEON);                                         }                                                                           else if ((__STATE__) == RCC_LSE_OFF)                                        {                                                                             CLEAR_BIT(RCC->CSR, RCC_CSR_LSEON);                                         CLEAR_BIT(RCC->CSR, RCC_CSR_LSEBYP);                                      }                                                                           else if ((__STATE__) == RCC_LSE_BYPASS)                                     {                                                                             SET_BIT(RCC->CSR, RCC_CSR_LSEBYP);                                          SET_BIT(RCC->CSR, RCC_CSR_LSEON);                                         }                                                                           else                                                                        {                                                                             CLEAR_BIT(RCC->CSR, RCC_CSR_LSEON);                                         CLEAR_BIT(RCC->CSR, RCC_CSR_LSEBYP);                                      }                                                                         }while(0)
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_MSI_Configuration  MSI Configuration
N  * @{   
N  */
N
N/** @brief  Macro to enable Internal Multi Speed oscillator (MSI).
N  * @note   After enabling the MSI, the application software should wait on MSIRDY
N  *         flag to be set indicating that MSI clock is stable and can be used as
N  *         system clock source.  
N  */
N#define __HAL_RCC_MSI_ENABLE()  SET_BIT(RCC->CR, RCC_CR_MSION)
N                                       
N/** @brief  Macro to disable the Internal Multi Speed oscillator (MSI).
N  * @note   The MSI is stopped by hardware when entering STOP and STANDBY modes.
N  *         It is used (enabled by hardware) as system clock source after startup
N  *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
N  *         of the HSE used directly or indirectly as system clock (if the Clock
N  *         Security System CSS is enabled).             
N  * @note   MSI can not be stopped if it is used as system clock source. In this case,
N  *         you have to select another source of the system clock then stop the MSI.  
N  * @note   When the MSI is stopped, MSIRDY flag goes low after 6 MSI oscillator
N  *         clock cycles.  
N  */
N#define __HAL_RCC_MSI_DISABLE() CLEAR_BIT(RCC->CR, RCC_CR_MSION)
N
N/** @brief  Macro adjusts Internal Multi Speed oscillator (MSI) calibration value.
N  * @note   The calibration is used to compensate for the variations in voltage
N  *         and temperature that influence the frequency of the internal MSI RC.
N  *         Refer to the Application Note AN3300 for more details on how to  
N  *         calibrate the MSI.
N  * @param  _MSICALIBRATIONVALUE_ specifies the calibration trimming value.
N  *         (default is RCC_MSICALIBRATION_DEFAULT).
N  *         This parameter must be a number between 0 and 0xFF.
N  */  
N#define __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(_MSICALIBRATIONVALUE_) \
N          (MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, (uint32_t)(_MSICALIBRATIONVALUE_) << 24))
X#define __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(_MSICALIBRATIONVALUE_)           (MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, (uint32_t)(_MSICALIBRATIONVALUE_) << 24))
N          
N/* @brief  Macro to configures the Internal Multi Speed oscillator (MSI) clock range.
N  * @note     After restart from Reset or wakeup from STANDBY, the MSI clock is 
N  *           around 2.097 MHz. The MSI clock does not change after wake-up from
N  *           STOP mode.
N  * @note    The MSI clock range can be modified on the fly.     
N  * @param  _MSIRANGEVALUE_ specifies the MSI Clock range.
N  *   This parameter must be one of the following values:
N  *     @arg @ref RCC_MSIRANGE_0 MSI clock is around 65.536 KHz
N  *     @arg @ref RCC_MSIRANGE_1 MSI clock is around 131.072 KHz
N  *     @arg @ref RCC_MSIRANGE_2 MSI clock is around 262.144 KHz
N  *     @arg @ref RCC_MSIRANGE_3 MSI clock is around 524.288 KHz
N  *     @arg @ref RCC_MSIRANGE_4 MSI clock is around 1.048 MHz
N  *     @arg @ref RCC_MSIRANGE_5 MSI clock is around 2.097 MHz (default after Reset or wake-up from STANDBY)
N  *     @arg @ref RCC_MSIRANGE_6 MSI clock is around 4.194 MHz
N  */  
N#define __HAL_RCC_MSI_RANGE_CONFIG(_MSIRANGEVALUE_) (MODIFY_REG(RCC->ICSCR, \
N          RCC_ICSCR_MSIRANGE, (uint32_t)(_MSIRANGEVALUE_)))
X#define __HAL_RCC_MSI_RANGE_CONFIG(_MSIRANGEVALUE_) (MODIFY_REG(RCC->ICSCR,           RCC_ICSCR_MSIRANGE, (uint32_t)(_MSIRANGEVALUE_)))
N
N/** @brief  Macro to get the Internal Multi Speed oscillator (MSI) clock range in run mode
N  * @retval MSI clock range.
N  *         This parameter must be one of the following values:
N  *     @arg @ref RCC_MSIRANGE_0 MSI clock is around 65.536 KHz
N  *     @arg @ref RCC_MSIRANGE_1 MSI clock is around 131.072 KHz
N  *     @arg @ref RCC_MSIRANGE_2 MSI clock is around 262.144 KHz
N  *     @arg @ref RCC_MSIRANGE_3 MSI clock is around 524.288 KHz
N  *     @arg @ref RCC_MSIRANGE_4 MSI clock is around 1.048 MHz
N  *     @arg @ref RCC_MSIRANGE_5 MSI clock is around 2.097 MHz (default after Reset or wake-up from STANDBY)
N  *     @arg @ref RCC_MSIRANGE_6 MSI clock is around 4.194 MHz
N  */
N#define __HAL_RCC_GET_MSI_RANGE() (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE))
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_PLL_Configuration PLL Configuration
N  * @{   
N  */
N
N/** @brief Macro to enable the main PLL.
N  * @note   After enabling the main PLL, the application software should wait on 
N  *         PLLRDY flag to be set indicating that PLL clock is stable and can
N  *         be used as system clock source.
N  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
N  */
N#define __HAL_RCC_PLL_ENABLE() SET_BIT(RCC->CR, RCC_CR_PLLON)
N
N/** @brief Macro to disable the main PLL.
N  * @note   The main PLL can not be disabled if it is used as system clock source
N  */
N#define __HAL_RCC_PLL_DISABLE() CLEAR_BIT(RCC->CR, RCC_CR_PLLON)
N
N/** @brief Macro to configure the main PLL clock source, multiplication and division factors.
N  * @note   This function must be used only when the main PLL is disabled.
N  *  
N  * @param  __RCC_PLLSOURCE__ specifies the PLL entry clock source.
N  *          This parameter can be one of the following values:
N  *            @arg @ref RCC_PLLSOURCE_HSI HSI oscillator clock selected as PLL clock entry
N  *            @arg @ref RCC_PLLSOURCE_HSE HSE oscillator clock selected as PLL clock entry
N  * @param  __PLLMUL__ specifies the multiplication factor for PLL VCO output clock
N  *          This parameter can be one of the following values:
N  *             @arg @ref RCC_PLL_MUL3   PLLVCO = PLL clock entry x 3
N  *             @arg @ref RCC_PLL_MUL4   PLLVCO = PLL clock entry x 4
N  *             @arg @ref RCC_PLL_MUL6   PLLVCO = PLL clock entry x 6
N  *             @arg @ref RCC_PLL_MUL8   PLLVCO = PLL clock entry x 8
N  *             @arg @ref RCC_PLL_MUL12  PLLVCO = PLL clock entry x 12
N  *             @arg @ref RCC_PLL_MUL16  PLLVCO = PLL clock entry x 16
N  *             @arg @ref RCC_PLL_MUL24  PLLVCO = PLL clock entry x 24
N  *             @arg @ref RCC_PLL_MUL32  PLLVCO = PLL clock entry x 32
N  *             @arg @ref RCC_PLL_MUL48  PLLVCO = PLL clock entry x 48
N  * @note The PLL VCO clock frequency must not exceed 96 MHz when the product is in
N  *          Range 1, 48 MHz when the product is in Range 2 and 24 MHz when the product is
N  *          in Range 3.
N  *
N  * @param  __PLLDIV__ specifies the division factor for PLL VCO input clock
N  *          This parameter can be one of the following values:
N  *             @arg @ref RCC_PLL_DIV2 PLL clock output = PLLVCO / 2
N  *             @arg @ref RCC_PLL_DIV3 PLL clock output = PLLVCO / 3
N  *             @arg @ref RCC_PLL_DIV4 PLL clock output = PLLVCO / 4
N  *   
N  */
N#define __HAL_RCC_PLL_CONFIG(__RCC_PLLSOURCE__, __PLLMUL__, __PLLDIV__)\
N          MODIFY_REG(RCC->CFGR, (RCC_CFGR_PLLSRC|RCC_CFGR_PLLMUL|RCC_CFGR_PLLDIV),((__RCC_PLLSOURCE__) | (__PLLMUL__) | (__PLLDIV__)))
X#define __HAL_RCC_PLL_CONFIG(__RCC_PLLSOURCE__, __PLLMUL__, __PLLDIV__)          MODIFY_REG(RCC->CFGR, (RCC_CFGR_PLLSRC|RCC_CFGR_PLLMUL|RCC_CFGR_PLLDIV),((__RCC_PLLSOURCE__) | (__PLLMUL__) | (__PLLDIV__)))
N
N/** @brief  Get oscillator clock selected as PLL input clock
N  * @retval The clock source used for PLL entry. The returned value can be one
N  *         of the following:
N  *             @arg @ref RCC_PLLSOURCE_HSI HSI oscillator clock selected as PLL input clock
N  *             @arg @ref RCC_PLLSOURCE_HSE HSE oscillator clock selected as PLL input clock
N  */
N#define __HAL_RCC_GET_PLL_OSCSOURCE() ((uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC)))
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_Get_Clock_source Get Clock source
N  * @{   
N  */
N
N/**
N  * @brief  Macro to configure the system clock source.
N  * @param  __SYSCLKSOURCE__ specifies the system clock source.
N  *          This parameter can be one of the following values:
N  *              @arg @ref RCC_SYSCLKSOURCE_MSI MSI oscillator is used as system clock source.
N  *              @arg @ref RCC_SYSCLKSOURCE_HSI HSI oscillator is used as system clock source.
N  *              @arg @ref RCC_SYSCLKSOURCE_HSE HSE oscillator is used as system clock source.
N  *              @arg @ref RCC_SYSCLKSOURCE_PLLCLK PLL output is used as system clock source.
N  */
N#define __HAL_RCC_SYSCLK_CONFIG(__SYSCLKSOURCE__) \
N                  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, (__SYSCLKSOURCE__))
X#define __HAL_RCC_SYSCLK_CONFIG(__SYSCLKSOURCE__)                   MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, (__SYSCLKSOURCE__))
N
N/** @brief  Macro to get the clock source used as system clock.
N  * @retval The clock source used as system clock. The returned value can be one
N  *         of the following:
N  *             @arg @ref RCC_SYSCLKSOURCE_STATUS_MSI MSI used as system clock
N  *             @arg @ref RCC_SYSCLKSOURCE_STATUS_HSI HSI used as system clock
N  *             @arg @ref RCC_SYSCLKSOURCE_STATUS_HSE HSE used as system clock
N  *             @arg @ref RCC_SYSCLKSOURCE_STATUS_PLLCLK PLL used as system clock
N  */
N#define __HAL_RCC_GET_SYSCLK_SOURCE() ((uint32_t)(READ_BIT(RCC->CFGR,RCC_CFGR_SWS)))
N
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_MCOx_Clock_Config RCC Extended MCOx Clock Config
N  * @{   
N  */ 
N
N/** @brief  Macro to configure the MCO clock.
N  * @param  __MCOCLKSOURCE__ specifies the MCO clock source.
N  *          This parameter can be one of the following values:
N  *            @arg @ref RCC_MCO1SOURCE_NOCLOCK      No clock selected as MCO clock
N  *            @arg @ref RCC_MCO1SOURCE_SYSCLK       System Clock selected as MCO clock
N  *            @arg @ref RCC_MCO1SOURCE_HSI          HSI oscillator clock selected as MCO clock
N  *            @arg @ref RCC_MCO1SOURCE_MSI          MSI oscillator clock selected as MCO clock 
N  *            @arg @ref RCC_MCO1SOURCE_HSE HSE oscillator clock selected as MCO clock
N  *            @arg @ref RCC_MCO1SOURCE_PLLCLK       PLL clock selected as MCO clock
N  *            @arg @ref RCC_MCO1SOURCE_LSI          LSI clock selected as MCO clock
N  *            @arg @ref RCC_MCO1SOURCE_LSE          LSE clock selected as MCO clock
N  @if STM32L052xx
N  *            @arg @ref RCC_MCO1SOURCE_HSI48       HSI48 clock selected as MCO clock
N  @elseif STM32L053xx
N  *            @arg @ref RCC_MCO1SOURCE_HSI48       HSI48 clock selected as MCO clock
N  @elseif STM32L062xx
N  *            @arg @ref RCC_MCO1SOURCE_HSI48       HSI48 clock selected as MCO clock
N  @elseif STM32L063xx
N  *            @arg @ref RCC_MCO1SOURCE_HSI48       HSI48 clock selected as MCO clock
N  @elseif STM32L072xx
N  *            @arg @ref RCC_MCO1SOURCE_HSI48       HSI48 clock selected as MCO clock
N  @elseif STM32L073xx
N  *            @arg @ref RCC_MCO1SOURCE_HSI48       HSI48 clock selected as MCO clock
N  @elseif STM32L082xx
N  *            @arg @ref RCC_MCO1SOURCE_HSI48       HSI48 clock selected as MCO clock
N  @elseif STM32L083xx
N  *            @arg @ref RCC_MCO1SOURCE_HSI48       HSI48 clock selected as MCO clock
N  @endif
N  * @param  __MCODIV__ specifies the MCO clock prescaler.
N  *          This parameter can be one of the following values:
N  *            @arg @ref RCC_MCODIV_1   MCO clock source is divided by 1
N  *            @arg @ref RCC_MCODIV_2   MCO clock source is divided by 2
N  *            @arg @ref RCC_MCODIV_4   MCO clock source is divided by 4
N  *            @arg @ref RCC_MCODIV_8   MCO clock source is divided by 8
N  *            @arg @ref RCC_MCODIV_16  MCO clock source is divided by 16
N  */
N#define __HAL_RCC_MCO1_CONFIG(__MCOCLKSOURCE__, __MCODIV__) \
N                 MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCO_PRE), ((__MCOCLKSOURCE__) | (__MCODIV__)))
X#define __HAL_RCC_MCO1_CONFIG(__MCOCLKSOURCE__, __MCODIV__)                  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCO_PRE), ((__MCOCLKSOURCE__) | (__MCODIV__)))
N
N/**
N  * @}
N  */
N
N  /** @defgroup RCC_RTC_Clock_Configuration RCC RTC Clock Configuration
N  * @{   
N  */
N
N/** @brief Macro to configure the RTC clock (RTCCLK).
N  * @note   As the RTC clock configuration bits are in the Backup domain and write
N  *         access is denied to this domain after reset, you have to enable write
N  *         access using the Power Backup Access macro before to configure
N  *         the RTC clock source (to be done once after reset).    
N  * @note   Once the RTC clock is configured it cannot be changed unless the  
N  *         Backup domain is reset using @ref __HAL_RCC_BACKUPRESET_FORCE() macro, or by
N  *         a Power On Reset (POR).
N  * @note   RTC prescaler cannot be modified if HSE is enabled (HSEON = 1).
N  *
N  * @param  __RTC_CLKSOURCE__ specifies the RTC clock source.
N  *          This parameter can be one of the following values:
N  *             @arg @ref RCC_RTCCLKSOURCE_NO_CLK No clock selected as RTC clock
N  *             @arg @ref RCC_RTCCLKSOURCE_LSE LSE selected as RTC clock
N  *             @arg @ref RCC_RTCCLKSOURCE_LSI LSI selected as RTC clock
N  *             @arg @ref RCC_RTCCLKSOURCE_HSE_DIV2 HSE divided by 2 selected as RTC clock
N  *             @arg @ref RCC_RTCCLKSOURCE_HSE_DIV4 HSE divided by 4 selected as RTC clock
N  *             @arg @ref RCC_RTCCLKSOURCE_HSE_DIV8 HSE divided by 8 selected as RTC clock
N  *             @arg @ref RCC_RTCCLKSOURCE_HSE_DIV16 HSE divided by 16 selected as RTC clock
N  * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
N  *         work in STOP and STANDBY modes, and can be used as wakeup source.
N  *         However, when the HSE clock is used as RTC clock source, the RTC
N  *         cannot be used in STOP and STANDBY modes.    
N  * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
N  *         RTC clock source).
N  */
N#define __HAL_RCC_RTC_CLKPRESCALER(__RTC_CLKSOURCE__) do { \
N            if(((__RTC_CLKSOURCE__) & RCC_CSR_RTCSEL_HSE) == RCC_CSR_RTCSEL_HSE)          \
N            {                                                                             \
N              MODIFY_REG(RCC->CR, RCC_CR_RTCPRE, ((__RTC_CLKSOURCE__) & RCC_CR_RTCPRE));  \
N            }                                                                             \
N          } while (0)
X#define __HAL_RCC_RTC_CLKPRESCALER(__RTC_CLKSOURCE__) do {             if(((__RTC_CLKSOURCE__) & RCC_CSR_RTCSEL_HSE) == RCC_CSR_RTCSEL_HSE)                      {                                                                                           MODIFY_REG(RCC->CR, RCC_CR_RTCPRE, ((__RTC_CLKSOURCE__) & RCC_CR_RTCPRE));              }                                                                                       } while (0)
N
N#define __HAL_RCC_RTC_CONFIG(__RTC_CLKSOURCE__) do { \
N                                      __HAL_RCC_RTC_CLKPRESCALER(__RTC_CLKSOURCE__);      \
N                                      RCC->CSR |= ((__RTC_CLKSOURCE__) & RCC_CSR_RTCSEL); \
N                                    } while (0)
X#define __HAL_RCC_RTC_CONFIG(__RTC_CLKSOURCE__) do {                                       __HAL_RCC_RTC_CLKPRESCALER(__RTC_CLKSOURCE__);                                            RCC->CSR |= ((__RTC_CLKSOURCE__) & RCC_CSR_RTCSEL);                                     } while (0)
N                                                   
N/** @brief Macro to get the RTC clock source.
N  * @retval The clock source can be one of the following values:
N  *            @arg @ref RCC_RTCCLKSOURCE_NO_CLK No clock selected as RTC clock
N  *            @arg @ref RCC_RTCCLKSOURCE_LSE LSE selected as RTC clock
N  *            @arg @ref RCC_RTCCLKSOURCE_LSI LSI selected as RTC clock
N  *            @arg @ref RCC_RTCCLKSOURCE_HSE_DIVX HSE divided by X selected as RTC clock (X can be retrieved thanks to @ref __HAL_RCC_GET_RTC_HSE_PRESCALER()
N  */
N#define __HAL_RCC_GET_RTC_SOURCE() (READ_BIT(RCC->CSR, RCC_CSR_RTCSEL))
N
N/**
N  * @brief   Get the RTC and LCD HSE clock divider (RTCCLK / LCDCLK).
N  *
N  * @retval Returned value can be one of the following values:
N  *         @arg @ref RCC_RTC_HSE_DIV_2  HSE divided by 2 selected as RTC clock
N  *         @arg @ref RCC_RTC_HSE_DIV_4  HSE divided by 4 selected as RTC clock
N  *         @arg @ref RCC_RTC_HSE_DIV_8  HSE divided by 8 selected as RTC clock
N  *         @arg @ref RCC_RTC_HSE_DIV_16 HSE divided by 16 selected as RTC clock
N  *
N  */
N#define  __HAL_RCC_GET_RTC_HSE_PRESCALER() ((uint32_t)(READ_BIT(RCC->CR, RCC_CR_RTCPRE)))                                                   
N
N/** @brief Macro to enable the the RTC clock.
N  * @note   These macros must be used only after the RTC clock source was selected.
N  */
N#define __HAL_RCC_RTC_ENABLE() SET_BIT(RCC->CSR, RCC_CSR_RTCEN)
N
N/** @brief Macro to disable the the RTC clock.
N  * @note  These macros must be used only after the RTC clock source was selected.
N  */
N#define __HAL_RCC_RTC_DISABLE() CLEAR_BIT(RCC->CSR, RCC_CSR_RTCEN)
N
N/** @brief  Macro to force the Backup domain reset.
N  * @note   This function resets the RTC peripheral (including the backup registers)
N  *         and the RTC clock source selection in RCC_CSR register.
N  * @note   The BKPSRAM is not affected by this reset.   
N  */
N#define __HAL_RCC_BACKUPRESET_FORCE()  SET_BIT(RCC->CSR, RCC_CSR_RTCRST) 
N
N/** @brief  Macros to release the Backup domain reset.
N  */
N#define __HAL_RCC_BACKUPRESET_RELEASE() CLEAR_BIT(RCC->CSR, RCC_CSR_RTCRST) 
N
N/**
N  * @}
N  */
N
N/** @defgroup RCC_Flags_Interrupts_Management Flags Interrupts Management
N  * @brief macros to manage the specified RCC Flags and interrupts.
N  * @{
N  */
N
N/** @brief Enable RCC interrupt.
N  * @note   The CSS interrupt doesn't have an enable bit; once the CSS is enabled
N  *         and if the HSE clock fails, the CSS interrupt occurs and an NMI is
N  *         automatically generated. The NMI will be executed indefinitely, and 
N  *         since NMI has higher priority than any other IRQ (and main program)
N  *         the application will be stacked in the NMI ISR unless the CSS interrupt
N  *         pending bit is cleared.            
N  * @param  __INTERRUPT__ specifies the RCC interrupt sources to be enabled.
N  *          This parameter can be any combination of the following values:
N  *            @arg @ref RCC_IT_LSIRDY LSI ready interrupt
N  *            @arg @ref RCC_IT_LSERDY LSE ready interrupt
N  *            @arg @ref RCC_IT_HSIRDY HSI ready interrupt
N  *            @arg @ref RCC_IT_HSERDY HSE ready interrupt
N  *            @arg @ref RCC_IT_PLLRDY main PLL ready interrupt
N  *            @arg @ref RCC_IT_MSIRDY MSI ready interrupt
N  *            @arg @ref RCC_IT_LSECSS LSE CSS interrupt
N  *            @arg @ref RCC_IT_HSI48RDY HSI48 ready interrupt (not available on all devices)   
N  */
N#define __HAL_RCC_ENABLE_IT(__INTERRUPT__) SET_BIT(RCC->CIER, (__INTERRUPT__))
N
N/** @brief Disable RCC interrupt.
N  * @note   The CSS interrupt doesn't have an enable bit; once the CSS is enabled
N  *         and if the HSE clock fails, the CSS interrupt occurs and an NMI is
N  *         automatically generated. The NMI will be executed indefinitely, and 
N  *         since NMI has higher priority than any other IRQ (and main program)
N  *         the application will be stacked in the NMI ISR unless the CSS interrupt
N  *         pending bit is cleared.            
N  * @param  __INTERRUPT__ specifies the RCC interrupt sources to be disabled.
N  *          This parameter can be any combination of the following values:
N  *            @arg @ref RCC_IT_LSIRDY LSI ready interrupt
N  *            @arg @ref RCC_IT_LSERDY LSE ready interrupt
N  *            @arg @ref RCC_IT_HSIRDY HSI ready interrupt
N  *            @arg @ref RCC_IT_HSERDY HSE ready interrupt
N  *            @arg @ref RCC_IT_PLLRDY main PLL ready interrupt
N  *            @arg @ref RCC_IT_MSIRDY MSI ready interrupt
N  *            @arg @ref RCC_IT_LSECSS LSE CSS interrupt
N  *            @arg @ref RCC_IT_HSI48RDY HSI48 ready interrupt (not available on all devices)   
N  */
N#define __HAL_RCC_DISABLE_IT(__INTERRUPT__) CLEAR_BIT(RCC->CIER, (__INTERRUPT__))
N
N/** @brief Clear the RCC's interrupt pending bits.
N  * @param  __INTERRUPT__ specifies the interrupt pending bit to clear.
N  *          This parameter can be any combination of the following values:
N  *            @arg @ref RCC_IT_LSIRDY LSI ready interrupt.
N  *            @arg @ref RCC_IT_LSERDY LSE ready interrupt.
N  *            @arg @ref RCC_IT_HSIRDY HSI ready interrupt.
N  *            @arg @ref RCC_IT_HSERDY HSE ready interrupt.
N  *            @arg @ref RCC_IT_PLLRDY Main PLL ready interrupt.
N  *            @arg @ref RCC_IT_MSIRDY MSI ready interrupt
N  *            @arg @ref RCC_IT_LSECSS LSE CSS interrupt
N  *            @arg @ref RCC_IT_HSI48RDY HSI48 ready interrupt (not available on all devices)  
N  *            @arg @ref RCC_IT_CSS Clock Security System interrupt
N  */
N#define __HAL_RCC_CLEAR_IT(__INTERRUPT__) (RCC->CICR = (__INTERRUPT__))
N
N/** @brief  Check the RCC's interrupt has occurred or not.
N  * @param  __INTERRUPT__ specifies the RCC interrupt source to check.
N  *         This parameter can be one of the following values:
N  *     @arg @ref RCC_IT_LSIRDY LSI ready interrupt
N  *     @arg @ref RCC_IT_LSERDY LSE ready interrupt  
N  *     @arg @ref RCC_IT_HSIRDY HSI ready interrupt
N  *     @arg @ref RCC_IT_HSERDY HSE ready interrupt
N  *     @arg @ref RCC_IT_PLLRDY PLL ready interrupt
N  *     @arg @ref RCC_IT_MSIRDY MSI ready interrupt
N  *     @arg @ref RCC_IT_LSECSS LSE CSS interrupt 
N  *     @arg @ref RCC_IT_CSS Clock Security System interrupt
N  * @retval The new state of __INTERRUPT__ (TRUE or FALSE).
N  */
N#define __HAL_RCC_GET_IT(__INTERRUPT__) ((RCC->CIFR & (__INTERRUPT__)) == (__INTERRUPT__))
N
N
N/** @brief Set RMVF bit to clear the reset flags.
N  *         The reset flags are RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,
N  *         RCC_FLAG_OBLRST, RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
N  */
N#define __HAL_RCC_CLEAR_RESET_FLAGS() (RCC->CSR |= RCC_CSR_RMVF)
N
N/** @brief  Check RCC flag is set or not.
N  * @param  __FLAG__ specifies the flag to check.
N  *         This parameter can be one of the following values:
N  *     @arg @ref RCC_FLAG_HSIRDY HSI oscillator clock ready
N  *     @arg @ref RCC_FLAG_HSI48RDY HSI48 oscillator clock ready (not available on all devices)
N  *     @arg @ref RCC_FLAG_HSIDIV HSI16 divider flag
N  *     @arg @ref RCC_FLAG_MSIRDY MSI oscillator clock ready  
N  *     @arg @ref RCC_FLAG_HSERDY HSE oscillator clock ready
N  *     @arg @ref RCC_FLAG_PLLRDY PLL clock ready
N  *     @arg @ref RCC_FLAG_LSECSS LSE oscillator clock CSS detected  
N  *     @arg @ref RCC_FLAG_LSERDY LSE oscillator clock ready
N  *     @arg @ref RCC_FLAG_FWRST Firewall reset
N  *     @arg @ref RCC_FLAG_LSIRDY LSI oscillator clock ready
N  *     @arg @ref RCC_FLAG_OBLRST Option Byte Loader (OBL) reset 
N  *     @arg @ref RCC_FLAG_PINRST Pin reset
N  *     @arg @ref RCC_FLAG_PORRST POR/PDR reset
N  *     @arg @ref RCC_FLAG_SFTRST Software reset
N  *     @arg @ref RCC_FLAG_IWDGRST Independent Watchdog reset
N  *     @arg @ref RCC_FLAG_WWDGRST Window Watchdog reset
N  *     @arg @ref RCC_FLAG_LPWRRST Low Power reset
N  * @retval The new state of __FLAG__ (TRUE or FALSE).
N  */
N#if defined(RCC_HSI48_SUPPORT)
X#if 1L
N#define __HAL_RCC_GET_FLAG(__FLAG__) (((((((((__FLAG__) >> 5) == CR_REG_INDEX)? RCC->CR :((((__FLAG__) >> 5) == CSR_REG_INDEX) ? RCC->CSR :RCC->CRRCR)))) & ((uint32_t)1 << ((__FLAG__) & RCC_FLAG_MASK))) != 0 ) ? 1 : 0 )  
N#else
S#define __HAL_RCC_GET_FLAG(__FLAG__) (((((((((__FLAG__) >> 5) == CR_REG_INDEX)? RCC->CR : RCC->CSR))) & ((uint32_t)1 << ((__FLAG__) & RCC_FLAG_MASK))) != 0 ) ? 1 : 0 )  
N#endif /* RCC_HSI48_SUPPORT */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Include RCC HAL Extension module */
N#include "stm32l0xx_hal_rcc_ex.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_rcc_ex.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal_rcc_ex.h
N  * @author  MCD Application Team
N  * @brief   Header file of RCC HAL Extension module.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_RCC_EX_H
N#define __STM32L0xx_HAL_RCC_EX_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx_hal_def.h"
N
N/** @addtogroup STM32L0xx_HAL_Driver
N  * @{
N  */
N
N/** @addtogroup RCCEx
N  * @{
N  */ 
N
N/** @addtogroup RCCEx_Private_Constants
N * @{
N */
N
N
N#if defined(CRS)
X#if 1L
N/* CRS IT Error Mask */
N#define  RCC_CRS_IT_ERROR_MASK  ((uint32_t)(RCC_CRS_IT_TRIMOVF | RCC_CRS_IT_SYNCERR | RCC_CRS_IT_SYNCMISS))
N
N/* CRS Flag Error Mask */
N#define RCC_CRS_FLAG_ERROR_MASK ((uint32_t)(RCC_CRS_FLAG_TRIMOVF | RCC_CRS_FLAG_SYNCERR | RCC_CRS_FLAG_SYNCMISS))
N
N#endif /* CRS */
N/**
N  * @}
N  */
N
N/** @addtogroup RCCEx_Private_Macros
N  * @{
N  */
N#if defined (STM32L052xx) || defined(STM32L062xx)
X#if 0L || 0L
S#define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | \
S                                                 RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC       |  \
S                                                 RCC_PERIPHCLK_USB | RCC_PERIPHCLK_LPTIM1))
X#define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 |                                                  RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC       |                                                   RCC_PERIPHCLK_USB | RCC_PERIPHCLK_LPTIM1))
N#elif defined (STM32L053xx) || defined(STM32L063xx)
X#elif 1L || 0L
N#define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | \
N                                                 RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC       |  \
N                                                 RCC_PERIPHCLK_USB | RCC_PERIPHCLK_LPTIM1 | RCC_PERIPHCLK_LCD))
X#define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 |                                                  RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC       |                                                   RCC_PERIPHCLK_USB | RCC_PERIPHCLK_LPTIM1 | RCC_PERIPHCLK_LCD))
N#elif defined (STM32L072xx) || defined(STM32L082xx)
S#define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | \
S                                                 RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC       |  \
S                                                 RCC_PERIPHCLK_USB | RCC_PERIPHCLK_LPTIM1  | RCC_PERIPHCLK_I2C3 ))
X#define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 |                                                  RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC       |                                                   RCC_PERIPHCLK_USB | RCC_PERIPHCLK_LPTIM1  | RCC_PERIPHCLK_I2C3 ))
S#elif defined (STM32L073xx) || defined(STM32L083xx)
S#define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | \
S                                                 RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC  |  \
S                                                 RCC_PERIPHCLK_USB | RCC_PERIPHCLK_LPTIM1  | RCC_PERIPHCLK_I2C3 | \
S                                                 RCC_PERIPHCLK_LCD))
X#define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 |                                                  RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC  |                                                   RCC_PERIPHCLK_USB | RCC_PERIPHCLK_LPTIM1  | RCC_PERIPHCLK_I2C3 |                                                  RCC_PERIPHCLK_LCD))
N#endif
N
N#if defined(STM32L011xx) || defined(STM32L021xx) || defined(STM32L031xx) || defined(STM32L041xx)
X#if 0L || 0L || 0L || 0L
S#define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= ( RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | \
S                                                  RCC_PERIPHCLK_I2C1   |  RCC_PERIPHCLK_RTC    | \
S                                                  RCC_PERIPHCLK_LPTIM1))
X#define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= ( RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 |                                                   RCC_PERIPHCLK_I2C1   |  RCC_PERIPHCLK_RTC    |                                                   RCC_PERIPHCLK_LPTIM1))
S#elif defined(STM32L051xx) || defined(STM32L061xx)
X#elif 0L || 0L
S#define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | \
S                                                 RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC       |  \
S                                                 RCC_PERIPHCLK_LPTIM1))
X#define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 |                                                  RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC       |                                                   RCC_PERIPHCLK_LPTIM1))
S#elif defined(STM32L071xx) || defined(STM32L081xx)
X#elif 0L || 0L
S#define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | \
S                                                 RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC       |  \
S                                                 RCC_PERIPHCLK_LPTIM1 | RCC_PERIPHCLK_I2C3))                               
X#define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 |                                                  RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC       |                                                   RCC_PERIPHCLK_LPTIM1 | RCC_PERIPHCLK_I2C3))                               
N#endif
N
N#if defined (RCC_CCIPR_USART1SEL)
X#if 1L
N#define IS_RCC_USART1CLKSOURCE(__SOURCE__)  (((__SOURCE__) == RCC_USART1CLKSOURCE_PCLK2)  || \
N                                             ((__SOURCE__) == RCC_USART1CLKSOURCE_SYSCLK) || \
N                                             ((__SOURCE__) == RCC_USART1CLKSOURCE_LSE)    || \
N                                             ((__SOURCE__) == RCC_USART1CLKSOURCE_HSI))
X#define IS_RCC_USART1CLKSOURCE(__SOURCE__)  (((__SOURCE__) == RCC_USART1CLKSOURCE_PCLK2)  ||                                              ((__SOURCE__) == RCC_USART1CLKSOURCE_SYSCLK) ||                                              ((__SOURCE__) == RCC_USART1CLKSOURCE_LSE)    ||                                              ((__SOURCE__) == RCC_USART1CLKSOURCE_HSI))
N#endif /* RCC_CCIPR_USART1SEL */
N
N#define IS_RCC_USART2CLKSOURCE(__SOURCE__)  (((__SOURCE__) == RCC_USART2CLKSOURCE_PCLK1)  || \
N                                             ((__SOURCE__) == RCC_USART2CLKSOURCE_SYSCLK) || \
N                                             ((__SOURCE__) == RCC_USART2CLKSOURCE_LSE)    || \
N                                             ((__SOURCE__) == RCC_USART2CLKSOURCE_HSI))
X#define IS_RCC_USART2CLKSOURCE(__SOURCE__)  (((__SOURCE__) == RCC_USART2CLKSOURCE_PCLK1)  ||                                              ((__SOURCE__) == RCC_USART2CLKSOURCE_SYSCLK) ||                                              ((__SOURCE__) == RCC_USART2CLKSOURCE_LSE)    ||                                              ((__SOURCE__) == RCC_USART2CLKSOURCE_HSI))
N    
N#define IS_RCC_LPUART1CLKSOURCE(__SOURCE__) (((__SOURCE__) == RCC_LPUART1CLKSOURCE_PCLK1)  || \
N                                             ((__SOURCE__) == RCC_LPUART1CLKSOURCE_SYSCLK) || \
N                                             ((__SOURCE__) == RCC_LPUART1CLKSOURCE_LSE)    || \
N                                             ((__SOURCE__) == RCC_LPUART1CLKSOURCE_HSI))
X#define IS_RCC_LPUART1CLKSOURCE(__SOURCE__) (((__SOURCE__) == RCC_LPUART1CLKSOURCE_PCLK1)  ||                                              ((__SOURCE__) == RCC_LPUART1CLKSOURCE_SYSCLK) ||                                              ((__SOURCE__) == RCC_LPUART1CLKSOURCE_LSE)    ||                                              ((__SOURCE__) == RCC_LPUART1CLKSOURCE_HSI))
N
N#define IS_RCC_I2C1CLKSOURCE(__SOURCE__) (((__SOURCE__) == RCC_I2C1CLKSOURCE_PCLK1) || \
N                                          ((__SOURCE__) == RCC_I2C1CLKSOURCE_SYSCLK)|| \
N                                          ((__SOURCE__) == RCC_I2C1CLKSOURCE_HSI))
X#define IS_RCC_I2C1CLKSOURCE(__SOURCE__) (((__SOURCE__) == RCC_I2C1CLKSOURCE_PCLK1) ||                                           ((__SOURCE__) == RCC_I2C1CLKSOURCE_SYSCLK)||                                           ((__SOURCE__) == RCC_I2C1CLKSOURCE_HSI))
N                                          
N#if defined(RCC_CCIPR_I2C3SEL)  
X#if 0L  
S#define IS_RCC_I2C3CLKSOURCE(__SOURCE__)  (((__SOURCE__) == RCC_I2C3CLKSOURCE_PCLK1) || \
S                                           ((__SOURCE__) == RCC_I2C3CLKSOURCE_SYSCLK)|| \
S                                           ((__SOURCE__) == RCC_I2C3CLKSOURCE_HSI))
X#define IS_RCC_I2C3CLKSOURCE(__SOURCE__)  (((__SOURCE__) == RCC_I2C3CLKSOURCE_PCLK1) ||                                            ((__SOURCE__) == RCC_I2C3CLKSOURCE_SYSCLK)||                                            ((__SOURCE__) == RCC_I2C3CLKSOURCE_HSI))
N#endif /* RCC_CCIPR_I2C3SEL */
N                                           
N#if defined(USB)
X#if 1L
N#define IS_RCC_USBCLKSOURCE(__SOURCE__)  (((__SOURCE__) == RCC_USBCLKSOURCE_HSI48) || \
N                                          ((__SOURCE__) == RCC_USBCLKSOURCE_PLL))
X#define IS_RCC_USBCLKSOURCE(__SOURCE__)  (((__SOURCE__) == RCC_USBCLKSOURCE_HSI48) ||                                           ((__SOURCE__) == RCC_USBCLKSOURCE_PLL))
N#endif /* USB */
N
N#if defined(RNG)
X#if 1L
N#define IS_RCC_RNGCLKSOURCE(_SOURCE_)  (((_SOURCE_) == RCC_RNGCLKSOURCE_HSI48) || \
N                                      ((_SOURCE_) == RCC_RNGCLKSOURCE_PLLCLK))
X#define IS_RCC_RNGCLKSOURCE(_SOURCE_)  (((_SOURCE_) == RCC_RNGCLKSOURCE_HSI48) ||                                       ((_SOURCE_) == RCC_RNGCLKSOURCE_PLLCLK))
N#endif /* RNG */
N                                      
N#if defined(RCC_CCIPR_HSI48SEL)
X#if 1L
N#define IS_RCC_HSI48MCLKSOURCE(__HSI48MCLK__) (((__HSI48MCLK__) == RCC_HSI48M_PLL) || ((__HSI48MCLK__) == RCC_HSI48M_HSI48))
N#endif /* RCC_CCIPR_HSI48SEL */
N                                          
N#define IS_RCC_LPTIMCLK(__LPTIMCLK_)     (((__LPTIMCLK_) == RCC_LPTIM1CLKSOURCE_PCLK) || \
N                                          ((__LPTIMCLK_) == RCC_LPTIM1CLKSOURCE_LSI)  || \
N                                          ((__LPTIMCLK_) == RCC_LPTIM1CLKSOURCE_HSI)  || \
N                                          ((__LPTIMCLK_) == RCC_LPTIM1CLKSOURCE_LSE))
X#define IS_RCC_LPTIMCLK(__LPTIMCLK_)     (((__LPTIMCLK_) == RCC_LPTIM1CLKSOURCE_PCLK) ||                                           ((__LPTIMCLK_) == RCC_LPTIM1CLKSOURCE_LSI)  ||                                           ((__LPTIMCLK_) == RCC_LPTIM1CLKSOURCE_HSI)  ||                                           ((__LPTIMCLK_) == RCC_LPTIM1CLKSOURCE_LSE))
N
N#define IS_RCC_STOPWAKEUP_CLOCK(__SOURCE__) (((__SOURCE__) == RCC_STOP_WAKEUPCLOCK_MSI) || \
N                                             ((__SOURCE__) == RCC_STOP_WAKEUPCLOCK_HSI))
X#define IS_RCC_STOPWAKEUP_CLOCK(__SOURCE__) (((__SOURCE__) == RCC_STOP_WAKEUPCLOCK_MSI) ||                                              ((__SOURCE__) == RCC_STOP_WAKEUPCLOCK_HSI))
N
N#define IS_RCC_LSE_DRIVE(__DRIVE__) (((__DRIVE__) == RCC_LSEDRIVE_LOW)        || ((__SOURCE__) == RCC_LSEDRIVE_MEDIUMLOW) || \
N                                     ((__DRIVE__) == RCC_LSEDRIVE_MEDIUMHIGH) || ((__SOURCE__) == RCC_LSEDRIVE_HIGH))
X#define IS_RCC_LSE_DRIVE(__DRIVE__) (((__DRIVE__) == RCC_LSEDRIVE_LOW)        || ((__SOURCE__) == RCC_LSEDRIVE_MEDIUMLOW) ||                                      ((__DRIVE__) == RCC_LSEDRIVE_MEDIUMHIGH) || ((__SOURCE__) == RCC_LSEDRIVE_HIGH))
N
N#if defined(CRS)
X#if 1L
N
N#define IS_RCC_CRS_SYNC_SOURCE(_SOURCE_) (((_SOURCE_) == RCC_CRS_SYNC_SOURCE_GPIO) || \
N                                          ((_SOURCE_) == RCC_CRS_SYNC_SOURCE_LSE)  || \
N                                          ((_SOURCE_) == RCC_CRS_SYNC_SOURCE_USB))
X#define IS_RCC_CRS_SYNC_SOURCE(_SOURCE_) (((_SOURCE_) == RCC_CRS_SYNC_SOURCE_GPIO) ||                                           ((_SOURCE_) == RCC_CRS_SYNC_SOURCE_LSE)  ||                                           ((_SOURCE_) == RCC_CRS_SYNC_SOURCE_USB))
N#define IS_RCC_CRS_SYNC_DIV(_DIV_) (((_DIV_) == RCC_CRS_SYNC_DIV1)  || ((_DIV_) == RCC_CRS_SYNC_DIV2)  || \
N                                    ((_DIV_) == RCC_CRS_SYNC_DIV4)  || ((_DIV_) == RCC_CRS_SYNC_DIV8)  || \
N                                    ((_DIV_) == RCC_CRS_SYNC_DIV16) || ((_DIV_) == RCC_CRS_SYNC_DIV32) || \
N                                    ((_DIV_) == RCC_CRS_SYNC_DIV64) || ((_DIV_) == RCC_CRS_SYNC_DIV128))
X#define IS_RCC_CRS_SYNC_DIV(_DIV_) (((_DIV_) == RCC_CRS_SYNC_DIV1)  || ((_DIV_) == RCC_CRS_SYNC_DIV2)  ||                                     ((_DIV_) == RCC_CRS_SYNC_DIV4)  || ((_DIV_) == RCC_CRS_SYNC_DIV8)  ||                                     ((_DIV_) == RCC_CRS_SYNC_DIV16) || ((_DIV_) == RCC_CRS_SYNC_DIV32) ||                                     ((_DIV_) == RCC_CRS_SYNC_DIV64) || ((_DIV_) == RCC_CRS_SYNC_DIV128))
N#define IS_RCC_CRS_SYNC_POLARITY(_POLARITY_) (((_POLARITY_) == RCC_CRS_SYNC_POLARITY_RISING) || \
N                                              ((_POLARITY_) == RCC_CRS_SYNC_POLARITY_FALLING))
X#define IS_RCC_CRS_SYNC_POLARITY(_POLARITY_) (((_POLARITY_) == RCC_CRS_SYNC_POLARITY_RISING) ||                                               ((_POLARITY_) == RCC_CRS_SYNC_POLARITY_FALLING))
N#define IS_RCC_CRS_RELOADVALUE(_VALUE_) (((_VALUE_) <= 0xFFFF))
N#define IS_RCC_CRS_ERRORLIMIT(_VALUE_) (((_VALUE_) <= 0xFF))
N#define IS_RCC_CRS_HSI48CALIBRATION(_VALUE_) (((_VALUE_) <= 0x3F))
N#define IS_RCC_CRS_FREQERRORDIR(_DIR_) (((_DIR_) == RCC_CRS_FREQERRORDIR_UP) || \
N                                        ((_DIR_) == RCC_CRS_FREQERRORDIR_DOWN))
X#define IS_RCC_CRS_FREQERRORDIR(_DIR_) (((_DIR_) == RCC_CRS_FREQERRORDIR_UP) ||                                         ((_DIR_) == RCC_CRS_FREQERRORDIR_DOWN))
N#endif /* CRS */
N/**
N  * @}
N  */
N
N/* Exported types ------------------------------------------------------------*/ 
N
N/** @defgroup RCCEx_Exported_Types RCCEx Exported Types
N  * @{
N  */
N
N/** 
N  * @brief  RCC extended clocks structure definition  
N  */
Ntypedef struct
N{
N  uint32_t PeriphClockSelection;                /*!< The Extended Clock to be configured.
N                                      This parameter can be a value of @ref RCCEx_Periph_Clock_Selection */
N
N  uint32_t RTCClockSelection;         /*!< specifies the RTC clock source.
N                                       This parameter can be a value of @ref RCC_RTC_LCD_Clock_Source */
N
N#if defined(LCD)
X#if 1L
N
N  uint32_t LCDClockSelection;         /*!< specifies the LCD clock source.
N                                       This parameter can be a value of @ref RCC_RTC_LCD_Clock_Source */
N
N#endif /* LCD */
N#if defined(RCC_CCIPR_USART1SEL)
X#if 1L
N  uint32_t Usart1ClockSelection;   /*!< USART1 clock source      
N                                        This parameter can be a value of @ref RCCEx_USART1_Clock_Source */
N#endif /* RCC_CCIPR_USART1SEL */
N  uint32_t Usart2ClockSelection;   /*!< USART2 clock source      
N                                        This parameter can be a value of @ref RCCEx_USART2_Clock_Source */
N                                   
N  uint32_t Lpuart1ClockSelection;  /*!< LPUART1 clock source      
N                                        This parameter can be a value of @ref RCCEx_LPUART1_Clock_Source */
N                                   
N  uint32_t I2c1ClockSelection;     /*!< I2C1 clock source      
N                                        This parameter can be a value of @ref RCCEx_I2C1_Clock_Source */
N                                   
N#if defined(RCC_CCIPR_I2C3SEL)
X#if 0L
S  uint32_t I2c3ClockSelection;     /*!< I2C3 clock source      
S                                        This parameter can be a value of @ref RCCEx_I2C3_Clock_Source */
N#endif /* RCC_CCIPR_I2C3SEL */
N  uint32_t LptimClockSelection;    /*!< LPTIM1 clock source
N                                        This parameter can be a value of @ref RCCEx_LPTIM1_Clock_Source */
N#if defined(USB)
X#if 1L
N  uint32_t UsbClockSelection;      /*!< Specifies USB and RNG Clock  Selection
N                                        This parameter can be a value of @ref RCCEx_USB_Clock_Source */
N#endif /* USB */
N} RCC_PeriphCLKInitTypeDef;
N
N#if defined (CRS)
X#if 1L
N/** 
N  * @brief RCC_CRS Init structure definition  
N  */
Ntypedef struct
N{
N  uint32_t Prescaler;             /*!< Specifies the division factor of the SYNC signal.
N                                     This parameter can be a value of @ref RCCEx_CRS_SynchroDivider */
N
N  uint32_t Source;                /*!< Specifies the SYNC signal source.
N                                     This parameter can be a value of @ref RCCEx_CRS_SynchroSource */
N
N  uint32_t Polarity;              /*!< Specifies the input polarity for the SYNC signal source.
N                                     This parameter can be a value of @ref RCCEx_CRS_SynchroPolarity */
N
N  uint32_t ReloadValue;           /*!< Specifies the value to be loaded in the frequency error counter with each SYNC event.
N                                      It can be calculated in using macro @ref __HAL_RCC_CRS_RELOADVALUE_CALCULATE(__FTARGET__, __FSYNC__)
N                                     This parameter must be a number between 0 and 0xFFFF or a value of @ref RCCEx_CRS_ReloadValueDefault .*/
N
N  uint32_t ErrorLimitValue;       /*!< Specifies the value to be used to evaluate the captured frequency error value.
N                                     This parameter must be a number between 0 and 0xFF or a value of @ref RCCEx_CRS_ErrorLimitDefault */
N
N  uint32_t HSI48CalibrationValue; /*!< Specifies a user-programmable trimming value to the HSI48 oscillator.
N                                     This parameter must be a number between 0 and 0x3F or a value of @ref RCCEx_CRS_HSI48CalibrationDefault */
N
N}RCC_CRSInitTypeDef;
N
N/** 
N  * @brief RCC_CRS Synchronization structure definition  
N  */
Ntypedef struct
N{
N  uint32_t ReloadValue;           /*!< Specifies the value loaded in the Counter reload value.
N                                     This parameter must be a number between 0 and 0xFFFF */
N
N  uint32_t HSI48CalibrationValue; /*!< Specifies value loaded in HSI48 oscillator smooth trimming.
N                                     This parameter must be a number between 0 and 0x3F */
N
N  uint32_t FreqErrorCapture;      /*!< Specifies the value loaded in the .FECAP, the frequency error counter 
N                                                                    value latched in the time of the last SYNC event.
N                                    This parameter must be a number between 0 and 0xFFFF */
N
N  uint32_t FreqErrorDirection;    /*!< Specifies the value loaded in the .FEDIR, the counting direction of the 
N                                                                    frequency error counter latched in the time of the last SYNC event. 
N                                                                    It shows whether the actual frequency is below or above the target.
N                                    This parameter must be a value of @ref RCCEx_CRS_FreqErrorDirection*/
N
N}RCC_CRSSynchroInfoTypeDef;
N
N#endif /* CRS */
N
N/**
N  * @}
N  */
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup RCCEx_Exported_Constants RCCEx Exported Constants
N  * @{
N  */
N
N
N/** @defgroup RCCEx_EXTI_LINE_LSECSS  RCC LSE CSS external interrupt line
N  * @{
N  */
N#define RCC_EXTI_LINE_LSECSS             (EXTI_IMR_IM19)         /*!< External interrupt line 19 connected to the LSE CSS EXTI Line */
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_Periph_Clock_Selection  RCCEx Periph Clock Selection
N  * @{
N  */
N#if defined(RCC_CCIPR_USART1SEL)
X#if 1L
N#define RCC_PERIPHCLK_USART1           ((uint32_t)0x00000001)
N#endif /* RCC_CCIPR_USART1SEL */
N#define RCC_PERIPHCLK_USART2           ((uint32_t)0x00000002)
N#define RCC_PERIPHCLK_LPUART1          ((uint32_t)0x00000004)
N#define RCC_PERIPHCLK_I2C1             ((uint32_t)0x00000008)
N#define RCC_PERIPHCLK_I2C2             ((uint32_t)0x00000010)
N#define RCC_PERIPHCLK_RTC              ((uint32_t)0x00000020)
N#if defined(USB)
X#if 1L
N#define RCC_PERIPHCLK_USB              ((uint32_t)0x00000040)
N#endif /* USB */
N#define RCC_PERIPHCLK_LPTIM1           ((uint32_t)0x00000080)
N#if defined(LCD)
X#if 1L
N#define RCC_PERIPHCLK_LCD              ((uint32_t)0x00000800)
N#endif /* LCD */
N#if defined(RCC_CCIPR_I2C3SEL)
X#if 0L
S#define RCC_PERIPHCLK_I2C3             ((uint32_t)0x00000100)
N#endif /* RCC_CCIPR_I2C3SEL */
N
N/**
N  * @}
N  */
N
N#if defined (RCC_CCIPR_USART1SEL)
X#if 1L
N/** @defgroup RCCEx_USART1_Clock_Source RCCEx USART1 Clock Source
N  * @{
N  */
N#define RCC_USART1CLKSOURCE_PCLK2        (0x00000000U) 
N#define RCC_USART1CLKSOURCE_SYSCLK       RCC_CCIPR_USART1SEL_0
N#define RCC_USART1CLKSOURCE_HSI          RCC_CCIPR_USART1SEL_1
N#define RCC_USART1CLKSOURCE_LSE          (RCC_CCIPR_USART1SEL_0 | RCC_CCIPR_USART1SEL_1)
N/**
N  * @}
N  */
N#endif /* RCC_CCIPR_USART1SEL */
N
N/** @defgroup RCCEx_USART2_Clock_Source RCCEx USART2 Clock Source
N  * @{
N  */
N#define RCC_USART2CLKSOURCE_PCLK1        (0x00000000U) 
N#define RCC_USART2CLKSOURCE_SYSCLK       RCC_CCIPR_USART2SEL_0
N#define RCC_USART2CLKSOURCE_HSI          RCC_CCIPR_USART2SEL_1
N#define RCC_USART2CLKSOURCE_LSE          (RCC_CCIPR_USART2SEL_0 | RCC_CCIPR_USART2SEL_1)
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_LPUART1_Clock_Source RCCEx LPUART1 Clock Source
N  * @{
N  */
N#define RCC_LPUART1CLKSOURCE_PCLK1        (0x00000000U) 
N#define RCC_LPUART1CLKSOURCE_SYSCLK       RCC_CCIPR_LPUART1SEL_0
N#define RCC_LPUART1CLKSOURCE_HSI          RCC_CCIPR_LPUART1SEL_1
N#define RCC_LPUART1CLKSOURCE_LSE          (RCC_CCIPR_LPUART1SEL_0 | RCC_CCIPR_LPUART1SEL_1)
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_I2C1_Clock_Source RCCEx I2C1 Clock Source
N  * @{
N  */
N#define RCC_I2C1CLKSOURCE_PCLK1          (0x00000000U) 
N#define RCC_I2C1CLKSOURCE_SYSCLK         RCC_CCIPR_I2C1SEL_0
N#define RCC_I2C1CLKSOURCE_HSI            RCC_CCIPR_I2C1SEL_1
N/**
N  * @}
N  */
N
N#if defined(RCC_CCIPR_I2C3SEL)  
X#if 0L  
S
S/** @defgroup RCCEx_I2C3_Clock_Source RCCEx I2C3 Clock Source
S  * @{
S  */
S#define RCC_I2C3CLKSOURCE_PCLK1          (0x00000000U) 
S#define RCC_I2C3CLKSOURCE_SYSCLK         RCC_CCIPR_I2C3SEL_0
S#define RCC_I2C3CLKSOURCE_HSI            RCC_CCIPR_I2C3SEL_1
S/**
S  * @}
S  */
N#endif /* RCC_CCIPR_I2C3SEL */ 
N
N/** @defgroup RCCEx_TIM_PRescaler_Selection  RCCEx TIM Prescaler Selection
N  * @{
N  */
N#define RCC_TIMPRES_DESACTIVATED        ((uint8_t)0x00)
N#define RCC_TIMPRES_ACTIVATED           ((uint8_t)0x01)
N/**
N  * @}
N  */
N
N#if defined(USB)
X#if 1L
N/** @defgroup RCCEx_USB_Clock_Source RCCEx USB Clock Source
N  * @{
N  */
N#define RCC_USBCLKSOURCE_HSI48           RCC_CCIPR_HSI48SEL
N#define RCC_USBCLKSOURCE_PLL             (0x00000000U)
N/**
N  * @}
N  */
N#endif /* USB */
N  
N#if defined(RNG)
X#if 1L
N/** @defgroup RCCEx_RNG_Clock_Source RCCEx RNG Clock Source
N  * @{
N  */
N#define RCC_RNGCLKSOURCE_HSI48           RCC_CCIPR_HSI48SEL
N#define RCC_RNGCLKSOURCE_PLLCLK          (0x00000000U)
N/**
N  * @}
N  */  
N#endif /* RNG */
N
N#if defined(RCC_CCIPR_HSI48SEL)
X#if 1L
N/** @defgroup RCCEx_HSI48M_Clock_Source RCCEx HSI48M Clock Source
N  * @{
N  */
N#define RCC_FLAG_HSI48                   SYSCFG_CFGR3_VREFINT_RDYF
N
N#define RCC_HSI48M_PLL                   (0x00000000U)
N#define RCC_HSI48M_HSI48                 RCC_CCIPR_HSI48SEL
N
N/**
N  * @}
N  */
N#endif /* RCC_CCIPR_HSI48SEL */ 
N
N/** @defgroup RCCEx_LPTIM1_Clock_Source RCCEx LPTIM1 Clock Source
N  * @{
N  */
N#define RCC_LPTIM1CLKSOURCE_PCLK         (0x00000000U)
N#define RCC_LPTIM1CLKSOURCE_LSI          RCC_CCIPR_LPTIM1SEL_0
N#define RCC_LPTIM1CLKSOURCE_HSI          RCC_CCIPR_LPTIM1SEL_1
N#define RCC_LPTIM1CLKSOURCE_LSE          RCC_CCIPR_LPTIM1SEL
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_StopWakeUp_Clock RCCEx StopWakeUp Clock
N  * @{
N  */
N
N#define RCC_STOP_WAKEUPCLOCK_MSI         (0x00000000U)
N#define RCC_STOP_WAKEUPCLOCK_HSI         RCC_CFGR_STOPWUCK
N/**
N  * @}
N  */ 
N
N/** @defgroup RCCEx_LSEDrive_Configuration RCCEx LSE Drive Configuration
N  * @{
N  */
N
N#define RCC_LSEDRIVE_LOW                 (0x00000000U)
N#define RCC_LSEDRIVE_MEDIUMLOW           RCC_CSR_LSEDRV_0
N#define RCC_LSEDRIVE_MEDIUMHIGH          RCC_CSR_LSEDRV_1
N#define RCC_LSEDRIVE_HIGH                RCC_CSR_LSEDRV
N/**
N  * @}
N  */  
N
N#if defined(CRS)
X#if 1L
N
N/** @defgroup RCCEx_CRS_Status RCCEx CRS Status
N  * @{
N  */
N#define RCC_CRS_NONE      (0x00000000U)
N#define RCC_CRS_TIMEOUT   ((uint32_t)0x00000001)
N#define RCC_CRS_SYNCOK    ((uint32_t)0x00000002)
N#define RCC_CRS_SYNCWARN  ((uint32_t)0x00000004)
N#define RCC_CRS_SYNCERR   ((uint32_t)0x00000008)
N#define RCC_CRS_SYNCMISS  ((uint32_t)0x00000010)
N#define RCC_CRS_TRIMOVF   ((uint32_t)0x00000020)
N
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_CRS_SynchroSource RCCEx CRS Synchronization Source
N  * @{
N  */
N#define RCC_CRS_SYNC_SOURCE_GPIO       ((uint32_t)0x00000000U) /*!< Synchro Signal source GPIO */
N#define RCC_CRS_SYNC_SOURCE_LSE        CRS_CFGR_SYNCSRC_0      /*!< Synchro Signal source LSE */
N#define RCC_CRS_SYNC_SOURCE_USB        CRS_CFGR_SYNCSRC_1      /*!< Synchro Signal source USB SOF (default)*/
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_CRS_SynchroDivider RCCEx CRS Synchronization Divider
N  * @{
N  */
N#define RCC_CRS_SYNC_DIV1        ((uint32_t)0x00000000U)                   /*!< Synchro Signal not divided (default) */
N#define RCC_CRS_SYNC_DIV2        CRS_CFGR_SYNCDIV_0                        /*!< Synchro Signal divided by 2 */
N#define RCC_CRS_SYNC_DIV4        CRS_CFGR_SYNCDIV_1                        /*!< Synchro Signal divided by 4 */
N#define RCC_CRS_SYNC_DIV8        (CRS_CFGR_SYNCDIV_1 | CRS_CFGR_SYNCDIV_0) /*!< Synchro Signal divided by 8 */
N#define RCC_CRS_SYNC_DIV16       CRS_CFGR_SYNCDIV_2                        /*!< Synchro Signal divided by 16 */
N#define RCC_CRS_SYNC_DIV32       (CRS_CFGR_SYNCDIV_2 | CRS_CFGR_SYNCDIV_0) /*!< Synchro Signal divided by 32 */
N#define RCC_CRS_SYNC_DIV64       (CRS_CFGR_SYNCDIV_2 | CRS_CFGR_SYNCDIV_1) /*!< Synchro Signal divided by 64 */
N#define RCC_CRS_SYNC_DIV128      CRS_CFGR_SYNCDIV                          /*!< Synchro Signal divided by 128 */
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_CRS_SynchroPolarity RCCEx CRS Synchronization Polarity
N  * @{
N  */
N#define RCC_CRS_SYNC_POLARITY_RISING   ((uint32_t)0x00000000U) /*!< Synchro Active on rising edge (default) */
N#define RCC_CRS_SYNC_POLARITY_FALLING  CRS_CFGR_SYNCPOL        /*!< Synchro Active on falling edge */
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_CRS_ReloadValueDefault RCCEx CRS Default Reload Value
N  * @{
N  */
N#define RCC_CRS_RELOADVALUE_DEFAULT    ((uint32_t)0x0000BB7FU) /*!< The reset value of the RELOAD field corresponds 
N                                                                    to a target frequency of 48 MHz and a synchronization signal frequency of 1 kHz (SOF signal from USB). */
N/**
N  * @}
N  */
N  
N/** @defgroup RCCEx_CRS_ErrorLimitDefault RCCEx CRS Default Error Limit Value
N  * @{
N  */
N#define RCC_CRS_ERRORLIMIT_DEFAULT     ((uint32_t)0x00000022U) /*!< Default Frequency error limit */
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_CRS_HSI48CalibrationDefault RCCEx CRS Default HSI48 Calibration vakye
N  * @{
N  */
N#define RCC_CRS_HSI48CALIBRATION_DEFAULT ((uint32_t)0x00000020U) /*!< The default value is 32, which corresponds to the middle of the trimming interval. 
N                                                                      The trimming step is around 67 kHz between two consecutive TRIM steps. A higher TRIM value
N                                                                      corresponds to a higher output frequency */  
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_CRS_FreqErrorDirection RCCEx CRS Frequency Error Direction
N  * @{
N  */
N#define RCC_CRS_FREQERRORDIR_UP        ((uint32_t)0x00000000U)   /*!< Upcounting direction, the actual frequency is above the target */
N#define RCC_CRS_FREQERRORDIR_DOWN      ((uint32_t)CRS_ISR_FEDIR) /*!< Downcounting direction, the actual frequency is below the target */
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_CRS_Interrupt_Sources RCCEx CRS Interrupt Sources
N  * @{
N  */
N#define RCC_CRS_IT_SYNCOK              CRS_CR_SYNCOKIE           /*!< SYNC event OK */
N#define RCC_CRS_IT_SYNCWARN            CRS_CR_SYNCWARNIE         /*!< SYNC warning */
N#define RCC_CRS_IT_ERR                 CRS_CR_ERRIE              /*!< Error */
N#define RCC_CRS_IT_ESYNC               CRS_CR_ESYNCIE            /*!< Expected SYNC */
N#define RCC_CRS_IT_SYNCERR             CRS_CR_ERRIE              /*!< SYNC error */
N#define RCC_CRS_IT_SYNCMISS            CRS_CR_ERRIE              /*!< SYNC missed */
N#define RCC_CRS_IT_TRIMOVF             CRS_CR_ERRIE              /*!< Trimming overflow or underflow */
N
N/**
N  * @}
N  */
N  
N/** @defgroup RCCEx_CRS_Flags RCCEx CRS Flags
N  * @{
N  */
N#define RCC_CRS_FLAG_SYNCOK            CRS_ISR_SYNCOKF           /*!< SYNC event OK flag     */
N#define RCC_CRS_FLAG_SYNCWARN          CRS_ISR_SYNCWARNF         /*!< SYNC warning flag      */
N#define RCC_CRS_FLAG_ERR               CRS_ISR_ERRF              /*!< Error flag        */
N#define RCC_CRS_FLAG_ESYNC             CRS_ISR_ESYNCF            /*!< Expected SYNC flag     */
N#define RCC_CRS_FLAG_SYNCERR           CRS_ISR_SYNCERR           /*!< SYNC error */
N#define RCC_CRS_FLAG_SYNCMISS          CRS_ISR_SYNCMISS          /*!< SYNC missed*/
N#define RCC_CRS_FLAG_TRIMOVF           CRS_ISR_TRIMOVF           /*!< Trimming overflow or underflow */
N
N/**
N  * @}
N  */
N
N#endif /* CRS */
N
N/**
N  * @}
N  */
N
N/* Exported macro ------------------------------------------------------------*/
N/** @defgroup RCCEx_Exported_Macros RCCEx Exported Macros
N * @{
N */
N
N/** @defgroup RCCEx_Peripheral_Clock_Enable_Disable AHB Peripheral Clock Enable Disable
N  * @brief  Enable or disable the AHB peripheral clock.
N  * @note   After reset, the peripheral clock (used for registers read/write access)
N  *         is disabled and the application software has to enable this clock before
N  *         using it.
N  * @{
N  */
N
N#if defined(STM32L062xx) || defined(STM32L063xx)|| defined(STM32L082xx) || defined(STM32L083xx) || defined(STM32L041xx) || defined(STM32L021xx)
X#if 0L || 0L|| 0L || 0L || 0L || 0L
S#define __HAL_RCC_AES_CLK_ENABLE()   do { \
S                                        __IO uint32_t tmpreg; \
S                                        SET_BIT(RCC->AHBENR, RCC_AHBENR_CRYPEN);\
S                                        /* Delay after an RCC peripheral clock enabling */ \
S                                        tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_CRYPEN);\
S                                        UNUSED(tmpreg); \
S                                      } while(0)
X#define __HAL_RCC_AES_CLK_ENABLE()   do {                                         __IO uint32_t tmpreg;                                         SET_BIT(RCC->AHBENR, RCC_AHBENR_CRYPEN);                                                                                  tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_CRYPEN);                                        UNUSED(tmpreg);                                       } while(0)
S#define __HAL_RCC_AES_CLK_DISABLE()         CLEAR_BIT(RCC->AHBENR, (RCC_AHBENR_CRYPEN))
S
S#define __HAL_RCC_AES_IS_CLK_ENABLED()        (READ_BIT(RCC->AHBENR, RCC_AHBENR_CRYPEN) != RESET)
S#define __HAL_RCC_AES_IS_CLK_DISABLED()       (READ_BIT(RCC->AHBENR, RCC_AHBENR_CRYPEN) == RESET)
S
N#endif /* STM32L062xx || STM32L063xx || STM32L072xx  || STM32L073xx || STM32L082xx  || STM32L083xx || STM32L041xx || STM32L021xx */
N
N#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx) && !defined(STM32L051xx) && !defined(STM32L061xx) && !defined(STM32L071xx) && !defined(STM32L081xx) 
X#if !0L && !0L && !0L && !0L && !0L && !0L && !0L && !0L 
N#define __HAL_RCC_TSC_CLK_ENABLE()   do { \
N                                        __IO uint32_t tmpreg; \
N                                        SET_BIT(RCC->AHBENR, RCC_AHBENR_TSCEN);\
N                                        /* Delay after an RCC peripheral clock enabling */ \
N                                        tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_TSCEN);\
N                                        UNUSED(tmpreg); \
N                                      } while(0)
X#define __HAL_RCC_TSC_CLK_ENABLE()   do {                                         __IO uint32_t tmpreg;                                         SET_BIT(RCC->AHBENR, RCC_AHBENR_TSCEN);                                                                                  tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_TSCEN);                                        UNUSED(tmpreg);                                       } while(0)
N#define __HAL_RCC_TSC_CLK_DISABLE()            CLEAR_BIT(RCC->AHBENR, (RCC_AHBENR_TSCEN))
N
N#define __HAL_RCC_TSC_IS_CLK_ENABLED()        (READ_BIT(RCC->AHBENR, RCC_AHBENR_TSCEN) != RESET)
N#define __HAL_RCC_TSC_IS_CLK_DISABLED()       (READ_BIT(RCC->AHBENR, RCC_AHBENR_TSCEN) == RESET)
N
N#define __HAL_RCC_RNG_CLK_ENABLE()   do { \
N                                        __IO uint32_t tmpreg; \
N                                        SET_BIT(RCC->AHBENR, RCC_AHBENR_RNGEN);\
N                                        /* Delay after an RCC peripheral clock enabling */ \
N                                        tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_RNGEN);\
N                                        UNUSED(tmpreg); \
N                                      } while(0)
X#define __HAL_RCC_RNG_CLK_ENABLE()   do {                                         __IO uint32_t tmpreg;                                         SET_BIT(RCC->AHBENR, RCC_AHBENR_RNGEN);                                                                                  tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_RNGEN);                                        UNUSED(tmpreg);                                       } while(0)
N#define __HAL_RCC_RNG_CLK_DISABLE()           CLEAR_BIT(RCC->AHBENR, (RCC_AHBENR_RNGEN))
N
N#define __HAL_RCC_RNG_IS_CLK_ENABLED()        (READ_BIT(RCC->AHBENR, RCC_AHBENR_RNGEN) != RESET)
N#define __HAL_RCC_RNG_IS_CLK_DISABLED()       (READ_BIT(RCC->AHBENR, RCC_AHBENR_RNGEN) == RESET)
N#endif /* !(STM32L011xx) && !(STM32L021xx) && !(STM32L031xx ) && !(STM32L041xx ) && !(STM32L051xx ) && !(STM32L061xx ) && !(STM32L071xx ) && !(STM32L081xx ) */
N
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_IOPORT_Clock_Enable_Disable IOPORT Peripheral Clock Enable Disable
N  * @brief  Enable or disable the IOPORT peripheral clock.
N  * @note   After reset, the peripheral clock (used for registers read/write access)
N  *         is disabled and the application software has to enable this clock before 
N  *         using it.
N  * @{
N  */
N#if defined(GPIOE)
X#if 0L
S#define __HAL_RCC_GPIOE_CLK_ENABLE()   do { \
S                                        __IO uint32_t tmpreg; \
S                                        SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOEEN);\
S                                        /* Delay after an RCC peripheral clock enabling */ \
S                                        tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOEEN);\
S                                        UNUSED(tmpreg); \
S                                      } while(0)
X#define __HAL_RCC_GPIOE_CLK_ENABLE()   do {                                         __IO uint32_t tmpreg;                                         SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOEEN);                                                                                  tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOEEN);                                        UNUSED(tmpreg);                                       } while(0)
S
S#define __HAL_RCC_GPIOE_CLK_DISABLE()        CLEAR_BIT(RCC->IOPENR,(RCC_IOPENR_GPIOEEN))
S
S#define __HAL_RCC_GPIOE_IS_CLK_ENABLED()        (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOEEN) != RESET)
S#define __HAL_RCC_GPIOE_IS_CLK_DISABLED()       (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOEEN) == RESET)
S
N#endif /* GPIOE */
N#if defined(GPIOD)
X#if 1L
N#define __HAL_RCC_GPIOD_CLK_ENABLE()   do { \
N                                        __IO uint32_t tmpreg; \
N                                        SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIODEN);\
N                                        /* Delay after an RCC peripheral clock enabling */ \
N                                        tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIODEN);\
N                                        UNUSED(tmpreg); \
N                                      } while(0)
X#define __HAL_RCC_GPIOD_CLK_ENABLE()   do {                                         __IO uint32_t tmpreg;                                         SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIODEN);                                                                                  tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIODEN);                                        UNUSED(tmpreg);                                       } while(0)
N#define __HAL_RCC_GPIOD_CLK_DISABLE()        CLEAR_BIT(RCC->IOPENR,(RCC_IOPENR_GPIODEN))
N
N#define __HAL_RCC_GPIOD_IS_CLK_ENABLED()        (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIODEN) != RESET)
N#define __HAL_RCC_GPIOD_IS_CLK_DISABLED()       (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIODEN) == RESET)
N
N#endif  /* GPIOD */
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_APB1_Clock_Enable_Disable APB1 Peripheral Clock Enable Disable                
N  * @brief  Enable or disable the APB1 peripheral clock.
N  * @note   After reset, the peripheral clock (used for registers read/write access)
N  *         is disabled and the application software has to enable this clock before 
N  *         using it.   
N  * @{
N  */
N
N#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx) && !defined(STM32L051xx) && !defined(STM32L061xx) && !defined(STM32L071xx) && !defined(STM32L081xx) 
X#if !0L && !0L && !0L && !0L && !0L && !0L && !0L && !0L 
N#define __HAL_RCC_USB_CLK_ENABLE()        SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_USBEN))
N#define __HAL_RCC_USB_CLK_DISABLE()       CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_USBEN))
N
N#define __HAL_RCC_USB_IS_CLK_ENABLED()        (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USBEN) != RESET)
N#define __HAL_RCC_USB_IS_CLK_DISABLED()       (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USBEN) == RESET)
N
N#define __HAL_RCC_CRS_CLK_ENABLE()     SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_CRSEN))
N#define __HAL_RCC_CRS_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR,(RCC_APB1ENR_CRSEN))
N
N#define __HAL_RCC_CRS_IS_CLK_ENABLED()        (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_CRSEN) != RESET)
N#define __HAL_RCC_CRS_IS_CLK_DISABLED()       (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_CRSEN) == RESET)
N
N#endif /* !(STM32L011xx) && !(STM32L021xx) && !(STM32L031xx ) && !(STM32L041xx ) && !(STM32L051xx ) && !(STM32L061xx ) && !(STM32L071xx ) && !(STM32L081xx ) */
N       
N
N#if defined(STM32L053xx) || defined(STM32L063xx) || defined(STM32L073xx) || defined(STM32L083xx)
X#if 1L || 0L || 0L || 0L
N#define __HAL_RCC_LCD_CLK_ENABLE()          SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_LCDEN))
N#define __HAL_RCC_LCD_CLK_DISABLE()         CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_LCDEN))
N
N#define __HAL_RCC_LCD_IS_CLK_ENABLED()        (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LCDEN) != RESET)
N#define __HAL_RCC_LCD_IS_CLK_DISABLED()       (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LCDEN) == RESET)
N
N#endif /* STM32L053xx || STM32L063xx || STM32L073xx  || STM32L083xx */
N
N#if defined(STM32L053xx) || defined(STM32L063xx) \
N || defined(STM32L052xx) || defined(STM32L062xx) \
N || defined(STM32L051xx) || defined(STM32L061xx)
X#if 1L || 0L  || 0L || 0L  || 0L || 0L
N#define __HAL_RCC_TIM2_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM2EN))
N#define __HAL_RCC_TIM6_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM6EN))
N#define __HAL_RCC_SPI2_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_SPI2EN))
N#define __HAL_RCC_USART2_CLK_ENABLE()  SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART2EN))
N#define __HAL_RCC_LPUART1_CLK_ENABLE() SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPUART1EN))
N#define __HAL_RCC_I2C1_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C1EN))
N#define __HAL_RCC_I2C2_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))
N#define __HAL_RCC_DAC_CLK_ENABLE()     SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_DACEN))
N#define __HAL_RCC_LPTIM1_CLK_ENABLE()  SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPTIM1EN))
N
N#define __HAL_RCC_TIM2_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM2EN))
N#define __HAL_RCC_TIM6_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM6EN))
N#define __HAL_RCC_SPI2_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_SPI2EN))
N#define __HAL_RCC_USART2_CLK_DISABLE()  CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART2EN))
N#define __HAL_RCC_LPUART1_CLK_DISABLE() CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPUART1EN))
N#define __HAL_RCC_I2C1_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C1EN))
N#define __HAL_RCC_I2C2_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))
N#define __HAL_RCC_DAC_CLK_DISABLE()     CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_DACEN))
N#define __HAL_RCC_LPTIM1_CLK_DISABLE()  CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPTIM1EN))
N
N#define __HAL_RCC_TIM2_IS_CLK_ENABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN) != RESET)
N#define __HAL_RCC_TIM6_IS_CLK_ENABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM6EN) != RESET)
N#define __HAL_RCC_SPI2_IS_CLK_ENABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI2EN) != RESET)
N#define __HAL_RCC_USART2_IS_CLK_ENABLED()   (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN) != RESET)
N#define __HAL_RCC_LPUART1_IS_CLK_ENABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPUART1EN) != RESET)
N#define __HAL_RCC_I2C1_IS_CLK_ENABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN) != RESET)
N#define __HAL_RCC_I2C2_IS_CLK_ENABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN) != RESET)
N#define __HAL_RCC_DAC_IS_CLK_ENABLED()      (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_DACEN) != RESET)
N#define __HAL_RCC_LPTIM1_IS_CLK_ENABLED()   (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPTIM1EN) != RESET)
N#define __HAL_RCC_TIM2_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN) == RESET)
N#define __HAL_RCC_TIM6_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM6EN) == RESET)
N#define __HAL_RCC_SPI2_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI2EN) == RESET)
N#define __HAL_RCC_USART2_IS_CLK_DISABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN) == RESET)
N#define __HAL_RCC_LPUART1_IS_CLK_DISABLED() (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPUART1EN) == RESET)
N#define __HAL_RCC_I2C1_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN) == RESET)
N#define __HAL_RCC_I2C2_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN) == RESET)
N#define __HAL_RCC_DAC_IS_CLK_DISABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_DACEN) == RESET)
N#define __HAL_RCC_LPTIM1_IS_CLK_DISABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPTIM1EN) == RESET)
N
N#endif /* STM32L051xx  || STM32L061xx  ||  */
N       /* STM32L052xx  || STM32L062xx  ||  */
N       /* STM32L053xx  || STM32L063xx  ||  */
N
N#if defined(STM32L011xx) || defined(STM32L021xx) || defined(STM32L031xx) || defined(STM32L041xx)
X#if 0L || 0L || 0L || 0L
S#define __HAL_RCC_TIM2_CLK_ENABLE()     SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM2EN))
S#define __HAL_RCC_USART2_CLK_ENABLE()   SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART2EN))
S#define __HAL_RCC_LPUART1_CLK_ENABLE()  SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPUART1EN))
S#define __HAL_RCC_I2C1_CLK_ENABLE()     SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C1EN))
S#define __HAL_RCC_LPTIM1_CLK_ENABLE()   SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPTIM1EN))
S
S#define __HAL_RCC_TIM2_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM2EN))
S#define __HAL_RCC_USART2_CLK_DISABLE()  CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART2EN))
S#define __HAL_RCC_LPUART1_CLK_DISABLE() CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPUART1EN))
S#define __HAL_RCC_I2C1_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C1EN))
S#define __HAL_RCC_LPTIM1_CLK_DISABLE()  CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPTIM1EN))
S
S#define __HAL_RCC_TIM2_IS_CLK_ENABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN) != RESET)
S#define __HAL_RCC_USART2_IS_CLK_ENABLED()   (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN) != RESET)
S#define __HAL_RCC_LPUART1_IS_CLK_ENABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPUART1EN) != RESET)
S#define __HAL_RCC_I2C1_IS_CLK_ENABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN) != RESET)
S#define __HAL_RCC_LPTIM1_IS_CLK_ENABLED()   (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPTIM1EN) != RESET)
S#define __HAL_RCC_TIM2_IS_CLK_DISABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN) == RESET)
S#define __HAL_RCC_USART2_IS_CLK_DISABLED()   (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN) == RESET)
S#define __HAL_RCC_LPUART1_IS_CLK_DISABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPUART1EN) == RESET)
S#define __HAL_RCC_I2C1_IS_CLK_DISABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN) == RESET)
S#define __HAL_RCC_LPTIM1_IS_CLK_DISABLED()   (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPTIM1EN) == RESET)
S
N#endif /* STM32L011xx  || STM32L021xx  || STM32L031xx  || STM32L041xx   */
N
N
N#if defined(STM32L073xx) || defined(STM32L083xx) \
N || defined(STM32L072xx) || defined(STM32L082xx) \
N || defined(STM32L071xx) || defined(STM32L081xx)
X#if 0L || 0L  || 0L || 0L  || 0L || 0L
S#define __HAL_RCC_TIM2_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM2EN))
S#define __HAL_RCC_TIM3_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM3EN))
S#define __HAL_RCC_TIM6_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM6EN))
S#define __HAL_RCC_TIM7_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM7EN))
S#define __HAL_RCC_SPI2_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_SPI2EN))
S#define __HAL_RCC_USART2_CLK_ENABLE()  SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART2EN))
S#define __HAL_RCC_USART4_CLK_ENABLE()  SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART4EN))
S#define __HAL_RCC_USART5_CLK_ENABLE()  SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART5EN))
S#define __HAL_RCC_LPUART1_CLK_ENABLE() SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPUART1EN))
S#define __HAL_RCC_I2C1_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C1EN))
S#define __HAL_RCC_I2C2_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))
S#define __HAL_RCC_I2C3_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C3EN))
S#define __HAL_RCC_DAC_CLK_ENABLE()     SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_DACEN))
S#define __HAL_RCC_LPTIM1_CLK_ENABLE()  SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPTIM1EN))
S
S#define __HAL_RCC_TIM2_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM2EN))
S#define __HAL_RCC_TIM3_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM3EN))
S#define __HAL_RCC_TIM6_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM6EN))
S#define __HAL_RCC_TIM7_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM7EN))
S#define __HAL_RCC_SPI2_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_SPI2EN))
S#define __HAL_RCC_USART2_CLK_DISABLE()  CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART2EN))
S#define __HAL_RCC_USART4_CLK_DISABLE()  CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART4EN))
S#define __HAL_RCC_USART5_CLK_DISABLE()  CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART5EN))
S#define __HAL_RCC_LPUART1_CLK_DISABLE() CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPUART1EN))
S#define __HAL_RCC_I2C1_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C1EN))
S#define __HAL_RCC_I2C2_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))
S#define __HAL_RCC_I2C3_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C3EN))
S#define __HAL_RCC_DAC_CLK_DISABLE()     CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_DACEN))
S#define __HAL_RCC_LPTIM1_CLK_DISABLE()  CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPTIM1EN))
S
S#define __HAL_RCC_TIM2_IS_CLK_ENABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN) != RESET)
S#define __HAL_RCC_TIM3_IS_CLK_ENABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN) != RESET)
S#define __HAL_RCC_TIM6_IS_CLK_ENABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM6EN) != RESET)
S#define __HAL_RCC_TIM7_IS_CLK_ENABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM7EN) != RESET)
S#define __HAL_RCC_SPI2_IS_CLK_ENABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI2EN) != RESET)
S#define __HAL_RCC_USART2_IS_CLK_ENABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN) != RESET)
S#define __HAL_RCC_USART4_IS_CLK_ENABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART4EN) != RESET)
S#define __HAL_RCC_USART5_IS_CLK_ENABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART5EN) != RESET)
S#define __HAL_RCC_LPUART1_IS_CLK_ENABLED() (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPUART1EN) != RESET)
S#define __HAL_RCC_I2C1_IS_CLK_ENABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN) != RESET)
S#define __HAL_RCC_I2C2_IS_CLK_ENABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN) != RESET)
S#define __HAL_RCC_I2C3_IS_CLK_ENABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C3EN) != RESET)
S#define __HAL_RCC_DAC_IS_CLK_ENABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_DACEN) != RESET)
S#define __HAL_RCC_LPTIM1_IS_CLK_ENABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPTIM1EN) != RESET)
S#define __HAL_RCC_TIM2_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN) == RESET)
S#define __HAL_RCC_TIM3_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN) == RESET)
S#define __HAL_RCC_TIM6_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM6EN) == RESET)
S#define __HAL_RCC_TIM7_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM7EN) == RESET)
S#define __HAL_RCC_SPI2_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI2EN) == RESET)
S#define __HAL_RCC_USART2_IS_CLK_DISABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN) == RESET)
S#define __HAL_RCC_USART4_IS_CLK_DISABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART4EN) == RESET)
S#define __HAL_RCC_USART5_IS_CLK_DISABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART5EN) == RESET)
S#define __HAL_RCC_LPUART1_IS_CLK_DISABLED() (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPUART1EN) == RESET)
S#define __HAL_RCC_I2C1_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN) == RESET)
S#define __HAL_RCC_I2C2_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN) == RESET)
S#define __HAL_RCC_I2C3_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C3EN) == RESET)
S#define __HAL_RCC_DAC_IS_CLK_DISABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_DACEN) == RESET)
S#define __HAL_RCC_LPTIM1_IS_CLK_DISABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPTIM1EN) == RESET)
S
N#endif /* STM32L071xx  ||  STM32L081xx  || */
N       /* STM32L072xx  ||  STM32L082xx  || */
N       /* STM32L073xx  ||  STM32L083xx     */
N
N /**
N  * @}
N  */
N
N#if defined(STM32L053xx) || defined(STM32L063xx) || defined(STM32L073xx) || defined(STM32L083xx) \
N || defined(STM32L052xx) || defined(STM32L062xx) || defined(STM32L072xx) || defined(STM32L082xx) \
N || defined(STM32L051xx) || defined(STM32L061xx) || defined(STM32L071xx) || defined(STM32L081xx) \
N || defined(STM32L031xx) || defined(STM32L041xx) || defined(STM32L011xx) || defined(STM32L021xx) 
X#if 1L || 0L || 0L || 0L  || 0L || 0L || 0L || 0L  || 0L || 0L || 0L || 0L  || 0L || 0L || 0L || 0L 
N/** @defgroup RCCEx_APB2_Clock_Enable_Disable APB2 Peripheral Clock Enable Disable     
N  * @brief  Enable or disable the APB2 peripheral clock.
N  * @note   After reset, the peripheral clock (used for registers read/write access)
N  *         is disabled and the application software has to enable this clock before 
N  *         using it.   
N  * @{
N  */
N#define __HAL_RCC_TIM21_CLK_ENABLE()    SET_BIT(RCC->APB2ENR, (RCC_APB2ENR_TIM21EN))
N#if !defined (STM32L011xx) && !defined (STM32L021xx)
X#if !0L && !0L
N#define __HAL_RCC_TIM22_CLK_ENABLE()    SET_BIT(RCC->APB2ENR, (RCC_APB2ENR_TIM22EN))
N#endif
N#define __HAL_RCC_ADC1_CLK_ENABLE()     SET_BIT(RCC->APB2ENR, (RCC_APB2ENR_ADC1EN))
N#define __HAL_RCC_SPI1_CLK_ENABLE()     SET_BIT(RCC->APB2ENR, (RCC_APB2ENR_SPI1EN))
N#define __HAL_RCC_USART1_CLK_ENABLE()   SET_BIT(RCC->APB2ENR, (RCC_APB2ENR_USART1EN))
N
N#define __HAL_RCC_TIM21_CLK_DISABLE()    CLEAR_BIT(RCC->APB2ENR,  (RCC_APB2ENR_TIM21EN))
N#if !defined (STM32L011xx) && !defined (STM32L021xx)
X#if !0L && !0L
N#define __HAL_RCC_TIM22_CLK_DISABLE()    CLEAR_BIT(RCC->APB2ENR,  (RCC_APB2ENR_TIM22EN))
N#endif
N#define __HAL_RCC_ADC1_CLK_DISABLE()     CLEAR_BIT(RCC->APB2ENR,  (RCC_APB2ENR_ADC1EN))
N#define __HAL_RCC_SPI1_CLK_DISABLE()     CLEAR_BIT(RCC->APB2ENR,  (RCC_APB2ENR_SPI1EN))
N#define __HAL_RCC_USART1_CLK_DISABLE()   CLEAR_BIT(RCC->APB2ENR,  (RCC_APB2ENR_USART1EN))
N#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx)
X#if !0L && !0L && !0L && !0L
N#define __HAL_RCC_FIREWALL_CLK_ENABLE()  SET_BIT(RCC->APB2ENR, (RCC_APB2ENR_MIFIEN))
N#define __HAL_RCC_FIREWALL_CLK_DISABLE() CLEAR_BIT(RCC->APB2ENR,  (RCC_APB2ENR_MIFIEN))
N#endif /* !(STM32L011xx) && !(STM32L021xx) && !STM32L031xx && !STM32L041xx */
N
N#define __HAL_RCC_TIM21_IS_CLK_ENABLED()    (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM21EN) != RESET)
N#if !defined (STM32L011xx) && !defined (STM32L021xx)
X#if !0L && !0L
N#define __HAL_RCC_TIM22_IS_CLK_ENABLED()    (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM22EN) != RESET)
N#endif
N#define __HAL_RCC_ADC1_IS_CLK_ENABLED()     (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC1EN) != RESET)
N#define __HAL_RCC_SPI1_IS_CLK_ENABLED()     (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI1EN) != RESET)
N#define __HAL_RCC_USART1_IS_CLK_ENABLED()   (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN) != RESET)
N
N#define __HAL_RCC_TIM21_IS_CLK_DISABLED()    (READ_BIT(RCC->APB2ENR,  (RCC_APB2ENR_TIM21EN) == RESET)
N#if !defined (STM32L011xx) && !defined (STM32L021xx)
X#if !0L && !0L
N#define __HAL_RCC_TIM22_IS_CLK_DISABLED()    (READ_BIT(RCC->APB2ENR,  (RCC_APB2ENR_TIM22EN) == RESET)
N#endif
N#define __HAL_RCC_ADC1_IS_CLK_DISABLED()     (READ_BIT(RCC->APB2ENR,  (RCC_APB2ENR_ADC1EN) == RESET)
N#define __HAL_RCC_SPI1_IS_CLK_DISABLED()     (READ_BIT(RCC->APB2ENR,  (RCC_APB2ENR_SPI1EN) == RESET)
N#define __HAL_RCC_USART1_IS_CLK_DISABLED()   (READ_BIT(RCC->APB2ENR,  (RCC_APB2ENR_USART1EN) == RESET)
N#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx)
X#if !0L && !0L && !0L && !0L
N#define __HAL_RCC_FIREWALL_IS_CLK_ENABLED()  (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_MIFIEN) != RESET)
N#define __HAL_RCC_FIREWALL_IS_CLK_DISABLED() (READ_BIT(RCC->APB2ENR,  (RCC_APB2ENR_MIFIEN) == RESET)
N#endif /* !(STM32L011xx) && !(STM32L021xx) && !STM32L031xx && !STM32L041xx */
N
N#endif /* STM32L051xx  || STM32L061xx  || STM32L071xx  ||  STM32L081xx  || */
N       /* STM32L052xx  || STM32L062xx  || STM32L072xx  ||  STM32L082xx  || */
N       /* STM32L053xx  || STM32L063xx  || STM32L073xx  ||  STM32L083xx  || */
N     /* STM32L031xx  || STM32L041xx  || STM32L011xx  || STM32L021xx      */
N       
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_AHB_Force_Release_Reset AHB Peripheral Force Release Reset
N  * @brief  Force or release AHB peripheral reset.
N  * @{
N  */
N#if defined(STM32L062xx) || defined(STM32L063xx)|| defined(STM32L082xx) || defined(STM32L083xx) || defined(STM32L041xx) || defined(STM32L021xx)
X#if 0L || 0L|| 0L || 0L || 0L || 0L
S#define __HAL_RCC_AES_FORCE_RESET()     SET_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_CRYPRST))
S#define __HAL_RCC_AES_RELEASE_RESET()   CLEAR_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_CRYPRST))
N#endif /* STM32L062xx || STM32L063xx || STM32L072xx  || STM32L073xx || STM32L082xx  || STM32L083xx || STM32L041xx || STM32L021xx*/
N
N#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx) && !defined(STM32L051xx) && !defined(STM32L061xx) && !defined(STM32L071xx) && !defined(STM32L081xx) 
X#if !0L && !0L && !0L && !0L && !0L && !0L && !0L && !0L 
N#define __HAL_RCC_TSC_FORCE_RESET()        SET_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_TSCRST))
N#define __HAL_RCC_TSC_RELEASE_RESET()      CLEAR_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_TSCRST))
N#define __HAL_RCC_RNG_FORCE_RESET()        SET_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_RNGRST))
N#define __HAL_RCC_RNG_RELEASE_RESET()      CLEAR_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_RNGRST))
N#endif /* !(STM32L011xx) && !(STM32L021xx) && !(STM32L031xx ) && !(STM32L041xx ) && !(STM32L051xx ) && !(STM32L061xx ) && !(STM32L071xx ) && !(STM32L081xx ) */
N
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_IOPORT_Force_Release_Reset IOPORT Peripheral Force Release Reset
N  * @brief  Force or release IOPORT peripheral reset.
N  * @{
N  */
N#if defined(STM32L073xx) || defined(STM32L083xx) \
N || defined(STM32L072xx) || defined(STM32L082xx) \
N || defined(STM32L071xx) || defined(STM32L081xx)
X#if 0L || 0L  || 0L || 0L  || 0L || 0L
S#define __HAL_RCC_GPIOE_FORCE_RESET()   SET_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOERST))
S
S#define __HAL_RCC_GPIOE_RELEASE_RESET() CLEAR_BIT(RCC->IOPRSTR,(RCC_IOPRSTR_GPIOERST))
S
N#endif /* STM32L071xx  ||  STM32L081xx  || */
N       /* STM32L072xx  ||  STM32L082xx  || */
N       /* STM32L073xx  ||  STM32L083xx     */
N#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx)
X#if !0L && !0L && !0L && !0L
N#define __HAL_RCC_GPIOD_FORCE_RESET()   SET_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIODRST))
N#define __HAL_RCC_GPIOD_RELEASE_RESET() CLEAR_BIT(RCC->IOPRSTR,(RCC_IOPRSTR_GPIODRST))
N#endif  /* !(STM32L011xx) && !(STM32L021xx) && !(STM32L031xx ) && !(STM32L041xx ) */ 
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_APB1_Force_Release_Reset APB1 Peripheral Force Release Reset     
N  * @brief  Force or release APB1 peripheral reset.
N  * @{
N  */ 
N
N#if defined(STM32L053xx) || defined(STM32L063xx) \
N || defined(STM32L052xx) || defined(STM32L062xx) \
N || defined(STM32L051xx) || defined(STM32L061xx)  
X#if 1L || 0L  || 0L || 0L  || 0L || 0L  
N#define __HAL_RCC_TIM2_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM2RST))
N#define __HAL_RCC_TIM6_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM6RST))
N#define __HAL_RCC_LPTIM1_FORCE_RESET()   SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPTIM1RST))
N#define __HAL_RCC_I2C1_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C1RST))
N#define __HAL_RCC_I2C2_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C2RST))
N#define __HAL_RCC_USART2_FORCE_RESET()   SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART2RST))
N#define __HAL_RCC_LPUART1_FORCE_RESET()  SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPUART1RST))
N#define __HAL_RCC_SPI2_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_SPI2RST))
N#define __HAL_RCC_DAC_FORCE_RESET()      SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_DACRST))
N
N#define __HAL_RCC_TIM2_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM2RST))
N#define __HAL_RCC_TIM6_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM6RST))
N#define __HAL_RCC_LPTIM1_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPTIM1RST))
N#define __HAL_RCC_I2C1_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C1RST))
N#define __HAL_RCC_I2C2_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C2RST))
N#define __HAL_RCC_USART2_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART2RST))
N#define __HAL_RCC_LPUART1_RELEASE_RESET()  CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPUART1RST))
N#define __HAL_RCC_SPI2_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_SPI2RST))
N#define __HAL_RCC_DAC_RELEASE_RESET()      CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_DACRST))
N#endif /* STM32L051xx  || STM32L061xx  || */
N       /* STM32L052xx  || STM32L062xx  || */
N       /* STM32L053xx  || STM32L063xx     */
N#if defined(STM32L011xx) || defined(STM32L021xx) || defined(STM32L031xx) || defined(STM32L041xx)
X#if 0L || 0L || 0L || 0L
S#define __HAL_RCC_TIM2_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM2RST))
S#define __HAL_RCC_LPTIM1_FORCE_RESET()   SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPTIM1RST))
S#define __HAL_RCC_I2C1_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C1RST))
S#define __HAL_RCC_USART2_FORCE_RESET()   SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART2RST))
S#define __HAL_RCC_LPUART1_FORCE_RESET()  SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPUART1RST))
S
S#define __HAL_RCC_TIM2_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM2RST))
S#define __HAL_RCC_LPTIM1_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPTIM1RST))
S#define __HAL_RCC_I2C1_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C1RST))
S#define __HAL_RCC_USART2_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART2RST))
S#define __HAL_RCC_LPUART1_RELEASE_RESET()  CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPUART1RST))
N#endif /* STM32L031xx  || STM32L041xx  || STM32L011xx  || STM32L021xx  */
N
N#if defined(STM32L073xx) || defined(STM32L083xx) \
N || defined(STM32L072xx) || defined(STM32L082xx) \
N || defined(STM32L071xx) || defined(STM32L081xx) 
X#if 0L || 0L  || 0L || 0L  || 0L || 0L 
S#define __HAL_RCC_TIM2_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM2RST))
S#define __HAL_RCC_TIM3_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM3RST))
S#define __HAL_RCC_TIM6_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM6RST))
S#define __HAL_RCC_TIM7_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM7RST))
S#define __HAL_RCC_LPTIM1_FORCE_RESET()   SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPTIM1RST))
S#define __HAL_RCC_I2C1_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C1RST))
S#define __HAL_RCC_I2C2_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C2RST))
S#define __HAL_RCC_I2C3_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C3RST))
S#define __HAL_RCC_USART2_FORCE_RESET()   SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART2RST))
S#define __HAL_RCC_USART4_FORCE_RESET()   SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART4RST))
S#define __HAL_RCC_USART5_FORCE_RESET()   SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART5RST))
S#define __HAL_RCC_LPUART1_FORCE_RESET()  SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPUART1RST))
S#define __HAL_RCC_SPI2_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_SPI2RST))
S#define __HAL_RCC_DAC_FORCE_RESET()      SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_DACRST))
S
S#define __HAL_RCC_TIM2_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM2RST))
S#define __HAL_RCC_TIM3_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM3RST))
S#define __HAL_RCC_TIM6_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM6RST))
S#define __HAL_RCC_TIM7_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM7RST))
S#define __HAL_RCC_LPTIM1_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPTIM1RST))
S#define __HAL_RCC_I2C1_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C1RST))
S#define __HAL_RCC_I2C2_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C2RST))
S#define __HAL_RCC_I2C3_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C3RST))
S#define __HAL_RCC_USART2_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART2RST))
S#define __HAL_RCC_USART4_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART4RST))
S#define __HAL_RCC_USART5_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART5RST))
S#define __HAL_RCC_LPUART1_RELEASE_RESET()  CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPUART1RST))
S#define __HAL_RCC_SPI2_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_SPI2RST))
S#define __HAL_RCC_DAC_RELEASE_RESET()      CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_DACRST))
N#endif /* STM32L071xx  ||  STM32L081xx  || */
N       /* STM32L072xx  ||  STM32L082xx  || */
N       /* STM32L073xx  ||  STM32L083xx  || */
N
N#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx) && !defined(STM32L051xx) && !defined(STM32L061xx) && !defined(STM32L071xx) && !defined(STM32L081xx) 
X#if !0L && !0L && !0L && !0L && !0L && !0L && !0L && !0L 
N#define __HAL_RCC_USB_FORCE_RESET()        SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USBRST))
N#define __HAL_RCC_USB_RELEASE_RESET()      CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USBRST))
N#define __HAL_RCC_CRS_FORCE_RESET()        SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_CRSRST))
N#define __HAL_RCC_CRS_RELEASE_RESET()      CLEAR_BIT(RCC->APB1RSTR,(RCC_APB1RSTR_CRSRST))
N#endif /* !(STM32L011xx) && !(STM32L021xx) && !(STM32L031xx ) && !(STM32L041xx ) && !(STM32L051xx ) && !(STM32L061xx ) && !(STM32L071xx ) && !(STM32L081xx ) */
N
N#if defined(STM32L053xx) || defined(STM32L063xx) || defined(STM32L073xx) || defined(STM32L083xx)
X#if 1L || 0L || 0L || 0L
N#define __HAL_RCC_LCD_FORCE_RESET()           SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LCDRST))
N#define __HAL_RCC_LCD_RELEASE_RESET()         CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LCDRST))
N#endif /* STM32L053xx || STM32L063xx || STM32L073xx  || STM32L083xx */
N
N/**
N  * @}
N  */
N
N#if defined(STM32L053xx) || defined(STM32L063xx) || defined(STM32L073xx) || defined(STM32L083xx) \
N || defined(STM32L052xx) || defined(STM32L062xx) || defined(STM32L072xx) || defined(STM32L082xx) \
N || defined(STM32L051xx) || defined(STM32L061xx) || defined(STM32L071xx) || defined(STM32L081xx)
X#if 1L || 0L || 0L || 0L  || 0L || 0L || 0L || 0L  || 0L || 0L || 0L || 0L
N
N/** @defgroup RCCEx_APB2_Force_Release_Reset APB2 Peripheral Force Release Reset       
N  * @brief  Force or release APB2 peripheral reset.
N  * @{
N  */ 
N#define __HAL_RCC_USART1_FORCE_RESET()     SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_USART1RST))
N#define __HAL_RCC_ADC1_FORCE_RESET()       SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_ADC1RST))
N#define __HAL_RCC_SPI1_FORCE_RESET()       SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_SPI1RST))
N#define __HAL_RCC_TIM21_FORCE_RESET()      SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_TIM21RST))
N#if !defined (STM32L011xx) && !defined (STM32L021xx)
X#if !0L && !0L
N#define __HAL_RCC_TIM22_FORCE_RESET()      SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_TIM22RST))
N#endif
N
N#define __HAL_RCC_USART1_RELEASE_RESET()     CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_USART1RST))
N#define __HAL_RCC_ADC1_RELEASE_RESET()       CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_ADC1RST))
N#define __HAL_RCC_SPI1_RELEASE_RESET()       CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_SPI1RST))
N#define __HAL_RCC_TIM21_RELEASE_RESET()      CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_TIM21RST))
N#if !defined (STM32L011xx) && !defined (STM32L021xx)
X#if !0L && !0L
N#define __HAL_RCC_TIM22_RELEASE_RESET()      CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_TIM22RST))
N#endif
N#endif /* STM32L051xx  || STM32L061xx  || STM32L071xx  ||  STM32L081xx  || */
N       /* STM32L052xx  || STM32L062xx  || STM32L072xx  ||  STM32L082xx  || */
N       /* STM32L053xx  || STM32L063xx  || STM32L073xx  ||  STM32L083xx  || */
N#if defined(STM32L011xx) || defined(STM32L021xx) || defined(STM32L031xx) || defined(STM32L041xx)
X#if 0L || 0L || 0L || 0L
S#define __HAL_RCC_ADC1_FORCE_RESET()       SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_ADC1RST))
S#define __HAL_RCC_SPI1_FORCE_RESET()       SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_SPI1RST))
S#define __HAL_RCC_TIM21_FORCE_RESET()      SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_TIM21RST))
S#if !defined (STM32L011xx) && !defined (STM32L021xx)
S#define __HAL_RCC_TIM22_FORCE_RESET()      SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_TIM22RST))
S#endif
S#define __HAL_RCC_ADC1_RELEASE_RESET()       CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_ADC1RST))
S#define __HAL_RCC_SPI1_RELEASE_RESET()       CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_SPI1RST))
S#define __HAL_RCC_TIM21_RELEASE_RESET()      CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_TIM21RST))
S#if !defined (STM32L011xx) && !defined (STM32L021xx)
S#define __HAL_RCC_TIM22_RELEASE_RESET()      CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_TIM22RST))
S#endif
N#endif /* STM32L031xx  || STM32L041xx  || STM32L011xx  || STM32L021xx*/
N
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_AHB_Clock_Sleep_Enable_Disable AHB Peripheral Clock Sleep Enable Disable
N  * @brief  Enable or disable the AHB peripheral clock during Low Power (Sleep) mode.
N  * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
N  *         power consumption.
N  * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
N  * @note   By default, all peripheral clocks are enabled during SLEEP mode.
N  * @{
N  */
N
N#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx) && !defined(STM32L051xx) && !defined(STM32L061xx) && !defined(STM32L071xx) && !defined(STM32L081xx) 
X#if !0L && !0L && !0L && !0L && !0L && !0L && !0L && !0L 
N#define __HAL_RCC_TSC_CLK_SLEEP_ENABLE()           SET_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_TSCSMEN))
N#define __HAL_RCC_RNG_CLK_SLEEP_ENABLE()           SET_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_RNGSMEN))
N#define __HAL_RCC_TSC_CLK_SLEEP_DISABLE()          CLEAR_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_TSCSMEN))
N#define __HAL_RCC_RNG_CLK_SLEEP_DISABLE()          CLEAR_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_RNGSMEN))
N
N#define __HAL_RCC_TSC_IS_CLK_SLEEP_ENABLED()      (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_TSCSMEN) != RESET)
N#define __HAL_RCC_RNG_IS_CLK_SLEEP_ENABLED()      (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_RNGSMEN) != RESET)
N#define __HAL_RCC_TSC_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_TSCSMEN) == RESET)
N#define __HAL_RCC_RNG_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_RNGSMEN) == RESET)
N#endif /* !(STM32L011xx) && !(STM32L021xx) && !(STM32L031xx ) &&  !(STM32L041xx ) &&  !(STM32L051xx ) && !(STM32L061xx ) && !(STM32L071xx ) && !(STM32L081xx ) */
N       
N#if defined(STM32L062xx) || defined(STM32L063xx)|| defined(STM32L082xx) || defined(STM32L083xx) || defined(STM32L041xx)
X#if 0L || 0L|| 0L || 0L || 0L
S#define __HAL_RCC_AES_CLK_SLEEP_ENABLE()          SET_BIT(RCC->AHBLPENR, (RCC_AHBSMENR_CRYPSMEN))
S#define __HAL_RCC_AES_CLK_SLEEP_DISABLE()         CLEAR_BIT(RCC->AHBLPENR, (RCC_AHBSMENR_CRYPSMEN))
S
S#define __HAL_RCC_AES_IS_CLK_SLEEP_ENABLED()      (READ_BIT(RCC->AHBLPENR, RCC_AHBSMENR_CRYPSMEN) != RESET)
S#define __HAL_RCC_AES_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->AHBLPENR, RCC_AHBSMENR_CRYPSMEN) == RESET)
N#endif /* STM32L062xx || STM32L063xx || STM32L072xx || STM32L073xx || STM32L082xx || STM32L083xx || STM32L041xx */
N
N/**
N  * @}
N  */
N
N/** @defgroup RCCEx_IOPORT_Clock_Sleep_Enable_Disable IOPORT Peripheral Clock Sleep Enable Disable
N  * @brief  Enable or disable the IOPORT peripheral clock during Low Power (Sleep) mode.
N  * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
N  *         power consumption.
N  * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
N  * @note   By default, all peripheral clocks are enabled during SLEEP mode.
N  * @{
N  */
N#if defined(STM32L073xx) || defined(STM32L083xx) \
N || defined(STM32L072xx) || defined(STM32L082xx) \
N || defined(STM32L071xx) || defined(STM32L081xx) 
X#if 0L || 0L  || 0L || 0L  || 0L || 0L 
S#define __HAL_RCC_GPIOE_CLK_SLEEP_ENABLE()         SET_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOESMEN))
S#define __HAL_RCC_GPIOE_CLK_SLEEP_DISABLE()        CLEAR_BIT(RCC->IOPSMENR,(RCC_IOPSMENR_GPIOESMEN))
S
S#define __HAL_RCC_GPIOE_IS_CLK_SLEEP_ENABLED()        (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOESMEN) != RESET)
S#define __HAL_RCC_GPIOE_IS_CLK_SLEEP_DISABLED()       (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOESMEN) == RESET)
N#endif /* STM32L071xx  ||  STM32L081xx  || */
N       /* STM32L072xx  ||  STM32L082xx  || */
N       /* STM32L073xx  ||  STM32L083xx  || */
N#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx)
X#if !0L && !0L && !0L && !0L
N#define __HAL_RCC_GPIOD_CLK_SLEEP_ENABLE()    SET_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIODSMEN))
N#define __HAL_RCC_GPIOD_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->IOPSMENR,(RCC_IOPSMENR_GPIODSMEN))
N
N#define __HAL_RCC_GPIOD_IS_CLK_SLEEP_ENABLED()        (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIODSMEN) != RESET)
N#define __HAL_RCC_GPIOD_IS_CLK_SLEEP_DISABLED()       (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIODSMEN) == RESET)
N#endif  /* !(STM32L011xx) && !(STM32L021xx) && !(STM32L031xx ) && !(STM32L041xx ) */ 
N/**
N  * @}
N  */
N
N
N/** @defgroup RCCEx_APB1_Clock_Sleep_Enable_Disable APB1 Peripheral Clock Sleep Enable Disable
N  * @brief  Enable or disable the APB1 peripheral clock during Low Power (Sleep) mode.
N  * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
N  *         power consumption.
N  * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
N  * @note   By default, all peripheral clocks are enabled during SLEEP mode.
N  * @{
N  */
N
N#if defined(STM32L053xx) || defined(STM32L063xx) \
N || defined(STM32L052xx) || defined(STM32L062xx) \
N || defined(STM32L051xx) || defined(STM32L061xx) 
X#if 1L || 0L  || 0L || 0L  || 0L || 0L 
N#define __HAL_RCC_TIM2_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM2SMEN))
N#define __HAL_RCC_TIM6_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM6SMEN))
N#define __HAL_RCC_SPI2_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_SPI2SMEN))
N#define __HAL_RCC_USART2_CLK_SLEEP_ENABLE()  SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART2SMEN))
N#define __HAL_RCC_LPUART1_CLK_SLEEP_ENABLE() SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPUART1SMEN))
N#define __HAL_RCC_I2C1_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C1SMEN))
N#define __HAL_RCC_I2C2_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C2SMEN))
N#define __HAL_RCC_DAC_CLK_SLEEP_ENABLE()     SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_DACSMEN))
N#define __HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE()  SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPTIM1SMEN))
N
N#define __HAL_RCC_TIM2_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM2SMEN))
N#define __HAL_RCC_TIM6_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM6SMEN))
N#define __HAL_RCC_SPI2_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_SPI2SMEN))
N#define __HAL_RCC_USART2_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART2SMEN))
N#define __HAL_RCC_LPUART1_CLK_SLEEP_DISABLE() CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPUART1SMEN))
N#define __HAL_RCC_I2C1_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C1SMEN))
N#define __HAL_RCC_I2C2_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C2SMEN))
N#define __HAL_RCC_DAC_CLK_SLEEP_DISABLE()     CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_DACSMEN))
N#define __HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPTIM1SMEN))
N
N#define __HAL_RCC_TIM2_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM2SMEN) != RESET)
N#define __HAL_RCC_TIM6_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM6SMEN) != RESET)
N#define __HAL_RCC_SPI2_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_SPI2SMEN) != RESET)
N#define __HAL_RCC_USART2_IS_CLK_SLEEP_ENABLED()   (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART2SMEN) != RESET)
N#define __HAL_RCC_LPUART1_IS_CLK_SLEEP_ENABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPUART1SMEN) != RESET)
N#define __HAL_RCC_I2C1_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C1SMEN) != RESET)
N#define __HAL_RCC_I2C2_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C2SMEN) != RESET)
N#define __HAL_RCC_DAC_IS_CLK_SLEEP_ENABLED()      (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_DACSMEN) != RESET)
N#define __HAL_RCC_LPTIM1_IS_CLK_SLEEP_ENABLED()   (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPTIM1SMEN) != RESET)
N#define __HAL_RCC_TIM2_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM2SMEN) == RESET)
N#define __HAL_RCC_TIM6_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM6SMEN) == RESET)
N#define __HAL_RCC_SPI2_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_SPI2SMEN) == RESET)
N#define __HAL_RCC_USART2_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART2SMEN) == RESET)
N#define __HAL_RCC_LPUART1_IS_CLK_SLEEP_DISABLED() (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPUART1SMEN) == RESET)
N#define __HAL_RCC_I2C1_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C1SMEN) == RESET)
N#define __HAL_RCC_I2C2_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C2SMEN) == RESET)
N#define __HAL_RCC_DAC_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_DACSMEN) == RESET)
N#define __HAL_RCC_LPTIM1_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPTIM1SMEN) == RESET)
N#endif /* STM32L051xx  || STM32L061xx  || */
N       /* STM32L052xx  || STM32L062xx  || */
N       /* STM32L053xx  || STM32L063xx     */
N       
N#if defined(STM32L073xx) || defined(STM32L083xx) \
N || defined(STM32L072xx) || defined(STM32L082xx) \
N || defined(STM32L071xx) || defined(STM32L081xx)
X#if 0L || 0L  || 0L || 0L  || 0L || 0L
S#define __HAL_RCC_TIM2_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM2SMEN))
S#define __HAL_RCC_TIM3_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM3SMEN))
S#define __HAL_RCC_TIM6_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM6SMEN))
S#define __HAL_RCC_TIM7_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM7SMEN))
S#define __HAL_RCC_SPI2_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_SPI2SMEN))
S#define __HAL_RCC_USART2_CLK_SLEEP_ENABLE()  SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART2SMEN))
S#define __HAL_RCC_USART4_CLK_SLEEP_ENABLE()  SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART4SMEN))
S#define __HAL_RCC_USART5_CLK_SLEEP_ENABLE()  SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART5SMEN))
S#define __HAL_RCC_LPUART1_CLK_SLEEP_ENABLE() SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPUART1SMEN))
S#define __HAL_RCC_I2C1_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C1SMEN))
S#define __HAL_RCC_I2C2_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C2SMEN))
S#define __HAL_RCC_I2C3_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C3SMEN))
S#define __HAL_RCC_DAC_CLK_SLEEP_ENABLE()     SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_DACSMEN))
S#define __HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE()  SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPTIM1SMEN))
S
S#define __HAL_RCC_TIM2_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM2SMEN))
S#define __HAL_RCC_TIM3_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM3SMEN))
S#define __HAL_RCC_TIM6_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM6SMEN))
S#define __HAL_RCC_TIM7_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM7SMEN))
S#define __HAL_RCC_SPI2_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_SPI2SMEN))
S#define __HAL_RCC_USART2_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART2SMEN))
S#define __HAL_RCC_USART4_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART4SMEN))
S#define __HAL_RCC_USART5_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART5SMEN))
S#define __HAL_RCC_LPUART1_CLK_SLEEP_DISABLE() CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPUART1SMEN))
S#define __HAL_RCC_I2C1_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C1SMEN))
S#define __HAL_RCC_I2C2_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C2SMEN))
S#define __HAL_RCC_I2C3_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C3SMEN))
S#define __HAL_RCC_DAC_CLK_SLEEP_DISABLE()     CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_DACSMEN))
S#define __HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPTIM1SMEN))
S
S#define __HAL_RCC_TIM2_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM2SMEN) != RESET)
S#define __HAL_RCC_TIM3_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM3SMEN) != RESET)
S#define __HAL_RCC_TIM6_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM6SMEN) != RESET)
S#define __HAL_RCC_TIM7_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM7SMEN) != RESET)
S#define __HAL_RCC_SPI2_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_SPI2SMEN) != RESET)
S#define __HAL_RCC_USART2_IS_CLK_SLEEP_ENABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART2SMEN) != RESET)
S#define __HAL_RCC_USART4_IS_CLK_SLEEP_ENABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART4SMEN) != RESET)
S#define __HAL_RCC_USART5_IS_CLK_SLEEP_ENABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART5SMEN) != RESET)
S#define __HAL_RCC_LPUART1_IS_CLK_SLEEP_ENABLED() (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPUART1SMEN) != RESET)
S#define __HAL_RCC_I2C1_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C1SMEN) != RESET)
S#define __HAL_RCC_I2C2_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C2SMEN) != RESET)
S#define __HAL_RCC_I2C3_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C3SMEN) != RESET)
S#define __HAL_RCC_DAC_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_DACSMEN) != RESET)
S#define __HAL_RCC_LPTIM1_IS_CLK_SLEEP_ENABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPTIM1SMEN) != RESET)
S#define __HAL_RCC_TIM2_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM2SMEN) == RESET)
S#define __HAL_RCC_TIM3_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM3SMEN) == RESET)
S#define __HAL_RCC_TIM6_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM6SMEN) == RESET)
S#define __HAL_RCC_TIM7_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM7SMEN) == RESET)
S#define __HAL_RCC_SPI2_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_SPI2SMEN) == RESET)
S#define __HAL_RCC_USART2_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART2SMEN) == RESET)
S#define __HAL_RCC_USART4_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART4SMEN) == RESET)
S#define __HAL_RCC_USART5_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART5SMEN) == RESET)
S#define __HAL_RCC_LPUART1_IS_CLK_SLEEP_DISABLED() (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPUART1SMEN) == RESET)
S#define __HAL_RCC_I2C1_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C1SMEN) == RESET)
S#define __HAL_RCC_I2C2_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C2SMEN) == RESET)
S#define __HAL_RCC_I2C3_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C3SMEN) == RESET)
S#define __HAL_RCC_DAC_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_DACSMEN) == RESET)
S#define __HAL_RCC_LPTIM1_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPTIM1SMEN) == RESET)
N#endif /*  STM32L071xx  ||  STM32L081xx  || */
N       /*  STM32L072xx  ||  STM32L082xx  || */
N       /*  STM32L073xx  ||  STM32L083xx  || */
N
N#if defined(STM32L011xx) || defined(STM32L021xx) || defined(STM32L031xx) || defined(STM32L041xx) 
X#if 0L || 0L || 0L || 0L 
S#define __HAL_RCC_TIM2_CLK_SLEEP_ENABLE()     SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM2SMEN))
S#define __HAL_RCC_USART2_CLK_SLEEP_ENABLE()   SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART2SMEN))
S#define __HAL_RCC_LPUART1_CLK_SLEEP_ENABLE()  SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPUART1SMEN))
S#define __HAL_RCC_I2C1_CLK_SLEEP_ENABLE()     SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C1SMEN))
S#define __HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE()   SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPTIM1SMEN))
S
S#define __HAL_RCC_TIM2_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM2SMEN))
S#define __HAL_RCC_USART2_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART2SMEN))
S#define __HAL_RCC_LPUART1_CLK_SLEEP_DISABLE() CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPUART1SMEN))
S#define __HAL_RCC_I2C1_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C1SMEN))
S#define __HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPTIM1SMEN))
S
S#define __HAL_RCC_TIM2_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM2SMEN) != RESET)
S#define __HAL_RCC_USART2_IS_CLK_SLEEP_ENABLED()   (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART2SMEN) != RESET)
S#define __HAL_RCC_LPUART1_IS_CLK_SLEEP_ENABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPUART1SMEN) != RESET)
S#define __HAL_RCC_I2C1_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C1SMEN) != RESET)
S#define __HAL_RCC_LPTIM1_IS_CLK_SLEEP_ENABLED()   (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPTIM1SMEN) != RESET)
S#define __HAL_RCC_TIM2_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM2SMEN) == RESET)
S#define __HAL_RCC_USART2_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART2SMEN) == RESET)
S#define __HAL_RCC_LPUART1_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPUART1SMEN) == RESET)
S#define __HAL_RCC_I2C1_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C1SMEN) == RESET)
S#define __HAL_RCC_LPTIM1_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPTIM1SMEN) == RESET)
S
N#endif /*  STM32L031xx  ||  STM32L041xx || STM32L011xx  || STM32L021xx */
N
N#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx) && !defined(STM32L051xx) && !defined(STM32L061xx) && !defined(STM32L071xx) && !defined(STM32L081xx) 
X#if !0L && !0L && !0L && !0L && !0L && !0L && !0L && !0L 
N#define __HAL_RCC_USB_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USBSMEN))
N#define __HAL_RCC_USB_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USBSMEN))
N#define __HAL_RCC_CRS_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_CRSSMEN))
N#define __HAL_RCC_CRS_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_CRSSMEN))
N
N#define __HAL_RCC_USB_IS_CLK_SLEEP_ENABLED()        (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USBSMEN) != RESET)
N#define __HAL_RCC_USB_IS_CLK_SLEEP_DISABLED()       (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USBSMEN) == RESET)
N#define __HAL_RCC_CRS_IS_CLK_SLEEP_ENABLED()        (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_CRSSMEN) != RESET)
N#define __HAL_RCC_CRS_IS_CLK_SLEEP_DISABLED()       (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_CRSSMEN) == RESET)
N#endif /* !(STM32L011xx) && !(STM32L021xx) && !(STM32L031xx ) && !(STM32L041xx ) && !(STM32L051xx ) && !(STM32L061xx )  && !(STM32L071xx ) && !(STM32L081xx ) */
N
N#if defined(STM32L053xx) || defined(STM32L063xx) || defined(STM32L073xx) || defined(STM32L083xx)
X#if 1L || 0L || 0L || 0L
N#define __HAL_RCC_LCD_CLK_SLEEP_ENABLE()      SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LCDSMEN))
N#define __HAL_RCC_LCD_CLK_SLEEP_DISABLE()     CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LCDSMEN))
N
N#define __HAL_RCC_LCD_IS_CLK_SLEEP_ENABLED()        (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LCDSMEN) != RESET)
N#define __HAL_RCC_LCD_IS_CLK_SLEEP_DISABLED()       (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LCDSMEN) == RESET)
N#endif /* STM32L053xx || STM32L063xx || STM32L073xx  || STM32L083xx */
N
N/**
N  * @}
N  */
N
N#if defined(STM32L053xx) || defined(STM32L063xx) || defined(STM32L073xx) || defined(STM32L083xx) \
N || defined(STM32L052xx) || defined(STM32L062xx) || defined(STM32L072xx) || defined(STM32L082xx) \
N || defined(STM32L051xx) || defined(STM32L061xx) || defined(STM32L071xx) || defined(STM32L081xx) \
N || defined(STM32L031xx) || defined(STM32L041xx) || defined(STM32L011xx) || defined(STM32L021xx) 
X#if 1L || 0L || 0L || 0L  || 0L || 0L || 0L || 0L  || 0L || 0L || 0L || 0L  || 0L || 0L || 0L || 0L 
N
N/** @defgroup RCCEx_APB2_Clock_Sleep_Enable_Disable APB2 Peripheral Clock Sleep Enable Disable
N  * @brief  Enable or disable the APB2 peripheral clock during Low Power (Sleep) mode.
N  * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
N  *         power consumption.
N  * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
N  * @note   By default, all peripheral clocks are enabled during SLEEP mode.
N  * @{
N  */
N#define __HAL_RCC_TIM21_CLK_SLEEP_ENABLE()   SET_BIT(RCC->APB2SMENR, (RCC_APB2SMENR_TIM21SMEN))
N#if !defined (STM32L011xx) && !defined (STM32L021xx)
X#if !0L && !0L
N#define __HAL_RCC_TIM22_CLK_SLEEP_ENABLE()   SET_BIT(RCC->APB2SMENR, (RCC_APB2SMENR_TIM22SMEN))
N#endif
N#define __HAL_RCC_ADC1_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB2SMENR, (RCC_APB2SMENR_ADC1SMEN))
N#define __HAL_RCC_SPI1_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB2SMENR, (RCC_APB2SMENR_SPI1SMEN))
N#define __HAL_RCC_USART1_CLK_SLEEP_ENABLE()  SET_BIT(RCC->APB2SMENR, (RCC_APB2SMENR_USART1SMEN))
N
N#define __HAL_RCC_TIM21_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_TIM21SMEN))
N#if !defined (STM32L011xx) && !defined (STM32L021xx)
X#if !0L && !0L
N#define __HAL_RCC_TIM22_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_TIM22SMEN))
N#endif
N#define __HAL_RCC_ADC1_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_ADC1SMEN))
N#define __HAL_RCC_SPI1_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_SPI1SMEN))
N#define __HAL_RCC_USART1_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_USART1SMEN))
N
N#define __HAL_RCC_TIM21_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_TIM21SMEN) != RESET)
N#if !defined (STM32L011xx) && !defined (STM32L021xx)
X#if !0L && !0L
N#define __HAL_RCC_TIM22_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_TIM22SMEN) != RESET)
N#endif
N#define __HAL_RCC_ADC1_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_ADC1SMEN) != RESET)
N#define __HAL_RCC_SPI1_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_SPI1SMEN) != RESET)
N#define __HAL_RCC_USART1_IS_CLK_SLEEP_ENABLED()   (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_USART1SMEN) != RESET)
N
N#define __HAL_RCC_TIM21_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_TIM21SMEN) == RESET)
N#if !defined (STM32L011xx) && !defined (STM32L021xx)
X#if !0L && !0L
N#define __HAL_RCC_TIM22_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_TIM22SMEN) == RESET)
N#endif
N#define __HAL_RCC_ADC1_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_ADC1SMEN) == RESET)
N#define __HAL_RCC_SPI1_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_SPI1SMEN) == RESET)
N#define __HAL_RCC_USART1_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_USART1SMEN) == RESET)
N
N/**
N  * @}
N  */
N
N#endif /* STM32L051xx  || STM32L061xx  || STM32L071xx  ||  STM32L081xx  || */
N       /* STM32L052xx  || STM32L062xx  || STM32L072xx  ||  STM32L082xx  || */
N       /* STM32L053xx  || STM32L063xx  || STM32L073xx  ||  STM32L083xx  || */
N       /* STM32L031xx  || STM32L041xx  || STM32L011xx  ||  STM32L021xx   */
N  
N
N/**
N  * @brief Enable interrupt on RCC LSE CSS EXTI Line 19.
N  * @retval None
N  */
N#define __HAL_RCC_LSECSS_EXTI_ENABLE_IT()      SET_BIT(EXTI->IMR, RCC_EXTI_LINE_LSECSS)
N
N/**
N  * @brief Disable interrupt on RCC LSE CSS EXTI Line 19.
N  * @retval None
N  */
N#define __HAL_RCC_LSECSS_EXTI_DISABLE_IT()     CLEAR_BIT(EXTI->IMR, RCC_EXTI_LINE_LSECSS)
N
N/**
N  * @brief Enable event on RCC LSE CSS EXTI Line 19.
N  * @retval None.
N  */
N#define __HAL_RCC_LSECSS_EXTI_ENABLE_EVENT()   SET_BIT(EXTI->EMR, RCC_EXTI_LINE_LSECSS)
N
N/**
N  * @brief Disable event on RCC LSE CSS EXTI Line 19.
N  * @retval None.
N  */
N#define __HAL_RCC_LSECSS_EXTI_DISABLE_EVENT()  CLEAR_BIT(EXTI->EMR, RCC_EXTI_LINE_LSECSS)
N
N
N/**
N  * @brief  RCC LSE CSS EXTI line configuration: set falling edge trigger.
N  * @retval None.
N  */
N#define __HAL_RCC_LSECSS_EXTI_ENABLE_FALLING_EDGE()  SET_BIT(EXTI->FTSR, RCC_EXTI_LINE_LSECSS)
N
N
N/**
N  * @brief Disable the RCC LSE CSS Extended Interrupt Falling Trigger.
N  * @retval None.
N  */
N#define __HAL_RCC_LSECSS_EXTI_DISABLE_FALLING_EDGE()  CLEAR_BIT(EXTI->FTSR, RCC_EXTI_LINE_LSECSS)
N
N
N/**
N  * @brief  RCC LSE CSS EXTI line configuration: set rising edge trigger.
N  * @retval None.
N  */
N#define __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE()   SET_BIT(EXTI->RTSR, RCC_EXTI_LINE_LSECSS)
N
N/**
N  * @brief Disable the RCC LSE CSS Extended Interrupt Rising Trigger.
N  * @retval None.
N  */
N#define __HAL_RCC_LSECSS_EXTI_DISABLE_RISING_EDGE()  CLEAR_BIT(EXTI->RTSR, RCC_EXTI_LINE_LSECSS)
N
N/**
N  * @brief  RCC LSE CSS EXTI line configuration: set rising & falling edge trigger.
N  * @retval None.
N  */
N#define __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_FALLING_EDGE()  \
N  do {                                                      \
N    __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();             \
N    __HAL_RCC_LSECSS_EXTI_ENABLE_FALLING_EDGE();            \
N  } while(0)  
X#define __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_FALLING_EDGE()    do {                                                          __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();                 __HAL_RCC_LSECSS_EXTI_ENABLE_FALLING_EDGE();              } while(0)  
N  
N/**
N  * @brief Disable the RCC LSE CSS Extended Interrupt Rising & Falling Trigger.
N  * @retval None.
N  */
N#define __HAL_RCC_LSECSS_EXTI_DISABLE_RISING_FALLING_EDGE()  \
N  do {                                                       \
N    __HAL_RCC_LSECSS_EXTI_DISABLE_RISING_EDGE();             \
N    __HAL_RCC_LSECSS_EXTI_DISABLE_FALLING_EDGE();            \
N  } while(0)  
X#define __HAL_RCC_LSECSS_EXTI_DISABLE_RISING_FALLING_EDGE()    do {                                                           __HAL_RCC_LSECSS_EXTI_DISABLE_RISING_EDGE();                 __HAL_RCC_LSECSS_EXTI_DISABLE_FALLING_EDGE();              } while(0)  
N
N/**
N  * @brief Check whether the specified RCC LSE CSS EXTI interrupt flag is set or not.
N  * @retval EXTI RCC LSE CSS Line Status.
N  */
N#define __HAL_RCC_LSECSS_EXTI_GET_FLAG()       (EXTI->PR & (RCC_EXTI_LINE_LSECSS))
N
N/**
N  * @brief Clear the RCC LSE CSS EXTI flag.
N  * @retval None.
N  */
N#define __HAL_RCC_LSECSS_EXTI_CLEAR_FLAG()     (EXTI->PR = (RCC_EXTI_LINE_LSECSS))
N
N/**
N  * @brief Generate a Software interrupt on selected EXTI line.
N  * @retval None.
N  */
N#define __HAL_RCC_LSECSS_EXTI_GENERATE_SWIT()  SET_BIT(EXTI->SWIER, RCC_EXTI_LINE_LSECSS)
N
N
N#if defined(LCD)
X#if 1L
N    
N/** @defgroup RCCEx_LCD_Configuration LCD Configuration
N  * @brief  Macros to configure clock source of LCD peripherals.
N  * @{
N  */  
N
N/** @brief Macro to configures LCD clock (LCDCLK).
N  *  @note   LCD and RTC use the same configuration
N  *  @note   LCD can however be used in the Stop low power mode if the LSE or LSI is used as the
N  *          LCD clock source.
N  *    
N  *  @param  __LCD_CLKSOURCE__ specifies the LCD clock source.
N  *          This parameter can be one of the following values:
N  *             @arg @ref RCC_RTCCLKSOURCE_LSE LSE selected as LCD clock
N  *             @arg @ref RCC_RTCCLKSOURCE_LSI LSI selected as LCD clock
N  *             @arg @ref RCC_RTCCLKSOURCE_HSE_DIV2 HSE divided by 2 selected as LCD clock
N  *             @arg @ref RCC_RTCCLKSOURCE_HSE_DIV4 HSE divided by 4 selected as LCD clock
N  *             @arg @ref RCC_RTCCLKSOURCE_HSE_DIV8 HSE divided by 8 selected as LCD clock
N  *             @arg @ref RCC_RTCCLKSOURCE_HSE_DIV16 HSE divided by 16 selected as LCD clock
N  */
N#define __HAL_RCC_LCD_CONFIG(__LCD_CLKSOURCE__) __HAL_RCC_RTC_CONFIG(__LCD_CLKSOURCE__)
N
N/** @brief Macro to get the LCD clock source.
N  */
N#define __HAL_RCC_GET_LCD_SOURCE()              __HAL_RCC_GET_RTC_SOURCE()
N
N/** @brief Macro to get the LCD clock pre-scaler.
N  */
N#define  __HAL_RCC_GET_LCD_HSE_PRESCALER()      __HAL_RCC_GET_RTC_HSE_PRESCALER()
N
N/**
N  * @}
N  */
N
N#endif /* LCD */
N
N/** @brief Macro to configure the I2C1 clock (I2C1CLK).
N  *
N  * @param  __I2C1_CLKSOURCE__ specifies the I2C1 clock source.
N  *          This parameter can be one of the following values:
N  *            @arg @ref RCC_I2C1CLKSOURCE_PCLK1 PCLK1 selected as I2C1 clock  
N  *            @arg @ref RCC_I2C1CLKSOURCE_HSI HSI selected as I2C1 clock
N  *            @arg @ref RCC_I2C1CLKSOURCE_SYSCLK System Clock selected as I2C1 clock 
N  */
N#define __HAL_RCC_I2C1_CONFIG(__I2C1_CLKSOURCE__) \
N                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2C1SEL, (uint32_t)(__I2C1_CLKSOURCE__))
X#define __HAL_RCC_I2C1_CONFIG(__I2C1_CLKSOURCE__)                   MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2C1SEL, (uint32_t)(__I2C1_CLKSOURCE__))
N
N/** @brief  Macro to get the I2C1 clock source.
N  * @retval The clock source can be one of the following values:
N  *            @arg @ref RCC_I2C1CLKSOURCE_PCLK1 PCLK1 selected as I2C1 clock  
N  *            @arg @ref RCC_I2C1CLKSOURCE_HSI HSI selected as I2C1 clock
N  *            @arg @ref RCC_I2C1CLKSOURCE_SYSCLK System Clock selected as I2C1 clock
N  */
N#define __HAL_RCC_GET_I2C1_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_I2C1SEL)))
N
N#if defined(RCC_CCIPR_I2C3SEL)  
X#if 0L  
S/** @brief Macro to configure the I2C3 clock (I2C3CLK).
S  *
S  * @param  __I2C3_CLKSOURCE__ specifies the I2C3 clock source.
S  *          This parameter can be one of the following values:
S  *            @arg @ref RCC_I2C3CLKSOURCE_PCLK1 PCLK1 selected as I2C3 clock  
S  *            @arg @ref RCC_I2C3CLKSOURCE_HSI HSI selected as I2C3 clock
S  *            @arg @ref RCC_I2C3CLKSOURCE_SYSCLK System Clock selected as I2C3 clock 
S  */
S#define __HAL_RCC_I2C3_CONFIG(__I2C3_CLKSOURCE__) \
S                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2C3SEL, (uint32_t)(__I2C3_CLKSOURCE__))
X#define __HAL_RCC_I2C3_CONFIG(__I2C3_CLKSOURCE__)                   MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2C3SEL, (uint32_t)(__I2C3_CLKSOURCE__))
S
S/** @brief  Macro to get the I2C3 clock source.
S  * @retval The clock source can be one of the following values:
S  *            @arg @ref RCC_I2C3CLKSOURCE_PCLK1 PCLK1 selected as I2C3 clock  
S  *            @arg @ref RCC_I2C3CLKSOURCE_HSI HSI selected as I2C3 clock
S  *            @arg @ref RCC_I2C3CLKSOURCE_SYSCLK System Clock selected as I2C3 clock
S  */
S#define __HAL_RCC_GET_I2C3_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_I2C3SEL)))
S
N#endif /* RCC_CCIPR_I2C3SEL */ 
N
N#if defined (RCC_CCIPR_USART1SEL)
X#if 1L
N/** @brief Macro to configure the USART1 clock (USART1CLK).
N  *
N  * @param  __USART1_CLKSOURCE__ specifies the USART1 clock source.
N  *          This parameter can be one of the following values:
N  *            @arg @ref RCC_USART1CLKSOURCE_PCLK2 PCLK2 selected as USART1 clock
N  *            @arg @ref RCC_USART1CLKSOURCE_HSI HSI selected as USART1 clock
N  *            @arg @ref RCC_USART1CLKSOURCE_SYSCLK System Clock selected as USART1 clock
N  *            @arg @ref RCC_USART1CLKSOURCE_LSE LSE selected as USART1 clock
N  */
N#define __HAL_RCC_USART1_CONFIG(__USART1_CLKSOURCE__) \
N                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, (uint32_t)(__USART1_CLKSOURCE__))
X#define __HAL_RCC_USART1_CONFIG(__USART1_CLKSOURCE__)                   MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, (uint32_t)(__USART1_CLKSOURCE__))
N
N/** @brief  Macro to get the USART1 clock source.
N  * @retval The clock source can be one of the following values:
N  *            @arg @ref RCC_USART1CLKSOURCE_PCLK2 PCLK2 selected as USART1 clock
N  *            @arg @ref RCC_USART1CLKSOURCE_HSI HSI selected as USART1 clock
N  *            @arg @ref RCC_USART1CLKSOURCE_SYSCLK System Clock selected as USART1 clock
N  *            @arg @ref RCC_USART1CLKSOURCE_LSE LSE selected as USART1 clock
N  */
N#define __HAL_RCC_GET_USART1_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL)))
N#endif /* RCC_CCIPR_USART1SEL */
N
N/** @brief Macro to configure the USART2 clock (USART2CLK).
N  *
N  * @param  __USART2_CLKSOURCE__ specifies the USART2 clock source.
N  *          This parameter can be one of the following values:
N  *            @arg @ref RCC_USART2CLKSOURCE_PCLK1 PCLK1 selected as USART2 clock
N  *            @arg @ref RCC_USART2CLKSOURCE_HSI HSI selected as USART2 clock
N  *            @arg @ref RCC_USART2CLKSOURCE_SYSCLK System Clock selected as USART2 clock
N  *            @arg @ref RCC_USART2CLKSOURCE_LSE LSE selected as USART2 clock
N  */
N#define __HAL_RCC_USART2_CONFIG(__USART2_CLKSOURCE__) \
N                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART2SEL, (uint32_t)(__USART2_CLKSOURCE__))
X#define __HAL_RCC_USART2_CONFIG(__USART2_CLKSOURCE__)                   MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART2SEL, (uint32_t)(__USART2_CLKSOURCE__))
N
N/** @brief  Macro to get the USART2 clock source.
N  * @retval The clock source can be one of the following values:
N  *            @arg @ref RCC_USART2CLKSOURCE_PCLK1 PCLK1 selected as USART2 clock
N  *            @arg @ref RCC_USART2CLKSOURCE_HSI HSI selected as USART2 clock
N  *            @arg @ref RCC_USART2CLKSOURCE_SYSCLK System Clock selected as USART2 clock
N  *            @arg @ref RCC_USART2CLKSOURCE_LSE LSE selected as USART2 clock
N  */
N#define __HAL_RCC_GET_USART2_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_USART2SEL)))
N
N/** @brief Macro to configure the LPUART1 clock (LPUART1CLK).
N  *
N  * @param  __LPUART1_CLKSOURCE__ specifies the LPUART1 clock source.
N  *          This parameter can be one of the following values:
N  *            @arg @ref RCC_LPUART1CLKSOURCE_PCLK1 PCLK1 selected as LPUART1 clock
N  *            @arg @ref RCC_LPUART1CLKSOURCE_HSI HSI selected as LPUART1 clock
N  *            @arg @ref RCC_LPUART1CLKSOURCE_SYSCLK System Clock selected as LPUART1 clock
N  *            @arg @ref RCC_LPUART1CLKSOURCE_LSE LSE selected as LPUART1 clock
N  */
N#define __HAL_RCC_LPUART1_CONFIG(__LPUART1_CLKSOURCE__) \
N                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, (uint32_t)(__LPUART1_CLKSOURCE__))
X#define __HAL_RCC_LPUART1_CONFIG(__LPUART1_CLKSOURCE__)                   MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, (uint32_t)(__LPUART1_CLKSOURCE__))
N
N/** @brief  Macro to get the LPUART1 clock source.
N  * @retval The clock source can be one of the following values:
N  *            @arg @ref RCC_LPUART1CLKSOURCE_PCLK1 PCLK1 selected as LPUART1 clock
N  *            @arg @ref RCC_LPUART1CLKSOURCE_HSI HSI selected as LPUART1 clock
N  *            @arg @ref RCC_LPUART1CLKSOURCE_SYSCLK System Clock selected as LPUART1 clock
N  *            @arg @ref RCC_LPUART1CLKSOURCE_LSE LSE selected as LPUART1 clock
N  */
N#define __HAL_RCC_GET_LPUART1_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_LPUART1SEL)))
N
N/** @brief Macro to configure the LPTIM1 clock (LPTIM1CLK).
N  *
N  * @param  __LPTIM1_CLKSOURCE__ specifies the LPTIM1 clock source.
N  *          This parameter can be one of the following values:
N  *            @arg @ref RCC_LPTIM1CLKSOURCE_PCLK PCLK selected as LPTIM1 clock
N  *            @arg @ref RCC_LPTIM1CLKSOURCE_LSI  HSI  selected as LPTIM1 clock
N  *            @arg @ref RCC_LPTIM1CLKSOURCE_HSI  LSI  selected as LPTIM1 clock
N  *            @arg @ref RCC_LPTIM1CLKSOURCE_LSE  LSE  selected as LPTIM1 clock
N  */
N#define __HAL_RCC_LPTIM1_CONFIG(__LPTIM1_CLKSOURCE__) \
N                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPTIM1SEL, (uint32_t)(__LPTIM1_CLKSOURCE__))
X#define __HAL_RCC_LPTIM1_CONFIG(__LPTIM1_CLKSOURCE__)                   MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPTIM1SEL, (uint32_t)(__LPTIM1_CLKSOURCE__))
N
N/** @brief  Macro to get the LPTIM1 clock source.
N  * @retval The clock source can be one of the following values:
N  *            @arg @ref RCC_LPTIM1CLKSOURCE_PCLK PCLK selected as LPUART1 clock
N  *            @arg @ref RCC_LPTIM1CLKSOURCE_LSI  HSI selected as LPUART1 clock
N  *            @arg @ref RCC_LPTIM1CLKSOURCE_HSI  System Clock selected as LPUART1 clock
N  *            @arg @ref RCC_LPTIM1CLKSOURCE_LSE  LSE selected as LPUART1 clock
N  */
N#define __HAL_RCC_GET_LPTIM1_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_LPTIM1SEL)))
N
N#if defined(USB)
X#if 1L
N/** @brief  Macro to configure the USB clock (USBCLK).
N  * @param  __USB_CLKSOURCE__ specifies the USB clock source.
N  *         This parameter can be one of the following values:
N  *            @arg @ref RCC_USBCLKSOURCE_HSI48  HSI48 selected as USB clock
N  *            @arg @ref RCC_USBCLKSOURCE_PLL PLL Clock selected as USB clock
N  */
N#define __HAL_RCC_USB_CONFIG(__USB_CLKSOURCE__) \
N                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_HSI48SEL, (uint32_t)(__USB_CLKSOURCE__))
X#define __HAL_RCC_USB_CONFIG(__USB_CLKSOURCE__)                   MODIFY_REG(RCC->CCIPR, RCC_CCIPR_HSI48SEL, (uint32_t)(__USB_CLKSOURCE__))
N
N/** @brief  Macro to get the USB clock source.
N  * @retval The clock source can be one of the following values:
N  *            @arg @ref RCC_USBCLKSOURCE_HSI48  HSI48 selected as USB clock
N  *            @arg @ref RCC_USBCLKSOURCE_PLL PLL Clock selected as USB clock
N  */
N#define __HAL_RCC_GET_USB_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_HSI48SEL)))
N#endif /* USB */
N
N#if defined(RNG)
X#if 1L
N/** @brief  Macro to configure the RNG clock (RNGCLK).
N  * @param  __RNG_CLKSOURCE__ specifies the USB clock source.
N  *         This parameter can be one of the following values:
N  *            @arg @ref RCC_RNGCLKSOURCE_HSI48  HSI48 selected as RNG clock
N  *            @arg @ref RCC_RNGCLKSOURCE_PLLCLK PLL Clock selected as RNG clock
N  */
N#define __HAL_RCC_RNG_CONFIG(__RNG_CLKSOURCE__) \
N                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_HSI48SEL, (uint32_t)(__RNG_CLKSOURCE__))
X#define __HAL_RCC_RNG_CONFIG(__RNG_CLKSOURCE__)                   MODIFY_REG(RCC->CCIPR, RCC_CCIPR_HSI48SEL, (uint32_t)(__RNG_CLKSOURCE__))
N
N/** @brief  Macro to get the RNG clock source.
N  * @retval The clock source can be one of the following values:
N  *            @arg @ref RCC_RNGCLKSOURCE_HSI48  HSI48 selected as RNG clock
N  *            @arg @ref RCC_RNGCLKSOURCE_PLLCLK PLL Clock selected as RNG clock
N  */
N#define __HAL_RCC_GET_RNG_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_HSI48SEL)))
N#endif /* RNG */
N
N#if defined(RCC_CCIPR_HSI48SEL)
X#if 1L
N/** @brief Macro to select the HSI48M clock source 
N  * @note   This macro can be replaced by either __HAL_RCC_RNG_CONFIG or
N  *         __HAL_RCC_USB_CONFIG to configure respectively RNG or UBS clock sources.
N  *
N  * @param  __HSI48M_CLKSOURCE__ specifies the HSI48M clock source dedicated for 
N  *          USB an RNG peripherals.                 
N  *          This parameter can be one of the following values:
N  *            @arg @ref RCC_HSI48M_PLL A dedicated 48MHZ PLL output.
N  *            @arg @ref RCC_HSI48M_HSI48 48MHZ issued from internal HSI48 oscillator. 
N  */
N#define __HAL_RCC_HSI48M_CONFIG(__HSI48M_CLKSOURCE__) \
N                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_HSI48SEL, (uint32_t)(__HSI48M_CLKSOURCE__))                    
X#define __HAL_RCC_HSI48M_CONFIG(__HSI48M_CLKSOURCE__)                   MODIFY_REG(RCC->CCIPR, RCC_CCIPR_HSI48SEL, (uint32_t)(__HSI48M_CLKSOURCE__))                    
N
N/** @brief  Macro to get the HSI48M clock source.
N  * @note   This macro can be replaced by either __HAL_RCC_GET_RNG_SOURCE or
N  *         __HAL_RCC_GET_USB_SOURCE to get respectively RNG or UBS clock sources.
N  * @retval The clock source can be one of the following values:
N  *           @arg @ref RCC_HSI48M_PLL A dedicated 48MHZ PLL output.
N  *            @arg @ref RCC_HSI48M_HSI48 48MHZ issued from internal HSI48 oscillator. 
N  */
N#define __HAL_RCC_GET_HSI48M_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_HSI48SEL)))       
N#endif /* RCC_CCIPR_HSI48SEL */ 
N
N/**
N  * @brief    Macro to enable the force of the Internal High Speed oscillator (HSI)
N  *           in STOP mode to be quickly available as kernel clock for USART and I2C.
N  * @note     The Enable of this function has not effect on the HSION bit.
N  */
N#define __HAL_RCC_HSISTOP_ENABLE()  SET_BIT(RCC->CR, RCC_CR_HSIKERON)
N
N/**
N  * @brief    Macro to disable the force of the Internal High Speed oscillator (HSI)
N  *           in STOP mode to be quickly available as kernel clock for USART and I2C.
N  * @retval None
N  */
N#define __HAL_RCC_HSISTOP_DISABLE() CLEAR_BIT(RCC->CR, RCC_CR_HSIKERON)                   
N
N/**
N  * @brief  Macro to configures the External Low Speed oscillator (LSE) drive capability.
N  * @param  __RCC_LSEDRIVE__ specifies the new state of the LSE drive capability.
N  *          This parameter can be one of the following values:
N  *            @arg @ref RCC_LSEDRIVE_LOW LSE oscillator low drive capability.
N  *            @arg @ref RCC_LSEDRIVE_MEDIUMLOW LSE oscillator medium low drive capability.
N  *            @arg @ref RCC_LSEDRIVE_MEDIUMHIGH LSE oscillator medium high drive capability.
N  *            @arg @ref RCC_LSEDRIVE_HIGH LSE oscillator high drive capability.
N  * @retval None
N  */ 
N#define __HAL_RCC_LSEDRIVE_CONFIG(__RCC_LSEDRIVE__) (MODIFY_REG(RCC->CSR,\
N        RCC_CSR_LSEDRV, (uint32_t)(__RCC_LSEDRIVE__) ))
X#define __HAL_RCC_LSEDRIVE_CONFIG(__RCC_LSEDRIVE__) (MODIFY_REG(RCC->CSR,        RCC_CSR_LSEDRV, (uint32_t)(__RCC_LSEDRIVE__) ))
N
N/**
N  * @brief  Macro to configures the wake up from stop clock.
N  * @param  __RCC_STOPWUCLK__ specifies the clock source used after wake up from stop 
N  *   This parameter can be one of the following values:
N  *     @arg @ref RCC_STOP_WAKEUPCLOCK_MSI    MSI selected as system clock source
N  *     @arg @ref RCC_STOP_WAKEUPCLOCK_HSI    HSI selected as system clock source
N  * @retval None
N  */
N#define __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(__RCC_STOPWUCLK__) (MODIFY_REG(RCC->CFGR,\
N        RCC_CFGR_STOPWUCK, (uint32_t)(__RCC_STOPWUCLK__) ))
X#define __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(__RCC_STOPWUCLK__) (MODIFY_REG(RCC->CFGR,        RCC_CFGR_STOPWUCK, (uint32_t)(__RCC_STOPWUCLK__) ))
N        
N#if defined(CRS)
X#if 1L
N/**
N  * @brief  Enables the specified CRS interrupts.
N  * @param  __INTERRUPT__ specifies the CRS interrupt sources to be enabled.
N  *          This parameter can be any combination of the following values:
N  *              @arg @ref RCC_CRS_IT_SYNCOK
N  *              @arg @ref RCC_CRS_IT_SYNCWARN
N  *              @arg @ref RCC_CRS_IT_ERR
N  *              @arg @ref RCC_CRS_IT_ESYNC
N  * @retval None
N  */
N#define __HAL_RCC_CRS_ENABLE_IT(__INTERRUPT__)   SET_BIT(CRS->CR, (__INTERRUPT__))
N
N/**
N  * @brief  Disables the specified CRS interrupts.
N  * @param  __INTERRUPT__ specifies the CRS interrupt sources to be disabled.
N  *          This parameter can be any combination of the following values:
N  *              @arg @ref RCC_CRS_IT_SYNCOK
N  *              @arg @ref RCC_CRS_IT_SYNCWARN
N  *              @arg @ref RCC_CRS_IT_ERR
N  *              @arg @ref RCC_CRS_IT_ESYNC
N  * @retval None
N  */
N#define __HAL_RCC_CRS_DISABLE_IT(__INTERRUPT__)  CLEAR_BIT(CRS->CR,(__INTERRUPT__))
N
N/** @brief  Check the CRS interrupt has occurred or not.
N  * @param  __INTERRUPT__ specifies the CRS interrupt source to check.
N  *         This parameter can be one of the following values:
N  *              @arg @ref RCC_CRS_IT_SYNCOK
N  *              @arg @ref RCC_CRS_IT_SYNCWARN
N  *              @arg @ref RCC_CRS_IT_ERR
N  *              @arg @ref RCC_CRS_IT_ESYNC
N  * @retval The new state of __INTERRUPT__ (SET or RESET).
N  */
N#define __HAL_RCC_CRS_GET_IT_SOURCE(__INTERRUPT__)     ((CRS->CR & (__INTERRUPT__))? SET : RESET)
N
N/** @brief  Clear the CRS interrupt pending bits
N  *         bits to clear the selected interrupt pending bits.
N  * @param  __INTERRUPT__ specifies the interrupt pending bit to clear.
N  *         This parameter can be any combination of the following values:
N  *              @arg @ref RCC_CRS_IT_SYNCOK
N  *              @arg @ref RCC_CRS_IT_SYNCWARN
N  *              @arg @ref RCC_CRS_IT_ERR
N  *              @arg @ref RCC_CRS_IT_ESYNC
N  *              @arg @ref RCC_CRS_IT_TRIMOVF
N  *              @arg @ref RCC_CRS_IT_SYNCERR
N  *              @arg @ref RCC_CRS_IT_SYNCMISS
N  */
N#define __HAL_RCC_CRS_CLEAR_IT(__INTERRUPT__)  do { \
N                                                 if(((__INTERRUPT__) & RCC_CRS_IT_ERROR_MASK) != RESET) \
N                                                 { \
N                                                   WRITE_REG(CRS->ICR, CRS_ICR_ERRC | ((__INTERRUPT__) & ~RCC_CRS_IT_ERROR_MASK)); \
N                                                 } \
N                                                 else \
N                                                 { \
N                                                   WRITE_REG(CRS->ICR, (__INTERRUPT__)); \
N                                                 } \
N                                               } while(0)
X#define __HAL_RCC_CRS_CLEAR_IT(__INTERRUPT__)  do {                                                  if(((__INTERRUPT__) & RCC_CRS_IT_ERROR_MASK) != RESET)                                                  {                                                    WRITE_REG(CRS->ICR, CRS_ICR_ERRC | ((__INTERRUPT__) & ~RCC_CRS_IT_ERROR_MASK));                                                  }                                                  else                                                  {                                                    WRITE_REG(CRS->ICR, (__INTERRUPT__));                                                  }                                                } while(0)
N
N/**
N  * @brief  Checks whether the specified CRS flag is set or not.
N  * @param  __FLAG__ specifies the flag to check.
N  *          This parameter can be one of the following values:
N  *              @arg @ref RCC_CRS_FLAG_SYNCOK
N  *              @arg @ref RCC_CRS_FLAG_SYNCWARN
N  *              @arg @ref RCC_CRS_FLAG_ERR
N  *              @arg @ref RCC_CRS_FLAG_ESYNC
N  *              @arg @ref RCC_CRS_FLAG_TRIMOVF
N  *              @arg @ref RCC_CRS_FLAG_SYNCERR
N  *              @arg @ref RCC_CRS_FLAG_SYNCMISS
N  * @retval The new state of __FLAG__ (TRUE or FALSE).
N  */
N#define __HAL_RCC_CRS_GET_FLAG(__FLAG__)  ((CRS->ISR & (__FLAG__)) == (__FLAG__))
N
N/**
N  * @brief  Clears the CRS specified FLAG.
N  * @param __FLAG__ specifies the flag to clear.
N  *          This parameter can be one of the following values:
N  *              @arg @ref RCC_CRS_FLAG_SYNCOK
N  *              @arg @ref RCC_CRS_FLAG_SYNCWARN
N  *              @arg @ref RCC_CRS_FLAG_ERR
N  *              @arg @ref RCC_CRS_FLAG_ESYNC
N  *              @arg @ref RCC_CRS_FLAG_TRIMOVF
N  *              @arg @ref RCC_CRS_FLAG_SYNCERR
N  *              @arg @ref RCC_CRS_FLAG_SYNCMISS
N  * @retval None
N  */
N#define __HAL_RCC_CRS_CLEAR_FLAG(__FLAG__)     do { \
N                                                 if(((__FLAG__) & RCC_CRS_FLAG_ERROR_MASK) != RESET) \
N                                                 { \
N                                                   WRITE_REG(CRS->ICR, CRS_ICR_ERRC | ((__FLAG__) & ~RCC_CRS_FLAG_ERROR_MASK)); \
N                                                 } \
N                                                 else \
N                                                 { \
N                                                   WRITE_REG(CRS->ICR, (__FLAG__)); \
N                                                 } \
N                                               } while(0)
X#define __HAL_RCC_CRS_CLEAR_FLAG(__FLAG__)     do {                                                  if(((__FLAG__) & RCC_CRS_FLAG_ERROR_MASK) != RESET)                                                  {                                                    WRITE_REG(CRS->ICR, CRS_ICR_ERRC | ((__FLAG__) & ~RCC_CRS_FLAG_ERROR_MASK));                                                  }                                                  else                                                  {                                                    WRITE_REG(CRS->ICR, (__FLAG__));                                                  }                                                } while(0)
N
N/**
N  * @brief  Enables the oscillator clock for frequency error counter.
N  * @note   when the CEN bit is set the CRS_CFGR register becomes write-protected.
N  * @retval None
N  */
N#define __HAL_RCC_CRS_FREQ_ERROR_COUNTER_ENABLE() SET_BIT(CRS->CR, CRS_CR_CEN)
N
N/**
N  * @brief  Disables the oscillator clock for frequency error counter.
N  * @retval None
N  */
N#define __HAL_RCC_CRS_FREQ_ERROR_COUNTER_DISABLE()  CLEAR_BIT(CRS->CR, CRS_CR_CEN)
N
N/**
N  * @brief  Enables the automatic hardware adjustment of TRIM bits.
N  * @note   When the AUTOTRIMEN bit is set the CRS_CFGR register becomes write-protected.
N  * @retval None
N  */
N#define __HAL_RCC_CRS_AUTOMATIC_CALIB_ENABLE()  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN)
N
N/**
N  * @brief  Enables or disables the automatic hardware adjustment of TRIM bits.
N  * @retval None
N  */
N#define __HAL_RCC_CRS_AUTOMATIC_CALIB_DISABLE()  CLEAR_BIT(CRS->CR, CRS_CR_AUTOTRIMEN)
N
N/**
N  * @brief  Macro to calculate reload value to be set in CRS register according to target and sync frequencies
N  * @note   The RELOAD value should be selected according to the ratio between the target frequency and the frequency 
N  *             of the synchronization source after prescaling. It is then decreased by one in order to 
N  *             reach the expected synchronization on the zero value. The formula is the following:
N  *             RELOAD = (fTARGET / fSYNC) -1
N  * @param  __FTARGET__ Target frequency (value in Hz)
N  * @param  __FSYNC__   Synchronization signal frequency (value in Hz)
N  * @retval None
N  */
N#define __HAL_RCC_CRS_RELOADVALUE_CALCULATE(__FTARGET__, __FSYNC__)  (((__FTARGET__) / (__FSYNC__)) - 1)
N
N#endif /* CRS */
N
N
N#if defined(RCC_CR_HSIOUTEN)
X#if 0L
S/** @brief  Enable he HSI OUT .
S  * @note   After reset, the HSI output is not available
S  */
S
S#define __HAL_RCC_HSI_OUT_ENABLE()   SET_BIT(RCC->CR, RCC_CR_HSIOUTEN)
S
S/** @brief  Disable the HSI OUT .
S  * @note   After reset, the HSI output is not available
S  */
S
S#define __HAL_RCC_HSI_OUT_DISABLE()  CLEAR_BIT(RCC->CR, RCC_CR_HSIOUTEN)
S
N#endif /* RCC_CR_HSIOUTEN */
N
N#if defined(STM32L053xx) || defined(STM32L063xx) || defined(STM32L073xx) || defined(STM32L083xx)\
N     || defined(STM32L052xx) || defined(STM32L062xx) || defined(STM32L072xx) || defined(STM32L082xx)
X#if 1L || 0L || 0L || 0L     || 0L || 0L || 0L || 0L
N
N/**
N  * @brief  Enable the Internal High Speed oscillator for USB (HSI48).
N  * @note   After enabling the HSI48, the application software should wait on 
N  *         HSI48RDY flag to be set indicating that HSI48 clock is stable and can
N  *         be used to clock the USB.
N  * @note   The HSI48 is stopped by hardware when entering STOP and STANDBY modes.
N  */
N#define __HAL_RCC_HSI48_ENABLE()  do { SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);            \
N                                       SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN);       \
N                                       SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENREF_HSI48);  \
N                                  } while (0)
X#define __HAL_RCC_HSI48_ENABLE()  do { SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);                                                   SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN);                                              SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENREF_HSI48);                                    } while (0)
N/**
N  * @brief  Disable the Internal High Speed oscillator for USB (HSI48).
N  */
N#define __HAL_RCC_HSI48_DISABLE()  do { CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);   \
N                                        CLEAR_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENREF_HSI48);  \
N                                   } while (0)
X#define __HAL_RCC_HSI48_DISABLE()  do { CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);                                           CLEAR_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENREF_HSI48);                                     } while (0)
N
N/** @brief  Macro to get the Internal 48Mhz High Speed oscillator (HSI48) state.
N  * @retval The clock source can be one of the following values:
N  *            @arg @ref RCC_HSI48_ON  HSI48 enabled
N  *            @arg @ref RCC_HSI48_OFF HSI48 disabled
N  */
N#define __HAL_RCC_GET_HSI48_STATE() \
N                  (((uint32_t)(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON)) != RESET) ? RCC_HSI48_ON : RCC_HSI48_OFF)  
X#define __HAL_RCC_GET_HSI48_STATE()                   (((uint32_t)(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON)) != RESET) ? RCC_HSI48_ON : RCC_HSI48_OFF)  
N
N/** @brief  Enable or disable the HSI48M DIV6 OUT .
N  * @note   After reset, the HSI48Mhz (divided by 6) output is not available
N  */
N
N#define __HAL_RCC_HSI48M_DIV6_OUT_ENABLE()   SET_BIT(RCC->CR, RCC_CRRCR_HSI48DIV6OUTEN)
N#define __HAL_RCC_HSI48M_DIV6_OUT_DISABLE()  CLEAR_BIT(RCC->CR, RCC_CRRCR_HSI48DIV6OUTEN)
N
N#endif /* STM32L071xx  ||  STM32L081xx  || */
N       /* STM32L072xx  ||  STM32L082xx  || */
N       /* STM32L073xx  ||  STM32L083xx     */
N       
N
N/**
N  * @}
N  */
N
N/* Exported functions --------------------------------------------------------*/
N/** @addtogroup RCCEx_Exported_Functions
N  * @{
N  */
N
N/** @addtogroup RCCEx_Exported_Functions_Group1
N  * @{
N  */
N
NHAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit);
Nvoid              HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit);
Nuint32_t          HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk);
N
N
Nvoid              HAL_RCCEx_EnableLSECSS(void);
Nvoid              HAL_RCCEx_DisableLSECSS(void);
Nvoid              HAL_RCCEx_EnableLSECSS_IT(void);
Nvoid              HAL_RCCEx_LSECSS_IRQHandler(void);
Nvoid              HAL_RCCEx_LSECSS_Callback(void);
N
N
N#if defined(SYSCFG_CFGR3_ENREF_HSI48)
X#if 1L
Nvoid HAL_RCCEx_EnableHSI48_VREFINT(void);
Nvoid HAL_RCCEx_DisableHSI48_VREFINT(void);
N#endif /* SYSCFG_CFGR3_ENREF_HSI48 */
N
N/**
N  * @}
N  */
N
N#if defined(CRS)
X#if 1L
N
N/** @addtogroup RCCEx_Exported_Functions_Group3
N  * @{
N  */
N
Nvoid              HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit);
Nvoid              HAL_RCCEx_CRSSoftwareSynchronizationGenerate(void);
Nvoid              HAL_RCCEx_CRSGetSynchronizationInfo(RCC_CRSSynchroInfoTypeDef *pSynchroInfo);
Nuint32_t          HAL_RCCEx_CRSWaitSynchronization(uint32_t Timeout);
Nvoid              HAL_RCCEx_CRS_IRQHandler(void);
Nvoid              HAL_RCCEx_CRS_SyncOkCallback(void);
Nvoid              HAL_RCCEx_CRS_SyncWarnCallback(void);
Nvoid              HAL_RCCEx_CRS_ExpectedSyncCallback(void);
Nvoid              HAL_RCCEx_CRS_ErrorCallback(uint32_t Error);
N
N/**
N  * @}
N  */
N
N#endif /* CRS */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N  
N/**
N  * @}
N  */
N  
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32L0xx_HAL_RCC_EX_H */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
L 1692 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_rcc.h" 2
N
N/* Exported functions --------------------------------------------------------*/
N/** @addtogroup RCC_Exported_Functions
N  * @{
N  */
N
N/** @addtogroup RCC_Exported_Functions_Group1
N  * @{
N  */
N
N/* Initialization and de-initialization functions  ******************************/
Nvoid              HAL_RCC_DeInit(void);
NHAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct);
NHAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency);
N
N/**
N  * @}
N  */
N
N/** @addtogroup RCC_Exported_Functions_Group2
N  * @{
N  */
N
N/* Peripheral Control functions  ************************************************/
Nvoid              HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv);
N#if defined(RCC_HSECSS_SUPPORT)
X#if 1L
Nvoid              HAL_RCC_EnableCSS(void);
N/* CSS NMI IRQ handler */
Nvoid              HAL_RCC_NMI_IRQHandler(void);
N/* User Callbacks in non blocking mode (IT mode) */
Nvoid              HAL_RCC_CSSCallback(void);
N#endif /* RCC_HSECSS_SUPPORT */
Nuint32_t          HAL_RCC_GetSysClockFreq(void);
Nuint32_t          HAL_RCC_GetHCLKFreq(void);
Nuint32_t          HAL_RCC_GetPCLK1Freq(void);
Nuint32_t          HAL_RCC_GetPCLK2Freq(void);
Nvoid              HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct);
Nvoid              HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency);
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N  
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32L0xx_HAL_RCC_H */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
L 171 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\Conf\stm32l0xx_hal_conf.h" 2
N#endif /* HAL_RCC_MODULE_ENABLED */
N
N#ifdef HAL_GPIO_MODULE_ENABLED
N  #include "stm32l0xx_hal_gpio.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_gpio.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal_gpio.h
N  * @author  MCD Application Team
N  * @brief   Header file of GPIO HAL module.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_GPIO_H
N#define __STM32L0xx_HAL_GPIO_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx_hal_def.h"
N
N/** @addtogroup STM32L0xx_HAL_Driver
N  * @{
N  */
N
N/** @defgroup GPIO GPIO
N  * @{
N  */ 
N/******************************************************************************/
N/* Exported types ------------------------------------------------------------*/
N/******************************************************************************/
N
N/** @defgroup GPIO_Exported_Types GPIO Exported Types
N  * @{
N  */
N
N/** @defgroup GPIO_Init_Configuration GPIO init configuration structure
N  * @{
N  */
N/** 
N  * @brief   GPIO Init structure definition  
N  */ 
Ntypedef struct
N{
N  uint32_t Pin;       /*!< Specifies the GPIO pins to be configured.
N                           This parameter can be a combination of @ref GPIO_pins_define */
N
N  uint32_t Mode;      /*!< Specifies the operating mode for the selected pins.
N                           This parameter can be a value of @ref GPIO_mode_define */
N
N  uint32_t Pull;      /*!< Specifies the Pull-up or Pull-Down activation for the selected pins.
N                           This parameter can be a value of @ref GPIO_pull_define */
N
N  uint32_t Speed;     /*!< Specifies the speed for the selected pins.
N                           This parameter can be a value of @ref GPIO_speed_define */
N
N  uint32_t Alternate;  /*!< Peripheral to be connected to the selected pins 
N                            This parameter can be a value of @ref GPIOEx_Alternate_function_selection */
N}GPIO_InitTypeDef;
N/**
N  * @}
N  */
N
N/** @defgroup GPIO_SetReset_Definition  GPIO set reset definition
N  * @{
N  */
N/** 
N  * @brief  GPIO Bit SET and Bit RESET enumeration 
N  */
Ntypedef enum
N{
N  GPIO_PIN_RESET = 0U,
N  GPIO_PIN_SET
N}GPIO_PinState;
N/**
N  * @}
N  */
N
N
N#define IS_GPIO_PIN_ACTION(__ACTION__) (((__ACTION__) == GPIO_PIN_RESET) || ((__ACTION__) == GPIO_PIN_SET))
N
N/**
N  * @}
N  */
N/******************************************************************************/
N/* Exported constants --------------------------------------------------------*/
N/******************************************************************************/
N
N/** @defgroup GPIO_Exported_Constants GPIO Exported Constants
N  * @{
N  */
N
N/** @defgroup GPIO_pins_define Pin definition
N  * @{
N  */
N#define GPIO_PIN_0                 ((uint16_t)0x0001U)  /* Pin 0 selected    */
N#define GPIO_PIN_1                 ((uint16_t)0x0002U)  /* Pin 1 selected    */
N#define GPIO_PIN_2                 ((uint16_t)0x0004U)  /* Pin 2 selected    */
N#define GPIO_PIN_3                 ((uint16_t)0x0008U)  /* Pin 3 selected    */
N#define GPIO_PIN_4                 ((uint16_t)0x0010U)  /* Pin 4 selected    */
N#define GPIO_PIN_5                 ((uint16_t)0x0020U)  /* Pin 5 selected    */
N#define GPIO_PIN_6                 ((uint16_t)0x0040U)  /* Pin 6 selected    */
N#define GPIO_PIN_7                 ((uint16_t)0x0080U)  /* Pin 7 selected    */
N#define GPIO_PIN_8                 ((uint16_t)0x0100U)  /* Pin 8 selected    */
N#define GPIO_PIN_9                 ((uint16_t)0x0200U)  /* Pin 9 selected    */
N#define GPIO_PIN_10                ((uint16_t)0x0400U)  /* Pin 10 selected   */
N#define GPIO_PIN_11                ((uint16_t)0x0800U)  /* Pin 11 selected   */
N#define GPIO_PIN_12                ((uint16_t)0x1000U)  /* Pin 12 selected   */
N#define GPIO_PIN_13                ((uint16_t)0x2000U)  /* Pin 13 selected   */
N#define GPIO_PIN_14                ((uint16_t)0x4000U)  /* Pin 14 selected   */
N#define GPIO_PIN_15                ((uint16_t)0x8000U)  /* Pin 15 selected   */
N#define GPIO_PIN_All               ((uint16_t)0xFFFFU)  /* All pins selected */
N/**
N  * @}
N  */
N
N#define GPIO_PIN_MASK              ((uint32_t)0x0000FFFFU) /* PIN mask for assert test */
N#define IS_GPIO_PIN(__PIN__)        ((((__PIN__) & GPIO_PIN_MASK) != (uint32_t)0x00) &&\
N                                     (((__PIN__) & ~GPIO_PIN_MASK) == (uint32_t)0x00))
X#define IS_GPIO_PIN(__PIN__)        ((((__PIN__) & GPIO_PIN_MASK) != (uint32_t)0x00) &&                                     (((__PIN__) & ~GPIO_PIN_MASK) == (uint32_t)0x00))
N
N/** @defgroup GPIO_mode_define Mode definition
N  * @brief GPIO Configuration Mode 
N  *        Elements values convention: 0xX0yz00YZ
N  *           - X  : GPIO mode or EXTI Mode
N  *           - y  : External IT or Event trigger detection 
N  *           - z  : IO configuration on External IT or Event
N  *           - Y  : Output type (Push Pull or Open Drain)
N  *           - Z  : IO Direction mode (Input, Output, Alternate or Analog)
N  * @{
N  */ 
N#define  GPIO_MODE_INPUT                        ((uint32_t)0x00000000U)   /*!< Input Floating Mode                   */
N#define  GPIO_MODE_OUTPUT_PP                    ((uint32_t)0x00000001U)   /*!< Output Push Pull Mode                 */
N#define  GPIO_MODE_OUTPUT_OD                    ((uint32_t)0x00000011U)   /*!< Output Open Drain Mode                */
N#define  GPIO_MODE_AF_PP                        ((uint32_t)0x00000002U)   /*!< Alternate Function Push Pull Mode     */
N#define  GPIO_MODE_AF_OD                        ((uint32_t)0x00000012U)   /*!< Alternate Function Open Drain Mode    */
N
N#define  GPIO_MODE_ANALOG                       ((uint32_t)0x00000003U)   /*!< Analog Mode  */
N    
N#define  GPIO_MODE_IT_RISING                    ((uint32_t)0x10110000U)   /*!< External Interrupt Mode with Rising edge trigger detection          */
N#define  GPIO_MODE_IT_FALLING                   ((uint32_t)0x10210000U)   /*!< External Interrupt Mode with Falling edge trigger detection         */
N#define  GPIO_MODE_IT_RISING_FALLING            ((uint32_t)0x10310000U)   /*!< External Interrupt Mode with Rising/Falling edge trigger detection  */
N 
N#define  GPIO_MODE_EVT_RISING                   ((uint32_t)0x10120000U)   /*!< External Event Mode with Rising edge trigger detection               */
N#define  GPIO_MODE_EVT_FALLING                  ((uint32_t)0x10220000U)   /*!< External Event Mode with Falling edge trigger detection              */
N#define  GPIO_MODE_EVT_RISING_FALLING           ((uint32_t)0x10320000U)   /*!< External Event Mode with Rising/Falling edge trigger detection       */
N
N/**
N  * @}
N  */
N
N#define IS_GPIO_MODE(__MODE__) (((__MODE__) == GPIO_MODE_INPUT)              ||\
N                                ((__MODE__) == GPIO_MODE_OUTPUT_PP)          ||\
N                                ((__MODE__) == GPIO_MODE_OUTPUT_OD)          ||\
N                                ((__MODE__) == GPIO_MODE_AF_PP)              ||\
N                                ((__MODE__) == GPIO_MODE_AF_OD)              ||\
N                                ((__MODE__) == GPIO_MODE_IT_RISING)          ||\
N                                ((__MODE__) == GPIO_MODE_IT_FALLING)         ||\
N                                ((__MODE__) == GPIO_MODE_IT_RISING_FALLING)  ||\
N                                ((__MODE__) == GPIO_MODE_EVT_RISING)         ||\
N                                ((__MODE__) == GPIO_MODE_EVT_FALLING)        ||\
N                                ((__MODE__) == GPIO_MODE_EVT_RISING_FALLING) ||\
N                                ((__MODE__) == GPIO_MODE_ANALOG))
X#define IS_GPIO_MODE(__MODE__) (((__MODE__) == GPIO_MODE_INPUT)              ||                                ((__MODE__) == GPIO_MODE_OUTPUT_PP)          ||                                ((__MODE__) == GPIO_MODE_OUTPUT_OD)          ||                                ((__MODE__) == GPIO_MODE_AF_PP)              ||                                ((__MODE__) == GPIO_MODE_AF_OD)              ||                                ((__MODE__) == GPIO_MODE_IT_RISING)          ||                                ((__MODE__) == GPIO_MODE_IT_FALLING)         ||                                ((__MODE__) == GPIO_MODE_IT_RISING_FALLING)  ||                                ((__MODE__) == GPIO_MODE_EVT_RISING)         ||                                ((__MODE__) == GPIO_MODE_EVT_FALLING)        ||                                ((__MODE__) == GPIO_MODE_EVT_RISING_FALLING) ||                                ((__MODE__) == GPIO_MODE_ANALOG))
N
N
N/** @defgroup GPIO_speed_define Speed definition
N  * @brief GPIO Output Maximum frequency
N  * @{
N  */  
N#define  GPIO_SPEED_FREQ_LOW              ((uint32_t)0x00000000U)  /*!< range up to 0.4 MHz, please refer to the product datasheet */
N#define  GPIO_SPEED_FREQ_MEDIUM           ((uint32_t)0x00000001U)  /*!< range 0.4 MHz to 2 MHz, please refer to the product datasheet */
N#define  GPIO_SPEED_FREQ_HIGH             ((uint32_t)0x00000002U)  /*!< range   2 MHz to 10 MHz, please refer to the product datasheet */
N#define  GPIO_SPEED_FREQ_VERY_HIGH        ((uint32_t)0x00000003U)  /*!< range  10 MHz to 35 MHz, please refer to the product datasheet */
N
N/**
N  * @}
N  */
N
N#define IS_GPIO_SPEED(__SPEED__) (((__SPEED__) == GPIO_SPEED_FREQ_LOW     )  || ((__SPEED__) == GPIO_SPEED_FREQ_MEDIUM     ) || \
N                                  ((__SPEED__) == GPIO_SPEED_FREQ_HIGH  ) || ((__SPEED__) == GPIO_SPEED_FREQ_VERY_HIGH))
X#define IS_GPIO_SPEED(__SPEED__) (((__SPEED__) == GPIO_SPEED_FREQ_LOW     )  || ((__SPEED__) == GPIO_SPEED_FREQ_MEDIUM     ) ||                                   ((__SPEED__) == GPIO_SPEED_FREQ_HIGH  ) || ((__SPEED__) == GPIO_SPEED_FREQ_VERY_HIGH))
N
N
N /** @defgroup GPIO_pull_define Pull definition
N   * @brief GPIO Pull-Up or Pull-Down Activation
N   * @{
N   */  
N#define  GPIO_NOPULL        ((uint32_t)0x00000000U)   /*!< No Pull-up or Pull-down activation  */
N#define  GPIO_PULLUP        ((uint32_t)0x00000001U)   /*!< Pull-up activation                  */
N#define  GPIO_PULLDOWN      ((uint32_t)0x00000002U)   /*!< Pull-down activation                */
N
N/**
N  * @}
N  */
N
N#define IS_GPIO_PULL(__PULL__) (((__PULL__) == GPIO_NOPULL) || ((__PULL__) == GPIO_PULLUP) || \
N                                ((__PULL__) == GPIO_PULLDOWN))
X#define IS_GPIO_PULL(__PULL__) (((__PULL__) == GPIO_NOPULL) || ((__PULL__) == GPIO_PULLUP) ||                                 ((__PULL__) == GPIO_PULLDOWN))
N
N  
N/**
N  * @}
N  */
N/******************************************************************************/
N/* Exported macro ------------------------------------------------------------*/
N/******************************************************************************/
N/* Exported macro ------------------------------------------------------------*/
N/** @defgroup GPIO_Exported_Macro GPIO Exported Macros
N  * @{
N  */
N/**
N  * @brief  Checks whether the specified EXTI line flag is set or not.
N  * @param  __EXTI_LINE__: specifies the EXTI line flag to check.
N  *         This parameter can be GPIO_PIN_x where x can be(0..15)
N  * @retval The new state of __EXTI_LINE__ (SET or RESET).
N  */
N#define __HAL_GPIO_EXTI_GET_FLAG(__EXTI_LINE__) (EXTI->PR & (__EXTI_LINE__))
N
N/**
N  * @brief  Clears the EXTI's line pending flags.
N  * @param  __EXTI_LINE__: specifies the EXTI lines flags to clear.
N  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15)
N  * @retval None
N  */
N#define __HAL_GPIO_EXTI_CLEAR_FLAG(__EXTI_LINE__) (EXTI->PR = (__EXTI_LINE__))
N
N/**
N  * @brief  Checks whether the specified EXTI line is asserted or not.
N  * @param  __EXTI_LINE__: specifies the EXTI line to check.
N  *          This parameter can be GPIO_PIN_x where x can be(0..15)
N  * @retval The new state of __EXTI_LINE__ (SET or RESET).
N  */
N#define __HAL_GPIO_EXTI_GET_IT(__EXTI_LINE__) (EXTI->PR & (__EXTI_LINE__))
N
N/**
N  * @brief  Clears the EXTI's line pending bits.
N  * @param  __EXTI_LINE__: specifies the EXTI lines to clear.
N  *          This parameter can be any combination of GPIO_PIN_x where x can be (0..15)
N  * @retval None
N  */
N#define __HAL_GPIO_EXTI_CLEAR_IT(__EXTI_LINE__) (EXTI->PR = (__EXTI_LINE__))
N
N/**
N  * @brief  Generates a Software interrupt on selected EXTI line.
N  * @param  __EXTI_LINE__: specifies the EXTI line to check.
N  *          This parameter can be GPIO_PIN_x where x can be(0..15)
N  * @retval None
N  */
N#define __HAL_GPIO_EXTI_GENERATE_SWIT(__EXTI_LINE__) (EXTI->SWIER |= (__EXTI_LINE__))
N
N/**
N  * @}
N  */
N/* Include GPIO HAL Extension module */
N#include "stm32l0xx_hal_gpio_ex.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_gpio_ex.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal_gpio_ex.h
N  * @author  MCD Application Team
N  * @brief   Header file of GPIO HAL Extension module.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_GPIO_EX_H
N#define __STM32L0xx_HAL_GPIO_EX_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx_hal_def.h"
N
N/** @addtogroup STM32L0xx_HAL_Driver
N  * @{
N  */
N
N/** @defgroup GPIOEx GPIOEx
N  * @{
N  */
N
N/* Exported types ------------------------------------------------------------*/
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup GPIOEx_Exported_Constants GPIOEx Exported Constants
N  * @{
N  */ 
N  
N
N/*----------------------------------------------------------------------------*/
N/*------------------------- STM32L083xx/STM32L073xx---------------------------*/
N/*----------------------------------------------------------------------------*/
N
N#if defined (STM32L083xx) || defined (STM32L073xx)
X#if 0L || 0L
S
S/* The table below gives an overview of the different alternate functions per port.
S * For more details refer yourself to the product data sheet.
S *
S */
S
S/*     |   AF0  |   AF1  |   AF2  |   AF3  |   AF4  |   AF5  |   AF6  |   AF7  |
S *______________________________________________________________________________
S * PA0 |        |        |TIM2_C1 |TSC     |USART2  |TIM2_TR |USART4  |COMP1   |
S * PA1 |EVENTOUT|LCD     |TIM2_C2 |TSC     |USART2  |TIM21_TR|USART4  |        |
S * PA2 |TIM21_C1|LCD     |TIM2_C3 |TSC     |USART2  |        |LPUART1 |COMP2   |
S * PA3 |TIM21_C2|LCD     |TIM2_C4 |TSC     |USART2  |        |LPUART1 |        |
S * PA4 |SPI1    |        |        |TSC     |USART2  |TIM22_TR|        |        |
S * PA5 |SPI1    |        |TIM2_TR |TSC     |        |TIM2_C1 |        |        |
S * PA6 |SPI1    |LCD     |TIM3_C1 |TSC     |LPUART1 |TIM22_C1|EVENTOUT|COMP1   |
S * PA7 |SPI1    |LCD     |TIM3_C2 |TSC     |        |TIM22_C2|EVENTOUT|COMP2   |
S * PA8 |MCO     |LCD     |USB     |EVENTOUT|USART1  |        |        |I2C3    |
S * PA9 |MCO     |LCD     |        |TSC     |USART1  |        |I2C1    |I2C3    |
S * PA10|        |LCD     |        |TSC     |USART1  |        |I2C1    |        |
S * PA11|SPI1    |        |EVENTOUT|TSC     |USART1  |        |I2C2    |COMP1   |
S * PA12|SPI1    |        |EVENTOUT|TSC     |USART1  |        |I2C2    |COMP2   |
S * PA13|SWDIO   |        |USB     |        |        |        |LPUART1 |        |
S * PA14|SWCLK   |        |        |        |USART2  |        |LPUART1 |        |
S * PA15|SPI1    |LCD     |TIM2_TR |EVENTOUT|USART2  |TIM2_C1 |USART4  |        |
S *______________________________________________________________________________
S * PB0 |EVENTOUT|LCD     |TIM3_C3 |TSC     |        |        |        |        |
S * PB1 |        |LCD     |TIM3_C4 |TSC     |LPUART1 |        |        |        |
S * PB2 |        |        |LPTIM1_O|TSC     |        |        |        |I2C3    |
S * PB3 |SPI1    |LCD     |TIM2_C2 |TSC     |EVENTOUT|USART1  |USART5  |        |
S * PB4 |SPI1    |LCD     |TIM3_C1 |TSC     |TIM22_C1|USART1  |USART5  |I2C3    |
S * PB5 |SPI1    |LCD     |LPTIM1_I|I2C1    |TIM3_C2 |USART1  |USART5  |        |
S *     |        |        |        |        |TIM22_C2|        |        |        |
S * PB6 |USART1  |I2C1    |LPTIM1_T|TSC     |        |        |        |        |
S * PB7 |USART1  |I2C1    |LPTIM1_I|TSC     |        |        |USART4  |        |
S * PB8 |        |LCD     |        |TSC     |I2C1    |        |        |        |
S * PB9 |        |LCD     |EVENTOUT|        |I2C1    |SPI2    |        |        |
S * PB10|        |LCD     |TIM2_C3 |TSC     |LPUART1 |SPI2    |I2C2    |LPUART1 |
S * PB11|EVENTOUT|LCD     |TIM2_C4 |TSC     |LPUART1 |        |I2C2    |LPUART1 |
S * PB12|SPI2    |LCD     |LPUART1 |TSC     |        |I2C2    |EVENTOUT|        |
S * PB13|SPI2    |LCD     |MCO     |TSC     |LPUART1 |I2C2    |TIM21_C1|        |
S * PB14|SPI2    |LCD     |RTC     |TSC     |LPUART1 |I2C2    |TIM21_C2|        |
S * PB15|SPI2    |LCD     |RTC     |        |        |        |        |        |
S *______________________________________________________________________________
S * PC0 |LPTIM1_I|LCD     |EVENTOUT|TSC     |        |        |LPUART1 |I2C3    |
S * PC1 |LPTIM1_O|LCD     |EVENTOUT|TSC     |        |        |LPUART1 |I2C3    |
S * PC2 |LPTIM1_I|LCD     |SPI2    |TSC     |        |        |        |        |
S * PC3 |LPTIM1_T|LCD     |SPI2    |TSC     |        |        |        |        |
S * PC4 |EVENTOUT|LCD     |LPUART1 |        |        |        |        |        |
S * PC5 |        |LCD     |LPUART1 |TSC     |        |        |        |        |
S * PC6 |TIM22_C1|LCD     |TIM3_C1 |TSC     |        |        |        |        |
S * PC7 |TIM22_C2|LCD     |TIM3_C2 |TSC     |        |        |        |        |
S * PC8 |TIM22_TR|LCD     |TIM3_C3 |TSC     |        |        |        |        |
S * PC9 |TIM21_TR|LCD     |USB     |TSC     |        |        |        |I2C3    |
S *     |        |        |TIM3_C4 |        |        |        |        |        |
S * PC10|LPUART1 |LCD     |        |        |        |        |USART4  |        |
S * PC11|LPUART1 |LCD     |        |        |        |        |USART4  |        |
S * PC12|        |LCD     |USART5  |        |        |        |USART4  |        |
S * PC13|        |        |        |        |        |        |        |        |
S * PC14|        |        |        |        |        |        |        |        |
S * PC15|        |        |        |        |        |        |        |        |
S *______________________________________________________________________________
S * PD0 |TIM21_C1|SPI2    |        |        |        |        |        |        |
S * PD1 |        |SPI2    |        |        |        |        |        |        |
S * PD2 |LPUART1 |LCD     |TIM3_TR |        |        |        |USART5  |        |
S * PD3 |USART2  |LCD     |SPI2    |        |        |        |        |        |
S * PD4 |USART2  |SPI2    |        |        |        |        |        |        |
S * PD5 |USART2  |        |        |        |        |        |        |        |
S * PD6 |USART2  |        |        |        |        |        |        |        |
S * PD7 |USART2  |TIM21_C2|        |        |        |        |        |        |
S * PD8 |LPUART1 |LCD     |        |        |        |        |        |        |
S * PD9 |LPUART1 |LCD     |        |        |        |        |        |        |
S * PD10|        |LCD     |        |        |        |        |        |        |
S * PD11|LPUART1 |LCD     |        |        |        |        |        |        |
S * PD12|LPUART1 |LCD     |        |        |        |        |        |        |
S * PD13|        |LCD     |        |        |        |        |        |        |
S * PD14|        |LCD     |        |        |        |        |        |        |
S * PD15|USB     |LCD     |        |        |        |        |        |        |
S *______________________________________________________________________________
S * PE0 |        |LCD     |EVENTOUT|        |        |        |        |        |
S * PE1 |        |LCD     |EVENTOUT|        |        |        |        |        |
S * PE2 |        |LCD     |TIM3_TR |        |        |        |        |        |
S * PE3 |TIM22_C1|LCD     |TIM3_C1 |        |        |        |        |        |
S * PE4 |TIM22_C2|        |TIM3_C2 |        |        |        |        |        |
S * PE5 |TIM21_C1|        |TIM3_C3 |        |        |        |        |        |
S * PE6 |TIM21_C2|        |TIM3_C4 |        |        |        |        |        |
S * PE7 |        |LCD     |        |        |        |        |USART5  |        |
S * PE8 |        |LCD     |        |        |        |        |USART4  |        |
S * PE9 |TIM2_C1 |LCD     |TIM2_TR |        |        |        |USART4  |        |
S * PE10|TIM2_C2 |LCD     |        |        |        |        |USART5  |        |
S * PE11|TIM2_C3 |        |        |        |        |        |USART5  |        |
S * PE12|TIM2_C4 |        |SPI1    |        |        |        |        |        |
S * PE13|        |LCD     |SPI1    |        |        |        |        |        |
S * PE14|        |LCD     |SPI1    |        |        |        |        |        |
S * PE15|        |LCD     |SPI1    |        |        |        |        |        |
S *______________________________________________________________________________
S * PH0 |USB     |        |        |        |        |        |        |        |
S * PH1 |        |        |        |        |        |        |        |        |
S * PH9 |        |        |        |        |        |        |        |        |
S * PH10|        |        |        |        |        |        |        |        |
S *
S */
S
S/** @defgroup GPIOEx_Alternate_function_selection Alternate function selection
S * @{
S */
S
S/*
S * Alternate function AF0
S */
S#define GPIO_AF0_EVENTOUT      ((uint8_t)0x00U)  /* EVENTOUT Alternate Function mapping */
S#define GPIO_AF0_TIM21         ((uint8_t)0x00U)  /* TIM21 Alternate Function mapping    */
S#define GPIO_AF0_SPI1          ((uint8_t)0x00U)  /* SPI1 Alternate Function mapping     */
S#define GPIO_AF0_MCO           ((uint8_t)0x00U)  /* MCO Alternate Function mapping      */
S#define GPIO_AF0_SWDIO         ((uint8_t)0x00U)  /* SWDIO Alternate Function mapping    */
S#define GPIO_AF0_SWCLK         ((uint8_t)0x00U)  /* SWCLK Alternate Function mapping    */
S#define GPIO_AF0_USART1        ((uint8_t)0x00U)  /* USART1 Alternate Function mapping   */
S#define GPIO_AF0_SPI2          ((uint8_t)0x00U)  /* SPI2 Alternate Function mapping     */
S#define GPIO_AF0_LPTIM1        ((uint8_t)0x00U)  /* LPTIM1 Alternate Function mapping   */
S#define GPIO_AF0_TIM22         ((uint8_t)0x00U)  /* TIM22 Alternate Function mapping    */
S#define GPIO_AF0_LPUART1       ((uint8_t)0x00U)  /* LPUART1 Alternate Function mapping  */
S#define GPIO_AF0_USART2        ((uint8_t)0x00U)  /* USART2 Alternate Function mapping   */
S#define GPIO_AF0_TIM2          ((uint8_t)0x00U)  /* TIM2 Alternate Function mapping     */
S#define GPIO_AF0_USB           ((uint8_t)0x00U)  /* USB Alternate Function mapping      */
S/**
S *
S */
S
S/*
S * Alternate function AF1
S */
S#define GPIO_AF1_I2C1          ((uint8_t)0x01U)  /* I2C1 Alternate Function mapping     */
S#define GPIO_AF1_SPI2          ((uint8_t)0x01U)  /* SPI2 Alternate Function mapping     */
S#define GPIO_AF1_TIM21         ((uint8_t)0x01U)  /* TIM21 Alternate Function mapping    */
S#define GPIO_AF1_LCD           ((uint8_t)0x01U)  /* LCD Alternate Function mapping      */
S/**
S *
S */
S
S/*
S * Alternate function AF2
S */
S#define GPIO_AF2_TIM2          ((uint8_t)0x02U)  /* TIM2 Alternate Function mapping     */
S#define GPIO_AF2_TIM3          ((uint8_t)0x02U)  /* TIM3 Alternate Function mapping     */
S#define GPIO_AF2_EVENTOUT      ((uint8_t)0x02U)  /* EVENTOUT Alternate Function mapping */
S#define GPIO_AF2_LPTIM1        ((uint8_t)0x02U)  /* LPTIM1 Alternate Function mapping   */
S#define GPIO_AF2_LPUART1       ((uint8_t)0x02U)  /* LPUART1 Alternate Function mapping  */
S#define GPIO_AF2_MCO           ((uint8_t)0x02U)  /* MCO Alternate Function mapping      */
S#define GPIO_AF2_RTC           ((uint8_t)0x02U)  /* RTC Alternate Function mapping      */
S#define GPIO_AF2_SPI2          ((uint8_t)0x02U)  /* SPI2 Alternate Function mapping     */
S#define GPIO_AF2_USART5        ((uint8_t)0x02U)  /* USART5 Alternate Function mapping   */
S#define GPIO_AF2_SPI1          ((uint8_t)0x02U)  /* SPI1 Alternate Function mapping     */
S#define GPIO_AF2_USB           ((uint8_t)0x00U)  /* USB Alternate Function mapping      */
S/**
S *
S */
S
S/*
S * Alternate function AF3
S */
S#define GPIO_AF3_EVENTOUT      ((uint8_t)0x03U)  /* EVENTOUT Alternate Function mapping */
S#define GPIO_AF3_I2C1          ((uint8_t)0x03U)  /* I2C1 Alternate Function mapping     */
S#define GPIO_AF3_TSC           ((uint8_t)0x03U)  /* TSC  Alternate Function mapping     */
S/**
S *
S */
S
S/*
S * Alternate function AF4
S */
S#define GPIO_AF4_USART2          ((uint8_t)0x04U)  /* USART2 Alternate Function mapping  */
S#define GPIO_AF4_LPUART1         ((uint8_t)0x04U)  /* LPUART1 Alternate Function mapping */
S#define GPIO_AF4_USART1          ((uint8_t)0x04U)  /* USART1 Alternate Function mapping  */
S#define GPIO_AF4_EVENTOUT        ((uint8_t)0x04U)  /* EVENTOUT Alternate Function mapping*/
S#define GPIO_AF4_TIM22           ((uint8_t)0x04U)  /* TIM22 Alternate Function mapping   */
S#define GPIO_AF4_TIM3            ((uint8_t)0x04U)  /* TIM3 Alternate Function mapping    */
S#define GPIO_AF4_I2C1            ((uint8_t)0x04U)  /* I2C1 Alternate Function mapping    */
S/**
S *
S */
S
S/*
S * Alternate function AF5
S */
S#define GPIO_AF5_TIM2          ((uint8_t)0x05U)  /* TIM2 Alternate Function mapping     */
S#define GPIO_AF5_TIM21         ((uint8_t)0x05U)  /* TIM21 Alternate Function mapping    */
S#define GPIO_AF5_TIM22         ((uint8_t)0x05U)  /* TIM22 Alternate Function mapping    */
S#define GPIO_AF5_USART1        ((uint8_t)0x05U)  /* USART1 Alternate Function mapping   */
S#define GPIO_AF5_SPI2          ((uint8_t)0x05U)  /* SPI2 Alternate Function mapping     */
S#define GPIO_AF5_I2C2          ((uint8_t)0x05U)  /* I2C2 Alternate Function mapping     */
S/**
S *
S */
S
S/*
S * Alternate function AF6
S */
S
S#define GPIO_AF6_USART4        ((uint8_t)0x06U)  /* USART4 Alternate Function mapping   */
S#define GPIO_AF6_LPUART1       ((uint8_t)0x06U)  /* LPUART1 Alternate Function mapping  */
S#define GPIO_AF6_EVENTOUT      ((uint8_t)0x06U)  /* EVENTOUT Alternate Function mapping */
S#define GPIO_AF6_I2C1          ((uint8_t)0x06U)  /* I2C1 Alternate Function mapping     */
S#define GPIO_AF6_I2C2          ((uint8_t)0x06U)  /* I2C2 Alternate Function mapping     */
S#define GPIO_AF6_USART5        ((uint8_t)0x06U)  /* USART5 Alternate Function mapping   */
S#define GPIO_AF6_TIM21         ((uint8_t)0x06U)  /* TIM21 Alternate Function mapping    */
S/**
S *
S */
S
S/*
S * Alternate function AF7
S */
S#define GPIO_AF7_COMP1        ((uint8_t)0x07U)  /* COMP1 Alternate Function mapping     */
S#define GPIO_AF7_COMP2        ((uint8_t)0x07U)  /* COMP2 Alternate Function mapping     */
S#define GPIO_AF7_I2C3         ((uint8_t)0x07U)  /* I2C3 Alternate Function mapping      */
S#define GPIO_AF7_LPUART1      ((uint8_t)0x07U)  /* LPUART1 Alternate Function mapping   */
S/**
S  *
S  */
S
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S/** @defgroup GPIOEx_Private  GPIOEx Private
S * @{
S */
S/**
S *  IS_GPIO_AF macro definition
S */
S#define IS_GPIO_AF(__AF__) (((__AF__) == GPIO_AF0_EVENTOUT) || ((__AF__) == GPIO_AF1_LCD)      || \
S                            ((__AF__) == GPIO_AF0_SPI1)     || ((__AF__) == GPIO_AF1_I2C1)     || \
S                            ((__AF__) == GPIO_AF0_TIM21)    || ((__AF__) == GPIO_AF1_SPI2)     || \
S                            ((__AF__) == GPIO_AF0_MCO)      || ((__AF__) == GPIO_AF1_TIM21)    || \
S                            ((__AF__) == GPIO_AF0_SWDIO)    || ((__AF__) == GPIO_AF2_TIM2)     || \
S                            ((__AF__) == GPIO_AF0_SWCLK)    || ((__AF__) == GPIO_AF2_TIM3)     || \
S                            ((__AF__) == GPIO_AF0_USART1)   || ((__AF__) == GPIO_AF2_USB)      || \
S                            ((__AF__) == GPIO_AF0_SPI2)     || ((__AF__) == GPIO_AF2_EVENTOUT) || \
S                            ((__AF__) == GPIO_AF0_LPTIM1)   || ((__AF__) == GPIO_AF2_LPTIM1)   || \
S                            ((__AF__) == GPIO_AF0_TIM2)     || ((__AF__) == GPIO_AF2_LPUART1)  || \
S                            ((__AF__) == GPIO_AF0_LPUART1)  || ((__AF__) == GPIO_AF2_MCO)      || \
S                            ((__AF__) == GPIO_AF0_USART2)   || ((__AF__) == GPIO_AF2_RTC)      || \
S                            ((__AF__) == GPIO_AF0_USB)      || ((__AF__) == GPIO_AF2_SPI2)     || \
S                            ((__AF__) == GPIO_AF0_TIM2)     || ((__AF__) == GPIO_AF2_USART5)   || \
S                            ((__AF__) == GPIO_AF3_TSC)      || ((__AF__) == GPIO_AF2_SPI1)     || \
S                            ((__AF__) == GPIO_AF3_EVENTOUT) || ((__AF__) == GPIO_AF4_USART2)   || \
S                            ((__AF__) == GPIO_AF3_I2C1)     || ((__AF__) == GPIO_AF4_LPUART1)  || \
S                            ((__AF__) == GPIO_AF5_TIM21)    || ((__AF__) == GPIO_AF4_EVENTOUT) || \
S                            ((__AF__) == GPIO_AF5_TIM2)     || ((__AF__) == GPIO_AF4_USART1)   || \
S                            ((__AF__) == GPIO_AF5_USART1)   || ((__AF__) == GPIO_AF4_TIM22)    || \
S                            ((__AF__) == GPIO_AF5_TIM22)    || ((__AF__) == GPIO_AF4_TIM3)     || \
S                            ((__AF__) == GPIO_AF5_SPI2)     || ((__AF__) == GPIO_AF4_I2C1)     || \
S                            ((__AF__) == GPIO_AF5_I2C2)     || ((__AF__) == GPIO_AF6_USART4)   || \
S                            ((__AF__) == GPIO_AF7_COMP2)    || ((__AF__) == GPIO_AF6_LPUART1)  || \
S                            ((__AF__) == GPIO_AF7_COMP1)    || ((__AF__) == GPIO_AF6_I2C1)     || \
S                            ((__AF__) == GPIO_AF7_I2C3)     || ((__AF__) == GPIO_AF6_EVENTOUT) || \
S                            ((__AF__) == GPIO_AF7_LPUART1)  || ((__AF__) == GPIO_AF6_I2C2)     || \
S                            ((__AF__) == GPIO_AF6_USART5)   || ((__AF__) == GPIO_AF6_TIM21))
X#define IS_GPIO_AF(__AF__) (((__AF__) == GPIO_AF0_EVENTOUT) || ((__AF__) == GPIO_AF1_LCD)      ||                             ((__AF__) == GPIO_AF0_SPI1)     || ((__AF__) == GPIO_AF1_I2C1)     ||                             ((__AF__) == GPIO_AF0_TIM21)    || ((__AF__) == GPIO_AF1_SPI2)     ||                             ((__AF__) == GPIO_AF0_MCO)      || ((__AF__) == GPIO_AF1_TIM21)    ||                             ((__AF__) == GPIO_AF0_SWDIO)    || ((__AF__) == GPIO_AF2_TIM2)     ||                             ((__AF__) == GPIO_AF0_SWCLK)    || ((__AF__) == GPIO_AF2_TIM3)     ||                             ((__AF__) == GPIO_AF0_USART1)   || ((__AF__) == GPIO_AF2_USB)      ||                             ((__AF__) == GPIO_AF0_SPI2)     || ((__AF__) == GPIO_AF2_EVENTOUT) ||                             ((__AF__) == GPIO_AF0_LPTIM1)   || ((__AF__) == GPIO_AF2_LPTIM1)   ||                             ((__AF__) == GPIO_AF0_TIM2)     || ((__AF__) == GPIO_AF2_LPUART1)  ||                             ((__AF__) == GPIO_AF0_LPUART1)  || ((__AF__) == GPIO_AF2_MCO)      ||                             ((__AF__) == GPIO_AF0_USART2)   || ((__AF__) == GPIO_AF2_RTC)      ||                             ((__AF__) == GPIO_AF0_USB)      || ((__AF__) == GPIO_AF2_SPI2)     ||                             ((__AF__) == GPIO_AF0_TIM2)     || ((__AF__) == GPIO_AF2_USART5)   ||                             ((__AF__) == GPIO_AF3_TSC)      || ((__AF__) == GPIO_AF2_SPI1)     ||                             ((__AF__) == GPIO_AF3_EVENTOUT) || ((__AF__) == GPIO_AF4_USART2)   ||                             ((__AF__) == GPIO_AF3_I2C1)     || ((__AF__) == GPIO_AF4_LPUART1)  ||                             ((__AF__) == GPIO_AF5_TIM21)    || ((__AF__) == GPIO_AF4_EVENTOUT) ||                             ((__AF__) == GPIO_AF5_TIM2)     || ((__AF__) == GPIO_AF4_USART1)   ||                             ((__AF__) == GPIO_AF5_USART1)   || ((__AF__) == GPIO_AF4_TIM22)    ||                             ((__AF__) == GPIO_AF5_TIM22)    || ((__AF__) == GPIO_AF4_TIM3)     ||                             ((__AF__) == GPIO_AF5_SPI2)     || ((__AF__) == GPIO_AF4_I2C1)     ||                             ((__AF__) == GPIO_AF5_I2C2)     || ((__AF__) == GPIO_AF6_USART4)   ||                             ((__AF__) == GPIO_AF7_COMP2)    || ((__AF__) == GPIO_AF6_LPUART1)  ||                             ((__AF__) == GPIO_AF7_COMP1)    || ((__AF__) == GPIO_AF6_I2C1)     ||                             ((__AF__) == GPIO_AF7_I2C3)     || ((__AF__) == GPIO_AF6_EVENTOUT) ||                             ((__AF__) == GPIO_AF7_LPUART1)  || ((__AF__) == GPIO_AF6_I2C2)     ||                             ((__AF__) == GPIO_AF6_USART5)   || ((__AF__) == GPIO_AF6_TIM21))
S
S
S#define IS_GPIO_AF_AVAILABLE(__INSTANCE__,__AF__)  \
S        ((((__INSTANCE__) == GPIOA) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||   \
S                                        ((__AF__) ==  GPIO_AF1_LCD)       ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM2)      ||   \
S                                        ((__AF__) ==  GPIO_AF3_TSC)       ||   \
S                                        ((__AF__) ==  GPIO_AF4_USART2)    ||   \
S                                        ((__AF__) ==  GPIO_AF5_TIM22)     ||   \
S                                        ((__AF__) ==  GPIO_AF6_USART4)    ||   \
S                                        ((__AF__) ==  GPIO_AF7_I2C3)))    ||   \
S         (((__INSTANCE__) == GPIOB) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||   \
S                                        ((__AF__) ==  GPIO_AF1_LCD)       ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM2)      ||   \
S                                        ((__AF__) ==  GPIO_AF3_TSC)       ||   \
S                                        ((__AF__) ==  GPIO_AF4_TIM3)      ||   \
S                                        ((__AF__) ==  GPIO_AF5_I2C2)      ||   \
S                                        ((__AF__) ==  GPIO_AF6_USART4)    ||   \
S                                        ((__AF__) ==  GPIO_AF7_LPUART1))) ||   \
S         (((__INSTANCE__) == GPIOC) && (((__AF__) ==  GPIO_AF0_LPTIM1)    ||   \
S                                        ((__AF__) ==  GPIO_AF1_LCD)       ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM3)      ||   \
S                                        ((__AF__) ==  GPIO_AF3_TSC)       ||   \
S                                        ((__AF__) ==  GPIO_AF6_USART4)    ||   \
S                                        ((__AF__) ==  GPIO_AF7_I2C3)))    ||   \
S         (((__INSTANCE__) == GPIOD) && (((__AF__) ==  GPIO_AF0_LPUART1)   ||   \
S                                        ((__AF__) ==  GPIO_AF1_LCD)       ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM3)      ||   \
S                                        ((__AF__) ==  GPIO_AF6_USART5)))  ||   \
S         (((__INSTANCE__) == GPIOE) && (((__AF__) ==  GPIO_AF0_TIM22)     ||   \
S                                        ((__AF__) ==  GPIO_AF1_LCD)       ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM3)      ||   \
S                                        ((__AF__) ==  GPIO_AF6_USART4)))  ||   \
S         (((__INSTANCE__) == GPIOH) && (((__AF__) ==  GPIO_AF0_USB))))
X#define IS_GPIO_AF_AVAILABLE(__INSTANCE__,__AF__)          ((((__INSTANCE__) == GPIOA) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF1_LCD)       ||                                           ((__AF__) ==  GPIO_AF2_TIM2)      ||                                           ((__AF__) ==  GPIO_AF3_TSC)       ||                                           ((__AF__) ==  GPIO_AF4_USART2)    ||                                           ((__AF__) ==  GPIO_AF5_TIM22)     ||                                           ((__AF__) ==  GPIO_AF6_USART4)    ||                                           ((__AF__) ==  GPIO_AF7_I2C3)))    ||            (((__INSTANCE__) == GPIOB) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF1_LCD)       ||                                           ((__AF__) ==  GPIO_AF2_TIM2)      ||                                           ((__AF__) ==  GPIO_AF3_TSC)       ||                                           ((__AF__) ==  GPIO_AF4_TIM3)      ||                                           ((__AF__) ==  GPIO_AF5_I2C2)      ||                                           ((__AF__) ==  GPIO_AF6_USART4)    ||                                           ((__AF__) ==  GPIO_AF7_LPUART1))) ||            (((__INSTANCE__) == GPIOC) && (((__AF__) ==  GPIO_AF0_LPTIM1)    ||                                           ((__AF__) ==  GPIO_AF1_LCD)       ||                                           ((__AF__) ==  GPIO_AF2_TIM3)      ||                                           ((__AF__) ==  GPIO_AF3_TSC)       ||                                           ((__AF__) ==  GPIO_AF6_USART4)    ||                                           ((__AF__) ==  GPIO_AF7_I2C3)))    ||            (((__INSTANCE__) == GPIOD) && (((__AF__) ==  GPIO_AF0_LPUART1)   ||                                           ((__AF__) ==  GPIO_AF1_LCD)       ||                                           ((__AF__) ==  GPIO_AF2_TIM3)      ||                                           ((__AF__) ==  GPIO_AF6_USART5)))  ||            (((__INSTANCE__) == GPIOE) && (((__AF__) ==  GPIO_AF0_TIM22)     ||                                           ((__AF__) ==  GPIO_AF1_LCD)       ||                                           ((__AF__) ==  GPIO_AF2_TIM3)      ||                                           ((__AF__) ==  GPIO_AF6_USART4)))  ||            (((__INSTANCE__) == GPIOH) && (((__AF__) ==  GPIO_AF0_USB))))
S
S /**
S  * @}
S  */
N#endif /* (STM32L083xx) || (STM32L073xx) */
N
N/*----------------------------------------------------------------------------*/
N/*------------------------- STM32L082xx and STM32L072xx-----------------------*/
N/*----------------------------------------------------------------------------*/
N#if defined (STM32L082xx) || defined (STM32L072xx)
X#if 0L || 0L
S
S/* The table below gives an overview of the different alternate functions per port.
S * For more details refer yourself to the product data sheet.
S */
S
S
S/*     |   AF0  |   AF1  |   AF2  |   AF3  |   AF4  |   AF5  |   AF6  |   AF7  |
S *______________________________________________________________________________
S * PA0 |        |        |TIM2_C1 |TSC     |USART2  |TIM2_TR |USART4  |COMP1   |
S * PA1 |EVENTOUT|        |TIM2_C2 |TSC     |USART2  |TIM21_TR|USART4  |        |
S * PA2 |TIM21_C1|        |TIM2_C3 |TSC     |USART2  |        |LPUART1 |COMP2   |
S * PA3 |TIM21_C2|        |TIM2_C4 |TSC     |USART2  |        |LPUART1 |        |
S * PA4 |SPI1    |        |        |TSC     |USART2  |TIM22_TR|        |        |
S * PA5 |SPI1    |        |TIM2_TR |TSC     |        |TIM2_C1 |        |        |
S * PA6 |SPI1    |        |TIM3_C1 |TSC     |LPUART1 |TIM22_C1|EVENTOUT|COMP1   |
S * PA7 |SPI1    |        |TIM3_C2 |TSC     |        |TIM22_C2|EVENTOUT|COMP2   |
S * PA8 |MCO     |        |USB     |EVENTOUT|USART1  |        |        |I2C3    |
S * PA9 |MCO     |        |        |TSC     |USART1  |        |I2C1    |I2C3    |
S * PA10|        |        |        |TSC     |USART1  |        |I2C1    |        |
S * PA11|SPI1    |        |EVENTOUT|TSC     |USART1  |        |I2C2    |COMP1   |
S * PA12|SPI1    |        |EVENTOUT|TSC     |USART1  |        |I2C2    |COMP2   |
S * PA13|SWDIO   |        |USB     |        |        |        |LPUART1 |        |
S * PA14|SWCLK   |        |        |        |USART2  |        |LPUART1 |        |
S * PA15|SPI1    |        |TIM2_TR |EVENTOUT|USART2  |TIM2_C1 |USART4  |        |
S *______________________________________________________________________________
S * PB0 |EVENTOUT|        |TIM3_C3 |TSC     |        |        |        |        |
S * PB1 |        |        |TIM3_C4 |TSC     |LPUART1 |        |        |        |
S * PB2 |        |        |LPTIM1_O|TSC     |        |        |        |I2C3    |
S * PB3 |SPI1    |        |TIM2_C2 |TSC     |EVENTOUT|USART1  |USART5  |        |
S * PB4 |SPI1    |        |TIM3_C1 |TSC     |TIM22_C1|USART1  |USART5  |I2C3    |
S * PB5 |SPI1    |        |LPTIM1_I|I2C1    |TIM3_C2 |USART1  |USART5  |        |
S *     |        |        |        |        |TIM22_C2|        |        |        |
S * PB6 |USART1  |I2C1    |LPTIM1_T|TSC     |        |        |        |        |
S * PB7 |USART1  |I2C1    |LPTIM1_I|TSC     |        |        |USART4  |        |
S * PB8 |        |        |        |TSC     |I2C1    |        |        |        |
S * PB9 |        |        |EVENTOUT|        |I2C1    |SPI2    |        |        |
S * PB10|        |        |TIM2_C3 |TSC     |LPUART1 |SPI2    |I2C2    |LPUART1 |
S * PB11|EVENTOUT|        |TIM2_C4 |TSC     |LPUART1 |        |I2C2    |LPUART1 |
S * PB12|SPI2    |        |LPUART1 |TSC     |        |I2C2    |EVENTOUT|        |
S * PB13|SPI2    |        |MCO     |TSC     |LPUART1 |I2C2    |TIM21_C1|        |
S * PB14|SPI2    |        |RTC     |TSC     |LPUART1 |I2C2    |TIM21_C2|        |
S * PB15|SPI2    |        |RTC     |        |        |        |        |        |
S *______________________________________________________________________________
S * PC0 |LPTIM1_I|        |EVENTOUT|TSC     |        |        |LPUART1 |I2C3    |
S * PC1 |LPTIM1_O|        |EVENTOUT|TSC     |        |        |LPUART1 |I2C3    |
S * PC2 |LPTIM1_I|        |SPI2    |TSC     |        |        |        |        |
S * PC3 |LPTIM1_T|        |SPI2    |TSC     |        |        |        |        |
S * PC4 |EVENTOUT|        |LPUART1 |        |        |        |        |        |
S * PC5 |        |        |LPUART1 |TSC     |        |        |        |        |
S * PC6 |TIM22_C1|        |TIM3_C1 |TSC     |        |        |        |        |
S * PC7 |TIM22_C2|        |TIM3_C2 |TSC     |        |        |        |        |
S * PC8 |TIM22_TR|        |TIM3_C3 |TSC     |        |        |        |        |
S * PC9 |TIM21_TR|        |USB     |TSC     |        |        |        |I2C3    |
S *     |        |        |TIM3_C4 |        |        |        |        |        |
S * PC10|LPUART1 |        |        |        |        |        |USART4  |        |
S * PC11|LPUART1 |        |        |        |        |        |USART4  |        |
S * PC12|        |        |USART5  |        |        |        |USART4  |        |
S * PC13|        |        |        |        |        |        |        |        |
S * PC14|        |        |        |        |        |        |        |        |
S * PC15|        |        |        |        |        |        |        |        |
S *______________________________________________________________________________
S * PD0 |TIM21_C1|SPI2    |        |        |        |        |        |        |
S * PD1 |        |SPI2    |        |        |        |        |        |        |
S * PD2 |LPUART1 |        |TIM3_TR |        |        |        |USART5  |        |
S * PD3 |USART2  |        |SPI2    |        |        |        |        |        |
S * PD4 |USART2  |SPI2    |        |        |        |        |        |        |
S * PD5 |USART2  |        |        |        |        |        |        |        |
S * PD6 |USART2  |        |        |        |        |        |        |        |
S * PD7 |USART2  |TIM21_C2|        |        |        |        |        |        |
S * PD8 |LPUART1 |        |        |        |        |        |        |        |
S * PD9 |LPUART1 |        |        |        |        |        |        |        |
S * PD10|        |        |        |        |        |        |        |        |
S * PD11|LPUART1 |        |        |        |        |        |        |        |
S * PD12|LPUART1 |        |        |        |        |        |        |        |
S * PD13|        |        |        |        |        |        |        |        |
S * PD14|        |        |        |        |        |        |        |        |
S * PD15|USB     |        |        |        |        |        |        |        |
S *______________________________________________________________________________
S * PE0 |        |        |EVENTOUT|        |        |        |        |        |
S * PE1 |        |        |EVENTOUT|        |        |        |        |        |
S * PE2 |        |        |TIM3_TR |        |        |        |        |        |
S * PE3 |TIM22_C1|        |TIM3_C1 |        |        |        |        |        |
S * PE4 |TIM22_C2|        |TIM3_C2 |        |        |        |        |        |
S * PE5 |TIM21_C1|        |TIM3_C3 |        |        |        |        |        |
S * PE6 |TIM21_C2|        |TIM3_C4 |        |        |        |        |        |
S * PE7 |        |        |        |        |        |        |USART5  |        |
S * PE8 |        |        |        |        |        |        |USART4  |        |
S * PE9 |TIM2_C1 |        |TIM2_TR |        |        |        |USART4  |        |
S * PE10|TIM2_C2 |        |        |        |        |        |USART5  |        |
S * PE11|TIM2_C3 |        |        |        |        |        |USART5  |        |
S * PE12|TIM2_C4 |        |SPI1    |        |        |        |        |        |
S * PE13|        |        |SPI1    |        |        |        |        |        |
S * PE14|        |        |SPI1    |        |        |        |        |        |
S * PE15|        |        |SPI1    |        |        |        |        |        |
S *______________________________________________________________________________
S * PH0 |USB     |        |        |        |        |        |        |        |
S * PH1 |        |        |        |        |        |        |        |        |
S * PH9 |        |        |        |        |        |        |        |        |
S * PH10|        |        |        |        |        |        |        |        |
S *
S */
S
S/** @defgroup GPIOEx_Alternate_function_selection Alternate function selection
S * @{
S */
S
S/*
S * Alternate function AF0
S */
S#define GPIO_AF0_EVENTOUT      ((uint8_t)0x00U)  /* EVENTOUT Alternate Function mapping */
S#define GPIO_AF0_TIM21         ((uint8_t)0x00U)  /* TIM21 Alternate Function mapping    */
S#define GPIO_AF0_SPI1          ((uint8_t)0x00U)  /* SPI1 Alternate Function mapping     */
S#define GPIO_AF0_MCO           ((uint8_t)0x00U)  /* MCO Alternate Function mapping      */
S#define GPIO_AF0_SWDIO         ((uint8_t)0x00U)  /* SWDIO Alternate Function mapping    */
S#define GPIO_AF0_SWCLK         ((uint8_t)0x00U)  /* SWCLK Alternate Function mapping    */
S#define GPIO_AF0_USART1        ((uint8_t)0x00U)  /* USART1 Alternate Function mapping   */
S#define GPIO_AF0_SPI2          ((uint8_t)0x00U)  /* SPI2 Alternate Function mapping     */
S#define GPIO_AF0_LPTIM1        ((uint8_t)0x00U)  /* LPTIM1 Alternate Function mapping   */
S#define GPIO_AF0_TIM22         ((uint8_t)0x00U)  /* TIM22 Alternate Function mapping    */
S#define GPIO_AF0_LPUART1       ((uint8_t)0x00U)  /* LPUART1 Alternate Function mapping  */
S#define GPIO_AF0_USART2        ((uint8_t)0x00U)  /* USART2 Alternate Function mapping   */
S#define GPIO_AF0_TIM2          ((uint8_t)0x00U)  /* TIM2 Alternate Function mapping     */
S#define GPIO_AF0_USB           ((uint8_t)0x00U)  /* USB Alternate Function mapping      */
S/**
S  *
S  */
S
S/*
S * Alternate function AF1
S */
S#define GPIO_AF1_I2C1          ((uint8_t)0x01U)  /* I2C1 Alternate Function mapping  */
S#define GPIO_AF1_SPI2          ((uint8_t)0x01U)  /* SPI2 Alternate Function mapping  */
S#define GPIO_AF1_TIM21         ((uint8_t)0x01U)  /* TIM21 Alternate Function mapping */
S/**
S  *
S  */
S
S/*
S * Alternate function AF2
S */
S#define GPIO_AF2_TIM2          ((uint8_t)0x02U)  /* TIM2 Alternate Function mapping       */
S#define GPIO_AF2_TIM3          ((uint8_t)0x02U)  /* TIM3 Alternate Function mapping       */
S#define GPIO_AF2_EVENTOUT      ((uint8_t)0x02U)  /* EVENTOUT Alternate Function mapping   */
S#define GPIO_AF2_LPTIM1        ((uint8_t)0x02U)  /* LPTIM1 Alternate Function mapping     */
S#define GPIO_AF2_LPUART1       ((uint8_t)0x02U)  /* LPUART1 Alternate Function mapping    */
S#define GPIO_AF2_MCO           ((uint8_t)0x02U)  /* MCO Alternate Function mapping        */
S#define GPIO_AF2_RTC           ((uint8_t)0x02U)  /* RTC Alternate Function mapping        */
S#define GPIO_AF2_SPI2          ((uint8_t)0x02U)  /* SPI2 Alternate Function mapping       */
S#define GPIO_AF2_USART5        ((uint8_t)0x02U)  /* USART5 Alternate Function mapping     */
S#define GPIO_AF2_SPI1          ((uint8_t)0x02U)  /* SPI1 Alternate Function mapping       */
S#define GPIO_AF2_USB           ((uint8_t)0x00U)  /* USB Alternate Function mapping        */
S/**
S  *
S  */
S
S/*
S * Alternate function AF3
S */
S#define GPIO_AF3_EVENTOUT      ((uint8_t)0x03U)  /* EVENTOUT Alternate Function mapping   */
S#define GPIO_AF3_I2C1          ((uint8_t)0x03U)  /* I2C1 Alternate Function mapping       */
S#define GPIO_AF3_TSC           ((uint8_t)0x03U)  /* TSC  Alternate Function mapping       */
S/**
S  *
S  */
S
S/*
S * Alternate function AF4
S */
S#define GPIO_AF4_USART2          ((uint8_t)0x04U)  /* USART2 Alternate Function mapping   */
S#define GPIO_AF4_LPUART1         ((uint8_t)0x04U)  /* LPUART1 Alternate Function mapping  */
S#define GPIO_AF4_USART1          ((uint8_t)0x04U)  /* USART1 Alternate Function mapping   */
S#define GPIO_AF4_EVENTOUT        ((uint8_t)0x04U)  /* EVENTOUT Alternate Function mapping */
S#define GPIO_AF4_TIM22           ((uint8_t)0x04U)  /* TIM22 Alternate Function mapping    */
S#define GPIO_AF4_TIM3            ((uint8_t)0x04U)  /* TIM3 Alternate Function mapping     */
S#define GPIO_AF4_I2C1            ((uint8_t)0x04U)  /* I2C1 Alternate Function mapping     */
S/**
S  *
S  */
S
S/*
S * Alternate function AF5
S */
S#define GPIO_AF5_TIM2          ((uint8_t)0x05U)  /* TIM2 Alternate Function mapping     */
S#define GPIO_AF5_TIM21         ((uint8_t)0x05U)  /* TIM21 Alternate Function mapping    */
S#define GPIO_AF5_TIM22         ((uint8_t)0x05U)  /* TIM22 Alternate Function mapping    */
S#define GPIO_AF5_USART1        ((uint8_t)0x05U)  /* USART1 Alternate Function mapping   */
S#define GPIO_AF5_SPI2          ((uint8_t)0x05U)  /* SPI2 Alternate Function mapping      */
S#define GPIO_AF5_I2C2          ((uint8_t)0x05U)  /* I2C2 Alternate Function mapping      */
S/**
S  *
S  */
S
S/*
S  * Alternate function AF6
S */
S#define GPIO_AF6_USART4        ((uint8_t)0x06U)  /* USART4 Alternate Function mapping    */
S#define GPIO_AF6_LPUART1       ((uint8_t)0x06U)  /* LPUART1 Alternate Function mapping   */
S#define GPIO_AF6_EVENTOUT      ((uint8_t)0x06U)  /* EVENTOUT Alternate Function mapping  */
S#define GPIO_AF6_I2C1          ((uint8_t)0x06U)  /* I2C1 Alternate Function mapping      */
S#define GPIO_AF6_I2C2          ((uint8_t)0x06U)  /* I2C2 Alternate Function mapping      */
S#define GPIO_AF6_USART5        ((uint8_t)0x06U)  /* USART5 Alternate Function mapping    */
S#define GPIO_AF6_TIM21         ((uint8_t)0x06U)  /* TIM21 Alternate Function mapping     */
S/**
S  *
S  */
S
S /*
S  * Alternate function AF7
S */
S#define GPIO_AF7_COMP1        ((uint8_t)0x07U)  /* COMP1 Alternate Function mapping     */
S#define GPIO_AF7_COMP2        ((uint8_t)0x07U)  /* COMP2 Alternate Function mapping     */
S#define GPIO_AF7_I2C3         ((uint8_t)0x07U)  /* I2C3 Alternate Function mapping      */
S#define GPIO_AF7_LPUART1      ((uint8_t)0x07U)  /* LPUART1 Alternate Function mapping   */
S/**
S  *
S  */
S
S /**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S/** @defgroup GPIOEx_Private  GPIOEx Private
S * @{
S */
S/**
S * @brief IS_GPIO_AF macro definition
S */
S#define IS_GPIO_AF(__AF__) (((__AF__) == GPIO_AF0_EVENTOUT)  || ((__AF__) == GPIO_AF6_TIM21)    || \
S                            ((__AF__) == GPIO_AF0_SPI1)      || ((__AF__) == GPIO_AF1_I2C1)     || \
S                            ((__AF__) == GPIO_AF0_TIM21)     || ((__AF__) == GPIO_AF1_SPI2)     || \
S                            ((__AF__) == GPIO_AF0_MCO)       || ((__AF__) == GPIO_AF1_TIM21)    || \
S                            ((__AF__) == GPIO_AF0_SWDIO)     || ((__AF__) == GPIO_AF2_TIM2)     || \
S                            ((__AF__) == GPIO_AF0_SWCLK)     || ((__AF__) == GPIO_AF2_TIM3)     || \
S                            ((__AF__) == GPIO_AF0_USART1)    || ((__AF__) == GPIO_AF2_USB)      || \
S                            ((__AF__) == GPIO_AF0_SPI2)      || ((__AF__) == GPIO_AF2_EVENTOUT) || \
S                            ((__AF__) == GPIO_AF0_LPTIM1)    || ((__AF__) == GPIO_AF2_LPTIM1)   || \
S                            ((__AF__) == GPIO_AF0_TIM2)      || ((__AF__) == GPIO_AF2_LPUART1)  || \
S                            ((__AF__) == GPIO_AF0_LPUART1)   || ((__AF__) == GPIO_AF2_MCO)      || \
S                            ((__AF__) == GPIO_AF0_USART2)    || ((__AF__) == GPIO_AF2_RTC)      || \
S                            ((__AF__) == GPIO_AF0_USB)       || ((__AF__) == GPIO_AF2_SPI2)     || \
S                            ((__AF__) == GPIO_AF0_TIM2)      || ((__AF__) == GPIO_AF2_USART5)   || \
S                            ((__AF__) == GPIO_AF3_TSC)       || ((__AF__) == GPIO_AF2_SPI1)     || \
S                            ((__AF__) == GPIO_AF3_EVENTOUT)  || ((__AF__) == GPIO_AF4_USART2)   || \
S                            ((__AF__) == GPIO_AF3_I2C1)      || ((__AF__) == GPIO_AF4_LPUART1)  || \
S                            ((__AF__) == GPIO_AF5_TIM21)     || ((__AF__) == GPIO_AF4_EVENTOUT) || \
S                            ((__AF__) == GPIO_AF5_TIM2)      || ((__AF__) == GPIO_AF4_USART1)   || \
S                            ((__AF__) == GPIO_AF5_USART1)    || ((__AF__) == GPIO_AF4_TIM22)    || \
S                            ((__AF__) == GPIO_AF5_TIM22)     || ((__AF__) == GPIO_AF4_TIM3)     || \
S                            ((__AF__) == GPIO_AF5_SPI2)      || ((__AF__) == GPIO_AF4_I2C1)     || \
S                            ((__AF__) == GPIO_AF5_I2C2)      || ((__AF__) == GPIO_AF6_USART4)   || \
S                            ((__AF__) == GPIO_AF7_COMP2)     || ((__AF__) == GPIO_AF6_LPUART1)  || \
S                            ((__AF__) == GPIO_AF7_COMP1)     || ((__AF__) == GPIO_AF6_I2C1)     || \
S                            ((__AF__) == GPIO_AF7_I2C3)      || ((__AF__) == GPIO_AF6_EVENTOUT) || \
S                            ((__AF__) == GPIO_AF7_LPUART1)   || ((__AF__) == GPIO_AF6_I2C2)     || \
S                            ((__AF__) == GPIO_AF6_USART5))
X#define IS_GPIO_AF(__AF__) (((__AF__) == GPIO_AF0_EVENTOUT)  || ((__AF__) == GPIO_AF6_TIM21)    ||                             ((__AF__) == GPIO_AF0_SPI1)      || ((__AF__) == GPIO_AF1_I2C1)     ||                             ((__AF__) == GPIO_AF0_TIM21)     || ((__AF__) == GPIO_AF1_SPI2)     ||                             ((__AF__) == GPIO_AF0_MCO)       || ((__AF__) == GPIO_AF1_TIM21)    ||                             ((__AF__) == GPIO_AF0_SWDIO)     || ((__AF__) == GPIO_AF2_TIM2)     ||                             ((__AF__) == GPIO_AF0_SWCLK)     || ((__AF__) == GPIO_AF2_TIM3)     ||                             ((__AF__) == GPIO_AF0_USART1)    || ((__AF__) == GPIO_AF2_USB)      ||                             ((__AF__) == GPIO_AF0_SPI2)      || ((__AF__) == GPIO_AF2_EVENTOUT) ||                             ((__AF__) == GPIO_AF0_LPTIM1)    || ((__AF__) == GPIO_AF2_LPTIM1)   ||                             ((__AF__) == GPIO_AF0_TIM2)      || ((__AF__) == GPIO_AF2_LPUART1)  ||                             ((__AF__) == GPIO_AF0_LPUART1)   || ((__AF__) == GPIO_AF2_MCO)      ||                             ((__AF__) == GPIO_AF0_USART2)    || ((__AF__) == GPIO_AF2_RTC)      ||                             ((__AF__) == GPIO_AF0_USB)       || ((__AF__) == GPIO_AF2_SPI2)     ||                             ((__AF__) == GPIO_AF0_TIM2)      || ((__AF__) == GPIO_AF2_USART5)   ||                             ((__AF__) == GPIO_AF3_TSC)       || ((__AF__) == GPIO_AF2_SPI1)     ||                             ((__AF__) == GPIO_AF3_EVENTOUT)  || ((__AF__) == GPIO_AF4_USART2)   ||                             ((__AF__) == GPIO_AF3_I2C1)      || ((__AF__) == GPIO_AF4_LPUART1)  ||                             ((__AF__) == GPIO_AF5_TIM21)     || ((__AF__) == GPIO_AF4_EVENTOUT) ||                             ((__AF__) == GPIO_AF5_TIM2)      || ((__AF__) == GPIO_AF4_USART1)   ||                             ((__AF__) == GPIO_AF5_USART1)    || ((__AF__) == GPIO_AF4_TIM22)    ||                             ((__AF__) == GPIO_AF5_TIM22)     || ((__AF__) == GPIO_AF4_TIM3)     ||                             ((__AF__) == GPIO_AF5_SPI2)      || ((__AF__) == GPIO_AF4_I2C1)     ||                             ((__AF__) == GPIO_AF5_I2C2)      || ((__AF__) == GPIO_AF6_USART4)   ||                             ((__AF__) == GPIO_AF7_COMP2)     || ((__AF__) == GPIO_AF6_LPUART1)  ||                             ((__AF__) == GPIO_AF7_COMP1)     || ((__AF__) == GPIO_AF6_I2C1)     ||                             ((__AF__) == GPIO_AF7_I2C3)      || ((__AF__) == GPIO_AF6_EVENTOUT) ||                             ((__AF__) == GPIO_AF7_LPUART1)   || ((__AF__) == GPIO_AF6_I2C2)     ||                             ((__AF__) == GPIO_AF6_USART5))
S
S#define IS_GPIO_AF_AVAILABLE(__INSTANCE__,__AF__)  \
S        ((((__INSTANCE__) == GPIOA) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM2)      ||   \
S                                        ((__AF__) ==  GPIO_AF3_TSC)       ||   \
S                                        ((__AF__) ==  GPIO_AF4_USART2)    ||   \
S                                        ((__AF__) ==  GPIO_AF5_TIM22)     ||   \
S                                        ((__AF__) ==  GPIO_AF6_EVENTOUT)  ||   \
S                                        ((__AF__) ==  GPIO_AF7_COMP1)))   ||   \
S         (((__INSTANCE__) == GPIOB) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||   \
S                                        ((__AF__) ==  GPIO_AF1_I2C1)      ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM2)      ||   \
S                                        ((__AF__) ==  GPIO_AF3_TSC)       ||   \
S                                        ((__AF__) ==  GPIO_AF4_TIM22)     ||   \
S                                        ((__AF__) ==  GPIO_AF5_I2C2)      ||   \
S                                        ((__AF__) ==  GPIO_AF6_USART4)    ||   \
S                                        ((__AF__) ==  GPIO_AF7_LPUART1))) ||   \
S         (((__INSTANCE__) == GPIOC) && (((__AF__) ==  GPIO_AF0_TIM22)     ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM3)      ||   \
S                                        ((__AF__) ==  GPIO_AF3_TSC)       ||   \
S                                        ((__AF__) ==  GPIO_AF6_USART4)    ||   \
S                                        ((__AF__) ==  GPIO_AF7_I2C3)))    ||   \
S         (((__INSTANCE__) == GPIOD) && (((__AF__) ==  GPIO_AF0_TIM21)     ||   \
S                                        ((__AF__) ==  GPIO_AF1_TIM21)     ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM3)      ||   \
S                                        ((__AF__) ==  GPIO_AF6_USART5)))  ||   \
S         (((__INSTANCE__) == GPIOE) && (((__AF__) ==  GPIO_AF0_TIM22)     ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM3)      ||   \
S                                        ((__AF__) ==  GPIO_AF6_USART4)))  ||   \
S         (((__INSTANCE__) == GPIOH) && (((__AF__) ==  GPIO_AF0_USB))))
X#define IS_GPIO_AF_AVAILABLE(__INSTANCE__,__AF__)          ((((__INSTANCE__) == GPIOA) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF2_TIM2)      ||                                           ((__AF__) ==  GPIO_AF3_TSC)       ||                                           ((__AF__) ==  GPIO_AF4_USART2)    ||                                           ((__AF__) ==  GPIO_AF5_TIM22)     ||                                           ((__AF__) ==  GPIO_AF6_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF7_COMP1)))   ||            (((__INSTANCE__) == GPIOB) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF1_I2C1)      ||                                           ((__AF__) ==  GPIO_AF2_TIM2)      ||                                           ((__AF__) ==  GPIO_AF3_TSC)       ||                                           ((__AF__) ==  GPIO_AF4_TIM22)     ||                                           ((__AF__) ==  GPIO_AF5_I2C2)      ||                                           ((__AF__) ==  GPIO_AF6_USART4)    ||                                           ((__AF__) ==  GPIO_AF7_LPUART1))) ||            (((__INSTANCE__) == GPIOC) && (((__AF__) ==  GPIO_AF0_TIM22)     ||                                           ((__AF__) ==  GPIO_AF2_TIM3)      ||                                           ((__AF__) ==  GPIO_AF3_TSC)       ||                                           ((__AF__) ==  GPIO_AF6_USART4)    ||                                           ((__AF__) ==  GPIO_AF7_I2C3)))    ||            (((__INSTANCE__) == GPIOD) && (((__AF__) ==  GPIO_AF0_TIM21)     ||                                           ((__AF__) ==  GPIO_AF1_TIM21)     ||                                           ((__AF__) ==  GPIO_AF2_TIM3)      ||                                           ((__AF__) ==  GPIO_AF6_USART5)))  ||            (((__INSTANCE__) == GPIOE) && (((__AF__) ==  GPIO_AF0_TIM22)     ||                                           ((__AF__) ==  GPIO_AF2_TIM3)      ||                                           ((__AF__) ==  GPIO_AF6_USART4)))  ||            (((__INSTANCE__) == GPIOH) && (((__AF__) ==  GPIO_AF0_USB))))
S
S /**
S  * @}
S  */
N#endif /* (STM32L082xx) || (STM32L072xx) */
N
N
N/*----------------------------------------------------------------------------*/
N/*------------------------- STM32L081xx and STM32L071xx-----------------------*/
N/*----------------------------------------------------------------------------*/
N#if defined (STM32L081xx) || defined (STM32L071xx)
X#if 0L || 0L
S
S/* The table below gives an overview of the different alternate functions per port.
S * For more details refer yourself to the product data sheet.
S *
S */
S
S
S/*     |   AF0  |   AF1  |   AF2  |   AF3  |   AF4  |   AF5  |   AF6  |   AF7  |
S *______________________________________________________________________________
S * PA0 |        |        |TIM2_C1 |        |USART2  |TIM2_TR |USART4  |COMP1   |
S * PA1 |EVENTOUT|        |TIM2_C2 |        |USART2  |TIM21_TR|USART4  |        |
S * PA2 |TIM21_C1|        |TIM2_C3 |        |USART2  |        |LPUART1 |COMP2   |
S * PA3 |TIM21_C2|        |TIM2_C4 |        |USART2  |        |LPUART1 |        |
S * PA4 |SPI1    |        |        |        |USART2  |TIM22_TR|        |        |
S * PA5 |SPI1    |        |TIM2_TR |        |        |TIM2_C1 |        |        |
S * PA6 |SPI1    |        |TIM3_C1 |        |LPUART1 |TIM22_C1|EVENTOUT|COMP1   |
S * PA7 |SPI1    |        |TIM3_C2 |        |        |TIM22_C2|EVENTOUT|COMP2   |
S * PA8 |MCO     |        |        |EVENTOUT|USART1  |        |        |I2C3    |
S * PA9 |MCO     |        |        |        |USART1  |        |I2C1    |I2C3    |
S * PA10|        |        |        |        |USART1  |        |I2C1    |        |
S * PA11|SPI1    |        |EVENTOUT|        |USART1  |        |I2C2    |COMP1   |
S * PA12|SPI1    |        |EVENTOUT|        |USART1  |        |I2C2    |COMP2   |
S * PA13|SWDIO   |        |        |        |        |        |LPUART1 |        |
S * PA14|SWCLK   |        |        |        |USART2  |        |LPUART1 |        |
S * PA15|SPI1    |        |TIM2_TR |EVENTOUT|USART2  |TIM2_C1 |USART4  |        |
S *______________________________________________________________________________
S * PB0 |EVENTOUT|        |TIM3_C3 |        |        |        |        |        |
S * PB1 |        |        |TIM3_C4 |        |LPUART1 |        |        |        |
S * PB2 |        |        |LPTIM1_O|        |        |        |        |I2C3    |
S * PB3 |SPI1    |        |TIM2_C2 |        |EVENTOUT|USART1  |USART5  |        |
S * PB4 |SPI1    |        |TIM3_C1 |        |TIM22_C1|USART1  |USART5  |I2C3    |
S * PB5 |SPI1    |        |LPTIM1_I|I2C1    |TIM3_C2 |USART1  |USART5  |        |
S *     |        |        |        |        |TIM22_C2|        |        |        |
S * PB6 |USART1  |I2C1    |LPTIM1_T|        |        |        |        |        |
S * PB7 |USART1  |I2C1    |LPTIM1_I|        |        |        |USART4  |        |
S * PB8 |        |        |        |        |I2C1    |        |        |        |
S * PB9 |        |        |EVENTOUT|        |I2C1    |SPI2    |        |        |
S * PB10|        |        |TIM2_C3 |        |LPUART1 |SPI2    |I2C2    |LPUART1 |
S * PB11|EVENTOUT|        |TIM2_C4 |        |LPUART1 |        |I2C2    |LPUART1 |
S * PB12|SPI2    |        |LPUART1 |        |        |I2C2    |EVENTOUT|        |
S * PB13|SPI2    |        |MCO     |        |LPUART1 |I2C2    |TIM21_C1|        |
S * PB14|SPI2    |        |RTC     |        |LPUART1 |I2C2    |TIM21_C2|        |
S * PB15|SPI2    |        |RTC     |        |        |        |        |        |
S *______________________________________________________________________________
S * PC0 |LPTIM1_I|        |EVENTOUT|        |        |        |LPUART1 |I2C3    |
S * PC1 |LPTIM1_O|        |EVENTOUT|        |        |        |LPUART1 |I2C3    |
S * PC2 |LPTIM1_I|        |SPI2    |        |        |        |        |        |
S * PC3 |LPTIM1_T|        |SPI2    |        |        |        |        |        |
S * PC4 |EVENTOUT|        |LPUART1 |        |        |        |        |        |
S * PC5 |        |        |LPUART1 |        |        |        |        |        |
S * PC6 |TIM22_C1|        |TIM3_C1 |        |        |        |        |        |
S * PC7 |TIM22_C2|        |TIM3_C2 |        |        |        |        |        |
S * PC8 |TIM22_TR|        |TIM3_C3 |        |        |        |        |        |
S * PC9 |TIM21_TR|        |        |        |        |        |        |I2C3    |
S *     |        |        |TIM3_C4 |        |        |        |        |        |
S * PC10|LPUART1 |        |        |        |        |        |USART4  |        |
S * PC11|LPUART1 |        |        |        |        |        |USART4  |        |
S * PC12|        |        |USART5  |        |        |        |USART4  |        |
S * PC13|        |        |        |        |        |        |        |        |
S * PC14|        |        |        |        |        |        |        |        |
S * PC15|        |        |        |        |        |        |        |        |
S *______________________________________________________________________________
S * PD0 |TIM21_C1|SPI2    |        |        |        |        |        |        |
S * PD1 |        |SPI2    |        |        |        |        |        |        |
S * PD2 |LPUART1 |        |TIM3_TR |        |        |        |USART5  |        |
S * PD3 |USART2  |        |SPI2    |        |        |        |        |        |
S * PD4 |USART2  |SPI2    |        |        |        |        |        |        |
S * PD5 |USART2  |        |        |        |        |        |        |        |
S * PD6 |USART2  |        |        |        |        |        |        |        |
S * PD7 |USART2  |TIM21_C2|        |        |        |        |        |        |
S * PD8 |LPUART1 |        |        |        |        |        |        |        |
S * PD9 |LPUART1 |        |        |        |        |        |        |        |
S * PD10|        |        |        |        |        |        |        |        |
S * PD11|LPUART1 |        |        |        |        |        |        |        |
S * PD12|LPUART1 |        |        |        |        |        |        |        |
S * PD13|        |        |        |        |        |        |        |        |
S * PD14|        |        |        |        |        |        |        |        |
S * PD15|        |        |        |        |        |        |        |        |
S *______________________________________________________________________________
S * PE0 |        |        |EVENTOUT|        |        |        |        |        |
S * PE1 |        |        |EVENTOUT|        |        |        |        |        |
S * PE2 |        |        |TIM3_TR |        |        |        |        |        |
S * PE3 |TIM22_C1|        |TIM3_C1 |        |        |        |        |        |
S * PE4 |TIM22_C2|        |TIM3_C2 |        |        |        |        |        |
S * PE5 |TIM21_C1|        |TIM3_C3 |        |        |        |        |        |
S * PE6 |TIM21_C2|        |TIM3_C4 |        |        |        |        |        |
S * PE7 |        |        |        |        |        |        |USART5  |        |
S * PE8 |        |        |        |        |        |        |USART4  |        |
S * PE9 |TIM2_C1 |        |TIM2_TR |        |        |        |USART4  |        |
S * PE10|TIM2_C2 |        |        |        |        |        |USART5  |        |
S * PE11|TIM2_C3 |        |        |        |        |        |USART5  |        |
S * PE12|TIM2_C4 |        |SPI1    |        |        |        |        |        |
S * PE13|        |        |SPI1    |        |        |        |        |        |
S * PE14|        |        |SPI1    |        |        |        |        |        |
S * PE15|        |        |SPI1    |        |        |        |        |        |
S *______________________________________________________________________________
S * PH0 |        |        |        |        |        |        |        |        |
S * PH1 |        |        |        |        |        |        |        |        |
S * PH9 |        |        |        |        |        |        |        |        |
S * PH10|        |        |        |        |        |        |        |        |
S *
S */
S
S/** @defgroup GPIOEx_Alternate_function_selection Alternate function selection
S * @{
S */
S
S/*
S * Alternate function AF0
S *
S */
S#define GPIO_AF0_EVENTOUT      ((uint8_t)0x00U)  /* EVENTOUT Alternate Function mapping */
S#define GPIO_AF0_TIM21         ((uint8_t)0x00U)  /* TIM21 Alternate Function mapping    */
S#define GPIO_AF0_SPI1          ((uint8_t)0x00U)  /* SPI1 Alternate Function mapping     */
S#define GPIO_AF0_MCO           ((uint8_t)0x00U)  /* MCO Alternate Function mapping      */
S#define GPIO_AF0_SWDIO         ((uint8_t)0x00U)  /* SWDIO Alternate Function mapping    */
S#define GPIO_AF0_SWCLK         ((uint8_t)0x00U)  /* SWCLK Alternate Function mapping    */
S#define GPIO_AF0_USART1        ((uint8_t)0x00U)  /* USART1 Alternate Function mapping   */
S#define GPIO_AF0_SPI2          ((uint8_t)0x00U)  /* SPI2 Alternate Function mapping     */
S#define GPIO_AF0_LPTIM1        ((uint8_t)0x00U)  /* LPTIM1 Alternate Function mapping   */
S#define GPIO_AF0_TIM22         ((uint8_t)0x00U)  /* TIM22 Alternate Function mapping    */
S#define GPIO_AF0_LPUART1       ((uint8_t)0x00U)  /* LPUART1 Alternate Function mapping  */
S#define GPIO_AF0_USART2        ((uint8_t)0x00U)  /* USART2 Alternate Function mapping   */
S#define GPIO_AF0_TIM2          ((uint8_t)0x00U)  /* TIM2 Alternate Function mapping     */
S/**
S  *
S  */
S
S/*
S * Alternate function AF1
S *
S */
S#define GPIO_AF1_I2C1          ((uint8_t)0x01U)  /* I2C1 Alternate Function mapping  */
S#define GPIO_AF1_SPI2          ((uint8_t)0x01U)  /* SPI2 Alternate Function mapping  */
S#define GPIO_AF1_TIM21         ((uint8_t)0x01U)  /* TIM21 Alternate Function mapping */
S/**
S  *
S  */
S
S/*
S * Alternate function AF2
S *
S */
S#define GPIO_AF2_TIM2          ((uint8_t)0x02U)  /* TIM2 Alternate Function mapping     */
S#define GPIO_AF2_TIM3          ((uint8_t)0x02U)  /* TIM3 Alternate Function mapping     */
S#define GPIO_AF2_EVENTOUT      ((uint8_t)0x02U)  /* EVENTOUT Alternate Function mapping */
S#define GPIO_AF2_LPTIM1        ((uint8_t)0x02U)  /* LPTIM1 Alternate Function mapping   */
S#define GPIO_AF2_LPUART1       ((uint8_t)0x02U)  /* LPUART1 Alternate Function mapping  */
S#define GPIO_AF2_MCO           ((uint8_t)0x02U)  /* MCO Alternate Function mapping      */
S#define GPIO_AF2_RTC           ((uint8_t)0x02U)  /* RTC Alternate Function mapping      */
S#define GPIO_AF2_SPI2          ((uint8_t)0x02U)  /* SPI2 Alternate Function mapping     */
S#define GPIO_AF2_USART5        ((uint8_t)0x02U)  /* USART5 Alternate Function mapping   */
S#define GPIO_AF2_SPI1          ((uint8_t)0x02U)  /* SPI1 Alternate Function mapping     */
S/**
S  *
S  */
S
S/*
S * Alternate function AF3
S * @{
S */
S#define GPIO_AF3_EVENTOUT      ((uint8_t)0x03U)  /* EVENTOUT Alternate Function mapping */
S#define GPIO_AF3_I2C1          ((uint8_t)0x03U)  /* I2C1 Alternate Function mapping     */
S/**
S  *
S  */
S
S/*
S * Alternate function AF4
S *
S */
S#define GPIO_AF4_USART2          ((uint8_t)0x04U)  /* USART2 Alternate Function mapping   */
S#define GPIO_AF4_LPUART1         ((uint8_t)0x04U)  /* LPUART1 Alternate Function mapping  */
S#define GPIO_AF4_USART1          ((uint8_t)0x04U)  /* USART1 Alternate Function mapping   */
S#define GPIO_AF4_EVENTOUT        ((uint8_t)0x04U)  /* EVENTOUT Alternate Function mapping */
S#define GPIO_AF4_TIM22           ((uint8_t)0x04U)  /* TIM22 Alternate Function mapping    */
S#define GPIO_AF4_TIM3            ((uint8_t)0x04U)  /* TIM3 Alternate Function mapping    */
S#define GPIO_AF4_I2C1            ((uint8_t)0x04U)  /* I2C1 Alternate Function mapping    */
S/**
S  *
S  */
S
S/*
S * Alternate function AF5
S *
S */
S#define GPIO_AF5_TIM2          ((uint8_t)0x05U)  /* TIM2 Alternate Function mapping     */
S#define GPIO_AF5_TIM21         ((uint8_t)0x05U)  /* TIM21 Alternate Function mapping    */
S#define GPIO_AF5_TIM22         ((uint8_t)0x05U)  /* TIM22 Alternate Function mapping    */
S#define GPIO_AF5_USART1        ((uint8_t)0x05U)  /* USART1 Alternate Function mapping   */
S#define GPIO_AF5_SPI2          ((uint8_t)0x05U)  /* SPI2 Alternate Function mapping       */
S#define GPIO_AF5_I2C2          ((uint8_t)0x05U)  /* I2C2 Alternate Function mapping       */
S/**
S  *
S  */
S
S/*
S * Alternate function AF6
S *
S */
S#define GPIO_AF6_USART4        ((uint8_t)0x06U)  /* USART4 Alternate Function mapping   */
S#define GPIO_AF6_LPUART1       ((uint8_t)0x06U)  /* LPUART1 Alternate Function mapping  */
S#define GPIO_AF6_EVENTOUT      ((uint8_t)0x06U)  /* EVENTOUT Alternate Function mapping  */
S#define GPIO_AF6_I2C1          ((uint8_t)0x06U)  /* I2C1 Alternate Function mapping  */
S#define GPIO_AF6_I2C2          ((uint8_t)0x06U)  /* I2C2 Alternate Function mapping  */
S#define GPIO_AF6_USART5        ((uint8_t)0x06U)  /* USART5 Alternate Function mapping   */
S#define GPIO_AF6_TIM21         ((uint8_t)0x06U)  /* TIM21 Alternate Function mapping    */
S/**
S  *
S  */
S
S/*
S * Alternate function AF7
S *
S */
S#define GPIO_AF7_COMP1        ((uint8_t)0x07U)  /* COMP1 Alternate Function mapping     */
S#define GPIO_AF7_COMP2        ((uint8_t)0x07U)  /* COMP2 Alternate Function mapping     */
S#define GPIO_AF7_I2C3         ((uint8_t)0x07U)  /* I2C3 Alternate Function mapping     */
S#define GPIO_AF7_LPUART1      ((uint8_t)0x07U)  /* LPUART1 Alternate Function mapping     */
S/**
S  *
S  */
S
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S/** @defgroup GPIOEx_Private  GPIOEx Private
S * @{
S */
S
S /**
S * IS_GPIO_AF macro definition
S */
S#define IS_GPIO_AF(__AF__) (((__AF__) == GPIO_AF0_EVENTOUT) || ((__AF__) == GPIO_AF7_LPUART1)  || \
S                            ((__AF__) == GPIO_AF0_SPI1)     || ((__AF__) == GPIO_AF1_I2C1)     || \
S                            ((__AF__) == GPIO_AF0_TIM21)    || ((__AF__) == GPIO_AF1_SPI2)     || \
S                            ((__AF__) == GPIO_AF0_MCO)      || ((__AF__) == GPIO_AF1_TIM21)    || \
S                            ((__AF__) == GPIO_AF0_SWDIO)    || ((__AF__) == GPIO_AF2_TIM2)     || \
S                            ((__AF__) == GPIO_AF0_SWCLK)    || ((__AF__) == GPIO_AF2_TIM3)     || \
S                            ((__AF__) == GPIO_AF0_USART1)   || ((__AF__) == GPIO_AF6_TIM21)    || \
S                            ((__AF__) == GPIO_AF0_SPI2)     || ((__AF__) == GPIO_AF2_EVENTOUT) || \
S                            ((__AF__) == GPIO_AF0_LPTIM1)   || ((__AF__) == GPIO_AF2_LPTIM1)   || \
S                            ((__AF__) == GPIO_AF0_TIM2)     || ((__AF__) == GPIO_AF2_LPUART1)  || \
S                            ((__AF__) == GPIO_AF0_LPUART1)  || ((__AF__) == GPIO_AF2_MCO)      || \
S                            ((__AF__) == GPIO_AF0_USART2)   || ((__AF__) == GPIO_AF2_RTC)      || \
S                            ((__AF__) == GPIO_AF2_SPI2)     || ((__AF__) == GPIO_AF6_USART5)   || \
S                            ((__AF__) == GPIO_AF0_TIM2)     || ((__AF__) == GPIO_AF2_USART5)   || \
S                            ((__AF__) == GPIO_AF2_SPI1)     || ((__AF__) == GPIO_AF6_I2C2)     || \
S                            ((__AF__) == GPIO_AF3_EVENTOUT) || ((__AF__) == GPIO_AF4_USART2)   || \
S                            ((__AF__) == GPIO_AF3_I2C1)     || ((__AF__) == GPIO_AF4_LPUART1)  || \
S                            ((__AF__) == GPIO_AF5_TIM21)    || ((__AF__) == GPIO_AF4_EVENTOUT) || \
S                            ((__AF__) == GPIO_AF5_TIM2)     || ((__AF__) == GPIO_AF4_USART1)   || \
S                            ((__AF__) == GPIO_AF5_USART1)   || ((__AF__) == GPIO_AF4_TIM22)    || \
S                            ((__AF__) == GPIO_AF5_TIM22)    || ((__AF__) == GPIO_AF4_TIM3)     || \
S                            ((__AF__) == GPIO_AF5_SPI2)     || ((__AF__) == GPIO_AF4_I2C1)     || \
S                            ((__AF__) == GPIO_AF5_I2C2)     || ((__AF__) == GPIO_AF6_USART4)   || \
S                            ((__AF__) == GPIO_AF7_COMP2)    || ((__AF__) == GPIO_AF6_LPUART1)  || \
S                            ((__AF__) == GPIO_AF7_COMP1)    || ((__AF__) == GPIO_AF6_I2C1)     || \
S                            ((__AF__) == GPIO_AF7_I2C3)     || ((__AF__) == GPIO_AF6_EVENTOUT))
X#define IS_GPIO_AF(__AF__) (((__AF__) == GPIO_AF0_EVENTOUT) || ((__AF__) == GPIO_AF7_LPUART1)  ||                             ((__AF__) == GPIO_AF0_SPI1)     || ((__AF__) == GPIO_AF1_I2C1)     ||                             ((__AF__) == GPIO_AF0_TIM21)    || ((__AF__) == GPIO_AF1_SPI2)     ||                             ((__AF__) == GPIO_AF0_MCO)      || ((__AF__) == GPIO_AF1_TIM21)    ||                             ((__AF__) == GPIO_AF0_SWDIO)    || ((__AF__) == GPIO_AF2_TIM2)     ||                             ((__AF__) == GPIO_AF0_SWCLK)    || ((__AF__) == GPIO_AF2_TIM3)     ||                             ((__AF__) == GPIO_AF0_USART1)   || ((__AF__) == GPIO_AF6_TIM21)    ||                             ((__AF__) == GPIO_AF0_SPI2)     || ((__AF__) == GPIO_AF2_EVENTOUT) ||                             ((__AF__) == GPIO_AF0_LPTIM1)   || ((__AF__) == GPIO_AF2_LPTIM1)   ||                             ((__AF__) == GPIO_AF0_TIM2)     || ((__AF__) == GPIO_AF2_LPUART1)  ||                             ((__AF__) == GPIO_AF0_LPUART1)  || ((__AF__) == GPIO_AF2_MCO)      ||                             ((__AF__) == GPIO_AF0_USART2)   || ((__AF__) == GPIO_AF2_RTC)      ||                             ((__AF__) == GPIO_AF2_SPI2)     || ((__AF__) == GPIO_AF6_USART5)   ||                             ((__AF__) == GPIO_AF0_TIM2)     || ((__AF__) == GPIO_AF2_USART5)   ||                             ((__AF__) == GPIO_AF2_SPI1)     || ((__AF__) == GPIO_AF6_I2C2)     ||                             ((__AF__) == GPIO_AF3_EVENTOUT) || ((__AF__) == GPIO_AF4_USART2)   ||                             ((__AF__) == GPIO_AF3_I2C1)     || ((__AF__) == GPIO_AF4_LPUART1)  ||                             ((__AF__) == GPIO_AF5_TIM21)    || ((__AF__) == GPIO_AF4_EVENTOUT) ||                             ((__AF__) == GPIO_AF5_TIM2)     || ((__AF__) == GPIO_AF4_USART1)   ||                             ((__AF__) == GPIO_AF5_USART1)   || ((__AF__) == GPIO_AF4_TIM22)    ||                             ((__AF__) == GPIO_AF5_TIM22)    || ((__AF__) == GPIO_AF4_TIM3)     ||                             ((__AF__) == GPIO_AF5_SPI2)     || ((__AF__) == GPIO_AF4_I2C1)     ||                             ((__AF__) == GPIO_AF5_I2C2)     || ((__AF__) == GPIO_AF6_USART4)   ||                             ((__AF__) == GPIO_AF7_COMP2)    || ((__AF__) == GPIO_AF6_LPUART1)  ||                             ((__AF__) == GPIO_AF7_COMP1)    || ((__AF__) == GPIO_AF6_I2C1)     ||                             ((__AF__) == GPIO_AF7_I2C3)     || ((__AF__) == GPIO_AF6_EVENTOUT))
S
S
S#define IS_GPIO_AF_AVAILABLE(__INSTANCE__,__AF__)  \
S        ((((__INSTANCE__) == GPIOA) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM2)      ||   \
S                                        ((__AF__) ==  GPIO_AF3_EVENTOUT)  ||   \
S                                        ((__AF__) ==  GPIO_AF4_USART2)    ||   \
S                                        ((__AF__) ==  GPIO_AF5_TIM22)     ||   \
S                                        ((__AF__) ==  GPIO_AF6_USART4)    ||   \
S                                        ((__AF__) ==  GPIO_AF7_COMP1)))   ||   \
S         (((__INSTANCE__) == GPIOB) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||   \
S                                        ((__AF__) ==  GPIO_AF1_I2C1)      ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM2)      ||   \
S                                        ((__AF__) ==  GPIO_AF3_I2C1)      ||   \
S                                        ((__AF__) ==  GPIO_AF4_I2C1)      ||   \
S                                        ((__AF__) ==  GPIO_AF5_I2C2)      ||   \
S                                        ((__AF__) ==  GPIO_AF6_USART4)    ||   \
S                                        ((__AF__) ==  GPIO_AF7_LPUART1))) ||   \
S         (((__INSTANCE__) == GPIOC) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM3)      ||   \
S                                        ((__AF__) ==  GPIO_AF6_LPUART1)   ||   \
S                                        ((__AF__) ==  GPIO_AF7_I2C3)))    ||   \
S         (((__INSTANCE__) == GPIOD) && (((__AF__) ==  GPIO_AF0_LPUART1)   ||   \
S                                        ((__AF__) ==  GPIO_AF1_SPI2)      ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM3)      ||   \
S                                        ((__AF__) ==  GPIO_AF6_USART5)))  ||   \
S         (((__INSTANCE__) == GPIOE) && (((__AF__) ==  GPIO_AF0_TIM22)     ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM3)      ||   \
S                                        ((__AF__) ==  GPIO_AF6_USART4))))
X#define IS_GPIO_AF_AVAILABLE(__INSTANCE__,__AF__)          ((((__INSTANCE__) == GPIOA) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF2_TIM2)      ||                                           ((__AF__) ==  GPIO_AF3_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF4_USART2)    ||                                           ((__AF__) ==  GPIO_AF5_TIM22)     ||                                           ((__AF__) ==  GPIO_AF6_USART4)    ||                                           ((__AF__) ==  GPIO_AF7_COMP1)))   ||            (((__INSTANCE__) == GPIOB) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF1_I2C1)      ||                                           ((__AF__) ==  GPIO_AF2_TIM2)      ||                                           ((__AF__) ==  GPIO_AF3_I2C1)      ||                                           ((__AF__) ==  GPIO_AF4_I2C1)      ||                                           ((__AF__) ==  GPIO_AF5_I2C2)      ||                                           ((__AF__) ==  GPIO_AF6_USART4)    ||                                           ((__AF__) ==  GPIO_AF7_LPUART1))) ||            (((__INSTANCE__) == GPIOC) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF2_TIM3)      ||                                           ((__AF__) ==  GPIO_AF6_LPUART1)   ||                                           ((__AF__) ==  GPIO_AF7_I2C3)))    ||            (((__INSTANCE__) == GPIOD) && (((__AF__) ==  GPIO_AF0_LPUART1)   ||                                           ((__AF__) ==  GPIO_AF1_SPI2)      ||                                           ((__AF__) ==  GPIO_AF2_TIM3)      ||                                           ((__AF__) ==  GPIO_AF6_USART5)))  ||            (((__INSTANCE__) == GPIOE) && (((__AF__) ==  GPIO_AF0_TIM22)     ||                                           ((__AF__) ==  GPIO_AF2_TIM3)      ||                                           ((__AF__) ==  GPIO_AF6_USART4))))
S
S /**
S  * @}
S  */
N#endif /* (STM32L081xx) || (STM32L071xx) */
N
N/*----------------------------------------------------------------------------*/
N/*------------------------- STM32L053xx/STM32L063xx---------------------------*/
N/*----------------------------------------------------------------------------*/
N#if defined (STM32L053xx) || defined (STM32L063xx)
X#if 1L || 0L
N
N/* The table below gives an overview of the different alternate functions per port.
N * For more details refer yourself to the product data sheet.
N *
N */
N/*     |   AF0  |   AF1  |   AF2  |   AF3  |   AF4  |   AF5  |   AF6  |   AF7  |
N *______________________________________________________________________________
N * PA0 |        |        |TIM2_C1 |TSC     |USART2  |TIM2_TR |        |COMP1   |
N * PA1 |EVENTOUT|LCD     |TIM2_C2 |TSC     |USART2  |TIM21_TR|        |        |
N * PA2 |TIM21_C1|LCD     |TIM2_C3 |TSC     |USART2  |        |        |COMP2   |
N * PA3 |TIM21_C2|LCD     |TIM2_C4 |TSC     |USART2  |        |        |        |
N * PA4 |SPI1    |        |        |TSC     |USART2  |TIM22_TR|        |        |
N * PA5 |SPI1    |        |TIM2_TR |TSC     |        |TIM2_C1 |        |        |
N * PA6 |SPI1    |LCD     |        |TSC     |LPUART  |TIM22_C1|EVENTOUT|COMP1   |
N * PA7 |SPI1    |LCD     |        |TSC     |        |TIM22_C2|EVENTOUT|COMP2   |
N * PA8 |MCO     |LCD     |USB     |EVENTOUT|USART1  |        |        |        |
N * PA9 |MCO     |LCD     |        |TSC     |USART1  |        |        |        |
N * PA10|        |LCD     |        |TSC     |USART1  |        |        |        |
N * PA11|SPI1    |        |EVENTOUT|TSC     |USART1  |        |        |COMP1   |
N * PA12|SPI1    |        |EVENTOUT|TSC     |USART1  |        |        |COMP2   |
N * PA13|SWDIO   |        |USB     |        |        |        |        |        |
N * PA14|SWCLK   |        |        |        |USART2  |        |        |        |
N * PA15|SPI1    |LCD     |TIM2_TR |EVENTOUT|USART2  |TIM2_C1 |        |        |
N *______________________________________________________________________________
N * PB0 |EVENTOUT|LCD     |        |TSC     |        |        |        |        |
N * PB1 |        |LCD     |        |TSC     |LPUART1 |        |        |        |
N * PB2 |        |        |LPTIM1_O|TSC     |        |        |        |        |
N * PB3 |SPI1    |LCD     |TIM2_C2 |TSC     |EVENTOUT|        |        |        |
N * PB4 |SPI1    |LCD     |EVENTOUT|TSC     |TIM22_C1|        |        |        |
N * PB5 |SPI1    |LCD     |LPTIM1_I|I2C1    |TIM22_C2|        |        |        |
N * PB6 |USART1  |I2C1    |LPTIM1_T|TSC     |        |        |        |        |
N * PB7 |USART1  |I2C1    |LPTIM1_I|TSC     |        |        |        |        |
N * PB8 |        |LCD     |        |TSC     |I2C1    |        |        |        |
N * PB9 |        |LCD     |EVENTOUT|        |I2C1    |SPI2    |        |        |
N * PB10|        |LCD     |TIM2_C3 |TSC     |LPUART1 |SPI2    |I2C2    |        |
N * PB11|EVENTOUT|LCD     |TIM2_C4 |TSC     |LPUART1 |        |I2C2    |        |
N * PB12|SPI2    |LCD     |LPUART1 |TSC     |        |I2C2    |EVENTOUT|        |
N * PB13|SPI2    |LCD     |        |TSC     |LPUART1 |I2C2    |TIM21_C1|        |
N * PB14|SPI2    |LCD     |RTC     |TSC     |LPUART1 |I2C2    |TIM21_C2|        |
N * PB15|SPI2    |LCD     |RTC     |        |        |        |        |        |
N *______________________________________________________________________________
N * PC0 |LPTIM1_I|LCD     |EVENTOUT|TSC     |        |        |        |        |
N * PC1 |LPTIM1_O|LCD     |EVENTOUT|TSC     |        |        |        |        |
N * PC2 |LPTIM1_I|LCD     |SPI2    |TSC     |        |        |        |        |
N * PC3 |LPTIM1_T|LCD     |SPI2    |TSC     |        |        |        |        |
N * PC4 |EVENTOUT|LCD     |LPUART  |        |        |        |        |        |
N * PC5 |        |LCD     |LPUART  |TSC     |        |        |        |        |
N * PC6 |TIM22_C1|LCD     |        |TSC     |        |        |        |        |
N * PC7 |TIM22_C2|LCD     |        |TSC     |        |        |        |        |
N * PC8 |TIM22_TR|LCD     |        |TSC     |        |        |        |        |
N * PC9 |TIM21_TR|LCD     |USB     |TSC     |        |        |        |        |
N * PC10|LPUART  |LCD     |        |        |        |        |        |        |
N * PC11|LPUART  |LCD     |        |        |        |        |        |        |
N * PC12|        |LCD     |        |        |        |        |        |        |
N * PC13|        |        |        |        |        |        |        |        |
N * PC14|        |        |        |        |        |        |        |        |
N * PC15|        |        |        |        |        |        |        |        |
N *______________________________________________________________________________
N * PD2 |LPUART  |LCD     |        |        |        |        |        |        |
N *______________________________________________________________________________
N * PH0 |USB     |        |        |        |        |        |        |        |
N * PH1 |        |        |        |        |        |        |        |        |
N *  *
N */
N
N/** @defgroup GPIOEx_Alternate_function_selection Alternate function selection
N * @{
N */
N
N/*
N * Alternate function AF0
N */
N#define GPIO_AF0_SPI1          ((uint8_t)0x00U)  /* SPI1 Alternate Function mapping     */
N#define GPIO_AF0_SPI2          ((uint8_t)0x00U)  /* SPI2 Alternate Function mapping     */
N#define GPIO_AF0_USART1        ((uint8_t)0x00U)  /* USART1 Alternate Function mapping   */
N#define GPIO_AF0_USART2        ((uint8_t)0x00U)  /* USART2 Alternate Function mapping   */
N#define GPIO_AF0_LPUART1       ((uint8_t)0x00U)  /* LPUART1 Alternate Function mapping  */
N#define GPIO_AF0_USB           ((uint8_t)0x00U)  /* USB Alternate Function mapping      */
N#define GPIO_AF0_LPTIM1        ((uint8_t)0x00U)  /* LPTIM1 Alternate Function mapping   */
N#define GPIO_AF0_TSC           ((uint8_t)0x00U)  /* TSC Alternate Function mapping      */
N#define GPIO_AF0_TIM2          ((uint8_t)0x00U)  /* TIM2 Alternate Function mapping     */
N#define GPIO_AF0_TIM21         ((uint8_t)0x00U)  /* TIM21 Alternate Function mapping    */
N#define GPIO_AF0_TIM22         ((uint8_t)0x00U)  /* TIM22 Alternate Function mapping    */
N#define GPIO_AF0_EVENTOUT      ((uint8_t)0x00U)  /* EVENTOUT Alternate Function mapping */
N#define GPIO_AF0_MCO           ((uint8_t)0x00U)  /* MCO Alternate Function mapping      */
N#define GPIO_AF0_SWDIO         ((uint8_t)0x00U)  /* SWDIO Alternate Function mapping    */
N#define GPIO_AF0_SWCLK         ((uint8_t)0x00U)  /* SWCLK Alternate Function mapping    */
N/**
N  *
N  */
N
N /*
N  * Alternate function AF1
N */
N#define GPIO_AF1_SPI1          ((uint8_t)0x01U)  /* SPI1 Alternate Function mapping  */
N#define GPIO_AF1_SPI2          ((uint8_t)0x01U)  /* SPI2 Alternate Function mapping  */
N#define GPIO_AF1_I2C1          ((uint8_t)0x01U)  /* I2C1 Alternate Function mapping  */
N#define GPIO_AF1_LCD           ((uint8_t)0x01U)  /* LCD Alternate Function mapping   */
N/**
N  *
N  */
N
N/*
N * Alternate function AF2
N */
N#define GPIO_AF2_SPI2          ((uint8_t)0x02U)  /* SPI2 Alternate Function mapping       */
N#define GPIO_AF2_LPUART1       ((uint8_t)0x02U)  /* LPUART1 Alternate Function mapping    */
N#define GPIO_AF2_USB           ((uint8_t)0x02U)  /* USB Alternate Function mapping        */
N#define GPIO_AF2_LPTIM1        ((uint8_t)0x02U)  /* LPTIM1 Alternate Function mapping     */
N#define GPIO_AF2_TIM2          ((uint8_t)0x02U)  /* TIM2 Alternate Function mapping       */
N#define GPIO_AF2_EVENTOUT      ((uint8_t)0x02U)  /* EVENTOUT Alternate Function mapping   */
N#define GPIO_AF2_RTC           ((uint8_t)0x02U)  /* RTC Alternate Function mapping        */
N/**
N  *
N  */
N
N/*
N * Alternate function AF3
N */
N#define GPIO_AF3_I2C1          ((uint8_t)0x03U)  /* I2C1 Alternate Function mapping     */
N#define GPIO_AF3_TSC           ((uint8_t)0x03U)  /* TSC  Alternate Function mapping     */
N#define GPIO_AF3_EVENTOUT      ((uint8_t)0x03U)  /* EVENTOUT Alternate Function mapping */
N/**
N  *
N  */
N
N/*
N * Alternate function AF4
N */
N#define GPIO_AF4_I2C1            ((uint8_t)0x04U)  /* I2C1 Alternate Function mapping     */
N#define GPIO_AF4_USART1          ((uint8_t)0x04U)  /* USART1 Alternate Function mapping   */
N#define GPIO_AF4_USART2          ((uint8_t)0x04U)  /* USART2 Alternate Function mapping   */
N#define GPIO_AF4_LPUART1         ((uint8_t)0x04U)  /* LPUART1 Alternate Function mapping  */
N#define GPIO_AF4_TIM22           ((uint8_t)0x04U)  /* TIM22 Alternate Function mapping    */
N#define GPIO_AF4_EVENTOUT        ((uint8_t)0x04U)  /* EVENTOUT Alternate Function mapping */
N/**
N  *
N  */
N
N /*
N * Alternate function AF5
N */
N#define GPIO_AF5_SPI2          ((uint8_t)0x05U)  /* SPI2 Alternate Function mapping     */
N#define GPIO_AF5_I2C2          ((uint8_t)0x05U)  /* I2C2 Alternate Function mapping     */
N#define GPIO_AF5_TIM2          ((uint8_t)0x05U)  /* TIM2 Alternate Function mapping     */
N#define GPIO_AF5_TIM21         ((uint8_t)0x05U)  /* TIM21 Alternate Function mapping    */
N#define GPIO_AF5_TIM22         ((uint8_t)0x05U)  /* TIM22 Alternate Function mapping    */
N/**
N  *
N  */
N
N/*
N * Alternate function AF6
N */
N#define GPIO_AF6_I2C2          ((uint8_t)0x06U)  /* I2C2 Alternate Function mapping      */
N#define GPIO_AF6_TIM21         ((uint8_t)0x06U)  /* TIM21 Alternate Function mapping     */
N#define GPIO_AF6_EVENTOUT      ((uint8_t)0x06U)  /* EVENTOUT Alternate Function mapping  */
N/**
N  *
N  */
N
N/*
N * Alternate function AF7
N */
N#define GPIO_AF7_COMP1        ((uint8_t)0x07U)  /* COMP1 Alternate Function mapping     */
N#define GPIO_AF7_COMP2        ((uint8_t)0x07U)  /* COMP2 Alternate Function mapping     */
N/**
N  *
N  */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/** @defgroup GPIOEx_Private  GPIOEx Private
N * @{
N */
N/**
N * @brief  IS_GPIO_AF macro definition
N */
N
N#define IS_GPIO_AF(__AF__) (((__AF__) == GPIO_AF0_SPI1)     || ((__AF__) == GPIO_AF2_SPI2)     || \
N                            ((__AF__) == GPIO_AF0_SPI2)     || ((__AF__) == GPIO_AF2_LPUART1)  || \
N                            ((__AF__) == GPIO_AF0_USART1)   || ((__AF__) == GPIO_AF2_USB)      || \
N                            ((__AF__) == GPIO_AF0_USART2)   || ((__AF__) == GPIO_AF2_LPTIM1)   || \
N                            ((__AF__) == GPIO_AF0_LPUART1)  || ((__AF__) == GPIO_AF2_TIM2)     || \
N                            ((__AF__) == GPIO_AF0_USB)      || ((__AF__) == GPIO_AF3_TSC)      || \
N                            ((__AF__) == GPIO_AF0_LPTIM1)   || ((__AF__) == GPIO_AF2_EVENTOUT) || \
N                            ((__AF__) == GPIO_AF0_TSC)      || ((__AF__) == GPIO_AF2_RTC) || \
N                            ((__AF__) == GPIO_AF3_I2C1)     || ((__AF__) == GPIO_AF7_COMP2)    || \
N                            ((__AF__) == GPIO_AF0_TIM22)    || ((__AF__) == GPIO_AF3_EVENTOUT) || \
N                            ((__AF__) == GPIO_AF0_EVENTOUT) || ((__AF__) == GPIO_AF4_I2C1)     || \
N                            ((__AF__) == GPIO_AF0_MCO)      || ((__AF__) == GPIO_AF4_USART1)   || \
N                            ((__AF__) == GPIO_AF0_SWDIO)    || ((__AF__) == GPIO_AF0_SWCLK)    || \
N                            ((__AF__) == GPIO_AF1_SPI1)     || ((__AF__) == GPIO_AF4_USART2)   || \
N                            ((__AF__) == GPIO_AF1_SPI2)     || ((__AF__) == GPIO_AF4_LPUART1)  || \
N                            ((__AF__) == GPIO_AF7_COMP2)    || ((__AF__) == GPIO_AF4_TIM22)    || \
N                            ((__AF__) == GPIO_AF1_I2C1)     || ((__AF__) == GPIO_AF4_EVENTOUT) || \
N                            ((__AF__) == GPIO_AF1_LCD)      || ((__AF__) == GPIO_AF5_SPI2)     || \
N                            ((__AF__) == GPIO_AF5_I2C2)     || ((__AF__) == GPIO_AF5_TIM2)     || \
N                            ((__AF__) == GPIO_AF5_TIM21)    || ((__AF__) == GPIO_AF5_TIM22)    || \
N                            ((__AF__) == GPIO_AF6_I2C2)     || ((__AF__) == GPIO_AF6_TIM21)    || \
N                            ((__AF__) == GPIO_AF6_EVENTOUT) || ((__AF__) == GPIO_AF7_COMP1))
X#define IS_GPIO_AF(__AF__) (((__AF__) == GPIO_AF0_SPI1)     || ((__AF__) == GPIO_AF2_SPI2)     ||                             ((__AF__) == GPIO_AF0_SPI2)     || ((__AF__) == GPIO_AF2_LPUART1)  ||                             ((__AF__) == GPIO_AF0_USART1)   || ((__AF__) == GPIO_AF2_USB)      ||                             ((__AF__) == GPIO_AF0_USART2)   || ((__AF__) == GPIO_AF2_LPTIM1)   ||                             ((__AF__) == GPIO_AF0_LPUART1)  || ((__AF__) == GPIO_AF2_TIM2)     ||                             ((__AF__) == GPIO_AF0_USB)      || ((__AF__) == GPIO_AF3_TSC)      ||                             ((__AF__) == GPIO_AF0_LPTIM1)   || ((__AF__) == GPIO_AF2_EVENTOUT) ||                             ((__AF__) == GPIO_AF0_TSC)      || ((__AF__) == GPIO_AF2_RTC) ||                             ((__AF__) == GPIO_AF3_I2C1)     || ((__AF__) == GPIO_AF7_COMP2)    ||                             ((__AF__) == GPIO_AF0_TIM22)    || ((__AF__) == GPIO_AF3_EVENTOUT) ||                             ((__AF__) == GPIO_AF0_EVENTOUT) || ((__AF__) == GPIO_AF4_I2C1)     ||                             ((__AF__) == GPIO_AF0_MCO)      || ((__AF__) == GPIO_AF4_USART1)   ||                             ((__AF__) == GPIO_AF0_SWDIO)    || ((__AF__) == GPIO_AF0_SWCLK)    ||                             ((__AF__) == GPIO_AF1_SPI1)     || ((__AF__) == GPIO_AF4_USART2)   ||                             ((__AF__) == GPIO_AF1_SPI2)     || ((__AF__) == GPIO_AF4_LPUART1)  ||                             ((__AF__) == GPIO_AF7_COMP2)    || ((__AF__) == GPIO_AF4_TIM22)    ||                             ((__AF__) == GPIO_AF1_I2C1)     || ((__AF__) == GPIO_AF4_EVENTOUT) ||                             ((__AF__) == GPIO_AF1_LCD)      || ((__AF__) == GPIO_AF5_SPI2)     ||                             ((__AF__) == GPIO_AF5_I2C2)     || ((__AF__) == GPIO_AF5_TIM2)     ||                             ((__AF__) == GPIO_AF5_TIM21)    || ((__AF__) == GPIO_AF5_TIM22)    ||                             ((__AF__) == GPIO_AF6_I2C2)     || ((__AF__) == GPIO_AF6_TIM21)    ||                             ((__AF__) == GPIO_AF6_EVENTOUT) || ((__AF__) == GPIO_AF7_COMP1))
N
N
N
N#define IS_GPIO_AF_AVAILABLE(__INSTANCE__,__AF__)  \
N        ((((__INSTANCE__) == GPIOA) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||   \
N                                        ((__AF__) ==  GPIO_AF1_LCD)       ||   \
N                                        ((__AF__) ==  GPIO_AF2_TIM2)      ||   \
N                                        ((__AF__) ==  GPIO_AF3_TSC)       ||   \
N                                        ((__AF__) ==  GPIO_AF4_USART2)    ||   \
N                                        ((__AF__) ==  GPIO_AF5_TIM22)     ||   \
N                                        ((__AF__) ==  GPIO_AF6_EVENTOUT)  ||   \
N                                        ((__AF__) ==  GPIO_AF7_COMP1)))   ||   \
N         (((__INSTANCE__) == GPIOB) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||   \
N                                        ((__AF__) ==  GPIO_AF1_LCD)       ||   \
N                                        ((__AF__) ==  GPIO_AF2_TIM2)      ||   \
N                                        ((__AF__) ==  GPIO_AF3_TSC)       ||   \
N                                        ((__AF__) ==  GPIO_AF4_EVENTOUT)  ||   \
N                                        ((__AF__) ==  GPIO_AF5_I2C2)      ||   \
N                                        ((__AF__) ==  GPIO_AF6_TIM21)))   ||   \
N         (((__INSTANCE__) == GPIOC) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||   \
N                                        ((__AF__) ==  GPIO_AF1_LCD)       ||   \
N                                        ((__AF__) ==  GPIO_AF2_EVENTOUT)  ||   \
N                                        ((__AF__) ==  GPIO_AF3_TSC)))     ||   \
N         (((__INSTANCE__) == GPIOD) && (((__AF__) ==  GPIO_AF0_LPUART1)   ||   \
N                                        ((__AF__) ==  GPIO_AF1_LCD)))     ||   \
N         (((__INSTANCE__) == GPIOH) && (((__AF__) ==  GPIO_AF0_USB))))
X#define IS_GPIO_AF_AVAILABLE(__INSTANCE__,__AF__)          ((((__INSTANCE__) == GPIOA) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF1_LCD)       ||                                           ((__AF__) ==  GPIO_AF2_TIM2)      ||                                           ((__AF__) ==  GPIO_AF3_TSC)       ||                                           ((__AF__) ==  GPIO_AF4_USART2)    ||                                           ((__AF__) ==  GPIO_AF5_TIM22)     ||                                           ((__AF__) ==  GPIO_AF6_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF7_COMP1)))   ||            (((__INSTANCE__) == GPIOB) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF1_LCD)       ||                                           ((__AF__) ==  GPIO_AF2_TIM2)      ||                                           ((__AF__) ==  GPIO_AF3_TSC)       ||                                           ((__AF__) ==  GPIO_AF4_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF5_I2C2)      ||                                           ((__AF__) ==  GPIO_AF6_TIM21)))   ||            (((__INSTANCE__) == GPIOC) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF1_LCD)       ||                                           ((__AF__) ==  GPIO_AF2_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF3_TSC)))     ||            (((__INSTANCE__) == GPIOD) && (((__AF__) ==  GPIO_AF0_LPUART1)   ||                                           ((__AF__) ==  GPIO_AF1_LCD)))     ||            (((__INSTANCE__) == GPIOH) && (((__AF__) ==  GPIO_AF0_USB))))
N
N/**
N  * @}
N  */
N
N#endif /* STM32L053xx || STM32L063xx */
N/*------------------------------------------------------------------------------------------*/
N
N/*----------------------------------------------------------------------------*/
N/*------------------------- STM32L052xx/STM32L062xx---------------------------*/
N/*----------------------------------------------------------------------------*/
N#if defined (STM32L052xx) || defined (STM32L062xx)
X#if 0L || 0L
S
S/* The table below gives an overview of the different alternate functions per port.
S * For more details refer yourself to the product data sheet.
S *
S */
S/*     |   AF0  |   AF1  |   AF2  |   AF3  |   AF4  |   AF5  |   AF6  |   AF7  |
S *______________________________________________________________________________
S * PA0 |        |        |TIM2_C1 |TSC     |USART2  |TIM2_TR |        |COMP1   |
S * PA1 |EVENTOUT|        |TIM2_C2 |TSC     |USART2  |TIM21_TR|        |        |
S * PA2 |TIM21_C1|        |TIM2_C3 |TSC     |USART2  |        |        |COMP2   |
S * PA3 |TIM21_C2|        |TIM2_C4 |TSC     |USART2  |        |        |        |
S * PA4 |SPI1    |        |        |TSC     |USART2  |TIM22_TR|        |        |
S * PA5 |SPI1    |        |TIM2_TR |TSC     |        |TIM2_C1 |        |        |
S * PA6 |SPI1    |        |        |TSC     |LPUART  |TIM22_C1|EVENTOUT|COMP1   |
S * PA7 |SPI1    |        |        |TSC     |        |TIM22_C2|EVENTOUT|COMP2   |
S * PA8 |MCO     |        |USB     |EVENTOUT|USART1  |        |        |        |
S * PA9 |MCO     |        |        |TSC     |USART1  |        |        |        |
S * PA10|        |        |        |TSC     |USART1  |        |        |        |
S * PA11|SPI1    |        |EVENTOUT|TSC     |USART1  |        |        |COMP1   |
S * PA12|SPI1    |        |EVENTOUT|TSC     |USART1  |        |        |COMP2   |
S * PA13|SWDIO   |        |USB     |        |        |        |        |        |
S * PA14|SWCLK   |        |        |        |USART2  |        |        |        |
S * PA15|SPI1    |        |TIM2_TR |EVENTOUT|USART2  |TIM2_C1 |        |        |
S *______________________________________________________________________________
S * PB0 |EVENTOUT|        |        |TSC     |        |        |        |        |
S * PB1 |        |        |        |TSC     |LPUART1 |        |        |        |
S * PB2 |        |        |LPTIM1_O|TSC     |        |        |        |        |
S * PB3 |SPI1    |        |TIM2_C2 |TSC     |EVENTOUT|        |        |        |
S * PB4 |SPI1    |        |EVENTOUT|TSC     |TIM22_C1|        |        |        |
S * PB5 |SPI1    |        |LPTIM1_I|I2C1    |TIM22_C2|        |        |        |
S * PB6 |USART1  |I2C1    |LPTIM1_T|TSC     |        |        |        |        |
S * PB7 |USART1  |I2C1    |LPTIM1_I|TSC     |        |        |        |        |
S * PB8 |        |        |        |TSC     |I2C1    |        |        |        |
S * PB9 |        |        |EVENTOUT|        |I2C1    |SPI2    |        |        |
S * PB10|        |        |TIM2_C3 |TSC     |LPUART1 |SPI2    |I2C2    |        |
S * PB11|EVENTOUT|        |TIM2_C4 |TSC     |LPUART1 |        |I2C2    |        |
S * PB12|SPI2    |        |LPUART1 |TSC     |        |I2C2    |EVENTOUT|        |
S * PB13|SPI2    |        |        |TSC     |LPUART1 |I2C2    |TIM21_C1|        |
S * PB14|SPI2    |        |RTC     |TSC     |LPUART1 |I2C2    |TIM21_C2|        |
S * PB15|SPI2    |        |RTC     |        |        |        |        |        |
S *______________________________________________________________________________
S * PC0 |LPTIM1_I|        |EVENTOUT|TSC     |        |        |        |        |
S * PC1 |LPTIM1_O|        |EVENTOUT|TSC     |        |        |        |        |
S * PC2 |LPTIM1_I|        |SPI2    |TSC     |        |        |        |        |
S * PC3 |LPTIM1_T|        |SPI2    |TSC     |        |        |        |        |
S * PC4 |EVENTOUT|        |LPUART  |        |        |        |        |        |
S * PC5 |        |        |LPUART  |TSC     |        |        |        |        |
S * PC6 |TIM22_C1|        |        |TSC     |        |        |        |        |
S * PC7 |TIM22_C2|        |        |TSC     |        |        |        |        |
S * PC8 |TIM22_TR|        |        |TSC     |        |        |        |        |
S * PC9 |TIM21_TR|        |USB     |TSC     |        |        |        |        |
S * PC10|LPUART  |        |        |        |        |        |        |        |
S * PC11|LPUART  |        |        |        |        |        |        |        |
S * PC12|        |        |        |        |        |        |        |        |
S * PC13|        |        |        |        |        |        |        |        |
S * PC14|        |        |        |        |        |        |        |        |
S * PC15|        |        |        |        |        |        |        |        |
S *______________________________________________________________________________
S * PD2 |LPUART  |        |        |        |        |        |        |        |
S *______________________________________________________________________________
S * PH0 |USB     |        |        |        |        |        |        |        |
S * PH1 |        |        |        |        |        |        |        |        |
S *  *
S */
S
S/** @defgroup GPIOEx_Alternate_function_selection Alternate function selection
S * @{
S */
S
S/*
S * Alternate function AF0
S */
S#define GPIO_AF0_SPI1          ((uint8_t)0x00U)  /* SPI1 Alternate Function mapping     */
S#define GPIO_AF0_SPI2          ((uint8_t)0x00U)  /* SPI2 Alternate Function mapping     */
S#define GPIO_AF0_USART1        ((uint8_t)0x00U)  /* USART1 Alternate Function mapping   */
S#define GPIO_AF0_USART2        ((uint8_t)0x00U)  /* USART2 Alternate Function mapping   */
S#define GPIO_AF0_LPUART1       ((uint8_t)0x00U)  /* LPUART1 Alternate Function mapping  */
S#define GPIO_AF0_USB           ((uint8_t)0x00U)  /* USB Alternate Function mapping      */
S#define GPIO_AF0_LPTIM1        ((uint8_t)0x00U)  /* LPTIM1 Alternate Function mapping   */
S#define GPIO_AF0_TSC           ((uint8_t)0x00U)  /* TSC Alternate Function mapping      */
S#define GPIO_AF0_TIM2          ((uint8_t)0x00U)  /* TIM2 Alternate Function mapping     */
S#define GPIO_AF0_TIM21         ((uint8_t)0x00U)  /* TIM21 Alternate Function mapping    */
S#define GPIO_AF0_TIM22         ((uint8_t)0x00U)  /* TIM22 Alternate Function mapping    */
S#define GPIO_AF0_EVENTOUT      ((uint8_t)0x00U)  /* EVENTOUT Alternate Function mapping */
S#define GPIO_AF0_MCO           ((uint8_t)0x00U)  /* MCO Alternate Function mapping      */
S#define GPIO_AF0_SWDIO         ((uint8_t)0x00U)  /* SWDIO Alternate Function mapping    */
S#define GPIO_AF0_SWCLK         ((uint8_t)0x00U)  /* SWCLK Alternate Function mapping    */
S/**
S  *
S  */
S
S/*
S * Alternate function AF1
S */
S#define GPIO_AF1_SPI1          ((uint8_t)0x01U)  /* SPI1 Alternate Function mapping  */
S#define GPIO_AF1_SPI2          ((uint8_t)0x01U)  /* SPI2 Alternate Function mapping  */
S#define GPIO_AF1_I2C1          ((uint8_t)0x01U)  /* I2C1 Alternate Function mapping  */
S/**
S  *
S  */
S
S/**
S * Alternate function AF2
S */
S#define GPIO_AF2_SPI2          ((uint8_t)0x02U)  /* SPI2 Alternate Function mapping       */
S#define GPIO_AF2_LPUART1       ((uint8_t)0x02U)  /* LPUART1 Alternate Function mapping    */
S#define GPIO_AF2_USB           ((uint8_t)0x02U)  /* USB Alternate Function mapping        */
S#define GPIO_AF2_LPTIM1        ((uint8_t)0x02U)  /* LPTIM1 Alternate Function mapping     */
S#define GPIO_AF2_TIM2          ((uint8_t)0x02U)  /* TIM2 Alternate Function mapping       */
S#define GPIO_AF2_EVENTOUT      ((uint8_t)0x02U)  /* EVENTOUT Alternate Function mapping   */
S#define GPIO_AF2_RTC           ((uint8_t)0x02U)  /* RTC Alternate Function mapping        */
S/**
S  *
S  */
S
S/*
S * Alternate function AF3
S */
S#define GPIO_AF3_I2C1          ((uint8_t)0x03U)  /* I2C1 Alternate Function mapping     */
S#define GPIO_AF3_TSC           ((uint8_t)0x03U)  /* TSC  Alternate Function mapping     */
S#define GPIO_AF3_EVENTOUT      ((uint8_t)0x03U)  /* EVENTOUT Alternate Function mapping */
S/**
S  *
S  */
S
S/*
S * Alternate function AF4
S */
S#define GPIO_AF4_I2C1            ((uint8_t)0x04U)  /* I2C1 Alternate Function mapping     */
S#define GPIO_AF4_USART1          ((uint8_t)0x04U)  /* USART1 Alternate Function mapping   */
S#define GPIO_AF4_USART2          ((uint8_t)0x04U)  /* USART2 Alternate Function mapping   */
S#define GPIO_AF4_LPUART1         ((uint8_t)0x04U)  /* LPUART1 Alternate Function mapping  */
S#define GPIO_AF4_TIM22           ((uint8_t)0x04U)  /* TIM22 Alternate Function mapping    */
S#define GPIO_AF4_EVENTOUT        ((uint8_t)0x04U)  /* EVENTOUT Alternate Function mapping */
S/**
S  *
S  */
S
S/*
S * Alternate function AF5
S */
S#define GPIO_AF5_SPI2          ((uint8_t)0x05U)  /* SPI2 Alternate Function mapping     */
S#define GPIO_AF5_I2C2          ((uint8_t)0x05U)  /* I2C2 Alternate Function mapping     */
S#define GPIO_AF5_TIM2          ((uint8_t)0x05U)  /* TIM2 Alternate Function mapping     */
S#define GPIO_AF5_TIM21         ((uint8_t)0x05U)  /* TIM21 Alternate Function mapping    */
S#define GPIO_AF5_TIM22         ((uint8_t)0x05U)  /* TIM22 Alternate Function mapping    */
S/**
S  *
S  */
S
S/*
S * Alternate function AF6
S */
S#define GPIO_AF6_I2C2          ((uint8_t)0x06U)  /* I2C2 Alternate Function mapping      */
S#define GPIO_AF6_TIM21         ((uint8_t)0x06U)  /* TIM21 Alternate Function mapping     */
S#define GPIO_AF6_EVENTOUT      ((uint8_t)0x06U)  /* EVENTOUT Alternate Function mapping  */
S/**
S  *
S  */
S
S/*
S * Alternate function AF7
S */
S#define GPIO_AF7_COMP1        ((uint8_t)0x07U)  /* COMP1 Alternate Function mapping     */
S#define GPIO_AF7_COMP2        ((uint8_t)0x07U)  /* COMP2 Alternate Function mapping     */
S/**
S  *
S  */
S
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S/** @defgroup GPIOEx_Private  GPIOEx Private
S * @{
S */
S/**
S * @brief  IS_GPIO_AF macro definition
S */
S
S#define IS_GPIO_AF(__AF__) (((__AF__) == GPIO_AF0_SPI1)     || ((__AF__) == GPIO_AF2_SPI2)        || \
S                            ((__AF__) == GPIO_AF0_SPI2)     || ((__AF__) == GPIO_AF2_LPUART1)     || \
S                            ((__AF__) == GPIO_AF0_USART1)   || ((__AF__) == GPIO_AF2_USB)         || \
S                            ((__AF__) == GPIO_AF0_USART2)   || ((__AF__) == GPIO_AF2_LPTIM1)      || \
S                            ((__AF__) == GPIO_AF0_LPUART1)  || ((__AF__) == GPIO_AF2_TIM2)        || \
S                            ((__AF__) == GPIO_AF0_USB)      || ((__AF__) == GPIO_AF4_TIM22)       || \
S                            ((__AF__) == GPIO_AF0_LPTIM1)   || ((__AF__) == GPIO_AF2_EVENTOUT)    || \
S                            ((__AF__) == GPIO_AF0_TSC)      || ((__AF__) == GPIO_AF2_RTC)    || \
S                            ((__AF__) == GPIO_AF0_TIM2)     || ((__AF__) == GPIO_AF3_I2C1)        || \
S                            ((__AF__) == GPIO_AF0_TIM21)    || ((__AF__) == GPIO_AF3_TSC)         || \
S                            ((__AF__) == GPIO_AF0_TIM22)    || ((__AF__) == GPIO_AF3_EVENTOUT)    || \
S                            ((__AF__) == GPIO_AF0_EVENTOUT) || ((__AF__) == GPIO_AF4_I2C1)        || \
S                            ((__AF__) == GPIO_AF0_MCO)      || ((__AF__) == GPIO_AF4_USART1)      || \
S                            ((__AF__) == GPIO_AF0_SWDIO)    || ((__AF__) == GPIO_AF0_SWCLK)       || \
S                            ((__AF__) == GPIO_AF1_SPI1)     || ((__AF__) == GPIO_AF4_USART2)      || \
S                            ((__AF__) == GPIO_AF1_SPI2)     || ((__AF__) == GPIO_AF4_LPUART1)     || \
S                            ((__AF__) == GPIO_AF1_I2C1)     || ((__AF__) == GPIO_AF4_EVENTOUT)    || \
S                            ((__AF__) == GPIO_AF6_EVENTOUT) || ((__AF__) == GPIO_AF5_SPI2)        || \
S                            ((__AF__) == GPIO_AF5_I2C2)     || ((__AF__) == GPIO_AF5_TIM2)        || \
S                            ((__AF__) == GPIO_AF5_TIM21)    || ((__AF__) == GPIO_AF5_TIM22)       || \
S                            ((__AF__) == GPIO_AF6_I2C2)     || ((__AF__) == GPIO_AF6_TIM21)       || \
S                            ((__AF__) == GPIO_AF7_COMP2)    || ((__AF__) == GPIO_AF7_COMP1))
X#define IS_GPIO_AF(__AF__) (((__AF__) == GPIO_AF0_SPI1)     || ((__AF__) == GPIO_AF2_SPI2)        ||                             ((__AF__) == GPIO_AF0_SPI2)     || ((__AF__) == GPIO_AF2_LPUART1)     ||                             ((__AF__) == GPIO_AF0_USART1)   || ((__AF__) == GPIO_AF2_USB)         ||                             ((__AF__) == GPIO_AF0_USART2)   || ((__AF__) == GPIO_AF2_LPTIM1)      ||                             ((__AF__) == GPIO_AF0_LPUART1)  || ((__AF__) == GPIO_AF2_TIM2)        ||                             ((__AF__) == GPIO_AF0_USB)      || ((__AF__) == GPIO_AF4_TIM22)       ||                             ((__AF__) == GPIO_AF0_LPTIM1)   || ((__AF__) == GPIO_AF2_EVENTOUT)    ||                             ((__AF__) == GPIO_AF0_TSC)      || ((__AF__) == GPIO_AF2_RTC)    ||                             ((__AF__) == GPIO_AF0_TIM2)     || ((__AF__) == GPIO_AF3_I2C1)        ||                             ((__AF__) == GPIO_AF0_TIM21)    || ((__AF__) == GPIO_AF3_TSC)         ||                             ((__AF__) == GPIO_AF0_TIM22)    || ((__AF__) == GPIO_AF3_EVENTOUT)    ||                             ((__AF__) == GPIO_AF0_EVENTOUT) || ((__AF__) == GPIO_AF4_I2C1)        ||                             ((__AF__) == GPIO_AF0_MCO)      || ((__AF__) == GPIO_AF4_USART1)      ||                             ((__AF__) == GPIO_AF0_SWDIO)    || ((__AF__) == GPIO_AF0_SWCLK)       ||                             ((__AF__) == GPIO_AF1_SPI1)     || ((__AF__) == GPIO_AF4_USART2)      ||                             ((__AF__) == GPIO_AF1_SPI2)     || ((__AF__) == GPIO_AF4_LPUART1)     ||                             ((__AF__) == GPIO_AF1_I2C1)     || ((__AF__) == GPIO_AF4_EVENTOUT)    ||                             ((__AF__) == GPIO_AF6_EVENTOUT) || ((__AF__) == GPIO_AF5_SPI2)        ||                             ((__AF__) == GPIO_AF5_I2C2)     || ((__AF__) == GPIO_AF5_TIM2)        ||                             ((__AF__) == GPIO_AF5_TIM21)    || ((__AF__) == GPIO_AF5_TIM22)       ||                             ((__AF__) == GPIO_AF6_I2C2)     || ((__AF__) == GPIO_AF6_TIM21)       ||                             ((__AF__) == GPIO_AF7_COMP2)    || ((__AF__) == GPIO_AF7_COMP1))
S
S
S#define IS_GPIO_AF_AVAILABLE(__INSTANCE__,__AF__)  \
S        ((((__INSTANCE__) == GPIOA) && (((__AF__) ==  GPIO_AF0_EVENTOUT)   ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM2)       ||   \
S                                        ((__AF__) ==  GPIO_AF3_TSC)        ||   \
S                                        ((__AF__) ==  GPIO_AF4_USART2)     ||   \
S                                        ((__AF__) ==  GPIO_AF5_TIM22)      ||   \
S                                        ((__AF__) ==  GPIO_AF6_EVENTOUT)   ||   \
S                                        ((__AF__) ==  GPIO_AF7_COMP1)))    ||   \
S         (((__INSTANCE__) == GPIOB) && (((__AF__) ==  GPIO_AF0_EVENTOUT)   ||   \
S                                        ((__AF__) ==  GPIO_AF1_I2C1)       ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM2)       ||   \
S                                        ((__AF__) ==  GPIO_AF3_TSC)        ||   \
S                                        ((__AF__) ==  GPIO_AF4_LPUART1)    ||   \
S                                        ((__AF__) ==  GPIO_AF5_I2C2)       ||   \
S                                        ((__AF__) ==  GPIO_AF6_EVENTOUT))) ||   \
S         (((__INSTANCE__) == GPIOC) && (((__AF__) ==  GPIO_AF0_EVENTOUT)   ||   \
S                                        ((__AF__) ==  GPIO_AF2_EVENTOUT)   ||   \
S                                        ((__AF__) ==  GPIO_AF3_TSC)))      ||   \
S         (((__INSTANCE__) == GPIOD) && (((__AF__) ==  GPIO_AF0_LPUART1)))  ||   \
S         (((__INSTANCE__) == GPIOH) && (((__AF__) ==  GPIO_AF0_USB))))
X#define IS_GPIO_AF_AVAILABLE(__INSTANCE__,__AF__)          ((((__INSTANCE__) == GPIOA) && (((__AF__) ==  GPIO_AF0_EVENTOUT)   ||                                           ((__AF__) ==  GPIO_AF2_TIM2)       ||                                           ((__AF__) ==  GPIO_AF3_TSC)        ||                                           ((__AF__) ==  GPIO_AF4_USART2)     ||                                           ((__AF__) ==  GPIO_AF5_TIM22)      ||                                           ((__AF__) ==  GPIO_AF6_EVENTOUT)   ||                                           ((__AF__) ==  GPIO_AF7_COMP1)))    ||            (((__INSTANCE__) == GPIOB) && (((__AF__) ==  GPIO_AF0_EVENTOUT)   ||                                           ((__AF__) ==  GPIO_AF1_I2C1)       ||                                           ((__AF__) ==  GPIO_AF2_TIM2)       ||                                           ((__AF__) ==  GPIO_AF3_TSC)        ||                                           ((__AF__) ==  GPIO_AF4_LPUART1)    ||                                           ((__AF__) ==  GPIO_AF5_I2C2)       ||                                           ((__AF__) ==  GPIO_AF6_EVENTOUT))) ||            (((__INSTANCE__) == GPIOC) && (((__AF__) ==  GPIO_AF0_EVENTOUT)   ||                                           ((__AF__) ==  GPIO_AF2_EVENTOUT)   ||                                           ((__AF__) ==  GPIO_AF3_TSC)))      ||            (((__INSTANCE__) == GPIOD) && (((__AF__) ==  GPIO_AF0_LPUART1)))  ||            (((__INSTANCE__) == GPIOH) && (((__AF__) ==  GPIO_AF0_USB))))
S
S /**
S  * @}
S  */
N#endif /* STM32L052xx || STM32L062xx */
N/*------------------------------------------------------------------------------------------*/
N
N/*----------------------------------------------------------------------------*/
N/*------------------------- STM32L051xx/STM32L061xx---------------------------*/
N/*----------------------------------------------------------------------------*/
N#if defined (STM32L051xx)|| defined (STM32L061xx)
X#if 0L|| 0L
S/* The table below gives an overview of the different alternate functions per port.
S * For more details refer yourself to the product data sheet.
S *
S */
S/*     |   AF0  |   AF1  |   AF2  |   AF3  |   AF4  |   AF5  |   AF6  |   AF7  |
S *______________________________________________________________________________
S * PA0 |        |        |TIM2_C1 |        |USART2  |TIM2_TR |        |COMP1   |
S * PA1 |EVENTOUT|        |TIM2_C2 |        |USART2  |TIM21_TR|        |        |
S * PA2 |TIM21_C1|        |TIM2_C3 |        |USART2  |        |        |COMP2   |
S * PA3 |TIM21_C2|        |TIM2_C4 |        |USART2  |        |        |        |
S * PA4 |SPI1    |        |        |        |USART2  |TIM22_TR|        |        |
S * PA5 |SPI1    |        |TIM2_TR |        |        |TIM2_C1 |        |        |
S * PA6 |SPI1    |        |        |        |LPUART  |TIM22_C1|EVENTOUT|COMP1   |
S * PA7 |SPI1    |        |        |        |        |TIM22_C2|EVENTOUT|COMP2   |
S * PA8 |MCO     |        |        |EVENTOUT|USART1  |        |        |        |
S * PA9 |MCO     |        |        |        |USART1  |        |        |        |
S * PA10|        |        |        |        |USART1  |        |        |        |
S * PA11|SPI1    |        |EVENTOUT|        |USART1  |        |        |COMP1   |
S * PA12|SPI1    |        |EVENTOUT|        |USART1  |        |        |COMP2   |
S * PA13|SWDIO   |        |        |        |        |        |        |        |
S * PA14|SWCLK   |        |        |        |USART2  |        |        |        |
S * PA15|SPI1    |        |TIM2_TR |EVENTOUT|USART2  |TIM2_C1 |        |        |
S *______________________________________________________________________________
S * PB0 |EVENTOUT|        |        |        |        |        |        |        |
S * PB1 |        |        |        |        |LPUART1 |        |        |        |
S * PB2 |        |        |LPTIM1_O|        |        |        |        |        |
S * PB3 |SPI1    |        |TIM2_C2 |        |EVENTOUT|        |        |        |
S * PB4 |SPI1    |        |EVENTOUT|        |TIM22_C1|        |        |        |
S * PB5 |SPI1    |        |LPTIM1_I|I2C1    |TIM22_C2|        |        |        |
S * PB6 |USART1  |I2C1    |LPTIM1_T|        |        |        |        |        |
S * PB7 |USART1  |I2C1    |LPTIM1_I|        |        |        |        |        |
S * PB8 |        |        |        |        |I2C1    |        |        |        |
S * PB9 |        |        |EVENTOUT|        |I2C1    |SPI2    |        |        |
S * PB10|        |        |TIM2_C3 |        |LPUART1 |SPI2    |I2C2    |        |
S * PB11|EVENTOUT|        |TIM2_C4 |        |LPUART1 |        |I2C2    |        |
S * PB12|SPI2    |        |LPUART1 |        |        |I2C2    |EVENTOUT|        |
S * PB13|SPI2    |        |        |        |LPUART1 |I2C2    |TIM21_C1|        |
S * PB14|SPI2    |        |RTC     |        |LPUART1 |I2C2    |TIM21_C2|        |
S * PB15|SPI2    |        |RTC     |        |        |        |        |        |
S *______________________________________________________________________________
S * PC0 |LPTIM1_I|        |EVENTOUT|        |        |        |        |        |
S * PC1 |LPTIM1_O|        |EVENTOUT|        |        |        |        |        |
S * PC2 |LPTIM1_I|        |SPI2    |        |        |        |        |        |
S * PC3 |LPTIM1_T|        |SPI2    |        |        |        |        |        |
S * PC4 |EVENTOUT|        |LPUART  |        |        |        |        |        |
S * PC5 |        |        |LPUART  |        |        |        |        |        |
S * PC6 |TIM22_C1|        |        |        |        |        |        |        |
S * PC7 |TIM22_C2|        |        |        |        |        |        |        |
S * PC8 |TIM22_TR|        |        |        |        |        |        |        |
S * PC9 |TIM21_TR|        |        |        |        |        |        |        |
S * PC10|LPUART  |        |        |        |        |        |        |        |
S * PC11|LPUART  |        |        |        |        |        |        |        |
S * PC12|        |        |        |        |        |        |        |        |
S * PC13|        |        |        |        |        |        |        |        |
S * PC14|        |        |        |        |        |        |        |        |
S * PC15|        |        |        |        |        |        |        |        |
S *______________________________________________________________________________
S * PD2 |LPUART  |        |        |        |        |        |        |        |
S *______________________________________________________________________________
S * PH0 |        |        |        |        |        |        |        |        |
S * PH1 |        |        |        |        |        |        |        |        |
S *  *
S */
S
S/** @defgroup GPIOEx_Alternate_function_selection Alternate function selection
S * @{
S */
S
S/*
S * Alternate function AF0
S */
S#define GPIO_AF0_SPI1          ((uint8_t)0x00U)  /* SPI1 Alternate Function mapping     */
S#define GPIO_AF0_SPI2          ((uint8_t)0x00U)  /* SPI2 Alternate Function mapping     */
S#define GPIO_AF0_USART1        ((uint8_t)0x00U)  /* USART1 Alternate Function mapping   */
S#define GPIO_AF0_USART2        ((uint8_t)0x00U)  /* USART2 Alternate Function mapping   */
S#define GPIO_AF0_LPUART1       ((uint8_t)0x00U)  /* LPUART1 Alternate Function mapping  */
S#define GPIO_AF0_LPTIM1        ((uint8_t)0x00U)  /* LPTIM1 Alternate Function mapping   */
S#define GPIO_AF0_TIM2          ((uint8_t)0x00U)  /* TIM2 Alternate Function mapping     */
S#define GPIO_AF0_TIM21         ((uint8_t)0x00U)  /* TIM21 Alternate Function mapping    */
S#define GPIO_AF0_TIM22         ((uint8_t)0x00U)  /* TIM22 Alternate Function mapping    */
S#define GPIO_AF0_EVENTOUT      ((uint8_t)0x00U)  /* EVENTOUT Alternate Function mapping */
S#define GPIO_AF0_MCO           ((uint8_t)0x00U)  /* MCO Alternate Function mapping      */
S#define GPIO_AF0_SWDIO         ((uint8_t)0x00U)  /* SWDIO Alternate Function mapping    */
S#define GPIO_AF0_SWCLK         ((uint8_t)0x00U)  /* SWCLK Alternate Function mapping    */
S/**
S  *
S  */
S
S/*
S * Alternate function AF1
S */
S#define GPIO_AF1_SPI1          ((uint8_t)0x01U)  /* SPI1 Alternate Function mapping  */
S#define GPIO_AF1_SPI2          ((uint8_t)0x01U)  /* SPI2 Alternate Function mapping  */
S#define GPIO_AF1_I2C1          ((uint8_t)0x01U)  /* I2C1 Alternate Function mapping  */
S/**
S  *
S  */
S
S /*
S  * Alternate function AF2
S */
S#define GPIO_AF2_SPI2          ((uint8_t)0x02U)  /* SPI2 Alternate Function mapping       */
S#define GPIO_AF2_LPUART1       ((uint8_t)0x02U)  /* LPUART1 Alternate Function mapping    */
S#define GPIO_AF2_USB           ((uint8_t)0x02U)  /* USB Alternate Function mapping        */
S#define GPIO_AF2_LPTIM1        ((uint8_t)0x02U)  /* LPTIM1 Alternate Function mapping     */
S#define GPIO_AF2_TIM2          ((uint8_t)0x02U)  /* TIM2 Alternate Function mapping       */
S#define GPIO_AF2_EVENTOUT      ((uint8_t)0x02U)  /* EVENTOUT Alternate Function mapping   */
S#define GPIO_AF2_RTC           ((uint8_t)0x02U)  /* RTC Alternate Function mapping        */
S/**
S  *
S  */
S
S/*
S * Alternate function AF3
S */
S#define GPIO_AF3_I2C1          ((uint8_t)0x03U)  /* I2C1 Alternate Function mapping     */
S#define GPIO_AF3_EVENTOUT      ((uint8_t)0x03U)  /* EVENTOUT Alternate Function mapping */
S/**
S  *
S  */
S
S/*
S * Alternate function AF4
S */
S#define GPIO_AF4_I2C1            ((uint8_t)0x04U)  /* I2C1 Alternate Function mapping     */
S#define GPIO_AF4_USART1          ((uint8_t)0x04U)  /* USART1 Alternate Function mapping   */
S#define GPIO_AF4_USART2          ((uint8_t)0x04U)  /* USART2 Alternate Function mapping   */
S#define GPIO_AF4_LPUART1         ((uint8_t)0x04U)  /* LPUART1 Alternate Function mapping  */
S#define GPIO_AF4_TIM22           ((uint8_t)0x04U)  /* TIM22 Alternate Function mapping    */
S#define GPIO_AF4_EVENTOUT        ((uint8_t)0x04U)  /* EVENTOUT Alternate Function mapping */
S/**
S  *
S  */
S
S/*
S * Alternate function AF5
S */
S#define GPIO_AF5_SPI2          ((uint8_t)0x05U)  /* SPI2 Alternate Function mapping     */
S#define GPIO_AF5_I2C2          ((uint8_t)0x05U)  /* I2C2 Alternate Function mapping     */
S#define GPIO_AF5_TIM2          ((uint8_t)0x05U)  /* TIM2 Alternate Function mapping     */
S#define GPIO_AF5_TIM21         ((uint8_t)0x05U)  /* TIM21 Alternate Function mapping    */
S#define GPIO_AF5_TIM22         ((uint8_t)0x05U)  /* TIM22 Alternate Function mapping    */
S/**
S  *
S  */
S
S/*
S * Alternate function AF6
S */
S#define GPIO_AF6_I2C2          ((uint8_t)0x06U)  /* I2C2 Alternate Function mapping      */
S#define GPIO_AF6_TIM21         ((uint8_t)0x06U)  /* TIM21 Alternate Function mapping     */
S#define GPIO_AF6_EVENTOUT      ((uint8_t)0x06U)  /* EVENTOUT Alternate Function mapping  */
S/**
S  *
S  */
S
S/*
S * Alternate function AF7
S */
S#define GPIO_AF7_COMP1        ((uint8_t)0x07U)  /* COMP1 Alternate Function mapping     */
S#define GPIO_AF7_COMP2        ((uint8_t)0x07U)  /* COMP2 Alternate Function mapping     */
S/**
S  *
S  */
S
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S/** @defgroup GPIOEx_Private  GPIOEx Private
S * @{
S */
S
S/**
S * @brief  IS_GPIO_AF macro definition
S */
S#define IS_GPIO_AF(__AF__) (((__AF__) == GPIO_AF0_SPI1)     || ((__AF__) == GPIO_AF2_SPI2)     || \
S                            ((__AF__) == GPIO_AF0_SPI2)     || ((__AF__) == GPIO_AF2_LPUART1)  || \
S                            ((__AF__) == GPIO_AF0_USART1)   || ((__AF__) == GPIO_AF7_COMP1)    || \
S                            ((__AF__) == GPIO_AF0_USART2)   || ((__AF__) == GPIO_AF2_LPTIM1)   || \
S                            ((__AF__) == GPIO_AF0_LPUART1)  || ((__AF__) == GPIO_AF2_TIM2)     || \
S                            ((__AF__) == GPIO_AF0_LPTIM1)   || ((__AF__) == GPIO_AF2_EVENTOUT) || \
S                            ((__AF__) == GPIO_AF2_RTC) || ((__AF__) == GPIO_AF4_TIM22)    || \
S                            ((__AF__) == GPIO_AF0_TIM2)     || ((__AF__) == GPIO_AF3_I2C1)     || \
S                            ((__AF__) == GPIO_AF0_TIM21)    || ((__AF__) == GPIO_AF7_COMP2)    || \
S                            ((__AF__) == GPIO_AF0_TIM22)    || ((__AF__) == GPIO_AF3_EVENTOUT) || \
S                            ((__AF__) == GPIO_AF0_EVENTOUT) || ((__AF__) == GPIO_AF4_I2C1)     || \
S                            ((__AF__) == GPIO_AF0_MCO)      || ((__AF__) == GPIO_AF4_USART1)   || \
S                            ((__AF__) == GPIO_AF0_SWDIO)    || ((__AF__) == GPIO_AF0_SWCLK)    || \
S                            ((__AF__) == GPIO_AF1_SPI1)     || ((__AF__) == GPIO_AF4_USART2)   || \
S                            ((__AF__) == GPIO_AF1_SPI2)     || ((__AF__) == GPIO_AF4_LPUART1)  || \
S                            ((__AF__) == GPIO_AF1_I2C1)     || ((__AF__) == GPIO_AF4_EVENTOUT) || \
S                            ((__AF__) == GPIO_AF6_EVENTOUT) || ((__AF__) == GPIO_AF5_SPI2)     || \
S                            ((__AF__) == GPIO_AF5_I2C2)     || ((__AF__) == GPIO_AF5_TIM2)     || \
S                            ((__AF__) == GPIO_AF5_TIM21)    || ((__AF__) == GPIO_AF5_TIM22)    || \
S                            ((__AF__) == GPIO_AF6_I2C2)     || ((__AF__) == GPIO_AF6_TIM21))
X#define IS_GPIO_AF(__AF__) (((__AF__) == GPIO_AF0_SPI1)     || ((__AF__) == GPIO_AF2_SPI2)     ||                             ((__AF__) == GPIO_AF0_SPI2)     || ((__AF__) == GPIO_AF2_LPUART1)  ||                             ((__AF__) == GPIO_AF0_USART1)   || ((__AF__) == GPIO_AF7_COMP1)    ||                             ((__AF__) == GPIO_AF0_USART2)   || ((__AF__) == GPIO_AF2_LPTIM1)   ||                             ((__AF__) == GPIO_AF0_LPUART1)  || ((__AF__) == GPIO_AF2_TIM2)     ||                             ((__AF__) == GPIO_AF0_LPTIM1)   || ((__AF__) == GPIO_AF2_EVENTOUT) ||                             ((__AF__) == GPIO_AF2_RTC) || ((__AF__) == GPIO_AF4_TIM22)    ||                             ((__AF__) == GPIO_AF0_TIM2)     || ((__AF__) == GPIO_AF3_I2C1)     ||                             ((__AF__) == GPIO_AF0_TIM21)    || ((__AF__) == GPIO_AF7_COMP2)    ||                             ((__AF__) == GPIO_AF0_TIM22)    || ((__AF__) == GPIO_AF3_EVENTOUT) ||                             ((__AF__) == GPIO_AF0_EVENTOUT) || ((__AF__) == GPIO_AF4_I2C1)     ||                             ((__AF__) == GPIO_AF0_MCO)      || ((__AF__) == GPIO_AF4_USART1)   ||                             ((__AF__) == GPIO_AF0_SWDIO)    || ((__AF__) == GPIO_AF0_SWCLK)    ||                             ((__AF__) == GPIO_AF1_SPI1)     || ((__AF__) == GPIO_AF4_USART2)   ||                             ((__AF__) == GPIO_AF1_SPI2)     || ((__AF__) == GPIO_AF4_LPUART1)  ||                             ((__AF__) == GPIO_AF1_I2C1)     || ((__AF__) == GPIO_AF4_EVENTOUT) ||                             ((__AF__) == GPIO_AF6_EVENTOUT) || ((__AF__) == GPIO_AF5_SPI2)     ||                             ((__AF__) == GPIO_AF5_I2C2)     || ((__AF__) == GPIO_AF5_TIM2)     ||                             ((__AF__) == GPIO_AF5_TIM21)    || ((__AF__) == GPIO_AF5_TIM22)    ||                             ((__AF__) == GPIO_AF6_I2C2)     || ((__AF__) == GPIO_AF6_TIM21))
S
S                         
S
S   #define IS_GPIO_AF_AVAILABLE(__INSTANCE__,__AF__)  \
S        ((((__INSTANCE__) == GPIOA) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM2)      ||   \
S                                        ((__AF__) ==  GPIO_AF3_EVENTOUT)  ||   \
S                                        ((__AF__) ==  GPIO_AF4_USART2)    ||   \
S                                        ((__AF__) ==  GPIO_AF5_TIM22)     ||   \
S                                        ((__AF__) ==  GPIO_AF6_EVENTOUT)  ||   \
S                                        ((__AF__) ==  GPIO_AF7_COMP2)))   ||   \
S         (((__INSTANCE__) == GPIOB) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||   \
S                                        ((__AF__) ==  GPIO_AF1_I2C1)      ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM2)      ||   \
S                                        ((__AF__) ==  GPIO_AF3_I2C1)      ||   \
S                                        ((__AF__) ==  GPIO_AF4_LPUART1)   ||   \
S                                        ((__AF__) ==  GPIO_AF5_I2C2)      ||   \
S                                        ((__AF__) ==  GPIO_AF6_TIM21)))   ||   \
S         (((__INSTANCE__) == GPIOC) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||   \
S                                        ((__AF__) ==  GPIO_AF2_LPUART1))) ||   \
S         (((__INSTANCE__) == GPIOD) && (((__AF__) ==  GPIO_AF0_LPUART1))))
X   #define IS_GPIO_AF_AVAILABLE(__INSTANCE__,__AF__)          ((((__INSTANCE__) == GPIOA) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF2_TIM2)      ||                                           ((__AF__) ==  GPIO_AF3_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF4_USART2)    ||                                           ((__AF__) ==  GPIO_AF5_TIM22)     ||                                           ((__AF__) ==  GPIO_AF6_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF7_COMP2)))   ||            (((__INSTANCE__) == GPIOB) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF1_I2C1)      ||                                           ((__AF__) ==  GPIO_AF2_TIM2)      ||                                           ((__AF__) ==  GPIO_AF3_I2C1)      ||                                           ((__AF__) ==  GPIO_AF4_LPUART1)   ||                                           ((__AF__) ==  GPIO_AF5_I2C2)      ||                                           ((__AF__) ==  GPIO_AF6_TIM21)))   ||            (((__INSTANCE__) == GPIOC) && (((__AF__) ==  GPIO_AF0_EVENTOUT)  ||                                           ((__AF__) ==  GPIO_AF2_LPUART1))) ||            (((__INSTANCE__) == GPIOD) && (((__AF__) ==  GPIO_AF0_LPUART1))))
S
S /**
S  * @}
S  */
N#endif /* STM32L051xx/STM32L061xx*/
N/*------------------------------------------------------------------------------------------*/
N
N/*----------------------------------------------------------------------------*/
N/*------------------------- STM32L031xx/STM32L041xx---------------------------*/
N/*----------------------------------------------------------------------------*/
N#if defined (STM32L031xx)|| defined (STM32L041xx)
X#if 0L|| 0L
S/* The table below gives an overview of the different alternate functions per port.
S * For more details refer yourself to the product data sheet.
S *
S */
S/*     |   AF0  |   AF1  |   AF2  |   AF3  |   AF4  |   AF5  |   AF6  |   AF7  |
S *______________________________________________________________________________
S * PA0 |        |LPTIM1  |TIM2_C1 |        |USART2  |TIM2_TR |        |COMP1   |
S * PA1 |EVENTOUT|LPTIM1  |TIM2_C2 |I2C1    |USART2  |TIM21_TR|        |        |
S * PA2 |TIM21_C1|        |TIM2_C3 |        |USART2  |        |LPUART1 |COMP2   |
S * PA3 |TIM21_C2|        |TIM2_C4 |        |USART2  |        |LPUART1 |        |
S * PA4 |SPI1    |LPTIM1  |        |        |USART2  |TIM22_TR|        |        |
S * PA5 |SPI1    |LPTIM1  |TIM2_TR |        |        |TIM2_C1 |        |        |
S * PA6 |SPI1    |LPTIM1  |        |        |LPUART  |TIM22_C1|EVENTOUT|COMP1   |
S * PA7 |SPI1    |LPTIM1  |        |        |USART2  |TIM22_C2|EVENTOUT|COMP2   |
S * PA8 |MCO     |        |LPTIM1  |EVENTOUT|USART2  |TIM2_C1 |        |        |
S * PA9 |MCO     |I2C1    |        |        |USART2  |TIM22_C1|        |        |
S * PA10|        |I2C1    |        |        |USART2  |TIM22_C2|        |        |
S * PA11|SPI1    |        |EVENTOUT|        |USART2  |TIM21_C2|        |COMP1   |
S * PA12|SPI1    |        |EVENTOUT|        |USART2  |        |        |COMP2   |
S * PA13|SWDIO   |LPTIM1  |        |        |        |        |LPUART1 |        |
S * PA14|SWCLK   |LPTIM1  |        |I2C1    |USART2  |        |LPUART1 |        |
S * PA15|SPI1    |        |TIM2_TR |EVENTOUT|USART2  |TIM2_C1 |        |        |
S *_____________________________________________________________________________|
S * PB0 |EVENTOUT|SPI1    |        |        |USART2  |TIM2_C3 |        |        |
S * PB1 |USART2  |SPI1    |        |        |LPUART1 |TIM2_C4 |        |        |
S * PB2 |        |        |LPTIM1_O|        |        |        |        |        |
S * PB3 |SPI1    |        |TIM2_C2 |        |EVENTOUT|        |        |        |
S * PB4 |SPI1    |        |EVENTOUT|        |TIM22_C1|        |        |        |
S * PB5 |SPI1    |        |LPTIM1_I|I2C1    |TIM22_C2|        |        |        |
S * PB6 |USART2  |I2C1    |LPTIM1_T|        |        |TIM21_C1|        |        |
S * PB7 |USART2  |I2C1    |LPTIM1_I|        |        |        |        |        |
S * PB8 |        |        |        |        |I2C1    |        |        |        |
S * PB9 |        |        |EVENTOUT|        |I2C1    |        |        |        |
S * PB10|        |        |TIM2_C3 |        |        |        |LPUART1 |        |
S * PB11|EVENTOUT|        |TIM2_C4 |        |        |        |LPUART1 |        |
S * PB12|SPI2    |        |        |        |        |        |EVENTOUT|        |
S * PB13|SPI2    |        |MCO     |        |        |TIM21_C1|LPUART1 |        |
S * PB14|SPI2    |        |RTC     |        |        |TIM21_C2|LPUART1 |        |
S * PB15|SPI2    |        |RTC     |        |        |        |        |        |
S *_____________________________________________________________________________|
S * PC0 |LPTIM1_I|        |EVENTOUT|        |        |        |LPUART1 |        |
S * PC13|        |        |        |        |        |        |        |        |
S * PC14|        |        |        |        |        |        |        |        |
S * PC15|        |        |        |        |        |        |        |        |
S *_____________________________________________________________________________|
S * PH0 |        |        |        |        |        |        |        |        |
S * PH1 |        |        |        |        |        |        |        |        |
S *_____________________________________________________________________________|
S */
S
S/** @defgroup GPIOEx_Alternate_function_selection Alternate function selection
S * @{
S */
S
S/*
S * Alternate function AF0
S */
S#define GPIO_AF0_EVENTOUT      ((uint8_t)0x00U)  /* EVENTOUT Alternate Function mapping */
S#define GPIO_AF0_TIM21         ((uint8_t)0x00U)  /* TIM21 Alternate Function mapping    */
S#define GPIO_AF0_SPI1          ((uint8_t)0x00U)  /* SPI1 Alternate Function mapping     */
S#define GPIO_AF0_USART2        ((uint8_t)0x00U)  /* USART2 Alternate Function mapping   */
S#define GPIO_AF0_LPTIM1        ((uint8_t)0x00U)  /* LPTIM1 Alternate Function mapping   */
S#define GPIO_AF0_MCO           ((uint8_t)0x00U)  /* MCO Alternate Function mapping      */
S#define GPIO_AF0_SWDIO         ((uint8_t)0x00U)  /* SWDIO Alternate Function mapping    */
S#define GPIO_AF0_SWCLK         ((uint8_t)0x00U)  /* SWCLK Alternate Function mapping    */
S/**
S  *
S  */
S
S/*
S * Alternate function AF1
S */
S#define GPIO_AF1_SPI1          ((uint8_t)0x01U)  /* SPI1 Alternate Function mapping   */
S#define GPIO_AF1_I2C1          ((uint8_t)0x01U)  /* I2C1 Alternate Function mapping   */
S#define GPIO_AF1_LPTIM1        ((uint8_t)0x01U)  /* LPTIM1 Alternate Function mapping */
S/**
S  *
S  */
S
S/*
S * Alternate function AF2
S */
S#define GPIO_AF2_LPTIM1        ((uint8_t)0x02U)  /* LPTIM1 Alternate Function mapping     */
S#define GPIO_AF2_TIM2          ((uint8_t)0x02U)  /* TIM2 Alternate Function mapping       */
S#define GPIO_AF2_MCO           ((uint8_t)0x02U)  /* MCO Alternate Function mapping        */
S#define GPIO_AF2_EVENTOUT      ((uint8_t)0x02U)  /* EVENTOUT Alternate Function mapping   */
S#define GPIO_AF2_RTC           ((uint8_t)0x02U)  /* RTC Alternate Function mapping        */
S/**
S  *
S  */
S
S/*
S * Alternate function AF3
S */
S#define GPIO_AF3_I2C1          ((uint8_t)0x03U)  /* I2C1 Alternate Function mapping     */
S#define GPIO_AF3_EVENTOUT      ((uint8_t)0x03U)  /* EVENTOUT Alternate Function mapping  */
S/**
S  *
S  */
S
S/*
S * Alternate function AF4
S */
S#define GPIO_AF4_I2C1          ((uint8_t)0x04U)  /* I2C1 Alternate Function mapping     */
S#define GPIO_AF4_USART2        ((uint8_t)0x04U)  /* USART2 Alternate Function mapping   */
S#define GPIO_AF4_LPUART1       ((uint8_t)0x04U)  /* LPUART1 Alternate Function mapping  */
S#define GPIO_AF4_TIM22         ((uint8_t)0x04U)  /* TIM22 Alternate Function mapping    */
S#define GPIO_AF4_EVENTOUT      ((uint8_t)0x04U)  /* EVENTOUT Alternate Function mapping  */
S/**
S  *
S  */
S
S/*
S * Alternate function AF5
S */
S#define GPIO_AF5_TIM2          ((uint8_t)0x05U)  /* TIM2 Alternate Function mapping     */
S#define GPIO_AF5_TIM21         ((uint8_t)0x05U)  /* TIM21 Alternate Function mapping    */
S#define GPIO_AF5_TIM22         ((uint8_t)0x05U)  /* TIM22 Alternate Function mapping    */
S/**
S  *
S  */
S
S/*
S * Alternate function AF6
S */
S#define GPIO_AF6_LPUART1       ((uint8_t)0x06U)  /* LPUART1 Alternate Function mapping  */
S#define GPIO_AF6_EVENTOUT      ((uint8_t)0x06U)  /* EVENTOUT Alternate Function mapping  */
S/**
S  *
S  */
S
S/*
S * Alternate function AF7
S */
S#define GPIO_AF7_COMP1         ((uint8_t)0x07U)  /* COMP1 Alternate Function mapping     */
S#define GPIO_AF7_COMP2         ((uint8_t)0x07U)  /* COMP2 Alternate Function mapping     */
S/**
S  *
S  */
S
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S/** @defgroup GPIOEx_Private  GPIOEx Private
S * @{
S */
S/**
S * @brief  IS_GPIO_AF macro definition
S */
S
S#define IS_GPIO_AF(__AF__)   (((__AF__) == GPIO_AF0_EVENTOUT  ) || \
S                              ((__AF__) == GPIO_AF0_TIM21     ) || \
S                              ((__AF__) == GPIO_AF0_SPI1      ) || \
S                              ((__AF__) == GPIO_AF0_USART2    ) || \
S                              ((__AF__) == GPIO_AF0_LPTIM1    ) || \
S                              ((__AF__) == GPIO_AF0_MCO       ) || \
S                              ((__AF__) == GPIO_AF0_SWDIO     ) || \
S                              ((__AF__) == GPIO_AF0_SWCLK     ) || \
S                              ((__AF__) == GPIO_AF1_SPI1      ) || \
S                              ((__AF__) == GPIO_AF1_I2C1      ) || \
S                              ((__AF__) == GPIO_AF1_LPTIM1    ) || \
S                              ((__AF__) == GPIO_AF2_LPTIM1    ) || \
S                              ((__AF__) == GPIO_AF2_TIM2      ) || \
S                              ((__AF__) == GPIO_AF2_MCO       ) || \
S                              ((__AF__) == GPIO_AF2_EVENTOUT  ) || \
S                              ((__AF__) == GPIO_AF2_RTC       ) || \
S                              ((__AF__) == GPIO_AF3_I2C1      ) || \
S                              ((__AF__) == GPIO_AF3_EVENTOUT  ) || \
S                              ((__AF__) == GPIO_AF4_I2C1      ) || \
S                              ((__AF__) == GPIO_AF4_USART2    ) || \
S                              ((__AF__) == GPIO_AF4_LPUART1   ) || \
S                              ((__AF__) == GPIO_AF4_TIM22     ) || \
S                              ((__AF__) == GPIO_AF4_EVENTOUT  ) || \
S                              ((__AF__) == GPIO_AF5_TIM2      ) || \
S                              ((__AF__) == GPIO_AF5_TIM21     ) || \
S                              ((__AF__) == GPIO_AF5_TIM22     ) || \
S                              ((__AF__) == GPIO_AF6_LPUART1   ) || \
S                              ((__AF__) == GPIO_AF6_EVENTOUT  ) || \
S                              ((__AF__) == GPIO_AF7_COMP1     ) || \
S                              ((__AF__) == GPIO_AF7_COMP2     ))
X#define IS_GPIO_AF(__AF__)   (((__AF__) == GPIO_AF0_EVENTOUT  ) ||                               ((__AF__) == GPIO_AF0_TIM21     ) ||                               ((__AF__) == GPIO_AF0_SPI1      ) ||                               ((__AF__) == GPIO_AF0_USART2    ) ||                               ((__AF__) == GPIO_AF0_LPTIM1    ) ||                               ((__AF__) == GPIO_AF0_MCO       ) ||                               ((__AF__) == GPIO_AF0_SWDIO     ) ||                               ((__AF__) == GPIO_AF0_SWCLK     ) ||                               ((__AF__) == GPIO_AF1_SPI1      ) ||                               ((__AF__) == GPIO_AF1_I2C1      ) ||                               ((__AF__) == GPIO_AF1_LPTIM1    ) ||                               ((__AF__) == GPIO_AF2_LPTIM1    ) ||                               ((__AF__) == GPIO_AF2_TIM2      ) ||                               ((__AF__) == GPIO_AF2_MCO       ) ||                               ((__AF__) == GPIO_AF2_EVENTOUT  ) ||                               ((__AF__) == GPIO_AF2_RTC       ) ||                               ((__AF__) == GPIO_AF3_I2C1      ) ||                               ((__AF__) == GPIO_AF3_EVENTOUT  ) ||                               ((__AF__) == GPIO_AF4_I2C1      ) ||                               ((__AF__) == GPIO_AF4_USART2    ) ||                               ((__AF__) == GPIO_AF4_LPUART1   ) ||                               ((__AF__) == GPIO_AF4_TIM22     ) ||                               ((__AF__) == GPIO_AF4_EVENTOUT  ) ||                               ((__AF__) == GPIO_AF5_TIM2      ) ||                               ((__AF__) == GPIO_AF5_TIM21     ) ||                               ((__AF__) == GPIO_AF5_TIM22     ) ||                               ((__AF__) == GPIO_AF6_LPUART1   ) ||                               ((__AF__) == GPIO_AF6_EVENTOUT  ) ||                               ((__AF__) == GPIO_AF7_COMP1     ) ||                               ((__AF__) == GPIO_AF7_COMP2     ))
S                                      
S
S #define IS_GPIO_AF_AVAILABLE(__INSTANCE__,__AF__)  \
S        ((((__INSTANCE__) == GPIOA) && (((__AF__) ==  GPIO_AF0_EVENTOUT)   ||   \
S                                        ((__AF__) ==  GPIO_AF1_LPTIM1)     ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM2)       ||   \
S                                        ((__AF__) ==  GPIO_AF3_I2C1)       ||   \
S                                        ((__AF__) ==  GPIO_AF4_USART2)     ||   \
S                                        ((__AF__) ==  GPIO_AF5_TIM22)      ||   \
S                                        ((__AF__) ==  GPIO_AF6_LPUART1)    ||   \
S                                        ((__AF__) ==  GPIO_AF7_COMP2)))    ||   \
S         (((__INSTANCE__) == GPIOB) && (((__AF__) ==  GPIO_AF0_EVENTOUT)   ||   \
S                                        ((__AF__) ==  GPIO_AF1_SPI1)       ||   \
S                                        ((__AF__) ==  GPIO_AF2_LPTIM1)     ||   \
S                                        ((__AF__) ==  GPIO_AF3_I2C1)       ||   \
S                                        ((__AF__) ==  GPIO_AF4_LPUART1)    ||   \
S                                        ((__AF__) ==  GPIO_AF5_TIM2)       ||   \
S                                        ((__AF__) ==  GPIO_AF6_EVENTOUT))) ||   \
S         (((__INSTANCE__) == GPIOC) && (((__AF__) ==  GPIO_AF0_LPTIM1)     ||   \
S                                        ((__AF__) ==  GPIO_AF2_EVENTOUT)   ||   \
S                                        ((__AF__) ==  GPIO_AF6_LPUART1))))
X #define IS_GPIO_AF_AVAILABLE(__INSTANCE__,__AF__)          ((((__INSTANCE__) == GPIOA) && (((__AF__) ==  GPIO_AF0_EVENTOUT)   ||                                           ((__AF__) ==  GPIO_AF1_LPTIM1)     ||                                           ((__AF__) ==  GPIO_AF2_TIM2)       ||                                           ((__AF__) ==  GPIO_AF3_I2C1)       ||                                           ((__AF__) ==  GPIO_AF4_USART2)     ||                                           ((__AF__) ==  GPIO_AF5_TIM22)      ||                                           ((__AF__) ==  GPIO_AF6_LPUART1)    ||                                           ((__AF__) ==  GPIO_AF7_COMP2)))    ||            (((__INSTANCE__) == GPIOB) && (((__AF__) ==  GPIO_AF0_EVENTOUT)   ||                                           ((__AF__) ==  GPIO_AF1_SPI1)       ||                                           ((__AF__) ==  GPIO_AF2_LPTIM1)     ||                                           ((__AF__) ==  GPIO_AF3_I2C1)       ||                                           ((__AF__) ==  GPIO_AF4_LPUART1)    ||                                           ((__AF__) ==  GPIO_AF5_TIM2)       ||                                           ((__AF__) ==  GPIO_AF6_EVENTOUT))) ||            (((__INSTANCE__) == GPIOC) && (((__AF__) ==  GPIO_AF0_LPTIM1)     ||                                           ((__AF__) ==  GPIO_AF2_EVENTOUT)   ||                                           ((__AF__) ==  GPIO_AF6_LPUART1))))
S
S/**
S  * @}
S  */
S
N#endif /* STM32L031xx/STM32L041xx*/
N/*------------------------------------------------------------------------------------------*/
N
N/*----------------------------------------------------------------------------*/
N/*------------------------- STM32L011xx/STM32L021xx---------------------------*/
N/*----------------------------------------------------------------------------*/
N#if defined (STM32L011xx)|| defined (STM32L021xx)
X#if 0L|| 0L
S/* The table below gives an overview of the different alternate functions per port.
S * For more details refer yourself to the product data sheet.
S *
S */
S/*     |   AF0   |   AF1    |   AF2  |   AF3   |   AF4    |   AF5  |   AF6     |   AF7   |
S *______________________________________________________________________________________
S * PA0 |USART2_RX|LPTIM1_IN1|TIM2_C1  |        |USART2_CTS|TIM2_ETR|LPUART1_RX |COMP1_OUT|
S * PA1 |EVENTOUT |LPTIM1_IN2|TIM2_C2  |I2C1    |USART2_RTS|TIM21_TR|LPUART1_TX |         |
S * PA2 |TIM21_C1 |          |TIM2_C3  |        |USART2_TX |        |LPUART1_TX |COMP2_OUT|
S * PA3 |TIM21_C2 |          |TIM2_C4  |        |USART2_RX |        |LPUART1_RX |         |
S * PA4 |SPI1     |LPTIM1_IN1|LPTIM1_TR|I2C1_SCL|USART2_CK |TIM2_TR |LPUART1_TX |COMP2_OUT|
S * PA5 |SPI1     |LPTIM1_IN2|TIM2_TR  |        |          |TIM2_C1 |           |         |
S * PA6 |SPI1     |LPTIM1_ETR|         |        |LPUART1_CT|        |EVENTOUT   |COMP1_OUT|
S * PA7 |SPI1     |LPTIM1_OUT|         |        |USART2_CTS|TIM21_T |EVENTOUT   |COMP2_OUT|
S * PA8 |MCO      |          |LPTIM1_I1|EVENTOUT|USART2_CK |TIM2_C1 |           |         |
S * PA9 |MCO      |I2C1_SCL  |LPTIM1_O |        |USART2_TX |TIM21_C2|           |COMP1_OUT|
S * PA10|TIM21_C1 |I2C1_SDA  |RTC_REFIN|        |USART2_RX |TIM2_C3 |           |COMP1_OUT|
S * PA11|SPI1     |LPTIM1_OUT|EVENTOUT |        |USART2_CTS|TIM21_C2|           |COMP1_OUT|
S * PA12|SPI1     |          |EVENTOUT |        |USART2_RTS|        |           |COMP2_OUT|
S * PA13|SWDIO    |LPTIM1_T  |         |I2C1_SDA|          |SPI1    |LPUART1_RX |COMP1_OUT|
S * PA14|SWCLK    |LPTIM1_O  |         |I2C1_SMB|USART2_TX |SPI1    |LPUART1_TX |COMP2_OUT|
S * PA15|SPI1     |          |TIM2_TR  |EVENTOUT|USART2_RX |TIM2_C1 |           |         |
S *______________________________________________________________________________________ |
S * PB0 |EVENTOUT |SPI1      |TIM2_C2  |        |USART2_RTS|TIM2_C3 |           |         |
S * PB1 |USART2_CK|SPI1      |LPTIM1_I1|        |LPUART1_RT|TIM2_C4 |           |         |
S * PB2 |         |          |LPTIM1_O |        |          |        |           |         |
S * PB3 |SPI1     |          |TIM2_C2  |        |EVENTOUT  |        |           |         |
S * PB4 |SPI1     |          |EVENTOUT |        |          |        |           |         |
S * PB5 |SPI1     |          |LPTIM1_I1|I2C1    |          |TIM21_C1|           |         |
S * PB6 |USART2_TX|I2C1_SCL  |LPTIM1_T |        |          |TIM2_C3 |LPUART1_TX |         |
S * PB7 |USART2_RX|I2C1      |LPTIM1_I2|        |          |TIM2_C4 |LPUART1_RX |         |
S * PB8 |USART2_TX|          |EVENTOUT |        |I2C1      |SPI1    |           |         |
S * PB9 |         |          |         |        |          |        |           |         |
S *______________________________________________________________________________________ |
S * PC14|         |          |         |        |          |        |           |         |
S * PC15|         |          |         |        |          |        |           |         |
S *______________________________________________________________________________________ |
S */
S
S/** @defgroup GPIOEx_Alternate_function_selection Alternate function selection
S * @{
S */
S
S/*
S * Alternate function AF0
S */
S#define GPIO_AF0_EVENTOUT      ((uint8_t)0x00U)  /* EVENTOUT Alternate Function mapping */
S#define GPIO_AF0_TIM21         ((uint8_t)0x00U)  /* TIM21 Alternate Function mapping    */
S#define GPIO_AF0_SPI1          ((uint8_t)0x00U)  /* SPI1 Alternate Function mapping     */
S#define GPIO_AF0_USART2        ((uint8_t)0x00U)  /* USART2 Alternate Function mapping   */
S#define GPIO_AF0_MCO           ((uint8_t)0x00U)  /* MCO Alternate Function mapping      */
S#define GPIO_AF0_SWDIO         ((uint8_t)0x00U)  /* SWDIO Alternate Function mapping    */
S#define GPIO_AF0_SWCLK         ((uint8_t)0x00U)  /* SWCLK Alternate Function mapping    */
S/**
S  *
S  */
S
S/*
S *  Alternate function AF1
S */
S#define GPIO_AF1_SPI1          ((uint8_t)0x01U)  /* SPI1 Alternate Function mapping   */
S#define GPIO_AF1_I2C1          ((uint8_t)0x01U)  /* I2C1 Alternate Function mapping   */
S#define GPIO_AF1_LPTIM1        ((uint8_t)0x01U)  /* LPTIM1 Alternate Function mapping */
S/**
S  *
S  */
S
S/*  Alternate function AF2
S *
S */
S#define GPIO_AF2_LPTIM1        ((uint8_t)0x02U)  /* LPTIM1 Alternate Function mapping     */
S#define GPIO_AF2_TIM2          ((uint8_t)0x02U)  /* TIM2 Alternate Function mapping       */
S#define GPIO_AF2_RTC           ((uint8_t)0x02U)  /* RTC Alternate Function mapping        */
S#define GPIO_AF2_EVENTOUT      ((uint8_t)0x02U)  /* EVENTOUT Alternate Function mapping   */
S/**
S  *
S  */
S
S/*
S * Alternate function AF3
S */
S#define GPIO_AF3_I2C1          ((uint8_t)0x03U)  /* I2C1 Alternate Function mapping     */
S#define GPIO_AF3_EVENTOUT      ((uint8_t)0x03U)  /* EVENTOUT Alternate Function mapping  */
S/**
S  *
S  */
S
S/*
S * Alternate function AF4
S */
S#define GPIO_AF4_I2C1          ((uint8_t)0x04U)  /* I2C1 Alternate Function mapping     */
S#define GPIO_AF4_USART2        ((uint8_t)0x04U)  /* USART2 Alternate Function mapping   */
S#define GPIO_AF4_LPUART1       ((uint8_t)0x04U)  /* LPUART1 Alternate Function mapping  */
S#define GPIO_AF4_EVENTOUT      ((uint8_t)0x04U)  /* EVENTOUT Alternate Function mapping  */
S/**
S  *
S  */
S
S/*
S * Alternate function AF5
S */
S#define GPIO_AF5_TIM2          ((uint8_t)0x05U)  /* TIM2 Alternate Function mapping     */
S#define GPIO_AF5_TIM21         ((uint8_t)0x05U)  /* TIM21 Alternate Function mapping    */
S#define GPIO_AF5_SPI1          ((uint8_t)0x05U)  /* SPI1 Alternate Function mapping    */
S/**
S  *
S  */
S
S/*
S * Alternate function AF6
S */
S#define GPIO_AF6_LPUART1       ((uint8_t)0x06U)  /* LPUART1 Alternate Function mapping  */
S#define GPIO_AF6_EVENTOUT      ((uint8_t)0x06U)  /* EVENTOUT Alternate Function mapping  */
S/**
S  *
S  */
S
S/*
S * Alternate function AF7
S */
S#define GPIO_AF7_COMP1         ((uint8_t)0x07U)  /* COMP1 Alternate Function mapping     */
S#define GPIO_AF7_COMP2         ((uint8_t)0x07U)  /* COMP2 Alternate Function mapping     */
S/**
S  *
S  */
S
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S/** @defgroup GPIOEx_Private  GPIOEx Private
S * @{
S */
S/**
S *  IS_GPIO_AF macro definition
S */
S
S#define IS_GPIO_AF(__AF__)   (((__AF__) == GPIO_AF0_EVENTOUT  ) || \
S                              ((__AF__) == GPIO_AF0_TIM21     ) || \
S                              ((__AF__) == GPIO_AF0_SPI1      ) || \
S                              ((__AF__) == GPIO_AF0_USART2    ) || \
S                              ((__AF__) == GPIO_AF0_MCO       ) || \
S                              ((__AF__) == GPIO_AF0_SWDIO     ) || \
S                              ((__AF__) == GPIO_AF0_SWCLK     ) || \
S                              ((__AF__) == GPIO_AF1_SPI1      ) || \
S                              ((__AF__) == GPIO_AF1_I2C1      ) || \
S                              ((__AF__) == GPIO_AF1_LPTIM1    ) || \
S                              ((__AF__) == GPIO_AF2_LPTIM1    ) || \
S                              ((__AF__) == GPIO_AF2_TIM2      ) || \
S                              ((__AF__) == GPIO_AF2_EVENTOUT  ) || \
S                              ((__AF__) == GPIO_AF2_RTC       ) || \
S                              ((__AF__) == GPIO_AF3_I2C1      ) || \
S                              ((__AF__) == GPIO_AF3_EVENTOUT  ) || \
S                              ((__AF__) == GPIO_AF4_I2C1      ) || \
S                              ((__AF__) == GPIO_AF4_USART2    ) || \
S                              ((__AF__) == GPIO_AF4_LPUART1   ) || \
S                              ((__AF__) == GPIO_AF4_EVENTOUT  ) || \
S                              ((__AF__) == GPIO_AF5_TIM2      ) || \
S                              ((__AF__) == GPIO_AF5_TIM21     ) || \
S                              ((__AF__) == GPIO_AF5_SPI1      ) || \
S                              ((__AF__) == GPIO_AF6_LPUART1   ) || \
S                              ((__AF__) == GPIO_AF6_EVENTOUT  ) || \
S                              ((__AF__) == GPIO_AF7_COMP1     ) || \
S                              ((__AF__) == GPIO_AF7_COMP2     ))
X#define IS_GPIO_AF(__AF__)   (((__AF__) == GPIO_AF0_EVENTOUT  ) ||                               ((__AF__) == GPIO_AF0_TIM21     ) ||                               ((__AF__) == GPIO_AF0_SPI1      ) ||                               ((__AF__) == GPIO_AF0_USART2    ) ||                               ((__AF__) == GPIO_AF0_MCO       ) ||                               ((__AF__) == GPIO_AF0_SWDIO     ) ||                               ((__AF__) == GPIO_AF0_SWCLK     ) ||                               ((__AF__) == GPIO_AF1_SPI1      ) ||                               ((__AF__) == GPIO_AF1_I2C1      ) ||                               ((__AF__) == GPIO_AF1_LPTIM1    ) ||                               ((__AF__) == GPIO_AF2_LPTIM1    ) ||                               ((__AF__) == GPIO_AF2_TIM2      ) ||                               ((__AF__) == GPIO_AF2_EVENTOUT  ) ||                               ((__AF__) == GPIO_AF2_RTC       ) ||                               ((__AF__) == GPIO_AF3_I2C1      ) ||                               ((__AF__) == GPIO_AF3_EVENTOUT  ) ||                               ((__AF__) == GPIO_AF4_I2C1      ) ||                               ((__AF__) == GPIO_AF4_USART2    ) ||                               ((__AF__) == GPIO_AF4_LPUART1   ) ||                               ((__AF__) == GPIO_AF4_EVENTOUT  ) ||                               ((__AF__) == GPIO_AF5_TIM2      ) ||                               ((__AF__) == GPIO_AF5_TIM21     ) ||                               ((__AF__) == GPIO_AF5_SPI1      ) ||                               ((__AF__) == GPIO_AF6_LPUART1   ) ||                               ((__AF__) == GPIO_AF6_EVENTOUT  ) ||                               ((__AF__) == GPIO_AF7_COMP1     ) ||                               ((__AF__) == GPIO_AF7_COMP2     ))
S                                      
S
S #define IS_GPIO_AF_AVAILABLE(__INSTANCE__,__AF__)  \
S        ((((__INSTANCE__) == GPIOA) && (((__AF__) ==  GPIO_AF0_EVENTOUT)   ||   \
S                                        ((__AF__) ==  GPIO_AF1_LPTIM1)     ||   \
S                                        ((__AF__) ==  GPIO_AF2_TIM2)       ||   \
S                                        ((__AF__) ==  GPIO_AF3_I2C1)       ||   \
S                                        ((__AF__) ==  GPIO_AF4_USART2)     ||   \
S                                        ((__AF__) ==  GPIO_AF5_TIM2)       ||   \
S                                        ((__AF__) ==  GPIO_AF6_LPUART1)    ||   \
S                                        ((__AF__) ==  GPIO_AF7_COMP2)))    ||   \
S         (((__INSTANCE__) == GPIOB) && (((__AF__) ==  GPIO_AF0_EVENTOUT)   ||   \
S                                        ((__AF__) ==  GPIO_AF1_SPI1)       ||   \
S                                        ((__AF__) ==  GPIO_AF2_LPTIM1)     ||   \
S                                        ((__AF__) ==  GPIO_AF3_I2C1)       ||   \
S                                        ((__AF__) ==  GPIO_AF4_LPUART1)    ||   \
S                                        ((__AF__) ==  GPIO_AF5_TIM2)       ||   \
S                                        ((__AF__) ==  GPIO_AF6_EVENTOUT))))
X #define IS_GPIO_AF_AVAILABLE(__INSTANCE__,__AF__)          ((((__INSTANCE__) == GPIOA) && (((__AF__) ==  GPIO_AF0_EVENTOUT)   ||                                           ((__AF__) ==  GPIO_AF1_LPTIM1)     ||                                           ((__AF__) ==  GPIO_AF2_TIM2)       ||                                           ((__AF__) ==  GPIO_AF3_I2C1)       ||                                           ((__AF__) ==  GPIO_AF4_USART2)     ||                                           ((__AF__) ==  GPIO_AF5_TIM2)       ||                                           ((__AF__) ==  GPIO_AF6_LPUART1)    ||                                           ((__AF__) ==  GPIO_AF7_COMP2)))    ||            (((__INSTANCE__) == GPIOB) && (((__AF__) ==  GPIO_AF0_EVENTOUT)   ||                                           ((__AF__) ==  GPIO_AF1_SPI1)       ||                                           ((__AF__) ==  GPIO_AF2_LPTIM1)     ||                                           ((__AF__) ==  GPIO_AF3_I2C1)       ||                                           ((__AF__) ==  GPIO_AF4_LPUART1)    ||                                           ((__AF__) ==  GPIO_AF5_TIM2)       ||                                           ((__AF__) ==  GPIO_AF6_EVENTOUT))))
S
S /**
S  * @}
S  */
S
N#endif /* STM32L011xx/STM32L021xx*/
N/*------------------------------------------------------------------------------------------*/
N
N
N
N#if defined (STM32L083xx) || defined (STM32L082xx) || defined (STM32L081xx) || \
N    defined (STM32L073xx) || defined (STM32L072xx) || defined (STM32L071xx)
X#if 0L || 0L || 0L ||     0L || 0L || 0L
S
S /** @addtogroup GPIOEx_Exported_Constants
S * @{
S */
S /** @defgroup GPIOEx_Pin_Available Pin available
S * @{
S */
S#define GPIOA_PIN_AVAILABLE  GPIO_PIN_All
S#define GPIOB_PIN_AVAILABLE  GPIO_PIN_All
S#define GPIOC_PIN_AVAILABLE  GPIO_PIN_All
S#define GPIOD_PIN_AVAILABLE  GPIO_PIN_All
S#define GPIOE_PIN_AVAILABLE  GPIO_PIN_All
S#define GPIOH_PIN_AVAILABLE  (GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_9 | GPIO_PIN_10)
S/**
S  * @}
S  */
S/**
S  * @}
S  */
S
S /** @addtogroup GPIOEx_Private
S * @{
S */
S#define GPIO_GET_INDEX(__GPIOx__)    (((__GPIOx__) == (GPIOA))? 0U :\
S                                      ((__GPIOx__) == (GPIOB))? 1U :\
S                                      ((__GPIOx__) == (GPIOC))? 2U :\
S                                      ((__GPIOx__) == (GPIOD))? 3U :\
S                                      ((__GPIOx__) == (GPIOE))? 4U :\
S                                      ((__GPIOx__) == (GPIOH))? 5U : 6U)
X#define GPIO_GET_INDEX(__GPIOx__)    (((__GPIOx__) == (GPIOA))? 0U :                                      ((__GPIOx__) == (GPIOB))? 1U :                                      ((__GPIOx__) == (GPIOC))? 2U :                                      ((__GPIOx__) == (GPIOD))? 3U :                                      ((__GPIOx__) == (GPIOE))? 4U :                                      ((__GPIOx__) == (GPIOH))? 5U : 6U)
S
S#define IS_GPIO_PIN_AVAILABLE(__INSTANCE__,__PIN__)  \
S           ((((__INSTANCE__) == GPIOA) && (((__PIN__) & (GPIOA_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOA_PIN_AVAILABLE)) == (GPIOA_PIN_AVAILABLE))) || \
S            (((__INSTANCE__) == GPIOB) && (((__PIN__) & (GPIOB_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOB_PIN_AVAILABLE)) == (GPIOB_PIN_AVAILABLE))) || \
S            (((__INSTANCE__) == GPIOC) && (((__PIN__) & (GPIOC_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOC_PIN_AVAILABLE)) == (GPIOC_PIN_AVAILABLE))) || \
S            (((__INSTANCE__) == GPIOD) && (((__PIN__) & (GPIOD_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOD_PIN_AVAILABLE)) == (GPIOD_PIN_AVAILABLE))) || \
S            (((__INSTANCE__) == GPIOE) && (((__PIN__) & (GPIOE_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOE_PIN_AVAILABLE)) == (GPIOE_PIN_AVAILABLE))) || \
S            (((__INSTANCE__) == GPIOH) && (((__PIN__) & (GPIOH_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOH_PIN_AVAILABLE)) == (GPIOH_PIN_AVAILABLE))))
X#define IS_GPIO_PIN_AVAILABLE(__INSTANCE__,__PIN__)             ((((__INSTANCE__) == GPIOA) && (((__PIN__) & (GPIOA_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOA_PIN_AVAILABLE)) == (GPIOA_PIN_AVAILABLE))) ||             (((__INSTANCE__) == GPIOB) && (((__PIN__) & (GPIOB_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOB_PIN_AVAILABLE)) == (GPIOB_PIN_AVAILABLE))) ||             (((__INSTANCE__) == GPIOC) && (((__PIN__) & (GPIOC_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOC_PIN_AVAILABLE)) == (GPIOC_PIN_AVAILABLE))) ||             (((__INSTANCE__) == GPIOD) && (((__PIN__) & (GPIOD_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOD_PIN_AVAILABLE)) == (GPIOD_PIN_AVAILABLE))) ||             (((__INSTANCE__) == GPIOE) && (((__PIN__) & (GPIOE_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOE_PIN_AVAILABLE)) == (GPIOE_PIN_AVAILABLE))) ||             (((__INSTANCE__) == GPIOH) && (((__PIN__) & (GPIOH_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOH_PIN_AVAILABLE)) == (GPIOH_PIN_AVAILABLE))))
S/**
S  * @}
S  */
S#elif defined (STM32L031xx) || defined (STM32L041xx)
X#elif 0L || 0L
S
S/** @addtogroup GPIOEx_Exported_Constants
S * @{
S */
S/** @defgroup GPIOEx_Pin_Available Pin available
S * @{
S */
S
S#define GPIOA_PIN_AVAILABLE  GPIO_PIN_All
S#define GPIOB_PIN_AVAILABLE  GPIO_PIN_All
S#define GPIOC_PIN_AVAILABLE  (GPIO_PIN_0 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15)
S#define GPIOH_PIN_AVAILABLE  (GPIO_PIN_0 | GPIO_PIN_1)
S/**
S  * @}
S  */
S/**
S  * @}
S  */
S
S/** @addtogroup GPIOEx_Private
S * @{
S */
S#define GPIO_GET_INDEX(__GPIOx__)    (((__GPIOx__) == (GPIOA))? 0U :\
S                                      ((__GPIOx__) == (GPIOB))? 1U :\
S                                      ((__GPIOx__) == (GPIOC))? 2U :\
S                                      ((__GPIOx__) == (GPIOH))? 5U : 6U)
X#define GPIO_GET_INDEX(__GPIOx__)    (((__GPIOx__) == (GPIOA))? 0U :                                      ((__GPIOx__) == (GPIOB))? 1U :                                      ((__GPIOx__) == (GPIOC))? 2U :                                      ((__GPIOx__) == (GPIOH))? 5U : 6U)
S
S
S#define IS_GPIO_PIN_AVAILABLE(__INSTANCE__,__PIN__)  \
S           ((((__INSTANCE__) == GPIOA) && (((__PIN__) & (GPIOA_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOA_PIN_AVAILABLE)) == (GPIOA_PIN_AVAILABLE))) || \
S            (((__INSTANCE__) == GPIOB) && (((__PIN__) & (GPIOB_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOB_PIN_AVAILABLE)) == (GPIOB_PIN_AVAILABLE))) || \
S            (((__INSTANCE__) == GPIOC) && (((__PIN__) & (GPIOC_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOC_PIN_AVAILABLE)) == (GPIOC_PIN_AVAILABLE))) || \
S            (((__INSTANCE__) == GPIOH) && (((__PIN__) & (GPIOH_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOH_PIN_AVAILABLE)) == (GPIOH_PIN_AVAILABLE))))
X#define IS_GPIO_PIN_AVAILABLE(__INSTANCE__,__PIN__)             ((((__INSTANCE__) == GPIOA) && (((__PIN__) & (GPIOA_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOA_PIN_AVAILABLE)) == (GPIOA_PIN_AVAILABLE))) ||             (((__INSTANCE__) == GPIOB) && (((__PIN__) & (GPIOB_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOB_PIN_AVAILABLE)) == (GPIOB_PIN_AVAILABLE))) ||             (((__INSTANCE__) == GPIOC) && (((__PIN__) & (GPIOC_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOC_PIN_AVAILABLE)) == (GPIOC_PIN_AVAILABLE))) ||             (((__INSTANCE__) == GPIOH) && (((__PIN__) & (GPIOH_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOH_PIN_AVAILABLE)) == (GPIOH_PIN_AVAILABLE))))
S
S/**
S  * @}
S  */
S
S#elif defined (STM32L011xx) || defined (STM32L021xx)
X#elif 0L || 0L
S
S/** @addtogroup GPIOEx_Exported_Constants
S * @{
S */
S/** @defgroup GPIOEx_Pin_Available Pin available
S * @{
S */
S
S#define GPIOA_PIN_AVAILABLE  GPIO_PIN_All
S#define GPIOB_PIN_AVAILABLE  (GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | \
S                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 )
X#define GPIOB_PIN_AVAILABLE  (GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |                               GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 )
S#define GPIOC_PIN_AVAILABLE  (GPIO_PIN_14 | GPIO_PIN_15)
S
S/**
S  * @}
S  */
S/**
S  * @}
S  */
S
S/** @addtogroup GPIOEx_Private
S * @{
S */
S#define GPIO_GET_INDEX(__GPIOx__)    (((__GPIOx__) == (GPIOA))? 0U :\
S                                      ((__GPIOx__) == (GPIOB))? 1U :\
S                                      ((__GPIOx__) == (GPIOC))? 2U : 6U)
X#define GPIO_GET_INDEX(__GPIOx__)    (((__GPIOx__) == (GPIOA))? 0U :                                      ((__GPIOx__) == (GPIOB))? 1U :                                      ((__GPIOx__) == (GPIOC))? 2U : 6U)
S
S
S#define IS_GPIO_PIN_AVAILABLE(__INSTANCE__,__PIN__)  \
S           ((((__INSTANCE__) == GPIOA) && (((__PIN__) & (GPIOA_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOA_PIN_AVAILABLE)) == (GPIOA_PIN_AVAILABLE))) || \
S            (((__INSTANCE__) == GPIOB) && (((__PIN__) & (GPIOB_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOB_PIN_AVAILABLE)) == (GPIOB_PIN_AVAILABLE))) || \
S            (((__INSTANCE__) == GPIOC) && (((__PIN__) & (GPIOC_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOC_PIN_AVAILABLE)) == (GPIOC_PIN_AVAILABLE))))
X#define IS_GPIO_PIN_AVAILABLE(__INSTANCE__,__PIN__)             ((((__INSTANCE__) == GPIOA) && (((__PIN__) & (GPIOA_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOA_PIN_AVAILABLE)) == (GPIOA_PIN_AVAILABLE))) ||             (((__INSTANCE__) == GPIOB) && (((__PIN__) & (GPIOB_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOB_PIN_AVAILABLE)) == (GPIOB_PIN_AVAILABLE))) ||             (((__INSTANCE__) == GPIOC) && (((__PIN__) & (GPIOC_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOC_PIN_AVAILABLE)) == (GPIOC_PIN_AVAILABLE))))
S/**
S  * @}
S  */
S
N#elif defined (STM32L063xx) || defined (STM32L062xx) || defined (STM32L061xx) || \
N      defined (STM32L053xx) || defined (STM32L052xx) || defined (STM32L051xx)
X#elif 0L || 0L || 0L ||       1L || 0L || 0L
N
N/** @addtogroup GPIOEx_Exported_Constants
N * @{
N */
N/** @defgroup GPIOEx_Pin_Available Pin available
N * @{
N */
N#define GPIOA_PIN_AVAILABLE  GPIO_PIN_All
N#define GPIOB_PIN_AVAILABLE  GPIO_PIN_All
N#define GPIOC_PIN_AVAILABLE  GPIO_PIN_All
N#define GPIOD_PIN_AVAILABLE  GPIO_PIN_2
N#define GPIOH_PIN_AVAILABLE  GPIO_PIN_0 | GPIO_PIN_1
N/**
N  * @}
N  */
N/**
N  * @}
N  */
N
N/** @addtogroup GPIOEx_Private
N * @{
N */
N#define GPIO_GET_INDEX(__GPIOx__)    (((__GPIOx__) == (GPIOA))? 0U :\
N                                      ((__GPIOx__) == (GPIOB))? 1U :\
N                                      ((__GPIOx__) == (GPIOC))? 2U :\
N                                      ((__GPIOx__) == (GPIOD))? 3U :\
N                                      ((__GPIOx__) == (GPIOH))? 5U : 6U)
X#define GPIO_GET_INDEX(__GPIOx__)    (((__GPIOx__) == (GPIOA))? 0U :                                      ((__GPIOx__) == (GPIOB))? 1U :                                      ((__GPIOx__) == (GPIOC))? 2U :                                      ((__GPIOx__) == (GPIOD))? 3U :                                      ((__GPIOx__) == (GPIOH))? 5U : 6U)
N
N#define IS_GPIO_PIN_AVAILABLE(__INSTANCE__,__PIN__)  \
N                ((((__INSTANCE__) == GPIOA) && (((__PIN__) & (GPIOA_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOA_PIN_AVAILABLE)) == (GPIOA_PIN_AVAILABLE))) || \
N                 (((__INSTANCE__) == GPIOB) && (((__PIN__) & (GPIOB_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOB_PIN_AVAILABLE)) == (GPIOB_PIN_AVAILABLE))) || \
N                 (((__INSTANCE__) == GPIOC) && (((__PIN__) & (GPIOC_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOC_PIN_AVAILABLE)) == (GPIOC_PIN_AVAILABLE))) || \
N                 (((__INSTANCE__) == GPIOD) && (((__PIN__) & (GPIOD_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOD_PIN_AVAILABLE)) == (GPIOD_PIN_AVAILABLE))) || \
N                 (((__INSTANCE__) == GPIOH) && (((__PIN__) & (GPIOH_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOH_PIN_AVAILABLE)) == (GPIOH_PIN_AVAILABLE))))
X#define IS_GPIO_PIN_AVAILABLE(__INSTANCE__,__PIN__)                  ((((__INSTANCE__) == GPIOA) && (((__PIN__) & (GPIOA_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOA_PIN_AVAILABLE)) == (GPIOA_PIN_AVAILABLE))) ||                  (((__INSTANCE__) == GPIOB) && (((__PIN__) & (GPIOB_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOB_PIN_AVAILABLE)) == (GPIOB_PIN_AVAILABLE))) ||                  (((__INSTANCE__) == GPIOC) && (((__PIN__) & (GPIOC_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOC_PIN_AVAILABLE)) == (GPIOC_PIN_AVAILABLE))) ||                  (((__INSTANCE__) == GPIOD) && (((__PIN__) & (GPIOD_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOD_PIN_AVAILABLE)) == (GPIOD_PIN_AVAILABLE))) ||                  (((__INSTANCE__) == GPIOH) && (((__PIN__) & (GPIOH_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOH_PIN_AVAILABLE)) == (GPIOH_PIN_AVAILABLE))))
N/**
N  * @}
N  */
N
N#endif /* STM32L083xx || STM32L082xx || STM32L081xx || STM32L073xx || STM32L072xx || STM32L071xx*/
N
N
N/**
N * @}
N */
N
N/**
N * @}
N */
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32L0xx_HAL_GPIO_EX_H */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
L 278 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_gpio.h" 2
N
N/******************************************************************************/
N/* Exported functions --------------------------------------------------------*/
N/******************************************************************************/
N
N/* Exported functions --------------------------------------------------------*/
N/** @defgroup GPIO_Exported_Functions GPIO Exported Functions
N  * @{
N  */
N
N/* Initialization and de-initialization functions *******************************/
N/** @defgroup GPIO_Exported_Functions_Group1 Initialization and de-initialization functions
N *  @{
N */
Nvoid  HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init);
Nvoid  HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin);
N/**
N  * @}
N  */
N
N/* IO operation functions *******************************************************/
N/** @defgroup GPIO_Exported_Functions_Group2 IO operation functions
N *  @{
N */
NGPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
Nvoid          HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState);
Nvoid          HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
NHAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
Nvoid          HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin);
Nvoid          HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Define the private group ***********************************/
N/**************************************************************/
N/** @defgroup GPIO_Private GPIO Private
N  * @{
N  */
N/**
N  * @}
N  */
N/**************************************************************/
N
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32L0xx_HAL_GPIO_H */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
L 175 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\Conf\stm32l0xx_hal_conf.h" 2
N#endif /* HAL_GPIO_MODULE_ENABLED */
N
N#ifdef HAL_DMA_MODULE_ENABLED
N  #include "stm32l0xx_hal_dma.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_dma.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal_dma.h
N  * @author  MCD Application Team
N  * @brief   Header file of DMA HAL module.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_DMA_H
N#define __STM32L0xx_HAL_DMA_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx_hal_def.h"
N
N/** @addtogroup STM32L0xx_HAL_Driver
N  * @{
N  */
N
N/** @defgroup DMA DMA
N  * @{
N  */ 
N
N   /** @defgroup DMA_Exported_Types DMA Exported Types
N  * @{
N  */
N/* Exported types ------------------------------------------------------------*/ 
N
N/** 
N  * @brief  DMA Configuration Structure definition  
N  */
Ntypedef struct
N{
N  uint32_t Request;                   /*!< Specifies the request selected for the specified channel. 
N                                           This parameter can be a value of @ref DMA_request */
N    
N  uint32_t Direction;                 /*!< Specifies if the data will be transferred from memory to peripheral, 
N                                           from memory to memory or from peripheral to memory.
N                                           This parameter can be a value of @ref DMA_Data_transfer_direction */
N
N  uint32_t PeriphInc;                 /*!< Specifies whether the Peripheral address register should be incremented or not.
N                                           When Memory to Memory transfer is used, this is the Source Increment mode
N                                           This parameter can be a value of @ref DMA_Peripheral_incremented_mode */  
N
N  uint32_t MemInc;                    /*!< Specifies whether the memory address register should be incremented or not.
N                                           When Memory to Memory transfer is used, this is the Destination Increment mode
N                                           This parameter can be a value of @ref DMA_Memory_incremented_mode */
N  
N  uint32_t PeriphDataAlignment;       /*!< Specifies the Peripheral data width.
N                                           When Memory to Memory transfer is used, this is the Source Alignment format
N                                           This parameter can be a value of @ref DMA_Peripheral_data_size */   
N
N  uint32_t MemDataAlignment;          /*!< Specifies the Memory data width.
N                                           When Memory to Memory transfer is used, this is the Destination Alignment format
N                                           This parameter can be a value of @ref DMA_Memory_data_size */
N
N  uint32_t Mode;                      /*!< Specifies the operation mode of the DMAy Channelx (Normal or Circular).
N                                           This parameter can be a value of @ref DMA_mode
N                                           @note The circular buffer mode cannot be used if the memory-to-memory
N                                                 data transfer is configured on the selected Channel */ 
N
N  uint32_t Priority;                   /*!< Specifies the software priority for the DMAy Channelx.
N                                            This parameter can be a value of @ref DMA_Priority_level */
N} DMA_InitTypeDef;
N
N/** 
N  * @brief DMA Configuration enumeration values definition 
N  */  
Ntypedef enum 
N{
N  DMA_MODE            = 0U,      /*!< Control related DMA mode Parameter in DMA_InitTypeDef        */
N  DMA_PRIORITY        = 1U,      /*!< Control related priority level Parameter in DMA_InitTypeDef  */
N  
N} DMA_ControlTypeDef;
N
N/** 
N  * @brief  HAL DMA State structures definition  
N  */ 
Ntypedef enum
N{
N  HAL_DMA_STATE_RESET             = 0x00U,  /*!< DMA not yet initialized or disabled */  
N  HAL_DMA_STATE_READY             = 0x01U,  /*!< DMA process success and ready for use   */
N  HAL_DMA_STATE_BUSY              = 0x02U,  /*!< DMA process is ongoing              */     
N  HAL_DMA_STATE_TIMEOUT           = 0x03U,  /*!< DMA timeout state                   */  
N  HAL_DMA_STATE_ERROR             = 0x04U,  /*!< DMA error state                     */
N  HAL_DMA_STATE_READY_HALF        = 0x05U,  /*!< DMA Half process success            */
N}HAL_DMA_StateTypeDef;
N
N/** 
N  * @brief  HAL DMA Error Code structure definition  
N  */ 
Ntypedef enum
N{
N  HAL_DMA_FULL_TRANSFER      = 0x00U,    /*!< Full transfer     */
N  HAL_DMA_HALF_TRANSFER      = 0x01U,    /*!< Half Transfer     */
N
N}HAL_DMA_LevelCompleteTypeDef;
N
N
N/** 
N  * @brief  DMA handle Structure definition  
N  */ 
Ntypedef struct __DMA_HandleTypeDef
N{  
N  DMA_Channel_TypeDef    *Instance;                                                   /*!< Register base address                  */
N  
N  DMA_InitTypeDef       Init;                                                         /*!< DMA communication parameters           */ 
N  
N  HAL_LockTypeDef       Lock;                                                         /*!< DMA locking object                     */
N  
N  __IO HAL_DMA_StateTypeDef  State;                                                   /*!< DMA transfer state                     */
X  volatile HAL_DMA_StateTypeDef  State;                                                    
N  
N  void                  *Parent;                                                      /*!< Parent object state                    */
N  
N  void                  (* XferCpltCallback)( struct __DMA_HandleTypeDef * hdma);     /*!< DMA transfer complete callback         */
N  
N  void                  (* XferHalfCpltCallback)( struct __DMA_HandleTypeDef * hdma); /*!< DMA Half transfer complete callback    */
N
N  void                  (* XferErrorCallback)( struct __DMA_HandleTypeDef * hdma);    /*!< DMA transfer error callback            */
N
N  void                  (* XferAbortCallback)( struct __DMA_HandleTypeDef * hdma);    /*!< DMA transfer abort callback          */  
N
N__IO uint32_t          ErrorCode;                                                     /*!< DMA Error code                         */
Xvolatile uint32_t          ErrorCode;                                                      
N  
N} DMA_HandleTypeDef;    
N
N/**
N  * @}
N  */
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup DMA_Exported_Constants DMA Exported Constants
N  * @{
N  */
N
N/** @defgroup DMA_Error_Code DMA Error Codes
N  * @{
N  */ 
N#define HAL_DMA_ERROR_NONE      ((uint32_t)0x00000000U)    /*!< No error             */
N#define HAL_DMA_ERROR_TE        ((uint32_t)0x00000001U)    /*!< Transfer error       */
N#define HAL_DMA_ERROR_NO_XFER   ((uint32_t)0x00000004U)    /*!< no ongoing transfer  */
N#define HAL_DMA_ERROR_TIMEOUT   ((uint32_t)0x00000020U)    /*!< Timeout error        */
N
N#if defined (STM32L011xx) || defined (STM32L021xx)
X#if 0L || 0L
S#define IS_DMA_ALL_INSTANCE(INSTANCE) (((INSTANCE) == DMA1_Channel1) || \
S                                       ((INSTANCE) == DMA1_Channel2) || \
S                                       ((INSTANCE) == DMA1_Channel3) || \
S                                       ((INSTANCE) == DMA1_Channel4) || \
S                                       ((INSTANCE) == DMA1_Channel5))
X#define IS_DMA_ALL_INSTANCE(INSTANCE) (((INSTANCE) == DMA1_Channel1) ||                                        ((INSTANCE) == DMA1_Channel2) ||                                        ((INSTANCE) == DMA1_Channel3) ||                                        ((INSTANCE) == DMA1_Channel4) ||                                        ((INSTANCE) == DMA1_Channel5))
N#else
N#define IS_DMA_ALL_INSTANCE(INSTANCE) (((INSTANCE) == DMA1_Channel1) || \
N                                       ((INSTANCE) == DMA1_Channel2) || \
N                                       ((INSTANCE) == DMA1_Channel3) || \
N                                       ((INSTANCE) == DMA1_Channel4) || \
N                                       ((INSTANCE) == DMA1_Channel5) || \
N                                       ((INSTANCE) == DMA1_Channel6) || \
N                                       ((INSTANCE) == DMA1_Channel7))   
X#define IS_DMA_ALL_INSTANCE(INSTANCE) (((INSTANCE) == DMA1_Channel1) ||                                        ((INSTANCE) == DMA1_Channel2) ||                                        ((INSTANCE) == DMA1_Channel3) ||                                        ((INSTANCE) == DMA1_Channel4) ||                                        ((INSTANCE) == DMA1_Channel5) ||                                        ((INSTANCE) == DMA1_Channel6) ||                                        ((INSTANCE) == DMA1_Channel7))   
N
N#endif
N#define IS_DMA_ALL_CONTROLLER(CONTROLLER) (((CONTROLLER) == DMA1))
N
N/**
N  * @}
N  */
N
N/** @defgroup DMA_request DMA request defintiions
N  * @{
N  */ 
N
N#if defined (STM32L071xx) || defined (STM32L072xx) || defined (STM32L073xx) || defined (STM32L081xx) || defined (STM32L082xx) || defined (STM32L083xx)
X#if 0L || 0L || 0L || 0L || 0L || 0L
S
S#define DMA_REQUEST_0                     ((uint32_t)0x00000000U)
S#define DMA_REQUEST_1                     ((uint32_t)0x00000001U)
S#define DMA_REQUEST_2                     ((uint32_t)0x00000002U)
S#define DMA_REQUEST_3                     ((uint32_t)0x00000003U)
S#define DMA_REQUEST_4                     ((uint32_t)0x00000004U)
S#define DMA_REQUEST_5                     ((uint32_t)0x00000005U)
S#define DMA_REQUEST_6                     ((uint32_t)0x00000006U)
S#define DMA_REQUEST_7                     ((uint32_t)0x00000007U)
S#define DMA_REQUEST_8                     ((uint32_t)0x00000008U)
S#define DMA_REQUEST_9                     ((uint32_t)0x00000009U)
S#define DMA_REQUEST_10                    ((uint32_t)0x0000000AU)
S#define DMA_REQUEST_11                    ((uint32_t)0x0000000BU)
S#define DMA_REQUEST_12                    ((uint32_t)0x0000000CU)
S#define DMA_REQUEST_13                    ((uint32_t)0x0000000DU)
S#define DMA_REQUEST_14                    ((uint32_t)0x0000000EU)
S#define DMA_REQUEST_15                    ((uint32_t)0x0000000FU)
S
S#define IS_DMA_ALL_REQUEST(REQUEST) (((REQUEST) == DMA_REQUEST_0) || \
S                                     ((REQUEST) == DMA_REQUEST_1) || \
S                                     ((REQUEST) == DMA_REQUEST_2) || \
S                                     ((REQUEST) == DMA_REQUEST_3) || \
S                                     ((REQUEST) == DMA_REQUEST_4) || \
S                                     ((REQUEST) == DMA_REQUEST_5) || \
S                                     ((REQUEST) == DMA_REQUEST_6) || \
S                                     ((REQUEST) == DMA_REQUEST_7) || \
S                                     ((REQUEST) == DMA_REQUEST_8) || \
S                                     ((REQUEST) == DMA_REQUEST_9) || \
S                                     ((REQUEST) == DMA_REQUEST_10) || \
S                                     ((REQUEST) == DMA_REQUEST_11) || \
S                                     ((REQUEST) == DMA_REQUEST_12) || \
S                                     ((REQUEST) == DMA_REQUEST_13) || \
S                                     ((REQUEST) == DMA_REQUEST_14) || \
S                                     ((REQUEST) == DMA_REQUEST_15))
X#define IS_DMA_ALL_REQUEST(REQUEST) (((REQUEST) == DMA_REQUEST_0) ||                                      ((REQUEST) == DMA_REQUEST_1) ||                                      ((REQUEST) == DMA_REQUEST_2) ||                                      ((REQUEST) == DMA_REQUEST_3) ||                                      ((REQUEST) == DMA_REQUEST_4) ||                                      ((REQUEST) == DMA_REQUEST_5) ||                                      ((REQUEST) == DMA_REQUEST_6) ||                                      ((REQUEST) == DMA_REQUEST_7) ||                                      ((REQUEST) == DMA_REQUEST_8) ||                                      ((REQUEST) == DMA_REQUEST_9) ||                                      ((REQUEST) == DMA_REQUEST_10) ||                                      ((REQUEST) == DMA_REQUEST_11) ||                                      ((REQUEST) == DMA_REQUEST_12) ||                                      ((REQUEST) == DMA_REQUEST_13) ||                                      ((REQUEST) == DMA_REQUEST_14) ||                                      ((REQUEST) == DMA_REQUEST_15))
S
N#else /* #if STM32L071xx || STM32L072xx || STM32L073xx || STM32L081xx || STM32L082xx || STM32L083xx */
N                                       
N#define DMA_REQUEST_0                     ((uint32_t)0x00000000U)
N#define DMA_REQUEST_1                     ((uint32_t)0x00000001U)
N#define DMA_REQUEST_2                     ((uint32_t)0x00000002U)
N#define DMA_REQUEST_3                     ((uint32_t)0x00000003U)
N#define DMA_REQUEST_4                     ((uint32_t)0x00000004U)
N#define DMA_REQUEST_5                     ((uint32_t)0x00000005U)
N#define DMA_REQUEST_6                     ((uint32_t)0x00000006U)
N#define DMA_REQUEST_7                     ((uint32_t)0x00000007U)
N#define DMA_REQUEST_8                     ((uint32_t)0x00000008U)
N#define DMA_REQUEST_9                     ((uint32_t)0x00000009U)
N#define DMA_REQUEST_11                    ((uint32_t)0x0000000BU)
N
N#define IS_DMA_ALL_REQUEST(REQUEST) (((REQUEST) == DMA_REQUEST_0) || \
N                                     ((REQUEST) == DMA_REQUEST_1) || \
N                                     ((REQUEST) == DMA_REQUEST_2) || \
N                                     ((REQUEST) == DMA_REQUEST_3) || \
N                                     ((REQUEST) == DMA_REQUEST_4) || \
N                                     ((REQUEST) == DMA_REQUEST_5) || \
N                                     ((REQUEST) == DMA_REQUEST_6) || \
N                                     ((REQUEST) == DMA_REQUEST_7) || \
N                                     ((REQUEST) == DMA_REQUEST_8) || \
N                                     ((REQUEST) == DMA_REQUEST_9) || \
N                                     ((REQUEST) == DMA_REQUEST_11))
X#define IS_DMA_ALL_REQUEST(REQUEST) (((REQUEST) == DMA_REQUEST_0) ||                                      ((REQUEST) == DMA_REQUEST_1) ||                                      ((REQUEST) == DMA_REQUEST_2) ||                                      ((REQUEST) == DMA_REQUEST_3) ||                                      ((REQUEST) == DMA_REQUEST_4) ||                                      ((REQUEST) == DMA_REQUEST_5) ||                                      ((REQUEST) == DMA_REQUEST_6) ||                                      ((REQUEST) == DMA_REQUEST_7) ||                                      ((REQUEST) == DMA_REQUEST_8) ||                                      ((REQUEST) == DMA_REQUEST_9) ||                                      ((REQUEST) == DMA_REQUEST_11))
N#endif /* #if defined (STM32L072xx) || defined (STM32L073xx) || defined (STM32L082xx) || defined (STM32L083xx) */
N
N/**
N  * @}
N  */
N
N/** @defgroup DMA_Data_transfer_direction DMA Data Transfer directions
N  * @{
N  */ 
N#define DMA_PERIPH_TO_MEMORY         ((uint32_t)0x00000000U)        /*!< Peripheral to memory direction */
N#define DMA_MEMORY_TO_PERIPH         ((uint32_t)DMA_CCR_DIR)       /*!< Memory to peripheral direction */
N#define DMA_MEMORY_TO_MEMORY         ((uint32_t)(DMA_CCR_MEM2MEM)) /*!< Memory to memory direction     */
N
N#define IS_DMA_DIRECTION(DIRECTION) (((DIRECTION) == DMA_PERIPH_TO_MEMORY ) || \
N                                     ((DIRECTION) == DMA_MEMORY_TO_PERIPH)  || \
N                                     ((DIRECTION) == DMA_MEMORY_TO_MEMORY)) 
X#define IS_DMA_DIRECTION(DIRECTION) (((DIRECTION) == DMA_PERIPH_TO_MEMORY ) ||                                      ((DIRECTION) == DMA_MEMORY_TO_PERIPH)  ||                                      ((DIRECTION) == DMA_MEMORY_TO_MEMORY)) 
N/**
N  * @}
N  */
N
N/** @defgroup DMA_Data_buffer_size DMA Data Buffer Size Check
N  * @{
N  */ 
N#define IS_DMA_BUFFER_SIZE(SIZE) (((SIZE) >= 0x1) && ((SIZE) < 0x10000))
N/**
N  * @}
N  */     
N    
N/** @defgroup DMA_Peripheral_incremented_mode DMA Peripheral Incremented Mode
N  * @{
N  */ 
N#define DMA_PINC_ENABLE        ((uint32_t)DMA_CCR_PINC)  /*!< Peripheral increment mode Enable */
N#define DMA_PINC_DISABLE       ((uint32_t)0x00000000U)    /*!< Peripheral increment mode Disable */
N
N#define IS_DMA_PERIPHERAL_INC_STATE(STATE) (((STATE) == DMA_PINC_ENABLE) || \
N                                            ((STATE) == DMA_PINC_DISABLE))
X#define IS_DMA_PERIPHERAL_INC_STATE(STATE) (((STATE) == DMA_PINC_ENABLE) ||                                             ((STATE) == DMA_PINC_DISABLE))
N/**
N  * @}
N  */ 
N
N/** @defgroup DMA_Memory_incremented_mode DMA Memory Incremented Mode
N  * @{
N  */ 
N#define DMA_MINC_ENABLE         ((uint32_t)DMA_CCR_MINC)  /*!< Memory increment mode Enable  */
N#define DMA_MINC_DISABLE        ((uint32_t)0x00000000U)    /*!< Memory increment mode Disable */
N
N#define IS_DMA_MEMORY_INC_STATE(STATE) (((STATE) == DMA_MINC_ENABLE)  || \
N                                        ((STATE) == DMA_MINC_DISABLE))
X#define IS_DMA_MEMORY_INC_STATE(STATE) (((STATE) == DMA_MINC_ENABLE)  ||                                         ((STATE) == DMA_MINC_DISABLE))
N/**
N  * @}
N  */
N
N/** @defgroup DMA_Peripheral_data_size DMA Peripheral Data Size Alignment
N  * @{
N  */ 
N#define DMA_PDATAALIGN_BYTE          ((uint32_t)0x00000000U)       /*!< Peripheral data alignment : Byte     */
N#define DMA_PDATAALIGN_HALFWORD      ((uint32_t)DMA_CCR_PSIZE_0)  /*!< Peripheral data alignment : HalfWord */
N#define DMA_PDATAALIGN_WORD          ((uint32_t)DMA_CCR_PSIZE_1)  /*!< Peripheral data alignment : Word     */
N
N#define IS_DMA_PERIPHERAL_DATA_SIZE(SIZE) (((SIZE) == DMA_PDATAALIGN_BYTE)     || \
N                                           ((SIZE) == DMA_PDATAALIGN_HALFWORD) || \
N                                           ((SIZE) == DMA_PDATAALIGN_WORD))
X#define IS_DMA_PERIPHERAL_DATA_SIZE(SIZE) (((SIZE) == DMA_PDATAALIGN_BYTE)     ||                                            ((SIZE) == DMA_PDATAALIGN_HALFWORD) ||                                            ((SIZE) == DMA_PDATAALIGN_WORD))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_Memory_data_size DMA Memory Data Size Alignment
N  * @{ 
N  */
N#define DMA_MDATAALIGN_BYTE          ((uint32_t)0x00000000U)       /*!< Memory data alignment : Byte     */
N#define DMA_MDATAALIGN_HALFWORD      ((uint32_t)DMA_CCR_MSIZE_0)  /*!< Memory data alignment : HalfWord */
N#define DMA_MDATAALIGN_WORD          ((uint32_t)DMA_CCR_MSIZE_1)  /*!< Memory data alignment : Word     */
N
N#define IS_DMA_MEMORY_DATA_SIZE(SIZE) (((SIZE) == DMA_MDATAALIGN_BYTE)     || \
N                                       ((SIZE) == DMA_MDATAALIGN_HALFWORD) || \
N                                       ((SIZE) == DMA_MDATAALIGN_WORD ))
X#define IS_DMA_MEMORY_DATA_SIZE(SIZE) (((SIZE) == DMA_MDATAALIGN_BYTE)     ||                                        ((SIZE) == DMA_MDATAALIGN_HALFWORD) ||                                        ((SIZE) == DMA_MDATAALIGN_WORD ))
N/**
N  * @}
N  */
N
N/** @defgroup DMA_mode DMA Mode
N  * @{
N  */ 
N#define DMA_NORMAL         ((uint32_t)0x00000000U)       /*!< Normal Mode                  */
N#define DMA_CIRCULAR       ((uint32_t)DMA_CCR_CIRC)    /*!< Circular Mode                */
N
N#define IS_DMA_MODE(MODE) (((MODE) == DMA_NORMAL )  || \
N                           ((MODE) == DMA_CIRCULAR)) 
X#define IS_DMA_MODE(MODE) (((MODE) == DMA_NORMAL )  ||                            ((MODE) == DMA_CIRCULAR)) 
N/**
N  * @}
N  */
N
N/** @defgroup DMA_Priority_level DMA Priority Level
N  * @{
N  */
N#define DMA_PRIORITY_LOW             ((uint32_t)0x00000000U)    /*!< Priority level : Low       */
N#define DMA_PRIORITY_MEDIUM          ((uint32_t)DMA_CCR_PL_0)  /*!< Priority level : Medium    */
N#define DMA_PRIORITY_HIGH            ((uint32_t)DMA_CCR_PL_1)  /*!< Priority level : High      */
N#define DMA_PRIORITY_VERY_HIGH       ((uint32_t)DMA_CCR_PL)    /*!< Priority level : Very_High */
N
N#define IS_DMA_PRIORITY(PRIORITY) (((PRIORITY) == DMA_PRIORITY_LOW )   || \
N                                   ((PRIORITY) == DMA_PRIORITY_MEDIUM) || \
N                                   ((PRIORITY) == DMA_PRIORITY_HIGH)   || \
N                                   ((PRIORITY) == DMA_PRIORITY_VERY_HIGH)) 
X#define IS_DMA_PRIORITY(PRIORITY) (((PRIORITY) == DMA_PRIORITY_LOW )   ||                                    ((PRIORITY) == DMA_PRIORITY_MEDIUM) ||                                    ((PRIORITY) == DMA_PRIORITY_HIGH)   ||                                    ((PRIORITY) == DMA_PRIORITY_VERY_HIGH)) 
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_interrupt_enable_definitions DMA Interrupt Definitions
N  * @{
N  */
N
N#define DMA_IT_TC                         ((uint32_t)DMA_CCR_TCIE)
N#define DMA_IT_HT                         ((uint32_t)DMA_CCR_HTIE)
N#define DMA_IT_TE                         ((uint32_t)DMA_CCR_TEIE)
N
N/**
N  * @}
N  */
N
N/** @defgroup DMA_flag_definitions DMA Flag Definitions
N  * @{
N  */ 
N
N#define DMA_FLAG_GL1                      ((uint32_t)0x00000001U)
N#define DMA_FLAG_TC1                      ((uint32_t)0x00000002U)
N#define DMA_FLAG_HT1                      ((uint32_t)0x00000004U)
N#define DMA_FLAG_TE1                      ((uint32_t)0x00000008U)
N#define DMA_FLAG_GL2                      ((uint32_t)0x00000010U)
N#define DMA_FLAG_TC2                      ((uint32_t)0x00000020U)
N#define DMA_FLAG_HT2                      ((uint32_t)0x00000040U)
N#define DMA_FLAG_TE2                      ((uint32_t)0x00000080U)
N#define DMA_FLAG_GL3                      ((uint32_t)0x00000100U)
N#define DMA_FLAG_TC3                      ((uint32_t)0x00000200U)
N#define DMA_FLAG_HT3                      ((uint32_t)0x00000400U)
N#define DMA_FLAG_TE3                      ((uint32_t)0x00000800U)
N#define DMA_FLAG_GL4                      ((uint32_t)0x00001000U)
N#define DMA_FLAG_TC4                      ((uint32_t)0x00002000U)
N#define DMA_FLAG_HT4                      ((uint32_t)0x00004000U)
N#define DMA_FLAG_TE4                      ((uint32_t)0x00008000U)
N#define DMA_FLAG_GL5                      ((uint32_t)0x00010000U)
N#define DMA_FLAG_TC5                      ((uint32_t)0x00020000U)
N#define DMA_FLAG_HT5                      ((uint32_t)0x00040000U)
N#define DMA_FLAG_TE5                      ((uint32_t)0x00080000U)
N#define DMA_FLAG_GL6                      ((uint32_t)0x00100000U)
N#define DMA_FLAG_TC6                      ((uint32_t)0x00200000U)
N#define DMA_FLAG_HT6                      ((uint32_t)0x00400000U)
N#define DMA_FLAG_TE6                      ((uint32_t)0x00800000U)
N#define DMA_FLAG_GL7                      ((uint32_t)0x01000000U)
N#define DMA_FLAG_TC7                      ((uint32_t)0x02000000U)
N#define DMA_FLAG_HT7                      ((uint32_t)0x04000000U)
N#define DMA_FLAG_TE7                      ((uint32_t)0x08000000U)
N
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */  
N   
N/* Exported macro ------------------------------------------------------------*/
N
N/** @defgroup DMA_Exported_Macros DMA Exported Macros
N * @{
N */  
N
N/** @brief Reset DMA handle state
N  * @param  __HANDLE__: DMA handle
N  * @retval None
N  */
N#define __HAL_DMA_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_DMA_STATE_RESET)
N
N/**
N  * @brief  Enable the specified DMA Channel.
N  * @param  __HANDLE__: DMA handle
N  * @retval None.
N  */
N#define __HAL_DMA_ENABLE(__HANDLE__)        ((__HANDLE__)->Instance->CCR |=  DMA_CCR_EN)
N
N/**
N  * @brief  Disable the specified DMA Channel.
N  * @param  __HANDLE__: DMA handle
N  * @retval None.
N  */
N#define __HAL_DMA_DISABLE(__HANDLE__)       ((__HANDLE__)->Instance->CCR &=  ~DMA_CCR_EN)
N
N
N/* Interrupt & Flag management */
N
N/**
N  * @brief  Returns the current DMA Channel transfer complete flag.
N  * @param  __HANDLE__: DMA handle
N  * @retval The specified transfer complete flag index.
N  */
N
N#if defined (STM32L011xx) || defined (STM32L021xx)
X#if 0L || 0L
S#define __HAL_DMA_GET_TC_FLAG_INDEX(__HANDLE__) \
S(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TC1 :\
S ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TC2 :\
S ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TC3 :\
S ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TC4 :\
S DMA_FLAG_TC5)
X#define __HAL_DMA_GET_TC_FLAG_INDEX(__HANDLE__) (((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TC1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TC2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TC3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TC4 : DMA_FLAG_TC5)
N#else
N#define __HAL_DMA_GET_TC_FLAG_INDEX(__HANDLE__) \
N(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TC1 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TC2 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TC3 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TC4 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_TC5 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_TC6 :\
N   DMA_FLAG_TC7)    
X#define __HAL_DMA_GET_TC_FLAG_INDEX(__HANDLE__) (((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TC1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TC2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TC3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TC4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_TC5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_TC6 :   DMA_FLAG_TC7)    
N#endif
N/**
N  * @brief  Returns the current DMA Channel half transfer complete flag.
N  * @param  __HANDLE__: DMA handle
N  * @retval The specified half transfer complete flag index.
N  */
N#if defined (STM32L011xx) || defined (STM32L021xx)
X#if 0L || 0L
S#define __HAL_DMA_GET_HT_FLAG_INDEX(__HANDLE__)\
S(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_HT1 :\
S ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_HT2 :\
S ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_HT3 :\
S ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_HT4 :\
S DMA_FLAG_HT5)
X#define __HAL_DMA_GET_HT_FLAG_INDEX(__HANDLE__)(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_HT1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_HT2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_HT3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_HT4 : DMA_FLAG_HT5)
N#else 
N#define __HAL_DMA_GET_HT_FLAG_INDEX(__HANDLE__)\
N(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_HT1 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_HT2 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_HT3 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_HT4 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_HT5 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_HT6 :\
N   DMA_FLAG_HT7)
X#define __HAL_DMA_GET_HT_FLAG_INDEX(__HANDLE__)(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_HT1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_HT2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_HT3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_HT4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_HT5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_HT6 :   DMA_FLAG_HT7)
N#endif
N/**
N  * @brief  Returns the current DMA Channel transfer error flag.
N  * @param  __HANDLE__: DMA handle
N  * @retval The specified transfer error flag index.
N  */
N#if defined (STM32L011xx) || defined (STM32L021xx)
X#if 0L || 0L
S#define __HAL_DMA_GET_TE_FLAG_INDEX(__HANDLE__)\
S(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TE1 :\
S ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TE2 :\
S ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TE3 :\
S ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TE4 :\
S DMA_FLAG_TE5)
X#define __HAL_DMA_GET_TE_FLAG_INDEX(__HANDLE__)(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TE1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TE2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TE3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TE4 : DMA_FLAG_TE5)
N#else   
N#define __HAL_DMA_GET_TE_FLAG_INDEX(__HANDLE__)\
N(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TE1 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TE2 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TE3 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TE4 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_TE5 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_TE6 :\
N   DMA_FLAG_TE7)
X#define __HAL_DMA_GET_TE_FLAG_INDEX(__HANDLE__)(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TE1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TE2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TE3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TE4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_TE5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_TE6 :   DMA_FLAG_TE7)
N#endif
N/**
N  * @brief  Returns the current DMA Channel Global interrupt flag.
N  * @param  __HANDLE__: DMA handle
N  * @retval The specified transfer error flag index.
N  */
N#if defined (STM32L011xx) || defined (STM32L021xx)
X#if 0L || 0L
S#define __HAL_DMA_GET_GI_FLAG_INDEX(__HANDLE__)\
S(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_ISR_GIF1 :\
S ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_ISR_GIF2 :\
S ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_ISR_GIF3 :\
S ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_ISR_GIF4 :\
S   DMA_ISR_GIF5)
X#define __HAL_DMA_GET_GI_FLAG_INDEX(__HANDLE__)(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_ISR_GIF1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_ISR_GIF2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_ISR_GIF3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_ISR_GIF4 :   DMA_ISR_GIF5)
N#else   
N#define __HAL_DMA_GET_GI_FLAG_INDEX(__HANDLE__)\
N(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_ISR_GIF1 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_ISR_GIF2 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_ISR_GIF3 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_ISR_GIF4 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_ISR_GIF5 :\
N ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_ISR_GIF6 :\
N   DMA_ISR_GIF7)
X#define __HAL_DMA_GET_GI_FLAG_INDEX(__HANDLE__)(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_ISR_GIF1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_ISR_GIF2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_ISR_GIF3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_ISR_GIF4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_ISR_GIF5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_ISR_GIF6 :   DMA_ISR_GIF7)
N#endif
N/**
N  * @brief  Get the DMA Channel pending flags.
N  * @param  __HANDLE__: DMA handle
N  * @param  __FLAG__: Get the specified flag.
N  *          This parameter can be any combination of the following values:
N  *            @arg DMA_FLAG_TCIFx:  Transfer complete flag
N  *            @arg DMA_FLAG_HTIFx:  Half transfer complete flag
N  *            @arg DMA_FLAG_TEIFx:  Transfer error flag
N  *            @arg DMA_ISR_GIFx: Global interrupt flag
N  *         Where x can be 0_4, 1_5, 2_6 or 3_7 to select the DMA Channel flag.   
N  * @retval The state of FLAG (SET or RESET).
N  */
N#define __HAL_DMA_GET_FLAG(__HANDLE__, __FLAG__) (DMA1->ISR & (__FLAG__))
N
N/**
N  * @brief  Clears the DMA Channel pending flags.
N  * @param  __HANDLE__: DMA handle
N  * @param  __FLAG__: specifies the flag to clear.
N  *          This parameter can be any combination of the following values:
N  *            @arg DMA_FLAG_TCIFx:  Transfer complete flag
N  *            @arg DMA_FLAG_HTIFx:  Half transfer complete flag
N  *            @arg DMA_FLAG_TEIFx:  Transfer error flag
N  *            @arg DMA_ISR_GIFx: Global interrupt flag
N  *         Where x can be 0_4, 1_5, 2_6 or 3_7 to select the DMA Channel flag.   
N  * @retval None
N  */
N#define __HAL_DMA_CLEAR_FLAG(__HANDLE__, __FLAG__) (DMA1->IFCR = (__FLAG__))
N
N/**
N  * @brief  Enables the specified DMA Channel interrupts.
N  * @param  __HANDLE__: DMA handle
N  * @param __INTERRUPT__: specifies the DMA interrupt sources to be enabled or disabled. 
N  *          This parameter can be any combination of the following values:
N  *            @arg DMA_IT_TC:  Transfer complete interrupt mask
N  *            @arg DMA_IT_HT:  Half transfer complete interrupt mask
N  *            @arg DMA_IT_TE:  Transfer error interrupt mask
N  * @retval None
N  */
N#define __HAL_DMA_ENABLE_IT(__HANDLE__, __INTERRUPT__)   ((__HANDLE__)->Instance->CCR |= (__INTERRUPT__))
N
N/**
N  * @brief  Disables the specified DMA Channel interrupts.
N  * @param  __HANDLE__: DMA handle
N  * @param __INTERRUPT__: specifies the DMA interrupt sources to be enabled or disabled. 
N  *          This parameter can be any combination of the following values:
N  *            @arg DMA_IT_TC:  Transfer complete interrupt mask
N  *            @arg DMA_IT_HT:  Half transfer complete interrupt mask
N  *            @arg DMA_IT_TE:  Transfer error interrupt mask
N  * @retval None
N  */
N#define __HAL_DMA_DISABLE_IT(__HANDLE__, __INTERRUPT__)  ((__HANDLE__)->Instance->CCR &= ~(__INTERRUPT__))
N
N/**
N  * @brief  Checks whether the specified DMA Channel interrupt is enabled or not.
N  * @param  __HANDLE__: DMA handle
N  * @param  __INTERRUPT__: specifies the DMA interrupt source to check.
N  *          This parameter can be one of the following values:
N  *            @arg DMA_IT_TC:  Transfer complete interrupt mask
N  *            @arg DMA_IT_HT:  Half transfer complete interrupt mask
N  *            @arg DMA_IT_TE:  Transfer error interrupt mask
N  * @retval The state of DMA_IT (SET or RESET).
N  */
N#define __HAL_DMA_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__)  (((__HANDLE__)->Instance->CCR & (__INTERRUPT__)))
N
N/**
N  * @brief  Returns the number of remaining data units in the current DMAy Channelx transfer.
N  * @param  __HANDLE__: DMA handle
N  *
N  * @retval The number of remaining data units in the current DMA Channel transfer.
N  */
N#define __HAL_DMA_GET_COUNTER(__HANDLE__) ((__HANDLE__)->Instance->CNDTR)
N
N/**
N  * @}
N  */  
N
N/* Exported functions --------------------------------------------------------*/
N
N/** @defgroup DMA_Exported_Functions DMA Exported Functions
N  * @{
N  */
N
N/** @defgroup DMA_Exported_Functions_Group1 Initialization/de-initialization functions
N  * @{
N  */
N
N/* Initialization and de-initialization functions *****************************/
NHAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma); 
NHAL_StatusTypeDef HAL_DMA_DeInit (DMA_HandleTypeDef *hdma);
N
N/**
N  * @}
N  */
N
N/** @defgroup DMA_Exported_Functions_Group2 I/O operation functions
N  * @{
N  */
N
N/* IO operation functions *****************************************************/
NHAL_StatusTypeDef HAL_DMA_Start (DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
NHAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
NHAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma);
NHAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma);
NHAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout);
Nvoid HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma);
N/**
N  * @}
N  */
N
N/** @defgroup DMA_Exported_Functions_Group3 Peripheral State functions
N  * @{
N  */
N
N/* Peripheral State and Error functions ***************************************/
NHAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma);
Nuint32_t             HAL_DMA_GetError(DMA_HandleTypeDef *hdma);
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */
N/* Define the private group ***********************************/
N/**************************************************************/
N/** @defgroup DMA_Private DMA Private
N  * @{
N  */
N/**
N  * @}
N  */
N/**************************************************************/
N  
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32L0xx_HAL_DMA_H */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
L 179 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\Conf\stm32l0xx_hal_conf.h" 2
N#endif /* HAL_DMA_MODULE_ENABLED */
N   
N#ifdef HAL_CORTEX_MODULE_ENABLED
N  #include "stm32l0xx_hal_cortex.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_cortex.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal_cortex.h
N  * @author  MCD Application Team
N  * @brief   Header file of CORTEX HAL module.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_CORTEX_H
N#define __STM32L0xx_HAL_CORTEX_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx_hal_def.h"
N
N/** @addtogroup STM32L0xx_HAL_Driver
N  * @{
N  */
N
N/** @defgroup CORTEX CORTEX
N  * @{
N  */ 
N/* Exported types ------------------------------------------------------------*/
N
N/** @defgroup CORTEX_Exported_Types CORTEX Exported Types
N  * @{
N  */
N
N#if (__MPU_PRESENT == 1)
X#if (1 == 1)
N/** @defgroup CORTEX_MPU_Region_Initialization_Structure_definition MPU Region Initialization Structure Definition
N  * @{
N  */
Ntypedef struct
N{
N  uint32_t               BaseAddress;           /*!< Specifies the base address of the region to protect.                           */
N
N  uint8_t                Enable;                /*!< Specifies the status of the region.
N                                                     This parameter can be a value of @ref CORTEX_MPU_Region_Enable                 */
N  uint8_t                Number;                /*!< Specifies the number of the region to protect.
N                                                     This parameter can be a value of @ref CORTEX_MPU_Region_Number                 */
N
N  uint8_t                Size;                  /*!< Specifies the size of the region to protect.
N                                                     This parameter can be a value of @ref CORTEX_MPU_Region_Size                   */
N  uint8_t                SubRegionDisable;      /*!< Specifies the number of the subregion protection to disable.
N                                                     This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF    */
N  uint8_t                TypeExtField;          /*!< This parameter is NOT used but is kept to keep API unified through all families*/
N
N  uint8_t                AccessPermission;      /*!< Specifies the region access permission type.
N                                                     This parameter can be a value of @ref CORTEX_MPU_Region_Permission_Attributes  */
N  uint8_t                DisableExec;           /*!< Specifies the instruction access status.
N                                                     This parameter can be a value of @ref CORTEX_MPU_Instruction_Access            */
N  uint8_t                IsShareable;           /*!< Specifies the shareability status of the protected region.
N                                                     This parameter can be a value of @ref CORTEX_MPU_Access_Shareable              */
N  uint8_t                IsCacheable;           /*!< Specifies the cacheable status of the region protected.
N                                                     This parameter can be a value of @ref CORTEX_MPU_Access_Cacheable              */
N  uint8_t                IsBufferable;          /*!< Specifies the bufferable status of the protected region.
N                                                     This parameter can be a value of @ref CORTEX_MPU_Access_Bufferable             */
N}MPU_Region_InitTypeDef;
N/**
N  * @}
N  */
N#endif /* __MPU_PRESENT */
N
N/**
N  * @}
N  */
N
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup CORTEX_Exported_Constants CORTEx Exported Constants
N  * @{
N  */
N
N
N#define IS_NVIC_PREEMPTION_PRIORITY(__PRIORITY__)  ((__PRIORITY__) < 0x4U)
N
N#define IS_NVIC_DEVICE_IRQ(IRQ)                ((IRQ) >= 0x0)
N
N/** @defgroup CORTEX_SysTick_clock_source CORTEX SysTick Clock Source
N  * @{
N  */
N#define SYSTICK_CLKSOURCE_HCLK_DIV8    ((uint32_t)0x00000000U)
N#define SYSTICK_CLKSOURCE_HCLK         ((uint32_t)0x00000004U)
N#define IS_SYSTICK_CLK_SOURCE(__SOURCE__) (((__SOURCE__) == SYSTICK_CLKSOURCE_HCLK) || \
N                                       ((__SOURCE__) == SYSTICK_CLKSOURCE_HCLK_DIV8))
X#define IS_SYSTICK_CLK_SOURCE(__SOURCE__) (((__SOURCE__) == SYSTICK_CLKSOURCE_HCLK) ||                                        ((__SOURCE__) == SYSTICK_CLKSOURCE_HCLK_DIV8))
N/**
N  * @}
N  */
N
N#if (__MPU_PRESENT == 1)
X#if (1 == 1)
N/** @defgroup CORTEX_MPU_HFNMI_PRIVDEF_Control CORTEX MPU HFNMI and PRIVILEGED Access control
N  * @{
N  */
N#define  MPU_HFNMI_PRIVDEF_NONE      ((uint32_t)0x00000000U)
N#define  MPU_HARDFAULT_NMI           ((uint32_t)0x00000002U)
N#define  MPU_PRIVILEGED_DEFAULT      ((uint32_t)0x00000004U)
N#define  MPU_HFNMI_PRIVDEF           ((uint32_t)0x00000006U)
N/**
N  * @}
N  */
N
N/** @defgroup CORTEX_MPU_Region_Enable CORTEX MPU Region Enable
N  * @{
N  */
N#define  MPU_REGION_ENABLE           ((uint8_t)0x01U)
N#define  MPU_REGION_DISABLE          ((uint8_t)0x00U)
N/**
N  * @}
N  */
N
N/** @defgroup CORTEX_MPU_Instruction_Access CORTEX MPU Instruction Access
N  * @{
N  */
N#define  MPU_INSTRUCTION_ACCESS_ENABLE      ((uint8_t)0x00U)
N#define  MPU_INSTRUCTION_ACCESS_DISABLE     ((uint8_t)0x01U)
N/**
N  * @}
N  */
N
N/** @defgroup CORTEX_MPU_Access_Shareable CORTEX MPU Instruction Access Shareable
N  * @{
N  */
N#define  MPU_ACCESS_SHAREABLE        ((uint8_t)0x01U)
N#define  MPU_ACCESS_NOT_SHAREABLE    ((uint8_t)0x00U)
N/**
N  * @}
N  */
N
N/** @defgroup CORTEX_MPU_Access_Cacheable CORTEX MPU Instruction Access Cacheable
N  * @{
N  */
N#define  MPU_ACCESS_CACHEABLE        ((uint8_t)0x01U)
N#define  MPU_ACCESS_NOT_CACHEABLE    ((uint8_t)0x00U)
N/**
N  * @}
N  */
N
N/** @defgroup CORTEX_MPU_Access_Bufferable CORTEX MPU Instruction Access Bufferable
N  * @{
N  */
N#define  MPU_ACCESS_BUFFERABLE       ((uint8_t)0x01U)
N#define  MPU_ACCESS_NOT_BUFFERABLE   ((uint8_t)0x00U)
N/**
N  * @}
N  */
N
N/** @defgroup CORTEX_MPU_Region_Size CORTEX MPU Region Size
N  * @{
N  */
N#define   MPU_REGION_SIZE_32B        ((uint8_t)0x04U)
N#define   MPU_REGION_SIZE_64B        ((uint8_t)0x05U)
N#define   MPU_REGION_SIZE_128B       ((uint8_t)0x06U)
N#define   MPU_REGION_SIZE_256B       ((uint8_t)0x07U)
N#define   MPU_REGION_SIZE_512B       ((uint8_t)0x08U)
N#define   MPU_REGION_SIZE_1KB        ((uint8_t)0x09U)
N#define   MPU_REGION_SIZE_2KB        ((uint8_t)0x0AU)
N#define   MPU_REGION_SIZE_4KB        ((uint8_t)0x0BU)
N#define   MPU_REGION_SIZE_8KB        ((uint8_t)0x0CU)
N#define   MPU_REGION_SIZE_16KB       ((uint8_t)0x0DU)
N#define   MPU_REGION_SIZE_32KB       ((uint8_t)0x0EU)
N#define   MPU_REGION_SIZE_64KB       ((uint8_t)0x0FU)
N#define   MPU_REGION_SIZE_128KB      ((uint8_t)0x10U)
N#define   MPU_REGION_SIZE_256KB      ((uint8_t)0x11U)
N#define   MPU_REGION_SIZE_512KB      ((uint8_t)0x12U)
N#define   MPU_REGION_SIZE_1MB        ((uint8_t)0x13U)
N#define   MPU_REGION_SIZE_2MB        ((uint8_t)0x14U)
N#define   MPU_REGION_SIZE_4MB        ((uint8_t)0x15U)
N#define   MPU_REGION_SIZE_8MB        ((uint8_t)0x16U)
N#define   MPU_REGION_SIZE_16MB       ((uint8_t)0x17U)
N#define   MPU_REGION_SIZE_32MB       ((uint8_t)0x18U)
N#define   MPU_REGION_SIZE_64MB       ((uint8_t)0x19U)
N#define   MPU_REGION_SIZE_128MB      ((uint8_t)0x1AU)
N#define   MPU_REGION_SIZE_256MB      ((uint8_t)0x1BU)
N#define   MPU_REGION_SIZE_512MB      ((uint8_t)0x1CU)
N#define   MPU_REGION_SIZE_1GB        ((uint8_t)0x1DU)
N#define   MPU_REGION_SIZE_2GB        ((uint8_t)0x1EU)
N#define   MPU_REGION_SIZE_4GB        ((uint8_t)0x1FU)
N/**
N  * @}
N  */
N
N/** @defgroup CORTEX_MPU_Region_Permission_Attributes CORTEX MPU Region Permission Attributes
N  * @{
N  */
N#define  MPU_REGION_NO_ACCESS        ((uint8_t)0x00U)
N#define  MPU_REGION_PRIV_RW          ((uint8_t)0x01U)
N#define  MPU_REGION_PRIV_RW_URO      ((uint8_t)0x02U)
N#define  MPU_REGION_FULL_ACCESS      ((uint8_t)0x03U)
N#define  MPU_REGION_PRIV_RO          ((uint8_t)0x05U)
N#define  MPU_REGION_PRIV_RO_URO      ((uint8_t)0x06U)
N/**
N  * @}
N  */
N
N/** @defgroup CORTEX_MPU_Region_Number CORTEX MPU Region Number
N  * @{
N  */
N#define  MPU_REGION_NUMBER0          ((uint8_t)0x00U)
N#define  MPU_REGION_NUMBER1          ((uint8_t)0x01U)
N#define  MPU_REGION_NUMBER2          ((uint8_t)0x02U)
N#define  MPU_REGION_NUMBER3          ((uint8_t)0x03U)
N#define  MPU_REGION_NUMBER4          ((uint8_t)0x04U)
N#define  MPU_REGION_NUMBER5          ((uint8_t)0x05U)
N#define  MPU_REGION_NUMBER6          ((uint8_t)0x06U)
N#define  MPU_REGION_NUMBER7          ((uint8_t)0x07U)
N/**
N  * @}
N  */
N#endif /* __MPU_PRESENT */
N
N
N/**
N  * @}
N  */  
N
N/* Exported functions --------------------------------------------------------*/
N/** @defgroup CORTEX_Exported_Functions CORTEX Exported Functions
N  * @{
N  */
N  
N/** @defgroup CORTEX_Exported_Functions_Group1 Initialization and de-initialization functions 
N *  @brief    Initialization and Configuration functions
N * @{
N  */
Nvoid HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority);
Nvoid HAL_NVIC_EnableIRQ(IRQn_Type IRQn);
Nvoid HAL_NVIC_DisableIRQ(IRQn_Type IRQn);
Nvoid HAL_NVIC_SystemReset(void);
Nuint32_t HAL_SYSTICK_Config(uint32_t TicksNumb);
N#if (__MPU_PRESENT == 1)
X#if (1 == 1)
N/**
N  * @brief  Disable the MPU.
N  * @retval None
N  */
N__STATIC_INLINE void HAL_MPU_Disable(void)
Xstatic __inline void HAL_MPU_Disable(void)
N{
N
N  /*Data Memory Barrier setup */
N  __DMB();
X  do { __schedule_barrier(); __dmb(0xF); __schedule_barrier(); } while (0U);
N  /* Disable the MPU */
N  MPU->CTRL = 0;
X  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL = 0;
N}
N
N/**
N  * @brief  Enable the MPU.
N  * @param  MPU_Control: Specifies the control mode of the MPU during hard fault,
N  *          NMI, FAULTMASK and privileged access to the default memory
N  *          This parameter can be one of the following values:
N  *            @arg MPU_HFNMI_PRIVDEF_NONE
N  *            @arg MPU_HARDFAULT_NMI
N  *            @arg MPU_PRIVILEGED_DEFAULT
N  *            @arg MPU_HFNMI_PRIVDEF
N  * @retval None
N  */
N
N__STATIC_INLINE void HAL_MPU_Enable(uint32_t MPU_Control)
Xstatic __inline void HAL_MPU_Enable(uint32_t MPU_Control)
N{
N  /* Enable the MPU */
N   MPU->CTRL   = MPU_Control | MPU_CTRL_ENABLE_Msk;
X   ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL   = MPU_Control | (1UL );
N  /* Data Synchronization Barrier setup */
N  __DSB();
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);
N  /* Instruction Synchronization Barrier setup */
N  __ISB();
X  do { __schedule_barrier(); __isb(0xF); __schedule_barrier(); } while (0U);
N
N}
N#endif /* __MPU_PRESENT */
N/**
N  * @}
N  */
N  
N/** @defgroup CORTEX_Exported_Functions_Group2 Peripheral Control functions
N *  @brief   Cortex control functions
N * @{
N */
N 
Nuint32_t HAL_NVIC_GetPriority(IRQn_Type IRQn);
Nuint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn);
Nvoid HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn);
Nvoid HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn);
Nvoid HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource);
Nvoid HAL_SYSTICK_IRQHandler(void);
Nvoid HAL_SYSTICK_Callback(void);
N#if (__MPU_PRESENT == 1)
X#if (1 == 1)
Nvoid HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init);
N#endif /* __MPU_PRESENT */
N/**
N  * @}
N  */
N  
N  /**
N  * @}
N  */
N
N/* Private types -------------------------------------------------------------*/
N/* Private variables ---------------------------------------------------------*/
N/* Private constants ---------------------------------------------------------*/
N/* Private macros ------------------------------------------------------------*/
N/** @defgroup CORTEX_Private_Macros CORTEX Private Macros
N  * @{
N  */
N
N#if (__MPU_PRESENT == 1)
X#if (1 == 1)
N#define IS_MPU_REGION_ENABLE(STATE) (((STATE) == MPU_REGION_ENABLE) || \
N                                     ((STATE) == MPU_REGION_DISABLE))
X#define IS_MPU_REGION_ENABLE(STATE) (((STATE) == MPU_REGION_ENABLE) ||                                      ((STATE) == MPU_REGION_DISABLE))
N
N#define IS_MPU_INSTRUCTION_ACCESS(STATE) (((STATE) == MPU_INSTRUCTION_ACCESS_ENABLE) || \
N                                          ((STATE) == MPU_INSTRUCTION_ACCESS_DISABLE))
X#define IS_MPU_INSTRUCTION_ACCESS(STATE) (((STATE) == MPU_INSTRUCTION_ACCESS_ENABLE) ||                                           ((STATE) == MPU_INSTRUCTION_ACCESS_DISABLE))
N
N#define IS_MPU_ACCESS_SHAREABLE(STATE)   (((STATE) == MPU_ACCESS_SHAREABLE) || \
N                                          ((STATE) == MPU_ACCESS_NOT_SHAREABLE))
X#define IS_MPU_ACCESS_SHAREABLE(STATE)   (((STATE) == MPU_ACCESS_SHAREABLE) ||                                           ((STATE) == MPU_ACCESS_NOT_SHAREABLE))
N
N#define IS_MPU_ACCESS_CACHEABLE(STATE)   (((STATE) == MPU_ACCESS_CACHEABLE) || \
N                                          ((STATE) == MPU_ACCESS_NOT_CACHEABLE))
X#define IS_MPU_ACCESS_CACHEABLE(STATE)   (((STATE) == MPU_ACCESS_CACHEABLE) ||                                           ((STATE) == MPU_ACCESS_NOT_CACHEABLE))
N
N#define IS_MPU_ACCESS_BUFFERABLE(STATE)   (((STATE) == MPU_ACCESS_BUFFERABLE) || \
N                                          ((STATE) == MPU_ACCESS_NOT_BUFFERABLE))
X#define IS_MPU_ACCESS_BUFFERABLE(STATE)   (((STATE) == MPU_ACCESS_BUFFERABLE) ||                                           ((STATE) == MPU_ACCESS_NOT_BUFFERABLE))
N
N#define IS_MPU_REGION_PERMISSION_ATTRIBUTE(TYPE) (((TYPE) == MPU_REGION_NO_ACCESS)   || \
N                                                  ((TYPE) == MPU_REGION_PRIV_RW)     || \
N                                                  ((TYPE) == MPU_REGION_PRIV_RW_URO) || \
N                                                  ((TYPE) == MPU_REGION_FULL_ACCESS) || \
N                                                  ((TYPE) == MPU_REGION_PRIV_RO)     || \
N                                                  ((TYPE) == MPU_REGION_PRIV_RO_URO))
X#define IS_MPU_REGION_PERMISSION_ATTRIBUTE(TYPE) (((TYPE) == MPU_REGION_NO_ACCESS)   ||                                                   ((TYPE) == MPU_REGION_PRIV_RW)     ||                                                   ((TYPE) == MPU_REGION_PRIV_RW_URO) ||                                                   ((TYPE) == MPU_REGION_FULL_ACCESS) ||                                                   ((TYPE) == MPU_REGION_PRIV_RO)     ||                                                   ((TYPE) == MPU_REGION_PRIV_RO_URO))
N
N#define IS_MPU_REGION_NUMBER(NUMBER)    (((NUMBER) == MPU_REGION_NUMBER0) || \
N                                         ((NUMBER) == MPU_REGION_NUMBER1) || \
N                                         ((NUMBER) == MPU_REGION_NUMBER2) || \
N                                         ((NUMBER) == MPU_REGION_NUMBER3) || \
N                                         ((NUMBER) == MPU_REGION_NUMBER4) || \
N                                         ((NUMBER) == MPU_REGION_NUMBER5) || \
N                                         ((NUMBER) == MPU_REGION_NUMBER6) || \
N                                         ((NUMBER) == MPU_REGION_NUMBER7))
X#define IS_MPU_REGION_NUMBER(NUMBER)    (((NUMBER) == MPU_REGION_NUMBER0) ||                                          ((NUMBER) == MPU_REGION_NUMBER1) ||                                          ((NUMBER) == MPU_REGION_NUMBER2) ||                                          ((NUMBER) == MPU_REGION_NUMBER3) ||                                          ((NUMBER) == MPU_REGION_NUMBER4) ||                                          ((NUMBER) == MPU_REGION_NUMBER5) ||                                          ((NUMBER) == MPU_REGION_NUMBER6) ||                                          ((NUMBER) == MPU_REGION_NUMBER7))
N
N#define IS_MPU_REGION_SIZE(SIZE)    (((SIZE) == MPU_REGION_SIZE_256B)  || \
N                                     ((SIZE) == MPU_REGION_SIZE_512B)  || \
N                                     ((SIZE) == MPU_REGION_SIZE_1KB)   || \
N                                     ((SIZE) == MPU_REGION_SIZE_2KB)   || \
N                                     ((SIZE) == MPU_REGION_SIZE_4KB)   || \
N                                     ((SIZE) == MPU_REGION_SIZE_8KB)   || \
N                                     ((SIZE) == MPU_REGION_SIZE_16KB)  || \
N                                     ((SIZE) == MPU_REGION_SIZE_32KB)  || \
N                                     ((SIZE) == MPU_REGION_SIZE_64KB)  || \
N                                     ((SIZE) == MPU_REGION_SIZE_128KB) || \
N                                     ((SIZE) == MPU_REGION_SIZE_256KB) || \
N                                     ((SIZE) == MPU_REGION_SIZE_512KB) || \
N                                     ((SIZE) == MPU_REGION_SIZE_1MB)   || \
N                                     ((SIZE) == MPU_REGION_SIZE_2MB)   || \
N                                     ((SIZE) == MPU_REGION_SIZE_4MB)   || \
N                                     ((SIZE) == MPU_REGION_SIZE_8MB)   || \
N                                     ((SIZE) == MPU_REGION_SIZE_16MB)  || \
N                                     ((SIZE) == MPU_REGION_SIZE_32MB)  || \
N                                     ((SIZE) == MPU_REGION_SIZE_64MB)  || \
N                                     ((SIZE) == MPU_REGION_SIZE_128MB) || \
N                                     ((SIZE) == MPU_REGION_SIZE_256MB) || \
N                                     ((SIZE) == MPU_REGION_SIZE_512MB) || \
N                                     ((SIZE) == MPU_REGION_SIZE_1GB)   || \
N                                     ((SIZE) == MPU_REGION_SIZE_2GB)   || \
N                                     ((SIZE) == MPU_REGION_SIZE_4GB))
X#define IS_MPU_REGION_SIZE(SIZE)    (((SIZE) == MPU_REGION_SIZE_256B)  ||                                      ((SIZE) == MPU_REGION_SIZE_512B)  ||                                      ((SIZE) == MPU_REGION_SIZE_1KB)   ||                                      ((SIZE) == MPU_REGION_SIZE_2KB)   ||                                      ((SIZE) == MPU_REGION_SIZE_4KB)   ||                                      ((SIZE) == MPU_REGION_SIZE_8KB)   ||                                      ((SIZE) == MPU_REGION_SIZE_16KB)  ||                                      ((SIZE) == MPU_REGION_SIZE_32KB)  ||                                      ((SIZE) == MPU_REGION_SIZE_64KB)  ||                                      ((SIZE) == MPU_REGION_SIZE_128KB) ||                                      ((SIZE) == MPU_REGION_SIZE_256KB) ||                                      ((SIZE) == MPU_REGION_SIZE_512KB) ||                                      ((SIZE) == MPU_REGION_SIZE_1MB)   ||                                      ((SIZE) == MPU_REGION_SIZE_2MB)   ||                                      ((SIZE) == MPU_REGION_SIZE_4MB)   ||                                      ((SIZE) == MPU_REGION_SIZE_8MB)   ||                                      ((SIZE) == MPU_REGION_SIZE_16MB)  ||                                      ((SIZE) == MPU_REGION_SIZE_32MB)  ||                                      ((SIZE) == MPU_REGION_SIZE_64MB)  ||                                      ((SIZE) == MPU_REGION_SIZE_128MB) ||                                      ((SIZE) == MPU_REGION_SIZE_256MB) ||                                      ((SIZE) == MPU_REGION_SIZE_512MB) ||                                      ((SIZE) == MPU_REGION_SIZE_1GB)   ||                                      ((SIZE) == MPU_REGION_SIZE_2GB)   ||                                      ((SIZE) == MPU_REGION_SIZE_4GB))
N
N#define IS_MPU_SUB_REGION_DISABLE(SUBREGION)  ((SUBREGION) < (uint16_t)0x00FFU)
N#endif /* __MPU_PRESENT */
N
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */
N  
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32L0xx_HAL_CORTEX_H */
N 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
L 183 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\Conf\stm32l0xx_hal_conf.h" 2
N#endif /* HAL_CORTEX_MODULE_ENABLED */
N
N#ifdef HAL_ADC_MODULE_ENABLED
S  #include "stm32l0xx_hal_adc.h"
N#endif /* HAL_ADC_MODULE_ENABLED */
N
N#ifdef HAL_COMP_MODULE_ENABLED
S  #include "stm32l0xx_hal_comp.h"
N#endif /* HAL_COMP_MODULE_ENABLED */
N   
N#ifdef HAL_CRC_MODULE_ENABLED
S  #include "stm32l0xx_hal_crc.h"
N#endif /* HAL_CRC_MODULE_ENABLED */
N
N#ifdef HAL_CRYP_MODULE_ENABLED
S  #include "stm32l0xx_hal_cryp.h"
N#endif /* HAL_CRYP_MODULE_ENABLED */
N
N#ifdef HAL_DAC_MODULE_ENABLED
S  #include "stm32l0xx_hal_dac.h"
N#endif /* HAL_DAC_MODULE_ENABLED */
N
N#ifdef HAL_FIREWALL_MODULE_ENABLED
S  #include "stm32l0xx_hal_firewall.h"
N#endif /* HAL_FIREWALL_MODULE_ENABLED */
N
N#ifdef HAL_FLASH_MODULE_ENABLED
N  #include "stm32l0xx_hal_flash.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_flash.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal_flash.h
N  * @author  MCD Application Team
N  * @brief   Header file of Flash HAL module.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************  
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_FLASH_H
N#define __STM32L0xx_HAL_FLASH_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx_hal_def.h"
N   
N/** @addtogroup STM32L0xx_HAL_Driver
N  * @{
N  */
N
N/** @addtogroup FLASH
N  * @{
N  */
N  
N/** @addtogroup FLASH_Private_Constants
N  * @{
N  */
N#define FLASH_TIMEOUT_VALUE      (50000U) /* 50 s */
N#define FLASH_SIZE_DATA_REGISTER FLASHSIZE_BASE
N/**
N  * @}
N  */
N
N/** @addtogroup FLASH_Private_Macros
N  * @{
N  */
N
N#define IS_FLASH_TYPEPROGRAM(_VALUE_)   ((_VALUE_) == FLASH_TYPEPROGRAM_WORD)
N
N#define IS_FLASH_LATENCY(__LATENCY__) (((__LATENCY__) == FLASH_LATENCY_0) || \
N                                       ((__LATENCY__) == FLASH_LATENCY_1))
X#define IS_FLASH_LATENCY(__LATENCY__) (((__LATENCY__) == FLASH_LATENCY_0) ||                                        ((__LATENCY__) == FLASH_LATENCY_1))
N
N/**
N  * @}
N  */  
N
N/* Exported types ------------------------------------------------------------*/ 
N/** @defgroup FLASH_Exported_Types FLASH Exported Types
N  * @{
N  */  
N
N/**
N  * @brief  FLASH Procedure structure definition
N  */
Ntypedef enum 
N{
N  FLASH_PROC_NONE              = 0, 
N  FLASH_PROC_PAGEERASE         = 1,
N  FLASH_PROC_PROGRAM           = 2,
N} FLASH_ProcedureTypeDef;
N
N/** 
N  * @brief  FLASH handle Structure definition  
N  */
Ntypedef struct
N{
N  __IO FLASH_ProcedureTypeDef ProcedureOnGoing; /*!< Internal variable to indicate which procedure is ongoing or not in IT context */
X  volatile FLASH_ProcedureTypeDef ProcedureOnGoing;  
N  
N  __IO uint32_t               NbPagesToErase;   /*!< Internal variable to save the remaining sectors to erase in IT context*/
X  volatile uint32_t               NbPagesToErase;    
N
N  __IO uint32_t               Address;          /*!< Internal variable to save address selected for program or erase */
X  volatile uint32_t               Address;           
N
N  __IO uint32_t               Page;             /*!< Internal variable to define the current page which is erasing */
X  volatile uint32_t               Page;              
N
N  HAL_LockTypeDef             Lock;             /*!< FLASH locking object                */
N
N  __IO uint32_t               ErrorCode;        /*!< FLASH error code                    
X  volatile uint32_t               ErrorCode;        
N                                                     This parameter can be a value of @ref FLASH_Error_Codes  */
N} FLASH_ProcessTypeDef;
N
N/**
N  * @}
N  */
N
N/* Exported constants --------------------------------------------------------*/
N/** @defgroup FLASH_Exported_Constants FLASH Exported Constants
N  * @{
N  */  
N
N/** @defgroup FLASH_Error_Codes FLASH Error Codes
N  * @{
N  */
N
N#define HAL_FLASH_ERROR_NONE      0x00U  /*!< No error */
N#define HAL_FLASH_ERROR_PGA       0x01U  /*!< Programming alignment error */
N#define HAL_FLASH_ERROR_WRP       0x02U  /*!< Write protection error */
N#define HAL_FLASH_ERROR_OPTV      0x04U  /*!< Option validity error */
N#define HAL_FLASH_ERROR_SIZE      0x08U  /*!<  */
N#define HAL_FLASH_ERROR_RD        0x10U  /*!< Read protected error */
N#define HAL_FLASH_ERROR_FWWERR    0x20U  /*!< FLASH Write or Erase operation aborted */
N#define HAL_FLASH_ERROR_NOTZERO   0x40U  /*!< FLASH Write operation is done in a not-erased region */
N
N/**
N  * @}
N  */
N
N/** @defgroup FLASH_Page_Size FLASH size information
N  * @{
N  */ 
N
N#define FLASH_SIZE                (uint32_t)((*((uint32_t *)FLASHSIZE_BASE)&0xFFFF) * 1024U)
N#define FLASH_PAGE_SIZE           ((uint32_t)128U)  /*!< FLASH Page Size in bytes */
N
N/**
N  * @}
N  */
N
N/** @defgroup FLASH_Type_Program FLASH Type Program
N  * @{
N  */ 
N#define FLASH_TYPEPROGRAM_WORD       ((uint32_t)0x02U)  /*!<Program a word (32-bit) at a specified address.*/
N
N/**
N  * @}
N  */
N
N/** @defgroup FLASH_Latency FLASH Latency
N  * @{
N  */ 
N#define FLASH_LATENCY_0            ((uint32_t)0x00000000U)    /*!< FLASH Zero Latency cycle */
N#define FLASH_LATENCY_1            FLASH_ACR_LATENCY         /*!< FLASH One Latency cycle */
N
N/**
N  * @}
N  */
N
N/** @defgroup FLASH_Interrupts FLASH Interrupts 
N  * @{
N  */
N
N#define FLASH_IT_EOP               FLASH_PECR_EOPIE  /*!< End of programming interrupt source */
N#define FLASH_IT_ERR               FLASH_PECR_ERRIE  /*!< Error interrupt source */
N/**
N  * @}
N  */ 
N
N/** @defgroup FLASH_Flags FLASH Flags 
N  * @{
N  */ 
N
N#define FLASH_FLAG_BSY             FLASH_SR_BSY        /*!< FLASH Busy flag */
N#define FLASH_FLAG_EOP             FLASH_SR_EOP        /*!< FLASH End of Programming flag */
N#define FLASH_FLAG_ENDHV           FLASH_SR_HVOFF      /*!< FLASH End of High Voltage flag */
N#define FLASH_FLAG_READY           FLASH_SR_READY      /*!< FLASH Ready flag after low power mode */
N#define FLASH_FLAG_WRPERR          FLASH_SR_WRPERR     /*!< FLASH Write protected error flag */
N#define FLASH_FLAG_PGAERR          FLASH_SR_PGAERR     /*!< FLASH Programming Alignment error flag */
N#define FLASH_FLAG_SIZERR          FLASH_SR_SIZERR     /*!< FLASH Size error flag  */
N#define FLASH_FLAG_OPTVERR         FLASH_SR_OPTVERR    /*!< FLASH Option Validity error flag  */
N#define FLASH_FLAG_RDERR           FLASH_SR_RDERR      /*!< FLASH Read protected error flag */
N#define FLASH_FLAG_FWWERR          FLASH_SR_FWWERR     /*!< FLASH Write or Errase operation aborted */
N#define FLASH_FLAG_NOTZEROERR      FLASH_SR_NOTZEROERR /*!< FLASH Read protected error flag */
N
N/**
N  * @}
N  */ 
N
N/** @defgroup FLASH_Keys FLASH Keys 
N  * @{
N  */ 
N
N#define FLASH_PDKEY1               ((uint32_t)0x04152637U) /*!< Flash power down key1 */
N#define FLASH_PDKEY2               ((uint32_t)0xFAFBFCFDU) /*!< Flash power down key2: used with FLASH_PDKEY1 
N                                                              to unlock the RUN_PD bit in FLASH_ACR */
N
N#define FLASH_PEKEY1               ((uint32_t)0x89ABCDEFU) /*!< Flash program erase key1 */
N#define FLASH_PEKEY2               ((uint32_t)0x02030405U) /*!< Flash program erase key: used with FLASH_PEKEY2
N                                                               to unlock the write access to the FLASH_PECR register and
N                                                               data EEPROM */
N
N#define FLASH_PRGKEY1              ((uint32_t)0x8C9DAEBFU) /*!< Flash program memory key1 */
N#define FLASH_PRGKEY2              ((uint32_t)0x13141516U) /*!< Flash program memory key2: used with FLASH_PRGKEY2
N                                                               to unlock the program memory */
N
N#define FLASH_OPTKEY1              ((uint32_t)0xFBEAD9C8U) /*!< Flash option key1 */
N#define FLASH_OPTKEY2              ((uint32_t)0x24252627U) /*!< Flash option key2: used with FLASH_OPTKEY1 to
N                                                              unlock the write access to the option byte block */
N/**
N  * @}
N  */
N
N/* CMSIS_Legacy */ 
N  
N#if defined ( __ICCARM__ )
X#if 0L
S#define InterruptType_ACTLR_DISMCYCINT_Msk         IntType_ACTLR_DISMCYCINT_Msk
N#endif
N
N/**
N  * @}
N  */  
N  
N/* Exported macro ------------------------------------------------------------*/
N
N/** @defgroup FLASH_Exported_Macros FLASH Exported Macros
N *  @brief macros to control FLASH features 
N *  @{
N */
N 
N
N/** @defgroup FLASH_Interrupt FLASH Interrupts
N *  @brief macros to handle FLASH interrupts
N * @{
N */ 
N
N/**
N  * @brief  Enable the specified FLASH interrupt.
N  * @param  __INTERRUPT__  FLASH interrupt 
N  *         This parameter can be any combination of the following values:
N  *     @arg @ref FLASH_IT_EOP End of FLASH Operation Interrupt
N  *     @arg @ref FLASH_IT_ERR Error Interrupt    
N  * @retval none
N  */  
N#define __HAL_FLASH_ENABLE_IT(__INTERRUPT__)  SET_BIT((FLASH->PECR), (__INTERRUPT__))
N
N/**
N  * @brief  Disable the specified FLASH interrupt.
N  * @param  __INTERRUPT__  FLASH interrupt 
N  *         This parameter can be any combination of the following values:
N  *     @arg @ref FLASH_IT_EOP End of FLASH Operation Interrupt
N  *     @arg @ref FLASH_IT_ERR Error Interrupt    
N  * @retval none
N  */  
N#define __HAL_FLASH_DISABLE_IT(__INTERRUPT__)  CLEAR_BIT((FLASH->PECR), (uint32_t)(__INTERRUPT__))
N
N/**
N  * @brief  Get the specified FLASH flag status. 
N  * @param  __FLAG__ specifies the FLASH flag to check.
N  *          This parameter can be one of the following values:
N  *            @arg @ref FLASH_FLAG_BSY         FLASH Busy flag
N  *            @arg @ref FLASH_FLAG_EOP         FLASH End of Operation flag 
N  *            @arg @ref FLASH_FLAG_ENDHV       FLASH End of High Voltage flag
N  *            @arg @ref FLASH_FLAG_READY       FLASH Ready flag after low power mode
N  *            @arg @ref FLASH_FLAG_PGAERR      FLASH Programming Alignment error flag
N  *            @arg @ref FLASH_FLAG_SIZERR      FLASH Size error flag
N  *            @arg @ref FLASH_FLAG_OPTVERR     FLASH Option validity error flag (not valid with STM32L031xx/STM32L041xx)
N  *            @arg @ref FLASH_FLAG_RDERR       FLASH Read protected error flag
N  *            @arg @ref FLASH_FLAG_WRPERR      FLASH Write protected error flag 
N  *            @arg @ref FLASH_FLAG_FWWERR      FLASH Fetch While Write Error flag
N  *            @arg @ref FLASH_FLAG_NOTZEROERR  Not Zero area error flag  
N  * @retval The new state of __FLAG__ (SET or RESET).
N  */
N#define __HAL_FLASH_GET_FLAG(__FLAG__)   (((FLASH->SR) & (__FLAG__)) == (__FLAG__))
N
N/**
N  * @brief  Clear the specified FLASH flag.
N  * @param  __FLAG__ specifies the FLASH flags to clear.
N  *          This parameter can be any combination of the following values:
N  *            @arg @ref FLASH_FLAG_EOP         FLASH End of Operation flag 
N  *            @arg @ref FLASH_FLAG_PGAERR      FLASH Programming Alignment error flag
N  *            @arg @ref FLASH_FLAG_SIZERR      FLASH Size error flag
N  *            @arg @ref FLASH_FLAG_OPTVERR     FLASH Option validity error flag (not valid with STM32L031xx/STM32L041xx)
N  *            @arg @ref FLASH_FLAG_RDERR       FLASH Read protected error flag
N  *            @arg @ref FLASH_FLAG_WRPERR      FLASH Write protected error flag 
N  *            @arg @ref FLASH_FLAG_FWWERR      FLASH Fetch While Write Error flag
N  *            @arg @ref FLASH_FLAG_NOTZEROERR  Not Zero area error flag  
N  * @retval none
N  */
N#define __HAL_FLASH_CLEAR_FLAG(__FLAG__)   ((FLASH->SR) = (__FLAG__))
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/* Include FLASH HAL Extended module */
N#include "stm32l0xx_hal_flash_ex.h"  
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_flash_ex.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal_flash_ex.h
N  * @author  MCD Application Team
N  * @brief   Header file of Flash HAL Extended module.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_FLASH_EX_H
N#define __STM32L0xx_HAL_FLASH_EX_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx_hal_def.h"
N
N/** @addtogroup STM32L0xx_HAL_Driver
N  * @{
N  */
N
N/** @addtogroup FLASHEx
N  * @{
N  */ 
N
N/** @addtogroup FLASHEx_Private_Constants
N  * @{
N  */
N#define FLASH_SIZE_DATA_REGISTER   FLASHSIZE_BASE
N
N#define FLASH_NBPAGES_MAX (FLASH_SIZE / FLASH_PAGE_SIZE)
N
N#define WRP_MASK_LOW                 (0x0000FFFFU)
N#define WRP_MASK_HIGH                (0xFFFF0000U)
N
N/**
N  * @}
N  */  
N
N/** @addtogroup FLASHEx_Private_Macros
N  * @{
N  */
N
N#define IS_FLASH_TYPEERASE(__VALUE__)   (((__VALUE__) == FLASH_TYPEERASE_PAGES))
N
N#define IS_OPTIONBYTE(__VALUE__) (((__VALUE__) <= (OPTIONBYTE_WRP  | OPTIONBYTE_RDP | \
N                                                  OPTIONBYTE_USER | OPTIONBYTE_BOR | OPTIONBYTE_BOOT_BIT1)))
X#define IS_OPTIONBYTE(__VALUE__) (((__VALUE__) <= (OPTIONBYTE_WRP  | OPTIONBYTE_RDP |                                                   OPTIONBYTE_USER | OPTIONBYTE_BOR | OPTIONBYTE_BOOT_BIT1)))
N
N#define IS_WRPSTATE(__VALUE__)          (((__VALUE__) == OB_WRPSTATE_DISABLE) || \
N                                         ((__VALUE__) == OB_WRPSTATE_ENABLE))
X#define IS_WRPSTATE(__VALUE__)          (((__VALUE__) == OB_WRPSTATE_DISABLE) ||                                          ((__VALUE__) == OB_WRPSTATE_ENABLE))
N                                         
N#define IS_OB_WRP(__PAGE__)             (((__PAGE__) != 0x0000000U))
N
N#define IS_OB_RDP(__LEVEL__)            (((__LEVEL__) == OB_RDP_LEVEL_0) ||\
N                                         ((__LEVEL__) == OB_RDP_LEVEL_1) ||\
N                                         ((__LEVEL__) == OB_RDP_LEVEL_2))
X#define IS_OB_RDP(__LEVEL__)            (((__LEVEL__) == OB_RDP_LEVEL_0) ||                                         ((__LEVEL__) == OB_RDP_LEVEL_1) ||                                         ((__LEVEL__) == OB_RDP_LEVEL_2))
N                                         
N#define IS_OB_BOR_LEVEL(__LEVEL__)      (((__LEVEL__) == OB_BOR_OFF)     || \
N                                         ((__LEVEL__) == OB_BOR_LEVEL1)  || \
N                                         ((__LEVEL__) == OB_BOR_LEVEL2)  || \
N                                         ((__LEVEL__) == OB_BOR_LEVEL3)  || \
N                                         ((__LEVEL__) == OB_BOR_LEVEL4)  || \
N                                         ((__LEVEL__) == OB_BOR_LEVEL5))
X#define IS_OB_BOR_LEVEL(__LEVEL__)      (((__LEVEL__) == OB_BOR_OFF)     ||                                          ((__LEVEL__) == OB_BOR_LEVEL1)  ||                                          ((__LEVEL__) == OB_BOR_LEVEL2)  ||                                          ((__LEVEL__) == OB_BOR_LEVEL3)  ||                                          ((__LEVEL__) == OB_BOR_LEVEL4)  ||                                          ((__LEVEL__) == OB_BOR_LEVEL5))
N
N#define IS_OB_IWDG_SOURCE(__SOURCE__)   (((__SOURCE__) == OB_IWDG_SW) || ((__SOURCE__) == OB_IWDG_HW))
N
N#define IS_OB_STOP_SOURCE(__SOURCE__)   (((__SOURCE__) == OB_STOP_NORST) || ((__SOURCE__) == OB_STOP_RST))
N
N#define IS_OB_STDBY_SOURCE(__SOURCE__)  (((__SOURCE__) == OB_STDBY_NORST) || ((__SOURCE__) == OB_STDBY_RST))
N
N#if defined(FLASH_OPTR_WPRMOD) && defined(FLASH_OPTR_BFB2)
X#if 1L && 0L
S    
S#define IS_OBEX(__VALUE__)              (((__VALUE__) == OPTIONBYTE_PCROP) || ((__VALUE__) == OPTIONBYTE_BOOTCONFIG))
S
N#elif defined(FLASH_OPTR_WPRMOD) && !defined(FLASH_OPTR_BFB2)
X#elif 1L && !0L
N
N#define IS_OBEX(__VALUE__)              ((__VALUE__) == OPTIONBYTE_PCROP)
N
N#elif !defined(FLASH_OPTR_WPRMOD) && defined(FLASH_OPTR_BFB2)
S
S#define IS_OBEX(__VALUE__)              ((__VALUE__) == OPTIONBYTE_BOOTCONFIG)
S
N#endif /* FLASH_OPTR_WPRMOD && FLASH_OPTR_BFB2 */
N
N#if defined(FLASH_OPTR_WPRMOD)
X#if 1L
N
N#define IS_PCROPSTATE(__VALUE__)        (((__VALUE__) == OB_PCROP_STATE_DISABLE) || \
N                                         ((__VALUE__) == OB_PCROP_STATE_ENABLE))  
X#define IS_PCROPSTATE(__VALUE__)        (((__VALUE__) == OB_PCROP_STATE_DISABLE) ||                                          ((__VALUE__) == OB_PCROP_STATE_ENABLE))  
N
N#define IS_OB_PCROP(__PAGE__)           (((__PAGE__) != 0x0000000U))
N#endif /* FLASH_OPTR_WPRMOD */
N
N#if defined(FLASH_OPTR_BFB2)
X#if 0L
S    
S#define IS_OB_BOOT_BANK(__BANK__)     (((__BANK__) == OB_BOOT_BANK2) || ((__BANK__) == OB_BOOT_BANK1))
S
N#endif /* FLASH_OPTR_BFB2 */
N
N#define IS_OB_BOOT1(__BOOT_BIT1__)  (((__BOOT_BIT1__) == OB_BOOT_BIT1_RESET) || ((__BOOT_BIT1__) == OB_BOOT_BIT1_SET))
N#define IS_TYPEPROGRAMDATA(__VALUE__)   (((__VALUE__) == FLASH_TYPEPROGRAMDATA_BYTE)     || \
N                                         ((__VALUE__) == FLASH_TYPEPROGRAMDATA_HALFWORD) || \
N                                         ((__VALUE__) == FLASH_TYPEPROGRAMDATA_WORD))
X#define IS_TYPEPROGRAMDATA(__VALUE__)   (((__VALUE__) == FLASH_TYPEPROGRAMDATA_BYTE)     ||                                          ((__VALUE__) == FLASH_TYPEPROGRAMDATA_HALFWORD) ||                                          ((__VALUE__) == FLASH_TYPEPROGRAMDATA_WORD))
N
N
N/** @defgroup FLASHEx_Address FLASHEx Address
N  * @{
N  */
N
N#if defined (STM32L071xx) || defined (STM32L072xx) || defined (STM32L073xx) || defined (STM32L081xx) || defined (STM32L082xx) || defined (STM32L083xx)
X#if 0L || 0L || 0L || 0L || 0L || 0L
S 
S#define IS_FLASH_DATA_ADDRESS(__ADDRESS__)          (((__ADDRESS__) >= DATA_EEPROM_BASE) && ((__ADDRESS__) <= DATA_EEPROM_BANK2_END))
S#define IS_FLASH_DATA_BANK1_ADDRESS(__ADDRESS__)    (((__ADDRESS__) >= DATA_EEPROM_BASE) && ((__ADDRESS__) <= DATA_EEPROM_BANK1_END))
S#define IS_FLASH_DATA_BANK2_ADDRESS(__ADDRESS__)    (((__ADDRESS__) >= DATA_EEPROM_BANK2_BASE) && ((__ADDRESS__) <= DATA_EEPROM_BANK2_END))
S#define IS_FLASH_PROGRAM_ADDRESS(__ADDRESS__)       (((__ADDRESS__) >= FLASH_BASE)       && ((__ADDRESS__) <  (FLASH_BASE + FLASH_SIZE)))
S#define IS_FLASH_PROGRAM_BANK1_ADDRESS(__ADDRESS__) (((__ADDRESS__) >= FLASH_BASE)       && ((__ADDRESS__) <  (FLASH_BASE + (FLASH_SIZE >> 1))))
S#define IS_FLASH_PROGRAM_BANK2_ADDRESS(__ADDRESS__) (((__ADDRESS__) >= FLASH_BANK2_BASE) && ((__ADDRESS__) <  (FLASH_BASE + FLASH_SIZE)))
N#else
N#define IS_FLASH_DATA_ADDRESS(__ADDRESS__)          (((__ADDRESS__) >= DATA_EEPROM_BASE) && ((__ADDRESS__) <= DATA_EEPROM_END))
N#define IS_FLASH_PROGRAM_ADDRESS(__ADDRESS__)       (((__ADDRESS__) >= FLASH_BASE)       && ((__ADDRESS__) <  (FLASH_BASE + FLASH_SIZE)))
N#endif
N
N#define IS_NBPAGES(__PAGES__) (((__PAGES__) >= 1) && ((__PAGES__) <= FLASH_NBPAGES_MAX)) 
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */  
N/* Exported types ------------------------------------------------------------*/ 
N
N/** @defgroup FLASHEx_Exported_Types FLASHEx Exported Types
N  * @{
N  */  
N
N/**
N  * @brief  FLASH Erase structure definition
N  */
Ntypedef struct
N{
N  uint32_t TypeErase;   /*!< TypeErase: Page Erase only.
N                             This parameter can be a value of @ref FLASHEx_Type_Erase */
N
N  uint32_t PageAddress; /*!< PageAddress: Initial FLASH address to be erased
N                             This parameter must be a value belonging to FLASH Programm address (depending on the devices)  */
N  
N  uint32_t NbPages;     /*!< NbPages: Number of pages to be erased.
N                             This parameter must be a value between 1 and (max number of pages - value of Initial page)*/
N  
N} FLASH_EraseInitTypeDef;
N
N/**
N  * @brief  FLASH Option Bytes PROGRAM structure definition
N  */
Ntypedef struct
N{
N  uint32_t  OptionType;       /*!< OptionType: Option byte to be configured.
N                                   This parameter can be a value of @ref FLASHEx_Option_Type */
N
N  uint32_t  WRPState;         /*!< WRPState: Write protection activation or deactivation.
N                                   This parameter can be a value of @ref FLASHEx_WRP_State */
N
N  uint32_t WRPSector;         /*!< WRPSector: This bitfield specifies the sector (s) which are write protected.
N                                   This parameter can be a combination of @ref FLASHEx_Option_Bytes_Write_Protection */
N
N#if defined(STM32L071xx) || defined(STM32L072xx) || defined(STM32L073xx) || defined(STM32L081xx) || defined(STM32L082xx) || defined(STM32L083xx)  
X#if 0L || 0L || 0L || 0L || 0L || 0L  
S  uint32_t WRPSector2;        /*!< WRPSector2 : This bitfield specifies the sector(s) upper Sector31 which are write protected.
S                                   This parameter can be a combination of @ref FLASHEx_Option_Bytes_Write_Protection2 */
N#endif
N
N  uint8_t   RDPLevel;         /*!< RDPLevel: Set the read protection level.
N                                   This parameter can be a value of @ref FLASHEx_Option_Bytes_Read_Protection */
N
N  uint8_t   BORLevel;         /*!< BORLevel: Set the BOR Level.
N                                   This parameter can be a value of @ref FLASHEx_Option_Bytes_BOR_Level */
N                                
N  uint8_t   USERConfig;       /*!< USERConfig: Program the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.
N                                   This parameter can be a combination of @ref FLASHEx_Option_Bytes_IWatchdog, 
N                                   @ref FLASHEx_Option_Bytes_nRST_STOP and @ref FLASHEx_Option_Bytes_nRST_STDBY*/
N
N  uint8_t BOOTBit1Config;     /*!< BOOT1Config: Together with input pad Boot0, this bit selects the boot source, flash, ram or system memory
N                                   This parameter can be a value of @ref FLASHEx_Option_Bytes_BOOTBit1 */
N} FLASH_OBProgramInitTypeDef;
N
N#if defined(FLASH_OPTR_WPRMOD) || defined(FLASH_OPTR_BFB2)
X#if 1L || 0L
N/**
N  * @brief  FLASH Advanced Option Bytes Program structure definition
N  */
Ntypedef struct
N{
N  uint32_t OptionType;          /*!< OptionType: Option byte to be configured for extension .
N                                     This parameter can be a value of @ref FLASHEx_OptionAdv_Type */
N
N#if defined(FLASH_OPTR_WPRMOD)
X#if 1L
N  uint32_t PCROPState;          /*!< PCROPState: PCROP activation or deactivation.
N                                     This parameter can be a value of @ref FLASHEx_PCROP_State */
N
N  uint32_t PCROPSector;        /*!< PCROPSector : This bitfield specifies the sector(s) which are read/write protected.
N                                    This parameter can be a combination of @ref FLASHEx_Option_Bytes_PC_ReadWrite_Protection */
N
N#if defined (STM32L071xx) || defined (STM32L072xx) || defined (STM32L073xx) || defined (STM32L081xx) || defined (STM32L082xx) || defined (STM32L083xx)
X#if 0L || 0L || 0L || 0L || 0L || 0L
S  uint32_t PCROPSector2;       /*!< PCROPSector : This bitfield specifies the sector(s) upper Sector31 which are read/write protected.
S                                    This parameter can be a combination of @ref FLASHEx_Option_Bytes_PC_ReadWrite_Protection2 */
N#endif /* STM32L071xx || STM32L072xx || STM32L073xx || STM32L081xx || STM32L082xx || STM32L083xx */
N#endif /* FLASH_OPTR_WPRMOD */
N 
N#if defined(FLASH_OPTR_BFB2)
X#if 0L
S  uint16_t BootConfig;          /*!< BootConfig: specifies Option bytes for boot config
S                                     This parameter can be a value of @ref FLASHEx_Option_Bytes_BOOT */
N#endif /* FLASH_OPTR_BFB2*/
N} FLASH_AdvOBProgramInitTypeDef;
N
N/**
N  * @}
N  */
N#endif /* FLASH_OPTR_WPRMOD || FLASH_OPTR_BFB2 */
N
N/* Exported constants --------------------------------------------------------*/
N
N
N/** @defgroup FLASHEx_Exported_Constants FLASHEx Exported Constants
N  * @{
N  */  
N
N/** @defgroup FLASHEx_Type_Erase FLASHEx_Type_Erase
N  * @{
N  */
N#define FLASH_TYPEERASE_PAGES           ((uint32_t)0x00U)  /*!<Page erase only*/
N
N/**
N  * @}
N  */
N
N/** @defgroup FLASHEx_Option_Type FLASHEx Option Type
N  * @{
N  */
N#define OPTIONBYTE_WRP            ((uint32_t)0x01U)  /*!<WRP option byte configuration*/
N#define OPTIONBYTE_RDP            ((uint32_t)0x02U)  /*!<RDP option byte configuration*/
N#define OPTIONBYTE_USER           ((uint32_t)0x04U)  /*!<USER option byte configuration*/
N#define OPTIONBYTE_BOR            ((uint32_t)0x08U)  /*!<BOR option byte configuration*/
N#define OPTIONBYTE_BOOT_BIT1      ((uint32_t)0x10U)  /*!< BOOT PIN1 option byte configuration*/
N
N/**
N  * @}
N  */
N
N/** @defgroup FLASHEx_WRP_State FLASHEx WRP State
N  * @{
N  */
N#define OB_WRPSTATE_DISABLE        ((uint32_t)0x00U)  /*!<Disable the write protection of the desired sectors*/
N#define OB_WRPSTATE_ENABLE         ((uint32_t)0x01U)  /*!<Enable the write protection of the desired sectors*/
N
N/**
N  * @}
N  */
N
N#if defined (STM32L011xx) || defined (STM32L021xx) || defined (STM32L031xx) || defined (STM32L041xx) 
X#if 0L || 0L || 0L || 0L 
S/** @defgroup FLASHEx_Option_Bytes_Write_Protection FLASH Option Bytes Write Protection
S  * @{
S  */
S#define OB_WRP_Pages0to31          ((uint32_t)0x00000001U) /* Write protection of Sector0 */
S#define OB_WRP_Pages32to63         ((uint32_t)0x00000002U) /* Write protection of Sector1 */
S#define OB_WRP_Pages64to95         ((uint32_t)0x00000004U) /* Write protection of Sector2 */
S#define OB_WRP_Pages96to127        ((uint32_t)0x00000008U) /* Write protection of Sector3 */
S#define OB_WRP_Pages128to159       ((uint32_t)0x00000010U) /* Write protection of Sector4 */
S#define OB_WRP_Pages160to191       ((uint32_t)0x00000020U) /* Write protection of Sector5 */
S#define OB_WRP_Pages192to223       ((uint32_t)0x00000040U) /* Write protection of Sector6 */
S#define OB_WRP_Pages224to255       ((uint32_t)0x00000080U) /* Write protection of Sector7 */
S#define OB_WRP_AllPages            ((uint32_t)0x000000FFU) /*!< Write protection of all Sectors */
S/**
S  * @}
S  */
N#elif defined (STM32L051xx) || defined (STM32L052xx) || defined (STM32L053xx) || defined (STM32L061xx) || defined (STM32L062xx) || defined (STM32L063xx)
X#elif 0L || 0L || 1L || 0L || 0L || 0L
N/** @defgroup FLASHEx_Option_Bytes_Write_Protection FLASH Option Bytes Write Protection
N  * @{
N  */
N#define OB_WRP_Pages0to31          ((uint32_t)0x00000001U) /* Write protection of Sector0 */
N#define OB_WRP_Pages32to63         ((uint32_t)0x00000002U) /* Write protection of Sector1 */
N#define OB_WRP_Pages64to95         ((uint32_t)0x00000004U) /* Write protection of Sector2 */
N#define OB_WRP_Pages96to127        ((uint32_t)0x00000008U) /* Write protection of Sector3 */
N#define OB_WRP_Pages128to159       ((uint32_t)0x00000010U) /* Write protection of Sector4 */
N#define OB_WRP_Pages160to191       ((uint32_t)0x00000020U) /* Write protection of Sector5 */
N#define OB_WRP_Pages192to223       ((uint32_t)0x00000040U) /* Write protection of Sector6 */
N#define OB_WRP_Pages224to255       ((uint32_t)0x00000080U) /* Write protection of Sector7 */
N#define OB_WRP_Pages256to287       ((uint32_t)0x00000100U) /* Write protection of Sector8 */
N#define OB_WRP_Pages288to319       ((uint32_t)0x00000200U) /* Write protection of Sector9 */
N#define OB_WRP_Pages320to351       ((uint32_t)0x00000400U) /* Write protection of Sector10 */
N#define OB_WRP_Pages352to383       ((uint32_t)0x00000800U) /* Write protection of Sector11 */
N#define OB_WRP_Pages384to415       ((uint32_t)0x00001000U) /* Write protection of Sector12 */
N#define OB_WRP_Pages416to447       ((uint32_t)0x00002000U) /* Write protection of Sector13 */
N#define OB_WRP_Pages448to479       ((uint32_t)0x00004000U) /* Write protection of Sector14 */
N#define OB_WRP_Pages480to511       ((uint32_t)0x00008000U) /* Write protection of Sector15 */
N#define OB_WRP_AllPages            ((uint32_t)0x0000FFFFU) /*!< Write protection of all Sectors */
N/**
N  * @}
N  */
N
N#elif defined (STM32L071xx) || defined (STM32L072xx) || defined (STM32L073xx) || defined (STM32L081xx) || defined (STM32L082xx) || defined (STM32L083xx)
S/** @defgroup FLASHEx_Option_Bytes_Write_Protection FLASH Option Bytes Write ProtectionP
S  * @{
S  */
S#define OB_WRP_Pages0to31          ((uint32_t)0x00000001U) /* Write protection of Sector0 */
S#define OB_WRP_Pages32to63         ((uint32_t)0x00000002U) /* Write protection of Sector1 */
S#define OB_WRP_Pages64to95         ((uint32_t)0x00000004U) /* Write protection of Sector2 */
S#define OB_WRP_Pages96to127        ((uint32_t)0x00000008U) /* Write protection of Sector3 */
S#define OB_WRP_Pages128to159       ((uint32_t)0x00000010U) /* Write protection of Sector4 */
S#define OB_WRP_Pages160to191       ((uint32_t)0x00000020U) /* Write protection of Sector5 */
S#define OB_WRP_Pages192to223       ((uint32_t)0x00000040U) /* Write protection of Sector6 */
S#define OB_WRP_Pages224to255       ((uint32_t)0x00000080U) /* Write protection of Sector7 */
S#define OB_WRP_Pages256to287       ((uint32_t)0x00000100U) /* Write protection of Sector8 */
S#define OB_WRP_Pages288to319       ((uint32_t)0x00000200U) /* Write protection of Sector9 */
S#define OB_WRP_Pages320to351       ((uint32_t)0x00000400U) /* Write protection of Sector10 */
S#define OB_WRP_Pages352to383       ((uint32_t)0x00000800U) /* Write protection of Sector11 */
S#define OB_WRP_Pages384to415       ((uint32_t)0x00001000U) /* Write protection of Sector12 */
S#define OB_WRP_Pages416to447       ((uint32_t)0x00002000U) /* Write protection of Sector13 */
S#define OB_WRP_Pages448to479       ((uint32_t)0x00004000U) /* Write protection of Sector14 */
S#define OB_WRP_Pages480to511       ((uint32_t)0x00008000U) /* Write protection of Sector15 */
S#define OB_WRP_Pages512to543       ((uint32_t)0x00010000U) /* Write protection of Sector16 */
S#define OB_WRP_Pages544to575       ((uint32_t)0x00020000U) /* Write protection of Sector17 */
S#define OB_WRP_Pages576to607       ((uint32_t)0x00040000U) /* Write protection of Sector18 */
S#define OB_WRP_Pages608to639       ((uint32_t)0x00080000U) /* Write protection of Sector19 */
S#define OB_WRP_Pages640to671       ((uint32_t)0x00100000U) /* Write protection of Sector20 */
S#define OB_WRP_Pages672to703       ((uint32_t)0x00200000U) /* Write protection of Sector21 */
S#define OB_WRP_Pages704to735       ((uint32_t)0x00400000U) /* Write protection of Sector22 */
S#define OB_WRP_Pages736to767       ((uint32_t)0x00800000U) /* Write protection of Sector23 */
S#define OB_WRP_Pages768to799       ((uint32_t)0x01000000U) /* Write protection of Sector24 */
S#define OB_WRP_Pages800to831       ((uint32_t)0x02000000U) /* Write protection of Sector25 */
S#define OB_WRP_Pages832to863       ((uint32_t)0x04000000U) /* Write protection of Sector26 */
S#define OB_WRP_Pages864to895       ((uint32_t)0x08000000U) /* Write protection of Sector27 */
S#define OB_WRP_Pages896to927       ((uint32_t)0x10000000U) /* Write protection of Sector28 */
S#define OB_WRP_Pages928to959       ((uint32_t)0x20000000U) /* Write protection of Sector29 */
S#define OB_WRP_Pages960to991       ((uint32_t)0x40000000U) /* Write protection of Sector30 */
S#define OB_WRP_Pages992to1023      ((uint32_t)0x80000000U) /* Write protection of Sector31 */
S#define OB_WRP_AllPages            ((uint32_t)0xFFFFFFFFU) /*!<Write  protection of all Sectors */
S/**
S  * @}
S  */
S
S/** @defgroup FLASHEx_Option_Bytes_Write_Protection2 FLASH Option Bytes Write Protection
S  * @{
S  */
S#define OB_WRP2_Pages1024to1055    ((uint32_t)0x00000001U) /* Write protection of Sector32 */
S#define OB_WRP2_Pages1056to1087    ((uint32_t)0x00000002U) /* Write protection of Sector33 */
S#define OB_WRP2_Pages1088to1119    ((uint32_t)0x00000004U) /* Write protection of Sector34 */
S#define OB_WRP2_Pages1120to1151    ((uint32_t)0x00000008U) /* Write protection of Sector35 */
S#define OB_WRP2_Pages1152to1183    ((uint32_t)0x00000010U) /* Write protection of Sector36 */
S#define OB_WRP2_Pages1184to1215    ((uint32_t)0x00000020U) /* Write protection of Sector37 */
S#define OB_WRP2_Pages1216to1247    ((uint32_t)0x00000040U) /* Write protection of Sector38 */
S#define OB_WRP2_Pages1248to1279    ((uint32_t)0x00000080U) /* Write protection of Sector39 */
S#define OB_WRP2_Pages1280to1311    ((uint32_t)0x00000100U) /* Write protection of Sector40 */
S#define OB_WRP2_Pages1312to1343    ((uint32_t)0x00000200U) /* Write protection of Sector41 */
S#define OB_WRP2_Pages1344to1375    ((uint32_t)0x00000400U) /* Write protection of Sector42 */
S#define OB_WRP2_Pages1376to1407    ((uint32_t)0x00000800U) /* Write protection of Sector43 */
S#define OB_WRP2_Pages1408to1439    ((uint32_t)0x00001000U) /* Write protection of Sector44 */
S#define OB_WRP2_Pages1440to1471    ((uint32_t)0x00002000U) /* Write protection of Sector45 */
S#define OB_WRP2_Pages1472to1503    ((uint32_t)0x00004000U) /* Write protection of Sector46 */
S#define OB_WRP2_Pages1504to1535    ((uint32_t)0x00008000U) /* Write protection of Sector47 */
S#define OB_WRP2_AllPages           ((uint32_t)0x0000FFFFU) /*!< Write protection of all Sectors WRP2 */
S/**
S  * @}
S  */
N#endif /* STM32L071xx || STM32L072xx || (STM32L073xx) || (STM32L081xx) || (STM32L082xx) || (STM32L083xx) */
N
N/** @defgroup FLASHEx_Option_Bytes_Read_Protection FLASHEx Option Bytes Read Protection
N  * @{
N  */ 
N#define OB_RDP_LEVEL_0         ((uint8_t)0xAAU)
N#define OB_RDP_LEVEL_1         ((uint8_t)0xBBU)
N#define OB_RDP_LEVEL_2         ((uint8_t)0xCCU) /* Warning: When enabling read protection level 2 
N                                                it is no more possible to go back to level 1 or 0 */
N
N/**
N  * @}
N  */ 
N
N/** @defgroup FLASHEx_Option_Bytes_BOR_Level FLASHEx Option Bytes BOR Level
N  * @{
N  */
N
N#define OB_BOR_OFF       ((uint8_t)0x00U) /*!< BOR is disabled at power down, the reset is asserted when the VDD 
N                                              power supply reaches the PDR(Power Down Reset) threshold (1.5V) */
N#define OB_BOR_LEVEL1    ((uint8_t)0x08U) /*!< BOR Reset threshold levels for 1.7V - 1.8V VDD power supply    */
N#define OB_BOR_LEVEL2    ((uint8_t)0x09U) /*!< BOR Reset threshold levels for 1.9V - 2.0V VDD power supply    */
N#define OB_BOR_LEVEL3    ((uint8_t)0x0AU) /*!< BOR Reset threshold levels for 2.3V - 2.4V VDD power supply    */
N#define OB_BOR_LEVEL4    ((uint8_t)0x0BU) /*!< BOR Reset threshold levels for 2.55V - 2.65V VDD power supply  */
N#define OB_BOR_LEVEL5    ((uint8_t)0x0CU) /*!< BOR Reset threshold levels for 2.8V - 2.9V VDD power supply    */
N
N/**
N  * @}
N  */
N  
N/** @defgroup FLASHEx_Option_Bytes_IWatchdog FLASHEx Option Bytes IWatchdog
N  * @{
N  */
N
N#define OB_IWDG_SW                     ((uint8_t)0x10U)  /*!< Software WDG selected */
N#define OB_IWDG_HW                     ((uint8_t)0x00U)  /*!< Hardware WDG selected */
N
N/**
N  * @}
N  */
N
N/** @defgroup FLASHEx_Option_Bytes_nRST_STOP FLASHEx Option Bytes nRST_STOP
N  * @{
N  */
N
N#define OB_STOP_NORST                  ((uint8_t)0x20U) /*!< No reset generated when entering in STOP */
N#define OB_STOP_RST                    ((uint8_t)0x00U) /*!< Reset generated when entering in STOP */
N/**
N  * @}
N  */
N
N/** @defgroup FLASHEx_Option_Bytes_nRST_STDBY FLASHEx Option Bytes nRST_STDBY
N  * @{
N  */
N
N#define OB_STDBY_NORST                 ((uint8_t)0x40U) /*!< No reset generated when entering in STANDBY */
N#define OB_STDBY_RST                   ((uint8_t)0x00U) /*!< Reset generated when entering in STANDBY */
N
N/**
N  * @}
N  */
N
N#if defined(FLASH_OPTR_WPRMOD)
X#if 1L
N    
N/** @defgroup FLASHEx_OptionAdv_Type FLASHEx Option Advanced Type
N  * @{
N  */ 
N  
N#define OPTIONBYTE_PCROP        ((uint32_t)0x01U)  /*!<PCROP option byte configuration*/
N
N/**
N  * @}
N  */
N
N#endif /* FLASH_OPTR_WPRMOD */
N
N#if defined(FLASH_OPTR_BFB2)
X#if 0L
S
S/** @defgroup FLASHEx_OptionAdv_Type FLASHEx Option Advanced Type
S  * @{
S  */ 
S  
S#define OPTIONBYTE_BOOTCONFIG   ((uint32_t)0x02U)  /*!<BOOTConfig option byte configuration*/
S
S/**
S  * @}
S  */
S
N#endif /* FLASH_OPTR_BFB2 */
N
N#if defined(FLASH_OPTR_WPRMOD)
X#if 1L
N
N/** @defgroup  FLASHEx_PCROP_State FLASHEx PCROP State
N  * @{
N  */
N#define OB_PCROP_STATE_DISABLE        ((uint32_t)0x00U)  /*!<Disable PCROP for selected sectors */
N#define OB_PCROP_STATE_ENABLE         ((uint32_t)0x01U)  /*!<Enable PCROP for selected sectors */
N    
N/**
N  * @}
N  */
N
N/** @defgroup  FLASHEx_Selection_Protection_Mode FLASHEx Selection Protection Mode
N  * @{
N  */
N#define OB_PCROP_DESELECTED     ((uint16_t)0x0000U)            /*!< Disabled PCROP, nWPRi bits used for Write Protection on sector i */
N#define OB_PCROP_SELECTED       ((uint16_t)FLASH_OPTR_WPRMOD)  /*!< Enable PCROP, nWPRi bits used for PCRoP Protection on sector i   */
N
N/**
N  * @}
N  */
N#endif /* FLASH_OPTR_WPRMOD */
N
N#if defined (STM32L011xx) || defined (STM32L021xx) ||  defined (STM32L031xx) || defined (STM32L041xx) 
X#if 0L || 0L ||  0L || 0L 
S/** @defgroup FLASHEx_Option_Bytes_PC_ReadWrite_Protection FLASHEx Option Bytes PC Read/Write Protection
S  * @{
S  */
S#define OB_PCROP_Pages0to31          ((uint32_t)0x00000001U) /* PC Read/Write protection of Sector0 */
S#define OB_PCROP_Pages32to63         ((uint32_t)0x00000002U) /* PC Read/Write protection of Sector1 */
S#define OB_PCROP_Pages64to95         ((uint32_t)0x00000004U) /* PC Read/Write protection of Sector2 */
S#define OB_PCROP_Pages96to127        ((uint32_t)0x00000008U) /* PC Read/Write protection of Sector3 */
S#define OB_PCROP_Pages128to159       ((uint32_t)0x00000010U) /* PC Read/Write protection of Sector4 */
S#define OB_PCROP_Pages160to191       ((uint32_t)0x00000020U) /* PC Read/Write protection of Sector5 */
S#define OB_PCROP_Pages192to223       ((uint32_t)0x00000040U) /* PC Read/Write protection of Sector6 */
S#define OB_PCROP_Pages224to255       ((uint32_t)0x00000080U) /* PC Read/Write protection of Sector7 */
S#define OB_PCROP_AllPages            ((uint32_t)0x000000FFU) /*!< PC Read/Write protection of all Sectors */
S/**
S  * @}
S  */
N#elif defined (STM32L051xx) || defined (STM32L052xx) || defined (STM32L053xx) || defined (STM32L061xx) || defined (STM32L062xx) || defined (STM32L063xx)
X#elif 0L || 0L || 1L || 0L || 0L || 0L
N/** @defgroup FLASHEx_Option_Bytes_PC_ReadWrite_Protection FLASHEx Option Bytes PC Read/Write Protection
N  * @{
N  */
N#define OB_PCROP_Pages0to31          ((uint32_t)0x00000001U) /* PC Read/Write protection of Sector0 */
N#define OB_PCROP_Pages32to63         ((uint32_t)0x00000002U) /* PC Read/Write protection of Sector1 */
N#define OB_PCROP_Pages64to95         ((uint32_t)0x00000004U) /* PC Read/Write protection of Sector2 */
N#define OB_PCROP_Pages96to127        ((uint32_t)0x00000008U) /* PC Read/Write protection of Sector3 */
N#define OB_PCROP_Pages128to159       ((uint32_t)0x00000010U) /* PC Read/Write protection of Sector4 */
N#define OB_PCROP_Pages160to191       ((uint32_t)0x00000020U) /* PC Read/Write protection of Sector5 */
N#define OB_PCROP_Pages192to223       ((uint32_t)0x00000040U) /* PC Read/Write protection of Sector6 */
N#define OB_PCROP_Pages224to255       ((uint32_t)0x00000080U) /* PC Read/Write protection of Sector7 */
N#define OB_PCROP_Pages256to287       ((uint32_t)0x00000100U) /* PC Read/Write protection of Sector8 */
N#define OB_PCROP_Pages288to319       ((uint32_t)0x00000200U) /* PC Read/Write protection of Sector9 */
N#define OB_PCROP_Pages320to351       ((uint32_t)0x00000400U) /* PC Read/Write protection of Sector10 */
N#define OB_PCROP_Pages352to383       ((uint32_t)0x00000800U) /* PC Read/Write protection of Sector11 */
N#define OB_PCROP_Pages384to415       ((uint32_t)0x00001000U) /* PC Read/Write protection of Sector12 */
N#define OB_PCROP_Pages416to447       ((uint32_t)0x00002000U) /* PC Read/Write protection of Sector13 */
N#define OB_PCROP_Pages448to479       ((uint32_t)0x00004000U) /* PC Read/Write protection of Sector14 */
N#define OB_PCROP_Pages480to511       ((uint32_t)0x00008000U) /* PC Read/Write protection of Sector15 */
N#define OB_PCROP_AllPages            ((uint32_t)0x0000FFFFU) /*!< PC Read/Write protection of all Sectors */
N/**
N  * @}
N  */
N#endif
N
N#if defined (STM32L071xx) || defined (STM32L072xx) || defined (STM32L073xx) || defined (STM32L081xx) || defined (STM32L082xx) || defined (STM32L083xx)
X#if 0L || 0L || 0L || 0L || 0L || 0L
S/** @defgroup FLASHEx_Option_Bytes_PC_ReadWrite_Protection FLASH Option Bytes PC Read/Write Protection
S  * @{
S  */
S#define OB_PCROP_Pages0to31          ((uint32_t)0x00000001U) /* PC Read/Write protection of Sector0 */
S#define OB_PCROP_Pages32to63         ((uint32_t)0x00000002U) /* PC Read/Write protection of Sector1 */
S#define OB_PCROP_Pages64to95         ((uint32_t)0x00000004U) /* PC Read/Write protection of Sector2 */
S#define OB_PCROP_Pages96to127        ((uint32_t)0x00000008U) /* PC Read/Write protection of Sector3 */
S#define OB_PCROP_Pages128to159       ((uint32_t)0x00000010U) /* PC Read/Write protection of Sector4 */
S#define OB_PCROP_Pages160to191       ((uint32_t)0x00000020U) /* PC Read/Write protection of Sector5 */
S#define OB_PCROP_Pages192to223       ((uint32_t)0x00000040U) /* PC Read/Write protection of Sector6 */
S#define OB_PCROP_Pages224to255       ((uint32_t)0x00000080U) /* PC Read/Write protection of Sector7 */
S#define OB_PCROP_Pages256to287       ((uint32_t)0x00000100U) /* PC Read/Write protection of Sector8 */
S#define OB_PCROP_Pages288to319       ((uint32_t)0x00000200U) /* PC Read/Write protection of Sector9 */
S#define OB_PCROP_Pages320to351       ((uint32_t)0x00000400U) /* PC Read/Write protection of Sector10 */
S#define OB_PCROP_Pages352to383       ((uint32_t)0x00000800U) /* PC Read/Write protection of Sector11 */
S#define OB_PCROP_Pages384to415       ((uint32_t)0x00001000U) /* PC Read/Write protection of Sector12 */
S#define OB_PCROP_Pages416to447       ((uint32_t)0x00002000U) /* PC Read/Write protection of Sector13 */
S#define OB_PCROP_Pages448to479       ((uint32_t)0x00004000U) /* PC Read/Write protection of Sector14 */
S#define OB_PCROP_Pages480to511       ((uint32_t)0x00008000U) /* PC Read/Write protection of Sector15 */
S#define OB_PCROP_Pages512to543       ((uint32_t)0x00010000U) /* PC Read/Write protection of Sector16 */
S#define OB_PCROP_Pages544to575       ((uint32_t)0x00020000U) /* PC Read/Write protection of Sector17 */
S#define OB_PCROP_Pages576to607       ((uint32_t)0x00040000U) /* PC Read/Write protection of Sector18 */
S#define OB_PCROP_Pages608to639       ((uint32_t)0x00080000U) /* PC Read/Write protection of Sector19 */
S#define OB_PCROP_Pages640to671       ((uint32_t)0x00100000U) /* PC Read/Write protection of Sector20 */
S#define OB_PCROP_Pages672to703       ((uint32_t)0x00200000U) /* PC Read/Write protection of Sector21 */
S#define OB_PCROP_Pages704to735       ((uint32_t)0x00400000U) /* PC Read/Write protection of Sector22 */
S#define OB_PCROP_Pages736to767       ((uint32_t)0x00800000U) /* PC Read/Write protection of Sector23 */
S#define OB_PCROP_Pages768to799       ((uint32_t)0x01000000U) /* PC Read/Write protection of Sector24 */
S#define OB_PCROP_Pages800to831       ((uint32_t)0x02000000U) /* PC Read/Write protection of Sector25 */
S#define OB_PCROP_Pages832to863       ((uint32_t)0x04000000U) /* PC Read/Write protection of Sector26 */
S#define OB_PCROP_Pages864to895       ((uint32_t)0x08000000U) /* PC Read/Write protection of Sector27 */
S#define OB_PCROP_Pages896to927       ((uint32_t)0x10000000U) /* PC Read/Write protection of Sector28 */
S#define OB_PCROP_Pages928to959       ((uint32_t)0x20000000U) /* PC Read/Write protection of Sector29 */
S#define OB_PCROP_Pages960to991       ((uint32_t)0x40000000U) /* PC Read/Write protection of Sector30 */
S#define OB_PCROP_Pages992to1023      ((uint32_t)0x80000000U) /* PC Read/Write protection of Sector31 */
S#define OB_PCROP_AllPages            ((uint32_t)0xFFFFFFFFU) /*!<PC Read/Write  protection of all Sectors */
S/**
S  * @}
S  */
S
S/** @defgroup FLASHEx_Option_Bytes_PC_ReadWrite_Protection2 FLASH Option Bytes PC Read/Write Protection (Sector 2)
S  * @{
S  */
S#define OB_PCROP2_Pages1024to1055    ((uint32_t)0x00000001U) /* PC Read/Write protection of Sector32 */
S#define OB_PCROP2_Pages1056to1087    ((uint32_t)0x00000002U) /* PC Read/Write protection of Sector33 */
S#define OB_PCROP2_Pages1088to1119    ((uint32_t)0x00000004U) /* PC Read/Write protection of Sector34 */
S#define OB_PCROP2_Pages1120to1151    ((uint32_t)0x00000008U) /* PC Read/Write protection of Sector35 */
S#define OB_PCROP2_Pages1152to1183    ((uint32_t)0x00000010U) /* PC Read/Write protection of Sector36 */
S#define OB_PCROP2_Pages1184to1215    ((uint32_t)0x00000020U) /* PC Read/Write protection of Sector37 */
S#define OB_PCROP2_Pages1216to1247    ((uint32_t)0x00000040U) /* PC Read/Write protection of Sector38 */
S#define OB_PCROP2_Pages1248to1279    ((uint32_t)0x00000080U) /* PC Read/Write protection of Sector39 */
S#define OB_PCROP2_Pages1280to1311    ((uint32_t)0x00000100U) /* PC Read/Write protection of Sector40 */
S#define OB_PCROP2_Pages1312to1343    ((uint32_t)0x00000200U) /* PC Read/Write protection of Sector41 */
S#define OB_PCROP2_Pages1344to1375    ((uint32_t)0x00000400U) /* PC Read/Write protection of Sector42 */
S#define OB_PCROP2_Pages1376to1407    ((uint32_t)0x00000800U) /* PC Read/Write protection of Sector43 */
S#define OB_PCROP2_Pages1408to1439    ((uint32_t)0x00001000U) /* PC Read/Write protection of Sector44 */
S#define OB_PCROP2_Pages1440to1471    ((uint32_t)0x00002000U) /* PC Read/Write protection of Sector45 */
S#define OB_PCROP2_Pages1472to1503    ((uint32_t)0x00004000U) /* PC Read/Write protection of Sector46 */
S#define OB_PCROP2_Pages1504to1535    ((uint32_t)0x00008000U) /* PC Read/Write protection of Sector47 */
S#define OB_PCROP2_AllPages           ((uint32_t)0x0000FFFFU) /*!< PC Read/Write protection of all Sectors PCROP2 */
S/**
S  * @}
S  */
N#endif /* STM32L071xx || STM32L072xx || STM32L073xx || STM32L081xx || STM32L082xx || STM32L083xx */
N
N/** @defgroup FLASHEx_Option_Bytes_BOOTBit1 FLASH Option Bytes BOOT Bit1 Setup
N  * @{
N  */
N#define OB_BOOT_BIT1_RESET      (uint8_t)(0x00U) /*!< BOOT Bit 1 Reset */
N#define OB_BOOT_BIT1_SET        (uint8_t)(0x01U) /*!< BOOT Bit 1 Set */
N/**
N  * @}
N  */
N
N/** @defgroup FLASHEx_Type_Program_Data FLASHEx Type Program Data
N  * @{
N  */
N#define FLASH_TYPEPROGRAMDATA_BYTE            ((uint32_t)0x00U)  /*!<Program byte (8-bit) at a specified address.*/
N#define FLASH_TYPEPROGRAMDATA_HALFWORD        ((uint32_t)0x01U)  /*!<Program a half-word (16-bit) at a specified address.*/
N#define FLASH_TYPEPROGRAMDATA_WORD            ((uint32_t)0x02U)  /*!<Program a word (32-bit) at a specified address.*/
N
N/**
N  * @}
N  */
N
N#if defined(FLASH_OPTR_BFB2)
X#if 0L
S    
S/** @defgroup FLASHEx_Option_Bytes_BOOT FLASHEx Option Bytes BOOT
S  * @{
S  */
S
S#define OB_BOOT_BANK1                 ((uint8_t)0x00U) /*!<  At startup, if boot pin 0 and BOOT1 bit are set in boot from user Flash position
S                                                            and this parameter is selected the device will boot from Bank 1 (Default)*/
S#define OB_BOOT_BANK2                 ((uint8_t)(FLASH_OPTR_BFB2 >> 16)) /*!< At startup, if boot pin 0 and BOOT1 bit are set in boot from user Flash position
S                                                            and this parameter is selected the device will boot from Bank 2 */
S
S/**
S  * @}
S  */
N#endif /* FLASH_OPTR_BFB2 */
N
N/**
N  * @}
N  */
N
N/* Exported macro ------------------------------------------------------------*/
N
N/** @defgroup FLASHEx_Exported_Macros FLASHEx Exported Macros
N *  @{
N */
N 
N/**
N  * @brief  Set the FLASH Latency.
N  * @param  __LATENCY__ FLASH Latency
N  *          This parameter can be one of the following values:
N  *            @arg @ref FLASH_LATENCY_0  FLASH Zero Latency cycle
N  *            @arg @ref FLASH_LATENCY_1  FLASH One Latency cycle
N  * @retval none
N  */ 
N#define __HAL_FLASH_SET_LATENCY(__LATENCY__) \
N                  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(__LATENCY__))
X#define __HAL_FLASH_SET_LATENCY(__LATENCY__)                   MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(__LATENCY__))
N
N/**
N  * @brief  Get the FLASH Latency.
N  * @retval FLASH Latency                   
N  *          This parameter can be one of the following values:
N  *            @arg @ref FLASH_LATENCY_0  FLASH Zero Latency cycle
N  *            @arg @ref FLASH_LATENCY_1  FLASH One Latency cycle
N  */ 
N#define __HAL_FLASH_GET_LATENCY()     (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))
N
N/**
N  * @brief  Enable the FLASH prefetch buffer.
N  * @retval none
N  */ 
N#define __HAL_FLASH_PREFETCH_BUFFER_ENABLE()      SET_BIT((FLASH->ACR), FLASH_ACR_PRFTEN)
N
N/**
N  * @brief  Disable the FLASH prefetch buffer.
N  * @retval none
N  */ 
N#define __HAL_FLASH_PREFETCH_BUFFER_DISABLE()     CLEAR_BIT((FLASH->ACR), FLASH_ACR_PRFTEN)
N
N/**
N  * @brief  Enable the FLASH Buffer cache.
N  * @retval none
N  */ 
N#define __HAL_FLASH_BUFFER_CACHE_ENABLE()         SET_BIT((FLASH->ACR), FLASH_ACR_DISAB_BUF)
N
N/**
N  * @brief  Disable the FLASH Buffer cache.
N  * @retval none
N  */ 
N#define __HAL_FLASH_BUFFER_CACHE_DISABLE()        CLEAR_BIT((FLASH->ACR), FLASH_ACR_DISAB_BUF)
N
N/**
N  * @brief  Enable the FLASH preread buffer.
N  * @retval none
N  */ 
N#define __HAL_FLASH_PREREAD_BUFFER_ENABLE()       SET_BIT((FLASH->ACR), FLASH_ACR_PRE_READ)
N
N/**
N  * @brief  Disable the FLASH preread buffer.
N  * @retval none
N  */ 
N#define __HAL_FLASH_PREREAD_BUFFER_DISABLE()      CLEAR_BIT((FLASH->ACR), FLASH_ACR_PRE_READ)
N
N/**
N  * @brief  Enable the FLASH power down during Sleep mode
N  * @retval none
N  */ 
N#define __HAL_FLASH_SLEEP_POWERDOWN_ENABLE()      SET_BIT(FLASH->ACR, FLASH_ACR_SLEEP_PD)
N
N/**
N  * @brief  Disable the FLASH power down during Sleep mode
N  * @retval none
N  */ 
N#define __HAL_FLASH_SLEEP_POWERDOWN_DISABLE()     CLEAR_BIT(FLASH->ACR, FLASH_ACR_SLEEP_PD)
N
N/**
N  * @brief  Enable the Flash Run power down mode.
N  * @note   Writing this bit  to 0 this bit, automatically the keys are
N  *         loss and a new unlock sequence is necessary to re-write it to 1.
N  */
N#define __HAL_FLASH_POWER_DOWN_ENABLE() do { FLASH->PDKEYR = FLASH_PDKEY1;    \
N                                             FLASH->PDKEYR = FLASH_PDKEY2;    \
N                                             SET_BIT((FLASH->ACR), FLASH_ACR_RUN_PD);  \
N                                           } while (0)
X#define __HAL_FLASH_POWER_DOWN_ENABLE() do { FLASH->PDKEYR = FLASH_PDKEY1;                                                 FLASH->PDKEYR = FLASH_PDKEY2;                                                 SET_BIT((FLASH->ACR), FLASH_ACR_RUN_PD);                                             } while (0)
N
N/**
N  * @brief  Disable the Flash Run power down mode.
N  * @note   Writing this bit to 0 this bit, automatically the keys are
N  *         loss and a new unlock sequence is necessary to re-write it to 1.
N  */
N#define __HAL_FLASH_POWER_DOWN_DISABLE() do { FLASH->PDKEYR = FLASH_PDKEY1;    \
N                                              FLASH->PDKEYR = FLASH_PDKEY2;    \
N                                             CLEAR_BIT((FLASH->ACR), FLASH_ACR_RUN_PD);  \
N                                            } while (0)
X#define __HAL_FLASH_POWER_DOWN_DISABLE() do { FLASH->PDKEYR = FLASH_PDKEY1;                                                  FLASH->PDKEYR = FLASH_PDKEY2;                                                 CLEAR_BIT((FLASH->ACR), FLASH_ACR_RUN_PD);                                              } while (0)
N                                            
N/**
N  * @}
N  */
N
N/* Exported functions --------------------------------------------------------*/
N
N/** @addtogroup FLASHEx_Exported_Functions
N  * @{
N  */
N
N/** @addtogroup FLASHEx_Exported_Functions_Group1
N  * @{
N  */
N
NHAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError);
NHAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit);
N
N/**
N  * @}
N  */
N
N/** @addtogroup FLASHEx_Exported_Functions_Group2
N  * @{
N  */
N
NHAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit);
Nvoid              HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit);
N
N#if defined(FLASH_OPTR_WPRMOD) || defined(FLASH_OPTR_BFB2)
X#if 1L || 0L
N    
NHAL_StatusTypeDef HAL_FLASHEx_AdvOBProgram (FLASH_AdvOBProgramInitTypeDef *pAdvOBInit);
Nvoid              HAL_FLASHEx_AdvOBGetConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit);
N
N#endif /* FLASH_OPTR_WPRMOD || FLASH_OPTR_BFB2 */
N
N#if defined(FLASH_OPTR_WPRMOD)
X#if 1L
N
NHAL_StatusTypeDef HAL_FLASHEx_OB_SelectPCROP(void);
NHAL_StatusTypeDef HAL_FLASHEx_OB_DeSelectPCROP(void);
N
N#endif /* FLASH_OPTR_WPRMOD */
N
N/**
N  * @}
N  */
N
N/** @addtogroup FLASHEx_Exported_Functions_Group3
N  * @{
N  */
N
NHAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void);
NHAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void);
N
NHAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address);
NHAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data);
Nvoid              HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram(void);
Nvoid              HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram(void);
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32L0xx_HAL_FLASH_EX_H */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 309 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_flash.h" 2
N#include "stm32l0xx_hal_flash_ramfunc.h"  
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_flash_ramfunc.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal_flash_ramfunc.h
N  * @author  MCD Application Team
N  * @brief   Header file of FLASH RAMFUNC driver.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_FLASH_RAMFUNC_H
N#define __STM32L0xx_FLASH_RAMFUNC_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx_hal_def.h"
N
N/** @addtogroup STM32L0xx_HAL_Driver
N  * @{
N  */
N
N/** @addtogroup FLASH_RAMFUNC
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/ 
N
N
N/* Exported functions --------------------------------------------------------*/
N
N/** @addtogroup FLASH_RAMFUNC_Exported_Functions
N  * @{
N  */
N
N/*
N  * @brief  FLASH memory functions that should be executed from internal SRAM.
N  *         These functions are defined inside the "stm32l0xx_hal_flash_ramfunc.c"
N  *         file.
N  */
N  
N/** @addtogroup FLASH_RAMFUNC_Exported_Functions_Group1
N  * @{
N  */
N
N__RAM_FUNC HAL_FLASHEx_EnableRunPowerDown(void);
XHAL_StatusTypeDef HAL_FLASHEx_EnableRunPowerDown(void);
N__RAM_FUNC HAL_FLASHEx_DisableRunPowerDown(void);
XHAL_StatusTypeDef HAL_FLASHEx_DisableRunPowerDown(void);
N
N/**
N  * @}
N  */ 
N
N/** @addtogroup FLASH_RAMFUNC_Exported_Functions_Group2
N  * @{
N  */
N
N#if defined(FLASH_PECR_PARALLBANK)
X#if 0L
S
S__RAM_FUNC HAL_FLASHEx_EraseParallelPage(uint32_t Page_Address1, uint32_t Page_Address2);
S__RAM_FUNC HAL_FLASHEx_ProgramParallelHalfPage(uint32_t Address1, uint32_t* pBuffer1, uint32_t Address2, uint32_t* pBuffer2);
S
N#endif /* FLASH_PECR_PARALLBANK */
N
N__RAM_FUNC HAL_FLASHEx_HalfPageProgram(uint32_t Address, uint32_t* pBuffer);
XHAL_StatusTypeDef HAL_FLASHEx_HalfPageProgram(uint32_t Address, uint32_t* pBuffer);
N
N/**
N  * @}
N  */ 
N
N/** @addtogroup FLASH_RAMFUNC_Exported_Functions_Group3
N  * @{
N  */
N__RAM_FUNC  HAL_FLASHEx_GetError(uint32_t *Error);
XHAL_StatusTypeDef  HAL_FLASHEx_GetError(uint32_t *Error);
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32L0xx_FLASH_RAMFUNC_H */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 310 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_flash.h" 2
N
N/* Exported functions --------------------------------------------------------*/
N/** @addtogroup FLASH_Exported_Functions
N  * @{
N  */
N  
N/** @addtogroup FLASH_Exported_Functions_Group1
N  * @{
N  */
N/* IO operation functions *****************************************************/
NHAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data);
NHAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint32_t Data);
N
N/* FLASH IRQ handler function */
Nvoid       HAL_FLASH_IRQHandler(void);
N/* Callbacks in non blocking modes */ 
Nvoid       HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue);
Nvoid       HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue);
N
N/**
N  * @}
N  */
N
N/** @addtogroup FLASH_Exported_Functions_Group2
N  * @{
N  */
N/* Peripheral Control functions ***********************************************/
NHAL_StatusTypeDef HAL_FLASH_Unlock(void);
NHAL_StatusTypeDef HAL_FLASH_Lock(void);
NHAL_StatusTypeDef HAL_FLASH_OB_Unlock(void);
NHAL_StatusTypeDef HAL_FLASH_OB_Lock(void);
NHAL_StatusTypeDef HAL_FLASH_OB_Launch(void);
N
N/**
N  * @}
N  */
N
N/** @addtogroup FLASH_Exported_Functions_Group3
N  * @{
N  */
N/* Peripheral State and Error functions ***************************************/
Nuint32_t HAL_FLASH_GetError(void);
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Private function -------------------------------------------------*/
N/** @addtogroup FLASH_Private_Functions
N * @{
N */
NHAL_StatusTypeDef       FLASH_WaitForLastOperation(uint32_t Timeout);
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32L0xx_HAL_FLASH_H */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
L 211 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\Conf\stm32l0xx_hal_conf.h" 2
N#endif /* HAL_FLASH_MODULE_ENABLED */
N 
N#ifdef HAL_I2C_MODULE_ENABLED
S #include "stm32l0xx_hal_i2c.h"
N#endif /* HAL_I2C_MODULE_ENABLED */
N
N#ifdef HAL_I2S_MODULE_ENABLED
S #include "stm32l0xx_hal_i2s.h"
N#endif /* HAL_I2S_MODULE_ENABLED */
N
N#ifdef HAL_IWDG_MODULE_ENABLED
S #include "stm32l0xx_hal_iwdg.h"
N#endif /* HAL_IWDG_MODULE_ENABLED */
N
N#ifdef HAL_LCD_MODULE_ENABLED
S #include "stm32l0xx_hal_lcd.h"
N#endif /* HAL_LCD_MODULE_ENABLED */
N
N#ifdef HAL_LPTIM_MODULE_ENABLED
S#include "stm32l0xx_hal_lptim.h"
N#endif /* HAL_LPTIM_MODULE_ENABLED */
N   
N#ifdef HAL_PWR_MODULE_ENABLED
N #include "stm32l0xx_hal_pwr.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_pwr.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal_pwr.h
N  * @author  MCD Application Team
N  * @brief   Header file of PWR HAL module.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_PWR_H
N#define __STM32L0xx_HAL_PWR_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx_hal_def.h"
N
N/** @addtogroup STM32L0xx_HAL_Driver
N  * @{
N  */
N
N/** @defgroup PWR PWR
N  * @{
N  */
N
N/** @defgroup PWR_Exported_Types PWR Exported Types
N  * @{
N  */ 
N
N/**
N  * @brief  PWR PVD configuration structure definition
N  */
Ntypedef struct
N{
N  uint32_t PVDLevel;   /*!< PVDLevel: Specifies the PVD detection level.
N                            This parameter can be a value of @ref PWR_PVD_detection_level */
N
N  uint32_t Mode;       /*!< Mode: Specifies the operating mode for the selected pins.
N                            This parameter can be a value of @ref PWR_PVD_Mode */
N}PWR_PVDTypeDef;
N
N/**
N  * @}
N  */
N
N/** @addtogroup PWR_Private
N  * @{
N  */ 
N
N#define PWR_EXTI_LINE_PVD      EXTI_FTSR_TR16  /*!< External interrupt line 16 Connected to the PVD EXTI Line */
N
N/**
N  * @}
N  */
N
N/** @defgroup PWR_Exported_Constants PWR Exported Constants
N  * @{
N  */
N
N/** @defgroup PWR_register_alias_address PWR Register alias address
N  * @{
N  */
N#define PWR_WAKEUP_PIN1                PWR_CSR_EWUP1
N#define PWR_WAKEUP_PIN2                PWR_CSR_EWUP2
N#if defined (STM32L011xx) || defined (STM32L021xx) ||  defined (STM32L031xx) || defined (STM32L041xx) || defined (STM32L071xx) || \
N    defined (STM32L072xx) || defined (STM32L073xx) || defined (STM32L081xx) || defined (STM32L082xx) || defined (STM32L083xx)
X#if 0L || 0L ||  0L || 0L || 0L ||     0L || 0L || 0L || 0L || 0L
S#define PWR_WAKEUP_PIN3                PWR_CSR_EWUP3
N#endif
N/**
N  * @}
N  */
N
N/** @defgroup PWR_PVD_detection_level PVD detection level
N  * @{
N  */
N#define PWR_PVDLEVEL_0                 PWR_CR_PLS_LEV0
N#define PWR_PVDLEVEL_1                 PWR_CR_PLS_LEV1
N#define PWR_PVDLEVEL_2                 PWR_CR_PLS_LEV2
N#define PWR_PVDLEVEL_3                 PWR_CR_PLS_LEV3
N#define PWR_PVDLEVEL_4                 PWR_CR_PLS_LEV4
N#define PWR_PVDLEVEL_5                 PWR_CR_PLS_LEV5
N#define PWR_PVDLEVEL_6                 PWR_CR_PLS_LEV6
N#define PWR_PVDLEVEL_7                 PWR_CR_PLS_LEV7  /* External input analog voltage 
N                                                           (Compare internally to VREFINT) */
N/**
N  * @}
N  */
N
N/** @defgroup PWR_PVD_Mode PWR PVD Mode
N  * @{
N  */
N#define PWR_PVD_MODE_NORMAL                 ((uint32_t)0x00000000U)   /*!< basic mode is used */
N#define PWR_PVD_MODE_IT_RISING              ((uint32_t)0x00010001U)   /*!< External Interrupt Mode with Rising edge trigger detection */
N#define PWR_PVD_MODE_IT_FALLING             ((uint32_t)0x00010002U)   /*!< External Interrupt Mode with Falling edge trigger detection */
N#define PWR_PVD_MODE_IT_RISING_FALLING      ((uint32_t)0x00010003U)   /*!< External Interrupt Mode with Rising/Falling edge trigger detection */
N#define PWR_PVD_MODE_EVENT_RISING           ((uint32_t)0x00020001U)   /*!< Event Mode with Rising edge trigger detection */
N#define PWR_PVD_MODE_EVENT_FALLING          ((uint32_t)0x00020002U)   /*!< Event Mode with Falling edge trigger detection */
N#define PWR_PVD_MODE_EVENT_RISING_FALLING   ((uint32_t)0x00020003U)   /*!< Event Mode with Rising/Falling edge trigger detection */
N
N/**
N  * @}
N  */
N
N/** @defgroup PWR_Regulator_state_in_SLEEP_STOP_mode PWR Regulator state in SLEEP/STOP mode
N  * @{
N  */
N#define PWR_MAINREGULATOR_ON           ((uint32_t)0x00000000U)
N#define PWR_LOWPOWERREGULATOR_ON       PWR_CR_LPSDSR
N
N/**
N  * @}
N  */
N
N/** @defgroup PWR_SLEEP_mode_entry PWR SLEEP mode entry
N  * @{
N  */
N#define PWR_SLEEPENTRY_WFI             ((uint8_t)0x01U)
N#define PWR_SLEEPENTRY_WFE             ((uint8_t)0x02U)
N/**
N  * @}
N  */
N
N/** @defgroup PWR_STOP_mode_entry PWR STOP mode entry
N  * @{
N  */
N#define PWR_STOPENTRY_WFI              ((uint8_t)0x01U)
N#define PWR_STOPENTRY_WFE              ((uint8_t)0x02U)
N/**
N  * @}
N  */
N
N/** @defgroup PWR_Regulator_Voltage_Scale PWR Regulator Voltage Scale
N  * @{
N  */
N
N#define PWR_REGULATOR_VOLTAGE_SCALE1   PWR_CR_VOS_0
N#define PWR_REGULATOR_VOLTAGE_SCALE2   PWR_CR_VOS_1
N#define PWR_REGULATOR_VOLTAGE_SCALE3   PWR_CR_VOS
N
N#define IS_PWR_VOLTAGE_SCALING_RANGE(RANGE) (((RANGE) == PWR_REGULATOR_VOLTAGE_SCALE1) || \
N                                             ((RANGE) == PWR_REGULATOR_VOLTAGE_SCALE2) || \
N                                             ((RANGE) == PWR_REGULATOR_VOLTAGE_SCALE3))
X#define IS_PWR_VOLTAGE_SCALING_RANGE(RANGE) (((RANGE) == PWR_REGULATOR_VOLTAGE_SCALE1) ||                                              ((RANGE) == PWR_REGULATOR_VOLTAGE_SCALE2) ||                                              ((RANGE) == PWR_REGULATOR_VOLTAGE_SCALE3))
N/**
N  * @}
N  */
N
N/** @defgroup PWR_Flag PWR Flag
N  * @{
N  */
N#define PWR_FLAG_WU                    PWR_CSR_WUF
N#define PWR_FLAG_SB                    PWR_CSR_SBF
N#define PWR_FLAG_PVDO                  PWR_CSR_PVDO
N#define PWR_FLAG_VREFINTRDY            PWR_CSR_VREFINTRDYF
N#define PWR_FLAG_VOS                   PWR_CSR_VOSF
N#define PWR_FLAG_REGLP                 PWR_CSR_REGLPF
N
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/** @defgroup PWR_Exported_Macro PWR Exported Macros
N  * @{
N  */
N/** @brief  macros configure the main internal regulator output voltage.
N  *         When exiting Low Power Run Mode or during dynamic voltage scaling configuration,
N  *         the reference manual recommends to poll PWR_FLAG_REGLP bit to wait for the regulator 
N  *         to reach main mode (resp. to get stabilized) for a transition from 0 to 1. 
N  *         Only then the clock can be increased.
N  *
N  * @param  __REGULATOR__: specifies the regulator output voltage to achieve
N  *         a tradeoff between performance and power consumption when the device does
N  *         not operate at the maximum frequency (refer to the datasheets for more details).
N  *          This parameter can be one of the following values:
N  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode,
N  *                                                System frequency up to 32 MHz.
N  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode,
N  *                                                System frequency up to 16 MHz.
N  *            @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode,
N  *                                                System frequency up to 4.2 MHz
N  * @retval None
N  */
N#define __HAL_PWR_VOLTAGESCALING_CONFIG(__REGULATOR__) (MODIFY_REG(PWR->CR, PWR_CR_VOS, (__REGULATOR__)))
N
N/** @brief  Check PWR flag is set or not.
N  * @param  __FLAG__: specifies the flag to check.
N  *           This parameter can be one of the following values:
N  *            @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup event
N  *                  was received from the WKUP pin or from the RTC alarm (Alarm B),
N  *                  RTC Tamper event, RTC TimeStamp event or RTC Wakeup.
N  *                  An additional wakeup event is detected if the WKUP pin is enabled
N  *                  (by setting the EWUP bit) when the WKUP pin level is already high.
N  *            @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the system was
N  *                  resumed from StandBy mode.
N  *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled 
N  *                  by the HAL_PWR_EnablePVD() function. The PVD is stopped by Standby mode.
N  *                  For this reason, this bit is equal to 0 after Standby or reset
N  *                  until the PVDE bit is set.
N  *            @arg PWR_FLAG_VREFINTRDY: Internal voltage reference (VREFINT) ready flag.
N  *                 This bit indicates the state of the internal voltage reference, VREFINT.
N  *            @arg PWR_FLAG_VOS: Voltage Scaling select flag. A delay is required for
N  *                 the internal regulator to be ready after the voltage range is changed.
N  *                 The VOSF bit indicates that the regulator has reached the voltage level
N  *                 defined with bits VOS of PWR_CR register.
N  *            @arg PWR_FLAG_REGLP: Regulator LP flag. When the MCU exits from Low power run
N  *                 mode, this bit stays at 1 until the regulator is ready in main mode.
N  *                 A polling on this bit is recommended to wait for the regulator main mode.
N  *                 This bit is reset by hardware when the regulator is ready.
N  * @retval The new state of __FLAG__ (TRUE or FALSE).
N  */
N#define __HAL_PWR_GET_FLAG(__FLAG__)                  ((PWR->CSR & (__FLAG__)) == (__FLAG__))
N
N/** @brief  Clear the PWR pending flags.
N  * @param  __FLAG__: specifies the flag to clear.
N  *          This parameter can be one of the following values:
N  *            @arg PWR_FLAG_WU: Wake Up flag
N  *            @arg PWR_FLAG_SB: StandBy flag
N  */
N#define __HAL_PWR_CLEAR_FLAG(__FLAG__)                SET_BIT(PWR->CR, (__FLAG__) << 2U)
N
N/**
N  * @brief Enable interrupt on PVD Exti Line 16.
N  * @retval None.
N  */
N#define __HAL_PWR_PVD_EXTI_ENABLE_IT()      SET_BIT(EXTI->IMR, PWR_EXTI_LINE_PVD)
N
N/**
N  * @brief Disable interrupt on PVD Exti Line 16. 
N  * @retval None.
N  */
N#define __HAL_PWR_PVD_EXTI_DISABLE_IT()     CLEAR_BIT(EXTI->IMR, PWR_EXTI_LINE_PVD)
N
N/**
N  * @brief Enable event on PVD Exti Line 16.
N  * @retval None.
N  */
N#define __HAL_PWR_PVD_EXTI_ENABLE_EVENT()   SET_BIT(EXTI->EMR, PWR_EXTI_LINE_PVD)
N
N/**
N  * @brief Disable event on PVD Exti Line 16.
N  * @retval None.
N  */
N#define __HAL_PWR_PVD_EXTI_DISABLE_EVENT()  CLEAR_BIT(EXTI->EMR, PWR_EXTI_LINE_PVD)
N
N
N/**
N  * @brief  PVD EXTI line configuration: set falling edge trigger.  
N  * @retval None.
N  */
N#define __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE()  SET_BIT(EXTI->FTSR, PWR_EXTI_LINE_PVD)
N
N
N/**
N  * @brief Disable the PVD Extended Interrupt Falling Trigger.
N  * @retval None.
N  */
N#define __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE()  CLEAR_BIT(EXTI->FTSR, PWR_EXTI_LINE_PVD)
N
N
N/**
N  * @brief  PVD EXTI line configuration: set rising edge trigger.
N  * @retval None.
N  */
N#define __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE()   SET_BIT(EXTI->RTSR, PWR_EXTI_LINE_PVD)
N
N/**
N  * @brief Disable the PVD Extended Interrupt Rising Trigger.
N  * This parameter can be:
N  * @retval None.
N  */
N#define __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE()  CLEAR_BIT(EXTI->RTSR, PWR_EXTI_LINE_PVD)
N
N/**
N  * @brief  PVD EXTI line configuration: set rising & falling edge trigger.
N  * @retval None.
N  */
N#define __HAL_PWR_PVD_EXTI_ENABLE_RISING_FALLING_EDGE()   do { __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE(); } while(0);
N
N/**
N  * @brief Disable the PVD Extended Interrupt Rising & Falling Trigger.
N  * This parameter can be:
N  * @retval None.
N  */
N#define __HAL_PWR_PVD_EXTI_DISABLE_RISING_FALLING_EDGE()  do { __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); } while(0);
N
N
N
N/**
N  * @brief Check whether the specified PVD EXTI interrupt flag is set or not.
N  * @retval EXTI PVD Line Status.
N  */
N#define __HAL_PWR_PVD_EXTI_GET_FLAG()       (EXTI->PR & (PWR_EXTI_LINE_PVD))
N
N/**
N  * @brief Clear the PVD EXTI flag.
N  * @retval None.
N  */
N#define __HAL_PWR_PVD_EXTI_CLEAR_FLAG()     (EXTI->PR = (PWR_EXTI_LINE_PVD))
N
N/**
N  * @brief Generate a Software interrupt on selected EXTI line.
N  * @retval None.
N  */
N#define __HAL_PWR_PVD_EXTI_GENERATE_SWIT()  SET_BIT(EXTI->SWIER, PWR_EXTI_LINE_PVD)
N
N/**
N  * @brief Generate a Software interrupt on selected EXTI line.
N  * @retval None.
N  */
N#define __HAL_PWR_PVD_EXTI_GENERATE_SWIT()            SET_BIT(EXTI->SWIER, PWR_EXTI_LINE_PVD)
N
N/**
N  * @}
N  */
N
N/** @addtogroup PWR_Private
N  * @{
N  */
N#define IS_PWR_PVD_LEVEL(LEVEL) (((LEVEL) == PWR_PVDLEVEL_0) || ((LEVEL) == PWR_PVDLEVEL_1)|| \
N                                 ((LEVEL) == PWR_PVDLEVEL_2) || ((LEVEL) == PWR_PVDLEVEL_3)|| \
N                                 ((LEVEL) == PWR_PVDLEVEL_4) || ((LEVEL) == PWR_PVDLEVEL_5)|| \
N                                 ((LEVEL) == PWR_PVDLEVEL_6) || ((LEVEL) == PWR_PVDLEVEL_7))
X#define IS_PWR_PVD_LEVEL(LEVEL) (((LEVEL) == PWR_PVDLEVEL_0) || ((LEVEL) == PWR_PVDLEVEL_1)||                                  ((LEVEL) == PWR_PVDLEVEL_2) || ((LEVEL) == PWR_PVDLEVEL_3)||                                  ((LEVEL) == PWR_PVDLEVEL_4) || ((LEVEL) == PWR_PVDLEVEL_5)||                                  ((LEVEL) == PWR_PVDLEVEL_6) || ((LEVEL) == PWR_PVDLEVEL_7))
N
N#define IS_PWR_PVD_MODE(MODE) (((MODE) == PWR_PVD_MODE_IT_RISING)|| ((MODE) == PWR_PVD_MODE_IT_FALLING) || \
N                              ((MODE) == PWR_PVD_MODE_IT_RISING_FALLING) || ((MODE) == PWR_PVD_MODE_EVENT_RISING) || \
N                              ((MODE) == PWR_PVD_MODE_EVENT_FALLING) || ((MODE) == PWR_PVD_MODE_EVENT_RISING_FALLING) || \
N                              ((MODE) == PWR_PVD_MODE_NORMAL)) 
X#define IS_PWR_PVD_MODE(MODE) (((MODE) == PWR_PVD_MODE_IT_RISING)|| ((MODE) == PWR_PVD_MODE_IT_FALLING) ||                               ((MODE) == PWR_PVD_MODE_IT_RISING_FALLING) || ((MODE) == PWR_PVD_MODE_EVENT_RISING) ||                               ((MODE) == PWR_PVD_MODE_EVENT_FALLING) || ((MODE) == PWR_PVD_MODE_EVENT_RISING_FALLING) ||                               ((MODE) == PWR_PVD_MODE_NORMAL)) 
N
N#if defined (STM32L071xx) || defined (STM32L072xx) || defined (STM32L073xx) || defined (STM32L081xx) || defined (STM32L082xx) || defined (STM32L083xx)
X#if 0L || 0L || 0L || 0L || 0L || 0L
S#define IS_PWR_WAKEUP_PIN(PIN) (((PIN) == PWR_WAKEUP_PIN1) || \
S                                ((PIN) == PWR_WAKEUP_PIN2) || \
S                                ((PIN) == PWR_WAKEUP_PIN3))
X#define IS_PWR_WAKEUP_PIN(PIN) (((PIN) == PWR_WAKEUP_PIN1) ||                                 ((PIN) == PWR_WAKEUP_PIN2) ||                                 ((PIN) == PWR_WAKEUP_PIN3))
N#elif defined (STM32L051xx) || defined (STM32L052xx) || defined (STM32L053xx) || defined (STM32L061xx) || defined (STM32L062xx) || defined (STM32L063xx)
X#elif 0L || 0L || 1L || 0L || 0L || 0L
N#define IS_PWR_WAKEUP_PIN(PIN) (((PIN) == PWR_WAKEUP_PIN1) || \
N                                ((PIN) == PWR_WAKEUP_PIN2))
X#define IS_PWR_WAKEUP_PIN(PIN) (((PIN) == PWR_WAKEUP_PIN1) ||                                 ((PIN) == PWR_WAKEUP_PIN2))
N#elif defined (STM32L031xx) || defined (STM32L041xx)
S#define IS_PWR_WAKEUP_PIN(PIN) (((PIN) == PWR_WAKEUP_PIN1) || \
S                                ((PIN) == PWR_WAKEUP_PIN2))
X#define IS_PWR_WAKEUP_PIN(PIN) (((PIN) == PWR_WAKEUP_PIN1) ||                                 ((PIN) == PWR_WAKEUP_PIN2))
S#elif defined (STM32L011xx) || defined (STM32L021xx)
S#define IS_PWR_WAKEUP_PIN(PIN) (((PIN) == PWR_WAKEUP_PIN1) || \
S                                ((PIN) == PWR_WAKEUP_PIN3))
X#define IS_PWR_WAKEUP_PIN(PIN) (((PIN) == PWR_WAKEUP_PIN1) ||                                 ((PIN) == PWR_WAKEUP_PIN3))
N#endif
N
N#define IS_PWR_REGULATOR(REGULATOR) (((REGULATOR) == PWR_MAINREGULATOR_ON) || \
N                                     ((REGULATOR) == PWR_LOWPOWERREGULATOR_ON))
X#define IS_PWR_REGULATOR(REGULATOR) (((REGULATOR) == PWR_MAINREGULATOR_ON) ||                                      ((REGULATOR) == PWR_LOWPOWERREGULATOR_ON))
N#define IS_PWR_SLEEP_ENTRY(ENTRY) (((ENTRY) == PWR_SLEEPENTRY_WFI) || ((ENTRY) == PWR_SLEEPENTRY_WFE))
N
N#define IS_PWR_STOP_ENTRY(ENTRY) (((ENTRY) == PWR_STOPENTRY_WFI) || ((ENTRY) == PWR_STOPENTRY_WFE))
N
N/**
N  * @}
N  */
N
N/* Include PWR HAL Extension module */
N#include "stm32l0xx_hal_pwr_ex.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_pwr_ex.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal_pwr_ex.h
N  * @author  MCD Application Team
N  * @brief   Header file of PWR HAL Extension module.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_PWR_EX_H
N#define __STM32L0xx_HAL_PWR_EX_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx_hal_def.h"
N
N/** @addtogroup STM32L0xx_HAL_Driver
N  * @{
N  */
N
N/** @defgroup PWREx PWREx
N  * @{
N  */
N
N/** @defgroup PWREx_Exported_Macros PWREx Exported Macros
N * @{
N */
N
N/** @brief  Macros to enable the Deep-sleep mode with Flash memory kept off.
N  * @note   When entering low power mode (stop or standby only), if DS_EE_KOFF and RUN_PD of
N  *         FLASH_ACR register are both set , the Flash memory will not be woken up 
N  *         when exiting from deep-sleep mode.
N  */
N#define __HAL_PWR_FLASHWAKEUP_ENABLE()      CLEAR_BIT(PWR->CR, PWR_CR_DSEEKOFF)
N
N/** @brief  Macros to disable the Deep-sleep mode with Flash memory kept off.
N  * @note   When entering low power mode (stop or standby only), if DS_EE_KOFF and RUN_PD of
N  *         FLASH_ACR register are both set , the Flash memory will not be woken up 
N  *         when exiting from deep-sleep mode.
N  */
N#define __HAL_PWR_FLASHWAKEUP_DISABLE()     SET_BIT(PWR->CR, PWR_CR_DSEEKOFF)
N/**
N  * @}
N  */
N
N/** @defgroup PWREx_Exported_Functions PWREx Exported Functions
N * @{
N */
Nuint32_t HAL_PWREx_GetVoltageRange(void);
Nvoid HAL_PWREx_EnableFastWakeUp(void);
Nvoid HAL_PWREx_DisableFastWakeUp(void);
Nvoid HAL_PWREx_EnableUltraLowPower(void);
Nvoid HAL_PWREx_DisableUltraLowPower(void);
Nvoid HAL_PWREx_EnableLowPowerRunMode(void);
NHAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void);
N/**
N  * @}
N  */
N
N/* Define the private group ***********************************/
N/**************************************************************/
N/** @defgroup PWREx_Private PWREx Private
N  * @{
N  */
N/**
N  * @}
N  */
N/**************************************************************/
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32L0xx_HAL_PWR_EX_H */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
L 389 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_pwr.h" 2
N
N/** @defgroup PWR_Exported_Functions PWR Exported Functions
N  * @{
N  */
N  
N/** @defgroup PWR_Exported_Functions_Group1 Initialization and de-initialization functions 
N  * @{
N  */
Nvoid HAL_PWR_DeInit(void);
Nvoid HAL_PWR_EnableBkUpAccess(void);
Nvoid HAL_PWR_DisableBkUpAccess(void);
N/**
N  * @}
N  */
N
N/** @defgroup PWR_Exported_Functions_Group2 Low Power modes configuration functions
N  * @{
N  */
N
N/* PVD control functions  ************************************************/
Nvoid HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD);
Nvoid HAL_PWR_EnablePVD(void);
Nvoid HAL_PWR_DisablePVD(void);
Nvoid HAL_PWR_PVD_IRQHandler(void);
Nvoid HAL_PWR_PVDCallback(void);
N
N/* WakeUp pins configuration functions ****************************************/
Nvoid HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx);
Nvoid HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx);
N
N/* Low Power modes configuration functions ************************************/
Nvoid HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry);
Nvoid HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry);
Nvoid HAL_PWR_EnterSTANDBYMode(void);
N
Nvoid HAL_PWR_EnableSleepOnExit(void);
Nvoid HAL_PWR_DisableSleepOnExit(void);
Nvoid HAL_PWR_EnableSEVOnPend(void);
Nvoid HAL_PWR_DisableSEVOnPend(void);
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Define the private group ***********************************/
N/**************************************************************/
N/** @defgroup PWR_Private PWR Private
N  * @{
N  */
N/**
N  * @}
N  */
N/**************************************************************/
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N  
N#ifdef __cplusplus
S}
N#endif
N
N
N#endif /* __STM32L0xx_HAL_PWR_H */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
L 235 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\Conf\stm32l0xx_hal_conf.h" 2
N#endif /* HAL_PWR_MODULE_ENABLED */
N
N#ifdef HAL_RNG_MODULE_ENABLED
S #include "stm32l0xx_hal_rng.h"
N#endif /* HAL_RNG_MODULE_ENABLED */
N
N#ifdef HAL_RTC_MODULE_ENABLED
S #include "stm32l0xx_hal_rtc.h"
S
N#endif /* HAL_RTC_MODULE_ENABLED */
N
N#ifdef HAL_SPI_MODULE_ENABLED
S #include "stm32l0xx_hal_spi.h"
N#endif /* HAL_SPI_MODULE_ENABLED */
N
N#ifdef HAL_TIM_MODULE_ENABLED
N #include "stm32l0xx_hal_tim.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_tim.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal_tim.h
N  * @author  MCD Application Team
N  * @brief   Header file of TIM HAL module.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_TIM_H
N#define __STM32L0xx_HAL_TIM_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx_hal_def.h"
N
N/** @addtogroup STM32L0xx_HAL_Driver
N  * @{
N  */
N
N/** @defgroup TIM TIM (Timer)
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/ 
N
N /** @defgroup TIM_Exported_Types TIM Exported Types
N  * @{
N  */
N
N/** @defgroup TIM_Base_Configuration TIM base configuration structure
N  * @{
N  */
N/** 
N  * @brief  TIM Time base Configuration Structure definition  
N  */
Ntypedef struct
N{
N  uint32_t Prescaler;         /*!< Specifies the prescaler value used to divide the TIM clock.
N                                   This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
N
N  uint32_t CounterMode;       /*!< Specifies the counter mode.
N                                   This parameter can be a value of @ref TIM_Counter_Mode */
N
N  uint32_t Period;            /*!< Specifies the period value to be loaded into the active
N                                   Auto-Reload Register at the next update event.
N                                   This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF.  */ 
N
N  uint32_t ClockDivision;     /*!< Specifies the clock division.
N                                   This parameter can be a value of @ref TIM_ClockDivision */
N} TIM_Base_InitTypeDef;
N/**
N  * @}
N  */
N
N/** @defgroup TIM_Output_Configuration TIM output compare configuration structure
N  * @{
N  */
N
N/**
N  * @brief  TIM Output Compare Configuration Structure definition  
N  */
N
Ntypedef struct
N{                                 
N  uint32_t OCMode;        /*!< Specifies the TIM mode.
N                               This parameter can be a value of @ref TIM_Output_Compare_and_PWM_modes */
N
N  uint32_t Pulse;         /*!< Specifies the pulse value to be loaded into the Capture Compare Register. 
N                               This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */                          
N
N  uint32_t OCPolarity;    /*!< Specifies the output polarity.
N                               This parameter can be a value of @ref TIM_Output_Compare_Polarity */
N  
N  uint32_t OCFastMode;   /*!< Specifies the Fast mode state.
N                               This parameter can be a value of @ref TIM_Output_Fast_State
N                               @note This parameter is valid only in PWM1 and PWM2 mode. */
N
N} TIM_OC_InitTypeDef;  
N/**
N  * @}
N  */
N
N/** @defgroup TIM_OnePulse_Configuration TIM One Pulse configuration structure
N  * @{
N  */
N/** 
N  * @brief  TIM One Pulse Mode Configuration Structure definition  
N  */
Ntypedef struct
N{                               
N  uint32_t OCMode;        /*!< Specifies the TIM mode.
N                               This parameter can be a value of @ref TIM_Output_Compare_and_PWM_modes */
N
N  uint32_t Pulse;         /*!< Specifies the pulse value to be loaded into the Capture Compare Register. 
N                               This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */                          
N
N  uint32_t OCPolarity;    /*!< Specifies the output polarity.
N                               This parameter can be a value of @ref TIM_Output_Compare_Polarity */
N
N
N  uint32_t ICPolarity;    /*!< Specifies the active edge of the input signal.
N                               This parameter can be a value of @ref TIM_Input_Capture_Polarity */
N
N  uint32_t ICSelection;   /*!< Specifies the input.
N                              This parameter can be a value of @ref TIM_Input_Capture_Selection */
N
N  uint32_t ICFilter;      /*!< Specifies the input capture filter.
N                              This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF */  
N} TIM_OnePulse_InitTypeDef;  
N/**
N  * @}
N  */
N
N/** @defgroup TIM_Input_Capture TIM input capture configuration structure
N  * @{
N  */
N/** 
N  * @brief  TIM Input Capture Configuration Structure definition  
N  */
N
Ntypedef struct
N{                                  
N  uint32_t  ICPolarity;   /*!< Specifies the active edge of the input signal.
N                               This parameter can be a value of @ref TIM_Input_Capture_Polarity */
N
N  uint32_t ICSelection;  /*!< Specifies the input.
N                              This parameter can be a value of @ref TIM_Input_Capture_Selection */
N
N  uint32_t ICPrescaler;  /*!< Specifies the Input Capture Prescaler.
N                              This parameter can be a value of @ref TIM_Input_Capture_Prescaler */
N
N  uint32_t ICFilter;     /*!< Specifies the input capture filter.
N                              This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF */
N} TIM_IC_InitTypeDef;
N/**
N  * @}
N  */
N
N/** @defgroup TIM_Encoder TIM encoder configuration structure
N  * @{
N  */
N/** 
N  * @brief  TIM Encoder Configuration Structure definition  
N  */
N
Ntypedef struct
N{
N  uint32_t EncoderMode;   /*!< Specifies the active edge of the input signal.
N                               This parameter can be a value of @ref TIM_Encoder_Mode */
N                                  
N  uint32_t IC1Polarity;   /*!< Specifies the active edge of the input signal.
N                               This parameter can be a value of @ref TIM_Input_Capture_Polarity */
N
N  uint32_t IC1Selection;  /*!< Specifies the input.
N                               This parameter can be a value of @ref TIM_Input_Capture_Selection */
N
N  uint32_t IC1Prescaler;  /*!< Specifies the Input Capture Prescaler.
N                               This parameter can be a value of @ref TIM_Input_Capture_Prescaler */
N
N  uint32_t IC1Filter;     /*!< Specifies the input capture filter.
N                               This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF */
N                                  
N  uint32_t IC2Polarity;   /*!< Specifies the active edge of the input signal.
N                               This parameter can be a value of @ref TIM_Input_Capture_Polarity */
N
N  uint32_t IC2Selection;  /*!< Specifies the input.
N                              This parameter can be a value of @ref TIM_Input_Capture_Selection */
N
N  uint32_t IC2Prescaler;  /*!< Specifies the Input Capture Prescaler.
N                               This parameter can be a value of @ref TIM_Input_Capture_Prescaler */
N
N  uint32_t IC2Filter;     /*!< Specifies the input capture filter.
N                               This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF */                                 
N} TIM_Encoder_InitTypeDef;
N/**
N  * @}
N  */
N
N/** @defgroup TIM_Clock_Configuration TIM clock configuration structure
N  * @{
N  */
N/** 
N  * @brief  Clock Configuration Handle Structure definition  
N  */ 
Ntypedef struct
N{
N  uint32_t ClockSource;     /*!< TIM clock sources. 
N                                 This parameter can be a value of @ref TIM_Clock_Source */ 
N  uint32_t ClockPolarity;   /*!< TIM clock polarity. 
N                                 This parameter can be a value of @ref TIM_Clock_Polarity */
N  uint32_t ClockPrescaler;  /*!< TIM clock prescaler. 
N                                 This parameter can be a value of @ref TIM_Clock_Prescaler */
N  uint32_t ClockFilter;    /*!< TIM clock filter. 
N                                This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF */
N}TIM_ClockConfigTypeDef;
N/**
N  * @}
N  */
N
N/** @defgroup TIM_Clear_Input_Configuration TIM clear input configuration structure
N  * @{
N  */
N/** 
N  * @brief  Clear Input Configuration Handle Structure definition  
N  */ 
Ntypedef struct
N{ 
N  uint32_t ClearInputState;      /*!< TIM clear Input state. 
N                                      This parameter can be ENABLE or DISABLE */  
N  uint32_t ClearInputSource;     /*!< TIM clear Input sources. 
N                                      This parameter can be a value of @ref TIM_ClearInput_Source */ 
N  uint32_t ClearInputPolarity;   /*!< TIM Clear Input polarity. 
N                                      This parameter can be a value of @ref TIM_ClearInput_Polarity */
N  uint32_t ClearInputPrescaler;  /*!< TIM Clear Input prescaler. 
N                                      This parameter can be a value of @ref TIM_ClearInput_Prescaler */
N  uint32_t ClearInputFilter;    /*!< TIM Clear Input filter. 
N                                     This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF */
N}TIM_ClearInputConfigTypeDef;
N/**
N  * @}
N  */
N
N/** @defgroup TIM_Slave_Configuratio TIM slave configuration structure
N  * @{
N  */
N/** 
N  * @brief  TIM Slave configuration Structure definition  
N  */ 
Ntypedef struct {
N  uint32_t  SlaveMode;         /*!< Slave mode selection. 
N                                  This parameter can be a value of @ref TIM_Slave_Mode */ 
N  uint32_t  InputTrigger;      /*!< Input Trigger source. 
N                                  This parameter can be a value of @ref TIM_Trigger_Selection */
N  uint32_t  TriggerPolarity;   /*!< Input Trigger polarity. 
N                                  This parameter can be a value of @ref TIM_Trigger_Polarity */
N  uint32_t  TriggerPrescaler;  /*!< Input trigger prescaler. 
N                                  This parameter can be a value of @ref TIM_Trigger_Prescaler */
N  uint32_t  TriggerFilter;     /*!< Input trigger filter. 
N                                  This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF */
N
N}TIM_SlaveConfigTypeDef;
N/**
N  * @}
N  */
N
N/** @defgroup TIM_State_Definition  TIM state definition
N  * @{
N  */
N/** 
N  * @brief  HAL State structures definition  
N  */ 
Ntypedef enum
N{
N  HAL_TIM_STATE_RESET             = 0x00U,    /*!< Peripheral not yet initialized or disabled  */
N  HAL_TIM_STATE_READY             = 0x01U,    /*!< Peripheral Initialized and ready for use    */
N  HAL_TIM_STATE_BUSY              = 0x02U,    /*!< An internal process is ongoing              */    
N  HAL_TIM_STATE_TIMEOUT           = 0x03U,    /*!< Timeout state                               */  
N  HAL_TIM_STATE_ERROR             = 0x04U     /*!< Reception process is ongoing                */                                                                             
N}HAL_TIM_StateTypeDef;
N/**
N  * @}
N  */
N
N/** @defgroup TIM_Active_Channel  TIM active channel definition
N  * @{
N  */
N/** 
N  * @brief  HAL Active channel structures definition  
N  */ 
Ntypedef enum
N{
N  HAL_TIM_ACTIVE_CHANNEL_1        = 0x01U,    /*!< The active channel is 1     */
N  HAL_TIM_ACTIVE_CHANNEL_2        = 0x02U,    /*!< The active channel is 2     */
N  HAL_TIM_ACTIVE_CHANNEL_3        = 0x04U,    /*!< The active channel is 3     */   
N  HAL_TIM_ACTIVE_CHANNEL_4        = 0x08U,    /*!< The active channel is 4     */
N  HAL_TIM_ACTIVE_CHANNEL_CLEARED  = 0x00U     /*!< All active channels cleared */    
N}HAL_TIM_ActiveChannel;
N/**
N  * @}
N  */
N
N/** @defgroup TIM_Handle  TIM handler
N  * @{
N  */
N/** 
N  * @brief  TIM Time Base Handle Structure definition  
N  */ 
Ntypedef struct
N{
N  TIM_TypeDef              *Instance;     /*!< Register base address             */ 
N  TIM_Base_InitTypeDef     Init;          /*!< TIM Time Base required parameters */
N  HAL_TIM_ActiveChannel    Channel;       /*!< Active channel                    */ 
N  DMA_HandleTypeDef        *hdma[7];      /*!< DMA Handlers array
N                                             This array is accessed by a @ref DMA_Handle_index */
N  HAL_LockTypeDef          Lock;          /*!< Locking object                    */
N__IO HAL_TIM_StateTypeDef  State;         /*!< TIM operation state               */  
Xvolatile HAL_TIM_StateTypeDef  State;            
N}TIM_HandleTypeDef;
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N/* Exported constants --------------------------------------------------------*/
N/** @defgroup TIM_Exported_Constants TIM Exported Constants
N  * @{
N  */
N
N
N#define IS_TIM_PERIOD(__PERIOD__)      ((__PERIOD__) <= 0xFFFFU)
N
N#define IS_TIM_PRESCALER(__PRESCALER__)      ((__PRESCALER__) <= 0xFFFFU)
N
N
N/** @defgroup TIM_Input_Channel_Polarity Input channel polarity
N  * @{
N  */
N#define  TIM_INPUTCHANNELPOLARITY_RISING      ((uint32_t)0x00000000U)            /*!< Polarity for TIx source */
N#define  TIM_INPUTCHANNELPOLARITY_FALLING     (TIM_CCER_CC1P)                   /*!< Polarity for TIx source */
N#define  TIM_INPUTCHANNELPOLARITY_BOTHEDGE    (TIM_CCER_CC1P | TIM_CCER_CC1NP)  /*!< Polarity for TIx source */
N/**
N  * @}
N  */
N
N/** @defgroup TIM_ETR_Polarity ETR polarity
N  * @{
N  */
N#define TIM_ETRPOLARITY_INVERTED              (TIM_SMCR_ETP)                    /*!< Polarity for ETR source */ 
N#define TIM_ETRPOLARITY_NONINVERTED           ((uint32_t)0x0000U)                /*!< Polarity for ETR source */ 
N/**
N  * @}
N  */
N
N/** @defgroup TIM_ETR_Prescaler ETR prescaler
N  * @{
N  */                
N#define TIM_ETRPRESCALER_DIV1                 ((uint32_t)0x0000U)                /*!< No prescaler is used */
N#define TIM_ETRPRESCALER_DIV2                 (TIM_SMCR_ETPS_0)                 /*!< ETR input source is divided by 2 */
N#define TIM_ETRPRESCALER_DIV4                 (TIM_SMCR_ETPS_1)                 /*!< ETR input source is divided by 4 */
N#define TIM_ETRPRESCALER_DIV8                 (TIM_SMCR_ETPS)                   /*!< ETR input source is divided by 8 */
N/**
N  * @}
N  */
N
N/** @defgroup TIM_Counter_Mode Counter mode
N  * @{
N  */
N#define TIM_COUNTERMODE_UP                 ((uint32_t)0x0000U)
N#define TIM_COUNTERMODE_DOWN               TIM_CR1_DIR
N#define TIM_COUNTERMODE_CENTERALIGNED1     TIM_CR1_CMS_0
N#define TIM_COUNTERMODE_CENTERALIGNED2     TIM_CR1_CMS_1
N#define TIM_COUNTERMODE_CENTERALIGNED3     TIM_CR1_CMS
N/**
N  * @}
N  */
N#define IS_TIM_COUNTER_MODE(__MODE__) (((__MODE__) == TIM_COUNTERMODE_UP)              || \
N                                       ((__MODE__) == TIM_COUNTERMODE_DOWN)            || \
N                                       ((__MODE__) == TIM_COUNTERMODE_CENTERALIGNED1)  || \
N                                       ((__MODE__) == TIM_COUNTERMODE_CENTERALIGNED2)  || \
N                                       ((__MODE__) == TIM_COUNTERMODE_CENTERALIGNED3))
X#define IS_TIM_COUNTER_MODE(__MODE__) (((__MODE__) == TIM_COUNTERMODE_UP)              ||                                        ((__MODE__) == TIM_COUNTERMODE_DOWN)            ||                                        ((__MODE__) == TIM_COUNTERMODE_CENTERALIGNED1)  ||                                        ((__MODE__) == TIM_COUNTERMODE_CENTERALIGNED2)  ||                                        ((__MODE__) == TIM_COUNTERMODE_CENTERALIGNED3))
N
N
N
N  
N/** @defgroup TIM_ClockDivision Clock division
N  * @{
N  */
N#define TIM_CLOCKDIVISION_DIV1                       ((uint32_t)0x0000U)
N#define TIM_CLOCKDIVISION_DIV2                       (TIM_CR1_CKD_0)
N#define TIM_CLOCKDIVISION_DIV4                       (TIM_CR1_CKD_1)
N/**
N  * @}
N  */
N#define IS_TIM_CLOCKDIVISION_DIV(__DIV__) (((__DIV__) == TIM_CLOCKDIVISION_DIV1) || \
N                                           ((__DIV__) == TIM_CLOCKDIVISION_DIV2) || \
N                                           ((__DIV__) == TIM_CLOCKDIVISION_DIV4))
X#define IS_TIM_CLOCKDIVISION_DIV(__DIV__) (((__DIV__) == TIM_CLOCKDIVISION_DIV1) ||                                            ((__DIV__) == TIM_CLOCKDIVISION_DIV2) ||                                            ((__DIV__) == TIM_CLOCKDIVISION_DIV4))
N
N
N/** @defgroup TIM_Output_Compare_and_PWM_modes Output compare and PWM modes
N  * @{
N  */
N#define TIM_OCMODE_TIMING                   ((uint32_t)0x0000U)
N#define TIM_OCMODE_ACTIVE                   (TIM_CCMR1_OC1M_0)
N#define TIM_OCMODE_INACTIVE                 (TIM_CCMR1_OC1M_1)
N#define TIM_OCMODE_TOGGLE                   (TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_1)
N#define TIM_OCMODE_PWM1                     (TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2)
N#define TIM_OCMODE_PWM2                     (TIM_CCMR1_OC1M)
N#define TIM_OCMODE_FORCED_ACTIVE            (TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_2)
N#define TIM_OCMODE_FORCED_INACTIVE          (TIM_CCMR1_OC1M_2)
N/**
N  * @}
N  */
N
N#define IS_TIM_PWM_MODE(__MODE__) (((__MODE__) == TIM_OCMODE_PWM1) || \
N                                   ((__MODE__) == TIM_OCMODE_PWM2))
X#define IS_TIM_PWM_MODE(__MODE__) (((__MODE__) == TIM_OCMODE_PWM1) ||                                    ((__MODE__) == TIM_OCMODE_PWM2))
N                              
N#define IS_TIM_OC_MODE(__MODE__) (((__MODE__) == TIM_OCMODE_TIMING)           || \
N                                  ((__MODE__) == TIM_OCMODE_ACTIVE)           || \
N                                  ((__MODE__) == TIM_OCMODE_INACTIVE)         || \
N                                  ((__MODE__) == TIM_OCMODE_TOGGLE)           || \
N                                  ((__MODE__) == TIM_OCMODE_FORCED_ACTIVE)    || \
N                                  ((__MODE__) == TIM_OCMODE_FORCED_INACTIVE))
X#define IS_TIM_OC_MODE(__MODE__) (((__MODE__) == TIM_OCMODE_TIMING)           ||                                   ((__MODE__) == TIM_OCMODE_ACTIVE)           ||                                   ((__MODE__) == TIM_OCMODE_INACTIVE)         ||                                   ((__MODE__) == TIM_OCMODE_TOGGLE)           ||                                   ((__MODE__) == TIM_OCMODE_FORCED_ACTIVE)    ||                                   ((__MODE__) == TIM_OCMODE_FORCED_INACTIVE))
N
N
N/** @defgroup TIM_Output_Compare_State Output compare state
N  * @{
N  */
N#define TIM_OUTPUTSTATE_DISABLE            ((uint32_t)0x0000U)
N#define TIM_OUTPUTSTATE_ENABLE             (TIM_CCER_CC1E)
N/**
N  * @}
N  */
N
N/** @defgroup TIM_Output_Fast_State Output fast state
N  * @{
N  */
N#define TIM_OCFAST_DISABLE                ((uint32_t)0x0000U)
N#define TIM_OCFAST_ENABLE                 (TIM_CCMR1_OC1FE)
N/**
N  * @}
N  */ 
N#define IS_TIM_FAST_STATE(__STATE__) (((__STATE__) == TIM_OCFAST_DISABLE) || \
N                                      ((__STATE__) == TIM_OCFAST_ENABLE))
X#define IS_TIM_FAST_STATE(__STATE__) (((__STATE__) == TIM_OCFAST_DISABLE) ||                                       ((__STATE__) == TIM_OCFAST_ENABLE))
N
N/** @defgroup TIM_Output_Compare_N_State Output compare N state
N  * @{
N  */
N#define TIM_OUTPUTNSTATE_DISABLE            ((uint32_t)0x0000U)
N#define TIM_OUTPUTNSTATE_ENABLE             (TIM_CCER_CC1NE)
N/**
N  * @}
N  */
N  
N/** @defgroup TIM_Output_Compare_Polarity Output compare polarity
N  * @{
N  */
N#define TIM_OCPOLARITY_HIGH                ((uint32_t)0x0000U)
N#define TIM_OCPOLARITY_LOW                 (TIM_CCER_CC1P)
N/**
N  * @}
N  */
N#define IS_TIM_OC_POLARITY(__POLARITY__) (((__POLARITY__) == TIM_OCPOLARITY_HIGH) || \
N                                          ((__POLARITY__) == TIM_OCPOLARITY_LOW))
X#define IS_TIM_OC_POLARITY(__POLARITY__) (((__POLARITY__) == TIM_OCPOLARITY_HIGH) ||                                           ((__POLARITY__) == TIM_OCPOLARITY_LOW))
N
N/** @defgroup TIM_Channel TIM channels
N  * @{
N  */
N#define TIM_CHANNEL_1                      ((uint32_t)0x0000U)
N#define TIM_CHANNEL_2                      ((uint32_t)0x0004U)
N#define TIM_CHANNEL_3                      ((uint32_t)0x0008U)
N#define TIM_CHANNEL_4                      ((uint32_t)0x000CU)
N#define TIM_CHANNEL_ALL                    ((uint32_t)0x0018U)
N/**
N  * @}
N  */
N
N#define IS_TIM_CHANNELS(__CHANNEL__) (((__CHANNEL__) == TIM_CHANNEL_1) || \
N                                      ((__CHANNEL__) == TIM_CHANNEL_2) || \
N                                      ((__CHANNEL__) == TIM_CHANNEL_3) || \
N                                      ((__CHANNEL__) == TIM_CHANNEL_4) || \
N                                      ((__CHANNEL__) == TIM_CHANNEL_ALL))
X#define IS_TIM_CHANNELS(__CHANNEL__) (((__CHANNEL__) == TIM_CHANNEL_1) ||                                       ((__CHANNEL__) == TIM_CHANNEL_2) ||                                       ((__CHANNEL__) == TIM_CHANNEL_3) ||                                       ((__CHANNEL__) == TIM_CHANNEL_4) ||                                       ((__CHANNEL__) == TIM_CHANNEL_ALL))
N
N#define IS_TIM_OPM_CHANNELS(__CHANNEL__) (((__CHANNEL__) == TIM_CHANNEL_1) || \
N                                          ((__CHANNEL__) == TIM_CHANNEL_2))
X#define IS_TIM_OPM_CHANNELS(__CHANNEL__) (((__CHANNEL__) == TIM_CHANNEL_1) ||                                           ((__CHANNEL__) == TIM_CHANNEL_2))
N
N
N/** @defgroup TIM_Input_Capture_Polarity Input capture polarity
N  * @{
N  */
N#define  TIM_ICPOLARITY_RISING             TIM_INPUTCHANNELPOLARITY_RISING
N#define  TIM_ICPOLARITY_FALLING            TIM_INPUTCHANNELPOLARITY_FALLING
N#define  TIM_ICPOLARITY_BOTHEDGE           TIM_INPUTCHANNELPOLARITY_BOTHEDGE
N/**
N  * @}
N  */
N#define IS_TIM_IC_POLARITY(__POLARITY__) (((__POLARITY__) == TIM_ICPOLARITY_RISING)   || \
N                                          ((__POLARITY__) == TIM_ICPOLARITY_FALLING)  || \
N                                          ((__POLARITY__) == TIM_ICPOLARITY_BOTHEDGE))
X#define IS_TIM_IC_POLARITY(__POLARITY__) (((__POLARITY__) == TIM_ICPOLARITY_RISING)   ||                                           ((__POLARITY__) == TIM_ICPOLARITY_FALLING)  ||                                           ((__POLARITY__) == TIM_ICPOLARITY_BOTHEDGE))
N
N
N/** @defgroup TIM_Input_Capture_Selection Input capture selection
N  * @{
N  */
N#define TIM_ICSELECTION_DIRECTTI           (TIM_CCMR1_CC1S_0)   /*!< TIM Input 1, 2, 3 or 4 is selected to be 
N                                                                     connected to IC1, IC2, IC3 or IC4, respectively */
N#define TIM_ICSELECTION_INDIRECTTI         (TIM_CCMR1_CC1S_1)   /*!< TIM Input 1, 2, 3 or 4 is selected to be
N                                                                     connected to IC2, IC1, IC4 or IC3, respectively */
N#define TIM_ICSELECTION_TRC                (TIM_CCMR1_CC1S)     /*!< TIM Input 1, 2, 3 or 4 is selected to be connected to TRC */
N
N#define IS_TIM_IC_SELECTION(__SELECTION__) (((__SELECTION__) == TIM_ICSELECTION_DIRECTTI) || \
N                                            ((__SELECTION__) == TIM_ICSELECTION_INDIRECTTI) || \
N                                            ((__SELECTION__) == TIM_ICSELECTION_TRC))
X#define IS_TIM_IC_SELECTION(__SELECTION__) (((__SELECTION__) == TIM_ICSELECTION_DIRECTTI) ||                                             ((__SELECTION__) == TIM_ICSELECTION_INDIRECTTI) ||                                             ((__SELECTION__) == TIM_ICSELECTION_TRC))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Input_Capture_Prescaler Input capture prescaler
N  * @{
N  */
N#define TIM_ICPSC_DIV1                     ((uint32_t)0x0000U)       /*!< Capture performed each time an edge is detected on the capture input */
N#define TIM_ICPSC_DIV2                     (TIM_CCMR1_IC1PSC_0)     /*!< Capture performed once every 2 events */
N#define TIM_ICPSC_DIV4                     (TIM_CCMR1_IC1PSC_1)     /*!< Capture performed once every 4 events */
N#define TIM_ICPSC_DIV8                     (TIM_CCMR1_IC1PSC)       /*!< Capture performed once every 8 events */
N/**
N  * @}
N  */
N#define IS_TIM_IC_PRESCALER(__PRESCALER__) (((__PRESCALER__) == TIM_ICPSC_DIV1) || \
N                                            ((__PRESCALER__) == TIM_ICPSC_DIV2) || \
N                                            ((__PRESCALER__) == TIM_ICPSC_DIV4) || \
N                                            ((__PRESCALER__) == TIM_ICPSC_DIV8))
X#define IS_TIM_IC_PRESCALER(__PRESCALER__) (((__PRESCALER__) == TIM_ICPSC_DIV1) ||                                             ((__PRESCALER__) == TIM_ICPSC_DIV2) ||                                             ((__PRESCALER__) == TIM_ICPSC_DIV4) ||                                             ((__PRESCALER__) == TIM_ICPSC_DIV8))
N
N/** @defgroup TIM_One_Pulse_Mode One pulse mode
N  * @{
N  */
N#define TIM_OPMODE_SINGLE                  (TIM_CR1_OPM)
N#define TIM_OPMODE_REPETITIVE              ((uint32_t)0x0000U)
N/**
N  * @}
N  */ 
N#define IS_TIM_OPM_MODE(__MODE__) (((__MODE__) == TIM_OPMODE_SINGLE) || \
N                                   ((__MODE__) == TIM_OPMODE_REPETITIVE))
X#define IS_TIM_OPM_MODE(__MODE__) (((__MODE__) == TIM_OPMODE_SINGLE) ||                                    ((__MODE__) == TIM_OPMODE_REPETITIVE))
N
N/** @defgroup TIM_Encoder_Mode Encoder_Mode
N  * @{
N  */ 
N#define TIM_ENCODERMODE_TI1                (TIM_SMCR_SMS_0)
N#define TIM_ENCODERMODE_TI2                (TIM_SMCR_SMS_1)
N#define TIM_ENCODERMODE_TI12               (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)
N/**
N  * @}
N  */
N#define IS_TIM_ENCODER_MODE(__MODE__) (((__MODE__) == TIM_ENCODERMODE_TI1) || \
N                                       ((__MODE__) == TIM_ENCODERMODE_TI2) || \
N                                       ((__MODE__) == TIM_ENCODERMODE_TI12))
X#define IS_TIM_ENCODER_MODE(__MODE__) (((__MODE__) == TIM_ENCODERMODE_TI1) ||                                        ((__MODE__) == TIM_ENCODERMODE_TI2) ||                                        ((__MODE__) == TIM_ENCODERMODE_TI12))
N
N/** @defgroup TIM_Interrupt_definition Interrupt definition
N  * @{
N  */ 
N#define TIM_IT_UPDATE           (TIM_DIER_UIE)
N#define TIM_IT_CC1              (TIM_DIER_CC1IE)
N#define TIM_IT_CC2              (TIM_DIER_CC2IE)
N#define TIM_IT_CC3              (TIM_DIER_CC3IE)
N#define TIM_IT_CC4              (TIM_DIER_CC4IE)
N#define TIM_IT_TRIGGER          (TIM_DIER_TIE)
N/**
N  * @}
N  */
N
N/** @defgroup TIM_DMA_sources DMA sources
N  * @{
N  */
N#define TIM_DMA_UPDATE                     (TIM_DIER_UDE)
N#define TIM_DMA_CC1                        (TIM_DIER_CC1DE)
N#define TIM_DMA_CC2                        (TIM_DIER_CC2DE)
N#define TIM_DMA_CC3                        (TIM_DIER_CC3DE)
N#define TIM_DMA_CC4                        (TIM_DIER_CC4DE)
N#define TIM_DMA_TRIGGER                    (TIM_DIER_TDE)
N/**
N  * @}
N  */
N#define IS_TIM_DMA_SOURCE(__SOURCE__) ((((__SOURCE__) & 0xFFFFA0FFU) == 0x00000000U) && ((__SOURCE__) != 0x00000000U))
N
N
N    
N/** @defgroup TIM_Event_Source Event sources
N  * @{
N  */
N#define TIM_EVENTSOURCE_UPDATE            TIM_EGR_UG  
N#define TIM_EVENTSOURCE_CC1                 TIM_EGR_CC1G
N#define TIM_EVENTSOURCE_CC2                 TIM_EGR_CC2G
N#define TIM_EVENTSOURCE_CC3               TIM_EGR_CC3G
N#define TIM_EVENTSOURCE_CC4                 TIM_EGR_CC4G
N#define TIM_EVENTSOURCE_TRIGGER               TIM_EGR_TG    
N/**
N  * @}
N  */
N#define IS_TIM_EVENT_SOURCE(__SOURCE__) ((((__SOURCE__) & 0xFFFFFFA0U) == 0x00000000U) && ((__SOURCE__) != 0x00000000U))
N  
N
N/** @defgroup TIM_Flag_definition Flag definition
N  * @{
N  */                                
N#define TIM_FLAG_UPDATE                    (TIM_SR_UIF)
N#define TIM_FLAG_CC1                       (TIM_SR_CC1IF)
N#define TIM_FLAG_CC2                       (TIM_SR_CC2IF)
N#define TIM_FLAG_CC3                       (TIM_SR_CC3IF)
N#define TIM_FLAG_CC4                       (TIM_SR_CC4IF)
N#define TIM_FLAG_TRIGGER                   (TIM_SR_TIF)
N#define TIM_FLAG_CC1OF                     (TIM_SR_CC1OF)
N#define TIM_FLAG_CC2OF                     (TIM_SR_CC2OF)
N#define TIM_FLAG_CC3OF                     (TIM_SR_CC3OF)
N#define TIM_FLAG_CC4OF                     (TIM_SR_CC4OF)
N/**
N  * @}
N  */
N
N/** @defgroup TIM_Clock_Source Clock source
N  * @{
N  */ 
N#define  TIM_CLOCKSOURCE_ETRMODE2    (TIM_SMCR_ETPS_1)
N#define  TIM_CLOCKSOURCE_INTERNAL    (TIM_SMCR_ETPS_0)
N#define  TIM_CLOCKSOURCE_ITR0        ((uint32_t)0x0000U)
N#define  TIM_CLOCKSOURCE_ITR1        (TIM_SMCR_TS_0)
N#define  TIM_CLOCKSOURCE_ITR2        (TIM_SMCR_TS_1)
N#define  TIM_CLOCKSOURCE_ITR3        (TIM_SMCR_TS_0 | TIM_SMCR_TS_1)
N#define  TIM_CLOCKSOURCE_TI1ED       (TIM_SMCR_TS_2)
N#define  TIM_CLOCKSOURCE_TI1         (TIM_SMCR_TS_0 | TIM_SMCR_TS_2)
N#define  TIM_CLOCKSOURCE_TI2         (TIM_SMCR_TS_1 | TIM_SMCR_TS_2)
N#define  TIM_CLOCKSOURCE_ETRMODE1    (TIM_SMCR_TS)
N/**
N  * @}
N  */
N
N#define IS_TIM_CLOCKSOURCE(__CLOCK__) (((__CLOCK__) == TIM_CLOCKSOURCE_INTERNAL) || \
N                                       ((__CLOCK__) == TIM_CLOCKSOURCE_ETRMODE2) || \
N                                       ((__CLOCK__) == TIM_CLOCKSOURCE_ITR0)     || \
N                                       ((__CLOCK__) == TIM_CLOCKSOURCE_ITR1)     || \
N                                       ((__CLOCK__) == TIM_CLOCKSOURCE_ITR2)     || \
N                                       ((__CLOCK__) == TIM_CLOCKSOURCE_ITR3)     || \
N                                       ((__CLOCK__) == TIM_CLOCKSOURCE_TI1ED)    || \
N                                       ((__CLOCK__) == TIM_CLOCKSOURCE_TI1)      || \
N                                       ((__CLOCK__) == TIM_CLOCKSOURCE_TI2)      || \
N                                       ((__CLOCK__) == TIM_CLOCKSOURCE_ETRMODE1))
X#define IS_TIM_CLOCKSOURCE(__CLOCK__) (((__CLOCK__) == TIM_CLOCKSOURCE_INTERNAL) ||                                        ((__CLOCK__) == TIM_CLOCKSOURCE_ETRMODE2) ||                                        ((__CLOCK__) == TIM_CLOCKSOURCE_ITR0)     ||                                        ((__CLOCK__) == TIM_CLOCKSOURCE_ITR1)     ||                                        ((__CLOCK__) == TIM_CLOCKSOURCE_ITR2)     ||                                        ((__CLOCK__) == TIM_CLOCKSOURCE_ITR3)     ||                                        ((__CLOCK__) == TIM_CLOCKSOURCE_TI1ED)    ||                                        ((__CLOCK__) == TIM_CLOCKSOURCE_TI1)      ||                                        ((__CLOCK__) == TIM_CLOCKSOURCE_TI2)      ||                                        ((__CLOCK__) == TIM_CLOCKSOURCE_ETRMODE1))
N
N
N/** @defgroup TIM_Clock_Polarity Clock polarity
N  * @{
N  */
N#define TIM_CLOCKPOLARITY_INVERTED           TIM_ETRPOLARITY_INVERTED          /*!< Polarity for ETRx clock sources */ 
N#define TIM_CLOCKPOLARITY_NONINVERTED        TIM_ETRPOLARITY_NONINVERTED       /*!< Polarity for ETRx clock sources */ 
N#define TIM_CLOCKPOLARITY_RISING             TIM_INPUTCHANNELPOLARITY_RISING   /*!< Polarity for TIx clock sources */ 
N#define TIM_CLOCKPOLARITY_FALLING            TIM_INPUTCHANNELPOLARITY_FALLING   /*!< Polarity for TIx clock sources */ 
N#define TIM_CLOCKPOLARITY_BOTHEDGE           TIM_INPUTCHANNELPOLARITY_BOTHEDGE  /*!< Polarity for TIx clock sources */ 
N/**
N  * @}
N  */
N#define IS_TIM_CLOCKPOLARITY(__POLARITY__) (((__POLARITY__) == TIM_CLOCKPOLARITY_INVERTED)    || \
N                                            ((__POLARITY__) == TIM_CLOCKPOLARITY_NONINVERTED) || \
N                                            ((__POLARITY__) == TIM_CLOCKPOLARITY_RISING)      || \
N                                            ((__POLARITY__) == TIM_CLOCKPOLARITY_FALLING)     || \
N                                            ((__POLARITY__) == TIM_CLOCKPOLARITY_BOTHEDGE))
X#define IS_TIM_CLOCKPOLARITY(__POLARITY__) (((__POLARITY__) == TIM_CLOCKPOLARITY_INVERTED)    ||                                             ((__POLARITY__) == TIM_CLOCKPOLARITY_NONINVERTED) ||                                             ((__POLARITY__) == TIM_CLOCKPOLARITY_RISING)      ||                                             ((__POLARITY__) == TIM_CLOCKPOLARITY_FALLING)     ||                                             ((__POLARITY__) == TIM_CLOCKPOLARITY_BOTHEDGE))
N
N/** @defgroup TIM_Clock_Prescaler Clock prescaler
N  * @{
N  */                
N#define TIM_CLOCKPRESCALER_DIV1                 TIM_ETRPRESCALER_DIV1     /*!< No prescaler is used */
N#define TIM_CLOCKPRESCALER_DIV2                 TIM_ETRPRESCALER_DIV2     /*!< Prescaler for External ETR Clock: Capture performed once every 2 events. */
N#define TIM_CLOCKPRESCALER_DIV4                 TIM_ETRPRESCALER_DIV4     /*!< Prescaler for External ETR Clock: Capture performed once every 4 events. */
N#define TIM_CLOCKPRESCALER_DIV8                 TIM_ETRPRESCALER_DIV8     /*!< Prescaler for External ETR Clock: Capture performed once every 8 events. */
N/**
N  * @}
N  */
N#define IS_TIM_CLOCKPRESCALER(__PRESCALER__) (((__PRESCALER__) == TIM_CLOCKPRESCALER_DIV1) || \
N                                              ((__PRESCALER__) == TIM_CLOCKPRESCALER_DIV2) || \
N                                              ((__PRESCALER__) == TIM_CLOCKPRESCALER_DIV4) || \
N                                              ((__PRESCALER__) == TIM_CLOCKPRESCALER_DIV8))
X#define IS_TIM_CLOCKPRESCALER(__PRESCALER__) (((__PRESCALER__) == TIM_CLOCKPRESCALER_DIV1) ||                                               ((__PRESCALER__) == TIM_CLOCKPRESCALER_DIV2) ||                                               ((__PRESCALER__) == TIM_CLOCKPRESCALER_DIV4) ||                                               ((__PRESCALER__) == TIM_CLOCKPRESCALER_DIV8))
N
N  
N/* Check clock filter */
N#define IS_TIM_CLOCKFILTER(__ICFILTER__)      ((__ICFILTER__) <= 0xFU)
N
N/** @defgroup TIM_ClearInput_Source Clear input source
N  * @{
N  */
N#define TIM_CLEARINPUTSOURCE_ETR           ((uint32_t)0x0001U) 
N#define TIM_CLEARINPUTSOURCE_NONE          ((uint32_t)0x0000U)
N/**
N  * @}
N  */
N
N#define IS_TIM_CLEARINPUT_SOURCE(__SOURCE__)  (((__SOURCE__) == TIM_CLEARINPUTSOURCE_NONE) || \
N                                               ((__SOURCE__) == TIM_CLEARINPUTSOURCE_ETR))
X#define IS_TIM_CLEARINPUT_SOURCE(__SOURCE__)  (((__SOURCE__) == TIM_CLEARINPUTSOURCE_NONE) ||                                                ((__SOURCE__) == TIM_CLEARINPUTSOURCE_ETR))
N
N
N/** @defgroup TIM_ClearInput_Polarity Clear input polarity
N  * @{
N  */
N#define TIM_CLEARINPUTPOLARITY_INVERTED           TIM_ETRPOLARITY_INVERTED                    /*!< Polarity for ETRx pin */ 
N#define TIM_CLEARINPUTPOLARITY_NONINVERTED        TIM_ETRPOLARITY_NONINVERTED                 /*!< Polarity for ETRx pin */ 
N/**
N  * @}
N  */ 
N#define IS_TIM_CLEARINPUT_POLARITY(__POLARITY__)   (((__POLARITY__) == TIM_CLEARINPUTPOLARITY_INVERTED) || \
N                                                    ((__POLARITY__) == TIM_CLEARINPUTPOLARITY_NONINVERTED))
X#define IS_TIM_CLEARINPUT_POLARITY(__POLARITY__)   (((__POLARITY__) == TIM_CLEARINPUTPOLARITY_INVERTED) ||                                                     ((__POLARITY__) == TIM_CLEARINPUTPOLARITY_NONINVERTED))
N
N
N/** @defgroup TIM_ClearInput_Prescaler Clear input prescaler
N  * @{
N  */
N#define TIM_CLEARINPUTPRESCALER_DIV1                    TIM_ETRPRESCALER_DIV1      /*!< No prescaler is used */
N#define TIM_CLEARINPUTPRESCALER_DIV2                    TIM_ETRPRESCALER_DIV2      /*!< Prescaler for External ETR pin: Capture performed once every 2 events. */
N#define TIM_CLEARINPUTPRESCALER_DIV4                    TIM_ETRPRESCALER_DIV4      /*!< Prescaler for External ETR pin: Capture performed once every 4 events. */
N#define TIM_CLEARINPUTPRESCALER_DIV8                    TIM_ETRPRESCALER_DIV8        /*!< Prescaler for External ETR pin: Capture performed once every 8 events. */
N/**
N  * @}
N  */
N#define IS_TIM_CLEARINPUT_PRESCALER(__PRESCALER__)   (((__PRESCALER__) == TIM_CLEARINPUTPRESCALER_DIV1) || \
N                                                      ((__PRESCALER__) == TIM_CLEARINPUTPRESCALER_DIV2) || \
N                                                      ((__PRESCALER__) == TIM_CLEARINPUTPRESCALER_DIV4) || \
N                                                      ((__PRESCALER__) == TIM_CLEARINPUTPRESCALER_DIV8))
X#define IS_TIM_CLEARINPUT_PRESCALER(__PRESCALER__)   (((__PRESCALER__) == TIM_CLEARINPUTPRESCALER_DIV1) ||                                                       ((__PRESCALER__) == TIM_CLEARINPUTPRESCALER_DIV2) ||                                                       ((__PRESCALER__) == TIM_CLEARINPUTPRESCALER_DIV4) ||                                                       ((__PRESCALER__) == TIM_CLEARINPUTPRESCALER_DIV8))
N
N  
N/* Check IC filter */
N#define IS_TIM_CLEARINPUT_FILTER(ICFILTER) ((ICFILTER) <= 0xFU) 
N
N  
N/** @defgroup TIM_Master_Mode_Selection TIM Master Mode Selection
N  * @{
N  */  
N#define  TIM_TRGO_RESET            ((uint32_t)0x0000U)
N#define  TIM_TRGO_ENABLE           (TIM_CR2_MMS_0)
N#define  TIM_TRGO_UPDATE           (TIM_CR2_MMS_1)
N#define  TIM_TRGO_OC1              ((TIM_CR2_MMS_1 | TIM_CR2_MMS_0))
N#define  TIM_TRGO_OC1REF           (TIM_CR2_MMS_2)
N#define  TIM_TRGO_OC2REF           ((TIM_CR2_MMS_2 | TIM_CR2_MMS_0))
N#define  TIM_TRGO_OC3REF           ((TIM_CR2_MMS_2 | TIM_CR2_MMS_1))
N#define  TIM_TRGO_OC4REF           ((TIM_CR2_MMS_2 | TIM_CR2_MMS_1 | TIM_CR2_MMS_0))
N/**
N  * @}
N  */
N#define IS_TIM_TRGO_SOURCE(__SOURCE__) (((__SOURCE__) == TIM_TRGO_RESET) || \
N                                        ((__SOURCE__) == TIM_TRGO_ENABLE) || \
N                                        ((__SOURCE__) == TIM_TRGO_UPDATE) || \
N                                        ((__SOURCE__) == TIM_TRGO_OC1) || \
N                                        ((__SOURCE__) == TIM_TRGO_OC1REF) || \
N                                        ((__SOURCE__) == TIM_TRGO_OC2REF) || \
N                                        ((__SOURCE__) == TIM_TRGO_OC3REF) || \
N                                        ((__SOURCE__) == TIM_TRGO_OC4REF))
X#define IS_TIM_TRGO_SOURCE(__SOURCE__) (((__SOURCE__) == TIM_TRGO_RESET) ||                                         ((__SOURCE__) == TIM_TRGO_ENABLE) ||                                         ((__SOURCE__) == TIM_TRGO_UPDATE) ||                                         ((__SOURCE__) == TIM_TRGO_OC1) ||                                         ((__SOURCE__) == TIM_TRGO_OC1REF) ||                                         ((__SOURCE__) == TIM_TRGO_OC2REF) ||                                         ((__SOURCE__) == TIM_TRGO_OC3REF) ||                                         ((__SOURCE__) == TIM_TRGO_OC4REF))
N      
N   
N
N/** @defgroup TIM_Slave_Mode Slave mode
N  * @{
N  */
N#define TIM_SLAVEMODE_DISABLE              ((uint32_t)0x0000U)
N#define TIM_SLAVEMODE_RESET                ((uint32_t)0x0004U)
N#define TIM_SLAVEMODE_GATED                ((uint32_t)0x0005U)
N#define TIM_SLAVEMODE_TRIGGER              ((uint32_t)0x0006U)
N#define TIM_SLAVEMODE_EXTERNAL1            ((uint32_t)0x0007U)
N/**
N  * @}
N  */
N#define IS_TIM_SLAVE_MODE(__MODE__) (((__MODE__) == TIM_SLAVEMODE_DISABLE) || \
N                                     ((__MODE__) == TIM_SLAVEMODE_GATED) || \
N                                     ((__MODE__) == TIM_SLAVEMODE_RESET) || \
N                                     ((__MODE__) == TIM_SLAVEMODE_TRIGGER) || \
N                                     ((__MODE__) == TIM_SLAVEMODE_EXTERNAL1))
X#define IS_TIM_SLAVE_MODE(__MODE__) (((__MODE__) == TIM_SLAVEMODE_DISABLE) ||                                      ((__MODE__) == TIM_SLAVEMODE_GATED) ||                                      ((__MODE__) == TIM_SLAVEMODE_RESET) ||                                      ((__MODE__) == TIM_SLAVEMODE_TRIGGER) ||                                      ((__MODE__) == TIM_SLAVEMODE_EXTERNAL1))
N
N/** @defgroup TIM_Master_Slave_Mode Master slave mode
N  * @{
N  */
N
N#define TIM_MASTERSLAVEMODE_ENABLE          ((uint32_t)0x0080U)
N#define TIM_MASTERSLAVEMODE_DISABLE         ((uint32_t)0x0000U)
N/**
N  * @}
N  */
N#define IS_TIM_MSM_STATE(__STATE__) (((__STATE__) == TIM_MASTERSLAVEMODE_ENABLE) || \
N                                     ((__STATE__) == TIM_MASTERSLAVEMODE_DISABLE))
X#define IS_TIM_MSM_STATE(__STATE__) (((__STATE__) == TIM_MASTERSLAVEMODE_ENABLE) ||                                      ((__STATE__) == TIM_MASTERSLAVEMODE_DISABLE))
N
N/** @defgroup TIM_Trigger_Selection Trigger selection
N  * @{
N  */
N#define TIM_TS_ITR0                        ((uint32_t)0x0000U)
N#define TIM_TS_ITR1                        ((uint32_t)0x0010U)
N#define TIM_TS_ITR2                        ((uint32_t)0x0020U)
N#define TIM_TS_ITR3                        ((uint32_t)0x0030U)
N#define TIM_TS_TI1F_ED                     ((uint32_t)0x0040U)
N#define TIM_TS_TI1FP1                      ((uint32_t)0x0050U)
N#define TIM_TS_TI2FP2                      ((uint32_t)0x0060U)
N#define TIM_TS_ETRF                        ((uint32_t)0x0070U)
N#define TIM_TS_NONE                        ((uint32_t)0xFFFFU)
N/**
N  * @}
N  */
N#define IS_TIM_TRIGGER_SELECTION(__SELECTION__) (((__SELECTION__) == TIM_TS_ITR0) || \
N                                                 ((__SELECTION__) == TIM_TS_ITR1) || \
N                                                 ((__SELECTION__) == TIM_TS_ITR2) || \
N                                                 ((__SELECTION__) == TIM_TS_ITR3) || \
N                                                 ((__SELECTION__) == TIM_TS_TI1F_ED) || \
N                                                 ((__SELECTION__) == TIM_TS_TI1FP1) || \
N                                                 ((__SELECTION__) == TIM_TS_TI2FP2) || \
N                                                 ((__SELECTION__) == TIM_TS_ETRF))
X#define IS_TIM_TRIGGER_SELECTION(__SELECTION__) (((__SELECTION__) == TIM_TS_ITR0) ||                                                  ((__SELECTION__) == TIM_TS_ITR1) ||                                                  ((__SELECTION__) == TIM_TS_ITR2) ||                                                  ((__SELECTION__) == TIM_TS_ITR3) ||                                                  ((__SELECTION__) == TIM_TS_TI1F_ED) ||                                                  ((__SELECTION__) == TIM_TS_TI1FP1) ||                                                  ((__SELECTION__) == TIM_TS_TI2FP2) ||                                                  ((__SELECTION__) == TIM_TS_ETRF))
N#define IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(__SELECTION__) (((__SELECTION__) == TIM_TS_ITR0) || \
N                                                               ((__SELECTION__) == TIM_TS_ITR1) || \
N                                                               ((__SELECTION__) == TIM_TS_ITR2) || \
N                                                               ((__SELECTION__) == TIM_TS_ITR3) || \
N                                                               ((__SELECTION__) == TIM_TS_NONE))
X#define IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(__SELECTION__) (((__SELECTION__) == TIM_TS_ITR0) ||                                                                ((__SELECTION__) == TIM_TS_ITR1) ||                                                                ((__SELECTION__) == TIM_TS_ITR2) ||                                                                ((__SELECTION__) == TIM_TS_ITR3) ||                                                                ((__SELECTION__) == TIM_TS_NONE))
N
N
N/** @defgroup TIM_Trigger_Polarity Trigger polarity
N  * @{
N  */
N#define TIM_TRIGGERPOLARITY_INVERTED           TIM_ETRPOLARITY_INVERTED      /*!< Polarity for ETRx trigger sources */ 
N#define TIM_TRIGGERPOLARITY_NONINVERTED        TIM_ETRPOLARITY_NONINVERTED   /*!< Polarity for ETRx trigger sources */ 
N#define TIM_TRIGGERPOLARITY_RISING             TIM_INPUTCHANNELPOLARITY_RISING        /*!< Polarity for TIxFPx or TI1_ED trigger sources */ 
N#define TIM_TRIGGERPOLARITY_FALLING            TIM_INPUTCHANNELPOLARITY_FALLING       /*!< Polarity for TIxFPx or TI1_ED trigger sources */ 
N#define TIM_TRIGGERPOLARITY_BOTHEDGE           TIM_INPUTCHANNELPOLARITY_BOTHEDGE      /*!< Polarity for TIxFPx or TI1_ED trigger sources */ 
N/**
N  * @}
N  */
N#define IS_TIM_TRIGGERPOLARITY(__POLARITY__) (((__POLARITY__) == TIM_TRIGGERPOLARITY_INVERTED   ) || \
N                                              ((__POLARITY__) == TIM_TRIGGERPOLARITY_NONINVERTED) || \
N                                              ((__POLARITY__) == TIM_TRIGGERPOLARITY_RISING     ) || \
N                                              ((__POLARITY__) == TIM_TRIGGERPOLARITY_FALLING    ) || \
N                                              ((__POLARITY__) == TIM_TRIGGERPOLARITY_BOTHEDGE   ))
X#define IS_TIM_TRIGGERPOLARITY(__POLARITY__) (((__POLARITY__) == TIM_TRIGGERPOLARITY_INVERTED   ) ||                                               ((__POLARITY__) == TIM_TRIGGERPOLARITY_NONINVERTED) ||                                               ((__POLARITY__) == TIM_TRIGGERPOLARITY_RISING     ) ||                                               ((__POLARITY__) == TIM_TRIGGERPOLARITY_FALLING    ) ||                                               ((__POLARITY__) == TIM_TRIGGERPOLARITY_BOTHEDGE   ))
N
N
N/** @defgroup TIM_Trigger_Prescaler Trigger prescaler
N  * @{
N  */                
N#define TIM_TRIGGERPRESCALER_DIV1             TIM_ETRPRESCALER_DIV1     /*!< No prescaler is used */
N#define TIM_TRIGGERPRESCALER_DIV2             TIM_ETRPRESCALER_DIV2     /*!< Prescaler for External ETR Trigger: Capture performed once every 2 events. */
N#define TIM_TRIGGERPRESCALER_DIV4             TIM_ETRPRESCALER_DIV4     /*!< Prescaler for External ETR Trigger: Capture performed once every 4 events. */
N#define TIM_TRIGGERPRESCALER_DIV8             TIM_ETRPRESCALER_DIV8     /*!< Prescaler for External ETR Trigger: Capture performed once every 8 events. */
N/**
N  * @}
N  */
N#define IS_TIM_TRIGGERPRESCALER(__PRESCALER__) (((__PRESCALER__) == TIM_TRIGGERPRESCALER_DIV1) || \
N                                                ((__PRESCALER__) == TIM_TRIGGERPRESCALER_DIV2) || \
N                                                ((__PRESCALER__) == TIM_TRIGGERPRESCALER_DIV4) || \
N                                                ((__PRESCALER__) == TIM_TRIGGERPRESCALER_DIV8))
X#define IS_TIM_TRIGGERPRESCALER(__PRESCALER__) (((__PRESCALER__) == TIM_TRIGGERPRESCALER_DIV1) ||                                                 ((__PRESCALER__) == TIM_TRIGGERPRESCALER_DIV2) ||                                                 ((__PRESCALER__) == TIM_TRIGGERPRESCALER_DIV4) ||                                                 ((__PRESCALER__) == TIM_TRIGGERPRESCALER_DIV8))
N
N
N/* Check trigger filter */
N#define IS_TIM_TRIGGERFILTER(__ICFILTER__)     ((__ICFILTER__) <= 0xFU)
N
N
N /** @defgroup TIM_TI1_Selection TI1 selection
N  * @{
N  */
N#define TIM_TI1SELECTION_CH1                ((uint32_t)0x0000U)
N#define TIM_TI1SELECTION_XORCOMBINATION     (TIM_CR2_TI1S)
N/**
N  * @}
N  */
N#define IS_TIM_TI1SELECTION(__TI1SELECTION__) (((__TI1SELECTION__) == TIM_TI1SELECTION_CH1) || \
N                                               ((__TI1SELECTION__) == TIM_TI1SELECTION_XORCOMBINATION))
X#define IS_TIM_TI1SELECTION(__TI1SELECTION__) (((__TI1SELECTION__) == TIM_TI1SELECTION_CH1) ||                                                ((__TI1SELECTION__) == TIM_TI1SELECTION_XORCOMBINATION))
N
N  
N/** @defgroup TIM_DMA_Base_address DMA base address
N  * @{
N  */
N#define TIM_DMABASE_CR1                    (0x00000000U)
N#define TIM_DMABASE_CR2                    (0x00000001U)
N#define TIM_DMABASE_SMCR                   (0x00000002U)
N#define TIM_DMABASE_DIER                   (0x00000003U)
N#define TIM_DMABASE_SR                     (0x00000004U)
N#define TIM_DMABASE_EGR                    (0x00000005U)
N#define TIM_DMABASE_CCMR1                  (0x00000006U)
N#define TIM_DMABASE_CCMR2                  (0x00000007U)
N#define TIM_DMABASE_CCER                   (0x00000008U)
N#define TIM_DMABASE_CNT                    (0x00000009U)
N#define TIM_DMABASE_PSC                    (0x0000000AU)
N#define TIM_DMABASE_ARR                    (0x0000000BU)
N#define TIM_DMABASE_CCR1                   (0x0000000DU)
N#define TIM_DMABASE_CCR2                   (0x0000000EU)
N#define TIM_DMABASE_CCR3                   (0x0000000FU)
N#define TIM_DMABASE_CCR4                   (0x00000010U)
N#define TIM_DMABASE_DCR                    (0x00000012U)
N#define TIM_DMABASE_OR                     (0x00000013U)
N/**
N  * @}
N  */
N#define IS_TIM_DMA_BASE(__BASE__) (((__BASE__) == TIM_DMABASE_CR1) || \
N                                   ((__BASE__) == TIM_DMABASE_CR2) || \
N                                   ((__BASE__) == TIM_DMABASE_SMCR) || \
N                                   ((__BASE__) == TIM_DMABASE_DIER) || \
N                                   ((__BASE__) == TIM_DMABASE_SR) || \
N                                   ((__BASE__) == TIM_DMABASE_EGR) || \
N                                   ((__BASE__) == TIM_DMABASE_CCMR1) || \
N                                   ((__BASE__) == TIM_DMABASE_CCMR2  ) || \
N                                   ((__BASE__) == TIM_DMABASE_CCER) || \
N                                   ((__BASE__) == TIM_DMABASE_CNT) || \
N                                   ((__BASE__) == TIM_DMABASE_PSC) || \
N                                   ((__BASE__) == TIM_DMABASE_ARR) || \
N                                   ((__BASE__) == TIM_DMABASE_CCR1) || \
N                                   ((__BASE__) == TIM_DMABASE_CCR2) || \
N                                   ((__BASE__) == TIM_DMABASE_CCR3) || \
N                                   ((__BASE__) == TIM_DMABASE_CCR4) || \
N                                   ((__BASE__) == TIM_DMABASE_DCR) || \
N                                   ((__BASE__) == TIM_DMABASE_OR))
X#define IS_TIM_DMA_BASE(__BASE__) (((__BASE__) == TIM_DMABASE_CR1) ||                                    ((__BASE__) == TIM_DMABASE_CR2) ||                                    ((__BASE__) == TIM_DMABASE_SMCR) ||                                    ((__BASE__) == TIM_DMABASE_DIER) ||                                    ((__BASE__) == TIM_DMABASE_SR) ||                                    ((__BASE__) == TIM_DMABASE_EGR) ||                                    ((__BASE__) == TIM_DMABASE_CCMR1) ||                                    ((__BASE__) == TIM_DMABASE_CCMR2  ) ||                                    ((__BASE__) == TIM_DMABASE_CCER) ||                                    ((__BASE__) == TIM_DMABASE_CNT) ||                                    ((__BASE__) == TIM_DMABASE_PSC) ||                                    ((__BASE__) == TIM_DMABASE_ARR) ||                                    ((__BASE__) == TIM_DMABASE_CCR1) ||                                    ((__BASE__) == TIM_DMABASE_CCR2) ||                                    ((__BASE__) == TIM_DMABASE_CCR3) ||                                    ((__BASE__) == TIM_DMABASE_CCR4) ||                                    ((__BASE__) == TIM_DMABASE_DCR) ||                                    ((__BASE__) == TIM_DMABASE_OR))
N
N
N/** @defgroup TIM_DMA_Burst_Length DMA burst length
N  * @{
N  */
N#define TIM_DMABURSTLENGTH_1TRANSFER           (0x00000000U)
N#define TIM_DMABURSTLENGTH_2TRANSFERS          (0x00000100U)
N#define TIM_DMABURSTLENGTH_3TRANSFERS          (0x00000200U)
N#define TIM_DMABURSTLENGTH_4TRANSFERS          (0x00000300U)
N#define TIM_DMABURSTLENGTH_5TRANSFERS          (0x00000400U)
N#define TIM_DMABURSTLENGTH_6TRANSFERS          (0x00000500U)
N#define TIM_DMABURSTLENGTH_7TRANSFERS          (0x00000600U)
N#define TIM_DMABURSTLENGTH_8TRANSFERS          (0x00000700U)
N#define TIM_DMABURSTLENGTH_9TRANSFERS          (0x00000800U)
N#define TIM_DMABURSTLENGTH_10TRANSFERS         (0x00000900U)
N#define TIM_DMABURSTLENGTH_11TRANSFERS         (0x00000A00U)
N#define TIM_DMABURSTLENGTH_12TRANSFERS         (0x00000B00U)
N#define TIM_DMABURSTLENGTH_13TRANSFERS         (0x00000C00U)
N#define TIM_DMABURSTLENGTH_14TRANSFERS         (0x00000D00U)
N#define TIM_DMABURSTLENGTH_15TRANSFERS         (0x00000E00U)
N#define TIM_DMABURSTLENGTH_16TRANSFERS         (0x00000F00U)
N#define TIM_DMABURSTLENGTH_17TRANSFERS         (0x00001000U)
N#define TIM_DMABURSTLENGTH_18TRANSFERS         (0x00001100U)
N/**
N  * @}
N  */
N#define IS_TIM_DMA_LENGTH(__LENGTH__) (((__LENGTH__) == TIM_DMABURSTLENGTH_1TRANSFER  ) || \
N                                       ((__LENGTH__) == TIM_DMABURSTLENGTH_2TRANSFERS) || \
N                                       ((__LENGTH__) == TIM_DMABURSTLENGTH_3TRANSFERS) || \
N                                       ((__LENGTH__) == TIM_DMABURSTLENGTH_4TRANSFERS) || \
N                                       ((__LENGTH__) == TIM_DMABURSTLENGTH_5TRANSFERS) || \
N                                       ((__LENGTH__) == TIM_DMABURSTLENGTH_6TRANSFERS) || \
N                                       ((__LENGTH__) == TIM_DMABURSTLENGTH_7TRANSFERS) || \
N                                       ((__LENGTH__) == TIM_DMABURSTLENGTH_8TRANSFERS) || \
N                                       ((__LENGTH__) == TIM_DMABURSTLENGTH_9TRANSFERS  ) || \
N                                       ((__LENGTH__) == TIM_DMABURSTLENGTH_10TRANSFERS) || \
N                                       ((__LENGTH__) == TIM_DMABURSTLENGTH_11TRANSFERS  ) || \
N                                       ((__LENGTH__) == TIM_DMABURSTLENGTH_12TRANSFERS) || \
N                                       ((__LENGTH__) == TIM_DMABURSTLENGTH_13TRANSFERS) || \
N                                       ((__LENGTH__) == TIM_DMABURSTLENGTH_14TRANSFERS) || \
N                                       ((__LENGTH__) == TIM_DMABURSTLENGTH_15TRANSFERS) || \
N                                       ((__LENGTH__) == TIM_DMABURSTLENGTH_16TRANSFERS) || \
N                                       ((__LENGTH__) == TIM_DMABURSTLENGTH_17TRANSFERS) || \
N                                       ((__LENGTH__) == TIM_DMABURSTLENGTH_18TRANSFERS  ))
X#define IS_TIM_DMA_LENGTH(__LENGTH__) (((__LENGTH__) == TIM_DMABURSTLENGTH_1TRANSFER  ) ||                                        ((__LENGTH__) == TIM_DMABURSTLENGTH_2TRANSFERS) ||                                        ((__LENGTH__) == TIM_DMABURSTLENGTH_3TRANSFERS) ||                                        ((__LENGTH__) == TIM_DMABURSTLENGTH_4TRANSFERS) ||                                        ((__LENGTH__) == TIM_DMABURSTLENGTH_5TRANSFERS) ||                                        ((__LENGTH__) == TIM_DMABURSTLENGTH_6TRANSFERS) ||                                        ((__LENGTH__) == TIM_DMABURSTLENGTH_7TRANSFERS) ||                                        ((__LENGTH__) == TIM_DMABURSTLENGTH_8TRANSFERS) ||                                        ((__LENGTH__) == TIM_DMABURSTLENGTH_9TRANSFERS  ) ||                                        ((__LENGTH__) == TIM_DMABURSTLENGTH_10TRANSFERS) ||                                        ((__LENGTH__) == TIM_DMABURSTLENGTH_11TRANSFERS  ) ||                                        ((__LENGTH__) == TIM_DMABURSTLENGTH_12TRANSFERS) ||                                        ((__LENGTH__) == TIM_DMABURSTLENGTH_13TRANSFERS) ||                                        ((__LENGTH__) == TIM_DMABURSTLENGTH_14TRANSFERS) ||                                        ((__LENGTH__) == TIM_DMABURSTLENGTH_15TRANSFERS) ||                                        ((__LENGTH__) == TIM_DMABURSTLENGTH_16TRANSFERS) ||                                        ((__LENGTH__) == TIM_DMABURSTLENGTH_17TRANSFERS) ||                                        ((__LENGTH__) == TIM_DMABURSTLENGTH_18TRANSFERS  ))
N
N
N/* Check IC filter */
N#define IS_TIM_IC_FILTER(__ICFILTER__) ((__ICFILTER__) <= 0xFU)
N
N/** @defgroup DMA_Handle_index DMA handle index
N  * @{
N  */
N#define TIM_DMA_ID_UPDATE                ((uint16_t) 0x0U)       /*!< Index of the DMA handle used for Update DMA requests */
N#define TIM_DMA_ID_CC1                   ((uint16_t) 0x1U)       /*!< Index of the DMA handle used for Capture/Compare 1 DMA requests */
N#define TIM_DMA_ID_CC2                   ((uint16_t) 0x2U)       /*!< Index of the DMA handle used for Capture/Compare 2 DMA requests */
N#define TIM_DMA_ID_CC3                   ((uint16_t) 0x3U)       /*!< Index of the DMA handle used for Capture/Compare 3 DMA requests */
N#define TIM_DMA_ID_CC4                   ((uint16_t) 0x4U)       /*!< Index of the DMA handle used for Capture/Compare 4 DMA requests */
N#define TIM_DMA_ID_TRIGGER               ((uint16_t) 0x5U)       /*!< Index of the DMA handle used for Trigger DMA requests */
N/**
N  * @}
N  */ 
N
N/** @defgroup Channel_CC_State Channel state
N  * @{
N  */
N#define TIM_CCx_ENABLE                   ((uint32_t)0x0001U)
N#define TIM_CCx_DISABLE                  ((uint32_t)0x0000U)
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */   
N  
N/* Exported macro ------------------------------------------------------------*/
N/** @defgroup TIM_Exported_Macro TIM Exported Macro
N  * @{
N  */
N
N/** @brief Reset UART handle state
N  * @param  __HANDLE__ : TIM handle
N  * @retval None
N  */
N#define __HAL_TIM_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_TIM_STATE_RESET)
N
N/**
N  * @brief  Enable the TIM peripheral.
N  * @param  __HANDLE__ : TIM handle
N  * @retval None
N */
N#define __HAL_TIM_ENABLE(__HANDLE__)                 ((__HANDLE__)->Instance->CR1|=(TIM_CR1_CEN))
N
N/* The counter of a timer instance is disabled only if all the CCx channels have
N   been disabled */
N#define TIM_CCER_CCxE_MASK ((uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E))
N
N/**
N  * @brief  Disable the TIM peripheral.
N  * @param  __HANDLE__ : TIM handle
N  * @retval None
N  */
N#define __HAL_TIM_DISABLE(__HANDLE__) \
N                        do { \
N                          if (((__HANDLE__)->Instance->CCER & TIM_CCER_CCxE_MASK) == 0U) \
N                          { \
N                            (__HANDLE__)->Instance->CR1 &= ~(TIM_CR1_CEN); \
N                          } \
N                        } while(0) 
X#define __HAL_TIM_DISABLE(__HANDLE__)                         do {                           if (((__HANDLE__)->Instance->CCER & TIM_CCER_CCxE_MASK) == 0U)                           {                             (__HANDLE__)->Instance->CR1 &= ~(TIM_CR1_CEN);                           }                         } while(0) 
N
N#define __HAL_TIM_ENABLE_IT(__HANDLE__, __INTERRUPT__)    ((__HANDLE__)->Instance->DIER |= (__INTERRUPT__))
N#define __HAL_TIM_ENABLE_DMA(__HANDLE__, __DMA__)         ((__HANDLE__)->Instance->DIER |= (__DMA__))
N#define __HAL_TIM_DISABLE_IT(__HANDLE__, __INTERRUPT__)   ((__HANDLE__)->Instance->DIER &= ~(__INTERRUPT__))
N#define __HAL_TIM_DISABLE_DMA(__HANDLE__, __DMA__)        ((__HANDLE__)->Instance->DIER &= ~(__DMA__))
N#define __HAL_TIM_GET_FLAG(__HANDLE__, __FLAG__)          (((__HANDLE__)->Instance->SR &(__FLAG__)) == (__FLAG__))
N#define __HAL_TIM_CLEAR_FLAG(__HANDLE__, __FLAG__)        ((__HANDLE__)->Instance->SR = ~(__FLAG__))
N
N#define __HAL_TIM_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__) ((((__HANDLE__)->Instance->DIER & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)
N#define __HAL_TIM_CLEAR_IT(__HANDLE__, __INTERRUPT__)     ((__HANDLE__)->Instance->SR = ~(__INTERRUPT__))
N
N#define __HAL_TIM_IS_TIM_COUNTING_DOWN(__HANDLE__)            (((__HANDLE__)->Instance->CR1 &(TIM_CR1_DIR)) == (TIM_CR1_DIR))
N#define __HAL_TIM_SET_PRESCALER(__HANDLE__, __PRESC__)        ((__HANDLE__)->Instance->PSC = (__PRESC__))
N
N#define TIM_SET_ICPRESCALERVALUE(__HANDLE__, __CHANNEL__, __ICPSC__) \
N(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 |= (__ICPSC__)) :\
N ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCMR1 |= ((__ICPSC__) << 8U)) :\
N ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 |= (__ICPSC__)) :\
N ((__HANDLE__)->Instance->CCMR2 |= ((__ICPSC__) << 8)))
X#define TIM_SET_ICPRESCALERVALUE(__HANDLE__, __CHANNEL__, __ICPSC__) (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 |= (__ICPSC__)) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCMR1 |= ((__ICPSC__) << 8U)) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 |= (__ICPSC__)) : ((__HANDLE__)->Instance->CCMR2 |= ((__ICPSC__) << 8)))
N
N#define TIM_RESET_ICPRESCALERVALUE(__HANDLE__, __CHANNEL__) \
N(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC) :\
N ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC) :\
N ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC) :\
N ((__HANDLE__)->Instance->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC))
X#define TIM_RESET_ICPRESCALERVALUE(__HANDLE__, __CHANNEL__) (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC) : ((__HANDLE__)->Instance->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC))
N                          
N#define TIM_SET_CAPTUREPOLARITY(__HANDLE__, __CHANNEL__, __POLARITY__) \
N(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCER |= (__POLARITY__)) :\
N ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCER |= ((__POLARITY__) << 4U)) :\
N ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCER |= ((__POLARITY__) << 8U)) :\
N ((__HANDLE__)->Instance->CCER |= (((__POLARITY__) << 12U) & TIM_CCER_CC4P)))
X#define TIM_SET_CAPTUREPOLARITY(__HANDLE__, __CHANNEL__, __POLARITY__) (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCER |= (__POLARITY__)) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCER |= ((__POLARITY__) << 4U)) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCER |= ((__POLARITY__) << 8U)) : ((__HANDLE__)->Instance->CCER |= (((__POLARITY__) << 12U) & TIM_CCER_CC4P)))
N
N#define TIM_RESET_CAPTUREPOLARITY(__HANDLE__, __CHANNEL__) \
N(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP)) :\
N ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP)) :\
N ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP)) :\
N ((__HANDLE__)->Instance->CCER &= (uint16_t)~TIM_CCER_CC4P))
X#define TIM_RESET_CAPTUREPOLARITY(__HANDLE__, __CHANNEL__) (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP)) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP)) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP)) : ((__HANDLE__)->Instance->CCER &= (uint16_t)~TIM_CCER_CC4P))
N
N/**
N  * @brief  Sets the TIM Capture Compare Register value on runtime without
N  *         calling another time ConfigChannel function.
N  * @param  __HANDLE__ : TIM handle.
N  * @param  __CHANNEL__ : TIM Channels to be configured.
N  *          This parameter can be one of the following values:
N  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
N  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
N  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
N  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
N  * @param  __COMPARE__: specifies the Capture Compare register new value.
N  * @retval None
N  */
N#define __HAL_TIM_SET_COMPARE(__HANDLE__, __CHANNEL__, __COMPARE__) \
N(*(__IO uint32_t *)(&((__HANDLE__)->Instance->CCR1) + ((__CHANNEL__) >> 2U)) = (__COMPARE__))
X#define __HAL_TIM_SET_COMPARE(__HANDLE__, __CHANNEL__, __COMPARE__) (*(__IO uint32_t *)(&((__HANDLE__)->Instance->CCR1) + ((__CHANNEL__) >> 2U)) = (__COMPARE__))
N
N/**
N  * @brief  Gets the TIM Capture Compare Register value on runtime
N  * @param  __HANDLE__ : TIM handle.
N  * @param  __CHANNEL__ : TIM Channel associated with the capture compare register
N  *          This parameter can be one of the following values:
N  *            @arg TIM_CHANNEL_1: get capture/compare 1 register value
N  *            @arg TIM_CHANNEL_2: get capture/compare 2 register value
N  *            @arg TIM_CHANNEL_3: get capture/compare 3 register value
N  *            @arg TIM_CHANNEL_4: get capture/compare 4 register value
N  * @retval None
N  */
N#define __HAL_TIM_GET_COMPARE(__HANDLE__, __CHANNEL__) \
N  (*(__IO uint32_t *)(&((__HANDLE__)->Instance->CCR1) + ((__CHANNEL__) >> 2U)))
X#define __HAL_TIM_GET_COMPARE(__HANDLE__, __CHANNEL__)   (*(__IO uint32_t *)(&((__HANDLE__)->Instance->CCR1) + ((__CHANNEL__) >> 2U)))
N
N/**
N  * @brief  Sets the TIM Counter Register value on runtime.
N  * @param  __HANDLE__ : TIM handle.
N  * @param  __COUNTER__: specifies the Counter register new value.
N  * @retval None
N  */
N#define __HAL_TIM_SET_COUNTER(__HANDLE__, __COUNTER__)  ((__HANDLE__)->Instance->CNT = (__COUNTER__))
N
N/**
N  * @brief  Gets the TIM Counter Register value on runtime.
N  * @param  __HANDLE__ : TIM handle.
N  * @retval None
N  */
N#define __HAL_TIM_GET_COUNTER(__HANDLE__) ((__HANDLE__)->Instance->CNT)
N
N/**
N  * @brief  Sets the TIM Autoreload Register value on runtime without calling 
N  *         another time any Init function.
N  * @param  __HANDLE__ : TIM handle.
N  * @param  __AUTORELOAD__: specifies the Counter register new value.
N  * @retval None
N  */
N#define __HAL_TIM_SET_AUTORELOAD(__HANDLE__, __AUTORELOAD__) \
N                        do{                                                    \
N                              (__HANDLE__)->Instance->ARR = (__AUTORELOAD__);  \
N                              (__HANDLE__)->Init.Period = (__AUTORELOAD__);    \
N                          } while(0)
X#define __HAL_TIM_SET_AUTORELOAD(__HANDLE__, __AUTORELOAD__)                         do{                                                                                  (__HANDLE__)->Instance->ARR = (__AUTORELOAD__);                                (__HANDLE__)->Init.Period = (__AUTORELOAD__);                              } while(0)
N/**
N  * @brief  Gets the TIM Autoreload Register value on runtime
N  * @param  __HANDLE__ : TIM handle.
N  * @retval None
N  */
N#define __HAL_TIM_GET_AUTORELOAD(__HANDLE__) ((__HANDLE__)->Instance->ARR)
N
N/**
N  * @brief  Sets the TIM Clock Division value on runtime without calling 
N  *         another time any Init function. 
N  * @param  __HANDLE__ : TIM handle.
N  * @param  __CKD__: specifies the clock division value.
N  *          This parameter can be one of the following value:
N  *            @arg TIM_CLOCKDIVISION_DIV1
N  *            @arg TIM_CLOCKDIVISION_DIV2
N  *            @arg TIM_CLOCKDIVISION_DIV4
N  * @retval None
N  */
N#define __HAL_TIM_SET_CLOCKDIVISION(__HANDLE__, __CKD__) \
N                        do{                                                    \
N                              (__HANDLE__)->Instance->CR1 &= (uint16_t)(~TIM_CR1_CKD);  \
N                              (__HANDLE__)->Instance->CR1 |= (__CKD__);                   \
N                              (__HANDLE__)->Init.ClockDivision = (__CKD__);             \
N                          } while(0)
X#define __HAL_TIM_SET_CLOCKDIVISION(__HANDLE__, __CKD__)                         do{                                                                                  (__HANDLE__)->Instance->CR1 &= (uint16_t)(~TIM_CR1_CKD);                                (__HANDLE__)->Instance->CR1 |= (__CKD__);                                                 (__HANDLE__)->Init.ClockDivision = (__CKD__);                                       } while(0)
N/**
N  * @brief  Gets the TIM Clock Division value on runtime
N  * @param  __HANDLE__ : TIM handle.
N  * @retval None
N  */
N#define __HAL_TIM_GET_CLOCKDIVISION(__HANDLE__) ((__HANDLE__)->Instance->CR1 & TIM_CR1_CKD)
N
N/**
N  * @brief  Sets the TIM Input Capture prescaler on runtime without calling 
N  *         another time HAL_TIM_IC_ConfigChannel() function.
N  * @param  __HANDLE__ : TIM handle.
N  * @param  __CHANNEL__ : TIM Channels to be configured.
N  *          This parameter can be one of the following values:
N  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
N  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
N  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
N  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
N  * @param  __ICPSC__: specifies the Input Capture4 prescaler new value.
N  *          This parameter can be one of the following values:
N  *            @arg TIM_ICPSC_DIV1: no prescaler
N  *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
N  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
N  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
N  * @retval None
N  */
N#define __HAL_TIM_SET_ICPRESCALER(__HANDLE__, __CHANNEL__, __ICPSC__) \
N                        do{                                                    \
N                              TIM_RESET_ICPRESCALERVALUE((__HANDLE__), (__CHANNEL__));  \
N                              TIM_SET_ICPRESCALERVALUE((__HANDLE__), (__CHANNEL__), (__ICPSC__)); \
N                          } while(0)
X#define __HAL_TIM_SET_ICPRESCALER(__HANDLE__, __CHANNEL__, __ICPSC__)                         do{                                                                                  TIM_RESET_ICPRESCALERVALUE((__HANDLE__), (__CHANNEL__));                                TIM_SET_ICPRESCALERVALUE((__HANDLE__), (__CHANNEL__), (__ICPSC__));                           } while(0)
N
N/**
N  * @brief  Gets the TIM Input Capture prescaler on runtime
N  * @param  __HANDLE__ : TIM handle.
N  * @param  __CHANNEL__ : TIM Channels to be configured.
N  *          This parameter can be one of the following values:
N  *            @arg TIM_CHANNEL_1: get input capture 1 prescaler value
N  *            @arg TIM_CHANNEL_2: get input capture 2 prescaler value
N  *            @arg TIM_CHANNEL_3: get input capture 3 prescaler value
N  *            @arg TIM_CHANNEL_4: get input capture 4 prescaler value
N  * @retval None
N  */
N#define __HAL_TIM_GET_ICPRESCALER(__HANDLE__, __CHANNEL__)  \
N  (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 & TIM_CCMR1_IC1PSC) :\
N   ((__CHANNEL__) == TIM_CHANNEL_2) ? (((__HANDLE__)->Instance->CCMR1 & TIM_CCMR1_IC2PSC) >> 8) :\
N   ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 & TIM_CCMR2_IC3PSC) :\
N   (((__HANDLE__)->Instance->CCMR2 & TIM_CCMR2_IC4PSC)) >> 8U)
X#define __HAL_TIM_GET_ICPRESCALER(__HANDLE__, __CHANNEL__)    (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 & TIM_CCMR1_IC1PSC) :   ((__CHANNEL__) == TIM_CHANNEL_2) ? (((__HANDLE__)->Instance->CCMR1 & TIM_CCMR1_IC2PSC) >> 8) :   ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 & TIM_CCMR2_IC3PSC) :   (((__HANDLE__)->Instance->CCMR2 & TIM_CCMR2_IC4PSC)) >> 8U)
N   
N
N/**
N  * @brief  Set the Update Request Source (URS) bit of the TIMx_CR1 register
N  * @param  __HANDLE__: TIM handle.
N  * @note  When the URS bit of the TIMx_CR1 register is set, only counter
N  *        overflow/underflow generates an update interrupt or DMA request (if
N  *        enabled)
N  * @retval None
N  */
N#define __HAL_TIM_URS_ENABLE(__HANDLE__) \
N    ((__HANDLE__)->Instance->CR1|= (TIM_CR1_URS))
X#define __HAL_TIM_URS_ENABLE(__HANDLE__)     ((__HANDLE__)->Instance->CR1|= (TIM_CR1_URS))
N
N/**
N  * @brief  Reset the Update Request Source (URS) bit of the TIMx_CR1 register
N  * @param  __HANDLE__: TIM handle.
N  * @note  When the URS bit of the TIMx_CR1 register is reset, any of the
N  *        following events generate an update interrupt or DMA request (if
N  *        enabled):
N  *            Counter overflow/underflow
N  *            Setting the UG bit
N  *            Update generation through the slave mode controller
N  * @retval None
N  */
N#define __HAL_TIM_URS_DISABLE(__HANDLE__) \
N      ((__HANDLE__)->Instance->CR1&=~(TIM_CR1_URS))
X#define __HAL_TIM_URS_DISABLE(__HANDLE__)       ((__HANDLE__)->Instance->CR1&=~(TIM_CR1_URS))
N
N/**
N  * @brief  Sets the TIM Capture x input polarity on runtime.
N  * @param  __HANDLE__: TIM handle.
N  * @param  __CHANNEL__: TIM Channels to be configured.
N  *          This parameter can be one of the following values:
N  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
N  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
N  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
N  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
N  * @param  __POLARITY__: Polarity for TIx source
N  *            @arg TIM_INPUTCHANNELPOLARITY_RISING: Rising Edge
N  *            @arg TIM_INPUTCHANNELPOLARITY_FALLING: Falling Edge
N  *            @arg TIM_INPUTCHANNELPOLARITY_BOTHEDGE: Rising and Falling Edge
N  * @note  The polarity TIM_INPUTCHANNELPOLARITY_BOTHEDGE is not authorized  for TIM Channel 4.
N  * @retval None
N  */
N#define __HAL_TIM_SET_CAPTUREPOLARITY(__HANDLE__, __CHANNEL__, __POLARITY__)                          \
N                       do{                                                                            \
N                           TIM_RESET_CAPTUREPOLARITY((__HANDLE__), (__CHANNEL__));               \
N                           TIM_SET_CAPTUREPOLARITY((__HANDLE__), (__CHANNEL__), (__POLARITY__)); \
N                         }while(0)
X#define __HAL_TIM_SET_CAPTUREPOLARITY(__HANDLE__, __CHANNEL__, __POLARITY__)                                                 do{                                                                                                       TIM_RESET_CAPTUREPOLARITY((__HANDLE__), (__CHANNEL__));                                          TIM_SET_CAPTUREPOLARITY((__HANDLE__), (__CHANNEL__), (__POLARITY__));                          }while(0)
N
N/**
N  * @}
N  */   
N     
N/* Include TIM HAL Extension module */
N#include "stm32l0xx_hal_tim_ex.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_tim_ex.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal_tim_ex.h
N  * @author  MCD Application Team
N  * @brief   Header file of TIM HAL module.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_TIM_EX_H
N#define __STM32L0xx_HAL_TIM_EX_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx_hal_def.h"
N
N/** @addtogroup STM32L0xx_HAL_Driver
N  * @{
N  */
N
N/** @defgroup TIMEx TIMEx
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/
N /** @defgroup TIM_Exported_Types TIM Exported Types
N  * @{
N  */
N/** 
N  * @brief  TIM Master configuration Structure definition  
N  */ 
Ntypedef struct {
N  uint32_t  MasterOutputTrigger;   /*!< Trigger output (TRGO) selection 
N                                      This parameter can be a value of @ref TIM_Master_Mode_Selection */
N  uint32_t  MasterSlaveMode;       /*!< Master/slave mode selection 
N                                      This parameter can be a value of @ref TIM_Master_Slave_Mode */
N}TIM_MasterConfigTypeDef;
N
N/**
N  * @}
N  */
N
N/* Exported constants --------------------------------------------------------*/
N/** @defgroup TIMEx_Exported_Constants TIMEx Exported Constants
N  * @{
N  */
N
N/** @defgroup TIMEx_Trigger_Selection Trigger selection
N  * @{
N  */  
N#define  TIM_TRGO_RESET            ((uint32_t)0x0000U)
N#define  TIM_TRGO_ENABLE           (TIM_CR2_MMS_0)
N#define  TIM_TRGO_UPDATE           (TIM_CR2_MMS_1)
N#define  TIM_TRGO_OC1              ((TIM_CR2_MMS_1 | TIM_CR2_MMS_0))
N#define  TIM_TRGO_OC1REF           (TIM_CR2_MMS_2)
N#define  TIM_TRGO_OC2REF           ((TIM_CR2_MMS_2 | TIM_CR2_MMS_0))
N#define  TIM_TRGO_OC3REF           ((TIM_CR2_MMS_2 | TIM_CR2_MMS_1))
N#define  TIM_TRGO_OC4REF           ((TIM_CR2_MMS_2 | TIM_CR2_MMS_1 | TIM_CR2_MMS_0))
N
N#define IS_TIM_TRGO_SOURCE(__SOURCE__) (((__SOURCE__) == TIM_TRGO_RESET)  || \
N                                        ((__SOURCE__) == TIM_TRGO_ENABLE) || \
N                                        ((__SOURCE__) == TIM_TRGO_UPDATE) || \
N                                        ((__SOURCE__) == TIM_TRGO_OC1)    || \
N                                        ((__SOURCE__) == TIM_TRGO_OC1REF) || \
N                                        ((__SOURCE__) == TIM_TRGO_OC2REF) || \
N                                        ((__SOURCE__) == TIM_TRGO_OC3REF) || \
N                                        ((__SOURCE__) == TIM_TRGO_OC4REF))
X#define IS_TIM_TRGO_SOURCE(__SOURCE__) (((__SOURCE__) == TIM_TRGO_RESET)  ||                                         ((__SOURCE__) == TIM_TRGO_ENABLE) ||                                         ((__SOURCE__) == TIM_TRGO_UPDATE) ||                                         ((__SOURCE__) == TIM_TRGO_OC1)    ||                                         ((__SOURCE__) == TIM_TRGO_OC1REF) ||                                         ((__SOURCE__) == TIM_TRGO_OC2REF) ||                                         ((__SOURCE__) == TIM_TRGO_OC3REF) ||                                         ((__SOURCE__) == TIM_TRGO_OC4REF))
N   
N/**
N  * @}
N  */ 
N
N/** @defgroup TIMEx_Remap Remaping
N  * @{
N  */
N#if defined (STM32L071xx) || defined (STM32L072xx) || defined (STM32L073xx) \
N    || defined (STM32L081xx) || defined (STM32L082xx) || defined (STM32L083xx)
X#if 0L || 0L || 0L     || 0L || 0L || 0L
S
S#define TIM2_ETR_GPIO                     ((uint32_t)0x0U)
S#define TIM2_ETR_HSI48                    TIM2_OR_ETR_RMP_2
S#define TIM2_ETR_HSI16                    (TIM2_OR_ETR_RMP_1 | TIM2_OR_ETR_RMP_0)
S#define TIM2_ETR_LSE                      (TIM2_OR_ETR_RMP_2 | TIM2_OR_ETR_RMP_0)
S#define TIM2_ETR_COMP2_OUT                (TIM2_OR_ETR_RMP_2 | TIM2_OR_ETR_RMP_1)
S#define TIM2_ETR_COMP1_OUT                TIM2_OR_ETR_RMP
S
S#elif defined (STM32L011xx) || defined (STM32L021xx) || defined (STM32L031xx) || defined (STM32L041xx)
X#elif 0L || 0L || 0L || 0L
S
S#define TIM2_ETR_GPIO                     ((uint32_t)0x0U)
S#define TIM2_ETR_HSI16                    (TIM2_OR_ETR_RMP_1 | TIM2_OR_ETR_RMP_0)
S#define TIM2_ETR_LSE                      (TIM2_OR_ETR_RMP_2 | TIM2_OR_ETR_RMP_0)
S#define TIM2_ETR_COMP2_OUT                (TIM2_OR_ETR_RMP_2 | TIM2_OR_ETR_RMP_1)
S#define TIM2_ETR_COMP1_OUT                TIM2_OR_ETR_RMP
S
N#else
N
N#define TIM2_ETR_GPIO                     ((uint32_t)0x0U)
N#define TIM2_ETR_HSI48                    TIM2_OR_ETR_RMP_2
N#define TIM2_ETR_LSE                      (TIM2_OR_ETR_RMP_2 | TIM2_OR_ETR_RMP_0)
N#define TIM2_ETR_COMP2_OUT                (TIM2_OR_ETR_RMP_2 | TIM2_OR_ETR_RMP_1)
N#define TIM2_ETR_COMP1_OUT                TIM2_OR_ETR_RMP
N
N#endif
N
N
N
N#define TIM2_TI4_GPIO                     ((uint32_t)0x0U)
N#define TIM2_TI4_COMP2                    TIM2_OR_TI4_RMP_0
N#define TIM2_TI4_COMP1                    TIM2_OR_TI4_RMP_1
N
N#define TIM21_ETR_GPIO                    ((uint32_t)0x0U)
N#define TIM21_ETR_COMP2_OUT               TIM21_OR_ETR_RMP_0
N#define TIM21_ETR_COMP1_OUT               TIM21_OR_ETR_RMP_1
N#define TIM21_ETR_LSE                     TIM21_OR_ETR_RMP
N#define TIM21_TI1_GPIO                    ((uint32_t)0x0U)
N#define TIM21_TI1_MCO                     TIM21_OR_TI1_RMP
N#define TIM21_TI1_RTC_WKUT_IT             TIM21_OR_TI1_RMP_0
N#define TIM21_TI1_HSE_RTC                 TIM21_OR_TI1_RMP_1
N#define TIM21_TI1_MSI                     (TIM21_OR_TI1_RMP_0 | TIM21_OR_TI1_RMP_1)
N#define TIM21_TI1_LSE                     TIM21_OR_TI1_RMP_2
N#define TIM21_TI1_LSI                     (TIM21_OR_TI1_RMP_2 | TIM21_OR_TI1_RMP_0)
N#define TIM21_TI1_COMP1_OUT               (TIM21_OR_TI1_RMP_2 | TIM21_OR_TI1_RMP_1)
N#define TIM21_TI2_GPIO                    ((uint32_t)0x0U)
N#define TIM21_TI2_COMP2_OUT               TIM21_OR_TI2_RMP
N
N#if !defined(STM32L011xx) && !defined(STM32L021xx)
X#if !0L && !0L
N#define TIM22_ETR_GPIO                    ((uint32_t)0x0U)
N#define TIM22_ETR_COMP2_OUT               TIM22_OR_ETR_RMP_0
N#define TIM22_ETR_COMP1_OUT               TIM22_OR_ETR_RMP_1
N#define TIM22_ETR_LSE                     TIM22_OR_ETR_RMP
N#define TIM22_TI1_GPIO1                   ((uint32_t)0x0U)
N#define TIM22_TI1_COMP2_OUT               TIM22_OR_TI1_RMP_0
N#define TIM22_TI1_COMP1_OUT               TIM22_OR_TI1_RMP_1
N#define TIM22_TI1_GPIO2                   TIM22_OR_TI1_RMP
N#endif
N
N#if defined (STM32L071xx) || defined (STM32L072xx) || defined (STM32L073xx) \
N    || defined (STM32L081xx) || defined (STM32L082xx) || defined (STM32L083xx)
X#if 0L || 0L || 0L     || 0L || 0L || 0L
S
S#define TIM3_TI4_GPIO_DEF                 ((uint32_t)0x0U)
S#define TIM3_TI4_GPIOC9_AF2               TIM3_OR_TI4_RMP
S#define TIM3_TI2_GPIO_DEF                 ((uint32_t)0x0U)
S#define TIM3_TI2_GPIOB5_AF4               TIM3_OR_TI2_RMP
S#define TIM3_TI1_USB_SOF                  ((uint32_t)0x0U)
S#define TIM3_TI1_GPIO                     TIM3_OR_TI1_RMP
S#define TIM3_ETR_GPIO                     ((uint32_t)0x0U)
S#define TIM3_ETR_HSI                      TIM3_OR_ETR_RMP_1
S
N#endif /*defined (STM32L07Xxx) or defined (STM32L08Xxx) */
N      
N
N#if defined (STM32L071xx) || defined (STM32L072xx) || defined (STM32L073xx) \
N    || defined (STM32L081xx) || defined (STM32L082xx) || defined (STM32L083xx)
X#if 0L || 0L || 0L     || 0L || 0L || 0L
S
S
S#define IS_TIM_REMAP(__INSTANCE__, __TIM_REMAP__)               \
S        ((((__INSTANCE__) == TIM2)   &&  ((__TIM_REMAP__) <=  (TIM2_OR_TI4_RMP  | TIM2_OR_ETR_RMP))) || \
S         (((__INSTANCE__) == TIM22)  &&  ((__TIM_REMAP__) <=  (TIM22_OR_TI1_RMP | TIM22_OR_ETR_RMP))) || \
S         (((__INSTANCE__) == TIM21)  &&  ((__TIM_REMAP__) <=  (TIM21_OR_ETR_RMP | TIM21_OR_TI1_RMP | TIM21_OR_TI2_RMP))) || \
S         (((__INSTANCE__) == TIM3)   &&  ((__TIM_REMAP__) <=  (TIM3_OR_ETR_RMP  | TIM3_OR_TI1_RMP  | TIM3_OR_TI2_RMP | TIM3_OR_TI4_RMP))))
X#define IS_TIM_REMAP(__INSTANCE__, __TIM_REMAP__)                       ((((__INSTANCE__) == TIM2)   &&  ((__TIM_REMAP__) <=  (TIM2_OR_TI4_RMP  | TIM2_OR_ETR_RMP))) ||          (((__INSTANCE__) == TIM22)  &&  ((__TIM_REMAP__) <=  (TIM22_OR_TI1_RMP | TIM22_OR_ETR_RMP))) ||          (((__INSTANCE__) == TIM21)  &&  ((__TIM_REMAP__) <=  (TIM21_OR_ETR_RMP | TIM21_OR_TI1_RMP | TIM21_OR_TI2_RMP))) ||          (((__INSTANCE__) == TIM3)   &&  ((__TIM_REMAP__) <=  (TIM3_OR_ETR_RMP  | TIM3_OR_TI1_RMP  | TIM3_OR_TI2_RMP | TIM3_OR_TI4_RMP))))
S
S#define IS_CHANNEL_AVAILABLE(__INSTANCE__, __CHANNEL__)     \
S        ((((__INSTANCE__) == TIM2)   &&  (((__CHANNEL__) == TIM_CHANNEL_1)    ||   \
S                                        ((__CHANNEL__) == TIM_CHANNEL_2)   ||   \
S                                        ((__CHANNEL__) == TIM_CHANNEL_3)   ||   \
S                                        ((__CHANNEL__) == TIM_CHANNEL_4))) ||   \
S          (((__INSTANCE__) == TIM3) &&   (((__CHANNEL__) == TIM_CHANNEL_1)    ||   \
S                                        ((__CHANNEL__) == TIM_CHANNEL_2)   ||   \
S                                        ((__CHANNEL__) == TIM_CHANNEL_3)   ||   \
S                                        ((__CHANNEL__) == TIM_CHANNEL_4))) ||   \
S          (((__INSTANCE__) == TIM21) &&  (((__CHANNEL__) == TIM_CHANNEL_1)    ||   \
S                                        ((__CHANNEL__) == TIM_CHANNEL_2))) ||   \
S          (((__INSTANCE__) == TIM22) &&  (((__CHANNEL__) == TIM_CHANNEL_1)    ||   \
S                                        ((__CHANNEL__) == TIM_CHANNEL_2))))
X#define IS_CHANNEL_AVAILABLE(__INSTANCE__, __CHANNEL__)             ((((__INSTANCE__) == TIM2)   &&  (((__CHANNEL__) == TIM_CHANNEL_1)    ||                                           ((__CHANNEL__) == TIM_CHANNEL_2)   ||                                           ((__CHANNEL__) == TIM_CHANNEL_3)   ||                                           ((__CHANNEL__) == TIM_CHANNEL_4))) ||             (((__INSTANCE__) == TIM3) &&   (((__CHANNEL__) == TIM_CHANNEL_1)    ||                                           ((__CHANNEL__) == TIM_CHANNEL_2)   ||                                           ((__CHANNEL__) == TIM_CHANNEL_3)   ||                                           ((__CHANNEL__) == TIM_CHANNEL_4))) ||             (((__INSTANCE__) == TIM21) &&  (((__CHANNEL__) == TIM_CHANNEL_1)    ||                                           ((__CHANNEL__) == TIM_CHANNEL_2))) ||             (((__INSTANCE__) == TIM22) &&  (((__CHANNEL__) == TIM_CHANNEL_1)    ||                                           ((__CHANNEL__) == TIM_CHANNEL_2))))
S									
S#elif defined (STM32L011xx) || defined (STM32L021xx)
X#elif 0L || 0L
S
S#define IS_TIM_REMAP(__INSTANCE__, __TIM_REMAP__)               \
S        ((((__INSTANCE__) == TIM2)   &&  ((__TIM_REMAP__) <=  (TIM2_OR_TI4_RMP  | TIM2_OR_ETR_RMP))) || \
S         (((__INSTANCE__) == TIM21)  &&  ((__TIM_REMAP__) <=  (TIM21_OR_ETR_RMP | TIM21_OR_TI1_RMP | TIM21_OR_TI2_RMP))))
X#define IS_TIM_REMAP(__INSTANCE__, __TIM_REMAP__)                       ((((__INSTANCE__) == TIM2)   &&  ((__TIM_REMAP__) <=  (TIM2_OR_TI4_RMP  | TIM2_OR_ETR_RMP))) ||          (((__INSTANCE__) == TIM21)  &&  ((__TIM_REMAP__) <=  (TIM21_OR_ETR_RMP | TIM21_OR_TI1_RMP | TIM21_OR_TI2_RMP))))
S
S#define IS_CHANNEL_AVAILABLE(__INSTANCE__, __CHANNEL__)     \
S        ((((__INSTANCE__) == TIM2)   &&   (((__CHANNEL__) == TIM_CHANNEL_1)   || \
S                                         ((__CHANNEL__) == TIM_CHANNEL_2)   || \
S                                         ((__CHANNEL__) == TIM_CHANNEL_3)   || \
S                                         ((__CHANNEL__) == TIM_CHANNEL_4))) || \
S          (((__INSTANCE__) == TIM21)  &&  (((__CHANNEL__) == TIM_CHANNEL_1)   || \
S                                         ((__CHANNEL__) == TIM_CHANNEL_2))))
X#define IS_CHANNEL_AVAILABLE(__INSTANCE__, __CHANNEL__)             ((((__INSTANCE__) == TIM2)   &&   (((__CHANNEL__) == TIM_CHANNEL_1)   ||                                          ((__CHANNEL__) == TIM_CHANNEL_2)   ||                                          ((__CHANNEL__) == TIM_CHANNEL_3)   ||                                          ((__CHANNEL__) == TIM_CHANNEL_4))) ||           (((__INSTANCE__) == TIM21)  &&  (((__CHANNEL__) == TIM_CHANNEL_1)   ||                                          ((__CHANNEL__) == TIM_CHANNEL_2))))
S										 
N#else
N
N#define IS_TIM_REMAP(__INSTANCE__, __TIM_REMAP__)               \
N        ((((__INSTANCE__) == TIM2)   &&  ((__TIM_REMAP__) <=  (TIM2_OR_TI4_RMP  | TIM2_OR_ETR_RMP))) || \
N         (((__INSTANCE__) == TIM22)  &&  ((__TIM_REMAP__) <=  (TIM22_OR_TI1_RMP | TIM22_OR_ETR_RMP))) || \
N         (((__INSTANCE__) == TIM21)  &&  ((__TIM_REMAP__) <=  (TIM21_OR_ETR_RMP | TIM21_OR_TI1_RMP | TIM21_OR_TI2_RMP))))
X#define IS_TIM_REMAP(__INSTANCE__, __TIM_REMAP__)                       ((((__INSTANCE__) == TIM2)   &&  ((__TIM_REMAP__) <=  (TIM2_OR_TI4_RMP  | TIM2_OR_ETR_RMP))) ||          (((__INSTANCE__) == TIM22)  &&  ((__TIM_REMAP__) <=  (TIM22_OR_TI1_RMP | TIM22_OR_ETR_RMP))) ||          (((__INSTANCE__) == TIM21)  &&  ((__TIM_REMAP__) <=  (TIM21_OR_ETR_RMP | TIM21_OR_TI1_RMP | TIM21_OR_TI2_RMP))))
N
N#define IS_CHANNEL_AVAILABLE(__INSTANCE__, __CHANNEL__)     \
N        ((((__INSTANCE__) == TIM2)   &&   (((__CHANNEL__) == TIM_CHANNEL_1)   || \
N                                         ((__CHANNEL__) == TIM_CHANNEL_2)   || \
N                                         ((__CHANNEL__) == TIM_CHANNEL_3)   || \
N                                         ((__CHANNEL__) == TIM_CHANNEL_4))) || \
N          (((__INSTANCE__) == TIM21)  &&  (((__CHANNEL__) == TIM_CHANNEL_1)   || \
N                                         ((__CHANNEL__) == TIM_CHANNEL_2))) || \
N          (((__INSTANCE__) == TIM22)  &&  (((__CHANNEL__) == TIM_CHANNEL_1)   || \
N                                         ((__CHANNEL__) == TIM_CHANNEL_2))))
X#define IS_CHANNEL_AVAILABLE(__INSTANCE__, __CHANNEL__)             ((((__INSTANCE__) == TIM2)   &&   (((__CHANNEL__) == TIM_CHANNEL_1)   ||                                          ((__CHANNEL__) == TIM_CHANNEL_2)   ||                                          ((__CHANNEL__) == TIM_CHANNEL_3)   ||                                          ((__CHANNEL__) == TIM_CHANNEL_4))) ||           (((__INSTANCE__) == TIM21)  &&  (((__CHANNEL__) == TIM_CHANNEL_1)   ||                                          ((__CHANNEL__) == TIM_CHANNEL_2))) ||           (((__INSTANCE__) == TIM22)  &&  (((__CHANNEL__) == TIM_CHANNEL_1)   ||                                          ((__CHANNEL__) == TIM_CHANNEL_2))))
N
N#endif /*defined (STM32L07Xxx) or defined (STM32L08Xxx) */
N
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/
N/* Control functions  ***********************************************************/
N
N/** @defgroup TIMEx_Exported_Functions TIMEx Exported Functions
N *  @{
N */
N
N/** @defgroup TIMEx_Exported_Functions_Group1 TIMEx Peripheral Control functions
N *  @{
N */
N
NHAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap);
NHAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig);
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32L0xx_HAL_TIM_EX_H */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
L 1245 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_tim.h" 2
N
N/* Exported functions --------------------------------------------------------*/
N/** @defgroup TIM_Exported_Functions TIM Exported Functions
N  * @{
N  */
N
N/* Exported functions --------------------------------------------------------*/
N/* Time Base functions ********************************************************/
N
N/** @defgroup TIM_Exported_Functions_Group1 Timer Base functions
N *  @brief    Time Base functions
N *  @{
N */
NHAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim);
NHAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim);
Nvoid HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim);
Nvoid HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim);
N/* Blocking mode: Polling */
NHAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim);
NHAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim);
N/* Non-Blocking mode: Interrupt */
NHAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim);
NHAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim);
N/* Non-Blocking mode: DMA */
NHAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length);
NHAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim);
N
N/**
N  * @}
N  */
N
N
N/* Timer Output Compare functions **********************************************/
N
N/** @defgroup TIM_Exported_Functions_Group2 Timer Output Compare functions
N *  @brief    Timer Output Compare functions
N *  @{
N */
N
NHAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim);
NHAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim);
Nvoid HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim);
Nvoid HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim);
N/* Blocking mode: Polling */
NHAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
NHAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);
N/* Non-Blocking mode: Interrupt */
NHAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
NHAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
N/* Non-Blocking mode: DMA */
NHAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
NHAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
N/**
N  * @}
N  */
N
N
N/* Timer PWM functions *********************************************************/
N
N/** @defgroup TIM_Exported_Functions_Group3 Timer PWM functions
N *   @brief    Timer PWM functions
N *   @{
N */
NHAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim);
NHAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim);
Nvoid HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim);
Nvoid HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim);
N/* Blocking mode: Polling */
NHAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
NHAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);
N/* Non-Blocking mode: Interrupt */
NHAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
NHAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
N/* Non-Blocking mode: DMA */
NHAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
NHAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
N/**
N  * @}
N  */
N
N/* Timer Input Capture functions ***********************************************/
N
N/** @defgroup TIM_Exported_Functions_Group4 Timer Input Capture functions
N *  @brief    Timer Input Capture functions
N *  @{
N */
NHAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim);
NHAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim);
Nvoid HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim);
Nvoid HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim);
N/* Blocking mode: Polling */
NHAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
NHAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);
N/* Non-Blocking mode: Interrupt */
NHAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
NHAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
N/* Non-Blocking mode: DMA */
NHAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
NHAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
N/**
N  * @}
N  */
N
N/* Timer One Pulse functions ***************************************************/
N
N/** @defgroup TIM_Exported_Functions_Group5 Timer One Pulse functions
N *  @brief    Timer One Pulse functions
N *  @{
N */
NHAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode);
NHAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim);
Nvoid HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim);
Nvoid HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim);
N/* Blocking mode: Polling */
NHAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
NHAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
N
N/* Non-Blocking mode: Interrupt */
NHAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
NHAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
N
N/**
N  * @}
N  */
N
N/* Timer Encoder functions *****************************************************/
N
N/** @defgroup TIM_Exported_Functions_Group6 Timer Encoder functions
N *  @brief       Timer Encoder functions
N *  @{
N */
NHAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig);
NHAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim);
Nvoid HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim);
Nvoid HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim);
N/* Blocking mode: Polling */
NHAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
NHAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);
N/* Non-Blocking mode: Interrupt */
NHAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
NHAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
N/* Non-Blocking mode: DMA */
NHAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length);
NHAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
N
N/**
N  * @}
N  */
N
N/* Interrupt Handler functions  **********************************************/
N
N/** @defgroup TIM_Exported_Functions_Group7 Timer IRQ handler management
N *  @brief      Interrupt Handler functions
N *  @{
N */
Nvoid HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim);
N/**
N  * @}
N  */
N
N/* Control functions  *********************************************************/
N
N/** @defgroup TIM_Exported_Functions_Group8 Peripheral Control functions
N *  @brief      Control functions
N *  @{
N */
NHAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel);
NHAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel);
NHAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel);
NHAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OnePulse_InitTypeDef* sConfig, uint32_t OutputChannel,  uint32_t InputChannel);
NHAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim, TIM_ClearInputConfigTypeDef * sClearInputConfig, uint32_t Channel);
NHAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig);    
NHAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection);
NHAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig);
NHAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization_IT(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig);
NHAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc, \
N                                              uint32_t  *BurstBuffer, uint32_t  BurstLength);
XHAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,                                               uint32_t  *BurstBuffer, uint32_t  BurstLength);
NHAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc);
NHAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc, \
N                                              uint32_t  *BurstBuffer, uint32_t  BurstLength);
XHAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,                                               uint32_t  *BurstBuffer, uint32_t  BurstLength);
NHAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc);
NHAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource);
Nuint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel);
N
N/**
N  * @}
N  */
N
N/* Callback in non blocking modes (Interrupt and DMA) *************************/
N
N/** @defgroup TIM_Exported_Functions_Group9 Timer Callbacks functions
N *  @brief      Callback functions
N *  @{
N */
Nvoid HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
Nvoid HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim);
Nvoid HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);
Nvoid HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim);
Nvoid HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim);
Nvoid HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim);
N/**
N  * @}
N  */
N
N
N/* Peripheral State functions  **************************************************/
N
N/** @defgroup TIM_Exported_Functions_Group10 Peripheral State functions
N *  @brief      Peripheral State functions
N *  @{
N */
NHAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim);
NHAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim);
NHAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim);
NHAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim);
NHAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim);
NHAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim);
Nvoid TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma);
Nvoid TIM_DMAError(DMA_HandleTypeDef *hdma);
Nvoid TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma);
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */
N
N/* Define the private group ***********************************/
N/**************************************************************/
N/** @defgroup TIM_Private TIM Private
N  * @{
N  */
N/**
N  * @}
N  */
N/**************************************************************/
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32L0xx_HAL_TIM_H */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
L 252 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\Conf\stm32l0xx_hal_conf.h" 2
N#endif /* HAL_TIM_MODULE_ENABLED */
N
N#ifdef HAL_TSC_MODULE_ENABLED
S #include "stm32l0xx_hal_tsc.h"
N#endif /* HAL_TSC_MODULE_ENABLED */
N
N#ifdef HAL_UART_MODULE_ENABLED
N #include "stm32l0xx_hal_uart.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_uart.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal_uart.h
N  * @author  MCD Application Team
N  * @brief   Header file of UART HAL module.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_UART_H
N#define __STM32L0xx_HAL_UART_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx_hal_def.h"
N
N/** @addtogroup STM32L0xx_HAL_Driver
N  * @{
N  */
N
N/** @addtogroup UART
N  * @{
N  */
N
N/* Exported types ------------------------------------------------------------*/
N/** @defgroup UART_Exported_Types UART Exported Types
N  * @{
N  */
N
N/**
N  * @brief UART Init Structure definition
N  */
Ntypedef struct
N{
N  uint32_t BaudRate;                  /*!< This member configures the UART communication baud rate.
N                                           The baud rate register is computed using the following formula:
N                                           - If oversampling is 16 or in LIN mode,
N                                              Baud Rate Register = ((PCLKx) / ((huart->Init.BaudRate)))
N                                           - If oversampling is 8,
N                                              Baud Rate Register[15:4] = ((2 * PCLKx) / ((huart->Init.BaudRate)))[15:4]
N                                              Baud Rate Register[3] =  0
N                                              Baud Rate Register[2:0] =  (((2 * PCLKx) / ((huart->Init.BaudRate)))[3:0]) >> 1      */
N
N  uint32_t WordLength;                /*!< Specifies the number of data bits transmitted or received in a frame.
N                                           This parameter can be a value of @ref UARTEx_Word_Length. */
N
N  uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
N                                           This parameter can be a value of @ref UART_Stop_Bits. */
N
N  uint32_t Parity;                    /*!< Specifies the parity mode.
N                                           This parameter can be a value of @ref UART_Parity
N                                           @note When parity is enabled, the computed parity is inserted
N                                                 at the MSB position of the transmitted data (9th bit when
N                                                 the word length is set to 9 data bits; 8th bit when the
N                                                 word length is set to 8 data bits). */
N
N  uint32_t Mode;                      /*!< Specifies whether the Receive or Transmit mode is enabled or disabled.
N                                           This parameter can be a value of @ref UART_Mode. */
N
N  uint32_t HwFlowCtl;                 /*!< Specifies whether the hardware flow control mode is enabled
N                                           or disabled.
N                                           This parameter can be a value of @ref UART_Hardware_Flow_Control. */
N
N  uint32_t OverSampling;              /*!< Specifies whether the Over sampling 8 is enabled or disabled, to achieve higher speed (up to f_PCLK/8).
N                                           This parameter can be a value of @ref UART_Over_Sampling. */
N
N  uint32_t OneBitSampling;            /*!< Specifies whether a single sample or three samples' majority vote is selected.
N                                           Selecting the single sample method increases the receiver tolerance to clock
N                                           deviations. This parameter can be a value of @ref UART_OneBit_Sampling. */
N}UART_InitTypeDef;
N
N/**
N  * @brief  UART Advanced Features initalization structure definition
N  */
Ntypedef struct
N{
N  uint32_t AdvFeatureInit;        /*!< Specifies which advanced UART features is initialized. Several
N                                       Advanced Features may be initialized at the same time .
N                                       This parameter can be a value of @ref UART_Advanced_Features_Initialization_Type. */
N
N  uint32_t TxPinLevelInvert;      /*!< Specifies whether the TX pin active level is inverted.
N                                       This parameter can be a value of @ref UART_Tx_Inv.  */
N
N  uint32_t RxPinLevelInvert;      /*!< Specifies whether the RX pin active level is inverted.
N                                       This parameter can be a value of @ref UART_Rx_Inv.  */
N
N  uint32_t DataInvert;            /*!< Specifies whether data are inverted (positive/direct logic
N                                       vs negative/inverted logic).
N                                       This parameter can be a value of @ref UART_Data_Inv. */
N
N  uint32_t Swap;                  /*!< Specifies whether TX and RX pins are swapped.
N                                       This parameter can be a value of @ref UART_Rx_Tx_Swap. */
N
N  uint32_t OverrunDisable;        /*!< Specifies whether the reception overrun detection is disabled.
N                                       This parameter can be a value of @ref UART_Overrun_Disable. */
N
N  uint32_t DMADisableonRxError;   /*!< Specifies whether the DMA is disabled in case of reception error.
N                                       This parameter can be a value of @ref UART_DMA_Disable_on_Rx_Error. */
N
N  uint32_t AutoBaudRateEnable;    /*!< Specifies whether auto Baud rate detection is enabled.
N                                       This parameter can be a value of @ref UART_AutoBaudRate_Enable */
N
N  uint32_t AutoBaudRateMode;      /*!< If auto Baud rate detection is enabled, specifies how the rate
N                                       detection is carried out.
N                                       This parameter can be a value of @ref UART_AutoBaud_Rate_Mode. */
N
N  uint32_t MSBFirst;              /*!< Specifies whether MSB is sent first on UART line.
N                                       This parameter can be a value of @ref UART_MSB_First. */
N} UART_AdvFeatureInitTypeDef;
N
N
N
N/**
N  * @brief HAL UART State structures definition
N  * @note  HAL UART State value is a combination of 2 different substates: gState and RxState.
N  *        - gState contains UART state information related to global Handle management 
N  *          and also information related to Tx operations.
N  *          gState value coding follow below described bitmap :
N  *          b7-b6  Error information 
N  *             00 : No Error
N  *             01 : (Not Used)
N  *             10 : Timeout
N  *             11 : Error
N  *          b5     IP initilisation status
N  *             0  : Reset (IP not initialized)
N  *             1  : Init done (IP not initialized. HAL UART Init function already called)
N  *          b4-b3  (not used)
N  *             xx : Should be set to 00
N  *          b2     Intrinsic process state
N  *             0  : Ready
N  *             1  : Busy (IP busy with some configuration or internal operations)
N  *          b1     (not used)
N  *             x  : Should be set to 0
N  *          b0     Tx state
N  *             0  : Ready (no Tx operation ongoing)
N  *             1  : Busy (Tx operation ongoing)
N  *        - RxState contains information related to Rx operations.
N  *          RxState value coding follow below described bitmap :
N  *          b7-b6  (not used)
N  *             xx : Should be set to 00
N  *          b5     IP initilisation status
N  *             0  : Reset (IP not initialized)
N  *             1  : Init done (IP not initialized)
N  *          b4-b2  (not used)
N  *            xxx : Should be set to 000
N  *          b1     Rx state
N  *             0  : Ready (no Rx operation ongoing)
N  *             1  : Busy (Rx operation ongoing)
N  *          b0     (not used)
N  *             x  : Should be set to 0.
N  */
Ntypedef enum
N{
N  HAL_UART_STATE_RESET             = 0x00U,   /*!< Peripheral is not initialized
N                                                   Value is allowed for gState and RxState */
N  HAL_UART_STATE_READY             = 0x20U,   /*!< Peripheral Initialized and ready for use
N                                                   Value is allowed for gState and RxState */
N  HAL_UART_STATE_BUSY              = 0x24U,   /*!< an internal process is ongoing 
N                                                   Value is allowed for gState only */
N  HAL_UART_STATE_BUSY_TX           = 0x21U,   /*!< Data Transmission process is ongoing
N                                                   Value is allowed for gState only */
N  HAL_UART_STATE_BUSY_RX           = 0x22U,   /*!< Data Reception process is ongoing
N                                                   Value is allowed for RxState only */
N  HAL_UART_STATE_BUSY_TX_RX        = 0x23U,   /*!< Data Transmission and Reception process is ongoing
N                                                   Not to be used for neither gState nor RxState.
N                                                   Value is result of combination (Or) between gState and RxState values */
N  HAL_UART_STATE_TIMEOUT           = 0xA0U,   /*!< Timeout state
N                                                   Value is allowed for gState only */
N  HAL_UART_STATE_ERROR             = 0xE0U    /*!< Error
N                                                   Value is allowed for gState only */
N}HAL_UART_StateTypeDef;
N
N/**
N  * @brief  HAL UART Error Code structure definition
N  */
Ntypedef enum
N{
N  HAL_UART_ERROR_NONE      = 0x00,    /*!< No error            */
N  HAL_UART_ERROR_PE        = 0x01,    /*!< Parity error        */
N  HAL_UART_ERROR_NE        = 0x02,    /*!< Noise error         */
N  HAL_UART_ERROR_FE        = 0x04,    /*!< frame error         */
N  HAL_UART_ERROR_ORE       = 0x08,    /*!< Overrun error       */
N  HAL_UART_ERROR_DMA       = 0x10,    /*!< DMA transfer error  */
N  HAL_UART_ERROR_BUSY      = 0x20     /*!< Busy Error          */
N}HAL_UART_ErrorTypeDef;
N
N/**
N  * @brief UART clock sources definition
N  */
Ntypedef enum
N{
N  UART_CLOCKSOURCE_PCLK1      = 0x00,    /*!< PCLK1 clock source     */
N  UART_CLOCKSOURCE_PCLK2      = 0x01,    /*!< PCLK2 clock source     */
N  UART_CLOCKSOURCE_HSI        = 0x02,    /*!< HSI clock source       */
N  UART_CLOCKSOURCE_SYSCLK     = 0x04,    /*!< SYSCLK clock source    */
N  UART_CLOCKSOURCE_LSE        = 0x08,    /*!< LSE clock source       */
N  UART_CLOCKSOURCE_UNDEFINED  = 0x10     /*!< Undefined clock source */
N}UART_ClockSourceTypeDef;
N
N/**
N  * @brief  UART handle Structure definition
N  */
Ntypedef struct
N{
N  USART_TypeDef            *Instance;        /*!< UART registers base address        */
N
N  UART_InitTypeDef         Init;             /*!< UART communication parameters      */
N
N  UART_AdvFeatureInitTypeDef AdvancedInit;   /*!< UART Advanced Features initialization parameters */
N
N  uint8_t                  *pTxBuffPtr;      /*!< Pointer to UART Tx transfer Buffer */
N
N  uint16_t                 TxXferSize;       /*!< UART Tx Transfer size              */
N
N  __IO uint16_t            TxXferCount;      /*!< UART Tx Transfer Counter           */
X  volatile uint16_t            TxXferCount;       
N
N  uint8_t                  *pRxBuffPtr;      /*!< Pointer to UART Rx transfer Buffer */
N
N  uint16_t                 RxXferSize;       /*!< UART Rx Transfer size              */
N
N  __IO uint16_t            RxXferCount;      /*!< UART Rx Transfer Counter           */
X  volatile uint16_t            RxXferCount;       
N
N  uint16_t                 Mask;             /*!< UART Rx RDR register mask          */
N
N  DMA_HandleTypeDef        *hdmatx;          /*!< UART Tx DMA Handle parameters      */
N
N  DMA_HandleTypeDef        *hdmarx;          /*!< UART Rx DMA Handle parameters      */
N
N  HAL_LockTypeDef           Lock;            /*!< Locking object                     */
N
N  __IO HAL_UART_StateTypeDef    gState;      /*!< UART state information related to global Handle management 
X  volatile HAL_UART_StateTypeDef    gState;      
N                                                  and also related to Tx operations.
N                                                  This parameter can be a value of @ref HAL_UART_StateTypeDef */
N
N  __IO HAL_UART_StateTypeDef    RxState;     /*!< UART state information related to Rx operations.
X  volatile HAL_UART_StateTypeDef    RxState;     
N                                                  This parameter can be a value of @ref HAL_UART_StateTypeDef */
N
N  __IO uint32_t             ErrorCode;       /*!< UART Error code                    */
X  volatile uint32_t             ErrorCode;        
N
N}UART_HandleTypeDef;
N
N/**
N  * @}
N  */
N
N/* Exported constants --------------------------------------------------------*/
N/** @defgroup UART_Exported_Constants UART Exported Constants
N  * @{
N  */
N
N/** @defgroup UART_Stop_Bits   UART Number of Stop Bits
N  * @{
N  */
N#define UART_STOPBITS_1                     ((uint32_t)0x00000000U)               /*!< UART frame with 1 stop bit    */
N#define UART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1) /*!< UART frame with 1.5 stop bits */
N#define UART_STOPBITS_2                      USART_CR2_STOP_1                     /*!< UART frame with 2 stop bits   */
N/**
N  * @}
N  */
N
N/** @defgroup UART_Parity  UART Parity
N  * @{
N  */
N#define UART_PARITY_NONE                    ((uint32_t)0x00000000U)                        /*!< No parity   */
N#define UART_PARITY_EVEN                    ((uint32_t)USART_CR1_PCE)                      /*!< Even parity */
N#define UART_PARITY_ODD                     ((uint32_t)(USART_CR1_PCE | USART_CR1_PS))     /*!< Odd parity  */
N/**
N  * @}
N  */
N
N/** @defgroup UART_Hardware_Flow_Control UART Hardware Flow Control
N  * @{
N  */
N#define UART_HWCONTROL_NONE                  ((uint32_t)0x00000000U)                          /*!< No hardware control       */
N#define UART_HWCONTROL_RTS                   ((uint32_t)USART_CR3_RTSE)                       /*!< Request To Send           */
N#define UART_HWCONTROL_CTS                   ((uint32_t)USART_CR3_CTSE)                       /*!< Clear To Send             */
N#define UART_HWCONTROL_RTS_CTS               ((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE))    /*!< Request and Clear To Send */
N/**
N  * @}
N  */
N
N/** @defgroup UART_Mode UART Transfer Mode
N  * @{
N  */
N#define UART_MODE_RX                        ((uint32_t)USART_CR1_RE)                    /*!< RX mode        */ 
N#define UART_MODE_TX                        ((uint32_t)USART_CR1_TE)                    /*!< TX mode        */ 
N#define UART_MODE_TX_RX                     ((uint32_t)(USART_CR1_TE |USART_CR1_RE))    /*!< RX and TX mode */ 
N/**
N  * @}
N  */
N
N/** @defgroup UART_State  UART State
N  * @{
N  */
N#define UART_STATE_DISABLE                  ((uint32_t)0x00000000U)         /*!< UART disabled  */
N#define UART_STATE_ENABLE                   ((uint32_t)USART_CR1_UE)        /*!< UART enabled   */
N/**
N  * @}
N  */
N
N/** @defgroup UART_Over_Sampling UART Over Sampling
N  * @{
N  */
N#define UART_OVERSAMPLING_16                ((uint32_t)0x00000000U)         /*!< Oversampling by 16 */
N#define UART_OVERSAMPLING_8                 ((uint32_t)USART_CR1_OVER8)     /*!< Oversampling by 8  */
N/**
N  * @}
N  */
N
N/** @defgroup UART_OneBit_Sampling UART One Bit Sampling Method
N  * @{
N  */
N#define UART_ONE_BIT_SAMPLE_DISABLE         ((uint32_t)0x00000000U)         /*!< One-bit sampling disable */
N#define UART_ONE_BIT_SAMPLE_ENABLE          ((uint32_t)USART_CR3_ONEBIT)    /*!< One-bit sampling enable  */
N/**
N  * @}
N  */
N
N/** @defgroup UART_AutoBaud_Rate_Mode    UART Advanced Feature AutoBaud Rate Mode
N  * @{
N  */
N#define UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT    ((uint32_t)0x00000000)            /*!< Auto Baud rate detection on start bit            */
N#define UART_ADVFEATURE_AUTOBAUDRATE_ONFALLINGEDGE ((uint32_t)USART_CR2_ABRMODE_0)   /*!< Auto Baud rate detection on falling edge         */
N#define UART_ADVFEATURE_AUTOBAUDRATE_ON0X7FFRAME   ((uint32_t)USART_CR2_ABRMODE_1)   /*!< Auto Baud rate detection on 0x7F frame detection */
N#define UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME   ((uint32_t)USART_CR2_ABRMODE)     /*!< Auto Baud rate detection on 0x55 frame detection */
N/**
N  * @}
N  */
N
N/** @defgroup UART_Receiver_TimeOut UART Receiver TimeOut
N  * @{
N  */
N#define UART_RECEIVER_TIMEOUT_DISABLE       ((uint32_t)0x00000000U)                 /*!< UART receiver timeout disable */
N#define UART_RECEIVER_TIMEOUT_ENABLE        ((uint32_t)USART_CR2_RTOEN)             /*!< UART receiver timeout enable  */
N/**
N  * @}
N  */
N
N/** @defgroup UART_LIN    UART Local Interconnection Network mode
N  * @{
N  */
N#define UART_LIN_DISABLE                    ((uint32_t)0x00000000U)                /*!< Local Interconnect Network disable */
N#define UART_LIN_ENABLE                     ((uint32_t)USART_CR2_LINEN)            /*!< Local Interconnect Network enable  */
N/**
N  * @}
N  */
N
N/** @defgroup UART_LIN_Break_Detection  UART LIN Break Detection
N  * @{
N  */
N#define UART_LINBREAKDETECTLENGTH_10B       ((uint32_t)0x00000000U)               /*!< LIN 10-bit break detection length */
N#define UART_LINBREAKDETECTLENGTH_11B       ((uint32_t)USART_CR2_LBDL)            /*!< LIN 11-bit break detection length  */
N/**
N  * @}
N  */
N
N/** @defgroup UART_DMA_Tx    UART DMA Tx
N  * @{
N  */
N#define UART_DMA_TX_DISABLE                 ((uint32_t)0x00000000U)               /*!< UART DMA TX disabled */
N#define UART_DMA_TX_ENABLE                  ((uint32_t)USART_CR3_DMAT)            /*!< UART DMA TX enabled  */
N/**
N  * @}
N  */
N
N/** @defgroup UART_DMA_Rx   UART DMA Rx
N  * @{
N  */
N#define UART_DMA_RX_DISABLE                 ((uint32_t)0x00000000U)                 /*!< UART DMA RX disabled */
N#define UART_DMA_RX_ENABLE                  ((uint32_t)USART_CR3_DMAR)              /*!< UART DMA RX enabled  */
N/**
N  * @}
N  */
N
N/** @defgroup UART_Half_Duplex_Selection  UART Half Duplex Selection
N  * @{
N  */
N#define UART_HALF_DUPLEX_DISABLE            ((uint32_t)0x00000000U)                 /*!< UART half-duplex disabled */
N#define UART_HALF_DUPLEX_ENABLE             ((uint32_t)USART_CR3_HDSEL)             /*!< UART half-duplex enabled  */
N/**
N  * @}
N  */
N
N/** @defgroup UART_WakeUp_Methods   UART WakeUp Methods
N  * @{
N  */
N#define UART_WAKEUPMETHOD_IDLELINE          ((uint32_t)0x00000000U)                 /*!< UART wake-up on idle line    */
N#define UART_WAKEUPMETHOD_ADDRESSMARK       ((uint32_t)USART_CR1_WAKE)              /*!< UART wake-up on address mark */
N/**
N  * @}
N  */
N
N/** @defgroup UART_Request_Parameters UART Request Parameters
N  * @{
N  */
N#define UART_AUTOBAUD_REQUEST               ((uint32_t)USART_RQR_ABRRQ)        /*!< Auto-Baud Rate Request      */
N#define UART_SENDBREAK_REQUEST              ((uint32_t)USART_RQR_SBKRQ)        /*!< Send Break Request          */
N#define UART_MUTE_MODE_REQUEST              ((uint32_t)USART_RQR_MMRQ)         /*!< Mute Mode Request           */
N#define UART_RXDATA_FLUSH_REQUEST           ((uint32_t)USART_RQR_RXFRQ)        /*!< Receive Data flush Request  */
N#define UART_TXDATA_FLUSH_REQUEST           ((uint32_t)USART_RQR_TXFRQ)        /*!< Transmit data flush Request */
N/**
N  * @}
N  */
N
N/** @defgroup UART_Advanced_Features_Initialization_Type  UART Advanced Feature Initialization Type
N  * @{
N  */
N#define UART_ADVFEATURE_NO_INIT                 ((uint32_t)0x00000000U)         /*!< No advanced feature initialization       */
N#define UART_ADVFEATURE_TXINVERT_INIT           ((uint32_t)0x00000001U)         /*!< TX pin active level inversion            */
N#define UART_ADVFEATURE_RXINVERT_INIT           ((uint32_t)0x00000002U)         /*!< RX pin active level inversion            */
N#define UART_ADVFEATURE_DATAINVERT_INIT         ((uint32_t)0x00000004U)         /*!< Binary data inversion                    */
N#define UART_ADVFEATURE_SWAP_INIT               ((uint32_t)0x00000008U)         /*!< TX/RX pins swap                          */
N#define UART_ADVFEATURE_RXOVERRUNDISABLE_INIT   ((uint32_t)0x00000010U)         /*!< RX overrun disable                       */
N#define UART_ADVFEATURE_DMADISABLEONERROR_INIT  ((uint32_t)0x00000020U)         /*!< DMA disable on Reception Error           */
N#define UART_ADVFEATURE_AUTOBAUDRATE_INIT       ((uint32_t)0x00000040U)         /*!< Auto Baud rate detection initialization  */
N#define UART_ADVFEATURE_MSBFIRST_INIT           ((uint32_t)0x00000080U)         /*!< Most significant bit sent/received first */
N/**
N  * @}
N  */
N
N/** @defgroup UART_Tx_Inv UART Advanced Feature TX Pin Active Level Inversion
N  * @{
N  */
N#define UART_ADVFEATURE_TXINV_DISABLE       ((uint32_t)0x00000000U)             /*!< TX pin active level inversion disable */
N#define UART_ADVFEATURE_TXINV_ENABLE        ((uint32_t)USART_CR2_TXINV)         /*!< TX pin active level inversion enable  */
N/**
N  * @}
N  */
N
N/** @defgroup UART_Rx_Inv UART Advanced Feature RX Pin Active Level Inversion
N  * @{
N  */
N#define UART_ADVFEATURE_RXINV_DISABLE       ((uint32_t)0x00000000U)             /*!< RX pin active level inversion disable */ 
N#define UART_ADVFEATURE_RXINV_ENABLE        ((uint32_t)USART_CR2_RXINV)         /*!< RX pin active level inversion enable  */ 
N/**
N  * @}
N  */
N
N/** @defgroup UART_Data_Inv  UART Advanced Feature Binary Data Inversion
N  * @{
N  */
N#define UART_ADVFEATURE_DATAINV_DISABLE     ((uint32_t)0x00000000U)             /*!< Binary data inversion disable */
N#define UART_ADVFEATURE_DATAINV_ENABLE      ((uint32_t)USART_CR2_DATAINV)       /*!< Binary data inversion enable  */
N/**
N  * @}
N  */
N
N/** @defgroup UART_Rx_Tx_Swap UART Advanced Feature RX TX Pins Swap
N  * @{
N  */
N#define UART_ADVFEATURE_SWAP_DISABLE        ((uint32_t)0x00000000U)             /*!< TX/RX pins swap disable */
N#define UART_ADVFEATURE_SWAP_ENABLE         ((uint32_t)USART_CR2_SWAP)          /*!< TX/RX pins swap enable  */
N/**
N  * @}
N  */
N
N/** @defgroup UART_Overrun_Disable  UART Advanced Feature Overrun Disable
N  * @{
N  */
N#define UART_ADVFEATURE_OVERRUN_ENABLE      ((uint32_t)0x00000000U)             /*!< RX overrun enable  */ 
N#define UART_ADVFEATURE_OVERRUN_DISABLE     ((uint32_t)USART_CR3_OVRDIS)        /*!< RX overrun disable */ 
N/**
N  * @}
N  */
N
N/** @defgroup UART_AutoBaudRate_Enable  UART Advanced Feature Auto BaudRate Enable
N  * @{
N  */
N#define UART_ADVFEATURE_AUTOBAUDRATE_DISABLE   ((uint32_t)0x00000000U)          /*!< RX Auto Baud rate detection enable  */ 
N#define UART_ADVFEATURE_AUTOBAUDRATE_ENABLE    ((uint32_t)USART_CR2_ABREN)      /*!< RX Auto Baud rate detection disable */ 
N/**
N  * @}
N  */
N
N/** @defgroup UART_DMA_Disable_on_Rx_Error   UART Advanced Feature DMA Disable On Rx Error
N  * @{
N  */
N#define UART_ADVFEATURE_DMA_ENABLEONRXERROR    ((uint32_t)0x00000000U)          /*!< DMA enable on Reception Error  */
N#define UART_ADVFEATURE_DMA_DISABLEONRXERROR   ((uint32_t)USART_CR3_DDRE)       /*!< DMA disable on Reception Error */
N/**
N  * @}
N  */
N
N/** @defgroup UART_MSB_First   UART Advanced Feature MSB First
N  * @{
N  */
N#define UART_ADVFEATURE_MSBFIRST_DISABLE    ((uint32_t)0x00000000U)             /*!< Most significant bit sent/received first disable */
N#define UART_ADVFEATURE_MSBFIRST_ENABLE     ((uint32_t)USART_CR2_MSBFIRST)      /*!< Most significant bit sent/received first enable  */
N/**
N  * @}
N  */
N
N/** @defgroup UART_Stop_Mode_Enable   UART Advanced Feature Stop Mode Enable
N  * @{
N  */
N#define UART_ADVFEATURE_STOPMODE_DISABLE    ((uint32_t)0x00000000U)             /*!< UART stop mode disable */
N#define UART_ADVFEATURE_STOPMODE_ENABLE     ((uint32_t)USART_CR1_UESM)          /*!< UART stop mode enable  */
N/**
N  * @}
N  */
N
N/** @defgroup UART_Mute_Mode   UART Advanced Feature Mute Mode Enable
N  * @{
N  */
N#define UART_ADVFEATURE_MUTEMODE_DISABLE    ((uint32_t)0x00000000U)             /*!< UART mute mode disable */
N#define UART_ADVFEATURE_MUTEMODE_ENABLE     ((uint32_t)USART_CR1_MME)           /*!< UART mute mode enable  */
N/**
N  * @}
N  */
N
N/** @defgroup UART_CR2_ADDRESS_LSB_POS    UART Address-matching LSB Position In CR2 Register
N  * @{
N  */
N#define UART_CR2_ADDRESS_LSB_POS            ((uint32_t) 24U)                    /*!< UART address-matching LSB position in CR2 register */
N/**
N  * @}
N  */
N
N/** @defgroup UART_WakeUp_from_Stop_Selection   UART WakeUp From Stop Selection
N  * @{
N  */
N#define UART_WAKEUP_ON_ADDRESS              ((uint32_t)0x00000000U)             /*!< UART wake-up on address                         */
N#define UART_WAKEUP_ON_STARTBIT             ((uint32_t)USART_CR3_WUS_1)         /*!< UART wake-up on start bit                       */
N#define UART_WAKEUP_ON_READDATA_NONEMPTY    ((uint32_t)USART_CR3_WUS)           /*!< UART wake-up on receive data register not empty */
N/**
N  * @}
N  */
N
N/** @defgroup UART_DriverEnable_Polarity      UART DriverEnable Polarity
N  * @{
N  */
N#define UART_DE_POLARITY_HIGH               ((uint32_t)0x00000000U)             /*!< Driver enable signal is active high */
N#define UART_DE_POLARITY_LOW                ((uint32_t)USART_CR3_DEP)           /*!< Driver enable signal is active low  */
N/**
N  * @}
N  */
N
N/** @defgroup UART_CR1_DEAT_ADDRESS_LSB_POS    UART Driver Enable Assertion Time LSB Position In CR1 Register
N  * @{
N  */
N#define UART_CR1_DEAT_ADDRESS_LSB_POS       ((uint32_t) 21U)                    /*!< UART Driver Enable assertion time LSB position in CR1 register */
N/**
N  * @}
N  */
N
N/** @defgroup UART_CR1_DEDT_ADDRESS_LSB_POS    UART Driver Enable DeAssertion Time LSB Position In CR1 Register
N  * @{
N  */
N#define UART_CR1_DEDT_ADDRESS_LSB_POS       ((uint32_t) 16U)                    /*!< UART Driver Enable de-assertion time LSB position in CR1 register */
N/**
N  * @}
N  */
N
N/** @defgroup UART_Interruption_Mask    UART Interruptions Flag Mask
N  * @{
N  */
N#define UART_IT_MASK                        ((uint32_t)0x001FU)                 /*!< UART interruptions flags mask */
N/**
N  * @}
N  */
N
N/** @defgroup UART_TimeOut_Value    UART polling-based communications time-out value
N  * @{
N  */
N#define HAL_UART_TIMEOUT_VALUE              0x1FFFFFF                           /*!< UART polling-based communications time-out value */
N/**
N  * @}
N  */
N
N/** @defgroup UART_Flags     UART Status Flags
N  *        Elements values convention: 0xXXXX
N  *           - 0xXXXX  : Flag mask in the ISR register
N  * @{
N  */
N#define UART_FLAG_REACK                     USART_ISR_REACK   /*!< UART receive enable acknowledge flag      */
N#define UART_FLAG_TEACK                     USART_ISR_TEACK   /*!< UART transmit enable acknowledge flag     */
N#define UART_FLAG_WUF                       USART_ISR_WUF     /*!< UART wake-up from stop mode flag          */
N#define UART_FLAG_RWU                       USART_ISR_RWU     /*!< UART receiver wake-up from mute mode flag */
N#define UART_FLAG_SBKF                      USART_ISR_SBKF    /*!< UART send break flag                      */
N#define UART_FLAG_CMF                       USART_ISR_CMF     /*!< UART character match flag                 */
N#define UART_FLAG_BUSY                      USART_ISR_BUSY    /*!< UART busy flag                            */
N#define UART_FLAG_ABRF                      USART_ISR_ABRF    /*!< UART auto Baud rate flag                  */
N#define UART_FLAG_ABRE                      USART_ISR_ABRE    /*!< UART auto Baud rate error                 */
N#define UART_FLAG_EOBF                      USART_ISR_EOBF    /*!< UART end of block flag                    */
N#define UART_FLAG_RTOF                      USART_ISR_RTOF    /*!< UART receiver timeout flag                */
N#define UART_FLAG_CTS                       USART_ISR_CTS     /*!< UART clear to send flag                   */
N#define UART_FLAG_CTSIF                     USART_ISR_CTSIF   /*!< UART clear to send interrupt flag         */
N#define UART_FLAG_LBDF                      USART_ISR_LBDF    /*!< UART LIN break detection flag             */
N#define UART_FLAG_TXE                       USART_ISR_TXE     /*!< UART transmit data register empty         */
N#define UART_FLAG_TC                        USART_ISR_TC      /*!< UART transmission complete                */
N#define UART_FLAG_RXNE                      USART_ISR_RXNE    /*!< UART read data register not empty         */
N#define UART_FLAG_IDLE                      USART_ISR_IDLE    /*!< UART idle flag                            */
N#define UART_FLAG_ORE                       USART_ISR_ORE     /*!< UART overrun error                        */
N#define UART_FLAG_NE                        USART_ISR_NE      /*!< UART noise error                          */
N#define UART_FLAG_FE                        USART_ISR_FE      /*!< UART frame error                          */
N#define UART_FLAG_PE                        USART_ISR_PE      /*!< UART parity error                         */
N/**
N  * @}
N  */
N
N/** @defgroup UART_Interrupt_definition   UART Interrupts Definition
N  *        Elements values convention: 000ZZZZZ0XXYYYYYb
N  *           - YYYYY  : Interrupt source position in the XX register (5bits)
N  *           - XX  : Interrupt source register (2bits)
N  *                 - 01: CR1 register
N  *                 - 10: CR2 register
N  *                 - 11: CR3 register
N  *           - ZZZZZ  : Flag position in the ISR register(5bits)
N  * @{
N  */
N#define UART_IT_PE                          ((uint32_t)0x0028)                  /*!< UART parity error interruption                 */
N#define UART_IT_TXE                         ((uint32_t)0x0727)                  /*!< UART transmit data register empty interruption */
N#define UART_IT_TC                          ((uint32_t)0x0626)                  /*!< UART transmission complete interruption        */
N#define UART_IT_RXNE                        ((uint32_t)0x0525)                  /*!< UART read data register not empty interruption */
N#define UART_IT_IDLE                        ((uint32_t)0x0424)                  /*!< UART idle interruption                         */
N#define UART_IT_LBD                         ((uint32_t)0x0846)                  /*!< UART LIN break detection interruption          */
N#define UART_IT_CTS                         ((uint32_t)0x096A)                  /*!< UART CTS interruption                          */
N#define UART_IT_CM                          ((uint32_t)0x112E)                  /*!< UART character match interruption              */
N#define UART_IT_WUF                         ((uint32_t)0x1476)                  /*!< UART wake-up from stop mode interruption       */
N
N/**       Elements values convention: 000000000XXYYYYYb
N  *           - YYYYY  : Interrupt source position in the XX register (5bits)
N  *           - XX  : Interrupt source register (2bits)
N  *                 - 01: CR1 register
N  *                 - 10: CR2 register
N  *                 - 11: CR3 register
N  */
N#define UART_IT_ERR                         ((uint32_t)0x0060)                  /*!< UART error interruption         */   
N
N/**       Elements values convention: 0000ZZZZ00000000b
N  *           - ZZZZ  : Flag position in the ISR register(4bits)
N  */
N#define UART_IT_ORE                         ((uint32_t)0x0300)                  /*!< UART overrun error interruption */ 
N#define UART_IT_NE                          ((uint32_t)0x0200)                  /*!< UART noise error interruption   */ 
N#define UART_IT_FE                          ((uint32_t)0x0100)                  /*!< UART frame error interruption   */ 
N/**
N  * @}
N  */
N
N/** @defgroup UART_IT_CLEAR_Flags  UART Interruption Clear Flags
N  * @{
N  */
N#define UART_CLEAR_PEF                       USART_ICR_PECF            /*!< Parity Error Clear Flag           */
N#define UART_CLEAR_FEF                       USART_ICR_FECF            /*!< Framing Error Clear Flag          */
N#define UART_CLEAR_NEF                       USART_ICR_NCF             /*!< Noise detected Clear Flag         */
N#define UART_CLEAR_OREF                      USART_ICR_ORECF           /*!< Overrun Error Clear Flag          */
N#define UART_CLEAR_IDLEF                     USART_ICR_IDLECF          /*!< IDLE line detected Clear Flag     */
N#define UART_CLEAR_TCF                       USART_ICR_TCCF            /*!< Transmission Complete Clear Flag  */
N#define UART_CLEAR_LBDF                      USART_ICR_LBDCF           /*!< LIN Break Detection Clear Flag    */
N#define UART_CLEAR_CTSF                      USART_ICR_CTSCF           /*!< CTS Interrupt Clear Flag          */
N#define UART_CLEAR_RTOF                      USART_ICR_RTOCF           /*!< Receiver Time Out Clear Flag      */
N#define UART_CLEAR_EOBF                      USART_ICR_EOBCF           /*!< End Of Block Clear Flag           */
N#define UART_CLEAR_CMF                       USART_ICR_CMCF            /*!< Character Match Clear Flag        */
N#define UART_CLEAR_WUF                       USART_ICR_WUCF            /*!< Wake Up from stop mode Clear Flag */
N/**
N  * @}
N  */
N
N
N/**
N  * @}
N  */
N
N/* Exported macros -----------------------------------------------------------*/
N/** @defgroup UART_Exported_Macros UART Exported Macros
N  * @{
N  */
N
N/** @brief  Reset UART handle states.
N  * @param  __HANDLE__: UART handle.
N  * @retval None
N  */
N#define __HAL_UART_RESET_HANDLE_STATE(__HANDLE__)  do{                                                   \
N                                                       (__HANDLE__)->gState = HAL_UART_STATE_RESET;      \
N                                                       (__HANDLE__)->RxState = HAL_UART_STATE_RESET;     \
N                                                     } while(0)
X#define __HAL_UART_RESET_HANDLE_STATE(__HANDLE__)  do{                                                                                                          (__HANDLE__)->gState = HAL_UART_STATE_RESET;                                                             (__HANDLE__)->RxState = HAL_UART_STATE_RESET;                                                          } while(0)
N/** @brief  Flush the UART Data registers.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @retval None
N  */
N#define __HAL_UART_FLUSH_DRREGISTER(__HANDLE__)  \
N  do{                \
N      SET_BIT((__HANDLE__)->Instance->RQR, UART_RXDATA_FLUSH_REQUEST); \
N      SET_BIT((__HANDLE__)->Instance->RQR, UART_TXDATA_FLUSH_REQUEST); \
N    }  while(0)
X#define __HAL_UART_FLUSH_DRREGISTER(__HANDLE__)    do{                      SET_BIT((__HANDLE__)->Instance->RQR, UART_RXDATA_FLUSH_REQUEST);       SET_BIT((__HANDLE__)->Instance->RQR, UART_TXDATA_FLUSH_REQUEST);     }  while(0)
N
N/** @brief  Clear the specified UART pending flag.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @param  __FLAG__: specifies the flag to check.
N  *          This parameter can be any combination of the following values:
N  *            @arg @ref UART_CLEAR_PEF      Parity Error Clear Flag           
N  *            @arg @ref UART_CLEAR_FEF      Framing Error Clear Flag          
N  *            @arg @ref UART_CLEAR_NEF      Noise detected Clear Flag         
N  *            @arg @ref UART_CLEAR_OREF     Overrun Error Clear Flag          
N  *            @arg @ref UART_CLEAR_IDLEF    IDLE line detected Clear Flag     
N  *            @arg @ref UART_CLEAR_TCF      Transmission Complete Clear Flag  
N  *            @arg @ref UART_CLEAR_LBDF     LIN Break Detection Clear Flag
N  *            @arg @ref UART_CLEAR_CTSF     CTS Interrupt Clear Flag          
N  *            @arg @ref UART_CLEAR_RTOF     Receiver Time Out Clear Flag      
N  *            @arg @ref UART_CLEAR_EOBF     End Of Block Clear Flag
N  *            @arg @ref UART_CLEAR_CMF      Character Match Clear Flag        
N  *            @arg @ref UART_CLEAR_WUF      Wake Up from stop mode Clear Flag 
N  * @retval None
N  */
N#define __HAL_UART_CLEAR_FLAG(__HANDLE__, __FLAG__) ((__HANDLE__)->Instance->ICR = (__FLAG__))
N
N/** @brief  Clear the UART PE pending flag.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @retval None
N  */
N#define __HAL_UART_CLEAR_PEFLAG(__HANDLE__)   __HAL_UART_CLEAR_FLAG((__HANDLE__), UART_CLEAR_PEF)
N
N/** @brief  Clear the UART FE pending flag.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @retval None
N  */
N#define __HAL_UART_CLEAR_FEFLAG(__HANDLE__)   __HAL_UART_CLEAR_FLAG((__HANDLE__), UART_CLEAR_FEF)
N
N/** @brief  Clear the UART NE pending flag.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @retval None
N  */
N#define __HAL_UART_CLEAR_NEFLAG(__HANDLE__)  __HAL_UART_CLEAR_FLAG((__HANDLE__), UART_CLEAR_NEF)
N
N/** @brief  Clear the UART ORE pending flag.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @retval None
N  */
N#define __HAL_UART_CLEAR_OREFLAG(__HANDLE__)   __HAL_UART_CLEAR_FLAG((__HANDLE__), UART_CLEAR_OREF)
N
N/** @brief  Clear the UART IDLE pending flag.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @retval None
N  */
N#define __HAL_UART_CLEAR_IDLEFLAG(__HANDLE__)   __HAL_UART_CLEAR_FLAG((__HANDLE__), UART_CLEAR_IDLEF)
N
N/** @brief  Check whether the specified UART flag is set or not.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @param  __FLAG__: specifies the flag to check.
N  *        This parameter can be one of the following values:
N  *            @arg @ref UART_FLAG_REACK Receive enable acknowledge flag
N  *            @arg @ref UART_FLAG_TEACK Transmit enable acknowledge flag
N  *            @arg @ref UART_FLAG_WUF   Wake up from stop mode flag
N  *            @arg @ref UART_FLAG_RWU   Receiver wake up flag (if the UART in mute mode)
N  *            @arg @ref UART_FLAG_SBKF  Send Break flag
N  *            @arg @ref UART_FLAG_CMF   Character match flag
N  *            @arg @ref UART_FLAG_BUSY  Busy flag
N  *            @arg @ref UART_FLAG_ABRF  Auto Baud rate detection flag
N  *            @arg @ref UART_FLAG_ABRE  Auto Baud rate detection error flag
N  *            @arg @ref UART_FLAG_EOBF  End of block flag
N  *            @arg @ref UART_FLAG_RTOF  Receiver timeout flag
N  *            @arg @ref UART_FLAG_CTS   CTS Change flag
N  *            @arg @ref UART_FLAG_LBDF  LIN Break detection flag
N  *            @arg @ref UART_FLAG_TXE   Transmit data register empty flag
N  *            @arg @ref UART_FLAG_TC    Transmission Complete flag
N  *            @arg @ref UART_FLAG_RXNE  Receive data register not empty flag
N  *            @arg @ref UART_FLAG_IDLE  Idle Line detection flag
N  *            @arg @ref UART_FLAG_ORE   Overrun Error flag
N  *            @arg @ref UART_FLAG_NE    Noise Error flag
N  *            @arg @ref UART_FLAG_FE    Framing Error flag
N  *            @arg @ref UART_FLAG_PE    Parity Error flag
N  * @retval The new state of __FLAG__ (TRUE or FALSE).
N  */
N#define __HAL_UART_GET_FLAG(__HANDLE__, __FLAG__) (((__HANDLE__)->Instance->ISR & (__FLAG__)) == (__FLAG__))
N
N/** @brief  Enable the specified UART interrupt.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @param  __INTERRUPT__: specifies the UART interrupt source to enable.
N  *          This parameter can be one of the following values:
N  *            @arg @ref UART_IT_WUF  Wakeup from stop mode interrupt
N  *            @arg @ref UART_IT_CM   Character match interrupt
N  *            @arg @ref UART_IT_CTS  CTS change interrupt
N  *            @arg @ref UART_IT_LBD  LIN Break detection interrupt
N  *            @arg @ref UART_IT_TXE  Transmit Data Register empty interrupt
N  *            @arg @ref UART_IT_TC   Transmission complete interrupt
N  *            @arg @ref UART_IT_RXNE Receive Data register not empty interrupt
N  *            @arg @ref UART_IT_IDLE Idle line detection interrupt
N  *            @arg @ref UART_IT_PE   Parity Error interrupt
N  *            @arg @ref UART_IT_ERR  Error interrupt (Frame error, noise error, overrun error)
N  * @retval None
N  */
N#define __HAL_UART_ENABLE_IT(__HANDLE__, __INTERRUPT__)   (((((uint8_t)(__INTERRUPT__)) >> 5U) == 1U)? ((__HANDLE__)->Instance->CR1 |= (1U << ((__INTERRUPT__) & UART_IT_MASK))): \
N                                                           ((((uint8_t)(__INTERRUPT__)) >> 5U) == 2U)? ((__HANDLE__)->Instance->CR2 |= (1U << ((__INTERRUPT__) & UART_IT_MASK))): \
N                                                           ((__HANDLE__)->Instance->CR3 |= (1U << ((__INTERRUPT__) & UART_IT_MASK))))
X#define __HAL_UART_ENABLE_IT(__HANDLE__, __INTERRUPT__)   (((((uint8_t)(__INTERRUPT__)) >> 5U) == 1U)? ((__HANDLE__)->Instance->CR1 |= (1U << ((__INTERRUPT__) & UART_IT_MASK))):                                                            ((((uint8_t)(__INTERRUPT__)) >> 5U) == 2U)? ((__HANDLE__)->Instance->CR2 |= (1U << ((__INTERRUPT__) & UART_IT_MASK))):                                                            ((__HANDLE__)->Instance->CR3 |= (1U << ((__INTERRUPT__) & UART_IT_MASK))))
N
N
N/** @brief  Disable the specified UART interrupt.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @param  __INTERRUPT__: specifies the UART interrupt source to disable.
N  *          This parameter can be one of the following values:
N  *            @arg @ref UART_IT_WUF  Wakeup from stop mode interrupt
N  *            @arg @ref UART_IT_CM   Character match interrupt
N  *            @arg @ref UART_IT_CTS  CTS change interrupt
N  *            @arg @ref UART_IT_LBD  LIN Break detection interrupt
N  *            @arg @ref UART_IT_TXE  Transmit Data Register empty interrupt
N  *            @arg @ref UART_IT_TC   Transmission complete interrupt
N  *            @arg @ref UART_IT_RXNE Receive Data register not empty interrupt
N  *            @arg @ref UART_IT_IDLE Idle line detection interrupt
N  *            @arg @ref UART_IT_PE   Parity Error interrupt
N  *            @arg @ref UART_IT_ERR  Error interrupt (Frame error, noise error, overrun error)
N  * @retval None
N  */
N#define __HAL_UART_DISABLE_IT(__HANDLE__, __INTERRUPT__)  (((((uint8_t)(__INTERRUPT__)) >> 5U) == 1U)? ((__HANDLE__)->Instance->CR1 &= ~ (1U << ((__INTERRUPT__) & UART_IT_MASK))): \
N                                                           ((((uint8_t)(__INTERRUPT__)) >> 5U) == 2U)? ((__HANDLE__)->Instance->CR2 &= ~ (1U << ((__INTERRUPT__) & UART_IT_MASK))): \
N                                                           ((__HANDLE__)->Instance->CR3 &= ~ (1U << ((__INTERRUPT__) & UART_IT_MASK))))
X#define __HAL_UART_DISABLE_IT(__HANDLE__, __INTERRUPT__)  (((((uint8_t)(__INTERRUPT__)) >> 5U) == 1U)? ((__HANDLE__)->Instance->CR1 &= ~ (1U << ((__INTERRUPT__) & UART_IT_MASK))):                                                            ((((uint8_t)(__INTERRUPT__)) >> 5U) == 2U)? ((__HANDLE__)->Instance->CR2 &= ~ (1U << ((__INTERRUPT__) & UART_IT_MASK))):                                                            ((__HANDLE__)->Instance->CR3 &= ~ (1U << ((__INTERRUPT__) & UART_IT_MASK))))
N
N/** @brief  Check whether the specified UART interrupt has occurred or not.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @param  __IT__: specifies the UART interrupt to check.
N  *          This parameter can be one of the following values:
N  *            @arg @ref UART_IT_WUF  Wakeup from stop mode interrupt
N  *            @arg @ref UART_IT_CM   Character match interrupt
N  *            @arg @ref UART_IT_CTS  CTS change interrupt
N  *            @arg @ref UART_IT_LBD  LIN Break detection interrupt
N  *            @arg @ref UART_IT_TXE  Transmit Data Register empty interrupt
N  *            @arg @ref UART_IT_TC   Transmission complete interrupt
N  *            @arg @ref UART_IT_RXNE Receive Data register not empty interrupt
N  *            @arg @ref UART_IT_IDLE Idle line detection interrupt
N  *            @arg @ref UART_IT_ORE  Overrun Error interrupt
N  *            @arg @ref UART_IT_NE   Noise Error interrupt   
N  *            @arg @ref UART_IT_FE   Framing Error interrupt   
N  *            @arg @ref UART_IT_PE   Parity Error interrupt
N  * @retval The new state of __IT__ (TRUE or FALSE).
N  */
N#define __HAL_UART_GET_IT(__HANDLE__, __IT__) ((__HANDLE__)->Instance->ISR & ((uint32_t)1U << ((__IT__)>> 0x08U)))
N
N/** @brief  Check whether the specified UART interrupt source is enabled or not.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @param  __IT__: specifies the UART interrupt source to check.
N  *          This parameter can be one of the following values:
N  *            @arg @ref UART_IT_WUF  Wakeup from stop mode interrupt
N  *            @arg @ref UART_IT_CM   Character match interrupt  
N  *            @arg @ref UART_IT_CTS  CTS change interrupt
N  *            @arg @ref UART_IT_LBD  LIN Break detection interrupt
N  *            @arg @ref UART_IT_TXE  Transmit Data Register empty interrupt
N  *            @arg @ref UART_IT_TC   Transmission complete interrupt
N  *            @arg @ref UART_IT_RXNE Receive Data register not empty interrupt
N  *            @arg @ref UART_IT_IDLE Idle line detection interrupt
N  *            @arg @ref UART_IT_ERR  Error interrupt (Frame error, noise error, overrun error)
N  *            @arg @ref UART_IT_PE   Parity Error interrupt
N  * @retval The new state of __IT__ (TRUE or FALSE).
N  */
N#define __HAL_UART_GET_IT_SOURCE(__HANDLE__, __IT__) ((((((uint8_t)(__IT__)) >> 5U) == 1U)? (__HANDLE__)->Instance->CR1:(((((uint8_t)(__IT__)) >> 5U) == 2U)? \
N                                                       (__HANDLE__)->Instance->CR2 : (__HANDLE__)->Instance->CR3)) & ((uint32_t)1U << (((uint16_t)(__IT__)) & UART_IT_MASK)))
X#define __HAL_UART_GET_IT_SOURCE(__HANDLE__, __IT__) ((((((uint8_t)(__IT__)) >> 5U) == 1U)? (__HANDLE__)->Instance->CR1:(((((uint8_t)(__IT__)) >> 5U) == 2U)?                                                        (__HANDLE__)->Instance->CR2 : (__HANDLE__)->Instance->CR3)) & ((uint32_t)1U << (((uint16_t)(__IT__)) & UART_IT_MASK)))
N
N/** @brief  Clear the specified UART ISR flag, in setting the proper ICR register flag.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @param  __IT_CLEAR__: specifies the interrupt clear register flag that needs to be set
N  *                       to clear the corresponding interrupt
N  *          This parameter can be one of the following values:
N  *            @arg @ref UART_CLEAR_PEF Parity Error Clear Flag
N  *            @arg @ref UART_CLEAR_FEF Framing Error Clear Flag
N  *            @arg @ref UART_CLEAR_NEF Noise detected Clear Flag
N  *            @arg @ref UART_CLEAR_OREF Overrun Error Clear Flag
N  *            @arg @ref UART_CLEAR_IDLEF IDLE line detected Clear Flag
N  *            @arg @ref UART_CLEAR_TCF Transmission Complete Clear Flag
N  *            @arg @ref UART_CLEAR_LBDF LIN Break Detection Clear Flag
N  *            @arg @ref UART_CLEAR_CTSF CTS Interrupt Clear Flag
N  *            @arg @ref UART_CLEAR_RTOF Receiver Time Out Clear Flag
N  *            @arg @ref UART_CLEAR_EOBF End Of Block Clear Flag
N  *            @arg @ref UART_CLEAR_CMF Character Match Clear Flag
N  *            @arg @ref UART_CLEAR_WUF  Wake Up from stop mode Clear Flag
N  * @retval None
N  */
N#define __HAL_UART_CLEAR_IT(__HANDLE__, __IT_CLEAR__) ((__HANDLE__)->Instance->ICR = (uint32_t)(__IT_CLEAR__))
N
N/** @brief  Set a specific UART request flag.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @param  __REQ__: specifies the request flag to set
N  *          This parameter can be one of the following values:
N  *            @arg @ref UART_AUTOBAUD_REQUEST Auto-Baud Rate Request
N  *            @arg @ref UART_SENDBREAK_REQUEST Send Break Request
N  *            @arg @ref UART_MUTE_MODE_REQUEST Mute Mode Request
N  *            @arg @ref UART_RXDATA_FLUSH_REQUEST Receive Data flush Request
N  *            @arg @ref UART_TXDATA_FLUSH_REQUEST Transmit data flush Request
N  * @retval None
N  */
N#define __HAL_UART_SEND_REQ(__HANDLE__, __REQ__) ((__HANDLE__)->Instance->RQR |= (uint32_t)(__REQ__))
N
N/** @brief  Enable the UART one bit sample method.
N  * @param  __HANDLE__: specifies the UART Handle.  
N  * @retval None
N  */     
N#define __HAL_UART_ONE_BIT_SAMPLE_ENABLE(__HANDLE__) ((__HANDLE__)->Instance->CR3|= USART_CR3_ONEBIT)
N
N/** @brief  Disable the UART one bit sample method.
N  * @param  __HANDLE__: specifies the UART Handle.  
N  * @retval None
N  */      
N#define __HAL_UART_ONE_BIT_SAMPLE_DISABLE(__HANDLE__) ((__HANDLE__)->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT))
N
N/** @brief  Enable UART.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @retval None
N  */
N#define __HAL_UART_ENABLE(__HANDLE__)                   ((__HANDLE__)->Instance->CR1 |=  USART_CR1_UE)
N
N/** @brief  Disable UART.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @retval None
N  */
N#define __HAL_UART_DISABLE(__HANDLE__)                  ((__HANDLE__)->Instance->CR1 &=  ~USART_CR1_UE)
N
N/** @brief  Enable CTS flow control.
N  * @note   This macro allows to enable CTS hardware flow control for a given UART instance, 
N  *         without need to call HAL_UART_Init() function.
N  *         As involving direct access to UART registers, usage of this macro should be fully endorsed by user.
N  * @note   As macro is expected to be used for modifying CTS Hw flow control feature activation, without need
N  *         for USART instance Deinit/Init, following conditions for macro call should be fulfilled :
N  *           - UART instance should have already been initialised (through call of HAL_UART_Init() )
N  *           - macro could only be called when corresponding UART instance is disabled (i.e. __HAL_UART_DISABLE(__HANDLE__))
N  *             and should be followed by an Enable macro (i.e. __HAL_UART_ENABLE(__HANDLE__)).                                                                                                                  
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @retval None
N  */
N#define __HAL_UART_HWCONTROL_CTS_ENABLE(__HANDLE__)        \
N  do{                                                      \
N    SET_BIT((__HANDLE__)->Instance->CR3, USART_CR3_CTSE);  \
N    (__HANDLE__)->Init.HwFlowCtl |= USART_CR3_CTSE;        \
N  } while(0)
X#define __HAL_UART_HWCONTROL_CTS_ENABLE(__HANDLE__)          do{                                                          SET_BIT((__HANDLE__)->Instance->CR3, USART_CR3_CTSE);      (__HANDLE__)->Init.HwFlowCtl |= USART_CR3_CTSE;          } while(0)
N
N/** @brief  Disable CTS flow control.
N  * @note   This macro allows to disable CTS hardware flow control for a given UART instance, 
N  *         without need to call HAL_UART_Init() function.
N  *         As involving direct access to UART registers, usage of this macro should be fully endorsed by user.
N  * @note   As macro is expected to be used for modifying CTS Hw flow control feature activation, without need
N  *         for USART instance Deinit/Init, following conditions for macro call should be fulfilled :
N  *           - UART instance should have already been initialised (through call of HAL_UART_Init() )
N  *           - macro could only be called when corresponding UART instance is disabled (i.e. __HAL_UART_DISABLE(__HANDLE__))
N  *             and should be followed by an Enable macro (i.e. __HAL_UART_ENABLE(__HANDLE__)). 
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @retval None
N  */
N#define __HAL_UART_HWCONTROL_CTS_DISABLE(__HANDLE__)        \
N  do{                                                       \
N    CLEAR_BIT((__HANDLE__)->Instance->CR3, USART_CR3_CTSE); \
N    (__HANDLE__)->Init.HwFlowCtl &= ~(USART_CR3_CTSE);      \
N  } while(0)
X#define __HAL_UART_HWCONTROL_CTS_DISABLE(__HANDLE__)          do{                                                           CLEAR_BIT((__HANDLE__)->Instance->CR3, USART_CR3_CTSE);     (__HANDLE__)->Init.HwFlowCtl &= ~(USART_CR3_CTSE);        } while(0)
N
N/** @brief  Enable RTS flow control.
N  * @note   This macro allows to enable RTS hardware flow control for a given UART instance, 
N  *         without need to call HAL_UART_Init() function.
N  *         As involving direct access to UART registers, usage of this macro should be fully endorsed by user.
N  * @note   As macro is expected to be used for modifying RTS Hw flow control feature activation, without need
N  *         for USART instance Deinit/Init, following conditions for macro call should be fulfilled :
N  *           - UART instance should have already been initialised (through call of HAL_UART_Init() )
N  *           - macro could only be called when corresponding UART instance is disabled (i.e. __HAL_UART_DISABLE(__HANDLE__))
N  *             and should be followed by an Enable macro (i.e. __HAL_UART_ENABLE(__HANDLE__)). 
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @retval None
N  */
N#define __HAL_UART_HWCONTROL_RTS_ENABLE(__HANDLE__)       \
N  do{                                                     \
N    SET_BIT((__HANDLE__)->Instance->CR3, USART_CR3_RTSE); \
N    (__HANDLE__)->Init.HwFlowCtl |= USART_CR3_RTSE;       \
N  } while(0)
X#define __HAL_UART_HWCONTROL_RTS_ENABLE(__HANDLE__)         do{                                                         SET_BIT((__HANDLE__)->Instance->CR3, USART_CR3_RTSE);     (__HANDLE__)->Init.HwFlowCtl |= USART_CR3_RTSE;         } while(0)
N
N/** @brief  Disable RTS flow control.
N  * @note   This macro allows to disable RTS hardware flow control for a given UART instance, 
N  *         without need to call HAL_UART_Init() function.
N  *         As involving direct access to UART registers, usage of this macro should be fully endorsed by user.
N  * @note   As macro is expected to be used for modifying RTS Hw flow control feature activation, without need
N  *         for USART instance Deinit/Init, following conditions for macro call should be fulfilled :
N  *           - UART instance should have already been initialised (through call of HAL_UART_Init() )
N  *           - macro could only be called when corresponding UART instance is disabled (i.e. __HAL_UART_DISABLE(__HANDLE__))
N  *             and should be followed by an Enable macro (i.e. __HAL_UART_ENABLE(__HANDLE__)). 
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @retval None
N  */
N#define __HAL_UART_HWCONTROL_RTS_DISABLE(__HANDLE__)       \
N  do{                                                      \
N    CLEAR_BIT((__HANDLE__)->Instance->CR3, USART_CR3_RTSE);\
N    (__HANDLE__)->Init.HwFlowCtl &= ~(USART_CR3_RTSE);     \
N  } while(0)
X#define __HAL_UART_HWCONTROL_RTS_DISABLE(__HANDLE__)         do{                                                          CLEAR_BIT((__HANDLE__)->Instance->CR3, USART_CR3_RTSE);    (__HANDLE__)->Init.HwFlowCtl &= ~(USART_CR3_RTSE);       } while(0)
N
N/** @brief  macros to enable the UART's one bit sampling method
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @retval None
N  */
N#define __HAL_UART_ONE_BIT_ENABLE(__HANDLE__) ((__HANDLE__)->Instance->CR3|= USART_CR3_ONEBIT)
N
N/** @brief  macros to disable the UART's one bit sampling method
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @retval None
N  */
N#define __HAL_UART_ONE_BIT_DISABLE(__HANDLE__) ((__HANDLE__)->Instance->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT))
N
N
N/**
N  * @}
N  */
N
N/* Private macros --------------------------------------------------------*/
N/** @defgroup UART_Private_Macros   UART Private Macros
N  * @{
N  */
N/** @brief  BRR division operation to set BRR register with LPUART.
N  * @param  __PCLK__: LPUART clock.
N  * @param  __BAUD__: Baud rate set by the user.
N  * @retval Division result
N  */
N#define UART_DIV_LPUART(__PCLK__, __BAUD__)      ((((uint64_t)(__PCLK__)*256U) + ((__BAUD__)/2U)) / (__BAUD__))
N
N/** @brief  BRR division operation to set BRR register in 8-bit oversampling mode.
N  * @param  __PCLK__: UART clock.
N  * @param  __BAUD__: Baud rate set by the user.
N  * @retval Division result
N  */
N#define UART_DIV_SAMPLING8(__PCLK__, __BAUD__)   ((((__PCLK__)*2U) + ((__BAUD__)/2U)) / (__BAUD__))
N
N/** @brief  BRR division operation to set BRR register in 16-bit oversampling mode.
N  * @param  __PCLK__: UART clock.
N  * @param  __BAUD__: Baud rate set by the user.
N  * @retval Division result
N  */
N#define UART_DIV_SAMPLING16(__PCLK__, __BAUD__)  (((__PCLK__) + ((__BAUD__)/2U)) / (__BAUD__))
N
N/** @brief  Check whether or not UART instance is Low Power UART.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @retval SET (instance is LPUART) or RESET (instance isn't LPUART)
N  */
N#define UART_INSTANCE_LOWPOWER(__HANDLE__) (((__HANDLE__)->Instance == LPUART1) ? SET : RESET )
N
N/** @brief  Check UART Baud rate.
N  * @param  __BAUDRATE__: Baudrate specified by the user.
N  *         The maximum Baud Rate is derived from the maximum clock on L0 (i.e. 32 MHz)
N  *         divided by the smallest oversampling used on the USART (i.e. 8)
N  * @retval SET (__BAUDRATE__ is valid) or RESET (__BAUDRATE__ is invalid)
N  */
N#define IS_UART_BAUDRATE(__BAUDRATE__) ((__BAUDRATE__) < 4000001)
N
N/** @brief  Check UART byte address
N  * @param  ADDRESS: UART 8-bit address for wake-up process scheme
N  * @retval Test result (TRUE or FALSE).
N  */
N#define IS_UART_7B_ADDRESS(ADDRESS) ((ADDRESS) <= 0x7F)
N
N/** @brief  Check UART 4-bit address
N  * @param  ADDRESS: UART 4-bit address for wake-up process scheme
N  * @retval Test result (TRUE or FALSE).
N  */
N#define IS_UART_4B_ADDRESS(ADDRESS) ((ADDRESS) <= 0xF)
N
N/** @brief  Check UART assertion time.
N  * @param  __TIME__: 5-bit value assertion time.
N  * @retval Test result (TRUE or FALSE).
N  */
N#define IS_UART_ASSERTIONTIME(__TIME__)    ((__TIME__) <= 0x1F)
N
N/** @brief  Check UART deassertion time.
N  * @param  __TIME__: 5-bit value deassertion time.
N  * @retval Test result (TRUE or FALSE).
N  */
N#define IS_UART_DEASSERTIONTIME(__TIME__) ((__TIME__) <= 0x1F)
N
N/**
N  * @brief Ensure that UART frame number of stop bits is valid.
N  * @param __STOPBITS__: UART frame number of stop bits. 
N  * @retval SET (__STOPBITS__ is valid) or RESET (__STOPBITS__ is invalid)
N  */
N#define IS_UART_STOPBITS(__STOPBITS__) (((__STOPBITS__) == UART_STOPBITS_1)   || \
N                                        ((__STOPBITS__) == UART_STOPBITS_1_5) || \
N                                        ((__STOPBITS__) == UART_STOPBITS_2))
X#define IS_UART_STOPBITS(__STOPBITS__) (((__STOPBITS__) == UART_STOPBITS_1)   ||                                         ((__STOPBITS__) == UART_STOPBITS_1_5) ||                                         ((__STOPBITS__) == UART_STOPBITS_2))
N
N/**
N  * @brief Ensure that LPUART frame number of stop bits is valid.
N  * @param __STOPBITS__: LPUART frame number of stop bits. 
N  * @retval SET (__STOPBITS__ is valid) or RESET (__STOPBITS__ is invalid)
N  */ 
N#define IS_LPUART_STOPBITS(__STOPBITS__) (((__STOPBITS__) == UART_STOPBITS_1) || \
N                                          ((__STOPBITS__) == UART_STOPBITS_2))
X#define IS_LPUART_STOPBITS(__STOPBITS__) (((__STOPBITS__) == UART_STOPBITS_1) ||                                           ((__STOPBITS__) == UART_STOPBITS_2))
N
N/**
N  * @brief Ensure that UART frame parity is valid.
N  * @param __PARITY__: UART frame parity. 
N  * @retval SET (__PARITY__ is valid) or RESET (__PARITY__ is invalid)
N  */ 
N#define IS_UART_PARITY(__PARITY__) (((__PARITY__) == UART_PARITY_NONE) || \
N                                    ((__PARITY__) == UART_PARITY_EVEN) || \
N                                    ((__PARITY__) == UART_PARITY_ODD))
X#define IS_UART_PARITY(__PARITY__) (((__PARITY__) == UART_PARITY_NONE) ||                                     ((__PARITY__) == UART_PARITY_EVEN) ||                                     ((__PARITY__) == UART_PARITY_ODD))
N
N/**
N  * @brief Ensure that UART hardware flow control is valid.
N  * @param __CONTROL__: UART hardware flow control. 
N  * @retval SET (__CONTROL__ is valid) or RESET (__CONTROL__ is invalid)
N  */ 
N#define IS_UART_HARDWARE_FLOW_CONTROL(__CONTROL__)\
N                                   (((__CONTROL__) == UART_HWCONTROL_NONE) || \
N                                    ((__CONTROL__) == UART_HWCONTROL_RTS)  || \
N                                    ((__CONTROL__) == UART_HWCONTROL_CTS)  || \
N                                    ((__CONTROL__) == UART_HWCONTROL_RTS_CTS))
X#define IS_UART_HARDWARE_FLOW_CONTROL(__CONTROL__)                                   (((__CONTROL__) == UART_HWCONTROL_NONE) ||                                     ((__CONTROL__) == UART_HWCONTROL_RTS)  ||                                     ((__CONTROL__) == UART_HWCONTROL_CTS)  ||                                     ((__CONTROL__) == UART_HWCONTROL_RTS_CTS))
N
N/**
N  * @brief Ensure that UART communication mode is valid.
N  * @param __MODE__: UART communication mode. 
N  * @retval SET (__MODE__ is valid) or RESET (__MODE__ is invalid)
N  */ 
N#define IS_UART_MODE(__MODE__) ((((__MODE__) & (~((uint32_t)(UART_MODE_TX_RX)))) == (uint32_t)0x00U) && ((__MODE__) != (uint32_t)0x00U))
N
N/**
N  * @brief Ensure that UART state is valid.
N  * @param __STATE__: UART state. 
N  * @retval SET (__STATE__ is valid) or RESET (__STATE__ is invalid)
N  */ 
N#define IS_UART_STATE(__STATE__) (((__STATE__) == UART_STATE_DISABLE) || \
N                                  ((__STATE__) == UART_STATE_ENABLE))
X#define IS_UART_STATE(__STATE__) (((__STATE__) == UART_STATE_DISABLE) ||                                   ((__STATE__) == UART_STATE_ENABLE))
N
N/**
N  * @brief Ensure that UART oversampling is valid.
N  * @param __SAMPLING__: UART oversampling. 
N  * @retval SET (__SAMPLING__ is valid) or RESET (__SAMPLING__ is invalid)
N  */ 
N#define IS_UART_OVERSAMPLING(__SAMPLING__) (((__SAMPLING__) == UART_OVERSAMPLING_16) || \
N                                            ((__SAMPLING__) == UART_OVERSAMPLING_8))
X#define IS_UART_OVERSAMPLING(__SAMPLING__) (((__SAMPLING__) == UART_OVERSAMPLING_16) ||                                             ((__SAMPLING__) == UART_OVERSAMPLING_8))
N
N/**
N  * @brief Ensure that UART frame sampling is valid.
N  * @param __ONEBIT__: UART frame sampling. 
N  * @retval SET (__ONEBIT__ is valid) or RESET (__ONEBIT__ is invalid)
N  */
N#define IS_UART_ONE_BIT_SAMPLE(__ONEBIT__) (((__ONEBIT__) == UART_ONE_BIT_SAMPLE_DISABLE) || \
N                                            ((__ONEBIT__) == UART_ONE_BIT_SAMPLE_ENABLE))
X#define IS_UART_ONE_BIT_SAMPLE(__ONEBIT__) (((__ONEBIT__) == UART_ONE_BIT_SAMPLE_DISABLE) ||                                             ((__ONEBIT__) == UART_ONE_BIT_SAMPLE_ENABLE))
N
N/**
N  * @brief Ensure that UART auto Baud rate detection mode is valid.
N  * @param __MODE__: UART auto Baud rate detection mode. 
N  * @retval SET (__MODE__ is valid) or RESET (__MODE__ is invalid)
N  */
N#define IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(__MODE__)  (((__MODE__) == UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT)    || \
N                                                        ((__MODE__) == UART_ADVFEATURE_AUTOBAUDRATE_ONFALLINGEDGE) || \
N                                                        ((__MODE__) == UART_ADVFEATURE_AUTOBAUDRATE_ON0X7FFRAME)   || \
N                                                        ((__MODE__) == UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME))
X#define IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(__MODE__)  (((__MODE__) == UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT)    ||                                                         ((__MODE__) == UART_ADVFEATURE_AUTOBAUDRATE_ONFALLINGEDGE) ||                                                         ((__MODE__) == UART_ADVFEATURE_AUTOBAUDRATE_ON0X7FFRAME)   ||                                                         ((__MODE__) == UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME))
N
N/**
N  * @brief Ensure that UART receiver timeout setting is valid.
N  * @param __TIMEOUT__: UART receiver timeout setting. 
N  * @retval SET (__TIMEOUT__ is valid) or RESET (__TIMEOUT__ is invalid)
N  */
N#define IS_UART_RECEIVER_TIMEOUT(__TIMEOUT__) (((__TIMEOUT__) == UART_RECEIVER_TIMEOUT_DISABLE) || \
N                                               ((__TIMEOUT__) == UART_RECEIVER_TIMEOUT_ENABLE))
X#define IS_UART_RECEIVER_TIMEOUT(__TIMEOUT__) (((__TIMEOUT__) == UART_RECEIVER_TIMEOUT_DISABLE) ||                                                ((__TIMEOUT__) == UART_RECEIVER_TIMEOUT_ENABLE))
N
N/**
N  * @brief Ensure that UART LIN state is valid.
N  * @param __LIN__: UART LIN state. 
N  * @retval SET (__LIN__ is valid) or RESET (__LIN__ is invalid)
N  */
N#define IS_UART_LIN(__LIN__)        (((__LIN__) == UART_LIN_DISABLE) || \
N                                     ((__LIN__) == UART_LIN_ENABLE))
X#define IS_UART_LIN(__LIN__)        (((__LIN__) == UART_LIN_DISABLE) ||                                      ((__LIN__) == UART_LIN_ENABLE))
N
N/**
N  * @brief Ensure that UART LIN break detection length is valid.
N  * @param __LENGTH__: UART LIN break detection length. 
N  * @retval SET (__LENGTH__ is valid) or RESET (__LENGTH__ is invalid)
N  */
N#define IS_UART_LIN_BREAK_DETECT_LENGTH(__LENGTH__) (((__LENGTH__) == UART_LINBREAKDETECTLENGTH_10B) || \
N                                                     ((__LENGTH__) == UART_LINBREAKDETECTLENGTH_11B))
X#define IS_UART_LIN_BREAK_DETECT_LENGTH(__LENGTH__) (((__LENGTH__) == UART_LINBREAKDETECTLENGTH_10B) ||                                                      ((__LENGTH__) == UART_LINBREAKDETECTLENGTH_11B))
N
N/**
N  * @brief Ensure that UART DMA TX state is valid.
N  * @param __DMATX__: UART DMA TX state. 
N  * @retval SET (__DMATX__ is valid) or RESET (__DMATX__ is invalid)
N  */
N#define IS_UART_DMA_TX(__DMATX__)     (((__DMATX__) == UART_DMA_TX_DISABLE) || \
N                                       ((__DMATX__) == UART_DMA_TX_ENABLE))
X#define IS_UART_DMA_TX(__DMATX__)     (((__DMATX__) == UART_DMA_TX_DISABLE) ||                                        ((__DMATX__) == UART_DMA_TX_ENABLE))
N
N/**
N  * @brief Ensure that UART DMA RX state is valid.
N  * @param __DMARX__: UART DMA RX state. 
N  * @retval SET (__DMARX__ is valid) or RESET (__DMARX__ is invalid)
N  */
N#define IS_UART_DMA_RX(__DMARX__)     (((__DMARX__) == UART_DMA_RX_DISABLE) || \
N                                       ((__DMARX__) == UART_DMA_RX_ENABLE))
X#define IS_UART_DMA_RX(__DMARX__)     (((__DMARX__) == UART_DMA_RX_DISABLE) ||                                        ((__DMARX__) == UART_DMA_RX_ENABLE))
N
N/**
N  * @brief Ensure that UART half-duplex state is valid.
N  * @param __HDSEL__: UART half-duplex state. 
N  * @retval SET (__HDSEL__ is valid) or RESET (__HDSEL__ is invalid)
N  */
N#define IS_UART_HALF_DUPLEX(__HDSEL__)     (((__HDSEL__) == UART_HALF_DUPLEX_DISABLE) || \
N                                            ((__HDSEL__) == UART_HALF_DUPLEX_ENABLE))
X#define IS_UART_HALF_DUPLEX(__HDSEL__)     (((__HDSEL__) == UART_HALF_DUPLEX_DISABLE) ||                                             ((__HDSEL__) == UART_HALF_DUPLEX_ENABLE))
N
N/**
N  * @brief Ensure that UART wake-up method is valid.
N  * @param __WAKEUP__: UART wake-up method . 
N  * @retval SET (__WAKEUP__ is valid) or RESET (__WAKEUP__ is invalid)
N  */
N#define IS_UART_WAKEUPMETHOD(__WAKEUP__) (((__WAKEUP__) == UART_WAKEUPMETHOD_IDLELINE) || \
N                                          ((__WAKEUP__) == UART_WAKEUPMETHOD_ADDRESSMARK))
X#define IS_UART_WAKEUPMETHOD(__WAKEUP__) (((__WAKEUP__) == UART_WAKEUPMETHOD_IDLELINE) ||                                           ((__WAKEUP__) == UART_WAKEUPMETHOD_ADDRESSMARK))
N
N/**
N  * @brief Ensure that UART request parameter is valid.
N  * @param __PARAM__: UART request parameter. 
N  * @retval SET (__PARAM__ is valid) or RESET (__PARAM__ is invalid)
N  */
N#define IS_UART_REQUEST_PARAMETER(__PARAM__) (((__PARAM__) == UART_AUTOBAUD_REQUEST)     || \
N                                              ((__PARAM__) == UART_SENDBREAK_REQUEST)    || \
N                                              ((__PARAM__) == UART_MUTE_MODE_REQUEST)    || \
N                                              ((__PARAM__) == UART_RXDATA_FLUSH_REQUEST) || \
N                                              ((__PARAM__) == UART_TXDATA_FLUSH_REQUEST))
X#define IS_UART_REQUEST_PARAMETER(__PARAM__) (((__PARAM__) == UART_AUTOBAUD_REQUEST)     ||                                               ((__PARAM__) == UART_SENDBREAK_REQUEST)    ||                                               ((__PARAM__) == UART_MUTE_MODE_REQUEST)    ||                                               ((__PARAM__) == UART_RXDATA_FLUSH_REQUEST) ||                                               ((__PARAM__) == UART_TXDATA_FLUSH_REQUEST))
N
N/**
N  * @brief Ensure that UART advanced features initialization is valid.
N  * @param __INIT__: UART advanced features initialization. 
N  * @retval SET (__INIT__ is valid) or RESET (__INIT__ is invalid)
N  */
N#define IS_UART_ADVFEATURE_INIT(__INIT__)   ((__INIT__) <= (UART_ADVFEATURE_NO_INIT                | \
N                                                            UART_ADVFEATURE_TXINVERT_INIT          | \
N                                                            UART_ADVFEATURE_RXINVERT_INIT          | \
N                                                            UART_ADVFEATURE_DATAINVERT_INIT        | \
N                                                            UART_ADVFEATURE_SWAP_INIT              | \
N                                                            UART_ADVFEATURE_RXOVERRUNDISABLE_INIT  | \
N                                                            UART_ADVFEATURE_DMADISABLEONERROR_INIT | \
N                                                            UART_ADVFEATURE_AUTOBAUDRATE_INIT      | \
N                                                            UART_ADVFEATURE_MSBFIRST_INIT))
X#define IS_UART_ADVFEATURE_INIT(__INIT__)   ((__INIT__) <= (UART_ADVFEATURE_NO_INIT                |                                                             UART_ADVFEATURE_TXINVERT_INIT          |                                                             UART_ADVFEATURE_RXINVERT_INIT          |                                                             UART_ADVFEATURE_DATAINVERT_INIT        |                                                             UART_ADVFEATURE_SWAP_INIT              |                                                             UART_ADVFEATURE_RXOVERRUNDISABLE_INIT  |                                                             UART_ADVFEATURE_DMADISABLEONERROR_INIT |                                                             UART_ADVFEATURE_AUTOBAUDRATE_INIT      |                                                             UART_ADVFEATURE_MSBFIRST_INIT))
N
N/**
N  * @brief Ensure that UART frame TX inversion setting is valid.
N  * @param __TXINV__: UART frame TX inversion setting. 
N  * @retval SET (__TXINV__ is valid) or RESET (__TXINV__ is invalid)
N  */
N#define IS_UART_ADVFEATURE_TXINV(__TXINV__) (((__TXINV__) == UART_ADVFEATURE_TXINV_DISABLE) || \
N                                             ((__TXINV__) == UART_ADVFEATURE_TXINV_ENABLE))
X#define IS_UART_ADVFEATURE_TXINV(__TXINV__) (((__TXINV__) == UART_ADVFEATURE_TXINV_DISABLE) ||                                              ((__TXINV__) == UART_ADVFEATURE_TXINV_ENABLE))
N
N/**
N  * @brief Ensure that UART frame RX inversion setting is valid.
N  * @param __RXINV__: UART frame RX inversion setting. 
N  * @retval SET (__RXINV__ is valid) or RESET (__RXINV__ is invalid)
N  */
N#define IS_UART_ADVFEATURE_RXINV(__RXINV__) (((__RXINV__) == UART_ADVFEATURE_RXINV_DISABLE) || \
N                                             ((__RXINV__) == UART_ADVFEATURE_RXINV_ENABLE))
X#define IS_UART_ADVFEATURE_RXINV(__RXINV__) (((__RXINV__) == UART_ADVFEATURE_RXINV_DISABLE) ||                                              ((__RXINV__) == UART_ADVFEATURE_RXINV_ENABLE))
N
N/**
N  * @brief Ensure that UART frame data inversion setting is valid.
N  * @param __DATAINV__: UART frame data inversion setting. 
N  * @retval SET (__DATAINV__ is valid) or RESET (__DATAINV__ is invalid)
N  */
N#define IS_UART_ADVFEATURE_DATAINV(__DATAINV__) (((__DATAINV__) == UART_ADVFEATURE_DATAINV_DISABLE) || \
N                                                 ((__DATAINV__) == UART_ADVFEATURE_DATAINV_ENABLE))
X#define IS_UART_ADVFEATURE_DATAINV(__DATAINV__) (((__DATAINV__) == UART_ADVFEATURE_DATAINV_DISABLE) ||                                                  ((__DATAINV__) == UART_ADVFEATURE_DATAINV_ENABLE))
N
N/**
N  * @brief Ensure that UART frame RX/TX pins swap setting is valid.
N  * @param __SWAP__: UART frame RX/TX pins swap setting. 
N  * @retval SET (__SWAP__ is valid) or RESET (__SWAP__ is invalid)
N  */
N#define IS_UART_ADVFEATURE_SWAP(__SWAP__) (((__SWAP__) == UART_ADVFEATURE_SWAP_DISABLE) || \
N                                           ((__SWAP__) == UART_ADVFEATURE_SWAP_ENABLE))
X#define IS_UART_ADVFEATURE_SWAP(__SWAP__) (((__SWAP__) == UART_ADVFEATURE_SWAP_DISABLE) ||                                            ((__SWAP__) == UART_ADVFEATURE_SWAP_ENABLE))
N
N/**
N  * @brief Ensure that UART frame overrun setting is valid.
N  * @param __OVERRUN__: UART frame overrun setting. 
N  * @retval SET (__OVERRUN__ is valid) or RESET (__OVERRUN__ is invalid)
N  */
N#define IS_UART_OVERRUN(__OVERRUN__)     (((__OVERRUN__) == UART_ADVFEATURE_OVERRUN_ENABLE) || \
N                                          ((__OVERRUN__) == UART_ADVFEATURE_OVERRUN_DISABLE))
X#define IS_UART_OVERRUN(__OVERRUN__)     (((__OVERRUN__) == UART_ADVFEATURE_OVERRUN_ENABLE) ||                                           ((__OVERRUN__) == UART_ADVFEATURE_OVERRUN_DISABLE))
N
N/**
N  * @brief Ensure that UART auto Baud rate state is valid.
N  * @param __AUTOBAUDRATE__: UART auto Baud rate state. 
N  * @retval SET (__AUTOBAUDRATE__ is valid) or RESET (__AUTOBAUDRATE__ is invalid)
N  */
N#define IS_UART_ADVFEATURE_AUTOBAUDRATE(__AUTOBAUDRATE__)  (((__AUTOBAUDRATE__) == UART_ADVFEATURE_AUTOBAUDRATE_DISABLE) || \
N                                                            ((__AUTOBAUDRATE__) == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE))
X#define IS_UART_ADVFEATURE_AUTOBAUDRATE(__AUTOBAUDRATE__)  (((__AUTOBAUDRATE__) == UART_ADVFEATURE_AUTOBAUDRATE_DISABLE) ||                                                             ((__AUTOBAUDRATE__) == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE))
N
N/**
N  * @brief Ensure that UART DMA enabling or disabling on error setting is valid.
N  * @param __DMA__: UART DMA enabling or disabling on error setting. 
N  * @retval SET (__DMA__ is valid) or RESET (__DMA__ is invalid)
N  */
N#define IS_UART_ADVFEATURE_DMAONRXERROR(__DMA__)  (((__DMA__) == UART_ADVFEATURE_DMA_ENABLEONRXERROR) || \
N                                                   ((__DMA__) == UART_ADVFEATURE_DMA_DISABLEONRXERROR))
X#define IS_UART_ADVFEATURE_DMAONRXERROR(__DMA__)  (((__DMA__) == UART_ADVFEATURE_DMA_ENABLEONRXERROR) ||                                                    ((__DMA__) == UART_ADVFEATURE_DMA_DISABLEONRXERROR))
N
N/**
N  * @brief Ensure that UART frame MSB first setting is valid.
N  * @param __MSBFIRST__: UART frame MSB first setting. 
N  * @retval SET (__MSBFIRST__ is valid) or RESET (__MSBFIRST__ is invalid)
N  */
N#define IS_UART_ADVFEATURE_MSBFIRST(__MSBFIRST__) (((__MSBFIRST__) == UART_ADVFEATURE_MSBFIRST_DISABLE) || \
N                                                   ((__MSBFIRST__) == UART_ADVFEATURE_MSBFIRST_ENABLE))
X#define IS_UART_ADVFEATURE_MSBFIRST(__MSBFIRST__) (((__MSBFIRST__) == UART_ADVFEATURE_MSBFIRST_DISABLE) ||                                                    ((__MSBFIRST__) == UART_ADVFEATURE_MSBFIRST_ENABLE))
N
N/**
N  * @brief Ensure that UART stop mode state is valid.
N  * @param __STOPMODE__: UART stop mode state. 
N  * @retval SET (__STOPMODE__ is valid) or RESET (__STOPMODE__ is invalid)
N  */
N#define IS_UART_ADVFEATURE_STOPMODE(__STOPMODE__) (((__STOPMODE__) == UART_ADVFEATURE_STOPMODE_DISABLE) || \
N                                                   ((__STOPMODE__) == UART_ADVFEATURE_STOPMODE_ENABLE))
X#define IS_UART_ADVFEATURE_STOPMODE(__STOPMODE__) (((__STOPMODE__) == UART_ADVFEATURE_STOPMODE_DISABLE) ||                                                    ((__STOPMODE__) == UART_ADVFEATURE_STOPMODE_ENABLE))
N
N/**
N  * @brief Ensure that UART mute mode state is valid.
N  * @param __MUTE__: UART mute mode state. 
N  * @retval SET (__MUTE__ is valid) or RESET (__MUTE__ is invalid)
N  */
N#define IS_UART_MUTE_MODE(__MUTE__)       (((__MUTE__) == UART_ADVFEATURE_MUTEMODE_DISABLE) || \
N                                           ((__MUTE__) == UART_ADVFEATURE_MUTEMODE_ENABLE))
X#define IS_UART_MUTE_MODE(__MUTE__)       (((__MUTE__) == UART_ADVFEATURE_MUTEMODE_DISABLE) ||                                            ((__MUTE__) == UART_ADVFEATURE_MUTEMODE_ENABLE))
N
N/**
N  * @brief Ensure that UART wake-up selection is valid.
N  * @param __WAKE__: UART wake-up selection. 
N  * @retval SET (__WAKE__ is valid) or RESET (__WAKE__ is invalid)
N  */
N#define IS_UART_WAKEUP_SELECTION(__WAKE__) (((__WAKE__) == UART_WAKEUP_ON_ADDRESS) || \
N                                            ((__WAKE__) == UART_WAKEUP_ON_STARTBIT) || \
N                                            ((__WAKE__) == UART_WAKEUP_ON_READDATA_NONEMPTY))
X#define IS_UART_WAKEUP_SELECTION(__WAKE__) (((__WAKE__) == UART_WAKEUP_ON_ADDRESS) ||                                             ((__WAKE__) == UART_WAKEUP_ON_STARTBIT) ||                                             ((__WAKE__) == UART_WAKEUP_ON_READDATA_NONEMPTY))
N
N/**
N  * @brief Ensure that UART driver enable polarity is valid.
N  * @param __POLARITY__: UART driver enable polarity. 
N  * @retval SET (__POLARITY__ is valid) or RESET (__POLARITY__ is invalid)
N  */
N#define IS_UART_DE_POLARITY(__POLARITY__)    (((__POLARITY__) == UART_DE_POLARITY_HIGH) || \
N                                              ((__POLARITY__) == UART_DE_POLARITY_LOW))
X#define IS_UART_DE_POLARITY(__POLARITY__)    (((__POLARITY__) == UART_DE_POLARITY_HIGH) ||                                               ((__POLARITY__) == UART_DE_POLARITY_LOW))
N
N/**
N  * @}
N  */
N
N/* Include UART HAL Extended module */
N#include "stm32l0xx_hal_uart_ex.h"
L 1 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_uart_ex.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32l0xx_hal_uart_ex.h
N  * @author  MCD Application Team
N  * @brief   Header file of UART HAL Extended module.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
N  *
N  * Redistribution and use in source and binary forms, with or without modification,
N  * are permitted provided that the following conditions are met:
N  *   1. Redistributions of source code must retain the above copyright notice,
N  *      this list of conditions and the following disclaimer.
N  *   2. Redistributions in binary form must reproduce the above copyright notice,
N  *      this list of conditions and the following disclaimer in the documentation
N  *      and/or other materials provided with the distribution.
N  *   3. Neither the name of STMicroelectronics nor the names of its contributors
N  *      may be used to endorse or promote products derived from this software
N  *      without specific prior written permission.
N  *
N  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32L0xx_HAL_UART_EX_H
N#define __STM32L0xx_HAL_UART_EX_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32l0xx_hal_def.h"
N
N/** @addtogroup STM32L0xx_HAL_Driver
N  * @{
N  */
N
N/** @addtogroup UARTEx
N  * @{
N  */
N
N/* Exported types ------------------------------------------------------------*/
N/** @defgroup UARTEx_Exported_Types UARTEx Exported Types
N  * @{
N  */
N
N/**
N  * @brief  UART wake up from stop mode parameters
N  */
Ntypedef struct
N{
N  uint32_t WakeUpEvent;        /*!< Specifies which event will activat the Wakeup from Stop mode flag (WUF).
N                                    This parameter can be a value of @ref UART_WakeUp_from_Stop_Selection.
N                                    If set to UART_WAKEUP_ON_ADDRESS, the two other fields below must
N                                    be filled up. */
N
N  uint16_t AddressLength;      /*!< Specifies whether the address is 4 or 7-bit long.
N                                    This parameter can be a value of @ref UARTEx_WakeUp_Address_Length.  */
N
N  uint8_t Address;             /*!< UART/USART node address (7-bit long max). */
N} UART_WakeUpTypeDef;
N
N/**
N  * @}
N  */
N
N/* Exported constants --------------------------------------------------------*/
N/** @defgroup UARTEx_Exported_Constants UARTEx Exported Constants
N  * @{
N  */
N
N/** @defgroup UARTEx_Word_Length UART Word Length
N  * @{
N  */
N#define UART_WORDLENGTH_7B                  ((uint32_t)USART_CR1_M1)   /*!< 7-bit long UART frame */
N#define UART_WORDLENGTH_8B                  ((uint32_t)0x00000000U)    /*!< 8-bit long UART frame */
N#define UART_WORDLENGTH_9B                  ((uint32_t)USART_CR1_M0)   /*!< 9-bit long UART frame */
N/**
N  * @}
N  */
N  
N/** @defgroup UARTEx_WakeUp_Address_Length UART Extended WakeUp Address Length
N  * @{
N  */
N#define UART_ADDRESS_DETECT_4B              ((uint32_t)0x00000000U)      /*!< 4-bit long wake-up address */
N#define UART_ADDRESS_DETECT_7B              ((uint32_t)USART_CR2_ADDM7)  /*!< 7-bit long wake-up address */
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Exported macros -----------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/
N/** @addtogroup UARTEx_Exported_Functions
N  * @{
N  */
N
N/** @addtogroup UARTEx_Exported_Functions_Group1
N  * @{
N  */
N
N/* Initialization and de-initialization functions  ****************************/
NHAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime, uint32_t DeassertionTime);
N
N/**
N  * @}
N  */
N
N/* IO operation functions *****************************************************/
N
N/** @addtogroup UARTEx_Exported_Functions_Group3
N  * @{
N  */
N
N/* Peripheral Control functions  **********************************************/
NHAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection);
NHAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength);
NHAL_StatusTypeDef HAL_UARTEx_EnableClockStopMode(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef HAL_UARTEx_DisableClockStopMode(UART_HandleTypeDef *huart);
Nvoid HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart);
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Private macros ------------------------------------------------------------*/
N/** @defgroup UARTEx_Private_Macros UARTEx Private Macros
N  * @{
N  */
N
N/** @brief  Report the UART clock source.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @param  __CLOCKSOURCE__: output variable.
N  * @retval UART clocking source, written in __CLOCKSOURCE__.
N  */
N#if defined (STM32L031xx) || defined (STM32L041xx) || defined (STM32L011xx) || defined (STM32L021xx)
X#if 0L || 0L || 0L || 0L
S#define UART_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__)       \
S  do {                                                        \
S    if((__HANDLE__)->Instance == USART2)                      \
S    {                                                         \
S       switch(__HAL_RCC_GET_USART2_SOURCE())                  \
S       {                                                      \
S        case RCC_USART2CLKSOURCE_PCLK1:                       \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;         \
S          break;                                              \
S        case RCC_USART2CLKSOURCE_HSI:                         \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;           \
S          break;                                              \
S        case RCC_USART2CLKSOURCE_SYSCLK:                      \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;        \
S          break;                                              \
S        case RCC_USART2CLKSOURCE_LSE:                         \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;           \
S          break;                                              \
S        default:                                              \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;     \
S          break;                                              \
S       }                                                      \
S    }                                                         \
S    else if((__HANDLE__)->Instance == LPUART1)                \
S    {                                                         \
S       switch(__HAL_RCC_GET_LPUART1_SOURCE())                 \
S       {                                                      \
S        case RCC_LPUART1CLKSOURCE_PCLK1:                      \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;         \
S          break;                                              \
S        case RCC_LPUART1CLKSOURCE_HSI:                        \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;           \
S          break;                                              \
S        case RCC_LPUART1CLKSOURCE_SYSCLK:                     \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;        \
S          break;                                              \
S        case RCC_LPUART1CLKSOURCE_LSE:                        \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;           \
S          break;                                              \
S        default:                                              \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;     \
S          break;                                              \
S       }                                                      \
S    }                                                         \
S  } while(0)
X#define UART_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__)         do {                                                            if((__HANDLE__)->Instance == USART2)                          {                                                                switch(__HAL_RCC_GET_USART2_SOURCE())                         {                                                              case RCC_USART2CLKSOURCE_PCLK1:                                 (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;                   break;                                                      case RCC_USART2CLKSOURCE_HSI:                                   (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;                     break;                                                      case RCC_USART2CLKSOURCE_SYSCLK:                                (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;                  break;                                                      case RCC_USART2CLKSOURCE_LSE:                                   (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;                     break;                                                      default:                                                        (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;               break;                                                     }                                                          }                                                             else if((__HANDLE__)->Instance == LPUART1)                    {                                                                switch(__HAL_RCC_GET_LPUART1_SOURCE())                        {                                                              case RCC_LPUART1CLKSOURCE_PCLK1:                                (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;                   break;                                                      case RCC_LPUART1CLKSOURCE_HSI:                                  (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;                     break;                                                      case RCC_LPUART1CLKSOURCE_SYSCLK:                               (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;                  break;                                                      case RCC_LPUART1CLKSOURCE_LSE:                                  (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;                     break;                                                      default:                                                        (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;               break;                                                     }                                                          }                                                           } while(0)
S
N#elif defined (STM32L051xx) || defined (STM32L052xx) || defined (STM32L053xx) || defined (STM32L061xx)  || defined (STM32L062xx) || defined (STM32L063xx)
X#elif 0L || 0L || 1L || 0L  || 0L || 0L
N
N#define UART_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__)       \
N  do {                                                        \
N    if((__HANDLE__)->Instance == USART1)                      \
N    {                                                         \
N       switch(__HAL_RCC_GET_USART1_SOURCE())                  \
N       {                                                      \
N        case RCC_USART1CLKSOURCE_PCLK2:                       \
N          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK2;         \
N          break;                                              \
N        case RCC_USART1CLKSOURCE_HSI:                         \
N          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;           \
N          break;                                              \
N        case RCC_USART1CLKSOURCE_SYSCLK:                      \
N          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;        \
N          break;                                              \
N        case RCC_USART1CLKSOURCE_LSE:                         \
N          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;           \
N          break;                                              \
N        default:                                              \
N          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;     \
N          break;                                              \
N       }                                                      \
N    }                                                         \
N    else if((__HANDLE__)->Instance == USART2)                 \
N    {                                                         \
N       switch(__HAL_RCC_GET_USART2_SOURCE())                  \
N       {                                                      \
N        case RCC_USART2CLKSOURCE_PCLK1:                       \
N          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;         \
N          break;                                              \
N        case RCC_USART2CLKSOURCE_HSI:                         \
N          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;           \
N          break;                                              \
N        case RCC_USART2CLKSOURCE_SYSCLK:                      \
N          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;        \
N          break;                                              \
N        case RCC_USART2CLKSOURCE_LSE:                         \
N          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;           \
N          break;                                              \
N        default:                                              \
N          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;     \
N          break;                                              \
N       }                                                      \
N    }                                                         \
N    else if((__HANDLE__)->Instance == LPUART1)                \
N    {                                                         \
N       switch(__HAL_RCC_GET_LPUART1_SOURCE())                 \
N       {                                                      \
N        case RCC_LPUART1CLKSOURCE_PCLK1:                      \
N          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;         \
N          break;                                              \
N        case RCC_LPUART1CLKSOURCE_HSI:                        \
N          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;           \
N          break;                                              \
N        case RCC_LPUART1CLKSOURCE_SYSCLK:                     \
N          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;        \
N          break;                                              \
N        case RCC_LPUART1CLKSOURCE_LSE:                        \
N          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;           \
N          break;                                              \
N        default:                                              \
N          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;     \
N          break;                                              \
N       }                                                      \
N    }                                                         \
N  } while(0)
X#define UART_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__)         do {                                                            if((__HANDLE__)->Instance == USART1)                          {                                                                switch(__HAL_RCC_GET_USART1_SOURCE())                         {                                                              case RCC_USART1CLKSOURCE_PCLK2:                                 (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK2;                   break;                                                      case RCC_USART1CLKSOURCE_HSI:                                   (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;                     break;                                                      case RCC_USART1CLKSOURCE_SYSCLK:                                (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;                  break;                                                      case RCC_USART1CLKSOURCE_LSE:                                   (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;                     break;                                                      default:                                                        (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;               break;                                                     }                                                          }                                                             else if((__HANDLE__)->Instance == USART2)                     {                                                                switch(__HAL_RCC_GET_USART2_SOURCE())                         {                                                              case RCC_USART2CLKSOURCE_PCLK1:                                 (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;                   break;                                                      case RCC_USART2CLKSOURCE_HSI:                                   (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;                     break;                                                      case RCC_USART2CLKSOURCE_SYSCLK:                                (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;                  break;                                                      case RCC_USART2CLKSOURCE_LSE:                                   (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;                     break;                                                      default:                                                        (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;               break;                                                     }                                                          }                                                             else if((__HANDLE__)->Instance == LPUART1)                    {                                                                switch(__HAL_RCC_GET_LPUART1_SOURCE())                        {                                                              case RCC_LPUART1CLKSOURCE_PCLK1:                                (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;                   break;                                                      case RCC_LPUART1CLKSOURCE_HSI:                                  (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;                     break;                                                      case RCC_LPUART1CLKSOURCE_SYSCLK:                               (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;                  break;                                                      case RCC_LPUART1CLKSOURCE_LSE:                                  (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;                     break;                                                      default:                                                        (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;               break;                                                     }                                                          }                                                           } while(0)
N
N#else
S
S#define UART_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__)       \
S  do {                                                        \
S    if((__HANDLE__)->Instance == USART1)                      \
S    {                                                         \
S       switch(__HAL_RCC_GET_USART1_SOURCE())                  \
S       {                                                      \
S        case RCC_USART1CLKSOURCE_PCLK2:                       \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK2;         \
S          break;                                              \
S        case RCC_USART1CLKSOURCE_HSI:                         \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;           \
S          break;                                              \
S        case RCC_USART1CLKSOURCE_SYSCLK:                      \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;        \
S          break;                                              \
S        case RCC_USART1CLKSOURCE_LSE:                         \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;           \
S          break;                                              \
S        default:                                              \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;     \
S          break;                                              \
S       }                                                      \
S    }                                                         \
S    else if((__HANDLE__)->Instance == USART2)                 \
S    {                                                         \
S       switch(__HAL_RCC_GET_USART2_SOURCE())                  \
S       {                                                      \
S        case RCC_USART2CLKSOURCE_PCLK1:                       \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;         \
S          break;                                              \
S        case RCC_USART2CLKSOURCE_HSI:                         \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;           \
S          break;                                              \
S        case RCC_USART2CLKSOURCE_SYSCLK:                      \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;        \
S          break;                                              \
S        case RCC_USART2CLKSOURCE_LSE:                         \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;           \
S          break;                                              \
S        default:                                              \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;     \
S          break;                                              \
S       }                                                      \
S    }                                                         \
S    else if((__HANDLE__)->Instance == USART4)                 \
S    {                                                         \
S      (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;             \
S    }                                                         \
S    else if((__HANDLE__)->Instance == USART5)                 \
S    {                                                         \
S      (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;             \
S    }                                                         \
S    else if((__HANDLE__)->Instance == LPUART1)                \
S    {                                                         \
S       switch(__HAL_RCC_GET_LPUART1_SOURCE())                 \
S       {                                                      \
S        case RCC_LPUART1CLKSOURCE_PCLK1:                      \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;         \
S          break;                                              \
S        case RCC_LPUART1CLKSOURCE_HSI:                        \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;           \
S          break;                                              \
S        case RCC_LPUART1CLKSOURCE_SYSCLK:                     \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;        \
S          break;                                              \
S        case RCC_LPUART1CLKSOURCE_LSE:                        \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;           \
S          break;                                              \
S        default:                                              \
S          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;     \
S          break;                                              \
S       }                                                      \
S    }                                                         \
S  } while(0)
X#define UART_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__)         do {                                                            if((__HANDLE__)->Instance == USART1)                          {                                                                switch(__HAL_RCC_GET_USART1_SOURCE())                         {                                                              case RCC_USART1CLKSOURCE_PCLK2:                                 (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK2;                   break;                                                      case RCC_USART1CLKSOURCE_HSI:                                   (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;                     break;                                                      case RCC_USART1CLKSOURCE_SYSCLK:                                (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;                  break;                                                      case RCC_USART1CLKSOURCE_LSE:                                   (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;                     break;                                                      default:                                                        (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;               break;                                                     }                                                          }                                                             else if((__HANDLE__)->Instance == USART2)                     {                                                                switch(__HAL_RCC_GET_USART2_SOURCE())                         {                                                              case RCC_USART2CLKSOURCE_PCLK1:                                 (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;                   break;                                                      case RCC_USART2CLKSOURCE_HSI:                                   (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;                     break;                                                      case RCC_USART2CLKSOURCE_SYSCLK:                                (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;                  break;                                                      case RCC_USART2CLKSOURCE_LSE:                                   (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;                     break;                                                      default:                                                        (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;               break;                                                     }                                                          }                                                             else if((__HANDLE__)->Instance == USART4)                     {                                                               (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;                 }                                                             else if((__HANDLE__)->Instance == USART5)                     {                                                               (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;                 }                                                             else if((__HANDLE__)->Instance == LPUART1)                    {                                                                switch(__HAL_RCC_GET_LPUART1_SOURCE())                        {                                                              case RCC_LPUART1CLKSOURCE_PCLK1:                                (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;                   break;                                                      case RCC_LPUART1CLKSOURCE_HSI:                                  (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;                     break;                                                      case RCC_LPUART1CLKSOURCE_SYSCLK:                               (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;                  break;                                                      case RCC_LPUART1CLKSOURCE_LSE:                                  (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;                     break;                                                      default:                                                        (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;               break;                                                     }                                                          }                                                           } while(0)
N#endif /* (STM32L031xx) || (STM32L041xx) || (STM32L011xx) || defined (STM32L021xx) */
N
N/** @brief  Report the UART mask to apply to retrieve the received data
N  *         according to the word length and to the parity bits activation.
N  * @note   If PCE = 1, the parity bit is not included in the data extracted
N  *         by the reception API().
N  *         This masking operation is not carried out in the case of
N  *         DMA transfers.
N  * @param  __HANDLE__: specifies the UART Handle.
N  * @retval None, the mask to apply to UART RDR register is stored in (__HANDLE__)->Mask field.
N  */
N#define UART_MASK_COMPUTATION(__HANDLE__)                             \
N  do {                                                                \
N  if ((__HANDLE__)->Init.WordLength == UART_WORDLENGTH_9B)            \
N  {                                                                   \
N     if ((__HANDLE__)->Init.Parity == UART_PARITY_NONE)               \
N     {                                                                \
N        (__HANDLE__)->Mask = 0x01FF ;                                 \
N     }                                                                \
N     else                                                             \
N     {                                                                \
N        (__HANDLE__)->Mask = 0x00FF ;                                 \
N     }                                                                \
N  }                                                                   \
N  else if ((__HANDLE__)->Init.WordLength == UART_WORDLENGTH_8B)       \
N  {                                                                   \
N     if ((__HANDLE__)->Init.Parity == UART_PARITY_NONE)               \
N     {                                                                \
N        (__HANDLE__)->Mask = 0x00FF ;                                 \
N     }                                                                \
N     else                                                             \
N     {                                                                \
N        (__HANDLE__)->Mask = 0x007F ;                                 \
N     }                                                                \
N  }                                                                   \
N  else if ((__HANDLE__)->Init.WordLength == UART_WORDLENGTH_7B)       \
N  {                                                                   \
N     if ((__HANDLE__)->Init.Parity == UART_PARITY_NONE)               \
N     {                                                                \
N        (__HANDLE__)->Mask = 0x007F ;                                 \
N     }                                                                \
N     else                                                             \
N     {                                                                \
N        (__HANDLE__)->Mask = 0x003F ;                                 \
N     }                                                                \
N  }                                                                   \
N} while(0)
X#define UART_MASK_COMPUTATION(__HANDLE__)                               do {                                                                  if ((__HANDLE__)->Init.WordLength == UART_WORDLENGTH_9B)              {                                                                        if ((__HANDLE__)->Init.Parity == UART_PARITY_NONE)                    {                                                                        (__HANDLE__)->Mask = 0x01FF ;                                      }                                                                     else                                                                  {                                                                        (__HANDLE__)->Mask = 0x00FF ;                                      }                                                                  }                                                                     else if ((__HANDLE__)->Init.WordLength == UART_WORDLENGTH_8B)         {                                                                        if ((__HANDLE__)->Init.Parity == UART_PARITY_NONE)                    {                                                                        (__HANDLE__)->Mask = 0x00FF ;                                      }                                                                     else                                                                  {                                                                        (__HANDLE__)->Mask = 0x007F ;                                      }                                                                  }                                                                     else if ((__HANDLE__)->Init.WordLength == UART_WORDLENGTH_7B)         {                                                                        if ((__HANDLE__)->Init.Parity == UART_PARITY_NONE)                    {                                                                        (__HANDLE__)->Mask = 0x007F ;                                      }                                                                     else                                                                  {                                                                        (__HANDLE__)->Mask = 0x003F ;                                      }                                                                  }                                                                   } while(0)
N
N
N/**
N  * @brief Ensure that UART frame length is valid.
N  * @param __LENGTH__: UART frame length. 
N  * @retval SET (__LENGTH__ is valid) or RESET (__LENGTH__ is invalid)
N  */
N#define IS_UART_WORD_LENGTH(__LENGTH__) (((__LENGTH__) == UART_WORDLENGTH_7B) || \
N                                         ((__LENGTH__) == UART_WORDLENGTH_8B) || \
N                                         ((__LENGTH__) == UART_WORDLENGTH_9B))
X#define IS_UART_WORD_LENGTH(__LENGTH__) (((__LENGTH__) == UART_WORDLENGTH_7B) ||                                          ((__LENGTH__) == UART_WORDLENGTH_8B) ||                                          ((__LENGTH__) == UART_WORDLENGTH_9B))
N
N/**
N  * @brief Ensure that UART wake-up address length is valid.
N  * @param __ADDRESS__: UART wake-up address length. 
N  * @retval SET (__ADDRESS__ is valid) or RESET (__ADDRESS__ is invalid)
N  */
N#define IS_UART_ADDRESSLENGTH_DETECT(__ADDRESS__) (((__ADDRESS__) == UART_ADDRESS_DETECT_4B) || \
N                                                   ((__ADDRESS__) == UART_ADDRESS_DETECT_7B))
X#define IS_UART_ADDRESSLENGTH_DETECT(__ADDRESS__) (((__ADDRESS__) == UART_ADDRESS_DETECT_4B) ||                                                    ((__ADDRESS__) == UART_ADDRESS_DETECT_7B))
N
N/**
N  * @}
N  */
N
N/* Private functions ---------------------------------------------------------*/
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32L0xx_HAL_UART_EX_H */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
L 1349 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal_uart.h" 2
N
N/* Exported functions --------------------------------------------------------*/
N/** @addtogroup UART_Exported_Functions UART Exported Functions
N  * @{
N  */
N
N/** @addtogroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
N  * @{
N  */
N
N/* Initialization and de-initialization functions  ****************************/
NHAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength);
NHAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod);
NHAL_StatusTypeDef HAL_UART_DeInit (UART_HandleTypeDef *huart);
Nvoid HAL_UART_MspInit(UART_HandleTypeDef *huart);
Nvoid HAL_UART_MspDeInit(UART_HandleTypeDef *huart);
N
N/**
N  * @}
N  */
N
N/** @addtogroup UART_Exported_Functions_Group2 IO operation functions
N  * @{
N  */
N
N/* IO operation functions *****************************************************/
NHAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout);
NHAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout);
NHAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
NHAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
NHAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
NHAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
NHAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart);
N/* Transfer Abort functions */
NHAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart);
N
Nvoid HAL_UART_IRQHandler(UART_HandleTypeDef *huart);
Nvoid HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart);
Nvoid HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart);
Nvoid HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart);
Nvoid HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
Nvoid HAL_UART_ErrorCallback(UART_HandleTypeDef *huart);
Nvoid HAL_UART_AbortCpltCallback (UART_HandleTypeDef *huart);
Nvoid HAL_UART_AbortTransmitCpltCallback (UART_HandleTypeDef *huart);
Nvoid HAL_UART_AbortReceiveCpltCallback (UART_HandleTypeDef *huart);
N
N/**
N  * @}
N  */
N
N/** @addtogroup UART_Exported_Functions_Group3 Peripheral Control functions
N  * @{
N  */
N
N/* Peripheral Control functions  ************************************************/
NHAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart);
Nvoid HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart);
N
N/**
N  * @}
N  */
N
N/** @addtogroup UART_Exported_Functions_Group4 Peripheral State and Error functions
N  * @{
N  */
N
N/* Peripheral State and Errors functions  **************************************************/
NHAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart);
Nuint32_t              HAL_UART_GetError(UART_HandleTypeDef *huart);
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Private functions -----------------------------------------------------------*/
N/** @addtogroup UART_Private_Functions UART Private Functions
N  * @{
N  */
N
NHAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart);
NHAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout);
Nvoid UART_AdvFeatureConfig(UART_HandleTypeDef *huart);
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32L0xx_HAL_UART_H */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 260 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\Conf\stm32l0xx_hal_conf.h" 2
N#endif /* HAL_UART_MODULE_ENABLED */
N
N#ifdef HAL_USART_MODULE_ENABLED
S #include "stm32l0xx_hal_usart.h"
N#endif /* HAL_USART_MODULE_ENABLED */
N
N#ifdef HAL_IRDA_MODULE_ENABLED
S #include "stm32l0xx_hal_irda.h"
N#endif /* HAL_IRDA_MODULE_ENABLED */
N
N#ifdef HAL_SMARTCARD_MODULE_ENABLED
S #include "stm32l0xx_hal_smartcard.h"
N#endif /* HAL_SMARTCARD_MODULE_ENABLED */
N
N#ifdef HAL_SMBUS_MODULE_ENABLED
S #include "stm32l0xx_hal_smbus.h"
N#endif /* HAL_SMBUS_MODULE_ENABLED */
N
N#ifdef HAL_WWDG_MODULE_ENABLED
S #include "stm32l0xx_hal_wwdg.h"
N#endif /* HAL_WWDG_MODULE_ENABLED */
N
N#ifdef HAL_PCD_MODULE_ENABLED
S #include "stm32l0xx_hal_pcd.h"
N#endif /* HAL_PCD_MODULE_ENABLED */
N
N/* Exported macro ------------------------------------------------------------*/
N#ifdef  USE_FULL_ASSERT
S/**
S  * @brief  The assert_param macro is used for function's parameters check.
S  * @param  expr: If expr is false, it calls assert_failed function
S  *         which reports the name of the source file and the source
S  *         line number of the call that failed. 
S  *         If expr is true, it returns no value.
S  * @retval None
S  */
S  #define assert_param(expr) ((expr) ? (void)0U : assert_failed((uint8_t *)__FILE__, __LINE__))
S/* Exported functions ------------------------------------------------------- */
S  void assert_failed(uint8_t* file, uint32_t line);
N#else
N  #define assert_param(expr) ((void)0U)
N#endif /* USE_FULL_ASSERT */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32L0xx_HAL_CONF_H */
N 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 47 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\stm32l0xx_hal.h" 2
N
N/** @addtogroup STM32L0xx_HAL_Driver
N  * @{
N  */
N
N/** @defgroup HAL HAL
N  * @{
N  */ 
N/** @defgroup HAL_Exported_Constants HAL Exported Constants
N  * @{
N  */ 
N
N/** @defgroup SYSCFG_BootMode Boot Mode
N  * @{
N  */
N#define SYSCFG_BOOT_MAINFLASH          ((uint32_t)0x00000000U)
N#define SYSCFG_BOOT_SYSTEMFLASH        ((uint32_t)SYSCFG_CFGR1_BOOT_MODE_0)
N#define SYSCFG_BOOT_SRAM               ((uint32_t)SYSCFG_CFGR1_BOOT_MODE)     
N
N/**
N  * @}
N  */ 
N
N/** @defgroup DBGMCU_Low_Power_Config DBGMCU Low Power Configuration
N  * @{
N  */
N#define DBGMCU_SLEEP                 DBGMCU_CR_DBG_SLEEP
N#define DBGMCU_STOP                  DBGMCU_CR_DBG_STOP
N#define DBGMCU_STANDBY               DBGMCU_CR_DBG_STANDBY
N#define IS_DBGMCU_PERIPH(__PERIPH__) ((((__PERIPH__) & (~(DBGMCU_CR_DBG))) == 0x00U) && ((__PERIPH__) != 0x00U))
N
N
N/**
N  * @}
N  */
N  
N#if defined (LCD_BASE) /* STM32L0x3xx only */
X#if 1L  
N/** @defgroup SYSCFG_LCD_EXT_CAPA SYSCFG LCD External Capacitors
N  * @{
N  */
N#define SYSCFG_LCD_EXT_CAPA             SYSCFG_CFGR2_CAPA /*!< Connection of internal Vlcd rail to external capacitors */
N#define SYSCFG_VLCD_PB2_EXT_CAPA_ON     SYSCFG_CFGR2_CAPA_0  /*!< Connection on PB2   */
N#define SYSCFG_VLCD_PB12_EXT_CAPA_ON    SYSCFG_CFGR2_CAPA_1  /*!< Connection on PB12  */
N#define SYSCFG_VLCD_PB0_EXT_CAPA_ON     SYSCFG_CFGR2_CAPA_2  /*!< Connection on PB0   */
N#if defined (SYSCFG_CFGR2_CAPA_3)
X#if 0L
S#define SYSCFG_VLCD_PE11_EXT_CAPA_ON    SYSCFG_CFGR2_CAPA_3  /*!< Connection on PE11  */
N#endif
N#if defined (SYSCFG_CFGR2_CAPA_4)
X#if 0L
S#define SYSCFG_VLCD_PE12_EXT_CAPA_ON    SYSCFG_CFGR2_CAPA_4  /*!< Connection on PE12  */
N#endif                        
N
N/**
N  * @}
N  */
N#endif
N
N/** @defgroup SYSCFG_VREFINT_OUT_SELECT SYSCFG VREFINT Out Selection
N  * @{
N  */ 
N#define SYSCFG_VREFINT_OUT_NONE          ((uint32_t)0x00000000U) /* no pad connected */  
N#define SYSCFG_VREFINT_OUT_PB0           SYSCFG_CFGR3_VREF_OUT_0 /* Selects PBO as output for the Vrefint */
N#define SYSCFG_VREFINT_OUT_PB1           SYSCFG_CFGR3_VREF_OUT_1 /* Selects PB1 as output for the Vrefint */
N#define SYSCFG_VREFINT_OUT_PB0_PB1       SYSCFG_CFGR3_VREF_OUT   /* Selects PBO and PB1 as output for the Vrefint */
N
N#define IS_SYSCFG_VREFINT_OUT_SELECT(OUTPUT)   (((OUTPUT) == SYSCFG_VREFINT_OUT_NONE)  || \
N                                                ((OUTPUT) == SYSCFG_VREFINT_OUT_PB0)  || \
N                                                ((OUTPUT) == SYSCFG_VREFINT_OUT_PB1)  || \
N                                                ((OUTPUT) == SYSCFG_VREFINT_OUT_PB0_PB1))
X#define IS_SYSCFG_VREFINT_OUT_SELECT(OUTPUT)   (((OUTPUT) == SYSCFG_VREFINT_OUT_NONE)  ||                                                 ((OUTPUT) == SYSCFG_VREFINT_OUT_PB0)  ||                                                 ((OUTPUT) == SYSCFG_VREFINT_OUT_PB1)  ||                                                 ((OUTPUT) == SYSCFG_VREFINT_OUT_PB0_PB1))
N/**
N  * @}
N  */ 
N
N/** @defgroup SYSCFG_flags_definition SYSCFG Flags Definition
N  * @{
N  */
N#define SYSCFG_FLAG_VREFINT_READY      SYSCFG_CFGR3_VREFINT_RDYF
N
N#define IS_SYSCFG_FLAG(FLAG)           ((FLAG) == SYSCFG_FLAG_VREFINT_READY))
N
N/**
N  * @}
N  */
N  
N/** @defgroup SYSCFG_FastModePlus_GPIO Fast Mode Plus on GPIO 
N  * @{
N  */ 
N/** @brief  Fast mode Plus driving capability on a specific GPIO  
N  */  
N#if defined (SYSCFG_CFGR2_I2C_PB6_FMP)
X#if 1L
N#define SYSCFG_FASTMODEPLUS_PB6       SYSCFG_CFGR2_I2C_PB6_FMP  /* Enable Fast Mode Plus on PB6 */
N#endif
N#if defined (SYSCFG_CFGR2_I2C_PB7_FMP)
X#if 1L
N#define SYSCFG_FASTMODEPLUS_PB7       SYSCFG_CFGR2_I2C_PB7_FMP  /* Enable Fast Mode Plus on PB7 */
N#endif
N#if defined (SYSCFG_CFGR2_I2C_PB8_FMP)
X#if 1L
N#define SYSCFG_FASTMODEPLUS_PB8       SYSCFG_CFGR2_I2C_PB8_FMP  /* Enable Fast Mode Plus on PB8 */
N#endif
N#if defined (SYSCFG_CFGR2_I2C_PB9_FMP)
X#if 1L
N#define SYSCFG_FASTMODEPLUS_PB9       SYSCFG_CFGR2_I2C_PB9_FMP  /* Enable Fast Mode Plus on PB9 */
N#endif
N
N#define IS_SYSCFG_FASTMODEPLUS(PIN) ((((PIN) & (SYSCFG_FASTMODEPLUS_PB6)) == SYSCFG_FASTMODEPLUS_PB6)  || \
N                                     (((PIN) & (SYSCFG_FASTMODEPLUS_PB7)) == SYSCFG_FASTMODEPLUS_PB7)  || \
N                                     (((PIN) & (SYSCFG_FASTMODEPLUS_PB8)) == SYSCFG_FASTMODEPLUS_PB8)  || \
N                                     (((PIN) & (SYSCFG_FASTMODEPLUS_PB9)) == SYSCFG_FASTMODEPLUS_PB9)  )
X#define IS_SYSCFG_FASTMODEPLUS(PIN) ((((PIN) & (SYSCFG_FASTMODEPLUS_PB6)) == SYSCFG_FASTMODEPLUS_PB6)  ||                                      (((PIN) & (SYSCFG_FASTMODEPLUS_PB7)) == SYSCFG_FASTMODEPLUS_PB7)  ||                                      (((PIN) & (SYSCFG_FASTMODEPLUS_PB8)) == SYSCFG_FASTMODEPLUS_PB8)  ||                                      (((PIN) & (SYSCFG_FASTMODEPLUS_PB9)) == SYSCFG_FASTMODEPLUS_PB9)  )
N/**
N * @}
N */
N /**
N  * @}
N  */ 
N  
N /** @defgroup HAL_Exported_Macros HAL Exported Macros
N  * @{
N  */  
N
N/** @brief  Freeze/Unfreeze Peripherals in Debug mode 
N  */
N#if defined (DBGMCU_APB1_FZ_DBG_TIM2_STOP)
X#if 1L
N/**
N  * @brief  TIM2 Peripherals Debug mode 
N  */ 
N#define __HAL_DBGMCU_FREEZE_TIM2()     SET_BIT(DBGMCU->APB1FZ,DBGMCU_APB1_FZ_DBG_TIM2_STOP)
N#define __HAL_DBGMCU_UNFREEZE_TIM2()   CLEAR_BIT(DBGMCU->APB1FZ,DBGMCU_APB1_FZ_DBG_TIM2_STOP)
N#endif
N
N#if defined (DBGMCU_APB1_FZ_DBG_TIM3_STOP)
X#if 0L
S/**
S  * @brief  TIM3 Peripherals Debug mode 
S  */ 
S#define __HAL_DBGMCU_FREEZE_TIM3()     SET_BIT(DBGMCU->APB1FZ,DBGMCU_APB1_FZ_DBG_TIM3_STOP)
S#define __HAL_DBGMCU_UNFREEZE_TIM3()   CLEAR_BIT(DBGMCU->APB1FZ,DBGMCU_APB1_FZ_DBG_TIM3_STOP)
N#endif
N
N#if defined (DBGMCU_APB1_FZ_DBG_TIM6_STOP)
X#if 1L
N/**
N  * @brief  TIM6 Peripherals Debug mode 
N  */
N#define __HAL_DBGMCU_FREEZE_TIM6()     SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_TIM6_STOP)
N#define __HAL_DBGMCU_UNFREEZE_TIM6()   CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_TIM6_STOP)
N#endif
N
N#if defined (DBGMCU_APB1_FZ_DBG_TIM7_STOP)
X#if 0L
S/**
S  * @brief  TIM7 Peripherals Debug mode 
S  */
S#define __HAL_DBGMCU_FREEZE_TIM7()     SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_TIM7_STOP)
S#define __HAL_DBGMCU_UNFREEZE_TIM7()   CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_TIM7_STOP)
N#endif
N
N#if defined (DBGMCU_APB1_FZ_DBG_RTC_STOP)
X#if 1L
N/**
N  * @brief  RTC Peripherals Debug mode 
N  */
N#define __HAL_DBGMCU_FREEZE_RTC()      SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_RTC_STOP)
N#define __HAL_DBGMCU_UNFREEZE_RTC()    CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_RTC_STOP)
N#endif
N
N#if defined (DBGMCU_APB1_FZ_DBG_WWDG_STOP)
X#if 1L
N/**
N  * @brief  WWDG Peripherals Debug mode 
N  */
N#define __HAL_DBGMCU_FREEZE_WWDG()     SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_WWDG_STOP)
N#define __HAL_DBGMCU_UNFREEZE_WWDG()   CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_WWDG_STOP)
N#endif
N
N#if defined (DBGMCU_APB1_FZ_DBG_IWDG_STOP)
X#if 1L
N/**
N  * @brief  IWDG Peripherals Debug mode 
N  */
N#define __HAL_DBGMCU_FREEZE_IWDG()     SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_IWDG_STOP)
N#define __HAL_DBGMCU_UNFREEZE_IWDG()   CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_IWDG_STOP)
N#endif
N
N#if defined (DBGMCU_APB1_FZ_DBG_I2C1_STOP)
X#if 1L
N/**
N  * @brief  I2C1 Peripherals Debug mode 
N  */
N#define __HAL_DBGMCU_FREEZE_I2C1_TIMEOUT()   SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C1_STOP)
N#define __HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT_DBGMCU() CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C1_STOP)
N#endif
N
N#if defined (DBGMCU_APB1_FZ_DBG_I2C2_STOP)
X#if 1L
N/**
N  * @brief  I2C2 Peripherals Debug mode 
N  */
N#define __HAL_DBGMCU_FREEZE_I2C2_TIMEOUT_DBGMCU()   SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C2_STOP)
N#define __HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT_DBGMCU() CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C2_STOP)
N#endif
N
N#if defined (DBGMCU_APB1_FZ_DBG_I2C3_STOP)
X#if 0L
S/**
S  * @brief  I2C3 Peripherals Debug mode 
S  */
S#define __HAL_DBGMCU_FREEZE_I2C3_TIMEOUT()   SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C3_STOP)
S#define __HAL_DBGMCU_UNFREEZE_I2C3_TIMEOUT() CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C3_STOP)
N#endif
N
N#if defined (DBGMCU_APB1_FZ_DBG_LPTIMER_STOP)
X#if 1L
N/**
N  * @brief  LPTIMER Peripherals Debug mode 
N  */
N#define __HAL_DBGMCU_FREEZE_LPTIMER()        SET_BIT(DBGMCU->APB1FZ ,DBGMCU_APB1_FZ_DBG_LPTIMER_STOP)
N#define __HAL_DBGMCU_UNFREEZE_LPTIMER()      CLEAR_BIT(DBGMCU->APB1FZ ,DBGMCU_APB1_FZ_DBG_LPTIMER_STOP)
N#endif
N
N#if defined (DBGMCU_APB2_FZ_DBG_TIM22_STOP)
X#if 1L
N/**
N  * @brief  TIM22 Peripherals Debug mode 
N  */
N#define __HAL_DBGMCU_FREEZE_TIM22()          SET_BIT(DBGMCU->APB2FZ, DBGMCU_APB2_FZ_DBG_TIM22_STOP)
N#define __HAL_DBGMCU_UNFREEZE_TIM22()        CLEAR_BIT(DBGMCU->APB2FZ, DBGMCU_APB2_FZ_DBG_TIM22_STOP)
N#endif
N
N#if defined (DBGMCU_APB2_FZ_DBG_TIM21_STOP)
X#if 1L
N/**
N  * @brief  TIM21 Peripherals Debug mode 
N  */
N#define __HAL_DBGMCU_FREEZE_TIM21()          SET_BIT(DBGMCU->APB2FZ, DBGMCU_APB2_FZ_DBG_TIM21_STOP)
N#define __HAL_DBGMCU_UNFREEZE_TIM21()        CLEAR_BIT(DBGMCU->APB2FZ, DBGMCU_APB2_FZ_DBG_TIM21_STOP)
N#endif
N
N/** @brief  Main Flash memory mapped at 0x00000000
N  */
N#define __HAL_SYSCFG_REMAPMEMORY_FLASH()     CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_MEM_MODE)
N
N/** @brief  System Flash memory mapped at 0x00000000
N  */
N#define __HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH()      MODIFY_REG(SYSCFG->CFGR1, SYSCFG_CFGR1_MEM_MODE, SYSCFG_CFGR1_MEM_MODE_0)
N
N
N/** @brief  Embedded SRAM mapped at 0x00000000
N  */                                      
N#define __HAL_SYSCFG_REMAPMEMORY_SRAM()             MODIFY_REG(SYSCFG->CFGR1, SYSCFG_CFGR1_MEM_MODE, SYSCFG_CFGR1_MEM_MODE_0 | SYSCFG_CFGR1_MEM_MODE_1)
N
N/** @brief  Configuration of the DBG Low Power mode.
N  * @param  __DBGLPMODE__: bit field to indicate in wich Low Power mode DBG is still active.
N  *         This parameter can be a value of
N  *         - DBGMCU_SLEEP
N  *         - DBGMCU_STOP
N  *         - DBGMCU_STANDBY
N  */
N#define __HAL_SYSCFG_DBG_LP_CONFIG(__DBGLPMODE__)    do {assert_param(IS_DBGMCU_PERIPH(__DBGLPMODE__)); \
N                                                       MODIFY_REG(DBGMCU->CR, DBGMCU_CR_DBG, (__DBGLPMODE__)); \
N                                                     } while (0) 
X#define __HAL_SYSCFG_DBG_LP_CONFIG(__DBGLPMODE__)    do {assert_param(IS_DBGMCU_PERIPH(__DBGLPMODE__));                                                        MODIFY_REG(DBGMCU->CR, DBGMCU_CR_DBG, (__DBGLPMODE__));                                                      } while (0) 
N
N#if defined (LCD_BASE) /* STM32L0x3xx only */  
X#if 1L    
N                                                       
N/** @brief  Macro to configure the VLCD Decoupling capacitance connection.
N  *
N  * @param  __SYSCFG_VLCD_CAPA__: specifies the decoupling of LCD capacitance for rails connection on GPIO.
N  *          This parameter can be a combination of following values (when available):
N  *            @arg SYSCFG_VLCD_PB2_EXT_CAPA_ON:  Connection on PB2   
N  *            @arg SYSCFG_VLCD_PB12_EXT_CAPA_ON: Connection on PB12
N  *            @arg SYSCFG_VLCD_PB0_EXT_CAPA_ON:  Connection on PB0
N  *            @arg SYSCFG_VLCD_PE11_EXT_CAPA_ON: Connection on PE11
N  *            @arg SYSCFG_VLCD_PE12_EXT_CAPA_ON: Connection on PE12   
N  * @retval None
N  */
N#define __HAL_SYSCFG_VLCD_CAPA_CONFIG(__SYSCFG_VLCD_CAPA__) \
N                  MODIFY_REG(SYSCFG->CFGR2, SYSCFG_LCD_EXT_CAPA, (uint32_t)(__SYSCFG_VLCD_CAPA__))
X#define __HAL_SYSCFG_VLCD_CAPA_CONFIG(__SYSCFG_VLCD_CAPA__)                   MODIFY_REG(SYSCFG->CFGR2, SYSCFG_LCD_EXT_CAPA, (uint32_t)(__SYSCFG_VLCD_CAPA__))
N
N/**
N  * @brief  Returns the decoupling of LCD capacitance configured by user.
N  * @retval The LCD capacitance connection as configured by user. The returned can be a combination of :
N  *            SYSCFG_VLCD_PB2_EXT_CAPA_ON:  Connection on PB2   
N  *            SYSCFG_VLCD_PB12_EXT_CAPA_ON: Connection on PB12
N  *            SYSCFG_VLCD_PB0_EXT_CAPA_ON:  Connection on PB0
N  *            SYSCFG_VLCD_PE11_EXT_CAPA_ON: Connection on PE11
N  *            SYSCFG_VLCD_PE12_EXT_CAPA_ON: Connection on PE12 
N  */
N#define __HAL_SYSCFG_GET_VLCD_CAPA_CONFIG()          READ_BIT(SYSCFG->CFGR2, SYSCFG_LCD_EXT_CAPA)
N              
N#endif
N                                                        
N/**
N  * @brief  Returns the boot mode as configured by user.
N  * @retval The boot mode as configured by user. The returned can be a value of :
N  *     - SYSCFG_BOOT_MAINFLASH
N  *     - SYSCFG_BOOT_SYSTEMFLASH
N  *     - SYSCFG_BOOT_SRAM
N  */
N#define __HAL_SYSCFG_GET_BOOT_MODE()          READ_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_BOOT_MODE)
N
N
N/** @brief  Check whether the specified SYSCFG flag is set or not.
N  * @param  __FLAG__: specifies the flag to check.
N  *         The only parameter supported is SYSCFG_FLAG_VREFINT_READY
N  * @retval The new state of __FLAG__ (TRUE or FALSE).
N  */
N#define __HAL_SYSCFG_GET_FLAG(__FLAG__) (((SYSCFG->CFGR3) & (__FLAG__)) == (__FLAG__))
N
N/** @brief  Fast mode Plus driving capability enable macro
N  * @param __FASTMODEPLUS__: This parameter can be a value of : 
N  *     @arg SYSCFG_FASTMODEPLUS_PB6
N  *     @arg SYSCFG_FASTMODEPLUS_PB7
N  *     @arg SYSCFG_FASTMODEPLUS_PB8
N  *     @arg SYSCFG_FASTMODEPLUS_PB9
N  */
N#define __HAL_SYSCFG_FASTMODEPLUS_ENABLE(__FASTMODEPLUS__)  do {assert_param(IS_SYSCFG_FASTMODEPLUS((__FASTMODEPLUS__))); \
N                                                                SET_BIT(SYSCFG->CFGR2, (__FASTMODEPLUS__));                 \
N                                                               }while(0)
X#define __HAL_SYSCFG_FASTMODEPLUS_ENABLE(__FASTMODEPLUS__)  do {assert_param(IS_SYSCFG_FASTMODEPLUS((__FASTMODEPLUS__)));                                                                 SET_BIT(SYSCFG->CFGR2, (__FASTMODEPLUS__));                                                                                }while(0)
N/** @brief  Fast mode Plus driving capability disable macro
N  * @param __FASTMODEPLUS__: This parameter can be a value of : 
N  *     @arg SYSCFG_FASTMODEPLUS_PB6
N  *     @arg SYSCFG_FASTMODEPLUS_PB7
N  *     @arg SYSCFG_FASTMODEPLUS_PB8
N  *     @arg SYSCFG_FASTMODEPLUS_PB9
N  */
N#define __HAL_SYSCFG_FASTMODEPLUS_DISABLE(__FASTMODEPLUS__) do {assert_param(IS_SYSCFG_FASTMODEPLUS((__FASTMODEPLUS__))); \
N                                                                CLEAR_BIT(SYSCFG->CFGR2, (__FASTMODEPLUS__));               \
N                                                               }while(0)
X#define __HAL_SYSCFG_FASTMODEPLUS_DISABLE(__FASTMODEPLUS__) do {assert_param(IS_SYSCFG_FASTMODEPLUS((__FASTMODEPLUS__)));                                                                 CLEAR_BIT(SYSCFG->CFGR2, (__FASTMODEPLUS__));                                                                              }while(0)
N
N
N/**                  
N  * @}
N  */
N
N/** @defgroup HAL_Exported_Functions HAL Exported Functions
N  * @{
N  */
N/** @defgroup HAL_Exported_Functions_Group1 Initialization and de-initialization functions
N *  @brief    Initialization and de-initialization functions
N * @{
N  */
NHAL_StatusTypeDef HAL_Init(void);
NHAL_StatusTypeDef HAL_DeInit(void);
Nvoid HAL_MspInit(void);
Nvoid HAL_MspDeInit(void);
NHAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority);
N
N/**                  
N  * @}
N  */
N  
N /** @defgroup HAL_Exported_Functions_Group2 Peripheral Control functions 
N  *  @brief    Peripheral Control functions
N  * @{
N  */
Nvoid HAL_IncTick(void);
Nvoid HAL_Delay(__IO uint32_t Delay);
Xvoid HAL_Delay(volatile uint32_t Delay);
Nuint32_t HAL_GetTick(void);
Nvoid HAL_SuspendTick(void);
Nvoid HAL_ResumeTick(void);
Nuint32_t HAL_GetHalVersion(void);
Nuint32_t HAL_GetREVID(void);
Nuint32_t HAL_GetDEVID(void);
Nvoid HAL_DBGMCU_EnableDBGSleepMode(void);
Nvoid HAL_DBGMCU_DisableDBGSleepMode(void);
Nvoid HAL_DBGMCU_EnableDBGStopMode(void);
Nvoid HAL_DBGMCU_DisableDBGStopMode(void);
Nvoid HAL_DBGMCU_EnableDBGStandbyMode(void);
Nvoid HAL_DBGMCU_DisableDBGStandbyMode(void);
Nvoid HAL_DBGMCU_DBG_EnableLowPowerConfig(uint32_t Periph);
Nvoid HAL_DBGMCU_DBG_DisableLowPowerConfig(uint32_t Periph);
Nuint32_t  HAL_SYSCFG_GetBootMode(void);
Nvoid HAL_SYSCFG_Enable_Lock_VREFINT(void);
Nvoid HAL_SYSCFG_Disable_Lock_VREFINT(void);
Nvoid HAL_SYSCFG_VREFINT_OutputSelect(uint32_t SYSCFG_Vrefint_OUTPUT);
N
N/**                  
N  * @}
N  */
N/**                  
N  * @}
N  */
N
N/* Define the private group ***********************************/
N/**************************************************************/
N/** @defgroup HAL_Private HAL Private
N  * @{
N  */
N/**
N  * @}
N  */
N/**************************************************************/
N
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N  
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32L0xx_HAL_H */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
L 53 "..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Src\stm32l0xx_hal.c" 2
N
N/** @addtogroup STM32L0xx_HAL_Driver
N  * @{
N  */
N
N#ifdef HAL_MODULE_ENABLED
N
N/** @addtogroup HAL 
N  * @brief HAL module driver.
N  * @{
N  */
N
N/** @addtogroup HAL_Exported_Constants
N  * @{
N  */
N
N
N/** @defgroup SysTick System Tick
N  * @{
N  */
N/**
N * @brief uwTick_variable uwTick variable
N */
N__IO uint32_t uwTick;
Xvolatile uint32_t uwTick;
N
N/**
N  * @}
N  */
N
N/** @defgroup HAL_Version HAL Version
N  * @{
N  */
N
N/**
N * @brief STM32L0xx HAL Driver version number
N */
N#define __STM32L0xx_HAL_VERSION_MAIN   (0x01U) /*!< [31:24] main version */
N#define __STM32L0xx_HAL_VERSION_SUB1   (0x08U) /*!< [23:16] sub1 version */
N#define __STM32L0xx_HAL_VERSION_SUB2   (0x02U) /*!< [15:8]  sub2 version */
N#define __STM32L0xx_HAL_VERSION_RC     (0x00U) /*!< [7:0]  release candidate */
N#define __STM32L0xx_HAL_VERSION         ((__STM32L0xx_HAL_VERSION_MAIN << 24U)\
N                                        |(__STM32L0xx_HAL_VERSION_SUB1 << 16U)\
N                                        |(__STM32L0xx_HAL_VERSION_SUB2 << 8U )\
N                                        |(__STM32L0xx_HAL_VERSION_RC))
X#define __STM32L0xx_HAL_VERSION         ((__STM32L0xx_HAL_VERSION_MAIN << 24U)                                        |(__STM32L0xx_HAL_VERSION_SUB1 << 16U)                                        |(__STM32L0xx_HAL_VERSION_SUB2 << 8U )                                        |(__STM32L0xx_HAL_VERSION_RC))
N
N#define IDCODE_DEVID_MASK    ((uint32_t)0x00000FFFU)
N
N/**
N  * @}
N  */ 
N  
N/**
N  * @}
N  */
N/** @defgroup HAL_Private HAL Private
N  * @{
N  */ 
N
N
N/**
N  * @}
N  */ 
N
N/** @addtogroup HAL_Exported_Functions HAL Exported Functions
N  * @{
N  */
N
N/** @addtogroup HAL_Exported_Functions_Group1
N *  @brief    Initialization and de-initialization functions
N *
N@verbatim
N ===============================================================================
N              ##### Initialization and de-initialization functions #####
N ===============================================================================
N   [..]  This section provides functions allowing to:
N      (+) Initializes the Flash interface, the NVIC allocation and initial clock 
N          configuration. It initializes the source of time base also when timeout 
N          is needed and the backup domain when enabled.
N      (+) de-Initializes common part of the HAL.
N      (+) Configure The time base source to have 1ms time base with a dedicated 
N          Tick interrupt priority. 
N        (++) Systick timer is used by default as source of time base, but user 
N             can eventually implement his proper time base source (a general purpose 
N             timer for example or other time source), keeping in mind that Time base 
N             duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
N             handled in milliseconds basis.
N        (++) Time base configuration function (HAL_InitTick ()) is called automatically 
N             at the beginning of the program after reset by HAL_Init() or at any time 
N             when clock is configured, by HAL_RCC_ClockConfig(). 
N        (++) Source of time base is configured  to generate interrupts at regular 
N             time intervals. Care must be taken if HAL_Delay() is called from a 
N             peripheral ISR process, the Tick interrupt line must have higher priority 
N            (numerically lower) than the peripheral interrupt. Otherwise the caller 
N            ISR process will be blocked. 
N       (++) functions affecting time base configurations are declared as __weak  
N             to make  override possible  in case of other  implementations in user file.
N 
N@endverbatim
N  * @{
N  */
N
N/**
N  * @brief This function configures the Flash prefetch, Flash preread and Buffer cache,
N  *        Configures time base source, NVIC and Low level hardware
N  * @note This function is called at the beginning of program after reset and before 
N  *       the clock configuration
N  * @note The time base configuration is based on MSI clock when exiting from Reset.
N  *       Once done, time base tick start incrementing.
N  *        In the default implementation,Systick is used as source of time base.
N  *        the tick variable is incremented each 1ms in its ISR.
N  * @retval HAL status
N  */
NHAL_StatusTypeDef HAL_Init(void)
N{
N  /* Configure Buffer cache, Flash prefetch,  Flash preread */ 
N#if (BUFFER_CACHE_DISABLE != 0)
X#if (0U != 0)
S  __HAL_FLASH_BUFFER_CACHE_DISABLE();
N#endif /* BUFFER_CACHE_DISABLE */
N
N#if (PREREAD_ENABLE != 0)
X#if (1U != 0)
N  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
X  (((((FLASH_TypeDef *) ((((uint32_t)0x40000000U) + 0x00020000U) + 0x00002000U))->ACR)) |= ((0x1U << (6U))));
N#endif /* PREREAD_ENABLE */
N
N#if (PREFETCH_ENABLE != 0)
X#if (0U != 0)
S  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
N#endif /* PREFETCH_ENABLE */
N
N  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
N
N  HAL_InitTick(TICK_INT_PRIORITY);
X  HAL_InitTick(((uint32_t)0U));
N
N  /* Init the low level hardware */
N  HAL_MspInit();
N
N  /* Return function status */
N  return HAL_OK;
N}
N
N/**
N  * @brief This function de-Initializes common part of the HAL and stops the source
N  *        of time base.
N  * @note This function is optional.
N  * @retval HAL status
N  */
NHAL_StatusTypeDef HAL_DeInit(void)
N{
N  /* Reset of all peripherals */
N  __HAL_RCC_APB1_FORCE_RESET();
X  (((RCC_TypeDef *) ((((uint32_t)0x40000000U) + 0x00020000U) + 0x00001000U))->APB1RSTR = 0xFFFFFFFFU);
N  __HAL_RCC_APB1_RELEASE_RESET();
X  (((RCC_TypeDef *) ((((uint32_t)0x40000000U) + 0x00020000U) + 0x00001000U))->APB1RSTR = 0x00000000U);
N
N  __HAL_RCC_APB2_FORCE_RESET();
X  (((RCC_TypeDef *) ((((uint32_t)0x40000000U) + 0x00020000U) + 0x00001000U))->APB2RSTR = 0xFFFFFFFFU);
N  __HAL_RCC_APB2_RELEASE_RESET();
X  (((RCC_TypeDef *) ((((uint32_t)0x40000000U) + 0x00020000U) + 0x00001000U))->APB2RSTR = 0x00000000U);
N
N  __HAL_RCC_AHB_FORCE_RESET();
X  (((RCC_TypeDef *) ((((uint32_t)0x40000000U) + 0x00020000U) + 0x00001000U))->AHBRSTR = 0xFFFFFFFFU);
N  __HAL_RCC_AHB_RELEASE_RESET();
X  (((RCC_TypeDef *) ((((uint32_t)0x40000000U) + 0x00020000U) + 0x00001000U))->AHBRSTR = 0x00000000U);
N
N  __HAL_RCC_IOP_FORCE_RESET();
X  (((RCC_TypeDef *) ((((uint32_t)0x40000000U) + 0x00020000U) + 0x00001000U))->IOPRSTR = 0xFFFFFFFFU);
N  __HAL_RCC_IOP_RELEASE_RESET();
X  (((RCC_TypeDef *) ((((uint32_t)0x40000000U) + 0x00020000U) + 0x00001000U))->IOPRSTR = 0x00000000U);
N
N  /* De-Init the low level hardware */
N  HAL_MspDeInit();
N    
N  /* Return function status */
N  return HAL_OK;
N}
N
N/**
N  * @brief  Initializes the MSP.
N  * @retval None
N  */
N__weak void HAL_MspInit(void)
N{
N  /* NOTE : This function Should not be modified, when the callback is needed,
N            the HAL_MspInit could be implemented in the user file
N   */
N}
N
N/**
N  * @brief  DeInitializes the MSP.
N  * @retval None
N  */
N__weak void HAL_MspDeInit(void)
N{
N  /* NOTE : This function Should not be modified, when the callback is needed,
N            the HAL_MspDeInit could be implemented in the user file
N   */
N}
N
N
N/**
N  * @brief This function configures the source of the time base. 
N  *        The time source is configured  to have 1ms time base with a dedicated 
N  *        Tick interrupt priority.
N  * @note This function is called  automatically at the beginning of program after
N  *       reset by HAL_Init() or at any time when clock is reconfigured  by HAL_RCC_ClockConfig(). 
N  * @note In the default implementation, SysTick timer is the source of time base. 
N  *       It is used to generate interrupts at regular time intervals. 
N  *       Care must be taken if HAL_Delay() is called from a peripheral ISR process, 
N  *       The the SysTick interrupt must have higher priority (numerically lower) 
N  *       than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
N  *       The function is declared as __Weak  to be overwritten  in case of other
N  *       implementation  in user file.
N  * @param TickPriority: Tick interrupt priority.
N  * @retval HAL status
N  */
N__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
N{
N  /*Configure the SysTick to have interrupt in 1ms time basis*/
N  HAL_SYSTICK_Config(SystemCoreClock/1000U);
N
N  /*Configure the SysTick IRQ priority */
N  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
N
N   /* Return function status */
N  return HAL_OK;
N}
N
N/**
N  * @}
N  */
N
N/** @addtogroup HAL_Exported_Functions_Group2 
N *  @brief    Peripheral Control functions
N *
N@verbatim
N ===============================================================================
N                      ##### HAL Control functions #####
N ===============================================================================
N    [..]  This section provides functions allowing to:
N      (+) Provide a tick value in millisecond
N      (+) Provide a blocking delay in millisecond
N      (+) Suspend the time base source interrupt
N      (+) Resume the time base source interrupt
N      (+) Get the HAL API driver version
N      (+) Get the device identifier
N      (+) Get the device revision identifier
N      (+) Configure low power mode behavior when the MCU is in Debug mode
N      (+) Manage the VEREFINT feature (activation, lock, output selection)
N      
N@endverbatim
N  * @{
N  */
N
N/**
N  * @brief This function is called to increment  a global variable "uwTick"
N  *        used as application time base.
N  * @note In the default implementation, this variable is incremented each 1ms
N  *       in Systick ISR.
N * @note This function is declared as __weak to be overwritten in case of other 
N  *      implementations in user file.
N  * @retval None
N  */
N__weak void HAL_IncTick(void)
N{
N  uwTick++;
N}
N
N/**
N  * @brief Provides a tick value in millisecond.
N  * @note This function is declared as __weak to be overwritten in case of other 
N  *       implementations in user file.
N  * @retval tick value
N  */
N__weak uint32_t HAL_GetTick(void)
N{
N  return uwTick;
N}
N
N/**
N  * @brief This function provides accurate delay (in ms) based on a variable incremented.
N  * @note In the default implementation , SysTick timer is the source of time base.
N  *       It is used to generate interrupts at regular time intervals where uwTick
N  *       is incremented.
N  * @note ThiS function is declared as __weak to be overwritten in case of other
N  *       implementations in user file.
N  * @param Delay: specifies the delay time length, in milliseconds.
N  * @retval None
N  */
N__weak void HAL_Delay(__IO uint32_t Delay)
X__weak void HAL_Delay(volatile uint32_t Delay)
N{
N  uint32_t tickstart = 0U;
N  tickstart = HAL_GetTick();
N  while((HAL_GetTick() - tickstart) < Delay)
N  {
N  }
N}
N
N/**
N  * @brief Suspends the Tick increment.
N  * @note In the default implementation , SysTick timer is the source of time base. It is
N  *       used to generate interrupts at regular time intervals. Once HAL_SuspendTick()
N  *       is called, the the SysTick interrupt will be disabled and so Tick increment 
N  *       is suspended.
N  * @note This function is declared as __weak to be overwritten in case of other
N  *       implementations in user file.
N  * @retval None
N  */
N__weak void HAL_SuspendTick(void)
N{
N  /* Disable SysTick Interrupt */
N  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL &= ~(1UL << 1U);
N}
N
N/**
N  * @brief Resumes the Tick increment.
N  * @note In the default implementation , SysTick timer is the source of time base. It is
N  *       used to generate interrupts at regular time intervals. Once HAL_ResumeTick()
N  *       is called, the the SysTick interrupt will be enabled and so Tick increment 
N  *       is resumed.
N  * @note This function is declared as __weak to be overwritten in case of other
N  *       implementations in user file.
N  * @retval None
N  */
N__weak void HAL_ResumeTick(void)
N{
N  /* Enable SysTick Interrupt */
N  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  |= (1UL << 1U);
N}
N
N/**
N  * @brief Returns the HAL revision
N  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
N  */
Nuint32_t HAL_GetHalVersion(void)
N{
N  return __STM32L0xx_HAL_VERSION;
X  return (((0x01U) << 24U) |((0x08U) << 16U) |((0x02U) << 8U ) |((0x00U)));
N}
N
N/**
N  * @brief Returns the device revision identifier.
N  * @retval Device revision identifier
N  */
Nuint32_t HAL_GetREVID(void)
N{
N  return((DBGMCU->IDCODE) >> 16U);
X  return((((DBGMCU_TypeDef *) (((uint32_t)0x40000000U) + 0x00015800U))->IDCODE) >> 16U);
N}
N
N/**
N  * @brief  Returns the device identifier.
N  * @retval Device identifier
N  */
Nuint32_t HAL_GetDEVID(void)
N{
N   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
X   return((((DBGMCU_TypeDef *) (((uint32_t)0x40000000U) + 0x00015800U))->IDCODE) & ((uint32_t)0x00000FFFU));
N}
N
N/**
N  * @brief  Enables the Debug Module during SLEEP mode
N  * @retval None
N  */
Nvoid HAL_DBGMCU_EnableDBGSleepMode(void)
N{
N  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
X  ((((DBGMCU_TypeDef *) (((uint32_t)0x40000000U) + 0x00015800U))->CR) |= ((0x1U << (0U))));
N}
N
N/**
N  * @brief  Disables the Debug Module during SLEEP mode
N  * @retval None
N  */
Nvoid HAL_DBGMCU_DisableDBGSleepMode(void)
N{
N  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
X  ((((DBGMCU_TypeDef *) (((uint32_t)0x40000000U) + 0x00015800U))->CR) &= ~((0x1U << (0U))));
N}
N
N/**
N  * @brief  Enables the Debug Module during STOP mode
N  * @retval None
N  */
Nvoid HAL_DBGMCU_EnableDBGStopMode(void)
N{
N  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
X  ((((DBGMCU_TypeDef *) (((uint32_t)0x40000000U) + 0x00015800U))->CR) |= ((0x1U << (1U))));
N}
N
N/**
N  * @brief  Disables the Debug Module during STOP mode
N  * @retval None
N  */
Nvoid HAL_DBGMCU_DisableDBGStopMode(void)
N{
N  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
X  ((((DBGMCU_TypeDef *) (((uint32_t)0x40000000U) + 0x00015800U))->CR) &= ~((0x1U << (1U))));
N}
N
N/**
N  * @brief  Enables the Debug Module during STANDBY mode
N  * @retval None
N  */
Nvoid HAL_DBGMCU_EnableDBGStandbyMode(void)
N{
N  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
X  ((((DBGMCU_TypeDef *) (((uint32_t)0x40000000U) + 0x00015800U))->CR) |= ((0x1U << (2U))));
N}
N
N/**
N  * @brief  Disables the Debug Module during STANDBY mode
N  * @retval None
N  */
Nvoid HAL_DBGMCU_DisableDBGStandbyMode(void)
N{
N  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
X  ((((DBGMCU_TypeDef *) (((uint32_t)0x40000000U) + 0x00015800U))->CR) &= ~((0x1U << (2U))));
N}
N
N/**
N  * @brief  Enable low power mode behavior when the MCU is in Debug mode.
N  * @param Periph: specifies the low power mode.
N  *   This parameter can be any combination of the following values:
N  *     @arg DBGMCU_SLEEP: Keep debugger connection during SLEEP mode
N  *     @arg DBGMCU_STOP: Keep debugger connection during STOP mode
N  *     @arg DBGMCU_STANDBY: Keep debugger connection during STANDBY mode
N  * @retval None
N  */
Nvoid HAL_DBGMCU_DBG_EnableLowPowerConfig(uint32_t Periph)
N{
N  /* Check the parameters */
N  assert_param(IS_DBGMCU_PERIPH(Periph));
X  ((void)0U);
N  
N  DBGMCU->CR |= Periph;
X  ((DBGMCU_TypeDef *) (((uint32_t)0x40000000U) + 0x00015800U))->CR |= Periph;
N
N}
N/**
N  * @brief  Disable low power mode behavior when the MCU is in Debug mode.
N  * @param Periph: specifies the low power mode.
N  *   This parameter can be any combination of the following values:
N  *     @arg DBGMCU_SLEEP: Keep debugger connection during SLEEP mode
N  *     @arg DBGMCU_STOP: Keep debugger connection during STOP mode
N  *     @arg DBGMCU_STANDBY: Keep debugger connection during STANDBY mode
N  * @retval None
N  */
Nvoid HAL_DBGMCU_DBG_DisableLowPowerConfig(uint32_t Periph)
N{
N  /* Check the parameters */
N  assert_param(IS_DBGMCU_PERIPH(Periph));
X  ((void)0U);
N  {
N    DBGMCU->CR &= ~Periph;
X    ((DBGMCU_TypeDef *) (((uint32_t)0x40000000U) + 0x00015800U))->CR &= ~Periph;
N  }
N}
N
N/**
N  * @brief  Returns the boot mode as configured by user.
N  * @retval The boot mode as configured by user. The returned value can be one 
N  *         of the following values:
N  *              - 0x00000000 : Boot is configured in Main Flash memory 
N  *              - 0x00000100 : Boot is configured in System Flash memory 
N  *              - 0x00000300 : Boot is configured in Embedded SRAM memory 
N  */
Nuint32_t  HAL_SYSCFG_GetBootMode(void)
N{
N  return (SYSCFG->CFGR1 & SYSCFG_CFGR1_BOOT_MODE);
X  return (((SYSCFG_TypeDef *) (((uint32_t)0x40000000U) + 0x00010000U))->CFGR1 & (0x3U << (8U)));
N}
N
N/**
N  * @brief Selects the output of internal reference voltage (VREFINT).
N  *        The VREFINT output can be routed to(PB0) or
N  *        (PB1) or both.
N  * @param SYSCFG_Vrefint_OUTPUT: new state of the Vrefint output.
N  *        This parameter can be one of the following values:
N  *     @arg SYSCFG_VREFINT_OUT_NONE
N  *     @arg SYSCFG_VREFINT_OUT_PB0
N  *     @arg SYSCFG_VREFINT_OUT_PB1
N  *     @arg SYSCFG_VREFINT_OUT_PB0_PB1
N  * @retval None
N  */
Nvoid HAL_SYSCFG_VREFINT_OutputSelect(uint32_t SYSCFG_Vrefint_OUTPUT)
N{
N  /* Check the parameters */
N  assert_param(IS_SYSCFG_VREFINT_OUT_SELECT(SYSCFG_Vrefint_OUTPUT));
X  ((void)0U);
N
N  /* Set the output Vrefint pin */
N  SYSCFG->CFGR3 &= ~(SYSCFG_CFGR3_VREF_OUT);
X  ((SYSCFG_TypeDef *) (((uint32_t)0x40000000U) + 0x00010000U))->CFGR3 &= ~((0x3U << (4U)));
N  SYSCFG->CFGR3 |= (uint32_t)(SYSCFG_Vrefint_OUTPUT);
X  ((SYSCFG_TypeDef *) (((uint32_t)0x40000000U) + 0x00010000U))->CFGR3 |= (uint32_t)(SYSCFG_Vrefint_OUTPUT);
N}
N
N/**
N  * @brief  Lock the SYSCFG VREF register values
N  * @retval None
N  */
Nvoid HAL_SYSCFG_Enable_Lock_VREFINT(void)
N{
N    /* Enable the LOCK by setting REF_LOCK bit in the CFGR3 register */
N    SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_REF_LOCK);
X    ((((SYSCFG_TypeDef *) (((uint32_t)0x40000000U) + 0x00010000U))->CFGR3) |= ((0x1U << (31U))));
N}
N
N/**
N  * @brief  Unlock the overall SYSCFG VREF register values
N  * @retval None
N  */
Nvoid HAL_SYSCFG_Disable_Lock_VREFINT(void)
N{
N    /* Disable the LOCK by setting REF_LOCK bit in the CFGR3 register */
N    CLEAR_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_REF_LOCK);
X    ((((SYSCFG_TypeDef *) (((uint32_t)0x40000000U) + 0x00010000U))->CFGR3) &= ~((0x1U << (31U))));
N}
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N#endif /* HAL_MODULE_ENABLED */
N/**
N  * @}
N  */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
