; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32l0xx_hal_tim.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32l0xx_hal_tim.d --cpu=Cortex-M0+ --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32L053C8T6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32L0xx_DFP\2.0.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32L053xx -DSTM32L0xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32l0xx_hal_tim.crf ..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Src\stm32l0xx_hal_tim.c]
                          THUMB

                          AREA ||i.HAL_TIM_Base_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_DeInit PROC
;;;247      */
;;;248    HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;249    {
000002  4604              MOV      r4,r0
;;;250      /* Check the parameters */
;;;251      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;252    
;;;253      htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  63a0              STR      r0,[r4,#0x38]
;;;254    
;;;255      /* Disable the TIM Peripheral Clock */
;;;256      __HAL_TIM_DISABLE(htim);
000008  6820              LDR      r0,[r4,#0]
00000a  6a01              LDR      r1,[r0,#0x20]
00000c  4a06              LDR      r2,|L1.40|
00000e  4211              TST      r1,r2
000010  d103              BNE      |L1.26|
000012  6801              LDR      r1,[r0,#0]
000014  0849              LSRS     r1,r1,#1
000016  0049              LSLS     r1,r1,#1
000018  6001              STR      r1,[r0,#0]
                  |L1.26|
;;;257    
;;;258      /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;259      HAL_TIM_Base_MspDeInit(htim);
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       HAL_TIM_Base_MspDeInit
;;;260      
;;;261      /* Change TIM state */
;;;262      htim->State = HAL_TIM_STATE_RESET;
000020  2000              MOVS     r0,#0
000022  63a0              STR      r0,[r4,#0x38]
;;;263      
;;;264      /* Release Lock */
;;;265      __HAL_UNLOCK(htim);
000024  6360              STR      r0,[r4,#0x34]
;;;266    
;;;267      return HAL_OK;
;;;268    }
000026  bd10              POP      {r4,pc}
;;;269    
                          ENDP

                  |L1.40|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_Base_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_GetState PROC
;;;4196     */
;;;4197   HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
000000  6b80              LDR      r0,[r0,#0x38]
;;;4198   {
;;;4199     return htim->State;
;;;4200   }
000002  4770              BX       lr
;;;4201   
                          ENDP


                          AREA ||i.HAL_TIM_Base_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_Init PROC
;;;206      */
;;;207    HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
000000  2800              CMP      r0,#0
;;;208    { 
;;;209      /* Check the TIM handle allocation */
;;;210      if(htim == NULL)
000002  d101              BNE      |L3.8|
;;;211      {
;;;212        return HAL_ERROR;
000004  2001              MOVS     r0,#1
;;;213      }
;;;214      
;;;215      /* Check the parameters */
;;;216      assert_param(IS_TIM_INSTANCE(htim->Instance)); 
;;;217      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;218      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;219      assert_param(IS_TIM_PERIOD(htim->Init.Period));
;;;220      assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
;;;221      
;;;222      if(htim->State == HAL_TIM_STATE_RESET)
;;;223      {  
;;;224        /* Allocate lock resource and initialize it */
;;;225        htim->Lock = HAL_UNLOCKED;
;;;226    
;;;227        /* Init the low level hardware : GPIO, CLOCK, NVIC */
;;;228        HAL_TIM_Base_MspInit(htim);
;;;229      }
;;;230        
;;;231      /* Set the TIM state */
;;;232      htim->State= HAL_TIM_STATE_BUSY;
;;;233      
;;;234      /* Set the Time Base configuration */
;;;235      TIM_Base_SetConfig(htim->Instance, &htim->Init); 
;;;236      
;;;237      /* Initialize the TIM state*/
;;;238      htim->State= HAL_TIM_STATE_READY;
;;;239      
;;;240      return HAL_OK;
;;;241    }
000006  4770              BX       lr
                  |L3.8|
000008  b510              PUSH     {r4,lr}               ;208
00000a  4604              MOV      r4,r0                 ;208
00000c  6b80              LDR      r0,[r0,#0x38]         ;222
00000e  2800              CMP      r0,#0                 ;222
000010  d103              BNE      |L3.26|
000012  6360              STR      r0,[r4,#0x34]         ;228
000014  4620              MOV      r0,r4                 ;228
000016  f7fffffe          BL       HAL_TIM_Base_MspInit
                  |L3.26|
00001a  2002              MOVS     r0,#2                 ;232
00001c  63a0              STR      r0,[r4,#0x38]         ;232
00001e  1d21              ADDS     r1,r4,#4              ;235
000020  6820              LDR      r0,[r4,#0]            ;235
000022  f7fffffe          BL       TIM_Base_SetConfig
000026  2001              MOVS     r0,#1                 ;238
000028  63a0              STR      r0,[r4,#0x38]         ;238
00002a  2000              MOVS     r0,#0                 ;240
00002c  bd10              POP      {r4,pc}
;;;242    
                          ENDP


                          AREA ||i.HAL_TIM_Base_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_MspDeInit PROC
;;;289      */
;;;290    __weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;291    {
;;;292      /* Prevent unused argument(s) compilation warning */
;;;293      UNUSED(htim);
;;;294    
;;;295      /* NOTE : This function Should not be modified, when the callback is needed,
;;;296                the HAL_TIM_Base_MspDeInit could be implemented in the user file
;;;297       */
;;;298    }
;;;299    
                          ENDP


                          AREA ||i.HAL_TIM_Base_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_MspInit PROC
;;;274      */
;;;275    __weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;276    {
;;;277      /* Prevent unused argument(s) compilation warning */
;;;278      UNUSED(htim);
;;;279    
;;;280      /* NOTE : This function Should not be modified, when the callback is needed,
;;;281                the HAL_TIM_Base_MspInit could be implemented in the user file
;;;282       */
;;;283    }
;;;284    
                          ENDP


                          AREA ||i.HAL_TIM_Base_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_Start PROC
;;;304      */
;;;305    HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
000000  2102              MOVS     r1,#2
;;;306    {
;;;307      /* Check the parameters */
;;;308      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;309      
;;;310      /* Set the TIM state */
;;;311      htim->State= HAL_TIM_STATE_BUSY;
000002  6381              STR      r1,[r0,#0x38]
;;;312      
;;;313      /* Enable the Peripheral */
;;;314      __HAL_TIM_ENABLE(htim);
000004  6802              LDR      r2,[r0,#0]
000006  6813              LDR      r3,[r2,#0]
000008  2101              MOVS     r1,#1
00000a  430b              ORRS     r3,r3,r1
00000c  6013              STR      r3,[r2,#0]
;;;315    
;;;316      /* Change the TIM state*/
;;;317      htim->State= HAL_TIM_STATE_READY;
00000e  6381              STR      r1,[r0,#0x38]
;;;318      
;;;319      /* Return function status */
;;;320      return HAL_OK;
000010  2000              MOVS     r0,#0
;;;321    }
000012  4770              BX       lr
;;;322    
                          ENDP


                          AREA ||i.HAL_TIM_Base_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_Start_DMA PROC
;;;391      */
;;;392    HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;393    {
000002  4604              MOV      r4,r0
;;;394      /* Check the parameters */
;;;395      assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));
;;;396      
;;;397      if((htim->State == HAL_TIM_STATE_BUSY))
000004  6b80              LDR      r0,[r0,#0x38]
000006  2802              CMP      r0,#2
000008  d006              BEQ      |L7.24|
;;;398      {
;;;399         return HAL_BUSY;
;;;400      }
;;;401      else if((htim->State == HAL_TIM_STATE_READY))
00000a  6ba0              LDR      r0,[r4,#0x38]
00000c  2801              CMP      r0,#1
00000e  d106              BNE      |L7.30|
;;;402      {
;;;403        if((pData == 0U ) && (Length > 0U))
000010  2900              CMP      r1,#0
000012  d102              BNE      |L7.26|
000014  2a00              CMP      r2,#0
000016  d000              BEQ      |L7.26|
                  |L7.24|
;;;404        {
;;;405          return HAL_ERROR;
;;;406        }
;;;407        else
;;;408        {
;;;409          htim->State = HAL_TIM_STATE_BUSY;
;;;410        }
;;;411      }
;;;412      /* Set the DMA Period elapsed callback */
;;;413      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
;;;414    
;;;415      /* Set the DMA error callback */
;;;416      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
;;;417      
;;;418      /* Enable the DMA Stream */
;;;419      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length);
;;;420      
;;;421      /* Enable the TIM Update DMA request */
;;;422      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
;;;423    
;;;424      /* Enable the Peripheral */
;;;425      __HAL_TIM_ENABLE(htim);
;;;426      
;;;427      /* Return function status */
;;;428      return HAL_OK;
;;;429    }
000018  bd70              POP      {r4-r6,pc}
                  |L7.26|
00001a  2002              MOVS     r0,#2                 ;409
00001c  63a0              STR      r0,[r4,#0x38]         ;409
                  |L7.30|
00001e  69a3              LDR      r3,[r4,#0x18]         ;413
000020  480c              LDR      r0,|L7.84|
000022  6318              STR      r0,[r3,#0x30]         ;416
000024  69a3              LDR      r3,[r4,#0x18]         ;416
000026  480c              LDR      r0,|L7.88|
000028  6398              STR      r0,[r3,#0x38]         ;419
00002a  6825              LDR      r5,[r4,#0]            ;419
00002c  4613              MOV      r3,r2                 ;419
00002e  462a              MOV      r2,r5                 ;419
000030  322c              ADDS     r2,r2,#0x2c           ;419
000032  69a0              LDR      r0,[r4,#0x18]         ;419
000034  f7fffffe          BL       HAL_DMA_Start_IT
000038  6820              LDR      r0,[r4,#0]            ;422
00003a  68c1              LDR      r1,[r0,#0xc]          ;422
00003c  22ff              MOVS     r2,#0xff              ;422
00003e  3201              ADDS     r2,#1                 ;422
000040  4311              ORRS     r1,r1,r2              ;422
000042  60c1              STR      r1,[r0,#0xc]          ;422
000044  6820              LDR      r0,[r4,#0]            ;425
000046  6801              LDR      r1,[r0,#0]            ;425
000048  2201              MOVS     r2,#1                 ;425
00004a  4311              ORRS     r1,r1,r2              ;425
00004c  6001              STR      r1,[r0,#0]            ;425
00004e  2000              MOVS     r0,#0                 ;428
000050  bd70              POP      {r4-r6,pc}
;;;430    
                          ENDP

000052  0000              DCW      0x0000
                  |L7.84|
                          DCD      TIM_DMAPeriodElapsedCplt
                  |L7.88|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIM_Base_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_Start_IT PROC
;;;350      */
;;;351    HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
000000  6802              LDR      r2,[r0,#0]
;;;352    {
;;;353      /* Check the parameters */
;;;354      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;355      
;;;356      /* Enable the TIM Update interrupt */
;;;357      __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
000002  68d3              LDR      r3,[r2,#0xc]
000004  2101              MOVS     r1,#1
000006  430b              ORRS     r3,r3,r1
000008  60d3              STR      r3,[r2,#0xc]
;;;358    
;;;359      /* Enable the Peripheral */
;;;360      __HAL_TIM_ENABLE(htim);
00000a  6800              LDR      r0,[r0,#0]
00000c  6802              LDR      r2,[r0,#0]
00000e  430a              ORRS     r2,r2,r1
000010  6002              STR      r2,[r0,#0]
;;;361    
;;;362      /* Return function status */
;;;363      return HAL_OK;
000012  2000              MOVS     r0,#0
;;;364    }
000014  4770              BX       lr
;;;365    
                          ENDP


                          AREA ||i.HAL_TIM_Base_Stop||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_Stop PROC
;;;327      */
;;;328    HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
000000  2102              MOVS     r1,#2
;;;329    {
;;;330      /* Check the parameters */
;;;331      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;332      
;;;333      /* Set the TIM state */
;;;334      htim->State= HAL_TIM_STATE_BUSY;
000002  6381              STR      r1,[r0,#0x38]
;;;335      
;;;336      /* Disable the Peripheral */
;;;337      __HAL_TIM_DISABLE(htim);
000004  6801              LDR      r1,[r0,#0]
000006  6a0a              LDR      r2,[r1,#0x20]
000008  4b05              LDR      r3,|L9.32|
00000a  421a              TST      r2,r3
00000c  d103              BNE      |L9.22|
00000e  680a              LDR      r2,[r1,#0]
000010  0852              LSRS     r2,r2,#1
000012  0052              LSLS     r2,r2,#1
000014  600a              STR      r2,[r1,#0]
                  |L9.22|
;;;338    
;;;339      /* Change the TIM state*/
;;;340      htim->State= HAL_TIM_STATE_READY;
000016  2101              MOVS     r1,#1
000018  6381              STR      r1,[r0,#0x38]
;;;341      
;;;342      /* Return function status */
;;;343      return HAL_OK;
00001a  2000              MOVS     r0,#0
;;;344    }
00001c  4770              BX       lr
;;;345    
                          ENDP

00001e  0000              DCW      0x0000
                  |L9.32|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_Base_Stop_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_Stop_DMA PROC
;;;435      */
;;;436    HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
000000  6801              LDR      r1,[r0,#0]
;;;437    {
;;;438      /* Check the parameters */
;;;439      assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));
;;;440    
;;;441      /* Disable the TIM Update DMA request */
;;;442      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
000002  68ca              LDR      r2,[r1,#0xc]
000004  23ff              MOVS     r3,#0xff
000006  3301              ADDS     r3,#1
000008  439a              BICS     r2,r2,r3
00000a  60ca              STR      r2,[r1,#0xc]
;;;443    
;;;444      /* Disable the Peripheral */
;;;445      __HAL_TIM_DISABLE(htim);
00000c  6801              LDR      r1,[r0,#0]
00000e  6a0a              LDR      r2,[r1,#0x20]
000010  4b05              LDR      r3,|L10.40|
000012  421a              TST      r2,r3
000014  d103              BNE      |L10.30|
000016  680a              LDR      r2,[r1,#0]
000018  0852              LSRS     r2,r2,#1
00001a  0052              LSLS     r2,r2,#1
00001c  600a              STR      r2,[r1,#0]
                  |L10.30|
;;;446        
;;;447      /* Change the htim state */
;;;448      htim->State = HAL_TIM_STATE_READY;
00001e  2101              MOVS     r1,#1
000020  6381              STR      r1,[r0,#0x38]
;;;449    
;;;450      /* Return function status */
;;;451      return HAL_OK;
000022  2000              MOVS     r0,#0
;;;452    }
000024  4770              BX       lr
;;;453    
                          ENDP

000026  0000              DCW      0x0000
                  |L10.40|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_Base_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_Stop_IT PROC
;;;370      */
;;;371    HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
000000  6801              LDR      r1,[r0,#0]
;;;372    {
;;;373      /* Check the parameters */
;;;374      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;375      /* Disable the TIM Update interrupt */
;;;376      __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
000002  68ca              LDR      r2,[r1,#0xc]
000004  0852              LSRS     r2,r2,#1
000006  0052              LSLS     r2,r2,#1
000008  60ca              STR      r2,[r1,#0xc]
;;;377    
;;;378      /* Disable the Peripheral */
;;;379      __HAL_TIM_DISABLE(htim);
00000a  6800              LDR      r0,[r0,#0]
00000c  6a01              LDR      r1,[r0,#0x20]
00000e  4a04              LDR      r2,|L11.32|
000010  4211              TST      r1,r2
000012  d103              BNE      |L11.28|
000014  6801              LDR      r1,[r0,#0]
000016  0849              LSRS     r1,r1,#1
000018  0049              LSLS     r1,r1,#1
00001a  6001              STR      r1,[r0,#0]
                  |L11.28|
;;;380    
;;;381      /* Return function status */
;;;382      return HAL_OK;
00001c  2000              MOVS     r0,#0
;;;383    }
00001e  4770              BX       lr
;;;384    
                          ENDP

                  |L11.32|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_ConfigClockSource||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ConfigClockSource PROC
;;;3748     */ 
;;;3749   HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
000000  6b42              LDR      r2,[r0,#0x34]
;;;3750   {
;;;3751     uint32_t tmpsmcr = 0U;
;;;3752       
;;;3753     /* Process Locked */
;;;3754     __HAL_LOCK(htim);
000002  2a01              CMP      r2,#1
000004  d002              BEQ      |L12.12|
000006  2201              MOVS     r2,#1
000008  6342              STR      r2,[r0,#0x34]
00000a  e001              B        |L12.16|
                  |L12.12|
00000c  2002              MOVS     r0,#2
;;;3755     
;;;3756     htim->State = HAL_TIM_STATE_BUSY;
;;;3757     
;;;3758     /* Check the clock source */
;;;3759     assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
;;;3760     
;;;3761     /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
;;;3762     tmpsmcr = htim->Instance->SMCR;
;;;3763     tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
;;;3764     tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
;;;3765     htim->Instance->SMCR = tmpsmcr;
;;;3766     
;;;3767     switch (sClockSourceConfig->ClockSource)
;;;3768     {
;;;3769       case TIM_CLOCKSOURCE_INTERNAL:
;;;3770       { 
;;;3771         assert_param(IS_TIM_INSTANCE(htim->Instance));      
;;;3772         /* Disable slave mode to clock the prescaler directly with the internal clock */
;;;3773         htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;3774       }
;;;3775       break;
;;;3776       
;;;3777       case TIM_CLOCKSOURCE_ETRMODE1:
;;;3778       {
;;;3779         assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
;;;3780         assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
;;;3781         assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
;;;3782         assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
;;;3783         /* Configure the ETR Clock source */
;;;3784         TIM_ETR_SetConfig(htim->Instance, 
;;;3785                           sClockSourceConfig->ClockPrescaler, 
;;;3786                           sClockSourceConfig->ClockPolarity, 
;;;3787                           sClockSourceConfig->ClockFilter);
;;;3788         /* Get the TIMx SMCR register value */
;;;3789         tmpsmcr = htim->Instance->SMCR;
;;;3790         /* Reset the SMS and TS Bits */
;;;3791         tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
;;;3792         /* Select the External clock mode1 and the ETRF trigger */
;;;3793         tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
;;;3794         /* Write to TIMx SMCR */
;;;3795         htim->Instance->SMCR = tmpsmcr;
;;;3796       }
;;;3797       break;
;;;3798       
;;;3799       case TIM_CLOCKSOURCE_ETRMODE2:
;;;3800       {
;;;3801         assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
;;;3802         assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
;;;3803         assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
;;;3804         assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
;;;3805         /* Configure the ETR Clock source */
;;;3806         TIM_ETR_SetConfig(htim->Instance, 
;;;3807                           sClockSourceConfig->ClockPrescaler, 
;;;3808                           sClockSourceConfig->ClockPolarity,
;;;3809                           sClockSourceConfig->ClockFilter);
;;;3810         /* Enable the External clock mode2 */
;;;3811         htim->Instance->SMCR |= TIM_SMCR_ECE;
;;;3812       }
;;;3813       break;
;;;3814       
;;;3815       case TIM_CLOCKSOURCE_TI1:
;;;3816       {
;;;3817         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;3818         assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
;;;3819         assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
;;;3820         TIM_TI1_ConfigInputStage(htim->Instance, 
;;;3821                           sClockSourceConfig->ClockPolarity, 
;;;3822                           sClockSourceConfig->ClockFilter);
;;;3823         TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
;;;3824       }
;;;3825       break;
;;;3826       case TIM_CLOCKSOURCE_TI2:
;;;3827       {
;;;3828         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;3829         assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
;;;3830         assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
;;;3831         TIM_TI2_ConfigInputStage(htim->Instance, 
;;;3832                           sClockSourceConfig->ClockPolarity, 
;;;3833                           sClockSourceConfig->ClockFilter);
;;;3834         TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
;;;3835       }
;;;3836       break;
;;;3837       case TIM_CLOCKSOURCE_TI1ED:
;;;3838       {
;;;3839         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;3840         assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
;;;3841         assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
;;;3842         TIM_TI1_ConfigInputStage(htim->Instance, 
;;;3843                           sClockSourceConfig->ClockPolarity,
;;;3844                           sClockSourceConfig->ClockFilter);
;;;3845         TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
;;;3846       }
;;;3847       break;
;;;3848       case TIM_CLOCKSOURCE_ITR0:
;;;3849       {
;;;3850         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;3851         TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
;;;3852       }
;;;3853       break;
;;;3854       case TIM_CLOCKSOURCE_ITR1:
;;;3855       {
;;;3856         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;3857         TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
;;;3858       }
;;;3859       break;
;;;3860       case TIM_CLOCKSOURCE_ITR2:
;;;3861       {
;;;3862         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;3863         TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
;;;3864       }
;;;3865       break;
;;;3866       case TIM_CLOCKSOURCE_ITR3:
;;;3867       {
;;;3868         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;3869         TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
;;;3870       }
;;;3871       break;
;;;3872       
;;;3873       default:
;;;3874       break;    
;;;3875     }
;;;3876     htim->State = HAL_TIM_STATE_READY;
;;;3877     
;;;3878     __HAL_UNLOCK(htim);
;;;3879     
;;;3880     return HAL_OK;
;;;3881   }
00000e  4770              BX       lr
                  |L12.16|
000010  b4f0              PUSH     {r4-r7}               ;3750
000012  2202              MOVS     r2,#2                 ;3756
000014  6382              STR      r2,[r0,#0x38]         ;3756
000016  6803              LDR      r3,[r0,#0]            ;3762
000018  689a              LDR      r2,[r3,#8]            ;3762
00001a  2477              MOVS     r4,#0x77              ;3763
00001c  25ff              MOVS     r5,#0xff              ;3764
00001e  43a2              BICS     r2,r2,r4              ;3763
000020  022d              LSLS     r5,r5,#8              ;3764
000022  43aa              BICS     r2,r2,r5              ;3764
000024  609a              STR      r2,[r3,#8]            ;3765
000026  680f              LDR      r7,[r1,#0]            ;3767
000028  26f0              MOVS     r6,#0xf0              ;3767
00002a  2270              MOVS     r2,#0x70              ;3767
00002c  2307              MOVS     r3,#7                 ;3767
00002e  2f50              CMP      r7,#0x50              ;3767
000030  d03f              BEQ      |L12.178|
000032  dc0c              BGT      |L12.78|
000034  2f20              CMP      r7,#0x20              ;3767
000036  d075              BEQ      |L12.292|
000038  dc04              BGT      |L12.68|
00003a  2f00              CMP      r7,#0                 ;3767
00003c  d073              BEQ      |L12.294|
00003e  2f10              CMP      r7,#0x10              ;3767
000040  d151              BNE      |L12.230|
000042  e093              B        |L12.364|
                  |L12.68|
000044  2f30              CMP      r7,#0x30              ;3767
000046  d06f              BEQ      |L12.296|
000048  2f40              CMP      r7,#0x40              ;3767
00004a  d14c              BNE      |L12.230|
00004c  e06d              B        |L12.298|
                  |L12.78|
00004e  2f60              CMP      r7,#0x60              ;3767
000050  d04a              BEQ      |L12.232|
000052  2f70              CMP      r7,#0x70              ;3767
000054  d01c              BEQ      |L12.144|
000056  2201              MOVS     r2,#1                 ;3767
000058  0312              LSLS     r2,r2,#12             ;3767
00005a  1abb              SUBS     r3,r7,r2              ;3767
00005c  d013              BEQ      |L12.134|
00005e  4293              CMP      r3,r2                 ;3767
000060  d141              BNE      |L12.230|
000062  6802              LDR      r2,[r0,#0]            ;3806
000064  688e              LDR      r6,[r1,#8]            ;3806
000066  684c              LDR      r4,[r1,#4]            ;3806
000068  68cb              LDR      r3,[r1,#0xc]          ;3806
00006a  6891              LDR      r1,[r2,#8]            ;3806
00006c  021b              LSLS     r3,r3,#8              ;3806
00006e  4323              ORRS     r3,r3,r4              ;3806
000070  43a9              BICS     r1,r1,r5              ;3806
000072  4333              ORRS     r3,r3,r6              ;3806
000074  430b              ORRS     r3,r3,r1              ;3806
000076  6093              STR      r3,[r2,#8]            ;3806
000078  6801              LDR      r1,[r0,#0]            ;3811
00007a  688a              LDR      r2,[r1,#8]            ;3811
00007c  2301              MOVS     r3,#1                 ;3811
00007e  039b              LSLS     r3,r3,#14             ;3811
000080  431a              ORRS     r2,r2,r3              ;3811
                  |L12.130|
000082  608a              STR      r2,[r1,#8]            ;3773
000084  e089              B        |L12.410|
                  |L12.134|
000086  6801              LDR      r1,[r0,#0]            ;3773
000088  688a              LDR      r2,[r1,#8]            ;3773
00008a  08d2              LSRS     r2,r2,#3              ;3773
00008c  00d2              LSLS     r2,r2,#3              ;3773
00008e  e7f8              B        |L12.130|
                  |L12.144|
000090  6802              LDR      r2,[r0,#0]            ;3784
000092  68cf              LDR      r7,[r1,#0xc]          ;3784
000094  688e              LDR      r6,[r1,#8]            ;3784
000096  684b              LDR      r3,[r1,#4]            ;3784
000098  6891              LDR      r1,[r2,#8]            ;3784
00009a  43a9              BICS     r1,r1,r5              ;3784
00009c  023d              LSLS     r5,r7,#8              ;3784
00009e  431d              ORRS     r5,r5,r3              ;3784
0000a0  4335              ORRS     r5,r5,r6              ;3784
0000a2  430d              ORRS     r5,r5,r1              ;3784
0000a4  6095              STR      r5,[r2,#8]            ;3784
0000a6  6802              LDR      r2,[r0,#0]            ;3789
0000a8  6891              LDR      r1,[r2,#8]            ;3789
0000aa  43a1              BICS     r1,r1,r4              ;3791
0000ac  4321              ORRS     r1,r1,r4              ;3793
0000ae  6091              STR      r1,[r2,#8]            ;3795
0000b0  e073              B        |L12.410|
                  |L12.178|
0000b2  6804              LDR      r4,[r0,#0]            ;3820
0000b4  684d              LDR      r5,[r1,#4]            ;3820
0000b6  68cf              LDR      r7,[r1,#0xc]          ;3820
0000b8  6a21              LDR      r1,[r4,#0x20]         ;3820
0000ba  46ac              MOV      r12,r5                ;3820
0000bc  6a25              LDR      r5,[r4,#0x20]         ;3820
0000be  086d              LSRS     r5,r5,#1              ;3820
0000c0  006d              LSLS     r5,r5,#1              ;3820
0000c2  6225              STR      r5,[r4,#0x20]         ;3820
0000c4  69a5              LDR      r5,[r4,#0x18]         ;3820
0000c6  43b5              BICS     r5,r5,r6              ;3820
0000c8  013e              LSLS     r6,r7,#4              ;3820
0000ca  432e              ORRS     r6,r6,r5              ;3820
0000cc  250a              MOVS     r5,#0xa               ;3820
0000ce  43a9              BICS     r1,r1,r5              ;3820
0000d0  4665              MOV      r5,r12                ;3820
0000d2  4329              ORRS     r1,r1,r5              ;3820
0000d4  61a6              STR      r6,[r4,#0x18]         ;3820
0000d6  6221              STR      r1,[r4,#0x20]         ;3820
0000d8  6804              LDR      r4,[r0,#0]            ;3820
0000da  2550              MOVS     r5,#0x50              ;3823
0000dc  68a1              LDR      r1,[r4,#8]            ;3823
0000de  4391              BICS     r1,r1,r2              ;3823
0000e0  4329              ORRS     r1,r1,r5              ;3823
0000e2  4319              ORRS     r1,r1,r3              ;3823
0000e4  60a1              STR      r1,[r4,#8]            ;3823
                  |L12.230|
0000e6  e058              B        |L12.410|
                  |L12.232|
0000e8  6804              LDR      r4,[r0,#0]            ;3831
0000ea  684f              LDR      r7,[r1,#4]            ;3831
0000ec  68ce              LDR      r6,[r1,#0xc]          ;3831
0000ee  6a21              LDR      r1,[r4,#0x20]         ;3831
0000f0  46bc              MOV      r12,r7                ;3831
0000f2  2510              MOVS     r5,#0x10              ;3831
0000f4  43a9              BICS     r1,r1,r5              ;3831
0000f6  6221              STR      r1,[r4,#0x20]         ;3831
0000f8  69a1              LDR      r1,[r4,#0x18]         ;3831
0000fa  6a25              LDR      r5,[r4,#0x20]         ;3831
0000fc  270f              MOVS     r7,#0xf               ;3831
0000fe  033f              LSLS     r7,r7,#12             ;3831
000100  43b9              BICS     r1,r1,r7              ;3831
000102  0336              LSLS     r6,r6,#12             ;3831
000104  430e              ORRS     r6,r6,r1              ;3831
000106  21a0              MOVS     r1,#0xa0              ;3831
000108  438d              BICS     r5,r5,r1              ;3831
00010a  4667              MOV      r7,r12                ;3831
00010c  0139              LSLS     r1,r7,#4              ;3831
00010e  4329              ORRS     r1,r1,r5              ;3831
000110  61a6              STR      r6,[r4,#0x18]         ;3831
000112  6221              STR      r1,[r4,#0x20]         ;3831
000114  6804              LDR      r4,[r0,#0]            ;3831
000116  2560              MOVS     r5,#0x60              ;3834
000118  68a1              LDR      r1,[r4,#8]            ;3834
00011a  4391              BICS     r1,r1,r2              ;3834
00011c  4329              ORRS     r1,r1,r5              ;3834
00011e  4319              ORRS     r1,r1,r3              ;3834
000120  60a1              STR      r1,[r4,#8]            ;3834
000122  e03a              B        |L12.410|
                  |L12.292|
000124  e02a              B        |L12.380|
                  |L12.294|
000126  e01b              B        |L12.352|
                  |L12.296|
000128  e030              B        |L12.396|
                  |L12.298|
00012a  6804              LDR      r4,[r0,#0]            ;3842
00012c  684d              LDR      r5,[r1,#4]            ;3842
00012e  68cf              LDR      r7,[r1,#0xc]          ;3842
000130  6a21              LDR      r1,[r4,#0x20]         ;3842
000132  46ac              MOV      r12,r5                ;3842
000134  6a25              LDR      r5,[r4,#0x20]         ;3842
000136  086d              LSRS     r5,r5,#1              ;3842
000138  006d              LSLS     r5,r5,#1              ;3842
00013a  6225              STR      r5,[r4,#0x20]         ;3842
00013c  69a5              LDR      r5,[r4,#0x18]         ;3842
00013e  43b5              BICS     r5,r5,r6              ;3842
000140  013e              LSLS     r6,r7,#4              ;3842
000142  432e              ORRS     r6,r6,r5              ;3842
000144  250a              MOVS     r5,#0xa               ;3842
000146  43a9              BICS     r1,r1,r5              ;3842
000148  4665              MOV      r5,r12                ;3842
00014a  4329              ORRS     r1,r1,r5              ;3842
00014c  61a6              STR      r6,[r4,#0x18]         ;3842
00014e  6221              STR      r1,[r4,#0x20]         ;3842
000150  6804              LDR      r4,[r0,#0]            ;3842
000152  2540              MOVS     r5,#0x40              ;3845
000154  68a1              LDR      r1,[r4,#8]            ;3845
000156  4391              BICS     r1,r1,r2              ;3845
000158  4329              ORRS     r1,r1,r5              ;3845
00015a  4319              ORRS     r1,r1,r3              ;3845
00015c  60a1              STR      r1,[r4,#8]            ;3845
00015e  e01c              B        |L12.410|
                  |L12.352|
000160  6804              LDR      r4,[r0,#0]            ;3847
000162  68a1              LDR      r1,[r4,#8]            ;3847
000164  4391              BICS     r1,r1,r2              ;3847
000166  4319              ORRS     r1,r1,r3              ;3847
000168  60a1              STR      r1,[r4,#8]            ;3847
00016a  e016              B        |L12.410|
                  |L12.364|
00016c  6804              LDR      r4,[r0,#0]            ;3853
00016e  2510              MOVS     r5,#0x10              ;3857
000170  68a1              LDR      r1,[r4,#8]            ;3857
000172  4391              BICS     r1,r1,r2              ;3857
000174  4329              ORRS     r1,r1,r5              ;3857
000176  4319              ORRS     r1,r1,r3              ;3857
000178  60a1              STR      r1,[r4,#8]            ;3857
00017a  e00e              B        |L12.410|
                  |L12.380|
00017c  6804              LDR      r4,[r0,#0]            ;3859
00017e  2520              MOVS     r5,#0x20              ;3863
000180  68a1              LDR      r1,[r4,#8]            ;3863
000182  4391              BICS     r1,r1,r2              ;3863
000184  4329              ORRS     r1,r1,r5              ;3863
000186  4319              ORRS     r1,r1,r3              ;3863
000188  60a1              STR      r1,[r4,#8]            ;3863
00018a  e006              B        |L12.410|
                  |L12.396|
00018c  6804              LDR      r4,[r0,#0]            ;3865
00018e  2530              MOVS     r5,#0x30              ;3869
000190  68a1              LDR      r1,[r4,#8]            ;3869
000192  4391              BICS     r1,r1,r2              ;3869
000194  4329              ORRS     r1,r1,r5              ;3869
000196  4319              ORRS     r1,r1,r3              ;3869
000198  60a1              STR      r1,[r4,#8]            ;3869
                  |L12.410|
00019a  2101              MOVS     r1,#1                 ;3876
00019c  6381              STR      r1,[r0,#0x38]         ;3876
00019e  2100              MOVS     r1,#0                 ;3878
0001a0  6341              STR      r1,[r0,#0x34]         ;3880
0001a2  bcf0              POP      {r4-r7}
0001a4  4608              MOV      r0,r1                 ;3880
0001a6  4770              BX       lr
;;;3882   
                          ENDP


                          AREA ||i.HAL_TIM_ConfigOCrefClear||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ConfigOCrefClear PROC
;;;3643     */
;;;3644   HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim, TIM_ClearInputConfigTypeDef * sClearInputConfig, uint32_t Channel)
000000  b4f0              PUSH     {r4-r7}
;;;3645   {
000002  4694              MOV      r12,r2
;;;3646     /* Check the parameters */
;;;3647     assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;3648     assert_param(IS_TIM_CHANNELS(Channel));
;;;3649     assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));
;;;3650     assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
;;;3651     assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
;;;3652     assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));
;;;3653   
;;;3654     /* Process Locked */
;;;3655     __HAL_LOCK(htim);
000004  6b42              LDR      r2,[r0,#0x34]
000006  2a01              CMP      r2,#1
000008  d007              BEQ      |L13.26|
00000a  2201              MOVS     r2,#1
;;;3656   
;;;3657     htim->State = HAL_TIM_STATE_BUSY;
00000c  6342              STR      r2,[r0,#0x34]
00000e  2202              MOVS     r2,#2
000010  6382              STR      r2,[r0,#0x38]
;;;3658   
;;;3659     if(sClearInputConfig->ClearInputSource == TIM_CLEARINPUTSOURCE_ETR)
000012  684a              LDR      r2,[r1,#4]
000014  2a01              CMP      r2,#1
000016  d003              BEQ      |L13.32|
000018  e014              B        |L13.68|
                  |L13.26|
;;;3660     {
;;;3661       TIM_ETR_SetConfig(htim->Instance,
;;;3662                         sClearInputConfig->ClearInputPrescaler,
;;;3663                         sClearInputConfig->ClearInputPolarity,
;;;3664                         sClearInputConfig->ClearInputFilter);
;;;3665   
;;;3666         /* Set the OCREF clear selection bit */
;;;3667         htim->Instance->SMCR |= TIM_SMCR_OCCS;
;;;3668     }
;;;3669   
;;;3670     switch (Channel)
;;;3671     {
;;;3672       case TIM_CHANNEL_1:
;;;3673       {
;;;3674         if(sClearInputConfig->ClearInputState != RESET)
;;;3675         {
;;;3676           /* Enable the Ocref clear feature for Channel 1 */
;;;3677           htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
;;;3678         }
;;;3679         else
;;;3680         {
;;;3681           /* Disable the Ocref clear feature for Channel 1 */
;;;3682           htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;
;;;3683         }
;;;3684       }    
;;;3685       break;
;;;3686       case TIM_CHANNEL_2:    
;;;3687       { 
;;;3688         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
;;;3689         if(sClearInputConfig->ClearInputState != RESET)  
;;;3690         {
;;;3691           /* Enable the Ocref clear feature for Channel 2 */
;;;3692           htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
;;;3693         }
;;;3694         else
;;;3695         {
;;;3696           /* Disable the Ocref clear feature for Channel 2 */
;;;3697           htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;      
;;;3698         }
;;;3699       } 
;;;3700       break;
;;;3701       case TIM_CHANNEL_3:   
;;;3702       {  
;;;3703         assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
;;;3704         if(sClearInputConfig->ClearInputState != RESET)  
;;;3705         {
;;;3706           /* Enable the Ocref clear feature for Channel 3 */
;;;3707           htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
;;;3708         }
;;;3709         else
;;;3710         {
;;;3711           /* Disable the Ocref clear feature for Channel 3 */
;;;3712           htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;      
;;;3713         }
;;;3714       } 
;;;3715       break;
;;;3716       case TIM_CHANNEL_4:    
;;;3717       {  
;;;3718         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
;;;3719         if(sClearInputConfig->ClearInputState != RESET)  
;;;3720         {
;;;3721           /* Enable the Ocref clear feature for Channel 4 */
;;;3722           htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
;;;3723         }
;;;3724         else
;;;3725         {
;;;3726           /* Disable the Ocref clear feature for Channel 4 */
;;;3727           htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;      
;;;3728         }
;;;3729       } 
;;;3730       break;
;;;3731       default:  
;;;3732       break;
;;;3733     } 
;;;3734   
;;;3735     htim->State = HAL_TIM_STATE_READY;
;;;3736     
;;;3737     __HAL_UNLOCK(htim);
;;;3738     
;;;3739     return HAL_OK;  
;;;3740   }  
00001a  bcf0              POP      {r4-r7}
00001c  2002              MOVS     r0,#2                 ;3655
00001e  4770              BX       lr
                  |L13.32|
000020  6804              LDR      r4,[r0,#0]            ;3661
000022  690f              LDR      r7,[r1,#0x10]         ;3661
000024  68ce              LDR      r6,[r1,#0xc]          ;3661
000026  688d              LDR      r5,[r1,#8]            ;3661
000028  68a3              LDR      r3,[r4,#8]            ;3661
00002a  22ff              MOVS     r2,#0xff              ;3661
00002c  0212              LSLS     r2,r2,#8              ;3661
00002e  4393              BICS     r3,r3,r2              ;3661
000030  023a              LSLS     r2,r7,#8              ;3661
000032  432a              ORRS     r2,r2,r5              ;3661
000034  4332              ORRS     r2,r2,r6              ;3661
000036  431a              ORRS     r2,r2,r3              ;3661
000038  60a2              STR      r2,[r4,#8]            ;3661
00003a  6802              LDR      r2,[r0,#0]            ;3667
00003c  6893              LDR      r3,[r2,#8]            ;3667
00003e  2408              MOVS     r4,#8                 ;3667
000040  4323              ORRS     r3,r3,r4              ;3667
000042  6093              STR      r3,[r2,#8]            ;3667
                  |L13.68|
000044  4664              MOV      r4,r12                ;3670
000046  2280              MOVS     r2,#0x80              ;3677
000048  2c00              CMP      r4,#0                 ;3670
00004a  d007              BEQ      |L13.92|
00004c  0213              LSLS     r3,r2,#8              ;3692
00004e  2c04              CMP      r4,#4                 ;3670
000050  d00e              BEQ      |L13.112|
000052  2c08              CMP      r4,#8                 ;3670
000054  d016              BEQ      |L13.132|
000056  2c0c              CMP      r4,#0xc               ;3670
000058  d127              BNE      |L13.170|
00005a  e01d              B        |L13.152|
                  |L13.92|
00005c  6809              LDR      r1,[r1,#0]            ;3674
00005e  2900              CMP      r1,#0                 ;3674
000060  6801              LDR      r1,[r0,#0]            ;3682
000062  698b              LDR      r3,[r1,#0x18]         ;3682
000064  d001              BEQ      |L13.106|
000066  4313              ORRS     r3,r3,r2              ;3677
000068  e000              B        |L13.108|
                  |L13.106|
00006a  4393              BICS     r3,r3,r2              ;3682
                  |L13.108|
00006c  618b              STR      r3,[r1,#0x18]         ;3677
00006e  e01c              B        |L13.170|
                  |L13.112|
000070  6809              LDR      r1,[r1,#0]            ;3689
000072  2900              CMP      r1,#0                 ;3689
000074  6801              LDR      r1,[r0,#0]            ;3697
000076  698a              LDR      r2,[r1,#0x18]         ;3697
000078  d001              BEQ      |L13.126|
00007a  431a              ORRS     r2,r2,r3              ;3692
00007c  e000              B        |L13.128|
                  |L13.126|
00007e  439a              BICS     r2,r2,r3              ;3697
                  |L13.128|
000080  618a              STR      r2,[r1,#0x18]         ;3692
000082  e012              B        |L13.170|
                  |L13.132|
000084  6809              LDR      r1,[r1,#0]            ;3704
000086  2900              CMP      r1,#0                 ;3704
000088  6801              LDR      r1,[r0,#0]            ;3712
00008a  69cb              LDR      r3,[r1,#0x1c]         ;3712
00008c  d001              BEQ      |L13.146|
00008e  4313              ORRS     r3,r3,r2              ;3707
000090  e000              B        |L13.148|
                  |L13.146|
000092  4393              BICS     r3,r3,r2              ;3712
                  |L13.148|
000094  61cb              STR      r3,[r1,#0x1c]         ;3707
000096  e008              B        |L13.170|
                  |L13.152|
000098  6809              LDR      r1,[r1,#0]            ;3719
00009a  2900              CMP      r1,#0                 ;3719
00009c  6801              LDR      r1,[r0,#0]            ;3727
00009e  69ca              LDR      r2,[r1,#0x1c]         ;3727
0000a0  d001              BEQ      |L13.166|
0000a2  431a              ORRS     r2,r2,r3              ;3722
0000a4  e000              B        |L13.168|
                  |L13.166|
0000a6  439a              BICS     r2,r2,r3              ;3727
                  |L13.168|
0000a8  61ca              STR      r2,[r1,#0x1c]         ;3722
                  |L13.170|
0000aa  2101              MOVS     r1,#1                 ;3735
0000ac  6381              STR      r1,[r0,#0x38]         ;3735
0000ae  2100              MOVS     r1,#0                 ;3737
0000b0  6341              STR      r1,[r0,#0x34]         ;3739
0000b2  bcf0              POP      {r4-r7}
0000b4  4608              MOV      r0,r1                 ;3739
0000b6  4770              BX       lr
;;;3741   
                          ENDP


                          AREA ||i.HAL_TIM_ConfigTI1Input||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ConfigTI1Input PROC
;;;3894     */
;;;3895   HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
000000  6802              LDR      r2,[r0,#0]
;;;3896   {
;;;3897     uint32_t tmpcr2 = 0U;
;;;3898     
;;;3899     /* Check the parameters */
;;;3900     assert_param(IS_TIM_XOR_INSTANCE(htim->Instance)); 
;;;3901     assert_param(IS_TIM_TI1SELECTION(TI1_Selection));
;;;3902   
;;;3903     /* Get the TIMx CR2 register value */
;;;3904     tmpcr2 = htim->Instance->CR2;
000002  6850              LDR      r0,[r2,#4]
;;;3905   
;;;3906     /* Reset the TI1 selection */
;;;3907     tmpcr2 &= ~TIM_CR2_TI1S;
000004  2380              MOVS     r3,#0x80
000006  4398              BICS     r0,r0,r3
;;;3908   
;;;3909     /* Set the the TI1 selection */
;;;3910     tmpcr2 |= TI1_Selection;
000008  4308              ORRS     r0,r0,r1
;;;3911     
;;;3912     /* Write to TIMxCR2 */
;;;3913     htim->Instance->CR2 = tmpcr2;
00000a  6050              STR      r0,[r2,#4]
;;;3914   
;;;3915     return HAL_OK;
00000c  2000              MOVS     r0,#0
;;;3916   }
00000e  4770              BX       lr
;;;3917                                                   
                          ENDP


                          AREA ||i.HAL_TIM_DMABurst_ReadStart||, CODE, READONLY, ALIGN=2

                  HAL_TIM_DMABurst_ReadStart PROC
;;;3422     */
;;;3423   HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
000000  b5ff              PUSH     {r0-r7,lr}
;;;3424                                                uint32_t  *BurstBuffer, uint32_t  BurstLength)
;;;3425   {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
;;;3426     /* Check the parameters */
;;;3427     assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
;;;3428     assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
;;;3429     assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
;;;3430     assert_param(IS_TIM_DMA_LENGTH(BurstLength));
;;;3431     
;;;3432     if((htim->State == HAL_TIM_STATE_BUSY))
000006  9e0a              LDR      r6,[sp,#0x28]
000008  6b80              LDR      r0,[r0,#0x38]
00000a  469c              MOV      r12,r3                ;3425
00000c  4615              MOV      r5,r2                 ;3425
00000e  2802              CMP      r0,#2
000010  d007              BEQ      |L15.34|
;;;3433     {
;;;3434        return HAL_BUSY;
;;;3435     }
;;;3436     else if((htim->State == HAL_TIM_STATE_READY))
000012  6ba0              LDR      r0,[r4,#0x38]
000014  2801              CMP      r0,#1
000016  d108              BNE      |L15.42|
;;;3437     {
;;;3438       if((BurstBuffer == 0U ) && (BurstLength > 0U))
000018  0018              MOVS     r0,r3
00001a  d104              BNE      |L15.38|
00001c  2e00              CMP      r6,#0
00001e  d002              BEQ      |L15.38|
;;;3439       {
;;;3440         return HAL_ERROR;
000020  2001              MOVS     r0,#1
                  |L15.34|
;;;3441       }
;;;3442       else
;;;3443       {
;;;3444         htim->State = HAL_TIM_STATE_BUSY;
;;;3445       }
;;;3446     }
;;;3447     switch(BurstRequestSrc)
;;;3448     {
;;;3449       case TIM_DMA_UPDATE:
;;;3450       {
;;;3451         /* Set the DMA Period elapsed callback */
;;;3452         htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
;;;3453   
;;;3454         /* Set the DMA error callback */
;;;3455         htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
;;;3456     
;;;3457         /* Enable the DMA Stream */
;;;3458          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
;;;3459       }
;;;3460       break;
;;;3461       case TIM_DMA_CC1:
;;;3462       {
;;;3463         /* Set the DMA Period elapsed callback */
;;;3464         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
;;;3465   
;;;3466         /* Set the DMA error callback */
;;;3467         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;3468     
;;;3469         /* Enable the DMA Stream */
;;;3470         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
;;;3471       }
;;;3472       break;
;;;3473       case TIM_DMA_CC2:
;;;3474       {
;;;3475         /* Set the DMA Period elapsed callback */
;;;3476         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
;;;3477   
;;;3478         /* Set the DMA error callback */
;;;3479         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;3480     
;;;3481         /* Enable the DMA Stream */
;;;3482         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
;;;3483       }
;;;3484       break;
;;;3485       case TIM_DMA_CC3:
;;;3486       {
;;;3487         /* Set the DMA Period elapsed callback */
;;;3488         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
;;;3489   
;;;3490         /* Set the DMA error callback */
;;;3491         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;3492     
;;;3493         /* Enable the DMA Stream */
;;;3494         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
;;;3495       }
;;;3496       break;
;;;3497       case TIM_DMA_CC4:
;;;3498       {
;;;3499         /* Set the DMA Period elapsed callback */
;;;3500         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
;;;3501   
;;;3502         /* Set the DMA error callback */
;;;3503         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;3504   
;;;3505         /* Enable the DMA Stream */
;;;3506         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
;;;3507       }
;;;3508       break;
;;;3509       case TIM_DMA_TRIGGER:
;;;3510       {
;;;3511         /* Set the DMA Period elapsed callback */
;;;3512         htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
;;;3513   
;;;3514         /* Set the DMA error callback */
;;;3515         htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
;;;3516   
;;;3517         /* Enable the DMA Stream */
;;;3518         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
;;;3519       }
;;;3520       break;
;;;3521       default:
;;;3522       break;
;;;3523     }
;;;3524   
;;;3525     /* configure the DMA Burst Mode */
;;;3526     htim->Instance->DCR = BurstBaseAddress | BurstLength;
;;;3527   
;;;3528     /* Enable the TIM DMA Request */
;;;3529     __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
;;;3530   
;;;3531     htim->State = HAL_TIM_STATE_READY;
;;;3532     
;;;3533     /* Return function status */
;;;3534     return HAL_OK;
;;;3535   }
000022  b005              ADD      sp,sp,#0x14
000024  bdf0              POP      {r4-r7,pc}
                  |L15.38|
000026  2002              MOVS     r0,#2                 ;3444
000028  63a0              STR      r0,[r4,#0x38]         ;3444
                  |L15.42|
00002a  2201              MOVS     r2,#1                 ;3447
00002c  02d2              LSLS     r2,r2,#11             ;3447
00002e  1aaf              SUBS     r7,r5,r2              ;3447
000030  4836              LDR      r0,|L15.268|
000032  0a33              LSRS     r3,r6,#8              ;3458
000034  4936              LDR      r1,|L15.272|
000036  4295              CMP      r5,r2                 ;3447
000038  d04f              BEQ      |L15.218|
00003a  dc0a              BGT      |L15.82|
00003c  1fea              SUBS     r2,r5,#7              ;3447
00003e  3af9              SUBS     r2,r2,#0xf9           ;3447
000040  d026              BEQ      |L15.144|
000042  3aff              SUBS     r2,r2,#0xff           ;3447
000044  1e52              SUBS     r2,r2,#1              ;3447
000046  d030              BEQ      |L15.170|
000048  3aff              SUBS     r2,r2,#0xff           ;3447
00004a  3aff              SUBS     r2,r2,#0xff           ;3447
00004c  2a02              CMP      r2,#2                 ;3447
00004e  d112              BNE      |L15.118|
000050  e037              B        |L15.194|
                  |L15.82|
000052  1aba              SUBS     r2,r7,r2              ;3447
000054  d04d              BEQ      |L15.242|
000056  2103              MOVS     r1,#3                 ;3447
000058  0309              LSLS     r1,r1,#12             ;3447
00005a  428a              CMP      r2,r1                 ;3447
00005c  d10b              BNE      |L15.118|
00005e  6ae2              LDR      r2,[r4,#0x2c]         ;3512
000060  492c              LDR      r1,|L15.276|
000062  6311              STR      r1,[r2,#0x30]         ;3515
000064  6ae1              LDR      r1,[r4,#0x2c]         ;3515
000066  4662              MOV      r2,r12                ;3518
000068  6388              STR      r0,[r1,#0x38]         ;3518
00006a  6821              LDR      r1,[r4,#0]            ;3518
00006c  1c5b              ADDS     r3,r3,#1              ;3518
00006e  314c              ADDS     r1,r1,#0x4c           ;3518
000070  6ae0              LDR      r0,[r4,#0x2c]         ;3518
000072  f7fffffe          BL       HAL_DMA_Start_IT
                  |L15.118|
000076  9802              LDR      r0,[sp,#8]            ;3526
000078  6821              LDR      r1,[r4,#0]            ;3526
00007a  4330              ORRS     r0,r0,r6              ;3526
00007c  6488              STR      r0,[r1,#0x48]         ;3526
00007e  6820              LDR      r0,[r4,#0]            ;3529
000080  68c1              LDR      r1,[r0,#0xc]          ;3529
000082  4329              ORRS     r1,r1,r5              ;3529
000084  60c1              STR      r1,[r0,#0xc]          ;3529
000086  2001              MOVS     r0,#1                 ;3531
000088  63a0              STR      r0,[r4,#0x38]         ;3531
00008a  2000              MOVS     r0,#0                 ;3534
00008c  b005              ADD      sp,sp,#0x14
00008e  bdf0              POP      {r4-r7,pc}
                  |L15.144|
000090  69a2              LDR      r2,[r4,#0x18]         ;3452
000092  4921              LDR      r1,|L15.280|
000094  6311              STR      r1,[r2,#0x30]         ;3455
000096  69a1              LDR      r1,[r4,#0x18]         ;3455
000098  4662              MOV      r2,r12                ;3458
00009a  6388              STR      r0,[r1,#0x38]         ;3458
00009c  6821              LDR      r1,[r4,#0]            ;3458
00009e  1c5b              ADDS     r3,r3,#1              ;3458
0000a0  314c              ADDS     r1,r1,#0x4c           ;3458
0000a2  69a0              LDR      r0,[r4,#0x18]         ;3458
0000a4  f7fffffe          BL       HAL_DMA_Start_IT
0000a8  e7e5              B        |L15.118|
                  |L15.170|
0000aa  69e2              LDR      r2,[r4,#0x1c]         ;3464
0000ac  1c5b              ADDS     r3,r3,#1              ;3470
0000ae  6311              STR      r1,[r2,#0x30]         ;3467
0000b0  69e1              LDR      r1,[r4,#0x1c]         ;3467
0000b2  4662              MOV      r2,r12                ;3470
0000b4  6388              STR      r0,[r1,#0x38]         ;3470
0000b6  6821              LDR      r1,[r4,#0]            ;3470
0000b8  69e0              LDR      r0,[r4,#0x1c]         ;3470
0000ba  314c              ADDS     r1,r1,#0x4c           ;3470
0000bc  f7fffffe          BL       HAL_DMA_Start_IT
0000c0  e7d9              B        |L15.118|
                  |L15.194|
0000c2  6a22              LDR      r2,[r4,#0x20]         ;3476
0000c4  1c5b              ADDS     r3,r3,#1              ;3482
0000c6  6311              STR      r1,[r2,#0x30]         ;3479
0000c8  6a21              LDR      r1,[r4,#0x20]         ;3479
0000ca  4662              MOV      r2,r12                ;3482
0000cc  6388              STR      r0,[r1,#0x38]         ;3482
0000ce  6821              LDR      r1,[r4,#0]            ;3482
0000d0  6a20              LDR      r0,[r4,#0x20]         ;3482
0000d2  314c              ADDS     r1,r1,#0x4c           ;3482
0000d4  f7fffffe          BL       HAL_DMA_Start_IT
0000d8  e7cd              B        |L15.118|
                  |L15.218|
0000da  6a62              LDR      r2,[r4,#0x24]         ;3488
0000dc  1c5b              ADDS     r3,r3,#1              ;3494
0000de  6311              STR      r1,[r2,#0x30]         ;3491
0000e0  6a61              LDR      r1,[r4,#0x24]         ;3491
0000e2  4662              MOV      r2,r12                ;3494
0000e4  6388              STR      r0,[r1,#0x38]         ;3494
0000e6  6821              LDR      r1,[r4,#0]            ;3494
0000e8  6a60              LDR      r0,[r4,#0x24]         ;3494
0000ea  314c              ADDS     r1,r1,#0x4c           ;3494
0000ec  f7fffffe          BL       HAL_DMA_Start_IT
0000f0  e7c1              B        |L15.118|
                  |L15.242|
0000f2  6aa2              LDR      r2,[r4,#0x28]         ;3500
0000f4  1c5b              ADDS     r3,r3,#1              ;3506
0000f6  6311              STR      r1,[r2,#0x30]         ;3503
0000f8  6aa1              LDR      r1,[r4,#0x28]         ;3503
0000fa  4662              MOV      r2,r12                ;3506
0000fc  6388              STR      r0,[r1,#0x38]         ;3506
0000fe  6821              LDR      r1,[r4,#0]            ;3506
000100  6aa0              LDR      r0,[r4,#0x28]         ;3506
000102  314c              ADDS     r1,r1,#0x4c           ;3506
000104  f7fffffe          BL       HAL_DMA_Start_IT
000108  e7b5              B        |L15.118|
;;;3536   
                          ENDP

00010a  0000              DCW      0x0000
                  |L15.268|
                          DCD      TIM_DMAError
                  |L15.272|
                          DCD      TIM_DMACaptureCplt
                  |L15.276|
                          DCD      TIM_DMATriggerCplt
                  |L15.280|
                          DCD      TIM_DMAPeriodElapsedCplt

                          AREA ||i.HAL_TIM_DMABurst_ReadStop||, CODE, READONLY, ALIGN=1

                  HAL_TIM_DMABurst_ReadStop PROC
;;;3542     */
;;;3543   HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
000000  b570              PUSH     {r4-r6,lr}
;;;3544   {
000002  4604              MOV      r4,r0
;;;3545     /* Check the parameters */
;;;3546     assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
;;;3547     
;;;3548     /* Abort the DMA transfer (at least disable the DMA channel) */
;;;3549     switch(BurstRequestSrc)
000004  2001              MOVS     r0,#1
000006  460d              MOV      r5,r1                 ;3544
000008  02c0              LSLS     r0,r0,#11
00000a  1a09              SUBS     r1,r1,r0
00000c  4285              CMP      r5,r0
00000e  d020              BEQ      |L16.82|
000010  dc0a              BGT      |L16.40|
000012  1fe8              SUBS     r0,r5,#7
000014  38f9              SUBS     r0,r0,#0xf9
000016  d016              BEQ      |L16.70|
000018  38ff              SUBS     r0,r0,#0xff
00001a  1e40              SUBS     r0,r0,#1
00001c  d015              BEQ      |L16.74|
00001e  38ff              SUBS     r0,r0,#0xff
000020  38ff              SUBS     r0,r0,#0xff
000022  2802              CMP      r0,#2
000024  d109              BNE      |L16.58|
000026  e012              B        |L16.78|
                  |L16.40|
000028  1a08              SUBS     r0,r1,r0
00002a  d014              BEQ      |L16.86|
00002c  2103              MOVS     r1,#3
00002e  0309              LSLS     r1,r1,#12
000030  4288              CMP      r0,r1
000032  d102              BNE      |L16.58|
;;;3550     {
;;;3551       case TIM_DMA_UPDATE:
;;;3552       {  
;;;3553         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]); 
;;;3554       }
;;;3555       break;
;;;3556       case TIM_DMA_CC1:
;;;3557       {  
;;;3558         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);     
;;;3559       }
;;;3560       break;
;;;3561       case TIM_DMA_CC2:
;;;3562       {  
;;;3563         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);     
;;;3564       }
;;;3565       break;
;;;3566       case TIM_DMA_CC3:
;;;3567       {  
;;;3568         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);     
;;;3569       }
;;;3570       break;
;;;3571       case TIM_DMA_CC4:
;;;3572       {  
;;;3573         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);     
;;;3574       }
;;;3575       break;
;;;3576       case TIM_DMA_TRIGGER:
;;;3577       {  
;;;3578         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);     
000034  6ae0              LDR      r0,[r4,#0x2c]
                  |L16.54|
000036  f7fffffe          BL       HAL_DMA_Abort
                  |L16.58|
;;;3579       }
;;;3580       break;
;;;3581       default:
;;;3582       break;  
;;;3583     }
;;;3584   
;;;3585     /* Disable the TIM Update DMA request */
;;;3586     __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
00003a  6820              LDR      r0,[r4,#0]
00003c  68c1              LDR      r1,[r0,#0xc]
00003e  43a9              BICS     r1,r1,r5
000040  60c1              STR      r1,[r0,#0xc]
;;;3587   
;;;3588     /* Return function status */
;;;3589     return HAL_OK;
000042  2000              MOVS     r0,#0
;;;3590   }
000044  bd70              POP      {r4-r6,pc}
                  |L16.70|
000046  69a0              LDR      r0,[r4,#0x18]         ;3555
000048  e7f5              B        |L16.54|
                  |L16.74|
00004a  69e0              LDR      r0,[r4,#0x1c]         ;3560
00004c  e7f3              B        |L16.54|
                  |L16.78|
00004e  6a20              LDR      r0,[r4,#0x20]         ;3565
000050  e7f1              B        |L16.54|
                  |L16.82|
000052  6a60              LDR      r0,[r4,#0x24]         ;3570
000054  e7ef              B        |L16.54|
                  |L16.86|
000056  6aa0              LDR      r0,[r4,#0x28]         ;3575
000058  e7ed              B        |L16.54|
;;;3591   
                          ENDP


                          AREA ||i.HAL_TIM_DMABurst_WriteStart||, CODE, READONLY, ALIGN=2

                  HAL_TIM_DMABurst_WriteStart PROC
;;;3220     */
;;;3221   HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
000000  b5ff              PUSH     {r0-r7,lr}
;;;3222                                                 uint32_t* BurstBuffer, uint32_t  BurstLength)
;;;3223   {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
;;;3224     /* Check the parameters */
;;;3225     assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
;;;3226     assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
;;;3227     assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
;;;3228     assert_param(IS_TIM_DMA_LENGTH(BurstLength));
;;;3229     
;;;3230     if((htim->State == HAL_TIM_STATE_BUSY))
000006  9e0a              LDR      r6,[sp,#0x28]
000008  6b80              LDR      r0,[r0,#0x38]
00000a  469c              MOV      r12,r3                ;3223
00000c  4615              MOV      r5,r2                 ;3223
00000e  2802              CMP      r0,#2
000010  d007              BEQ      |L17.34|
;;;3231     {
;;;3232        return HAL_BUSY;
;;;3233     }
;;;3234     else if((htim->State == HAL_TIM_STATE_READY))
000012  6ba0              LDR      r0,[r4,#0x38]
000014  2801              CMP      r0,#1
000016  d108              BNE      |L17.42|
;;;3235     {
;;;3236       if((BurstBuffer == 0U ) && (BurstLength > 0U)) 
000018  0018              MOVS     r0,r3
00001a  d104              BNE      |L17.38|
00001c  2e00              CMP      r6,#0
00001e  d002              BEQ      |L17.38|
;;;3237       {
;;;3238         return HAL_ERROR;                                    
000020  2001              MOVS     r0,#1
                  |L17.34|
;;;3239       }
;;;3240       else
;;;3241       {
;;;3242         htim->State = HAL_TIM_STATE_BUSY;
;;;3243       }
;;;3244     }
;;;3245     switch(BurstRequestSrc)
;;;3246     {
;;;3247       case TIM_DMA_UPDATE:
;;;3248       {  
;;;3249         /* Set the DMA Period elapsed callback */
;;;3250         htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
;;;3251        
;;;3252         /* Set the DMA error callback */
;;;3253         htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
;;;3254     
;;;3255         /* Enable the DMA Stream */
;;;3256         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8) + 1);
;;;3257       }
;;;3258       break;
;;;3259       case TIM_DMA_CC1:
;;;3260       {  
;;;3261         /* Set the DMA Period elapsed callback */
;;;3262         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;3263        
;;;3264         /* Set the DMA error callback */
;;;3265         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;3266     
;;;3267         /* Enable the DMA Stream */
;;;3268         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
;;;3269       }
;;;3270       break;
;;;3271       case TIM_DMA_CC2:
;;;3272       {  
;;;3273         /* Set the DMA Period elapsed callback */
;;;3274         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;3275        
;;;3276         /* Set the DMA error callback */
;;;3277         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;3278     
;;;3279         /* Enable the DMA Stream */
;;;3280         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
;;;3281       }
;;;3282       break;
;;;3283       case TIM_DMA_CC3:
;;;3284       {  
;;;3285         /* Set the DMA Period elapsed callback */
;;;3286         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;3287        
;;;3288         /* Set the DMA error callback */
;;;3289         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;3290     
;;;3291         /* Enable the DMA Stream */
;;;3292         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
;;;3293       }
;;;3294       break;
;;;3295       case TIM_DMA_CC4:
;;;3296       {  
;;;3297         /* Set the DMA Period elapsed callback */
;;;3298         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;3299        
;;;3300         /* Set the DMA error callback */
;;;3301         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;3302     
;;;3303         /* Enable the DMA Stream */
;;;3304         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
;;;3305       }
;;;3306       break;
;;;3307       case TIM_DMA_TRIGGER:
;;;3308       {  
;;;3309         /* Set the DMA Period elapsed callback */
;;;3310         htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
;;;3311        
;;;3312         /* Set the DMA error callback */
;;;3313         htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
;;;3314     
;;;3315         /* Enable the DMA Stream */
;;;3316         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
;;;3317       }
;;;3318       break;
;;;3319       default:
;;;3320       break;  
;;;3321     }
;;;3322      /* configure the DMA Burst Mode */
;;;3323      htim->Instance->DCR = BurstBaseAddress | BurstLength;
;;;3324   
;;;3325      /* Enable the TIM DMA Request */
;;;3326      __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
;;;3327   
;;;3328      htim->State = HAL_TIM_STATE_READY;
;;;3329     
;;;3330     /* Return function status */
;;;3331     return HAL_OK;
;;;3332   }
000022  b005              ADD      sp,sp,#0x14
000024  bdf0              POP      {r4-r7,pc}
                  |L17.38|
000026  2002              MOVS     r0,#2                 ;3242
000028  63a0              STR      r0,[r4,#0x38]         ;3242
                  |L17.42|
00002a  2701              MOVS     r7,#1                 ;3245
00002c  02ff              LSLS     r7,r7,#11             ;3245
00002e  1be9              SUBS     r1,r5,r7              ;3245
000030  4836              LDR      r0,|L17.268|
000032  0a33              LSRS     r3,r6,#8              ;3256
000034  4a36              LDR      r2,|L17.272|
000036  42bd              CMP      r5,r7                 ;3245
000038  d04f              BEQ      |L17.218|
00003a  dc0a              BGT      |L17.82|
00003c  1fe9              SUBS     r1,r5,#7              ;3245
00003e  39f9              SUBS     r1,r1,#0xf9           ;3245
000040  d026              BEQ      |L17.144|
000042  39ff              SUBS     r1,r1,#0xff           ;3245
000044  1e49              SUBS     r1,r1,#1              ;3245
000046  d030              BEQ      |L17.170|
000048  39ff              SUBS     r1,r1,#0xff           ;3245
00004a  39ff              SUBS     r1,r1,#0xff           ;3245
00004c  2902              CMP      r1,#2                 ;3245
00004e  d112              BNE      |L17.118|
000050  e037              B        |L17.194|
                  |L17.82|
000052  1bc9              SUBS     r1,r1,r7              ;3245
000054  d04d              BEQ      |L17.242|
000056  2203              MOVS     r2,#3                 ;3245
000058  0312              LSLS     r2,r2,#12             ;3245
00005a  4291              CMP      r1,r2                 ;3245
00005c  d10b              BNE      |L17.118|
00005e  6ae2              LDR      r2,[r4,#0x2c]         ;3310
000060  492c              LDR      r1,|L17.276|
000062  6311              STR      r1,[r2,#0x30]         ;3313
000064  6ae1              LDR      r1,[r4,#0x2c]         ;3313
000066  1c5b              ADDS     r3,r3,#1              ;3316
000068  6388              STR      r0,[r1,#0x38]         ;3316
00006a  6822              LDR      r2,[r4,#0]            ;3316
00006c  4661              MOV      r1,r12                ;3316
00006e  324c              ADDS     r2,r2,#0x4c           ;3316
000070  6ae0              LDR      r0,[r4,#0x2c]         ;3316
000072  f7fffffe          BL       HAL_DMA_Start_IT
                  |L17.118|
000076  9802              LDR      r0,[sp,#8]            ;3323
000078  6821              LDR      r1,[r4,#0]            ;3323
00007a  4330              ORRS     r0,r0,r6              ;3323
00007c  6488              STR      r0,[r1,#0x48]         ;3323
00007e  6820              LDR      r0,[r4,#0]            ;3326
000080  68c1              LDR      r1,[r0,#0xc]          ;3326
000082  4329              ORRS     r1,r1,r5              ;3326
000084  60c1              STR      r1,[r0,#0xc]          ;3326
000086  2001              MOVS     r0,#1                 ;3328
000088  63a0              STR      r0,[r4,#0x38]         ;3328
00008a  2000              MOVS     r0,#0                 ;3331
00008c  b005              ADD      sp,sp,#0x14
00008e  bdf0              POP      {r4-r7,pc}
                  |L17.144|
000090  69a2              LDR      r2,[r4,#0x18]         ;3250
000092  4921              LDR      r1,|L17.280|
000094  6311              STR      r1,[r2,#0x30]         ;3253
000096  69a1              LDR      r1,[r4,#0x18]         ;3253
000098  1c5b              ADDS     r3,r3,#1              ;3256
00009a  6388              STR      r0,[r1,#0x38]         ;3256
00009c  6822              LDR      r2,[r4,#0]            ;3256
00009e  4661              MOV      r1,r12                ;3256
0000a0  324c              ADDS     r2,r2,#0x4c           ;3256
0000a2  69a0              LDR      r0,[r4,#0x18]         ;3256
0000a4  f7fffffe          BL       HAL_DMA_Start_IT
0000a8  e7e5              B        |L17.118|
                  |L17.170|
0000aa  69e1              LDR      r1,[r4,#0x1c]         ;3262
0000ac  1c5b              ADDS     r3,r3,#1              ;3268
0000ae  630a              STR      r2,[r1,#0x30]         ;3265
0000b0  69e1              LDR      r1,[r4,#0x1c]         ;3265
0000b2  6388              STR      r0,[r1,#0x38]         ;3268
0000b4  6822              LDR      r2,[r4,#0]            ;3268
0000b6  4661              MOV      r1,r12                ;3268
0000b8  324c              ADDS     r2,r2,#0x4c           ;3268
0000ba  69e0              LDR      r0,[r4,#0x1c]         ;3268
0000bc  f7fffffe          BL       HAL_DMA_Start_IT
0000c0  e7d9              B        |L17.118|
                  |L17.194|
0000c2  6a21              LDR      r1,[r4,#0x20]         ;3274
0000c4  1c5b              ADDS     r3,r3,#1              ;3280
0000c6  630a              STR      r2,[r1,#0x30]         ;3277
0000c8  6a21              LDR      r1,[r4,#0x20]         ;3277
0000ca  6388              STR      r0,[r1,#0x38]         ;3280
0000cc  6822              LDR      r2,[r4,#0]            ;3280
0000ce  4661              MOV      r1,r12                ;3280
0000d0  324c              ADDS     r2,r2,#0x4c           ;3280
0000d2  6a20              LDR      r0,[r4,#0x20]         ;3280
0000d4  f7fffffe          BL       HAL_DMA_Start_IT
0000d8  e7cd              B        |L17.118|
                  |L17.218|
0000da  6a61              LDR      r1,[r4,#0x24]         ;3286
0000dc  1c5b              ADDS     r3,r3,#1              ;3292
0000de  630a              STR      r2,[r1,#0x30]         ;3289
0000e0  6a61              LDR      r1,[r4,#0x24]         ;3289
0000e2  6388              STR      r0,[r1,#0x38]         ;3292
0000e4  6822              LDR      r2,[r4,#0]            ;3292
0000e6  4661              MOV      r1,r12                ;3292
0000e8  324c              ADDS     r2,r2,#0x4c           ;3292
0000ea  6a60              LDR      r0,[r4,#0x24]         ;3292
0000ec  f7fffffe          BL       HAL_DMA_Start_IT
0000f0  e7c1              B        |L17.118|
                  |L17.242|
0000f2  6aa1              LDR      r1,[r4,#0x28]         ;3298
0000f4  1c5b              ADDS     r3,r3,#1              ;3304
0000f6  630a              STR      r2,[r1,#0x30]         ;3301
0000f8  6aa1              LDR      r1,[r4,#0x28]         ;3301
0000fa  6388              STR      r0,[r1,#0x38]         ;3304
0000fc  6822              LDR      r2,[r4,#0]            ;3304
0000fe  4661              MOV      r1,r12                ;3304
000100  324c              ADDS     r2,r2,#0x4c           ;3304
000102  6aa0              LDR      r0,[r4,#0x28]         ;3304
000104  f7fffffe          BL       HAL_DMA_Start_IT
000108  e7b5              B        |L17.118|
;;;3333   
                          ENDP

00010a  0000              DCW      0x0000
                  |L17.268|
                          DCD      TIM_DMAError
                  |L17.272|
                          DCD      TIM_DMADelayPulseCplt
                  |L17.276|
                          DCD      TIM_DMATriggerCplt
                  |L17.280|
                          DCD      TIM_DMAPeriodElapsedCplt

                          AREA ||i.HAL_TIM_DMABurst_WriteStop||, CODE, READONLY, ALIGN=1

                  HAL_TIM_DMABurst_WriteStop PROC
;;;3339     */
;;;3340   HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
000000  b570              PUSH     {r4-r6,lr}
;;;3341   {
000002  4604              MOV      r4,r0
;;;3342     /* Check the parameters */
;;;3343     assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
;;;3344     
;;;3345     /* Abort the DMA transfer (at least disable the DMA channel) */
;;;3346     switch(BurstRequestSrc)
000004  2001              MOVS     r0,#1
000006  460d              MOV      r5,r1                 ;3341
000008  02c0              LSLS     r0,r0,#11
00000a  1a09              SUBS     r1,r1,r0
00000c  4285              CMP      r5,r0
00000e  d020              BEQ      |L18.82|
000010  dc0a              BGT      |L18.40|
000012  1fe8              SUBS     r0,r5,#7
000014  38f9              SUBS     r0,r0,#0xf9
000016  d016              BEQ      |L18.70|
000018  38ff              SUBS     r0,r0,#0xff
00001a  1e40              SUBS     r0,r0,#1
00001c  d015              BEQ      |L18.74|
00001e  38ff              SUBS     r0,r0,#0xff
000020  38ff              SUBS     r0,r0,#0xff
000022  2802              CMP      r0,#2
000024  d109              BNE      |L18.58|
000026  e012              B        |L18.78|
                  |L18.40|
000028  1a08              SUBS     r0,r1,r0
00002a  d014              BEQ      |L18.86|
00002c  2103              MOVS     r1,#3
00002e  0309              LSLS     r1,r1,#12
000030  4288              CMP      r0,r1
000032  d102              BNE      |L18.58|
;;;3347     {
;;;3348       case TIM_DMA_UPDATE:
;;;3349       {  
;;;3350         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]); 
;;;3351       }
;;;3352       break;
;;;3353       case TIM_DMA_CC1:
;;;3354       {  
;;;3355         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);     
;;;3356       }
;;;3357       break;
;;;3358       case TIM_DMA_CC2:
;;;3359       {  
;;;3360         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);     
;;;3361       }
;;;3362       break;
;;;3363       case TIM_DMA_CC3:
;;;3364       {  
;;;3365         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);     
;;;3366       }
;;;3367       break;
;;;3368       case TIM_DMA_CC4:
;;;3369       {  
;;;3370         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);     
;;;3371       }
;;;3372       break;
;;;3373       case TIM_DMA_TRIGGER:
;;;3374       {  
;;;3375         HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);     
000034  6ae0              LDR      r0,[r4,#0x2c]
                  |L18.54|
000036  f7fffffe          BL       HAL_DMA_Abort
                  |L18.58|
;;;3376       }
;;;3377       break;
;;;3378       default:
;;;3379       break;  
;;;3380     }
;;;3381     /* Disable the TIM Update DMA request */
;;;3382     __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
00003a  6820              LDR      r0,[r4,#0]
00003c  68c1              LDR      r1,[r0,#0xc]
00003e  43a9              BICS     r1,r1,r5
000040  60c1              STR      r1,[r0,#0xc]
;;;3383         
;;;3384     /* Return function status */
;;;3385     return HAL_OK;  
000042  2000              MOVS     r0,#0
;;;3386   }
000044  bd70              POP      {r4-r6,pc}
                  |L18.70|
000046  69a0              LDR      r0,[r4,#0x18]         ;3352
000048  e7f5              B        |L18.54|
                  |L18.74|
00004a  69e0              LDR      r0,[r4,#0x1c]         ;3357
00004c  e7f3              B        |L18.54|
                  |L18.78|
00004e  6a20              LDR      r0,[r4,#0x20]         ;3362
000050  e7f1              B        |L18.54|
                  |L18.82|
000052  6a60              LDR      r0,[r4,#0x24]         ;3367
000054  e7ef              B        |L18.54|
                  |L18.86|
000056  6aa0              LDR      r0,[r4,#0x28]         ;3372
000058  e7ed              B        |L18.54|
;;;3387   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Encoder_DeInit PROC
;;;2251     */
;;;2252   HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;2253   {
000002  4604              MOV      r4,r0
;;;2254     /* Check the parameters */
;;;2255     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;2256   
;;;2257     htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  63a0              STR      r0,[r4,#0x38]
;;;2258   
;;;2259     /* Disable the TIM Peripheral Clock */
;;;2260     __HAL_TIM_DISABLE(htim);
000008  6820              LDR      r0,[r4,#0]
00000a  6a01              LDR      r1,[r0,#0x20]
00000c  4a06              LDR      r2,|L19.40|
00000e  4211              TST      r1,r2
000010  d103              BNE      |L19.26|
000012  6801              LDR      r1,[r0,#0]
000014  0849              LSRS     r1,r1,#1
000016  0049              LSLS     r1,r1,#1
000018  6001              STR      r1,[r0,#0]
                  |L19.26|
;;;2261   
;;;2262     /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;2263     HAL_TIM_Encoder_MspDeInit(htim);
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       HAL_TIM_Encoder_MspDeInit
;;;2264   
;;;2265     /* Change TIM state */
;;;2266     htim->State = HAL_TIM_STATE_RESET;
000020  2000              MOVS     r0,#0
000022  63a0              STR      r0,[r4,#0x38]
;;;2267   
;;;2268     /* Release Lock */
;;;2269     __HAL_UNLOCK(htim);
000024  6360              STR      r0,[r4,#0x34]
;;;2270   
;;;2271     return HAL_OK;
;;;2272   }
000026  bd10              POP      {r4,pc}
;;;2273   
                          ENDP

                  |L19.40|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_Encoder_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_GetState PROC
;;;4246     */
;;;4247   HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
000000  6b80              LDR      r0,[r0,#0x38]
;;;4248   {
;;;4249     return htim->State;
;;;4250   }
000002  4770              BX       lr
;;;4251   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_Init||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Encoder_Init PROC
;;;2160     */
;;;2161   HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
000000  2800              CMP      r0,#0
;;;2162   {
;;;2163     uint32_t tmpsmcr = 0U;
;;;2164     uint32_t tmpccmr1 = 0U;
;;;2165     uint32_t tmpccer = 0U;
;;;2166   
;;;2167     /* Check the TIM handle allocation */
;;;2168     if(htim == NULL)
000002  d101              BNE      |L21.8|
;;;2169     {
;;;2170       return HAL_ERROR;
000004  2001              MOVS     r0,#1
;;;2171     }
;;;2172   
;;;2173     /* Check the parameters */
;;;2174     assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;2175     assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
;;;2176     assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
;;;2177     assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
;;;2178     assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
;;;2179     assert_param(IS_TIM_IC_POLARITY(sConfig->IC2Polarity));
;;;2180     assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
;;;2181     assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
;;;2182     assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
;;;2183     assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
;;;2184     assert_param(IS_TIM_PERIOD(htim->Init.Period));
;;;2185     assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
;;;2186   
;;;2187     if(htim->State == HAL_TIM_STATE_RESET)
;;;2188     {
;;;2189       /* Allocate lock resource and initialize it */
;;;2190       htim->Lock = HAL_UNLOCKED;
;;;2191   
;;;2192       /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;2193       HAL_TIM_Encoder_MspInit(htim);
;;;2194     }
;;;2195   
;;;2196     /* Set the TIM state */
;;;2197     htim->State= HAL_TIM_STATE_BUSY;
;;;2198   
;;;2199     /* Reset the SMS bits */
;;;2200     htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;2201   
;;;2202     /* Configure the Time base in the Encoder Mode */
;;;2203     TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;2204   
;;;2205     /* Get the TIMx SMCR register value */
;;;2206     tmpsmcr = htim->Instance->SMCR;
;;;2207   
;;;2208     /* Get the TIMx CCMR1 register value */
;;;2209     tmpccmr1 = htim->Instance->CCMR1;
;;;2210   
;;;2211     /* Get the TIMx CCER register value */
;;;2212     tmpccer = htim->Instance->CCER;
;;;2213   
;;;2214     /* Set the encoder Mode */
;;;2215     tmpsmcr |= sConfig->EncoderMode;
;;;2216   
;;;2217     /* Select the Capture Compare 1 and the Capture Compare 2 as input */
;;;2218     tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
;;;2219     tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
;;;2220   
;;;2221     /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
;;;2222     tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
;;;2223     tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
;;;2224     tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
;;;2225     tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
;;;2226   
;;;2227     /* Set the TI1 and the TI2 Polarities */
;;;2228     tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
;;;2229     tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
;;;2230     tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
;;;2231   
;;;2232     /* Write to TIMx SMCR */
;;;2233     htim->Instance->SMCR = tmpsmcr;
;;;2234   
;;;2235     /* Write to TIMx CCMR1 */
;;;2236     htim->Instance->CCMR1 = tmpccmr1;
;;;2237   
;;;2238     /* Write to TIMx CCER */
;;;2239     htim->Instance->CCER = tmpccer;
;;;2240   
;;;2241     /* Initialize the TIM state*/
;;;2242     htim->State= HAL_TIM_STATE_READY;
;;;2243   
;;;2244     return HAL_OK;
;;;2245   }
000006  4770              BX       lr
                  |L21.8|
000008  b5f8              PUSH     {r3-r7,lr}            ;2162
00000a  4604              MOV      r4,r0                 ;2162
00000c  6b80              LDR      r0,[r0,#0x38]         ;2187
00000e  460d              MOV      r5,r1                 ;2162
000010  2800              CMP      r0,#0                 ;2187
000012  d103              BNE      |L21.28|
000014  6360              STR      r0,[r4,#0x34]         ;2193
000016  4620              MOV      r0,r4                 ;2193
000018  f7fffffe          BL       HAL_TIM_Encoder_MspInit
                  |L21.28|
00001c  2002              MOVS     r0,#2                 ;2197
00001e  63a0              STR      r0,[r4,#0x38]         ;2197
000020  6820              LDR      r0,[r4,#0]            ;2200
000022  6881              LDR      r1,[r0,#8]            ;2200
000024  08c9              LSRS     r1,r1,#3              ;2200
000026  00c9              LSLS     r1,r1,#3              ;2200
000028  6081              STR      r1,[r0,#8]            ;2200
00002a  1d21              ADDS     r1,r4,#4              ;2203
00002c  6820              LDR      r0,[r4,#0]            ;2203
00002e  f7fffffe          BL       TIM_Base_SetConfig
000032  6822              LDR      r2,[r4,#0]            ;2206
000034  6896              LDR      r6,[r2,#8]            ;2206
000036  6991              LDR      r1,[r2,#0x18]         ;2209
000038  6a10              LDR      r0,[r2,#0x20]         ;2212
00003a  682b              LDR      r3,[r5,#0]            ;2215
00003c  69af              LDR      r7,[r5,#0x18]         ;2219
00003e  4333              ORRS     r3,r3,r6              ;2215
000040  4e11              LDR      r6,|L21.136|
000042  023f              LSLS     r7,r7,#8              ;2219
000044  4031              ANDS     r1,r1,r6              ;2218
000046  430f              ORRS     r7,r7,r1              ;2219
000048  68ae              LDR      r6,[r5,#8]            ;2219
00004a  4910              LDR      r1,|L21.140|
00004c  433e              ORRS     r6,r6,r7              ;2219
00004e  400e              ANDS     r6,r6,r1              ;2222
000050  69e9              LDR      r1,[r5,#0x1c]         ;2224
000052  68ef              LDR      r7,[r5,#0xc]          ;2224
000054  0209              LSLS     r1,r1,#8              ;2224
000056  4331              ORRS     r1,r1,r6              ;2224
000058  430f              ORRS     r7,r7,r1              ;2224
00005a  6929              LDR      r1,[r5,#0x10]         ;2225
00005c  6a2e              LDR      r6,[r5,#0x20]         ;2225
00005e  0109              LSLS     r1,r1,#4              ;2225
000060  0336              LSLS     r6,r6,#12             ;2225
000062  4331              ORRS     r1,r1,r6              ;2225
000064  26aa              MOVS     r6,#0xaa              ;2228
000066  43b0              BICS     r0,r0,r6              ;2228
000068  686e              LDR      r6,[r5,#4]            ;2230
00006a  696d              LDR      r5,[r5,#0x14]         ;2230
00006c  4339              ORRS     r1,r1,r7              ;2225
00006e  012d              LSLS     r5,r5,#4              ;2230
000070  4305              ORRS     r5,r5,r0              ;2230
000072  432e              ORRS     r6,r6,r5              ;2230
000074  6093              STR      r3,[r2,#8]            ;2233
000076  6820              LDR      r0,[r4,#0]            ;2236
000078  6181              STR      r1,[r0,#0x18]         ;2236
00007a  6820              LDR      r0,[r4,#0]            ;2239
00007c  6206              STR      r6,[r0,#0x20]         ;2239
00007e  2001              MOVS     r0,#1                 ;2242
000080  63a0              STR      r0,[r4,#0x38]         ;2242
000082  2000              MOVS     r0,#0                 ;2244
000084  bdf8              POP      {r3-r7,pc}
;;;2246   
                          ENDP

000086  0000              DCW      0x0000
                  |L21.136|
                          DCD      0xfffffcfc
                  |L21.140|
                          DCD      0xffff0303

                          AREA ||i.HAL_TIM_Encoder_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_MspDeInit PROC
;;;2295     */
;;;2296   __weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2297   {
;;;2298     /* Prevent unused argument(s) compilation warning */
;;;2299     UNUSED(htim);
;;;2300   
;;;2301     /* NOTE : This function Should not be modified, when the callback is needed,
;;;2302               the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
;;;2303      */
;;;2304   }
;;;2305   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_MspInit PROC
;;;2279     */
;;;2280   __weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2281   {
;;;2282     /* Prevent unused argument(s) compilation warning */
;;;2283     UNUSED(htim);
;;;2284   
;;;2285     /* NOTE : This function Should not be modified, when the callback is needed,
;;;2286               the HAL_TIM_Encoder_MspInit could be implemented in the user file
;;;2287      */
;;;2288   }
;;;2289   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_Start PROC
;;;2315     */
;;;2316   HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b430              PUSH     {r4,r5}
;;;2317   {
;;;2318     /* Check the parameters */
;;;2319     assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;2320     
;;;2321     /* Enable the encoder interface channels */
;;;2322     switch (Channel)
;;;2323     {
;;;2324       case TIM_CHANNEL_1:
;;;2325       {
;;;2326         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
000002  2301              MOVS     r3,#1
000004  6802              LDR      r2,[r0,#0]            ;2322
000006  2900              CMP      r1,#0                 ;2322
000008  d017              BEQ      |L24.58|
00000a  2410              MOVS     r4,#0x10              ;2317
00000c  2904              CMP      r1,#4                 ;2322
00000e  d01b              BEQ      |L24.72|
000010  6a11              LDR      r1,[r2,#0x20]         ;2322
000012  4399              BICS     r1,r1,r3              ;2322
000014  6211              STR      r1,[r2,#0x20]         ;2322
000016  6a11              LDR      r1,[r2,#0x20]         ;2322
000018  4319              ORRS     r1,r1,r3              ;2322
00001a  6211              STR      r1,[r2,#0x20]         ;2322
00001c  6801              LDR      r1,[r0,#0]            ;2322
00001e  2210              MOVS     r2,#0x10              ;2322
000020  6a0d              LDR      r5,[r1,#0x20]         ;2322
000022  4395              BICS     r5,r5,r2              ;2322
000024  620d              STR      r5,[r1,#0x20]         ;2322
000026  6a0a              LDR      r2,[r1,#0x20]         ;2322
000028  4322              ORRS     r2,r2,r4              ;2322
00002a  620a              STR      r2,[r1,#0x20]         ;2322
                  |L24.44|
;;;2327         break; 
;;;2328       }
;;;2329       case TIM_CHANNEL_2:
;;;2330       { 
;;;2331         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
;;;2332         break;
;;;2333       }  
;;;2334       default :
;;;2335       {
;;;2336        TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;2337        TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;2338        break; 
;;;2339       }
;;;2340     }  
;;;2341     /* Enable the Peripheral */
;;;2342     __HAL_TIM_ENABLE(htim);
00002c  6800              LDR      r0,[r0,#0]
00002e  6801              LDR      r1,[r0,#0]
000030  4319              ORRS     r1,r1,r3
000032  6001              STR      r1,[r0,#0]
;;;2343     
;;;2344     /* Return function status */
;;;2345     return HAL_OK;
;;;2346   }
000034  bc30              POP      {r4,r5}
000036  2000              MOVS     r0,#0                 ;2345
000038  4770              BX       lr
                  |L24.58|
00003a  6a11              LDR      r1,[r2,#0x20]
00003c  0849              LSRS     r1,r1,#1
00003e  0049              LSLS     r1,r1,#1
000040  6211              STR      r1,[r2,#0x20]
000042  6a11              LDR      r1,[r2,#0x20]
000044  4319              ORRS     r1,r1,r3
000046  e005              B        |L24.84|
                  |L24.72|
000048  6a15              LDR      r5,[r2,#0x20]         ;2327
00004a  2110              MOVS     r1,#0x10              ;2327
00004c  438d              BICS     r5,r5,r1              ;2327
00004e  6215              STR      r5,[r2,#0x20]         ;2327
000050  6a11              LDR      r1,[r2,#0x20]         ;2327
000052  4321              ORRS     r1,r1,r4              ;2327
                  |L24.84|
000054  6211              STR      r1,[r2,#0x20]         ;2327
000056  e7e9              B        |L24.44|
;;;2347   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Encoder_Start_DMA PROC
;;;2502     */
;;;2503   HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length)
000000  b5ff              PUSH     {r0-r7,lr}
;;;2504   {
000002  4604              MOV      r4,r0
;;;2505     /* Check the parameters */
;;;2506     assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
;;;2507     
;;;2508     if((htim->State == HAL_TIM_STATE_BUSY))
000004  6b80              LDR      r0,[r0,#0x38]
000006  b081              SUB      sp,sp,#4              ;2504
000008  2802              CMP      r0,#2
00000a  d00b              BEQ      |L25.36|
;;;2509     {
;;;2510        return HAL_BUSY;
;;;2511     }
;;;2512     else if((htim->State == HAL_TIM_STATE_READY))
00000c  6ba0              LDR      r0,[r4,#0x38]
00000e  2801              CMP      r0,#1
000010  d10c              BNE      |L25.44|
;;;2513     {
;;;2514       if((((pData1 == 0U) || (pData2 == 0U) )) && (Length > 0U)) 
000012  2a00              CMP      r2,#0
000014  d002              BEQ      |L25.28|
000016  9804              LDR      r0,[sp,#0x10]
000018  2800              CMP      r0,#0
00001a  d105              BNE      |L25.40|
                  |L25.28|
00001c  980a              LDR      r0,[sp,#0x28]
00001e  2800              CMP      r0,#0
000020  d002              BEQ      |L25.40|
;;;2515       {
;;;2516         return HAL_ERROR;                                    
000022  2001              MOVS     r0,#1
                  |L25.36|
;;;2517       }
;;;2518       else
;;;2519       {
;;;2520         htim->State = HAL_TIM_STATE_BUSY;
;;;2521       }
;;;2522     }  
;;;2523      
;;;2524     switch (Channel)
;;;2525     {
;;;2526       case TIM_CHANNEL_1:
;;;2527       {
;;;2528         /* Set the DMA Period elapsed callback */
;;;2529         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
;;;2530        
;;;2531         /* Set the DMA error callback */
;;;2532         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;2533         
;;;2534         /* Enable the DMA Stream */
;;;2535         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t )pData1, Length); 
;;;2536         
;;;2537         /* Enable the TIM Input Capture DMA request */      
;;;2538         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;2539               
;;;2540         /* Enable the Peripheral */
;;;2541         __HAL_TIM_ENABLE(htim);
;;;2542         
;;;2543         /* Enable the Capture compare channel */
;;;2544         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;2545       }
;;;2546       break;
;;;2547       
;;;2548       case TIM_CHANNEL_2:
;;;2549       {
;;;2550         /* Set the DMA Period elapsed callback */
;;;2551         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
;;;2552        
;;;2553         /* Set the DMA error callback */
;;;2554         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
;;;2555         /* Enable the DMA Stream */
;;;2556         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
;;;2557         
;;;2558         /* Enable the TIM Input Capture  DMA request */
;;;2559         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;2560        
;;;2561         /* Enable the Peripheral */
;;;2562         __HAL_TIM_ENABLE(htim);
;;;2563         
;;;2564         /* Enable the Capture compare channel */
;;;2565         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;2566       }
;;;2567       break;
;;;2568       
;;;2569       case TIM_CHANNEL_ALL:
;;;2570       {
;;;2571         /* Set the DMA Period elapsed callback */
;;;2572         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
;;;2573        
;;;2574         /* Set the DMA error callback */
;;;2575         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;2576         
;;;2577         /* Enable the DMA Stream */
;;;2578         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length);
;;;2579         
;;;2580         /* Set the DMA Period elapsed callback */
;;;2581         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
;;;2582        
;;;2583         /* Set the DMA error callback */
;;;2584         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;2585         
;;;2586         /* Enable the DMA Stream */
;;;2587         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
;;;2588             
;;;2589        /* Enable the Peripheral */
;;;2590         __HAL_TIM_ENABLE(htim);
;;;2591         
;;;2592         /* Enable the Capture compare channel */
;;;2593         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;2594         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;2595         
;;;2596         /* Enable the TIM Input Capture  DMA request */
;;;2597         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;2598         /* Enable the TIM Input Capture  DMA request */
;;;2599         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;2600       }
;;;2601       break;
;;;2602       
;;;2603       default:
;;;2604       break;
;;;2605     }  
;;;2606     /* Return function status */
;;;2607     return HAL_OK;
;;;2608   }
000024  b005              ADD      sp,sp,#0x14
000026  bdf0              POP      {r4-r7,pc}
                  |L25.40|
000028  2002              MOVS     r0,#2                 ;2520
00002a  63a0              STR      r0,[r4,#0x38]         ;2520
                  |L25.44|
00002c  2501              MOVS     r5,#1                 ;2516
00002e  4e3d              LDR      r6,|L25.292|
000030  4f3d              LDR      r7,|L25.296|
000032  2900              CMP      r1,#0                 ;2524
000034  d004              BEQ      |L25.64|
000036  2904              CMP      r1,#4                 ;2524
000038  d01e              BEQ      |L25.120|
00003a  2918              CMP      r1,#0x18              ;2524
00003c  d16f              BNE      |L25.286|
00003e  e03a              B        |L25.182|
                  |L25.64|
000040  69e0              LDR      r0,[r4,#0x1c]         ;2529
000042  6306              STR      r6,[r0,#0x30]         ;2532
000044  69e0              LDR      r0,[r4,#0x1c]         ;2532
000046  6387              STR      r7,[r0,#0x38]         ;2535
000048  6821              LDR      r1,[r4,#0]            ;2535
00004a  69e0              LDR      r0,[r4,#0x1c]         ;2535
00004c  3134              ADDS     r1,r1,#0x34           ;2535
00004e  9b0a              LDR      r3,[sp,#0x28]         ;2535
000050  f7fffffe          BL       HAL_DMA_Start_IT
000054  6820              LDR      r0,[r4,#0]            ;2538
000056  68c1              LDR      r1,[r0,#0xc]          ;2538
000058  2201              MOVS     r2,#1                 ;2538
00005a  0252              LSLS     r2,r2,#9              ;2538
00005c  4311              ORRS     r1,r1,r2              ;2538
00005e  60c1              STR      r1,[r0,#0xc]          ;2538
000060  6820              LDR      r0,[r4,#0]            ;2541
000062  6801              LDR      r1,[r0,#0]            ;2541
000064  4329              ORRS     r1,r1,r5              ;2541
000066  6001              STR      r1,[r0,#0]            ;2541
000068  6820              LDR      r0,[r4,#0]            ;2541
00006a  6a01              LDR      r1,[r0,#0x20]         ;2541
00006c  0849              LSRS     r1,r1,#1              ;2541
00006e  0049              LSLS     r1,r1,#1              ;2541
000070  6201              STR      r1,[r0,#0x20]         ;2541
000072  6a01              LDR      r1,[r0,#0x20]         ;2541
000074  4329              ORRS     r1,r1,r5              ;2541
000076  e01c              B        |L25.178|
                  |L25.120|
000078  6a20              LDR      r0,[r4,#0x20]         ;2551
00007a  6306              STR      r6,[r0,#0x30]         ;2554
00007c  6a20              LDR      r0,[r4,#0x20]         ;2554
00007e  6387              STR      r7,[r0,#0x38]         ;2556
000080  6821              LDR      r1,[r4,#0]            ;2556
000082  6a20              LDR      r0,[r4,#0x20]         ;2556
000084  3138              ADDS     r1,r1,#0x38           ;2556
000086  9b0a              LDR      r3,[sp,#0x28]         ;2556
000088  9a04              LDR      r2,[sp,#0x10]         ;2556
00008a  f7fffffe          BL       HAL_DMA_Start_IT
00008e  6820              LDR      r0,[r4,#0]            ;2559
000090  68c2              LDR      r2,[r0,#0xc]          ;2559
000092  2101              MOVS     r1,#1                 ;2559
000094  0289              LSLS     r1,r1,#10             ;2559
000096  430a              ORRS     r2,r2,r1              ;2559
000098  60c2              STR      r2,[r0,#0xc]          ;2559
00009a  6820              LDR      r0,[r4,#0]            ;2562
00009c  6801              LDR      r1,[r0,#0]            ;2562
00009e  4329              ORRS     r1,r1,r5              ;2562
0000a0  6001              STR      r1,[r0,#0]            ;2562
0000a2  6820              LDR      r0,[r4,#0]            ;2562
0000a4  2110              MOVS     r1,#0x10              ;2562
0000a6  6a02              LDR      r2,[r0,#0x20]         ;2562
0000a8  438a              BICS     r2,r2,r1              ;2562
0000aa  6202              STR      r2,[r0,#0x20]         ;2562
0000ac  6a01              LDR      r1,[r0,#0x20]         ;2562
0000ae  2210              MOVS     r2,#0x10              ;2562
0000b0  4311              ORRS     r1,r1,r2              ;2562
                  |L25.178|
0000b2  6201              STR      r1,[r0,#0x20]         ;2562
0000b4  e033              B        |L25.286|
                  |L25.182|
0000b6  69e0              LDR      r0,[r4,#0x1c]         ;2572
0000b8  6306              STR      r6,[r0,#0x30]         ;2575
0000ba  69e0              LDR      r0,[r4,#0x1c]         ;2575
0000bc  6387              STR      r7,[r0,#0x38]         ;2578
0000be  6821              LDR      r1,[r4,#0]            ;2578
0000c0  69e0              LDR      r0,[r4,#0x1c]         ;2578
0000c2  3134              ADDS     r1,r1,#0x34           ;2578
0000c4  9b0a              LDR      r3,[sp,#0x28]         ;2578
0000c6  f7fffffe          BL       HAL_DMA_Start_IT
0000ca  6a20              LDR      r0,[r4,#0x20]         ;2581
0000cc  6306              STR      r6,[r0,#0x30]         ;2584
0000ce  6a20              LDR      r0,[r4,#0x20]         ;2584
0000d0  6387              STR      r7,[r0,#0x38]         ;2587
0000d2  6821              LDR      r1,[r4,#0]            ;2587
0000d4  6a20              LDR      r0,[r4,#0x20]         ;2587
0000d6  3138              ADDS     r1,r1,#0x38           ;2587
0000d8  9b0a              LDR      r3,[sp,#0x28]         ;2587
0000da  9a04              LDR      r2,[sp,#0x10]         ;2587
0000dc  f7fffffe          BL       HAL_DMA_Start_IT
0000e0  6820              LDR      r0,[r4,#0]            ;2590
0000e2  6801              LDR      r1,[r0,#0]            ;2590
0000e4  4329              ORRS     r1,r1,r5              ;2590
0000e6  6001              STR      r1,[r0,#0]            ;2590
0000e8  6820              LDR      r0,[r4,#0]            ;2590
0000ea  6a01              LDR      r1,[r0,#0x20]         ;2590
0000ec  0849              LSRS     r1,r1,#1              ;2590
0000ee  0049              LSLS     r1,r1,#1              ;2590
0000f0  6201              STR      r1,[r0,#0x20]         ;2590
0000f2  6a01              LDR      r1,[r0,#0x20]         ;2590
0000f4  4329              ORRS     r1,r1,r5              ;2590
0000f6  6201              STR      r1,[r0,#0x20]         ;2590
0000f8  6820              LDR      r0,[r4,#0]            ;2590
0000fa  2110              MOVS     r1,#0x10              ;2590
0000fc  6a02              LDR      r2,[r0,#0x20]         ;2590
0000fe  438a              BICS     r2,r2,r1              ;2590
000100  6202              STR      r2,[r0,#0x20]         ;2590
000102  6a01              LDR      r1,[r0,#0x20]         ;2590
000104  2210              MOVS     r2,#0x10              ;2590
000106  4311              ORRS     r1,r1,r2              ;2590
000108  6201              STR      r1,[r0,#0x20]         ;2590
00010a  6820              LDR      r0,[r4,#0]            ;2597
00010c  68c1              LDR      r1,[r0,#0xc]          ;2597
00010e  0152              LSLS     r2,r2,#5              ;2597
000110  4311              ORRS     r1,r1,r2              ;2597
000112  60c1              STR      r1,[r0,#0xc]          ;2597
000114  6820              LDR      r0,[r4,#0]            ;2599
000116  68c1              LDR      r1,[r0,#0xc]          ;2599
000118  0052              LSLS     r2,r2,#1              ;2599
00011a  4311              ORRS     r1,r1,r2              ;2599
00011c  60c1              STR      r1,[r0,#0xc]          ;2599
                  |L25.286|
00011e  2000              MOVS     r0,#0                 ;2607
000120  b005              ADD      sp,sp,#0x14
000122  bdf0              POP      {r4-r7,pc}
;;;2609   
                          ENDP

                  |L25.292|
                          DCD      TIM_DMACaptureCplt
                  |L25.296|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIM_Encoder_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_Start_IT PROC
;;;2400     */
;;;2401   HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b4f0              PUSH     {r4-r7}
;;;2402   {
;;;2403     /* Check the parameters */
;;;2404     assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;2405     
;;;2406     /* Enable the encoder interface channels */
;;;2407     /* Enable the capture compare Interrupts 1 and/or 2 */
;;;2408     switch (Channel)
;;;2409     {
;;;2410       case TIM_CHANNEL_1:
;;;2411       {
;;;2412         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;2413         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000002  2402              MOVS     r4,#2
000004  2301              MOVS     r3,#1                 ;2412
000006  6802              LDR      r2,[r0,#0]            ;2408
000008  2900              CMP      r1,#0                 ;2408
00000a  d020              BEQ      |L26.78|
00000c  2504              MOVS     r5,#4                 ;2402
00000e  2610              MOVS     r6,#0x10              ;2402
000010  2904              CMP      r1,#4                 ;2408
000012  d027              BEQ      |L26.100|
000014  6a11              LDR      r1,[r2,#0x20]         ;2408
000016  4399              BICS     r1,r1,r3              ;2408
000018  6211              STR      r1,[r2,#0x20]         ;2408
00001a  6a11              LDR      r1,[r2,#0x20]         ;2408
00001c  4319              ORRS     r1,r1,r3              ;2408
00001e  6211              STR      r1,[r2,#0x20]         ;2408
000020  6801              LDR      r1,[r0,#0]            ;2408
000022  2210              MOVS     r2,#0x10              ;2408
000024  6a0f              LDR      r7,[r1,#0x20]         ;2408
000026  4397              BICS     r7,r7,r2              ;2408
000028  620f              STR      r7,[r1,#0x20]         ;2408
00002a  6a0a              LDR      r2,[r1,#0x20]         ;2408
00002c  4332              ORRS     r2,r2,r6              ;2408
00002e  620a              STR      r2,[r1,#0x20]         ;2408
;;;2414         break; 
;;;2415       }
;;;2416       case TIM_CHANNEL_2:
;;;2417       { 
;;;2418         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;2419         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2); 
;;;2420         break;
;;;2421       }  
;;;2422       default :
;;;2423       {
;;;2424        TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;2425        TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;2426        __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000030  6801              LDR      r1,[r0,#0]
000032  68ca              LDR      r2,[r1,#0xc]
000034  4322              ORRS     r2,r2,r4
000036  60ca              STR      r2,[r1,#0xc]
;;;2427        __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000038  6801              LDR      r1,[r0,#0]
00003a  68ca              LDR      r2,[r1,#0xc]
00003c  432a              ORRS     r2,r2,r5
00003e  60ca              STR      r2,[r1,#0xc]
                  |L26.64|
;;;2428        break; 
;;;2429       }
;;;2430     }
;;;2431     
;;;2432     /* Enable the Peripheral */
;;;2433     __HAL_TIM_ENABLE(htim);
000040  6800              LDR      r0,[r0,#0]
000042  6801              LDR      r1,[r0,#0]
000044  4319              ORRS     r1,r1,r3
000046  6001              STR      r1,[r0,#0]
;;;2434     
;;;2435     /* Return function status */
;;;2436     return HAL_OK;
;;;2437   }
000048  bcf0              POP      {r4-r7}
00004a  2000              MOVS     r0,#0                 ;2436
00004c  4770              BX       lr
                  |L26.78|
00004e  6a11              LDR      r1,[r2,#0x20]
000050  0849              LSRS     r1,r1,#1
000052  0049              LSLS     r1,r1,#1
000054  6211              STR      r1,[r2,#0x20]
000056  6a11              LDR      r1,[r2,#0x20]
000058  4319              ORRS     r1,r1,r3
00005a  6211              STR      r1,[r2,#0x20]
00005c  6801              LDR      r1,[r0,#0]            ;2413
00005e  68ca              LDR      r2,[r1,#0xc]          ;2413
000060  4322              ORRS     r2,r2,r4              ;2413
000062  e009              B        |L26.120|
                  |L26.100|
000064  6a14              LDR      r4,[r2,#0x20]         ;2414
000066  2110              MOVS     r1,#0x10              ;2414
000068  438c              BICS     r4,r4,r1              ;2414
00006a  6214              STR      r4,[r2,#0x20]         ;2414
00006c  6a11              LDR      r1,[r2,#0x20]         ;2414
00006e  4331              ORRS     r1,r1,r6              ;2414
000070  6211              STR      r1,[r2,#0x20]         ;2414
000072  6801              LDR      r1,[r0,#0]            ;2419
000074  68ca              LDR      r2,[r1,#0xc]          ;2419
000076  432a              ORRS     r2,r2,r5              ;2419
                  |L26.120|
000078  60ca              STR      r2,[r1,#0xc]          ;2413
00007a  e7e1              B        |L26.64|
;;;2438   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_Stop||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Encoder_Stop PROC
;;;2357     */
;;;2358   HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6802              LDR      r2,[r0,#0]
;;;2359   {
;;;2360     /* Check the parameters */
;;;2361       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;2362       
;;;2363      /* Disable the Input Capture channels 1 and 2
;;;2364       (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
;;;2365     switch (Channel)
000002  2900              CMP      r1,#0
000004  d019              BEQ      |L27.58|
000006  2904              CMP      r1,#4
000008  d01e              BEQ      |L27.72|
00000a  6a11              LDR      r1,[r2,#0x20]
00000c  0849              LSRS     r1,r1,#1
00000e  0049              LSLS     r1,r1,#1
000010  6211              STR      r1,[r2,#0x20]
000012  6a11              LDR      r1,[r2,#0x20]
000014  6211              STR      r1,[r2,#0x20]
000016  6801              LDR      r1,[r0,#0]
000018  2210              MOVS     r2,#0x10
00001a  6a0b              LDR      r3,[r1,#0x20]
00001c  4393              BICS     r3,r3,r2
00001e  620b              STR      r3,[r1,#0x20]
000020  6a0a              LDR      r2,[r1,#0x20]
000022  620a              STR      r2,[r1,#0x20]
                  |L27.36|
;;;2366     {
;;;2367       case TIM_CHANNEL_1:
;;;2368       {
;;;2369         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
;;;2370         break; 
;;;2371       }
;;;2372       case TIM_CHANNEL_2:
;;;2373       { 
;;;2374         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
;;;2375         break;
;;;2376       }  
;;;2377       default :
;;;2378       {
;;;2379        TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
;;;2380        TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
;;;2381        break; 
;;;2382       }
;;;2383     }  
;;;2384     /* Disable the Peripheral */
;;;2385     __HAL_TIM_DISABLE(htim);
000024  6800              LDR      r0,[r0,#0]
000026  6a01              LDR      r1,[r0,#0x20]
000028  4a0b              LDR      r2,|L27.88|
00002a  4211              TST      r1,r2
00002c  d103              BNE      |L27.54|
00002e  6801              LDR      r1,[r0,#0]
000030  0849              LSRS     r1,r1,#1
000032  0049              LSLS     r1,r1,#1
000034  6001              STR      r1,[r0,#0]
                  |L27.54|
;;;2386     
;;;2387     /* Return function status */
;;;2388     return HAL_OK;
000036  2000              MOVS     r0,#0
;;;2389   }
000038  4770              BX       lr
                  |L27.58|
00003a  6a11              LDR      r1,[r2,#0x20]
00003c  0849              LSRS     r1,r1,#1
00003e  0049              LSLS     r1,r1,#1
000040  6211              STR      r1,[r2,#0x20]
000042  6a11              LDR      r1,[r2,#0x20]
000044  6211              STR      r1,[r2,#0x20]
000046  e7ed              B        |L27.36|
                  |L27.72|
000048  6a13              LDR      r3,[r2,#0x20]         ;2370
00004a  2110              MOVS     r1,#0x10              ;2370
00004c  438b              BICS     r3,r3,r1              ;2370
00004e  6213              STR      r3,[r2,#0x20]         ;2370
000050  6a11              LDR      r1,[r2,#0x20]         ;2370
000052  6211              STR      r1,[r2,#0x20]         ;2370
000054  e7e6              B        |L27.36|
;;;2390   
                          ENDP

000056  0000              DCW      0x0000
                  |L27.88|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_Encoder_Stop_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Encoder_Stop_DMA PROC
;;;2619     */
;;;2620   HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b470              PUSH     {r4-r6}
;;;2621   {
;;;2622     /* Check the parameters */
;;;2623     assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
;;;2624     
;;;2625     /* Disable the Input Capture channels 1 and 2
;;;2626       (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
;;;2627     if(Channel == TIM_CHANNEL_1)
;;;2628     {
;;;2629       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
;;;2630       
;;;2631       /* Disable the capture compare DMA Request 1 */
;;;2632       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000002  2301              MOVS     r3,#1
000004  025b              LSLS     r3,r3,#9
000006  2401              MOVS     r4,#1
000008  6802              LDR      r2,[r0,#0]            ;2627
00000a  2900              CMP      r1,#0                 ;2627
00000c  d023              BEQ      |L28.86|
;;;2633     }  
;;;2634     else if(Channel == TIM_CHANNEL_2)
;;;2635     {  
;;;2636       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
;;;2637       
;;;2638       /* Disable the capture compare DMA Request 2 */
;;;2639       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
00000e  005d              LSLS     r5,r3,#1
000010  2904              CMP      r1,#4                 ;2634
000012  d02a              BEQ      |L28.106|
000014  6a11              LDR      r1,[r2,#0x20]         ;2634
000016  43a1              BICS     r1,r1,r4              ;2634
000018  6211              STR      r1,[r2,#0x20]         ;2634
00001a  6a11              LDR      r1,[r2,#0x20]         ;2634
00001c  6211              STR      r1,[r2,#0x20]         ;2634
00001e  6801              LDR      r1,[r0,#0]            ;2634
000020  2210              MOVS     r2,#0x10              ;2634
000022  6a0e              LDR      r6,[r1,#0x20]         ;2634
000024  4396              BICS     r6,r6,r2              ;2634
000026  620e              STR      r6,[r1,#0x20]         ;2634
000028  6a0a              LDR      r2,[r1,#0x20]         ;2634
00002a  620a              STR      r2,[r1,#0x20]         ;2634
;;;2640     }  
;;;2641     else
;;;2642     {
;;;2643       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
;;;2644       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
;;;2645       
;;;2646       /* Disable the capture compare DMA Request 1 and 2 */
;;;2647       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
00002c  6801              LDR      r1,[r0,#0]
00002e  68ca              LDR      r2,[r1,#0xc]
000030  439a              BICS     r2,r2,r3
000032  60ca              STR      r2,[r1,#0xc]
;;;2648       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000034  6801              LDR      r1,[r0,#0]
000036  68ca              LDR      r2,[r1,#0xc]
000038  43aa              BICS     r2,r2,r5
00003a  60ca              STR      r2,[r1,#0xc]
                  |L28.60|
;;;2649     }
;;;2650     
;;;2651     /* Disable the Peripheral */
;;;2652     __HAL_TIM_DISABLE(htim);
00003c  6801              LDR      r1,[r0,#0]
00003e  6a0a              LDR      r2,[r1,#0x20]
000040  4b0f              LDR      r3,|L28.128|
000042  421a              TST      r2,r3
000044  d103              BNE      |L28.78|
000046  680a              LDR      r2,[r1,#0]
000048  0852              LSRS     r2,r2,#1
00004a  0052              LSLS     r2,r2,#1
00004c  600a              STR      r2,[r1,#0]
                  |L28.78|
;;;2653     
;;;2654     /* Change the htim state */
;;;2655     htim->State = HAL_TIM_STATE_READY;
00004e  6384              STR      r4,[r0,#0x38]
;;;2656     
;;;2657     /* Return function status */
;;;2658     return HAL_OK;
;;;2659   }
000050  bc70              POP      {r4-r6}
000052  2000              MOVS     r0,#0                 ;2658
000054  4770              BX       lr
                  |L28.86|
000056  6a11              LDR      r1,[r2,#0x20]
000058  0849              LSRS     r1,r1,#1
00005a  0049              LSLS     r1,r1,#1
00005c  6211              STR      r1,[r2,#0x20]
00005e  6a11              LDR      r1,[r2,#0x20]
000060  6211              STR      r1,[r2,#0x20]
000062  6801              LDR      r1,[r0,#0]            ;2632
000064  68ca              LDR      r2,[r1,#0xc]          ;2632
000066  439a              BICS     r2,r2,r3              ;2632
000068  e008              B        |L28.124|
                  |L28.106|
00006a  6a13              LDR      r3,[r2,#0x20]         ;2632
00006c  2110              MOVS     r1,#0x10              ;2632
00006e  438b              BICS     r3,r3,r1              ;2632
000070  6213              STR      r3,[r2,#0x20]         ;2632
000072  6a11              LDR      r1,[r2,#0x20]         ;2632
000074  6211              STR      r1,[r2,#0x20]         ;2632
000076  6801              LDR      r1,[r0,#0]            ;2639
000078  68ca              LDR      r2,[r1,#0xc]          ;2639
00007a  43aa              BICS     r2,r2,r5              ;2639
                  |L28.124|
00007c  60ca              STR      r2,[r1,#0xc]          ;2639
00007e  e7dd              B        |L28.60|
;;;2660   
                          ENDP

                  |L28.128|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_Encoder_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Encoder_Stop_IT PROC
;;;2448     */
;;;2449   HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b470              PUSH     {r4-r6}
;;;2450   {
;;;2451     /* Check the parameters */
;;;2452     assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;2453       
;;;2454     /* Disable the Input Capture channels 1 and 2
;;;2455       (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
;;;2456     if(Channel == TIM_CHANNEL_1)
;;;2457     {
;;;2458       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
;;;2459       
;;;2460       /* Disable the capture compare Interrupts 1 */
;;;2461     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000002  2302              MOVS     r3,#2
000004  2401              MOVS     r4,#1
000006  6802              LDR      r2,[r0,#0]            ;2456
000008  2900              CMP      r1,#0                 ;2456
00000a  d023              BEQ      |L29.84|
00000c  2504              MOVS     r5,#4                 ;2450
;;;2462     }  
;;;2463     else if(Channel == TIM_CHANNEL_2)
00000e  2904              CMP      r1,#4
000010  d02a              BEQ      |L29.104|
000012  6a11              LDR      r1,[r2,#0x20]
000014  43a1              BICS     r1,r1,r4
000016  6211              STR      r1,[r2,#0x20]
000018  6a11              LDR      r1,[r2,#0x20]
00001a  6211              STR      r1,[r2,#0x20]
00001c  6801              LDR      r1,[r0,#0]
00001e  2210              MOVS     r2,#0x10
000020  6a0e              LDR      r6,[r1,#0x20]
000022  4396              BICS     r6,r6,r2
000024  620e              STR      r6,[r1,#0x20]
000026  6a0a              LDR      r2,[r1,#0x20]
000028  620a              STR      r2,[r1,#0x20]
;;;2464     {  
;;;2465       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
;;;2466       
;;;2467       /* Disable the capture compare Interrupts 2 */
;;;2468     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
;;;2469     }  
;;;2470     else
;;;2471     {
;;;2472       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
;;;2473       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
;;;2474       
;;;2475       /* Disable the capture compare Interrupts 1 and 2 */
;;;2476       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
00002a  6801              LDR      r1,[r0,#0]
00002c  68ca              LDR      r2,[r1,#0xc]
00002e  439a              BICS     r2,r2,r3
000030  60ca              STR      r2,[r1,#0xc]
;;;2477       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000032  6801              LDR      r1,[r0,#0]
000034  68ca              LDR      r2,[r1,#0xc]
000036  43aa              BICS     r2,r2,r5
000038  60ca              STR      r2,[r1,#0xc]
                  |L29.58|
;;;2478     }
;;;2479       
;;;2480     /* Disable the Peripheral */
;;;2481     __HAL_TIM_DISABLE(htim);
00003a  6801              LDR      r1,[r0,#0]
00003c  6a0a              LDR      r2,[r1,#0x20]
00003e  4b10              LDR      r3,|L29.128|
000040  421a              TST      r2,r3
000042  d103              BNE      |L29.76|
000044  680a              LDR      r2,[r1,#0]
000046  0852              LSRS     r2,r2,#1
000048  0052              LSLS     r2,r2,#1
00004a  600a              STR      r2,[r1,#0]
                  |L29.76|
;;;2482     
;;;2483     /* Change the htim state */
;;;2484     htim->State = HAL_TIM_STATE_READY;
00004c  6384              STR      r4,[r0,#0x38]
;;;2485     
;;;2486     /* Return function status */
;;;2487     return HAL_OK;
;;;2488   }
00004e  bc70              POP      {r4-r6}
000050  2000              MOVS     r0,#0                 ;2487
000052  4770              BX       lr
                  |L29.84|
000054  6a11              LDR      r1,[r2,#0x20]
000056  0849              LSRS     r1,r1,#1
000058  0049              LSLS     r1,r1,#1
00005a  6211              STR      r1,[r2,#0x20]
00005c  6a11              LDR      r1,[r2,#0x20]
00005e  6211              STR      r1,[r2,#0x20]
000060  6801              LDR      r1,[r0,#0]            ;2461
000062  68ca              LDR      r2,[r1,#0xc]          ;2461
000064  439a              BICS     r2,r2,r3              ;2461
000066  e008              B        |L29.122|
                  |L29.104|
000068  6a13              LDR      r3,[r2,#0x20]         ;2461
00006a  2110              MOVS     r1,#0x10              ;2461
00006c  438b              BICS     r3,r3,r1              ;2461
00006e  6213              STR      r3,[r2,#0x20]         ;2461
000070  6a11              LDR      r1,[r2,#0x20]         ;2461
000072  6211              STR      r1,[r2,#0x20]         ;2461
000074  6801              LDR      r1,[r0,#0]            ;2468
000076  68ca              LDR      r2,[r1,#0xc]          ;2468
000078  43aa              BICS     r2,r2,r5              ;2468
                  |L29.122|
00007a  60ca              STR      r2,[r1,#0xc]          ;2468
00007c  e7dd              B        |L29.58|
;;;2489   
                          ENDP

00007e  0000              DCW      0x0000
                  |L29.128|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_ErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ErrorCallback PROC
;;;4162     */
;;;4163   __weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;4164   {
;;;4165     /* Prevent unused argument(s) compilation warning */
;;;4166     UNUSED(htim);
;;;4167   
;;;4168     /* NOTE : This function Should not be modified, when the callback is needed,
;;;4169               the HAL_TIM_ErrorCallback could be implemented in the user file
;;;4170      */
;;;4171   }
;;;4172   
                          ENDP


                          AREA ||i.HAL_TIM_GenerateEvent||, CODE, READONLY, ALIGN=1

                  HAL_TIM_GenerateEvent PROC
;;;3606   
;;;3607   HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
000000  6b42              LDR      r2,[r0,#0x34]
;;;3608   {
;;;3609     /* Check the parameters */
;;;3610     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;3611     assert_param(IS_TIM_EVENT_SOURCE(EventSource));
;;;3612   
;;;3613     /* Process Locked */
;;;3614     __HAL_LOCK(htim);
000002  2a01              CMP      r2,#1
000004  d009              BEQ      |L31.26|
000006  2201              MOVS     r2,#1
;;;3615   
;;;3616     /* Change the TIM state */
;;;3617     htim->State = HAL_TIM_STATE_BUSY;
000008  2302              MOVS     r3,#2
00000a  6383              STR      r3,[r0,#0x38]
;;;3618     
;;;3619     /* Set the event sources */
;;;3620     htim->Instance->EGR = EventSource;
00000c  6803              LDR      r3,[r0,#0]
00000e  6159              STR      r1,[r3,#0x14]
;;;3621   
;;;3622     /* Change the TIM state */
;;;3623     htim->State = HAL_TIM_STATE_READY;
000010  6382              STR      r2,[r0,#0x38]
;;;3624   
;;;3625     __HAL_UNLOCK(htim);
000012  2100              MOVS     r1,#0
;;;3626     
;;;3627     /* Return function status */
;;;3628     return HAL_OK;
000014  6341              STR      r1,[r0,#0x34]
000016  4608              MOV      r0,r1
;;;3629   }
000018  4770              BX       lr
                  |L31.26|
00001a  2002              MOVS     r0,#2                 ;3614
00001c  4770              BX       lr
;;;3630   
                          ENDP


                          AREA ||i.HAL_TIM_IC_CaptureCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_CaptureCallback PROC
;;;4117     */
;;;4118   __weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;4119   {
;;;4120     /* Prevent unused argument(s) compilation warning */
;;;4121     UNUSED(htim);
;;;4122   
;;;4123     /* NOTE : This function Should not be modified, when the callback is needed,
;;;4124               the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
;;;4125      */
;;;4126   }
;;;4127   
                          ENDP


                          AREA ||i.HAL_TIM_IC_ConfigChannel||, CODE, READONLY, ALIGN=2

                  HAL_TIM_IC_ConfigChannel PROC
;;;2894     */
;;;2895   HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
000000  b4f0              PUSH     {r4-r7}
;;;2896   {
;;;2897     /* Check the parameters */
;;;2898     assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;2899     assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
;;;2900     assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
;;;2901     assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
;;;2902     assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
;;;2903   
;;;2904     __HAL_LOCK(htim);
000002  6b43              LDR      r3,[r0,#0x34]
000004  2b01              CMP      r3,#1
000006  d03d              BEQ      |L33.132|
000008  2301              MOVS     r3,#1
;;;2905   
;;;2906     htim->State = HAL_TIM_STATE_BUSY;
00000a  6343              STR      r3,[r0,#0x34]
00000c  2302              MOVS     r3,#2
00000e  6383              STR      r3,[r0,#0x38]
;;;2907   
;;;2908     if (Channel == TIM_CHANNEL_1)
000010  2a00              CMP      r2,#0
000012  d03a              BEQ      |L33.138|
000014  2603              MOVS     r6,#3                 ;2904
000016  0236              LSLS     r6,r6,#8              ;2904
;;;2909     {
;;;2910       /* TI1 Configuration */
;;;2911       TIM_TI1_SetConfig(htim->Instance,
;;;2912                  sConfig->ICPolarity,
;;;2913                  sConfig->ICSelection,
;;;2914                  sConfig->ICFilter);
;;;2915   
;;;2916       /* Reset the IC1PSC Bits */
;;;2917       htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
;;;2918   
;;;2919       /* Set the IC1PSC value */
;;;2920       htim->Instance->CCMR1 |= sConfig->ICPrescaler;
;;;2921     }
;;;2922     else if (Channel == TIM_CHANNEL_2)
000018  2a04              CMP      r2,#4
00001a  d069              BEQ      |L33.240|
;;;2923     {
;;;2924       /* TI2 Configuration */
;;;2925       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;2926       
;;;2927       TIM_TI2_SetConfig(htim->Instance,
;;;2928                         sConfig->ICPolarity,
;;;2929                         sConfig->ICSelection,
;;;2930                         sConfig->ICFilter);
;;;2931                  
;;;2932       /* Reset the IC2PSC Bits */
;;;2933       htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
;;;2934   
;;;2935       /* Set the IC2PSC value */
;;;2936       htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
;;;2937     }
;;;2938     else if (Channel == TIM_CHANNEL_3)
00001c  2a08              CMP      r2,#8
00001e  d07d              BEQ      |L33.284|
;;;2939     {
;;;2940       /* TI3 Configuration */
;;;2941       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
;;;2942   
;;;2943       TIM_TI3_SetConfig(htim->Instance,
;;;2944                  sConfig->ICPolarity,
;;;2945                  sConfig->ICSelection,
;;;2946                  sConfig->ICFilter);
;;;2947                  
;;;2948       /* Reset the IC3PSC Bits */
;;;2949       htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
;;;2950   
;;;2951       /* Set the IC3PSC value */
;;;2952       htim->Instance->CCMR2 |= sConfig->ICPrescaler;
;;;2953     }
;;;2954     else
;;;2955     {
;;;2956       /* TI4 Configuration */
;;;2957       assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
;;;2958   
;;;2959       TIM_TI4_SetConfig(htim->Instance,
000020  684b              LDR      r3,[r1,#4]
000022  6802              LDR      r2,[r0,#0]
000024  469c              MOV      r12,r3
000026  7b0f              LDRB     r7,[r1,#0xc]
000028  680d              LDR      r5,[r1,#0]
00002a  6a13              LDR      r3,[r2,#0x20]
00002c  2401              MOVS     r4,#1
00002e  0324              LSLS     r4,r4,#12
000030  43a3              BICS     r3,r3,r4
000032  6213              STR      r3,[r2,#0x20]
000034  69d3              LDR      r3,[r2,#0x1c]
000036  6a14              LDR      r4,[r2,#0x20]
000038  43b3              BICS     r3,r3,r6
00003a  4666              MOV      r6,r12
00003c  0236              LSLS     r6,r6,#8
00003e  431e              ORRS     r6,r6,r3
000040  230f              MOVS     r3,#0xf
000042  031b              LSLS     r3,r3,#12
000044  439e              BICS     r6,r6,r3
000046  073b              LSLS     r3,r7,#28
000048  0c1b              LSRS     r3,r3,#16
00004a  4333              ORRS     r3,r3,r6
00004c  2605              MOVS     r6,#5
00004e  0376              LSLS     r6,r6,#13
000050  43b4              BICS     r4,r4,r6
000052  260a              MOVS     r6,#0xa
000054  4035              ANDS     r5,r5,r6
000056  032d              LSLS     r5,r5,#12
000058  4325              ORRS     r5,r5,r4
00005a  61d3              STR      r3,[r2,#0x1c]
00005c  6215              STR      r5,[r2,#0x20]
;;;2960                  sConfig->ICPolarity,
;;;2961                  sConfig->ICSelection,
;;;2962                  sConfig->ICFilter);
;;;2963   
;;;2964       /* Reset the IC4PSC Bits */
;;;2965       htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
00005e  6802              LDR      r2,[r0,#0]
000060  69d4              LDR      r4,[r2,#0x1c]
000062  2303              MOVS     r3,#3
000064  029b              LSLS     r3,r3,#10
000066  439c              BICS     r4,r4,r3
000068  61d4              STR      r4,[r2,#0x1c]
;;;2966   
;;;2967       /* Set the IC4PSC value */
;;;2968       htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
00006a  6802              LDR      r2,[r0,#0]
00006c  69d3              LDR      r3,[r2,#0x1c]
00006e  6889              LDR      r1,[r1,#8]
000070  0209              LSLS     r1,r1,#8
000072  430b              ORRS     r3,r3,r1
000074  61d3              STR      r3,[r2,#0x1c]
                  |L33.118|
;;;2969     }
;;;2970   
;;;2971     htim->State = HAL_TIM_STATE_READY;
000076  2101              MOVS     r1,#1
000078  6381              STR      r1,[r0,#0x38]
;;;2972   
;;;2973     __HAL_UNLOCK(htim);
00007a  2100              MOVS     r1,#0
;;;2974   
;;;2975     return HAL_OK;
00007c  6341              STR      r1,[r0,#0x34]
;;;2976   }
00007e  bcf0              POP      {r4-r7}
000080  4608              MOV      r0,r1                 ;2975
000082  4770              BX       lr
                  |L33.132|
000084  bcf0              POP      {r4-r7}
000086  2002              MOVS     r0,#2                 ;2904
000088  4770              BX       lr
                  |L33.138|
00008a  684c              LDR      r4,[r1,#4]            ;2911
00008c  6802              LDR      r2,[r0,#0]            ;2911
00008e  46a4              MOV      r12,r4                ;2911
000090  68ce              LDR      r6,[r1,#0xc]          ;2911
000092  680b              LDR      r3,[r1,#0]            ;2911
000094  6a14              LDR      r4,[r2,#0x20]         ;2911
000096  0864              LSRS     r4,r4,#1              ;2911
000098  0064              LSLS     r4,r4,#1              ;2911
00009a  6214              STR      r4,[r2,#0x20]         ;2911
00009c  6995              LDR      r5,[r2,#0x18]         ;2911
00009e  6a14              LDR      r4,[r2,#0x20]         ;2911
0000a0  2701              MOVS     r7,#1                 ;2911
0000a2  07bf              LSLS     r7,r7,#30             ;2911
0000a4  42ba              CMP      r2,r7                 ;2911
0000a6  d005              BEQ      |L33.180|
0000a8  4f3a              LDR      r7,|L33.404|
0000aa  42ba              CMP      r2,r7                 ;2911
0000ac  d002              BEQ      |L33.180|
0000ae  4f3a              LDR      r7,|L33.408|
0000b0  42ba              CMP      r2,r7                 ;2911
0000b2  d103              BNE      |L33.188|
                  |L33.180|
0000b4  08ad              LSRS     r5,r5,#2              ;2911
0000b6  00ad              LSLS     r5,r5,#2              ;2911
0000b8  4667              MOV      r7,r12                ;2911
0000ba  e002              B        |L33.194|
                  |L33.188|
0000bc  08ad              LSRS     r5,r5,#2              ;2911
0000be  00ad              LSLS     r5,r5,#2              ;2911
0000c0  2701              MOVS     r7,#1                 ;2911
                  |L33.194|
0000c2  433d              ORRS     r5,r5,r7              ;2911
0000c4  27f0              MOVS     r7,#0xf0              ;2911
0000c6  0736              LSLS     r6,r6,#28             ;2911
0000c8  43bd              BICS     r5,r5,r7              ;2911
0000ca  0e36              LSRS     r6,r6,#24             ;2911
0000cc  432e              ORRS     r6,r6,r5              ;2911
0000ce  250a              MOVS     r5,#0xa               ;2911
0000d0  43ac              BICS     r4,r4,r5              ;2911
0000d2  402b              ANDS     r3,r3,r5              ;2911
0000d4  4323              ORRS     r3,r3,r4              ;2911
0000d6  6196              STR      r6,[r2,#0x18]         ;2911
0000d8  6213              STR      r3,[r2,#0x20]         ;2911
0000da  6802              LDR      r2,[r0,#0]            ;2917
0000dc  6993              LDR      r3,[r2,#0x18]         ;2917
0000de  240c              MOVS     r4,#0xc               ;2917
0000e0  43a3              BICS     r3,r3,r4              ;2917
0000e2  6193              STR      r3,[r2,#0x18]         ;2917
0000e4  6802              LDR      r2,[r0,#0]            ;2920
0000e6  6993              LDR      r3,[r2,#0x18]         ;2920
0000e8  6889              LDR      r1,[r1,#8]            ;2920
0000ea  430b              ORRS     r3,r3,r1              ;2920
0000ec  6193              STR      r3,[r2,#0x18]         ;2920
0000ee  e7c2              B        |L33.118|
                  |L33.240|
0000f0  680d              LDR      r5,[r1,#0]            ;2927
0000f2  6802              LDR      r2,[r0,#0]            ;2927
0000f4  46ac              MOV      r12,r5                ;2927
0000f6  7b0d              LDRB     r5,[r1,#0xc]          ;2927
0000f8  684f              LDR      r7,[r1,#4]            ;2927
0000fa  6a13              LDR      r3,[r2,#0x20]         ;2927
0000fc  2410              MOVS     r4,#0x10              ;2927
0000fe  43a3              BICS     r3,r3,r4              ;2927
000100  6213              STR      r3,[r2,#0x20]         ;2927
000102  6993              LDR      r3,[r2,#0x18]         ;2927
000104  6a14              LDR      r4,[r2,#0x20]         ;2927
000106  43b3              BICS     r3,r3,r6              ;2927
000108  023e              LSLS     r6,r7,#8              ;2927
00010a  431e              ORRS     r6,r6,r3              ;2927
00010c  230f              MOVS     r3,#0xf               ;2927
00010e  031b              LSLS     r3,r3,#12             ;2927
000110  439e              BICS     r6,r6,r3              ;2927
000112  072b              LSLS     r3,r5,#28             ;2927
000114  0c1b              LSRS     r3,r3,#16             ;2927
000116  4333              ORRS     r3,r3,r6              ;2927
000118  26a0              MOVS     r6,#0xa0              ;2927
00011a  e000              B        |L33.286|
                  |L33.284|
00011c  e013              B        |L33.326|
                  |L33.286|
00011e  4665              MOV      r5,r12                ;2927
000120  012d              LSLS     r5,r5,#4              ;2927
000122  43b4              BICS     r4,r4,r6              ;2927
000124  4035              ANDS     r5,r5,r6              ;2927
000126  4325              ORRS     r5,r5,r4              ;2927
000128  6193              STR      r3,[r2,#0x18]         ;2927
00012a  6215              STR      r5,[r2,#0x20]         ;2927
00012c  6802              LDR      r2,[r0,#0]            ;2933
00012e  6993              LDR      r3,[r2,#0x18]         ;2933
000130  2403              MOVS     r4,#3                 ;2933
000132  02a4              LSLS     r4,r4,#10             ;2933
000134  43a3              BICS     r3,r3,r4              ;2933
000136  6193              STR      r3,[r2,#0x18]         ;2933
000138  6802              LDR      r2,[r0,#0]            ;2936
00013a  6993              LDR      r3,[r2,#0x18]         ;2936
00013c  6889              LDR      r1,[r1,#8]            ;2936
00013e  0209              LSLS     r1,r1,#8              ;2936
000140  430b              ORRS     r3,r3,r1              ;2936
000142  6193              STR      r3,[r2,#0x18]         ;2936
000144  e797              B        |L33.118|
                  |L33.326|
000146  6803              LDR      r3,[r0,#0]            ;2943
000148  7b0e              LDRB     r6,[r1,#0xc]          ;2943
00014a  684f              LDR      r7,[r1,#4]            ;2943
00014c  680d              LDR      r5,[r1,#0]            ;2943
00014e  6a1a              LDR      r2,[r3,#0x20]         ;2943
000150  24ff              MOVS     r4,#0xff              ;2943
000152  3401              ADDS     r4,#1                 ;2943
000154  43a2              BICS     r2,r2,r4              ;2943
000156  621a              STR      r2,[r3,#0x20]         ;2943
000158  69da              LDR      r2,[r3,#0x1c]         ;2943
00015a  6a1c              LDR      r4,[r3,#0x20]         ;2943
00015c  0892              LSRS     r2,r2,#2              ;2943
00015e  0092              LSLS     r2,r2,#2              ;2943
000160  433a              ORRS     r2,r2,r7              ;2943
000162  27f0              MOVS     r7,#0xf0              ;2943
000164  0736              LSLS     r6,r6,#28             ;2943
000166  43ba              BICS     r2,r2,r7              ;2943
000168  0e36              LSRS     r6,r6,#24             ;2943
00016a  4316              ORRS     r6,r6,r2              ;2943
00016c  2205              MOVS     r2,#5                 ;2943
00016e  0252              LSLS     r2,r2,#9              ;2943
000170  4394              BICS     r4,r4,r2              ;2943
000172  220a              MOVS     r2,#0xa               ;2943
000174  4015              ANDS     r5,r5,r2              ;2943
000176  022a              LSLS     r2,r5,#8              ;2943
000178  4322              ORRS     r2,r2,r4              ;2943
00017a  61de              STR      r6,[r3,#0x1c]         ;2943
00017c  621a              STR      r2,[r3,#0x20]         ;2943
00017e  6802              LDR      r2,[r0,#0]            ;2949
000180  69d4              LDR      r4,[r2,#0x1c]         ;2949
000182  230c              MOVS     r3,#0xc               ;2949
000184  439c              BICS     r4,r4,r3              ;2949
000186  61d4              STR      r4,[r2,#0x1c]         ;2949
000188  6802              LDR      r2,[r0,#0]            ;2952
00018a  69d3              LDR      r3,[r2,#0x1c]         ;2952
00018c  6889              LDR      r1,[r1,#8]            ;2952
00018e  430b              ORRS     r3,r3,r1              ;2952
000190  61d3              STR      r3,[r2,#0x1c]         ;2952
000192  e770              B        |L33.118|
;;;2977   
                          ENDP

                  |L33.404|
                          DCD      0x40010800
                  |L33.408|
                          DCD      0x40011400

                          AREA ||i.HAL_TIM_IC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_IC_DeInit PROC
;;;1475     */
;;;1476   HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;1477   {
000002  4604              MOV      r4,r0
;;;1478     /* Check the parameters */
;;;1479     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;1480   
;;;1481     htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  63a0              STR      r0,[r4,#0x38]
;;;1482   
;;;1483     /* Disable the TIM Peripheral Clock */
;;;1484     __HAL_TIM_DISABLE(htim);
000008  6820              LDR      r0,[r4,#0]
00000a  6a01              LDR      r1,[r0,#0x20]
00000c  4a06              LDR      r2,|L34.40|
00000e  4211              TST      r1,r2
000010  d103              BNE      |L34.26|
000012  6801              LDR      r1,[r0,#0]
000014  0849              LSRS     r1,r1,#1
000016  0049              LSLS     r1,r1,#1
000018  6001              STR      r1,[r0,#0]
                  |L34.26|
;;;1485   
;;;1486     /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
;;;1487     HAL_TIM_IC_MspDeInit(htim);
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       HAL_TIM_IC_MspDeInit
;;;1488   
;;;1489     /* Change TIM state */
;;;1490     htim->State = HAL_TIM_STATE_RESET;
000020  2000              MOVS     r0,#0
000022  63a0              STR      r0,[r4,#0x38]
;;;1491   
;;;1492     /* Release Lock */
;;;1493     __HAL_UNLOCK(htim);
000024  6360              STR      r0,[r4,#0x34]
;;;1494   
;;;1495     return HAL_OK;
;;;1496   }
000026  bd10              POP      {r4,pc}
;;;1497   
                          ENDP

                  |L34.40|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_IC_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_GetState PROC
;;;4226     */
;;;4227   HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim)
000000  6b80              LDR      r0,[r0,#0x38]
;;;4228   {
;;;4229     return htim->State;
;;;4230   }
000002  4770              BX       lr
;;;4231   
                          ENDP


                          AREA ||i.HAL_TIM_IC_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_Init PROC
;;;1434     */
;;;1435   HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
000000  2800              CMP      r0,#0
;;;1436   {
;;;1437     /* Check the TIM handle allocation */
;;;1438     if(htim == NULL)
000002  d101              BNE      |L36.8|
;;;1439     {
;;;1440       return HAL_ERROR;
000004  2001              MOVS     r0,#1
;;;1441     }
;;;1442   
;;;1443     /* Check the parameters */
;;;1444     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;1445     assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;1446     assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;1447     assert_param(IS_TIM_PERIOD(htim->Init.Period));
;;;1448     assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
;;;1449   
;;;1450     if(htim->State == HAL_TIM_STATE_RESET)
;;;1451     {
;;;1452       /* Allocate lock resource and initialize it */
;;;1453       htim->Lock = HAL_UNLOCKED;
;;;1454   
;;;1455       /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;1456       HAL_TIM_IC_MspInit(htim);
;;;1457     }
;;;1458   
;;;1459     /* Set the TIM state */
;;;1460     htim->State= HAL_TIM_STATE_BUSY;
;;;1461   
;;;1462     /* Init the base time for the input capture */
;;;1463     TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;1464   
;;;1465     /* Initialize the TIM state*/
;;;1466     htim->State= HAL_TIM_STATE_READY;
;;;1467   
;;;1468     return HAL_OK;
;;;1469   }
000006  4770              BX       lr
                  |L36.8|
000008  b510              PUSH     {r4,lr}               ;1436
00000a  4604              MOV      r4,r0                 ;1436
00000c  6b80              LDR      r0,[r0,#0x38]         ;1450
00000e  2800              CMP      r0,#0                 ;1450
000010  d103              BNE      |L36.26|
000012  6360              STR      r0,[r4,#0x34]         ;1456
000014  4620              MOV      r0,r4                 ;1456
000016  f7fffffe          BL       HAL_TIM_IC_MspInit
                  |L36.26|
00001a  2002              MOVS     r0,#2                 ;1460
00001c  63a0              STR      r0,[r4,#0x38]         ;1460
00001e  1d21              ADDS     r1,r4,#4              ;1463
000020  6820              LDR      r0,[r4,#0]            ;1463
000022  f7fffffe          BL       TIM_Base_SetConfig
000026  2001              MOVS     r0,#1                 ;1466
000028  63a0              STR      r0,[r4,#0x38]         ;1466
00002a  2000              MOVS     r0,#0                 ;1468
00002c  bd10              POP      {r4,pc}
;;;1470   
                          ENDP


                          AREA ||i.HAL_TIM_IC_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_MspDeInit PROC
;;;1517     */
;;;1518   __weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1519   {
;;;1520     /* Prevent unused argument(s) compilation warning */
;;;1521     UNUSED(htim);
;;;1522   
;;;1523     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1524               the HAL_TIM_IC_MspDeInit could be implemented in the user file
;;;1525      */
;;;1526   }
;;;1527   /**
                          ENDP


                          AREA ||i.HAL_TIM_IC_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_MspInit PROC
;;;1502     */
;;;1503   __weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1504   {
;;;1505     /* Prevent unused argument(s) compilation warning */
;;;1506     UNUSED(htim);
;;;1507   
;;;1508     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1509               the HAL_TIM_IC_MspInit could be implemented in the user file
;;;1510      */
;;;1511   }
;;;1512   
                          ENDP


                          AREA ||i.HAL_TIM_IC_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_Start PROC
;;;1537     */
;;;1538   HAL_StatusTypeDef HAL_TIM_IC_Start (TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b410              PUSH     {r4}
000002  2401              MOVS     r4,#1
000004  4622              MOV      r2,r4
000006  6803              LDR      r3,[r0,#0]
000008  408a              LSLS     r2,r2,r1
00000a  6a19              LDR      r1,[r3,#0x20]
00000c  4391              BICS     r1,r1,r2
00000e  6219              STR      r1,[r3,#0x20]
000010  6a19              LDR      r1,[r3,#0x20]
000012  4311              ORRS     r1,r1,r2
000014  6219              STR      r1,[r3,#0x20]
;;;1539   {
;;;1540     /* Check the parameters */
;;;1541     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1542   
;;;1543     /* Enable the Input Capture channel */
;;;1544     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;1545   
;;;1546     /* Enable the Peripheral */
;;;1547     __HAL_TIM_ENABLE(htim);
000016  6800              LDR      r0,[r0,#0]
000018  6801              LDR      r1,[r0,#0]
00001a  4321              ORRS     r1,r1,r4
00001c  6001              STR      r1,[r0,#0]
;;;1548   
;;;1549     /* Return function status */
;;;1550     return HAL_OK;
;;;1551   }
00001e  bc10              POP      {r4}
000020  2000              MOVS     r0,#0                 ;1550
000022  4770              BX       lr
;;;1552   
                          ENDP


                          AREA ||i.HAL_TIM_IC_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_IC_Start_DMA PROC
;;;1710     */
;;;1711   HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;1712   {
000002  4604              MOV      r4,r0
;;;1713     /* Check the parameters */
;;;1714     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1715     assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
;;;1716   
;;;1717     if((htim->State == HAL_TIM_STATE_BUSY))
000004  6b80              LDR      r0,[r0,#0x38]
000006  460d              MOV      r5,r1                 ;1712
000008  2802              CMP      r0,#2
00000a  d006              BEQ      |L40.26|
;;;1718     {
;;;1719        return HAL_BUSY;
;;;1720     }
;;;1721     else if((htim->State == HAL_TIM_STATE_READY))
00000c  6ba0              LDR      r0,[r4,#0x38]
00000e  2801              CMP      r0,#1
000010  d106              BNE      |L40.32|
;;;1722     {
;;;1723       if((pData == 0U ) && (Length > 0U))
000012  2a00              CMP      r2,#0
000014  d102              BNE      |L40.28|
000016  2b00              CMP      r3,#0
000018  d000              BEQ      |L40.28|
                  |L40.26|
;;;1724       {
;;;1725         return HAL_ERROR;
;;;1726       }
;;;1727       else
;;;1728       {
;;;1729         htim->State = HAL_TIM_STATE_BUSY;
;;;1730       }
;;;1731     }
;;;1732   
;;;1733     switch (Channel)
;;;1734     {
;;;1735       case TIM_CHANNEL_1:
;;;1736       {
;;;1737         /* Set the DMA Period elapsed callback */
;;;1738         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
;;;1739   
;;;1740         /* Set the DMA error callback */
;;;1741         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;1742   
;;;1743         /* Enable the DMA Stream */
;;;1744         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
;;;1745   
;;;1746         /* Enable the TIM Capture/Compare 1 DMA request */
;;;1747         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;1748       }
;;;1749       break;
;;;1750   
;;;1751       case TIM_CHANNEL_2:
;;;1752       {
;;;1753         /* Set the DMA Period elapsed callback */
;;;1754         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
;;;1755   
;;;1756         /* Set the DMA error callback */
;;;1757         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;1758   
;;;1759         /* Enable the DMA Stream */
;;;1760         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
;;;1761   
;;;1762         /* Enable the TIM Capture/Compare 2  DMA request */
;;;1763         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;1764       }
;;;1765       break;
;;;1766   
;;;1767       case TIM_CHANNEL_3:
;;;1768       {
;;;1769         /* Set the DMA Period elapsed callback */
;;;1770         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
;;;1771   
;;;1772         /* Set the DMA error callback */
;;;1773         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;1774   
;;;1775         /* Enable the DMA Stream */
;;;1776         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
;;;1777   
;;;1778         /* Enable the TIM Capture/Compare 3  DMA request */
;;;1779         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;1780       }
;;;1781       break;
;;;1782   
;;;1783       case TIM_CHANNEL_4:
;;;1784       {
;;;1785         /* Set the DMA Period elapsed callback */
;;;1786         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
;;;1787   
;;;1788         /* Set the DMA error callback */
;;;1789         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;1790   
;;;1791         /* Enable the DMA Stream */
;;;1792         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
;;;1793   
;;;1794         /* Enable the TIM Capture/Compare 4  DMA request */
;;;1795         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;1796       }
;;;1797       break;
;;;1798   
;;;1799       default:
;;;1800       break;
;;;1801     }
;;;1802   
;;;1803     /* Enable the Input Capture channel */
;;;1804     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;1805   
;;;1806     /* Enable the Peripheral */
;;;1807     __HAL_TIM_ENABLE(htim);
;;;1808   
;;;1809     /* Return function status */
;;;1810     return HAL_OK;
;;;1811   }
00001a  bd70              POP      {r4-r6,pc}
                  |L40.28|
00001c  2002              MOVS     r0,#2                 ;1729
00001e  63a0              STR      r0,[r4,#0x38]         ;1729
                  |L40.32|
000020  482c              LDR      r0,|L40.212|
000022  492d              LDR      r1,|L40.216|
000024  2d00              CMP      r5,#0                 ;1733
000026  d006              BEQ      |L40.54|
000028  2d04              CMP      r5,#4                 ;1733
00002a  d014              BEQ      |L40.86|
00002c  2d08              CMP      r5,#8                 ;1733
00002e  d022              BEQ      |L40.118|
000030  2d0c              CMP      r5,#0xc               ;1733
000032  d13f              BNE      |L40.180|
000034  e02f              B        |L40.150|
                  |L40.54|
000036  69e6              LDR      r6,[r4,#0x1c]         ;1738
000038  6330              STR      r0,[r6,#0x30]         ;1741
00003a  69e0              LDR      r0,[r4,#0x1c]         ;1741
00003c  6381              STR      r1,[r0,#0x38]         ;1744
00003e  6821              LDR      r1,[r4,#0]            ;1744
000040  69e0              LDR      r0,[r4,#0x1c]         ;1744
000042  3134              ADDS     r1,r1,#0x34           ;1744
000044  f7fffffe          BL       HAL_DMA_Start_IT
000048  6820              LDR      r0,[r4,#0]            ;1747
00004a  68c1              LDR      r1,[r0,#0xc]          ;1747
00004c  2201              MOVS     r2,#1                 ;1747
00004e  0252              LSLS     r2,r2,#9              ;1747
000050  4311              ORRS     r1,r1,r2              ;1747
000052  60c1              STR      r1,[r0,#0xc]          ;1747
000054  e02e              B        |L40.180|
                  |L40.86|
000056  6a26              LDR      r6,[r4,#0x20]         ;1754
000058  6330              STR      r0,[r6,#0x30]         ;1757
00005a  6a20              LDR      r0,[r4,#0x20]         ;1757
00005c  6381              STR      r1,[r0,#0x38]         ;1760
00005e  6821              LDR      r1,[r4,#0]            ;1760
000060  6a20              LDR      r0,[r4,#0x20]         ;1760
000062  3138              ADDS     r1,r1,#0x38           ;1760
000064  f7fffffe          BL       HAL_DMA_Start_IT
000068  6820              LDR      r0,[r4,#0]            ;1763
00006a  68c1              LDR      r1,[r0,#0xc]          ;1763
00006c  2201              MOVS     r2,#1                 ;1763
00006e  0292              LSLS     r2,r2,#10             ;1763
000070  4311              ORRS     r1,r1,r2              ;1763
000072  60c1              STR      r1,[r0,#0xc]          ;1763
000074  e01e              B        |L40.180|
                  |L40.118|
000076  6a66              LDR      r6,[r4,#0x24]         ;1770
000078  6330              STR      r0,[r6,#0x30]         ;1773
00007a  6a60              LDR      r0,[r4,#0x24]         ;1773
00007c  6381              STR      r1,[r0,#0x38]         ;1776
00007e  6821              LDR      r1,[r4,#0]            ;1776
000080  6a60              LDR      r0,[r4,#0x24]         ;1776
000082  313c              ADDS     r1,r1,#0x3c           ;1776
000084  f7fffffe          BL       HAL_DMA_Start_IT
000088  6820              LDR      r0,[r4,#0]            ;1779
00008a  68c1              LDR      r1,[r0,#0xc]          ;1779
00008c  2201              MOVS     r2,#1                 ;1779
00008e  02d2              LSLS     r2,r2,#11             ;1779
000090  4311              ORRS     r1,r1,r2              ;1779
000092  60c1              STR      r1,[r0,#0xc]          ;1779
000094  e00e              B        |L40.180|
                  |L40.150|
000096  6aa6              LDR      r6,[r4,#0x28]         ;1786
000098  6330              STR      r0,[r6,#0x30]         ;1789
00009a  6aa0              LDR      r0,[r4,#0x28]         ;1789
00009c  6381              STR      r1,[r0,#0x38]         ;1792
00009e  6821              LDR      r1,[r4,#0]            ;1792
0000a0  6aa0              LDR      r0,[r4,#0x28]         ;1792
0000a2  3140              ADDS     r1,r1,#0x40           ;1792
0000a4  f7fffffe          BL       HAL_DMA_Start_IT
0000a8  6820              LDR      r0,[r4,#0]            ;1795
0000aa  68c1              LDR      r1,[r0,#0xc]          ;1795
0000ac  2201              MOVS     r2,#1                 ;1795
0000ae  0312              LSLS     r2,r2,#12             ;1795
0000b0  4311              ORRS     r1,r1,r2              ;1795
0000b2  60c1              STR      r1,[r0,#0xc]          ;1795
                  |L40.180|
0000b4  6821              LDR      r1,[r4,#0]            ;1795
0000b6  2201              MOVS     r2,#1                 ;1795
0000b8  4610              MOV      r0,r2                 ;1795
0000ba  6a0b              LDR      r3,[r1,#0x20]         ;1795
0000bc  40a8              LSLS     r0,r0,r5              ;1795
0000be  4383              BICS     r3,r3,r0              ;1795
0000c0  620b              STR      r3,[r1,#0x20]         ;1795
0000c2  6a0b              LDR      r3,[r1,#0x20]         ;1795
0000c4  4303              ORRS     r3,r3,r0              ;1795
0000c6  620b              STR      r3,[r1,#0x20]         ;1795
0000c8  6820              LDR      r0,[r4,#0]            ;1807
0000ca  6801              LDR      r1,[r0,#0]            ;1807
0000cc  4311              ORRS     r1,r1,r2              ;1807
0000ce  6001              STR      r1,[r0,#0]            ;1807
0000d0  2000              MOVS     r0,#0                 ;1810
0000d2  bd70              POP      {r4-r6,pc}
;;;1812   
                          ENDP

                  |L40.212|
                          DCD      TIM_DMACaptureCplt
                  |L40.216|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIM_IC_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_Start_IT PROC
;;;1589     */
;;;1590   HAL_StatusTypeDef HAL_TIM_IC_Start_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b410              PUSH     {r4}
;;;1591   {
;;;1592     /* Check the parameters */
;;;1593     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1594   
;;;1595     switch (Channel)
000002  6802              LDR      r2,[r0,#0]
000004  2900              CMP      r1,#0
000006  d006              BEQ      |L41.22|
000008  2904              CMP      r1,#4
00000a  d009              BEQ      |L41.32|
00000c  2908              CMP      r1,#8
00000e  d00c              BEQ      |L41.42|
000010  290c              CMP      r1,#0xc
000012  d113              BNE      |L41.60|
000014  e00e              B        |L41.52|
                  |L41.22|
;;;1596     {
;;;1597       case TIM_CHANNEL_1:
;;;1598       {
;;;1599         /* Enable the TIM Capture/Compare 1 interrupt */
;;;1600         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000016  68d3              LDR      r3,[r2,#0xc]
000018  2402              MOVS     r4,#2
00001a  4323              ORRS     r3,r3,r4
00001c  60d3              STR      r3,[r2,#0xc]
;;;1601       }
;;;1602       break;
00001e  e00d              B        |L41.60|
                  |L41.32|
;;;1603   
;;;1604       case TIM_CHANNEL_2:
;;;1605       {
;;;1606         /* Enable the TIM Capture/Compare 2 interrupt */
;;;1607         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000020  68d3              LDR      r3,[r2,#0xc]
000022  2404              MOVS     r4,#4
000024  4323              ORRS     r3,r3,r4
000026  60d3              STR      r3,[r2,#0xc]
;;;1608       }
;;;1609       break;
000028  e008              B        |L41.60|
                  |L41.42|
;;;1610   
;;;1611       case TIM_CHANNEL_3:
;;;1612       {
;;;1613         /* Enable the TIM Capture/Compare 3 interrupt */
;;;1614         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
00002a  68d3              LDR      r3,[r2,#0xc]
00002c  2408              MOVS     r4,#8
00002e  4323              ORRS     r3,r3,r4
000030  60d3              STR      r3,[r2,#0xc]
;;;1615       }
;;;1616       break;
000032  e003              B        |L41.60|
                  |L41.52|
;;;1617   
;;;1618       case TIM_CHANNEL_4:
;;;1619       {
;;;1620         /* Enable the TIM Capture/Compare 4 interrupt */
;;;1621         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000034  68d3              LDR      r3,[r2,#0xc]
000036  2410              MOVS     r4,#0x10
000038  4323              ORRS     r3,r3,r4
00003a  60d3              STR      r3,[r2,#0xc]
                  |L41.60|
00003c  2401              MOVS     r4,#1
00003e  4622              MOV      r2,r4
000040  6803              LDR      r3,[r0,#0]
000042  408a              LSLS     r2,r2,r1
000044  6a19              LDR      r1,[r3,#0x20]
000046  4391              BICS     r1,r1,r2
000048  6219              STR      r1,[r3,#0x20]
00004a  6a19              LDR      r1,[r3,#0x20]
00004c  4311              ORRS     r1,r1,r2
00004e  6219              STR      r1,[r3,#0x20]
;;;1622       }
;;;1623       break;
;;;1624   
;;;1625       default:
;;;1626       break;
;;;1627     }
;;;1628     /* Enable the Input Capture channel */
;;;1629     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;1630   
;;;1631     /* Enable the Peripheral */
;;;1632     __HAL_TIM_ENABLE(htim);
000050  6800              LDR      r0,[r0,#0]
000052  6801              LDR      r1,[r0,#0]
000054  4321              ORRS     r1,r1,r4
000056  6001              STR      r1,[r0,#0]
;;;1633   
;;;1634     /* Return function status */
;;;1635     return HAL_OK;
;;;1636   }
000058  bc10              POP      {r4}
00005a  2000              MOVS     r0,#0                 ;1635
00005c  4770              BX       lr
;;;1637   
                          ENDP


                          AREA ||i.HAL_TIM_IC_Stop||, CODE, READONLY, ALIGN=2

                  HAL_TIM_IC_Stop PROC
;;;1563     */
;;;1564   HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b430              PUSH     {r4,r5}
000002  6802              LDR      r2,[r0,#0]
;;;1565   {
;;;1566     /* Check the parameters */
;;;1567     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1568   
;;;1569     /* Disable the Input Capture channel */
;;;1570     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
000004  2400              MOVS     r4,#0
000006  2301              MOVS     r3,#1
000008  6a15              LDR      r5,[r2,#0x20]
00000a  408b              LSLS     r3,r3,r1
00000c  439d              BICS     r5,r5,r3
00000e  6215              STR      r5,[r2,#0x20]
000010  6a13              LDR      r3,[r2,#0x20]
000012  408c              LSLS     r4,r4,r1
000014  4323              ORRS     r3,r3,r4
000016  6213              STR      r3,[r2,#0x20]
;;;1571   
;;;1572     /* Disable the Peripheral */
;;;1573     __HAL_TIM_DISABLE(htim);
000018  6800              LDR      r0,[r0,#0]
00001a  6a01              LDR      r1,[r0,#0x20]
00001c  4a04              LDR      r2,|L42.48|
00001e  4211              TST      r1,r2
000020  d103              BNE      |L42.42|
000022  6801              LDR      r1,[r0,#0]
000024  0849              LSRS     r1,r1,#1
000026  0049              LSLS     r1,r1,#1
000028  6001              STR      r1,[r0,#0]
                  |L42.42|
;;;1574   
;;;1575     /* Return function status */
;;;1576     return HAL_OK;
;;;1577   }
00002a  bc30              POP      {r4,r5}
00002c  2000              MOVS     r0,#0                 ;1576
00002e  4770              BX       lr
;;;1578   
                          ENDP

                  |L42.48|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_IC_Stop_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_IC_Stop_DMA PROC
;;;1823     */
;;;1824   HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b470              PUSH     {r4-r6}
;;;1825   {
;;;1826     /* Check the parameters */
;;;1827     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1828     assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
;;;1829   
;;;1830     switch (Channel)
000002  6802              LDR      r2,[r0,#0]
000004  2900              CMP      r1,#0
000006  d006              BEQ      |L43.22|
000008  2904              CMP      r1,#4
00000a  d00a              BEQ      |L43.34|
00000c  2908              CMP      r1,#8
00000e  d00e              BEQ      |L43.46|
000010  290c              CMP      r1,#0xc
000012  d117              BNE      |L43.68|
000014  e011              B        |L43.58|
                  |L43.22|
;;;1831     {
;;;1832       case TIM_CHANNEL_1:
;;;1833       {
;;;1834         /* Disable the TIM Capture/Compare 1 DMA request */
;;;1835         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000016  68d3              LDR      r3,[r2,#0xc]
000018  2401              MOVS     r4,#1
00001a  0264              LSLS     r4,r4,#9
00001c  43a3              BICS     r3,r3,r4
00001e  60d3              STR      r3,[r2,#0xc]
;;;1836       }
;;;1837       break;
000020  e010              B        |L43.68|
                  |L43.34|
;;;1838   
;;;1839       case TIM_CHANNEL_2:
;;;1840       {
;;;1841         /* Disable the TIM Capture/Compare 2 DMA request */
;;;1842         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000022  68d3              LDR      r3,[r2,#0xc]
000024  2401              MOVS     r4,#1
000026  02a4              LSLS     r4,r4,#10
000028  43a3              BICS     r3,r3,r4
00002a  60d3              STR      r3,[r2,#0xc]
;;;1843       }
;;;1844       break;
00002c  e00a              B        |L43.68|
                  |L43.46|
;;;1845   
;;;1846       case TIM_CHANNEL_3:
;;;1847       {
;;;1848         /* Disable the TIM Capture/Compare 3  DMA request */
;;;1849         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
00002e  68d3              LDR      r3,[r2,#0xc]
000030  2401              MOVS     r4,#1
000032  02e4              LSLS     r4,r4,#11
000034  43a3              BICS     r3,r3,r4
000036  60d3              STR      r3,[r2,#0xc]
;;;1850       }
;;;1851       break;
000038  e004              B        |L43.68|
                  |L43.58|
;;;1852   
;;;1853       case TIM_CHANNEL_4:
;;;1854       {
;;;1855         /* Disable the TIM Capture/Compare 4  DMA request */
;;;1856         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
00003a  68d3              LDR      r3,[r2,#0xc]
00003c  2401              MOVS     r4,#1
00003e  0324              LSLS     r4,r4,#12
000040  43a3              BICS     r3,r3,r4
000042  60d3              STR      r3,[r2,#0xc]
                  |L43.68|
000044  6803              LDR      r3,[r0,#0]
000046  2401              MOVS     r4,#1
;;;1857       }
;;;1858       break;
;;;1859   
;;;1860       default:
;;;1861       break;
;;;1862     }
;;;1863   
;;;1864     /* Disable the Input Capture channel */
;;;1865     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
000048  2500              MOVS     r5,#0
00004a  4622              MOV      r2,r4
00004c  6a1e              LDR      r6,[r3,#0x20]
00004e  408a              LSLS     r2,r2,r1
000050  4396              BICS     r6,r6,r2
000052  621e              STR      r6,[r3,#0x20]
000054  6a1a              LDR      r2,[r3,#0x20]
000056  408d              LSLS     r5,r5,r1
000058  432a              ORRS     r2,r2,r5
00005a  621a              STR      r2,[r3,#0x20]
;;;1866   
;;;1867     /* Disable the Peripheral */
;;;1868     __HAL_TIM_DISABLE(htim);
00005c  6801              LDR      r1,[r0,#0]
00005e  6a0a              LDR      r2,[r1,#0x20]
000060  4b04              LDR      r3,|L43.116|
000062  421a              TST      r2,r3
000064  d102              BNE      |L43.108|
000066  680a              LDR      r2,[r1,#0]
000068  43a2              BICS     r2,r2,r4
00006a  600a              STR      r2,[r1,#0]
                  |L43.108|
;;;1869   
;;;1870     /* Change the htim state */
;;;1871     htim->State = HAL_TIM_STATE_READY;
00006c  6384              STR      r4,[r0,#0x38]
;;;1872   
;;;1873     /* Return function status */
;;;1874     return HAL_OK;
;;;1875   }
00006e  bc70              POP      {r4-r6}
000070  2000              MOVS     r0,#0                 ;1874
000072  4770              BX       lr
;;;1876   
                          ENDP

                  |L43.116|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_IC_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIM_IC_Stop_IT PROC
;;;1648     */
;;;1649   HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b430              PUSH     {r4,r5}
;;;1650   {
;;;1651     /* Check the parameters */
;;;1652     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1653   
;;;1654     switch (Channel)
000002  6802              LDR      r2,[r0,#0]
000004  2900              CMP      r1,#0
000006  d006              BEQ      |L44.22|
000008  2904              CMP      r1,#4
00000a  d009              BEQ      |L44.32|
00000c  2908              CMP      r1,#8
00000e  d00c              BEQ      |L44.42|
000010  290c              CMP      r1,#0xc
000012  d113              BNE      |L44.60|
000014  e00e              B        |L44.52|
                  |L44.22|
;;;1655     {
;;;1656       case TIM_CHANNEL_1:
;;;1657       {
;;;1658         /* Disable the TIM Capture/Compare 1 interrupt */
;;;1659         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000016  68d3              LDR      r3,[r2,#0xc]
000018  2402              MOVS     r4,#2
00001a  43a3              BICS     r3,r3,r4
00001c  60d3              STR      r3,[r2,#0xc]
;;;1660       }
;;;1661       break;
00001e  e00d              B        |L44.60|
                  |L44.32|
;;;1662   
;;;1663       case TIM_CHANNEL_2:
;;;1664       {
;;;1665         /* Disable the TIM Capture/Compare 2 interrupt */
;;;1666         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000020  68d3              LDR      r3,[r2,#0xc]
000022  2404              MOVS     r4,#4
000024  43a3              BICS     r3,r3,r4
000026  60d3              STR      r3,[r2,#0xc]
;;;1667       }
;;;1668       break;
000028  e008              B        |L44.60|
                  |L44.42|
;;;1669   
;;;1670       case TIM_CHANNEL_3:
;;;1671       {
;;;1672         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1673         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
00002a  68d3              LDR      r3,[r2,#0xc]
00002c  2408              MOVS     r4,#8
00002e  43a3              BICS     r3,r3,r4
000030  60d3              STR      r3,[r2,#0xc]
;;;1674       }
;;;1675       break;
000032  e003              B        |L44.60|
                  |L44.52|
;;;1676   
;;;1677       case TIM_CHANNEL_4:
;;;1678       {
;;;1679         /* Disable the TIM Capture/Compare 4 interrupt */
;;;1680         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
000034  68d3              LDR      r3,[r2,#0xc]
000036  2410              MOVS     r4,#0x10
000038  43a3              BICS     r3,r3,r4
00003a  60d3              STR      r3,[r2,#0xc]
                  |L44.60|
00003c  6802              LDR      r2,[r0,#0]
;;;1681       }
;;;1682       break;
;;;1683   
;;;1684       default:
;;;1685       break;
;;;1686     }
;;;1687   
;;;1688     /* Disable the Input Capture channel */
;;;1689     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
00003e  2400              MOVS     r4,#0
000040  2301              MOVS     r3,#1
000042  6a15              LDR      r5,[r2,#0x20]
000044  408b              LSLS     r3,r3,r1
000046  439d              BICS     r5,r5,r3
000048  6215              STR      r5,[r2,#0x20]
00004a  6a13              LDR      r3,[r2,#0x20]
00004c  408c              LSLS     r4,r4,r1
00004e  4323              ORRS     r3,r3,r4
000050  6213              STR      r3,[r2,#0x20]
;;;1690   
;;;1691     /* Disable the Peripheral */
;;;1692     __HAL_TIM_DISABLE(htim);
000052  6800              LDR      r0,[r0,#0]
000054  6a01              LDR      r1,[r0,#0x20]
000056  4a05              LDR      r2,|L44.108|
000058  4211              TST      r1,r2
00005a  d103              BNE      |L44.100|
00005c  6801              LDR      r1,[r0,#0]
00005e  0849              LSRS     r1,r1,#1
000060  0049              LSLS     r1,r1,#1
000062  6001              STR      r1,[r0,#0]
                  |L44.100|
;;;1693   
;;;1694     /* Return function status */
;;;1695     return HAL_OK;
;;;1696   }
000064  bc30              POP      {r4,r5}
000066  2000              MOVS     r0,#0                 ;1695
000068  4770              BX       lr
;;;1697   
                          ENDP

00006a  0000              DCW      0x0000
                  |L44.108|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IRQHandler PROC
;;;2682     */
;;;2683   void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
000000  b570              PUSH     {r4-r6,lr}
;;;2684   {
000002  4604              MOV      r4,r0
;;;2685     /* Capture compare 1 event */
;;;2686     if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
000004  6800              LDR      r0,[r0,#0]
000006  6901              LDR      r1,[r0,#0x10]
000008  2500              MOVS     r5,#0
00000a  43c9              MVNS     r1,r1
00000c  0789              LSLS     r1,r1,#30
00000e  2900              CMP      r1,#0
000010  db15              BLT      |L45.62|
;;;2687     {
;;;2688       if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
000012  68c1              LDR      r1,[r0,#0xc]
000014  43c9              MVNS     r1,r1
000016  0789              LSLS     r1,r1,#30
000018  d411              BMI      |L45.62|
;;;2689       {
;;;2690         {
;;;2691           __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
00001a  1ee9              SUBS     r1,r5,#3
00001c  6101              STR      r1,[r0,#0x10]
;;;2692           htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
00001e  2001              MOVS     r0,#1
;;;2693   
;;;2694           /* Input capture event */
;;;2695           if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
000020  6160              STR      r0,[r4,#0x14]
000022  6820              LDR      r0,[r4,#0]
000024  6980              LDR      r0,[r0,#0x18]
000026  0780              LSLS     r0,r0,#30
;;;2696           {
;;;2697             HAL_TIM_IC_CaptureCallback(htim);
;;;2698           }
;;;2699           /* Output compare event */
;;;2700           else
;;;2701           {
;;;2702             HAL_TIM_OC_DelayElapsedCallback(htim);
000028  4620              MOV      r0,r4
00002a  d002              BEQ      |L45.50|
00002c  f7fffffe          BL       HAL_TIM_IC_CaptureCallback
000030  e004              B        |L45.60|
                  |L45.50|
000032  f7fffffe          BL       HAL_TIM_OC_DelayElapsedCallback
;;;2703             HAL_TIM_PWM_PulseFinishedCallback(htim);
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       HAL_TIM_PWM_PulseFinishedCallback
                  |L45.60|
;;;2704           }
;;;2705           htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
00003c  6165              STR      r5,[r4,#0x14]
                  |L45.62|
;;;2706         }
;;;2707       }
;;;2708     }
;;;2709     /* Capture compare 2 event */
;;;2710     if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
00003e  6820              LDR      r0,[r4,#0]
000040  6901              LDR      r1,[r0,#0x10]
000042  43c9              MVNS     r1,r1
000044  0749              LSLS     r1,r1,#29
000046  d417              BMI      |L45.120|
;;;2711     {
;;;2712       if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
000048  68c1              LDR      r1,[r0,#0xc]
00004a  43c9              MVNS     r1,r1
00004c  0749              LSLS     r1,r1,#29
00004e  d413              BMI      |L45.120|
;;;2713       {
;;;2714         __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
000050  2104              MOVS     r1,#4
000052  43c9              MVNS     r1,r1
000054  6101              STR      r1,[r0,#0x10]
;;;2715         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
000056  2002              MOVS     r0,#2
;;;2716         /* Input capture event */
;;;2717         if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
000058  6160              STR      r0,[r4,#0x14]
00005a  6820              LDR      r0,[r4,#0]
00005c  6980              LDR      r0,[r0,#0x18]
00005e  0580              LSLS     r0,r0,#22
000060  0f80              LSRS     r0,r0,#30
;;;2718         {
;;;2719           HAL_TIM_IC_CaptureCallback(htim);
;;;2720         }
;;;2721         /* Output compare event */
;;;2722         else
;;;2723         {
;;;2724           HAL_TIM_OC_DelayElapsedCallback(htim);
000062  4620              MOV      r0,r4
000064  d002              BEQ      |L45.108|
000066  f7fffffe          BL       HAL_TIM_IC_CaptureCallback
00006a  e004              B        |L45.118|
                  |L45.108|
00006c  f7fffffe          BL       HAL_TIM_OC_DelayElapsedCallback
;;;2725           HAL_TIM_PWM_PulseFinishedCallback(htim);
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       HAL_TIM_PWM_PulseFinishedCallback
                  |L45.118|
;;;2726         }
;;;2727         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
000076  6165              STR      r5,[r4,#0x14]
                  |L45.120|
;;;2728       }
;;;2729     }
;;;2730     /* Capture compare 3 event */
;;;2731     if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
000078  6820              LDR      r0,[r4,#0]
00007a  6901              LDR      r1,[r0,#0x10]
00007c  43c9              MVNS     r1,r1
00007e  0709              LSLS     r1,r1,#28
000080  d416              BMI      |L45.176|
;;;2732     {
;;;2733       if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
000082  68c1              LDR      r1,[r0,#0xc]
000084  43c9              MVNS     r1,r1
000086  0709              LSLS     r1,r1,#28
000088  d412              BMI      |L45.176|
;;;2734       {
;;;2735         __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
00008a  2108              MOVS     r1,#8
00008c  43c9              MVNS     r1,r1
00008e  6101              STR      r1,[r0,#0x10]
;;;2736         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
000090  2004              MOVS     r0,#4
;;;2737         /* Input capture event */
;;;2738         if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
000092  6160              STR      r0,[r4,#0x14]
000094  6820              LDR      r0,[r4,#0]
000096  69c0              LDR      r0,[r0,#0x1c]
000098  0780              LSLS     r0,r0,#30
;;;2739         {
;;;2740           HAL_TIM_IC_CaptureCallback(htim);
;;;2741         }
;;;2742         /* Output compare event */
;;;2743         else
;;;2744         {
;;;2745           HAL_TIM_OC_DelayElapsedCallback(htim);
00009a  4620              MOV      r0,r4
00009c  d002              BEQ      |L45.164|
00009e  f7fffffe          BL       HAL_TIM_IC_CaptureCallback
0000a2  e004              B        |L45.174|
                  |L45.164|
0000a4  f7fffffe          BL       HAL_TIM_OC_DelayElapsedCallback
;;;2746           HAL_TIM_PWM_PulseFinishedCallback(htim);
0000a8  4620              MOV      r0,r4
0000aa  f7fffffe          BL       HAL_TIM_PWM_PulseFinishedCallback
                  |L45.174|
;;;2747         }
;;;2748         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
0000ae  6165              STR      r5,[r4,#0x14]
                  |L45.176|
;;;2749       }
;;;2750     }
;;;2751     /* Capture compare 4 event */
;;;2752     if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
0000b0  6820              LDR      r0,[r4,#0]
0000b2  6901              LDR      r1,[r0,#0x10]
0000b4  43c9              MVNS     r1,r1
0000b6  06c9              LSLS     r1,r1,#27
0000b8  d417              BMI      |L45.234|
;;;2753     {
;;;2754       if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
0000ba  68c1              LDR      r1,[r0,#0xc]
0000bc  43c9              MVNS     r1,r1
0000be  06c9              LSLS     r1,r1,#27
0000c0  d413              BMI      |L45.234|
;;;2755       {
;;;2756         __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
0000c2  2110              MOVS     r1,#0x10
0000c4  43c9              MVNS     r1,r1
0000c6  6101              STR      r1,[r0,#0x10]
;;;2757         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
0000c8  2008              MOVS     r0,#8
;;;2758         /* Input capture event */
;;;2759         if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
0000ca  6160              STR      r0,[r4,#0x14]
0000cc  6820              LDR      r0,[r4,#0]
0000ce  69c0              LDR      r0,[r0,#0x1c]
0000d0  0580              LSLS     r0,r0,#22
0000d2  0f80              LSRS     r0,r0,#30
;;;2760         {
;;;2761           HAL_TIM_IC_CaptureCallback(htim);
;;;2762         }
;;;2763         /* Output compare event */
;;;2764         else
;;;2765         {
;;;2766           HAL_TIM_OC_DelayElapsedCallback(htim);
0000d4  4620              MOV      r0,r4
0000d6  d002              BEQ      |L45.222|
0000d8  f7fffffe          BL       HAL_TIM_IC_CaptureCallback
0000dc  e004              B        |L45.232|
                  |L45.222|
0000de  f7fffffe          BL       HAL_TIM_OC_DelayElapsedCallback
;;;2767           HAL_TIM_PWM_PulseFinishedCallback(htim);
0000e2  4620              MOV      r0,r4
0000e4  f7fffffe          BL       HAL_TIM_PWM_PulseFinishedCallback
                  |L45.232|
;;;2768         }
;;;2769         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
0000e8  6165              STR      r5,[r4,#0x14]
                  |L45.234|
;;;2770       }
;;;2771     }
;;;2772     /* TIM Update event */
;;;2773     if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
0000ea  6820              LDR      r0,[r4,#0]
0000ec  6901              LDR      r1,[r0,#0x10]
0000ee  43c9              MVNS     r1,r1
0000f0  07c9              LSLS     r1,r1,#31
0000f2  d108              BNE      |L45.262|
;;;2774     {
;;;2775       if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
0000f4  68c1              LDR      r1,[r0,#0xc]
0000f6  43c9              MVNS     r1,r1
0000f8  07c9              LSLS     r1,r1,#31
0000fa  d104              BNE      |L45.262|
;;;2776       {
;;;2777         __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
0000fc  1e89              SUBS     r1,r1,#2
0000fe  6101              STR      r1,[r0,#0x10]
;;;2778         HAL_TIM_PeriodElapsedCallback(htim);
000100  4620              MOV      r0,r4
000102  f7fffffe          BL       HAL_TIM_PeriodElapsedCallback
                  |L45.262|
;;;2779       }
;;;2780     }
;;;2781     /* TIM Trigger detection event */
;;;2782     if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
000106  6820              LDR      r0,[r4,#0]
000108  6901              LDR      r1,[r0,#0x10]
00010a  43c9              MVNS     r1,r1
00010c  0649              LSLS     r1,r1,#25
00010e  d409              BMI      |L45.292|
;;;2783     {
;;;2784       if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
000110  68c1              LDR      r1,[r0,#0xc]
000112  43c9              MVNS     r1,r1
000114  0649              LSLS     r1,r1,#25
000116  d405              BMI      |L45.292|
;;;2785       {
;;;2786         __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
000118  2140              MOVS     r1,#0x40
00011a  43c9              MVNS     r1,r1
00011c  6101              STR      r1,[r0,#0x10]
;;;2787         HAL_TIM_TriggerCallback(htim);
00011e  4620              MOV      r0,r4
000120  f7fffffe          BL       HAL_TIM_TriggerCallback
                  |L45.292|
;;;2788       }
;;;2789     }
;;;2790   }
000124  bd70              POP      {r4-r6,pc}
;;;2791   
                          ENDP


                          AREA ||i.HAL_TIM_OC_ConfigChannel||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_ConfigChannel PROC
;;;2825     */
;;;2826   HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
000000  6b43              LDR      r3,[r0,#0x34]
;;;2827   {
;;;2828     /* Check the parameters */ 
;;;2829     assert_param(IS_TIM_CHANNELS(Channel)); 
;;;2830     assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
;;;2831     assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
;;;2832     
;;;2833     /* Process lock */
;;;2834     __HAL_LOCK(htim);
000002  2b01              CMP      r3,#1
000004  d101              BNE      |L46.10|
000006  2002              MOVS     r0,#2
;;;2835   
;;;2836     htim->State = HAL_TIM_STATE_BUSY;
;;;2837   
;;;2838     switch (Channel)
;;;2839     {
;;;2840       case TIM_CHANNEL_1:
;;;2841       {
;;;2842         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;2843         /* Configure the TIM Channel 1 in Output Compare */
;;;2844         TIM_OC1_SetConfig(htim->Instance, sConfig);
;;;2845       }
;;;2846       break;
;;;2847       
;;;2848       case TIM_CHANNEL_2:
;;;2849       {
;;;2850         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;2851         /* Configure the TIM Channel 2 in Output Compare */
;;;2852         TIM_OC2_SetConfig(htim->Instance, sConfig);
;;;2853       }
;;;2854       break;
;;;2855       
;;;2856       case TIM_CHANNEL_3:
;;;2857       {
;;;2858          assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
;;;2859         /* Configure the TIM Channel 3 in Output Compare */
;;;2860         TIM_OC3_SetConfig(htim->Instance, sConfig);
;;;2861       }
;;;2862       break;
;;;2863       
;;;2864       case TIM_CHANNEL_4:
;;;2865       {
;;;2866         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
;;;2867         /* Configure the TIM Channel 4 in Output Compare */
;;;2868         TIM_OC4_SetConfig(htim->Instance, sConfig);
;;;2869       }
;;;2870       break;
;;;2871       
;;;2872       default:
;;;2873       break;    
;;;2874     }
;;;2875     htim->State = HAL_TIM_STATE_READY;
;;;2876     
;;;2877     __HAL_UNLOCK(htim);
;;;2878     
;;;2879     return HAL_OK;
;;;2880   }
000008  4770              BX       lr
                  |L46.10|
00000a  b4f0              PUSH     {r4-r7}               ;2827
00000c  2301              MOVS     r3,#1                 ;2834
00000e  2502              MOVS     r5,#2                 ;2836
000010  6385              STR      r5,[r0,#0x38]         ;2836
000012  6343              STR      r3,[r0,#0x34]         ;2836
000014  2470              MOVS     r4,#0x70              ;2836
000016  2a00              CMP      r2,#0                 ;2838
000018  d009              BEQ      |L46.46|
00001a  2503              MOVS     r5,#3                 ;2834
00001c  0223              LSLS     r3,r4,#8              ;2834
00001e  022d              LSLS     r5,r5,#8              ;2834
000020  2a04              CMP      r2,#4                 ;2838
000022  d019              BEQ      |L46.88|
000024  2a08              CMP      r2,#8                 ;2838
000026  d02f              BEQ      |L46.136|
000028  2a0c              CMP      r2,#0xc               ;2838
00002a  d160              BNE      |L46.238|
00002c  e046              B        |L46.188|
                  |L46.46|
00002e  6802              LDR      r2,[r0,#0]            ;2838
000030  6a13              LDR      r3,[r2,#0x20]         ;2838
000032  085b              LSRS     r3,r3,#1              ;2838
000034  005b              LSLS     r3,r3,#1              ;2838
000036  6213              STR      r3,[r2,#0x20]         ;2838
000038  6a13              LDR      r3,[r2,#0x20]         ;2838
00003a  6856              LDR      r6,[r2,#4]            ;2838
00003c  6997              LDR      r7,[r2,#0x18]         ;2838
00003e  43ab              BICS     r3,r3,r5              ;2838
000040  43a7              BICS     r7,r7,r4              ;2838
000042  08bf              LSRS     r7,r7,#2              ;2838
000044  680c              LDR      r4,[r1,#0]            ;2838
000046  00bf              LSLS     r7,r7,#2              ;2838
000048  688d              LDR      r5,[r1,#8]            ;2838
00004a  433c              ORRS     r4,r4,r7              ;2838
00004c  431d              ORRS     r5,r5,r3              ;2838
00004e  6056              STR      r6,[r2,#4]            ;2838
000050  6194              STR      r4,[r2,#0x18]         ;2838
000052  6849              LDR      r1,[r1,#4]            ;2838
000054  6351              STR      r1,[r2,#0x34]         ;2838
000056  e015              B        |L46.132|
                  |L46.88|
000058  6802              LDR      r2,[r0,#0]            ;2846
00005a  6a14              LDR      r4,[r2,#0x20]         ;2846
00005c  2610              MOVS     r6,#0x10              ;2846
00005e  43b4              BICS     r4,r4,r6              ;2846
000060  6214              STR      r4,[r2,#0x20]         ;2846
000062  6a14              LDR      r4,[r2,#0x20]         ;2846
000064  6856              LDR      r6,[r2,#4]            ;2846
000066  6997              LDR      r7,[r2,#0x18]         ;2846
000068  439f              BICS     r7,r7,r3              ;2846
00006a  43af              BICS     r7,r7,r5              ;2846
00006c  680b              LDR      r3,[r1,#0]            ;2846
00006e  2520              MOVS     r5,#0x20              ;2846
000070  43ac              BICS     r4,r4,r5              ;2846
000072  021b              LSLS     r3,r3,#8              ;2846
000074  688d              LDR      r5,[r1,#8]            ;2846
000076  433b              ORRS     r3,r3,r7              ;2846
000078  012d              LSLS     r5,r5,#4              ;2846
00007a  4325              ORRS     r5,r5,r4              ;2846
00007c  6056              STR      r6,[r2,#4]            ;2846
00007e  6193              STR      r3,[r2,#0x18]         ;2846
000080  6849              LDR      r1,[r1,#4]            ;2846
000082  6391              STR      r1,[r2,#0x38]         ;2846
                  |L46.132|
000084  6215              STR      r5,[r2,#0x20]         ;2846
000086  e032              B        |L46.238|
                  |L46.136|
000088  6802              LDR      r2,[r0,#0]            ;2846
00008a  6a13              LDR      r3,[r2,#0x20]         ;2846
00008c  25ff              MOVS     r5,#0xff              ;2846
00008e  3501              ADDS     r5,#1                 ;2846
000090  43ab              BICS     r3,r3,r5              ;2846
000092  6213              STR      r3,[r2,#0x20]         ;2846
000094  6a13              LDR      r3,[r2,#0x20]         ;2846
000096  6855              LDR      r5,[r2,#4]            ;2846
000098  69d6              LDR      r6,[r2,#0x1c]         ;2846
00009a  43a6              BICS     r6,r6,r4              ;2846
00009c  08b6              LSRS     r6,r6,#2              ;2846
00009e  680c              LDR      r4,[r1,#0]            ;2846
0000a0  00b6              LSLS     r6,r6,#2              ;2846
0000a2  4334              ORRS     r4,r4,r6              ;2846
0000a4  2601              MOVS     r6,#1                 ;2846
0000a6  0276              LSLS     r6,r6,#9              ;2846
0000a8  43b3              BICS     r3,r3,r6              ;2846
0000aa  688e              LDR      r6,[r1,#8]            ;2846
0000ac  6055              STR      r5,[r2,#4]            ;2846
0000ae  0236              LSLS     r6,r6,#8              ;2846
0000b0  431e              ORRS     r6,r6,r3              ;2846
0000b2  61d4              STR      r4,[r2,#0x1c]         ;2846
0000b4  6849              LDR      r1,[r1,#4]            ;2846
0000b6  63d1              STR      r1,[r2,#0x3c]         ;2846
0000b8  6216              STR      r6,[r2,#0x20]         ;2846
0000ba  e018              B        |L46.238|
                  |L46.188|
0000bc  6802              LDR      r2,[r0,#0]            ;2862
0000be  6a14              LDR      r4,[r2,#0x20]         ;2862
0000c0  2601              MOVS     r6,#1                 ;2862
0000c2  0336              LSLS     r6,r6,#12             ;2862
0000c4  43b4              BICS     r4,r4,r6              ;2862
0000c6  6214              STR      r4,[r2,#0x20]         ;2862
0000c8  6a14              LDR      r4,[r2,#0x20]         ;2862
0000ca  6856              LDR      r6,[r2,#4]            ;2862
0000cc  69d7              LDR      r7,[r2,#0x1c]         ;2862
0000ce  439f              BICS     r7,r7,r3              ;2862
0000d0  43af              BICS     r7,r7,r5              ;2862
0000d2  2501              MOVS     r5,#1                 ;2862
0000d4  680b              LDR      r3,[r1,#0]            ;2862
0000d6  036d              LSLS     r5,r5,#13             ;2862
0000d8  43ac              BICS     r4,r4,r5              ;2862
0000da  021b              LSLS     r3,r3,#8              ;2862
0000dc  688d              LDR      r5,[r1,#8]            ;2862
0000de  433b              ORRS     r3,r3,r7              ;2862
0000e0  032d              LSLS     r5,r5,#12             ;2862
0000e2  4325              ORRS     r5,r5,r4              ;2862
0000e4  6056              STR      r6,[r2,#4]            ;2862
0000e6  61d3              STR      r3,[r2,#0x1c]         ;2862
0000e8  6849              LDR      r1,[r1,#4]            ;2862
0000ea  6411              STR      r1,[r2,#0x40]         ;2862
0000ec  6215              STR      r5,[r2,#0x20]         ;2862
                  |L46.238|
0000ee  2101              MOVS     r1,#1                 ;2875
0000f0  6381              STR      r1,[r0,#0x38]         ;2875
0000f2  2100              MOVS     r1,#0                 ;2877
0000f4  6341              STR      r1,[r0,#0x34]         ;2879
0000f6  bcf0              POP      {r4-r7}
0000f8  4608              MOV      r0,r1                 ;2879
0000fa  4770              BX       lr
;;;2881   
                          ENDP


                          AREA ||i.HAL_TIM_OC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OC_DeInit PROC
;;;525      */
;;;526    HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;527    {
000002  4604              MOV      r4,r0
;;;528      /* Check the parameters */
;;;529      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;530    
;;;531       htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  63a0              STR      r0,[r4,#0x38]
;;;532    
;;;533      /* Disable the TIM Peripheral Clock */
;;;534      __HAL_TIM_DISABLE(htim);
000008  6820              LDR      r0,[r4,#0]
00000a  6a01              LDR      r1,[r0,#0x20]
00000c  4a06              LDR      r2,|L47.40|
00000e  4211              TST      r1,r2
000010  d103              BNE      |L47.26|
000012  6801              LDR      r1,[r0,#0]
000014  0849              LSRS     r1,r1,#1
000016  0049              LSLS     r1,r1,#1
000018  6001              STR      r1,[r0,#0]
                  |L47.26|
;;;535    
;;;536      /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
;;;537      HAL_TIM_OC_MspDeInit(htim);
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       HAL_TIM_OC_MspDeInit
;;;538    
;;;539      /* Change TIM state */
;;;540      htim->State = HAL_TIM_STATE_RESET;
000020  2000              MOVS     r0,#0
000022  63a0              STR      r0,[r4,#0x38]
;;;541    
;;;542      /* Release Lock */
;;;543      __HAL_UNLOCK(htim);
000024  6360              STR      r0,[r4,#0x34]
;;;544    
;;;545      return HAL_OK;
;;;546    }
000026  bd10              POP      {r4,pc}
;;;547    
                          ENDP

                  |L47.40|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_OC_DelayElapsedCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_DelayElapsedCallback PROC
;;;4103     */
;;;4104   __weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;4105   {
;;;4106     /* Prevent unused argument(s) compilation warning */
;;;4107     UNUSED(htim);
;;;4108   
;;;4109     /* NOTE : This function Should not be modified, when the callback is needed,
;;;4110               the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
;;;4111      */
;;;4112   }
;;;4113   /**
                          ENDP


                          AREA ||i.HAL_TIM_OC_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_GetState PROC
;;;4206     */
;;;4207   HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)
000000  6b80              LDR      r0,[r0,#0x38]
;;;4208   {
;;;4209     return htim->State;
;;;4210   }
000002  4770              BX       lr
;;;4211   
                          ENDP


                          AREA ||i.HAL_TIM_OC_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_Init PROC
;;;485      */
;;;486    HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
000000  2800              CMP      r0,#0
;;;487    {
;;;488      /* Check the TIM handle allocation */
;;;489      if(htim == NULL)
000002  d101              BNE      |L50.8|
;;;490      {
;;;491        return HAL_ERROR;
000004  2001              MOVS     r0,#1
;;;492      }
;;;493    
;;;494      /* Check the parameters */
;;;495      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;496      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;497      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;498      assert_param(IS_TIM_PERIOD(htim->Init.Period));
;;;499      assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
;;;500    
;;;501      if(htim->State == HAL_TIM_STATE_RESET)
;;;502      {
;;;503        /* Allocate lock resource and initialize it */
;;;504        htim->Lock = HAL_UNLOCKED;
;;;505    
;;;506        /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA*/
;;;507        HAL_TIM_OC_MspInit(htim);
;;;508      }
;;;509      /* Set the TIM state */
;;;510      htim->State= HAL_TIM_STATE_BUSY;
;;;511    
;;;512      /* Init the base time for the Output Compare */
;;;513      TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;514      
;;;515      /* Initialize the TIM state*/
;;;516      htim->State= HAL_TIM_STATE_READY;
;;;517      
;;;518      return HAL_OK;
;;;519    }
000006  4770              BX       lr
                  |L50.8|
000008  b510              PUSH     {r4,lr}               ;487
00000a  4604              MOV      r4,r0                 ;487
00000c  6b80              LDR      r0,[r0,#0x38]         ;501
00000e  2800              CMP      r0,#0                 ;501
000010  d103              BNE      |L50.26|
000012  6360              STR      r0,[r4,#0x34]         ;507
000014  4620              MOV      r0,r4                 ;507
000016  f7fffffe          BL       HAL_TIM_OC_MspInit
                  |L50.26|
00001a  2002              MOVS     r0,#2                 ;510
00001c  63a0              STR      r0,[r4,#0x38]         ;510
00001e  1d21              ADDS     r1,r4,#4              ;513
000020  6820              LDR      r0,[r4,#0]            ;513
000022  f7fffffe          BL       TIM_Base_SetConfig
000026  2001              MOVS     r0,#1                 ;516
000028  63a0              STR      r0,[r4,#0x38]         ;516
00002a  2000              MOVS     r0,#0                 ;518
00002c  bd10              POP      {r4,pc}
;;;520    
                          ENDP


                          AREA ||i.HAL_TIM_OC_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_MspDeInit PROC
;;;567      */
;;;568    __weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;569    {
;;;570      /* Prevent unused argument(s) compilation warning */
;;;571      UNUSED(htim);
;;;572    
;;;573      /* NOTE : This function Should not be modified, when the callback is needed,
;;;574                the HAL_TIM_OC_MspDeInit could be implemented in the user file
;;;575       */
;;;576    }
;;;577    
                          ENDP


                          AREA ||i.HAL_TIM_OC_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_MspInit PROC
;;;552      */
;;;553    __weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;554    {
;;;555      /* Prevent unused argument(s) compilation warning */
;;;556      UNUSED(htim);
;;;557    
;;;558      /* NOTE : This function Should not be modified, when the callback is needed,
;;;559                the HAL_TIM_OC_MspInit could be implemented in the user file
;;;560       */
;;;561    }
;;;562    
                          ENDP


                          AREA ||i.HAL_TIM_OC_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_Start PROC
;;;588      */
;;;589    HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b410              PUSH     {r4}
000002  2401              MOVS     r4,#1
000004  4622              MOV      r2,r4
000006  6803              LDR      r3,[r0,#0]
000008  408a              LSLS     r2,r2,r1
00000a  6a19              LDR      r1,[r3,#0x20]
00000c  4391              BICS     r1,r1,r2
00000e  6219              STR      r1,[r3,#0x20]
000010  6a19              LDR      r1,[r3,#0x20]
000012  4311              ORRS     r1,r1,r2
000014  6219              STR      r1,[r3,#0x20]
;;;590    {
;;;591      /* Check the parameters */
;;;592      assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;593    
;;;594      /* Enable the Output compare channel */
;;;595      TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;596      
;;;597      /* Enable the Peripheral */
;;;598      __HAL_TIM_ENABLE(htim);
000016  6800              LDR      r0,[r0,#0]
000018  6801              LDR      r1,[r0,#0]
00001a  4321              ORRS     r1,r1,r4
00001c  6001              STR      r1,[r0,#0]
;;;599      
;;;600      /* Return function status */
;;;601      return HAL_OK;
;;;602    }
00001e  bc10              POP      {r4}
000020  2000              MOVS     r0,#0                 ;601
000022  4770              BX       lr
;;;603    
                          ENDP


                          AREA ||i.HAL_TIM_OC_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OC_Start_DMA PROC
;;;762      */
;;;763    HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;764    {
000002  4604              MOV      r4,r0
;;;765      /* Check the parameters */
;;;766      assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;767    
;;;768      if((htim->State == HAL_TIM_STATE_BUSY))
000004  6b80              LDR      r0,[r0,#0x38]
000006  4616              MOV      r6,r2                 ;764
000008  460d              MOV      r5,r1                 ;764
00000a  2802              CMP      r0,#2
00000c  d006              BEQ      |L54.28|
;;;769      {
;;;770         return HAL_BUSY;
;;;771      }
;;;772      else if((htim->State == HAL_TIM_STATE_READY))
00000e  6ba0              LDR      r0,[r4,#0x38]
000010  2801              CMP      r0,#1
000012  d106              BNE      |L54.34|
;;;773      {
;;;774        if(((uint32_t)pData == 0U ) && (Length > 0U))
000014  2e00              CMP      r6,#0
000016  d102              BNE      |L54.30|
000018  2b00              CMP      r3,#0
00001a  d000              BEQ      |L54.30|
                  |L54.28|
;;;775        {
;;;776          return HAL_ERROR;
;;;777        }
;;;778        else
;;;779        {
;;;780          htim->State = HAL_TIM_STATE_BUSY;
;;;781        }
;;;782      }
;;;783      switch (Channel)
;;;784      {
;;;785        case TIM_CHANNEL_1:
;;;786        {
;;;787          /* Set the DMA Period elapsed callback */
;;;788          htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;789    
;;;790          /* Set the DMA error callback */
;;;791          htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;792    
;;;793          /* Enable the DMA Stream */
;;;794          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;795    
;;;796          /* Enable the TIM Capture/Compare 1 DMA request */
;;;797          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;798        }
;;;799        break;
;;;800    
;;;801        case TIM_CHANNEL_2:
;;;802        {
;;;803          /* Set the DMA Period elapsed callback */
;;;804          htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;805    
;;;806          /* Set the DMA error callback */
;;;807          htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;808    
;;;809          /* Enable the DMA Stream */
;;;810          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;811    
;;;812          /* Enable the TIM Capture/Compare 2 DMA request */
;;;813          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;814        }
;;;815        break;
;;;816    
;;;817        case TIM_CHANNEL_3:
;;;818        {
;;;819          /* Set the DMA Period elapsed callback */
;;;820          htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;821    
;;;822          /* Set the DMA error callback */
;;;823          htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;824    
;;;825          /* Enable the DMA Stream */
;;;826          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;827    
;;;828          /* Enable the TIM Capture/Compare 3 DMA request */
;;;829          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;830        }
;;;831        break;
;;;832    
;;;833        case TIM_CHANNEL_4:
;;;834        {
;;;835         /* Set the DMA Period elapsed callback */
;;;836          htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;837    
;;;838          /* Set the DMA error callback */
;;;839          htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;840    
;;;841          /* Enable the DMA Stream */
;;;842          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;843    
;;;844          /* Enable the TIM Capture/Compare 4 DMA request */
;;;845          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;846        }
;;;847        break;
;;;848    
;;;849        default:
;;;850        break;
;;;851      }
;;;852    
;;;853      /* Enable the Output compare channel */
;;;854      TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;855    
;;;856      /* Enable the Peripheral */
;;;857      __HAL_TIM_ENABLE(htim);
;;;858    
;;;859      /* Return function status */
;;;860      return HAL_OK;
;;;861    }
00001c  bd70              POP      {r4-r6,pc}
                  |L54.30|
00001e  2002              MOVS     r0,#2                 ;780
000020  63a0              STR      r0,[r4,#0x38]         ;780
                  |L54.34|
000022  482f              LDR      r0,|L54.224|
000024  492f              LDR      r1,|L54.228|
000026  2d00              CMP      r5,#0                 ;783
000028  d006              BEQ      |L54.56|
00002a  2d04              CMP      r5,#4                 ;783
00002c  d015              BEQ      |L54.90|
00002e  2d08              CMP      r5,#8                 ;783
000030  d024              BEQ      |L54.124|
000032  2d0c              CMP      r5,#0xc               ;783
000034  d143              BNE      |L54.190|
000036  e032              B        |L54.158|
                  |L54.56|
000038  69e2              LDR      r2,[r4,#0x1c]         ;788
00003a  6310              STR      r0,[r2,#0x30]         ;791
00003c  69e0              LDR      r0,[r4,#0x1c]         ;791
00003e  6381              STR      r1,[r0,#0x38]         ;794
000040  6822              LDR      r2,[r4,#0]            ;794
000042  4631              MOV      r1,r6                 ;794
000044  3234              ADDS     r2,r2,#0x34           ;794
000046  69e0              LDR      r0,[r4,#0x1c]         ;794
000048  f7fffffe          BL       HAL_DMA_Start_IT
00004c  6820              LDR      r0,[r4,#0]            ;797
00004e  68c1              LDR      r1,[r0,#0xc]          ;797
000050  2201              MOVS     r2,#1                 ;797
000052  0252              LSLS     r2,r2,#9              ;797
000054  4311              ORRS     r1,r1,r2              ;797
000056  60c1              STR      r1,[r0,#0xc]          ;797
000058  e031              B        |L54.190|
                  |L54.90|
00005a  6a22              LDR      r2,[r4,#0x20]         ;804
00005c  6310              STR      r0,[r2,#0x30]         ;807
00005e  6a20              LDR      r0,[r4,#0x20]         ;807
000060  6381              STR      r1,[r0,#0x38]         ;810
000062  6822              LDR      r2,[r4,#0]            ;810
000064  4631              MOV      r1,r6                 ;810
000066  3238              ADDS     r2,r2,#0x38           ;810
000068  6a20              LDR      r0,[r4,#0x20]         ;810
00006a  f7fffffe          BL       HAL_DMA_Start_IT
00006e  6820              LDR      r0,[r4,#0]            ;813
000070  68c1              LDR      r1,[r0,#0xc]          ;813
000072  2201              MOVS     r2,#1                 ;813
000074  0292              LSLS     r2,r2,#10             ;813
000076  4311              ORRS     r1,r1,r2              ;813
000078  60c1              STR      r1,[r0,#0xc]          ;813
00007a  e020              B        |L54.190|
                  |L54.124|
00007c  6a62              LDR      r2,[r4,#0x24]         ;820
00007e  6310              STR      r0,[r2,#0x30]         ;823
000080  6a60              LDR      r0,[r4,#0x24]         ;823
000082  6381              STR      r1,[r0,#0x38]         ;826
000084  6822              LDR      r2,[r4,#0]            ;826
000086  4631              MOV      r1,r6                 ;826
000088  323c              ADDS     r2,r2,#0x3c           ;826
00008a  6a60              LDR      r0,[r4,#0x24]         ;826
00008c  f7fffffe          BL       HAL_DMA_Start_IT
000090  6820              LDR      r0,[r4,#0]            ;829
000092  68c1              LDR      r1,[r0,#0xc]          ;829
000094  2201              MOVS     r2,#1                 ;829
000096  02d2              LSLS     r2,r2,#11             ;829
000098  4311              ORRS     r1,r1,r2              ;829
00009a  60c1              STR      r1,[r0,#0xc]          ;829
00009c  e00f              B        |L54.190|
                  |L54.158|
00009e  6aa2              LDR      r2,[r4,#0x28]         ;836
0000a0  6310              STR      r0,[r2,#0x30]         ;839
0000a2  6aa0              LDR      r0,[r4,#0x28]         ;839
0000a4  6381              STR      r1,[r0,#0x38]         ;842
0000a6  6822              LDR      r2,[r4,#0]            ;842
0000a8  4631              MOV      r1,r6                 ;842
0000aa  3240              ADDS     r2,r2,#0x40           ;842
0000ac  6aa0              LDR      r0,[r4,#0x28]         ;842
0000ae  f7fffffe          BL       HAL_DMA_Start_IT
0000b2  6820              LDR      r0,[r4,#0]            ;845
0000b4  68c1              LDR      r1,[r0,#0xc]          ;845
0000b6  2201              MOVS     r2,#1                 ;845
0000b8  0312              LSLS     r2,r2,#12             ;845
0000ba  4311              ORRS     r1,r1,r2              ;845
0000bc  60c1              STR      r1,[r0,#0xc]          ;845
                  |L54.190|
0000be  6821              LDR      r1,[r4,#0]            ;845
0000c0  2201              MOVS     r2,#1                 ;845
0000c2  4610              MOV      r0,r2                 ;845
0000c4  6a0b              LDR      r3,[r1,#0x20]         ;845
0000c6  40a8              LSLS     r0,r0,r5              ;845
0000c8  4383              BICS     r3,r3,r0              ;845
0000ca  620b              STR      r3,[r1,#0x20]         ;845
0000cc  6a0b              LDR      r3,[r1,#0x20]         ;845
0000ce  4303              ORRS     r3,r3,r0              ;845
0000d0  620b              STR      r3,[r1,#0x20]         ;845
0000d2  6820              LDR      r0,[r4,#0]            ;857
0000d4  6801              LDR      r1,[r0,#0]            ;857
0000d6  4311              ORRS     r1,r1,r2              ;857
0000d8  6001              STR      r1,[r0,#0]            ;857
0000da  2000              MOVS     r0,#0                 ;860
0000dc  bd70              POP      {r4-r6,pc}
;;;862    
                          ENDP

0000de  0000              DCW      0x0000
                  |L54.224|
                          DCD      TIM_DMADelayPulseCplt
                  |L54.228|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIM_OC_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_Start_IT PROC
;;;640      */
;;;641    HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b410              PUSH     {r4}
;;;642    {
;;;643      /* Check the parameters */
;;;644      assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;645    
;;;646      switch (Channel)
000002  6802              LDR      r2,[r0,#0]
000004  2900              CMP      r1,#0
000006  d006              BEQ      |L55.22|
000008  2904              CMP      r1,#4
00000a  d009              BEQ      |L55.32|
00000c  2908              CMP      r1,#8
00000e  d00c              BEQ      |L55.42|
000010  290c              CMP      r1,#0xc
000012  d113              BNE      |L55.60|
000014  e00e              B        |L55.52|
                  |L55.22|
;;;647      {
;;;648        case TIM_CHANNEL_1:
;;;649        {
;;;650          /* Enable the TIM Capture/Compare 1 interrupt */
;;;651          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000016  68d3              LDR      r3,[r2,#0xc]
000018  2402              MOVS     r4,#2
00001a  4323              ORRS     r3,r3,r4
00001c  60d3              STR      r3,[r2,#0xc]
;;;652        }
;;;653        break;
00001e  e00d              B        |L55.60|
                  |L55.32|
;;;654    
;;;655        case TIM_CHANNEL_2:
;;;656        {
;;;657          /* Enable the TIM Capture/Compare 2 interrupt */
;;;658          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000020  68d3              LDR      r3,[r2,#0xc]
000022  2404              MOVS     r4,#4
000024  4323              ORRS     r3,r3,r4
000026  60d3              STR      r3,[r2,#0xc]
;;;659        }
;;;660        break;
000028  e008              B        |L55.60|
                  |L55.42|
;;;661    
;;;662        case TIM_CHANNEL_3:
;;;663        {
;;;664          /* Enable the TIM Capture/Compare 3 interrupt */
;;;665          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
00002a  68d3              LDR      r3,[r2,#0xc]
00002c  2408              MOVS     r4,#8
00002e  4323              ORRS     r3,r3,r4
000030  60d3              STR      r3,[r2,#0xc]
;;;666        }
;;;667        break;
000032  e003              B        |L55.60|
                  |L55.52|
;;;668    
;;;669        case TIM_CHANNEL_4:
;;;670        {
;;;671          /* Enable the TIM Capture/Compare 4 interrupt */
;;;672          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000034  68d3              LDR      r3,[r2,#0xc]
000036  2410              MOVS     r4,#0x10
000038  4323              ORRS     r3,r3,r4
00003a  60d3              STR      r3,[r2,#0xc]
                  |L55.60|
00003c  2401              MOVS     r4,#1
00003e  4622              MOV      r2,r4
000040  6803              LDR      r3,[r0,#0]
000042  408a              LSLS     r2,r2,r1
000044  6a19              LDR      r1,[r3,#0x20]
000046  4391              BICS     r1,r1,r2
000048  6219              STR      r1,[r3,#0x20]
00004a  6a19              LDR      r1,[r3,#0x20]
00004c  4311              ORRS     r1,r1,r2
00004e  6219              STR      r1,[r3,#0x20]
;;;673        }
;;;674        break;
;;;675    
;;;676        default:
;;;677        break;
;;;678      }
;;;679    
;;;680      /* Enable the Output compare channel */
;;;681      TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;682    
;;;683      /* Enable the Peripheral */
;;;684      __HAL_TIM_ENABLE(htim);
000050  6800              LDR      r0,[r0,#0]
000052  6801              LDR      r1,[r0,#0]
000054  4321              ORRS     r1,r1,r4
000056  6001              STR      r1,[r0,#0]
;;;685      
;;;686      /* Return function status */
;;;687      return HAL_OK;
;;;688    }
000058  bc10              POP      {r4}
00005a  2000              MOVS     r0,#0                 ;687
00005c  4770              BX       lr
;;;689    
                          ENDP


                          AREA ||i.HAL_TIM_OC_Stop||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OC_Stop PROC
;;;614      */
;;;615    HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b430              PUSH     {r4,r5}
000002  6802              LDR      r2,[r0,#0]
;;;616    {
;;;617      /* Check the parameters */
;;;618      assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;619      
;;;620      /* Disable the Output compare channel */
;;;621      TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
000004  2400              MOVS     r4,#0
000006  2301              MOVS     r3,#1
000008  6a15              LDR      r5,[r2,#0x20]
00000a  408b              LSLS     r3,r3,r1
00000c  439d              BICS     r5,r5,r3
00000e  6215              STR      r5,[r2,#0x20]
000010  6a13              LDR      r3,[r2,#0x20]
000012  408c              LSLS     r4,r4,r1
000014  4323              ORRS     r3,r3,r4
000016  6213              STR      r3,[r2,#0x20]
;;;622      
;;;623      /* Disable the Peripheral */
;;;624      __HAL_TIM_DISABLE(htim);
000018  6800              LDR      r0,[r0,#0]
00001a  6a01              LDR      r1,[r0,#0x20]
00001c  4a04              LDR      r2,|L56.48|
00001e  4211              TST      r1,r2
000020  d103              BNE      |L56.42|
000022  6801              LDR      r1,[r0,#0]
000024  0849              LSRS     r1,r1,#1
000026  0049              LSLS     r1,r1,#1
000028  6001              STR      r1,[r0,#0]
                  |L56.42|
;;;625      
;;;626      /* Return function status */
;;;627      return HAL_OK;
;;;628    }
00002a  bc30              POP      {r4,r5}
00002c  2000              MOVS     r0,#0                 ;627
00002e  4770              BX       lr
;;;629    
                          ENDP

                  |L56.48|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_OC_Stop_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OC_Stop_DMA PROC
;;;873      */
;;;874    HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b470              PUSH     {r4-r6}
;;;875    {
;;;876      /* Check the parameters */
;;;877      assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;878    
;;;879      switch (Channel)
000002  6802              LDR      r2,[r0,#0]
000004  2900              CMP      r1,#0
000006  d006              BEQ      |L57.22|
000008  2904              CMP      r1,#4
00000a  d00a              BEQ      |L57.34|
00000c  2908              CMP      r1,#8
00000e  d00e              BEQ      |L57.46|
000010  290c              CMP      r1,#0xc
000012  d117              BNE      |L57.68|
000014  e011              B        |L57.58|
                  |L57.22|
;;;880      {
;;;881        case TIM_CHANNEL_1:
;;;882        {
;;;883          /* Disable the TIM Capture/Compare 1 DMA request */
;;;884          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000016  68d3              LDR      r3,[r2,#0xc]
000018  2401              MOVS     r4,#1
00001a  0264              LSLS     r4,r4,#9
00001c  43a3              BICS     r3,r3,r4
00001e  60d3              STR      r3,[r2,#0xc]
;;;885        }
;;;886        break;
000020  e010              B        |L57.68|
                  |L57.34|
;;;887    
;;;888        case TIM_CHANNEL_2:
;;;889        {
;;;890          /* Disable the TIM Capture/Compare 2 DMA request */
;;;891          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000022  68d3              LDR      r3,[r2,#0xc]
000024  2401              MOVS     r4,#1
000026  02a4              LSLS     r4,r4,#10
000028  43a3              BICS     r3,r3,r4
00002a  60d3              STR      r3,[r2,#0xc]
;;;892        }
;;;893        break;
00002c  e00a              B        |L57.68|
                  |L57.46|
;;;894    
;;;895        case TIM_CHANNEL_3:
;;;896        {
;;;897          /* Disable the TIM Capture/Compare 3 DMA request */
;;;898          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
00002e  68d3              LDR      r3,[r2,#0xc]
000030  2401              MOVS     r4,#1
000032  02e4              LSLS     r4,r4,#11
000034  43a3              BICS     r3,r3,r4
000036  60d3              STR      r3,[r2,#0xc]
;;;899        }
;;;900        break;
000038  e004              B        |L57.68|
                  |L57.58|
;;;901    
;;;902        case TIM_CHANNEL_4:
;;;903        {
;;;904          /* Disable the TIM Capture/Compare 4 interrupt */
;;;905          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
00003a  68d3              LDR      r3,[r2,#0xc]
00003c  2401              MOVS     r4,#1
00003e  0324              LSLS     r4,r4,#12
000040  43a3              BICS     r3,r3,r4
000042  60d3              STR      r3,[r2,#0xc]
                  |L57.68|
000044  6803              LDR      r3,[r0,#0]
000046  2401              MOVS     r4,#1
;;;906        }
;;;907        break;
;;;908    
;;;909        default:
;;;910        break;
;;;911      }
;;;912    
;;;913      /* Disable the Output compare channel */
;;;914      TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
000048  2500              MOVS     r5,#0
00004a  4622              MOV      r2,r4
00004c  6a1e              LDR      r6,[r3,#0x20]
00004e  408a              LSLS     r2,r2,r1
000050  4396              BICS     r6,r6,r2
000052  621e              STR      r6,[r3,#0x20]
000054  6a1a              LDR      r2,[r3,#0x20]
000056  408d              LSLS     r5,r5,r1
000058  432a              ORRS     r2,r2,r5
00005a  621a              STR      r2,[r3,#0x20]
;;;915    
;;;916      /* Disable the Peripheral */
;;;917      __HAL_TIM_DISABLE(htim);
00005c  6801              LDR      r1,[r0,#0]
00005e  6a0a              LDR      r2,[r1,#0x20]
000060  4b04              LDR      r3,|L57.116|
000062  421a              TST      r2,r3
000064  d102              BNE      |L57.108|
000066  680a              LDR      r2,[r1,#0]
000068  43a2              BICS     r2,r2,r4
00006a  600a              STR      r2,[r1,#0]
                  |L57.108|
;;;918    
;;;919      /* Change the htim state */
;;;920      htim->State = HAL_TIM_STATE_READY;
00006c  6384              STR      r4,[r0,#0x38]
;;;921    
;;;922      /* Return function status */
;;;923      return HAL_OK;
;;;924    }
00006e  bc70              POP      {r4-r6}
000070  2000              MOVS     r0,#0                 ;923
000072  4770              BX       lr
;;;925    
                          ENDP

                  |L57.116|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_OC_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OC_Stop_IT PROC
;;;700      */
;;;701    HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b430              PUSH     {r4,r5}
;;;702    {
;;;703      /* Check the parameters */
;;;704      assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;705    
;;;706      switch (Channel)
000002  6802              LDR      r2,[r0,#0]
000004  2900              CMP      r1,#0
000006  d006              BEQ      |L58.22|
000008  2904              CMP      r1,#4
00000a  d009              BEQ      |L58.32|
00000c  2908              CMP      r1,#8
00000e  d00c              BEQ      |L58.42|
000010  290c              CMP      r1,#0xc
000012  d113              BNE      |L58.60|
000014  e00e              B        |L58.52|
                  |L58.22|
;;;707      {
;;;708        case TIM_CHANNEL_1:
;;;709        {
;;;710          /* Disable the TIM Capture/Compare 1 interrupt */
;;;711          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000016  68d3              LDR      r3,[r2,#0xc]
000018  2402              MOVS     r4,#2
00001a  43a3              BICS     r3,r3,r4
00001c  60d3              STR      r3,[r2,#0xc]
;;;712        }
;;;713        break;
00001e  e00d              B        |L58.60|
                  |L58.32|
;;;714    
;;;715        case TIM_CHANNEL_2:
;;;716        {
;;;717          /* Disable the TIM Capture/Compare 2 interrupt */
;;;718          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000020  68d3              LDR      r3,[r2,#0xc]
000022  2404              MOVS     r4,#4
000024  43a3              BICS     r3,r3,r4
000026  60d3              STR      r3,[r2,#0xc]
;;;719        }
;;;720        break;
000028  e008              B        |L58.60|
                  |L58.42|
;;;721    
;;;722        case TIM_CHANNEL_3:
;;;723        {
;;;724          /* Disable the TIM Capture/Compare 3 interrupt */
;;;725          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
00002a  68d3              LDR      r3,[r2,#0xc]
00002c  2408              MOVS     r4,#8
00002e  43a3              BICS     r3,r3,r4
000030  60d3              STR      r3,[r2,#0xc]
;;;726        }
;;;727        break;
000032  e003              B        |L58.60|
                  |L58.52|
;;;728    
;;;729        case TIM_CHANNEL_4:
;;;730        {
;;;731          /* Disable the TIM Capture/Compare 4 interrupt */
;;;732          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
000034  68d3              LDR      r3,[r2,#0xc]
000036  2410              MOVS     r4,#0x10
000038  43a3              BICS     r3,r3,r4
00003a  60d3              STR      r3,[r2,#0xc]
                  |L58.60|
00003c  6802              LDR      r2,[r0,#0]
;;;733        }
;;;734        break;
;;;735    
;;;736        default:
;;;737        break;
;;;738      }
;;;739    
;;;740      /* Disable the Output compare channel */
;;;741      TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
00003e  2400              MOVS     r4,#0
000040  2301              MOVS     r3,#1
000042  6a15              LDR      r5,[r2,#0x20]
000044  408b              LSLS     r3,r3,r1
000046  439d              BICS     r5,r5,r3
000048  6215              STR      r5,[r2,#0x20]
00004a  6a13              LDR      r3,[r2,#0x20]
00004c  408c              LSLS     r4,r4,r1
00004e  4323              ORRS     r3,r3,r4
000050  6213              STR      r3,[r2,#0x20]
;;;742    
;;;743      /* Disable the Peripheral */
;;;744      __HAL_TIM_DISABLE(htim);
000052  6800              LDR      r0,[r0,#0]
000054  6a01              LDR      r1,[r0,#0x20]
000056  4a05              LDR      r2,|L58.108|
000058  4211              TST      r1,r2
00005a  d103              BNE      |L58.100|
00005c  6801              LDR      r1,[r0,#0]
00005e  0849              LSRS     r1,r1,#1
000060  0049              LSLS     r1,r1,#1
000062  6001              STR      r1,[r0,#0]
                  |L58.100|
;;;745    
;;;746      /* Return function status */
;;;747      return HAL_OK;
;;;748    }
000064  bc30              POP      {r4,r5}
000066  2000              MOVS     r0,#0                 ;747
000068  4770              BX       lr
;;;749    
                          ENDP

00006a  0000              DCW      0x0000
                  |L58.108|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_OnePulse_ConfigChannel||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OnePulse_ConfigChannel PROC
;;;3090     */
;;;3091   HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef* sConfig, uint32_t OutputChannel,  uint32_t InputChannel)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3092   {
000002  469c              MOV      r12,r3
;;;3093     TIM_OC_InitTypeDef temp1;
;;;3094   
;;;3095     /* Check the parameters */
;;;3096     assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
;;;3097     assert_param(IS_TIM_OPM_CHANNELS(InputChannel));
;;;3098   
;;;3099     if(OutputChannel != InputChannel)
000004  4562              CMP      r2,r12
000006  d07d              BEQ      |L59.260|
;;;3100     {
;;;3101       __HAL_LOCK(htim);
000008  6b43              LDR      r3,[r0,#0x34]
00000a  2b01              CMP      r3,#1
00000c  d00b              BEQ      |L59.38|
00000e  2301              MOVS     r3,#1
;;;3102     
;;;3103       htim->State = HAL_TIM_STATE_BUSY;
000010  6343              STR      r3,[r0,#0x34]
000012  2302              MOVS     r3,#2
000014  6383              STR      r3,[r0,#0x38]
;;;3104   
;;;3105       /* Extract the Ouput compare configuration from sConfig structure */
;;;3106       temp1.OCMode = sConfig->OCMode;
;;;3107       temp1.Pulse = sConfig->Pulse;
;;;3108       temp1.OCPolarity = sConfig->OCPolarity;
;;;3109   
;;;3110       switch (OutputChannel)
000016  684e              LDR      r6,[r1,#4]
000018  688d              LDR      r5,[r1,#8]
00001a  680c              LDR      r4,[r1,#0]
00001c  2a00              CMP      r2,#0
00001e  d004              BEQ      |L59.42|
000020  2a04              CMP      r2,#4
000022  d134              BNE      |L59.142|
000024  e01a              B        |L59.92|
                  |L59.38|
000026  2002              MOVS     r0,#2                 ;3101
;;;3111       {
;;;3112         case TIM_CHANNEL_1:
;;;3113         {
;;;3114           assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;3115   
;;;3116           TIM_OC1_SetConfig(htim->Instance, &temp1);
;;;3117         }
;;;3118         break;
;;;3119         case TIM_CHANNEL_2:
;;;3120         {
;;;3121           assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;3122   
;;;3123           TIM_OC2_SetConfig(htim->Instance, &temp1);
;;;3124         }
;;;3125         break;
;;;3126         default:
;;;3127         break;
;;;3128       }
;;;3129       switch (InputChannel)
;;;3130       {
;;;3131         case TIM_CHANNEL_1:
;;;3132         {
;;;3133           assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;3134         
;;;3135           TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
;;;3136                           sConfig->ICSelection, sConfig->ICFilter);
;;;3137   
;;;3138           /* Reset the IC1PSC Bits */
;;;3139           htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
;;;3140   
;;;3141           /* Select the Trigger source */
;;;3142           htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;3143           htim->Instance->SMCR |= TIM_TS_TI1FP1;
;;;3144   
;;;3145           /* Select the Slave Mode */
;;;3146           htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;3147           htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
;;;3148         }
;;;3149         break;
;;;3150         case TIM_CHANNEL_2:
;;;3151         {
;;;3152           assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;3153   
;;;3154           TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
;;;3155                    sConfig->ICSelection, sConfig->ICFilter);
;;;3156   
;;;3157           /* Reset the IC2PSC Bits */
;;;3158           htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
;;;3159   
;;;3160           /* Select the Trigger source */
;;;3161           htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;3162           htim->Instance->SMCR |= TIM_TS_TI2FP2;
;;;3163   
;;;3164           /* Select the Slave Mode */
;;;3165           htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;3166           htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
;;;3167         }
;;;3168         break;
;;;3169   
;;;3170         default:
;;;3171         break;
;;;3172       }
;;;3173   
;;;3174       htim->State = HAL_TIM_STATE_READY;
;;;3175   
;;;3176       __HAL_UNLOCK(htim);
;;;3177   
;;;3178       return HAL_OK;
;;;3179     }
;;;3180     else
;;;3181     {
;;;3182       return HAL_ERROR;
;;;3183     }
;;;3184   }
000028  bdf8              POP      {r3-r7,pc}
                  |L59.42|
00002a  6802              LDR      r2,[r0,#0]
00002c  6a13              LDR      r3,[r2,#0x20]
00002e  085b              LSRS     r3,r3,#1
000030  005b              LSLS     r3,r3,#1
000032  6213              STR      r3,[r2,#0x20]
000034  6a13              LDR      r3,[r2,#0x20]
000036  469e              MOV      lr,r3
000038  6853              LDR      r3,[r2,#4]
00003a  9300              STR      r3,[sp,#0]
00003c  6997              LDR      r7,[r2,#0x18]
00003e  2370              MOVS     r3,#0x70
000040  439f              BICS     r7,r7,r3
000042  08bb              LSRS     r3,r7,#2
000044  009b              LSLS     r3,r3,#2
000046  431c              ORRS     r4,r4,r3
000048  4673              MOV      r3,lr
00004a  2702              MOVS     r7,#2
00004c  43bb              BICS     r3,r3,r7
00004e  431d              ORRS     r5,r5,r3
000050  9b00              LDR      r3,[sp,#0]
000052  6053              STR      r3,[r2,#4]
000054  6194              STR      r4,[r2,#0x18]
000056  6356              STR      r6,[r2,#0x34]
000058  6215              STR      r5,[r2,#0x20]
00005a  e018              B        |L59.142|
                  |L59.92|
00005c  6802              LDR      r2,[r0,#0]            ;3118
00005e  6a17              LDR      r7,[r2,#0x20]         ;3118
000060  2310              MOVS     r3,#0x10              ;3118
000062  439f              BICS     r7,r7,r3              ;3118
000064  6217              STR      r7,[r2,#0x20]         ;3118
000066  6a13              LDR      r3,[r2,#0x20]         ;3118
000068  469e              MOV      lr,r3                 ;3118
00006a  6853              LDR      r3,[r2,#4]            ;3118
00006c  9300              STR      r3,[sp,#0]            ;3118
00006e  6997              LDR      r7,[r2,#0x18]         ;3118
000070  2373              MOVS     r3,#0x73              ;3118
000072  021b              LSLS     r3,r3,#8              ;3118
000074  439f              BICS     r7,r7,r3              ;3118
000076  0223              LSLS     r3,r4,#8              ;3118
000078  431f              ORRS     r7,r7,r3              ;3118
00007a  4673              MOV      r3,lr                 ;3118
00007c  2420              MOVS     r4,#0x20              ;3118
00007e  43a3              BICS     r3,r3,r4              ;3118
000080  012c              LSLS     r4,r5,#4              ;3118
000082  431c              ORRS     r4,r4,r3              ;3118
000084  9b00              LDR      r3,[sp,#0]            ;3118
000086  6053              STR      r3,[r2,#4]            ;3118
000088  6197              STR      r7,[r2,#0x18]         ;3118
00008a  6396              STR      r6,[r2,#0x38]         ;3118
00008c  6214              STR      r4,[r2,#0x20]         ;3118
                  |L59.142|
00008e  4662              MOV      r2,r12                ;3129
000090  2a00              CMP      r2,#0                 ;3129
000092  d002              BEQ      |L59.154|
000094  2a04              CMP      r2,#4                 ;3129
000096  d177              BNE      |L59.392|
000098  e041              B        |L59.286|
                  |L59.154|
00009a  6802              LDR      r2,[r0,#0]            ;3135
00009c  694e              LDR      r6,[r1,#0x14]         ;3135
00009e  690d              LDR      r5,[r1,#0x10]         ;3135
0000a0  68cb              LDR      r3,[r1,#0xc]          ;3135
0000a2  6a11              LDR      r1,[r2,#0x20]         ;3135
0000a4  0849              LSRS     r1,r1,#1              ;3135
0000a6  0049              LSLS     r1,r1,#1              ;3135
0000a8  6211              STR      r1,[r2,#0x20]         ;3135
0000aa  6994              LDR      r4,[r2,#0x18]         ;3135
0000ac  6a11              LDR      r1,[r2,#0x20]         ;3135
0000ae  2701              MOVS     r7,#1                 ;3135
0000b0  07bf              LSLS     r7,r7,#30             ;3135
0000b2  42ba              CMP      r2,r7                 ;3135
0000b4  d005              BEQ      |L59.194|
0000b6  4f38              LDR      r7,|L59.408|
0000b8  42ba              CMP      r2,r7                 ;3135
0000ba  d002              BEQ      |L59.194|
0000bc  4f37              LDR      r7,|L59.412|
0000be  42ba              CMP      r2,r7                 ;3135
0000c0  d102              BNE      |L59.200|
                  |L59.194|
0000c2  08a4              LSRS     r4,r4,#2              ;3135
0000c4  00a4              LSLS     r4,r4,#2              ;3135
0000c6  e002              B        |L59.206|
                  |L59.200|
0000c8  08a4              LSRS     r4,r4,#2              ;3135
0000ca  00a4              LSLS     r4,r4,#2              ;3135
0000cc  2501              MOVS     r5,#1                 ;3135
                  |L59.206|
0000ce  432c              ORRS     r4,r4,r5              ;3135
0000d0  25f0              MOVS     r5,#0xf0              ;3135
0000d2  43ac              BICS     r4,r4,r5              ;3135
0000d4  0735              LSLS     r5,r6,#28             ;3135
0000d6  0e2d              LSRS     r5,r5,#24             ;3135
0000d8  4325              ORRS     r5,r5,r4              ;3135
0000da  240a              MOVS     r4,#0xa               ;3135
0000dc  43a1              BICS     r1,r1,r4              ;3135
0000de  4023              ANDS     r3,r3,r4              ;3135
0000e0  430b              ORRS     r3,r3,r1              ;3135
0000e2  6195              STR      r5,[r2,#0x18]         ;3135
0000e4  6213              STR      r3,[r2,#0x20]         ;3135
0000e6  6801              LDR      r1,[r0,#0]            ;3139
0000e8  698a              LDR      r2,[r1,#0x18]         ;3139
0000ea  230c              MOVS     r3,#0xc               ;3139
0000ec  439a              BICS     r2,r2,r3              ;3139
0000ee  618a              STR      r2,[r1,#0x18]         ;3139
0000f0  6801              LDR      r1,[r0,#0]            ;3142
0000f2  688b              LDR      r3,[r1,#8]            ;3142
0000f4  2270              MOVS     r2,#0x70              ;3142
0000f6  4393              BICS     r3,r3,r2              ;3142
0000f8  608b              STR      r3,[r1,#8]            ;3142
0000fa  6801              LDR      r1,[r0,#0]            ;3143
0000fc  688a              LDR      r2,[r1,#8]            ;3143
0000fe  2350              MOVS     r3,#0x50              ;3143
000100  431a              ORRS     r2,r2,r3              ;3143
000102  e000              B        |L59.262|
                  |L59.260|
000104  e046              B        |L59.404|
                  |L59.262|
000106  608a              STR      r2,[r1,#8]            ;3143
000108  6801              LDR      r1,[r0,#0]            ;3146
00010a  688a              LDR      r2,[r1,#8]            ;3146
00010c  08d2              LSRS     r2,r2,#3              ;3146
00010e  00d2              LSLS     r2,r2,#3              ;3146
000110  608a              STR      r2,[r1,#8]            ;3146
000112  6801              LDR      r1,[r0,#0]            ;3147
000114  688a              LDR      r2,[r1,#8]            ;3147
000116  2306              MOVS     r3,#6                 ;3147
000118  431a              ORRS     r2,r2,r3              ;3147
00011a  608a              STR      r2,[r1,#8]            ;3147
00011c  e034              B        |L59.392|
                  |L59.286|
00011e  6802              LDR      r2,[r0,#0]            ;3154
000120  7d0e              LDRB     r6,[r1,#0x14]         ;3154
000122  68cd              LDR      r5,[r1,#0xc]          ;3154
000124  690c              LDR      r4,[r1,#0x10]         ;3154
000126  6a13              LDR      r3,[r2,#0x20]         ;3154
000128  2110              MOVS     r1,#0x10              ;3154
00012a  438b              BICS     r3,r3,r1              ;3154
00012c  6213              STR      r3,[r2,#0x20]         ;3154
00012e  6991              LDR      r1,[r2,#0x18]         ;3154
000130  6a13              LDR      r3,[r2,#0x20]         ;3154
000132  2703              MOVS     r7,#3                 ;3154
000134  023f              LSLS     r7,r7,#8              ;3154
000136  43b9              BICS     r1,r1,r7              ;3154
000138  0224              LSLS     r4,r4,#8              ;3154
00013a  430c              ORRS     r4,r4,r1              ;3154
00013c  210f              MOVS     r1,#0xf               ;3154
00013e  0309              LSLS     r1,r1,#12             ;3154
000140  438c              BICS     r4,r4,r1              ;3154
000142  0731              LSLS     r1,r6,#28             ;3154
000144  0c09              LSRS     r1,r1,#16             ;3154
000146  4321              ORRS     r1,r1,r4              ;3154
000148  26a0              MOVS     r6,#0xa0              ;3154
00014a  012c              LSLS     r4,r5,#4              ;3154
00014c  43b3              BICS     r3,r3,r6              ;3154
00014e  4034              ANDS     r4,r4,r6              ;3154
000150  431c              ORRS     r4,r4,r3              ;3154
000152  6191              STR      r1,[r2,#0x18]         ;3154
000154  6214              STR      r4,[r2,#0x20]         ;3154
000156  6801              LDR      r1,[r0,#0]            ;3158
000158  698a              LDR      r2,[r1,#0x18]         ;3158
00015a  00bb              LSLS     r3,r7,#2              ;3158
00015c  439a              BICS     r2,r2,r3              ;3158
00015e  618a              STR      r2,[r1,#0x18]         ;3158
000160  6801              LDR      r1,[r0,#0]            ;3161
000162  688b              LDR      r3,[r1,#8]            ;3161
000164  2270              MOVS     r2,#0x70              ;3161
000166  4393              BICS     r3,r3,r2              ;3161
000168  608b              STR      r3,[r1,#8]            ;3161
00016a  6801              LDR      r1,[r0,#0]            ;3162
00016c  688a              LDR      r2,[r1,#8]            ;3162
00016e  2360              MOVS     r3,#0x60              ;3162
000170  431a              ORRS     r2,r2,r3              ;3162
000172  608a              STR      r2,[r1,#8]            ;3162
000174  6801              LDR      r1,[r0,#0]            ;3165
000176  688a              LDR      r2,[r1,#8]            ;3165
000178  08d2              LSRS     r2,r2,#3              ;3165
00017a  00d2              LSLS     r2,r2,#3              ;3165
00017c  608a              STR      r2,[r1,#8]            ;3165
00017e  6801              LDR      r1,[r0,#0]            ;3166
000180  688a              LDR      r2,[r1,#8]            ;3166
000182  2306              MOVS     r3,#6                 ;3166
000184  431a              ORRS     r2,r2,r3              ;3166
000186  608a              STR      r2,[r1,#8]            ;3166
                  |L59.392|
000188  2101              MOVS     r1,#1                 ;3174
00018a  6381              STR      r1,[r0,#0x38]         ;3174
00018c  2100              MOVS     r1,#0                 ;3176
00018e  6341              STR      r1,[r0,#0x34]         ;3178
000190  4608              MOV      r0,r1                 ;3178
000192  bdf8              POP      {r3-r7,pc}
                  |L59.404|
000194  2001              MOVS     r0,#1                 ;3182
000196  bdf8              POP      {r3-r7,pc}
;;;3185   
                          ENDP

                  |L59.408|
                          DCD      0x40010800
                  |L59.412|
                          DCD      0x40011400

                          AREA ||i.HAL_TIM_OnePulse_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OnePulse_DeInit PROC
;;;1959     */
;;;1960   HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;1961   {
000002  4604              MOV      r4,r0
;;;1962     /* Check the parameters */
;;;1963     assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;1964   
;;;1965     htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  63a0              STR      r0,[r4,#0x38]
;;;1966   
;;;1967     /* Disable the TIM Peripheral Clock */
;;;1968     __HAL_TIM_DISABLE(htim);
000008  6820              LDR      r0,[r4,#0]
00000a  6a01              LDR      r1,[r0,#0x20]
00000c  4a06              LDR      r2,|L60.40|
00000e  4211              TST      r1,r2
000010  d103              BNE      |L60.26|
000012  6801              LDR      r1,[r0,#0]
000014  0849              LSRS     r1,r1,#1
000016  0049              LSLS     r1,r1,#1
000018  6001              STR      r1,[r0,#0]
                  |L60.26|
;;;1969   
;;;1970     /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;1971     HAL_TIM_OnePulse_MspDeInit(htim);
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       HAL_TIM_OnePulse_MspDeInit
;;;1972   
;;;1973     /* Change TIM state */
;;;1974     htim->State = HAL_TIM_STATE_RESET;
000020  2000              MOVS     r0,#0
000022  63a0              STR      r0,[r4,#0x38]
;;;1975   
;;;1976     /* Release Lock */
;;;1977     __HAL_UNLOCK(htim);
000024  6360              STR      r0,[r4,#0x34]
;;;1978   
;;;1979     return HAL_OK;
;;;1980   }
000026  bd10              POP      {r4,pc}
;;;1981   
                          ENDP

                  |L60.40|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_OnePulse_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_GetState PROC
;;;4236     */
;;;4237   HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim)
000000  6b80              LDR      r0,[r0,#0x38]
;;;4238   {
;;;4239     return htim->State;
;;;4240   }
000002  4770              BX       lr
;;;4241   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_Init PROC
;;;1911     */
;;;1912   HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
000000  2800              CMP      r0,#0
;;;1913   {
;;;1914     /* Check the TIM handle allocation */
;;;1915     if(htim == NULL)
000002  d101              BNE      |L62.8|
;;;1916     {
;;;1917       return HAL_ERROR;
000004  2001              MOVS     r0,#1
;;;1918     }
;;;1919   
;;;1920     /* Check the parameters */
;;;1921     assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;1922     assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;1923     assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;1924     assert_param(IS_TIM_OPM_MODE(OnePulseMode));
;;;1925     assert_param(IS_TIM_PERIOD(htim->Init.Period));
;;;1926     assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
;;;1927   
;;;1928     if(htim->State == HAL_TIM_STATE_RESET)
;;;1929     {
;;;1930       /* Allocate lock resource and initialize it */
;;;1931       htim->Lock = HAL_UNLOCKED;
;;;1932   
;;;1933       /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;1934       HAL_TIM_OnePulse_MspInit(htim);
;;;1935     }
;;;1936   
;;;1937     /* Set the TIM state */
;;;1938     htim->State= HAL_TIM_STATE_BUSY;
;;;1939   
;;;1940     /* Configure the Time base in the One Pulse Mode */
;;;1941     TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;1942   
;;;1943     /* Reset the OPM Bit */
;;;1944     htim->Instance->CR1 &= ~TIM_CR1_OPM;
;;;1945   
;;;1946     /* Configure the OPM Mode */
;;;1947     htim->Instance->CR1 |= OnePulseMode;
;;;1948   
;;;1949     /* Initialize the TIM state*/
;;;1950     htim->State= HAL_TIM_STATE_READY;
;;;1951   
;;;1952     return HAL_OK;
;;;1953   }
000006  4770              BX       lr
                  |L62.8|
000008  b570              PUSH     {r4-r6,lr}            ;1913
00000a  4604              MOV      r4,r0                 ;1913
00000c  6b80              LDR      r0,[r0,#0x38]         ;1928
00000e  460d              MOV      r5,r1                 ;1913
000010  2800              CMP      r0,#0                 ;1928
000012  d103              BNE      |L62.28|
000014  6360              STR      r0,[r4,#0x34]         ;1934
000016  4620              MOV      r0,r4                 ;1934
000018  f7fffffe          BL       HAL_TIM_OnePulse_MspInit
                  |L62.28|
00001c  2002              MOVS     r0,#2                 ;1938
00001e  63a0              STR      r0,[r4,#0x38]         ;1938
000020  1d21              ADDS     r1,r4,#4              ;1941
000022  6820              LDR      r0,[r4,#0]            ;1941
000024  f7fffffe          BL       TIM_Base_SetConfig
000028  6820              LDR      r0,[r4,#0]            ;1944
00002a  6801              LDR      r1,[r0,#0]            ;1944
00002c  2208              MOVS     r2,#8                 ;1944
00002e  4391              BICS     r1,r1,r2              ;1944
000030  6001              STR      r1,[r0,#0]            ;1944
000032  6820              LDR      r0,[r4,#0]            ;1947
000034  6801              LDR      r1,[r0,#0]            ;1947
000036  4329              ORRS     r1,r1,r5              ;1947
000038  6001              STR      r1,[r0,#0]            ;1947
00003a  2001              MOVS     r0,#1                 ;1950
00003c  63a0              STR      r0,[r4,#0x38]         ;1950
00003e  2000              MOVS     r0,#0                 ;1952
000040  bd70              POP      {r4-r6,pc}
;;;1954   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_MspDeInit PROC
;;;2001     */
;;;2002   __weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2003   {
;;;2004     /* Prevent unused argument(s) compilation warning */
;;;2005     UNUSED(htim);
;;;2006   
;;;2007     /* NOTE : This function Should not be modified, when the callback is needed,
;;;2008               the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
;;;2009      */
;;;2010   }
;;;2011   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_MspInit PROC
;;;1986     */
;;;1987   __weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1988   {
;;;1989     /* Prevent unused argument(s) compilation warning */
;;;1990     UNUSED(htim);
;;;1991   
;;;1992     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1993               the HAL_TIM_OnePulse_MspInit could be implemented in the user file
;;;1994      */
;;;1995   }
;;;1996   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_Start PROC
;;;2019     */
;;;2020   HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  6801              LDR      r1,[r0,#0]
000002  2201              MOVS     r2,#1
000004  6a0b              LDR      r3,[r1,#0x20]
000006  4393              BICS     r3,r3,r2
000008  620b              STR      r3,[r1,#0x20]
00000a  6a0b              LDR      r3,[r1,#0x20]
00000c  4313              ORRS     r3,r3,r2
00000e  620b              STR      r3,[r1,#0x20]
;;;2021   {
;;;2022     /* Enable the Capture compare and the Input Capture channels
;;;2023       (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
;;;2024       if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
;;;2025       if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
;;;2026       in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together
;;;2027   
;;;2028       No need to enable the counter, it's enabled automatically by hardware
;;;2029       (the counter starts in response to a stimulus and generate a pulse */
;;;2030   
;;;2031     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;2032     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
000010  6800              LDR      r0,[r0,#0]
000012  2110              MOVS     r1,#0x10
000014  6a02              LDR      r2,[r0,#0x20]
000016  438a              BICS     r2,r2,r1
000018  6202              STR      r2,[r0,#0x20]
00001a  6a01              LDR      r1,[r0,#0x20]
00001c  2210              MOVS     r2,#0x10
00001e  4311              ORRS     r1,r1,r2
000020  6201              STR      r1,[r0,#0x20]
;;;2033   
;;;2034     /* Return function status */
;;;2035     return HAL_OK;
000022  2000              MOVS     r0,#0
;;;2036   }
000024  4770              BX       lr
;;;2037   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_Start_IT PROC
;;;2073     */
;;;2074   HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  6801              LDR      r1,[r0,#0]
;;;2075   {
;;;2076     /* Enable the Capture compare and the Input Capture channels
;;;2077       (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
;;;2078       if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
;;;2079       if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
;;;2080       in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together
;;;2081   
;;;2082       No need to enable the counter, it's enabled automatically by hardware
;;;2083       (the counter starts in response to a stimulus and generate a pulse */
;;;2084   
;;;2085     /* Enable the TIM Capture/Compare 1 interrupt */
;;;2086     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000002  68ca              LDR      r2,[r1,#0xc]
000004  2302              MOVS     r3,#2
000006  431a              ORRS     r2,r2,r3
000008  60ca              STR      r2,[r1,#0xc]
;;;2087   
;;;2088     /* Enable the TIM Capture/Compare 2 interrupt */
;;;2089     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
00000a  6801              LDR      r1,[r0,#0]
00000c  68ca              LDR      r2,[r1,#0xc]
00000e  2304              MOVS     r3,#4
000010  431a              ORRS     r2,r2,r3
000012  60ca              STR      r2,[r1,#0xc]
000014  6801              LDR      r1,[r0,#0]
000016  2201              MOVS     r2,#1
000018  6a0b              LDR      r3,[r1,#0x20]
00001a  4393              BICS     r3,r3,r2
00001c  620b              STR      r3,[r1,#0x20]
00001e  6a0b              LDR      r3,[r1,#0x20]
000020  4313              ORRS     r3,r3,r2
000022  620b              STR      r3,[r1,#0x20]
;;;2090   
;;;2091     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;2092     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
000024  6800              LDR      r0,[r0,#0]
000026  2110              MOVS     r1,#0x10
000028  6a02              LDR      r2,[r0,#0x20]
00002a  438a              BICS     r2,r2,r1
00002c  6202              STR      r2,[r0,#0x20]
00002e  6a01              LDR      r1,[r0,#0x20]
000030  2210              MOVS     r2,#0x10
000032  4311              ORRS     r1,r1,r2
000034  6201              STR      r1,[r0,#0x20]
;;;2093   
;;;2094     /* Return function status */
;;;2095     return HAL_OK;
000036  2000              MOVS     r0,#0
;;;2096   }
000038  4770              BX       lr
;;;2097   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_Stop||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OnePulse_Stop PROC
;;;2046     */
;;;2047   HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  6801              LDR      r1,[r0,#0]
000002  6a0a              LDR      r2,[r1,#0x20]
000004  0852              LSRS     r2,r2,#1
000006  0052              LSLS     r2,r2,#1
000008  620a              STR      r2,[r1,#0x20]
00000a  6a0a              LDR      r2,[r1,#0x20]
00000c  620a              STR      r2,[r1,#0x20]
00000e  6801              LDR      r1,[r0,#0]
000010  2210              MOVS     r2,#0x10
000012  6a0b              LDR      r3,[r1,#0x20]
000014  4393              BICS     r3,r3,r2
000016  620b              STR      r3,[r1,#0x20]
000018  6a0a              LDR      r2,[r1,#0x20]
00001a  620a              STR      r2,[r1,#0x20]
;;;2048   {
;;;2049     /* Disable the Capture compare and the Input Capture channels
;;;2050     (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
;;;2051     if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
;;;2052     if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
;;;2053     in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
;;;2054   
;;;2055     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
;;;2056     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
;;;2057   
;;;2058     /* Disable the Peripheral */
;;;2059     __HAL_TIM_DISABLE(htim);
00001c  6800              LDR      r0,[r0,#0]
00001e  6a01              LDR      r1,[r0,#0x20]
000020  4a04              LDR      r2,|L67.52|
000022  4211              TST      r1,r2
000024  d103              BNE      |L67.46|
000026  6801              LDR      r1,[r0,#0]
000028  0849              LSRS     r1,r1,#1
00002a  0049              LSLS     r1,r1,#1
00002c  6001              STR      r1,[r0,#0]
                  |L67.46|
;;;2060   
;;;2061     /* Return function status */
;;;2062     return HAL_OK;
00002e  2000              MOVS     r0,#0
;;;2063   }
000030  4770              BX       lr
;;;2064   
                          ENDP

000032  0000              DCW      0x0000
                  |L67.52|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_OnePulse_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OnePulse_Stop_IT PROC
;;;2106     */
;;;2107   HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  6801              LDR      r1,[r0,#0]
;;;2108   {
;;;2109     /* Disable the TIM Capture/Compare 1 interrupt */
;;;2110     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000002  68ca              LDR      r2,[r1,#0xc]
000004  2302              MOVS     r3,#2
000006  439a              BICS     r2,r2,r3
000008  60ca              STR      r2,[r1,#0xc]
;;;2111   
;;;2112     /* Disable the TIM Capture/Compare 2 interrupt */
;;;2113     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
00000a  6801              LDR      r1,[r0,#0]
00000c  68cb              LDR      r3,[r1,#0xc]
00000e  2204              MOVS     r2,#4
000010  4393              BICS     r3,r3,r2
000012  60cb              STR      r3,[r1,#0xc]
000014  6801              LDR      r1,[r0,#0]
000016  6a0a              LDR      r2,[r1,#0x20]
000018  0852              LSRS     r2,r2,#1
00001a  0052              LSLS     r2,r2,#1
00001c  620a              STR      r2,[r1,#0x20]
00001e  6a0a              LDR      r2,[r1,#0x20]
000020  620a              STR      r2,[r1,#0x20]
000022  6801              LDR      r1,[r0,#0]
000024  2210              MOVS     r2,#0x10
000026  6a0b              LDR      r3,[r1,#0x20]
000028  4393              BICS     r3,r3,r2
00002a  620b              STR      r3,[r1,#0x20]
00002c  6a0a              LDR      r2,[r1,#0x20]
00002e  620a              STR      r2,[r1,#0x20]
;;;2114   
;;;2115     /* Disable the Capture compare and the Input Capture channels
;;;2116     (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
;;;2117     if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
;;;2118     if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
;;;2119     in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
;;;2120     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
;;;2121     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
;;;2122   
;;;2123     /* Disable the Peripheral */
;;;2124      __HAL_TIM_DISABLE(htim);
000030  6800              LDR      r0,[r0,#0]
000032  6a01              LDR      r1,[r0,#0x20]
000034  4a04              LDR      r2,|L68.72|
000036  4211              TST      r1,r2
000038  d103              BNE      |L68.66|
00003a  6801              LDR      r1,[r0,#0]
00003c  0849              LSRS     r1,r1,#1
00003e  0049              LSLS     r1,r1,#1
000040  6001              STR      r1,[r0,#0]
                  |L68.66|
;;;2125   
;;;2126     /* Return function status */
;;;2127     return HAL_OK;
000042  2000              MOVS     r0,#0
;;;2128   }
000044  4770              BX       lr
;;;2129   
                          ENDP

000046  0000              DCW      0x0000
                  |L68.72|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_PWM_ConfigChannel||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_ConfigChannel PROC
;;;2990     */
;;;2991   HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
000000  6b43              LDR      r3,[r0,#0x34]
;;;2992   {
;;;2993     __HAL_LOCK(htim);
000002  2b01              CMP      r3,#1
000004  d101              BNE      |L69.10|
000006  2002              MOVS     r0,#2
;;;2994   
;;;2995     /* Check the parameters */
;;;2996     assert_param(IS_TIM_CHANNELS(Channel));
;;;2997     assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
;;;2998     assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
;;;2999     assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
;;;3000     
;;;3001     htim->State = HAL_TIM_STATE_BUSY;
;;;3002   
;;;3003     switch (Channel)
;;;3004     {
;;;3005       case TIM_CHANNEL_1:
;;;3006       {
;;;3007         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;3008         /* Configure the Channel 1 in PWM mode */
;;;3009         TIM_OC1_SetConfig(htim->Instance, sConfig);
;;;3010   
;;;3011         /* Set the Preload enable bit for channel1 */
;;;3012         htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
;;;3013   
;;;3014         /* Configure the Output Fast mode */
;;;3015         htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
;;;3016         htim->Instance->CCMR1 |= sConfig->OCFastMode;
;;;3017       }
;;;3018       break;
;;;3019   
;;;3020       case TIM_CHANNEL_2:
;;;3021       {
;;;3022         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;3023         /* Configure the Channel 2 in PWM mode */
;;;3024         TIM_OC2_SetConfig(htim->Instance, sConfig);
;;;3025   
;;;3026         /* Set the Preload enable bit for channel2 */
;;;3027         htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
;;;3028   
;;;3029         /* Configure the Output Fast mode */
;;;3030         htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
;;;3031         htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
;;;3032       }
;;;3033       break;
;;;3034   
;;;3035       case TIM_CHANNEL_3:
;;;3036       {
;;;3037         assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
;;;3038         /* Configure the Channel 3 in PWM mode */
;;;3039         TIM_OC3_SetConfig(htim->Instance, sConfig);
;;;3040   
;;;3041         /* Set the Preload enable bit for channel3 */
;;;3042         htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
;;;3043   
;;;3044        /* Configure the Output Fast mode */
;;;3045         htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
;;;3046         htim->Instance->CCMR2 |= sConfig->OCFastMode;
;;;3047       }
;;;3048       break;
;;;3049   
;;;3050       case TIM_CHANNEL_4:
;;;3051       {
;;;3052         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
;;;3053         /* Configure the Channel 4 in PWM mode */
;;;3054         TIM_OC4_SetConfig(htim->Instance, sConfig);
;;;3055   
;;;3056         /* Set the Preload enable bit for channel4 */
;;;3057         htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
;;;3058   
;;;3059        /* Configure the Output Fast mode */
;;;3060         htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
;;;3061         htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
;;;3062       }
;;;3063       break;
;;;3064   
;;;3065       default:
;;;3066       break;
;;;3067     }
;;;3068     
;;;3069     htim->State = HAL_TIM_STATE_READY;
;;;3070   
;;;3071     __HAL_UNLOCK(htim);
;;;3072   
;;;3073     return HAL_OK;
;;;3074   }
000008  4770              BX       lr
                  |L69.10|
00000a  b4f0              PUSH     {r4-r7}               ;2992
00000c  2301              MOVS     r3,#1                 ;2993
00000e  2502              MOVS     r5,#2                 ;3001
000010  6385              STR      r5,[r0,#0x38]         ;3001
000012  6343              STR      r3,[r0,#0x34]         ;3001
000014  2370              MOVS     r3,#0x70              ;3001
000016  2a00              CMP      r2,#0                 ;3003
000018  d009              BEQ      |L69.46|
00001a  2503              MOVS     r5,#3                 ;2993
00001c  021c              LSLS     r4,r3,#8              ;2993
00001e  022d              LSLS     r5,r5,#8              ;2993
000020  2a04              CMP      r2,#4                 ;3003
000022  d029              BEQ      |L69.120|
000024  2a08              CMP      r2,#8                 ;3003
000026  d051              BEQ      |L69.204|
000028  2a0c              CMP      r2,#0xc               ;3003
00002a  d14e              BNE      |L69.202|
00002c  e077              B        |L69.286|
                  |L69.46|
00002e  6802              LDR      r2,[r0,#0]            ;3003
000030  6a14              LDR      r4,[r2,#0x20]         ;3003
000032  0864              LSRS     r4,r4,#1              ;3003
000034  0064              LSLS     r4,r4,#1              ;3003
000036  6214              STR      r4,[r2,#0x20]         ;3003
000038  6a14              LDR      r4,[r2,#0x20]         ;3003
00003a  6856              LDR      r6,[r2,#4]            ;3003
00003c  6997              LDR      r7,[r2,#0x18]         ;3003
00003e  43ac              BICS     r4,r4,r5              ;3003
000040  439f              BICS     r7,r7,r3              ;3003
000042  08bf              LSRS     r7,r7,#2              ;3003
000044  680b              LDR      r3,[r1,#0]            ;3003
000046  00bf              LSLS     r7,r7,#2              ;3003
000048  688d              LDR      r5,[r1,#8]            ;3003
00004a  433b              ORRS     r3,r3,r7              ;3003
00004c  4325              ORRS     r5,r5,r4              ;3003
00004e  6056              STR      r6,[r2,#4]            ;3003
000050  6193              STR      r3,[r2,#0x18]         ;3003
000052  684b              LDR      r3,[r1,#4]            ;3003
000054  6353              STR      r3,[r2,#0x34]         ;3003
000056  6215              STR      r5,[r2,#0x20]         ;3003
000058  6802              LDR      r2,[r0,#0]            ;3012
00005a  6993              LDR      r3,[r2,#0x18]         ;3012
00005c  2408              MOVS     r4,#8                 ;3012
00005e  4323              ORRS     r3,r3,r4              ;3012
000060  6193              STR      r3,[r2,#0x18]         ;3012
000062  6802              LDR      r2,[r0,#0]            ;3015
000064  6993              LDR      r3,[r2,#0x18]         ;3015
000066  2404              MOVS     r4,#4                 ;3015
000068  43a3              BICS     r3,r3,r4              ;3015
00006a  6193              STR      r3,[r2,#0x18]         ;3015
00006c  6802              LDR      r2,[r0,#0]            ;3016
00006e  6993              LDR      r3,[r2,#0x18]         ;3016
000070  68c9              LDR      r1,[r1,#0xc]          ;3016
000072  430b              ORRS     r3,r3,r1              ;3016
000074  6193              STR      r3,[r2,#0x18]         ;3016
000076  e07d              B        |L69.372|
                  |L69.120|
000078  6802              LDR      r2,[r0,#0]            ;3018
00007a  6a13              LDR      r3,[r2,#0x20]         ;3018
00007c  2610              MOVS     r6,#0x10              ;3018
00007e  43b3              BICS     r3,r3,r6              ;3018
000080  6213              STR      r3,[r2,#0x20]         ;3018
000082  6a13              LDR      r3,[r2,#0x20]         ;3018
000084  6856              LDR      r6,[r2,#4]            ;3018
000086  6997              LDR      r7,[r2,#0x18]         ;3018
000088  43a7              BICS     r7,r7,r4              ;3018
00008a  43af              BICS     r7,r7,r5              ;3018
00008c  680c              LDR      r4,[r1,#0]            ;3018
00008e  2520              MOVS     r5,#0x20              ;3018
000090  43ab              BICS     r3,r3,r5              ;3018
000092  0224              LSLS     r4,r4,#8              ;3018
000094  688d              LDR      r5,[r1,#8]            ;3018
000096  433c              ORRS     r4,r4,r7              ;3018
000098  012d              LSLS     r5,r5,#4              ;3018
00009a  431d              ORRS     r5,r5,r3              ;3018
00009c  6056              STR      r6,[r2,#4]            ;3018
00009e  6194              STR      r4,[r2,#0x18]         ;3018
0000a0  684b              LDR      r3,[r1,#4]            ;3018
0000a2  6393              STR      r3,[r2,#0x38]         ;3018
0000a4  6215              STR      r5,[r2,#0x20]         ;3018
0000a6  6802              LDR      r2,[r0,#0]            ;3027
0000a8  6993              LDR      r3,[r2,#0x18]         ;3027
0000aa  2401              MOVS     r4,#1                 ;3027
0000ac  02e4              LSLS     r4,r4,#11             ;3027
0000ae  4323              ORRS     r3,r3,r4              ;3027
0000b0  6193              STR      r3,[r2,#0x18]         ;3027
0000b2  6802              LDR      r2,[r0,#0]            ;3030
0000b4  6994              LDR      r4,[r2,#0x18]         ;3030
0000b6  2301              MOVS     r3,#1                 ;3030
0000b8  029b              LSLS     r3,r3,#10             ;3030
0000ba  439c              BICS     r4,r4,r3              ;3030
0000bc  6194              STR      r4,[r2,#0x18]         ;3030
0000be  6802              LDR      r2,[r0,#0]            ;3031
0000c0  6993              LDR      r3,[r2,#0x18]         ;3031
0000c2  68c9              LDR      r1,[r1,#0xc]          ;3031
0000c4  0209              LSLS     r1,r1,#8              ;3031
0000c6  430b              ORRS     r3,r3,r1              ;3031
0000c8  6193              STR      r3,[r2,#0x18]         ;3031
                  |L69.202|
0000ca  e053              B        |L69.372|
                  |L69.204|
0000cc  6802              LDR      r2,[r0,#0]            ;3033
0000ce  6a14              LDR      r4,[r2,#0x20]         ;3033
0000d0  25ff              MOVS     r5,#0xff              ;3033
0000d2  3501              ADDS     r5,#1                 ;3033
0000d4  43ac              BICS     r4,r4,r5              ;3033
0000d6  6214              STR      r4,[r2,#0x20]         ;3033
0000d8  6a14              LDR      r4,[r2,#0x20]         ;3033
0000da  6855              LDR      r5,[r2,#4]            ;3033
0000dc  69d6              LDR      r6,[r2,#0x1c]         ;3033
0000de  439e              BICS     r6,r6,r3              ;3033
0000e0  08b6              LSRS     r6,r6,#2              ;3033
0000e2  680b              LDR      r3,[r1,#0]            ;3033
0000e4  00b6              LSLS     r6,r6,#2              ;3033
0000e6  4333              ORRS     r3,r3,r6              ;3033
0000e8  2601              MOVS     r6,#1                 ;3033
0000ea  0276              LSLS     r6,r6,#9              ;3033
0000ec  43b4              BICS     r4,r4,r6              ;3033
0000ee  688e              LDR      r6,[r1,#8]            ;3033
0000f0  6055              STR      r5,[r2,#4]            ;3033
0000f2  0236              LSLS     r6,r6,#8              ;3033
0000f4  4326              ORRS     r6,r6,r4              ;3033
0000f6  61d3              STR      r3,[r2,#0x1c]         ;3033
0000f8  684b              LDR      r3,[r1,#4]            ;3033
0000fa  63d3              STR      r3,[r2,#0x3c]         ;3033
0000fc  6216              STR      r6,[r2,#0x20]         ;3033
0000fe  6802              LDR      r2,[r0,#0]            ;3042
000100  69d3              LDR      r3,[r2,#0x1c]         ;3042
000102  2408              MOVS     r4,#8                 ;3042
000104  4323              ORRS     r3,r3,r4              ;3042
000106  61d3              STR      r3,[r2,#0x1c]         ;3042
000108  6802              LDR      r2,[r0,#0]            ;3045
00010a  69d4              LDR      r4,[r2,#0x1c]         ;3045
00010c  2304              MOVS     r3,#4                 ;3045
00010e  439c              BICS     r4,r4,r3              ;3045
000110  61d4              STR      r4,[r2,#0x1c]         ;3045
000112  6802              LDR      r2,[r0,#0]            ;3046
000114  69d3              LDR      r3,[r2,#0x1c]         ;3046
000116  68c9              LDR      r1,[r1,#0xc]          ;3046
000118  430b              ORRS     r3,r3,r1              ;3046
00011a  61d3              STR      r3,[r2,#0x1c]         ;3046
00011c  e02a              B        |L69.372|
                  |L69.286|
00011e  6802              LDR      r2,[r0,#0]            ;3048
000120  6a13              LDR      r3,[r2,#0x20]         ;3048
000122  2601              MOVS     r6,#1                 ;3048
000124  0336              LSLS     r6,r6,#12             ;3048
000126  43b3              BICS     r3,r3,r6              ;3048
000128  6213              STR      r3,[r2,#0x20]         ;3048
00012a  6a13              LDR      r3,[r2,#0x20]         ;3048
00012c  6856              LDR      r6,[r2,#4]            ;3048
00012e  69d7              LDR      r7,[r2,#0x1c]         ;3048
000130  43a7              BICS     r7,r7,r4              ;3048
000132  43af              BICS     r7,r7,r5              ;3048
000134  2501              MOVS     r5,#1                 ;3048
000136  680c              LDR      r4,[r1,#0]            ;3048
000138  036d              LSLS     r5,r5,#13             ;3048
00013a  43ab              BICS     r3,r3,r5              ;3048
00013c  0224              LSLS     r4,r4,#8              ;3048
00013e  688d              LDR      r5,[r1,#8]            ;3048
000140  433c              ORRS     r4,r4,r7              ;3048
000142  032d              LSLS     r5,r5,#12             ;3048
000144  431d              ORRS     r5,r5,r3              ;3048
000146  6056              STR      r6,[r2,#4]            ;3048
000148  61d4              STR      r4,[r2,#0x1c]         ;3048
00014a  684b              LDR      r3,[r1,#4]            ;3048
00014c  6413              STR      r3,[r2,#0x40]         ;3048
00014e  6215              STR      r5,[r2,#0x20]         ;3048
000150  6802              LDR      r2,[r0,#0]            ;3057
000152  69d3              LDR      r3,[r2,#0x1c]         ;3057
000154  2401              MOVS     r4,#1                 ;3057
000156  02e4              LSLS     r4,r4,#11             ;3057
000158  4323              ORRS     r3,r3,r4              ;3057
00015a  61d3              STR      r3,[r2,#0x1c]         ;3057
00015c  6802              LDR      r2,[r0,#0]            ;3060
00015e  69d4              LDR      r4,[r2,#0x1c]         ;3060
000160  2301              MOVS     r3,#1                 ;3060
000162  029b              LSLS     r3,r3,#10             ;3060
000164  439c              BICS     r4,r4,r3              ;3060
000166  61d4              STR      r4,[r2,#0x1c]         ;3060
000168  6802              LDR      r2,[r0,#0]            ;3061
00016a  69d3              LDR      r3,[r2,#0x1c]         ;3061
00016c  68c9              LDR      r1,[r1,#0xc]          ;3061
00016e  0209              LSLS     r1,r1,#8              ;3061
000170  430b              ORRS     r3,r3,r1              ;3061
000172  61d3              STR      r3,[r2,#0x1c]         ;3061
                  |L69.372|
000174  2101              MOVS     r1,#1                 ;3069
000176  6381              STR      r1,[r0,#0x38]         ;3069
000178  2100              MOVS     r1,#0                 ;3071
00017a  6341              STR      r1,[r0,#0x34]         ;3073
00017c  bcf0              POP      {r4-r7}
00017e  4608              MOV      r0,r1                 ;3073
000180  4770              BX       lr
;;;3075   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PWM_DeInit PROC
;;;999      */
;;;1000   HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;1001   {
000002  4604              MOV      r4,r0
;;;1002     /* Check the parameters */
;;;1003     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;1004   
;;;1005     htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  63a0              STR      r0,[r4,#0x38]
;;;1006   
;;;1007     /* Disable the TIM Peripheral Clock */
;;;1008     __HAL_TIM_DISABLE(htim);
000008  6820              LDR      r0,[r4,#0]
00000a  6a01              LDR      r1,[r0,#0x20]
00000c  4a06              LDR      r2,|L70.40|
00000e  4211              TST      r1,r2
000010  d103              BNE      |L70.26|
000012  6801              LDR      r1,[r0,#0]
000014  0849              LSRS     r1,r1,#1
000016  0049              LSLS     r1,r1,#1
000018  6001              STR      r1,[r0,#0]
                  |L70.26|
;;;1009   
;;;1010     /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
;;;1011     HAL_TIM_PWM_MspDeInit(htim);
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       HAL_TIM_PWM_MspDeInit
;;;1012   
;;;1013     /* Change TIM state */
;;;1014     htim->State = HAL_TIM_STATE_RESET;
000020  2000              MOVS     r0,#0
000022  63a0              STR      r0,[r4,#0x38]
;;;1015   
;;;1016     /* Release Lock */
;;;1017     __HAL_UNLOCK(htim);
000024  6360              STR      r0,[r4,#0x34]
;;;1018   
;;;1019     return HAL_OK;
;;;1020   }
000026  bd10              POP      {r4,pc}
;;;1021   
                          ENDP

                  |L70.40|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_PWM_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_GetState PROC
;;;4216     */
;;;4217   HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)
000000  6b80              LDR      r0,[r0,#0x38]
;;;4218   {
;;;4219     return htim->State;
;;;4220   }
000002  4770              BX       lr
;;;4221   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_Init PROC
;;;958    
;;;959    HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
000000  2800              CMP      r0,#0
;;;960    {
;;;961      /* Check the TIM handle allocation */
;;;962      if(htim == NULL)
000002  d101              BNE      |L72.8|
;;;963      {
;;;964        return HAL_ERROR;
000004  2001              MOVS     r0,#1
;;;965      }
;;;966    
;;;967      /* Check the parameters */
;;;968      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;969      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;970      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;971      assert_param(IS_TIM_PERIOD(htim->Init.Period));
;;;972      assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
;;;973    
;;;974      if(htim->State == HAL_TIM_STATE_RESET)
;;;975      {
;;;976        /* Allocate lock resource and initialize it */
;;;977        htim->Lock = HAL_UNLOCKED;
;;;978    
;;;979        /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;980        HAL_TIM_PWM_MspInit(htim);
;;;981      }
;;;982    
;;;983      /* Set the TIM state */
;;;984      htim->State= HAL_TIM_STATE_BUSY;
;;;985    
;;;986      /* Init the base time for the PWM */
;;;987      TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;988    
;;;989      /* Initialize the TIM state*/
;;;990      htim->State= HAL_TIM_STATE_READY;
;;;991    
;;;992      return HAL_OK;
;;;993    }
000006  4770              BX       lr
                  |L72.8|
000008  b510              PUSH     {r4,lr}               ;960
00000a  4604              MOV      r4,r0                 ;960
00000c  6b80              LDR      r0,[r0,#0x38]         ;974
00000e  2800              CMP      r0,#0                 ;974
000010  d103              BNE      |L72.26|
000012  6360              STR      r0,[r4,#0x34]         ;980
000014  4620              MOV      r0,r4                 ;980
000016  f7fffffe          BL       HAL_TIM_PWM_MspInit
                  |L72.26|
00001a  2002              MOVS     r0,#2                 ;984
00001c  63a0              STR      r0,[r4,#0x38]         ;984
00001e  1d21              ADDS     r1,r4,#4              ;987
000020  6820              LDR      r0,[r4,#0]            ;987
000022  f7fffffe          BL       TIM_Base_SetConfig
000026  2001              MOVS     r0,#1                 ;990
000028  63a0              STR      r0,[r4,#0x38]         ;990
00002a  2000              MOVS     r0,#0                 ;992
00002c  bd10              POP      {r4,pc}
;;;994    
                          ENDP


                          AREA ||i.HAL_TIM_PWM_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_MspDeInit PROC
;;;1041     */
;;;1042   __weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1043   {
;;;1044     /* Prevent unused argument(s) compilation warning */
;;;1045     UNUSED(htim);
;;;1046   
;;;1047     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1048               the HAL_TIM_PWM_MspDeInit could be implemented in the user file
;;;1049      */
;;;1050   }
;;;1051   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_MspInit PROC
;;;1026     */
;;;1027   __weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1028   {
;;;1029     /* Prevent unused argument(s) compilation warning */
;;;1030     UNUSED(htim);
;;;1031   
;;;1032     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1033               the HAL_TIM_PWM_MspInit could be implemented in the user file
;;;1034      */
;;;1035   }
;;;1036   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_PulseFinishedCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_PulseFinishedCallback PROC
;;;4132     */
;;;4133   __weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;4134   {
;;;4135     /* Prevent unused argument(s) compilation warning */
;;;4136     UNUSED(htim);
;;;4137   
;;;4138     /* NOTE : This function Should not be modified, when the callback is needed,
;;;4139               the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
;;;4140      */
;;;4141   }
;;;4142   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_Start PROC
;;;1062     */
;;;1063   HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b410              PUSH     {r4}
000002  2401              MOVS     r4,#1
000004  4622              MOV      r2,r4
000006  6803              LDR      r3,[r0,#0]
000008  408a              LSLS     r2,r2,r1
00000a  6a19              LDR      r1,[r3,#0x20]
00000c  4391              BICS     r1,r1,r2
00000e  6219              STR      r1,[r3,#0x20]
000010  6a19              LDR      r1,[r3,#0x20]
000012  4311              ORRS     r1,r1,r2
000014  6219              STR      r1,[r3,#0x20]
;;;1064   {
;;;1065     /* Check the parameters */
;;;1066     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1067   
;;;1068     /* Enable the Capture compare channel */
;;;1069     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;1070   
;;;1071     /* Enable the Peripheral */
;;;1072     __HAL_TIM_ENABLE(htim);
000016  6800              LDR      r0,[r0,#0]
000018  6801              LDR      r1,[r0,#0]
00001a  4321              ORRS     r1,r1,r4
00001c  6001              STR      r1,[r0,#0]
;;;1073   
;;;1074     /* Return function status */
;;;1075     return HAL_OK;
;;;1076   }
00001e  bc10              POP      {r4}
000020  2000              MOVS     r0,#0                 ;1075
000022  4770              BX       lr
;;;1077   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PWM_Start_DMA PROC
;;;1240     */
;;;1241   HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;1242   {
000002  4604              MOV      r4,r0
;;;1243     /* Check the parameters */
;;;1244     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1245   
;;;1246     if((htim->State == HAL_TIM_STATE_BUSY))
000004  6b80              LDR      r0,[r0,#0x38]
000006  4616              MOV      r6,r2                 ;1242
000008  460d              MOV      r5,r1                 ;1242
00000a  2802              CMP      r0,#2
00000c  d006              BEQ      |L77.28|
;;;1247     {
;;;1248        return HAL_BUSY;
;;;1249     }
;;;1250     else if((htim->State == HAL_TIM_STATE_READY))
00000e  6ba0              LDR      r0,[r4,#0x38]
000010  2801              CMP      r0,#1
000012  d106              BNE      |L77.34|
;;;1251     {
;;;1252       if(((uint32_t)pData == 0U ) && (Length > 0U))
000014  2e00              CMP      r6,#0
000016  d102              BNE      |L77.30|
000018  2b00              CMP      r3,#0
00001a  d000              BEQ      |L77.30|
                  |L77.28|
;;;1253       {
;;;1254         return HAL_ERROR;
;;;1255       }
;;;1256       else
;;;1257       {
;;;1258         htim->State = HAL_TIM_STATE_BUSY;
;;;1259       }
;;;1260     }
;;;1261     switch (Channel)
;;;1262     {
;;;1263       case TIM_CHANNEL_1:
;;;1264       {
;;;1265         /* Set the DMA Period elapsed callback */
;;;1266         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1267   
;;;1268         /* Set the DMA error callback */
;;;1269         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;1270   
;;;1271         /* Enable the DMA Stream */
;;;1272         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;1273   
;;;1274         /* Enable the TIM Capture/Compare 1 DMA request */
;;;1275         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;1276       }
;;;1277       break;
;;;1278   
;;;1279       case TIM_CHANNEL_2:
;;;1280       {
;;;1281         /* Set the DMA Period elapsed callback */
;;;1282         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1283   
;;;1284         /* Set the DMA error callback */
;;;1285         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;1286   
;;;1287         /* Enable the DMA Stream */
;;;1288         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;1289   
;;;1290         /* Enable the TIM Capture/Compare 2 DMA request */
;;;1291         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;1292       }
;;;1293       break;
;;;1294   
;;;1295       case TIM_CHANNEL_3:
;;;1296       {
;;;1297         /* Set the DMA Period elapsed callback */
;;;1298         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1299   
;;;1300         /* Set the DMA error callback */
;;;1301         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;1302   
;;;1303         /* Enable the DMA Stream */
;;;1304         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;1305   
;;;1306         /* Enable the TIM Output Capture/Compare 3 request */
;;;1307         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;1308       }
;;;1309       break;
;;;1310   
;;;1311       case TIM_CHANNEL_4:
;;;1312       {
;;;1313        /* Set the DMA Period elapsed callback */
;;;1314         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1315   
;;;1316         /* Set the DMA error callback */
;;;1317         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;1318   
;;;1319         /* Enable the DMA Stream */
;;;1320         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;1321   
;;;1322         /* Enable the TIM Capture/Compare 4 DMA request */
;;;1323         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;1324       }
;;;1325       break;
;;;1326   
;;;1327       default:
;;;1328       break;
;;;1329     }
;;;1330   
;;;1331     /* Enable the Capture compare channel */
;;;1332     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;1333   
;;;1334     /* Enable the Peripheral */
;;;1335     __HAL_TIM_ENABLE(htim);
;;;1336   
;;;1337     /* Return function status */
;;;1338     return HAL_OK;
;;;1339   }
00001c  bd70              POP      {r4-r6,pc}
                  |L77.30|
00001e  2002              MOVS     r0,#2                 ;1258
000020  63a0              STR      r0,[r4,#0x38]         ;1258
                  |L77.34|
000022  482f              LDR      r0,|L77.224|
000024  492f              LDR      r1,|L77.228|
000026  2d00              CMP      r5,#0                 ;1261
000028  d006              BEQ      |L77.56|
00002a  2d04              CMP      r5,#4                 ;1261
00002c  d015              BEQ      |L77.90|
00002e  2d08              CMP      r5,#8                 ;1261
000030  d024              BEQ      |L77.124|
000032  2d0c              CMP      r5,#0xc               ;1261
000034  d143              BNE      |L77.190|
000036  e032              B        |L77.158|
                  |L77.56|
000038  69e2              LDR      r2,[r4,#0x1c]         ;1266
00003a  6310              STR      r0,[r2,#0x30]         ;1269
00003c  69e0              LDR      r0,[r4,#0x1c]         ;1269
00003e  6381              STR      r1,[r0,#0x38]         ;1272
000040  6822              LDR      r2,[r4,#0]            ;1272
000042  4631              MOV      r1,r6                 ;1272
000044  3234              ADDS     r2,r2,#0x34           ;1272
000046  69e0              LDR      r0,[r4,#0x1c]         ;1272
000048  f7fffffe          BL       HAL_DMA_Start_IT
00004c  6820              LDR      r0,[r4,#0]            ;1275
00004e  68c1              LDR      r1,[r0,#0xc]          ;1275
000050  2201              MOVS     r2,#1                 ;1275
000052  0252              LSLS     r2,r2,#9              ;1275
000054  4311              ORRS     r1,r1,r2              ;1275
000056  60c1              STR      r1,[r0,#0xc]          ;1275
000058  e031              B        |L77.190|
                  |L77.90|
00005a  6a22              LDR      r2,[r4,#0x20]         ;1282
00005c  6310              STR      r0,[r2,#0x30]         ;1285
00005e  6a20              LDR      r0,[r4,#0x20]         ;1285
000060  6381              STR      r1,[r0,#0x38]         ;1288
000062  6822              LDR      r2,[r4,#0]            ;1288
000064  4631              MOV      r1,r6                 ;1288
000066  3238              ADDS     r2,r2,#0x38           ;1288
000068  6a20              LDR      r0,[r4,#0x20]         ;1288
00006a  f7fffffe          BL       HAL_DMA_Start_IT
00006e  6820              LDR      r0,[r4,#0]            ;1291
000070  68c1              LDR      r1,[r0,#0xc]          ;1291
000072  2201              MOVS     r2,#1                 ;1291
000074  0292              LSLS     r2,r2,#10             ;1291
000076  4311              ORRS     r1,r1,r2              ;1291
000078  60c1              STR      r1,[r0,#0xc]          ;1291
00007a  e020              B        |L77.190|
                  |L77.124|
00007c  6a62              LDR      r2,[r4,#0x24]         ;1298
00007e  6310              STR      r0,[r2,#0x30]         ;1301
000080  6a60              LDR      r0,[r4,#0x24]         ;1301
000082  6381              STR      r1,[r0,#0x38]         ;1304
000084  6822              LDR      r2,[r4,#0]            ;1304
000086  4631              MOV      r1,r6                 ;1304
000088  323c              ADDS     r2,r2,#0x3c           ;1304
00008a  6a60              LDR      r0,[r4,#0x24]         ;1304
00008c  f7fffffe          BL       HAL_DMA_Start_IT
000090  6820              LDR      r0,[r4,#0]            ;1307
000092  68c1              LDR      r1,[r0,#0xc]          ;1307
000094  2201              MOVS     r2,#1                 ;1307
000096  02d2              LSLS     r2,r2,#11             ;1307
000098  4311              ORRS     r1,r1,r2              ;1307
00009a  60c1              STR      r1,[r0,#0xc]          ;1307
00009c  e00f              B        |L77.190|
                  |L77.158|
00009e  6aa2              LDR      r2,[r4,#0x28]         ;1314
0000a0  6310              STR      r0,[r2,#0x30]         ;1317
0000a2  6aa0              LDR      r0,[r4,#0x28]         ;1317
0000a4  6381              STR      r1,[r0,#0x38]         ;1320
0000a6  6822              LDR      r2,[r4,#0]            ;1320
0000a8  4631              MOV      r1,r6                 ;1320
0000aa  3240              ADDS     r2,r2,#0x40           ;1320
0000ac  6aa0              LDR      r0,[r4,#0x28]         ;1320
0000ae  f7fffffe          BL       HAL_DMA_Start_IT
0000b2  6820              LDR      r0,[r4,#0]            ;1323
0000b4  68c1              LDR      r1,[r0,#0xc]          ;1323
0000b6  2201              MOVS     r2,#1                 ;1323
0000b8  0312              LSLS     r2,r2,#12             ;1323
0000ba  4311              ORRS     r1,r1,r2              ;1323
0000bc  60c1              STR      r1,[r0,#0xc]          ;1323
                  |L77.190|
0000be  6821              LDR      r1,[r4,#0]            ;1323
0000c0  2201              MOVS     r2,#1                 ;1323
0000c2  4610              MOV      r0,r2                 ;1323
0000c4  6a0b              LDR      r3,[r1,#0x20]         ;1323
0000c6  40a8              LSLS     r0,r0,r5              ;1323
0000c8  4383              BICS     r3,r3,r0              ;1323
0000ca  620b              STR      r3,[r1,#0x20]         ;1323
0000cc  6a0b              LDR      r3,[r1,#0x20]         ;1323
0000ce  4303              ORRS     r3,r3,r0              ;1323
0000d0  620b              STR      r3,[r1,#0x20]         ;1323
0000d2  6820              LDR      r0,[r4,#0]            ;1335
0000d4  6801              LDR      r1,[r0,#0]            ;1335
0000d6  4311              ORRS     r1,r1,r2              ;1335
0000d8  6001              STR      r1,[r0,#0]            ;1335
0000da  2000              MOVS     r0,#0                 ;1338
0000dc  bd70              POP      {r4-r6,pc}
;;;1340   
                          ENDP

0000de  0000              DCW      0x0000
                  |L77.224|
                          DCD      TIM_DMADelayPulseCplt
                  |L77.228|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIM_PWM_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_Start_IT PROC
;;;1117     */
;;;1118   HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b410              PUSH     {r4}
;;;1119   {
;;;1120     /* Check the parameters */
;;;1121     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1122   
;;;1123     switch (Channel)
000002  6802              LDR      r2,[r0,#0]
000004  2900              CMP      r1,#0
000006  d006              BEQ      |L78.22|
000008  2904              CMP      r1,#4
00000a  d009              BEQ      |L78.32|
00000c  2908              CMP      r1,#8
00000e  d00c              BEQ      |L78.42|
000010  290c              CMP      r1,#0xc
000012  d113              BNE      |L78.60|
000014  e00e              B        |L78.52|
                  |L78.22|
;;;1124     {
;;;1125       case TIM_CHANNEL_1:
;;;1126       {
;;;1127         /* Enable the TIM Capture/Compare 1 interrupt */
;;;1128         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000016  68d3              LDR      r3,[r2,#0xc]
000018  2402              MOVS     r4,#2
00001a  4323              ORRS     r3,r3,r4
00001c  60d3              STR      r3,[r2,#0xc]
;;;1129       }
;;;1130       break;
00001e  e00d              B        |L78.60|
                  |L78.32|
;;;1131   
;;;1132       case TIM_CHANNEL_2:
;;;1133       {
;;;1134         /* Enable the TIM Capture/Compare 2 interrupt */
;;;1135         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000020  68d3              LDR      r3,[r2,#0xc]
000022  2404              MOVS     r4,#4
000024  4323              ORRS     r3,r3,r4
000026  60d3              STR      r3,[r2,#0xc]
;;;1136       }
;;;1137       break;
000028  e008              B        |L78.60|
                  |L78.42|
;;;1138   
;;;1139       case TIM_CHANNEL_3:
;;;1140       {
;;;1141         /* Enable the TIM Capture/Compare 3 interrupt */
;;;1142         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
00002a  68d3              LDR      r3,[r2,#0xc]
00002c  2408              MOVS     r4,#8
00002e  4323              ORRS     r3,r3,r4
000030  60d3              STR      r3,[r2,#0xc]
;;;1143       }
;;;1144       break;
000032  e003              B        |L78.60|
                  |L78.52|
;;;1145   
;;;1146       case TIM_CHANNEL_4:
;;;1147       {
;;;1148         /* Enable the TIM Capture/Compare 4 interrupt */
;;;1149         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000034  68d3              LDR      r3,[r2,#0xc]
000036  2410              MOVS     r4,#0x10
000038  4323              ORRS     r3,r3,r4
00003a  60d3              STR      r3,[r2,#0xc]
                  |L78.60|
00003c  2401              MOVS     r4,#1
00003e  4622              MOV      r2,r4
000040  6803              LDR      r3,[r0,#0]
000042  408a              LSLS     r2,r2,r1
000044  6a19              LDR      r1,[r3,#0x20]
000046  4391              BICS     r1,r1,r2
000048  6219              STR      r1,[r3,#0x20]
00004a  6a19              LDR      r1,[r3,#0x20]
00004c  4311              ORRS     r1,r1,r2
00004e  6219              STR      r1,[r3,#0x20]
;;;1150       }
;;;1151       break;
;;;1152   
;;;1153       default:
;;;1154       break;
;;;1155     }
;;;1156   
;;;1157     /* Enable the Capture compare channel */
;;;1158     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;1159   
;;;1160     /* Enable the Peripheral */
;;;1161     __HAL_TIM_ENABLE(htim);
000050  6800              LDR      r0,[r0,#0]
000052  6801              LDR      r1,[r0,#0]
000054  4321              ORRS     r1,r1,r4
000056  6001              STR      r1,[r0,#0]
;;;1162   
;;;1163     /* Return function status */
;;;1164     return HAL_OK;
;;;1165   }
000058  bc10              POP      {r4}
00005a  2000              MOVS     r0,#0                 ;1164
00005c  4770              BX       lr
;;;1166   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_Stop||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PWM_Stop PROC
;;;1088     */
;;;1089   HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b470              PUSH     {r4-r6}
000002  6803              LDR      r3,[r0,#0]
000004  2401              MOVS     r4,#1
;;;1090   {
;;;1091     /* Check the parameters */
;;;1092     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1093   
;;;1094     /* Disable the Capture compare channel */
;;;1095     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
000006  2500              MOVS     r5,#0
000008  4622              MOV      r2,r4
00000a  6a1e              LDR      r6,[r3,#0x20]
00000c  408a              LSLS     r2,r2,r1
00000e  4396              BICS     r6,r6,r2
000010  621e              STR      r6,[r3,#0x20]
000012  6a1a              LDR      r2,[r3,#0x20]
000014  408d              LSLS     r5,r5,r1
000016  432a              ORRS     r2,r2,r5
000018  621a              STR      r2,[r3,#0x20]
;;;1096   
;;;1097     /* Disable the Peripheral */
;;;1098     __HAL_TIM_DISABLE(htim);
00001a  6801              LDR      r1,[r0,#0]
00001c  6a0a              LDR      r2,[r1,#0x20]
00001e  4b05              LDR      r3,|L79.52|
000020  421a              TST      r2,r3
000022  d102              BNE      |L79.42|
000024  680a              LDR      r2,[r1,#0]
000026  43a2              BICS     r2,r2,r4
000028  600a              STR      r2,[r1,#0]
                  |L79.42|
;;;1099   
;;;1100     /* Change the htim state */
;;;1101     htim->State = HAL_TIM_STATE_READY;
00002a  6384              STR      r4,[r0,#0x38]
;;;1102   
;;;1103     /* Return function status */
;;;1104     return HAL_OK;
;;;1105   }
00002c  bc70              POP      {r4-r6}
00002e  2000              MOVS     r0,#0                 ;1104
000030  4770              BX       lr
;;;1106   
                          ENDP

000032  0000              DCW      0x0000
                  |L79.52|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_PWM_Stop_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PWM_Stop_DMA PROC
;;;1351     */
;;;1352   HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b470              PUSH     {r4-r6}
;;;1353   {
;;;1354     /* Check the parameters */
;;;1355     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1356   
;;;1357     switch (Channel)
000002  6802              LDR      r2,[r0,#0]
000004  2900              CMP      r1,#0
000006  d006              BEQ      |L80.22|
000008  2904              CMP      r1,#4
00000a  d00a              BEQ      |L80.34|
00000c  2908              CMP      r1,#8
00000e  d00e              BEQ      |L80.46|
000010  290c              CMP      r1,#0xc
000012  d117              BNE      |L80.68|
000014  e011              B        |L80.58|
                  |L80.22|
;;;1358     {
;;;1359       case TIM_CHANNEL_1:
;;;1360       {
;;;1361         /* Disable the TIM Capture/Compare 1 DMA request */
;;;1362         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000016  68d3              LDR      r3,[r2,#0xc]
000018  2401              MOVS     r4,#1
00001a  0264              LSLS     r4,r4,#9
00001c  43a3              BICS     r3,r3,r4
00001e  60d3              STR      r3,[r2,#0xc]
;;;1363       }
;;;1364       break;
000020  e010              B        |L80.68|
                  |L80.34|
;;;1365   
;;;1366       case TIM_CHANNEL_2:
;;;1367       {
;;;1368         /* Disable the TIM Capture/Compare 2 DMA request */
;;;1369         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000022  68d3              LDR      r3,[r2,#0xc]
000024  2401              MOVS     r4,#1
000026  02a4              LSLS     r4,r4,#10
000028  43a3              BICS     r3,r3,r4
00002a  60d3              STR      r3,[r2,#0xc]
;;;1370       }
;;;1371       break;
00002c  e00a              B        |L80.68|
                  |L80.46|
;;;1372   
;;;1373       case TIM_CHANNEL_3:
;;;1374       {
;;;1375         /* Disable the TIM Capture/Compare 3 DMA request */
;;;1376         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
00002e  68d3              LDR      r3,[r2,#0xc]
000030  2401              MOVS     r4,#1
000032  02e4              LSLS     r4,r4,#11
000034  43a3              BICS     r3,r3,r4
000036  60d3              STR      r3,[r2,#0xc]
;;;1377       }
;;;1378       break;
000038  e004              B        |L80.68|
                  |L80.58|
;;;1379   
;;;1380       case TIM_CHANNEL_4:
;;;1381       {
;;;1382         /* Disable the TIM Capture/Compare 4 interrupt */
;;;1383         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
00003a  68d3              LDR      r3,[r2,#0xc]
00003c  2401              MOVS     r4,#1
00003e  0324              LSLS     r4,r4,#12
000040  43a3              BICS     r3,r3,r4
000042  60d3              STR      r3,[r2,#0xc]
                  |L80.68|
000044  6803              LDR      r3,[r0,#0]
000046  2401              MOVS     r4,#1
;;;1384       }
;;;1385       break;
;;;1386   
;;;1387       default:
;;;1388       break;
;;;1389     }
;;;1390   
;;;1391     /* Disable the Capture compare channel */
;;;1392     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
000048  2500              MOVS     r5,#0
00004a  4622              MOV      r2,r4
00004c  6a1e              LDR      r6,[r3,#0x20]
00004e  408a              LSLS     r2,r2,r1
000050  4396              BICS     r6,r6,r2
000052  621e              STR      r6,[r3,#0x20]
000054  6a1a              LDR      r2,[r3,#0x20]
000056  408d              LSLS     r5,r5,r1
000058  432a              ORRS     r2,r2,r5
00005a  621a              STR      r2,[r3,#0x20]
;;;1393   
;;;1394     /* Disable the Peripheral */
;;;1395     __HAL_TIM_DISABLE(htim);
00005c  6801              LDR      r1,[r0,#0]
00005e  6a0a              LDR      r2,[r1,#0x20]
000060  4b04              LDR      r3,|L80.116|
000062  421a              TST      r2,r3
000064  d102              BNE      |L80.108|
000066  680a              LDR      r2,[r1,#0]
000068  43a2              BICS     r2,r2,r4
00006a  600a              STR      r2,[r1,#0]
                  |L80.108|
;;;1396   
;;;1397     /* Change the htim state */
;;;1398     htim->State = HAL_TIM_STATE_READY;
00006c  6384              STR      r4,[r0,#0x38]
;;;1399   
;;;1400     /* Return function status */
;;;1401     return HAL_OK;
;;;1402   }
00006e  bc70              POP      {r4-r6}
000070  2000              MOVS     r0,#0                 ;1401
000072  4770              BX       lr
;;;1403   
                          ENDP

                  |L80.116|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_PWM_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PWM_Stop_IT PROC
;;;1177     */
;;;1178   HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b430              PUSH     {r4,r5}
;;;1179   {
;;;1180     /* Check the parameters */
;;;1181     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1182   
;;;1183     switch (Channel)
000002  6802              LDR      r2,[r0,#0]
000004  2900              CMP      r1,#0
000006  d006              BEQ      |L81.22|
000008  2904              CMP      r1,#4
00000a  d009              BEQ      |L81.32|
00000c  2908              CMP      r1,#8
00000e  d00c              BEQ      |L81.42|
000010  290c              CMP      r1,#0xc
000012  d113              BNE      |L81.60|
000014  e00e              B        |L81.52|
                  |L81.22|
;;;1184     {
;;;1185       case TIM_CHANNEL_1:
;;;1186       {
;;;1187         /* Disable the TIM Capture/Compare 1 interrupt */
;;;1188         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000016  68d3              LDR      r3,[r2,#0xc]
000018  2402              MOVS     r4,#2
00001a  43a3              BICS     r3,r3,r4
00001c  60d3              STR      r3,[r2,#0xc]
;;;1189       }
;;;1190       break;
00001e  e00d              B        |L81.60|
                  |L81.32|
;;;1191   
;;;1192       case TIM_CHANNEL_2:
;;;1193       {
;;;1194         /* Disable the TIM Capture/Compare 2 interrupt */
;;;1195         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000020  68d3              LDR      r3,[r2,#0xc]
000022  2404              MOVS     r4,#4
000024  43a3              BICS     r3,r3,r4
000026  60d3              STR      r3,[r2,#0xc]
;;;1196       }
;;;1197       break;
000028  e008              B        |L81.60|
                  |L81.42|
;;;1198   
;;;1199       case TIM_CHANNEL_3:
;;;1200       {
;;;1201         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1202         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
00002a  68d3              LDR      r3,[r2,#0xc]
00002c  2408              MOVS     r4,#8
00002e  43a3              BICS     r3,r3,r4
000030  60d3              STR      r3,[r2,#0xc]
;;;1203       }
;;;1204       break;
000032  e003              B        |L81.60|
                  |L81.52|
;;;1205   
;;;1206       case TIM_CHANNEL_4:
;;;1207       {
;;;1208         /* Disable the TIM Capture/Compare 4 interrupt */
;;;1209         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
000034  68d3              LDR      r3,[r2,#0xc]
000036  2410              MOVS     r4,#0x10
000038  43a3              BICS     r3,r3,r4
00003a  60d3              STR      r3,[r2,#0xc]
                  |L81.60|
00003c  6802              LDR      r2,[r0,#0]
;;;1210       }
;;;1211       break;
;;;1212   
;;;1213       default:
;;;1214       break;
;;;1215     }
;;;1216   
;;;1217     /* Disable the Capture compare channel */
;;;1218     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
00003e  2400              MOVS     r4,#0
000040  2301              MOVS     r3,#1
000042  6a15              LDR      r5,[r2,#0x20]
000044  408b              LSLS     r3,r3,r1
000046  439d              BICS     r5,r5,r3
000048  6215              STR      r5,[r2,#0x20]
00004a  6a13              LDR      r3,[r2,#0x20]
00004c  408c              LSLS     r4,r4,r1
00004e  4323              ORRS     r3,r3,r4
000050  6213              STR      r3,[r2,#0x20]
;;;1219   
;;;1220     /* Disable the Peripheral */
;;;1221     __HAL_TIM_DISABLE(htim);
000052  6800              LDR      r0,[r0,#0]
000054  6a01              LDR      r1,[r0,#0x20]
000056  4a05              LDR      r2,|L81.108|
000058  4211              TST      r1,r2
00005a  d103              BNE      |L81.100|
00005c  6801              LDR      r1,[r0,#0]
00005e  0849              LSRS     r1,r1,#1
000060  0049              LSLS     r1,r1,#1
000062  6001              STR      r1,[r0,#0]
                  |L81.100|
;;;1222   
;;;1223     /* Return function status */
;;;1224     return HAL_OK;
;;;1225   }
000064  bc30              POP      {r4,r5}
000066  2000              MOVS     r0,#0                 ;1224
000068  4770              BX       lr
;;;1226   
                          ENDP

00006a  0000              DCW      0x0000
                  |L81.108|
                          DCD      0x00001111

                          AREA ||i.HAL_TIM_PeriodElapsedCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PeriodElapsedCallback PROC
;;;4088     */
;;;4089   __weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;4090   {
;;;4091     /* Prevent unused argument(s) compilation warning */
;;;4092     UNUSED(htim);
;;;4093   
;;;4094     /* NOTE : This function Should not be modified, when the callback is needed,
;;;4095               the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
;;;4096      */
;;;4097     
;;;4098   }
;;;4099   /**
                          ENDP


                          AREA ||i.HAL_TIM_ReadCapturedValue||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ReadCapturedValue PROC
;;;4001     */
;;;4002   uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  6b43              LDR      r3,[r0,#0x34]
;;;4003   {
;;;4004     uint32_t tmpreg = 0U;
000002  2200              MOVS     r2,#0
;;;4005     
;;;4006     __HAL_LOCK(htim);
000004  2b01              CMP      r3,#1
000006  d00a              BEQ      |L83.30|
000008  2301              MOVS     r3,#1
;;;4007     
;;;4008     switch (Channel)
00000a  6343              STR      r3,[r0,#0x34]
00000c  2900              CMP      r1,#0
00000e  d008              BEQ      |L83.34|
000010  2904              CMP      r1,#4
000012  d009              BEQ      |L83.40|
000014  2908              CMP      r1,#8
000016  d00a              BEQ      |L83.46|
000018  290c              CMP      r1,#0xc
00001a  d10d              BNE      |L83.56|
00001c  e00a              B        |L83.52|
                  |L83.30|
00001e  2002              MOVS     r0,#2                 ;4006
;;;4009     {
;;;4010       case TIM_CHANNEL_1:
;;;4011       {
;;;4012         /* Check the parameters */
;;;4013         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;4014         
;;;4015         /* Return the capture 1 value */
;;;4016         tmpreg = htim->Instance->CCR1;
;;;4017         
;;;4018         break;
;;;4019       }
;;;4020       case TIM_CHANNEL_2:
;;;4021       {
;;;4022         /* Check the parameters */
;;;4023         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;4024         
;;;4025         /* Return the capture 2 value */
;;;4026         tmpreg = htim->Instance->CCR2;
;;;4027         
;;;4028         break;
;;;4029       }
;;;4030       
;;;4031       case TIM_CHANNEL_3:
;;;4032       {
;;;4033         /* Check the parameters */
;;;4034         assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
;;;4035         
;;;4036         /* Return the capture 3 value */
;;;4037         tmpreg = htim->Instance->CCR3;
;;;4038         
;;;4039         break;
;;;4040       }
;;;4041       
;;;4042       case TIM_CHANNEL_4:
;;;4043       {
;;;4044         /* Check the parameters */
;;;4045         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
;;;4046         
;;;4047         /* Return the capture 4 value */
;;;4048         tmpreg = htim->Instance->CCR4;
;;;4049         
;;;4050         break;
;;;4051       }
;;;4052       
;;;4053       default:
;;;4054       break;  
;;;4055     }
;;;4056        
;;;4057     __HAL_UNLOCK(htim);  
;;;4058     return tmpreg;
;;;4059   }
000020  4770              BX       lr
                  |L83.34|
000022  6801              LDR      r1,[r0,#0]            ;4016
000024  6b4a              LDR      r2,[r1,#0x34]         ;4016
000026  e007              B        |L83.56|
                  |L83.40|
000028  6801              LDR      r1,[r0,#0]            ;4026
00002a  6b8a              LDR      r2,[r1,#0x38]         ;4026
00002c  e004              B        |L83.56|
                  |L83.46|
00002e  6801              LDR      r1,[r0,#0]            ;4037
000030  6bca              LDR      r2,[r1,#0x3c]         ;4037
000032  e001              B        |L83.56|
                  |L83.52|
000034  6801              LDR      r1,[r0,#0]            ;4048
000036  6c0a              LDR      r2,[r1,#0x40]         ;4048
                  |L83.56|
000038  2100              MOVS     r1,#0                 ;4057
00003a  6341              STR      r1,[r0,#0x34]         ;4058
00003c  4610              MOV      r0,r2                 ;4058
00003e  4770              BX       lr
;;;4060   
                          ENDP


                          AREA ||i.HAL_TIM_SlaveConfigSynchronization||, CODE, READONLY, ALIGN=1

                  HAL_TIM_SlaveConfigSynchronization PROC
;;;3926     */
;;;3927   HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig)
000000  b570              PUSH     {r4-r6,lr}
;;;3928   {
000002  4604              MOV      r4,r0
;;;3929     /* Check the parameters */
;;;3930     assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
;;;3931     assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
;;;3932     assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
;;;3933      
;;;3934     __HAL_LOCK(htim);
000004  6b40              LDR      r0,[r0,#0x34]
000006  2801              CMP      r0,#1
000008  d014              BEQ      |L84.52|
00000a  2501              MOVS     r5,#1
;;;3935     
;;;3936     htim->State = HAL_TIM_STATE_BUSY;
00000c  2002              MOVS     r0,#2
00000e  6365              STR      r5,[r4,#0x34]
000010  63a0              STR      r0,[r4,#0x38]
;;;3937   
;;;3938     /* Configuration in slave mode */
;;;3939     TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       TIM_SlaveTimer_SetConfig
;;;3940   
;;;3941     /* Disable Trigger Interrupt */
;;;3942     __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
000018  6820              LDR      r0,[r4,#0]
00001a  68c1              LDR      r1,[r0,#0xc]
00001c  2240              MOVS     r2,#0x40
00001e  4391              BICS     r1,r1,r2
000020  60c1              STR      r1,[r0,#0xc]
;;;3943     
;;;3944     /* Disable Trigger DMA request */
;;;3945     __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
000022  6820              LDR      r0,[r4,#0]
000024  68c1              LDR      r1,[r0,#0xc]
000026  0212              LSLS     r2,r2,#8
000028  4391              BICS     r1,r1,r2
00002a  60c1              STR      r1,[r0,#0xc]
;;;3946   
;;;3947     /* Set the new state */
;;;3948     htim->State = HAL_TIM_STATE_READY;
00002c  63a5              STR      r5,[r4,#0x38]
;;;3949        
;;;3950     __HAL_UNLOCK(htim);  
00002e  2000              MOVS     r0,#0
000030  6360              STR      r0,[r4,#0x34]         ;3934
;;;3951     
;;;3952     return HAL_OK;
;;;3953   } 
000032  bd70              POP      {r4-r6,pc}
                  |L84.52|
000034  2002              MOVS     r0,#2                 ;3934
000036  bd70              POP      {r4-r6,pc}
;;;3954   
                          ENDP


                          AREA ||i.HAL_TIM_SlaveConfigSynchronization_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_SlaveConfigSynchronization_IT PROC
;;;3963     */
;;;3964   HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization_IT(TIM_HandleTypeDef *htim,
000000  b570              PUSH     {r4-r6,lr}
;;;3965                                                           TIM_SlaveConfigTypeDef * sSlaveConfig)
;;;3966   {
000002  4604              MOV      r4,r0
;;;3967     /* Check the parameters */
;;;3968     assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
;;;3969     assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
;;;3970     assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
;;;3971   
;;;3972     __HAL_LOCK(htim);
000004  6b40              LDR      r0,[r0,#0x34]
000006  2801              CMP      r0,#1
000008  d014              BEQ      |L85.52|
00000a  2501              MOVS     r5,#1
;;;3973   
;;;3974     htim->State = HAL_TIM_STATE_BUSY;
00000c  2002              MOVS     r0,#2
00000e  6365              STR      r5,[r4,#0x34]
000010  63a0              STR      r0,[r4,#0x38]
;;;3975   
;;;3976     TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       TIM_SlaveTimer_SetConfig
;;;3977   
;;;3978     /* Enable Trigger Interrupt */
;;;3979     __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
000018  6820              LDR      r0,[r4,#0]
00001a  68c1              LDR      r1,[r0,#0xc]
00001c  2240              MOVS     r2,#0x40
00001e  4311              ORRS     r1,r1,r2
000020  60c1              STR      r1,[r0,#0xc]
;;;3980   
;;;3981     /* Disable Trigger DMA request */
;;;3982     __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
000022  6820              LDR      r0,[r4,#0]
000024  68c1              LDR      r1,[r0,#0xc]
000026  0212              LSLS     r2,r2,#8
000028  4391              BICS     r1,r1,r2
00002a  60c1              STR      r1,[r0,#0xc]
;;;3983   
;;;3984     htim->State = HAL_TIM_STATE_READY;
00002c  63a5              STR      r5,[r4,#0x38]
;;;3985   
;;;3986     __HAL_UNLOCK(htim);
00002e  2000              MOVS     r0,#0
000030  6360              STR      r0,[r4,#0x34]         ;3972
;;;3987   
;;;3988     return HAL_OK;
;;;3989   }
000032  bd70              POP      {r4-r6,pc}
                  |L85.52|
000034  2002              MOVS     r0,#2                 ;3972
000036  bd70              POP      {r4-r6,pc}
;;;3990   
                          ENDP


                          AREA ||i.HAL_TIM_TriggerCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_TriggerCallback PROC
;;;4147     */
;;;4148   __weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;4149   {
;;;4150     /* Prevent unused argument(s) compilation warning */
;;;4151     UNUSED(htim);
;;;4152   
;;;4153     /* NOTE : This function Should not be modified, when the callback is needed,
;;;4154               the HAL_TIM_TriggerCallback could be implemented in the user file
;;;4155      */
;;;4156   }
;;;4157   
                          ENDP


                          AREA ||i.TIM_Base_SetConfig||, CODE, READONLY, ALIGN=2

                  TIM_Base_SetConfig PROC
;;;4384     */
;;;4385   static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
000000  b470              PUSH     {r4-r6}
;;;4386   {
;;;4387     uint32_t tmpcr1 = 0U;
;;;4388     tmpcr1 = TIMx->CR1;
000002  6802              LDR      r2,[r0,#0]
;;;4389     
;;;4390     /* Set TIM Time Base Unit parameters ---------------------------------------*/
;;;4391     if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)
000004  2301              MOVS     r3,#1
000006  079b              LSLS     r3,r3,#30
000008  4c0f              LDR      r4,|L87.72|
00000a  4d10              LDR      r5,|L87.76|
00000c  4298              CMP      r0,r3
00000e  d003              BEQ      |L87.24|
000010  42a0              CMP      r0,r4
000012  d001              BEQ      |L87.24|
000014  42a8              CMP      r0,r5
000016  d103              BNE      |L87.32|
                  |L87.24|
;;;4392     {
;;;4393       /* Select the Counter Mode */
;;;4394       tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
000018  2670              MOVS     r6,#0x70
00001a  43b2              BICS     r2,r2,r6
;;;4395       tmpcr1 |= Structure->CounterMode;
00001c  684e              LDR      r6,[r1,#4]
00001e  4332              ORRS     r2,r2,r6
                  |L87.32|
;;;4396     }
;;;4397    
;;;4398     if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
000020  4298              CMP      r0,r3
000022  d003              BEQ      |L87.44|
000024  42a0              CMP      r0,r4
000026  d001              BEQ      |L87.44|
000028  42a8              CMP      r0,r5
00002a  d104              BNE      |L87.54|
                  |L87.44|
;;;4399     {
;;;4400       /* Set the clock division */
;;;4401       tmpcr1 &= ~TIM_CR1_CKD;
00002c  2303              MOVS     r3,#3
00002e  021b              LSLS     r3,r3,#8
000030  439a              BICS     r2,r2,r3
;;;4402       tmpcr1 |= (uint32_t)Structure->ClockDivision;
000032  68cb              LDR      r3,[r1,#0xc]
000034  431a              ORRS     r2,r2,r3
                  |L87.54|
;;;4403     }
;;;4404   
;;;4405     TIMx->CR1 = tmpcr1;
000036  6002              STR      r2,[r0,#0]
;;;4406   
;;;4407     /* Set the Autoreload value */
;;;4408     TIMx->ARR = (uint32_t)Structure->Period ;
000038  688a              LDR      r2,[r1,#8]
00003a  62c2              STR      r2,[r0,#0x2c]
;;;4409    
;;;4410     /* Set the Prescaler value */
;;;4411     TIMx->PSC = (uint32_t)Structure->Prescaler;
00003c  6809              LDR      r1,[r1,#0]
00003e  6281              STR      r1,[r0,#0x28]
;;;4412   
;;;4413     /* Generate an update event to reload the Prescaler value immediatly */
;;;4414     TIMx->EGR = TIM_EGR_UG;
000040  2101              MOVS     r1,#1
000042  6141              STR      r1,[r0,#0x14]
;;;4415   }
000044  bc70              POP      {r4-r6}
000046  4770              BX       lr
;;;4416   
                          ENDP

                  |L87.72|
                          DCD      0x40010800
                  |L87.76|
                          DCD      0x40011400

                          AREA ||i.TIM_DMACaptureCplt||, CODE, READONLY, ALIGN=1

                  TIM_DMACaptureCplt PROC
;;;4306     */
;;;4307   void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;4308   {
;;;4309     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
;;;4310     
;;;4311     htim->State= HAL_TIM_STATE_READY;
000002  6ac4              LDR      r4,[r0,#0x2c]
000004  2101              MOVS     r1,#1
000006  63a1              STR      r1,[r4,#0x38]
;;;4312     
;;;4313     if (hdma == htim->hdma[TIM_DMA_ID_CC1])
000008  69e2              LDR      r2,[r4,#0x1c]
00000a  4282              CMP      r2,r0
00000c  d101              BNE      |L88.18|
;;;4314     {
;;;4315       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
00000e  6161              STR      r1,[r4,#0x14]
000010  e00f              B        |L88.50|
                  |L88.18|
;;;4316     }
;;;4317     else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
000012  6a21              LDR      r1,[r4,#0x20]
000014  4281              CMP      r1,r0
000016  d102              BNE      |L88.30|
;;;4318     {
;;;4319       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
000018  2002              MOVS     r0,#2
00001a  6160              STR      r0,[r4,#0x14]
00001c  e009              B        |L88.50|
                  |L88.30|
;;;4320     }
;;;4321     else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
00001e  6a61              LDR      r1,[r4,#0x24]
000020  4281              CMP      r1,r0
000022  d101              BNE      |L88.40|
;;;4322     {
;;;4323       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
000024  2004              MOVS     r0,#4
000026  e003              B        |L88.48|
                  |L88.40|
;;;4324     }
;;;4325     else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
000028  6aa1              LDR      r1,[r4,#0x28]
00002a  4281              CMP      r1,r0
00002c  d101              BNE      |L88.50|
;;;4326     {
;;;4327       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
00002e  2008              MOVS     r0,#8
                  |L88.48|
000030  6160              STR      r0,[r4,#0x14]
                  |L88.50|
;;;4328     }
;;;4329     
;;;4330     HAL_TIM_IC_CaptureCallback(htim); 
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       HAL_TIM_IC_CaptureCallback
;;;4331     
;;;4332     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
000038  2000              MOVS     r0,#0
00003a  6160              STR      r0,[r4,#0x14]
;;;4333   }
00003c  bd10              POP      {r4,pc}
;;;4334   
                          ENDP


                          AREA ||i.TIM_DMADelayPulseCplt||, CODE, READONLY, ALIGN=1

                  TIM_DMADelayPulseCplt PROC
;;;4274     */
;;;4275   void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;4276   {
;;;4277     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
;;;4278     
;;;4279     htim->State= HAL_TIM_STATE_READY; 
000002  6ac4              LDR      r4,[r0,#0x2c]
000004  2101              MOVS     r1,#1
000006  63a1              STR      r1,[r4,#0x38]
;;;4280     
;;;4281     if (hdma == htim->hdma[TIM_DMA_ID_CC1])
000008  69e2              LDR      r2,[r4,#0x1c]
00000a  4282              CMP      r2,r0
00000c  d101              BNE      |L89.18|
;;;4282     {
;;;4283       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
00000e  6161              STR      r1,[r4,#0x14]
000010  e00f              B        |L89.50|
                  |L89.18|
;;;4284     }
;;;4285     else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
000012  6a21              LDR      r1,[r4,#0x20]
000014  4281              CMP      r1,r0
000016  d102              BNE      |L89.30|
;;;4286     {
;;;4287       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
000018  2002              MOVS     r0,#2
00001a  6160              STR      r0,[r4,#0x14]
00001c  e009              B        |L89.50|
                  |L89.30|
;;;4288     }
;;;4289     else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
00001e  6a61              LDR      r1,[r4,#0x24]
000020  4281              CMP      r1,r0
000022  d101              BNE      |L89.40|
;;;4290     {
;;;4291       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
000024  2004              MOVS     r0,#4
000026  e003              B        |L89.48|
                  |L89.40|
;;;4292     }
;;;4293     else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
000028  6aa1              LDR      r1,[r4,#0x28]
00002a  4281              CMP      r1,r0
00002c  d101              BNE      |L89.50|
;;;4294     {
;;;4295       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
00002e  2008              MOVS     r0,#8
                  |L89.48|
000030  6160              STR      r0,[r4,#0x14]
                  |L89.50|
;;;4296     }
;;;4297     HAL_TIM_PWM_PulseFinishedCallback(htim);
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       HAL_TIM_PWM_PulseFinishedCallback
;;;4298   
;;;4299     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
000038  2000              MOVS     r0,#0
00003a  6160              STR      r0,[r4,#0x14]
;;;4300   }
00003c  bd10              POP      {r4,pc}
;;;4301   /**
                          ENDP


                          AREA ||i.TIM_DMAError||, CODE, READONLY, ALIGN=1

                  TIM_DMAError PROC
;;;4259     */
;;;4260   void TIM_DMAError(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;4261   {
;;;4262     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6ac0              LDR      r0,[r0,#0x2c]
;;;4263     
;;;4264     htim->State= HAL_TIM_STATE_READY;
000004  2101              MOVS     r1,#1
000006  6381              STR      r1,[r0,#0x38]
;;;4265      
;;;4266     HAL_TIM_ErrorCallback(htim);
000008  f7fffffe          BL       HAL_TIM_ErrorCallback
;;;4267   }
00000c  bd10              POP      {r4,pc}
;;;4268   
                          ENDP


                          AREA ||i.TIM_DMAPeriodElapsedCplt||, CODE, READONLY, ALIGN=1

                  TIM_DMAPeriodElapsedCplt PROC
;;;4354     */
;;;4355   static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;4356   {
;;;4357     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6ac0              LDR      r0,[r0,#0x2c]
;;;4358     
;;;4359     htim->State= HAL_TIM_STATE_READY;
000004  2101              MOVS     r1,#1
000006  6381              STR      r1,[r0,#0x38]
;;;4360     
;;;4361     HAL_TIM_PeriodElapsedCallback(htim);
000008  f7fffffe          BL       HAL_TIM_PeriodElapsedCallback
;;;4362   }
00000c  bd10              POP      {r4,pc}
;;;4363   
                          ENDP


                          AREA ||i.TIM_DMATriggerCplt||, CODE, READONLY, ALIGN=1

                  TIM_DMATriggerCplt PROC
;;;4369     */
;;;4370   static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;4371   {
;;;4372     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;  
000002  6ac0              LDR      r0,[r0,#0x2c]
;;;4373     
;;;4374     htim->State= HAL_TIM_STATE_READY; 
000004  2101              MOVS     r1,#1
000006  6381              STR      r1,[r0,#0x38]
;;;4375     
;;;4376     HAL_TIM_TriggerCallback(htim);
000008  f7fffffe          BL       HAL_TIM_TriggerCallback
;;;4377   }
00000c  bd10              POP      {r4,pc}
;;;4378   
                          ENDP


                          AREA ||i.TIM_SlaveTimer_SetConfig||, CODE, READONLY, ALIGN=1

                  TIM_SlaveTimer_SetConfig PROC
;;;4963     */
;;;4964   static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
000000  b430              PUSH     {r4,r5}
;;;4965                                        TIM_SlaveConfigTypeDef * sSlaveConfig)
;;;4966   {
;;;4967     uint32_t tmpsmcr = 0U;
;;;4968     uint32_t tmpccmr1 = 0U;
;;;4969     uint32_t tmpccer = 0U;
;;;4970   
;;;4971     /* Get the TIMx SMCR register value */
;;;4972     tmpsmcr = htim->Instance->SMCR;
000002  6804              LDR      r4,[r0,#0]
000004  68a2              LDR      r2,[r4,#8]
;;;4973   
;;;4974     /* Reset the Trigger Selection Bits */
;;;4975     tmpsmcr &= ~TIM_SMCR_TS;
000006  2370              MOVS     r3,#0x70
000008  439a              BICS     r2,r2,r3
;;;4976     /* Set the Input Trigger source */
;;;4977     tmpsmcr |= sSlaveConfig->InputTrigger;
00000a  684b              LDR      r3,[r1,#4]
00000c  4313              ORRS     r3,r3,r2
;;;4978   
;;;4979     /* Reset the slave mode Bits */
;;;4980     tmpsmcr &= ~TIM_SMCR_SMS;
00000e  08db              LSRS     r3,r3,#3
;;;4981     /* Set the slave mode */
;;;4982     tmpsmcr |= sSlaveConfig->SlaveMode;
000010  680a              LDR      r2,[r1,#0]
000012  00db              LSLS     r3,r3,#3              ;4980
000014  431a              ORRS     r2,r2,r3
;;;4983   
;;;4984     /* Write to TIMx SMCR */
;;;4985     htim->Instance->SMCR = tmpsmcr;
000016  60a2              STR      r2,[r4,#8]
;;;4986   
;;;4987     /* Configure the trigger prescaler, filter, and polarity */
;;;4988     switch (sSlaveConfig->InputTrigger)
000018  684a              LDR      r2,[r1,#4]
00001a  0713              LSLS     r3,r2,#28
00001c  0f1b              LSRS     r3,r3,#28
00001e  d119              BNE      |L93.84|
000020  1112              ASRS     r2,r2,#4
;;;4989     {
;;;4990     case TIM_TS_ETRF:
;;;4991       {
;;;4992         /* Check the parameters */
;;;4993         assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
;;;4994         assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
;;;4995         assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
;;;4996         assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
;;;4997         /* Configure the ETR Trigger source */
;;;4998         TIM_ETR_SetConfig(htim->Instance,
;;;4999                           sSlaveConfig->TriggerPrescaler,
;;;5000                           sSlaveConfig->TriggerPolarity,
;;;5001                           sSlaveConfig->TriggerFilter);
;;;5002       }
;;;5003       break;
;;;5004   
;;;5005     case TIM_TS_TI1F_ED:
;;;5006       {
;;;5007         /* Check the parameters */
;;;5008         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;5009         assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
;;;5010   
;;;5011         /* Disable the Channel 1: Reset the CC1E Bit */
;;;5012         tmpccer = htim->Instance->CCER;
;;;5013         htim->Instance->CCER &= ~TIM_CCER_CC1E;
;;;5014         tmpccmr1 = htim->Instance->CCMR1;
;;;5015   
;;;5016         /* Set the filter */
;;;5017         tmpccmr1 &= ~TIM_CCMR1_IC1F;
000022  23f0              MOVS     r3,#0xf0
000024  2a08              CMP      r2,#8                 ;4988
000026  d215              BCS      |L93.84|
000028  0014              MOVS     r4,r2                 ;4988
00002a  447c              ADD      r4,r4,pc              ;4988
00002c  7924              LDRB     r4,[r4,#4]            ;4988
00002e  1924              ADDS     r4,r4,r4              ;4988
000030  44a7              ADD      pc,pc,r4              ;4988
000032  1010              DCB      0x10,0x10
000034  10101223          DCB      0x10,0x10,0x12,0x23
000038  3603              DCB      0x36,0x03
00003a  6802              LDR      r2,[r0,#0]            ;4998
00003c  688c              LDR      r4,[r1,#8]            ;4998
00003e  68cb              LDR      r3,[r1,#0xc]          ;4998
000040  6909              LDR      r1,[r1,#0x10]         ;4998
000042  6890              LDR      r0,[r2,#8]            ;4998
000044  25ff              MOVS     r5,#0xff              ;4998
000046  022d              LSLS     r5,r5,#8              ;4998
000048  0209              LSLS     r1,r1,#8              ;4998
00004a  4321              ORRS     r1,r1,r4              ;4998
00004c  43a8              BICS     r0,r0,r5              ;4998
00004e  4319              ORRS     r1,r1,r3              ;4998
000050  4301              ORRS     r1,r1,r0              ;4998
000052  6091              STR      r1,[r2,#8]            ;4998
                  |L93.84|
;;;5018         tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
;;;5019   
;;;5020         /* Write to TIMx CCMR1 and CCER registers */
;;;5021         htim->Instance->CCMR1 = tmpccmr1;
;;;5022         htim->Instance->CCER = tmpccer;
;;;5023   
;;;5024       }
;;;5025       break;
;;;5026   
;;;5027     case TIM_TS_TI1FP1:
;;;5028       {
;;;5029         /* Check the parameters */
;;;5030         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;5031         assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
;;;5032         assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
;;;5033   
;;;5034         /* Configure TI1 Filter and Polarity */
;;;5035         TIM_TI1_ConfigInputStage(htim->Instance,
;;;5036                                  sSlaveConfig->TriggerPolarity,
;;;5037                                  sSlaveConfig->TriggerFilter);
;;;5038       }
;;;5039       break;
;;;5040   
;;;5041     case TIM_TS_TI2FP2:
;;;5042       {
;;;5043         /* Check the parameters */
;;;5044         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;5045         assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
;;;5046         assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
;;;5047   
;;;5048         /* Configure TI2 Filter and Polarity */
;;;5049         TIM_TI2_ConfigInputStage(htim->Instance,
;;;5050                                   sSlaveConfig->TriggerPolarity,
;;;5051                                   sSlaveConfig->TriggerFilter);
;;;5052       }
;;;5053       break;
;;;5054   
;;;5055     case TIM_TS_ITR0:
;;;5056       {
;;;5057         /* Check the parameter */
;;;5058         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;5059       }
;;;5060       break;
;;;5061   
;;;5062     case TIM_TS_ITR1:
;;;5063       {
;;;5064         /* Check the parameter */
;;;5065         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;5066       }
;;;5067       break;
;;;5068   
;;;5069     case TIM_TS_ITR2:
;;;5070       {
;;;5071         /* Check the parameter */
;;;5072         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;5073       }
;;;5074       break;
;;;5075   
;;;5076     case TIM_TS_ITR3:
;;;5077       {
;;;5078         /* Check the parameter */
;;;5079         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;5080       }
;;;5081       break;
;;;5082   
;;;5083     default:
;;;5084       break;
;;;5085     }
;;;5086   }
000054  bc30              POP      {r4,r5}
000056  4770              BX       lr
000058  6802              LDR      r2,[r0,#0]            ;5012
00005a  6a14              LDR      r4,[r2,#0x20]         ;5012
00005c  6a15              LDR      r5,[r2,#0x20]         ;5013
00005e  086d              LSRS     r5,r5,#1              ;5013
000060  006d              LSLS     r5,r5,#1              ;5013
000062  6215              STR      r5,[r2,#0x20]         ;5013
000064  6805              LDR      r5,[r0,#0]            ;5014
000066  69aa              LDR      r2,[r5,#0x18]         ;5014
000068  6909              LDR      r1,[r1,#0x10]         ;5018
00006a  439a              BICS     r2,r2,r3              ;5017
00006c  0109              LSLS     r1,r1,#4              ;5018
00006e  4311              ORRS     r1,r1,r2              ;5018
000070  61a9              STR      r1,[r5,#0x18]         ;5021
000072  6800              LDR      r0,[r0,#0]            ;5022
000074  6204              STR      r4,[r0,#0x20]         ;5022
000076  bc30              POP      {r4,r5}
000078  4770              BX       lr
00007a  6802              LDR      r2,[r0,#0]            ;5035
00007c  690d              LDR      r5,[r1,#0x10]         ;5035
00007e  688c              LDR      r4,[r1,#8]            ;5035
000080  6a10              LDR      r0,[r2,#0x20]         ;5035
000082  6a11              LDR      r1,[r2,#0x20]         ;5035
000084  0849              LSRS     r1,r1,#1              ;5035
000086  0049              LSLS     r1,r1,#1              ;5035
000088  6211              STR      r1,[r2,#0x20]         ;5035
00008a  6991              LDR      r1,[r2,#0x18]         ;5035
00008c  4399              BICS     r1,r1,r3              ;5035
00008e  012b              LSLS     r3,r5,#4              ;5035
000090  430b              ORRS     r3,r3,r1              ;5035
000092  210a              MOVS     r1,#0xa               ;5035
000094  4388              BICS     r0,r0,r1              ;5035
000096  4320              ORRS     r0,r0,r4              ;5035
000098  6193              STR      r3,[r2,#0x18]         ;5035
00009a  6210              STR      r0,[r2,#0x20]         ;5035
00009c  bc30              POP      {r4,r5}
00009e  4770              BX       lr
0000a0  6800              LDR      r0,[r0,#0]            ;5049
0000a2  688c              LDR      r4,[r1,#8]            ;5049
0000a4  690b              LDR      r3,[r1,#0x10]         ;5049
0000a6  6a01              LDR      r1,[r0,#0x20]         ;5049
0000a8  2210              MOVS     r2,#0x10              ;5049
0000aa  4391              BICS     r1,r1,r2              ;5049
0000ac  6201              STR      r1,[r0,#0x20]         ;5049
0000ae  6981              LDR      r1,[r0,#0x18]         ;5049
0000b0  6a02              LDR      r2,[r0,#0x20]         ;5049
0000b2  250f              MOVS     r5,#0xf               ;5049
0000b4  032d              LSLS     r5,r5,#12             ;5049
0000b6  43a9              BICS     r1,r1,r5              ;5049
0000b8  031b              LSLS     r3,r3,#12             ;5049
0000ba  430b              ORRS     r3,r3,r1              ;5049
0000bc  21a0              MOVS     r1,#0xa0              ;5049
0000be  438a              BICS     r2,r2,r1              ;5049
0000c0  0121              LSLS     r1,r4,#4              ;5049
0000c2  4311              ORRS     r1,r1,r2              ;5049
0000c4  6183              STR      r3,[r0,#0x18]         ;5049
0000c6  6201              STR      r1,[r0,#0x20]         ;5049
0000c8  bc30              POP      {r4,r5}
0000ca  4770              BX       lr
;;;5087   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_L0_V1.10.0\\Drivers\\STM32L0xx_HAL_Driver\\Src\\stm32l0xx_hal_tim.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32l0xx_hal_tim_c_a9d95b52____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_L0_V1.10.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32l0xx_hal_tim_c_a9d95b52____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32l0xx_hal_tim_c_a9d95b52____REVSH|
#line 402
|__asm___19_stm32l0xx_hal_tim_c_a9d95b52____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
